{"sha":"9fa9ef4fe825bf29c480303c169413ab997e5707","node_id":"MDY6Q29tbWl0MjA2MzY0OjlmYTllZjRmZTgyNWJmMjljNDgwMzAzYzE2OTQxM2FiOTk3ZTU3MDc=","commit":{"author":{"name":"Heath Thomann","email":"hthomann@apache.org","date":"2012-11-30T03:14:37Z"},"committer":{"name":"Heath Thomann","email":"hthomann@apache.org","date":"2012-11-30T03:14:37Z"},"message":"OPENJPA-2244: Applied Helen's patch to trunk.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1415486 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"002335001761258dcbd9ea180f849a97094d4909","url":"https://api.github.com/repos/apache/openjpa/git/trees/002335001761258dcbd9ea180f849a97094d4909"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/9fa9ef4fe825bf29c480303c169413ab997e5707","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/9fa9ef4fe825bf29c480303c169413ab997e5707","html_url":"https://github.com/apache/openjpa/commit/9fa9ef4fe825bf29c480303c169413ab997e5707","comments_url":"https://api.github.com/repos/apache/openjpa/commits/9fa9ef4fe825bf29c480303c169413ab997e5707/comments","author":null,"committer":null,"parents":[{"sha":"7d897d94ce41035bd8b8d1dca47d6bebd4243e0b","url":"https://api.github.com/repos/apache/openjpa/commits/7d897d94ce41035bd8b8d1dca47d6bebd4243e0b","html_url":"https://github.com/apache/openjpa/commit/7d897d94ce41035bd8b8d1dca47d6bebd4243e0b"}],"stats":{"total":157,"additions":123,"deletions":34},"files":[{"sha":"c0f2dbf1930b3c12ed2097d4862dc00ee2fdf67b","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/ant/AbstractTask.java","status":"modified","additions":30,"deletions":8,"changes":38,"blob_url":"https://github.com/apache/openjpa/blob/9fa9ef4fe825bf29c480303c169413ab997e5707/openjpa-lib/src/main/java/org/apache/openjpa/lib/ant/AbstractTask.java","raw_url":"https://github.com/apache/openjpa/raw/9fa9ef4fe825bf29c480303c169413ab997e5707/openjpa-lib/src/main/java/org/apache/openjpa/lib/ant/AbstractTask.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/ant/AbstractTask.java?ref=9fa9ef4fe825bf29c480303c169413ab997e5707","patch":"@@ -22,13 +22,17 @@\n import java.security.AccessController;\n import java.util.ArrayList;\n import java.util.List;\n+import java.util.Map;\n \n+import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.lib.conf.Configuration;\n import org.apache.openjpa.lib.conf.ConfigurationImpl;\n import org.apache.openjpa.lib.conf.ConfigurationProvider;\n+import org.apache.openjpa.lib.conf.Configurations;\n import org.apache.openjpa.lib.conf.ProductDerivations;\n import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.lib.util.MultiClassLoader;\n import org.apache.tools.ant.AntClassLoader;\n import org.apache.tools.ant.BuildException;\n import org.apache.tools.ant.DirectoryScanner;\n@@ -92,8 +96,10 @@ public void setUseParentClassloader(boolean useParent) {\n      * The task configuration.\n      */\n     public Configuration getConfiguration() {\n-        if (_conf == null)\n-            _conf = newConfiguration();\n+        if (_conf == null) {\n+             _conf = newConfiguration();\n+            _conf.setDeferResourceLoading(true);\n+        }    \n         return _conf;\n     }\n \n@@ -158,12 +164,19 @@ public void execute() throws BuildException {\n         // if the user didn't supply a conf file, load the default\n         if (_conf == null)\n             _conf = newConfiguration();\n-        if (_conf.getPropertiesResource() == null) {\n-            ConfigurationProvider cp = ProductDerivations.loadDefaults\n-                (AccessController.doPrivileged(\n-                    J2DoPrivHelper.getClassLoaderAction(_conf.getClass())));\n-            if (cp != null)\n-                cp.setInto(_conf);\n+        ConfigurationProvider cp = null;\n+        String propertiesResource = _conf.getPropertiesResource();\n+        if ( propertiesResource == null) {            \n+            cp = ProductDerivations.loadDefaults(getConfigPropertiesResourceLoader());           \n+        } else if (_conf.isDeferResourceLoading() && !StringUtils.isEmpty(propertiesResource)) {\n+            Map<String, String> result = Configurations.parseConfigResource(propertiesResource);\n+            String path = result.get(Configurations.CONFIG_RESOURCE_PATH);\n+            String anchor = result.get(Configurations.CONFIG_RESOURCE_ANCHOR);\n+            cp = ProductDerivations.load(path, anchor, getConfigPropertiesResourceLoader());\n+        }\n+\n+        if (cp != null){\n+            cp.setInto(_conf);\n         }\n \n         String[] files = getFiles();\n@@ -179,6 +192,15 @@ public void execute() throws BuildException {\n         }\n     }\n \n+    private MultiClassLoader getConfigPropertiesResourceLoader() {\n+        MultiClassLoader loader = AccessController\n+                .doPrivileged(J2DoPrivHelper.newMultiClassLoaderAction());\n+        loader.addClassLoader(getClassLoader());\n+        loader.addClassLoader(AccessController.doPrivileged(\n+                J2DoPrivHelper.getClassLoaderAction(_conf.getClass())));        \n+        return loader;\n+    }\n+\n     private String[] getFiles() {\n         List<String> files = new ArrayList<String>();\n         for(FileSet fs : fileSets) { "},{"sha":"7447bb025509d2be310a6cf68202cbe5478b0e3d","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java","status":"modified","additions":22,"deletions":8,"changes":30,"blob_url":"https://github.com/apache/openjpa/blob/9fa9ef4fe825bf29c480303c169413ab997e5707/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/9fa9ef4fe825bf29c480303c169413ab997e5707/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java?ref=9fa9ef4fe825bf29c480303c169413ab997e5707","patch":"@@ -126,6 +126,9 @@\n     // cache descriptors\n     private PropertyDescriptor[] _pds = null;\n     private MethodDescriptor[] _mds = null;\n+    //Ant task needs to defer the resource loading \n+    //until the classpath setting is loaded properly\n+    private boolean _deferResourceLoading = false; \n \n     /**\n      * Default constructor. Attempts to load default properties through\n@@ -272,6 +275,14 @@ public void setReadOnly(int newState) {\n         }\n     }\n \n+    public boolean isDeferResourceLoading() {\n+        return _deferResourceLoading;\n+    }\n+ \n+    public void setDeferResourceLoading(boolean deferResourceLoading) {\n+        this._deferResourceLoading = deferResourceLoading;\n+    }\n+\n     public void instantiateAll() {\n         StringWriter errs = null;\n         PrintWriter stack = null;\n@@ -843,15 +854,17 @@ protected boolean isInvalidProperty(String propName) {\n      * <code>properties</code> value with the name of a resource.\n      */\n     public void setProperties(String resourceName) throws IOException {\n-        String anchor = null;\n-        if (resourceName.indexOf(\"#\") != -1)\n-        {\n-            anchor = resourceName.substring(resourceName.lastIndexOf(\"#\") + 1);\n-            resourceName = resourceName.substring(0,\n-                resourceName.length() - anchor.length() - 1);\n+\n+        if (!_deferResourceLoading) {\n+            String anchor = null;\n+            if (resourceName.indexOf(\"#\") != -1) {\n+                anchor = resourceName.substring(resourceName.lastIndexOf(\"#\") + 1);\n+                resourceName = resourceName.substring(0, resourceName.length() - anchor.length() - 1);\n+            }\n+\n+            ProductDerivations.load(resourceName, anchor, getClass().getClassLoader()).setInto(this);\n         }\n-        ProductDerivations.load(resourceName, anchor,\n-            getClass().getClassLoader()).setInto(this);\n+\n         _auto = resourceName;\n     }\n \n@@ -863,6 +876,7 @@ public void setProperties(String resourceName) throws IOException {\n     public void setPropertiesFile(File file) throws IOException {\n         ProductDerivations.load(file, null, getClass().getClassLoader()).\n             setInto(this);\n+        setDeferResourceLoading(false);\n         _auto = file.toString();\n     }\n "},{"sha":"81ac833299c98f03d07172d319ff576b8de6edb3","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java","status":"modified","additions":26,"deletions":13,"changes":39,"blob_url":"https://github.com/apache/openjpa/blob/9fa9ef4fe825bf29c480303c169413ab997e5707/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java","raw_url":"https://github.com/apache/openjpa/raw/9fa9ef4fe825bf29c480303c169413ab997e5707/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java?ref=9fa9ef4fe825bf29c480303c169413ab997e5707","patch":"@@ -23,6 +23,7 @@\n import java.security.PrivilegedActionException;\n import java.util.Arrays;\n import java.util.Collection;\n+import java.util.HashMap;\n import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n@@ -40,7 +41,6 @@\n import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n-import org.apache.openjpa.lib.util.MultiClassLoader;\n import org.apache.openjpa.lib.util.Options;\n import org.apache.openjpa.lib.util.ParseException;\n import org.apache.openjpa.lib.util.StringDistance;\n@@ -65,6 +65,9 @@\n \n     private static final Object NULL_LOADER = \"null-loader\";\n \n+    public static final String CONFIG_RESOURCE_PATH = \"configResourcePath\";\n+    public static final String CONFIG_RESOURCE_ANCHOR = \"configResourceAnchor\";\n+\n     /**\n      * Return the class name from the given plugin string, or null if none.\n      */\n@@ -331,18 +334,9 @@ public static void populateConfiguration(Configuration conf, Options opts) {\n         String props = opts.removeProperty(\"properties\", \"p\", null);\n         ConfigurationProvider provider;\n         if (!StringUtils.isEmpty(props)) {\n-            String path = props;\n-            String anchor = null;\n-            int idx = path.lastIndexOf('#');\n-            if (idx != -1) {\n-                if (idx < path.length() - 1)\n-                    anchor = path.substring(idx + 1);\n-                path = path.substring(0, idx);\n-                if (path.length() == 0)\n-                    throw new MissingResourceException(_loc.get(\"anchor-only\",\n-                        props).getMessage(), Configurations.class.getName(), \n-                        props);\n-            }\n+            Map<String, String> result = parseConfigResource(props);\n+            String path = result.get(CONFIG_RESOURCE_PATH);\n+            String anchor = result.get(CONFIG_RESOURCE_ANCHOR);\n \n             File file = new File(path);\n             if ((AccessController.doPrivileged(J2DoPrivHelper\n@@ -370,6 +364,25 @@ public static void populateConfiguration(Configuration conf, Options opts) {\n         opts.setInto(conf);\n     }\n \n+    public static Map<String, String> parseConfigResource(String props) {\n+        String path = props;\n+        String anchor = null;\n+        int idx = path.lastIndexOf('#');\n+        if (idx != -1) {\n+            if (idx < path.length() - 1)\n+                anchor = path.substring(idx + 1);\n+            path = path.substring(0, idx);\n+            if (path.length() == 0)\n+                throw new MissingResourceException(_loc.get(\"anchor-only\",\n+                    props).getMessage(), Configurations.class.getName(), \n+                    props);\n+        }\n+        Map <String, String> result = new HashMap<String, String>();\n+        result.put(CONFIG_RESOURCE_PATH, path);\n+        result.put(CONFIG_RESOURCE_ANCHOR, anchor);\n+        return result;\n+    }\n+\n     /**\n      * Helper method to throw an informative description on instantiation error.\n      */"},{"sha":"d8c46d7667e1f3abf36480329d087fe0195a9ee2","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java","status":"modified","additions":20,"deletions":2,"changes":22,"blob_url":"https://github.com/apache/openjpa/blob/9fa9ef4fe825bf29c480303c169413ab997e5707/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java","raw_url":"https://github.com/apache/openjpa/raw/9fa9ef4fe825bf29c480303c169413ab997e5707/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java?ref=9fa9ef4fe825bf29c480303c169413ab997e5707","patch":"@@ -61,6 +61,7 @@\n import org.apache.openjpa.lib.meta.XMLVersionParser;\n import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.lib.util.MultiClassLoader;\n import org.xml.sax.Attributes;\n import org.xml.sax.SAXException;\n \n@@ -512,8 +513,11 @@ public boolean checkPuNameCollisions(Log logger,String puName){\n     private Boolean load(ConfigurationProviderImpl cp, String rsrc, \n         String name, Map m, ClassLoader loader, boolean explicit)\n         throws IOException {\n-        if (loader == null)\n-            loader = AccessController.doPrivileged(J2DoPrivHelper.getContextClassLoaderAction());\n+        ClassLoader contextLoader = null;         \n+        if (loader == null) {\n+            contextLoader = AccessController.doPrivileged(J2DoPrivHelper.getContextClassLoaderAction());\n+            loader = contextLoader;\n+        }\n \n         List<URL> urls = getResourceURLs(rsrc, loader);\n         if (urls == null || urls.size() == 0)\n@@ -537,8 +541,22 @@ private Boolean load(ConfigurationProviderImpl cp, String rsrc,\n         }\n \n         // Process jar-file references after confirming OpenJPA is the desired JPA provider.\n+        if ( loader != contextLoader && loader instanceof MultiClassLoader) {\n+            // combine the MultiClassLoader and set to the context \n+            // so that it could be used in the jar validation\n+            MultiClassLoader mutliClassLoader = (MultiClassLoader) loader;\n+            contextLoader = (contextLoader != null) ? contextLoader \n+                    : AccessController.doPrivileged(J2DoPrivHelper.getContextClassLoaderAction());\n+            mutliClassLoader.addClassLoader(contextLoader);\n+            AccessController.doPrivileged(J2DoPrivHelper.setContextClassLoaderAction(mutliClassLoader));\n+        }\n         pinfo.processJarFileNames();\n \n+        if (contextLoader != null) {\n+            //restore the context loader\n+            AccessController.doPrivileged(J2DoPrivHelper.setContextClassLoaderAction(contextLoader));\n+        }\n+\n         cp.addProperties(pinfo.toOpenJPAProperties());\n         cp.setSource(pinfo.getPersistenceXmlFileUrl().toString());\n         return Boolean.TRUE;"},{"sha":"c5d1e54b2e527436e7a795ea43ff5f8c3348aee6","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceUnitInfoImpl.java","status":"modified","additions":25,"deletions":3,"changes":28,"blob_url":"https://github.com/apache/openjpa/blob/9fa9ef4fe825bf29c480303c169413ab997e5707/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceUnitInfoImpl.java","raw_url":"https://github.com/apache/openjpa/raw/9fa9ef4fe825bf29c480303c169413ab997e5707/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceUnitInfoImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceUnitInfoImpl.java?ref=9fa9ef4fe825bf29c480303c169413ab997e5707","patch":"@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence;\n \n import java.io.File;\n+import java.lang.reflect.Method;\n import java.net.MalformedURLException;\n import java.net.URISyntaxException;\n import java.net.URL;\n@@ -237,8 +238,10 @@ public void processJarFileNames() {\n     }\n     \n     public void validateJarFileName(String name) {\n+        ClassLoader contextClassLoader = AccessController.doPrivileged(J2DoPrivHelper.getContextClassLoaderAction());\n         MultiClassLoader loader = AccessController\n             .doPrivileged(J2DoPrivHelper.newMultiClassLoaderAction());\n+        loader.addClassLoader(contextClassLoader);\n         loader.addClassLoader(getClass().getClassLoader());\n         loader.addClassLoader(MultiClassLoader.THREAD_LOADER);\n         URL url = AccessController.doPrivileged(\n@@ -249,9 +252,28 @@ public void validateJarFileName(String name) {\n         }\n \n         // jar file is not a resource; check classpath\n-        String[] cp = (AccessController.doPrivileged(\n-            J2DoPrivHelper.getPropertyAction(\"java.class.path\"))) \n-            .split(J2DoPrivHelper.getPathSeparator());\n+        String classPath = null;        \n+\n+        //first check if the classpath is set from ant class loader\n+        if (contextClassLoader instanceof MultiClassLoader) {\n+            for (ClassLoader classLoader : ((MultiClassLoader) contextClassLoader).getClassLoaders()){\n+                try {\n+                    Method getClassPathMethod = classLoader.getClass().getMethod(\"getClasspath\", new Class[]{});\n+                    classPath = (String) getClassPathMethod.invoke(classLoader, new Object[]{});\n+                    if (classPath != null) \n+                        break;\n+                } catch (Exception e) {\n+                    //do nothing\n+                } \n+            }                \n+        }                \n+        \n+        if (classPath == null) {\n+            classPath = AccessController.doPrivileged(\n+                    J2DoPrivHelper.getPropertyAction(\"java.class.path\"));\n+        }\n+        String[] cp = classPath.split(J2DoPrivHelper.getPathSeparator());\n+\n         for (int i = 0; i < cp.length; i++) {\n             if (cp[i].equals(name)\n                 || cp[i].endsWith(File.separatorChar + name)) {"}]}

