{"sha":"a06d373573b5e12ba309ef9e6137ee4e759eae5e","node_id":"MDY6Q29tbWl0MjA2MzY0OmEwNmQzNzM1NzNiNWUxMmJhMzA5ZWY5ZTYxMzdlZTRlNzU5ZWFlNWU=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2012-10-01T22:15:42Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2012-10-01T22:15:42Z"},"message":"OPENJPA-2247 Complete fix for 1x1 bi and mx1 uni relationships of the described problem.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1392661 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"429bb37d17bec18a72da2b6af7028b8b90a3fa89","url":"https://api.github.com/repos/apache/openjpa/git/trees/429bb37d17bec18a72da2b6af7028b8b90a3fa89"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a06d373573b5e12ba309ef9e6137ee4e759eae5e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a06d373573b5e12ba309ef9e6137ee4e759eae5e","html_url":"https://github.com/apache/openjpa/commit/a06d373573b5e12ba309ef9e6137ee4e759eae5e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a06d373573b5e12ba309ef9e6137ee4e759eae5e/comments","author":null,"committer":null,"parents":[{"sha":"1c2ec168ed7a65534db50a8a11c1ba70e797e663","url":"https://api.github.com/repos/apache/openjpa/commits/1c2ec168ed7a65534db50a8a11c1ba70e797e663","html_url":"https://github.com/apache/openjpa/commit/1c2ec168ed7a65534db50a8a11c1ba70e797e663"}],"stats":{"total":75,"additions":69,"deletions":6},"files":[{"sha":"e5766c8236c410edac671b5454a01136964fdded","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingRepository.java","status":"modified","additions":10,"deletions":4,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/a06d373573b5e12ba309ef9e6137ee4e759eae5e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingRepository.java","raw_url":"https://github.com/apache/openjpa/raw/a06d373573b5e12ba309ef9e6137ee4e759eae5e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingRepository.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingRepository.java?ref=a06d373573b5e12ba309ef9e6137ee4e759eae5e","patch":"@@ -88,7 +88,6 @@\n import org.apache.openjpa.lib.conf.Configurable;\n import org.apache.openjpa.lib.conf.Configurations;\n import org.apache.openjpa.lib.util.J2DoPrivHelper;\n-import org.apache.openjpa.lib.util.JavaVersions;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.meta.FieldMetaData;\n@@ -1084,7 +1083,10 @@ public boolean isUniMTo1JT(FieldMapping field) {\n             field.getAssociationType() == FieldMetaData.MANY_TO_ONE &&\n             hasJoinTable(field) && \n             !isBidirectional(field))  {\n-            field.getValueMapping().getValueInfo().setColumns(field.getElementMapping().getValueInfo().getColumns());\n+            List<Column> cols = field.getElementMapping().getValueInfo().getColumns();\n+            if (cols != null && cols.size() > 0) {\n+                field.getValueMapping().getValueInfo().setColumns(cols);\n+            }\n             return true;\n         }\n         return false;\n@@ -1096,8 +1098,9 @@ public boolean isUni1To1JT(FieldMapping field) {\n             hasJoinTable(field) && \n             !isBidirectional(field)) {\n             List<Column> cols = field.getElementMapping().getValueInfo().getColumns();\n-            if (cols != null && cols.size() > 0)\n+            if (cols != null && cols.size() > 0) {\n                 field.getValueMapping().getValueInfo().setColumns(cols);\n+            }\n             return true;\n         }\n         return false;\n@@ -1108,7 +1111,10 @@ public boolean isBi1To1JT(FieldMapping field) {\n             field.getAssociationType() == FieldMetaData.ONE_TO_ONE && \n             hasJoinTable(field) && \n             isBidirectional(field)) {\n-            field.getValueMapping().getValueInfo().setColumns(field.getElementMapping().getValueInfo().getColumns());\n+            List<Column> cols = field.getElementMapping().getValueInfo().getColumns();\n+            if (cols != null && cols.size() > 0) {\n+                field.getValueMapping().getValueInfo().setColumns(cols);\n+            }\n             return true;\n         }\n         return false;"},{"sha":"7ee128d2114af6cf5c505cf8eefb8ebdac31a053","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/PChildBi.java","status":"added","additions":42,"deletions":0,"changes":42,"blob_url":"https://github.com/apache/openjpa/blob/a06d373573b5e12ba309ef9e6137ee4e759eae5e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/PChildBi.java","raw_url":"https://github.com/apache/openjpa/raw/a06d373573b5e12ba309ef9e6137ee4e759eae5e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/PChildBi.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/PChildBi.java?ref=a06d373573b5e12ba309ef9e6137ee4e759eae5e","patch":"@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.meta;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.OneToOne;\n+import javax.persistence.Version;\n+\n+@Entity\n+public class PChildBi {\n+    @Id\n+    @GeneratedValue\n+    int idChild;\n+    \n+    @Version\n+    int version;\n+    \n+    @Basic\n+    String basic;\n+    \n+    @OneToOne\n+    Parent parent;\n+}"},{"sha":"39945b4706a2679253e2faece0f4c2caeb81cb02","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/Parent.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/a06d373573b5e12ba309ef9e6137ee4e759eae5e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/Parent.java","raw_url":"https://github.com/apache/openjpa/raw/a06d373573b5e12ba309ef9e6137ee4e759eae5e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/Parent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/Parent.java?ref=a06d373573b5e12ba309ef9e6137ee4e759eae5e","patch":"@@ -22,6 +22,7 @@\n import javax.persistence.GeneratedValue;\r\n import javax.persistence.Id;\r\n import javax.persistence.JoinColumn;\r\n+import javax.persistence.ManyToOne;\r\n import javax.persistence.OneToOne;\r\n import javax.persistence.PrimaryKeyJoinColumn;\r\n import javax.persistence.SecondaryTable;\r\n@@ -41,4 +42,11 @@\n     @JoinColumn(name = \"CHILD_REF\", table = \"ParentSecondaryTable\", referencedColumnName = \"idChild\")\r\n     PChild child;\r\n \r\n+    @OneToOne\r\n+    @JoinColumn(name = \"CHILDBI_REF\", table = \"ParentSecondaryTable\", referencedColumnName = \"idChild\")\r\n+    PChildBi childbi;\r\n+\r\n+    @ManyToOne\r\n+    @JoinColumn(name = \"CHILDREN_REF\", table = \"ParentSecondaryTable\", referencedColumnName = \"idChild\")\r\n+    PChild children;\r\n }\r"},{"sha":"0eec928d2a851d16976bf9634b6c3b2298766aba","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/TestSecondaryTable.java","status":"modified","additions":9,"deletions":2,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/a06d373573b5e12ba309ef9e6137ee4e759eae5e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/TestSecondaryTable.java","raw_url":"https://github.com/apache/openjpa/raw/a06d373573b5e12ba309ef9e6137ee4e759eae5e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/TestSecondaryTable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/TestSecondaryTable.java?ref=a06d373573b5e12ba309ef9e6137ee4e759eae5e","patch":"@@ -23,7 +23,7 @@\n \r\n public class TestSecondaryTable extends SingleEMFTestCase {\r\n     public void setUp() {\r\n-        setUp(Parent.class, PChild.class\r\n+        setUp(Parent.class, PChild.class, PChildBi.class\r\n         // Hard code to 2.0 p.xml value. If the p.xml is 1.0, this value will be changed to false, and the test\r\n         // won't fail.\r\n             , \"openjpa.Compatibility\", \"NonDefaultMappingAllowed=true\");\r\n@@ -36,6 +36,13 @@ public void testMappingInfo() {\n         FieldMapping fm = getMapping(Parent.class).getFieldMapping(\"child\");\r\n         assertNotNull(fm);\r\n         assertEquals(\"CHILD_REF\", fm.getColumns()[0].getIdentifier().getName());\r\n-    }\r\n \r\n+        fm = getMapping(Parent.class).getFieldMapping(\"childbi\");\r\n+        assertNotNull(fm);\r\n+        assertEquals(\"CHILDBI_REF\", fm.getColumns()[0].getIdentifier().getName());\r\n+\r\n+        fm = getMapping(Parent.class).getFieldMapping(\"children\");\r\n+        assertNotNull(fm);\r\n+        assertEquals(\"CHILDREN_REF\", fm.getColumns()[0].getIdentifier().getName());\r\n+    }\r\n }\r"}]}

