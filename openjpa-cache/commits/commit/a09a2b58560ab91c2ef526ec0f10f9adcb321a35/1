{"sha":"a09a2b58560ab91c2ef526ec0f10f9adcb321a35","node_id":"MDY6Q29tbWl0MjA2MzY0OmEwOWEyYjU4NTYwYWI5MWMyZWY1MjZlYzBmMTBmOWFkY2IzMjFhMzU=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-11-04T20:58:09Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-11-04T20:58:09Z"},"message":"OPENJPA-1870 OPENJPA-740: adding testcase\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1031240 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b0cdbb4e72ed91b48dcc8d8bcbe8f2776379537a","url":"https://api.github.com/repos/apache/openjpa/git/trees/b0cdbb4e72ed91b48dcc8d8bcbe8f2776379537a"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a09a2b58560ab91c2ef526ec0f10f9adcb321a35","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a09a2b58560ab91c2ef526ec0f10f9adcb321a35","html_url":"https://github.com/apache/openjpa/commit/a09a2b58560ab91c2ef526ec0f10f9adcb321a35","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a09a2b58560ab91c2ef526ec0f10f9adcb321a35/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"33c8d872b456b9633ca3c2b3529fddbaf91fc31e","url":"https://api.github.com/repos/apache/openjpa/commits/33c8d872b456b9633ca3c2b3529fddbaf91fc31e","html_url":"https://github.com/apache/openjpa/commit/33c8d872b456b9633ca3c2b3529fddbaf91fc31e"}],"stats":{"total":212,"additions":212,"deletions":0},"files":[{"sha":"954a8fdfbbd23ac504e8d26fbc5a00ee0fc36ab1","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/blob/mysql/BlobColumnEntity.java","status":"added","additions":105,"deletions":0,"changes":105,"blob_url":"https://github.com/apache/openjpa/blob/a09a2b58560ab91c2ef526ec0f10f9adcb321a35/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/blob/mysql/BlobColumnEntity.java","raw_url":"https://github.com/apache/openjpa/raw/a09a2b58560ab91c2ef526ec0f10f9adcb321a35/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/blob/mysql/BlobColumnEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/blob/mysql/BlobColumnEntity.java?ref=a09a2b58560ab91c2ef526ec0f10f9adcb321a35","patch":"@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.blob.mysql;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.Lob;\n+\n+@Entity\n+public class BlobColumnEntity {\n+    @Id\n+    private int id;\n+\n+    @Lob\n+    @Column(length = 20)\n+    protected byte[] smallLob;\n+\n+    @Lob\n+    @Column(length = 300)\n+    protected byte[] oldLob;\n+    \n+    @Lob\n+    @Column(length = 66000)\n+    protected byte[] medLob;\n+    \n+    @Lob\n+    @Column(length = 16777216)\n+    protected byte[] longLob;\n+    \n+    @Lob\n+    protected byte[] defaultLob;\n+\n+    /**\n+     * Not suitable for all databases\n+     */\n+    @Lob\n+    @Column(columnDefinition = \"BINARY(32)\")\n+    protected byte[] definedLob;\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public byte[] getSmallLob() {\n+        return smallLob;\n+    }\n+\n+    public void setSmallLob(byte[] smallLob) {\n+        this.smallLob = smallLob;\n+    }\n+\n+    public byte[] getMedLob() {\n+        return medLob;\n+    }\n+\n+    public void setMedLob(byte[] medLob) {\n+        this.medLob = medLob;\n+    }\n+\n+    public byte[] getLongLob() {\n+        return longLob;\n+    }\n+\n+    public void setLongLob(byte[] longLob) {\n+        this.longLob = longLob;\n+    }\n+\n+    public byte[] getDefaultLob() {\n+        return defaultLob;\n+    }\n+\n+    public void setDefaultLob(byte[] defaultLob) {\n+        this.defaultLob = defaultLob;\n+    }\n+\n+    public byte[] getDefinedLob() {\n+        return definedLob;\n+    }\n+\n+    public void setDefinedLob(byte[] definedLob) {\n+        this.definedLob = definedLob;\n+    }\n+\n+}"},{"sha":"71f45b6b6052b65e4ea8b0c95cb204e4693849e7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/blob/mysql/TestBlobColumnType.java","status":"added","additions":107,"deletions":0,"changes":107,"blob_url":"https://github.com/apache/openjpa/blob/a09a2b58560ab91c2ef526ec0f10f9adcb321a35/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/blob/mysql/TestBlobColumnType.java","raw_url":"https://github.com/apache/openjpa/raw/a09a2b58560ab91c2ef526ec0f10f9adcb321a35/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/blob/mysql/TestBlobColumnType.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/blob/mysql/TestBlobColumnType.java?ref=a09a2b58560ab91c2ef526ec0f10f9adcb321a35","patch":"@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.blob.mysql;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.jdbc.identifier.DBIdentifier;\n+import org.apache.openjpa.jdbc.identifier.DBIdentifier.DBIdentifierType;\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\n+import org.apache.openjpa.jdbc.schema.Column;\n+import org.apache.openjpa.jdbc.schema.Table;\n+import org.apache.openjpa.jdbc.sql.MySQLDictionary;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+/**\n+ * Testcase for MySQL Blob types. OPENJPA-740 introduced intelligent column type for BLOBs, OPENJPA-1870 refined it a\n+ * bit.  \n+ */\n+public class TestBlobColumnType extends SingleEMFTestCase {\n+\n+    private static boolean _firstRun=true;\n+    private boolean _runTest = false; // only test with MySQL \n+\n+    public void setUp() throws Exception {\n+        \n+        // create EMF solely to obtain a DBDictionary.\n+        // need to do this without BlobColumnEntity.class since it contains a column definition which might\n+        // not work with all databases. \n+        super.setUp((Object) null);\n+        if (!(getDBDictionary() instanceof MySQLDictionary)) {\n+            // normal teardown will take care of the EMF.\n+            return;\n+        }\n+        \n+        // remove the EMF\n+        tearDown();\n+        \n+        _runTest = true;\n+        super.setUp(BlobColumnEntity.class, DROP_TABLES, \"openjpa.jdbc.SchemaFactory\", \"native\");\n+        \n+        if(_firstRun) { \n+            emf.createEntityManager().close(); // trigger table creation.\n+            _firstRun = false; \n+        }\n+    }\n+\n+    private Column getCol(String name) { \n+        ClassMapping mapping = getMapping(BlobColumnEntity.class);\n+\n+        Table t = mapping.getTable();\n+        Column col = t.getColumn(DBIdentifier.newIdentifier(name, DBIdentifierType.COLUMN, true));\n+        assertNotNull(col);\n+        return col;\n+    }\n+    \n+    public void testSmallLob() {\n+        if (_runTest) {\n+            assertEquals(MySQLDictionary.tinyBlobTypeName, getCol(\"smallLob\").getTypeIdentifier().getName());\n+        }\n+    }\n+    \n+    public void testMedLob() {\n+        if (_runTest) {\n+            assertEquals(MySQLDictionary.mediumBlobTypeName, getCol(\"medLob\").getTypeIdentifier().getName());\n+        }\n+    }\n+    \n+    public void testLongBlob() {\n+        if (_runTest) {\n+            assertEquals(MySQLDictionary.longBlobTypeName, getCol(\"longLob\").getTypeIdentifier().getName());\n+        }\n+    }\n+    \n+    public void testOldLob() {\n+        if (_runTest) {\n+            assertEquals(getDBDictionary().blobTypeName, getCol(\"oldLob\").getTypeIdentifier().getName());\n+        }\n+    }\n+    \n+    public void testDefaultLob() {\n+        if (_runTest) {\n+            assertEquals(getDBDictionary().blobTypeName, getCol(\"defaultLob\").getTypeIdentifier().getName());\n+        }\n+    }\n+    \n+    public void testDefinedLob() {\n+        if (_runTest) {\n+            assertEquals(\"BINARY\", getCol(\"definedLob\").getTypeIdentifier().getName());\n+        }\n+    }\n+}"}]}

