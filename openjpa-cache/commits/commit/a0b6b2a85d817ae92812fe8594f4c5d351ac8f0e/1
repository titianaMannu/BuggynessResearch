{"sha":"a0b6b2a85d817ae92812fe8594f4c5d351ac8f0e","node_id":"MDY6Q29tbWl0MjA2MzY0OmEwYjZiMmE4NWQ4MTdhZTkyODEyZmU4NTk0ZjRjNWQzNTFhYzhmMGU=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2010-07-17T00:16:39Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2010-07-17T00:16:39Z"},"message":"OPENJPA-1726: fix boolean literal for Postgres\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@964989 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"123f8ccdc99fcef93eb9815f01968363079eda4e","url":"https://api.github.com/repos/apache/openjpa/git/trees/123f8ccdc99fcef93eb9815f01968363079eda4e"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a0b6b2a85d817ae92812fe8594f4c5d351ac8f0e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a0b6b2a85d817ae92812fe8594f4c5d351ac8f0e","html_url":"https://github.com/apache/openjpa/commit/a0b6b2a85d817ae92812fe8594f4c5d351ac8f0e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a0b6b2a85d817ae92812fe8594f4c5d351ac8f0e/comments","author":null,"committer":null,"parents":[{"sha":"90373cb93fbff9cb8605401f4ff64d15b300e858","url":"https://api.github.com/repos/apache/openjpa/commits/90373cb93fbff9cb8605401f4ff64d15b300e858","html_url":"https://github.com/apache/openjpa/commit/90373cb93fbff9cb8605401f4ff64d15b300e858"}],"stats":{"total":20,"additions":16,"deletions":4},"files":[{"sha":"5a1ac561d0c6f6aab9877687f503ac47856056e4","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreQuery.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/a0b6b2a85d817ae92812fe8594f4c5d351ac8f0e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/a0b6b2a85d817ae92812fe8594f4c5d351ac8f0e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreQuery.java?ref=a0b6b2a85d817ae92812fe8594f4c5d351ac8f0e","patch":"@@ -49,6 +49,7 @@\n import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.jdbc.schema.Table;\n import org.apache.openjpa.jdbc.sql.DBDictionary;\n+import org.apache.openjpa.jdbc.sql.PostgresDictionary;\n import org.apache.openjpa.jdbc.sql.SQLBuffer;\n import org.apache.openjpa.jdbc.sql.SQLExceptions;\n import org.apache.openjpa.jdbc.sql.Select;\n@@ -142,7 +143,10 @@ public boolean supportsDataStoreExecution() {\n     }\n \n     protected ExpressionFactory getExpressionFactory(ClassMetaData meta) {\n-        return new JDBCExpressionFactory((ClassMapping) meta);\n+        JDBCExpressionFactory factory = new JDBCExpressionFactory((ClassMapping) meta);\n+        if (_store.getDBDictionary() instanceof PostgresDictionary)\n+            factory.setBooleanLiteralAsNumeric(false);\n+        return factory;\n     }\n     \n     protected ResultObjectProvider executeQuery(Executor ex,"},{"sha":"cf2c1b74f05ab70ec2d32700b021845daeea3d24","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/JDBCExpressionFactory.java","status":"modified","additions":11,"deletions":3,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/a0b6b2a85d817ae92812fe8594f4c5d351ac8f0e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/JDBCExpressionFactory.java","raw_url":"https://github.com/apache/openjpa/raw/a0b6b2a85d817ae92812fe8594f4c5d351ac8f0e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/JDBCExpressionFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/JDBCExpressionFactory.java?ref=a0b6b2a85d817ae92812fe8594f4c5d351ac8f0e","patch":"@@ -25,6 +25,7 @@\n import org.apache.openjpa.jdbc.meta.Discriminator;\n import org.apache.openjpa.jdbc.meta.strats.NoneDiscriminatorStrategy;\n import org.apache.openjpa.jdbc.sql.DBDictionary;\n+import org.apache.openjpa.jdbc.sql.PostgresDictionary;\n import org.apache.openjpa.jdbc.sql.Raw;\n import org.apache.openjpa.kernel.exps.AggregateListener;\n import org.apache.openjpa.kernel.exps.Arguments;\n@@ -57,6 +58,8 @@\n     private final ClassMapping _type;\n     private final SelectConstructor _cons = new SelectConstructor();\n     private int _getMapValueAlias = 0;\n+    \n+    private boolean _isBooleanLiteralAsNumeric = true;\n \n     /**\n      * Constructor. Supply the type we're querying against.\n@@ -65,6 +68,10 @@ public JDBCExpressionFactory(ClassMapping type) {\n         _type = type;\n     }\n \n+    public void setBooleanLiteralAsNumeric(boolean isBooleanLiteralAsNumeric) {\n+        _isBooleanLiteralAsNumeric = isBooleanLiteralAsNumeric;\n+    }\n+    \n     /**\n      * Use to create SQL select.\n      */\n@@ -504,10 +511,11 @@ private Value getLiteralRawString(Value val) {\n                 pType == Literal.TYPE_STRING)\n                 value.append(\"'\").append(lit.getValue().toString()).append(\"'\");\n             else if (pType == Literal.TYPE_BOOLEAN) {\n-                if ((Boolean) lit.getValue())\n-                    value.append(\"1\");\n+                Boolean boolVal = (Boolean)lit.getValue();\n+                if (_isBooleanLiteralAsNumeric)\n+                    value.append(boolVal ? \"1\" : \"0\");\n                 else\n-                    value.append(\"0\");\n+                    value.append(boolVal ? \"true\" : \"false\");\n             } else if (pType == Literal.TYPE_ENUM) {\n                 lit.setRaw(true);\n                 return val;"}]}

