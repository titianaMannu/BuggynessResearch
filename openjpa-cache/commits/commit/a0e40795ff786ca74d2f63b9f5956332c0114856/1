{"sha":"a0e40795ff786ca74d2f63b9f5956332c0114856","node_id":"MDY6Q29tbWl0MjA2MzY0OmEwZTQwNzk1ZmY3ODZjYTc0ZDJmNjNiOWY1OTU2MzMyYzAxMTQ4NTY=","commit":{"author":{"name":"Thomas Andraschko","email":"tandraschko@apache.org","date":"2021-07-13T13:06:55Z"},"committer":{"name":"Thomas Andraschko","email":"tandraschko@apache.org","date":"2021-07-13T13:06:55Z"},"message":"OPENJPA-2877 test","tree":{"sha":"983ecb72eac0ed8ea260390d234ff7ee567cc90f","url":"https://api.github.com/repos/apache/openjpa/git/trees/983ecb72eac0ed8ea260390d234ff7ee567cc90f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a0e40795ff786ca74d2f63b9f5956332c0114856","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a0e40795ff786ca74d2f63b9f5956332c0114856","html_url":"https://github.com/apache/openjpa/commit/a0e40795ff786ca74d2f63b9f5956332c0114856","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a0e40795ff786ca74d2f63b9f5956332c0114856/comments","author":{"login":"tandraschko","id":2485545,"node_id":"MDQ6VXNlcjI0ODU1NDU=","avatar_url":"https://avatars.githubusercontent.com/u/2485545?v=4","gravatar_id":"","url":"https://api.github.com/users/tandraschko","html_url":"https://github.com/tandraschko","followers_url":"https://api.github.com/users/tandraschko/followers","following_url":"https://api.github.com/users/tandraschko/following{/other_user}","gists_url":"https://api.github.com/users/tandraschko/gists{/gist_id}","starred_url":"https://api.github.com/users/tandraschko/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tandraschko/subscriptions","organizations_url":"https://api.github.com/users/tandraschko/orgs","repos_url":"https://api.github.com/users/tandraschko/repos","events_url":"https://api.github.com/users/tandraschko/events{/privacy}","received_events_url":"https://api.github.com/users/tandraschko/received_events","type":"User","site_admin":false},"committer":{"login":"tandraschko","id":2485545,"node_id":"MDQ6VXNlcjI0ODU1NDU=","avatar_url":"https://avatars.githubusercontent.com/u/2485545?v=4","gravatar_id":"","url":"https://api.github.com/users/tandraschko","html_url":"https://github.com/tandraschko","followers_url":"https://api.github.com/users/tandraschko/followers","following_url":"https://api.github.com/users/tandraschko/following{/other_user}","gists_url":"https://api.github.com/users/tandraschko/gists{/gist_id}","starred_url":"https://api.github.com/users/tandraschko/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tandraschko/subscriptions","organizations_url":"https://api.github.com/users/tandraschko/orgs","repos_url":"https://api.github.com/users/tandraschko/repos","events_url":"https://api.github.com/users/tandraschko/events{/privacy}","received_events_url":"https://api.github.com/users/tandraschko/received_events","type":"User","site_admin":false},"parents":[{"sha":"d698ccaf00ccffd2a15430363885dafbe5a66ae9","url":"https://api.github.com/repos/apache/openjpa/commits/d698ccaf00ccffd2a15430363885dafbe5a66ae9","html_url":"https://github.com/apache/openjpa/commit/d698ccaf00ccffd2a15430363885dafbe5a66ae9"}],"stats":{"total":60,"additions":58,"deletions":2},"files":[{"sha":"a7a758d8469b28e5f59932e1ae03c08a15f9b2d3","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/a0e40795ff786ca74d2f63b9f5956332c0114856/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/a0e40795ff786ca74d2f63b9f5956332c0114856/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java?ref=a0e40795ff786ca74d2f63b9f5956332c0114856","patch":"@@ -1351,7 +1351,7 @@ public Object getExternalValue(Object val, StoreContext ctx) {\n         }\n \n         Class converter = getConverter();\n-        if (converter != null) {\n+        if (converter != null && val != null) {\n             try {\n                 // TODO support CDI (OPENJPA-2714)\n                 Object instance = converter.getDeclaredConstructor().newInstance();\n@@ -1428,7 +1428,7 @@ public Object getFieldValue(Object val, StoreContext ctx) {\n         }\n \n         Class converter = getConverter();\n-        if (converter != null) {\n+        if (converter != null && val != null) {\n             try {\n                 // TODO support CDI (OPENJPA-2714)\n                 Object instance = converter.getDeclaredConstructor().newInstance();"},{"sha":"58603c974ef635c9398dcb509cb54b43101c4186","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestExternalValues.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/a0e40795ff786ca74d2f63b9f5956332c0114856/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestExternalValues.java","raw_url":"https://github.com/apache/openjpa/raw/a0e40795ff786ca74d2f63b9f5956332c0114856/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestExternalValues.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestExternalValues.java?ref=a0e40795ff786ca74d2f63b9f5956332c0114856","patch":"@@ -133,6 +133,7 @@ public void testPositionalBindingQueryParameterEqualsDeclaredType() {\n         assertFalse(result.isEmpty());\n         for (ExternalValues x:result) {\n             assertEquals(uuid, x.getUuid());\n+            assertEquals(uuid, x.getUuid2());\n         }\n     }\n \n@@ -148,6 +149,7 @@ public void testNamedBindingQueryParameterEqualsDeclaredType() {\n         assertFalse(result.isEmpty());\n         for (ExternalValues pc:result) {\n             assertEquals(uuid, pc.getUuid());\n+            assertEquals(uuid, pc.getUuid2());\n         }\n     }\n \n@@ -189,6 +191,7 @@ private void createInstance(UUID uuid) {\n         em.getTransaction().begin();\n         ExternalValues pc = new ExternalValues();\n         pc.setUuid(uuid);\n+        pc.setUuid2(uuid);\n         em.persist(pc);\n         em.getTransaction().commit();\n         em.clear();"},{"sha":"1a1788d79202255958bd554b822fe6cd82683c4f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/ExternalValues.java","status":"modified","additions":13,"deletions":0,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/a0e40795ff786ca74d2f63b9f5956332c0114856/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/ExternalValues.java","raw_url":"https://github.com/apache/openjpa/raw/a0e40795ff786ca74d2f63b9f5956332c0114856/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/ExternalValues.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/ExternalValues.java?ref=a0e40795ff786ca74d2f63b9f5956332c0114856","patch":"@@ -20,6 +20,7 @@\n \n \n import java.util.UUID;\n+import javax.persistence.Convert;\n \n import javax.persistence.Entity;\n \n@@ -44,6 +45,9 @@\n     @Factory(\"UUID.fromString\")\n     private UUID    uuid;\n \n+    @Convert(converter = UuidAttributeConverter.class)\n+    private UUID    uuid2;\n+\n     public boolean getBooleanToShort() {\n         return booleanToShort;\n     }\n@@ -123,4 +127,13 @@ public UUID getUuid() {\n     public void setUuid(UUID uuid) {\n         this.uuid = uuid;\n     }\n+\n+    public UUID getUuid2() {\n+        return uuid2;\n+    }\n+\n+    public void setUuid2(UUID uuid2) {\n+        this.uuid2 = uuid2;\n+    }\n+\n }"},{"sha":"736326826a573d7d9dd6056c0fa1ffca269c31f5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/UuidAttributeConverter.java","status":"added","additions":40,"deletions":0,"changes":40,"blob_url":"https://github.com/apache/openjpa/blob/a0e40795ff786ca74d2f63b9f5956332c0114856/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/UuidAttributeConverter.java","raw_url":"https://github.com/apache/openjpa/raw/a0e40795ff786ca74d2f63b9f5956332c0114856/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/UuidAttributeConverter.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/UuidAttributeConverter.java?ref=a0e40795ff786ca74d2f63b9f5956332c0114856","patch":"@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.meta.common.apps;\n+\n+import java.util.UUID;\n+import javax.persistence.AttributeConverter;\n+import javax.persistence.Converter;\n+\n+@Converter\n+public class UuidAttributeConverter implements AttributeConverter<UUID, String>\n+{\n+    @Override\n+    public String convertToDatabaseColumn(UUID attribute)\n+    {\n+        return attribute.toString();\n+    }\n+\n+    @Override\n+    public UUID convertToEntityAttribute(String dbData)\n+    {\n+        return UUID.fromString(dbData);\n+    }\n+    \n+}"}]}

