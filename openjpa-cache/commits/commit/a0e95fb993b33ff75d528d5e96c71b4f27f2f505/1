{"sha":"a0e95fb993b33ff75d528d5e96c71b4f27f2f505","node_id":"MDY6Q29tbWl0MjA2MzY0OmEwZTk1ZmI5OTNiMzNmZjc1ZDUyOGQ1ZTk2YzcxYjRmMjdmMmY1MDU=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-02-12T17:55:39Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-02-12T17:55:39Z"},"message":"OPENJPA-1401:\nsetting svn:eol-style native\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@909534 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1f980a8c7bd0f9ec1ecd244afdea7378d70c46b2","url":"https://api.github.com/repos/apache/openjpa/git/trees/1f980a8c7bd0f9ec1ecd244afdea7378d70c46b2"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a0e95fb993b33ff75d528d5e96c71b4f27f2f505","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a0e95fb993b33ff75d528d5e96c71b4f27f2f505","html_url":"https://github.com/apache/openjpa/commit/a0e95fb993b33ff75d528d5e96c71b4f27f2f505","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a0e95fb993b33ff75d528d5e96c71b4f27f2f505/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"5f8ad3e811f595cee6497953ce6c7989d3c5e3c8","url":"https://api.github.com/repos/apache/openjpa/commits/5f8ad3e811f595cee6497953ce6c7989d3c5e3c8","html_url":"https://github.com/apache/openjpa/commit/5f8ad3e811f595cee6497953ce6c7989d3c5e3c8"}],"stats":{"total":886,"additions":443,"deletions":443},"files":[{"sha":"a71addfa7821ba1a0beb940b8d7cfaaac1f79a89","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/jointable/Contractor.java","status":"modified","additions":81,"deletions":81,"changes":162,"blob_url":"https://github.com/apache/openjpa/blob/a0e95fb993b33ff75d528d5e96c71b4f27f2f505/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/jointable/Contractor.java","raw_url":"https://github.com/apache/openjpa/raw/a0e95fb993b33ff75d528d5e96c71b4f27f2f505/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/jointable/Contractor.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/jointable/Contractor.java?ref=a0e95fb993b33ff75d528d5e96c71b4f27f2f505","patch":"@@ -1,81 +1,81 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.inheritance.jointable;\r\n-\r\n-import javax.persistence.Basic;\r\n-import javax.persistence.CascadeType;\r\n-import javax.persistence.Column;\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.FetchType;\r\n-import javax.persistence.Inheritance;\r\n-import javax.persistence.InheritanceType;\r\n-import javax.persistence.JoinColumn;\r\n-import javax.persistence.ManyToOne;\r\n-import javax.persistence.Table;\r\n-\r\n-import org.apache.openjpa.persistence.jdbc.Index;\r\n-\r\n-@Inheritance(strategy=InheritanceType.JOINED)\r\n-@Entity\r\n-@Table(name=\"WContractor\")\r\n-public class Contractor extends Employee {\r\n-    @Column(name=\"ContractorProp1\",length=10)\r\n-    @Basic\r\n-    private String ctrProp1;\r\n-\r\n-\r\n-    @ManyToOne(optional=true,cascade={CascadeType.PERSIST,CascadeType.MERGE,CascadeType.REFRESH},fetch=FetchType.LAZY)\r\n-    @JoinColumn(name=\"Dept_No\",referencedColumnName=\"OID\")\r\n-    @Index\r\n-    private Department dept;\r\n-\r\n-    public Contractor() {\r\n-    }\r\n-\r\n-    public Contractor(String desc) {\r\n-        setDescription(desc);\r\n-    }\r\n-\r\n-    public String getCtrProp1() {\r\n-        return ctrProp1;\r\n-    }\r\n-\r\n-    public void setCtrProp1(String ctrProp1) {\r\n-        this.ctrProp1 = ctrProp1;\r\n-    }\r\n-\r\n-    public Department getDept() {\r\n-        return dept;\r\n-    }\r\n-\r\n-    public void setDept(Department dept) {\r\n-        this.dept = dept;\r\n-    }\r\n-\r\n-    public boolean equals(Object other) {\r\n-        if (other instanceof Contractor) {\r\n-            Contractor c = (Contractor) other;\r\n-            if (c.getOID() == this.getOID() &&\r\n-                c.getDept() == this.getDept())\r\n-                return true;\r\n-        }\r\n-        return false;\r\n-    }\r\n-}\r\n-\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.inheritance.jointable;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.CascadeType;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.Inheritance;\n+import javax.persistence.InheritanceType;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Table;\n+\n+import org.apache.openjpa.persistence.jdbc.Index;\n+\n+@Inheritance(strategy=InheritanceType.JOINED)\n+@Entity\n+@Table(name=\"WContractor\")\n+public class Contractor extends Employee {\n+    @Column(name=\"ContractorProp1\",length=10)\n+    @Basic\n+    private String ctrProp1;\n+\n+\n+    @ManyToOne(optional=true,cascade={CascadeType.PERSIST,CascadeType.MERGE,CascadeType.REFRESH},fetch=FetchType.LAZY)\n+    @JoinColumn(name=\"Dept_No\",referencedColumnName=\"OID\")\n+    @Index\n+    private Department dept;\n+\n+    public Contractor() {\n+    }\n+\n+    public Contractor(String desc) {\n+        setDescription(desc);\n+    }\n+\n+    public String getCtrProp1() {\n+        return ctrProp1;\n+    }\n+\n+    public void setCtrProp1(String ctrProp1) {\n+        this.ctrProp1 = ctrProp1;\n+    }\n+\n+    public Department getDept() {\n+        return dept;\n+    }\n+\n+    public void setDept(Department dept) {\n+        this.dept = dept;\n+    }\n+\n+    public boolean equals(Object other) {\n+        if (other instanceof Contractor) {\n+            Contractor c = (Contractor) other;\n+            if (c.getOID() == this.getOID() &&\n+                c.getDept() == this.getDept())\n+                return true;\n+        }\n+        return false;\n+    }\n+}\n+"},{"sha":"30583b66408112d585d65e6396947406c5f3942c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/jointable/Department.java","status":"modified","additions":92,"deletions":92,"changes":184,"blob_url":"https://github.com/apache/openjpa/blob/a0e95fb993b33ff75d528d5e96c71b4f27f2f505/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/jointable/Department.java","raw_url":"https://github.com/apache/openjpa/raw/a0e95fb993b33ff75d528d5e96c71b4f27f2f505/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/jointable/Department.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/jointable/Department.java?ref=a0e95fb993b33ff75d528d5e96c71b4f27f2f505","patch":"@@ -1,92 +1,92 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.inheritance.jointable;\r\n-\r\n-import javax.persistence.Basic;\r\n-import javax.persistence.CascadeType;\r\n-import javax.persistence.Column;\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.FetchType;\r\n-import javax.persistence.GeneratedValue;\r\n-import javax.persistence.GenerationType;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.Inheritance;\r\n-import javax.persistence.InheritanceType;\r\n-import javax.persistence.OneToMany;\r\n-import javax.persistence.Table;\r\n-\r\n-@Inheritance(strategy=InheritanceType.JOINED)\r\n-@Entity\r\n-@Table(name=\"WDept\")\r\n-public class Department {\r\n-    @Id\r\n-    @GeneratedValue(strategy=GenerationType.TABLE, generator=\"JWTGen\")\r\n-    private long OID; \r\n-\r\n-    @Basic\r\n-    private String description;\r\n-\r\n-\t@Column(name=\"DeptProp1\",length=10)\r\n-    @Basic\r\n-    private String deptProp1;\r\n-  \r\n-    @OneToMany(mappedBy=\"dept\",cascade={CascadeType.PERSIST,CascadeType.MERGE,CascadeType.REFRESH},fetch=FetchType.LAZY)\r\n-    private java.util.Collection<Contractor> ctrs;\r\n-    \r\n-\tpublic Department() {\r\n-\t}\r\n-\t\r\n-\tpublic Department(String desc) {\r\n-        setDescription(desc);\r\n-    }\r\n-\r\n-    public void setDescription(String description) {\r\n-        this.description = description;\r\n-    }\r\n-\r\n-    public String getDescription() {\r\n-        return description;\r\n-    }\r\n-    \r\n-    public long getOID() {\r\n-        return OID;\r\n-    }\r\n-    \r\n-    public void setOID(long oid) {\r\n-        this.OID = oid;\r\n-    }\r\n-\r\n-\t\r\n-\tpublic String getDeptProp1() {\r\n-\t\treturn deptProp1;\r\n-\t}\r\n-\r\n-\tpublic void setDeptProp1(String deptProp1) {\r\n-\t\tthis.deptProp1 = deptProp1;\r\n-\t}\r\n-\r\n-\tpublic java.util.Collection<Contractor> getCtrs() {\r\n-\t\treturn ctrs;\r\n-\t}\r\n-\r\n-\tpublic void setCtrs(java.util.Collection<Contractor> ctrs) {\r\n-\t\tthis.ctrs = ctrs;\r\n-\t}\r\n-}\r\n-\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.inheritance.jointable;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.CascadeType;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.Inheritance;\n+import javax.persistence.InheritanceType;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Table;\n+\n+@Inheritance(strategy=InheritanceType.JOINED)\n+@Entity\n+@Table(name=\"WDept\")\n+public class Department {\n+    @Id\n+    @GeneratedValue(strategy=GenerationType.TABLE, generator=\"JWTGen\")\n+    private long OID; \n+\n+    @Basic\n+    private String description;\n+\n+\t@Column(name=\"DeptProp1\",length=10)\n+    @Basic\n+    private String deptProp1;\n+  \n+    @OneToMany(mappedBy=\"dept\",cascade={CascadeType.PERSIST,CascadeType.MERGE,CascadeType.REFRESH},fetch=FetchType.LAZY)\n+    private java.util.Collection<Contractor> ctrs;\n+    \n+\tpublic Department() {\n+\t}\n+\t\n+\tpublic Department(String desc) {\n+        setDescription(desc);\n+    }\n+\n+    public void setDescription(String description) {\n+        this.description = description;\n+    }\n+\n+    public String getDescription() {\n+        return description;\n+    }\n+    \n+    public long getOID() {\n+        return OID;\n+    }\n+    \n+    public void setOID(long oid) {\n+        this.OID = oid;\n+    }\n+\n+\t\n+\tpublic String getDeptProp1() {\n+\t\treturn deptProp1;\n+\t}\n+\n+\tpublic void setDeptProp1(String deptProp1) {\n+\t\tthis.deptProp1 = deptProp1;\n+\t}\n+\n+\tpublic java.util.Collection<Contractor> getCtrs() {\n+\t\treturn ctrs;\n+\t}\n+\n+\tpublic void setCtrs(java.util.Collection<Contractor> ctrs) {\n+\t\tthis.ctrs = ctrs;\n+\t}\n+}\n+"},{"sha":"d560bce11ff01bb3049cccb5dd3cba81686583be","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/jointable/Employee.java","status":"modified","additions":47,"deletions":47,"changes":94,"blob_url":"https://github.com/apache/openjpa/blob/a0e95fb993b33ff75d528d5e96c71b4f27f2f505/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/jointable/Employee.java","raw_url":"https://github.com/apache/openjpa/raw/a0e95fb993b33ff75d528d5e96c71b4f27f2f505/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/jointable/Employee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/jointable/Employee.java?ref=a0e95fb993b33ff75d528d5e96c71b4f27f2f505","patch":"@@ -1,47 +1,47 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.inheritance.jointable;\r\n-\r\n-import javax.persistence.Basic;\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.Inheritance;\r\n-import javax.persistence.InheritanceType;\r\n-import javax.persistence.Table;\r\n-\r\n-@Entity\r\n-@Table(name=\"WEmployee\")\r\n-@Inheritance(strategy=InheritanceType.JOINED)\r\n-public abstract class Employee extends Person {\r\n-\r\n-    @Basic\r\n-    private String description;\r\n-\r\n-    public Employee() {\r\n-    }\r\n-\r\n-\tpublic void setDescription(String description) {\r\n-\t\tthis.description = description;\r\n-        super.setName(\"Name \"+description);\r\n-\t}\r\n-\r\n-\tpublic String getDescription() {\r\n-\t\treturn description;\r\n-\t}\r\n-}\r\n-\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.inheritance.jointable;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.Entity;\n+import javax.persistence.Inheritance;\n+import javax.persistence.InheritanceType;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name=\"WEmployee\")\n+@Inheritance(strategy=InheritanceType.JOINED)\n+public abstract class Employee extends Person {\n+\n+    @Basic\n+    private String description;\n+\n+    public Employee() {\n+    }\n+\n+\tpublic void setDescription(String description) {\n+\t\tthis.description = description;\n+        super.setName(\"Name \"+description);\n+\t}\n+\n+\tpublic String getDescription() {\n+\t\treturn description;\n+\t}\n+}\n+"},{"sha":"d101e0ab372cf3427dfe684ce5b8ed8ce4ff320b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/jointable/Person.java","status":"modified","additions":64,"deletions":64,"changes":128,"blob_url":"https://github.com/apache/openjpa/blob/a0e95fb993b33ff75d528d5e96c71b4f27f2f505/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/jointable/Person.java","raw_url":"https://github.com/apache/openjpa/raw/a0e95fb993b33ff75d528d5e96c71b4f27f2f505/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/jointable/Person.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/jointable/Person.java?ref=a0e95fb993b33ff75d528d5e96c71b4f27f2f505","patch":"@@ -1,64 +1,64 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.inheritance.jointable;\r\n-\r\n-import javax.persistence.Basic;\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.GeneratedValue;\r\n-import javax.persistence.GenerationType;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.Inheritance;\r\n-import javax.persistence.InheritanceType;\r\n-import javax.persistence.Table;\r\n-import javax.persistence.TableGenerator;\r\n-\r\n-@Entity\r\n-@Table(name=\"WPerson\")\r\n-@Inheritance(strategy=InheritanceType.JOINED)\r\n-@TableGenerator(name=\"JWTGen\", table=\"JWT_GEN\", pkColumnName=\"PK\",\r\n-        valueColumnName=\"ID\")\r\n-\r\n-public abstract class Person {\r\n-    @Id\r\n-    @GeneratedValue(strategy=GenerationType.TABLE, generator=\"JWTGen\")\r\n-    private long OID; \r\n-\r\n-    @Basic\r\n-    private String name;\r\n-\r\n-    public Person() {\r\n-    }\r\n-\r\n-\tpublic void setName(String name) {\r\n-\t\tthis.name = name;\r\n-\t}\r\n-\r\n-\tpublic String getName() {\r\n-\t\treturn name;\r\n-\t}\r\n-\t\r\n-\tpublic long getOID() {\r\n-\t\treturn OID;\r\n-\t}\r\n-\t\r\n-\tpublic void setOID(long oid) {\r\n-\t\tthis.OID = oid;\r\n-\t}\r\n-}\r\n-\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.inheritance.jointable;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.Inheritance;\n+import javax.persistence.InheritanceType;\n+import javax.persistence.Table;\n+import javax.persistence.TableGenerator;\n+\n+@Entity\n+@Table(name=\"WPerson\")\n+@Inheritance(strategy=InheritanceType.JOINED)\n+@TableGenerator(name=\"JWTGen\", table=\"JWT_GEN\", pkColumnName=\"PK\",\n+        valueColumnName=\"ID\")\n+\n+public abstract class Person {\n+    @Id\n+    @GeneratedValue(strategy=GenerationType.TABLE, generator=\"JWTGen\")\n+    private long OID; \n+\n+    @Basic\n+    private String name;\n+\n+    public Person() {\n+    }\n+\n+\tpublic void setName(String name) {\n+\t\tthis.name = name;\n+\t}\n+\n+\tpublic String getName() {\n+\t\treturn name;\n+\t}\n+\t\n+\tpublic long getOID() {\n+\t\treturn OID;\n+\t}\n+\t\n+\tpublic void setOID(long oid) {\n+\t\tthis.OID = oid;\n+\t}\n+}\n+"},{"sha":"a8c7e88f8d1ca279e58d26224faa3bb55df486ae","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/jointable/TestInheritanceTypeJoinedQuery.java","status":"modified","additions":159,"deletions":159,"changes":318,"blob_url":"https://github.com/apache/openjpa/blob/a0e95fb993b33ff75d528d5e96c71b4f27f2f505/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/jointable/TestInheritanceTypeJoinedQuery.java","raw_url":"https://github.com/apache/openjpa/raw/a0e95fb993b33ff75d528d5e96c71b4f27f2f505/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/jointable/TestInheritanceTypeJoinedQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/jointable/TestInheritanceTypeJoinedQuery.java?ref=a0e95fb993b33ff75d528d5e96c71b4f27f2f505","patch":"@@ -1,159 +1,159 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.inheritance.jointable;\r\n-\r\n-import java.util.List;\r\n-\r\n-import javax.persistence.EntityManager;\r\n-import javax.persistence.Query;\r\n-\r\n-import org.apache.openjpa.persistence.test.SQLListenerTestCase;\r\n-\r\n-\r\n-public class TestInheritanceTypeJoinedQuery  extends SQLListenerTestCase {\r\n-\r\n-    public void setUp() {\r\n-        setUp(Contractor.class, Employee.class, Department.class, Person.class,\r\n-            CLEAR_TABLES);\r\n-        populate();\r\n-    }\r\n-\r\n-    public void populate() {\r\n-        EntityManager em = emf.createEntityManager();\r\n-        \r\n-        Department d = new Department(\"IT\");\r\n-        for (int i = 0; i < 3; i++) {\r\n-            Contractor c = new Contractor(\"ctr\" + i);\r\n-            c.setDept(d);\r\n-            em.persist(c);\r\n-        }\r\n-        em.persist(d);\r\n-      \r\n-        em.getTransaction().begin();\r\n-        em.getTransaction().commit();\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void testInheritanceTypeJoinedQuery() {\r\n-        EntityManager em = emf.createEntityManager();\r\n-        Query q = null;\r\n-        String qS = null;\r\n-        Department dept = null;\r\n-        \r\n-        qS = \"SELECT c.OID, c.dept FROM Department d, Contractor c where d.OID = c.dept.OID and d.description = 'IT'\";\r\n-        q = em.createQuery(qS); \r\n-        List<Object[]> lResult = q.getResultList();\r\n-        for (Object[] resultElement : lResult) {\r\n-            Long oid = (Long)resultElement[0];\r\n-            dept = (Department)resultElement[1];\r\n-        }\r\n-        \r\n-        qS = \"SELECT c.OID FROM Department d, Contractor c where d.OID = c.dept.OID and d.description = 'IT'\";\r\n-        q = em.createQuery(qS); \r\n-        for (Object resultElement : q.getResultList()) {\r\n-            Long oid = (Long)resultElement;\r\n-        }\r\n-       \r\n-        qS = \"SELECT d FROM Department d, Contractor c where d.OID = c.dept.OID and d.description = 'IT'\";\r\n-        q = em.createQuery(qS); \r\n-        for (Department aResult: (List <Department>) q.getResultList()) {\r\n-            assertEquals(dept.getOID(), aResult.getOID());\r\n-        }\r\n-\r\n-        qS = \"SELECT c FROM Department d, Contractor c  where d.OID = c.dept.OID and d.description = 'IT'\";\r\n-        q = em.createQuery(qS);             \r\n-        for (Contractor aResult: (List <Contractor>) q.getResultList()) {\r\n-            //System.out.println(aResult.getDescription() + \", \" + aResult.getOID());\r\n-            assertEquals(dept.getOID(), aResult.getDept().getOID());\r\n-        }\r\n-        qS = \"SELECT c FROM Contractor c, Department d  where d.OID = c.dept.OID and d.description = 'IT'\";\r\n-        q = em.createQuery(qS);             \r\n-        for (Contractor aResult: (List <Contractor>) q.getResultList()) {\r\n-            assertEquals(dept.getOID(), aResult.getDept().getOID());\r\n-        }\r\n-        \r\n-        qS = \"SELECT c, c.OID FROM Department d, Contractor c where d.OID = c.dept.OID and d.description = 'IT'\";\r\n-        q = em.createQuery(qS);             \r\n-        List<Object[]> cResult = q.getResultList();\r\n-        Contractor contractor = null;\r\n-        for (Object[] resultElement : cResult) {\r\n-            contractor = (Contractor)resultElement[0];\r\n-            Long oid = (Long)resultElement[1];\r\n-            assertTrue(contractor.getOID() == oid);\r\n-            assertEquals(dept.getOID(), contractor.getDept().getOID());\r\n-        }\r\n-        \r\n-        qS = \"SELECT c.OID, c FROM Contractor c, Department d where d.OID = c.dept.OID and d.description = 'IT'\";\r\n-        q = em.createQuery(qS);             \r\n-        List<Object[]> dResult = q.getResultList();\r\n-        for (Object[] resultElement : dResult) {\r\n-            Long oid = (Long)resultElement[0];\r\n-            contractor = (Contractor)resultElement[1];\r\n-            assertTrue(contractor.getOID() == oid);\r\n-            assertEquals(dept.getOID(), contractor.getDept().getOID());\r\n-        }\r\n-        \r\n-        qS = \"SELECT c, c.OID FROM Department d, Contractor c where d.OID = c.dept.OID and d.description = 'IT'\";\r\n-        q = em.createQuery(qS);             \r\n-        List<Object[]> eResult = q.getResultList();\r\n-        for (Object[] resultElement : eResult) {\r\n-            Long oid = (Long)resultElement[1];\r\n-            contractor = (Contractor)resultElement[0];\r\n-            assertTrue(contractor.getOID() == oid);\r\n-            assertEquals(dept.getOID(), contractor.getDept().getOID());\r\n-        }\r\n-\r\n-        qS = \"SELECT c.OID, c FROM Department d, Contractor c where d.OID = c.dept.OID and d.description = 'IT'\";\r\n-        q = em.createQuery(qS);             \r\n-        List<Object[]> fResult = q.getResultList();\r\n-        for (Object[] resultElement : fResult) {\r\n-            Long oid = (Long)resultElement[0];\r\n-            Contractor c = (Contractor)resultElement[1];\r\n-            assertTrue(oid.longValue() == c.getOID());\r\n-            assertEquals(dept.getOID(), c.getDept().getOID());\r\n-        }\r\n-        \r\n-        qS = \"SELECT d,c FROM Department d, Contractor c where d.OID = c.dept.OID and d.description = 'IT' \" +\r\n-                \" and c = ?1\";\r\n-        q = em.createQuery(qS);\r\n-        q.setParameter(1, contractor);\r\n-        for (Object[] aResult: (List <Object[]>) q.getResultList()) {\r\n-            System.out.println(((Department)aResult[0]).getOID() + \", \" + ((Contractor)aResult[1]).getOID());\r\n-            assertTrue(contractor.equals(aResult[1]));\r\n-        }\r\n-                \r\n-        qS = \"SELECT c,d FROM Contractor c, Department d where d.OID = c.dept.OID and d.description = 'IT' \" +\r\n-                \" and c = ?1\";\r\n-        q = em.createQuery(qS);\r\n-        q.setParameter(1, contractor);\r\n-        for (Object[] aResult: (List <Object[]>) q.getResultList()) {\r\n-            System.out.println(((Contractor)aResult[0]).getOID() + \", \" + ((Department)aResult[1]).getOID());\r\n-            assertTrue(contractor.equals(aResult[0]));\r\n-        }\r\n-\r\n-        qS = \"SELECT p FROM Person p \";\r\n-        q = em.createQuery(qS);\r\n-        for (Object aResult: (List<Object>) q.getResultList()) {\r\n-            assertTrue(aResult instanceof Contractor);\r\n-        }\r\n-\r\n-        em.close();\r\n-    }\r\n-}\r\n-\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.inheritance.jointable;\n+\n+import java.util.List;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.Query;\n+\n+import org.apache.openjpa.persistence.test.SQLListenerTestCase;\n+\n+\n+public class TestInheritanceTypeJoinedQuery  extends SQLListenerTestCase {\n+\n+    public void setUp() {\n+        setUp(Contractor.class, Employee.class, Department.class, Person.class,\n+            CLEAR_TABLES);\n+        populate();\n+    }\n+\n+    public void populate() {\n+        EntityManager em = emf.createEntityManager();\n+        \n+        Department d = new Department(\"IT\");\n+        for (int i = 0; i < 3; i++) {\n+            Contractor c = new Contractor(\"ctr\" + i);\n+            c.setDept(d);\n+            em.persist(c);\n+        }\n+        em.persist(d);\n+      \n+        em.getTransaction().begin();\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+\n+    public void testInheritanceTypeJoinedQuery() {\n+        EntityManager em = emf.createEntityManager();\n+        Query q = null;\n+        String qS = null;\n+        Department dept = null;\n+        \n+        qS = \"SELECT c.OID, c.dept FROM Department d, Contractor c where d.OID = c.dept.OID and d.description = 'IT'\";\n+        q = em.createQuery(qS); \n+        List<Object[]> lResult = q.getResultList();\n+        for (Object[] resultElement : lResult) {\n+            Long oid = (Long)resultElement[0];\n+            dept = (Department)resultElement[1];\n+        }\n+        \n+        qS = \"SELECT c.OID FROM Department d, Contractor c where d.OID = c.dept.OID and d.description = 'IT'\";\n+        q = em.createQuery(qS); \n+        for (Object resultElement : q.getResultList()) {\n+            Long oid = (Long)resultElement;\n+        }\n+       \n+        qS = \"SELECT d FROM Department d, Contractor c where d.OID = c.dept.OID and d.description = 'IT'\";\n+        q = em.createQuery(qS); \n+        for (Department aResult: (List <Department>) q.getResultList()) {\n+            assertEquals(dept.getOID(), aResult.getOID());\n+        }\n+\n+        qS = \"SELECT c FROM Department d, Contractor c  where d.OID = c.dept.OID and d.description = 'IT'\";\n+        q = em.createQuery(qS);             \n+        for (Contractor aResult: (List <Contractor>) q.getResultList()) {\n+            //System.out.println(aResult.getDescription() + \", \" + aResult.getOID());\n+            assertEquals(dept.getOID(), aResult.getDept().getOID());\n+        }\n+        qS = \"SELECT c FROM Contractor c, Department d  where d.OID = c.dept.OID and d.description = 'IT'\";\n+        q = em.createQuery(qS);             \n+        for (Contractor aResult: (List <Contractor>) q.getResultList()) {\n+            assertEquals(dept.getOID(), aResult.getDept().getOID());\n+        }\n+        \n+        qS = \"SELECT c, c.OID FROM Department d, Contractor c where d.OID = c.dept.OID and d.description = 'IT'\";\n+        q = em.createQuery(qS);             \n+        List<Object[]> cResult = q.getResultList();\n+        Contractor contractor = null;\n+        for (Object[] resultElement : cResult) {\n+            contractor = (Contractor)resultElement[0];\n+            Long oid = (Long)resultElement[1];\n+            assertTrue(contractor.getOID() == oid);\n+            assertEquals(dept.getOID(), contractor.getDept().getOID());\n+        }\n+        \n+        qS = \"SELECT c.OID, c FROM Contractor c, Department d where d.OID = c.dept.OID and d.description = 'IT'\";\n+        q = em.createQuery(qS);             \n+        List<Object[]> dResult = q.getResultList();\n+        for (Object[] resultElement : dResult) {\n+            Long oid = (Long)resultElement[0];\n+            contractor = (Contractor)resultElement[1];\n+            assertTrue(contractor.getOID() == oid);\n+            assertEquals(dept.getOID(), contractor.getDept().getOID());\n+        }\n+        \n+        qS = \"SELECT c, c.OID FROM Department d, Contractor c where d.OID = c.dept.OID and d.description = 'IT'\";\n+        q = em.createQuery(qS);             \n+        List<Object[]> eResult = q.getResultList();\n+        for (Object[] resultElement : eResult) {\n+            Long oid = (Long)resultElement[1];\n+            contractor = (Contractor)resultElement[0];\n+            assertTrue(contractor.getOID() == oid);\n+            assertEquals(dept.getOID(), contractor.getDept().getOID());\n+        }\n+\n+        qS = \"SELECT c.OID, c FROM Department d, Contractor c where d.OID = c.dept.OID and d.description = 'IT'\";\n+        q = em.createQuery(qS);             \n+        List<Object[]> fResult = q.getResultList();\n+        for (Object[] resultElement : fResult) {\n+            Long oid = (Long)resultElement[0];\n+            Contractor c = (Contractor)resultElement[1];\n+            assertTrue(oid.longValue() == c.getOID());\n+            assertEquals(dept.getOID(), c.getDept().getOID());\n+        }\n+        \n+        qS = \"SELECT d,c FROM Department d, Contractor c where d.OID = c.dept.OID and d.description = 'IT' \" +\n+                \" and c = ?1\";\n+        q = em.createQuery(qS);\n+        q.setParameter(1, contractor);\n+        for (Object[] aResult: (List <Object[]>) q.getResultList()) {\n+            System.out.println(((Department)aResult[0]).getOID() + \", \" + ((Contractor)aResult[1]).getOID());\n+            assertTrue(contractor.equals(aResult[1]));\n+        }\n+                \n+        qS = \"SELECT c,d FROM Contractor c, Department d where d.OID = c.dept.OID and d.description = 'IT' \" +\n+                \" and c = ?1\";\n+        q = em.createQuery(qS);\n+        q.setParameter(1, contractor);\n+        for (Object[] aResult: (List <Object[]>) q.getResultList()) {\n+            System.out.println(((Contractor)aResult[0]).getOID() + \", \" + ((Department)aResult[1]).getOID());\n+            assertTrue(contractor.equals(aResult[0]));\n+        }\n+\n+        qS = \"SELECT p FROM Person p \";\n+        q = em.createQuery(qS);\n+        for (Object aResult: (List<Object>) q.getResultList()) {\n+            assertTrue(aResult instanceof Contractor);\n+        }\n+\n+        em.close();\n+    }\n+}\n+"}]}

