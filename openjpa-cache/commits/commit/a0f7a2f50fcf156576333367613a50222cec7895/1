{"sha":"a0f7a2f50fcf156576333367613a50222cec7895","node_id":"MDY6Q29tbWl0MjA2MzY0OmEwZjdhMmY1MGZjZjE1NjU3NjMzMzM2NzYxM2E1MDIyMmNlYzc4OTU=","commit":{"author":{"name":"Dianne E. Richards","email":"dianner@apache.org","date":"2012-04-30T15:29:53Z"},"committer":{"name":"Dianne E. Richards","email":"dianner@apache.org","date":"2012-04-30T15:29:53Z"},"message":"OPENJPA-2142 Update test case for second problem\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1332244 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7e2d107c3eb98e9db1c6b5a70d3e2071d1c35f82","url":"https://api.github.com/repos/apache/openjpa/git/trees/7e2d107c3eb98e9db1c6b5a70d3e2071d1c35f82"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a0f7a2f50fcf156576333367613a50222cec7895","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a0f7a2f50fcf156576333367613a50222cec7895","html_url":"https://github.com/apache/openjpa/commit/a0f7a2f50fcf156576333367613a50222cec7895","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a0f7a2f50fcf156576333367613a50222cec7895/comments","author":null,"committer":null,"parents":[{"sha":"badcf47af8bf85d13fe3019648635d5f274b91ec","url":"https://api.github.com/repos/apache/openjpa/commits/badcf47af8bf85d13fe3019648635d5f274b91ec","html_url":"https://github.com/apache/openjpa/commit/badcf47af8bf85d13fe3019648635d5f274b91ec"}],"stats":{"total":242,"additions":201,"deletions":41},"files":[{"sha":"f5813475a98cf075cf777be64897f366b7553fcb","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/merge/GrandChild.java","status":"modified","additions":55,"deletions":32,"changes":87,"blob_url":"https://github.com/apache/openjpa/blob/a0f7a2f50fcf156576333367613a50222cec7895/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/merge/GrandChild.java","raw_url":"https://github.com/apache/openjpa/raw/a0f7a2f50fcf156576333367613a50222cec7895/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/merge/GrandChild.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/merge/GrandChild.java?ref=a0f7a2f50fcf156576333367613a50222cec7895","patch":"@@ -20,48 +20,71 @@\n \n import java.io.Serializable;\n \n+import javax.persistence.Column;\n import javax.persistence.Entity;\n import javax.persistence.Id;\n+import javax.persistence.IdClass;\n import javax.persistence.JoinColumn;\n import javax.persistence.JoinColumns;\n import javax.persistence.ManyToOne;\n import javax.persistence.Table;\n \n @Entity\n+@IdClass(GrandChildPK.class)\n @Table(name = \"MRG_GRANDCHILD\")\n public class GrandChild implements Serializable {\n-  private static final long serialVersionUID = 1L;\n+    private static final long serialVersionUID = 1L;\n \n-  @Id\n-  @JoinColumns({ @JoinColumn(name = \"KEY_1\", referencedColumnName = \"KEY_1\"),\n-      @JoinColumn(name = \"KEY_2\", referencedColumnName = \"KEY_2\"),\n-      @JoinColumn(name = \"KEY_3\", referencedColumnName = \"KEY_3\") })\n-  @ManyToOne\n-  private Child child;\n+    @Id\n+    @JoinColumns({ @JoinColumn(name = \"KEY_1\", referencedColumnName = \"KEY_1\"),\n+        @JoinColumn(name = \"KEY_2\", referencedColumnName = \"KEY_2\"),\n+        @JoinColumn(name = \"KEY_3\", referencedColumnName = \"KEY_3\") })\n+    @ManyToOne\n+    private Child child;\n \n-  public Child getChild() { return child; }\n-  public void setChild(Child child) {   this.child = child;  }\n-@Override\n-public int hashCode() {\n-\tfinal int prime = 31;\n-\tint result = 1;\n-\tresult = prime * result + ((child == null) ? 0 : child.hashCode());\n-\treturn result;\n-}\n-@Override\n-public boolean equals(Object obj) {\n-\tif (this == obj)\n-\t\treturn true;\n-\tif (obj == null)\n-\t\treturn false;\n-\tif (getClass() != obj.getClass())\n-\t\treturn false;\n-\tGrandChild other = (GrandChild) obj;\n-\tif (child == null) {\n-\t\tif (other.child != null)\n-\t\t\treturn false;\n-\t} else if (!child.equals(other.child))\n-\t\treturn false;\n-\treturn true;\n-}  \n+    @Id\n+    @Column(name = \"KEY_4\")\n+    private Integer grandChildKey;\n+\n+    public Child getChild() {\n+        return child;\n+    }\n+\n+    public void setChild(Child child) {\n+        this.child = child;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        final int prime = 31;\n+        int result = 1;\n+        result = prime * result + ((child == null) ? 0 : child.hashCode());\n+        return result;\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj)\n+            return true;\n+        if (obj == null)\n+            return false;\n+        if (getClass() != obj.getClass())\n+            return false;\n+        GrandChild other = (GrandChild) obj;\n+        if (child == null) {\n+            if (other.child != null)\n+                return false;\n+        } else if (!child.equals(other.child))\n+            return false;\n+        return true;\n+    }\n+\n+    public Integer getGrandChildKey() {\n+        return grandChildKey;\n+    }\n+\n+    public void setGrandChildKey(Integer grandChildKey) {\n+        this.grandChildKey = grandChildKey;\n+\n+    }\n }"},{"sha":"667e8c38ca0664957a6f9d7adf53cf455d55c9a6","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/merge/GrandChildPK.java","status":"added","additions":78,"deletions":0,"changes":78,"blob_url":"https://github.com/apache/openjpa/blob/a0f7a2f50fcf156576333367613a50222cec7895/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/merge/GrandChildPK.java","raw_url":"https://github.com/apache/openjpa/raw/a0f7a2f50fcf156576333367613a50222cec7895/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/merge/GrandChildPK.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/merge/GrandChildPK.java?ref=a0f7a2f50fcf156576333367613a50222cec7895","patch":"@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.merge;\n+\n+import java.io.Serializable;\n+\n+public class GrandChildPK implements Serializable {\n+    private static final long serialVersionUID = 1L;\n+\n+    private ChildPK child;\n+\n+    private Integer grandChildKey;\n+\n+    public ChildPK getChild() {\n+        return child;\n+    }\n+\n+    public void setChild(ChildPK child) {\n+        this.child = child;\n+    }\n+\n+    public Integer getGrandChildKey() {\n+        return grandChildKey;\n+    }\n+\n+    public void setGrandChildKey(Integer grandChildKey) {\n+        this.grandChildKey = grandChildKey;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        final int prime = 31;\n+        int result = 1;\n+        result = prime * result + ((child == null) ? 0 : child.hashCode());\n+        result =\n+            prime * result\n+                + ((grandChildKey == null) ? 0 : grandChildKey.hashCode());\n+        return result;\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj)\n+            return true;\n+        if (obj == null)\n+            return false;\n+        if (getClass() != obj.getClass())\n+            return false;\n+        GrandChildPK other = (GrandChildPK) obj;\n+        if (child == null) {\n+            if (other.child != null)\n+                return false;\n+        } else if (!child.equals(other.child))\n+            return false;\n+        if (grandChildKey == null) {\n+            if (other.grandChildKey != null)\n+                return false;\n+        } else if (!grandChildKey.equals(other.grandChildKey))\n+            return false;\n+        return true;\n+    }\n+}"},{"sha":"f7aeb8890fddfbcd2a1918aaf08b213eef3751da","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/merge/Parent.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/a0f7a2f50fcf156576333367613a50222cec7895/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/merge/Parent.java","raw_url":"https://github.com/apache/openjpa/raw/a0f7a2f50fcf156576333367613a50222cec7895/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/merge/Parent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/merge/Parent.java?ref=a0f7a2f50fcf156576333367613a50222cec7895","patch":"@@ -47,6 +47,7 @@\n \n   @OneToMany(mappedBy = \"parent\", orphanRemoval = true, cascade = CascadeType.ALL, fetch = FetchType.EAGER)\n   private Collection<Child> childs = new ArrayList<Child>();\n+  public Parent() {}\n \n   public String getKey1() { return key1;  }\n   public void setKey1(String key1) { this.key1 = key1;  }"},{"sha":"836de14e23441e7e60fdaa916fd8a470155739c0","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/merge/TestMergeNew.java","status":"modified","additions":67,"deletions":9,"changes":76,"blob_url":"https://github.com/apache/openjpa/blob/a0f7a2f50fcf156576333367613a50222cec7895/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/merge/TestMergeNew.java","raw_url":"https://github.com/apache/openjpa/raw/a0f7a2f50fcf156576333367613a50222cec7895/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/merge/TestMergeNew.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/merge/TestMergeNew.java?ref=a0f7a2f50fcf156576333367613a50222cec7895","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.openjpa.persistence.merge;\n \n+import java.io.IOException;\n import java.util.ArrayList;\n \n import javax.persistence.EntityManager;\n@@ -35,8 +36,8 @@ public void setUp() {\n         assertNotNull(emf);\n         populate();\n     }\n-\n-    public void testMergeParent(){    \t\n+    \n+    public void testMergeNewParent() {\n         EntityManager em = emf.createEntityManager();\n         em.getTransaction().begin();    \n         ParentPK pk = new ParentPK(1);\n@@ -46,13 +47,72 @@ public void testMergeParent(){\n         Child child = new Child();                                               \n         child.setChildKey(1);\n         child.setParent(parent);                                                 \n-       \tparent.getChilds().add(child);                                           \n+        parent.getChilds().add(child);                                           \n         \n         GrandChild grandChild = new GrandChild();\n+        grandChild.setGrandChildKey(1);\n         grandChild.setChild(child);                                              \n-       \tchild.getGrandChilds().add(grandChild);\n+        child.getGrandChilds().add(grandChild);\n     \n-       \tParent newParent = em.merge(parent);\n+        Parent newParent = em.merge(parent);\n+        assertNotNull(newParent);\n+        \n+        // verify key fields\n+        assertEquals(newParent.getKey1(), \"K1\");\n+        assertEquals(newParent.getKey2(), new Integer(1));\n+        \n+        // verify Child field\n+        ArrayList<Child> childs = (ArrayList<Child>)newParent.getChilds();\n+        assertNotNull(childs);\n+        assertEquals(childs.size(), 1);\n+        Child newChild = childs.get(0);\n+        assertNotSame(child, newChild);\n+        Parent childParent = newChild.getParent();\n+        assertEquals(childParent, newParent);\n+        assertEquals(newChild.getChildKey(), new Integer(1));\n+        \n+        // verify GrandChild field\n+        ArrayList<GrandChild> grandChilds = (ArrayList<GrandChild>)newChild.getGrandChilds();\n+        assertNotNull(grandChilds);\n+        assertEquals(grandChilds.size(), 1);\n+        GrandChild newGrandChild = grandChilds.get(0);\n+        assertNotSame(newGrandChild, grandChild);\n+        Child grandChildChild = newGrandChild.getChild();\n+        assertEquals(grandChildChild, newChild);\n+        \n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+\n+    public void testMergeParentRoundTrip()throws ClassNotFoundException, IOException {    \t\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();    \n+        ParentPK pk = new ParentPK(1);\n+        pk.setKey1(\"K1\");\n+        Parent parent = em.find(Parent.class, pk);\n+        \n+        //Simulate an EJB Call to get the Parent from the server:\n+        Parent p2 = (Parent) roundtrip(parent);\n+        \n+        Child child = new Child();                                               \n+        child.setChildKey(1);\n+        child.setParent(p2);                                                 \n+       \tp2.getChilds().add(child); \n+       \t\n+        GrandChild grandChild = new GrandChild();\n+        grandChild.setChild(child);\n+        grandChild.setGrandChildKey(1);\n+       \tchild.getGrandChilds().add(grandChild);\n+       \t\n+       \t//Simulate an EJB Call to send the Parent back to the server:\n+       \tParent p3 = (Parent) roundtrip(p2);\n+       \t\n+        em = emf.createEntityManager();\n+        em.getTransaction().begin();    \n+        \n+       \tParent newParent = em.merge(p3);\n+       \t\n+       \tem.getTransaction().commit();\n        \tassertNotNull(newParent);\n        \t\n        \t// verify key fields\n@@ -66,7 +126,7 @@ public void testMergeParent(){\n        \tChild newChild = childs.get(0);\n        \tassertNotSame(child, newChild);\n        \tParent childParent = newChild.getParent();\n-       \tassertEquals(childParent, newParent);\n+       \tassertNotNull(childParent);\n        \tassertEquals(newChild.getChildKey(), new Integer(1));\n        \t\n        \t// verify GrandChild field\n@@ -76,9 +136,7 @@ public void testMergeParent(){\n        \tGrandChild newGrandChild = grandChilds.get(0);\n        \tassertNotSame(newGrandChild, grandChild);\n        \tChild grandChildChild = newGrandChild.getChild();\n-       \tassertEquals(grandChildChild, newChild);\n-       \t\n-       \tem.getTransaction().commit();\n+       \tassertNotNull(grandChildChild);\n        \tem.close();\n     }\n     "}]}

