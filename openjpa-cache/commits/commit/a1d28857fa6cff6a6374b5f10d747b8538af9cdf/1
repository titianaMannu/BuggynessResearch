{"sha":"a1d28857fa6cff6a6374b5f10d747b8538af9cdf","node_id":"MDY6Q29tbWl0MjA2MzY0OmExZDI4ODU3ZmE2Y2ZmNmE2Mzc0YjVmMTBkNzQ3Yjg1MzhhZjljZGY=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-07-31T17:32:01Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-07-31T17:32:01Z"},"message":"OPENJPA-303 committing on behalf of Albert\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@561405 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6459c9ea1fef693901f18f20586fa740d0c830a2","url":"https://api.github.com/repos/apache/openjpa/git/trees/6459c9ea1fef693901f18f20586fa740d0c830a2"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a1d28857fa6cff6a6374b5f10d747b8538af9cdf","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a1d28857fa6cff6a6374b5f10d747b8538af9cdf","html_url":"https://github.com/apache/openjpa/commit/a1d28857fa6cff6a6374b5f10d747b8538af9cdf","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a1d28857fa6cff6a6374b5f10d747b8538af9cdf/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"7ca46cf69d63c6e21f9495ece70e7dd6b210c7e2","url":"https://api.github.com/repos/apache/openjpa/commits/7ca46cf69d63c6e21f9495ece70e7dd6b210c7e2","html_url":"https://github.com/apache/openjpa/commit/7ca46cf69d63c6e21f9495ece70e7dd6b210c7e2"}],"stats":{"total":182,"additions":181,"deletions":1},"files":[{"sha":"6a7eef1680e2537c434a4f97ad8777a9c2c31e2c","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/a1d28857fa6cff6a6374b5f10d747b8538af9cdf/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java","raw_url":"https://github.com/apache/openjpa/raw/a1d28857fa6cff6a6374b5f10d747b8538af9cdf/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java?ref=a1d28857fa6cff6a6374b5f10d747b8538af9cdf","patch":"@@ -991,8 +991,10 @@ private void parseTemporal(FieldMapping fm, Temporal anno) {\n         if (!cols.isEmpty() && cols.size() != 1)\n             throw new MetaDataException(_loc.get(\"num-cols-mismatch\", fm,\n                 String.valueOf(cols.size()), \"1\"));\n-        if (cols.isEmpty())\n+        if (cols.isEmpty()) {\n             cols = Arrays.asList(new Column[]{ new Column() });\n+            fm.getValueInfo().setColumns(cols);\n+        }\n \n         Column col = (Column) cols.get(0);\n         switch (anno.value()) {"},{"sha":"e588d61644bb326aa815151aa2f20b2f6b5088a1","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/TestMappingToolTemporal.java","status":"added","additions":61,"deletions":0,"changes":61,"blob_url":"https://github.com/apache/openjpa/blob/a1d28857fa6cff6a6374b5f10d747b8538af9cdf/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/TestMappingToolTemporal.java","raw_url":"https://github.com/apache/openjpa/raw/a1d28857fa6cff6a6374b5f10d747b8538af9cdf/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/TestMappingToolTemporal.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/TestMappingToolTemporal.java?ref=a1d28857fa6cff6a6374b5f10d747b8538af9cdf","patch":"@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.jdbc.meta;\n+\n+import java.io.IOException;\n+import java.sql.SQLException;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.simple.TemporalFieldTypes;\n+import org.apache.openjpa.persistence.test.SQLListenerTestCase;\n+\n+public class TestMappingToolTemporal extends SQLListenerTestCase {\n+\n+    public void setUp() {\n+        setUp(CLEAR_TABLES, TemporalFieldTypes.class);\n+    }\n+\n+    public void testMappingToolTemporal() throws IOException, SQLException {\n+\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.persist(new TemporalFieldTypes());\n+        em.getTransaction().commit();\n+        em.close();\n+\n+        assertSQL(\"CREATE TABLE TemporalFieldTypes \"\n+                + \"(.*dateDefaultField TIMESTAMP.*)\");\n+        assertSQL(\"CREATE TABLE TemporalFieldTypes \"\n+                + \"(.*dateDateField DATE.*)\");\n+        assertSQL(\"CREATE TABLE TemporalFieldTypes \"\n+                + \"(.*dateTimeField TIME.*)\");\n+        assertSQL(\"CREATE TABLE TemporalFieldTypes \"\n+                + \"(.*dateTimestampField TIMESTAMP.*)\");\n+\n+        assertSQL(\"CREATE TABLE TemporalFieldTypes \"\n+                + \"(.*calendarDefaultField TIMESTAMP.*)\");\n+        assertSQL(\"CREATE TABLE TemporalFieldTypes \"\n+                + \"(.*calendarDateField DATE.*)\");\n+        assertSQL(\"CREATE TABLE TemporalFieldTypes \"\n+                + \"(.*calendarTimeField TIME.*)\");\n+        assertSQL(\"CREATE TABLE TemporalFieldTypes \"\n+                + \"(.*calendarTimestampField TIMESTAMP.*)\");\n+    }\n+}"},{"sha":"daa962b1a2546363170b0a60e1767af790e34518","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TemporalFieldTypes.java","status":"added","additions":117,"deletions":0,"changes":117,"blob_url":"https://github.com/apache/openjpa/blob/a1d28857fa6cff6a6374b5f10d747b8538af9cdf/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TemporalFieldTypes.java","raw_url":"https://github.com/apache/openjpa/raw/a1d28857fa6cff6a6374b5f10d747b8538af9cdf/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TemporalFieldTypes.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TemporalFieldTypes.java?ref=a1d28857fa6cff6a6374b5f10d747b8538af9cdf","patch":"@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.simple;\n+\n+import java.util.Calendar;\n+import java.util.Date;\n+import javax.persistence.Entity;\n+import javax.persistence.Temporal;\n+import javax.persistence.TemporalType;\n+\n+@Entity\n+public class TemporalFieldTypes {\n+\n+    // Date mapping - Default to TIMESTAMP\n+    private Date dateDefaultField;\n+\n+    @Temporal(TemporalType.DATE)\n+    private Date dateDateField;\n+\n+    @Temporal(TemporalType.TIME)\n+    private Date dateTimeField;\n+\n+    @Temporal(TemporalType.TIMESTAMP)\n+    private Date dateTimestampField;\n+    \n+    // Calendar mapping - Default to TIMESTAMP\n+    private Calendar calendarDefaultField;\n+\n+    @Temporal(TemporalType.DATE)\n+    private Calendar calendarDateField;\n+\n+    @Temporal(TemporalType.TIME)\n+    private Calendar calendarTimeField;\n+\n+    @Temporal(TemporalType.TIMESTAMP)\n+    private Calendar calendarTimestampField;\n+\n+    public void setDateDefaultField(Date date) {\n+        this.dateDefaultField = date;\n+    }\n+\n+    public Date getDateDefaultField() {\n+        return this.dateDefaultField;\n+    }\n+\n+    public void setDateDateField(Date date) {\n+        this.dateDateField = date;\n+    }\n+\n+    public Date getDateDateField() {\n+        return this.dateDateField;\n+    }\n+\n+    public void setDateTimeField(Date date) {\n+        this.dateTimeField = date;\n+    }\n+\n+    public Date getDateTimeField() {\n+        return this.dateTimeField;\n+    }\n+\n+    public void setDateTimeStampField(Date date) {\n+        this.dateTimestampField = date;\n+    }\n+\n+    public Date getDateTimeStampField() {\n+        return this.dateTimestampField;\n+    }\n+\n+    public void setCalendarDefaultField(Calendar calendar) {\n+        this.calendarDefaultField = calendar;\n+    }\n+\n+    public Calendar getCalendarDefaultField() {\n+        return this.calendarDefaultField;\n+    }\n+\n+    public void setCalendarDateField(Calendar calendar) {\n+        this.calendarDateField = calendar;\n+    }\n+\n+    public Calendar getCalendarDateField() {\n+        return this.calendarDateField;\n+    }\n+\n+    public void setCalendarTimeField(Calendar calendar) {\n+        this.calendarTimeField = calendar;\n+    }\n+\n+    public Calendar getCalendarTimeField() {\n+        return this.calendarTimeField;\n+    }\n+\n+    public void setCalendarTimeStampField(Calendar calendar) {\n+        this.calendarTimestampField = calendar;\n+    }\n+\n+    public Calendar getCalendarTimeStampField() {\n+        return this.calendarTimestampField;\n+    }\n+}"}]}

