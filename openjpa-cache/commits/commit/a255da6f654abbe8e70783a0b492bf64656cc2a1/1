{"sha":"a255da6f654abbe8e70783a0b492bf64656cc2a1","node_id":"MDY6Q29tbWl0MjA2MzY0OmEyNTVkYTZmNjU0YWJiZThlNzA3ODNhMGI0OTJiZjY0NjU2Y2MyYTE=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2006-12-30T01:38:33Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2006-12-30T01:38:33Z"},"message":"submitting patches for OPENJPA-92. I have not tested them aside from compiling and running the regression tests (against Derby).\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@491148 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2cd3f28be5fcdfe067f3c6fef01b62c98d821595","url":"https://api.github.com/repos/apache/openjpa/git/trees/2cd3f28be5fcdfe067f3c6fef01b62c98d821595"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a255da6f654abbe8e70783a0b492bf64656cc2a1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a255da6f654abbe8e70783a0b492bf64656cc2a1","html_url":"https://github.com/apache/openjpa/commit/a255da6f654abbe8e70783a0b492bf64656cc2a1","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a255da6f654abbe8e70783a0b492bf64656cc2a1/comments","author":null,"committer":null,"parents":[{"sha":"4611bf9e43f0782f13216ea14f763e4e5c39a86e","url":"https://api.github.com/repos/apache/openjpa/commits/4611bf9e43f0782f13216ea14f763e4e5c39a86e","html_url":"https://github.com/apache/openjpa/commit/4611bf9e43f0782f13216ea14f763e4e5c39a86e"}],"stats":{"total":279,"additions":278,"deletions":1},"files":[{"sha":"155bf907c0fcb07a73ad542e074081a1401b284d","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionaryFactory.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/a255da6f654abbe8e70783a0b492bf64656cc2a1/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionaryFactory.java","raw_url":"https://github.com/apache/openjpa/raw/a255da6f654abbe8e70783a0b492bf64656cc2a1/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionaryFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionaryFactory.java?ref=a255da6f654abbe8e70783a0b492bf64656cc2a1","patch":"@@ -201,6 +201,12 @@ private static String dictionaryClassForString(String prod) {\n             return CacheDictionary.class.getName();\n         if (prod.indexOf(\"derby\") != -1)\n             return DerbyDictionary.class.getName();\n+        // test h2 in a special way, because there's a decent chance the string \n+        // h2 could appear in the URL of another database\n+        if (prod.indexOf(\"jdbc:h2:\") != -1)\n+            return H2Dictionary.class.getName();\n+        if (prod.indexOf(\"h2 database\") != -1)\n+            return H2Dictionary.class.getName();\n         // test db2 last, because there's a decent chance this string could\n         // appear in the URL of another database (like if the db is named\n         // \"testdb2\" or something)"},{"sha":"6b88b785cbc508e817697747c907d25b57aa199b","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/H2Dictionary.java","status":"added","additions":230,"deletions":0,"changes":230,"blob_url":"https://github.com/apache/openjpa/blob/a255da6f654abbe8e70783a0b492bf64656cc2a1/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/H2Dictionary.java","raw_url":"https://github.com/apache/openjpa/raw/a255da6f654abbe8e70783a0b492bf64656cc2a1/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/H2Dictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/H2Dictionary.java?ref=a255da6f654abbe8e70783a0b492bf64656cc2a1","patch":"@@ -0,0 +1,230 @@\n+package org.apache.openjpa.jdbc.sql;\n+\n+import java.math.BigDecimal;\n+import java.sql.Connection;\n+import java.sql.DatabaseMetaData;\n+import java.sql.PreparedStatement;\n+import java.sql.SQLException;\n+import java.sql.Types;\n+import java.util.Arrays;\n+import java.util.Locale;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.openjpa.jdbc.kernel.exps.FilterValue;\n+import org.apache.openjpa.jdbc.schema.Column;\n+import org.apache.openjpa.jdbc.schema.PrimaryKey;\n+import org.apache.openjpa.jdbc.schema.Table;\n+import org.apache.openjpa.jdbc.schema.Unique;\n+import org.apache.openjpa.meta.JavaTypes;\n+\n+/**\n+ * Support for the H2 database ({@link http://www.h2database.com}).\n+ *\n+ * @since 0.9.7\n+ */\n+public class H2Dictionary extends DBDictionary {\n+\n+    public H2Dictionary() {\n+        platform = \"H2\";\n+        validationSQL = \"CALL 1\";\n+        closePoolSQL = \"SHUTDOWN\";\n+\n+        supportsAutoAssign = true;\n+        lastGeneratedKeyQuery = \"CALL IDENTITY()\";\n+        autoAssignClause = \"IDENTITY\";\n+        autoAssignTypeName = \"INTEGER\";\n+        nextSequenceQuery = \"CALL NEXT VALUE FOR {0}\";\n+\n+        // CROSS JOIN is currently not supported\n+        crossJoinClause = \"JOIN\";\n+        requiresConditionForCrossJoin = true;\n+        stringLengthFunction = \"LENGTH({0})\";\n+        trimLeadingFunction = \"LTRIM({0})\";\n+        trimTrailingFunction = \"RTRIM({0})\";\n+        trimBothFunction = \"TRIM({0})\";\n+\n+        useSchemaName = true;\n+        supportsSelectForUpdate = true;\n+        supportsSelectStartIndex = true;\n+        supportsSelectEndIndex = true;\n+        rangePosition = RANGE_POST_LOCK;\n+        supportsDeferredConstraints = false;\n+\n+        useGetObjectForBlobs = true;\n+        blobTypeName = \"BLOB\";\n+        doubleTypeName = \"DOUBLE\";\n+\n+        supportsNullTableForGetPrimaryKeys = true;\n+        supportsNullTableForGetIndexInfo = true;\n+\n+        requiresCastForMathFunctions = false;\n+        requiresCastForComparisons = false;\n+\n+        reservedWordSet.addAll(Arrays.asList(new String[] {\n+            \"CURRENT_TIMESTAMP\", \"CURRENT_TIME\", \"CURRENT_DATE\", \"CROSS\",\n+            \"DISTINCT\", \"EXCEPT\", \"EXISTS\", \"FROM\", \"FOR\", \"FALSE\", \"FULL\",\n+            \"GROUP\", \"HAVING\", \"INNER\", \"INTERSECT\", \"IS\", \"JOIN\", \"LIKE\",\n+            \"MINUS\", \"NATURAL\", \"NOT\", \"NULL\", \"ON\", \"ORDER\", \"PRIMARY\",\n+            \"ROWNUM\", \"SELECT\", \"SYSDATE\", \"SYSTIME\", \"SYSTIMESTAMP\", \"TODAY\",\n+            \"TRUE\", \"UNION\", \"WHERE\" \n+            }));\n+    }\n+\n+    public int getJDBCType(int metaTypeCode, boolean lob) {\n+        int type = super.getJDBCType(metaTypeCode, lob);\n+        switch (type) {\n+        case Types.BIGINT:\n+            if (metaTypeCode == JavaTypes.BIGINTEGER)\n+                return Types.NUMERIC;\n+            break;\n+        }\n+        return type;\n+    }\n+\n+    public int getPreferredType(int type) {\n+        return super.getPreferredType(type);\n+    }\n+\n+    public String[] getAddPrimaryKeySQL(PrimaryKey pk) {\n+        return new String[0];\n+    }\n+\n+    public String[] getDropPrimaryKeySQL(PrimaryKey pk) {\n+        return new String[0];\n+    }\n+\n+    public String[] getAddColumnSQL(Column column) {\n+        return new String[] { \n+            \"ALTER TABLE \" + getFullName(column.getTable(), false) \n+                + \" ADD COLUMN \" + getDeclareColumnSQL(column, true) \n+        };\n+    }\n+\n+    public String[] getCreateTableSQL(Table table) {\n+        StringBuffer buf = new StringBuffer();\n+        buf.append(\"CREATE TABLE \").append(getFullName(table, false))\n+            .append(\" (\");\n+\n+        Column[] cols = table.getColumns();\n+        for (int i = 0; i < cols.length; i++) {\n+            if (i > 0)\n+                buf.append(\", \");\n+            buf.append(getDeclareColumnSQL(cols[i], false));\n+        }\n+\n+        PrimaryKey pk = table.getPrimaryKey();\n+        String pkStr;\n+        if (pk != null) {\n+            pkStr = getPrimaryKeyConstraintSQL(pk);\n+            if (!StringUtils.isEmpty(pkStr))\n+                buf.append(\", \").append(pkStr);\n+        }\n+\n+        Unique[] unqs = table.getUniques();\n+        String unqStr;\n+        for (int i = 0; i < unqs.length; i++) {\n+            unqStr = getUniqueConstraintSQL(unqs[i]);\n+            if (unqStr != null)\n+                buf.append(\", \").append(unqStr);\n+        }\n+\n+        buf.append(\")\");\n+        return new String[] { buf.toString() };\n+    }\n+\n+    protected String getPrimaryKeyConstraintSQL(PrimaryKey pk) {\n+        Column[] cols = pk.getColumns();\n+        if (cols.length == 1 && cols[0].isAutoAssigned())\n+            return null;\n+        return super.getPrimaryKeyConstraintSQL(pk);\n+    }\n+\n+    public boolean isSystemIndex(String name, Table table) {\n+        return name.toUpperCase(Locale.ENGLISH).startsWith(\"SYSTEM_\");\n+    }\n+\n+    protected String getSequencesSQL(String schemaName, String sequenceName) {\n+        StringBuffer buf = new StringBuffer();\n+        buf.append(\"SELECT SEQUENCE_SCHEMA, SEQUENCE_NAME FROM \")\n+            .append(\"INFORMATION_SCHEMA.SEQUENCES\");\n+        if (schemaName != null || sequenceName != null)\n+            buf.append(\" WHERE \");\n+        if (schemaName != null) {\n+            buf.append(\"SEQUENCE_SCHEMA = ?\");\n+            if (sequenceName != null)\n+                buf.append(\" AND \");\n+        }\n+        if (sequenceName != null)\n+            buf.append(\"SEQUENCE_NAME = ?\");\n+        return buf.toString();\n+    }\n+\n+    protected SQLBuffer toOperation(String op, SQLBuffer selects,\n+        SQLBuffer from, SQLBuffer where, SQLBuffer group, SQLBuffer having,\n+        SQLBuffer order, boolean distinct, boolean forUpdate, long start,\n+        long end) {\n+        return super.toOperation(op, selects, from, where, group, having,\n+            order, distinct, forUpdate, start, end);\n+    }\n+\n+    public Column[] getColumns(DatabaseMetaData meta, String catalog,\n+        String schemaName, String tableName, String columnName, Connection conn)\n+        throws SQLException {\n+        Column[] cols = super.getColumns(meta, catalog, schemaName, tableName, \n+            columnName, conn);\n+        return cols;\n+    }\n+\n+    public void setDouble(PreparedStatement stmnt, int idx, double val,\n+        Column col)\n+        throws SQLException {\n+        super.setDouble(stmnt, idx, val, col);\n+    }\n+\n+    public void setBigDecimal(PreparedStatement stmnt, int idx, BigDecimal val,\n+        Column col)\n+        throws SQLException {\n+        super.setBigDecimal(stmnt, idx, val, col);\n+    }\n+\n+    protected void appendSelectRange(SQLBuffer buf, long start, long end) {\n+        if (end != Long.MAX_VALUE)\n+            buf.append(\" LIMIT \").appendValue(end - start);\n+        if (start != 0)\n+            buf.append(\" OFFSET \").appendValue(start);\n+    }\n+\n+    public void substring(SQLBuffer buf, FilterValue str, FilterValue start,\n+        FilterValue end) {\n+        buf.append(\"SUBSTR(\");\n+        str.appendTo(buf);\n+        buf.append(\", (\");\n+        start.appendTo(buf);\n+        buf.append(\" + 1)\");\n+        if (end != null) {\n+            buf.append(\", (\");\n+            end.appendTo(buf);\n+            buf.append(\" - \");\n+            start.appendTo(buf);\n+            buf.append(\")\");\n+        }\n+        buf.append(\")\");\n+    }\n+\n+    public void indexOf(SQLBuffer buf, FilterValue str, FilterValue find,\n+        FilterValue start) {\n+        buf.append(\"(POSITION(\");\n+        find.appendTo(buf);\n+        buf.append(\" IN \");\n+        if (start != null)\n+            substring(buf, str, start, null);\n+        else\n+            str.appendTo(buf);\n+        buf.append(\") - 1\");\n+        if (start != null) {\n+            buf.append(\" + \");\n+            start.appendTo(buf);\n+        }\n+        buf.append(\")\");\n+    }\n+}\n\\ No newline at end of file"},{"sha":"3000832157650fa79a2ace4fd6ad5e5b475cb666","filename":"openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/conf/localizer.properties","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/a255da6f654abbe8e70783a0b492bf64656cc2a1/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/conf/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/a255da6f654abbe8e70783a0b492bf64656cc2a1/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/conf/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/conf/localizer.properties?ref=a255da6f654abbe8e70783a0b492bf64656cc2a1","patch":"@@ -179,6 +179,7 @@ MappingDefaults-displayorder: 50\n MappingDefaults-interface: org.apache.openjpa.jdbc.meta.MappingDefaults\n \n ConnectionDriverName-values: org.hsqldb.jdbcDriver,org.hsql.jdbcDriver,\\\n+\torg.h2.Driver,\\\n \tCOM.cloudscape.core.JDBCDriver,in.co.daffodil.db.jdbc.DaffodilDBDriver,\\\n \tcom.ddtek.jdbc.db2.DB2Driver,interbase.interclient.Driver,\\\n \tcom.mysql.jdbc.Driver,com.ddtek.jdbc.oracle.OracleDriver,\\\n@@ -213,7 +214,7 @@ ConnectionURL-values: jdbc:JSQLConnect://<hostname>/database=<database>,\\\n \tMaxPooledStatements=0,\\\n \tjdbc:datadirect:sqlserver://<hostname>:1433;SelectMethod=cursor;\\\n \tDatabaseName=<database>,jdbc:datadirect:sybase://<hostname>:5000,\\\n-\tjdbc:db2://<hostname>/<database>,jdbc:hsqldb:<database>,\\\n+\tjdbc:db2://<hostname>/<database>,jdbc:hsqldb:<database>,jdbc:h2:<database>,\\\n \tjdbc:idb:<database>.properties,\\\n \tjdbc:informix-sqli://<hostname>:1526/<database>:INFORMIXSERVER=<database>,\\\n \tjdbc:interbase://<hostname>//<database>.gdb,\\"},{"sha":"625904154e75554ec0b036ba4d586f86b84929f1","filename":"openjpa-project/src/doc/manual/supported_databases.xml","status":"modified","additions":40,"deletions":0,"changes":40,"blob_url":"https://github.com/apache/openjpa/blob/a255da6f654abbe8e70783a0b492bf64656cc2a1/openjpa-project/src/doc/manual/supported_databases.xml","raw_url":"https://github.com/apache/openjpa/raw/a255da6f654abbe8e70783a0b492bf64656cc2a1/openjpa-project/src/doc/manual/supported_databases.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/supported_databases.xml?ref=a255da6f654abbe8e70783a0b492bf64656cc2a1","patch":"@@ -132,6 +132,20 @@ by OpenJPA.\n                         1.0.1\n                     </entry>\n                 </row>\n+                <row>\n+                    <entry colname=\"dbname\">\n+                        H2 Database Engine\n+                    </entry>\n+                    <entry colname=\"dbversion\">\n+                        1.0\n+                    </entry>\n+                    <entry colname=\"drivname\">\n+                        H2\n+                    </entry>\n+                    <entry colname=\"drivversion\">\n+                        1.0\n+                    </entry>\n+                </row>\n                 <row>\n                     <entry colname=\"dbname\">\n                         Hypersonic Database Engine\n@@ -448,6 +462,32 @@ Only the category 2 non-local driver is supported.\n             </itemizedlist>\n         </section>\n     </section>\n+    <section id=\"dbsupport_h2\">\n+        <title>\n+            H2 Database Engine\n+        </title>\n+        <example id=\"example_props_h2\">\n+            <title>\n+                Example properties for H2 Database Engine\n+            </title>\n+<programlisting>\n+openjpa.ConnectionDriverName: org.h2.Driver\n+openjpa.ConnectionURL: jdbc:h2:DB_NAME\n+</programlisting>\n+        </example>\n+        <section id=\"dbsupport_h2_issues\">\n+            <title>\n+                Known issues with H2 Database Engine\n+            </title>\n+            <itemizedlist>\n+                <listitem>\n+                    <para>\n+H2 does not support cross joins\n+                    </para>\n+                </listitem>\n+            </itemizedlist>\n+        </section>\n+    </section>\n     <section id=\"dbsupport_hypersonic\">\n         <title>\n             Hypersonic"}]}

