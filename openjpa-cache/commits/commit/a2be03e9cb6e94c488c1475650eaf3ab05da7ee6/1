{"sha":"a2be03e9cb6e94c488c1475650eaf3ab05da7ee6","node_id":"MDY6Q29tbWl0MjA2MzY0OmEyYmUwM2U5Y2I2ZTk0YzQ4OGMxNDc1NjUwZWFmM2FiMDVkYTdlZTY=","commit":{"author":{"name":"A. Abram White","email":"awhite@apache.org","date":"2007-02-08T19:36:33Z"},"committer":{"name":"A. Abram White","email":"awhite@apache.org","date":"2007-02-08T19:36:33Z"},"message":"Add a DiscriminatorStrategy.hasClassConditions() method rather than having the\nDiscriminatorStrategy.getClassConditions() method return null for no conditions\nso that we can detect whether the joins to the base class owning the \ndiscriminator are necessary before making them.  Otherwise, we run the risk of\ncreating table aliases for base class tables without joining them, which can\nresult in bad SQL. \n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@505017 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"524863003366f52265dd3e127353123fba15e208","url":"https://api.github.com/repos/apache/openjpa/git/trees/524863003366f52265dd3e127353123fba15e208"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a2be03e9cb6e94c488c1475650eaf3ab05da7ee6","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a2be03e9cb6e94c488c1475650eaf3ab05da7ee6","html_url":"https://github.com/apache/openjpa/commit/a2be03e9cb6e94c488c1475650eaf3ab05da7ee6","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a2be03e9cb6e94c488c1475650eaf3ab05da7ee6/comments","author":null,"committer":null,"parents":[{"sha":"859da3f913d8b4f0b142fe872d78847f958f0614","url":"https://api.github.com/repos/apache/openjpa/commits/859da3f913d8b4f0b142fe872d78847f958f0614","html_url":"https://github.com/apache/openjpa/commit/859da3f913d8b4f0b142fe872d78847f958f0614"}],"stats":{"total":70,"additions":47,"deletions":23},"files":[{"sha":"6cedbcc706d0a07f1575879d9dfb066b58471e8f","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/InstanceofExpression.java","status":"modified","additions":2,"deletions":5,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/a2be03e9cb6e94c488c1475650eaf3ab05da7ee6/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/InstanceofExpression.java","raw_url":"https://github.com/apache/openjpa/raw/a2be03e9cb6e94c488c1475650eaf3ab05da7ee6/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/InstanceofExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/InstanceofExpression.java?ref=a2be03e9cb6e94c488c1475650eaf3ab05da7ee6","patch":"@@ -87,7 +87,7 @@ public ExpState initialize(Select sel, ExpContext ctx, Map contains) {\n                 getClassLoader(), false);\n \n             // if not looking for a PC, don't bother with indicator\n-            if (mapping == null)\n+            if (mapping == null || !discrim.hasClassConditions(mapping, true))\n                 discrim = null;\n             else {\n                 ClassMapping owner = discrim.getClassMapping();\n@@ -144,10 +144,7 @@ public void appendTo(Select sel, ExpContext ctx, ExpState state,\n             ctx.store.loadSubclasses(istate.discrim.getClassMapping());\n             SQLBuffer buf = istate.discrim.getClassConditions(sel,\n                 istate.joins, istate.mapping, true);\n-            if (buf == null)\n-                sql.append(\"1 = 1\");\n-            else\n-                sql.append(buf);\n+            sql.append(buf);\n         }\n         sel.append(sql, istate.joins);\n     }"},{"sha":"bd65ea5b46ada019ab8238aa470edf6e6a2ba5c0","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/Discriminator.java","status":"modified","additions":8,"deletions":6,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/a2be03e9cb6e94c488c1475650eaf3ab05da7ee6/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/Discriminator.java","raw_url":"https://github.com/apache/openjpa/raw/a2be03e9cb6e94c488c1475650eaf3ab05da7ee6/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/Discriminator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/Discriminator.java?ref=a2be03e9cb6e94c488c1475650eaf3ab05da7ee6","patch":"@@ -297,6 +297,8 @@ public boolean addClassConditions(Select sel, boolean subs, Joins joins) {\n         if (_mapping.getJoinablePCSuperclassMapping() == null\n             && _mapping.getJoinablePCSubclassMappings().length == 0)\n             return false;\n+        if (!hasClassConditions(_mapping, subs))\n+            return false;\n \n         // join down to base class where conditions will be added\n         ClassMapping from = _mapping;\n@@ -310,12 +312,8 @@ public boolean addClassConditions(Select sel, boolean subs, Joins joins) {\n             }\n         }\n \n-        SQLBuffer buf = getClassConditions(sel, joins, _mapping, subs);\n-        if (buf != null) {\n-            sel.where(buf, joins);\n-            return true;\n-        }\n-        return false;\n+        sel.where(getClassConditions(sel, joins, _mapping, subs), joins);\n+        return true;\n     }\n \n     ////////////////////////////////////////\n@@ -394,6 +392,10 @@ public Class getClass(JDBCStore store, ClassMapping base, Result result)\n         return assertStrategy().getClass(store, base, result);\n     }\n \n+    public boolean hasClassConditions(ClassMapping base, boolean subs) {\n+        return assertStrategy().hasClassConditions(base, subs);\n+    }\n+\n     public SQLBuffer getClassConditions(Select sel, Joins joins, \n         ClassMapping base, boolean subs) {\n         return assertStrategy().getClassConditions(sel, joins, base, subs);"},{"sha":"e61e86233d7d0667a367f64dae97d93b0c61a281","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/DiscriminatorStrategy.java","status":"modified","additions":9,"deletions":3,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/a2be03e9cb6e94c488c1475650eaf3ab05da7ee6/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/DiscriminatorStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/a2be03e9cb6e94c488c1475650eaf3ab05da7ee6/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/DiscriminatorStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/DiscriminatorStrategy.java?ref=a2be03e9cb6e94c488c1475650eaf3ab05da7ee6","patch":"@@ -58,11 +58,17 @@ public void loadSubclasses(JDBCStore store)\n     public Class getClass(JDBCStore store, ClassMapping base, Result result)\n         throws SQLException, ClassNotFoundException;\n \n+    /**\n+     * Whether any class conditions are necessary.\n+     *\n+     * @see #getClassConditions\n+     */\n+    public boolean hasClassConditions(ClassMapping base, boolean subs);\n+\n     /**\n      * Return SQL to limit the classes selected as much as possible to the\n-     * given base class, and optionally its subclasses. Return null if\n-     * no conditions needed. The select and joins instances are supplied\n-     * in order to get column aliases.\n+     * given base class, and optionally its subclasses. The select and joins \n+     * instances are supplied in order to get column aliases.\n      */\n     public SQLBuffer getClassConditions(Select sel, Joins joins, \n         ClassMapping base, boolean subs);"},{"sha":"3253cc26b45f65e8c5ecc17ff80d06b1e07fd36a","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/AbstractDiscriminatorStrategy.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/a2be03e9cb6e94c488c1475650eaf3ab05da7ee6/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/AbstractDiscriminatorStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/a2be03e9cb6e94c488c1475650eaf3ab05da7ee6/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/AbstractDiscriminatorStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/AbstractDiscriminatorStrategy.java?ref=a2be03e9cb6e94c488c1475650eaf3ab05da7ee6","patch":"@@ -82,6 +82,10 @@ public Class getClass(JDBCStore store, ClassMapping base, Result result)\n         return base.getDescribedType();\n     }\n \n+    public boolean hasClassConditions(ClassMapping base, boolean subs) {\n+        return false;\n+    }\n+\n     public SQLBuffer getClassConditions(Select sel, Joins joins, \n         ClassMapping base, boolean subs) {\n         return null;"},{"sha":"109143b9b94fcb5cbd45dd2c3680f33a452ca0ad","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/InValueDiscriminatorStrategy.java","status":"modified","additions":9,"deletions":4,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/a2be03e9cb6e94c488c1475650eaf3ab05da7ee6/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/InValueDiscriminatorStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/a2be03e9cb6e94c488c1475650eaf3ab05da7ee6/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/InValueDiscriminatorStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/InValueDiscriminatorStrategy.java?ref=a2be03e9cb6e94c488c1475650eaf3ab05da7ee6","patch":"@@ -113,19 +113,23 @@ public Class getClass(JDBCStore store, ClassMapping base, Result res)\n         return getClass(cls, store);\n     }\n \n-    public SQLBuffer getClassConditions(Select sel, Joins joins, \n-        ClassMapping base, boolean subclasses) {\n+    public boolean hasClassConditions(ClassMapping base, boolean subclasses) {\n         // if selecting the first mapped class and all subclasses, no need\n         // to limit the query\n         if (isFinal || (base.getJoinablePCSuperclassMapping() == null\n             && subclasses))\n-            return null;\n+            return false;\n \n         // if no subclasses or superclass, no need for conditions\n         ClassMapping[] subs = base.getJoinablePCSubclassMappings();\n         if (subs.length == 0 && base.getJoinablePCSuperclassMapping() == null)\n-            return null;\n+            return false;\n+\n+        return true;\n+    }\n \n+    public SQLBuffer getClassConditions(Select sel, Joins joins, \n+        ClassMapping base, boolean subclasses) {\n         Column col = disc.getColumns()[0];\n         SQLBuffer sql = new SQLBuffer(sel.getConfiguration().\n             getDBDictionaryInstance());\n@@ -136,6 +140,7 @@ public SQLBuffer getClassConditions(Select sel, Joins joins,\n         sql.append(alias);\n \n         // if not selecting subclasses, limit to just the given class\n+        ClassMapping[] subs = base.getJoinablePCSubclassMappings();\n         if (!outer && (!subclasses || subs.length == 0))\n             return sql.append(\" = \").appendValue(getDiscriminatorValue(base),\n                 col);"},{"sha":"13782ff6731334a9e2760f36d886c22b620c6195","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/SubclassJoinDiscriminatorStrategy.java","status":"modified","additions":8,"deletions":4,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/a2be03e9cb6e94c488c1475650eaf3ab05da7ee6/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/SubclassJoinDiscriminatorStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/a2be03e9cb6e94c488c1475650eaf3ab05da7ee6/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/SubclassJoinDiscriminatorStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/SubclassJoinDiscriminatorStrategy.java?ref=a2be03e9cb6e94c488c1475650eaf3ab05da7ee6","patch":"@@ -130,16 +130,20 @@ public Class getClass(JDBCStore store, ClassMapping base, Result res)\n         return derived;\n     }\n \n-    public SQLBuffer getClassConditions(Select sel, Joins joins, \n-        ClassMapping base, boolean subclasses) {\n+    public boolean hasClassConditions(ClassMapping base, boolean subclasses) {\n         if (isFinal || subclasses)\n-            return null;\n+            return false;\n         ClassMapping[] subs = base.getJoinablePCSubclassMappings();\n         if (subs.length == 0)\n-            return null;\n+            return false;\n+        return true;\n+    }\n \n+    public SQLBuffer getClassConditions(Select sel, Joins joins, \n+        ClassMapping base, boolean subclasses) {\n         // add conditions making sure no subclass tables have records for\n         // this instance\n+        ClassMapping[] subs = base.getJoinablePCSubclassMappings();\n         SQLBuffer buf = null;\n         Column[] pks;\n         for (int i = 0; i < subs.length; i++) {"},{"sha":"88ccd172de68b8919b570fe11f1bccaa118ef830","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/SuperclassDiscriminatorStrategy.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/a2be03e9cb6e94c488c1475650eaf3ab05da7ee6/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/SuperclassDiscriminatorStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/a2be03e9cb6e94c488c1475650eaf3ab05da7ee6/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/SuperclassDiscriminatorStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/SuperclassDiscriminatorStrategy.java?ref=a2be03e9cb6e94c488c1475650eaf3ab05da7ee6","patch":"@@ -61,6 +61,11 @@ public Class getClass(JDBCStore store, ClassMapping base, Result res)\n             getDiscriminator().getClass(store, base, res);\n     }\n \n+    public boolean hasClassConditions(ClassMapping base, boolean subclasses) {\n+        return disc.getClassMapping().getPCSuperclassMapping().\n+            getDiscriminator().hasClassConditions(base, subclasses);\n+    }\n+\n     public SQLBuffer getClassConditions(Select sel, Joins joins, \n         ClassMapping base, boolean subclasses) {\n         return disc.getClassMapping().getPCSuperclassMapping()."},{"sha":"31f2532263f98b791e83e7a52edbd503ca7a38c9","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/a2be03e9cb6e94c488c1475650eaf3ab05da7ee6/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/a2be03e9cb6e94c488c1475650eaf3ab05da7ee6/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java?ref=a2be03e9cb6e94c488c1475650eaf3ab05da7ee6","patch":"@@ -1743,7 +1743,8 @@ public SQLBuffer toSelectCount(Select sel) {\n      * cases where a subselect is required and the database doesn't support\n      * subselects), this method should return null.\n      */\n-    public SQLBuffer toDelete(ClassMapping mapping, Select sel, Object[] params) {\n+    public SQLBuffer toDelete(ClassMapping mapping, Select sel, \n+        Object[] params) {\n         return toBulkOperation(mapping, sel, null, params, null);\n     }\n "}]}

