{"sha":"a2d0e0564982b9573270092ed5014ed6f32bd09d","node_id":"MDY6Q29tbWl0MjA2MzY0OmEyZDBlMDU2NDk4MmI5NTczMjcwMDkyZWQ1MDE0ZWQ2ZjMyYmQwOWQ=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-07-19T20:02:23Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-07-19T20:02:23Z"},"message":"OPENJPA-1704: Fix PCEnhancer to generate proper readExternal method. Merged to 2.0.x - submitted by Rick Curtis\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.x@965610 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2b5ccff1f93428097a28f4fc8756410c4ae80d96","url":"https://api.github.com/repos/apache/openjpa/git/trees/2b5ccff1f93428097a28f4fc8756410c4ae80d96"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a2d0e0564982b9573270092ed5014ed6f32bd09d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a2d0e0564982b9573270092ed5014ed6f32bd09d","html_url":"https://github.com/apache/openjpa/commit/a2d0e0564982b9573270092ed5014ed6f32bd09d","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a2d0e0564982b9573270092ed5014ed6f32bd09d/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"dcb8e626a3b634bbacb87c80f40a81643f5653d5","url":"https://api.github.com/repos/apache/openjpa/commits/dcb8e626a3b634bbacb87c80f40a81643f5653d5","html_url":"https://github.com/apache/openjpa/commit/dcb8e626a3b634bbacb87c80f40a81643f5653d5"}],"stats":{"total":110,"additions":100,"deletions":10},"files":[{"sha":"6af2487050e11bda646485fcda65e31dbf98246f","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","status":"modified","additions":6,"deletions":10,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/a2d0e0564982b9573270092ed5014ed6f32bd09d/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","raw_url":"https://github.com/apache/openjpa/raw/a2d0e0564982b9573270092ed5014ed6f32bd09d/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java?ref=a2d0e0564982b9573270092ed5014ed6f32bd09d","patch":"@@ -117,7 +117,7 @@\n     // public int getEnhancementContractVersion()\n     public static final int ENHANCER_VERSION = 2;\n     \n-    boolean _addVersionInitFlag = true;\n+    boolean _addVersionInitFlag = true; \n \n     public static final int ENHANCE_NONE = 0;\n     public static final int ENHANCE_AWARE = 2 << 0;\n@@ -2772,7 +2772,7 @@ private void addFields() {\n         _pc.declareField(PRE + \"FieldTypes\", Class[].class).setStatic(true);\n         _pc.declareField(PRE + \"FieldFlags\", byte[].class).setStatic(true);\n         _pc.declareField(SUPER, Class.class).setStatic(true);\n-        if(_addVersionInitFlag && _meta.getVersionField()!=null){\n+        if (_addVersionInitFlag && _meta.getVersionField() != null) {\n             // protected transient boolean pcVersionInit;\n             BCField field = _pc.declareField(VERSION_INIT_STR, boolean.class);\n             field.makeProtected();\n@@ -3229,17 +3229,15 @@ private boolean writeIsDetachedMethod(Code code)\n             if (!_addVersionInitFlag){\n                 // else return false;\n                 ifins.setTarget(code.getstatic().setField(Boolean.class, \"FALSE\", Boolean.class));\n-            }else{\n-                FieldMetaData versionInit = _meta.getDeclaredField(VERSION_INIT_STR);\n-                \n+            }else{              \n                 // noop\n                 ifins.setTarget(code.nop());\n                 // if (pcVersionInit != false)\n                 // return true\n                 // else return false;\n                 loadManagedInstance(code, false);\n-                getfield(code, null, versionInit.getName());\n-                ifins = ifDefaultValue(code, versionInit);\n+                getfield(code, null, VERSION_INIT_STR);\n+                ifins = code.ifeq();\n                 code.getstatic().setField(Boolean.class, \"TRUE\", Boolean.class);\n                 code.areturn();\n                 ifins.setTarget(code.nop());\n@@ -3709,12 +3707,10 @@ private void addSetMethod(int index, FieldMetaData fmd)\n         addSetManagedValueCode(code, fmd);\n         if(fmd.isVersion()==true && _addVersionInitFlag){\n             // if we are setting the version, flip the versionInit flag to true\n-            FieldMetaData v = _meta.addDeclaredField(VERSION_INIT_STR, boolean.class);\n-            v.setTransient(true);\n             loadManagedInstance(code, true);\n             code.constant().setValue(1);\n             // pcVersionInit = true;\n-            putfield(code, null, v.getName(), v.getDeclaredType());   \n+            putfield(code, null, VERSION_INIT_STR, boolean.class);   \n         }\n         code.vreturn();\n "},{"sha":"3359bfd9a11e424a5c24dd59a325a11e6285c4d9","filename":"openjpa-persistence-jdbc/src/main/ant/enhancer.xml","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/a2d0e0564982b9573270092ed5014ed6f32bd09d/openjpa-persistence-jdbc/src/main/ant/enhancer.xml","raw_url":"https://github.com/apache/openjpa/raw/a2d0e0564982b9573270092ed5014ed6f32bd09d/openjpa-persistence-jdbc/src/main/ant/enhancer.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/ant/enhancer.xml?ref=a2d0e0564982b9573270092ed5014ed6f32bd09d","patch":"@@ -75,6 +75,7 @@\n                  dir=\"${project.build.testOutputDirectory}\">\n             <include name=\"**/*.class\" />\n             <exclude name=\"**/inheritance/serializable/*.class\" />\n+            <exclude name=\"**/detach/serializable/*.class\" />\n             <exclude name=\"**/xml/*.class\" />\n             <exclude name=\"**/Unenhanced*.class\" />\n             <exclude name=\"**/AbstractUnenhanced*.class\" />\n@@ -92,6 +93,7 @@\n             <classpath refid=\"cp\" />\n             <fileset dir=\"${project.build.testOutputDirectory}\">\n                 <include name=\"**/inheritance/serializable/*.class\" />\n+                <include name=\"**/detach/serializable/*.class\" />\n                 <!--  include files from orm.xml -->\n                 <include name=\"**/xml/*.class\" />\n \t\t\t\t<exclude name=\"**/persistence/delimited/identifiers/xml/*.class\"/>"},{"sha":"c1d57752cea4f09e0538898b3d0defae50da8944","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detach/serializable/SerializableDetachedStateManager.java","status":"added","additions":48,"deletions":0,"changes":48,"blob_url":"https://github.com/apache/openjpa/blob/a2d0e0564982b9573270092ed5014ed6f32bd09d/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detach/serializable/SerializableDetachedStateManager.java","raw_url":"https://github.com/apache/openjpa/raw/a2d0e0564982b9573270092ed5014ed6f32bd09d/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detach/serializable/SerializableDetachedStateManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detach/serializable/SerializableDetachedStateManager.java?ref=a2d0e0564982b9573270092ed5014ed6f32bd09d","patch":"@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.detach.serializable;\n+\n+import java.io.Serializable;\n+import java.sql.Date;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.Temporal;\n+import javax.persistence.TemporalType;\n+import javax.persistence.Version;\n+\n+@Entity  \n+public class SerializableDetachedStateManager implements Serializable { \n+    /**\n+     * \n+     */\n+    private static final long serialVersionUID = 80701492251635740L;\n+\n+    @Id\n+    @GeneratedValue(strategy=GenerationType.AUTO)\n+    int id;\n+\n+    @Version\n+    int version;\n+\n+    @Temporal(TemporalType.TIMESTAMP)\n+    Date zDate;\n+}"},{"sha":"eff31de117b03594117ed93806089098862ef7b8","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detach/serializable/TestSerializableDetachedStateManager.java","status":"added","additions":44,"deletions":0,"changes":44,"blob_url":"https://github.com/apache/openjpa/blob/a2d0e0564982b9573270092ed5014ed6f32bd09d/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detach/serializable/TestSerializableDetachedStateManager.java","raw_url":"https://github.com/apache/openjpa/raw/a2d0e0564982b9573270092ed5014ed6f32bd09d/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detach/serializable/TestSerializableDetachedStateManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detach/serializable/TestSerializableDetachedStateManager.java?ref=a2d0e0564982b9573270092ed5014ed6f32bd09d","patch":"@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.detach.serializable;\n+\n+import java.sql.Date;\n+\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\n+import org.apache.openjpa.persistence.test.AbstractPersistenceTestCase;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+public class TestSerializableDetachedStateManager extends SingleEMFTestCase {\n+    public void setUp() {\n+        setUp(CLEAR_TABLES, SerializableDetachedStateManager.class, DROP_TABLES, \"openjpa.DetachState\",\n+            \"fgs(DetachedStateField=true)\");\n+    }\n+    \n+    public void testRoundTrip() throws Exception {\n+        SerializableDetachedStateManager c = new SerializableDetachedStateManager();\n+        c.zDate = new Date(System.currentTimeMillis());\n+        OpenJPAEntityManagerSPI em = emf.createEntityManager();\n+        \n+        em.getTransaction().begin();\n+        em.persist(c);\n+        em.getTransaction().commit();\n+        em.close();\n+        AbstractPersistenceTestCase.roundtrip(c);\n+    }\n+}"}]}

