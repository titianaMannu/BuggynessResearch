{"sha":"a32573481e7759f1c29fd12f9850193b8e611690","node_id":"MDY6Q29tbWl0MjA2MzY0OmEzMjU3MzQ4MWU3NzU5ZjFjMjlmZDEyZjk4NTAxOTNiOGU2MTE2OTA=","commit":{"author":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2010-01-27T19:57:59Z"},"committer":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2010-01-27T19:57:59Z"},"message":"OPENJPA-1485 Check persistent collection attributes for null when determining load state.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@903812 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"aef99192ee4cab523133c7a39956336b679dfde3","url":"https://api.github.com/repos/apache/openjpa/git/trees/aef99192ee4cab523133c7a39956336b679dfde3"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a32573481e7759f1c29fd12f9850193b8e611690","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a32573481e7759f1c29fd12f9850193b8e611690","html_url":"https://github.com/apache/openjpa/commit/a32573481e7759f1c29fd12f9850193b8e611690","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a32573481e7759f1c29fd12f9850193b8e611690/comments","author":null,"committer":null,"parents":[{"sha":"7091a5292781815e9876a03b16f85a644849ee0f","url":"https://api.github.com/repos/apache/openjpa/commits/7091a5292781815e9876a03b16f85a644849ee0f","html_url":"https://github.com/apache/openjpa/commit/7091a5292781815e9876a03b16f85a644849ee0f"}],"stats":{"total":352,"additions":344,"deletions":8},"files":[{"sha":"1fa0146e0c2c2170af2b402e476fc993c2aac2f6","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/util/OneToEntity.java","status":"added","additions":67,"deletions":0,"changes":67,"blob_url":"https://github.com/apache/openjpa/blob/a32573481e7759f1c29fd12f9850193b8e611690/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/util/OneToEntity.java","raw_url":"https://github.com/apache/openjpa/raw/a32573481e7759f1c29fd12f9850193b8e611690/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/util/OneToEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/util/OneToEntity.java?ref=a32573481e7759f1c29fd12f9850193b8e611690","patch":"@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.util;\n+\n+import java.util.Collection;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.OneToMany;\n+\n+@Entity\n+public class OneToEntity {\n+\n+    @Id\n+    @GeneratedValue\n+    private int id;\n+\n+    @OneToMany(cascade=CascadeType.ALL, fetch=FetchType.LAZY)\n+    private Collection<ToManyLazy> toManyLazy;\n+\n+    @OneToMany(cascade=CascadeType.ALL, fetch=FetchType.EAGER)\n+    private Collection<ToManyEager> toManyEager;\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setToManyLazy(Collection<ToManyLazy> toManyEnt) {\n+        this.toManyLazy = toManyEnt;\n+    }\n+\n+    public Collection<ToManyLazy> getToManyLazy() {\n+        return toManyLazy;\n+    }\n+\n+    public void setToManyEager(Collection<ToManyEager> toManyEnt) {\n+        this.toManyEager = toManyEnt;\n+    }\n+\n+    public Collection<ToManyEager> getToManyEager() {\n+        return toManyEager;\n+    }\n+\n+}"},{"sha":"3bfd91d9b3eabbefd2a1512ff36570ffa59e2c70","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/util/TestPersistenceUnitUtil.java","status":"modified","additions":131,"deletions":2,"changes":133,"blob_url":"https://github.com/apache/openjpa/blob/a32573481e7759f1c29fd12f9850193b8e611690/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/util/TestPersistenceUnitUtil.java","raw_url":"https://github.com/apache/openjpa/raw/a32573481e7759f1c29fd12f9850193b8e611690/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/util/TestPersistenceUnitUtil.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/util/TestPersistenceUnitUtil.java?ref=a32573481e7759f1c29fd12f9850193b8e611690","patch":"@@ -21,6 +21,7 @@\n import java.sql.Date;\n import java.util.ArrayList;\n import java.util.HashMap;\n+import java.util.List;\n import java.util.Random;\n \n import javax.persistence.EntityManager;\n@@ -43,7 +44,8 @@ public void setUp() {\n         setUp(CLEAR_TABLES, EagerEntity.class, LazyEmbed.class,\n             LazyEntity.class, EagerEmbed.class, RelEntity.class,\n             EagerEmbedRel.class, MapEntity.class,\n-            MapKeyEmbed.class, MapValEntity.class);\n+            MapKeyEmbed.class, MapValEntity.class,\n+            OneToEntity.class, ToManyLazy.class, ToManyEager.class);\n     }\n \n     /*\n@@ -251,7 +253,7 @@ public void testIsApplicationLoaded() {\n         em.close();\n     }\n \n-    public void testPCMapEager() {        \n+    public void testPCMapEager() {\n         PersistenceUnitUtil puu = emf.getPersistenceUnitUtil();\n         EntityManager em = emf.createEntityManager();\n         \n@@ -296,6 +298,133 @@ public void testPCMapEager() {\n         em.close();\n     }\n \n+    /*\n+     * Verify load state is not loaded for null relationships or relationships\n+     * set to null.\n+     */\n+    public void testSetNullLazyRelationship() {\n+\n+        PersistenceUnitUtil puu = emf.getPersistenceUnitUtil();\n+        EntityManager em = emf.createEntityManager();\n+\n+        try {\n+            OneToEntity ote = new OneToEntity();\n+            assertFalse(puu.isLoaded(ote, \"toManyLazy\"));\n+            em.getTransaction().begin();\n+            em.persist(ote);\n+            em.getTransaction().commit();\n+            em.clear();\n+            ote = em.find(OneToEntity.class, ote.getId());\n+            // Field is lazy and not immediately loaded by the application\n+            assertFalse(puu.isLoaded(ote, \"toManyLazy\"));\n+            // Force load the lazy field\n+            ote.getToManyLazy();\n+            assertTrue(puu.isLoaded(ote, \"toManyLazy\"));\n+            \n+            OneToEntity ote2 = new OneToEntity();\n+            em.getTransaction().begin();\n+            em.persist(ote2);\n+            em.getTransaction().commit();\n+            // Field gets set to loaded upon commit\n+            assertTrue(puu.isLoaded(ote2, \"toManyLazy\"));\n+            em.clear();\n+            ote2 = em.find(OneToEntity.class, ote2.getId());\n+            \n+            // Field is lazy and not immediately loaded by the application\n+            assertFalse(puu.isLoaded(ote2, \"toManyLazy\"));\n+            \n+            // Load by application\n+            List<ToManyLazy> tmes = new ArrayList<ToManyLazy>();\n+            for (int i = 0; i < 5; i++) {\n+                tmes.add(new ToManyLazy(\"ToMany\" + i));\n+            }\n+            em.getTransaction().begin();\n+            ote2.setToManyLazy(tmes);\n+            // App loaded before commit\n+            assertTrue(puu.isLoaded(ote2, \"toManyLazy\"));\n+            em.getTransaction().commit();\n+            // Still loaded after commit\n+            assertTrue(puu.isLoaded(ote2, \"toManyLazy\"));\n+            \n+            // Set to null - no longer loaded per spec.\n+            em.getTransaction().begin();\n+            ote2.setToManyLazy(null);\n+            // Considered unloaded before commit\n+            assertFalse(puu.isLoaded(ote2, \"toManyLazy\"));\n+            em.getTransaction().commit();\n+            //Loaded after commit\n+            assertTrue(puu.isLoaded(ote2, \"toManyLazy\"));\n+        }\n+        finally {\n+            if (em.getTransaction().isActive()) {\n+                em.getTransaction().rollback();\n+            }\n+        }\n+        em.close();\n+    }\n+\n+    public void testSetNullEagerRelationship() {\n+\n+        PersistenceUnitUtil puu = emf.getPersistenceUnitUtil();\n+        EntityManager em = emf.createEntityManager();\n+\n+        try {\n+            OneToEntity ote = new OneToEntity();\n+            assertFalse(puu.isLoaded(ote, \"toManyEager\"));\n+            em.getTransaction().begin();\n+            em.persist(ote);\n+            em.getTransaction().commit();\n+            em.clear();\n+            ote = em.find(OneToEntity.class, ote.getId());\n+            // Field is eater and is immediately loaded by the application\n+            assertTrue(puu.isLoaded(ote, \"toManyEager\"));\n+            \n+            OneToEntity ote2 = new OneToEntity();\n+            em.getTransaction().begin();\n+            em.persist(ote2);\n+            // Field is null by default and not considered loaded.\n+            assertFalse(puu.isLoaded(ote2, \"toManyEager\"));\n+            em.getTransaction().commit();\n+            // Field gets set to loaded upon commit\n+            assertTrue(puu.isLoaded(ote2, \"toManyEager\"));\n+            em.clear();\n+            ote2 = em.find(OneToEntity.class, ote2.getId());\n+            \n+            // Field is eager and is immediately loaded by the application\n+            assertTrue(puu.isLoaded(ote2, \"toManyEager\"));\n+            \n+            // Load by application\n+            List<ToManyEager> tmes = new ArrayList<ToManyEager>();\n+            for (int i = 0; i < 5; i++) {\n+                tmes.add(new ToManyEager(\"ToMany\" + i));\n+            }\n+            em.getTransaction().begin();\n+            ote2.setToManyEager(tmes);\n+            // App loaded before commit\n+            assertTrue(puu.isLoaded(ote2, \"toManyEager\"));\n+            em.getTransaction().commit();\n+            // Still loaded after commit\n+            assertTrue(puu.isLoaded(ote2, \"toManyEager\"));\n+            \n+            // Set to null - no longer loaded per spec.\n+            em.getTransaction().begin();\n+            ote2.setToManyEager(null);\n+            // Entity is considered unloaded before commit\n+            assertFalse(puu.isLoaded(ote2));\n+            // Attribute is considered unloaded before commit\n+            assertFalse(puu.isLoaded(ote2, \"toManyEager\"));\n+            em.getTransaction().commit();\n+            //Loaded after commit\n+            assertTrue(puu.isLoaded(ote2, \"toManyEager\"));\n+        }\n+        finally {\n+            if (em.getTransaction().isActive()) {\n+                em.getTransaction().rollback();\n+            }\n+        }\n+        em.close();\n+    }\n+\n     private EagerEntity createEagerEntity() {\n         EagerEntity ee = new EagerEntity();\n         ee.setId(new Random().nextInt());"},{"sha":"132429a2fa54d38c0f474235c65231959c621519","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/util/ToManyEager.java","status":"added","additions":57,"deletions":0,"changes":57,"blob_url":"https://github.com/apache/openjpa/blob/a32573481e7759f1c29fd12f9850193b8e611690/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/util/ToManyEager.java","raw_url":"https://github.com/apache/openjpa/raw/a32573481e7759f1c29fd12f9850193b8e611690/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/util/ToManyEager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/util/ToManyEager.java?ref=a32573481e7759f1c29fd12f9850193b8e611690","patch":"@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+\n+package org.apache.openjpa.persistence.util;\n+\n+import javax.persistence.Id;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+\n+@Entity\n+public class ToManyEager {\n+\n+    public ToManyEager() {\n+    }\n+\n+    public ToManyEager(String n) {\n+        setName(n);\n+    }\n+\n+    @Id\n+    @GeneratedValue\n+    private int id;\n+    \n+    private String name;\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+}"},{"sha":"06378166214ff1c9befa5b5a372d2c7af7d41fd5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/util/ToManyLazy.java","status":"added","additions":56,"deletions":0,"changes":56,"blob_url":"https://github.com/apache/openjpa/blob/a32573481e7759f1c29fd12f9850193b8e611690/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/util/ToManyLazy.java","raw_url":"https://github.com/apache/openjpa/raw/a32573481e7759f1c29fd12f9850193b8e611690/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/util/ToManyLazy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/util/ToManyLazy.java?ref=a32573481e7759f1c29fd12f9850193b8e611690","patch":"@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.util;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+\n+@Entity\n+public class ToManyLazy {\n+\n+    public ToManyLazy() {\n+    }\n+\n+    public ToManyLazy(String n) {\n+        setName(n);\n+    }\n+\n+    @Id\n+    @GeneratedValue\n+    private int id;\n+    \n+    private String name;\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+}"},{"sha":"ab6aadbf0a68079ac0aa9ed720a77c6d92725d5c","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAPersistenceUtil.java","status":"modified","additions":33,"deletions":6,"changes":39,"blob_url":"https://github.com/apache/openjpa/blob/a32573481e7759f1c29fd12f9850193b8e611690/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAPersistenceUtil.java","raw_url":"https://github.com/apache/openjpa/raw/a32573481e7759f1c29fd12f9850193b8e611690/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAPersistenceUtil.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAPersistenceUtil.java?ref=a32573481e7759f1c29fd12f9850193b8e611690","patch":"@@ -150,6 +150,11 @@ private static LoadState isLoaded(OpenJPAStateManager sm, String attr,\n                 if(!loadSet.get(fmd.getIndex())) {\n                     return LoadState.NOT_LOADED;\n                 }\n+                // If a collected valued attribute and it has been modified, \n+                // make sure it isn't null\n+                if (isCollectionSetToNull(sm, fmd)) {\n+                    return LoadState.NOT_LOADED;\n+                }\n             }\n             FieldMetaData[] fmds = sm.getMetaData().getFields();\n             // Check load state of all persistent eager fetch attributes\n@@ -172,7 +177,29 @@ private static LoadState isLoaded(OpenJPAStateManager sm, String attr,\n         }\n         return isLoaded ? LoadState.LOADED : LoadState.NOT_LOADED;        \n     }\n+\n+    /*\n+     * Returns true if the field is a collection type and it was explicitly\n+     * set to null.\n+     */\n+    private static boolean isCollectionSetToNull(OpenJPAStateManager sm, FieldMetaData fmd) {\n+        BitSet dirtySet = sm.getDirty();\n+        if (dirtySet.get(fmd.getIndex()) && isCollectionType(fmd.getDeclaredTypeCode())) { \n+            Object field = sm.fetchField(fmd.getIndex(), false);\n+            if (field == null) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n     \n+    \n+    private static boolean isCollectionType(int type) {\n+        return (type == JavaTypes.COLLECTION ||\n+                type == JavaTypes.MAP ||\n+                type == JavaTypes.ARRAY);\n+    }\n+\n     private static HashSet<OpenJPAStateManager> addToLoadSet(\n         HashSet<OpenJPAStateManager> pcs, OpenJPAStateManager sm) {\n         if (pcs == null) {\n@@ -202,14 +229,14 @@ private static boolean isLoadedField(OpenJPAStateManager sm,\n         // If a collection type, determine if it is loaded\n         switch (fmd.getDeclaredTypeCode()) {\n             case JavaTypes.COLLECTION:   \n-                return isLoadedCollection(sm, fmd.getElement(), \n-                    (Collection<?>)field, pcs);\n+                return !isCollectionSetToNull(sm, fmd) && \n+                    isLoadedCollection(sm, fmd.getElement(),(Collection<?>)field, pcs);\n             case JavaTypes.MAP:\n-                return isLoadedMap(sm, fmd, \n-                    (Map<?,?>)field, pcs);\n+                return !isCollectionSetToNull(sm, fmd) &&\n+                    isLoadedMap(sm, fmd, (Map<?,?>)field, pcs);\n             case JavaTypes.ARRAY:\n-                return isLoadedArray(sm, fmd.getElement(), \n-                    (Object[])field, pcs);\n+                return !isCollectionSetToNull(sm, fmd) &&\n+                    isLoadedArray(sm, fmd.getElement(), (Object[])field, pcs);\n         }\n         // If other PC type, determine if it is loaded\n         if (ofsm != null && fmd.isDeclaredTypePC()) {"}]}

