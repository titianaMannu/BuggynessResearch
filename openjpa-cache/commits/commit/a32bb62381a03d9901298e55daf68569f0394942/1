{"sha":"a32bb62381a03d9901298e55daf68569f0394942","node_id":"MDY6Q29tbWl0MjA2MzY0OmEzMmJiNjIzODFhMDNkOTkwMTI5OGU1NWRhZjY4NTY5ZjAzOTQ5NDI=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2009-10-17T00:07:04Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2009-10-17T00:07:04Z"},"message":"OPENJPA-1185 Subquery overhaul\nfix subquery correlation involving association table\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@826135 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7543f2192256327536c69b8688656e5752e02276","url":"https://api.github.com/repos/apache/openjpa/git/trees/7543f2192256327536c69b8688656e5752e02276"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a32bb62381a03d9901298e55daf68569f0394942","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a32bb62381a03d9901298e55daf68569f0394942","html_url":"https://github.com/apache/openjpa/commit/a32bb62381a03d9901298e55daf68569f0394942","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a32bb62381a03d9901298e55daf68569f0394942/comments","author":null,"committer":null,"parents":[{"sha":"acab37ec81ea02bf41dfdb431bdf4722a5c4a51e","url":"https://api.github.com/repos/apache/openjpa/commits/acab37ec81ea02bf41dfdb431bdf4722a5c4a51e","html_url":"https://github.com/apache/openjpa/commit/acab37ec81ea02bf41dfdb431bdf4722a5c4a51e"}],"stats":{"total":140,"additions":130,"deletions":10},"files":[{"sha":"97cb26ddc401243ffcd913078c1b86777ebbd7ee","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","status":"modified","additions":11,"deletions":3,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/a32bb62381a03d9901298e55daf68569f0394942/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","raw_url":"https://github.com/apache/openjpa/raw/a32bb62381a03d9901298e55daf68569f0394942/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java?ref=a32bb62381a03d9901298e55daf68569f0394942","patch":"@@ -2859,13 +2859,21 @@ private Joins join(String name, ForeignKey fk, ClassMapping target,\n                 boolean createIndex = true;\n                 Table table2 = (inverse) ? fk.getTable() \n                     : fk.getPrimaryKeyTable();\n-                if (table2.isAssociation())\n-                    createIndex = true;\n+                boolean created = false;\n+                int alias2 = -1;\n+                if (table2.isAssociation()) {\n+                    alias2 = _sel.getTableIndex(table2, this, false);\n+                    if (alias2 == -1)\n+                        createIndex = true;\n+                    else \n+                        created = true;\n+                }\n                 else if (context == _sel.ctx()) \n                    createIndex = true;\n                 else if (correlatedVar != null)\n                     createIndex = false;\n-                int alias2 = _sel.getTableIndex(table2, this, createIndex);\n+                if (!created)\n+                    alias2 = _sel.getTableIndex(table2, this, createIndex);\n                 Join j = new Join(table1, alias1, table2, alias2, fk, inverse);\n                 j.setType((outer) ? Join.TYPE_OUTER : Join.TYPE_INNER);\n "},{"sha":"b2b8a6037d3e0dcce268651737157b1e8ab24a57","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestJPQLSubquery.java","status":"modified","additions":119,"deletions":7,"changes":126,"blob_url":"https://github.com/apache/openjpa/blob/a32bb62381a03d9901298e55daf68569f0394942/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestJPQLSubquery.java","raw_url":"https://github.com/apache/openjpa/raw/a32bb62381a03d9901298e55daf68569f0394942/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestJPQLSubquery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestJPQLSubquery.java?ref=a32bb62381a03d9901298e55daf68569f0394942","patch":"@@ -34,8 +34,6 @@\n import javax.persistence.criteria.SetJoin;\n import javax.persistence.criteria.Subquery;\n \n-import org.apache.openjpa.persistence.test.AllowFailure;\n-\n /**\n  * Tests type-strict version of Criteria API.\n  * \n@@ -1575,13 +1573,22 @@ public void testCorrelatedNestedSubquery1a() {\n         q.where(cb.exists(sq).not());\n         assertEquivalence(q, jpql);\n     }\n-\n-    // Plural correlated Join\n-    public void testCollectionJoin1() {\n+    \n+    public void testPluralCorrelatedJoin1() {\n         String jpql = \"SELECT o.quantity, o.totalCost*1.08, \"\n             + \"a.zipCode FROM Customer c JOIN c.orders o JOIN c.address a \"\n             + \"WHERE a.state = \" \n             + \"(SELECT o.name from Customer c1 JOIN c1.orders o1 where o.quantity = o1.quantity)\";\n+        \n+        String expectedSQL = \"SELECT t2.quantity, (t2.totalCost * ?), t1.zipCode \"\n+            + \"FROM CR_CUST t0 INNER JOIN CR_ODR t2 ON t0.id = t2.CUSTOMER_ID \"\n+            + \"INNER JOIN CR_ADDR t1 ON t0.ADDRESS_ID = t1.id \"\n+            + \"WHERE (t1.state = \"\n+            + \"(SELECT t2.name \"\n+            + \"FROM CR_CUST t3 INNER JOIN CR_ODR t4 ON t3.id = t4.CUSTOMER_ID \"\n+            + \"WHERE (t2.quantity = t4.quantity)) AND 1 = 1)\";\n+        executeAndCompareSQL(jpql, expectedSQL);\n+\n         CriteriaQuery<?> q = cb.createQuery();\n         Root<Customer> cust = q.from(Customer.class);\n         SetJoin<Customer, Order> order = cust.joinSet(\"orders\");\n@@ -1599,10 +1606,55 @@ public void testCollectionJoin1() {\n         assertEquivalence(q, jpql);\n     }\n \n-    // correlated Singular Join => Plural Join\n-    public void testCollection3() {\n+    public void testPluralCorrelatedJoin2() {\n+        String jpql = \"SELECT d.name FROM Department d JOIN d.employees e JOIN e.manager m \"\n+           + \"WHERE m.salary = (SELECT e1.salary from Employee e1 JOIN e1.manager m1 \"\n+           + \"where m.name = m1.name)\";\n+        String expectedSQL = \"SELECT t0.name FROM CR_DEPT t0 \"\n+            + \"INNER JOIN CR_DEPT_CR_EMP t1 ON t0.deptNo = t1.DEPARTMENT_DEPTNO \"\n+            + \"INNER JOIN CR_EMP t2 ON t1.EMPLOYEES_EMPID = t2.empId \"\n+            + \"INNER JOIN CR_EMP t6 ON t1.EMPLOYEES_EMPID = t6.empId \"\n+            + \"INNER JOIN CR_MGR t3 ON t2.MANAGER_ID = t3.id \"\n+            + \"INNER JOIN CR_MGR t7 ON t6.MANAGER_ID = t7.id \"\n+            + \"WHERE (t3.salary = (SELECT t4.salary FROM CR_EMP t4 \"\n+            + \"INNER JOIN CR_MGR t5 ON t4.MANAGER_ID = t5.id \"\n+            + \"WHERE (t7.name = t5.name)) AND 1 = 1)\";\n+        executeAndCompareSQL(jpql, expectedSQL);\n+\n+        CriteriaQuery<String> q = cb.createQuery(String.class);\n+        Root<Department> d = q.from(Department.class);\n+        SetJoin<Department, Employee> e = d.joinSet(\"employees\");\n+        Join<Employee, Manager> m = e.join(\"manager\");\n+        Subquery<Long> sq = q.subquery(Long.class);\n+        Root<Employee> e1 = sq.from(Employee.class);\n+        Join<Employee, Manager> m1 = e1.join(\"manager\");\n+        Join<Employee, Manager> corrJoin = sq.correlate(m);\n+        sq.where(cb.equal(corrJoin.get(Manager_.name), m1.get(Manager_.name)));\n+        q.where(cb.equal(m.get(Manager_.salary), sq.select(e1.get(Employee_.salary))));\n+        q.select(d.get(Department_.name));\n+        \n+        assertEquivalence(q, jpql);\n+    }\n+\n+    public void testPluralCorrelatedJoin3() {\n         String jpql = \"SELECT o FROM Order o JOIN o.customer c JOIN c.accounts a WHERE 10000 < \"\n             + \"ANY (SELECT a1.balance FROM Account a1 WHERE a.owner = a1.owner)\";\n+        String expectedSQL = \"SELECT t0.id, t0.count, t6.id, t6.accountNum, t7.id, t7.city, \"\n+            + \"t7.country, t7.county, t7.state, t7.street, t8.userid, t8.DTYPE, t8.age, \"\n+            + \"t8.compName, t8.creditRating, t8.name, t7.zipCode, t6.balanceOwed, \"\n+            + \"t6.creditRating, t6.filledOrderCount, t6.firstName, t6.lastName, t6.name, \"\n+            + \"t6.status, t0.delivered, t0.name, t0.orderTs, t0.quantity, t0.totalCost \"\n+            + \"FROM CR_ODR t0 \"\n+            + \"INNER JOIN CR_CUST t1 ON t0.CUSTOMER_ID = t1.id \"\n+            + \"LEFT OUTER JOIN CR_CUST t6 ON t0.CUSTOMER_ID = t6.id \"\n+            + \"INNER JOIN CR_CUST_CR_ACCT t2 ON t1.id = t2.CUSTOMER_ID \"\n+            + \"LEFT OUTER JOIN CR_ADDR t7 ON t6.ADDRESS_ID = t7.id \"\n+            + \"INNER JOIN CR_ACCT t3 ON t2.ACCOUNTS_ID = t3.id \"\n+            + \"INNER JOIN CR_ACCT t4 ON t2.ACCOUNTS_ID = t4.id \"\n+            + \"LEFT OUTER JOIN CompUser t8 ON t7.id = t8.ADD_ID WHERE (? < \"\n+            + \"ANY (SELECT t5.balance FROM CR_ACCT t5 \"\n+            + \"WHERE (t4.OWNER_ID = t5.OWNER_ID)) AND 1 = 1)\";\n+        executeAndCompareSQL(jpql, expectedSQL);\n         \n         CriteriaQuery<Order> q = cb.createQuery(Order.class);\n         Root<Order> o = q.from(Order.class);\n@@ -1618,4 +1670,64 @@ public void testCollection3() {\n \n         assertEquivalence(q, jpql);\n     }    \n+\n+    public void testPluralCorrelatedJoin4() {\n+        String jpql = \n+        \"SELECT o.quantity FROM Order o JOIN o.customer c JOIN c.accounts a JOIN a.owner owner WHERE 10000 < \"\n+        + \"ANY (SELECT a1.balance FROM Account a1 JOIN a1.owner owner1 WHERE owner.name = owner1.name)\";\n+        String expectedSQL = \"SELECT t0.quantity FROM CR_ODR t0 \"\n+            + \"INNER JOIN CR_CUST t1 ON t0.CUSTOMER_ID = t1.id \"\n+            + \"INNER JOIN CR_CUST_CR_ACCT t2 ON t1.id = t2.CUSTOMER_ID \"\n+            + \"INNER JOIN CR_ACCT t3 ON t2.ACCOUNTS_ID = t3.id \"\n+            + \"INNER JOIN CR_ACCT t7 ON t2.ACCOUNTS_ID = t7.id \"\n+            + \"INNER JOIN CR_PSN t4 ON t3.OWNER_ID = t4.id \"\n+            + \"INNER JOIN CR_PSN t8 ON t7.OWNER_ID = t8.id WHERE (? < \"\n+            + \"ANY (SELECT t5.balance \"\n+            + \"FROM CR_ACCT t5 INNER JOIN CR_PSN t6 ON t5.OWNER_ID = t6.id \"\n+            + \"WHERE (t8.name = t6.name)) AND 1 = 1)\";\n+        executeAndCompareSQL(jpql, expectedSQL);\n+        \n+        CriteriaQuery<Integer> q = cb.createQuery(Integer.class);\n+        Root<Order> o = q.from(Order.class);\n+        Join<Order,Customer> c = o.join(Order_.customer);\n+        ListJoin<Customer,Account> a = c.joinList(\"accounts\");\n+        Join<Account,Person> owner = a.join(Account_.owner);\n+        \n+        Subquery<Integer> sq = q.subquery(Integer.class);\n+        Root<Account> a1 = sq.from(Account.class);\n+        Join<Account,Person> owner1 = a1.join(Account_.owner);\n+        Join<Account,Person> corrJoin = sq.correlate(owner);\n+        sq.where(cb.equal(corrJoin.get(Person_.name), owner1.get(Person_.name)));\n+        q.where(cb.lt(cb.literal(10000), cb.any(sq.select(a1.get(Account_.balance)))));\n+        q.select(o.get(Order_.quantity));\n+        assertEquivalence(q, jpql);\n+    }    \n+\n+    public void testPluralCorrelatedJoin5() {\n+        String jpql = \"SELECT o.quantity FROM Order o JOIN o.customer c JOIN c.accounts a WHERE c.name = \"\n+            + \"ANY (SELECT owner.name FROM a.owner owner WHERE owner.id = 1)\";\n+        String expectedSQL = \"SELECT t0.quantity FROM CR_ODR t0 \"\n+            + \"INNER JOIN CR_CUST t1 ON t0.CUSTOMER_ID = t1.id \"\n+            + \"INNER JOIN CR_CUST_CR_ACCT t2 ON t1.id = t2.CUSTOMER_ID \"\n+            + \"INNER JOIN CR_ACCT t3 ON t2.ACCOUNTS_ID = t3.id \"\n+            + \"INNER JOIN CR_ACCT t4 ON t2.ACCOUNTS_ID = t4.id \"\n+            + \"WHERE (t1.name = \"\n+            + \"ANY (SELECT t5.name FROM CR_PSN t5 WHERE (t5.id = ? AND t4.OWNER_ID = t5.id)) \"\n+            + \"AND 1 = 1)\";\n+        executeAndCompareSQL(jpql, expectedSQL);\n+        \n+        CriteriaQuery<Integer> q = cb.createQuery(Integer.class);\n+        Root<Order> o = q.from(Order.class);\n+        Join<Order,Customer> c = o.join(Order_.customer);\n+        ListJoin<Customer,Account> a = c.joinList(\"accounts\");\n+         \n+        Subquery<String> sq = q.subquery(String.class);\n+        ListJoin<Customer,Account> a1 = sq.correlate(a);\n+        Join<Account,Person> owner = a1.join(Account_.owner);\n+        sq.where(cb.equal(owner.get(Person_.id), 1));\n+        q.where(cb.equal(c.get(Customer_.name), cb.any(sq.select(owner.get(Person_.name)))));\n+        q.select(o.get(Order_.quantity));\n+        assertEquivalence(q, jpql);\n+    }    \n+\n }"}]}

