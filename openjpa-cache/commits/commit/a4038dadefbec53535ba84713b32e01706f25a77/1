{"sha":"a4038dadefbec53535ba84713b32e01706f25a77","node_id":"MDY6Q29tbWl0MjA2MzY0OmE0MDM4ZGFkZWZiZWM1MzUzNWJhODQ3MTNiMzJlMDE3MDZmMjVhNzc=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2010-07-26T15:30:20Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2010-07-26T15:30:20Z"},"message":"OPENJPA-1719: Prepared SQL cache user parameter ordering problem with subqueries.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@979326 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b07c0782897ff79ada6554e25635dd892cd5a074","url":"https://api.github.com/repos/apache/openjpa/git/trees/b07c0782897ff79ada6554e25635dd892cd5a074"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a4038dadefbec53535ba84713b32e01706f25a77","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a4038dadefbec53535ba84713b32e01706f25a77","html_url":"https://github.com/apache/openjpa/commit/a4038dadefbec53535ba84713b32e01706f25a77","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a4038dadefbec53535ba84713b32e01706f25a77/comments","author":null,"committer":null,"parents":[{"sha":"44a7674d6ef00a358a9d8d51c7a5fc219518c34c","url":"https://api.github.com/repos/apache/openjpa/commits/44a7674d6ef00a358a9d8d51c7a5fc219518c34c","html_url":"https://github.com/apache/openjpa/commit/44a7674d6ef00a358a9d8d51c7a5fc219518c34c"}],"stats":{"total":42,"additions":33,"deletions":9},"files":[{"sha":"8548a40182d86ad75f1c9c1cd456186e3e17ae50","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLBuffer.java","status":"modified","additions":4,"deletions":6,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/a4038dadefbec53535ba84713b32e01706f25a77/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLBuffer.java","raw_url":"https://github.com/apache/openjpa/raw/a4038dadefbec53535ba84713b32e01706f25a77/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLBuffer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLBuffer.java?ref=a4038dadefbec53535ba84713b32e01706f25a77","patch":"@@ -166,13 +166,11 @@ else if (_cols != null)\n                         _userParams = new ArrayList();\n                     _userParams.addAll(paramIndex, buf._userParams);\n                 }\n-                 if (buf._userIndex != null) {\n-                     if (_userIndex == null) {\n+                if (buf._userIndex != null) {\n+                     if (_userIndex == null)\n                          _userIndex = new ArrayList();\n-                         _userIndex.addAll(buf._userIndex);\n-                     } else\n-                         _userIndex.addAll(paramIndex*2, buf._userIndex);\n-                 }\n+                     _userIndex.addAll(buf._userIndex);\n+                }\n                 if (buf._cols != null)\n                     _cols.addAll(paramIndex, buf._cols);\n                 else if (_cols != null)"},{"sha":"a1f22e515dfd81e4eae7289c2fa9b4e3c1ca8cca","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestPreparedQueryCache.java","status":"modified","additions":29,"deletions":3,"changes":32,"blob_url":"https://github.com/apache/openjpa/blob/a4038dadefbec53535ba84713b32e01706f25a77/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestPreparedQueryCache.java","raw_url":"https://github.com/apache/openjpa/raw/a4038dadefbec53535ba84713b32e01706f25a77/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestPreparedQueryCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestPreparedQueryCache.java?ref=a4038dadefbec53535ba84713b32e01706f25a77","patch":"@@ -47,7 +47,6 @@\n import org.apache.openjpa.persistence.OpenJPAPersistence;\n import org.apache.openjpa.persistence.OpenJPAQuery;\n import org.apache.openjpa.persistence.jdbc.sqlcache.Employee.Category;\n-import org.apache.openjpa.persistence.test.AllowFailure;\n \n /**\n  * Tests correctness and performance of queries with and without Prepared Query Cacheing.\n@@ -846,8 +845,7 @@ public void testQueryWithEagerRelationIsNotCached() {\n         assertFalse(book2.getAuthors().isEmpty());\n     }\n \n-    @AllowFailure(message=\"We have problems with reparametrization of subquery + constant literals\")\n-    public void xtestQueryWithUserDefinedAndInternalParamtersInSubquery() {\n+    public void testQueryWithUserDefinedAndInternalParamtersInSubquery() {\n         String jpql = \"Select a From Address a Where Not Exists (\"\n             + \"     Select s.id From Singer As s Where \"\n             + \"        s.address = a  And \"\n@@ -977,6 +975,34 @@ public void testNoParameterOnExternalizedFieldIsIncluded() {\n        assertFalse(q2.getResultList().isEmpty());\n     }\n     \n+    public void testSubqueryParameters() {\n+        EntityManager em = emf.createEntityManager();\n+        String query = \"select e from Employee e \"\n+            + \"inner join e.department d \"\n+            + \"inner join d.company c \"\n+            + \"where mod(c.startYear, 100) = 0 \"\n+            + \"and exists (select e2 from Employee e2 \"\n+                + \"inner join e2.department d2 \"\n+                + \"inner join d2.company c2 \"\n+                + \"where e2.address.city = e.address.city \"\n+                + \"and e2.isManager = false \"\n+                + \"and d2.name = d.name \"\n+                + \"and c2.name = :companyName) \"\n+            + \"and d.name = :departmentName\";\n+\n+        em.getTransaction().begin();\n+        TypedQuery<Employee> q1 = em.createQuery(query, Employee.class);\n+        q1.setParameter(\"companyName\", \"acme.org\");\n+        q1.setParameter(\"departmentName\", \"Engineering\");\n+        assertEquals(q1.getResultList().size(), 6);\n+\n+        TypedQuery<Employee> q2 = em.createQuery(query, Employee.class);\n+        q2.setParameter(\"companyName\", \"acme.org\");\n+        q2.setParameter(\"departmentName\", \"Engineering\");\n+        assertEquals(q2.getResultList().size(), 6);\n+        em.getTransaction().rollback();\n+    }\n+\n     public void testRepeatedParameterInSubqueryInDifferentOrder() {\n         OpenJPAEntityManager em = emf.createEntityManager();\n         String jpql =  \"select o from OrderJPA o \" "}]}

