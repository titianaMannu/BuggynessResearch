{"sha":"a453aa9f462cccb99f028426298e885c25b0cee2","node_id":"MDY6Q29tbWl0MjA2MzY0OmE0NTNhYTlmNDYyY2NjYjk5ZjAyODQyNjI5OGU4ODVjMjViMGNlZTI=","commit":{"author":{"name":"Mark Struberg","email":"struberg@apache.org","date":"2016-03-14T17:07:38Z"},"committer":{"name":"Mark Struberg","email":"struberg@apache.org","date":"2016-03-14T17:07:38Z"},"message":"OPENJPA-2632 fallback to TCCL for select new if class cannot be found\n\nThat might happen if the entities are loaded within a shared ear lib\nbut the actual \"select new\" is performed from another ClassLoader (e.g. WAR)\nContributed by Reinhard Sandtner (apacheId: rsandtner). Txs for the patch!\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1734966 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c8ec242a06ec4d6b7f3ff3d65f23fae0dd1e3637","url":"https://api.github.com/repos/apache/openjpa/git/trees/c8ec242a06ec4d6b7f3ff3d65f23fae0dd1e3637"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a453aa9f462cccb99f028426298e885c25b0cee2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a453aa9f462cccb99f028426298e885c25b0cee2","html_url":"https://github.com/apache/openjpa/commit/a453aa9f462cccb99f028426298e885c25b0cee2","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a453aa9f462cccb99f028426298e885c25b0cee2/comments","author":{"login":"struberg","id":79310,"node_id":"MDQ6VXNlcjc5MzEw","avatar_url":"https://avatars.githubusercontent.com/u/79310?v=4","gravatar_id":"","url":"https://api.github.com/users/struberg","html_url":"https://github.com/struberg","followers_url":"https://api.github.com/users/struberg/followers","following_url":"https://api.github.com/users/struberg/following{/other_user}","gists_url":"https://api.github.com/users/struberg/gists{/gist_id}","starred_url":"https://api.github.com/users/struberg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/struberg/subscriptions","organizations_url":"https://api.github.com/users/struberg/orgs","repos_url":"https://api.github.com/users/struberg/repos","events_url":"https://api.github.com/users/struberg/events{/privacy}","received_events_url":"https://api.github.com/users/struberg/received_events","type":"User","site_admin":false},"committer":{"login":"struberg","id":79310,"node_id":"MDQ6VXNlcjc5MzEw","avatar_url":"https://avatars.githubusercontent.com/u/79310?v=4","gravatar_id":"","url":"https://api.github.com/users/struberg","html_url":"https://github.com/struberg","followers_url":"https://api.github.com/users/struberg/followers","following_url":"https://api.github.com/users/struberg/following{/other_user}","gists_url":"https://api.github.com/users/struberg/gists{/gist_id}","starred_url":"https://api.github.com/users/struberg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/struberg/subscriptions","organizations_url":"https://api.github.com/users/struberg/orgs","repos_url":"https://api.github.com/users/struberg/repos","events_url":"https://api.github.com/users/struberg/events{/privacy}","received_events_url":"https://api.github.com/users/struberg/received_events","type":"User","site_admin":false},"parents":[{"sha":"07e28229519cead427ff2cd8b7e05a566c07f7f7","url":"https://api.github.com/repos/apache/openjpa/commits/07e28229519cead427ff2cd8b7e05a566c07f7f7","html_url":"https://github.com/apache/openjpa/commit/07e28229519cead427ff2cd8b7e05a566c07f7f7"}],"stats":{"total":77,"additions":76,"deletions":1},"files":[{"sha":"53f06574cf62974fdc38af1761a258fdf4dce64d","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfiguration.java","status":"modified","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/apache/openjpa/blob/a453aa9f462cccb99f028426298e885c25b0cee2/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/a453aa9f462cccb99f028426298e885c25b0cee2/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfiguration.java?ref=a453aa9f462cccb99f028426298e885c25b0cee2","patch":"@@ -219,6 +219,13 @@\n     public static final String OPTION_POSTLOAD_ON_MERGE =\n         \"openjpa.option.PostLoadOnMerge\";\n \n+    /**\n+     * Option to enable TCCL if the result class for select new is not found\n+     * in the entities classloader\n+     */\n+    public static final String OPTION_USE_TCCL_IN_SELECT_NEW =\n+            \"openjpa.option.UseTCCLinSelectNew\";\n+\n     /**\n      * Return the set of option strings supported by this runtime. This set\n      * is mutable.\n@@ -1949,5 +1956,32 @@\n       * @since 2.2.0\n       */\n       public void setOptimizeIdCopy(Boolean optimizeIds);\n+\n+      /**\n+       * Indicates if the {@link Thread#contextClassLoader} should be used\n+       * as fallback if the result class for {@code select new} is not found\n+       * by the classloader of the entity.\n+       *\n+       * @since 2.4.2\n+       */\n+      public boolean getUseTCCLinSelectNew();\n+\n+      /**\n+       * Indicates if the {@link Thread#contextClassLoader} should be used\n+       * as fallback if the result class for {@code select new} is not found\n+       * by the classloader of the entity.\n+       *\n+       * @since 2.4.2\n+       */\n+      public void setUseTCCLinSelectNew(boolean useTcclForSelectNew);\n+\n+      /**\n+       * Indicates if the {@link Thread#contextClassLoader} should be used\n+       * as fallback if the result class for {@code select new} is not found\n+       * by the classloader of the entity.\n+       *\n+       * @since 2.4.2\n+       */\n+      public void setUseTCCLinSelectNew(Boolean useTcclForSelectNew);\n }\n "},{"sha":"86e6a256d3de542097c60746c9e1b66a683f8622","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","status":"modified","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/apache/openjpa/blob/a453aa9f462cccb99f028426298e885c25b0cee2/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/a453aa9f462cccb99f028426298e885c25b0cee2/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java?ref=a453aa9f462cccb99f028426298e885c25b0cee2","patch":"@@ -177,6 +177,7 @@\n     public PluginListValue instrumentationProviders;\n     public BooleanValue postLoadOnMerge;\n     public BooleanValue optimizeIdCopy;\n+    public BooleanValue useTcclForSelectNew;\n     \n     // custom values\n     public BrokerFactoryValue brokerFactoryPlugin;\n@@ -604,6 +605,10 @@ public OpenJPAConfigurationImpl(boolean derivations, boolean loadGlobals) {\n         aliases = new String[] { \"default\", AuditLogger.class.getName(), };\n         auditorPlugin.setAliases(aliases);\n         auditorPlugin.setInstantiatingGetter(\"getAuditorInstance\");\n+\n+        useTcclForSelectNew = addBoolean(\"UseTCCLinSelectNew\");\n+        useTcclForSelectNew.setDefault(\"false\");\n+        useTcclForSelectNew.set(false);\n         \n         // initialize supported options that some runtimes may not support\n         supportedOptions.add(OPTION_NONTRANS_READ);\n@@ -622,6 +627,7 @@ public OpenJPAConfigurationImpl(boolean derivations, boolean loadGlobals) {\n         supportedOptions.add(OPTION_VALUE_INCREMENT);\n         supportedOptions.add(OPTION_DATASTORE_CONNECTION);\n         supportedOptions.add(OPTION_POSTLOAD_ON_MERGE);\n+        supportedOptions.add(OPTION_USE_TCCL_IN_SELECT_NEW);\n \n         if (derivations)\n             ProductDerivations.beforeConfigurationLoad(this);\n@@ -1873,5 +1879,22 @@ public void setOptimizeIdCopy(Boolean optimizeId) {\n             setOptimizeIdCopy(optimizeId.booleanValue());\n         }\n     }\n+\n+    @Override\n+    public boolean getUseTCCLinSelectNew() {\n+        return useTcclForSelectNew.get();\n+    }\n+\n+    @Override\n+    public void setUseTCCLinSelectNew(boolean useTcclForSelectNew) {\n+        this.useTcclForSelectNew.set(useTcclForSelectNew);\n+    }\n+\n+    @Override\n+    public void setUseTCCLinSelectNew(Boolean useTcclForSelectNew) {\n+        if (useTcclForSelectNew != null) {\n+            setUseTCCLinSelectNew(useTcclForSelectNew.booleanValue());\n+        }\n+    }\n }\n "},{"sha":"f6f0cd7909ec258da64fa6bf95ecf8b6cae42c7b","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","status":"modified","additions":19,"deletions":1,"changes":20,"blob_url":"https://github.com/apache/openjpa/blob/a453aa9f462cccb99f028426298e885c25b0cee2/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","raw_url":"https://github.com/apache/openjpa/raw/a453aa9f462cccb99f028426298e885c25b0cee2/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java?ref=a453aa9f462cccb99f028426298e885c25b0cee2","patch":"@@ -22,6 +22,7 @@\n import java.io.Serializable;\n import java.lang.reflect.Field;\n import java.math.BigDecimal;\n+import java.security.AccessController;\n import java.sql.Time;\n import java.sql.Timestamp;\n import java.util.ArrayList;\n@@ -56,6 +57,7 @@\n import org.apache.openjpa.kernel.exps.Subquery;\n import org.apache.openjpa.kernel.exps.Value;\n import org.apache.openjpa.lib.log.Log;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.lib.util.OrderedMap;\n import org.apache.openjpa.lib.util.Localizer.Message;\n@@ -410,6 +412,22 @@ private void evalProjectionsResultShape(JPQLNode selectionsNode,\n                     String baseName = left(node).getChild(n-1).text;\n                     constructor = resolver.classForName(baseName, null);\n                 }\n+\n+                if (constructor == null && resolver.getConfiguration().getUseTCCLinSelectNew()) {\n+                    try {\n+                        if (System.getSecurityManager() != null) {\n+                            constructor = AccessController.doPrivileged(\n+                                    J2DoPrivHelper.getForNameAction(resultClassName, false,\n+                                        AccessController.doPrivileged(J2DoPrivHelper.getContextClassLoaderAction())));\n+                        }\n+                        else {\n+                            constructor = Thread.currentThread().getContextClassLoader().loadClass(resultClassName);\n+                        }\n+                    } catch (Exception e) {\n+                        // ignore\n+                    }\n+                }\n+\n                 if (constructor == null)\n                     throw parseException(EX_USER, \"no-constructor\",\n                             new Object[]{ resultClassName }, null);\n@@ -1612,7 +1630,7 @@ private Value getSubquery(JPQLNode node) {\n      * determines whether the first argument is used as-is or converted to\n      * an Integer as parameter key. \n      * \n-     * @param the text as it appears in the parsed node\n+     * @param id the text as it appears in the parsed node\n      * @param positional if true the first argument is converted to an integer\n      * @param isCollectionValued true for collection-valued parameters\n      */"}]}

