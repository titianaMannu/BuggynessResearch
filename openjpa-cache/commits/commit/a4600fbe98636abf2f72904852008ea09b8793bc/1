{"sha":"a4600fbe98636abf2f72904852008ea09b8793bc","node_id":"MDY6Q29tbWl0MjA2MzY0OmE0NjAwZmJlOTg2MzZhYmYyZjcyOTA0ODUyMDA4ZWEwOWI4NzkzYmM=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-02-29T23:06:06Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-02-29T23:06:06Z"},"message":"OPENJPA-528 Handle foreignKey column names similarly to joins in PeristenceMetaDataDefaults.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@632486 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5a8fc4cab2e697216531c0fd35d1c1294659a10e","url":"https://api.github.com/repos/apache/openjpa/git/trees/5a8fc4cab2e697216531c0fd35d1c1294659a10e"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a4600fbe98636abf2f72904852008ea09b8793bc","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a4600fbe98636abf2f72904852008ea09b8793bc","html_url":"https://github.com/apache/openjpa/commit/a4600fbe98636abf2f72904852008ea09b8793bc","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a4600fbe98636abf2f72904852008ea09b8793bc/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"527b09ce6ecde12d1037a8ef9a86312d3dbe6971","url":"https://api.github.com/repos/apache/openjpa/commits/527b09ce6ecde12d1037a8ef9a86312d3dbe6971","html_url":"https://github.com/apache/openjpa/commit/527b09ce6ecde12d1037a8ef9a86312d3dbe6971"}],"stats":{"total":118,"additions":116,"deletions":2},"files":[{"sha":"437c02fc92e5f52a3c3ceb4a71c0a18437a76049","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/PersistenceMappingDefaults.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/a4600fbe98636abf2f72904852008ea09b8793bc/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/PersistenceMappingDefaults.java","raw_url":"https://github.com/apache/openjpa/raw/a4600fbe98636abf2f72904852008ea09b8793bc/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/PersistenceMappingDefaults.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/PersistenceMappingDefaults.java?ref=a4600fbe98636abf2f72904852008ea09b8793bc","patch":"@@ -192,9 +192,9 @@ public void populateForeignKeyColumn(ValueMapping vm, String name,\n             if (isRemoveHungarianNotation())\n                 name = removeHungarianNotation(name);\n \n+            name = name + \"_\" + ((Column) target).getName();\n             name = dict.getValidColumnName(name, local);\n-\n-            col.setName(name + \"_\" + ((Column) target).getName());\n+            col.setName(name);\n         }\n     }\n "},{"sha":"60e6f1164ae57e3408e11840a8f80d606b35c29b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestFKColumnNames.java","status":"added","additions":114,"deletions":0,"changes":114,"blob_url":"https://github.com/apache/openjpa/blob/a4600fbe98636abf2f72904852008ea09b8793bc/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestFKColumnNames.java","raw_url":"https://github.com/apache/openjpa/raw/a4600fbe98636abf2f72904852008ea09b8793bc/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestFKColumnNames.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestFKColumnNames.java?ref=a4600fbe98636abf2f72904852008ea09b8793bc","patch":"@@ -0,0 +1,114 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.OneToOne;\n+import javax.persistence.Persistence;\n+\n+import junit.framework.TestCase;\n+\n+import org.apache.openjpa.jdbc.meta.MappingRepository;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n+\n+/**\n+ * Testcase that verifies the names for Foreign Key columns is as expected.\n+ */\n+public class TestFKColumnNames extends TestCase {\n+\n+    OpenJPAEntityManagerFactorySPI emf =\n+            (OpenJPAEntityManagerFactorySPI) Persistence\n+                    .createEntityManagerFactory(\"test\");\n+\n+    /**\n+     * <P>\n+     * If a Foreign Key field contains a SQL reserved word, the resulting column\n+     * should be named ${reservedWord}_ID, not ${reservedWord}<B>0</B>_ID.\n+     * </P>\n+     * <P>\n+     * This test does not take into account and DB specific reserved words and\n+     * can be run with any DBDictionary.\n+     * </P>\n+     */\n+    public void testSQLKeywords() {\n+        MappingRepository repos =\n+                (MappingRepository) emf.getConfiguration()\n+                        .getMetaDataRepositoryInstance();\n+\n+        assertEquals(\"SELECT_ID\", repos.getMapping(Inner1.class, null, true)\n+                .getFieldMapping(\"select\").getColumns()[0].getName());\n+\n+        assertEquals(\"FROM_ID\", repos.getMapping(Inner2.class, null, true)\n+                .getFieldMapping(\"from\").getColumns()[0].getName());\n+    }\n+\n+    @Entity\n+    public static class Inner1 {\n+        @Id\n+        @GeneratedValue\n+        int id;\n+\n+        @OneToOne\n+        Inner2 select;\n+\n+        public Inner2 getSelect() {\n+            return select;\n+        }\n+\n+        public void setSelect(Inner2 select) {\n+            this.select = select;\n+        }\n+\n+        public int getId() {\n+            return id;\n+        }\n+\n+        public void setId(int id) {\n+            this.id = id;\n+        }\n+    }\n+\n+    @Entity\n+    public static class Inner2 {\n+        @Id\n+        @GeneratedValue\n+        int id;\n+\n+        @OneToOne\n+        Inner1 from;\n+\n+        public Inner1 getFrom() {\n+            return from;\n+        }\n+\n+        public void setFrom(Inner1 from) {\n+            this.from = from;\n+        }\n+\n+        public int getId() {\n+            return id;\n+        }\n+\n+        public void setId(int id) {\n+            this.id = id;\n+        }\n+    }\n+}"}]}

