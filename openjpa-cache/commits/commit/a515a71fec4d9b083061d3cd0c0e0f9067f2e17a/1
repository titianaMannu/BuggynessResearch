{"sha":"a515a71fec4d9b083061d3cd0c0e0f9067f2e17a","node_id":"MDY6Q29tbWl0MjA2MzY0OmE1MTVhNzFmZWM0ZDliMDgzMDYxZDNjZDBjMGUwZjkwNjdmMmUxN2E=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-03-02T20:04:42Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-03-02T20:04:42Z"},"message":"OPENJPA-1548: Refactored ClassMetaData and cached hashCode() to improve performance.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@918167 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"21333cc6622cdb3a36aaa1f70fcb4e779040c405","url":"https://api.github.com/repos/apache/openjpa/git/trees/21333cc6622cdb3a36aaa1f70fcb4e779040c405"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a515a71fec4d9b083061d3cd0c0e0f9067f2e17a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a515a71fec4d9b083061d3cd0c0e0f9067f2e17a","html_url":"https://github.com/apache/openjpa/commit/a515a71fec4d9b083061d3cd0c0e0f9067f2e17a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a515a71fec4d9b083061d3cd0c0e0f9067f2e17a/comments","author":null,"committer":null,"parents":[{"sha":"3aea82e40c85ff6d653095a797b00a189681d64f","url":"https://api.github.com/repos/apache/openjpa/commits/3aea82e40c85ff6d653095a797b00a189681d64f","html_url":"https://github.com/apache/openjpa/commit/3aea82e40c85ff6d653095a797b00a189681d64f"}],"stats":{"total":26,"additions":16,"deletions":10},"files":[{"sha":"5a05261de9b2c23cba572742d82a33989594a059","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","status":"modified","additions":16,"deletions":10,"changes":26,"blob_url":"https://github.com/apache/openjpa/blob/a515a71fec4d9b083061d3cd0c0e0f9067f2e17a/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/a515a71fec4d9b083061d3cd0c0e0f9067f2e17a/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java?ref=a515a71fec4d9b083061d3cd0c0e0f9067f2e17a","patch":"@@ -152,6 +152,7 @@\n     private int _resMode = MODE_NONE;\n \n     private Class<?> _type = Object.class;\n+    private int _hashCode = Object.class.getName().hashCode();\n     private final Map<String,FieldMetaData> _fieldMap = new TreeMap<String,FieldMetaData>();\n     private Map<String,FieldMetaData> _supFieldMap = null;\n     private boolean _defSupFields = false;\n@@ -265,6 +266,7 @@ protected void setDescribedType(Class<?> type) {\n             (type.getSuperclass().getName()))\n             throw new MetaDataException(_loc.get(\"enum\", type));\n         _type = type;\n+        _hashCode = _type.getName().hashCode();\n         if (PersistenceCapable.class.isAssignableFrom(type))\n             setIntercepting(true);\n     }\n@@ -1116,22 +1118,24 @@ protected FieldMetaData getSuperclassField(FieldMetaData supField) {\n      * Return the version field for this class, if any.\n      */\n     public FieldMetaData getVersionField() {\n+        if (_allFields == null) {\n+            getFields();\n+        }\n         if (_versionIdx == Integer.MIN_VALUE) {\n-            FieldMetaData[] fields = getFields();\n             int idx = -1;\n-            for (int i = 0; i < fields.length; i++) {\n-                if (fields[i].isVersion()) {\n+            for (int i = 0; i < _allFields.length; i++) {\n+                if (_allFields[i].isVersion()) {\n                     if (idx != -1)\n-                        throw new MetaDataException(_loc.get\n-                            (\"mult-vers-fields\", this, fields[idx], fields[i]));\n+                        throw new MetaDataException(_loc.get(\"mult-vers-fields\", this, _allFields[idx], _allFields[i]));\n                     idx = i;\n                 }\n             }\n             _versionIdx = idx;\n         }\n         if (_versionIdx == -1)\n             return null;\n-        return getFields()[_versionIdx];\n+\n+        return _allFields[_versionIdx];\n     }\n \n     /**\n@@ -1141,10 +1145,12 @@ public FieldMetaData getVersionField() {\n      * @return the field's metadata, or null if not found\n      */\n     public FieldMetaData getField(int index) {\n-        FieldMetaData[] fields = getFields();\n-        if (index < 0 || index >= fields.length)\n+        if(_allFields == null){\n+            getFields();\n+        }\n+        if (index < 0 || index >= _allFields.length)\n             return null;\n-        return fields[index];\n+        return _allFields[index];\n     }\n \n     /**\n@@ -1646,7 +1652,7 @@ private void cacheFields() {\n     }\n \n     public int hashCode() {\n-        return _type.getName().hashCode();\n+        return _hashCode;\n     }\n \n     public boolean equals(Object other) {"}]}

