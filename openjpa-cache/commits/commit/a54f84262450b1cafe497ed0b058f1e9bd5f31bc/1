{"sha":"a54f84262450b1cafe497ed0b058f1e9bd5f31bc","node_id":"MDY6Q29tbWl0MjA2MzY0OmE1NGY4NDI2MjQ1MGIxY2FmZTQ5N2VkMGIwNThmMWU5YmQ1ZjMxYmM=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2007-12-10T19:15:35Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2007-12-10T19:15:35Z"},"message":"OPENJPA-462: Narrow StoreException by SQLException.getSQLState()\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@603001 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"bec2f16da4ebe0631afcb7dbd782cc64f8625190","url":"https://api.github.com/repos/apache/openjpa/git/trees/bec2f16da4ebe0631afcb7dbd782cc64f8625190"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a54f84262450b1cafe497ed0b058f1e9bd5f31bc","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a54f84262450b1cafe497ed0b058f1e9bd5f31bc","html_url":"https://github.com/apache/openjpa/commit/a54f84262450b1cafe497ed0b058f1e9bd5f31bc","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a54f84262450b1cafe497ed0b058f1e9bd5f31bc/comments","author":null,"committer":null,"parents":[{"sha":"88aa0ce910a9ea15033c6289337d8aec94445f09","url":"https://api.github.com/repos/apache/openjpa/commits/88aa0ce910a9ea15033c6289337d8aec94445f09","html_url":"https://github.com/apache/openjpa/commit/88aa0ce910a9ea15033c6289337d8aec94445f09"}],"stats":{"total":76,"additions":71,"deletions":5},"files":[{"sha":"e83c32e9772f906bb772158a6938a00fa826c415","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","status":"modified","additions":32,"deletions":4,"changes":36,"blob_url":"https://github.com/apache/openjpa/blob/a54f84262450b1cafe497ed0b058f1e9bd5f31bc/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/a54f84262450b1cafe497ed0b058f1e9bd5f31bc/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java?ref=a54f84262450b1cafe497ed0b058f1e9bd5f31bc","patch":"@@ -98,7 +98,6 @@\n import org.apache.openjpa.util.InternalException;\n import org.apache.openjpa.util.InvalidStateException;\n import org.apache.openjpa.util.OpenJPAException;\n-import org.apache.openjpa.util.ReferentialIntegrityException;\n import org.apache.openjpa.util.Serialization;\n import org.apache.openjpa.util.StoreException;\n import org.apache.openjpa.util.UnsupportedException;\n@@ -150,6 +149,16 @@\n     private static final String ZERO_TIMESTAMP_STR =\n         \"'\" + new Timestamp(0) + \"'\";\n \n+    public static final List EMPTY_STRING_LIST = Arrays.asList(new String[]{});\n+    public static final List[] SQL_STATE_CODES = \n+    \t{EMPTY_STRING_LIST,                     // 0: Default\n+    \t Arrays.asList(new String[]{\"41000\"}),  // 1: LOCK\n+    \t EMPTY_STRING_LIST,                     // 2: OBJECT_NOT_FOUND\n+    \t EMPTY_STRING_LIST,                     // 3: OPTIMISTIC\n+    \t Arrays.asList(new String[]{\"23000\"}),  // 4: REFERENTIAL_INTEGRITY\n+    \t EMPTY_STRING_LIST                      // 5: OBJECT_EXISTS\n+    \t}; \n+                                              \n     private static final Localizer _loc = Localizer.forPackage\n         (DBDictionary.class);\n \n@@ -4006,12 +4015,31 @@ public void handleWarning(SQLWarning warning)\n      */\n     public OpenJPAException newStoreException(String msg, SQLException[] causes,\n         Object failed) {\n-        if (causes.length > 0 && \"23000\".equals(causes[0].getSQLState()))\n-            return new ReferentialIntegrityException(msg).\n-                setFailedObject(failed).setNestedThrowables(causes);\n+    \tif (causes != null && causes.length > 0) {\n+    \t\tOpenJPAException ret = SQLExceptions.narrow(msg, causes[0], this);\n+    \t\tret.setFailedObject(failed).setNestedThrowables(causes);\n+    \t\treturn ret;\n+    \t}\n         return new StoreException(msg).setFailedObject(failed).\n             setNestedThrowables(causes);\n     }\n+    \n+    /**\n+     * Gets the list of String, each represents an error that can help \n+     * to narrow down a SQL exception to specific type of StoreException.<br>\n+     * For example, error code <code>\"23000\"</code> represents referential\n+     * integrity violation and hence can be narrowed down to \n+     * {@link ReferentialIntegrityException} rather than more general\n+     * {@link StoreException}.<br>\n+     * JDBC Drivers are not uniform in return values of SQLState for the same\n+     * error and hence each database specific Dictionary can specialize.<br>\n+     * Default behavior is to return an empty list. \n+     */\n+    public List/*<String>*/ getSQLStates(int exceptionType) {\n+    \tif (exceptionType>=0 && exceptionType<SQL_STATE_CODES.length)\n+    \t\treturn SQL_STATE_CODES[exceptionType];\n+    \treturn EMPTY_STRING_LIST;\n+    }\n \n     /**\n      * Closes the specified {@link DataSource} and releases any"},{"sha":"134f02bdcf1eafbae6f8e7c52de292e699597001","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLExceptions.java","status":"modified","additions":34,"deletions":1,"changes":35,"blob_url":"https://github.com/apache/openjpa/blob/a54f84262450b1cafe497ed0b058f1e9bd5f31bc/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLExceptions.java","raw_url":"https://github.com/apache/openjpa/raw/a54f84262450b1cafe497ed0b058f1e9bd5f31bc/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLExceptions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLExceptions.java?ref=a54f84262450b1cafe497ed0b058f1e9bd5f31bc","patch":"@@ -23,7 +23,12 @@\n import java.util.List;\n \n import org.apache.openjpa.lib.util.Localizer.Message;\n+import org.apache.openjpa.util.LockException;\n+import org.apache.openjpa.util.ObjectExistsException;\n+import org.apache.openjpa.util.ObjectNotFoundException;\n import org.apache.openjpa.util.OpenJPAException;\n+import org.apache.openjpa.util.OptimisticException;\n+import org.apache.openjpa.util.ReferentialIntegrityException;\n import org.apache.openjpa.util.StoreException;\n \n /**\n@@ -96,7 +101,7 @@ public static OpenJPAException getStore(String msg, SQLException se,\n                 setNestedThrowables(ses);\n         return dict.newStoreException(msg, ses, failed);\n     }\n-\n+    \n     /**\n      * Returns an array of {@link SQLException} instances for the\n      * specified exception.\n@@ -112,4 +117,32 @@ public static OpenJPAException getStore(String msg, SQLException se,\n         }\n         return (SQLException[]) errs.toArray(new SQLException[errs.size()]);\n     }\n+    \n+    /**\n+     * Narrows the given SQLException to a specific type of \n+     * {@link StoreException#getSubtype() StoreException} by analyzing the\n+     * SQLState code supplied by SQLException. Each database-specific \n+     * {@link DBDictionary dictionary} can supply a set of error codes that will\n+     * map to a specific specific type of StoreException via \n+     * {@link DBDictionary#getSQLStates(int) getSQLStates()} method.\n+     * The default behavior is to return generic {@link StoreException \n+     * StoreException}.\n+     */\n+    public static OpenJPAException narrow(String msg, SQLException se, \n+    \t\tDBDictionary dict) {\n+        String e = se.getSQLState();\n+        if (dict.getSQLStates(StoreException.LOCK).contains(e)) \n+            return new LockException(msg);\n+        else if (dict.getSQLStates(StoreException.OBJECT_EXISTS).contains(e))\n+            return new ObjectExistsException(msg);\n+        else if (dict.getSQLStates(StoreException.OBJECT_NOT_FOUND).contains(e))\n+            return new ObjectNotFoundException(msg);\n+        else if (dict.getSQLStates(StoreException.OPTIMISTIC).contains(e))\n+            return new OptimisticException(msg);\n+        else if (dict.getSQLStates(StoreException.REFERENTIAL_INTEGRITY)\n+        \t\t.contains(e)) \n+            return new ReferentialIntegrityException(msg);\n+        else\n+            return new StoreException(msg);\n+    }\n }"},{"sha":"74d1c020a649aad2d04e91b91a6640adbffb02a2","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ObjectExistsException.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/a54f84262450b1cafe497ed0b058f1e9bd5f31bc/openjpa-kernel/src/main/java/org/apache/openjpa/util/ObjectExistsException.java","raw_url":"https://github.com/apache/openjpa/raw/a54f84262450b1cafe497ed0b058f1e9bd5f31bc/openjpa-kernel/src/main/java/org/apache/openjpa/util/ObjectExistsException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ObjectExistsException.java?ref=a54f84262450b1cafe497ed0b058f1e9bd5f31bc","patch":"@@ -28,6 +28,10 @@\n public class ObjectExistsException\n     extends StoreException {\n \n+    public ObjectExistsException(String msg) {\n+\t\tsuper(msg);\n+    }\n+\t\n     public ObjectExistsException(Message msg) {\n         super(msg);\n     }"},{"sha":"78f3d54fd43f8764ad28bff1714d29fa93ef983f","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceExceptions.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/a54f84262450b1cafe497ed0b058f1e9bd5f31bc/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceExceptions.java","raw_url":"https://github.com/apache/openjpa/raw/a54f84262450b1cafe497ed0b058f1e9bd5f31bc/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceExceptions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceExceptions.java?ref=a54f84262450b1cafe497ed0b058f1e9bd5f31bc","patch":"@@ -146,6 +146,7 @@ private static Throwable translateStoreException(OpenJPAException ke) {\n                         getFailedObject(ke), ke.isFatal());\n                 break;\n             case StoreException.OPTIMISTIC:\n+            case StoreException.LOCK:\n                 e = new org.apache.openjpa.persistence.OptimisticLockException\n                     (ke.getMessage(), getNestedThrowables(ke),\n                         getFailedObject(ke), ke.isFatal());"}]}

