{"sha":"a5788cc859181ad55354083930e2c515a35df95a","node_id":"MDY6Q29tbWl0MjA2MzY0OmE1Nzg4Y2M4NTkxODFhZDU1MzU0MDgzOTMwZTJjNTE1YTM1ZGY5NWE=","commit":{"author":{"name":"Romain Manni-Bucau","email":"rmannibucau@apache.org","date":"2016-01-29T10:36:53Z"},"committer":{"name":"Romain Manni-Bucau","email":"rmannibucau@apache.org","date":"2016-01-29T10:36:53Z"},"message":"OPENJPA-2626 support of java 8 bytecode test for isEnhanced - avoid to have logs full of exception/warnings when it actually works cause it is already enahnced at build time\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1727520 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"afe4fb81d12811cabdd269aebbeaa9911eaa933a","url":"https://api.github.com/repos/apache/openjpa/git/trees/afe4fb81d12811cabdd269aebbeaa9911eaa933a"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a5788cc859181ad55354083930e2c515a35df95a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a5788cc859181ad55354083930e2c515a35df95a","html_url":"https://github.com/apache/openjpa/commit/a5788cc859181ad55354083930e2c515a35df95a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a5788cc859181ad55354083930e2c515a35df95a/comments","author":{"login":"rmannibucau","id":1249546,"node_id":"MDQ6VXNlcjEyNDk1NDY=","avatar_url":"https://avatars.githubusercontent.com/u/1249546?v=4","gravatar_id":"","url":"https://api.github.com/users/rmannibucau","html_url":"https://github.com/rmannibucau","followers_url":"https://api.github.com/users/rmannibucau/followers","following_url":"https://api.github.com/users/rmannibucau/following{/other_user}","gists_url":"https://api.github.com/users/rmannibucau/gists{/gist_id}","starred_url":"https://api.github.com/users/rmannibucau/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rmannibucau/subscriptions","organizations_url":"https://api.github.com/users/rmannibucau/orgs","repos_url":"https://api.github.com/users/rmannibucau/repos","events_url":"https://api.github.com/users/rmannibucau/events{/privacy}","received_events_url":"https://api.github.com/users/rmannibucau/received_events","type":"User","site_admin":false},"committer":{"login":"rmannibucau","id":1249546,"node_id":"MDQ6VXNlcjEyNDk1NDY=","avatar_url":"https://avatars.githubusercontent.com/u/1249546?v=4","gravatar_id":"","url":"https://api.github.com/users/rmannibucau","html_url":"https://github.com/rmannibucau","followers_url":"https://api.github.com/users/rmannibucau/followers","following_url":"https://api.github.com/users/rmannibucau/following{/other_user}","gists_url":"https://api.github.com/users/rmannibucau/gists{/gist_id}","starred_url":"https://api.github.com/users/rmannibucau/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rmannibucau/subscriptions","organizations_url":"https://api.github.com/users/rmannibucau/orgs","repos_url":"https://api.github.com/users/rmannibucau/repos","events_url":"https://api.github.com/users/rmannibucau/events{/privacy}","received_events_url":"https://api.github.com/users/rmannibucau/received_events","type":"User","site_admin":false},"parents":[{"sha":"9f39c60a0a68f13964cc597e844f5f7826efc83a","url":"https://api.github.com/repos/apache/openjpa/commits/9f39c60a0a68f13964cc597e844f5f7826efc83a","html_url":"https://github.com/apache/openjpa/commit/9f39c60a0a68f13964cc597e844f5f7826efc83a"}],"stats":{"total":335,"additions":335,"deletions":0},"files":[{"sha":"cfca1947d4b0ecc050d437565483b7081552723d","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/AsmAdaptor.java","status":"modified","additions":79,"deletions":0,"changes":79,"blob_url":"https://github.com/apache/openjpa/blob/a5788cc859181ad55354083930e2c515a35df95a/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/AsmAdaptor.java","raw_url":"https://github.com/apache/openjpa/raw/a5788cc859181ad55354083930e2c515a35df95a/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/AsmAdaptor.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/AsmAdaptor.java?ref=a5788cc859181ad55354083930e2c515a35df95a","patch":"@@ -20,22 +20,29 @@\n \n import java.io.BufferedInputStream;\n import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n import java.io.File;\n import java.io.FileOutputStream;\n import java.io.IOException;\n+import java.io.InputStream;\n import java.io.OutputStream;\n import java.net.URLDecoder;\n \n import org.apache.xbean.asm5.ClassReader;\n+import org.apache.xbean.asm5.ClassVisitor;\n import org.apache.xbean.asm5.ClassWriter;\n+import org.apache.xbean.asm5.Opcodes;\n import serp.bytecode.BCClass;\n \n+import static java.util.Arrays.asList;\n+\n \n /**\n  * Use ASM to add required StackMapTable attribute to the byte code generated by\n  * Serp.\n  */\n public final class AsmAdaptor {\n+    private static final boolean USE_ASM = System.getProperty(\"java.version\").compareTo(\"1.6\") > 0;\n     private static final int Java7_MajorVersion = 51;\n \n     @SuppressWarnings(\"deprecation\")\n@@ -95,6 +102,70 @@ private static void writeJava7(BCClass bc, OutputStream out) throws IOException\n         return cw.toByteArray();\n     }\n \n+    public static boolean use()\n+    {\n+        return USE_ASM;\n+    }\n+\n+    public static boolean isEnhanced(final byte[] b)\n+    {\n+        if (b == null)\n+        {\n+            return false;\n+        }\n+        final ClassReader cr = new ClassReader(b);\n+        try\n+        {\n+            cr.accept(new ClassVisitor(Opcodes.ASM5)\n+            {\n+                @Override\n+                public void visit(final int i, final int i1,\n+                                  final String name, final String s,\n+                                  final String parent, final String[] interfaces)\n+                {\n+                    boolean enhanced = interfaces != null && interfaces.length > 0 &&\n+                        asList(interfaces).contains(\"org/apache/openjpa/enhance/PersistenceCapable\");\n+                    if (!enhanced && name != null && parent != null &&\n+                        !\"java/lang/Object\".equals(parent) && !name.equals(parent)) {\n+                        enhanced = isEnhanced(bytes(parent));\n+                    }\n+                    throw new EnhancedStatusException(enhanced);\n+                }\n+            }, 0);\n+            return false;\n+        } catch (final EnhancedStatusException e) {\n+            return e.status;\n+        } catch (final Exception e) {\n+            return false;\n+        }\n+    }\n+\n+    private static byte[] bytes(final String type)\n+    {\n+        final ByteArrayOutputStream baos = new ByteArrayOutputStream(1024);\n+        final InputStream stream = Thread.currentThread().getContextClassLoader()\n+            .getResourceAsStream(type + \".class\");\n+        if (stream == null) {\n+            return null;\n+        }\n+        try {\n+            int c;\n+            byte[] buffer = new byte[1024];\n+            while ((c = stream.read(buffer)) >= 0) {\n+                baos.write(buffer, 0, c);\n+            }\n+        } catch (IOException e) {\n+            return null;\n+        } finally {\n+            try {\n+                stream.close();\n+            } catch (IOException e) {\n+                // no-op\n+            }\n+        }\n+        return baos.toByteArray();\n+    }\n+\n     private static class BCClassWriter extends ClassWriter {\n         private final ClassLoader _loader;\n \n@@ -128,4 +199,12 @@ protected String getCommonSuperClass(String type1, String type2) {\n             return class1.getName().replace('.', '/');\n         }\n     }\n+\n+    private static class EnhancedStatusException extends RuntimeException {\n+        private final boolean status;\n+\n+        private EnhancedStatusException(final boolean status) {\n+            this.status = status;\n+        }\n+    }\n }"},{"sha":"02a5aec342624d0f81d2e133287344c1b07b2bd7","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCClassFileTransformer.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/a5788cc859181ad55354083930e2c515a35df95a/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCClassFileTransformer.java","raw_url":"https://github.com/apache/openjpa/raw/a5788cc859181ad55354083930e2c515a35df95a/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCClassFileTransformer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCClassFileTransformer.java?ref=a5788cc859181ad55354083930e2c515a35df95a","patch":"@@ -37,6 +37,8 @@\n import serp.bytecode.Project;\n import serp.bytecode.lowlevel.ConstantPoolTable;\n \n+import static com.sun.xml.internal.fastinfoset.alphabet.BuiltInRestrictedAlphabets.table;\n+\n /**\n  * Transformer that makes persistent classes implement the\n  * {@link PersistenceCapable} interface at runtime.\n@@ -227,6 +229,11 @@ private Boolean needsEnhance(String clsName, Class redef, byte[] bytes) {\n      * {@link PersistenceCapable}.\n      */\n     private static boolean isEnhanced(byte[] b) {\n+        if (AsmAdaptor.use())\n+        {\n+            return AsmAdaptor.isEnhanced(b);\n+        }\n+\n         ConstantPoolTable table = new ConstantPoolTable(b);\n         int idx = table.getEndIndex();\n "},{"sha":"a9b865bc27d81feb4410614c0079712d609436f8","filename":"openjpa-kernel/src/test/java/org/apache/openjpa/enhance/TestAsmAdaptor.java","status":"added","additions":249,"deletions":0,"changes":249,"blob_url":"https://github.com/apache/openjpa/blob/a5788cc859181ad55354083930e2c515a35df95a/openjpa-kernel/src/test/java/org/apache/openjpa/enhance/TestAsmAdaptor.java","raw_url":"https://github.com/apache/openjpa/raw/a5788cc859181ad55354083930e2c515a35df95a/openjpa-kernel/src/test/java/org/apache/openjpa/enhance/TestAsmAdaptor.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/test/java/org/apache/openjpa/enhance/TestAsmAdaptor.java?ref=a5788cc859181ad55354083930e2c515a35df95a","patch":"@@ -0,0 +1,249 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.enhance;\n+\n+import org.junit.Test;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+public class TestAsmAdaptor\n+{\n+    @Test\n+    public void isEnhanced()\n+    {\n+        if (!AsmAdaptor.use())\n+        {\n+            return;\n+        }\n+        assertTrue(AsmAdaptor.isEnhanced(bytes(Enhanced.class)));\n+        assertTrue(AsmAdaptor.isEnhanced(bytes(TransitivelyEnhanced.class)));\n+        assertFalse(AsmAdaptor.isEnhanced(bytes(NotEnhanced.class)));\n+    }\n+\n+    private byte[] bytes(final Class<?> type)\n+    {\n+        final ByteArrayOutputStream baos = new ByteArrayOutputStream(1024);\n+        final InputStream stream = Thread.currentThread().getContextClassLoader()\n+            .getResourceAsStream(type.getName().replace('.', '/') + \".class\");\n+        try\n+        {\n+            int c;\n+            byte[] buffer = new byte[1024];\n+            while ((c = stream.read(buffer)) >= 0)\n+            {\n+                baos.write(buffer, 0, c);\n+            }\n+        }\n+        catch (IOException e)\n+        {\n+            fail(e.getMessage());\n+        }\n+        finally\n+        {\n+            try\n+            {\n+                stream.close();\n+            }\n+            catch (IOException e)\n+            {\n+                // no-op\n+            }\n+        }\n+        return baos.toByteArray();\n+    }\n+\n+    public static class NotEnhanced\n+    {\n+    }\n+\n+    public static class TransitivelyEnhanced extends Enhanced\n+    {\n+    }\n+\n+    public static class Enhanced implements PersistenceCapable // just a mock for the test\n+    {\n+        @Override\n+        public int pcGetEnhancementContractVersion()\n+        {\n+            return 0;\n+        }\n+\n+        @Override\n+        public Object pcGetGenericContext()\n+        {\n+            return null;\n+        }\n+\n+        @Override\n+        public StateManager pcGetStateManager()\n+        {\n+            return null;\n+        }\n+\n+        @Override\n+        public void pcReplaceStateManager(StateManager sm)\n+        {\n+\n+        }\n+\n+        @Override\n+        public void pcProvideField(int fieldIndex)\n+        {\n+\n+        }\n+\n+        @Override\n+        public void pcProvideFields(int[] fieldIndices)\n+        {\n+\n+        }\n+\n+        @Override\n+        public void pcReplaceField(int fieldIndex)\n+        {\n+\n+        }\n+\n+        @Override\n+        public void pcReplaceFields(int[] fieldIndex)\n+        {\n+\n+        }\n+\n+        @Override\n+        public void pcCopyFields(Object fromObject, int[] fields)\n+        {\n+\n+        }\n+\n+        @Override\n+        public void pcDirty(String fieldName)\n+        {\n+\n+        }\n+\n+        @Override\n+        public Object pcFetchObjectId()\n+        {\n+            return null;\n+        }\n+\n+        @Override\n+        public Object pcGetVersion()\n+        {\n+            return null;\n+        }\n+\n+        @Override\n+        public boolean pcIsDirty()\n+        {\n+            return false;\n+        }\n+\n+        @Override\n+        public boolean pcIsTransactional()\n+        {\n+            return false;\n+        }\n+\n+        @Override\n+        public boolean pcIsPersistent()\n+        {\n+            return false;\n+        }\n+\n+        @Override\n+        public boolean pcIsNew()\n+        {\n+            return false;\n+        }\n+\n+        @Override\n+        public boolean pcIsDeleted()\n+        {\n+            return false;\n+        }\n+\n+        @Override\n+        public Boolean pcIsDetached()\n+        {\n+            return null;\n+        }\n+\n+        @Override\n+        public PersistenceCapable pcNewInstance(StateManager sm, boolean clear)\n+        {\n+            return null;\n+        }\n+\n+        @Override\n+        public PersistenceCapable pcNewInstance(StateManager sm, Object obj, boolean clear)\n+        {\n+            return null;\n+        }\n+\n+        @Override\n+        public Object pcNewObjectIdInstance()\n+        {\n+            return null;\n+        }\n+\n+        @Override\n+        public Object pcNewObjectIdInstance(Object obj)\n+        {\n+            return null;\n+        }\n+\n+        @Override\n+        public void pcCopyKeyFieldsToObjectId(Object obj)\n+        {\n+\n+        }\n+\n+        @Override\n+        public void pcCopyKeyFieldsToObjectId(FieldSupplier supplier, Object obj)\n+        {\n+\n+        }\n+\n+        @Override\n+        public void pcCopyKeyFieldsFromObjectId(FieldConsumer consumer, Object obj)\n+        {\n+\n+        }\n+\n+        @Override\n+        public Object pcGetDetachedState()\n+        {\n+            return null;\n+        }\n+\n+        @Override\n+        public void pcSetDetachedState(Object state)\n+        {\n+\n+        }\n+    }\n+}"}]}

