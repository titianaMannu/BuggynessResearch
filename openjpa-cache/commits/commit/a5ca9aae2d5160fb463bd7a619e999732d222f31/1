{"sha":"a5ca9aae2d5160fb463bd7a619e999732d222f31","node_id":"MDY6Q29tbWl0MjA2MzY0OmE1Y2E5YWFlMmQ1MTYwZmI0NjNiZDdhNjE5ZTk5OTczMmQyMjJmMzE=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2010-03-16T06:11:18Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2010-03-16T06:11:18Z"},"message":"OPENJPA-1573: Incorrect SQL for HAVING = entity variable\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@923589 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"257e5c1ed1c9e53e048f18b92231c0a47da65a4d","url":"https://api.github.com/repos/apache/openjpa/git/trees/257e5c1ed1c9e53e048f18b92231c0a47da65a4d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a5ca9aae2d5160fb463bd7a619e999732d222f31","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a5ca9aae2d5160fb463bd7a619e999732d222f31","html_url":"https://github.com/apache/openjpa/commit/a5ca9aae2d5160fb463bd7a619e999732d222f31","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a5ca9aae2d5160fb463bd7a619e999732d222f31/comments","author":null,"committer":null,"parents":[{"sha":"9c09bc3728e1f57ebb27f7c9995ea2b3b1c64a79","url":"https://api.github.com/repos/apache/openjpa/commits/9c09bc3728e1f57ebb27f7c9995ea2b3b1c64a79","html_url":"https://github.com/apache/openjpa/commit/9c09bc3728e1f57ebb27f7c9995ea2b3b1c64a79"}],"stats":{"total":84,"additions":61,"deletions":23},"files":[{"sha":"2cfe5ab650ad0c7d331a220e4350407657a22991","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/a5ca9aae2d5160fb463bd7a619e999732d222f31/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java","raw_url":"https://github.com/apache/openjpa/raw/a5ca9aae2d5160fb463bd7a619e999732d222f31/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java?ref=a5ca9aae2d5160fb463bd7a619e999732d222f31","patch":"@@ -189,6 +189,12 @@ public synchronized void setContainsId(String id) {\n         if (_cid)\n             return;\n \n+        Action last = _actions == null ? null : (Action) _actions.getLast();\n+        if (last != null && last.op == Action.VAR && ((String)last.data).equals(last.var)) {\n+            _cid = true;\n+            return;\n+        }            \n+            \n         // treat it just like a unique variable\n         Action action = new Action();\n         action.op = Action.VAR;"},{"sha":"ba77009d301a7499d958aab728bdd17490bef500","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestJPQLSubquery.java","status":"modified","additions":14,"deletions":18,"changes":32,"blob_url":"https://github.com/apache/openjpa/blob/a5ca9aae2d5160fb463bd7a619e999732d222f31/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestJPQLSubquery.java","raw_url":"https://github.com/apache/openjpa/raw/a5ca9aae2d5160fb463bd7a619e999732d222f31/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestJPQLSubquery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestJPQLSubquery.java?ref=a5ca9aae2d5160fb463bd7a619e999732d222f31","patch":"@@ -35,8 +35,6 @@\n import javax.persistence.criteria.Subquery;\n \n import org.apache.openjpa.jdbc.sql.DerbyDictionary;\n-import org.apache.openjpa.persistence.criteria.AbstractCriteriaTestCase.QueryDecorator;\n-import org.apache.openjpa.persistence.embed.Division;\n \n /**\n  * Tests type-strict version of Criteria API.\n@@ -658,17 +656,16 @@ public void testExist1b() {\n         String jpql = \"select c from Customer c left join c.orders o where exists\"\n             + \" (select o2 from c.orders o2 where o2 = o)\";\n \n-        String expectedSQL = \"SELECT t0.id, t0.accountNum, t5.id, t5.city, t5.country, t5.county, \"\n-            + \"t5.state, t5.street, t6.userid, t6.DTYPE, t6.age, t6.compName, t6.creditRating, t6.name, \"\n-            + \"t5.zipCode, t0.balanceOwed, t0.creditRating, t0.filledOrderCount, t0.firstName, t0.lastName, \"\n+        String expectedSQL = \"SELECT t0.id, t0.accountNum, t4.id, t4.city, t4.country, t4.county, \"\n+            + \"t4.state, t4.street, t5.userid, t5.DTYPE, t5.age, t5.compName, t5.creditRating, t5.name, \"\n+            + \"t4.zipCode, t0.balanceOwed, t0.creditRating, t0.filledOrderCount, t0.firstName, t0.lastName, \"\n             + \"t0.name, t0.status \"\n             + \"FROM CR_CUST t0 \"\n             + \"LEFT OUTER JOIN CR_ODR t1 ON t0.id = t1.CUSTOMER_ID \"\n-            + \"LEFT OUTER JOIN CR_ODR t2 ON t0.id = t2.CUSTOMER_ID \"\n-            + \"LEFT OUTER JOIN CR_ADDR t5 ON t0.ADDRESS_ID = t5.id \"\n-            + \"LEFT OUTER JOIN CompUser t6 ON t5.id = t6.ADD_ID WHERE (EXISTS (\"\n-            + \"SELECT t4.id FROM CR_ODR t3, CR_ODR t4 WHERE (t2.id = t4.id AND t3.id = t4.id) \"\n-            + \"AND (t0.id = t3.CUSTOMER_ID)))\";\n+            + \"LEFT OUTER JOIN CR_ADDR t4 ON t0.ADDRESS_ID = t4.id \"\n+            + \"LEFT OUTER JOIN CompUser t5 ON t4.id = t5.ADD_ID WHERE (EXISTS (\" \n+            + \"SELECT t3.id FROM CR_ODR t2, CR_ODR t3 WHERE (t1.id = t3.id AND t2.id = t3.id) \"\n+            + \"AND (t0.id = t2.CUSTOMER_ID)))\";\n \n         executeAndCompareSQL(jpql, expectedSQL);\n \n@@ -711,17 +708,16 @@ public void testNotExist1a() {\n         String jpql = \"select c from Customer c left join c.orders o where not exists\"\n             + \" (select o2 from c.orders o2 where o2 = o)\";\n \n-        String expectedSQL = \"SELECT t0.id, t0.accountNum, t5.id, t5.city, t5.country, t5.county, \"\n-            + \"t5.state, t5.street, t6.userid, t6.DTYPE, t6.age, t6.compName, t6.creditRating, t6.name, \"\n-            + \"t5.zipCode, t0.balanceOwed, t0.creditRating, t0.filledOrderCount, t0.firstName, t0.lastName, \"\n+        String expectedSQL = \"SELECT t0.id, t0.accountNum, t4.id, t4.city, t4.country, t4.county, \"\n+            + \"t4.state, t4.street, t5.userid, t5.DTYPE, t5.age, t5.compName, t5.creditRating, t5.name, \"\n+            + \"t4.zipCode, t0.balanceOwed, t0.creditRating, t0.filledOrderCount, t0.firstName, t0.lastName, \"\n             + \"t0.name, t0.status \"\n             + \"FROM CR_CUST t0 \"\n             + \"LEFT OUTER JOIN CR_ODR t1 ON t0.id = t1.CUSTOMER_ID \"\n-            + \"LEFT OUTER JOIN CR_ODR t2 ON t0.id = t2.CUSTOMER_ID \"\n-            + \"LEFT OUTER JOIN CR_ADDR t5 ON t0.ADDRESS_ID = t5.id \"\n-            + \"LEFT OUTER JOIN CompUser t6 ON t5.id = t6.ADD_ID WHERE (NOT (EXISTS (\"\n-            + \"SELECT t4.id FROM CR_ODR t3, CR_ODR t4 WHERE (t2.id = t4.id AND t3.id = t4.id) \"\n-            + \"AND (t0.id = t3.CUSTOMER_ID))))\";\n+            + \"LEFT OUTER JOIN CR_ADDR t4 ON t0.ADDRESS_ID = t4.id \"\n+            + \"LEFT OUTER JOIN CompUser t5 ON t4.id = t5.ADD_ID WHERE (NOT (EXISTS (\"\n+            + \"SELECT t3.id FROM CR_ODR t2, CR_ODR t3 WHERE (t1.id = t3.id AND t2.id = t3.id) \"\n+            + \"AND (t0.id = t2.CUSTOMER_ID))))\";\n \n         executeAndCompareSQL(jpql, expectedSQL);\n "},{"sha":"a19e1a1e91c366277d76a019176e42534f30dd99","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestTypesafeCriteria.java","status":"modified","additions":3,"deletions":5,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/a5ca9aae2d5160fb463bd7a619e999732d222f31/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestTypesafeCriteria.java","raw_url":"https://github.com/apache/openjpa/raw/a5ca9aae2d5160fb463bd7a619e999732d222f31/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestTypesafeCriteria.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestTypesafeCriteria.java?ref=a5ca9aae2d5160fb463bd7a619e999732d222f31","patch":"@@ -1085,9 +1085,8 @@ public void testKeys8() {\n     public void testValues1() {\n         String sql = \"SELECT t0.name, t2.id, t2.label FROM CR_ITEM t0 \"\n             + \"INNER JOIN CR_ITEM_photos t1 ON t0.id = t1.ITEM_ID \"\n-            + \"INNER JOIN CR_ITEM_photos t3 ON t0.id = t3.ITEM_ID \"\n-            + \"INNER JOIN CR_PHT t2 ON t1.VALUE_ID = t2.id WHERE \" + \n-            \"((t3.VALUE_ID = ? OR t3.VALUE_ID = ? OR t3.VALUE_ID = ? OR t3.VALUE_ID = ? OR t3.VALUE_ID = ?) \"\n+            + \"INNER JOIN CR_PHT t2 ON t1.VALUE_ID = t2.id WHERE \" +\n+            \"((t1.VALUE_ID = ? OR t1.VALUE_ID = ? OR t1.VALUE_ID = ? OR t1.VALUE_ID = ? OR t1.VALUE_ID = ?) \"\n             + \"AND 0 < (SELECT COUNT(*) FROM CR_ITEM_photos WHERE CR_ITEM_photos.ITEM_ID = t0.id))\";\n \n         CriteriaQuery<Customer> q = cb.createQuery(Customer.class);\n@@ -1167,10 +1166,9 @@ public void testValues5() {\n             + \"INNER JOIN CR_PHT t2 ON t1.VALUE_ID = t2.id WHERE \"\n             + \"(0 = (SELECT COUNT(*) FROM CR_ITEM_photos t3 WHERE \"\n             + \"(t3.VALUE_ID = ? OR t3.VALUE_ID = ? OR t3.VALUE_ID = ? OR t3.VALUE_ID = ? OR t3.VALUE_ID = ?) \"\n-            + \"AND (t0.id = t3.ITEM_ID) AND t0.id = t3.ITEM_ID) \"\n+            + \"AND t0.id = t1.ITEM_ID) \"\n             + \"AND 0 < (SELECT COUNT(*) FROM CR_ITEM_photos WHERE CR_ITEM_photos.ITEM_ID = t0.id))\";\n         \n-        \n         CriteriaQuery<Customer> q = cb.createQuery(Customer.class);\n         Root<Item> item = q.from(Item.class);\n         MapJoin<Item, String, Photo> photo = item.join(Item_.photos);"},{"sha":"0c5de8b2fd452fa300f16f43cc56936800c28cf8","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex0/TestSpec10_1_26.java","status":"modified","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/apache/openjpa/blob/a5ca9aae2d5160fb463bd7a619e999732d222f31/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex0/TestSpec10_1_26.java","raw_url":"https://github.com/apache/openjpa/raw/a5ca9aae2d5160fb463bd7a619e999732d222f31/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex0/TestSpec10_1_26.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex0/TestSpec10_1_26.java?ref=a5ca9aae2d5160fb463bd7a619e999732d222f31","patch":"@@ -65,6 +65,44 @@ public void setUp() {\n         rsAllDepartment3 = getAll(Department3.class);\n     }\n \n+    public void testHavingClauseWithEntityExpression() throws Exception {\n+        EntityManager em = emf.createEntityManager();\n+        Employee1 e1 = em.find(Employee1.class, 1);\n+        em.clear();\n+        String query = \"select e from Department1 d, \" +\n+            \" in (d.empMap) e \" +\n+            \"group by e \" +\n+            \"having e = ?1\"; \n+        Query q = em.createQuery(query); \n+        q.setParameter(1, e1);\n+        List<Employee1> rs = (List<Employee1>) q.getResultList();\n+        Employee1 e2 = rs.get(0);\n+        assertEquals(e1.getEmpId(), e2.getEmpId());\n+\n+        em.clear();\n+        query = \"select e from Department1 d, \" +\n+            \" in (d.empMap) e \" +\n+            \"group by e \" +\n+            \"having e <> ?1\"; \n+        q = em.createQuery(query); \n+        q.setParameter(1, e1);\n+        rs = (List<Employee1>) q.getResultList();\n+        Employee1 e3 = rs.get(0);\n+        assertNotEquals(e1.getEmpId(), e3.getEmpId());\n+\n+        em.clear();\n+        query = \"select value(e) from Department1 d, \" +\n+            \" in (d.empMap) e \" +\n+            \"group by value(e) \" +\n+            \"having value(e) = ?1\"; \n+        q = em.createQuery(query); \n+        q.setParameter(1, e1);\n+        rs = (List<Employee1>) q.getResultList();\n+        Employee1 e4 = rs.get(0);\n+        assertEquals(e1.getEmpId(), e4.getEmpId());\n+        em.close();\n+    }\n+\n     @AllowFailure\n     public void testQueryInMemoryQualifiedId() throws Exception {\n         queryQualifiedId(true);"}]}

