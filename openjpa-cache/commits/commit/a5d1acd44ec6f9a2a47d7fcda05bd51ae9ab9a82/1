{"sha":"a5d1acd44ec6f9a2a47d7fcda05bd51ae9ab9a82","node_id":"MDY6Q29tbWl0MjA2MzY0OmE1ZDFhY2Q0NGVjNmY5YTJhNDdkN2ZjZGEwNWJkNTFhZTlhYjlhODI=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-07-20T19:17:19Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-07-20T19:17:19Z"},"message":"OPENJPA-284 committing on behalf of Teresa\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@558097 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c4315b8a0fd25a6fe540f7c6905ccae4559ec186","url":"https://api.github.com/repos/apache/openjpa/git/trees/c4315b8a0fd25a6fe540f7c6905ccae4559ec186"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a5d1acd44ec6f9a2a47d7fcda05bd51ae9ab9a82","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a5d1acd44ec6f9a2a47d7fcda05bd51ae9ab9a82","html_url":"https://github.com/apache/openjpa/commit/a5d1acd44ec6f9a2a47d7fcda05bd51ae9ab9a82","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a5d1acd44ec6f9a2a47d7fcda05bd51ae9ab9a82/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"99950ad3ff9d4d9adbf104dab04f3a3e036e384f","url":"https://api.github.com/repos/apache/openjpa/commits/99950ad3ff9d4d9adbf104dab04f3a3e036e384f","html_url":"https://github.com/apache/openjpa/commit/99950ad3ff9d4d9adbf104dab04f3a3e036e384f"}],"stats":{"total":123,"additions":121,"deletions":2},"files":[{"sha":"1974aeea2e3d49899f099712baa9fa1559f43f01","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/TableJDBCSeq.java","status":"modified","additions":21,"deletions":2,"changes":23,"blob_url":"https://github.com/apache/openjpa/blob/a5d1acd44ec6f9a2a47d7fcda05bd51ae9ab9a82/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/TableJDBCSeq.java","raw_url":"https://github.com/apache/openjpa/raw/a5d1acd44ec6f9a2a47d7fcda05bd51ae9ab9a82/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/TableJDBCSeq.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/TableJDBCSeq.java?ref=a5d1acd44ec6f9a2a47d7fcda05bd51ae9ab9a82","patch":"@@ -76,6 +76,7 @@\n     private transient JDBCConfiguration _conf = null;\n     private transient Log _log = null;\n     private int _alloc = 50;\n+    private int _intValue = 1;\n     private final Status _stat = new Status();\n \n     private String _table = \"OPENJPA_SEQUENCE_TABLE\";\n@@ -168,6 +169,24 @@ public int getAllocate() {\n     public void setAllocate(int alloc) {\n         _alloc = alloc;\n     }\n+    \n+    /**\n+     * Return the number as the initial number for the \n+     * GeneratedValue.TABLE strategy to start with. \n+     * @return an initial number\n+     */\n+    public int getInitialValue() {        \n+        return _intValue;\n+    }\n+\n+    /**\n+     * Set the initial number in the table for the GeneratedValue.TABLE\n+     * strategy to use as initial number. \n+     * @param intValue. The initial number\n+     */\n+    public void setInitialValue(int intValue) {\n+        _intValue = intValue;\n+    }\n \n     /**\n      * @deprecated Use {@link #setAllocate}. Retained for backwards\n@@ -378,8 +397,8 @@ private void insertSequence(ClassMapping mapping, Connection conn)\n             append(_pkColumn).append(\", \").append(_seqColumn).\n             append(\") VALUES (\").\n             appendValue(pk, _pkColumn).append(\", \").\n-            appendValue(Numbers.valueOf(1), _seqColumn).append(\")\");\n-\n+            appendValue(_intValue, _seqColumn).append(\")\");\n+        \n         boolean wasAuto = conn.getAutoCommit();\n         if (!wasAuto && !suspendInJTA())\n             conn.setAutoCommit(true);"},{"sha":"ab8db2466b3922a7ba7463dc09643fece856c3b2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/Dog.java","status":"added","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/apache/openjpa/blob/a5d1acd44ec6f9a2a47d7fcda05bd51ae9ab9a82/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/Dog.java","raw_url":"https://github.com/apache/openjpa/raw/a5d1acd44ec6f9a2a47d7fcda05bd51ae9ab9a82/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/Dog.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/Dog.java?ref=a5d1acd44ec6f9a2a47d7fcda05bd51ae9ab9a82","patch":"@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.generationtype;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.TableGenerator;\n+\n+@Entity\n+public class Dog {\n+    @Id\n+    @TableGenerator(name = \"Dog_Gen\", table = \"ID_Gen\", \n+            pkColumnName = \"GEN_NAME\", valueColumnName = \"GEN_VAL\", \n+            pkColumnValue = \"ID2\", initialValue = 20, allocationSize = 10)\n+    @GeneratedValue(strategy = GenerationType.TABLE, generator = \"Dog_Gen\")\n+    private int id;\n+\n+    private String name;\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+}"},{"sha":"e1353a0b1c09de17d589e40c2445a0df8030cd21","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestTableGenerator.java","status":"added","additions":47,"deletions":0,"changes":47,"blob_url":"https://github.com/apache/openjpa/blob/a5d1acd44ec6f9a2a47d7fcda05bd51ae9ab9a82/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestTableGenerator.java","raw_url":"https://github.com/apache/openjpa/raw/a5d1acd44ec6f9a2a47d7fcda05bd51ae9ab9a82/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestTableGenerator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestTableGenerator.java?ref=a5d1acd44ec6f9a2a47d7fcda05bd51ae9ab9a82","patch":"@@ -0,0 +1,47 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.generationtype;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+public class TestTableGenerator extends SingleEMFTestCase {\n+    \n+    public void setUp() { \n+        setUp(Dog.class);\n+    }\n+\n+    public void testInitialValue() { \n+        EntityManager em = emf.createEntityManager();\n+\n+        Dog dog = new Dog();\n+        dog.setName(\"Fido\");\n+\n+        em.getTransaction().begin();\n+\n+        em.persist(dog);\n+\n+        em.getTransaction().commit();\n+\n+        em.refresh(dog);\n+\n+        assertEquals(20, dog.getId());\n+    }\n+}"}]}

