{"sha":"a5d552f940b7830cc252d10aaccf630249626b13","node_id":"MDY6Q29tbWl0MjA2MzY0OmE1ZDU1MmY5NDBiNzgzMGNjMjUyZDEwYWFjY2Y2MzAyNDk2MjZiMTM=","commit":{"author":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-09-14T19:36:09Z"},"committer":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-09-14T19:36:09Z"},"message":"Allow null discriminator values when adding class conditions on outer joins.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@443447 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"8f51524a38ff8dd81597ce90d1aa6f58928461f6","url":"https://api.github.com/repos/apache/openjpa/git/trees/8f51524a38ff8dd81597ce90d1aa6f58928461f6"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a5d552f940b7830cc252d10aaccf630249626b13","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a5d552f940b7830cc252d10aaccf630249626b13","html_url":"https://github.com/apache/openjpa/commit/a5d552f940b7830cc252d10aaccf630249626b13","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a5d552f940b7830cc252d10aaccf630249626b13/comments","author":null,"committer":null,"parents":[{"sha":"fcd072a2c59869c4cd6a8eb8ee715675a6c33dbc","url":"https://api.github.com/repos/apache/openjpa/commits/fcd072a2c59869c4cd6a8eb8ee715675a6c33dbc","html_url":"https://github.com/apache/openjpa/commit/fcd072a2c59869c4cd6a8eb8ee715675a6c33dbc"}],"stats":{"total":83,"additions":56,"deletions":27},"files":[{"sha":"35fcd5444e660f84d107b99ae321f0af337f713e","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","status":"modified","additions":9,"deletions":7,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/a5d552f940b7830cc252d10aaccf630249626b13/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/a5d552f940b7830cc252d10aaccf630249626b13/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java?ref=a5d552f940b7830cc252d10aaccf630249626b13","patch":"@@ -367,7 +367,7 @@ private Result getInitializeStateResult(OpenJPAStateManager sm,\n         throws SQLException {\n         Select sel = _sql.newSelect();\n         if (!select(sel, mapping, subs, sm, null, fetch,\n-            JDBCFetchConfiguration.EAGER_JOIN, true))\n+            JDBCFetchConfiguration.EAGER_JOIN, true, false))\n             return null;\n \n         sel.wherePrimaryKey(sm.getObjectId(), mapping, this);\n@@ -463,8 +463,8 @@ public boolean load(OpenJPAStateManager sm, BitSet fields,\n             //### object that only creates a real select when actually used?\n \n             Select sel = _sql.newSelect();\n-            if (select(sel, mapping, sel.SUBS_EXACT, sm, fields, jfetch,\n-                EagerFetchModes.EAGER_JOIN, true)) {\n+            if (select(sel, mapping, Select.SUBS_EXACT, sm, fields, jfetch,\n+                EagerFetchModes.EAGER_JOIN, true, false)) {\n                 sel.wherePrimaryKey(sm.getObjectId(), mapping, this);\n                 res = sel.execute(this, jfetch, lockLevel);\n                 try {\n@@ -854,18 +854,20 @@ else if (sm.getVersion() == null)\n      * @param eager eager fetch mode to use\n      * @param ident whether to select primary key columns as distinct\n      * identifiers\n+     * @param outer whether we're outer-joining to this type\n      * @return true if the select is required, false otherwise\n      */\n     public boolean select(Select sel, ClassMapping mapping, int subs,\n         OpenJPAStateManager sm, BitSet fields, JDBCFetchConfiguration fetch,\n-        int eager, boolean ident) {\n+        int eager, boolean ident, boolean outer) {\n         // add class conditions so that they're cloned for any batched selects\n         boolean joinedSupers = false;\n         if ((sm == null || sm.getPCState() == PCState.TRANSIENT)\n-            && (subs == sel.SUBS_JOINABLE || subs == sel.SUBS_NONE)) {\n+            && (subs == Select.SUBS_JOINABLE || subs == Select.SUBS_NONE)) {\n             loadSubclasses(mapping); \n+            Joins joins = (outer) ? sel.newOuterJoins() : null;\n             joinedSupers = mapping.getDiscriminator().addClassConditions(sel,\n-                subs == sel.SUBS_JOINABLE, null);\n+                subs == Select.SUBS_JOINABLE, joins);\n         }\n \n         // create all our eager selects so that those fields are reserved\n@@ -889,7 +891,7 @@ public boolean select(Select sel, ClassMapping mapping, int subs,\n                 fetch.traverseJDBC(eagerToMany), eager);\n \n         // optionally select subclass mappings\n-        if (subs == sel.SUBS_JOINABLE || subs == sel.SUBS_ANY_JOINABLE)\n+        if (subs == Select.SUBS_JOINABLE || subs == Select.SUBS_ANY_JOINABLE)\n             selectSubclassMappings(sel, mapping, sm, fetch);\n         if (sm != null)\n             sel.setDistinct(false);"},{"sha":"01b6add43b8ea8859b0b55a3090d5669eababd53","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/InValueDiscriminatorStrategy.java","status":"modified","additions":12,"deletions":3,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/a5d552f940b7830cc252d10aaccf630249626b13/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/InValueDiscriminatorStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/a5d552f940b7830cc252d10aaccf630249626b13/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/InValueDiscriminatorStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/InValueDiscriminatorStrategy.java?ref=a5d552f940b7830cc252d10aaccf630249626b13","patch":"@@ -126,20 +126,29 @@ public SQLBuffer getClassConditions(Select sel, Joins joins,\n         if (subs.length == 0 && base.getJoinablePCSuperclassMapping() == null)\n             return null;\n \n-        // if not selecting subclasses, limit to just the given class\n         Column col = disc.getColumns()[0];\n         SQLBuffer sql = new SQLBuffer(sel.getConfiguration().\n             getDBDictionaryInstance());\n-        sql.append(sel.getColumnAlias(col, joins));\n-        if (!subclasses || subs.length == 0)\n+        boolean outer = joins != null && joins.isOuter();\n+        if (outer)\n+            sql.append(\"(\");\n+        String alias = sel.getColumnAlias(col, joins);\n+        sql.append(alias);\n+\n+        // if not selecting subclasses, limit to just the given class\n+        if (!outer && (!subclasses || subs.length == 0))\n             return sql.append(\" = \").appendValue(getDiscriminatorValue(base),\n                 col);\n \n+        if (outer)\n+            sql.append(\" IS \").appendValue(null).append(\" OR \").append(alias);\n         sql.append(\" IN (\");\n         sql.appendValue(getDiscriminatorValue(base), col);\n         for (int i = 0; i < subs.length; i++)\n             sql.append(\", \").appendValue(getDiscriminatorValue(subs[i]), col);\n         sql.append(\")\");\n+        if (outer)\n+            sql.append(\")\");\n         return sql;\n     }\n }"},{"sha":"de4ce9da4dcdf83c77c41bfc57a5cfd6d9e1cfaa","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractResult.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/a5d552f940b7830cc252d10aaccf630249626b13/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractResult.java","raw_url":"https://github.com/apache/openjpa/raw/a5d552f940b7830cc252d10aaccf630249626b13/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractResult.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractResult.java?ref=a5d552f940b7830cc252d10aaccf630249626b13","patch":"@@ -810,6 +810,10 @@ public boolean isEmpty() {\n             return true;\n         }\n \n+        public boolean isOuter() {\n+            return false;\n+        }\n+\n         public Joins crossJoin(Table localTable, Table foreignTable) {\n             return this;\n         }"},{"sha":"58a550edff26370ff05b65f2938548fe98d04f74","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Joins.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/a5d552f940b7830cc252d10aaccf630249626b13/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Joins.java","raw_url":"https://github.com/apache/openjpa/raw/a5d552f940b7830cc252d10aaccf630249626b13/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Joins.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Joins.java?ref=a5d552f940b7830cc252d10aaccf630249626b13","patch":"@@ -31,6 +31,11 @@\n      */\n     public boolean isEmpty();\n \n+    /**\n+     * Whether this joins path results in outer joins.\n+     */\n+    public boolean isOuter();\n+\n     /**\n      * Perform a cross join on the given tables.\n      */"},{"sha":"dbba3bfef15d7322d581cc4def2b25d6cf670f8a","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/LogicalUnion.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/a5d552f940b7830cc252d10aaccf630249626b13/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/LogicalUnion.java","raw_url":"https://github.com/apache/openjpa/raw/a5d552f940b7830cc252d10aaccf630249626b13/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/LogicalUnion.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/LogicalUnion.java?ref=a5d552f940b7830cc252d10aaccf630249626b13","patch":"@@ -810,6 +810,10 @@ public Joins newJoins() {\n             return sel.newJoins();\n         }\n \n+        public Joins newOuterJoins() {\n+            return sel.newOuterJoins();\n+        }\n+\n         public void append(SQLBuffer buf, Joins joins) {\n             sel.append(buf, joins);\n         }"},{"sha":"cc338621142451957227a0b13853befaaf3bf914","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Select.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/a5d552f940b7830cc252d10aaccf630249626b13/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Select.java","raw_url":"https://github.com/apache/openjpa/raw/a5d552f940b7830cc252d10aaccf630249626b13/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Select.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Select.java?ref=a5d552f940b7830cc252d10aaccf630249626b13","patch":"@@ -652,6 +652,11 @@ public SelectExecutor eagerClone(FieldMapping key, int eagerType,\n      */\n     public Joins newJoins();\n \n+    /**\n+     * Return a new instance to use for outer joining.\n+     */\n+    public Joins newOuterJoins();\n+\n     /**\n      * Append the given joins to the given buffer.\n      */"},{"sha":"c95dc0d8a55c412c5e01e97d231ef841bca786bd","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","status":"modified","additions":17,"deletions":17,"changes":34,"blob_url":"https://github.com/apache/openjpa/blob/a5d552f940b7830cc252d10aaccf630249626b13/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","raw_url":"https://github.com/apache/openjpa/raw/a5d552f940b7830cc252d10aaccf630249626b13/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java?ref=a5d552f940b7830cc252d10aaccf630249626b13","patch":"@@ -759,7 +759,7 @@ void select(Select wrapper, ClassMapping mapping, int subclasses,\n \n         // delegate to store manager to select in same order it loads result\n         ((JDBCStoreManager) store).select(wrapper, mapping, subclasses, null,\n-            null, fetch, eager, ident);\n+            null, fetch, eager, ident, (_flags & OUTER) != 0);\n \n         // reset\n         if (hasJoins)\n@@ -1626,6 +1626,10 @@ public Joins newJoins() {\n         return this;\n     }\n \n+    public Joins newOuterJoins() {\n+        return ((PathJoins) newJoins()).setOuter(true);\n+    }\n+\n     public void append(SQLBuffer buf, Joins joins) {\n         if (joins == null || joins.isEmpty())\n             return;\n@@ -1744,10 +1748,9 @@ public Joins outer(Joins joins) {\n             return joins;\n \n         // record that this is an outer join set, even if it's empty\n-        PathJoins pj = (PathJoins) joins;\n-        pj.setOuter(true);\n-        if (joins.isEmpty())\n-            return joins;\n+        PathJoins pj = ((PathJoins) joins).setOuter(true);\n+        if (pj.isEmpty())\n+            return pj;\n \n         Join join;\n         Join rec;\n@@ -1928,7 +1931,8 @@ public boolean isOuter() {\n         return false;\n     }\n \n-    public void setOuter(boolean outer) {\n+    public PathJoins setOuter(boolean outer) {\n+        return new SelectJoins(this).setOuter(true);\n     }\n \n     public boolean isDirty() {\n@@ -1994,14 +1998,12 @@ public Joins setSubselect(String alias) {\n      * Represents a SQL string selected with null id.\n      */\n     private static class NullId {\n-\n     }\n \n     /**\n      * Represents a placeholder SQL string.\n      */\n     private static class Placeholder {\n-\n     }\n \n     /**\n@@ -2269,7 +2271,8 @@ public boolean isOuter() {\n             return false;\n         }\n \n-        public void setOuter(boolean outer) {\n+        public PathJoins setOuter(boolean outer) {\n+            return this;\n         }\n \n         public boolean isDirty() {\n@@ -2345,7 +2348,8 @@ public boolean isOuter() {\n             return false;\n         }\n \n-        public void setOuter(boolean outer) {\n+        public PathJoins setOuter(boolean outer) {\n+            return this;\n         }\n \n         public boolean isDirty() {\n@@ -2452,8 +2456,9 @@ public boolean isOuter() {\n             return _outer;\n         }\n \n-        public void setOuter(boolean outer) {\n+        public PathJoins setOuter(boolean outer) {\n             _outer = outer;\n+            return this;\n         }\n \n         public boolean isDirty() {\n@@ -2796,15 +2801,10 @@ public void clear() {\n interface PathJoins\n     extends Joins {\n \n-    /**\n-     * Return whether this join set ended with an outer join.\n-     */\n-    public boolean isOuter();\n-\n     /**\n      * Mark this as an outer joins set.\n      */\n-    public void setOuter(boolean outer);\n+    public PathJoins setOuter(boolean outer);\n \n     /**\n      * Return true if this instance has a path, any joins, or a variable."}]}

