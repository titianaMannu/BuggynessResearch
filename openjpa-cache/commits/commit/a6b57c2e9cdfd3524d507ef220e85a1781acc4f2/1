{"sha":"a6b57c2e9cdfd3524d507ef220e85a1781acc4f2","node_id":"MDY6Q29tbWl0MjA2MzY0OmE2YjU3YzJlOWNkZmQzNTI0ZDUwN2VmMjIwZTg1YTE3ODFhY2M0ZjI=","commit":{"author":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-08-02T23:37:02Z"},"committer":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-08-02T23:37:02Z"},"message":"Fixes to optimization logic for including joined subclass data in initial \nSELECT.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@428193 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"462331efd210e3f9c860e069c050e343941d9029","url":"https://api.github.com/repos/apache/openjpa/git/trees/462331efd210e3f9c860e069c050e343941d9029"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a6b57c2e9cdfd3524d507ef220e85a1781acc4f2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a6b57c2e9cdfd3524d507ef220e85a1781acc4f2","html_url":"https://github.com/apache/openjpa/commit/a6b57c2e9cdfd3524d507ef220e85a1781acc4f2","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a6b57c2e9cdfd3524d507ef220e85a1781acc4f2/comments","author":null,"committer":null,"parents":[{"sha":"f2a266c4c2dde0124814c16776f020c120a8ccf2","url":"https://api.github.com/repos/apache/openjpa/commits/f2a266c4c2dde0124814c16776f020c120a8ccf2","html_url":"https://github.com/apache/openjpa/commit/f2a266c4c2dde0124814c16776f020c120a8ccf2"}],"stats":{"total":16,"additions":9,"deletions":7},"files":[{"sha":"a0ef59cd5e71fee810856a42fcc15e4a841738a2","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","status":"modified","additions":9,"deletions":7,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/a6b57c2e9cdfd3524d507ef220e85a1781acc4f2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/a6b57c2e9cdfd3524d507ef220e85a1781acc4f2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java?ref=a6b57c2e9cdfd3524d507ef220e85a1781acc4f2","patch":"@@ -1078,7 +1078,8 @@ private int selectBaseMappings(Select sel, ClassMapping mapping,\n      */\n     private boolean optSelect(FieldMapping fm, Select sel,\n         OpenJPAStateManager sm, JDBCFetchConfiguration fetch) {\n-        return !fm.isDefaultFetchGroupExplicit()\n+        return !fm.isInDefaultFetchGroup() \n+            && !fm.isDefaultFetchGroupExplicit()\n             && (sm == null || sm.getPCState() == PCState.TRANSIENT \n             || !sm.getLoaded().get(fm.getIndex()))\n             && fm.supportsSelect(sel, sel.TYPE_TWO_PART, sm, this, fetch) > 0;\n@@ -1121,9 +1122,11 @@ private void selectSubclassMappings(Select sel, ClassMapping mapping,\n             fms = subMappings[i].getDefinedFieldMappings();\n             for (int j = 0; j < fms.length; j++) {\n                 // make sure in one of configured fetch groups\n-            \tif (fetch.requiresFetch(fms[j]) \n-            \t  || fms[j].supportsSelect(sel, sel.TYPE_TWO_PART, sm, this, \n-                    fetch) <= 0) \n+            \tif (!fetch.requiresFetch(fms[j]) \n+                    && ((!fms[j].isInDefaultFetchGroup() \n+                    && fms[j].isDefaultFetchGroupExplicit())\n+                    || fms[j].supportsSelect(sel, sel.TYPE_TWO_PART, sm, this, \n+                    fetch) <= 0)) \n             \t\tcontinue;\n \n                 // if we can join to the subclass, do so; much better chance\n@@ -1137,10 +1140,9 @@ private void selectSubclassMappings(Select sel, ClassMapping mapping,\n \n                 // if can select with tables already selected, do it\n                 if (fms[j].supportsSelect(sel, sel.TYPE_JOINLESS, sm, this,\n-                    fetch) > 0 && fetch.requiresFetch(fms[j])) {\n-                    fms[j].select(sel, null, this, fetch.traverseJDBC (fms[j]),\n+                    fetch) > 0)\n+                    fms[j].select(sel, null, this, fetch.traverseJDBC(fms[j]),\n                         fetch.EAGER_NONE);\n-                }\n             }\n         }\n     }"}]}

