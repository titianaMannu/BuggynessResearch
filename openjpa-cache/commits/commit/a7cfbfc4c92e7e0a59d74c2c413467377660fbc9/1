{"sha":"a7cfbfc4c92e7e0a59d74c2c413467377660fbc9","node_id":"MDY6Q29tbWl0MjA2MzY0OmE3Y2ZiZmM0YzkyZTdlMGE1OWQ3NGMyYzQxMzQ2NzM3NzY2MGZiYzk=","commit":{"author":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-09-15T23:49:21Z"},"committer":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-09-15T23:49:21Z"},"message":"Fixes.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@446787 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7c9b4c731deb2fac2969c77a4980b72cf219f6f1","url":"https://api.github.com/repos/apache/openjpa/git/trees/7c9b4c731deb2fac2969c77a4980b72cf219f6f1"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a7cfbfc4c92e7e0a59d74c2c413467377660fbc9","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a7cfbfc4c92e7e0a59d74c2c413467377660fbc9","html_url":"https://github.com/apache/openjpa/commit/a7cfbfc4c92e7e0a59d74c2c413467377660fbc9","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a7cfbfc4c92e7e0a59d74c2c413467377660fbc9/comments","author":null,"committer":null,"parents":[{"sha":"53dbcdf35c9fa6a0db7bf29516008e1e08bcc12b","url":"https://api.github.com/repos/apache/openjpa/commits/53dbcdf35c9fa6a0db7bf29516008e1e08bcc12b","html_url":"https://github.com/apache/openjpa/commit/53dbcdf35c9fa6a0db7bf29516008e1e08bcc12b"}],"stats":{"total":122,"additions":77,"deletions":45},"files":[{"sha":"62717e593e3e2a5254d0fecbf3fc8d810bedc3dc","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java","status":"modified","additions":15,"deletions":11,"changes":26,"blob_url":"https://github.com/apache/openjpa/blob/a7cfbfc4c92e7e0a59d74c2c413467377660fbc9/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/a7cfbfc4c92e7e0a59d74c2c413467377660fbc9/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java?ref=a7cfbfc4c92e7e0a59d74c2c413467377660fbc9","patch":"@@ -20,8 +20,8 @@\n import java.util.Collection;\n import java.util.Collections;\n import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.Iterator;\n-import java.util.LinkedList;\n import java.util.List;\n import java.util.ListIterator;\n import java.util.Map;\n@@ -510,21 +510,25 @@ public Collection flush(Collection states) {\n         for (Iterator itr = states.iterator(); itr.hasNext();) {\n             sm = (OpenJPAStateManager) itr.next();\n \n-            if (sm.getPCState() == PCState.PNEW) {\n+            if (sm.getPCState() == PCState.PNEW && !sm.isFlushed()) {\n                 if (_inserts == null)\n-                    _inserts = new LinkedList();\n+                    _inserts = new ArrayList();\n                 _inserts.add(sm);\n-            } else if (_inserts != null &&\n-                (sm.getPCState() == PCState.PNEWDELETED ||\n-                sm.getPCState() == PCState.PNEWFLUSHEDDELETED))\n+\n+                // may have been re-persisted\n+                if (_deletes != null)\n+                    _deletes.remove(sm);\n+            } else if (_inserts != null \n+                && (sm.getPCState() == PCState.PNEWDELETED \n+                || sm.getPCState() == PCState.PNEWFLUSHEDDELETED))\n                 _inserts.remove(sm);\n             else if (sm.getPCState() == PCState.PDIRTY) {\n                 if (_updates == null)\n                     _updates = new HashMap();\n                 _updates.put(sm, sm.getDirty());\n             } else if (sm.getPCState() == PCState.PDELETED) {\n                 if (_deletes == null)\n-                    _deletes = new LinkedList();\n+                    _deletes = new HashSet();\n                 _deletes.add(sm);\n             }\n         }\n@@ -572,10 +576,10 @@ private boolean isLocking(FetchConfiguration fetch) {\n      */\n     private static class Modifications {\n \n-        public final List additions = new LinkedList();\n-        public final List newUpdates = new LinkedList();\n-        public final List existingUpdates = new LinkedList();\n-        public final List deletes = new LinkedList();\n+        public final List additions = new ArrayList();\n+        public final List newUpdates = new ArrayList();\n+        public final List existingUpdates = new ArrayList();\n+        public final List deletes = new ArrayList();\n     }\n \n     private static class PCDataHolder {"},{"sha":"786fce49627b86b75acd3094a374a50293453eb9","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachManager.java","status":"modified","additions":6,"deletions":12,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/a7cfbfc4c92e7e0a59d74c2c413467377660fbc9/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachManager.java","raw_url":"https://github.com/apache/openjpa/raw/a7cfbfc4c92e7e0a59d74c2c413467377660fbc9/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachManager.java?ref=a7cfbfc4c92e7e0a59d74c2c413467377660fbc9","patch":"@@ -259,20 +259,17 @@ public DetachManager(BrokerImpl broker, boolean full, OpCallbacks call) {\n      * Return a detached version of the given instance.\n      */\n     public Object detach(Object toDetach) {\n-        CallbackException excep = null;\n+        List exceps = null;\n         try {\n             return detachInternal(toDetach);\n         } catch (CallbackException ce) {\n-            excep = ce;\n+            exceps = new ArrayList(1);\n+            exceps.add(ce);\n             return null; // won't be reached as exception will be rethrown\n         } finally {\n-            List exceps = null;\n-\n-            if (excep == null || !_failFast) {\n+            if (exceps == null || !_failFast)\n                 exceps = invokeAfterDetach(Collections.singleton(toDetach),\n-                    null);\n-            } else\n-                exceps = Collections.singletonList(excep);\n+                    exceps);\n             if (_detached != null)\n                 _detached.clear();\n             throwExceptions(exceps);\n@@ -303,11 +300,8 @@ public Object detach(Object toDetach) {\n                 failFast = true;\n             exceps = add(exceps, re);\n         } finally {\n-            // invoke post callbacks unless all failed\n-            if (!failFast && (exceps == null\n-                || exceps.size() < instances.size())) {\n+            if (!failFast)\n                 exceps = invokeAfterDetach(instances, exceps);\n-            }\n             if (_detached != null)\n                 _detached.clear();\n         }"},{"sha":"a576703809bfa6831a88dd4304257533fdcfdf1f","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/SingleFieldManager.java","status":"modified","additions":3,"deletions":8,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/a7cfbfc4c92e7e0a59d74c2c413467377660fbc9/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/SingleFieldManager.java","raw_url":"https://github.com/apache/openjpa/raw/a7cfbfc4c92e7e0a59d74c2c413467377660fbc9/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/SingleFieldManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/SingleFieldManager.java?ref=a7cfbfc4c92e7e0a59d74c2c413467377660fbc9","patch":"@@ -76,8 +76,8 @@ public boolean proxy(boolean reset, boolean replaceNull) {\n                 if (proxy == null) {\n                     proxy = (Proxy) _sm.newFieldProxy(field);\n                     ((Date) proxy).setTime(((Date) objval).getTime());\n-                    if (proxy instanceof Timestamp &&\n-                        objval instanceof Timestamp)\n+                    if (proxy instanceof Timestamp \n+                        && objval instanceof Timestamp)\n                         ((Timestamp) proxy).setNanos(((Timestamp) objval).\n                             getNanos());\n                     ret = true;\n@@ -89,12 +89,7 @@ public boolean proxy(boolean reset, boolean replaceNull) {\n                 proxy = checkProxy();\n                 if (proxy == null) {\n                     proxy = (Proxy) _sm.newFieldProxy(field);\n-                    if (objval != null) {\n-                        Calendar pcal = (Calendar) proxy;\n-                        Calendar ocal = (Calendar) objval;\n-                        pcal.setTime(ocal.getTime());\n-                        pcal.setTimeZone(ocal.getTimeZone());\n-                    }\n+                    ((Calendar) proxy).setTime(((Calendar) objval).getTime());\n                     ret = true;\n                 }\n                 break;"},{"sha":"9504c1d84cc3a9d13691553fe91eadada1d9bd7c","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/package.html","status":"added","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/a7cfbfc4c92e7e0a59d74c2c413467377660fbc9/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/package.html","raw_url":"https://github.com/apache/openjpa/raw/a7cfbfc4c92e7e0a59d74c2c413467377660fbc9/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/package.html","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/package.html?ref=a7cfbfc4c92e7e0a59d74c2c413467377660fbc9","patch":"@@ -0,0 +1,9 @@\n+<html>\n+<body>\n+<p><strong>JPA Query Language Support</strong></p>\n+\n+<p>\n+    Allow any spec or store to use JPQL.\n+</p>\n+</body>\n+</html>"},{"sha":"14dd20671b2095e2d64574044062b79b2a828b43","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractMetaDataDefaults.java","status":"modified","additions":22,"deletions":5,"changes":27,"blob_url":"https://github.com/apache/openjpa/blob/a7cfbfc4c92e7e0a59d74c2c413467377660fbc9/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractMetaDataDefaults.java","raw_url":"https://github.com/apache/openjpa/raw/a7cfbfc4c92e7e0a59d74c2c413467377660fbc9/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractMetaDataDefaults.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractMetaDataDefaults.java?ref=a7cfbfc4c92e7e0a59d74c2c413467377660fbc9","patch":"@@ -40,6 +40,7 @@\n         (AbstractMetaDataDefaults.class);\n \n     private int _access = ClassMetaData.ACCESS_FIELD;\n+    private int _identity = ClassMetaData.ID_UNKNOWN;\n     private boolean _ignore = true;\n     private boolean _interface = true;\n     private boolean _pcRegistry = true;\n@@ -63,18 +64,34 @@ public void setUsePCRegistry(boolean pcRegistry) {\n \n     /**\n      * The default access type for base classes with ACCESS_UNKNOWN.\n-     * Returns ACCESS_FIELD by default.\n+     * ACCESS_FIELD by default.\n+     */\n+    public int getDefaultAccessType() {\n+        return _access;\n+    }\n+\n+    /**\n+     * The default access type for base classes with ACCESS_UNKNOWN.\n+     * ACCESS_FIELD by default.\n      */\n     public void setDefaultAccessType(int access) {\n         _access = access;\n     }\n \n     /**\n-     * The default access type for base classes with ACCESS_UNKNOWN.\n-     * Returns ACCESS_FIELD by default.\n+     * The default identity type for unmapped classes without primary \n+     * key fields. ID_UNKNOWN by default.\n      */\n-    public int getDefaultAccessType() {\n-        return _access;\n+    public int getDefaultIdentityType() {\n+        return _identity;\n+    }\n+\n+    /**\n+     * The default identity type for unmapped classes without primary \n+     * key fields. ID_UNKNOWN by default.\n+     */\n+    public void setDefaultIdentityType(int identity) {\n+        _identity = identity;\n     }\n \n     public int getCallbackMode() {"},{"sha":"1d16e8d39f7dd37441b7a7b03db7871b4d75cf13","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","status":"modified","additions":7,"deletions":6,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/a7cfbfc4c92e7e0a59d74c2c413467377660fbc9/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/a7cfbfc4c92e7e0a59d74c2c413467377660fbc9/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java?ref=a7cfbfc4c92e7e0a59d74c2c413467377660fbc9","patch":"@@ -379,12 +379,13 @@ public int getIdentityType() {\n             ClassMetaData sup = getPCSuperclassMetaData();\n             if (sup != null && sup.getIdentityType() != ID_UNKNOWN)\n                 _identity = sup.getIdentityType();\n-            else {\n-                if (getPrimaryKeyFields().length > 0)\n-                    _identity = ID_APPLICATION;\n-                else \n-                    _identity = (isMapped()) ? ID_DATASTORE : ID_UNKNOWN;\n-            }\n+            else if (getPrimaryKeyFields().length > 0)\n+                _identity = ID_APPLICATION;\n+            else if (isMapped())\n+                _identity = ID_DATASTORE;\n+            else\n+                _identity = _repos.getMetaDataFactory().getDefaults().\n+                    getDefaultIdentityType();\n         }\n         return _identity;\n     }"},{"sha":"e6eb92e6aa9664914e4f5dac5e7698d4d7471aa8","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataDefaults.java","status":"modified","additions":7,"deletions":1,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/a7cfbfc4c92e7e0a59d74c2c413467377660fbc9/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataDefaults.java","raw_url":"https://github.com/apache/openjpa/raw/a7cfbfc4c92e7e0a59d74c2c413467377660fbc9/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataDefaults.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataDefaults.java?ref=a7cfbfc4c92e7e0a59d74c2c413467377660fbc9","patch":"@@ -28,11 +28,17 @@\n     extends CallbackModes {\n \n     /**\n-     * Return the default access type for base persistent class with\n+     * Return the default access type for a base persistent class with\n      * {@link ClassMetaData#ACCESS_UNKNOWN} access type.\n      */\n     public int getDefaultAccessType();\n \n+    /**\n+     * Return the default identity type for unmapped classes without primary\n+     * key fields.\n+     */\n+    public int getDefaultIdentityType();\n+\n     /**\n      * What to do on lifecycle callback exceptions.\n      */"},{"sha":"d22e99704fcb968d7c97b2da387aaa05ff8e3368","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/a7cfbfc4c92e7e0a59d74c2c413467377660fbc9/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","raw_url":"https://github.com/apache/openjpa/raw/a7cfbfc4c92e7e0a59d74c2c413467377660fbc9/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java?ref=a7cfbfc4c92e7e0a59d74c2c413467377660fbc9","patch":"@@ -1377,15 +1377,17 @@ private void processRegisteredClass(Class cls) {\n      * Update the list of implementations of base classes and interfaces.\n      */\n     private void updateImpls(Class cls, Class leastDerived, Class check) {\n-        if (!_factory.getDefaults().isDeclaredInterfacePersistent())\n-            return;\n         // allow users to query on common non-pc superclasses\n         Class sup = check.getSuperclass();\n         if (leastDerived == cls && sup != null && sup != Object.class) {\n             addToCollection(_impls, sup, cls, false);\n             updateImpls(cls, leastDerived, sup);\n         }\n \n+        // allow users to query on any implemented interfaces unless defaults \n+        // say the user must create persistent interfaces explicitly\n+        if (!_factory.getDefaults().isDeclaredInterfacePersistent())\n+            return;\n         Class[] ints = check.getInterfaces();\n         for (int i = 0; i < ints.length; i++) {\n             // don't map java-standard interfaces"},{"sha":"2524f312ad687ec4440a227e53a1065ec9191703","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/NoneMetaDataFactory.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/a7cfbfc4c92e7e0a59d74c2c413467377660fbc9/openjpa-kernel/src/main/java/org/apache/openjpa/meta/NoneMetaDataFactory.java","raw_url":"https://github.com/apache/openjpa/raw/a7cfbfc4c92e7e0a59d74c2c413467377660fbc9/openjpa-kernel/src/main/java/org/apache/openjpa/meta/NoneMetaDataFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/NoneMetaDataFactory.java?ref=a7cfbfc4c92e7e0a59d74c2c413467377660fbc9","patch":"@@ -93,6 +93,10 @@ public int getDefaultAccessType() {\n         return ClassMetaData.ACCESS_UNKNOWN;\n     }\n \n+    public int getDefaultIdentityType() {\n+        return ClassMetaData.ID_UNKNOWN;\n+    }\n+\n     public int getCallbackMode() {\n         return CALLBACK_IGNORE;\n     }"}]}

