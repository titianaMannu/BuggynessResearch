{"sha":"a8640cc5d2b3e84f5cb0436045f15db30bfb4b93","node_id":"MDY6Q29tbWl0MjA2MzY0OmE4NjQwY2M1ZDJiM2U4NGY1Y2IwNDM2MDQ1ZjE1ZGIzMGJmYjRiOTM=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-09-09T22:43:49Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-09-09T22:43:49Z"},"message":"OPENJPA-1285: Dynamic JDBC 4 Wrappers use constructor to save reflection cost\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@813149 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6c6a726a3a1a4373ca90a06724802f6a916e4829","url":"https://api.github.com/repos/apache/openjpa/git/trees/6c6a726a3a1a4373ca90a06724802f6a916e4829"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a8640cc5d2b3e84f5cb0436045f15db30bfb4b93","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a8640cc5d2b3e84f5cb0436045f15db30bfb4b93","html_url":"https://github.com/apache/openjpa/commit/a8640cc5d2b3e84f5cb0436045f15db30bfb4b93","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a8640cc5d2b3e84f5cb0436045f15db30bfb4b93/comments","author":null,"committer":null,"parents":[{"sha":"c28461ffddd7c60a862bb76d5cd084c1dd5506e7","url":"https://api.github.com/repos/apache/openjpa/commits/c28461ffddd7c60a862bb76d5cd084c1dd5506e7","html_url":"https://github.com/apache/openjpa/commit/c28461ffddd7c60a862bb76d5cd084c1dd5506e7"}],"stats":{"total":491,"additions":245,"deletions":246},"files":[{"sha":"13dd77333bdd161fb686efaa3257d28b9af5f1a9","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","status":"modified","additions":19,"deletions":28,"changes":47,"blob_url":"https://github.com/apache/openjpa/blob/a8640cc5d2b3e84f5cb0436045f15db30bfb4b93/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/a8640cc5d2b3e84f5cb0436045f15db30bfb4b93/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java?ref=a8640cc5d2b3e84f5cb0436045f15db30bfb4b93","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.openjpa.jdbc.kernel;\n \n+import java.lang.reflect.Constructor;\n import java.sql.Connection;\n import java.sql.PreparedStatement;\n import java.sql.ResultSet;\n@@ -107,22 +108,21 @@\n     // track the pending statements so we can cancel them\n     private Set _stmnts = Collections.synchronizedSet(new HashSet());\n \n-    private static final Class<ClientConnection> clientConnectionImpl;\n-    private static final Class<RefCountConnection> refCountConnectionImpl;\n-    private static final Class<CancelStatement> cancelStatementImpl;\n-    private static final Class<CancelPreparedStatement>\n-            cancelPreparedStatementImpl;\n+    private static final Constructor<ClientConnection> clientConnectionImpl;\n+    private static final Constructor<RefCountConnection> refCountConnectionImpl;\n+    private static final Constructor<CancelStatement> cancelStatementImpl;\n+    private static final Constructor<CancelPreparedStatement> cancelPreparedStatementImpl;\n \n     static {\n         try {\n-            clientConnectionImpl = ConcreteClassGenerator.\n-                makeConcrete(ClientConnection.class);\n-            refCountConnectionImpl = ConcreteClassGenerator.\n-                makeConcrete(RefCountConnection.class);\n-            cancelStatementImpl = ConcreteClassGenerator.\n-                makeConcrete(CancelStatement.class);\n-            cancelPreparedStatementImpl = ConcreteClassGenerator.\n-                makeConcrete(CancelPreparedStatement.class);\n+            clientConnectionImpl = ConcreteClassGenerator.getConcreteConstructor(ClientConnection.class, \n+                Connection.class);\n+            refCountConnectionImpl = ConcreteClassGenerator.getConcreteConstructor(RefCountConnection.class,\n+                JDBCStoreManager.class, Connection.class);\n+            cancelStatementImpl = ConcreteClassGenerator.getConcreteConstructor(CancelStatement.class,\n+                JDBCStoreManager.class, Statement.class, Connection.class);\n+            cancelPreparedStatementImpl = ConcreteClassGenerator.getConcreteConstructor(CancelPreparedStatement.class,\n+                JDBCStoreManager.class, PreparedStatement.class, Connection.class);\n         } catch (Exception e) {\n             throw new ExceptionInInitializerError(e);\n         }\n@@ -236,8 +236,7 @@ public void releaseConnection() {\n     }\n \n     public Object getClientConnection() {\n-        return ConcreteClassGenerator.newInstance\n-            (clientConnectionImpl, Connection.class, getConnection());\n+        return ConcreteClassGenerator.newInstance(clientConnectionImpl, getConnection());\n     }\n \n     public Connection getConnection() {\n@@ -901,9 +900,7 @@ private void connect(boolean ref) {\n      * can be overridden.\n      */\n     protected RefCountConnection connectInternal() throws SQLException {\n-        return ConcreteClassGenerator.newInstance\n-            (refCountConnectionImpl, JDBCStoreManager.class, \n-                JDBCStoreManager.this, Connection.class, _ds.getConnection());\n+        return ConcreteClassGenerator.newInstance(refCountConnectionImpl, JDBCStoreManager.this, _ds.getConnection());\n     }\n \n     /**\n@@ -1521,11 +1518,8 @@ public void free() {\n         }\n \n         protected Statement createStatement(boolean wrap) throws SQLException {\n-            return ConcreteClassGenerator.newInstance\n-                (cancelStatementImpl,\n-                    JDBCStoreManager.class, JDBCStoreManager.this,\n-                    Statement.class, super.createStatement(false),\n-                    Connection.class, RefCountConnection.this);\n+            return ConcreteClassGenerator.newInstance(cancelStatementImpl, JDBCStoreManager.this,\n+                    super.createStatement(false), RefCountConnection.this);\n         }\n \n         protected Statement createStatement(int rsType, int rsConcur,\n@@ -1540,11 +1534,8 @@ protected Statement createStatement(int rsType, int rsConcur,\n \n         protected PreparedStatement prepareStatement(String sql, boolean wrap)\n             throws SQLException {\n-            return ConcreteClassGenerator.newInstance\n-                (cancelPreparedStatementImpl,\n-                    JDBCStoreManager.class, JDBCStoreManager.this,\n-                    PreparedStatement.class, super.prepareStatement(sql, false),\n-                    Connection.class, RefCountConnection.this);\n+            return ConcreteClassGenerator.newInstance(cancelPreparedStatementImpl,\n+                    JDBCStoreManager.this, super.prepareStatement(sql, false), RefCountConnection.this);\n         }\n \n         protected PreparedStatement prepareStatement(String sql, int rsType,"},{"sha":"6de8402cad8aa6b7c97d1648bb535c9a10d5f53b","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/DataSourceFactory.java","status":"modified","additions":6,"deletions":10,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/a8640cc5d2b3e84f5cb0436045f15db30bfb4b93/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/DataSourceFactory.java","raw_url":"https://github.com/apache/openjpa/raw/a8640cc5d2b3e84f5cb0436045f15db30bfb4b93/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/DataSourceFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/DataSourceFactory.java?ref=a8640cc5d2b3e84f5cb0436045f15db30bfb4b93","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.openjpa.jdbc.schema;\n \n+import java.lang.reflect.Constructor;\n import java.security.AccessController;\n import java.sql.Connection;\n import java.sql.Driver;\n@@ -295,12 +296,12 @@ public static void closeDataSource(DataSource ds) {\n     protected abstract static class DefaultsDataSource\n         extends DelegatingDataSource {\n \n-        private static final Class<DefaultsDataSource> implClass;\n+        private static final Constructor<DefaultsDataSource> implClass;\n \n         static {\n             try {\n-                implClass = ConcreteClassGenerator.\n-                    makeConcrete(DefaultsDataSource.class);\n+                implClass = ConcreteClassGenerator.getConcreteConstructor(DefaultsDataSource.class, \n+                        DataSource.class, String.class, String.class);\n             } catch (Exception e) {\n                 throw new ExceptionInInitializerError(e);\n             }\n@@ -315,13 +316,8 @@ public DefaultsDataSource(DataSource ds, String user, String pass) {\n             _pass = pass;\n         }\n \n-        public static DefaultsDataSource newInstance(DataSource ds,\n-            String user, String pass) {\n-            return ConcreteClassGenerator.\n-                newInstance(implClass,\n-                    DataSource.class, ds,\n-                    String.class, user,\n-                    String.class, pass);\n+        public static DefaultsDataSource newInstance(DataSource ds, String user, String pass) {\n+            return ConcreteClassGenerator.newInstance(implClass, ds, user, pass);\n         }\n \n         public Connection getConnection()"},{"sha":"3e79f317cb9b0a70529eb2e5778f8353d91db962","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SimpleDriverDataSource.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/a8640cc5d2b3e84f5cb0436045f15db30bfb4b93/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SimpleDriverDataSource.java","raw_url":"https://github.com/apache/openjpa/raw/a8640cc5d2b3e84f5cb0436045f15db30bfb4b93/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SimpleDriverDataSource.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SimpleDriverDataSource.java?ref=a8640cc5d2b3e84f5cb0436045f15db30bfb4b93","patch":"@@ -19,6 +19,7 @@\n package org.apache.openjpa.jdbc.schema;\n \n import java.io.PrintWriter;\n+import java.lang.reflect.Constructor;\n import java.security.AccessController;\n import java.security.PrivilegedActionException;\n import java.sql.Connection;\n@@ -28,6 +29,8 @@\n import java.util.List;\n import java.util.Properties;\n \n+import javax.sql.DataSource;\n+\n import org.apache.openjpa.jdbc.sql.DBDictionary;\n import org.apache.openjpa.lib.jdbc.DelegatingDataSource;\n import org.apache.openjpa.lib.util.ConcreteClassGenerator;\n@@ -50,17 +53,14 @@\n     private Driver _driver;\n     private ClassLoader _classLoader;\n     \n-    protected static Localizer _loc = \n-    \tLocalizer.forPackage(SimpleDriverDataSource.class);\n-    protected static Localizer _eloc = \n-    \tLocalizer.forPackage(DelegatingDataSource.class);\n+    protected static Localizer _loc = Localizer.forPackage(SimpleDriverDataSource.class);\n+    protected static Localizer _eloc = Localizer.forPackage(DelegatingDataSource.class);\n \n-    private static final Class<SimpleDriverDataSource> implClass;\n+    private static final Class<? extends SimpleDriverDataSource> implClass;\n \n     static {\n         try {\n-            implClass = ConcreteClassGenerator.\n-                makeConcrete(SimpleDriverDataSource.class);\n+            implClass = ConcreteClassGenerator.makeConcrete(SimpleDriverDataSource.class);\n         } catch (Exception e) {\n             throw new ExceptionInInitializerError(e);\n         }"},{"sha":"1ecf0feece32a574a3db694474fe5569b56ddff4","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PostgresDictionary.java","status":"modified","additions":11,"deletions":15,"changes":26,"blob_url":"https://github.com/apache/openjpa/blob/a8640cc5d2b3e84f5cb0436045f15db30bfb4b93/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PostgresDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/a8640cc5d2b3e84f5cb0436045f15db30bfb4b93/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PostgresDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PostgresDictionary.java?ref=a8640cc5d2b3e84f5cb0436045f15db30bfb4b93","patch":"@@ -21,6 +21,7 @@\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.OutputStream;\n+import java.lang.reflect.Constructor;\n import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n import java.sql.Connection;\n@@ -63,16 +64,16 @@\n     private static final Localizer _loc = Localizer.forPackage\n         (PostgresDictionary.class);\n \n-    private static Class<PostgresConnection> postgresConnectionImpl;\n-    private static Class<PostgresPreparedStatement>\n-            postgresPreparedStatementImpl;\n+    private static Constructor<PostgresConnection> postgresConnectionImpl;\n+    private static Constructor<PostgresPreparedStatement> postgresPreparedStatementImpl;\n \n     static {\n         try {\n-            postgresConnectionImpl = ConcreteClassGenerator.\n-                makeConcrete(PostgresConnection.class);\n-            postgresPreparedStatementImpl = ConcreteClassGenerator.\n-                makeConcrete(PostgresPreparedStatement.class);\n+            postgresConnectionImpl = ConcreteClassGenerator.getConcreteConstructor(PostgresConnection.class,\n+                    Connection.class, PostgresDictionary.class);\n+            postgresPreparedStatementImpl = ConcreteClassGenerator.getConcreteConstructor(\n+                    PostgresPreparedStatement.class,\n+                    PreparedStatement.class, Connection.class, PostgresDictionary.class);\n         } catch (Exception e) {\n             throw new ExceptionInInitializerError(e);\n         }\n@@ -372,9 +373,7 @@ public boolean isSystemIndex(String name, Table table) {\n \n     public Connection decorate(Connection conn)\n         throws SQLException {\n-        return ConcreteClassGenerator.\n-            newInstance(postgresConnectionImpl, Connection.class, \n-                super.decorate(conn), PostgresDictionary.class, this);\n+        return ConcreteClassGenerator.newInstance(postgresConnectionImpl, super.decorate(conn), this);\n     }\n \n     public InputStream getLOBStream(JDBCStore store, ResultSet rs,\n@@ -688,11 +687,8 @@ public PostgresConnection(Connection conn, PostgresDictionary dict) {\n \n         protected PreparedStatement prepareStatement(String sql, boolean wrap)\n             throws SQLException {\n-           return ConcreteClassGenerator.\n-                newInstance(postgresPreparedStatementImpl,\n-                    PreparedStatement.class, super.prepareStatement(sql, false),\n-                    Connection.class, PostgresConnection.this,\n-                    PostgresDictionary.class, _dict);\n+           return ConcreteClassGenerator.newInstance(postgresPreparedStatementImpl, \n+                   super.prepareStatement(sql, false), PostgresConnection.this, _dict);\n         }\n \n         protected PreparedStatement prepareStatement(String sql, int rsType,"},{"sha":"9b199ca458644dfbe304adab810fe43fc48c2a64","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SybaseDictionary.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/a8640cc5d2b3e84f5cb0436045f15db30bfb4b93/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SybaseDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/a8640cc5d2b3e84f5cb0436045f15db30bfb4b93/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SybaseDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SybaseDictionary.java?ref=a8640cc5d2b3e84f5cb0436045f15db30bfb4b93","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.openjpa.jdbc.sql;\n \n+import java.lang.reflect.Constructor;\n import java.math.BigDecimal;\n import java.math.BigInteger;\n import java.sql.Connection;\n@@ -61,12 +62,12 @@\n     private static Localizer _loc = Localizer.forPackage\n         (SybaseDictionary.class);\n \n-    private static Class<SybaseConnection> sybaseConnectionImpl;\n+    private static Constructor<SybaseConnection> sybaseConnectionImpl;\n \n     static {\n         try {\n-            sybaseConnectionImpl = ConcreteClassGenerator.\n-                makeConcrete(SybaseConnection.class);\n+            sybaseConnectionImpl = ConcreteClassGenerator.getConcreteConstructor(SybaseConnection.class, \n+                    Connection.class);\n         } catch (Exception e) {\n             throw new ExceptionInInitializerError(e);\n         }\n@@ -308,8 +309,7 @@ public Connection decorate(Connection conn)\n             stmnt.close();            \n         }        \n         \n-        return ConcreteClassGenerator.newInstance(sybaseConnectionImpl, \n-            Connection.class, conn);\n+        return ConcreteClassGenerator.newInstance(sybaseConnectionImpl, conn);\n     }\n \n     /**"},{"sha":"0274f653d53ed028134b2bd9beefefe375d43eb5","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/ConfiguringConnectionDecorator.java","status":"modified","additions":5,"deletions":6,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/a8640cc5d2b3e84f5cb0436045f15db30bfb4b93/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/ConfiguringConnectionDecorator.java","raw_url":"https://github.com/apache/openjpa/raw/a8640cc5d2b3e84f5cb0436045f15db30bfb4b93/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/ConfiguringConnectionDecorator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/ConfiguringConnectionDecorator.java?ref=a8640cc5d2b3e84f5cb0436045f15db30bfb4b93","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.openjpa.lib.jdbc;\n \n+import java.lang.reflect.Constructor;\n import java.sql.Connection;\n import java.sql.PreparedStatement;\n import java.sql.SQLException;\n@@ -39,12 +40,12 @@\n  */\n public class ConfiguringConnectionDecorator implements ConnectionDecorator {\n \n-   static final Class<ConfiguringConnection> configuringConnectionImpl;\n+   static final Constructor<ConfiguringConnection> configuringConnectionImpl;\n \n     static {\n         try {\n-            configuringConnectionImpl = ConcreteClassGenerator.\n-                makeConcrete(ConfiguringConnection.class);\n+            configuringConnectionImpl = ConcreteClassGenerator.getConcreteConstructor(ConfiguringConnection.class, \n+                    ConfiguringConnectionDecorator.class, Connection.class);\n         } catch (Exception e) {\n             throw new ExceptionInInitializerError(e);\n         }\n@@ -104,9 +105,7 @@ public Connection decorate(Connection conn) throws SQLException {\n         if (_isolation == Connection.TRANSACTION_NONE || _queryTimeout != -1\n             || _autoCommit != null)\n             conn = ConcreteClassGenerator.\n-                newInstance(configuringConnectionImpl,\n-                    ConfiguringConnectionDecorator.class, this,\n-                    Connection.class, conn);\n+                newInstance(configuringConnectionImpl, this, conn);\n         if (_isolation != -1 && _isolation != Connection.TRANSACTION_NONE)\n             conn.setTransactionIsolation(_isolation);\n         return conn;"},{"sha":"6ba696de576929c8288ee30b2a757576d48493de","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DecoratingDataSource.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/a8640cc5d2b3e84f5cb0436045f15db30bfb4b93/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DecoratingDataSource.java","raw_url":"https://github.com/apache/openjpa/raw/a8640cc5d2b3e84f5cb0436045f15db30bfb4b93/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DecoratingDataSource.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DecoratingDataSource.java?ref=a8640cc5d2b3e84f5cb0436045f15db30bfb4b93","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.openjpa.lib.jdbc;\n \n+import java.lang.reflect.Constructor;\n import java.sql.Connection;\n import java.sql.SQLException;\n import java.util.Collection;\n@@ -37,12 +38,11 @@\n  */\n public abstract class DecoratingDataSource extends DelegatingDataSource {\n     \n-    private static final Class<DecoratingDataSource> implClass;\n+    private static final Constructor<DecoratingDataSource> implClass;\n \n     static {\n         try {\n-            implClass = ConcreteClassGenerator.\n-                makeConcrete(DecoratingDataSource.class);\n+            implClass = ConcreteClassGenerator.getConcreteConstructor(DecoratingDataSource.class, DataSource.class);\n         } catch (Exception e) {\n             throw new ExceptionInInitializerError(e);\n         }\n@@ -60,8 +60,7 @@ public DecoratingDataSource(DataSource ds) {\n     }\n     \n     public static DecoratingDataSource newDecoratingDataSource(DataSource ds) {\n-        return ConcreteClassGenerator.newInstance(implClass, \n-            DataSource.class, ds);\n+        return ConcreteClassGenerator.newInstance(implClass, ds);\n     }\n \n "},{"sha":"ad95cbc00cbbd5f7a267032766dd4b92ac9c65a3","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingCallableStatement.java","status":"modified","additions":6,"deletions":7,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/a8640cc5d2b3e84f5cb0436045f15db30bfb4b93/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingCallableStatement.java","raw_url":"https://github.com/apache/openjpa/raw/a8640cc5d2b3e84f5cb0436045f15db30bfb4b93/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingCallableStatement.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingCallableStatement.java?ref=a8640cc5d2b3e84f5cb0436045f15db30bfb4b93","patch":"@@ -20,6 +20,7 @@\n \n import java.io.InputStream;\n import java.io.Reader;\n+import java.lang.reflect.Constructor;\n import java.math.BigDecimal;\n import java.net.URL;\n import java.sql.Array;\n@@ -50,12 +51,12 @@\n public abstract class DelegatingCallableStatement\n     implements CallableStatement, Closeable {\n \n-    static final Class<DelegatingCallableStatement> concreteImpl;\n+    static final Constructor<DelegatingCallableStatement> concreteImpl;\n \n     static {\n         try {\n-            concreteImpl = ConcreteClassGenerator.\n-                makeConcrete(DelegatingCallableStatement.class);\n+            concreteImpl = ConcreteClassGenerator.getConcreteConstructor(DelegatingCallableStatement.class, \n+                CallableStatement.class, Connection.class);\n         } catch (Exception e) {\n             throw new ExceptionInInitializerError(e);\n         }\n@@ -78,10 +79,8 @@ public DelegatingCallableStatement(CallableStatement stmnt,\n     /** \n      *  Constructor for the concrete implementation of this abstract class.\n      */\n-    public static DelegatingCallableStatement newInstance\n-        (CallableStatement stmnt, Connection conn) {\n-        return ConcreteClassGenerator.newInstance(concreteImpl,\n-                CallableStatement.class, stmnt, Connection.class, conn);\n+    public static DelegatingCallableStatement newInstance(CallableStatement stmnt, Connection conn) {\n+        return ConcreteClassGenerator.newInstance(concreteImpl, stmnt, conn);\n     }\n \n     protected ResultSet wrapResult(boolean wrap, ResultSet rs) {"},{"sha":"e8ca24bd4fd6de59670a9482f40493927f5cf4b5","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingConnection.java","status":"modified","additions":6,"deletions":7,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/a8640cc5d2b3e84f5cb0436045f15db30bfb4b93/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingConnection.java","raw_url":"https://github.com/apache/openjpa/raw/a8640cc5d2b3e84f5cb0436045f15db30bfb4b93/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingConnection.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingConnection.java?ref=a8640cc5d2b3e84f5cb0436045f15db30bfb4b93","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.openjpa.lib.jdbc;\n \n+import java.lang.reflect.Constructor;\n import java.lang.reflect.Method;\n import java.sql.CallableStatement;\n import java.sql.Connection;\n@@ -35,6 +36,7 @@\n import org.apache.openjpa.lib.util.Closeable;\n import org.apache.openjpa.lib.util.ConcreteClassGenerator;\n import org.apache.openjpa.lib.util.Localizer;\n+\n import serp.util.Numbers;\n \n /**\n@@ -47,11 +49,10 @@\n  */\n public abstract class DelegatingConnection implements Connection, Closeable {\n \n-    static final Class<DelegatingConnection> concreteImpl;\n+    static final Constructor<DelegatingConnection> concreteImpl;\n     static {\n         try {\n-            concreteImpl = ConcreteClassGenerator.\n-                makeConcrete(DelegatingConnection.class);\n+            concreteImpl = ConcreteClassGenerator.getConcreteConstructor(DelegatingConnection.class, Connection.class);\n         } catch (Exception e) {\n             throw new ExceptionInInitializerError(e);\n         }\n@@ -80,8 +81,7 @@\n         boolean jdbc3 = false;\n         Method m = null;\n         try {\n-            m = Connection.class.getMethod(\"setSavepoint\",\n-                new Class[]{ String.class });\n+            m = Connection.class.getMethod(\"setSavepoint\", new Class[]{ String.class });\n             jdbc3 = true;\n         } catch (Throwable t) {\n         }\n@@ -108,8 +108,7 @@ public DelegatingConnection(Connection conn) {\n      *  Constructor for the concrete implementation of this abstract class.\n      */\n     public static DelegatingConnection newInstance(Connection conn) {\n-        return ConcreteClassGenerator.newInstance(concreteImpl, \n-            Connection.class, conn);\n+        return ConcreteClassGenerator.newInstance(concreteImpl, conn);\n     }\n \n     /** "},{"sha":"d305fbfbce9cff2dbfd62c3031af0832289896ec","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingDataSource.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/a8640cc5d2b3e84f5cb0436045f15db30bfb4b93/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingDataSource.java","raw_url":"https://github.com/apache/openjpa/raw/a8640cc5d2b3e84f5cb0436045f15db30bfb4b93/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingDataSource.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingDataSource.java?ref=a8640cc5d2b3e84f5cb0436045f15db30bfb4b93","patch":"@@ -19,6 +19,7 @@\n package org.apache.openjpa.lib.jdbc;\n \n import java.io.PrintWriter;\n+import java.lang.reflect.Constructor;\n import java.sql.Connection;\n import java.sql.SQLException;\n import javax.sql.DataSource;\n@@ -35,12 +36,11 @@\n  */\n public abstract class DelegatingDataSource implements DataSource, Closeable {\n \n-    static final Class<DelegatingDataSource> concreteImpl;\n+    static final Constructor<DelegatingDataSource> concreteImpl;\n \n     static {\n         try {\n-            concreteImpl = ConcreteClassGenerator.\n-                makeConcrete(DelegatingDataSource.class);\n+            concreteImpl = ConcreteClassGenerator.getConcreteConstructor(DelegatingDataSource.class, DataSource.class);\n         } catch (Exception e) {\n             throw new ExceptionInInitializerError(e);\n         }\n@@ -65,8 +65,7 @@ public DelegatingDataSource(DataSource ds) {\n      *  Constructor for the concrete implementation of this abstract class.\n      */\n     public static DelegatingDataSource newInstance(DataSource ds) {\n-        return ConcreteClassGenerator.newInstance(concreteImpl, \n-            DataSource.class, ds);\n+        return ConcreteClassGenerator.newInstance(concreteImpl, ds);\n     }\n \n     /** "},{"sha":"d5961f4c45120fdbab774fbc9d375c812003f2d9","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingDatabaseMetaData.java","status":"modified","additions":6,"deletions":7,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/a8640cc5d2b3e84f5cb0436045f15db30bfb4b93/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingDatabaseMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/a8640cc5d2b3e84f5cb0436045f15db30bfb4b93/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingDatabaseMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingDatabaseMetaData.java?ref=a8640cc5d2b3e84f5cb0436045f15db30bfb4b93","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.openjpa.lib.jdbc;\n \n+import java.lang.reflect.Constructor;\n import java.sql.Connection;\n import java.sql.DatabaseMetaData;\n import java.sql.ResultSet;\n@@ -32,12 +33,12 @@\n  */\n public abstract class DelegatingDatabaseMetaData implements DatabaseMetaData {\n \n-    static final Class<DelegatingDatabaseMetaData> concreteImpl;\n+    static final Constructor<DelegatingDatabaseMetaData> concreteImpl;\n \n     static {\n         try {\n-            concreteImpl = ConcreteClassGenerator.\n-                makeConcrete(DelegatingDatabaseMetaData.class);\n+            concreteImpl = ConcreteClassGenerator.getConcreteConstructor(DelegatingDatabaseMetaData.class, \n+                    DatabaseMetaData.class, Connection.class);\n         } catch (Exception e) {\n             throw new ExceptionInInitializerError(e);\n         }\n@@ -52,10 +53,8 @@ public DelegatingDatabaseMetaData(DatabaseMetaData metaData,\n         _metaData = metaData;\n     }\n \n-    public static DelegatingDatabaseMetaData newInstance\n-        (DatabaseMetaData metaData, Connection conn) {\n-        return ConcreteClassGenerator.newInstance(concreteImpl,\n-                DatabaseMetaData.class, metaData, Connection.class, conn);\n+    public static DelegatingDatabaseMetaData newInstance(DatabaseMetaData metaData, Connection conn) {\n+        return ConcreteClassGenerator.newInstance(concreteImpl, metaData, conn);\n     }\n \n     /** "},{"sha":"515cf57126bb6c5fd6fa62370415630d6cf77157","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingPreparedStatement.java","status":"modified","additions":6,"deletions":7,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/a8640cc5d2b3e84f5cb0436045f15db30bfb4b93/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingPreparedStatement.java","raw_url":"https://github.com/apache/openjpa/raw/a8640cc5d2b3e84f5cb0436045f15db30bfb4b93/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingPreparedStatement.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingPreparedStatement.java?ref=a8640cc5d2b3e84f5cb0436045f15db30bfb4b93","patch":"@@ -20,6 +20,7 @@\n \n import java.io.InputStream;\n import java.io.Reader;\n+import java.lang.reflect.Constructor;\n import java.math.BigDecimal;\n import java.net.URL;\n import java.sql.Array;\n@@ -52,11 +53,11 @@\n public abstract class DelegatingPreparedStatement\n     implements PreparedStatement, Closeable {\n     \n-    static final Class<DelegatingPreparedStatement> concreteImpl;\n+    static final Constructor<DelegatingPreparedStatement> concreteImpl;\n     static {\n         try {\n-            concreteImpl = ConcreteClassGenerator.\n-                makeConcrete(DelegatingPreparedStatement.class);\n+            concreteImpl = ConcreteClassGenerator.getConcreteConstructor(DelegatingPreparedStatement.class,\n+                    PreparedStatement.class, Connection.class);\n         } catch (Exception e) {\n             throw new ExceptionInInitializerError(e);\n         }\n@@ -76,10 +77,8 @@ public DelegatingPreparedStatement(PreparedStatement stmnt,\n             _del = null;\n     }\n     \n-    public static DelegatingPreparedStatement newInstance\n-        (PreparedStatement stmnt, Connection conn) {\n-        return ConcreteClassGenerator.newInstance(concreteImpl,\n-                PreparedStatement.class, stmnt, Connection.class, conn);\n+    public static DelegatingPreparedStatement newInstance(PreparedStatement stmnt, Connection conn) {\n+        return ConcreteClassGenerator.newInstance(concreteImpl, stmnt, conn);\n     }\n \n     protected ResultSet wrapResult(ResultSet rs, boolean wrap) {"},{"sha":"54166de8f8219cbd2dc90d465d2ea5fe6e2485a4","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingResultSet.java","status":"modified","additions":6,"deletions":7,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/a8640cc5d2b3e84f5cb0436045f15db30bfb4b93/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingResultSet.java","raw_url":"https://github.com/apache/openjpa/raw/a8640cc5d2b3e84f5cb0436045f15db30bfb4b93/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingResultSet.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingResultSet.java?ref=a8640cc5d2b3e84f5cb0436045f15db30bfb4b93","patch":"@@ -20,6 +20,7 @@\n \n import java.io.InputStream;\n import java.io.Reader;\n+import java.lang.reflect.Constructor;\n import java.math.BigDecimal;\n import java.net.URL;\n import java.sql.Array;\n@@ -50,12 +51,12 @@\n  */\n public abstract class DelegatingResultSet implements ResultSet, Closeable {\n \n-    static final Class<DelegatingResultSet> concreteImpl;\n+    static final Constructor<DelegatingResultSet> concreteImpl;\n \n     static {\n         try {\n-            concreteImpl = ConcreteClassGenerator.\n-                makeConcrete(DelegatingResultSet.class);\n+            concreteImpl = ConcreteClassGenerator.getConcreteConstructor(DelegatingResultSet.class, \n+                ResultSet.class, Statement.class);\n         } catch (Exception e) {\n             throw new ExceptionInInitializerError(e);\n         }\n@@ -77,10 +78,8 @@ public DelegatingResultSet(ResultSet rs, Statement stmnt) {\n             _del = null;\n     }\n \n-    public static DelegatingResultSet newInstance\n-        (ResultSet rs, Statement stmnt)  {\n-        return ConcreteClassGenerator.newInstance(concreteImpl,\n-                ResultSet.class, rs, Statement.class, stmnt);\n+    public static DelegatingResultSet newInstance(ResultSet rs, Statement stmnt)  {\n+        return ConcreteClassGenerator.newInstance(concreteImpl, rs, stmnt);\n     }\n \n     /** "},{"sha":"d0f1e3e12e6d80119fbb7b536f472b7dc45f1ead","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingStatement.java","status":"modified","additions":6,"deletions":7,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/a8640cc5d2b3e84f5cb0436045f15db30bfb4b93/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingStatement.java","raw_url":"https://github.com/apache/openjpa/raw/a8640cc5d2b3e84f5cb0436045f15db30bfb4b93/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingStatement.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingStatement.java?ref=a8640cc5d2b3e84f5cb0436045f15db30bfb4b93","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.openjpa.lib.jdbc;\n \n+import java.lang.reflect.Constructor;\n import java.sql.Connection;\n import java.sql.ResultSet;\n import java.sql.SQLException;\n@@ -37,12 +38,12 @@\n  */\n public abstract class DelegatingStatement implements Statement, Closeable {\n \n-    static final Class<DelegatingStatement> concreteImpl;\n+    static final Constructor<DelegatingStatement> concreteImpl;\n \n     static {\n         try {\n-            concreteImpl = ConcreteClassGenerator.\n-                makeConcrete(DelegatingStatement.class);\n+            concreteImpl = ConcreteClassGenerator.getConcreteConstructor(DelegatingStatement.class, \n+                Statement.class, Connection.class);\n         } catch (Exception e) {\n             throw new ExceptionInInitializerError(e);\n         }\n@@ -61,10 +62,8 @@ public DelegatingStatement(Statement stmnt, Connection conn) {\n             _del = null;\n     }\n \n-    public static DelegatingStatement newInstance\n-        (Statement stmnt, Connection conn)  {\n-        return ConcreteClassGenerator.newInstance(concreteImpl,\n-                Statement.class, stmnt, Connection.class, conn);\n+    public static DelegatingStatement newInstance(Statement stmnt, Connection conn)  {\n+        return ConcreteClassGenerator.newInstance(concreteImpl, stmnt, conn);\n     }\n \n     /** "},{"sha":"d44324fda53752e352a3ec19a601642e0f8566ed","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/JDBCEventConnectionDecorator.java","status":"modified","additions":15,"deletions":26,"changes":41,"blob_url":"https://github.com/apache/openjpa/blob/a8640cc5d2b3e84f5cb0436045f15db30bfb4b93/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/JDBCEventConnectionDecorator.java","raw_url":"https://github.com/apache/openjpa/raw/a8640cc5d2b3e84f5cb0436045f15db30bfb4b93/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/JDBCEventConnectionDecorator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/JDBCEventConnectionDecorator.java?ref=a8640cc5d2b3e84f5cb0436045f15db30bfb4b93","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.openjpa.lib.jdbc;\n \n+import java.lang.reflect.Constructor;\n import java.sql.Connection;\n import java.sql.PreparedStatement;\n import java.sql.ResultSet;\n@@ -37,19 +38,20 @@\n public class JDBCEventConnectionDecorator extends AbstractConcurrentEventManager\n     implements ConnectionDecorator {\n \n-    private static final Class<EventConnection> eventConnectionImpl;\n-    private static final Class<EventStatement> eventStatementImpl;\n-    private static final Class<EventPreparedStatement>\n+    private static final Constructor<EventConnection> eventConnectionImpl;\n+    private static final Constructor<EventStatement> eventStatementImpl;\n+    private static final Constructor<EventPreparedStatement>\n             eventPreparedStatementImpl;\n \n     static {\n         try {\n-            eventConnectionImpl = ConcreteClassGenerator.\n-                makeConcrete(EventConnection.class);\n-            eventStatementImpl = ConcreteClassGenerator.\n-                makeConcrete(EventStatement.class);\n-            eventPreparedStatementImpl = ConcreteClassGenerator.\n-                makeConcrete(EventPreparedStatement.class);\n+            eventConnectionImpl = ConcreteClassGenerator.getConcreteConstructor(EventConnection.class,\n+                JDBCEventConnectionDecorator.class, Connection.class);\n+            eventStatementImpl = ConcreteClassGenerator.getConcreteConstructor(EventStatement.class,\n+                JDBCEventConnectionDecorator.class, Statement.class, EventConnection.class);\n+            eventPreparedStatementImpl = ConcreteClassGenerator.getConcreteConstructor(EventPreparedStatement.class,\n+                JDBCEventConnectionDecorator.class, PreparedStatement.class, EventConnection.class, String.class);\n+\n         } catch (Exception e) {\n             throw new ExceptionInInitializerError(e);\n         }\n@@ -60,11 +62,7 @@ public Connection decorate(Connection conn) {\n         if (!hasListeners())\n             return conn;\n \n-        return ConcreteClassGenerator.\n-            newInstance(eventConnectionImpl,\n-                JDBCEventConnectionDecorator.class,\n-                    JDBCEventConnectionDecorator.this,\n-                Connection.class, conn);\n+        return ConcreteClassGenerator.newInstance(eventConnectionImpl, JDBCEventConnectionDecorator.this, conn);\n     }\n \n     /**\n@@ -166,10 +164,7 @@ protected Statement createStatement(boolean wrap) throws SQLException {\n             Statement stmnt = null;\n             try {\n                 stmnt = ConcreteClassGenerator.newInstance(eventStatementImpl,\n-                        JDBCEventConnectionDecorator.class,\n-                            JDBCEventConnectionDecorator.this,\n-                        Statement.class, super.createStatement(false),\n-                        EventConnection.class, EventConnection.this);\n+                            JDBCEventConnectionDecorator.this, super.createStatement(false), EventConnection.this);\n             } finally {\n                 fireEvent(getDelegate(), JDBCEvent.AFTER_CREATE_STATEMENT,\n                     before, stmnt, null);\n@@ -202,14 +197,8 @@ protected PreparedStatement prepareStatement(String sql, boolean wrap)\n                 JDBCEvent.BEFORE_PREPARE_STATEMENT, null, null, sql);\n             PreparedStatement stmnt = null;\n             try {\n-                stmnt = ConcreteClassGenerator.newInstance(\n-                    eventPreparedStatementImpl,\n-                    JDBCEventConnectionDecorator.class, \n-                    JDBCEventConnectionDecorator.this,\n-                    PreparedStatement.class,\n-                    super.prepareStatement(sql, false),\n-                    EventConnection.class, EventConnection.this,\n-                    String.class, sql);\n+                stmnt = ConcreteClassGenerator.newInstance(eventPreparedStatementImpl, \n+                    JDBCEventConnectionDecorator.this, super.prepareStatement(sql, false), EventConnection.this, sql);\n             } finally {\n                 fireEvent(getDelegate(), JDBCEvent.AFTER_PREPARE_STATEMENT,\n                     before, stmnt, sql);"},{"sha":"3fac1653dc077ea88081153143a91abe9df42163","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator.java","status":"modified","additions":33,"deletions":50,"changes":83,"blob_url":"https://github.com/apache/openjpa/blob/a8640cc5d2b3e84f5cb0436045f15db30bfb4b93/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator.java","raw_url":"https://github.com/apache/openjpa/raw/a8640cc5d2b3e84f5cb0436045f15db30bfb4b93/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator.java?ref=a8640cc5d2b3e84f5cb0436045f15db30bfb4b93","patch":"@@ -20,6 +20,7 @@\n \n import java.io.InputStream;\n import java.io.Reader;\n+import java.lang.reflect.Constructor;\n import java.math.BigDecimal;\n import java.sql.Array;\n import java.sql.BatchUpdateException;\n@@ -69,12 +70,12 @@\n public class LoggingConnectionDecorator implements ConnectionDecorator {\n \n     private static final String SEP = J2DoPrivHelper.getLineSeparator();\n-    static final Class<LoggingConnection> loggingConnectionImpl;\n-    static final Class<LoggingResultSet> loggingResultSetImpl;\n-    static final Class<LoggingStatement> loggingStatementImpl;\n-    static final Class<LoggingPreparedStatement> loggingPreparedStatementImpl;\n-    static final Class<LoggingCallableStatement> loggingCallableStatementImpl;\n-    static final Class<LoggingDatabaseMetaData> loggingDatabaseMetaDataImpl;\n+    static final Constructor<LoggingConnection> loggingConnectionImpl;\n+    static final Constructor<LoggingResultSet> loggingResultSetImpl;\n+    static final Constructor<LoggingStatement> loggingStatementImpl;\n+    static final Constructor<LoggingPreparedStatement> loggingPreparedStatementImpl;\n+    static final Constructor<LoggingCallableStatement> loggingCallableStatementImpl;\n+    static final Constructor<LoggingDatabaseMetaData> loggingDatabaseMetaDataImpl;\n \n     private static final int WARN_IGNORE = 0;\n     private static final int WARN_LOG_TRACE = 1;\n@@ -95,18 +96,23 @@\n         WARNING_ACTIONS[WARN_HANDLE] = \"handle\";\n \n         try {\n-            loggingConnectionImpl = ConcreteClassGenerator.\n-                makeConcrete(LoggingConnection.class);\n-            loggingResultSetImpl = ConcreteClassGenerator.\n-                makeConcrete(LoggingConnection.LoggingResultSet.class);\n-            loggingStatementImpl = ConcreteClassGenerator.\n-                makeConcrete(LoggingConnection.LoggingStatement.class);\n-            loggingPreparedStatementImpl = ConcreteClassGenerator.\n-                makeConcrete(LoggingConnection.LoggingPreparedStatement.class);\n-            loggingCallableStatementImpl = ConcreteClassGenerator.\n-                makeConcrete(LoggingConnection.LoggingCallableStatement.class);\n-            loggingDatabaseMetaDataImpl = ConcreteClassGenerator.\n-                makeConcrete(LoggingConnection.LoggingDatabaseMetaData.class);\n+            loggingConnectionImpl = ConcreteClassGenerator.getConcreteConstructor(LoggingConnection.class,\n+                LoggingConnectionDecorator.class, Connection.class);\n+            loggingResultSetImpl = ConcreteClassGenerator.getConcreteConstructor(\n+                LoggingConnection.LoggingResultSet.class, \n+                LoggingConnection.class, ResultSet.class, Statement.class);\n+            loggingStatementImpl = ConcreteClassGenerator.getConcreteConstructor(\n+                LoggingConnection.LoggingStatement.class,\n+                LoggingConnection.class, Statement.class);\n+            loggingPreparedStatementImpl = ConcreteClassGenerator.getConcreteConstructor(\n+                LoggingConnection.LoggingPreparedStatement.class, \n+                LoggingConnection.class, PreparedStatement.class, String.class);\n+            loggingCallableStatementImpl = ConcreteClassGenerator.getConcreteConstructor(\n+                LoggingConnection.LoggingCallableStatement.class,\n+                LoggingConnection.class, CallableStatement.class, String.class);\n+            loggingDatabaseMetaDataImpl = ConcreteClassGenerator.getConcreteConstructor(\n+                LoggingConnection.LoggingDatabaseMetaData.class,\n+                LoggingConnection.class, DatabaseMetaData.class);\n         } catch (Exception e) {\n             throw new ExceptionInInitializerError(e);\n         }\n@@ -220,10 +226,7 @@ public Connection decorate(Connection conn) throws SQLException {\n          \n     private LoggingConnection newLoggingConnection(Connection conn)\n         throws SQLException {\n-        return ConcreteClassGenerator.\n-            newInstance(loggingConnectionImpl,\n-            LoggingConnectionDecorator.class, LoggingConnectionDecorator.this,\n-            Connection.class, conn);\n+        return ConcreteClassGenerator.newInstance(loggingConnectionImpl, LoggingConnectionDecorator.this, conn);\n     }\n \n \n@@ -342,36 +345,21 @@ protected CallableStatement prepareCall(String sql, boolean wrap)\n \n         private LoggingPreparedStatement newLoggingPreparedStatement\n             (PreparedStatement stmnt, String sql) throws SQLException {\n-            return ConcreteClassGenerator.\n-                newInstance(loggingPreparedStatementImpl,\n-                LoggingConnection.class, LoggingConnection.this,\n-                PreparedStatement.class, stmnt,\n-                String.class, sql);\n+            return ConcreteClassGenerator.newInstance(loggingPreparedStatementImpl, LoggingConnection.this, stmnt, sql);\n         }\n         \n-        private CallableStatement newLoggingCallableStatement\n-            (CallableStatement stmnt, String sql) throws SQLException {\n-            return ConcreteClassGenerator.\n-               newInstance(loggingCallableStatementImpl,\n-               LoggingConnection.class, LoggingConnection.this,\n-               CallableStatement.class, stmnt,\n-               String.class, sql);\n-    }\n+        private CallableStatement newLoggingCallableStatement(CallableStatement stmnt, String sql) throws SQLException {\n+            return ConcreteClassGenerator.newInstance(loggingCallableStatementImpl, LoggingConnection.this, stmnt, sql);\n+        }\n         \n         private LoggingStatement newLoggingStatement(Statement stmnt)\n             throws SQLException {\n-            return ConcreteClassGenerator.\n-                newInstance(loggingStatementImpl,\n-                LoggingConnection.class, LoggingConnection.this,\n-                Statement.class, stmnt);\n+            return ConcreteClassGenerator.newInstance(loggingStatementImpl, LoggingConnection.this, stmnt);\n         }\n         \n         private LoggingDatabaseMetaData newLoggingDatabaseMetaData\n             (DatabaseMetaData meta) throws SQLException {\n-            return ConcreteClassGenerator.\n-                newInstance(loggingDatabaseMetaDataImpl,\n-                LoggingConnection.class, LoggingConnection.this,\n-                DatabaseMetaData.class, meta);\n+            return ConcreteClassGenerator.newInstance(loggingDatabaseMetaDataImpl, LoggingConnection.this, meta);\n         }\n \n \n@@ -900,13 +888,8 @@ public LoggingStatement(Statement stmnt) throws SQLException {\n                 super(stmnt, LoggingConnection.this);\n             }\n \n-            private LoggingResultSet newLoggingResultSet(ResultSet rs,\n-                Statement stmnt) {\n-                return ConcreteClassGenerator.\n-                    newInstance(loggingResultSetImpl,\n-                    LoggingConnection.class, LoggingConnection.this,\n-                    ResultSet.class, rs,\n-                    Statement.class, stmnt);\n+            private LoggingResultSet newLoggingResultSet(ResultSet rs, Statement stmnt) {\n+                return ConcreteClassGenerator.newInstance(loggingResultSetImpl, LoggingConnection.this, rs, stmnt);\n             }\n \n             public void appendInfo(StringBuffer buf) {"},{"sha":"a47039a4a7ca0b9d8f8441a96ff4a91050ed55e7","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ConcreteClassGenerator.java","status":"modified","additions":52,"deletions":10,"changes":62,"blob_url":"https://github.com/apache/openjpa/blob/a8640cc5d2b3e84f5cb0436045f15db30bfb4b93/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ConcreteClassGenerator.java","raw_url":"https://github.com/apache/openjpa/raw/a8640cc5d2b3e84f5cb0436045f15db30bfb4b93/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ConcreteClassGenerator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ConcreteClassGenerator.java?ref=a8640cc5d2b3e84f5cb0436045f15db30bfb4b93","patch":"@@ -18,6 +18,7 @@\n import java.lang.reflect.Constructor;\n import java.lang.reflect.Modifier;\n import java.security.AccessController;\n+import java.util.Arrays;\n \n import serp.bytecode.BCClass;\n import serp.bytecode.BCClassLoader;\n@@ -29,11 +30,40 @@\n  * Dynamically generates concrete implementations of abstract classes.\n  *\n  * @author Marc Prud'hommeaux\n+ * @author Pinaki Poddar\n+ * \n  * @nojavadoc\n- * @since 0.9.8\n+ * @since 1.3.0\n  */\n public class ConcreteClassGenerator {\n-\n+    /**\n+     * Get the constructor of the concrete, dynamic wrapper class of the given abstract class \n+     * with matching argument types.\n+     * @param the argTypes of the constructor to look for. null signify default constructor.\n+     */\n+    public static <T> Constructor<T> getConcreteConstructor(Class<T> abstractClass, Class<?>... argTypes)\n+    throws ClassNotFoundException {\n+        Class<? extends T> cls = makeConcrete(abstractClass);\n+        Constructor<?>[] constructors = cls.getConstructors();\n+        int args = argTypes == null ? 0 : argTypes.length;\n+        for (Constructor<?> cons : constructors) {\n+            Class<?>[] params = cons.getParameterTypes();\n+            if (params.length != args)\n+                continue;\n+            boolean match = false;\n+            for (int i = 0; i < params.length; i++) {\n+                match = params[i].isAssignableFrom(argTypes[i]);\n+                if (!match)\n+                    break;\n+            }\n+            if (match) {\n+                return (Constructor<T>)cons;\n+            }\n+        }\n+        throw new RuntimeException(abstractClass + \" has no constructor with \" + \n+                (args == 0 ? \"void\" : Arrays.toString(argTypes)));\n+    }\n+    \n     /** \n      *  Takes an abstract class and returns a concrete implementation. Note\n      *  that it doesn't actually implement any abstract methods, it\n@@ -43,7 +73,7 @@\n      *  @param  abstractClass  the abstract class\n      *  @return a concrete class\n      */\n-    public static <T> Class<T> makeConcrete(Class<T> abstractClass)\n+    public static <T> Class<? extends T> makeConcrete(Class<T> abstractClass)\n         throws ClassNotFoundException {\n         if (abstractClass == null)\n             return null;\n@@ -61,13 +91,13 @@\n         \n         bc.setSuperclass(abstractClass);\n \n-        Constructor[] constructors = abstractClass.getConstructors();\n+        Constructor<?>[] constructors = abstractClass.getConstructors();\n         if (constructors == null || constructors.length == 0) {\n             bc.addDefaultConstructor().makePublic();\n         } else {\n             for (int i = 0; i < constructors.length; i++) {\n-                Constructor con = constructors[i];\n-                Class[] args = con.getParameterTypes();\n+                Constructor<?> con = constructors[i];\n+                Class<?>[] args = con.getParameterTypes();\n \n                 BCMethod bccon = bc.declareMethod(\"<init>\", void.class, args);\n                 Code code = bccon.getCode(true);\n@@ -79,19 +109,31 @@\n                     code.checkcast().setType(args[j]);\n                 }\n \n-                code.invokespecial().setMethod(abstractClass,\n-                    \"<init>\", void.class, args);\n+                code.invokespecial().setMethod(abstractClass, \"<init>\", void.class, args);\n                 code.vreturn();\n \n                 code.calculateMaxStack();\n                 code.calculateMaxLocals();\n             }\n         }\n \n-        Class cls = Class.forName(bc.getName(), false, loader);\n-        return cls;\n+        Class<?> cls = Class.forName(bc.getName(), false, loader);\n+        return (Class<? extends T>)cls;\n     }\n \n+    /**\n+     * Construct a new instance by the given constructor and its arguments.\n+     * Hopefully faster than looking for constructor in overloaded implementations. \n+     */\n+    public static <T> T newInstance(Constructor<T> cons, Object... params) {\n+        try {\n+            return cons.newInstance(params);\n+        } catch (Exception e) {\n+            throw new ExceptionInInitializerError(e);\n+        }\n+        \n+    }\n+    \n     /** \n      *  Utility method for safely invoking a constructor that we do\n      *  not expect to throw exceptions. "},{"sha":"bfa9eb6f006e37ea85f58d6600013469f61329e6","filename":"openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedConnection.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/a8640cc5d2b3e84f5cb0436045f15db30bfb4b93/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedConnection.java","raw_url":"https://github.com/apache/openjpa/raw/a8640cc5d2b3e84f5cb0436045f15db30bfb4b93/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedConnection.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedConnection.java?ref=a8640cc5d2b3e84f5cb0436045f15db30bfb4b93","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.openjpa.slice.jdbc;\n \n+import java.lang.reflect.Constructor;\n import java.sql.CallableStatement;\n import java.sql.Connection;\n import java.sql.DatabaseMetaData;\n@@ -38,11 +39,10 @@\n  * \n  */\n public abstract class DistributedConnection implements Connection {\n-    static final Class<DistributedConnection> concreteImpl;\n+    static final Constructor<DistributedConnection> concreteImpl;\n     static {\n         try {\n-            concreteImpl = ConcreteClassGenerator.\n-                makeConcrete(DistributedConnection.class);\n+            concreteImpl = ConcreteClassGenerator.getConcreteConstructor(DistributedConnection.class, List.class);\n         } catch (Exception e) {\n             throw new ExceptionInInitializerError(e);\n         }\n@@ -61,8 +61,7 @@ public DistributedConnection(List<Connection> connections) {\n      *  Constructor for the concrete implementation of this abstract class.\n      */\n     public static DistributedConnection newInstance(List<Connection> conns) {\n-        return ConcreteClassGenerator.newInstance(concreteImpl, \n-            List.class, conns);\n+        return ConcreteClassGenerator.newInstance(concreteImpl, conns);\n     }\n \n     /** "},{"sha":"634b893994f5f5f6ad04e67be878cb537f7c039f","filename":"openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedJDBCStoreManager.java","status":"modified","additions":7,"deletions":9,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/a8640cc5d2b3e84f5cb0436045f15db30bfb4b93/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedJDBCStoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/a8640cc5d2b3e84f5cb0436045f15db30bfb4b93/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedJDBCStoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedJDBCStoreManager.java?ref=a8640cc5d2b3e84f5cb0436045f15db30bfb4b93","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.openjpa.slice.jdbc;\n \n+import java.lang.reflect.Constructor;\n import java.sql.Connection;\n import java.sql.SQLException;\n import java.util.ArrayList;\n@@ -82,14 +83,14 @@\n     private static final Localizer _loc =\n             Localizer.forPackage(DistributedJDBCStoreManager.class);\n \n-    private static final Class<ClientConnection> clientConnectionImpl;\n-    private static final Class<RefCountConnection> refCountConnectionImpl;\n+    private static final Constructor<ClientConnection> clientConnectionImpl;\n+    private static final Constructor<RefCountConnection> refCountConnectionImpl;\n     static {\n         try {\n             clientConnectionImpl = ConcreteClassGenerator.\n-                makeConcrete(ClientConnection.class);\n+                getConcreteConstructor(ClientConnection.class, Connection.class);\n             refCountConnectionImpl = ConcreteClassGenerator.\n-                makeConcrete(RefCountConnection.class);\n+                getConcreteConstructor(RefCountConnection.class, JDBCStoreManager.class, Connection.class);\n         } catch (Exception e) {\n             throw new ExceptionInInitializerError(e);\n         }\n@@ -364,8 +365,7 @@ boolean occurs(OpenJPAStateManager sm,\n     }\n \n     public Object getClientConnection() {\n-        return ConcreteClassGenerator.newInstance\n-            (clientConnectionImpl, Connection.class, getConnection());\n+        return ConcreteClassGenerator.newInstance(clientConnectionImpl, getConnection());\n     }\n \n     public Seq getDataStoreIdSequence(ClassMetaData forClass) {\n@@ -480,9 +480,7 @@ protected RefCountConnection connectInternal() throws SQLException {\n         for (SliceStoreManager slice : _slices)\n             list.add(slice.getConnection());\n         DistributedConnection con = DistributedConnection.newInstance(list);\n-        return ConcreteClassGenerator.newInstance(refCountConnectionImpl, \n-            JDBCStoreManager.class, DistributedJDBCStoreManager.this, \n-            Connection.class, con);\n+        return ConcreteClassGenerator.newInstance(refCountConnectionImpl, DistributedJDBCStoreManager.this, con);\n     }\n     \n     /**"},{"sha":"18eccae5487c91a5380336362a65280023586abf","filename":"openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedPreparedStatement.java","status":"modified","additions":7,"deletions":8,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/a8640cc5d2b3e84f5cb0436045f15db30bfb4b93/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedPreparedStatement.java","raw_url":"https://github.com/apache/openjpa/raw/a8640cc5d2b3e84f5cb0436045f15db30bfb4b93/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedPreparedStatement.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedPreparedStatement.java?ref=a8640cc5d2b3e84f5cb0436045f15db30bfb4b93","patch":"@@ -20,6 +20,7 @@\n \n import java.io.InputStream;\n import java.io.Reader;\n+import java.lang.reflect.Constructor;\n import java.math.BigDecimal;\n import java.net.URL;\n import java.sql.Array;\n@@ -49,11 +50,11 @@\n     extends DistributedTemplate<PreparedStatement> \n     implements PreparedStatement {\n \n-    static final Class<DistributedPreparedStatement> concreteImpl;\n+    static final Constructor<DistributedPreparedStatement> concreteImpl;\n     static {\n         try {\n-            concreteImpl = ConcreteClassGenerator.\n-                makeConcrete(DistributedPreparedStatement.class);\n+            concreteImpl = ConcreteClassGenerator.getConcreteConstructor(DistributedPreparedStatement.class, \n+                    DistributedConnection.class);\n         } catch (Exception e) {\n             throw new ExceptionInInitializerError(e);\n         }\n@@ -63,11 +64,9 @@ public DistributedPreparedStatement(DistributedConnection c) {\n \t\tsuper(c);\n \t}\n \t\n-    public static DistributedPreparedStatement newInstance(\n-        DistributedConnection conn) {\n-    return ConcreteClassGenerator.newInstance(concreteImpl, \n-        DistributedConnection.class, conn);\n-}\n+    public static DistributedPreparedStatement newInstance(DistributedConnection conn) {\n+        return ConcreteClassGenerator.newInstance(concreteImpl, conn);\n+    }\n \n \tpublic void clearParameters() throws SQLException {\n \t\tfor (PreparedStatement s : this)"},{"sha":"03cbd968e9c71cd26a85c047834f9cb9db91ed16","filename":"openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedResultSet.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/a8640cc5d2b3e84f5cb0436045f15db30bfb4b93/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedResultSet.java","raw_url":"https://github.com/apache/openjpa/raw/a8640cc5d2b3e84f5cb0436045f15db30bfb4b93/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedResultSet.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedResultSet.java?ref=a8640cc5d2b3e84f5cb0436045f15db30bfb4b93","patch":"@@ -20,6 +20,7 @@\n \n import java.io.InputStream;\n import java.io.Reader;\n+import java.lang.reflect.Constructor;\n import java.math.BigDecimal;\n import java.net.URL;\n import java.sql.Array;\n@@ -49,12 +50,11 @@\n  *\n  */\n public abstract class DistributedResultSet implements ResultSet {\n-    static final Class<DistributedResultSet> concreteImpl;\n+    static final Constructor<DistributedResultSet> concreteImpl;\n \n     static {\n         try {\n-            concreteImpl = ConcreteClassGenerator.\n-                makeConcrete(DistributedResultSet.class);\n+            concreteImpl = ConcreteClassGenerator.getConcreteConstructor(DistributedResultSet.class);\n         } catch (Exception e) {\n             throw new ExceptionInInitializerError(e);\n         }"},{"sha":"fb3eb7dd8660272f510aec6718719dc9103884c9","filename":"openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedStatement.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/a8640cc5d2b3e84f5cb0436045f15db30bfb4b93/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedStatement.java","raw_url":"https://github.com/apache/openjpa/raw/a8640cc5d2b3e84f5cb0436045f15db30bfb4b93/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedStatement.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedStatement.java?ref=a8640cc5d2b3e84f5cb0436045f15db30bfb4b93","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.openjpa.slice.jdbc;\n \n+import java.lang.reflect.Constructor;\n import java.sql.Statement;\n \n import org.apache.openjpa.lib.util.ConcreteClassGenerator;\n@@ -30,12 +31,12 @@\n  */\n public abstract class DistributedStatement extends\n     DistributedTemplate<Statement> {\n-    static final Class<DistributedStatement> concreteImpl;\n+    static final Constructor<DistributedStatement> concreteImpl;\n \n     static {\n         try {\n-            concreteImpl = ConcreteClassGenerator.makeConcrete(\n-                DistributedStatement.class);\n+            concreteImpl = ConcreteClassGenerator.getConcreteConstructor(DistributedStatement.class, \n+                DistributedConnection.class);\n         } catch (Exception e) {\n             throw new ExceptionInInitializerError(e);\n         }\n@@ -46,7 +47,6 @@ public DistributedStatement(DistributedConnection c) {\n     }\n \n     public static DistributedStatement newInstance(DistributedConnection conn) {\n-        return ConcreteClassGenerator.newInstance(concreteImpl, \n-            DistributedConnection.class, conn);\n+        return ConcreteClassGenerator.newInstance(concreteImpl, conn);\n     }\n }"},{"sha":"22b694e61e0187b840321cad774a08989b0520c8","filename":"openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedTemplate.java","status":"modified","additions":8,"deletions":3,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/a8640cc5d2b3e84f5cb0436045f15db30bfb4b93/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedTemplate.java","raw_url":"https://github.com/apache/openjpa/raw/a8640cc5d2b3e84f5cb0436045f15db30bfb4b93/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedTemplate.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedTemplate.java?ref=a8640cc5d2b3e84f5cb0436045f15db30bfb4b93","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.openjpa.slice.jdbc;\n \n+import java.lang.reflect.Constructor;\n import java.sql.Connection;\n import java.sql.ResultSet;\n import java.sql.SQLException;\n@@ -37,12 +38,12 @@\n  */\n public abstract class DistributedTemplate<T extends Statement> \n \timplements Statement, Iterable<T> {\n-    static final Class<DistributedTemplate> concreteImpl;\n+    static final Constructor<DistributedTemplate> concreteImpl;\n \n     static {\n         try {\n-            concreteImpl = ConcreteClassGenerator.\n-                makeConcrete(DistributedTemplate.class);\n+            concreteImpl = ConcreteClassGenerator.getConcreteConstructor(DistributedTemplate.class, \n+                DistributedConnection.class);\n         } catch (Exception e) {\n             throw new ExceptionInInitializerError(e);\n         }\n@@ -56,6 +57,10 @@ public DistributedTemplate(DistributedConnection c) {\n \t\tcon = c;\n \t}\n \t\n+    public static DistributedTemplate newInstance(DistributedConnection conn) {\n+        return ConcreteClassGenerator.newInstance(concreteImpl, conn);\n+    }\n+    \n \tpublic Iterator<T> iterator() {\n \t\treturn stmts.iterator();\n \t}"},{"sha":"a8cba8449ccf355c8d5d0538d77443e93342734a","filename":"openjpa-slice/src/test/resources/META-INF/persistence.xml","status":"modified","additions":14,"deletions":4,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/a8640cc5d2b3e84f5cb0436045f15db30bfb4b93/openjpa-slice/src/test/resources/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/a8640cc5d2b3e84f5cb0436045f15db30bfb4b93/openjpa-slice/src/test/resources/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/test/resources/META-INF/persistence.xml?ref=a8640cc5d2b3e84f5cb0436045f15db30bfb4b93","patch":"@@ -46,6 +46,8 @@\n          <property name=\"openjpa.slice.Two.ConnectionURL\"   value=\"jdbc:derby:target/database/openjpa-slice2;create=true\"/>\n          <property name=\"openjpa.slice.Three.ConnectionURL\" value=\"jdbc:some-bad-url\"/>\n          \n+         <property name=\"openjpa.DynamicEnhancementAgent\"   value=\"false\"/>\n+         \n       </properties>\n    </persistence-unit>\n \n@@ -68,7 +70,9 @@\n          <property name=\"openjpa.Multithreaded\" value=\"false\"/>\n          <property name=\"openjpa.jdbc.SynchronizeMappings\" value=\"refresh\"/>\n          <property name=\"openjpa.jdbc.MappingDefaults\" value=\"DefaultMissingInfo=true\"/>\n-         <property name=\"openjpa.RuntimeUnenhancedClasses\" value=\"supported\"/>\n+         \n+         <property name=\"openjpa.RuntimeUnenhancedClasses\" value=\"unsupported\"/>\n+         <property name=\"openjpa.DynamicEnhancementAgent\"   value=\"false\"/>\n       </properties>\n    </persistence-unit>\n    \n@@ -96,7 +100,9 @@\n \t        <property name=\"openjpa.jdbc.SynchronizeMappings\" value=\"buildSchema\"/>\n             <property name=\"openjpa.QueryCompilationCache\" value=\"false\"/>\n             <property name=\"openjpa.jdbc.MappingDefaults\" value=\"DefaultMissingInfo=true\"/>\n-            <property name=\"openjpa.RuntimeUnenhancedClasses\" value=\"supported\"/>\n+            \n+            <property name=\"openjpa.RuntimeUnenhancedClasses\" value=\"unsupported\"/>\n+            <property name=\"openjpa.DynamicEnhancementAgent\"   value=\"false\"/>\n       \t</properties>\n    </persistence-unit>\n    \n@@ -120,6 +126,8 @@\n             <property name=\"openjpa.Connection2URL\" value=\"jdbc:derby:target/database/openjpa-slice1;create=true\"/>\n             <property name=\"openjpa.jdbc.SynchronizeMappings\" value=\"buildSchema\"/>\n             <property name=\"openjpa.jdbc.MappingDefaults\" value=\"DefaultMissingInfo=true\"/>\n+            <property name=\"openjpa.RuntimeUnenhancedClasses\" value=\"unsupported\"/>\n+            <property name=\"openjpa.DynamicEnhancementAgent\"   value=\"false\"/>\n         </properties>\n    </persistence-unit>\n    \n@@ -141,7 +149,8 @@\n          <property name=\"openjpa.Multithreaded\" value=\"false\"/>\n          <property name=\"openjpa.jdbc.SynchronizeMappings\" value=\"refresh\"/>\n          <property name=\"openjpa.jdbc.MappingDefaults\" value=\"DefaultMissingInfo=true\"/>\n-         <property name=\"openjpa.RuntimeUnenhancedClasses\" value=\"supported\"/>\n+            <property name=\"openjpa.RuntimeUnenhancedClasses\" value=\"unsupported\"/>\n+            <property name=\"openjpa.DynamicEnhancementAgent\"   value=\"false\"/>\n       </properties>\n    </persistence-unit>\n    \n@@ -166,7 +175,8 @@\n          <property name=\"openjpa.Log\" value=\"DefaultLevel=INFO, Enhance=TRACE, SQL=TRACE\"/>\n          <property name=\"openjpa.jdbc.SynchronizeMappings\" value=\"refresh\"/>\n          <property name=\"openjpa.jdbc.MappingDefaults\" value=\"DefaultMissingInfo=true\"/>\n-         <property name=\"openjpa.RuntimeUnenhancedClasses\" value=\"supported\"/>\n+            <property name=\"openjpa.RuntimeUnenhancedClasses\" value=\"unsupported\"/>\n+            <property name=\"openjpa.DynamicEnhancementAgent\"   value=\"false\"/>\n       </properties>\n    </persistence-unit>\n    "}]}

