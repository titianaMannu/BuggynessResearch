{"sha":"a875ef52b1a9262faadd8c43ccf3f102fcced68e","node_id":"MDY6Q29tbWl0MjA2MzY0OmE4NzVlZjUyYjFhOTI2MmZhYWRkOGM0M2NjZjNmMTAyZmNjZWQ2OGU=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-09-09T13:45:06Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-09-09T13:45:06Z"},"message":"Updates to r812712 by Fay to also exclude tests for MSSQL and Oracle DBs\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@812958 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6341437a0f7f9597dceb655375d47427374708e6","url":"https://api.github.com/repos/apache/openjpa/git/trees/6341437a0f7f9597dceb655375d47427374708e6"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a875ef52b1a9262faadd8c43ccf3f102fcced68e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a875ef52b1a9262faadd8c43ccf3f102fcced68e","html_url":"https://github.com/apache/openjpa/commit/a875ef52b1a9262faadd8c43ccf3f102fcced68e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a875ef52b1a9262faadd8c43ccf3f102fcced68e/comments","author":null,"committer":null,"parents":[{"sha":"435f66e27378cbb278fb64022a4e7158df521a5e","url":"https://api.github.com/repos/apache/openjpa/commits/435f66e27378cbb278fb64022a4e7158df521a5e","html_url":"https://github.com/apache/openjpa/commit/435f66e27378cbb278fb64022a4e7158df521a5e"}],"stats":{"total":73,"additions":34,"deletions":39},"files":[{"sha":"41be6ce2dde39971764cd16dd73bd3afac15c24f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestMultipleSchemaNames.java","status":"modified","additions":34,"deletions":39,"changes":73,"blob_url":"https://github.com/apache/openjpa/blob/a875ef52b1a9262faadd8c43ccf3f102fcced68e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestMultipleSchemaNames.java","raw_url":"https://github.com/apache/openjpa/raw/a875ef52b1a9262faadd8c43ccf3f102fcced68e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestMultipleSchemaNames.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestMultipleSchemaNames.java?ref=a875ef52b1a9262faadd8c43ccf3f102fcced68e","patch":"@@ -19,17 +19,17 @@\n package org.apache.openjpa.persistence.generationtype;\n \n import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n \n import javax.persistence.EntityManager;\n-import javax.persistence.EntityManagerFactory;\n import javax.persistence.PersistenceException;\n import javax.persistence.Query;\n \n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n import org.apache.openjpa.jdbc.sql.DBDictionary;\n+import org.apache.openjpa.jdbc.sql.MySQLDictionary;\n+import org.apache.openjpa.jdbc.sql.OracleDictionary;\n import org.apache.openjpa.jdbc.sql.PostgresDictionary;\n+import org.apache.openjpa.jdbc.sql.SQLServerDictionary;\n import org.apache.openjpa.persistence.OpenJPAEntityManager;\n import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\n@@ -38,16 +38,32 @@\n \n public class TestMultipleSchemaNames extends SingleEMFTestCase {\n \n-    static Boolean isMySQL = null;\n+    static DBDictionary dict = null;\n+    static Boolean skipTests = null;\n     \n     public void setUp() {\n+        // Need to skip tests on MySQL, Oracle and MS SQL Server\n+        // See createSchemas() comment at the bottom\n+        if ((dict == null) || (skipTests == null)) {\n+            OpenJPAEntityManagerFactorySPI emf = createEMF();\n+            OpenJPAEntityManagerSPI em = emf.createEntityManager();\n+            JDBCConfiguration conf = (JDBCConfiguration) em.getConfiguration();\n+            dict = conf.getDBDictionaryInstance();\n+            \n+            if ((dict instanceof MySQLDictionary) ||\n+                    (dict instanceof OracleDictionary) ||\n+                    (dict instanceof SQLServerDictionary)) {\n+                skipTests = Boolean.TRUE;\n+            } else {\n+                skipTests = Boolean.FALSE;\n+            }\n+            \n+            closeEMF(emf);\n+        }\n         \n-        // Exclude mysql\n-        if (isMySQL == null)\n-            isMySQL = isMySQL();\n-        if (isMySQL)\n+        if (skipTests) {\n             return;\n-        \n+        }\n \n         // Create schemas when database requires this and we are about\n         // to execute the first test.\n@@ -142,11 +158,10 @@ public void setUp() {\n \n         em.getTransaction().commit();\n         em.close();\n-\n     }\n \n     public void testGeneratedAUTO() {\n-        if (isMySQL)\n+        if (skipTests)\n             return;\n \n         EntityManager em = emf.createEntityManager();\n@@ -226,7 +241,7 @@ public void testGeneratedAUTO() {\n     }\n \n     public void testGeneratedTABLE() {\n-        if (isMySQL)\n+        if (skipTests)\n             return;\n \n         EntityManager em = emf.createEntityManager();\n@@ -374,7 +389,7 @@ public void testGeneratedTABLE() {\n     }\n     \n     public void testGeneratedIDENTITY() {\n-        if (isMySQL)\n+        if (skipTests)\n             return;\n \n         EntityManager em = emf.createEntityManager();\n@@ -419,42 +434,21 @@ public void testGeneratedIDENTITY() {\n         em.close();\n     }\n \n-    private Boolean isMySQL() {\n-        EntityManagerFactory emf = (EntityManagerFactory)createEMF();\n-        \n-        Map<String, Object> props = emf.getProperties();\n-        Set<String> keys = props.keySet();\n-        for (String key : keys) {\n-            String platform = null;\n-            if (key.equals(\"Platform\")) {\n-                platform = (String) props.get(key);\n-                if (platform.equals(\"OpenJPA JDBC Edition: MySQL Database\"))\n-                    return Boolean.TRUE;\n-                return Boolean.FALSE;\n-            }\n-        }\n-               \n-        return Boolean.FALSE;\n-    }    \n-    \n-    \n+\n     /**\n      * Create necessary schemas if running on PostgreSQL as it does\n      * not create them automatically.\n-     * Oracle and MySQL also don't create schemas automatically but\n+     * Oracle, MySQL and MSSQL also don't create schemas automatically but\n      * we give up as they treat schemas in special ways.\n      */\n     private void createSchemas() {\n-        OpenJPAEntityManagerFactorySPI emf = createEMF();\n-        OpenJPAEntityManagerSPI em = emf.createEntityManager();\n-        DBDictionary dict = ((JDBCConfiguration) em.getConfiguration())\n-            .getDBDictionaryInstance();\n-\n+        \n         if (!(dict instanceof PostgresDictionary)) {\n-            closeEMF(emf);\n             return;\n         }\n         \n+        OpenJPAEntityManagerFactorySPI emf = createEMF();\n+        OpenJPAEntityManagerSPI em = emf.createEntityManager();\n         String[] schemas =\n             { \"SCHEMA1\", \"SCHEMA2\", \"SCHEMA3\", \"SCHEMA3G\", \"SCHEMA4G\" };\n         for (String schema : schemas) {\n@@ -471,3 +465,4 @@ private void createSchemas() {\n     }\n \n } // end of TestMultipleSchemaNames\n+"}]}

