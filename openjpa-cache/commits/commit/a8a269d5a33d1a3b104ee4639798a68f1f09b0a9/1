{"sha":"a8a269d5a33d1a3b104ee4639798a68f1f09b0a9","node_id":"MDY6Q29tbWl0MjA2MzY0OmE4YTI2OWQ1YTMzZDFhM2IxMDRlZTQ2Mzk3OThhNjhmMWYwOWIwYTk=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-08-05T17:38:17Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-08-05T17:38:17Z"},"message":"OPENJPA-628. Revert changes from revision 610922 and add testcase.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@682822 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7834b67bdd066e5e9197aa7dd300f2be716b0b09","url":"https://api.github.com/repos/apache/openjpa/git/trees/7834b67bdd066e5e9197aa7dd300f2be716b0b09"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a8a269d5a33d1a3b104ee4639798a68f1f09b0a9","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a8a269d5a33d1a3b104ee4639798a68f1f09b0a9","html_url":"https://github.com/apache/openjpa/commit/a8a269d5a33d1a3b104ee4639798a68f1f09b0a9","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a8a269d5a33d1a3b104ee4639798a68f1f09b0a9/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"0ac1a02129a0d9fbd8bfd52482b16fca23b82ac6","url":"https://api.github.com/repos/apache/openjpa/commits/0ac1a02129a0d9fbd8bfd52482b16fca23b82ac6","html_url":"https://github.com/apache/openjpa/commit/0ac1a02129a0d9fbd8bfd52482b16fca23b82ac6"}],"stats":{"total":154,"additions":149,"deletions":5},"files":[{"sha":"b5f54cb251ee37b598e57d4f2c6118dff2655df7","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyCollections.java","status":"modified","additions":1,"deletions":5,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/a8a269d5a33d1a3b104ee4639798a68f1f09b0a9/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyCollections.java","raw_url":"https://github.com/apache/openjpa/raw/a8a269d5a33d1a3b104ee4639798a68f1f09b0a9/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyCollections.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyCollections.java?ref=a8a269d5a33d1a3b104ee4639798a68f1f09b0a9","patch":"@@ -38,11 +38,7 @@\n      */\n     public static void beforeAdd(ProxyCollection coll, int index, Object value){\n         assertAllowedType(value, coll.getElementType());\n-        if (index == coll.size())\n-            // optimize for adding to the end\n-            beforeAdd(coll, value);\n-        else\n-            dirty(coll, true);\n+        dirty(coll, true);\n     }\n \n     /**"},{"sha":"2d2211d0eb98b0010282bcefaf7374f263ee0232","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/recursive/Node.java","status":"added","additions":67,"deletions":0,"changes":67,"blob_url":"https://github.com/apache/openjpa/blob/a8a269d5a33d1a3b104ee4639798a68f1f09b0a9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/recursive/Node.java","raw_url":"https://github.com/apache/openjpa/raw/a8a269d5a33d1a3b104ee4639798a68f1f09b0a9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/recursive/Node.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/recursive/Node.java?ref=a8a269d5a33d1a3b104ee4639798a68f1f09b0a9","patch":"@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.recursive;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Version;\n+\n+@Entity\n+public class Node {\n+\n+    @Id\n+    @GeneratedValue\n+    private int id;\n+    @Version\n+    private int version;\n+\n+    @OneToMany\n+    private List<Node> nodes = new ArrayList<Node>();\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public int getVersion() {\n+        return version;\n+    }\n+\n+    public void setVersion(int version) {\n+        this.version = version;\n+    }\n+\n+    public List<Node> getNodes() {\n+        return nodes;\n+    }\n+\n+    public void setNodes(List<Node> nodes) {\n+        this.nodes = nodes;\n+    }\n+\n+}\n\\ No newline at end of file"},{"sha":"4db37279a96e69ed0a7cf88706d11acc6ee74945","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/recursive/TestRecursiveRelationships.java","status":"added","additions":81,"deletions":0,"changes":81,"blob_url":"https://github.com/apache/openjpa/blob/a8a269d5a33d1a3b104ee4639798a68f1f09b0a9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/recursive/TestRecursiveRelationships.java","raw_url":"https://github.com/apache/openjpa/raw/a8a269d5a33d1a3b104ee4639798a68f1f09b0a9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/recursive/TestRecursiveRelationships.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/recursive/TestRecursiveRelationships.java?ref=a8a269d5a33d1a3b104ee4639798a68f1f09b0a9","patch":"@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.recursive;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+public class TestRecursiveRelationships extends SingleEMFTestCase {\n+    private int _l1Nodes = 3;\n+    private int _l2Nodes = 3;\n+\n+    public void setUp() {\n+        setUp(Node.class);\n+    }\n+\n+    public void testRecursiveNodes() {\n+        EntityManager em = emf.createEntityManager();\n+\n+        // set up initial tree\n+        em.getTransaction().begin();\n+        Node root = new Node();\n+        for (int i = 0; i < _l1Nodes; i++) {\n+            Node n1 = new Node();\n+            root.getNodes().add(n1);\n+            em.persist(n1);\n+        }\n+        em.persist(root);\n+        em.getTransaction().commit();\n+\n+        // clear PC\n+        em.refresh(root);\n+        int rootId = root.getId();\n+        em.clear();\n+        em.close();\n+        em = emf.createEntityManager();\n+\n+        // add new nodes\n+        em.getTransaction().begin();\n+        root = em.getReference(Node.class, rootId);\n+        assertNotNull(root);\n+        assertNotNull(root.getNodes());\n+        for (Node n : root.getNodes()) {\n+            for (int j = 0; j < _l2Nodes; j++) {\n+                Node n2 = new Node();\n+                n.getNodes().add(n.getNodes().size(), n2);\n+                em.persist(n2);\n+            }\n+        }\n+        em.getTransaction().commit();\n+        em.clear();\n+        em.close();\n+        em = emf.createEntityManager();\n+\n+        // ensure count is correct.\n+        root = em.getReference(Node.class, rootId);\n+        assertNotNull(root);\n+        assertNotNull(root.getNodes());\n+        assertEquals(_l1Nodes, root.getNodes().size());\n+        for (Node n : root.getNodes()) {\n+            assertEquals(_l2Nodes, n.getNodes().size());\n+        }\n+        em.close();\n+    }\n+}"}]}

