{"sha":"a8e0dc180e8b360c4e72eca7c131b2826eceaedd","node_id":"MDY6Q29tbWl0MjA2MzY0OmE4ZTBkYzE4MGU4YjM2MGM0ZTcyZWNhN2MxMzFiMjgyNmVjZWFlZGQ=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-06-17T20:07:12Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-06-17T20:07:12Z"},"message":"OPENJPA-458: Amplified SQL Exception processing. Introduced a new sql-error-state-codes.xml to specify database specific error code for different types of Store exceptions. This helps to narrow SQL exception to a specific errors which bubble up to user application.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@668814 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"59febb1a561500748aaf26f623b0e6bbb71875a2","url":"https://api.github.com/repos/apache/openjpa/git/trees/59febb1a561500748aaf26f623b0e6bbb71875a2"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a8e0dc180e8b360c4e72eca7c131b2826eceaedd","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a8e0dc180e8b360c4e72eca7c131b2826eceaedd","html_url":"https://github.com/apache/openjpa/commit/a8e0dc180e8b360c4e72eca7c131b2826eceaedd","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a8e0dc180e8b360c4e72eca7c131b2826eceaedd/comments","author":null,"committer":null,"parents":[{"sha":"e00c6e8f80434fd07b1dd438780cb3d964303392","url":"https://api.github.com/repos/apache/openjpa/commits/e00c6e8f80434fd07b1dd438780cb3d964303392","html_url":"https://github.com/apache/openjpa/commit/e00c6e8f80434fd07b1dd438780cb3d964303392"}],"stats":{"total":648,"additions":532,"deletions":116},"files":[{"sha":"28da62b5a5ea81ad8ba015fb900c83df3b4126ab","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","status":"modified","additions":64,"deletions":32,"changes":96,"blob_url":"https://github.com/apache/openjpa/blob/a8e0dc180e8b360c4e72eca7c131b2826eceaedd/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/a8e0dc180e8b360c4e72eca7c131b2826eceaedd/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java?ref=a8e0dc180e8b360c4e72eca7c131b2826eceaedd","patch":"@@ -53,6 +53,7 @@\n import java.util.Collection;\n import java.util.Collections;\n import java.util.Date;\n+import java.util.HashMap;\n import java.util.HashSet;\n import java.util.Iterator;\n import java.util.LinkedHashSet;\n@@ -101,7 +102,11 @@\n import org.apache.openjpa.util.GeneralException;\n import org.apache.openjpa.util.InternalException;\n import org.apache.openjpa.util.InvalidStateException;\n+import org.apache.openjpa.util.LockException;\n+import org.apache.openjpa.util.ObjectExistsException;\n+import org.apache.openjpa.util.ObjectNotFoundException;\n import org.apache.openjpa.util.OpenJPAException;\n+import org.apache.openjpa.util.OptimisticException;\n import org.apache.openjpa.util.ReferentialIntegrityException;\n import org.apache.openjpa.util.Serialization;\n import org.apache.openjpa.util.StoreException;\n@@ -158,16 +163,6 @@\n     private static final String ZERO_TIMESTAMP_STR =\n         \"'\" + new Timestamp(0) + \"'\";\n \n-    public static final List EMPTY_STRING_LIST = Arrays.asList(new String[]{});\n-    public static final List[] SQL_STATE_CODES = \n-    \t{EMPTY_STRING_LIST,                     // 0: Default\n-    \t Arrays.asList(new String[]{\"41000\"}),  // 1: LOCK\n-    \t EMPTY_STRING_LIST,                     // 2: OBJECT_NOT_FOUND\n-    \t EMPTY_STRING_LIST,                     // 3: OPTIMISTIC\n-    \t Arrays.asList(new String[]{\"23000\"}),  // 4: REFERENTIAL_INTEGRITY\n-    \t EMPTY_STRING_LIST                      // 5: OBJECT_EXISTS\n-    \t}; \n-                                              \n     private static final Localizer _loc = Localizer.forPackage\n         (DBDictionary.class);\n \n@@ -364,6 +359,9 @@\n     // any positive number = batch limit\n     public int batchLimit = NO_BATCH;\n     \n+    public final Map<Integer,Set<String>> sqlStateCodes = \n+    \tnew HashMap<Integer, Set<String>>();\n+                                              \n     public DBDictionary() {\n         fixedSizeTypeNameSet.addAll(Arrays.asList(new String[]{\n             \"BIGINT\", \"BIT\", \"BLOB\", \"CLOB\", \"DATE\", \"DECIMAL\", \"DISTINCT\",\n@@ -4109,8 +4107,32 @@ public void endConfiguration() {\n         if (selectWords != null)\n             selectWordSet.addAll(Arrays.asList(Strings.split(selectWords\n                     .toUpperCase(), \",\", 0)));\n+        \n+        // initialize the error codes\n+        SQLErrorCodeReader codeReader = new SQLErrorCodeReader();\n+        String rsrc = \"sql-error-state-codes.xml\";\n+        InputStream stream = getClass().getResourceAsStream(rsrc);\n+        String dictionaryClassName = getClass().getName();\n+        if (stream == null) { // User supplied dictionary but no error codes xml\n+        \tstream = DBDictionary.class.getResourceAsStream(rsrc); // use default\n+        \tdictionaryClassName = getClass().getSuperclass().getName();\n+        }\n+        codeReader.parse(stream, dictionaryClassName, this);\n     }\n-\n+    \n+    public void addErrorCode(int errorType, String errorCode) {\n+    \tif (errorCode == null || errorCode.trim().length() == 0)\n+    \t\treturn;\n+\t\tSet<String> codes = sqlStateCodes.get(errorType);\n+    \tif (codes == null) {\n+    \t\tcodes = new HashSet<String>();\n+    \t\tcodes.add(errorCode.trim());\n+    \t\tsqlStateCodes.put(errorType, codes);\n+    \t} else {\n+    \t\tcodes.add(errorCode.trim());\n+    \t}\n+    }\n+    \n     //////////////////////////////////////\n     // ConnectionDecorator implementation\n     //////////////////////////////////////\n@@ -4119,7 +4141,7 @@ public void endConfiguration() {\n      * Decorate the given connection if needed. Some databases require special\n      * handling for JDBC bugs. This implementation issues any\n      * {@link #initializationSQL} that has been set for the dictionary but\n-     * does not decoreate the connection.\n+     * does not decorate the connection.\n      */\n     public Connection decorate(Connection conn)\n         throws SQLException {\n@@ -4170,7 +4192,7 @@ public void handleWarning(SQLWarning warning)\n     public OpenJPAException newStoreException(String msg, SQLException[] causes,\n         Object failed) {\n     \tif (causes != null && causes.length > 0) {\n-    \t\tOpenJPAException ret = SQLExceptions.narrow(msg, causes[0], this);\n+    \t\tOpenJPAException ret = narrow(msg, causes[0]);\n     \t\tret.setFailedObject(failed).setNestedThrowables(causes);\n     \t\treturn ret;\n     \t}\n@@ -4179,26 +4201,36 @@ public OpenJPAException newStoreException(String msg, SQLException[] causes,\n     }\n     \n     /**\n-     * Gets the list of String, each represents an error that can help \n-     * to narrow down a SQL exception to specific type of StoreException.<br>\n-     * For example, error code <code>\"23000\"</code> represents referential\n-     * integrity violation and hence can be narrowed down to \n-     * {@link ReferentialIntegrityException} rather than more general\n-     * {@link StoreException}.<br>\n-     * JDBC Drivers are not uniform in return values of SQLState for the same\n-     * error and hence each database specific Dictionary can specialize.<br>\n-     * \n-     * \n-     * @return an <em>unmodifiable</em> list of Strings representing supposedly \n-     * uniform SQL States for a given type of StoreException. \n-     * Default behavior is to return an empty list.\n-     */\n-    public List/*<String>*/ getSQLStates(int exceptionType) {\n-    \tif (exceptionType>=0 && exceptionType<SQL_STATE_CODES.length)\n-    \t\treturn SQL_STATE_CODES[exceptionType];\n-    \treturn EMPTY_STRING_LIST;\n+     * Gets the subtype of StoreException by matching the given SQLException's\n+     * error state code to the list of error codes supplied by the dictionary.\n+     * Returns -1 if no matching code can be found.\n+     */\n+    OpenJPAException narrow(String msg, SQLException ex) {\n+    \tString errorState = ex.getSQLState();\n+    \tint errorType = StoreException.GENERAL;\n+    \tfor (Integer type : sqlStateCodes.keySet()) {\n+    \t\tSet<String> erroStates = sqlStateCodes.get(type);\n+    \t\tif (erroStates != null && erroStates.contains(errorState)) {\n+    \t\t\terrorType = type;\n+    \t\t\tbreak;\n+    \t\t}\n+    \t}\n+    \tswitch (errorType) {\n+\t    \tcase StoreException.LOCK: \n+\t            return new LockException(msg);\n+\t    \tcase StoreException.OBJECT_EXISTS:\n+\t            return new ObjectExistsException(msg);\n+\t    \tcase StoreException.OBJECT_NOT_FOUND:\n+\t            return new ObjectNotFoundException(msg);\n+\t    \tcase StoreException.OPTIMISTIC:\n+\t            return new OptimisticException(msg);\n+\t    \tcase StoreException.REFERENTIAL_INTEGRITY: \n+\t            return new ReferentialIntegrityException(msg);\n+\t        default:\n+\t            return new StoreException(msg);\n+        }\n     }\n-\n+    \n     /**\n      * Closes the specified {@link DataSource} and releases any\n      * resources associated with it."},{"sha":"8453fe020408c2453acf6046648eb066572ab5c7","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DerbyDictionary.java","status":"modified","additions":0,"deletions":22,"changes":22,"blob_url":"https://github.com/apache/openjpa/blob/a8e0dc180e8b360c4e72eca7c131b2826eceaedd/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DerbyDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/a8e0dc180e8b360c4e72eca7c131b2826eceaedd/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DerbyDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DerbyDictionary.java?ref=a8e0dc180e8b360c4e72eca7c131b2826eceaedd","patch":"@@ -100,26 +100,4 @@ public void closeDataSource(DataSource dataSource) {\n             }\n         }\n     }\n-    \n-    /**\n-     * Adds extra SQLState code that Derby JDBC Driver uses. In JDBC 4.0,\n-     * SQLState will follow either XOPEN or SQL 2003 convention. A compliant\n-     * driver can be queries via DatabaseMetaData.getSQLStateType() to detect\n-     * the convention type.<br>\n-     * This method is overwritten to highlight that a) the SQL State is ideally\n-     * uniform across JDBC Drivers but not practically and b) the overwritten\n-     * method must crate a new list to return as the super classes list is\n-     * unmodifable.\n-     */\n-    public List getSQLStates(int exceptionType) {\n-    \tList original = super.getSQLStates(exceptionType);\n-    \tif (exceptionType == StoreException.LOCK) {\n-    \t\t// Can not add new codes to unmodifable list of the super class\n-    \t\tList newStates = new ArrayList(original);\n-    \t\tnewStates.add(\"40XL1\");\n-    \t\treturn newStates;\n-    \t}\n-    \treturn original;\n-    }\n-    \n }"},{"sha":"dec3e23f98da8fff71672858cfc7619949a7e27a","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLErrorCodeReader.java","status":"added","additions":136,"deletions":0,"changes":136,"blob_url":"https://github.com/apache/openjpa/blob/a8e0dc180e8b360c4e72eca7c131b2826eceaedd/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLErrorCodeReader.java","raw_url":"https://github.com/apache/openjpa/raw/a8e0dc180e8b360c4e72eca7c131b2826eceaedd/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLErrorCodeReader.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLErrorCodeReader.java?ref=a8e0dc180e8b360c4e72eca7c131b2826eceaedd","patch":"@@ -0,0 +1,136 @@\n+package org.apache.openjpa.jdbc.sql;\r\n+\r\n+import java.io.IOException;\r\n+import java.io.InputStream;\r\n+import java.util.ArrayList;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+\r\n+import javax.xml.parsers.DocumentBuilder;\r\n+\r\n+import org.apache.commons.lang.StringUtils;\r\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\r\n+import org.apache.openjpa.lib.log.Log;\r\n+import org.apache.openjpa.lib.util.Localizer;\r\n+import org.apache.openjpa.lib.xml.XMLFactory;\r\n+import org.apache.openjpa.util.StoreException;\r\n+import org.w3c.dom.Document;\r\n+import org.w3c.dom.Element;\r\n+import org.w3c.dom.NamedNodeMap;\r\n+import org.w3c.dom.Node;\r\n+import org.w3c.dom.NodeList;\r\n+\r\n+/**\r\n+ * Parses XML content of SQL Error State codes to populate errro codes for\r\n+ * a given Database Dictionary.\r\n+ * \r\n+ * @author Pinaki Poddar\r\n+ * \r\n+ */\r\n+public class SQLErrorCodeReader {\r\n+\tprivate Log log = null;\r\n+\tpublic static final String ERROR_CODE_DELIMITER = \",\";\r\n+\tpublic static final Map<String, Integer> storeErrorTypes = \r\n+\t\tnew HashMap<String, Integer>();\r\n+\tstatic {\r\n+\t\tstoreErrorTypes.put(\"lock\", StoreException.LOCK);\r\n+\t\tstoreErrorTypes.put(\"object-exists\", StoreException.OBJECT_EXISTS);\r\n+\t\tstoreErrorTypes\r\n+\t\t\t\t.put(\"object-not-found\", StoreException.OBJECT_NOT_FOUND);\r\n+\t\tstoreErrorTypes.put(\"optimistic\", StoreException.OPTIMISTIC);\r\n+\t\tstoreErrorTypes.put(\"referential-integrity\",\r\n+\t\t\t\tStoreException.REFERENTIAL_INTEGRITY);\r\n+\r\n+\t}\r\n+\t\r\n+\tprivate static final Localizer _loc = \r\n+\t\tLocalizer.forPackage(SQLErrorCodeReader.class);\r\n+\t\r\n+\tpublic List<String> getDictionaries(InputStream in) {\r\n+\t\tList<String> result = new ArrayList<String>();\r\n+\t\tDocumentBuilder builder = XMLFactory.getDOMParser(false, false);\r\n+\t\ttry {\r\n+\t\t\tDocument doc = builder.parse(in);\r\n+\t\t\tElement root = doc.getDocumentElement();\r\n+\t\t\tNodeList nodes = root.getElementsByTagName(\"dictionary\");\r\n+\t\t\tfor (int i = 0; i < nodes.getLength(); i++) {\r\n+\t\t\t\tNode node = nodes.item(i);\r\n+\t\t\t\tNamedNodeMap attrs = node.getAttributes();\r\n+\t\t\t\tNode dictionary = attrs.getNamedItem(\"class\");\r\n+\t\t\t\tif (dictionary != null) {\r\n+\t\t\t\t   result.add(dictionary.getNodeValue());\r\n+\t\t\t\t}\r\n+\t\t\t}\r\n+\t\t} catch (Throwable e) {\r\n+\t\t\tif (log.isWarnEnabled()) {\r\n+\t\t\t\tlog.error(_loc.get(\"error-code-parse-error\"));\r\n+\t\t\t}\r\n+\t\t} finally {\r\n+\t\t\ttry {\r\n+\t\t\t\tin.close();\r\n+\t\t\t} catch (IOException e) {\r\n+\t\t\t\t// ignore\r\n+\t\t\t}\r\n+\t\t}\r\n+\t\treturn result;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * Parses given stream of XML content for error codes of the given database\r\n+\t * dictionary name. Populates the given dictionary with the error codes.\r\n+\t * \r\n+\t */\r\n+\tpublic void parse(InputStream in, String dictName, DBDictionary dict) {\r\n+\t\tif (in == null || dict == null)\r\n+\t\t\treturn;\r\n+\t\tlog = dict.conf.getLog(JDBCConfiguration.LOG_JDBC);\r\n+\t\tDocumentBuilder builder = XMLFactory.getDOMParser(false, false);\r\n+\t\ttry {\r\n+\t\t\tDocument doc = builder.parse(in);\r\n+\t\t\tElement root = doc.getDocumentElement();\r\n+\t\t\tNodeList nodes = root.getElementsByTagName(\"dictionary\");\r\n+\t\t\tfor (int i = 0; i < nodes.getLength(); i++) {\r\n+\t\t\t\tNode node = nodes.item(i);\r\n+\t\t\t\tNamedNodeMap attrs = node.getAttributes();\r\n+\t\t\t\tNode dictionary = attrs.getNamedItem(\"class\");\r\n+\t\t\t\tif (dictionary != null \r\n+\t\t\t\t && dictionary.getNodeValue().equals(dictName)) {\r\n+\t\t\t\t\treadErrorCodes(node, dict);\r\n+\t\t\t\t}\r\n+\t\t\t}\r\n+\t\t} catch (Throwable e) {\r\n+\t\t\tif (log.isWarnEnabled()) {\r\n+\t\t\t\tlog.error(_loc.get(\"error-code-parse-error\"));\r\n+\t\t\t}\r\n+\t\t} finally {\r\n+\t\t\ttry {\r\n+\t\t\t\tin.close();\r\n+\t\t\t} catch (IOException e) {\r\n+\t\t\t\t// ignore\r\n+\t\t\t}\r\n+\t\t}\r\n+\t}\r\n+\r\n+\tstatic void readErrorCodes(Node node, DBDictionary dict) {\r\n+\t\tNodeList children = node.getChildNodes();\r\n+\t\tfor (int i = 0; i < children.getLength(); i++) {\r\n+\t\t\tNode child = children.item(i);\r\n+\t\t\tshort nodeType = child.getNodeType();\r\n+\t\t\tif (nodeType == Node.ELEMENT_NODE) {\r\n+\t\t\t\tString errorType = child.getNodeName();\r\n+\t\t\t\tif (storeErrorTypes.containsKey(errorType)) {\r\n+\t\t\t\t\tString errorCodes = child.getTextContent();\r\n+\t\t\t\t\tif (!StringUtils.isEmpty(errorCodes)) {\r\n+\t\t\t\t\t\tString[] codes = errorCodes.split(ERROR_CODE_DELIMITER);\r\n+\t\t\t\t\t\tfor (String code : codes) {\r\n+\t\t\t\t\t\t\tdict.addErrorCode(storeErrorTypes.get(errorType),\r\n+\t\t\t\t\t\t\t\t\tcode.trim());\r\n+\t\t\t\t\t\t}\r\n+\t\t\t\t\t}\r\n+\t\t\t\t}\r\n+\t\t\t}\r\n+\t\t}\r\n+\t}\r\n+}\r"},{"sha":"cfd6934e850041581b4003afc13f5c7e22e846a8","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLExceptions.java","status":"modified","additions":0,"deletions":28,"changes":28,"blob_url":"https://github.com/apache/openjpa/blob/a8e0dc180e8b360c4e72eca7c131b2826eceaedd/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLExceptions.java","raw_url":"https://github.com/apache/openjpa/raw/a8e0dc180e8b360c4e72eca7c131b2826eceaedd/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLExceptions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLExceptions.java?ref=a8e0dc180e8b360c4e72eca7c131b2826eceaedd","patch":"@@ -117,32 +117,4 @@ public static OpenJPAException getStore(String msg, SQLException se,\n         }\n         return (SQLException[]) errs.toArray(new SQLException[errs.size()]);\n     }\n-    \n-    /**\n-     * Narrows the given SQLException to a specific type of \n-     * {@link StoreException#getSubtype() StoreException} by analyzing the\n-     * SQLState code supplied by SQLException. Each database-specific \n-     * {@link DBDictionary dictionary} can supply a set of error codes that will\n-     * map to a specific specific type of StoreException via \n-     * {@link DBDictionary#getSQLStates(int) getSQLStates()} method.\n-     * The default behavior is to return generic {@link StoreException \n-     * StoreException}.\n-     */\n-    public static OpenJPAException narrow(String msg, SQLException se, \n-    \t\tDBDictionary dict) {\n-        String e = se.getSQLState();\n-        if (dict.getSQLStates(StoreException.LOCK).contains(e)) \n-            return new LockException(msg);\n-        else if (dict.getSQLStates(StoreException.OBJECT_EXISTS).contains(e))\n-            return new ObjectExistsException(msg);\n-        else if (dict.getSQLStates(StoreException.OBJECT_NOT_FOUND).contains(e))\n-            return new ObjectNotFoundException(msg);\n-        else if (dict.getSQLStates(StoreException.OPTIMISTIC).contains(e))\n-            return new OptimisticException(msg);\n-        else if (dict.getSQLStates(StoreException.REFERENTIAL_INTEGRITY)\n-        \t\t.contains(e)) \n-            return new ReferentialIntegrityException(msg);\n-        else\n-            return new StoreException(msg);\n-    }\n }"},{"sha":"5a532772390880a8e0e9252db7efd7004b08724c","filename":"openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/sql-error-state-codes.xml","status":"added","additions":146,"deletions":0,"changes":146,"blob_url":"https://github.com/apache/openjpa/blob/a8e0dc180e8b360c4e72eca7c131b2826eceaedd/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/sql-error-state-codes.xml","raw_url":"https://github.com/apache/openjpa/raw/a8e0dc180e8b360c4e72eca7c131b2826eceaedd/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/sql-error-state-codes.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/sql-error-state-codes.xml?ref=a8e0dc180e8b360c4e72eca7c131b2826eceaedd","patch":"@@ -0,0 +1,146 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n+<!--\r\n+ Licensed to the Apache Software Foundation (ASF) under one\r\n+ or more contributor license agreements.  See the NOTICE file\r\n+ distributed with this work for additional information\r\n+ regarding copyright ownership.  The ASF licenses this file\r\n+ to you under the Apache License, Version 2.0 (the\r\n+ \"License\"); you may not use this file except in compliance\r\n+ with the License.  You may obtain a copy of the License at\r\n+ \r\n+ http://www.apache.org/licenses/LICENSE-2.0\r\n+ \r\n+ Unless required by applicable law or agreed to in writing,\r\n+ software distributed under the License is distributed on an\r\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ KIND, either express or implied.  See the License for the\r\n+ specific language governing permissions and limitations\r\n+ under the License.   \r\n+-->\r\n+<!-- ======================================================================= -->\r\n+<!-- Lists SQL Error State codes for specific type of faults per database    -->\r\n+<!-- dictionary.                                                             -->\r\n+<!-- SQL Exceptions raised by JDBC should carry standard error state code    -->\r\n+<!-- but they hardly do. Hence, the error state codes for specific type of   -->\r\n+<!-- database error can be listed here. These codes help to narrow down the  -->\r\n+<!-- cause of failure at JDBC layer and bubbles up as more intelligible      -->\r\n+<!-- exception to the application.                                           -->\r\n+<!-- ======================================================================= -->\r\n+<sql-state-codes>\r\n+\r\n+\t<dictionary class=\"org.apache.openjpa.jdbc.sql.DB2Dictionary\">\r\n+\t\t<lock>-911,-913</lock>\r\n+\t\t<referential-integrity>-407,-530,-531,-532,-543,-544,-545,-603,-667,-803</referential-integrity>\r\n+\t\t<object-exists></object-exists>\r\n+\t\t<object-not-found></object-not-found>\r\n+\t\t<optimistic></optimistic>\r\n+\t</dictionary>\r\n+\t\r\n+\t<dictionary class=\"org.apache.openjpa.jdbc.sql.DerbyDictionary\">\r\n+\t\t<lock>40001</lock>\r\n+\t\t<referential-integrity>22001,22005,23502,23503,23513,X0Y32</referential-integrity>\r\n+\t\t<object-exists>23505</object-exists>\r\n+\t\t<object-not-found></object-not-found>\r\n+\t\t<optimistic>40XL1,40001</optimistic>\r\n+\t</dictionary>\r\n+\t\r\n+\t<dictionary class=\"org.apache.openjpa.jdbc.sql.SQLServerDictionary\">\r\n+\t\t<lock>1205</lock>\r\n+\t\t<referential-integrity>544,2601,2627,8114,8115</referential-integrity>\r\n+\t\t<optimistic>1205</optimistic>\r\n+\t</dictionary>\r\n+\t\r\n+\t<dictionary class=\"org.apache.openjpa.jdbc.sql.SybaseDictionary\">\r\n+\t\t<lock>1205</lock>\r\n+\t\t<referential-integrity>423,511,515,530,547,2601,2615,2714</referential-integrity>\r\n+\t\t<object-exists></object-exists>\r\n+\t\t<object-not-found></object-not-found>\r\n+\t\t<optimistic>1205</optimistic>\r\n+\t</dictionary>\r\n+\t\r\n+\t<dictionary class=\"org.apache.openjpa.jdbc.sql.AccessDictionary\">\r\n+\t\t<lock>40001</lock>\r\n+\t\t<referential-integrity>22001,22005,23502,23503,23513,X0Y32</referential-integrity>\r\n+\t\t<object-exists>23505,456c</object-exists>\r\n+\t\t<object-not-found></object-not-found>\r\n+\t\t<optimistic>40XL1,40001</optimistic>\r\n+\t</dictionary>\r\n+\t\r\n+\t<dictionary class=\"org.apache.openjpa.jdbc.sql.CacheDictionary\">\r\n+\t\t<lock>40001</lock>\r\n+\t\t<referential-integrity>22001,22005,23502,23503,23513,X0Y32</referential-integrity>\r\n+\t\t<object-exists>23505,456c</object-exists>\r\n+\t\t<object-not-found></object-not-found>\r\n+\t\t<optimistic>40XL1,40001</optimistic>\r\n+\t</dictionary>\r\n+\t\r\n+\t<dictionary class=\"org.apache.openjpa.jdbc.sql.EmpressDictionary\">\r\n+\t\t<lock>40001</lock>\r\n+\t\t<referential-integrity>22001,22005,23502,23503,23513,X0Y32</referential-integrity>\r\n+\t\t<object-exists>23505,456c</object-exists>\r\n+\t\t<object-not-found></object-not-found>\r\n+\t\t<optimistic>40XL1,40001</optimistic>\r\n+\t</dictionary>\r\n+\t\r\n+\t<dictionary class=\"org.apache.openjpa.jdbc.sql.FoxProDictionary\">\r\n+\t\t<lock>40001</lock>\r\n+\t\t<referential-integrity>22001,22005,23502,23503,23513,X0Y32</referential-integrity>\r\n+\t\t<object-exists>23505,456c</object-exists>\r\n+\t\t<object-not-found></object-not-found>\r\n+\t\t<optimistic>40XL1,40001</optimistic>\r\n+\t</dictionary>\r\n+\t\r\n+\t<dictionary class=\"org.apache.openjpa.jdbc.sql.H2Dictionary\">\r\n+\t\t<referential-integrity>22003,22012,22025,23000,23001</referential-integrity>\r\n+\t</dictionary>\r\n+\t\r\n+\t<dictionary class=\"org.apache.openjpa.jdbc.sql.HSQLDictionary\">\r\n+\t\t<referential-integrity>-9</referential-integrity>\r\n+\t</dictionary>\r\n+\t\r\n+\t<dictionary class=\"org.apache.openjpa.jdbc.sql.InformixDictionary\">\r\n+\t\t<referential-integrity>-239,-268,-692,-11030</referential-integrity>\r\n+\t</dictionary>\r\n+\t\r\n+\t<dictionary class=\"org.apache.openjpa.jdbc.sql.InterbaseDictionary\">\r\n+\t</dictionary>\r\n+\t\r\n+\t<dictionary class=\"org.apache.openjpa.jdbc.sql.FirebirdDictionary\">\r\n+\t</dictionary>\r\n+\t\r\n+\t<dictionary class=\"org.apache.openjpa.jdbc.sql.JDataStoreDictionary\">\r\n+\t</dictionary>\r\n+\t\r\n+\t<dictionary class=\"org.apache.openjpa.jdbc.sql.MySQLDictionary\">\r\n+\t\t<lock>1213</lock>\r\n+\t\t<referential-integrity>630,839,840,893,1062,1169,1215,1216,1217,1451,1452,1557</referential-integrity>\r\n+\t\t<object-exists>23000</object-exists>\r\n+\t\t<object-not-found></object-not-found>\r\n+\t\t<optimistic>41000,1205,1213</optimistic>\r\n+\t</dictionary>\r\n+\t\r\n+\t<dictionary class=\"org.apache.openjpa.jdbc.sql.OracleDictionary\">\r\n+\t\t<lock></lock>\r\n+\t\t<referential-integrity>1,1400,1722,2291,2292</referential-integrity>\r\n+\t\t<object-exists></object-exists>\r\n+\t\t<object-not-found></object-not-found>\r\n+\t\t<optimistic></optimistic>\r\n+\t</dictionary>\r\n+\t\r\n+\t<dictionary class=\"org.apache.openjpa.jdbc.sql.PointbaseDictionary\">\r\n+\t\t<lock></lock>\r\n+\t\t<referential-integrity>22001,22005,23502,23503,23513,X0Y32</referential-integrity>\r\n+\t\t<object-exists></object-exists>\r\n+\t\t<object-not-found></object-not-found>\r\n+\t\t<optimistic></optimistic>\r\n+\t</dictionary>\r\n+\t\r\n+\t<dictionary class=\"org.apache.openjpa.jdbc.sql.PostgresDictionary\">\r\n+\t\t<lock>55P03,40P01</lock>\r\n+\t\t<referential-integrity>23000,23502,23503,23505,23514</referential-integrity>\r\n+\t\t<object-exists></object-exists>\r\n+\t\t<object-not-found></object-not-found>\r\n+\t\t<optimistic>55P03</optimistic>\r\n+\t</dictionary>\r\n+\t\r\n+</sql-state-codes>\n\\ No newline at end of file"},{"sha":"0e2b7566a515a87413a01de52eb295f000d450d6","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheBehavesIdentical.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/a8e0dc180e8b360c4e72eca7c131b2826eceaedd/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheBehavesIdentical.java","raw_url":"https://github.com/apache/openjpa/raw/a8e0dc180e8b360c4e72eca7c131b2826eceaedd/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheBehavesIdentical.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheBehavesIdentical.java?ref=a8e0dc180e8b360c4e72eca7c131b2826eceaedd","patch":"@@ -30,7 +30,7 @@\n import org.apache.openjpa.persistence.cache.common.apps.BidirectionalOne2OneOwned;\r\n import org.apache.openjpa.persistence.cache.common.apps.BidirectionalOne2OneOwner;\r\n import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n-import org.apache.openjpa.persistence.exception.PObject;\r\n+import org.apache.openjpa.persistence.datacache.common.apps.PObject;\r\n \r\n /**\r\n  * Tests various application behavior with or without DataCache.\r"},{"sha":"8d9bf7c9c6c8ca1f7366581ab7e0b8674d2e7c44","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/PObject.java","status":"added","additions":57,"deletions":0,"changes":57,"blob_url":"https://github.com/apache/openjpa/blob/a8e0dc180e8b360c4e72eca7c131b2826eceaedd/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/PObject.java","raw_url":"https://github.com/apache/openjpa/raw/a8e0dc180e8b360c4e72eca7c131b2826eceaedd/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/PObject.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/PObject.java?ref=a8e0dc180e8b360c4e72eca7c131b2826eceaedd","patch":"@@ -0,0 +1,57 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.datacache.common.apps;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.Version;\r\n+\r\n+/**\r\n+ * A Simple entity for testing. Has a version field for testing optimistic\r\n+ * concurrent usage.\r\n+ * \r\n+ * @author Pinaki Poddar\r\n+ *\r\n+ */\r\n+@Entity\r\n+public class PObject {\r\n+\t@Id\r\n+\t@GeneratedValue\r\n+\tprivate long id;\r\n+\tprivate String name;\r\n+\t@Version\r\n+\tprivate int version;\r\n+\t\r\n+\tpublic String getName() {\r\n+\t\treturn name;\r\n+\t}\r\n+\t\r\n+\tpublic void setName(String name) {\r\n+\t\tthis.name = name;\r\n+\t}\r\n+\t\r\n+\tpublic long getId() {\r\n+\t\treturn id;\r\n+\t}\r\n+\t\r\n+\tpublic int getVersion() {\r\n+\t\treturn version;\r\n+\t}\r\n+}\r"},{"sha":"9239d14ecfb4fa40fccd5fe2539949ee86b53274","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/exception/PObject.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/a8e0dc180e8b360c4e72eca7c131b2826eceaedd/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/exception/PObject.java","raw_url":"https://github.com/apache/openjpa/raw/a8e0dc180e8b360c4e72eca7c131b2826eceaedd/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/exception/PObject.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/exception/PObject.java?ref=a8e0dc180e8b360c4e72eca7c131b2826eceaedd","patch":"@@ -33,7 +33,6 @@\n @Entity\r\n public class PObject {\r\n \t@Id\r\n-\t@GeneratedValue\r\n \tprivate long id;\r\n \tprivate String name;\r\n \t@Version\r\n@@ -47,6 +46,10 @@ public void setName(String name) {\n \t\tthis.name = name;\r\n \t}\r\n \t\r\n+\tpublic void setId(long id) {\r\n+\t\tthis.id = id;\r\n+\t}\r\n+\r\n \tpublic long getId() {\r\n \t\treturn id;\r\n \t}\r"},{"sha":"33ebe560614c1465ae6baa423fb2e4ced76dcb2e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/exception/TestException.java","status":"modified","additions":112,"deletions":22,"changes":134,"blob_url":"https://github.com/apache/openjpa/blob/a8e0dc180e8b360c4e72eca7c131b2826eceaedd/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/exception/TestException.java","raw_url":"https://github.com/apache/openjpa/raw/a8e0dc180e8b360c4e72eca7c131b2826eceaedd/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/exception/TestException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/exception/TestException.java?ref=a8e0dc180e8b360c4e72eca7c131b2826eceaedd","patch":"@@ -18,34 +18,50 @@\n  */\r\n package org.apache.openjpa.persistence.exception;\r\n \r\n+import java.io.InputStream;\r\n import java.sql.SQLException;\r\n+import java.util.List;\r\n \r\n+import javax.persistence.EntityExistsException;\r\n import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityNotFoundException;\r\n import javax.persistence.OptimisticLockException;\r\n+import javax.persistence.TransactionRequiredException;\r\n+\r\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\r\n+import org.apache.openjpa.jdbc.sql.SQLErrorCodeReader;\r\n import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n \r\n /**\r\n  * Tests proper JPA exceptions are raised by the implementation. \r\n+ * Actual runtime type of the raised exception is a subclass of JPA-defined \r\n+ * exception.\r\n+ * The raised exception may nest the expected exception. \r\n+ * \r\n+ * @author Pinaki Poddar\r\n  */\r\n public class TestException extends SingleEMFTestCase {\r\n-    public void setUp() {\r\n+\tprivate static long ID_COUNTER = System.currentTimeMillis();\r\n+    \r\n+\tpublic void setUp() {\r\n         super.setUp(PObject.class, CLEAR_TABLES);\r\n     }\r\n     \r\n \t/**\r\n \t * Tests that when Optimistic transaction consistency is violated, the\r\n \t * exception thrown is an instance of javax.persistence.OptimisticException.\r\n \t */\r\n-\tpublic void testThrowsJPADefinedOptimisticException() {\r\n+\tpublic void testThrowsOptimisticException() {\r\n \t\tEntityManager em1 = emf.createEntityManager();\r\n \t\tEntityManager em2 = emf.createEntityManager();\r\n \t\tassertNotEquals(em1, em2);\r\n \t\t\r\n \t\tem1.getTransaction().begin();\r\n \t\tPObject pc = new PObject();\r\n+\t\tlong id = ++ID_COUNTER;\r\n+\t\tpc.setId(id);\r\n \t\tem1.persist(pc);\r\n \t\tem1.getTransaction().commit();\r\n-\t\tObject id = pc.getId();\r\n \t\tem1.clear();\r\n \t\t\r\n \t\tem1.getTransaction().begin();\r\n@@ -61,47 +77,121 @@ public void testThrowsJPADefinedOptimisticException() {\n \t\ttry {\r\n \t\t\tpc2.setName(\"Modified in TXN2\");\r\n \t\t\tem2.flush();\r\n-\t\t\tfail(\"Expected optimistic exception on flush\");\r\n+\t\t\tfail(\"Expected \" + OptimisticLockException.class);\r\n \t\t} catch (Throwable t) {\r\n-\t\t\tif (!isExpectedException(t, OptimisticLockException.class)) {\r\n-\t\t\t\tprint(t);\r\n-\t\t\t\tfail(t.getCause().getClass() + \" is not \" + \r\n-\t\t\t\t\t\tOptimisticLockException.class);\r\n-\t\t\t}\r\n+\t\t\tassertException(t, OptimisticLockException.class);\r\n \t\t}\r\n \t\t\r\n \t\tem1.getTransaction().commit();\r\n \t\ttry {\r\n \t\t\tem2.getTransaction().commit();\r\n-\t\t\tfail(\"Expected optimistic exception on commit\");\r\n+\t\t\tfail(\"Expected \" + OptimisticLockException.class);\r\n+\t\t} catch (Throwable t) {\r\n+\t\t\tassertException(t, OptimisticLockException.class);\r\n+\t\t}\r\n+\t}\r\n+\t\r\n+\tpublic void testThrowsEntityExistsException() {\r\n+\t\tEntityManager em = emf.createEntityManager();\r\n+\t\t\r\n+\t\tem.getTransaction().begin();\r\n+\t\tPObject pc = new PObject();\r\n+\t\tlong id = ++ID_COUNTER;\r\n+\t\tpc.setId(id);\r\n+\t\tem.persist(pc);\r\n+\t\tem.getTransaction().commit();\r\n+\t\tem.clear();\r\n+\t\t\r\n+\t\tem.getTransaction().begin();\r\n+\t\tPObject pc2 = new PObject();\r\n+\t\tpc2.setId(id);\r\n+\t\tem.persist(pc2);\r\n+\t\ttry {\r\n+\t\t\tem.getTransaction().commit();\r\n+\t\t\tfail(\"Expected \" + EntityExistsException.class);\r\n \t\t} catch (Throwable t) {\r\n-\t\t\tif (!isExpectedException(t, OptimisticLockException.class)) {\r\n-\t\t\t\tprint(t);\r\n-\t\t\t\tfail(t.getCause().getClass() + \" is not \" + \r\n-\t\t\t\t\t\tOptimisticLockException.class);\r\n+\t\t\tassertException(t, EntityExistsException.class);\r\n+\t\t}\r\n+\t}\r\n+\t\r\n+\tpublic void testThrowsEntityNotFoundException() {\r\n+\t\tEntityManager em = emf.createEntityManager();\r\n+\t\t\r\n+\t\tem.getTransaction().begin();\r\n+\t\tPObject pc = new PObject();\r\n+\t\tlong id = ++ID_COUNTER;\r\n+\t\tpc.setId(id);\r\n+\t\tem.persist(pc);\r\n+\t\tem.getTransaction().commit();\r\n+\t\t\r\n+\t\tEntityManager em2 = emf.createEntityManager();\r\n+\t\tem2.getTransaction().begin();\r\n+\t\tPObject pc2 = em2.find(PObject.class, id);\r\n+\t\tassertNotNull(pc2);\r\n+\t\tem2.remove(pc2);\r\n+\t\tem2.getTransaction().commit();\r\n+\t\t\r\n+\t\ttry {\r\n+\t\t\tem.refresh(pc);\r\n+\t\t\tfail(\"Expected \" + EntityNotFoundException.class);\r\n+\t\t} catch (Throwable t) {\r\n+\t\t\tassertException(t, EntityNotFoundException.class);\r\n+\t\t}\r\n+\t}\r\n+\t\r\n+\tpublic void testErrorCodeConfigurationHasAllKnownDictionaries() {\r\n+\t\tSQLErrorCodeReader reader = new SQLErrorCodeReader();\r\n+\t\tInputStream in = DBDictionary.class.getResourceAsStream\r\n+\t\t\t(\"sql-error-state-codes.xml\");\r\n+\t\tassertNotNull(in);\r\n+\t\tList<String> names = reader.getDictionaries(in);\r\n+\t\tassertTrue(names.size()>=18);\r\n+\t\tfor (String name:names) {\r\n+\t\t\ttry {\r\n+\t\t\t\tClass.forName(name, false, Thread.currentThread()\r\n+\t\t\t\t\t\t\t.getContextClassLoader());\r\n+\t\t\t} catch (Throwable t) {\r\n+\t\t\t\tfail(\"DB dictionary \" + name + \" can not be loaded\");\r\n+\t\t\t\tt.printStackTrace();\r\n \t\t\t}\r\n \t\t}\r\n \t}\r\n \t\r\n+\t/**\r\n+\t * Asserts that the given expected type of the exception is equal to or a\r\n+\t * subclass of the given throwable or any of its nested exception.\r\n+\t * Otherwise fails assertion and prints the given throwable and its nested\r\n+\t * exception on the console. \r\n+\t */\r\n+\tvoid assertException(Throwable t, Class expectedType) {\r\n+\t\tif (!isExpectedException(t, expectedType)) {\r\n+\t\t\tt.printStackTrace();\r\n+\t\t\tprint(t, 0);\r\n+\t\t\tfail(t + \" or its cause is not instanceof \" + expectedType);\r\n+\t\t}\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Affirms if the given expected type of the exception is equal to or a\r\n+\t * subclass of the given throwable or any of its nested exception.\r\n+\t */\r\n \tboolean isExpectedException(Throwable t, Class expectedType) {\r\n-\t\tif (t == null) return false;\r\n+\t\tif (t == null) \r\n+\t\t\treturn false;\r\n \t\tif (expectedType.isAssignableFrom(t.getClass()))\r\n \t\t\t\treturn true;\r\n-\t\tif (t.getCause()==t) return false;\r\n \t\treturn isExpectedException(t.getCause(), expectedType);\r\n \t}\r\n \t\r\n-\tvoid print(Throwable t) {\r\n-\t\tprint(t, 0);\r\n-\t}\r\n-\t\r\n \tvoid print(Throwable t, int tab) {\r\n \t\tif (t == null) return;\r\n \t\tfor (int i=0; i<tab*4;i++) System.out.print(\" \");\r\n \t\tString sqlState = (t instanceof SQLException) ? \r\n-\t\t\t\"(SQLState=\" + ((SQLException)t).getSQLState() + \":\" + t.getMessage() + \")\":\"\";\r\n+\t\t\t\"(SQLState=\" + ((SQLException)t).getSQLState() + \":\" \r\n+\t\t\t\t+ t.getMessage() + \")\" : \"\";\r\n \t\tSystem.out.println(t.getClass().getName() + sqlState);\r\n-\t\tif (t.getCause()==t) return;\r\n+\t\tif (t.getCause() == t) \r\n+\t\t\treturn;\r\n \t\tprint(t.getCause(), tab+1);\r\n \t}\r\n }\r"},{"sha":"de581a042763593137ea3cc1940cdf18a9297b43","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceExceptions.java","status":"modified","additions":12,"deletions":10,"changes":22,"blob_url":"https://github.com/apache/openjpa/blob/a8e0dc180e8b360c4e72eca7c131b2826eceaedd/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceExceptions.java","raw_url":"https://github.com/apache/openjpa/raw/a8e0dc180e8b360c4e72eca7c131b2826eceaedd/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceExceptions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceExceptions.java?ref=a8e0dc180e8b360c4e72eca7c131b2826eceaedd","patch":"@@ -143,24 +143,26 @@ private static Throwable translateException(Throwable t, boolean checked) {\n      */\n     private static Throwable translateStoreException(OpenJPAException ke) {\n         Exception e;\n-        switch (ke.getSubtype()) {\n-            case StoreException.OBJECT_NOT_FOUND:\n+        Throwable cause = (ke.getNestedThrowables() != null \n+                        && ke.getNestedThrowables().length == 1)\n+                         ? ke.getNestedThrowables()[0] : null;\n+        if (ke.getSubtype() == StoreException.OBJECT_NOT_FOUND \n+         || cause instanceof ObjectNotFoundException) {\n                 e = new org.apache.openjpa.persistence.EntityNotFoundException\n                     (ke.getMessage(), getNestedThrowables(ke),\n                         getFailedObject(ke), ke.isFatal());\n-                break;\n-            case StoreException.OPTIMISTIC:\n-            case StoreException.LOCK:\n-                e = new org.apache.openjpa.persistence.OptimisticLockException\n+        } else if (ke.getSubtype() == StoreException.OPTIMISTIC \n+        \t\t|| ke.getSubtype() == StoreException.LOCK\n+        \t\t|| cause instanceof OptimisticException) {\n+            \te = new org.apache.openjpa.persistence.OptimisticLockException\n                     (ke.getMessage(), getNestedThrowables(ke),\n                         getFailedObject(ke), ke.isFatal());\n-                break;\n-            case StoreException.OBJECT_EXISTS:\n+        } else if (ke.getSubtype() == StoreException.OBJECT_EXISTS\n+        \t\t|| cause instanceof ObjectExistsException) {\n                 e = new org.apache.openjpa.persistence.EntityExistsException\n                     (ke.getMessage(), getNestedThrowables(ke),\n                         getFailedObject(ke), ke.isFatal());\n-                break;\n-            default:\n+        } else {\n                 e = new org.apache.openjpa.persistence.PersistenceException\n                     (ke.getMessage(), getNestedThrowables(ke),\n                         getFailedObject(ke), ke.isFatal());"}]}

