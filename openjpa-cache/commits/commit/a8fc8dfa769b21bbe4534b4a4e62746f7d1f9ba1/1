{"sha":"a8fc8dfa769b21bbe4534b4a4e62746f7d1f9ba1","node_id":"MDY6Q29tbWl0MjA2MzY0OmE4ZmM4ZGZhNzY5YjIxYmJlNDUzNGI0YTRlNjI3NDZmN2QxZjliYTE=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-08-02T20:33:18Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-08-02T20:33:18Z"},"message":"OPENJPA-295 improved testcase\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@562244 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2039195deedd1d063733aa3036ccc1a64cd2600f","url":"https://api.github.com/repos/apache/openjpa/git/trees/2039195deedd1d063733aa3036ccc1a64cd2600f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a8fc8dfa769b21bbe4534b4a4e62746f7d1f9ba1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a8fc8dfa769b21bbe4534b4a4e62746f7d1f9ba1","html_url":"https://github.com/apache/openjpa/commit/a8fc8dfa769b21bbe4534b4a4e62746f7d1f9ba1","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a8fc8dfa769b21bbe4534b4a4e62746f7d1f9ba1/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"17ecf6753a58c57389d13c87de235c1ee5aa5a3c","url":"https://api.github.com/repos/apache/openjpa/commits/17ecf6753a58c57389d13c87de235c1ee5aa5a3c","html_url":"https://github.com/apache/openjpa/commit/17ecf6753a58c57389d13c87de235c1ee5aa5a3c"}],"stats":{"total":68,"additions":33,"deletions":35},"files":[{"sha":"1720b84ae16483660732d0a0768e3fa5ff8a03d8","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/TestMappingToolTemporal.java","status":"modified","additions":33,"deletions":35,"changes":68,"blob_url":"https://github.com/apache/openjpa/blob/a8fc8dfa769b21bbe4534b4a4e62746f7d1f9ba1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/TestMappingToolTemporal.java","raw_url":"https://github.com/apache/openjpa/raw/a8fc8dfa769b21bbe4534b4a4e62746f7d1f9ba1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/TestMappingToolTemporal.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/TestMappingToolTemporal.java?ref=a8fc8dfa769b21bbe4534b4a4e62746f7d1f9ba1","patch":"@@ -21,51 +21,49 @@\n import java.io.IOException;\n import java.sql.SQLException;\n \n-import javax.persistence.EntityManager;\n-\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\n import org.apache.openjpa.persistence.simple.TemporalFieldTypes;\n-import org.apache.openjpa.persistence.test.SQLListenerTestCase;\n+import org.apache.openjpa.persistence.test.SingleEMTestCase;\n \n-public class TestMappingToolTemporal extends SQLListenerTestCase {\n+public class TestMappingToolTemporal extends SingleEMTestCase {\n \n     public void setUp() {\n-        setUp(CLEAR_TABLES, TemporalFieldTypes.class);\n+        setUp(TemporalFieldTypes.class);\n     }\n \n     public void testMappingToolTemporal() throws IOException, SQLException {\n+        ClassMapping mapping = (ClassMapping) OpenJPAPersistence.cast(emf)\n+                .getConfiguration().getMetaDataRepositoryInstance()\n+                .getMetaData(\"TemporalFieldTypes\", getClass().getClassLoader(),\n+                        true);\n+\n+        assertEquals(java.sql.Types.TIMESTAMP, mapping.getFieldMapping(\n+                \"dateDefaultField\").getValueMapping().getColumns()[0].getType());\n+\n+        assertEquals(java.sql.Types.DATE, mapping.getFieldMapping(\n+                \"dateDateField\").getValueMapping().getColumns()[0].getType());\n+\n+        assertEquals(java.sql.Types.TIME, mapping.getFieldMapping(\n+                \"dateTimeField\").getValueMapping().getColumns()[0].getType());\n+\n+        assertEquals(java.sql.Types.TIMESTAMP, mapping.getFieldMapping(\n+                \"dateTimestampField\").getValueMapping().getColumns()[0]\n+                .getType());\n \n-        EntityManager em = emf.createEntityManager();\n-        em.getTransaction().begin();\n-        em.persist(new TemporalFieldTypes());\n-        em.getTransaction().commit();\n-        em.close();\n+        assertEquals(java.sql.Types.TIMESTAMP, mapping.getFieldMapping(\n+                \"calendarDefaultField\").getValueMapping().getColumns()[0]\n+                .getType());\n \n-        // first check to see if we issued any create table statements at\n-        // all; if not, then the table has already been created in the\n-        // database, so the subsequent validation of the column types\n-        // will fail simply because the table creation isn't happening\n-        try {\n-            assertSQL(\"CREATE TABLE TemporalFieldTypes .*\");\n-        } catch (Throwable t) {\n-            return;\n-        }\n+        assertEquals(java.sql.Types.DATE, mapping.getFieldMapping(\n+                \"calendarDateField\").getValueMapping().getColumns()[0]\n+                .getType());\n \n-        assertSQL(\"CREATE TABLE TemporalFieldTypes \"\n-                + \"(.*dateDefaultField TIMESTAMP.*)\");\n-        assertSQL(\"CREATE TABLE TemporalFieldTypes \"\n-                + \"(.*dateDateField DATE.*)\");\n-        assertSQL(\"CREATE TABLE TemporalFieldTypes \"\n-                + \"(.*dateTimeField TIME.*)\");\n-        assertSQL(\"CREATE TABLE TemporalFieldTypes \"\n-                + \"(.*dateTimestampField TIMESTAMP.*)\");\n+        assertEquals(java.sql.Types.TIME, mapping.getFieldMapping(\n+                \"calendarTimeField\").getValueMapping().getColumns()[0]\n+                .getType());\n \n-        assertSQL(\"CREATE TABLE TemporalFieldTypes \"\n-                + \"(.*calendarDefaultField TIMESTAMP.*)\");\n-        assertSQL(\"CREATE TABLE TemporalFieldTypes \"\n-                + \"(.*calendarDateField DATE.*)\");\n-        assertSQL(\"CREATE TABLE TemporalFieldTypes \"\n-                + \"(.*calendarTimeField TIME.*)\");\n-        assertSQL(\"CREATE TABLE TemporalFieldTypes \"\n-                + \"(.*calendarTimestampField TIMESTAMP.*)\");\n+        assertEquals(java.sql.Types.TIMESTAMP, mapping.getFieldMapping(\n+                \"calendarTimestampField\").getValueMapping().getColumns()[0]\n+                .getType());\n     }\n }"}]}

