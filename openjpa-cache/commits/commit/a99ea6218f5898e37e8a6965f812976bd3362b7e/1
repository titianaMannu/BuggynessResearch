{"sha":"a99ea6218f5898e37e8a6965f812976bd3362b7e","node_id":"MDY6Q29tbWl0MjA2MzY0OmE5OWVhNjIxOGY1ODk4ZTM3ZThhNjk2NWY4MTI5NzZiZDMzNjJiN2U=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-16T17:09:45Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-16T17:09:45Z"},"message":"OPENJPA-1097 Revert previous DetachManager and TestProxyCollection changes in r919696.  New code changes Proxies to always remove  classes on serialization if the entity is detachable and one of our Proxy subclasses.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@923873 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a5a9fcb66d6ee4e253a478625fa7f4197eae523f","url":"https://api.github.com/repos/apache/openjpa/git/trees/a5a9fcb66d6ee4e253a478625fa7f4197eae523f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a99ea6218f5898e37e8a6965f812976bd3362b7e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a99ea6218f5898e37e8a6965f812976bd3362b7e","html_url":"https://github.com/apache/openjpa/commit/a99ea6218f5898e37e8a6965f812976bd3362b7e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a99ea6218f5898e37e8a6965f812976bd3362b7e/comments","author":null,"committer":null,"parents":[{"sha":"f3b00d780109213bcef19166ae5d1894cab84c9f","url":"https://api.github.com/repos/apache/openjpa/commits/f3b00d780109213bcef19166ae5d1894cab84c9f","html_url":"https://github.com/apache/openjpa/commit/f3b00d780109213bcef19166ae5d1894cab84c9f"}],"stats":{"total":80,"additions":48,"deletions":32},"files":[{"sha":"bb7baa431becf0a078ebc91744c3eb94b96cb24a","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachManager.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/a99ea6218f5898e37e8a6965f812976bd3362b7e/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachManager.java","raw_url":"https://github.com/apache/openjpa/raw/a99ea6218f5898e37e8a6965f812976bd3362b7e/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachManager.java?ref=a99ea6218f5898e37e8a6965f812976bd3362b7e","patch":"@@ -567,9 +567,8 @@ public void reproxy(DetachedStateManager dsm) {\n                         if (proxy.getChangeTracker() != null)\n                             proxy.getChangeTracker().stopTracking();\n                         proxy.setOwner(dsm, (dsm == null) ? -1 : fmd.getIndex());\n-                        objval = proxy.copy(proxy);\n-                        sm.replaceField(getDetachedPersistenceCapable(), this, fmd.getIndex());\n                     }\n+                    sm.provideField(getDetachedPersistenceCapable(), this, fmd.getIndex());\n                 }\n             }\n             clear();\n@@ -710,7 +709,7 @@ public void storeObjectField(int field, Object curVal) {\n          * Set the owner of the field's proxy to the detached state manager.\n          */\n         private Object reproxy(Object obj, int field) {\n-            if (obj != null && _detSM != null && obj instanceof Proxy){\n+            if (obj != null && _detSM != null && obj instanceof Proxy) {\n                 ((Proxy) obj).setOwner(_detSM, field);\n                 return ((Proxy) obj).copy(obj); \n             }"},{"sha":"ab338c45085fb300fb448a5147db7c1d8fa49535","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/Proxies.java","status":"modified","additions":9,"deletions":3,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/a99ea6218f5898e37e8a6965f812976bd3362b7e/openjpa-kernel/src/main/java/org/apache/openjpa/util/Proxies.java","raw_url":"https://github.com/apache/openjpa/raw/a99ea6218f5898e37e8a6965f812976bd3362b7e/openjpa-kernel/src/main/java/org/apache/openjpa/util/Proxies.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/Proxies.java?ref=a99ea6218f5898e37e8a6965f812976bd3362b7e","patch":"@@ -80,10 +80,16 @@ public static void removed(Proxy proxy, Object removed, boolean key) {\n      * Used by proxy types to serialize non-proxy versions.\n      */\n     public static Object writeReplace(Proxy proxy, boolean detachable) {\n-        if (detachable && (proxy == null || proxy.getOwner() == null \n-            || proxy.getOwner().isDetached()))\n+        /* OPENJPA-1097 Always remove $proxy classes during serialization if detachable\n+            if (detachable && (proxy == null || proxy.getOwner() == null \n+                || proxy.getOwner().isDetached()))\n+                return proxy;\n+        */\n+        if (!detachable || proxy == null || proxy.getOwner() == null) {\n             return proxy;\n-        return proxy.copy(proxy);\n+        } else {\n+            return proxy.copy(proxy);\n+        }\n     }\n }\n "},{"sha":"d48f101919150b12408b495613771edfb8abbd50","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detach/TestDetachNoProxy.java","status":"modified","additions":34,"deletions":18,"changes":52,"blob_url":"https://github.com/apache/openjpa/blob/a99ea6218f5898e37e8a6965f812976bd3362b7e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detach/TestDetachNoProxy.java","raw_url":"https://github.com/apache/openjpa/raw/a99ea6218f5898e37e8a6965f812976bd3362b7e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detach/TestDetachNoProxy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detach/TestDetachNoProxy.java?ref=a99ea6218f5898e37e8a6965f812976bd3362b7e","patch":"@@ -44,17 +44,17 @@ public void setUp() {\n         Compatibility compat = emf.getConfiguration().getCompatibilityInstance();\n         assertNotNull(compat);\n         if (log.isTraceEnabled()) {\n-            log.info(\"Before set, FlushBeforeDetach=\" + compat.getFlushBeforeDetach());\n-            log.info(\"Before set, CopyOnDetach=\" + compat.getCopyOnDetach());\n-            log.info(\"Before set, CascadeWithDetach=\" + compat.getCascadeWithDetach());\n+            log.trace(\"Before set, FlushBeforeDetach=\" + compat.getFlushBeforeDetach());\n+            log.trace(\"Before set, CopyOnDetach=\" + compat.getCopyOnDetach());\n+            log.trace(\"Before set, CascadeWithDetach=\" + compat.getCascadeWithDetach());\n         }\n         compat.setFlushBeforeDetach(false);\n         compat.setCopyOnDetach(false);\n         compat.setCascadeWithDetach(false);\n         if (log.isTraceEnabled()) {\n-            log.info(\"After set, FlushBeforeDetach=\" + compat.getFlushBeforeDetach());\n-            log.info(\"After set, CopyOnDetach=\" + compat.getCopyOnDetach());\n-            log.info(\"After set, CascadeWithDetach=\" + compat.getCascadeWithDetach());\n+            log.trace(\"After set, FlushBeforeDetach=\" + compat.getFlushBeforeDetach());\n+            log.trace(\"After set, CopyOnDetach=\" + compat.getCopyOnDetach());\n+            log.trace(\"After set, CascadeWithDetach=\" + compat.getCascadeWithDetach());\n         }\n         createEntities(numEntities);\n     }\n@@ -76,7 +76,7 @@ private void createEntities(int count) {\n      */\n     public void testDetach() {\n         if (log.isTraceEnabled())\n-            log.info(\"***** testDetach() *****\");\n+            log.trace(\"***** testDetach() *****\");\n         Integer id = new Integer(0);\n         OpenJPAEntityManager em = emf.createEntityManager();\n         \n@@ -85,13 +85,15 @@ public void testDetach() {\n         if (log.isTraceEnabled())\n             log.trace(\"** after find\");\n         assertTrue(em.contains(e20));\n+        assertFalse(em.isDetached(e20));\n         verifySerializable(e20, true);\n         \n         // new openjpa-2.0.0 behavior, where detach() doesn't return updated entity, but does it in-place\n         em.detach(e20);\n         if (log.isTraceEnabled())\n             log.trace(\"** after detach\");\n         // in-place updated entity should not have any proxy classes and should be detached\n+        assertFalse(em.contains(e20));\n         assertTrue(em.isDetached(e20));\n         verifySerializable(e20, false);\n                \n@@ -103,7 +105,7 @@ public void testDetach() {\n      */\n     public void testDetachCopy() {\n         if (log.isTraceEnabled())\n-            log.info(\"***** testDetachCopy() *****\");\n+            log.trace(\"***** testDetachCopy() *****\");\n         Integer id = new Integer(0);\n         OpenJPAEntityManager em = emf.createEntityManager();\n         em.clear();\n@@ -112,12 +114,19 @@ public void testDetachCopy() {\n         if (log.isTraceEnabled())\n             log.trace(\"** after find\");\n         assertTrue(em.contains(e20));\n+        assertFalse(em.isDetached(e20));\n         verifySerializable(e20, true);\n         \n         // Test new detachCopy() method added in 2.0.0\n         Entity20 e20copy = em.detachCopy(e20);\n         if (log.isTraceEnabled())\n             log.trace(\"** after detachCopy\");\n+        // verify e20 is same as above\n+        assertTrue(em.contains(e20));\n+        assertFalse(em.isDetached(e20));\n+        verifySerializable(e20, true);\n+        // verify copy does not have any proxy classes (in-place updated) is detached\n+        assertFalse(em.contains(e20copy));\n         assertTrue(em.isDetached(e20copy));\n         verifySerializable(e20copy, false);\n         \n@@ -129,7 +138,7 @@ public void testDetachCopy() {\n      */\n     public void testDetachAll() {\n         if (log.isTraceEnabled())\n-            log.info(\"***** testDetachAll() *****\");\n+            log.trace(\"***** testDetachAll() *****\");\n         OpenJPAEntityManager em = emf.createEntityManager();\n         em.clear();\n \n@@ -140,6 +149,7 @@ public void testDetachAll() {\n             if (log.isTraceEnabled())\n                 log.trace(\"** after find Entity20(\" + i + \")\");\n             assertTrue(em.contains(e20));\n+            assertFalse(em.isDetached(e20));\n             verifySerializable(e20, true);            \n         }\n \n@@ -151,7 +161,8 @@ public void testDetachAll() {\n             if (log.isTraceEnabled())\n                 log.trace(\"** after EM.clear() verify Entity20(\" + i + \")\");\n             Entity20 e20 = e20List.get(i);\n-            // entity should not have any proxy classes and should be detached\n+            // entity should not have any proxy classes (in-place updated) and is detached\n+            assertFalse(em.contains(e20));\n             assertTrue(em.isDetached(e20));\n             verifySerializable(e20, false);\n         }\n@@ -164,7 +175,7 @@ public void testDetachAll() {\n      */\n     public void testClear() {\n         if (log.isTraceEnabled())\n-            log.info(\"***** testClear() *****\");\n+            log.trace(\"***** testClear() *****\");\n         OpenJPAEntityManager em = emf.createEntityManager();\n         em.clear();\n \n@@ -175,6 +186,7 @@ public void testClear() {\n             if (log.isTraceEnabled())\n                 log.trace(\"** after find Entity20(\" + i + \")\");\n             assertTrue(em.contains(e20));\n+            assertFalse(em.isDetached(e20));\n             verifySerializable(e20, true);            \n         }\n \n@@ -183,8 +195,11 @@ public void testClear() {\n             if (log.isTraceEnabled())\n                 log.trace(\"** after EM.clear() verify Entity20(\" + i + \")\");\n             Entity20 e20 = e20List.get(i);\n+            assertFalse(em.contains(e20));\n             assertTrue(em.isDetached(e20));\n-            verifySerializable(e20, false);\n+            // entity should still have proxy classes and is detached,\n+            // but once serialized the $proxy classes will be removed\n+            verifySerializable(e20, true);\n         }\n \n         em.close();\n@@ -215,7 +230,7 @@ private void verifySerializable(Entity20 e20, boolean usesProxy) {\n             }\n         }\n         \n-        // then deserialize\n+        // then deserialize and assert no $proxy classes exist\n         ByteArrayInputStream bais = new ByteArrayInputStream(e20bytes);\n         ObjectInputStream ois = null;\n         Entity20 e20new = null;\n@@ -241,8 +256,8 @@ private void verifySerializable(Entity20 e20, boolean usesProxy) {\n \n     private void verifyEntities(Entity20 e20, boolean usesProxy) {\n         if (log.isTraceEnabled()) {\n+            log.trace(\"verifyEntities() - asserting expected proxy usage is \" + usesProxy);\n             printClassNames(e20);\n-            log.trace(\"asserting expected proxy usage\");\n         }\n         assertTrue(\"Expected sqlDate endsWith($proxy) to return \" + usesProxy,\n             usesProxy == e20.getDate().getClass().getCanonicalName().endsWith(PROXY));\n@@ -254,9 +269,10 @@ private void verifyEntities(Entity20 e20, boolean usesProxy) {\n     }\n     \n     private void printClassNames(Entity20 e20) {\n-        log.info(\"sqlDate = \" + e20.getDate().getClass().getCanonicalName());\n-        log.info(\"sqlTime = \" + e20.getTime().getClass().getCanonicalName());\n-        log.info(\"sqlTimestamp = \" + e20.getTimestamp().getClass().getCanonicalName());\n+        if (log.isTraceEnabled()) {\n+            log.trace(\"sqlDate = \" + e20.getDate().getClass().getCanonicalName());\n+            log.trace(\"sqlTime = \" + e20.getTime().getClass().getCanonicalName());\n+            log.trace(\"sqlTimestamp = \" + e20.getTimestamp().getClass().getCanonicalName());\n+        }\n     }\n-    \n }"},{"sha":"ff5c8d3a81a6c306eb3a122c6d95ef03de57a4ea","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/TestProxyCollection.java","status":"modified","additions":3,"deletions":8,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/a99ea6218f5898e37e8a6965f812976bd3362b7e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/TestProxyCollection.java","raw_url":"https://github.com/apache/openjpa/raw/a99ea6218f5898e37e8a6965f812976bd3362b7e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/TestProxyCollection.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/TestProxyCollection.java?ref=a99ea6218f5898e37e8a6965f812976bd3362b7e","patch":"@@ -125,11 +125,10 @@ void createModifyAndMerge(int[] original, int[] modifier) {\n \t\tem.merge(modified);\n \t\tem.getTransaction().commit();\n \n-\t\t// this was unproxied by EM.clear() in create() below\n-\t\t// assertProxyCollection(root.getNodes(), true);\n-\t\tassertNotProxyCollection(root.getNodes());\n-\n \t\tem.clear();\n+\n+\t\tassertProxyCollection(root.getNodes(), false);\n+\n \t\tverify(root, modifier);\n \t}\n \t\n@@ -147,11 +146,7 @@ TreeNode create(int[] original) {\n \t\tem.getTransaction().begin();\n \t\tem.persist(root);\n \t\tem.getTransaction().commit();\n-\t\t// OPENJPA-1097 Fixed behavior so entities will use the proxy classes until EM.clear() is called\n-\t\tassertProxyCollection(root.getNodes(), true);\n \t\tem.clear();\n-\t\t// OPENJPA-1097 All proxies are removed after EM.clear()\n-\t\tassertNotProxyCollection(root.getNodes());\n \t\t\n \t\treturn root;\n \t}"}]}

