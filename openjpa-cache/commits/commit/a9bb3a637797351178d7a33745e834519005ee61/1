{"sha":"a9bb3a637797351178d7a33745e834519005ee61","node_id":"MDY6Q29tbWl0MjA2MzY0OmE5YmIzYTYzNzc5NzM1MTE3OGQ3YTMzNzQ1ZTgzNDUxOTAwNWVlNjE=","commit":{"author":{"name":"Stephen Kim","email":"skim@apache.org","date":"2006-07-24T18:04:50Z"},"committer":{"name":"Stephen Kim","email":"skim@apache.org","date":"2006-07-24T18:04:50Z"},"message":"Fix fetch state and proper method sigs for multiple fetch groups\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@425136 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1d0e34b9457e93a542f5a1ec1ee9bc031f97c091","url":"https://api.github.com/repos/apache/openjpa/git/trees/1d0e34b9457e93a542f5a1ec1ee9bc031f97c091"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a9bb3a637797351178d7a33745e834519005ee61","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a9bb3a637797351178d7a33745e834519005ee61","html_url":"https://github.com/apache/openjpa/commit/a9bb3a637797351178d7a33745e834519005ee61","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a9bb3a637797351178d7a33745e834519005ee61/comments","author":null,"committer":null,"parents":[{"sha":"7ded1815868d29a41f78c767e6234bbcf08a8532","url":"https://api.github.com/repos/apache/openjpa/commits/7ded1815868d29a41f78c767e6234bbcf08a8532","html_url":"https://github.com/apache/openjpa/commit/7ded1815868d29a41f78c767e6234bbcf08a8532"}],"stats":{"total":137,"additions":74,"deletions":63},"files":[{"sha":"8321bab8ef1fd50db851b6ec391a7049dcb5140b","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCDataGenerator.java","status":"modified","additions":74,"deletions":63,"changes":137,"blob_url":"https://github.com/apache/openjpa/blob/a9bb3a637797351178d7a33745e834519005ee61/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCDataGenerator.java","raw_url":"https://github.com/apache/openjpa/raw/a9bb3a637797351178d7a33745e834519005ee61/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCDataGenerator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCDataGenerator.java?ref=a9bb3a637797351178d7a33745e834519005ee61","patch":"@@ -178,7 +178,7 @@ private void enhanceConstructor(BCClass bc) {\n         code.afterLast();\n         code.previous();\n \n-        // private BitSet loaded = new BitSet ();\n+        // private BitSet loaded = new BitSet();\n         BCField loaded = addBeanField(bc, \"loaded\", BitSet.class);\n         loaded.setFinal(true);\n         code.aload().setThis();\n@@ -202,17 +202,17 @@ private void addGetType(BCClass bc, ClassMetaData meta) {\n         BCField type = bc.declareField(\"type\", Class.class);\n         type.setStatic(true);\n         type.makePrivate();\n-        // public Class getType () {\n+        // public Class getType() {\n         BCMethod getter = bc.declareMethod(\"getType\", Class.class, null);\n         getter.makePublic();\n         Code code = getter.getCode(true);\n         // if (type == null) {\n         // \t\ttry {\n         // \t\t\ttype = Class.forName\n-        // \t\t\t\t(meta.getDescribedType ().getName (), true,\n-        // \t\t\t\tThread.currentThread ().getContextClassLoader ());\n+        // \t\t\t\t(meta.getDescribedType().getName(), true,\n+        // \t\t\t\tThread.currentThread().getContextClassLoader());\n         // \t\t} catch (ClassNotFoundException cnfe) {\n-        // \t\t\tthrow new InternalException ();\n+        // \t\t\tthrow new InternalException();\n         // \t\t}\n         // }\n         code.getstatic().setField(type);\n@@ -259,7 +259,7 @@ private void addBaseFields(BCClass bc) {\n      * Add methods for loading and storing class-level impl data.\n      */\n     private void addImplDataMethods(BCClass bc, ClassMetaData meta) {\n-        // void storeImplData (OpenJPAStateManager);\n+        // void storeImplData(OpenJPAStateManager);\n         BCMethod meth = bc.declareMethod(\"storeImplData\", void.class,\n             new Class[]{ OpenJPAStateManager.class });\n         Code code = meth.getCode(true);\n@@ -268,8 +268,8 @@ private void addImplDataMethods(BCClass bc, ClassMetaData meta) {\n         if (!usesImplData(meta))\n             code.vreturn();\n         else {\n-            // if (sm.isImplDataCacheable ())\n-            // \t\tsetImplData (sm.getImplData ());\n+            // if (sm.isImplDataCacheable())\n+            // \t\tsetImplData(sm.getImplData());\n             impl = addBeanField(bc, \"implData\", Object.class);\n             code.aload().setParam(0);\n             code.invokeinterface().setMethod(OpenJPAStateManager.class,\n@@ -286,15 +286,15 @@ private void addImplDataMethods(BCClass bc, ClassMetaData meta) {\n         code.calculateMaxStack();\n         code.calculateMaxLocals();\n \n-        // void loadImplData (OpenJPAStateManager);\n+        // void loadImplData(OpenJPAStateManager);\n         meth = bc.declareMethod(\"loadImplData\", void.class,\n             new Class[]{ OpenJPAStateManager.class });\n         code = meth.getCode(true);\n         if (!usesImplData(meta))\n             code.vreturn();\n         else {\n-            // if (sm.getImplData () == null && implData != null)\n-            // \t\tsm.setImplData (impl, true);\n+            // if (sm.getImplData() == null && implData != null)\n+            // \t\tsm.setImplData(impl, true);\n             code.aload().setParam(0);\n             code.invokeinterface().setMethod(OpenJPAStateManager.class,\n                 \"getImplData\", Object.class, null);\n@@ -321,7 +321,7 @@ private void addImplDataMethods(BCClass bc, ClassMetaData meta) {\n      * Add methods for loading and storing class-level impl data.\n      */\n     private void addFieldImplDataMethods(BCClass bc, ClassMetaData meta) {\n-        // public void loadImplData (OpenJPAStateManager sm, int i)\n+        // public void loadImplData(OpenJPAStateManager sm, int i)\n         BCMethod meth = bc.declareMethod(\"loadImplData\", void.class,\n             new Class[]{ OpenJPAStateManager.class, int.class });\n         meth.makePrivate();\n@@ -351,7 +351,7 @@ private void addFieldImplDataMethods(BCClass bc, ClassMetaData meta) {\n             Instruction target = code.aload().setLocal(obj);\n             code.previous();\n \n-            // switch (i)\n+            // switch(i)\n             code.iload().setParam(1);\n             LookupSwitchInstruction lswitch = code.lookupswitch();\n             FieldMetaData[] fields = meta.getFields();\n@@ -370,11 +370,11 @@ private void addFieldImplDataMethods(BCClass bc, ClassMetaData meta) {\n             lswitch.setDefaultTarget(target);\n \n             // if (obj != null)\n-            code.next(); // jump back over target\n+            code.next();    // jump back over target\n             ifins = code.ifnonnull();\n             code.vreturn();\n \n-            // sm.setImplData (index, impl);\n+            // sm.setImplData(index, impl);\n             ifins.setTarget(code.aload().setParam(0));\n             code.iload().setParam(1);\n             code.aload().setLocal(obj);\n@@ -386,15 +386,15 @@ private void addFieldImplDataMethods(BCClass bc, ClassMetaData meta) {\n         code.calculateMaxLocals();\n         code.calculateMaxStack();\n \n-        // void storeImplData (OpenJPAStateManager sm, int index, boolean loaded)\n+        // void storeImplData(OpenJPAStateManager sm, int index, boolean loaded)\n         meth = bc.declareMethod(\"storeImplData\", void.class,\n             new Class[]{ OpenJPAStateManager.class, int.class, boolean.class });\n         code = meth.getCode(true);\n         if (count == 0)\n             code.vreturn();\n         else {\n             // int arrIdx = -1;\n-            // switch (index)\n+            // switch(index)\n             int arrIdx = code.getNextLocalsIndex();\n             code.constant().setValue(-1);\n             code.istore().setLocal(arrIdx);\n@@ -416,7 +416,7 @@ private void addFieldImplDataMethods(BCClass bc, ClassMetaData meta) {\n                 code.go2().setTarget(switchTarget);\n             }\n             lswitch.setDefaultTarget(switchTarget);\n-            code.next(); // step over switch target\n+            code.next();    // step over switch target\n \n             // if (arrIdx != -1)\n             code.constant().setValue(-1);\n@@ -431,7 +431,7 @@ private void addFieldImplDataMethods(BCClass bc, ClassMetaData meta) {\n             ifins.setTarget(code.iload().setParam(2));\n             code.ifeq().setTarget(nullTarget);\n \n-            // Object obj = sm.getImplData (index)\n+            // Object obj = sm.getImplData(index)\n             int obj = code.getNextLocalsIndex();\n             code.aload().setParam(0);\n             code.iload().setParam(1);\n@@ -483,13 +483,13 @@ private void addFieldImplDataMethods(BCClass bc, ClassMetaData meta) {\n      * Add methods for loading and storing version data.\n      */\n     protected void addVersionMethods(BCClass bc) {\n-        // void storeVersion (OpenJPAStateManager sm);\n+        // void storeVersion(OpenJPAStateManager sm);\n         addBeanField(bc, \"version\", Object.class);\n         BCMethod meth = bc.declareMethod(\"storeVersion\", void.class,\n             new Class[]{ OpenJPAStateManager.class });\n         Code code = meth.getCode(true);\n \n-        // version = sm.getVersion ();\n+        // version = sm.getVersion();\n         code.aload().setThis();\n         code.aload().setParam(0);\n         code.invokeinterface()\n@@ -500,13 +500,13 @@ protected void addVersionMethods(BCClass bc) {\n         code.calculateMaxStack();\n         code.calculateMaxLocals();\n \n-        // void loadVersion (OpenJPAStateManager sm)\n+        // void loadVersion(OpenJPAStateManager sm)\n         meth = bc.declareMethod(\"loadVersion\", void.class,\n             new Class[]{ OpenJPAStateManager.class });\n         code = meth.getCode(true);\n \n-        // if (sm.getVersion () == null)\n-        // \t\tsm.setVersion (version);\n+        // if (sm.getVersion() == null)\n+        // \t\tsm.setVersion(version);\n         code.aload().setParam(0);\n         code.invokeinterface().setMethod(OpenJPAStateManager.class,\n             \"getVersion\", Object.class, null);\n@@ -523,12 +523,19 @@ protected void addVersionMethods(BCClass bc) {\n     }\n \n     private void addLoadMethod(BCClass bc, ClassMetaData meta) {\n-        // public void load (OpenJPAStateManager sm, FetchState fc,\n+        // public void load(OpenJPAStateManager sm, FetchState fetchState,\n         // \t\tObject context)\n         Code code = addLoadMethod(bc, false);\n         FieldMetaData[] fmds = meta.getFields();\n         Collection jumps = new LinkedList();\n         Collection jumps2;\n+\t\t// FetchConfiguration fetch = fetchState.getFetchConfiguration();\n+\t\tint fetch = code.getNextLocalsIndex();\n+\t\tcode.aload().setParam(1);\n+\t\tcode.invokeinterface().setMethod(FetchState.class, \n+\t\t\t\"getFetchConfiguration\", FetchConfiguration.class, null);\n+\t\tcode.astore().setLocal(fetch);\n+\t\t\n         int local = code.getNextLocalsIndex();\n         code.constant().setNull();\n         code.astore().setLocal(local);\n@@ -542,7 +549,7 @@ private void addLoadMethod(BCClass bc, ClassMetaData meta) {\n             jumps2 = new LinkedList();\n             intermediate = usesIntermediate(fmds[i]);\n             setTarget(code.aload().setThis(), jumps);\n-            // if (loaded.get (i)) or (!loaded.get (i)) depending on inter resp\n+            // if (loaded.get(i)) or (!loaded.get(i)) depending on inter resp\n             code.getfield().setField(\"loaded\", BitSet.class);\n             code.constant().setValue(i);\n             code.invokevirtual().setMethod(BitSet.class, \"get\",\n@@ -555,19 +562,23 @@ private void addLoadMethod(BCClass bc, ClassMetaData meta) {\n             jumps2.add(code.go2());\n \n             // if in DFG, no if statement.\n-            // else if (fetch.hasFetchGroup (fmds[i].getFetchGroups ())\n-            // \t|| fetch.hasField (fmds[i].getFullName ()))\n+            // else if (fetch.hasFetchGroup(sm.getMetaData().getField(i).\n+\t\t\t//     getFetchGroups()) || fetch.hasField(fmds[i].getFullName()))\n             if (!fmds[i].isInDefaultFetchGroup()) {\n-                setTarget(code.aload().setParam(1), jumps);\n-                code.constant().setValue(fmds[i]);\n+                setTarget(code.aload().setLocal(fetch), jumps);\n+                code.aload().setParam(0);\n+                code.invokeinterface().setMethod(OpenJPAStateManager.class,\n+                    \"getMetaData\", ClassMetaData.class, null);\n+\t\t\t\tcode.constant().setValue(fmds[i].getIndex());\n+                code.invokevirtual().setMethod(ClassMetaData.class,\n+                    \"getField\", FieldMetaData.class, new Class[]{int.class});\n                 code.invokevirtual().setMethod(FieldMetaData.class,\n                     \"getFetchGroups\", Set.class, null);\n-                code.aload().setParam(0);\n                 code.invokeinterface().setMethod\n                     (FetchConfiguration.class, \"hasFetchGroup\",\n                         boolean.class, new Class[]{ Set.class });\n                 JumpInstruction ifins = code.ifne();\n-                code.aload().setParam(1);\n+                code.aload().setLocal(fetch);\n                 code.constant().setValue(fmds[i].getFullName());\n                 code.invokeinterface().setMethod\n                     (FetchConfiguration.class, \"hasField\", boolean.class,\n@@ -590,7 +601,7 @@ private void addLoadMethod(BCClass bc, ClassMetaData meta) {\n \n     private void addLoadWithFieldsMethod(BCClass bc, ClassMetaData meta) {\n         Code code = addLoadMethod(bc, true);\n-        // public void load (OpenJPAStateManager sm, FetchConfiguration fc,\n+        // public void load(OpenJPAStateManager sm, FetchState fs,\n         // \t\tBitSet fields, Object conn)\n         FieldMetaData[] fmds = meta.getFields();\n         Collection jumps = new LinkedList();\n@@ -607,9 +618,9 @@ private void addLoadWithFieldsMethod(BCClass bc, ClassMetaData meta) {\n         for (int i = 0; i < fmds.length; i++) {\n             jumps2 = new LinkedList();\n             intermediate = usesIntermediate(fmds[i]);\n-            // if (fields.get (i))\n+            // if (fields.get(i))\n             // {\n-            // \t\tif (loaded.get (i))\n+            // \t\tif (loaded.get(i))\n             setTarget(code.aload().setParam(1), jumps);\n             code.constant().setValue(i);\n             code.invokevirtual().setMethod(BitSet.class, \"get\",\n@@ -627,7 +638,7 @@ private void addLoadWithFieldsMethod(BCClass bc, ClassMetaData meta) {\n \n             addLoad(bc, code, fmds[i], objectCount, local, true);\n             if (usesImplData(fmds[i])) {\n-                // loadImplData (sm, i);\n+                // loadImplData(sm, i);\n                 code.aload().setThis();\n                 code.aload().setParam(0);\n                 code.constant().setValue(i);\n@@ -663,13 +674,13 @@ private Code addLoadMethod(BCClass bc, boolean fields) {\n         BCMethod load = bc.declareMethod(\"load\", void.class, args);\n         Code code = load.getCode(true);\n \n-        //loadVersion (sm);\n+        //loadVersion(sm);\n         code.aload().setThis();\n         code.aload().setParam(0);\n         code.invokevirtual().setMethod(\"loadVersion\", void.class,\n             new Class[]{ OpenJPAStateManager.class });\n \n-        //loadImplData (sm);\n+        //loadImplData(sm);\n         code.aload().setThis();\n         code.aload().setParam(0);\n         code.invokevirtual().setMethod(\"loadImplData\", void.class,\n@@ -686,7 +697,7 @@ private Instruction addLoad(BCClass bc, Code code, FieldMetaData fmd,\n         int typeCode = replaceType(fmd);\n         Instruction first;\n         if (typeCode < JavaTypes.OBJECT) {\n-            // sm.store<type> (i, field<i>)\n+            // sm.store<type>(i, field<i>)\n             Class type = forType(fmd.getTypeCode());\n             first = code.aload().setParam(0);\n             code.constant().setValue(index);\n@@ -696,7 +707,7 @@ private Instruction addLoad(BCClass bc, Code code, FieldMetaData fmd,\n                 \"store\" + StringUtils.capitalize(type.getName()),\n                 void.class, new Class[]{ int.class, type });\n         } else {\n-            // fmd = sm.getMetaData ().getField (i);\n+            // fmd = sm.getMetaData().getField(i);\n             int offset = fields ? 1 : 0;\n             first = code.aload().setParam(0);\n             code.invokeinterface().setMethod(OpenJPAStateManager.class,\n@@ -705,7 +716,7 @@ private Instruction addLoad(BCClass bc, Code code, FieldMetaData fmd,\n             code.invokevirtual().setMethod(ClassMetaData.class, \"getField\",\n                 FieldMetaData.class, new Class[]{ int.class });\n             code.astore().setLocal(local);\n-            // sm.storeField (i, toField (sm, fmd, objects[objectCount],\n+            // sm.storeField(i, toField(sm, fmd, objects[objectCount],\n             // \t\tfetch, context);\n             code.aload().setParam(0);\n             code.constant().setValue(index);\n@@ -741,7 +752,7 @@ private Instruction addLoadIntermediate(Code code, int index,\n         code.constant().setValue(objectCount);\n         code.aaload();\n         code.astore().setLocal(inter);\n-        // \t\tif (inter != null && !sm.getLoaded ().get (index))\n+        // \t\tif (inter != null && !sm.getLoaded().get(index))\n         code.aload().setLocal(inter);\n         jumps2.add(code.ifnull());\n         code.aload().setParam(0);\n@@ -751,8 +762,8 @@ private Instruction addLoadIntermediate(Code code, int index,\n         code.invokevirtual().setMethod(BitSet.class, \"get\",\n             boolean.class, new Class[]{ int.class });\n         jumps2.add(code.ifne());\n-        //\t\t\tsm.setIntermediate (index, inter);\n-        //\t} // end else\n+        //\t\t\tsm.setIntermediate(index, inter);\n+        //\t}  // end else\n         code.aload().setParam(0);\n         code.constant().setValue(index);\n         code.aload().setLocal(inter);\n@@ -763,9 +774,9 @@ private Instruction addLoadIntermediate(Code code, int index,\n     }\n \n     private void addStoreMethods(BCClass bc, ClassMetaData meta) {\n-        // i.e. void store (OpenJPAStateManager sm, BitSet fields);\n+        // i.e. void store(OpenJPAStateManager sm, BitSet fields);\n         addStoreMethod(bc, meta, true);\n-        // i.e. void store (OpenJPAStateManager sm);\n+        // i.e. void store(OpenJPAStateManager sm);\n         addStoreMethod(bc, meta, false);\n     }\n \n@@ -780,17 +791,17 @@ private void addStoreMethod(BCClass bc, ClassMetaData meta,\n                 new Class[]{ OpenJPAStateManager.class });\n         Code code = store.getCode(true);\n \n-        // initialize ();\n+        // initialize();\n         code.aload().setThis();\n         code.invokevirtual().setMethod(\"initialize\", void.class, null);\n \n-        // storeVersion (sm);\n+        // storeVersion(sm);\n         code.aload().setThis();\n         code.aload().setParam(0);\n         code.invokevirtual().setMethod(\"storeVersion\", void.class,\n             new Class[]{ OpenJPAStateManager.class });\n \n-        // storeImplData (sm);\n+        // storeImplData(sm);\n         code.aload().setThis();\n         code.aload().setParam(0);\n         code.invokevirtual().setMethod(\"storeImplData\", void.class,\n@@ -801,7 +812,7 @@ private void addStoreMethod(BCClass bc, ClassMetaData meta,\n         int objectCount = 0;\n         for (int i = 0; i < fmds.length; i++) {\n             if (fields) {\n-                //  if (fields != null && fields.get (index))\n+                //  if (fields != null && fields.get(index))\n                 setTarget(code.aload().setParam(1), jumps);\n                 jumps.add(code.ifnull());\n                 code.aload().setParam(1);\n@@ -810,7 +821,7 @@ private void addStoreMethod(BCClass bc, ClassMetaData meta,\n                     boolean.class, new Class[]{ int.class });\n                 jumps.add(code.ifeq());\n             } else {\n-                // if (sm.getLoaded ().get (index)))\n+                // if (sm.getLoaded().get(index)))\n                 setTarget(code.aload().setParam(0), jumps);\n                 code.invokeinterface().setMethod(OpenJPAStateManager.class,\n                     \"getLoaded\", BitSet.class, null);\n@@ -822,15 +833,15 @@ private void addStoreMethod(BCClass bc, ClassMetaData meta,\n             addStore(bc, code, fmds[i], objectCount);\n             if (usesIntermediate(fmds[i])) {\n                 JumpInstruction elseIns = code.go2();\n-                // else if (!loaded.get (index))\n+                // else if (!loaded.get(index))\n                 setTarget(code.aload().setThis(), jumps);\n                 jumps.add(elseIns);\n                 code.getfield().setField(\"loaded\", BitSet.class);\n                 code.constant().setValue(i);\n                 code.invokevirtual().setMethod(BitSet.class, \"get\",\n                     boolean.class, new Class[]{ int.class });\n                 jumps.add(code.ifne());\n-                // Object val = sm.getIntermediate (index);\n+                // Object val = sm.getIntermediate(index);\n                 // if (val != null)\n                 // \t\tobjects[objectCount] = val;\n                 code.aload().setParam(0);\n@@ -861,7 +872,7 @@ private void addStore(BCClass bc, Code code, FieldMetaData fmd,\n         int index = fmd.getIndex();\n         if (typeCode < JavaTypes.OBJECT) {\n             Class type = forType(typeCode);\n-            // field<i> = sm.fetch<Type> (index)\n+            // field<i> = sm.fetch<Type>(index)\n             code.aload().setThis();\n             code.aload().setParam(0);\n             code.constant().setValue(index);\n@@ -875,8 +886,8 @@ private void addStore(BCClass bc, Code code, FieldMetaData fmd,\n             code.invokevirtual().setMethod(BitSet.class, \"set\", void.class,\n                 new Class[]{ int.class });\n         } else {\n-            // Object val = toData (sm.getMetaData ().getField (index),\n-            // \t\tsm.fetchField (index, false), sm.getContext ());\n+            // Object val = toData(sm.getMetaData().getField(index),\n+            // \t\tsm.fetchField(index, false), sm.getContext());\n             int local = code.getNextLocalsIndex();\n             code.aload().setThis();\n             code.aload().setParam(0);\n@@ -901,9 +912,9 @@ private void addStore(BCClass bc, Code code, FieldMetaData fmd,\n \n             // if (val == NULL) {\n             // \t\tval = null;\n-            // \t\tloaded.clear (index);\n+            // \t\tloaded.clear(index);\n             // \t} else\n-            // \t\tloaded.set (index);\n+            // \t\tloaded.set(index);\n             // \tobjects[objectCount] = val;\n             code.aload().setLocal(local);\n             code.getstatic().setField(AbstractPCData.class, \"NULL\",\n@@ -931,7 +942,7 @@ private void addStore(BCClass bc, Code code, FieldMetaData fmd,\n         if (!usesImplData(fmd))\n             return;\n \n-        // storeImplData (sm, i, loaded.get (i);\n+        // storeImplData(sm, i, loaded.get(i);\n         code.aload().setThis();\n         code.aload().setParam(0);\n         code.constant().setValue(index);\n@@ -945,12 +956,12 @@ private void addStore(BCClass bc, Code code, FieldMetaData fmd,\n     }\n \n     private void addNewEmbedded(BCClass bc) {\n-        // void newEmbeddedPCData (OpenJPAStateManager embedded)\n+        // void newEmbeddedPCData(OpenJPAStateManager embedded)\n         BCMethod meth = bc.declareMethod(\"newEmbeddedPCData\", PCData.class,\n             new Class[]{ OpenJPAStateManager.class });\n         Code code = meth.getCode(true);\n-        // return getStorageGenerator ().generatePCData\n-        // \t\t(sm.getId (), sm.getMetaData ());\n+        // return getStorageGenerator().generatePCData\n+        // \t\t(sm.getId(), sm.getMetaData());\n         code.aload().setThis();\n         code.getfield().setField(\"storageGenerator\", PCDataGenerator.class);\n         code.aload().setParam(0);\n@@ -968,7 +979,7 @@ private void addNewEmbedded(BCClass bc) {\n     }\n \n     private void addGetData(BCClass bc) {\n-        // return getObjectField (i);\n+        // return getObjectField(i);\n         BCMethod method = bc.declareMethod(\"getData\", Object.class,\n             new Class[]{ int.class });\n         Code code = method.getCode(true);"}]}

