{"sha":"aa1516f04b61ae6c10253ef06b853970e1efe5fb","node_id":"MDY6Q29tbWl0MjA2MzY0OmFhMTUxNmYwNGI2MWFlNmMxMDI1M2VmMDZiODUzOTcwZTFlZmU1ZmI=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-08-29T17:46:15Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-08-29T17:46:15Z"},"message":"OPENJPA-697: Add new capabilities to support version columns to spread across primary and secondary tables\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@690346 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"34090b656b1f81c2ab7abf8991151663715dd12d","url":"https://api.github.com/repos/apache/openjpa/git/trees/34090b656b1f81c2ab7abf8991151663715dd12d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/aa1516f04b61ae6c10253ef06b853970e1efe5fb","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/aa1516f04b61ae6c10253ef06b853970e1efe5fb","html_url":"https://github.com/apache/openjpa/commit/aa1516f04b61ae6c10253ef06b853970e1efe5fb","comments_url":"https://api.github.com/repos/apache/openjpa/commits/aa1516f04b61ae6c10253ef06b853970e1efe5fb/comments","author":null,"committer":null,"parents":[{"sha":"991f5a7dcebf7d21cb6d3c8f50f11fc4e189e732","url":"https://api.github.com/repos/apache/openjpa/commits/991f5a7dcebf7d21cb6d3c8f50f11fc4e189e732","html_url":"https://github.com/apache/openjpa/commit/991f5a7dcebf7d21cb6d3c8f50f11fc4e189e732"}],"stats":{"total":405,"additions":368,"deletions":37},"files":[{"sha":"a07400e67af4b072b49f22f42c43b115d32dd69b","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingInfo.java","status":"modified","additions":33,"deletions":4,"changes":37,"blob_url":"https://github.com/apache/openjpa/blob/aa1516f04b61ae6c10253ef06b853970e1efe5fb/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingInfo.java","raw_url":"https://github.com/apache/openjpa/raw/aa1516f04b61ae6c10253ef06b853970e1efe5fb/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingInfo.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingInfo.java?ref=aa1516f04b61ae6c10253ef06b853970e1efe5fb","patch":"@@ -95,6 +95,21 @@ public void setStrategy(String strategy) {\n     public List getColumns() {\n         return (_cols == null) ? Collections.EMPTY_LIST : _cols;\n     }\n+    \n+    /**\n+     * Gets the columns whose table name matches the given table name. \n+     */\n+    public List getColumns(String tableName) {\n+        if (_cols == null) \n+        \treturn Collections.EMPTY_LIST;\n+        List result = new ArrayList();\n+        for (Object col : _cols) {\n+        \tif (StringUtils.equals(((Column)col).getTableName(), \n+        \t\t\ttableName)) \n+        \t\tresult.add(col);\n+        }\n+        return result;\n+    }\n \n     /**\n      * Raw column data.\n@@ -531,10 +546,19 @@ public Table createTable(MetaDataContext context, TableDefaults def,\n         boolean fill = ((MappingRepository) context.getRepository()).\n             getMappingDefaults().defaultMissingInfo();\n         if ((!given.isEmpty() || (!adapt && !fill))\n-            && given.size() != tmplates.length)\n-            throw new MetaDataException(_loc.get(prefix + \"-num-cols\",\n-                context, String.valueOf(tmplates.length),\n-                String.valueOf(given.size())));\n+            && given.size() != tmplates.length) {\n+        \t// also consider when this info has columns from multiple tables\n+        \tgiven = getColumns(table.getName());\n+        \tif ((!adapt && !fill) && given.size() != tmplates.length) {\n+        \t\t// try default table\n+        \t\tgiven = getColumns(\"\");\n+            \tif ((!adapt && !fill) && given.size() != tmplates.length) {\n+            \t\tthrow new MetaDataException(_loc.get(prefix + \"-num-cols\",\n+            \t\t\tcontext, String.valueOf(tmplates.length),\n+            \t\t\tString.valueOf(given.size())));\n+            \t}\n+        \t}\n+        }\n \n         Column[] cols = new Column[tmplates.length];\n         _io = null;\n@@ -547,6 +571,11 @@ public Table createTable(MetaDataContext context, TableDefaults def,\n         }\n         return cols;\n     }\n+    \n+    boolean canMerge(List given, Column[] templates, boolean adapt, boolean fill) {\n+    \treturn !((!given.isEmpty() || (!adapt && !fill)) \n+    \t\t\t&& given.size() != templates.length);\n+    }\n \n     /**\n      * Set the proper internal column I/O metadata for the given column's flags."},{"sha":"6ace6e97f0a6e0df01679ea1842cbf3f3aaba321","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/VersionMappingInfo.java","status":"modified","additions":84,"deletions":5,"changes":89,"blob_url":"https://github.com/apache/openjpa/blob/aa1516f04b61ae6c10253ef06b853970e1efe5fb/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/VersionMappingInfo.java","raw_url":"https://github.com/apache/openjpa/raw/aa1516f04b61ae6c10253ef06b853970e1efe5fb/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/VersionMappingInfo.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/VersionMappingInfo.java?ref=aa1516f04b61ae6c10253ef06b853970e1efe5fb","patch":"@@ -18,12 +18,23 @@\n  */\n package org.apache.openjpa.jdbc.meta;\n \n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.jdbc.meta.strats.NoneVersionStrategy;\n import org.apache.openjpa.jdbc.meta.strats.SuperclassVersionStrategy;\n import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.jdbc.schema.Index;\n import org.apache.openjpa.jdbc.schema.SchemaGroup;\n import org.apache.openjpa.jdbc.schema.Table;\n+import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.util.UserException;\n \n /**\n  * Information about the mapping from a version indicator to the schema, in\n@@ -36,17 +47,59 @@\n public class VersionMappingInfo\n     extends MappingInfo {\n \n+    private static final Localizer _loc = Localizer.forPackage\n+    \t(VersionMappingInfo.class);\n     /**\n      * Return the columns set for this version, based on the given templates.\n      */\n-    public Column[] getColumns(Version version, Column[] tmplates,\n+    public Column[] getColumns(Version version, Column[] templates,\n         boolean adapt) {\n-        Table table = version.getClassMapping().getTable();\n+    \tif (spansMultipleTables(templates))\n+    \t\treturn getMultiTableColumns(version, templates, adapt);\n+        Table table = getSingleTable(version, templates);\n         version.getMappingRepository().getMappingDefaults().populateColumns\n-            (version, table, tmplates);\n-        return createColumns(version, null, tmplates, table, adapt);\n+            (version, table, templates);\n+        return createColumns(version, null, templates, table, adapt);\n     }\n-\n+    \n+    /**\n+     * Return the columns set for this version when the columns are spread \n+     * across multiple tables.\n+     */\n+    public Column[] getMultiTableColumns(Version vers, Column[] templates,\n+            boolean adapt) {\n+    \tTable primaryTable = vers.getClassMapping().getTable();\n+    \tList<String> secondaryTableNames = Arrays.asList(vers\n+    \t\t.getClassMapping().getMappingInfo().getSecondaryTableNames());\n+    \tMap<Table, List<Column>> assign = new HashMap<Table, List<Column>>();\n+    \tfor (Column col : templates) {\n+    \t    String tableName = col.getTableName();\n+    \t    Table table;\n+    \t\tif (StringUtils.isEmpty(tableName) \n+    \t\t  || tableName.equals(primaryTable.getName())) {\n+    \t\t\ttable = primaryTable;\n+    \t\t} else if (secondaryTableNames.contains(tableName)) {\n+    \t\t\ttable = primaryTable.getSchema().getTable(tableName);\n+    \t\t} else {\n+    \t\t\tthrow new UserException(_loc.get(\"bad-version-column-table\", \n+    \t\t\t\t\tcol.getName(), tableName));\n+    \t\t}\n+    \t\tif (!assign.containsKey(table))\n+    \t\t\tassign.put(table, new ArrayList<Column>());\n+    \t\tassign.get(table).add(col);\n+    \t}\n+    \tMappingDefaults def = vers.getMappingRepository().getMappingDefaults();\n+    \tList<Column> result = new ArrayList<Column>();\n+    \tfor (Table table : assign.keySet()) {\n+    \t\tList<Column> cols = assign.get(table);\n+    \t\tColumn[] partTemplates = cols.toArray(new Column[cols.size()]);\n+    \t\tdef.populateColumns(vers, table, partTemplates);\n+    \t\tresult.addAll(Arrays.asList(createColumns(vers, null, partTemplates, \n+    \t\t\t\ttable, adapt)));\n+    \t}\n+    \treturn result.toArray(new Column[result.size()]);\n+    }\n+    \n     /**\n      * Return the index to set on the version columns, or null if none.\n      */\n@@ -86,4 +139,30 @@ public void syncWith(Version version) {\n             && cls.getJoinablePCSuperclassMapping() == null))\n             setStrategy(strat);\n     }\n+    \n+    /**\n+     * Affirms if the given columns belong to more than one tables.\n+     */\n+    boolean spansMultipleTables(Column[] cols) {\n+    \tif (cols == null || cols.length <= 1) \n+    \t\treturn false;\n+    \tSet<String> tables = new HashSet<String>();\n+    \tfor (Column col : cols)\n+    \t\tif (tables.add(col.getTableName()) && tables.size() > 1)\n+    \t\t\treturn true;\n+    \treturn false;\n+    }\n+    \n+    /**\n+     * Gets the table where this version columns are mapped.\n+     */\n+    private Table getSingleTable(Version version, Column[] cols) {\n+    \tif (cols == null || cols.length == 0 \n+    \t || StringUtils.isEmpty(cols[0].getTableName()))\n+    \t\treturn version.getClassMapping().getTable();\n+    \treturn version.getClassMapping().getTable().getSchema()\n+    \t\t.getTable(cols[0].getTableName());\n+    }\n+\n+\n }"},{"sha":"09e17f86d6a9ce92ef9612c68acdbaea5af097ff","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ColumnVersionStrategy.java","status":"modified","additions":25,"deletions":20,"changes":45,"blob_url":"https://github.com/apache/openjpa/blob/aa1516f04b61ae6c10253ef06b853970e1efe5fb/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ColumnVersionStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/aa1516f04b61ae6c10253ef06b853970e1efe5fb/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ColumnVersionStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ColumnVersionStrategy.java?ref=aa1516f04b61ae6c10253ef06b853970e1efe5fb","patch":"@@ -31,6 +31,7 @@\n import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.jdbc.schema.ColumnIO;\n import org.apache.openjpa.jdbc.schema.Index;\n+import org.apache.openjpa.jdbc.schema.Table;\n import org.apache.openjpa.jdbc.sql.Result;\n import org.apache.openjpa.jdbc.sql.Row;\n import org.apache.openjpa.jdbc.sql.RowManager;\n@@ -48,6 +49,7 @@\n  * Uses a single column and corresponding version object.\n  *\n  * @author Marc Prud'hommeaux\n+ * @author Pinaki Poddar\n  */\n public abstract class ColumnVersionStrategy\n     extends AbstractVersionStrategy {\n@@ -110,19 +112,23 @@ protected int compare(Object v1, Object v2) {\n \t/**\n \t * Compare each element of the given arrays that must be of equal size. \n \t * \n-\t * @return If each element comparison results into same sign then returns \n-\t * that sign. If some elements compare equal and all the rest has the same\n-\t * sign then return that sign. Otherwise, return 1.\n+\t * @return If any element of a1 is later than corresponding element of\n+\t * a2 then return 1 i.e. a1 as a whole is later than a2.\n+\t * If each element of a1 is to equal corresponding element of a2 then return\n+\t * 0 i.e. a1 is as a whole equals to a2.\n+\t * else return a negative number i.e. a1 is earlier than a2.\n \t */\n \tprotected int compare(Object[] a1, Object[] a2) {\n \t\tif (a1.length != a2.length)\n \t    \tthrow new InternalException();\n-\t\tSet<Integer> comps = new HashSet<Integer>();\n-\t\tfor (int i = 0; i < a1.length; i++)\n-\t\t\tcomps.add(sign(compare(a1[i], a2[i])));\n-\t\tif (comps.size() == 1 || (comps.size() == 2 && comps.remove(0)))\n-\t\t\treturn comps.iterator().next();\n-\t\treturn 1;\n+\t\tint total = 0;\n+\t\tfor (int i = 0; i < a1.length; i++) {\n+\t\t\tint c =  compare(a1[i], a2[i]);\n+\t\t\tif (c > 0) \n+\t\t\t\treturn 1;\n+\t\t\ttotal += c;\n+\t\t}\n+\t\treturn total;\n \t}\n \t\n \tint sign(int i) {\n@@ -144,11 +150,12 @@ public void map(boolean adapt) {\n         \tfor (int i = 0; i < info.getColumns().size(); i++) {\n                 templates[i] = new Column();\n         \t\tColumn infoColumn = (Column)info.getColumns().get(i);\n+        \t\ttemplates[i].setTableName(infoColumn.getTableName());\n         \t\ttemplates[i].setType(infoColumn.getType());\n         \t\ttemplates[i].setSize(infoColumn.getSize());\n         \t\ttemplates[i].setDecimalDigits(infoColumn.getDecimalDigits());\n         \t\ttemplates[i].setJavaType(getJavaType(i));\n-        \t\ttemplates[i].setName(\"versn\" +i);\n+        \t\ttemplates[i].setName(infoColumn.getName());\n         \t}\n         \tColumn[] cols = info.getColumns(vers, templates, adapt);\n         \tfor (int i = 0; i < cols.length; i++)\n@@ -175,12 +182,11 @@ public void insert(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\n         Column[] cols = vers.getColumns();\n         ColumnIO io = vers.getColumnIO();\n         Object initial = nextVersion(null);\n-        Row row = rm.getRow(vers.getClassMapping().getTable(),\n-            Row.ACTION_INSERT, sm, true);\n-        for (int i = 0; i < cols.length; i++)\n+        for (int i = 0; i < cols.length; i++) {\n+            Row row = rm.getRow(cols[i].getTable(), Row.ACTION_INSERT, sm, true);\n             if (io.isInsertable(i, initial == null))\n                 row.setObject(cols[i], getColumnValue(initial, i));\n-\n+        }\n         // set initial version into state manager\n         Object nextVersion;\n         nextVersion = initial;\n@@ -197,12 +203,11 @@ public void update(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\n         Object curVersion = sm.getVersion();\n         Object nextVersion = nextVersion(curVersion);\n \n-        Row row = rm.getRow(vers.getClassMapping().getTable(),\n-            Row.ACTION_UPDATE, sm, true);\n-        row.setFailedObject(sm.getManagedInstance());\n \n         // set where and update conditions on row\n         for (int i = 0; i < cols.length; i++) {\n+            Row row = rm.getRow(cols[i].getTable(), Row.ACTION_UPDATE, sm, true);\n+            row.setFailedObject(sm.getManagedInstance());\n             if (curVersion != null && sm.isVersionCheckRequired())\n                 row.whereObject(cols[i], getColumnValue(curVersion, i));\n             if (vers.getColumnIO().isUpdatable(i, nextVersion == null))\n@@ -215,14 +220,14 @@ public void update(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\n \n     public void delete(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\n         throws SQLException {\n-        Row row = rm.getRow(vers.getClassMapping().getTable(),\n-            Row.ACTION_DELETE, sm, true);\n-        row.setFailedObject(sm.getManagedInstance());\n         Column[] cols = vers.getColumns();\n \n         Object curVersion = sm.getVersion();\n         Object cur;\n         for (int i = 0; i < cols.length; i++) {\n+            Row row = rm.getRow(cols[i].getTable(),\n+            \tRow.ACTION_DELETE, sm, true);\n+            row.setFailedObject(sm.getManagedInstance());\n             cur = getColumnValue(curVersion, i);\n             // set where and update conditions on row\n             if (cur != null)"},{"sha":"94f8be278e934233c77a124c594b63b207c73bee","filename":"openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/localizer.properties","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/aa1516f04b61ae6c10253ef06b853970e1efe5fb/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/aa1516f04b61ae6c10253ef06b853970e1efe5fb/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/localizer.properties?ref=aa1516f04b61ae6c10253ef06b853970e1efe5fb","patch":"@@ -414,4 +414,6 @@ unique-missing-column: The column \"{1}\" in a unique constraint in \"{0}\" on \\\n \ttable \"{2}\" can not be found in the list of available columns \"{3}\".\n unique-no-table: A unique constraint on table \"{0}\" can not be added to \\\n \tmapping of class \"{1}\" because the table does neither match its primary \\\n-\ttable \"{2}\" nor any of its secondary table(s) \"{3}\".\n\\ No newline at end of file\n+\ttable \"{2}\" nor any of its secondary table(s) \"{3}\".\n+bad-version-column-table: One of the version column \"{0}\" has been associated \\\n+\twith table \"{1}\", but no primary or secondary table of such name exists.\n\\ No newline at end of file"},{"sha":"a469215b85a83ef49fb2b338c9c8c721ecc9ff46","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/aa1516f04b61ae6c10253ef06b853970e1efe5fb/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java","raw_url":"https://github.com/apache/openjpa/raw/aa1516f04b61ae6c10253ef06b853970e1efe5fb/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java?ref=aa1516f04b61ae6c10253ef06b853970e1efe5fb","patch":"@@ -807,6 +807,7 @@ private void parseVersionColumns(ClassMapping cm, VersionColumn... vcols) {\n      */\n     private static Column newColumn(VersionColumn anno) {\n         Column col = new Column();\n+        col.setTableName(anno.table());\n         if (!StringUtils.isEmpty(anno.name()))\n             col.setName(anno.name());\n         if (anno.precision() != 0)"},{"sha":"4302766e495559c8e5d95c7fc6e4066ecbd1d9b6","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/VersionColumn.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/aa1516f04b61ae6c10253ef06b853970e1efe5fb/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/VersionColumn.java","raw_url":"https://github.com/apache/openjpa/raw/aa1516f04b61ae6c10253ef06b853970e1efe5fb/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/VersionColumn.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/VersionColumn.java?ref=aa1516f04b61ae6c10253ef06b853970e1efe5fb","patch":"@@ -49,4 +49,6 @@\n     int precision() default 0; // decimal precision\n \n     int scale() default 0; // decimal scale\n+    \n+    String table() default  \"\";\n }"},{"sha":"ca86a810df08ce06ab9163f69a73e8d4be543bf4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/MultiColumnSecondaryVersionPC.java","status":"added","additions":95,"deletions":0,"changes":95,"blob_url":"https://github.com/apache/openjpa/blob/aa1516f04b61ae6c10253ef06b853970e1efe5fb/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/MultiColumnSecondaryVersionPC.java","raw_url":"https://github.com/apache/openjpa/raw/aa1516f04b61ae6c10253ef06b853970e1efe5fb/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/MultiColumnSecondaryVersionPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/MultiColumnSecondaryVersionPC.java?ref=aa1516f04b61ae6c10253ef06b853970e1efe5fb","patch":"@@ -0,0 +1,95 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.annotations;\r\n+\r\n+import javax.persistence.Column;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.PrimaryKeyJoinColumn;\r\n+import javax.persistence.SecondaryTable;\r\n+import javax.persistence.SecondaryTables;\r\n+import javax.persistence.Table;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.VersionColumn;\r\n+import org.apache.openjpa.persistence.jdbc.VersionColumns;\r\n+import org.apache.openjpa.persistence.jdbc.VersionStrategy;\r\n+\r\n+/**\r\n+ * Persistent entity for testing multiple column numeric version strategy as set\r\n+ * by <code>@VersionColumns</code> annotations and where the version columns are \r\n+ * spread over primary and secondary table(s).\r\n+ * \r\n+ * @author Pinaki Poddar\r\n+ * \r\n+ */\r\n+@Entity\r\n+@Table(name=\"MCSV\")\r\n+@SecondaryTables({ \r\n+\t@SecondaryTable(name = \"MCSV1\", pkJoinColumns=@PrimaryKeyJoinColumn(name=\"ID\")),\r\n+\t@SecondaryTable(name = \"MCSV2\", pkJoinColumns=@PrimaryKeyJoinColumn(name=\"ID\")) \r\n+})\r\n+@VersionStrategy(\"version-numbers\")\r\n+@VersionColumns({ \r\n+\t@VersionColumn(name = \"v11\", table=\"MCSV1\"), \r\n+\t@VersionColumn(name = \"v12\", table=\"MCSV1\"), \r\n+\t@VersionColumn(name = \"v21\", table=\"MCSV2\"),\r\n+\t@VersionColumn(name = \"v01\") // default is the primary table\r\n+})\r\n+public class MultiColumnSecondaryVersionPC {\r\n+\t@Id\r\n+\t@GeneratedValue\r\n+\tprivate long id;\r\n+\r\n+\tprivate String name;\r\n+\t\r\n+\t@Column(table=\"MCSV1\")\r\n+\tprivate String s1;\r\n+\t\r\n+\t@Column(table=\"MCSV2\")\r\n+\tprivate String s2;\r\n+\r\n+\tpublic long getId() {\r\n+\t\treturn id;\r\n+\t}\r\n+\r\n+\tpublic String getName() {\r\n+\t\treturn name;\r\n+\t}\r\n+\r\n+\tpublic void setName(String name) {\r\n+\t\tthis.name = name;\r\n+\t}\r\n+\r\n+\tpublic String getS1() {\r\n+\t\treturn s1;\r\n+\t}\r\n+\r\n+\tpublic void setS1(String s1) {\r\n+\t\tthis.s1 = s1;\r\n+\t}\r\n+\r\n+\tpublic String getS2() {\r\n+\t\treturn s2;\r\n+\t}\r\n+\r\n+\tpublic void setS2(String s2) {\r\n+\t\tthis.s2 = s2;\r\n+\t}\r\n+}\r"},{"sha":"130eac3d614cd7ea8ffcb754011cc611fa94ef99","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/MultiColumnVersionPC.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/aa1516f04b61ae6c10253ef06b853970e1efe5fb/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/MultiColumnVersionPC.java","raw_url":"https://github.com/apache/openjpa/raw/aa1516f04b61ae6c10253ef06b853970e1efe5fb/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/MultiColumnVersionPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/MultiColumnVersionPC.java?ref=aa1516f04b61ae6c10253ef06b853970e1efe5fb","patch":"@@ -21,6 +21,7 @@\n import javax.persistence.Entity;\r\n import javax.persistence.GeneratedValue;\r\n import javax.persistence.Id;\r\n+import javax.persistence.Table;\r\n \r\n import org.apache.openjpa.persistence.jdbc.VersionColumn;\r\n import org.apache.openjpa.persistence.jdbc.VersionColumns;\r\n@@ -36,6 +37,7 @@\n  *\r\n  */\r\n @Entity\r\n+@Table(name=\"MCV\")\r\n @VersionStrategy(\"version-numbers\")\r\n @VersionColumns({\r\n \t@VersionColumn(name=\"v1\"), \r"},{"sha":"172d26ed09f6ad74150f9692898525f14bff5dde","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestMultiColumnVersion.java","status":"modified","additions":78,"deletions":7,"changes":85,"blob_url":"https://github.com/apache/openjpa/blob/aa1516f04b61ae6c10253ef06b853970e1efe5fb/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestMultiColumnVersion.java","raw_url":"https://github.com/apache/openjpa/raw/aa1516f04b61ae6c10253ef06b853970e1efe5fb/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestMultiColumnVersion.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestMultiColumnVersion.java?ref=aa1516f04b61ae6c10253ef06b853970e1efe5fb","patch":"@@ -19,31 +19,37 @@\n package org.apache.openjpa.persistence.jdbc.annotations;\r\n \r\n import java.lang.reflect.Array;\r\n-import java.util.Arrays;\r\n \r\n import org.apache.openjpa.jdbc.meta.ClassMapping;\r\n import org.apache.openjpa.jdbc.meta.strats.MultiColumnVersionStrategy;\r\n import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n \r\n /**\r\n- * Tests numeric version spanning multiple columns. \r\n+ * Tests numeric version spanning multiple columns and those columns spanning\r\n+ * multiple tables. \r\n  *\r\n  * @author Pinaki Poddar\r\n  */\r\n public class TestMultiColumnVersion extends SingleEMFTestCase {\r\n     public void setUp() {\r\n-        setUp(MultiColumnVersionPC.class, CLEAR_TABLES);\r\n+        setUp(MultiColumnVersionPC.class, MultiColumnSecondaryVersionPC.class,\r\n+        \t\tCLEAR_TABLES);\r\n     }\r\n     \r\n     public void testVersionStrategyIsSet() {\r\n-    \tClassMapping mapping = getMapping(MultiColumnVersionPC.class);\r\n+    \tassertStrategy(MultiColumnVersionPC.class);\r\n+    \tassertStrategy(MultiColumnSecondaryVersionPC.class);\r\n+    }\r\n+    \r\n+    public void assertStrategy(Class cls) {\r\n+    \tClassMapping mapping = getMapping(cls);\r\n     \tassertNotNull(mapping.getVersion());\r\n     \tassertTrue(mapping.getVersion().getStrategy() \r\n     \t\tinstanceof MultiColumnVersionStrategy);\r\n     }\r\n     \r\n-    public void testVersionOnPersistAndUpdate() {\r\n+    public void testVersionOnPersistAndUpdateForSingleTable() {\r\n     \tOpenJPAEntityManager em = emf.createEntityManager();\r\n     \tem.getTransaction().begin();\r\n         MultiColumnVersionPC pc = new MultiColumnVersionPC();\r\n@@ -59,7 +65,7 @@ public void testVersionOnPersistAndUpdate() {\n         assertVersionEquals(new Number[]{2,2, 2.0f}, em.getVersion(pc));\r\n     }\r\n \r\n-    public void testConcurrentOptimisticUpdateFails() {\r\n+    public void testConcurrentOptimisticUpdateFailsForSingleTable() {\r\n     \tOpenJPAEntityManager em1 = emf.createEntityManager();\r\n         em1.getTransaction().begin();\r\n         OpenJPAEntityManager em2 = emf.createEntityManager();\r\n@@ -88,7 +94,7 @@ public void testConcurrentOptimisticUpdateFails() {\n         }\r\n     }\r\n \r\n-    public void testConcurrentOptimisticReadSucceeds() {\r\n+    public void testConcurrentOptimisticReadSucceedsForSingleTable() {\r\n     \tOpenJPAEntityManager em1 = emf.createEntityManager();\r\n         em1.getTransaction().begin();\r\n         OpenJPAEntityManager em2 = emf.createEntityManager();\r\n@@ -108,6 +114,71 @@ public void testConcurrentOptimisticReadSucceeds() {\n         em2.getTransaction().commit();\r\n     }\r\n     \r\n+    public void testVersionOnPersistAndUpdateForMultiTable() {\r\n+    \tOpenJPAEntityManager em = emf.createEntityManager();\r\n+    \tem.getTransaction().begin();\r\n+    \tMultiColumnSecondaryVersionPC pc = new MultiColumnSecondaryVersionPC();\r\n+        assertEquals(null, em.getVersion(pc));\r\n+        em.persist(pc);\r\n+        em.getTransaction().commit();\r\n+        assertVersionEquals(new Number[]{1,1,1,1}, em.getVersion(pc));\r\n+    \t\r\n+    \tem.getTransaction().begin();\r\n+    \tpc.setName(\"updated\");\r\n+    \tem.merge(pc);\r\n+        em.getTransaction().commit();\r\n+        assertVersionEquals(new Number[]{2,2,2,2}, em.getVersion(pc));\r\n+    }\r\n+\r\n+    public void testConcurrentOptimisticUpdateFailsForMultiTable() {\r\n+    \tOpenJPAEntityManager em1 = emf.createEntityManager();\r\n+        em1.getTransaction().begin();\r\n+        OpenJPAEntityManager em2 = emf.createEntityManager();\r\n+        em2.getTransaction().begin();\r\n+\r\n+    \tMultiColumnSecondaryVersionPC pc1 = new MultiColumnSecondaryVersionPC();\r\n+        em1.persist(pc1);\r\n+        em1.getTransaction().commit();\r\n+        em1.getTransaction().begin();\r\n+        Object oid = em1.getObjectId(pc1);\r\n+        \r\n+        \r\n+        MultiColumnSecondaryVersionPC pc2 = em2.find(MultiColumnSecondaryVersionPC.class, oid);\r\n+        assertVersionEquals(em1.getVersion(pc1), em2.getVersion(pc2));\r\n+        \r\n+        pc1.setName(\"Updated in em1\");\r\n+        pc2.setName(\"Updated in em2\");\r\n+        em1.getTransaction().commit();\r\n+        \r\n+        try {\r\n+            em2.getTransaction().commit();\r\n+            fail(\"Optimistic fail\");\r\n+        } catch (Exception e) {\r\n+        } finally {\r\n+            em2.close();\r\n+        }\r\n+    }\r\n+\r\n+    public void testConcurrentOptimisticReadSucceedsForMultiTable() {\r\n+    \tOpenJPAEntityManager em1 = emf.createEntityManager();\r\n+        em1.getTransaction().begin();\r\n+        OpenJPAEntityManager em2 = emf.createEntityManager();\r\n+        em2.getTransaction().begin();\r\n+\r\n+    \tMultiColumnSecondaryVersionPC pc1 = new MultiColumnSecondaryVersionPC();\r\n+        em1.persist(pc1);\r\n+        em1.getTransaction().commit();\r\n+        em1.getTransaction().begin();\r\n+        Object oid = em1.getObjectId(pc1);\r\n+        \r\n+        \r\n+    \tMultiColumnSecondaryVersionPC pc2 = em2.find(MultiColumnSecondaryVersionPC.class, oid);\r\n+        assertVersionEquals(em1.getVersion(pc1), em2.getVersion(pc2));\r\n+        \r\n+        em1.getTransaction().commit();\r\n+        em2.getTransaction().commit();\r\n+    }\r\n+\r\n     static void assertVersionEquals(Object expected, Object actual) {\r\n     \tassertTrue(expected.getClass().isArray());\r\n     \tassertTrue(actual.getClass().isArray());\r"},{"sha":"6568282406e65ce1a60908a05cf39508b016a2b9","filename":"openjpa-project/src/doc/manual/ref_guide_mapping.xml","status":"modified","additions":45,"deletions":0,"changes":45,"blob_url":"https://github.com/apache/openjpa/blob/aa1516f04b61ae6c10253ef06b853970e1efe5fb/openjpa-project/src/doc/manual/ref_guide_mapping.xml","raw_url":"https://github.com/apache/openjpa/raw/aa1516f04b61ae6c10253ef06b853970e1efe5fb/openjpa-project/src/doc/manual/ref_guide_mapping.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_mapping.xml?ref=aa1516f04b61ae6c10253ef06b853970e1efe5fb","patch":"@@ -1629,6 +1629,11 @@ values. Each <classname>VersionColumn</classname> has the following properties:\n                 </listitem>\r\n                 <listitem>\r\n                     <para>\r\n+<literal>String table</literal>                     \r\n+                    </para>\r\n+                </listitem>\r\n+                <listitem>\r\n+                    <para>\r\n <literal>int length</literal>\r\n                     </para>\r\n                 </listitem>\r\n@@ -1674,6 +1679,46 @@ strategy. You can choose a different strategy with the <classname>\n VersionStrategy</classname> annotation described in\r\n <xref linkend=\"version-strategy\"/>.\r\n             </para>\r\n+            <para>\r\n+If multiple columns are used for surrogate versioning, then each column,\r\n+by default, uses a version number. But column definition for each version \r\n+column can be set independently to other numeric types. The version values are\r\n+compared to detect optimistic concurrent modification. Such comparison must\r\n+determine whether a version value <literal>v1</literal> represents an earlier,\r\n+later or same with respect to another version value <literal>v2</literal>. While\r\n+result of such comparison is obvious for a single numeric column that \r\n+monotonically increases on each update, the same is not true when version value\r\n+is an array of numbers. By default, OpenJPA compares a version \r\n+<literal>v1</literal> as later than another version <literal>v2</literal>, \r\n+if any array element of <literal>v1</literal> is \r\n+later than the corresponding element of <literal>v2</literal>. \r\n+<literal>v1</literal> is equal to <literal>v2</literal> if every array element\r\n+is equal and <literal>v1</literal> is earlier to <literal>v1</literal> if some\r\n+elements of <literal>v1</literal> are earlier and rest are equal to corresponding\r\n+element of <literal>v2</literal>.\r\n+        </para>\r\n+        <para>\r\n+Multiple surrogate version columns can be spread across primary and secondary\r\n+tables. For example, following example shows 3 version columns \r\n+<literal>v01, v11, v12, v21</literal> defined across the primary and secondary tables of \r\n+a persistent entity       \r\n+        </para>\r\n+        <programlisting>\r\n+@Entity\r\n+@Table(name=\"PRIMARY\")\r\n+@SecondaryTables({ \r\n+    @SecondaryTable(name = \"SECONDARY_1\"),\r\n+    @SecondaryTable(name = \"SECONDARY_2\") \r\n+})\r\n+@VersionStrategy(\"version-numbers\")\r\n+@VersionColumns({ \r\n+    @VersionColumn(name = \"v01\") // default is the PRIMARY table\r\n+    @VersionColumn(name = \"v11\", table=\"SECONDARY_1\", columnDefinition=\"FLOAT\", scale=3, precision=10), \r\n+    @VersionColumn(name = \"v12\", table=\"SECONDARY_1\"), \r\n+    @VersionColumn(name = \"v21\", table=\"SECONDARY_2\"),\r\n+})\r\n+</programlisting>\r\n+\r\n         </section>\r\n         <section id=\"ref_guide_mapping_jpa_columns\">\r\n             <title>\r"}]}

