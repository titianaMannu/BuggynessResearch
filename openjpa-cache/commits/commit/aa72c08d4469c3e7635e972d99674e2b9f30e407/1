{"sha":"aa72c08d4469c3e7635e972d99674e2b9f30e407","node_id":"MDY6Q29tbWl0MjA2MzY0OmFhNzJjMDhkNDQ2OWMzZTc2MzVlOTcyZDk5Njc0ZTJiOWYzMGU0MDc=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-07-30T14:36:53Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-07-30T14:36:53Z"},"message":"OPENJPA-1211: \nAdd getPath method to FromImpl.\nRemove @allowFailure annotation from passing testcases in TestStringCriteria. \n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@799289 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"69e0ca019989060ee4a2eba0954a0fe391c23507","url":"https://api.github.com/repos/apache/openjpa/git/trees/69e0ca019989060ee4a2eba0954a0fe391c23507"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/aa72c08d4469c3e7635e972d99674e2b9f30e407","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/aa72c08d4469c3e7635e972d99674e2b9f30e407","html_url":"https://github.com/apache/openjpa/commit/aa72c08d4469c3e7635e972d99674e2b9f30e407","comments_url":"https://api.github.com/repos/apache/openjpa/commits/aa72c08d4469c3e7635e972d99674e2b9f30e407/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"d35e668190ec027c629adfd74c40f76daa9e2edf","url":"https://api.github.com/repos/apache/openjpa/commits/d35e668190ec027c629adfd74c40f76daa9e2edf","html_url":"https://github.com/apache/openjpa/commit/d35e668190ec027c629adfd74c40f76daa9e2edf"}],"stats":{"total":57,"additions":43,"deletions":14},"files":[{"sha":"7e4755dc68fa2880e2024547e820005838af33af","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestStringCriteria.java","status":"modified","additions":23,"deletions":14,"changes":37,"blob_url":"https://github.com/apache/openjpa/blob/aa72c08d4469c3e7635e972d99674e2b9f30e407/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestStringCriteria.java","raw_url":"https://github.com/apache/openjpa/raw/aa72c08d4469c3e7635e972d99674e2b9f30e407/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestStringCriteria.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestStringCriteria.java?ref=aa72c08d4469c3e7635e972d99674e2b9f30e407","patch":"@@ -19,13 +19,16 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.math.BigDecimal;\n+import java.util.Set;\n \n import javax.persistence.Parameter;\n import javax.persistence.criteria.CriteriaQuery;\n+import javax.persistence.criteria.Expression;\n import javax.persistence.criteria.Join;\n import javax.persistence.criteria.JoinType;\n import javax.persistence.criteria.ListJoin;\n import javax.persistence.criteria.MapJoin;\n+import javax.persistence.criteria.Path;\n import javax.persistence.criteria.Root;\n import javax.persistence.criteria.SetJoin;\n import javax.persistence.criteria.Subquery;\n@@ -60,7 +63,6 @@ public void testJoins1() {\n         assertEquivalence(q, jpql);\n     }\n \n-    @AllowFailure\n     public void testJoins2() {\n         String jpql = \"SELECT c FROM Customer c LEFT JOIN c.orders o WHERE \"\n                 + \"c.status = 1\";\n@@ -101,7 +103,6 @@ public void testPathNavigation() {\n         assertEquivalence(q, jpql);\n     }\n \n-    @AllowFailure\n     public void testKey() {\n         String jpql = \"SELECT i.name, p FROM Item i JOIN i.photos p \"\n                 + \"WHERE KEY(p) LIKE '%egret%'\";\n@@ -115,7 +116,6 @@ public void testKey() {\n         assertEquivalence(q, jpql);\n     }\n \n-    @AllowFailure\n     public void testRestrictQueryResult() {\n         String jpql = \"SELECT t FROM CreditCard c JOIN c.transactionHistory t \"\n                 + \"WHERE c.customer.accountNum = 321987 AND INDEX(t) BETWEEN 0 \"\n@@ -204,19 +204,30 @@ public void testCase() {\n         String jpql = \"SELECT e.name, CASE WHEN e.rating = 1 THEN e.salary * 1.1 \"\n                 + \"WHEN e.rating = 2 THEN e.salary * 1.2 ELSE e.salary * 1.01 END \"\n                 + \"FROM Employee e WHERE e.department.name = 'Engineering'\";\n-        CriteriaQuery q = cb.createQuery();\n+        CriteriaQuery<Employee> q = cb.createQuery(Employee.class);\n         Root<Employee> e = q.from(Employee.class);\n         q.where(cb.equal(e.get(\"department\").get(\"name\"), \"Engineering\"));\n         q.multiselect(e.get(\"name\"), cb.selectCase().when(\n-                cb.equal(e.get(\"rating\"), 1), 1.1) // cb.prod(e.get(\"salary\"),\n-                                                   // 1.1))\n-                .when(cb.equal(e.get(\"rating\"), 2), 1.2) // cb.prod(e.get(\"salary\"),\n-                                                         // 1.2))\n-                .otherwise(1.01)); // cb.prod(e.get(\"salary\"), 1.01)));\n-\n+                cb.equal(e.get(\"rating\"), 1), 1.1)       // cb.prod(e.get(\"salary\"), 1.1))\n+                .when(cb.equal(e.get(\"rating\"), 2), 1.2) // cb.prod(e.get(\"salary\"), 1.2))\n+                .otherwise(1.01));                       // cb.prod(e.get(\"salary\"), 1.01)));\n         assertEquivalence(q, jpql);\n     }\n-\n+//    \n+//    public void testABCDEFG() {\n+//        String jpql = \"SELECT e.name, CASE WHEN e.rating = 1 THEN e.salary * 1.1 \"\n+//                + \"WHEN e.rating = 2 THEN e.salary * 1.2 ELSE e.salary * 1.01 END \"\n+//                + \"FROM Employee e WHERE e.department.name = 'Engineering'\";\n+//        CriteriaQuery<Employee> q = cb.createQuery(Employee.class);\n+//        Root<Employee> e = q.from(Employee.class);\n+//        q.where(cb.equal(e.get(Employee_.department).get(Department_.name), \"Engineering\"));\n+//        q.multiselect(e.get(Employee_.name), cb.selectCase().when(\n+//                cb.equal(e.get(Employee_.rating), 1), 1.1)       // cb.prod(e.get(\"salary\"), 1.1))\n+//                .when(cb.equal(e.get(Employee_.rating), 2), 1.2) // cb.prod(e.get(\"salary\"), 1.2))\n+//                .otherwise(1.01));                       // cb.prod(e.get(\"salary\"), 1.01)));\n+//        assertEquivalence(q, jpql);\n+//    }\n+    \n     /*\n      * @AllowFailure public void testLiterals() { String jpql =\n      * \"SELECT p FROM Person p where 'Joe' MEMBER OF \" + \"p.nickNames\";\n@@ -230,7 +241,7 @@ public void testCase() {\n     @AllowFailure\n     public void testParameters() {\n         String jpql = \"SELECT c FROM Customer c Where c.status = :stat\";\n-        CriteriaQuery q = cb.createQuery();\n+        CriteriaQuery<Customer> q = cb.createQuery(Customer.class);\n         Root<Customer> c = q.from(Customer.class);\n         Parameter<Integer> param = cb.parameter(Integer.class);\n         q.select(c).where(cb.equal(c.get(\"status\"), param));\n@@ -284,7 +295,6 @@ public void testSubquery1() {\n         assertEquivalence(q, jpql);\n     }\n \n-    @AllowFailure\n     public void testSubquery2() {\n         String jpql = \"SELECT DISTINCT emp FROM Employee emp WHERE EXISTS (\"\n                 + \"SELECT spouseEmp FROM Employee spouseEmp WHERE spouseEmp = \"\n@@ -319,7 +329,6 @@ public void testSubquery3() {\n         assertEquivalence(q, jpql);\n     }\n \n-    @AllowFailure\n     public void testSubquery4() {\n         String jpql = \"SELECT c FROM Customer c WHERE \"\n                 + \"(SELECT COUNT(o) FROM c.orders o) > 10\";"},{"sha":"5cdd411632166dd9404e56ef96b73b9995d902db","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/FromImpl.java","status":"modified","additions":20,"deletions":0,"changes":20,"blob_url":"https://github.com/apache/openjpa/blob/aa72c08d4469c3e7635e972d99674e2b9f30e407/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/FromImpl.java","raw_url":"https://github.com/apache/openjpa/raw/aa72c08d4469c3e7635e972d99674e2b9f30e407/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/FromImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/FromImpl.java?ref=aa72c08d4469c3e7635e972d99674e2b9f30e407","patch":"@@ -28,7 +28,9 @@\n import javax.persistence.criteria.JoinType;\n import javax.persistence.criteria.ListJoin;\n import javax.persistence.criteria.MapJoin;\n+import javax.persistence.criteria.Path;\n import javax.persistence.criteria.SetJoin;\n+import javax.persistence.metamodel.Attribute;\n import javax.persistence.metamodel.CollectionAttribute;\n import javax.persistence.metamodel.ListAttribute;\n import javax.persistence.metamodel.MapAttribute;\n@@ -38,6 +40,7 @@\n \n import org.apache.openjpa.persistence.meta.AbstractManagedType;\n import org.apache.openjpa.persistence.meta.Members;\n+import org.apache.openjpa.persistence.meta.Members.Member;\n \n /**\n  * Represents a bound type, usually an entity that appears in the from clause, \n@@ -249,5 +252,22 @@ private void addJoin(Join<X,?> join) {\n         _fetches.add(fetch);\n         return fetch;\n     }\n+    \n+    /**\n+     * Return a path to the specified field.  \n+     */\n+    public <Y> Path<Y> get(String attName) {\n+        Member<? super X, ?> member = null;\n+        for (Attribute<? super X, ?> a : type.getAttributes()) { \n+            if(a instanceof Member<?, ?>){ \n+                if(a.getName().equals(attName)) { \n+                    member = ((Member<? super X,?>)a);\n+                    break;\n+                }\n+            }\n+        }\n+        // TODO check for null member\n+        return new PathImpl(this, member, (Class<X>) member.getJavaType());\n+    }        \n \n }"}]}

