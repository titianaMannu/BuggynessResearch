{"sha":"aa88b32b06ec37c1b618d3e4c2d552b852a0b1b5","node_id":"MDY6Q29tbWl0MjA2MzY0OmFhODhiMzJiMDZlYzM3YzFiNjE4ZDNlNGMyZDU1MmI4NTJhMGIxYjU=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2011-05-10T16:00:44Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2011-05-10T16:00:44Z"},"message":"OPENJPA-1725: make old behavior optional\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1101519 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c900d2df8cc6fe2d127347910def764688266cf2","url":"https://api.github.com/repos/apache/openjpa/git/trees/c900d2df8cc6fe2d127347910def764688266cf2"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/aa88b32b06ec37c1b618d3e4c2d552b852a0b1b5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/aa88b32b06ec37c1b618d3e4c2d552b852a0b1b5","html_url":"https://github.com/apache/openjpa/commit/aa88b32b06ec37c1b618d3e4c2d552b852a0b1b5","comments_url":"https://api.github.com/repos/apache/openjpa/commits/aa88b32b06ec37c1b618d3e4c2d552b852a0b1b5/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"1125b86310b7c08efb2b524633acec52840093e1","url":"https://api.github.com/repos/apache/openjpa/commits/1125b86310b7c08efb2b524633acec52840093e1","html_url":"https://github.com/apache/openjpa/commit/1125b86310b7c08efb2b524633acec52840093e1"}],"stats":{"total":16,"additions":12,"deletions":4},"files":[{"sha":"a93d6cea7c431c3008f4fff3800eaac0ee891add","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Table.java","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/aa88b32b06ec37c1b618d3e4c2d552b852a0b1b5/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Table.java","raw_url":"https://github.com/apache/openjpa/raw/aa88b32b06ec37c1b618d3e4c2d552b852a0b1b5/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Table.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Table.java?ref=aa88b32b06ec37c1b618d3e4c2d552b852a0b1b5","patch":"@@ -178,13 +178,18 @@ public DBIdentifier getIdentifier() {\n     /**\n      * Set the name of the table. This method can only be called on tables\n      * that are not part of a schema.\n-     * @deprecated use setIdentifier(DBIdentifier) instead.\n+     * @deprecated use {@link #setIdentifier(DBIdentifier)} instead.\n      */\n     @Deprecated\n     public void setName(String name) {\n         setIdentifier(DBIdentifier.newTable(name));\n     }\n \n+    /**\n+     * Set the name of the table. This method can only be called on tables which are not part of a schema. \n+     * @param name The name of the table. \n+     * @throws IllegalStateException if {@link #getSchema()} does not return null. \n+     */\n     public void setIdentifier(DBIdentifier name) {\n         if (getSchema() != null)\n             throw new IllegalStateException();"},{"sha":"ce1e045520793a70f026808da7eb9b5f52ea4154","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","status":"modified","additions":6,"deletions":3,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/aa88b32b06ec37c1b618d3e4c2d552b852a0b1b5/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/aa88b32b06ec37c1b618d3e4c2d552b852a0b1b5/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java?ref=aa88b32b06ec37c1b618d3e4c2d552b852a0b1b5","patch":"@@ -337,6 +337,7 @@\n     public boolean supportsNullTableForGetImportedKeys = false;\n     public boolean useGetBestRowIdentifierForPrimaryKeys = false;\n     public boolean requiresAutoCommitForMetaData = false;\n+    public boolean tableLengthIncludesSchema = false; \n \n     // auto-increment\n     public int maxAutoAssignNameLength = 31;\n@@ -3317,7 +3318,9 @@ protected DBIdentifier makeNameValid(DBIdentifier name, NameSet set, int maxLen,\n      */\n     public String[] getCreateTableSQL(Table table) {\n         StringBuilder buf = new StringBuilder();\n-        String tableName = checkNameLength(getFullIdentifier(table, false), maxTableNameLength, \"long-table-name\");\n+        String tableName =\n+            checkNameLength(getFullIdentifier(table, false), maxTableNameLength, \"long-table-name\",\n+                tableLengthIncludesSchema);\n         buf.append(\"CREATE TABLE \").append(tableName);\n         if (supportsComments && table.hasComment()) {\n             buf.append(\" \");\n@@ -5272,7 +5275,7 @@ final String checkNameLength(String name, int length, String msgKey) {\n      * @param msgKey    message identifier for the exception.\n      * @param qualified If true the qualified name of the DBIdentifier will be used. \n      * \n-     * @throws @{link UserException} with the given message key if the given name is indeed longer.\n+     * @throws {@link UserException} with the given message key if the given name is indeed longer.\n      * @return the same name.\n      */\n     final String checkNameLength(DBIdentifier identifier, int length, String msgKey) {\n@@ -5288,7 +5291,7 @@ final String checkNameLength(DBIdentifier identifier, int length, String msgKey)\n      * @param msgKey    message identifier for the exception.\n      * @param qualified If true the qualified name of the DBIdentifier will be used. \n      * \n-     * @throws @{link UserException} with the given message key if the given name is indeed longer.\n+     * @throws {@link UserException} with the given message key if the given name is indeed longer.\n      * @return the same name.\n      */\n     final String checkNameLength(DBIdentifier identifier, int length, String msgKey, boolean qualified) {"}]}

