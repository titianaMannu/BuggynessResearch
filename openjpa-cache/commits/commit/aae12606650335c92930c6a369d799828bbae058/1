{"sha":"aae12606650335c92930c6a369d799828bbae058","node_id":"MDY6Q29tbWl0MjA2MzY0OmFhZTEyNjA2NjUwMzM1YzkyOTMwYzZhMzY5ZDc5OTgyOGJiYWUwNTg=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-08-14T20:52:16Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-08-14T20:52:16Z"},"message":"OPENJPA-693: Support 1.5 directional mapping where Parent maps its Children but Child refers to Parent via Parent's primary key value. Introduces a concept of implicit ForeignKey that marks the shared mapped column without any database schema impact.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@686037 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2d704ad8bec53baf90a6a1e6511d7da92e9854fd","url":"https://api.github.com/repos/apache/openjpa/git/trees/2d704ad8bec53baf90a6a1e6511d7da92e9854fd"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/aae12606650335c92930c6a369d799828bbae058","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/aae12606650335c92930c6a369d799828bbae058","html_url":"https://github.com/apache/openjpa/commit/aae12606650335c92930c6a369d799828bbae058","comments_url":"https://api.github.com/repos/apache/openjpa/commits/aae12606650335c92930c6a369d799828bbae058/comments","author":null,"committer":null,"parents":[{"sha":"404cbbf99bad44d769250020bc38a2f499d152ea","url":"https://api.github.com/repos/apache/openjpa/commits/404cbbf99bad44d769250020bc38a2f499d152ea","html_url":"https://github.com/apache/openjpa/commit/404cbbf99bad44d769250020bc38a2f499d152ea"}],"stats":{"total":783,"additions":769,"deletions":14},"files":[{"sha":"ef884924a4844980bbf8dc24d4ab93248b038909","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingInfo.java","status":"modified","additions":33,"deletions":3,"changes":36,"blob_url":"https://github.com/apache/openjpa/blob/aae12606650335c92930c6a369d799828bbae058/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingInfo.java","raw_url":"https://github.com/apache/openjpa/raw/aae12606650335c92930c6a369d799828bbae058/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingInfo.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingInfo.java?ref=aae12606650335c92930c6a369d799828bbae058","patch":"@@ -71,6 +71,7 @@\n     private boolean _canIdx = true;\n     private boolean _canUnq = true;\n     private boolean _canFK = true;\n+    private boolean _implicitRelation = false;\n     private int _join = JOIN_NONE;\n     private ColumnIO _io = null;\n \n@@ -130,6 +131,30 @@ public void setCanIndex(boolean indexable) {\n         _canIdx = indexable;\n     }\n \n+    /** \n+\t *  Affirms if this instance represents an implicit relation. For example, a \n+\t *  relation expressed as the value of primary key of the related class and \n+\t *  not as object reference.\n+     *\n+     * @since 1.3.0\n+     */\n+    public boolean isImplicitRelation() {\n+    \treturn _implicitRelation;\n+    }\n+    \n+    /**\n+     * Sets a marker to imply a logical relation that can not have any physical\n+     * manifest in the database. For example, a relation expressed as the value\n+     * of primary key of the related class and not as object reference.\n+     * Populated from @ForeignKey(implicit=true) annotation.\n+     * The mutator can only transit from false to true but not vice versa.\n+     * \n+     * @since 1.3.0\n+     */\n+    public void setImplicitRelation(boolean flag) {\n+    \t_implicitRelation |= flag;\n+    }\n+\n     /**\n      * Raw foreign key information.\n      */\n@@ -280,7 +305,7 @@ public void copy(MappingInfo info) {\n             else\n                 _canFK = info.canForeignKey();\n         }\n-\n+        _implicitRelation = info.isImplicitRelation();\n         List cols = getColumns();\n         List icols = info.getColumns();\n         if (!icols.isEmpty() && (cols.isEmpty()\n@@ -386,10 +411,11 @@ public void assertNoUnique(MetaDataContext context, boolean die) {\n     }\n \n     /**\n-     * Assert that the user did not try to place a foreign key on this mapping.\n+     * Assert that the user did not try to place a foreign key on this mapping\n+     * or placed an implicit foreign key. \n      */\n     public void assertNoForeignKey(MetaDataContext context, boolean die) {\n-        if (_fk == null)\n+        if (_fk == null || isImplicitRelation())\n             return;\n \n         Message msg = _loc.get(\"unexpected-fk\", context);\n@@ -610,6 +636,7 @@ else if (dotIdx != -1) {\n         String defStr = tmplate.getDefaultString();\n         boolean autoAssign = tmplate.isAutoAssigned();\n         boolean relationId = tmplate.isRelationId();\n+        boolean implicitRelation = tmplate.isImplicitRelation();\n         String targetField = tmplate.getTargetField();\n         if (given != null) {\n             // use given type if provided, but warn if it isn't compatible with\n@@ -640,6 +667,8 @@ else if (dotIdx != -1) {\n                 autoAssign = true;\n             if (given.isRelationId())\n                 relationId = true;\n+            if (given.isImplicitRelation())\n+            \timplicitRelation = true;\n         }\n \n         // default char column size if original type is char (test original\n@@ -684,6 +713,7 @@ else if (col.getJavaType() == JavaTypes.OBJECT) {\n         }\n         col.setAutoAssigned(autoAssign);\n         col.setRelationId(relationId);\n+        col.setImplicitRelation(implicitRelation);\n         col.setTargetField(targetField);\n \n         // we need this for runtime, and the dynamic schema factory might"},{"sha":"6c69604a31e8f27ad416456f6c92d2d86e8b1d92","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerStrategies.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/aae12606650335c92930c6a369d799828bbae058/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerStrategies.java","raw_url":"https://github.com/apache/openjpa/raw/aae12606650335c92930c6a369d799828bbae058/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerStrategies.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerStrategies.java?ref=aae12606650335c92930c6a369d799828bbae058","patch":"@@ -62,6 +62,9 @@\n         if (cols.length > 0 && cols[0].getTable() == null) {\n             cols = vinfo.getColumns(vm, name, cols,\n                 vm.getFieldMapping().getTable(), adapt);\n+            if (vinfo.isImplicitRelation())\n+            \tfor (int i = 0; i < cols.length; i++)\n+            \t\tcols[i].setImplicitRelation(true);\n             ColumnIO mappedIO = vinfo.getColumnIO();\n             vm.setColumns(cols);\n             vm.setColumnIO(mappedIO);\n@@ -138,7 +141,7 @@ private static boolean canSetAny(Row row, ColumnIO io, Column[] cols) {\n     }\n \n     /**\n-     * Set a value into a row, taking care not to override column defualts\n+     * Set a value into a row, taking care not to override column defaults\n      * with nulls unless the user wants us to.\n      */\n     private static void set(Row row, Column col, Object val,"},{"sha":"f6ce8455f37e489c49fa8f18ae4f003adf96d7ed","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/PrimitiveFieldStrategy.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/aae12606650335c92930c6a369d799828bbae058/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/PrimitiveFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/aae12606650335c92930c6a369d799828bbae058/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/PrimitiveFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/PrimitiveFieldStrategy.java?ref=aae12606650335c92930c6a369d799828bbae058","patch":"@@ -84,7 +84,9 @@ public void map(boolean adapt) {\n             new Column[]{ tmpCol }, field.getTable(), adapt);\n         if (field.getValueStrategy() == ValueStrategies.AUTOASSIGN)\n             cols[0].setAutoAssigned(true);\n-\n+        if (vinfo.isImplicitRelation())\n+        \tfor (int i = 0; i < cols.length; i++)\n+        \t\tcols[i].setImplicitRelation(true);\n         field.setColumns(cols);\n         field.setColumnIO(vinfo.getColumnIO());\n         field.mapConstraints(field.getName(), adapt);"},{"sha":"c965518ede6d5cafd62db8a8959794a6a87e2630","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Column.java","status":"modified","additions":27,"deletions":0,"changes":27,"blob_url":"https://github.com/apache/openjpa/blob/aae12606650335c92930c6a369d799828bbae058/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Column.java","raw_url":"https://github.com/apache/openjpa/raw/aae12606650335c92930c6a369d799828bbae058/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Column.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Column.java?ref=aae12606650335c92930c6a369d799828bbae058","patch":"@@ -65,6 +65,7 @@\n     private Boolean _notNull = null;\n     private boolean _autoAssign = false;\n     private boolean _rel = false;\n+    private boolean _implicitRelation = false;\n     private String _target = null;\n     private String _targetField = null;\n     private int _flags = 0;\n@@ -712,6 +713,8 @@ public void copy(Column from) {\n             setAutoAssigned(from.isAutoAssigned());\n         if (!isRelationId())\n             setRelationId(from.isRelationId());\n+        if (!isImplicitRelation())\n+        \tsetImplicitRelation(from.isRelationId());\n         if (getTarget() == null)\n             setTarget(from.getTarget());\n         if (getTargetField() == null)\n@@ -746,4 +749,28 @@ public String getComment() {\n     public void setComment(String comment) {\n         _comment = comment;\n     }\n+    \n+    /** \n+\t *  Affirms if this instance represents an implicit relation. For example, a \n+\t *  relation expressed as the value of primary key of the related class and \n+\t *  not as object reference.\n+     *\n+     * @since 1.3.0\n+     */\n+    public boolean isImplicitRelation() {\n+    \treturn _implicitRelation;\n+    }\n+    \n+    /**\n+     * Sets a marker to imply a logical relation that can not have any physical\n+     * manifest in the database. For example, a relation expressed as the value\n+     * of primary key of the related class and not as object reference.\n+     * Populated from @ForeignKey(implicit=true) annotation.\n+     * The mutator can only transit from false to true but not vice versa.\n+     * \n+     * @since 1.3.0\n+     */\n+    public void setImplicitRelation(boolean flag) {\n+    \t_implicitRelation |= flag;\n+    }\n }"},{"sha":"968ff5ad5bbcbc338053ec402712879de4c3b36f","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PrimaryRow.java","status":"modified","additions":25,"deletions":5,"changes":30,"blob_url":"https://github.com/apache/openjpa/blob/aae12606650335c92930c6a369d799828bbae058/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PrimaryRow.java","raw_url":"https://github.com/apache/openjpa/raw/aae12606650335c92930c6a369d799828bbae058/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PrimaryRow.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PrimaryRow.java?ref=aae12606650335c92930c6a369d799828bbae058","patch":"@@ -331,20 +331,40 @@ protected void setObject(Column col, Object val, int metaType,\n         boolean overrideDefault)\n         throws SQLException {\n         // make sure we're not setting two different values\n+    \t// unless the given column is an implicit relationship and value\n+    \t// changes from logical default to non-default\n         Object prev = getSet(col);\n         if (prev != null) {\n             if (prev == NULL)\n                 prev = null;\n             if (!rowValueEquals(prev, val)) {\n-                throw new InvalidStateException(_loc.get(\"diff-values\",\n-                    new Object[]{ col.getFullName(),\n-                        (prev == null) ? null : prev.getClass(), prev,\n-                        (val == null) ? null : val.getClass(), val })).\n-                    setFatal(true);\n+            \tif (allowsUpdate(col, prev, val)) {\n+            \t\tsuper.setObject(col, val, metaType, overrideDefault);\n+            \t} else if (!isDefaultValue(val)) {\n+            \t\tthrow new InvalidStateException(_loc.get(\"diff-values\",\n+            \t\t\t\tnew Object[]{ col.getFullName(),\n+            \t\t\t\t(prev == null) ? null : prev.getClass(), prev,\n+            \t\t\t\t(val == null) ? null : val.getClass(), val })).\n+            \t\t\t\tsetFatal(true);\n+            \t}\n             }\n         }\n         super.setObject(col, val, metaType, overrideDefault);\n     }\n+    \n+    /**\n+     * Allow the given column value to be updated only if old or current value\n+     * is a default value or was not set and the column is not a primary key.\n+     */\n+    boolean allowsUpdate(Column col, Object old, Object cur) {\n+    \treturn !col.isPrimaryKey() && col.isImplicitRelation()\n+    \t   && (isDefaultValue(old));\n+    }\n+    \n+    boolean isDefaultValue(Object val) {\n+    \treturn val == null || val == NULL\n+    \t    || (val instanceof Number && ((Number)val).longValue() == 0);\n+    }\n \n     /**\n      * Return true if the two values should be considered equal."},{"sha":"1d679c1907b353d5f9dd2d69481711a5f4096fbd","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java","status":"modified","additions":21,"deletions":2,"changes":23,"blob_url":"https://github.com/apache/openjpa/blob/aae12606650335c92930c6a369d799828bbae058/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java","raw_url":"https://github.com/apache/openjpa/raw/aae12606650335c92930c6a369d799828bbae058/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java?ref=aae12606650335c92930c6a369d799828bbae058","patch":"@@ -682,8 +682,13 @@ private void parseDataStoreIdColumn(ClassMapping cm, DataStoreIdColumn id) {\n      * Parse the given foreign key.\n      */\n     private void parseForeignKey(MappingInfo info, ForeignKey fk) {\n-        parseForeignKey(info, fk.name(), fk.enabled(), fk.deferred(),\n-            fk.deleteAction(), fk.updateAction());\n+    \tif (!fk.implicit()) {\n+    \t\tparseForeignKey(info, fk.name(), fk.enabled(), fk.deferred(),\n+    \t\t\t\tfk.deleteAction(), fk.updateAction());\n+    \t} else {\n+            info.setImplicitRelation(true);\n+            assertDefault(fk);\n+    \t}\n     }\n \n     /**\n@@ -706,6 +711,20 @@ protected void parseForeignKey(MappingInfo info, String name,\n         fk.setUpdateAction(toForeignKeyAction(updateAction));\n         info.setForeignKey(fk);\n     }\n+    \n+    void assertDefault(ForeignKey fk) {\n+    \tboolean isDefault = StringUtils.isEmpty(fk.name()) \n+    \t\t&& fk.enabled() \n+    \t\t&& !fk.deferred() \n+    \t\t&& fk.deleteAction() == ForeignKeyAction.RESTRICT\n+    \t\t&& fk.updateAction() == ForeignKeyAction.RESTRICT\n+    \t\t&& fk.columnNames().length == 0\n+    \t\t&& fk.specified();\n+    \tif (!isDefault)\n+    \t\tthrow new UserException(_loc.get(\"implicit-non-default-fk\", _cls, \n+    \t\t\t\tgetSourceFile()).getMessage());\n+    }\n+    \n \n     /**\n      * Convert our FK action enum to an internal OpenJPA action."},{"sha":"1a76aa6ad8f3812ce722c36fbf25ee175322ea63","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ForeignKey.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/aae12606650335c92930c6a369d799828bbae058/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ForeignKey.java","raw_url":"https://github.com/apache/openjpa/raw/aae12606650335c92930c6a369d799828bbae058/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ForeignKey.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ForeignKey.java?ref=aae12606650335c92930c6a369d799828bbae058","patch":"@@ -47,4 +47,6 @@\n     String[] columnNames() default {};\n \n     boolean specified() default true;\n+    \n+    boolean implicit() default false;\n }"},{"sha":"584b814b9bd865fd222df61c255c5ef604c4948a","filename":"openjpa-persistence-jdbc/src/main/resources/org/apache/openjpa/persistence/jdbc/localizer.properties","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/aae12606650335c92930c6a369d799828bbae058/openjpa-persistence-jdbc/src/main/resources/org/apache/openjpa/persistence/jdbc/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/aae12606650335c92930c6a369d799828bbae058/openjpa-persistence-jdbc/src/main/resources/org/apache/openjpa/persistence/jdbc/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/resources/org/apache/openjpa/persistence/jdbc/localizer.properties?ref=aae12606650335c92930c6a369d799828bbae058","patch":"@@ -56,4 +56,7 @@ unique-many-on-seq-unsupported: More than one unique constraints is specified \\\n discriminator-on-abstract-class: A discriminator value has been specified for \\\n \tthe abstract class \"{0}\". The discriminator will never be used and may be \\\n \tsafely removed.\n-    \n\\ No newline at end of file\n+implicit-non-default-fk: While parsing \"{0}\" from \"{1}\", found a @ForeignKey \\\n+\twith implicit attribute set to true but one or more other attributes of \\\n+\tForeignKey is set to their non-default value. You can not specify any \\\n+\tnon-default value for an implicit ForeignKey.  \t    \n\\ No newline at end of file"},{"sha":"84dd787b43bd001eac0a937b908fe77258617307","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/bidi/Child.java","status":"added","additions":110,"deletions":0,"changes":110,"blob_url":"https://github.com/apache/openjpa/blob/aae12606650335c92930c6a369d799828bbae058/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/bidi/Child.java","raw_url":"https://github.com/apache/openjpa/raw/aae12606650335c92930c6a369d799828bbae058/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/bidi/Child.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/bidi/Child.java?ref=aae12606650335c92930c6a369d799828bbae058","patch":"@@ -0,0 +1,110 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.mapping.bidi;\r\n+\r\n+import javax.persistence.Column;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.Table;\r\n+\r\n+import org.apache.openjpa.meta.ValueStrategies;\r\n+import org.apache.openjpa.persistence.jdbc.ForeignKey;\r\n+\r\n+/**\r\n+ * Child in a logically bidirectional but actually unidirectional parent-child \r\n+ * relationship where Child holds reference to Parent via primary key and not \r\n+ * via object reference.\r\n+ * \r\n+ * @author Pinaki Poddar\r\n+ *\r\n+ */\r\n+@Entity\r\n+@Table(name=\"CHILD_693\")\r\n+public class Child {\r\n+\t@Id\r\n+\tprivate long id;\r\n+\t\r\n+\tprivate String name;\r\n+\r\n+\t@Column(name=\"FK_PARENT_SEQ_ID\", nullable=true)\r\n+\t@ForeignKey(implicit=true)\r\n+\tprivate long seqParentId;\r\n+\t\r\n+\t@Column(name=\"FK_PARENT_AUTO_ID\", nullable=true)\r\n+\t@ForeignKey(implicit=true)\r\n+\tprivate long autoParentId;\r\n+\t\r\n+\t@Column(name=\"FK_PARENT_APP_ID\", nullable=true)\r\n+\t@ForeignKey(implicit=true)\r\n+\tprivate long appParentId;\r\n+\r\n+\tpublic Child() {\r\n+\t\t\r\n+\t}\r\n+\t\r\n+\tpublic long getId() {\r\n+\t\treturn id;\r\n+\t}\r\n+\t\r\n+\tpublic void setId(long id) {\r\n+\t\tthis.id = id;\r\n+\t}\r\n+\t\r\n+\tpublic String getName() {\r\n+\t\treturn name;\r\n+\t}\r\n+\r\n+\tpublic void setName(String name) {\r\n+\t\tthis.name = name;\r\n+\t}\r\n+\r\n+\tpublic long getSeqParentId() {\r\n+\t\treturn seqParentId;\r\n+\t}\r\n+\r\n+\tvoid setSeqParentId(long parentId) {\r\n+\t\tthis.seqParentId = parentId;\r\n+\t}\r\n+\t\r\n+\tpublic long getAutoParentId() {\r\n+\t\treturn autoParentId;\r\n+\t}\r\n+\r\n+\tvoid setAutoParentId(long parentId) {\r\n+\t\tthis.autoParentId = parentId;\r\n+\t}\r\n+\tpublic long getAppParentId() {\r\n+\t\treturn appParentId;\r\n+\t}\r\n+\r\n+\tvoid setAppParentId(long parentId) {\r\n+\t\tthis.appParentId = parentId;\r\n+\t}\r\n+\t\r\n+\tpublic long getParentIdType(int idType) {\r\n+\t\tswitch (idType) {\r\n+\t\tcase ValueStrategies.NONE : return getAppParentId();\r\n+\t\tcase ValueStrategies.AUTOASSIGN : return getAutoParentId();\r\n+\t\tcase ValueStrategies.SEQUENCE : return getSeqParentId();\r\n+\t\tdefault :\r\n+\t\t\tthrow new IllegalArgumentException(\"No parent with id strategy \" + \r\n+\t\t\t\t\tidType);\r\n+\t\t}\r\n+\t}\r\n+}\r"},{"sha":"77abe7db600d21c662ad998eba0e05ea678192df","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/bidi/IParent.java","status":"added","additions":30,"deletions":0,"changes":30,"blob_url":"https://github.com/apache/openjpa/blob/aae12606650335c92930c6a369d799828bbae058/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/bidi/IParent.java","raw_url":"https://github.com/apache/openjpa/raw/aae12606650335c92930c6a369d799828bbae058/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/bidi/IParent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/bidi/IParent.java?ref=aae12606650335c92930c6a369d799828bbae058","patch":"@@ -0,0 +1,30 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.mapping.bidi;\r\n+\r\n+import java.util.Collection;\r\n+\r\n+public interface IParent {\r\n+\tpublic long getId();\r\n+\tpublic void setId(long id);\r\n+\tpublic String getName();\r\n+\tpublic void setName(String name);\r\n+\tpublic Collection<Child> getChildren();\r\n+\tpublic void addChild(Child child);\r\n+}\r"},{"sha":"5bb0afd87538936b361b696ac1f8d698eddf0304","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/bidi/ParentWithAppIdentity.java","status":"added","additions":111,"deletions":0,"changes":111,"blob_url":"https://github.com/apache/openjpa/blob/aae12606650335c92930c6a369d799828bbae058/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/bidi/ParentWithAppIdentity.java","raw_url":"https://github.com/apache/openjpa/raw/aae12606650335c92930c6a369d799828bbae058/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/bidi/ParentWithAppIdentity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/bidi/ParentWithAppIdentity.java?ref=aae12606650335c92930c6a369d799828bbae058","patch":"@@ -0,0 +1,111 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.mapping.bidi;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+import java.util.HashSet;\r\n+import java.util.Set;\r\n+\r\n+import javax.persistence.CascadeType;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.FetchType;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.GenerationType;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.OneToMany;\r\n+import javax.persistence.PostPersist;\r\n+import javax.persistence.PostUpdate;\r\n+import javax.persistence.PreUpdate;\r\n+import javax.persistence.Table;\r\n+import javax.persistence.Transient;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.ElementJoinColumn;\r\n+\r\n+/**\r\n+ * Parent in a logically bidirectional but actually unidirectional parent-child \r\n+ * relationship where Child holds reference to Parent via primary key and not \r\n+ * via object reference.\r\n+ * Parent identity is assigned by the application. Hence, Parent sets the \r\n+ * children's reference to Parent whenever its identity is set by the \r\n+ * application or a new child is added. \r\n+ * \r\n+ * @author Pinaki Poddar\r\n+ *\r\n+ */\r\n+@Entity\r\n+public class ParentWithAppIdentity implements IParent {\r\n+\t@Id\r\n+\tprivate long id;\r\n+\t\r\n+\tprivate String name;\r\n+\t\r\n+\t/**\r\n+\t * This field is <em>not</em> mapped by the child. The child's table will \r\n+\t * hold an <em>implicit</em> foreign key linking to the primary key of this \r\n+\t * Parent's table. \r\n+\t */\r\n+\t@OneToMany(cascade = CascadeType.ALL, fetch=FetchType.LAZY)\r\n+\t@ElementJoinColumn(name=\"FK_PARENT_APP_ID\", referencedAttributeName=\"id\")\r\n+\tprivate Set<Child> children;\r\n+\r\n+\tpublic long getId() {\r\n+\t\treturn id;\r\n+\t}\r\n+\t\r\n+\tpublic void setId(long id) {\r\n+\t\tthis.id = id;\r\n+\t\tpostIdSet();\r\n+\t}\r\n+\r\n+\tpublic String getName() {\r\n+\t\treturn name;\r\n+\t}\r\n+\r\n+\tpublic void setName(String name) {\r\n+\t\tthis.name = name;\r\n+\t}\r\n+\r\n+\tpublic Collection<Child> getChildren() {\r\n+\t\treturn children;\r\n+\t}\r\n+\r\n+\tpublic void addChild(Child child) {\r\n+\t\tif (children == null)\r\n+\t\t\tchildren = new HashSet<Child>();\r\n+\t\tchildren.add(child);\r\n+\t\tchild.setAppParentId(this.id);\r\n+\t}\r\n+\t\r\n+\tpublic boolean removeChild(Child child) {\r\n+\t\treturn children != null && children.remove(child);\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * This method will be called when application has assigned identity\r\n+\t * to this instance.\r\n+\t */\r\n+\tpublic void postIdSet() {\r\n+\t\tif (children == null)\r\n+\t\t\treturn;\r\n+\t\tfor (Child child : children) {\r\n+\t\t\tchild.setAppParentId(this.getId());\r\n+\t\t}\r\n+\t}\r\n+}\r"},{"sha":"61112a0a4d6e481c257015e93c1a8e66c3e588f5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/bidi/ParentWithAutoIdentity.java","status":"added","additions":112,"deletions":0,"changes":112,"blob_url":"https://github.com/apache/openjpa/blob/aae12606650335c92930c6a369d799828bbae058/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/bidi/ParentWithAutoIdentity.java","raw_url":"https://github.com/apache/openjpa/raw/aae12606650335c92930c6a369d799828bbae058/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/bidi/ParentWithAutoIdentity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/bidi/ParentWithAutoIdentity.java?ref=aae12606650335c92930c6a369d799828bbae058","patch":"@@ -0,0 +1,112 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.mapping.bidi;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+import java.util.HashSet;\r\n+import java.util.Set;\r\n+\r\n+import javax.persistence.CascadeType;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.FetchType;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.GenerationType;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.OneToMany;\r\n+import javax.persistence.PostPersist;\r\n+import javax.persistence.PostUpdate;\r\n+import javax.persistence.PreUpdate;\r\n+import javax.persistence.Table;\r\n+import javax.persistence.Transient;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.ElementJoinColumn;\r\n+\r\n+/**\r\n+ * Parent in a logically bidirectional but actually unidirectional parent-child \r\n+ * relationship where Child holds reference to Parent via primary key and not \r\n+ * via object reference.\r\n+ * Also identity for Parent is generated by the persistence provider. Hence, \r\n+ * Parent sets the children's reference to Parent in PostPersist callback.  \r\n+ * \r\n+ * @author Pinaki Poddar\r\n+ *\r\n+ */\r\n+@Entity\r\n+public class ParentWithAutoIdentity implements IParent {\r\n+\t@Id\r\n+\t@GeneratedValue(strategy=GenerationType.AUTO)\r\n+\tprivate long id;\r\n+\t\r\n+\tprivate String name;\r\n+\t\r\n+\t/**\r\n+\t * This field is <em>not</em> mapped by the child. The child's table will \r\n+\t * hold an <em>implicit</em> foreign key linking to the primary key of this \r\n+\t * Parent's table. \r\n+\t */\r\n+\t@OneToMany(cascade = CascadeType.ALL, fetch=FetchType.LAZY)\r\n+\t@ElementJoinColumn(name=\"FK_PARENT_AUTO_ID\", referencedAttributeName=\"id\")\r\n+\tprivate Set<Child> children;\r\n+\r\n+\tpublic long getId() {\r\n+\t\treturn id;\r\n+\t}\r\n+\t\r\n+\tpublic void setId(long id) {\r\n+\t\tthrow new RuntimeException(getClass() + \".setId() is not to be \" +\r\n+\t\t\t\"invoked directly. This class is using AUTO Generation Starategy\");\r\n+\t}\r\n+\r\n+\tpublic String getName() {\r\n+\t\treturn name;\r\n+\t}\r\n+\r\n+\tpublic void setName(String name) {\r\n+\t\tthis.name = name;\r\n+\t}\r\n+\r\n+\tpublic Collection<Child> getChildren() {\r\n+\t\treturn children;\r\n+\t}\r\n+\r\n+\tpublic void addChild(Child child) {\r\n+\t\tif (children == null)\r\n+\t\t\tchildren = new HashSet<Child>();\r\n+\t\tchildren.add(child);\r\n+\t}\r\n+\t\r\n+\tpublic boolean removeChild(Child child) {\r\n+\t\treturn children != null && children.remove(child);\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * This method will be called back after database has assigned identity\r\n+\t * to this instance.\r\n+\t */\r\n+\t@PreUpdate\r\n+\t@PostPersist\r\n+\tpublic void postPersist() {\r\n+\t\tif (children == null)\r\n+\t\t\treturn;\r\n+\t\tfor (Child child : children) {\r\n+\t\t\tchild.setAutoParentId(this.getId());\r\n+\t\t}\r\n+\t}\r\n+}\r"},{"sha":"57051568fe71c1ce857517a5ef3572bb38038e32","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/bidi/ParentWithSequenceIdentity.java","status":"added","additions":112,"deletions":0,"changes":112,"blob_url":"https://github.com/apache/openjpa/blob/aae12606650335c92930c6a369d799828bbae058/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/bidi/ParentWithSequenceIdentity.java","raw_url":"https://github.com/apache/openjpa/raw/aae12606650335c92930c6a369d799828bbae058/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/bidi/ParentWithSequenceIdentity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/bidi/ParentWithSequenceIdentity.java?ref=aae12606650335c92930c6a369d799828bbae058","patch":"@@ -0,0 +1,112 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.mapping.bidi;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+import java.util.HashSet;\r\n+import java.util.Set;\r\n+\r\n+import javax.persistence.CascadeType;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.FetchType;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.GenerationType;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.OneToMany;\r\n+import javax.persistence.PostPersist;\r\n+import javax.persistence.PostUpdate;\r\n+import javax.persistence.PreUpdate;\r\n+import javax.persistence.Table;\r\n+import javax.persistence.Transient;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.ElementJoinColumn;\r\n+\r\n+/**\r\n+ * Parent in a logically bidirectional but actually unidirectional parent-child \r\n+ * relationship where Child holds reference to Parent via primary key and not \r\n+ * via object reference.\r\n+ * Also database assigns identity for Parent. Hence, Parent sets the children's\r\n+ * reference to Parent in PostPersist callback.  \r\n+ * \r\n+ * @author Pinaki Poddar\r\n+ *\r\n+ */\r\n+@Entity\r\n+public class ParentWithSequenceIdentity  implements IParent {\r\n+\t@Id\r\n+\t@GeneratedValue(strategy=GenerationType.SEQUENCE)\r\n+\tprivate long id;\r\n+\t\r\n+\tprivate String name;\r\n+\t\r\n+\t/**\r\n+\t * This field is <em>not</em> mapped by the child. The child's table will \r\n+\t * hold an <em>implicit</em> foreign key linking to the primary key of this \r\n+\t * Parent's table. \r\n+\t */\r\n+\t@OneToMany(cascade = CascadeType.ALL, fetch=FetchType.LAZY)\r\n+\t@ElementJoinColumn(name=\"FK_PARENT_SEQ_ID\", referencedAttributeName=\"id\")\r\n+\tprivate Set<Child> children;\r\n+\r\n+\tpublic long getId() {\r\n+\t\treturn id;\r\n+\t}\r\n+\r\n+\tpublic String getName() {\r\n+\t\treturn name;\r\n+\t}\r\n+\r\n+\tpublic void setId(long id) {\r\n+\t\tthrow new RuntimeException(getClass() + \".setId() is not to be \" +\r\n+\t\t\t\"invoked directly. This class is using SEQ Generation Starategy\");\r\n+\t}\r\n+\r\n+\tpublic void setName(String name) {\r\n+\t\tthis.name = name;\r\n+\t}\r\n+\r\n+\tpublic Collection<Child> getChildren() {\r\n+\t\treturn children;\r\n+\t}\r\n+\r\n+\tpublic void addChild(Child child) {\r\n+\t\tif (children == null)\r\n+\t\t\tchildren = new HashSet<Child>();\r\n+\t\tchildren.add(child);\r\n+\t}\r\n+\t\r\n+\tpublic boolean removeChild(Child child) {\r\n+\t\treturn children != null && children.remove(child);\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * This method will be called back after database has assigned identity\r\n+\t * to this instance.\r\n+\t */\r\n+\t@PreUpdate\r\n+\t@PostPersist\r\n+\tpublic void postPersist() {\r\n+\t\tif (children == null)\r\n+\t\t\treturn;\r\n+\t\tfor (Child child : children) {\r\n+\t\t\tchild.setSeqParentId(this.getId());\r\n+\t\t}\r\n+\t}\r\n+}\r"},{"sha":"b695de40037d105a43f852416153ff3760b1d8e7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/bidi/TestOneSidedParentChildWithImplicitForeignKey.java","status":"added","additions":174,"deletions":0,"changes":174,"blob_url":"https://github.com/apache/openjpa/blob/aae12606650335c92930c6a369d799828bbae058/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/bidi/TestOneSidedParentChildWithImplicitForeignKey.java","raw_url":"https://github.com/apache/openjpa/raw/aae12606650335c92930c6a369d799828bbae058/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/bidi/TestOneSidedParentChildWithImplicitForeignKey.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/bidi/TestOneSidedParentChildWithImplicitForeignKey.java?ref=aae12606650335c92930c6a369d799828bbae058","patch":"@@ -0,0 +1,174 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.mapping.bidi;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.meta.ClassMetaData;\n+import org.apache.openjpa.meta.FieldMetaData;\n+import org.apache.openjpa.meta.MetaDataRepository;\n+import org.apache.openjpa.meta.ValueStrategies;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+/**\n+ * Tests behavior of Parent-Child mapping under following conditions a) Parent\n+ * has many references to Child b) Child refers to Parent by Parent's identity\n+ * and not by object reference c) Parent's identity is assigned by the database\n+ * d) PostPersist callback in Parent sets the children's reference to Parent\n+ * \n+ * The use case was originally reported in <A\n+ * HREF=\"http://n2.nabble.com/OpenJPA---two-sided-relation-between-objects-Issue-tc687050.html\">\n+ * OpenJPA User Forum</A>\n+ * \n+ * @author Pinaki Poddar\n+ */\n+public class TestOneSidedParentChildWithImplicitForeignKey extends\n+\t\tSingleEMFTestCase {\n+\tprivate EntityManager em;\n+\tprivate static Class[] PARENT_ID_TYPES = { \n+\t\tParentWithAppIdentity.class,      // ValueStrategies.NONE = 0\n+\t\tParentWithSequenceIdentity.class, // ValueStrategies.SEQUENCE = 2\n+\t\tParentWithAutoIdentity.class,     // ValueStrategies.AUTOASSIGN = 3\n+\t};\n+\tprivate static int[] VALUE_STRATEGIES = { \n+\t\tValueStrategies.NONE,\n+\t\tValueStrategies.SEQUENCE, \n+\t\tValueStrategies.AUTOASSIGN };\n+\t\n+\tprivate static long[] PARENT_IDS = new long[PARENT_ID_TYPES.length];\n+\n+\tprivate static long PARENT_ID_COUNTER = System.currentTimeMillis();\n+\tprivate static long CHILD_ID_COUNTER = System.currentTimeMillis();\n+\tprivate static int CHILD_COUNT = 3;\n+\n+\tpublic void setUp() {\n+\t\tsetUp(DROP_TABLES, ParentWithAppIdentity.class,\n+\t\t\t\tParentWithSequenceIdentity.class, ParentWithAutoIdentity.class,\n+\t\t\t\tChild.class);\n+\t\tem = emf.createEntityManager();\n+\t\tcreateData(CHILD_COUNT);\n+\t}\n+\n+\tpublic void xtestStrategies() {\n+\t\tMetaDataRepository repos = emf.getConfiguration()\n+\t\t\t\t.getMetaDataRepositoryInstance();\n+\t\tfor (int i = 0; i < VALUE_STRATEGIES.length; i++) {\n+\t\t\tClassMetaData meta = repos.getMetaData(PARENT_ID_TYPES[i], null,\n+\t\t\t\t\ttrue);\n+\t\t\tFieldMetaData fmd = meta.getPrimaryKeyFields()[0];\n+\t\t\tassertEquals(fmd + \" strategy is \" + fmd.getValueStrategy(),\n+\t\t\t\t\tVALUE_STRATEGIES[i], fmd.getValueStrategy());\n+\t\t}\n+\t}\n+\n+\tvoid createData(int nChild) {\n+\t\tem.getTransaction().begin();\n+\t\t\n+\t\tChild[] children = new Child[CHILD_COUNT];\n+\t\tfor (int j = 0; j < CHILD_COUNT; j++) {\n+\t\t\tChild child = new Child();\n+\t\t\tchild.setId(CHILD_ID_COUNTER++);\n+\t\t\tchild.setName(\"Child\" + j);\n+\t\t\tchildren[j] = child;\n+\t\t}\n+\t\t\n+\t\tfor (int i = 0; i < PARENT_ID_TYPES.length; i++) {\n+\t\t\tIParent parent = newParent(i);\n+\t\t\tif (VALUE_STRATEGIES[i] == ValueStrategies.NONE)\n+\t\t\t\tparent.setId(++PARENT_ID_COUNTER);\n+\t\t\tfor (int j = 0; j < CHILD_COUNT; j++) {\n+\t\t\t\tparent.addChild(children[j]);\n+\t\t\t}\n+\t\t\tem.persist(parent);\n+\t\t\tem.flush();\n+\t\t\tPARENT_IDS[i] = parent.getId();\n+\t\t}\n+\n+\t\tem.getTransaction().commit();\n+\t}\n+\n+\tpublic void testPersist() {\n+\t\tem.getTransaction().begin();\n+\n+\t\tfor (int i = 0; i < PARENT_ID_TYPES.length; i++) {\n+\t\t\tIParent parent = findParent(i);\n+\t\t\tassertFalse(parent.getId() == 0);\n+\t\t\tassertFalse(parent.getChildren().isEmpty());\n+\t\t\tassertEquals(CHILD_COUNT, parent.getChildren().size());\n+\t\t\tfor (Child child : parent.getChildren()) {\n+\t\t\t\tassertFalse(child.getParentIdType(VALUE_STRATEGIES[i]) == 0);\n+\t\t\t\tassertTrue(child.getParentIdType(VALUE_STRATEGIES[i]) == parent\n+\t\t\t\t\t\t.getId());\n+\t\t\t}\n+\t\t}\n+\t\tem.getTransaction().commit();\n+\t}\n+\n+\tpublic void testUpdate() {\n+\t\tem.getTransaction().begin();\n+\n+\t\tChild newChild = new Child();\n+\t\tnewChild.setId(CHILD_ID_COUNTER++);\n+\t\tnewChild.setName(\"New Child\");\n+\t\tfor (int i = 0; i < PARENT_ID_TYPES.length; i++) {\n+\t\t\tIParent parent = findParent(i);\n+\t\t\tparent.addChild(newChild);\n+\t\t\tem.merge(parent);\n+\t\t}\n+\t\tem.flush();\n+\t\tem.getTransaction().commit();\n+\t\tem.clear();\n+\n+\t\tem.getTransaction().begin();\n+\t\tfor (int i = 0; i < PARENT_ID_TYPES.length; i++) {\n+\t\t\tIParent parent = findParent(i);\n+\t\t\tassertFalse(parent.getId() == 0);\n+\t\t\tassertFalse(parent.getChildren().isEmpty());\n+\t\t\tassertEquals(CHILD_COUNT + 1, parent.getChildren().size());\n+\t\t\tfor (Child child : parent.getChildren()) {\n+\t\t\t\tassertFalse(child.getParentIdType(VALUE_STRATEGIES[i]) == 0);\n+\t\t\t\tassertTrue(child.getParentIdType(VALUE_STRATEGIES[i]) == parent\n+\t\t\t\t\t\t.getId());\n+\t\t\t}\n+\t\t}\n+\t\tem.getTransaction().commit();\n+\t}\n+\n+\tpublic void tearDown() {\n+\n+\t}\n+\n+\tpublic IParent newParent(int parentType) {\n+\t\ttry {\n+\t\t\tIParent parent = (IParent)PARENT_ID_TYPES[parentType].newInstance();\n+\t\t\tif (VALUE_STRATEGIES[parentType] == ValueStrategies.NONE)\n+\t\t\t\tparent.setId(++PARENT_ID_COUNTER);\n+\t\t\tparent.setName(PARENT_ID_TYPES[parentType].getSimpleName());\n+\t\t\treturn parent;\n+\t\t} catch (Exception e) {\n+\t\t\tfail(e.toString());\n+\t\t}\n+\t\treturn null;\n+\t}\n+\t\n+\tpublic IParent findParent(int parentType) {\n+\t\treturn (IParent) em.find(PARENT_ID_TYPES[parentType], \n+\t\t\t\tPARENT_IDS[parentType]);\n+\t}\n+}\n\\ No newline at end of file"},{"sha":"2074400eafb4657600808b1612513ff2f59b4017","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/aae12606650335c92930c6a369d799828bbae058/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/aae12606650335c92930c6a369d799828bbae058/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java?ref=aae12606650335c92930c6a369d799828bbae058","patch":"@@ -188,7 +188,7 @@\n     private final Map<Package, Integer> _pkgs = new HashMap<Package, Integer>();\n \n     // the class we were invoked to parse\n-    private Class _cls = null;\n+    protected Class _cls = null;\n     private File _file = null;\n \n     /**"}]}

