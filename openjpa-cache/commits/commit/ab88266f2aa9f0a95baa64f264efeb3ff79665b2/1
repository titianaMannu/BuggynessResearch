{"sha":"ab88266f2aa9f0a95baa64f264efeb3ff79665b2","node_id":"MDY6Q29tbWl0MjA2MzY0OmFiODgyNjZmMmFhOWYwYTk1YmFhNjRmMjY0ZWZlYjNmZjc5NjY1YjI=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-12-19T20:19:49Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-12-19T20:19:49Z"},"message":"OPENJPA-470. Added test case for custom sequence implementations, and updated docs with the current parentheses limitation.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@605679 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"968d1dcbfe0412eb551dae6ef5c10b05b5ad0ad9","url":"https://api.github.com/repos/apache/openjpa/git/trees/968d1dcbfe0412eb551dae6ef5c10b05b5ad0ad9"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ab88266f2aa9f0a95baa64f264efeb3ff79665b2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ab88266f2aa9f0a95baa64f264efeb3ff79665b2","html_url":"https://github.com/apache/openjpa/commit/ab88266f2aa9f0a95baa64f264efeb3ff79665b2","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ab88266f2aa9f0a95baa64f264efeb3ff79665b2/comments","author":null,"committer":null,"parents":[{"sha":"84205d6d5040a9af6c14c86d9effc814a96abf73","url":"https://api.github.com/repos/apache/openjpa/commits/84205d6d5040a9af6c14c86d9effc814a96abf73","html_url":"https://github.com/apache/openjpa/commit/84205d6d5040a9af6c14c86d9effc814a96abf73"}],"stats":{"total":109,"additions":105,"deletions":4},"files":[{"sha":"a64a022621814cc65fc2d3e4baf3eab612022016","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java","status":"modified","additions":11,"deletions":3,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/ab88266f2aa9f0a95baa64f264efeb3ff79665b2/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/ab88266f2aa9f0a95baa64f264efeb3ff79665b2/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java?ref=ab88266f2aa9f0a95baa64f264efeb3ff79665b2","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.openjpa.lib.conf;\n \n-import java.awt.Image;\n+import java.awt.*;\n import java.beans.BeanDescriptor;\n import java.beans.BeanInfo;\n import java.beans.EventSetDescriptor;\n@@ -40,13 +40,13 @@\n import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n import java.security.AccessController;\n-import java.security.PrivilegedAction;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.HashMap;\n import java.util.Iterator;\n+import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.MissingResourceException;\n@@ -622,6 +622,14 @@ public void fromProperties(Map map) {\n             _globals = false;\n         }\n \n+        // copy the input to avoid mutation issues\n+        if (map instanceof HashMap)\n+            map = (Map) ((HashMap) map).clone();\n+        else if (map instanceof Properties)\n+            map = (Map) ((Properties) map).clone();\n+        else\n+            map = new LinkedHashMap(map);\n+\n         Map remaining = new HashMap(map);\n         boolean ser = true;\n         Value val;\n@@ -646,7 +654,7 @@ public void fromProperties(Map map) {\n         // <prefix>.properties System property; remove that property so we\n         // we don't warn about it\n         Configurations.removeProperty(\"properties\", remaining);\n-        \n+\n         // now warn if there are any remaining properties that there\n         // is an unhandled prop, and remove the unknown properties\n         Map.Entry entry;"},{"sha":"3e138bd251a579710452888f9930bd6daa908bc2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/CustomSeq.java","status":"added","additions":47,"deletions":0,"changes":47,"blob_url":"https://github.com/apache/openjpa/blob/ab88266f2aa9f0a95baa64f264efeb3ff79665b2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/CustomSeq.java","raw_url":"https://github.com/apache/openjpa/raw/ab88266f2aa9f0a95baa64f264efeb3ff79665b2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/CustomSeq.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/CustomSeq.java?ref=ab88266f2aa9f0a95baa64f264efeb3ff79665b2","patch":"@@ -0,0 +1,47 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.generationtype;\r\n+\r\n+import org.apache.openjpa.kernel.Seq;\r\n+import org.apache.openjpa.kernel.StoreContext;\r\n+import org.apache.openjpa.meta.ClassMetaData;\r\n+\r\n+public class CustomSeq implements Seq {\r\n+\r\n+    private int i = 1;\r\n+\r\n+    public void setType(int type) {\r\n+        if (type == Seq.TYPE_TRANSACTIONAL)\r\n+            throw new UnsupportedOperationException();\r\n+    }\r\n+\r\n+    public Object next(StoreContext ctx, ClassMetaData cls) {\r\n+        return i++;\r\n+    }\r\n+\r\n+    public Object current(StoreContext ctx, ClassMetaData cls) {\r\n+        return i;\r\n+    }\r\n+\r\n+    public void allocate(int additional, StoreContext ctx, ClassMetaData cls) {\r\n+    }\r\n+\r\n+    public void close() {\r\n+    }\r\n+}\r"},{"sha":"e8c56da440b7a4f7fbde103de4ed17766a819913","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/GeneratedValues.java","status":"modified","additions":19,"deletions":0,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/ab88266f2aa9f0a95baa64f264efeb3ff79665b2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/GeneratedValues.java","raw_url":"https://github.com/apache/openjpa/raw/ab88266f2aa9f0a95baa64f264efeb3ff79665b2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/GeneratedValues.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/GeneratedValues.java?ref=ab88266f2aa9f0a95baa64f264efeb3ff79665b2","patch":"@@ -20,7 +20,9 @@\n \r\n import javax.persistence.Entity;\r\n import javax.persistence.GeneratedValue;\r\n+import javax.persistence.GenerationType;\r\n import javax.persistence.Id;\r\n+import javax.persistence.SequenceGenerator;\r\n \r\n @Entity\r\n public class GeneratedValues {\r\n@@ -31,6 +33,16 @@\n     @GeneratedValue\r\n     private long field;\r\n \r\n+//    @GeneratedValue(strategy= GenerationType.SEQUENCE,\r\n+//        generator=\"org.apache.openjpa.persistence.generationtype.CustomSeq\")\r\n+//    private int customSeqField;\r\n+\r\n+    @GeneratedValue(strategy= GenerationType.SEQUENCE,\r\n+        generator=\"GeneratedValues.SequenceGeneratorCustomSeq\")\r\n+    @SequenceGenerator(name=\"GeneratedValues.SequenceGeneratorCustomSeq\",\r\n+        sequenceName=\"org.apache.openjpa.persistence.generationtype.CustomSeq()\")\r\n+    private int customSeqWithIndirectionField;\r\n+\r\n     public GeneratedValues() {\r\n         super();\r\n     }\r\n@@ -57,4 +69,11 @@ public void setField(long field) {\n         this.field = field;\r\n     }\r\n \r\n+//    public int getCustomSeqField() {\r\n+//        return customSeqField;\r\n+//    }\r\n+\r\n+    public int getCustomSeqWithIndirectionField() {\r\n+        return customSeqWithIndirectionField;\r\n+    }\r\n }\r"},{"sha":"83746544391eb17d71d53f6db7daaa608d557645","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestGeneratedValues.java","status":"modified","additions":24,"deletions":0,"changes":24,"blob_url":"https://github.com/apache/openjpa/blob/ab88266f2aa9f0a95baa64f264efeb3ff79665b2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestGeneratedValues.java","raw_url":"https://github.com/apache/openjpa/raw/ab88266f2aa9f0a95baa64f264efeb3ff79665b2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestGeneratedValues.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestGeneratedValues.java?ref=ab88266f2aa9f0a95baa64f264efeb3ff79665b2","patch":"@@ -102,4 +102,28 @@ public void testFieldSetter() {\n         // should not get here...\r\n         fail();\r\n     }\r\n+\r\n+//    public void testCustomSequenceGenerator() {\r\n+//        EntityManager em = emf.createEntityManager();\r\n+//\r\n+//        GeneratedValues gv = new GeneratedValues();\r\n+//\r\n+//        em.getTransaction().begin();\r\n+//        em.persist(gv);\r\n+//        em.getTransaction().commit();\r\n+//\r\n+//        assertNotEquals(0, gv.getCustomSeqField());\r\n+//    }\r\n+\r\n+    public void testCustomSequenceGeneratorWithIndirection() {\r\n+        EntityManager em = emf.createEntityManager();\r\n+\r\n+        GeneratedValues gv = new GeneratedValues();\r\n+\r\n+        em.getTransaction().begin();\r\n+        em.persist(gv);\r\n+        em.getTransaction().commit();\r\n+\r\n+        assertNotEquals(0, gv.getCustomSeqWithIndirectionField());\r\n+    }\r\n }\r"},{"sha":"62a7c37f655b35b369f9069c9d604726c42e9460","filename":"openjpa-project/src/doc/manual/ref_guide_runtime.xml","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/ab88266f2aa9f0a95baa64f264efeb3ff79665b2/openjpa-project/src/doc/manual/ref_guide_runtime.xml","raw_url":"https://github.com/apache/openjpa/raw/ab88266f2aa9f0a95baa64f264efeb3ff79665b2/openjpa-project/src/doc/manual/ref_guide_runtime.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_runtime.xml?ref=ab88266f2aa9f0a95baa64f264efeb3ff79665b2","patch":"@@ -1649,7 +1649,10 @@ suitable for single-JVM environments.\n You can use JPA <literal>SequenceGenerator</literal>s to describe any built-in\n <classname>Seq</classname>s or your own <classname>Seq</classname>\n implementation. Set the <literal>sequenceName</literal> attribute to a plugin\n-string describing your choice. See\n+string describing your choice. If specifying your own class name, you must\n+include parentheses at the end of the class name, even if you have no plugin\n+properties to configure.\n+(E.g., <literal>sequenceName=\"com.example.SeqImpl()\"</literal>. See\n <xref linkend=\"jpa_overview_mapping_sequence\"/> in the JPA Overview for\n details on defining <literal>SequenceGenerator</literal>s.\n         </para>"}]}

