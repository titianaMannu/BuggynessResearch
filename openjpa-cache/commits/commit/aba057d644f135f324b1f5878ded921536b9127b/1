{"sha":"aba057d644f135f324b1f5878ded921536b9127b","node_id":"MDY6Q29tbWl0MjA2MzY0OmFiYTA1N2Q2NDRmMTM1ZjMyNGIxZjU4NzhkZWQ5MjE1MzZiOTEyN2I=","commit":{"author":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-08-11T21:07:58Z"},"committer":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-08-11T21:07:58Z"},"message":"Allow our JPA ConfigurationProviderImpl to find a default persistence unit in\npersistence.xml when no explicit configuration is given to dev tools.  Do this\nin a backwards-compatible way that won't break previous behavior or other facade\nbehavior (JDO).  This means you should no longer have to pass \n\"-p persistence.xml\" to tools like the enhancer, nor should you have to specify\na properties argument to the PCEnhancerAgent in the premain for runtime \nenhancement.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@430897 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"03d29b85059be959bd255a1360ec28b4cd01070a","url":"https://api.github.com/repos/apache/openjpa/git/trees/03d29b85059be959bd255a1360ec28b4cd01070a"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/aba057d644f135f324b1f5878ded921536b9127b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/aba057d644f135f324b1f5878ded921536b9127b","html_url":"https://github.com/apache/openjpa/commit/aba057d644f135f324b1f5878ded921536b9127b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/aba057d644f135f324b1f5878ded921536b9127b/comments","author":null,"committer":null,"parents":[{"sha":"07a13ab9086bca3880846953da5d29b6246ac076","url":"https://api.github.com/repos/apache/openjpa/commits/07a13ab9086bca3880846953da5d29b6246ac076","html_url":"https://github.com/apache/openjpa/commit/07a13ab9086bca3880846953da5d29b6246ac076"}],"stats":{"total":437,"additions":293,"deletions":144},"files":[{"sha":"36a711133d35c8afd9ddddaee174acee8fc806da","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/ant/MappingToolTask.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/aba057d644f135f324b1f5878ded921536b9127b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/ant/MappingToolTask.java","raw_url":"https://github.com/apache/openjpa/raw/aba057d644f135f324b1f5878ded921536b9127b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/ant/MappingToolTask.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/ant/MappingToolTask.java?ref=aba057d644f135f324b1f5878ded921536b9127b","patch":"@@ -22,7 +22,7 @@\n import org.apache.openjpa.jdbc.meta.MappingTool;\n import org.apache.openjpa.jdbc.schema.SchemaTool;\n import org.apache.openjpa.lib.ant.AbstractTask;\n-import org.apache.openjpa.lib.conf.Configuration;\n+import org.apache.openjpa.lib.conf.ConfigurationImpl;\n import org.apache.openjpa.lib.util.Files;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.util.MultiLoaderClassResolver;\n@@ -161,7 +161,7 @@ public void setMeta(boolean meta) {\n         flags.meta = meta;\n     }\n \n-    protected Configuration newConfiguration() {\n+    protected ConfigurationImpl newConfiguration() {\n         return new JDBCConfigurationImpl();\n     }\n "},{"sha":"144ed830e9dc94a128fda0b2127267ccd9df3285","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/ant/ReverseMappingToolTask.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/aba057d644f135f324b1f5878ded921536b9127b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/ant/ReverseMappingToolTask.java","raw_url":"https://github.com/apache/openjpa/raw/aba057d644f135f324b1f5878ded921536b9127b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/ant/ReverseMappingToolTask.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/ant/ReverseMappingToolTask.java?ref=aba057d644f135f324b1f5878ded921536b9127b","patch":"@@ -26,7 +26,7 @@\n import org.apache.openjpa.jdbc.meta.ReverseCustomizer;\n import org.apache.openjpa.jdbc.meta.ReverseMappingTool;\n import org.apache.openjpa.lib.ant.AbstractTask;\n-import org.apache.openjpa.lib.conf.Configuration;\n+import org.apache.openjpa.lib.conf.ConfigurationImpl;\n import org.apache.openjpa.lib.conf.Configurations;\n import org.apache.openjpa.lib.util.CodeFormat;\n import org.apache.openjpa.lib.util.Files;\n@@ -215,7 +215,7 @@ public Object createCodeFormat() {\n         return flags.format;\n     }\n \n-    protected Configuration newConfiguration() {\n+    protected ConfigurationImpl newConfiguration() {\n         return new JDBCConfigurationImpl();\n     }\n "},{"sha":"c3242bf59298b8020afeca21a1902fc9b25ffbe8","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/ant/SchemaToolTask.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/aba057d644f135f324b1f5878ded921536b9127b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/ant/SchemaToolTask.java","raw_url":"https://github.com/apache/openjpa/raw/aba057d644f135f324b1f5878ded921536b9127b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/ant/SchemaToolTask.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/ant/SchemaToolTask.java?ref=aba057d644f135f324b1f5878ded921536b9127b","patch":"@@ -21,7 +21,7 @@\n import org.apache.openjpa.jdbc.conf.JDBCConfigurationImpl;\n import org.apache.openjpa.jdbc.schema.SchemaTool;\n import org.apache.openjpa.lib.ant.AbstractTask;\n-import org.apache.openjpa.lib.conf.Configuration;\n+import org.apache.openjpa.lib.conf.ConfigurationImpl;\n import org.apache.openjpa.lib.util.Files;\n import org.apache.openjpa.lib.util.Localizer;\n \n@@ -121,7 +121,7 @@ public void setFile(String file) {\n         this.file = file;\n     }\n \n-    protected Configuration newConfiguration() {\n+    protected ConfigurationImpl newConfiguration() {\n         return new JDBCConfigurationImpl();\n     }\n "},{"sha":"e493a4e98f8ab158afaad4b84ab7fc330e4953be","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCConfigurationImpl.java","status":"modified","additions":11,"deletions":16,"changes":27,"blob_url":"https://github.com/apache/openjpa/blob/aba057d644f135f324b1f5878ded921536b9127b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/aba057d644f135f324b1f5878ded921536b9127b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCConfigurationImpl.java?ref=aba057d644f135f324b1f5878ded921536b9127b","patch":"@@ -93,20 +93,19 @@ public JDBCConfigurationImpl() {\n     /**\n      * Constructor.\n      *\n-     * @param loadDefaults whether to attempt to load the default\n-     * <code>org.apache.openjpa.properties</code> resource\n+     * @param loadGlobals whether to attempt to load the global properties\n      */\n-    public JDBCConfigurationImpl(boolean loadDefaults) {\n-        this(true, loadDefaults);\n+    public JDBCConfigurationImpl(boolean loadGlobals) {\n+        this(true, loadGlobals);\n     }\n \n     /**\n      * Constructor.\n      *\n      * @param derivations whether to apply product derivations\n-     * @param loadDefaults whether to attempt to load the default properties\n+     * @param loadGlobals whether to attempt to load the global properties\n      */\n-    public JDBCConfigurationImpl(boolean derivations, boolean loadDefaults) {\n+    public JDBCConfigurationImpl(boolean derivations, boolean loadGlobals) {\n         super(false, false);\n         String[] aliases;\n \n@@ -297,14 +296,10 @@ public JDBCConfigurationImpl(boolean derivations, boolean loadDefaults) {\n         // a bug in JRun, and we can get around it by forcing\n         // Instruction.class to be loaded and initialized\n         // before TypedInstruction.class\n-        try {\n-            serp.bytecode.lowlevel.Entry.class.getName();\n-        } catch (Throwable t) {\n-        }\n-        try {\n-            serp.bytecode.Instruction.class.getName();\n-        } catch (Throwable t) {\n-        }\n+        try { serp.bytecode.lowlevel.Entry.class.getName(); } \n+        catch (Throwable t) {}\n+        try { serp.bytecode.Instruction.class.getName(); } \n+        catch (Throwable t) {}\n \n         supportedOptions().add(OPTION_QUERY_SQL);\n         supportedOptions().add(OPTION_JDBC_CONNECTION);\n@@ -313,8 +308,8 @@ public JDBCConfigurationImpl(boolean derivations, boolean loadDefaults) {\n \n         if (derivations)\n             ProductDerivations.beforeConfigurationLoad(this);\n-        if (loadDefaults)\n-            loadDefaults();\n+        if (loadGlobals)\n+            loadGlobals();\n     }\n \n     /**"},{"sha":"720833b4f5947e6684340d74e5e3c5e576e766ac","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/ant/MetaDataToolTask.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/aba057d644f135f324b1f5878ded921536b9127b/openjpa-kernel/src/main/java/org/apache/openjpa/ant/MetaDataToolTask.java","raw_url":"https://github.com/apache/openjpa/raw/aba057d644f135f324b1f5878ded921536b9127b/openjpa-kernel/src/main/java/org/apache/openjpa/ant/MetaDataToolTask.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/ant/MetaDataToolTask.java?ref=aba057d644f135f324b1f5878ded921536b9127b","patch":"@@ -23,7 +23,7 @@\n import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.conf.OpenJPAConfigurationImpl;\n import org.apache.openjpa.lib.ant.AbstractTask;\n-import org.apache.openjpa.lib.conf.Configuration;\n+import org.apache.openjpa.lib.conf.ConfigurationImpl;\n import org.apache.openjpa.lib.util.Files;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.meta.MetaDataTool;\n@@ -58,7 +58,7 @@ public void setFile(String fileName) {\n         this.fileName = fileName;\n     }\n \n-    protected Configuration newConfiguration() {\n+    protected ConfigurationImpl newConfiguration() {\n         return new OpenJPAConfigurationImpl();\n     }\n "},{"sha":"40c965d725cf929e0c943a3bd7070c866e04c33d","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/ant/PCEnhancerTask.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/aba057d644f135f324b1f5878ded921536b9127b/openjpa-kernel/src/main/java/org/apache/openjpa/ant/PCEnhancerTask.java","raw_url":"https://github.com/apache/openjpa/raw/aba057d644f135f324b1f5878ded921536b9127b/openjpa-kernel/src/main/java/org/apache/openjpa/ant/PCEnhancerTask.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/ant/PCEnhancerTask.java?ref=aba057d644f135f324b1f5878ded921536b9127b","patch":"@@ -21,7 +21,7 @@\n import org.apache.openjpa.conf.OpenJPAConfigurationImpl;\n import org.apache.openjpa.enhance.PCEnhancer;\n import org.apache.openjpa.lib.ant.AbstractTask;\n-import org.apache.openjpa.lib.conf.Configuration;\n+import org.apache.openjpa.lib.conf.ConfigurationImpl;\n import org.apache.openjpa.lib.util.Files;\n import org.apache.openjpa.meta.MetaDataRepository;\n \n@@ -73,7 +73,7 @@ public void setTmpClassLoader(boolean tmpClassLoader) {\n         flags.tmpClassLoader = tmpClassLoader;\n     }\n \n-    protected Configuration newConfiguration() {\n+    protected ConfigurationImpl newConfiguration() {\n         return new OpenJPAConfigurationImpl();\n     }\n "},{"sha":"1f0c4cb03352800e18f8d6c273c64e74e353df1e","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","status":"modified","additions":8,"deletions":14,"changes":22,"blob_url":"https://github.com/apache/openjpa/blob/aba057d644f135f324b1f5878ded921536b9127b/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/aba057d644f135f324b1f5878ded921536b9127b/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java?ref=aba057d644f135f324b1f5878ded921536b9127b","patch":"@@ -58,10 +58,6 @@\n \n /**\n  * Implementation of the {@link OpenJPAConfiguration} interface.\n- *  On construction, the class will attempt to locate a default properties\n- * file called <code>openjpa.properties</code> located at any top level token\n- * of the CLASSPATH. See the {@link ConfigurationImpl} class description\n- * for details.\n  *\n  * @see ConfigurationImpl\n  * @author Marc Prud'hommeaux\n@@ -149,7 +145,7 @@\n         new StoreFacadeTypeRegistry();\n \n     /**\n-     * Default constructor. Attempts to load default properties.\n+     * Default constructor. Attempts to load global properties.\n      */\n     public OpenJPAConfigurationImpl() {\n         this(true);\n@@ -158,21 +154,19 @@ public OpenJPAConfigurationImpl() {\n     /**\n      * Constructor.\n      *\n-     * @param loadDefaults whether to attempt to load the default\n-     * <code>openjpa.properties</code> resource\n+     * @param loadGlobals whether to attempt to load the global properties\n      */\n-    public OpenJPAConfigurationImpl(boolean loadDefaults) {\n-        this(true, loadDefaults);\n+    public OpenJPAConfigurationImpl(boolean loadGlobals) {\n+        this(true, loadGlobals);\n     }\n \n     /**\n      * Constructor.\n      *\n      * @param derivations whether to apply product derivations\n-     * @param loadDefaults whether to attempt to load the default\n-     * <code>openjpa.properties</code> resource\n+     * @param loadGlobals whether to attempt to load the global properties\n      */\n-    public OpenJPAConfigurationImpl(boolean derivations, boolean loadDefaults) {\n+    public OpenJPAConfigurationImpl(boolean derivations, boolean loadGlobals) {\n         super(false);\n         String[] aliases;\n \n@@ -514,8 +508,8 @@ public OpenJPAConfigurationImpl(boolean derivations, boolean loadDefaults) {\n \n         if (derivations)\n             ProductDerivations.beforeConfigurationLoad(this);\n-        if (loadDefaults)\n-            loadDefaults();\n+        if (loadGlobals)\n+            loadGlobals();\n     }\n \n     public Collection supportedOptions() {"},{"sha":"b7d098b794a1a21bd862d297a32b895884ca63c0","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/ant/AbstractTask.java","status":"modified","additions":16,"deletions":4,"changes":20,"blob_url":"https://github.com/apache/openjpa/blob/aba057d644f135f324b1f5878ded921536b9127b/openjpa-lib/src/main/java/org/apache/openjpa/lib/ant/AbstractTask.java","raw_url":"https://github.com/apache/openjpa/raw/aba057d644f135f324b1f5878ded921536b9127b/openjpa-lib/src/main/java/org/apache/openjpa/lib/ant/AbstractTask.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/ant/AbstractTask.java?ref=aba057d644f135f324b1f5878ded921536b9127b","patch":"@@ -27,6 +27,9 @@\n import org.apache.tools.ant.types.FileSet;\n import org.apache.tools.ant.types.Path;\n import org.apache.openjpa.lib.conf.Configuration;\n+import org.apache.openjpa.lib.conf.ConfigurationImpl;\n+import org.apache.openjpa.lib.conf.ConfigurationProvider;\n+import org.apache.openjpa.lib.conf.Configurations;\n import org.apache.openjpa.lib.util.Localizer;\n \n /**\n@@ -55,7 +58,7 @@\n     protected boolean useParent = false;\n     protected boolean isolate = false;\n \n-    private Configuration _conf = null;\n+    private ConfigurationImpl _conf = null;\n     private AntClassLoader _cl = null;\n \n     /**\n@@ -94,7 +97,7 @@ public Configuration getConfiguration() {\n      * Implement this method to return a configuration object for the\n      * product in use.\n      */\n-    protected abstract Configuration newConfiguration();\n+    protected abstract ConfigurationImpl newConfiguration();\n \n     /**\n      * Perform the task action on the given files.\n@@ -148,6 +151,16 @@ public void addFileset(FileSet set) {\n     }\n \n     public void execute() throws BuildException {\n+        // if the user didn't supply a conf file, load the default\n+        if (_conf == null)\n+            _conf = newConfiguration();\n+        if (_conf.getPropertiesResource() == null) {\n+            ConfigurationProvider cp = Configurations.\n+                loadDefaults(getClassLoader());\n+            if (cp != null)\n+                cp.setInto(_conf);\n+        }\n+\n         String[] files = getFiles();\n         try {\n             executeOn(files);\n@@ -156,8 +169,7 @@ public void execute() throws BuildException {\n             if (haltOnError)\n                 throw new BuildException(e);\n         } finally {\n-            if (_conf != null)\n-                _conf.close();\n+            _conf.close();\n             _conf = null;\n         }\n     }"},{"sha":"58c133c7cb61468eee86f386b6a1caf7268a5033","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java","status":"modified","additions":30,"deletions":15,"changes":45,"blob_url":"https://github.com/apache/openjpa/blob/aba057d644f135f324b1f5878ded921536b9127b/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/aba057d644f135f324b1f5878ded921536b9127b/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java?ref=aba057d644f135f324b1f5878ded921536b9127b","patch":"@@ -105,7 +105,8 @@\n     private String _product = null;\n     private boolean _readOnly = false;\n     private Map _props = null;\n-    private boolean _defaults = false;\n+    private boolean _globals = false;\n+    private String _auto = null;\n     private final List _vals = new ArrayList();\n     private List _prefixes = new ArrayList(2);\n \n@@ -127,9 +128,9 @@ public ConfigurationImpl() {\n     /**\n      * Constructor.\n      *\n-     * @param loadDefaults whether to attempt to load the default properties\n+     * @param loadGlobals whether to attempt to load the global properties\n      */\n-    public ConfigurationImpl(boolean loadDefaults) {\n+    public ConfigurationImpl(boolean loadGlobals) {\n         setProductName(\"openjpa\"); // also adds as prop prefix\n \n         logFactoryPlugin = addPlugin(\"Log\", true);\n@@ -145,28 +146,28 @@ public ConfigurationImpl(boolean loadDefaults) {\n         logFactoryPlugin.setString(aliases[0]);\n         logFactoryPlugin.setInstantiatingGetter(\"getLogFactory\");\n \n-        if (loadDefaults)\n-            loadDefaults();\n+        if (loadGlobals)\n+            loadGlobals();\n     }\n \n     /**\n-     * Automatically load default values from the system's\n+     * Automatically load global values from the system's\n      * {@link ConfigurationProvider}s, and from System properties.\n      */\n-    public boolean loadDefaults() {\n-        ConfigurationProvider provider = Configurations.loadDefaults\n+    public boolean loadGlobals() {\n+        ConfigurationProvider provider = Configurations.loadGlobals\n             (getClass().getClassLoader());\n         if (provider != null)\n             provider.setInto(this);\n \n-        // let system properties override other defaults\n+        // let system properties override other globals\n         try {\n             fromProperties(new HashMap(System.getProperties()));\n         } catch (SecurityException se) {\n             // security manager might disallow\n         }\n \n-        _defaults = true;\n+        _globals = true;\n         if (provider == null) {\n             Log log = getConfigurationLog();\n             if (log.isTraceEnabled())\n@@ -575,9 +576,9 @@ public void fromProperties(Map map) {\n         // this way we preserve the original formatting of the user's props\n         // instead of the defaults.  this is important for caching on\n         // configuration objects\n-        if (_defaults) {\n+        if (_globals) {\n             _props = null;\n-            _defaults = false;\n+            _globals = false;\n         }\n \n         Map remaining = new HashMap(map);\n@@ -732,6 +733,10 @@ protected boolean isInvalidProperty(String propName) {\n         return false;\n     }\n \n+    //////////////////////\n+    // Auto-configuration\n+    //////////////////////\n+\n     /**\n      * This method loads the named resource as a properties file. It is\n      * useful for auto-configuration tools so users can specify a\n@@ -740,6 +745,7 @@ protected boolean isInvalidProperty(String propName) {\n     public void setProperties(String resourceName) throws IOException {\n         Configurations.load(resourceName, getClass().getClassLoader()).\n             setInto(this);\n+        _auto = resourceName;\n     }\n \n     /**\n@@ -749,6 +755,15 @@ public void setProperties(String resourceName) throws IOException {\n      */\n     public void setPropertiesFile(File file) throws IOException {\n         Configurations.load(file, getClass().getClassLoader()).setInto(this);\n+        _auto = file.toString();\n+    }\n+\n+    /**\n+     * Return the resource that was set via auto-configuration methods\n+     * {@link #setProperties} or {@link #setPropertiesFile}, or null if none.\n+     */\n+    public String getPropertiesResource() {\n+        return _auto;\n     }\n \n     /////////////\n@@ -839,7 +854,7 @@ public void readExternal(ObjectInput in)\n         throws IOException, ClassNotFoundException {\n         fromProperties((Map) in.readObject());\n         _prefixes = (List) in.readObject();\n-        _defaults = in.readBoolean();\n+        _globals = in.readBoolean();\n     }\n \n     /**\n@@ -852,7 +867,7 @@ public void writeExternal(ObjectOutput out) throws IOException {\n         else\n             out.writeObject(toProperties(false));\n         out.writeObject(_prefixes);\n-        out.writeBoolean(_defaults);\n+        out.writeBoolean(_globals);\n     }\n \n     /**\n@@ -867,7 +882,7 @@ public Object clone() {\n                 (new Object[]{ Boolean.FALSE });\n             clone._prefixes.clear();\n             clone._prefixes.addAll(_prefixes);\n-            clone._defaults = _defaults;\n+            clone._globals = _globals;\n             clone.fromProperties(toProperties(true));\n             return clone;\n         } catch (RuntimeException re) {"},{"sha":"863523bdb5d3604b49007518640b320524f6c3ba","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationProvider.java","status":"modified","additions":13,"deletions":2,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/aba057d644f135f324b1f5878ded921536b9127b/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationProvider.java","raw_url":"https://github.com/apache/openjpa/raw/aba057d644f135f324b1f5878ded921536b9127b/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationProvider.java?ref=aba057d644f135f324b1f5878ded921536b9127b","patch":"@@ -29,6 +29,11 @@\n  */\n public interface ConfigurationProvider {\n \n+    /**\n+     * Load globals, or return false if no globals for this provider found.\n+     */\n+    public boolean loadGlobals(ClassLoader loader) throws Exception;\n+\n     /**\n      * Load defaults, or return false if no defaults for this provider found.\n      */\n@@ -37,14 +42,20 @@\n     /**\n      * Load the given given resource, or return false if it is not a resource\n      * this provider understands. The given class loader may be null.\n+     *\n+     * @param anchor optional named anchor within a multiple-configuration\n+     * resource\n      */\n-    public boolean load(String resource, ClassLoader loader) throws Exception;\n+    public boolean load(String resource, String anchor, ClassLoader loader) \n+        throws Exception;\n \n     /**\n      * Load given file, or return false if it is not a file this provider\n      * understands.\n+     *\n+     * @param anchor optional named anchor within a multiple-configuration file\n      */\n-    public boolean load(File file) throws Exception;\n+    public boolean load(File file, String anchor) throws Exception;\n \n     /**\n      * Return properties loaded thus far, or empty map if none."},{"sha":"327fc58d7e44fdb1d2298c020f20af2fbc1ea8d3","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java","status":"modified","additions":102,"deletions":17,"changes":119,"blob_url":"https://github.com/apache/openjpa/blob/aba057d644f135f324b1f5878ded921536b9127b/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java","raw_url":"https://github.com/apache/openjpa/raw/aba057d644f135f324b1f5878ded921536b9127b/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java?ref=aba057d644f135f324b1f5878ded921536b9127b","patch":"@@ -16,6 +16,7 @@\n package org.apache.openjpa.lib.conf;\n \n import java.io.File;\n+import java.io.IOException;\n import java.util.Arrays;\n import java.util.Collection;\n import java.util.Iterator;\n@@ -386,10 +387,8 @@ else if (val.startsWith(\"\\\"\") || val.startsWith(\"'\")) {\n                         } else\n                             buf.append(props[i]);\n                     }\n-\n                     val = buf.toString();\n                 }\n-\n                 opts.put(prop, val);\n             }\n             return opts;\n@@ -409,18 +408,35 @@ else if (val.startsWith(\"\\\"\") || val.startsWith(\"'\")) {\n     public static void populateConfiguration(Configuration conf, Options opts) {\n         String props = opts.removeProperty(\"properties\", \"p\", null);\n         if (props != null && props.length() > 0) {\n-            File file = new File(props);\n+            String path = props;\n+            String anchor = null;\n+            int idx = path.lastIndexOf('#');\n+            if (idx != -1) {\n+                if (idx < path.length() - 1)\n+                    anchor = path.substring(idx + 1);\n+                path = path.substring(0, idx);\n+                if (path.length() == 0)\n+                    throw new MissingResourceException(_loc.get(\"anchor-only\",\n+                        props).getMessage(), Configurations.class.getName(), \n+                        props);\n+            }\n+\n+            File file = new File(path);\n             ConfigurationProvider provider;\n             if (file.isFile())\n-                provider = load(file, null);\n+                provider = load(file, anchor, null);\n             else {\n-                file = new File(\"META-INF\" + File.separatorChar + props);\n+                file = new File(\"META-INF\" + File.separatorChar + path);\n                 if (file.isFile())\n-                    provider = load(file, null);\n+                    provider = load(file, anchor, null);\n                 else\n-                    provider = load(props, null);\n+                    provider = load(path, anchor, null);\n             }\n             provider.setInto(conf);\n+        } else {\n+            ConfigurationProvider provider = loadDefaults(null);\n+            if (provider != null)\n+                provider.setInto(conf);\n         }\n         opts.setInto(conf);\n     }\n@@ -429,6 +445,21 @@ public static void populateConfiguration(Configuration conf, Options opts) {\n      * Return a {@link ConfigurationProvider} that has parsed system defaults.\n      */\n     public static ConfigurationProvider loadDefaults(ClassLoader loader) {\n+        return load(loader, false);\n+    }\n+\n+    /**\n+     * Return a {@link ConfigurationProvider} that has parsed system globals.\n+     */\n+    static ConfigurationProvider loadGlobals(ClassLoader loader) {\n+        return load(loader, true);\n+    }\n+\n+    /**\n+     * Load globals or defaults.\n+     */\n+    private static ConfigurationProvider load(ClassLoader loader, \n+        boolean globals) {\n         if (loader == null)\n             loader = Thread.currentThread().getContextClassLoader();\n         Class[] impls = Services.getImplementorClasses\n@@ -443,7 +474,8 @@ public static ConfigurationProvider loadDefaults(ClassLoader loader) {\n \n             providerCount++;\n             try {\n-                if (provider.loadDefaults(loader))\n+                if ((globals && provider.loadGlobals(loader))\n+                    || (!globals && provider.loadDefaults(loader)))\n                     return provider;\n             } catch (MissingResourceException mre) {\n                 throw mre;\n@@ -455,13 +487,15 @@ public static ConfigurationProvider loadDefaults(ClassLoader loader) {\n                 errs.append(e.toString());\n             }\n         }\n+\n+        String type = (globals) ? \"globals\" : \"defaults\";\n         if (errs != null)\n             throw new MissingResourceException(errs.toString(),\n-                Configurations.class.getName(), \"defaults\");\n+                Configurations.class.getName(), type);\n         if (providerCount == 0)\n             throw new MissingResourceException(_loc.get (\"no-providers\", \n                 ConfigurationProvider.class.getName()).getMessage(),\n-                Configurations.class.getName(), \"defaults\"); \n+                Configurations.class.getName(), type);\n         return null;\n     }\n \n@@ -482,7 +516,32 @@ private static ConfigurationProvider newProvider(Class cls) {\n      * resource. Throws {@link MissingResourceException} if resource does\n      * not exist.\n      */\n-    public static ConfigurationProvider load(String resource,\n+    public static ConfigurationProvider load(String resource, \n+        ClassLoader loader) {\n+        if (resource == null || resource.length() == 0)\n+            return null;\n+\n+        String path = resource;\n+        String anchor = null;\n+        int idx = path.indexOf('.');\n+        if (idx != -1) {\n+            if (idx < path.length() - 1)\n+                anchor = path.substring(idx + 1);\n+            path = path.substring(0, idx);\n+            if (path.length() == 0)\n+                throw new MissingResourceException(_loc.get(\"anchor-only\", \n+                    resource).getMessage(), Configurations.class.getName(), \n+                    resource);\n+        }\n+        return load(path, anchor, loader);\n+    }\n+\n+    /**\n+     * Return a {@link ConfigurationProvider} that has parsed the given\n+     * resource. Throws {@link MissingResourceException} if resource does\n+     * not exist.\n+     */\n+    public static ConfigurationProvider load(String resource, String anchor, \n         ClassLoader loader) {\n         if (resource == null || resource.length() == 0)\n             return null;\n@@ -501,7 +560,7 @@ public static ConfigurationProvider load(String resource,\n \n             providerCount++;\n             try {\n-                if (provider.load(resource, loader))\n+                if (provider.load(resource, anchor, loader))\n                     return provider;\n             } catch (MissingResourceException mre) {\n                 throw mre;\n@@ -534,6 +593,35 @@ public static ConfigurationProvider load(File file, ClassLoader loader) {\n         if (file == null)\n             return null;\n \n+        String anchor = null;\n+        try {\n+            String path = file.getCanonicalPath();\n+            int idx = path.indexOf('.');\n+            if (idx != -1) {\n+                if (idx < path.length() - 1)\n+                    anchor = path.substring(idx + 1);\n+                path = path.substring(0, idx);\n+                if (path.length() == 0)\n+                    throw new MissingResourceException(_loc.get(\"anchor-only\",\n+                        file).getMessage(), Configurations.class.getName(), \n+                        file.toString());\n+                file = new File(path);\n+            }\n+        } catch (IOException ioe) {\n+            // ignore\n+        }\n+        return load(file, anchor, loader);\n+    }\n+\n+    /**\n+     * Return a {@link ConfigurationProvider} that has parsed the given\n+     * file. Throws {@link MissingResourceException} if file does not exist.\n+     */\n+    public static ConfigurationProvider load(File file, String anchor, \n+        ClassLoader loader) {\n+        if (file == null)\n+            return null;\n+\n         if (loader == null)\n             loader = Thread.currentThread().getContextClassLoader();\n         Class[] impls = Services.getImplementorClasses\n@@ -543,7 +631,7 @@ public static ConfigurationProvider load(File file, ClassLoader loader) {\n         for (int i = 0; i < impls.length; i++) {\n             provider = newProvider(impls[i]);\n             try {\n-                if (provider != null && provider.load(file))\n+                if (provider != null && provider.load(file, anchor))\n                     return provider;\n             } catch (MissingResourceException mre) {\n                 throw mre;\n@@ -576,10 +664,7 @@ public static Object lookup(String name) {\n                 _loc.get(\"naming-err\", name).getMessage(), ne);\n         } finally {\n             if (ctx != null)\n-                try {\n-                    ctx.close();\n-                } catch (Exception e) {\n-                }\n+                try { ctx.close(); } catch (Exception e) {}\n         }\n     }\n }"},{"sha":"3b492124197c53e7220f60ac7ef2639ff574406b","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/MapConfigurationProvider.java","status":"modified","additions":7,"deletions":2,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/aba057d644f135f324b1f5878ded921536b9127b/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/MapConfigurationProvider.java","raw_url":"https://github.com/apache/openjpa/raw/aba057d644f135f324b1f5878ded921536b9127b/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/MapConfigurationProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/MapConfigurationProvider.java?ref=aba057d644f135f324b1f5878ded921536b9127b","patch":"@@ -51,15 +51,20 @@ public MapConfigurationProvider(Map props) {\n         addProperties(props);\n     }\n \n+    public boolean loadGlobals(ClassLoader loader) throws Exception {\n+        return false;\n+    }\n+\n     public boolean loadDefaults(ClassLoader loader) throws Exception {\n         return false;\n     }\n \n-    public boolean load(String resource, ClassLoader loader) throws Exception {\n+    public boolean load(String resource, String anchor, ClassLoader loader) \n+        throws Exception {\n         return false;\n     }\n \n-    public boolean load(File file) throws Exception {\n+    public boolean load(File file, String anchor) throws Exception {\n         return false;\n     }\n "},{"sha":"4c7fa3eb80d9bd9c17571f3b0a1242b58148d3d0","filename":"openjpa-lib/src/main/resources/org/apache/openjpa/lib/conf/localizer.properties","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/aba057d644f135f324b1f5878ded921536b9127b/openjpa-lib/src/main/resources/org/apache/openjpa/lib/conf/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/aba057d644f135f324b1f5878ded921536b9127b/openjpa-lib/src/main/resources/org/apache/openjpa/lib/conf/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/resources/org/apache/openjpa/lib/conf/localizer.properties?ref=aba057d644f135f324b1f5878ded921536b9127b","patch":"@@ -62,6 +62,8 @@ dup-with-different-prefixes: Found multiple properties with different valid \\\n \tprefixes. Properties: {0}, {1}.\n plugin-creation-exception: An exception occurred while creating a plugin for \\\n     value {0}. This exception will be consumed.\n+anchor-only: You cannot supply a configuration unit name only.  You must also \\\n+    supply the name of the resource in which the unit appears.\n \n Log-name: Log factory\n Log-desc: LogFactory and configuration"},{"sha":"8044a335401b6c01d1b17933f02e0de5daf704fd","filename":"openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/test/ConfigurationTestConfigurationProvider.java","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/aba057d644f135f324b1f5878ded921536b9127b/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/test/ConfigurationTestConfigurationProvider.java","raw_url":"https://github.com/apache/openjpa/raw/aba057d644f135f324b1f5878ded921536b9127b/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/test/ConfigurationTestConfigurationProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/test/ConfigurationTestConfigurationProvider.java?ref=aba057d644f135f324b1f5878ded921536b9127b","patch":"@@ -21,11 +21,16 @@ public ConfigurationTestConfigurationProvider() {\n         super(null);\n     }\n \n-    public boolean loadDefaults(ClassLoader loader)\n+    public boolean loadGlobals(ClassLoader loader)\n         throws IOException {\n         return load(null, loader);\n     }\n \n+    public boolean loadDefaults(ClassLoader loader)\n+        throws IOException {\n+        return false;\n+    }\n+\n     public boolean load(String rsrc, ClassLoader loader)\n         throws IOException {\n         if (rsrc == null)"},{"sha":"73d0cf4dc562dae114c1c0bcf4f026f3633ab9fa","filename":"openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/test/TestConfigurationImpl.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/aba057d644f135f324b1f5878ded921536b9127b/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/test/TestConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/aba057d644f135f324b1f5878ded921536b9127b/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/test/TestConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/test/TestConfigurationImpl.java?ref=aba057d644f135f324b1f5878ded921536b9127b","patch":"@@ -51,15 +51,15 @@ public void tearDown() throws Exception {\n     }\n \n     /**\n-     * Test that default properties are found and loaded.\n+     * Test that global properties are found and loaded.\n      */\n-    public void testDefaults() {\n+    public void testGlobals() {\n         System.setProperty(\"openjpa.sysKey\", \"sysvalue\");\n         assertNull(_conf.getTestKey());\n         assertNull(_conf.getSysKey());\n         assertNull(_conf.getPluginKey());\n         assertNull(_conf.getObjectKey());\n-        assertTrue(_conf.loadDefaults());\n+        assertTrue(_conf.loadGlobals());\n         assertEquals(\"testvalue\", _conf.getTestKey());\n         assertEquals(\"sysvalue\", _conf.getSysKey());\n         assertNull(_conf.getPluginKey());\n@@ -70,15 +70,15 @@ public void testDefaults() {\n         _conf.setSysKey(null);\n         System.setProperty(\"openjpatest.properties\", \"foo.properties\");\n         try {\n-            assertTrue(!_conf.loadDefaults());\n+            assertTrue(!_conf.loadGlobals());\n             fail(\"Should have thrown exception for missing resource.\");\n         } catch (MissingResourceException mre) {\n         }\n \n         // set back for remainder of tests\n         System.setProperty(\"openjpatest.properties\", \"test.properties\");\n         System.setProperty(\"openjpa.pluginKey\", \"java.lang.Object\");\n-        assertTrue(_conf.loadDefaults());\n+        assertTrue(_conf.loadGlobals());\n         assertEquals(\"testvalue\", _conf.getTestKey());\n         assertEquals(\"sysvalue\", _conf.getSysKey());\n         assertEquals(\"java.lang.Object\", _conf.getPluginKey());\n@@ -90,7 +90,7 @@ public void testDefaults() {\n      * Test that the configuration is serialized to properties correctly.\n      */\n     public void testToProperties() {\n-        assertTrue(_conf.loadDefaults());\n+        assertTrue(_conf.loadGlobals());\n         assertEquals(\"testvalue\", _conf.getTestKey());\n         Map props = _conf.toProperties(false);\n         assertEquals(\"testvalue\", props.get(\"openjpa.testKey\"));\n@@ -209,7 +209,7 @@ public void testFreezing() {\n      * Test serialization.\n      */\n     public void testSerialization() throws Exception {\n-        assertTrue(_conf.loadDefaults());\n+        assertTrue(_conf.loadGlobals());\n         _conf.setTestKey(\"testvalue\");\n         _conf.setSysKey(\"sysvalue\");\n         _conf.setObjectKey(new Object());"},{"sha":"ae2a6cce4fd4f0bb73fda6a01d3dbde6a973da3c","filename":"openjpa-persistence-jdbc/pom.xml","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/aba057d644f135f324b1f5878ded921536b9127b/openjpa-persistence-jdbc/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/aba057d644f135f324b1f5878ded921536b9127b/openjpa-persistence-jdbc/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/pom.xml?ref=aba057d644f135f324b1f5878ded921536b9127b","patch":"@@ -71,7 +71,6 @@\n                                              refid=\"enhance.path.ref\"\n                                              pathsep=\" \"/>\n                                 <java classname=\"org.apache.openjpa.enhance.PCEnhancer\">\n-                                    <arg line=\"-p persistence.xml\"/>\n                                     <arg line=\"${enhance.files}\"/>\n                                     <classpath>\n                                         <path refid=\"maven.dependency.classpath\"/>"},{"sha":"c2225f8abea5dec07498bf789509420c15c72a49","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ConfigurationProviderImpl.java","status":"modified","additions":79,"deletions":53,"changes":132,"blob_url":"https://github.com/apache/openjpa/blob/aba057d644f135f324b1f5878ded921536b9127b/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ConfigurationProviderImpl.java","raw_url":"https://github.com/apache/openjpa/raw/aba057d644f135f324b1f5878ded921536b9127b/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ConfigurationProviderImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ConfigurationProviderImpl.java?ref=aba057d644f135f324b1f5878ded921536b9127b","patch":"@@ -18,6 +18,7 @@\n import java.io.File;\n import java.io.IOException;\n import java.net.URL;\n+import java.util.ArrayList;\n import java.util.Collections;\n import java.util.Enumeration;\n import java.util.List;\n@@ -26,33 +27,38 @@\n import javax.persistence.spi.PersistenceUnitInfo;\n import javax.persistence.spi.PersistenceUnitTransactionType;\n \n-import org.xml.sax.Attributes;\n-import org.xml.sax.SAXException;\n+import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.lib.conf.Configuration;\n import org.apache.openjpa.lib.conf.MapConfigurationProvider;\n import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.lib.meta.XMLMetaDataParser;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.util.GeneralException;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.SAXException;\n \n /**\n  * Configuration provider capable of loading a {@link Configuration} from\n  * the current environment's JPA-style XML configuration data.\n  * \n- * For defaults, looks in <code>openjpa.properties</code> system property for\n+ * For globals, looks in <code>openjpa.properties</code> system property for\n  * the location of a file to parse. If no system property is defined, the\n- * default resource location of <code>openjpa.xml</code> is used.\n- * If it exists, the resource is parsed as an XML file.\n+ * default resource location of <code>META-INF/openjpa.xml</code> is used.\n+ *\n+ * For defaults, looks for <code>META-INF/persistence.xml</code>.\n+ * Within <code>persistence.xml</code>, look for the named persistence unit, or\n+ * if no name given, an OpenJPA unit (preferring an unnamed OpenJPA unit to \n+ * a named one).\n  *\n  * @nojavadoc\n  * @since 4.0.0\n  */\n public class ConfigurationProviderImpl\n     extends MapConfigurationProvider {\n \n-    private static final String RSRC_DEFAULT = \"openjpa.xml\";\n-    private static final String RSRC_SPEC = \"META-INF/persistence.xml\";\n+    private static final String RSRC_GLOBAL = \"META-INF/openjpa.xml\";\n+    private static final String RSRC_DEFAULT = \"META-INF/persistence.xml\";\n \n     private static final Localizer _loc = Localizer.forPackage\n         (ConfigurationProviderImpl.class);\n@@ -86,7 +92,7 @@ public boolean load(PersistenceUnitInfo pinfo, Map m)\n         if (pinfo == null)\n             return false;\n         String providerName = pinfo.getPersistenceProviderClassName();\n-        if (providerName != null && providerName.length() != 0\n+        if (!StringUtils.isEmpty(providerName)\n             && !PersistenceProviderImpl.class.getName().equals(providerName))\n             return false;\n \n@@ -100,7 +106,6 @@ public boolean load(PersistenceUnitInfo pinfo, Map m)\n             if (impl.getPersistenceXmlFileUrl() != null)\n                 _source = impl.getPersistenceXmlFileUrl().toString();\n         }\n-\n         return true;\n     }\n \n@@ -109,12 +114,12 @@ public boolean load(PersistenceUnitInfo pinfo, Map m)\n      * overrides. If the resource is null, tries to load from persistence.xml,\n      * but still returns true if persistence.xml does not exist.\n      */\n-    public boolean load(String name, String rsrc, Map m)\n+    public boolean load(String rsrc, String name, Map m)\n         throws IOException {\n-        boolean explicit = rsrc != null && rsrc.length() > 0;\n+        boolean explicit = !StringUtils.isEmpty(rsrc);\n         if (!explicit)\n-            rsrc = RSRC_SPEC;\n-        Boolean ret = load(name, rsrc, m, null, explicit);\n+            rsrc = RSRC_DEFAULT;\n+        Boolean ret = load(rsrc, name, m, null, explicit);\n         if (ret != null)\n             return ret.booleanValue();\n         if (explicit)\n@@ -127,38 +132,43 @@ public boolean load(String name, String rsrc, Map m)\n     }\n \n     @Override\n-    public boolean loadDefaults(ClassLoader loader)\n+    public boolean loadGlobals(ClassLoader loader)\n         throws IOException {\n         String rsrc = System.getProperty(\"openjpa.properties\");\n-        String name = null;\n-        boolean explicit = false;\n-        if (rsrc == null)\n-            rsrc = RSRC_DEFAULT;\n-        else {\n-            // separate name from <resrouce>:<name> string\n-            explicit = true;\n-            int idx = rsrc.lastIndexOf(':');\n-            if (idx != -1) {\n-                name = rsrc.substring(idx + 1);\n-                rsrc = rsrc.substring(0, idx);\n-            }\n-            if (!rsrc.endsWith(\".xml\"))\n-                return false;\n+        boolean explicit = !StringUtils.isEmpty(rsrc);\n+        String anchor = null;\n+        int idx = (!explicit) ? -1 : rsrc.lastIndexOf('#');\n+        if (idx != -1) {\n+            // separate name from <resrouce>#<name> string\n+            if (idx < rsrc.length() - 1)\n+                anchor = rsrc.substring(idx + 1);\n+            rsrc = rsrc.substring(0, idx);\n         }\n-        return load(name, rsrc, null, loader, explicit) == Boolean.TRUE;\n+        if (StringUtils.isEmpty(rsrc))\n+            rsrc = RSRC_GLOBAL;\n+        else if (!rsrc.endsWith(\".xml\"))\n+            return false;\n+        return load(rsrc, anchor, null, loader, explicit) == Boolean.TRUE;\n+\n+    }\n+\n+    @Override\n+    public boolean loadDefaults(ClassLoader loader)\n+        throws IOException {\n+        return load(RSRC_DEFAULT, null, null, loader, false) == Boolean.TRUE;\n     }\n \n     /**\n      * Looks through the resources at <code>rsrc</code> for a configuration\n-     * file that matches <code>name</code> (or the first one if\n+     * file that matches <code>name</code> (or an unnamed one if\n      * <code>name</code> is <code>null</code>), and loads the XML in the\n      * resource into a new {@link PersistenceUnitInfo}. Then, applies the\n      * overrides in <code>m</code>.\n      *\n      * @return {@link Boolean#TRUE} if the resource was loaded, null if it\n      * does not exist, or {@link Boolean#FALSE} if it is not for OpenJPA\n      */\n-    private Boolean load(String name, String rsrc, Map m, ClassLoader loader,\n+    private Boolean load(String rsrc, String name, Map m, ClassLoader loader,\n         boolean explicit)\n         throws IOException {\n         if (loader == null)\n@@ -187,52 +197,68 @@ private Boolean load(String name, String rsrc, Map m, ClassLoader loader,\n \n     /**\n      * Parse resources at the given location. Searches for a\n-     * PersistenceUnitInfo with the requested name, or the first\n-     * one if no name is passed in.\n+     * PersistenceUnitInfo with the requested name, or an OpenJPA unit if\n+     * no name given (preferring an unnamed OpenJPA unit to a named one).\n      */\n     private PersistenceUnitInfo parseResources(ConfigurationParser parser,\n         Enumeration<URL> urls, String name, ClassLoader loader)\n         throws IOException {\n+        List<PersistenceUnitInfo> pinfos = new ArrayList<PersistenceUnitInfo>();\n         for (URL url : Collections.list(urls)) {\n             parser.parse(url);\n-            List pinfos = parser.getResults();\n-            for (PersistenceUnitInfo pinfo : (List<PersistenceUnitInfo>) pinfos)\n-            {\n-                if (name == null\n-                    || name.equals(pinfo.getPersistenceUnitName()))\n+            pinfos.addAll((List<PersistenceUnitInfo>) parser.getResults());\n+        }\n+        return findUnit(pinfos, name);\n+    }\n+\n+    /**\n+     * Find the unit with the given name, or an OpenJPA unit if no name is\n+     * given (preferring an unnamed OpenJPA unit to a named one).\n+     */\n+    private PersistenceUnitInfo findUnit(List<PersistenceUnitInfo> pinfos,\n+        String name) {\n+        PersistenceUnitInfo ojpa = null;\n+        for (PersistenceUnitInfo pinfo : pinfos) {\n+            // found named unit?\n+            if (name != null) {\n+                if (name.equals(pinfo.getPersistenceUnitName()))\n+                    return pinfo;\n+                continue;\n+            }\n+\n+            if (StringUtils.isEmpty(pinfo.getPersistenceProviderClassName())\n+                || PersistenceProviderImpl.class.getName().equals(pinfo.\n+                    getPersistenceProviderClassName())) {\n+                // if no name given and found unnamed unit, return it.  \n+                // otherwise record as default unit unless we find a \n+                // better match later\n+                if (StringUtils.isEmpty(pinfo.getPersistenceUnitName()))\n                     return pinfo;\n+                if (ojpa == null)\n+                    ojpa = pinfo;\n             }\n         }\n-        return null;\n+        return ojpa;\n     }\n \n     @Override\n-    public boolean load(String rsrc, ClassLoader loader)\n+    public boolean load(String rsrc, String anchor, ClassLoader loader)\n         throws IOException {\n-        String name = null;\n-        int idx = rsrc.lastIndexOf(':');\n-        if (idx != -1) {\n-            name = rsrc.substring(idx + 1);\n-            rsrc = rsrc.substring(0, idx);\n-        }\n         if (!rsrc.endsWith(\".xml\"))\n             return false;\n-        return load(name, rsrc, null, loader, true) == Boolean.TRUE;\n+        return load(rsrc, anchor, null, loader, true) == Boolean.TRUE;\n     }\n \n     @Override\n-    public boolean load(File file) {\n+    public boolean load(File file, String anchor) {\n         if (!file.getName().endsWith(\".xml\"))\n             return false;\n \n         try {\n             ConfigurationParser parser = new ConfigurationParser(null);\n             parser.parse(file);\n-            List pinfos = parser.getResults();\n-            for (PersistenceUnitInfo pinfo : (List<PersistenceUnitInfo>) pinfos)\n-                if (load(pinfo))\n-                    return true;\n-            return false;\n+            return load(findUnit((List<PersistenceUnitInfo>) \n+                parser.getResults(), anchor));\n         } catch (IOException ioe) {\n             throw new GeneralException(ioe);\n         }"},{"sha":"add58411030823486297c8703fe6f98fd6cd3d22","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProviderImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/aba057d644f135f324b1f5878ded921536b9127b/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProviderImpl.java","raw_url":"https://github.com/apache/openjpa/raw/aba057d644f135f324b1f5878ded921536b9127b/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProviderImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProviderImpl.java?ref=aba057d644f135f324b1f5878ded921536b9127b","patch":"@@ -62,7 +62,7 @@ public EntityManagerFactory createEntityManagerFactory(String name,\n         String resource, Map m) {\n         ConfigurationProviderImpl cp = new ConfigurationProviderImpl();\n         try {\n-            if (cp.load(name, resource, m))\n+            if (cp.load(resource, name, m))\n                 return OpenJPAPersistence.toEntityManagerFactory(\n                     Bootstrap.newBrokerFactory(cp, cp.getClassLoader()));\n             else"},{"sha":"067cfc640a41215c22791e53394966de4d642406","filename":"openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/XMLConfiguration.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/aba057d644f135f324b1f5878ded921536b9127b/openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/XMLConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/aba057d644f135f324b1f5878ded921536b9127b/openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/XMLConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/XMLConfiguration.java?ref=aba057d644f135f324b1f5878ded921536b9127b","patch":"@@ -47,7 +47,7 @@ public XMLConfiguration() {\n         lockManagerPlugin.setString(\"version\");\n \n         ProductDerivations.beforeConfigurationLoad(this);\n-        loadDefaults();\n+        loadGlobals();\n     }\n \n     /**"}]}

