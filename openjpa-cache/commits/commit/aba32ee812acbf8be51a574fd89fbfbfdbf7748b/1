{"sha":"aba32ee812acbf8be51a574fd89fbfbfdbf7748b","node_id":"MDY6Q29tbWl0MjA2MzY0OmFiYTMyZWU4MTJhY2JmOGJlNTFhNTc0ZmQ4OWZiZmJmZGJmNzc0OGI=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-07-10T02:44:49Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-07-10T02:44:49Z"},"message":"OPENJPA-732:\nPrevent duplicate events from being fired (stored in Sets instead of Lists)\nChanges originally made by Albert Lee were merged to 1.2.x.\nSubmitted by: B. J. Reed.\n\tmodified:   openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java\n\tnew file:   openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/Message.java\n\tnew file:   openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/MessageListenerImpl.java\n\tnew file:   openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/TestMessageListeners.java\n\tmodified:   openjpa-persistence-jdbc/src/test/resources/META-INF/listener-orm.xml\n\tmodified:   openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@792787 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0b86d514708134a51ef57561bc4688858361f333","url":"https://api.github.com/repos/apache/openjpa/git/trees/0b86d514708134a51ef57561bc4688858361f333"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/aba32ee812acbf8be51a574fd89fbfbfdbf7748b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/aba32ee812acbf8be51a574fd89fbfbfdbf7748b","html_url":"https://github.com/apache/openjpa/commit/aba32ee812acbf8be51a574fd89fbfbfdbf7748b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/aba32ee812acbf8be51a574fd89fbfbfdbf7748b/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"4d687228b515cb4371d11860c9e02b374eb0e8e5","url":"https://api.github.com/repos/apache/openjpa/commits/4d687228b515cb4371d11860c9e02b374eb0e8e5","html_url":"https://github.com/apache/openjpa/commit/4d687228b515cb4371d11860c9e02b374eb0e8e5"}],"stats":{"total":443,"additions":427,"deletions":16},"files":[{"sha":"2756c32d619675482e3777d68a89e92c7297baed","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","status":"modified","additions":17,"deletions":16,"changes":33,"blob_url":"https://github.com/apache/openjpa/blob/aba32ee812acbf8be51a574fd89fbfbfdbf7748b/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/aba32ee812acbf8be51a574fd89fbfbfdbf7748b/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java?ref=aba32ee812acbf8be51a574fd89fbfbfdbf7748b","patch":"@@ -32,6 +32,7 @@\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.Iterator;\n+import java.util.LinkedHashSet;\n import java.util.LinkedList;\n import java.util.List;\n import java.util.Map;\n@@ -1521,7 +1522,7 @@ public void setSavepoint(String name) {\n                 _savepoints = new LinkedMap();\n             } else {\n                 if (_savepointCache == null)\n-                    save.save(Collections.EMPTY_LIST);\n+                    save.save(Collections.EMPTY_SET);\n                 else {\n                     save.save(_savepointCache);\n                     _savepointCache.clear();\n@@ -2189,7 +2190,7 @@ protected void endTransaction(int status) {\n         if (hasTransactionalObjects())\n             transStates = _transCache;\n         else\n-            transStates = Collections.EMPTY_LIST;\n+            transStates = Collections.EMPTY_SET;\n \n         // fire after rollback/commit event\n         Collection mobjs = null;\n@@ -2264,7 +2265,7 @@ protected void endTransaction(int status) {\n \n         // now clear trans cache; keep cleared version rather than\n         // null to avoid having to re-create the set later; more efficient\n-        if (transStates != Collections.EMPTY_LIST) {\n+        if (transStates != Collections.EMPTY_SET) {\n             _transCache = (TransactionalCache) transStates;\n             _transCache.clear();\n         }\n@@ -3309,7 +3310,7 @@ public void transactionalAll(Collection objs, boolean updateVersion,\n             Object obj;\n             StateManagerImpl sm;\n             ClassMetaData meta;\n-            Collection sms = new ArrayList(objs.size());\n+            Collection sms = new LinkedHashSet(objs.size());\n             List exceps = null;\n             for (Iterator itr = objs.iterator(); itr.hasNext();) {\n                 obj = itr.next();\n@@ -3636,7 +3637,7 @@ public void lockAll(Collection objs, int level, int timeout,\n         try {\n             assertActiveTransaction();\n \n-            Collection sms = new ArrayList(objs.size());\n+            Collection sms = new LinkedHashSet(objs.size());\n             Object obj;\n             StateManagerImpl sm;\n             for (Iterator itr = objs.iterator(); itr.hasNext();) {\n@@ -3783,7 +3784,7 @@ protected Collection getManagedStates() {\n      */\n     protected Collection getTransactionalStates() {\n         if (!hasTransactionalObjects())\n-            return Collections.EMPTY_LIST;\n+            return Collections.EMPTY_SET;\n         return _transCache.copy();\n     }\n \n@@ -3802,7 +3803,7 @@ private boolean hasTransactionalObjects() {\n      */\n     protected Collection getDirtyStates() {\n         if (!hasTransactionalObjects())\n-            return Collections.EMPTY_LIST;\n+            return Collections.EMPTY_SET;\n \n         return _transCache.copyDirty();\n     }\n@@ -3813,8 +3814,8 @@ protected Collection getDirtyStates() {\n      */\n     protected Collection getPendingTransactionalStates() {\n         if (_pending == null)\n-            return Collections.EMPTY_LIST;\n-        return new ArrayList(_pending);\n+            return Collections.EMPTY_SET;\n+        return new LinkedHashSet(_pending);\n     }\n \n     /**\n@@ -4035,19 +4036,19 @@ public void dirtyType(Class cls) {\n \n     public Collection getPersistedTypes() {\n         if (_persistedClss == null || _persistedClss.isEmpty())\n-            return Collections.EMPTY_LIST;\n+            return Collections.EMPTY_SET;\n         return Collections.unmodifiableCollection(_persistedClss);\n     }\n \n     public Collection getUpdatedTypes() {\n         if (_updatedClss == null || _updatedClss.isEmpty())\n-            return Collections.EMPTY_LIST;\n+            return Collections.EMPTY_SET;\n         return Collections.unmodifiableCollection(_updatedClss);\n     }\n \n     public Collection getDeletedTypes() {\n         if (_deletedClss == null || _deletedClss.isEmpty())\n-            return Collections.EMPTY_LIST;\n+            return Collections.EMPTY_SET;\n         return Collections.unmodifiableCollection(_deletedClss);\n     }\n \n@@ -4502,12 +4503,12 @@ public TransactionalCache(boolean orderDirty) {\n          */\n         public Collection copy() {\n             if (isEmpty())\n-                return Collections.EMPTY_LIST;\n+                return Collections.EMPTY_SET;\n \n             // size may not be entirely accurate due to refs expiring, so\n             // manually copy each object; doesn't matter this way if size too\n             // big by some\n-            List copy = new ArrayList(size());\n+            Set copy = new LinkedHashSet(size());\n             if (_dirty != null)\n                 for (Iterator itr = _dirty.iterator(); itr.hasNext();)\n                     copy.add(itr.next());\n@@ -4522,8 +4523,8 @@ public Collection copy() {\n          */\n         public Collection copyDirty() {\n             if (_dirty == null || _dirty.isEmpty())\n-                return Collections.EMPTY_LIST;\n-            return new ArrayList(_dirty);\n+                return Collections.EMPTY_SET;\n+            return new LinkedHashSet(_dirty);\n         }\n \n         /**"},{"sha":"e5151b9ab3e822cdfadd896209decc8cab86a109","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/Message.java","status":"added","additions":114,"deletions":0,"changes":114,"blob_url":"https://github.com/apache/openjpa/blob/aba32ee812acbf8be51a574fd89fbfbfdbf7748b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/Message.java","raw_url":"https://github.com/apache/openjpa/raw/aba32ee812acbf8be51a574fd89fbfbfdbf7748b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/Message.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/Message.java?ref=aba32ee812acbf8be51a574fd89fbfbfdbf7748b","patch":"@@ -0,0 +1,114 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.callbacks;\n+\n+import java.util.Date;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.Entity;\n+import javax.persistence.EntityListeners;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.Version;\n+\n+/**\n+ * A very simple persistent entity that holds a \"message\", has a \"created\" field\n+ * that is initialized to the time at which the object was created, and an id\n+ * field that is initialized to the current time.\n+ */\n+@Entity\n+@EntityListeners(value = MessageListenerImpl.class)\n+public class Message {\n+    @Id\n+    @GeneratedValue\n+    private long id;\n+\n+    @Basic\n+    private String message;\n+\n+    @Basic\n+    private Date created = null;\n+\n+    @Basic\n+    private Date updated = null;\n+\n+    @Version\n+    Integer version;\n+\n+    public Message() {\n+    }\n+\n+    public Message(String msg) {\n+        message = msg;\n+    }\n+\n+    public void setId(long val) {\n+        id = val;\n+    }\n+\n+    public long getId() {\n+        return id;\n+    }\n+\n+    public void setMessage(String msg) {\n+        message = msg;\n+    }\n+\n+    public String getMessage() {\n+        return message;\n+    }\n+\n+    public void setCreated(Date date) {\n+        created = date;\n+    }\n+\n+    public Date getCreated() {\n+        return created;\n+    }\n+\n+    public Integer getVersion() {\n+        return version;\n+    }\n+\n+    public void setVersion(Integer version) {\n+        this.version = version;\n+    }\n+\n+    public Date getUpdated() {\n+        return updated;\n+    }\n+\n+    public void setUpdated(Date updated) {\n+        this.updated = updated;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (o instanceof Message) {\n+            Message other = (Message) o;\n+            return other.getId() == this.getId();\n+        }\n+        return false;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return super.hashCode();\n+    }\n+}"},{"sha":"9141e1e71db3b8462b39608148726874eaf86313","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/MessageListenerImpl.java","status":"added","additions":102,"deletions":0,"changes":102,"blob_url":"https://github.com/apache/openjpa/blob/aba32ee812acbf8be51a574fd89fbfbfdbf7748b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/MessageListenerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/aba32ee812acbf8be51a574fd89fbfbfdbf7748b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/MessageListenerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/MessageListenerImpl.java?ref=aba32ee812acbf8be51a574fd89fbfbfdbf7748b","patch":"@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.callbacks;\n+\n+import java.util.Date;\n+\n+import javax.persistence.PrePersist;\n+import javax.persistence.PostPersist;\n+import javax.persistence.PostLoad;\n+import javax.persistence.PreUpdate;\n+import javax.persistence.PostUpdate;\n+import javax.persistence.PreRemove;\n+import javax.persistence.PostRemove;\n+\n+public class MessageListenerImpl {\n+\n+    public static int prePersistCount;\n+    public static int postPersistCount;\n+    public static int preUpdateCount;\n+    public static int postUpdateCount;\n+    public static int preRemoveCount;\n+    public static int postRemoveCount;\n+    public static int postLoadCount;\n+\n+    @PrePersist\n+    public void prePersist(Object o) {\n+        prePersistCount++;\n+\n+        if (o instanceof Message) {\n+            ((Message) o).setCreated(new Date());\n+            ((Message) o).setUpdated(new Date());\n+        }\n+    }\n+\n+    @PostPersist\n+    public void postPersist(Object o) {\n+        postPersistCount++;\n+    }\n+\n+    @PostLoad\n+    public void postLoad(Object o) {\n+        postLoadCount++;\n+    }\n+\n+    @PreUpdate\n+    public void preUpdate(Object o) {\n+        preUpdateCount++;\n+\n+        if (o instanceof Message) {\n+            ((Message) o).setUpdated(new Date());\n+        }\n+    }\n+\n+    @PostUpdate\n+    public void postUpdate(Object o) {\n+        postUpdateCount++;\n+    }\n+\n+    @PreRemove\n+    public void preRemove(Object o) {\n+        preRemoveCount++;\n+    }\n+\n+    @PostRemove\n+    public void postRemove(Object o) {\n+        postRemoveCount++;\n+    }\n+\n+    public static void resetCounters() {\n+        prePersistCount = 0;\n+        postPersistCount = 0;\n+        preUpdateCount = 0;\n+        postUpdateCount = 0;\n+        preRemoveCount = 0;\n+        postRemoveCount = 0;\n+        postLoadCount = 0;\n+    }\n+\n+    public static String getStates() {\n+        return \"prePersistCount = \" + prePersistCount + \", postPersistCount = \"\n+            + postPersistCount + \", preUpdateCount = \" + preUpdateCount\n+            + \", postUpdateCount = \" + postUpdateCount + \", preRemoveCount = \"\n+            + preRemoveCount + \", postRemoveCount = \" + postRemoveCount\n+            + \", postLoadCount = \" + postLoadCount;\n+    }\n+}"},{"sha":"3675c3a307f7f45c75b8d6875947d67ddb0c450e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/TestMessageListeners.java","status":"added","additions":190,"deletions":0,"changes":190,"blob_url":"https://github.com/apache/openjpa/blob/aba32ee812acbf8be51a574fd89fbfbfdbf7748b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/TestMessageListeners.java","raw_url":"https://github.com/apache/openjpa/raw/aba32ee812acbf8be51a574fd89fbfbfdbf7748b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/TestMessageListeners.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/TestMessageListeners.java?ref=aba32ee812acbf8be51a574fd89fbfbfdbf7748b","patch":"@@ -0,0 +1,190 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.callbacks;\n+\n+import javax.persistence.Query;\n+\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+\n+public class TestMessageListeners extends SingleEMFTestCase {\n+\n+    public void setUp() {\n+        setUp(DROP_TABLES);\n+    }\n+\n+    @Override\n+    protected String getPersistenceUnitName() {\n+        return \"listener-pu\";\n+    }\n+\n+    public void testUpdateInPrePersist() {\n+        // Create a new EntityManager from the EntityManagerFactory. The\n+        // EntityManager is the main object in the persistence API, and is\n+        // used to create, delete, and query objects, as well as access\n+        // the current transaction\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        try {\n+            // Begin a new local transaction so that we can persist a new entity\n+            em.getTransaction().begin();\n+\n+            MessageListenerImpl.resetCounters();\n+\n+            // Create and persist a new Message entity\n+            Message message = new Message(\"Hello Persistence!\");\n+            assertNull(\"Test message's created field to be null.\", message\n+                .getCreated());\n+            assertNull(\"Test message's updated field to be null.\", message\n+                .getUpdated());\n+\n+            em.persist(message);\n+\n+            // Pre-persist invoked, created and updated fields set\n+            assertStatus(1, 0, 0, 0, 0, 0, 0);\n+            assertNotNull(\"Test message's created field being set.\", message\n+                .getCreated());\n+            assertNotNull(\"Test message's updated field being set.\", message\n+                .getUpdated());\n+\n+            em.flush();\n+            // Post-persist invoked\n+            assertStatus(1, 1, 0, 0, 0, 0, 0);\n+\n+            em.clear();\n+\n+            // Perform a simple query to get the Message\n+            Query q = em.createQuery(\"select m from Message m where m.id=\"\n+                + message.getId());\n+            Message m = (Message) q.getSingleResult();\n+\n+            assertEquals(\"Test first expected message.\", \"Hello Persistence!\",\n+                m.getMessage());\n+            assertNotNull(\"Test message's created field being set.\", m\n+                .getCreated());\n+            assertNotNull(\"Test message's updated field being set.\", m\n+                .getUpdated());\n+\n+            // query trigger a load because em is cleared.\n+            assertStatus(1, 1, 0, 0, 0, 0, 1);\n+\n+            em.getTransaction().commit();\n+\n+            // since data is flushed, commit data with no event fired.\n+            assertStatus(1, 1, 0, 0, 0, 0, 1);\n+        } finally {\n+            if (em != null && em.getTransaction().isActive())\n+                em.getTransaction().rollback();\n+            if (em != null && em.isOpen())\n+                em.close();\n+        }\n+    }\n+\n+    public void testUpdateInPreUpdate() {\n+        // Create a new EntityManager from the EntityManagerFactory. The\n+        // EntityManager is the main object in the persistence API, and is\n+        // used to create, delete, and query objects, as well as access\n+        // the current transaction\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        try {\n+            // Begin a new local transaction so that we can persist a new entity\n+            em.getTransaction().begin();\n+\n+            MessageListenerImpl.resetCounters();\n+\n+            // Create and persist a new Message entity\n+            Message message = new Message(\"Hello Persistence!\");\n+            assertNull(\"Test message's created field to be null.\", message\n+                .getCreated());\n+            assertNull(\"Test message's updated field to be null.\", message\n+                .getUpdated());\n+\n+            em.persist(message);\n+\n+            // Pre-persist invoked, created and updated fields set\n+            assertStatus(1, 0, 0, 0, 0, 0, 0);\n+            assertNotNull(\"Test message's created field being set.\", message\n+                .getCreated());\n+            assertNotNull(\"Test message's updated field being set.\", message\n+                .getUpdated());\n+\n+            // Perform a simple query to get the Message\n+            Query q = em.createQuery(\"select m from Message m where m.id=\"\n+                + message.getId());\n+            Message m = (Message) q.getSingleResult();\n+            assertEquals(\"Test first expected message.\", \"Hello Persistence!\",\n+                m.getMessage());\n+            assertNotNull(\"Test message's created field being set.\", m\n+                .getCreated());\n+            assertNotNull(\"Test message's updated field being set.\", m\n+                .getUpdated());\n+\n+            // Query cause flush to occur, hence fire the postPersist event\n+            assertStatus(1, 1, 0, 0, 0, 0, 0);\n+\n+            // Create and persist another new Message entity\n+            message = new Message(\"Hello Persistence 2!\");\n+            assertNull(\"Test message's created field to be null.\", message\n+                .getCreated());\n+            assertNull(\"Test message's updated field to be null.\", message\n+                .getUpdated());\n+\n+            em.persist(message);\n+\n+            // Pre-persist invoked, created and updated fields set\n+            assertStatus(2, 1, 0, 0, 0, 0, 0);\n+            assertNotNull(\"Test message's created field being set.\", message\n+                .getCreated());\n+            assertNotNull(\"Test message's updated field being set.\", message\n+                .getUpdated());\n+\n+            em.getTransaction().commit();\n+\n+            // Complete the 2nd @postPersist\n+            //assertStatus(2, 2, 0, 0, 0, 0, 0);\n+            // preUpdate and postUpdate are called in 1.2.x but not in 2.0\n+            assertStatus(2, 2, 1, 1, 0, 0, 0);\n+            \n+            // Make an update to trigger the pre/postUpdater callbacks\n+            em.getTransaction().begin();\n+            message = em.find(Message.class,message.getId());\n+            message.setMessage(\"Update field and trigger pre/postUpdate\");\n+            em.getTransaction().commit();\n+            \n+            // Complete the 2nd @postPersist\n+            assertStatus(2, 2, 2, 2, 0, 0, 0);\n+\n+        } finally {\n+            if (em != null && em.getTransaction().isActive())\n+                em.getTransaction().rollback();\n+            if (em != null && em.isOpen())\n+                em.close();\n+        }\n+    }\n+\n+    private void assertStatus(int prePersist, int postPersist, int preUpdate,\n+        int postUpdate, int preRemove, int postRemove, int postLoad) {\n+        assertEquals(prePersist, MessageListenerImpl.prePersistCount);\n+        assertEquals(postPersist, MessageListenerImpl.postPersistCount);\n+        assertEquals(preUpdate, MessageListenerImpl.preUpdateCount);\n+        assertEquals(postUpdate, MessageListenerImpl.postUpdateCount);\n+        assertEquals(preRemove, MessageListenerImpl.preRemoveCount);\n+        assertEquals(postRemove, MessageListenerImpl.postRemoveCount);\n+        assertEquals(postLoad, MessageListenerImpl.postLoadCount);\n+    }\n+}"},{"sha":"fbab1f5518f9c50539d9dc3c30014d4221c74a36","filename":"openjpa-persistence-jdbc/src/test/resources/META-INF/listener-orm.xml","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/aba32ee812acbf8be51a574fd89fbfbfdbf7748b/openjpa-persistence-jdbc/src/test/resources/META-INF/listener-orm.xml","raw_url":"https://github.com/apache/openjpa/raw/aba32ee812acbf8be51a574fd89fbfbfdbf7748b/openjpa-persistence-jdbc/src/test/resources/META-INF/listener-orm.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/META-INF/listener-orm.xml?ref=aba32ee812acbf8be51a574fd89fbfbfdbf7748b","patch":"@@ -34,4 +34,7 @@\n     <entity class=\"EntityListenerEntity\">\n         <exclude-default-listeners/>\n     </entity>\n+    <entity class=\"Message\">\n+        <exclude-default-listeners/>\n+    </entity>\n </entity-mappings>\n\\ No newline at end of file"},{"sha":"12f6afe6117916914ea12e581be137fa0e2271cc","filename":"openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/aba32ee812acbf8be51a574fd89fbfbfdbf7748b/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/aba32ee812acbf8be51a574fd89fbfbfdbf7748b/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml?ref=aba32ee812acbf8be51a574fd89fbfbfdbf7748b","patch":"@@ -84,6 +84,7 @@\n         <mapping-file>META-INF/listener-orm.xml</mapping-file>\n         <class>org.apache.openjpa.persistence.callbacks.EntityListenerEntity</class>\n         <class>org.apache.openjpa.persistence.callbacks.GlobalListenerEntity</class>\n+        <class>org.apache.openjpa.persistence.callbacks.Message</class>\n         <properties>\n             <property name=\"openjpa.jdbc.SynchronizeMappings\"\n                   value=\"buildSchema(ForeignKeys=true)\"/>"}]}

