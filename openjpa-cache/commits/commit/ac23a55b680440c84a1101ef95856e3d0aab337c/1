{"sha":"ac23a55b680440c84a1101ef95856e3d0aab337c","node_id":"MDY6Q29tbWl0MjA2MzY0OmFjMjNhNTViNjgwNDQwYzg0YTExMDFlZjk1ODU2ZTNkMGFhYjMzN2M=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-09-17T18:44:29Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-09-17T18:44:29Z"},"message":"OPENJPA-1213 Additional Compatibility tests (patch #2) showing change in query.setParameter() behaviour.  Contributed by Tim McConnell, but with some package name and OpenJPAVersion checks added.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@816330 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"757256045e1ff434f80fef81282368b26dadad7f","url":"https://api.github.com/repos/apache/openjpa/git/trees/757256045e1ff434f80fef81282368b26dadad7f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ac23a55b680440c84a1101ef95856e3d0aab337c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ac23a55b680440c84a1101ef95856e3d0aab337c","html_url":"https://github.com/apache/openjpa/commit/ac23a55b680440c84a1101ef95856e3d0aab337c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ac23a55b680440c84a1101ef95856e3d0aab337c/comments","author":null,"committer":null,"parents":[{"sha":"846d1ef82ac6dbb253a19db1007a684c69e3416f","url":"https://api.github.com/repos/apache/openjpa/commits/846d1ef82ac6dbb253a19db1007a684c69e3416f","html_url":"https://github.com/apache/openjpa/commit/846d1ef82ac6dbb253a19db1007a684c69e3416f"}],"stats":{"total":428,"additions":427,"deletions":1},"files":[{"sha":"02033bfa78678921d141d0b3988f2c3db3386724","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/SimpleEntity.java","status":"added","additions":108,"deletions":0,"changes":108,"blob_url":"https://github.com/apache/openjpa/blob/ac23a55b680440c84a1101ef95856e3d0aab337c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/SimpleEntity.java","raw_url":"https://github.com/apache/openjpa/raw/ac23a55b680440c84a1101ef95856e3d0aab337c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/SimpleEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/SimpleEntity.java?ref=ac23a55b680440c84a1101ef95856e3d0aab337c","patch":"@@ -0,0 +1,108 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.compat;\n+\n+import java.io.Serializable;\n+import javax.persistence.Basic;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.EntityResult;\n+import javax.persistence.FieldResult;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.NamedNativeQueries;\n+import javax.persistence.NamedNativeQuery;\n+import javax.persistence.NamedQueries;\n+import javax.persistence.NamedQuery;\n+import javax.persistence.SqlResultSetMapping;\n+import javax.persistence.Table;\n+\n+@NamedQuery(name=\"FindXTwo\", query=\"select s from simple s where s.name = :fname\")\n+\n+@NamedQueries( {\n+    @NamedQuery(name=\"FindOne\", query=\"select s from simple s where s.name = :fname\"),\n+    @NamedQuery(name=\"FindOne\", query=\"select s from simple s where s.name = :fname\"),\n+    @NamedQuery(name=\"FindAll\", query=\"select s from simple s\")\n+})\n+\n+@NamedNativeQueries( { \n+    @NamedNativeQuery(name = \"findSimpleEntitites\",\n+        query = \"SELECT ID, NAME, VALUE FROM SIMPLE_ENTITY\", \n+        resultSetMapping = \"simpleEntitiesResult\") })\n+\n+@SqlResultSetMapping(name = \"simpleEntitiesResult\",\n+    entities = @EntityResult(\n+    entityClass = org.apache.openjpa.persistence.query.SimpleEntity.class, \n+    fields = {@FieldResult(name = \"id\", column = \"ID\"),\n+        @FieldResult(name = \"name\", column = \"NAME\"),\n+        @FieldResult(name = \"value\", column = \"VALUE\") }))\n+@Entity(name = \"simple\")\n+@Table(name = \"SIMPLE_ENTITY\")\n+public class SimpleEntity implements Serializable {\n+\n+    public static final String NAMED_QUERY_WITH_POSITIONAL_PARAMS = \"SelectWithPositionalParameter\";\n+    public static final String NAMED_QUERY_WITH_NAMED_PARAMS = \"SelectWithNamedParameter\";\n+\n+    @Id\n+    @GeneratedValue\n+    @Column(name = \"ID\")\n+    private long id;\n+\n+    @Basic\n+    @Column(name = \"NAME\")\n+    private String name;\n+\n+    @Basic\n+    @Column(name = \"VALUE\")\n+    private String value;\n+\n+    public SimpleEntity() {\n+    }\n+\n+    public SimpleEntity(String name, String value) {\n+        this();\n+        this.name = name;\n+        this.value = value;\n+    }\n+\n+    public long getId() {\n+        return this.id;\n+    }\n+\n+    public void setId(long id) {\n+        this.id = id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String getValue() {\n+        return value;\n+    }\n+\n+    public void setValue(String value) {\n+        this.value = value;\n+    }\n+}\n+"},{"sha":"014cdc77c8932b32132b747af514436a5756bc8f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/SimpleEntity2.java","status":"added","additions":88,"deletions":0,"changes":88,"blob_url":"https://github.com/apache/openjpa/blob/ac23a55b680440c84a1101ef95856e3d0aab337c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/SimpleEntity2.java","raw_url":"https://github.com/apache/openjpa/raw/ac23a55b680440c84a1101ef95856e3d0aab337c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/SimpleEntity2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/SimpleEntity2.java?ref=ac23a55b680440c84a1101ef95856e3d0aab337c","patch":"@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.compat;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.NamedQueries;\n+import javax.persistence.NamedQuery;\n+import javax.persistence.Table;\n+\n+@NamedQuery(name=\"FindXTwo\", query=\"select s from simple2 s where s.name = :fname\")\n+\n+@NamedQueries( {\n+    @NamedQuery(name=\"FindOne\", query=\"select s from simple2 s where s.name = :fname\"),\n+    @NamedQuery(name=\"Find2One\", query=\"select s from simple2 s where s.name = :fname\"),\n+    @NamedQuery(name=\"Find2All\", query=\"select s from simple2 s\")\n+})\n+\n+@Entity(name = \"simple2\")\n+@Table(name = \"SIMPLE_ENTITY2\")\n+public class SimpleEntity2 {\n+\n+    @Id\n+    @GeneratedValue\n+    @Column(name = \"ID\")\n+    private long id;\n+\n+    @Basic\n+    @Column(name = \"NAME\")\n+    private String name;\n+\n+    @Basic\n+    @Column(name = \"VALUE\")\n+    private String value;\n+\n+    public SimpleEntity2() {\n+    }\n+\n+    public SimpleEntity2(String name, String value) {\n+        this();\n+        this.name = name;\n+        this.value = value;\n+    }\n+\n+    public long getId() {\n+        return this.id;\n+    }\n+\n+    public void setId(long id) {\n+        this.id = id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String getValue() {\n+        return value;\n+    }\n+\n+    public void setValue(String value) {\n+        this.value = value;\n+    }\n+}\n+"},{"sha":"04b6e2e63c1eb4b37f92296a4416d0ac311b6d82","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/TestDupNamedQuery.java","status":"added","additions":132,"deletions":0,"changes":132,"blob_url":"https://github.com/apache/openjpa/blob/ac23a55b680440c84a1101ef95856e3d0aab337c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/TestDupNamedQuery.java","raw_url":"https://github.com/apache/openjpa/raw/ac23a55b680440c84a1101ef95856e3d0aab337c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/TestDupNamedQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/TestDupNamedQuery.java?ref=ac23a55b680440c84a1101ef95856e3d0aab337c","patch":"@@ -0,0 +1,132 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.compat;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import javax.persistence.EntityManager;\n+\n+import junit.textui.TestRunner;\n+import org.apache.openjpa.conf.OpenJPAVersion;\n+import org.apache.openjpa.persistence.ArgumentException;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+/**\n+ * <b>Compatible testcases</b> are used to test various backwards compatibility scenarios between JPA 2.0 and JPA 1.2\n+ * \n+ * <p>The following scenarios are tested:\n+ * <ol>\n+ * <li>query.setParameter()\n+ * </ol>\n+ * <p> \n+ * <b>Note(s):</b>\n+ * <ul>\n+ * <li>The proper openjpa.Compatibility value(s) must be provided in order for the testcase(s) to succeed\n+ * </ul>\n+ */\n+public class TestDupNamedQuery extends SingleEMFTestCase {\n+\n+    public void setUp() {\n+        setUp(SimpleEntity.class, SimpleEntity2.class, CLEAR_TABLES);\n+\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.persist(new SimpleEntity(\"Name One\", \"Value One\"));\n+        em.persist(new SimpleEntity(\"Name Two\", \"Value Two\"));\n+        em.persist(new SimpleEntity2(\"Name2 One\", \"Value2 One\"));\n+        em.persist(new SimpleEntity2(\"Name2 Two\", \"Value2 Two\"));\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+\n+    public void testSimpleQuery() {\n+        simpleQuery(false, \"FindOne\", \"FindAll\", \"Name One\", \"Value One\",\n+            \"Name Two\", \"Value Two\");\n+        simpleQuery(true, \"Find2One\", \"Find2All\", \"Name2 One\", \"Value2 One\",\n+            \"Name2 Two\", \"Value2 Two\");\n+\n+        simpleQuery(false, \"FindXTwo\", null, \"Name Two\", \"Value Two\", null,\n+            null);\n+    }\n+\n+    private void simpleQuery(boolean simple2, String findOneQName,\n+        String findAllQName, String nameOne, String ValueOne, String nameTwo,\n+        String ValueTwo) {\n+        EntityManager em = emf.createEntityManager();\n+\n+        try {\n+            List list = em.createNamedQuery(findOneQName).setParameter(1, nameOne).getResultList();\n+            assertNotNull(list);\n+            assertEquals(list.size(), 1);\n+            Object o = list.get(0);\n+            assertSame(o.getClass(), simple2 ? SimpleEntity2.class : SimpleEntity.class);\n+            assertEquals(simple2 ? ((SimpleEntity2) o).getValue()\n+                : ((SimpleEntity) o).getValue(), ValueOne);\n+\n+            if (findAllQName != null) {\n+                list = em.createNamedQuery(findAllQName).getResultList();\n+                assertNotNull(list);\n+                assertEquals(list.size(), 2);\n+                for (Iterator resultIter = list.iterator(); resultIter.hasNext();) {\n+                    o = resultIter.next();\n+                    assertSame(o.getClass(), simple2 ? SimpleEntity2.class\n+                        : SimpleEntity.class);\n+                    String n = null;\n+                    String v = null;\n+                    if (simple2) {\n+                        n = ((SimpleEntity2) o).getName();\n+                        v = ((SimpleEntity2) o).getValue();\n+                    } else {\n+                        n = ((SimpleEntity) o).getName();\n+                        v = ((SimpleEntity) o).getValue();\n+                    }\n+                    if (n.equals(nameOne)) {\n+                        assertTrue(v.equals(ValueOne));\n+                    } else if (n.equals(nameTwo)) {\n+                        assertTrue(v.equals(ValueTwo));\n+                    } else {\n+                        assertTrue(false);\n+                    }\n+                }\n+            }\n+        } catch (ArgumentException ae) {\n+            if ((OpenJPAVersion.MAJOR_RELEASE == 1) &&\n+                 (OpenJPAVersion.MINOR_RELEASE >= 3)) {\n+                // new behavior - expected exception\n+            } else {\n+                // unexpected exception\n+               throw ae;\n+            }\n+        } catch (IllegalArgumentException iae) {\n+            if (OpenJPAVersion.MAJOR_RELEASE >= 2) {\n+                // expected exception for new behavior\n+            } else {\n+                // unexpected exception\n+                throw iae;\n+            }\n+        } finally {\n+            em.close();\n+        }\n+    }\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(TestDupNamedQuery.class);\n+    }\n+}\n+"},{"sha":"7b4d640304e2a0a104205b49e50348747a351d84","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/TestMethodQLQuery.java","status":"added","additions":97,"deletions":0,"changes":97,"blob_url":"https://github.com/apache/openjpa/blob/ac23a55b680440c84a1101ef95856e3d0aab337c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/TestMethodQLQuery.java","raw_url":"https://github.com/apache/openjpa/raw/ac23a55b680440c84a1101ef95856e3d0aab337c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/TestMethodQLQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/TestMethodQLQuery.java?ref=ac23a55b680440c84a1101ef95856e3d0aab337c","patch":"@@ -0,0 +1,97 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.compat;\n+\n+import java.util.Map;\n+import java.util.ArrayList;\n+\n+import org.apache.openjpa.conf.OpenJPAVersion;\n+import org.apache.openjpa.kernel.QueryLanguages;\n+import org.apache.openjpa.kernel.StoreContext;\n+import org.apache.openjpa.kernel.FetchConfiguration;\n+import org.apache.openjpa.lib.rop.ResultObjectProvider;\n+import org.apache.openjpa.lib.rop.ListResultObjectProvider;\n+import org.apache.openjpa.meta.ClassMetaData;\n+import org.apache.openjpa.persistence.ArgumentException;\n+import org.apache.openjpa.persistence.OpenJPAQuery;\n+import org.apache.openjpa.persistence.QueryImpl;\n+import org.apache.openjpa.persistence.test.SingleEMTestCase;\n+\n+/**\n+ * <b>Compatible testcases</b> are used to test various backwards compatibility scenarios between JPA 2.0 and JPA 1.2\n+ * \n+ * <p>The following scenarios are tested:\n+ * <ol>\n+ * <li>query.setParameter()\n+ * </ol>\n+ * <p> \n+ * <b>Note(s):</b>\n+ * <ul>\n+ * <li>The proper openjpa.Compatibility value(s) must be provided in order for the testcase(s) to succeed\n+ * </ul>\n+ */\n+public class TestMethodQLQuery extends SingleEMTestCase {\n+\n+    @Override\n+    public void setUp() {\n+        setUp(SimpleEntity.class);\n+    }\n+\n+    public void testMethodQLWithoutParametersDeclared() {\n+        try {\n+            OpenJPAQuery q = em.createQuery(QueryLanguages.LANG_METHODQL,\n+                getClass().getName() + \".echo\");\n+            ((QueryImpl) q).getDelegate().setCandidateType(\n+                SimpleEntity.class, true);\n+            q.setParameter(\"param\", 5);\n+            ((QueryImpl) q).getDelegate().declareParameters(\"Integer param\");\n+            assertEquals(5, q.getResultList().get(0));\n+        } catch (ArgumentException ae) {\n+            if ((OpenJPAVersion.MAJOR_RELEASE == 1) &&\n+                 (OpenJPAVersion.MINOR_RELEASE >= 3)) {\n+                // new behavior - expected exception\n+            } else {\n+                // unexpected exception\n+               throw ae;\n+            }\n+        } catch (IllegalArgumentException iae) {\n+            if (OpenJPAVersion.MAJOR_RELEASE >= 2) {\n+                // expected exception for new behavior\n+            } else {\n+                // unexpected exception\n+                throw iae;\n+            }\n+        }\n+    } \n+\n+    public static ResultObjectProvider echo(StoreContext ctx,\n+        ClassMetaData meta, boolean subs, Map params, FetchConfiguration conf) {\n+        return new ListResultObjectProvider(new ArrayList(params.values()));\n+    }\n+\n+    public static void voidMeth(StoreContext ctx,\n+        ClassMetaData meta, boolean subs, Map params, FetchConfiguration conf) {\n+    }\n+\n+    public static Object invalidReturnMeth(StoreContext ctx,\n+        ClassMetaData meta, boolean subs, Map params, FetchConfiguration conf) {\n+        return null;\n+    }\n+}\n+"},{"sha":"912fd0c697f66fc68bfb993951e131286190407c","filename":"openjpa-project/src/doc/manual/migration_considerations.xml","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/ac23a55b680440c84a1101ef95856e3d0aab337c/openjpa-project/src/doc/manual/migration_considerations.xml","raw_url":"https://github.com/apache/openjpa/raw/ac23a55b680440c84a1101ef95856e3d0aab337c/openjpa-project/src/doc/manual/migration_considerations.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/migration_considerations.xml?ref=ac23a55b680440c84a1101ef95856e3d0aab337c","patch":"@@ -145,7 +145,8 @@\n                     The Query interface setParameters() method behavior has\n                     changed to throw an IllegalArgumentException if more\n                     parameter substitutions are supplied than defined in the\n-                    createQuery() call, as required by the JPA2 specification.\n+                    createQuery() or createNamedQuery() call, as required by\n+                    the JPA2 specification.\n                     OpenJPA 1.2.x and prior versions would silently ignore the\n                     supplied parameter substitutions and allow the Query to be\n                     processed."}]}

