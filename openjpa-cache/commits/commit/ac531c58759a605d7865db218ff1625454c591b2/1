{"sha":"ac531c58759a605d7865db218ff1625454c591b2","node_id":"MDY6Q29tbWl0MjA2MzY0OmFjNTMxYzU4NzU5YTYwNWQ3ODY1ZGIyMThmZjE2MjU0NTRjNTkxYjI=","commit":{"author":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2009-11-03T22:48:43Z"},"committer":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2009-11-03T22:48:43Z"},"message":"OPENJPA-1083 Fixed a mapping tool failure caused by the inability to discover and drop multi-column foreign key constraints.  Multi-column FK's were not getting dropped, but got added after clearing out the tables. Trying to add an existing FK caused an exception when using Oracle.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@832587 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4da0b702b4ace35ee7f9b57890bfc5c78dabc1fc","url":"https://api.github.com/repos/apache/openjpa/git/trees/4da0b702b4ace35ee7f9b57890bfc5c78dabc1fc"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ac531c58759a605d7865db218ff1625454c591b2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ac531c58759a605d7865db218ff1625454c591b2","html_url":"https://github.com/apache/openjpa/commit/ac531c58759a605d7865db218ff1625454c591b2","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ac531c58759a605d7865db218ff1625454c591b2/comments","author":null,"committer":null,"parents":[{"sha":"ea6499afc01087cfa83879506fdc2ca49ac39ad0","url":"https://api.github.com/repos/apache/openjpa/commits/ea6499afc01087cfa83879506fdc2ca49ac39ad0","html_url":"https://github.com/apache/openjpa/commit/ea6499afc01087cfa83879506fdc2ca49ac39ad0"}],"stats":{"total":198,"additions":185,"deletions":13},"files":[{"sha":"75acb4257ccf7bc26ae1ab55bbdeb7652b3a781d","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/ForeignKey.java","status":"modified","additions":120,"deletions":5,"changes":125,"blob_url":"https://github.com/apache/openjpa/blob/ac531c58759a605d7865db218ff1625454c591b2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/ForeignKey.java","raw_url":"https://github.com/apache/openjpa/raw/ac531c58759a605d7865db218ff1625454c591b2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/ForeignKey.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/ForeignKey.java?ref=ac531c58759a605d7865db218ff1625454c591b2","patch":"@@ -26,6 +26,7 @@\n import java.util.List;\n \n import org.apache.commons.lang.ObjectUtils;\n+import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.jdbc.sql.DBDictionary;\n import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.lib.util.Localizer;\n@@ -753,7 +754,7 @@ public String loadNameFromDB(DBDictionary dbdict, Connection conn) {\n             Schema schema = getTable().getSchema();\n             ForeignKey[] fks = dbdict.getImportedKeys(conn.getMetaData(), \n                 conn.getCatalog(), schema.getName(), \n-                getTable().getName(), conn);\n+                getTable().getName(), conn, false);\n             for ( int i=0; i< fks.length; i++) {\n                 Table localtable = schema.getTable(fks[i].getTableName());\n                 Table pkTable = schema.getTable(\n@@ -768,10 +769,33 @@ public String loadNameFromDB(DBDictionary dbdict, Connection conn) {\n                     fkTemp.setDeferred(fks[i].isDeferred());\n                     fkTemp.setDeleteAction(fks[i].getDeleteAction());\n                 }\n-                if( ! fkTemp.containsColumn(\n-                    localtable.getColumn(fks[i].getColumnName(), dbdict)))\n-                fkTemp.join(localtable.getColumn(fks[i].getColumnName(), dbdict), \n-                    pkTable.getColumn(fks[i].getPrimaryKeyColumnName(), dbdict));\n+                if (fks[i].getColumns() == null || fks[i].getColumns().length == 0) {\n+                    // Singular column foreign key \n+                    if( ! fkTemp.containsColumn(\n+                        localtable.getColumn(fks[i].getColumnName(), dbdict)))\n+                    fkTemp.join(localtable.getColumn(fks[i].getColumnName(), dbdict), \n+                        pkTable.getColumn(fks[i].getPrimaryKeyColumnName(), dbdict));\n+                } else {\n+                    // Add the multi-column foreign key, joining local and pk columns in\n+                    // the temporary key\n+                    Column[] locCols = fks[i].getColumns();\n+                    Column[] pkCols = fks[i].getPrimaryKeyColumns();\n+                    // Column counts must match\n+                    if (locCols != null && pkCols != null & \n+                        locCols.length != pkCols.length) {\n+                        Log log = dbdict.getLog();\n+                        if (log.isTraceEnabled()) {\n+                            log.trace(_loc.get(\"fk-column-mismatch\"));\n+                        }\n+                    }\n+                    for (int j = 0; j < locCols.length; j++) {\n+                        if( ! fkTemp.containsColumn(\n+                            localtable.getColumn(locCols[j].getName(), dbdict))) {\n+                            fkTemp.join(localtable.getColumn(locCols[j].getName(), dbdict), \n+                                pkTable.getColumn(pkCols[j].getName(), dbdict));\n+                        }\n+                    }\n+                }\n                 if( equalsForeignKey(fkTemp))\n                 {\n                     if(addFK)\n@@ -790,5 +814,96 @@ public String loadNameFromDB(DBDictionary dbdict, Connection conn) {\n         }\n         return retVal;\n     }\n+\n+    /**\n+     * Joins the column of a single column FK to this FK.\n+     * @param fk\n+     */\n+    public void addColumn(ForeignKey fk) {\n+        // Convert simple name based fk to a multi-column FK if necessary.\n+        if (getColumns() == null || getColumns().length == 0) {\n+            // If this FK is single column key, covert to a multi-column key\n+            Column[] keyCols = createKeyColumns(this);\n+            if (keyCols[0] != null && keyCols[1] != null) {\n+                setPrimaryKeyColumnName(null);\n+                setColumnName(null);\n+                join(keyCols[0], keyCols[1]);\n+            }\n+        }\n+        // Create the local and primary key columns from the fk and add them\n+        // to this fk.\n+        Column[] keyCols = createKeyColumns(fk);\n+        if (keyCols[0] != null && keyCols[1] != null) {\n+            join(keyCols[0], keyCols[1]);\n+        }\n+    }\n     \n+    /*\n+     * Creates the local and primary key columns for a name-based fk. \n+     * @return Column[] element 0 is local column\n+     *                  element 1 is the primary key in another table.\n+     */\n+    private static Column[] createKeyColumns(ForeignKey fk) {\n+        Column fkCol = null;\n+        if (!StringUtils.isEmpty(fk.getColumnName())) {\n+            fkCol = new Column();\n+            fkCol.setName(fk.getColumnName());\n+            fkCol.setTableName(fk.getTableName());\n+            fkCol.setSchemaName(fk.getSchemaName());\n+        }\n+        \n+        Column pkCol = null;\n+        if (!StringUtils.isEmpty(fk.getPrimaryKeyColumnName())) {\n+            pkCol = new Column();\n+            pkCol.setName(fk.getPrimaryKeyColumnName());\n+            pkCol.setTableName(fk.getPrimaryKeyTableName());\n+            pkCol.setSchemaName(fk.getPrimaryKeySchemaName());\n+        }\n+        return new Column[] { fkCol, pkCol };\n+    }\n+    \n+    /*\n+     * ForeignKey utility class which determines equality based upon the \n+     * non-column state of the keys.  \n+     */\n+    public static class FKMapKey {\n+        \n+        private ForeignKey _fk;\n+\n+        public FKMapKey(ForeignKey fk) {\n+            _fk = fk;\n+        }\n+        public ForeignKey getFk() {\n+            return _fk;\n+        }\n+\n+        public int hashCode() {\n+            return getFk().getName() != null ? getFk().getName().hashCode() : getFk().hashCode();\n+        }\n+        \n+        public boolean equals(Object fkObj) {\n+            if (fkObj == this) {\n+                return true;\n+            }\n+            if (fkObj == null || !(fkObj instanceof FKMapKey)) {\n+                return false;\n+            }\n+            ForeignKey fk = ((FKMapKey)fkObj).getFk();\n+            if (getFk().getDeleteAction() != fk.getDeleteAction())\n+                return false;\n+            if (getFk().isDeferred() != fk.isDeferred())\n+                return false;\n+            if (!getFk().getName().equals(fk.getName())) {\n+                return false;\n+            }\n+            // Assert PK table name and schema\n+            if (!StringUtils.equals(getFk().getPrimaryKeySchemaName(), fk.getPrimaryKeySchemaName()) ||\n+                !StringUtils.equals(getFk().getPrimaryKeyTableName(), fk.getPrimaryKeyTableName()) ||\n+                !StringUtils.equals(getFk().getSchemaName(), fk.getSchemaName()) ||\n+                !StringUtils.equals(getFk().getTableName(), fk.getTableName())) {\n+                return false;\n+            }\n+            return true;\n+        }\n+    }\n }"},{"sha":"c26fa0ee93ab53961ef92f7f33fd71da43de7c00","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","status":"modified","additions":46,"deletions":4,"changes":50,"blob_url":"https://github.com/apache/openjpa/blob/ac531c58759a605d7865db218ff1625454c591b2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/ac531c58759a605d7865db218ff1625454c591b2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java?ref=ac531c58759a605d7865db218ff1625454c591b2","patch":"@@ -86,6 +86,7 @@\n import org.apache.openjpa.jdbc.schema.Sequence;\n import org.apache.openjpa.jdbc.schema.Table;\n import org.apache.openjpa.jdbc.schema.Unique;\n+import org.apache.openjpa.jdbc.schema.ForeignKey.FKMapKey;\n import org.apache.openjpa.kernel.Filters;\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n import org.apache.openjpa.kernel.Seq;\n@@ -4118,6 +4119,16 @@ protected Index newIndex(ResultSet idxMeta)\n     public ForeignKey[] getImportedKeys(DatabaseMetaData meta, String catalog,\n         String schemaName, String tableName, Connection conn)\n         throws SQLException {\n+        return getImportedKeys(meta, catalog, schemaName, tableName, conn, true);\n+    }\n+\n+    /**\n+     * Reflect on the schema to return full foreign keys imported by the given\n+     * table pattern.\n+     */\n+    public ForeignKey[] getImportedKeys(DatabaseMetaData meta, String catalog,\n+        String schemaName, String tableName, Connection conn, boolean partialKeys)\n+        throws SQLException {\n         if (!supportsForeignKeys)\n             return null;\n         if (tableName == null && !supportsNullTableForGetImportedKeys)\n@@ -4130,18 +4141,49 @@ protected Index newIndex(ResultSet idxMeta)\n                 getSchemaNameForMetadata(schemaName),\n                 getTableNameForMetadata(tableName));\n \n-            List importedKeyList = new ArrayList();\n-            while (keys != null && keys.next())\n-                importedKeyList.add(newForeignKey(keys));\n+            List<ForeignKey> importedKeyList = new ArrayList<ForeignKey>();\n+            Map<FKMapKey, ForeignKey> fkMap = new HashMap<FKMapKey, ForeignKey>();\n+\n+            while (keys != null && keys.next()) {\n+                ForeignKey nfk = newForeignKey(keys);\n+                if (!partialKeys) {\n+                    ForeignKey fk = combineForeignKey(fkMap, nfk);\n+                    // If the key returned != new key, fk col was combined\n+                    // with existing fk.\n+                    if (fk != nfk) {\n+                        continue;\n+                    }\n+                }\n+                importedKeyList.add(nfk);\n+            }\n             return (ForeignKey[]) importedKeyList.toArray\n                 (new ForeignKey[importedKeyList.size()]);\n         } finally {\n-            if (keys != null)\n+            if (keys != null) {\n                 try {\n                     keys.close();\n                 } catch (Exception e) {\n                 }\n+            }\n+        }\n+    }\n+    \n+    /*\n+     * Combines partial foreign keys into singular key\n+     */\n+    protected ForeignKey combineForeignKey(Map<FKMapKey, ForeignKey> fkMap,\n+        ForeignKey fk) {\n+        \n+        FKMapKey fkmk = new FKMapKey(fk);\n+        ForeignKey baseKey = fkMap.get(fkmk);\n+        // Found the FK, add the additional column\n+        if (baseKey != null) {\n+            baseKey.addColumn(fk);\n+            return baseKey;\n         }\n+        // fkey is new\n+        fkMap.put(fkmk, fk);\n+        return fk;\n     }\n \n     /**"},{"sha":"87586d91d08f8901cac4766ba2e537ab6260ee23","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java","status":"modified","additions":17,"deletions":4,"changes":21,"blob_url":"https://github.com/apache/openjpa/blob/ac531c58759a605d7865db218ff1625454c591b2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/ac531c58759a605d7865db218ff1625454c591b2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java?ref=ac531c58759a605d7865db218ff1625454c591b2","patch":"@@ -34,6 +34,7 @@\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Calendar;\n+import java.util.HashMap;\n import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n@@ -49,6 +50,7 @@\n import org.apache.openjpa.jdbc.schema.PrimaryKey;\n import org.apache.openjpa.jdbc.schema.Sequence;\n import org.apache.openjpa.jdbc.schema.Table;\n+import org.apache.openjpa.jdbc.schema.ForeignKey.FKMapKey;\n import org.apache.openjpa.lib.jdbc.DelegatingDatabaseMetaData;\n import org.apache.openjpa.lib.jdbc.DelegatingPreparedStatement;\n import org.apache.openjpa.lib.util.J2DoPrivHelper;\n@@ -756,7 +758,7 @@ else if (\"NCHAR\".equalsIgnoreCase(cols[i].getTypeName()))\n     }\n \n     public ForeignKey[] getImportedKeys(DatabaseMetaData meta, String catalog,\n-        String schemaName, String tableName, Connection conn)\n+        String schemaName, String tableName, Connection conn, boolean partialKeys)\n         throws SQLException {\n         StringBuffer delAction = new StringBuffer(\"DECODE(t1.DELETE_RULE\").\n             append(\", 'NO ACTION', \").append(meta.importedKeyNoAction).\n@@ -805,9 +807,20 @@ else if (\"NCHAR\".equalsIgnoreCase(cols[i].getTypeName()))\n                 setString(stmnt, idx++, tableName.toUpperCase(), null);\n             setTimeouts(stmnt, conf, false);\n             rs = stmnt.executeQuery();\n-            List fkList = new ArrayList();\n-            while (rs != null && rs.next())\n-                fkList.add(newForeignKey(rs));\n+            List<ForeignKey> fkList = new ArrayList<ForeignKey>();            \n+            Map<FKMapKey, ForeignKey> fkMap = new HashMap<FKMapKey, ForeignKey>();\n+\n+            while (rs != null && rs.next()) {\n+                ForeignKey nfk = newForeignKey(rs);\n+                if (!partialKeys) {\n+                    ForeignKey fk = combineForeignKey(fkMap, nfk);\n+                    // Only add the fk to the import list if it is new\n+                    if (fk != nfk) {\n+                        continue;\n+                    }\n+                }\n+                fkList.add(nfk);\n+            }\n             return (ForeignKey[]) fkList.toArray\n                 (new ForeignKey[fkList.size()]);\n         } finally {"},{"sha":"ce81842b24be863b4717bfe37e734432de570f61","filename":"openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/schema/localizer.properties","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/ac531c58759a605d7865db218ff1625454c591b2/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/schema/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/ac531c58759a605d7865db218ff1625454c591b2/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/schema/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/schema/localizer.properties?ref=ac531c58759a605d7865db218ff1625454c591b2","patch":"@@ -154,3 +154,5 @@ conn-failed: Failed to connect to DataSource. Verify Driver \"{0}\", URL \"{1}\" \\\n no-column: Can not find column \"{0}\" in table \"{1}\"\n except-read-fk-name: An exception occurred when obtaining the foreign key \\\n     names from the database.  \n+fk-column-mismatch: Unable to create multi-column foreign key. The key \\\n+    columns do not match primary keys in foreign table."}]}

