{"sha":"ac59115c104bca204e9fd0ac5999d0fc7c9995b2","node_id":"MDY6Q29tbWl0MjA2MzY0OmFjNTkxMTVjMTA0YmNhMjA0ZTlmZDBhYzU5OTlkMGZjN2M5OTk1YjI=","commit":{"author":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-10-31T00:11:09Z"},"committer":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-10-31T00:11:09Z"},"message":"Reorder and comment terminal conditions at the beginning of \nDataCacheStoreManager.flush to make them a little more clear to slow people \nlike me.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@469326 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b0f17f10aed09ead89734f692a98f3393d486371","url":"https://api.github.com/repos/apache/openjpa/git/trees/b0f17f10aed09ead89734f692a98f3393d486371"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ac59115c104bca204e9fd0ac5999d0fc7c9995b2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ac59115c104bca204e9fd0ac5999d0fc7c9995b2","html_url":"https://github.com/apache/openjpa/commit/ac59115c104bca204e9fd0ac5999d0fc7c9995b2","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ac59115c104bca204e9fd0ac5999d0fc7c9995b2/comments","author":null,"committer":null,"parents":[{"sha":"a493e790b7d3a560bcb52872c6aa709dc5b95877","url":"https://api.github.com/repos/apache/openjpa/commits/a493e790b7d3a560bcb52872c6aa709dc5b95877","html_url":"https://github.com/apache/openjpa/commit/a493e790b7d3a560bcb52872c6aa709dc5b95877"}],"stats":{"total":42,"additions":22,"deletions":20},"files":[{"sha":"e6db8a17cadbcf81180172073f88783dd9eb761e","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java","status":"modified","additions":22,"deletions":20,"changes":42,"blob_url":"https://github.com/apache/openjpa/blob/ac59115c104bca204e9fd0ac5999d0fc7c9995b2/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/ac59115c104bca204e9fd0ac5999d0fc7c9995b2/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java?ref=ac59115c104bca204e9fd0ac5999d0fc7c9995b2","patch":"@@ -504,9 +504,9 @@ private static Map addUnloaded(OpenJPAStateManager sm, BitSet fields,\n \n     public Collection flush(Collection states) {\n         Collection exceps = super.flush(states);\n-        if (exceps.isEmpty() && _ctx.isLargeTransaction())\n-            return exceps;\n-        else if (!exceps.isEmpty()) {\n+\n+        // if there were errors evict bad instances and don't record changes\n+        if (!exceps.isEmpty()) {\n             for (Iterator iter = exceps.iterator(); iter.hasNext(); ) {\n                 Exception e = (Exception) iter.next();\n                 if (e instanceof OptimisticException)\n@@ -515,6 +515,10 @@ else if (!exceps.isEmpty()) {\n             return exceps;\n         }\n \n+        // if large transaction mode don't record individual changes\n+        if (_ctx.isLargeTransaction())\n+            return exceps;\n+\n         OpenJPAStateManager sm;\n         for (Iterator itr = states.iterator(); itr.hasNext();) {\n             sm = (OpenJPAStateManager) itr.next();\n@@ -546,28 +550,26 @@ else if (sm.getPCState() == PCState.PDIRTY) {\n \n     /**\n      * Evict from the cache the OID (if available) that resulted in an\n-     * optimistic lock exception iff the\n-     * version information in the cache matches the version\n-     * information in the state manager for the failed\n-     * instance. This means that we will evict data from the\n-     * cache for records that should have successfully\n-     * committed according to the data cache but did not. The\n-     * only predictable reason that could cause this behavior\n-     * is a concurrent out-of-band modification to the\n-     * database that was not communicated to the cache. This\n-     * logic makes OpenJPA's data cache somewhat tolerant of\n-     * such behavior, in that the cache will be cleaned up as\n-     * failures occur.\n+     * optimistic lock exception iff the version information in the cache \n+     * matches the version information in the state manager for the failed\n+     * instance. This means that we will evict data from the cache for records \n+     * that should have successfully committed according to the data cache but \n+     * did not. The only predictable reason that could cause this behavior\n+     * is a concurrent out-of-band modification to the database that was not \n+     * communicated to the cache. This logic makes OpenJPA's data cache \n+     * somewhat tolerant of such behavior, in that the cache will be cleaned \n+     * up as failures occur.\n      */\n     private void evictOptimisticLockFailure(OptimisticException e) {\n         Object o = ((OptimisticException) e).getFailedObject();\n         OpenJPAStateManager sm = _ctx.getStateManager(o);\n-        ClassMetaData meta = sm.getMetaData();\n+        if (sm == null)\n+            return;\n \n         // this logic could be more efficient -- we could aggregate\n-        // all the cache->oid changes, and then use\n-        // DataCache.removeAll() and less write locks to do the\n-        // mutation.\n+        // all the cache->oid changes, and then use DataCache.removeAll() \n+        // and less write locks to do the mutation.\n+        ClassMetaData meta = sm.getMetaData();\n         DataCache cache = meta.getDataCache();\n         cache.writeLock();\n         try {\n@@ -612,7 +614,7 @@ public StoreQuery newQuery(String language) {\n         StoreQuery q = super.newQuery(language);\n \n         // if the query can't be parsed or it's using a non-parsed language\n-        // (one for which there is no OpenJPA ExpressionParser), we can't cache it.\n+        // (one for which there is no ExpressionParser), we can't cache it.\n         if (q == null || QueryLanguages.parserForLanguage(language) == null)\n             return q;\n "}]}

