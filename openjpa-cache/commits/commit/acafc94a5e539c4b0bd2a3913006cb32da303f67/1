{"sha":"acafc94a5e539c4b0bd2a3913006cb32da303f67","node_id":"MDY6Q29tbWl0MjA2MzY0OmFjYWZjOTRhNWU1MzljNGIwYmQyYTM5MTMwMDZjYjMyZGEzMDNmNjc=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-20T21:24:14Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-20T21:24:14Z"},"message":"OPENJPA-1410 Class linkage exception when creating an EMF with OpenJPA M3 caused by ValidationUtils.setupValidation().  First round of cleanup.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@901385 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d46a85a8c51ca3649eaca695a882558b17acbc8f","url":"https://api.github.com/repos/apache/openjpa/git/trees/d46a85a8c51ca3649eaca695a882558b17acbc8f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/acafc94a5e539c4b0bd2a3913006cb32da303f67","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/acafc94a5e539c4b0bd2a3913006cb32da303f67","html_url":"https://github.com/apache/openjpa/commit/acafc94a5e539c4b0bd2a3913006cb32da303f67","comments_url":"https://api.github.com/repos/apache/openjpa/commits/acafc94a5e539c4b0bd2a3913006cb32da303f67/comments","author":null,"committer":null,"parents":[{"sha":"9ea3fe08956adcf351ceaa6ca8fd8f7dfd4989e6","url":"https://api.github.com/repos/apache/openjpa/commits/9ea3fe08956adcf351ceaa6ca8fd8f7dfd4989e6","html_url":"https://github.com/apache/openjpa/commit/9ea3fe08956adcf351ceaa6ca8fd8f7dfd4989e6"}],"stats":{"total":40,"additions":25,"deletions":15},"files":[{"sha":"287c0d3ac3cfc63603dc84e10c61016e74e2054d","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProviderImpl.java","status":"modified","additions":25,"deletions":15,"changes":40,"blob_url":"https://github.com/apache/openjpa/blob/acafc94a5e539c4b0bd2a3913006cb32da303f67/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProviderImpl.java","raw_url":"https://github.com/apache/openjpa/raw/acafc94a5e539c4b0bd2a3913006cb32da303f67/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProviderImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProviderImpl.java?ref=acafc94a5e539c4b0bd2a3913006cb32da303f67","patch":"@@ -93,12 +93,17 @@ public OpenJPAEntityManagerFactory createEntityManagerFactory(String name, Strin\n             _log = conf.getLog(OpenJPAConfiguration.LOG_RUNTIME);            \n             pd.checkPuNameCollisions(_log,name);\n             \n-            loadAgent(_log, conf);\n+            // add enhancer\n+            loadAgent(factory);\n             \n-            // TODO - Can this be moved back to BrokerImpl.initialize()?\n             // Create appropriate LifecycleEventManager\n-            loadValidator(_log, conf);\n+            loadValidator(factory);\n             \n+            // We need to wait to preload until after we get back a fully configured/instantiated\n+            // BrokerFactory. This is because it is possible that someone has extended OpenJPA\n+            // functions and they need to be allowed time to configure themselves before we go off and\n+            // start instanting configurable objects (ie:openjpa.MetaDataRepository). Don't catch\n+            // any exceptions here because we want to fail-fast.\n             preloadMetaDataRepository(factory);\n             \n             return JPAFacadeHelper.toEntityManagerFactory(factory);\n@@ -181,18 +186,17 @@ public OpenJPAEntityManagerFactory createContainerEntityManagerFactory(Persisten\n                     log.warn(_loc.get(\"transformer-registration-error\", pui));\n                 }\n             }\n+\n             // Create appropriate LifecycleEventManager\n-            OpenJPAConfiguration conf = factory.getConfiguration();\n-            conf.setPersistenceUnitRootUrl(pui.getPersistenceUnitRootUrl());\n-            _log = conf.getLog(OpenJPAConfiguration.LOG_RUNTIME);\n-            loadValidator(_log, conf);\n+            loadValidator(factory);\n             \n             // We need to wait to preload until after we get back a fully configured/instantiated\n             // BrokerFactory. This is because it is possible that someone has extended OpenJPA\n             // functions and they need to be allowed time to configure themselves before we go off and\n             // start instanting configurable objects (ie:openjpa.MetaDataRepository). Don't catch\n             // any exceptions here because we want to fail-fast.\n-            preloadMetaDataRepository(factory);           \n+            preloadMetaDataRepository(factory);\n+            \n             return JPAFacadeHelper.toEntityManagerFactory(factory);\n         } catch (Exception e) {\n             throw PersistenceExceptions.toPersistenceException(e);\n@@ -234,7 +238,7 @@ private void preloadMetaDataRepository(BrokerFactory factory){\n         // We need to wait to preload until after we get back a fully configured/instantiated\n         // BrokerFactory. This is because it is possible that someone has extended OpenJPA\n         // functions and they need to be allowed time to configure themselves before we go off and\n-        // start instanting configurable objects (ie:openjpa.MetaDataRepository). Don't catch\n+        // start instantiating configurable objects (ie:openjpa.MetaDataRepository). Don't catch\n         // any exceptions here because we want to fail-fast.\n         OpenJPAConfiguration conf = factory.getConfiguration();\n         Options o = Configurations.parseProperties(Configurations.getProperties(conf.getMetaDataRepository()));\n@@ -285,11 +289,14 @@ public ClassLoader getClassLoader(Class<?> context, ClassLoader env) {\n     /**\n      * This private worker method will attempt load the PCEnhancerAgent.\n      */\n-    private void loadAgent(Log log, OpenJPAConfiguration conf) {\n+    private void loadAgent(BrokerFactory factory) {\n+        OpenJPAConfiguration conf = factory.getConfiguration();\n+        Log log = conf.getLog(OpenJPAConfiguration.LOG_RUNTIME);\n+\n         if (conf.getDynamicEnhancementAgent() == true) {\n             boolean res = PCEnhancerAgent.loadDynamicAgent(log);\n-            if(_log.isInfoEnabled() && res == true ){\n-                _log.info(_loc.get(\"dynamic-agent\"));\n+            if (log.isInfoEnabled() && res == true ){\n+                log.info(_loc.get(\"dynamic-agent\"));\n             }\n         }\n     }\n@@ -302,10 +309,13 @@ private void loadAgent(Log log, OpenJPAConfiguration conf) {\n      * @param conf\n      * @throws if validation setup failed and was required by the config\n      */\n-    private void loadValidator(Log log, OpenJPAConfiguration conf) {\n+    private void loadValidator(BrokerFactory factory) {\n+        OpenJPAConfiguration conf = factory.getConfiguration();\n+        Log log = conf.getLog(OpenJPAConfiguration.LOG_RUNTIME);\n+\n         if ((ValidationUtils.setupValidation(conf) == true) &&\n-                _log.isInfoEnabled()) {\n-            _log.info(_loc.get(\"vlem-creation-info\"));\n+                log.isInfoEnabled()) {\n+            log.info(_loc.get(\"vlem-creation-info\"));\n         }\n     }\n "}]}

