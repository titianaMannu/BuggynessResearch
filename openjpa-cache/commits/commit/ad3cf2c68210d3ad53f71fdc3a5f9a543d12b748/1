{"sha":"ad3cf2c68210d3ad53f71fdc3a5f9a543d12b748","node_id":"MDY6Q29tbWl0MjA2MzY0OmFkM2NmMmM2ODIxMGQzYWQ1M2Y3MWZkYzNhNWY5YTU0M2QxMmI3NDg=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-02-09T21:13:44Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-02-09T21:13:44Z"},"message":"OPENJPA-1503: Use AccessController to load metamodel class.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@908225 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"fc0d6d5e3df02b86ae2bb0ab2067b9d4a7c58307","url":"https://api.github.com/repos/apache/openjpa/git/trees/fc0d6d5e3df02b86ae2bb0ab2067b9d4a7c58307"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ad3cf2c68210d3ad53f71fdc3a5f9a543d12b748","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ad3cf2c68210d3ad53f71fdc3a5f9a543d12b748","html_url":"https://github.com/apache/openjpa/commit/ad3cf2c68210d3ad53f71fdc3a5f9a543d12b748","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ad3cf2c68210d3ad53f71fdc3a5f9a543d12b748/comments","author":null,"committer":null,"parents":[{"sha":"27abdb414926377f28e4aadff948576353ea3bc3","url":"https://api.github.com/repos/apache/openjpa/commits/27abdb414926377f28e4aadff948576353ea3bc3","html_url":"https://github.com/apache/openjpa/commit/27abdb414926377f28e4aadff948576353ea3bc3"}],"stats":{"total":18,"additions":13,"deletions":5},"files":[{"sha":"186b9256c556f0e5023887adbb59cfa443e137b4","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/ad3cf2c68210d3ad53f71fdc3a5f9a543d12b748/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","raw_url":"https://github.com/apache/openjpa/raw/ad3cf2c68210d3ad53f71fdc3a5f9a543d12b748/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java?ref=ad3cf2c68210d3ad53f71fdc3a5f9a543d12b748","patch":"@@ -1837,7 +1837,8 @@ public void setMetaModel(ClassMetaData meta, Class<?> m2) {\n             return _metamodel.get(entity);\n         String m2 = _factory.getMetaModelClassName(entity.getName());\n         try {\n-            Class<?> m2cls = J2DoPrivHelper.getForNameAction(m2, true, entity.getClassLoader()).run();\n+            Class<?> m2cls = AccessController.doPrivileged(\n+                    J2DoPrivHelper.getForNameAction(m2, true, entity.getClassLoader()));\n             _metamodel.put(entity, m2cls);\n             return m2cls;\n         } catch (Throwable t) {"},{"sha":"870cda078fc15ff6819099e0b8fe8b923c6cd45e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xml/TestSimpleXmlEntity.java","status":"modified","additions":11,"deletions":4,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/ad3cf2c68210d3ad53f71fdc3a5f9a543d12b748/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xml/TestSimpleXmlEntity.java","raw_url":"https://github.com/apache/openjpa/raw/ad3cf2c68210d3ad53f71fdc3a5f9a543d12b748/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xml/TestSimpleXmlEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xml/TestSimpleXmlEntity.java?ref=ad3cf2c68210d3ad53f71fdc3a5f9a543d12b748","patch":"@@ -59,8 +59,7 @@ public void testNamedQueryInXmlUsingShortClassName() {\n             fail(\"should not be able to execute query using short class name \" +\n                 \"for entity that has an entity name specified\");\n         } catch (ArgumentException ae) {\n-            assertTrue(\n-                ae.getMessage().indexOf(\"Perhaps you meant SimpleXml,\") != -1);\n+            assertMarkerInErrorMessage(ae, \"The name \\\"SimpleXmlEntity\\\" is not a recognized entity\");\n         }\n     }\n \n@@ -74,8 +73,16 @@ public void testShortClassNameInDynamicQuery() {\n             fail(\"should not be able to execute query using short class name \" +\n                 \"for entity that has an entity name specified\");\n         } catch (ArgumentException ae) {\n-            assertTrue(\n-                ae.getMessage().indexOf(\"Perhaps you meant SimpleXml,\") != -1);\n+            assertMarkerInErrorMessage(ae, \"The name \\\"SimpleXmlEntity\\\" is not a recognized entity\");\n         }\n     }\n+    \n+    /**\n+     * Asserts that the given marker string appears in the error message.\n+     * Not a kosher way to verify -- but ...\n+     */\n+    void assertMarkerInErrorMessage(Exception ex, String marker) {\n+        String message = ex.getMessage();\n+        assertTrue(\"Can not find [\" + marker + \"] in the message [\" + message + \"]\", message.indexOf(marker) != -1);\n+    }\n }"}]}

