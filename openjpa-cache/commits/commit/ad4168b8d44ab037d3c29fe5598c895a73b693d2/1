{"sha":"ad4168b8d44ab037d3c29fe5598c895a73b693d2","node_id":"MDY6Q29tbWl0MjA2MzY0OmFkNDE2OGI4ZDQ0YWIwMzdkM2MyOWZlNTU5OGM4OTVhNzNiNjkzZDI=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-02-26T23:16:13Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-02-26T23:16:13Z"},"message":"OPENJPA-855 Add additional O2M and Element collection tests for annotated and XML mapped entities\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@916855 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"cca0dfdf581f58c0813b2cf179eab858c24b3d79","url":"https://api.github.com/repos/apache/openjpa/git/trees/cca0dfdf581f58c0813b2cf179eab858c24b3d79"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ad4168b8d44ab037d3c29fe5598c895a73b693d2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ad4168b8d44ab037d3c29fe5598c895a73b693d2","html_url":"https://github.com/apache/openjpa/commit/ad4168b8d44ab037d3c29fe5598c895a73b693d2","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ad4168b8d44ab037d3c29fe5598c895a73b693d2/comments","author":null,"committer":null,"parents":[{"sha":"d96883f5029fdca609a5871e1641433a01ec72e3","url":"https://api.github.com/repos/apache/openjpa/commits/d96883f5029fdca609a5871e1641433a01ec72e3","html_url":"https://github.com/apache/openjpa/commit/d96883f5029fdca609a5871e1641433a01ec72e3"}],"stats":{"total":719,"additions":592,"deletions":127},"files":[{"sha":"a5a6750989516a8a53221269cbd435489ba2cab1","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/entities/IOrderedElements.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/apache/openjpa/blob/ad4168b8d44ab037d3c29fe5598c895a73b693d2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/entities/IOrderedElements.java","raw_url":"https://github.com/apache/openjpa/raw/ad4168b8d44ab037d3c29fe5598c895a73b693d2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/entities/IOrderedElements.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/entities/IOrderedElements.java?ref=ad4168b8d44ab037d3c29fe5598c895a73b693d2","patch":"@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.jpql.entities;\n+\n+import java.util.List;\n+\n+\n+public interface IOrderedElements {\n+\n+    public int getId();\n+\n+    public void setId(int id);\n+\n+    public List<String> getListElements();\n+\n+    public void setListElements(List<String> elements);\n+\n+    public void addListElements(String element);\n+    \n+    public String removeListElements(int location);\n+    \n+    public void insertListElements(int location, String name);\n+\n+    public String toString();\n+}"},{"sha":"46e16d45502e0338695b2a93dbf663e2e40947ee","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/entities/IOrderedEntity.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/ad4168b8d44ab037d3c29fe5598c895a73b693d2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/entities/IOrderedEntity.java","raw_url":"https://github.com/apache/openjpa/raw/ad4168b8d44ab037d3c29fe5598c895a73b693d2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/entities/IOrderedEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/entities/IOrderedEntity.java?ref=ad4168b8d44ab037d3c29fe5598c895a73b693d2","patch":"@@ -30,11 +30,11 @@\n \n     public void setEntities(List<INameEntity> entities);\n \n-    public void addEntities(INameEntity entity);\n-    \n-    public INameEntity removeEntities(int location);\n+    public void addEntity(INameEntity newElement);\n+\n+    public INameEntity removeEntity(int location);\n     \n-    public void insertEntities(int location, INameEntity entity);\n+    public void insertEntity(int location, INameEntity entity);\n \n     public String toString();\n }"},{"sha":"cd19a0e7efb31af17b17d3ff9d90b7d4baecbfbc","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/entities/OrderedElementEntity.java","status":"modified","additions":13,"deletions":13,"changes":26,"blob_url":"https://github.com/apache/openjpa/blob/ad4168b8d44ab037d3c29fe5598c895a73b693d2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/entities/OrderedElementEntity.java","raw_url":"https://github.com/apache/openjpa/raw/ad4168b8d44ab037d3c29fe5598c895a73b693d2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/entities/OrderedElementEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/entities/OrderedElementEntity.java?ref=ad4168b8d44ab037d3c29fe5598c895a73b693d2","patch":"@@ -27,14 +27,14 @@\n import javax.persistence.OrderColumn;\n \n @Entity\n-public class OrderedElementEntity implements java.io.Serializable {\n+public class OrderedElementEntity implements IOrderedElements, java.io.Serializable {\n \n     @Id\n     private int id;\n \n     @ElementCollection\n     @OrderColumn\n-    private List<String> listElements;  \n+    private List<String> elements;  \n     \n     public int getId() {\n         return id;\n@@ -45,36 +45,36 @@ public void setId(int id) {\n     }\n \n     public List<String> getListElements() {\n-        return listElements;\n+        return elements;\n     }\n \n     public void setListElements(List<String> elements) {\n-        this.listElements = elements;\n+        this.elements = elements;\n     }\n \n     public void addListElements(String element) {\n-        if( listElements == null) {\n-            listElements = new ArrayList<String>();\n+        if( elements == null) {\n+            elements = new ArrayList<String>();\n         }\n-        listElements.add(element);\n+        elements.add(element);\n     }\n     \n     public String removeListElements(int location) {\n         String rtnVal = null;\n-        if( listElements != null) {\n-            rtnVal = listElements.remove(location);\n+        if( elements != null) {\n+            rtnVal = elements.remove(location);\n         }\n         return rtnVal;\n     }\n     \n     public void insertListElements(int location, String name) {\n-        if( listElements == null) {\n-            listElements = new ArrayList<String>();\n+        if( elements == null) {\n+            elements = new ArrayList<String>();\n         }\n-        listElements.add(location, name);\n+        elements.add(location, name);\n     }\n \n     public String toString() {\n-        return \"OrderedElementEntity[\" + id + \"]=\" + listElements;\n+        return \"OrderedElementEntity[\" + id + \"]=\" + elements;\n     }\n }"},{"sha":"e407bb5a924442035c9a336d61d8584a87fb7800","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/entities/OrderedManyToManyEntity.java","status":"modified","additions":16,"deletions":16,"changes":32,"blob_url":"https://github.com/apache/openjpa/blob/ad4168b8d44ab037d3c29fe5598c895a73b693d2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/entities/OrderedManyToManyEntity.java","raw_url":"https://github.com/apache/openjpa/raw/ad4168b8d44ab037d3c29fe5598c895a73b693d2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/entities/OrderedManyToManyEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/entities/OrderedManyToManyEntity.java?ref=ad4168b8d44ab037d3c29fe5598c895a73b693d2","patch":"@@ -34,7 +34,7 @@\n \n     @ManyToMany\n     @OrderColumn\n-    private List<INameEntity> om2mEntities;\n+    private List<INameEntity> entities;\n \n     \n     public int getId() {\n@@ -46,36 +46,36 @@ public void setId(int id) {\n     }\n \n     public List<INameEntity> getEntities() {\n-        return om2mEntities;\n+        return entities;\n     }\n \n     public void setEntities(List<INameEntity> entities) {\n-        this.om2mEntities = entities;\n+        this.entities = entities;\n     }\n \n-    public void addEntities(INameEntity entity) {\n-        if( om2mEntities == null) {\n-            om2mEntities = new ArrayList<INameEntity>();\n+    public void addEntity(INameEntity entity) {\n+        if( entities == null) {\n+            entities = new ArrayList<INameEntity>();\n         }\n-        om2mEntities.add(entity);\n+        entities.add(entity);\n     }\n-    \n-    public INameEntity removeEntities(int location) {\n+        \n+    public INameEntity removeEntity(int location) {\n         INameEntity rtnVal = null;\n-        if( om2mEntities != null) {\n-            rtnVal = om2mEntities.remove(location);\n+        if( entities != null) {\n+            rtnVal = entities.remove(location);\n         }\n         return rtnVal;\n     }\n     \n-    public void insertEntities(int location, INameEntity entity) {\n-        if( om2mEntities == null) {\n-            om2mEntities = new ArrayList<INameEntity>();\n+    public void insertEntity(int location, INameEntity entity) {\n+        if( entities == null) {\n+            entities = new ArrayList<INameEntity>();\n         }\n-        om2mEntities.add(location, entity);\n+        entities.add(location, entity);\n     }\n \n     public String toString() {\n-        return \"OrderedManyToManyEntity[\" + id + \"]=\" + om2mEntities;\n+        return \"OrderedManyToManyEntity[\" + id + \"]=\" + entities;\n     }\n }"},{"sha":"e020f5ec4039202e31fddf33ab54c4158f3132e6","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/entities/OrderedOneToManyEntity.java","status":"modified","additions":16,"deletions":16,"changes":32,"blob_url":"https://github.com/apache/openjpa/blob/ad4168b8d44ab037d3c29fe5598c895a73b693d2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/entities/OrderedOneToManyEntity.java","raw_url":"https://github.com/apache/openjpa/raw/ad4168b8d44ab037d3c29fe5598c895a73b693d2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/entities/OrderedOneToManyEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/entities/OrderedOneToManyEntity.java?ref=ad4168b8d44ab037d3c29fe5598c895a73b693d2","patch":"@@ -34,7 +34,7 @@\n \n     @OneToMany\n     @OrderColumn\n-    private List<INameEntity> oo2mEntities;\n+    private List<INameEntity> entities;\n \n     \n     public int getId() {\n@@ -46,36 +46,36 @@ public void setId(int id) {\n     }\n \n     public List<INameEntity> getEntities() {\n-        return oo2mEntities;\n+        return entities;\n     }\n \n     public void setEntities(List<INameEntity> names) {\n-        this.oo2mEntities = names;\n+        this.entities = names;\n     }\n \n-    public void addEntities(INameEntity name) {\n-        if( oo2mEntities == null) {\n-            oo2mEntities = new ArrayList<INameEntity>();\n+    public void addEntity(INameEntity name) {\n+        if( entities == null) {\n+            entities = new ArrayList<INameEntity>();\n         }\n-        oo2mEntities.add(name);\n+        entities.add(name);\n     }\n-    \n-    public INameEntity removeEntities(int location) {\n+        \n+    public INameEntity removeEntity(int location) {\n         INameEntity rtnVal = null;\n-        if( oo2mEntities != null) {\n-            rtnVal = oo2mEntities.remove(location);\n+        if( entities != null) {\n+            rtnVal = entities.remove(location);\n         }\n         return rtnVal;\n     }\n     \n-    public void insertEntities(int location, INameEntity name) {\n-        if( oo2mEntities == null) {\n-            oo2mEntities = new ArrayList<INameEntity>();\n+    public void insertEntity(int location, INameEntity name) {\n+        if( entities == null) {\n+            entities = new ArrayList<INameEntity>();\n         }\n-        oo2mEntities.add(location, name);\n+        entities.add(location, name);\n     }\n \n     public String toString() {\n-        return \"OrderedOneToManyEntity[\" + id + \"]=\" + oo2mEntities;\n+        return \"OrderedOneToManyEntity[\" + id + \"]=\" + entities;\n     }\n }"},{"sha":"161ac41209ccd34266f3bf9e2047dbbe9967a7d5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/entities/XMLOrderedElementEntity.java","status":"modified","additions":13,"deletions":13,"changes":26,"blob_url":"https://github.com/apache/openjpa/blob/ad4168b8d44ab037d3c29fe5598c895a73b693d2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/entities/XMLOrderedElementEntity.java","raw_url":"https://github.com/apache/openjpa/raw/ad4168b8d44ab037d3c29fe5598c895a73b693d2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/entities/XMLOrderedElementEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/entities/XMLOrderedElementEntity.java?ref=ad4168b8d44ab037d3c29fe5598c895a73b693d2","patch":"@@ -21,11 +21,11 @@\n import java.util.ArrayList;\n import java.util.List;\n \n-public class XMLOrderedElementEntity implements java.io.Serializable {\n+public class XMLOrderedElementEntity implements IOrderedElements, java.io.Serializable {\n \n     private int id;\n \n-    private List<String> listElements;  \n+    private List<String> elements;  \n     \n     public int getId() {\n         return id;\n@@ -36,36 +36,36 @@ public void setId(int id) {\n     }\n \n     public List<String> getListElements() {\n-        return listElements;\n+        return elements;\n     }\n \n     public void setListElements(List<String> elements) {\n-        this.listElements = elements;\n+        this.elements = elements;\n     }\n \n     public void addListElements(String element) {\n-        if( listElements == null) {\n-            listElements = new ArrayList<String>();\n+        if( elements == null) {\n+            elements = new ArrayList<String>();\n         }\n-        listElements.add(element);\n+        elements.add(element);\n     }\n     \n     public String removeListElements(int location) {\n         String rtnVal = null;\n-        if( listElements != null) {\n-            rtnVal = listElements.remove(location);\n+        if( elements != null) {\n+            rtnVal = elements.remove(location);\n         }\n         return rtnVal;\n     }\n     \n     public void insertListElements(int location, String name) {\n-        if( listElements == null) {\n-            listElements = new ArrayList<String>();\n+        if( elements == null) {\n+            elements = new ArrayList<String>();\n         }\n-        listElements.add(location, name);\n+        elements.add(location, name);\n     }\n \n     public String toString() {\n-        return \"XMLOrderedElementEntity[\" + id + \"]=\" + listElements;\n+        return \"XMLOrderedElementEntity[\" + id + \"]=\" + elements;\n     }\n }"},{"sha":"8fb4941c5c04b97a4addc6abdc9e46a1178f8884","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/entities/XMLOrderedManyToManyEntity.java","status":"modified","additions":15,"deletions":15,"changes":30,"blob_url":"https://github.com/apache/openjpa/blob/ad4168b8d44ab037d3c29fe5598c895a73b693d2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/entities/XMLOrderedManyToManyEntity.java","raw_url":"https://github.com/apache/openjpa/raw/ad4168b8d44ab037d3c29fe5598c895a73b693d2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/entities/XMLOrderedManyToManyEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/entities/XMLOrderedManyToManyEntity.java?ref=ad4168b8d44ab037d3c29fe5598c895a73b693d2","patch":"@@ -25,7 +25,7 @@\n \n     private int id;\n \n-    private List<INameEntity> xom2mEntities;\n+    private List<INameEntity> entities;\n \n     \n     public int getId() {\n@@ -37,36 +37,36 @@ public void setId(int id) {\n     }\n \n     public List<INameEntity> getEntities() {\n-        return xom2mEntities;\n+        return entities;\n     }\n \n     public void setEntities(List<INameEntity> entities) {\n-        this.xom2mEntities = entities;\n+        this.entities = entities;\n     }\n \n-    public void addEntities(INameEntity entity) {\n-        if( xom2mEntities == null) {\n-            xom2mEntities = new ArrayList<INameEntity>();\n+    public void addEntity(INameEntity entity) {\n+        if( entities == null) {\n+            entities = new ArrayList<INameEntity>();\n         }\n-        xom2mEntities.add(entity);\n+        entities.add(entity);\n     }\n     \n-    public INameEntity removeEntities(int location) {\n+    public INameEntity removeEntity(int location) {\n         INameEntity rtnVal = null;\n-        if( xom2mEntities != null) {\n-            rtnVal = xom2mEntities.remove(location);\n+        if( entities != null) {\n+            rtnVal = entities.remove(location);\n         }\n         return rtnVal;\n     }\n     \n-    public void insertEntities(int location, INameEntity entity) {\n-        if( xom2mEntities == null) {\n-            xom2mEntities = new ArrayList<INameEntity>();\n+    public void insertEntity(int location, INameEntity entity) {\n+        if( entities == null) {\n+            entities = new ArrayList<INameEntity>();\n         }\n-        xom2mEntities.add(location, entity);\n+        entities.add(location, entity);\n     }\n \n     public String toString() {\n-        return \"XMLOrderedManyToManyEntity[\" + id + \"]=\" + xom2mEntities;\n+        return \"XMLOrderedManyToManyEntity[\" + id + \"]=\" + entities;\n     }\n }"},{"sha":"634eb2a65a2705c335a2bcf0cfd88a04bf62e795","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/entities/XMLOrderedOneToManyEntity.java","status":"modified","additions":15,"deletions":15,"changes":30,"blob_url":"https://github.com/apache/openjpa/blob/ad4168b8d44ab037d3c29fe5598c895a73b693d2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/entities/XMLOrderedOneToManyEntity.java","raw_url":"https://github.com/apache/openjpa/raw/ad4168b8d44ab037d3c29fe5598c895a73b693d2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/entities/XMLOrderedOneToManyEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/entities/XMLOrderedOneToManyEntity.java?ref=ad4168b8d44ab037d3c29fe5598c895a73b693d2","patch":"@@ -25,7 +25,7 @@\n \n     private int id;\n \n-    private List<INameEntity> xoo2mEntities;\n+    private List<INameEntity> entities;\n \n     \n     public int getId() {\n@@ -37,36 +37,36 @@ public void setId(int id) {\n     }\n \n     public List<INameEntity> getEntities() {\n-        return xoo2mEntities;\n+        return entities;\n     }\n \n     public void setEntities(List<INameEntity> entities) {\n-        this.xoo2mEntities = entities;\n+        this.entities = entities;\n     }\n \n-    public void addEntities(INameEntity entity) {\n-        if( xoo2mEntities == null) {\n-            xoo2mEntities = new ArrayList<INameEntity>();\n+    public void addEntity(INameEntity entity) {\n+        if( entities == null) {\n+            entities = new ArrayList<INameEntity>();\n         }\n-        xoo2mEntities.add(entity);\n+        entities.add(entity);\n     }\n     \n-    public INameEntity removeEntities(int location) {\n+    public INameEntity removeEntity(int location) {\n         INameEntity rtnVal = null;\n-        if( xoo2mEntities != null) {\n-            rtnVal = xoo2mEntities.remove(location);\n+        if( entities != null) {\n+            rtnVal = entities.remove(location);\n         }\n         return rtnVal;\n     }\n     \n-    public void insertEntities(int location, INameEntity entity) {\n-        if( xoo2mEntities == null) {\n-            xoo2mEntities = new ArrayList<INameEntity>();\n+    public void insertEntity(int location, INameEntity entity) {\n+        if( entities == null) {\n+            entities = new ArrayList<INameEntity>();\n         }\n-        xoo2mEntities.add(location, entity);\n+        entities.add(location, entity);\n     }\n \n     public String toString() {\n-        return \"XMLOrderedOneToManyEntity[\" + id + \"]=\" + xoo2mEntities;\n+        return \"XMLOrderedOneToManyEntity[\" + id + \"]=\" + entities;\n     }\n }"},{"sha":"d092b831324ae9ffde7e72df59ac69dc3f3ca30a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestIndex.java","status":"modified","additions":352,"deletions":20,"changes":372,"blob_url":"https://github.com/apache/openjpa/blob/ad4168b8d44ab037d3c29fe5598c895a73b693d2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestIndex.java","raw_url":"https://github.com/apache/openjpa/raw/ad4168b8d44ab037d3c29fe5598c895a73b693d2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestIndex.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestIndex.java?ref=ad4168b8d44ab037d3c29fe5598c895a73b693d2","patch":"@@ -18,25 +18,99 @@\n  */\n package org.apache.openjpa.persistence.jpql.expressions;\n \n+import java.lang.reflect.Constructor;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.List;\n \n import javax.persistence.EntityManager;\n+import javax.persistence.Query;\n \n+import org.apache.openjpa.lib.log.Log;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\n+import org.apache.openjpa.persistence.jpql.entities.INameEntity;\n+import org.apache.openjpa.persistence.jpql.entities.IOrderedElements;\n+import org.apache.openjpa.persistence.jpql.entities.IOrderedEntity;\n+import org.apache.openjpa.persistence.jpql.entities.OrderedElementEntity;\n+import org.apache.openjpa.persistence.jpql.entities.OrderedManyToManyEntity;\n+import org.apache.openjpa.persistence.jpql.entities.OrderedOneToManyEntity;\n+import org.apache.openjpa.persistence.jpql.entities.UnorderedNameEntity;\n+import org.apache.openjpa.persistence.jpql.entities.XMLOrderedElementEntity;\n+import org.apache.openjpa.persistence.jpql.entities.XMLOrderedManyToManyEntity;\n+import org.apache.openjpa.persistence.jpql.entities.XMLOrderedOneToManyEntity;\n+import org.apache.openjpa.persistence.jpql.entities.XMLUnorderedNameEntity;\n import org.apache.openjpa.persistence.proxy.TreeNode;\n+import org.apache.openjpa.persistence.test.JPAEntityClassEnum;\n import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n \n /**\n- * Tests index function\n+ * Test JPQL Index function on O2M, M2M and Element collections using annotations and XML.\n  *  \n- * @author Catalina Wei\n+ * @author Catalina Wei, Albert Lee, Donald Woods\n  */\n public class TestIndex extends SingleEMFTestCase {\n+    \n+    private OpenJPAEntityManagerFactorySPI emf2 = null;\n+    private Log log = null;\n+    \n+    private enum JPQLIndexEntityClasses implements JPAEntityClassEnum {\n+        OrderedElementEntity(OrderedElementEntity.class),\n+        OrderedOneToManyEntity(OrderedOneToManyEntity.class),\n+        OrderedManyToManyEntity(OrderedManyToManyEntity.class),\n+        XMLOrderedElementEntity(XMLOrderedElementEntity.class),\n+        XMLOrderedOneToManyEntity(XMLOrderedOneToManyEntity.class),\n+        XMLOrderedManyToManyEntity(XMLOrderedManyToManyEntity.class),\n+        UnorderedNameEntity(UnorderedNameEntity.class),\n+        XMLUnorderedNameEntity(XMLUnorderedNameEntity.class);\n+\n+        private Class<?> clazz;\n+        private String fullEntityName;\n+        private String entityName;\n+\n+        JPQLIndexEntityClasses(Class<?> clazz) {\n+            this.clazz = clazz;\n+            fullEntityName = clazz.getName();\n+            entityName = fullEntityName.substring(getEntityClassName()\n+                .lastIndexOf('.') + 1);\n+        }\n+\n+        public Class<?> getEntityClass() {\n+            return clazz;\n+        }\n+\n+        public String getEntityClassName() {\n+            return fullEntityName;\n+        }\n+\n+        public String getEntityName() {\n+            return entityName;\n+        }\n+    }\n+\n+    private static final String[] Element_Names = { \"A_Element\", \"B_Element\",\n+        \"C_Element\", \"D_Element\", \"E_Element\", \"F_Element\", };\n+\n+    @Override\n     public void setUp() {\n-        super.setUp(CLEAR_TABLES, TreeNode.class);\n+        super.setUp(CLEAR_TABLES, TreeNode.class, \n+            OrderedElementEntity.class, UnorderedNameEntity.class,\n+            OrderedOneToManyEntity.class, OrderedManyToManyEntity.class);\n+            // XMLOrderedOneToManyEntity.class, XMLOrderedManyToManyEntity.class,\n+            // XMLOrderedElementEntity.class, XMLUnorderedNameEntity.class);\n+\n+        // create our EMF\n+        emf2 = (OpenJPAEntityManagerFactorySPI) OpenJPAPersistence.createEntityManagerFactory(\n+                \"JPQLIndex\",\n+                \"org/apache/openjpa/persistence/jpql/expressions/persistence.xml\");\n+        assertNotNull(emf2);\n+\n+        log =  emf2.getConfiguration().getLog(\"test\");\n     }\n-    \n-    public void testQueryIndex() {\n-        persistTree();\n+        \n+    public void testO2MTreeQueryIndex() {\n+        int[] fanOuts = {2,3,4};\n+        createTreeNodeEntities(fanOuts);\n         EntityManager em = emf.createEntityManager();\n         String query = \"SELECT index(c) from TreeNode t, in (t.childern) c\" +\n             \" WHERE index(c) = 2\"; \n@@ -48,28 +122,45 @@ public void testQueryIndex() {\n         em.close();                \n     }\n \n-    public void createTree() {\n-        TreeNode root = new TreeNode();\n-        root.setName(\"0\");\n-        int[] fanOuts = {1,2,3};\n-        root.createTree(fanOuts);\n-        assertArrayEquals(fanOuts, root.getFanOuts());\n+    public void testO2MQueryIndex() {\n+        createEntities(JPQLIndexEntityClasses.OrderedOneToManyEntity, UnorderedNameEntity.class);\n+        verifyEntities(JPQLIndexEntityClasses.OrderedOneToManyEntity, UnorderedNameEntity.class);\n     }\n \n-    public void persistTree() {\n-        int[] fanOuts = {2,3,4};\n-        create(fanOuts);\n+    public void testO2MXMLQueryIndex() {\n+        createEntities(JPQLIndexEntityClasses.XMLOrderedOneToManyEntity, XMLUnorderedNameEntity.class);\n+        verifyEntities(JPQLIndexEntityClasses.XMLOrderedOneToManyEntity, XMLUnorderedNameEntity.class);\n+    }\n+\n+    /* TODO\n+    public void testM2MQueryIndex() {\n+    }\n+    */\n+\n+    /* TODO\n+    public void testM2MXMLQueryIndex() {\n+    }\n+    */\n+\n+    public void testElementQueryIndex() {\n+        createEntities(JPQLIndexEntityClasses.OrderedElementEntity, String.class);\n+        verifyEntities(JPQLIndexEntityClasses.OrderedElementEntity, String.class);\n+    }\n+\n+    public void testElementXMLQueryIndex() {\n+        createEntities(JPQLIndexEntityClasses.XMLOrderedElementEntity, String.class);\n+        verifyEntities(JPQLIndexEntityClasses.XMLOrderedElementEntity, String.class);\n     }\n \n     /**\n-     * Create a uniform tree with given fan out.\n-     * Persist.\n+     * Create and persist a uniform OneToMany tree with given fan out.\n      */\n-    TreeNode create(int[] original) {\n+    private TreeNode createTreeNodeEntities(int[] original) {\n         TreeNode root = new TreeNode();\n         root.createTree(original);\n+        assertArrayEquals(original, root.getFanOuts());\n         \n-        EntityManager em = emf.createEntityManager();\n+        EntityManager em = emf2.createEntityManager();\n         em.getTransaction().begin();\n         em.persist(root);\n         em.getTransaction().commit();\n@@ -81,9 +172,250 @@ TreeNode create(int[] original) {\n     /**\n      *  Asserts the given arrays have exactly same elements at the same index.\n      */\n-    void assertArrayEquals(int[] a, int[] b) {\n+    private void assertArrayEquals(int[] a, int[] b) {\n         assertEquals(a.length, b.length);\n         for (int i = 0; i<a.length; i++)\n             assertEquals(a[i], b[i]);\n     }\n+    \n+    private <C,E> void createEntities(JPQLIndexEntityClasses entityType, Class<E> elementClass)\n+    {\n+        if (IOrderedEntity.class.isAssignableFrom(entityType.getEntityClass())) {\n+            if (INameEntity.class.isAssignableFrom(elementClass)) {\n+                log.trace(\"** Test INameEntity modifications on IOrderedEntity.\");\n+                createOrderedEntities(entityType, (Class<INameEntity>)elementClass);\n+            } else {\n+                fail(\"createEntities(IOrderedEntity) - Unexpected elementClass=\" + elementClass.getSimpleName());\n+            }\n+        } else if (IOrderedElements.class.isAssignableFrom(entityType.getEntityClass())) {\n+            if (String.class.isAssignableFrom(elementClass)) {\n+                log.trace(\"** Test String modifications on IOrderedElements.\");\n+                createOrderedElements(entityType);\n+            } else {\n+                fail(\"createEntities(IOrderedElements) - Unexpected elementClass=\" + elementClass.getSimpleName());\n+            }\n+        } else {\n+            fail(\"createEntities() - Unexpected entityType=\" + entityType.getEntityName());            \n+        }\n+    }\n+        \n+    private void createOrderedEntities(JPQLIndexEntityClasses entityType, Class<INameEntity> elementClass)\n+    {\n+        EntityManager em = null;\n+        \n+        try {\n+            Class<IOrderedEntity> entityClass =\n+                (Class<IOrderedEntity>)Class.forName(entityType.getEntityClassName());\n+            String entityClassName = entityType.getEntityName();\n+            String elementClassName = elementClass.getName().substring(\n+                elementClass.getName().lastIndexOf('.') + 1);\n+            Integer entityId = 1;\n+            \n+            IOrderedEntity newEntity = (IOrderedEntity)constructNewEntityObject(entityType);\n+            newEntity.setId(entityId);\n+            // create the entity elements to add\n+            Constructor<INameEntity> elementConstrctor = elementClass.getConstructor(String.class);\n+            List<INameEntity> newElements = new ArrayList<INameEntity>();\n+            for (int i=0; i<Element_Names.length; i++) {\n+                newElements.add(elementConstrctor.newInstance(Element_Names[i]));\n+            }\n+            \n+            // add the entities\n+            log.trace(\"Adding \" + newElements.size() + \" of \" + elementClassName + \" to \" + entityClassName);\n+            em = emf2.createEntityManager();\n+            em.getTransaction().begin();\n+            for (INameEntity newElement : newElements)\n+            {\n+                /* For Many to Many cases\n+                    jpaRW.getEm().persist(newElementB);\n+                    if (elementClass == OrderedNameEntity.class || elementClass == XMLOrderedNameEntity.class) {\n+                        if( listFieldName.charAt(1) == 'o') {\n+                            setColumnMethod.invoke(new2Boy, newEntity);\n+                        } else {\n+                            addColumnsMethod.invoke(new2Boy, newEntity);\n+                        }\n+                    }\n+                */\n+                em.persist(newElement);\n+                newEntity.addEntity((INameEntity)newElement);\n+            }\n+            em.persist(newEntity);\n+            em.getTransaction().commit();\n+            em.clear();\n+\n+            // verify the entities were stored\n+            log.trace(\"Verifing the entity was stored\");\n+            IOrderedEntity findEntity = em.find(entityClass, entityId);\n+            assertNotNull(\"Found entity just created\", findEntity);\n+            assertEquals(\"Verify entity id = \" + entityId, entityId.intValue(), findEntity.getId());\n+            assertEquals(\"Verify entity name = \" + entityClass.getName(), entityClass.getName(),\n+                findEntity.getClass().getName());\n+\n+        } catch (Throwable t) {\n+            log.error(t);\n+            throw new RuntimeException(t);\n+        } finally {\n+            if (em != null) {\n+                if (em.getTransaction().isActive()) {\n+                    em.getTransaction().rollback();\n+                }\n+                em.close();\n+                em = null;\n+            }\n+        }\n+    }\n+    \n+    private void createOrderedElements(JPQLIndexEntityClasses entityType)\n+    {\n+        EntityManager em = null;\n+        \n+        try {\n+            Class<IOrderedElements> entityClass =\n+                (Class<IOrderedElements>)Class.forName(entityType.getEntityClassName());\n+            String entityClassName = entityType.getEntityName();\n+            Integer entityId = 1;\n+            \n+            IOrderedElements newEntity = (IOrderedElements)constructNewEntityObject(entityType);\n+            newEntity.setId(entityId);\n+            List<String> namesList = new ArrayList<String>();\n+            for (int i=0; i<Element_Names.length; i++) {\n+                namesList.add(Element_Names[i]);\n+            }\n+            newEntity.setListElements(namesList);\n+            // add the entity\n+            em = emf2.createEntityManager();\n+            em.getTransaction().begin();\n+            em.persist(newEntity);\n+            em.getTransaction().commit();\n+            em.clear();\n+\n+            // verify the entity was stored\n+            log.trace(\"Verifing the entity was stored\");\n+            IOrderedElements findEntity = em.find(entityClass, entityId);\n+            assertNotNull(\"Found entity just created\", findEntity);\n+            assertEquals(\"Verify entity id = \" + entityId, entityId.intValue(), findEntity.getId());\n+            assertEquals(\"Verify entity name = \" + entityClass.getName(), entityClass.getName(),\n+                findEntity.getClass().getName());\n+\n+        } catch (Throwable t) {\n+            log.error(t);\n+            throw new RuntimeException(t);\n+        } finally {\n+            if (em != null) {\n+                if (em.getTransaction().isActive()) {\n+                    em.getTransaction().rollback();\n+                }\n+                em.close();\n+                em = null;\n+            }\n+        }\n+    }\n+    \n+    private <C,E> void verifyEntities(JPQLIndexEntityClasses entityType, Class<E> elementClass)\n+    {\n+        if (IOrderedEntity.class.isAssignableFrom(entityType.getEntityClass())) {\n+            if (INameEntity.class.isAssignableFrom(elementClass)) {\n+                log.trace(\"** Verify INameEntity modifications on IOrderedEntity.\");\n+                verifyOrderedEntities(entityType, (Class<INameEntity>)elementClass);\n+            } else {\n+                fail(\"verifyEntities(IOrderedEntity) - Unexpected elementClass=\" + elementClass.getSimpleName());\n+            }\n+        } else if (IOrderedElements.class.isAssignableFrom(entityType.getEntityClass())) {\n+            if (String.class.isAssignableFrom(elementClass)) {\n+                log.trace(\"** Test String modifications on IOrderedElements.\");\n+                verifyOrderedElements(entityType);\n+            } else {\n+                fail(\"verifyEntities(IOrderedElements) - Unexpected elementClass=\" + elementClass.getSimpleName());\n+            }\n+        } else {\n+            fail(\"verifyEntities() - Unexpected entityType=\" + entityType.getEntityName());            \n+        }\n+    }\n+    \n+    private <E> void verifyOrderedEntities(JPQLIndexEntityClasses entityType, Class<INameEntity> elementClass)\n+    {\n+        try {\n+            Class<IOrderedEntity> entityClass = (Class<IOrderedEntity>)Class.forName(entityType.getEntityClassName());\n+            String entityClassName = entityType.getEntityName();\n+            entityClassName = entityClassName.substring(entityClassName.lastIndexOf('.') + 1);\n+\n+            if (log.isTraceEnabled()) {\n+                log.trace(\"Query \" + entityClassName + \" and verify 'entities' collection has \"\n+                    + Element_Names.length + \" elements in this order: \"\n+                    + Arrays.toString(Element_Names));\n+            }\n+            \n+            EntityManager em = emf2.createEntityManager();\n+            em.clear();\n+            int idx = 0;\n+            for (String expectedEntityName : Element_Names) {\n+                Query q = em.createQuery(\"select w from \" + entityClassName\n+                    + \" o join o.entities w where index(w) = \" + idx);\n+                List<E> res = (List<E>)q.getResultList();\n+                assertEquals(\"  Verify query returns 1 element for index \" + idx, 1, res.size());\n+                if (res.size() == 1) {\n+                    Object oo = res.get(0);\n+                    assertEquals(\"  Verify element type is \" + elementClass.getName(), elementClass.getName(),\n+                        oo.getClass().getName());\n+                    String name;\n+                    try {\n+                        name = (String) elementClass.getMethod(\"getName\").invoke(oo);\n+                        assertEquals(\"  Verify element value is '\"\n+                            + expectedEntityName + \"'\", expectedEntityName, name);\n+                    } catch (Exception e) {\n+                        log.error(\"  Caught unexpected exception:\" + e.getMessage());\n+                        throw new RuntimeException(e);\n+                    }\n+                }\n+                ++idx;\n+            }\n+        } catch (Exception e) {\n+            log.error(e);\n+            throw new RuntimeException(e);\n+        }\n+    }\n+    \n+    private <E> void verifyOrderedElements(JPQLIndexEntityClasses entityType)\n+    {\n+        try {\n+            Class<IOrderedEntity> entityClass = (Class<IOrderedEntity>)Class.forName(entityType.getEntityClassName());\n+            String entityClassName = entityType.getEntityName();\n+            entityClassName = entityClassName.substring(entityClassName.lastIndexOf('.') + 1);\n+\n+            if (log.isTraceEnabled()) {\n+                log.trace(\"Query \" + entityClassName + \" and verify 'elements' collection has \"\n+                    + Element_Names.length + \" elements in this order: \"\n+                    + Arrays.toString(Element_Names));\n+            }\n+            \n+            EntityManager em = emf2.createEntityManager();\n+            em.clear();\n+            int idx = 0;\n+            for (String expectedEntityName : Element_Names) {\n+                Query q = em.createQuery(\"select w from \" + entityClassName\n+                    + \" o join o.elements w where index(w) = \" + idx);\n+                List<E> res = (List<E>)q.getResultList();\n+                assertEquals(\"  Verify query returns 1 element for index \" + idx, 1, res.size());\n+                if (res.size() == 1) {\n+                    Object oo = res.get(0);\n+                    assertEquals(\"  Verify element type is String\", String.class.getName(),\n+                        oo.getClass().getName());\n+                    String name;\n+                    try {\n+                        name = (String) oo.toString();\n+                        assertEquals(\"  Verify element value is '\"\n+                            + expectedEntityName + \"'\", expectedEntityName, name);\n+                    } catch (Exception e) {\n+                        log.error(\"  Caught unexpected exception:\" + e.getMessage());\n+                        throw new RuntimeException(e);\n+                    }\n+                }\n+                ++idx;\n+            }\n+        } catch (Exception e) {\n+            log.error(e);\n+            throw new RuntimeException(e);\n+        }\n+    }\n+    \n }"},{"sha":"dda04a4eed7a0880f279bfa3cf08a4f0da1aaaa2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/AbstractPersistenceTestCase.java","status":"modified","additions":47,"deletions":0,"changes":47,"blob_url":"https://github.com/apache/openjpa/blob/ad4168b8d44ab037d3c29fe5598c895a73b693d2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/AbstractPersistenceTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/ad4168b8d44ab037d3c29fe5598c895a73b693d2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/AbstractPersistenceTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/AbstractPersistenceTestCase.java?ref=ad4168b8d44ab037d3c29fe5598c895a73b693d2","patch":"@@ -23,6 +23,8 @@\n import java.io.IOException;\n import java.io.ObjectInputStream;\n import java.io.ObjectOutputStream;\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n import java.lang.reflect.Modifier;\n import java.sql.SQLException;\n@@ -615,4 +617,49 @@ protected boolean isTestsDisabled() {\n         }\n     }\n \n+    protected Class<?> resolveEntityClass(JPAEntityClassEnum enumerationRef)\n+        throws ClassNotFoundException\n+    {\n+        if (enumerationRef == null)\n+        {\n+            throw new IllegalArgumentException(\"Null value passed into the constructNewEntityObject method.\");\n+        }\n+        String className = enumerationRef.getEntityClassName();\n+        if (className == null)\n+        {\n+            throw new IllegalArgumentException(\"Enumeration toString() method implementation returned a null value.\");\n+        }\n+\n+        return Class.forName(className);\n+    }\n+\n+    protected Object constructNewEntityObject(JPAEntityClassEnum enumerationRef)\n+        throws ClassNotFoundException, SecurityException, NoSuchMethodException,\n+        IllegalArgumentException, InstantiationException,\n+        IllegalAccessException, InvocationTargetException\n+    {\n+        Class<?> classType = resolveEntityClass(enumerationRef);\n+        Class<?> constructorArgSig[] = new Class[] {};\n+        Object constructorArgs[] = new Object[] {};\n+\n+        Constructor<?> classConstructor = classType.getConstructor(constructorArgSig);\n+        Object newEntity = classConstructor.newInstance(constructorArgs);\n+\n+        return newEntity;\n+    }\n+\n+    protected Object constructNewEntityObject(Class<?> entityClass)\n+        throws SecurityException, NoSuchMethodException,\n+        IllegalArgumentException, InstantiationException,\n+        IllegalAccessException, InvocationTargetException\n+    {\n+        Class<?> constructorArgSig[] = new Class[] {};\n+        Object constructorArgs[] = new Object[] {};\n+\n+        Constructor<?> classConstructor = entityClass.getConstructor(constructorArgSig);\n+        Object newEntity = classConstructor.newInstance(constructorArgs);\n+\n+        return newEntity;\n+    }\n+\n }"},{"sha":"62c843dbbc6fd0adf3bcb00d0e70a74267ea5c9a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/JPAEntityClassEnum.java","status":"added","additions":25,"deletions":0,"changes":25,"blob_url":"https://github.com/apache/openjpa/blob/ad4168b8d44ab037d3c29fe5598c895a73b693d2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/JPAEntityClassEnum.java","raw_url":"https://github.com/apache/openjpa/raw/ad4168b8d44ab037d3c29fe5598c895a73b693d2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/JPAEntityClassEnum.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/JPAEntityClassEnum.java?ref=ad4168b8d44ab037d3c29fe5598c895a73b693d2","patch":"@@ -0,0 +1,25 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.test;\n+\n+public interface JPAEntityClassEnum {\n+    public String getEntityClassName();\n+    public String getEntityName();\n+}\n+"},{"sha":"a4f25d669626aeafc23d68fa7c0dcec3728a255e","filename":"openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","status":"modified","additions":28,"deletions":9,"changes":37,"blob_url":"https://github.com/apache/openjpa/blob/ad4168b8d44ab037d3c29fe5598c895a73b693d2/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/ad4168b8d44ab037d3c29fe5598c895a73b693d2/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml?ref=ad4168b8d44ab037d3c29fe5598c895a73b693d2","patch":"@@ -47,6 +47,7 @@\n         <mapping-file>org/apache/openjpa/persistence/jdbc/order/order-orm.xml</mapping-file>\n         <mapping-file>org/apache/openjpa/persistence/jdbc/order/order-orm-2.xml</mapping-file>\n         <mapping-file>org/apache/openjpa/persistence/jdbc/order/order-orm-3.xml</mapping-file>\n+        <mapping-file>org/apache/openjpa/persistence/jpql/expressions/orm.xml</mapping-file>\n         <mapping-file>org/apache/openjpa/persistence/inheritance/orm.xml</mapping-file>\n         <mapping-file>org/apache/openjpa/persistence/orm.xml</mapping-file>\n         <mapping-file>org/apache/openjpa/persistence/embed/embed-assoc-over-orm.xml</mapping-file>\n@@ -284,37 +285,55 @@\n             <property name=\"openjpa.jdbc.SynchronizeMappings\"\n                   value=\"buildSchema\"/>\n         </properties>\n-\t</persistence-unit>\n+    </persistence-unit>\n \t\n-\t<persistence-unit name=\"delimited-identifiers-seq-gen-xml\">\n+    <persistence-unit name=\"delimited-identifiers-seq-gen-xml\">\n     \t<mapping-file>META-INF/delimited-identifiers-seq-gen-xml-orm.xml</mapping-file>\n     \t<properties>\n             <property name=\"openjpa.jdbc.SynchronizeMappings\"\n                   value=\"buildSchema\"/>\n         </properties>\n-\t</persistence-unit>\n+    </persistence-unit>\n \t\n-\t<persistence-unit name=\"delimited-identifiers-inheritance-xml\">\n+    <persistence-unit name=\"delimited-identifiers-inheritance-xml\">\n     \t<mapping-file>META-INF/delimited-identifiers-inheritance-xml-orm.xml</mapping-file>\n     \t<properties>\n             <property name=\"openjpa.jdbc.SynchronizeMappings\"\n                   value=\"buildSchema\"/>\n         </properties>\n-\t</persistence-unit>\n+    </persistence-unit>\n \t\n-\t<persistence-unit name=\"delimited-identifiers-joins-xml\">\n+    <persistence-unit name=\"delimited-identifiers-joins-xml\">\n     \t<mapping-file>META-INF/delimited-identifiers-joins-orm.xml</mapping-file>\n     \t<properties>\n             <property name=\"openjpa.jdbc.SynchronizeMappings\"\n                   value=\"buildSchema\"/>\n         </properties>\n-\t</persistence-unit>\n+    </persistence-unit>\n \t\n-\t<persistence-unit name=\"delimited-identifiers-result-set-xml\">\n+    <persistence-unit name=\"delimited-identifiers-result-set-xml\">\n     \t<mapping-file>META-INF/delimited-identifiers-result-set-orm.xml</mapping-file>\n     \t<properties>\n             <property name=\"openjpa.jdbc.SynchronizeMappings\"\n                   value=\"buildSchema\"/>\n         </properties>\n-\t</persistence-unit>\n+    </persistence-unit>\n+\n+    <persistence-unit name=\"JPQLIndex\">\n+        <mapping-file>org/apache/openjpa/persistence/jpql/expressions/orm.xml</mapping-file>\n+\n+        <class>org.apache.openjpa.persistence.jpql.entities.OrderedElementEntity</class>\n+        <class>org.apache.openjpa.persistence.jpql.entities.XMLOrderedElementEntity</class>\n+        <class>org.apache.openjpa.persistence.jpql.entities.OrderedManyToManyEntity</class>\n+        <class>org.apache.openjpa.persistence.jpql.entities.XMLOrderedManyToManyEntity</class>\n+        <class>org.apache.openjpa.persistence.jpql.entities.OrderedOneToManyEntity</class>\n+        <class>org.apache.openjpa.persistence.jpql.entities.XMLOrderedOneToManyEntity</class>\n+        <class>org.apache.openjpa.persistence.jpql.entities.UnorderedNameEntity</class>\n+        <class>org.apache.openjpa.persistence.jpql.entities.XMLUnorderedNameEntity</class>\n+        <properties>\n+            <property name=\"openjpa.jdbc.SynchronizeMappings\"\n+                value=\"buildSchema\" />\n+        </properties>\n+    </persistence-unit>\n+\n </persistence>"},{"sha":"9fb5195118ec07881078451e1139129751efc4de","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/jpql/expressions/orm.xml","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/ad4168b8d44ab037d3c29fe5598c895a73b693d2/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/jpql/expressions/orm.xml","raw_url":"https://github.com/apache/openjpa/raw/ad4168b8d44ab037d3c29fe5598c895a73b693d2/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/jpql/expressions/orm.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/jpql/expressions/orm.xml?ref=ad4168b8d44ab037d3c29fe5598c895a73b693d2","patch":"@@ -23,7 +23,7 @@\n     <entity class=\"org.apache.openjpa.persistence.jpql.entities.XMLOrderedManyToManyEntity\">\n         <attributes>\n             <id name=\"id\" />\n-            <many-to-many name=\"xom2mEntities\">\n+            <many-to-many name=\"entities\">\n                 <order-column/>\n             </many-to-many>\n         </attributes>\n@@ -32,7 +32,7 @@\n     <entity class=\"org.apache.openjpa.persistence.jpql.entities.XMLOrderedOneToManyEntity\">\n         <attributes>\n             <id name=\"id\" />\n-            <one-to-many name=\"xoo2mEntities\">\n+            <one-to-many name=\"entities\">\n                 <order-column/>\n             </one-to-many>\n         </attributes>\n@@ -41,7 +41,7 @@\n     <entity class=\"org.apache.openjpa.persistence.jpql.entities.XMLOrderedElementEntity\">\n         <attributes>\n             <id name=\"id\" />\n-            <element-collection name=\"listElements\">\n+            <element-collection name=\"elements\">\n                 <order-column />\n             </element-collection>\n         </attributes>"},{"sha":"54359f73830245951d96374081bf39a36585f3af","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/jpql/expressions/persistence.xml","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/ad4168b8d44ab037d3c29fe5598c895a73b693d2/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/jpql/expressions/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/ad4168b8d44ab037d3c29fe5598c895a73b693d2/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/jpql/expressions/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/jpql/expressions/persistence.xml?ref=ad4168b8d44ab037d3c29fe5598c895a73b693d2","patch":"@@ -23,11 +23,12 @@\n \txsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd\"\n \tversion=\"2.0\">\n \n-    <persistence-unit name=\"JPQLIndex\" transaction-type=\"RESOURCE_LOCAL\">\n+    <persistence-unit name=\"JPQLIndex\">\n         <description>PU for JPQL Index testing</description>\n         <provider>org.apache.openjpa.persistence.PersistenceProviderImpl</provider>\n         <mapping-file>org/apache/openjpa/persistence/jpql/expressions/orm.xml</mapping-file>\n \n+        <class>org.apache.openjpa.persistence.proxy.TreeNode</class>\n         <class>org.apache.openjpa.persistence.jpql.entities.OrderedElementEntity</class>\n         <class>org.apache.openjpa.persistence.jpql.entities.XMLOrderedElementEntity</class>\n         <class>org.apache.openjpa.persistence.jpql.entities.OrderedManyToManyEntity</class>\n@@ -38,8 +39,8 @@\n         <class>org.apache.openjpa.persistence.jpql.entities.XMLUnorderedNameEntity</class>\n         <properties>\n             <property name=\"openjpa.jdbc.SynchronizeMappings\" value=\"buildSchema\" />\n-            <!-- property name=\"openjpa.Log\" value=\"SQL=TRACE\"/ -->\n-            <property name=\"openjpa.RuntimeUnenhancedClasses\" value=\"unsupported\"/>\n+            <!-- <property name=\"openjpa.Log\" value=\"SQL=TRACE\"/> -->\n+            <!-- <property name=\"openjpa.RuntimeUnenhancedClasses\" value=\"unsupported\"/> -->\n         </properties>\n     </persistence-unit>\n "}]}

