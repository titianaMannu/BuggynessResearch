{"sha":"ad98d444e1f43922ac61a25ae57bd7ccddfc6178","node_id":"MDY6Q29tbWl0MjA2MzY0OmFkOThkNDQ0ZTFmNDM5MjJhYzYxYTI1YWU1N2JkN2NjZGRmYzYxNzg=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2010-11-04T21:03:23Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2010-11-04T21:03:23Z"},"message":"OPENJPA-1810: make QueryKey distinguishable for CriteriaQuery\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1031244 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2a2169afb341c3491699f7913f185d7689cb60a9","url":"https://api.github.com/repos/apache/openjpa/git/trees/2a2169afb341c3491699f7913f185d7689cb60a9"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ad98d444e1f43922ac61a25ae57bd7ccddfc6178","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ad98d444e1f43922ac61a25ae57bd7ccddfc6178","html_url":"https://github.com/apache/openjpa/commit/ad98d444e1f43922ac61a25ae57bd7ccddfc6178","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ad98d444e1f43922ac61a25ae57bd7ccddfc6178/comments","author":null,"committer":null,"parents":[{"sha":"a09a2b58560ab91c2ef526ec0f10f9adcb321a35","url":"https://api.github.com/repos/apache/openjpa/commits/a09a2b58560ab91c2ef526ec0f10f9adcb321a35","html_url":"https://github.com/apache/openjpa/commit/a09a2b58560ab91c2ef526ec0f10f9adcb321a35"}],"stats":{"total":60,"additions":50,"deletions":10},"files":[{"sha":"cd0106a92e6e16168e0d27ea0a6384e513612dc1","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryCacheStoreQuery.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/ad98d444e1f43922ac61a25ae57bd7ccddfc6178/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryCacheStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/ad98d444e1f43922ac61a25ae57bd7ccddfc6178/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryCacheStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryCacheStoreQuery.java?ref=ad98d444e1f43922ac61a25ae57bd7ccddfc6178","patch":"@@ -331,9 +331,10 @@ public QueryCacheExecutor(Executor ex, ClassMetaData meta,\n         public ResultObjectProvider executeQuery(StoreQuery q, Object[] params,\n             Range range) {\n             QueryCacheStoreQuery cq = (QueryCacheStoreQuery) q;\n+            Object parsed = cq.getDelegate().newCompilation();\n             QueryKey key = QueryKey.newInstance(cq.getContext(),\n                 _ex.isPacking(q), params, _candidate, _subs, range.start, \n-                range.end);\n+                range.end, parsed);\n             List<Object> cached = cq.checkCache(key);\n             if (cached != null)\n                 return new ListResultObjectProvider(cached);"},{"sha":"f5b6ed0befe2101e41cdb5f0783f16c94a8f638e","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryKey.java","status":"modified","additions":13,"deletions":9,"changes":22,"blob_url":"https://github.com/apache/openjpa/blob/ad98d444e1f43922ac61a25ae57bd7ccddfc6178/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryKey.java","raw_url":"https://github.com/apache/openjpa/raw/ad98d444e1f43922ac61a25ae57bd7ccddfc6178/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryKey.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryKey.java?ref=ad98d444e1f43922ac61a25ae57bd7ccddfc6178","patch":"@@ -89,7 +89,7 @@\n     private String _candidateClassName;\n     private boolean _subclasses;\n     private Set _accessPathClassNames;\n-    private String _query;\n+    private Object _query;\n     private boolean _ignoreChanges;\n     private Map _params;\n     private long _rangeStart;\n@@ -117,7 +117,7 @@ public static QueryKey newInstance(Query q, Object[] args) {\n         // via API calls (candidate class, result class, etc)\n         q.compile();\n         return newInstance(q, false, args, q.getCandidateType(),\n-            q.hasSubclasses(), q.getStartRange(), q.getEndRange());\n+            q.hasSubclasses(), q.getStartRange(), q.getEndRange(), null);\n     }\n \n     /**\n@@ -128,15 +128,15 @@ public static QueryKey newInstance(Query q, Map args) {\n         // via API calls (candidate class, result class, etc)\n         q.compile();\n         return newInstance(q, false, args, q.getCandidateType(),\n-            q.hasSubclasses(), q.getStartRange(), q.getEndRange());\n+            q.hasSubclasses(), q.getStartRange(), q.getEndRange(), null);\n     }\n \n     /**\n      * Return a key for the given query, or null if it is not cacheable.\n      */\n     static QueryKey newInstance(QueryContext q, boolean packed, Object[] args,\n-        Class candidate, boolean subs, long startIdx, long endIdx) {\n-        QueryKey key = createKey(q, packed, candidate, subs, startIdx, endIdx);\n+        Class candidate, boolean subs, long startIdx, long endIdx, Object parsed) {\n+        QueryKey key = createKey(q, packed, candidate, subs, startIdx, endIdx, parsed);\n         if (key != null && setParams(key, q, args))\n             return key;\n         return null;\n@@ -146,8 +146,8 @@ static QueryKey newInstance(QueryContext q, boolean packed, Object[] args,\n      * Return a key for the given query, or null if it is not cacheable.\n      */\n     static QueryKey newInstance(QueryContext q, boolean packed, Map args,\n-        Class candidate, boolean subs, long startIdx, long endIdx) {\n-        QueryKey key = createKey(q, packed, candidate, subs, startIdx, endIdx);\n+        Class candidate, boolean subs, long startIdx, long endIdx, Object parsed) {\n+        QueryKey key = createKey(q, packed, candidate, subs, startIdx, endIdx, parsed);\n         if (key != null && (args == null || args.isEmpty() ||\n             setParams(key, q.getStoreContext(), new HashMap(args))))\n             return key;\n@@ -160,7 +160,7 @@ static QueryKey newInstance(QueryContext q, boolean packed, Map args,\n      * class, query filter, etc.\n      */\n     private static QueryKey createKey(QueryContext q, boolean packed,\n-        Class candidateClass, boolean subclasses, long startIdx, long endIdx) {\n+        Class candidateClass, boolean subclasses, long startIdx, long endIdx, Object parsed) {\n         if (candidateClass == null)\n             return null;\n \n@@ -245,6 +245,10 @@ private static QueryKey createKey(QueryContext q, boolean packed,\n         key._accessPathClassNames = accessPathClassNames;\n         key._timeout = timeout;\n         key._query = q.getQueryString();\n+        if (key._query == null) {\n+            // this can be a criteria query\n+            key._query = parsed;\n+        }\n         key._ignoreChanges = q.getIgnoreChanges();\n         key._rangeStart = startIdx;\n         key._rangeEnd = endIdx;\n@@ -408,7 +412,7 @@ public boolean equals(Object ob) {\n             && _ignoreChanges == other._ignoreChanges\n             && _rangeStart == other._rangeStart\n             && _rangeEnd == other._rangeEnd\n-            && StringUtils.equals(_query, other._query)\n+            && ObjectUtils.equals(_query, other._query)\n             && ObjectUtils.equals(_params, other._params);\n     }\n "},{"sha":"3500ae81d4b85742d395ef4b0c0d99ebcd265567","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestCriteria.java","status":"modified","additions":29,"deletions":0,"changes":29,"blob_url":"https://github.com/apache/openjpa/blob/ad98d444e1f43922ac61a25ae57bd7ccddfc6178/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestCriteria.java","raw_url":"https://github.com/apache/openjpa/raw/ad98d444e1f43922ac61a25ae57bd7ccddfc6178/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestCriteria.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestCriteria.java?ref=ad98d444e1f43922ac61a25ae57bd7ccddfc6178","patch":"@@ -21,7 +21,12 @@\n \n import java.util.List;\n \n+import javax.persistence.EntityManager;\n import javax.persistence.Query;\n+import javax.persistence.TypedQuery;\n+import javax.persistence.criteria.CriteriaBuilder;\n+import javax.persistence.criteria.CriteriaQuery;\n+import javax.persistence.criteria.Root;\n \n import org.apache.openjpa.persistence.OpenJPAEntityManager;\n import org.apache.openjpa.persistence.query.DomainObject;\n@@ -57,6 +62,8 @@\n     public void setUp() {\n             super.setUp(CLEAR_TABLES,\n                     \"openjpa.DynamicEnhancementAgent\", \"false\",\n+                    \"openjpa.DataCache\",\"true\",\n+                    \"openjpa.QueryCache\",\"true\",\n                     Account.class,\n                     Address.class,\n                     A.class,\n@@ -233,6 +240,28 @@ public void testSize() {\n         compare(jpql, d);\n     }\n     \n+    public void testCount() {\n+        \n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        for(int i = 0;i<50;i++)\n+            em.persist(new Department());\n+        em.getTransaction().commit();\n+        \n+        CriteriaBuilder cb = em.getCriteriaBuilder();\n+        CriteriaQuery<Department> q = cb.createQuery(Department.class);\n+        Root<Department> book = q.from(Department.class);\n+        TypedQuery<Department> dept = em.createQuery(q);\n+        int size = dept.getResultList().size();\n+\n+        CriteriaQuery<Long> c = cb.createQuery(Long.class);\n+        Root<?> from = c.from(Department.class);\n+        c.select(cb.count(from));\n+        TypedQuery<Long> query = em.createQuery(c);\n+        long count = query.getSingleResult();\n+        assertEquals(size, count);\n+    }\n+    \n     public void testGeneralCase() {\n         DomainObject e = qb.createQueryDefinition(Employee.class);\n         e.where(e.get(\"department\").get(\"name\").equal(\"Engineering\"));"},{"sha":"0c0a7e7b2305a5ba04c8c5c17817f43397b69760","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaQueryImpl.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/ad98d444e1f43922ac61a25ae57bd7ccddfc6178/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaQueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/ad98d444e1f43922ac61a25ae57bd7ccddfc6178/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaQueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaQueryImpl.java?ref=ad98d444e1f43922ac61a25ae57bd7ccddfc6178","patch":"@@ -724,4 +724,10 @@ public String toString() {\n             return super.toString();\n         }\n     }\n+    \n+    public boolean equals(Object other) {\n+        if (toString().equals(other.toString()))\n+            return true;\n+        return false;\n+    }\n }"}]}

