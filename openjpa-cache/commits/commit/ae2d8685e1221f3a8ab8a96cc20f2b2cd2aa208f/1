{"sha":"ae2d8685e1221f3a8ab8a96cc20f2b2cd2aa208f","node_id":"MDY6Q29tbWl0MjA2MzY0OmFlMmQ4Njg1ZTEyMjFmM2E4YWI4YTk2Y2MyMGYyYjJjZDJhYTIwOGY=","commit":{"author":{"name":"Srinivasa Segu","email":"ssegu@apache.org","date":"2007-03-22T20:26:18Z"},"committer":{"name":"Srinivasa Segu","email":"ssegu@apache.org","date":"2007-03-22T20:26:18Z"},"message":"OPENJPA-175. PagingResultObjectProvider to use FetchBatchSize when set for eager selects. Fix to handle Oracle in-clause limit of 1000\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@521443 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"20a7e2e3dfe97d97bf3fcf0d990a718ea049d720","url":"https://api.github.com/repos/apache/openjpa/git/trees/20a7e2e3dfe97d97bf3fcf0d990a718ea049d720"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ae2d8685e1221f3a8ab8a96cc20f2b2cd2aa208f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ae2d8685e1221f3a8ab8a96cc20f2b2cd2aa208f","html_url":"https://github.com/apache/openjpa/commit/ae2d8685e1221f3a8ab8a96cc20f2b2cd2aa208f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ae2d8685e1221f3a8ab8a96cc20f2b2cd2aa208f/comments","author":null,"committer":null,"parents":[{"sha":"68e4f9a85b9f2a2067daaaa3d56dfac522fdb3a2","url":"https://api.github.com/repos/apache/openjpa/commits/68e4f9a85b9f2a2067daaaa3d56dfac522fdb3a2","html_url":"https://github.com/apache/openjpa/commit/68e4f9a85b9f2a2067daaaa3d56dfac522fdb3a2"}],"stats":{"total":100,"additions":79,"deletions":21},"files":[{"sha":"d2243b05ab46d3fb45363db3583df7c5cbe12e6d","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PagingResultObjectProvider.java","status":"modified","additions":39,"deletions":15,"changes":54,"blob_url":"https://github.com/apache/openjpa/blob/ae2d8685e1221f3a8ab8a96cc20f2b2cd2aa208f/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PagingResultObjectProvider.java","raw_url":"https://github.com/apache/openjpa/raw/ae2d8685e1221f3a8ab8a96cc20f2b2cd2aa208f/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PagingResultObjectProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PagingResultObjectProvider.java?ref=ae2d8685e1221f3a8ab8a96cc20f2b2cd2aa208f","patch":"@@ -22,6 +22,7 @@\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.meta.FieldMapping;\n import org.apache.openjpa.jdbc.schema.Column;\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\n import org.apache.openjpa.jdbc.sql.Result;\n import org.apache.openjpa.jdbc.sql.SQLBuffer;\n import org.apache.openjpa.jdbc.sql.Select;\n@@ -149,28 +150,24 @@ public PagingResultObjectProvider(SelectExecutor sel,\n         // try to find a good page size.  if the known size < batch size, use\n         // it.  if the batch size is set, then use that; if it's sorta close\n         // to the size, then use the size / 2 to get two full pages rather\n-        // than a possible big one and small one.  cap everything at 50.\n+        // than a possible big one and small one\n         int batch = getFetchConfiguration().getFetchBatchSize();\n         int pageSize;\n-        if (size <= batch && size <= 50)\n+        if (batch < 0)\n             pageSize = (int) size;\n-        else if (batch > 0 && batch <= 50) {\n-            if (size <= batch * 2) {\n+        else {\n+            if (batch == 0)\n+                batch = 50; // reasonable default\n+            if (size <= batch)\n+                pageSize = (int) size;\n+            else if (size <= batch * 2) {\n                 if (size % 2 == 0)\n                     pageSize = (int) (size / 2);\n                 else\n                     pageSize = (int) (size / 2 + 1);\n             } else\n                 pageSize = batch;\n-        } else if (size <= 50)\n-            pageSize = (int) size;\n-        else if (size <= 100) {\n-            if (size % 2 == 0)\n-                pageSize = (int) (size / 2);\n-            else\n-                pageSize = (int) (size / 2 + 1);\n-        } else\n-            pageSize = 50;\n+        }\n \n         _page = new Object[pageSize];\n         if (_paged.length > 1)\n@@ -341,10 +338,11 @@ private void executeEagerSelects(ClassMapping mapping, BitSet paged,\n         // create where condition limiting instances to this page\n         JDBCStore store = getStore();\n         Select sel = store.getSQLFactory().newSelect();\n-        SQLBuffer buf = new SQLBuffer(store.getDBDictionary());\n+        DBDictionary dict = store.getDBDictionary();\n+        SQLBuffer buf = new SQLBuffer(dict);\n         Column[] pks = mapping.getPrimaryKeyColumns();\n         if (pks.length == 1)\n-            inContains(sel, buf, mapping, pks, start, end);\n+            createInContains(sel, dict, buf, mapping, pks, start, end);\n         else\n             orContains(sel, buf, mapping, pks, start, end);\n         sel.where(buf);\n@@ -388,6 +386,32 @@ private void executeEagerSelects(ClassMapping mapping, BitSet paged,\n         }\n     }\n \n+    /**\n+     *  Based on the DBDictionary, create the needed IN clauses.\n+     */\n+    private void createInContains(Select sel, DBDictionary dict, SQLBuffer buf, \n+        ClassMapping mapping, Column[] pks, int start, int end) {\n+        int inClauseLimit = dict.inClauseLimit;\n+        if ((inClauseLimit == -1) || ((end - start) <= inClauseLimit))\n+            inContains(sel, buf, mapping, pks, start, end);\n+        else {\n+            buf.append(\"(\");\n+\n+            int low = start;\n+            for (int i = 1, stop = (end - start)/inClauseLimit; i <= stop; i++) {\n+                inContains(sel, buf, mapping, pks, low, low + inClauseLimit);\n+                low += inClauseLimit;\n+                if (low < end)\n+                    buf.append(\" OR \");\n+            }\n+            // Remaining\n+            if (low < end)\n+                inContains(sel, buf, mapping, pks, low, end);\n+\n+            buf.append(\")\");\n+        }\n+    }\n+    \n     /**\n      * Create an IN clause limiting the results to the current page.\n      */"},{"sha":"c366654e159087685bb8ce097ad90f05ecd5ad51","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/InExpression.java","status":"modified","additions":38,"deletions":6,"changes":44,"blob_url":"https://github.com/apache/openjpa/blob/ae2d8685e1221f3a8ab8a96cc20f2b2cd2aa208f/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/InExpression.java","raw_url":"https://github.com/apache/openjpa/raw/ae2d8685e1221f3a8ab8a96cc20f2b2cd2aa208f/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/InExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/InExpression.java?ref=ae2d8685e1221f3a8ab8a96cc20f2b2cd2aa208f","patch":"@@ -19,6 +19,7 @@\n import java.util.Collection;\n import java.util.Collections;\n import java.util.Iterator;\n+import java.util.List;\n import java.util.Map;\n \n import org.apache.openjpa.jdbc.schema.Column;\n@@ -90,13 +91,13 @@ public void appendTo(Select sel, ExpContext ctx, ExpState state,\n         _const.calculateValue(sel, ctx, istate.constantState, null, null);\n         _val.calculateValue(sel, ctx, istate.valueState, null, null);\n \n+        List list = null;\n         Collection coll = getCollection(ctx, istate.constantState);\n         if (coll != null) {\n-            Collection ds = new ArrayList(coll.size());\n+            list = new ArrayList(coll.size());\n             for (Iterator itr = coll.iterator(); itr.hasNext();)\n-                ds.add(_val.toDataStoreValue(sel, ctx, istate.valueState, \n+                list.add(_val.toDataStoreValue(sel, ctx, istate.valueState, \n                     itr.next()));\n-            coll = ds;\n         }\n \n         Column[] cols = null;\n@@ -105,15 +106,46 @@ public void appendTo(Select sel, ExpContext ctx, ExpState state,\n         else if (_val instanceof GetObjectId)\n             cols = ((GetObjectId) _val).getColumns(istate.valueState);\n \n-        if (coll == null || coll.isEmpty())\n+        if (list == null || list.isEmpty())\n             buf.append(\"1 <> 1\");\n         else if (_val.length(sel, ctx, istate.valueState) == 1)\n-            inContains(sel, ctx, istate.valueState, buf, coll, cols);\n+            createInContains(sel, ctx, istate.valueState, buf, list, cols);\n         else\n-            orContains(sel, ctx, istate.valueState, buf, coll, cols);\n+            orContains(sel, ctx, istate.valueState, buf, list, cols);\n         sel.append(buf, state.joins);\n     }\n \n+    /**\n+     * Based on the inClauseLimit of the DBDictionary, create the needed IN \n+     * clauses\n+     */\n+    private void createInContains(Select sel, ExpContext ctx, ExpState state, \n+        SQLBuffer buf, List list, Column[] cols) {\n+\n+        int inClauseLimit = ctx.store.getDBDictionary().inClauseLimit;\n+        if ((inClauseLimit == -1) || (list.size() < inClauseLimit))\n+            inContains(sel, ctx, state, buf, list, cols);\n+        else {\n+            buf.append(\"(\");\n+\n+            int low = 0;\n+            for (int i = 1, stop = list.size()/inClauseLimit; i <= stop; i++) {\n+                List subList = list.subList(low, low + inClauseLimit);\n+                inContains(sel, ctx, state, buf, subList, cols);\n+                low += inClauseLimit;\n+                if (low < list.size())\n+                    buf.append(\" OR \");\n+            }\n+            // Remaining\n+            if (low < list.size()) {\n+                List rem = list.subList(low, list.size());\n+                inContains(sel, ctx, state, buf, rem, cols);\n+            }\n+\n+            buf.append(\")\");\n+        }\n+    }\n+\n     /**\n      * Construct an IN clause with the value of the given collection.\n      */"},{"sha":"a9b95468a709256b6c19f39c299a6e3672c97fb6","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/ae2d8685e1221f3a8ab8a96cc20f2b2cd2aa208f/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/ae2d8685e1221f3a8ab8a96cc20f2b2cd2aa208f/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java?ref=ae2d8685e1221f3a8ab8a96cc20f2b2cd2aa208f","patch":"@@ -237,6 +237,7 @@\n     public boolean useSetStringForClobs = false;\n     public int maxEmbeddedBlobSize = -1;\n     public int maxEmbeddedClobSize = -1;\n+    public int inClauseLimit = -1;\n     public int datePrecision = MILLI;\n     public int characterColumnSize = 255;\n     public String arrayTypeName = \"ARRAY\";"},{"sha":"1ba5d229b9ed67ab9288c68e6e59cbbb1c704b36","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/ae2d8685e1221f3a8ab8a96cc20f2b2cd2aa208f/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/ae2d8685e1221f3a8ab8a96cc20f2b2cd2aa208f/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java?ref=ae2d8685e1221f3a8ab8a96cc20f2b2cd2aa208f","patch":"@@ -116,6 +116,7 @@ public OracleDictionary() {\n         maxConstraintNameLength = 30;\n         maxEmbeddedBlobSize = 4000;\n         maxEmbeddedClobSize = 4000;\n+        inClauseLimit = 1000;\n \n         supportsDeferredConstraints = true;\n         supportsLockingWithDistinctClause = false;"}]}

