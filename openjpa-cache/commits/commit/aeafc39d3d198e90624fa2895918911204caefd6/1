{"sha":"aeafc39d3d198e90624fa2895918911204caefd6","node_id":"MDY6Q29tbWl0MjA2MzY0OmFlYWZjMzlkM2QxOThlOTA2MjRmYTI4OTU5MTg5MTEyMDRjYWVmZDY=","commit":{"author":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-01-31T19:27:11Z"},"committer":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-01-31T19:27:11Z"},"message":"Simple test for OPENJPA-116.  Just modified the simple TestPersistence testcase with a new variation for testing the exception on getDelegate() when the EM is closed.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@501955 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5036517f0c77f3a16f02666978db60d94b987980","url":"https://api.github.com/repos/apache/openjpa/git/trees/5036517f0c77f3a16f02666978db60d94b987980"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/aeafc39d3d198e90624fa2895918911204caefd6","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/aeafc39d3d198e90624fa2895918911204caefd6","html_url":"https://github.com/apache/openjpa/commit/aeafc39d3d198e90624fa2895918911204caefd6","comments_url":"https://api.github.com/repos/apache/openjpa/commits/aeafc39d3d198e90624fa2895918911204caefd6/comments","author":null,"committer":null,"parents":[{"sha":"67a73ee0eaa0a903730d5fb1d5f3ffa5f0ca5f68","url":"https://api.github.com/repos/apache/openjpa/commits/67a73ee0eaa0a903730d5fb1d5f3ffa5f0ca5f68","html_url":"https://github.com/apache/openjpa/commit/67a73ee0eaa0a903730d5fb1d5f3ffa5f0ca5f68"}],"stats":{"total":248,"additions":134,"deletions":114},"files":[{"sha":"3b6d69a311783294a62f492867e6a707106cb58a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestPersistence.java","status":"modified","additions":134,"deletions":114,"changes":248,"blob_url":"https://github.com/apache/openjpa/blob/aeafc39d3d198e90624fa2895918911204caefd6/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestPersistence.java","raw_url":"https://github.com/apache/openjpa/raw/aeafc39d3d198e90624fa2895918911204caefd6/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestPersistence.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestPersistence.java?ref=aeafc39d3d198e90624fa2895918911204caefd6","patch":"@@ -1,114 +1,134 @@\n-/*\n- * Copyright 2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.openjpa.persistence.simple;\n-\n-import java.util.HashMap;\n-import java.util.Map;\n-import javax.persistence.EntityManager;\n-import javax.persistence.EntityManagerFactory;\n-import javax.persistence.EntityTransaction;\n-import javax.persistence.Persistence;\n-\n-import junit.framework.TestCase;\n-import junit.textui.TestRunner;\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\n-\n-/**\n- * Simple test case to get an EntityManager and perform some basic operations.\n- *\n- * @author Marc Prud'hommeaux\n- */\n-public class TestPersistence\n-    extends TestCase {\n-\n-    private EntityManagerFactory emf;\n-\n-    public void setUp() {\n-        Map props = new HashMap(System.getProperties());\n-        props.put(\"openjpa.MetaDataFactory\",\n-            \"jpa(Types=\" + AllFieldTypes.class.getName() + \")\");\n-        emf = Persistence.createEntityManagerFactory(\"test\", props);\n-    }\n-\n-    public void tearDown() {\n-        if (emf == null)\n-            return;\n-        try {\n-            EntityManager em = emf.createEntityManager();\n-            em.getTransaction().begin();\n-            em.createQuery(\"delete from AllFieldTypes\").executeUpdate();\n-            em.getTransaction().commit();\n-            em.close();\n-            emf.close();\n-        } catch (Exception e) {\n-        }\n-    }\n-\n-    public void testCreateEntityManager() {\n-        EntityManager em = emf.createEntityManager();\n-\n-        EntityTransaction t = em.getTransaction();\n-        assertNotNull(t);\n-        t.begin();\n-        t.setRollbackOnly();\n-        t.rollback();\n-\n-        // openjpa-facade test\n-        assertTrue(em instanceof OpenJPAEntityManager);\n-        OpenJPAEntityManager ojem = (OpenJPAEntityManager) em;\n-        ojem.getFetchPlan().setMaxFetchDepth(1);\n-        assertEquals(1, ojem.getFetchPlan().getMaxFetchDepth());\n-        em.close();\n-    }\n-\n-    public void testPersist() {\n-        EntityManager em = emf.createEntityManager();\n-        em.getTransaction().begin();\n-        em.persist(new AllFieldTypes());\n-        em.getTransaction().commit();\n-        em.close();\n-    }\n-\n-    public void testQuery() {\n-        EntityManager em = emf.createEntityManager();\n-        em.getTransaction().begin();\n-        AllFieldTypes aft = new AllFieldTypes();\n-        aft.setStringField(\"foo\");\n-        aft.setIntField(10);\n-        em.persist(aft);\n-        em.getTransaction().commit();\n-        em.close();\n-\n-        em = emf.createEntityManager();\n-        em.getTransaction().begin();\n-        assertEquals(1, em.createQuery\n-            (\"select x from AllFieldTypes x where x.stringField = 'foo'\").\n-            getResultList().size());\n-        assertEquals(0, em.createQuery\n-            (\"select x from AllFieldTypes x where x.stringField = 'bar'\").\n-            getResultList().size());\n-        assertEquals(1, em.createQuery\n-            (\"select x from AllFieldTypes x where x.intField >= 10\").\n-            getResultList().size());\n-        em.getTransaction().rollback();\n-        em.close();\n-    }\n-\n-    public static void main(String[] args) {\n-        TestRunner.run(TestPersistence.class);\n-    }\n-}\n-\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *\r\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.simple;\r\n+\r\n+import java.util.HashMap;\r\n+import java.util.Map;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+import javax.persistence.EntityTransaction;\r\n+import javax.persistence.Persistence;\r\n+\r\n+import junit.framework.TestCase;\r\n+import junit.textui.TestRunner;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+/**\r\n+ * Simple test case to get an EntityManager and perform some basic operations.\r\n+ *\r\n+ * @author Marc Prud'hommeaux\r\n+ */\r\n+public class TestPersistence\r\n+    extends TestCase {\r\n+\r\n+    private EntityManagerFactory emf;\r\n+\r\n+    public void setUp() {\r\n+        Map props = new HashMap(System.getProperties());\r\n+        props.put(\"openjpa.MetaDataFactory\",\r\n+            \"jpa(Types=\" + AllFieldTypes.class.getName() + \")\");\r\n+        emf = Persistence.createEntityManagerFactory(\"test\", props);\r\n+    }\r\n+\r\n+    public void tearDown() {\r\n+        if (emf == null)\r\n+            return;\r\n+        try {\r\n+            EntityManager em = emf.createEntityManager();\r\n+            em.getTransaction().begin();\r\n+            em.createQuery(\"delete from AllFieldTypes\").executeUpdate();\r\n+            em.getTransaction().commit();\r\n+            em.close();\r\n+            emf.close();\r\n+        } catch (Exception e) {\r\n+        }\r\n+    }\r\n+\r\n+    public void testCreateEntityManager() {\r\n+        EntityManager em = emf.createEntityManager();\r\n+\r\n+        EntityTransaction t = em.getTransaction();\r\n+        assertNotNull(t);\r\n+        t.begin();\r\n+        t.setRollbackOnly();\r\n+        t.rollback();\r\n+\r\n+        // openjpa-facade test\r\n+        assertTrue(em instanceof OpenJPAEntityManager);\r\n+        OpenJPAEntityManager ojem = (OpenJPAEntityManager) em;\r\n+        ojem.getFetchPlan().setMaxFetchDepth(1);\r\n+        assertEquals(1, ojem.getFetchPlan().getMaxFetchDepth());\r\n+        em.close();\r\n+    }\r\n+\r\n+    public void testPersist() {\r\n+        EntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        em.persist(new AllFieldTypes());\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+    }\r\n+\r\n+    public void testQuery() {\r\n+        EntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        AllFieldTypes aft = new AllFieldTypes();\r\n+        aft.setStringField(\"foo\");\r\n+        aft.setIntField(10);\r\n+        em.persist(aft);\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+\r\n+        em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        assertEquals(1, em.createQuery\r\n+            (\"select x from AllFieldTypes x where x.stringField = 'foo'\").\r\n+            getResultList().size());\r\n+        assertEquals(0, em.createQuery\r\n+            (\"select x from AllFieldTypes x where x.stringField = 'bar'\").\r\n+            getResultList().size());\r\n+        assertEquals(1, em.createQuery\r\n+            (\"select x from AllFieldTypes x where x.intField >= 10\").\r\n+            getResultList().size());\r\n+        em.getTransaction().rollback();\r\n+        em.close();\r\n+    }\r\n+\r\n+    /**\r\n+     * Ensures that an IllegalStateException is thrown if getDelegate is called\r\n+     * after closing the EntityManager.\r\n+     */\r\n+    public void testGetDelegateAfterClose() {\r\n+        EntityManager em = emf.createEntityManager();\r\n+\r\n+        em.close();\r\n+\r\n+        try {\r\n+            Object o = em.getDelegate();\r\n+            fail();\r\n+        }\r\n+        catch(IllegalStateException ise) {\r\n+            /*\r\n+             * An IllegalStateException is expected. Nothing to do here.\r\n+             */\r\n+        }\r\n+    }\r\n+\r\n+    public static void main(String[] args) {\r\n+        TestRunner.run(TestPersistence.class);\r\n+    }\r\n+}\r\n+\r"}]}

