{"sha":"aedc261abc6fddb00f815e5c68906ef7b2e255fc","node_id":"MDY6Q29tbWl0MjA2MzY0OmFlZGMyNjFhYmM2ZmRkYjAwZjgxNWU1YzY4OTA2ZWY3YjJlMjU1ZmM=","commit":{"author":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2009-08-26T18:23:11Z"},"committer":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2009-08-26T18:23:11Z"},"message":"OPENJPA-1228 Updated persistence parser to use new default value for exclude-unlisted-classes in a JPA 2.0 persistence.xml while maintaining prior behavior for a 1.0 or unspecified version.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@808149 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"28eaa9ea5771c739583a71652d7ac814e7a240c1","url":"https://api.github.com/repos/apache/openjpa/git/trees/28eaa9ea5771c739583a71652d7ac814e7a240c1"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/aedc261abc6fddb00f815e5c68906ef7b2e255fc","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/aedc261abc6fddb00f815e5c68906ef7b2e255fc","html_url":"https://github.com/apache/openjpa/commit/aedc261abc6fddb00f815e5c68906ef7b2e255fc","comments_url":"https://api.github.com/repos/apache/openjpa/commits/aedc261abc6fddb00f815e5c68906ef7b2e255fc/comments","author":null,"committer":null,"parents":[{"sha":"4083018e380a5c8a08323a43dc49fa8dda3635e0","url":"https://api.github.com/repos/apache/openjpa/commits/4083018e380a5c8a08323a43dc49fa8dda3635e0","html_url":"https://github.com/apache/openjpa/commit/4083018e380a5c8a08323a43dc49fa8dda3635e0"}],"stats":{"total":218,"additions":214,"deletions":4},"files":[{"sha":"af6fdbd4e2cca222b2565f81dab5727218844918","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java","status":"modified","additions":51,"deletions":3,"changes":54,"blob_url":"https://github.com/apache/openjpa/blob/aedc261abc6fddb00f815e5c68906ef7b2e255fc/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java","raw_url":"https://github.com/apache/openjpa/raw/aedc261abc6fddb00f815e5c68906ef7b2e255fc/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java?ref=aedc261abc6fddb00f815e5c68906ef7b2e255fc","patch":"@@ -20,6 +20,7 @@\n \n import java.io.File;\n import java.io.IOException;\n+import java.math.BigDecimal;\n import java.net.MalformedURLException;\n import java.net.URL;\n import java.security.AccessController;\n@@ -87,6 +88,7 @@\n     public static final Specification ALIAS_EJB = new Specification(\"ejb 3\");\n     public static final String RSRC_GLOBAL = \"META-INF/openjpa.xml\";\n     public static final String RSRC_DEFAULT = \"META-INF/persistence.xml\";\n+    public static final BigDecimal VERSION_1_0 = BigDecimal.valueOf(1.0);\n \n     private static final Localizer _loc = Localizer.forPackage\n         (PersistenceProductDerivation.class);\n@@ -603,6 +605,7 @@ public void setInto(Configuration conf) {\n         private URL _source = null;\n         private String _persistenceVersion;\n         private String _schemaLocation;\n+        private boolean _excludeUnlistedSet = false;\n \n         public ConfigurationParser(Map map) {\n             _map = map;\n@@ -673,6 +676,7 @@ protected void reset() {\n             super.reset();\n             _info = null;\n             _source = null;\n+            _excludeUnlistedSet = false;\n         }\n \n         protected boolean startElement(String name, Attributes attrs)\n@@ -687,6 +691,7 @@ else if (currentDepth() == 3 && \"property\".equals(name))\n         protected void endElement(String name)\n             throws SAXException {\n             if (currentDepth() == 1) {\n+                endPersistenceUnit();\n                 _info.fromUserProperties(_map);\n                 addResult(_info);\n             }\n@@ -705,8 +710,7 @@ protected void endElement(String name)\n                             \"Not implemented yet\");\n                     break;\n                 case 'e': // exclude-unlisted-classes\n-                    _info.setExcludeUnlistedClasses(\"true\".equalsIgnoreCase\n-                        (currentText()));\n+                    setExcludeUnlistedClasses(currentText());\n                     break;\n                 case 'j':\n                     if (\"jta-data-source\".equals(name))\n@@ -740,11 +744,30 @@ protected void endElement(String name)\n             }\n         }\n \n+        // The default value for exclude-unlisted-classes was \n+        // modified in JPA 2.0 from false to true.  Set the default\n+        // based upon the persistence version to preserve behavior \n+        // of pre-JPA 2.0 applications.\n+        private void setExcludeUnlistedClasses(String value) {\n+            if (!_excludeUnlistedSet) {\n+                BigDecimal version = getPersistenceVersion();\n+                boolean excludeUnlisted;\n+                if (version.compareTo(VERSION_1_0) > 0) {\n+                    excludeUnlisted = !(\"false\".equalsIgnoreCase(value));\n+                } else {\n+                    excludeUnlisted = \"true\".equalsIgnoreCase(value);\n+                }                    \n+                _info.setExcludeUnlistedClasses(excludeUnlisted);\n+                _excludeUnlistedSet = true;            \n+            }\n+        }\n+\n         /**\n          * Parse persistence-unit element.\n          */\n         private void startPersistenceUnit(Attributes attrs)\n             throws SAXException {\n+            _excludeUnlistedSet = false;            \n             _info = new PersistenceUnitInfoImpl();\n             _info.setPersistenceUnitName(attrs.getValue(\"name\"));\n             _info.setPersistenceXMLSchemaVersion(_persistenceVersion);\n@@ -760,7 +783,32 @@ private void startPersistenceUnit(Attributes attrs)\n             if (_source != null)\n                 _info.setPersistenceXmlFileUrl(_source);\n \t\t}\n-\t}\n+        \n+        private void endPersistenceUnit() {\n+            if (!_excludeUnlistedSet) {\n+                setExcludeUnlistedClasses(null);\n+            }\n+        }\n+\n+        private BigDecimal getPersistenceVersion() {\n+            if (_info.getPersistenceXMLSchemaVersion() != null) {\n+                try {\n+                    return new BigDecimal(_info.getPersistenceXMLSchemaVersion());\n+                }\n+                catch (Throwable t) {\n+                    log(_loc.get(\"invalid-version-attribute\", \n+                        _info.getPersistenceXMLSchemaVersion(),\n+                        VERSION_1_0.toString()).toString());\n+                }\n+            }\n+            // OpenJPA supports persistence files without a version attribute.\n+            // A persistence file without a version attribute will be considered\n+            // a version 1.0 persistence file by default to maintain backward \n+            // compatibility.\n+            return VERSION_1_0;\n+        }\n+    }\n+    \n     \n     /**\n      * This private class is used to hold onto information regarding"},{"sha":"8088a32655beb1a36ac2566b13d7826e1373bbc6","filename":"openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/aedc261abc6fddb00f815e5c68906ef7b2e255fc/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/aedc261abc6fddb00f815e5c68906ef7b2e255fc/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties?ref=aedc261abc6fddb00f815e5c68906ef7b2e255fc","patch":"@@ -221,4 +221,4 @@ tuple-element-wrong-type: TupleElement {0} of value {1} of actual type {2} can n\n tuple-alias-not-found: Alias \"{0}\" was not found in this tuple. Aliases found : \"{1}\"\n tuple-exceeded-size : Attempt to access TupleElement at illegal index {0}. There are only {1} elements available.\n create-emf-error: Failed to create a provider for \"{0}\".\n-\n+invalid-version-attribute: Persistence version attribute value \"{0}\" is not valid.  Using version \"{1}\" by default."},{"sha":"9b71dce749de1d5e7e47825b4c6d257a7a8013fe","filename":"openjpa-persistence/src/test/java/org/apache/openjpa/persistence/TestPersistenceProductDerivation.java","status":"modified","additions":117,"deletions":0,"changes":117,"blob_url":"https://github.com/apache/openjpa/blob/aedc261abc6fddb00f815e5c68906ef7b2e255fc/openjpa-persistence/src/test/java/org/apache/openjpa/persistence/TestPersistenceProductDerivation.java","raw_url":"https://github.com/apache/openjpa/raw/aedc261abc6fddb00f815e5c68906ef7b2e255fc/openjpa-persistence/src/test/java/org/apache/openjpa/persistence/TestPersistenceProductDerivation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/test/java/org/apache/openjpa/persistence/TestPersistenceProductDerivation.java?ref=aedc261abc6fddb00f815e5c68906ef7b2e255fc","patch":"@@ -23,10 +23,15 @@\n import java.io.File;\n import java.io.FileInputStream;\n import java.io.FileOutputStream;\n+import java.io.IOException;\n import java.net.URL;\n import java.net.URLClassLoader;\n import java.security.AccessController;\n+import java.security.PrivilegedActionException;\n import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Enumeration;\n+import java.util.HashMap;\n import java.util.List;\n import java.util.jar.JarEntry;\n import java.util.jar.JarOutputStream;\n@@ -144,6 +149,118 @@ public void testEncryptionPluginConfigurationDefaultValue() throws Exception {\n \n \t\tassertNull(conf.getEncryptionProvider());\n \t}\n+    \n+    /*\n+     * Verifies value of exclude-unlisted-classes with a version 1.0\n+     * persistence.xml.\n+     */\n+    public void testJPA1ExcludeUnlistedClasses() throws Exception {\n+        PersistenceProductDerivation.ConfigurationParser cp = \n+                new PersistenceProductDerivation.ConfigurationParser(new HashMap());\n+\n+        List<URL> urls = getResourceURL(PersistenceProductDerivation.RSRC_DEFAULT);\n+        assertNotNull(urls);\n+        assertEquals(1, urls.size());\n+        cp.parse(urls.get(0));\n+        \n+        List<PersistenceUnitInfoImpl> units = cp.getResults();\n+                \n+        int vfyCount = 0;\n+        for (PersistenceUnitInfoImpl ppui : units) {\n+            if (\"exclude_not_specified\".equals(ppui.getPersistenceUnitName())) {\n+                vfyCount++;\n+                assertFalse(ppui.excludeUnlistedClasses());\n+            }\n+            // Verify case where exclude-unlisted-classes was specified, but\n+            // is the default ie <exclude-unlisted-classes/>\n+            if (\"exclude_default\".equals(ppui.getPersistenceUnitName())) {\n+                vfyCount++;\n+                assertFalse(ppui.excludeUnlistedClasses());\n+            }\n+            // Verify case where exclude-unlisted-classes was specified as\n+            // true <exclude-unlisted-classes>true</exclude-unlisted-classes>\n+            if (\"exclude_true\".equals(ppui.getPersistenceUnitName())) {\n+                vfyCount++;\n+                assertTrue(ppui.excludeUnlistedClasses());\n+            }\n+            // Verify case where exclude-unlisted-classes was specified as\n+            // false <exclude-unlisted-classes>false</exclude-unlisted-classes>\n+            if (\"exclude_false\".equals(ppui.getPersistenceUnitName())) {\n+                vfyCount++;\n+                assertFalse(ppui.excludeUnlistedClasses());\n+            }            \n+        }\n+        // Make sure all pu's were validated\n+        assertEquals(4, vfyCount);                \n+    }\n+\n+    /*\n+     * Verifies value of exclude-unlisted-classes with a version 2.0\n+     * persistence.xml.\n+     */\n+    public void testExcludeUnlistedClasses() throws Exception {\n+        PersistenceProductDerivation.ConfigurationParser cp = \n+            new PersistenceProductDerivation.ConfigurationParser(new HashMap());\n+\n+    List<URL> urls = getResourceURL(\"META-INF/persistence-2_0.xml\");\n+    assertNotNull(urls);\n+    assertEquals(1, urls.size());\n+    cp.parse(urls.get(0));\n+    \n+    List<PersistenceUnitInfoImpl> units = cp.getResults();\n+            \n+    int vfyCount = 0;\n+    for (PersistenceUnitInfoImpl ppui : units) {\n+        // Verify case where exclude-unlisted-classes was not specified\n+        if (\"exclude_not_specified\".equals(ppui.getPersistenceUnitName())) {\n+            vfyCount++;\n+            assertTrue(ppui.excludeUnlistedClasses());\n+        }\n+        // Verify case where exclude-unlisted-classes was specified, but\n+        // is the default ie <exclude-unlisted-classes/>\n+        if (\"exclude_default\".equals(ppui.getPersistenceUnitName())) {\n+            vfyCount++;\n+            assertTrue(ppui.excludeUnlistedClasses());\n+        }\n+        // Verify case where exclude-unlisted-classes was specified as\n+        // true <exclude-unlisted-classes>true</exclude-unlisted-classes>\n+        if (\"exclude_true\".equals(ppui.getPersistenceUnitName())) {\n+            vfyCount++;\n+            assertTrue(ppui.excludeUnlistedClasses());\n+        }\n+        // Verify case where exclude-unlisted-classes was specified as\n+        // false <exclude-unlisted-classes>false</exclude-unlisted-classes>\n+        if (\"exclude_false\".equals(ppui.getPersistenceUnitName())) {\n+            vfyCount++;\n+            assertFalse(ppui.excludeUnlistedClasses());\n+        }            \n+    }\n+    // Make sure all pu's were validated\n+    assertEquals(4, vfyCount);                \n+        \n+    }\n+\n+    private static List<URL> getResourceURL(String rsrc)\n+        throws IOException {\n+    Enumeration<URL> urls = null;\n+    try {\n+        ClassLoader cl = TestPersistenceProductDerivation.class.getClassLoader();\n+        urls = AccessController.doPrivileged(\n+            J2DoPrivHelper.getResourcesAction(cl, rsrc)); \n+        if (!urls.hasMoreElements()) {\n+            if (!rsrc.startsWith(\"META-INF\"))\n+              urls = AccessController.doPrivileged(\n+                  J2DoPrivHelper.getResourcesAction(cl, \"META-INF/\" + rsrc));\n+            if (!urls.hasMoreElements())\n+                return null;\n+        }\n+    } catch (PrivilegedActionException pae) {\n+        throw (IOException) pae.getException();\n+    }\n+\n+    return Collections.list(urls);\n+}\n+\n     private void buildJar(File sourceFile, File targetFile) throws Exception {\n         \n         JarOutputStream out = new JarOutputStream("},{"sha":"f32669c72fc753248e512b3f278b5b8f9c49bdab","filename":"openjpa-persistence/src/test/resources/META-INF/persistence-2_0.xml","status":"added","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/apache/openjpa/blob/aedc261abc6fddb00f815e5c68906ef7b2e255fc/openjpa-persistence/src/test/resources/META-INF/persistence-2_0.xml","raw_url":"https://github.com/apache/openjpa/raw/aedc261abc6fddb00f815e5c68906ef7b2e255fc/openjpa-persistence/src/test/resources/META-INF/persistence-2_0.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/test/resources/META-INF/persistence-2_0.xml?ref=aedc261abc6fddb00f815e5c68906ef7b2e255fc","patch":"@@ -0,0 +1,34 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+ \n+ http://www.apache.org/licenses/LICENSE-2.0\n+ \n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.   \n+-->\n+<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\"\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    version=\"2.0\">\n+    <persistence-unit name=\"exclude_not_specified\">\n+    </persistence-unit>\n+    <persistence-unit name=\"exclude_default\">\n+        <exclude-unlisted-classes/>\n+    </persistence-unit>\n+    <persistence-unit name=\"exclude_false\">\n+        <exclude-unlisted-classes>false</exclude-unlisted-classes>\n+    </persistence-unit>\n+    <persistence-unit name=\"exclude_true\">\n+        <exclude-unlisted-classes>true</exclude-unlisted-classes>\n+    </persistence-unit>\n+</persistence>"},{"sha":"b1c59e69f3580a27921f02dcdea2989dc2d4f083","filename":"openjpa-persistence/src/test/resources/META-INF/persistence.xml","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/aedc261abc6fddb00f815e5c68906ef7b2e255fc/openjpa-persistence/src/test/resources/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/aedc261abc6fddb00f815e5c68906ef7b2e255fc/openjpa-persistence/src/test/resources/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/test/resources/META-INF/persistence.xml?ref=aedc261abc6fddb00f815e5c68906ef7b2e255fc","patch":"@@ -32,4 +32,15 @@\n     </persistence-unit>\n     <persistence-unit name=\"encryption_plugin_default_pu\" transaction-type=\"RESOURCE_LOCAL\">\n     </persistence-unit>\n+    <persistence-unit name=\"exclude_not_specified\">\n+    </persistence-unit>\n+    <persistence-unit name=\"exclude_default\">\n+        <exclude-unlisted-classes/>\n+    </persistence-unit>\n+    <persistence-unit name=\"exclude_false\">\n+        <exclude-unlisted-classes>false</exclude-unlisted-classes>\n+    </persistence-unit>\n+    <persistence-unit name=\"exclude_true\">\n+        <exclude-unlisted-classes>true</exclude-unlisted-classes>\n+    </persistence-unit>\n </persistence>"}]}

