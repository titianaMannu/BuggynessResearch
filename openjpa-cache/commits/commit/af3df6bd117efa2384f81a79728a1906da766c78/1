{"sha":"af3df6bd117efa2384f81a79728a1906da766c78","node_id":"MDY6Q29tbWl0MjA2MzY0OmFmM2RmNmJkMTE3ZWZhMjM4NGY4MWE3OTcyOGExOTA2ZGE3NjZjNzg=","commit":{"author":{"name":"Helen Xu","email":"helenxu@apache.org","date":"2012-11-26T22:02:44Z"},"committer":{"name":"Helen Xu","email":"helenxu@apache.org","date":"2012-11-26T22:02:44Z"},"message":"OPENJPA-2282 do not append escape clause by default.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1413890 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4c8fe2e10c31dcc990b3eed4c26c7c1c45bc66e7","url":"https://api.github.com/repos/apache/openjpa/git/trees/4c8fe2e10c31dcc990b3eed4c26c7c1c45bc66e7"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/af3df6bd117efa2384f81a79728a1906da766c78","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/af3df6bd117efa2384f81a79728a1906da766c78","html_url":"https://github.com/apache/openjpa/commit/af3df6bd117efa2384f81a79728a1906da766c78","comments_url":"https://api.github.com/repos/apache/openjpa/commits/af3df6bd117efa2384f81a79728a1906da766c78/comments","author":null,"committer":null,"parents":[{"sha":"404d9491f51589938efe41e7c7252414c5f15b58","url":"https://api.github.com/repos/apache/openjpa/commits/404d9491f51589938efe41e7c7252414c5f15b58","html_url":"https://github.com/apache/openjpa/commit/404d9491f51589938efe41e7c7252414c5f15b58"}],"stats":{"total":49,"additions":41,"deletions":8},"files":[{"sha":"7f05037112238624aa32338147386617d631f7ab","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/af3df6bd117efa2384f81a79728a1906da766c78/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/af3df6bd117efa2384f81a79728a1906da766c78/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java?ref=af3df6bd117efa2384f81a79728a1906da766c78","patch":"@@ -247,7 +247,7 @@\n     public boolean requiresTargetForDelete = false;\n     public boolean allowsAliasInBulkClause = true;\n     public boolean supportsMultipleNontransactionalResultSets = true;\n-    public boolean requiresSearchStringEscapeForLike = true;\n+    public boolean requiresSearchStringEscapeForLike = false;\n     public String searchStringEscape = \"\\\\\";\n     public boolean requiresCastForMathFunctions = false;\n     public boolean requiresCastForComparisons = false;"},{"sha":"2a5c95bcc4da3c3b100498c9cd4aacfab2727942","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/JDataStoreDictionary.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/af3df6bd117efa2384f81a79728a1906da766c78/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/JDataStoreDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/af3df6bd117efa2384f81a79728a1906da766c78/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/JDataStoreDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/JDataStoreDictionary.java?ref=af3df6bd117efa2384f81a79728a1906da766c78","patch":"@@ -64,6 +64,7 @@ public JDataStoreDictionary() {\n             \"SHORT\", \"INT\", \"LONG\", \"DOUBLE PRECISION\", \"BOOLEAN\",\n         }));\n \n+        requiresSearchStringEscapeForLike = true;\n         searchStringEscape = \"\";\n     }\n "},{"sha":"459a67bebc8188d8d282c639975405657227c7d9","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MySQLDictionary.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/af3df6bd117efa2384f81a79728a1906da766c78/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MySQLDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/af3df6bd117efa2384f81a79728a1906da766c78/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MySQLDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MySQLDictionary.java?ref=af3df6bd117efa2384f81a79728a1906da766c78","patch":"@@ -149,6 +149,7 @@ public MySQLDictionary() {\n             \"INDEX\", \n         }));\n \n+        requiresSearchStringEscapeForLike = true;\n         // MySQL requires double-escape for strings\n         searchStringEscape = \"\\\\\\\\\";\n "},{"sha":"57c5f13a8f13673416a3ee4bb2fc25d983191efe","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/af3df6bd117efa2384f81a79728a1906da766c78/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/af3df6bd117efa2384f81a79728a1906da766c78/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java?ref=af3df6bd117efa2384f81a79728a1906da766c78","patch":"@@ -216,7 +216,6 @@ public OracleDictionary() {\n         super.setBatchLimit(defaultBatchLimit);\n         selectWordSet.add(\"WITH\");\n         reportsSuccessNoInfoOnBatchUpdates = true;\n-        requiresSearchStringEscapeForLike = false;\n     }\n \n     @Override"},{"sha":"2fbf7b6fbf20e12bad10f531f59794dbe3573883","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PostgresDictionary.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/af3df6bd117efa2384f81a79728a1906da766c78/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PostgresDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/af3df6bd117efa2384f81a79728a1906da766c78/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PostgresDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PostgresDictionary.java?ref=af3df6bd117efa2384f81a79728a1906da766c78","patch":"@@ -767,6 +767,7 @@ public void connectedConfiguration(Connection conn) throws SQLException {\n         }\n         // Old PostgreSQL requires double-escape for strings.\n         if ((maj <= 8 || (maj == 9 && min == 0))) {\n+            requiresSearchStringEscapeForLike = true;\n             searchStringEscape = \"\\\\\\\\\";\n         }\n     }"},{"sha":"092f54c0f2c73398946e8117deeed33b9d4577c3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestEJBQLCondExpression.java","status":"modified","additions":17,"deletions":5,"changes":22,"blob_url":"https://github.com/apache/openjpa/blob/af3df6bd117efa2384f81a79728a1906da766c78/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestEJBQLCondExpression.java","raw_url":"https://github.com/apache/openjpa/raw/af3df6bd117efa2384f81a79728a1906da766c78/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestEJBQLCondExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestEJBQLCondExpression.java?ref=af3df6bd117efa2384f81a79728a1906da766c78","patch":"@@ -42,13 +42,16 @@ public void setUp() {\n                 new Address(\"24 Mink\", \"ANTIOCH\", \"USA\", \"94513\"),\n                 new Address(\"23 Ogbete\", \"CoalCamp\", \"NIGERIA\", \"00000\"),\n                 new Address(\"10 Wilshire\", \"Worcester\", \"CANADA\", \"80080\"),\n-                new Address(\"23 Bellflower\", \"Ogui\", \"NIGERIA\", \"02000\") };\n+                new Address(\"23 Bellflower\", \"Ogui\", \"NIGERIA\", \"02000\"),\n+                new Address(\"24 Bellflower\", \"Ogui\", \"NIGERIA\", \"02000\")};\n+\n \n         CompUser user1 = createUser(\"Seetha\", \"MAC\", add[0], 40, true);\n         CompUser user2 = createUser(\"Shannon\", \"PC\", add[1], 36, false);\n         CompUser user3 = createUser(\"Ugo\", \"PC\", add[2], 19, true);\n         CompUser user4 = createUser(\"Jacob\", \"LINUX\", add[3], 10, true);\n         CompUser user5 = createUser(\"Famzy\", \"UNIX\", add[4], 29, false);\n+        CompUser user6 = createUser(\"tes\\\\ter\", \"Test\", add[5], 10, true);\n \n         em.persist(user1);\n         userid1 = user1.getUserid();\n@@ -60,6 +63,7 @@ public void setUp() {\n         userid4 = user4.getUserid();\n         em.persist(user5);\n         userid5 = user5.getUserid();\n+        em.persist(user6);\n \n         endTx(em);\n         endEm(em);\n@@ -72,7 +76,7 @@ public void testNothing() {\n         List result = em.createQuery(query).getResultList();\n \n         assertNotNull(\"the list is null\", result);\n-        assertEquals(\"the size of the list is not 5\", 5, result.size());\n+        assertEquals(\"the size of the list is not 6\", 6, result.size());\n \n         endEm(em);\n     }\n@@ -113,7 +117,7 @@ public void testInExpr() {\n         List result = em.createQuery(query).getResultList();\n \n         assertNotNull(\"the list is null\", result);\n-        assertEquals(3, result.size());\n+        assertEquals(4, result.size());\n         assertTrue(\"seetha is not in the list\", result.contains(\"Seetha\"));\n         assertTrue(\"jacob is not in the list\", result.contains(\"Jacob\"));\n         assertTrue(\"famzy is not in the list\", result.contains(\"Famzy\"));\n@@ -154,7 +158,15 @@ public void testLikeExpr() {\n \n         assertNotNull(result);\n         assertEquals(1, result.size());\n+        \n+        query = \"SELECT o.computerName FROM CompUser o WHERE o.name \" +\n+                \"LIKE 'tes\\\\%'\";\n+\n+        result = em.createQuery(query).getResultList();\n \n+        assertNotNull(result);\n+        assertEquals(1, result.size());\n+        \n         query = \"SELECT o.name FROM CompUser o WHERE o.name LIKE '_J%'\";\n \n         result = em.createQuery(query).getResultList();\n@@ -226,7 +238,7 @@ public void testIsEmptyExpr2() {\n         List result = em.createQuery(query).getResultList();\n \n         assertNotNull(\"the list is null\", result);\n-        assertEquals(\"they are not equal\", 5, result.size());\n+        assertEquals(\"they are not equal\", 6, result.size());\n \n         endEm(em);\n     }\n@@ -245,7 +257,7 @@ public void testExistExpr() {\n         List result = em.createQuery(query).getResultList();\n \n         assertNotNull(\"the list is null\", result);\n-        assertEquals(\"they are not equal\", 5, result.size());\n+        assertEquals(\"they are not equal\", 6, result.size());\n         assertTrue(\"Seetha is not list\", result.contains(\"Seetha\"));\n         assertTrue(\"Shannon is not list\", result.contains(\"Shannon\"));\n         assertTrue(\"jacob is not list\", result.contains(\"Jacob\"));"},{"sha":"9bb00fe2b0de83a92f9b14f285f2f29aadaa2826","filename":"openjpa-project/src/doc/manual/migration_considerations.xml","status":"modified","additions":19,"deletions":0,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/af3df6bd117efa2384f81a79728a1906da766c78/openjpa-project/src/doc/manual/migration_considerations.xml","raw_url":"https://github.com/apache/openjpa/raw/af3df6bd117efa2384f81a79728a1906da766c78/openjpa-project/src/doc/manual/migration_considerations.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/migration_considerations.xml?ref=af3df6bd117efa2384f81a79728a1906da766c78","patch":"@@ -524,6 +524,25 @@\n                     the <literal>javax.persistence.Column</literal> annotation.\n                 </para>\n             </section>\n+            <section id=\"jpa_2.3_RequiresSearchStringEscapeForLike\">\n+                <title>\n+                    RequiresSearchStringEscapeForLike DBDictionary Property\n+                </title>\n+                <!-- See OPENJPA-2282 for details. -->\n+                <para>\n+                    In previous releases, the default value for the property RequiresSearchStringEscapeForLike is true and caused the \n+                    unexpected escape clause appended to the SQL statement.\n+                    For example, user created a named query like this:\n+                    <programlisting> SELECT o.computerName FROM CompUser o WHERE o.name LIKE ?</programlisting>\n+                    At run time the following query is generated: \n+                    <programlisting> SELECT t0.computerName FROM CompUser t0 WHERE (t0.name LIKE ? ESCAPE '\\')</programlisting>                     \n+                    ESCAPE '\\' shouldn't be appended to the query.\n+                </para>\n+                <para>\n+                    From the 2.3.0 release, RequiresSearchStringEscapeForLike property is set to false by default. You can configure \n+                    RequiresSearchStringEscapeForLike property to be true if the old behavior is desired. \n+                </para>\n+            </section>\n         </section>\n     </section>\n </appendix>"},{"sha":"073497d9107793be92fb98ec33b0544250f90fb1","filename":"openjpa-project/src/doc/manual/ref_guide_dbsetup.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/af3df6bd117efa2384f81a79728a1906da766c78/openjpa-project/src/doc/manual/ref_guide_dbsetup.xml","raw_url":"https://github.com/apache/openjpa/raw/af3df6bd117efa2384f81a79728a1906da766c78/openjpa-project/src/doc/manual/ref_guide_dbsetup.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_dbsetup.xml?ref=af3df6bd117efa2384f81a79728a1906da766c78","patch":"@@ -2243,7 +2243,7 @@ languages, such as JDOQL.  Defaults to <literal>\"\\\\\"</literal>\n <literal>RequiresSearchStringEscapeForLike</literal>:\n When true, the database requires an escape string for queries that use\n <literal>LIKE</literal>.  The escape string can be specified using\n-<literal>searchStringEscape</literal>.  Defaults to <literal>true</literal>.\n+<literal>searchStringEscape</literal>.  Defaults to <literal>false</literal>.\n                     </para>\n                 </listitem>\n                 <listitem id=\"DBDictionary.SelectWords\">"}]}

