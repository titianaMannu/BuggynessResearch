{"sha":"afce8f543abfbcbe81eb87c7ed5e22c1879e44a5","node_id":"MDY6Q29tbWl0MjA2MzY0OmFmY2U4ZjU0M2FiZmJjYmU4MWViODdjN2VkNWUyMmMxODc5ZTQ0YTU=","commit":{"author":{"name":"A. Abram White","email":"awhite@apache.org","date":"2007-03-05T20:14:02Z"},"committer":{"name":"A. Abram White","email":"awhite@apache.org","date":"2007-03-05T20:14:02Z"},"message":"OPENJPA-162 : Allow explicit @OrderBy(<primary key field>).\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@514847 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"60e1200119357c67d33e336acbf6ebbe87d662f8","url":"https://api.github.com/repos/apache/openjpa/git/trees/60e1200119357c67d33e336acbf6ebbe87d662f8"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/afce8f543abfbcbe81eb87c7ed5e22c1879e44a5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/afce8f543abfbcbe81eb87c7ed5e22c1879e44a5","html_url":"https://github.com/apache/openjpa/commit/afce8f543abfbcbe81eb87c7ed5e22c1879e44a5","comments_url":"https://api.github.com/repos/apache/openjpa/commits/afce8f543abfbcbe81eb87c7ed5e22c1879e44a5/comments","author":null,"committer":null,"parents":[{"sha":"ebe1b5711e4347898cd8e7f4e7a9b7baa18dea26","url":"https://api.github.com/repos/apache/openjpa/commits/ebe1b5711e4347898cd8e7f4e7a9b7baa18dea26","html_url":"https://github.com/apache/openjpa/commit/ebe1b5711e4347898cd8e7f4e7a9b7baa18dea26"}],"stats":{"total":266,"additions":265,"deletions":1},"files":[{"sha":"12450a0052cd0322429ae4dfe90e7a85be498a15","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/JDBCRelatedFieldOrder.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/afce8f543abfbcbe81eb87c7ed5e22c1879e44a5/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/JDBCRelatedFieldOrder.java","raw_url":"https://github.com/apache/openjpa/raw/afce8f543abfbcbe81eb87c7ed5e22c1879e44a5/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/JDBCRelatedFieldOrder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/JDBCRelatedFieldOrder.java?ref=afce8f543abfbcbe81eb87c7ed5e22c1879e44a5","patch":"@@ -38,7 +38,7 @@\n \n     public JDBCRelatedFieldOrder(FieldMapping owner, FieldMapping rel,\n         boolean asc) {\n-        if (!rel.isInDefaultFetchGroup())\n+        if (!rel.isInDefaultFetchGroup() && !rel.isPrimaryKey())\n             throw new MetaDataException(_loc.get(\"nondfg-field-orderable\",\n                 owner, rel.getName()));\n "},{"sha":"1945130dce7317572d4e9095627ebe695c7150b4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/IdOrderedOneManyChild.java","status":"added","additions":71,"deletions":0,"changes":71,"blob_url":"https://github.com/apache/openjpa/blob/afce8f543abfbcbe81eb87c7ed5e22c1879e44a5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/IdOrderedOneManyChild.java","raw_url":"https://github.com/apache/openjpa/raw/afce8f543abfbcbe81eb87c7ed5e22c1879e44a5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/IdOrderedOneManyChild.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/IdOrderedOneManyChild.java?ref=afce8f543abfbcbe81eb87c7ed5e22c1879e44a5","patch":"@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 2006 The Apache Software Foundation.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Version;\n+\n+@Entity\n+public class IdOrderedOneManyChild {\n+\n+    @Id\n+    private long id;\n+\n+    private String name;\n+\n+    @ManyToOne\n+    private IdOrderedOneManyParent explicitParent;\n+\n+    @ManyToOne\n+    private IdOrderedOneManyParent implicitParent;\n+\n+    @Version\n+    private int optLock;\n+\n+    public long getId() { \n+        return id; \n+    }\n+\n+    public void setId(long id) { \n+        this.id = id; \n+    }\n+\n+    public String getName() { \n+        return name; \n+    }\n+\n+    public void setName(String name) { \n+        this.name = name; \n+    }\n+\n+    public IdOrderedOneManyParent getExplicitParent() { \n+        return explicitParent; \n+    }\n+\n+    public void setExplicitParent(IdOrderedOneManyParent explicitParent) { \n+        this.explicitParent = explicitParent; \n+    }\n+\n+    public IdOrderedOneManyParent getImplicitParent() { \n+        return implicitParent; \n+    }\n+\n+    public void setImplicitParent(IdOrderedOneManyParent implicitParent) { \n+        this.implicitParent = implicitParent; \n+    }\n+}"},{"sha":"4c2ff9b1dc8de88a49c28b6d888260e0c58eda55","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/IdOrderedOneManyParent.java","status":"added","additions":69,"deletions":0,"changes":69,"blob_url":"https://github.com/apache/openjpa/blob/afce8f543abfbcbe81eb87c7ed5e22c1879e44a5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/IdOrderedOneManyParent.java","raw_url":"https://github.com/apache/openjpa/raw/afce8f543abfbcbe81eb87c7ed5e22c1879e44a5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/IdOrderedOneManyParent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/IdOrderedOneManyParent.java?ref=afce8f543abfbcbe81eb87c7ed5e22c1879e44a5","patch":"@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2006 The Apache Software Foundation.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.OneToMany;\n+import javax.persistence.OrderBy;\n+import javax.persistence.Version;\n+\n+@Entity\n+public class IdOrderedOneManyParent {\n+\n+    @Id\n+    @GeneratedValue\n+    private long id;\n+\n+    private String name;\n+\n+    @OneToMany(mappedBy=\"explicitParent\")\n+    @OrderBy(\"id ASC\")\n+    private List<IdOrderedOneManyChild> explicitChildren = \n+        new ArrayList<IdOrderedOneManyChild>();\n+\n+    @OneToMany(mappedBy=\"implicitParent\")\n+    @OrderBy\n+    private List<IdOrderedOneManyChild> implicitChildren = \n+        new ArrayList<IdOrderedOneManyChild>();\n+\n+    @Version\n+    private int optLock;\n+\n+    public long getId() { \n+        return id; \n+    }\n+\n+    public List<IdOrderedOneManyChild> getExplicitChildren() { \n+        return explicitChildren; \n+    }\n+\n+    public List<IdOrderedOneManyChild> getImplicitChildren() { \n+        return implicitChildren; \n+    }\n+\n+    public String getName() { \n+        return name; \n+    }\n+\n+    public void setName(String name) { \n+        this.name = name; \n+    }\n+}"},{"sha":"c6b294ef00ce3d3742326dc728558daff5c1db76","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestIdOrderedOneMany.java","status":"added","additions":124,"deletions":0,"changes":124,"blob_url":"https://github.com/apache/openjpa/blob/afce8f543abfbcbe81eb87c7ed5e22c1879e44a5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestIdOrderedOneMany.java","raw_url":"https://github.com/apache/openjpa/raw/afce8f543abfbcbe81eb87c7ed5e22c1879e44a5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestIdOrderedOneMany.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestIdOrderedOneMany.java?ref=afce8f543abfbcbe81eb87c7ed5e22c1879e44a5","patch":"@@ -0,0 +1,124 @@\n+/*\n+ * Copyright 2006 The Apache Software Foundation.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import javax.persistence.Persistence;\n+\n+import junit.framework.TestCase;\n+import junit.textui.TestRunner;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+\n+/**\n+ * Test ordering a one-many field on the primary key of the related entity.\n+ *\n+ * @author Abe White\n+ */\n+public class TestIdOrderedOneMany\n+    extends TestCase {\n+\n+    private EntityManagerFactory emf;\n+    private long id;\n+\n+    public void setUp() {\n+        Map props = new HashMap(System.getProperties());\n+        props.put(\"openjpa.MetaDataFactory\", \"jpa(Types=\" \n+            + IdOrderedOneManyParent.class.getName() + \";\"\n+            + IdOrderedOneManyChild.class.getName() + \")\");\n+        emf = Persistence.createEntityManagerFactory(\"test\", props);\n+\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+\n+        IdOrderedOneManyParent parent = new IdOrderedOneManyParent();\n+        parent.setName(\"parent\");\n+        em.persist(parent);\n+\n+        for (int i = 0; i < 3; i++) {\n+            IdOrderedOneManyChild explicit = new IdOrderedOneManyChild();\n+            explicit.setId(3 - i);\n+            explicit.setName(\"explicit\" + explicit.getId());\n+            explicit.setExplicitParent(parent);\n+            parent.getExplicitChildren().add(explicit);\n+            em.persist(explicit);\n+\n+            IdOrderedOneManyChild implicit = new IdOrderedOneManyChild();\n+            implicit.setId(100 - i);\n+            implicit.setName(\"implicit\" + implicit.getId());\n+            implicit.setImplicitParent(parent);\n+            parent.getImplicitChildren().add(implicit);\n+            em.persist(implicit);\n+        }\n+\n+        em.getTransaction().commit();\n+        id = parent.getId();\n+        em.close();\n+    }\n+\n+    public void tearDown() {\n+        if (emf == null)\n+            return;\n+        try {\n+            EntityManager em = emf.createEntityManager();\n+            em.getTransaction().begin();\n+            em.createQuery(\"delete from IdOrderedOneManyChild\").executeUpdate();\n+            em.createQuery(\"delete from IdOrderedOneManyParent\").\n+                executeUpdate();\n+            em.getTransaction().commit();\n+            em.close();\n+            emf.close();\n+        } catch (Exception e) {\n+        }\n+    }\n+\n+    public void testExplicitOrdering() {\n+        EntityManager em = emf.createEntityManager();\n+        IdOrderedOneManyParent parent = em.find(IdOrderedOneManyParent.class, \n+            id);\n+        assertNotNull(parent);\n+        assertEquals(\"parent\", parent.getName());\n+        assertEquals(3, parent.getExplicitChildren().size());\n+        for (int i = 0; i < 3; i++) {\n+            assertEquals(i + 1, parent.getExplicitChildren().get(i).getId());\n+            assertEquals(\"explicit\" + (i + 1), parent.getExplicitChildren().\n+                get(i).getName());\n+        }\n+        em.close();\n+    }\n+\n+    public void testImplicitOrdering() {\n+        EntityManager em = emf.createEntityManager();\n+        IdOrderedOneManyParent parent = em.find(IdOrderedOneManyParent.class, \n+            id);\n+        assertNotNull(parent);\n+        assertEquals(\"parent\", parent.getName());\n+        assertEquals(3, parent.getExplicitChildren().size());\n+        for (int i = 0; i < 3; i++) {\n+            assertEquals(i + 98, parent.getImplicitChildren().get(i).getId());\n+            assertEquals(\"implicit\" + (i + 98), parent.getImplicitChildren().\n+                get(i).getName());\n+        }\n+        em.close();\n+    }\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(TestIdOrderedOneMany.class);\n+    }\n+}\n+"}]}

