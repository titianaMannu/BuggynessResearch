{"sha":"afe9acd57616e633d7c4a2278a3885621ba7e3e6","node_id":"MDY6Q29tbWl0MjA2MzY0OmFmZTlhY2Q1NzYxNmU2MzNkN2M0YTIyNzhhMzg4NTYyMWJhN2UzZTY=","commit":{"author":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-10-03T23:00:18Z"},"committer":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-10-03T23:00:18Z"},"message":"Doc corrections.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@452672 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"54d24e6a90aa6dce46470caf689a9f473882be33","url":"https://api.github.com/repos/apache/openjpa/git/trees/54d24e6a90aa6dce46470caf689a9f473882be33"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/afe9acd57616e633d7c4a2278a3885621ba7e3e6","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/afe9acd57616e633d7c4a2278a3885621ba7e3e6","html_url":"https://github.com/apache/openjpa/commit/afe9acd57616e633d7c4a2278a3885621ba7e3e6","comments_url":"https://api.github.com/repos/apache/openjpa/commits/afe9acd57616e633d7c4a2278a3885621ba7e3e6/comments","author":null,"committer":null,"parents":[{"sha":"174ae93d41ed8b35ee1ae6490b0baa88b9f990b2","url":"https://api.github.com/repos/apache/openjpa/commits/174ae93d41ed8b35ee1ae6490b0baa88b9f990b2","html_url":"https://github.com/apache/openjpa/commit/174ae93d41ed8b35ee1ae6490b0baa88b9f990b2"}],"stats":{"total":2310,"additions":707,"deletions":1603},"files":[{"sha":"12d8e0cb95684c204b60fc03a81d85e72f2b3edd","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/afe9acd57616e633d7c4a2278a3885621ba7e3e6/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/afe9acd57616e633d7c4a2278a3885621ba7e3e6/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java?ref=afe9acd57616e633d7c4a2278a3885621ba7e3e6","patch":"@@ -333,9 +333,9 @@ public OpenJPAQuery setFlushMode(FlushModeType flushMode) {\n     }\n \n     public OpenJPAQuery setHint(String key, Object value) {\n-        if (key == null || !key.startsWith(\"org.apache.openjpa.\"))\n+        if (key == null || !key.startsWith(\"openjpa.\"))\n             return this;\n-        String k = key.substring(\"org.apache.openjpa.\".length());\n+        String k = key.substring(\"openjpa.\".length());\n \n         try {\n             if (\"Subclasses\".equals(k)) {"},{"sha":"fc780bf6b286dbdb3ee80c9b14dbfc4d193392e3","filename":"openjpa-project/src/doc/manual/jpa_resources.xml","status":"modified","additions":2,"deletions":7,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/afe9acd57616e633d7c4a2278a3885621ba7e3e6/openjpa-project/src/doc/manual/jpa_resources.xml","raw_url":"https://github.com/apache/openjpa/raw/afe9acd57616e633d7c4a2278a3885621ba7e3e6/openjpa-project/src/doc/manual/jpa_resources.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/jpa_resources.xml?ref=afe9acd57616e633d7c4a2278a3885621ba7e3e6","patch":"@@ -16,18 +16,13 @@ EJB 3 JSR page</ulink>\n         </listitem>\n         <listitem>\n             <para>\n-<ulink url=\"http://java.sun.com/javaee/5/docs/api/index.html\">Locally mirrored\n+<ulink url=\"http://java.sun.com/javaee/5/docs/api/index.html\">\n javax.persistence Javadoc</ulink>\n             </para>\n         </listitem>\n         <listitem>\n             <para>\n-<ulink url=\"../apidocs/index.html\">OpenJPA API Javadoc</ulink>\n-            </para>\n-        </listitem>\n-        <listitem>\n-            <para>\n-<ulink url=\"../apidocs/index.html\">Full OpenJPA Javadoc</ulink>\n+<ulink url=\"../apidocs/index.html\">OpenJPA Javadoc</ulink>\n             </para>\n         </listitem>\n         <listitem>"},{"sha":"e809c89585f246ff9d70281930e649baf5c66402","filename":"openjpa-project/src/doc/manual/ref_guide_caching.xml","status":"modified","additions":121,"deletions":548,"changes":669,"blob_url":"https://github.com/apache/openjpa/blob/afe9acd57616e633d7c4a2278a3885621ba7e3e6/openjpa-project/src/doc/manual/ref_guide_caching.xml","raw_url":"https://github.com/apache/openjpa/raw/afe9acd57616e633d7c4a2278a3885621ba7e3e6/openjpa-project/src/doc/manual/ref_guide_caching.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_caching.xml?ref=afe9acd57616e633d7c4a2278a3885621ba7e3e6","patch":"@@ -44,21 +44,54 @@ id, and iteration over an <classname>Extent</classname>. OpenJPA's cache plugin\n accelerates three of these mechanisms. It does not provide any caching of large\n result set relations or <classname>Extent</classname> iterators. If you find\n yourself in need of higher-performance <classname>Extent</classname> iteration,\n-see <xref linkend=\"ref_guide_cache_limits_extent\"/>. <table><title>Data\n-access methods</title><tgroup cols=\"2\" align=\"left\" colsep=\"1\" rowsep=\"1\">\n-<colspec colname=\"access-method\"/><colspec colname=\"cacheable\"/>\n-<thead><row><entry colname=\"access-method\">Access method</entry>\n-<entry colname=\"cacheable\">Uses cache</entry></row></thead><tbody><row>\n-<entry colname=\"access-method\"> Standard relation traversal</entry>\n-<entry colname=\"cacheable\">Yes</entry></row><row>\n-<entry colname=\"access-method\"> Large result set relation traversal</entry>\n-<entry colname=\"cacheable\">No</entry></row><row><entry colname=\"access-method\">\n-Query</entry><entry colname=\"cacheable\">Yes</entry></row><row>\n-<entry colname=\"access-method\"> Lookups by object id</entry>\n-<entry colname=\"cacheable\">Yes</entry></row><row>\n-<entry colname=\"access-method\"> Iteration over an <classname>Extent</classname>\n-</entry><entry colname=\"cacheable\">No</entry></row></tbody></tgroup></table>\n+see <xref linkend=\"ref_guide_cache_limits_extent\"/>. \n         </para>\n+        <table>\n+            <title>\n+                Data access methods\n+            </title>\n+            <tgroup cols=\"2\" align=\"left\" colsep=\"1\" rowsep=\"1\">\n+                <colspec colname=\"access-method\"/><colspec colname=\"cacheable\"/>\n+                <thead>\n+                    <row>\n+                        <entry colname=\"access-method\">Access method</entry>\n+                        <entry colname=\"cacheable\">Uses cache</entry>\n+                    </row>\n+                </thead>\n+                <tbody>\n+                    <row>\n+                        <entry colname=\"access-method\">\n+                            Standard relation traversal\n+                        </entry>\n+                        <entry colname=\"cacheable\">\n+                            Yes\n+                        </entry>\n+                    </row>\n+                    <row>\n+                        <entry colname=\"access-method\">\n+                            Large result set relation traversal\n+                        </entry>\n+                        <entry colname=\"cacheable\">No</entry>\n+                    </row>\n+                    <row>\n+                        <entry colname=\"access-method\">Query</entry>\n+                        <entry colname=\"cacheable\">Yes</entry>\n+                    </row>\n+                    <row>\n+                        <entry colname=\"access-method\">\n+                            Lookups by object id\n+                        </entry>\n+                        <entry colname=\"cacheable\">Yes</entry>\n+                    </row>\n+                    <row>\n+                        <entry colname=\"access-method\"> \n+                            Iteration over an <classname>Extent</classname>\n+                        </entry>\n+                        <entry colname=\"cacheable\">No</entry>\n+                    </row>\n+                </tbody>\n+            </tgroup>\n+        </table>\n         <para>\n When enabled, the cache is checked before making a trip to the datastore. Data\n is stored in the cache when objects are committed and when persistent objects\n@@ -68,8 +101,7 @@ are loaded from the datastore.\n OpenJPA's data cache can in both single-JVM and multi-JVM environments.\n Multi-JVM caching is achieved through the use of the distributed event\n notification framework described in <xref linkend=\"ref_guide_event\"/>, or\n-through one of OpenJPA's integrations with third-party distributed caches (see\n-<xref linkend=\"ref_guide_datacacheintegrations\"/> ).\n+through custom integrations with a third-party distributed cache.\n         </para>\n         <para>\n The single JVM mode of operation maintains and shares a data cache across all\n@@ -105,8 +137,6 @@ set the <link linkend=\"openjpa.RemoteCommitProvider\"><literal>\n openjpa.RemoteCommitProvider</literal></link> property appropriately, or\n integrate OpenJPA with a third-party caching solution. Remote commit providers\n are described in <xref linkend=\"ref_guide_event\"/>.\n-<xref linkend=\"ref_guide_datacacheintegrations\"/> enumerates supported\n-third-party caching solutions.\n             </para>\n             <para>\n             <indexterm>\n@@ -117,16 +147,17 @@ third-party caching solutions.\n                     size\n                 </secondary>\n             </indexterm>\n-OpenJPA's default implementation maintains a least-recently-used map of object\n-ids to cache data. By default, 1000 elements are kept in cache. This can be\n+OpenJPA's default implementation maintains a map of object\n+ids to cache data. By default, 1000 elements are kept in cache. When the cache\n+overflows, random entries are evicted.  The maximum cache size can be\n adjusted by setting the <literal>CacheSize</literal> property in your plugin\n string - see below for an example. Objects that are pinned into the cache are\n-not counted when determining if the cache size exceeds the maximum.\n+not counted when determining if the cache size exceeds its maximum size.  \n             </para>\n             <para>\n Expired objects are moved to a soft reference map, so they may stick around for\n a little while longer. You can control the number of soft references OpenJPA\n-keeps with the <literal> SoftReferenceSize</literal> property. Soft references\n+keeps with the <literal>SoftReferenceSize</literal> property. Soft references\n are unlimited by default. Set to 0 to disable soft references completely.\n             </para>\n             <example id=\"ref_guide_cache_conf_size\">\n@@ -161,8 +192,7 @@ Timeout <classname>Employee</classname> objects after 10 seconds.\n <programlisting>\n @Entity\n @DataCache(timeout=10000)\n-public class Employee\n-{\n+public class Employee {\n     ...\n }\n </programlisting>\n@@ -223,56 +253,6 @@ past 3 PM on Sunday.\n <programlisting>\n true(EvictionSchedule='15,45 15 * * 1')\n </programlisting>\n-            <para>\n-            <indexterm>\n-                <primary>\n-                    caching\n-                </primary>\n-                <secondary>\n-                    named caches\n-                </secondary>\n-            </indexterm>\n-It is also possible for different persistence-capable classes to use different\n-caches. This is achieved by specifying a cache name in a\n-<link linkend=\"ref_guide_meta_ext\">metadata extension</link>.\n-            </para>\n-            <example id=\"ex_non_default_cache\">\n-                <title>\n-                    Named Data Cache Specification\n-                </title>\n-<programlisting>\n-import org.apache.openjpa.persistence.*;\n-\n-@Entity\n-@DataCache(name=\"small-cache\", timeout=10000)\n-public class Employee\n-{\n-    ...\n-}\n-</programlisting>\n-            </example>\n-            <para>\n-See the <ulink url=\"../apidocs/org/apache/openjpa/persistence/DataCache.html\">\n-<classname>org.apache.openjpa.persistence.DataCache</classname></ulink> Javadoc\n-for more information on the <classname>DataCache</classname> annotation.\n-            </para>\n-            <para>\n-The metadata above will cause instances of the <classname>Employee</classname>\n-class to be stored in a cache named <literal> small-cache</literal>. This\n-<literal>small-cache</literal> cache can be explicitly configured in the\n-<literal>openjpa.DataCache</literal> plugin string, or can be implicitly\n-defined, in which case it will take on the same default configuration properties\n-as the default cache identified in the <literal>openjpa.DataCache</literal>\n-property.\n-            </para>\n-            <example id=\"ref_guide_cache_named\">\n-                <title>\n-                    Named Data Cache Configuration\n-                </title>\n-<programlisting>\n-&lt;property name=\"openjpa.DataCache\" value=\"true, true(Name=small-cache, CacheSize=100)\"/&gt;\n-</programlisting>\n-            </example>\n         </section>\n         <section id=\"ref_guide_cache_use\">\n             <title>\n@@ -296,24 +276,11 @@ This facade has methods to pin and unpin records, evict data from the cache, and\n more.\n             </para>\n <programlisting>\n-public StoreCache getStoreCache ();\n-public StoreCache getStoreCache (String name);\n+public StoreCache getStoreCache();\n </programlisting>\n             <para>\n You obtain the <classname>StoreCache</classname> through the <methodname>\n-OpenJPAEntityManagerFactory.getStoreCache</methodname> methods. When you have\n-multiple data caches configured as in the <literal>small-cache</literal> example\n-above, the <classname> StoreCache</classname> can act as a unified facade over\n-all your caches. For every oid parameter to the <classname>StoreCache\n-</classname> methods, it determines the correct data cache for that oid's\n-corresponding persistent class, and dynamically delegates to that cache.\n-            </para>\n-            <para>\n-If you know that you want to access a certain data cache and no others, the\n-<ulink url=\"../apidocs/org/apache/openjpa/persistence/OpenJPAEntityManagerFactory.html\">\n-<methodname>OpenJPAEntityManagerFactory.getStoreCache(String name)</methodname>\n-</ulink> method returns a <classname>StoreCache</classname> interface to a\n-particular named data cache.\n+OpenJPAEntityManagerFactory.getStoreCache</methodname> method.\n             </para>\n             <example id=\"ref_guide_cache_access_jpa\">\n                 <title>\n@@ -324,18 +291,16 @@ import org.apache.openjpa.persistence.*;\n \n ...\n \n-OpenJPAEntityManagerFactory kemf = OpenJPAPersistence.cast (emf);\n-StoreCache cache = kemf.getStoreCache ();\n-...\n-StoreCache smallCache = kemf.getStoreCache (\"small-cache\");\n+OpenJPAEntityManagerFactory oemf = OpenJPAPersistence.cast(emf);\n+StoreCache cache = oemf.getStoreCache();\n ...\n </programlisting>\n             </example>\n <programlisting>\n-public void evict (Class cls, Object oid);\n-public void evictAll ();\n-public void evictAll (Class cls, Object... oids);\n-public void evictAll (Class cls, Collection oids);\n+public void evict(Class cls, Object oid);\n+public void evictAll();\n+public void evictAll(Class cls, Object... oids);\n+public void evictAll(Class cls, Collection oids);\n </programlisting>\n             <para>\n The <methodname>evict</methodname> methods tell the cache to release data. Each\n@@ -348,12 +313,12 @@ the datastore cache; otherwise the OpenJPA runtime, oblivious to the changes,\n will maintain its stale copy.\n             </para>\n <programlisting>\n-public void pin (Class cls, Object oid);\n-public void pinAll (Class cls, Object... oids);\n-public void pinAll (Class cls, Collection oids);\n-public void unpin (Class cls, Object oid);\n-public void unpinAll (Class cls, Object... oids);\n-public void unpinAll (Class cls, Collection oids);\n+public void pin(Class cls, Object oid);\n+public void pinAll(Class cls, Object... oids);\n+public void pinAll(Class cls, Collection oids);\n+public void unpin(Class cls, Object oid);\n+public void unpinAll(Class cls, Object... oids);\n+public void unpinAll(Class cls, Collection oids);\n </programlisting>\n             <para>\n Most caches are of limited size. Pinning an identity to the cache ensures that\n@@ -374,10 +339,10 @@ import org.apache.openjpa.persistence.*;\n \n ...\n \n-OpenJPAEntityManagerFactory kemf = OpenJPAPersistence.cast (emf);\n-StoreCache cache = kemf.getStoreCache ();\n-cache.pin (Magazine.class, popularMag.getId ());\n-cache.evict (Magazine.class, changedMag.getId ());\n+OpenJPAEntityManagerFactory oemf = OpenJPAPersistence.cast(emf);\n+StoreCache cache = oemf.getStoreCache();\n+cache.pin(Magazine.class, popularMag.getId());\n+cache.evict(Magazine.class, changedMag.getId());\n </programlisting>\n             </example>\n             <para>\n@@ -391,8 +356,8 @@ to the standard set of JPA runtime interfaces.\n The examples above include calls to <methodname>evict</methodname> to manually\n remove data from the data cache. Rather than evicting objects from the data\n cache directly, you can also configure OpenJPA to automatically evict objects\n-from the data cache when you use the <classname>OpenJPAEntityManager</classname>\n-'s eviction APIs.\n+from the data cache when you use the <classname>\n+OpenJPAEntityManager</classname>'s eviction APIs.\n             </para>\n             <example id=\"ref_guide_cache_pmevict\">\n                 <title>\n@@ -406,8 +371,8 @@ import org.apache.openjpa.persistence.*;\n \n ...\n \n-OpenJPAEntityManager kem = OpenJPAPersistence.cast (em);\n-kem.evict (changedMag);  // will evict from data cache also\n+OpenJPAEntityManager oem = OpenJPAPersistence.cast(em);\n+oem.evict(changedMag);  // will evict from data cache also\n </programlisting>\n             </example>\n         </section>\n@@ -460,8 +425,8 @@ import org.apache.openjpa.persistence.*;\n \n ...\n \n-OpenJPAEntityManagerFactory kemf = OpenJPAPersistence.cast (emf);\n-QueryResultCache qcache = kemf.getQueryResultCache ();\n+OpenJPAEntityManagerFactory oemf = OpenJPAPersistence.cast(emf);\n+QueryResultCache qcache = oemf.getQueryResultCache();\n </programlisting>\n             </example>\n             <para>\n@@ -498,7 +463,7 @@ There are certain situations in which the query cache is bypassed:\n                 <listitem>\n                     <para>\n Caching is not used for in-memory queries (queries in which the candidates are a\n-collection instead of a class or <classname>Extent</classname> ).\n+collection instead of a class or <classname>Extent</classname>).\n                     </para>\n                 </listitem>\n                 <listitem>\n@@ -556,9 +521,9 @@ outside of OpenJPA's control. You can also evict individual queries, or clear\n the entire cache.\n             </para>\n <programlisting>\n-public void evict (Query q);\n-public void evictAll (Class cls);\n-public void evictAll ();\n+public void evict(Query q);\n+public void evictAll(Class cls);\n+public void evictAll();\n </programlisting>\n             <para>\n For JPA queries with parameters, set the desired parameter values into the\n@@ -574,17 +539,17 @@ import org.apache.openjpa.persistence.*;\n \n ...\n \n-OpenJPAEntityManagerFactory kemf = OpenJPAPersistence.cast (emf);\n-QueryResultCache qcache = kemf.getQueryResultCache ();\n+OpenJPAEntityManagerFactory oemf = OpenJPAPersistence.cast(emf);\n+QueryResultCache qcache = oemf.getQueryResultCache();\n \n // evict all queries that can be affected by changes to Magazines\n-qcache.evictAll (Magazine.class);\n+qcache.evictAll(Magazine.class);\n \n // evict an individual query with parameters\n-EntityManager em = emf.createEntityManager ();\n-Query q = em.createQuery (...).\n-    setParameter (0, paramVal0).\n-    setParameter (1, paramVal1);\n+EntityManager em = emf.createEntityManager();\n+Query q = em.createQuery(...).\n+    setParameter(0, paramVal0).\n+    setParameter(1, paramVal1);\n qcache.evict (q);\n </programlisting>\n             </example>\n@@ -597,13 +562,13 @@ Tangosol cache implementation, it is not necessary to do this in every JVM\n the coherent cache.\n             </para>\n             <para>\n-Queries can also be pinned and unpinned through the <classname>QueryResultCache\n-</classname>. The semantics of these operations are the same as pinning and\n-unpinning data from the data cache.\n+Queries can also be pinned and unpinned through the <classname>\n+QueryResultCache</classname>. The semantics of these operations are the same \n+as pinning and unpinning data from the data cache.\n             </para>\n <programlisting>\n-public void pin (Query q);\n-public void unpin (Query q);\n+public void pin(Query q);\n+public void unpin(Query q);\n </programlisting>\n             <para>\n For JPA queries with parameters, set the desired parameter values into the\n@@ -622,18 +587,18 @@ import org.apache.openjpa.persistence.*;\n \n ...\n \n-OpenJPAEntityManagerFactory kemf = OpenJPAPersistence.cast (emf);\n-QueryResultCache qcache = kemf.getQueryResultCache ();\n-EntityManager em = emf.createEntityManager ();\n+OpenJPAEntityManagerFactory oemf = OpenJPAPersistence.cast(emf);\n+QueryResultCache qcache = oemf.getQueryResultCache();\n+EntityManager em = emf.createEntityManager();\n \n-Query pinQuery = em.createQuery (...).\n-    setParameter (0, paramVal0).\n-    setParameter (1, paramVal1);\n-qcache.pin (pinQuery);\n-Query unpinQuery = em.createQuery (...).\n-    setParameter (0, paramVal0).\n-    setParameter (1, paramVal1);\n-qcache.unpin (unpinQuery);\n+Query pinQuery = em.createQuery(...).\n+    setParameter(0, paramVal0).\n+    setParameter(1, paramVal1);\n+qcache.pin(pinQuery);\n+Query unpinQuery = em.createQuery(...).\n+    setParameter(0, paramVal0).\n+    setParameter(1, paramVal1);\n+qcache.unpin(unpinQuery);\n </programlisting>\n             </example>\n             <para>\n@@ -642,8 +607,8 @@ when cache flushing occurs. However, pinned results will be removed from the\n cache if an event occurs that invalidates the results.\n             </para>\n             <para>\n-You can disable caching on a per- <classname>EntityManager</classname> or per-\n-<classname>Query</classname> basis:\n+You can disable caching on a per-<classname>EntityManager</classname> or \n+per-<classname>Query</classname> basis:\n             </para>\n             <example id=\"ref_guide_cache_query_disable\">\n                 <title>\n@@ -655,281 +620,15 @@ import org.apache.openjpa.persistence.*;\n ...\n \n // temporarily disable query caching for all queries created from em\n-OpenJPAEntityManager kem = OpenJPAPersistence.cast (em);\n-kem.getFetchPlan ().setQueryResultCache (false);\n-\n-// re-enable caching for a particular query\n-OpenJPAQuery kq = kem.createQuery (...);\n-kq.getFetchPlan ().setQueryResultCache (true);\n-</programlisting>\n-<programlisting>\n-import org.apache.openjpa.jdo.*;\n-\n-...\n-\n-// temporarily disable query caching for all queries created from pm\n-PersistenceManager pm = ...;\n-OpenJPAFetchPlan fetch = (OpenJPAFetchPlan) pm.getFetchPlan ();\n-fetch.setQueryResultCache (false);\n+OpenJPAEntityManager oem = OpenJPAPersistence.cast(em);\n+oem.getFetchPlan ().setQueryResultCache(false);\n \n // re-enable caching for a particular query\n-Query q = pm.newQuery (...);\n-OpenJPAFetchPlan fetch = OpenJPAJDOHelper.cast (pm.getFetchPlan ());\n-fetch.setQueryResultCache (true);\n-</programlisting>\n-            </example>\n-        </section>\n-        <section id=\"ref_guide_cache_concurrent\">\n-            <title>\n-                The Concurrent Data Cache\n-            </title>\n-            <para>\n-The <emphasis>concurrent</emphasis> is a new data cache plugin for OpenJPA. It\n-has not been as thoroughly tested as OpenJPA's standard data cache. The\n-concurrent cache can, however, offer considerably greater performance and\n-scalability characteristics compared to the standard cache when the following\n-conditions are met:\n-            </para>\n-            <orderedlist>\n-                <listitem>\n-                    <para>\n-The cache is big enough to hold all of your commonly-used data.\n-                    </para>\n-                </listitem>\n-                <listitem>\n-                    <para>\n-Your application is heavily concurrent.\n-                    </para>\n-                </listitem>\n-            </orderedlist>\n-            <para>\n-Additionally, this cache does not fully index its contents by class, but rather\n-just keeps track of which clasess are in the cache. It services requests to drop\n-given classes by checking to see if any instances of that class might be in the\n-cache, and then clearing the entire cache. This inefficiency can easily be\n-worked around with careful cache partitioning.\n-            </para>\n-            <para>\n-To use the concurrent data cache instead of the standard data cache, set your\n-<literal>openjpa.DataCache</literal> property to <literal>concurrent</literal>\n-instead of <literal>true</literal>. Or, you can mix concurrent and standard\n-caches in a set of named caches.\n-            </para>\n-            <para>\n-The concurrent cache has the following configuration parameters:\n-            </para>\n-            <orderedlist>\n-                <listitem>\n-                    <para>\n-<literal>CacheSize</literal>: The maximum number of objects that this cache\n-will hold. The default is 1000 objects. This setting differs from the setting\n-for the default data cache in that instances that are pinned into cache do count\n-towards this limit.\n-                    </para>\n-                </listitem>\n-                <listitem>\n-                    <para>\n-<literal>Name</literal>: The unique name of the cache.\n-                    </para>\n-                </listitem>\n-                <listitem>\n-                    <para>\n-<literal>EvictionSchedule</literal>: A cron-style eviction schedule that this\n-cache should follow.\n-                    </para>\n-                </listitem>\n-                <listitem>\n-                    <para>\n-<literal>LRUThresholdRatio</literal>: The ratio above which this implementation\n-should start applying its least-recently-used algorithm to prepare for eviction\n-should the need arise. Default is 80%. Values should be integers between 1 and\n-100.\n-                    </para>\n-                </listitem>\n-            </orderedlist>\n-            <example id=\"ref_guide_cache_concurrent_conf\">\n-                <title>\n-                    Concurrent Data Cache Configuration\n-                </title>\n-                <para>\n-The following configuration uses the standard OpenJPA cache as the primary cache\n-and a named concurrent cache as a secondary cache. Various classes can be\n-configured to use this secondary cache in their metadata.\n-                </para>\n-<programlisting>\n-&lt;property name=\"openjpa.DataCache\" value=\"true, concurrent(Name=secondary)\"/&gt;\n+OpenJPAQuery oq = oem.createQuery(...);\n+oq.getFetchPlan().setQueryResultCache(true);\n </programlisting>\n             </example>\n         </section>\n-        <section id=\"ref_guide_datacacheintegrations\">\n-            <title>\n-                Third-Party Integrations\n-            </title>\n-            <para>\n-OpenJPA includes built-in integrations with Tangosol Coherence and GemStone\n-GemFire caching products.\n-            </para>\n-            <section id=\"ref_guide_cache_tangosol\">\n-                <title>\n-                    Tangosol Integration\n-                </title>\n-                <indexterm zone=\"ref_guide_cache_tangosol\">\n-                    <primary>\n-                        caching\n-                    </primary>\n-                    <secondary>\n-                        tangosol integration\n-                    </secondary>\n-                </indexterm>\n-                <para>\n-The OpenJPA data cache can integrate with Tangosol's Coherence caching system.\n-To use Tangosol integration, set the <link linkend=\"openjpa.DataCache\">\n-<literal>openjpa.DataCache</literal></link> configuration property to <literal>\n-tangosol</literal>, with the appropriate plugin properties for your Tangosol\n-setup. For example:\n-                </para>\n-                <example id=\"ref_guide_cache_tangosol_conf\">\n-                    <title>\n-                        Tangosol Cache Configuration\n-                    </title>\n-<programlisting>\n-&lt;property name=\"openjpa.DataCache\" value=\"tangosol(TangosolCacheName=openjpa)\"/&gt;\n-</programlisting>\n-                </example>\n-                <para>\n-The Tangosol cache understands the following properties:\n-                </para>\n-                <itemizedlist>\n-                    <listitem>\n-                        <para>\n-<literal>TangosolCacheName</literal>: The name of the Tangosol Coherence cache\n-to use. Defaults to <literal>openjpa</literal>.\n-                        </para>\n-                    </listitem>\n-                    <listitem>\n-                        <para>\n-<literal>TangosolCacheType</literal>: The type of Tangosol Coherence cache to\n-use (optional). Valid values are <literal>named</literal>, <literal>distributed\n-</literal>, or <literal>replicated</literal>. Defaults to <literal> named\n-</literal>, which means that the cache is looked up via the <literal>\n-com.tangosol.net.CacheFactory.getCache(String)</literal> method. This method\n-looks up the cached by name as defined in the Coherence configuration.\n-                        </para>\n-                        <note>\n-                            <para>\n-As of this writing, it is not possible to use a Tangosol Coherence 1.2.2\n-distributed cache type with Apple's OS X 1.3.1 JVM. Use their replicated cache\n-instead.\n-                            </para>\n-                        </note>\n-                    </listitem>\n-                    <listitem>\n-                        <para>\n-<literal>ClearOnClose</literal>: Whether the Tangosol named cache should be\n-completely cleared when the <classname>EntityManagerFactory</classname>\n-is closed. Defaults to <literal>false</literal>.\n-                        </para>\n-                    </listitem>\n-                </itemizedlist>\n-                <para>\n-The OpenJPA query cache can also integrate with Tangosol's Coherence caching\n-system. To use Tangosol query cache integration, set the\n-<link linkend=\"openjpa.QueryCache\"><literal>openjpa.QueryCache</literal></link>\n-configuration property to <literal>tangosol</literal>, with the appropriate\n-plugin properties for your Tangosol setup. For example:\n-                </para>\n-                <example id=\"ref_guide_cache_tangosol_query_conf\">\n-                    <title>\n-                        Tangosol Query Cache Configuration\n-                    </title>\n-<programlisting>\n-&lt;property name=\"openjpa.QueryCache\" value=\"tangosol(TangosolCacheName=openjpa-query)\"/&gt;\n-</programlisting>\n-                </example>\n-                <para>\n-The Tangosol query cache understands the same properties as the data cache, with\n-a default Tangosol cache name of <literal>openjpa-query</literal>.\n-                </para>\n-            </section>\n-            <section id=\"ref_guide_cache_gemfire\">\n-                <title>\n-                    GemStone GemFire Integration\n-                </title>\n-                <para>\n-The OpenJPA data cache can integrate with GemStone's GemFire v3.5.1 caching\n-system. later. To use GemFire in OpenJPA you will need to change your <literal>\n-gemfire.properties</literal> to have the property <literal>\n-enable-shared-memory=true</literal>. You will also need to add both OpenJPA and\n-GemFire to your classpath and then start a GemFire server.\n-                </para>\n-<programlisting>\n-prompt&gt; gemfire start\n-</programlisting>\n-                <para>\n-By default, the GemFire data cache will use a GemFire region of <literal>\n-root/openjpa-data-cache</literal> and the GemFire query cache will use a region\n-of <literal>root/openjpa-query-cache</literal>. This can be changed be setting\n-the optional property <literal>GemFireCacheName</literal>.\n-                </para>\n-                <example id=\"ref_guide_datacacheintegrations_gemfire_conf\">\n-                    <title>\n-                        GemFire Cache Configuration\n-                    </title>\n-                    <para>\n-<filename>persistence.xml</filename>:\n-                    </para>\n-<programlisting>\n-&lt;property name=\"openjpa.DataCache\" \n-    value=\"gemfire(GemFireCacheName=/root/my-openjpa-data-cache)\"/&gt;\n-&lt;property name=\"openjpa.QueryCache\" \n-    value=\"gemfire(GemFireCacheName=/root/my-openjpa-query-cache)\"/&gt;\n-</programlisting>\n-                    <para>\n-GemFire <filename>cache.xml</filename>:\n-                    </para>\n-<programlisting>\n-...\n-    &lt;shared-root-region name=\"root\"&gt;\n-        &lt;region-attributes&gt;\n-        ...\n-        &lt;/region-attributes&gt;\n-        &lt;region name=\"My-openjpa-data-cache\"&gt;\n-            &lt;region-attributes&gt;\n-            &lt;/region-attributes&gt;\n-        &lt;/region&gt;\n-        &lt;region name=\"My-openjpa-query-cache\"&gt;\n-            &lt;region-attributes&gt;\n-            &lt;/region-attributes&gt;\n-        &lt;/region&gt;\n-    &lt;/shared-root-region&gt;\n-    ...\n-</programlisting>\n-                </example>\n-                <para>\n-If you set GemFire for both <literal>openjpa.DataCache</literal> and <literal>\n-openjpa.QueryCache</literal> you aren't required to specify a <literal>\n-openjpa.RemoteCommitProvider</literal> unless you are registering your own\n-<classname> RemoteCommitListener</classname> s.\n-                </para>\n-                <para>\n-Some notes regarding using GemFire with OpenJPA:\n-                </para>\n-                <itemizedlist>\n-                    <listitem>\n-                        <para>\n-Custom field types mapped with externalizers or custom mappings must be\n-serializable.\n-                        </para>\n-                    </listitem>\n-                    <listitem>\n-                        <para>\n-The <link linkend=\"openjpa.DynamicDataStructs\"><literal>\n-openjpa.DynamicDataStructs</literal></link> option is not supported.\n-                        </para>\n-                    </listitem>\n-                </itemizedlist>\n-            </section>\n-        </section>\n         <section id=\"ref_guide_cache_extension\">\n             <title>\n                 Cache Extension\n@@ -965,8 +664,8 @@ mechanism, extend <classname>org.apache.openjpa.datacache.AbstractDataCache\n </classname> directly. If you want to implement a distributed cache that uses an\n unsupported method for communications, create an implementation of <classname>\n org.apache.openjpa.event.RemoteCommitProvider</classname>. This process is\n-described in greater detail in <xref linkend=\"ref_guide_event_customization\"/>\n-.\n+described in greater detail in \n+<xref linkend=\"ref_guide_event_customization\"/>.\n             </para>\n             <para>\n The query cache is just as easy to extend. Add functionality by extending the\n@@ -985,7 +684,7 @@ directly.\n                 <listitem>\n                     <para>\n The default cache implementations <emphasis>do not</emphasis> automatically\n-refresh objects in other <classname> EntityManager</classname>s when the cache\n+refresh objects in other <classname>EntityManager</classname>s when the cache\n is updated or invalidated. This behavior would not be compliant with the JPA\n specification.\n                     </para>\n@@ -995,7 +694,7 @@ specification.\n Invoking <methodname>OpenJPAEntityManager.evict</methodname><emphasis>does not\n </emphasis> result in the corresponding data being dropped from the data cache,\n unless you have set the proper configuration options as explained above (see\n-<xref linkend=\"ref_guide_cache_pmevict\"/> ). Other methods related to the\n+<xref linkend=\"ref_guide_cache_pmevict\"/>). Other methods related to the\n <classname>EntityManager</classname> cache also do not effect the data cache.\n                     </para>\n                     <para>\n@@ -1073,146 +772,20 @@ import org.apache.openjpa.persistence.*;\n \n ...\n \n-OpenJPAEntityManager kem = OpenJPAPersistence.cast (em);\n-Extent extent = kem.getExtent (Magazine.class, false);\n+OpenJPAEntityManager oem = OpenJPAPersistence.cast(em);\n+Extent extent = oem.getExtent(Magazine.class, false);\n \n // This iterator does not benefit from caching...\n-Iterator uncachedIterator = extent.iterator ();\n+Iterator uncachedIterator = extent.iterator();\n \n // ... but this one does.\n-OpenJPAQuery extentQuery = kem.createQuery (...);\n-extentQuery.setSubclasses (false);\n-Iterator cachedIterator = extentQuery.getResultList ().iterator ();\n+OpenJPAQuery extentQuery = oem.createQuery(...);\n+extentQuery.setSubclasses(false);\n+Iterator cachedIterator = extentQuery.getResultList().iterator();\n </programlisting>\n                     </example>\n                 </listitem>\n             </itemizedlist>\n         </section>\n     </section>\n-    <section id=\"ref_guide_cache_querycomp\">\n-        <title>\n-            Query Compilation Cache\n-        </title>\n-        <indexterm zone=\"ref_guide_cache_querycomp\">\n-            <primary>\n-                caching\n-            </primary>\n-            <secondary>\n-                query compilation cache\n-            </secondary>\n-        </indexterm>\n-        <para>\n-The query compilation cache is a <classname>Map</classname> used to cache parsed\n-query strings. As a result, most queries are only parsed once in OpenJPA, and\n-cached thereafter. You can control the compilation cache through the\n-<link linkend=\"openjpa.QueryCompilationCache\"><literal>\n-openjpa.QueryCompilationCache</literal></link> configuration property. This\n-property accepts a plugin string (see <xref linkend=\"ref_guide_conf_plugins\"/>\n-) describing the <classname>Map</classname> used to associate query\n-strings and their parsed form. This property accepts the following aliases:\n-        </para>\n-        <table>\n-            <title>\n-                Pre-defined aliases\n-            </title>\n-            <tgroup cols=\"2\" align=\"left\" colsep=\"1\" rowsep=\"1\">\n-                <colspec colname=\"alias\"/>\n-                \n-                <colspec colname=\"value\"/>\n-                \n-                <colspec colname=\"notes\"/>\n-                \n-                <thead>\n-                    <row>\n-                        <entry colname=\"alias\">\n-                            Alias\n-                        </entry>\n-                        <entry colname=\"value\">\n-                            Value\n-                        </entry>\n-                        <entry colname=\"notes\">\n-                            Notes\n-                        </entry>\n-                    </row>\n-                </thead>\n-                <tbody>\n-                    <row>\n-                        <entry colname=\"alias\">\n-                            <literal>\n-                                true\n-                            </literal>\n-                        </entry>\n-                        <entry colname=\"value\">\n-                            <literal>\n-                                openjpa.util.CacheMap\n-                            </literal>\n-                        </entry>\n-                        <entry colname=\"notes\">\n-                            \n-              The default option.  Uses a \n-              \n-                            <ulink url=\"../apidocs/org/apache/openjpa/util/CacheMap.html\">\n-                                <literal>\n-                                    CacheMap\n-                                </literal>\n-                            </ulink>\n-                             to store \n-              compilation data.  \n-                            <literal>\n-                                CacheMap\n-                            </literal>\n-                             uses\n-              a least-recently-used strategy for a fixed number \n-              of cache entries, and an optional soft reference \n-              map for entries that are moved out of the LRU \n-              space. So, for applications that have a \n-              monotonically increasing number of distinct queries,\n-              this option can be used to ensure that a fixed \n-              amount of memory is used by the cache.\n-            \n-                        </entry>\n-                    </row>\n-                    <row>\n-                        <entry colname=\"alias\">\n-                            <literal>\n-                                all\n-                            </literal>\n-                        </entry>\n-                        <entry colname=\"value\">\n-                            <literal>\n-                                java.util.HashMap\n-                            </literal>\n-                        </entry>\n-                        <entry colname=\"notes\">\n-                            \n-              This is the fastest option, but compilation data is\n-              never dropped from the cache, so if you use a large \n-              number of dynamic queries, this option may result in\n-              ever-increasing memory usage. Note that if your \n-              queries only differ in the values of the parameters,\n-              this should not be an issue.\n-            \n-                        </entry>\n-                    </row>\n-                    <row>\n-                        <entry colname=\"alias\">\n-                            <literal>\n-                                false\n-                            </literal>\n-                        </entry>\n-                        <entry colname=\"value\">\n-                            <emphasis>\n-                                none\n-                            </emphasis>\n-                        </entry>\n-                        <entry colname=\"notes\">\n-                            \n-              Disables the compilation cache.\n-            \n-                        </entry>\n-                    </row>\n-                </tbody>\n-            </tgroup>\n-        </table>\n-    </section>\n </chapter>"},{"sha":"4ad6cf5936cfd08e05f1a213d72f1466254d086f","filename":"openjpa-project/src/doc/manual/ref_guide_deploy.xml","status":"modified","additions":67,"deletions":99,"changes":166,"blob_url":"https://github.com/apache/openjpa/blob/afe9acd57616e633d7c4a2278a3885621ba7e3e6/openjpa-project/src/doc/manual/ref_guide_deploy.xml","raw_url":"https://github.com/apache/openjpa/raw/afe9acd57616e633d7c4a2278a3885621ba7e3e6/openjpa-project/src/doc/manual/ref_guide_deploy.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_deploy.xml?ref=afe9acd57616e633d7c4a2278a3885621ba7e3e6","patch":"@@ -94,141 +94,103 @@ entity managers into your session beans using the <literal>PersistenceContext\n         </indexterm>\n \t\t<para>\n OpenJPA <classname>EntityManager</classname>s have the ability to automatically\n-synchronize their transactions with an external transaction manager.  \n-###\n-If you \n-deploy via <link linkend=\"ref_guide_deploy_inject\"><classname>EntityManager\n-</classname> injection</link> as described above, this synchronization is\n-typically automatic.   Whether \n+synchronize their transactions with an external transaction manager.  Whether \n or not <classname>EntityManager</classname>s from a given <classname>\n EntityManagerFactory</classname> exhibit this behavior by default depends on \n-the <link linkend=\"kodo.TransactionMode\">\n-\t\t<literal>kodo.TransactionMode</literal></link> configuration property.\n-\t\tThe property can take the following values:\n-\t\t</para>\n-\t\t<para condition=\"jdo_notcombo\">\n-\t\tKodo <classname>PersistenceManager</classname>s have the ability \n-\t\tto automatically synchronize their transactions with an external \n-\t\ttransaction manager.  Whether or not <classname>\n-\t\tPersistenceManager</classname>s from a given \n-\t\t<classname>PersistenceManagerFactory</classname> exhibit this behavior \n-\t\tby default depends on the <link linkend=\"kodo.TransactionMode\">\n-\t\t<literal>kodo.TransactionMode</literal></link> configuration property.\n-\t\tThe property can take the following values:\n-\t\t</para>\n-\t\t<para condition=\"combo\">\n-\t\tKodo <classname>EntityManager</classname>s and <classname>\n-\t\tPersistenceManager</classname>s have the ability \n-\t\tto automatically synchronize their transactions with an external \n-\t\ttransaction manager.  Whether or not <classname>\n-\t\tEntityManager</classname>s and <classname>\n-\t\tPersistenceManager</classname>s from a given factory exhibit this \n-\t\tbehavior by default depends on the <link linkend=\"kodo.TransactionMode\">\n-\t\t<literal>kodo.TransactionMode</literal></link> configuration property.\n-\t\tThe property can take the following values:\n-\t\t</para>\n+the transaction type you set for the factory's persistence unit in\n+your <filename>persistence.xml</filename> file.  OpenJPA uses the given\n+transaction type internally to set the\n+<link linkend=\"openjpa.TransactionMode\"><literal>openjpa.TransactionMode\n+</literal></link> configuration property.  This property accepts the following\n+modes:\n+        </para>\n \t\t<itemizedlist> \n \t\t\t<listitem>\n \t\t\t\t<para>\n-\t\t\t\t<literal>local</literal>: Perform transaction operations\n-\t\t\t\tlocally.\n+<literal>local</literal>: Perform transaction operations locally.\n \t\t\t\t</para>\n \t\t\t</listitem>\n \t\t\t<listitem>\n \t\t\t\t<para>\n-\t\t\t\t<literal>managed</literal>: Integrate with the application\n-\t\t\t\tserver's managed global transactions.  \n+<literal>managed</literal>: Integrate with the application server's managed \n+global transactions.  \n \t\t\t\t</para>\n \t\t\t</listitem>\n \t\t</itemizedlist> \n-\t\t<para condition=\"ejb\">\n-\t\tYou can override the global transaction mode setting when you obtain an\n-\t\t<classname>EntityManager</classname> using the \n-\t\t<ulink url=\"&api-dir;/kodo/persistence/KodoEntityManagerFactory.html\">\n-\t\t<classname>KodoEntityManagerFactory</classname></ulink>'s\n-\t\t<methodname>createEntityManager(PersistenceContextType ctype, boolean managed, int connRetainMode)\n-\t\t</methodname> method.\n-\t\t</para>\n-\t\t<para condition=\"jdo\">\n-\t\tYou can override the global transaction mode setting when you obtain a \n-\t\t<classname>PersistenceManager</classname> using the \n-\t\t<ulink url=\"&api-dir;/kodo/jdo/KodoPersistenceManagerFactory.html\">\n-\t\t<classname>KodoPersistenceManagerFactory</classname></ulink>'s\n-\t\t<methodname>getPersistenceManager(boolean managed, int connRetainMode)\n-\t\t</methodname> method.\n+        <para>\n+You can override the global transaction mode setting when you obtain an\n+<classname>EntityManager</classname> using the \n+<ulink url=\"http://java.sun.com/javaee/5/docs/api/javax/persistence/EntityManagerFactory.html\">\n+<classname>EntityManagerFactory</classname></ulink>'s\n+<methodname>createEntityManager(Map props)</methodname> method.  Simply set the\n+<literal>openjpa.TransactionMode</literal> key of the given <classname>Map\n+</classname> to the desired value.  \n \t\t</para>\n+        <note>\n+            <para>\n+You can also override the <literal>openjpa.ConnectionUserName</literal>,\n+<literal>openjpa.ConnectionPassword</literal>, and <literal>\n+openjpa.ConnectionRetainMode</literal> settings using the given <classname>\n+Map</classname>. \n+            </para>\n+        </note>\n \t\t<para>\n-\t\t<indexterm><primary>ManagedRuntime</primary></indexterm>\n-\t\tIn order to use global transactions, Kodo must be able to access\n-\t\tthe application server's <classname>javax.transaction.TransactionManager\n-\t\t</classname>.  Kodo can automatically discover the transaction\n-\t\tmanager for most major application servers.  Occasionally, however, \n-\t\tyou might have to point Kodo to the transaction manager for an \n-\t\tunrecognized or non-standard application server setup.  This is \n-\t\taccomplished through the <link linkend=\"kodo.ManagedRuntime\"><literal>\n-\t\tkodo.ManagedRuntime</literal></link> configuration property.  This\n-\t\tproperty describes a \n-\t\t<ulink url=\"&javadoc-dir;/kodo/ee/ManagedRuntime.html\"><classname>\n-\t\tkodo.ee.ManagedRuntime</classname></ulink> implementation to use\n-\t\tfor transaction manager discovery.  You can specify your own \n-\t\timplementation, or use one of the built-ins:\n+<indexterm><primary>ManagedRuntime</primary></indexterm>\n+In order to use global transactions, OpenJPA must be able to access the \n+application server's <classname>\n+javax.transaction.TransactionManager</classname>.  OpenJPA can automatically \n+discover the transaction manager for most major application servers.  \n+Occasionally, however, you might have to point OpenJPA to the transaction \n+manager for an unrecognized or non-standard application server setup.  This is \n+accomplished through the <link linkend=\"openjpa.ManagedRuntime\"><literal>\n+openjpa.ManagedRuntime</literal></link> configuration property.  This\n+property describes an \n+<ulink url=\"../apidocs/org/apache/openjpa/ee/ManagedRuntime.html\"><classname>\n+org.apache.openjpa.ee.ManagedRuntime</classname></ulink> implementation to use\n+for transaction manager discovery.  You can specify your own implementation, \n+or use one of the built-ins:\n \t\t</para>\n \t\t<itemizedlist>\n \t\t\t<listitem>\n \t\t\t\t<para>\n-\t\t\t\t<literal>auto</literal>: This is the default.  It is an alias \n-\t\t\t\tfor the\n-\t\t\t\t<ulink url=\"&javadoc-dir;/kodo/ee/AutomaticManagedRuntime.html\">\n-\t\t\t\t<classname>kodo.ee.AutomaticManagedRuntime</classname></ulink>\n-\t\t\t\tclass.  This managed runtime is able to automatically integrate\n-\t\t\t\twith several common application servers.\n+<literal>auto</literal>: This is the default.  It is an alias for the\n+<ulink url=\"../apidocs/org/apache/openjpa/ee/AutomaticManagedRuntime.html\">\n+<classname>org.apache.openjpa.ee.AutomaticManagedRuntime</classname></ulink>\n+class.  This managed runtime is able to automatically integrate with several \n+common application servers.\n \t\t\t\t</para>\n \t\t\t</listitem>\n \t\t\t<listitem>\n \t\t\t\t<para>\n-\t\t\t\t<literal>invocation</literal>: An alias for the\n-\t\t\t\t<ulink url=\"&javadoc-dir;/kodo/ee/InvocationManagedRuntime.html\">\n-\t\t\t\t<classname>kodo.ee.InvocationManagedRuntime</classname></ulink>\n-\t\t\t\tclass.  You can configure this runtime to invoke any static\n-\t\t\t\tmethod in order to obtain the appserver's transaction manager.\n+<literal>invocation</literal>: An alias for the \n+<ulink url=\"../apidocs/org/apache/openjpa/ee/InvocationManagedRuntime.html\">\n+<classname>org.apache.openjpa.ee.InvocationManagedRuntime</classname></ulink>\n+class.  You can configure this runtime to invoke any static\n+method in order to obtain the appserver's transaction manager.\n \t\t\t\t</para>\n \t\t\t</listitem>\n \t\t\t<listitem>\n \t\t\t\t<para>\n-\t\t\t\t<literal>jndi</literal>: An alias for the\n-\t\t\t\t<ulink url=\"&javadoc-dir;/kodo/ee/JNDIManagedRuntime.html\">\n-\t\t\t\t<classname>kodo.ee.JNDIManagedRuntime</classname></ulink>\n-\t\t\t\tclass.  You can configure this runtime to look up the\n-\t\t\t\ttransaction manager at any JNDI location.\n+<literal>jndi</literal>: An alias for the \n+<ulink url=\"../apidocs/org/apache/openjpa/ee/JNDIManagedRuntime.html\">\n+<classname>org.apache.openjpa.ee.JNDIManagedRuntime</classname></ulink>\n+class.  You can configure this runtime to look up the transaction manager at \n+any JNDI location.\n \t\t\t\t</para>\n \t\t\t</listitem>\n \t\t</itemizedlist>\n \t\t<para>\n-\t\tSee the Javadoc for of each class for details on the bean properties \n-\t\tyou can pass to these plugins in your configuration string.  \n+See the Javadoc for of each class for details on the bean properties \n+you can pass to these plugins in your configuration string.  \n \t\t</para>\n-\t\t&feature-enterprise;\n \t\t<example id=\"ref_guide_enterprise_transex\">\n \t\t\t<title>Configuring Transaction Manager Integration</title>\n-\t\t\t<para condition=\"combo\">JPA XML format:</para>\n-<programlisting condition=\"ejb\">\n-<![CDATA[<property name=\"kodo.TransactionMode\" value=\"managed\"/>\n-<property name=\"kodo.ManagedRuntime\" value=\"jndi(TransactionManagerName=java:/TransactionManager)\"/>]]>\n-</programlisting>\n-\t\t\t<para condition=\"combo\">JDO properties format:</para>\n-<programlisting condition=\"jdo\">\n-kodo.TransactionMode: managed\n-kodo.ManagedRuntime: jndi(TransactionManagerName=java:/TransactionManager)\n+<programlisting>\n+<![CDATA[<property name=\"openjpa.TransactionMode\" value=\"managed\"/>\n+<property name=\"openjpa.ManagedRuntime\" value=\"jndi(TransactionManagerName=java:/TransactionManager)\"/>]]>\n </programlisting>\n \t\t</example>\n-\t\t<para>\n-\t\tNote that even when Kodo is using managed transaction, you can control\n-\t\ttransactions through the specification local transaction APIs if you\n-\t\twish.  Kodo will propagate your transaction calls to the global\n-\t\ttransaction.\n-\t\t</para>\n \t</section>\n-\n     <section id=\"ref_guide_enterprise_xa\">\n         <title>\n             XA Transactions\n@@ -315,6 +277,12 @@ Given these components, setting up OpenJPA to participate in distributed\n transactions is a simple two-step process:\n             </para>\n             <orderedlist>\n+\t\t\t\t<listitem>\n+\t\t\t\t\t<para>\n+Integrate OpenJPA with your application server's transaction manager, as \n+detailed in <xref linkend=\"ref_guide_enterprise_trans\"/> above.\n+\t\t\t\t\t</para>\n+\t\t\t\t</listitem>\n                 <listitem>\n                     <para>\n Point OpenJPA at an enlisted <classname>XADataSource</classname>, and configure"},{"sha":"18cd6a0483ecaffa58f7ab3adacbf01f0cd39806","filename":"openjpa-project/src/doc/manual/ref_guide_integration.xml","status":"modified","additions":24,"deletions":33,"changes":57,"blob_url":"https://github.com/apache/openjpa/blob/afe9acd57616e633d7c4a2278a3885621ba7e3e6/openjpa-project/src/doc/manual/ref_guide_integration.xml","raw_url":"https://github.com/apache/openjpa/raw/afe9acd57616e633d7c4a2278a3885621ba7e3e6/openjpa-project/src/doc/manual/ref_guide_integration.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_integration.xml?ref=afe9acd57616e633d7c4a2278a3885621ba7e3e6","patch":"@@ -112,29 +112,27 @@ loaded relative to the current CLASSPATH.\n             </para>\n             <example id=\"ref_guide_integration_props\">\n                 <title>\n-                    Using the Properties Attribute of the &lt;config&gt; \n-        Tag\n+                    Using the Properties Attribute of the &lt;config&gt; Tag\n                 </title>\n <programlisting>\n &lt;mappingtool&gt;\n   &lt;fileset dir=\"${basedir}\"&gt;\n     &lt;include name=\"**/featureSelection/*.java\"/&gt;\n   &lt;/fileset&gt;\n-  &lt;config properties=\"openjpa-dev.properties\"/&gt;\n+  &lt;config properties=\"openjpa-dev.xml\"/&gt;\n &lt;/mappingtool&gt;\n </programlisting>\n             </example>\n             <example id=\"ref_guide_integration_propsfile\">\n                 <title>\n-                    Using the PropertiesFile Attribute of the &lt;config&gt; \n-        Tag\n+                    Using the PropertiesFile Attribute of the &lt;config&gt; Tag\n                 </title>\n <programlisting>\n &lt;mappingtool&gt;\n   &lt;fileset dir=\"${basedir}\"&gt;\n     &lt;include name=\"**/featureSelection/*.java\"/&gt;\n   &lt;/fileset&gt;\n-  &lt;config propertiesFile=\"../conf/openjpa-dev.properties\"/&gt;\n+  &lt;config propertiesFile=\"../conf/openjpa-dev.xml\"/&gt;\n &lt;/mappingtool&gt;\n </programlisting>\n             </example>\n@@ -209,15 +207,17 @@ formatting attributes.\n             <para>\n The enhancer task allows you to invoke the OpenJPA enhancer directly from within\n the Ant build process. The task's parameters correspond exactly to the long\n-versions of the command-line arguments to <link linkend=\"ref_guide_pc_enhance\">\n-<literal>openjpac</literal></link>.\n+versions of the command-line arguments to the \n+<link linkend=\"ref_guide_pc_enhance\"><classname>\n+org.apache.openjpa.enhance.PCEnhancer</classname></link>.\n             </para>\n             <para>\n The enhancer task accepts a nested <literal>fileset</literal> tag to specify the\n files that should be processed. You can specify <filename>.java</filename> or\n <filename>.class</filename> files. If you do not specify any files, the task\n-will run on the classes listed in your <link linkend=\"openjpa.MetaDataFactory\">\n-<literal> openjpa.MetaDataFactory</literal></link> property.\n+will run on the classes listed in your <filename>persistence.xml</filename> or\n+<link linkend=\"openjpa.MetaDataFactory\"><literal>\n+openjpa.MetaDataFactory</literal></link> property.\n             </para>\n             <para>\n Following is an example of using the enhancer task in a <filename>build.xml\n@@ -266,17 +266,17 @@ Following is an example of using the enhancer task in a <filename>build.xml\n             <para>\n The application identity tool task allows you to invoke the application identity\n tool directly from within the Ant build process. The task's parameters\n-correspond exactly to the long versions of the command-line arguments to\n-<link linkend=\"ref_guide_pc_appid_appidtool\"><literal>appidtool</literal></link>\n-.\n+correspond exactly to the long versions of the command-line arguments to the\n+<link linkend=\"ref_guide_pc_appid_appidtool\"><classname>\n+org.openjpa.enhance.ApplicationIdTool</classname></link>.\n             </para>\n             <para>\n The application identity tool task accepts a nested <literal>fileset</literal>\n tag to specify the files that should be processed. You can specify <filename>\n .java</filename> or <filename>.class</filename> files. If you do not specify any\n-files, the task will run on the classes listed in your\n-<link linkend=\"openjpa.MetaDataFactory\"><literal> openjpa.MetaDataFactory\n-</literal></link> property.\n+files, the task will run on the classes listed in your <filename>persistence.xml\n+</filename> file or <link linkend=\"openjpa.MetaDataFactory\"><literal>\n+openjpa.MetaDataFactory</literal></link> property.\n             </para>\n             <para>\n Following is an example of using the application identity tool task in a\n@@ -330,14 +330,15 @@ object-relational mapping data is always synchronized with your persistent class\n definitions, without needing to remember to invoke the mapping tool manually.\n The task's parameters correspond exactly to the long versions of the\n command-line arguments to the <link linkend=\"ref_guide_mapping_mappingtool\">\n-<literal>mappingtool</literal></link>.\n+<classname>org.apache.openjpa.jdbc.meta.MappingTool</classname></link>.\n             </para>\n             <para>\n The mapping tool task accepts a nested <literal>fileset</literal> tag to specify\n the files that should be processed. You can specify <filename>.java</filename>\n or <filename>.class</filename> files. If you do not specify any files, the task\n-will run on the classes listed in your <link linkend=\"openjpa.MetaDataFactory\">\n-<literal> openjpa.MetaDataFactory</literal></link> property.\n+will run on the classes listed in your <filename>persistence.xml</filename> file\n+or <link linkend=\"openjpa.MetaDataFactory\"><literal>\n+openjpa.MetaDataFactory</literal></link> property.\n             </para>\n             <para>\n Following is an example of a <filename>build.xml</filename> target that invokes\n@@ -389,8 +390,8 @@ The reverse mapping tool task allows you to directly invoke the reverse mapping\n tool from within Ant. While many users will only run the reverse mapping process\n once, others will make it part of their build process. The task's parameters\n correspond exactly to the long versions of the command-line arguments to the\n-<link linkend=\"ref_guide_pc_reverse_reversemappingtool\"><literal>\n-reversemappingtool</literal></link>.\n+<link linkend=\"ref_guide_pc_reverse_reversemappingtool\"><classname>\n+org.apache.openjpa.jdbc.meta.ReverseMappingTool</classname></link>.\n             </para>\n             <para>\n Following is an example of a <filename>build.xml</filename> target that invokes\n@@ -440,8 +441,8 @@ the reverse mapping tool:\n The schema tool task allows you to directly invoke the schema tool from within\n the Ant build process. The task's parameters correspond exactly to the long\n versions of the command-line arguments to the\n-<link linkend=\"ref_guide_schema_schematool\"><literal> schematool</literal>\n-</link>.\n+<link linkend=\"ref_guide_schema_schematool\"><classname>\n+org.apache.openjpa.jdbc.schema.SchemaTool</classname></link>.\n             </para>\n             <para>\n Following is an example of a <filename>build.xml</filename> target that invokes\n@@ -469,14 +470,4 @@ the schema tool:\n             </example>\n         </section>\n     </section>\n-    <section id=\"ref_guide_integration_maven\">\n-        <title>\n-            Maven\n-        </title>\n-        <indexterm zone=\"ref_guide_integration_maven\">\n-            <primary>\n-                Maven\n-            </primary>\n-        </indexterm>\n-    </section>\n </chapter>"},{"sha":"92accc50282898f66bb8c6deeb5987849cca885d","filename":"openjpa-project/src/doc/manual/ref_guide_optimization.xml","status":"modified","additions":141,"deletions":502,"changes":643,"blob_url":"https://github.com/apache/openjpa/blob/afe9acd57616e633d7c4a2278a3885621ba7e3e6/openjpa-project/src/doc/manual/ref_guide_optimization.xml","raw_url":"https://github.com/apache/openjpa/raw/afe9acd57616e633d7c4a2278a3885621ba7e3e6/openjpa-project/src/doc/manual/ref_guide_optimization.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_optimization.xml?ref=afe9acd57616e633d7c4a2278a3885621ba7e3e6","patch":"@@ -37,10 +37,23 @@ more work onto the server will have a negative impact on scalability.\n         </title>\n         <tgroup cols=\"2\" align=\"left\" colsep=\"1\" rowsep=\"1\">\n             <colspec colname=\"name\"/>\n-            \n             <colspec colname=\"desc\" colwidth=\"4*\"/>\n-            \n             <tbody valign=\"top\">\n+                <row>\n+                    <entry colname=\"name\">\n+                        <emphasis role=\"bold\">\n+                            Plugin in a Connection Pool\n+                        </emphasis>\n+                        <para>\n+<emphasis>performance, scalability</emphasis>\n+                        </para>\n+                    </entry>\n+                    <entry colname=\"desc\">\n+OpenJPA's built-in datasource does not perform connection pooling or\n+prepared statement caching.  Plugging in a third-party pooling datasource may\n+drastically improve performance.\n+                    </entry>\n+                </row>\n                 <row>\n                     <entry colname=\"name\">\n                         <emphasis role=\"bold\">\n@@ -51,15 +64,11 @@ more work onto the server will have a negative impact on scalability.\n                         </para>\n                     </entry>\n                     <entry colname=\"desc\">\n-                         \n-          The default set of indexes created by OpenJPA's mapping \n-          tool may not always be the most appropriate for your \n-          application. Manually setting indexes in your mapping\n-          metadata or manually manipulating database indexes to \n-          include frequently-queried fields (as well as dropping \n-          indexes on rarely-queried fields) can yield significant \n-          performance benefits.\n-          \n+The default set of indexes created by OpenJPA's mapping tool may not always be \n+the most appropriate for your application. Manually setting indexes in your \n+mapping metadata or manually manipulating database indexes to include \n+frequently-queried fields (as well as dropping indexes on rarely-queried \n+fields) can yield significant performance benefits.\n                         <para>\n A database must do extra work on insert, update, and delete to maintain an\n index. This extra work will benefit selects with WHERE clauses, which will\n@@ -76,26 +85,6 @@ or deletes.\n                         </para>\n                     </entry>\n                 </row>\n-                <row>\n-                    <entry colname=\"name\">\n-                        <emphasis role=\"bold\">\n-                            Use the best JDBC driver\n-                        </emphasis>\n-                        <para>\n-<emphasis>performance, scalability, reliability</emphasis>\n-                        </para>\n-                    </entry>\n-                    <entry colname=\"desc\">\n-                         \n-          The JDBC driver provided by the database vendor is not \n-          always the fastest and most efficient. Some JDBC drivers \n-          do not support features like batched statements, the lack \n-          of which can significantly slow down OpenJPA's data access\n-          and increase load on the database, reducing system \n-          performance and scalability.\n-          \n-                    </entry>\n-                </row>\n                 <row>\n                     <entry colname=\"name\">\n                         <emphasis role=\"bold\">\n@@ -106,16 +95,10 @@ or deletes.\n                         </para>\n                     </entry>\n                     <entry colname=\"desc\">\n-                         \n-          Manipulating various parameters of the Java Virtual Machine\n-          (such as hotspot compilation modes and the maximum memory)\n-          can result in performance improvements. For more details\n-          about optimizing the JVM execution environment, please see \n-          \n-                        <ulink url=\"http://java.sun.com/docs/hotspot/PerformanceFAQ.html\">\n-                        </ulink>\n-                        .\n-          \n+Manipulating various parameters of the Java Virtual Machine (such as hotspot \n+compilation modes and the maximum memory) can result in performance \n+improvements. For more details about optimizing the JVM execution environment, \n+please see <ulink url=\"http://java.sun.com/docs/hotspot/PerformanceFAQ.html\"/>.\n                     </entry>\n                 </row>\n                 <row>\n@@ -128,74 +111,32 @@ or deletes.\n                         </para>\n                     </entry>\n                     <entry colname=\"desc\">\n-                         \n-          Using OpenJPA's \n-                        <link linkend=\"ref_guide_cache\">\n-                            data and \n-          query caching\n-                        </link>\n-                         features can often result \n-          in a dramatic improvement in performance. Additionally, \n-          these caches can significantly reduce the amount of load on\n-          the database, increasing the scalability characteristics of\n-          your application.  Also, be sure to read about the \n-          \n-                        <link linkend=\"ref_guide_cache_concurrent\">\n-                            concurrent cache\n-          \n-                        </link>\n-                         option to see if it fits your needs.\n-          \n+Using OpenJPA's <link linkend=\"ref_guide_cache\">data and query caching</link>\n+features can often result in a dramatic improvement in performance. \n+Additionally, these caches can significantly reduce the amount of load on\n+the database, increasing the scalability characteristics of your application.  \n                     </entry>\n                 </row>\n                 <row>\n                     <entry colname=\"name\">\n                         <emphasis role=\"bold\">\n-                            Set \n-                            <literal>\n-                                LargeTransaction\n-          \n-                            </literal>\n-                             to true, or set \n-                            <literal>\n-                                PopulateDataCache\n-          \n-                            </literal>\n-                             to false\n+                            Set <literal>LargeTransaction</literal> to true, \n+                            or set <literal> PopulateDataCache</literal> to \n+                            false\n                         </emphasis>\n                         <para>\n <emphasis>performance vs. scalability</emphasis>\n                         </para>\n                     </entry>\n                     <entry colname=\"desc\">\n-                         \n-          When using OpenJPA's \n-                        <link linkend=\"ref_guide_cache\">\n-                            data \n-          caching\n-                        </link>\n-                         features (available in OpenJPA JDO \n-          Performance Pack and Enterprise Edition) \n-          in a transaction that will delete, modify, or create \n-          a very large number of objects you can set \n-                        <literal>\n-                            \n-          LargeTransaction\n-                        </literal>\n-                         to true and perform periodic \n-          flushes during your transaction to reduce its memory \n-          requirements.  See the Javadoc:\n-          \n-                        <ulink url=\"../apidocs/org/apache/openjpa/persistence/OpenJPAEntityManager.html\">\n-                                \n-          OpenJPAEntityManager.setLargeTransaction\n-                        </ulink>\n-                        \n-          \n-          \n-          Note that transactions in large mode have to\n-          more aggressively flush items from the data cache.\n-          \n+When using OpenJPA's <link linkend=\"ref_guide_cache\">data caching</link> \n+features in a transaction that will delete, modify, or create a very large \n+number of objects you can set <literal>LargeTransaction</literal> to true and \n+perform periodic flushes during your transaction to reduce its memory \n+requirements.  See the Javadoc: \n+<ulink url=\"../apidocs/org/apache/openjpa/persistence/OpenJPAEntityManager.html\">\n+OpenJPAEntityManager.setLargeTransaction</ulink>.  Note that transactions in \n+large mode have to more aggressively flush items from the data cache.\n                         <para>\n If your transaction will visit objects that you know are very unlikely to be\n accessed by other transactions, for example an exhaustive report run only once a\n@@ -210,94 +151,42 @@ OpenJPAEntityManager.setPopulateDataCache</ulink>\n                 <row>\n                     <entry colname=\"name\">\n                         <emphasis role=\"bold\">\n-                            Disable logging, performance \n-          tracking\n+                            Disable logging, performance tracking\n                         </emphasis>\n                         <para>\n <emphasis>performance</emphasis>\n                         </para>\n                     </entry>\n                     <entry colname=\"desc\">\n-                         \n-          Developer options such as verbose logging and the \n-          JDBC performance tracker can result in serious performance \n-          hits for your application. Before evaluating OpenJPA's\n-          performance, these options should all be disabled.\n-          \n+Developer options such as verbose logging and the JDBC performance tracker can \n+result in serious performance hits for your application. Before evaluating \n+OpenJPA's performance, these options should all be disabled.\n                     </entry>\n                 </row>\n                 <row>\n                     <entry colname=\"name\">\n                         <emphasis role=\"bold\">\n-                            Set \n-                            <literal>\n-                                IgnoreChanges\n-                            </literal>\n-                             \n-          to true, or set \n-                            <literal>\n-                                FlushBeforeQueries\n-                            </literal>\n-                             to \n-          true\n+                            Set <literal>IgnoreChanges</literal> to true, or \n+                            set <literal>FlushBeforeQueries</literal> to true\n                         </emphasis>\n                         <para>\n <emphasis>performance vs. scalability</emphasis>\n                         </para>\n                     </entry>\n                     <entry colname=\"desc\">\n-                        \n-          When both the \n-                        <link linkend=\"openjpa.IgnoreChanges\">\n-                            <literal>\n-                                openjpa.IgnoreChanges\n-                            </literal>\n-                        </link>\n-                         and \n-          \n-                        <link linkend=\"openjpa.FlushBeforeQueries\">\n-                            <literal>\n-                                \n-          openjpa.FlushBeforeQueries\n-                            </literal>\n-                        </link>\n-                         properties are set\n-          to false, OpenJPA needs to consider in-memory dirty instances \n-          during queries.  This can sometimes result in OpenJPA needing \n-          to evaluate the entire extent objects in order to \n-          return the correct query results, which can have drastic \n-          performance consequences.  If it is appropriate for your \n-          application, configuring \n-          \n-                        <literal>\n-                            FlushBeforeQueries\n-                        </literal>\n-                        \n-          to automatically flush before queries involving dirty\n-          objects will ensure that this never\n-          happens. Setting \n-                        <literal>\n-                            IgnoreChanges\n-                        </literal>\n-                         to \n-          false will result in a small performance hit even if \n-          \n-                        <literal>\n-                            FlushBeforeQueries\n-                        </literal>\n-                         is true, as \n-          incremental flushing is not as efficient overall as \n-          delaying all flushing to a single operation during commit. \n-          This is because incrementally flushing decreases OpenJPA's \n-          ability to maximize statement batching, and increases \n-          resource utilization.\n-          \n-                        <para>\n-Note that the default setting of <literal>FlushBeforeQueries</literal> is\n-<literal>with-connection</literal>, which means that data will be flushed only\n-if a dedicated connection is already in use by the <classname>EntityManager\n-</classname>. So, the default value may not be appropriate for you.\n-                        </para>\n+When both the <link linkend=\"openjpa.IgnoreChanges\"><literal>\n+openjpa.IgnoreChanges</literal></link> and \n+<link linkend=\"openjpa.FlushBeforeQueries\"><literal>openjpa.FlushBeforeQueries\n+</literal></link> properties are set to false, OpenJPA needs to consider \n+in-memory dirty instances during queries.  This can sometimes result in OpenJPA\n+needing to evaluate the entire extent objects in order to return the correct \n+query results, which can have drastic performance consequences.  If it is \n+appropriate for your application, configuring <literal>FlushBeforeQueries\n+</literal> to automatically flush before queries involving dirty objects will \n+ensure that this never happens. Setting <literal>IgnoreChanges</literal> to \n+false will result in a small performance hit even if <literal>FlushBeforeQueries\n+</literal> is true, as incremental flushing is not as efficient overall as \n+delaying all flushing to a single operation during commit.\n                         <para>\n Setting <literal>IgnoreChanges</literal> to <literal>true</literal> will help\n performance, since dirty objects can be ignored for queries, meaning that\n@@ -312,82 +201,44 @@ before queries, since more operations will be performed on the database server.\n                 <row>\n                     <entry colname=\"name\">\n                         <emphasis role=\"bold\">\n-                            Configure \n-                            <literal>\n-                                \n-          openjpa.ConnectionRetainMode\n-                            </literal>\n-                             appropriately\n+                            Configure <literal>openjpa.ConnectionRetainMode\n+                            </literal> appropriately\n                         </emphasis>\n                         <para>\n <emphasis>performance vs. scalability</emphasis>\n                         </para>\n                     </entry>\n                     <entry colname=\"desc\">\n-                        \n-          The \n-                        <link linkend=\"openjpa.ConnectionRetainMode\">\n-                            <literal>\n-                                \n-          ConnectionRetainMode\n-                            </literal>\n-                        </link>\n-                         configuration option \n-          controls when OpenJPA will obtain a connection, and how long \n-          it will hold that connection. The optimal settings for this\n-          option will vary considerably depending on the particular \n-          behavior of your application. You may even benefit from \n-          using different retain modes for different parts of your\n-          application.\n-          \n+The <link linkend=\"openjpa.ConnectionRetainMode\"><literal>ConnectionRetainMode\n+</literal></link> configuration option controls when OpenJPA will obtain a \n+connection, and how long it will hold that connection. The optimal settings for\n+this option will vary considerably depending on the particular behavior of \n+your application. You may even benefit from using different retain modes for \n+different parts of your application.\n                         <para>\n The default setting of <literal>on-demand</literal> minimizes the amount of time\n that OpenJPA holds onto a datastore connection. This is generally the best\n option from a scalability standpoind, as database resources are held for a\n-minimal amount of time. However, if your connection pool is overly small\n-relative to the number of concurrent sessions that need access to the database,\n-or if your <classname>DataSource</classname> is not efficient at managing its\n+minimal amount of time. However, if you are not using connection pooling, or\n+if your <classname>DataSource</classname> is not efficient at managing its\n pool, then this default value could cause undesirable pool contention.\n                         </para>\n                     </entry>\n                 </row>\n                 <row>\n                     <entry colname=\"name\">\n                         <emphasis role=\"bold\">\n-                            Ensure that batch updates are \n-          available\n-                        </emphasis>\n-                        <para>\n-<emphasis>performance, scalability</emphasis>\n-                        </para>\n-                    </entry>\n-                    <entry colname=\"desc\">\n-                         \n-          When performing bulk inserts, updates, or deletes, OpenJPA \n-          will use batched statements. If this feature is not \n-          available in your JDBC driver, then OpenJPA will need to \n-          issue multiple SQL statements instead of a single batch \n-          statement.\n-          \n-                    </entry>\n-                </row>\n-                <row>\n-                    <entry colname=\"name\">\n-                        <emphasis role=\"bold\">\n-                            Use \n-          flat inheritance\n+                            Use flat inheritance \n                         </emphasis>\n                         <para>\n <emphasis>performance, scalability vs. disk space</emphasis>\n                         </para>\n                     </entry>\n                     <entry colname=\"desc\">\n-                         \n-          Mapping inheritance hierarchies to a single database table\n-          is faster for most operations than other strategies\n-          employing multiple tables. If it is appropriate for your \n-          application, you should use this strategy whenever possible.\n-          \n+Mapping inheritance hierarchies to a single database table is faster for most \n+operations than other strategies employing multiple tables. If it is \n+appropriate for your application, you should use this strategy whenever \n+possible.\n                         <para>\n However, this strategy will require more disk space on the database side. Disk\n space is relatively inexpensive, but if your object featureSelection is particularly large,\n@@ -405,15 +256,11 @@ it can become a factor.\n                         </para>\n                     </entry>\n                     <entry colname=\"desc\">\n-                         \n-          For applications that perform large bulk inserts, the \n-          retrieval of sequence numbers can be a bottleneck. \n-          Increasing sequence increments and using table-based rather\n-          than native database sequences can reduce or eliminate \n-          this bottleneck. In some cases,\n-          implementing your own sequence factory can further optimize\n-          sequence number retrieval.\n-          \n+For applications that perform large bulk inserts, the retrieval of sequence \n+numbers can be a bottleneck.  Increasing sequence increments and using \n+table-based rather than native database sequences can reduce or eliminate \n+this bottleneck. In some cases, implementing your own sequence factory can \n+further optimize sequence number retrieval.\n                     </entry>\n                 </row>\n                 <row>\n@@ -426,13 +273,10 @@ it can become a factor.\n                         </para>\n                     </entry>\n                     <entry colname=\"desc\">\n-                         \n-          Using datastore transactions translates into pessimistic \n-          database row locking, which can be a performance hit \n-          (depending on the database). If appropriate for your \n-          application, optimistic transactions are typically faster \n-          than datastore transactions.\n-          \n+Using datastore transactions translates into pessimistic database row locking, \n+which can be a performance hit (depending on the database). If appropriate for \n+your application, optimistic transactions are typically faster than datastore \n+transactions.\n                         <para>\n Optimistic transactions provide the same transactional guarantees as datastore\n transactions, except that you must handle a potential optimistic verification\n@@ -451,21 +295,17 @@ the user redo any work.\n                     <entry colname=\"name\">\n                         <emphasis role=\"bold\">\n                             Use query aggregates and projections\n-          \n                         </emphasis>\n                         <para>\n <emphasis>performance, scalability</emphasis>\n                         </para>\n                     </entry>\n                     <entry colname=\"desc\">\n-                        \n-          Using aggregates to compute reporting data on the database\n-          server can drastically speed up queries.  Similarly, using\n-          projections when you are interested in specific\n-          object fields or relations rather than the entire object\n-          state can reduce the amount of data OpenJPA must transfer\n-          from the database to your application.\n-          \n+Using aggregates to compute reporting data on the database server can \n+drastically speed up queries.  Similarly, using projections when you are \n+interested in specific object fields or relations rather than the entire object\n+state can reduce the amount of data OpenJPA must transfer from the database to \n+your application.  \n                     </entry>\n                 </row>\n                 <row>\n@@ -493,30 +333,6 @@ close them, but it is always faster if it is done at the application level.\n                         </para>\n                     </entry>\n                 </row>\n-                <row>\n-                    <entry colname=\"name\">\n-                        <emphasis role=\"bold\">\n-                            Optimize connection pool \n-          settings\n-                        </emphasis>\n-                        <para>\n-<emphasis>performance, scalability</emphasis>\n-                        </para>\n-                    </entry>\n-                    <entry colname=\"desc\">\n-                        <para>\n-OpenJPA's built-in connection pool's default settings may not be optimal for all\n-applications. For applications that instantiate and close many <classname>\n-EntityManager</classname>s (such as a web application), increasing the size of\n-the connection pool will reduce the overhead of waiting on free connections or\n-opening new connections.\n-                        </para>\n-                        <para>\n-You may want to tune the prepared statement pool size with the connection pool\n-size.\n-                        </para>\n-                    </entry>\n-                </row>\n                 <row>\n                     <entry colname=\"name\">\n                         <emphasis role=\"bold\">\n@@ -545,205 +361,91 @@ client tier.\n                 <row>\n                     <entry colname=\"name\">\n                         <emphasis role=\"bold\">\n-                            Utilize the \n-                            <classname>\n-                                \n-          EntityManager\n-                            </classname>\n-                             cache\n+                            Utilize the <classname>EntityManager</classname>\n+                            cache\n                         </emphasis>\n                         <para>\n <emphasis>performance, scalability</emphasis>\n                         </para>\n                     </entry>\n                     <entry colname=\"desc\">\n-                         \n-          When possible and appropriate, re-using \n-                        <classname>\n-                            \n-          EntityManager\n-                        </classname>\n-                        s and setting the \n-          \n-                        <link linkend=\"openjpa.RetainState\">\n-                            <literal>\n-                                \n-          RetainState\n-                            </literal>\n-                        </link>\n-                         configuration option to \n-          \n-                        <literal>\n-                            true\n-                        </literal>\n-                         may result in significant \n-          performance gains, since the \n-                        <classname>\n-                            \n-          EntityManager\n-                        </classname>\n-                        's built-in\n-          object cache will be used.\n-          \n+When possible and appropriate, re-using <classname>EntityManager</classname>s \n+and setting the <link linkend=\"openjpa.RetainState\"><literal>RetainState\n+</literal></link> configuration option to <literal>true</literal> may result in\n+significant performance gains, since the <classname>EntityManager</classname>'s\n+built-in object cache will be used.\n                     </entry>\n                 </row>\n                 <row>\n                     <entry colname=\"name\">\n                         <emphasis role=\"bold\">\n-                            Enable multithreaded operation only \n-          when necessary\n+                            Enable multithreaded operation only when necessary\n                         </emphasis>\n                         <para>\n <emphasis>performance</emphasis>\n                         </para>\n                     </entry>\n                     <entry colname=\"desc\">\n-                        \n-          OpenJPA respects the \n-                        <link linkend=\"openjpa.Multithreaded\">\n-                            <literal>\n-                                openjpa.Multithreaded\n-                            </literal>\n-                        </link>\n-                         option in\n-          that it does not impose synchronization overhead for\n-          applications that set this value to \n-          \n-                        <literal>\n-                            false\n-                        </literal>\n-                        . If your application is \n-          guaranteed to only use single-threaded access to OpenJPA\n-          resources and persistent objects, setting this option to \n-          \n-                        <literal>\n-                            false\n-                        </literal>\n-                         will result\n-          in the elimination of synchronization overhead, and may \n-          result in a modest performance increase.\n-          \n+OpenJPA respects the <link linkend=\"openjpa.Multithreaded\"><literal>\n+openjpa.Multithreaded</literal></link> option in that it does not impose as  \n+much synchronization overhead for applications that do not set this value to \n+<literal>true</literal>. If your application is guaranteed to only use \n+single-threaded access to OpenJPA resources and persistent objects, leaving \n+this option as <literal>false</literal> will reduce synchronization overhead, \n+and may result in a modest performance increase.\n                     </entry>\n                 </row>\n                 <row>\n                     <entry colname=\"name\">\n                         <emphasis role=\"bold\">\n-                            Enable large data set \n-          handling\n+                            Enable large data set handling\n                         </emphasis>\n                         <para>\n <emphasis>performance, scalability</emphasis>\n                         </para>\n                     </entry>\n                     <entry colname=\"desc\">\n-                        \n-          If you execute queries that return large numbers of objects\n-          or have relations (collections or maps) that are large, and\n-          if you often only access parts of these data sets, enabling\n-          \n-                        <link linkend=\"ref_guide_dbsetup_lrs\">\n-                            large result set \n-          handling\n-                        </link>\n-                         where appropriate can\n-          dramatically speed up your application, since OpenJPA will\n-          bring the data sets into memory from the database only as\n-          necessary.\n-          \n+If you execute queries that return large numbers of objects or have relations \n+(collections or maps) that are large, and if you often only access parts of \n+these data sets, enabling <link linkend=\"ref_guide_dbsetup_lrs\">large result \n+set handling</link> where appropriate can dramatically speed up your \n+application, since OpenJPA will bring the data sets into memory from the \n+database only as necessary.\n                     </entry>\n                 </row>\n                 <row>\n                     <entry colname=\"name\">\n                         <emphasis role=\"bold\">\n                             Disable large data set handling\n-          \n                         </emphasis>\n                         <para>\n <emphasis>performance, scalability</emphasis>\n                         </para>\n                     </entry>\n                     <entry colname=\"desc\">\n-                        \n-          If you have enabled scrollable result sets and on-demand \n-          loading but do you not require it, consider disabling it \n-          again.  Some JDBC drivers and databases (SQLServer for \n-          example) are much slower when used with scrolling result \n-          sets.\n-          \n+If you have enabled scrollable result sets and on-demand loading but do you not\n+require it, consider disabling it again.  Some JDBC drivers and databases \n+(SQLServer for example) are much slower when used with scrolling result sets.\n                     </entry>\n                 </row>\n                 <row>\n                     <entry colname=\"name\">\n                         <emphasis role=\"bold\">\n-                            Use short discriminator values, or\n-          turn off the discriminator\n-          \n-                        </emphasis>\n-                        <para>\n-<emphasis>performance, scalability</emphasis>\n-                        </para>\n-                    </entry>\n-                    <entry colname=\"desc\">\n-                        \n-          The default discriminator strategy of storing the class\n-          name in the discriminator column is quite robust, in that \n-          it can handle any class and needs no configuration, but \n-          the downside of this robustness is that it puts a \n-          relatively lengthy string into each row of the database. \n-          With a little application-specific configuration, you can \n-          easily reduce this to a single character or integer. This \n-          can result in significant performance gains when dealing \n-          with many small objects, \n-          since the subclass indicator data can become a significant \n-          proportion of the data transferred between the JVM and \n-          the database.\n-          \n-                        <para>\n-Alternately, if certain persistent classes in your application do not make use\n-of inheritance, then you can disable the discriminator for these classes\n-altogether.\n-                        </para>\n-                    </entry>\n-                </row>\n-                <row>\n-                    <entry colname=\"name\">\n-                        <emphasis role=\"bold\">\n-                            Use the \n-                            <classname>\n-                                \n-          DynamicSchemaFactory\n-                            </classname>\n+                            Use the <classname>DynamicSchemaFactory</classname>\n                         </emphasis>\n                         <para>\n <emphasis>performance, validation</emphasis>\n                         </para>\n                     </entry>\n                     <entry colname=\"desc\">\n-                        \n-          If you are using a \n-                        <link linkend=\"openjpa.jdbc.SchemaFactory\">\n-                            <literal>\n-                                openjpa.jdbc.SchemaFactory\n-                            </literal>\n-                        </link>\n-                         setting\n-          of something other than the default of \n-                        <literal>\n-                            \n-          dynamic\n-                        </literal>\n-                        , consider switching back.  While other\n-          factories can ensure that object-relational mapping \n-          information is valid when a persistent class is first used,\n-          this can be a slow process.  Though the validation is only \n-          performed once for each class, switching back to the\n-          \n-                        <classname>\n-                            DynamicSchemaFactory\n-                        </classname>\n-                         \n-          can reduce the warm-up time for your application.\n-          \n+If you are using a <link linkend=\"openjpa.jdbc.SchemaFactory\"><literal>\n+openjpa.jdbc.SchemaFactory</literal></link> setting of something other than \n+the default of <literal>dynamic</literal>, consider switching back.  While other\n+factories can ensure that object-relational mapping information is valid when \n+a persistent class is first used, this can be a slow process.  Though the \n+validation is only performed once for each class, switching back to the\n+<classname>DynamicSchemaFactory</classname> can reduce the warm-up time for \n+your application.\n                     </entry>\n                 </row>\n                 <row>\n@@ -756,14 +458,9 @@ altogether.\n                         </para>\n                     </entry>\n                     <entry colname=\"desc\">\n-                        <link linkend=\"ref_guide_enterprise_xa\">\n-                            XA transactions\n-          \n-                        </link>\n-                         can be orders of magnitude slower than standard \n-          transactions. Unless distributed transaction functionality \n-          is required by your application, use standard transactions.\n-          \n+<link linkend=\"ref_guide_enterprise_xa\">XA transactions</link> can be orders of\n+magnitude slower than standard transactions. Unless distributed transaction \n+functionality is required by your application, use standard transactions.\n                         <para>\n Recall that XA transactions are distinct from managed transactions - managed\n transaction services such as that provided by EJB declarative transactions can\n@@ -777,88 +474,37 @@ example).\n                 <row>\n                     <entry colname=\"name\">\n                         <emphasis role=\"bold\">\n-                            Use \n-                            <classname>\n-                                Set\n-                            </classname>\n-                            s \n-          instead of \n-                            <classname>\n-                                List/Collection\n-                            </classname>\n-                            s\n-          \n+                            Use <classname>Set</classname>s instead of \n+                            <classname>List/Collection</classname>s\n                         </emphasis>\n                         <para>\n <emphasis>performance, scalability</emphasis>\n                         </para>\n                     </entry>\n                     <entry colname=\"desc\">\n-                        \n-          There is a small amount of extra overhead for OpenJPA to \n-          maintain collections where each element is not guaranteed \n-          to be unique.  If your application does not require \n-          duplicates for a collection, you should always declare your\n-          fields to be of type \n-                        <classname>\n-                            Set, SortedSet, \n-          HashSet,\n-                        </classname>\n-                         or \n-                        <classname>\n-                            TreeSet\n-                        </classname>\n-                        .\n-          \n-                    </entry>\n-                </row>\n-                <row>\n-                    <entry colname=\"name\">\n-                        <emphasis role=\"bold\">\n-                            Use query parameters instead of\n-          encoding search data in filter strings\n-                        </emphasis>\n-                        <para>\n-<emphasis>performance</emphasis>\n-                        </para>\n-                    </entry>\n-                    <entry colname=\"desc\">\n-                        \n-          If your queries depend on parameter data only known at\n-          runtime, you should use query parameters rather than\n-          dynamically building different query strings. OpenJPA\n-          performs aggressive caching of query compilation\n-          data, and the effectiveness of this cache is diminished if\n-          multiple query filters are used where a single one could\n-          have sufficed.\n-          \n+There is a small amount of extra overhead for OpenJPA to maintain collections \n+where each element is not guaranteed to be unique.  If your application does \n+not require duplicates for a collection, you should always declare your\n+fields to be of type <classname>Set, SortedSet, HashSet,</classname> or \n+<classname>TreeSet</classname>.\n                     </entry>\n                 </row>\n                 <row>\n                     <entry colname=\"name\">\n                         <emphasis role=\"bold\">\n-                            Tune your fetch groups\n-          appropriately\n+                            Tune your fetch groups appropriately\n                         </emphasis>\n                         <para>\n <emphasis>performance, scalability</emphasis>\n                         </para>\n                     </entry>\n                     <entry colname=\"desc\">\n-                        \n-          The \n-                        <link linkend=\"ref_guide_fetch\">\n-                            fetch groups\n-                        </link>\n-                        \n-          used when loading an object control how much data is\n-          eagerly loaded, and by extension, which fields must be\n-          lazily loaded at a future time. The ideal fetch group\n-          configuration loads all the data that is needed in one\n-          fetch, and no extra fields - this minimizes both the\n-          amount of data transferred from the database, and the\n-          number of trips to the database.\n-          \n+The <link linkend=\"ref_guide_fetch\">fetch groups</link> used when loading an \n+object control how much data is eagerly loaded, and by extension, which fields \n+must be lazily loaded at a future time. The ideal fetch group configuration \n+loads all the data that is needed in one fetch, and no extra fields - this \n+minimizes both the amount of data transferred from the database, and the\n+number of trips to the database.\n                         <para>\n If extra fields are specified in the fetch groups (in particular, large fields\n such as binary data, or relations to other persistence-capable objects), then\n@@ -879,16 +525,9 @@ trips to the database to load additional fields as necessary.\n                         </para>\n                     </entry>\n                     <entry colname=\"desc\">\n-                        \n-          Using \n-                        <link linkend=\"ref_guide_perfpack_eager\">\n-                            eager \n-          fetching\n-                        </link>\n-                         when loading subclass data or traversing \n-          relations for each instance in a large collection of \n-          results can speed up data loading by orders of magnitude.\n-          \n+Using <link linkend=\"ref_guide_perfpack_eager\">eager fetching</link> when \n+loading subclass data or traversing relations for each instance in a large \n+collection of results can speed up data loading by orders of magnitude.\n                     </entry>\n                 </row>\n             </tbody>"},{"sha":"143d8347e4ff599f744b767e0317e5ff8274ea58","filename":"openjpa-project/src/doc/manual/ref_guide_remote.xml","status":"modified","additions":13,"deletions":16,"changes":29,"blob_url":"https://github.com/apache/openjpa/blob/afe9acd57616e633d7c4a2278a3885621ba7e3e6/openjpa-project/src/doc/manual/ref_guide_remote.xml","raw_url":"https://github.com/apache/openjpa/raw/afe9acd57616e633d7c4a2278a3885621ba7e3e6/openjpa-project/src/doc/manual/ref_guide_remote.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_remote.xml?ref=afe9acd57616e633d7c4a2278a3885621ba7e3e6","patch":"@@ -22,9 +22,9 @@ such as <classname>EntityManager</classname>s and queries connect directly to\n the datastore and execute their actions in the same JVM as the code using them.\n It is <emphasis>online</emphasis> in that all changes to managed objects must be\n made in the context of an active <classname> EntityManager</classname>. These\n-two properties, combined with the fact that <classname> EntityManager\n-</classname>s cannot be serialized for storage or network transfer, make the\n-standard JPA runtime difficult to incorporate into some enterprise and\n+two properties, combined with the fact that <classname>\n+EntityManager</classname>s cannot be serialized for storage or network transfer,\n+make the standard JPA runtime difficult to incorporate into some enterprise and\n client/server program designs.\n     </para>\n     <para>\n@@ -78,9 +78,9 @@ The extended\n explicitly detach objects at any time.\n             </para>\n <programlisting>\n-public Object detach (Object pc):\n-public Object[] detachAll (Object... pcs):\n-public Collection detachAll (Collection pcs):\n+public Object detach(Object pc):\n+public Object[] detachAll(Object... pcs):\n+public Collection detachAll(Collection pcs):\n </programlisting>\n             <para>\n Each detach method returns detached copies of the given instances. The copy\n@@ -220,11 +220,9 @@ default.\n                 </listitem>\n                 <listitem>\n                     <para>\n-<literal>fgs</literal>: Detach all fields and relations in the default fetch\n-group, and any other fetch groups that you have added to the current\n+<literal>fgs</literal>: Detach all fields and relations in the current \n <link linkend=\"ref_guide_runtime\">fetch configuration</link>. For more\n-information on custom fetch groups, see <xref linkend=\"ref_guide_fetch\"/>\n-.\n+information on custom fetch groups, see <xref linkend=\"ref_guide_fetch\"/>.\n                     </para>\n                 </listitem>\n                 <listitem>\n@@ -330,8 +328,8 @@ for controlling detached state:\n public static final int DETACH_LOADED;\n public static final int DETACH_FGS;\n public static final int DETACH_ALL;\n-public int getDetachState ();\n-public void setDetachState (int mode);\n+public int getDetachState();\n+public void setDetachState(int mode);\n </programlisting>\n             <section id=\"ref_guide_detach_field\">\n                 <title>\n@@ -365,8 +363,8 @@ import org.apache.openjpa.persistence.*;\n \n @Entity\n public class Magazine\n-    implements Serializable\n-{\n+    implements Serializable {\n+\n     private String name;\n     @DetachedState private Object state;\n     ...\n@@ -474,7 +472,6 @@ OpenJPA includes built in remote commit providers for JMS and TCP communication.\n                     </tertiary>\n                 </indexterm>\n                 <para>\n-OpenJPA includes built in remote commit providers for JMS and TCP communication.\n The JMS remote commit provider can be configured by setting the\n <link linkend=\"openjpa.RemoteCommitProvider\"><literal>\n openjpa.RemoteCommitProvider</literal></link> property to contain the\n@@ -551,7 +548,7 @@ The TCP remote commit provider has several options that are defined as host\n specifications containing a host name or IP address and an optional port\n separated by a colon. For example, the host specification <literal>\n saturn.bea.com:1234</literal> represents an <classname>InetAddress</classname>\n-retrieved by invoking <methodname>InetAddress.getByName (\"saturn.bea.com\")\n+retrieved by invoking <methodname>InetAddress.getByName(\"saturn.bea.com\")\n </methodname> and a port of 1234.\n                 </para>\n                 <para>"},{"sha":"364427a3ed6e8bb6b5f4239b05d8025049160b1c","filename":"openjpa-project/src/doc/manual/ref_guide_runtime.xml","status":"modified","additions":113,"deletions":148,"changes":261,"blob_url":"https://github.com/apache/openjpa/blob/afe9acd57616e633d7c4a2278a3885621ba7e3e6/openjpa-project/src/doc/manual/ref_guide_runtime.xml","raw_url":"https://github.com/apache/openjpa/raw/afe9acd57616e633d7c4a2278a3885621ba7e3e6/openjpa-project/src/doc/manual/ref_guide_runtime.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_runtime.xml?ref=afe9acd57616e633d7c4a2278a3885621ba7e3e6","patch":"@@ -85,7 +85,7 @@ The <link linkend=\"ref_guide_runtime_openjpapersistence\"><classname>\n org.apache.openjpa.persistence.OpenJPAPersistence</classname></link> helper\n allows you to convert between <classname>EntityManagerFactories</classname> and\n <classname>BrokerFactories</classname>, <classname>EntityManager</classname>s\n-and <classname>Broker</classname> s.\n+and <classname>Broker</classname>s.\n         </para>\n         <section id=\"ref_guide_runtime_pmextension\">\n             <title>\n@@ -153,14 +153,14 @@ preventing a straight cast. <classname>OpenJPAPersistence</classname>'s\n <methodname>cast</methodname> methods work around these proxies.\n         </para>\n <programlisting> \n-public static OpenJPAEntityManagerFactory cast (EntityManagerFactory emf);\n-public static OpenJPAEntityManager cast (EntityManager em);\n-public static OpenJPAQuery cast (Query q);\n+public static OpenJPAEntityManagerFactory cast(EntityManagerFactory emf);\n+public static OpenJPAEntityManager cast(EntityManager em);\n+public static OpenJPAQuery cast(Query q);\n </programlisting>\n         <para>\n We provide additional information on the <classname>OpenJPAPersistence\n-</classname> helper <link linkend=\"ref_guide_runtime_openjpapersistence\"> below\n-</link>.\n+</classname> helper <link linkend=\"ref_guide_runtime_openjpapersistence\"> \n+below</link>.\n         </para>\n         <section id=\"ref_guide_runtime_emfactory\">\n             <title>\n@@ -187,9 +187,8 @@ The <classname>org.apache.openjpa.persistence.OpenJPAEntityManagerFactory\n </classname> interface extends the basic <classname>\n javax.persistence.EntityManagerFactory</classname> with OpenJPA-specific\n features. The <classname>OpenJPAEntityManagerFactory</classname> offers APIs to\n-obtain managed and unmanaged <classname>EntityManager</classname>s from the\n-same factory, to access the OpenJPA data and query caches, and to perform other\n-OpenJPA-specific operations. See the\n+access the OpenJPA data and query caches and to perform other OpenJPA-specific \n+operations. See the\n <ulink url=\"../apidocs/org/apache/openjpa/persistence/OpenJPAEntityManagerFactory.html\">\n interface Javadoc</ulink> for details.\n             </para>\n@@ -221,7 +220,7 @@ All OpenJPA <classname>EntityManager</classname>s implement the\n </ulink> interface. This interface extends the standard <classname>\n javax.persistence.EntityManager</classname>. Just as the standard <classname>\n EntityManager</classname> is the primary window into JPA services, the\n-<classname> OpenJPAEntityManager</classname> is the primary window from JPA into\n+<classname>OpenJPAEntityManager</classname> is the primary window from JPA into\n OpenJPA-specific functionality. We strongly encourage you to investigate the API\n extensions this interface contains.\n             </para>\n@@ -249,8 +248,8 @@ extensions this interface contains.\n             <para>\n OpenJPA extends JPA's standard query functionality with the <classname>\n org.apache.openjpa.persistence.OpenJPAQuery</classname> interface. See its\n-<ulink url=\"../apidocs/org/apache/openjpa/persistence/OpenJPAQuery.html\">Javadoc</ulink> for\n-details on the convenience methods it provides.\n+<ulink url=\"../apidocs/org/apache/openjpa/persistence/OpenJPAQuery.html\">Javadoc\n+</ulink> for details on the convenience methods it provides.\n             </para>\n         </section>\n         <section id=\"ref_guide_runtime_jpaextent\">\n@@ -290,8 +289,8 @@ import org.apache.openjpa.persistence.*;\n \n ...\n \n-OpenJPAEntityManager kem = OpenJPAPersistence.cast (em);\n-Extent&lt;Magazine&gt; mags = kem.getExtent (Magazine.class, false);\n+OpenJPAEntityManager kem = OpenJPAPersistence.cast(em);\n+Extent&lt;Magazine&gt; mags = kem.getExtent(Magazine.class, false);\n for (Magazine m : mags)\n     processMagazine (m);\n </programlisting>\n@@ -352,7 +351,7 @@ OpenJPA.\n                 </seealso>\n             </indexterm>\n             <para>\n-Many of the aforementioned OpenJPA interfaces give you access to a <classname>\n+Many of the aforementioned OpenJPA interfaces give you access to an <classname>\n org.apache.openjpa.persistence.FetchPlan</classname> instance. The <classname>\n FetchPlan</classname> allows you to exercise some control over how objects are\n fetched from the datastore, including <link linkend=\"ref_guide_dbsetup_lrs\">\n@@ -366,14 +365,14 @@ OpenJPA goes one step further, extending <classname>FetchPlan</classname> with\n to add additional JDBC-specific tuning methods. Unless you have customized \n OpenJPA to use a non-relational back-end (see\n <xref linkend=\"ref_guide_enterprise_abstractstore\"/> ), all <classname>\n-FetchPlan</classname>s in OpenJPA implement <classname>JDBCFetchPlan</classname>\n-, so feel free to cast to this interface.\n+FetchPlan</classname>s in OpenJPA implement <classname>\n+JDBCFetchPlan</classname>, so feel free to cast to this interface.\n             </para>\n             <para>\n Fetch plans pass on from parent components to child components. The <classname>\n EntityManagerFactory</classname> settings (via your configuration properties)\n for things like the fetch size, result set type, and custom fetch groups are\n-passed on to the fetch plan of the <classname> EntityManager</classname>s it\n+passed on to the fetch plan of the <classname>EntityManager</classname>s it\n produces. The settings of each <classname>EntityManager</classname>, in turn,\n are passed on to each <classname>Query</classname> and <classname>Extent\n </classname> it returns. Note that the opposite, however, is not true. Modifying\n@@ -384,7 +383,7 @@ configuration does not affect the <classname> EntityManagerFactory</classname>.\n             </para>\n             <para>\n <xref linkend=\"ref_guide_fetch\"/> includes examples using <classname>\n-FetchPlan</classname> s.\n+FetchPlan</classname>s.\n             </para>\n         </section>\n         <section id=\"ref_guide_runtime_openjpapersistence\">\n@@ -515,12 +514,12 @@ locked. You can also use the fetch plan of an individual <classname>Query\n <classname>Query</classname>.\n             </para>\n <programlisting>\n-public LockModeType getReadLockMode ();\n-public FetchPlan setReadLockMode (LockModeType mode);\n-public LockModeType getWriteLockMode ();\n-public FetchPlan setWriteLockMode (LockModeType mode);\n-long getLockTimeout ();\n-FetchPlan setLockTimeout (long timeout);\n+public LockModeType getReadLockMode();\n+public FetchPlan setReadLockMode(LockModeType mode);\n+public LockModeType getWriteLockMode();\n+public FetchPlan setWriteLockMode(LockModeType mode);\n+long getLockTimeout();\n+FetchPlan setLockTimeout(long timeout);\n </programlisting>\n             <para>\n Controlling locking through these runtime APIs works even during optimistic\n@@ -538,24 +537,24 @@ import org.apache.openjpa.persistence.*;\n ...\n \n EntityManager em = ...;\n-em.getTransaction ().begin ();\n+em.getTransaction().begin();\n \n // load stock we know we're going to update at write lock mode\n-Query q = em.createQuery (\"select s from Stock s where symbol = :s\");\n-q.setParameter (\"s\", symbol);\n-OpenJPAQuery kq = OpenJPAPersistence.cast (q);\n-FetchPlan fetch = kq.getFetchPlan ();\n-fetch.setReadLockMode (LockModeType.WRITE);\n-fetch.setLockTimeout (3000); // 3 seconds\n-Stock stock = (Stock) q.getSingleResult ();\n+Query q = em.createQuery(\"select s from Stock s where symbol = :s\");\n+q.setParameter(\"s\", symbol);\n+OpenJPAQuery oq = OpenJPAPersistence.cast(q);\n+FetchPlan fetch = oq.getFetchPlan ();\n+fetch.setReadLockMode(LockModeType.WRITE);\n+fetch.setLockTimeout(3000); // 3 seconds\n+Stock stock = (Stock) q.getSingleResult();\n \n // load an object we don't need locked at none lock mode\n-fetch = (OpenJPAPersistence.cast (em)).getFetchPlan ();\n-fetch.setReadLockMode (null);\n-Market market = em.find (Market.class, marketId);\n+fetch = OpenJPAPersistence.cast(em).getFetchPlan();\n+fetch.setReadLockMode(null);\n+Market market = em.find(Market.class, marketId);\n \n-stock.setPrice (market.calculatePrice (stock));\n-em.getTransaction ().commit ();\n+stock.setPrice(market.calculatePrice(stock));\n+em.getTransaction().commit();\n </programlisting>\n             </example>\n         </section>\n@@ -576,27 +575,27 @@ In addition to allowing you to control implicit locking levels, OpenJPA provides\n explicit APIs to lock objects and to retrieve their current lock level.\n             </para>\n <programlisting>\n-public LockModeType OpenJPAEntityManager.getLockMode (Object pc);\n+public LockModeType OpenJPAEntityManager.getLockMode(Object pc);\n </programlisting>\n             <para>\n Returns the level at which the given object is currently locked.\n             </para>\n             <para>\n In addition to the standard\n <ulink url=\"http://java.sun.com/javaee/5/docs/api/javax/persistence/EntityManager.html\">\n-<methodname>EntityManager.lock (Object, LockModeType)</methodname></ulink>\n+<methodname>EntityManager.lock(Object, LockModeType)</methodname></ulink>\n method, the\n <ulink url=\"../apidocs/org/apache/openjpa/persistence/OpenJPAEntityManager.html\">\n <classname>OpenJPAEntityManager</classname></ulink> exposes the following\n methods to lock objects explicitly:\n             </para>\n <programlisting>\n-public void lock (Object pc);\n-public void lock (Object pc, LockModeType mode, long timeout);\n-public void lockAll (Object... pcs);\n-public void lockAll (Object... pcs, LockModeType mode, long timeout);\n-public void lockAll (Collection pcs);\n-public void lockAll (Collection pcs, LockModeType mode, long timeout);\n+public void lock(Object pc);\n+public void lock(Object pc, LockModeType mode, long timeout);\n+public void lockAll(Object... pcs);\n+public void lockAll(Object... pcs, LockModeType mode, long timeout);\n+public void lockAll(Collection pcs);\n+public void lockAll(Collection pcs, LockModeType mode, long timeout);\n </programlisting>\n             <para>\n Methods that do not take a lock level or timeout parameter default to the\n@@ -610,21 +609,21 @@ current fetch plan. The example below demonstrates these methods in action.\n import org.apache.openjpa.persistence.*;\n \n // retrieve the lock level of an object\n-OpenJPAEntityManager kem = OpenJPAPersistence.cast (em);\n+OpenJPAEntityManager oem = OpenJPAPersistence.cast(em);\n Stock stock = ...;\n-LockModeType level = kem.getLockMode (stock);\n+LockModeType level = oem.getLockMode(stock);\n if (level == OpenJPAModeType.WRITE) ...\n \n ...\n \n-kem.setOptimistic (true);\n-kem.getTransaction ().begin ();\n+oem.setOptimistic(true);\n+oem.getTransaction().begin ();\n \n // override default of not locking during an opt trans to lock stock object\n-kem.lock (stock, LockModeType.WRITE, 1000);\n-stock.setPrice (market.calculatePrice (stock));\n+oem.lock(stock, LockModeType.WRITE, 1000);\n+stock.setPrice(market.calculatePrice(stock));\n \n-kem.getTransaction ().commit ();\n+oem.getTransaction().commit();\n </programlisting>\n             </example>\n         </section>\n@@ -658,9 +657,10 @@ own lock manager, or use one of the bundled options:\n                     <para>\n <literal>pessimistic</literal>: This is an alias for the\n <ulink url=\"../apidocs/org/apache/openjpa/jdbc/kernel/PessimisticLockManager.html\">\n-<classname>org.apache.openjpa.jdbc.kernel.PessimisticLockManager</classname>\n-</ulink>, which uses SELECT FOR UPDATE statements (or the database's\n-equivalent) to lock the database rows corresponding to locked objects. This lock\n+<classname>o\n+rg.apache.openjpa.jdbc.kernel.PessimisticLockManager</classname></ulink>, which\n+uses SELECT FOR UPDATE statements (or the database's equivalent) to lock the \n+database rows corresponding to locked objects. This lock\n manager does not distinguish between read locks and write locks; all locks are\n write locks.\n                     </para>\n@@ -685,16 +685,6 @@ does not perform any locking at all.\n                 </listitem>\n                 <listitem>\n                     <para>\n-<literal>sjvm</literal>: An alias for the\n-<ulink url=\"../apidocs/org/apache/openjpa/kernel/SingleJVMExclusiveLockManager.html\">\n-<classname>org.apache.openjpa.kernel.SingleJVMExclusiveLockManager</classname>\n-</ulink>. This lock manager uses in-memory mutexes to obtain exclusive locks on\n-object ids. It does not perform any database-level locking. Also, it does not\n-distinguish between read and write locks; all locks are write locks.\n-                    </para>\n-                </listitem>\n-                <listitem>\n-                    <para>\n <literal>version</literal>: An alias for the\n <ulink url=\"../apidocs/org/apache/openjpa/kernel/VersionLockManager.html\">\n <classname>org.apache.openjpa.kernel.VersionLockManager</classname></ulink>.\n@@ -839,16 +829,16 @@ locks the object. The only way to positively guarantee that the object is locked\n and has the most recent state to refresh the object after locking it.\n                     </para>\n                     <para>\n-When using the default lock manager, the case above can only occur when OpenJPA\n-cannot issue the state-loading SELECT as a locking statement due to database\n-limitations. For example, some databases cannot lock SELECTs that use joins. The\n-default lock manager will log an INFO message to the <literal>openjpa.Runtime\n-</literal> logging channel whenever it cannot lock the initial SELECT due to\n-database limitations. By paying attention to these log messages, you can see\n-where you might consider using an object refresh to guarantee that you have the\n-most recent state, or where you might rethink the way you load the state in\n-question to circumvent the database limitations that prevent OpenJPA from\n-issuing a locking SELECT in the first place.\n+When using the pessimistic lock manager, the case above can only occur when \n+OpenJPA cannot issue the state-loading SELECT as a locking statement due to \n+database limitations. For example, some databases cannot lock SELECTs that use \n+joins. The pessimistic lock manager will log an INFO message to the <literal>\n+openjpa.Runtime</literal> logging channel whenever it cannot lock the initial \n+SELECT due to database limitations. By paying attention to these log messages, \n+you can see where you might consider using an object refresh to guarantee that \n+you have the most recent state, or where you might rethink the way you load the\n+state in question to circumvent the database limitations that prevent OpenJPA \n+from issuing a locking SELECT in the first place.\n                     </para>\n                 </listitem>\n             </itemizedlist>\n@@ -888,9 +878,9 @@ transaction, and that a rollback of the transaction will rollback all of the\n changes in the transaction regardless of any savepoints set.\n             </para>\n <programlisting>\n-void setSavepoint (String name);\n-void releaseSavepoint (String name);\n-void rollbackToSavepoint (String name);\n+void setSavepoint(String name);\n+void releaseSavepoint(String name);\n+void rollbackToSavepoint(String name);\n </programlisting>\n             <para>\n To set a savepoint, simply call <methodname>setSavepoint</methodname>, passing\n@@ -910,9 +900,9 @@ still set new savepoints. Savepoints will also be cleared after the current\n transaction is committed or rolled back.\n             </para>\n             <para>\n-If a savepoint is no longer needed, you can release any resources such as in\n-memory state and datastore resources by calling <methodname>releaseSavepoint\n-</methodname>. This method should not be called for savepoints that have been\n+If a savepoint is no longer needed, you can release any resources it is \n+consuming resources by calling <methodname>releaseSavepoint</methodname>. This \n+method should not be called for savepoints that have been\n released automatically through other means, such as commit of a transaction or\n rollback to a prior savepoint. While savepoints made after this savepoint will\n also be released, there are no other effects on the current transaction.\n@@ -930,26 +920,26 @@ import org.apache.openjpa.persistence.*;\n \n ...\n \n-OpenJPAEntityManager kem = OpenJPAPersistence.cast (em);\n-kem.getTransaction ().begin ();\n+OpenJPAEntityManager oem = OpenJPAPersistence.cast(em);\n+oem.getTransaction().begin();\n \n-Magazine mag = kem.find (Magazine.class, id);\n-mag.setPageCount (300);\n-kem.setSavepoint (\"pages\");\n+Magazine mag = oem.find(Magazine.class, id);\n+mag.setPageCount(300);\n+oem.setSavepoint(\"pages\");\n \n-mag.setPrice (mag.getPageCount () * pricePerPage);\n+mag.setPrice(mag.getPageCount() * pricePerPage);\n // we decide to release pages since price depends on pages.\n-kem.releaseSavepoint (\"pages\");\n-kem.setSavepoint (\"price\");\n+oem.releaseSavepoint(\"pages\");\n+oem.setSavepoint(\"price\");\n \n-mag.setPrice (testPrice);\n+mag.setPrice(testPrice);\n ...\n \n // we determine the test price is not good\n-kem.rollbackToSavepoint (\"price\");\n+oem.rollbackToSavepoint(\"price\");\n \n-// the price is now restored to mag.getPageCount () * pricePerPage\n-kem.getTransaction ().commit ();\n+// the price is now restored to mag.getPageCount() * pricePerPage\n+oem.getTransaction().commit();\n </programlisting>\n             </example>\n         </section>\n@@ -1000,6 +990,7 @@ implements savepoints by issuing a flush to the database.\n             </itemizedlist>\n         </section>\n     </section>\n+    <!--\n     <section id=\"ref_guide_enterprise_queryext\">\n         <title>\n             Query Language Extensions\n@@ -1020,7 +1011,6 @@ JPQL is a powerful, easy-to-use query language, but you may occasionally find it\n limiting in some way. To circumvent the limitations of JPQL, OpenJPA provides\n extensions to the JPQL language, and allows you to extend it as well.\n         </para>\n-        <!-- ### -->\n         <warning>\n             <para>\n The JPQL parser in this release does not yet allow extensions. They will be made\n@@ -1275,6 +1265,7 @@ Javadoc</ulink> for details.\n                 </itemizedlist>\n             </section>\n         </section>\n+        -->\n         <section id=\"ref_guide_enterprise_methodql\">\n             <title>\n                 MethodQL\n@@ -1311,36 +1302,23 @@ import org.apache.openjpa.persistence.*;\n // the class is in the candidate class' package or in the query imports, you\n // can omit the package; if the method is in the candidate class, you can omit\n // the class name and just specify the method name\n-OpenJPAEntityManager kem = OpenJPAPersistence.cast (emf);\n-OpenJPAQuery q = kem.createQuery (\"openjpa.MethodQL\", \"com.xyz.Finder.getByName\");\n+OpenJPAEntityManager oem = OpenJPAPersistence.cast(emf);\n+OpenJPAQuery q = oem.createQuery(\"openjpa.MethodQL\", \"com.xyz.Finder.getByName\");\n \n // set the type of objects that the method returns\n-q.setResultClass (Person.class);\n+q.setResultClass(Person.class);\n \n // parameters are passed the same way as in standard queries\n-q.setParameter (\"firstName\", \"Fred\").setParameter (\"lastName\", \"Lucas\");\n+q.setParameter(\"firstName\", \"Fred\").setParameter(\"lastName\", \"Lucas\");\n \n // this executes your method to get the results\n-List results = q.getResultList ();\n+List results = q.getResultList();\n </programlisting>\n             <para>\n For datastore queries, the method must have the following signature:\n             </para>\n <programlisting>\n-public static \n-<ulink url=\"../apidocs/org/apache/openjpa/lib/rop/ResultObjectProvider.html\">ResultObjectProvider\n-</ulink>\n- xxx(\n-<ulink url=\"../apidocs/org/apache/openjpa/kernel/StoreContext.html\">StoreContext\n-</ulink>\n- ctx, \n-    \n-<ulink url=\"../apidocs/org/apache/openjpa/meta/ClassMetaData.html\">ClassMetaData\n-</ulink>\n- meta, boolean subclasses, Map params, \n-<ulink url=\"../apidocs/org/apache/openjpa/kernel/FetchConfiguration.html\">FetchConfiguration\n-</ulink>\n- fetch)\n+public static <ulink url=\"../apidocs/org/apache/openjpa/lib/rop/ResultObjectProvider.html\">ResultObjectProvider</ulink> xxx(<ulink url=\"../apidocs/org/apache/openjpa/kernel/StoreContext.html\">StoreContext</ulink> ctx, <ulink url=\"../apidocs/org/apache/openjpa/meta/ClassMetaData.html\">ClassMetaData</ulink> meta, boolean subclasses, Map params, <ulink url=\"../apidocs/org/apache/openjpa/kernel/FetchConfiguration.html\">FetchConfiguration </ulink> fetch)\n </programlisting>\n             <para>\n The returned result object provider should produce objects of the candidate\n@@ -1354,24 +1332,16 @@ In-memory execution is slightly different, taking in one object at a time and\n returning a boolean on whether the object matches the query:\n             </para>\n <programlisting>\n-public static boolean xxx(\n-<ulink url=\"../apidocs/org/apache/openjpa/kernel/StoreContext.html\">StoreContext\n-</ulink>\n- ctx, \n-<ulink url=\"../apidocs/org/apache/openjpa/meta/ClassMetaData.html\">ClassMetaData\n-</ulink>\n- meta, \n-    boolean subclasses, Object obj, Map params, \n-<ulink url=\"../apidocs/org/apache/openjpa/kernel/FetchConfiguration.html\">FetchConfiguration\n-</ulink>\n- fetch)\n+public static boolean xxx(<ulink url=\"../apidocs/org/apache/openjpa/kernel/StoreContext.html\">StoreContext</ulink> ctx, <ulink url=\"../apidocs/org/apache/openjpa/meta/ClassMetaData.html\">ClassMetaData</ulink> meta, boolean subclasses, Object obj, Map params, <ulink url=\"../apidocs/org/apache/openjpa/kernel/FetchConfiguration.html\">FetchConfiguration</ulink> fetch)\n </programlisting>\n             <para>\n In both method versions, the given <literal>params</literal> map contains the\n names and values of all the parameters for the query.\n             </para>\n         </section>\n+    <!--\n     </section>\n+    -->\n     <section id=\"ref_guide_sequence\">\n         <title>\n             Generators\n@@ -1398,7 +1368,7 @@ including the current persistence environment, the JDBC <classname>DataSource\n <ulink url=\"../apidocs/org/apache/openjpa/jdbc/kernel/AbstractJDBCSeq.html\">\n <classname>org.apache.openjpa.jdbc.kernel.AbstractJDBCSeq</classname></ulink>\n helps you create custom JDBC-based sequences. OpenJPA also supplies the\n-following built-in <classname>Seq</classname> s:\n+following built-in <classname>Seq</classname>s:\n         </para>\n         <itemizedlist>\n             <listitem>\n@@ -1418,11 +1388,10 @@ alias for the\n class. The <classname>TableJDBCSeq</classname> uses a special single-row table\n to store a global sequence number. If the table does not already exist, it is\n created the first time you run the\n-<link linkend=\"ref_guide_mapping_mappingtool\"> mapping tool</link>'s on a class\n-that requires it. You can also use the class' <methodname>main</methodname>\n-method or the <literal>sequencetable</literal> shell/bat script to manipulate\n-the table; see the <methodname>TableJDBCSeq.main</methodname> method Javadoc for\n-usage details.\n+<link linkend=\"ref_guide_mapping_mappingtool\">mapping tool</link> on a class\n+that requires it. You can also use the class's <methodname>main</methodname>\n+method to manipulate the table; see the \n+<methodname>TableJDBCSeq.main</methodname> method Javadoc for usage details.\n                 </para>\n                 <para>\n This <classname>Seq</classname> has the following properties:\n@@ -1480,8 +1449,8 @@ OPENJPA_SEQUENCES_TABLE</literal>. It also adds the following properties:\n                     <listitem>\n                         <para>\n <literal>IgnoreUnmapped</literal>: Whether to ignore unmapped base classes, and\n-instead use one row per least-derived mapped class. Defaults to <literal>false\n-</literal>.\n+instead use one row per least-derived mapped class. Defaults to <literal>\n+false</literal>.\n                         </para>\n                     </listitem>\n                     <listitem>\n@@ -1496,8 +1465,7 @@ primary key value of each row, rather than the full class name. Defaults to\n As with the <classname>TableJDBCSeq</classname>, the <classname>\n ClassTableJDBCSeq</classname> creates its table automatically during mapping\n tool runs. However, you can manually manipulate the table through the class'\n-<methodname>main</methodname> method, or through the <literal>\n-classsequencetable</literal> shell/bat script. See the Javadoc for the\n+<methodname>main</methodname> method. See the Javadoc for the\n <methodname> ClassTableJDBCSeq.main</methodname> method for usage details.\n                 </para>\n             </listitem>\n@@ -1523,18 +1491,16 @@ rather than a fixed pattern of one row per class. Its table defaults to\n                 <itemizedlist>\n                     <listitem>\n                         <para>\n-<literal>PrimaryKeyValue</literal>: The primary key value used by this\n-instance.\n+<literal>PrimaryKeyValue</literal>: The primary key value used by this instance.\n                         </para>\n                     </listitem>\n                 </itemizedlist>\n                 <para>\n As with the <classname>TableJDBCSeq</classname>, the <classname>\n ValueTableJDBCSeq</classname> creates its table automatically during mapping\n tool runs. However, you can manually manipulate the table through the class'\n-<methodname>main</methodname> method, or through the <literal>\n-valuesequencetable</literal> shell/bat script. See the Javadoc for the\n-<methodname> ValueTableJDBCSeq.main</methodname> method for usage details.\n+<methodname>main</methodname> method. See the Javadoc for the\n+<methodname>ValueTableJDBCSeq.main</methodname> method for usage details.\n                 </para>\n             </listitem>\n             <listitem>\n@@ -1573,8 +1539,7 @@ properties:\n                     </listitem>\n                     <listitem>\n                         <para>\n-<literal>Increment</literal>: The amount the sequence increments. Defaults to\n-1.\n+<literal>Increment</literal>: The amount the sequence increments. Defaults to 1.\n                         </para>\n                     </listitem>\n                     <listitem>\n@@ -1610,7 +1575,7 @@ You can use JPA <literal>SequenceGenerator</literal>s to describe any built-in\n implementation. Set the <literal>sequenceName</literal> attribute to a plugin\n string describing your choice. See\n <xref linkend=\"jpa_overview_mapping_sequence\"/> in the JPA Overview for\n-details on defining <literal>SequenceGenerator</literal> s.\n+details on defining <literal>SequenceGenerator</literal>s.\n         </para>\n         <para>\n See <xref linkend=\"ref_guide_conf_plugins\"/> for plugin string formatting.\n@@ -1622,8 +1587,8 @@ See <xref linkend=\"ref_guide_conf_plugins\"/> for plugin string formatting.\n <programlisting>\n @Entity\n @Table(name=\"AUTO\")\n-public class Author\n-{\n+public class Author {\n+\n     @Id\n     @GeneratedValue(strategy=GenerationType.SEQUENCE, generator=\"AuthorSeq\")\n     @SequenceGenerator(name=\"AuthorSeq\" sequence=\"table(Table=AUTO_SEQ, Increment=100)\")\n@@ -1685,7 +1650,7 @@ OpenJPA allows you to access named generators at runtime through the\n <methodname>OpenJPAEntityManager.getNamedGenerator</methodname> method:\n             </para>\n <programlisting>\n-public Generator getNamedGenerator (String name);\n+public Generator getNamedGenerator(String name);\n </programlisting>\n             <para>\n The returned \n@@ -1728,8 +1693,8 @@ and more. Where appropriate, event notifications include the set of\n persistence-capable objects participating in the transaction.\n         </para>\n <programlisting>\n-public void addTransactionListener (Object listener);\n-public void removeTransactionListener (Object listener);\n+public void addTransactionListener(Object listener);\n+public void removeTransactionListener(Object listener);\n </programlisting>\n         <para>\n These <classname>OpenJPAEntityManager</classname> methods allow you to add and"},{"sha":"7129d3c9204e5f23186c060f8da48862c290aaf9","filename":"openjpa-project/src/doc/manual/supported_databases.xml","status":"modified","additions":224,"deletions":248,"changes":472,"blob_url":"https://github.com/apache/openjpa/blob/afe9acd57616e633d7c4a2278a3885621ba7e3e6/openjpa-project/src/doc/manual/supported_databases.xml","raw_url":"https://github.com/apache/openjpa/raw/afe9acd57616e633d7c4a2278a3885621ba7e3e6/openjpa-project/src/doc/manual/supported_databases.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/supported_databases.xml?ref=afe9acd57616e633d7c4a2278a3885621ba7e3e6","patch":"@@ -68,9 +68,7 @@ by OpenJPA.\n                         6.0\n                     </entry>\n                     <entry colname=\"drivname\">\n-                        \n-            Borland JDataStore\n-          \n+                        Borland JDataStore\n                     </entry>\n                     <entry colname=\"drivversion\">\n                         6.0\n@@ -84,9 +82,7 @@ by OpenJPA.\n                         8.1\n                     </entry>\n                     <entry colname=\"drivname\">\n-                        \n-            IBM DB2 JDBC Universal Driver\n-          \n+                        IBM DB2 JDBC Universal Driver\n                     </entry>\n                     <entry colname=\"drivversion\">\n                         1.0.581\n@@ -100,9 +96,7 @@ by OpenJPA.\n                         8.62\n                     </entry>\n                     <entry colname=\"drivname\">\n-                        \n-            Empress Category 2 JDBC Driver\n-          \n+                        Empress Category 2 JDBC Driver\n                     </entry>\n                     <entry colname=\"drivversion\">\n                         8.62\n@@ -172,9 +166,7 @@ by OpenJPA.\n                         9.0 (a.k.a. \"2000\")\n                     </entry>\n                     <entry colname=\"drivname\">\n-                        \n-            DataDirect SequeLink\n-          \n+                        DataDirect SequeLink\n                     </entry>\n                     <entry colname=\"drivversion\">\n                         5.4.0038\n@@ -185,9 +177,7 @@ by OpenJPA.\n                         Microsoft SQL Server\n                     </entry>\n                     <entry colname=\"dbversion\">\n-                        \n-            9.00.1399 (SQL Server 2005)\n-          \n+                        9.00.1399 (SQL Server 2005)\n                     </entry>\n                     <entry colname=\"drivname\">\n                         SQLServer\n@@ -204,9 +194,7 @@ by OpenJPA.\n                         7.0\n                     </entry>\n                     <entry colname=\"drivname\">\n-                        \n-            DataDirect SequeLink\n-          \n+                        DataDirect SequeLink\n                     </entry>\n                     <entry colname=\"drivversion\">\n                         5.4.0038\n@@ -270,9 +258,7 @@ by OpenJPA.\n                 </row>\n                 <row>\n                     <entry colname=\"dbname\">\n-                        \n-            Sybase Adaptive Server Enterprise\n-          \n+                        Sybase Adaptive Server Enterprise\n                     </entry>\n                     <entry colname=\"dbversion\">\n                         12.5\n@@ -318,19 +304,20 @@ openjpa.ConnectionURL: jdbc:interbase://SERVER_NAME:SERVER_PORT/DB_PATH\n             <title>\n                 Known issues with Interbase\n             </title>\n-            <para>\n-<itemizedlist><listitem><para> Interbase does not support record locking, so\n+            <itemizedlist>\n+                <listitem>\n+                    <para>\n+Interbase does not support record locking, so\n datastore transactions cannot use the pessimistic lock manager.\n-                        </para>\n-                    </listitem>\n-                    <listitem>\n-                        <para>\n+                    </para>\n+                </listitem>\n+                <listitem>\n+                    <para>\n Interbase does not support the <literal>LOWER</literal>, <literal>SUBSTRING\n </literal>, or <literal>INSTR</literal> SQL functions>\n-                        </para>\n-                    </listitem>\n-                </itemizedlist>\n-            </para>\n+                    </para>\n+                </listitem>\n+            </itemizedlist>\n         </section>\n     </section>\n     <section id=\"dbsupport_jdatastore\">\n@@ -364,24 +351,24 @@ openjpa.ConnectionURL: jdbc:db2://SERVER_NAME:SERVER_PORT/DB_NAME\n             <title>\n                 Known issues with DB2\n             </title>\n-            <para>\n-<itemizedlist><listitem><para>Floats and doubles may lose precision when\n-stored.\n-                        </para>\n-                    </listitem>\n-                    <listitem>\n-                        <para>\n+            <itemizedlist>\n+                <listitem>\n+                    <para>\n+Floats and doubles may lose precision when stored.\n+                    </para>\n+                </listitem>\n+                <listitem>\n+                    <para>\n Empty char values are stored as NULL.\n-                        </para>\n-                    </listitem>\n-                    <listitem>\n-                        <para>\n+                    </para>\n+                </listitem>\n+                <listitem>\n+                    <para>\n Fields of type BLOB and CLOB are limited to 1M. This number can be increased by\n extending <classname>DB2Dictionary</classname>.\n-                        </para>\n-                    </listitem>\n-                </itemizedlist>\n-            </para>\n+                    </para>\n+                </listitem>\n+            </itemizedlist>\n         </section>\n     </section>\n     <section id=\"dbsupport_empress\">\n@@ -401,19 +388,20 @@ openjpa.ConnectionURL: jdbc:empress://SERVER=yourserver;PORT=6322;DATABASE=yourd\n             <title>\n                 Known issues with Empress\n             </title>\n-            <para>\n-<itemizedlist><listitem><para> Empress enforces pessimistic semantics (lock on\n+            <itemizedlist>\n+                <listitem>\n+                    <para>\n+Empress enforces pessimistic semantics (lock on\n read) when not using <literal>AllowConcurrentRead</literal> property (which\n bypasses row locking) for <classname>EmpressDictionary</classname>.\n-                        </para>\n-                    </listitem>\n-                    <listitem>\n-                        <para>\n+                    </para>\n+                </listitem>\n+                <listitem>\n+                    <para>\n Only the category 2 non-local driver is supported.\n-                        </para>\n-                    </listitem>\n-                </itemizedlist>\n-            </para>\n+                    </para>\n+                </listitem>\n+            </itemizedlist>\n         </section>\n     </section>\n     <section id=\"dbsupport_hypersonic\">\n@@ -433,20 +421,15 @@ openjpa.ConnectionURL: jdbc:hsqldb:DB_NAME\n             <title>\n                 Known issues with Hypersonic\n             </title>\n-            <para>\n-<itemizedlist><listitem><para> Hypersonic does not properly support foreign key\n-constraints.\n-                        </para>\n-                    </listitem>\n-                    <listitem>\n-                        <para>\n+            <itemizedlist>\n+                <listitem>\n+                    <para>\n Hypersonic does not support pessimistic locking, so non-optimistic transactions\n will fail unless the <literal>SimulateLocking</literal> property is set for the\n <link linkend=\"openjpa.jdbc.DBDictionary\"> openjpa.jdbc.DBDictionary</link>\n-                        </para>\n-                    </listitem>\n-                </itemizedlist>\n-            </para>\n+                    </para>\n+                </listitem>\n+            </itemizedlist>\n         </section>\n     </section>\n     <section id=\"dbsupport_firebird\">\n@@ -466,24 +449,19 @@ openjpa.ConnectionURL: jdbc:firebirdsql://SERVER_NAME:SERVER_PORT/DB_PATH\n             <title>\n                 Known issues with Firebird\n             </title>\n-            <para>\n-<itemizedlist><listitem><para> The Firebird JDBC driver does not have proper\n-support for batch updates, so batch updates are disabled.\n-                        </para>\n-                    </listitem>\n-                    <listitem>\n-                        <para>\n+            <itemizedlist>\n+                <listitem>\n+                    <para>\n Firebird does not support auto-increment columns.\n-                        </para>\n-                    </listitem>\n-                    <listitem>\n-                        <para>\n+                    </para>\n+                </listitem>\n+                <listitem>\n+                    <para>\n Firebird does not support the <literal>LOWER</literal>, <literal>SUBSTRING\n </literal>, or <literal>INSTR</literal> SQL functions.\n-                        </para>\n-                    </listitem>\n-                </itemizedlist>\n-            </para>\n+                    </para>\n+                </listitem>\n+            </itemizedlist>\n         </section>\n     </section>\n     <section id=\"dbsupport_informix\">\n@@ -504,12 +482,13 @@ openjpa.ConnectionURL: \\\n             <title>\n                 Known issues with Informix\n             </title>\n-            <para>\n-<itemizedlist><listitem><para> none\n-                        </para>\n-                    </listitem>\n-                </itemizedlist>\n-            </para>\n+            <itemizedlist>\n+                <listitem>\n+                    <para>\n+None\n+                    </para>\n+                </listitem>\n+            </itemizedlist>\n         </section>\n     </section>\n     <section id=\"dbsupport_intersystems_cache\">\n@@ -529,13 +508,14 @@ openjpa.ConnectionURL: jdbc:Cache://SERVER_NAME:SERVER_PORT/DB_NAME\n             <title>\n                 Known issues with InterSystems Cache\n             </title>\n-            <para>\n-<itemizedlist><listitem><para> Support for Cache is done via SQL access over\n-JDBC, not through their object database APIs.\n-                        </para>\n-                    </listitem>\n-                </itemizedlist>\n-            </para>\n+            <itemizedlist>\n+                <listitem>\n+                    <para>\n+Support for Cache is done via SQL access over JDBC, not through their object \n+database APIs.\n+                    </para>\n+                </listitem>\n+            </itemizedlist>\n         </section>\n     </section>\n     <section id=\"dbsupport_access\">\n@@ -555,13 +535,13 @@ openjpa.ConnectionURL: jdbc:sequelink://SERVER_NAME:SERVER_PORT\n             <title>\n                 Known issues with Microsoft Access\n             </title>\n-            <para>\n-<itemizedlist><listitem><para>Using the Sun JDBC-ODBC bridge to connect is not\n-supported.\n-                        </para>\n-                    </listitem>\n-                </itemizedlist>\n-            </para>\n+            <itemizedlist>\n+                <listitem>\n+                    <para>\n+Using the Sun JDBC-ODBC bridge to connect is not supported.\n+                    </para>\n+                </listitem>\n+            </itemizedlist>\n         </section>\n     </section>\n     <section id=\"dbsupport_sqlserver\">\n@@ -582,42 +562,43 @@ openjpa.ConnectionURL: \\\n             <title>\n                 Known issues with SQL Server\n             </title>\n-            <para>\n-<itemizedlist><listitem><para> SQL Server date fields are accurate only to the\n-nearest 3 milliseconds, possibly resulting in precision loss in stored dates.\n-                        </para>\n-                    </listitem>\n-                    <listitem>\n-                        <para>\n+            <itemizedlist>\n+                <listitem>\n+                    <para>\n+SQL Server date fields are accurate only to the nearest 3 milliseconds, \n+possibly resulting in precision loss in stored dates.\n+                    </para>\n+                </listitem>\n+                <listitem>\n+                    <para>\n The ConnectionURL must always contain the \" <literal>selectMethod=cursor\n </literal> \" string.\n-                        </para>\n-                    </listitem>\n-                    <listitem>\n-                        <para>\n+                    </para>\n+                </listitem>\n+                <listitem>\n+                    <para>\n Adding <literal>sendStringParametersAsUnicode=false</literal> to the\n ConnectionURL may significantly increase performance.\n-                        </para>\n-                    </listitem>\n-                    <listitem>\n-                        <para>\n+                    </para>\n+                </listitem>\n+                <listitem>\n+                    <para>\n The Microsoft SQL Server driver only emulates batch updates. The DataDirect JDBC\n driver has true support for batch updates, and may result in a significant\n performance gain.\n-                        </para>\n-                    </listitem>\n-                    <listitem>\n-                        <para>\n+                    </para>\n+                </listitem>\n+                <listitem>\n+                    <para>\n Floats and doubles may lose precision when stored.\n-                        </para>\n-                    </listitem>\n-                    <listitem>\n-                        <para>\n+                    </para>\n+                </listitem>\n+                <listitem>\n+                    <para>\n <literal>TEXT</literal> columns cannot be used in queries.\n-                        </para>\n-                    </listitem>\n-                </itemizedlist>\n-            </para>\n+                    </para>\n+                </listitem>\n+            </itemizedlist>\n         </section>\n     </section>\n     <section id=\"dbsupport_foxpro\">\n@@ -637,13 +618,13 @@ openjpa.ConnectionURL: jdbc:sequelink://SERVER_NAME:SERVER_PORT\n             <title>\n                 Known issues with Microsoft FoxPro\n             </title>\n-            <para>\n-<itemizedlist><listitem><para>Using the Sun JDBC-ODBC bridge to connect is not\n-supported.\n-                        </para>\n-                    </listitem>\n-                </itemizedlist>\n-            </para>\n+            <itemizedlist>\n+                <listitem>\n+                    <para>\n+Using the Sun JDBC-ODBC bridge to connect is not supported.\n+                    </para>\n+                </listitem>\n+            </itemizedlist>\n         </section>\n     </section>\n     <section id=\"dbsupport_mysql\">\n@@ -663,52 +644,52 @@ openjpa.ConnectionURL: jdbc:mysql://SERVER_NAME/DB_NAME\n             <title>\n                 Known issues with MySQL\n             </title>\n-            <para>\n-<itemizedlist><listitem><para> The default table types that MySQL uses do not\n-support transactions, which will prevent OpenJPA from being able to roll back\n-transactions. Use the <literal>InnoDB</literal> table type for any tables that\n-OpenJPA will access.\n-                        </para>\n-                    </listitem>\n-                    <listitem>\n-                        <para>\n+            <itemizedlist>\n+                <listitem>\n+                    <para> \n+The default table types that MySQL uses do not support transactions, which will\n+prevent OpenJPA from being able to roll back transactions. Use the \n+<literal>InnoDB</literal> table type for any tables that OpenJPA will access.\n+                    </para>\n+                </listitem>\n+                <listitem>\n+                    <para>\n MySQL does not support sub-selects in versions prior to 4.1, and are disabled by\n default. Some operations (such as the <function>isEmpty()</function> method in a\n query) will fail due to this. If you are using MySQL 4.1 or later, you can lift\n this restriction by setting the <literal>SupportsSubselect=true</literal>\n parameter of the <link linkend=\"openjpa.jdbc.DBDictionary\">\n openjpa.jdbc.DBDictionary</link> property.\n-                        </para>\n-                    </listitem>\n-                    <listitem>\n-                        <para>\n+                    </para>\n+                </listitem>\n+                <listitem>\n+                    <para>\n Rollback due to database error or optimistic lock violation is not supported\n unless the table type is one of the MySQL transactional types. Explicit calls to\n <function>rollback()</function> before a transaction has been committed,\n however, are always supported.\n-                        </para>\n-                    </listitem>\n-                    <listitem>\n-                        <para>\n+                    </para>\n+                </listitem>\n+                <listitem>\n+                    <para>\n Floats and doubles may lose precision when stored in some datastores.\n-                        </para>\n-                    </listitem>\n-                    <listitem>\n-                        <para>\n+                    </para>\n+                </listitem>\n+                <listitem>\n+                    <para>\n When storing a field of type <classname>java.math.BigDecimal</classname>, some\n datastores will add extraneous trailing 0 characters, causing an equality\n mismatch between the field that is stored and the field that is retrieved.\n-                        </para>\n-                    </listitem>\n-                    <listitem>\n-                        <para>\n+                    </para>\n+                </listitem>\n+                <listitem>\n+                    <para>\n Some version of the MySQL JDBC driver have a bug that prevents OpenJPA from\n being able to interrogate the database for foreign keys. Version 3.0.14 (or\n higher) of the MySQL driver is required in order to get around this bug.\n-                        </para>\n-                    </listitem>\n-                </itemizedlist>\n-            </para>\n+                    </para>\n+                </listitem>\n+            </itemizedlist>\n         </section>\n     </section>\n     <section id=\"dbsupport_oracle\">\n@@ -740,66 +721,59 @@ the most intensive queries.\n                     Using Oracle Hints\n                 </title>\n <programlisting>\n-Query query = pm.createQuery (...);\n-query.addExtension (org.apache.openjpa.jdbc.sql.OracleDictionary.SELECT_HINT,\n-    \"/*+ first_rows(100) */\");\n-List results = (List) query.execute ();\n-</programlisting>\n-<programlisting>\n-Query query = em.createQuery (...);\n-query.setHint (org.apache.openjpa.jdbc.sql.OracleDictionary.SELECT_HINT,\n-    \"/*+ first_rows(100) */\");\n-List results = query.getResultList ();\n+Query query = em.createQuery(...);\n+query.setHint(\"openjpa.hint.OracleSelectHint\", \"/*+ first_rows(100) */\");\n+List results = query.getResultList();\n </programlisting>\n             </example>\n         </section>\n         <section id=\"dbsupport_oracle_issues\">\n             <title>\n                 Known issues with Oracle\n             </title>\n-            <para>\n-<itemizedlist><listitem><para> The Oracle JDBC driver has significant\n-differences between different versions. It is important to use the officially\n-supported version of the driver (10.2.0.1.0), which is backward compatible with\n-previous versions of the Oracle server. It can be downloaded from\n+            <itemizedlist>\n+                <listitem>\n+                    <para> \n+The Oracle JDBC driver has significant differences between different versions. \n+It is important to use the officially supported version of the driver \n+(10.2.0.1.0), which is backward compatible with previous versions of the Oracle\n+server. It can be downloaded from \n <ulink url=\"http://www.oracle.com/technology/software/tech/java/sqlj_jdbc/htdocs/jdbc101040.html\">\n-http://www.oracle.com/technology/software/tech/java/sqlj_jdbc/htdocs/jdbc101040.html\n-</ulink>.\n-                        </para>\n-                    </listitem>\n-                    <listitem>\n-                        <para>\n+http://www.oracle.com/technology/software/tech/java/sqlj_jdbc/htdocs/jdbc101040.html</ulink>.\n+                    </para>\n+                </listitem>\n+                <listitem>\n+                    <para>\n For VARCHAR fields, <literal>null</literal> and a blank string are equivalent.\n This means that an object that stores a null string field will have it get read\n back as a blank string.\n-                        </para>\n-                    </listitem>\n-                    <listitem>\n-                        <para>\n+                    </para>\n+                </listitem>\n+                <listitem>\n+                    <para>\n Oracle corp's JDBC driver for Oracle has only limited support for batch updates.\n The result for OpenJPA is that in some cases, the exact object that failed an\n optimistic lock check cannot be determined, and OpenJPA will throw an\n <classname>OptimisticVerificationException</classname> with more failed objects\n than actually failed.\n-                        </para>\n-                    </listitem>\n-                    <listitem>\n-                        <para>\n+                    </para>\n+                </listitem>\n+                <listitem>\n+                    <para>\n Oracle cannot store numbers with more than 38 digits in numeric columns.\n-                        </para>\n-                    </listitem>\n-                    <listitem>\n-                        <para>\n+                    </para>\n+                </listitem>\n+                <listitem>\n+                    <para>\n Floats and doubles may lose precision when stored.\n-                        </para>\n-                    </listitem>\n-                    <listitem>\n-                        <para>\n+                    </para>\n+                </listitem>\n+                <listitem>\n+                    <para>\n CLOB columns cannot be used in queries.\n-                        </para>\n-                    </listitem>\n-                </itemizedlist>\n-            </para>\n+                    </para>\n+                </listitem>\n+            </itemizedlist>\n         </section>\n     </section>\n     <section id=\"dbsupport_pointbase\">\n@@ -820,14 +794,15 @@ openjpa.ConnectionURL: \\\n             <title>\n                 Known issues with Pointbase\n             </title>\n-            <para>\n-<itemizedlist><listitem><para> Fields of type BLOB and CLOB are limited to 1M.\n-This number can be increased by extending <classname>PointbaseDictionary\n-</classname>.\n-                        </para>\n-                    </listitem>\n-                </itemizedlist>\n-            </para>\n+            <itemizedlist>\n+                <listitem>\n+                    <para> \n+Fields of type BLOB and CLOB are limited to 1M.  Set the <literal>BlobTypeName\n+</literal> and/or <literal>ClobTypeName</literal> properties of the \n+<literal>openjpa.jdbc.DBDictionary</literal> setting to override.  \n+                    </para>\n+                </listitem>\n+            </itemizedlist>\n         </section>\n     </section>\n     <section id=\"dbsupport_postgresql\">\n@@ -847,23 +822,23 @@ openjpa.ConnectionURL: jdbc:postgresql://SERVER_NAME:5432/DB_NAME\n             <title>\n                 Known issues with PostgreSQL\n             </title>\n-            <para>\n-<itemizedlist><listitem><para> Floats and doubles may lose precision when\n-stored.\n-                        </para>\n-                    </listitem>\n-                    <listitem>\n-                        <para>\n+            <itemizedlist>\n+                <listitem>\n+                    <para>\n+Floats and doubles may lose precision when stored.\n+                    </para>\n+                </listitem>\n+                <listitem>\n+                    <para>\n PostgreSQL cannot store very low and very high dates.\n-                        </para>\n-                    </listitem>\n-                    <listitem>\n-                        <para>\n+                    </para>\n+                </listitem>\n+                <listitem>\n+                    <para>\n Empty string/char values are stored as NULL.\n-                        </para>\n-                    </listitem>\n-                </itemizedlist>\n-            </para>\n+                    </para>\n+                </listitem>\n+            </itemizedlist>\n         </section>\n     </section>\n     <section id=\"dbsupport_sybase\">\n@@ -884,35 +859,36 @@ openjpa.ConnectionURL: \\\n             <title>\n                 Known issues with Sybase\n             </title>\n-            <para>\n-<itemizedlist><listitem><para> The \" <literal>DYNAMIC_PREPARE</literal> \"\n-parameter of the Sybase JDBC driver cannot be used with OpenJPA.\n-                        </para>\n-                    </listitem>\n-                    <listitem>\n-                        <para>\n+            <itemizedlist>\n+                <listitem>\n+                    <para> \n+The \"<literal>DYNAMIC_PREPARE</literal>\" parameter of the Sybase JDBC driver \n+cannot be used with OpenJPA.\n+                    </para>\n+                </listitem>\n+                <listitem>\n+                    <para>\n Datastore locking cannot be used when manipulating many-to-many relations using\n the default OpenJPA schema created by the schematool, unless an auto-increment\n primary key field is manually added to the table.\n-                        </para>\n-                    </listitem>\n-                    <listitem>\n-                        <para>\n+                    </para>\n+                </listitem>\n+                <listitem>\n+                    <para>\n Persisting a zero-length string results in a string with a single space\n characted being returned from Sybase, Inc.'s JDBC driver.\n-                        </para>\n-                    </listitem>\n-                    <listitem>\n-                        <para>\n+                    </para>\n+                </listitem>\n+                <listitem>\n+                    <para>\n The <literal>BE_AS_JDBC_COMPLIANT_AS_POSSIBLE</literal> is required in order to\n use datastore (pessimistic) locking. Failure to set this property may lead to\n obscure errors like \" <literal>FOR UPDATE can not be used in a SELECT which is\n not part of the declaration of a cursor or which is not inside a stored\n procedure.</literal> \".\n-                        </para>\n-                    </listitem>\n-                </itemizedlist>\n-            </para>\n+                    </para>\n+                </listitem>\n+            </itemizedlist>\n         </section>\n     </section>\n </appendix>"}]}

