{"sha":"b01f5718f9ee88246f3f771c7b63306802732ce7","node_id":"MDY6Q29tbWl0MjA2MzY0OmIwMWY1NzE4ZjllZTg4MjQ2ZjNmNzcxYzdiNjMzMDY4MDI3MzJjZTc=","commit":{"author":{"name":"Milosz Tylenda","email":"mtylenda@apache.org","date":"2010-03-07T13:15:17Z"},"committer":{"name":"Milosz Tylenda","email":"mtylenda@apache.org","date":"2010-03-07T13:15:17Z"},"message":"OPENJPA-1510: Move map related sections into 7.8 Maps section - they were out of context.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@919984 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f654ebf3d496401497ec2e4a68cb7e4aed6a0335","url":"https://api.github.com/repos/apache/openjpa/git/trees/f654ebf3d496401497ec2e4a68cb7e4aed6a0335"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b01f5718f9ee88246f3f771c7b63306802732ce7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b01f5718f9ee88246f3f771c7b63306802732ce7","html_url":"https://github.com/apache/openjpa/commit/b01f5718f9ee88246f3f771c7b63306802732ce7","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b01f5718f9ee88246f3f771c7b63306802732ce7/comments","author":null,"committer":null,"parents":[{"sha":"b9a230567ec725cd06f5c0db326572907f42ea52","url":"https://api.github.com/repos/apache/openjpa/commits/b9a230567ec725cd06f5c0db326572907f42ea52","html_url":"https://github.com/apache/openjpa/commit/b9a230567ec725cd06f5c0db326572907f42ea52"}],"stats":{"total":240,"additions":120,"deletions":120},"files":[{"sha":"7d977543d96f54b7174043aa491214297dc9e37a","filename":"openjpa-project/src/doc/manual/ref_guide_mapping.xml","status":"modified","additions":120,"deletions":120,"changes":240,"blob_url":"https://github.com/apache/openjpa/blob/b01f5718f9ee88246f3f771c7b63306802732ce7/openjpa-project/src/doc/manual/ref_guide_mapping.xml","raw_url":"https://github.com/apache/openjpa/raw/b01f5718f9ee88246f3f771c7b63306802732ce7/openjpa-project/src/doc/manual/ref_guide_mapping.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_mapping.xml?ref=b01f5718f9ee88246f3f771c7b63306802732ce7","patch":"@@ -2244,6 +2244,126 @@ We detailed the <literal>ContainerTable</literal> annotation in\n <xref linkend=\"ref_guide_mapping_jpa_coll_table\"/>. Custom map mappings may\n also use this annotation to represent a map table.\n             </para>\n+    <section id=\"ref_guide_mapping_jpa_map_keycols\">\n+        <title>Key Columns</title>\n+        <indexterm zone=\"ref_guide_mapping_jpa_map_keycols\">\n+            <primary>KeyColumn</primary>\n+            <seealso>mapping metadata</seealso>\n+        </indexterm>\n+        <para>\n+        Key columns serve the same role for map keys as the element\n+        join columns described in\n+        <xref linkend=\"ref_guide_mapping_jpa_coll_joincols\"/> serve for\n+        collection elements.  OpenJPA's\n+        <ulink url=\"../javadoc/org/apache/openjpa/persistence/jdbc/KeyColumn.html\">\n+        <classname>org.apache.openjpa.persistence.jdbc.KeyColumn</classname>\n+        </ulink> annotation represents a map key.  To map custom\n+        multi-column keys, use the\n+        <ulink url=\"../javadoc/org/apache/openjpa/persistence/jdbc/KeyColumns.html\">\n+        <classname>org.apache.openjpa.persistence.jdbc.KeyColumns</classname>\n+        </ulink> annotation, whose value is an array of <classname>KeyColumn</classname>s.\n+        </para>\n+        <para>\n+        A <classname>KeyColumn</classname> always resides in\n+        a container table, so it does not have the <literal>table</literal>\n+        property of a standard <classname>Column</classname>.  Otherwise, the\n+        <classname>KeyColumn</classname> and standard <classname>Column</classname>\n+        annotations are equivalent.  See\n+        <xref linkend=\"jpa_overview_mapping_column\"/> in the JPA\n+        Overview for a review of the <classname>Column</classname> annotation.\n+        </para>\n+    </section>\n+    <section id=\"ref_guide_mapping_jpa_map_keyjoincols\">\n+        <title>Key Join Columns</title>\n+        <indexterm zone=\"ref_guide_mapping_jpa_map_keyjoincols\">\n+            <primary>KeyJoinColumn</primary>\n+            <seealso>mapping metadata</seealso>\n+        </indexterm>\n+        <para>\n+        Key join columns are equivalent to standard JPA\n+        join columns, except that they represent a join to a map key entity rather than a direct relation.  You represent\n+        a key join column with OpenJPA's\n+        <ulink url=\"../javadoc/org/apache/openjpa/persistence/jdbc/KeyJoinColumn.html\">\n+        <classname>org.apache.openjpa.persistence.jdbc.KeyJoinColumn</classname></ulink> annotation.  To declare a compound join, enclose an\n+        array of <classname>KeyJoinColumn</classname>s in the\n+        <ulink url=\"../javadoc/org/apache/openjpa/persistence/jdbc/KeyJoinColumns.html\">\n+        <classname>org.apache.openjpa.persistence.jdbc.KeyJoinColumns</classname>\n+        </ulink> annotation.\n+        </para>\n+        <para>\n+        A <classname>KeyJoinColumn</classname> always resides in\n+        a container table, so it does not have the <literal>table</literal> property\n+        of a standard <classname>JoinColumn</classname>.  Like <classname>XJoinColumn</classname>s above,\n+        <classname>KeyJoinColumn</classname>s can reference a linked field\n+        rather than a static linked column.  Otherwise, the <classname>KeyJoinColumn</classname>\n+        and standard <classname>JoinColumn</classname> annotations are equivalent.  See\n+        <xref linkend=\"jpa_overview_mapping_rel\"/> in the JPA\n+        Overview for a review of the <classname>JoinColumn</classname> annotation.\n+        </para>\n+    </section>\n+    <section id=\"ref_guide_mapping_jpa_map_embedkey\">\n+        <title>Key Embedded Mapping</title>\n+        <indexterm zone=\"ref_guide_mapping_jpa_map_embedkey\">\n+            <primary>KeyEmbeddedMapping</primary>\n+            <seealso>mapping metadata</seealso>\n+        </indexterm>\n+        <para>\n+        The\n+        <ulink url=\"../javadoc/org/apache/openjpa/persistence/jdbc/KeyEmbeddedMapping.html\">\n+        <classname>org.apache.openjpa.persistence.jdbc.KeyEmbeddedMapping</classname>\n+        </ulink> annotation allows you to map your map field's embedded\n+        key type to your container table.  This annotation has exactly\n+        the same properties as the\n+        <classname>EmbeddedMapping</classname> annotation described\n+        <link linkend=\"ref_guide_mapping_jpa_embed\">above</link>.\n+        </para>\n+    </section>\n+    <section id=\"ref_guide_mapping_jpa_map_ex\">\n+        <title>Examples</title>\n+        <mediaobject>\n+            <imageobject>\n+                <!-- PNG image data, 410 x 266 (see README) -->\n+                <imagedata fileref=\"img/string-rel-map.png\" width=\"273px\"/>\n+            </imageobject>\n+        </mediaobject>\n+        <para>\n+        Map mapping in OpenJPA uses the same principles you saw in\n+        collection mapping.  The example below maps the <literal>\n+        Article.authors</literal> map according to the diagram above.\n+        </para>\n+        <example id=\"ref_guide_mapping_jpa_map_stringrelmap\">\n+            <title>String Key, Entity Value Map Mapping</title>\n+<programlisting>\n+package org.mag.pub;\n+\n+import org.apache.openjpa.persistence.*;\n+import org.apache.openjpa.persistence.jdbc.*;\n+\n+@Entity\n+@Table(name=\"AUTH\")\n+@DataStoreIdColumn(name=\"AID\", columnDefinition=\"INTEGER64\")\n+public class Author {\n+    ...\n+}\n+\n+package org.mag;\n+\n+@Entity\n+@Table(name=\"ART\")\n+public class Article {\n+    @Id private long id;\n+\n+    @PersistentMap\n+    @ContainerTable(name=\"ART_AUTHS\", joinColumns=@XJoinColumn(name=\"ART_ID\"))\n+    @KeyColumn(name=\"LNAME\")\n+    @ElementJoinColumn(name=\"AUTH_ID\")\n+    private Map&lt;String,Author&gt; authors;\n+\n+    ...\n+}\n+</programlisting>\n+                </example>\n+            </section>\n         </section>\n         <section id=\"ref_guide_mapping_jpa_constraints\">\n             <title>\n@@ -2861,126 +2981,6 @@ public class Employee {\n             </example>\n         </section>\n     </section>\n-    <section id=\"ref_guide_mapping_jpa_map_keycols\">\n-        <title>Key Columns</title>\n-        <indexterm zone=\"ref_guide_mapping_jpa_map_keycols\">\n-            <primary>KeyColumn</primary>\n-            <seealso>mapping metadata</seealso>\n-        </indexterm>\n-        <para>\n-        Key columns serve the same role for map keys as the element\n-        join columns described in\n-        <xref linkend=\"ref_guide_mapping_jpa_coll_joincols\"/> serve for\n-        collection elements.  OpenJPA's\n-        <ulink url=\"../javadoc/org/apache/openjpa/persistence/jdbc/KeyColumn.html\">\n-        <classname>org.apache.openjpa.persistence.jdbc.KeyColumn</classname>\n-        </ulink> annotation represents a map key.  To map custom\n-        multi-column keys, use the\n-        <ulink url=\"../javadoc/org/apache/openjpa/persistence/jdbc/KeyColumns.html\">\n-        <classname>org.apache.openjpa.persistence.jdbc.KeyColumns</classname>\n-        </ulink> annotation, whose value is an array of <classname>KeyColumn</classname>s.\n-        </para>\n-        <para>\n-        A <classname>KeyColumn</classname> always resides in\n-        a container table, so it does not have the <literal>table</literal>\n-        property of a standard <classname>Column</classname>.  Otherwise, the\n-        <classname>KeyColumn</classname> and standard <classname>Column</classname>\n-        annotations are equivalent.  See\n-        <xref linkend=\"jpa_overview_mapping_column\"/> in the JPA\n-        Overview for a review of the <classname>Column</classname> annotation.\n-        </para>\n-    </section>\n-    <section id=\"ref_guide_mapping_jpa_map_keyjoincols\">\n-        <title>Key Join Columns</title>\n-        <indexterm zone=\"ref_guide_mapping_jpa_map_keyjoincols\">\n-            <primary>KeyJoinColumn</primary>\n-            <seealso>mapping metadata</seealso>\n-        </indexterm>\n-        <para>\n-        Key join columns are equivalent to standard JPA\n-        join columns, except that they represent a join to a map key entity rather than a direct relation.  You represent\n-        a key join column with OpenJPA's\n-        <ulink url=\"../javadoc/org/apache/openjpa/persistence/jdbc/KeyJoinColumn.html\">\n-        <classname>org.apache.openjpa.persistence.jdbc.KeyJoinColumn</classname></ulink> annotation.  To declare a compound join, enclose an\n-        array of <classname>KeyJoinColumn</classname>s in the\n-        <ulink url=\"../javadoc/org/apache/openjpa/persistence/jdbc/KeyJoinColumns.html\">\n-        <classname>org.apache.openjpa.persistence.jdbc.KeyJoinColumns</classname>\n-        </ulink> annotation.\n-        </para>\n-        <para>\n-        A <classname>KeyJoinColumn</classname> always resides in\n-        a container table, so it does not have the <literal>table</literal> property\n-        of a standard <classname>JoinColumn</classname>.  Like <classname>XJoinColumn</classname>s above,\n-        <classname>KeyJoinColumn</classname>s can reference a linked field\n-        rather than a static linked column.  Otherwise, the <classname>KeyJoinColumn</classname>\n-        and standard <classname>JoinColumn</classname> annotations are equivalent.  See\n-        <xref linkend=\"jpa_overview_mapping_rel\"/> in the JPA\n-        Overview for a review of the <classname>JoinColumn</classname> annotation.\n-        </para>\n-    </section>\n-    <section id=\"ref_guide_mapping_jpa_map_embedkey\">\n-        <title>Key Embedded Mapping</title>\n-        <indexterm zone=\"ref_guide_mapping_jpa_map_embedkey\">\n-            <primary>KeyEmbeddedMapping</primary>\n-            <seealso>mapping metadata</seealso>\n-        </indexterm>\n-        <para>\n-        The\n-        <ulink url=\"../javadoc/org/apache/openjpa/persistence/jdbc/KeyEmbeddedMapping.html\">\n-        <classname>org.apache.openjpa.persistence.jdbc.KeyEmbeddedMapping</classname>\n-        </ulink> annotation allows you to map your map field's embedded\n-        key type to your container table.  This annotation has exactly\n-        the same properties as the\n-        <classname>EmbeddedMapping</classname> annotation described\n-        <link linkend=\"ref_guide_mapping_jpa_embed\">above</link>.\n-        </para>\n-    </section>\n-    <section id=\"ref_guide_mapping_jpa_map_ex\">\n-        <title>Examples</title>\n-        <mediaobject>\n-            <imageobject>\n-                <!-- PNG image data, 410 x 266 (see README) -->\n-                <imagedata fileref=\"img/string-rel-map.png\" width=\"273px\"/>\n-            </imageobject>\n-        </mediaobject>\n-        <para>\n-        Map mapping in OpenJPA uses the same principles you saw in\n-        collection mapping.  The example below maps the <literal>\n-        Article.authors</literal> map according to the diagram above.\n-        </para>\n-        <example id=\"ref_guide_mapping_jpa_map_stringrelmap\">\n-            <title>String Key, Entity Value Map Mapping</title>\n-<programlisting>\n-package org.mag.pub;\n-\n-import org.apache.openjpa.persistence.*;\n-import org.apache.openjpa.persistence.jdbc.*;\n-\n-@Entity\n-@Table(name=\"AUTH\")\n-@DataStoreIdColumn(name=\"AID\", columnDefinition=\"INTEGER64\")\n-public class Author {\n-    ...\n-}\n-\n-package org.mag;\n-\n-@Entity\n-@Table(name=\"ART\")\n-public class Article {\n-    @Id private long id;\n-\n-    @PersistentMap\n-    @ContainerTable(name=\"ART_AUTHS\", joinColumns=@XJoinColumn(name=\"ART_ID\"))\n-    @KeyColumn(name=\"LNAME\")\n-    @ElementJoinColumn(name=\"AUTH_ID\")\n-    private Map&lt;String,Author&gt; authors;\n-\n-    ...\n-}\n-</programlisting>\n-                </example>\n-            </section>\n     <section id=\"ref_guide_mapping_limits\">\n         <title>\n             Mapping Limitations"}]}

