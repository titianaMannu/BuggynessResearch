{"sha":"b0eefe6ea806dd9ca5681ff3783677edf9b1b37c","node_id":"MDY6Q29tbWl0MjA2MzY0OmIwZWVmZTZlYTgwNmRkOWNhNTY4MWZmMzc4MzY3N2VkZjliMWIzN2M=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-03-05T22:38:59Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-03-05T22:38:59Z"},"message":"OPENJPA-1545: Refectored code. Fixed bug where unloaded fields were being loaded due to detach.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@919657 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ed24e309bcfba5a541d8e2c290eba77d19c60dc4","url":"https://api.github.com/repos/apache/openjpa/git/trees/ed24e309bcfba5a541d8e2c290eba77d19c60dc4"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b0eefe6ea806dd9ca5681ff3783677edf9b1b37c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b0eefe6ea806dd9ca5681ff3783677edf9b1b37c","html_url":"https://github.com/apache/openjpa/commit/b0eefe6ea806dd9ca5681ff3783677edf9b1b37c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b0eefe6ea806dd9ca5681ff3783677edf9b1b37c/comments","author":null,"committer":null,"parents":[{"sha":"b074cd80c86dbebfaad5795a1ee81569a3c23b24","url":"https://api.github.com/repos/apache/openjpa/commits/b074cd80c86dbebfaad5795a1ee81569a3c23b24","html_url":"https://github.com/apache/openjpa/commit/b074cd80c86dbebfaad5795a1ee81569a3c23b24"}],"stats":{"total":38,"additions":21,"deletions":17},"files":[{"sha":"c532642e41d7c9dbf3b23feab04092cc96f77268","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ManagedClassSubclasser.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/b0eefe6ea806dd9ca5681ff3783677edf9b1b37c/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ManagedClassSubclasser.java","raw_url":"https://github.com/apache/openjpa/raw/b0eefe6ea806dd9ca5681ff3783677edf9b1b37c/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ManagedClassSubclasser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ManagedClassSubclasser.java?ref=b0eefe6ea806dd9ca5681ff3783677edf9b1b37c","patch":"@@ -289,7 +289,7 @@ else if (JavaVersions.VERSION >= 5) {\n         }\n     }\n \n-    private static void debugBytecodes(BCClass bc) throws IOException {\n+    public static void debugBytecodes(BCClass bc) throws IOException {\n         // Write the bytecodes to disk for debugging purposes.\n         if (\"true\".equals(System.getProperty(\n             ManagedClassSubclasser.class.getName() + \".dumpBytecodes\")))"},{"sha":"391051211e233d9e748e1ccefc8ec0d11b86da00","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/b0eefe6ea806dd9ca5681ff3783677edf9b1b37c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/b0eefe6ea806dd9ca5681ff3783677edf9b1b37c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java?ref=b0eefe6ea806dd9ca5681ff3783677edf9b1b37c","patch":"@@ -3348,10 +3348,12 @@ else if (!sm.getMetaData().isDetachable()) {\n     }\n \n     private void detachAllInternalLite() {\n-        Collection<StateManagerImpl> states = getManagedStates();\n-        // TODO : should I call clear on old cache first? perhaps a memory leak?\n-        // Clear out all persistence context caches.\n+        ManagedCache old = _cache;\n         _cache = new ManagedCache(this);\n+        // TODO : should I call clear on old cache first? perhaps a memory leak?\n+        Collection<StateManagerImpl> states = old.copy();\n+        \n+        // Clear out all persistence context caches.        \n         if (_transCache != null) {\n             _transCache.clear();\n         }"},{"sha":"6289e0485c08961eba676a4571f51515949852d8","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachManagerLite.java","status":"modified","additions":15,"deletions":13,"changes":28,"blob_url":"https://github.com/apache/openjpa/blob/b0eefe6ea806dd9ca5681ff3783677edf9b1b37c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachManagerLite.java","raw_url":"https://github.com/apache/openjpa/raw/b0eefe6ea806dd9ca5681ff3783677edf9b1b37c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachManagerLite.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachManagerLite.java?ref=b0eefe6ea806dd9ca5681ff3783677edf9b1b37c","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.openjpa.kernel;\n \n+import java.util.BitSet;\n import java.util.Collection;\n \n import org.apache.openjpa.enhance.PersistenceCapable;\n@@ -30,10 +31,7 @@\n  *\n  */\n public class DetachManagerLite {\n-    final TransferFieldManager _fm;\n-\n     public DetachManagerLite() {\n-        _fm = new TransferFieldManager();\n     }\n \n     /**\n@@ -43,13 +41,17 @@ public DetachManagerLite() {\n      *            The StateManagers to be detached.\n      */\n     public void detachAll(Collection<StateManagerImpl> states) {\n+        TransferFieldManager fm = new TransferFieldManager();\n         for (StateManagerImpl sm : states) {\n             ClassMetaData cmd = sm.getMetaData();\n             if (sm.isPersistent() && cmd.isDetachable()) {\n                 PersistenceCapable pc = sm.getPersistenceCapable();\n                 // Detach proxy fields.\n+                BitSet loaded = sm.getLoaded();\n                 for (FieldMetaData fmd : cmd.getProxyFields()) {\n-                    detachProxyField(fmd, pc, sm);\n+                    if (loaded.get(fmd.getIndex())) {\n+                        detachProxyField(fmd, pc, sm, fm);\n+                    }\n                 }\n                 pc.pcReplaceStateManager(null);\n             }\n@@ -66,20 +68,20 @@ public void detachAll(Collection<StateManagerImpl> states) {\n      * @param sm\n      *            The StateManagerImpl that the PersistenceCapable belongs to.\n      */\n-    private void detachProxyField(FieldMetaData fmd, PersistenceCapable pc, StateManagerImpl sm) {\n+    private void detachProxyField(FieldMetaData fmd, PersistenceCapable pc, StateManagerImpl sm, TransferFieldManager fm) {\n         int fieldIndex = fmd.getIndex();\n         if (fmd.isLRS() == true) {\n             // need to null out LRS fields.\n-            nullField(fieldIndex, pc, sm);\n+            nullField(fieldIndex, pc, sm, fm);\n         } else {\n             Object o = sm.fetchObject(fieldIndex);\n             if (o instanceof Proxy) {\n                 // Get unproxied object and replace\n                 Proxy proxy = (Proxy) o;\n                 Object unproxied = proxy.copy(proxy);\n-                _fm.storeObjectField(fieldIndex, unproxied);\n-                sm.replaceField(pc, _fm, fieldIndex);\n-                _fm.clear();\n+                fm.storeObjectField(fieldIndex, unproxied);\n+                sm.replaceField(pc, fm, fieldIndex);\n+                fm.clear();\n                 // clean up old proxy\n                 proxy.setOwner(null, -1);\n                 if (proxy.getChangeTracker() != null) {\n@@ -99,9 +101,9 @@ private void detachProxyField(FieldMetaData fmd, PersistenceCapable pc, StateMan\n      * @param sm\n      *            The StateManagerImpl that the PersistenceCapable belongs to.\n      */\n-    private void nullField(int fieldIndex, PersistenceCapable pc, StateManagerImpl sm) {\n-        _fm.storeObjectField(fieldIndex, null);\n-        sm.replaceField(pc, _fm, fieldIndex);\n-        _fm.clear();\n+    private void nullField(int fieldIndex, PersistenceCapable pc, StateManagerImpl sm, TransferFieldManager fm) {\n+        fm.storeObjectField(fieldIndex, null);\n+        sm.replaceField(pc, fm, fieldIndex);\n+        fm.clear();\n     }\n }"}]}

