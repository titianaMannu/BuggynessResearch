{"sha":"b11cdae338f33e4f6b7c83fbd3faa28303acd4b5","node_id":"MDY6Q29tbWl0MjA2MzY0OmIxMWNkYWUzMzhmMzNlNGY2YjdjODNmYmQzZmFhMjgzMDNhY2Q0YjU=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-08-18T21:27:42Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-08-18T21:27:42Z"},"message":"Add error messages to FillStrategy\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@805588 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a9c38b959802d83d262e2f18c83cc6ad0135fde3","url":"https://api.github.com/repos/apache/openjpa/git/trees/a9c38b959802d83d262e2f18c83cc6ad0135fde3"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b11cdae338f33e4f6b7c83fbd3faa28303acd4b5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b11cdae338f33e4f6b7c83fbd3faa28303acd4b5","html_url":"https://github.com/apache/openjpa/commit/b11cdae338f33e4f6b7c83fbd3faa28303acd4b5","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b11cdae338f33e4f6b7c83fbd3faa28303acd4b5/comments","author":null,"committer":null,"parents":[{"sha":"30a7da0ba2c8f946d064dec4081d75a6fe380e30","url":"https://api.github.com/repos/apache/openjpa/commits/30a7da0ba2c8f946d064dec4081d75a6fe380e30","html_url":"https://github.com/apache/openjpa/commit/30a7da0ba2c8f946d064dec4081d75a6fe380e30"}],"stats":{"total":99,"additions":75,"deletions":24},"files":[{"sha":"c0ade1757915e5510ac9820c4522f6b3ffba4582","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FillStrategy.java","status":"modified","additions":52,"deletions":23,"changes":75,"blob_url":"https://github.com/apache/openjpa/blob/b11cdae338f33e4f6b7c83fbd3faa28303acd4b5/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FillStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/b11cdae338f33e4f6b7c83fbd3faa28303acd4b5/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FillStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FillStrategy.java?ref=b11cdae338f33e4f6b7c83fbd3faa28303acd4b5","patch":"@@ -21,22 +21,26 @@\n import java.lang.reflect.Constructor;\n import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n+import java.util.Arrays;\n \n import org.apache.openjpa.enhance.Reflection;\n+import org.apache.openjpa.lib.util.Localizer;\n \n \n /**\n  * A strategy to fill data into a {@link ResultShape}.\n  * <BR>\n  * Available strategy implementations can fill by invoking constructor, setting array elements, direct assignment,\n- * invoking put(key,value)-style methods or a constructing by a factory. \n+ * invoking put(key,value)-style method on Map or factory-constructed instance. \n  * \n  * @author Pinaki Poddar\n  * \n  * @since 2.0.0\n  *\n  */\n public interface FillStrategy<T> {\n+    static final Localizer _loc = Localizer.forPackage(FillStrategy.class);\n+    \n     T fill(Object[] data, Class<?>[] types, String[] aliases);\n     \n     \n@@ -48,8 +52,8 @@\n     public static class Array<T> implements FillStrategy<T> {\n         private final Class<?> cls;\n         public Array(Class<T> arrayCls) {\n-            if (!arrayCls.isArray())\n-                throw new IllegalArgumentException(arrayCls + \" is not an array\");\n+            if (arrayCls == null || !arrayCls.isArray())\n+                throw new IllegalArgumentException(_loc.get(\"fill-bad-array\", arrayCls).getMessage());\n             this.cls = arrayCls.getComponentType();\n         }\n         \n@@ -70,19 +74,24 @@ public T fill(Object[] values, Class<?>[] types, String[] aliases) {\n         private final Method putMethod;\n         \n         public Map(Method put) {\n+            if (put == null || put.getParameterTypes().length != 2)\n+                throw new IllegalArgumentException(_loc.get(\"fill-bad-put\", put).getMessage());\n             putMethod = put;\n         }\n         \n         public T fill(Object[] values, Class<?>[] types, String[] aliases) {\n+            int i = 0;\n             try {\n                 Object map = putMethod.getDeclaringClass().newInstance();\n-                for (int i = 0; i < values.length; i++)\n+                for (i = 0; i < values.length; i++)\n                     putMethod.invoke(map, aliases[i], values[i]);\n                 return (T)map;\n             } catch (InvocationTargetException t) {\n-                throw new RuntimeException(t.getTargetException());\n+                throw new RuntimeException(_loc.get(\"fill-map-error\", putMethod, aliases[i], values[i]).getMessage(), \n+                    t.getTargetException());\n             } catch (Exception e) {\n-                throw new RuntimeException(e);\n+                throw new RuntimeException(_loc.get(\"fill-map-error\", putMethod, aliases[i], values[i]).getMessage(), \n+                        e);\n             }\n         }\n         \n@@ -94,6 +103,7 @@ public T fill(Object[] values, Class<?>[] types, String[] aliases) {\n     public static class NewInstance<T> implements FillStrategy<T> {\n         private Constructor<? extends T> cons;\n         private Class<T> cls;\n+        \n         public NewInstance(Constructor<? extends T> cons) {\n             this.cons = cons;\n         }\n@@ -110,7 +120,7 @@ public NewInstance(Class<T> cls) {\n             try {\n                 return cls.getConstructor(types);\n             } catch (Exception e) {\n-                throw new RuntimeException(e);\n+                throw new RuntimeException(_loc.get(\"fill-ctor-none\", cls, Arrays.toString(types)).getMessage());\n             }\n         }\n         \n@@ -124,7 +134,8 @@ public T fill(Object[] values, Class<?>[] types, String[] aliases) {\n                 }\n                 return cons.newInstance(values);\n             } catch (Exception e) {\n-                throw new RuntimeException(e);\n+                throw new RuntimeException(_loc.get(\"fill-ctor-error\", cons, Arrays.toString(values), \n+                        Arrays.toString(types)).getMessage(), e);\n             }\n         }\n         \n@@ -142,23 +153,28 @@ public Bean(Class<T> cls) {\n             this.cls = cls;\n         }\n     \n-        public T fill(Object[] args, Class<?>[] types, String[] aliases) {\n+        public T fill(Object[] values, Class<?>[] types, String[] aliases) {\n+            int i = 0;\n             try {\n                 if (setters == null) {\n-                    setters = new Method[args.length];\n+                    setters = new Method[values.length];\n                 }\n                 T bean = cls.newInstance();\n-                for (int i = 0; i < args.length; i++) {\n+                for (i = 0; i < values.length; i++) {\n                     if (setters[i] == null) {\n-                        setters[i] = Reflection.findSetter(cls, aliases[i], true);\n+                        setters[i] = Reflection.findSetter(cls, aliases[i], false);\n+                        if (setters[i] == null)\n+                            throw new RuntimeException(_loc.get(\"fill-bean-setter\", cls, aliases[i]).getMessage());\n                     }\n-                    setters[i].invoke(bean, args[i]);\n+                    setters[i].invoke(bean, Filters.convert(values[i], types[i]));\n                 }\n                 return bean;\n             } catch (InvocationTargetException t) {\n-                throw new RuntimeException(t.getTargetException());\n+                throw new RuntimeException(_loc.get(\"fill-bean-error\", setters[i], values[i], types[i]).getMessage(), \n+                        t.getTargetException());\n             } catch (Exception e) {\n-                throw new RuntimeException(e);\n+                throw new RuntimeException(_loc.get(\"fill-bean-error\", setters[i], values[i], types[i]).getMessage(), \n+                        e);\n             }\n         }\n     }\n@@ -168,8 +184,13 @@ public T fill(Object[] args, Class<?>[] types, String[] aliases) {\n      * Populate an instance by simply assigning the 0-th element of the input values.  \n      */\n     public static class Assign<T> implements FillStrategy<T> {\n-        public T fill(Object[] args, Class<?>[] types, String[] aliases) {\n-            return (T)args[0];\n+        public T fill(Object[] values, Class<?>[] types, String[] aliases) {\n+            try {\n+                return (T)values[0];\n+            } catch (Exception e) {\n+                throw new RuntimeException(_loc.get(\"fill-assign-error\", Arrays.toString(values),\n+                        Arrays.toString(types)).getMessage(), e);\n+            }\n         }\n     }\n     \n@@ -183,23 +204,31 @@ public T fill(Object[] args, Class<?>[] types, String[] aliases) {\n         final Method putMethod;\n         final boolean isArray;\n         \n-        public Factory(ObjectFactory<T> factory, Method putMethod) {\n+        public Factory(ObjectFactory<T> factory, Method put) {\n             this.factory = factory;\n-            this.putMethod = putMethod;\n+            this.putMethod = put;\n+            if (put == null || put.getParameterTypes().length != 2)\n+                throw new IllegalArgumentException(_loc.get(\"fill-factory-bad-put\", put).getMessage());\n             Class<?> keyType = putMethod.getParameterTypes()[0];\n             this.isArray = keyType == int.class || keyType == Integer.class;\n         }\n         \n         public T fill(Object[] values, Class<?>[] types, String[] aliases) {\n+            int i = 0;\n+            Object key = null;\n             T result = factory.newInstance();\n             try {\n-                for (int i = 0; i < values.length; i++)\n-                    putMethod.invoke(result, isArray ? i : aliases[i], values[i]);\n+                for (i = 0; i < values.length; i++) {\n+                    key = isArray ? i : aliases[i];\n+                    putMethod.invoke(result, key, Filters.convert(values[i], types[i]));\n+                }\n                 return result;\n             } catch (InvocationTargetException t) {\n-                throw new RuntimeException(t.getTargetException());\n+                throw new RuntimeException(_loc.get(\"fill-factory-error\", new Object[]{putMethod, key, values[i], \n+                        types[i]}).getMessage(), t.getTargetException());\n             } catch (Exception e) {\n-                throw new RuntimeException(e);\n+                throw new RuntimeException(_loc.get(\"fill-factory-error\", new Object[]{putMethod, key, values[i], \n+                        types[i]}).getMessage(), e);\n             }\n         }\n     }"},{"sha":"40bbfde6c6722291f3a3ea1776ca04986917ea1a","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties","status":"modified","additions":23,"deletions":1,"changes":24,"blob_url":"https://github.com/apache/openjpa/blob/b11cdae338f33e4f6b7c83fbd3faa28303acd4b5/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/b11cdae338f33e4f6b7c83fbd3faa28303acd4b5/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties?ref=b11cdae338f33e4f6b7c83fbd3faa28303acd4b5","patch":"@@ -422,4 +422,26 @@ cant-update-embed-in-query-result: Update of embedded object returned from \\\n declared-unbound-params: User specified parameter \"{1}\" does not appear in \\\n \tdeclared parameters \"{2}\" of the query \"{0}\".\n user-unbound-params: User has not bound parameter \"{1}\" for the query \"{0}\". \\\n-\tThe declared parameters are \"{2}\", bound parameters are \"{3}\".\n\\ No newline at end of file\n+\tThe declared parameters are \"{2}\", bound parameters are \"{3}\".\n+fill-bad-array: Can not apply array fill strategy on \"{0}\" because it is not \\\n+\tan array type.\n+fill-bad-put: Can not apply map fill strategy using method \"{0}\". The method \\\n+\tto fill must have two input arguments.\n+fill-map-error: Error while filling data with map strategy. The error occurred \\\n+    while invoking \"{0}\" with input argument \"{1}\" and \"{2}\". See nested \\\n+    exception for details.\n+fill-ctor-none: Can not find constructor for \"{0}\" with argument types \"{1}\" \\\n+    to fill data. \t\n+fill-ctor-error: Error while filling data with constructor strategy. The error \\\n+    occurred while invoking constructor \"{0}\" with input argument \"{1}\" of \\\n+    types \"{2}\". See nested exception for details.\n+fill-bean-setter: Can not find a setter method on \"{0}\" for property \"{1}\" \\\n+    to apply JavaBean fill strategy.    \n+fill-bean-error: Error while filling data with JavaBean strategy. The error \\\n+    occurred while invoking bean method \"{0}\" with input argument \"{1}\" of \\\n+    types \"{2}\". See nested exception for details.\n+fill-assign-error: Error while assigning data from values \"{0}\" of types \\ \n+\t\"{1}\". See nested exception for details.\n+fill-factory-error: Error while fill data with factory strategy. The error \\\n+\toccurred while invoking \"{0}\" with key \"{1}\" and value \"{2}\" of type \"{3}\". \\\n+\tSee nested exception for details.\t\n\\ No newline at end of file"}]}

