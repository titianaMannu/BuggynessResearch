{"sha":"b1d18a3556f278fd5b2f198393e0e6869980bb5e","node_id":"MDY6Q29tbWl0MjA2MzY0OmIxZDE4YTM1NTZmMjc4ZmQ1YjJmMTk4MzkzZTBlNjg2OTk4MGJiNWU=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-08-06T01:28:26Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-08-06T01:28:26Z"},"message":"OPENJPA-674 javaagent enhancer (PCEnhancerAgent) ignores persistence units after the first in persistence.xml\ncommitting PCEnhancerAgent.patch provided by Dinkar Rao\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@683075 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"bb84dd01ec137ca033b0567f8e3fe398ba5e7f11","url":"https://api.github.com/repos/apache/openjpa/git/trees/bb84dd01ec137ca033b0567f8e3fe398ba5e7f11"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b1d18a3556f278fd5b2f198393e0e6869980bb5e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b1d18a3556f278fd5b2f198393e0e6869980bb5e","html_url":"https://github.com/apache/openjpa/commit/b1d18a3556f278fd5b2f198393e0e6869980bb5e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b1d18a3556f278fd5b2f198393e0e6869980bb5e/comments","author":null,"committer":null,"parents":[{"sha":"a8a269d5a33d1a3b104ee4639798a68f1f09b0a9","url":"https://api.github.com/repos/apache/openjpa/commits/a8a269d5a33d1a3b104ee4639798a68f1f09b0a9","html_url":"https://github.com/apache/openjpa/commit/a8a269d5a33d1a3b104ee4639798a68f1f09b0a9"}],"stats":{"total":59,"additions":35,"deletions":24},"files":[{"sha":"8c72a7d376189d6ad6bbae552f9ff6ae726b34e3","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancerAgent.java","status":"modified","additions":35,"deletions":24,"changes":59,"blob_url":"https://github.com/apache/openjpa/blob/b1d18a3556f278fd5b2f198393e0e6869980bb5e/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancerAgent.java","raw_url":"https://github.com/apache/openjpa/raw/b1d18a3556f278fd5b2f198393e0e6869980bb5e/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancerAgent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancerAgent.java?ref=b1d18a3556f278fd5b2f198393e0e6869980bb5e","patch":"@@ -20,6 +20,8 @@\n \n import java.lang.instrument.Instrumentation;\n import java.security.AccessController;\n+import java.util.Iterator;\n+import java.util.List;\n \n import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.conf.OpenJPAConfigurationImpl;\n@@ -90,30 +92,39 @@ else if (opts.containsKey(\"RuntimeEnhancement\") ||\n \n     private static void registerClassLoadEnhancer(Instrumentation inst,\n         Options opts) {\n-        OpenJPAConfiguration conf = new OpenJPAConfigurationImpl();\n-        Configurations.populateConfiguration(conf, opts);\n-        // don't allow connections\n-        conf.setConnectionUserName(null);\n-        conf.setConnectionPassword(null);\n-        conf.setConnectionURL(null);\n-        conf.setConnectionDriverName(null);\n-        conf.setConnectionFactoryName(null);\n-        // set single class resolver\n-        final ClassLoader tmpLoader = (ClassLoader) AccessController\n-            .doPrivileged(J2DoPrivHelper\n-                .newTemporaryClassLoaderAction((ClassLoader) AccessController\n-                    .doPrivileged(J2DoPrivHelper.getContextClassLoaderAction())\n-                    ));\n-        conf.setClassResolver(new ClassResolver() {\n-            public ClassLoader getClassLoader(Class context, ClassLoader env) {\n-                return tmpLoader;\n-            }\n-        });\n-        conf.setReadOnly(Configuration.INIT_STATE_FREEZING);\n-        conf.instantiateAll(); // avoid threading issues\n+    \tList<String> anchors = Configurations.\n+            getFullyQualifiedAnchorsInPropertiesLocation(opts);\n+    \tfor (String a : anchors) {\n+    \t\tOptions clonedOptions = (Options) opts.clone();\n+    \t\tclonedOptions.setProperty(\"properties\", a);\n+    \t\tOpenJPAConfiguration conf = new OpenJPAConfigurationImpl();\n+    \t\tConfigurations.populateConfiguration(conf, clonedOptions);\n+    \t\t// don't allow connections\n+    \t\tconf.setConnectionUserName(null);\n+    \t\tconf.setConnectionPassword(null);\n+    \t\tconf.setConnectionURL(null);\n+    \t\tconf.setConnectionDriverName(null);\n+    \t\tconf.setConnectionFactoryName(null);\n+    \t\t// set single class resolver\n+    \t\tfinal ClassLoader tmpLoader = (ClassLoader) AccessController\n+    \t\t    .doPrivileged(J2DoPrivHelper\n+    \t\t    .newTemporaryClassLoaderAction((ClassLoader) AccessController\n+    \t\t    .doPrivileged(J2DoPrivHelper.getContextClassLoaderAction())\n+    \t\t    ));\n+    \t\tconf.setClassResolver(new ClassResolver() {\n+    \t\t    public ClassLoader getClassLoader(Class context,\n+                    ClassLoader env) {\n+    \t\t        return tmpLoader;\n+    \t\t    }\n+    \t\t});\n+    \t\tconf.setReadOnly(Configuration.INIT_STATE_FREEZING);\n+    \t\tconf.instantiateAll(); // avoid threading issues\n \n-        PCClassFileTransformer transformer = new PCClassFileTransformer\n-            (conf.newMetaDataRepositoryInstance(), opts, tmpLoader);\n-        inst.addTransformer(transformer);\n+    \t\tPCClassFileTransformer transformer = new PCClassFileTransformer\n+    \t\t    (conf.newMetaDataRepositoryInstance(), clonedOptions,\n+    \t\t    tmpLoader);\n+    \t\tinst.addTransformer(transformer);\n+    \t\tconf.close();\n+    \t}\n     }\n }"}]}

