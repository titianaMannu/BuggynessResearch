{"sha":"b1ee063aa43a1e1fbfd837ef82a25a3e7ef937c4","node_id":"MDY6Q29tbWl0MjA2MzY0OmIxZWUwNjNhYTQzYTFlMWZiZmQ4MzdlZjgyYTI1YTNlN2VmOTM3YzQ=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-12-11T02:26:13Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-12-11T02:26:13Z"},"message":"OPENJPA-1425:  Lieralize value if they appear in selection clause for databases that do not support parameters in selection terms.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@889490 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ada5e12128b07796286a9edee6b627e6202eebc7","url":"https://api.github.com/repos/apache/openjpa/git/trees/ada5e12128b07796286a9edee6b627e6202eebc7"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b1ee063aa43a1e1fbfd837ef82a25a3e7ef937c4","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b1ee063aa43a1e1fbfd837ef82a25a3e7ef937c4","html_url":"https://github.com/apache/openjpa/commit/b1ee063aa43a1e1fbfd837ef82a25a3e7ef937c4","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b1ee063aa43a1e1fbfd837ef82a25a3e7ef937c4/comments","author":null,"committer":null,"parents":[{"sha":"77c324246587aa62be9213e91bc11697df8be491","url":"https://api.github.com/repos/apache/openjpa/commits/77c324246587aa62be9213e91bc11697df8be491","html_url":"https://github.com/apache/openjpa/commit/77c324246587aa62be9213e91bc11697df8be491"}],"stats":{"total":30,"additions":30,"deletions":0},"files":[{"sha":"179e2dfa534128e1dc00a027316e20f7598cca34","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SelectConstructor.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/b1ee063aa43a1e1fbfd837ef82a25a3e7ef937c4/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SelectConstructor.java","raw_url":"https://github.com/apache/openjpa/raw/b1ee063aa43a1e1fbfd837ef82a25a3e7ef937c4/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SelectConstructor.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SelectConstructor.java?ref=b1ee063aa43a1e1fbfd837ef82a25a3e7ef937c4","patch":"@@ -228,6 +228,9 @@ private void initialize(Select sel, ExpContext ctx, QueryExpressions exps,\n             Val resultVal;\n             for (int i = 0; i < exps.projections.length; i++) {\n                 resultVal = (Val) exps.projections[i];\n+                if (!ctx.store.getDBDictionary().supportsParameterInSelect && resultVal instanceof Lit) {\n+                    ((Lit)resultVal).setRaw(true);\n+                }\n                 // have to join through to related type for pc object \n                 // projections; this ensures that we have all our joins cached\n                 state.projections[i] = resultVal.initialize(sel, ctx, "},{"sha":"560b6e857f9f97bc35e23800db9e777f7b67ef57","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/b1ee063aa43a1e1fbfd837ef82a25a3e7ef937c4/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/b1ee063aa43a1e1fbfd837ef82a25a3e7ef937c4/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java?ref=b1ee063aa43a1e1fbfd837ef82a25a3e7ef937c4","patch":"@@ -181,6 +181,7 @@\n     public int maxIndexNameLength = 128;\n     public int maxIndexesPerTable = Integer.MAX_VALUE;\n     public boolean supportsForeignKeys = true;\n+    public boolean supportsParameterInSelect = true;\n     public boolean supportsForeignKeysComposite = true;\n     public boolean supportsUniqueConstraints = true;\n     public boolean supportsDeferredConstraints = true;"},{"sha":"4b366a80080743c5d07acb21ba7215f22bab8992","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestTypesafeCriteria.java","status":"modified","additions":26,"deletions":0,"changes":26,"blob_url":"https://github.com/apache/openjpa/blob/b1ee063aa43a1e1fbfd837ef82a25a3e7ef937c4/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestTypesafeCriteria.java","raw_url":"https://github.com/apache/openjpa/raw/b1ee063aa43a1e1fbfd837ef82a25a3e7ef937c4/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestTypesafeCriteria.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestTypesafeCriteria.java?ref=b1ee063aa43a1e1fbfd837ef82a25a3e7ef937c4","patch":"@@ -25,12 +25,14 @@\n import java.util.List;\n import java.util.Map;\n \n+import javax.persistence.EntityManager;\n import javax.persistence.Parameter;\n import javax.persistence.Query;\n import javax.persistence.Tuple;\n import javax.persistence.TypedQuery;\n import javax.persistence.criteria.CriteriaQuery;\n import javax.persistence.criteria.Expression;\n+import javax.persistence.criteria.Fetch;\n import javax.persistence.criteria.Join;\n import javax.persistence.criteria.JoinType;\n import javax.persistence.criteria.ListJoin;\n@@ -1477,4 +1479,28 @@ public void testCurrentTimeReturnsSQLTypes() {\n         assertTrue(result.getClass() + \" not instance of Time\", result instanceof Time);  \n         \n     }\n+    \n+//    public void testInMemoryAccessPath() {\n+//        em.getTransaction().begin();\n+//        // must have new/dirty managed instances to exercise the code path\n+//        em.persist(new Customer());\n+//        CriteriaQuery<Customer> cquery = cb.createQuery(Customer.class);\n+//        Root<Customer> customer = cquery.from(Customer.class);\n+//        Fetch<Customer, Account> c = customer.fetch(\"accounts\", JoinType.LEFT);\n+//        cquery.where(cb.like(customer.<String>get(\"firstName\"), \"a%\")).select(customer).distinct(true);\n+//        TypedQuery<Customer> tquery = em.createQuery(cquery);\n+//        tquery.setMaxResults(3);\n+//        List<Customer> result = tquery.getResultList();\n+//\n+//    }\n+    \n+    public void testLiteralInProjection() {\n+        String jpql = \"select 'a' from Customer c where c.id=10\";\n+        \n+        CriteriaQuery<String> cq = cb.createQuery(String.class);\n+        Root<Customer> c = cq.from(Customer.class);\n+        cq.select(cb.toString(cb.literal('a')));\n+        cq.where(cb.equal(c.get(Customer_.id), 10));\n+        assertEquivalence(cq, jpql);\n+    }\n }"}]}

