{"sha":"b20b8103e02ce0c7b08bfb8cf32d97e5aa1df415","node_id":"MDY6Q29tbWl0MjA2MzY0OmIyMGI4MTAzZTAyY2UwYzdiMDhiZmI4Y2YzMmQ5N2U1YWExZGY0MTU=","commit":{"author":{"name":"Mark Struberg","email":"struberg@apache.org","date":"2011-12-21T16:47:56Z"},"committer":{"name":"Mark Struberg","email":"struberg@apache.org","date":"2011-12-21T16:47:56Z"},"message":"OPENJPA-1912 add missing test for enhancer fix\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1221801 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f8f32e034a8b96914a5a1147073472278fc7fd86","url":"https://api.github.com/repos/apache/openjpa/git/trees/f8f32e034a8b96914a5a1147073472278fc7fd86"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b20b8103e02ce0c7b08bfb8cf32d97e5aa1df415","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b20b8103e02ce0c7b08bfb8cf32d97e5aa1df415","html_url":"https://github.com/apache/openjpa/commit/b20b8103e02ce0c7b08bfb8cf32d97e5aa1df415","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b20b8103e02ce0c7b08bfb8cf32d97e5aa1df415/comments","author":{"login":"struberg","id":79310,"node_id":"MDQ6VXNlcjc5MzEw","avatar_url":"https://avatars.githubusercontent.com/u/79310?v=4","gravatar_id":"","url":"https://api.github.com/users/struberg","html_url":"https://github.com/struberg","followers_url":"https://api.github.com/users/struberg/followers","following_url":"https://api.github.com/users/struberg/following{/other_user}","gists_url":"https://api.github.com/users/struberg/gists{/gist_id}","starred_url":"https://api.github.com/users/struberg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/struberg/subscriptions","organizations_url":"https://api.github.com/users/struberg/orgs","repos_url":"https://api.github.com/users/struberg/repos","events_url":"https://api.github.com/users/struberg/events{/privacy}","received_events_url":"https://api.github.com/users/struberg/received_events","type":"User","site_admin":false},"committer":{"login":"struberg","id":79310,"node_id":"MDQ6VXNlcjc5MzEw","avatar_url":"https://avatars.githubusercontent.com/u/79310?v=4","gravatar_id":"","url":"https://api.github.com/users/struberg","html_url":"https://github.com/struberg","followers_url":"https://api.github.com/users/struberg/followers","following_url":"https://api.github.com/users/struberg/following{/other_user}","gists_url":"https://api.github.com/users/struberg/gists{/gist_id}","starred_url":"https://api.github.com/users/struberg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/struberg/subscriptions","organizations_url":"https://api.github.com/users/struberg/orgs","repos_url":"https://api.github.com/users/struberg/repos","events_url":"https://api.github.com/users/struberg/events{/privacy}","received_events_url":"https://api.github.com/users/struberg/received_events","type":"User","site_admin":false},"parents":[{"sha":"4bf8225bfae4fa7f9c97b2e55970ff5e153cbb64","url":"https://api.github.com/repos/apache/openjpa/commits/4bf8225bfae4fa7f9c97b2e55970ff5e153cbb64","html_url":"https://github.com/apache/openjpa/commit/4bf8225bfae4fa7f9c97b2e55970ff5e153cbb64"}],"stats":{"total":67,"additions":67,"deletions":0},"files":[{"sha":"a6856bc8e646c59d442ab65b7a91970e1ca361d1","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestClassHierarchyEnhancement.java","status":"added","additions":67,"deletions":0,"changes":67,"blob_url":"https://github.com/apache/openjpa/blob/b20b8103e02ce0c7b08bfb8cf32d97e5aa1df415/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestClassHierarchyEnhancement.java","raw_url":"https://github.com/apache/openjpa/raw/b20b8103e02ce0c7b08bfb8cf32d97e5aa1df415/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestClassHierarchyEnhancement.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestClassHierarchyEnhancement.java?ref=b20b8103e02ce0c7b08bfb8cf32d97e5aa1df415","patch":"@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.enhance;\n+\n+\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+\n+\n+/**\n+ * This unit test checks the enhancement of a superclass/subclass\n+ * constellation.\n+ *\n+ * @author <a href=\"mailto:struberg@apache.org>Mark Struberg</a>\n+ */\n+public class TestClassHierarchyEnhancement extends SingleEMFTestCase {\n+\n+    /**\n+     * This tests OPENJPA-1912.\n+     */\n+    public void testSerialize() throws Exception {\n+        // we don't even need an EntityManager for that ;)\n+\n+        EnhancedSubClass entity = new EnhancedSubClass();\n+        entity.setValueInSubclass(\"sub\");\n+        entity.setValueInSuperclass(\"super\");\n+\n+        byte[] serializedForm = serializeObject(entity);\n+        EnhancedSubClass newEntity = (EnhancedSubClass) deSerializeObject(serializedForm);\n+    }\n+\n+    private byte[] serializeObject(Object o) throws IOException {\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ObjectOutputStream oos = new ObjectOutputStream(baos);\n+        oos.writeObject(o);\n+        return baos.toByteArray();\n+    }\n+\n+    private Object deSerializeObject(byte[] serial)\n+            throws IOException, ClassNotFoundException {\n+        ByteArrayInputStream bais = new ByteArrayInputStream(serial);\n+        ObjectInputStream ois = new ObjectInputStream(bais);\n+        return ois.readObject();\n+    }\n+\n+}"}]}

