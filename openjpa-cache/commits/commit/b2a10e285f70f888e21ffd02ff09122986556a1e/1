{"sha":"b2a10e285f70f888e21ffd02ff09122986556a1e","node_id":"MDY6Q29tbWl0MjA2MzY0OmIyYTEwZTI4NWY3MGY4ODhlMjFmZmQwMmZmMDkxMjI5ODY1NTZhMWU=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-01-28T09:36:42Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-01-28T09:36:42Z"},"message":"OPENJPA-477 no need to make changes to BootStrap, StateManagerImpl and PersistenceProviderImpl.\nThese files are restored to their previous version.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@615806 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"168350808c1e2829f7b96f579cb26513b9fa005a","url":"https://api.github.com/repos/apache/openjpa/git/trees/168350808c1e2829f7b96f579cb26513b9fa005a"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b2a10e285f70f888e21ffd02ff09122986556a1e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b2a10e285f70f888e21ffd02ff09122986556a1e","html_url":"https://github.com/apache/openjpa/commit/b2a10e285f70f888e21ffd02ff09122986556a1e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b2a10e285f70f888e21ffd02ff09122986556a1e/comments","author":null,"committer":null,"parents":[{"sha":"37c4e9148a7c6246c339a8b87285b686a8d812ae","url":"https://api.github.com/repos/apache/openjpa/commits/37c4e9148a7c6246c339a8b87285b686a8d812ae","html_url":"https://github.com/apache/openjpa/commit/37c4e9148a7c6246c339a8b87285b686a8d812ae"}],"stats":{"total":25,"additions":5,"deletions":20},"files":[{"sha":"4af5d2a8c8c9e874a7ef8f3d29e892f8c26bec9a","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Bootstrap.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/b2a10e285f70f888e21ffd02ff09122986556a1e/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Bootstrap.java","raw_url":"https://github.com/apache/openjpa/raw/b2a10e285f70f888e21ffd02ff09122986556a1e/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Bootstrap.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Bootstrap.java?ref=b2a10e285f70f888e21ffd02ff09122986556a1e","patch":"@@ -39,7 +39,7 @@\n  */\n public class Bootstrap {\n \n-    protected static final Class[] FACTORY_ARGS =\n+    private static final Class[] FACTORY_ARGS =\n         new Class[]{ ConfigurationProvider.class };\n \n     private static Localizer s_loc = Localizer.forPackage(Bootstrap.class);\n@@ -124,7 +124,7 @@ private static BrokerFactory invokeFactory(ConfigurationProvider conf,\n         return (BrokerFactory) meth.invoke(null, new Object[]{ conf });\n     }\n \n-    protected static String getFactoryClassName(ConfigurationProvider conf,\n+    private static String getFactoryClassName(ConfigurationProvider conf,\n         ClassLoader loader) {\n         try {\n             return getFactoryClass(conf, loader).getName();"},{"sha":"eb33507a7ec4f302d5aee260e48f46f43f772726","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/b2a10e285f70f888e21ffd02ff09122986556a1e/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/b2a10e285f70f888e21ffd02ff09122986556a1e/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java?ref=b2a10e285f70f888e21ffd02ff09122986556a1e","patch":"@@ -3001,7 +3001,7 @@ void replaceField(PersistenceCapable pc, FieldManager load, int field) {\n     /**\n      * Mark the field as loaded or unloaded.\n      */\n-    public void setLoaded(int field, boolean isLoaded) {\n+    private void setLoaded(int field, boolean isLoaded) {\n         // don't continue if loaded state is already correct; otherwise we\n         // can end up clearing _fieldImpl when we shouldn't\n         if (_loaded.get(field) == isLoaded)"},{"sha":"b25353e5b20767c5f5ef03019dd2754aa577d13a","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProviderImpl.java","status":"modified","additions":2,"deletions":17,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/b2a10e285f70f888e21ffd02ff09122986556a1e/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProviderImpl.java","raw_url":"https://github.com/apache/openjpa/raw/b2a10e285f70f888e21ffd02ff09122986556a1e/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProviderImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProviderImpl.java?ref=b2a10e285f70f888e21ffd02ff09122986556a1e","patch":"@@ -71,7 +71,7 @@\n      */\n     public OpenJPAEntityManagerFactory createEntityManagerFactory(String name,\n         String resource, Map m) {\n-        PersistenceProductDerivation pd = newPersistenceProductDerivation();\n+        PersistenceProductDerivation pd = new PersistenceProductDerivation();\n         try {\n             Object poolValue = Configurations.removeProperty(EMF_POOL, m);\n             ConfigurationProvider cp = pd.load(resource, name, m);\n@@ -99,7 +99,7 @@ private BrokerFactory getBrokerFactory(ConfigurationProvider cp,\n         }\n         \n         if (poolValue == null || !((Boolean) poolValue).booleanValue())\n-            return newBrokerFactory(cp, loader);\n+            return Bootstrap.newBrokerFactory(cp, loader);\n         else\n             return Bootstrap.getBrokerFactory(cp, loader);\n     }\n@@ -199,19 +199,4 @@ public ClassLoader getClassLoader(Class context,\n             return _trans.transform(cl, name, previousVersion, pd, bytes);\n         }\n \t}\n-\n-    /**\n-     * Return a persistence product deviration with default setting.\n-     */\n-    public PersistenceProductDerivation newPersistenceProductDerivation() {\n-        return new PersistenceProductDerivation();\n-    }\n-\n-    /**\n-     * Return a broker factory for the given configuration and class loader.\n-     */\n-    public BrokerFactory newBrokerFactory(ConfigurationProvider cp,\n-        ClassLoader loader) {\n-        return Bootstrap.newBrokerFactory(cp, loader);\n-    }\n }"}]}

