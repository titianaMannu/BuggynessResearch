{"sha":"b2beaec63446c937b69de2e73d2b7acda96b1549","node_id":"MDY6Q29tbWl0MjA2MzY0OmIyYmVhZWM2MzQ0NmM5MzdiNjlkZTJlNzNkMmI3YWNkYTk2YjE1NDk=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-04-26T17:17:10Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-04-26T17:17:10Z"},"message":"OPENJPA-229\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@532805 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"9fe282dcb0804fe91af22506d97c2534ea317a50","url":"https://api.github.com/repos/apache/openjpa/git/trees/9fe282dcb0804fe91af22506d97c2534ea317a50"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b2beaec63446c937b69de2e73d2b7acda96b1549","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b2beaec63446c937b69de2e73d2b7acda96b1549","html_url":"https://github.com/apache/openjpa/commit/b2beaec63446c937b69de2e73d2b7acda96b1549","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b2beaec63446c937b69de2e73d2b7acda96b1549/comments","author":null,"committer":null,"parents":[{"sha":"0819749391cecd16bfae12b78f1b21ae424eb94a","url":"https://api.github.com/repos/apache/openjpa/commits/0819749391cecd16bfae12b78f1b21ae424eb94a","html_url":"https://github.com/apache/openjpa/commit/0819749391cecd16bfae12b78f1b21ae424eb94a"}],"stats":{"total":82,"additions":74,"deletions":8},"files":[{"sha":"9e54843e23f8c32db71793cc17fb31f3eb3bc2a4","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/b2beaec63446c937b69de2e73d2b7acda96b1549/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","raw_url":"https://github.com/apache/openjpa/raw/b2beaec63446c937b69de2e73d2b7acda96b1549/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java?ref=b2beaec63446c937b69de2e73d2b7acda96b1549","patch":"@@ -2283,7 +2283,12 @@ private void addStaticInitializer() {\n         code.getstatic().setField(PRE + \"FieldTypes\", Class[].class);\n         code.getstatic().setField(PRE + \"FieldFlags\", byte[].class);\n         code.getstatic().setField(SUPER, Class.class);\n-        code.constant().setValue(_meta.getTypeAlias());\n+        \n+        if (_meta.isMapped())\n+            code.constant().setValue(_meta.getTypeAlias());\n+        else\n+            code.constant().setNull();\n+\n         if (_pc.isAbstract())\n             code.constant().setNull();\n         else {"},{"sha":"b0507da68f2c13d475b743060994f68f8d1e7a41","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","status":"modified","additions":9,"deletions":7,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/b2beaec63446c937b69de2e73d2b7acda96b1549/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","raw_url":"https://github.com/apache/openjpa/raw/b2beaec63446c937b69de2e73d2b7acda96b1549/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java?ref=b2beaec63446c937b69de2e73d2b7acda96b1549","patch":"@@ -1396,14 +1396,16 @@ private void processRegisteredClass(Class cls) {\n \n         // set alias for class\n         String alias = PCRegistry.getTypeAlias(cls);\n-        synchronized (_aliases) {\n-            List classList = (List) _aliases.get(alias);\n-            if (classList == null) {\n-                classList = new ArrayList(3);\n-                _aliases.put(alias, classList);\n+        if (alias != null) {\n+            synchronized (_aliases) {\n+                List classList = (List) _aliases.get(alias);\n+                if (classList == null) {\n+                    classList = new ArrayList(3);\n+                    _aliases.put(alias, classList);\n+                }\n+                if (!classList.contains(cls))\n+                    classList.add(cls);\n             }\n-            if (!classList.contains(cls))\n-                classList.add(cls);\n         }\n     }\n "},{"sha":"d0b5d4b745e018fb51f7870b4ca940464c923326","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/TestSharedUnqualifiedClassNames.java","status":"added","additions":59,"deletions":0,"changes":59,"blob_url":"https://github.com/apache/openjpa/blob/b2beaec63446c937b69de2e73d2b7acda96b1549/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/TestSharedUnqualifiedClassNames.java","raw_url":"https://github.com/apache/openjpa/raw/b2beaec63446c937b69de2e73d2b7acda96b1549/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/TestSharedUnqualifiedClassNames.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/TestSharedUnqualifiedClassNames.java?ref=b2beaec63446c937b69de2e73d2b7acda96b1549","patch":"@@ -0,0 +1,59 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *\r\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.inheritance;\r\n+\r\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\r\n+import org.apache.openjpa.meta.ClassMetaData;\r\n+import org.apache.openjpa.kernel.AbstractBrokerFactory;\r\n+\r\n+/**\r\n+ * Test that entities, mapped superclasses, and embeddables can all share\r\n+ * the same short names without any collisions.\r\n+ */\r\n+public class TestSharedUnqualifiedClassNames\r\n+    extends SingleEMFTestCase {\r\n+\r\n+    public void setUp() {\r\n+        setUp(org.apache.openjpa.persistence.inheritance.mappedsuperclass\r\n+                .SharedName1.class,\r\n+            org.apache.openjpa.persistence.inheritance.entity\r\n+                .SharedName1.class,\r\n+            org.apache.openjpa.persistence.inheritance.embeddable\r\n+                .SharedName2.class,\r\n+            org.apache.openjpa.persistence.inheritance.entity\r\n+                .SharedName2.class);\r\n+        emf.createEntityManager().close();\r\n+    }\r\n+\r\n+        public void testMappedSuperclass() {\r\n+        ClassMetaData meta = emf.getConfiguration()\r\n+            .getMetaDataRepositoryInstance()\r\n+            .getMetaData(\"SharedName1\", getClass().getClassLoader(), true);\r\n+        assertEquals(\r\n+            org.apache.openjpa.persistence.inheritance.entity.SharedName1.class,\r\n+            meta.getDescribedType());\r\n+    }\r\n+\r\n+    public void testEmbeddable() {\r\n+        ClassMetaData meta = emf.getConfiguration()\r\n+            .getMetaDataRepositoryInstance()\r\n+            .getMetaData(\"SharedName2\", getClass().getClassLoader(), true);\r\n+        assertEquals(\r\n+            org.apache.openjpa.persistence.inheritance.entity.SharedName2.class,\r\n+            meta.getDescribedType());\r\n+    }\r\n+}\r"}]}

