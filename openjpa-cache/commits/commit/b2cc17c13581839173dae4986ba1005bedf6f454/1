{"sha":"b2cc17c13581839173dae4986ba1005bedf6f454","node_id":"MDY6Q29tbWl0MjA2MzY0OmIyY2MxN2MxMzU4MTgzOTE3M2RhZTQ5ODZiYTEwMDViZWRmNmY0NTQ=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2012-03-28T18:41:57Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2012-03-28T18:41:57Z"},"message":"OPENJPA-2161: Refactor storing ClassMetaData in StateManagerImpl.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1306530 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"022d3dc14cb9066ef4d71f3cd0bbae0dd70d7744","url":"https://api.github.com/repos/apache/openjpa/git/trees/022d3dc14cb9066ef4d71f3cd0bbae0dd70d7744"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b2cc17c13581839173dae4986ba1005bedf6f454","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b2cc17c13581839173dae4986ba1005bedf6f454","html_url":"https://github.com/apache/openjpa/commit/b2cc17c13581839173dae4986ba1005bedf6f454","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b2cc17c13581839173dae4986ba1005bedf6f454/comments","author":null,"committer":null,"parents":[{"sha":"3e1de6c8e3b56457d05250beae5b124c008aba40","url":"https://api.github.com/repos/apache/openjpa/commits/3e1de6c8e3b56457d05250beae5b124c008aba40","html_url":"https://github.com/apache/openjpa/commit/3e1de6c8e3b56457d05250beae5b124c008aba40"}],"stats":{"total":24,"additions":14,"deletions":10},"files":[{"sha":"49dbb6174ae30bea1dfa27e1bbc4e1fe2c345fb1","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","status":"modified","additions":14,"deletions":10,"changes":24,"blob_url":"https://github.com/apache/openjpa/blob/b2cc17c13581839173dae4986ba1005bedf6f454/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/b2cc17c13581839173dae4986ba1005bedf6f454/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java?ref=b2cc17c13581839173dae4986ba1005bedf6f454","patch":"@@ -34,7 +34,6 @@\n import java.util.HashMap;\n import java.util.Iterator;\n import java.util.List;\n-import java.util.Set;\n import java.util.TimeZone;\n import java.util.concurrent.locks.ReentrantLock;\n \n@@ -170,7 +169,7 @@\n      */\n     protected StateManagerImpl(Object id, ClassMetaData meta, BrokerImpl broker) {\n         _id = id;\n-        _meta = meta;\n+        setMeta(meta);\n         _broker = broker;\n         _single = new SingleFieldManager(this, broker);\n         if (broker.getMultithreaded())\n@@ -265,6 +264,7 @@ private void setPCState(PCState state) {\n         if (_state == state)\n             return;\n \n+        PCState prev = _state;\n         lock();\n         try {\n             // notify the store manager that we're changing states; can veto\n@@ -274,6 +274,7 @@ private void setPCState(PCState state) {\n             boolean wasDeleted = _state.isDeleted();\n             boolean wasDirty = _state.isDirty();\n             boolean wasPending = _state.isPendingTransactional();\n+\n             _state = state;\n \n             // enlist/delist from transaction\n@@ -290,7 +291,6 @@ else if (wasPending && !_state.isPendingTransactional())\n             else\n                 _broker.removeFromTransaction(this);\n \n-            // initialize\n             _state.initialize(this);\n             if (_state.isDeleted() && !wasDeleted)\n                 fireLifecycleEvent(LifecycleEvent.AFTER_DELETE);\n@@ -323,7 +323,7 @@ else if (sub.getObjectIdType() != _meta.getObjectIdType()) {\n                     _oid = ApplicationIds.fromPKValues(pkFields, sub);\n                 }\n             }\n-            _meta = sub;\n+            setMeta(sub);\n         }\n \n         PersistenceCapable inst = PCRegistry.newInstance(cls, this, _oid, true);\n@@ -413,9 +413,8 @@ protected void initialize(PersistenceCapable pc, PCState state) {\n     public boolean isIntercepting() {\n         if (getMetaData().isIntercepting())\n             return true;\n-        // TODO:JRB Intercepting \n-        if (AccessCode.isProperty(getMetaData().getAccessType())\n-            && _pc instanceof DynamicPersistenceCapable)\n+        // TODO:JRB Intercepting\n+        if (AccessCode.isProperty(getMetaData().getAccessType()) && _pc instanceof DynamicPersistenceCapable)\n             return true;\n         return false;\n     }\n@@ -1593,7 +1592,7 @@ public StateManager replaceStateManager(StateManager sm) {\n \n     public void accessingField(int field) {\n         // possibly change state\n-        try {\n+        try {           \n             beforeRead(field);\n             beforeAccessField(field);\n         } catch (RuntimeException re) {\n@@ -3433,8 +3432,8 @@ private void readObject(ObjectInputStream in)\n         // non-null when reconstituting ReflectingPC instances. Sadly, this\n         // penalizes the serialization footprint of non-ReflectingPC SMs also.\n         Class managedType = (Class) in.readObject();\n-        _meta = _broker.getConfiguration().getMetaDataRepositoryInstance()\n-            .getMetaData(managedType, null, true);\n+        setMeta(_broker.getConfiguration().getMetaDataRepositoryInstance()\n+            .getMetaData(managedType, null, true));\n \n         _pc = readPC(in);\n     }\n@@ -3473,8 +3472,13 @@ public boolean requiresFetch(FieldMetaData fmd) {\n     public void setPc(PersistenceCapable pc) {\n         _pc = pc;\n     }\n+    \n+    protected void setMeta(ClassMetaData cmd){\n+        _meta = cmd;\n+    }\n \n     public void setBroker(BrokerImpl ctx) {\n         _broker = ctx;\n     }\n+\n }"}]}

