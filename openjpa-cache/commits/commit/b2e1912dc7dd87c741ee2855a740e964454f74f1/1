{"sha":"b2e1912dc7dd87c741ee2855a740e964454f74f1","node_id":"MDY6Q29tbWl0MjA2MzY0OmIyZTE5MTJkYzdkZDg3Yzc0MWVlMjg1NWE3NDBlOTY0NDU0Zjc0ZjE=","commit":{"author":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-08-02T17:51:43Z"},"committer":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-08-02T17:51:43Z"},"message":"Fix StoreFacadeTypeRegistry to work when multiple stores are available.  Fix\nproblems with creating a persistence FetchPlan, and with getting max depth.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@428069 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"85d770e8578b219cea61e3dd8b2b65345e752f14","url":"https://api.github.com/repos/apache/openjpa/git/trees/85d770e8578b219cea61e3dd8b2b65345e752f14"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b2e1912dc7dd87c741ee2855a740e964454f74f1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b2e1912dc7dd87c741ee2855a740e964454f74f1","html_url":"https://github.com/apache/openjpa/commit/b2e1912dc7dd87c741ee2855a740e964454f74f1","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b2e1912dc7dd87c741ee2855a740e964454f74f1/comments","author":null,"committer":null,"parents":[{"sha":"20d59900983f720ec9636da82e802a318dc44812","url":"https://api.github.com/repos/apache/openjpa/commits/20d59900983f720ec9636da82e802a318dc44812","html_url":"https://github.com/apache/openjpa/commit/20d59900983f720ec9636da82e802a318dc44812"}],"stats":{"total":101,"additions":79,"deletions":22},"files":[{"sha":"2497cdbf27428cb5e77e422af018697d8d0e02da","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/b2e1912dc7dd87c741ee2855a740e964454f74f1/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/b2e1912dc7dd87c741ee2855a740e964454f74f1/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java?ref=b2e1912dc7dd87c741ee2855a740e964454f74f1","patch":"@@ -492,8 +492,8 @@ public void load(OpenJPAStateManager sm, JDBCStore store,\n                 long id = res.getLong(cols[0]);\n                 if (!res.wasNull())\n                     oid = store.newDataStoreId(id, relMapping, true);\n-            } else // application id\n-            {\n+            } else { \n+                // application id\n                 if (cols.length == 1) {\n                     Object val = res.getObject(cols[0], null, null);\n                     if (val != null)"},{"sha":"7b850b94a9b2011bb65d713b789590d21cc8ad73","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/StoreFacadeTypeRegistry.java","status":"modified","additions":53,"deletions":4,"changes":57,"blob_url":"https://github.com/apache/openjpa/blob/b2e1912dc7dd87c741ee2855a740e964454f74f1/openjpa-kernel/src/main/java/org/apache/openjpa/util/StoreFacadeTypeRegistry.java","raw_url":"https://github.com/apache/openjpa/raw/b2e1912dc7dd87c741ee2855a740e964454f74f1/openjpa-kernel/src/main/java/org/apache/openjpa/util/StoreFacadeTypeRegistry.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/StoreFacadeTypeRegistry.java?ref=b2e1912dc7dd87c741ee2855a740e964454f74f1","patch":"@@ -13,11 +13,60 @@\n \r\n     private Map _impls = new ConcurrentHashMap();\r\n \r\n-    public void registerImplementation(Class facadeType, Class implType) {\r\n-        _impls.put(facadeType, implType);\r\n+    /**\r\n+     * Register a facade implementation.\r\n+     *\r\n+     * @param facadeType the facade interface\r\n+     * @param storeType the store's \r\n+     * {@link org.apache.openjpa.kernel.StoreManager} type, or null for generic\r\n+     * @param implType the class implementing the facade\r\n+     */\r\n+    public void registerImplementation(Class facadeType, Class storeType, \r\n+        Class implType) {\r\n+        Object key = (storeType == null) ? (Object)facadeType \r\n+            : new Key(facadeType, storeType);\r\n+        _impls.put(key, implType);\r\n     }\r\n     \r\n-    public Class getImplementation(Class facadeType) {\r\n-        return (Class) _impls.get(facadeType);\r\n+    /**\r\n+     * Return the implementation for the given facade and store.\r\n+     *\r\n+     * @param facadeType the facade interface\r\n+     * @param storeType the store's \r\n+     * {@link org.apache.openjpa.kernel.StoreManager} type, or null for generic\r\n+     * @param implType the registered implementor\r\n+     */\r\n+    public Class getImplementation(Class facadeType, Class storeType) {\r\n+        Object key = (storeType == null) ? (Object)facadeType \r\n+            : new Key(facadeType, storeType);\r\n+        Class c = (Class) _impls.get(key);\r\n+        // if no store-specific type, see if there is a generic avaialble\r\n+        if (c == null && storeType != null)\r\n+            c = (Class) _impls.get(facadeType);\r\n+        return c; \r\n+    }\r\n+\r\n+    /**\r\n+     * Lookup key for facade+store hash.\r\n+     */\r\n+    private static class Key {\r\n+        private final Class _facadeType;\r\n+        private final Class _storeType;\r\n+\r\n+        public Key(Class facadeType, Class storeType) {\r\n+            _facadeType = facadeType;\r\n+            _storeType = storeType;\r\n+        }\r\n+\r\n+        public int hashCode() {\r\n+            return _facadeType.hashCode() ^ _storeType.hashCode();\r\n+        }\r\n+\r\n+        public boolean equals(Object other) {\r\n+            if (other == this)\r\n+                return true;\r\n+            Key k = (Key) other;\r\n+            return _facadeType == k._facadeType && _storeType == k._storeType;\r\n+        }\r\n     }\r\n }\r"},{"sha":"b54c5e5f289432ae5224de68190dbb4a79b5b301","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCPersistenceProductDerivation.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/b2e1912dc7dd87c741ee2855a740e964454f74f1/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCPersistenceProductDerivation.java","raw_url":"https://github.com/apache/openjpa/raw/b2e1912dc7dd87c741ee2855a740e964454f74f1/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCPersistenceProductDerivation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCPersistenceProductDerivation.java?ref=b2e1912dc7dd87c741ee2855a740e964454f74f1","patch":"@@ -18,6 +18,7 @@\n import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.conf.ProductDerivation;\n import org.apache.openjpa.jdbc.conf.JDBCConfigurationImpl;\n+import org.apache.openjpa.jdbc.kernel.JDBCStoreManager;\n import org.apache.openjpa.lib.conf.ConfigurationProvider;\n import org.apache.openjpa.persistence.FetchPlan;\n import org.apache.openjpa.persistence.PersistenceProductDerivation;\n@@ -39,8 +40,8 @@ public void beforeConfigurationConstruct(ConfigurationProvider cp) {\n     }\n \n     public void beforeConfigurationLoad(OpenJPAConfiguration c) {\n-        c.getStoreFacadeTypeRegistry().registerImplementation(\n-            FetchPlan.class, JDBCFetchPlan.class);\n+        c.getStoreFacadeTypeRegistry().registerImplementation(FetchPlan.class, \n+            JDBCStoreManager.class, JDBCFetchPlan.class);\n         if (!(c instanceof JDBCConfigurationImpl))\n             return;\n "},{"sha":"94444d995d9e653ce6857aac63b135085647e2de","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestPersistence.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/b2e1912dc7dd87c741ee2855a740e964454f74f1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestPersistence.java","raw_url":"https://github.com/apache/openjpa/raw/b2e1912dc7dd87c741ee2855a740e964454f74f1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestPersistence.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestPersistence.java?ref=b2e1912dc7dd87c741ee2855a740e964454f74f1","patch":"@@ -22,6 +22,7 @@\n \n import junit.framework.TestCase;\n import junit.textui.TestRunner;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n \n /**\n  * Simple test case to get an EntityManager and perform some basic operations.\n@@ -69,6 +70,12 @@ public void testCreateEntityManager() {\n         t.setRollbackOnly();\n         t.rollback();\n \n+        // openjpa-facade test\n+        assertTrue(em instanceof OpenJPAEntityManager);\n+        OpenJPAEntityManager ojem = (OpenJPAEntityManager) em;\n+        ojem.getFetchPlan().setMaxFetchDepth(-1);\n+        assertEquals(-1, ojem.getFetchPlan().getMaxFetchDepth());\n+\n         em.close();\n     }\n "},{"sha":"9a4d2c1ac9badce22805e3b3d4e710999a91affb","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerFactoryImpl.java","status":"modified","additions":7,"deletions":8,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/b2e1912dc7dd87c741ee2855a740e964454f74f1/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerFactoryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/b2e1912dc7dd87c741ee2855a740e964454f74f1/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerFactoryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerFactoryImpl.java?ref=b2e1912dc7dd87c741ee2855a740e964454f74f1","patch":"@@ -259,7 +259,7 @@ public boolean equals(Object other) {\n      * Create a store-specific facade for the given fetch configuration.\n \t * If no facade class exists, we use the default {@link FetchPlan}.\n      */\n-    FetchPlan toFetchPlan(FetchConfiguration fetch) {\n+    FetchPlan toFetchPlan(Broker broker, FetchConfiguration fetch) {\n         if (fetch == null)\n             return null;\n \n@@ -268,24 +268,23 @@ FetchPlan toFetchPlan(FetchConfiguration fetch) {\n             inner = ((DelegatingFetchConfiguration) inner).\n                 getInnermostDelegate();\n \n-        _factory.lock();\n         try {\n             if (_plan == null) {\n-                Class cls = _factory.getConfiguration()\n-                    .getStoreFacadeTypeRegistry().getImplementation(\n-                        FetchPlan.class);\n+                Class storeType = (broker == null) ? null : broker.\n+                    getStoreManager().getInnermostDelegate().getClass();\n+                Class cls = _factory.getConfiguration().\n+                    getStoreFacadeTypeRegistry().\n+                    getImplementation(FetchPlan.class, storeType);\n                 if (cls == null)\n                     cls = FetchPlan.class;\n-                _plan = cls.getConstructor(FetchPlan.class);\n+                _plan = cls.getConstructor(FetchConfiguration.class);\n             }\n             return _plan.newInstance(fetch);\n         } catch (InvocationTargetException ite) {\n             throw PersistenceExceptions.toPersistenceException\n                 (ite.getTargetException());\n         } catch (Exception e) {\n             throw PersistenceExceptions.toPersistenceException(e);\n-        } finally {\n-            _factory.unlock();\n         }\n \t}\n }"},{"sha":"a6b3eb2dbda64ff06a69719710a45ebcc89bb6af","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/b2e1912dc7dd87c741ee2855a740e964454f74f1/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/b2e1912dc7dd87c741ee2855a740e964454f74f1/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java?ref=b2e1912dc7dd87c741ee2855a740e964454f74f1","patch":"@@ -119,7 +119,8 @@ public FetchPlan getFetchPlan() {\n         _broker.lock();\n         try {\n             if (_fetch == null)\n-                _fetch = _emf.toFetchPlan(_broker.getFetchConfiguration());\n+                _fetch = _emf.toFetchPlan(_broker, \n+                    _broker.getFetchConfiguration());\n             return _fetch;\n         } finally {\n             _broker.unlock();"},{"sha":"6e5af4bed3f2a2bdddf64504d42929bedc33b863","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/Extent.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/b2e1912dc7dd87c741ee2855a740e964454f74f1/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/Extent.java","raw_url":"https://github.com/apache/openjpa/raw/b2e1912dc7dd87c741ee2855a740e964454f74f1/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/Extent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/Extent.java?ref=b2e1912dc7dd87c741ee2855a740e964454f74f1","patch":"@@ -79,8 +79,8 @@ public FetchPlan getFetchPlan() {\n         try {\n             if (_fetch == null)\n                 _fetch = ((EntityManagerFactoryImpl) _em.\n-                    getEntityManagerFactory()).toFetchPlan(_extent.\n-                    getFetchConfiguration());\n+                    getEntityManagerFactory()).toFetchPlan(_extent.getBroker(),\n+                    _extent.getFetchConfiguration());\n             return _fetch;\n         } finally {\n             _extent.unlock();"},{"sha":"daecc2f602e8aff2fb7a5cd3768e7aa72bed7593","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/FetchPlan.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/b2e1912dc7dd87c741ee2855a740e964454f74f1/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/FetchPlan.java","raw_url":"https://github.com/apache/openjpa/raw/b2e1912dc7dd87c741ee2855a740e964454f74f1/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/FetchPlan.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/FetchPlan.java?ref=b2e1912dc7dd87c741ee2855a740e964454f74f1","patch":"@@ -83,7 +83,7 @@ public FetchConfiguration getDelegate() {\n     /**\n      * The maximum fetch depth when loading an object.\n      */\n-    public int getMaxFetchDepth(int depth) {\n+    public int getMaxFetchDepth() {\n         return _fetch.getMaxFetchDepth();\n     }\n "},{"sha":"5c66bfec4628a9a77217ea0ac1b48ac7e7b5b23c","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/b2e1912dc7dd87c741ee2855a740e964454f74f1/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/b2e1912dc7dd87c741ee2855a740e964454f74f1/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java?ref=b2e1912dc7dd87c741ee2855a740e964454f74f1","patch":"@@ -99,8 +99,8 @@ public FetchPlan getFetchPlan() {\n         try {\n             if (_fetch == null)\n                 _fetch = ((EntityManagerFactoryImpl) _em.\n-                    getEntityManagerFactory()).toFetchPlan(_query.\n-                    getFetchConfiguration());\n+                    getEntityManagerFactory()).toFetchPlan(_query.getBroker(),\n+                    _query.getFetchConfiguration());\n             return _fetch;\n         } finally {\n             _query.unlock();"}]}

