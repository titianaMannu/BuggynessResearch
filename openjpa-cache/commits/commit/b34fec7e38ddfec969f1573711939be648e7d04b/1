{"sha":"b34fec7e38ddfec969f1573711939be648e7d04b","node_id":"MDY6Q29tbWl0MjA2MzY0OmIzNGZlYzdlMzhkZGZlYzk2OWYxNTczNzExOTM5YmU2NDhlN2QwNGI=","commit":{"author":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2006-09-05T19:43:41Z"},"committer":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2006-09-05T19:43:41Z"},"message":"Removed references to non-existent mappings KeyColumn, KeyColumns, KeyEmbeddedMapping, KeyIndex, ElementColumn, ElementColumns, ElementEmbeddedMapping, and ElementStrategy\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@440460 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ad0030ab00b087a320160df7aa5373b3c295744f","url":"https://api.github.com/repos/apache/openjpa/git/trees/ad0030ab00b087a320160df7aa5373b3c295744f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b34fec7e38ddfec969f1573711939be648e7d04b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b34fec7e38ddfec969f1573711939be648e7d04b","html_url":"https://github.com/apache/openjpa/commit/b34fec7e38ddfec969f1573711939be648e7d04b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b34fec7e38ddfec969f1573711939be648e7d04b/comments","author":null,"committer":null,"parents":[{"sha":"8676abb0ada7d957799c44096cb5af0c0fe917f0","url":"https://api.github.com/repos/apache/openjpa/commits/8676abb0ada7d957799c44096cb5af0c0fe917f0","html_url":"https://github.com/apache/openjpa/commit/8676abb0ada7d957799c44096cb5af0c0fe917f0"}],"stats":{"total":429,"additions":17,"deletions":412},"files":[{"sha":"619505dcc8da444777aa5495a64f2c4c56621e74","filename":"openjpa-project/src/doc/manual/ref_guide_mapping.xml","status":"modified","additions":17,"deletions":412,"changes":429,"blob_url":"https://github.com/apache/openjpa/blob/b34fec7e38ddfec969f1573711939be648e7d04b/openjpa-project/src/doc/manual/ref_guide_mapping.xml","raw_url":"https://github.com/apache/openjpa/raw/b34fec7e38ddfec969f1573711939be648e7d04b/openjpa-project/src/doc/manual/ref_guide_mapping.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_mapping.xml?ref=b34fec7e38ddfec969f1573711939be648e7d04b","patch":"@@ -1686,9 +1686,6 @@ this with the\n <ulink url=\"../apidocs/org/apache/openjpa/persistence/jdbc/Columns.html\">\n <classname>org.apache.openjpa.persistence.jdbc.Columns</classname></ulink>\n annotation, which contains an array of <classname>Column</classname> values.\n-<xref linkend=\"ref_guide_mapping_custom_field_conf_extex\"/> uses OpenJPA's\n-<classname>Columns</classname> annotation to map a <classname>java.awt.Point\n-</classname> to separate X and Y columns.\n             </para>\n             <para>\n Remember to annotate custom field types with <classname> Persistent</classname>\n@@ -1828,32 +1825,11 @@ or map field mapping. We cover collection mappings in\n                 </listitem>\n                 <listitem>\n                     <para>\n-<literal>ElementColumn[] elementColumns</literal>: Element columns for the new\n-collection or map field mapping. You will see how to use element columns in\n-<xref linkend=\"ref_guide_mapping_jpa_coll_cols\"/>.\n-                    </para>\n-                </listitem>\n-                <listitem>\n-                    <para>\n <literal>ElementJoinColumn[] elementJoinColumns</literal>: Element join columns\n for the new collection or map field mapping. You will see how to use element\n join columns in <xref linkend=\"ref_guide_mapping_jpa_coll_joincols\"/>.\n                     </para>\n                 </listitem>\n-                <listitem>\n-                    <para>\n-<literal>KeyColumn[] keyColumns</literal>: Map key columns for the new map\n-field mapping. You will see how to use key columns in\n-<xref linkend=\"ref_guide_mapping_jpa_map_keycols\"/>.\n-                    </para>\n-                </listitem>\n-                <listitem>\n-                    <para>\n-<literal>KeyJoinColumn[] keyJoinColumns</literal>: Key join columns for the new\n-map field mapping. You will see how to use key join columns in\n-<xref linkend=\"ref_guide_mapping_jpa_map_keyjoincols\"/>.\n-                    </para>\n-                </listitem>\n             </itemizedlist>\n             <para>\n The following example defines an embeddable <classname> PathCoordinate\n@@ -1919,10 +1895,9 @@ In <xref linkend=\"ref_guide_meta_jpa_persistent_coll\"/>, we explored the\n <classname>PersistentCollection</classname> annotation for persistent collection\n fields that aren't a standard <literal>OneToMany</literal> or <literal>\n ManyToMany</literal> relation. To map these non-standard collections, combine\n-OpenJPA's <classname>ContainerTable</classname> annotation with <classname>\n-ElementColumn</classname> s, <classname> ElementJoinColumn</classname> s, or an\n-<classname> ElementEmbeddedMapping</classname>. We explore the annotations\n-below.\n+OpenJPA's <classname>ContainerTable</classname> annotation with\n+<classname>ElementJoinColumn</classname>s.\n+We explore the annotations below.\n             </para>\n             <section id=\"ref_guide_mapping_jpa_coll_table\">\n                 <title>\n@@ -1993,39 +1968,6 @@ collection elements. That is left to separate annotations, which are the subject\n of the next sections.\n                 </para>\n             </section>\n-            <section id=\"ref_guide_mapping_jpa_coll_cols\">\n-                <title>\n-                    Element Columns\n-                </title>\n-                <indexterm zone=\"ref_guide_mapping_jpa_coll_cols\">\n-                    <primary>\n-                        ElementColumn\n-                    </primary>\n-                    <seealso>\n-                        mapping metadata\n-                    </seealso>\n-                </indexterm>\n-                <para>\n-Just as the JPA <classname>Column</classname> annotation maps a simple value\n-(primitive wrapper, <classname> String</classname>, etc), OpenJPA's\n-<ulink url=\"../apidocs/org/apache/openjpa/persistence/jdbc/ElementColumn.html\">\n-<classname>org.apache.openjpa.persistence.jdbc.ElementColumn</classname></ulink>\n-annotation maps a simple element value. To map custom multi-column elements, use\n-the\n-<ulink url=\"../apidocs/org/apache/openjpa/persistence/jdbc/ElementColumns.html\">\n-<classname>org.apache.openjpa.persistence.jdbc.ElementColumns</classname>\n-</ulink> annotation, whose value is an array of <classname> ElementColumn\n-</classname> s.\n-                </para>\n-                <para>\n-An <classname>ElementColumn</classname> always resides in a container table, so\n-it does not have the <literal> table</literal> property of a standard\n-<classname> Column</classname>. Otherwise, the <classname>ElementColumn\n-</classname> and standard <classname>Column</classname> annotations are\n-equivalent. See <xref linkend=\"jpa_overview_mapping_column\"/> in the JPA\n-Overview for a review of the <classname>Column</classname> annotation.\n-                </para>\n-            </section>\n             <section id=\"ref_guide_mapping_jpa_coll_joincols\">\n                 <title>\n                     Element Join Columns\n@@ -2147,94 +2089,6 @@ properties correspond exactly to the same-named properties on the standard\n <xref linkend=\"jpa_overview_mapping_column\"/>.\n                 </para>\n             </section>\n-            <section id=\"ref_guide_mapping_jpa_coll_ex\">\n-                <title>\n-                    Examples\n-                </title>\n-                <mediaobject>\n-                    <imageobject>\n-                        <!-- PNG image data, 383 x 176 (see README) -->\n-                        <imagedata fileref=\"img/basic-coll.png\" width=\"255px\"/>\n-                        \n-                    </imageobject>\n-                </mediaobject>\n-                <para>\n-Our first example maps the <literal>Article.subtitles</literal> field to the\n-<literal>ART_SUBS</literal> container table, as shown in the diagram above.\n-Notice the use of <classname> ContainerTable</classname> in combination with\n-<classname>ElementColumn</classname> and <classname>OrderColumn</classname> to\n-map this ordered list of strings.\n-                </para>\n-                <example id=\"ref_guide_mapping_jpa_coll_simpleex\">\n-                    <title>\n-                        String List Mapping\n-                    </title>\n-<programlisting>\n-package org.mag;\n-\n-import org.apache.openjpa.persistence.*;\n-import org.apache.openjpa.persistence.jdbc.*;\n-\n-@Entity\n-@Table(name=\"ART\")\n-public class Article\n-{\n-    @Id private long id;\n-\n-    @PersistentCollection\n-    @ContainerTable(name=\"ART_SUBS\", joinColumns=@XJoinColumn(name=\"ART_ID\"))\n-    @ElementColumn(name=\"SUBTITLE\")\n-    @OrderColumn(name=\"ORD\")\n-    private List&lt;String&gt; subtitles;\n-\n-    ...\n-}\n-</programlisting>\n-                </example>\n-                <para>\n-Now we map a collection of embedded <classname>Address</classname> objects for a\n-<classname>Company</classname>, according to the following diagram:\n-                </para>\n-                <mediaobject>\n-                    <imageobject>\n-                        <!-- PNG image data, 545 x 239 (see README) -->\n-                        <imagedata fileref=\"img/embedded-coll.png\" width=\"363px\"/>\n-                        \n-                    </imageobject>\n-                </mediaobject>\n-                <example id=\"ref_guide_mapping_jpa_coll_embedex\">\n-                    <title>\n-                        Embedded Element Mapping\n-                    </title>\n-<programlisting>\n-package org.mag.pub;\n-\n-import org.apache.openjpa.persistence.*;\n-import org.apache.openjpa.persistence.jdbc.*;\n-\n-@Embeddable\n-public class Address\n-{\n-    ...\n-}\n-\n-@Entity\n-@Table(name=\"COMP\")\n-public class Company\n-{\n-    @Id private long id;\n-  \n-    @PersistentCollection(elementEmbedded=true)\n-    @ContainerTable(name=\"COMP_ADDRS\", joinColumns=@XJoinColumn(name=\"COMP_ID\"))\n-    @ElementEmbeddedMapping(overrides=@MappingOverride(name=\"state\", \n-        columns=@Column(columnDefinition=\"CHAR(2)\")))\n-    private Collection&lt;Address&gt; addresses;\n-\n-    ...\n-}\n-</programlisting>\n-                </example>\n-            </section>\n         </section>\n         <section id=\"ref_guide_mapping_jpa_onemany\">\n             <title>\n@@ -2253,7 +2107,7 @@ public class Company\n             </indexterm>\n             <para>\n The previous section covered the use of <classname>ElementJoinColumn</classname>\n-annotations in conjunction with a <classname> ContainerTable</classname> for\n+annotations in conjunction with a <classname>ContainerTable</classname> for\n mapping collections to dedicate tables. <classname>ElementJoinColumn</classname>\n s, however, have one additional use: to create a one-sided one-many mapping.\n Standard JPA supports <classname>OneToMany</classname> fields without a\n@@ -2272,9 +2126,9 @@ foreign key (logical or actual) in the table of the related type.\n             </mediaobject>\n             <para>\n Consider the featureSelection above. <classname>Subscription</classname> has a collection\n-of <classname>LineItem</classname> s, but <classname> LineItem</classname> has\n-no inverse relation to <classname> Subscription</classname>. To retrieve all of\n-the <classname> LineItem</classname> records for a <classname> Subscription\n+of <classname>LineItem</classname> s, but <classname>LineItem</classname> has\n+no inverse relation to <classname>Subscription</classname>. To retrieve all of\n+the <classname>LineItem</classname> records for a <classname>Subscription\n </classname>, we join the <literal>SUB_ID</literal> inverse foreign key column\n in the <literal>LINE_ITEM</literal> table to the primary key column of the\n <literal>SUB</literal> table. The example below shows how to represent this\n@@ -2326,166 +2180,13 @@ public class Subscription\n                 </secondary>\n             </indexterm>\n             <para>\n-<xref linkend=\"ref_guide_meta_jpa_persistent_map\"/> discussed the\n-<classname>PersistentMap</classname> annotation for persistent map fields. To\n-map these non-standard fields to the database, combine OpenJPA's <classname>\n-ContainerTable</classname> annotation with <classname>KeyColumn</classname> s,\n-<classname> KeyJoinColumn</classname> s, or an <classname> KeyEmbeddedMapping\n-</classname> and <classname>ElementColumn</classname> s, <classname>\n-ElementJoinColumn</classname> s, or an <classname> ElementEmbeddedMapping\n-</classname>.\n-            </para>\n-            <para>\n We detailed the <literal>ContainerTable</literal> annotation in\n <xref linkend=\"ref_guide_mapping_jpa_coll_table\"/>. We also discussed\n-element columns, join columns, and embedded mappings in\n-<xref linkend=\"ref_guide_mapping_jpa_coll_cols\"/>,\n-<xref linkend=\"ref_guide_mapping_jpa_coll_joincols\"/>, and\n+join columns embedded mappings in\n+<xref linkend=\"ref_guide_mapping_jpa_coll_joincols\"/> and\n <xref linkend=\"ref_guide_mapping_jpa_coll_embed\"/>. Key columns, join\n columns, and embedded mappings are new, however; we tackle them below.\n             </para>\n-            <section id=\"ref_guide_mapping_jpa_map_keycols\">\n-                <title>\n-                    Key Columns\n-                </title>\n-                <indexterm zone=\"ref_guide_mapping_jpa_map_keycols\">\n-                    <primary>\n-                        KeyColumn\n-                    </primary>\n-                    <seealso>\n-                        mapping metadata\n-                    </seealso>\n-                </indexterm>\n-                <para>\n-Key columns serve the same role for map keys as the element columns described in\n-<xref linkend=\"ref_guide_mapping_jpa_coll_cols\"/> serve for collection\n-elements. OpenJPA's\n-<ulink url=\"../apidocs/org/apache/openjpa/persistence/jdbc/KeyColumn.html\">\n-<classname>org.apache.openjpa.persistence.jdbc.KeyColumn</classname></ulink>\n-annotation represents a map key. To map custom multi-column keys, use the\n-<ulink url=\"../apidocs/org/apache/openjpa/persistence/jdbc/KeyColumns.html\">\n-<classname>org.apache.openjpa.persistence.jdbc.KeyColumns</classname></ulink>\n-annotation, whose value is an array of <classname> KeyColumn</classname> s.\n-                </para>\n-                <para>\n-A <classname>KeyColumn</classname> always resides in a container table, so it\n-does not have the <literal> table</literal> property of a standard <classname>\n-Column</classname>. Otherwise, the <classname>KeyColumn</classname> and standard\n-<classname>Column</classname> annotations are equivalent. See\n-<xref linkend=\"jpa_overview_mapping_column\"/> in the JPA Overview for a\n-review of the <classname>Column</classname> annotation.\n-                </para>\n-            </section>\n-            <section id=\"ref_guide_mapping_jpa_map_keyjoincols\">\n-                <title>\n-                    Key Join Columns\n-                </title>\n-                <indexterm zone=\"ref_guide_mapping_jpa_map_keyjoincols\">\n-                    <primary>\n-                        KeyJoinColumn\n-                    </primary>\n-                    <seealso>\n-                        mapping metadata\n-                    </seealso>\n-                </indexterm>\n-                <para>\n-Key join columns are equivalent to standard JPA join columns, except that they\n-represent a join to a map key entity rather than a direct relation. You\n-represent a key join column with OpenJPA's\n-<ulink url=\"../apidocs/org/apache/openjpa/persistence/jdbc/KeyJoinColumn.html\">\n-<classname>org.apache.openjpa.persistence.jdbc.KeyJoinColumn</classname></ulink>\n-annotation. To declare a compound join, enclose an array of <classname>\n-KeyJoinColumn</classname>s in the\n-<ulink url=\"../apidocs/org/apache/openjpa/persistence/jdbc/KeyJoinColumns.html\">\n-<classname>org.apache.openjpa.persistence.jdbc.KeyJoinColumns</classname>\n-</ulink> annotation.\n-                </para>\n-                <para>\n-A <classname>KeyJoinColumn</classname> always resides in a container table, so\n-it does not have the <literal> table</literal> property of a standard\n-<classname> JoinColumn</classname>. Like <classname> XJoinColumn</classname>s\n-above, <classname> KeyJoinColumn</classname>s can reference a linked field\n-rather than a static linked column. Otherwise, the <classname> KeyJoinColumn\n-</classname> and standard <classname>JoinColumn</classname> annotations are\n-equivalent. See <xref linkend=\"jpa_overview_mapping_rel\"/> in the JPA\n-Overview for a review of the <classname>JoinColumn</classname> annotation.\n-                </para>\n-            </section>\n-            <section id=\"ref_guide_mapping_jpa_map_embedkey\">\n-                <title>\n-                    Key Embedded Mapping\n-                </title>\n-                <indexterm zone=\"ref_guide_mapping_jpa_map_embedkey\">\n-                    <primary>\n-                        KeyEmbeddedMapping\n-                    </primary>\n-                    <seealso>\n-                        mapping metadata\n-                    </seealso>\n-                </indexterm>\n-                <para>\n-The\n-<ulink url=\"../apidocs/org/apache/openjpa/persistence/jdbc/KeyEmbeddedMapping.html\">\n-<classname>org.apache.openjpa.persistence.jdbc.KeyEmbeddedMapping</classname>\n-</ulink> annotation allows you to map your map field's embedded key type to your\n-container table. This annotation has exactly the same properties as the\n-<classname>EmbeddedMapping</classname> annotation described\n-<link linkend=\"ref_guide_mapping_jpa_embed\">above</link>.\n-                </para>\n-            </section>\n-            <section id=\"ref_guide_mapping_jpa_map_ex\">\n-                <title>\n-                    Examples\n-                </title>\n-                <mediaobject>\n-                    <imageobject>\n-                        <!-- PNG image data, 410 x 266 (see README) -->\n-                        <imagedata fileref=\"img/string-rel-map.png\" width=\"273px\"/>\n-                        \n-                    </imageobject>\n-                </mediaobject>\n-                <para>\n-Map mapping in OpenJPA uses the same principles you saw in collection mapping.\n-The example below maps the <literal> Article.authors</literal> map according to\n-the diagram above.\n-                </para>\n-                <example id=\"ref_guide_mapping_jpa_map_stringrelmap\">\n-                    <title>\n-                        String Key, Entity Value Map Mapping\n-                    </title>\n-<programlisting>\n-package org.mag.pub;\n-\n-import org.apache.openjpa.persistence.*;\n-import org.apache.openjpa.persistence.jdbc.*;\n-\n-@Entity\n-@Table(name=\"AUTH\")\n-@DataStoreIdColumn(name=\"AID\" columnDefinition=\"INTEGER64\")\n-public class Author\n-{\n-    ...\n-}\n-\n-package org.mag;\n-\n-@Entity\n-@Table(name=\"ART\")\n-public class Article\n-{\n-    @Id private long id;\n- \n-    @PersistentMap\n-    @ContainerTable(name=\"ART_AUTHS\", joinColumns=@XJoinColumn(name=\"ART_ID\"))\n-    @KeyColumn(name=\"LNAME\")\n-    @ElementJoinColumn(name=\"AUTH_ID\")\n-    private Map&lt;String,Author&gt; authors;\n-\n-    ...\n-}\n-</programlisting>\n-                </example>\n-            </section>\n         </section>\n         <section id=\"ref_guide_mapping_jpa_constraints\">\n             <title>\n@@ -2526,7 +2227,7 @@ presented in the following sections.\n The <ulink url=\"../apidocs/org/apache/openjpa/persistence/jdbc/Index.html\">\n <classname>org.apache.openjpa.persistence.jdbc.Index</classname></ulink>\n annotation represents an index on the columns of a field. It is also used within\n-the <link linkend=\"ref_guide_mapping_jpa_coll_table\"><classname> ConterainTable\n+the <link linkend=\"ref_guide_mapping_jpa_coll_table\"><classname>ContainerTable\n </classname></link> annotation to index join columns.\n                 </para>\n                 <para>\n@@ -2706,45 +2407,6 @@ Here again is our map example from <xref linkend=\"ref_guide_mapping_jpa_map\"/>\n                         \n                     </imageobject>\n                 </mediaobject>\n-                <example id=\"ref_guide_mapping_jpa_constraintex_map\">\n-                    <title>\n-                        Constraint Mapping\n-                    </title>\n-<programlisting>\n-package org.mag.pub;\n-\n-import org.apache.openjpa.persistence.*;\n-import org.apache.openjpa.persistence.jdbc.*;\n-\n-@Entity\n-@Table(name=\"AUTH\")\n-@DataStoreIdColumn(name=\"AID\" columnDefinition=\"INTEGER64\")\n-public class Author\n-{\n-    ...\n-}\n-\n-package org.mag;\n-\n-@Entity\n-@Table(name=\"ART\")\n-public class Article\n-{\n-    @Id private long id;\n- \n-    @PersistentMap\n-    @ContainerTable(name=\"ART_AUTHS\", joinColumns=@XJoinColumn(name=\"ART_ID\")\n-        joinForeignKey=@ForeignKey(deleteAction=ForeignKeyAction.CASCADE))\n-    @KeyColumn(name=\"LNAME\")\n-    @KeyIndex(name=\"I_AUTH_LNAME\")\n-    @ElementJoinColumn(name=\"AUTH_ID\")\n-    @ElementForeignKey(deleteAction=ForeignKeyAction.RESTRICT)\n-    private Map&lt;String,Author&gt; authors;\n-\n-    ...\n-}\n-</programlisting>\n-                </example>\n             </section>\n         </section>\n     </section>\n@@ -2976,7 +2638,7 @@ OpenJPA recognizes the following field extensions.\n                 <para>\n This extension specifies how to eagerly fetch related objects. It overrides the\n global <link linkend=\"openjpa.jdbc.EagerFetchMode\"><literal>\n-openjpa.jdbc.EagerFetchMode</literal></link> property. <phrase> Set the JPA\n+openjpa.jdbc.EagerFetchMode</literal></link> property. <phrase>Set the JPA\n <ulink url=\"../apidocs/org/apache/openjpa/persistence/jdbc/EagerFetchMode.html\">\n <classname>org.apache.openjpa.persistence.jdbc.EagerFetchMode</classname>\n </ulink> annotation to a value from the\n@@ -3047,9 +2709,9 @@ OpenJPA defines the following extensions for nonpolymorphic values:\n The value of these extensions is a constant from the\n <ulink url=\"../apidocs/org/apache/openjpa/persistence/jdbc/NonpolymorphicType.html\">\n <classname>org.apache.openjpa.persistence.jdbc.NonpolymorphicType</classname>\n-</ulink> enumeration. The default value, <literal> EXACT</literal>, indicates\n+</ulink> enumeration. The default value, <literal>EXACT</literal>, indicates\n that the relation will always be of the exact declared type. A value of\n-<literal> JOINABLE</literal>, on the other hand, means that the relation might\n+<literal>JOINABLE</literal>, on the other hand, means that the relation might\n be to any joinable subclass of the declared type. This value only excludes\n table-per-class subclasses.\n                 </para>\n@@ -3156,13 +2818,6 @@ Field strategy or value handler plugin string.\n                     </listitem>\n                     <listitem>\n                         <para>\n-<ulink url=\"../apidocs/org/apache/openjpa/persistence/jdbc/ElementStrategy.html\">\n-<classname>org.apache.openjpa.persistence.jdbc.ElementStrategy</classname>\n-</ulink>: Array, collection, or map element value handler plugin string.\n-                        </para>\n-                    </listitem>\n-                    <listitem>\n-                        <para>\n <ulink url=\"../apidocs/org/apache/openjpa/persistence/jdbc/KeyStrategy.html\">\n <classname>org.apache.openjpa.persistence.jdbc.KeyStrategy</classname></ulink>:\n Map key value handler plugin string.\n@@ -3235,7 +2890,7 @@ concrete strategies in the <literal>org.apache.openjpa.jdbc.meta.strats\n </literal> package.\n             </para>\n             <para>\n-<phrase> The\n+<phrase>The\n <ulink url=\"../apidocs/org/apache/openjpa/persistence/jdbc/Strategy.html\">\n <classname>org.apache.openjpa.persistence.jdbc.Strategy</classname></ulink>\n annotation allows you to declare a custom class mapping strategy in JPA mapping\n@@ -3386,63 +3041,13 @@ defaults in detail.\n                 <para>\n Your other option is to explicitly install a custom value handler or strategy on\n a particular field. To do so, specify the full name of your implementation class\n-in the proper mapping metadata extension. <phrase> OpenJPA includes the\n+in the proper mapping metadata extension. <phrase>OpenJPA includes the\n <ulink url=\"../apidocs/org/apache/openjpa/persistence/jdbc/Strategy.html\">\n-<classname>org.apache.openjpa.persistence.jdbc.Strategy</classname></ulink>,\n-<ulink url=\"../apidocs/org/apache/openjpa/persistence/jdbc/ElementStrategy.html\">\n-<classname>org.apache.openjpa.persistence.jdbc.ElementStrategy</classname>\n-</ulink>, and\n-<ulink url=\"../apidocs/org/apache/openjpa/persistence/jdbc/KeyStrategy.html\">\n-<classname>org.apache.openjpa.persistence.jdbc.KeyStrategy</classname></ulink>\n-annotations.</phrase> You can configure the named strategy or handler's bean\n+<classname>org.apache.openjpa.persistence.jdbc.Strategy</classname></ulink>\n+annotation.</phrase> You can configure the named strategy or handler's bean\n properties in these extensions using OpenJPA's plugin format (see\n <xref linkend=\"ref_guide_conf_plugins\"/> ).\n                 </para>\n-                <para>\n-The example below installs a custom strategy on the <literal>coverImage\n-</literal> field, uses a custom value handler for the <literal>\n-primaryInfoStruct</literal> field, and uses the same value handler for the\n-elements of the <literal>secondaryInfoStructs</literal> collection.\n-                </para>\n-                <example id=\"ref_guide_mapping_custom_field_conf_extex\">\n-                    <title>\n-                        Custom Mappings via Extensions\n-                    </title>\n-<programlisting>\n-import org.apache.openjpa.persistence.*;\n-import org.apache.openjpa.persistence.jdbc.*;\n-\n-@Entity\n-public class Magazine\n-{\n-    @Persistent\n-    @Strategy(\"org.mag.mapping.ImageStrategy\")\n-    @Column(name=\"IMG\")\n-    private Image coverImage;\n- \n-    @Persistent\n-    @Strategy(\"org.mag.mapping.InfoStructHandler\")\n-    @Columns({\n-        @Column(name=\"DATA1\"),\n-        @Column(name=\"DATA2\"),\n-        @Column(name=\"DATA3\")\n-    })\n-    private InfoStruct primaryInfoStruct;\n-\n-    @PersistentCollection\n-    @ContainerTable(name=\"SEC_STRUCTS\", joinColumns=@XJoinColumn(name=\"MAG_ID\"))\n-    @ElementStrategy(\"org.mag.mapping.InfoStructHandler\")\n-    @ElementColumns({\n-        @ElementColumn(name=\"DATA1\"),\n-        @ElementColumn(name=\"DATA2\"),\n-        @ElementColumn(name=\"DATA3\")\n-    })\n-    private Collection&lt;InfoStruct&gt; secondaryInfoStructs;\n-\n-    ...\n-}\n-</programlisting>\n-                </example>\n             </section>\n         </section>\n     </section>"}]}

