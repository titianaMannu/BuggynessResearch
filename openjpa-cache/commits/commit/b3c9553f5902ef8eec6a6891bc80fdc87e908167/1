{"sha":"b3c9553f5902ef8eec6a6891bc80fdc87e908167","node_id":"MDY6Q29tbWl0MjA2MzY0OmIzYzk1NTNmNTkwMmVmOGVlYzZhNjg5MWJjODBmZGM4N2U5MDgxNjc=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-08-23T17:30:58Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-08-23T17:30:58Z"},"message":"OPENJPA-526: setting svn eol-stle on new file\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@988220 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1a5de9cd051c637b6ca8edb0a5b6381fdd11e947","url":"https://api.github.com/repos/apache/openjpa/git/trees/1a5de9cd051c637b6ca8edb0a5b6381fdd11e947"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b3c9553f5902ef8eec6a6891bc80fdc87e908167","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b3c9553f5902ef8eec6a6891bc80fdc87e908167","html_url":"https://github.com/apache/openjpa/commit/b3c9553f5902ef8eec6a6891bc80fdc87e908167","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b3c9553f5902ef8eec6a6891bc80fdc87e908167/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"f0f3a4c588ff8a7c78e95d12b46ed54e8cfae838","url":"https://api.github.com/repos/apache/openjpa/commits/f0f3a4c588ff8a7c78e95d12b46ed54e8cfae838","html_url":"https://github.com/apache/openjpa/commit/f0f3a4c588ff8a7c78e95d12b46ed54e8cfae838"}],"stats":{"total":430,"additions":215,"deletions":215},"files":[{"sha":"23940777594e07e1f6ee3bcc8c9d9c23f29dab90","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestLobs.java","status":"modified","additions":215,"deletions":215,"changes":430,"blob_url":"https://github.com/apache/openjpa/blob/b3c9553f5902ef8eec6a6891bc80fdc87e908167/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestLobs.java","raw_url":"https://github.com/apache/openjpa/raw/b3c9553f5902ef8eec6a6891bc80fdc87e908167/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestLobs.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestLobs.java?ref=b3c9553f5902ef8eec6a6891bc80fdc87e908167","patch":"@@ -1,215 +1,215 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc;\r\n-\r\n-import javax.persistence.EntityManager;\r\n-import javax.persistence.Query;\r\n-import javax.persistence.RollbackException;\r\n-\r\n-import junit.framework.AssertionFailedError;\r\n-\r\n-import org.apache.openjpa.persistence.kernel.common.apps.Blobs;\r\n-import org.apache.openjpa.persistence.kernel.common.apps.Lobs;\r\n-import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n-\r\n-public class TestLobs extends SingleEMFTestCase {\r\n-    /**\r\n-     * Support method to get a random Byte for testing.\r\n-     */\r\n-    public static Byte randomByte() {\r\n-        return new Byte((byte) (Math.random() * Byte.MAX_VALUE));\r\n-    }\r\n-\r\n-    public void setUp() throws Exception {\r\n-        super.setUp(DROP_TABLES, Lobs.class, Blobs.class);\r\n-    }\r\n-    public void testNullableAndNonNullableBLobs() {\r\n-        // test with null\r\n-        EntityManager em = emf.createEntityManager();\r\n-        Blobs lobs = new Blobs();\r\n-        byte[] bytes = new byte[10];\r\n-        for (int i = 0; i < bytes.length; i++)\r\n-            bytes[i] = randomByte().byteValue();\r\n-\r\n-        em.getTransaction().begin();\r\n-        lobs.setLobNotNullable(bytes);\r\n-        lobs.setLobNullable(null);\r\n-        em.persist(lobs);\r\n-        em.getTransaction().commit();\r\n-        em.close();\r\n-\r\n-        em = emf.createEntityManager();\r\n-        em.getTransaction().begin();\r\n-        lobs = new Blobs();\r\n-        lobs.setLobNotNullable(null);\r\n-        lobs.setLobNullable(null);\r\n-        em.persist(lobs);\r\n-        try {\r\n-            em.getTransaction().commit();\r\n-        } catch (Exception e) {\r\n-            assertError(e, RollbackException.class);\r\n-        }\r\n-        em.close();\r\n-\r\n-        em = emf.createEntityManager();\r\n-        em.getTransaction().begin();\r\n-        Query query = em.createQuery(\"select e from Blobs e\");\r\n-        lobs = (Blobs)query.getSingleResult();\r\n-        assertTrue(lobs.getLobNullable() == null || lobs.getLobNullable().length == 0);   // still an empty string\r\n-        em.remove(lobs);\r\n-        em.getTransaction().commit();\r\n-        em.close();\r\n-\r\n-        // test with 0 length bytes\r\n-        bytes = new byte[0];\r\n-        em = emf.createEntityManager();\r\n-        em.getTransaction().begin();\r\n-        lobs.setLobNotNullable(bytes);\r\n-        lobs.setLobNullable(bytes);\r\n-        em.persist(lobs);\r\n-        em.getTransaction().commit();\r\n-        em.close();\r\n-\r\n-        em = emf.createEntityManager();\r\n-        em.getTransaction().begin();\r\n-        query = em.createQuery(\"select e from Blobs e\");\r\n-        lobs = (Blobs)query.getSingleResult();\r\n-        assertTrue(lobs.getLobNullable() == null || lobs.getLobNullable().length == 0);\r\n-        assertTrue(lobs.getLobNotNullable() == null || lobs.getLobNotNullable().length == 0);\r\n-        for (int i = 0; i < bytes.length; i++) {\r\n-            assertEquals(bytes[i], lobs.getLobNullable()[i]);\r\n-        }\r\n-        em.remove(lobs);\r\n-        em.getTransaction().commit();\r\n-        em.close();\r\n-\r\n-        // test with large data\r\n-        bytes = new byte[5000];\r\n-        for (int i = 0; i < bytes.length; i++)\r\n-            bytes[i] = randomByte().byteValue();\r\n-\r\n-        em = emf.createEntityManager();\r\n-        lobs = new Blobs();\r\n-        em.getTransaction().begin();\r\n-        lobs.setLobNotNullable(bytes);\r\n-        lobs.setLobNullable(bytes);\r\n-        em.persist(lobs);\r\n-        em.getTransaction().commit();\r\n-        em.close();\r\n-\r\n-        em = emf.createEntityManager();\r\n-        em.getTransaction().begin();\r\n-        query = em.createQuery(\"select e from Blobs e\");\r\n-        lobs = (Blobs)query.getSingleResult();\r\n-        for (int i = 0; i < 5000; i++) {\r\n-            assertEquals(lobs.getLobNullable()[i], lobs.getLobNotNullable()[i]);\r\n-            assertEquals(bytes[i], lobs.getLobNullable()[i]);\r\n-        }\r\n-        em.remove(lobs);\r\n-        em.getTransaction().commit();\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void testNullableAndNonNullableLobs() {\r\n-        // test with null\r\n-        EntityManager em = emf.createEntityManager();\r\n-        Lobs lobs = new Lobs();\r\n-        em.getTransaction().begin();\r\n-        lobs.setLobNotNullable(\"test\");\r\n-        lobs.setLobNullable(null);\r\n-        em.persist(lobs);\r\n-        em.getTransaction().commit();\r\n-        em.close();\r\n-\r\n-        em = emf.createEntityManager();\r\n-        em.getTransaction().begin();\r\n-        lobs = new Lobs();\r\n-        lobs.setLobNotNullable(null);\r\n-        lobs.setLobNullable(null);\r\n-        em.persist(lobs);\r\n-        try {\r\n-            em.getTransaction().commit();\r\n-        } catch (Exception e) {\r\n-            assertError(e, RollbackException.class);\r\n-        }\r\n-        em.close();\r\n-\r\n-        em = emf.createEntityManager();\r\n-        em.getTransaction().begin();\r\n-        Query query = em.createQuery(\"select e from Lobs e\");\r\n-        lobs = (Lobs)query.getSingleResult();\r\n-        // Oracle treats \"\" as null\r\n-        assertTrue(lobs.getLobNullable() == null || lobs.getLobNullable().length() == 0);   // still an empty string\r\n-        em.remove(lobs);\r\n-        em.getTransaction().commit();\r\n-        em.close();\r\n-\r\n-        // test with \"\"\r\n-        em = emf.createEntityManager();\r\n-        em.getTransaction().begin();\r\n-        lobs.setLobNotNullable(\"\");\r\n-        lobs.setLobNullable(\"\");\r\n-        em.persist(lobs);\r\n-        em.getTransaction().commit();\r\n-        em.close();\r\n-\r\n-        em = emf.createEntityManager();\r\n-        em.getTransaction().begin();\r\n-        query = em.createQuery(\"select e from Lobs e\");\r\n-        lobs = (Lobs)query.getSingleResult();\r\n-        assertTrue(lobs.getLobNullable() == null || lobs.getLobNullable().length() == 0);\r\n-        assertTrue(lobs.getLobNotNullable() == null || lobs.getLobNotNullable().length() == 0);\r\n-        assertEquals(lobs.getLobNullable(), lobs.getLobNotNullable());\r\n-        em.remove(lobs);\r\n-        em.getTransaction().commit();\r\n-        em.close();\r\n-\r\n-        // test with large data\r\n-        String temp = \"\";\r\n-        for (int i = 0; i < 500; i++) // at 400 it changes from strings to Objects\r\n-            temp = temp + \"1234567890\";\r\n-\r\n-        em = emf.createEntityManager();\r\n-        lobs = new Lobs();\r\n-        em.getTransaction().begin();\r\n-        lobs.setLobNotNullable(temp);\r\n-        lobs.setLobNullable(temp);\r\n-        em.persist(lobs);\r\n-        em.getTransaction().commit();\r\n-        em.close();\r\n-\r\n-        em = emf.createEntityManager();\r\n-        em.getTransaction().begin();\r\n-        query = em.createQuery(\"select e from Lobs e\");\r\n-        lobs = (Lobs)query.getSingleResult();\r\n-        assertEquals(lobs.getLobNullable(), lobs.getLobNotNullable());\r\n-        assertEquals(temp, lobs.getLobNullable());\r\n-        em.remove(lobs);\r\n-        em.getTransaction().commit();\r\n-        em.close();\r\n-    }\r\n-\r\n-    void assertError(Throwable actual, Class<? extends Throwable> expected) {\r\n-        if (!expected.isAssignableFrom(actual.getClass())) {\r\n-            actual.printStackTrace();\r\n-            throw new AssertionFailedError(actual.getClass().getName() + \" was raised but expected \"\r\n-                    + expected.getName());\r\n-        }\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.Query;\n+import javax.persistence.RollbackException;\n+\n+import junit.framework.AssertionFailedError;\n+\n+import org.apache.openjpa.persistence.kernel.common.apps.Blobs;\n+import org.apache.openjpa.persistence.kernel.common.apps.Lobs;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+public class TestLobs extends SingleEMFTestCase {\n+    /**\n+     * Support method to get a random Byte for testing.\n+     */\n+    public static Byte randomByte() {\n+        return new Byte((byte) (Math.random() * Byte.MAX_VALUE));\n+    }\n+\n+    public void setUp() throws Exception {\n+        super.setUp(DROP_TABLES, Lobs.class, Blobs.class);\n+    }\n+    public void testNullableAndNonNullableBLobs() {\n+        // test with null\n+        EntityManager em = emf.createEntityManager();\n+        Blobs lobs = new Blobs();\n+        byte[] bytes = new byte[10];\n+        for (int i = 0; i < bytes.length; i++)\n+            bytes[i] = randomByte().byteValue();\n+\n+        em.getTransaction().begin();\n+        lobs.setLobNotNullable(bytes);\n+        lobs.setLobNullable(null);\n+        em.persist(lobs);\n+        em.getTransaction().commit();\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        lobs = new Blobs();\n+        lobs.setLobNotNullable(null);\n+        lobs.setLobNullable(null);\n+        em.persist(lobs);\n+        try {\n+            em.getTransaction().commit();\n+        } catch (Exception e) {\n+            assertError(e, RollbackException.class);\n+        }\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        Query query = em.createQuery(\"select e from Blobs e\");\n+        lobs = (Blobs)query.getSingleResult();\n+        assertTrue(lobs.getLobNullable() == null || lobs.getLobNullable().length == 0);   // still an empty string\n+        em.remove(lobs);\n+        em.getTransaction().commit();\n+        em.close();\n+\n+        // test with 0 length bytes\n+        bytes = new byte[0];\n+        em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        lobs.setLobNotNullable(bytes);\n+        lobs.setLobNullable(bytes);\n+        em.persist(lobs);\n+        em.getTransaction().commit();\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        query = em.createQuery(\"select e from Blobs e\");\n+        lobs = (Blobs)query.getSingleResult();\n+        assertTrue(lobs.getLobNullable() == null || lobs.getLobNullable().length == 0);\n+        assertTrue(lobs.getLobNotNullable() == null || lobs.getLobNotNullable().length == 0);\n+        for (int i = 0; i < bytes.length; i++) {\n+            assertEquals(bytes[i], lobs.getLobNullable()[i]);\n+        }\n+        em.remove(lobs);\n+        em.getTransaction().commit();\n+        em.close();\n+\n+        // test with large data\n+        bytes = new byte[5000];\n+        for (int i = 0; i < bytes.length; i++)\n+            bytes[i] = randomByte().byteValue();\n+\n+        em = emf.createEntityManager();\n+        lobs = new Blobs();\n+        em.getTransaction().begin();\n+        lobs.setLobNotNullable(bytes);\n+        lobs.setLobNullable(bytes);\n+        em.persist(lobs);\n+        em.getTransaction().commit();\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        query = em.createQuery(\"select e from Blobs e\");\n+        lobs = (Blobs)query.getSingleResult();\n+        for (int i = 0; i < 5000; i++) {\n+            assertEquals(lobs.getLobNullable()[i], lobs.getLobNotNullable()[i]);\n+            assertEquals(bytes[i], lobs.getLobNullable()[i]);\n+        }\n+        em.remove(lobs);\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+\n+    public void testNullableAndNonNullableLobs() {\n+        // test with null\n+        EntityManager em = emf.createEntityManager();\n+        Lobs lobs = new Lobs();\n+        em.getTransaction().begin();\n+        lobs.setLobNotNullable(\"test\");\n+        lobs.setLobNullable(null);\n+        em.persist(lobs);\n+        em.getTransaction().commit();\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        lobs = new Lobs();\n+        lobs.setLobNotNullable(null);\n+        lobs.setLobNullable(null);\n+        em.persist(lobs);\n+        try {\n+            em.getTransaction().commit();\n+        } catch (Exception e) {\n+            assertError(e, RollbackException.class);\n+        }\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        Query query = em.createQuery(\"select e from Lobs e\");\n+        lobs = (Lobs)query.getSingleResult();\n+        // Oracle treats \"\" as null\n+        assertTrue(lobs.getLobNullable() == null || lobs.getLobNullable().length() == 0);   // still an empty string\n+        em.remove(lobs);\n+        em.getTransaction().commit();\n+        em.close();\n+\n+        // test with \"\"\n+        em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        lobs.setLobNotNullable(\"\");\n+        lobs.setLobNullable(\"\");\n+        em.persist(lobs);\n+        em.getTransaction().commit();\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        query = em.createQuery(\"select e from Lobs e\");\n+        lobs = (Lobs)query.getSingleResult();\n+        assertTrue(lobs.getLobNullable() == null || lobs.getLobNullable().length() == 0);\n+        assertTrue(lobs.getLobNotNullable() == null || lobs.getLobNotNullable().length() == 0);\n+        assertEquals(lobs.getLobNullable(), lobs.getLobNotNullable());\n+        em.remove(lobs);\n+        em.getTransaction().commit();\n+        em.close();\n+\n+        // test with large data\n+        String temp = \"\";\n+        for (int i = 0; i < 500; i++) // at 400 it changes from strings to Objects\n+            temp = temp + \"1234567890\";\n+\n+        em = emf.createEntityManager();\n+        lobs = new Lobs();\n+        em.getTransaction().begin();\n+        lobs.setLobNotNullable(temp);\n+        lobs.setLobNullable(temp);\n+        em.persist(lobs);\n+        em.getTransaction().commit();\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        query = em.createQuery(\"select e from Lobs e\");\n+        lobs = (Lobs)query.getSingleResult();\n+        assertEquals(lobs.getLobNullable(), lobs.getLobNotNullable());\n+        assertEquals(temp, lobs.getLobNullable());\n+        em.remove(lobs);\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+\n+    void assertError(Throwable actual, Class<? extends Throwable> expected) {\n+        if (!expected.isAssignableFrom(actual.getClass())) {\n+            actual.printStackTrace();\n+            throw new AssertionFailedError(actual.getClass().getName() + \" was raised but expected \"\n+                    + expected.getName());\n+        }\n+    }\n+}"}]}

