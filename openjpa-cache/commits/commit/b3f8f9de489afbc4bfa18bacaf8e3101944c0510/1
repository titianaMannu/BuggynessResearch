{"sha":"b3f8f9de489afbc4bfa18bacaf8e3101944c0510","node_id":"MDY6Q29tbWl0MjA2MzY0OmIzZjhmOWRlNDg5YWZiYzRiZmExOGJhY2FmOGUzMTAxOTQ0YzA1MTA=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2006-08-02T19:53:42Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2006-08-02T19:53:42Z"},"message":"Added load-fetch-group to FieldMetaData and StateManager loading\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@428120 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"efc8905ca0d63ff9b5e7695e63e9b7c36e31ca1e","url":"https://api.github.com/repos/apache/openjpa/git/trees/efc8905ca0d63ff9b5e7695e63e9b7c36e31ca1e"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b3f8f9de489afbc4bfa18bacaf8e3101944c0510","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b3f8f9de489afbc4bfa18bacaf8e3101944c0510","html_url":"https://github.com/apache/openjpa/commit/b3f8f9de489afbc4bfa18bacaf8e3101944c0510","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b3f8f9de489afbc4bfa18bacaf8e3101944c0510/comments","author":null,"committer":null,"parents":[{"sha":"df439896898c5fa9510c50863c917a5f54e4313f","url":"https://api.github.com/repos/apache/openjpa/commits/df439896898c5fa9510c50863c917a5f54e4313f","html_url":"https://github.com/apache/openjpa/commit/df439896898c5fa9510c50863c917a5f54e4313f"}],"stats":{"total":77,"additions":61,"deletions":16},"files":[{"sha":"c4de41d004d8a8c3fa1767ffa5caaaa565a76027","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","status":"modified","additions":44,"deletions":16,"changes":60,"blob_url":"https://github.com/apache/openjpa/blob/b3f8f9de489afbc4bfa18bacaf8e3101944c0510/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/b3f8f9de489afbc4bfa18bacaf8e3101944c0510/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java?ref=b3f8f9de489afbc4bfa18bacaf8e3101944c0510","patch":"@@ -2751,13 +2751,20 @@ boolean loadFields(BitSet fields, FetchConfiguration fetch, int lockLevel,\n         return ret;\n     }\n \n+    protected void loadField(int field, int lockLevel, boolean forWrite,\n+            boolean fgs) {\n+    \tloadField (field, lockLevel, forWrite, fgs, null);\n+    }\n+    \n     /**\n      * Load the given field's fetch group; the field itself may already be\n      * loaded if it is being set by the user.\n      */\n     protected void loadField(int field, int lockLevel, boolean forWrite,\n-        boolean fgs) {\n-    \tFetchConfiguration fetch = _broker.getFetchConfiguration();\n+        boolean fgs, FetchConfiguration fetch) {\n+    \tif (fetch == null) \n+    \t\tfetch = _broker.getFetchConfiguration();\n+    \tboolean isLoadFetchGroupAdded = false;\n         FieldMetaData fmd = _meta.getField(field);\n         BitSet fields = null;\n         // if this is a dfg field or we need to load our dfg, do so\n@@ -2768,17 +2775,23 @@ protected void loadField(int field, int lockLevel, boolean forWrite,\n         // if not a dfg field, use first custom fetch group as load group\n         //### need to use metadata load-fetch-group\n         if (!fmd.isInDefaultFetchGroup()) {\n-            if (fmd.getCustomFetchGroups().length > 0) {  \n-                String fg = fmd.getCustomFetchGroups()[0];\n+            String lfg = fmd.getLoadFetchGroup();\n+            if (lfg != null) {  \n                 FieldMetaData[] fmds = _meta.getFields();\n                 for (int i = 0; i < fmds.length; i++) {\n                     if (!_loaded.get(i) && (i == field\n-                        || fmds[i].isInFetchGroup(fg))) {\n+                        || fmds[i].isInFetchGroup(lfg))) {\n                         if (fields == null)\n                             fields = new BitSet(fmds.length);\n                         fields.set(i);\n                     }\n                 }\n+                // relation field is loaded with the load-fetch-group\n+                // but this addition must be reverted once the load is over\n+                if (isRelation(fmd) && !fetch.hasFetchGroup(lfg)) {\n+                \tfetch.addFetchGroup(fmd.getLoadFetchGroup());\n+                \tisLoadFetchGroupAdded = true;\n+                }\n             } else if (!_loaded.get(fmd.getIndex())) {\n                 if (fields == null)\n                     fields = new BitSet();\n@@ -2790,6 +2803,16 @@ protected void loadField(int field, int lockLevel, boolean forWrite,\n         // takes care of things like loading version info and setting PC\n         // flags\n         loadFields(fields, fetch, lockLevel, null, forWrite);\n+        \n+        // remove the load fetch group \n+        if (isLoadFetchGroupAdded)\n+        \tfetch.removeFetchGroup(fmd.getLoadFetchGroup());\n+    }\n+    \n+    private static boolean isRelation(FieldMetaData fm) {\n+    \treturn fm.isDeclaredTypePC() \n+    \t    || fm.getElement().isDeclaredTypePC()\n+    \t    || fm.getKey().isDeclaredTypePC();\n     }\n \n     /**\n@@ -2863,36 +2886,41 @@ private void postLoad(int field, FetchConfiguration fetch) {\n         if (field != -1) {\n             FieldMetaData fmd = _meta.getField (field);\n             if (fmd.isInDefaultFetchGroup() \n-                && postLoad(_meta.getFetchGroup(FetchGroup.NAME_DEFAULT)))\n-                return;\n+               && postLoad(_meta.getFetchGroup(FetchGroup.NAME_DEFAULT), fetch))\n+               return;\n             String[] fgs = fmd.getCustomFetchGroups();\n             for (int i = 0; i < fgs.length; i++)\n-                if (postLoad(_meta.getFetchGroup(fgs[i])))\n+                if (postLoad(_meta.getFetchGroup(fgs[i]), fetch))\n                     return;\n         } else {\n-            if (postLoad(_meta.getFetchGroup(FetchGroup.NAME_DEFAULT)))\n+            if (postLoad(_meta.getFetchGroup(FetchGroup.NAME_DEFAULT), fetch))\n                 return;\n-            FetchGroup[] fgs = _meta.getCustomFetchGroups();\n-            for (int i = 0; i < fgs.length; i++)\n-                if (postLoad(fgs[i]))\n+            \n+            Iterator fgs = fetch.getFetchGroups().iterator();\n+            for (;fgs.hasNext();) {\n+            \tFetchGroup fg = _meta.getFetchGroup(fgs.next().toString());\n+                if (fg != null && postLoad(fg, fetch))\n                     return; \n+            }\n         }\n     }\n \n     /**\n      * Perform post-load actions if the given fetch group is a post-load group\n      * and is fully loaded.\n      */\n-    private boolean postLoad(FetchGroup fg) {\n+    private boolean postLoad(FetchGroup fg, FetchConfiguration fetch) {\n         if (!fg.isPostLoad())\n             return false;\n         FieldMetaData[] fmds = _meta.getFields();\n         for (int i = 0; i < fmds.length; i++)\n-            if (!_loaded.get(i) && fmds[i].isInFetchGroup(fg.getName()))\n-                return false;\n+        \tif (fmds[i].isInFetchGroup(fg.getName()))\n+        \t\tif (!_loaded.get(i))\n+        \t\t\treturn false;\n \n         _flags |= FLAG_LOADED;\n-        fireLifecycleEvent(LifecycleEvent.AFTER_LOAD);\n+        _broker.fireLifecycleEvent(getManagedInstance(), fetch, _meta, \n+        \tLifecycleEvent.AFTER_LOAD);\n         return true;\n     }\n "},{"sha":"fb0f7924a1746d4a6b868f1c9caaa6e6aecee412","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java","status":"modified","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/apache/openjpa/blob/b3f8f9de489afbc4bfa18bacaf8e3101944c0510/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/b3f8f9de489afbc4bfa18bacaf8e3101944c0510/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java?ref=b3f8f9de489afbc4bfa18bacaf8e3101944c0510","patch":"@@ -152,6 +152,7 @@\n     private int _dfg = 0;\n     private Set _fgSet = null;\n     private String[] _fgs = null;\n+    private String   _lfg = null;\n     private Boolean _lrs = null;\n     private String _extName = null;\n     private Method _extMethod = DEFAULT_METHOD;\n@@ -573,6 +574,16 @@ public void setDefaultFetchGroupExplicit(boolean explicit) {\n         return _fgs;\n     }\n \n+    /**\n+     * Gets the fetch group that is to be loaded when this receiver is loaded.\n+     *  \n+     * @return name of the load fetch group. Can be null, if not explicitly \n+     * set.\n+     */\n+    public String getLoadFetchGroup () {\n+    \treturn _lfg;\n+    }\n+    \n     /**\n      * Whether this field is in the given fetch group.\n      */\n@@ -610,6 +621,12 @@ public void setInFetchGroup(String fg, boolean in) {\n             _fgs = null;\n     }\n \n+    public void setLoadFetchGroup (String lfg) {\n+    \tif (StringUtils.isEmpty(lfg))\n+    \t\tthrow new MetaDataException(_loc.get(\"empty-fg-name\"),this);\n+    \t_lfg = lfg;\n+    }\n+    \n     /**\n      * How the data store should treat null values for this field:\n      * <ul>"}]}

