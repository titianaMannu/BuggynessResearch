{"sha":"b4077bd6a64f73fd28c210f265d5ef8b089199dd","node_id":"MDY6Q29tbWl0MjA2MzY0OmI0MDc3YmQ2YTY0ZjczZmQyOGMyMTBmMjY1ZDVlZjhiMDg5MTk5ZGQ=","commit":{"author":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2006-11-03T21:10:39Z"},"committer":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2006-11-03T21:10:39Z"},"message":"OPENJPA-74: Fixed multiple problems with named queries: 1. They were not being parsed as part of the orm.xml file, since we were incorrectly looking for an attribute named 'query' (when it really should have been a sub-element named 'query'). 2. Looking for a named query did not force resolution of all metadatas. 3. An NPE was being thrown when a JPQL query was created with a null filter\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@470996 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"fd4a2baa71e030901841be6f9da17fdef62a1b73","url":"https://api.github.com/repos/apache/openjpa/git/trees/fd4a2baa71e030901841be6f9da17fdef62a1b73"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b4077bd6a64f73fd28c210f265d5ef8b089199dd","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b4077bd6a64f73fd28c210f265d5ef8b089199dd","html_url":"https://github.com/apache/openjpa/commit/b4077bd6a64f73fd28c210f265d5ef8b089199dd","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b4077bd6a64f73fd28c210f265d5ef8b089199dd/comments","author":null,"committer":null,"parents":[{"sha":"22226fc0f4b49f5cdb16792e0901d94ae7d838b7","url":"https://api.github.com/repos/apache/openjpa/commits/22226fc0f4b49f5cdb16792e0901d94ae7d838b7","html_url":"https://github.com/apache/openjpa/commit/22226fc0f4b49f5cdb16792e0901d94ae7d838b7"}],"stats":{"total":63,"additions":60,"deletions":3},"files":[{"sha":"8b2097e5e18fd60dd21624287ac7cc7b191bf2ca","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/b4077bd6a64f73fd28c210f265d5ef8b089199dd/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","raw_url":"https://github.com/apache/openjpa/raw/b4077bd6a64f73fd28c210f265d5ef8b089199dd/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java?ref=b4077bd6a64f73fd28c210f265d5ef8b089199dd","patch":"@@ -1628,6 +1628,9 @@ public void dump(PrintStream out, String prefix, boolean text) {\n         }\n \n         private static final JPQLNode parse(String jpql) {\n+            if (jpql == null)\n+                jpql = \"\";\n+\n             try {\n                 return (JPQLNode) new JPQL(jpql).parseQuery();\n             } catch (Error e) {"},{"sha":"48cdc71f773e15895371d9b6ad4347c9257335f2","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","status":"modified","additions":29,"deletions":2,"changes":31,"blob_url":"https://github.com/apache/openjpa/blob/b4077bd6a64f73fd28c210f265d5ef8b089199dd/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","raw_url":"https://github.com/apache/openjpa/raw/b4077bd6a64f73fd28c210f265d5ef8b089199dd/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java?ref=b4077bd6a64f73fd28c210f265d5ef8b089199dd","patch":"@@ -1461,11 +1461,38 @@ public void endConfiguration() {\n     public synchronized QueryMetaData getQueryMetaData(Class cls, String name,\n         ClassLoader envLoader, boolean mustExist) {\n         QueryMetaData meta = getQueryMetaDataInternal(cls, name, envLoader);\n-        if (meta == null && mustExist)\n-            throw new MetaDataException(_loc.get(\"no-named-query\", cls, name));\n+        if (meta == null) {\n+            // load all the metadatas for all the known classes so that\n+            // query names are seen and registered\n+            resolveAll(envLoader);\n+            meta = getQueryMetaDataInternal(cls, name, envLoader);\n+        }\n+\n+        if (meta == null && mustExist) {\n+            if (cls == null) {\n+                throw new MetaDataException(_loc.get\n+                    (\"no-named-query-null-class\",\n+                        getPersistentTypeNames(false, envLoader), name));\n+            } else {\n+                throw new MetaDataException(_loc.get(\"no-named-query\",\n+                    cls, name));\n+            }\n+        }\n+\n         return meta;\n     }\n \n+    /** \n+     * Resolve all known metadata classes. \n+     */\n+    private void resolveAll(ClassLoader envLoader) {\n+        Collection types = loadPersistentTypes(false, envLoader);\n+        for (Iterator i = types.iterator(); i.hasNext(); ) {\n+            Class c = (Class) i.next();\n+            getMetaData(c, envLoader, false);\n+        }\n+    }\n+\n     /**\n      * Return query metadata for the given class, name, and classloader.\n      */"},{"sha":"601f70066f63f16b1a934f0234ffbb4adc9ad9b3","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/meta/localizer.properties","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/b4077bd6a64f73fd28c210f265d5ef8b089199dd/openjpa-kernel/src/main/resources/org/apache/openjpa/meta/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/b4077bd6a64f73fd28c210f265d5ef8b089199dd/openjpa-kernel/src/main/resources/org/apache/openjpa/meta/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/meta/localizer.properties?ref=b4077bd6a64f73fd28c210f265d5ef8b089199dd","patch":"@@ -204,6 +204,8 @@ tool-usage: Usage: java org.apache.openjpa.meta.MetaDataTool\\n\\\n \t\\t<class name | .java file | .class file>+\n no-named-query: There is no named query defined for the class \"{0}\" with \\\n \tthe name \"{1}\".\n+no-named-query-null-class: There is no query with the name \"{1}\" defined for \\\n+    any of the known persistent classes: {0}.\n no-named-sequence: Could not locate the sequence with name \"{0}\".  It is \\\n \tpossible that the metadata file containing the sequence has not been \\\n \tparsed yet.  Make sure to use a persistent class whose metadata is in \\\n@@ -274,4 +276,4 @@ no-metadatafactory: MetaDataFactory could not be configured \\\n     using Ant, please see the <properties> or <propertiesFile> attributes \\\n     of the task''s nested <config> element. This can also occur if your \\\n     OpenJPA distribution jars are corrupt, or if your security policy is \\\n-    overly strict.\n\\ No newline at end of file\n+    overly strict."},{"sha":"2d913268828a95918956e9dbd0cfe2a1dc4a62b1","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/MetaDataTag.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/b4077bd6a64f73fd28c210f265d5ef8b089199dd/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/MetaDataTag.java","raw_url":"https://github.com/apache/openjpa/raw/b4077bd6a64f73fd28c210f265d5ef8b089199dd/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/MetaDataTag.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/MetaDataTag.java?ref=b4077bd6a64f73fd28c210f265d5ef8b089199dd","patch":"@@ -42,6 +42,7 @@\n     MAP_KEY,\n     NATIVE_QUERIES,\n     NATIVE_QUERY,\n+    QUERY_STRING,\n     ORDER_BY,\n     QUERIES,\n     QUERY,"},{"sha":"c76eaeb1884fc5b71b99f3e4f971492828a772ee","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java","status":"modified","additions":24,"deletions":0,"changes":24,"blob_url":"https://github.com/apache/openjpa/blob/b4077bd6a64f73fd28c210f265d5ef8b089199dd/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/b4077bd6a64f73fd28c210f265d5ef8b089199dd/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java?ref=b4077bd6a64f73fd28c210f265d5ef8b089199dd","patch":"@@ -119,6 +119,7 @@\n         _elems.put(\"named-query\", QUERY);\n         _elems.put(\"named-native-query\", NATIVE_QUERY);\n         _elems.put(\"query-hint\", QUERY_HINT);\n+        _elems.put(\"query\", QUERY_STRING);\n \n         _elems.put(\"flush-mode\", FLUSH_MODE);\n         _elems.put(\"sequence-generator\", SEQ_GENERATOR);\n@@ -442,6 +443,9 @@ protected boolean startSystemElement(String name, Attributes attrs)\n                 case NATIVE_QUERY:\n                     ret = startNamedNativeQuery(attrs);\n                     break;\n+                case QUERY_STRING:\n+                    ret = startQueryString(attrs);\n+                    break;\n                 case SEQ_GENERATOR:\n                     ret = startSequenceGenerator(attrs);\n                     break;\n@@ -489,6 +493,9 @@ else if (tag instanceof MetaDataTag) {\n                 case NATIVE_QUERY:\n                     endNamedNativeQuery();\n                     break;\n+                case QUERY_STRING:\n+                    endQueryString();\n+                    break;\n                 case SEQ_GENERATOR:\n                     endSequenceGenerator();\n                     break;\n@@ -553,6 +560,9 @@ protected boolean startClassElement(String name, Attributes attrs)\n                 case NATIVE_QUERY:\n                     ret = startNamedNativeQuery(attrs);\n                     break;\n+                case QUERY_STRING:\n+                    ret = startQueryString(attrs);\n+                    break;\n                 case SEQ_GENERATOR:\n                     ret = startSequenceGenerator(attrs);\n                     break;\n@@ -640,6 +650,9 @@ else if (tag instanceof MetaDataTag) {\n                 case NATIVE_QUERY:\n                     endNamedNativeQuery();\n                     break;\n+                case QUERY_STRING:\n+                    endQueryString();\n+                    break;\n                 case SEQ_GENERATOR:\n                     endSequenceGenerator();\n                     break;\n@@ -1368,6 +1381,17 @@ protected void endNamedQuery()\n         popElement();\n     }\n \n+    protected boolean startQueryString(Attributes attrs)\n+        throws SAXException {\n+        return true;\n+    }\n+\n+    protected void endQueryString()\n+        throws SAXException {\n+        QueryMetaData meta = (QueryMetaData) currentElement();\n+        meta.setQueryString(currentText());\n+    }\n+\n     /**\n      * Parse query-hint.\n      */"}]}

