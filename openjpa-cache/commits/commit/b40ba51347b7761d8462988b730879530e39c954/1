{"sha":"b40ba51347b7761d8462988b730879530e39c954","node_id":"MDY6Q29tbWl0MjA2MzY0OmI0MGJhNTEzNDdiNzc2MWQ4NDYyOTg4YjczMDg3OTUzMGUzOWM5NTQ=","commit":{"author":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-11-08T00:50:15Z"},"committer":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-11-08T00:50:15Z"},"message":"Simple test case for abstract schema name queries.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@472355 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"44429c762d95a3d031afb17236efa6d43f1f3acd","url":"https://api.github.com/repos/apache/openjpa/git/trees/44429c762d95a3d031afb17236efa6d43f1f3acd"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b40ba51347b7761d8462988b730879530e39c954","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b40ba51347b7761d8462988b730879530e39c954","html_url":"https://github.com/apache/openjpa/commit/b40ba51347b7761d8462988b730879530e39c954","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b40ba51347b7761d8462988b730879530e39c954/comments","author":null,"committer":null,"parents":[{"sha":"71ed42e8c59e6ba343f8bb80a3d7355a52b3886a","url":"https://api.github.com/repos/apache/openjpa/commits/71ed42e8c59e6ba343f8bb80a3d7355a52b3886a","html_url":"https://github.com/apache/openjpa/commit/71ed42e8c59e6ba343f8bb80a3d7355a52b3886a"}],"stats":{"total":130,"additions":130,"deletions":0},"files":[{"sha":"6df13916cbe887317e4d61ea524896fe72839cda","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/NamedEntity.java","status":"added","additions":46,"deletions":0,"changes":46,"blob_url":"https://github.com/apache/openjpa/blob/b40ba51347b7761d8462988b730879530e39c954/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/NamedEntity.java","raw_url":"https://github.com/apache/openjpa/raw/b40ba51347b7761d8462988b730879530e39c954/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/NamedEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/NamedEntity.java?ref=b40ba51347b7761d8462988b730879530e39c954","patch":"@@ -0,0 +1,46 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *\r\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.query;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.Version;\r\n+\r\n+@Entity(name=\"named\")\r\n+public class NamedEntity {\r\n+\r\n+    @Id\r\n+    @GeneratedValue\r\n+    private long id;\r\n+\r\n+    private String name;\r\n+\r\n+    @Version\r\n+    private Integer optLock;\r\n+\r\n+    public long getId() { \r\n+        return id; \r\n+    }\r\n+\r\n+    public String getName() { \r\n+        return name; \r\n+    }\r\n+\r\n+    public void setName(String name) { \r\n+        this.name = name; \r\n+    }\r\n+}\r"},{"sha":"0ce523cc431f364bccec66e3e27bbe799386dc7b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestAbstractSchemaName.java","status":"added","additions":84,"deletions":0,"changes":84,"blob_url":"https://github.com/apache/openjpa/blob/b40ba51347b7761d8462988b730879530e39c954/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestAbstractSchemaName.java","raw_url":"https://github.com/apache/openjpa/raw/b40ba51347b7761d8462988b730879530e39c954/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestAbstractSchemaName.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestAbstractSchemaName.java?ref=b40ba51347b7761d8462988b730879530e39c954","patch":"@@ -0,0 +1,84 @@\n+/*\n+ * Copyright 2006 The Apache Software Foundation.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.openjpa.persistence.query;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import javax.persistence.Persistence;\n+import javax.persistence.Query;\n+\n+import junit.framework.TestCase;\n+import junit.textui.TestRunner;\n+import org.apache.openjpa.persistence.OpenJPAQuery;\n+\n+/**\n+ * Test that we can query by an entity's abstract schema name.\n+ *\n+ * @author Abe White\n+ */\n+public class TestAbstractSchemaName\n+    extends TestCase {\n+\n+    private EntityManagerFactory emf;\n+\n+    public void setUp() {\n+        Map props = new HashMap();\n+        props.put(\"openjpa.MetaDataFactory\", \"jpa(Types=\" \n+            + NamedEntity.class.getName() + \")\");\n+        emf = Persistence.createEntityManagerFactory(\"test\", props);\n+\n+        NamedEntity e = new NamedEntity();\n+        e.setName(\"e\"); \n+\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.persist(e);\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+\n+    public void tearDown() {\n+        if (emf == null)\n+            return;\n+        try {\n+            EntityManager em = emf.createEntityManager();\n+            em.getTransaction().begin();\n+            em.createQuery(\"delete from named\").executeUpdate();\n+            em.getTransaction().commit();\n+            em.close();\n+            emf.close();\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    public void testQuery() {\n+        EntityManager em = emf.createEntityManager();\n+        Query q = em.createQuery(\"select e from named e\");\n+        NamedEntity e = (NamedEntity) q.getSingleResult();\n+        assertNotNull(e);\n+        assertEquals(\"e\", e.getName());\n+        em.close();\n+    }\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(TestAbstractSchemaName.class);\n+    }\n+}\n+"}]}

