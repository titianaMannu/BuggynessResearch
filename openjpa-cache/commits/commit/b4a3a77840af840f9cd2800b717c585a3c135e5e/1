{"sha":"b4a3a77840af840f9cd2800b717c585a3c135e5e","node_id":"MDY6Q29tbWl0MjA2MzY0OmI0YTNhNzc4NDBhZjg0MGY5Y2QyODAwYjcxN2M1ODVhM2MxMzVlNWU=","commit":{"author":{"name":"A. Abram White","email":"awhite@apache.org","date":"2007-04-11T16:21:13Z"},"committer":{"name":"A. Abram White","email":"awhite@apache.org","date":"2007-04-11T16:21:13Z"},"message":"OPENJPA-134 : When we're performing eager fetches and we can detect that we're\nalready fetching the owning side of a bidi relation, cut off eager selecting \nand loading when we come across the back-ptr to the owner again.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@527565 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"70834a83f00601dada58dd7d2538f2a7ee49b524","url":"https://api.github.com/repos/apache/openjpa/git/trees/70834a83f00601dada58dd7d2538f2a7ee49b524"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b4a3a77840af840f9cd2800b717c585a3c135e5e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b4a3a77840af840f9cd2800b717c585a3c135e5e","html_url":"https://github.com/apache/openjpa/commit/b4a3a77840af840f9cd2800b717c585a3c135e5e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b4a3a77840af840f9cd2800b717c585a3c135e5e/comments","author":null,"committer":null,"parents":[{"sha":"0806fd5b4409f45f86af4c92a648feaee3990b6d","url":"https://api.github.com/repos/apache/openjpa/commits/0806fd5b4409f45f86af4c92a648feaee3990b6d","html_url":"https://github.com/apache/openjpa/commit/0806fd5b4409f45f86af4c92a648feaee3990b6d"}],"stats":{"total":517,"additions":461,"deletions":56},"files":[{"sha":"a0ccbcfc3598b4d533a2c6f1bd23601392a0c9db","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/DelegatingJDBCFetchConfiguration.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/b4a3a77840af840f9cd2800b717c585a3c135e5e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/DelegatingJDBCFetchConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/b4a3a77840af840f9cd2800b717c585a3c135e5e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/DelegatingJDBCFetchConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/DelegatingJDBCFetchConfiguration.java?ref=b4a3a77840af840f9cd2800b717c585a3c135e5e","patch":"@@ -233,26 +233,26 @@ public JDBCFetchConfiguration clearJoins() {\n         }\n     }\n \n-    public JDBCFetchConfiguration traverseJDBC(FieldMetaData fm) {\n+    public int getIsolation() {\n         try {\n-            return getJDBCDelegate().traverseJDBC(fm);\n+            return getJDBCDelegate().getIsolation();\n         } catch (RuntimeException re) {\n             throw translate(re);\n         }\n     }\n \n-    public int getIsolation() {\n+    public JDBCFetchConfiguration setIsolation(int level) {\n         try {\n-            return getJDBCDelegate().getIsolation();\n+            getJDBCDelegate().setIsolation(level);\n+            return this;\n         } catch (RuntimeException re) {\n             throw translate(re);\n         }\n     }\n \n-    public JDBCFetchConfiguration setIsolation(int level) {\n+    public JDBCFetchConfiguration traverseJDBC(FieldMetaData fm) {\n         try {\n-            getJDBCDelegate().setIsolation(level);\n-            return this;\n+            return getJDBCDelegate().traverseJDBC(fm);\n         } catch (RuntimeException re) {\n             throw translate(re);\n         }"},{"sha":"eba6d419dd9330ee61f8b7c7323dbfba4c45eaf1","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCFetchConfiguration.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/b4a3a77840af840f9cd2800b717c585a3c135e5e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCFetchConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/b4a3a77840af840f9cd2800b717c585a3c135e5e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCFetchConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCFetchConfiguration.java?ref=b4a3a77840af840f9cd2800b717c585a3c135e5e","patch":"@@ -166,11 +166,6 @@\n      */\n     public JDBCFetchConfiguration clearJoins();\n \n-    /**\n-     * Convenience method to cast traversal to store-specific type.\n-     */\n-    public JDBCFetchConfiguration traverseJDBC(FieldMetaData fm);\n-\n     /**\n      * <p>The isolation level for queries issued to the database. This overrides\n      * the persistence-unit-wide <code>openjpa.jdbc.TransactionIsolation</code>\n@@ -204,4 +199,9 @@\n      * @since 0.9.7\n      */\n     public JDBCFetchConfiguration setIsolation(int level);\n+\n+    /**\n+     * Convenience method to cast traversal to store-specific type.\n+     */\n+    public JDBCFetchConfiguration traverseJDBC(FieldMetaData fm);\n }"},{"sha":"0f570e1c3177ab708a930173d1a357970b13e61a","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCFetchConfigurationImpl.java","status":"modified","additions":19,"deletions":19,"changes":38,"blob_url":"https://github.com/apache/openjpa/blob/b4a3a77840af840f9cd2800b717c585a3c135e5e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCFetchConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/b4a3a77840af840f9cd2800b717c585a3c135e5e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCFetchConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCFetchConfigurationImpl.java?ref=b4a3a77840af840f9cd2800b717c585a3c135e5e","patch":"@@ -303,25 +303,6 @@ public JDBCFetchConfiguration clearJoins() {\n         return this;\n     }\n \n-    public JDBCFetchConfiguration traverseJDBC(FieldMetaData fm) {\n-        return (JDBCFetchConfiguration) traverse(fm);\n-    }\n-\n-    /**\n-     * Access JDBC configuration information. May return null if not a\n-     * JDBC back-end (possible to get a JDBCFetchConfiguration on non-JDBC\n-     * back end in remote client).\n-     */\n-    private JDBCConfiguration getJDBCConfiguration() {\n-        StoreContext ctx = getContext();\n-        if (ctx == null)\n-            return null;\n-        OpenJPAConfiguration conf = ctx.getConfiguration();\n-        if (!(conf instanceof JDBCConfiguration))\n-            return null;\n-        return (JDBCConfiguration) conf;\n-    }\n-\n     public int getIsolation() {\n         return _state.isolationLevel;\n     }\n@@ -342,4 +323,23 @@ public JDBCFetchConfiguration setIsolation(int level) {\n             _state.isolationLevel = level;\n         return this;\n     }\n+\n+    public JDBCFetchConfiguration traverseJDBC(FieldMetaData fm) {\n+        return (JDBCFetchConfiguration) traverse(fm);\n+    }\n+\n+    /**\n+     * Access JDBC configuration information. May return null if not a\n+     * JDBC back-end (possible to get a JDBCFetchConfiguration on non-JDBC\n+     * back end in remote client).\n+     */\n+    private JDBCConfiguration getJDBCConfiguration() {\n+        StoreContext ctx = getContext();\n+        if (ctx == null)\n+            return null;\n+        OpenJPAConfiguration conf = ctx.getConfiguration();\n+        if (!(conf instanceof JDBCConfiguration))\n+            return null;\n+        return (JDBCConfiguration) conf;\n+    }\n }"},{"sha":"aafec077a6df969a3805d77c12e6473a76fca4a0","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/b4a3a77840af840f9cd2800b717c585a3c135e5e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/b4a3a77840af840f9cd2800b717c585a3c135e5e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java?ref=b4a3a77840af840f9cd2800b717c585a3c135e5e","patch":"@@ -756,8 +756,8 @@ public Object find(Object oid, ValueMapping vm,\n     public Object load(ClassMapping mapping, JDBCFetchConfiguration fetch,\n         BitSet exclude, Result result) throws SQLException {\n         if (!mapping.isMapped())\n-            throw new InvalidStateException(_loc\n-                .get(\"virtual-mapping\", mapping));\n+            throw new InvalidStateException(_loc.get(\"virtual-mapping\", \n+                mapping));\n \n         // get the object id for the row; base class selects pk columns\n         ClassMapping base = mapping;\n@@ -972,7 +972,7 @@ private static boolean requiresSelect(FieldMapping fm,\n         if (sm != null && sm.getPCState() != PCState.TRANSIENT\n             && sm.getLoaded().get(fm.getIndex()))\n             return false;\n-        return fetch.requiresFetch(fm);\n+        return fetch.requiresFetch(fm) == FetchConfiguration.FETCH_LOAD;\n     }\n \n     /**\n@@ -1127,7 +1127,7 @@ private void selectSubclassMappings(Select sel, ClassMapping mapping,\n             fms = subMappings[i].getDefinedFieldMappings();\n             for (int j = 0; j < fms.length; j++) {\n                 // make sure in one of configured fetch groups\n-            \tif (!fetch.requiresFetch(fms[j]) \n+            \tif (fetch.requiresFetch(fms[j]) != FetchConfiguration.FETCH_LOAD\n                     && ((!fms[j].isInDefaultFetchGroup() \n                     && fms[j].isDefaultFetchGroupExplicit())\n                     || fms[j].supportsSelect(sel, sel.TYPE_TWO_PART, sm, this, "},{"sha":"35b5681677fa04ba670c81e939c8e48c98a0dc64","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PagingResultObjectProvider.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/b4a3a77840af840f9cd2800b717c585a3c135e5e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PagingResultObjectProvider.java","raw_url":"https://github.com/apache/openjpa/raw/b4a3a77840af840f9cd2800b717c585a3c135e5e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PagingResultObjectProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PagingResultObjectProvider.java?ref=b4a3a77840af840f9cd2800b717c585a3c135e5e","patch":"@@ -27,6 +27,7 @@\n import org.apache.openjpa.jdbc.sql.SQLBuffer;\n import org.apache.openjpa.jdbc.sql.Select;\n import org.apache.openjpa.jdbc.sql.SelectExecutor;\n+import org.apache.openjpa.kernel.FetchConfiguration;\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n import org.apache.openjpa.kernel.StoreContext;\n import org.apache.openjpa.lib.util.Closeable;\n@@ -90,7 +91,7 @@ public static BitSet getPagedFields(Select sel, ClassMapping mapping,\n         FieldMapping[] fms = mapping.getDefinedFieldMappings();\n         BitSet paged = null;\n         for (int i = 0; i < fms.length; i++) {\n-            if (!fetch.requiresFetch(fms[i]))\n+            if (fetch.requiresFetch(fms[i]) != FetchConfiguration.FETCH_LOAD)\n                 continue;\n \n             if (fms[i].supportsSelect(sel, sel.EAGER_PARALLEL, null, store,"},{"sha":"230df9b20c4e88666e6e9352bfb7a4ab0a688448","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","status":"modified","additions":7,"deletions":5,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/b4a3a77840af840f9cd2800b717c585a3c135e5e/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/b4a3a77840af840f9cd2800b717c585a3c135e5e/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java?ref=b4a3a77840af840f9cd2800b717c585a3c135e5e","patch":"@@ -777,7 +777,7 @@ protected Object find(Object oid, FetchConfiguration fetch, BitSet exclude,\n             StateManagerImpl sm = getStateManagerImplById(oid,\n                 (flags & OID_ALLOW_NEW) != 0 || (_flags & FLAG_FLUSHED) != 0);\n             if (sm != null) {\n-                if (!requiresLoad(sm, true, edata, flags))\n+                if (!requiresLoad(sm, true, fetch, edata, flags))\n                     return call.processReturn(oid, sm);\n \n                 if (!sm.isLoading()) {\n@@ -827,7 +827,7 @@ protected Object find(Object oid, FetchConfiguration fetch, BitSet exclude,\n \n             // initialize a new state manager for the datastore instance\n             sm = newStateManagerImpl(oid, (flags & OID_COPY) != 0);\n-            boolean load = requiresLoad(sm, false, edata, flags);\n+            boolean load = requiresLoad(sm, false, fetch, edata, flags);\n             sm = initialize(sm, load, fetch, edata);\n             if (sm == null) {\n                 if ((flags & OID_NOVALIDATE) != 0)\n@@ -939,7 +939,7 @@ protected StateManagerImpl initialize(StateManagerImpl sm, boolean load,\n                     sm = newStateManagerImpl(oid, (flags & OID_COPY) != 0);\n \n                 _loading.put(obj, sm);\n-                if (requiresLoad(sm, initialized, edata, flags)) {\n+                if (requiresLoad(sm, initialized, fetch, edata, flags)) {\n                     transState = transState || useTransactionalState(fetch);\n                     if (initialized && !sm.isTransactional() && transState)\n                         sm.transactional();\n@@ -977,7 +977,7 @@ protected StateManagerImpl initialize(StateManagerImpl sm, boolean load,\n             for (Iterator itr = oids.iterator(); itr.hasNext(); idx++) {\n                 oid = itr.next();\n                 sm = (StateManagerImpl) _loading.get(oid);\n-                if (sm != null && requiresLoad(sm, true, edata, flags)) {\n+                if (sm != null && requiresLoad(sm, true, fetch, edata, flags)) {\n                     try {\n                         sm.load(fetch, StateManagerImpl.LOAD_FGS,\n                         \texclude, edata, false);\n@@ -1011,7 +1011,9 @@ protected StateManagerImpl initialize(StateManagerImpl sm, boolean load,\n      * to the user.\n      */\n     private boolean requiresLoad(OpenJPAStateManager sm, boolean initialized,\n-        Object edata, int flags) {\n+        FetchConfiguration fetch, Object edata, int flags) {\n+        if (!fetch.requiresLoad())\n+            return false;\n         if ((flags & OID_NOVALIDATE) == 0)\n             return true;\n         if (edata != null) // take advantage of existing result"},{"sha":"44590c6f636d6613f383c4eed034141c3e923792","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingFetchConfiguration.java","status":"modified","additions":9,"deletions":1,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/b4a3a77840af840f9cd2800b717c585a3c135e5e/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingFetchConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/b4a3a77840af840f9cd2800b717c585a3c135e5e/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingFetchConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingFetchConfiguration.java?ref=b4a3a77840af840f9cd2800b717c585a3c135e5e","patch":"@@ -436,14 +436,22 @@ public Object getHint(String name) {\n \t\t}\n \t}\n \n-    public boolean requiresFetch(FieldMetaData fmd) {\n+    public int requiresFetch(FieldMetaData fmd) {\n         try {\n             return _fetch.requiresFetch(fmd);\n         } catch (RuntimeException re) {\n             throw translate(re);\n         }\n     }\n \n+    public boolean requiresLoad() {\n+        try {\n+            return _fetch.requiresLoad();\n+        } catch (RuntimeException re) {\n+            throw translate(re);\n+        }\n+    }\n+\n     public FetchConfiguration traverse(FieldMetaData fmd) {\n         try {\n             return _fetch.traverse(fmd);"},{"sha":"61903820849b2fda99df4c4bc41cfe15d3155641","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachManager.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/b4a3a77840af840f9cd2800b717c585a3c135e5e/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachManager.java","raw_url":"https://github.com/apache/openjpa/raw/b4a3a77840af840f9cd2800b717c585a3c135e5e/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachManager.java?ref=b4a3a77840af840f9cd2800b717c585a3c135e5e","patch":"@@ -231,9 +231,11 @@ private static void setFetchGroupFields(Broker broker,\n         StateManagerImpl sm, BitSet idxs) {\n         FetchConfiguration fetch = broker.getFetchConfiguration();\n         FieldMetaData[] fmds = sm.getMetaData().getFields();\n-        for (int i = 0; i < fmds.length; i++)\n-            if (fmds[i].isPrimaryKey() || fetch.requiresFetch(fmds[i]))\n+        for (int i = 0; i < fmds.length; i++) {\n+            if (fmds[i].isPrimaryKey() || fetch.requiresFetch(fmds[i])\n+                != FetchConfiguration.FETCH_NONE)\n                 idxs.set(i);\n+        }\n     }\n \n     /**"},{"sha":"a0defdae85791a4828a23882f66b3d4b9b3b0ea4","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfiguration.java","status":"modified","additions":36,"deletions":2,"changes":38,"blob_url":"https://github.com/apache/openjpa/blob/b4a3a77840af840f9cd2800b717c585a3c135e5e/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/b4a3a77840af840f9cd2800b717c585a3c135e5e/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfiguration.java?ref=b4a3a77840af840f9cd2800b717c585a3c135e5e","patch":"@@ -39,6 +39,32 @@\n      */\n     public static final int DEFAULT = -99;\n \n+    /**\n+     * Constant indicating that a field does not require fetching.\n+     *\n+     * @see #requiresFetch\n+     */\n+    public static final int FETCH_NONE = 0;\n+\n+    /**\n+     * Constant indicating that a field requires a fetch and load of fetched\n+     * data.\n+     *\n+     * @see #requiresFetch\n+     */\n+    public static final int FETCH_LOAD = 1;\n+\n+    /**\n+     * Constant indicating that a reference to the field's value must be\n+     * fetched, but loading data is not necessary.  Used when we know the\n+     * data will be loaded anyway, such as when traversing the back-ptr of\n+     * a bidirectional relation where the other side is also being fetched.\n+     *\n+     * @see #requiresFetch\n+     */\n+    public static final int FETCH_REF = 2;\n+\n+\n     /**\n      * Return the context assiciated with this configuration;\n      * may be null if it has not been set or this object has been serialized.\n@@ -309,11 +335,19 @@\n \n     /**\n      * Affirms if the given field requires to be fetched in the context\n-     * of current fetch operation.\n+     * of current fetch operation.  Returns one of {@link #FETCH_NONE},\n+     * {@link #FETCH_LOAD}, {@link FETCH_REF}.\n      *\n      * @since 0.4.1\n      */\n-    public boolean requiresFetch(FieldMetaData fm);\n+    public int requiresFetch(FieldMetaData fm);\n+\n+    /**\n+     * Return false if we know that the object being fetched with this\n+     * configuration does not require a load, because this configuration came\n+     * from a traversal of a {@link #FETCH_REF} field.\n+     */\n+    public boolean requiresLoad();\n     \n     /**\n      * Traverse the given field to generate (possibly) a new configuration "},{"sha":"34d5e71c4e0c58fd6376369d8f1238105196aa65","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfigurationImpl.java","status":"modified","additions":29,"deletions":6,"changes":35,"blob_url":"https://github.com/apache/openjpa/blob/b4a3a77840af840f9cd2800b717c585a3c135e5e/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/b4a3a77840af840f9cd2800b717c585a3c135e5e/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfigurationImpl.java?ref=b4a3a77840af840f9cd2800b717c585a3c135e5e","patch":"@@ -39,6 +39,7 @@\n import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.meta.FetchGroup;\n import org.apache.openjpa.meta.FieldMetaData;\n+import org.apache.openjpa.meta.JavaTypes;\n import org.apache.openjpa.util.ImplHelper;\n import org.apache.openjpa.util.InternalException;\n import org.apache.openjpa.util.NoTransactionException;\n@@ -84,6 +85,8 @@\n     private FetchConfigurationImpl _parent;\n     private String _fromField;\n     private Class _fromType;\n+    private String _directRelationOwner;\n+    private boolean _load = true;\n     private int _availableRecursion;\n     private int _availableDepth;\n \n@@ -126,6 +129,8 @@ public Object clone() {\n         clone._parent = _parent;\n         clone._fromField = _fromField;\n         clone._fromType = _fromType;\n+        clone._directRelationOwner = _directRelationOwner;\n+        clone._load = _load;\n         clone._availableRecursion = _availableRecursion;\n         clone._availableDepth = _availableDepth;\n         clone.copy(this);\n@@ -498,23 +503,32 @@ public void unlock() {\n     // Traversal\n     /////////////\n     \n-    public boolean requiresFetch(FieldMetaData fm) {\n+    public int requiresFetch(FieldMetaData fm) {\n         if (!includes(fm))\n-            return false;\n+            return FETCH_NONE;\n         \n         Class type = getRelationType(fm);\n         if (type == null)\n-            return true;\n+            return FETCH_LOAD;\n         if (_availableDepth == 0)\n-            return false;\n+            return FETCH_NONE;\n \n         // we can skip calculating recursion depth if this is a top-level conf:\n         // the field is in our fetch groups, so can't possibly not select\n         if (_parent == null) \n-            return true;\n+            return FETCH_LOAD;\n \n         int rdepth = getAvailableRecursionDepth(fm, type, false);\n-        return rdepth == FetchGroup.DEPTH_INFINITE || rdepth > 0;\n+        if (rdepth != FetchGroup.DEPTH_INFINITE && rdepth <= 0)\n+            return FETCH_NONE;\n+\n+        if (StringUtils.equals(_directRelationOwner, fm.getFullName()))\n+            return FETCH_REF;\n+        return FETCH_LOAD;\n+    }\n+\n+    public boolean requiresLoad() {\n+        return _load;\n     }\n \n     public FetchConfiguration traverse(FieldMetaData fm) {\n@@ -528,6 +542,15 @@ public FetchConfiguration traverse(FieldMetaData fm) {\n         clone._fromField = fm.getFullName(false);\n         clone._fromType = type;\n         clone._availableRecursion = getAvailableRecursionDepth(fm, type, true);\n+        if (StringUtils.equals(_directRelationOwner, fm.getFullName()))\n+            clone._load = false;\n+        else\n+            clone._load = _load;\n+\n+        FieldMetaData owner = fm.getMappedByMetaData();\n+        if (owner != null && owner.getTypeCode() == JavaTypes.PC)\n+            clone._directRelationOwner = owner.getFullName();\n+        \n         return clone;\n     }\n "},{"sha":"b9c19a8ed763ed9a11d4f9592c8e4adf2014b439","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PCDataImpl.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/b4a3a77840af840f9cd2800b717c585a3c135e5e/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PCDataImpl.java","raw_url":"https://github.com/apache/openjpa/raw/b4a3a77840af840f9cd2800b717c585a3c135e5e/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PCDataImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PCDataImpl.java?ref=b4a3a77840af840f9cd2800b717c585a3c135e5e","patch":"@@ -138,7 +138,8 @@ public void load(OpenJPAStateManager sm, FetchConfiguration fetch,\n             // fields in configured fetch groups\n             if (!isLoaded(i))\n                 loadIntermediate(sm, fmds[i]);\n-            else if (!sm.getLoaded().get(i) && fetch.requiresFetch(fmds[i]))\n+            else if (!sm.getLoaded().get(i) && fetch.requiresFetch(fmds[i]) \n+                != FetchConfiguration.FETCH_NONE)\n                 loadField(sm, fmds[i], fetch, context);\n         }\n     }"},{"sha":"e138189b32646b2283a5aca09241a839e4a09560","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/b4a3a77840af840f9cd2800b717c585a3c135e5e/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/b4a3a77840af840f9cd2800b717c585a3c135e5e/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java?ref=b4a3a77840af840f9cd2800b717c585a3c135e5e","patch":"@@ -407,7 +407,8 @@ private BitSet getUnloadedInternal(FetchConfiguration fetch, int mode,\n                     load = !fmds[i].isTransient();\n                     break;\n                 case LOAD_FGS:\n-                    load = fetch == null || fetch.requiresFetch(fmds[i]);\n+                    load = fetch == null || fetch.requiresFetch(fmds[i]) \n+                        != FetchConfiguration.FETCH_NONE;\n                     break;\n                 default: // LOAD_ALL\n                     load = true;"},{"sha":"d4e42bd076d6720be9840da4e544a973d704941a","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/VersionAttachStrategy.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/b4a3a77840af840f9cd2800b717c585a3c135e5e/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/VersionAttachStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/b4a3a77840af840f9cd2800b717c585a3c135e5e/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/VersionAttachStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/VersionAttachStrategy.java?ref=b4a3a77840af840f9cd2800b717c585a3c135e5e","patch":"@@ -131,7 +131,8 @@ public Object attach(AttachManager manager, Object toAttach,\n                         attachField(manager, toAttach, sm, fmds[i], true);\n                         break;\n                     case DETACH_FGS:\n-                        if (fetch.requiresFetch(fmds[i]))\n+                        if (fetch.requiresFetch(fmds[i]) \n+                            != FetchConfiguration.FETCH_NONE)\n                             attachField(manager, toAttach, sm, fmds[i], true);\n                         break;\n                     case DETACH_LOADED:"},{"sha":"c872f473fb4fd1e5c67da4ef8a7a43afaeaff8a1","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/BidiChild.java","status":"added","additions":67,"deletions":0,"changes":67,"blob_url":"https://github.com/apache/openjpa/blob/b4a3a77840af840f9cd2800b717c585a3c135e5e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/BidiChild.java","raw_url":"https://github.com/apache/openjpa/raw/b4a3a77840af840f9cd2800b717c585a3c135e5e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/BidiChild.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/BidiChild.java?ref=b4a3a77840af840f9cd2800b717c585a3c135e5e","patch":"@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 2006 The Apache Software Foundation.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToOne;\n+\n+@Entity\n+public class BidiChild {\n+\n+    @Id\n+    @GeneratedValue\n+    private long id;\n+\n+    private String name;\n+\n+    @ManyToOne(fetch=FetchType.LAZY)\n+    private BidiParent oneToManyParent;\n+\n+    @OneToOne(fetch=FetchType.LAZY)\n+    private BidiParent oneToOneParent;\n+\n+    public long getId() { \n+        return id; \n+    }\n+\n+    public String getName() { \n+        return name; \n+    }\n+\n+    public void setName(String name) { \n+        this.name = name; \n+    }\n+\n+    public BidiParent getOneToOneParent() { \n+        return oneToOneParent; \n+    }\n+\n+    public void setOneToOneParent(BidiParent parent) { \n+        oneToOneParent = parent; \n+    }\n+\n+    public BidiParent getOneToManyParent() { \n+        return oneToManyParent; \n+    }\n+\n+    public void setOneToManyParent(BidiParent parent) { \n+        oneToManyParent = parent; \n+    }\n+}"},{"sha":"eab31790393166ffcc1e28ddc19c86a94f7cf742","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/BidiParent.java","status":"added","additions":68,"deletions":0,"changes":68,"blob_url":"https://github.com/apache/openjpa/blob/b4a3a77840af840f9cd2800b717c585a3c135e5e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/BidiParent.java","raw_url":"https://github.com/apache/openjpa/raw/b4a3a77840af840f9cd2800b717c585a3c135e5e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/BidiParent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/BidiParent.java?ref=b4a3a77840af840f9cd2800b717c585a3c135e5e","patch":"@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2006 The Apache Software Foundation.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.OneToMany;\n+import javax.persistence.OneToOne;\n+import javax.persistence.OrderBy;\n+\n+@Entity\n+public class BidiParent {\n+\n+    @Id\n+    @GeneratedValue\n+    private long id;\n+\n+    private String name;\n+\n+    @OneToMany(mappedBy=\"oneToManyParent\")\n+    @OrderBy(\"name ASC\")\n+    private List<BidiChild> oneToManyChildren = new ArrayList<BidiChild>();\n+\n+    @OneToOne(fetch=FetchType.LAZY, mappedBy=\"oneToOneParent\")\n+    private BidiChild oneToOneChild;\n+\n+    public long getId() { \n+        return id; \n+    }\n+\n+    public String getName() { \n+        return name; \n+    }\n+\n+    public void setName(String name) { \n+        this.name = name; \n+    }\n+\n+    public BidiChild getOneToOneChild() { \n+        return oneToOneChild; \n+    }\n+\n+    public void setOneToOneChild(BidiChild child) { \n+        oneToOneChild = child; \n+    }\n+\n+    public List<BidiChild> getOneToManyChildren() { \n+        return oneToManyChildren; \n+    }\n+}"},{"sha":"7274868cc09298f29a95a2590fa62dc0dfc177a3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestEagerBidiSQL.java","status":"added","additions":196,"deletions":0,"changes":196,"blob_url":"https://github.com/apache/openjpa/blob/b4a3a77840af840f9cd2800b717c585a3c135e5e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestEagerBidiSQL.java","raw_url":"https://github.com/apache/openjpa/raw/b4a3a77840af840f9cd2800b717c585a3c135e5e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestEagerBidiSQL.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestEagerBidiSQL.java?ref=b4a3a77840af840f9cd2800b717c585a3c135e5e","patch":"@@ -0,0 +1,196 @@\n+/*\n+ * Copyright 2006 The Apache Software Foundation.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import java.util.List;\n+import javax.persistence.EntityManager;\n+\n+import junit.textui.TestRunner;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.OpenJPAQuery;\n+import org.apache.openjpa.persistence.test.SQLListenerTestCase;\n+\n+/**\n+ * Test that when both sides of a mapped-by relation are eager fetched, \n+ * traversing from the mapped-by side to the mapping side cuts off -- that\n+ * we don't traverse in a loop back to the mapped-by side in the generated\n+ * SQL.\n+ *\n+ * @author Abe White\n+ */\n+public class TestEagerBidiSQL\n+    extends SQLListenerTestCase {\n+\n+    private long id1;\n+    private long id2;\n+\n+    public void setUp() {\n+        setUp(BidiParent.class, BidiChild.class);\n+        \n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+\n+        for (int i = 1; i <= 2; i++) {\n+            BidiParent parent = new BidiParent();\n+            parent.setName(\"parent\" + i);\n+            em.persist(parent);\n+\n+            BidiChild oneOneChild = new BidiChild();\n+            oneOneChild.setName(\"oneToOneChild\" + i);\n+            oneOneChild.setOneToOneParent(parent);\n+            parent.setOneToOneChild(oneOneChild);\n+            em.persist(oneOneChild);\n+\n+            for (int j = 1; j <= 3; j++) {\n+                BidiChild oneManyChild = new BidiChild();\n+                oneManyChild.setName(\"oneToManyChild\" + i + \"::\" + j);\n+                oneManyChild.setOneToManyParent(parent);\n+                parent.getOneToManyChildren().add(oneManyChild);\n+                em.persist(oneManyChild);\n+            }\n+\n+            if (i == 1)\n+                id1 = parent.getId();\n+            else\n+                id2 = parent.getId();\n+        }\n+\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+\n+    public void testEagerOwnerOneToManyFind() {\n+        sql.clear();\n+\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        em.getFetchPlan().addField(BidiParent.class, \"oneToManyChildren\");\n+        em.getFetchPlan().addField(BidiChild.class, \"oneToManyParent\");\n+        BidiParent parent = em.find(BidiParent.class, id1);\n+        assertEquals(1, sql.size());\n+        assertNotSQL(\".* LEFT OUTER JOIN BidiParent .*\");\n+        assertEquals(\"parent1\", parent.getName());\n+        assertEquals(3, parent.getOneToManyChildren().size());\n+        for (int i = 0; i < 3; i++) {\n+            assertEquals(\"oneToManyChild1::\" + (i + 1), \n+                parent.getOneToManyChildren().get(i).getName());\n+            assertEquals(parent,\n+                parent.getOneToManyChildren().get(i).getOneToManyParent());\n+        }\n+        assertEquals(1, sql.size());\n+        em.close();\n+    }\n+\n+    public void testEagerOwnerOneToOneFind() {\n+        sql.clear();\n+\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        em.getFetchPlan().addField(BidiParent.class, \"oneToOneChild\");\n+        em.getFetchPlan().addField(BidiChild.class, \"oneToOneParent\");\n+        BidiParent parent = em.find(BidiParent.class, id1);\n+        assertEquals(1, sql.size());\n+        assertNotSQL(\".* LEFT OUTER JOIN BidiParent .*\");\n+        assertEquals(\"parent1\", parent.getName());\n+        assertNotNull(parent.getOneToOneChild());\n+        assertEquals(\"oneToOneChild1\", parent.getOneToOneChild().getName());\n+        assertEquals(parent, parent.getOneToOneChild().getOneToOneParent());\n+        assertEquals(1, sql.size());\n+        em.close();\n+    }\n+\n+    public void testEagerOwnerOneToManyQuery() {\n+        sql.clear();\n+\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        OpenJPAQuery q = em.createQuery(\"SELECT o FROM BidiParent o \"\n+            + \"ORDER BY o.name ASC\");\n+        q.getFetchPlan().addField(BidiParent.class, \"oneToManyChildren\");\n+        q.getFetchPlan().addField(BidiChild.class, \"oneToManyParent\");\n+        List<BidiParent> res = (List<BidiParent>) q.getResultList(); \n+\n+        assertEquals(2, res.size());\n+        assertEquals(sql.toString(), 2, sql.size());\n+        assertNotSQL(\".* LEFT OUTER JOIN BidiParent .*\");\n+\n+        for (int i = 0; i < res.size(); i++) {\n+            assertEquals(\"parent\" + (i + 1), res.get(i).getName());\n+            assertEquals(3, res.get(i).getOneToManyChildren().size());\n+            for (int j = 0; j < 3; j++) {\n+                assertEquals(\"oneToManyChild\" + (i + 1) + \"::\" + (j + 1), \n+                    res.get(i).getOneToManyChildren().get(j).getName());\n+                assertEquals(res.get(i), res.get(i).getOneToManyChildren().\n+                    get(j).getOneToManyParent());\n+            }\n+        }\n+        assertEquals(2, sql.size());\n+        em.close();\n+    }\n+\n+    public void testEagerOwnerOneToOneQuery() {\n+        sql.clear();\n+\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        OpenJPAQuery q = em.createQuery(\"SELECT o FROM BidiParent o \"\n+            + \"ORDER BY o.name ASC\");\n+        q.getFetchPlan().addField(BidiParent.class, \"oneToOneChild\");\n+        q.getFetchPlan().addField(BidiChild.class, \"oneToOneParent\");\n+        List<BidiParent> res = (List<BidiParent>) q.getResultList(); \n+\n+        assertEquals(2, res.size());\n+        assertEquals(1, sql.size());\n+        assertNotSQL(\".* LEFT OUTER JOIN BidiParent .*\");\n+\n+        for (int i = 0; i < res.size(); i++) {\n+            assertEquals(\"parent\" + (i + 1), res.get(i).getName());\n+            assertNotNull(res.get(i).getOneToOneChild());\n+            assertEquals(\"oneToOneChild\" + (i + 1),\n+                res.get(i).getOneToOneChild().getName());\n+            assertEquals(res.get(i), \n+                res.get(i).getOneToOneChild().getOneToOneParent());\n+        }\n+        assertEquals(1, sql.size());\n+        em.close();\n+    }\n+\n+    public void testEagerNonOwnerOneToOneQuery() {\n+        sql.clear();\n+\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        OpenJPAQuery q = em.createQuery(\"SELECT o FROM BidiParent o \"\n+            + \"ORDER BY o.name ASC\");\n+        q.getFetchPlan().addField(BidiParent.class, \"oneToOneChild\");\n+        q.getFetchPlan().addField(BidiChild.class, \"oneToManyParent\");\n+        List<BidiParent> res = (List<BidiParent>) q.getResultList(); \n+\n+        assertEquals(2, res.size());\n+        assertEquals(1, sql.size());\n+        assertSQL(\".* LEFT OUTER JOIN BidiParent .*\");\n+\n+        for (int i = 0; i < res.size(); i++) {\n+            assertEquals(\"parent\" + (i + 1), res.get(i).getName());\n+            assertNotNull(res.get(i).getOneToOneChild());\n+            assertEquals(\"oneToOneChild\" + (i + 1),\n+                res.get(i).getOneToOneChild().getName());\n+            assertNull(res.get(i).getOneToOneChild().getOneToManyParent());\n+        }\n+        assertEquals(1, sql.size());\n+        em.close();\n+    }\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(TestEagerBidiSQL.class);\n+    }\n+}\n+"},{"sha":"2a4299cb7ed17cbbf271d6233ea2259d95becf41","filename":"openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/ObjectData.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/b4a3a77840af840f9cd2800b717c585a3c135e5e/openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/ObjectData.java","raw_url":"https://github.com/apache/openjpa/raw/b4a3a77840af840f9cd2800b717c585a3c135e5e/openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/ObjectData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/ObjectData.java?ref=b4a3a77840af840f9cd2800b717c585a3c135e5e","patch":"@@ -111,7 +111,8 @@ public void load(OpenJPAStateManager sm, FetchConfiguration fetch) {\n \n         FieldMetaData[] fmds = _meta.getFields();\n         for (int i = 0; i < fmds.length; i++)\n-            if (!sm.getLoaded().get(i) && fetch.requiresFetch(fmds[i]))\n+            if (!sm.getLoaded().get(i) && fetch.requiresFetch(fmds[i]) \n+                != FetchConfiguration.FETCH_NONE)\n                 sm.store(i, toLoadable(sm, fmds[i], _data[i], fetch));\n     }\n "}]}

