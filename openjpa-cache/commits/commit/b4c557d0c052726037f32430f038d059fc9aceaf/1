{"sha":"b4c557d0c052726037f32430f038d059fc9aceaf","node_id":"MDY6Q29tbWl0MjA2MzY0OmI0YzU1N2QwYzA1MjcyNjAzN2YzMjQzMGYwMzhkMDU5ZmM5YWNlYWY=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-07-22T11:54:26Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-07-22T11:54:26Z"},"message":"OPENJPA-660: SQL Query Cache supports binding non-primary key parameters to cached SQL. Commit fix on behalf of Fay Wang. Original test case developed by Vikram Bhatia.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@678722 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2dc9fd33fcae584b44cc5a3ae205f7fc7da99fa9","url":"https://api.github.com/repos/apache/openjpa/git/trees/2dc9fd33fcae584b44cc5a3ae205f7fc7da99fa9"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b4c557d0c052726037f32430f038d059fc9aceaf","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b4c557d0c052726037f32430f038d059fc9aceaf","html_url":"https://github.com/apache/openjpa/commit/b4c557d0c052726037f32430f038d059fc9aceaf","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b4c557d0c052726037f32430f038d059fc9aceaf/comments","author":null,"committer":null,"parents":[{"sha":"4c0bf1be10ca50cf8a02fb2e7c58ff52f862ca5f","url":"https://api.github.com/repos/apache/openjpa/commits/4c0bf1be10ca50cf8a02fb2e7c58ff52f862ca5f","html_url":"https://github.com/apache/openjpa/commit/4c0bf1be10ca50cf8a02fb2e7c58ff52f862ca5f"}],"stats":{"total":525,"additions":523,"deletions":2},"files":[{"sha":"cc44db377adc89820afce46c9c0d8719cae448a9","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StoreCollectionFieldStrategy.java","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/b4c557d0c052726037f32430f038d059fc9aceaf/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StoreCollectionFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/b4c557d0c052726037f32430f038d059fc9aceaf/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StoreCollectionFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StoreCollectionFieldStrategy.java?ref=b4c557d0c052726037f32430f038d059fc9aceaf","patch":"@@ -38,6 +38,7 @@\n import org.apache.openjpa.jdbc.sql.Joins;\n import org.apache.openjpa.jdbc.sql.LogicalUnion;\n import org.apache.openjpa.jdbc.sql.Result;\n+import org.apache.openjpa.jdbc.sql.SQLBuffer;\n import org.apache.openjpa.jdbc.sql.Select;\n import org.apache.openjpa.jdbc.sql.SelectExecutor;\n import org.apache.openjpa.jdbc.sql.SelectImpl;\n@@ -466,7 +467,7 @@ public void load(final OpenJPAStateManager sm, final JDBCStore store,\n         SelectImpl sel = null;\n         Map<JDBCStoreManager.SelectKey, Object[]> storeCollectionUnionCache = null;\n         JDBCStoreManager.SelectKey selKey = null;\n-        if (!((JDBCStoreManager)store).isQuerySQLCacheOn())\n+        if (!((JDBCStoreManager)store).isQuerySQLCacheOn() || elems.length > 1)\n             union = newUnion(sm, store, fetch, elems, resJoins);\n         else {\n             parmList = new ArrayList();\n@@ -503,7 +504,7 @@ public void load(final OpenJPAStateManager sm, final JDBCStore store,\n                     }\n \n                     // only cache the union when elems length is 1 for now\n-                    if (!found && elems.length == 1) { \n+                    if (!found) { \n                         Object[] objs1 = new Object[2];\n                         objs1[0] = union;\n                         objs1[1] = resJoins[0];\n@@ -531,6 +532,9 @@ public void load(final OpenJPAStateManager sm, final JDBCStore store,\n \n             sel.wherePrimaryKey(mapping, cols, cols, oid, store, \n                 \tnull, null, parmList);\n+            List nonFKParams = sel.getSQL().getNonFKParameters();\n+            if (nonFKParams != null && nonFKParams.size() > 0) \n+                parmList.addAll(nonFKParams);\n         }\n         \n         // create proxy"},{"sha":"4b5537afed6f6b72b16323c9f247b0b5a71d012e","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLBuffer.java","status":"modified","additions":30,"deletions":0,"changes":30,"blob_url":"https://github.com/apache/openjpa/blob/b4c557d0c052726037f32430f038d059fc9aceaf/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLBuffer.java","raw_url":"https://github.com/apache/openjpa/raw/b4c557d0c052726037f32430f038d059fc9aceaf/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLBuffer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLBuffer.java?ref=b4c557d0c052726037f32430f038d059fc9aceaf","patch":"@@ -33,6 +33,7 @@\n import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.exps.Val;\n import org.apache.openjpa.jdbc.schema.Column;\n+import org.apache.openjpa.jdbc.schema.ForeignKey;\n import org.apache.openjpa.jdbc.schema.Sequence;\n import org.apache.openjpa.jdbc.schema.Table;\n import serp.util.Numbers;\n@@ -55,6 +56,7 @@\n     private List _subsels = null;\n     private List _params = null;\n     private List _cols = null;\n+    private List _nonFKParams = null;\n \n     /**\n      * Default constructor.\n@@ -145,6 +147,11 @@ else if (_cols != null)\n                         _cols.add(paramIndex, null);\n             }\n         }\n+        if (buf._nonFKParams != null) {\n+            if (_nonFKParams == null)\n+                _nonFKParams = new ArrayList();\n+            _nonFKParams.addAll(buf._nonFKParams);\n+        }\n     }\n \n     public SQLBuffer append(Table table) {\n@@ -249,6 +256,26 @@ else if (o instanceof Raw)\n             _params.add(o);\n             if (_cols != null)\n                 _cols.add(col);\n+            if (col == null)\n+                return this;\n+            boolean isFK = false;\n+            ForeignKey[] fks = col.getTable().getForeignKeys();\n+            for (int i = 0; i < fks.length; i++) {\n+                Column[] cols = fks[i].getColumns();\n+                for (int j = 0; j < cols.length; j++) {\n+                    if (cols[j] == col) {\n+                        isFK = true;\n+                        break;\n+                    }\n+                }\n+                if (isFK)\n+                    break;\n+            }\n+            if (!isFK) {\n+                if (_nonFKParams == null)\n+                    _nonFKParams = new ArrayList();\n+                _nonFKParams.add(o);                \n+            }\n         }\n         return this;\n     }\n@@ -372,6 +399,9 @@ public List getParameters() {\n         return (_params == null) ? Collections.EMPTY_LIST : _params;\n     }\n \n+    public List getNonFKParameters() {\n+        return (_nonFKParams == null) ? Collections.EMPTY_LIST : _nonFKParams;\n+    }\n     /**\n      * Return the SQL for this buffer.\n      */"},{"sha":"83100b569b0b92dcea93ce43a18dd2dd599f42dd","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/Department.java","status":"added","additions":83,"deletions":0,"changes":83,"blob_url":"https://github.com/apache/openjpa/blob/b4c557d0c052726037f32430f038d059fc9aceaf/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/Department.java","raw_url":"https://github.com/apache/openjpa/raw/b4c557d0c052726037f32430f038d059fc9aceaf/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/Department.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/Department.java?ref=b4c557d0c052726037f32430f038d059fc9aceaf","patch":"@@ -0,0 +1,83 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.query.cache;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+\r\n+import javax.persistence.CascadeType;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.IdClass;\r\n+import javax.persistence.OneToMany;\r\n+import javax.persistence.Table;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.ElementClassCriteria;\r\n+\r\n+/**\r\n+ * Persistent entity with collection whose element type belongs to inheritance\r\n+ * hierarchy mapped to a SINGLE_TABLE. Hence relationship loading will require\r\n+ * \r\n+ */\r\n+@Entity\r\n+@Table(name = \"DEPT\")\r\n+@IdClass(DepartmentId.class)\r\n+public class Department {\r\n+\r\n+\t@Id\r\n+\tprivate String name;\r\n+\r\n+\t@OneToMany(mappedBy = \"dept\", cascade = CascadeType.PERSIST)\r\n+\t@ElementClassCriteria\r\n+\tprivate Collection<PartTimeEmployee> partTimeEmployees;\r\n+\r\n+\t@OneToMany(mappedBy = \"dept\", cascade = CascadeType.PERSIST)\r\n+\t@ElementClassCriteria\r\n+\tprivate Collection<FullTimeEmployee> fullTimeEmployees;\r\n+\r\n+\tpublic Collection<FullTimeEmployee> getFullTimeEmployees() {\r\n+\t\treturn fullTimeEmployees;\r\n+\t}\r\n+\r\n+\tpublic void addEmployee(FullTimeEmployee e) {\r\n+\t\tif (fullTimeEmployees == null)\r\n+\t\t\tfullTimeEmployees = new ArrayList<FullTimeEmployee>();\r\n+\t\tthis.fullTimeEmployees.add(e);\r\n+\t\te.setDept(this);\r\n+\t}\r\n+\r\n+\tpublic Collection<PartTimeEmployee> getPartTimeEmployees() {\r\n+\t\treturn partTimeEmployees;\r\n+\t}\r\n+\r\n+\tpublic void addEmployee(PartTimeEmployee e) {\r\n+\t\tif (partTimeEmployees == null)\r\n+\t\t\tpartTimeEmployees = new ArrayList<PartTimeEmployee>();\r\n+\t\tthis.partTimeEmployees.add(e);\r\n+\t\te.setDept(this);\r\n+\t}\r\n+\r\n+\tpublic String getName() {\r\n+\t\treturn name;\r\n+\t}\r\n+\r\n+\tpublic void setName(String name) {\r\n+\t\tthis.name = name;\r\n+\t}\r\n+}\r"},{"sha":"a31e366421c3704824650ee5f622dbf83aad1142","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/DepartmentId.java","status":"added","additions":56,"deletions":0,"changes":56,"blob_url":"https://github.com/apache/openjpa/blob/b4c557d0c052726037f32430f038d059fc9aceaf/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/DepartmentId.java","raw_url":"https://github.com/apache/openjpa/raw/b4c557d0c052726037f32430f038d059fc9aceaf/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/DepartmentId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/DepartmentId.java?ref=b4c557d0c052726037f32430f038d059fc9aceaf","patch":"@@ -0,0 +1,56 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.query.cache;\r\n+\r\n+import java.io.Serializable;\r\n+\r\n+public class DepartmentId implements Serializable {\r\n+\tprivate String name;\r\n+\r\n+\tpublic DepartmentId() {\r\n+\t\tthis(null);\r\n+\t}\r\n+\r\n+\tpublic DepartmentId(String name) {\r\n+\t\tthis.name = name;\r\n+\t}\r\n+\r\n+\tpublic int hashCode() {\r\n+\t\treturn name.hashCode();\r\n+\t}\r\n+\r\n+\tpublic boolean equals(Object obj) {\r\n+\t\tif (this == obj) {\r\n+\t\t\treturn true;\r\n+\t\t}\r\n+\t\tif (!(obj instanceof DepartmentId)) {\r\n+\t\t\treturn false;\r\n+\t\t}\r\n+\r\n+\t\tDepartmentId other = (DepartmentId) obj;\r\n+\t\tif (name == null) {\r\n+\t\t\tif (other.name != null) {\r\n+\t\t\t\treturn false;\r\n+\t\t\t}\r\n+\t\t} else if (!name.equals(other.name)) {\r\n+\t\t\treturn false;\r\n+\t\t}\r\n+\t\treturn true;\r\n+\t}\r\n+}\r"},{"sha":"0b78aee9684ec6d5024b1dfbb2a523e3af6aa1ce","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/Employee.java","status":"added","additions":59,"deletions":0,"changes":59,"blob_url":"https://github.com/apache/openjpa/blob/b4c557d0c052726037f32430f038d059fc9aceaf/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/Employee.java","raw_url":"https://github.com/apache/openjpa/raw/b4c557d0c052726037f32430f038d059fc9aceaf/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/Employee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/Employee.java?ref=b4c557d0c052726037f32430f038d059fc9aceaf","patch":"@@ -0,0 +1,59 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.query.cache;\r\n+\r\n+import javax.persistence.DiscriminatorColumn;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.IdClass;\r\n+import javax.persistence.Inheritance;\r\n+import javax.persistence.InheritanceType;\r\n+import javax.persistence.ManyToOne;\r\n+import javax.persistence.Table;\r\n+\r\n+@Entity\r\n+@Table(name = \"EMP\")\r\n+@IdClass(EmployeeId.class)\r\n+@Inheritance(strategy = InheritanceType.SINGLE_TABLE)\r\n+@DiscriminatorColumn(name = \"TYPE\")\r\n+public abstract class Employee {\r\n+\r\n+\t@Id\r\n+\tprivate String ssn;\r\n+\r\n+\t@ManyToOne\r\n+\tprivate Department dept;\r\n+\r\n+\tpublic String getSsn() {\r\n+\t\treturn ssn;\r\n+\t}\r\n+\r\n+\tpublic void setSsn(String ssn) {\r\n+\t\tthis.ssn = ssn;\r\n+\t}\r\n+\r\n+\tpublic Department getDept() {\r\n+\t\treturn dept;\r\n+\t}\r\n+\r\n+\tpublic void setDept(Department dept) {\r\n+\t\tthis.dept = dept;\r\n+\t}\r\n+\r\n+}\n\\ No newline at end of file"},{"sha":"2dc5e2bb25824c72638f7349decfe92bc7af46ef","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/EmployeeId.java","status":"added","additions":56,"deletions":0,"changes":56,"blob_url":"https://github.com/apache/openjpa/blob/b4c557d0c052726037f32430f038d059fc9aceaf/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/EmployeeId.java","raw_url":"https://github.com/apache/openjpa/raw/b4c557d0c052726037f32430f038d059fc9aceaf/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/EmployeeId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/EmployeeId.java?ref=b4c557d0c052726037f32430f038d059fc9aceaf","patch":"@@ -0,0 +1,56 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.query.cache;\r\n+\r\n+import java.io.Serializable;\r\n+\r\n+public class EmployeeId implements Serializable {\r\n+\t\r\n+\tprivate String ssn;\r\n+\t\r\n+\tpublic EmployeeId(){\r\n+\t}\r\n+\tpublic EmployeeId(String ssn){\r\n+\t\tthis.ssn = ssn;\r\n+\t}\r\n+    public boolean equals (Object other)\r\n+    {\r\n+        if (other == this)\r\n+            return true;\r\n+        if (!(other instanceof EmployeeId))\r\n+            return false;\r\n+\r\n+        EmployeeId obj = (EmployeeId) other;\r\n+\t\tif (ssn == null) {\r\n+\t\t\tif (obj.ssn != null) {\r\n+\t\t\t\treturn false;\r\n+\t\t\t}\r\n+\t\t} else if (!ssn.equals(obj.ssn)) {\r\n+\t\t\treturn false;\r\n+\t\t}\r\n+\t\t\r\n+        return (true);\r\n+    }\r\n+     \r\n+   \r\n+    public int hashCode ()\r\n+    {\r\n+        return (ssn.hashCode());\r\n+    }\r\n+}\r"},{"sha":"df2fb39b11e59a94aaad84efaaeae2c187a4bde5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/FullTimeEmployee.java","status":"added","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/apache/openjpa/blob/b4c557d0c052726037f32430f038d059fc9aceaf/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/FullTimeEmployee.java","raw_url":"https://github.com/apache/openjpa/raw/b4c557d0c052726037f32430f038d059fc9aceaf/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/FullTimeEmployee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/FullTimeEmployee.java?ref=b4c557d0c052726037f32430f038d059fc9aceaf","patch":"@@ -0,0 +1,38 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.query.cache;\r\n+\r\n+import javax.persistence.Column;\r\n+import javax.persistence.DiscriminatorValue;\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+@DiscriminatorValue(\"F\")\r\n+public class FullTimeEmployee extends Employee {\r\n+\t@Column(name = \"salary\")\r\n+\tprivate double salary;\r\n+\r\n+\tpublic double getSalary() {\r\n+\t\treturn salary;\r\n+\t}\r\n+\r\n+\tpublic void setSalary(double salary) {\r\n+\t\tthis.salary = salary;\r\n+\t}\r\n+}\r"},{"sha":"986a1896ec3bd53c5350709ee617229cb8a1cb8a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/PartTimeEmployee.java","status":"added","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/apache/openjpa/blob/b4c557d0c052726037f32430f038d059fc9aceaf/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/PartTimeEmployee.java","raw_url":"https://github.com/apache/openjpa/raw/b4c557d0c052726037f32430f038d059fc9aceaf/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/PartTimeEmployee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/PartTimeEmployee.java?ref=b4c557d0c052726037f32430f038d059fc9aceaf","patch":"@@ -0,0 +1,38 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.query.cache;\r\n+\r\n+import javax.persistence.Column;\r\n+import javax.persistence.DiscriminatorValue;\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+@DiscriminatorValue(\"P\")\r\n+public class PartTimeEmployee extends Employee {\r\n+\t@Column(name = \"wage\")\r\n+\tprivate double hourlyWage;\r\n+\r\n+\tpublic double getHourlyWage() {\r\n+\t\treturn hourlyWage;\r\n+\t}\r\n+\r\n+\tpublic void setHourlyWage(double hourlyWage) {\r\n+\t\tthis.hourlyWage = hourlyWage;\r\n+\t}\r\n+}\r"},{"sha":"43e3ea8c69662842a0269c8d3861ed82849af5a7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/TestNonPrimaryKeyQueryParameters.java","status":"added","additions":157,"deletions":0,"changes":157,"blob_url":"https://github.com/apache/openjpa/blob/b4c557d0c052726037f32430f038d059fc9aceaf/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/TestNonPrimaryKeyQueryParameters.java","raw_url":"https://github.com/apache/openjpa/raw/b4c557d0c052726037f32430f038d059fc9aceaf/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/TestNonPrimaryKeyQueryParameters.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/TestNonPrimaryKeyQueryParameters.java?ref=b4c557d0c052726037f32430f038d059fc9aceaf","patch":"@@ -0,0 +1,157 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.query.cache;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.Query;\r\n+\r\n+import org.apache.openjpa.persistence.test.SQLListenerTestCase;\r\n+\r\n+/**\r\n+ * Tests that find() queries that use non-primary keys can be cached.\r\n+ * \r\n+ * SQL Query Cache caches SQL queries generated to select single entity.\r\n+ * However, single instance queries may also join to other relations. Hence,\r\n+ * primary key and foreign keys are normally the parameters to these queries\r\n+ * which cached query binds again when being reused.\r\n+ * \r\n+ * The test verifies the case where non-primary keys are used as query\r\n+ * parameters. The test employs a inheritance hierarchy mapped to SINGLE_TABLE.\r\n+ * When derived instances are used in relationship, the discriminator values\r\n+ * must be used in to join to the target type.\r\n+ * \r\n+ * For further details, refer <A\r\n+ * HREF=\"https://issues.apache.org/jira/browse/OPENJPA-660\">OPENJPA-660</A>\r\n+ * \r\n+ * \r\n+ * @author Pinaki Poddar\r\n+ * @author Vikram Bhatia\r\n+ * \r\n+ */\r\n+public class TestNonPrimaryKeyQueryParameters extends SQLListenerTestCase {\r\n+\tprivate static final int FULLTIME_EMPLOYEE_COUNT = 3;\r\n+\tprivate static final int PARTTIME_EMPLOYEE_COUNT = 2;\r\n+\tprivate static final String DEPT_NAME = \"ENGINEERING\";\r\n+\r\n+\tpublic void setUp() {\r\n+\t\tsuper.setUp(CLEAR_TABLES, Department.class, Employee.class,\r\n+\t\t\t\tFullTimeEmployee.class, PartTimeEmployee.class,\r\n+\t\t\t\t\"openjpa.jdbc.QuerySQLCache\", \"true\");\r\n+\t\tcreateDepartment(DEPT_NAME);\r\n+\t\tsql.clear();\r\n+\t}\r\n+\r\n+\tpublic void testSelectQueryWithPrimaryKeyParameter() {\r\n+\t\tEntityManager em = emf.createEntityManager();\r\n+\r\n+\t\tQuery query = em\r\n+\t\t\t\t.createQuery(\"SELECT d from Department d where d.name=?1\");\r\n+\t\tquery.setParameter(1, DEPT_NAME);\r\n+\t\tDepartment dept = (Department) query.getSingleResult();\r\n+\r\n+\t\tassertEquals(FULLTIME_EMPLOYEE_COUNT, dept.getFullTimeEmployees()\r\n+\t\t\t\t.size());\r\n+\t\tassertEquals(PARTTIME_EMPLOYEE_COUNT, dept.getPartTimeEmployees()\r\n+\t\t\t\t.size());\r\n+\t\tassertSQL(\".* AND t0.TYPE = .*\");\r\n+\t\tem.close();\r\n+\t}\r\n+\r\n+\tpublic void testSelectQueryWithNoParameter() {\r\n+\t\tEntityManager em = emf.createEntityManager();\r\n+\r\n+\t\tQuery query = em.createQuery(\"SELECT d from Department d\");\r\n+\t\tquery.setParameter(1, DEPT_NAME);\r\n+\t\tDepartment dept = (Department) query.getSingleResult();\r\n+\r\n+\t\tassertEquals(FULLTIME_EMPLOYEE_COUNT, dept.getFullTimeEmployees()\r\n+\t\t\t\t.size());\r\n+\t\tassertEquals(PARTTIME_EMPLOYEE_COUNT, dept.getPartTimeEmployees()\r\n+\t\t\t\t.size());\r\n+\r\n+\t\tassertSQL(\".* AND t0.TYPE = .*\");\r\n+\t\tem.close();\r\n+\t}\r\n+\r\n+\tpublic void testFind() {\r\n+\t\tEntityManager em = emf.createEntityManager();\r\n+\r\n+\t\tDepartment dept = em.find(Department.class, DEPT_NAME);\r\n+\r\n+\t\tassertEquals(FULLTIME_EMPLOYEE_COUNT, dept.getFullTimeEmployees()\r\n+\t\t\t\t.size());\r\n+\t\tassertEquals(PARTTIME_EMPLOYEE_COUNT, dept.getPartTimeEmployees()\r\n+\t\t\t\t.size());\r\n+\r\n+\t\tassertSQL(\".* AND t0.TYPE = .*\");\r\n+\t\tem.close();\r\n+\t}\r\n+\r\n+\tpublic void testSelectSubClass() {\r\n+\t\tEntityManager em = emf.createEntityManager();\r\n+\r\n+\t\tQuery query = em.createQuery(\"SELECT e from FullTimeEmployee e\");\r\n+\t\tassertEquals(FULLTIME_EMPLOYEE_COUNT, query.getResultList().size());\r\n+\r\n+\t\tquery = em.createQuery(\"SELECT e from PartTimeEmployee e\");\r\n+\t\tassertEquals(PARTTIME_EMPLOYEE_COUNT, query.getResultList().size());\r\n+\r\n+\t\tassertSQL(\".* WHERE t0.TYPE = .*\");\r\n+\t}\r\n+\r\n+\tpublic void testSelectBaseClass() {\r\n+\t\tEntityManager em = emf.createEntityManager();\r\n+\r\n+\t\tQuery query = em.createQuery(\"SELECT e from Employee e\");\r\n+\t\tassertEquals(FULLTIME_EMPLOYEE_COUNT + PARTTIME_EMPLOYEE_COUNT, query\r\n+\t\t\t\t.getResultList().size());\r\n+\t\tassertNotSQL(\".* WHERE t0.TYPE = .*\");\r\n+\t}\r\n+\r\n+\tprivate void createDepartment(String deptName) {\r\n+\t\tif (count(Department.class) > 0)\r\n+\t\t\treturn;\r\n+\r\n+\t\tDepartment dept = new Department();\r\n+\t\tdept.setName(deptName);\r\n+\r\n+\t\tfor (int i = 1; i <= FULLTIME_EMPLOYEE_COUNT; i++) {\r\n+\t\t\tFullTimeEmployee e = new FullTimeEmployee();\r\n+\t\t\te.setSsn(\"888-PP-001\" + i);\r\n+\t\t\te.setSalary(100000);\r\n+\t\t\tdept.addEmployee(e);\r\n+\t\t}\r\n+\t\tfor (int i = 1; i <= PARTTIME_EMPLOYEE_COUNT; i++) {\r\n+\t\t\tPartTimeEmployee e = new PartTimeEmployee();\r\n+\t\t\te.setSsn(\"999-PP-001\" + i);\r\n+\t\t\te.setHourlyWage(20);\r\n+\t\t\tdept.addEmployee(e);\r\n+\t\t}\r\n+\r\n+\t\tEntityManager em = emf.createEntityManager();\r\n+\t\tem.getTransaction().begin();\r\n+\t\tem.persist(dept);\r\n+\t\tem.getTransaction().commit();\r\n+\t\tem.close();\r\n+\r\n+\t}\r\n+}\r"}]}

