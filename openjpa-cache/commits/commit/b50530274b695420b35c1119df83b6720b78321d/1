{"sha":"b50530274b695420b35c1119df83b6720b78321d","node_id":"MDY6Q29tbWl0MjA2MzY0OmI1MDUzMDI3NGI2OTU0MjBiMzVjMTExOWRmODNiNjcyMGI3ODMyMWQ=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-07-25T16:04:27Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-07-25T16:04:27Z"},"message":"Simple test case for in-memory remote commit provider.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@559503 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"bd0198fd911d3afecef46da6ae7e60468883f4b6","url":"https://api.github.com/repos/apache/openjpa/git/trees/bd0198fd911d3afecef46da6ae7e60468883f4b6"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b50530274b695420b35c1119df83b6720b78321d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b50530274b695420b35c1119df83b6720b78321d","html_url":"https://github.com/apache/openjpa/commit/b50530274b695420b35c1119df83b6720b78321d","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b50530274b695420b35c1119df83b6720b78321d/comments","author":null,"committer":null,"parents":[{"sha":"092729c11c78b2f04206db04a8f2ababd40eadea","url":"https://api.github.com/repos/apache/openjpa/commits/092729c11c78b2f04206db04a8f2ababd40eadea","html_url":"https://github.com/apache/openjpa/commit/092729c11c78b2f04206db04a8f2ababd40eadea"}],"stats":{"total":87,"additions":87,"deletions":0},"files":[{"sha":"5d9017594e5359c2b3631d3307eab491e7c24d81","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/event/TestSJVMRemoteCommitProvider.java","status":"added","additions":87,"deletions":0,"changes":87,"blob_url":"https://github.com/apache/openjpa/blob/b50530274b695420b35c1119df83b6720b78321d/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/event/TestSJVMRemoteCommitProvider.java","raw_url":"https://github.com/apache/openjpa/raw/b50530274b695420b35c1119df83b6720b78321d/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/event/TestSJVMRemoteCommitProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/event/TestSJVMRemoteCommitProvider.java?ref=b50530274b695420b35c1119df83b6720b78321d","patch":"@@ -0,0 +1,87 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.event;\r\n+\r\n+import java.util.HashMap;\r\n+import java.util.Map;\r\n+import java.util.Collections;\r\n+import javax.persistence.Persistence;\r\n+\r\n+import org.apache.openjpa.persistence.test.PersistenceTestCase;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\r\n+import org.apache.openjpa.event.RemoteCommitListener;\r\n+import org.apache.openjpa.event.RemoteCommitEvent;\r\n+\r\n+public class TestSJVMRemoteCommitProvider\r\n+    extends PersistenceTestCase {\r\n+\r\n+    private OpenJPAEntityManagerFactory emf1;\r\n+    private OpenJPAEntityManagerFactory emf2;\r\n+    private ListenerImpl listen1;\r\n+    private ListenerImpl listen2;\r\n+\r\n+    public void setUp() {\r\n+        Map sjvm1 = new HashMap();\r\n+        sjvm1.put(\"openjpa.RemoteCommitProvider\", \"sjvm\");\r\n+        // set this to differentiate emf1 from the other emf below\r\n+        sjvm1.put(\"openjpa.DetachState\", \"true\");\r\n+        emf1 = OpenJPAPersistence.cast(\r\n+            Persistence.createEntityManagerFactory(\"test\", sjvm1));\r\n+        emf1.getConfiguration().getRemoteCommitEventManager().addListener(\r\n+            listen1 = new ListenerImpl());\r\n+\r\n+        Map sjvm2 = new HashMap();\r\n+        sjvm2.put(\"openjpa.RemoteCommitProvider\", \"sjvm\");\r\n+        sjvm2.put(\"openjpa.DetachState\", \"false\"); // differentiate from above\r\n+        emf2 = OpenJPAPersistence.cast(\r\n+            Persistence.createEntityManagerFactory(\"test\", sjvm2));\r\n+        emf2.getConfiguration().getRemoteCommitEventManager().addListener(\r\n+            listen2 = new ListenerImpl());\r\n+    }\r\n+\r\n+    public void testSJVMRemoteCommitProvider() {\r\n+        assertNotSame(OpenJPAPersistence.toBrokerFactory(emf1),\r\n+            OpenJPAPersistence.toBrokerFactory(emf2));\r\n+        \r\n+        emf1.getConfiguration().getRemoteCommitEventManager()\r\n+            .getRemoteCommitProvider().broadcast(\r\n+                new RemoteCommitEvent(RemoteCommitEvent.PAYLOAD_OIDS,\r\n+                    Collections.EMPTY_SET,\r\n+                    Collections.EMPTY_SET,\r\n+                    Collections.EMPTY_SET,\r\n+                    Collections.EMPTY_SET));\r\n+\r\n+        assertEquals(0, listen1.eventCount);\r\n+        assertEquals(1, listen2.eventCount);\r\n+    }\r\n+\r\n+    private class ListenerImpl\r\n+        implements RemoteCommitListener {\r\n+\r\n+        private int eventCount;\r\n+\r\n+        public void afterCommit(RemoteCommitEvent event) {\r\n+            eventCount++;\r\n+        }\r\n+\r\n+        public void close() {\r\n+        }\r\n+    }\r\n+}\n\\ No newline at end of file"}]}

