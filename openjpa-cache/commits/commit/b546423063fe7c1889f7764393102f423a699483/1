{"sha":"b546423063fe7c1889f7764393102f423a699483","node_id":"MDY6Q29tbWl0MjA2MzY0OmI1NDY0MjMwNjNmZTdjMTg4OWY3NzY0MzkzMTAyZjQyM2E2OTk0ODM=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-03-23T12:42:41Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-03-23T12:42:41Z"},"message":"OPENJPA-896. Setting eol-style:native and removing windows eol characters from XML files.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@757388 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"33cc21ec86430dc52ace608466c5140ec057f634","url":"https://api.github.com/repos/apache/openjpa/git/trees/33cc21ec86430dc52ace608466c5140ec057f634"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b546423063fe7c1889f7764393102f423a699483","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b546423063fe7c1889f7764393102f423a699483","html_url":"https://github.com/apache/openjpa/commit/b546423063fe7c1889f7764393102f423a699483","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b546423063fe7c1889f7764393102f423a699483/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"90b84c5d73db4d0d7fa3e5520358912961b59c43","url":"https://api.github.com/repos/apache/openjpa/commits/90b84c5d73db4d0d7fa3e5520358912961b59c43","html_url":"https://github.com/apache/openjpa/commit/90b84c5d73db4d0d7fa3e5520358912961b59c43"}],"stats":{"total":13836,"additions":6918,"deletions":6918},"files":[{"sha":"9923d9645a5221fde61d50bfed0a1a22566e1644","filename":"openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/sql-error-state-codes.xml","status":"modified","additions":192,"deletions":192,"changes":384,"blob_url":"https://github.com/apache/openjpa/blob/b546423063fe7c1889f7764393102f423a699483/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/sql-error-state-codes.xml","raw_url":"https://github.com/apache/openjpa/raw/b546423063fe7c1889f7764393102f423a699483/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/sql-error-state-codes.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/sql-error-state-codes.xml?ref=b546423063fe7c1889f7764393102f423a699483","patch":"@@ -1,193 +1,193 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n-<!--\r\n- Licensed to the Apache Software Foundation (ASF) under one\r\n- or more contributor license agreements.  See the NOTICE file\r\n- distributed with this work for additional information\r\n- regarding copyright ownership.  The ASF licenses this file\r\n- to you under the Apache License, Version 2.0 (the\r\n- \"License\"); you may not use this file except in compliance\r\n- with the License.  You may obtain a copy of the License at\r\n- \r\n- http://www.apache.org/licenses/LICENSE-2.0\r\n- \r\n- Unless required by applicable law or agreed to in writing,\r\n- software distributed under the License is distributed on an\r\n- \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- KIND, either express or implied.  See the License for the\r\n- specific language governing permissions and limitations\r\n- under the License.   \r\n--->\r\n-<!-- ======================================================================= -->\r\n-<!-- Lists SQL Error State codes for specific type of faults per database    -->\r\n-<!-- dictionary.                                                             -->\r\n-<!-- SQL Exceptions raised by JDBC should carry standard error state code    -->\r\n-<!-- but they hardly do. Hence, the error state codes for specific type of   -->\r\n-<!-- database error can be listed here. These codes help to narrow down the  -->\r\n-<!-- cause of failure at JDBC layer and bubbles up as more intelligible      -->\r\n-<!-- exception to the application.                                           -->\r\n-<!-- ======================================================================= -->\r\n-<sql-state-codes>\r\n-\r\n-\t<dictionary class=\"org.apache.openjpa.jdbc.sql.DB2Dictionary\">\r\n-\t\t<lock>40001,57033</lock>\r\n-\t\t<referential-integrity>23502,42912,23001,23504,23511,23512,23513,23515,23520</referential-integrity>\r\n-\t\t<object-exists>23505</object-exists>\r\n-\t\t<object-not-found></object-not-found>\r\n-\t\t<optimistic></optimistic>\r\n-        <query>57014</query>\r\n-\t</dictionary>\r\n-\t\r\n-\t<dictionary class=\"org.apache.openjpa.jdbc.sql.DerbyDictionary\">\r\n-\t\t<lock>40001,40XL1,40XL2</lock>\r\n-\t\t<referential-integrity>22001,22005,23502,23503,23513,X0Y32</referential-integrity>\r\n-\t\t<object-exists>23505</object-exists>\r\n-\t\t<object-not-found></object-not-found>\r\n-\t\t<optimistic></optimistic>\r\n-        <query>XCL52</query>\r\n-\t</dictionary>\r\n-\t\r\n-\t<dictionary class=\"org.apache.openjpa.jdbc.sql.SQLServerDictionary\">\r\n-\t\t<lock>1205</lock>\r\n-\t\t<referential-integrity>544,2601,2627,8114,8115</referential-integrity>\r\n-\t\t<object-exists></object-exists>\r\n-\t\t<object-not-found></object-not-found>\r\n-\t\t<optimistic>1205</optimistic>\r\n-        <query></query>\r\n-\t</dictionary>\r\n-\t\r\n-\t<dictionary class=\"org.apache.openjpa.jdbc.sql.SybaseDictionary\">\r\n-\t\t<lock>1205</lock>\r\n-\t\t<referential-integrity>423,511,515,530,547,2601,2615,2714</referential-integrity>\r\n-\t\t<object-exists></object-exists>\r\n-\t\t<object-not-found></object-not-found>\r\n-\t\t<optimistic>1205</optimistic>\r\n-        <query></query>\r\n-\t</dictionary>\r\n-\t\r\n-\t<dictionary class=\"org.apache.openjpa.jdbc.sql.AccessDictionary\">\r\n-\t\t<lock>40001</lock>\r\n-\t\t<referential-integrity>22001,22005,23502,23503,23513,X0Y32</referential-integrity>\r\n-\t\t<object-exists>23505,456c</object-exists>\r\n-\t\t<object-not-found></object-not-found>\r\n-\t\t<optimistic>40XL1,40001</optimistic>\r\n-        <query></query>\r\n-\t</dictionary>\r\n-\t\r\n-\t<dictionary class=\"org.apache.openjpa.jdbc.sql.CacheDictionary\">\r\n-\t\t<lock>40001</lock>\r\n-\t\t<referential-integrity>22001,22005,23502,23503,23513,X0Y32</referential-integrity>\r\n-\t\t<object-exists>23505,456c</object-exists>\r\n-\t\t<object-not-found></object-not-found>\r\n-\t\t<optimistic>40XL1,40001</optimistic>\r\n-        <query></query>\r\n-\t</dictionary>\r\n-\t\r\n-\t<dictionary class=\"org.apache.openjpa.jdbc.sql.EmpressDictionary\">\r\n-\t\t<lock>40001</lock>\r\n-\t\t<referential-integrity>22001,22005,23502,23503,23513,X0Y32</referential-integrity>\r\n-\t\t<object-exists>23505,456c</object-exists>\r\n-\t\t<object-not-found></object-not-found>\r\n-\t\t<optimistic>40XL1,40001</optimistic>\r\n-        <query></query>\r\n-\t</dictionary>\r\n-\t\r\n-\t<dictionary class=\"org.apache.openjpa.jdbc.sql.FoxProDictionary\">\r\n-\t\t<lock>40001</lock>\r\n-\t\t<referential-integrity>22001,22005,23502,23503,23513,X0Y32</referential-integrity>\r\n-\t\t<object-exists>23505,456c</object-exists>\r\n-\t\t<object-not-found></object-not-found>\r\n-\t\t<optimistic>40XL1,40001</optimistic>\r\n-        <query></query>\r\n-\t</dictionary>\r\n-\t\r\n-\t<dictionary class=\"org.apache.openjpa.jdbc.sql.H2Dictionary\">\r\n-\t\t<lock></lock>\r\n-\t\t<referential-integrity>22003,22012,22025,23000,23001</referential-integrity>\r\n-\t\t<object-exists></object-exists>\r\n-\t\t<object-not-found></object-not-found>\r\n-\t\t<optimistic></optimistic>\r\n-        <query></query>\r\n-\t</dictionary>\r\n-\t\r\n-\t<dictionary class=\"org.apache.openjpa.jdbc.sql.HSQLDictionary\">\r\n-\t\t<lock></lock>\r\n-\t\t<referential-integrity>-9</referential-integrity>\r\n-\t\t<object-exists></object-exists>\r\n-\t\t<object-not-found></object-not-found>\r\n-\t\t<optimistic></optimistic>\r\n-        <query></query>\r\n-\t</dictionary>\r\n-\t\r\n-\t<dictionary class=\"org.apache.openjpa.jdbc.sql.InformixDictionary\">\r\n-\t\t<lock></lock>\r\n-\t\t<referential-integrity>-239,-268,-692,-11030</referential-integrity>\r\n-\t\t<object-exists></object-exists>\r\n-\t\t<object-not-found></object-not-found>\r\n-\t\t<optimistic></optimistic>\r\n-        <query></query>\r\n-\t</dictionary>\r\n-\t\r\n-\t<dictionary class=\"org.apache.openjpa.jdbc.sql.InterbaseDictionary\">\r\n-\t\t<lock></lock>\r\n-\t\t<referential-integrity></referential-integrity>\r\n-\t\t<object-exists></object-exists>\r\n-\t\t<object-not-found></object-not-found>\r\n-\t\t<optimistic></optimistic>\r\n-        <query></query>\r\n-\t</dictionary>\r\n-\t\r\n-\t<dictionary class=\"org.apache.openjpa.jdbc.sql.FirebirdDictionary\">\r\n-\t\t<lock></lock>\r\n-\t\t<referential-integrity></referential-integrity>\r\n-\t\t<object-exists></object-exists>\r\n-\t\t<object-not-found></object-not-found>\r\n-\t\t<optimistic></optimistic>\r\n-        <query></query>\r\n-\t</dictionary>\r\n-\t\r\n-\t<dictionary class=\"org.apache.openjpa.jdbc.sql.JDataStoreDictionary\">\r\n-\t\t<lock></lock>\r\n-\t\t<referential-integrity></referential-integrity>\r\n-\t\t<object-exists></object-exists>\r\n-\t\t<object-not-found></object-not-found>\r\n-\t\t<optimistic></optimistic>\r\n-        <query></query>\r\n-\t</dictionary>\r\n-\t\r\n-\t<dictionary class=\"org.apache.openjpa.jdbc.sql.MySQLDictionary\">\r\n-\t\t<lock>1213</lock>\r\n-\t\t<referential-integrity>630,839,840,893,1062,1169,1215,1216,1217,1451,1452,1557</referential-integrity>\r\n-\t\t<object-exists>23000</object-exists>\r\n-\t\t<object-not-found></object-not-found>\r\n-\t\t<optimistic>41000,1205,1213</optimistic>\r\n-        <query></query>\r\n-\t</dictionary>\r\n-\t\r\n-\t<dictionary class=\"org.apache.openjpa.jdbc.sql.OracleDictionary\">\r\n-\t\t<lock></lock>\r\n-\t\t<referential-integrity>1,1400,1722,2291,2292</referential-integrity>\r\n-\t\t<object-exists></object-exists>\r\n-\t\t<object-not-found></object-not-found>\r\n-\t\t<optimistic></optimistic>\r\n-        <query></query>\r\n-\t</dictionary>\r\n-\t\r\n-\t<dictionary class=\"org.apache.openjpa.jdbc.sql.PointbaseDictionary\">\r\n-\t\t<lock></lock>\r\n-\t\t<referential-integrity>22001,22005,23502,23503,23513,X0Y32</referential-integrity>\r\n-\t\t<object-exists></object-exists>\r\n-\t\t<object-not-found></object-not-found>\r\n-\t\t<optimistic></optimistic>\r\n-        <query></query>\r\n-\t</dictionary>\r\n-\t\r\n-\t<dictionary class=\"org.apache.openjpa.jdbc.sql.PostgresDictionary\">\r\n-\t\t<lock>55P03,40P01</lock>\r\n-\t\t<referential-integrity>23000,23502,23503,23505,23514</referential-integrity>\r\n-\t\t<object-exists></object-exists>\r\n-\t\t<object-not-found></object-not-found>\r\n-\t\t<optimistic>55P03</optimistic>\r\n-        <query></query>\r\n-\t</dictionary>\r\n-\t\r\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+ \n+ http://www.apache.org/licenses/LICENSE-2.0\n+ \n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.   \n+-->\n+<!-- ======================================================================= -->\n+<!-- Lists SQL Error State codes for specific type of faults per database    -->\n+<!-- dictionary.                                                             -->\n+<!-- SQL Exceptions raised by JDBC should carry standard error state code    -->\n+<!-- but they hardly do. Hence, the error state codes for specific type of   -->\n+<!-- database error can be listed here. These codes help to narrow down the  -->\n+<!-- cause of failure at JDBC layer and bubbles up as more intelligible      -->\n+<!-- exception to the application.                                           -->\n+<!-- ======================================================================= -->\n+<sql-state-codes>\n+\n+\t<dictionary class=\"org.apache.openjpa.jdbc.sql.DB2Dictionary\">\n+\t\t<lock>40001,57033</lock>\n+\t\t<referential-integrity>23502,42912,23001,23504,23511,23512,23513,23515,23520</referential-integrity>\n+\t\t<object-exists>23505</object-exists>\n+\t\t<object-not-found></object-not-found>\n+\t\t<optimistic></optimistic>\n+        <query>57014</query>\n+\t</dictionary>\n+\t\n+\t<dictionary class=\"org.apache.openjpa.jdbc.sql.DerbyDictionary\">\n+\t\t<lock>40001,40XL1,40XL2</lock>\n+\t\t<referential-integrity>22001,22005,23502,23503,23513,X0Y32</referential-integrity>\n+\t\t<object-exists>23505</object-exists>\n+\t\t<object-not-found></object-not-found>\n+\t\t<optimistic></optimistic>\n+        <query>XCL52</query>\n+\t</dictionary>\n+\t\n+\t<dictionary class=\"org.apache.openjpa.jdbc.sql.SQLServerDictionary\">\n+\t\t<lock>1205</lock>\n+\t\t<referential-integrity>544,2601,2627,8114,8115</referential-integrity>\n+\t\t<object-exists></object-exists>\n+\t\t<object-not-found></object-not-found>\n+\t\t<optimistic>1205</optimistic>\n+        <query></query>\n+\t</dictionary>\n+\t\n+\t<dictionary class=\"org.apache.openjpa.jdbc.sql.SybaseDictionary\">\n+\t\t<lock>1205</lock>\n+\t\t<referential-integrity>423,511,515,530,547,2601,2615,2714</referential-integrity>\n+\t\t<object-exists></object-exists>\n+\t\t<object-not-found></object-not-found>\n+\t\t<optimistic>1205</optimistic>\n+        <query></query>\n+\t</dictionary>\n+\t\n+\t<dictionary class=\"org.apache.openjpa.jdbc.sql.AccessDictionary\">\n+\t\t<lock>40001</lock>\n+\t\t<referential-integrity>22001,22005,23502,23503,23513,X0Y32</referential-integrity>\n+\t\t<object-exists>23505,456c</object-exists>\n+\t\t<object-not-found></object-not-found>\n+\t\t<optimistic>40XL1,40001</optimistic>\n+        <query></query>\n+\t</dictionary>\n+\t\n+\t<dictionary class=\"org.apache.openjpa.jdbc.sql.CacheDictionary\">\n+\t\t<lock>40001</lock>\n+\t\t<referential-integrity>22001,22005,23502,23503,23513,X0Y32</referential-integrity>\n+\t\t<object-exists>23505,456c</object-exists>\n+\t\t<object-not-found></object-not-found>\n+\t\t<optimistic>40XL1,40001</optimistic>\n+        <query></query>\n+\t</dictionary>\n+\t\n+\t<dictionary class=\"org.apache.openjpa.jdbc.sql.EmpressDictionary\">\n+\t\t<lock>40001</lock>\n+\t\t<referential-integrity>22001,22005,23502,23503,23513,X0Y32</referential-integrity>\n+\t\t<object-exists>23505,456c</object-exists>\n+\t\t<object-not-found></object-not-found>\n+\t\t<optimistic>40XL1,40001</optimistic>\n+        <query></query>\n+\t</dictionary>\n+\t\n+\t<dictionary class=\"org.apache.openjpa.jdbc.sql.FoxProDictionary\">\n+\t\t<lock>40001</lock>\n+\t\t<referential-integrity>22001,22005,23502,23503,23513,X0Y32</referential-integrity>\n+\t\t<object-exists>23505,456c</object-exists>\n+\t\t<object-not-found></object-not-found>\n+\t\t<optimistic>40XL1,40001</optimistic>\n+        <query></query>\n+\t</dictionary>\n+\t\n+\t<dictionary class=\"org.apache.openjpa.jdbc.sql.H2Dictionary\">\n+\t\t<lock></lock>\n+\t\t<referential-integrity>22003,22012,22025,23000,23001</referential-integrity>\n+\t\t<object-exists></object-exists>\n+\t\t<object-not-found></object-not-found>\n+\t\t<optimistic></optimistic>\n+        <query></query>\n+\t</dictionary>\n+\t\n+\t<dictionary class=\"org.apache.openjpa.jdbc.sql.HSQLDictionary\">\n+\t\t<lock></lock>\n+\t\t<referential-integrity>-9</referential-integrity>\n+\t\t<object-exists></object-exists>\n+\t\t<object-not-found></object-not-found>\n+\t\t<optimistic></optimistic>\n+        <query></query>\n+\t</dictionary>\n+\t\n+\t<dictionary class=\"org.apache.openjpa.jdbc.sql.InformixDictionary\">\n+\t\t<lock></lock>\n+\t\t<referential-integrity>-239,-268,-692,-11030</referential-integrity>\n+\t\t<object-exists></object-exists>\n+\t\t<object-not-found></object-not-found>\n+\t\t<optimistic></optimistic>\n+        <query></query>\n+\t</dictionary>\n+\t\n+\t<dictionary class=\"org.apache.openjpa.jdbc.sql.InterbaseDictionary\">\n+\t\t<lock></lock>\n+\t\t<referential-integrity></referential-integrity>\n+\t\t<object-exists></object-exists>\n+\t\t<object-not-found></object-not-found>\n+\t\t<optimistic></optimistic>\n+        <query></query>\n+\t</dictionary>\n+\t\n+\t<dictionary class=\"org.apache.openjpa.jdbc.sql.FirebirdDictionary\">\n+\t\t<lock></lock>\n+\t\t<referential-integrity></referential-integrity>\n+\t\t<object-exists></object-exists>\n+\t\t<object-not-found></object-not-found>\n+\t\t<optimistic></optimistic>\n+        <query></query>\n+\t</dictionary>\n+\t\n+\t<dictionary class=\"org.apache.openjpa.jdbc.sql.JDataStoreDictionary\">\n+\t\t<lock></lock>\n+\t\t<referential-integrity></referential-integrity>\n+\t\t<object-exists></object-exists>\n+\t\t<object-not-found></object-not-found>\n+\t\t<optimistic></optimistic>\n+        <query></query>\n+\t</dictionary>\n+\t\n+\t<dictionary class=\"org.apache.openjpa.jdbc.sql.MySQLDictionary\">\n+\t\t<lock>1213</lock>\n+\t\t<referential-integrity>630,839,840,893,1062,1169,1215,1216,1217,1451,1452,1557</referential-integrity>\n+\t\t<object-exists>23000</object-exists>\n+\t\t<object-not-found></object-not-found>\n+\t\t<optimistic>41000,1205,1213</optimistic>\n+        <query></query>\n+\t</dictionary>\n+\t\n+\t<dictionary class=\"org.apache.openjpa.jdbc.sql.OracleDictionary\">\n+\t\t<lock></lock>\n+\t\t<referential-integrity>1,1400,1722,2291,2292</referential-integrity>\n+\t\t<object-exists></object-exists>\n+\t\t<object-not-found></object-not-found>\n+\t\t<optimistic></optimistic>\n+        <query></query>\n+\t</dictionary>\n+\t\n+\t<dictionary class=\"org.apache.openjpa.jdbc.sql.PointbaseDictionary\">\n+\t\t<lock></lock>\n+\t\t<referential-integrity>22001,22005,23502,23503,23513,X0Y32</referential-integrity>\n+\t\t<object-exists></object-exists>\n+\t\t<object-not-found></object-not-found>\n+\t\t<optimistic></optimistic>\n+        <query></query>\n+\t</dictionary>\n+\t\n+\t<dictionary class=\"org.apache.openjpa.jdbc.sql.PostgresDictionary\">\n+\t\t<lock>55P03,40P01</lock>\n+\t\t<referential-integrity>23000,23502,23503,23505,23514</referential-integrity>\n+\t\t<object-exists></object-exists>\n+\t\t<object-not-found></object-not-found>\n+\t\t<optimistic>55P03</optimistic>\n+        <query></query>\n+\t</dictionary>\n+\t\n </sql-state-codes>\n\\ No newline at end of file"},{"sha":"fbab1f5518f9c50539d9dc3c30014d4221c74a36","filename":"openjpa-persistence-jdbc/src/test/resources/META-INF/listener-orm.xml","status":"modified","additions":39,"deletions":39,"changes":78,"blob_url":"https://github.com/apache/openjpa/blob/b546423063fe7c1889f7764393102f423a699483/openjpa-persistence-jdbc/src/test/resources/META-INF/listener-orm.xml","raw_url":"https://github.com/apache/openjpa/raw/b546423063fe7c1889f7764393102f423a699483/openjpa-persistence-jdbc/src/test/resources/META-INF/listener-orm.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/META-INF/listener-orm.xml?ref=b546423063fe7c1889f7764393102f423a699483","patch":"@@ -1,40 +1,40 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n-<!--\r\n- Licensed to the Apache Software Foundation (ASF) under one\r\n- or more contributor license agreements.  See the NOTICE file\r\n- distributed with this work for additional information\r\n- regarding copyright ownership.  The ASF licenses this file\r\n- to you under the Apache License, Version 2.0 (the\r\n- \"License\"); you may not use this file except in compliance\r\n- with the License.  You may obtain a copy of the License at\r\n-\r\n- http://www.apache.org/licenses/LICENSE-2.0\r\n-\r\n- Unless required by applicable law or agreed to in writing,\r\n- software distributed under the License is distributed on an\r\n- \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- KIND, either express or implied.  See the License for the\r\n- specific language governing permissions and limitations\r\n- under the License.\r\n--->\r\n-<entity-mappings xmlns=\"http://java.sun.com/xml/ns/persistence/orm\"\r\n-    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n-    xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence/orm orm_1_0.xsd\"\r\n-    version=\"1.0\">\r\n-    <persistence-unit-metadata>\r\n-        <persistence-unit-defaults>\r\n-            <entity-listeners>\r\n-                <entity-listener class=\r\n-                \t\"org.apache.openjpa.persistence.callbacks.ListenerImpl\">\r\n-                </entity-listener>\r\n-            </entity-listeners>\r\n-        </persistence-unit-defaults>\r\n-    </persistence-unit-metadata>\r\n-    <package>org.apache.openjpa.persistence.callbacks</package>\r\n-    <entity class=\"EntityListenerEntity\">\r\n-        <exclude-default-listeners/>\r\n-    </entity>\r\n-    <entity class=\"Message\">\r\n-        <exclude-default-listeners/>\r\n-    </entity>\r\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+\n+ http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.\n+-->\n+<entity-mappings xmlns=\"http://java.sun.com/xml/ns/persistence/orm\"\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence/orm orm_1_0.xsd\"\n+    version=\"1.0\">\n+    <persistence-unit-metadata>\n+        <persistence-unit-defaults>\n+            <entity-listeners>\n+                <entity-listener class=\n+                \t\"org.apache.openjpa.persistence.callbacks.ListenerImpl\">\n+                </entity-listener>\n+            </entity-listeners>\n+        </persistence-unit-defaults>\n+    </persistence-unit-metadata>\n+    <package>org.apache.openjpa.persistence.callbacks</package>\n+    <entity class=\"EntityListenerEntity\">\n+        <exclude-default-listeners/>\n+    </entity>\n+    <entity class=\"Message\">\n+        <exclude-default-listeners/>\n+    </entity>\n </entity-mappings>\n\\ No newline at end of file"},{"sha":"936eff6df1e3c9ceb102e09686d36d7115e63ed6","filename":"openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","status":"modified","additions":37,"deletions":37,"changes":74,"blob_url":"https://github.com/apache/openjpa/blob/b546423063fe7c1889f7764393102f423a699483/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/b546423063fe7c1889f7764393102f423a699483/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml?ref=b546423063fe7c1889f7764393102f423a699483","patch":"@@ -39,7 +39,7 @@\n             class.\n         </description>\n         <mapping-file>org/apache/openjpa/persistence/xml/orm.xml</mapping-file>\n-        <mapping-file>org/apache/openjpa/persistence/embed/embed-orm.xml</mapping-file>\r\n+        <mapping-file>org/apache/openjpa/persistence/embed/embed-orm.xml</mapping-file>\n         <properties>\n             <property name=\"openjpa.jdbc.SynchronizeMappings\"\n                 value=\"buildSchema(ForeignKeys=true)\"/>\n@@ -85,45 +85,45 @@\n         <mapping-file>META-INF/listener-orm.xml</mapping-file>\n         <class>org.apache.openjpa.persistence.callbacks.EntityListenerEntity</class>\n         <class>org.apache.openjpa.persistence.callbacks.GlobalListenerEntity</class>\n-        <class>org.apache.openjpa.persistence.callbacks.Message</class>\r\n+        <class>org.apache.openjpa.persistence.callbacks.Message</class>\n         <properties>\n             <property name=\"openjpa.jdbc.SynchronizeMappings\"\n                   value=\"buildSchema(ForeignKeys=true)\"/>\n         </properties>\n-    </persistence-unit>\r\n-    \r\n-    <persistence-unit name=\"test-unique-constraint\">\r\n-        <mapping-file>org/apache/openjpa/persistence/jdbc/unique/orm.xml</mapping-file>\r\n-        <class>org.apache.openjpa.persistence.jdbc.unique.UniqueA</class>\r\n-        <class>org.apache.openjpa.persistence.jdbc.unique.UniqueB</class>\r\n-    </persistence-unit>\r\n-\r\n-    <persistence-unit name=\"test-metadata-complete\">\r\n-        <mapping-file>org/apache/openjpa/persistence/annotations/xml/orm.xml</mapping-file>\r\n-    </persistence-unit>\r\n+    </persistence-unit>\n+    \n+    <persistence-unit name=\"test-unique-constraint\">\n+        <mapping-file>org/apache/openjpa/persistence/jdbc/unique/orm.xml</mapping-file>\n+        <class>org.apache.openjpa.persistence.jdbc.unique.UniqueA</class>\n+        <class>org.apache.openjpa.persistence.jdbc.unique.UniqueB</class>\n+    </persistence-unit>\n+\n+    <persistence-unit name=\"test-metadata-complete\">\n+        <mapping-file>org/apache/openjpa/persistence/annotations/xml/orm.xml</mapping-file>\n+    </persistence-unit>\n     \n-    <persistence-unit name=\"embed-pu\">\r\n-        <mapping-file>org/apache/openjpa/persistence/embed/embed-orm.xml</mapping-file>\r\n-        <class>org.apache.openjpa.persistence.embed.EntityA_Coll_StringXml</class>\r\n-        <class>org.apache.openjpa.persistence.embed.EntityA_Coll_Embed_EmbedXml</class>\r\n-        <class>org.apache.openjpa.persistence.embed.Embed_EmbedXml</class>\r\n-        <class>org.apache.openjpa.persistence.embed.EmbedXml</class>\r\n-        <class>org.apache.openjpa.persistence.embed.CustomerXml</class>\r\n-        <class>org.apache.openjpa.persistence.embed.OrderXml</class>\r\n-        <properties>\r\n-            <property name=\"openjpa.jdbc.SynchronizeMappings\"\r\n-                  value=\"buildSchema(ForeignKeys=true)\"/>\r\n-        </properties>\r\n-    </persistence-unit>\r\n-\r\n-    <persistence-unit name=\"native-seq-pu\">\r\n-        <mapping-file>org/apache/openjpa/persistence/sequence/sequence-orm.xml</mapping-file>\r\n-        <class>org.apache.openjpa.persistence.jdbc.annotations.NativeSequenceEntity</class>\r\n-        <class>org.apache.openjpa.persistence.jdbc.annotations.NativeORMSequenceEntity</class>\r\n-        <properties>\r\n-            <property name=\"openjpa.jdbc.SynchronizeMappings\"\r\n-                  value=\"buildSchema\"/>\r\n-        </properties>\r\n-    </persistence-unit>\r\n-\r\n+    <persistence-unit name=\"embed-pu\">\n+        <mapping-file>org/apache/openjpa/persistence/embed/embed-orm.xml</mapping-file>\n+        <class>org.apache.openjpa.persistence.embed.EntityA_Coll_StringXml</class>\n+        <class>org.apache.openjpa.persistence.embed.EntityA_Coll_Embed_EmbedXml</class>\n+        <class>org.apache.openjpa.persistence.embed.Embed_EmbedXml</class>\n+        <class>org.apache.openjpa.persistence.embed.EmbedXml</class>\n+        <class>org.apache.openjpa.persistence.embed.CustomerXml</class>\n+        <class>org.apache.openjpa.persistence.embed.OrderXml</class>\n+        <properties>\n+            <property name=\"openjpa.jdbc.SynchronizeMappings\"\n+                  value=\"buildSchema(ForeignKeys=true)\"/>\n+        </properties>\n+    </persistence-unit>\n+\n+    <persistence-unit name=\"native-seq-pu\">\n+        <mapping-file>org/apache/openjpa/persistence/sequence/sequence-orm.xml</mapping-file>\n+        <class>org.apache.openjpa.persistence.jdbc.annotations.NativeSequenceEntity</class>\n+        <class>org.apache.openjpa.persistence.jdbc.annotations.NativeORMSequenceEntity</class>\n+        <properties>\n+            <property name=\"openjpa.jdbc.SynchronizeMappings\"\n+                  value=\"buildSchema\"/>\n+        </properties>\n+    </persistence-unit>\n+\n </persistence>"},{"sha":"803e9f2a3e66d91a01f067c8c48004267a0361b4","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/lib/conf/META-INF/persistence-config.xml","status":"modified","additions":43,"deletions":43,"changes":86,"blob_url":"https://github.com/apache/openjpa/blob/b546423063fe7c1889f7764393102f423a699483/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/lib/conf/META-INF/persistence-config.xml","raw_url":"https://github.com/apache/openjpa/raw/b546423063fe7c1889f7764393102f423a699483/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/lib/conf/META-INF/persistence-config.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/lib/conf/META-INF/persistence-config.xml?ref=b546423063fe7c1889f7764393102f423a699483","patch":"@@ -21,47 +21,47 @@\n     xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n     version=\"1.0\">\n \n-    <!-- =================================================================== --> \r\n-    <!-- Following configurations are used for testing old and new style     -->\r\n-    <!-- configuration properties in javax.* and openjpa.* namespace.        -->\r\n-    <!--                                                                     -->\r\n-    <!-- @see org.apache.openjpa.lib.conf.TestEquivalentConfig               -->\r\n-    <!-- =================================================================== --> \r\n-    \r\n-    <persistence-unit name=\"old-style\">\r\n-    \t<properties>\r\n-            <property name=\"openjpa.ConnectionDriverName\" value=\"org.apache.derby.jdbc.EmbeddedDriver\"/>\r\n-            <property name=\"openjpa.ConnectionURL\"        value=\"jdbc:derby:target/database/openjpa-test-database;create=true\"/>\r\n-    \t</properties>\r\n-    </persistence-unit>\r\n-    \r\n-    <persistence-unit name=\"new-style\">\r\n-    \t<properties>\r\n-            <property name=\"javax.persistence.jdbc.driver\" value=\"org.apache.derby.jdbc.EmbeddedDriver\"/>\r\n-            <property name=\"javax.persistence.jdbc.url\"    value=\"jdbc:derby:target/database/openjpa-test-database;create=true\"/>\r\n-    \t</properties>\r\n-    </persistence-unit>\r\n-    \r\n-    <persistence-unit name=\"mixed-style\">\r\n-    \t<properties>\r\n-            <property name=\"javax.persistence.jdbc.driver\" value=\"org.apache.derby.jdbc.EmbeddedDriver\"/>\r\n-            <property name=\"openjpa.ConnectionURL\"    value=\"jdbc:derby:target/database/openjpa-test-database;create=true\"/>\r\n-    \t</properties>\r\n-    </persistence-unit>\r\n-\t\r\n-    <persistence-unit name=\"conflict-style\">\r\n-    \t<properties>\r\n-            <property name=\"javax.persistence.jdbc.driver\" value=\"org.apache.derby.jdbc.EmbeddedDriver\"/>\r\n-            <property name=\"openjpa.ConnectionDriverName\" value=\"org.apache.derby.jdbc.EmbeddedDriver\"/>\r\n-            <property name=\"openjpa.ConnectionURL\"    value=\"jdbc:derby:target/database/openjpa-test-database;create=true\"/>\r\n-    \t</properties>\r\n-    </persistence-unit>\r\n-\t\r\n-    <persistence-unit name=\"system-configured\">\r\n-    </persistence-unit>\r\n-    \r\n-    <persistence-unit name=\"runtime-configured\">\r\n-    </persistence-unit>\r\n-    \r\n-\r\n+    <!-- =================================================================== --> \n+    <!-- Following configurations are used for testing old and new style     -->\n+    <!-- configuration properties in javax.* and openjpa.* namespace.        -->\n+    <!--                                                                     -->\n+    <!-- @see org.apache.openjpa.lib.conf.TestEquivalentConfig               -->\n+    <!-- =================================================================== --> \n+    \n+    <persistence-unit name=\"old-style\">\n+    \t<properties>\n+            <property name=\"openjpa.ConnectionDriverName\" value=\"org.apache.derby.jdbc.EmbeddedDriver\"/>\n+            <property name=\"openjpa.ConnectionURL\"        value=\"jdbc:derby:target/database/openjpa-test-database;create=true\"/>\n+    \t</properties>\n+    </persistence-unit>\n+    \n+    <persistence-unit name=\"new-style\">\n+    \t<properties>\n+            <property name=\"javax.persistence.jdbc.driver\" value=\"org.apache.derby.jdbc.EmbeddedDriver\"/>\n+            <property name=\"javax.persistence.jdbc.url\"    value=\"jdbc:derby:target/database/openjpa-test-database;create=true\"/>\n+    \t</properties>\n+    </persistence-unit>\n+    \n+    <persistence-unit name=\"mixed-style\">\n+    \t<properties>\n+            <property name=\"javax.persistence.jdbc.driver\" value=\"org.apache.derby.jdbc.EmbeddedDriver\"/>\n+            <property name=\"openjpa.ConnectionURL\"    value=\"jdbc:derby:target/database/openjpa-test-database;create=true\"/>\n+    \t</properties>\n+    </persistence-unit>\n+\t\n+    <persistence-unit name=\"conflict-style\">\n+    \t<properties>\n+            <property name=\"javax.persistence.jdbc.driver\" value=\"org.apache.derby.jdbc.EmbeddedDriver\"/>\n+            <property name=\"openjpa.ConnectionDriverName\" value=\"org.apache.derby.jdbc.EmbeddedDriver\"/>\n+            <property name=\"openjpa.ConnectionURL\"    value=\"jdbc:derby:target/database/openjpa-test-database;create=true\"/>\n+    \t</properties>\n+    </persistence-unit>\n+\t\n+    <persistence-unit name=\"system-configured\">\n+    </persistence-unit>\n+    \n+    <persistence-unit name=\"runtime-configured\">\n+    </persistence-unit>\n+    \n+\n </persistence>"},{"sha":"037365e080433dc77e5d9882c59ce3ae06113c6c","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/lib/conf/product-derivations-load.xml","status":"modified","additions":26,"deletions":26,"changes":52,"blob_url":"https://github.com/apache/openjpa/blob/b546423063fe7c1889f7764393102f423a699483/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/lib/conf/product-derivations-load.xml","raw_url":"https://github.com/apache/openjpa/raw/b546423063fe7c1889f7764393102f423a699483/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/lib/conf/product-derivations-load.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/lib/conf/product-derivations-load.xml?ref=b546423063fe7c1889f7764393102f423a699483","patch":"@@ -1,27 +1,27 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n-<!--\r\n- Licensed to the Apache Software Foundation (ASF) under one\r\n- or more contributor license agreements.  See the NOTICE file\r\n- distributed with this work for additional information\r\n- regarding copyright ownership.  The ASF licenses this file\r\n- to you under the Apache License, Version 2.0 (the\r\n- \"License\"); you may not use this file except in compliance\r\n- with the License.  You may obtain a copy of the License at\r\n-\r\n- http://www.apache.org/licenses/LICENSE-2.0\r\n-\r\n- Unless required by applicable law or agreed to in writing,\r\n- software distributed under the License is distributed on an\r\n- \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- KIND, either express or implied.  See the License for the\r\n- specific language governing permissions and limitations\r\n- under the License.\r\n--->\r\n-<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\"\r\n-             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n-             xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence\r\n-    http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd\"\r\n-             version=\"1.0\">\r\n-\r\n-    <persistence-unit name=\"foo\"/>\r\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+\n+ http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.\n+-->\n+<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\"\n+             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+             xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence\n+    http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd\"\n+             version=\"1.0\">\n+\n+    <persistence-unit name=\"foo\"/>\n </persistence>\n\\ No newline at end of file"},{"sha":"a79fc1f45a0bc6ce8d74032a1100aaead8969dcb","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/META-INF/orm.xml","status":"modified","additions":160,"deletions":160,"changes":320,"blob_url":"https://github.com/apache/openjpa/blob/b546423063fe7c1889f7764393102f423a699483/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/META-INF/orm.xml","raw_url":"https://github.com/apache/openjpa/raw/b546423063fe7c1889f7764393102f423a699483/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/META-INF/orm.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/META-INF/orm.xml?ref=b546423063fe7c1889f7764393102f423a699483","patch":"@@ -1,160 +1,160 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n-<!--\r\n- Licensed to the Apache Software Foundation (ASF) under one\r\n- or more contributor license agreements.  See the NOTICE file\r\n- distributed with this work for additional information\r\n- regarding copyright ownership.  The ASF licenses this file\r\n- to you under the Apache License, Version 2.0 (the\r\n- \"License\"); you may not use this file except in compliance\r\n- with the License.  You may obtain a copy of the License at\r\n- \r\n- http://www.apache.org/licenses/LICENSE-2.0\r\n- \r\n- Unless required by applicable law or agreed to in writing,\r\n- software distributed under the License is distributed on an\r\n- \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- KIND, either express or implied.  See the License for the\r\n- specific language governing permissions and limitations\r\n- under the License.   \r\n--->\r\n-<entity-mappings xmlns=\"http://java.sun.com/xml/ns/persistence/orm\" \r\n-xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \r\n-xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence/orm\r\n-                    http://java.sun.com/xml/ns/persistence/orm_1_0.xsd\" \r\n-version=\"1.0\">\r\n-\r\n-<persistence-unit-metadata>\r\n-   <persistence-unit-defaults>\r\n-       <entity-listeners>\r\n-            <entity-listener class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.DefaultCallbackListener\">\r\n-                 <pre-persist method-name=\"prePersist\" />\r\n-                 <post-persist method-name=\"postPersist\" />\r\n-                 <pre-remove method-name=\"preRemove\" />\r\n-                 <post-remove method-name=\"postRemove\" />\r\n-                 <pre-update method-name=\"preUpdate\" />\r\n-                 <post-update method-name=\"postUpdate\" />\r\n-                 <post-load method-name=\"postLoad\" />\r\n-            </entity-listener>\r\n-        </entity-listeners> \r\n-   </persistence-unit-defaults>\r\n-</persistence-unit-metadata>\r\n-\r\n-<!-- <entity class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.Schedule\" metadata-complete=\"true\">\r\n-\t\t<description>\r\n-\t\t\tSchedule class represents the superclass of this app...\r\n-\t\t</description>\r\n-\t\t<inheritance strategy=\"TABLE_PER_CLASS\" />\r\n-\r\n-\t     <entity-listeners>\r\n-\t\t\t<entity-listener class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.DateValidator\">\r\n-\t\t\t\t<pre-persist method-name=\"prePersist\" />\r\n-\t\t\t\t<post-persist method-name=\"postPersist\" />\r\n-\t\t\t</entity-listener>\r\n-\r\n-\t\t\t<entity-listener class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.StringValidator\">\r\n-\t\t\t\t<pre-persist method-name=\"prePersist\" />\r\n-\t\t\t\t<post-persist method-name=\"postPersist\" />\r\n-\t\t\t</entity-listener>\r\n-\t\t</entity-listeners> \r\n-\r\n-\t\t<attributes>\r\n-\t\t\t<id name=\"id\">\r\n-\t\t\t\t<generated-value strategy=\"AUTO\" />\r\n-\t\t\t</id>\r\n-\t\t\t<basic name=\"dob\">\r\n-\t\t\t\t<temporal>DATE</temporal>\r\n-\t\t\t</basic>\r\n-\t\t\t<basic name=\"startDate\">\r\n-\t\t\t\t<temporal>TIME</temporal>\r\n-\t\t\t</basic>\r\n-\t\t\t<basic name=\"endDate\">\r\n-\t\t\t\t<temporal>TIMESTAMP</temporal>\r\n-\t\t\t</basic>\r\n-\t\t\t<basic name=\"name\">\r\n-\t\t\t</basic>\r\n-\t\t</attributes>\r\n-\t</entity>\r\n-\r\n-\t<entity class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.FlightSchedule\" metadata-complete=\"true\">\r\n-\t\t<description>\r\n-\t\t\tFlightSchedule, subclass of schedule specifies the real life flight schedule \r\n-\t\t</description>\r\n-\r\n-\t\t<table name=\"Flight_Sched\">\r\n-\t\t\t<unique-constraint>\r\n-\t\t\t\t<column-name>planeName</column-name>\r\n-\t\t\t</unique-constraint>\r\n-\t\t</table>\r\n-\r\n-\t\t<attributes>\r\n-\t\t\t<id name=\"FlightNum\">\r\n-\t\t\t\t<generated-value strategy=\"AUTO\" />\r\n-\t\t\t</id>\r\n-\t\t\t<basic name=\"planeName\">\r\n-\t\t\t\t<column name=\"flight_name\"/>\r\n-\t\t\t</basic>\r\n-\t\t</attributes>\r\n-\t</entity>\r\n-\r\n-\t <entity class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.Employee\" metadata-complete=\"true\">\r\n-\t\t<inheritance strategy=\"JOINED\" />\r\n-\r\n-\t\t<entity-listeners>\r\n-\t\t\t<entity-listener class=\"annotations.common.apps.NameValidator\">\r\n-\t\t\t\t<pre-persist method-name=\"validateName\" />\r\n-\t\t\t\t<pre-remove method-name=\"validateNothing1\" />\r\n-\t\t\t\t<post-remove method-name=\"validateNothing\" />\r\n-\t\t\t\t<post-update method-name=\"testpost\" />\r\n-\t\t\t</entity-listener>\r\n-\r\n-\t\t\t<entity-listener class=\"annotations.common.apps.LongNameValidator\">\r\n-\t\t\t\t<pre-persist method-name=\"validateName\" />\r\n-\t\t\t\t<post-update method-name=\"testpost\" />\r\n-\t\t\t</entity-listener>\r\n-\t\t</entity-listeners> \r\n-\r\n-\t\t<attributes>\r\n-\t\t\t<id name=\"id\">\r\n-\t\t\t</id>\r\n-\t\t\t<basic name=\"name\">\r\n-\t\t\t</basic>\r\n-\t\t\t<transient name=\"syncTime\" />\r\n-\t\t</attributes>\r\n-\t</entity>\r\n-\r\n-\t<entity class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.ContractEmployee\" metadata-complete=\"true\">\r\n-\t</entity>  \r\n-\r\n-\t<entity class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.TxRollbackEntity\" metadata-complete=\"true\">\r\n-\t</entity> -->\r\n-\r\n-\r\n-\t<entity class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype.LifeCycleDDEntity\">\r\n-    <exclude-default-listeners />\r\n-    <entity-listeners>\r\n-\t\t\t<entity-listener class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype.EntityDDListener\">\r\n-\t\t\t\t<post-remove method-name=\"verifyPostRemove\" />\r\n-\t\t\t\t<post-update method-name=\"verifyPostUpdate\" />\r\n-\t\t\t</entity-listener>\r\n-\r\n-\t\t\t<entity-listener class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype.EntityDDListener2\">\r\n-\t\t\t\t<pre-update method-name=\"verifyPreUpdate\" />\r\n-\t\t\t\t<post-load method-name=\"verifyPostLoad\" /> \r\n-\t\t\t</entity-listener>\r\n-\t\t</entity-listeners>\r\n-\r\n-        <pre-persist method-name=\"verifyPrePersist\" />\r\n-        <post-persist method-name=\"verifyPostPersist\" />\r\n-        <pre-remove method-name=\"verifyPreRemove\" />\r\n-\r\n-\t\t<attributes>\r\n-\t\t\t<id name=\"id\">\r\n-\t\t\t\t<generated-value strategy=\"AUTO\" />\r\n-\t\t\t</id>\r\n-\t\t\t<basic name=\"name\">\r\n-\t\t\t</basic>\r\n-\t\t\t<basic name=\"surname\">\r\n-\t\t\t</basic>\r\n-\t\t</attributes>\r\n-\t</entity> \r\n-</entity-mappings>\r\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+ \n+ http://www.apache.org/licenses/LICENSE-2.0\n+ \n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.   \n+-->\n+<entity-mappings xmlns=\"http://java.sun.com/xml/ns/persistence/orm\" \n+xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n+xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence/orm\n+                    http://java.sun.com/xml/ns/persistence/orm_1_0.xsd\" \n+version=\"1.0\">\n+\n+<persistence-unit-metadata>\n+   <persistence-unit-defaults>\n+       <entity-listeners>\n+            <entity-listener class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.DefaultCallbackListener\">\n+                 <pre-persist method-name=\"prePersist\" />\n+                 <post-persist method-name=\"postPersist\" />\n+                 <pre-remove method-name=\"preRemove\" />\n+                 <post-remove method-name=\"postRemove\" />\n+                 <pre-update method-name=\"preUpdate\" />\n+                 <post-update method-name=\"postUpdate\" />\n+                 <post-load method-name=\"postLoad\" />\n+            </entity-listener>\n+        </entity-listeners> \n+   </persistence-unit-defaults>\n+</persistence-unit-metadata>\n+\n+<!-- <entity class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.Schedule\" metadata-complete=\"true\">\n+\t\t<description>\n+\t\t\tSchedule class represents the superclass of this app...\n+\t\t</description>\n+\t\t<inheritance strategy=\"TABLE_PER_CLASS\" />\n+\n+\t     <entity-listeners>\n+\t\t\t<entity-listener class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.DateValidator\">\n+\t\t\t\t<pre-persist method-name=\"prePersist\" />\n+\t\t\t\t<post-persist method-name=\"postPersist\" />\n+\t\t\t</entity-listener>\n+\n+\t\t\t<entity-listener class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.StringValidator\">\n+\t\t\t\t<pre-persist method-name=\"prePersist\" />\n+\t\t\t\t<post-persist method-name=\"postPersist\" />\n+\t\t\t</entity-listener>\n+\t\t</entity-listeners> \n+\n+\t\t<attributes>\n+\t\t\t<id name=\"id\">\n+\t\t\t\t<generated-value strategy=\"AUTO\" />\n+\t\t\t</id>\n+\t\t\t<basic name=\"dob\">\n+\t\t\t\t<temporal>DATE</temporal>\n+\t\t\t</basic>\n+\t\t\t<basic name=\"startDate\">\n+\t\t\t\t<temporal>TIME</temporal>\n+\t\t\t</basic>\n+\t\t\t<basic name=\"endDate\">\n+\t\t\t\t<temporal>TIMESTAMP</temporal>\n+\t\t\t</basic>\n+\t\t\t<basic name=\"name\">\n+\t\t\t</basic>\n+\t\t</attributes>\n+\t</entity>\n+\n+\t<entity class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.FlightSchedule\" metadata-complete=\"true\">\n+\t\t<description>\n+\t\t\tFlightSchedule, subclass of schedule specifies the real life flight schedule \n+\t\t</description>\n+\n+\t\t<table name=\"Flight_Sched\">\n+\t\t\t<unique-constraint>\n+\t\t\t\t<column-name>planeName</column-name>\n+\t\t\t</unique-constraint>\n+\t\t</table>\n+\n+\t\t<attributes>\n+\t\t\t<id name=\"FlightNum\">\n+\t\t\t\t<generated-value strategy=\"AUTO\" />\n+\t\t\t</id>\n+\t\t\t<basic name=\"planeName\">\n+\t\t\t\t<column name=\"flight_name\"/>\n+\t\t\t</basic>\n+\t\t</attributes>\n+\t</entity>\n+\n+\t <entity class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.Employee\" metadata-complete=\"true\">\n+\t\t<inheritance strategy=\"JOINED\" />\n+\n+\t\t<entity-listeners>\n+\t\t\t<entity-listener class=\"annotations.common.apps.NameValidator\">\n+\t\t\t\t<pre-persist method-name=\"validateName\" />\n+\t\t\t\t<pre-remove method-name=\"validateNothing1\" />\n+\t\t\t\t<post-remove method-name=\"validateNothing\" />\n+\t\t\t\t<post-update method-name=\"testpost\" />\n+\t\t\t</entity-listener>\n+\n+\t\t\t<entity-listener class=\"annotations.common.apps.LongNameValidator\">\n+\t\t\t\t<pre-persist method-name=\"validateName\" />\n+\t\t\t\t<post-update method-name=\"testpost\" />\n+\t\t\t</entity-listener>\n+\t\t</entity-listeners> \n+\n+\t\t<attributes>\n+\t\t\t<id name=\"id\">\n+\t\t\t</id>\n+\t\t\t<basic name=\"name\">\n+\t\t\t</basic>\n+\t\t\t<transient name=\"syncTime\" />\n+\t\t</attributes>\n+\t</entity>\n+\n+\t<entity class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.ContractEmployee\" metadata-complete=\"true\">\n+\t</entity>  \n+\n+\t<entity class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.TxRollbackEntity\" metadata-complete=\"true\">\n+\t</entity> -->\n+\n+\n+\t<entity class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype.LifeCycleDDEntity\">\n+    <exclude-default-listeners />\n+    <entity-listeners>\n+\t\t\t<entity-listener class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype.EntityDDListener\">\n+\t\t\t\t<post-remove method-name=\"verifyPostRemove\" />\n+\t\t\t\t<post-update method-name=\"verifyPostUpdate\" />\n+\t\t\t</entity-listener>\n+\n+\t\t\t<entity-listener class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype.EntityDDListener2\">\n+\t\t\t\t<pre-update method-name=\"verifyPreUpdate\" />\n+\t\t\t\t<post-load method-name=\"verifyPostLoad\" /> \n+\t\t\t</entity-listener>\n+\t\t</entity-listeners>\n+\n+        <pre-persist method-name=\"verifyPrePersist\" />\n+        <post-persist method-name=\"verifyPostPersist\" />\n+        <pre-remove method-name=\"verifyPreRemove\" />\n+\n+\t\t<attributes>\n+\t\t\t<id name=\"id\">\n+\t\t\t\t<generated-value strategy=\"AUTO\" />\n+\t\t\t</id>\n+\t\t\t<basic name=\"name\">\n+\t\t\t</basic>\n+\t\t\t<basic name=\"surname\">\n+\t\t\t</basic>\n+\t\t</attributes>\n+\t</entity> \n+</entity-mappings>"},{"sha":"b552a7e9de728aedd18c6253368b0a7b3c720e16","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/META-INF/persistence.xml","status":"modified","additions":54,"deletions":54,"changes":108,"blob_url":"https://github.com/apache/openjpa/blob/b546423063fe7c1889f7764393102f423a699483/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/b546423063fe7c1889f7764393102f423a699483/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/META-INF/persistence.xml?ref=b546423063fe7c1889f7764393102f423a699483","patch":"@@ -1,54 +1,54 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n-<!--\r\n- Licensed to the Apache Software Foundation (ASF) under one\r\n- or more contributor license agreements.  See the NOTICE file\r\n- distributed with this work for additional information\r\n- regarding copyright ownership.  The ASF licenses this file\r\n- to you under the Apache License, Version 2.0 (the\r\n- \"License\"); you may not use this file except in compliance\r\n- with the License.  You may obtain a copy of the License at\r\n- \r\n- http://www.apache.org/licenses/LICENSE-2.0\r\n- \r\n- Unless required by applicable law or agreed to in writing,\r\n- software distributed under the License is distributed on an\r\n- \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- KIND, either express or implied.  See the License for the\r\n- specific language governing permissions and limitations\r\n- under the License.   \r\n--->\r\n-<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\" version=\"1.0\">\r\n-\t<persistence-unit name=\"TestConv\" transaction-type=\"RESOURCE_LOCAL\">\r\n-\t\t<provider>org.apache.openjpa.persistence.PersistenceProviderImpl</provider>\r\n-\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.EmbedOwner</class>\r\n-\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.AnnoTest1</class>\r\n-\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.AnnoTest2</class>\r\n-\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.AnnoTest3</class>\r\n-\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.ContractEmployee</class>\r\n-\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.Employee</class>\r\n-\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.Entity1</class>\r\n-\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.Entity2</class>\r\n-\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.Flat1</class>\r\n-\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.Flat2</class>\r\n-\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.Generator</class>\r\n-\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.TablePerClass1</class>\r\n-\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.TablePerClass2</class>\r\n-\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.OrderByEntity</class>\r\n-\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.EmbeddableSuperSub</class>\r\n-\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.PropertyAccess1</class>\r\n-\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.EmbeddedIdEntity</class>\r\n-\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.EmbedValue</class>\r\n-\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.EmbedValue2</class>\r\n-\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.Schedule</class>\r\n-\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.FlightSchedule</class>\r\n-\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.EmbeddedIdClass</class>\r\n-\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.EmbeddableSuper</class>\r\n-\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.TxRollbackEntity</class>\r\n-\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.Party</class>\r\n-\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.Store</class>\r\n-\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.Site</class>\r\n-\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.Party1</class>\r\n-\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.Store1</class>\r\n-\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.Site1</class>\r\n-\t</persistence-unit>\r\n-</persistence>\r\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+ \n+ http://www.apache.org/licenses/LICENSE-2.0\n+ \n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.   \n+-->\n+<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\" version=\"1.0\">\n+\t<persistence-unit name=\"TestConv\" transaction-type=\"RESOURCE_LOCAL\">\n+\t\t<provider>org.apache.openjpa.persistence.PersistenceProviderImpl</provider>\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.EmbedOwner</class>\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.AnnoTest1</class>\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.AnnoTest2</class>\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.AnnoTest3</class>\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.ContractEmployee</class>\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.Employee</class>\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.Entity1</class>\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.Entity2</class>\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.Flat1</class>\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.Flat2</class>\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.Generator</class>\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.TablePerClass1</class>\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.TablePerClass2</class>\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.OrderByEntity</class>\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.EmbeddableSuperSub</class>\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.PropertyAccess1</class>\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.EmbeddedIdEntity</class>\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.EmbedValue</class>\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.EmbedValue2</class>\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.Schedule</class>\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.FlightSchedule</class>\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.EmbeddedIdClass</class>\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.EmbeddableSuper</class>\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.TxRollbackEntity</class>\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.Party</class>\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.Store</class>\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.Site</class>\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.Party1</class>\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.Store1</class>\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.Site1</class>\n+\t</persistence-unit>\n+</persistence>"},{"sha":"14a43af3aab47afa31d6001f2476389e97551886","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/META-INF/orm.xml","status":"modified","additions":160,"deletions":160,"changes":320,"blob_url":"https://github.com/apache/openjpa/blob/b546423063fe7c1889f7764393102f423a699483/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/META-INF/orm.xml","raw_url":"https://github.com/apache/openjpa/raw/b546423063fe7c1889f7764393102f423a699483/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/META-INF/orm.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/META-INF/orm.xml?ref=b546423063fe7c1889f7764393102f423a699483","patch":"@@ -1,160 +1,160 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n-<!--\r\n- Licensed to the Apache Software Foundation (ASF) under one\r\n- or more contributor license agreements.  See the NOTICE file\r\n- distributed with this work for additional information\r\n- regarding copyright ownership.  The ASF licenses this file\r\n- to you under the Apache License, Version 2.0 (the\r\n- \"License\"); you may not use this file except in compliance\r\n- with the License.  You may obtain a copy of the License at\r\n- \r\n- http://www.apache.org/licenses/LICENSE-2.0\r\n- \r\n- Unless required by applicable law or agreed to in writing,\r\n- software distributed under the License is distributed on an\r\n- \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- KIND, either express or implied.  See the License for the\r\n- specific language governing permissions and limitations\r\n- under the License.   \r\n--->\r\n-<entity-mappings xmlns=\"http://java.sun.com/xml/ns/persistence/orm\" \r\n-xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \r\n-xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence/orm\r\n-                    http://java.sun.com/xml/ns/persistence/orm_1_0.xsd\" \r\n-version=\"1.0\">\r\n-\r\n-<persistence-unit-metadata>\r\n-   <persistence-unit-defaults>\r\n-       <entity-listeners>\r\n-            <entity-listener class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype.DefaultCallbackListener\">\r\n-                 <pre-persist method-name=\"prePersist\" />\r\n-                 <post-persist method-name=\"postPersist\" />\r\n-                 <pre-remove method-name=\"preRemove\" />\r\n-                 <post-remove method-name=\"postRemove\" />\r\n-                 <pre-update method-name=\"preUpdate\" />\r\n-                 <post-update method-name=\"postUpdate\" />\r\n-                 <post-load method-name=\"postLoad\" />\r\n-            </entity-listener>\r\n-        </entity-listeners> \r\n-   </persistence-unit-defaults>\r\n-</persistence-unit-metadata>\r\n-\r\n-<!-- <entity class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.Schedule\" metadata-complete=\"true\">\r\n-\t\t<description>\r\n-\t\t\tSchedule class represents the superclass of this app...\r\n-\t\t</description>\r\n-\t\t<inheritance strategy=\"TABLE_PER_CLASS\" />\r\n-\r\n-\t     <entity-listeners>\r\n-\t\t\t<entity-listener class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.DateValidator\">\r\n-\t\t\t\t<pre-persist method-name=\"prePersist\" />\r\n-\t\t\t\t<post-persist method-name=\"postPersist\" />\r\n-\t\t\t</entity-listener>\r\n-\r\n-\t\t\t<entity-listener class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.StringValidator\">\r\n-\t\t\t\t<pre-persist method-name=\"prePersist\" />\r\n-\t\t\t\t<post-persist method-name=\"postPersist\" />\r\n-\t\t\t</entity-listener>\r\n-\t\t</entity-listeners> \r\n-\r\n-\t\t<attributes>\r\n-\t\t\t<id name=\"id\">\r\n-\t\t\t\t<generated-value strategy=\"AUTO\" />\r\n-\t\t\t</id>\r\n-\t\t\t<basic name=\"dob\">\r\n-\t\t\t\t<temporal>DATE</temporal>\r\n-\t\t\t</basic>\r\n-\t\t\t<basic name=\"startDate\">\r\n-\t\t\t\t<temporal>TIME</temporal>\r\n-\t\t\t</basic>\r\n-\t\t\t<basic name=\"endDate\">\r\n-\t\t\t\t<temporal>TIMESTAMP</temporal>\r\n-\t\t\t</basic>\r\n-\t\t\t<basic name=\"name\">\r\n-\t\t\t</basic>\r\n-\t\t</attributes>\r\n-\t</entity>\r\n-\r\n-\t<entity class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.FlightSchedule\" metadata-complete=\"true\">\r\n-\t\t<description>\r\n-\t\t\tFlightSchedule, subclass of schedule specifies the real life flight schedule \r\n-\t\t</description>\r\n-\r\n-\t\t<table name=\"Flight_Sched\">\r\n-\t\t\t<unique-constraint>\r\n-\t\t\t\t<column-name>planeName</column-name>\r\n-\t\t\t</unique-constraint>\r\n-\t\t</table>\r\n-\r\n-\t\t<attributes>\r\n-\t\t\t<id name=\"FlightNum\">\r\n-\t\t\t\t<generated-value strategy=\"AUTO\" />\r\n-\t\t\t</id>\r\n-\t\t\t<basic name=\"planeName\">\r\n-\t\t\t\t<column name=\"flight_name\"/>\r\n-\t\t\t</basic>\r\n-\t\t</attributes>\r\n-\t</entity>\r\n-\r\n-\t <entity class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.Employee\" metadata-complete=\"true\">\r\n-\t\t<inheritance strategy=\"JOINED\" />\r\n-\r\n-\t\t<entity-listeners>\r\n-\t\t\t<entity-listener class=\"annotations.common.apps.NameValidator\">\r\n-\t\t\t\t<pre-persist method-name=\"validateName\" />\r\n-\t\t\t\t<pre-remove method-name=\"validateNothing1\" />\r\n-\t\t\t\t<post-remove method-name=\"validateNothing\" />\r\n-\t\t\t\t<post-update method-name=\"testpost\" />\r\n-\t\t\t</entity-listener>\r\n-\r\n-\t\t\t<entity-listener class=\"annotations.common.apps.LongNameValidator\">\r\n-\t\t\t\t<pre-persist method-name=\"validateName\" />\r\n-\t\t\t\t<post-update method-name=\"testpost\" />\r\n-\t\t\t</entity-listener>\r\n-\t\t</entity-listeners> \r\n-\r\n-\t\t<attributes>\r\n-\t\t\t<id name=\"id\">\r\n-\t\t\t</id>\r\n-\t\t\t<basic name=\"name\">\r\n-\t\t\t</basic>\r\n-\t\t\t<transient name=\"syncTime\" />\r\n-\t\t</attributes>\r\n-\t</entity>\r\n-\r\n-\t<entity class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.ContractEmployee\" metadata-complete=\"true\">\r\n-\t</entity>  \r\n-\r\n-\t<entity class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.TxRollbackEntity\" metadata-complete=\"true\">\r\n-\t</entity> -->\r\n-\r\n-\r\n-  <!-- <entity class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype.LifeCycleDDEntity\">\r\n-    <exclude-default-listeners />\r\n-    <entity-listeners>\r\n-\t\t\t<entity-listener class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype.EntityDDListener\">\r\n-\t\t\t\t<post-remove method-name=\"verifyPostRemove\" />\r\n-\t\t\t\t<post-update method-name=\"verifyPostUpdate\" />\r\n-\t\t\t</entity-listener>\r\n-\r\n-\t\t\t<entity-listener class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype.EntityDDListener2\">\r\n-\t\t\t\t<pre-update method-name=\"verifyPreUpdate\" />\r\n-\t\t\t\t<post-load method-name=\"verifyPostLoad\" /> \r\n-\t\t\t</entity-listener>\r\n-\t\t</entity-listeners>\r\n-\r\n-        <pre-persist method-name=\"verifyPrePersist\" />\r\n-        <post-persist method-name=\"verifyPostPersist\" />\r\n-        <pre-remove method-name=\"verifyPreRemove\" />\r\n-\r\n-\t\t<attributes>\r\n-\t\t\t<id name=\"id\">\r\n-\t\t\t\t<generated-value strategy=\"AUTO\" />\r\n-\t\t\t</id>\r\n-\t\t\t<basic name=\"name\">\r\n-\t\t\t</basic>\r\n-\t\t\t<basic name=\"surname\">\r\n-\t\t\t</basic>\r\n-\t\t</attributes>\r\n-\t</entity> -->\r\n-</entity-mappings>\r\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+ \n+ http://www.apache.org/licenses/LICENSE-2.0\n+ \n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.   \n+-->\n+<entity-mappings xmlns=\"http://java.sun.com/xml/ns/persistence/orm\" \n+xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n+xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence/orm\n+                    http://java.sun.com/xml/ns/persistence/orm_1_0.xsd\" \n+version=\"1.0\">\n+\n+<persistence-unit-metadata>\n+   <persistence-unit-defaults>\n+       <entity-listeners>\n+            <entity-listener class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype.DefaultCallbackListener\">\n+                 <pre-persist method-name=\"prePersist\" />\n+                 <post-persist method-name=\"postPersist\" />\n+                 <pre-remove method-name=\"preRemove\" />\n+                 <post-remove method-name=\"postRemove\" />\n+                 <pre-update method-name=\"preUpdate\" />\n+                 <post-update method-name=\"postUpdate\" />\n+                 <post-load method-name=\"postLoad\" />\n+            </entity-listener>\n+        </entity-listeners> \n+   </persistence-unit-defaults>\n+</persistence-unit-metadata>\n+\n+<!-- <entity class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.Schedule\" metadata-complete=\"true\">\n+\t\t<description>\n+\t\t\tSchedule class represents the superclass of this app...\n+\t\t</description>\n+\t\t<inheritance strategy=\"TABLE_PER_CLASS\" />\n+\n+\t     <entity-listeners>\n+\t\t\t<entity-listener class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.DateValidator\">\n+\t\t\t\t<pre-persist method-name=\"prePersist\" />\n+\t\t\t\t<post-persist method-name=\"postPersist\" />\n+\t\t\t</entity-listener>\n+\n+\t\t\t<entity-listener class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.StringValidator\">\n+\t\t\t\t<pre-persist method-name=\"prePersist\" />\n+\t\t\t\t<post-persist method-name=\"postPersist\" />\n+\t\t\t</entity-listener>\n+\t\t</entity-listeners> \n+\n+\t\t<attributes>\n+\t\t\t<id name=\"id\">\n+\t\t\t\t<generated-value strategy=\"AUTO\" />\n+\t\t\t</id>\n+\t\t\t<basic name=\"dob\">\n+\t\t\t\t<temporal>DATE</temporal>\n+\t\t\t</basic>\n+\t\t\t<basic name=\"startDate\">\n+\t\t\t\t<temporal>TIME</temporal>\n+\t\t\t</basic>\n+\t\t\t<basic name=\"endDate\">\n+\t\t\t\t<temporal>TIMESTAMP</temporal>\n+\t\t\t</basic>\n+\t\t\t<basic name=\"name\">\n+\t\t\t</basic>\n+\t\t</attributes>\n+\t</entity>\n+\n+\t<entity class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.FlightSchedule\" metadata-complete=\"true\">\n+\t\t<description>\n+\t\t\tFlightSchedule, subclass of schedule specifies the real life flight schedule \n+\t\t</description>\n+\n+\t\t<table name=\"Flight_Sched\">\n+\t\t\t<unique-constraint>\n+\t\t\t\t<column-name>planeName</column-name>\n+\t\t\t</unique-constraint>\n+\t\t</table>\n+\n+\t\t<attributes>\n+\t\t\t<id name=\"FlightNum\">\n+\t\t\t\t<generated-value strategy=\"AUTO\" />\n+\t\t\t</id>\n+\t\t\t<basic name=\"planeName\">\n+\t\t\t\t<column name=\"flight_name\"/>\n+\t\t\t</basic>\n+\t\t</attributes>\n+\t</entity>\n+\n+\t <entity class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.Employee\" metadata-complete=\"true\">\n+\t\t<inheritance strategy=\"JOINED\" />\n+\n+\t\t<entity-listeners>\n+\t\t\t<entity-listener class=\"annotations.common.apps.NameValidator\">\n+\t\t\t\t<pre-persist method-name=\"validateName\" />\n+\t\t\t\t<pre-remove method-name=\"validateNothing1\" />\n+\t\t\t\t<post-remove method-name=\"validateNothing\" />\n+\t\t\t\t<post-update method-name=\"testpost\" />\n+\t\t\t</entity-listener>\n+\n+\t\t\t<entity-listener class=\"annotations.common.apps.LongNameValidator\">\n+\t\t\t\t<pre-persist method-name=\"validateName\" />\n+\t\t\t\t<post-update method-name=\"testpost\" />\n+\t\t\t</entity-listener>\n+\t\t</entity-listeners> \n+\n+\t\t<attributes>\n+\t\t\t<id name=\"id\">\n+\t\t\t</id>\n+\t\t\t<basic name=\"name\">\n+\t\t\t</basic>\n+\t\t\t<transient name=\"syncTime\" />\n+\t\t</attributes>\n+\t</entity>\n+\n+\t<entity class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.ContractEmployee\" metadata-complete=\"true\">\n+\t</entity>  \n+\n+\t<entity class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.TxRollbackEntity\" metadata-complete=\"true\">\n+\t</entity> -->\n+\n+\n+  <!-- <entity class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype.LifeCycleDDEntity\">\n+    <exclude-default-listeners />\n+    <entity-listeners>\n+\t\t\t<entity-listener class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype.EntityDDListener\">\n+\t\t\t\t<post-remove method-name=\"verifyPostRemove\" />\n+\t\t\t\t<post-update method-name=\"verifyPostUpdate\" />\n+\t\t\t</entity-listener>\n+\n+\t\t\t<entity-listener class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype.EntityDDListener2\">\n+\t\t\t\t<pre-update method-name=\"verifyPreUpdate\" />\n+\t\t\t\t<post-load method-name=\"verifyPostLoad\" /> \n+\t\t\t</entity-listener>\n+\t\t</entity-listeners>\n+\n+        <pre-persist method-name=\"verifyPrePersist\" />\n+        <post-persist method-name=\"verifyPostPersist\" />\n+        <pre-remove method-name=\"verifyPreRemove\" />\n+\n+\t\t<attributes>\n+\t\t\t<id name=\"id\">\n+\t\t\t\t<generated-value strategy=\"AUTO\" />\n+\t\t\t</id>\n+\t\t\t<basic name=\"name\">\n+\t\t\t</basic>\n+\t\t\t<basic name=\"surname\">\n+\t\t\t</basic>\n+\t\t</attributes>\n+\t</entity> -->\n+</entity-mappings>"},{"sha":"4806fcada76db3018e1b9fd782b7185dc51c90a6","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/META-INF/persistence.xml","status":"modified","additions":33,"deletions":33,"changes":66,"blob_url":"https://github.com/apache/openjpa/blob/b546423063fe7c1889f7764393102f423a699483/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/b546423063fe7c1889f7764393102f423a699483/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/META-INF/persistence.xml?ref=b546423063fe7c1889f7764393102f423a699483","patch":"@@ -1,33 +1,33 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n-<!--\r\n- Licensed to the Apache Software Foundation (ASF) under one\r\n- or more contributor license agreements.  See the NOTICE file\r\n- distributed with this work for additional information\r\n- regarding copyright ownership.  The ASF licenses this file\r\n- to you under the Apache License, Version 2.0 (the\r\n- \"License\"); you may not use this file except in compliance\r\n- with the License.  You may obtain a copy of the License at\r\n- \r\n- http://www.apache.org/licenses/LICENSE-2.0\r\n- \r\n- Unless required by applicable law or agreed to in writing,\r\n- software distributed under the License is distributed on an\r\n- \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- KIND, either express or implied.  See the License for the\r\n- specific language governing permissions and limitations\r\n- under the License.   \r\n--->\r\n-<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\" version=\"1.0\">\r\n-\t<persistence-unit name=\"TestConv\" transaction-type=\"RESOURCE_LOCAL\">\r\n-\t\t<provider>org.apache.openjpa.persistence.PersistenceProviderImpl</provider>\r\n-\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype.Employee</class>\r\n-\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype.ContractEmployee</class>\r\n-\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype.TxRollbackEntity</class>\r\n-\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype.LifeCycleDDEntity</class>\r\n-\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype.LifeCycleDDEntity2</class>\r\n-\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype.LifeCycleDDEntitySub</class>\r\n-\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype.Entity1</class>\r\n-\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype.Entity2</class>\r\n-\t</persistence-unit>\r\n-\r\n-</persistence>\r\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+ \n+ http://www.apache.org/licenses/LICENSE-2.0\n+ \n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.   \n+-->\n+<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\" version=\"1.0\">\n+\t<persistence-unit name=\"TestConv\" transaction-type=\"RESOURCE_LOCAL\">\n+\t\t<provider>org.apache.openjpa.persistence.PersistenceProviderImpl</provider>\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype.Employee</class>\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype.ContractEmployee</class>\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype.TxRollbackEntity</class>\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype.LifeCycleDDEntity</class>\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype.LifeCycleDDEntity2</class>\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype.LifeCycleDDEntitySub</class>\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype.Entity1</class>\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype.Entity2</class>\n+\t</persistence-unit>\n+\n+</persistence>"},{"sha":"5fd8b8668c58aec197b5937d58d977286c8022fe","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/annotations/xml/orm.xml","status":"modified","additions":39,"deletions":39,"changes":78,"blob_url":"https://github.com/apache/openjpa/blob/b546423063fe7c1889f7764393102f423a699483/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/annotations/xml/orm.xml","raw_url":"https://github.com/apache/openjpa/raw/b546423063fe7c1889f7764393102f423a699483/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/annotations/xml/orm.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/annotations/xml/orm.xml?ref=b546423063fe7c1889f7764393102f423a699483","patch":"@@ -16,48 +16,48 @@\n  KIND, either express or implied.  See the License for the\n  specific language governing permissions and limitations\n  under the License.\n--->\r\n-\r\n-<!-- A pair of entities are defined with metadata-complete attribute set to \r\n-     true and false respectively. Both entities carry identical annotation.\r\n-     \r\n+-->\n+\n+<!-- A pair of entities are defined with metadata-complete attribute set to \n+     true and false respectively. Both entities carry identical annotation.\n+     \n -->\n <entity-mappings xmlns=\"http://java.sun.com/xml/ns/persistence/orm\"\n   xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n   xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence/orm http://java.sun.com/xml/ns/persistence/orm_1_0.xsd\"\n   version=\"1.0\">\n-  <entity class=\"org.apache.openjpa.persistence.annotations.xml.EntityA\" metadata-complete=\"true\">\r\n-    <inheritance strategy=\"JOINED\"/>\r\n-    <attributes>\r\n-      <id name=\"id\">\r\n-        <column name=\"ID\" />\r\n-          <generated-value strategy=\"SEQUENCE\"/>\r\n-      </id>\r\n-      <basic name=\"name\" optional=\"false\">\r\n-      </basic>\r\n-    </attributes>\r\n-  </entity>\r\n-  \r\n-  <entity class=\"org.apache.openjpa.persistence.annotations.xml.EntityB\" metadata-complete=\"false\">\r\n-    <named-query name=\"EntityB.SelectAll\">\r\n-    \t<query>SELECT b FROM EntityB b</query>\r\n-    </named-query>\r\n-    <attributes>\r\n-      <id name=\"id\">\r\n-        <column name=\"ID\" />\r\n-      </id>\r\n-      <basic name=\"name\">\r\n-      </basic>\r\n-    </attributes>\r\n-  </entity>\r\n-  <entity class=\"org.apache.openjpa.persistence.annotations.xml.DerivedA\"\r\n-  \tmetadata-complete=\"true\">\r\n-  </entity>\r\n-  <entity class=\"org.apache.openjpa.persistence.annotations.xml.DerivedB\"\r\n-  \tmetadata-complete=\"false\">\r\n-  \t<attributes>\r\n-  \t\t<basic name=\"data\">\r\n-  \t\t</basic>\r\n-  \t</attributes>\r\n-  </entity>\r\n+  <entity class=\"org.apache.openjpa.persistence.annotations.xml.EntityA\" metadata-complete=\"true\">\n+    <inheritance strategy=\"JOINED\"/>\n+    <attributes>\n+      <id name=\"id\">\n+        <column name=\"ID\" />\n+          <generated-value strategy=\"SEQUENCE\"/>\n+      </id>\n+      <basic name=\"name\" optional=\"false\">\n+      </basic>\n+    </attributes>\n+  </entity>\n+  \n+  <entity class=\"org.apache.openjpa.persistence.annotations.xml.EntityB\" metadata-complete=\"false\">\n+    <named-query name=\"EntityB.SelectAll\">\n+    \t<query>SELECT b FROM EntityB b</query>\n+    </named-query>\n+    <attributes>\n+      <id name=\"id\">\n+        <column name=\"ID\" />\n+      </id>\n+      <basic name=\"name\">\n+      </basic>\n+    </attributes>\n+  </entity>\n+  <entity class=\"org.apache.openjpa.persistence.annotations.xml.DerivedA\"\n+  \tmetadata-complete=\"true\">\n+  </entity>\n+  <entity class=\"org.apache.openjpa.persistence.annotations.xml.DerivedB\"\n+  \tmetadata-complete=\"false\">\n+  \t<attributes>\n+  \t\t<basic name=\"data\">\n+  \t\t</basic>\n+  \t</attributes>\n+  </entity>\n </entity-mappings>"},{"sha":"43b7badf9b02aae9476a1699074454c50e4aecf2","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/cache/common/apps/META-INF/persistence.xml","status":"modified","additions":29,"deletions":29,"changes":58,"blob_url":"https://github.com/apache/openjpa/blob/b546423063fe7c1889f7764393102f423a699483/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/cache/common/apps/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/b546423063fe7c1889f7764393102f423a699483/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/cache/common/apps/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/cache/common/apps/META-INF/persistence.xml?ref=b546423063fe7c1889f7764393102f423a699483","patch":"@@ -1,29 +1,29 @@\n-<!--\r\n- Licensed to the Apache Software Foundation (ASF) under one\r\n- or more contributor license agreements.  See the NOTICE file\r\n- distributed with this work for additional information\r\n- regarding copyright ownership.  The ASF licenses this file\r\n- to you under the Apache License, Version 2.0 (the\r\n- \"License\"); you may not use this file except in compliance\r\n- with the License.  You may obtain a copy of the License at\r\n- \r\n- http://www.apache.org/licenses/LICENSE-2.0\r\n- \r\n- Unless required by applicable law or agreed to in writing,\r\n- software distributed under the License is distributed on an\r\n- \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- KIND, either express or implied.  See the License for the\r\n- specific language governing permissions and limitations\r\n- under the License.   \r\n--->\r\n-<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\"\r\n-  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n-  xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence\r\n-    http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd\"\r\n-  version=\"1.0\">\r\n-\r\n-\t<persistence-unit name=\"TestConv\" transaction-type=\"RESOURCE_LOCAL\">\r\n-\t    <class>org.apache.openjpa.persistence.cache.common.apps.Entity1</class>\r\n-\t    <class>org.apache.openjpa.persistence.cache.common.apps.Entity2</class>\r\n-\t</persistence-unit>\r\n-</persistence>\r\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+ \n+ http://www.apache.org/licenses/LICENSE-2.0\n+ \n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.   \n+-->\n+<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\"\n+  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+  xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence\n+    http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd\"\n+  version=\"1.0\">\n+\n+\t<persistence-unit name=\"TestConv\" transaction-type=\"RESOURCE_LOCAL\">\n+\t    <class>org.apache.openjpa.persistence.cache.common.apps.Entity1</class>\n+\t    <class>org.apache.openjpa.persistence.cache.common.apps.Entity2</class>\n+\t</persistence-unit>\n+</persistence>"},{"sha":"0dd7cff0024652d5cb9fa15c8d068b054aa4a169","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/common/apps/META-INF/persistence.xml","status":"modified","additions":45,"deletions":45,"changes":90,"blob_url":"https://github.com/apache/openjpa/blob/b546423063fe7c1889f7764393102f423a699483/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/common/apps/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/b546423063fe7c1889f7764393102f423a699483/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/common/apps/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/common/apps/META-INF/persistence.xml?ref=b546423063fe7c1889f7764393102f423a699483","patch":"@@ -1,45 +1,45 @@\n-<!--\r\n- Licensed to the Apache Software Foundation (ASF) under one\r\n- or more contributor license agreements.  See the NOTICE file\r\n- distributed with this work for additional information\r\n- regarding copyright ownership.  The ASF licenses this file\r\n- to you under the Apache License, Version 2.0 (the\r\n- \"License\"); you may not use this file except in compliance\r\n- with the License.  You may obtain a copy of the License at\r\n- \r\n- http://www.apache.org/licenses/LICENSE-2.0\r\n- \r\n- Unless required by applicable law or agreed to in writing,\r\n- software distributed under the License is distributed on an\r\n- \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- KIND, either express or implied.  See the License for the\r\n- specific language governing permissions and limitations\r\n- under the License.   \r\n--->\r\n-<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence\r\n-    http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd\" version=\"1.0\">\r\n-\t<persistence-unit name=\"TestConv\" transaction-type=\"RESOURCE_LOCAL\">\r\n-\t\t<provider>org.apache.openjpa.persistence.PersistenceProviderImpl</provider>\r\n-\t\t<class>org.apache.openjpa.persistence.common.apps.Entity1</class>\r\n-\t\t<class>org.apache.openjpa.persistence.common.apps.Entity2</class>\r\n-\t\t<class>org.apache.openjpa.persistence.common.apps.RuntimeTest1</class>\r\n-\t\t<class>org.apache.openjpa.persistence.common.apps.RuntimeTest2</class>\r\n-\t\t<class>org.apache.openjpa.persistence.common.apps.Course</class>\r\n-\t\t<class>org.apache.openjpa.persistence.common.apps.Department</class>\r\n-\t\t<class>org.apache.openjpa.persistence.common.apps.Student</class>\r\n-\t\t<class>org.apache.openjpa.persistence.common.apps.ArtCourse</class>\r\n-\t\t<class>org.apache.openjpa.persistence.common.apps.ScienceCourse</class>\r\n-\t\t<class>org.apache.openjpa.persistence.common.apps.EmbeddedOwnerPC</class>\r\n-\t\t<class>org.apache.openjpa.persistence.common.apps.EmbeddedPC</class>\r\n-\t\t<class>org.apache.openjpa.persistence.common.apps.ComplexEmbeddedPC</class>\r\n-\t\t<class>org.apache.openjpa.persistence.common.apps.CompUser</class>\r\n-\t\t<class>org.apache.openjpa.persistence.common.apps.MaleUser</class>\r\n-\t\t<class>org.apache.openjpa.persistence.common.apps.Address</class>\r\n-\t\t<class>org.apache.openjpa.persistence.common.apps.FemaleUser</class>\r\n-\t\t<properties>\r\n-\t\t\t<property name=\"openjpa.ConnectionFactoryProperties\" value=\"MaxActive=110, MaxIdle=10, ValidationTimeout=50000, \r\n-                                                                     MaxCachedStatements=10, ValidationSQL='', MaxWait=10000, TestOnBorrow=true\" />\r\n-\t\t\t<property name=\"openjpa.jdbc.SynchronizeMappings\" value=\"buildSchema(ForeignKeys=true)\" />\r\n-\t\t</properties>\r\n-\t</persistence-unit>\r\n-</persistence>\r\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+ \n+ http://www.apache.org/licenses/LICENSE-2.0\n+ \n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.   \n+-->\n+<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence\n+    http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd\" version=\"1.0\">\n+\t<persistence-unit name=\"TestConv\" transaction-type=\"RESOURCE_LOCAL\">\n+\t\t<provider>org.apache.openjpa.persistence.PersistenceProviderImpl</provider>\n+\t\t<class>org.apache.openjpa.persistence.common.apps.Entity1</class>\n+\t\t<class>org.apache.openjpa.persistence.common.apps.Entity2</class>\n+\t\t<class>org.apache.openjpa.persistence.common.apps.RuntimeTest1</class>\n+\t\t<class>org.apache.openjpa.persistence.common.apps.RuntimeTest2</class>\n+\t\t<class>org.apache.openjpa.persistence.common.apps.Course</class>\n+\t\t<class>org.apache.openjpa.persistence.common.apps.Department</class>\n+\t\t<class>org.apache.openjpa.persistence.common.apps.Student</class>\n+\t\t<class>org.apache.openjpa.persistence.common.apps.ArtCourse</class>\n+\t\t<class>org.apache.openjpa.persistence.common.apps.ScienceCourse</class>\n+\t\t<class>org.apache.openjpa.persistence.common.apps.EmbeddedOwnerPC</class>\n+\t\t<class>org.apache.openjpa.persistence.common.apps.EmbeddedPC</class>\n+\t\t<class>org.apache.openjpa.persistence.common.apps.ComplexEmbeddedPC</class>\n+\t\t<class>org.apache.openjpa.persistence.common.apps.CompUser</class>\n+\t\t<class>org.apache.openjpa.persistence.common.apps.MaleUser</class>\n+\t\t<class>org.apache.openjpa.persistence.common.apps.Address</class>\n+\t\t<class>org.apache.openjpa.persistence.common.apps.FemaleUser</class>\n+\t\t<properties>\n+\t\t\t<property name=\"openjpa.ConnectionFactoryProperties\" value=\"MaxActive=110, MaxIdle=10, ValidationTimeout=50000, \n+                                                                     MaxCachedStatements=10, ValidationSQL='', MaxWait=10000, TestOnBorrow=true\" />\n+\t\t\t<property name=\"openjpa.jdbc.SynchronizeMappings\" value=\"buildSchema(ForeignKeys=true)\" />\n+\t\t</properties>\n+\t</persistence-unit>\n+</persistence>"},{"sha":"236adfc7bee82ba02c9b20928bfbe1556248b971","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/conf/common/apps/META-INF/persistence.xml","status":"modified","additions":25,"deletions":25,"changes":50,"blob_url":"https://github.com/apache/openjpa/blob/b546423063fe7c1889f7764393102f423a699483/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/conf/common/apps/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/b546423063fe7c1889f7764393102f423a699483/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/conf/common/apps/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/conf/common/apps/META-INF/persistence.xml?ref=b546423063fe7c1889f7764393102f423a699483","patch":"@@ -1,25 +1,25 @@\n-<!--\r\n- Licensed to the Apache Software Foundation (ASF) under one\r\n- or more contributor license agreements.  See the NOTICE file\r\n- distributed with this work for additional information\r\n- regarding copyright ownership.  The ASF licenses this file\r\n- to you under the Apache License, Version 2.0 (the\r\n- \"License\"); you may not use this file except in compliance\r\n- with the License.  You may obtain a copy of the License at\r\n- \r\n- http://www.apache.org/licenses/LICENSE-2.0\r\n- \r\n- Unless required by applicable law or agreed to in writing,\r\n- software distributed under the License is distributed on an\r\n- \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- KIND, either express or implied.  See the License for the\r\n- specific language governing permissions and limitations\r\n- under the License.   \r\n--->\r\n-<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence\r\n-    http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd\" version=\"1.0\">\r\n-\r\n-\t<persistence-unit name=\"TestConv\" transaction-type=\"RESOURCE_LOCAL\">\r\n-\t\t<provider>org.apache.openjpa.persistence.PersistenceProviderImpl</provider>\r\n-\t</persistence-unit>\r\n-</persistence>\r\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+ \n+ http://www.apache.org/licenses/LICENSE-2.0\n+ \n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.   \n+-->\n+<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence\n+    http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd\" version=\"1.0\">\n+\n+\t<persistence-unit name=\"TestConv\" transaction-type=\"RESOURCE_LOCAL\">\n+\t\t<provider>org.apache.openjpa.persistence.PersistenceProviderImpl</provider>\n+\t</persistence-unit>\n+</persistence>"},{"sha":"13aabf04a1a87d7caac73c57182e3a8f2dc7dc67","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/datacache/common/apps/META-INF/persistence.xml","status":"modified","additions":53,"deletions":53,"changes":106,"blob_url":"https://github.com/apache/openjpa/blob/b546423063fe7c1889f7764393102f423a699483/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/datacache/common/apps/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/b546423063fe7c1889f7764393102f423a699483/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/datacache/common/apps/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/datacache/common/apps/META-INF/persistence.xml?ref=b546423063fe7c1889f7764393102f423a699483","patch":"@@ -1,53 +1,53 @@\n-<!--\r\n- Licensed to the Apache Software Foundation (ASF) under one\r\n- or more contributor license agreements.  See the NOTICE file\r\n- distributed with this work for additional information\r\n- regarding copyright ownership.  The ASF licenses this file\r\n- to you under the Apache License, Version 2.0 (the\r\n- \"License\"); you may not use this file except in compliance\r\n- with the License.  You may obtain a copy of the License at\r\n- \r\n- http://www.apache.org/licenses/LICENSE-2.0\r\n- \r\n- Unless required by applicable law or agreed to in writing,\r\n- software distributed under the License is distributed on an\r\n- \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- KIND, either express or implied.  See the License for the\r\n- specific language governing permissions and limitations\r\n- under the License.   \r\n--->\r\n-<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence\r\n-    http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd\" version=\"1.0\">\r\n-\r\n-\t<persistence-unit name=\"TestConv\" transaction-type=\"RESOURCE_LOCAL\">\r\n-\t\t<provider>org.apache.openjpa.persistence.PersistenceProviderImpl</provider>\r\n-\t\t\r\n-\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.AppIdCacheObject</class>\r\n-\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.AttachA</class>\r\n-\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.AttachB</class>\r\n-\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.AttachC</class>\r\n-\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.AttachD</class>\r\n-\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.AttachE</class>\r\n-\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.AttachF</class>\r\n-<!--\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.CacheObjectInterface</class>-->\r\n-\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.CacheObjectWithExternalizedFields</class>\r\n-\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.CacheObjectA</class>\r\n-\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.CacheObjectB</class>\r\n-\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.CacheObjectC</class>\r\n-\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.CacheObjectD</class>\r\n-\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.CacheObjectE</class>\r\n-\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.CacheObjectF</class>\r\n-\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.CacheObjectG</class>\r\n-\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.CacheObjectH</class>\r\n-\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.CacheObjectJ</class>\r\n-\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.FlushDataCacheObject</class>\r\n-\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.CacheObjectAChild1</class>\r\n-\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.CacheObjectAChild2</class>\r\n-\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.CacheObjectBChild1</class>\r\n-\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.RuntimeTest1</class>\r\n-\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.RuntimeTest2</class>\r\n-\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.ScheduledEviction</class>\r\n-\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.SelfReferencingCacheTestObject</class>\r\n-\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.TransactionalClassPC</class>\r\n-\t</persistence-unit>\r\n-</persistence>\r\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+ \n+ http://www.apache.org/licenses/LICENSE-2.0\n+ \n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.   \n+-->\n+<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence\n+    http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd\" version=\"1.0\">\n+\n+\t<persistence-unit name=\"TestConv\" transaction-type=\"RESOURCE_LOCAL\">\n+\t\t<provider>org.apache.openjpa.persistence.PersistenceProviderImpl</provider>\n+\t\t\n+\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.AppIdCacheObject</class>\n+\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.AttachA</class>\n+\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.AttachB</class>\n+\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.AttachC</class>\n+\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.AttachD</class>\n+\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.AttachE</class>\n+\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.AttachF</class>\n+<!--\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.CacheObjectInterface</class>-->\n+\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.CacheObjectWithExternalizedFields</class>\n+\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.CacheObjectA</class>\n+\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.CacheObjectB</class>\n+\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.CacheObjectC</class>\n+\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.CacheObjectD</class>\n+\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.CacheObjectE</class>\n+\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.CacheObjectF</class>\n+\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.CacheObjectG</class>\n+\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.CacheObjectH</class>\n+\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.CacheObjectJ</class>\n+\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.FlushDataCacheObject</class>\n+\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.CacheObjectAChild1</class>\n+\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.CacheObjectAChild2</class>\n+\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.CacheObjectBChild1</class>\n+\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.RuntimeTest1</class>\n+\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.RuntimeTest2</class>\n+\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.ScheduledEviction</class>\n+\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.SelfReferencingCacheTestObject</class>\n+\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.TransactionalClassPC</class>\n+\t</persistence-unit>\n+</persistence>"},{"sha":"c854c293e685ffd274861edc2a4798126092a47c","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/embed/embed-orm.xml","status":"modified","additions":219,"deletions":219,"changes":438,"blob_url":"https://github.com/apache/openjpa/blob/b546423063fe7c1889f7764393102f423a699483/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/embed/embed-orm.xml","raw_url":"https://github.com/apache/openjpa/raw/b546423063fe7c1889f7764393102f423a699483/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/embed/embed-orm.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/embed/embed-orm.xml?ref=b546423063fe7c1889f7764393102f423a699483","patch":"@@ -1,220 +1,220 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n-<!-- AtestCatalog metadata in xml -->\r\n-<entity-mappings xmlns=\"http://java.sun.com/xml/ns/persistence/orm\"\r\n-xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n-xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence/orm orm_2_0.xsd\"\r\n-version=\"2.0\">\r\n-\t<package>embeddableXml</package>\r\n-\r\n-    <entity name=\"EntityA_Coll_StringXml\" \r\n-            class=\"org.apache.openjpa.persistence.embed.EntityA_Coll_StringXml\" \r\n-            access=\"FIELD\">\r\n-        <table name=\"EntityA_Coll_String_XML\" />\r\n-        \r\n-        <attributes>\r\n-            <id name=\"id\">\r\n-            </id>\r\n-            \r\n-            <basic name=\"name\">\r\n-                <column length=\"30\" />\r\n-            </basic>\r\n-            \r\n-            <basic name=\"age\" fetch=\"LAZY\">\r\n-            </basic>\r\n-            \r\n-            <element-collection name=\"nickNames\">\r\n-              <column name=\"nickName_xml\" length=\"20\"/>\r\n-              <collection-table name=\"NickNames_xml\">\r\n-                 <join-column name=\"A_ID_xml\" nullable=\"false\"/>\r\n-                 <unique-constraint>\r\n-                   <column-name>A_ID_xml</column-name>\r\n-                    <column-name>nickName_xml</column-name>\r\n-                 </unique-constraint>\r\n-              </collection-table>\r\n-\t        </element-collection>\r\n-        </attributes>\r\n-    </entity>\r\n-     \r\n-    <entity name=\"EntityA_Coll_Embed_EmbedXml\" \r\n-            class=\"org.apache.openjpa.persistence.embed.EntityA_Coll_Embed_EmbedXml\" \r\n-            access=\"FIELD\">\r\n-        <table name=\"EntityA_Coll_Embed_EmbedXML\" />\r\n-        <attributes>\r\n-            <id name=\"id\">\r\n-            </id>\r\n-            <basic name=\"name\">\r\n-                <column length=\"30\" />\r\n-            </basic>\r\n-            <basic name=\"age\" fetch=\"LAZY\">\r\n-            </basic>\r\n-            <element-collection name=\"embeds\">\r\n-            </element-collection>\r\n-        </attributes>\r\n-    </entity>\r\n- \r\n- \t<entity name=\"DepartmentXml\"\r\n-\t\tclass=\"org.apache.openjpa.persistence.embed.DepartmentXml\"\r\n-\t\taccess=\"FIELD\">\r\n-\t\t<attributes>\r\n-\t\t\t<id name=\"deptId\"></id>\r\n-\t\t\t<one-to-many name=\"empMap\">\r\n-\t\t\t\t<map-key name=\"empId\" />\r\n-\t\t\t\t<cascade>\r\n-\t\t\t\t\t<cascade-all />\r\n-\t\t\t\t</cascade>\r\n-\t\t\t</one-to-many>\r\n-\t\t</attributes>\r\n-\t</entity>\r\n-\r\n-\t<entity name=\"EmployeeXml\"\r\n-\t\tclass=\"org.apache.openjpa.persistence.embed.EmployeeXml\"\r\n-\t\taccess=\"FIELD\">\r\n-\t\t<attributes>\r\n-\t\t\t<id name=\"empId\"></id>\r\n-\t\t\t<many-to-one name=\"department\">\r\n-\t\t\t\t<join-column name=\"dept_id\" />\r\n-\t\t\t</many-to-one>\r\n-\t\t</attributes>\r\n-\t</entity>\r\n-\r\n-\t<entity name=\"ItemXml\"\r\n-\t\tclass=\"org.apache.openjpa.persistence.embed.ItemXml\" access=\"FIELD\">\r\n-\t\t<attributes>\r\n-\t\t\t<id name=\"id\"></id>\r\n-\t\t\t<element-collection name=\"images\"\r\n-\t\t\t\ttarget-entity=\"java.lang.String\">\r\n-\t\t\t\t<column name=\"IMAGE_FILENAME\" />\r\n-\t\t\t\t<map-key-class class=\"java.lang.String\" />\r\n-\t\t\t\t<map-key-column name=\"IMAGE_NAME\" />\r\n-\t\t\t\t<collection-table name=\"IMAGE_XML\" />\r\n-\t\t\t</element-collection>\r\n-\t\t</attributes>\r\n-\t</entity>\r\n-\r\n-\t<entity name=\"DivisionXml\"\r\n-\t\tclass=\"org.apache.openjpa.persistence.embed.DivisionXml\"\r\n-\t\taccess=\"FIELD\">\r\n-\t\t<attributes>\r\n-\t\t\t<id name=\"id\"></id>\r\n-\t\t\t<basic name=\"name\" />\r\n-\t\t</attributes>\r\n-\t</entity>\r\n-\r\n-\t<entity name=\"VicePresidentXml\"\r\n-\t\tclass=\"org.apache.openjpa.persistence.embed.VicePresidentXml\"\r\n-\t\taccess=\"FIELD\">\r\n-\t\t<attributes>\r\n-\t\t\t<id name=\"id\"></id>\r\n-\t\t\t<basic name=\"name\" />\r\n-\t\t</attributes>\r\n-\t</entity>\r\n-\r\n-\t<entity name=\"CompanyXml\"\r\n-\t\tclass=\"org.apache.openjpa.persistence.embed.CompanyXml\"\r\n-\t\taccess=\"FIELD\">\r\n-\t\t<attributes>\r\n-\t\t\t<id name=\"id\"></id>\r\n-\t\t\t<one-to-many name=\"organization\">\r\n-\t\t\t\t<map-key-join-column name=\"DIVISION\" />\r\n-\t\t\t\t<join-table name=\"COMPANY_ORG_XML\">\r\n-\t\t\t\t\t<join-column name=\"COMPANY\" />\r\n-\t\t\t\t\t<inverse-join-column name=\"VP\" />\r\n-\t\t\t\t</join-table>\r\n-\t\t\t</one-to-many>\r\n-\t\t</attributes>\r\n-\t</entity>\r\n-\r\n-\t<entity name=\"CustomerXml\"\r\n-\t\tclass=\"org.apache.openjpa.persistence.embed.CustomerXml\"\r\n-\t\taccess=\"FIELD\">\r\n-\t\t<table name=\"Customer_XML\" />\r\n-\t\t<attributes>\r\n-\t\t\t<id name=\"id\"></id>\r\n-\t\t\t<basic name=\"name\" />\r\n-\t\t\t<one-to-many name=\"orders\" mapped-by=\"cust\"\r\n-\t\t\t\torphan-removal=\"true\" />\r\n-\t\t</attributes>\r\n-\t</entity>\r\n-\r\n-\t<entity name=\"OrderXml\"\r\n-\t\tclass=\"org.apache.openjpa.persistence.embed.OrderXml\"\r\n-\t\taccess=\"FIELD\">\r\n-\t\t<table name=\"Order_XML\" />\r\n-\t\t<attributes>\r\n-\t\t\t<id name=\"id\"></id>\r\n-\t\t\t<basic name=\"description\" />\r\n-\t\t\t<many-to-one name=\"cust\">\r\n-\t\t\t\t<join-column name=\"CUST_ID\" nullable=\"false\" />\r\n-\t\t\t</many-to-one>\r\n-\t\t</attributes>\r\n-\t</entity>\r\n-\r\n-    <entity name=\"CustomerXml1\" \r\n-        class=\"org.apache.openjpa.persistence.embed.attrOverrides.CustomerXml\" \r\n-        access=\"FIELD\">\r\n-        <attributes>\r\n-            <id name=\"id\"><column length=\"12\"/></id>\r\n-            <basic name=\"name\"><column length=\"12\"/></basic>\r\n-            <embedded name=\"address\">\r\n-                <attribute-override name=\"state\">\r\n-                    <column name=\"ADDR_STATE\" />\r\n-                </attribute-override>\r\n-                <attribute-override name=\"zipcode.zip\">\r\n-                    <column name=\"ADDR_ZIP\" />\r\n-                </attribute-override>\r\n-            </embedded>\r\n-        </attributes>\r\n-    </entity>\r\n-\r\n-    <embeddable \r\n-        class=\"org.apache.openjpa.persistence.embed.attrOverrides.AddressXml\" \r\n-        access=\"FIELD\">\r\n-        <attributes>\r\n-            <basic name=\"street\"><column length=\"12\"/>\r\n-            </basic>\r\n-            <basic name=\"city\"><column length=\"12\"/></basic>\r\n-            <basic name=\"state\"><column length=\"12\"/></basic>\r\n-            <embedded name=\"zipcode\"/>\r\n-        </attributes>\r\n-    </embeddable>\r\n-\r\n-    <embeddable \r\n-        class=\"org.apache.openjpa.persistence.embed.attrOverrides.ZipcodeXml\" \r\n-        access=\"FIELD\">\r\n-        <attributes>\r\n-            <basic name=\"zip\"><column length=\"12\"/></basic>\r\n-            <basic name=\"plusFour\"><column length=\"12\"/></basic>\r\n-        </attributes>\r\n-    </embeddable>\r\n-\r\n-\t<embeddable\r\n-\t\tclass=\"org.apache.openjpa.persistence.embed.Embed_EmbedXml\"\r\n-\t\taccess=\"FIELD\">\r\n-\t\t<attributes>\r\n-\t\t\t<basic name=\"intVal1\"></basic>\r\n-\t\t\t<basic name=\"intVal2\"></basic>\r\n-\t\t\t<basic name=\"intVal3\"></basic>\r\n-\t\t\t<embedded name=\"embed\">\r\n-\t\t\t\t<attribute-override name=\"intVal1\">\r\n-\t\t\t\t\t<column name=\"embed_intVal1\" />\r\n-\t\t\t\t</attribute-override>\r\n-\t\t\t\t<attribute-override name=\"intVal2\">\r\n-\t\t\t\t\t<column name=\"embed_intVal2\" />\r\n-\t\t\t\t</attribute-override>\r\n-\t\t\t\t<attribute-override name=\"intVal3\">\r\n-\t\t\t\t\t<column name=\"embed_intVal3\" />\r\n-\t\t\t\t</attribute-override>\r\n-\t\t\t</embedded>\r\n-\t\t</attributes>\r\n-\t</embeddable>\r\n-\r\n-\t<embeddable class=\"org.apache.openjpa.persistence.embed.EmbedXml\"\r\n-\t\taccess=\"FIELD\">\r\n-\t\t<attributes>\r\n-\t\t\t<basic name=\"intVal1\"></basic>\r\n-\t\t\t<basic name=\"intVal2\"></basic>\r\n-\t\t\t<basic name=\"intVal3\"></basic>\r\n-\t\t</attributes>\r\n-\t</embeddable>\r\n-\r\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!-- AtestCatalog metadata in xml -->\n+<entity-mappings xmlns=\"http://java.sun.com/xml/ns/persistence/orm\"\n+xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence/orm orm_2_0.xsd\"\n+version=\"2.0\">\n+\t<package>embeddableXml</package>\n+\n+    <entity name=\"EntityA_Coll_StringXml\" \n+            class=\"org.apache.openjpa.persistence.embed.EntityA_Coll_StringXml\" \n+            access=\"FIELD\">\n+        <table name=\"EntityA_Coll_String_XML\" />\n+        \n+        <attributes>\n+            <id name=\"id\">\n+            </id>\n+            \n+            <basic name=\"name\">\n+                <column length=\"30\" />\n+            </basic>\n+            \n+            <basic name=\"age\" fetch=\"LAZY\">\n+            </basic>\n+            \n+            <element-collection name=\"nickNames\">\n+              <column name=\"nickName_xml\" length=\"20\"/>\n+              <collection-table name=\"NickNames_xml\">\n+                 <join-column name=\"A_ID_xml\" nullable=\"false\"/>\n+                 <unique-constraint>\n+                   <column-name>A_ID_xml</column-name>\n+                    <column-name>nickName_xml</column-name>\n+                 </unique-constraint>\n+              </collection-table>\n+\t        </element-collection>\n+        </attributes>\n+    </entity>\n+     \n+    <entity name=\"EntityA_Coll_Embed_EmbedXml\" \n+            class=\"org.apache.openjpa.persistence.embed.EntityA_Coll_Embed_EmbedXml\" \n+            access=\"FIELD\">\n+        <table name=\"EntityA_Coll_Embed_EmbedXML\" />\n+        <attributes>\n+            <id name=\"id\">\n+            </id>\n+            <basic name=\"name\">\n+                <column length=\"30\" />\n+            </basic>\n+            <basic name=\"age\" fetch=\"LAZY\">\n+            </basic>\n+            <element-collection name=\"embeds\">\n+            </element-collection>\n+        </attributes>\n+    </entity>\n+ \n+ \t<entity name=\"DepartmentXml\"\n+\t\tclass=\"org.apache.openjpa.persistence.embed.DepartmentXml\"\n+\t\taccess=\"FIELD\">\n+\t\t<attributes>\n+\t\t\t<id name=\"deptId\"></id>\n+\t\t\t<one-to-many name=\"empMap\">\n+\t\t\t\t<map-key name=\"empId\" />\n+\t\t\t\t<cascade>\n+\t\t\t\t\t<cascade-all />\n+\t\t\t\t</cascade>\n+\t\t\t</one-to-many>\n+\t\t</attributes>\n+\t</entity>\n+\n+\t<entity name=\"EmployeeXml\"\n+\t\tclass=\"org.apache.openjpa.persistence.embed.EmployeeXml\"\n+\t\taccess=\"FIELD\">\n+\t\t<attributes>\n+\t\t\t<id name=\"empId\"></id>\n+\t\t\t<many-to-one name=\"department\">\n+\t\t\t\t<join-column name=\"dept_id\" />\n+\t\t\t</many-to-one>\n+\t\t</attributes>\n+\t</entity>\n+\n+\t<entity name=\"ItemXml\"\n+\t\tclass=\"org.apache.openjpa.persistence.embed.ItemXml\" access=\"FIELD\">\n+\t\t<attributes>\n+\t\t\t<id name=\"id\"></id>\n+\t\t\t<element-collection name=\"images\"\n+\t\t\t\ttarget-entity=\"java.lang.String\">\n+\t\t\t\t<column name=\"IMAGE_FILENAME\" />\n+\t\t\t\t<map-key-class class=\"java.lang.String\" />\n+\t\t\t\t<map-key-column name=\"IMAGE_NAME\" />\n+\t\t\t\t<collection-table name=\"IMAGE_XML\" />\n+\t\t\t</element-collection>\n+\t\t</attributes>\n+\t</entity>\n+\n+\t<entity name=\"DivisionXml\"\n+\t\tclass=\"org.apache.openjpa.persistence.embed.DivisionXml\"\n+\t\taccess=\"FIELD\">\n+\t\t<attributes>\n+\t\t\t<id name=\"id\"></id>\n+\t\t\t<basic name=\"name\" />\n+\t\t</attributes>\n+\t</entity>\n+\n+\t<entity name=\"VicePresidentXml\"\n+\t\tclass=\"org.apache.openjpa.persistence.embed.VicePresidentXml\"\n+\t\taccess=\"FIELD\">\n+\t\t<attributes>\n+\t\t\t<id name=\"id\"></id>\n+\t\t\t<basic name=\"name\" />\n+\t\t</attributes>\n+\t</entity>\n+\n+\t<entity name=\"CompanyXml\"\n+\t\tclass=\"org.apache.openjpa.persistence.embed.CompanyXml\"\n+\t\taccess=\"FIELD\">\n+\t\t<attributes>\n+\t\t\t<id name=\"id\"></id>\n+\t\t\t<one-to-many name=\"organization\">\n+\t\t\t\t<map-key-join-column name=\"DIVISION\" />\n+\t\t\t\t<join-table name=\"COMPANY_ORG_XML\">\n+\t\t\t\t\t<join-column name=\"COMPANY\" />\n+\t\t\t\t\t<inverse-join-column name=\"VP\" />\n+\t\t\t\t</join-table>\n+\t\t\t</one-to-many>\n+\t\t</attributes>\n+\t</entity>\n+\n+\t<entity name=\"CustomerXml\"\n+\t\tclass=\"org.apache.openjpa.persistence.embed.CustomerXml\"\n+\t\taccess=\"FIELD\">\n+\t\t<table name=\"Customer_XML\" />\n+\t\t<attributes>\n+\t\t\t<id name=\"id\"></id>\n+\t\t\t<basic name=\"name\" />\n+\t\t\t<one-to-many name=\"orders\" mapped-by=\"cust\"\n+\t\t\t\torphan-removal=\"true\" />\n+\t\t</attributes>\n+\t</entity>\n+\n+\t<entity name=\"OrderXml\"\n+\t\tclass=\"org.apache.openjpa.persistence.embed.OrderXml\"\n+\t\taccess=\"FIELD\">\n+\t\t<table name=\"Order_XML\" />\n+\t\t<attributes>\n+\t\t\t<id name=\"id\"></id>\n+\t\t\t<basic name=\"description\" />\n+\t\t\t<many-to-one name=\"cust\">\n+\t\t\t\t<join-column name=\"CUST_ID\" nullable=\"false\" />\n+\t\t\t</many-to-one>\n+\t\t</attributes>\n+\t</entity>\n+\n+    <entity name=\"CustomerXml1\" \n+        class=\"org.apache.openjpa.persistence.embed.attrOverrides.CustomerXml\" \n+        access=\"FIELD\">\n+        <attributes>\n+            <id name=\"id\"><column length=\"12\"/></id>\n+            <basic name=\"name\"><column length=\"12\"/></basic>\n+            <embedded name=\"address\">\n+                <attribute-override name=\"state\">\n+                    <column name=\"ADDR_STATE\" />\n+                </attribute-override>\n+                <attribute-override name=\"zipcode.zip\">\n+                    <column name=\"ADDR_ZIP\" />\n+                </attribute-override>\n+            </embedded>\n+        </attributes>\n+    </entity>\n+\n+    <embeddable \n+        class=\"org.apache.openjpa.persistence.embed.attrOverrides.AddressXml\" \n+        access=\"FIELD\">\n+        <attributes>\n+            <basic name=\"street\"><column length=\"12\"/>\n+            </basic>\n+            <basic name=\"city\"><column length=\"12\"/></basic>\n+            <basic name=\"state\"><column length=\"12\"/></basic>\n+            <embedded name=\"zipcode\"/>\n+        </attributes>\n+    </embeddable>\n+\n+    <embeddable \n+        class=\"org.apache.openjpa.persistence.embed.attrOverrides.ZipcodeXml\" \n+        access=\"FIELD\">\n+        <attributes>\n+            <basic name=\"zip\"><column length=\"12\"/></basic>\n+            <basic name=\"plusFour\"><column length=\"12\"/></basic>\n+        </attributes>\n+    </embeddable>\n+\n+\t<embeddable\n+\t\tclass=\"org.apache.openjpa.persistence.embed.Embed_EmbedXml\"\n+\t\taccess=\"FIELD\">\n+\t\t<attributes>\n+\t\t\t<basic name=\"intVal1\"></basic>\n+\t\t\t<basic name=\"intVal2\"></basic>\n+\t\t\t<basic name=\"intVal3\"></basic>\n+\t\t\t<embedded name=\"embed\">\n+\t\t\t\t<attribute-override name=\"intVal1\">\n+\t\t\t\t\t<column name=\"embed_intVal1\" />\n+\t\t\t\t</attribute-override>\n+\t\t\t\t<attribute-override name=\"intVal2\">\n+\t\t\t\t\t<column name=\"embed_intVal2\" />\n+\t\t\t\t</attribute-override>\n+\t\t\t\t<attribute-override name=\"intVal3\">\n+\t\t\t\t\t<column name=\"embed_intVal3\" />\n+\t\t\t\t</attribute-override>\n+\t\t\t</embedded>\n+\t\t</attributes>\n+\t</embeddable>\n+\n+\t<embeddable class=\"org.apache.openjpa.persistence.embed.EmbedXml\"\n+\t\taccess=\"FIELD\">\n+\t\t<attributes>\n+\t\t\t<basic name=\"intVal1\"></basic>\n+\t\t\t<basic name=\"intVal2\"></basic>\n+\t\t\t<basic name=\"intVal3\"></basic>\n+\t\t</attributes>\n+\t</embeddable>\n+\n </entity-mappings>\n\\ No newline at end of file"},{"sha":"0b3dca33792ae990bc64add0afbbb10e435e603b","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/enhance/common/apps/META-INF/persistence.xml","status":"modified","additions":41,"deletions":41,"changes":82,"blob_url":"https://github.com/apache/openjpa/blob/b546423063fe7c1889f7764393102f423a699483/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/enhance/common/apps/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/b546423063fe7c1889f7764393102f423a699483/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/enhance/common/apps/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/enhance/common/apps/META-INF/persistence.xml?ref=b546423063fe7c1889f7764393102f423a699483","patch":"@@ -1,41 +1,41 @@\n-<!--\r\n- Licensed to the Apache Software Foundation (ASF) under one\r\n- or more contributor license agreements.  See the NOTICE file\r\n- distributed with this work for additional information\r\n- regarding copyright ownership.  The ASF licenses this file\r\n- to you under the Apache License, Version 2.0 (the\r\n- \"License\"); you may not use this file except in compliance\r\n- with the License.  You may obtain a copy of the License at\r\n- \r\n- http://www.apache.org/licenses/LICENSE-2.0\r\n- \r\n- Unless required by applicable law or agreed to in writing,\r\n- software distributed under the License is distributed on an\r\n- \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- KIND, either express or implied.  See the License for the\r\n- specific language governing permissions and limitations\r\n- under the License.   \r\n--->\r\n-<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence\r\n-    http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd\" version=\"1.0\">\r\n-\r\n-\t<persistence-unit name=\"TestConv\" transaction-type=\"RESOURCE_LOCAL\">\r\n-\t\t<provider>org.apache.openjpa.persistence.PersistenceProviderImpl</provider>\r\n-\t\t<class>org.apache.openjpa.persistence.enhance.common.apps.PCClone</class>\r\n-\t\t<class>org.apache.openjpa.persistence.enhance.common.apps.NonPCClone</class>\r\n-\t\t<class>org.apache.openjpa.persistence.enhance.common.apps.SubclassClone</class>\r\n-\t\t<class>org.apache.openjpa.persistence.enhance.common.apps.NoClone</class>\r\n-\t\t<class>org.apache.openjpa.persistence.enhance.common.apps.NoNoArgs</class>\r\n-\t\t<class>org.apache.openjpa.persistence.enhance.common.apps.No2NoArgs</class>\r\n-\t\t<class>org.apache.openjpa.persistence.enhance.common.apps.No3NoArgs</class>\r\n-\t\t<class>org.apache.openjpa.persistence.enhance.common.apps.BackingFieldNameMismatchInstance</class>\r\n-\t\t<class>org.apache.openjpa.persistence.enhance.common.apps.BaseEntity</class>\r\n-\t\t<class>org.apache.openjpa.persistence.enhance.common.apps.BasicSubclassInstance</class>\r\n-\t\t<class>org.apache.openjpa.persistence.enhance.common.apps.DetachablePC</class>\r\n-\t\t<class>org.apache.openjpa.persistence.enhance.common.apps.DetachableVersionedPC</class>\r\n-\t\t<class>org.apache.openjpa.persistence.enhance.common.apps.ManagedInverseTestInstance</class>\r\n-\t\t<class>org.apache.openjpa.persistence.enhance.common.apps.ManagedInverseTestInstance2</class>\r\n-\t\t<class>org.apache.openjpa.persistence.enhance.common.apps.DerivedEntity</class>\r\n-\r\n-\t</persistence-unit>\r\n-</persistence>\r\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+ \n+ http://www.apache.org/licenses/LICENSE-2.0\n+ \n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.   \n+-->\n+<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence\n+    http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd\" version=\"1.0\">\n+\n+\t<persistence-unit name=\"TestConv\" transaction-type=\"RESOURCE_LOCAL\">\n+\t\t<provider>org.apache.openjpa.persistence.PersistenceProviderImpl</provider>\n+\t\t<class>org.apache.openjpa.persistence.enhance.common.apps.PCClone</class>\n+\t\t<class>org.apache.openjpa.persistence.enhance.common.apps.NonPCClone</class>\n+\t\t<class>org.apache.openjpa.persistence.enhance.common.apps.SubclassClone</class>\n+\t\t<class>org.apache.openjpa.persistence.enhance.common.apps.NoClone</class>\n+\t\t<class>org.apache.openjpa.persistence.enhance.common.apps.NoNoArgs</class>\n+\t\t<class>org.apache.openjpa.persistence.enhance.common.apps.No2NoArgs</class>\n+\t\t<class>org.apache.openjpa.persistence.enhance.common.apps.No3NoArgs</class>\n+\t\t<class>org.apache.openjpa.persistence.enhance.common.apps.BackingFieldNameMismatchInstance</class>\n+\t\t<class>org.apache.openjpa.persistence.enhance.common.apps.BaseEntity</class>\n+\t\t<class>org.apache.openjpa.persistence.enhance.common.apps.BasicSubclassInstance</class>\n+\t\t<class>org.apache.openjpa.persistence.enhance.common.apps.DetachablePC</class>\n+\t\t<class>org.apache.openjpa.persistence.enhance.common.apps.DetachableVersionedPC</class>\n+\t\t<class>org.apache.openjpa.persistence.enhance.common.apps.ManagedInverseTestInstance</class>\n+\t\t<class>org.apache.openjpa.persistence.enhance.common.apps.ManagedInverseTestInstance2</class>\n+\t\t<class>org.apache.openjpa.persistence.enhance.common.apps.DerivedEntity</class>\n+\n+\t</persistence-unit>\n+</persistence>"},{"sha":"6c03f8d75dc7f0b34221716b0d2e1b9fe024cf20","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/entityoperation/common/apps/META-INF/persistence.xml","status":"modified","additions":26,"deletions":26,"changes":52,"blob_url":"https://github.com/apache/openjpa/blob/b546423063fe7c1889f7764393102f423a699483/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/entityoperation/common/apps/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/b546423063fe7c1889f7764393102f423a699483/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/entityoperation/common/apps/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/entityoperation/common/apps/META-INF/persistence.xml?ref=b546423063fe7c1889f7764393102f423a699483","patch":"@@ -1,26 +1,26 @@\n-<!--\r\n- Licensed to the Apache Software Foundation (ASF) under one\r\n- or more contributor license agreements.  See the NOTICE file\r\n- distributed with this work for additional information\r\n- regarding copyright ownership.  The ASF licenses this file\r\n- to you under the Apache License, Version 2.0 (the\r\n- \"License\"); you may not use this file except in compliance\r\n- with the License.  You may obtain a copy of the License at\r\n- \r\n- http://www.apache.org/licenses/LICENSE-2.0\r\n- \r\n- Unless required by applicable law or agreed to in writing,\r\n- software distributed under the License is distributed on an\r\n- \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- KIND, either express or implied.  See the License for the\r\n- specific language governing permissions and limitations\r\n- under the License.   \r\n--->\r\n-<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence\r\n-    http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd\" version=\"1.0\">\r\n-\r\n-\t<persistence-unit name=\"TestConv\" transaction-type=\"RESOURCE_LOCAL\">\r\n-\t\t<provider>org.apache.openjpa.persistence.PersistenceProviderImpl</provider>\r\n-\t\t<class>org.apache.openjpa.persistence.entityoperation.common.apps.CascadesEntity</class>\r\n-\t</persistence-unit>\r\n-</persistence>\r\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+ \n+ http://www.apache.org/licenses/LICENSE-2.0\n+ \n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.   \n+-->\n+<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence\n+    http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd\" version=\"1.0\">\n+\n+\t<persistence-unit name=\"TestConv\" transaction-type=\"RESOURCE_LOCAL\">\n+\t\t<provider>org.apache.openjpa.persistence.PersistenceProviderImpl</provider>\n+\t\t<class>org.apache.openjpa.persistence.entityoperation.common.apps.CascadesEntity</class>\n+\t</persistence-unit>\n+</persistence>"},{"sha":"36cb45dafee9b43c2ce65d32f5269e9ef6f9c288","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/event/common/apps/META-INF/persistence.xml","status":"modified","additions":29,"deletions":29,"changes":58,"blob_url":"https://github.com/apache/openjpa/blob/b546423063fe7c1889f7764393102f423a699483/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/event/common/apps/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/b546423063fe7c1889f7764393102f423a699483/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/event/common/apps/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/event/common/apps/META-INF/persistence.xml?ref=b546423063fe7c1889f7764393102f423a699483","patch":"@@ -1,29 +1,29 @@\n-<!--\r\n- Licensed to the Apache Software Foundation (ASF) under one\r\n- or more contributor license agreements.  See the NOTICE file\r\n- distributed with this work for additional information\r\n- regarding copyright ownership.  The ASF licenses this file\r\n- to you under the Apache License, Version 2.0 (the\r\n- \"License\"); you may not use this file except in compliance\r\n- with the License.  You may obtain a copy of the License at\r\n- \r\n- http://www.apache.org/licenses/LICENSE-2.0\r\n- \r\n- Unless required by applicable law or agreed to in writing,\r\n- software distributed under the License is distributed on an\r\n- \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- KIND, either express or implied.  See the License for the\r\n- specific language governing permissions and limitations\r\n- under the License.   \r\n--->\r\n-<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence\r\n-    http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd\" version=\"1.0\">\r\n-\r\n-\t<persistence-unit name=\"TestConv\" transaction-type=\"RESOURCE_LOCAL\">\r\n-\t\t<provider>org.apache.openjpa.persistence.PersistenceProviderImpl</provider>\r\n-\t\t<class>org.apache.openjpa.persistence.event.common.apps.RuntimeTest1</class>\r\n-\t\t<class>org.apache.openjpa.persistence.event.common.apps.RuntimeTest2</class>\r\n-\t\t<class>org.apache.openjpa.persistence.event.common.apps.RuntimeTest4</class>\r\n-\t\t<class>org.apache.openjpa.persistence.event.common.apps.TransactionalClassPC</class>\r\n-\t</persistence-unit>\r\n-</persistence>\r\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+ \n+ http://www.apache.org/licenses/LICENSE-2.0\n+ \n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.   \n+-->\n+<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence\n+    http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd\" version=\"1.0\">\n+\n+\t<persistence-unit name=\"TestConv\" transaction-type=\"RESOURCE_LOCAL\">\n+\t\t<provider>org.apache.openjpa.persistence.PersistenceProviderImpl</provider>\n+\t\t<class>org.apache.openjpa.persistence.event.common.apps.RuntimeTest1</class>\n+\t\t<class>org.apache.openjpa.persistence.event.common.apps.RuntimeTest2</class>\n+\t\t<class>org.apache.openjpa.persistence.event.common.apps.RuntimeTest4</class>\n+\t\t<class>org.apache.openjpa.persistence.event.common.apps.TransactionalClassPC</class>\n+\t</persistence-unit>\n+</persistence>"},{"sha":"1e8e940df57218907b8bb1bf3f41b394b534ab0d","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/jdbc/common/apps/META-INF/persistence.xml","status":"modified","additions":43,"deletions":43,"changes":86,"blob_url":"https://github.com/apache/openjpa/blob/b546423063fe7c1889f7764393102f423a699483/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/jdbc/common/apps/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/b546423063fe7c1889f7764393102f423a699483/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/jdbc/common/apps/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/jdbc/common/apps/META-INF/persistence.xml?ref=b546423063fe7c1889f7764393102f423a699483","patch":"@@ -1,43 +1,43 @@\n-<!--\r\n- Licensed to the Apache Software Foundation (ASF) under one\r\n- or more contributor license agreements.  See the NOTICE file\r\n- distributed with this work for additional information\r\n- regarding copyright ownership.  The ASF licenses this file\r\n- to you under the Apache License, Version 2.0 (the\r\n- \"License\"); you may not use this file except in compliance\r\n- with the License.  You may obtain a copy of the License at\r\n- \r\n- http://www.apache.org/licenses/LICENSE-2.0\r\n- \r\n- Unless required by applicable law or agreed to in writing,\r\n- software distributed under the License is distributed on an\r\n- \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- KIND, either express or implied.  See the License for the\r\n- specific language governing permissions and limitations\r\n- under the License.   \r\n--->\r\n-<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\"\r\n-  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n-  xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence\r\n-    http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd\"\r\n-  version=\"1.0\">\r\n-\r\n-\t<persistence-unit name=\"TestConv\" transaction-type=\"RESOURCE_LOCAL\">\r\n-\t\t<provider>org.apache.openjpa.persistence.PersistenceProviderImpl</provider>\r\n-\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.AutoIncrementPC1</class>\r\n-\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.AutoIncrementPC2</class>\r\n-\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.AutoIncrementPC3</class>\r\n-\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.ConstantJoinPC4</class>\r\n-\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.ConstantJoinPC5</class>\r\n-\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.CustomMappingPC</class>\r\n-        <class>org.apache.openjpa.persistence.jdbc.common.apps.DFGTest</class>\r\n-\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.EagerPC</class>\r\n-\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.EagerPCSub</class>\r\n-\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.HelperPC</class>\r\n-\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.HelperPC2</class>\r\n-\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.HelperPC3</class>\r\n-\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.HelperPC4</class>\r\n-\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.InvertA</class>\r\n-        <class>org.apache.openjpa.persistence.jdbc.common.apps.InvertB</class>\r\n-\t</persistence-unit>\r\n-</persistence>\r\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+ \n+ http://www.apache.org/licenses/LICENSE-2.0\n+ \n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.   \n+-->\n+<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\"\n+  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+  xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence\n+    http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd\"\n+  version=\"1.0\">\n+\n+\t<persistence-unit name=\"TestConv\" transaction-type=\"RESOURCE_LOCAL\">\n+\t\t<provider>org.apache.openjpa.persistence.PersistenceProviderImpl</provider>\n+\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.AutoIncrementPC1</class>\n+\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.AutoIncrementPC2</class>\n+\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.AutoIncrementPC3</class>\n+\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.ConstantJoinPC4</class>\n+\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.ConstantJoinPC5</class>\n+\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.CustomMappingPC</class>\n+        <class>org.apache.openjpa.persistence.jdbc.common.apps.DFGTest</class>\n+\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.EagerPC</class>\n+\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.EagerPCSub</class>\n+\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.HelperPC</class>\n+\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.HelperPC2</class>\n+\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.HelperPC3</class>\n+\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.HelperPC4</class>\n+\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.InvertA</class>\n+        <class>org.apache.openjpa.persistence.jdbc.common.apps.InvertB</class>\n+\t</persistence-unit>\n+</persistence>"},{"sha":"9d482d044b8f313813e78f43d7cca7981b7a5637","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/META-INF/persistence.xml","status":"modified","additions":34,"deletions":34,"changes":68,"blob_url":"https://github.com/apache/openjpa/blob/b546423063fe7c1889f7764393102f423a699483/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/b546423063fe7c1889f7764393102f423a699483/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/META-INF/persistence.xml?ref=b546423063fe7c1889f7764393102f423a699483","patch":"@@ -1,34 +1,34 @@\n-<!--\r\n- Licensed to the Apache Software Foundation (ASF) under one\r\n- or more contributor license agreements.  See the NOTICE file\r\n- distributed with this work for additional information\r\n- regarding copyright ownership.  The ASF licenses this file\r\n- to you under the Apache License, Version 2.0 (the\r\n- \"License\"); you may not use this file except in compliance\r\n- with the License.  You may obtain a copy of the License at\r\n- \r\n- http://www.apache.org/licenses/LICENSE-2.0\r\n- \r\n- Unless required by applicable law or agreed to in writing,\r\n- software distributed under the License is distributed on an\r\n- \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- KIND, either express or implied.  See the License for the\r\n- specific language governing permissions and limitations\r\n- under the License.   \r\n--->\r\n-<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence\r\n-    http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd\" version=\"1.0\">\r\n-\r\n-\t<persistence-unit name=\"TestConv\" transaction-type=\"RESOURCE_LOCAL\">\r\n-\t\t<provider>org.apache.openjpa.persistence.PersistenceProviderImpl</provider>\r\n-\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.mappingApp.EntityWithCompositeId</class>\r\n-\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.mappingApp.OwnerOfEntityWithCompositeId</class>\r\n-\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.mappingApp.RecursiveEntityWithCompositeId</class>\r\n-\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.mappingApp.SQLMapAddress</class>\r\n-\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.mappingApp.SQLMapItem</class>\r\n-\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.mappingApp.SQLMapOrder</class>\r\n-\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.mappingApp.SQLMapPerson</class>\r\n-\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.mappingApp.Entity1</class>\r\n-\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.mappingApp.Entity2</class>\r\n-\t</persistence-unit>\r\n-</persistence>\r\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+ \n+ http://www.apache.org/licenses/LICENSE-2.0\n+ \n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.   \n+-->\n+<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence\n+    http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd\" version=\"1.0\">\n+\n+\t<persistence-unit name=\"TestConv\" transaction-type=\"RESOURCE_LOCAL\">\n+\t\t<provider>org.apache.openjpa.persistence.PersistenceProviderImpl</provider>\n+\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.mappingApp.EntityWithCompositeId</class>\n+\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.mappingApp.OwnerOfEntityWithCompositeId</class>\n+\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.mappingApp.RecursiveEntityWithCompositeId</class>\n+\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.mappingApp.SQLMapAddress</class>\n+\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.mappingApp.SQLMapItem</class>\n+\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.mappingApp.SQLMapOrder</class>\n+\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.mappingApp.SQLMapPerson</class>\n+\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.mappingApp.Entity1</class>\n+\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.mappingApp.Entity2</class>\n+\t</persistence-unit>\n+</persistence>"},{"sha":"545a11c8240c6f31623e9d63b13772c9db1077ca","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/jdbc/unique/orm.xml","status":"modified","additions":118,"deletions":118,"changes":236,"blob_url":"https://github.com/apache/openjpa/blob/b546423063fe7c1889f7764393102f423a699483/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/jdbc/unique/orm.xml","raw_url":"https://github.com/apache/openjpa/raw/b546423063fe7c1889f7764393102f423a699483/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/jdbc/unique/orm.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/jdbc/unique/orm.xml?ref=b546423063fe7c1889f7764393102f423a699483","patch":"@@ -1,118 +1,118 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n-<!--\r\n-\tLicensed to the Apache Software Foundation (ASF) under one\r\n-\tor more contributor license agreements.  See the NOTICE file\r\n-\tdistributed with this work for additional information\r\n-\tregarding copyright ownership.  The ASF licenses this file\r\n-\tto you under the Apache License, Version 2.0 (the\r\n-\t\"License\"); you may not use this file except in compliance\r\n-\twith the License.  You may obtain a copy of the License at\r\n-\t\r\n-\thttp://www.apache.org/licenses/LICENSE-2.0\r\n-\t\r\n-\tUnless required by applicable law or agreed to in writing,\r\n-\tsoftware distributed under the License is distributed on an\r\n-\t\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n-\tKIND, either express or implied.  See the License for the\r\n-\tspecific language governing permissions and limitations\r\n-\tunder the License.\r\n--->\r\n-<entity-mappings xmlns=\"http://java.sun.com/xml/ns/persistence/orm\"\r\n-\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n-\txsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence orm_1_0.xsd\"\r\n-\tversion=\"1.0\">\r\n-\t\r\n-\t<persistence-unit-metadata>\r\n-\t\t<xml-mapping-metadata-complete/>\r\n-\t</persistence-unit-metadata>\r\n-\t\r\n-\t\r\n-\t<package>org.apache.openjpa.persistence.jdbc.unique</package>\r\n-\t<entity name=\"UniqueA\" class=\"UniqueA\">\r\n-\t\t<table name=\"UNIQUE_A_XML\">\r\n-\t\t\t<unique-constraint>\r\n-\t\t\t\t<column-name>f1x</column-name>\r\n-\t\t\t\t<column-name>f2x</column-name>\r\n-\t\t\t</unique-constraint>\r\n-\t\t\t<unique-constraint>\r\n-\t\t\t\t<column-name>f3x</column-name>\r\n-\t\t\t\t<column-name>f4x</column-name>\r\n-\t\t\t</unique-constraint>\r\n-\t\t</table>\r\n-\t\t<secondary-table name=\"UNIQUE_SECONDARY_XML\">\r\n-\t\t\t<unique-constraint>\r\n-\t\t\t\t<column-name>sf1x</column-name>\r\n-\t\t\t</unique-constraint>\r\n-\t\t</secondary-table>\r\n-\t\t<attributes>\r\n-\t\t\t<id name=\"aid\">\r\n-\t\t\t</id>\r\n-\t\t\t<basic name=\"f1\">\r\n-\t\t\t\t<column name=\"f1x\" unique=\"true\"/>\r\n-\t\t\t</basic>\r\n-\t\t\t<basic name=\"f2\">\r\n-\t\t\t\t<column name=\"f2x\"/>\r\n-\t\t\t</basic>\r\n-\t\t\t<basic name=\"f3\">\r\n-\t\t\t\t<column name=\"f3x\"/>\r\n-\t\t\t</basic>\r\n-\t\t\t<basic name=\"f4\">\r\n-\t\t\t\t<column name=\"f4x\"/>\r\n-\t\t\t</basic>\r\n-\t\t\t<basic name=\"f5\">\r\n-\t\t\t\t<column name=\"f5x\"/>\r\n-\t\t\t</basic>\r\n-\t\t\t<basic name=\"f6\">\r\n-\t\t\t\t<column name=\"f6x\"/>\r\n-\t\t\t</basic>\r\n-\t\t\t<basic name=\"sf1\">\r\n-\t\t\t\t<column name=\"sf1x\" table=\"UNIQUE_SECONDARY_XML\" />\r\n-\t\t\t</basic>\r\n-\t\t\t<basic name=\"sf2\">\r\n-\t\t\t\t<column name=\"sf2x\" table=\"UNIQUE_SECONDARY_XML\" />\r\n-\t\t\t</basic>\r\n-\r\n-\t\t\t<many-to-many name=\"bs\">\r\n-\t\t\t\t<join-table name=\"UNIQUE_JOINTABLE_XML\">\r\n-\t\t\t\t\t<join-column name=\"FK_A_XML\" referenced-column-name=\"aid\" nullable=\"false\"/>\r\n-\t\t\t\t\t<inverse-join-column name=\"FK_B_XML\" referenced-column-name=\"bid\" nullable=\"false\"/>\r\n-\t\t\t\t\t<unique-constraint>\r\n-\t\t\t\t\t\t<column-name>FK_A_XML</column-name>\r\n-\t\t\t\t\t\t<column-name>FK_B_XML</column-name>\r\n-\t\t\t\t\t</unique-constraint>\r\n-\t\t\t\t</join-table>\r\n-\t\t\t</many-to-many>\r\n-\t\t</attributes>\r\n-\t</entity>\r\n-\r\n-\t<entity name=\"UniqueB\" class=\"UniqueB\">\r\n-\t\t<table name=\"UNIQUE_B_XML\">\r\n-\t\t\t<unique-constraint>\r\n-\t\t\t\t<column-name>f1x</column-name>\r\n-\t\t\t\t<column-name>f2x</column-name>\r\n-\t\t\t</unique-constraint>\r\n-\t\t</table>\r\n-\t\t<attributes>\r\n-\t\t\t<id name=\"bid\">\r\n-\t\t\t\t<generated-value strategy=\"TABLE\"\r\n-\t\t\t\t\tgenerator=\"testGeneratorXML\" />\r\n-\t\t\t\t<table-generator name=\"testGeneratorXML\"\r\n-\t\t\t\t\ttable=\"UNIQUE_GENERATOR_XML\" pk-column-name=\"GEN1_XML\"\r\n-\t\t\t\t\tvalue-column-name=\"GEN2_XML\">\r\n-\t\t\t\t\t<unique-constraint>\r\n-\t\t\t\t\t\t<column-name>GEN1_XML</column-name>\r\n-\t\t\t\t\t\t<column-name>GEN2_XML</column-name>\r\n-\t\t\t\t\t</unique-constraint>\r\n-\t\t\t\t</table-generator>\r\n-\t\t\t</id>\r\n-\t\t\t<basic name=\"f1\">\r\n-\t\t\t\t<column name=\"f1x\" unique=\"true\"/>\r\n-\t\t\t</basic>\r\n-\t\t\t<basic name=\"f2\">\r\n-\t\t\t\t<column name=\"f2x\"/>\r\n-\t\t\t</basic>\r\n-\t\t</attributes>\r\n-\t</entity>\r\n-</entity-mappings>\r\n-\r\n-\r\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+\tLicensed to the Apache Software Foundation (ASF) under one\n+\tor more contributor license agreements.  See the NOTICE file\n+\tdistributed with this work for additional information\n+\tregarding copyright ownership.  The ASF licenses this file\n+\tto you under the Apache License, Version 2.0 (the\n+\t\"License\"); you may not use this file except in compliance\n+\twith the License.  You may obtain a copy of the License at\n+\t\n+\thttp://www.apache.org/licenses/LICENSE-2.0\n+\t\n+\tUnless required by applicable law or agreed to in writing,\n+\tsoftware distributed under the License is distributed on an\n+\t\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+\tKIND, either express or implied.  See the License for the\n+\tspecific language governing permissions and limitations\n+\tunder the License.\n+-->\n+<entity-mappings xmlns=\"http://java.sun.com/xml/ns/persistence/orm\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence orm_1_0.xsd\"\n+\tversion=\"1.0\">\n+\t\n+\t<persistence-unit-metadata>\n+\t\t<xml-mapping-metadata-complete/>\n+\t</persistence-unit-metadata>\n+\t\n+\t\n+\t<package>org.apache.openjpa.persistence.jdbc.unique</package>\n+\t<entity name=\"UniqueA\" class=\"UniqueA\">\n+\t\t<table name=\"UNIQUE_A_XML\">\n+\t\t\t<unique-constraint>\n+\t\t\t\t<column-name>f1x</column-name>\n+\t\t\t\t<column-name>f2x</column-name>\n+\t\t\t</unique-constraint>\n+\t\t\t<unique-constraint>\n+\t\t\t\t<column-name>f3x</column-name>\n+\t\t\t\t<column-name>f4x</column-name>\n+\t\t\t</unique-constraint>\n+\t\t</table>\n+\t\t<secondary-table name=\"UNIQUE_SECONDARY_XML\">\n+\t\t\t<unique-constraint>\n+\t\t\t\t<column-name>sf1x</column-name>\n+\t\t\t</unique-constraint>\n+\t\t</secondary-table>\n+\t\t<attributes>\n+\t\t\t<id name=\"aid\">\n+\t\t\t</id>\n+\t\t\t<basic name=\"f1\">\n+\t\t\t\t<column name=\"f1x\" unique=\"true\"/>\n+\t\t\t</basic>\n+\t\t\t<basic name=\"f2\">\n+\t\t\t\t<column name=\"f2x\"/>\n+\t\t\t</basic>\n+\t\t\t<basic name=\"f3\">\n+\t\t\t\t<column name=\"f3x\"/>\n+\t\t\t</basic>\n+\t\t\t<basic name=\"f4\">\n+\t\t\t\t<column name=\"f4x\"/>\n+\t\t\t</basic>\n+\t\t\t<basic name=\"f5\">\n+\t\t\t\t<column name=\"f5x\"/>\n+\t\t\t</basic>\n+\t\t\t<basic name=\"f6\">\n+\t\t\t\t<column name=\"f6x\"/>\n+\t\t\t</basic>\n+\t\t\t<basic name=\"sf1\">\n+\t\t\t\t<column name=\"sf1x\" table=\"UNIQUE_SECONDARY_XML\" />\n+\t\t\t</basic>\n+\t\t\t<basic name=\"sf2\">\n+\t\t\t\t<column name=\"sf2x\" table=\"UNIQUE_SECONDARY_XML\" />\n+\t\t\t</basic>\n+\n+\t\t\t<many-to-many name=\"bs\">\n+\t\t\t\t<join-table name=\"UNIQUE_JOINTABLE_XML\">\n+\t\t\t\t\t<join-column name=\"FK_A_XML\" referenced-column-name=\"aid\" nullable=\"false\"/>\n+\t\t\t\t\t<inverse-join-column name=\"FK_B_XML\" referenced-column-name=\"bid\" nullable=\"false\"/>\n+\t\t\t\t\t<unique-constraint>\n+\t\t\t\t\t\t<column-name>FK_A_XML</column-name>\n+\t\t\t\t\t\t<column-name>FK_B_XML</column-name>\n+\t\t\t\t\t</unique-constraint>\n+\t\t\t\t</join-table>\n+\t\t\t</many-to-many>\n+\t\t</attributes>\n+\t</entity>\n+\n+\t<entity name=\"UniqueB\" class=\"UniqueB\">\n+\t\t<table name=\"UNIQUE_B_XML\">\n+\t\t\t<unique-constraint>\n+\t\t\t\t<column-name>f1x</column-name>\n+\t\t\t\t<column-name>f2x</column-name>\n+\t\t\t</unique-constraint>\n+\t\t</table>\n+\t\t<attributes>\n+\t\t\t<id name=\"bid\">\n+\t\t\t\t<generated-value strategy=\"TABLE\"\n+\t\t\t\t\tgenerator=\"testGeneratorXML\" />\n+\t\t\t\t<table-generator name=\"testGeneratorXML\"\n+\t\t\t\t\ttable=\"UNIQUE_GENERATOR_XML\" pk-column-name=\"GEN1_XML\"\n+\t\t\t\t\tvalue-column-name=\"GEN2_XML\">\n+\t\t\t\t\t<unique-constraint>\n+\t\t\t\t\t\t<column-name>GEN1_XML</column-name>\n+\t\t\t\t\t\t<column-name>GEN2_XML</column-name>\n+\t\t\t\t\t</unique-constraint>\n+\t\t\t\t</table-generator>\n+\t\t\t</id>\n+\t\t\t<basic name=\"f1\">\n+\t\t\t\t<column name=\"f1x\" unique=\"true\"/>\n+\t\t\t</basic>\n+\t\t\t<basic name=\"f2\">\n+\t\t\t\t<column name=\"f2x\"/>\n+\t\t\t</basic>\n+\t\t</attributes>\n+\t</entity>\n+</entity-mappings>\n+\n+"},{"sha":"644dc52a0a8a2f1a1b833249ec4876a0cacd98c8","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/kernel/common/apps/META-INF/persistence.xml","status":"modified","additions":124,"deletions":124,"changes":248,"blob_url":"https://github.com/apache/openjpa/blob/b546423063fe7c1889f7764393102f423a699483/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/kernel/common/apps/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/b546423063fe7c1889f7764393102f423a699483/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/kernel/common/apps/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/kernel/common/apps/META-INF/persistence.xml?ref=b546423063fe7c1889f7764393102f423a699483","patch":"@@ -1,124 +1,124 @@\n-<!--\r\n- Licensed to the Apache Software Foundation (ASF) under one\r\n- or more contributor license agreements.  See the NOTICE file\r\n- distributed with this work for additional information\r\n- regarding copyright ownership.  The ASF licenses this file\r\n- to you under the Apache License, Version 2.0 (the\r\n- \"License\"); you may not use this file except in compliance\r\n- with the License.  You may obtain a copy of the License at\r\n- \r\n- http://www.apache.org/licenses/LICENSE-2.0\r\n- \r\n- Unless required by applicable law or agreed to in writing,\r\n- software distributed under the License is distributed on an\r\n- \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- KIND, either express or implied.  See the License for the\r\n- specific language governing permissions and limitations\r\n- under the License.   \r\n--->\r\n-<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence\r\n-    http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd\" version=\"1.0\">\r\n-\r\n-\t<persistence-unit name=\"TestConv\" transaction-type=\"RESOURCE_LOCAL\">\r\n-\t\t<provider>org.apache.openjpa.persistence.PersistenceProviderImpl</provider>\r\n-\t\t<!-- <class>org.apache.openjpa.persistence.kernel.common.apps.AbstractMappedAppIdSuper</class> -->\r\n-\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.AImplB</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.AllFieldsTypeTest</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.AllFieldTypesTest</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.AppIdClassString</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.AppIdHolder</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.AppIdSubB</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.AbstractMappedAppIdSuper</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.AppIdSubC</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.AppIdSubD</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.AppIdSubE</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.AppIdSubF</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.ArraysTest</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.AttachA</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.AttachB</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.AttachC</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.AttachD</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.AttachE</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.AttachF</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.AttachVersionA</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.AttachVersionB</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.AttachVersionC</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.BlobTest</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.ByteArray</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.CalendarFields</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.ColumnIOPC</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.ComplexEmbeddedPC</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.ConcreteMappedAppIdSub</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.DateVersion</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.DependentFieldsPC</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.DetachSMPC</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.EmbeddedOwnerPC</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.EmbeddedPC</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.Entity1</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.Entity2</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.ExternalValues</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.FetchGroupTestObject</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.FetchGroupTestObjectChild</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.Inner</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.InstanceCallbacksTest</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.ModInstanceCallbackTests</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.InterfaceHolder</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.InterfaceTestImpl1</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.InterfaceTestImpl2</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.InterfaceTestImpl3</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.InterfaceTestImpl4</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.InverseA</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.InverseB</class>\r\n-        \t<class>org.apache.openjpa.persistence.kernel.common.apps.Lobs</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.LockGroupPC</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.LockGroupPC2</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.LockGroupPCKnownSubclass</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.ManagedInterfaceOwner</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.ManagedInterfaceOwnerAppId</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.MapElementPC</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.MapElementPCChild</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.MixedInterfaceImpl</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.NonMappedInterfaceImpl</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.ObjectCollectionHolder</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.OuterJoinValuePC</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.PCAddress</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.PCClassPC</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.PCCompany</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.PCCountry</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.PCDepartment</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.PCDirectory</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.PCEmployee</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.PCFile</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.PCPerson</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.PersistenceAware</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.PersistentMapHolder</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.ProxiesPC</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.RecursivelyEmbeddedPC</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.RuntimeTest1</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.RuntimeTest2</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.RuntimeTest3</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.RuntimeTest4</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.RuntimeTest5</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.SCOTest</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.SecondaryTab</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.SequenceAssigned</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.SequenceAssigned2</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.SequenceAssigned3</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.SingleIdByte</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.SingleIdChar</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.SingleIdInt</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.SingleIdLong</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.SingleIdShort</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.SingleIdString</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.SingleIdWrapper</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.ValueStrategyPC</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.TestEJBLobs$Inner</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.TestEJBLobs$Inner2</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.TestStaticInnerClasses$Inner</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.TestEJBNoPersistentFields$Nholder</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.TestEJBNoPersistentFields$NoPersistentFieldsPC</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.ModRuntimeTest1</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.ModRuntimeTest2</class>\r\n-\t</persistence-unit>\r\n-</persistence>\r\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+ \n+ http://www.apache.org/licenses/LICENSE-2.0\n+ \n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.   \n+-->\n+<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence\n+    http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd\" version=\"1.0\">\n+\n+\t<persistence-unit name=\"TestConv\" transaction-type=\"RESOURCE_LOCAL\">\n+\t\t<provider>org.apache.openjpa.persistence.PersistenceProviderImpl</provider>\n+\t\t<!-- <class>org.apache.openjpa.persistence.kernel.common.apps.AbstractMappedAppIdSuper</class> -->\n+\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.AImplB</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.AllFieldsTypeTest</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.AllFieldTypesTest</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.AppIdClassString</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.AppIdHolder</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.AppIdSubB</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.AbstractMappedAppIdSuper</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.AppIdSubC</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.AppIdSubD</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.AppIdSubE</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.AppIdSubF</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.ArraysTest</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.AttachA</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.AttachB</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.AttachC</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.AttachD</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.AttachE</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.AttachF</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.AttachVersionA</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.AttachVersionB</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.AttachVersionC</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.BlobTest</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.ByteArray</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.CalendarFields</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.ColumnIOPC</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.ComplexEmbeddedPC</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.ConcreteMappedAppIdSub</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.DateVersion</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.DependentFieldsPC</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.DetachSMPC</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.EmbeddedOwnerPC</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.EmbeddedPC</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.Entity1</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.Entity2</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.ExternalValues</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.FetchGroupTestObject</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.FetchGroupTestObjectChild</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.Inner</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.InstanceCallbacksTest</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.ModInstanceCallbackTests</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.InterfaceHolder</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.InterfaceTestImpl1</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.InterfaceTestImpl2</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.InterfaceTestImpl3</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.InterfaceTestImpl4</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.InverseA</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.InverseB</class>\n+        \t<class>org.apache.openjpa.persistence.kernel.common.apps.Lobs</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.LockGroupPC</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.LockGroupPC2</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.LockGroupPCKnownSubclass</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.ManagedInterfaceOwner</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.ManagedInterfaceOwnerAppId</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.MapElementPC</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.MapElementPCChild</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.MixedInterfaceImpl</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.NonMappedInterfaceImpl</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.ObjectCollectionHolder</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.OuterJoinValuePC</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.PCAddress</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.PCClassPC</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.PCCompany</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.PCCountry</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.PCDepartment</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.PCDirectory</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.PCEmployee</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.PCFile</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.PCPerson</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.PersistenceAware</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.PersistentMapHolder</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.ProxiesPC</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.RecursivelyEmbeddedPC</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.RuntimeTest1</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.RuntimeTest2</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.RuntimeTest3</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.RuntimeTest4</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.RuntimeTest5</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.SCOTest</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.SecondaryTab</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.SequenceAssigned</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.SequenceAssigned2</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.SequenceAssigned3</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.SingleIdByte</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.SingleIdChar</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.SingleIdInt</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.SingleIdLong</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.SingleIdShort</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.SingleIdString</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.SingleIdWrapper</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.ValueStrategyPC</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.TestEJBLobs$Inner</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.TestEJBLobs$Inner2</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.TestStaticInnerClasses$Inner</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.TestEJBNoPersistentFields$Nholder</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.TestEJBNoPersistentFields$NoPersistentFieldsPC</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.ModRuntimeTest1</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.ModRuntimeTest2</class>\n+\t</persistence-unit>\n+</persistence>"},{"sha":"4ad1096e65f59fbe995d30179761e032465137c2","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/meta/common/apps/META-INF/persistence.xml","status":"modified","additions":47,"deletions":47,"changes":94,"blob_url":"https://github.com/apache/openjpa/blob/b546423063fe7c1889f7764393102f423a699483/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/meta/common/apps/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/b546423063fe7c1889f7764393102f423a699483/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/meta/common/apps/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/meta/common/apps/META-INF/persistence.xml?ref=b546423063fe7c1889f7764393102f423a699483","patch":"@@ -1,47 +1,47 @@\n-<!--\r\n- Licensed to the Apache Software Foundation (ASF) under one\r\n- or more contributor license agreements.  See the NOTICE file\r\n- distributed with this work for additional information\r\n- regarding copyright ownership.  The ASF licenses this file\r\n- to you under the Apache License, Version 2.0 (the\r\n- \"License\"); you may not use this file except in compliance\r\n- with the License.  You may obtain a copy of the License at\r\n- \r\n- http://www.apache.org/licenses/LICENSE-2.0\r\n- \r\n- Unless required by applicable law or agreed to in writing,\r\n- software distributed under the License is distributed on an\r\n- \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- KIND, either express or implied.  See the License for the\r\n- specific language governing permissions and limitations\r\n- under the License.   \r\n--->\r\n-<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence\r\n-    http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd\" version=\"1.0\">\r\n-\r\n-\t<persistence-unit name=\"TestConv\" transaction-type=\"RESOURCE_LOCAL\">\r\n-\t\t<provider>org.apache.openjpa.persistence.PersistenceProviderImpl</provider>\r\n-\t\t<class>org.apache.openjpa.persistence.meta.common.apps.ExternalValues</class>\r\n-\t\t<class>org.apache.openjpa.persistence.meta.common.apps.FieldOrderPC</class>\r\n-\t\t<class>org.apache.openjpa.persistence.meta.common.apps.FieldOrderPCSubclass</class>\r\n-\t\t<class>org.apache.openjpa.persistence.meta.common.apps.MetaTest1</class>\r\n-\t\t<class>org.apache.openjpa.persistence.meta.common.apps.MetaTest1$Inner</class>\r\n-\t\t<class>org.apache.openjpa.persistence.meta.common.apps.MetaTest2</class>\r\n-\t\t<class>org.apache.openjpa.persistence.meta.common.apps.MetaTest3</class>\r\n-\t\t<class>org.apache.openjpa.persistence.meta.common.apps.MetaTest4</class>\r\n-\t\t<class>org.apache.openjpa.persistence.meta.common.apps.MetaTest5</class>\r\n-\t\t<class>org.apache.openjpa.persistence.meta.common.apps.MetaTest6</class>\r\n-\t\t<class>org.apache.openjpa.persistence.meta.common.apps.NonPersistentFieldsPC</class>\r\n-\t\t<class>org.apache.openjpa.persistence.meta.common.apps.OrderByPC</class>\r\n-\t\t<class>org.apache.openjpa.persistence.meta.common.apps.OrderByPCRel</class>\r\n-\t\t<class>org.apache.openjpa.persistence.meta.common.apps.OrderByPCRelSub</class>\r\n-\t\t<class>org.apache.openjpa.persistence.meta.common.apps.RuntimeTest1</class>\r\n-\t\t<class>org.apache.openjpa.persistence.meta.common.apps.RuntimeTest2</class>\r\n-\t\t<class>org.apache.openjpa.persistence.meta.common.apps.RuntimeTest3</class>\r\n-\t\t<class>org.apache.openjpa.persistence.meta.common.apps.SequenceAssigned</class>\r\n-\t\t<class>org.apache.openjpa.persistence.meta.common.apps.SequenceAssigned2</class>\r\n-\t\t<class>org.apache.openjpa.persistence.meta.common.apps.SequenceAssigned3</class>\r\n-\t\t<class>org.apache.openjpa.persistence.meta.common.apps.ValueStrategyPC</class>\r\n-\t\t<class>org.apache.openjpa.persistence.meta.common.apps.TransactionalClassPC</class>\r\n-\t</persistence-unit>\r\n-</persistence>\r\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+ \n+ http://www.apache.org/licenses/LICENSE-2.0\n+ \n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.   \n+-->\n+<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence\n+    http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd\" version=\"1.0\">\n+\n+\t<persistence-unit name=\"TestConv\" transaction-type=\"RESOURCE_LOCAL\">\n+\t\t<provider>org.apache.openjpa.persistence.PersistenceProviderImpl</provider>\n+\t\t<class>org.apache.openjpa.persistence.meta.common.apps.ExternalValues</class>\n+\t\t<class>org.apache.openjpa.persistence.meta.common.apps.FieldOrderPC</class>\n+\t\t<class>org.apache.openjpa.persistence.meta.common.apps.FieldOrderPCSubclass</class>\n+\t\t<class>org.apache.openjpa.persistence.meta.common.apps.MetaTest1</class>\n+\t\t<class>org.apache.openjpa.persistence.meta.common.apps.MetaTest1$Inner</class>\n+\t\t<class>org.apache.openjpa.persistence.meta.common.apps.MetaTest2</class>\n+\t\t<class>org.apache.openjpa.persistence.meta.common.apps.MetaTest3</class>\n+\t\t<class>org.apache.openjpa.persistence.meta.common.apps.MetaTest4</class>\n+\t\t<class>org.apache.openjpa.persistence.meta.common.apps.MetaTest5</class>\n+\t\t<class>org.apache.openjpa.persistence.meta.common.apps.MetaTest6</class>\n+\t\t<class>org.apache.openjpa.persistence.meta.common.apps.NonPersistentFieldsPC</class>\n+\t\t<class>org.apache.openjpa.persistence.meta.common.apps.OrderByPC</class>\n+\t\t<class>org.apache.openjpa.persistence.meta.common.apps.OrderByPCRel</class>\n+\t\t<class>org.apache.openjpa.persistence.meta.common.apps.OrderByPCRelSub</class>\n+\t\t<class>org.apache.openjpa.persistence.meta.common.apps.RuntimeTest1</class>\n+\t\t<class>org.apache.openjpa.persistence.meta.common.apps.RuntimeTest2</class>\n+\t\t<class>org.apache.openjpa.persistence.meta.common.apps.RuntimeTest3</class>\n+\t\t<class>org.apache.openjpa.persistence.meta.common.apps.SequenceAssigned</class>\n+\t\t<class>org.apache.openjpa.persistence.meta.common.apps.SequenceAssigned2</class>\n+\t\t<class>org.apache.openjpa.persistence.meta.common.apps.SequenceAssigned3</class>\n+\t\t<class>org.apache.openjpa.persistence.meta.common.apps.ValueStrategyPC</class>\n+\t\t<class>org.apache.openjpa.persistence.meta.common.apps.TransactionalClassPC</class>\n+\t</persistence-unit>\n+</persistence>"},{"sha":"46899ec93da8aa9f73231f6066892e7741908909","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/query/common/apps/META-INF/persistence.xml","status":"modified","additions":50,"deletions":50,"changes":100,"blob_url":"https://github.com/apache/openjpa/blob/b546423063fe7c1889f7764393102f423a699483/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/query/common/apps/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/b546423063fe7c1889f7764393102f423a699483/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/query/common/apps/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/query/common/apps/META-INF/persistence.xml?ref=b546423063fe7c1889f7764393102f423a699483","patch":"@@ -1,50 +1,50 @@\n-<!--\r\n- Licensed to the Apache Software Foundation (ASF) under one\r\n- or more contributor license agreements.  See the NOTICE file\r\n- distributed with this work for additional information\r\n- regarding copyright ownership.  The ASF licenses this file\r\n- to you under the Apache License, Version 2.0 (the\r\n- \"License\"); you may not use this file except in compliance\r\n- with the License.  You may obtain a copy of the License at\r\n- \r\n- http://www.apache.org/licenses/LICENSE-2.0\r\n- \r\n- Unless required by applicable law or agreed to in writing,\r\n- software distributed under the License is distributed on an\r\n- \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- KIND, either express or implied.  See the License for the\r\n- specific language governing permissions and limitations\r\n- under the License.   \r\n--->\r\n-<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence\r\n-    http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd\" version=\"1.0\">\r\n-\t<persistence-unit name=\"TestConv\" transaction-type=\"RESOURCE_LOCAL\">\r\n-\t\t<provider>org.apache.openjpa.persistence.PersistenceProviderImpl</provider>\r\n-        <class>org.apache.openjpa.persistence.query.common.apps.Entity1</class>\r\n-        <class>org.apache.openjpa.persistence.query.common.apps.Entity2</class>\r\n-\t\t<class>org.apache.openjpa.persistence.query.common.apps.RuntimeTest1</class>\r\n-\t\t<class>org.apache.openjpa.persistence.query.common.apps.RuntimeTest2</class>\r\n-\t\t<class>org.apache.openjpa.persistence.query.common.apps.RuntimeTest3</class>\r\n-\t\t<class>org.apache.openjpa.persistence.query.common.apps.RuntimeTest4</class>\r\n-\t\t<class>org.apache.openjpa.persistence.query.common.apps.RuntimeTest5</class>\r\n-\t\t<class>org.apache.openjpa.persistence.query.common.apps.SimpleAppIdPC</class>\r\n-\t\t<class>org.apache.openjpa.persistence.query.common.apps.CompoundAppIdPC</class>\r\n-\t\t<class>org.apache.openjpa.persistence.query.common.apps.QueryTest1</class>\r\n-\t\t<class>org.apache.openjpa.persistence.query.common.apps.QueryTest2</class>\r\n-\t\t<class>org.apache.openjpa.persistence.query.common.apps.QueryTest3</class>\r\n-\t\t<class>org.apache.openjpa.persistence.query.common.apps.QueryTest4</class>\r\n-\t\t<class>org.apache.openjpa.persistence.query.common.apps.CompoundAppIdPC</class>\r\n-\t\t<class>org.apache.openjpa.persistence.query.common.apps.ComplexA</class>\r\n-\t\t<class>org.apache.openjpa.persistence.query.common.apps.ComplexB</class>\r\n-\t\t<class>org.apache.openjpa.persistence.query.common.apps.ComplexC</class>\r\n-\t\t<class>org.apache.openjpa.persistence.query.common.apps.ComplexD</class>\r\n-\t\t<class>org.apache.openjpa.persistence.query.common.apps.ComplexE</class>\r\n-\t\t<class>org.apache.openjpa.persistence.query.common.apps.ComplexF</class>\r\n-\t\t<class>org.apache.openjpa.persistence.query.common.apps.ComplexG</class>\r\n-\t\t<class>org.apache.openjpa.persistence.query.common.apps.CircularFKPC</class>\r\n-\t\t<class>org.apache.openjpa.persistence.query.common.apps.CircularFKPC2</class>\r\n-\t\t<class>org.apache.openjpa.persistence.query.common.apps.ModRuntimeTest1</class>\r\n-\t\t<class>org.apache.openjpa.persistence.query.common.apps.ModRuntimeTest2</class>\r\n-        <class>org.apache.openjpa.persistence.query.common.apps.QTimeout</class>\r\n-\t</persistence-unit>\r\n-</persistence>\r\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+ \n+ http://www.apache.org/licenses/LICENSE-2.0\n+ \n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.   \n+-->\n+<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence\n+    http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd\" version=\"1.0\">\n+\t<persistence-unit name=\"TestConv\" transaction-type=\"RESOURCE_LOCAL\">\n+\t\t<provider>org.apache.openjpa.persistence.PersistenceProviderImpl</provider>\n+        <class>org.apache.openjpa.persistence.query.common.apps.Entity1</class>\n+        <class>org.apache.openjpa.persistence.query.common.apps.Entity2</class>\n+\t\t<class>org.apache.openjpa.persistence.query.common.apps.RuntimeTest1</class>\n+\t\t<class>org.apache.openjpa.persistence.query.common.apps.RuntimeTest2</class>\n+\t\t<class>org.apache.openjpa.persistence.query.common.apps.RuntimeTest3</class>\n+\t\t<class>org.apache.openjpa.persistence.query.common.apps.RuntimeTest4</class>\n+\t\t<class>org.apache.openjpa.persistence.query.common.apps.RuntimeTest5</class>\n+\t\t<class>org.apache.openjpa.persistence.query.common.apps.SimpleAppIdPC</class>\n+\t\t<class>org.apache.openjpa.persistence.query.common.apps.CompoundAppIdPC</class>\n+\t\t<class>org.apache.openjpa.persistence.query.common.apps.QueryTest1</class>\n+\t\t<class>org.apache.openjpa.persistence.query.common.apps.QueryTest2</class>\n+\t\t<class>org.apache.openjpa.persistence.query.common.apps.QueryTest3</class>\n+\t\t<class>org.apache.openjpa.persistence.query.common.apps.QueryTest4</class>\n+\t\t<class>org.apache.openjpa.persistence.query.common.apps.CompoundAppIdPC</class>\n+\t\t<class>org.apache.openjpa.persistence.query.common.apps.ComplexA</class>\n+\t\t<class>org.apache.openjpa.persistence.query.common.apps.ComplexB</class>\n+\t\t<class>org.apache.openjpa.persistence.query.common.apps.ComplexC</class>\n+\t\t<class>org.apache.openjpa.persistence.query.common.apps.ComplexD</class>\n+\t\t<class>org.apache.openjpa.persistence.query.common.apps.ComplexE</class>\n+\t\t<class>org.apache.openjpa.persistence.query.common.apps.ComplexF</class>\n+\t\t<class>org.apache.openjpa.persistence.query.common.apps.ComplexG</class>\n+\t\t<class>org.apache.openjpa.persistence.query.common.apps.CircularFKPC</class>\n+\t\t<class>org.apache.openjpa.persistence.query.common.apps.CircularFKPC2</class>\n+\t\t<class>org.apache.openjpa.persistence.query.common.apps.ModRuntimeTest1</class>\n+\t\t<class>org.apache.openjpa.persistence.query.common.apps.ModRuntimeTest2</class>\n+        <class>org.apache.openjpa.persistence.query.common.apps.QTimeout</class>\n+\t</persistence-unit>\n+</persistence>"},{"sha":"c687dc01998e7aa52e8f72ca1eb6f0135f8b66dc","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/xml/persistence-without-xsd.xml","status":"modified","additions":27,"deletions":27,"changes":54,"blob_url":"https://github.com/apache/openjpa/blob/b546423063fe7c1889f7764393102f423a699483/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/xml/persistence-without-xsd.xml","raw_url":"https://github.com/apache/openjpa/raw/b546423063fe7c1889f7764393102f423a699483/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/xml/persistence-without-xsd.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/xml/persistence-without-xsd.xml?ref=b546423063fe7c1889f7764393102f423a699483","patch":"@@ -1,28 +1,28 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n-<!--\r\n- Licensed to the Apache Software Foundation (ASF) under one\r\n- or more contributor license agreements.  See the NOTICE file\r\n- distributed with this work for additional information\r\n- regarding copyright ownership.  The ASF licenses this file\r\n- to you under the Apache License, Version 2.0 (the\r\n- \"License\"); you may not use this file except in compliance\r\n- with the License.  You may obtain a copy of the License at\r\n-\r\n- http://www.apache.org/licenses/LICENSE-2.0\r\n-\r\n- Unless required by applicable law or agreed to in writing,\r\n- software distributed under the License is distributed on an\r\n- \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- KIND, either express or implied.  See the License for the\r\n- specific language governing permissions and limitations\r\n- under the License.\r\n--->\r\n-<persistence>\r\n-    <persistence-unit name=\"incorrect-ordering-and-no-xsd\">\r\n-        <properties>\r\n-            <property name=\"openjpa.Id\" value=\"incorrect-ordering-pu\"/>\r\n-        </properties>\r\n-        <class>org.apache.openjpa.persistence.xml.SimpleXmlEntity</class>\r\n-        <provider>org.apache.openjpa.persistence.PersistenceProviderImpl</provider>\r\n-    </persistence-unit>\r\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+\n+ http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.\n+-->\n+<persistence>\n+    <persistence-unit name=\"incorrect-ordering-and-no-xsd\">\n+        <properties>\n+            <property name=\"openjpa.Id\" value=\"incorrect-ordering-pu\"/>\n+        </properties>\n+        <class>org.apache.openjpa.persistence.xml.SimpleXmlEntity</class>\n+        <provider>org.apache.openjpa.persistence.PersistenceProviderImpl</provider>\n+    </persistence-unit>\n </persistence>\n\\ No newline at end of file"},{"sha":"34434cb5ea2a88d1efafa8effef0ba19688c43ef","filename":"openjpa-project/assembly.xml","status":"modified","additions":102,"deletions":102,"changes":204,"blob_url":"https://github.com/apache/openjpa/blob/b546423063fe7c1889f7764393102f423a699483/openjpa-project/assembly.xml","raw_url":"https://github.com/apache/openjpa/raw/b546423063fe7c1889f7764393102f423a699483/openjpa-project/assembly.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/assembly.xml?ref=b546423063fe7c1889f7764393102f423a699483","patch":"@@ -1,102 +1,102 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n-<!--\r\n- Licensed to the Apache Software Foundation (ASF) under one\r\n- or more contributor license agreements.  See the NOTICE file\r\n- distributed with this work for additional information\r\n- regarding copyright ownership.  The ASF licenses this file\r\n- to you under the Apache License, Version 2.0 (the\r\n- \"License\"); you may not use this file except in compliance\r\n- with the License.  You may obtain a copy of the License at\r\n- \r\n- http://www.apache.org/licenses/LICENSE-2.0\r\n- \r\n- Unless required by applicable law or agreed to in writing,\r\n- software distributed under the License is distributed on an\r\n- \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- KIND, either express or implied.  See the License for the\r\n- specific language governing permissions and limitations\r\n- under the License.   \r\n--->\r\n-<assembly>\r\n-    <id>binary</id>\r\n-    <formats>\r\n-        <format>zip</format>\r\n-    </formats>\r\n-    <includeBaseDirectory>true</includeBaseDirectory>\r\n-    <fileSets>\r\n-        <fileSet>\r\n-            <directory>target/aggregate</directory>\r\n-            <outputDirectory>/</outputDirectory>\r\n-        </fileSet>\r\n-        <fileSet>\r\n-            <includes>\r\n-                <include>README</include>\r\n-                <include>DISCLAIMER</include>\r\n-                <include>LICENSE</include>\r\n-                <include>STATUS</include>\r\n-                <include>NOTICE</include>\r\n-                <include>README.txt</include>\r\n-                <include>DISCLAIMER.txt</include>\r\n-                <include>LICENSE.txt</include>\r\n-                <include>STATUS.txt</include>\r\n-                <include>NOTICE.txt</include>\r\n-                <include>RELEASE-NOTES</include>\r\n-                <include>RELEASE-NOTES.html</include>\r\n-                <include>RELEASE-NOTES.txt</include>\r\n-                <include>CHANGES</include>\r\n-                <include>CHANGES.txt</include>\r\n-            </includes>\r\n-        </fileSet>\r\n-        <!--\r\n-        <fileSet>\r\n-            <directory>licenses</directory>\r\n-            <outputDirectory>/lib</outputDirectory>\r\n-            <includes>\r\n-                <include>*</include>\r\n-            </includes>\r\n-        </fileSet>\r\n-        <fileSet>\r\n-            <directory>target/examples</directory>\r\n-            <outputDirectory>/examples</outputDirectory>\r\n-        </fileSet>\r\n-        -->\r\n-        <fileSet>\r\n-            <directory>target/manual</directory>\r\n-            <outputDirectory>docs/manual</outputDirectory>\r\n-        </fileSet>\r\n-        <fileSet>\r\n-            <directory>../target/site/apidocs</directory>\r\n-            <outputDirectory>docs/javadoc</outputDirectory>\r\n-        </fileSet>\r\n-        <fileSet>\r\n-            <directory>../openjpa-examples/src/main/java</directory>\r\n-            <outputDirectory>examples</outputDirectory>\r\n-        </fileSet>\r\n-    </fileSets>\r\n-    <dependencySets>\r\n-        <dependencySet>\r\n-            <outputDirectory>/</outputDirectory>\r\n-            <unpack>false</unpack>\r\n-            <scope>runtime</scope>\r\n-            <includes>\r\n-                <include>org.apache.openjpa:openjpa</include>\r\n-            </includes>\r\n-        </dependencySet>\r\n-        <dependencySet>\r\n-            <outputDirectory>/lib</outputDirectory>\r\n-            <unpack>false</unpack>\r\n-            <scope>runtime</scope>\r\n-            <includes>\r\n-                <include>net.sourceforge.serp:serp</include>\r\n-                <include>org.apache.derby:derby</include>\r\n-\r\n-                <include>commons-lang:commons-lang</include>\r\n-                <include>commons-collections:commons-collections</include>\r\n-                <include>commons-pool:commons-pool</include>\r\n-\r\n-                <include>org.apache.geronimo.specs:geronimo-jta_1.1_spec</include>\r\n-                <include>org.apache.geronimo.specs:geronimo-jpa_2.0_spec</include>\r\n-            </includes>\r\n-        </dependencySet>\r\n-    </dependencySets>\r\n-</assembly>\r\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+ \n+ http://www.apache.org/licenses/LICENSE-2.0\n+ \n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.   \n+-->\n+<assembly>\n+    <id>binary</id>\n+    <formats>\n+        <format>zip</format>\n+    </formats>\n+    <includeBaseDirectory>true</includeBaseDirectory>\n+    <fileSets>\n+        <fileSet>\n+            <directory>target/aggregate</directory>\n+            <outputDirectory>/</outputDirectory>\n+        </fileSet>\n+        <fileSet>\n+            <includes>\n+                <include>README</include>\n+                <include>DISCLAIMER</include>\n+                <include>LICENSE</include>\n+                <include>STATUS</include>\n+                <include>NOTICE</include>\n+                <include>README.txt</include>\n+                <include>DISCLAIMER.txt</include>\n+                <include>LICENSE.txt</include>\n+                <include>STATUS.txt</include>\n+                <include>NOTICE.txt</include>\n+                <include>RELEASE-NOTES</include>\n+                <include>RELEASE-NOTES.html</include>\n+                <include>RELEASE-NOTES.txt</include>\n+                <include>CHANGES</include>\n+                <include>CHANGES.txt</include>\n+            </includes>\n+        </fileSet>\n+        <!--\n+        <fileSet>\n+            <directory>licenses</directory>\n+            <outputDirectory>/lib</outputDirectory>\n+            <includes>\n+                <include>*</include>\n+            </includes>\n+        </fileSet>\n+        <fileSet>\n+            <directory>target/examples</directory>\n+            <outputDirectory>/examples</outputDirectory>\n+        </fileSet>\n+        -->\n+        <fileSet>\n+            <directory>target/manual</directory>\n+            <outputDirectory>docs/manual</outputDirectory>\n+        </fileSet>\n+        <fileSet>\n+            <directory>../target/site/apidocs</directory>\n+            <outputDirectory>docs/javadoc</outputDirectory>\n+        </fileSet>\n+        <fileSet>\n+            <directory>../openjpa-examples/src/main/java</directory>\n+            <outputDirectory>examples</outputDirectory>\n+        </fileSet>\n+    </fileSets>\n+    <dependencySets>\n+        <dependencySet>\n+            <outputDirectory>/</outputDirectory>\n+            <unpack>false</unpack>\n+            <scope>runtime</scope>\n+            <includes>\n+                <include>org.apache.openjpa:openjpa</include>\n+            </includes>\n+        </dependencySet>\n+        <dependencySet>\n+            <outputDirectory>/lib</outputDirectory>\n+            <unpack>false</unpack>\n+            <scope>runtime</scope>\n+            <includes>\n+                <include>net.sourceforge.serp:serp</include>\n+                <include>org.apache.derby:derby</include>\n+\n+                <include>commons-lang:commons-lang</include>\n+                <include>commons-collections:commons-collections</include>\n+                <include>commons-pool:commons-pool</include>\n+\n+                <include>org.apache.geronimo.specs:geronimo-jta_1.1_spec</include>\n+                <include>org.apache.geronimo.specs:geronimo-jpa_2.0_spec</include>\n+            </includes>\n+        </dependencySet>\n+    </dependencySets>\n+</assembly>"},{"sha":"1a0f965d43cbdedcb78a2258002215a80f95ce2c","filename":"openjpa-project/src/doc/manual/jpa_overview_arch.xml","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/b546423063fe7c1889f7764393102f423a699483/openjpa-project/src/doc/manual/jpa_overview_arch.xml","raw_url":"https://github.com/apache/openjpa/raw/b546423063fe7c1889f7764393102f423a699483/openjpa-project/src/doc/manual/jpa_overview_arch.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/jpa_overview_arch.xml?ref=b546423063fe7c1889f7764393102f423a699483","patch":"@@ -195,8 +195,8 @@ container.\n             Interaction of Interfaces Outside Container\n         </title>\n <programlisting>\n-  // get an EntityManagerFactory using the Persistence class\r\n-  // It is not recommended to obtain a factory often, as construction of a\r\n+  // get an EntityManagerFactory using the Persistence class\n+  // It is not recommended to obtain a factory often, as construction of a\n   // factory is a costly operation. Typically you will like to cache  \n   // a factory and then refer it for repeated use\n   EntityManagerFactory factory = Persistence.createEntityManagerFactory(null);\n@@ -209,9 +209,9 @@ container.\n \n   // query for all employees who work in our research division\n   // and put in over 40 hours a week average\n-  Query query = em.createQuery(\"SELECT e \" +\r\n-                               \"  FROM Employee e \" +\r\n-                               \" WHERE e.division.name = 'Research' \" +\r\n+  Query query = em.createQuery(\"SELECT e \" +\n+                               \"  FROM Employee e \" +\n+                               \" WHERE e.division.name = 'Research' \" +\n                                \"   AND e.avgHours &gt; 40\");\n   List results = query.getResultList ();\n \n@@ -222,8 +222,8 @@ container.\n   }\n \n   // commit will detect all updated entities and save them in database\n-  em.getTransaction().commit();\r\n-\r\n+  em.getTransaction().commit();\n+\n   // free the resources\n   em.close();\n </programlisting>"},{"sha":"d9ec0461cb77f2bbf6c8fab8c958b02795455aba","filename":"openjpa-project/src/doc/manual/jpa_overview_criteria.xml","status":"modified","additions":114,"deletions":114,"changes":228,"blob_url":"https://github.com/apache/openjpa/blob/b546423063fe7c1889f7764393102f423a699483/openjpa-project/src/doc/manual/jpa_overview_criteria.xml","raw_url":"https://github.com/apache/openjpa/raw/b546423063fe7c1889f7764393102f423a699483/openjpa-project/src/doc/manual/jpa_overview_criteria.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/jpa_overview_criteria.xml?ref=b546423063fe7c1889f7764393102f423a699483","patch":"@@ -37,120 +37,120 @@\n             Query\n         </see>\n     </indexterm>\n-    <para>\r\n-    JPA 2.0 Specification introduces a new API to define queries dynamically\r\n-    via construction of an object-based \r\n-    <classname>javax.persistence.QueryDefinition</classname> instance, rather\r\n-    than string-based approach used in JPQL (Java Persistence Query Language).\r\n-    This dynamic query definition capability, referred as Criteria API, is \r\n-    based on the abstract persistent schema of the entities, their embedded\r\n-    objects and their relationships. The syntax is designed to construct a\r\n-    <emphasis>Query Tree</emphasis> whose nodes represent the semantic query\r\n-    elements such as projections, conditional predicates of WHERE clause or\r\n-    GROUP BY elements etc. \r\n-    </para>\r\n-    \r\n-    <section>\r\n-    \t<title>Constructing a QueryDefinition</title>\r\n-    \t<para>\r\n-    \tThe QueryBuilder interface is the factory for QueryDefinition. A\r\n-    \tQueryBuilder is obtained from either the EntityManagerFactory or \r\n-    \tthe EntityManager as follows:\r\n-    \t<programlisting>\r\n-EntityManager em = ... ; \r\n-QueryBuilder queryBuilder = em.getQueryBuilder();\r\n-QueryDefinition qdef = queryBuilder.createQueryDefinition();\r\n-    \t</programlisting>\r\n-    \tThe first step in constructing a query definition is specification of \r\n-    \tquery roots.  Query roots specify the domain objects on which the query \r\n-    \tis evaluated. Query root is an instance of the DomainObject interface. A\r\n-    \tquery root is added to a QueryDefinition by \r\n-    \t<methodname>addRoot(Class c)</methodname> method.\r\n-    \t<programlisting>\r\n-    \tDomainObject customer = qdef.addRoot(Customer.class);\r\n-    \t</programlisting>\r\n-    \tOften a query definition has a single root, so the \r\n-    \tQueryBuilder interface allows to construct and add\r\n-    \ta root via a single method.\r\n-    \t<programlisting>\r\n-DomainObject customer = queryBuilder.createQueryDefinition(Customer.class);    \t\r\n-    \t</programlisting>\r\n-    \tA query domain can be further refined by joining to other domain objects.\r\n-    \tFor example, for the above query definition to operate over customers \r\n-    \tand their orders, use <methodname>join(String attribute)</methodname>:\r\n-\t\t<programlisting>\r\n-DomainObject order = customer.join(\"orders\");\r\n-\t\t</programlisting>  \r\n-\t\tThe condition of a query definition is set via \r\n-\t\t<methodname>where(Predicate p)</methodname> where the argument \r\n-\t\tdesignates a conditional predicate. Conditional predicates are often\r\n-\t\tcomposed of one or more comparisons between the attribute values of\r\n-\t\tthe domain objects and some variable. For example, to select the\r\n-\t\tCustomers whose name is <emphasis>John Doe</emphasis> and has \r\n-\t\torders that are not yet delivered, you can build the predicate and set  \r\n-\t\tit to the query definition as\r\n-\t\t<programlisting>\r\n-qdef.where(customer.get(\"name\").equal(\"John Doe\")\r\n-      .and(order.get(\"status\").equal(OrderStatus.DELIVERED).not()));\r\n-\t\t</programlisting>\r\n-\t\tThe <methodname>select()</methodname> method defines the result of the\r\n-\t\tquery. If left unspecified, the select projection is assumed to be the\r\n-\t\troot domain object. However, you can specify the selected projections\r\n-\t\texplicitly as a list \r\n-\t\t<programlisting>\r\n-qdef.select(customer.get(\"name\"), order.get(\"status\"));\r\n-\t\t</programlisting>\r\n-\t\tAttribute of a domain object is specified by navigating via \r\n-\t\t<methodname>get(String attr)</methodname>. The attribute \r\n-\t\t<emphasis>should</emphasis> refer\r\n-\t\tto a valid persistent property of the receiving domain object, however\r\n-\t\tno such validation is enforced during the construction of the query \r\n-\t\tdefinition. All validation is deferred till query is actually executed.\r\n-    \t</para>\r\n-    </section> \r\n-    \r\n-    <section>\r\n-    <title>Executing a QueryDefinition</title>\r\n-    <para>\r\n-    A QueryDefinition is executed in a similar fashion of a string-based JPQL\r\n-    query via the EntityManager and Query interfaces.\r\n-    <programlisting>\r\n-EntityManager em = ...\r\n-Query query = em.createQuery(qdef);\r\n-List result = query.getResultList();    \r\n-    </programlisting>\r\n-    </para>\r\n-    <para>\r\n-    A query definition can use named parameters, and the parameter values are\r\n-    set as usual in the Query instance. \r\n-    </para>\r\n-    \r\n-    <para>\r\n-    The JPA 2.0 Specification on Criteria API is evolving and hence for an\r\n-    up-to-date version of the API, please consult the  \r\n-    <ulink url=\"http://jcp.org/aboutJava/communityprocess/pr/jsr317/index.html\">\r\n-    public draft</ulink>.\r\n-    </para>\r\n-    </section>\r\n-    \r\n-    <section>\r\n-    <title>Extension to Criteria API</title>\r\n-    <para>\r\n-    Criteria API has provided an alternative means to string-based JPQL to \r\n-    execute a query. However, JPA 2.0 Specification has not explicitly specified \r\n-    any equivalence between a dynamically constructed QueryDefinition and\r\n-    a JPQL string. OpenJPA provides a mechanism to convert a QueryDefinition to\r\n-    an equivalent JPQL query string via the extended OpenJPAQueryBuilder API.\r\n-    <programlisting>\r\n-    \tpublic interface OpenJPAQueryBuilder extends QueryBuilder {\r\n-\t\t\t/**\r\n-\t\t \t * Gets equivalent JPQL String for the given QueryDefinition.\r\n-\t \t\t*/\r\n-\t\t\tpublic String toJPQL(QueryDefinition qdef);\r\n-\t\t}\r\n-\t</programlisting>\r\n-    \r\n-    </para>\r\n+    <para>\n+    JPA 2.0 Specification introduces a new API to define queries dynamically\n+    via construction of an object-based \n+    <classname>javax.persistence.QueryDefinition</classname> instance, rather\n+    than string-based approach used in JPQL (Java Persistence Query Language).\n+    This dynamic query definition capability, referred as Criteria API, is \n+    based on the abstract persistent schema of the entities, their embedded\n+    objects and their relationships. The syntax is designed to construct a\n+    <emphasis>Query Tree</emphasis> whose nodes represent the semantic query\n+    elements such as projections, conditional predicates of WHERE clause or\n+    GROUP BY elements etc. \n+    </para>\n+    \n+    <section>\n+    \t<title>Constructing a QueryDefinition</title>\n+    \t<para>\n+    \tThe QueryBuilder interface is the factory for QueryDefinition. A\n+    \tQueryBuilder is obtained from either the EntityManagerFactory or \n+    \tthe EntityManager as follows:\n+    \t<programlisting>\n+EntityManager em = ... ; \n+QueryBuilder queryBuilder = em.getQueryBuilder();\n+QueryDefinition qdef = queryBuilder.createQueryDefinition();\n+    \t</programlisting>\n+    \tThe first step in constructing a query definition is specification of \n+    \tquery roots.  Query roots specify the domain objects on which the query \n+    \tis evaluated. Query root is an instance of the DomainObject interface. A\n+    \tquery root is added to a QueryDefinition by \n+    \t<methodname>addRoot(Class c)</methodname> method.\n+    \t<programlisting>\n+    \tDomainObject customer = qdef.addRoot(Customer.class);\n+    \t</programlisting>\n+    \tOften a query definition has a single root, so the \n+    \tQueryBuilder interface allows to construct and add\n+    \ta root via a single method.\n+    \t<programlisting>\n+DomainObject customer = queryBuilder.createQueryDefinition(Customer.class);    \t\n+    \t</programlisting>\n+    \tA query domain can be further refined by joining to other domain objects.\n+    \tFor example, for the above query definition to operate over customers \n+    \tand their orders, use <methodname>join(String attribute)</methodname>:\n+\t\t<programlisting>\n+DomainObject order = customer.join(\"orders\");\n+\t\t</programlisting>  \n+\t\tThe condition of a query definition is set via \n+\t\t<methodname>where(Predicate p)</methodname> where the argument \n+\t\tdesignates a conditional predicate. Conditional predicates are often\n+\t\tcomposed of one or more comparisons between the attribute values of\n+\t\tthe domain objects and some variable. For example, to select the\n+\t\tCustomers whose name is <emphasis>John Doe</emphasis> and has \n+\t\torders that are not yet delivered, you can build the predicate and set  \n+\t\tit to the query definition as\n+\t\t<programlisting>\n+qdef.where(customer.get(\"name\").equal(\"John Doe\")\n+      .and(order.get(\"status\").equal(OrderStatus.DELIVERED).not()));\n+\t\t</programlisting>\n+\t\tThe <methodname>select()</methodname> method defines the result of the\n+\t\tquery. If left unspecified, the select projection is assumed to be the\n+\t\troot domain object. However, you can specify the selected projections\n+\t\texplicitly as a list \n+\t\t<programlisting>\n+qdef.select(customer.get(\"name\"), order.get(\"status\"));\n+\t\t</programlisting>\n+\t\tAttribute of a domain object is specified by navigating via \n+\t\t<methodname>get(String attr)</methodname>. The attribute \n+\t\t<emphasis>should</emphasis> refer\n+\t\tto a valid persistent property of the receiving domain object, however\n+\t\tno such validation is enforced during the construction of the query \n+\t\tdefinition. All validation is deferred till query is actually executed.\n+    \t</para>\n+    </section> \n+    \n+    <section>\n+    <title>Executing a QueryDefinition</title>\n+    <para>\n+    A QueryDefinition is executed in a similar fashion of a string-based JPQL\n+    query via the EntityManager and Query interfaces.\n+    <programlisting>\n+EntityManager em = ...\n+Query query = em.createQuery(qdef);\n+List result = query.getResultList();    \n+    </programlisting>\n+    </para>\n+    <para>\n+    A query definition can use named parameters, and the parameter values are\n+    set as usual in the Query instance. \n+    </para>\n+    \n+    <para>\n+    The JPA 2.0 Specification on Criteria API is evolving and hence for an\n+    up-to-date version of the API, please consult the  \n+    <ulink url=\"http://jcp.org/aboutJava/communityprocess/pr/jsr317/index.html\">\n+    public draft</ulink>.\n+    </para>\n+    </section>\n+    \n+    <section>\n+    <title>Extension to Criteria API</title>\n+    <para>\n+    Criteria API has provided an alternative means to string-based JPQL to \n+    execute a query. However, JPA 2.0 Specification has not explicitly specified \n+    any equivalence between a dynamically constructed QueryDefinition and\n+    a JPQL string. OpenJPA provides a mechanism to convert a QueryDefinition to\n+    an equivalent JPQL query string via the extended OpenJPAQueryBuilder API.\n+    <programlisting>\n+    \tpublic interface OpenJPAQueryBuilder extends QueryBuilder {\n+\t\t\t/**\n+\t\t \t * Gets equivalent JPQL String for the given QueryDefinition.\n+\t \t\t*/\n+\t\t\tpublic String toJPQL(QueryDefinition qdef);\n+\t\t}\n+\t</programlisting>\n+    \n+    </para>\n     </section>\n \n </chapter>"},{"sha":"8af10bfe2669edc7fbf7febe34e7bbf6894519b4","filename":"openjpa-project/src/doc/manual/jpa_overview_pc.xml","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/b546423063fe7c1889f7764393102f423a699483/openjpa-project/src/doc/manual/jpa_overview_pc.xml","raw_url":"https://github.com/apache/openjpa/raw/b546423063fe7c1889f7764393102f423a699483/openjpa-project/src/doc/manual/jpa_overview_pc.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/jpa_overview_pc.xml?ref=b546423063fe7c1889f7764393102f423a699483","patch":"@@ -65,12 +65,12 @@ an entity by its persistent identity (covered later in this chapter), or use a\n An instance of an embeddable class, on the other hand, is only stored as part of\n a separate entity. Embeddable instances have no persistent identity, and are\n never returned directly from the <classname>EntityManager</classname> or from a\n-<classname>Query</classname> unless the query uses a projection on owning class \r\n-to the embedded instance. For example, if <classname>Address</classname> is \r\n-embedded in <classname>Company</classname>, then \r\n-a query <classname>\"SELECT a FROM Address a\"</classname> will never return the \r\n-embedded <classname>Address</classname> of <classname>Company</classname>; \r\n-but a projection query such as \r\n+<classname>Query</classname> unless the query uses a projection on owning class \n+to the embedded instance. For example, if <classname>Address</classname> is \n+embedded in <classname>Company</classname>, then \n+a query <classname>\"SELECT a FROM Address a\"</classname> will never return the \n+embedded <classname>Address</classname> of <classname>Company</classname>; \n+but a projection query such as \n <classname>\"SELECT c.address FROM Company c\"</classname> will.\n     </para>\n     <para>"},{"sha":"ed707532d52e8626094ec6314b01fd9abf201a40","filename":"openjpa-project/src/doc/manual/ref_guide_caching.xml","status":"modified","additions":211,"deletions":211,"changes":422,"blob_url":"https://github.com/apache/openjpa/blob/b546423063fe7c1889f7764393102f423a699483/openjpa-project/src/doc/manual/ref_guide_caching.xml","raw_url":"https://github.com/apache/openjpa/raw/b546423063fe7c1889f7764393102f423a699483/openjpa-project/src/doc/manual/ref_guide_caching.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_caching.xml?ref=b546423063fe7c1889f7764393102f423a699483","patch":"@@ -395,8 +395,8 @@ only remove a pin and make the data once again available for normal cache\n overflow eviction through the <methodname>unpin</methodname> methods. Use\n pinning when you want a guarantee that a certain object will always be available\n from cache, rather than requiring a datastore trip.\n-            </para>\r\n-            \r\n+            </para>\n+            \n             \n             <example id=\"ref_guide_cache_use_jpa\">\n                 <title>\n@@ -442,74 +442,74 @@ OpenJPAEntityManager oem = OpenJPAPersistence.cast(em);\n oem.evict(changedMag);  // will evict from data cache also\n </programlisting>\n             </example>\n-        </section>\r\n-        \r\n-        <section id=\"ref_guide_cache_statistics\">\r\n-        \t<title>\r\n-        \t\tCache Statistics\r\n-        \t</title>\r\n-        \t<indexterm>\r\n-                <primary>\r\n-                    caching\r\n-                </primary>\r\n-                <secondary>\r\n-                    statistics\r\n-                </secondary>\r\n-        \t</indexterm>\r\n-        \t\r\n-        \t<para>\r\n-        \tNumber of requests to read and write requests and hit ratio of the \r\n-data cache is available via \r\n-<ulink url=\"../javadoc/org/apache/openjpa/datacache/CacheStatistics.html\">\r\n-<classname>org.apache.openjpa.datacache.CacheStatistics</classname></ulink> \r\n-interface. You can access this statistics via StoreCache \r\n-<programlisting>\r\n-import org.apache.openjpa.datacache.CacheStatistics;\r\n-...\r\n-OpenJPAEntityManagerFactory oemf = OpenJPAPersistence.cast(emf);\r\n-CacheStatistics statistics = oemf.getStoreCache().getCacheStatistics();\r\n-</programlisting>\r\n-The statistics includes number of read and write requests made to the cache \r\n-since start and last reset. The statistics can be obtained also per class basis.\r\n-<programlisting>\r\n-public interface org.apache.openjpa.datacache.CacheStatistics extends java.io.Serializable{\r\n-    // Statistics since last reset\r\n-    public long getReadCount();\r\n-    public long getHitCount();\r\n-    public long getWriteCount();\r\n-    \r\n-    // Statistics since start\r\n-    public long getTotalReadCount();\r\n-    public long getTotalHitCount();\r\n-    public long getTotalWriteCount();\r\n-    \r\n-    // Per-Class statistics since last reset\r\n-    public long getReadCount(java.lang.Class);\r\n-    public long getHitCount(java.lang.Class);\r\n-    public long getWriteCount(java.lang.Class);\r\n-    \r\n-    // Per-Class statistics since start\r\n-    public long getTotalReadCount(java.lang.Class);\r\n-    public long getTotalHitCount(java.lang.Class);\r\n-    public long getTotalWriteCount(java.lang.Class);\r\n-    \r\n-    // Starting and last reset time \r\n-    public java.util.Date since();\r\n-    public java.util.Date start();\r\n-    \r\n-    // Resets the statistics. \r\n-    public void reset();\r\n-}\r\n-</programlisting>\r\n-Collecting per-class statistics depends on determining the runtime type of a\r\n-cached data element, when the given context does not permit determination of\r\n-exact runtime type, the statistics is registered against generic \r\n-<classname>java.lang.Object</classname>. Also each method that accepts Class \r\n-argument, treats null argument as <classname>java.lang.Object</classname>\r\n-</para> \r\n-\r\n         </section>\n-        \r\n+        \n+        <section id=\"ref_guide_cache_statistics\">\n+        \t<title>\n+        \t\tCache Statistics\n+        \t</title>\n+        \t<indexterm>\n+                <primary>\n+                    caching\n+                </primary>\n+                <secondary>\n+                    statistics\n+                </secondary>\n+        \t</indexterm>\n+        \t\n+        \t<para>\n+        \tNumber of requests to read and write requests and hit ratio of the \n+data cache is available via \n+<ulink url=\"../javadoc/org/apache/openjpa/datacache/CacheStatistics.html\">\n+<classname>org.apache.openjpa.datacache.CacheStatistics</classname></ulink> \n+interface. You can access this statistics via StoreCache \n+<programlisting>\n+import org.apache.openjpa.datacache.CacheStatistics;\n+...\n+OpenJPAEntityManagerFactory oemf = OpenJPAPersistence.cast(emf);\n+CacheStatistics statistics = oemf.getStoreCache().getCacheStatistics();\n+</programlisting>\n+The statistics includes number of read and write requests made to the cache \n+since start and last reset. The statistics can be obtained also per class basis.\n+<programlisting>\n+public interface org.apache.openjpa.datacache.CacheStatistics extends java.io.Serializable{\n+    // Statistics since last reset\n+    public long getReadCount();\n+    public long getHitCount();\n+    public long getWriteCount();\n+    \n+    // Statistics since start\n+    public long getTotalReadCount();\n+    public long getTotalHitCount();\n+    public long getTotalWriteCount();\n+    \n+    // Per-Class statistics since last reset\n+    public long getReadCount(java.lang.Class);\n+    public long getHitCount(java.lang.Class);\n+    public long getWriteCount(java.lang.Class);\n+    \n+    // Per-Class statistics since start\n+    public long getTotalReadCount(java.lang.Class);\n+    public long getTotalHitCount(java.lang.Class);\n+    public long getTotalWriteCount(java.lang.Class);\n+    \n+    // Starting and last reset time \n+    public java.util.Date since();\n+    public java.util.Date start();\n+    \n+    // Resets the statistics. \n+    public void reset();\n+}\n+</programlisting>\n+Collecting per-class statistics depends on determining the runtime type of a\n+cached data element, when the given context does not permit determination of\n+exact runtime type, the statistics is registered against generic \n+<classname>java.lang.Object</classname>. Also each method that accepts Class \n+argument, treats null argument as <classname>java.lang.Object</classname>\n+</para> \n+\n+        </section>\n+        \n         <section id=\"ref_guide_cache_query\">\n             <title>\n                 Query Cache\n@@ -1022,155 +1022,155 @@ Disables the compilation cache.\n \t\t\t\t</tbody>\n \t\t\t</tgroup>\n \t\t</table>\n-\t</section>\r\n+\t</section>\n \t\n     <section id=\"ref_guide_cache_querysql\">\n         <title>Prepared SQL Cache</title>\n         <indexterm zone=\"ref_guide_cache_querysql\">\n             <primary>caching</primary>\n             <secondary>query sql cache</secondary>\n         </indexterm>\n-         <para>\r\n-Prepared SQL Cache caches SQL statements corresponding to JPQL queries.\r\n-If a JPQL query is executed more than once in the same or different persistence\r\n-contexts, the SQL statement generated during the first execution is cached and\r\n-executed directly for subsequent execution. Direct execution of SQL offers\r\n-significant performance gain as it saves the cost of parsing query string and,\r\n-more importantly, populating the query expression tree during every execution.\r\n-Relative performance gain becomes higher as the complexity of forming a SQL \r\n-query from a JPQL string increases. For example, a JPQL query <code>Q1</code>\r\n-that involves multiple joins across tables takes more computation to translate \r\n-into a SQL statement than a JPQL query <code>Q2</code> to select by simple \r\n-primary key identifier. Correspondingly, repeated execution of <code>Q1</code>\r\n-will gain more performance advantage than <code>Q2</code> with Prepared SQL\r\n-Cache. \r\n-</para>\r\n-<para>\r\n-Prepared SQL Cache is configured by the <link linkend=\"openjpa.jdbc.QuerySQLCache\">\r\n-<literal>openjpa.jdbc.QuerySQLCache</literal></link> configuration property. This\r\n-property accepts a a plugin string (see <xref linkend=\"ref_guide_conf_plugins\"/>)\r\n-with value of <literal>true</literal> or <literal>false</literal>. The default\r\n-is <literal>true</literal>. \r\n-</para>\r\n-<para>\r\n-Following salient points to be noted regarding usage of Prepared Query Cache.\r\n-<itemizedlist>\r\n-\t<listitem>\r\n-\t<para>\r\n-\tPrepared Query Cache uses the original JPQL string as the key to index the \r\n-\tcorresponding SQL statement. Hence the JPQL strings that are semantically \r\n-\tidentical but differ by character case or identification variables are \r\n-\tconsidered as different by this cache. One of the implications is that the \r\n-\tapplications can gain better advantage from the Prepared Query Cache by\r\n-\tusing parameters in their JPQL query rather than concatenating the parameter \r\n-\tvalues in the query string itself . \r\n-\t</para>\r\n-\t<para>\r\n-\tFor example, contrast the following two examples of executing JPQL queries.\r\n-\t<example id=\"jpa_caching_hardcode_jpql\"> \r\n-\t   <title>Hardcoded Selection Value in JPQL Query</title> \r\n-\t<programlisting>\r\n-\tString jpql = \"SELECT p FROM Person p WHERE p.name='John'\";\r\n-\tList johns = em.createQuery(jpql).getResultList();\r\n-\tjpql = \"SELECT p FROM Person p WHERE p.name='Tom'\";\r\n-\tList toms = em.createQuery(jpql).getResultList();\r\n-\t</programlisting>\r\n-\t</example>\r\n-\tIn <xref linkend=\"jpa_caching_hardcode_jpql\"></xref>, the queries have \r\n-\t<emphasis>hardcoded</emphasis> the\tselection value for the <code>p.name</code> \r\n-\tfield. Prepared Query Cache will not recognize the second execution as\r\n-\tsame as the first, though both will result in same SQL statement. \r\n-\t</para>\r\n-\t<para>\r\n-\tWhile in <xref linkend=\"jpa_caching_parametrize_jpql\"></xref>, the the \r\n-\tselection value for the <code>p.name</code> field is parameterized. \r\n-\tPrepared Query Cache will recognize the second execution as\r\n-\tsame as the first, and will execute the cached SQL statement directly. \r\n-\t\r\n-\t<example id=\"jpa_caching_parametrize_jpql\"> \r\n-\t   <title>Parameterized Selection Value in JPQL Query</title> \r\n-\t<programlisting>\r\n-\tString jpql = \"SELECT p FROM Person p WHERE p.name=:name\";\r\n-\tList johns = em.createQuery(jpql).setParameter(\"name\",\"John\").getResultList();\r\n-\tList toms = em.createQuery(jpql).setParameter(\"name\",\"John\").getResultList();\r\n-\t</programlisting>\r\n-\t</example>\r\n-\t</para>\r\n-\t</listitem>\r\n-\t\r\n-\t<listitem>\r\n-    A JPQL query may not always translate into a <emphasis>single</emphasis> \r\n-    SQL query. The JPQL queries that require multiple select statements are \r\n-    never cached. \r\n-    </listitem>\r\n-\t<listitem>\r\n-\tSame JPQL query may result into different SQL statements under different\r\n-\texecution context. Execution context parameters such as fetch configuration \r\n-\tor locking mode determine the resultant SQL. However, Prepared SQL Cache\r\n-\t<emphasis>does not</emphasis> capture the execution context parameters\r\n-\twhile caching a generated SQL.  \r\n-\t</listitem>\r\n-\t<listitem>\r\n-\tThe named or positional parameters of a JPQL query can be set to different\r\n-\tvalues across executions. In general, the corresponding cached SQL statement \r\n-\twill be re-parameterized accordingly. However, the parameter value itself can \r\n-\tdetermine the SQL query. For example, when a JPQL query compares a relation \r\n-\tfield for equality against a parameter <code>p</code>, whether the actual\r\n-\tvalue of <code>p</code> is <code>null</code> or not will determine the\r\n-\tgenerated SQL statement. Another example is collection valued parameter for\r\n-\t<code>IN</code> expression. Each element of a collection valued parameter \r\n-\tresults into a SQL parameter. If a collection valued parameter across\r\n-\texecutions are set to different number of elements, then the parameters of\r\n-\tthe cached SQL do not correspond. If such situations are encountered while \r\n-\tre-parameterizing the cached SQL, the cached version is not reused and the\r\n-\toriginal JPQL query is used to generate a new SQL statement for execution. \r\n-\t</listitem>\r\n-\t<listitem>\r\n-\tJPQL query that returns a <emphasis>numeric</emphasis> value such as \r\n-\t<code>SELECT count(p) FROM PObject p</code> is never cached.\r\n-\t</listitem>\r\n-</itemizedlist>\r\n-</para>\r\n-<para>\r\n-Several mechanisms are available to the application to bypass SQL caching\r\n-for a JPQL query. \r\n-<itemizedlist>\r\n-\t<listitem>A user application can disable Prepared SQL Cache\r\n-\tfor entire lifetime of a persistence context by invoking the following\r\n-\tmethod on OpenJPA's EntityMananger interface:\r\n-\t<programlisting>\r\n-\t<methodname>OpenJPAEntityManager.setQuerySQLCache(boolean)</methodname> \r\n-\t</programlisting>\r\n-\t</listitem>\r\n-\t<listitem>\r\n-\tA user application can instruct particular execution of a JPQL query to\r\n-\tignore any cached SQL query, by setting \r\n-\t<literal>QueryHints.HINT_IGNORE_PREPARED_QUERY</literal> or \r\n-\t<literal>\"openjpa.hint.IgnorePreparedQuery\"</literal> to <literal>true</literal>\r\n-\tvia standard <literal>javax.persistence.Query.setHint(String, Object)</literal> method. If a\r\n-\tSQL query has been cached corresponding to the JPQL query prior to this \r\n-\texecution, then the cached SQL remains in the cache and will be reused\r\n-\tfor any subsequent execution of the same JPQL query.\r\n-\t</listitem>\r\n-\t<listitem>\r\n-\tA user application can instruct all subsequent execution of a JPQL query to\r\n-\tignore any cached SQL query, by setting \r\n-\t<literal>QueryHints.HINT_INVALIDATE_PREPARED_QUERY</literal> or \r\n-\t<literal>\"openjpa.hint.InvalidatePreparedQuery\"</literal> to <literal>true</literal>\r\n-\tThe SQL query is removed from the cache. Also the JPQL query will never be\r\n-\tcached again during the lifetime of the entire persistence unit.\r\n-\t</listitem>\r\n-\t<listitem>\r\n-\tPlug-in property <literal>openjpa.jdbc.QuerySQLCache</literal> can be \r\n-\tconfigured to exclude certain JPQL queries as shown below.\r\n-\t<programlisting>\r\n-\t&lt;property name=\"openjpa.jdbc.QuerySQLCache\" value=\"true(excludes='select c from Company c;select d from Department d')\"/&gt;\r\n-\t</programlisting> \r\n-\twill never cache JPQL queries <code>select c from Company c</code> and \r\n-\t<code>select d from Department d</code>.\r\n-\t</listitem>\r\n-\t</itemizedlist>\r\n-</para>\r\n+         <para>\n+Prepared SQL Cache caches SQL statements corresponding to JPQL queries.\n+If a JPQL query is executed more than once in the same or different persistence\n+contexts, the SQL statement generated during the first execution is cached and\n+executed directly for subsequent execution. Direct execution of SQL offers\n+significant performance gain as it saves the cost of parsing query string and,\n+more importantly, populating the query expression tree during every execution.\n+Relative performance gain becomes higher as the complexity of forming a SQL \n+query from a JPQL string increases. For example, a JPQL query <code>Q1</code>\n+that involves multiple joins across tables takes more computation to translate \n+into a SQL statement than a JPQL query <code>Q2</code> to select by simple \n+primary key identifier. Correspondingly, repeated execution of <code>Q1</code>\n+will gain more performance advantage than <code>Q2</code> with Prepared SQL\n+Cache. \n+</para>\n+<para>\n+Prepared SQL Cache is configured by the <link linkend=\"openjpa.jdbc.QuerySQLCache\">\n+<literal>openjpa.jdbc.QuerySQLCache</literal></link> configuration property. This\n+property accepts a a plugin string (see <xref linkend=\"ref_guide_conf_plugins\"/>)\n+with value of <literal>true</literal> or <literal>false</literal>. The default\n+is <literal>true</literal>. \n+</para>\n+<para>\n+Following salient points to be noted regarding usage of Prepared Query Cache.\n+<itemizedlist>\n+\t<listitem>\n+\t<para>\n+\tPrepared Query Cache uses the original JPQL string as the key to index the \n+\tcorresponding SQL statement. Hence the JPQL strings that are semantically \n+\tidentical but differ by character case or identification variables are \n+\tconsidered as different by this cache. One of the implications is that the \n+\tapplications can gain better advantage from the Prepared Query Cache by\n+\tusing parameters in their JPQL query rather than concatenating the parameter \n+\tvalues in the query string itself . \n+\t</para>\n+\t<para>\n+\tFor example, contrast the following two examples of executing JPQL queries.\n+\t<example id=\"jpa_caching_hardcode_jpql\"> \n+\t   <title>Hardcoded Selection Value in JPQL Query</title> \n+\t<programlisting>\n+\tString jpql = \"SELECT p FROM Person p WHERE p.name='John'\";\n+\tList johns = em.createQuery(jpql).getResultList();\n+\tjpql = \"SELECT p FROM Person p WHERE p.name='Tom'\";\n+\tList toms = em.createQuery(jpql).getResultList();\n+\t</programlisting>\n+\t</example>\n+\tIn <xref linkend=\"jpa_caching_hardcode_jpql\"></xref>, the queries have \n+\t<emphasis>hardcoded</emphasis> the\tselection value for the <code>p.name</code> \n+\tfield. Prepared Query Cache will not recognize the second execution as\n+\tsame as the first, though both will result in same SQL statement. \n+\t</para>\n+\t<para>\n+\tWhile in <xref linkend=\"jpa_caching_parametrize_jpql\"></xref>, the the \n+\tselection value for the <code>p.name</code> field is parameterized. \n+\tPrepared Query Cache will recognize the second execution as\n+\tsame as the first, and will execute the cached SQL statement directly. \n+\t\n+\t<example id=\"jpa_caching_parametrize_jpql\"> \n+\t   <title>Parameterized Selection Value in JPQL Query</title> \n+\t<programlisting>\n+\tString jpql = \"SELECT p FROM Person p WHERE p.name=:name\";\n+\tList johns = em.createQuery(jpql).setParameter(\"name\",\"John\").getResultList();\n+\tList toms = em.createQuery(jpql).setParameter(\"name\",\"John\").getResultList();\n+\t</programlisting>\n+\t</example>\n+\t</para>\n+\t</listitem>\n+\t\n+\t<listitem>\n+    A JPQL query may not always translate into a <emphasis>single</emphasis> \n+    SQL query. The JPQL queries that require multiple select statements are \n+    never cached. \n+    </listitem>\n+\t<listitem>\n+\tSame JPQL query may result into different SQL statements under different\n+\texecution context. Execution context parameters such as fetch configuration \n+\tor locking mode determine the resultant SQL. However, Prepared SQL Cache\n+\t<emphasis>does not</emphasis> capture the execution context parameters\n+\twhile caching a generated SQL.  \n+\t</listitem>\n+\t<listitem>\n+\tThe named or positional parameters of a JPQL query can be set to different\n+\tvalues across executions. In general, the corresponding cached SQL statement \n+\twill be re-parameterized accordingly. However, the parameter value itself can \n+\tdetermine the SQL query. For example, when a JPQL query compares a relation \n+\tfield for equality against a parameter <code>p</code>, whether the actual\n+\tvalue of <code>p</code> is <code>null</code> or not will determine the\n+\tgenerated SQL statement. Another example is collection valued parameter for\n+\t<code>IN</code> expression. Each element of a collection valued parameter \n+\tresults into a SQL parameter. If a collection valued parameter across\n+\texecutions are set to different number of elements, then the parameters of\n+\tthe cached SQL do not correspond. If such situations are encountered while \n+\tre-parameterizing the cached SQL, the cached version is not reused and the\n+\toriginal JPQL query is used to generate a new SQL statement for execution. \n+\t</listitem>\n+\t<listitem>\n+\tJPQL query that returns a <emphasis>numeric</emphasis> value such as \n+\t<code>SELECT count(p) FROM PObject p</code> is never cached.\n+\t</listitem>\n+</itemizedlist>\n+</para>\n+<para>\n+Several mechanisms are available to the application to bypass SQL caching\n+for a JPQL query. \n+<itemizedlist>\n+\t<listitem>A user application can disable Prepared SQL Cache\n+\tfor entire lifetime of a persistence context by invoking the following\n+\tmethod on OpenJPA's EntityMananger interface:\n+\t<programlisting>\n+\t<methodname>OpenJPAEntityManager.setQuerySQLCache(boolean)</methodname> \n+\t</programlisting>\n+\t</listitem>\n+\t<listitem>\n+\tA user application can instruct particular execution of a JPQL query to\n+\tignore any cached SQL query, by setting \n+\t<literal>QueryHints.HINT_IGNORE_PREPARED_QUERY</literal> or \n+\t<literal>\"openjpa.hint.IgnorePreparedQuery\"</literal> to <literal>true</literal>\n+\tvia standard <literal>javax.persistence.Query.setHint(String, Object)</literal> method. If a\n+\tSQL query has been cached corresponding to the JPQL query prior to this \n+\texecution, then the cached SQL remains in the cache and will be reused\n+\tfor any subsequent execution of the same JPQL query.\n+\t</listitem>\n+\t<listitem>\n+\tA user application can instruct all subsequent execution of a JPQL query to\n+\tignore any cached SQL query, by setting \n+\t<literal>QueryHints.HINT_INVALIDATE_PREPARED_QUERY</literal> or \n+\t<literal>\"openjpa.hint.InvalidatePreparedQuery\"</literal> to <literal>true</literal>\n+\tThe SQL query is removed from the cache. Also the JPQL query will never be\n+\tcached again during the lifetime of the entire persistence unit.\n+\t</listitem>\n+\t<listitem>\n+\tPlug-in property <literal>openjpa.jdbc.QuerySQLCache</literal> can be \n+\tconfigured to exclude certain JPQL queries as shown below.\n+\t<programlisting>\n+\t&lt;property name=\"openjpa.jdbc.QuerySQLCache\" value=\"true(excludes='select c from Company c;select d from Department d')\"/&gt;\n+\t</programlisting> \n+\twill never cache JPQL queries <code>select c from Company c</code> and \n+\t<code>select d from Department d</code>.\n+\t</listitem>\n+\t</itemizedlist>\n+</para>\n  \n     </section>\n </chapter>"},{"sha":"a0dc9a127432214c4a3bad4c004732aefda52054","filename":"openjpa-project/src/doc/manual/ref_guide_conf.xml","status":"modified","additions":225,"deletions":225,"changes":450,"blob_url":"https://github.com/apache/openjpa/blob/b546423063fe7c1889f7764393102f423a699483/openjpa-project/src/doc/manual/ref_guide_conf.xml","raw_url":"https://github.com/apache/openjpa/raw/b546423063fe7c1889f7764393102f423a699483/openjpa-project/src/doc/manual/ref_guide_conf.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_conf.xml?ref=b546423063fe7c1889f7764393102f423a699483","patch":"@@ -359,7 +359,7 @@ property, so to use the standard implementation and configure the size, specify:\n         </para>\n <programlisting>\n true(CacheSize=1000)\n-</programlisting>\r\n+</programlisting>\n \n         <para>\n The remainder of this chapter reviews the set of configuration properties\n@@ -384,51 +384,51 @@ provided for advanced users who wish to customize OpenJPA's behavior; the\n majority of developers can omit them. The following properties apply to any\n OpenJPA back-end, though the given descriptions are tailored to OpenJPA's\n default JDBC store.\n-        </para>\r\n-        \r\n-        <para>\r\n-Few of the properties recognized by OpenJPA have been standardized in JPA 2.0 \r\n-Specification using equivalent names. These properties can be specified either\r\n-by the JPA standard key or equivalent OpenJPA key. Specifying the same key once\r\n-as JPA standard key and again as equivalent OpenJPA key in the same configuration, \r\n-however, is not allowed. The following table lists these standard JPA properties \r\n-and their OpenJPA equivalent.\r\n-        </para>\r\n-    <table tocentry=\"1\">\r\n-        <title>\r\n-            Standard JPA Properties and OpenJPA equivalents\r\n-        </title>\r\n-        <tgroup rowsep=\"1\" colsep=\"8\" align=\"left\" cols=\"2\">\r\n-            <colspec colname=\"StandardJPA\"/>\r\n-            <colspec colname=\"OpenJPAEquivalent\"/>\r\n-            <thead>\r\n-                <row>\r\n-                    <entry colname=\"StandardJPA\">Standard JPA 2.0</entry>\r\n-                    <entry colname=\"OpenJPAEquivalent\">OpenJPA Equivalent</entry>\r\n-                </row>\r\n-            </thead>\r\n-            <tbody>\r\n-                <row>\r\n-                    <entry colname=\"StandardJPA\">javax.persistence.jdbc.driver</entry>\r\n-                    <entry colname=\"OpenJPAEquivalent\">openjpa.ConnectionDriverName</entry>\r\n-                </row>\r\n-                <row>\r\n-                    <entry colname=\"StandardJPA\">javax.persistence.jdbc.url</entry>\r\n-                    <entry colname=\"OpenJPAEquivalent\">openjpa.ConnectionURL</entry>\r\n-                </row>\r\n-                <row>\r\n-                    <entry colname=\"StandardJPA\">javax.persistence.jdbc.user</entry>\r\n-                    <entry colname=\"OpenJPAEquivalent\">openjpa.ConnectionUserName</entry>\r\n-                </row>\r\n-                <row>\r\n-                    <entry colname=\"StandardJPA\">javax.persistence.jdbc.password</entry>\r\n-                    <entry colname=\"OpenJPAEquivalent\">openjpa.ConnectionPassword</entry>\r\n-                </row>\r\n-           </tbody>\r\n-        </tgroup>\r\n-    </table>\r\n-        \r\n-        \r\n+        </para>\n+        \n+        <para>\n+Few of the properties recognized by OpenJPA have been standardized in JPA 2.0 \n+Specification using equivalent names. These properties can be specified either\n+by the JPA standard key or equivalent OpenJPA key. Specifying the same key once\n+as JPA standard key and again as equivalent OpenJPA key in the same configuration, \n+however, is not allowed. The following table lists these standard JPA properties \n+and their OpenJPA equivalent.\n+        </para>\n+    <table tocentry=\"1\">\n+        <title>\n+            Standard JPA Properties and OpenJPA equivalents\n+        </title>\n+        <tgroup rowsep=\"1\" colsep=\"8\" align=\"left\" cols=\"2\">\n+            <colspec colname=\"StandardJPA\"/>\n+            <colspec colname=\"OpenJPAEquivalent\"/>\n+            <thead>\n+                <row>\n+                    <entry colname=\"StandardJPA\">Standard JPA 2.0</entry>\n+                    <entry colname=\"OpenJPAEquivalent\">OpenJPA Equivalent</entry>\n+                </row>\n+            </thead>\n+            <tbody>\n+                <row>\n+                    <entry colname=\"StandardJPA\">javax.persistence.jdbc.driver</entry>\n+                    <entry colname=\"OpenJPAEquivalent\">openjpa.ConnectionDriverName</entry>\n+                </row>\n+                <row>\n+                    <entry colname=\"StandardJPA\">javax.persistence.jdbc.url</entry>\n+                    <entry colname=\"OpenJPAEquivalent\">openjpa.ConnectionURL</entry>\n+                </row>\n+                <row>\n+                    <entry colname=\"StandardJPA\">javax.persistence.jdbc.user</entry>\n+                    <entry colname=\"OpenJPAEquivalent\">openjpa.ConnectionUserName</entry>\n+                </row>\n+                <row>\n+                    <entry colname=\"StandardJPA\">javax.persistence.jdbc.password</entry>\n+                    <entry colname=\"OpenJPAEquivalent\">openjpa.ConnectionPassword</entry>\n+                </row>\n+           </tbody>\n+        </tgroup>\n+    </table>\n+        \n+        \n         \n         <!--\n         <section id=\"openjpa.AggregateListeners\">\n@@ -649,53 +649,53 @@ org.apache.openjpa.kernel.Broker</classname></ulink> type to use at runtime. See\n <xref linkend=\"ref_guide_runtime_broker_extension\"/> on for details.\n             </para>\n         </section>\n-\r\n-<section id=\"openjpa.Callbacks\">\r\n-            <title>openjpa.Callbacks</title>\r\n-            <indexterm zone=\"openjpa.Callbacks\">\r\n-                <primary>Callbacks</primary>\r\n-            </indexterm>\r\n-            <indexterm>\r\n-                <primary>Callbacks</primary>\r\n-                <see>Callbacks</see>\r\n-            </indexterm>\r\n-  <para>\r\n-     <emphasis role=\"bold\">Property name: </emphasis><literal>openjpa.Callbacks</literal>\r\n-  </para>\r\n-  <para>\r\n-     <emphasis role=\"bold\">Configuration API:</emphasis>\r\n-     <ulink url=\"../javadoc/org/apache/openjpa/conf/OpenJPAConfiguration.html#getCallbackOptionsInstance()\">\r\n-     <methodname>org.apache.openjpa.conf.OpenJPAConfiguration.getCallbackOptionsInstance</methodname></ulink>\r\n-  </para>\r\n-  <para>\r\n-     <emphasis role=\"bold\">Resource adaptor config-property: </emphasis><literal>Callbacks</literal>\r\n-  </para>\r\n-  <para>\r\n-     <emphasis role=\"bold\">Default: </emphasis><literal>default</literal>\r\n-  </para>\r\n-  <para>\r\n-     <emphasis role=\"bold\">Description:</emphasis> A plugin string (see\r\n-<xref linkend=\"ref_guide_conf_plugins\"/>) to fine tune some of the configurable\r\n-properties related to callbacks. The plug-in supports two boolean properties:\r\n-   </para>\r\n-   <itemizedlist>\r\n-   \t<listitem>\r\n-   \t\t<para><literal>PostPersistCallbackImmediate</literal>: whether the \r\n-   \t\tpost-persist callback is invoked as soon as a new instance\r\n-        is managed. The default is <literal>false</literal>, implies that \r\n-        the post-persist callback is invoked after the instance been committed \r\n-        or flushed to the datastore.\r\n-        </para>\r\n-   \t</listitem>\r\n-   \t<listitem>\r\n-   \t    <para><literal>AllowsMultipleMethodsForSameCallback</literal>: whether\r\n-   \t    multiple methods of the same class can handle the same callback event.\r\n-   \t    Defaults to <literal>false</literal>.\r\n-   \t    </para>\r\n-   \t</listitem>\r\n-   </itemizedlist>\r\n-</section>\r\n-\r\n+\n+<section id=\"openjpa.Callbacks\">\n+            <title>openjpa.Callbacks</title>\n+            <indexterm zone=\"openjpa.Callbacks\">\n+                <primary>Callbacks</primary>\n+            </indexterm>\n+            <indexterm>\n+                <primary>Callbacks</primary>\n+                <see>Callbacks</see>\n+            </indexterm>\n+  <para>\n+     <emphasis role=\"bold\">Property name: </emphasis><literal>openjpa.Callbacks</literal>\n+  </para>\n+  <para>\n+     <emphasis role=\"bold\">Configuration API:</emphasis>\n+     <ulink url=\"../javadoc/org/apache/openjpa/conf/OpenJPAConfiguration.html#getCallbackOptionsInstance()\">\n+     <methodname>org.apache.openjpa.conf.OpenJPAConfiguration.getCallbackOptionsInstance</methodname></ulink>\n+  </para>\n+  <para>\n+     <emphasis role=\"bold\">Resource adaptor config-property: </emphasis><literal>Callbacks</literal>\n+  </para>\n+  <para>\n+     <emphasis role=\"bold\">Default: </emphasis><literal>default</literal>\n+  </para>\n+  <para>\n+     <emphasis role=\"bold\">Description:</emphasis> A plugin string (see\n+<xref linkend=\"ref_guide_conf_plugins\"/>) to fine tune some of the configurable\n+properties related to callbacks. The plug-in supports two boolean properties:\n+   </para>\n+   <itemizedlist>\n+   \t<listitem>\n+   \t\t<para><literal>PostPersistCallbackImmediate</literal>: whether the \n+   \t\tpost-persist callback is invoked as soon as a new instance\n+        is managed. The default is <literal>false</literal>, implies that \n+        the post-persist callback is invoked after the instance been committed \n+        or flushed to the datastore.\n+        </para>\n+   \t</listitem>\n+   \t<listitem>\n+   \t    <para><literal>AllowsMultipleMethodsForSameCallback</literal>: whether\n+   \t    multiple methods of the same class can handle the same callback event.\n+   \t    Defaults to <literal>false</literal>.\n+   \t    </para>\n+   \t</listitem>\n+   </itemizedlist>\n+</section>\n+\n         <section id=\"openjpa.ClassResolver\">\n             <title>\n                 openjpa.ClassResolver\n@@ -1983,59 +1983,59 @@ or flush before running it against the datastore.\n             might correspond to a JPA persistence-unit name, or to some other\n             more-unique value available in the current environment.\n             </para>\n-        </section>\r\n-        \r\n-InitializeEagerly\r\n-        <section id=\"openjpa.InitializeEagerly\">\r\n-            <title>\r\n-                openjpa.InitializeEagerly\r\n-            </title>\r\n-            <indexterm zone=\"openjpa.InitializeEagerly\">\r\n-                <primary>\r\n-                    InverseManager\r\n-                </primary>\r\n-            </indexterm>\r\n-            <indexterm zone=\"openjpa.InitializeEagerly\">\r\n-                <primary>\r\n-                    Initialization\r\n-                </primary>\r\n-                <secondary>\r\n-                    Configuration\r\n-                </secondary>\r\n-            </indexterm>\r\n-            <para>\r\n-<emphasis role=\"bold\">Property name: </emphasis><literal>openjpa.InitializeEagerly\r\n-</literal>\r\n-            </para>\r\n-            <para>\r\n-<emphasis role=\"bold\">Configuration API:</emphasis>\r\n-<ulink url=\"../javadoc/org/apache/openjpa/conf/OpenJPAConfiguration.html#isInitializeEagerly()\">\r\n-<methodname>org.apache.openjpa.conf.OpenJPAConfiguration.isInitializeEagerly\r\n-</methodname></ulink>\r\n-            </para>\r\n-            <para>\r\n-<emphasis role=\"bold\">Resource adaptor config-property: </emphasis><literal>\r\n-InitializeEagerly</literal>\r\n-            </para>\r\n-            <para>\r\n-<emphasis role=\"bold\">Default: </emphasis><literal>false</literal>\r\n-            </para>\r\n-            <para>\r\n-<emphasis role=\"bold\">Possible values: </emphasis><literal>false</literal>,\r\n-<literal>true</literal>\r\n-            </para>\r\n-            <para>\r\n-<emphasis role=\"bold\">Description:</emphasis> Controls whether initialization\r\n-is eager or lazy. Eager initialization imply all persistent classes, their \r\n-mapping information, database connectivity and all other resources specified in\r\n-the configuration of a persistence unit will be initialized when a persistent \r\n-unit is constructed. The default behavior is\r\n-lazy i.e. persistent classes, database and other resources are initialized only\r\n-when the application refers to a resource for the first time.\r\n-            </para>\r\n-        </section>\r\n-\r\n-\r\n+        </section>\n+        \n+InitializeEagerly\n+        <section id=\"openjpa.InitializeEagerly\">\n+            <title>\n+                openjpa.InitializeEagerly\n+            </title>\n+            <indexterm zone=\"openjpa.InitializeEagerly\">\n+                <primary>\n+                    InverseManager\n+                </primary>\n+            </indexterm>\n+            <indexterm zone=\"openjpa.InitializeEagerly\">\n+                <primary>\n+                    Initialization\n+                </primary>\n+                <secondary>\n+                    Configuration\n+                </secondary>\n+            </indexterm>\n+            <para>\n+<emphasis role=\"bold\">Property name: </emphasis><literal>openjpa.InitializeEagerly\n+</literal>\n+            </para>\n+            <para>\n+<emphasis role=\"bold\">Configuration API:</emphasis>\n+<ulink url=\"../javadoc/org/apache/openjpa/conf/OpenJPAConfiguration.html#isInitializeEagerly()\">\n+<methodname>org.apache.openjpa.conf.OpenJPAConfiguration.isInitializeEagerly\n+</methodname></ulink>\n+            </para>\n+            <para>\n+<emphasis role=\"bold\">Resource adaptor config-property: </emphasis><literal>\n+InitializeEagerly</literal>\n+            </para>\n+            <para>\n+<emphasis role=\"bold\">Default: </emphasis><literal>false</literal>\n+            </para>\n+            <para>\n+<emphasis role=\"bold\">Possible values: </emphasis><literal>false</literal>,\n+<literal>true</literal>\n+            </para>\n+            <para>\n+<emphasis role=\"bold\">Description:</emphasis> Controls whether initialization\n+is eager or lazy. Eager initialization imply all persistent classes, their \n+mapping information, database connectivity and all other resources specified in\n+the configuration of a persistence unit will be initialized when a persistent \n+unit is constructed. The default behavior is\n+lazy i.e. persistent classes, database and other resources are initialized only\n+when the application refers to a resource for the first time.\n+            </para>\n+        </section>\n+\n+\n         \n         <section id=\"openjpa.InverseManager\">\n             <title>\n@@ -3016,43 +3016,43 @@ org.apache.openjpa.kernel.Seq</classname></ulink> implementation to use for the\n system sequence. See <xref linkend=\"ref_guide_sequence\"/> for more\n information.\n             </para>\n-        </section>\r\n-        <section id=\"openjpa.Specification\">\r\n-            <title>\r\n-                openjpa.Specification\r\n-            </title>\r\n-            <indexterm zone=\"openjpa.Specification\">\r\n-                <primary>\r\n-                    Specification\r\n-                </primary>\r\n-            </indexterm>\r\n-            <para>\r\n-<emphasis role=\"bold\">Property name: </emphasis><literal>openjpa.Specification\r\n-</literal>\r\n-            </para>\r\n-            <para>\r\n-<emphasis role=\"bold\">Configuration API:</emphasis>\r\n-<ulink url=\"../javadoc/org/apache/openjpa/conf/OpenJPAConfiguration.html#getSpecificationInstance()\">\r\n-<methodname>org.apache.openjpa.conf.OpenJPAConfiguration.getSpecificationInstance\r\n-</methodname></ulink>\r\n-            </para>\r\n-            <para>\r\n-<emphasis role=\"bold\">Resource adaptor config-property: </emphasis><literal>\r\n-Specification</literal>\r\n-            </para>\r\n-            <para>\r\n-<emphasis role=\"bold\">Default: </emphasis><literal>table</literal>\r\n-            </para>\r\n-            <para>\r\n-<emphasis role=\"bold\">Description:</emphasis> A formatted string describing the Specification\r\n-to use for the default configuration options. The format of the Specifcation string is \r\n-<literal>name [major.[minor]]</literal> where <literal>name</literal> denotes the name of the\r\n-Specification such as <literal>JPA</literal> or <literal>JDO</literal>, <literal>major</literal>\r\n-denotes the major integral version number of the Specification and <literal>minor</literal>\r\n-denotes a minor version which can be an arbitrary string.  \r\n-See <xref linkend=\"ref_guide_spec_compatibility\"/> for more information.\r\n-            </para>\r\n-        </section>\r\n+        </section>\n+        <section id=\"openjpa.Specification\">\n+            <title>\n+                openjpa.Specification\n+            </title>\n+            <indexterm zone=\"openjpa.Specification\">\n+                <primary>\n+                    Specification\n+                </primary>\n+            </indexterm>\n+            <para>\n+<emphasis role=\"bold\">Property name: </emphasis><literal>openjpa.Specification\n+</literal>\n+            </para>\n+            <para>\n+<emphasis role=\"bold\">Configuration API:</emphasis>\n+<ulink url=\"../javadoc/org/apache/openjpa/conf/OpenJPAConfiguration.html#getSpecificationInstance()\">\n+<methodname>org.apache.openjpa.conf.OpenJPAConfiguration.getSpecificationInstance\n+</methodname></ulink>\n+            </para>\n+            <para>\n+<emphasis role=\"bold\">Resource adaptor config-property: </emphasis><literal>\n+Specification</literal>\n+            </para>\n+            <para>\n+<emphasis role=\"bold\">Default: </emphasis><literal>table</literal>\n+            </para>\n+            <para>\n+<emphasis role=\"bold\">Description:</emphasis> A formatted string describing the Specification\n+to use for the default configuration options. The format of the Specifcation string is \n+<literal>name [major.[minor]]</literal> where <literal>name</literal> denotes the name of the\n+Specification such as <literal>JPA</literal> or <literal>JDO</literal>, <literal>major</literal>\n+denotes the major integral version number of the Specification and <literal>minor</literal>\n+denotes a minor version which can be an arbitrary string.  \n+See <xref linkend=\"ref_guide_spec_compatibility\"/> for more information.\n+            </para>\n+        </section>\n         \n         <section id=\"openjpa.TransactionMode\">\n             <title>\n@@ -3565,7 +3565,7 @@ MappingFactory</literal>\n <classname>org.apache.openjpa.meta.MetaDataFactory</classname></ulink> to use to\n store and retrieve object-relational mapping information for your persistent\n classes. See <xref linkend=\"ref_guide_mapping_factory\"/> for details.\n-            </para>\r\n+            </para>\n             \n         </section>\n         <section id=\"openjpa.jdbc.QuerySQLCache\">\n@@ -3598,8 +3598,8 @@ classes. See <xref linkend=\"ref_guide_mapping_factory\"/> for details.\n             </para>\n             <para>\n <emphasis role=\"bold\">Description:</emphasis> A plugin string (see \n-<xref linkend=\"ref_guide_conf_plugins\"/>) describing the options to cache and \r\n-reuse SQL statements generated for JPQL queries. \r\n+<xref linkend=\"ref_guide_conf_plugins\"/>) describing the options to cache and \n+reuse SQL statements generated for JPQL queries. \n See <xref linkend=\"ref_guide_cache_querysql\"/> for details.\n             </para>\n         </section>\n@@ -4005,44 +4005,44 @@ implementation is\n <classname>org.apache.openjpa.jdbc.kernel.BatchingConstraintUpdateManager</classname>\n </ulink>.\n \n-            </para>\r\n-        </section>\r\n-        \r\n-        <section id=\"ref_guide_spec_compatibility\">\r\n-        <title>Compatibility with Specification</title>\r\n-        <para>\r\n-The default behavior of certain OpenJPA API methods can evolve to align with the behaviors\r\n-defined in JPA specification. To maintain backward compatibility, OpenJPA allows configuration\r\n-options such that while the default behavior changes to align with current JPA Specification, the\r\n-previous behaviors can always be emulated. \r\n-\t\t</para>\r\n-\t\t<para>\r\n-For example, JPA 2.0 specification\r\n-introduces a new API <literal>void EntityManager.detach(Object entity)</literal> that detaches\r\n-the given entity from the current persistence context. OpenJPA has provided similar\r\n-feature via <literal>&lt;T&gt; T OpenJPAEntityManager.detach(T entity)</literal> prior to JPA 2.0. \r\n-OpenJPA <literal>detach()</literal>, however, has different default behavior than what JPA 2.0\r\n-specification mandates. Firstly, OpenJPA creates a copy of the given entity as a detached instance\r\n-and returns it, whereas JPA 2.0 behavior requires the same given entity instance be detached.\r\n-Secondly, the given instance is removed from the persistence context for JPA 2.0, whereas\r\n-OpenJPA <literal>detach()</literal> method, prior to JPA 2.0, does not remove the instance\r\n-from the persistence context as a copy is returned. Thirdly, OpenJPA will flush before\r\n-detaching a dirty instance so that the detached instance can later be merged, whereas\r\n-JPA 2.0 <literal>detach()</literal> semantics does not require a dirty instance be flushed\r\n-before detach.        \r\n-\t\t</para>\r\n-\t\t<para>\r\n-A user application running with OpenJPA that is compliant to a specific version of JPA of specification,\r\n-the older behavior can be emulated by configuring OpenJPA Compatibility options.\r\n-For example, <literal>openjpa.Compatibility=FlushBeforeDetach=false,CopyOnDetach=true</literal>\r\n-will emulate the older behavior of detach even when running with OpenJPA that are\r\n-compliant to JPA 2.0 Specification.  The configuration can also be set to a different version of the specification.\r\n-For example, <literal>openjpa.Specification=\"JPA 1.0\"</literal> configuration setting will emulate\r\n-default OpenJPA behavior as it were for JPA Specification version 1.0. Setting via\r\n-<literal>openjpa.Specification</literal> is a shorthand for more fine-grained control available via\r\n-<literal>openjpa.Compatibility</literal>.    \r\n-  \r\n-\t\t</para>\r\n-        </section>\r\n+            </para>\n+        </section>\n+        \n+        <section id=\"ref_guide_spec_compatibility\">\n+        <title>Compatibility with Specification</title>\n+        <para>\n+The default behavior of certain OpenJPA API methods can evolve to align with the behaviors\n+defined in JPA specification. To maintain backward compatibility, OpenJPA allows configuration\n+options such that while the default behavior changes to align with current JPA Specification, the\n+previous behaviors can always be emulated. \n+\t\t</para>\n+\t\t<para>\n+For example, JPA 2.0 specification\n+introduces a new API <literal>void EntityManager.detach(Object entity)</literal> that detaches\n+the given entity from the current persistence context. OpenJPA has provided similar\n+feature via <literal>&lt;T&gt; T OpenJPAEntityManager.detach(T entity)</literal> prior to JPA 2.0. \n+OpenJPA <literal>detach()</literal>, however, has different default behavior than what JPA 2.0\n+specification mandates. Firstly, OpenJPA creates a copy of the given entity as a detached instance\n+and returns it, whereas JPA 2.0 behavior requires the same given entity instance be detached.\n+Secondly, the given instance is removed from the persistence context for JPA 2.0, whereas\n+OpenJPA <literal>detach()</literal> method, prior to JPA 2.0, does not remove the instance\n+from the persistence context as a copy is returned. Thirdly, OpenJPA will flush before\n+detaching a dirty instance so that the detached instance can later be merged, whereas\n+JPA 2.0 <literal>detach()</literal> semantics does not require a dirty instance be flushed\n+before detach.        \n+\t\t</para>\n+\t\t<para>\n+A user application running with OpenJPA that is compliant to a specific version of JPA of specification,\n+the older behavior can be emulated by configuring OpenJPA Compatibility options.\n+For example, <literal>openjpa.Compatibility=FlushBeforeDetach=false,CopyOnDetach=true</literal>\n+will emulate the older behavior of detach even when running with OpenJPA that are\n+compliant to JPA 2.0 Specification.  The configuration can also be set to a different version of the specification.\n+For example, <literal>openjpa.Specification=\"JPA 1.0\"</literal> configuration setting will emulate\n+default OpenJPA behavior as it were for JPA Specification version 1.0. Setting via\n+<literal>openjpa.Specification</literal> is a shorthand for more fine-grained control available via\n+<literal>openjpa.Compatibility</literal>.    \n+  \n+\t\t</para>\n+        </section>\n     </section>\n </chapter>"},{"sha":"5780547a63c4695cb2808e1d8846758193a36d6c","filename":"openjpa-project/src/doc/manual/ref_guide_dbsetup.xml","status":"modified","additions":33,"deletions":33,"changes":66,"blob_url":"https://github.com/apache/openjpa/blob/b546423063fe7c1889f7764393102f423a699483/openjpa-project/src/doc/manual/ref_guide_dbsetup.xml","raw_url":"https://github.com/apache/openjpa/raw/b546423063fe7c1889f7764393102f423a699483/openjpa-project/src/doc/manual/ref_guide_dbsetup.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_dbsetup.xml?ref=b546423063fe7c1889f7764393102f423a699483","patch":"@@ -3215,39 +3215,39 @@ action is used. (See <xref linkend=\"ref_guide_schema_schematool\"/> for\n more info about <literal>deleteTableContents</literal>.) Defaults to\n <literal>false</literal>, since the statement may fail if using InnoDB\n tables and delete constraints.\n-                    </para>\r\n-                    \r\n-                </listitem>\n-            </itemizedlist>\r\n-            \r\n-                    <para>\r\n-Starting with Connector/J 3.1.7, MySQL supports a variant of the driver \r\n-<literal>com.mysql.jdbc.ReplicationDriver</literal> that automatically sends \r\n-queries to a read/write master, or a failover or round-robin load balanced set \r\n-of slaves based on the state of read-only status of the connection. \r\n-See  <ulink url=\"http://dev.mysql.com/doc/refman/5.1/en/connector-j-reference-replication-connection.html\">\r\n-MySQL Reference</ulink> for more details. \r\n-                    </para>\r\n-                    <para>\r\n-This replication feature can be used transparently with OpenJPA application by\r\n-following configuration:\r\n-                    </para>\r\n-        <itemizedlist>\r\n-           <listitem>\r\n-             <para>\r\n-<literal>openjpa.ConnectionDriverName: com.mysql.jdbc.ReplicationDriver</literal>\r\n-             </para>\r\n-           </listitem>\r\n-           <listitem>\r\n-             <para>\r\n-<literal>openjpa.ConnectionFactoryProperties: autoReconnect=true,roundRobinLoadBalance=true</literal>\r\n-             </para>\r\n-             <para>\r\n-OpenJPA will use a read-only connection with replicated database configuration\r\n-and will automatically switch the connection to a non-readonly mode if the\r\n-transaction is writing to the database.             \r\n-             </para>\r\n-           </listitem>\r\n+                    </para>\n+                    \n+                </listitem>\n+            </itemizedlist>\n+            \n+                    <para>\n+Starting with Connector/J 3.1.7, MySQL supports a variant of the driver \n+<literal>com.mysql.jdbc.ReplicationDriver</literal> that automatically sends \n+queries to a read/write master, or a failover or round-robin load balanced set \n+of slaves based on the state of read-only status of the connection. \n+See  <ulink url=\"http://dev.mysql.com/doc/refman/5.1/en/connector-j-reference-replication-connection.html\">\n+MySQL Reference</ulink> for more details. \n+                    </para>\n+                    <para>\n+This replication feature can be used transparently with OpenJPA application by\n+following configuration:\n+                    </para>\n+        <itemizedlist>\n+           <listitem>\n+             <para>\n+<literal>openjpa.ConnectionDriverName: com.mysql.jdbc.ReplicationDriver</literal>\n+             </para>\n+           </listitem>\n+           <listitem>\n+             <para>\n+<literal>openjpa.ConnectionFactoryProperties: autoReconnect=true,roundRobinLoadBalance=true</literal>\n+             </para>\n+             <para>\n+OpenJPA will use a read-only connection with replicated database configuration\n+and will automatically switch the connection to a non-readonly mode if the\n+transaction is writing to the database.             \n+             </para>\n+           </listitem>\n          </itemizedlist>\n         </section>\n         <section id=\"ref_guide_dbsetup_dbsupport_oracle\">"},{"sha":"cc432694afa64025aaaa50b0efabfbca9c77090b","filename":"openjpa-project/src/doc/manual/ref_guide_mapping.xml","status":"modified","additions":3605,"deletions":3605,"changes":7210,"blob_url":"https://github.com/apache/openjpa/blob/b546423063fe7c1889f7764393102f423a699483/openjpa-project/src/doc/manual/ref_guide_mapping.xml","raw_url":"https://github.com/apache/openjpa/raw/b546423063fe7c1889f7764393102f423a699483/openjpa-project/src/doc/manual/ref_guide_mapping.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_mapping.xml?ref=b546423063fe7c1889f7764393102f423a699483"},{"sha":"c2e48064cf28a27ede0a7fa0795f636e40f57960","filename":"openjpa-project/src/doc/manual/ref_guide_pc.xml","status":"modified","additions":15,"deletions":15,"changes":30,"blob_url":"https://github.com/apache/openjpa/blob/b546423063fe7c1889f7764393102f423a699483/openjpa-project/src/doc/manual/ref_guide_pc.xml","raw_url":"https://github.com/apache/openjpa/raw/b546423063fe7c1889f7764393102f423a699483/openjpa-project/src/doc/manual/ref_guide_pc.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_pc.xml?ref=b546423063fe7c1889f7764393102f423a699483","patch":"@@ -2149,17 +2149,17 @@ defined in base class <classname>Publication</classname> rather than subclass\n field-masking algorithms, which would allow the latter method behavior if\n <literal>Magazine</literal> did not also define a field called <literal>\n publisher</literal>.\n-            </para>\r\n-            \r\n-            <para>\r\n-            <title>Extended Path Lookup</title>\r\n-To include the fields defined in a super class by the subclass or to distinguish\r\n-between fields that are defined in <emphasis>both</emphasis> super- and subclass,\r\n-set <literal>setExtendedPathLookup(boolean)</literal> on <literal>FetchPlan\r\n-</literal> to <literal>true</literal>. By default, this option is set to\r\n-<literal>false</literal>, to reduce more extensive lookups for predominant use \r\n-cases.           \r\n-            </para>\r\n+            </para>\n+            \n+            <para>\n+            <title>Extended Path Lookup</title>\n+To include the fields defined in a super class by the subclass or to distinguish\n+between fields that are defined in <emphasis>both</emphasis> super- and subclass,\n+set <literal>setExtendedPathLookup(boolean)</literal> on <literal>FetchPlan\n+</literal> to <literal>true</literal>. By default, this option is set to\n+<literal>false</literal>, to reduce more extensive lookups for predominant use \n+cases.           \n+            </para>\n             \n             <para>\n In order to avoid the cost of reflection, OpenJPA does not perform any\n@@ -2203,11 +2203,11 @@ relation is in a subclass table. If the subclass table would not otherwise be\n joined into the select, OpenJPA avoids the extra join just to select the foreign\n key values.\n                     </para>\n-                </listitem>\r\n-                \r\n+                </listitem>\n+                \n                 \n-            </itemizedlist>\r\n-            \r\n+            </itemizedlist>\n+            \n             \n         </section>\n     </section>"},{"sha":"197e0d19116c8a512ac8430ed654686d4b2c956a","filename":"openjpa-project/src/doc/manual/ref_guide_runtime.xml","status":"modified","additions":20,"deletions":20,"changes":40,"blob_url":"https://github.com/apache/openjpa/blob/b546423063fe7c1889f7764393102f423a699483/openjpa-project/src/doc/manual/ref_guide_runtime.xml","raw_url":"https://github.com/apache/openjpa/raw/b546423063fe7c1889f7764393102f423a699483/openjpa-project/src/doc/manual/ref_guide_runtime.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_runtime.xml?ref=b546423063fe7c1889f7764393102f423a699483","patch":"@@ -526,9 +526,9 @@ through the <link linkend=\"openjpa.ReadLockLevel\"><literal>\n openjpa.ReadLockLevel</literal></link> and\n <link linkend=\"openjpa.WriteLockLevel\"><literal>openjpa.WriteLockLevel</literal>\n </link> configuration properties. Each property accepts a value of <literal>\n-none</literal>, <literal>read</literal>, <literal>write</literal>, \r\n-<literal>optimistic</literal>, <literal>optimistic-force-increment</literal>,\r\n-<literal>pessimistic-read</literal>, <literal>pessimistic-write</literal>,\r\n+none</literal>, <literal>read</literal>, <literal>write</literal>, \n+<literal>optimistic</literal>, <literal>optimistic-force-increment</literal>,\n+<literal>pessimistic-read</literal>, <literal>pessimistic-write</literal>,\n <literal>pessimistic-force-increment</literal>, or a number\n corresponding to a lock level defined by the\n <link linkend=\"ref_guide_locking_lockmgr\">lock manager</link> in use. These\n@@ -1394,31 +1394,31 @@ import org.apache.openjpa.persistence.*;\n ...\n \n // the method query language is 'openjpa.MethodQL'.\n-// set the query string to the target method to execute, prefixed by fullly-\r\n-// qualified class name.\r\n-// If a candidate class has been specified for the query, then if the class is \r\n-// in the candidate class' package or in the query imports, you can omit the \r\n-// package. If the method is in the candidate class, you can omit the class name \r\n-// and just specify the method name.\r\n+// set the query string to the target method to execute, prefixed by fullly-\n+// qualified class name.\n+// If a candidate class has been specified for the query, then if the class is \n+// in the candidate class' package or in the query imports, you can omit the \n+// package. If the method is in the candidate class, you can omit the class name \n+// and just specify the method name.\n \n   OpenJPAEntityManager oem = OpenJPAPersistence.cast(emf);\n   OpenJPAQuery q = oem.createQuery(\"openjpa.MethodQL\", \"com.xyz.Finder.getByName\");\n \n-// parameters are passed the same way as in standard queries\r\n-// but you have to declare the parameters with their types on the implementation\r\n-\r\n-// Unwrap the implementation and declare parameters with types in a \r\n-// comma-separated list\r\n-  q.unwrap(org.apache.openjpa.kernel.Query.class)\r\n-   .declareParameters(\"String firstName, String lastName\");\r\n+// parameters are passed the same way as in standard queries\n+// but you have to declare the parameters with their types on the implementation\n+\n+// Unwrap the implementation and declare parameters with types in a \n+// comma-separated list\n+  q.unwrap(org.apache.openjpa.kernel.Query.class)\n+   .declareParameters(\"String firstName, String lastName\");\n \n   q.setParameter(\"firstName\", \"Fred\").setParameter(\"lastName\", \"Lucas\");\n \n // this executes the target method to get the results\n-  List results = q.getResultList();\r\n-\r\n-// The result is returned as a list but the element(s) in the list is determined \r\n-// by the returned value of the target method\r\n+  List results = q.getResultList();\n+\n+// The result is returned as a list but the element(s) in the list is determined \n+// by the returned value of the target method\n  \n </programlisting>\n             <para>"},{"sha":"63e31cae2fbd920fd5c0f2c81f6c58fc44fedc1a","filename":"openjpa-project/src/doc/manual/ref_guide_slice.xml","status":"modified","additions":635,"deletions":635,"changes":1270,"blob_url":"https://github.com/apache/openjpa/blob/b546423063fe7c1889f7764393102f423a699483/openjpa-project/src/doc/manual/ref_guide_slice.xml","raw_url":"https://github.com/apache/openjpa/raw/b546423063fe7c1889f7764393102f423a699483/openjpa-project/src/doc/manual/ref_guide_slice.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_slice.xml?ref=b546423063fe7c1889f7764393102f423a699483","patch":"@@ -1,636 +1,636 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n-<!--\r\n- Licensed to the Apache Software Foundation (ASF) under one\r\n- or more contributor license agreements.  See the NOTICE file\r\n- distributed with this work for additional information\r\n- regarding copyright ownership.  The ASF licenses this file\r\n- to you under the Apache License, Version 2.0 (the\r\n- \"License\"); you may not use this file except in compliance\r\n- with the License.  You may obtain a copy of the License at\r\n- \r\n- http://www.apache.org/licenses/LICENSE-2.0\r\n- \r\n- Unless required by applicable law or agreed to in writing,\r\n- software distributed under the License is distributed on an\r\n- \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- KIND, either express or implied.  See the License for the\r\n- specific language governing permissions and limitations\r\n- under the License.   \r\n--->\r\n-<chapter id=\"ref_guide_slice\">\r\n-  <title>\r\n-    Distributed Persistence\r\n-  </title>\r\n-  <para>\r\n-  The standard JPA runtime environment works with a <emphasis>single</emphasis>\r\n-  database instance. <emphasis>Slice</emphasis> is a plug-in module for OpenJPA  \r\n-  to work with <emphasis>multiple</emphasis> databases within the same  \r\n-  transaction. Following sections describe the features and usage of Slice for \r\n-  distributed database environment.\r\n-  </para>\r\n-  \r\n-  <section id=\"slice_overview\">\r\n-    <title>Overview</title>\r\n-    <para>\r\n-    Enterprise applications are increasingly deployed in distributed database\r\n-    environment. A distributed, horizontally-partitioned \r\n-    database environment can be an effective scaling strategy for growing data \r\n-\tvolume, to support multiple clients on a multi-tenant hosting platform and \r\n-\tmany other practical scenarios that can benefit from data partitioning.\r\n-    </para>\r\n-    \r\n-    <para>\r\n-    Any JPA-based user application has to address demanding technical and \r\n-    conceptual challenges to interact with multiple physical databases\r\n-    within a single transaction. \r\n-    OpenJPA Slice encapsulates the complexity of distributed database environment \r\n-    via the abstraction of <emphasis>virtual</emphasis> database which internally \r\n-    manages multiple physical database instances referred  \r\n-    as <emphasis>slice</emphasis>. \r\n-    <emphasis>Virtualization</emphasis> of distributed databases makes OpenJPA \r\n-\tobject management kernel and the user application to work in the same way as \r\n-\tin the case of a single physical database.\r\n-    </para>\r\n-  </section>\r\n-  \r\n-    <section id=\"features_and_limitations\">\r\n-       <title>Salient Features</title>\r\n-         <section><title>Transparency</title>\r\n-            <para>\r\n-\t\t\t  The primary design objective for Slice is to make the user \r\n-\t\t\t  application transparent to the change in storage strategy where \r\n-\t\t\t  data resides in multiple (possibly heterogeneous) databases instead\r\n-\t\t\t  of a single database. Slice achieves this transparency by \r\n-\t\t\t  virtualization of multiple databases as a single database such \r\n-\t\t\t  that OpenJPA object management kernel continues to interact in\r\n-\t\t\t  exactly the same manner with storage layer. Similarly, \r\n-              the existing application or the persistent domain featureSelection requires \r\n-              <emphasis>no change</emphasis> to upgrade from a single database \r\n-              to a distributed database environment. \r\n-            </para>\r\n-\t\t\t<para>\r\n-\t\t\t  An existing application developed for a single database can be \r\n-\t\t\t  adapted to work with multiple databases purely by configuring\r\n-\t\t\t  a persistence unit via <classname>META-INF/persistence.xml</classname>. \r\n-\t\t\t</para>\r\n-         </section>\r\n-         \r\n-\t\t<section><title>Scaling</title>\r\n-\t\t\t<para>\r\n-\t\t\tThe primary performance characteristics for Slice is to scale against\r\n-\t\t\tgrowing data volume by <emphasis>horizontal</emphasis> partitioning data \r\n-\t\t\tacross many databases.  \r\n-\t\t\t</para>\r\n-\t\t\t<para>\r\n-\t\t\tSlice executes the database operations such as query or flush <emphasis>in\r\n-\t\t\tparallel</emphasis> across each physical database. Hence, scaling characteristics \r\n-\t\t\tagainst data volume are bound by the size of the maximum data \r\n-\t\t\tpartition instead of the size of the entire data set. The use cases\r\n-\t\t\twhere the data is naturally amenable to horizontal partitions, \r\n-\t\t\tfor example, by temporal interval (e.g. Purchase Orders per month) \r\n-\t\t\tor by geographical regions (e.g. Customer by Zip Code) can derive\r\n-\t\t\tsignificant performance benefit and favorable scaling behavior by \r\n-\t\t\tusing Slice.     \r\n-\t\t\t</para>\r\n-\t\t</section>\r\n-\t\t\r\n-        <section><title>Distributed Query</title>\r\n-            <para>\r\n-            The queries are executed in parallel across one or more slices and the \r\n-\t\t\tindividual query results are merged into a single list before being\r\n-\t\t\treturned to the caller application. The <emphasis>merge</emphasis> operation is\r\n-\t\t\tmore complex for the queries that involve sorting and/or specify a \r\n-\t\t\trange. Slice supports both sorting and range queries. \r\n-            </para>\r\n-\t\t\t<para>\r\n-            Slice also supports aggregate queries where the aggregate operation \r\n-\t\t\tis <emphasis>commutative</emphasis> to partitioning such as \r\n-\t\t\t<classname>COUNT()</classname> or <classname>MAX()</classname> but not <classname>AVG()</classname>. \r\n-            </para>\r\n-         \r\n-            <para>\r\n-            By default, any query is executed against all available slices. \r\n-\t\t\tHowever, the application can target the query only to a subset of \r\n-\t\t\tslices by setting <emphasis>hint</emphasis> on <classname>javax.persistence.Query</classname>. \r\n-\t\t\tThe hint key is  <classname>openjpa.hint.slice.Target</classname> and \r\n-            hint value is a comma-separated list of slice identifiers. The following \r\n-            example shows how to target a query only to a pair of slices \r\n-\t\t\twith logical identifier <classname>\"One\"</classname> and <classname>\"Two\"</classname>.\r\n-                          \r\n-            <programlisting>\r\n-              <![CDATA[EntityManager em = ...;\r\n-              em.getTransaction().begin();\r\n-              String hint = \"openjpa.hint.slice.Target\";\r\n-              Query query = em.createQuery(\"SELECT p FROM PObject\")\r\n-\t\t\t\t              .setHint(hint, \"One, Two\");\r\n-              List result = query.getResultList();\r\n-              // verify that each instance is originating from the hinted slices\r\n-              for (Object pc : result) {\r\n-                 String sliceOrigin = SlicePersistence.getSlice(pc);\r\n-                 assertTrue (\"One\".equals(sliceOrigin) || \"Two\".equals(sliceOrigin));\r\n-              }\r\n-              ]]>\r\n-            </programlisting> \r\n-            </para>\r\n-         </section>\r\n-\t\t\r\n-         <section><title>Data Distribution</title>\r\n-            <para>\r\n-             The user application decides how the newly persistent instances be \r\n-             distributed across the slices. The user application specifies the \r\n-\t\t\t data distribution policy by implementing  \r\n-             <classname>org.apache.openjpa.slice.DistributionPolicy</classname>.\r\n-\t\t\t\r\n-\t\t\t The  <classname>DistributionPolicy</classname> interface\r\n-\t\t\t is simple with a single method. The complete listing of the\r\n-\t\t\t documented interface follows:\r\n-\t\t   <programlisting> \r\n-\t\t   <![CDATA[ \r\n-\t\t\tpublic interface DistributionPolicy {\r\n-\t\t\t/**\r\n-\t\t\t * Gets the name of the slice where the given newly persistent \r\n-\t\t\t * instance will be stored.\r\n-\t\t\t *  \r\n-\t\t\t * @param pc The newly persistent or to-be-merged object. \r\n-\t\t\t * @param slices name of the configured slices.\r\n-\t\t\t * @param context persistence context managing the given instance.\r\n-\t\t\t * \r\n-\t\t\t * @return identifier of the slice. This name must match one of the\r\n-\t\t\t * configured slice names. \r\n-\t\t\t * @see DistributedConfiguration#getSliceNames()\r\n-\t\t\t */\r\n-\t\t\tString distribute(Object pc, List<String> slices, Object context);\r\n-\t\t\t}\r\n-\t\t]]>\r\n-       </programlisting>\r\n-        </para>\r\n-\t\t\t \r\n-\t\t <para>\r\n-\t\t\t Slice runtime invokes this user-supplied method for the newly\r\n-\t\t\t persistent instance that is explicit argument of the \r\n-\t\t\t <classname>javax.persistence.EntityManager.persist(Object pc)</classname>\r\n-\t\t\t method. The user application must return a valid slice name from\r\n-\t\t\t this method to designate the target slice for the given instance.\r\n-\t\t\t The data distribution policy may be based on the attribute \r\n-\t\t\t of the data itself. For example, all Customer whose first name \r\n-\t\t\t begins with character 'A' to 'M' will be stored in one slice \r\n-\t\t\t while names beginning with 'N' to 'Z' will be stored in another \r\n-\t\t\t slice. The noteworthy aspect of such policy implementation is \r\n-\t\t\t the attribute values that participate in \r\n-\t\t\t the distribution policy logic should be set before invoking \r\n-\t\t\t <classname>EntityManager.persist()</classname> method.\r\n-\t\t </para>\r\n-             \r\n-\t\t<para>\r\n-\t\t\tThe user application needs to specify the target slice <emphasis>only</emphasis>\r\n-\t\t\tfor the <emphasis>root</emphasis> instance i.e. the explicit argument for the\r\n-\t\t\t<classname>EntityManager.persist(Object pc)</classname> method. Slice computes\r\n-\t\t\tthe transitive closure of the graph i.e. the set of all instances \r\n-\t\t\tdirectly or indirectly reachable from the root instance and stores\r\n-\t\t\tthem in the same target slice.  \r\n-\t\t</para>\r\n-\t\t\t\r\n-\t\t <para> \r\n-\t\t Slice tracks the original database for existing instances. When\r\n-\t\t an application issues a query, the resultant instances can be loaded \r\n-\t\t from different slices. As Slice tracks the original slice for each\r\n-\t\t instance, any subsequent update to an instance is committed to the \r\n-\t\t appropriate original database slice. \r\n-\t\t</para>\r\n-            \r\n-            <note>\r\n-            <para>\r\n-            You can find the original slice of an instance <classname>pc</classname> by \r\n-            the static utility method  \r\n-            <methodname>SlicePersistence.getSlice(pc)</methodname>.\r\n-            This method returns the slice identifier associated with the\r\n-            given <emphasis>managed</emphasis> instance. If the instance is not\r\n-            being managed then the method return null because any unmanaged or\r\n-            detached instance is not associated with any slice. \r\n-            </para>\r\n-            </note>\r\n-         </section>\r\n-         \r\n-\t\t<section><title>Data Replication</title>\r\n-\t\t\t<para>\r\n-\t\t\tWhile Slice ensures that the transitive closure is stored in the \r\n-\t\t\tsame slice, there can be data elements that are commonly referred by\r\n-\t\t\tmany instances such as Country or Currency code. Such quasi-static \r\n-\t\t\tmaster data can be stored as identical copies in multiple slices. \r\n-\t\t\tThe user application needs to annotate such entity with\r\n-\t\t\t<classname>@Replicated</classname> annotation and implement \r\n-\t\t\ta <classname>org.apache.openjpa.slice.ReplicationPolicy</classname> \r\n-\t\t\tinterface. The <classname>ReplicationPolicy</classname> interface \r\n-\t\t\tis quite similar to <classname>DistributionPolicy</classname> \r\n-\t\t\tinterface except it returns an array of target slice names instead\r\n-\t\t\tof a single slice. \r\n-\t\t\t<programlisting> \r\n-           <![CDATA[  \r\n-\t\t\t String[] replicate(Object pc, List<String> slices, Object context);\r\n-        ]]>\r\n-       </programlisting>\r\n-\t\t</para>\r\n-\t\t\t<para>\r\n-\t\t\t\tThe default implementation assumes that replicated instances are\r\n-\t\t\t\tstored in all available slices. If any such replicated instance\r\n-\t\t\t\tis modified then the modification is updated to all target slices\r\n-\t\t\t\tto maintain the critical assumption that the state of a replicated \r\n-\t\t\t\tinstance is identical across all its target slices. \r\n-\t\t\t</para>\r\n-\t\t</section>\r\n-\t\t\r\n-         <section><title>Heterogeneous Database</title>\r\n-            <para> \r\n-              Each slice can be configured independently with its own JDBC \r\n-              driver and other connection parameters. Hence the target database \r\n-              environment can constitute of heterogeneous databases. \r\n-            </para>\r\n-        </section>         \r\n-         \r\n-         <section><title>Distributed Transaction</title>\r\n-            <para> \r\n-            The database slices participate in a global transaction provided\r\n-            each slice is configured with a XA-compliant JDBC driver, even\r\n-            when the persistence unit is configured for <classname>RESOURCE_LOCAL</classname>\r\n-            transaction.\r\n-            </para>\r\n-            <para>\r\n-            <warning>\r\n-            If any of the configured slices is not XA-compliant <emphasis>and</emphasis> \r\n-            the persistence unit is configured for <classname>RESOURCE_LOCAL</classname>\r\n-            transaction then each slice is committed without any two-phase\r\n-            commit protocol. If commit on any slice fails, then atomic nature of\r\n-            the transaction is not ensured.\r\n-            </warning>\r\n-            </para>\r\n-          </section>\r\n-        \r\n-         <section id=\"collocation_constraint\"><title>Collocation Constraint</title>\r\n-            <para> \r\n-            No relationship can exist across database slices. In O-R mapping parlance,\r\n-            this condition translates to the limitation that the transitive closure of an object graph must be \r\n-            <emphasis>collocated</emphasis> in the same database.\r\n-            For example, consider a domain featureSelection where Person relates to Address.\r\n-            Person X refers to Address A while Person Y refers to Address B. \r\n-            Collocation Constraint means that <emphasis>both</emphasis> X and A \r\n-            must be stored in the same\r\n-            database slice. Similarly Y and B must be stored in a single slice.\r\n-            </para>\r\n-            <para>\r\n-            Slice, however, helps to maintain collocation constraint automatically.\r\n-            The instances in the closure set of any newly persistent instance \r\n-            reachable via cascaded relationship is stored in the same slice.\r\n-            The user-defined distribution policy requires to supply the slice \r\n-            for the root instance only.\r\n-            </para>\r\n-         </section>\r\n-    </section>\r\n-  \r\n-  <section id=\"slice_configuration\">\r\n-    <title>Usage</title>\r\n-    <para>\r\n-     Slice is activated via the following property settings:\r\n-    </para>\r\n-    <section>\r\n-      <title>How to activate Slice Runtime?</title>\r\n-      <para>\r\n-       The basic configuration property is \r\n-       <programlisting> \r\n-        <![CDATA[ <property name=\"openjpa.BrokerFactory\" value=\"slice\"/>]]>\r\n-       </programlisting> \r\n-       This critical configuration activates a specialized object management \r\n-\t   kernel that can work against multiple databases.  \r\n-      </para>\r\n-    </section> \r\n-    \r\n-    <section>\r\n-      <title>How to configure each database slice?</title>\r\n-      <para>\r\n-      Each database slice is identified by a logical name unique within a\r\n-      persistent unit. The list of the slices is specified by \r\n-      <classname>openjpa.slice.Names</classname> property.\r\n-      For example, specify three slices named <classname>\"One\"</classname>, \r\n-      <classname>\"Two\"</classname> and <classname>\"Three\"</classname> as follows:\r\n-      <programlisting>\r\n-      <![CDATA[ <property name=\"openjpa.slice.Names\" value=\"One, Two, Three\"/>]]>\r\n-      </programlisting>\r\n-      </para>\r\n-      <para>\r\n-      This property is not mandatory. If this property is not specified then\r\n-      the configuration is scanned for logical slice names. Any property\r\n-      <classname>\"abc\"</classname> of the form <classname>openjpa.slice.XYZ.abc</classname> will \r\n-      register a slice with logical\r\n-      name <classname>\"XYZ\"</classname>.\r\n-      </para>\r\n-      <para>\r\n-      The order of the names is significant when no <classname>openjpa.slice.Master</classname> \r\n-      property is not specified. Then the persistence unit is scanned to find\r\n-      all configured slice names and they are ordered alphabetically.  \r\n-      </para>\r\n-      \r\n-      <para>\r\n-       Each database slice properties can be configured independently. \r\n-       For example, the\r\n-       following configuration will register two slices with logical name \r\n-       <classname>One</classname> and <classname>Two</classname>.\r\n-       <programlisting> \r\n-        <![CDATA[<property name=\"openjpa.slice.One.ConnectionURL\" value=\"jdbc:mysql:localhost//slice1\"/>\r\n-        <property name=\"openjpa.slice.Two.ConnectionURL\" value=\"jdbc:mysql:localhost//slice2\"/>]]>\r\n-       </programlisting> \r\n-      </para>\r\n-      \r\n-      <para>\r\n-       Any OpenJPA specific property can be configured per slice basis. \r\n-       For example, the following configuration will use two different JDBC \r\n-       drivers for slice <classname>One</classname> and <classname>Two</classname>.\r\n-       <programlisting> \r\n-        <![CDATA[<property name=\"openjpa.slice.One.ConnectionDriverName\" value=\"com.mysql.jdbc.Driver\"/>\r\n-        <property name=\"openjpa.slice.Two.ConnectionDriverName\" value=\"com.mysql.jdbc.jdbc2.optional.MysqlXADataSource\"/>]]>\r\n-       </programlisting> \r\n-      </para>\r\n-      \r\n-      <para>\r\n-        Any property if unspecified for a particular slice will be defaulted by\r\n-        corresponding OpenJPA property. For example, consider following three slices\r\n-        <programlisting> \r\n-         <![CDATA[<property name=\"openjpa.slice.One.ConnectionURL\"          value=\"jdbc:mysql:localhost//slice1\"/>\r\n-         <property name=\"openjpa.slice.Two.ConnectionURL\"          value=\"jdbc:mysql:localhost//slice2\"/>\r\n-         <property name=\"openjpa.slice.Three.ConnectionURL\"        value=\"jdbc:oracle:localhost//slice3\"/>\r\n-\r\n-         <property name=\"openjpa.ConnectionDriverName\"     value=\"com.mysql.jdbc.Driver\"/>\r\n-         <property name=\"openjpa.slice.Three.ConnectionDriverName\" value=\"oracle.jdbc.Driver\"/>]]>\r\n-        </programlisting> \r\n-        In this example, <classname>Three</classname> will use slice-specific\r\n-        <classname>oracle.jdbc.Driver</classname> driver while slice\r\n-        <classname>One</classname> and <classname>Two</classname> will use\r\n-        the driver <classname>com.mysql.jdbc.Driver</classname> as \r\n-        specified by <classname>openjpa.ConnectionDriverName</classname> \r\n-        property value.\r\n-      </para>\r\n-    </section>\r\n-     \r\n-    <section id=\"distribution_policy\">\r\n-       <title>Implement DistributionPolicy interface</title>\r\n-       <para>\r\n-        Slice needs to determine which slice will persist a new instance. \r\n-        The application can only decide this policy (for example, \r\n-        all PurchaseOrders before April 30 goes to slice <classname>One</classname>,\r\n-        all the rest goes to slice <classname>Two</classname>). This is why\r\n-        the application has to implement \r\n-        <classname>org.apache.openjpa.slice.DistributionPolicy</classname> and\r\n-        specify the implementation class in configuration\r\n-        <programlisting> \r\n-         <![CDATA[ <property name=\"openjpa.slice.DistributionPolicy\" value=\"com.acme.foo.MyOptimialDistributionPolicy\"/>]]>\r\n-        </programlisting>\r\n-       </para>\r\n-       \r\n-       <para>\r\n-        The interface <classname>org.apache.openjpa.slice.DistributionPolicy</classname>\r\n-        is simple with a single method. The complete listing of the\r\n-        documented interface follows:\r\n-       <programlisting> \r\n-       <![CDATA[ \r\n-public interface DistributionPolicy {\r\n-    /**\r\n-     * Gets the name of the slice where a given instance will be stored.\r\n-     *  \r\n-     * @param pc The newly persistent or to-be-merged object. \r\n-     * @param slices name of the configured slices.\r\n-     * @param context persistence context managing the given instance.\r\n-     * \r\n-     * @return identifier of the slice. This name must match one of the\r\n-     * configured slice names. \r\n-     * @see DistributedConfiguration#getSliceNames()\r\n-     */\r\n-    String distribute(Object pc, List<String> slices, Object context);\r\n-}\r\n-]]>\r\n-       </programlisting>\r\n-        </para>\r\n-        \r\n-        <para>\r\n-        While implementing a distribution policy the most important thing to\r\n-        remember is <link linkend=\"collocation_constraint\">collocation constraint</link>.\r\n-        Because Slice can not establish or query any cross-database relationship, all the\r\n-        related instances must be stored in the same database slice. \r\n- \r\n-        Slice can determine the closure of a root object by traversal of \r\n-        cascaded relationships. Hence user-defined policy has to only decide the\r\n-        database for the root instance that is the explicit argument to \r\n-        <methodname>EntityManager.persist()</methodname> call.\r\n-        Slice will ensure that all other related instances that gets persisted by cascade\r\n-        is assigned to the same database slice as that of the root instance.\r\n-        However, the user-defined distribution policy must return the\r\n-        same slice identifier for the instances that are logically related but\r\n-        not cascaded for persist. \r\n-        </para>\r\n-    </section>\r\n-    \r\n-    <section id=\"replication_policy\">\r\n-       <title>Implement ReplicationPolicy interface</title>\r\n-\t\t<para>\r\n-\t\t\tThe entities that are annotated with <classname>@Replicated</classname> \r\n-\t\t\tannotation can be stored in multiple slices as identical copies.\r\n-        Specify the implementation class of <classname>ReplicationPolicy</classname> in configuration as\r\n-        <programlisting> \r\n-         <![CDATA[ <property name=\"openjpa.slice.ReplicationPolicy\" value=\"com.acme.foo.MyReplicationPolicy\"/>]]>\r\n-        </programlisting>\r\n-\t\t</para>\r\n-    </section>\r\n-  </section>\r\n-\t\r\n-\t\r\n-  <section>\r\n-  <title>Configuration Properties</title>\r\n-    <para>\r\n-    The properties to configure Slice can be classified in two broad groups.\r\n-The <emphasis>global</emphasis> properties apply to all the slices, for example,\r\n-the thread pool used to execute the queries in parallel or the transaction \r\n-manager used to coordinate transaction across multiple slices. \r\n-The <emphasis>per-slice</emphasis> properties apply to individual slice, for example,\r\n-the JDBC connection URL of a slice.\r\n-   </para>\r\n-   \r\n-   <section>\r\n-     <title>Global Properties</title>\r\n-     \r\n-     <section>\r\n-        <title>openjpa.slice.DistributionPolicy</title>\r\n-        <para>\r\n-         This <emphasis>mandatory</emphasis> plug-in property determines how newly\r\n-         persistent instances are distributed across individual slices. \r\n-         The value of this property is a fully-qualified class name that implements\r\n-         <ulink url=\"../javadoc/org/apache/openjpa/slice/DistributionPolicy.html\">\r\n-         <classname>org.apache.openjpa.slice.DistributionPolicy</classname>\r\n-         </ulink> interface.\r\n-        </para>\r\n-     </section>\r\n-     \r\n-     <section><title>openjpa.slice.Lenient</title>\r\n-      <para>\r\n-        This boolean plug-in property controls the behavior when one or more slice \r\n-        can not be connected or unavailable for some other reasons.\r\n-        If <classname>true</classname>, the unreachable slices are ignored. If \r\n-        <classname>false</classname> then any unreachable slice will raise an exception\r\n-        during startup.\r\n-        </para>\r\n-        <para>\r\n-        By default this value is set to <classname>false</classname> i.e. all configured\r\n-        slices must be available.\r\n-        </para> \r\n-     </section>\r\n-\r\n-     <section>\r\n-      <title>openjpa.slice.Master</title>\r\n-\t\t <para>\r\n-\t\t\t The user application often directs OpenJPA to generate primary keys \r\n-\t\t\t for persistence instances automatically or from a specific database \r\n-\t\t\t sequence. For such primary key value generation strategy where \r\n-\t\t\t a database instance is required, Slice uses a designated slice \r\n-\t\t\t referred as <emphasis>master</emphasis> slice. \r\n-\t\t </para>\r\n-         <para>\r\n-\t\t\t The master slice can be specified explicitly via \r\n-\t\t\t <classname>openjpa.slice.Master</classname> property and whose value is one\r\n-\t\t\t of the configured slice names. If this property is not explicitly\r\n-\t\t\t specified then, by default, the master slice is the first slice \r\n-\t\t\t in the list of configured slice names. \r\n-       </para>\r\n-       <para>\r\n-              <warning>\r\n-              Currently, there is no provision to use sequence from \r\n-              multiple slices.\r\n-              </warning>\r\n-       </para>\r\n-     </section>\r\n-    \r\n-     <section>\r\n-        <title>openjpa.slice.Names</title>\r\n-        <para>\r\n-         This plug-in property can be used to register the logical slice names.\r\n-         The value of this property is comma-separated list of slice names. \r\n-         The ordering of the names in this list is \r\n-         <emphasis>significant</emphasis> because \r\n-         <link linkend=\"distribution_policy\">DistributionPolicy</link> and\r\n-\t\t<link linkend=\"replication_policy\">ReplicationPolicy</link> receive\r\n-         the input argument of the slice names in the same order.\r\n-        </para>\r\n-        <para>\r\n-        If logical slice names are not registered explicitly via this property,\r\n-        then all logical slice names available in the persistence unit are \r\n-        registered. The ordering of the slice names in this case is alphabetical.  \r\n-        </para>\r\n-        <para>\r\n-        If logical slice names are registered explicitly via this property, then\r\n-        any logical slice that is available in the persistence unit but excluded\r\n-        from this list is ignored. \r\n-        </para>\r\n-     </section>\r\n-    \r\n-     <section>\r\n-        <title>openjpa.slice.ThreadingPolicy</title>\r\n-        <para>\r\n-        This plug-in property determines the nature of thread pool being used \r\n-        for database operations such as query or flush on individual slices. \r\n-        The value of the property is a \r\n-        fully-qualified class name that implements \r\n-        <ulink url=\"http://java.sun.com/j2se/1.5.0/docs/api/java/util/concurrent/ExecutorService.html\">\r\n-        <classname>java.util.concurrent.ExecutorService</classname>\r\n-        </ulink> interface.  \r\n-        Two pre-defined pools can be chosen via their aliases namely \r\n-        <classname>fixed</classname> or <classname>cached</classname>.\r\n-        </para>\r\n-        <para>\r\n-        The pre-defined alias <classname>cached</classname> activates a \r\n-        <ulink url=\"http://java.sun.com/j2se/1.5.0/docs/api/java/util/concurrent/Executors.html#newCachedThreadPool()\">cached thread pool</ulink>. \r\n-        A cached thread pool creates new threads as needed, but will reuse \r\n-        previously constructed threads when they are available. This pool \r\n-        is suitable in scenarios that execute many short-lived asynchronous tasks.\r\n-        The way Slice uses the thread pool to execute database operations is \r\n-        akin to such scenario and hence <classname>cached</classname> is the default \r\n-        value for this plug-in property.  \r\n-        </para>\r\n-        <para>\r\n-        The <classname>fixed</classname> alias activates a \r\n-        <ulink url=\"http://java.sun.com/j2se/1.5.0/docs/api/java/util/concurrent/Executors.html#newFixedThreadPool(int)\">fixed thread pool</ulink>.\r\n-        The fixed thread pool can be further parameterized with \r\n-        <classname>CorePoolSize</classname>, <classname>MaximumPoolSize</classname>, \r\n-        <classname>KeepAliveTime</classname> and <classname>RejectedExecutionHandler</classname>. \r\n-        The meaning of these parameters are described in \r\n-        <ulink url=\"http://java.sun.com/j2se/1.5.0/docs/api/java/util/concurrent/ThreadPoolExecutor.html\">JavaDoc</ulink>.\r\n-        The users can exercise finer control on thread pool behavior via these\r\n-        parameters.\r\n-        By default, the core pool size is <classname>10</classname>, maximum pool size is\r\n-        also <classname>10</classname>, keep alive time is <classname>60</classname> seconds and \r\n-        rejected execution is \r\n-        <ulink url=\"http://java.sun.com/j2se/1.5.0/docs/api/java/util/concurrent/ThreadPoolExecutor.AbortPolicy.html\">aborted</ulink>.\r\n-        </para>\r\n-        <para>\r\n-        Both of the pre-defined aliases can be parameterized with a fully-qualified\r\n-        class name that implements \r\n-        <ulink url=\"http://java.sun.com/j2se/1.5.0/docs/api/java/util/concurrent/ThreadFactory.html\">\r\n-        <classname>java.util.concurrent.ThreadFactory</classname>\r\n-        </ulink> interface.\r\n-        </para>\r\n-     </section>\r\n-      \r\n-     <section>\r\n-      <title>openjpa.slice.TransactionPolicy</title>\r\n-      <para>\r\n-      This plug-in property determines the policy for transaction commit \r\n-      across multiple slices. The value of this property is a fully-qualified \r\n-      class name that implements \r\n-      <ulink url=\"http://java.sun.com/j2ee/sdk_1.3/techdocs/api/javax/transaction/TransactionManager.html\">\r\n-      <classname>javax.transaction.TransactionManager</classname> \r\n-      </ulink> interface. \r\n-      </para>\r\n-      <para>\r\n-      Three pre-defined policies can be chosen\r\n-      by their aliases namely <classname>default</classname>,\r\n-      <classname>xa</classname> and <classname>jndi</classname>. \r\n-      </para>\r\n-      <para>\r\n-      The <classname>default</classname> policy employs \r\n-      a Transaction Manager that commits or rolls back transaction on individual\r\n-      slices <emphasis>without</emphasis> a two-phase commit protocol. \r\n-      It does <emphasis>not</emphasis>\r\n-      guarantee atomic nature of transaction across all the slices because if\r\n-      one or more slice fails to commit, there is no way to rollback the transaction\r\n-      on other slices that committed successfully.\r\n-      </para>\r\n-      <para>\r\n-      The <classname>xa</classname> policy employs a Transaction Manager that that commits \r\n-      or rolls back transaction on individual\r\n-      slices using a two-phase commit protocol. The prerequisite to use this scheme\r\n-      is, of course, that all the slices must be configured to use\r\n-      XA-compliant JDBC driver. \r\n-      </para>\r\n-      <para>\r\n-      The <classname>jndi</classname> policy employs a Transaction Manager by looking up the\r\n-      JNDI context. The prerequisite to use this transaction\r\n-      manager is, of course, that all the slices must be configured to use\r\n-      XA-compliant JDBC driver. \r\n-      <warning>This JNDI based policy is not available currently.</warning>\r\n-      </para>\r\n-    </section>\r\n-   </section>\r\n-   \r\n-   <section>\r\n-     <title>Per-Slice Properties</title>\r\n-     <para>\r\n-     Any OpenJPA property can be configured for each individual slice. The property name\r\n-     is of the form <classname>openjpa.slice.[Logical slice name].[OpenJPA Property Name]</classname>.\r\n-     For example, <classname>openjpa.slice.One.ConnectionURL</classname> where <classname>One</classname>\r\n-     is the logical slice name and <classname>ConnectionURL</classname> is an OpenJPA property\r\n-     name. \r\n-     </para>\r\n-     <para>\r\n-     If a property is not configured for a specific slice, then the value for\r\n-     the property equals to the corresponding <classname>openjpa.*</classname> property.\r\n-     </para>\r\n-   </section>\r\n-      \r\n-  </section>\r\n-\r\n-</chapter>\r\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+ \n+ http://www.apache.org/licenses/LICENSE-2.0\n+ \n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.   \n+-->\n+<chapter id=\"ref_guide_slice\">\n+  <title>\n+    Distributed Persistence\n+  </title>\n+  <para>\n+  The standard JPA runtime environment works with a <emphasis>single</emphasis>\n+  database instance. <emphasis>Slice</emphasis> is a plug-in module for OpenJPA  \n+  to work with <emphasis>multiple</emphasis> databases within the same  \n+  transaction. Following sections describe the features and usage of Slice for \n+  distributed database environment.\n+  </para>\n+  \n+  <section id=\"slice_overview\">\n+    <title>Overview</title>\n+    <para>\n+    Enterprise applications are increasingly deployed in distributed database\n+    environment. A distributed, horizontally-partitioned \n+    database environment can be an effective scaling strategy for growing data \n+\tvolume, to support multiple clients on a multi-tenant hosting platform and \n+\tmany other practical scenarios that can benefit from data partitioning.\n+    </para>\n+    \n+    <para>\n+    Any JPA-based user application has to address demanding technical and \n+    conceptual challenges to interact with multiple physical databases\n+    within a single transaction. \n+    OpenJPA Slice encapsulates the complexity of distributed database environment \n+    via the abstraction of <emphasis>virtual</emphasis> database which internally \n+    manages multiple physical database instances referred  \n+    as <emphasis>slice</emphasis>. \n+    <emphasis>Virtualization</emphasis> of distributed databases makes OpenJPA \n+\tobject management kernel and the user application to work in the same way as \n+\tin the case of a single physical database.\n+    </para>\n+  </section>\n+  \n+    <section id=\"features_and_limitations\">\n+       <title>Salient Features</title>\n+         <section><title>Transparency</title>\n+            <para>\n+\t\t\t  The primary design objective for Slice is to make the user \n+\t\t\t  application transparent to the change in storage strategy where \n+\t\t\t  data resides in multiple (possibly heterogeneous) databases instead\n+\t\t\t  of a single database. Slice achieves this transparency by \n+\t\t\t  virtualization of multiple databases as a single database such \n+\t\t\t  that OpenJPA object management kernel continues to interact in\n+\t\t\t  exactly the same manner with storage layer. Similarly, \n+              the existing application or the persistent domain featureSelection requires \n+              <emphasis>no change</emphasis> to upgrade from a single database \n+              to a distributed database environment. \n+            </para>\n+\t\t\t<para>\n+\t\t\t  An existing application developed for a single database can be \n+\t\t\t  adapted to work with multiple databases purely by configuring\n+\t\t\t  a persistence unit via <classname>META-INF/persistence.xml</classname>. \n+\t\t\t</para>\n+         </section>\n+         \n+\t\t<section><title>Scaling</title>\n+\t\t\t<para>\n+\t\t\tThe primary performance characteristics for Slice is to scale against\n+\t\t\tgrowing data volume by <emphasis>horizontal</emphasis> partitioning data \n+\t\t\tacross many databases.  \n+\t\t\t</para>\n+\t\t\t<para>\n+\t\t\tSlice executes the database operations such as query or flush <emphasis>in\n+\t\t\tparallel</emphasis> across each physical database. Hence, scaling characteristics \n+\t\t\tagainst data volume are bound by the size of the maximum data \n+\t\t\tpartition instead of the size of the entire data set. The use cases\n+\t\t\twhere the data is naturally amenable to horizontal partitions, \n+\t\t\tfor example, by temporal interval (e.g. Purchase Orders per month) \n+\t\t\tor by geographical regions (e.g. Customer by Zip Code) can derive\n+\t\t\tsignificant performance benefit and favorable scaling behavior by \n+\t\t\tusing Slice.     \n+\t\t\t</para>\n+\t\t</section>\n+\t\t\n+        <section><title>Distributed Query</title>\n+            <para>\n+            The queries are executed in parallel across one or more slices and the \n+\t\t\tindividual query results are merged into a single list before being\n+\t\t\treturned to the caller application. The <emphasis>merge</emphasis> operation is\n+\t\t\tmore complex for the queries that involve sorting and/or specify a \n+\t\t\trange. Slice supports both sorting and range queries. \n+            </para>\n+\t\t\t<para>\n+            Slice also supports aggregate queries where the aggregate operation \n+\t\t\tis <emphasis>commutative</emphasis> to partitioning such as \n+\t\t\t<classname>COUNT()</classname> or <classname>MAX()</classname> but not <classname>AVG()</classname>. \n+            </para>\n+         \n+            <para>\n+            By default, any query is executed against all available slices. \n+\t\t\tHowever, the application can target the query only to a subset of \n+\t\t\tslices by setting <emphasis>hint</emphasis> on <classname>javax.persistence.Query</classname>. \n+\t\t\tThe hint key is  <classname>openjpa.hint.slice.Target</classname> and \n+            hint value is a comma-separated list of slice identifiers. The following \n+            example shows how to target a query only to a pair of slices \n+\t\t\twith logical identifier <classname>\"One\"</classname> and <classname>\"Two\"</classname>.\n+                          \n+            <programlisting>\n+              <![CDATA[EntityManager em = ...;\n+              em.getTransaction().begin();\n+              String hint = \"openjpa.hint.slice.Target\";\n+              Query query = em.createQuery(\"SELECT p FROM PObject\")\n+\t\t\t\t              .setHint(hint, \"One, Two\");\n+              List result = query.getResultList();\n+              // verify that each instance is originating from the hinted slices\n+              for (Object pc : result) {\n+                 String sliceOrigin = SlicePersistence.getSlice(pc);\n+                 assertTrue (\"One\".equals(sliceOrigin) || \"Two\".equals(sliceOrigin));\n+              }\n+              ]]>\n+            </programlisting> \n+            </para>\n+         </section>\n+\t\t\n+         <section><title>Data Distribution</title>\n+            <para>\n+             The user application decides how the newly persistent instances be \n+             distributed across the slices. The user application specifies the \n+\t\t\t data distribution policy by implementing  \n+             <classname>org.apache.openjpa.slice.DistributionPolicy</classname>.\n+\t\t\t\n+\t\t\t The  <classname>DistributionPolicy</classname> interface\n+\t\t\t is simple with a single method. The complete listing of the\n+\t\t\t documented interface follows:\n+\t\t   <programlisting> \n+\t\t   <![CDATA[ \n+\t\t\tpublic interface DistributionPolicy {\n+\t\t\t/**\n+\t\t\t * Gets the name of the slice where the given newly persistent \n+\t\t\t * instance will be stored.\n+\t\t\t *  \n+\t\t\t * @param pc The newly persistent or to-be-merged object. \n+\t\t\t * @param slices name of the configured slices.\n+\t\t\t * @param context persistence context managing the given instance.\n+\t\t\t * \n+\t\t\t * @return identifier of the slice. This name must match one of the\n+\t\t\t * configured slice names. \n+\t\t\t * @see DistributedConfiguration#getSliceNames()\n+\t\t\t */\n+\t\t\tString distribute(Object pc, List<String> slices, Object context);\n+\t\t\t}\n+\t\t]]>\n+       </programlisting>\n+        </para>\n+\t\t\t \n+\t\t <para>\n+\t\t\t Slice runtime invokes this user-supplied method for the newly\n+\t\t\t persistent instance that is explicit argument of the \n+\t\t\t <classname>javax.persistence.EntityManager.persist(Object pc)</classname>\n+\t\t\t method. The user application must return a valid slice name from\n+\t\t\t this method to designate the target slice for the given instance.\n+\t\t\t The data distribution policy may be based on the attribute \n+\t\t\t of the data itself. For example, all Customer whose first name \n+\t\t\t begins with character 'A' to 'M' will be stored in one slice \n+\t\t\t while names beginning with 'N' to 'Z' will be stored in another \n+\t\t\t slice. The noteworthy aspect of such policy implementation is \n+\t\t\t the attribute values that participate in \n+\t\t\t the distribution policy logic should be set before invoking \n+\t\t\t <classname>EntityManager.persist()</classname> method.\n+\t\t </para>\n+             \n+\t\t<para>\n+\t\t\tThe user application needs to specify the target slice <emphasis>only</emphasis>\n+\t\t\tfor the <emphasis>root</emphasis> instance i.e. the explicit argument for the\n+\t\t\t<classname>EntityManager.persist(Object pc)</classname> method. Slice computes\n+\t\t\tthe transitive closure of the graph i.e. the set of all instances \n+\t\t\tdirectly or indirectly reachable from the root instance and stores\n+\t\t\tthem in the same target slice.  \n+\t\t</para>\n+\t\t\t\n+\t\t <para> \n+\t\t Slice tracks the original database for existing instances. When\n+\t\t an application issues a query, the resultant instances can be loaded \n+\t\t from different slices. As Slice tracks the original slice for each\n+\t\t instance, any subsequent update to an instance is committed to the \n+\t\t appropriate original database slice. \n+\t\t</para>\n+            \n+            <note>\n+            <para>\n+            You can find the original slice of an instance <classname>pc</classname> by \n+            the static utility method  \n+            <methodname>SlicePersistence.getSlice(pc)</methodname>.\n+            This method returns the slice identifier associated with the\n+            given <emphasis>managed</emphasis> instance. If the instance is not\n+            being managed then the method return null because any unmanaged or\n+            detached instance is not associated with any slice. \n+            </para>\n+            </note>\n+         </section>\n+         \n+\t\t<section><title>Data Replication</title>\n+\t\t\t<para>\n+\t\t\tWhile Slice ensures that the transitive closure is stored in the \n+\t\t\tsame slice, there can be data elements that are commonly referred by\n+\t\t\tmany instances such as Country or Currency code. Such quasi-static \n+\t\t\tmaster data can be stored as identical copies in multiple slices. \n+\t\t\tThe user application needs to annotate such entity with\n+\t\t\t<classname>@Replicated</classname> annotation and implement \n+\t\t\ta <classname>org.apache.openjpa.slice.ReplicationPolicy</classname> \n+\t\t\tinterface. The <classname>ReplicationPolicy</classname> interface \n+\t\t\tis quite similar to <classname>DistributionPolicy</classname> \n+\t\t\tinterface except it returns an array of target slice names instead\n+\t\t\tof a single slice. \n+\t\t\t<programlisting> \n+           <![CDATA[  \n+\t\t\t String[] replicate(Object pc, List<String> slices, Object context);\n+        ]]>\n+       </programlisting>\n+\t\t</para>\n+\t\t\t<para>\n+\t\t\t\tThe default implementation assumes that replicated instances are\n+\t\t\t\tstored in all available slices. If any such replicated instance\n+\t\t\t\tis modified then the modification is updated to all target slices\n+\t\t\t\tto maintain the critical assumption that the state of a replicated \n+\t\t\t\tinstance is identical across all its target slices. \n+\t\t\t</para>\n+\t\t</section>\n+\t\t\n+         <section><title>Heterogeneous Database</title>\n+            <para> \n+              Each slice can be configured independently with its own JDBC \n+              driver and other connection parameters. Hence the target database \n+              environment can constitute of heterogeneous databases. \n+            </para>\n+        </section>         \n+         \n+         <section><title>Distributed Transaction</title>\n+            <para> \n+            The database slices participate in a global transaction provided\n+            each slice is configured with a XA-compliant JDBC driver, even\n+            when the persistence unit is configured for <classname>RESOURCE_LOCAL</classname>\n+            transaction.\n+            </para>\n+            <para>\n+            <warning>\n+            If any of the configured slices is not XA-compliant <emphasis>and</emphasis> \n+            the persistence unit is configured for <classname>RESOURCE_LOCAL</classname>\n+            transaction then each slice is committed without any two-phase\n+            commit protocol. If commit on any slice fails, then atomic nature of\n+            the transaction is not ensured.\n+            </warning>\n+            </para>\n+          </section>\n+        \n+         <section id=\"collocation_constraint\"><title>Collocation Constraint</title>\n+            <para> \n+            No relationship can exist across database slices. In O-R mapping parlance,\n+            this condition translates to the limitation that the transitive closure of an object graph must be \n+            <emphasis>collocated</emphasis> in the same database.\n+            For example, consider a domain featureSelection where Person relates to Address.\n+            Person X refers to Address A while Person Y refers to Address B. \n+            Collocation Constraint means that <emphasis>both</emphasis> X and A \n+            must be stored in the same\n+            database slice. Similarly Y and B must be stored in a single slice.\n+            </para>\n+            <para>\n+            Slice, however, helps to maintain collocation constraint automatically.\n+            The instances in the closure set of any newly persistent instance \n+            reachable via cascaded relationship is stored in the same slice.\n+            The user-defined distribution policy requires to supply the slice \n+            for the root instance only.\n+            </para>\n+         </section>\n+    </section>\n+  \n+  <section id=\"slice_configuration\">\n+    <title>Usage</title>\n+    <para>\n+     Slice is activated via the following property settings:\n+    </para>\n+    <section>\n+      <title>How to activate Slice Runtime?</title>\n+      <para>\n+       The basic configuration property is \n+       <programlisting> \n+        <![CDATA[ <property name=\"openjpa.BrokerFactory\" value=\"slice\"/>]]>\n+       </programlisting> \n+       This critical configuration activates a specialized object management \n+\t   kernel that can work against multiple databases.  \n+      </para>\n+    </section> \n+    \n+    <section>\n+      <title>How to configure each database slice?</title>\n+      <para>\n+      Each database slice is identified by a logical name unique within a\n+      persistent unit. The list of the slices is specified by \n+      <classname>openjpa.slice.Names</classname> property.\n+      For example, specify three slices named <classname>\"One\"</classname>, \n+      <classname>\"Two\"</classname> and <classname>\"Three\"</classname> as follows:\n+      <programlisting>\n+      <![CDATA[ <property name=\"openjpa.slice.Names\" value=\"One, Two, Three\"/>]]>\n+      </programlisting>\n+      </para>\n+      <para>\n+      This property is not mandatory. If this property is not specified then\n+      the configuration is scanned for logical slice names. Any property\n+      <classname>\"abc\"</classname> of the form <classname>openjpa.slice.XYZ.abc</classname> will \n+      register a slice with logical\n+      name <classname>\"XYZ\"</classname>.\n+      </para>\n+      <para>\n+      The order of the names is significant when no <classname>openjpa.slice.Master</classname> \n+      property is not specified. Then the persistence unit is scanned to find\n+      all configured slice names and they are ordered alphabetically.  \n+      </para>\n+      \n+      <para>\n+       Each database slice properties can be configured independently. \n+       For example, the\n+       following configuration will register two slices with logical name \n+       <classname>One</classname> and <classname>Two</classname>.\n+       <programlisting> \n+        <![CDATA[<property name=\"openjpa.slice.One.ConnectionURL\" value=\"jdbc:mysql:localhost//slice1\"/>\n+        <property name=\"openjpa.slice.Two.ConnectionURL\" value=\"jdbc:mysql:localhost//slice2\"/>]]>\n+       </programlisting> \n+      </para>\n+      \n+      <para>\n+       Any OpenJPA specific property can be configured per slice basis. \n+       For example, the following configuration will use two different JDBC \n+       drivers for slice <classname>One</classname> and <classname>Two</classname>.\n+       <programlisting> \n+        <![CDATA[<property name=\"openjpa.slice.One.ConnectionDriverName\" value=\"com.mysql.jdbc.Driver\"/>\n+        <property name=\"openjpa.slice.Two.ConnectionDriverName\" value=\"com.mysql.jdbc.jdbc2.optional.MysqlXADataSource\"/>]]>\n+       </programlisting> \n+      </para>\n+      \n+      <para>\n+        Any property if unspecified for a particular slice will be defaulted by\n+        corresponding OpenJPA property. For example, consider following three slices\n+        <programlisting> \n+         <![CDATA[<property name=\"openjpa.slice.One.ConnectionURL\"          value=\"jdbc:mysql:localhost//slice1\"/>\n+         <property name=\"openjpa.slice.Two.ConnectionURL\"          value=\"jdbc:mysql:localhost//slice2\"/>\n+         <property name=\"openjpa.slice.Three.ConnectionURL\"        value=\"jdbc:oracle:localhost//slice3\"/>\n+\n+         <property name=\"openjpa.ConnectionDriverName\"     value=\"com.mysql.jdbc.Driver\"/>\n+         <property name=\"openjpa.slice.Three.ConnectionDriverName\" value=\"oracle.jdbc.Driver\"/>]]>\n+        </programlisting> \n+        In this example, <classname>Three</classname> will use slice-specific\n+        <classname>oracle.jdbc.Driver</classname> driver while slice\n+        <classname>One</classname> and <classname>Two</classname> will use\n+        the driver <classname>com.mysql.jdbc.Driver</classname> as \n+        specified by <classname>openjpa.ConnectionDriverName</classname> \n+        property value.\n+      </para>\n+    </section>\n+     \n+    <section id=\"distribution_policy\">\n+       <title>Implement DistributionPolicy interface</title>\n+       <para>\n+        Slice needs to determine which slice will persist a new instance. \n+        The application can only decide this policy (for example, \n+        all PurchaseOrders before April 30 goes to slice <classname>One</classname>,\n+        all the rest goes to slice <classname>Two</classname>). This is why\n+        the application has to implement \n+        <classname>org.apache.openjpa.slice.DistributionPolicy</classname> and\n+        specify the implementation class in configuration\n+        <programlisting> \n+         <![CDATA[ <property name=\"openjpa.slice.DistributionPolicy\" value=\"com.acme.foo.MyOptimialDistributionPolicy\"/>]]>\n+        </programlisting>\n+       </para>\n+       \n+       <para>\n+        The interface <classname>org.apache.openjpa.slice.DistributionPolicy</classname>\n+        is simple with a single method. The complete listing of the\n+        documented interface follows:\n+       <programlisting> \n+       <![CDATA[ \n+public interface DistributionPolicy {\n+    /**\n+     * Gets the name of the slice where a given instance will be stored.\n+     *  \n+     * @param pc The newly persistent or to-be-merged object. \n+     * @param slices name of the configured slices.\n+     * @param context persistence context managing the given instance.\n+     * \n+     * @return identifier of the slice. This name must match one of the\n+     * configured slice names. \n+     * @see DistributedConfiguration#getSliceNames()\n+     */\n+    String distribute(Object pc, List<String> slices, Object context);\n+}\n+]]>\n+       </programlisting>\n+        </para>\n+        \n+        <para>\n+        While implementing a distribution policy the most important thing to\n+        remember is <link linkend=\"collocation_constraint\">collocation constraint</link>.\n+        Because Slice can not establish or query any cross-database relationship, all the\n+        related instances must be stored in the same database slice. \n+ \n+        Slice can determine the closure of a root object by traversal of \n+        cascaded relationships. Hence user-defined policy has to only decide the\n+        database for the root instance that is the explicit argument to \n+        <methodname>EntityManager.persist()</methodname> call.\n+        Slice will ensure that all other related instances that gets persisted by cascade\n+        is assigned to the same database slice as that of the root instance.\n+        However, the user-defined distribution policy must return the\n+        same slice identifier for the instances that are logically related but\n+        not cascaded for persist. \n+        </para>\n+    </section>\n+    \n+    <section id=\"replication_policy\">\n+       <title>Implement ReplicationPolicy interface</title>\n+\t\t<para>\n+\t\t\tThe entities that are annotated with <classname>@Replicated</classname> \n+\t\t\tannotation can be stored in multiple slices as identical copies.\n+        Specify the implementation class of <classname>ReplicationPolicy</classname> in configuration as\n+        <programlisting> \n+         <![CDATA[ <property name=\"openjpa.slice.ReplicationPolicy\" value=\"com.acme.foo.MyReplicationPolicy\"/>]]>\n+        </programlisting>\n+\t\t</para>\n+    </section>\n+  </section>\n+\t\n+\t\n+  <section>\n+  <title>Configuration Properties</title>\n+    <para>\n+    The properties to configure Slice can be classified in two broad groups.\n+The <emphasis>global</emphasis> properties apply to all the slices, for example,\n+the thread pool used to execute the queries in parallel or the transaction \n+manager used to coordinate transaction across multiple slices. \n+The <emphasis>per-slice</emphasis> properties apply to individual slice, for example,\n+the JDBC connection URL of a slice.\n+   </para>\n+   \n+   <section>\n+     <title>Global Properties</title>\n+     \n+     <section>\n+        <title>openjpa.slice.DistributionPolicy</title>\n+        <para>\n+         This <emphasis>mandatory</emphasis> plug-in property determines how newly\n+         persistent instances are distributed across individual slices. \n+         The value of this property is a fully-qualified class name that implements\n+         <ulink url=\"../javadoc/org/apache/openjpa/slice/DistributionPolicy.html\">\n+         <classname>org.apache.openjpa.slice.DistributionPolicy</classname>\n+         </ulink> interface.\n+        </para>\n+     </section>\n+     \n+     <section><title>openjpa.slice.Lenient</title>\n+      <para>\n+        This boolean plug-in property controls the behavior when one or more slice \n+        can not be connected or unavailable for some other reasons.\n+        If <classname>true</classname>, the unreachable slices are ignored. If \n+        <classname>false</classname> then any unreachable slice will raise an exception\n+        during startup.\n+        </para>\n+        <para>\n+        By default this value is set to <classname>false</classname> i.e. all configured\n+        slices must be available.\n+        </para> \n+     </section>\n+\n+     <section>\n+      <title>openjpa.slice.Master</title>\n+\t\t <para>\n+\t\t\t The user application often directs OpenJPA to generate primary keys \n+\t\t\t for persistence instances automatically or from a specific database \n+\t\t\t sequence. For such primary key value generation strategy where \n+\t\t\t a database instance is required, Slice uses a designated slice \n+\t\t\t referred as <emphasis>master</emphasis> slice. \n+\t\t </para>\n+         <para>\n+\t\t\t The master slice can be specified explicitly via \n+\t\t\t <classname>openjpa.slice.Master</classname> property and whose value is one\n+\t\t\t of the configured slice names. If this property is not explicitly\n+\t\t\t specified then, by default, the master slice is the first slice \n+\t\t\t in the list of configured slice names. \n+       </para>\n+       <para>\n+              <warning>\n+              Currently, there is no provision to use sequence from \n+              multiple slices.\n+              </warning>\n+       </para>\n+     </section>\n+    \n+     <section>\n+        <title>openjpa.slice.Names</title>\n+        <para>\n+         This plug-in property can be used to register the logical slice names.\n+         The value of this property is comma-separated list of slice names. \n+         The ordering of the names in this list is \n+         <emphasis>significant</emphasis> because \n+         <link linkend=\"distribution_policy\">DistributionPolicy</link> and\n+\t\t<link linkend=\"replication_policy\">ReplicationPolicy</link> receive\n+         the input argument of the slice names in the same order.\n+        </para>\n+        <para>\n+        If logical slice names are not registered explicitly via this property,\n+        then all logical slice names available in the persistence unit are \n+        registered. The ordering of the slice names in this case is alphabetical.  \n+        </para>\n+        <para>\n+        If logical slice names are registered explicitly via this property, then\n+        any logical slice that is available in the persistence unit but excluded\n+        from this list is ignored. \n+        </para>\n+     </section>\n+    \n+     <section>\n+        <title>openjpa.slice.ThreadingPolicy</title>\n+        <para>\n+        This plug-in property determines the nature of thread pool being used \n+        for database operations such as query or flush on individual slices. \n+        The value of the property is a \n+        fully-qualified class name that implements \n+        <ulink url=\"http://java.sun.com/j2se/1.5.0/docs/api/java/util/concurrent/ExecutorService.html\">\n+        <classname>java.util.concurrent.ExecutorService</classname>\n+        </ulink> interface.  \n+        Two pre-defined pools can be chosen via their aliases namely \n+        <classname>fixed</classname> or <classname>cached</classname>.\n+        </para>\n+        <para>\n+        The pre-defined alias <classname>cached</classname> activates a \n+        <ulink url=\"http://java.sun.com/j2se/1.5.0/docs/api/java/util/concurrent/Executors.html#newCachedThreadPool()\">cached thread pool</ulink>. \n+        A cached thread pool creates new threads as needed, but will reuse \n+        previously constructed threads when they are available. This pool \n+        is suitable in scenarios that execute many short-lived asynchronous tasks.\n+        The way Slice uses the thread pool to execute database operations is \n+        akin to such scenario and hence <classname>cached</classname> is the default \n+        value for this plug-in property.  \n+        </para>\n+        <para>\n+        The <classname>fixed</classname> alias activates a \n+        <ulink url=\"http://java.sun.com/j2se/1.5.0/docs/api/java/util/concurrent/Executors.html#newFixedThreadPool(int)\">fixed thread pool</ulink>.\n+        The fixed thread pool can be further parameterized with \n+        <classname>CorePoolSize</classname>, <classname>MaximumPoolSize</classname>, \n+        <classname>KeepAliveTime</classname> and <classname>RejectedExecutionHandler</classname>. \n+        The meaning of these parameters are described in \n+        <ulink url=\"http://java.sun.com/j2se/1.5.0/docs/api/java/util/concurrent/ThreadPoolExecutor.html\">JavaDoc</ulink>.\n+        The users can exercise finer control on thread pool behavior via these\n+        parameters.\n+        By default, the core pool size is <classname>10</classname>, maximum pool size is\n+        also <classname>10</classname>, keep alive time is <classname>60</classname> seconds and \n+        rejected execution is \n+        <ulink url=\"http://java.sun.com/j2se/1.5.0/docs/api/java/util/concurrent/ThreadPoolExecutor.AbortPolicy.html\">aborted</ulink>.\n+        </para>\n+        <para>\n+        Both of the pre-defined aliases can be parameterized with a fully-qualified\n+        class name that implements \n+        <ulink url=\"http://java.sun.com/j2se/1.5.0/docs/api/java/util/concurrent/ThreadFactory.html\">\n+        <classname>java.util.concurrent.ThreadFactory</classname>\n+        </ulink> interface.\n+        </para>\n+     </section>\n+      \n+     <section>\n+      <title>openjpa.slice.TransactionPolicy</title>\n+      <para>\n+      This plug-in property determines the policy for transaction commit \n+      across multiple slices. The value of this property is a fully-qualified \n+      class name that implements \n+      <ulink url=\"http://java.sun.com/j2ee/sdk_1.3/techdocs/api/javax/transaction/TransactionManager.html\">\n+      <classname>javax.transaction.TransactionManager</classname> \n+      </ulink> interface. \n+      </para>\n+      <para>\n+      Three pre-defined policies can be chosen\n+      by their aliases namely <classname>default</classname>,\n+      <classname>xa</classname> and <classname>jndi</classname>. \n+      </para>\n+      <para>\n+      The <classname>default</classname> policy employs \n+      a Transaction Manager that commits or rolls back transaction on individual\n+      slices <emphasis>without</emphasis> a two-phase commit protocol. \n+      It does <emphasis>not</emphasis>\n+      guarantee atomic nature of transaction across all the slices because if\n+      one or more slice fails to commit, there is no way to rollback the transaction\n+      on other slices that committed successfully.\n+      </para>\n+      <para>\n+      The <classname>xa</classname> policy employs a Transaction Manager that that commits \n+      or rolls back transaction on individual\n+      slices using a two-phase commit protocol. The prerequisite to use this scheme\n+      is, of course, that all the slices must be configured to use\n+      XA-compliant JDBC driver. \n+      </para>\n+      <para>\n+      The <classname>jndi</classname> policy employs a Transaction Manager by looking up the\n+      JNDI context. The prerequisite to use this transaction\n+      manager is, of course, that all the slices must be configured to use\n+      XA-compliant JDBC driver. \n+      <warning>This JNDI based policy is not available currently.</warning>\n+      </para>\n+    </section>\n+   </section>\n+   \n+   <section>\n+     <title>Per-Slice Properties</title>\n+     <para>\n+     Any OpenJPA property can be configured for each individual slice. The property name\n+     is of the form <classname>openjpa.slice.[Logical slice name].[OpenJPA Property Name]</classname>.\n+     For example, <classname>openjpa.slice.One.ConnectionURL</classname> where <classname>One</classname>\n+     is the logical slice name and <classname>ConnectionURL</classname> is an OpenJPA property\n+     name. \n+     </para>\n+     <para>\n+     If a property is not configured for a specific slice, then the value for\n+     the property equals to the corresponding <classname>openjpa.*</classname> property.\n+     </para>\n+   </section>\n+      \n+  </section>\n+\n+</chapter>\n   \n\\ No newline at end of file"},{"sha":"a493c3e50489ca94fd29da3032e4ffbc66a760b0","filename":"openjpa-slice/src/main/ant/enhancer.xml","status":"modified","additions":81,"deletions":81,"changes":162,"blob_url":"https://github.com/apache/openjpa/blob/b546423063fe7c1889f7764393102f423a699483/openjpa-slice/src/main/ant/enhancer.xml","raw_url":"https://github.com/apache/openjpa/raw/b546423063fe7c1889f7764393102f423a699483/openjpa-slice/src/main/ant/enhancer.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/main/ant/enhancer.xml?ref=b546423063fe7c1889f7764393102f423a699483","patch":"@@ -1,82 +1,82 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n-<!--\r\n-    Licensed to the Apache Software Foundation (ASF) under one\r\n-    or more contributor license agreements.  See the NOTICE file\r\n-    distributed with this work for additional information\r\n-    regarding copyright ownership.  The ASF licenses this file\r\n-    to you under the Apache License, Version 2.0 (the\r\n-    \"License\"); you may not use this file except in compliance\r\n-    with the License.  You may obtain a copy of the License at\r\n-    \r\n-    http://www.apache.org/licenses/LICENSE-2.0\r\n-    \r\n-    Unless required by applicable law or agreed to in writing,\r\n-    software distributed under the License is distributed on an\r\n-    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n-    KIND, either express or implied.  See the License for the\r\n-    specific language governing permissions and limitations\r\n-    under the License.   \r\n--->\r\n-<project name=\"enhance\" basedir=\".\">\r\n-    <!--\r\n-        This build file executes the PCEnhancer on the test entities. It's in a\r\n-        separate file instead of nested in pom.xml to make some conditional \r\n-        processing easier.\r\n-        \r\n-        Test classes will not be compiled if maven is invoked with \r\n-        -Dmaven.tests.skip=true. \r\n-    -->\r\n-\r\n-    <condition property=\"maven.test.skip.istrue\">\r\n-        <istrue value=\"${maven.test.skip}\" />\r\n-    </condition>\r\n-\r\n-    <condition property=\"test.isfalse\">\r\n-        <equals arg1=\"${test}\" arg2=\"false\" />\r\n-    </condition>\r\n-\r\n-    <!-- ================================= \r\n-          target: enhance              \r\n-         ================================= -->\r\n-    <target name=\"enhance\"\r\n-            description=\"--> run the enhancer unless test=false\"\r\n-            unless=\"test.isfalse\">\r\n-        <antcall target=\"enhance.all.entities\"\r\n-                 inheritall=\"true\"\r\n-                 inheritrefs=\"true\" />\r\n-    </target>\r\n-\r\n-    <!-- ================================= \r\n-          target: enhance.all.entities              \r\n-         ================================= -->\r\n-    <target name=\"enhance.all.entities\"\r\n-            description=\"--> enhance the test entities\"\r\n-            unless=\"maven.test.skip.istrue\">\r\n-        <echo> running enhancer</echo>\r\n-        <!-- \r\n-            Inherited references won't be present until the task is called. \r\n-            Therefore the path definition needs to stay inside the task.\r\n-          -->\r\n-        <path id=\"cp\">\r\n-            <path refid=\"maven.test.classpath\" />\r\n-        </path>\r\n-\r\n-        <taskdef name=\"openjpac\"\r\n-                 classname=\"org.apache.openjpa.ant.PCEnhancerTask\">\r\n-            <classpath refid=\"cp\" />\r\n-        </taskdef>\r\n-\r\n-        <fileset id=\"enhance.path.ref\"\r\n-                 dir=\"${project.build.testOutputDirectory}\">\r\n-            <include name=\"**/Address.class\" />\r\n-            <include name=\"**/Person.class\" />\r\n-            <include name=\"**/PObject.class\" />\r\n-            <exclude name=\"**/Test*.class\" />\r\n-        </fileset>\r\n-        <openjpac>\r\n-            <classpath refid=\"cp\" />\r\n-            <fileset refid=\"enhance.path.ref\" />\r\n-            <config log=\"DefaultLevel=${openjpa.loglevel}\" />\r\n-        </openjpac>\r\n-    </target>\r\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+    Licensed to the Apache Software Foundation (ASF) under one\n+    or more contributor license agreements.  See the NOTICE file\n+    distributed with this work for additional information\n+    regarding copyright ownership.  The ASF licenses this file\n+    to you under the Apache License, Version 2.0 (the\n+    \"License\"); you may not use this file except in compliance\n+    with the License.  You may obtain a copy of the License at\n+    \n+    http://www.apache.org/licenses/LICENSE-2.0\n+    \n+    Unless required by applicable law or agreed to in writing,\n+    software distributed under the License is distributed on an\n+    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+    KIND, either express or implied.  See the License for the\n+    specific language governing permissions and limitations\n+    under the License.   \n+-->\n+<project name=\"enhance\" basedir=\".\">\n+    <!--\n+        This build file executes the PCEnhancer on the test entities. It's in a\n+        separate file instead of nested in pom.xml to make some conditional \n+        processing easier.\n+        \n+        Test classes will not be compiled if maven is invoked with \n+        -Dmaven.tests.skip=true. \n+    -->\n+\n+    <condition property=\"maven.test.skip.istrue\">\n+        <istrue value=\"${maven.test.skip}\" />\n+    </condition>\n+\n+    <condition property=\"test.isfalse\">\n+        <equals arg1=\"${test}\" arg2=\"false\" />\n+    </condition>\n+\n+    <!-- ================================= \n+          target: enhance              \n+         ================================= -->\n+    <target name=\"enhance\"\n+            description=\"--> run the enhancer unless test=false\"\n+            unless=\"test.isfalse\">\n+        <antcall target=\"enhance.all.entities\"\n+                 inheritall=\"true\"\n+                 inheritrefs=\"true\" />\n+    </target>\n+\n+    <!-- ================================= \n+          target: enhance.all.entities              \n+         ================================= -->\n+    <target name=\"enhance.all.entities\"\n+            description=\"--> enhance the test entities\"\n+            unless=\"maven.test.skip.istrue\">\n+        <echo> running enhancer</echo>\n+        <!-- \n+            Inherited references won't be present until the task is called. \n+            Therefore the path definition needs to stay inside the task.\n+          -->\n+        <path id=\"cp\">\n+            <path refid=\"maven.test.classpath\" />\n+        </path>\n+\n+        <taskdef name=\"openjpac\"\n+                 classname=\"org.apache.openjpa.ant.PCEnhancerTask\">\n+            <classpath refid=\"cp\" />\n+        </taskdef>\n+\n+        <fileset id=\"enhance.path.ref\"\n+                 dir=\"${project.build.testOutputDirectory}\">\n+            <include name=\"**/Address.class\" />\n+            <include name=\"**/Person.class\" />\n+            <include name=\"**/PObject.class\" />\n+            <exclude name=\"**/Test*.class\" />\n+        </fileset>\n+        <openjpac>\n+            <classpath refid=\"cp\" />\n+            <fileset refid=\"enhance.path.ref\" />\n+            <config log=\"DefaultLevel=${openjpa.loglevel}\" />\n+        </openjpac>\n+    </target>\n </project>\n\\ No newline at end of file"},{"sha":"0b2df0c2dd070fd5f20e95d640b1d49cea1f4058","filename":"openjpa-slice/src/test/resources/META-INF/persistence.xml","status":"modified","additions":171,"deletions":171,"changes":342,"blob_url":"https://github.com/apache/openjpa/blob/b546423063fe7c1889f7764393102f423a699483/openjpa-slice/src/test/resources/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/b546423063fe7c1889f7764393102f423a699483/openjpa-slice/src/test/resources/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/test/resources/META-INF/persistence.xml?ref=b546423063fe7c1889f7764393102f423a699483","patch":"@@ -1,171 +1,171 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n-<!--\r\n- Licensed to the Apache Software Foundation (ASF) under one\r\n- or more contributor license agreements.  See the NOTICE file\r\n- distributed with this work for additional information\r\n- regarding copyright ownership.  The ASF licenses this file\r\n- to you under the Apache License, Version 2.0 (the\r\n- \"License\"); you may not use this file except in compliance\r\n- with the License.  You may obtain a copy of the License at\r\n-\r\n- http://www.apache.org/licenses/LICENSE-2.0\r\n-\r\n- Unless required by applicable law or agreed to in writing,\r\n- software distributed under the License is distributed on an\r\n- \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- KIND, either express or implied.  See the License for the\r\n- specific language governing permissions and limitations\r\n- under the License.\r\n--->\r\n-<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" version=\"1.0\" xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd\">\r\n-    <persistence-unit name=\"enhance\">\r\n-        <class>org.apache.openjpa.slice.PObject</class>\r\n-        <class>org.apache.openjpa.slice.Person</class>\r\n-        <class>org.apache.openjpa.slice.Address</class>\r\n-        <class>org.apache.openjpa.slice.Country</class>\r\n-    </persistence-unit>\r\n-    \r\n-    \r\n-   <!-- ==================================================================== -->\r\n-   <!-- Configuration for testing basic per-slice configuration              -->\r\n-   <!-- ==================================================================== -->\r\n-   <persistence-unit name=\"per-slice\">\r\n-      <properties>\r\n-         <property name=\"openjpa.BrokerFactory\"        value=\"slice\"/>\r\n-         <property name=\"openjpa.slice.Names\"          value=\"One,Two, Three\"/>\r\n-         <property name=\"openjpa.slice.Master\"         value=\"One\"/>\r\n-         <property name=\"openjpa.slice.Lenient\"        value=\"true\"/>\r\n-         \r\n-         <property name=\"openjpa.slice.DistributionPolicy\"  value=\"org.apache.openjpa.slice.policy.UserDistributionPolicy\"/>\r\n-         <property name=\"openjpa.slice.ThreadingPolicy\"     value=\"fixed\"/>\r\n-\r\n-         <property name=\"openjpa.ConnectionDriverName\"      value=\"org.apache.derby.jdbc.EmbeddedDriver\"/>\r\n-         <property name=\"openjpa.ConnectionUserName\"        value=\"\"/>\r\n-         <property name=\"openjpa.ConnectionPassword\"        value=\"\"/>\r\n-         <property name=\"openjpa.slice.One.ConnectionURL\"   value=\"jdbc:derby:target/database/openjpa-slice1;create=true\"/>\r\n-         <property name=\"openjpa.slice.Two.ConnectionURL\"   value=\"jdbc:derby:target/database/openjpa-slice2;create=true\"/>\r\n-         <property name=\"openjpa.slice.Three.ConnectionURL\" value=\"jdbc:some-bad-url\"/>\r\n-         \r\n-      </properties>\r\n-   </persistence-unit>\r\n-\r\n-   <persistence-unit name=\"XA\">\r\n-      <class>org.apache.openjpa.slice.PObject</class>\r\n-      <properties>\r\n-         <property name=\"openjpa.BrokerFactory\" value=\"slice\"/>\r\n-         <property name=\"openjpa.ConnectionDriverName\" value=\"org.apache.derby.jdbc.EmbeddedDriver\"/>\r\n-\r\n-         <property name=\"openjpa.slice.Names\" value=\"One,Two\"/>\r\n-         <property name=\"openjpa.slice.DistributionPolicy\" value=\"org.apache.openjpa.slice.policy.UserDistributionPolicy\"/>\r\n-         \r\n-         <property name=\"openjpa.ConnectionUserName\"        value=\"\"/>\r\n-         <property name=\"openjpa.ConnectionPassword\"        value=\"\"/>\r\n-         <property name=\"openjpa.slice.One.ConnectionDriverName\" value=\"org.apache.derby.jdbc.EmbeddedDriver\"/>\r\n-         <property name=\"openjpa.slice.One.ConnectionURL\" value=\"jdbc:derby:target/database/openjpa-slice1;create=true\"/>\r\n-         <property name=\"openjpa.slice.Two.ConnectionDriverName\" value=\"org.apache.derby.jdbc.EmbeddedDriver\"/>\r\n-         <property name=\"openjpa.slice.Two.ConnectionURL\" value=\"jdbc:derby:target/database/openjpa-slice2;create=true\"/>\r\n-         \r\n-         <property name=\"openjpa.Multithreaded\" value=\"false\"/>\r\n-         <property name=\"openjpa.jdbc.SynchronizeMappings\" value=\"refresh\"/>\r\n-         <property name=\"openjpa.jdbc.MappingDefaults\" value=\"DefaultMissingInfo=true\"/>\r\n-         <property name=\"openjpa.RuntimeUnenhancedClasses\" value=\"supported\"/>\r\n-      </properties>\r\n-   </persistence-unit>\r\n-   \r\n-   <!-- ==================================================================== -->\r\n-   <!-- Configuration for testing basic CRUD operations                      -->\r\n-   <!-- ==================================================================== -->\r\n-   <persistence-unit name=\"slice\">\r\n-        <class>org.apache.openjpa.slice.PObject</class>\r\n-        <class>org.apache.openjpa.slice.Person</class>\r\n-        <class>org.apache.openjpa.slice.Address</class>\r\n-        <class>org.apache.openjpa.slice.Country</class>\r\n-\t\t<properties>\r\n-            <property name=\"openjpa.BrokerFactory\" value=\"slice\"/>\r\n-            <property name=\"openjpa.ConnectionDriverName\" value=\"org.apache.derby.jdbc.EmbeddedDriver\"/>\r\n-            <property name=\"openjpa.slice.Names\" value=\"One,Two\"/>\r\n-            <property name=\"openjpa.slice.Master\" value=\"Two\"/>\r\n-            <property name=\"openjpa.slice.One.ConnectionURL\" value=\"jdbc:derby:target/database/openjpa-slice1;create=true\"/>\r\n-            <property name=\"openjpa.slice.Two.ConnectionURL\" value=\"jdbc:derby:target/database/openjpa-slice2;create=true\"/>\r\n-            <property name=\"openjpa.ConnectionUserName\" value=\"\"/>\r\n-            <property name=\"openjpa.ConnectionPassword\" value=\"\"/>\r\n-            <property name=\"openjpa.slice.DistributionPolicy\" value=\"org.apache.openjpa.slice.policy.UserDistributionPolicy\"/>\r\n-            <property name=\"openjpa.slice.Lenient\" value=\"false\"/>\r\n-            \r\n-            <property name=\"openjpa.Connection2URL\" value=\"jdbc:derby:target/database/openjpa-slice1;create=true\"/>\r\n-\t        <property name=\"openjpa.jdbc.SynchronizeMappings\" value=\"buildSchema\"/>\r\n-            <property name=\"openjpa.QueryCompilationCache\" value=\"false\"/>\r\n-            <property name=\"openjpa.jdbc.MappingDefaults\" value=\"DefaultMissingInfo=true\"/>\r\n-            <property name=\"openjpa.RuntimeUnenhancedClasses\" value=\"supported\"/>\r\n-      \t</properties>\r\n-   </persistence-unit>\r\n-   \r\n-      <persistence-unit name=\"ordering\">\r\n-        <class>org.apache.openjpa.slice.PObject</class>\r\n-        <class>org.apache.openjpa.slice.Person</class>\r\n-        <class>org.apache.openjpa.slice.Address</class>\r\n-        <class>org.apache.openjpa.slice.Country</class>\r\n-        <properties>\r\n-            <property name=\"openjpa.BrokerFactory\" value=\"slice\"/>\r\n-            <property name=\"openjpa.ConnectionDriverName\" value=\"org.apache.derby.jdbc.EmbeddedDriver\"/>\r\n-            <property name=\"openjpa.slice.Even.ConnectionURL\" value=\"jdbc:derby:target/database/openjpa-slice1;create=true\"/>\r\n-            <property name=\"openjpa.slice.Odd.ConnectionURL\" value=\"jdbc:derby:target/database/openjpa-slice2;create=true\"/>\r\n-            <property name=\"openjpa.ConnectionUserName\" value=\"\"/>\r\n-            <property name=\"openjpa.ConnectionPassword\" value=\"\"/>\r\n-            <property name=\"openjpa.slice.DistributionPolicy\" value=\"org.apache.openjpa.slice.policy.EvenOddDistributionPolicy\"/>\r\n-            <property name=\"openjpa.slice.Lenient\" value=\"false\"/>\r\n-            \r\n-            <property name=\"openjpa.Connection2URL\" value=\"jdbc:derby:target/database/openjpa-slice1;create=true\"/>\r\n-            <property name=\"openjpa.jdbc.SynchronizeMappings\" value=\"buildSchema\"/>\r\n-            <property name=\"openjpa.jdbc.MappingDefaults\" value=\"DefaultMissingInfo=true\"/>\r\n-        </properties>\r\n-   </persistence-unit>\r\n-   \r\n-   <persistence-unit name=\"mysql\">\r\n-      <properties>\r\n-         <property name=\"openjpa.BrokerFactory\" value=\"slice\"/>\r\n-         <property name=\"openjpa.ConnectionDriverName\" value=\"com.mysql.jdbc.Driver\"/>\r\n-\r\n-         <property name=\"openjpa.slice.Names\" value=\"One,Two\"/>\r\n-         <property name=\"openjpa.slice.DistributionPolicy\" value=\"org.apache.openjpa.slice.policy.UserDistributionPolicy\"/>\r\n-         \r\n-         <property name=\"openjpa.ConnectionUserName\"        value=\"root\"/>\r\n-         <property name=\"openjpa.ConnectionPassword\"        value=\"\"/>\r\n-         <property name=\"openjpa.slice.One.ConnectionDriverName\" value=\"com.mysql.jdbc.Driver\"/>\r\n-         <property name=\"openjpa.slice.One.ConnectionURL\" value=\"jdbc:mysql://localhost/slice1\"/>\r\n-         <property name=\"openjpa.slice.Two.ConnectionDriverName\" value=\"com.mysql.jdbc.Driver\"/>\r\n-         <property name=\"openjpa.slice.Two.ConnectionURL\" value=\"jdbc:mysql://localhost/slice2\"/>\r\n-         \r\n-         <property name=\"openjpa.Multithreaded\" value=\"false\"/>\r\n-         <property name=\"openjpa.jdbc.SynchronizeMappings\" value=\"refresh\"/>\r\n-         <property name=\"openjpa.jdbc.MappingDefaults\" value=\"DefaultMissingInfo=true\"/>\r\n-         <property name=\"openjpa.RuntimeUnenhancedClasses\" value=\"supported\"/>\r\n-      </properties>\r\n-   </persistence-unit>\r\n-   \r\n-   <persistence-unit name=\"replication\">\r\n-   \t  <class>org.apache.openjpa.slice.ReplicatedParent</class>\r\n-   \t  <class>org.apache.openjpa.slice.ReplicatedChild</class>\r\n-   \t  \r\n-      <properties>\r\n-         <property name=\"openjpa.BrokerFactory\" value=\"slice\"/>\r\n-         <property name=\"openjpa.ConnectionDriverName\" value=\"org.apache.derby.jdbc.EmbeddedDriver\"/>\r\n-\r\n-         <property name=\"openjpa.slice.Names\" value=\"One,Two\"/>\r\n-         <property name=\"openjpa.slice.DistributionPolicy\" value=\"org.apache.openjpa.slice.policy.UserDistributionPolicy\"/>\r\n-         \r\n-         <property name=\"openjpa.ConnectionUserName\" value=\"\"/>\r\n-         <property name=\"openjpa.ConnectionPassword\" value=\"\"/>\r\n-         \r\n-         <property name=\"openjpa.slice.One.ConnectionURL\" value=\"jdbc:derby:target/database/openjpa-slice1;create=true\"/>\r\n-         <property name=\"openjpa.slice.Two.ConnectionURL\" value=\"jdbc:derby:target/database/openjpa-slice2;create=true\"/>\r\n-         \r\n-         <property name=\"openjpa.Multithreaded\" value=\"false\"/>\r\n-         <property name=\"openjpa.Log\" value=\"DefaultLevel=INFO, Enhance=TRACE, SQL=TRACE\"/>\r\n-         <property name=\"openjpa.jdbc.SynchronizeMappings\" value=\"refresh\"/>\r\n-         <property name=\"openjpa.jdbc.MappingDefaults\" value=\"DefaultMissingInfo=true\"/>\r\n-         <property name=\"openjpa.RuntimeUnenhancedClasses\" value=\"supported\"/>\r\n-      </properties>\r\n-   </persistence-unit>\r\n-   \r\n-</persistence>\r\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+\n+ http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.\n+-->\n+<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" version=\"1.0\" xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd\">\n+    <persistence-unit name=\"enhance\">\n+        <class>org.apache.openjpa.slice.PObject</class>\n+        <class>org.apache.openjpa.slice.Person</class>\n+        <class>org.apache.openjpa.slice.Address</class>\n+        <class>org.apache.openjpa.slice.Country</class>\n+    </persistence-unit>\n+    \n+    \n+   <!-- ==================================================================== -->\n+   <!-- Configuration for testing basic per-slice configuration              -->\n+   <!-- ==================================================================== -->\n+   <persistence-unit name=\"per-slice\">\n+      <properties>\n+         <property name=\"openjpa.BrokerFactory\"        value=\"slice\"/>\n+         <property name=\"openjpa.slice.Names\"          value=\"One,Two, Three\"/>\n+         <property name=\"openjpa.slice.Master\"         value=\"One\"/>\n+         <property name=\"openjpa.slice.Lenient\"        value=\"true\"/>\n+         \n+         <property name=\"openjpa.slice.DistributionPolicy\"  value=\"org.apache.openjpa.slice.policy.UserDistributionPolicy\"/>\n+         <property name=\"openjpa.slice.ThreadingPolicy\"     value=\"fixed\"/>\n+\n+         <property name=\"openjpa.ConnectionDriverName\"      value=\"org.apache.derby.jdbc.EmbeddedDriver\"/>\n+         <property name=\"openjpa.ConnectionUserName\"        value=\"\"/>\n+         <property name=\"openjpa.ConnectionPassword\"        value=\"\"/>\n+         <property name=\"openjpa.slice.One.ConnectionURL\"   value=\"jdbc:derby:target/database/openjpa-slice1;create=true\"/>\n+         <property name=\"openjpa.slice.Two.ConnectionURL\"   value=\"jdbc:derby:target/database/openjpa-slice2;create=true\"/>\n+         <property name=\"openjpa.slice.Three.ConnectionURL\" value=\"jdbc:some-bad-url\"/>\n+         \n+      </properties>\n+   </persistence-unit>\n+\n+   <persistence-unit name=\"XA\">\n+      <class>org.apache.openjpa.slice.PObject</class>\n+      <properties>\n+         <property name=\"openjpa.BrokerFactory\" value=\"slice\"/>\n+         <property name=\"openjpa.ConnectionDriverName\" value=\"org.apache.derby.jdbc.EmbeddedDriver\"/>\n+\n+         <property name=\"openjpa.slice.Names\" value=\"One,Two\"/>\n+         <property name=\"openjpa.slice.DistributionPolicy\" value=\"org.apache.openjpa.slice.policy.UserDistributionPolicy\"/>\n+         \n+         <property name=\"openjpa.ConnectionUserName\"        value=\"\"/>\n+         <property name=\"openjpa.ConnectionPassword\"        value=\"\"/>\n+         <property name=\"openjpa.slice.One.ConnectionDriverName\" value=\"org.apache.derby.jdbc.EmbeddedDriver\"/>\n+         <property name=\"openjpa.slice.One.ConnectionURL\" value=\"jdbc:derby:target/database/openjpa-slice1;create=true\"/>\n+         <property name=\"openjpa.slice.Two.ConnectionDriverName\" value=\"org.apache.derby.jdbc.EmbeddedDriver\"/>\n+         <property name=\"openjpa.slice.Two.ConnectionURL\" value=\"jdbc:derby:target/database/openjpa-slice2;create=true\"/>\n+         \n+         <property name=\"openjpa.Multithreaded\" value=\"false\"/>\n+         <property name=\"openjpa.jdbc.SynchronizeMappings\" value=\"refresh\"/>\n+         <property name=\"openjpa.jdbc.MappingDefaults\" value=\"DefaultMissingInfo=true\"/>\n+         <property name=\"openjpa.RuntimeUnenhancedClasses\" value=\"supported\"/>\n+      </properties>\n+   </persistence-unit>\n+   \n+   <!-- ==================================================================== -->\n+   <!-- Configuration for testing basic CRUD operations                      -->\n+   <!-- ==================================================================== -->\n+   <persistence-unit name=\"slice\">\n+        <class>org.apache.openjpa.slice.PObject</class>\n+        <class>org.apache.openjpa.slice.Person</class>\n+        <class>org.apache.openjpa.slice.Address</class>\n+        <class>org.apache.openjpa.slice.Country</class>\n+\t\t<properties>\n+            <property name=\"openjpa.BrokerFactory\" value=\"slice\"/>\n+            <property name=\"openjpa.ConnectionDriverName\" value=\"org.apache.derby.jdbc.EmbeddedDriver\"/>\n+            <property name=\"openjpa.slice.Names\" value=\"One,Two\"/>\n+            <property name=\"openjpa.slice.Master\" value=\"Two\"/>\n+            <property name=\"openjpa.slice.One.ConnectionURL\" value=\"jdbc:derby:target/database/openjpa-slice1;create=true\"/>\n+            <property name=\"openjpa.slice.Two.ConnectionURL\" value=\"jdbc:derby:target/database/openjpa-slice2;create=true\"/>\n+            <property name=\"openjpa.ConnectionUserName\" value=\"\"/>\n+            <property name=\"openjpa.ConnectionPassword\" value=\"\"/>\n+            <property name=\"openjpa.slice.DistributionPolicy\" value=\"org.apache.openjpa.slice.policy.UserDistributionPolicy\"/>\n+            <property name=\"openjpa.slice.Lenient\" value=\"false\"/>\n+            \n+            <property name=\"openjpa.Connection2URL\" value=\"jdbc:derby:target/database/openjpa-slice1;create=true\"/>\n+\t        <property name=\"openjpa.jdbc.SynchronizeMappings\" value=\"buildSchema\"/>\n+            <property name=\"openjpa.QueryCompilationCache\" value=\"false\"/>\n+            <property name=\"openjpa.jdbc.MappingDefaults\" value=\"DefaultMissingInfo=true\"/>\n+            <property name=\"openjpa.RuntimeUnenhancedClasses\" value=\"supported\"/>\n+      \t</properties>\n+   </persistence-unit>\n+   \n+      <persistence-unit name=\"ordering\">\n+        <class>org.apache.openjpa.slice.PObject</class>\n+        <class>org.apache.openjpa.slice.Person</class>\n+        <class>org.apache.openjpa.slice.Address</class>\n+        <class>org.apache.openjpa.slice.Country</class>\n+        <properties>\n+            <property name=\"openjpa.BrokerFactory\" value=\"slice\"/>\n+            <property name=\"openjpa.ConnectionDriverName\" value=\"org.apache.derby.jdbc.EmbeddedDriver\"/>\n+            <property name=\"openjpa.slice.Even.ConnectionURL\" value=\"jdbc:derby:target/database/openjpa-slice1;create=true\"/>\n+            <property name=\"openjpa.slice.Odd.ConnectionURL\" value=\"jdbc:derby:target/database/openjpa-slice2;create=true\"/>\n+            <property name=\"openjpa.ConnectionUserName\" value=\"\"/>\n+            <property name=\"openjpa.ConnectionPassword\" value=\"\"/>\n+            <property name=\"openjpa.slice.DistributionPolicy\" value=\"org.apache.openjpa.slice.policy.EvenOddDistributionPolicy\"/>\n+            <property name=\"openjpa.slice.Lenient\" value=\"false\"/>\n+            \n+            <property name=\"openjpa.Connection2URL\" value=\"jdbc:derby:target/database/openjpa-slice1;create=true\"/>\n+            <property name=\"openjpa.jdbc.SynchronizeMappings\" value=\"buildSchema\"/>\n+            <property name=\"openjpa.jdbc.MappingDefaults\" value=\"DefaultMissingInfo=true\"/>\n+        </properties>\n+   </persistence-unit>\n+   \n+   <persistence-unit name=\"mysql\">\n+      <properties>\n+         <property name=\"openjpa.BrokerFactory\" value=\"slice\"/>\n+         <property name=\"openjpa.ConnectionDriverName\" value=\"com.mysql.jdbc.Driver\"/>\n+\n+         <property name=\"openjpa.slice.Names\" value=\"One,Two\"/>\n+         <property name=\"openjpa.slice.DistributionPolicy\" value=\"org.apache.openjpa.slice.policy.UserDistributionPolicy\"/>\n+         \n+         <property name=\"openjpa.ConnectionUserName\"        value=\"root\"/>\n+         <property name=\"openjpa.ConnectionPassword\"        value=\"\"/>\n+         <property name=\"openjpa.slice.One.ConnectionDriverName\" value=\"com.mysql.jdbc.Driver\"/>\n+         <property name=\"openjpa.slice.One.ConnectionURL\" value=\"jdbc:mysql://localhost/slice1\"/>\n+         <property name=\"openjpa.slice.Two.ConnectionDriverName\" value=\"com.mysql.jdbc.Driver\"/>\n+         <property name=\"openjpa.slice.Two.ConnectionURL\" value=\"jdbc:mysql://localhost/slice2\"/>\n+         \n+         <property name=\"openjpa.Multithreaded\" value=\"false\"/>\n+         <property name=\"openjpa.jdbc.SynchronizeMappings\" value=\"refresh\"/>\n+         <property name=\"openjpa.jdbc.MappingDefaults\" value=\"DefaultMissingInfo=true\"/>\n+         <property name=\"openjpa.RuntimeUnenhancedClasses\" value=\"supported\"/>\n+      </properties>\n+   </persistence-unit>\n+   \n+   <persistence-unit name=\"replication\">\n+   \t  <class>org.apache.openjpa.slice.ReplicatedParent</class>\n+   \t  <class>org.apache.openjpa.slice.ReplicatedChild</class>\n+   \t  \n+      <properties>\n+         <property name=\"openjpa.BrokerFactory\" value=\"slice\"/>\n+         <property name=\"openjpa.ConnectionDriverName\" value=\"org.apache.derby.jdbc.EmbeddedDriver\"/>\n+\n+         <property name=\"openjpa.slice.Names\" value=\"One,Two\"/>\n+         <property name=\"openjpa.slice.DistributionPolicy\" value=\"org.apache.openjpa.slice.policy.UserDistributionPolicy\"/>\n+         \n+         <property name=\"openjpa.ConnectionUserName\" value=\"\"/>\n+         <property name=\"openjpa.ConnectionPassword\" value=\"\"/>\n+         \n+         <property name=\"openjpa.slice.One.ConnectionURL\" value=\"jdbc:derby:target/database/openjpa-slice1;create=true\"/>\n+         <property name=\"openjpa.slice.Two.ConnectionURL\" value=\"jdbc:derby:target/database/openjpa-slice2;create=true\"/>\n+         \n+         <property name=\"openjpa.Multithreaded\" value=\"false\"/>\n+         <property name=\"openjpa.Log\" value=\"DefaultLevel=INFO, Enhance=TRACE, SQL=TRACE\"/>\n+         <property name=\"openjpa.jdbc.SynchronizeMappings\" value=\"refresh\"/>\n+         <property name=\"openjpa.jdbc.MappingDefaults\" value=\"DefaultMissingInfo=true\"/>\n+         <property name=\"openjpa.RuntimeUnenhancedClasses\" value=\"supported\"/>\n+      </properties>\n+   </persistence-unit>\n+   \n+</persistence>"}]}

