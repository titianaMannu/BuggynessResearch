{"sha":"b573799fc3176ef578951fd8e0e8eced0ee82328","node_id":"MDY6Q29tbWl0MjA2MzY0OmI1NzM3OTlmYzMxNzZlZjU3ODk1MWZkOGUwZThlY2VkMGVlODIzMjg=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-09-11T03:24:27Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-09-11T03:24:27Z"},"message":"OPENJPA-1013: Tighten access to instance variables/methods.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@813659 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"89e7a8ec904e7420c361bd590a63189ffb4db079","url":"https://api.github.com/repos/apache/openjpa/git/trees/89e7a8ec904e7420c361bd590a63189ffb4db079"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b573799fc3176ef578951fd8e0e8eced0ee82328","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b573799fc3176ef578951fd8e0e8eced0ee82328","html_url":"https://github.com/apache/openjpa/commit/b573799fc3176ef578951fd8e0e8eced0ee82328","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b573799fc3176ef578951fd8e0e8eced0ee82328/comments","author":null,"committer":null,"parents":[{"sha":"df860912a7ddda0ea5bed5167b3477ff99c48e81","url":"https://api.github.com/repos/apache/openjpa/commits/df860912a7ddda0ea5bed5167b3477ff99c48e81","html_url":"https://github.com/apache/openjpa/commit/df860912a7ddda0ea5bed5167b3477ff99c48e81"}],"stats":{"total":48,"additions":26,"deletions":22},"files":[{"sha":"a272d04d272807772cf2f3ac179bf09c0ff97790","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestMetamodel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/b573799fc3176ef578951fd8e0e8eced0ee82328/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestMetamodel.java","raw_url":"https://github.com/apache/openjpa/raw/b573799fc3176ef578951fd8e0e8eced0ee82328/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestMetamodel.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestMetamodel.java?ref=b573799fc3176ef578951fd8e0e8eced0ee82328","patch":"@@ -86,7 +86,7 @@ public void testMetaClassFieldsArePopulated() {\n         Class<?> mCls = m.getJavaType();\n         assertSame(ImplicitFieldAccessSubclass.class, mCls);\n         \n-        Class<?> m2Cls = featureSelection.repos.getMetaModel(mCls, true);\n+        Class<?> m2Cls = featureSelection.getRepository().getMetaModel(mCls, true);\n         assertNotNull(m2Cls);\n         try {\n             Field f2 = getStaticField(m2Cls, \"base\");"},{"sha":"9ec9c4c0c5ed63fe2408b7e254d3e7c71b0682f4","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaExpressionBuilder.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/b573799fc3176ef578951fd8e0e8eced0ee82328/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaExpressionBuilder.java","raw_url":"https://github.com/apache/openjpa/raw/b573799fc3176ef578951fd8e0e8eced0ee82328/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaExpressionBuilder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaExpressionBuilder.java?ref=b573799fc3176ef578951fd8e0e8eced0ee82328","patch":"@@ -96,14 +96,14 @@ protected void evalAccessPaths(QueryExpressions exps, ExpressionFactory factory,\n             for (Join<?,?> join : root.getJoins()) {\n                 Class<?> cls = join.getAttribute().getJavaType();\n                 if (join.getAttribute().isAssociation()) {\n-                    ClassMetaData meta = metamodel.repos.getMetaData(cls, null, true);\n+                    ClassMetaData meta = metamodel.getRepository().getMetaData(cls, null, true);\n                     PersistenceType type = MetamodelImpl.getPersistenceType(meta);\n                     if (type == PersistenceType.ENTITY || type == PersistenceType.EMBEDDABLE) \n                         metas.add(meta);\n                 }\n             }\n             for (Fetch<?,?> fetch : root.getFetches()) {\n-                metas.add(metamodel.repos.getCachedMetaData(fetch.getAttribute().getJavaType()));\n+                metas.add(metamodel.getRepository().getCachedMetaData(fetch.getAttribute().getJavaType()));\n             }\n         }\n         exps.accessPath = metas.toArray(new ClassMetaData[metas.size()]);"},{"sha":"39591c135ffda20b0bcac398b667a8daf5637f3e","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/Expressions.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/b573799fc3176ef578951fd8e0e8eced0ee82328/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/Expressions.java","raw_url":"https://github.com/apache/openjpa/raw/b573799fc3176ef578951fd8e0e8eced0ee82328/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/Expressions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/Expressions.java?ref=b573799fc3176ef578951fd8e0e8eced0ee82328","patch":"@@ -1043,7 +1043,7 @@ public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQue\n                 ClassMetaData can = ((Types.Entity<X>)q.getRoot().getModel()).meta;\n                 Class<?> candidate = can.getDescribedType();\n                 if (candidate.isAssignableFrom((Class)value)) {\n-                   lit.setMetaData(featureSelection.repos.getMetaData((Class<?>)value, null, true));\n+                   lit.setMetaData(featureSelection.getRepository().getMetaData((Class<?>)value, null, true));\n                 } else {\n                     lit.setMetaData(can);\n                 }"},{"sha":"178d2c22d23d135f8fd110aecf0669ca836928aa","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/FetchPathImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/b573799fc3176ef578951fd8e0e8eced0ee82328/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/FetchPathImpl.java","raw_url":"https://github.com/apache/openjpa/raw/b573799fc3176ef578951fd8e0e8eced0ee82328/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/FetchPathImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/FetchPathImpl.java?ref=b573799fc3176ef578951fd8e0e8eced0ee82328","patch":"@@ -40,8 +40,8 @@\n  * @param <X> type of this\n  */\n public class FetchPathImpl<Z,X> extends PathImpl<Z,X> implements Fetch<Z, X> {\n-    Set<Fetch<?,?>> _fetches;\n-    JoinType joinType;\n+    protected Set<Fetch<?,?>> _fetches;\n+    protected JoinType joinType;\n     \n     \n     FetchPathImpl(FetchParent<?,Z> parent, Members.Member<? super Z,X> member) {"},{"sha":"e64766f02bde766bee46053fbfa54418921773f7","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/Joins.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/b573799fc3176ef578951fd8e0e8eced0ee82328/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/Joins.java","raw_url":"https://github.com/apache/openjpa/raw/b573799fc3176ef578951fd8e0e8eced0ee82328/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/Joins.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/Joins.java?ref=b573799fc3176ef578951fd8e0e8eced0ee82328","patch":"@@ -270,8 +270,8 @@ public StringBuilder asVariable(AliasContext q) {\n      * \n      */\n     public static abstract class AbstractCollection<Z,C,E> extends FromImpl<Z,E> implements PluralJoin<Z, C, E> {\n-        final JoinType joinType;\n-        boolean allowNull = false;\n+        private final JoinType joinType;\n+        private boolean allowNull = false;\n         \n         public AbstractCollection(FromImpl<?,Z> from, Members.PluralAttributeImpl<? super Z, C, E> member, \n             JoinType jt) {\n@@ -553,8 +553,8 @@ public Map(FromImpl<?,Z> parent, Members.MapAttributeImpl<? super Z, K,V> member\n     \n        \n    public static class MapKey<Z,K> extends PathImpl<Z,K> {\n-       Map<?,K,?> map;\n-       MapAttributeImpl<Z, K, ?> attr;\n+       private final Map<?,K,?> map;\n+       private final MapAttributeImpl<Z, K, ?> attr;\n        \n        public MapKey(Map<Z,K,?> joinMap){\n            super(((MapAttribute<Z, K, ?>)joinMap.getAttribute()).getKeyJavaType());\n@@ -588,7 +588,7 @@ public StringBuilder asValue(AliasContext q) {\n    }\n        \n    public static class MapEntry<K,V> extends ExpressionImpl<java.util.Map.Entry<K,V>> {\n-       Map<?,K,V> map;\n+       private final Map<?,K,V> map;\n        \n        public MapEntry(Map<?,K,V> joinMap){\n            super(((MapAttribute)joinMap.getAttribute()).getJavaType());"},{"sha":"b2eaeb59c4e0c204274f8745b5594b103d72190b","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/PathImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/b573799fc3176ef578951fd8e0e8eced0ee82328/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/PathImpl.java","raw_url":"https://github.com/apache/openjpa/raw/b573799fc3176ef578951fd8e0e8eced0ee82328/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/PathImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/PathImpl.java?ref=b573799fc3176ef578951fd8e0e8eced0ee82328","patch":"@@ -181,7 +181,7 @@ public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection,  CriteriaQu\n             }\n         } else if (_parent == null) {\n             path = factory.newPath();\n-            path.setMetaData(featureSelection.repos.getCachedMetaData(getJavaType()));\n+            path.setMetaData(featureSelection.getRepository().getCachedMetaData(getJavaType()));\n         }\n         if (_member != null && !_member.isCollection()) {\n             path.setImplicitType(getJavaType());"},{"sha":"5b3fff2ef192e55e82b414f6b17b651e2e2bc0bf","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/PredicateImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/b573799fc3176ef578951fd8e0e8eced0ee82328/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/PredicateImpl.java","raw_url":"https://github.com/apache/openjpa/raw/b573799fc3176ef578951fd8e0e8eced0ee82328/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/PredicateImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/PredicateImpl.java?ref=b573799fc3176ef578951fd8e0e8eced0ee82328","patch":"@@ -47,8 +47,8 @@\n     public static final Predicate FALSE = new Expressions.NotEqual(ONE,ONE);\n     \n     protected final List<Predicate> _exps = new ArrayList<Predicate>();\n-    protected final BooleanOperator _op;\n-    protected boolean _negated = false;\n+    private final BooleanOperator _op;\n+    private boolean _negated = false;\n \n     /**\n      * A predicate no arguments representing AND operator."},{"sha":"8411174f43506e9bcb0a20e4d6ef68063dcbf1e5","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/AbstractManagedType.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/b573799fc3176ef578951fd8e0e8eced0ee82328/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/AbstractManagedType.java","raw_url":"https://github.com/apache/openjpa/raw/b573799fc3176ef578951fd8e0e8eced0ee82328/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/AbstractManagedType.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/AbstractManagedType.java?ref=b573799fc3176ef578951fd8e0e8eced0ee82328","patch":"@@ -783,30 +783,30 @@ private void notFoundException(String msg, String name, Class<?> t1, Class<?> t2\n         return null;\n     }\n     \n-    public static <T, C extends java.util.Collection<E>, E> C filter(Collection<T> original, \n+    static <T, C extends java.util.Collection<E>, E> C filter(Collection<T> original, \n             C result, Filter<T> f1) {\n         return filter(original, result, f1, null, null, null);\n     }\n     \n-    public static <T, C extends java.util.Collection<E>, E> C filter(Collection<T> original, \n+    static <T, C extends java.util.Collection<E>, E> C filter(Collection<T> original, \n             C result, Filter<T> f1, Filter<T> f2) {\n         return filter(original, result, f1, f2, null, null);\n     }\n     \n-    public static <T, C extends java.util.Collection<E>, E> C filter(Collection<T> original, \n+    static <T, C extends java.util.Collection<E>, E> C filter(Collection<T> original, \n             C result, Filter<T> f1, Filter<T> f2, Filter<T> f3) {\n         return filter(original, result, f1, f2, f3, null);\n     }\n     \n-    public static <T> T pick(Collection<T> original, Filter<T> f1) {\n+    static <T> T pick(Collection<T> original, Filter<T> f1) {\n         return pick(original, f1, null, null, null);\n     }\n \n-    public static <T> T pick(Collection<T> original, Filter<T> f1, Filter<T> f2) {\n+    static <T> T pick(Collection<T> original, Filter<T> f1, Filter<T> f2) {\n         return pick(original, f1, f2, null, null);\n     }\n     \n-    public static <T> T pick(Collection<T> original, Filter<T> f1, Filter<T> f2, Filter<T> f3) {\n+    static <T> T pick(Collection<T> original, Filter<T> f1, Filter<T> f2, Filter<T> f3) {\n         return pick(original, f1, f2, f3, null);\n     }\n     "},{"sha":"7cc0400fd4f55415a907cf44bf72bf53ae85b1ae","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/MetamodelImpl.java","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/b573799fc3176ef578951fd8e0e8eced0ee82328/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/MetamodelImpl.java","raw_url":"https://github.com/apache/openjpa/raw/b573799fc3176ef578951fd8e0e8eced0ee82328/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/MetamodelImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/MetamodelImpl.java?ref=b573799fc3176ef578951fd8e0e8eced0ee82328","patch":"@@ -65,7 +65,7 @@\n  * \n  */\n public class MetamodelImpl implements Metamodel, Resolver {\n-    public final MetaDataRepository repos;\n+    private final MetaDataRepository repos;\n     private Map<Class<?>, Type<?>> _basics = new HashMap<Class<?>, Type<?>>();\n     private Map<Class<?>, EntityType<?>> _entities = new HashMap<Class<?>, EntityType<?>>();\n     private Map<Class<?>, EmbeddableType<?>> _embeddables = new HashMap<Class<?>, EmbeddableType<?>>();\n@@ -100,6 +100,10 @@ public MetamodelImpl(MetaDataRepository repos) {\n             }\n         }\n     }\n+    \n+    public MetaDataRepository getRepository() {\n+        return repos;\n+    }\n \n     /**\n      *  Return the metamodel embeddable type representing the embeddable class.\n@@ -267,7 +271,7 @@ public static PersistenceType getPersistenceType(ClassMetaData meta) {\n         return result;\n     }\n \n-    public static CollectionType categorizeCollection(Class<?> cls) {\n+    static CollectionType categorizeCollection(Class<?> cls) {\n         if (Set.class.isAssignableFrom(cls))\n             return CollectionType.SET;\n         if (List.class.isAssignableFrom(cls))"}]}

