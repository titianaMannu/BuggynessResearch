{"sha":"b5bab78e043329c97b0ddac1558bd595e5a522aa","node_id":"MDY6Q29tbWl0MjA2MzY0OmI1YmFiNzhlMDQzMzI5Yzk3YjBkZGFjMTU1OGJkNTk1ZTVhNTIyYWE=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-03-10T11:14:44Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-03-10T11:14:44Z"},"message":"OPENJPA-142: read entity names specified in XML. Also added comment clarifying that ClassMetaData.setTypeAlias() is only used at enhance time.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@516682 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"47d96453b8b9455e11fcf3a865700883fbf3d744","url":"https://api.github.com/repos/apache/openjpa/git/trees/47d96453b8b9455e11fcf3a865700883fbf3d744"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b5bab78e043329c97b0ddac1558bd595e5a522aa","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b5bab78e043329c97b0ddac1558bd595e5a522aa","html_url":"https://github.com/apache/openjpa/commit/b5bab78e043329c97b0ddac1558bd595e5a522aa","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b5bab78e043329c97b0ddac1558bd595e5a522aa/comments","author":null,"committer":null,"parents":[{"sha":"d35bc8a306444ed25e7322d023e46c4a1d64e60a","url":"https://api.github.com/repos/apache/openjpa/commits/d35bc8a306444ed25e7322d023e46c4a1d64e60a","html_url":"https://github.com/apache/openjpa/commit/d35bc8a306444ed25e7322d023e46c4a1d64e60a"}],"stats":{"total":114,"additions":111,"deletions":3},"files":[{"sha":"33777e5244095e5026eab61b22a0bf1bd7c3fb35","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/b5bab78e043329c97b0ddac1558bd595e5a522aa/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/b5bab78e043329c97b0ddac1558bd595e5a522aa/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java?ref=b5bab78e043329c97b0ddac1558bd595e5a522aa","patch":"@@ -588,7 +588,8 @@ public String getTypeAlias() {\n     /**\n      * Sets the alias for the described type. The alias can be\n      * any arbitrary string that the implementation can later use to\n-     * refer to the class.\n+     * refer to the class. Note that at runtime, only the alias\n+     * computed when the persistent type was enhanced is used.\n      *\n      * @param alias the alias name to apply to the described type\n      */"},{"sha":"f54c3be2ec4231437f52aafc7b5beda0886265a9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xml/SimpleXmlEntity.java","status":"added","additions":16,"deletions":0,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/b5bab78e043329c97b0ddac1558bd595e5a522aa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xml/SimpleXmlEntity.java","raw_url":"https://github.com/apache/openjpa/raw/b5bab78e043329c97b0ddac1558bd595e5a522aa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xml/SimpleXmlEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xml/SimpleXmlEntity.java?ref=b5bab78e043329c97b0ddac1558bd595e5a522aa","patch":"@@ -0,0 +1,16 @@\n+package org.apache.openjpa.persistence.xml;\n+\n+public class SimpleXmlEntity {\n+\n+    private long id;\n+    private int version;\n+    private String stringField;\n+\n+    public String getStringField() {\n+        return stringField;\n+    }\n+\n+    public void setStringField(String stringField) {\n+        this.stringField = stringField;\n+    }\n+}"},{"sha":"550f7529d909fc6be372fa82e6636c9ec57a7e9e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xml/TestSimpleXmlEntity.java","status":"added","additions":55,"deletions":0,"changes":55,"blob_url":"https://github.com/apache/openjpa/blob/b5bab78e043329c97b0ddac1558bd595e5a522aa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xml/TestSimpleXmlEntity.java","raw_url":"https://github.com/apache/openjpa/raw/b5bab78e043329c97b0ddac1558bd595e5a522aa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xml/TestSimpleXmlEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xml/TestSimpleXmlEntity.java?ref=b5bab78e043329c97b0ddac1558bd595e5a522aa","patch":"@@ -0,0 +1,55 @@\n+package org.apache.openjpa.persistence.xml;\n+\n+import java.util.Map;\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.test.SingleEMTest;\n+import org.apache.openjpa.persistence.ArgumentException;\n+\n+public class TestSimpleXmlEntity\n+    extends SingleEMTest {\n+\n+    public TestSimpleXmlEntity() {\n+        super(SimpleXmlEntity.class);\n+    }\n+\n+    protected void setEMFProps(Map props) {\n+        super.setEMFProps(props);\n+    }\n+\n+    public void testNamedQueryInXmlNamedEntity() {\n+        EntityManager em = emf.createEntityManager();\n+        em.createNamedQuery(\"SimpleXml.findAll\").getResultList();\n+        em.close();\n+    }\n+\n+    public void testNamedQueryInXmlUsingShortClassName() {\n+        EntityManager em = emf.createEntityManager();\n+        try {\n+            em.createNamedQuery(\"SimpleXmlEntity.findAll\").getResultList();\n+            fail(\"should not be able to execute query using short class name \" +\n+                \"for entity that has an entity name specified\");\n+        } catch (ArgumentException ae) {\n+            // expected\n+        }\n+        em.close();\n+    }\n+\n+    public void testNamedEntityInDynamicQuery() {\n+        EntityManager em = emf.createEntityManager();\n+        em.createQuery(\"select o from SimpleXml o\").getResultList();\n+        em.close();\n+    }\n+\n+    public void testShortClassNameInDynamicQuery() {\n+        EntityManager em = emf.createEntityManager();\n+        try {\n+            em.createQuery(\"select o from SimpleXmlEntity o\").getResultList();\n+            fail(\"should not be able to execute query using short class name \" +\n+                \"for entity that has an entity name specified\");\n+        } catch (ArgumentException ae) {\n+            // expected\n+        }\n+        em.close();\n+    }\n+}"},{"sha":"12aa980d62dc88cd09f0a51ed71a36a9f094c345","filename":"openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/b5bab78e043329c97b0ddac1558bd595e5a522aa/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/b5bab78e043329c97b0ddac1558bd595e5a522aa/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml?ref=b5bab78e043329c97b0ddac1558bd595e5a522aa","patch":"@@ -24,6 +24,13 @@\n             org.apache.openjpa.persistence.PersistenceProviderImpl\n         </provider>\n         -->\n+        <!--\n+            This needs to be listed because the OpenJPA test framework\n+            does not provide any other means to incrementally enhance classes\n+            for particular test cases, and the XML data must be available at\n+            enhance time for XML data to get incorporated into PCRegistry\n+        -->\n+        <mapping-file>org/apache/openjpa/persistence/xml/orm.xml</mapping-file>\n         <properties>\n             <!--\n             These properties are instead passed via System properties"},{"sha":"0f049ec1fb516ea8598c40940ea1a510416cea06","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/xml/orm.xml","status":"added","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/apache/openjpa/blob/b5bab78e043329c97b0ddac1558bd595e5a522aa/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/xml/orm.xml","raw_url":"https://github.com/apache/openjpa/raw/b5bab78e043329c97b0ddac1558bd595e5a522aa/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/xml/orm.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/xml/orm.xml?ref=b5bab78e043329c97b0ddac1558bd595e5a522aa","patch":"@@ -0,0 +1,23 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+\n+<entity-mappings xmlns=\"http://java.sun.com/xml/ns/persistence/orm\"\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence/orm orm_1_0.xsd\"\n+    version=\"1.0\">\n+    <package>\n+        org.apache.openjpa.persistence.xml\n+    </package>\n+    <entity name=\"SimpleXml\" class=\"SimpleXmlEntity\">\n+        <named-query name=\"SimpleXml.findAll\">\n+            <query>select o from SimpleXml o</query>\n+        </named-query>\n+        <named-query name=\"SimpleXmlEntity.findAll\">\n+            <query>select o from SimpleXmlEntity o</query>\n+        </named-query>\n+        <attributes>\n+            <id name=\"id\"/>\n+            <basic name=\"stringField\"/>\n+            <version name=\"version\"/>\n+        </attributes>\n+    </entity>\n+</entity-mappings>\n\\ No newline at end of file"},{"sha":"25c6b324dd5993e11641f33032d57d5790fcbbce","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java","status":"modified","additions":8,"deletions":2,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/b5bab78e043329c97b0ddac1558bd595e5a522aa/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/b5bab78e043329c97b0ddac1558bd595e5a522aa/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java?ref=b5bab78e043329c97b0ddac1558bd595e5a522aa","patch":"@@ -61,6 +61,7 @@\n import static org.apache.openjpa.persistence.PersistenceStrategy.*;\n import org.apache.openjpa.util.ImplHelper;\n import org.apache.openjpa.util.UnsupportedException;\n+import serp.util.Strings;\n \n /**\n  * Custom SAX parser used by the system to quickly parse persistence i\n@@ -721,7 +722,8 @@ protected boolean startClass(String elem, Attributes attrs)\n         // query mode only?\n         _cls = classForName(currentClassName());\n         if (_mode == MODE_QUERY) {\n-            if (_parser != null && !\"true\".equals(attrs.getValue(\"metadata-complete\")))\n+            if (_parser != null &&\n+                !\"true\".equals(attrs.getValue(\"metadata-complete\")))\n                 _parser.parse(_cls);\n             return true;\n         }\n@@ -759,7 +761,8 @@ protected boolean startClass(String elem, Attributes attrs)\n             meta.setSourceMode(MODE_NONE);\n \n             // parse annotations first so XML overrides them\n-            if (_parser != null && !\"true\".equals(attrs.getValue(\"metadata-complete\")))\n+            if (_parser != null &&\n+                !\"true\".equals(attrs.getValue(\"metadata-complete\")))\n                 _parser.parse(_cls);\n         }\n \n@@ -768,6 +771,9 @@ protected boolean startClass(String elem, Attributes attrs)\n             meta.setSource(getSourceFile(), meta.SRC_XML);\n             meta.setSourceMode(MODE_META, true);\n             meta.setListingIndex(_clsPos);\n+            String name = attrs.getValue(\"name\");\n+            if (!StringUtils.isEmpty(name))\n+                meta.setTypeAlias(name);\n             meta.setEmbeddedOnly(mappedSuper || \"embeddable\".equals(elem));\n             if (mappedSuper)\n                 meta.setIdentityType(meta.ID_UNKNOWN);"}]}

