{"sha":"b612d646209bc72c0948a8f7e6d03527a6bdb3cd","node_id":"MDY6Q29tbWl0MjA2MzY0OmI2MTJkNjQ2MjA5YmM3MmMwOTQ4YThmN2U2ZDAzNTI3YTZiZGIzY2Q=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-03-07T00:40:53Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-03-07T00:40:53Z"},"message":"OPENJPA-965: Open up FinderCacheImpl for jdbc and non-jdbc\nlike implementation\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@751148 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"09c820281981118ae8d12d5f702ff1bb760f3b46","url":"https://api.github.com/repos/apache/openjpa/git/trees/09c820281981118ae8d12d5f702ff1bb760f3b46"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b612d646209bc72c0948a8f7e6d03527a6bdb3cd","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b612d646209bc72c0948a8f7e6d03527a6bdb3cd","html_url":"https://github.com/apache/openjpa/commit/b612d646209bc72c0948a8f7e6d03527a6bdb3cd","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b612d646209bc72c0948a8f7e6d03527a6bdb3cd/comments","author":null,"committer":null,"parents":[{"sha":"70cfcaaee150011087f228e648c2ec30ed865cb4","url":"https://api.github.com/repos/apache/openjpa/commits/70cfcaaee150011087f228e648c2ec30ed865cb4","html_url":"https://github.com/apache/openjpa/commit/70cfcaaee150011087f228e648c2ec30ed865cb4"}],"stats":{"total":35,"additions":31,"deletions":4},"files":[{"sha":"ccc425c676829ad71b29c891e43879f6e97f24b0","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/FinderQueryImpl.java","status":"modified","additions":11,"deletions":4,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/b612d646209bc72c0948a8f7e6d03527a6bdb3cd/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/FinderQueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/b612d646209bc72c0948a8f7e6d03527a6bdb3cd/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/FinderQueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/FinderQueryImpl.java?ref=b612d646209bc72c0948a8f7e6d03527a6bdb3cd","patch":"@@ -109,6 +109,10 @@ public String getQueryString() {\n         return _sql;\r\n     }\r\n     \r\n+    public Column[] getPKColumns() {\r\n+        return _pkCols;\r\n+    }\r\n+    \r\n     private Object[] getPKValues(OpenJPAStateManager sm, JDBCStore store) {\r\n         Object[] pks = null;\r\n         Object oid = sm.getObjectId();\r\n@@ -138,12 +142,15 @@ public Result execute(OpenJPAStateManager sm, StoreManager store,\n         PreparedStatement stmnt = null;\r\n         ResultSet rs = null;\r\n         try {\r\n-            stmnt = conn.prepareStatement(_sql);\r\n+            stmnt = _select.prepareStatement(conn, _sql);\r\n             Object[] params = getPKValues(sm, jstore);\r\n-            for (int i = 0; i <params.length; i++) {\r\n-                dict.setUnknown(stmnt, i+1, params[i], _pkCols[i]);\r\n+            if (stmnt != null) {\r\n+                for (int i = 0; i <params.length; i++) {\r\n+                    dict.setUnknown(stmnt, i+1, params[i], _pkCols[i]);\r\n+                }\r\n             }\r\n-            rs = stmnt.executeQuery();\r\n+\r\n+            rs = _select.executeQuery(conn, stmnt, this, jstore, params);\r\n             return _select.getEagerResult(conn, stmnt, rs, jstore, \r\n                 (JDBCFetchConfiguration)fetch, forUpdate, _buffer);\r\n         } catch (SQLException se) {\r"},{"sha":"20813c9854f2e99da4862a359d4abcf5c22518ca","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","status":"modified","additions":20,"deletions":0,"changes":20,"blob_url":"https://github.com/apache/openjpa/blob/b612d646209bc72c0948a8f7e6d03527a6bdb3cd/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","raw_url":"https://github.com/apache/openjpa/raw/b612d646209bc72c0948a8f7e6d03527a6bdb3cd/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java?ref=b612d646209bc72c0948a8f7e6d03527a6bdb3cd","patch":"@@ -43,6 +43,7 @@\n import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n import org.apache.openjpa.jdbc.kernel.EagerFetchModes;\n+import org.apache.openjpa.jdbc.kernel.FinderQueryImpl;\n import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCLockManager;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n@@ -439,6 +440,15 @@ protected PreparedStatement prepareStatement(Connection conn,\n             return sql.prepareStatement(conn, fetch, rsType, -1);\n     }\n     \n+    /**\n+     * This method is to provide override for non-JDBC or JDBC-like \n+     * implementation of preparing statement.\n+     */\n+    public PreparedStatement prepareStatement(Connection conn, \n+        String sql) throws SQLException {\n+        return conn.prepareStatement(sql);\n+    }    \n+    \n     /**\n      * This method is to provide override for non-JDBC or JDBC-like \n      * implementation of setting query timeout.\n@@ -469,6 +479,16 @@ protected ResultSet executeQuery(Connection conn, PreparedStatement stmnt,\n         return stmnt.executeQuery();\n     }\n     \n+    /**\n+     * This method is to provide override for non-JDBC or JDBC-like \n+     * implementation of executing query.\n+     */\n+    public ResultSet executeQuery(Connection conn, PreparedStatement stmnt, \n+        FinderQueryImpl finder, JDBCStore store, Object[] params) \n+        throws SQLException {\n+        return stmnt.executeQuery();\n+    }\n+\n     /**\n      * This method is to provide override for non-JDBC or JDBC-like \n      * implementation of getting count from the result set."}]}

