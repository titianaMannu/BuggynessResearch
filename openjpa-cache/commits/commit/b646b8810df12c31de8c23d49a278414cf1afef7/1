{"sha":"b646b8810df12c31de8c23d49a278414cf1afef7","node_id":"MDY6Q29tbWl0MjA2MzY0OmI2NDZiODgxMGRmMTJjMzFkZThjMjNkNDlhMjc4NDE0Y2YxYWZlZjc=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-10-22T22:52:39Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-10-22T22:52:39Z"},"message":"OPENJPA-871: support JoinColumn in conjunction with MapsId annotation\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@828889 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"58d122e8f1a15762d9b7ef9e75b2dc55b68ffac4","url":"https://api.github.com/repos/apache/openjpa/git/trees/58d122e8f1a15762d9b7ef9e75b2dc55b68ffac4"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b646b8810df12c31de8c23d49a278414cf1afef7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b646b8810df12c31de8c23d49a278414cf1afef7","html_url":"https://github.com/apache/openjpa/commit/b646b8810df12c31de8c23d49a278414cf1afef7","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b646b8810df12c31de8c23d49a278414cf1afef7/comments","author":null,"committer":null,"parents":[{"sha":"13c88d75cf0844d1dfb0bdfc0dc9a297c4d2745d","url":"https://api.github.com/repos/apache/openjpa/commits/13c88d75cf0844d1dfb0bdfc0dc9a297c4d2745d","html_url":"https://github.com/apache/openjpa/commit/13c88d75cf0844d1dfb0bdfc0dc9a297c4d2745d"}],"stats":{"total":422,"additions":409,"deletions":13},"files":[{"sha":"c30113654f9891683821381bbeba01b9b78cbdf3","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMapping.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/b646b8810df12c31de8c23d49a278414cf1afef7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMapping.java","raw_url":"https://github.com/apache/openjpa/raw/b646b8810df12c31de8c23d49a278414cf1afef7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMapping.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMapping.java?ref=b646b8810df12c31de8c23d49a278414cf1afef7","patch":"@@ -92,6 +92,8 @@\n     private FieldMapping _bi_MTo1_JT_Field = null;\n     private ForeignKey _bi_1ToM_Join_FK = null;\n     private ForeignKey _bi_1ToM_Elem_FK = null;\n+    \n+    private boolean _hasMapsIdCols = false;\n         \n     /**\n      * Constructor.\n@@ -1335,4 +1337,12 @@ public void setBi1MJoinTableInfo() {\n     public boolean isNonDefaultMappingUsingJoinTableStrategy() {\n         return isBi1To1JT() || isUni1To1JT() || isUniMTo1JT() || isBiMTo1JT();\n     }\n+    \n+    public void setMapsIdCols(boolean hasMapsIdCols) {\n+        _hasMapsIdCols = hasMapsIdCols;\n+    }\n+    \n+    public boolean hasMapsIdCols() {\n+        return _hasMapsIdCols;\n+    }\n }"},{"sha":"506bde42908f583a6d23610559c64c4e5b79349a","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingInfo.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/b646b8810df12c31de8c23d49a278414cf1afef7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingInfo.java","raw_url":"https://github.com/apache/openjpa/raw/b646b8810df12c31de8c23d49a278414cf1afef7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingInfo.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingInfo.java?ref=b646b8810df12c31de8c23d49a278414cf1afef7","patch":"@@ -544,6 +544,10 @@ public Table createTable(MetaDataContext context, TableDefaults def,\n         // n columns because we don't know which of the n columns the info\n         // applies to\n         List given = getColumns();\n+        \n+        if (context instanceof FieldMapping && ((FieldMapping)context).hasMapsIdCols())\n+            given = ((FieldMapping)context).getValueInfo().getMapsIdColumns();\n+        \n         boolean fill = ((MappingRepository) context.getRepository()).\n             getMappingDefaults().defaultMissingInfo();\n         if ((!given.isEmpty() || (!adapt && !fill))"},{"sha":"900dd2f4f0c87ec1cb9385af36f8c509050ce1df","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ValueMappingImpl.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/b646b8810df12c31de8c23d49a278414cf1afef7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ValueMappingImpl.java","raw_url":"https://github.com/apache/openjpa/raw/b646b8810df12c31de8c23d49a278414cf1afef7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ValueMappingImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ValueMappingImpl.java?ref=b646b8810df12c31de8c23d49a278414cf1afef7","patch":"@@ -34,6 +34,7 @@\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.meta.JavaTypes;\n+import org.apache.openjpa.meta.ValueMetaData;\n import org.apache.openjpa.meta.ValueMetaDataImpl;\n import org.apache.openjpa.util.InternalException;\n import org.apache.openjpa.util.MetaDataException;\n@@ -458,6 +459,11 @@ public void syncMappingInfo() {\n                 embed.syncMappingInfo();\n         }\n     }\n+    \n+    public void copy(ValueMetaData vmd) {\n+        super.copy(vmd);\n+        copyMappingInfo((ValueMapping)vmd);\n+    }\n \n     public void copyMappingInfo(ValueMapping vm) {\n         setValueMappedBy(vm.getValueMappedBy());"},{"sha":"190ca6f91d51b9a8af0258bf930d19d9cc4d2290","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ValueMappingInfo.java","status":"modified","additions":16,"deletions":0,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/b646b8810df12c31de8c23d49a278414cf1afef7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ValueMappingInfo.java","raw_url":"https://github.com/apache/openjpa/raw/b646b8810df12c31de8c23d49a278414cf1afef7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ValueMappingInfo.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ValueMappingInfo.java?ref=b646b8810df12c31de8c23d49a278414cf1afef7","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.openjpa.jdbc.meta;\n \n+import java.util.Collections;\n import java.util.List;\n \n import org.apache.openjpa.jdbc.schema.Column;\n@@ -47,6 +48,7 @@\n \n     private boolean _criteria = false;\n     private boolean _canNull = true;\n+    private List _mapsIdCols = null;\n \n     /**\n      * Whether to use class criteria when joining to related type.\n@@ -331,4 +333,18 @@ public void copy(MappingInfo info) {\n         if (_canNull)\n             _canNull = vinfo.canIndicateNull();\n     }\n+    \n+    /**\n+     * Raw column data.\n+     */\n+    public List getMapsIdColumns() {\n+        return (_mapsIdCols == null) ? Collections.EMPTY_LIST : _mapsIdCols;\n+    }\n+    \n+    /**\n+     * Raw column data.\n+     */\n+    public void setMapsIdColumns(List cols) {\n+        _mapsIdCols = cols;\n+    }\n }"},{"sha":"ca8205ec6780125668ce48e0c3f65f2d91a8d558","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/EmbedValueHandler.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/b646b8810df12c31de8c23d49a278414cf1afef7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/EmbedValueHandler.java","raw_url":"https://github.com/apache/openjpa/raw/b646b8810df12c31de8c23d49a278414cf1afef7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/EmbedValueHandler.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/EmbedValueHandler.java?ref=b646b8810df12c31de8c23d49a278414cf1afef7","patch":"@@ -283,7 +283,7 @@ public static void getIdColumns(FieldMapping fmd, List cols) {\n         Column[] pkCols =  ((ValueMappingImpl)fmd.getValue()).getColumns();\n         for (int j = 0; j < pkCols.length; j++) {\n             Column newCol = new Column();\n-            newCol.setName(pkCols[j].getName());\n+            newCol.copy(pkCols[j]);\n             cols.add(newCol);\n         }\n     }"},{"sha":"56ba286cfc99bf5fed060375c647b3535ba69f98","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ObjectIdValueHandler.java","status":"modified","additions":82,"deletions":0,"changes":82,"blob_url":"https://github.com/apache/openjpa/blob/b646b8810df12c31de8c23d49a278414cf1afef7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ObjectIdValueHandler.java","raw_url":"https://github.com/apache/openjpa/raw/b646b8810df12c31de8c23d49a278414cf1afef7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ObjectIdValueHandler.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ObjectIdValueHandler.java?ref=b646b8810df12c31de8c23d49a278414cf1afef7","patch":"@@ -23,6 +23,8 @@\n import java.util.List;\n \n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\n+import org.apache.openjpa.jdbc.meta.FieldMapping;\n import org.apache.openjpa.jdbc.meta.ValueMapping;\n import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.jdbc.schema.ColumnIO;\n@@ -46,12 +48,92 @@\n         boolean adapt) {\n         List cols = new ArrayList();\n         List args = new ArrayList();\n+        setMapsIdCol(vm);\n         super.map(vm, name, io, adapt, cols, args);\n \n         vm.setColumns((Column[]) cols.toArray(new Column[cols.size()]));\n         _args = args.toArray();\n         return vm.getColumns();\n     }\n+    \n+    private void setMapsIdCol(ValueMapping vm) {\n+        if (!(vm instanceof FieldMapping)) \n+            return;\n+        if (!((FieldMapping)vm).hasMapsIdCols())\n+            return;\n+        ClassMapping embeddedMeta = (ClassMapping)((FieldMapping)vm).getValue().getEmbeddedMetaData();\n+        if (embeddedMeta == null)\n+            return;\n+        List mapsIdColList = ((FieldMapping)vm).getValueInfo().getMapsIdColumns();\n+        if (mapsIdColList.size() > 0 ) {\n+            setMapsIdCols(mapsIdColList, embeddedMeta);\n+            return;\n+        } \n+\n+        FieldMapping[] fmds = embeddedMeta.getFieldMappings();\n+        for (int i = 0; i < fmds.length; i++) {\n+            mapsIdColList = fmds[i].getValueInfo().getMapsIdColumns();\n+            if (mapsIdColList.size() == 0)\n+                continue;\n+            ClassMapping embeddedMeta1 = (ClassMapping)fmds[i].getEmbeddedMetaData();\n+            if (embeddedMeta1 != null) \n+                setMapsIdCols(mapsIdColList, embeddedMeta1);\n+            else \n+                setMapsIdCols(mapsIdColList, fmds[i]);\n+        }\n+    }\n+    \n+    private void setMapsIdCols(List cols, ClassMapping cm) {\n+        for (int i = 0; i < cols.size(); i++) {\n+            String refColName = ((Column)cols.get(i)).getTarget();\n+            FieldMapping fm = getReferenceField(cm, refColName);\n+            if (fm != null) {\n+                List colList1 = new ArrayList();\n+                colList1.add(cols.get(i));\n+                fm.setMapsIdCols(true);\n+                fm.getValueInfo().setMapsIdColumns(colList1);\n+            }\n+        }\n+    }\n+\n+    private void setMapsIdCols(List cols, FieldMapping fm) {\n+        if (cols.size() == 1) {\n+            fm.setMapsIdCols(true);\n+            fm.getValueInfo().setMapsIdColumns(cols);\n+            return;\n+        }\n+            \n+        for (int i = 0; i < cols.size(); i++) {\n+            String refColName = ((Column)cols.get(i)).getTarget();\n+            if (isReferenceField(fm, refColName)) {\n+                List colList1 = new ArrayList();\n+                colList1.add(cols.get(i));\n+                fm.setMapsIdCols(true);\n+                fm.getValueInfo().setMapsIdColumns(colList1);\n+            }\n+        }\n+    }\n+    \n+    private FieldMapping getReferenceField(ClassMapping cm, String refColName) {\n+        FieldMapping[] fmds = cm.getFieldMappings();\n+        for (int i = 0; i < fmds.length; i++) {\n+            if (isReferenceField(fmds[i], refColName))\n+                return fmds[i];\n+        }\n+        return null;\n+    }\n+    \n+    private boolean isReferenceField(FieldMapping fm, String refColName) {\n+        List cols = fm.getValueInfo().getColumns();\n+        if (cols.size() == 0) {\n+            if (fm.getName().equals(refColName))\n+                return true;                \n+        } else {\n+            if (((Column)cols.get(0)).getName().equals(refColName))\n+                return true;\n+        } \n+        return false;\n+    }\n \n     public Object getResultArgument(ValueMapping vm) {\n         return _args;"},{"sha":"f9428e91bfa8d7ba0eee0b42f59e1c7cd77d828f","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/b646b8810df12c31de8c23d49a278414cf1afef7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/b646b8810df12c31de8c23d49a278414cf1afef7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java?ref=b646b8810df12c31de8c23d49a278414cf1afef7","patch":"@@ -200,7 +200,8 @@ private void setMappedByIdColumns() {\n             FieldMapping fm = (FieldMapping) pks[i];\n             ValueMappingImpl val = (ValueMappingImpl) field.getValue();\n             ValueMappingInfo info = val.getValueInfo();\n-            info.setColumns(getMappedByIdColumns(fm));\n+            if (info.getColumns().size() == 0) \n+                info.setColumns(getMappedByIdColumns(fm));\n         }\n     }\n "},{"sha":"959b2894d744c254aa4eb45e9cb8cf6275da60a9","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java","status":"modified","additions":15,"deletions":0,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/b646b8810df12c31de8c23d49a278414cf1afef7/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java","raw_url":"https://github.com/apache/openjpa/raw/b646b8810df12c31de8c23d49a278414cf1afef7/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java?ref=b646b8810df12c31de8c23d49a278414cf1afef7","patch":"@@ -1689,6 +1689,21 @@ private void parseJoinColumns(FieldMapping fm, MappingInfo info,\n         setColumns(fm, info, cols, unique);\n         if (secondary != null)\n             fm.getMappingInfo().setTableName(secondary);\n+        String mappedByIdValue = fm.getMappedByIdValue();\n+        if (mappedByIdValue != null) {\n+            FieldMapping[] pks = fm.getDefiningMapping().getPrimaryKeyFieldMappings();\n+            pks[0].setMapsIdCols(true);\n+            if (mappedByIdValue.length() == 0) { \n+                pks[0].getValueInfo().setMapsIdColumns(cols);\n+            } else { \n+                ClassMapping embeddedMeta = (ClassMapping)pks[0].getValue().getEmbeddedMetaData();\n+                if (embeddedMeta != null) {\n+                    FieldMapping fmd = embeddedMeta.getFieldMapping(mappedByIdValue);\n+                    if (fmd != null)\n+                        fmd.getValueInfo().setMapsIdColumns(cols);\n+                }\n+            }\n+        }\n     }\n \n     /**"},{"sha":"7337a05eea262a484982721ad20c9809187d36a9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Book1.java","status":"modified","additions":10,"deletions":1,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/b646b8810df12c31de8c23d49a278414cf1afef7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Book1.java","raw_url":"https://github.com/apache/openjpa/raw/b646b8810df12c31de8c23d49a278414cf1afef7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Book1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Book1.java?ref=b646b8810df12c31de8c23d49a278414cf1afef7","patch":"@@ -22,13 +22,17 @@\n import java.util.HashSet;\n import java.util.Set;\n \n+import javax.persistence.AttributeOverride;\n+import javax.persistence.AttributeOverrides;\n import javax.persistence.CascadeType;\n import javax.persistence.Column;\n import javax.persistence.EmbeddedId;\n import javax.persistence.Entity;\n+import javax.persistence.JoinColumn;\n import javax.persistence.ManyToOne;\n import javax.persistence.MapsId;\n import javax.persistence.OneToMany;\n+import javax.persistence.Table;\n \n import org.apache.openjpa.persistence.jdbc.VersionColumn;\n \n@@ -44,17 +48,22 @@\n  *\n  */\n @Entity\n+@Table(name=\"DI_BOOK1\")\n @VersionColumn\n public class Book1 implements Serializable {\n     @EmbeddedId\n+    @AttributeOverrides({\n+        @AttributeOverride(name=\"name\", column=@Column(name=\"BOOK_NAME\")),\n+        @AttributeOverride(name=\"library\", column=@Column(name=\"LIBRARY_NAME\"))\n+    })\n     private BookId1 bid;\n     \n     @OneToMany(cascade = CascadeType.ALL, mappedBy = \"book\")\n     private Set<Page1> pages = new HashSet<Page1>();\n     \n     @MapsId(\"library\")\n-    @Column(nullable = false)\n     @ManyToOne\n+    @JoinColumn(name=\"LIBRARY_NAME\", referencedColumnName=\"LIBRARY_NAME\")\n     private Library1 library;\n     \n     private String author;"},{"sha":"3e9fbe1e08f7d290cc7c6afa69165082f8abee9c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Library1.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/b646b8810df12c31de8c23d49a278414cf1afef7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Library1.java","raw_url":"https://github.com/apache/openjpa/raw/b646b8810df12c31de8c23d49a278414cf1afef7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Library1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Library1.java?ref=b646b8810df12c31de8c23d49a278414cf1afef7","patch":"@@ -26,6 +26,7 @@\n import javax.persistence.Entity;\n import javax.persistence.Id;\n import javax.persistence.OneToMany;\n+import javax.persistence.Table;\n \n import org.apache.openjpa.persistence.jdbc.VersionColumn;\n \n@@ -41,6 +42,7 @@\n  *\n  */\n @Entity\n+@Table(name=\"DI_LIBRARY1\")\n @VersionColumn\n public class Library1 implements Serializable {\n     @Id"},{"sha":"64948307a634b45512190b6b996f5788cff2a2fa","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Line1.java","status":"added","additions":82,"deletions":0,"changes":82,"blob_url":"https://github.com/apache/openjpa/blob/b646b8810df12c31de8c23d49a278414cf1afef7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Line1.java","raw_url":"https://github.com/apache/openjpa/raw/b646b8810df12c31de8c23d49a278414cf1afef7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Line1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Line1.java?ref=b646b8810df12c31de8c23d49a278414cf1afef7","patch":"@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.enhance.identity;\n+\n+import java.io.Serializable;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import javax.persistence.AttributeOverride;\n+import javax.persistence.CascadeType;\n+import javax.persistence.Column;\n+import javax.persistence.EmbeddedId;\n+import javax.persistence.Entity;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.JoinColumns;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.MapsId;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Table;\n+\n+import org.apache.openjpa.persistence.jdbc.VersionColumn;\n+\n+/**\n+ * Entity used to test compound primary keys using entity as relationship to \n+ * more than one level.\n+ * \n+ * Test case and domain classes were originally part of the reported issue\n+ * <A href=\"https://issues.apache.org/jira/browse/OPENJPA-207\">OPENJPA-207</A>\n+ *  \n+ * @author Jeffrey Blattman\n+ * @author Pinaki Poddar\n+ *\n+ */\n+@Entity\n+@Table(name=\"DI_LINE1\")\n+@VersionColumn\n+public class Line1 implements Serializable {\n+    @EmbeddedId\n+    @AttributeOverride(name=\"lineNum\", column=@Column(name=\"LINE_NUM\"))\n+    private LineId1 lid;\n+\n+    @MapsId(\"page\")\n+    @ManyToOne\n+    @JoinColumns({\n+        @JoinColumn(name=\"LIBRARY_NAME\", referencedColumnName=\"LIBRARY_NAME\"),\n+        @JoinColumn(name=\"BOOK_NAME\", referencedColumnName=\"BOOK_NAME\"),    \n+        @JoinColumn(name=\"PAGE_NUM\", referencedColumnName=\"PAGE_NUM\")    \n+    })\n+    private Page1 page;\n+\n+    public LineId1 getLid() {\n+        return lid;\n+    }\n+\n+    public void setLid(LineId1 lid) {\n+        this.lid = lid;\n+    }\n+\n+    public Page1 getPage() {\n+        return page;\n+    }\n+\n+    public void setPage(Page1 page) {\n+        this.page = page;\n+    }    \n+}"},{"sha":"b6a625305f44481bded72dab168145c51247edee","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/LineId1.java","status":"added","additions":95,"deletions":0,"changes":95,"blob_url":"https://github.com/apache/openjpa/blob/b646b8810df12c31de8c23d49a278414cf1afef7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/LineId1.java","raw_url":"https://github.com/apache/openjpa/raw/b646b8810df12c31de8c23d49a278414cf1afef7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/LineId1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/LineId1.java?ref=b646b8810df12c31de8c23d49a278414cf1afef7","patch":"@@ -0,0 +1,95 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.enhance.identity;\n+\n+import java.io.Serializable;\n+\n+import javax.persistence.AttributeOverride;\n+import javax.persistence.AttributeOverrides;\n+import javax.persistence.Column;\n+import javax.persistence.Embeddable;\n+import javax.persistence.Embedded;\n+\n+\n+/**\n+ * Entity identity used to test compound primary keys using entity as \n+ * relationship to more than one level.\n+ * \n+ * Test case and domain classes were originally part of the reported issue\n+ * <A href=\"https://issues.apache.org/jira/browse/OPENJPA-207\">OPENJPA-207</A>\n+ *  \n+ * @author Jeffrey Blattman\n+ * @author Pinaki Poddar\n+ *\n+ */\n+\n+@Embeddable\n+public final class LineId1 implements Serializable {\n+    @Column(name=\"LINE_NUM\")\n+    private int lineNum;\n+\n+    @Embedded\n+    @AttributeOverride(name=\"number\", column=@Column(name=\"PAGE_NUM\"))\n+    private PageId1 page;\n+\n+    public LineId1() {}\n+    \n+    public LineId1(int lineNum, PageId1 page) {\n+        this.lineNum = lineNum;\n+        this.page = page;\n+    }\n+    \n+    public int getLineNum() {\n+        return lineNum;\n+    }\n+\n+    public void setLineNum(int lineNum) {\n+        this.lineNum = lineNum;\n+    }\n+    \n+    public boolean equals(Object o) {\n+        if (!(o instanceof LineId1)) {\n+            return false;\n+        }\n+        \n+        LineId1 other = (LineId1)o;\n+        \n+        if (!(getLineNum() == other.getLineNum())) {\n+            return false;\n+        }\n+      \n+        if (!getPage().equals(other.getPage())) {\n+            return false;\n+        }\n+\n+        return true;\n+    }\n+    \n+    public int hashCode() {\n+        return lineNum * (page != null ? getPage().hashCode() : 31);\n+    }\n+    \n+    public PageId1 getPage() {\n+        return page;\n+    }\n+\n+    public void setPage(PageId1 page) {\n+        this.page = page;\n+    }\n+}"},{"sha":"01e6c957f1a395a89ba9ce8b247273fa45c71249","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Page1.java","status":"modified","additions":32,"deletions":6,"changes":38,"blob_url":"https://github.com/apache/openjpa/blob/b646b8810df12c31de8c23d49a278414cf1afef7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Page1.java","raw_url":"https://github.com/apache/openjpa/raw/b646b8810df12c31de8c23d49a278414cf1afef7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Page1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Page1.java?ref=b646b8810df12c31de8c23d49a278414cf1afef7","patch":"@@ -19,14 +19,20 @@\n package org.apache.openjpa.persistence.enhance.identity;\n \n import java.io.Serializable;\n+import java.util.HashSet;\n+import java.util.Set;\n \n+import javax.persistence.AttributeOverride;\n+import javax.persistence.CascadeType;\n import javax.persistence.Column;\n import javax.persistence.EmbeddedId;\n import javax.persistence.Entity;\n import javax.persistence.JoinColumn;\n import javax.persistence.JoinColumns;\n import javax.persistence.ManyToOne;\n import javax.persistence.MapsId;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Table;\n \n import org.apache.openjpa.persistence.jdbc.VersionColumn;\n \n@@ -42,22 +48,24 @@\n  *\n  */\n @Entity\n-\n+@Table(name=\"DI_PAGE1\")\n @VersionColumn\n public class Page1 implements Serializable {\n     @EmbeddedId\n+    @AttributeOverride(name=\"number\", column=@Column(name=\"PAGE_NUM\"))\n     private PageId1 pid;\n \n     @MapsId(\"book\")\n-    @Column(nullable = false)\n     @ManyToOne\n     @JoinColumns({\n-        @JoinColumn(name=\"BOOK_LIBRARY_LIBRARY_NAME\",\n-                referencedColumnName=\"LIBRARY_LIBRARY_NAME\"),\n-        @JoinColumn(name=\"BOOK_BOOK_NAME\", referencedColumnName=\"BOOK_NAME\")    \n+        @JoinColumn(name=\"LIBRARY_NAME\", referencedColumnName=\"LIBRARY_NAME\"),\n+        @JoinColumn(name=\"BOOK_NAME\", referencedColumnName=\"BOOK_NAME\")    \n     })\n     private Book1 book;\n-    \n+\n+    @OneToMany(cascade = CascadeType.ALL, mappedBy = \"page\")\n+    private Set<Line1> lines = new HashSet<Line1>();\n+        \n     public PageId1 getPid() {\n         return pid;\n     }\n@@ -73,4 +81,22 @@ public Book1 getBook() {\n     public void setBook(Book1 book) {\n         this.book = book;\n     }    \n+\n+    public Set<Line1> getLines() {\n+        return lines;\n+    }\n+    \n+    public Line1 getLine(LineId1 lid) {\n+        for (Line1 l: lines) {\n+            if (l.getLid().equals(lid)) {\n+                return l;\n+            }\n+        }\n+        return null;\n+    }\n+    \n+    public void addLine(Line1 l) {\n+        l.setPage(this);\n+        lines.add(l);\n+    }\n }"},{"sha":"c110e27aa90a392d00dbb1d7647495e1c1c86155","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/PageId1.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/b646b8810df12c31de8c23d49a278414cf1afef7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/PageId1.java","raw_url":"https://github.com/apache/openjpa/raw/b646b8810df12c31de8c23d49a278414cf1afef7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/PageId1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/PageId1.java?ref=b646b8810df12c31de8c23d49a278414cf1afef7","patch":"@@ -20,6 +20,9 @@\n \n import java.io.Serializable;\n \n+import javax.persistence.AttributeOverride;\n+import javax.persistence.AttributeOverrides;\n+import javax.persistence.Column;\n import javax.persistence.Embeddable;\n import javax.persistence.Embedded;\n \n@@ -39,7 +42,12 @@\n @Embeddable\n public final class PageId1 implements Serializable {\n     private int number;\n+\n     @Embedded\n+    @AttributeOverrides({\n+        @AttributeOverride(name=\"name\", column=@Column(name=\"BOOK_NAME\")),\n+        @AttributeOverride(name=\"library\", column=@Column(name=\"LIBRARY_NAME\"))\n+    })\n     private BookId1 book;\n \n     public PageId1() {}"},{"sha":"ccb7e128e658cef23e72239c214e71d1cdd40e68","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/TestMultipleLevelDerivedIdentity1.java","status":"modified","additions":44,"deletions":4,"changes":48,"blob_url":"https://github.com/apache/openjpa/blob/b646b8810df12c31de8c23d49a278414cf1afef7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/TestMultipleLevelDerivedIdentity1.java","raw_url":"https://github.com/apache/openjpa/raw/b646b8810df12c31de8c23d49a278414cf1afef7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/TestMultipleLevelDerivedIdentity1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/TestMultipleLevelDerivedIdentity1.java?ref=b646b8810df12c31de8c23d49a278414cf1afef7","patch":"@@ -18,11 +18,13 @@\n  */\n package org.apache.openjpa.persistence.enhance.identity;\n \n+import java.util.Arrays;\n import java.util.List;\n \n import javax.persistence.EntityManager;\n \n-import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+import org.apache.openjpa.persistence.jdbc.SQLSniffer;\n+import org.apache.openjpa.persistence.test.SQLListenerTestCase;\n \n \n /**\n@@ -32,22 +34,25 @@\n  * \n  */\n @SuppressWarnings(\"unchecked\")\n-public class TestMultipleLevelDerivedIdentity1 extends SingleEMFTestCase {\n+public class TestMultipleLevelDerivedIdentity1 extends SQLListenerTestCase {\n \tprivate static String LIBRARY_NAME = \"LIB\";\n \tprivate static String BOOK_NAME    = \"foo\";\n \tprivate static int    NUM_PAGES    = 3;\n+\tprivate static int    NUM_LINES    = 20;\n     public void setUp() throws Exception {\n-        super.setUp(CLEAR_TABLES, Library1.class, Book1.class, Page1.class,\n-            BookId1.class, PageId1.class,\n+        super.setUp(DROP_TABLES, Library1.class, Book1.class, Page1.class,\n+            BookId1.class, PageId1.class, Line1.class, LineId1.class,\n             \"openjpa.RuntimeUnenhancedClasses\", \"unsupported\");\n         create();\n     }\n     \n \tpublic void testPersist() {\n+\t    sql.clear();\n \t\tcreate();\n \t}\n \n \tpublic void testQueryRootLevel() {\n+\t    sql.clear();\n \t\tEntityManager em = emf.createEntityManager();\n \t\tList<Library1> list = em.createQuery(\"SELECT p FROM Library1 p\")\n \t\t\t\t\t\t\t   .getResultList();\n@@ -62,6 +67,7 @@ public void testQueryRootLevel() {\n \t}\n \t\n \tpublic void testQueryIntermediateLevel() {\n+\t    sql.clear();\n \t\tEntityManager em = emf.createEntityManager();\n \t\tList<Book1> list = em.createQuery(\"SELECT p FROM Book1 p\")\n \t\t\t\t\t\t\t   .getResultList();\n@@ -80,6 +86,7 @@ public void testQueryIntermediateLevel() {\n \t}\n \t\n \tpublic void testQueryLeafLevel() {\n+\t    sql.clear();\n \t\tEntityManager em = emf.createEntityManager();\n \t\tList<Page1> list = em.createQuery(\"SELECT p FROM Page1 p\")\n \t\t\t\t\t\t\t   .getResultList();\n@@ -95,6 +102,7 @@ public void testQueryLeafLevel() {\n \t}\n \n \tpublic void testFindRootNode() {\n+\t    sql.clear();\n \t\tEntityManager em = emf.createEntityManager();\n \t\tLibrary1 lib = em.find(Library1.class, LIBRARY_NAME);\n \t\tassertNotNull(lib);\n@@ -106,6 +114,7 @@ public void testFindRootNode() {\n \t}\n \t\n \tpublic void testFindIntermediateNode() {\n+\t    sql.clear();\n \t\tEntityManager em = emf.createEntityManager();\n \t\t\n \t\tBookId1 bookId = new BookId1();\n@@ -116,6 +125,7 @@ public void testFindIntermediateNode() {\n \t}\n \t\n \tpublic void testFindLeafNode() {\n+\t    sql.clear();\n \t\tEntityManager em = emf.createEntityManager();\n \t\t\n \t\tBookId1 bookId = new BookId1();\n@@ -129,6 +139,7 @@ public void testFindLeafNode() {\n \t}\n \t\n \tpublic void testUpdate() {\n+\t    sql.clear();\n \t\tEntityManager em = emf.createEntityManager();\n \t\tem.getTransaction().begin();\n \t\tBookId1 bookId = new BookId1();\n@@ -141,6 +152,7 @@ public void testUpdate() {\n \t}\n \t\n \tpublic void testDeleteRoot() {\n+\t    sql.clear();\n \t\tEntityManager em = emf.createEntityManager();\n \t\tem.getTransaction().begin();\n \t\tLibrary1 lib = em.find(Library1.class, LIBRARY_NAME);\n@@ -153,6 +165,7 @@ public void testDeleteRoot() {\n \t}\n \t\n \tpublic void testDeleteLeafObtainedByQuery() {\n+\t    sql.clear();\n \t\tEntityManager em = emf.createEntityManager();\n \t\tem.getTransaction().begin();\n         Page1 page = (Page1)em.createQuery(\n@@ -168,6 +181,7 @@ public void testDeleteLeafObtainedByQuery() {\n \t}\n \t\n \tpublic void testDeleteLeafObtainedByFind() {\n+\t    sql.clear();\n \t\tEntityManager em = emf.createEntityManager();\n \t\tem.getTransaction().begin();\n \t\tBookId1 bookId = new BookId1();\n@@ -212,10 +226,36 @@ public void create() {\n \t\t\tPageId1 pid = new PageId1(i, bid);\n \t\t\tpage.setPid(pid);\n \t\t\tbook.addPage(page);\n+\t\t\tfor (int j = 1; j <= NUM_LINES; j++) {\n+\t\t\t    Line1 line = new Line1();\n+\t\t\t    LineId1 lid = new LineId1(j, pid);\n+\t\t\t    line.setLid(lid);\n+\t\t\t    page.addLine(line);\n+\t\t\t    \n+\t\t\t}\n \t\t}\n \t\tem.persist(lib);\n \t\tem.getTransaction().commit();\n \n \t\tem.clear();\n+        assertSQLFragnments(sql, \"CREATE TABLE DI_LIBRARY1\", \"LIBRARY_NAME\");\n+        assertSQLFragnments(sql, \"CREATE TABLE DI_BOOK1\", \"LIBRARY_NAME\", \"BOOK_NAME\");\n+        assertSQLFragnments(sql, \"CREATE TABLE DI_PAGE1\", \"LIBRARY_NAME\", \"BOOK_NAME\", \"PAGE_NUM\");\n+        assertSQLFragnments(sql, \"CREATE TABLE DI_LINE1\", \"LIBRARY_NAME\", \"BOOK_NAME\", \"PAGE_NUM\", \"LINE_NUM\");\n \t}\n+\n+    void assertSQLFragnments(List<String> list, String... keys) {\n+        if (SQLSniffer.matches(list, keys))\n+            return;\n+        fail(\"None of the following \" + sql.size() + \" SQL \\r\\n\" + \n+                toString(sql) + \"\\r\\n contains all keys \\r\\n\"\n+                + toString(Arrays.asList(keys)));\n+    }\n+\n+    public String toString(List<String> list) {\n+        StringBuffer buf = new StringBuffer();\n+        for (String s : list)\n+            buf.append(s).append(\"\\r\\n\");\n+        return buf.toString();\n+    }\n }"}]}

