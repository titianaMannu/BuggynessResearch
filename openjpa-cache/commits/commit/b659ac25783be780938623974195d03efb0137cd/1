{"sha":"b659ac25783be780938623974195d03efb0137cd","node_id":"MDY6Q29tbWl0MjA2MzY0OmI2NTlhYzI1NzgzYmU3ODA5Mzg2MjM5NzQxOTVkMDNlZmIwMTM3Y2Q=","commit":{"author":{"name":"Heath Thomann","email":"hthomann@apache.org","date":"2014-11-03T23:48:24Z"},"committer":{"name":"Heath Thomann","email":"hthomann@apache.org","date":"2014-11-03T23:48:24Z"},"message":"OPENJPA-2534: A boolean is not converted correct when using the hint 'UseLiteralInSQL' - applied Rick's patch to trunk.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1636474 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7e3fde95b49e6fb0d4f5532b51dd1e6ab527cf8c","url":"https://api.github.com/repos/apache/openjpa/git/trees/7e3fde95b49e6fb0d4f5532b51dd1e6ab527cf8c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b659ac25783be780938623974195d03efb0137cd","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b659ac25783be780938623974195d03efb0137cd","html_url":"https://github.com/apache/openjpa/commit/b659ac25783be780938623974195d03efb0137cd","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b659ac25783be780938623974195d03efb0137cd/comments","author":null,"committer":null,"parents":[{"sha":"4540f822162023a2bed7d816cd8c0f66d3ab75c7","url":"https://api.github.com/repos/apache/openjpa/commits/4540f822162023a2bed7d816cd8c0f66d3ab75c7","html_url":"https://github.com/apache/openjpa/commit/4540f822162023a2bed7d816cd8c0f66d3ab75c7"}],"stats":{"total":58,"additions":58,"deletions":0},"files":[{"sha":"bb1b87545bb60b5ccd8c4adf5ebed5dd8f6853d2","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLBuffer.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/b659ac25783be780938623974195d03efb0137cd/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLBuffer.java","raw_url":"https://github.com/apache/openjpa/raw/b659ac25783be780938623974195d03efb0137cd/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLBuffer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLBuffer.java?ref=b659ac25783be780938623974195d03efb0137cd","patch":"@@ -359,12 +359,17 @@ else if (o instanceof Raw)\n             } else {\n                 if (type == String.class) {\n                     _sql.append(\"'\" + o.toString().replace(\"'\", \"''\") + \"'\");\n+\n                 } else if ( type == Character.class ) {\n                     if (_dict.storeCharsAsNumbers) {\n                         _sql.append(Integer.toString(((Character)o).charValue()));\n                     } else {\n                         _sql.append(\"'\" + o.toString().replace(\"'\", \"''\") + \"'\");\n                     }\n+                } else if (type == Boolean.class) {\n+                    Boolean b = (Boolean) o;\n+                    // We store B(b)ooleans as ints. Convert \n+                    _sql.append((b.booleanValue() ? \"1\" : \"0\"));\n                 } else {\n                     _sql.append(o.toString());\n                 }"},{"sha":"d8efd070d500d3b02a6db9315b61370a961c9787","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/literals/TestLiteralInSQL.java","status":"added","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/apache/openjpa/blob/b659ac25783be780938623974195d03efb0137cd/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/literals/TestLiteralInSQL.java","raw_url":"https://github.com/apache/openjpa/raw/b659ac25783be780938623974195d03efb0137cd/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/literals/TestLiteralInSQL.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/literals/TestLiteralInSQL.java?ref=b659ac25783be780938623974195d03efb0137cd","patch":"@@ -0,0 +1,53 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jpql.literals;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.Query;\r\n+\r\n+import org.apache.openjpa.persistence.simple.AllFieldTypes;\r\n+import org.apache.openjpa.persistence.test.SQLListenerTestCase;\r\n+\r\n+public class TestLiteralInSQL extends SQLListenerTestCase {\r\n+    public void setUp() {\r\n+        setUp(AllFieldTypes.class, \"openjpa.jdbc.QuerySQLCache\", \"false\");\r\n+    }\r\n+\r\n+    public void testTrueInSQL() {\r\n+        EntityManager em = emf.createEntityManager();\r\n+\r\n+        em = emf.createEntityManager();\r\n+\r\n+        resetSQL();\r\n+        Query q = em.createQuery(\"SELECT f FROM AllFieldTypes f WHERE f.booleanField=true\");\r\n+        q.setHint(\"openjpa.hint.UseLiteralInSQL\", \"false\");\r\n+        q.getResultList();\r\n+        // The literal should be converted to a parameter marker since UseLiteralInSQL is false.\r\n+        assertContainsSQL(\"booleanField = ?\");\r\n+\r\n+        resetSQL();\r\n+        q = em.createQuery(\"SELECT f FROM AllFieldTypes f WHERE f.booleanField=true\");\r\n+        q.setHint(\"openjpa.hint.UseLiteralInSQL\", \"true\");\r\n+        q.getResultList();\r\n+        // The literal should not be converted to a parameter marker since UseLiteralInSQL is true.\r\n+        // However, the literal should be converted to a 1 because we store boolean as int/smallint.\r\n+        assertContainsSQL(\"booleanField = 1\");\r\n+\r\n+    }\r\n+}\r"}]}

