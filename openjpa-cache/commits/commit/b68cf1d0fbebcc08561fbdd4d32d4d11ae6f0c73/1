{"sha":"b68cf1d0fbebcc08561fbdd4d32d4d11ae6f0c73","node_id":"MDY6Q29tbWl0MjA2MzY0OmI2OGNmMWQwZmJlYmNjMDg1NjFmYmRkNGQzMmQ0ZDExYWU2ZjBjNzM=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2012-03-10T21:26:31Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2012-03-10T21:26:31Z"},"message":"OPENJPA-2153 Mark DBCPDriverDataSource non-abstract so that DBCPDriverDataSource.class.newinstance is used to instantiate for property configuration.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1299276 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"40fbbf7a17bfc08639de83d9a3f3767d844b6407","url":"https://api.github.com/repos/apache/openjpa/git/trees/40fbbf7a17bfc08639de83d9a3f3767d844b6407"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b68cf1d0fbebcc08561fbdd4d32d4d11ae6f0c73","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b68cf1d0fbebcc08561fbdd4d32d4d11ae6f0c73","html_url":"https://github.com/apache/openjpa/commit/b68cf1d0fbebcc08561fbdd4d32d4d11ae6f0c73","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b68cf1d0fbebcc08561fbdd4d32d4d11ae6f0c73/comments","author":null,"committer":null,"parents":[{"sha":"cc4f6264ba88810930ee5b8b02df9dfeb9c1ecf9","url":"https://api.github.com/repos/apache/openjpa/commits/cc4f6264ba88810930ee5b8b02df9dfeb9c1ecf9","html_url":"https://github.com/apache/openjpa/commit/cc4f6264ba88810930ee5b8b02df9dfeb9c1ecf9"}],"stats":{"total":365,"additions":358,"deletions":7},"files":[{"sha":"6bf418ee879ca880a30ef278aa2c991bc1e6364a","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/DBCPDriverDataSource.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/b68cf1d0fbebcc08561fbdd4d32d4d11ae6f0c73/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/DBCPDriverDataSource.java","raw_url":"https://github.com/apache/openjpa/raw/b68cf1d0fbebcc08561fbdd4d32d4d11ae6f0c73/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/DBCPDriverDataSource.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/DBCPDriverDataSource.java?ref=b68cf1d0fbebcc08561fbdd4d32d4d11ae6f0c73","patch":"@@ -37,7 +37,7 @@\n  * as it WILL NOT fall back to non-DBCP mode if they are missing. For automatic\n  * usage of Commons DBCP when available, use AutoDriverDataSource instead.\n  */\n-public abstract class DBCPDriverDataSource\n+public class DBCPDriverDataSource\n extends SimpleDriverDataSource implements Configurable, Closeable {\n \n     private static String DBCPPACKAGENAME = \"org.apache.commons.dbcp\";"},{"sha":"37d74f4f82b13fbd7155011ff6b56b628e38b61a","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SimpleDriverDataSource.java","status":"modified","additions":5,"deletions":6,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/b68cf1d0fbebcc08561fbdd4d32d4d11ae6f0c73/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SimpleDriverDataSource.java","raw_url":"https://github.com/apache/openjpa/raw/b68cf1d0fbebcc08561fbdd4d32d4d11ae6f0c73/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SimpleDriverDataSource.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SimpleDriverDataSource.java?ref=b68cf1d0fbebcc08561fbdd4d32d4d11ae6f0c73","patch":"@@ -31,6 +31,7 @@\n import java.util.logging.Logger;\n \n import org.apache.openjpa.jdbc.sql.DBDictionary;\n+import org.apache.openjpa.lib.jdbc.ConnectionDecorator;\n import org.apache.openjpa.lib.jdbc.DelegatingDataSource;\n import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n@@ -146,8 +147,7 @@ public Properties getConnectionFactoryProperties() {\n         return _connectionFactoryProperties;\n     }\n \n-    @SuppressWarnings(\"unchecked\")\n-    public List createConnectionDecorators() {\n+    public List<ConnectionDecorator> createConnectionDecorators() {\n         return null;\n     }\n \n@@ -206,8 +206,7 @@ protected Driver getSimpleDriver() {\n     \n \n     // java.sql.Wrapper implementation (JDBC 4)\n-    @SuppressWarnings(\"unchecked\")\n-    public boolean isWrapperFor(Class iface) {\n+    public boolean isWrapperFor(Class<?> iface) {\n         return iface.isAssignableFrom(SimpleDriverDataSource.class);\n     }\n \n@@ -218,9 +217,9 @@ public Object unwrap(Class iface) {\n         else\n             return null;\n     }\n-    \n+\n     // Java 7 methods follow\n-    \n+\n     public Logger getParentLogger() throws SQLFeatureNotSupportedException{\n     \tthrow new SQLFeatureNotSupportedException();\n     }"},{"sha":"77b7c54c025ab5f0b937584d50c44d7d6ebc7e3d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestNewJavaObjectQuery.java","status":"added","additions":75,"deletions":0,"changes":75,"blob_url":"https://github.com/apache/openjpa/blob/b68cf1d0fbebcc08561fbdd4d32d4d11ae6f0c73/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestNewJavaObjectQuery.java","raw_url":"https://github.com/apache/openjpa/raw/b68cf1d0fbebcc08561fbdd4d32d4d11ae6f0c73/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestNewJavaObjectQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestNewJavaObjectQuery.java?ref=b68cf1d0fbebcc08561fbdd4d32d4d11ae6f0c73","patch":"@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.query;\n+\n+import java.util.List;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.jdbc.query.domain.DtaSrc;\n+import org.apache.openjpa.persistence.jdbc.query.domain.DtaSrcField;\n+import org.apache.openjpa.persistence.jdbc.query.domain.Game;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+/**\n+ * Tests \"openjpa.jdbc.DriverDataSource=dbcp\" option.\n+ *  \n+ * Further details can be found in\n+ * <A HREF=\"https://issues.apache.org/jira/browse/OPENJPA-2153\">OPENJPA-2153</A>\n+ * \n+ */\n+public class TestNewJavaObjectQuery extends SingleEMFTestCase {   \n+    public void setUp() {\n+        super.setUp(CLEAR_TABLES, Game.class,\n+                DtaSrc.class, DtaSrcField.class, \n+                \"openjpa.jdbc.DriverDataSource\", \"dbcp\");\n+    }\n+\n+//\tvoid createData() throws Exception {\n+//\t\tEntityManager em = emf.createEntityManager();\n+//\t\tem.getTransaction().begin();\n+//        Class[] classes = { Game.class, IndoorGame.class, Scrabble.class,\n+//\t\t\t\tChess.class };\n+//\t\tfor (Class cls : classes) {\n+//\t\t\tfor (int i = 1; i <= 4; i++) {\n+//\t\t\t\tGame p = (Game) cls.newInstance();\n+//\t\t\t\tp.setName(cls.getSimpleName() + \"-\" + i);\n+//\t\t\t\tem.persist(p);\n+//\t\t\t}\n+//\t\t}\n+//\t\tem.getTransaction().commit();\n+//\t}\n+\n+    public void testNewJavaObjectQueryResultList() {\n+        String jpql = \"SELECT new org.apache.openjpa.persistence.jdbc.query.featureSelection.GameBean(g) FROM Game g\";\n+        EntityManager em = emf.createEntityManager();\n+       \n+        List<?> names = em.createQuery(jpql).getResultList();\n+        assertNotNull(names);\n+        assertEquals(0, names.size());\n+    }\n+\n+    public void testNewJavaObjectNamedQueryResultList() {\n+        EntityManager em = emf.createEntityManager();\n+\n+        List<?> names = em.createNamedQuery(\"getDataSourceFieldById\").getResultList();\n+        assertNotNull(names);\n+        assertEquals(0, names.size());\n+    }\n+}"},{"sha":"c442e954b802e449f71dc2464f3d1351b3ddf1be","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/DtaSrc.java","status":"added","additions":108,"deletions":0,"changes":108,"blob_url":"https://github.com/apache/openjpa/blob/b68cf1d0fbebcc08561fbdd4d32d4d11ae6f0c73/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/DtaSrc.java","raw_url":"https://github.com/apache/openjpa/raw/b68cf1d0fbebcc08561fbdd4d32d4d11ae6f0c73/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/DtaSrc.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/DtaSrc.java?ref=b68cf1d0fbebcc08561fbdd4d32d4d11ae6f0c73","patch":"@@ -0,0 +1,108 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.query.domain;\n+\n+import java.io.Serializable;\n+import javax.persistence.*;\n+\n+import org.apache.openjpa.persistence.Generator;\n+\n+import java.util.List;\n+\n+/**\n+ * The persistent class for the DtaSrc database table.\n+ * \n+ */\n+@Entity\n+public class DtaSrc implements Serializable {\n+\tprivate static final long serialVersionUID = 1L;\n+\n+\t@Id\n+\t@GeneratedValue(generator=Generator.UUID_STRING)\n+\tprivate String id;\n+\n+\t@Column(length=100, nullable=false)\n+\tprivate String name;\n+\n+\t@OneToMany(mappedBy=\"dataSource\", cascade=CascadeType.ALL)\n+\tprivate List<DtaSrcField> fields;\n+\n+    public DtaSrc() {\n+    }\n+\n+\tpublic String getId() {\n+\t\treturn this.id;\n+\t}\n+\n+\tpublic void setId(String id) {\n+\t\tthis.id = id;\n+\t}\n+\n+\tpublic String getName() {\n+\t\treturn this.name;\n+\t}\n+\n+\tpublic void setName(String name) {\n+\t\tthis.name = name;\n+\t}\n+\n+\t/* (non-Javadoc)\n+\t * @see java.lang.Object#hashCode()\n+\t */\n+\t@Override\n+\tpublic int hashCode() {\n+\t\tfinal int prime = 31;\n+\t\tint result = 1;\n+\t\tresult = prime * result + ((id == null)? 0 : id.hashCode());\n+\t\treturn result;\n+\t}\n+\n+\t/* (non-Javadoc)\n+\t * @see java.lang.Object#equals(java.lang.Object)\n+\t */\n+\t@Override\n+\tpublic boolean equals(Object obj) {\n+\t\tif (this == obj) {\n+\t\t\treturn true;\n+\t\t}\n+\t\tif (obj == null) {\n+\t\t\treturn false;\n+\t\t}\n+\t\tif (!(obj instanceof DtaSrc)) {\n+\t\t\treturn false;\n+\t\t}\n+\t\tDtaSrc other = (DtaSrc) obj;\n+\t\tif (id == null) {\n+\t\t\tif (other.id != null) {\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t} else if (!id.equals(other.id)) {\n+\t\t\treturn false;\n+\t\t}\n+\t\treturn true;\n+\t}\n+\n+\tpublic void setFields(List<DtaSrcField> fields) {\n+\t\tthis.fields = fields;\n+\t}\n+\n+\tpublic List<DtaSrcField> getFields() {\n+\t\treturn fields;\n+\t}\n+}"},{"sha":"a30d99812af882df35fb78f698b9476fd98065b8","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/DtaSrcField.java","status":"added","additions":111,"deletions":0,"changes":111,"blob_url":"https://github.com/apache/openjpa/blob/b68cf1d0fbebcc08561fbdd4d32d4d11ae6f0c73/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/DtaSrcField.java","raw_url":"https://github.com/apache/openjpa/raw/b68cf1d0fbebcc08561fbdd4d32d4d11ae6f0c73/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/DtaSrcField.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/DtaSrcField.java?ref=b68cf1d0fbebcc08561fbdd4d32d4d11ae6f0c73","patch":"@@ -0,0 +1,111 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.query.domain;\n+\n+import java.io.Serializable;\n+import javax.persistence.*;\n+\n+import org.apache.openjpa.persistence.Generator;\n+\n+/**\n+ * The persistent class for the DtaSrcField database table.\n+ * \n+ */\n+@Entity\n+@NamedQueries({\n+@NamedQuery(name = \"getDataSourceFieldById\", \n+    query = \"SELECT new org.apache.openjpa.persistence.jdbc.query.domain.DtaSrcFieldBean(d) \" +\n+                \"FROM DtaSrcField d WHERE d.id=:id\")\n+})\n+public class DtaSrcField implements Serializable {\n+\tprivate static final long serialVersionUID = 1L;\n+\n+\t@Id\n+\t@GeneratedValue(generator=Generator.UUID_STRING)\n+\tprivate String id;\n+\n+\t@ManyToOne\n+\t@JoinColumn(name=\"dataSourceId\", referencedColumnName=\"id\")\n+\tprivate DtaSrc dataSource;\n+\n+\t@Column(length=100, nullable=false)\n+\tprivate String name;\n+\n+    public DtaSrcField() {\n+    }\n+\n+\tpublic String getId() {\n+\t\treturn this.id;\n+\t}\n+\n+\tpublic void setId(String id) {\n+\t\tthis.id = id;\n+\t}\n+\n+\tpublic DtaSrc getDatasource() {\n+\t\treturn this.dataSource;\n+\t}\n+\n+\tpublic void setDataSourceId(DtaSrc datasource) {\n+\t\tthis.dataSource = datasource;\n+\t}\n+\n+\tpublic String getName() {\n+\t\treturn this.name;\n+\t}\n+\n+\tpublic void setName(String name) {\n+\t\tthis.name = name;\n+\t}\n+\t/* (non-Javadoc)\n+\t * @see java.lang.Object#hashCode()\n+\t */\n+\t@Override\n+\tpublic int hashCode() {\n+\t\tfinal int prime = 31;\n+\t\tint result = 1;\n+\t\tresult = prime * result + (id == null ? 0 : id.hashCode());\n+\t\treturn result;\n+\t}\n+\n+\t/* (non-Javadoc)\n+\t * @see java.lang.Object#equals(java.lang.Object)\n+\t */\n+\t@Override\n+\tpublic boolean equals(Object obj) {\n+\t\tif (this == obj) {\n+\t\t\treturn true;\n+\t\t}\n+\t\tif (obj == null) {\n+\t\t\treturn false;\n+\t\t}\n+\t\tif (!(obj instanceof DtaSrcField)) {\n+\t\t\treturn false;\n+\t\t}\n+\t\tDtaSrcField other = (DtaSrcField) obj;\n+\t\tif (id == null) {\n+\t\t\tif (other.id != null) {\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t} else if (!id.equals(other.id)) {\n+\t\t\treturn false;\n+\t\t}\n+\t\treturn true;\n+\t}\n+}"},{"sha":"adab30eef04d39243aabb57ec2d82accae4993e1","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/DtaSrcFieldBean.java","status":"added","additions":31,"deletions":0,"changes":31,"blob_url":"https://github.com/apache/openjpa/blob/b68cf1d0fbebcc08561fbdd4d32d4d11ae6f0c73/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/DtaSrcFieldBean.java","raw_url":"https://github.com/apache/openjpa/raw/b68cf1d0fbebcc08561fbdd4d32d4d11ae6f0c73/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/DtaSrcFieldBean.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/DtaSrcFieldBean.java?ref=b68cf1d0fbebcc08561fbdd4d32d4d11ae6f0c73","patch":"@@ -0,0 +1,31 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.query.domain;\n+\n+public class DtaSrcFieldBean {\n+    public DtaSrcField field;\n+\n+    public DtaSrcFieldBean(DtaSrcField field) {\n+        this.field = field;\n+    }\n+\n+    public String getId() {\n+        return field.getId();\n+    }\n+}"},{"sha":"2625ef1d051e4dd2aadf060037c792e654a59481","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/GameBean.java","status":"added","additions":27,"deletions":0,"changes":27,"blob_url":"https://github.com/apache/openjpa/blob/b68cf1d0fbebcc08561fbdd4d32d4d11ae6f0c73/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/GameBean.java","raw_url":"https://github.com/apache/openjpa/raw/b68cf1d0fbebcc08561fbdd4d32d4d11ae6f0c73/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/GameBean.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/GameBean.java?ref=b68cf1d0fbebcc08561fbdd4d32d4d11ae6f0c73","patch":"@@ -0,0 +1,27 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.query.domain;\n+\n+public class GameBean {\n+    public Game game;\n+\n+    public GameBean(Game game) {\n+        this.game = game;\n+    }\n+}"}]}

