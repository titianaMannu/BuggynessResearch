{"sha":"b6af06b64f9126fdcfb5afae95cd05bbf89bc421","node_id":"MDY6Q29tbWl0MjA2MzY0OmI2YWYwNmI2NGY5MTI2ZmRjZmI1YWZhZTk1Y2QwNWJiZjg5YmM0MjE=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-09-20T18:39:00Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-09-20T18:39:00Z"},"message":"OPENJPA-339\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@577863 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6a27f1961a5e8c5f55020cac01f28d029a7bd82f","url":"https://api.github.com/repos/apache/openjpa/git/trees/6a27f1961a5e8c5f55020cac01f28d029a7bd82f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b6af06b64f9126fdcfb5afae95cd05bbf89bc421","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b6af06b64f9126fdcfb5afae95cd05bbf89bc421","html_url":"https://github.com/apache/openjpa/commit/b6af06b64f9126fdcfb5afae95cd05bbf89bc421","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b6af06b64f9126fdcfb5afae95cd05bbf89bc421/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"2a6887d4c0a839e9aeb1d1dd45a8d8ca155fa983","url":"https://api.github.com/repos/apache/openjpa/commits/2a6887d4c0a839e9aeb1d1dd45a8d8ca155fa983","html_url":"https://github.com/apache/openjpa/commit/2a6887d4c0a839e9aeb1d1dd45a8d8ca155fa983"}],"stats":{"total":136,"additions":119,"deletions":17},"files":[{"sha":"316c085f451d4af0c2e5ab597ba214a9a0af35fa","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheScheduler.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/b6af06b64f9126fdcfb5afae95cd05bbf89bc421/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheScheduler.java","raw_url":"https://github.com/apache/openjpa/raw/b6af06b64f9126fdcfb5afae95cd05bbf89bc421/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheScheduler.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheScheduler.java?ref=b6af06b64f9126fdcfb5afae95cd05bbf89bc421","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.openjpa.datacache;\n \n+import java.security.AccessController;\n import java.text.DateFormat;\n import java.text.SimpleDateFormat;\n import java.util.Calendar;\n@@ -28,6 +29,7 @@\n \n import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.lib.log.Log;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.lib.util.concurrent.ConcurrentHashMap;\n import org.apache.openjpa.util.InvalidStateException;\n@@ -97,7 +99,9 @@ public synchronized void scheduleEviction(DataCache cache, String times) {\n         _caches.put(cache, schedule);\n         _stop = false;\n         if (_thread == null) {\n-            _thread = new Thread(this, _loc.get(\"scheduler-name\").getMessage());\n+            _thread = (Thread) AccessController\n+                .doPrivileged(J2DoPrivHelper.newThreadAction(this, _loc.get(\n+                    \"scheduler-name\").getMessage()));\n             _thread.setDaemon(true);\n             _thread.start();\n             if (_log.isTraceEnabled())"},{"sha":"c770456acc9a6f349e0dd73e9fc6834ea845fef6","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractCFMetaDataFactory.java","status":"modified","additions":9,"deletions":2,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/b6af06b64f9126fdcfb5afae95cd05bbf89bc421/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractCFMetaDataFactory.java","raw_url":"https://github.com/apache/openjpa/raw/b6af06b64f9126fdcfb5afae95cd05bbf89bc421/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractCFMetaDataFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractCFMetaDataFactory.java?ref=b6af06b64f9126fdcfb5afae95cd05bbf89bc421","patch":"@@ -19,6 +19,7 @@\n package org.apache.openjpa.meta;\n \n import java.io.File;\n+import java.io.FileNotFoundException;\n import java.io.IOException;\n import java.io.InputStream;\n import java.net.MalformedURLException;\n@@ -656,9 +657,15 @@ private Set parsePersistentTypeNames(ClassLoader loader)\n                     if (log.isTraceEnabled())\n                         log.trace(_loc.get(\"scan-found-names\", clss, file));\n                     names.addAll(Arrays.asList(clss));\n-                    mapPersistentTypeNames(((File) AccessController\n+                    File f = (File) AccessController\n                         .doPrivileged(J2DoPrivHelper\n-                            .getAbsoluteFileAction(file))).toURL(), clss);\n+                            .getAbsoluteFileAction(file));\n+                    try {\n+                        mapPersistentTypeNames(AccessController\n+                            .doPrivileged(J2DoPrivHelper.toURLAction(f)), clss);\n+                    } catch (PrivilegedActionException pae) {\n+                        throw (FileNotFoundException) pae.getException();\n+                    }\n                 }\n             }\n         }"},{"sha":"f8325dfef02cc3e389dcfdb411045f895807601b","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyManagerImpl.java","status":"modified","additions":28,"deletions":10,"changes":38,"blob_url":"https://github.com/apache/openjpa/blob/b6af06b64f9126fdcfb5afae95cd05bbf89bc421/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/b6af06b64f9126fdcfb5afae95cd05bbf89bc421/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyManagerImpl.java?ref=b6af06b64f9126fdcfb5afae95cd05bbf89bc421","patch":"@@ -26,6 +26,7 @@\n import java.lang.reflect.Method;\n import java.lang.reflect.Modifier;\n import java.security.AccessController;\n+import java.security.PrivilegedAction;\n import java.security.PrivilegedActionException;\n import java.sql.Timestamp;\n import java.util.ArrayList;\n@@ -438,7 +439,7 @@ private ProxyCalendar getFactoryProxyCalendar(Class type) {\n      * Return the cached factory proxy for the given bean type.\n      */\n     private ProxyBean getFactoryProxyBean(Object orig) {\n-        Class type = orig.getClass();\n+        final Class type = orig.getClass();\n         if (isUnproxyable(type))\n             return null;\n \n@@ -449,7 +450,12 @@ private ProxyBean getFactoryProxyBean(Object orig) {\n                 ProxyBean.class);\n             Class pcls = loadBuildTimeProxy(type, l);\n             if (pcls == null) {\n-                BCClass bc = generateProxyBeanBytecode(type, true);\n+                BCClass bc = (BCClass) AccessController\n+                    .doPrivileged(new PrivilegedAction() {\n+                        public Object run() {\n+                            return generateProxyBeanBytecode(type, true);\n+                        }\n+                    });\n                 if (bc != null)\n                     pcls = GeneratedClasses.loadBCClass(bc, l);\n             }\n@@ -517,7 +523,8 @@ protected BCClass generateProxyCollectionBytecode(Class type,\n         boolean runtime) {\n         assertNotFinal(type);\n         Project project = new Project(); \n-        BCClass bc = project.loadClass(getProxyClassName(type, runtime));\n+        BCClass bc = (BCClass) AccessController.doPrivileged(J2DoPrivHelper\n+            .loadProjectClassAction(project, getProxyClassName(type, runtime))); \n         bc.setSuperclass(type);\n         bc.declareInterface(ProxyCollection.class);\n  \n@@ -554,7 +561,8 @@ private static void assertNotFinal(Class type) {\n     protected BCClass generateProxyMapBytecode(Class type, boolean runtime) {\n         assertNotFinal(type);\n         Project project = new Project(); \n-        BCClass bc = project.loadClass(getProxyClassName(type, runtime));\n+        BCClass bc = (BCClass) AccessController.doPrivileged(J2DoPrivHelper\n+            .loadProjectClassAction(project, getProxyClassName(type, runtime))); \n         bc.setSuperclass(type);\n         bc.declareInterface(ProxyMap.class);\n  \n@@ -573,7 +581,8 @@ protected BCClass generateProxyMapBytecode(Class type, boolean runtime) {\n     protected BCClass generateProxyDateBytecode(Class type, boolean runtime) {\n         assertNotFinal(type);\n         Project project = new Project(); \n-        BCClass bc = project.loadClass(getProxyClassName(type, runtime));\n+        BCClass bc = (BCClass) AccessController.doPrivileged(J2DoPrivHelper\n+            .loadProjectClassAction(project, getProxyClassName(type, runtime))); \n         bc.setSuperclass(type);\n         bc.declareInterface(ProxyDate.class);\n  \n@@ -592,7 +601,8 @@ protected BCClass generateProxyCalendarBytecode(Class type,\n         boolean runtime) {\n         assertNotFinal(type);\n         Project project = new Project(); \n-        BCClass bc = project.loadClass(getProxyClassName(type, runtime));\n+        BCClass bc = (BCClass) AccessController.doPrivileged(J2DoPrivHelper\n+            .loadProjectClassAction(project, getProxyClassName(type, runtime))); \n         bc.setSuperclass(type);\n         bc.declareInterface(ProxyCalendar.class);\n  \n@@ -626,7 +636,8 @@ protected BCClass generateProxyBeanBytecode(Class type, boolean runtime) {\n         }\n \n         Project project = new Project(); \n-        BCClass bc = project.loadClass(getProxyClassName(type, runtime));\n+        BCClass bc = (BCClass) AccessController.doPrivileged(J2DoPrivHelper\n+            .loadProjectClassAction(project, getProxyClassName(type, runtime))); \n         bc.setSuperclass(type);\n         bc.declareInterface(ProxyBean.class);\n  \n@@ -1596,7 +1607,7 @@ public static void main(String[] args)\n             })); \n         }\n \n-        ProxyManagerImpl mgr = new ProxyManagerImpl();\n+        final ProxyManagerImpl mgr = new ProxyManagerImpl();\n         Class cls;\n         BCClass bc;\n         for (int i = 0; i < types.size(); i++) {\n@@ -1618,8 +1629,15 @@ else if (Date.class.isAssignableFrom(cls))\n                 bc = mgr.generateProxyDateBytecode(cls, false);\n             else if (Calendar.class.isAssignableFrom(cls))\n                 bc = mgr.generateProxyCalendarBytecode(cls, false);\n-            else\n-                bc = mgr.generateProxyBeanBytecode(cls, false);\n+            else {\n+                final Class fCls = cls;\n+                bc = (BCClass) AccessController\n+                    .doPrivileged(new PrivilegedAction() {\n+                        public Object run() {\n+                            return mgr.generateProxyBeanBytecode(fCls, false);\n+                        }\n+                    });\n+            }\n \n             System.out.println(bc.getName());\n             bc.write(new File(dir, bc.getClassName() + \".class\"));"},{"sha":"d63f2365bc5c34c49f90ab3ba1ffbb7e819ecb95","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/FileMetaDataIterator.java","status":"modified","additions":9,"deletions":2,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/b6af06b64f9126fdcfb5afae95cd05bbf89bc421/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/FileMetaDataIterator.java","raw_url":"https://github.com/apache/openjpa/raw/b6af06b64f9126fdcfb5afae95cd05bbf89bc421/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/FileMetaDataIterator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/FileMetaDataIterator.java?ref=b6af06b64f9126fdcfb5afae95cd05bbf89bc421","patch":"@@ -24,6 +24,7 @@\n import java.io.FileNotFoundException;\n import java.io.IOException;\n import java.io.InputStream;\n+import java.net.MalformedURLException;\n import java.security.AccessController;\n import java.security.PrivilegedActionException;\n import java.util.ArrayList;\n@@ -111,8 +112,14 @@ public Object next() throws IOException {\n             throw new NoSuchElementException();\n \n         _file = (File) _itr.next();\n-        return ((File) AccessController.doPrivileged(J2DoPrivHelper\n-            .getAbsoluteFileAction(_file))).toURL();\n+        try {\n+            File f = (File) AccessController.doPrivileged(J2DoPrivHelper\n+                .getAbsoluteFileAction(_file));\n+            return AccessController.doPrivileged(\n+                J2DoPrivHelper.toURLAction(f));\n+        } catch (PrivilegedActionException pae) {\n+            throw (MalformedURLException) pae.getException();\n+        }\n     }\n \n     public InputStream getInputStream() throws IOException {"},{"sha":"f3269e11cc64cedad038fe01c549e182f37800e9","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/J2DoPrivHelper.java","status":"modified","additions":55,"deletions":0,"changes":55,"blob_url":"https://github.com/apache/openjpa/blob/b6af06b64f9126fdcfb5afae95cd05bbf89bc421/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/J2DoPrivHelper.java","raw_url":"https://github.com/apache/openjpa/raw/b6af06b64f9126fdcfb5afae95cd05bbf89bc421/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/J2DoPrivHelper.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/J2DoPrivHelper.java?ref=b6af06b64f9126fdcfb5afae95cd05bbf89bc421","patch":"@@ -25,6 +25,7 @@\n import java.io.IOException;\n import java.lang.reflect.AccessibleObject;\n import java.net.InetAddress;\n+import java.net.MalformedURLException;\n import java.net.ServerSocket;\n import java.net.Socket;\n import java.net.URL;\n@@ -69,6 +70,7 @@\n  * <li>File.isDirectory\n  * <li>File.mkdirs\n  * <li>File.renameTo\n+ * <li>File.toURL\n  * <li>FileInputStream new\n  * <li>FileOutputStream new\n  * <li>System.getProperties\n@@ -79,6 +81,7 @@\n  * <li>Socket.accept\n  * <li>System.getProperty\n  * <li>Thread.getContextClassLoader\n+ * <li>Thread new\n  * <li>TemporaryClassLoader new\n  * <li>URL.openStream\n  * <li>URLConnection.getContent\n@@ -593,6 +596,24 @@ public Object run() {\n         };\n     }\n \n+    /**\n+     * Return a PrivilegedExceptionAction object for f.toURL().\n+     * \n+     * Requires security policy:\n+     *   'permission java.io.FilePermission \"read\";'\n+     *   \n+     * @return Boolean\n+     * @throws MalformedURLException\n+     */\n+    public static final PrivilegedExceptionAction toURLAction(final File file)\n+        throws MalformedURLException {\n+        return new PrivilegedExceptionAction() {\n+            public Object run() throws MalformedURLException {\n+                return file.toURL();\n+            }\n+        };\n+    }\n+\n     /**\n      * Return a PrivilegedExceptionAction object for new FileInputStream().\n      * \n@@ -768,6 +789,23 @@ public Object run() {\n         };\n     }\n \n+    /**\n+     * Return a PrivilegedAction object for new Thread().\n+     * \n+     * Requires security policy:\n+     *   'permission java.lang.RuntimePermission \"modifyThreadGroup\";'\n+     * \n+     * @return Thread\n+     */\n+    public static final PrivilegedAction newThreadAction(\n+        final Runnable target, final String name) {\n+        return new PrivilegedAction() {\n+            public Object run() {\n+                return new Thread(target, name);\n+            }\n+        };\n+    }\n+\n     /**\n      * Return a PrivilegedExceptionAction object for url.openStream().\n      * \n@@ -966,4 +1004,21 @@ public Object run() {\n             }\n         };\n     }\n+    \n+    /**\n+     * Return a PrivilegeAction object for Project.loadClass().\n+     * \n+     * Requires security policy:\n+     *   'permission java.lang.RuntimePermission \"getClassLoader\";'\n+     *   \n+     * @return BCClass\n+     */\n+    public static final PrivilegedAction loadProjectClassAction(\n+        final Project project, final String clazzName) {\n+        return new PrivilegedAction() {\n+            public Object run() {\n+                return project.loadClass(clazzName);\n+            }\n+        };\n+    }\n }"},{"sha":"48f6e534f636ae8c2b9d4b0537bae68fb975d7f1","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java","status":"modified","additions":7,"deletions":1,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/b6af06b64f9126fdcfb5afae95cd05bbf89bc421/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java","raw_url":"https://github.com/apache/openjpa/raw/b6af06b64f9126fdcfb5afae95cd05bbf89bc421/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java?ref=b6af06b64f9126fdcfb5afae95cd05bbf89bc421","patch":"@@ -20,6 +20,7 @@\n \n import java.io.File;\n import java.io.IOException;\n+import java.net.MalformedURLException;\n import java.net.URL;\n import java.security.AccessController;\n import java.security.PrivilegedActionException;\n@@ -458,7 +459,12 @@ public void parse(URL url)\n         @Override\n         public void parse(File file)\n             throws IOException {\n-            _source = file.toURL();\n+            try {\n+                _source = (URL) AccessController.doPrivileged(J2DoPrivHelper\n+                    .toURLAction(file));\n+            } catch (PrivilegedActionException pae) {\n+                throw (MalformedURLException) pae.getException();\n+            }\n             super.parse(file);\n         }\n "},{"sha":"8596d232115469aaca5c6f2e5cdc3322d6c1d14b","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceUnitInfoImpl.java","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/b6af06b64f9126fdcfb5afae95cd05bbf89bc421/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceUnitInfoImpl.java","raw_url":"https://github.com/apache/openjpa/raw/b6af06b64f9126fdcfb5afae95cd05bbf89bc421/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceUnitInfoImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceUnitInfoImpl.java?ref=b6af06b64f9126fdcfb5afae95cd05bbf89bc421","patch":"@@ -24,6 +24,7 @@\n import java.net.URL;\n import java.net.URLDecoder;\n import java.security.AccessController;\n+import java.security.PrivilegedActionException;\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.HashMap;\n@@ -219,8 +220,12 @@ public void addJarFileName(String name) {\n             if (cp[i].equals(name)\n                 || cp[i].endsWith(File.separatorChar + name)) {\n                 try {\n-                    addJarFile(new File(cp[i]).toURL());\n+                    addJarFile((URL) AccessController\n+                        .doPrivileged(J2DoPrivHelper\n+                            .toURLAction(new File(cp[i]))));\n                     return;\n+                } catch (PrivilegedActionException pae) {\n+                    break;\n                 } catch (MalformedURLException mue) {\n                     break;\n                 }"}]}

