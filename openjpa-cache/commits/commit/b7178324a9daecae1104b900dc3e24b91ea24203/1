{"sha":"b7178324a9daecae1104b900dc3e24b91ea24203","node_id":"MDY6Q29tbWl0MjA2MzY0OmI3MTc4MzI0YTlkYWVjYWUxMTA0YjkwMGRjM2UyNGI5MWVhMjQyMDM=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-11-11T03:55:23Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-11-11T03:55:23Z"},"message":"OPENJPA-765 Check for isInsertable and isUpdatable in HandlerFieldStrategy - merged to 1.2.x\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@712930 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"56cdb1ab2e1ae0b9e8d5de217ad229c11e262370","url":"https://api.github.com/repos/apache/openjpa/git/trees/56cdb1ab2e1ae0b9e8d5de217ad229c11e262370"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b7178324a9daecae1104b900dc3e24b91ea24203","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b7178324a9daecae1104b900dc3e24b91ea24203","html_url":"https://github.com/apache/openjpa/commit/b7178324a9daecae1104b900dc3e24b91ea24203","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b7178324a9daecae1104b900dc3e24b91ea24203/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"2482d744fbfd28f28a675bdcd1d0db0a23065ac0","url":"https://api.github.com/repos/apache/openjpa/commits/2482d744fbfd28f28a675bdcd1d0db0a23065ac0","html_url":"https://github.com/apache/openjpa/commit/2482d744fbfd28f28a675bdcd1d0db0a23065ac0"}],"stats":{"total":350,"additions":288,"deletions":62},"files":[{"sha":"2be2fbcb665e8ee9ec14ede6b0f07e67d4e45475","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/AbstractUpdateManager.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/b7178324a9daecae1104b900dc3e24b91ea24203/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/AbstractUpdateManager.java","raw_url":"https://github.com/apache/openjpa/raw/b7178324a9daecae1104b900dc3e24b91ea24203/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/AbstractUpdateManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/AbstractUpdateManager.java?ref=b7178324a9daecae1104b900dc3e24b91ea24203","patch":"@@ -193,8 +193,9 @@ protected void insert(OpenJPAStateManager sm, ClassMapping mapping,\n         BitSet dirty = sm.getDirty();\n         for (int i = 0; i < fields.length; i++) {\n             if (dirty.get(fields[i].getIndex())\n-                && !bufferCustomInsert(fields[i], sm, store, customs))\n+                && !bufferCustomInsert(fields[i], sm, store, customs)) {\n                 fields[i].insert(sm, store, rowMgr);\n+            }\n         }\n         if (sup == null) {\n             Version vers = mapping.getVersion();\n@@ -279,8 +280,9 @@ protected void update(OpenJPAStateManager sm, BitSet dirty,\n         FieldMapping[] fields = mapping.getDefinedFieldMappings();\n         for (int i = 0; i < fields.length; i++) {\n             if (dirty.get(fields[i].getIndex())\n-                && !bufferCustomUpdate(fields[i], sm, store, customs))\n+                && !bufferCustomUpdate(fields[i], sm, store, customs)) {\n                 fields[i].update(sm, store, rowMgr);\n+            }\n         }\n \n         ClassMapping sup = mapping.getJoinablePCSuperclassMapping();"},{"sha":"ef1aceeba0814aa5fd9a0fe8de9d5d4764f6c1c1","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerFieldStrategy.java","status":"modified","additions":21,"deletions":17,"changes":38,"blob_url":"https://github.com/apache/openjpa/blob/b7178324a9daecae1104b900dc3e24b91ea24203/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/b7178324a9daecae1104b900dc3e24b91ea24203/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerFieldStrategy.java?ref=b7178324a9daecae1104b900dc3e24b91ea24203","patch":"@@ -122,27 +122,31 @@ else if (_cols.length == 1)\n \n     public void insert(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\n         throws SQLException {\n-        Row row = field.getRow(sm, store, rm, Row.ACTION_INSERT);\n-        if (row != null) {\n-            Object value = sm.fetch(field.getIndex());\n-            if (!HandlerStrategies.set(field, value, store, row, _cols, _io, \n-            \tfield.getNullValue() == FieldMapping.NULL_NONE))\n-            \tif (field.getValueStrategy() != ValueStrategies.AUTOASSIGN)\n-            \t\tthrow new UserException(_loc.get(\"cant-set-value\", \n-            \t\t\t\trow.getFailedObject(), field, value));\n+        if (field.getColumnIO().isInsertable(0, false)) {\n+            Row row = field.getRow(sm, store, rm, Row.ACTION_INSERT);\n+            if (row != null) {\n+                Object value = sm.fetch(field.getIndex());\n+                if (!HandlerStrategies.set(field, value, store, row, _cols,\n+                    _io, field.getNullValue() == FieldMapping.NULL_NONE))\n+                    if (field.getValueStrategy() != ValueStrategies.AUTOASSIGN)\n+                        throw new UserException(_loc.get(\"cant-set-value\", row\n+                            .getFailedObject(), field, value));\n+            }\n         }\n     }\n \n     public void update(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\n         throws SQLException {\n-        Row row = field.getRow(sm, store, rm, Row.ACTION_UPDATE);\n-        if (row != null){\n-            Object value = sm.fetch(field.getIndex());\n-            if (!HandlerStrategies.set(field, value, store, row, _cols, _io,\n-                 field.getNullValue() == FieldMapping.NULL_NONE)) \n-            \tif (field.getValueStrategy() != ValueStrategies.AUTOASSIGN)\n-            \tthrow new UserException(_loc.get(\"cant-set-value\", \n-            \t\t\trow.getFailedObject(), field, value));\n+        if (field.getColumnIO().isUpdatable(0, false)) {\n+            Row row = field.getRow(sm, store, rm, Row.ACTION_UPDATE);\n+            if (row != null) {\n+                Object value = sm.fetch(field.getIndex());\n+                if (!HandlerStrategies.set(field, value, store, row, _cols,\n+                    _io, field.getNullValue() == FieldMapping.NULL_NONE))\n+                    if (field.getValueStrategy() != ValueStrategies.AUTOASSIGN)\n+                        throw new UserException(_loc.get(\"cant-set-value\", row\n+                            .getFailedObject(), field, value));\n+            }\n         }\n     }\n \n@@ -154,7 +158,7 @@ public void delete(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\n     public int supportsSelect(Select sel, int type, OpenJPAStateManager sm,\n         JDBCStore store, JDBCFetchConfiguration fetch) {\n         if ((type == Select.TYPE_JOINLESS && sel.isSelected(field.getTable()))\n-            || (_load && type == sel.TYPE_TWO_PART))\n+            || (_load && type == Select.TYPE_TWO_PART))\n             return 1;\n         return 0;\n     }"},{"sha":"91ef920112e76d7d94bf409dae392734e00c8b76","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/AbstractNullityTestCase.java","status":"added","additions":66,"deletions":0,"changes":66,"blob_url":"https://github.com/apache/openjpa/blob/b7178324a9daecae1104b900dc3e24b91ea24203/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/AbstractNullityTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/b7178324a9daecae1104b900dc3e24b91ea24203/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/AbstractNullityTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/AbstractNullityTestCase.java?ref=b7178324a9daecae1104b900dc3e24b91ea24203","patch":"@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.nullity;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+public abstract class AbstractNullityTestCase extends SingleEMFTestCase {\n+    protected static boolean NEW = true;\n+    \n+    /**\n+     * Asserts that the given instance can not be committed.\n+     */\n+    void assertCommitFails(Object pc, boolean isNew,\n+        Class<? extends Exception> expected) {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        if (isNew) {\n+            em.persist(pc);\n+        }\n+        else {\n+            em.merge(pc);\n+        }\n+        try {\n+            em.getTransaction().commit();\n+            fail();\n+        } catch (Exception e) {\n+            if (!expected.isAssignableFrom(e.getClass())) {\n+                e.printStackTrace();\n+                fail(\"Expected \" + expected.getName());\n+            } \n+        }\n+    }\n+    \n+    void assertCommitSucceeds(Object pc, boolean isNew) {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        if (isNew)\n+            em.persist(pc);\n+        else \n+            em.merge(pc);\n+        try {\n+            em.getTransaction().commit();\n+        } catch (RuntimeException e) {\n+            e.printStackTrace();\n+            fail();\n+        }\n+    }\n+}"},{"sha":"4105983867eefec3807d1874f11f3e80a19b2a18","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/BlobValue.java","status":"modified","additions":19,"deletions":0,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/b7178324a9daecae1104b900dc3e24b91ea24203/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/BlobValue.java","raw_url":"https://github.com/apache/openjpa/raw/b7178324a9daecae1104b900dc3e24b91ea24203/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/BlobValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/BlobValue.java?ref=b7178324a9daecae1104b900dc3e24b91ea24203","patch":"@@ -30,4 +30,23 @@\n     private String  strVal;\n     private int     intVal;\n     private byte[]  bytes;\n+    \n+    public String getStrVal() {\n+        return strVal;\n+    }\n+    public void setStrVal(String strVal) {\n+        this.strVal = strVal;\n+    }\n+    public int getIntVal() {\n+        return intVal;\n+    }\n+    public void setIntVal(int intVal) {\n+        this.intVal = intVal;\n+    }\n+    public byte[] getBytes() {\n+        return bytes;\n+    }\n+    public void setBytes(byte[] bytes) {\n+        this.bytes = bytes;\n+    }\n }"},{"sha":"4487c807169f74317002a2a7d6a91476a9e39c3e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/NullValues.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/b7178324a9daecae1104b900dc3e24b91ea24203/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/NullValues.java","raw_url":"https://github.com/apache/openjpa/raw/b7178324a9daecae1104b900dc3e24b91ea24203/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/NullValues.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/NullValues.java?ref=b7178324a9daecae1104b900dc3e24b91ea24203","patch":"@@ -147,4 +147,8 @@ public BlobValue getNotOptionalBlob() {\n \tpublic void setNotOptionalBlob(BlobValue notOptionalBlob) {\r\n \t\tthis.notOptionalBlob = notOptionalBlob;\r\n \t}\r\n+\t\r\n+\tpublic int getVersion() { \r\n+\t    return version;\r\n+\t}\r\n }\r"},{"sha":"f1ef9da4aa92cbc53031fdaa2a344b51f18449ff","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/TestBasicFieldNullity.java","status":"modified","additions":1,"deletions":43,"changes":44,"blob_url":"https://github.com/apache/openjpa/blob/b7178324a9daecae1104b900dc3e24b91ea24203/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/TestBasicFieldNullity.java","raw_url":"https://github.com/apache/openjpa/raw/b7178324a9daecae1104b900dc3e24b91ea24203/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/TestBasicFieldNullity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/TestBasicFieldNullity.java?ref=b7178324a9daecae1104b900dc3e24b91ea24203","patch":"@@ -18,13 +18,10 @@\n  */\r\n package org.apache.openjpa.persistence.nullity;\r\n \r\n-import javax.persistence.EntityManager;\r\n import javax.persistence.RollbackException;\r\n \r\n import org.apache.openjpa.persistence.InvalidStateException;\r\n import org.apache.openjpa.persistence.OpenJPAPersistence;\r\n-import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n-\r\n \r\n /**\r\n  * Test @Basic(optional=true|false) and @Column(nullable=true|false) \r\n@@ -34,8 +31,7 @@\n  *\r\n  * @author Pinaki Poddar\r\n  */\r\n-public class TestBasicFieldNullity extends SingleEMFTestCase {\r\n-\tprivate static boolean NEW = true;\r\n+public class TestBasicFieldNullity extends AbstractNullityTestCase {\r\n \r\n     public void setUp() {\r\n         setUp(CLEAR_TABLES, NullValues.class);\r\n@@ -116,44 +112,6 @@ public void testX() {\n     \t\r\n     \tpc.setNotNullableBlob(null);\r\n     \tassertCommitFails(pc, !NEW, RollbackException.class);\r\n-    \t\r\n-    }\r\n-    \r\n-    /**\r\n-     * Asserts that the given instance can not be committed.\r\n-     */\r\n-    void assertCommitFails(Object pc, boolean isNew, Class expected) {\r\n-    \tEntityManager em = emf.createEntityManager();\r\n-    \tem.getTransaction().begin();\r\n-    \tif (isNew)\r\n-    \t\tem.persist(pc);\r\n-    \telse {\r\n-    \t\tObject merged = em.merge(pc);\r\n-    \t}\r\n-    \ttry {\r\n-\t\t\tem.getTransaction().commit();\r\n-\t\t\tfail();\r\n-\t\t} catch (Exception e) {\r\n-\t\t\tif (!expected.isAssignableFrom(e.getClass())) {\r\n-\t\t\t\te.printStackTrace();\r\n-\t\t\t\tfail(\"Expected \" + expected.getName());\r\n-\t\t\t} \r\n-\t\t}\r\n-    }\r\n-    \r\n-    void assertCommitSucceeds(Object pc, boolean isNew) {\r\n-    \tEntityManager em = emf.createEntityManager();\r\n-    \tem.getTransaction().begin();\r\n-    \tif (isNew)\r\n-    \t\tem.persist(pc);\r\n-    \telse \r\n-    \t\tem.merge(pc);\r\n-    \ttry {\r\n-\t\t\tem.getTransaction().commit();\r\n-\t\t} catch (RuntimeException e) {\r\n-\t\t\te.printStackTrace();\r\n-\t\t\tfail();\r\n-\t\t}\r\n     }\r\n }\r\n \r"},{"sha":"2623fa148766b336a2203b09ba61a946fd6b57ed","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/TestReadOnlyNullity.java","status":"added","additions":78,"deletions":0,"changes":78,"blob_url":"https://github.com/apache/openjpa/blob/b7178324a9daecae1104b900dc3e24b91ea24203/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/TestReadOnlyNullity.java","raw_url":"https://github.com/apache/openjpa/raw/b7178324a9daecae1104b900dc3e24b91ea24203/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/TestReadOnlyNullity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/TestReadOnlyNullity.java?ref=b7178324a9daecae1104b900dc3e24b91ea24203","patch":"@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.nullity;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.sql.AbstractDB2Dictionary;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n+\n+/**\n+ * Testcase that verifies that null checking is omitted for \"read only\" fields.\n+ * An example use case is a Date field that is set by the database (although in\n+ * that case the field would be updateable=false and insertable=false).  \n+ */\n+public class TestReadOnlyNullity extends AbstractNullityTestCase {\n+\n+    private boolean skip = false;\n+\n+    public void setUp() {\n+        OpenJPAEntityManagerFactorySPI emf = createEMF(new Object[] {});\n+        if (((JDBCConfiguration) emf.getConfiguration())\n+            .getDBDictionaryInstance() instanceof AbstractDB2Dictionary) {\n+\n+            setUp(CLEAR_TABLES, TimestampedEntity.class);\n+        } else {\n+            skip = true;\n+        }\n+    }\n+\n+    /**\n+     * Test that a non-insertable field may be set to null. This test is skipped\n+     * for non-db2 databases. \n+     */\n+    public void testNonInsertableBlobDoesNotFail() {\n+        if (!skip) {\n+            TimestampedEntity pc = new TimestampedEntity();\n+            pc.setNonInsertableNonNullableDate(null);\n+            assertCommitSucceeds(pc, NEW);\n+        }\n+        // else no-op\n+    }\n+\n+    /**\n+     * Test that a non-updatable field may be set to null. This test is skipped\n+     * for non-db2 databases. \n+     */\n+    public void testNonUpdatableBlobDoesNotFail() {\n+        if (!skip) {\n+            TimestampedEntity pc = new TimestampedEntity();\n+            EntityManager em = emf.createEntityManager();\n+            em.getTransaction().begin();\n+            em.persist(pc);\n+            em.getTransaction().commit();\n+            em.clear();\n+\n+            pc.setNonUpdatableNonNullableDate(null);\n+            assertCommitSucceeds(pc, !NEW);\n+        }\n+        // else no-op\n+    }\n+}"},{"sha":"84d9a2f77e3bea86669d9ba58c9080c912b310f3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/TimestampedEntity.java","status":"added","additions":95,"deletions":0,"changes":95,"blob_url":"https://github.com/apache/openjpa/blob/b7178324a9daecae1104b900dc3e24b91ea24203/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/TimestampedEntity.java","raw_url":"https://github.com/apache/openjpa/raw/b7178324a9daecae1104b900dc3e24b91ea24203/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/TimestampedEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/TimestampedEntity.java?ref=b7178324a9daecae1104b900dc3e24b91ea24203","patch":"@@ -0,0 +1,95 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.nullity;\n+\n+import java.sql.Date;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.Version;\n+\n+/**\n+ * This Entity contains two date fields which are updated by the database. The\n+ * fields are non-insertable and non-updatable respectively making them read\n+ * only in many situations. The fields should be ignored when persisting or\n+ * updating an entity (again respectively).\n+ * \n+ * <P>\n+ * <b>The syntax used for the database to generate the date column is specific\n+ * to Derby and DB2. Any testcase which uses this entity must ensure that one of\n+ * those databases is used, or use pre-existing tables</b>\n+ * </P>\n+ */\n+@Entity\n+public class TimestampedEntity {\n+    @Id\n+    @GeneratedValue\n+    private int id;\n+\n+    @Version\n+    private int version;\n+\n+    @Column(nullable = false, insertable = false, \n+        columnDefinition = \"DATE default '2008-01-01'\")\n+    private Date nonInsertableNonNullableDate;\n+\n+    @Column(nullable = false, updatable = false, \n+        columnDefinition = \"DATE default '2008-01-01'\")\n+    private Date nonUpdatableNonNullableDate;\n+\n+    public TimestampedEntity() { \n+        setNonUpdatableNonNullableDate(new Date(52349606));\n+    }\n+    \n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public int getVersion() {\n+        return version;\n+    }\n+\n+    public void setVersion(int version) {\n+        this.version = version;\n+    }\n+\n+    public Date getNonInsertableNonNullableDate() {\n+        return nonInsertableNonNullableDate;\n+    }\n+\n+    public void setNonInsertableNonNullableDate(\n+        Date nonInsertableNonNullableDate) {\n+        this.nonInsertableNonNullableDate = nonInsertableNonNullableDate;\n+    }\n+\n+    public Date getNonUpdatableNonNullableDate() {\n+        return nonUpdatableNonNullableDate;\n+    }\n+\n+    public void setNonUpdatableNonNullableDate(\n+        Date nonUpdatableNonNullableDate) {\n+        this.nonUpdatableNonNullableDate = nonUpdatableNonNullableDate;\n+    }\n+}"}]}

