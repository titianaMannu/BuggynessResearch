{"sha":"b73837448858c4d4111edd7155fc1c28f0fde4b5","node_id":"MDY6Q29tbWl0MjA2MzY0OmI3MzgzNzQ0ODg1OGM0ZDQxMTFlZGQ3MTU1ZmMxYzI4ZjBmZGU0YjU=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-12-05T20:27:01Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-12-05T20:27:01Z"},"message":"OPENJPA-817 preserve order of statements with ConstraintUpdateManager\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@723851 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"31f9985cca5671671d4385872e927e529bd76d00","url":"https://api.github.com/repos/apache/openjpa/git/trees/31f9985cca5671671d4385872e927e529bd76d00"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b73837448858c4d4111edd7155fc1c28f0fde4b5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b73837448858c4d4111edd7155fc1c28f0fde4b5","html_url":"https://github.com/apache/openjpa/commit/b73837448858c4d4111edd7155fc1c28f0fde4b5","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b73837448858c4d4111edd7155fc1c28f0fde4b5/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"6a226f8b76e4ca83df1faf9828fe33993454da10","url":"https://api.github.com/repos/apache/openjpa/commits/6a226f8b76e4ca83df1faf9828fe33993454da10","html_url":"https://github.com/apache/openjpa/commit/6a226f8b76e4ca83df1faf9828fe33993454da10"}],"stats":{"total":481,"additions":437,"deletions":44},"files":[{"sha":"8b869da049997eac79a3af7d1a1703023bcd3bf6","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/ConstraintUpdateManager.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/b73837448858c4d4111edd7155fc1c28f0fde4b5/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/ConstraintUpdateManager.java","raw_url":"https://github.com/apache/openjpa/raw/b73837448858c4d4111edd7155fc1c28f0fde4b5/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/ConstraintUpdateManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/ConstraintUpdateManager.java?ref=b73837448858c4d4111edd7155fc1c28f0fde4b5","patch":"@@ -58,7 +58,7 @@\n         (ConstraintUpdateManager.class);\r\n \r\n     public boolean orderDirty() {\r\n-        return false;\r\n+        return true;\r\n     }\r\n \r\n     protected PreparedStatementManager newPreparedStatementManager\r"},{"sha":"47a0b513661698ef82acaa6cf49d648b87a90650","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/RowManagerImpl.java","status":"modified","additions":78,"deletions":41,"changes":119,"blob_url":"https://github.com/apache/openjpa/blob/b73837448858c4d4111edd7155fc1c28f0fde4b5/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/RowManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/b73837448858c4d4111edd7155fc1c28f0fde4b5/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/RowManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/RowManagerImpl.java?ref=b73837448858c4d4111edd7155fc1c28f0fde4b5","patch":"@@ -22,7 +22,7 @@\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n-import java.util.HashMap;\n+import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n \n@@ -39,17 +39,17 @@\n public class RowManagerImpl\n     implements RowManager {\n \n-    private Map _inserts = null;\n-    private Map _updates = null;\n-    private Map _deletes = null;\n-    private Collection _secondaryUpdates = null;\n-    private Collection _secondaryDeletes = null;\n-    private Collection _allRowUpdates = null;\n-    private Collection _allRowDeletes = null;\n+    private Map<Key, PrimaryRow> _inserts = null;\n+    private Map<Key, PrimaryRow> _updates = null;\n+    private Map<Key, PrimaryRow> _deletes = null;\n+    private Collection<SecondaryRow> _secondaryUpdates = null;\n+    private Collection<SecondaryRow> _secondaryDeletes = null;\n+    private Collection<Row> _allRowUpdates = null;\n+    private Collection<Row> _allRowDeletes = null;\n \n     // we maintain a list of the order of all primary rows if the user\n     // wants to be able to fetch them in order\n-    private final List _primaryOrder;\n+    private final List<PrimaryRow> _primaryOrder;\n \n     // track whether we're dealing with any auto-inc columns\n     private boolean _auto = false;\n@@ -66,7 +66,7 @@\n      * @param order whether to keep track of the order in which rows are added\n      */\n     public RowManagerImpl(boolean order) {\n-        _primaryOrder = (order) ? new ArrayList() : null;\n+        _primaryOrder = (order) ? new ArrayList<PrimaryRow>() : null;\n     }\n \n     /**\n@@ -80,61 +80,98 @@ public boolean hasAutoAssignConstraints() {\n      * Return the ordered primary rows. Only available if ordering requested\n      * on construction.\n      */\n-    public List getOrdered() {\n-        return (_primaryOrder == null) ? Collections.EMPTY_LIST : _primaryOrder;\n+    public List<PrimaryRow> getOrdered() {\n+        if(_primaryOrder == null ) { \n+            return Collections.emptyList();\n+        }\n+        else { \n+            return _primaryOrder;\n+        }\n     }\n \n     /**\n      * Return all inserted primary rows.\n      */\n-    public Collection getInserts() {\n-        return (_inserts == null) ? Collections.EMPTY_LIST : _inserts.values();\n+    public Collection<PrimaryRow> getInserts() {\n+        if(_inserts == null ) {\n+            return Collections.emptyList();\n+        }\n+        else {\n+            return _inserts.values();\n+        }\n     }\n \n     /**\n      * Return all updated primary rows.\n      */\n-    public Collection getUpdates() {\n-        return (_updates == null) ? Collections.EMPTY_LIST : _updates.values();\n+    public Collection<PrimaryRow> getUpdates() {\n+        if(_updates == null ){ \n+            return Collections.emptyList();\n+        }\n+        else { \n+            return _updates.values();\n+        }\n     }\n \n     /**\n      * Return all deleted primary rows.\n      */\n-    public Collection getDeletes() {\n-        return (_deletes == null) ? Collections.EMPTY_LIST : _deletes.values();\n+    public Collection<PrimaryRow> getDeletes() {\n+        if(_deletes == null) { \n+            return Collections.emptyList();\n+        }\n+        else {\n+            return _deletes.values();\n+        }\n     }\n \n     /**\n      * Return all inserted and updated secondary rows.\n      */\n-    public Collection getSecondaryUpdates() {\n-        return (_secondaryUpdates == null) ? Collections.EMPTY_LIST\n-            : _secondaryUpdates;\n+    public Collection<SecondaryRow> getSecondaryUpdates() {\n+        if(_secondaryUpdates == null) { \n+            return Collections.emptyList();\n+        }\n+        else { \n+            return _secondaryUpdates;\n+        }\n     }\n \n     /**\n      * Return all deleted secondary rows.\n      */\n-    public Collection getSecondaryDeletes() {\n-        return (_secondaryDeletes == null) ? Collections.EMPTY_LIST\n-            : _secondaryDeletes;\n+    public Collection<SecondaryRow> getSecondaryDeletes() {\n+        if(_secondaryDeletes == null) { \n+            return Collections.emptyList();\n+        }\n+        else { \n+            return _secondaryDeletes;\n+        }\n     }\n \n     /**\n      * Return any 'all row' updates.\n      */\n-    public Collection getAllRowUpdates() {\n-        return (_allRowUpdates == null) ? Collections.EMPTY_LIST\n-            : _allRowUpdates;\n+    public Collection<Row> getAllRowUpdates() {\n+        if(_allRowUpdates == null) { \n+            return Collections.emptyList();\n+        }\n+        else { \n+            return _allRowUpdates;\n+        }\n     }\n \n     /**\n      * Return any 'all row' deletes.\n      */\n-    public Collection getAllRowDeletes() {\n-        return (_allRowDeletes == null) ? Collections.EMPTY_LIST\n-            : _allRowDeletes;\n+    public Collection<Row> getAllRowDeletes() {\n+        if(_allRowDeletes == null) { \n+            return Collections.emptyList();\n+        }\n+        else { \n+            return _allRowDeletes;\n+        }\n+        \n     }\n \n     public Row getSecondaryRow(Table table, int action) {\n@@ -149,12 +186,12 @@ public void flushSecondaryRow(Row row)\n         SecondaryRow srow = (SecondaryRow) row;\n         if (srow.getAction() == Row.ACTION_DELETE) {\n             if (_secondaryDeletes == null)\n-                _secondaryDeletes = new ArrayList();\n-            _secondaryDeletes.add(srow.clone());\n+                _secondaryDeletes = new ArrayList<SecondaryRow>();\n+            _secondaryDeletes.add((SecondaryRow) srow.clone());\n         } else {\n             if (_secondaryUpdates == null)\n-                _secondaryUpdates = new ArrayList();\n-            _secondaryUpdates.add(srow.clone());\n+                _secondaryUpdates = new ArrayList<SecondaryRow>();\n+            _secondaryUpdates.add((SecondaryRow) srow.clone());\n         }\n     }\n \n@@ -169,12 +206,12 @@ public void flushAllRows(Row row) {\n         switch (row.getAction()) {\n             case Row.ACTION_UPDATE:\n                 if (_allRowUpdates == null)\n-                    _allRowUpdates = new ArrayList();\n+                    _allRowUpdates = new ArrayList<Row>();\n                 _allRowUpdates.add(row);\n                 break;\n             case Row.ACTION_DELETE:\n                 if (_allRowDeletes == null)\n-                    _allRowDeletes = new ArrayList();\n+                    _allRowDeletes = new ArrayList<Row>();\n                 _allRowDeletes.add(row);\n                 break;\n             default:\n@@ -192,25 +229,25 @@ public Row getRow(Table table, int action, OpenJPAStateManager sm,\n             && _row != null && _row.getAction() == action)\n             return _row;\n \n-        Map map;\n+        Map<Key, PrimaryRow> map;\n         if (action == Row.ACTION_DELETE) {\n             if (_deletes == null && create)\n-                _deletes = new HashMap();\n+                _deletes = new LinkedHashMap<Key, PrimaryRow>();\n             map = _deletes;\n         } else if (action == Row.ACTION_INSERT) {\n             if (_inserts == null && create)\n-                _inserts = new HashMap();\n+                _inserts = new LinkedHashMap<Key, PrimaryRow>();\n             map = _inserts;\n         } else {\n             if (_updates == null && create)\n-                _updates = new HashMap();\n+                _updates = new LinkedHashMap<Key, PrimaryRow>();\n             map = _updates;\n         }\n         if (map == null)\n             return null;\n \n         _key = new Key(table, sm);\n-        _row = (PrimaryRow) map.get(_key);\n+        _row = map.get(_key);\n \n         if (_row == null && create) {\n             _row = new PrimaryRow(table, action, sm);"},{"sha":"c2fd9b852cbdc01a6998014e534d74e64f477e9a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/Employee.java","status":"added","additions":83,"deletions":0,"changes":83,"blob_url":"https://github.com/apache/openjpa/blob/b73837448858c4d4111edd7155fc1c28f0fde4b5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/Employee.java","raw_url":"https://github.com/apache/openjpa/raw/b73837448858c4d4111edd7155fc1c28f0fde4b5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/Employee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/Employee.java?ref=b73837448858c4d4111edd7155fc1c28f0fde4b5","patch":"@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.jdbc.kernel;\n+\n+import java.util.Collection;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Table;\n+import javax.persistence.Version;\n+\n+@Entity\n+// Try not to collide with other Employee entities\n+@Table(name = \"PER_JDBC_KERN_EMP\")\n+public class Employee {\n+\n+    @Id\n+    private int id;\n+\n+    @Version\n+    private int version;\n+\n+    private String firstName;\n+    private String lastName;\n+\n+    @OneToMany(mappedBy = \"employee\", cascade = { CascadeType.MERGE,\n+        CascadeType.PERSIST })     \n+    private Collection<Task> tasks;\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public String getFirstName() {\n+        return firstName;\n+    }\n+\n+    public void setFirstName(String firstName) {\n+        this.firstName = firstName;\n+    }\n+\n+    public String getLastName() {\n+        return lastName;\n+    }\n+\n+    public void setLastName(String lastName) {\n+        this.lastName = lastName;\n+    }\n+\n+    public Collection<Task> getTasks() {\n+        return tasks;\n+    }\n+\n+    public void setTasks(Collection<Task> tasks) {\n+        this.tasks = tasks;\n+    }\n+\n+    public int getVersion() {\n+        return version;\n+    }\n+}"},{"sha":"d2ed6bb9b4fcb81121e1f306d638cee48f248d7a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/Story.java","status":"added","additions":60,"deletions":0,"changes":60,"blob_url":"https://github.com/apache/openjpa/blob/b73837448858c4d4111edd7155fc1c28f0fde4b5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/Story.java","raw_url":"https://github.com/apache/openjpa/raw/b73837448858c4d4111edd7155fc1c28f0fde4b5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/Story.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/Story.java?ref=b73837448858c4d4111edd7155fc1c28f0fde4b5","patch":"@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.jdbc.kernel;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Table;\n+import javax.persistence.Version;\n+\n+@Entity\n+@Table(name = \"PER_JDBC_KERN_STORY\") // try not to collide\n+public class Story {\n+    @Id\n+    private int id;\n+\n+    @Version\n+    private int version;\n+    \n+    @ManyToOne(cascade = { CascadeType.MERGE, CascadeType.PERSIST })\n+    private Task task;\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public Task getTask() {\n+        return task;\n+    }\n+\n+    public void setTask(Task task) {\n+        this.task = task;\n+    }\n+\n+    public int getVersion() {\n+        return version;\n+    } \n+\n+}"},{"sha":"d3aef7c7e3abf668d893f84d43d1b304df7eb8ea","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/Task.java","status":"added","additions":75,"deletions":0,"changes":75,"blob_url":"https://github.com/apache/openjpa/blob/b73837448858c4d4111edd7155fc1c28f0fde4b5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/Task.java","raw_url":"https://github.com/apache/openjpa/raw/b73837448858c4d4111edd7155fc1c28f0fde4b5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/Task.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/Task.java?ref=b73837448858c4d4111edd7155fc1c28f0fde4b5","patch":"@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.jdbc.kernel;\n+\n+import java.util.Collection;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Table;\n+import javax.persistence.Version;\n+\n+@Entity\n+@Table(name = \"PER_JDBC_KERN_TASK\")\n+// try not to collide\n+public class Task {\n+    @Id\n+    private int id;\n+\n+    @Version\n+    private int version;\n+\n+    @OneToMany(mappedBy = \"task\", cascade = { CascadeType.MERGE,\n+        CascadeType.PERSIST })\n+    private Collection<Story> stories;\n+    \n+    @ManyToOne(cascade = { CascadeType.MERGE, CascadeType.PERSIST })\n+    private Employee employee;\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public Collection<Story> getStories() {\n+        return stories;\n+    }\n+\n+    public void setStories(Collection<Story> stories) {\n+        this.stories = stories;\n+    }\n+\n+    public Employee getEmployee() {\n+        return employee;\n+    }\n+\n+    public void setEmployee(Employee employee) {\n+        this.employee = employee;\n+    }\n+\n+    public int getVersion() {\n+        return version;\n+    } \n+}"},{"sha":"6e86aa208ac24d57aa7c37bc16c3f91a12d2a9e4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/TestInsertOrder.java","status":"added","additions":115,"deletions":0,"changes":115,"blob_url":"https://github.com/apache/openjpa/blob/b73837448858c4d4111edd7155fc1c28f0fde4b5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/TestInsertOrder.java","raw_url":"https://github.com/apache/openjpa/raw/b73837448858c4d4111edd7155fc1c28f0fde4b5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/TestInsertOrder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/TestInsertOrder.java?ref=b73837448858c4d4111edd7155fc1c28f0fde4b5","patch":"@@ -0,0 +1,115 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.jdbc.kernel;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.test.SQLListenerTestCase;\n+\n+/**\n+ * Test that insert order is preserved when using the ConstraintUpdateManager\n+ * for entities which are not annotated with ForeignKey constraints.\n+ */\n+public class TestInsertOrder extends SQLListenerTestCase {\n+    private String empTableName;\n+    private String taskTableName;\n+    private String storyTableName;\n+\n+    public void setUp() {\n+        setUp(Employee.class, Task.class, Story.class);\n+        empTableName = getMapping(Employee.class).getTable().getFullName();\n+        taskTableName = getMapping(Task.class).getTable().getFullName();\n+        storyTableName = getMapping(Story.class).getTable().getFullName();\n+    }\n+\n+    /**\n+     * <P>Persist an Employee entity and allow the cascade to insert the children.\n+     * The inserts should be executed in this order, Employee, Task, Story.\n+     * </P>\n+     * \n+     * <P> \n+     * Originally this test would pass in some scenarios. I believe the order \n+     * relied on the hashcode of the underlying entities. \n+     * </P>\n+     */\n+    public void testCascadePersist() {\n+        Employee e = newTree(10);\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.persist(e);\n+        em.getTransaction().commit();\n+        em.close();\n+\n+        assertSQLOrder(\"INSERT INTO \" + empTableName + \".*\", \"INSERT INTO \"\n+            + taskTableName + \".*\", \"INSERT INTO \" + storyTableName + \".*\");\n+    }\n+    \n+    /**\n+     * Merge an Employee entity and allow the cascade to insert the children.\n+     * The inserts should be executed in this order, Employee, Task, Story.\n+     */\n+    public void testCascadeMerge() {\n+        Employee e = newTree(11);\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.merge(e);\n+        em.getTransaction().commit();\n+        em.close();\n+\n+        assertSQLOrder(\"INSERT INTO \" + empTableName + \".*\", \"INSERT INTO \"\n+            + taskTableName + \".*\", \"INSERT INTO \" + storyTableName + \".*\");\n+    }\n+\n+\n+    /**\n+     * Helper to create a tree of entities\n+     * \n+     * @param id\n+     *            ID for the entities.\n+     * @return an unmanaged Employee instance with the appropriate relationships\n+     *         set.\n+     */\n+    private Employee newTree(int id) {\n+        Employee e = new Employee();\n+        e.setId(id);\n+\n+        Task t = new Task();\n+        t.setId(id);\n+\n+        Story s = new Story();\n+        s.setId(id);\n+\n+        Collection<Task> tasks = new ArrayList<Task>();\n+        tasks.add(t);\n+\n+        Collection<Story> stories = new ArrayList<Story>();\n+        stories.add(s);\n+\n+        e.setTasks(tasks);\n+        t.setEmployee(e);\n+\n+        t.setStories(stories);\n+        s.setTask(t);\n+\n+        return e;\n+    }\n+}"},{"sha":"9eba7afe03f809307a1ad4f45f046f807dafd4d4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SQLListenerTestCase.java","status":"modified","additions":25,"deletions":2,"changes":27,"blob_url":"https://github.com/apache/openjpa/blob/b73837448858c4d4111edd7155fc1c28f0fde4b5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SQLListenerTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/b73837448858c4d4111edd7155fc1c28f0fde4b5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SQLListenerTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SQLListenerTestCase.java?ref=b73837448858c4d4111edd7155fc1c28f0fde4b5","patch":"@@ -20,7 +20,6 @@\n \n import java.util.List;\n import java.util.ArrayList;\n-import java.util.Map;\n \n import org.apache.openjpa.lib.jdbc.AbstractJDBCListener;\n import org.apache.openjpa.lib.jdbc.JDBCEvent;\n@@ -33,7 +32,7 @@\n  */\n public abstract class SQLListenerTestCase\n     extends SingleEMFTestCase {\n-\n+    private static String _nl = System.getProperty(\"line.separator\");\n     protected List<String> sql = new ArrayList<String>();\n     protected int sqlCount;\n     \n@@ -122,4 +121,28 @@ public void beforeExecuteStatement(JDBCEvent event) {\n             }\n \t\t}\n \t}\n+    \n+    public void assertSQLOrder(String... expected) {\n+        int hits = 0;\n+\n+        for (String executedSQL : sql) {\n+            if (executedSQL.matches(expected[hits])) {\n+                hits++;\n+            }\n+        }\n+\n+        if (hits != expected.length) {\n+            StringBuilder sb = new StringBuilder();\n+            sb.append(\"Did not find SQL in expected order : \").append(_nl);\n+            for (String s : expected) {\n+                sb.append(s).append(_nl);\n+            }\n+\n+            sb.append(\"SQL Statements issued : \");\n+            for (String s : sql) {\n+                sb.append(s).append(_nl);\n+            }\n+            fail(sb.toString());\n+        }\n+    }\n }"}]}

