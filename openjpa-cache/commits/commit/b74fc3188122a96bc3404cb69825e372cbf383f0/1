{"sha":"b74fc3188122a96bc3404cb69825e372cbf383f0","node_id":"MDY6Q29tbWl0MjA2MzY0OmI3NGZjMzE4ODEyMmE5NmJjMzQwNGNiNjk4MjVlMzcyY2JmMzgzZjA=","commit":{"author":{"name":"David Ezzio","email":"dezzio@apache.org","date":"2008-02-05T21:49:11Z"},"committer":{"name":"David Ezzio","email":"dezzio@apache.org","date":"2008-02-05T21:49:11Z"},"message":"Prevent deadlock in database during teardown when testing failures leave transactions open\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@618787 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5a9798fbcb250978c15fb99a081e15eaa5b30fcd","url":"https://api.github.com/repos/apache/openjpa/git/trees/5a9798fbcb250978c15fb99a081e15eaa5b30fcd"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b74fc3188122a96bc3404cb69825e372cbf383f0","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b74fc3188122a96bc3404cb69825e372cbf383f0","html_url":"https://github.com/apache/openjpa/commit/b74fc3188122a96bc3404cb69825e372cbf383f0","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b74fc3188122a96bc3404cb69825e372cbf383f0/comments","author":null,"committer":null,"parents":[{"sha":"ebe3fdbd6db6950db13142e9e686f2e232948082","url":"https://api.github.com/repos/apache/openjpa/commits/ebe3fdbd6db6950db13142e9e686f2e232948082","html_url":"https://github.com/apache/openjpa/commit/ebe3fdbd6db6950db13142e9e686f2e232948082"}],"stats":{"total":38,"additions":27,"deletions":11},"files":[{"sha":"fec5ef40dbdd45b118909d2d5c2a70f3242f5473","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/PersistenceTestCase.java","status":"modified","additions":27,"deletions":11,"changes":38,"blob_url":"https://github.com/apache/openjpa/blob/b74fc3188122a96bc3404cb69825e372cbf383f0/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/PersistenceTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/b74fc3188122a96bc3404cb69825e372cbf383f0/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/PersistenceTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/PersistenceTestCase.java?ref=b74fc3188122a96bc3404cb69825e372cbf383f0","patch":"@@ -138,10 +138,20 @@ public void tearDown() throws Exception {\n      * Safely close the given factory.\n      */\n     protected boolean closeEMF(EntityManagerFactory emf) {\n-        if (emf == null)\n-            return false;\n-        if (!emf.isOpen())\n+        if (emf == null || !emf.isOpen())\n             return false;\n+        \n+        closeAllOpenEMs(emf);\n+        emf.close();\n+        return !emf.isOpen();\n+    }\n+\n+    /**\n+     * Closes all open entity managers after first rolling back any open transactions\n+     */\n+    protected void closeAllOpenEMs(EntityManagerFactory emf) {\n+        if (emf == null || !emf.isOpen())\n+            return;\n \n         for (Iterator iter = ((AbstractBrokerFactory) JPAFacadeHelper\n             .toBrokerFactory(emf)).getOpenBrokers().iterator();\n@@ -154,13 +164,11 @@ protected boolean closeEMF(EntityManagerFactory emf) {\n                 em.close();\n             }\n         }\n-\n-        emf.close();\n-        return !emf.isOpen();\n     }\n \n     /**\n-     * Delete all instances of the given types using bulk delete queries.\n+     * Delete all instances of the given types using bulk delete queries,\n+     * but do not close any open entity managers.\n      */\n     protected void clear(EntityManagerFactory emf, Class... types) {\n         if (emf == null || types.length == 0)\n@@ -172,26 +180,34 @@ protected void clear(EntityManagerFactory emf, Class... types) {\n             if (meta != null)\n                 metas.add(meta);\n         }\n-        clear(emf, metas.toArray(new ClassMetaData[metas.size()]));\n+        clear(emf, false, metas.toArray(new ClassMetaData[metas.size()]));\n     }\n \n     /**\n      * Delete all instances of the persistent types registered with the given\n-     * factory using bulk delete queries.\n+     * factory using bulk delete queries, after first closing all open entity\n+     * managers (and rolling back any open transactions).\n      */\n     protected void clear(EntityManagerFactory emf) {\n         if (emf == null)\n             return;\n-        clear(emf, ((OpenJPAEntityManagerFactorySPI) emf).getConfiguration().\n+        clear(emf, true, ((OpenJPAEntityManagerFactorySPI) emf).getConfiguration().\n             getMetaDataRepositoryInstance().getMetaDatas());\n     }\n \n     /**\n      * Delete all instances of the given types using bulk delete queries.\n+     * @param closeEMs TODO\n      */\n-    private void clear(EntityManagerFactory emf, ClassMetaData... types) {\n+    private void clear(EntityManagerFactory emf, boolean closeEMs, ClassMetaData... types) {\n         if (emf == null || types.length == 0)\n             return;\n+        \n+        // prevent deadlock by closing the open entity managers \n+        // and rolling back any open transactions \n+        // before issuing delete statements on a new entity manager.\n+        if (closeEMs)\n+            closeAllOpenEMs(emf);\n \n         EntityManager em = emf.createEntityManager();\n         em.getTransaction().begin();"}]}

