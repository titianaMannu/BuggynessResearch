{"sha":"b761732fdf60ee4207aaca6002e63f9dbf1bea84","node_id":"MDY6Q29tbWl0MjA2MzY0OmI3NjE3MzJmZGY2MGVlNDIwN2FhY2E2MDAyZTYzZjlkYmYxYmVhODQ=","commit":{"author":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-07-19T01:07:53Z"},"committer":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-07-19T01:07:53Z"},"message":"OPENJPA-240 XMLMapping Query testcase\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@557442 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"439afbb83a84527bf9f1c91184aa46d38c860dea","url":"https://api.github.com/repos/apache/openjpa/git/trees/439afbb83a84527bf9f1c91184aa46d38c860dea"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b761732fdf60ee4207aaca6002e63f9dbf1bea84","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b761732fdf60ee4207aaca6002e63f9dbf1bea84","html_url":"https://github.com/apache/openjpa/commit/b761732fdf60ee4207aaca6002e63f9dbf1bea84","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b761732fdf60ee4207aaca6002e63f9dbf1bea84/comments","author":null,"committer":null,"parents":[{"sha":"a275b7aefb43a9de0e183cbaff5de9b0489e59e2","url":"https://api.github.com/repos/apache/openjpa/commits/a275b7aefb43a9de0e183cbaff5de9b0489e59e2","html_url":"https://github.com/apache/openjpa/commit/a275b7aefb43a9de0e183cbaff5de9b0489e59e2"}],"stats":{"total":1292,"additions":1292,"deletions":0},"files":[{"sha":"0599a6b8863a0ba83113212d65ee929371a4d9e7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/entities/Customer.java","status":"added","additions":131,"deletions":0,"changes":131,"blob_url":"https://github.com/apache/openjpa/blob/b761732fdf60ee4207aaca6002e63f9dbf1bea84/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/entities/Customer.java","raw_url":"https://github.com/apache/openjpa/raw/b761732fdf60ee4207aaca6002e63f9dbf1bea84/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/entities/Customer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/entities/Customer.java?ref=b761732fdf60ee4207aaca6002e63f9dbf1bea84","patch":"@@ -0,0 +1,131 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.xmlmapping.entities;\r\n+\r\n+import javax.persistence.*;\r\n+import java.util.Collection;\r\n+import java.util.ArrayList;\r\n+\r\n+@Entity\r\n+@Table(name=\"TCUSTOMER\")\r\n+public class Customer {\r\n+\t\r\n+\t@Embeddable\r\n+\tpublic static class CustomerKey {\r\n+\t\tpublic String countryCode;\r\n+\t\tpublic int id;\r\n+\t\t\r\n+\t\tpublic CustomerKey(){}\r\n+\t\t\r\n+\t\tpublic  CustomerKey(String cc, int id){\r\n+\t\t\tcountryCode=cc;\r\n+\t\t\tthis.id=id;\r\n+\t\t}\r\n+\t\t\r\n+\t\tpublic String toString() {\r\n+\t\t\treturn countryCode+\"/\"+id;\r\n+\t\t}\r\n+\t\t@Override\r\n+\t\tpublic boolean equals(Object obj){\r\n+\t\t\tif (obj == this)\r\n+                return true;\r\n+\t\t\tif (! (obj instanceof CustomerKey))\r\n+                return false;\r\n+\t\t\tCustomerKey key = (CustomerKey)obj;\r\n+\t\t\tif (key.countryCode.equals(this.countryCode)\r\n+                && key.id==this.id)\r\n+                return true;\r\n+\t\t\treturn false;\r\n+\t\t}\r\n+\t\t\r\n+\t\t@Override\r\n+\t\tpublic int hashCode() {\r\n+\t\t\treturn this.countryCode.hashCode()\r\n+\t\t\t\t^ this.id;\r\n+\t\t}\r\n+\t}\r\n+\t\r\n+\tpublic enum CreditRating { POOR, GOOD, EXCELLENT };\r\n+\r\n+\t@EmbeddedId\r\n+\tCustomerKey cid;\r\n+\t@Column(length=30)\r\n+\tString name;\r\n+\t@Enumerated\r\n+\tCreditRating creditRating;\r\n+\t@Embedded\r\n+\tEAddress address;\r\n+\t@Version\r\n+\tlong version;\r\n+\t\r\n+\t@OneToMany(fetch=FetchType.LAZY, mappedBy=\"customer\")\r\n+\tprivate Collection<Order> orders = new ArrayList<Order>();\r\n+\t\t\r\n+\tpublic Customer() {   \r\n+    }\r\n+\t\r\n+\tpublic Customer(CustomerKey cid, String name, CreditRating rating) {\r\n+\t\tthis.cid=cid;\r\n+\t\tthis.name=name;\r\n+\t\tthis.creditRating=rating;\r\n+\t}\t\r\n+\r\n+\tpublic String getName() {\r\n+\t\treturn name;\r\n+\t}\r\n+\r\n+    public void setName(String name) {\r\n+\t\tthis.name = name;\r\n+\t}\r\n+\r\n+    public CreditRating getRating() {\r\n+\t\treturn creditRating;\r\n+\t}\r\n+\r\n+    public void setRating(CreditRating rating) {\r\n+\t\tthis.creditRating = rating;\r\n+\t}\r\n+\r\n+\tpublic Collection<Order> getOrders() {\r\n+\t\treturn orders;\r\n+\t}\r\n+\tpublic void setOrders(Collection<Order> orders) {\r\n+\t\tthis.orders = orders;\r\n+\t}\r\n+\t\r\n+\tpublic String toString() {\r\n+\t\treturn \"Customer:\" + cid + \" name:\" + name; \r\n+\t}\r\n+\r\n+\tpublic CustomerKey getCid() {\r\n+\t\treturn cid;\r\n+\t}\r\n+\r\n+\tpublic void setCid(CustomerKey cid) {\r\n+\t\tthis.cid = cid;\r\n+\t}\r\n+\r\n+\tpublic EAddress getAddress() {\r\n+\t\treturn address;\r\n+\t}\r\n+\r\n+\tpublic void setAddress(EAddress address) {\r\n+\t\tthis.address = address;\r\n+\t}\r\n+}\r"},{"sha":"a402817b4c51215f1709c652b82e5d28a573171b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/entities/EAddress.java","status":"added","additions":75,"deletions":0,"changes":75,"blob_url":"https://github.com/apache/openjpa/blob/b761732fdf60ee4207aaca6002e63f9dbf1bea84/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/entities/EAddress.java","raw_url":"https://github.com/apache/openjpa/raw/b761732fdf60ee4207aaca6002e63f9dbf1bea84/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/entities/EAddress.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/entities/EAddress.java?ref=b761732fdf60ee4207aaca6002e63f9dbf1bea84","patch":"@@ -0,0 +1,75 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.xmlmapping.entities;\r\n+import javax.persistence.*;\r\n+\r\n+/* \r\n+ * example of an JPA embeddable class.\r\n+ * This class is used in Customer Entity.\r\n+ */\r\n+\r\n+@Embeddable\r\n+public class EAddress {\r\n+\t@Column(columnDefinition=\"varchar(30)\")\r\n+\tString street;\r\n+\t@Column(columnDefinition=\"varchar(20)\")\r\n+\tString city;\r\n+\t@Column(columnDefinition=\"char(2)\")\r\n+\tString state;\r\n+\t@Column(columnDefinition=\"char(9)\")\r\n+\tString zip;\r\n+\t\r\n+\tpublic EAddress() {}\r\n+\t\r\n+\tpublic EAddress(String street, String city, String state, String zip){\r\n+\t\tthis.street = street;\r\n+\t\tthis.city = city;\r\n+\t\tthis.state = state;\r\n+\t\tthis.zip = zip;\r\n+\t}\r\n+\tpublic String getCity() {\r\n+\t\treturn city;\r\n+\t}\r\n+\tpublic void setCity(String city) {\r\n+\t\tthis.city = city;\r\n+\t}\r\n+\tpublic String getState() {\r\n+\t\treturn state;\r\n+\t}\r\n+\tpublic void setState(String state) {\r\n+\t\tthis.state = state;\r\n+\t}\r\n+\tpublic String getStreet() {\r\n+\t\treturn street;\r\n+\t}\r\n+\tpublic void setStreet(String street) {\r\n+\t\tthis.street = street;\r\n+\t}\r\n+\tpublic String getZip() {\r\n+\t\treturn zip;\r\n+\t}\r\n+\tpublic void setZip(String zip) {\r\n+\t\tthis.zip = zip;\r\n+\t}\r\n+\t\r\n+\tpublic void modifyCity(String value){\r\n+\t\tcity=value;\r\n+\t}\r\n+\r\n+}\r"},{"sha":"c0f2643ead5b8ce26373e93311daa31a0a677ca5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/entities/Order.java","status":"added","additions":98,"deletions":0,"changes":98,"blob_url":"https://github.com/apache/openjpa/blob/b761732fdf60ee4207aaca6002e63f9dbf1bea84/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/entities/Order.java","raw_url":"https://github.com/apache/openjpa/raw/b761732fdf60ee4207aaca6002e63f9dbf1bea84/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/entities/Order.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/entities/Order.java?ref=b761732fdf60ee4207aaca6002e63f9dbf1bea84","patch":"@@ -0,0 +1,98 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.xmlmapping.entities;\r\n+\r\n+import org.apache.openjpa.persistence.xmlmapping.xmlbindings.myaddress.Address;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+import org.apache.openjpa.persistence.Persistent;\r\n+import org.apache.openjpa.persistence.jdbc.Strategy;\r\n+\r\n+@Entity\r\n+@Table(name=\"TORDER\")\r\n+public class Order {\r\n+    @Id \r\n+    int oid;\r\n+\r\n+    double amount;\r\n+    boolean delivered;\r\n+\r\n+    @ManyToOne(fetch=FetchType.LAZY)\r\n+    Customer customer;\r\n+\r\n+    @Persistent\r\n+    @Strategy(\"org.apache.openjpa.jdbc.meta.strats.XMLValueHandler\")\r\n+    Address shipAddress;\r\n+\r\n+    @Version\r\n+    long version;\r\n+\r\n+    public Order(){}\r\n+\r\n+    public Order(int id,  double amt, boolean delivered, Customer c) {\r\n+        oid = id;\r\n+        amount = amt;\r\n+        this.delivered = delivered;\r\n+        customer = c;\r\n+        if (c != null)\r\n+            c.getOrders().add(this);\r\n+    }\r\n+\r\n+    public double getAmount() {\r\n+        return amount;\r\n+    }\r\n+\r\n+    public void setAmount(double amount) {\r\n+        this.amount = amount;\r\n+    }\r\n+\r\n+    public Customer getCustomer() {\r\n+        return customer;\r\n+    }\r\n+\r\n+    public void setCustomer(Customer customer) {\r\n+        this.customer = customer;\r\n+    }\r\n+\r\n+    public boolean isDelivered() {\r\n+        return delivered;\r\n+    }\r\n+\r\n+    public void setDelivered(boolean delivered) {\r\n+        this.delivered = delivered;\r\n+    }\r\n+\r\n+    public int getOid() {\r\n+        return oid;\r\n+    }\r\n+\r\n+    public String toString(){\r\n+        return \"Order:\" + oid + \" amount:\" + amount + \" delivered:\" + delivered\r\n+        + \" customer:\" + ((customer != null) ? customer.getCid() : -1);\r\n+    }\r\n+\r\n+    public Address getShipAddress() {\r\n+        return shipAddress;\r\n+    }\r\n+\r\n+    public void setShipAddress(Address shipAddress) {\r\n+        this.shipAddress = shipAddress;\r\n+    }\r\n+}\r"},{"sha":"829307ec8bf9c5f8a7a4fabfcbe786ee536be315","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/query/TestXMLCustomerOrder.java","status":"added","additions":290,"deletions":0,"changes":290,"blob_url":"https://github.com/apache/openjpa/blob/b761732fdf60ee4207aaca6002e63f9dbf1bea84/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/query/TestXMLCustomerOrder.java","raw_url":"https://github.com/apache/openjpa/raw/b761732fdf60ee4207aaca6002e63f9dbf1bea84/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/query/TestXMLCustomerOrder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/query/TestXMLCustomerOrder.java?ref=b761732fdf60ee4207aaca6002e63f9dbf1bea84","patch":"@@ -0,0 +1,290 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.xmlmapping.query;\r\n+\r\n+import java.io.FileWriter;\r\n+import java.util.List;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityTransaction;\r\n+import javax.persistence.Query;\r\n+\r\n+import junit.textui.TestRunner;\r\n+\r\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n+import org.apache.openjpa.jdbc.sql.DB2Dictionary;\r\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\r\n+import org.apache.openjpa.jdbc.sql.OracleDictionary;\r\n+import org.apache.openjpa.jdbc.sql.SQLServerDictionary;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\r\n+import org.apache.openjpa.persistence.test.SQLListenerTestCase;\r\n+import org.apache.openjpa.persistence.xmlmapping.xmlbindings.myaddress.*;\r\n+import org.apache.openjpa.persistence.xmlmapping.entities.*;\r\n+import org.apache.openjpa.persistence.xmlmapping.entities.Customer.CreditRating;\r\n+\r\n+/**\r\n+ * Test query with predicates on persistent field mapped to XML column.\r\n+ * \r\n+ * @author Catalina Wei\r\n+ * @since 1.0.0\r\n+ */\r\n+public class TestXMLCustomerOrder\r\n+    extends SQLListenerTestCase {\r\n+\r\n+    public void setUp() {\r\n+        setUp(org.apache.openjpa.persistence.xmlmapping.entities.Customer.class\r\n+            , org.apache.openjpa.persistence.xmlmapping.entities.Customer.CustomerKey.class\r\n+            , org.apache.openjpa.persistence.xmlmapping.entities.Order.class\r\n+            , org.apache.openjpa.persistence.xmlmapping.entities.EAddress.class\r\n+            ,  \"openjpa.MetaDataRepository\"\r\n+            ,  \"org.apache.openjpa.jdbc.meta.XMLMappingRepository\"\r\n+//            ,  \"openjpa.ConnectionDriverName\"\r\n+//            ,  \"org.apache.commons.dbcp.BasicDataSource\"\r\n+//            ,  \"openjpa.ConnectionProperties\"\r\n+//            ,  \"DriverClassName=com.ibm.db2.jcc.DB2Driver,Url=jdbc:db2:testdb\"\r\n+            );\r\n+    }\r\n+\r\n+    public static void main(String[] args) {\r\n+        TestRunner.run(TestXMLCustomerOrder.class);\r\n+    }\r\n+\r\n+    public void testXMLCustomerOrder() {\t\r\n+        OpenJPAEntityManager em =\r\n+            OpenJPAPersistence.cast(emf.createEntityManager());\r\n+        DBDictionary dict = ((JDBCConfiguration) em.getConfiguration())\r\n+            .getDBDictionaryInstance();\r\n+\r\n+        // skip if dictionary has no support for XML column type \r\n+        if (!dict.supportsXMLColumn)\r\n+            return;\r\n+\r\n+        String sqllog = TestXMLCustomerOrder.class.getName();\r\n+        sqllog = sqllog.replace('.', '/');\r\n+        sqllog = \"./\" + sqllog;\r\n+        if (dict instanceof DB2Dictionary)\r\n+            sqllog += \".db2\";\r\n+        else if (dict instanceof OracleDictionary)\r\n+            sqllog += \".oracle\";\r\n+        else if (dict instanceof SQLServerDictionary)\r\n+            sqllog += \".sqlserver\";\r\n+\r\n+        // For platform specific expected sqls are under resources.\r\n+        // The generated sql of the test is captured and written to file:\r\n+        //     ./TestXMLCustomerOrder.log\r\n+        // This output file contents should match with the platform specfic sqls.        \r\n+        System.out.println(\"Expected pushdown SQL log file is in: \" + sqllog);\r\n+        \r\n+        sql.clear();\r\n+\r\n+        try {\r\n+\t\t\tem.getTransaction().begin();\r\n+\t\t\tdeleteAllData(em );\r\n+\t\t\tem.getTransaction().commit();\r\n+\t\t\t\r\n+            em.getTransaction().begin();\r\n+\t\t\tloadData(em);\r\n+\t\t\tem.getTransaction().commit();\r\n+\t\t\t\r\n+\t\t\tem.close();\r\n+\t\t\t\r\n+\t\t\t// By closing and recreating the EntityManager, \r\n+\t\t\t// this guarantees that data will be retrieved from \r\n+\t\t\t// the database rather than just reused from the \r\n+\t\t\t// persistence context created by the load methods above.\r\n+\t\t\t\r\n+\t\t\tem = emf.createEntityManager();\r\n+\t\t\t\r\n+\t\t\tSystem.err.println(\"Main started.\");\r\n+            int test=1;\r\n+            List<Address> addrs = em.createQuery(\"select o.shipAddress from Order o\")\r\n+                .getResultList();\r\n+            for (Address addr : addrs) {\r\n+                System.out.println(\"addr= \" + addr.toString());\r\n+            }\r\n+            String qstrings[] = {\r\n+                \"select o from Order o\",\r\n+                \"select o from Order o, Order o2 where o.shipAddress.city \" +\r\n+                    \"= o2.shipAddress.city\",\r\n+                \"select o from Order o, Customer c where o.shipAddress.city \" +\r\n+                    \"= c.address.city\",\r\n+                \"select o from Order o where o.shipAddress.city = 'San Jose'\"\r\n+            };\r\n+            String qstring = null;\r\n+            for (int i = 0;i < qstrings.length; i++) {\r\n+                qstring = qstrings[i];\r\n+                List orders = em.createQuery(qstring).getResultList();\r\n+                printOrders(orders, test++);\r\n+            }\r\n+            \r\n+            // query passing parameters\r\n+            qstring = \"select o from Order o where o.shipAddress.city = ?1\";\r\n+            Query q5 = em.createQuery(qstring);\r\n+            q5.setParameter(1, \"San Jose\");\r\n+            List orders =q5.getResultList();\r\n+            printOrders(orders, test++);\r\n+            \r\n+            qstring = \"select o from Order o where ?1 = o.shipAddress.city\";\r\n+            Query q6 = em.createQuery(qstring);\r\n+            q6.setParameter(1, \"San Jose\");\r\n+            orders = q6.getResultList();\r\n+            printOrders(orders, test++);\r\n+            \r\n+            em.close();\r\n+\r\n+            // test updates\r\n+            em = emf.createEntityManager();\r\n+            testUpdateShipaddress(em, test++);\r\n+            \r\n+            em.close();\r\n+            em = emf.createEntityManager();\r\n+\r\n+            // query after updates \r\n+            orders = em.createQuery(\"select o from Order o\").getResultList();\r\n+            System.out.println(\"After Update:\");\r\n+            printOrders(orders, test++);\r\n+\r\n+            // queries expecting exceptions\r\n+            String[] badqstrings = {\r\n+                \"select o from Order o where o.shipAddress.city = 95141\",\r\n+                \"select o from Order o where o.shipAddress.street \" +\r\n+                    \"= '555 Bailey'\",\r\n+                \"select o from Order o where o.shipAddress.zip = 95141\"\r\n+            };\r\n+            for (int i = 0; i < badqstrings.length; i++) {\r\n+                qstring = badqstrings[i];\r\n+                try {\r\n+                    System.out.println(\"\\n>> Query \"+test+\": \"+qstring);\r\n+                    test++;\r\n+                    orders = em.createQuery(qstring).getResultList();\r\n+                }\r\n+                catch (Exception e){\r\n+                    System.out.println(\"Exception: \"+e);\r\n+                }  \r\n+            }\r\n+\r\n+            dumpSql();\r\n+            em.close();\r\n+            emf.close();\r\n+            System.out.println(\"Main ended normally.\");\r\n+        } catch (Exception e){\r\n+            System.out.println(\"Exception: \"+e);\r\n+            e.printStackTrace();\r\n+        }       \r\n+    }\r\n+    \r\n+    private void dumpSql() {\r\n+        String out = \"./TestXMLCustomerOrder.log\";\r\n+        try {\r\n+            FileWriter fw = new FileWriter(out);\r\n+            for (int i = 0; i < sql.size(); i++) {\r\n+                System.out.println(sql.get(i));\r\n+                fw.write(sql.get(i)+\"\\n\");\r\n+            }\r\n+            fw.close();\r\n+        } catch (Exception e) {            \r\n+        }\r\n+    }\r\n+\r\n+    private void printOrders(List orders, int test) {\r\n+        System.out.println(\"\\n>> Query \"+test);\r\n+        System.out.println(\"result size = \"+orders.size());\r\n+        for (int i = 0; i < orders.size(); i++) {\r\n+            printOrder((Order) orders.get(i));\r\n+        }\r\n+    }\r\n+\r\n+    private void loadData(EntityManager em) {\r\n+\t\t\r\n+\t\tObjectFactory addressFactory = new ObjectFactory();\r\n+\t\t\r\n+        Customer c2 = new Customer();\r\n+        c2.setCid( new Customer.CustomerKey(\"USA\", 2) );\r\n+        c2.setName(\"A&J Auto\");\r\n+        c2.setRating( CreditRating.GOOD );\r\n+        c2.setAddress(new EAddress(\"2480 Campbell Ave\", \"Campbell\", \"CA\"\r\n+            , \"95123\"));\r\n+        em.persist(c2);\r\n+        \r\n+\t\tCustomer c1 = new Customer();\r\n+\t\tc1.setCid( new Customer.CustomerKey(\"USA\", 1) );\r\n+\t\tc1.setName(\"Harry's Auto\");\r\n+\t\tc1.setRating( CreditRating.GOOD );\r\n+\t\tc1.setAddress( new EAddress(\"12500 Monterey\", \"San Jose\", \"CA\"\r\n+            , \"95141\"));\r\n+\t\tem.persist(c1);\r\n+\t\t\r\n+\t\tOrder o1 = new Order(10, 850, false, c1);\r\n+\t\tUSAAddress addr1 = addressFactory.createUSAAddress();\r\n+\t\taddr1.setCity(\"San Jose\");\r\n+\t\taddr1.setState(\"CA\");\r\n+\t\taddr1.setZIP(new Integer(\"95141\"));\r\n+\t\taddr1.getStreet().add(\"12500 Monterey\");\r\n+\t\taddr1.setName( c1.getName());\r\n+\t\to1.setShipAddress(addr1);\r\n+\t\tem.persist(o1);\r\n+\t\t\r\n+\t\tOrder o2 = new Order(20, 1000, false, c1);\r\n+\t\tCANAddress addr2 = addressFactory.createCANAddress();\r\n+\t\taddr2.setName(c2.getName());\r\n+\t\taddr2.getStreet().add(\"123 Warden Road\");\r\n+\t\taddr2.setCity(\"Markham\");\r\n+\t\taddr2.setPostalCode(\"L6G 1C7\");\r\n+\t\taddr2.setProvince(\"ON\");\r\n+\t\to2.setShipAddress(addr2);\r\n+\t\tem.persist(o2);\r\n+\t}\r\n+\t\r\n+    private void testUpdateShipaddress(EntityManager em, int test)\r\n+        throws Exception {\r\n+        em.getTransaction().begin();\r\n+        String query = \"select o from Order o where o.shipAddress.city \" +\r\n+            \"= 'San Jose'\";\r\n+        List orders = em.createQuery(query).getResultList(); \r\n+        System.out.println(\"Before Update: \");\r\n+        printOrders(orders, test);\r\n+        em.getTransaction().commit();\r\n+        \r\n+        // update in separate transaction                    \r\n+        Order o = (Order) orders.get(0);\r\n+        EntityTransaction et = em.getTransaction();\r\n+        et.begin();\r\n+        Address addr = o.getShipAddress();\r\n+        addr.setCity(\"Cupertino\");\r\n+        if (addr instanceof USAAddress)\r\n+            ((USAAddress) addr).setZIP(95014);\r\n+        \r\n+        // update shipAddress\r\n+        o.setShipAddress(addr);\r\n+        et.commit();\r\n+    }\r\n+\t\r\n+\tprivate void deleteAllData(EntityManager em) {\r\n+\t\tem.createQuery(\"delete from Order o\").executeUpdate();\r\n+\t\tem.createQuery(\"delete from Customer c\").executeUpdate();\r\n+\t}\r\n+\r\n+\tprivate void printOrder(Order o){\r\n+        System.out.println(\" Customer ID:\"+o.getCustomer().getCid());\r\n+\t\tSystem.out.println(\" Order Number:\"+o.getOid());\r\n+\t\tSystem.out.println(\"Ship to: \"+o.getShipAddress().toString());\r\n+\t\tSystem.out.println();\t\t\r\n+\t}\r\n+}\r"},{"sha":"d84e1ca80926ccf9370fe9d599af43e7266c6be5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/xmlbindings/myaddress/Address.java","status":"added","additions":142,"deletions":0,"changes":142,"blob_url":"https://github.com/apache/openjpa/blob/b761732fdf60ee4207aaca6002e63f9dbf1bea84/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/xmlbindings/myaddress/Address.java","raw_url":"https://github.com/apache/openjpa/raw/b761732fdf60ee4207aaca6002e63f9dbf1bea84/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/xmlbindings/myaddress/Address.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/xmlbindings/myaddress/Address.java?ref=b761732fdf60ee4207aaca6002e63f9dbf1bea84","patch":"@@ -0,0 +1,142 @@\n+//\r\n+// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.0.2-b01-fcs \r\n+// See <a href=\"http://java.sun.com/xml/jaxb\">http://java.sun.com/xml/jaxb</a> \r\n+// Any modifications to this file will be lost upon recompilation of the source schema. \r\n+// Generated on: 2006.10.04 at 03:08:16 PM PDT \r\n+//\r\n+\r\n+\r\n+package org.apache.openjpa.persistence.xmlmapping.xmlbindings.myaddress;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+import javax.xml.bind.annotation.XmlAccessType;\r\n+import javax.xml.bind.annotation.XmlAccessorType;\r\n+import javax.xml.bind.annotation.XmlElement;\r\n+import javax.xml.bind.annotation.XmlRootElement;\r\n+import javax.xml.bind.annotation.XmlType;\r\n+\r\n+/**\r\n+ * <p>Java class for Address complex type.\r\n+ * \r\n+ * <p>The following schema fragment specifies the expected content contained within this class.\r\n+ * \r\n+ * <pre>\r\n+ * &lt;complexType name=\"Address\">\r\n+ *   &lt;complexContent>\r\n+ *     &lt;restriction base=\"{http://www.w3.org/2001/XMLSchema}anyType\">\r\n+ *       &lt;sequence>\r\n+ *         &lt;element name=\"Name\" type=\"{http://www.w3.org/2001/XMLSchema}string\"/>\r\n+ *         &lt;element name=\"Street\" type=\"{http://www.w3.org/2001/XMLSchema}string\" maxOccurs=\"3\"/>\r\n+ *         &lt;element name=\"City\" type=\"{http://www.w3.org/2001/XMLSchema}string\"/>\r\n+ *       &lt;/sequence>\r\n+ *     &lt;/restriction>\r\n+ *   &lt;/complexContent>\r\n+ * &lt;/complexType>\r\n+ * </pre>\r\n+ * \r\n+ * \r\n+ */\r\n+\r\n+@XmlRootElement\r\n+@XmlAccessorType(XmlAccessType.FIELD)\r\n+@XmlType(name = \"Address\", propOrder = {\r\n+    \"name\",\r\n+    \"street\",\r\n+    \"city\"\r\n+})\r\n+public class Address {\r\n+\r\n+    @XmlElement(name = \"Name\")\r\n+    protected String name;\r\n+    @XmlElement(name = \"Street\")\r\n+    protected List<String> street;\r\n+    @XmlElement(name = \"City\")\r\n+    protected String city;\r\n+\r\n+    /**\r\n+     * Gets the value of the name property.\r\n+     * \r\n+     * @return\r\n+     *     possible object is\r\n+     *     {@link String }\r\n+     *     \r\n+     */\r\n+    public String getName() {\r\n+        return name;\r\n+    }\r\n+\r\n+    /**\r\n+     * Sets the value of the name property.\r\n+     * \r\n+     * @param value\r\n+     *     allowed object is\r\n+     *     {@link String }\r\n+     *     \r\n+     */\r\n+    public void setName(String value) {\r\n+        this.name = value;\r\n+    }\r\n+\r\n+    /**\r\n+     * Gets the value of the street property.\r\n+     * \r\n+     * <p>\r\n+     * This accessor method returns a reference to the live list,\r\n+     * not a snapshot. Therefore any modification you make to the\r\n+     * returned list will be present inside the JAXB object.\r\n+     * This is why there is not a <CODE>set</CODE> method for the street property.\r\n+     * \r\n+     * <p>\r\n+     * For example, to add a new item, do as follows:\r\n+     * <pre>\r\n+     *    getStreet().add(newItem);\r\n+     * </pre>\r\n+     * \r\n+     * \r\n+     * <p>\r\n+     * Objects of the following type(s) are allowed in the list\r\n+     * {@link String }\r\n+     * \r\n+     * \r\n+     */\r\n+    public List<String> getStreet() {\r\n+        if (street == null) {\r\n+            street = new ArrayList<String>();\r\n+        }\r\n+        return this.street;\r\n+    }\r\n+\r\n+    /**\r\n+     * Gets the value of the city property.\r\n+     * \r\n+     * @return\r\n+     *     possible object is\r\n+     *     {@link String }\r\n+     *     \r\n+     */\r\n+    public String getCity() {\r\n+        return city;\r\n+    }\r\n+\r\n+    /**\r\n+     * Sets the value of the city property.\r\n+     * \r\n+     * @param value\r\n+     *     allowed object is\r\n+     *     {@link String }\r\n+     *     \r\n+     */\r\n+    public void setCity(String value) {\r\n+        this.city = value;\r\n+    }\r\n+\r\n+    public String toString() {\r\n+        StringBuffer sb = new StringBuffer();\r\n+        sb.append(this.name);\r\n+        for (int i=0; i< this.getStreet().size(); i++)\r\n+               sb.append(\"\\n         \"+this.getStreet().get(i));\r\n+        sb.append(\"\\n         \"+this.getCity());\r\n+        return sb.toString();\r\n+    }\r\n+}\r"},{"sha":"31999bee30f4a6edb57d107af778a314dfc8bd21","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/xmlbindings/myaddress/CANAddress.java","status":"added","additions":111,"deletions":0,"changes":111,"blob_url":"https://github.com/apache/openjpa/blob/b761732fdf60ee4207aaca6002e63f9dbf1bea84/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/xmlbindings/myaddress/CANAddress.java","raw_url":"https://github.com/apache/openjpa/raw/b761732fdf60ee4207aaca6002e63f9dbf1bea84/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/xmlbindings/myaddress/CANAddress.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/xmlbindings/myaddress/CANAddress.java?ref=b761732fdf60ee4207aaca6002e63f9dbf1bea84","patch":"@@ -0,0 +1,111 @@\n+//\r\n+// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.0.2-b01-fcs \r\n+// See <a href=\"http://java.sun.com/xml/jaxb\">http://java.sun.com/xml/jaxb</a> \r\n+// Any modifications to this file will be lost upon recompilation of the source schema. \r\n+// Generated on: 2006.10.04 at 03:08:16 PM PDT \r\n+//\r\n+\r\n+\r\n+package org.apache.openjpa.persistence.xmlmapping.xmlbindings.myaddress;\r\n+\r\n+import javax.xml.bind.JAXBElement;\r\n+import javax.xml.bind.annotation.XmlAccessType;\r\n+import javax.xml.bind.annotation.XmlAccessorType;\r\n+import javax.xml.bind.annotation.XmlElement;\r\n+import javax.xml.bind.annotation.XmlRootElement;\r\n+import javax.xml.bind.annotation.XmlType;\r\n+\r\n+\r\n+/**\r\n+ * <p>Java class for CAN_Address complex type.\r\n+ * \r\n+ * <p>The following schema fragment specifies the expected content contained within this class.\r\n+ * \r\n+ * <pre>\r\n+ * &lt;complexType name=\"CAN_Address\">\r\n+ *   &lt;complexContent>\r\n+ *     &lt;extension base=\"{}Address\">\r\n+ *       &lt;sequence>\r\n+ *         &lt;element name=\"Province\" type=\"{http://www.w3.org/2001/XMLSchema}string\"/>\r\n+ *         &lt;element name=\"PostalCode\" type=\"{http://www.w3.org/2001/XMLSchema}string\"/>\r\n+ *       &lt;/sequence>\r\n+ *     &lt;/extension>\r\n+ *   &lt;/complexContent>\r\n+ * &lt;/complexType>\r\n+ * </pre>\r\n+ * \r\n+ * \r\n+ */\r\n+@XmlRootElement\r\n+@XmlAccessorType(XmlAccessType.FIELD)\r\n+@XmlType(name = \"CAN_Address\", propOrder = {\r\n+    \"province\",\r\n+    \"postalCode\"\r\n+})\r\n+public class CANAddress\r\n+    extends Address\r\n+{\r\n+\r\n+    @XmlElement(name = \"Province\")\r\n+    protected String province;\r\n+    @XmlElement(name = \"PostalCode\")\r\n+    protected String postalCode;\r\n+\r\n+    /**\r\n+     * Gets the value of the province property.\r\n+     * \r\n+     * @return\r\n+     *     possible object is\r\n+     *     {@link String }\r\n+     *     \r\n+     */\r\n+    public String getProvince() {\r\n+        return province;\r\n+    }\r\n+\r\n+    /**\r\n+     * Sets the value of the province property.\r\n+     * \r\n+     * @param value\r\n+     *     allowed object is\r\n+     *     {@link String }\r\n+     *     \r\n+     */\r\n+    public void setProvince(String value) {\r\n+        this.province = value;\r\n+    }\r\n+\r\n+    /**\r\n+     * Gets the value of the postalCode property.\r\n+     * \r\n+     * @return\r\n+     *     possible object is\r\n+     *     {@link String }\r\n+     *     \r\n+     */\r\n+    public String getPostalCode() {\r\n+        return postalCode;\r\n+    }\r\n+\r\n+    /**\r\n+     * Sets the value of the postalCode property.\r\n+     * \r\n+     * @param value\r\n+     *     allowed object is\r\n+     *     {@link String }\r\n+     *     \r\n+     */\r\n+    public void setPostalCode(String value) {\r\n+        this.postalCode = value;\r\n+    }\r\n+\r\n+    public String toString() {\r\n+        StringBuffer sb = new StringBuffer();\r\n+        sb.append(super.toString())\r\n+            .append(\"\\n         \")\r\n+            .append(this.province)\r\n+            .append(\" \")\r\n+            .append(this.postalCode);\r\n+        return sb.toString();\r\n+    }\r\n+}\r"},{"sha":"eb178e4215e9c94749bfb833f6b3d4489136f622","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/xmlbindings/myaddress/GBRAddress.java","status":"added","additions":111,"deletions":0,"changes":111,"blob_url":"https://github.com/apache/openjpa/blob/b761732fdf60ee4207aaca6002e63f9dbf1bea84/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/xmlbindings/myaddress/GBRAddress.java","raw_url":"https://github.com/apache/openjpa/raw/b761732fdf60ee4207aaca6002e63f9dbf1bea84/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/xmlbindings/myaddress/GBRAddress.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/xmlbindings/myaddress/GBRAddress.java?ref=b761732fdf60ee4207aaca6002e63f9dbf1bea84","patch":"@@ -0,0 +1,111 @@\n+//\r\n+// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.0.2-b01-fcs \r\n+// See <a href=\"http://java.sun.com/xml/jaxb\">http://java.sun.com/xml/jaxb</a> \r\n+// Any modifications to this file will be lost upon recompilation of the source schema. \r\n+// Generated on: 2006.10.04 at 03:08:16 PM PDT \r\n+//\r\n+\r\n+\r\n+package org.apache.openjpa.persistence.xmlmapping.xmlbindings.myaddress;\r\n+\r\n+import javax.xml.bind.JAXBElement;\r\n+import javax.xml.bind.annotation.XmlAccessType;\r\n+import javax.xml.bind.annotation.XmlAccessorType;\r\n+import javax.xml.bind.annotation.XmlElement;\r\n+import javax.xml.bind.annotation.XmlRootElement;\r\n+import javax.xml.bind.annotation.XmlType;\r\n+\r\n+\r\n+/**\r\n+ * <p>Java class for GBR_Address complex type.\r\n+ * \r\n+ * <p>The following schema fragment specifies the expected content contained within this class.\r\n+ * \r\n+ * <pre>\r\n+ * &lt;complexType name=\"GBR_Address\">\r\n+ *   &lt;complexContent>\r\n+ *     &lt;extension base=\"{}Address\">\r\n+ *       &lt;sequence>\r\n+ *         &lt;element name=\"County\" type=\"{http://www.w3.org/2001/XMLSchema}string\"/>\r\n+ *         &lt;element name=\"Postcode\" type=\"{http://www.w3.org/2001/XMLSchema}string\"/>\r\n+ *       &lt;/sequence>\r\n+ *     &lt;/extension>\r\n+ *   &lt;/complexContent>\r\n+ * &lt;/complexType>\r\n+ * </pre>\r\n+ * \r\n+ * \r\n+ */\r\n+@XmlRootElement(name = \"GBR_Address\")\r\n+@XmlAccessorType(XmlAccessType.FIELD)\r\n+@XmlType(name = \"GBR_Address\", propOrder = {\r\n+    \"county\",\r\n+    \"postcode\"\r\n+})\r\n+public class GBRAddress\r\n+    extends Address\r\n+{\r\n+\r\n+    @XmlElement(name = \"County\")\r\n+    protected String county;\r\n+    @XmlElement(name = \"Postcode\")\r\n+    protected String postcode;\r\n+\r\n+    /**\r\n+     * Gets the value of the county property.\r\n+     * \r\n+     * @return\r\n+     *     possible object is\r\n+     *     {@link String }\r\n+     *     \r\n+     */\r\n+    public String getCounty() {\r\n+        return county;\r\n+    }\r\n+\r\n+    /**\r\n+     * Sets the value of the county property.\r\n+     * \r\n+     * @param value\r\n+     *     allowed object is\r\n+     *     {@link String }\r\n+     *     \r\n+     */\r\n+    public void setCounty(String value) {\r\n+        this.county = value;\r\n+    }\r\n+\r\n+    /**\r\n+     * Gets the value of the postcode property.\r\n+     * \r\n+     * @return\r\n+     *     possible object is\r\n+     *     {@link String }\r\n+     *     \r\n+     */\r\n+    public String getPostcode() {\r\n+        return postcode;\r\n+    }\r\n+\r\n+    /**\r\n+     * Sets the value of the postcode property.\r\n+     * \r\n+     * @param value\r\n+     *     allowed object is\r\n+     *     {@link String }\r\n+     *     \r\n+     */\r\n+    public void setPostcode(String value) {\r\n+        this.postcode = value;\r\n+    }\r\n+\r\n+    public String toString() {\r\n+        StringBuffer sb = new StringBuffer();\r\n+        sb.append(super.toString())\r\n+            .append(\"\\n         \")\r\n+            .append(this.county)\r\n+            .append(\" \")\r\n+            .append(this.postcode);\r\n+        return sb.toString();\r\n+    }\r\n+}\r"},{"sha":"60454ef8f084c32fcc3df1538a15575beba8cd08","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/xmlbindings/myaddress/ObjectFactory.java","status":"added","additions":122,"deletions":0,"changes":122,"blob_url":"https://github.com/apache/openjpa/blob/b761732fdf60ee4207aaca6002e63f9dbf1bea84/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/xmlbindings/myaddress/ObjectFactory.java","raw_url":"https://github.com/apache/openjpa/raw/b761732fdf60ee4207aaca6002e63f9dbf1bea84/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/xmlbindings/myaddress/ObjectFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/xmlbindings/myaddress/ObjectFactory.java?ref=b761732fdf60ee4207aaca6002e63f9dbf1bea84","patch":"@@ -0,0 +1,122 @@\n+//\r\n+// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.0.2-b01-fcs \r\n+// See <a href=\"http://java.sun.com/xml/jaxb\">http://java.sun.com/xml/jaxb</a> \r\n+// Any modifications to this file will be lost upon recompilation of the source schema. \r\n+// Generated on: 2006.10.04 at 03:08:16 PM PDT \r\n+//\r\n+\r\n+\r\n+package org.apache.openjpa.persistence.xmlmapping.xmlbindings.myaddress;\r\n+\r\n+import javax.xml.bind.JAXBElement;\r\n+import javax.xml.bind.annotation.XmlElementDecl;\r\n+import javax.xml.bind.annotation.XmlRegistry;\r\n+import javax.xml.namespace.QName;\r\n+\r\n+\r\n+/**\r\n+ * This object contains factory methods for each \r\n+ * Java content interface and Java element interface \r\n+ * generated in the myaddress package. \r\n+ * <p>An ObjectFactory allows you to programatically \r\n+ * construct new instances of the Java representation \r\n+ * for XML content. The Java representation of XML \r\n+ * content can consist of schema derived interfaces \r\n+ * and classes representing the binding of schema \r\n+ * type definitions, element declarations and featureSelection \r\n+ * groups.  Factory methods for each of these are \r\n+ * provided in this class.\r\n+ * \r\n+ */\r\n+@XmlRegistry\r\n+public class ObjectFactory {\r\n+\r\n+    private final static QName _AddrUSA_QNAME = new QName(\"\", \"AddrUSA\");\r\n+    private final static QName _AddrCAN_QNAME = new QName(\"\", \"AddrCAN\");\r\n+    private final static QName _MailAddress_QNAME = new QName(\"\", \"MailAddress\");\r\n+    private final static QName _AddrGBR_QNAME = new QName(\"\", \"AddrGBR\");\r\n+\r\n+    /**\r\n+     * Create a new ObjectFactory that can be used to create new instances of schema derived classes for package: myaddress\r\n+     * \r\n+     */\r\n+    public ObjectFactory() {\r\n+    }\r\n+\r\n+    /**\r\n+     * Create an instance of {@link Address }\r\n+     * \r\n+     */\r\n+    public Address createAddress() {\r\n+        return new Address();\r\n+    }\r\n+\r\n+    /**\r\n+     * Create an instance of {@link ShortAddress }\r\n+     * \r\n+     */\r\n+    public ShortAddress createShortAddress() {\r\n+        return new ShortAddress();\r\n+    }\r\n+\r\n+    /**\r\n+     * Create an instance of {@link USAAddress }\r\n+     * \r\n+     */\r\n+    public USAAddress createUSAAddress() {\r\n+        return new USAAddress();\r\n+    }\r\n+\r\n+    /**\r\n+     * Create an instance of {@link GBRAddress }\r\n+     * \r\n+     */\r\n+    public GBRAddress createGBRAddress() {\r\n+        return new GBRAddress();\r\n+    }\r\n+\r\n+    /**\r\n+     * Create an instance of {@link CANAddress }\r\n+     * \r\n+     */\r\n+    public CANAddress createCANAddress() {\r\n+        return new CANAddress();\r\n+    }\r\n+\r\n+    /**\r\n+     * Create an instance of {@link JAXBElement }{@code <}{@link USAAddress }{@code >}}\r\n+     * \r\n+     */\r\n+    @XmlElementDecl(namespace = \"\", name = \"AddrUSA\", substitutionHeadNamespace = \"\", substitutionHeadName = \"MailAddress\")\r\n+    public JAXBElement<USAAddress> createAddrUSA(USAAddress value) {\r\n+        return new JAXBElement<USAAddress>(_AddrUSA_QNAME, USAAddress.class, null, value);\r\n+    }\r\n+\r\n+    /**\r\n+     * Create an instance of {@link JAXBElement }{@code <}{@link CANAddress }{@code >}}\r\n+     * \r\n+     */\r\n+    @XmlElementDecl(namespace = \"\", name = \"AddrCAN\", substitutionHeadNamespace = \"\", substitutionHeadName = \"MailAddress\")\r\n+    public JAXBElement<CANAddress> createAddrCAN(CANAddress value) {\r\n+        return new JAXBElement<CANAddress>(_AddrCAN_QNAME, CANAddress.class, null, value);\r\n+    }\r\n+\r\n+    /**\r\n+     * Create an instance of {@link JAXBElement }{@code <}{@link Address }{@code >}}\r\n+     * \r\n+     */\r\n+    @XmlElementDecl(namespace = \"\", name = \"MailAddress\")\r\n+    public JAXBElement<Address> createMailAddress(Address value) {\r\n+        return new JAXBElement<Address>(_MailAddress_QNAME, Address.class, null, value);\r\n+    }\r\n+\r\n+    /**\r\n+     * Create an instance of {@link JAXBElement }{@code <}{@link GBRAddress }{@code >}}\r\n+     * \r\n+     */\r\n+    @XmlElementDecl(namespace = \"\", name = \"AddrGBR\", substitutionHeadNamespace = \"\", substitutionHeadName = \"MailAddress\")\r\n+    public JAXBElement<GBRAddress> createAddrGBR(GBRAddress value) {\r\n+        return new JAXBElement<GBRAddress>(_AddrGBR_QNAME, GBRAddress.class, null, value);\r\n+    }\r\n+\r\n+}\r"},{"sha":"063e0ae1fd2bcf93950651b7a8676e364ef8f634","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/xmlbindings/myaddress/ShortAddress.java","status":"added","additions":46,"deletions":0,"changes":46,"blob_url":"https://github.com/apache/openjpa/blob/b761732fdf60ee4207aaca6002e63f9dbf1bea84/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/xmlbindings/myaddress/ShortAddress.java","raw_url":"https://github.com/apache/openjpa/raw/b761732fdf60ee4207aaca6002e63f9dbf1bea84/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/xmlbindings/myaddress/ShortAddress.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/xmlbindings/myaddress/ShortAddress.java?ref=b761732fdf60ee4207aaca6002e63f9dbf1bea84","patch":"@@ -0,0 +1,46 @@\n+//\r\n+// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.0.2-b01-fcs \r\n+// See <a href=\"http://java.sun.com/xml/jaxb\">http://java.sun.com/xml/jaxb</a> \r\n+// Any modifications to this file will be lost upon recompilation of the source schema. \r\n+// Generated on: 2006.10.04 at 03:08:16 PM PDT \r\n+//\r\n+\r\n+\r\n+package org.apache.openjpa.persistence.xmlmapping.xmlbindings.myaddress;\r\n+\r\n+import javax.xml.bind.annotation.XmlAccessType;\r\n+import javax.xml.bind.annotation.XmlAccessorType;\r\n+import javax.xml.bind.annotation.XmlRootElement;\r\n+import javax.xml.bind.annotation.XmlType;\r\n+\r\n+\r\n+/**\r\n+ * <p>Java class for ShortAddress complex type.\r\n+ * \r\n+ * <p>The following schema fragment specifies the expected content contained within this class.\r\n+ * \r\n+ * <pre>\r\n+ * &lt;complexType name=\"ShortAddress\">\r\n+ *   &lt;complexContent>\r\n+ *     &lt;restriction base=\"{}Address\">\r\n+ *       &lt;sequence>\r\n+ *         &lt;element name=\"Name\" type=\"{http://www.w3.org/2001/XMLSchema}string\"/>\r\n+ *         &lt;element name=\"Street\" type=\"{http://www.w3.org/2001/XMLSchema}string\"/>\r\n+ *         &lt;element name=\"City\" type=\"{http://www.w3.org/2001/XMLSchema}string\"/>\r\n+ *       &lt;/sequence>\r\n+ *     &lt;/restriction>\r\n+ *   &lt;/complexContent>\r\n+ * &lt;/complexType>\r\n+ * </pre>\r\n+ * \r\n+ * \r\n+ */\r\n+@XmlRootElement\r\n+@XmlAccessorType(XmlAccessType.FIELD)\r\n+@XmlType(name = \"ShortAddress\")\r\n+public class ShortAddress\r\n+    extends Address\r\n+{\r\n+\r\n+\r\n+}\r"},{"sha":"4f1ba759cd333ef0464f9f204f80a169da38a673","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/xmlbindings/myaddress/USAAddress.java","status":"added","additions":103,"deletions":0,"changes":103,"blob_url":"https://github.com/apache/openjpa/blob/b761732fdf60ee4207aaca6002e63f9dbf1bea84/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/xmlbindings/myaddress/USAAddress.java","raw_url":"https://github.com/apache/openjpa/raw/b761732fdf60ee4207aaca6002e63f9dbf1bea84/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/xmlbindings/myaddress/USAAddress.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/xmlbindings/myaddress/USAAddress.java?ref=b761732fdf60ee4207aaca6002e63f9dbf1bea84","patch":"@@ -0,0 +1,103 @@\n+//\r\n+// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.0.2-b01-fcs \r\n+// See <a href=\"http://java.sun.com/xml/jaxb\">http://java.sun.com/xml/jaxb</a> \r\n+// Any modifications to this file will be lost upon recompilation of the source schema. \r\n+// Generated on: 2006.10.04 at 03:08:16 PM PDT \r\n+//\r\n+\r\n+\r\n+package org.apache.openjpa.persistence.xmlmapping.xmlbindings.myaddress;\r\n+\r\n+import javax.xml.bind.annotation.XmlAccessType;\r\n+import javax.xml.bind.annotation.XmlAccessorType;\r\n+import javax.xml.bind.annotation.XmlElement;\r\n+import javax.xml.bind.annotation.XmlElementDecl;\r\n+import javax.xml.bind.annotation.XmlRootElement;\r\n+import javax.xml.bind.annotation.XmlType;\r\n+\r\n+\r\n+/**\r\n+ * <p>Java class for USA_Address complex type.\r\n+ * \r\n+ * <p>The following schema fragment specifies the expected content contained within this class.\r\n+ * \r\n+ * <pre>\r\n+ * &lt;complexType name=\"USA_Address\">\r\n+ *   &lt;complexContent>\r\n+ *     &lt;extension base=\"{}Address\">\r\n+ *       &lt;sequence>\r\n+ *         &lt;element name=\"State\" type=\"{http://www.w3.org/2001/XMLSchema}string\"/>\r\n+ *         &lt;element name=\"ZIP\" type=\"{}USPS_ZIP\"/>\r\n+ *       &lt;/sequence>\r\n+ *     &lt;/extension>\r\n+ *   &lt;/complexContent>\r\n+ * &lt;/complexType>\r\n+ * </pre>\r\n+ * \r\n+ * \r\n+ */\r\n+@XmlRootElement\r\n+@XmlAccessorType(XmlAccessType.FIELD)\r\n+@XmlType(name = \"USA_Address\", propOrder = {\r\n+    \"state\",\r\n+    \"zip\"\r\n+})\r\n+public class USAAddress\r\n+    extends Address\r\n+{\r\n+\r\n+    @XmlElement(name = \"State\")\r\n+    protected String state;\r\n+    @XmlElement(name = \"ZIP\")\r\n+    protected int zip;\r\n+\r\n+    /**\r\n+     * Gets the value of the state property.\r\n+     * \r\n+     * @return\r\n+     *     possible object is\r\n+     *     {@link String }\r\n+     *     \r\n+     */\r\n+    public String getState() {\r\n+        return state;\r\n+    }\r\n+\r\n+    /**\r\n+     * Sets the value of the state property.\r\n+     * \r\n+     * @param value\r\n+     *     allowed object is\r\n+     *     {@link String }\r\n+     *     \r\n+     */\r\n+    public void setState(String value) {\r\n+        this.state = value;\r\n+    }\r\n+\r\n+    /**\r\n+     * Gets the value of the zip property.\r\n+     * \r\n+     */\r\n+    public int getZIP() {\r\n+        return zip;\r\n+    }\r\n+\r\n+    /**\r\n+     * Sets the value of the zip property.\r\n+     * \r\n+     */\r\n+    public void setZIP(int value) {\r\n+        this.zip = value;\r\n+    }\r\n+\r\n+    public String toString() {\r\n+        StringBuffer sb = new StringBuffer();\r\n+        sb.append(super.toString())\r\n+            .append(\"\\n         \")\r\n+            .append(this.state)\r\n+            .append(\" \")\r\n+            .append(this.zip);\r\n+        return sb.toString();\r\n+    }\r\n+}\r"},{"sha":"0da3e026422c2daeb597ed869c81483f67f57c5a","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/xmlmapping/query/TestXMLCustomerOrder.db2","status":"added","additions":21,"deletions":0,"changes":21,"blob_url":"https://github.com/apache/openjpa/blob/b761732fdf60ee4207aaca6002e63f9dbf1bea84/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/xmlmapping/query/TestXMLCustomerOrder.db2","raw_url":"https://github.com/apache/openjpa/raw/b761732fdf60ee4207aaca6002e63f9dbf1bea84/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/xmlmapping/query/TestXMLCustomerOrder.db2","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/xmlmapping/query/TestXMLCustomerOrder.db2?ref=b761732fdf60ee4207aaca6002e63f9dbf1bea84","patch":"@@ -0,0 +1,21 @@\n+DELETE FROM TORDER t0\r\n+SELECT t0.countryCode, t0.id, t0.version, t0.city, t0.state, t0.street, t0.zip, t0.name FROM TCUSTOMER t0 \r\n+DELETE FROM TCUSTOMER WHERE countryCode = ? AND id = ? AND version = ?\r\n+DELETE FROM TCUSTOMER WHERE countryCode = ? AND id = ? AND version = ?\r\n+INSERT INTO TORDER (oid, amount, delivered, shipAddress, version, customer_countryCode, customer_id) VALUES (?, ?, ?, ?, ?, ?, ?)\r\n+INSERT INTO TCUSTOMER (countryCode, id, creditRating, name, version, city, state, street, zip) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)\r\n+INSERT INTO TCUSTOMER (countryCode, id, creditRating, name, version, city, state, street, zip) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)\r\n+INSERT INTO TORDER (oid, amount, delivered, shipAddress, version, customer_countryCode, customer_id) VALUES (?, ?, ?, ?, ?, ?, ?)\r\n+SELECT t0.shipAddress FROM TORDER t0 \r\n+SELECT t0.oid, t0.version, t0.amount, t0.customer_countryCode, t0.customer_id, t0.delivered, t0.shipAddress FROM TORDER t0 \r\n+SELECT t0.version, t0.countryCode, t0.id, t0.city, t0.state, t0.street, t0.zip, t0.name FROM TCUSTOMER t0 WHERE t0.countryCode = ? AND t0.id = ?  optimize for 1 row\r\n+SELECT t0.oid, t0.version, t0.amount, t0.customer_countryCode, t0.customer_id, t0.delivered, t0.shipAddress FROM TORDER t0 JOIN TORDER t1 ON (1 = 1) WHERE (XMLEXISTS('$t0.shipAddress/*[City = $t1.shipAddress/*/City]' PASSING t0.shipAddress AS \"t0.shipAddress\", t1.shipAddress AS \"t1.shipAddress\")) \r\n+SELECT t0.oid, t0.version, t0.amount, t0.customer_countryCode, t0.customer_id, t0.delivered, t0.shipAddress FROM TORDER t0 JOIN TCUSTOMER t1 ON (1 = 1) WHERE (XMLEXISTS('$t0.shipAddress/*[City = $t1.city]' PASSING t0.shipAddress AS \"t0.shipAddress\", t1.city AS \"t1.city\")) \r\n+SELECT t0.oid, t0.version, t0.amount, t0.customer_countryCode, t0.customer_id, t0.delivered, t0.shipAddress FROM TORDER t0 WHERE (XMLEXISTS('$t0.shipAddress/*[City = $Parm]' PASSING t0.shipAddress AS \"t0.shipAddress\", CAST(? AS VARCHAR(254)) AS \"Parm\")) \r\n+SELECT t0.oid, t0.version, t0.amount, t0.customer_countryCode, t0.customer_id, t0.delivered, t0.shipAddress FROM TORDER t0 WHERE (XMLEXISTS('$t0.shipAddress/*[City = $Parm]' PASSING t0.shipAddress AS \"t0.shipAddress\", CAST(? AS VARCHAR(254)) AS \"Parm\")) \r\n+SELECT t0.oid, t0.version, t0.amount, t0.customer_countryCode, t0.customer_id, t0.delivered, t0.shipAddress FROM TORDER t0 WHERE (XMLEXISTS('$t0.shipAddress/*[City = $Parm]' PASSING t0.shipAddress AS \"t0.shipAddress\", CAST(? AS VARCHAR(254)) AS \"Parm\")) \r\n+SELECT t0.oid, t0.version, t0.amount, t0.customer_countryCode, t0.customer_id, t0.delivered, t0.shipAddress FROM TORDER t0 WHERE (XMLEXISTS('$t0.shipAddress/*[City = $Parm]' PASSING t0.shipAddress AS \"t0.shipAddress\", CAST(? AS VARCHAR(254)) AS \"Parm\")) \r\n+SELECT t0.version, t0.countryCode, t0.id, t0.city, t0.state, t0.street, t0.zip, t0.name FROM TCUSTOMER t0 WHERE t0.countryCode = ? AND t0.id = ?  optimize for 1 row\r\n+UPDATE TORDER SET shipAddress = ?, version = ? WHERE oid = ? AND version = ?\r\n+SELECT t0.oid, t0.version, t0.amount, t0.customer_countryCode, t0.customer_id, t0.delivered, t0.shipAddress FROM TORDER t0 \r\n+SELECT t0.version, t0.countryCode, t0.id, t0.city, t0.state, t0.street, t0.zip, t0.name FROM TCUSTOMER t0 WHERE t0.countryCode = ? AND t0.id = ?  optimize for 1 row\r"},{"sha":"4cbcc908e98bfb1ba48ff053d469d8cd2b6deebc","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/xmlmapping/query/TestXMLCustomerOrder.oracle","status":"added","additions":21,"deletions":0,"changes":21,"blob_url":"https://github.com/apache/openjpa/blob/b761732fdf60ee4207aaca6002e63f9dbf1bea84/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/xmlmapping/query/TestXMLCustomerOrder.oracle","raw_url":"https://github.com/apache/openjpa/raw/b761732fdf60ee4207aaca6002e63f9dbf1bea84/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/xmlmapping/query/TestXMLCustomerOrder.oracle","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/xmlmapping/query/TestXMLCustomerOrder.oracle?ref=b761732fdf60ee4207aaca6002e63f9dbf1bea84","patch":"@@ -0,0 +1,21 @@\n+DELETE FROM TORDER t0\r\n+SELECT t0.countryCode, t0.id, t0.version, t0.city, t0.state, t0.street, t0.zip, t0.name FROM TCUSTOMER t0\r\n+DELETE FROM TCUSTOMER WHERE countryCode = ? AND id = ? AND version = ?\r\n+DELETE FROM TCUSTOMER WHERE countryCode = ? AND id = ? AND version = ?\r\n+INSERT INTO TORDER (oid, amount, delivered, shipAddress, version, customer_countryCode, customer_id) VALUES (?, ?, ?, ?, ?, ?, ?)\r\n+INSERT INTO TORDER (oid, amount, delivered, shipAddress, version, customer_countryCode, customer_id) VALUES (?, ?, ?, ?, ?, ?, ?)\r\n+INSERT INTO TCUSTOMER (countryCode, id, creditRating, name, version, city, state, street, zip) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)\r\n+INSERT INTO TCUSTOMER (countryCode, id, creditRating, name, version, city, state, street, zip) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)\r\n+SELECT t0.shipAddress.getStringVal() FROM TORDER t0\r\n+SELECT t0.oid, t0.version, t0.amount, t0.customer_countryCode, t0.customer_id, t0.delivered, t0.shipAddress.getStringVal() FROM TORDER t0\r\n+SELECT t0.version, t0.countryCode, t0.id, t0.city, t0.state, t0.street, t0.zip, t0.name FROM TCUSTOMER t0 WHERE t0.countryCode = ? AND t0.id = ?\r\n+SELECT t0.oid, t0.version, t0.amount, t0.customer_countryCode, t0.customer_id, t0.delivered, t0.shipAddress.getStringVal() FROM TORDER t0, TORDER t1 WHERE (extractValue(t0.shipAddress,'/*/City') = extractValue(t1.shipAddress,'/*/City'))\r\n+SELECT t0.oid, t0.version, t0.amount, t0.customer_countryCode, t0.customer_id, t0.delivered, t0.shipAddress.getStringVal() FROM TORDER t0, TCUSTOMER t1 WHERE (extractValue(t0.shipAddress,'/*/City') = t1.city)\r\n+SELECT t0.oid, t0.version, t0.amount, t0.customer_countryCode, t0.customer_id, t0.delivered, t0.shipAddress.getStringVal() FROM TORDER t0 WHERE (extractValue(t0.shipAddress,'/*/City') = ?)\r\n+SELECT t0.oid, t0.version, t0.amount, t0.customer_countryCode, t0.customer_id, t0.delivered, t0.shipAddress.getStringVal() FROM TORDER t0 WHERE (extractValue(t0.shipAddress,'/*/City') = ?)\r\n+SELECT t0.oid, t0.version, t0.amount, t0.customer_countryCode, t0.customer_id, t0.delivered, t0.shipAddress.getStringVal() FROM TORDER t0 WHERE (extractValue(t0.shipAddress,'/*/City') = ?)\r\n+SELECT t0.oid, t0.version, t0.amount, t0.customer_countryCode, t0.customer_id, t0.delivered, t0.shipAddress.getStringVal() FROM TORDER t0 WHERE (extractValue(t0.shipAddress,'/*/City') = ?)\r\n+SELECT t0.version, t0.countryCode, t0.id, t0.city, t0.state, t0.street, t0.zip, t0.name FROM TCUSTOMER t0 WHERE t0.countryCode = ? AND t0.id = ?\r\n+UPDATE TORDER SET shipAddress = ?, version = ? WHERE oid = ? AND version = ?\r\n+SELECT t0.oid, t0.version, t0.amount, t0.customer_countryCode, t0.customer_id, t0.delivered, t0.shipAddress.getStringVal() FROM TORDER t0\r\n+SELECT t0.version, t0.countryCode, t0.id, t0.city, t0.state, t0.street, t0.zip, t0.name FROM TCUSTOMER t0 WHERE t0.countryCode = ? AND t0.id = ?\r"},{"sha":"fe70ea38460bd7feb9a3aed6212c8734b5440ac1","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/xmlmapping/query/TestXMLCustomerOrder.sqlserver","status":"added","additions":21,"deletions":0,"changes":21,"blob_url":"https://github.com/apache/openjpa/blob/b761732fdf60ee4207aaca6002e63f9dbf1bea84/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/xmlmapping/query/TestXMLCustomerOrder.sqlserver","raw_url":"https://github.com/apache/openjpa/raw/b761732fdf60ee4207aaca6002e63f9dbf1bea84/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/xmlmapping/query/TestXMLCustomerOrder.sqlserver","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/xmlmapping/query/TestXMLCustomerOrder.sqlserver?ref=b761732fdf60ee4207aaca6002e63f9dbf1bea84","patch":"@@ -0,0 +1,21 @@\n+DELETE FROM TORDER\n+SELECT t0.countryCode, t0.id, t0.version, t0.city, t0.state, t0.street, t0.zip, t0.name FROM TCUSTOMER t0\n+DELETE FROM TCUSTOMER WHERE countryCode = ? AND id = ? AND version = ?\n+DELETE FROM TCUSTOMER WHERE countryCode = ? AND id = ? AND version = ?\n+INSERT INTO TORDER (oid, amount, delivered, shipAddress, version, customer_countryCode, customer_id) VALUES (?, ?, ?, ?, ?, ?, ?)\n+INSERT INTO TORDER (oid, amount, delivered, shipAddress, version, customer_countryCode, customer_id) VALUES (?, ?, ?, ?, ?, ?, ?)\n+INSERT INTO TCUSTOMER (countryCode, id, creditRating, name, version, city, state, street, zip) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)\n+INSERT INTO TCUSTOMER (countryCode, id, creditRating, name, version, city, state, street, zip) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)\n+SELECT t0.shipAddress FROM TORDER t0\n+SELECT t0.oid, t0.version, t0.amount, t0.customer_countryCode, t0.customer_id, t0.delivered, t0.shipAddress FROM TORDER t0\n+SELECT t0.version, t0.countryCode, t0.id, t0.city, t0.state, t0.street, t0.zip, t0.name FROM TCUSTOMER t0 WHERE t0.countryCode = ? AND t0.id = ?\n+SELECT t0.oid, t0.version, t0.amount, t0.customer_countryCode, t0.customer_id, t0.delivered, t0.shipAddress FROM TORDER t0 CROSS JOIN TORDER t1 WHERE (t0.shipAddress.value('(/*/City/text())[1]','VARCHAR(255)') = t1.shipAddress.value('(/*/City/text())[1]','VARCHAR(255)'))\n+SELECT t0.oid, t0.version, t0.amount, t0.customer_countryCode, t0.customer_id, t0.delivered, t0.shipAddress FROM TORDER t0 CROSS JOIN TCUSTOMER t1 WHERE (t0.shipAddress.exist('/*[City = sql:column(\"t1.city\")]') = 1)\n+SELECT t0.oid, t0.version, t0.amount, t0.customer_countryCode, t0.customer_id, t0.delivered, t0.shipAddress FROM TORDER t0 WHERE (t0.shipAddress.value('(/*/City/text())[1]','VARCHAR(255)') = ?)\n+SELECT t0.oid, t0.version, t0.amount, t0.customer_countryCode, t0.customer_id, t0.delivered, t0.shipAddress FROM TORDER t0 WHERE (t0.shipAddress.value('(/*/City/text())[1]','VARCHAR(255)') = ?)\n+SELECT t0.oid, t0.version, t0.amount, t0.customer_countryCode, t0.customer_id, t0.delivered, t0.shipAddress FROM TORDER t0 WHERE (t0.shipAddress.value('(/*/City/text())[1]','VARCHAR(255)') = ?)\n+SELECT t0.oid, t0.version, t0.amount, t0.customer_countryCode, t0.customer_id, t0.delivered, t0.shipAddress FROM TORDER t0 WHERE (t0.shipAddress.value('(/*/City/text())[1]','VARCHAR(255)') = ?)\n+SELECT t0.version, t0.countryCode, t0.id, t0.city, t0.state, t0.street, t0.zip, t0.name FROM TCUSTOMER t0 WHERE t0.countryCode = ? AND t0.id = ?\n+UPDATE TORDER SET shipAddress = ?, version = ? WHERE oid = ? AND version = ?\n+SELECT t0.oid, t0.version, t0.amount, t0.customer_countryCode, t0.customer_id, t0.delivered, t0.shipAddress FROM TORDER t0\n+SELECT t0.version, t0.countryCode, t0.id, t0.city, t0.state, t0.street, t0.zip, t0.name FROM TCUSTOMER t0 WHERE t0.countryCode = ? AND t0.id = ?"}]}

