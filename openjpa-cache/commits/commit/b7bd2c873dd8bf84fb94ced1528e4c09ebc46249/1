{"sha":"b7bd2c873dd8bf84fb94ced1528e4c09ebc46249","node_id":"MDY6Q29tbWl0MjA2MzY0OmI3YmQyYzg3M2RkOGJmODRmYjk0Y2VkMTUyOGU0YzA5ZWJjNDYyNDk=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2012-04-11T13:40:53Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2012-04-11T13:40:53Z"},"message":"OPENJPA-2110: Create correct proxy type when type is defined in an abstract class.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1324759 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1d77c62b6f55c075ef57417b10550b9af7fde301","url":"https://api.github.com/repos/apache/openjpa/git/trees/1d77c62b6f55c075ef57417b10550b9af7fde301"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b7bd2c873dd8bf84fb94ced1528e4c09ebc46249","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b7bd2c873dd8bf84fb94ced1528e4c09ebc46249","html_url":"https://github.com/apache/openjpa/commit/b7bd2c873dd8bf84fb94ced1528e4c09ebc46249","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b7bd2c873dd8bf84fb94ced1528e4c09ebc46249/comments","author":null,"committer":null,"parents":[{"sha":"3bfaadf1c10169e7ca7fbc23719b044b6a64d1a2","url":"https://api.github.com/repos/apache/openjpa/commits/3bfaadf1c10169e7ca7fbc23719b044b6a64d1a2","html_url":"https://github.com/apache/openjpa/commit/3bfaadf1c10169e7ca7fbc23719b044b6a64d1a2"}],"stats":{"total":113,"additions":109,"deletions":4},"files":[{"sha":"b4455954ddc08719f3434ec597da1b9ac2bbde11","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/ProxySetupStateManager.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/b7bd2c873dd8bf84fb94ced1528e4c09ebc46249/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ProxySetupStateManager.java","raw_url":"https://github.com/apache/openjpa/raw/b7bd2c873dd8bf84fb94ced1528e4c09ebc46249/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ProxySetupStateManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ProxySetupStateManager.java?ref=b7bd2c873dd8bf84fb94ced1528e4c09ebc46249","patch":"@@ -19,6 +19,7 @@\n package org.apache.openjpa.meta;\n \n import java.io.ObjectOutput;\n+import java.lang.reflect.Modifier;\n import java.util.Calendar;\n import java.util.SortedMap;\n import java.util.SortedSet;\n@@ -46,9 +47,9 @@\n     public void setProxyData(PersistenceCapable pc, ClassMetaData meta) {\n         FieldMetaData[] fmds = meta.getFields();\n         for (int i = 0; i < fmds.length; i++) {\n-            if (fmds[i].getDefiningMetaData() != meta)\n-                continue;\n-\n+            // This method only gets called for concrete types. We need to do this processing for fields that might \n+            // not be owned by pc. \n+            \n             switch (fmds[i].getDeclaredTypeCode()) {\n                 case JavaTypes.CALENDAR:\n                     pc.pcProvideField(fmds[i].getIndex());"},{"sha":"ce27e8fe172f1d919c0341acea405c10eb1af5dd","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/AbstractEntity.java","status":"added","additions":56,"deletions":0,"changes":56,"blob_url":"https://github.com/apache/openjpa/blob/b7bd2c873dd8bf84fb94ced1528e4c09ebc46249/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/AbstractEntity.java","raw_url":"https://github.com/apache/openjpa/raw/b7bd2c873dd8bf84fb94ced1528e4c09ebc46249/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/AbstractEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/AbstractEntity.java?ref=b7bd2c873dd8bf84fb94ced1528e4c09ebc46249","patch":"@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.proxy;\n+\n+import java.util.LinkedHashSet;\n+import java.util.Set;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.MappedSuperclass;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Version;\n+\n+@MappedSuperclass\n+public abstract class AbstractEntity {\n+    @Id\n+    @GeneratedValue\n+    private int id;\n+\n+    @Version\n+    int version;\n+\n+    @OneToMany(cascade = CascadeType.ALL)\n+    private Set<ConcreteEntity> items = new LinkedHashSet<ConcreteEntity>();\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public Set<ConcreteEntity> getItems() {\n+        return items;\n+    }\n+\n+    public void addItem(ConcreteEntity ce) {\n+        if (items == null)\n+            items = new LinkedHashSet<ConcreteEntity>();\n+        items.add(ce);\n+    }\n+}"},{"sha":"907124c8958bd17b9a387d30b5c7efdc6b7d3535","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/ConcreteEntity.java","status":"added","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/apache/openjpa/blob/b7bd2c873dd8bf84fb94ced1528e4c09ebc46249/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/ConcreteEntity.java","raw_url":"https://github.com/apache/openjpa/raw/b7bd2c873dd8bf84fb94ced1528e4c09ebc46249/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/ConcreteEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/ConcreteEntity.java?ref=b7bd2c873dd8bf84fb94ced1528e4c09ebc46249","patch":"@@ -0,0 +1,28 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.proxy;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.Entity;\n+\n+@Entity\n+public class ConcreteEntity extends AbstractEntity {\n+    @Basic\n+    int field;\n+}"},{"sha":"0bd04625fad36407e8c93c99a08e1b056fdb5ab2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/TestProxyCollection.java","status":"modified","additions":21,"deletions":1,"changes":22,"blob_url":"https://github.com/apache/openjpa/blob/b7bd2c873dd8bf84fb94ced1528e4c09ebc46249/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/TestProxyCollection.java","raw_url":"https://github.com/apache/openjpa/raw/b7bd2c873dd8bf84fb94ced1528e4c09ebc46249/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/TestProxyCollection.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/TestProxyCollection.java?ref=b7bd2c873dd8bf84fb94ced1528e4c09ebc46249","patch":"@@ -18,6 +18,8 @@\n  */\n package org.apache.openjpa.persistence.proxy;\n \n+import java.util.LinkedHashSet;\n+\n import javax.persistence.EntityManager;\n \n import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n@@ -36,7 +38,7 @@\n  */\n public class TestProxyCollection extends SingleEMFTestCase {\n \tpublic void setUp() {\n-\t\tsuper.setUp(CLEAR_TABLES, TreeNode.class);\n+\t\tsuper.setUp(CLEAR_TABLES, TreeNode.class, ConcreteEntity.class, AbstractEntity.class);\n \t}\n \t/**\n \t * Tests that a uniform tree is created with expected fan outs at each \n@@ -103,6 +105,24 @@ public void testRemoveAtAllLevel() {\n \t\tint[] modifier = {1,2,3}; // remove 1 from each Level \n \t\tcreateModifyAndMerge(original, modifier);\n \t}\n+\t\n+    public void testCreateCorrectType() {\n+        ConcreteEntity ce = new ConcreteEntity();\n+        ce.addItem(ce);\n+\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+\n+        em.persist(ce);\n+        em.getTransaction().commit();\n+        em.clear();\n+\n+        ce = em.find(ConcreteEntity.class, ce.getId());\n+        assertNotNull(ce);\n+        Class<?> proxyCls = ce.getItems().getClass();\n+        assertTrue(proxyCls + \" is not assignableFrom \" + LinkedHashSet.class,\n+            LinkedHashSet.class.isAssignableFrom(proxyCls));\n+    }\n \t/**\n \t * Create a uniform tree with original fanout.\n \t * Persist."}]}

