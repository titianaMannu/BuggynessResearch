{"sha":"b7c7a47aac588b33749bf29b2113ba4dafb1755b","node_id":"MDY6Q29tbWl0MjA2MzY0OmI3YzdhNDdhYWM1ODhiMzM3NDliZjI5YjIxMTNiYTRkYWZiMTc1NWI=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2007-01-12T21:49:05Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2007-01-12T21:49:05Z"},"message":"Modified handling of class level UniqueConstraints to be similar to field level constraints.  \n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@495748 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b5bcf26810eae4e812a6140e3a147cce26afc64d","url":"https://api.github.com/repos/apache/openjpa/git/trees/b5bcf26810eae4e812a6140e3a147cce26afc64d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b7c7a47aac588b33749bf29b2113ba4dafb1755b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b7c7a47aac588b33749bf29b2113ba4dafb1755b","html_url":"https://github.com/apache/openjpa/commit/b7c7a47aac588b33749bf29b2113ba4dafb1755b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b7c7a47aac588b33749bf29b2113ba4dafb1755b/comments","author":null,"committer":null,"parents":[{"sha":"430d90f05f3bb1512cb07b632e629cd0fdab15b1","url":"https://api.github.com/repos/apache/openjpa/commits/430d90f05f3bb1512cb07b632e629cd0fdab15b1","html_url":"https://github.com/apache/openjpa/commit/430d90f05f3bb1512cb07b632e629cd0fdab15b1"}],"stats":{"total":127,"additions":67,"deletions":60},"files":[{"sha":"371755cb01975d2e5917f51702fbff56ac0c73df","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMapping.java","status":"modified","additions":5,"deletions":42,"changes":47,"blob_url":"https://github.com/apache/openjpa/blob/b7c7a47aac588b33749bf29b2113ba4dafb1755b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMapping.java","raw_url":"https://github.com/apache/openjpa/raw/b7c7a47aac588b33749bf29b2113ba4dafb1755b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMapping.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMapping.java?ref=b7c7a47aac588b33749bf29b2113ba4dafb1755b","patch":"@@ -36,8 +36,6 @@\n import org.apache.openjpa.jdbc.schema.ForeignKey;\n import org.apache.openjpa.jdbc.schema.Schemas;\n import org.apache.openjpa.jdbc.schema.Table;\n-import org.apache.openjpa.jdbc.schema.Unique;\n-import org.apache.openjpa.jdbc.schema.XMLSchemaParser;\n import org.apache.openjpa.jdbc.sql.Joins;\n import org.apache.openjpa.jdbc.sql.Result;\n import org.apache.openjpa.jdbc.sql.RowManager;\n@@ -795,46 +793,11 @@ protected void resolveMapping(boolean runtime) {\n                     _cols[i].setFlag(Column.FLAG_DIRECT_UPDATE, true);\n             }\n         }\n-        mapUniqueConstraints();\n+        // once columns are resolved, resolve unique constraints as they need\n+        // the columns be resolved \n+        _info.getUniques(this, true);\n     }\n     \n-    /**\n-     * Adds unique constraints to the mapped table.\n-     *\n-     */\n-    void mapUniqueConstraints() {\n-        Log log = getRepository().getLog();\n-        Collection uniqueInfos = _info.getUniqueConstraints();\n-        if (uniqueInfos == null || uniqueInfos.isEmpty())\n-            return;\n-        Iterator iter = uniqueInfos.iterator();\n-        Table table = getTable();\n-        int i = 1;\n-        while (iter.hasNext()) {\n-            XMLSchemaParser.UniqueInfo uniqueInfo = \n-                (XMLSchemaParser.UniqueInfo)iter.next();\n-            if (uniqueInfo.cols == null || uniqueInfo.cols.isEmpty())\n-                continue;\n-            String constraintName = table.getName() + \"_UNIQUE_\" + i;\n-            i++;\n-            Unique uniqueConstraint = table.addUnique(constraintName);\n-            Iterator uniqueColumnNames = uniqueInfo.cols.iterator();\n-            while (uniqueColumnNames.hasNext()) {\n-                String uniqueColumnName = (String)uniqueColumnNames.next();\n-                Column uniqueColumn = table.getColumn(uniqueColumnName);\n-                if (uniqueColumn != null) {\n-                    uniqueConstraint.addColumn(uniqueColumn);\n-                } else {\n-                    table.removeUnique(uniqueConstraint);\n-                    if (log.isWarnEnabled())\n-                        log.warn(_loc.get(\"missing-unique-column\", this, \n-                            table.getName(), uniqueColumnName));\n-                    break;\n-                }\n-            }\n-        }\n-    }\n-\n     /**\n      * Resolve non-relation field mappings so that when we do relation\n      * mappings they can rely on them for joins.\n@@ -857,7 +820,7 @@ void resolveNonRelationMappings() {\n                 fms[i].resolve(MODE_MAPPING);\n \n         _discrim.resolve(MODE_MAPPING);\n-        _version.resolve(MODE_MAPPING);\n+        _version.resolve(MODE_MAPPING);        \n     }\n \n     protected void initializeMapping() {\n@@ -986,7 +949,7 @@ public boolean customLoad(OpenJPAStateManager sm, JDBCStore store,\n         throws SQLException {\n         return assertStrategy().customLoad(sm, store, fetch, result);\n     }\n-\n+    \n     private ClassStrategy assertStrategy() {\n         if (_strategy == null)\n             throw new InternalException();"},{"sha":"248e2abdd3425eb5447f9ded0ce9b8cf19626ba8","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMappingInfo.java","status":"modified","additions":54,"deletions":14,"changes":68,"blob_url":"https://github.com/apache/openjpa/blob/b7c7a47aac588b33749bf29b2113ba4dafb1755b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMappingInfo.java","raw_url":"https://github.com/apache/openjpa/raw/b7c7a47aac588b33749bf29b2113ba4dafb1755b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMappingInfo.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMappingInfo.java?ref=b7c7a47aac588b33749bf29b2113ba4dafb1755b","patch":"@@ -23,17 +23,19 @@\n import java.util.Map;\n import java.util.Collection;\n import java.util.ArrayList;\n-import java.util.Arrays;\n \n+import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.jdbc.meta.strats.FullClassStrategy;\n import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.jdbc.schema.ForeignKey;\n import org.apache.openjpa.jdbc.schema.Schema;\n import org.apache.openjpa.jdbc.schema.SchemaGroup;\n import org.apache.openjpa.jdbc.schema.Table;\n-import org.apache.openjpa.jdbc.schema.XMLSchemaParser;\n+import org.apache.openjpa.jdbc.schema.Unique;\n import org.apache.openjpa.lib.meta.SourceTracker;\n+import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.lib.xml.Commentable;\n+import org.apache.openjpa.util.UserException;\n \n /**\n  * Information about the mapping from a class to the schema, in raw form.\n@@ -47,6 +49,9 @@\n     extends MappingInfo\n     implements SourceTracker, Commentable {\n \n+    private static final Localizer _loc = Localizer.forPackage\n+        (ClassMappingInfo.class);\n+\n     private String _className = Object.class.getName();\n     private String _tableName = null;\n     private boolean _joined = false;\n@@ -55,7 +60,7 @@\n     private File _file = null;\n     private int _srcType = SRC_OTHER;\n     private String[] _comments = null;\n-    private Collection _uniqueConstraints = null;//XMLSchemaParser.UniqueInfo\n+    private Collection _uniques = null;//Unique\n \n     /**\n      * The described class name.\n@@ -313,21 +318,56 @@ public void copy(MappingInfo info) {\n                     _seconds.put(key, cinfo._seconds.get(key));\n             }\n         }\n-        if (cinfo._uniqueConstraints != null)\n-           _uniqueConstraints = new ArrayList(cinfo._uniqueConstraints);\n+        if (cinfo._uniques != null) \n+           _uniques = new ArrayList(cinfo._uniques);\n     }\n \n-    public void addUniqueConstaint(String[] columnNames) {\n-        if (_uniqueConstraints == null)\n-            _uniqueConstraints = new ArrayList();\n-        XMLSchemaParser.UniqueInfo uniqueInfo = new XMLSchemaParser.UniqueInfo();\n-        uniqueInfo.cols = Arrays.asList(columnNames);\n-        _uniqueConstraints.add(uniqueInfo);\n+    public void addUnique(String name, String[] columnNames) {\n+        if (columnNames == null || columnNames.length == 0)\n+            return;\n+        if (_uniques == null)\n+            _uniques = new ArrayList();\n+        Unique uniqueConstraint = new Unique();\n+        uniqueConstraint.setName(name);\n+        for (int i=0; i<columnNames.length; i++) {\n+            if (StringUtils.isEmpty(columnNames[i]))\n+                throw new UserException(_loc.get(\"empty-unique-column\", \n+                    getClassName()));\n+            Column column = new Column();\n+            column.setName(columnNames[i]);\n+            uniqueConstraint.addColumn(column);\n+         }\n+        _uniques.add(uniqueConstraint);\n     }\n     \n-    public Collection getUniqueConstraints() {\n-        return _uniqueConstraints;\n-    }\n+    public Unique[] getUniques(ClassMapping cm, boolean adapt) {\n+        if (_uniques == null || _uniques.isEmpty())\n+            return new Unique[0];\n+        Iterator uniqueConstraints = _uniques.iterator();\n+        Table table = cm.getTable();\n+        Collection result = new ArrayList();\n+        while (uniqueConstraints.hasNext()) {\n+            Unique template = (Unique)uniqueConstraints.next();\n+            Column[] templateColumns = template.getColumns();\n+            Column[] uniqueColumns = new Column[templateColumns.length];\n+            boolean missingColumn = true;\n+            for (int i=0; i<uniqueColumns.length; i++) {\n+                String columnName = templateColumns[i].getName();\n+                Column uniqueColumn = table.getColumn(columnName);\n+                missingColumn = (uniqueColumn == null);\n+                if (missingColumn) {\n+                    throw new UserException(_loc.get(\"missing-unique-column\", \n+                        cm, table, columnName));\n+                }\n+                uniqueColumns[i] = uniqueColumn;\n+            }\n+            Unique unique = super.createUnique(cm, \"unique\", template, \n+                uniqueColumns, adapt);\n+            if (unique != null)\n+                result.add(unique);\n+        }\n+        return (Unique[])result.toArray(new Unique[result.size()]);\n+    }   \n     \n     public File getSourceFile() {\n         return _file;"},{"sha":"6d44c6356019f88295c49713718d3d7d68f930ad","filename":"openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/localizer.properties","status":"modified","additions":6,"deletions":3,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/b7c7a47aac588b33749bf29b2113ba4dafb1755b/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/b7c7a47aac588b33749bf29b2113ba4dafb1755b/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/localizer.properties?ref=b7c7a47aac588b33749bf29b2113ba4dafb1755b","patch":"@@ -401,6 +401,9 @@ untraversable-path: Result path \"{2}\" in result type \"{1}\" of mapping \"{0}\" \\\n \tattempts to traverse through a non-relation field.\n num-cols-path: Result path \"{2}\" in result type \"{1}\" of mapping \"{0}\" \\\n \tattempts to map a field that does not have exactly 1 column.\n-missing-unique-column: A unique constraint includes a column \"{2}\" specified \\\n-\tin mapping of class \"{0}\" to table \"{1}\". However, the column does not \\\n-\texist in \"{1}\" table. This constraint will not be defined in the schema.\n+missing-unique-column: A unique constraint specified in mapping of class \"{0}\" \\\n+    to table \"{1}\" includes a column \"{2}\". However, the column does not \\\n+\texist in \"{1}\" table. \n+empty-unique-column: A unique constraint specified in mapping of class \"{0}\" \\\n+    includes an empty column \"{2}\".\n+\t\n\\ No newline at end of file"},{"sha":"772e1f8fd4aaf820299ffa968f58a76079d6a29a","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/b7c7a47aac588b33749bf29b2113ba4dafb1755b/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java","raw_url":"https://github.com/apache/openjpa/raw/b7c7a47aac588b33749bf29b2113ba4dafb1755b/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java?ref=b7c7a47aac588b33749bf29b2113ba4dafb1755b","patch":"@@ -461,7 +461,8 @@ private void parseTable(ClassMapping cm, Table table) {\n             cm.getMappingInfo().setTableName(tableName);\n \n         for (UniqueConstraint unique:table.uniqueConstraints()) {\n-            ((ClassMappingInfo)cm.getMappingInfo()).addUniqueConstaint(unique.columnNames());\n+            ((ClassMappingInfo)cm.getMappingInfo())\n+                .addUnique(null, unique.columnNames());\n         }\n     }\n "}]}

