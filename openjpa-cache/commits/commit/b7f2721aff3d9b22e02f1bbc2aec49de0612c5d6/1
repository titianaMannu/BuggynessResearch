{"sha":"b7f2721aff3d9b22e02f1bbc2aec49de0612c5d6","node_id":"MDY6Q29tbWl0MjA2MzY0OmI3ZjI3MjFhZmYzZDliMjJlMDJmMWJiYzJhZWM0OWRlMDYxMmM1ZDY=","commit":{"author":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-09-22T22:06:06Z"},"committer":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-09-22T22:06:06Z"},"message":"When selecting a relation field as a projection, outer join across the relation\neven if forceOuter on the original path is false.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@449105 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5256a28aef8612c76ba05fdd611c21e4a72c6db0","url":"https://api.github.com/repos/apache/openjpa/git/trees/5256a28aef8612c76ba05fdd611c21e4a72c6db0"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b7f2721aff3d9b22e02f1bbc2aec49de0612c5d6","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b7f2721aff3d9b22e02f1bbc2aec49de0612c5d6","html_url":"https://github.com/apache/openjpa/commit/b7f2721aff3d9b22e02f1bbc2aec49de0612c5d6","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b7f2721aff3d9b22e02f1bbc2aec49de0612c5d6/comments","author":null,"committer":null,"parents":[{"sha":"ed0d6b1fec099a0a8e1302c259b242e6cdf87596","url":"https://api.github.com/repos/apache/openjpa/commits/ed0d6b1fec099a0a8e1302c259b242e6cdf87596","html_url":"https://github.com/apache/openjpa/commit/ed0d6b1fec099a0a8e1302c259b242e6cdf87596"}],"stats":{"total":18,"additions":12,"deletions":6},"files":[{"sha":"33fe27e47c1e68d803543690666c0288b9077faa","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/b7f2721aff3d9b22e02f1bbc2aec49de0612c5d6/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java","raw_url":"https://github.com/apache/openjpa/raw/b7f2721aff3d9b22e02f1bbc2aec49de0612c5d6/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java?ref=b7f2721aff3d9b22e02f1bbc2aec49de0612c5d6","patch":"@@ -415,7 +415,8 @@ else if (action.op == Action.UNBOUND_VAR) {\n             traverseField(pstate, key, forceOuter, true);\n         pstate.joinedRel = false;\n         if ((flags & JOIN_REL) != 0)\n-            joinRelation(pstate, key, forceOuter, false);\n+            joinRelation(pstate, key, forceOuter || (flags & FORCE_OUTER) != 0,\n+                false);\n         return pstate;\n     }\n "},{"sha":"450c36a88ba437bd3785c1d7771e1f19cab9b9a7","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SelectConstructor.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/b7f2721aff3d9b22e02f1bbc2aec49de0612c5d6/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SelectConstructor.java","raw_url":"https://github.com/apache/openjpa/raw/b7f2721aff3d9b22e02f1bbc2aec49de0612c5d6/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SelectConstructor.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SelectConstructor.java?ref=b7f2721aff3d9b22e02f1bbc2aec49de0612c5d6","patch":"@@ -194,7 +194,7 @@ private void initialize(Select sel, ExpContext ctx, QueryExpressions exps,\n                 // have to join through to related type for pc object \n                 // projections; this ensures that we have all our joins cached\n                 state.projections[i] = resultVal.initialize(sel, ctx, \n-                    Val.JOIN_REL);\n+                    Val.JOIN_REL | Val.FORCE_OUTER);\n                 joins = sel.and(joins, state.projections[i].joins);\n             }\n         }"},{"sha":"89354bf64d5f6b9c83b7910beb7a24314eebf7c9","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Val.java","status":"modified","additions":8,"deletions":2,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/b7f2721aff3d9b22e02f1bbc2aec49de0612c5d6/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Val.java","raw_url":"https://github.com/apache/openjpa/raw/b7f2721aff3d9b22e02f1bbc2aec49de0612c5d6/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Val.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Val.java?ref=b7f2721aff3d9b22e02f1bbc2aec49de0612c5d6","patch":"@@ -38,12 +38,18 @@\n     /**\n      * Initialization flag indicating that this value will be compared to null.\n      */\n-    public final int NULL_CMP = 1;\n+    public final int NULL_CMP = 2 << 0;\n \n     /**\n      * Initialization flag indicating to join into any relation path.\n      */\n-    public final int JOIN_REL = 2; \n+    public final int JOIN_REL = 2 << 1; \n+\n+    /**\n+     * Initialization flag indicating to force an outer join into any relation \n+     * path.\n+     */\n+    public final int FORCE_OUTER = 2 << 2; \n \n     /**\n      * Initialize the value. This method should recursively initialize any"},{"sha":"d29539e10cd0997a7247e84687a60d2c45f4ff74","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/b7f2721aff3d9b22e02f1bbc2aec49de0612c5d6/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","raw_url":"https://github.com/apache/openjpa/raw/b7f2721aff3d9b22e02f1bbc2aec49de0612c5d6/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java?ref=b7f2721aff3d9b22e02f1bbc2aec49de0612c5d6","patch":"@@ -2258,8 +2258,7 @@ private String getColumnAlias(Column col, PathJoins pj) {\n                     return FROM_SELECT_ALIAS + \".\" + alias + \"_\" + col;\n                 return alias + \"_\" + col;\n             }\n-            alias = _sel.toAlias(_sel.getTableIndex(col.getTable(), pj,\n-                false));\n+            alias = _sel.toAlias(_sel.getTableIndex(col.getTable(), pj, false));\n             return (alias == null) ? null : alias + \".\" + col;\n         }\n "}]}

