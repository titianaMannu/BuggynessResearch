{"sha":"b7fe66357b6c964613866b773da5c2739c513e09","node_id":"MDY6Q29tbWl0MjA2MzY0OmI3ZmU2NjM1N2I2Yzk2NDYxMzg2NmI3NzNkYTVjMjczOWM1MTNlMDk=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-08T00:05:40Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-08T00:05:40Z"},"message":"Tolerate container failure better, now that we can handle non-enhanced types.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@563705 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3843a40f7d7fba5ccfe5dfe92888bc331c254d4f","url":"https://api.github.com/repos/apache/openjpa/git/trees/3843a40f7d7fba5ccfe5dfe92888bc331c254d4f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b7fe66357b6c964613866b773da5c2739c513e09","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b7fe66357b6c964613866b773da5c2739c513e09","html_url":"https://github.com/apache/openjpa/commit/b7fe66357b6c964613866b773da5c2739c513e09","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b7fe66357b6c964613866b773da5c2739c513e09/comments","author":null,"committer":null,"parents":[{"sha":"63c3748900811032ec5dc4e5e42d9745cfc53c4f","url":"https://api.github.com/repos/apache/openjpa/commits/63c3748900811032ec5dc4e5e42d9745cfc53c4f","html_url":"https://github.com/apache/openjpa/commit/63c3748900811032ec5dc4e5e42d9745cfc53c4f"}],"stats":{"total":22,"additions":20,"deletions":2},"files":[{"sha":"07d43442adb33039100c9ebe9fc46e48105b770e","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProviderImpl.java","status":"modified","additions":17,"deletions":2,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/b7fe66357b6c964613866b773da5c2739c513e09/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProviderImpl.java","raw_url":"https://github.com/apache/openjpa/raw/b7fe66357b6c964613866b773da5c2739c513e09/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProviderImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProviderImpl.java?ref=b7fe66357b6c964613866b773da5c2739c513e09","patch":"@@ -37,6 +37,7 @@\n import org.apache.openjpa.kernel.BrokerFactory;\n import org.apache.openjpa.lib.conf.ConfigurationProvider;\n import org.apache.openjpa.lib.conf.Configurations;\n+import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.meta.MetaDataModes;\n import org.apache.openjpa.meta.MetaDataRepository;\n import org.apache.openjpa.util.ClassResolver;\n@@ -53,6 +54,9 @@\n \n     static final String CLASS_TRANSFORMER_OPTIONS = \"ClassTransformerOptions\";\n \n+    private static final Localizer _loc = Localizer.forPackage(\n+        PersistenceProviderImpl.class);\n+\n     /**\n      * Loads the entity manager specified by <code>name</code>, applying\n      * the properties in <code>m</code> as overrides to the properties defined\n@@ -91,10 +95,16 @@ public EntityManagerFactory createContainerEntityManagerFactory(\n                 return null;\n \n             // add enhancer\n+            Exception transformerException = null;\n             String ctOpts = (String) Configurations.getProperty\n                 (CLASS_TRANSFORMER_OPTIONS, pui.getProperties());\n-            pui.addTransformer(new ClassTransformerImpl(cp, ctOpts, \n-                pui.getNewTempClassLoader()));\n+            try {\n+                pui.addTransformer(new ClassTransformerImpl(cp, ctOpts,\n+                    pui.getNewTempClassLoader()));\n+            } catch (Exception e) {\n+                // fail gracefully\n+                transformerException = e;\n+            }\n \n             // if the BrokerImpl hasn't been specified, switch to the\n             // non-finalizing one, since anything claiming to be a container\n@@ -107,6 +117,11 @@ public EntityManagerFactory createContainerEntityManagerFactory(\n \n             BrokerFactory factory = Bootstrap.newBrokerFactory(cp, \n                 pui.getClassLoader());\n+            if (transformerException != null)\n+                factory.getConfiguration().getLog(\n+                    OpenJPAConfiguration.LOG_RUNTIME).warn(\n+                        _loc.get(\"transformer-registration-error\", pui),\n+                        transformerException);\n             return OpenJPAPersistence.toEntityManagerFactory(factory);\n         } catch (Exception e) {\n             throw PersistenceExceptions.toPersistenceException(e);"},{"sha":"4857778d35a2d49568e58d0eb34ae72560a5d944","filename":"openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/b7fe66357b6c964613866b773da5c2739c513e09/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/b7fe66357b6c964613866b773da5c2739c513e09/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties?ref=b7fe66357b6c964613866b773da5c2739c513e09","patch":"@@ -125,6 +125,9 @@ no-setter-for-getter: No setter was found for method {0} in type {1} while \\\n     searching for persistent properties. This method will be ignored. If you \\\n     intended for this to be persistent, please add a corresponding setter, \\\n     or switch to field access for this type hierarchy.\n+transformer-registration-error: An error occurred while registering a \\\n+    ClassTransformer with {0}. The error is logged along with this warning. \\\n+    Load-time class transformation will not be available.\n \n EntityManagerFactory-name: EntityManagerFactory implementation\n EntityManagerFactory-desc: Allows extension of standard \\"}]}

