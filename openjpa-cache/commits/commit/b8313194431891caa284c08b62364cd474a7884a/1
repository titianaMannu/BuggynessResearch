{"sha":"b8313194431891caa284c08b62364cd474a7884a","node_id":"MDY6Q29tbWl0MjA2MzY0OmI4MzEzMTk0NDMxODkxY2FhMjg0YzA4YjYyMzY0Y2Q0NzRhNzg4NGE=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-12-08T14:52:17Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-12-08T14:52:17Z"},"message":"OPENJPA-1397: Allow some columns of compound key to be null.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@888418 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f1fd1b031daca82473ce02e9427fc3598cb2fb1f","url":"https://api.github.com/repos/apache/openjpa/git/trees/f1fd1b031daca82473ce02e9427fc3598cb2fb1f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b8313194431891caa284c08b62364cd474a7884a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b8313194431891caa284c08b62364cd474a7884a","html_url":"https://github.com/apache/openjpa/commit/b8313194431891caa284c08b62364cd474a7884a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b8313194431891caa284c08b62364cd474a7884a/comments","author":null,"committer":null,"parents":[{"sha":"8607e0b3b4050a29c93c15bdd23fe676bf76490f","url":"https://api.github.com/repos/apache/openjpa/commits/8607e0b3b4050a29c93c15bdd23fe676bf76490f","html_url":"https://github.com/apache/openjpa/commit/8607e0b3b4050a29c93c15bdd23fe676bf76490f"}],"stats":{"total":384,"additions":384,"deletions":0},"files":[{"sha":"f417ea333206ed5a2ec8f47913a003949aec2bfc","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/ComplexCompoundIdTestEntity.java","status":"added","additions":58,"deletions":0,"changes":58,"blob_url":"https://github.com/apache/openjpa/blob/b8313194431891caa284c08b62364cd474a7884a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/ComplexCompoundIdTestEntity.java","raw_url":"https://github.com/apache/openjpa/raw/b8313194431891caa284c08b62364cd474a7884a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/ComplexCompoundIdTestEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/ComplexCompoundIdTestEntity.java?ref=b8313194431891caa284c08b62364cd474a7884a","patch":"@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.identity;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.Id;\n+import javax.persistence.IdClass;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Table;\n+\n+/**\n+ * JPA Entity with a compound Id of two fields, one simple and one an Entity.\n+ * \n+ * @author Michael Vorburger\n+ */\n+@Entity\n+@Table(name = \"test_complex\")\n+@IdClass(ComplexCompoundIdTestEntityId.class)\n+public class ComplexCompoundIdTestEntity {\n+\n+\t@Id\n+\t@Column(nullable = false)\n+\tprivate Long id;\n+\n+    @Id\n+    @ManyToOne(cascade = { CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REFRESH }, \n+            fetch = FetchType.LAZY, optional = true)\n+    @JoinColumn(nullable = true, name = \"type_id\")\n+\tprivate TypeEntity type;\n+\n+\tpublic Long getId() {\n+\t\treturn id;\n+\t}\n+\n+\tpublic TypeEntity getType() {\n+\t\treturn type;\n+\t}\n+}"},{"sha":"59e92627599680035267dd7472bec6e9eda407ee","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/ComplexCompoundIdTestEntityId.java","status":"added","additions":63,"deletions":0,"changes":63,"blob_url":"https://github.com/apache/openjpa/blob/b8313194431891caa284c08b62364cd474a7884a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/ComplexCompoundIdTestEntityId.java","raw_url":"https://github.com/apache/openjpa/raw/b8313194431891caa284c08b62364cd474a7884a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/ComplexCompoundIdTestEntityId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/ComplexCompoundIdTestEntityId.java?ref=b8313194431891caa284c08b62364cd474a7884a","patch":"@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.identity;\n+\n+\n+/**\n+ * JPA Id for ComplexCompoundIdTestEntity.\n+ *\n+ * @author Michael Vorburger\n+ */\n+public class ComplexCompoundIdTestEntityId {\n+\n+\tprivate Long id;\n+\n+\tprivate Long type;\n+\n+\t@Override\n+\tpublic int hashCode() {\n+\t\tfinal int prime = 31;\n+\t\tint result = 1;\n+\t\tresult = prime * result + ((id == null) ? 0 : id.hashCode());\n+\t\tresult = prime * result + ((type == null) ? 0 : type.hashCode());\n+\t\treturn result;\n+\t}\n+\n+\t@Override\n+\tpublic boolean equals(Object obj) {\n+\t\tif (this == obj)\n+\t\t\treturn true;\n+\t\tif (obj == null)\n+\t\t\treturn false;\n+\t\tif (getClass() != obj.getClass())\n+\t\t\treturn false;\n+\t\tComplexCompoundIdTestEntityId other = (ComplexCompoundIdTestEntityId) obj;\n+\t\tif (id == null) {\n+\t\t\tif (other.id != null)\n+\t\t\t\treturn false;\n+\t\t} else if (!id.equals(other.id))\n+\t\t\treturn false;\n+\t\tif (type == null) {\n+\t\t\tif (other.type != null)\n+\t\t\t\treturn false;\n+\t\t} else if (!type.equals(other.type))\n+\t\t\treturn false;\n+\t\treturn true;\n+\t}\n+}"},{"sha":"b983ac5df46d598d1e0eb0dca4a6e5493ec09317","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/SimpleCompoundIdTestEntity.java","status":"added","additions":56,"deletions":0,"changes":56,"blob_url":"https://github.com/apache/openjpa/blob/b8313194431891caa284c08b62364cd474a7884a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/SimpleCompoundIdTestEntity.java","raw_url":"https://github.com/apache/openjpa/raw/b8313194431891caa284c08b62364cd474a7884a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/SimpleCompoundIdTestEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/SimpleCompoundIdTestEntity.java?ref=b8313194431891caa284c08b62364cd474a7884a","patch":"@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.identity;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.IdClass;\n+import javax.persistence.Table;\n+\n+/**\n+ * JPA Entity with a compound Id of two fields, both simple.\n+ * \n+ * @author Michael Vorburger\n+ */\n+@Entity\n+@Table(name = \"test_simple\")\n+@IdClass(SimpleCompoundIdTestEntityId.class)\n+public class SimpleCompoundIdTestEntity {\n+\n+\t@Id\n+\t@Column(nullable = false)\n+\tprivate Long firstId;\n+\n+\t@Id\n+\t@Column(nullable = true)\n+\tprivate Long secondId;\n+\n+\t// ...\n+\t\n+\tpublic Long getFirstId() {\n+\t\treturn firstId;\n+\t}\n+\n+\tpublic Long getSecondId() {\n+\t\treturn secondId;\n+\t}\n+\t\n+\t// ...\n+}"},{"sha":"8dedf47d2a170849cc2362b4ea78add47df0b14a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/SimpleCompoundIdTestEntityId.java","status":"added","additions":64,"deletions":0,"changes":64,"blob_url":"https://github.com/apache/openjpa/blob/b8313194431891caa284c08b62364cd474a7884a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/SimpleCompoundIdTestEntityId.java","raw_url":"https://github.com/apache/openjpa/raw/b8313194431891caa284c08b62364cd474a7884a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/SimpleCompoundIdTestEntityId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/SimpleCompoundIdTestEntityId.java?ref=b8313194431891caa284c08b62364cd474a7884a","patch":"@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.identity;\n+\n+\n+/**\n+ * JPA Id for SimpleCompoundIdTestEntity.\n+ *\n+ * @author Michael Vorburger\n+ */\n+public class SimpleCompoundIdTestEntityId {\n+\n+\tpublic Long firstId;\n+\n+\tpublic Long secondId;\n+\n+\t\n+\t@Override\n+\tpublic int hashCode() {\n+\t\tfinal int prime = 31;\n+\t\tint result = 1;\n+\t\tresult = prime * result + ((firstId == null) ? 0 : firstId.hashCode());\n+\t\tresult = prime * result + ((secondId == null) ? 0 : secondId.hashCode());\n+\t\treturn result;\n+\t}\n+\n+\t@Override\n+\tpublic boolean equals(Object obj) {\n+\t\tif (this == obj)\n+\t\t\treturn true;\n+\t\tif (obj == null)\n+\t\t\treturn false;\n+\t\tif (getClass() != obj.getClass())\n+\t\t\treturn false;\n+\t\tSimpleCompoundIdTestEntityId other = (SimpleCompoundIdTestEntityId) obj;\n+\t\tif (firstId == null) {\n+\t\t\tif (other.firstId != null)\n+\t\t\t\treturn false;\n+\t\t} else if (!firstId.equals(other.firstId))\n+\t\t\treturn false;\n+\t\tif (secondId == null) {\n+\t\t\tif (other.secondId != null)\n+\t\t\t\treturn false;\n+\t\t} else if (!secondId.equals(other.secondId))\n+\t\t\treturn false;\n+\t\treturn true;\n+\t}\n+}"},{"sha":"1b8c7d976791d65dbebeec99006eb2c2d7630946","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/TestCompundIdWithNull.java","status":"added","additions":121,"deletions":0,"changes":121,"blob_url":"https://github.com/apache/openjpa/blob/b8313194431891caa284c08b62364cd474a7884a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/TestCompundIdWithNull.java","raw_url":"https://github.com/apache/openjpa/raw/b8313194431891caa284c08b62364cd474a7884a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/TestCompundIdWithNull.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/TestCompundIdWithNull.java?ref=b8313194431891caa284c08b62364cd474a7884a","patch":"@@ -0,0 +1,121 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.identity;\n+\n+import java.sql.Connection;\n+import java.util.List;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+/**\n+ * Test that compound identity can consists of null component column value.\n+ * \n+ * This test uses pre-defined database tables created by DDL explicitly.\n+ * The tables have <em>logical</em> compound primary keys in the sense non-null\n+ * constraint is <em>not</em> set on the primary columns. The tables are populated \n+ * with SQL to contain null values in these columns. \n+ * The test verifies that results are returned as par expectation.\n+ * For more details, refer\n+ * <A href=\"https://issues.apache.org/jira/browse/OPENJPA-1397\">JIRA-1397</A>\n+ * \n+ * @author Pinaki Poddar\n+ * @author Michael Vorburger\n+ */\n+public class TestCompundIdWithNull extends SingleEMFTestCase {\n+    private static boolean tablesCreated = false;\n+\tpublic void setUp() throws Exception {\n+\t    // do not use CLEAR_TABLES or DROP_TABLES\n+\t    super.setUp(SimpleCompoundIdTestEntity.class, ComplexCompoundIdTestEntity.class, TypeEntity.class);\n+\t    if (!tablesCreated) {\n+\t        createTables(emf.createEntityManager());\n+\t    }\n+\t    \n+\t}\n+\t\n+\tpublic void testSimpleCompoundIdTestEntity() throws Exception  {\n+\t\t\tEntityManager em = emf.createEntityManager();\n+\t\t\tString jpql = \"SELECT o FROM SimpleCompoundIdTestEntity o ORDER BY o.secondId\";\n+\t\t\tList<SimpleCompoundIdTestEntity> list = em.createQuery(jpql,SimpleCompoundIdTestEntity.class)\n+\t\t\t    .getResultList();\n+\t\t\tassertEquals(2, list.size());\n+\t\t\tassertEquals(Long.valueOf(123), list.get(0).getSecondId());\n+\t\t\t\n+\t\t\tSimpleCompoundIdTestEntity secondResult = list.get(1);\n+\t\t\tassertNotNull(\"BUG (JIRA-1397)! Result list contains null in second element\", secondResult);\n+\t\t\tassertNull(secondResult.getSecondId());\n+\t\t\tem.close();\n+\t}\n+\n+\t\n+\tpublic void testComplexCompoundIdTestEntity() throws Exception  {\n+\t\t\tEntityManager em = emf.createEntityManager();\n+\t\t\tString jpql = \"SELECT o FROM ComplexCompoundIdTestEntity o ORDER BY o.type\";\n+\t\t\tList<ComplexCompoundIdTestEntity> list = em.createQuery(jpql,ComplexCompoundIdTestEntity.class)\n+\t\t\t    .getResultList();\n+\t\t\tassertEquals(2, list.size());\n+\t\t\tComplexCompoundIdTestEntity secondResult = list.get(1);\n+\t\t\tassertNotNull(\"Result list contains null in second element\", secondResult);\n+\t\t\tassertNull(\"Result list's second record secondId field was not null\", secondResult.getType());\n+\t\t\tem.close();\n+\t}\n+\t\n+\t/**\n+\t * Create tables with logical compound keys without non-null constraint.\n+\t * Populate them with null values in some of the columns.\n+\t */\n+    private void createTables(EntityManager em) throws Exception {\n+        em.getTransaction().begin();\n+        OpenJPAEntityManager kem = OpenJPAPersistence.cast(em);\n+\n+        Connection conn = (Connection) kem.getConnection();\n+        // NOTE that 'logically' test_simple has a \", CONSTRAINT test_simple_pk PRIMARY KEY (firstId, secondId)\",\n+        // but at least Derby doesn't permit NULL then.. in our real-world underlying schema that leads\n+        // to this there are *NO* PRIMARY KEY on any tables, but there is a logical featureSelection expressed\n+        // elsewhere stating that those two columns uniquely identify a row.\n+        try {\n+            conn.createStatement().execute(\"DROP TABLE test_type\");\n+            conn.createStatement().execute(\"DROP TABLE test_simple\");\n+            conn.createStatement().execute(\"DROP TABLE test_complex\");\n+        } catch (Exception e) {\n+        }\n+        \n+        conn.createStatement().execute(\"CREATE TABLE test_simple(firstId NUMERIC, secondId NUMERIC)\");\n+        conn.createStatement().execute(\"INSERT INTO test_simple(firstId, secondId) VALUES (1, 123)\");\n+        conn.createStatement().execute(\"INSERT INTO test_simple(firstId, secondId) VALUES (1, NULL)\");\n+\n+        conn.createStatement().execute(\"CREATE TABLE test_type(id NUMERIC CONSTRAINT test_type_pk PRIMARY KEY, \" +\n+                \"code VARCHAR(16))\");\n+        conn.createStatement().execute(\"INSERT INTO test_type(id, code) VALUES (987, 'ABC')\");\n+\n+        conn.createStatement().execute(\"CREATE TABLE test_complex(id NUMERIC, type_id NUMERIC)\");\n+        conn.createStatement().execute(\"INSERT INTO test_complex(id, type_id) VALUES (1, 987)\");\n+        conn.createStatement().execute(\"INSERT INTO test_complex(id, type_id) VALUES (1, NULL)\");\n+\n+        conn.close();\n+        \n+        em.flush();\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+\t    \n+}"},{"sha":"24ff98cb9cde07e990290a33eacecbc97deb4e50","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/TypeEntity.java","status":"added","additions":22,"deletions":0,"changes":22,"blob_url":"https://github.com/apache/openjpa/blob/b8313194431891caa284c08b62364cd474a7884a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/TypeEntity.java","raw_url":"https://github.com/apache/openjpa/raw/b8313194431891caa284c08b62364cd474a7884a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/TypeEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/TypeEntity.java?ref=b8313194431891caa284c08b62364cd474a7884a","patch":"@@ -0,0 +1,22 @@\n+package org.apache.openjpa.persistence.identity;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+\n+/**\n+ * JPA Entity\n+ *\n+ * @author Michael Vorburger\n+ */\n+@Entity\n+@Table(name = \"test_type\")\n+public class TypeEntity {\n+\n+\t@Id\n+\tprivate Long id;\n+\t\n+\tprivate String code;\n+\t\n+\t// ...\n+}"}]}

