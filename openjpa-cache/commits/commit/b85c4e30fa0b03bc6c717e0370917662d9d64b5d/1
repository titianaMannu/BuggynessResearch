{"sha":"b85c4e30fa0b03bc6c717e0370917662d9d64b5d","node_id":"MDY6Q29tbWl0MjA2MzY0OmI4NWM0ZTMwZmEwYjAzYmM2YzcxN2UwMzcwOTE3NjYyZDlkNjRiNWQ=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-16T14:06:38Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-16T14:06:38Z"},"message":"OPENJPA-1411 Include DayTrader test case in OpenJPA.  Note: this is not pulled into the normal builds, as the openjpa-maven-plugin-1.1-SNAPSHOT has not been released.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@923745 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d75c0359301a52914091db3e25206e8063877650","url":"https://api.github.com/repos/apache/openjpa/git/trees/d75c0359301a52914091db3e25206e8063877650"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b85c4e30fa0b03bc6c717e0370917662d9d64b5d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b85c4e30fa0b03bc6c717e0370917662d9d64b5d","html_url":"https://github.com/apache/openjpa/commit/b85c4e30fa0b03bc6c717e0370917662d9d64b5d","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b85c4e30fa0b03bc6c717e0370917662d9d64b5d/comments","author":null,"committer":null,"parents":[{"sha":"a5ca9aae2d5160fb463bd7a619e999732d222f31","url":"https://api.github.com/repos/apache/openjpa/commits/a5ca9aae2d5160fb463bd7a619e999732d222f31","html_url":"https://github.com/apache/openjpa/commit/a5ca9aae2d5160fb463bd7a619e999732d222f31"}],"stats":{"total":4475,"additions":4475,"deletions":0},"files":[{"sha":"89986a230d04c61436adb7d1fa09a704cf74ee35","filename":"openjpa-integration/daytrader/pom.xml","status":"added","additions":226,"deletions":0,"changes":226,"blob_url":"https://github.com/apache/openjpa/blob/b85c4e30fa0b03bc6c717e0370917662d9d64b5d/openjpa-integration/daytrader/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/b85c4e30fa0b03bc6c717e0370917662d9d64b5d/openjpa-integration/daytrader/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/daytrader/pom.xml?ref=b85c4e30fa0b03bc6c717e0370917662d9d64b5d","patch":"@@ -0,0 +1,226 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+ \n+ http://www.apache.org/licenses/LICENSE-2.0\n+ \n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.   \n+-->\n+<!-- \n+    Maven release plugin requires the project tag to be on a single line. \n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <groupId>org.apache.openjpa</groupId>\n+        <artifactId>openjpa-integration</artifactId>\n+        <version>2.0.0-SNAPSHOT</version>\n+    </parent>\n+\n+    <artifactId>openjpa-integration-daytrader</artifactId>\n+    <packaging>jar</packaging>\n+    <name>OpenJPA Integration Tests - Daytrader</name>\n+    <description>OpenJPA Integration Tests - Daytrader</description>\n+\n+    <properties>\n+        <daytrader.version>2.2-SNAPSHOT</daytrader.version>\n+        <dbcp.maxActive>10</dbcp.maxActive>\n+        <dbcp.maxIdle>5</dbcp.maxIdle>\n+        <dbcp.minIdle>2</dbcp.minIdle>\n+        <dbcp.maxWait>10000</dbcp.maxWait>\n+        <dbcp.args>MaxActive=${dbcp.maxActive},MaxIdle=${dbcp.maxIdle},MinIdle=${dbcp.minIdle},MaxWait=${dbcp.maxWait}</dbcp.args>\n+<!--\n+        <connection.driver.name>org.apache.derby.jdbc.EmbeddedDriver</connection.driver.name>\n+        <connection.url>jdbc:derby:target/database/openjpa-derby-database;create=true</connection.url>\n+        <connection.username />\n+        <connection.password />\n+-->\n+    </properties>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.apache.openjpa</groupId>\n+            <artifactId>openjpa</artifactId>\n+            <version>${pom.version}</version>\n+        </dependency>\n+<!--\n+        <dependency>\n+            <groupId>org.apache.geronimo.daytrader.modules</groupId>\n+            <artifactId>daytrader-web</artifactId>\n+            <version>${daytrader.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.geronimo.daytrader.modules</groupId>\n+            <artifactId>daytrader-entities</artifactId>\n+            <version>${daytrader.version}</version>\n+        </dependency>\n+-->\n+        <dependency>\n+            <groupId>org.apache.openjpa</groupId>\n+            <artifactId>openjpa-persistence-jdbc</artifactId>\n+            <version>${pom.version}</version>\n+            <classifier>tests</classifier>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>commons-dbcp</groupId>\n+            <artifactId>commons-dbcp</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>commons-logging</groupId>\n+            <artifactId>commons-logging</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.derby</groupId>\n+            <artifactId>derby</artifactId>\n+            <version>${derby.version}</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>jakarta-regexp</groupId>\n+            <artifactId>jakarta-regexp</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+    </dependencies>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-jar-plugin</artifactId>\n+                <executions>\n+                    <execution>\n+                        <id>attach-tests</id>\n+                        <phase>verify</phase>\n+                        <goals>\n+                            <goal>test-jar</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+            <!-- old way of using antrun to enhance classes\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-antrun-plugin</artifactId>\n+                <executions>\n+                    <execution>\n+                        <phase>test-compile</phase>\n+                        <configuration>\n+                            <tasks>                           \n+                                <ant antfile=\"src/main/ant/enhancer.xml\" target=\"enhance\" inheritRefs=\"true\">\n+                                    <property name=\"maven.test.skip\" value=\"${maven.test.skip}\" />\n+                                    <property name=\"test\" value=\"${test}\" />\n+                                    <property name=\"outdir\" value=\"${project.build.outputDirectory}\" />\n+                                    <property name=\"project.build.testOutputDirectory\" value=\"${project.build.testOutputDirectory}\" />\n+                                    <property name=\"openjpa.loglevel\" value=\"${openjpa.loglevel}\" />\n+                                    <property name=\"build.enhance\" value=\"${build.enhance}\" />\n+                                </ant>\n+                            </tasks>\n+                        </configuration>\n+                        <goals>\n+                            <goal>run</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+            -->\n+            <!-- new way of using openjpa-maven-plugin to enhance classes -->\n+            <plugin>\n+                <groupId>org.codehaus.mojo</groupId>\n+                <artifactId>openjpa-maven-plugin</artifactId>\n+                <version>1.1-SNAPSHOT</version>\n+                <configuration>\n+                    <includes>org/apache/openjpa/integration/daytrader/*Bean.class</includes>\n+                    <excludes>org/apache/openjpa/persistence/**/*.class</excludes>\n+                    <addDefaultConstructor>true</addDefaultConstructor>\n+                    <enforcePropertyRestrictions>true</enforcePropertyRestrictions>\n+                </configuration>\n+                <executions>\n+                    <execution>\n+                        <id>enhancer</id>\n+                        <!-- phase used to enhance source\n+                        <phase>process-classes</phase>\n+                        -->\n+                        <!-- phase used to enhance tests -->\n+                        <phase>process-test-classes</phase>\n+                        <goals>\n+                            <!-- goal used to enhance source\n+                            <goal>enhance</goal>\n+                            -->\n+                            <!-- goal used to enhance tests -->\n+                            <goal>test-enhance</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+                <dependencies>\n+                    <dependency>\n+                        <groupId>org.apache.openjpa</groupId>\n+                        <artifactId>openjpa</artifactId>\n+                        <version>${pom.version}</version>\n+                    </dependency>\n+                </dependencies>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-surefire-plugin</artifactId>\n+                <configuration>\n+                    <argLine>${test.jvm.arguments}</argLine>\n+                    <excludes>\n+                        <!-- exclude classes that end with 'Test'; these \n+                             are not test cases per OpenJPA standards -->\n+                        <exclude>org/apache/openjpa/**/*Test.java</exclude>\n+\n+                        <!-- exclude classes that include a $; inner classes\n+                             are not test cases per OpenJPA standards -->\n+                        <exclude>org/apache/openjpa/**/*$*.class</exclude>\n+                        <exclude>org/apache/openjpa/**/*.*.class</exclude>\n+                    </excludes>\n+                    <systemProperties>\n+                        <property>\n+                            <name>openjpa.Log</name>\n+                            <value>DefaultLevel=${openjpa.loglevel}</value>\n+                        </property>\n+                        <property>\n+                            <name>openjpa.DynamicEnhancementAgent</name>\n+                            <value>false</value>\n+                        </property>\n+                        <property>\n+                            <name>openjpa.ConnectionDriverName</name>\n+                            <value>org.apache.commons.dbcp.BasicDataSource</value>\n+                        </property>\n+                        <property>\n+                            <name>derby.stream.error.file</name>\n+                            <value>target/derby.log</value>\n+                        </property>\n+                        <property>\n+                            <name>derby.locks.deadlockTimeout</name>\n+                            <value>5</value>\n+                        </property>\n+                        <property>\n+                            <name>derby.locks.waitTimeout</name>\n+                            <value>6</value>\n+                        </property>\n+                        <property>\n+                            <name>openjpa.ConnectionProperties</name>\n+                            <value>DriverClassName=${connection.driver.name},Url=${connection.url},Username=${connection.username},Password=${connection.password},${dbcp.args}</value>\n+                        </property>\n+                    </systemProperties>\n+                </configuration>\n+            </plugin>\n+        </plugins>\n+    </build>\n+</project>"},{"sha":"cdb8390f091dbe5ce1bb032a2a0e6753db1b9843","filename":"openjpa-integration/daytrader/src/main/ant/enhancer.xml","status":"added","additions":85,"deletions":0,"changes":85,"blob_url":"https://github.com/apache/openjpa/blob/b85c4e30fa0b03bc6c717e0370917662d9d64b5d/openjpa-integration/daytrader/src/main/ant/enhancer.xml","raw_url":"https://github.com/apache/openjpa/raw/b85c4e30fa0b03bc6c717e0370917662d9d64b5d/openjpa-integration/daytrader/src/main/ant/enhancer.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/daytrader/src/main/ant/enhancer.xml?ref=b85c4e30fa0b03bc6c717e0370917662d9d64b5d","patch":"@@ -0,0 +1,85 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+    Licensed to the Apache Software Foundation (ASF) under one\n+    or more contributor license agreements.  See the NOTICE file\n+    distributed with this work for additional information\n+    regarding copyright ownership.  The ASF licenses this file\n+    to you under the Apache License, Version 2.0 (the\n+    \"License\"); you may not use this file except in compliance\n+    with the License.  You may obtain a copy of the License at\n+    \n+    http://www.apache.org/licenses/LICENSE-2.0\n+    \n+    Unless required by applicable law or agreed to in writing,\n+    software distributed under the License is distributed on an\n+    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+    KIND, either express or implied.  See the License for the\n+    specific language governing permissions and limitations\n+    under the License.   \n+-->\n+<project name=\"enhance\" basedir=\".\">\n+    <!--\n+        This build file executes the PCEnhancer on the test entities. It's in a\n+        separate file instead of nested in pom.xml to make some conditional \n+        processing easier.\n+        \n+        Test classes will not be compiled if maven is invoked with \n+        -Dmaven.test.skip=true. \n+    -->\n+\n+    <condition property=\"maven.test.skip.istrue\">\n+        <istrue value=\"${maven.test.skip}\" />\n+    </condition>\n+\n+\t<condition property=\"skip.enhance\">\n+\t\t<or>\n+        <equals arg1=\"${test}\" arg2=\"false\" />\n+\t\t\t<equals arg1=\"${build.enhance}\" arg2=\"false\" />\n+\t\t\t<istrue value=\"${maven.test.skip}\" />\n+\t\t\t<istrue value=\"${skipTests}\" />\n+        </or>\n+    </condition>\n+\n+    <!-- ================================= \n+          target: enhance              \n+         ================================= -->\n+    <target name=\"enhance\"\n+            description=\"--> run the enhancer unless test=false\"\n+            unless=\"skip.enhance\">\n+        <antcall target=\"enhance.all.entities\"\n+                 inheritall=\"true\"\n+                 inheritrefs=\"true\" />\n+    </target>\n+\n+    <!-- ================================= \n+          target: enhance.all.entities              \n+         ================================= -->\n+    <target name=\"enhance.all.entities\"\n+            description=\"--> enhance the test entities\"\n+            unless=\"skip.enhance\">\n+        <echo> running enhancer</echo>\n+        <!-- \n+            Inherited references won't be present until the task is called. \n+            Therefore the path definition needs to stay inside the task.\n+          -->\n+        <path id=\"cp\">\n+            <path refid=\"maven.test.classpath\" />\n+        </path>\n+\n+        <taskdef name=\"openjpac\"\n+                 classname=\"org.apache.openjpa.ant.PCEnhancerTask\">\n+            <classpath refid=\"cp\" />\n+        </taskdef>\n+\n+        <fileset id=\"enhance.path.ref\"\n+                 dir=\"${project.build.testOutputDirectory}\">\n+            <include name=\"**/daytrader/*.class\" />\n+            <exclude name=\"**/Test*.class\" />\n+        </fileset>\n+        <openjpac>\n+            <classpath refid=\"cp\" />\n+            <fileset refid=\"enhance.path.ref\" />\n+            <config log=\"DefaultLevel=${openjpa.loglevel}\" />\n+        </openjpac>\n+    </target>\n+</project>"},{"sha":"48dd1cc5cd97a358ce683eae46547405a230c671","filename":"openjpa-integration/daytrader/src/test/java/org/apache/openjpa/integration/daytrader/AccountDataBean.java","status":"added","additions":319,"deletions":0,"changes":319,"blob_url":"https://github.com/apache/openjpa/blob/b85c4e30fa0b03bc6c717e0370917662d9d64b5d/openjpa-integration/daytrader/src/test/java/org/apache/openjpa/integration/daytrader/AccountDataBean.java","raw_url":"https://github.com/apache/openjpa/raw/b85c4e30fa0b03bc6c717e0370917662d9d64b5d/openjpa-integration/daytrader/src/test/java/org/apache/openjpa/integration/daytrader/AccountDataBean.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/daytrader/src/test/java/org/apache/openjpa/integration/daytrader/AccountDataBean.java?ref=b85c4e30fa0b03bc6c717e0370917662d9d64b5d","patch":"@@ -0,0 +1,319 @@\n+/**\n+ *  Licensed to the Apache Software Foundation (ASF) under one or more\n+ *  contributor license agreements.  See the NOTICE file distributed with\n+ *  this work for additional information regarding copyright ownership.\n+ *  The ASF licenses this file to You under the Apache License, Version 2.0\n+ *  (the \"License\"); you may not use this file except in compliance with\n+ *  the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.apache.openjpa.integration.daytrader;\n+\n+import java.io.Serializable;\n+import java.math.BigDecimal;\n+import java.sql.Timestamp;\n+import java.util.Collection;\n+import java.util.Date;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.NamedQueries;\n+import javax.persistence.NamedQuery;\n+import javax.persistence.OneToMany;\n+import javax.persistence.OneToOne;\n+import javax.persistence.Table;\n+import javax.persistence.TableGenerator;\n+import javax.persistence.Temporal;\n+import javax.persistence.TemporalType;\n+import javax.persistence.Transient;\n+\n+//import org.apache.geronimo.samples.daytrader.util.Log;\n+//import org.apache.geronimo.samples.daytrader.util.TradeConfig;\n+\n+@Entity(name = \"accountejb\")\n+@Table(name = \"accountejb\")\n+@NamedQueries( {\n+        @NamedQuery(name = \"accountejb.findByCreationdate\", query = \"SELECT a FROM accountejb a WHERE a.creationDate = :creationdate\"),\n+        @NamedQuery(name = \"accountejb.findByOpenbalance\", query = \"SELECT a FROM accountejb a WHERE a.openBalance = :openbalance\"),\n+        @NamedQuery(name = \"accountejb.findByLogoutcount\", query = \"SELECT a FROM accountejb a WHERE a.logoutCount = :logoutcount\"),\n+        @NamedQuery(name = \"accountejb.findByBalance\", query = \"SELECT a FROM accountejb a WHERE a.balance = :balance\"),\n+        @NamedQuery(name = \"accountejb.findByAccountid\", query = \"SELECT a FROM accountejb a WHERE a.accountID = :accountid\"),\n+        @NamedQuery(name = \"accountejb.findByAccountid_eager\", query = \"SELECT a FROM accountejb a LEFT JOIN FETCH a.profile WHERE a.accountID = :accountid\"),\n+        @NamedQuery(name = \"accountejb.findByAccountid_eagerholdings\", query = \"SELECT a FROM accountejb a LEFT JOIN FETCH a.holdings WHERE a.accountID = :accountid\"),\n+        @NamedQuery(name = \"accountejb.findByLastlogin\", query = \"SELECT a FROM accountejb a WHERE a.lastLogin = :lastlogin\"),\n+        @NamedQuery(name = \"accountejb.findByLogincount\", query = \"SELECT a FROM accountejb a WHERE a.loginCount = :logincount\")\n+    })\n+public class AccountDataBean implements Serializable {\n+\n+    private static final long serialVersionUID = -7478907635822129745L;\n+\n+    /* Accessor methods for persistent fields */\n+    @TableGenerator(\n+            name=\"accountIdGen\",\n+            table=\"KEYGENEJB\",\n+            pkColumnName=\"KEYNAME\",\n+            valueColumnName=\"KEYVAL\",\n+            pkColumnValue=\"account\",\n+            allocationSize=1000)\n+    \n+    @Id\n+    @GeneratedValue(strategy=GenerationType.TABLE, generator=\"accountIdGen\")\n+    @Column(name = \"ACCOUNTID\", nullable = false)\n+    private Integer accountID;              /* accountID */\n+    \n+    @Column(name = \"LOGINCOUNT\", nullable = false)\n+    private int loginCount;                 /* loginCount */\n+    \n+    @Column(name = \"LOGOUTCOUNT\", nullable = false)\n+    private int logoutCount;                /* logoutCount */\n+    \n+    @Column(name = \"LASTLOGIN\")\n+    @Temporal(TemporalType.TIMESTAMP)\n+    private Date lastLogin;                 /* lastLogin Date */\n+    \n+    @Column(name = \"CREATIONDATE\")\n+    @Temporal(TemporalType.TIMESTAMP)\n+    private Date creationDate;              /* creationDate */\n+    \n+    @Column(name = \"BALANCE\")\n+    private BigDecimal balance;             /* balance */\n+    \n+    @Column(name = \"OPENBALANCE\")\n+    private BigDecimal openBalance;         /* open balance */\n+    \n+    @OneToMany(mappedBy = \"account\", fetch=FetchType.LAZY)\n+    private Collection<OrderDataBean> orders;\n+    \n+    @OneToMany(mappedBy = \"account\", fetch=FetchType.LAZY)\n+    private Collection<HoldingDataBean> holdings;\n+    \n+    @OneToOne(fetch=FetchType.LAZY)\n+    @JoinColumn(name=\"PROFILE_USERID\")\n+    private AccountProfileDataBean profile;\n+\n+//    @Version\n+//    private Integer optLock;\n+\n+    /* Accessor methods for relationship fields are only included for the AccountProfile profileID */\n+    @Transient\n+    private String profileID;\n+\n+    public AccountDataBean() {\n+    }\n+\n+    public AccountDataBean(Integer accountID,\n+            int loginCount,\n+            int logoutCount,\n+            Date lastLogin,\n+            Date creationDate,\n+            BigDecimal balance,\n+            BigDecimal openBalance,\n+            String profileID) {\n+        setAccountID(accountID);\n+        setLoginCount(loginCount);\n+        setLogoutCount(logoutCount);\n+        setLastLogin(lastLogin);\n+        setCreationDate(creationDate);\n+        setBalance(balance);\n+        setOpenBalance(openBalance);\n+        setProfileID(profileID);\n+    }\n+\n+    public AccountDataBean(int loginCount,\n+            int logoutCount,\n+            Date lastLogin,\n+            Date creationDate,\n+            BigDecimal balance,\n+            BigDecimal openBalance,\n+            String profileID) {\n+        setLoginCount(loginCount);\n+        setLogoutCount(logoutCount);\n+        setLastLogin(lastLogin);\n+        setCreationDate(creationDate);\n+        setBalance(balance);\n+        setOpenBalance(openBalance);\n+        setProfileID(profileID);\n+    }\n+\n+    public static AccountDataBean getRandomInstance() {\n+        return new AccountDataBean(new Integer(TradeConfig.rndInt(100000)), //accountID\n+                TradeConfig.rndInt(10000), //loginCount\n+                TradeConfig.rndInt(10000), //logoutCount\n+                new java.util.Date(), //lastLogin\n+                new java.util.Date(TradeConfig.rndInt(Integer.MAX_VALUE)), //creationDate\n+                TradeConfig.rndBigDecimal(1000000.0f), //balance\n+                TradeConfig.rndBigDecimal(1000000.0f), //openBalance\n+                TradeConfig.rndUserID() //profileID\n+        );\n+    }\n+\n+    public String toString() {\n+        return \"\\n\\tAccount Data for account: \" + getAccountID()\n+                + \"\\n\\t\\t   loginCount:\" + getLoginCount()\n+                + \"\\n\\t\\t  logoutCount:\" + getLogoutCount()\n+                + \"\\n\\t\\t    lastLogin:\" + getLastLogin()\n+                + \"\\n\\t\\t creationDate:\" + getCreationDate()\n+                + \"\\n\\t\\t      balance:\" + getBalance()\n+                + \"\\n\\t\\t  openBalance:\" + getOpenBalance()\n+                + \"\\n\\t\\t    profileID:\" + getProfileID()\n+                ;\n+    }\n+\n+    public String toHTML() {\n+        return \"<BR>Account Data for account: <B>\" + getAccountID() + \"</B>\"\n+                + \"<LI>   loginCount:\" + getLoginCount() + \"</LI>\"\n+                + \"<LI>  logoutCount:\" + getLogoutCount() + \"</LI>\"\n+                + \"<LI>    lastLogin:\" + getLastLogin() + \"</LI>\"\n+                + \"<LI> creationDate:\" + getCreationDate() + \"</LI>\"\n+                + \"<LI>      balance:\" + getBalance() + \"</LI>\"\n+                + \"<LI>  openBalance:\" + getOpenBalance() + \"</LI>\"\n+                + \"<LI>    profileID:\" + getProfileID() + \"</LI>\"\n+                ;\n+    }\n+\n+    public void print() {\n+        // Log.log(this.toString());\n+    }\n+\n+    public Integer getAccountID() {\n+        return accountID;\n+    }\n+\n+    public void setAccountID(Integer accountID) {\n+        this.accountID = accountID;\n+    }\n+\n+    public int getLoginCount() {\n+        return loginCount;\n+    }\n+\n+    public void setLoginCount(int loginCount) {\n+        this.loginCount = loginCount;\n+    }\n+\n+    public int getLogoutCount() {\n+        return logoutCount;\n+    }\n+\n+    public void setLogoutCount(int logoutCount) {\n+        this.logoutCount = logoutCount;\n+    }\n+\n+    public Date getLastLogin() {\n+        return lastLogin;\n+    }\n+\n+    public void setLastLogin(Date lastLogin) {\n+        this.lastLogin = lastLogin;\n+    }\n+\n+    public Date getCreationDate() {\n+        return creationDate;\n+    }\n+\n+    public void setCreationDate(Date creationDate) {\n+        this.creationDate = creationDate;\n+    }\n+\n+    public BigDecimal getBalance() {\n+        return balance;\n+    }\n+\n+    public void setBalance(BigDecimal balance) {\n+        this.balance = balance;\n+    }\n+\n+    public BigDecimal getOpenBalance() {\n+        return openBalance;\n+    }\n+\n+    public void setOpenBalance(BigDecimal openBalance) {\n+        this.openBalance = openBalance;\n+    }\n+\n+    public String getProfileID() {\n+        return profileID;\n+    }\n+\n+    public void setProfileID(String profileID) {\n+        this.profileID = profileID;\n+    }\n+\n+    /* Disabled for D185273\n+     public String getUserID() {\n+         return getProfileID();\n+     }\n+     */\n+\n+    public Collection<OrderDataBean> getOrders() {\n+        return orders;\n+    }\n+\n+    public void setOrders(Collection<OrderDataBean> orders) {\n+        this.orders = orders;\n+    }\n+    \n+    public Collection<HoldingDataBean> getHoldings() {\n+        return holdings;\n+    }\n+\n+    public void setHoldings(Collection<HoldingDataBean> holdings) {\n+        this.holdings = holdings;\n+    }\n+\n+    public AccountProfileDataBean getProfile() {\n+        return profile;\n+    }\n+\n+    public void setProfile(AccountProfileDataBean profile) {\n+        this.profile = profile;\n+    }\n+\n+    public void login(String password) {\n+        AccountProfileDataBean profile = getProfile();\n+        if ((profile == null) || (profile.getPassword().equals(password) == false)) {\n+            String error = \"AccountBean:Login failure for account: \" + getAccountID() +\n+                    ((profile == null) ? \"null AccountProfile\" :\n+                            \"\\n\\tIncorrect password-->\" + profile.getUserID() + \":\" + profile.getPassword());\n+            throw new RuntimeException(error);\n+            \n+        }\n+\n+        setLastLogin(new Timestamp(System.currentTimeMillis()));\n+        setLoginCount(getLoginCount() + 1);\n+    }\n+\n+    public void logout() {\n+        setLogoutCount(getLogoutCount() + 1);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        int hash = 0;\n+        hash += (this.accountID != null ? this.accountID.hashCode() : 0);\n+        return hash;\n+    }\n+\n+    @Override\n+    public boolean equals(Object object) {\n+        // TODO: Warning - this method won't work in the case the id fields are not set\n+        if (!(object instanceof AccountDataBean)) {\n+            return false;\n+        }\n+        AccountDataBean other = (AccountDataBean)object;\n+        if (this.accountID != other.accountID && (this.accountID == null || !this.accountID.equals(other.accountID))) return false;\n+        return true;\n+    }\n+}"},{"sha":"cb008fc9f6fcd76602f10706228779ecca523c65","filename":"openjpa-integration/daytrader/src/test/java/org/apache/openjpa/integration/daytrader/AccountProfileDataBean.java","status":"added","additions":197,"deletions":0,"changes":197,"blob_url":"https://github.com/apache/openjpa/blob/b85c4e30fa0b03bc6c717e0370917662d9d64b5d/openjpa-integration/daytrader/src/test/java/org/apache/openjpa/integration/daytrader/AccountProfileDataBean.java","raw_url":"https://github.com/apache/openjpa/raw/b85c4e30fa0b03bc6c717e0370917662d9d64b5d/openjpa-integration/daytrader/src/test/java/org/apache/openjpa/integration/daytrader/AccountProfileDataBean.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/daytrader/src/test/java/org/apache/openjpa/integration/daytrader/AccountProfileDataBean.java?ref=b85c4e30fa0b03bc6c717e0370917662d9d64b5d","patch":"@@ -0,0 +1,197 @@\n+/**\n+ *  Licensed to the Apache Software Foundation (ASF) under one or more\n+ *  contributor license agreements.  See the NOTICE file distributed with\n+ *  this work for additional information regarding copyright ownership.\n+ *  The ASF licenses this file to You under the Apache License, Version 2.0\n+ *  (the \"License\"); you may not use this file except in compliance with\n+ *  the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.apache.openjpa.integration.daytrader;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.Id;\n+import javax.persistence.NamedQueries;\n+import javax.persistence.NamedQuery;\n+import javax.persistence.OneToOne;\n+import javax.persistence.Table;\n+\n+// import org.apache.geronimo.samples.daytrader.util.Log;\n+// import org.apache.geronimo.samples.daytrader.util.TradeConfig;\n+\n+@Entity(name = \"accountprofileejb\")\n+@Table(name = \"accountprofileejb\")\n+@NamedQueries( {\n+        @NamedQuery(name = \"accountprofileejb.findByAddress\", query = \"SELECT a FROM accountprofileejb a WHERE a.address = :address\"),\n+        @NamedQuery(name = \"accountprofileejb.findByPasswd\", query = \"SELECT a FROM accountprofileejb a WHERE a.passwd = :passwd\"),\n+        @NamedQuery(name = \"accountprofileejb.findByUserid\", query = \"SELECT a FROM accountprofileejb a WHERE a.userID = :userid\"),\n+        @NamedQuery(name = \"accountprofileejb.findByEmail\", query = \"SELECT a FROM accountprofileejb a WHERE a.email = :email\"),\n+        @NamedQuery(name = \"accountprofileejb.findByCreditcard\", query = \"SELECT a FROM accountprofileejb a WHERE a.creditCard = :creditcard\"),\n+        @NamedQuery(name = \"accountprofileejb.findByFullname\", query = \"SELECT a FROM accountprofileejb a WHERE a.fullName = :fullname\")\n+    })\n+public class AccountProfileDataBean implements java.io.Serializable {\n+\n+    private static final long serialVersionUID = 4243248264186612106L;\n+\n+    /* Accessor methods for persistent fields */\n+\n+    @Id\n+    @Column(name = \"USERID\", nullable = false)\n+    private String userID;              /* userID */\n+    \n+    @Column(name = \"PASSWD\")\n+    private String passwd;              /* password */\n+    \n+    @Column(name = \"FULLNAME\")\n+    private String fullName;            /* fullName */\n+    \n+    @Column(name = \"ADDRESS\")\n+    private String address;             /* address */\n+    \n+    @Column(name = \"EMAIL\")\n+    private String email;               /* email */\n+    \n+    @Column(name = \"CREDITCARD\")\n+    private String creditCard;          /* creditCard */\n+    \n+    @OneToOne(mappedBy=\"profile\", fetch=FetchType.LAZY)\n+    private AccountDataBean account;\n+\n+//    @Version\n+//    private Integer optLock;\n+\n+    public AccountProfileDataBean() {\n+    }\n+\n+    public AccountProfileDataBean(String userID,\n+            String password,\n+            String fullName,\n+            String address,\n+            String email,\n+            String creditCard) {\n+        setUserID(userID);\n+        setPassword(password);\n+        setFullName(fullName);\n+        setAddress(address);\n+        setEmail(email);\n+        setCreditCard(creditCard);\n+    }\n+\n+    public static AccountProfileDataBean getRandomInstance() {\n+        return new AccountProfileDataBean(\n+                TradeConfig.rndUserID(),                        // userID\n+                TradeConfig.rndUserID(),                        // passwd\n+                TradeConfig.rndFullName(),                      // fullname\n+                TradeConfig.rndAddress(),                       // address\n+                TradeConfig.rndEmail(TradeConfig.rndUserID()),  //email\n+                TradeConfig.rndCreditCard()                     // creditCard\n+        );\n+    }\n+\n+    public String toString() {\n+        return \"\\n\\tAccount Profile Data for userID:\" + getUserID()\n+                + \"\\n\\t\\t   passwd:\" + getPassword()\n+                + \"\\n\\t\\t   fullName:\" + getFullName()\n+                + \"\\n\\t\\t    address:\" + getAddress()\n+                + \"\\n\\t\\t      email:\" + getEmail()\n+                + \"\\n\\t\\t creditCard:\" + getCreditCard()\n+                ;\n+    }\n+\n+    public String toHTML() {\n+        return \"<BR>Account Profile Data for userID: <B>\" + getUserID() + \"</B>\"\n+                + \"<LI>   passwd:\" + getPassword() + \"</LI>\"\n+                + \"<LI>   fullName:\" + getFullName() + \"</LI>\"\n+                + \"<LI>    address:\" + getAddress() + \"</LI>\"\n+                + \"<LI>      email:\" + getEmail() + \"</LI>\"\n+                + \"<LI> creditCard:\" + getCreditCard() + \"</LI>\"\n+                ;\n+    }\n+\n+    public void print() {\n+        // Log.log(this.toString());\n+    }\n+\n+    public String getUserID() {\n+        return userID;\n+    }\n+\n+    public void setUserID(String userID) {\n+        this.userID = userID;\n+    }\n+\n+    public String getPassword() {\n+        return passwd;\n+    }\n+\n+    public void setPassword(String password) {\n+        this.passwd = password;\n+    }\n+\n+    public String getFullName() {\n+        return fullName;\n+    }\n+\n+    public void setFullName(String fullName) {\n+        this.fullName = fullName;\n+    }\n+\n+    public String getAddress() {\n+        return address;\n+    }\n+\n+    public void setAddress(String address) {\n+        this.address = address;\n+    }\n+\n+    public String getEmail() {\n+        return email;\n+    }\n+\n+    public void setEmail(String email) {\n+        this.email = email;\n+    }\n+\n+    public String getCreditCard() {\n+        return creditCard;\n+    }\n+\n+    public void setCreditCard(String creditCard) {\n+        this.creditCard = creditCard;\n+    }\n+\n+    public AccountDataBean getAccount() {\n+        return account;\n+    }\n+\n+    public void setAccount(AccountDataBean account) {\n+        this.account = account;\n+    }\n+    \n+    @Override\n+    public int hashCode() {\n+        int hash = 0;\n+        hash += (this.userID != null ? this.userID.hashCode() : 0);\n+        return hash;\n+    }\n+\n+    @Override\n+    public boolean equals(Object object) {\n+        // TODO: Warning - this method won't work in the case the id fields are not set\n+        if (!(object instanceof AccountProfileDataBean)) {\n+            return false;\n+        }\n+        AccountProfileDataBean other = (AccountProfileDataBean)object;\n+        if (this.userID != other.userID && (this.userID == null || !this.userID.equals(other.userID))) return false;\n+        return true;\n+    }\n+}"},{"sha":"ca066c72324c30a050a3073e4877505090e4d33d","filename":"openjpa-integration/daytrader/src/test/java/org/apache/openjpa/integration/daytrader/HoldingDataBean.java","status":"added","additions":234,"deletions":0,"changes":234,"blob_url":"https://github.com/apache/openjpa/blob/b85c4e30fa0b03bc6c717e0370917662d9d64b5d/openjpa-integration/daytrader/src/test/java/org/apache/openjpa/integration/daytrader/HoldingDataBean.java","raw_url":"https://github.com/apache/openjpa/raw/b85c4e30fa0b03bc6c717e0370917662d9d64b5d/openjpa-integration/daytrader/src/test/java/org/apache/openjpa/integration/daytrader/HoldingDataBean.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/daytrader/src/test/java/org/apache/openjpa/integration/daytrader/HoldingDataBean.java?ref=b85c4e30fa0b03bc6c717e0370917662d9d64b5d","patch":"@@ -0,0 +1,234 @@\n+/**\n+ *  Licensed to the Apache Software Foundation (ASF) under one or more\n+ *  contributor license agreements.  See the NOTICE file distributed with\n+ *  this work for additional information regarding copyright ownership.\n+ *  The ASF licenses this file to You under the Apache License, Version 2.0\n+ *  (the \"License\"); you may not use this file except in compliance with\n+ *  the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.apache.openjpa.integration.daytrader;\n+\n+import java.io.Serializable;\n+import java.math.BigDecimal;\n+import java.util.Date;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.NamedQueries;\n+import javax.persistence.NamedQuery;\n+import javax.persistence.Table;\n+import javax.persistence.TableGenerator;\n+import javax.persistence.Temporal;\n+import javax.persistence.TemporalType;\n+import javax.persistence.Transient;\n+\n+// import org.apache.geronimo.samples.daytrader.util.Log;\n+// import org.apache.geronimo.samples.daytrader.util.TradeConfig;\n+\n+@Entity(name = \"holdingejb\")\n+@Table(name = \"holdingejb\")\n+@NamedQueries( {\n+        @NamedQuery(name = \"holdingejb.findByPurchaseprice\", query = \"SELECT h FROM holdingejb h WHERE h.purchasePrice = :purchaseprice\"),\n+        @NamedQuery(name = \"holdingejb.findByHoldingid\", query = \"SELECT h FROM holdingejb h WHERE h.holdingID = :holdingid\"),\n+        @NamedQuery(name = \"holdingejb.findByQuantity\", query = \"SELECT h FROM holdingejb h WHERE h.quantity = :quantity\"),\n+        @NamedQuery(name = \"holdingejb.findByPurchasedate\", query = \"SELECT h FROM holdingejb h WHERE h.purchaseDate = :purchasedate\"),\n+        @NamedQuery(name = \"holdingejb.holdingsByUserID\", query = \"SELECT h FROM holdingejb h where h.account.profile.userID = :userID\")\n+    })\n+public class HoldingDataBean implements Serializable {\n+\n+    private static final long serialVersionUID = 4779293652434823280L;\n+\n+    /* persistent/relationship fields */\n+\n+    @TableGenerator(\n+            name=\"holdingIdGen\",\n+            table=\"KEYGENEJB\",\n+            pkColumnName=\"KEYNAME\",\n+            valueColumnName=\"KEYVAL\",\n+            pkColumnValue=\"holding\",\n+            allocationSize=1000)\n+    @Id\n+    @GeneratedValue(strategy=GenerationType.TABLE, generator=\"holdingIdGen\")\n+    @Column(name = \"HOLDINGID\", nullable = false)\n+    private Integer holdingID;              /* holdingID */\n+    \n+    @Column(name = \"QUANTITY\", nullable = false)\n+    private double quantity;                /* quantity */\n+    \n+    @Column(name = \"PURCHASEPRICE\")\n+    private BigDecimal purchasePrice;       /* purchasePrice */\n+    \n+    @Column(name = \"PURCHASEDATE\")\n+    @Temporal(TemporalType.TIMESTAMP)\n+    private Date purchaseDate;              /* purchaseDate */\n+    \n+    @Transient\n+    private String quoteID;                 /* Holding(*)  ---> Quote(1) */\n+    \n+    @ManyToOne(fetch=FetchType.LAZY)\n+    @JoinColumn(name=\"ACCOUNT_ACCOUNTID\")\n+    private AccountDataBean account;\n+    \n+    @ManyToOne(fetch=FetchType.EAGER)\n+    @JoinColumn(name = \"QUOTE_SYMBOL\")\n+    private QuoteDataBean quote;\n+\n+//    @Version\n+//    private Integer optLock;\n+\n+    public HoldingDataBean() {\n+    }\n+\n+    public HoldingDataBean(Integer holdingID,\n+            double quantity,\n+            BigDecimal purchasePrice,\n+            Date purchaseDate,\n+            String quoteID) {\n+        setHoldingID(holdingID);\n+        setQuantity(quantity);\n+        setPurchasePrice(purchasePrice);\n+        setPurchaseDate(purchaseDate);\n+        setQuoteID(quoteID);\n+    }\n+\n+    public HoldingDataBean(double quantity,\n+            BigDecimal purchasePrice,\n+            Date purchaseDate,\n+            AccountDataBean account,\n+            QuoteDataBean quote) {\n+        setQuantity(quantity);\n+        setPurchasePrice(purchasePrice);\n+        setPurchaseDate(purchaseDate);\n+        setAccount(account);\n+        setQuote(quote);\n+    }\n+\n+    public static HoldingDataBean getRandomInstance() {\n+        return new HoldingDataBean(\n+                new Integer(TradeConfig.rndInt(100000)),     //holdingID\n+                TradeConfig.rndQuantity(),                     //quantity\n+                TradeConfig.rndBigDecimal(1000.0f),             //purchasePrice\n+                new java.util.Date(TradeConfig.rndInt(Integer.MAX_VALUE)), //purchaseDate\n+                TradeConfig.rndSymbol()                        // symbol\n+        );\n+    }\n+\n+    public String toString() {\n+        return \"\\n\\tHolding Data for holding: \" + getHoldingID()\n+                + \"\\n\\t\\t      quantity:\" + getQuantity()\n+                + \"\\n\\t\\t purchasePrice:\" + getPurchasePrice()\n+                + \"\\n\\t\\t  purchaseDate:\" + getPurchaseDate()\n+                + \"\\n\\t\\t       quoteID:\" + getQuoteID()\n+                ;\n+    }\n+\n+    public String toHTML() {\n+        return \"<BR>Holding Data for holding: \" + getHoldingID() + \"</B>\"\n+                + \"<LI>      quantity:\" + getQuantity() + \"</LI>\"\n+                + \"<LI> purchasePrice:\" + getPurchasePrice() + \"</LI>\"\n+                + \"<LI>  purchaseDate:\" + getPurchaseDate() + \"</LI>\"\n+                + \"<LI>       quoteID:\" + getQuoteID() + \"</LI>\"\n+                ;\n+    }\n+\n+    public void print() {\n+        // Log.log(this.toString());\n+    }\n+\n+    public Integer getHoldingID() {\n+        return holdingID;\n+    }\n+\n+    public void setHoldingID(Integer holdingID) {\n+        this.holdingID = holdingID;\n+    }\n+\n+    public double getQuantity() {\n+        return quantity;\n+    }\n+\n+    public void setQuantity(double quantity) {\n+        this.quantity = quantity;\n+    }\n+\n+    public BigDecimal getPurchasePrice() {\n+        return purchasePrice;\n+    }\n+\n+    public void setPurchasePrice(BigDecimal purchasePrice) {\n+        this.purchasePrice = purchasePrice;\n+    }\n+\n+    public Date getPurchaseDate() {\n+        return purchaseDate;\n+    }\n+\n+    public void setPurchaseDate(Date purchaseDate) {\n+        this.purchaseDate = purchaseDate;\n+    }\n+\n+    public String getQuoteID() {\n+        if (quote != null) {\n+            return quote.getSymbol();\n+        }\n+        return quoteID;\n+    }\n+\n+    public void setQuoteID(String quoteID) {\n+        this.quoteID = quoteID;\n+    }\n+\n+    public AccountDataBean getAccount() {\n+        return account;\n+    }\n+\n+    public void setAccount(AccountDataBean account) {\n+        this.account = account;\n+    }\n+\n+    /* Disabled for D185273\n+     public String getSymbol() {\n+         return getQuoteID();\n+     }\n+     */\n+    \n+    public QuoteDataBean getQuote() {\n+        return quote;\n+    }\n+\n+    public void setQuote(QuoteDataBean quote) {\n+        this.quote = quote;\n+    }\n+    \n+    @Override\n+    public int hashCode() {\n+        int hash = 0;\n+        hash += (this.holdingID != null ? this.holdingID.hashCode() : 0);\n+        return hash;\n+    }\n+\n+    @Override\n+    public boolean equals(Object object) {\n+        // TODO: Warning - this method won't work in the case the id fields are not set\n+        if (!(object instanceof HoldingDataBean)) {\n+            return false;\n+        }\n+        HoldingDataBean other = (HoldingDataBean) object;\n+        if (this.holdingID != other.holdingID && (this.holdingID == null || !this.holdingID.equals(other.holdingID))) return false;\n+        return true;\n+    }\n+}"},{"sha":"51b5bdc5261ce4ba7f69316e66a59aed609b374c","filename":"openjpa-integration/daytrader/src/test/java/org/apache/openjpa/integration/daytrader/MarketSummaryDataBean.java","status":"added","additions":249,"deletions":0,"changes":249,"blob_url":"https://github.com/apache/openjpa/blob/b85c4e30fa0b03bc6c717e0370917662d9d64b5d/openjpa-integration/daytrader/src/test/java/org/apache/openjpa/integration/daytrader/MarketSummaryDataBean.java","raw_url":"https://github.com/apache/openjpa/raw/b85c4e30fa0b03bc6c717e0370917662d9d64b5d/openjpa-integration/daytrader/src/test/java/org/apache/openjpa/integration/daytrader/MarketSummaryDataBean.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/daytrader/src/test/java/org/apache/openjpa/integration/daytrader/MarketSummaryDataBean.java?ref=b85c4e30fa0b03bc6c717e0370917662d9d64b5d","patch":"@@ -0,0 +1,249 @@\n+/**\n+ *  Licensed to the Apache Software Foundation (ASF) under one or more\n+ *  contributor license agreements.  See the NOTICE file distributed with\n+ *  this work for additional information regarding copyright ownership.\n+ *  The ASF licenses this file to You under the Apache License, Version 2.0\n+ *  (the \"License\"); you may not use this file except in compliance with\n+ *  the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.apache.openjpa.integration.daytrader;\n+\n+import java.io.Serializable;\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Date;\n+import java.util.Iterator;\n+\n+// import org.apache.geronimo.samples.daytrader.beans.QuoteDataBean;\n+// import org.apache.geronimo.samples.daytrader.util.Log;\n+// import org.apache.geronimo.samples.daytrader.util.TradeConfig;\n+\n+public class MarketSummaryDataBean implements Serializable\n+{\n+\n+\tprivate static final long serialVersionUID = -2753373502228082501L;\n+\t\n+    private BigDecimal \tTSIA;\t\t\t/* Trade Stock Index Average */\n+\tprivate BigDecimal \topenTSIA;\t\t/* Trade Stock Index Average at the open */\t\n+\tprivate double  \tvolume; \t\t/* volume of shares traded */\n+\tprivate Collection \ttopGainers;\t\t/* Collection of top gaining stocks */\n+\tprivate Collection \ttopLosers;\t\t/* Collection of top losing stocks */\t\n+\t//FUTURE private Collection \ttopVolume;\t\t/* Collection of top stocks by volume */\t\t\n+\tprivate Date\t\t\tsummaryDate;   /* Date this summary was taken */\n+\t\n+\t//cache the gainPercent once computed for this bean\n+\tprivate BigDecimal  gainPercent=null;\n+\n+\tpublic MarketSummaryDataBean(){ }\n+\tpublic MarketSummaryDataBean(BigDecimal TSIA,\n+\t\t\t\t\t\t\tBigDecimal  openTSIA,\n+\t\t\t\t\t\t\tdouble\t\tvolume,\n+\t\t\t\t\t\t\tCollection \ttopGainers,\n+\t\t\t\t\t\t\tCollection \ttopLosers//, Collection topVolume\n+\t\t\t\t\t\t\t)\n+\t{\n+\t\tsetTSIA(TSIA);\n+\t\tsetOpenTSIA(openTSIA);\n+\t\tsetVolume(volume);\n+\t\tsetTopGainers(topGainers);\n+\t\tsetTopLosers(topLosers);\n+\t\tsetSummaryDate(new java.sql.Date(System.currentTimeMillis()));\n+\t\tgainPercent = computeGainPercent(getTSIA(), getOpenTSIA());\n+\t\t\n+\t}\n+\t\n+\tpublic static MarketSummaryDataBean getRandomInstance() {\n+\t\tCollection gain = new ArrayList();\n+\t\tCollection lose = new ArrayList();\n+\t\t\n+\t\tfor (int ii = 0; ii < 5; ii++) {\n+\t\t\tQuoteDataBean quote1 = QuoteDataBean.getRandomInstance();\n+\t\t\tQuoteDataBean quote2 = QuoteDataBean.getRandomInstance();\n+\t\t\t\n+\t\t\tgain.add(quote1);\n+\t\t\tlose.add(quote2);\n+\t\t}\n+\t\t\n+\t\treturn new MarketSummaryDataBean(\n+\t\t\tTradeConfig.rndBigDecimal(1000000.0f),\n+\t\t\tTradeConfig.rndBigDecimal(1000000.0f),\n+\t\t\tTradeConfig.rndQuantity(),\n+\t\t\tgain,\n+\t\t\tlose\n+\t\t);\n+\t}\n+\n+\tpublic String toString()\n+\t{\n+\t\tString ret = \"\\n\\tMarket Summary at: \" + getSummaryDate()\n+\t\t\t+ \"\\n\\t\\t        TSIA:\" + getTSIA()\n+\t\t\t+ \"\\n\\t\\t    openTSIA:\" + getOpenTSIA()\n+\t\t\t+ \"\\n\\t\\t        gain:\" + getGainPercent()\n+\t\t\t+ \"\\n\\t\\t      volume:\" + getVolume()\n+\t\t\t;\n+\n+\t\tif ( (getTopGainers()==null) || (getTopLosers()==null) )\n+\t\t\treturn ret;\n+\t\tret += \"\\n\\t\\t   Current Top Gainers:\";\n+\t\tIterator it = getTopGainers().iterator();\n+\t\twhile ( it.hasNext() ) \n+\t\t{\n+\t\t\tQuoteDataBean quoteData = (QuoteDataBean) it.next();\n+\t\t\tret += ( \"\\n\\t\\t\\t\"  + quoteData.toString() );\n+\t\t}\n+\t\tret += \"\\n\\t\\t   Current Top Losers:\";\n+\t\tit = getTopLosers().iterator();\n+\t\twhile ( it.hasNext() ) \n+\t\t{\n+\t\t\tQuoteDataBean quoteData = (QuoteDataBean) it.next();\n+\t\t\tret += ( \"\\n\\t\\t\\t\"  + quoteData.toString() );\n+\t\t}\n+\t\treturn ret;\t\t\n+\t}\n+\tpublic String toHTML()\n+\t{\n+\t\tString ret = \"<BR>Market Summary at: \" + getSummaryDate()\n+\t\t\t+ \"<LI>        TSIA:\" + getTSIA() + \"</LI>\"\n+\t\t\t+ \"<LI>    openTSIA:\" + getOpenTSIA() + \"</LI>\"\n+\t\t\t+ \"<LI>      volume:\" + getVolume() + \"</LI>\"\n+\t\t\t;\n+\t\tif ( (getTopGainers()==null) || (getTopLosers()==null) )\n+\t\t\treturn ret;\n+\t\tret += \"<BR> Current Top Gainers:\";\n+\t\tIterator it = getTopGainers().iterator();\n+\t\twhile ( it.hasNext() ) \n+\t\t{\n+\t\t\tQuoteDataBean quoteData = (QuoteDataBean) it.next();\n+\t\t\tret += ( \"<LI>\"  + quoteData.toString()  + \"</LI>\" );\n+\t\t}\n+\t\tret += \"<BR>   Current Top Losers:\";\n+\t\tit = getTopLosers().iterator();\n+\t\twhile ( it.hasNext() ) \n+\t\t{\n+\t\t\tQuoteDataBean quoteData = (QuoteDataBean) it.next();\n+\t\t\tret += ( \"<LI>\"  + quoteData.toString()  + \"</LI>\" );\n+\t\t}\n+\t\treturn ret;\n+\t}\n+\tpublic void print()\n+\t{\n+\t\t// Log.log( this.toString() );\n+\t}\t\n+\t\n+\tpublic BigDecimal getGainPercent()\n+\t{\n+\t\tif ( gainPercent == null )\n+\t\t\tgainPercent = computeGainPercent(getTSIA(), getOpenTSIA());\n+\t\treturn gainPercent;\n+\t}\n+\n+\n+\t/**\n+\t * Gets the tSIA\n+\t * @return Returns a BigDecimal\n+\t */\n+\tpublic BigDecimal getTSIA() {\n+\t\treturn TSIA;\n+\t}\n+\t/**\n+\t * Sets the tSIA\n+\t * @param tSIA The tSIA to set\n+\t */\n+\tpublic void setTSIA(BigDecimal tSIA) {\n+\t\tTSIA = tSIA;\n+\t}\n+\n+\t/**\n+\t * Gets the openTSIA\n+\t * @return Returns a BigDecimal\n+\t */\n+\tpublic BigDecimal getOpenTSIA() {\n+\t\treturn openTSIA;\n+\t}\n+\t/**\n+\t * Sets the openTSIA\n+\t * @param openTSIA The openTSIA to set\n+\t */\n+\tpublic void setOpenTSIA(BigDecimal openTSIA) {\n+\t\tthis.openTSIA = openTSIA;\n+\t}\n+\n+\t/**\n+\t * Gets the volume\n+\t * @return Returns a BigDecimal\n+\t */\n+\tpublic double getVolume() {\n+\t\treturn volume;\n+\t}\n+\t/**\n+\t * Sets the volume\n+\t * @param volume The volume to set\n+\t */\n+\tpublic void setVolume(double volume) {\n+\t\tthis.volume = volume;\n+\t}\n+\n+\t/**\n+\t * Gets the topGainers\n+\t * @return Returns a Collection\n+\t */\n+\tpublic Collection getTopGainers() {\n+\t\treturn topGainers;\n+\t}\n+\t/**\n+\t * Sets the topGainers\n+\t * @param topGainers The topGainers to set\n+\t */\n+\tpublic void setTopGainers(Collection topGainers) {\n+\t\tthis.topGainers = topGainers;\n+\t}\n+\n+\t/**\n+\t * Gets the topLosers\n+\t * @return Returns a Collection\n+\t */\n+\tpublic Collection getTopLosers() {\n+\t\treturn topLosers;\n+\t}\n+\t/**\n+\t * Sets the topLosers\n+\t * @param topLosers The topLosers to set\n+\t */\n+\tpublic void setTopLosers(Collection topLosers) {\n+\t\tthis.topLosers = topLosers;\n+\t}\n+\n+\t/**\n+\t * Gets the summaryDate\n+\t * @return Returns a Date\n+\t */\n+\tpublic Date getSummaryDate() {\n+\t\treturn summaryDate;\n+\t}\n+\t/**\n+\t * Sets the summaryDate\n+\t * @param summaryDate The summaryDate to set\n+\t */\n+\tpublic void setSummaryDate(Date summaryDate) {\n+\t\tthis.summaryDate = summaryDate;\n+\t}\n+\n+\t// from FinancialUtils\n+    private BigDecimal computeGainPercent(BigDecimal currentBalance, BigDecimal openBalance)\n+    {\n+        if (openBalance.doubleValue() == 0.0) return (new BigDecimal(0.00)).setScale(2);\n+        BigDecimal gainPercent = currentBalance.divide(openBalance, BigDecimal.ROUND_HALF_UP)\n+            .subtract((new BigDecimal(1.00)).setScale(2)).multiply((new BigDecimal(100.00)).setScale(2));\n+        return gainPercent;\n+    }\n+\n+}"},{"sha":"d29f60bffdf07c123c6259fd1b410613dc673aea","filename":"openjpa-integration/daytrader/src/test/java/org/apache/openjpa/integration/daytrader/OrderDataBean.java","status":"added","additions":380,"deletions":0,"changes":380,"blob_url":"https://github.com/apache/openjpa/blob/b85c4e30fa0b03bc6c717e0370917662d9d64b5d/openjpa-integration/daytrader/src/test/java/org/apache/openjpa/integration/daytrader/OrderDataBean.java","raw_url":"https://github.com/apache/openjpa/raw/b85c4e30fa0b03bc6c717e0370917662d9d64b5d/openjpa-integration/daytrader/src/test/java/org/apache/openjpa/integration/daytrader/OrderDataBean.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/daytrader/src/test/java/org/apache/openjpa/integration/daytrader/OrderDataBean.java?ref=b85c4e30fa0b03bc6c717e0370917662d9d64b5d","patch":"@@ -0,0 +1,380 @@\n+/**\n+ *  Licensed to the Apache Software Foundation (ASF) under one or more\n+ *  contributor license agreements.  See the NOTICE file distributed with\n+ *  this work for additional information regarding copyright ownership.\n+ *  The ASF licenses this file to You under the Apache License, Version 2.0\n+ *  (the \"License\"); you may not use this file except in compliance with\n+ *  the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.apache.openjpa.integration.daytrader;\n+\n+import java.io.Serializable;\n+import java.math.BigDecimal;\n+import java.util.Date;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.NamedQueries;\n+import javax.persistence.NamedQuery;\n+import javax.persistence.Table;\n+import javax.persistence.TableGenerator;\n+import javax.persistence.Temporal;\n+import javax.persistence.TemporalType;\n+import javax.persistence.Transient;\n+\n+// import org.apache.geronimo.samples.daytrader.util.Log;\n+// import org.apache.geronimo.samples.daytrader.util.TradeConfig;\n+\n+@Entity(name=\"orderejb\")\n+@Table(name = \"orderejb\")\n+@NamedQueries( {\n+    @NamedQuery(name = \"orderejb.findByOrderfee\", query = \"SELECT o FROM orderejb o WHERE o.orderFee = :orderfee\"),\n+    @NamedQuery(name = \"orderejb.findByCompletiondate\", query = \"SELECT o FROM orderejb o WHERE o.completionDate = :completiondate\"),\n+    @NamedQuery(name = \"orderejb.findByOrdertype\", query = \"SELECT o FROM orderejb o WHERE o.orderType = :ordertype\"),\n+    @NamedQuery(name = \"orderejb.findByOrderstatus\", query = \"SELECT o FROM orderejb o WHERE o.orderStatus = :orderstatus\"),\n+    @NamedQuery(name = \"orderejb.findByPrice\", query = \"SELECT o FROM orderejb o WHERE o.price = :price\"),\n+    @NamedQuery(name = \"orderejb.findByQuantity\", query = \"SELECT o FROM orderejb o WHERE o.quantity = :quantity\"),\n+    @NamedQuery(name = \"orderejb.findByOpendate\", query = \"SELECT o FROM orderejb o WHERE o.openDate = :opendate\"),\n+    @NamedQuery(name = \"orderejb.findByOrderid\", query = \"SELECT o FROM orderejb o WHERE o.orderID = :orderid\"),\n+    @NamedQuery(name = \"orderejb.findByAccountAccountid\", query = \"SELECT o FROM orderejb o WHERE o.account.accountID = :accountAccountid\"),\n+    @NamedQuery(name = \"orderejb.findByQuoteSymbol\", query = \"SELECT o FROM orderejb o WHERE o.quote.symbol = :quoteSymbol\"),\n+    // Never used query related to FK constraint on holdingejb. the FK constraint will cause EJB3 runtime mode failure. So comment it.\n+    //@NamedQuery(name = \"orderejb.findByHoldingHoldingid\", query = \"SELECT o FROM orderejb o WHERE o.holding.holdingID = :holdingHoldingid\"),\n+    @NamedQuery(name = \"orderejb.closedOrders\", query = \"SELECT o FROM orderejb o WHERE o.orderStatus = 'closed' AND o.account.profile.userID  = :userID\"),\n+    @NamedQuery(name = \"orderejb.completeClosedOrders\", query = \"UPDATE orderejb o SET o.orderStatus = 'completed' WHERE o.orderStatus = 'closed' AND o.account.profile.userID  = :userID\")\n+})\n+public class OrderDataBean implements Serializable\n+{\n+\n+    private static final long serialVersionUID = 7374883697399608766L;\n+\n+    @TableGenerator(\n+            name=\"orderIdGen\",\n+            table=\"KEYGENEJB\",\n+            pkColumnName=\"KEYNAME\",\n+            valueColumnName=\"KEYVAL\",\n+            pkColumnValue=\"order\",\n+            allocationSize=1000)\n+    @Id\n+    @GeneratedValue(strategy=GenerationType.TABLE, generator=\"orderIdGen\")\n+    @Column(name = \"ORDERID\", nullable = false)        \n+    private Integer orderID;            /* orderID */\n+    \n+    @Column(name = \"ORDERTYPE\")\n+    private String orderType;           /* orderType (buy, sell, etc.) */\n+    \n+    @Column(name = \"ORDERSTATUS\")\n+    private String orderStatus;         /* orderStatus (open, processing, completed, closed, cancelled) */\n+    \n+    @Column(name = \"OPENDATE\")\n+    @Temporal(TemporalType.TIMESTAMP)\n+    private Date openDate;              /* openDate (when the order was entered) */\n+    \n+    @Column(name = \"COMPLETIONDATE\")\n+    @Temporal(TemporalType.TIMESTAMP)\n+    private Date completionDate;\t\t/* completionDate */\n+    \n+    @Column(name = \"QUANTITY\", nullable = false)\n+    private double quantity;\t\t\t/* quantity */\n+    \n+    @Column(name = \"PRICE\")\n+    private BigDecimal price;\t\t\t\t/* price */\n+    \n+    @Column(name = \"ORDERFEE\")\n+    private BigDecimal orderFee;\t\t\t/* price */\n+    \n+    @ManyToOne(fetch=FetchType.LAZY)\n+    @JoinColumn(name=\"ACCOUNT_ACCOUNTID\")\n+    private AccountDataBean account;\n+    \n+    @ManyToOne(fetch=FetchType.EAGER)\n+    @JoinColumn(name=\"QUOTE_SYMBOL\")\n+    private QuoteDataBean quote;\n+    \n+    // Cause sell operation failed, see JIRA DAYTRADER-63 for details.\n+    //@OneToOne(fetch=FetchType.LAZY)\n+    //@JoinColumn(name = \"HOLDING_HOLDINGID\")\n+    // Cause sell operation failed, see JIRA DAYTRADER-63 for details.\n+    @Transient    \n+    private HoldingDataBean holding;\n+\n+//    @Version\n+//    private Integer optLock;\n+\n+    /* Fields for relationship fields are not kept in the Data Bean */\n+    @Transient\n+    private String symbol;\n+\n+    public OrderDataBean() {        \n+    }\n+\n+    public OrderDataBean(Integer orderID,\n+                            String orderType,\n+                            String orderStatus,\n+                            Date openDate,\n+                            Date completionDate,\n+                            double quantity,\n+                            BigDecimal price,\n+                            BigDecimal orderFee,\n+                            String symbol\n+                            ) {\n+        setOrderID(orderID);\n+        setOrderType(orderType);\n+        setOrderStatus(orderStatus);\n+        setOpenDate(openDate);\n+        setCompletionDate(completionDate);\n+        setQuantity(quantity);\n+        setPrice(price);\n+        setOrderFee(orderFee);\n+        setSymbol(symbol);\n+    }\n+    \n+    public OrderDataBean(String orderType,\n+            String orderStatus,\n+            Date openDate,\n+            Date completionDate,\n+            double quantity,\n+            BigDecimal price,\n+            BigDecimal orderFee,\n+            AccountDataBean account,\n+            QuoteDataBean quote, HoldingDataBean holding) {\n+        setOrderType(orderType);\n+        setOrderStatus(orderStatus);\n+        setOpenDate(openDate);\n+        setCompletionDate(completionDate);\n+        setQuantity(quantity);\n+        setPrice(price);\n+        setOrderFee(orderFee);\n+        setAccount(account);\n+        setQuote(quote);\n+        setHolding(holding);\n+    }\n+\n+    public static OrderDataBean getRandomInstance() {\n+        return new OrderDataBean(\n+            new Integer(TradeConfig.rndInt(100000)),\n+            TradeConfig.rndBoolean() ? \"buy\" : \"sell\",\n+            \"open\",\n+            new java.util.Date(TradeConfig.rndInt(Integer.MAX_VALUE)),\n+            new java.util.Date(TradeConfig.rndInt(Integer.MAX_VALUE)),\n+            TradeConfig.rndQuantity(),\n+            TradeConfig.rndBigDecimal(1000.0f),\n+            TradeConfig.rndBigDecimal(1000.0f),\n+            TradeConfig.rndSymbol()\n+        );\n+    }\n+\n+    public String toString()\n+    {\n+        return \"Order \" + getOrderID()\n+                + \"\\n\\t      orderType: \" + getOrderType()\n+                + \"\\n\\t    orderStatus: \" +\tgetOrderStatus()\n+                + \"\\n\\t       openDate: \" +\tgetOpenDate()\n+                + \"\\n\\t completionDate: \" +\tgetCompletionDate()\n+                + \"\\n\\t       quantity: \" +\tgetQuantity()\n+                + \"\\n\\t          price: \" +\tgetPrice()\n+                + \"\\n\\t       orderFee: \" +\tgetOrderFee()\n+                + \"\\n\\t         symbol: \" +\tgetSymbol()\n+                ;\n+    }\n+    public String toHTML()\n+    {\n+        return \"<BR>Order <B>\" + getOrderID() + \"</B>\"\n+                + \"<LI>      orderType: \" + getOrderType() + \"</LI>\"\n+                + \"<LI>    orderStatus: \" +\tgetOrderStatus() + \"</LI>\"\n+                + \"<LI>       openDate: \" +\tgetOpenDate() + \"</LI>\"\n+                + \"<LI> completionDate: \" +\tgetCompletionDate() + \"</LI>\"\n+                + \"<LI>       quantity: \" +\tgetQuantity() + \"</LI>\"\n+                + \"<LI>          price: \" +\tgetPrice() + \"</LI>\"\n+                + \"<LI>       orderFee: \" +\tgetOrderFee() + \"</LI>\"\n+                + \"<LI>         symbol: \" +\tgetSymbol() + \"</LI>\"\n+                ;\n+    }\n+\n+    public void print()\n+    {\n+        // Log.log( this.toString() );\n+    }\n+\n+    public Integer getOrderID() {\n+        return orderID;\n+    }\n+\n+    public void setOrderID(Integer orderID) {\n+        this.orderID = orderID;\n+    }\n+\n+    public String getOrderType() {\n+        return orderType;\n+    }\n+\n+    public void setOrderType(String orderType) {\n+        this.orderType = orderType;\n+    }\n+\n+    public String getOrderStatus() {\n+        return orderStatus;\n+    }\n+\n+    public void setOrderStatus(String orderStatus) {\n+        this.orderStatus = orderStatus;\n+    }\n+\n+    public Date getOpenDate() {\n+        return openDate;\n+    }\n+\n+    public void setOpenDate(Date openDate) {\n+        this.openDate = openDate;\n+    }\n+\n+    public Date getCompletionDate() {\n+        return completionDate;\n+    }\n+\n+    public void setCompletionDate(Date completionDate) {\n+        this.completionDate = completionDate;\n+    }\n+\n+    public double getQuantity() {\n+        return quantity;\n+    }\n+\n+    public void setQuantity(double quantity) {\n+        this.quantity = quantity;\n+    }\n+\n+\n+    public BigDecimal getPrice() {\n+        return price;\n+    }\n+\n+    public void setPrice(BigDecimal price) {\n+        this.price = price;\n+    }\n+\n+    public BigDecimal getOrderFee() {\n+        return orderFee;\n+    }\n+\n+    public void setOrderFee(BigDecimal orderFee) {\n+        this.orderFee = orderFee;\n+    }\n+\n+    public String getSymbol() {\n+        if (quote != null) {\n+            return quote.getSymbol();\n+        }\n+        return symbol;\n+    }\n+\n+    public void setSymbol(String symbol) {\n+        this.symbol = symbol;\n+    }\n+\n+    public AccountDataBean getAccount() {\n+        return account;\n+    }\n+\n+    public void setAccount(AccountDataBean account) {\n+        this.account = account;\n+    }\n+\n+    public QuoteDataBean getQuote() {\n+        return quote;\n+    }\n+\n+    public void setQuote(QuoteDataBean quote) {\n+        this.quote = quote;\n+    }\n+\n+    public HoldingDataBean getHolding() {\n+        return holding;\n+    }\n+\n+    public void setHolding(HoldingDataBean holding) {\n+        this.holding = holding;\n+    }\n+\n+    public boolean isBuy()\n+    {\n+    \tString orderType = getOrderType();\n+    \tif ( orderType.compareToIgnoreCase(\"buy\") == 0 )\n+    \t\treturn true;\n+    \treturn false;\n+    }\n+\n+    public boolean isSell()\n+    {\n+    \tString orderType = getOrderType();\n+    \tif ( orderType.compareToIgnoreCase(\"sell\") == 0 )\n+    \t\treturn true;\n+    \treturn false;\n+    }\n+\n+    public boolean isOpen()\n+    {\n+    \tString orderStatus = getOrderStatus();\n+    \tif ( (orderStatus.compareToIgnoreCase(\"open\") == 0) ||\n+\t         (orderStatus.compareToIgnoreCase(\"processing\") == 0) )\n+\t    \t\treturn true;\n+    \treturn false;\n+    }\n+\n+    public boolean isCompleted()\n+    {\n+    \tString orderStatus = getOrderStatus();\n+    \tif ( (orderStatus.compareToIgnoreCase(\"completed\") == 0) ||\n+\t         (orderStatus.compareToIgnoreCase(\"alertcompleted\") == 0)    ||\n+\t         (orderStatus.compareToIgnoreCase(\"cancelled\") == 0) )\n+\t    \t\treturn true;\n+    \treturn false;\n+    }\n+\n+    public boolean isCancelled()\n+    {\n+    \tString orderStatus = getOrderStatus();\n+    \tif (orderStatus.compareToIgnoreCase(\"cancelled\") == 0)\n+\t    \t\treturn true;\n+    \treturn false;\n+    }\n+\n+\n+\tpublic void cancel()\n+\t{\n+\t\tsetOrderStatus(\"cancelled\");\n+\t}\n+\n+    @Override\n+    public int hashCode() {\n+        int hash = 0;\n+        hash += (this.orderID != null ? this.orderID.hashCode() : 0);\n+        return hash;\n+    }\n+    \n+    @Override\n+    public boolean equals(Object object) {\n+        // TODO: Warning - this method won't work in the case the id fields are not set\n+        if (!(object instanceof OrderDataBean)) {\n+            return false;\n+        }\n+        OrderDataBean other = (OrderDataBean)object;\n+        if (this.orderID != other.orderID && (this.orderID == null || !this.orderID.equals(other.orderID))) return false;\n+        return true;\n+    }\n+}\n+"},{"sha":"6807f6fff81ebd57bccde70bf5f5ae27f8c11169","filename":"openjpa-integration/daytrader/src/test/java/org/apache/openjpa/integration/daytrader/QuoteDataBean.java","status":"added","additions":236,"deletions":0,"changes":236,"blob_url":"https://github.com/apache/openjpa/blob/b85c4e30fa0b03bc6c717e0370917662d9d64b5d/openjpa-integration/daytrader/src/test/java/org/apache/openjpa/integration/daytrader/QuoteDataBean.java","raw_url":"https://github.com/apache/openjpa/raw/b85c4e30fa0b03bc6c717e0370917662d9d64b5d/openjpa-integration/daytrader/src/test/java/org/apache/openjpa/integration/daytrader/QuoteDataBean.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/daytrader/src/test/java/org/apache/openjpa/integration/daytrader/QuoteDataBean.java?ref=b85c4e30fa0b03bc6c717e0370917662d9d64b5d","patch":"@@ -0,0 +1,236 @@\n+/**\n+ *  Licensed to the Apache Software Foundation (ASF) under one or more\n+ *  contributor license agreements.  See the NOTICE file distributed with\n+ *  this work for additional information regarding copyright ownership.\n+ *  The ASF licenses this file to You under the Apache License, Version 2.0\n+ *  (the \"License\"); you may not use this file except in compliance with\n+ *  the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.apache.openjpa.integration.daytrader;\n+\n+import java.io.Serializable;\n+import java.math.BigDecimal;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.NamedNativeQueries;\n+import javax.persistence.NamedNativeQuery;\n+import javax.persistence.NamedQueries;\n+import javax.persistence.NamedQuery;\n+import javax.persistence.Table;\n+\n+// import org.apache.geronimo.samples.daytrader.util.Log;\n+// import org.apache.geronimo.samples.daytrader.util.TradeConfig;\n+\n+@Entity(name = \"quoteejb\")\n+@Table(name = \"quoteejb\")\n+@NamedQueries({\n+    @NamedQuery(name = \"quoteejb.allQuotes\",query = \"SELECT q FROM quoteejb q\"),\n+//    @NamedQuery(name = \"quoteejb.quotesByChange\",query = \"SELECT q FROM quoteejb q WHERE q.symbol LIKE 's:1__' ORDER BY q.change1 DESC\"),\n+    @NamedQuery(name = \"quoteejb.quotesByChange\",query = \"SELECT q FROM quoteejb q WHERE q.symbol LIKE 's:1__' ORDER BY q.change1 \"),\n+    @NamedQuery(name = \"quoteejb.findByLow\", query = \"SELECT q FROM quoteejb q WHERE q.low = :low\"),\n+    @NamedQuery(name = \"quoteejb.findByOpen1\", query = \"SELECT q FROM quoteejb q WHERE q.open1 = :open1\"),\n+    @NamedQuery(name = \"quoteejb.findByVolume\", query = \"SELECT q FROM quoteejb q WHERE q.volume = :volume\"),\n+    @NamedQuery(name = \"quoteejb.findByPrice\", query = \"SELECT q FROM quoteejb q WHERE q.price = :price\"),\n+    @NamedQuery(name = \"quoteejb.findByHigh\", query = \"SELECT q FROM quoteejb q WHERE q.high = :high\"),\n+    @NamedQuery(name = \"quoteejb.findByCompanyname\", query = \"SELECT q FROM quoteejb q WHERE q.companyName = :companyname\"),\n+    @NamedQuery(name = \"quoteejb.findBySymbol\", query = \"SELECT q FROM quoteejb q WHERE q.symbol = :symbol\"),\n+    @NamedQuery(name = \"quoteejb.findByChange1\", query = \"SELECT q FROM quoteejb q WHERE q.change1 = :change1\")\n+})\n+@NamedNativeQueries({\n+    // @NamedNativeQuery(name=\"quoteejb.quoteForUpdate\", query=\"select * from quoteejb q where q.symbol=? for update\",resultClass=org.apache.geronimo.samples.daytrader.beans.QuoteDataBean.class)\n+    @NamedNativeQuery(name=\"quoteejb.quoteForUpdate\", query=\"select * from quoteejb q where q.symbol=? for update\",resultClass=org.apache.openjpa.integration.daytrader.QuoteDataBean.class)\n+})\n+public class QuoteDataBean implements Serializable {\n+\n+    private static final long serialVersionUID = 124109406376061341L;\n+\n+    /* Accessor methods for persistent fields */\n+\n+    @Id\n+    @Column(name = \"SYMBOL\", nullable = false)\n+    private String symbol;          /* symbol */\n+    \n+    @Column(name = \"COMPANYNAME\")\n+    private String companyName;     /* companyName */\n+    \n+    @Column(name = \"VOLUME\", nullable = false)\n+    private double volume;          /* volume */\n+    \n+    @Column(name = \"PRICE\")\n+    private BigDecimal price;       /* price */\n+    \n+    @Column(name = \"OPEN1\")\n+    private BigDecimal open1;       /* open1 price */\n+    \n+    @Column(name = \"LOW\")\n+    private BigDecimal low;         /* low price */\n+    \n+    @Column(name = \"HIGH\")\n+    private BigDecimal high;        /* high price */\n+    \n+    @Column(name = \"CHANGE1\", nullable = false)\n+    private double change1;         /* price change */\n+    \n+    /* @OneToMany(mappedBy = \"quote\")\n+    private Collection<OrderDataBean> orders;\n+    */\n+    \n+//    @Version\n+//    private Integer optLock;\n+\n+    /* Accessor methods for relationship fields are not kept in the DataBean */\n+    \n+    public QuoteDataBean() {\n+    }\n+\n+    public QuoteDataBean(String symbol, String companyName, double volume,\n+            BigDecimal price, BigDecimal open, BigDecimal low,\n+            BigDecimal high, double change) {\n+        setSymbol(symbol);\n+        setCompanyName(companyName);\n+        setVolume(volume);\n+        setPrice(price);\n+        setOpen(open);\n+        setLow(low);\n+        setHigh(high);\n+        setChange(change);\n+    }\n+\n+    public static QuoteDataBean getRandomInstance() {\n+        return new QuoteDataBean(\n+                TradeConfig.rndSymbol(),                 //symbol\n+                TradeConfig.rndSymbol() + \" Incorporated\",         //Company Name\n+                TradeConfig.rndFloat(100000),            //volume\n+                TradeConfig.rndBigDecimal(1000.0f),     //price\n+                TradeConfig.rndBigDecimal(1000.0f),     //open1\n+                TradeConfig.rndBigDecimal(1000.0f),     //low\n+                TradeConfig.rndBigDecimal(1000.0f),     //high\n+                TradeConfig.rndFloat(100000)            //volume\n+        );\n+    }\n+\n+    //Create a \"zero\" value quoteDataBean for the given symbol\n+    public QuoteDataBean(String symbol) {\n+        setSymbol(symbol);\n+    }\n+\n+    public String toString() {\n+        return \"\\n\\tQuote Data for: \" + getSymbol()\n+                + \"\\n\\t\\t companyName: \" + getCompanyName()\n+                + \"\\n\\t\\t      volume: \" + getVolume()\n+                + \"\\n\\t\\t       price: \" + getPrice()\n+                + \"\\n\\t\\t        open1: \" + getOpen()\n+                + \"\\n\\t\\t         low: \" + getLow()\n+                + \"\\n\\t\\t        high: \" + getHigh()\n+                + \"\\n\\t\\t      change1: \" + getChange()\n+                ;\n+    }\n+\n+    public String toHTML() {\n+        return \"<BR>Quote Data for: \" + getSymbol()\n+                + \"<LI> companyName: \" + getCompanyName() + \"</LI>\"\n+                + \"<LI>      volume: \" + getVolume() + \"</LI>\"\n+                + \"<LI>       price: \" + getPrice() + \"</LI>\"\n+                + \"<LI>        open1: \" + getOpen() + \"</LI>\"\n+                + \"<LI>         low: \" + getLow() + \"</LI>\"\n+                + \"<LI>        high: \" + getHigh() + \"</LI>\"\n+                + \"<LI>      change1: \" + getChange() + \"</LI>\"\n+                ;\n+    }\n+\n+    public void print() {\n+        // Log.log(this.toString());\n+    }\n+\n+    public String getSymbol() {\n+        return symbol;\n+    }\n+\n+    public void setSymbol(String symbol) {\n+        this.symbol = symbol;\n+    }\n+\n+    public String getCompanyName() {\n+        return companyName;\n+    }\n+\n+    public void setCompanyName(String companyName) {\n+        this.companyName = companyName;\n+    }\n+\n+    public BigDecimal getPrice() {\n+        return price;\n+    }\n+\n+    public void setPrice(BigDecimal price) {\n+        this.price = price;\n+    }\n+\n+    public BigDecimal getOpen() {\n+        return open1;\n+    }\n+\n+    public void setOpen(BigDecimal open) {\n+        this.open1 = open;\n+    }\n+\n+    public BigDecimal getLow() {\n+        return low;\n+    }\n+\n+    public void setLow(BigDecimal low) {\n+        this.low = low;\n+    }\n+\n+    public BigDecimal getHigh() {\n+        return high;\n+    }\n+\n+    public void setHigh(BigDecimal high) {\n+        this.high = high;\n+    }\n+\n+    public double getChange() {\n+        return change1;\n+    }\n+\n+    public void setChange(double change) {\n+        this.change1 = change;\n+    }\n+\n+    public double getVolume() {\n+        return volume;\n+    }\n+\n+    public void setVolume(double volume) {\n+        this.volume = volume;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        int hash = 0;\n+        hash += (this.symbol != null ? this.symbol.hashCode() : 0);\n+        return hash;\n+    }\n+    \n+    @Override\n+    public boolean equals(Object object) {\n+        // TODO: Warning - this method won't work in the case the id fields are not set\n+        if (!(object instanceof QuoteDataBean)) {\n+            return false;\n+        }\n+        QuoteDataBean other = (QuoteDataBean)object;\n+        if (this.symbol != other.symbol && (this.symbol == null || !this.symbol.equals(other.symbol))) return false;\n+        return true;\n+    }\n+}"},{"sha":"d7b047827a29b37dc9620f123ea3a08040030d01","filename":"openjpa-integration/daytrader/src/test/java/org/apache/openjpa/integration/daytrader/TestDaytrader.java","status":"added","additions":430,"deletions":0,"changes":430,"blob_url":"https://github.com/apache/openjpa/blob/b85c4e30fa0b03bc6c717e0370917662d9d64b5d/openjpa-integration/daytrader/src/test/java/org/apache/openjpa/integration/daytrader/TestDaytrader.java","raw_url":"https://github.com/apache/openjpa/raw/b85c4e30fa0b03bc6c717e0370917662d9d64b5d/openjpa-integration/daytrader/src/test/java/org/apache/openjpa/integration/daytrader/TestDaytrader.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/daytrader/src/test/java/org/apache/openjpa/integration/daytrader/TestDaytrader.java?ref=b85c4e30fa0b03bc6c717e0370917662d9d64b5d","patch":"@@ -0,0 +1,430 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.integration.daytrader;\n+\n+import java.math.BigDecimal;\n+import java.sql.Timestamp;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.Query;\n+\n+// import org.apache.geronimo.samples.daytrader.beans.AccountDataBean;\n+// import org.apache.geronimo.samples.daytrader.beans.AccountProfileDataBean;\n+// import org.apache.geronimo.samples.daytrader.beans.HoldingDataBean;\n+// import org.apache.geronimo.samples.daytrader.beans.OrderDataBean;\n+// import org.apache.geronimo.samples.daytrader.beans.QuoteDataBean;\n+// import org.apache.geronimo.samples.daytrader.core.FinancialUtils;\n+// import org.apache.geronimo.samples.daytrader.util.TradeConfig;\n+// import org.apache.geronimo.samples.daytrader.web.TradeBuildDB;\n+\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+/**\n+ * Uses Daytrader to stress test OpenJPA.\n+ *\n+ * @version $Rev$ $Date$\n+ */\n+public class TestDaytrader extends SingleEMFTestCase {\n+\n+    OpenJPAEntityManagerFactorySPI emf = null;\n+    //private TradeJPADirect trade = null;\n+    \n+    @Override\n+    public void setUp() {\n+        super.setUp(DROP_TABLES, AccountDataBean.class,\n+            AccountProfileDataBean.class, HoldingDataBean.class,\n+            OrderDataBean.class, QuoteDataBean.class);\n+        if (emf == null) {\n+            emf = (OpenJPAEntityManagerFactorySPI)OpenJPAPersistence.createEntityManagerFactory(\n+                \"daytrader\", \"persistence.xml\");\n+            assertNotNull(emf);\n+        }\n+        //trade = new TradeJPADirect((EntityManagerFactory)emf);\n+    }\n+    \n+    /**\n+     * Scenario being tested:\n+     * @throws Exception \n+     *   \n+     */\n+    public void newtestTradeBuildDB() throws Exception {\n+        getLog().info(\"testTradeBuildDB() started\");\n+        assertNotNull(emf);\n+        TradeBuildDB tradeDB = new TradeBuildDB(getLog(), emf);\n+        getLog().info(\"testTradeBuildDB() completed\");\n+    }\n+\n+    public void testTradeBuildDB() {\n+        getLog().info(\"testTradeBuildDB() started\");\n+        getLog().info(\"testTradeBuildDB() createQuotes(\" + TradeConfig.getMAX_QUOTES() + \")\");\n+        createQuotes(TradeConfig.getMAX_QUOTES());\n+        getLog().info(\"testTradeBuildDB() createAccounts(\" + TradeConfig.getMAX_USERS() + \")\");\n+        createAccounts(TradeConfig.getMAX_USERS()); // with 10 holdings each\n+        getLog().info(\"testTradeBuildDB() completed\");\n+    }\n+\n+    // from TradeBuildDB.TradeBuildDB()\n+    private void createQuotes(int num) {\n+        int errorCount = 0;\n+        String symbol, companyName;\n+        TradeConfig.setMAX_QUOTES(num);\n+        for (int i = 0; i < num; i++) {\n+            symbol = \"s:\" + i;\n+            companyName = \"S\" + i + \" Incorporated\";\n+            try {\n+                QuoteDataBean quoteData = createQuote(symbol, companyName,\n+                    new java.math.BigDecimal(TradeConfig.rndPrice()));\n+            } catch (Exception e) {\n+                if (errorCount++ >= 10) {\n+                    getLog().error(\"createQuotes - aborting after 10 create quote errors\", e);\n+                    throw new RuntimeException(e);\n+                }\n+            }\n+        }\n+\n+    }\n+    \n+    // from TradeJPADirect.createQuote()\n+    private QuoteDataBean createQuote(String symbol, String companyName, BigDecimal price) {\n+        EntityManager entityManager = emf.createEntityManager();\n+        QuoteDataBean quote = new QuoteDataBean(symbol, companyName, 0, price, price, price, price, 0);\n+        try {\n+            entityManager.getTransaction().begin();\n+            entityManager.persist(quote);\n+            entityManager.getTransaction().commit();\n+        }\n+        catch (Exception e) {\n+            getLog().error(\"createQuote - rollback - exception creating Quote\", e);\n+            entityManager.getTransaction().rollback();\n+            throw new RuntimeException(e);\n+        } finally {\n+            entityManager.close();\n+        }\n+        if (getLog().isTraceEnabled())\n+            getLog().trace(\"createQuote-->\" + quote);\n+        return quote;\n+    }\n+\n+    // from TradeBuildDB.TradeBuildDB()\n+    private void createAccounts(int num) {\n+        TradeConfig.setMAX_USERS(num);\n+        for (int i = 0; i < num; i++) {\n+            String userID = \"uid:\" + i;\n+            String fullname = TradeConfig.rndFullName();\n+            String email = TradeConfig.rndEmail(userID);\n+            String address = TradeConfig.rndAddress();\n+            String creditcard = TradeConfig.rndCreditCard();\n+            double initialBalance = (double) (TradeConfig.rndInt(100000)) + 200000;\n+            if (i == 0) {\n+                initialBalance = 1000000; // uid:0 starts with a cool million.\n+            }\n+            \n+            AccountDataBean accountData = register(userID, \"xxx\", fullname, address,\n+                email, creditcard, new BigDecimal(initialBalance));\n+\n+            String results, symbol;\n+            if (accountData != null) {\n+                // 0-MAX_HOLDING (inclusive), avg holdings per user = (MAX-0)/2\n+                // int holdings = TradeConfig.rndInt(TradeConfig.getMAX_HOLDINGS() + 1);\n+                int holdings = TradeConfig.getMAX_HOLDINGS();\n+                double quantity = 0;\n+                OrderDataBean orderData;\n+                for (int j = 0; j < holdings; j++) {\n+                    symbol = TradeConfig.rndSymbol();\n+                    quantity = TradeConfig.rndQuantity();\n+                    orderData = buy(userID, symbol, quantity, TradeConfig.orderProcessingMode);\n+                }\n+                if (getLog().isTraceEnabled())\n+                    getLog().trace(\"createAccounts - created \" + holdings + \" for userID=\" + userID);\n+            } else {\n+                throw new RuntimeException(\"createAccounts - userID=\" + userID + \" already registered.\");\n+            }\n+        }\n+    }\n+    \n+    // from TradeJPADirect.register()\n+    private AccountDataBean register(String userID, String password, String fullname, \n+        String address, String email, String creditcard, BigDecimal openBalance) {\n+        AccountDataBean account = null;\n+        AccountProfileDataBean profile = null;\n+        EntityManager entityManager = emf.createEntityManager();\n+\n+        // assume that profile with the desired userID doeesn't already exist\n+        profile = new AccountProfileDataBean(userID, password, fullname, address, email, creditcard);\n+        account = new AccountDataBean(0, 0, null, new Timestamp(System.currentTimeMillis()), openBalance, openBalance, userID);\n+        profile.setAccount(account);\n+        account.setProfile(profile);\n+        try {\n+            entityManager.getTransaction().begin();\n+            entityManager.persist(profile);\n+            entityManager.persist(account);\n+            entityManager.getTransaction().commit();\n+        } catch (Exception e) {\n+            getLog().error(\"createQuote - rollback - exception creating Quote\", e);\n+            entityManager.getTransaction().rollback();\n+            throw new RuntimeException(e);\n+        } finally {\n+            entityManager.close();\n+        }\n+        if (getLog().isTraceEnabled())\n+            getLog().trace(\"register-->\" + account);\n+        return account;\n+    }\n+\n+    private OrderDataBean buy(String userID, String symbol, double quantity, int orderProcessingMode) {\n+        OrderDataBean order = null;\n+        BigDecimal total;\n+        EntityManager entityManager = emf.createEntityManager();\n+        assertNotNull(entityManager);\n+\n+        try {\n+            if (getLog().isTraceEnabled())\n+                getLog().trace(\"buy-->userID=\" + userID);\n+\n+            entityManager.getTransaction().begin();\n+\n+            AccountProfileDataBean profile = entityManager.find(AccountProfileDataBean.class, userID);\n+            assertNotNull(profile);\n+            AccountDataBean account = profile.getAccount();\n+            assertNotNull(account);\n+\n+            QuoteDataBean quote = entityManager.find(QuoteDataBean.class, symbol);\n+            assertNotNull(quote);\n+\n+            HoldingDataBean holding = null; // The holding will be created by this buy order\n+\n+            order = createOrder(account, quote, holding, \"buy\", quantity, entityManager);\n+            assertNotNull(order);\n+\n+            // order = createOrder(account, quote, holding, \"buy\", quantity);\n+            // UPDATE - account should be credited during completeOrder\n+\n+            BigDecimal price = quote.getPrice();\n+            BigDecimal orderFee = order.getOrderFee();\n+            BigDecimal balance = account.getBalance();\n+            total = (new BigDecimal(quantity).multiply(price)).add(orderFee);\n+            account.setBalance(balance.subtract(total));\n+\n+            // commit the transaction before calling completeOrder\n+            entityManager.getTransaction().commit();\n+\n+            // if (orderProcessingMode == TradeConfig.SYNCH)\n+            completeOrder(order.getOrderID(), false);\n+        } catch (Exception e) {\n+            getLog().error(\"buy(\" + userID + \",\" + symbol + \",\" + quantity + \") --> failed\", e);\n+            // On exception - cancel the order\n+            // TODO figure out how to do this with JPA\n+            if (order != null)\n+                order.cancel();\n+\n+            entityManager.getTransaction().rollback();\n+            entityManager.close();\n+            entityManager = null;\n+\n+            // throw new EJBException(e);\n+            throw new RuntimeException(e);\n+        }\n+        if (entityManager != null) {\n+            entityManager.close();\n+            entityManager = null;\n+        }\n+\n+        // after the purchase or sell of a stock, update the stocks volume and price\n+        updateQuotePriceVolume(symbol, TradeConfig.getRandomPriceChangeFactor(), quantity);\n+\n+        return order;\n+    }\n+\n+    private OrderDataBean createOrder(AccountDataBean account,\n+            QuoteDataBean quote, HoldingDataBean holding, String orderType,\n+            double quantity, EntityManager entityManager) {\n+        OrderDataBean order;\n+        if (getLog().isTraceEnabled())\n+            getLog().trace(\"createOrder(orderID=\" + \" account=\"\n+                + ((account == null) ? null : account.getAccountID())\n+                + \" quote=\" + ((quote == null) ? null : quote.getSymbol())\n+                + \" orderType=\" + orderType + \" quantity=\" + quantity);\n+        try {\n+            order = new OrderDataBean(orderType, \n+                \"open\", \n+                new Timestamp(System.currentTimeMillis()), \n+                null, \n+                quantity, \n+                // quote.getPrice().setScale(FinancialUtils.SCALE, FinancialUtils.ROUND),\n+                quote.getPrice().setScale(2, BigDecimal.ROUND_HALF_UP),\n+                TradeConfig.getOrderFee(orderType), \n+                account, \n+                quote, \n+                holding);\n+            entityManager.persist(order);\n+        } catch (Exception e) {\n+            getLog().error(\"createOrder - failed to create Order\", e);\n+            throw new RuntimeException(\"createOrder - failed to create Order\", e);\n+        }\n+        return order;\n+    }\n+\n+    private OrderDataBean completeOrder(Integer orderID, boolean twoPhase) throws Exception {\n+        EntityManager entityManager = emf.createEntityManager();\n+        OrderDataBean order = null;\n+\n+        if (getLog().isTraceEnabled())\n+            getLog().trace(\"completeOrder - orderID=\" + orderID + \" twoPhase=\" + twoPhase);\n+\n+        order = entityManager.find(OrderDataBean.class, orderID);\n+        assertNotNull(order);\n+        order.getQuote();\n+        if (order == null) {\n+            getLog().error(\"completeOrder - Unable to find Order \" + orderID + \" FBPK returned \" + order);\n+            return null;\n+        }\n+        if (order.isCompleted()) {\n+            throw new RuntimeException(\"completeOrder - attempt to complete Order that is already completed\\n\" + order);\n+        }\n+        AccountDataBean account = order.getAccount();\n+        assertNotNull(account);\n+        QuoteDataBean quote = order.getQuote();\n+        assertNotNull(quote);\n+        HoldingDataBean holding = order.getHolding();\n+        BigDecimal price = order.getPrice();\n+        double quantity = order.getQuantity();\n+\n+        String userID = account.getProfile().getUserID();\n+        assertNotNull(userID);\n+\n+        if (getLog().isTraceEnabled())\n+            getLog().trace(\"completeOrder--> Completing Order \"\n+                      + order.getOrderID() + \"\\n\\t Order info: \" + order\n+                      + \"\\n\\t Account info: \" + account + \"\\n\\t Quote info: \"\n+                      + quote + \"\\n\\t Holding info: \" + holding);\n+\n+        HoldingDataBean newHolding = null;\n+        if (order.isBuy()) {\n+            newHolding = createHolding(account, quote, quantity, price, entityManager);\n+            assertNotNull(newHolding);\n+        }\n+        try {\n+            entityManager.getTransaction().begin();\n+            if (newHolding != null) {\n+                order.setHolding(newHolding);\n+            }\n+            if (order.isSell()) {\n+                if (holding == null) {\n+                    getLog().error(\"completeOrder - error \" + order.getOrderID() + \" holding already sold\");\n+                    order.cancel();\n+                    entityManager.getTransaction().commit();\n+                    return order;\n+                }\n+                else {\n+                    entityManager.remove(holding);\n+                    order.setHolding(null);\n+                }\n+            }\n+            order.setOrderStatus(\"closed\");\n+            order.setCompletionDate(new java.sql.Timestamp(System.currentTimeMillis()));\n+            if (getLog().isTraceEnabled())\n+                getLog().trace(\"completeOrder--> Completed Order \"\n+                          + order.getOrderID() + \"\\n\\t Order info: \" + order\n+                          + \"\\n\\t Account info: \" + account + \"\\n\\t Quote info: \"\n+                          + quote + \"\\n\\t Holding info: \" + holding);\n+            entityManager.getTransaction().commit();\n+        }\n+        catch (Exception e) {\n+            getLog().error(e);\n+            entityManager.getTransaction().rollback();\n+            entityManager.close();\n+            entityManager = null;\n+        }\n+        if (entityManager != null) {\n+            entityManager.close();\n+            entityManager = null;\n+        }\n+        return order;\n+    }\n+\n+    private HoldingDataBean createHolding(AccountDataBean account,\n+            QuoteDataBean quote, double quantity, BigDecimal purchasePrice,\n+            EntityManager entityManager) throws Exception {\n+\n+        HoldingDataBean newHolding = new HoldingDataBean(quantity,\n+            purchasePrice, new Timestamp(System.currentTimeMillis()),\n+            account, quote);\n+        assertNotNull(newHolding);\n+        try {\n+            entityManager.getTransaction().begin();\n+            entityManager.persist(newHolding);\n+            entityManager.getTransaction().commit();\n+        } catch (Exception e) {\n+            entityManager.getTransaction().rollback();\n+        }\n+        return newHolding;\n+    }\n+\n+    public QuoteDataBean updateQuotePriceVolume(String symbol, BigDecimal changeFactor, double sharesTraded) {\n+        if (!TradeConfig.getUpdateQuotePrices())\n+            return new QuoteDataBean();\n+        if (getLog().isTraceEnabled())\n+            getLog().trace(\"updateQuote - symbol=\" + symbol + \" changeFactor=\" + changeFactor);\n+\n+        EntityManager entityManager = emf.createEntityManager();\n+        QuoteDataBean quote = null;\n+        if (TradeConfig.jpaLayer == TradeConfig.HIBERNATE) {\n+            quote = entityManager.find(QuoteDataBean.class, symbol);\n+        } else if (TradeConfig.jpaLayer == TradeConfig.OPENJPA) {\n+            Query q = entityManager.createNamedQuery(\"quoteejb.quoteForUpdate\");\n+            q.setParameter(1, symbol);\n+            quote = (QuoteDataBean) q.getSingleResult();\n+        }\n+        BigDecimal oldPrice = quote.getPrice();\n+        if (quote.getPrice().equals(TradeConfig.PENNY_STOCK_PRICE)) {\n+            changeFactor = TradeConfig.PENNY_STOCK_RECOVERY_MIRACLE_MULTIPLIER;\n+        }\n+        BigDecimal newPrice = changeFactor.multiply(oldPrice).setScale(2, BigDecimal.ROUND_HALF_UP);\n+\n+        try {\n+            quote.setPrice(newPrice);\n+            quote.setVolume(quote.getVolume() + sharesTraded);\n+            quote.setChange((newPrice.subtract(quote.getOpen()).doubleValue()));\n+\n+            entityManager.getTransaction().begin();\n+            entityManager.merge(quote);\n+            entityManager.getTransaction().commit();\n+        } catch (Exception e) {\n+            entityManager.getTransaction().rollback();\n+        } finally {\n+            if (entityManager != null) {\n+                entityManager.close();\n+                entityManager = null;\n+            }\n+        }\n+        this.publishQuotePriceChange(quote, oldPrice, changeFactor, sharesTraded);\n+        return quote;\n+    }\n+    \n+    private void publishQuotePriceChange(QuoteDataBean quote, BigDecimal oldPrice, \n+            BigDecimal changeFactor, double sharesTraded) {\n+        if (!TradeConfig.getPublishQuotePriceChange())\n+            return;\n+        getLog().error(\"publishQuotePriceChange - is not implemented for this runtime mode\");\n+        throw new UnsupportedOperationException(\"publishQuotePriceChange - is not implemented for this runtime mode\");\n+    }\n+\n+}"},{"sha":"2bf3fff90537f4812ec22226d7974bfc71857f32","filename":"openjpa-integration/daytrader/src/test/java/org/apache/openjpa/integration/daytrader/TradeBuildDB.java","status":"added","additions":131,"deletions":0,"changes":131,"blob_url":"https://github.com/apache/openjpa/blob/b85c4e30fa0b03bc6c717e0370917662d9d64b5d/openjpa-integration/daytrader/src/test/java/org/apache/openjpa/integration/daytrader/TradeBuildDB.java","raw_url":"https://github.com/apache/openjpa/raw/b85c4e30fa0b03bc6c717e0370917662d9d64b5d/openjpa-integration/daytrader/src/test/java/org/apache/openjpa/integration/daytrader/TradeBuildDB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/daytrader/src/test/java/org/apache/openjpa/integration/daytrader/TradeBuildDB.java?ref=b85c4e30fa0b03bc6c717e0370917662d9d64b5d","patch":"@@ -0,0 +1,131 @@\n+/**\n+ *  Licensed to the Apache Software Foundation (ASF) under one or more\n+ *  contributor license agreements.  See the NOTICE file distributed with\n+ *  this work for additional information regarding copyright ownership.\n+ *  The ASF licenses this file to You under the Apache License, Version 2.0\n+ *  (the \"License\"); you may not use this file except in compliance with\n+ *  the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.apache.openjpa.integration.daytrader;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+\n+import javax.persistence.EntityManagerFactory;\n+\n+import org.apache.openjpa.lib.log.Log;\n+\n+// import org.apache.geronimo.samples.daytrader.core.*;\n+// import org.apache.geronimo.samples.daytrader.core.direct.*;\n+// import org.apache.geronimo.samples.daytrader.beans.*;\n+// import org.apache.geronimo.samples.daytrader.util.*;\n+\n+/**\n+ * TradeBuildDB uses operations provided by the TradeApplication to \n+ *   (a) create the Database tables \n+ *   (b) populate a DayTrader database without creating the tables. \n+ * Specifically, a new DayTrader User population is created using\n+ * UserIDs of the form \"uid:xxx\" where xxx is a sequential number \n+ * (e.g. uid:0, uid:1, etc.). New stocks are also created of the form \"s:xxx\",\n+ * again where xxx represents sequential numbers (e.g. s:1, s:2, etc.)\n+ */\n+public class TradeBuildDB {\n+\n+    private TradeConfig tCfg = new TradeConfig();\n+    private TradeJPADirect trade = null;\n+    private Log log = null;\n+\n+    /**\n+     * Re-create the DayTrader db tables and populate them OR just populate a \n+     * DayTrader DB, logging to the provided output stream\n+     */\n+    public TradeBuildDB(Log log, EntityManagerFactory emf) throws Exception {\n+        this.log = log;\n+        // update config\n+        tCfg.setRunTimeMode(TradeConfig.JPA);\n+        tCfg.setLog(log);\n+        \n+        // always use TradeJPADirect mode\n+        trade = new TradeJPADirect(log, emf);\n+\n+        // removed - createDBTables\n+\n+        // removed - Attempt to delete all of the Trade users and Trade Quotes first\n+        \n+        // create MAX_QUOTES\n+        createQuotes();\n+\n+        // create MAX_USERS\n+        createAccounts();\n+    }\n+\n+    private void createQuotes() {\n+        int errorCount = 0;\n+        String symbol, companyName;\n+        log.info(\"TradeBuildDB.createQuotes(\" + TradeConfig.getMAX_QUOTES() + \")\");\n+        for (int i = 0; i < TradeConfig.getMAX_QUOTES(); i++) {\n+            symbol = \"s:\" + i;\n+            companyName = \"S\" + i + \" Incorporated\";\n+            try {\n+                QuoteDataBean quoteData = trade.createQuote(symbol, companyName,\n+                    new java.math.BigDecimal(TradeConfig.rndPrice()));\n+            } catch (Exception e) {\n+                if (errorCount++ >= 10) {\n+                    log.error(\"createQuotes - aborting after 10 create quote errors\", e);\n+                    throw new RuntimeException(e);\n+                }\n+            }\n+        }\n+\n+    }\n+    \n+    private void createAccounts() {\n+        log.info(\"TradeBuildDB.createAccounts(\" + TradeConfig.getMAX_USERS() + \")\");\n+        for (int i = 0; i < TradeConfig.getMAX_USERS(); i++) {\n+            String userID = \"uid:\" + i;\n+            String fullname = TradeConfig.rndFullName();\n+            String email = TradeConfig.rndEmail(userID);\n+            String address = TradeConfig.rndAddress();\n+            String creditcard = TradeConfig.rndCreditCard();\n+            double initialBalance = (double) (TradeConfig.rndInt(100000)) + 200000;\n+            if (i == 0) {\n+                initialBalance = 1000000; // uid:0 starts with a cool million.\n+            }\n+            \n+            AccountDataBean accountData = trade.register(userID, \"xxx\", fullname, address,\n+                email, creditcard, new BigDecimal(initialBalance));\n+\n+            String symbol;\n+            if (accountData != null) {\n+                // 0-MAX_HOLDING (inclusive), avg holdings per user = (MAX-0)/2\n+                // int holdings = TradeConfig.rndInt(TradeConfig.getMAX_HOLDINGS() + 1);\n+                int holdings = TradeConfig.getMAX_HOLDINGS();\n+                double quantity = 0;\n+                OrderDataBean orderData = null;\n+                for (int j = 0; j < holdings; j++) {\n+                    symbol = TradeConfig.rndSymbol();\n+                    quantity = TradeConfig.rndQuantity();\n+                    orderData = trade.buy(userID, symbol, quantity, TradeConfig.orderProcessingMode);\n+                }\n+                if (log.isTraceEnabled()) {\n+                    log.trace(\"createAccounts - created \" + holdings + \" for userID=\" + userID + \" order=\" + orderData);\n+                }\n+            } else {\n+                throw new RuntimeException(\"createAccounts - userID=\" + userID + \" already registered.\");\n+            }\n+        }\n+    }\n+\n+}"},{"sha":"99654e66fd5cc43d7af13c10b70502772695e1ec","filename":"openjpa-integration/daytrader/src/test/java/org/apache/openjpa/integration/daytrader/TradeConfig.java","status":"added","additions":914,"deletions":0,"changes":914,"blob_url":"https://github.com/apache/openjpa/blob/b85c4e30fa0b03bc6c717e0370917662d9d64b5d/openjpa-integration/daytrader/src/test/java/org/apache/openjpa/integration/daytrader/TradeConfig.java","raw_url":"https://github.com/apache/openjpa/raw/b85c4e30fa0b03bc6c717e0370917662d9d64b5d/openjpa-integration/daytrader/src/test/java/org/apache/openjpa/integration/daytrader/TradeConfig.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/daytrader/src/test/java/org/apache/openjpa/integration/daytrader/TradeConfig.java?ref=b85c4e30fa0b03bc6c717e0370917662d9d64b5d","patch":"@@ -0,0 +1,914 @@\n+/**\n+ *  Licensed to the Apache Software Foundation (ASF) under one or more\n+ *  contributor license agreements.  See the NOTICE file distributed with\n+ *  this work for additional information regarding copyright ownership.\n+ *  The ASF licenses this file to You under the Apache License, Version 2.0\n+ *  (the \"License\"); you may not use this file except in compliance with\n+ *  the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.apache.openjpa.integration.daytrader;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Random;\n+\n+import org.apache.openjpa.lib.log.Log;\n+\n+\n+/**\n+ * TradeConfig is a JavaBean holding all configuration and runtime parameters for the Trade application\n+ * TradeConfig sets runtime parameters such as the RunTimeMode (EJB3, DIRECT, SESSION3, JDBC, JPA)\n+ *\n+ */\n+\n+public class TradeConfig {\n+\n+    // added by OpenJPA\n+    public static Log log = null;\n+    \n+    /* Trade Runtime Configuration Parameters */\n+    public static final int UNKNOWN = -1;\n+\n+    /* Trade Runtime Mode parameters */\n+    public static String[] runTimeModeNames = {\"Full EJB3\", \"Direct (JDBC)\", \"Session (EJB3) To Direct\", \"Web JDBC\", \"Web JPA\"};\n+    public static final int EJB3 = 0;\n+    public static final int DIRECT = 1;\n+    public static final int SESSION3 = 2;\n+    public static final int JDBC = 3;\n+    public static final int JPA = 4;\n+    public static int runTimeMode = JPA;\n+\t\n+    /* Trade JPA Layer parameters */\n+\tpublic static String[] jpaLayerNames = {\"OpenJPA\", \"Hibernate\"};\n+\tpublic static final int OPENJPA = 0;\n+\tpublic static final int HIBERNATE = 1;\n+\tpublic static int jpaLayer = OPENJPA;\n+\n+\tpublic static String[] orderProcessingModeNames =\n+\t\t{ \"Synchronous\", \"Asynchronous_2-Phase\" };\n+\tpublic static final int SYNCH = 0;\n+\tpublic static final int ASYNCH_2PHASE = 1;\n+\tpublic static int orderProcessingMode = SYNCH;\n+\n+\tpublic static String[] accessModeNames = { \"Standard\", \"WebServices\" };\n+\tpublic static final int STANDARD = 0;\n+\tpublic static final int WEBSERVICES = 1;\n+\tprivate static int accessMode = STANDARD;\n+\n+\t/* Trade Scenario Workload parameters */\n+\tpublic static String[] workloadMixNames = { \"Standard\", \"High-Volume\", };\n+\tpublic final static int SCENARIOMIX_STANDARD = 0;\n+\tpublic final static int SCENARIOMIX_HIGHVOLUME = 1;\n+\tpublic static int workloadMix = SCENARIOMIX_STANDARD;\n+\n+\t/* Trade Web Interface parameters */\n+\tpublic static String[] webInterfaceNames = { \"JSP\", \"JSP-Images\" };\n+\tpublic static final int JSP = 0;\n+\tpublic static final int JSP_Images = 1;\n+\tpublic static int webInterface = JSP;\n+\n+\t/* Trade Caching Type parameters */\n+\tpublic static String[] cachingTypeNames = { \"DistributedMap\", \"Command Caching\", \"No Caching\" };\n+\tpublic static final int DISTRIBUTEDMAP = 0;\n+\tpublic static final int COMMAND_CACHING = 1;\n+\tpublic static final int NO_CACHING = 2;\n+\tpublic static int cachingType = NO_CACHING;\n+\t\n+\t/* Trade Database Scaling parameters*/\n+\tprivate static int MAX_USERS = 500;\n+\tprivate static int MAX_QUOTES = 1000;\n+\n+\t/* Trade Database specific paramters */\n+\tpublic static String JDBC_UID = null;\n+\tpublic static String JDBC_PWD = null;\n+\tpublic static String DS_NAME = \"java:comp/env/jdbc/TradeDataSource\";\n+\n+\t/*Trade SOAP specific parameters */\n+\tprivate static String SoapURL =\n+\t\t\"http://localhost:8080/daytrader/services/TradeWSServices\";\n+\n+\t/*Trade XA Datasource specific parameters */\n+\tpublic static boolean JDBCDriverNeedsGlobalTransaction = false;\n+\n+\t/* Trade Config Miscellaneous itmes */\n+\tpublic static String DATASOURCE = \"java:comp/env/jdbc/TradeDataSource\";\n+\tpublic static int KEYBLOCKSIZE = 1000;\n+\tpublic static int QUOTES_PER_PAGE = 10;\n+\tpublic static boolean RND_USER = true;\n+\t//public static int\t\tRND_SEED = 0;\n+\tprivate static int MAX_HOLDINGS = 10;\n+\tprivate static int count = 0;\n+\tprivate static Object userID_count_semaphore = new Object();\n+\tprivate static int userID_count = 0;\n+\tprivate static String hostName = null;\n+\tprivate static Random r0 = new Random(System.currentTimeMillis());\n+\t//private static Random r1 = new Random(RND_SEED);\n+\tprivate static Random randomNumberGenerator = r0;\n+\tpublic static final String newUserPrefix = \"ru:\";\n+\tpublic static final int verifyPercent = 5;\n+\tprivate static boolean trace = false;\n+\tprivate static boolean actionTrace = false;\n+\tprivate static boolean updateQuotePrices = true;\n+\tprivate static int primIterations = 1;\n+\tprivate static boolean longRun = true;\n+\tprivate static boolean publishQuotePriceChange = false;\n+\t\n+\t/**\n+\t *   -1 means every operation\n+\t *    0 means never perform a market summary\n+\t *  > 0 means number of seconds between summaries.  These will be\n+\t *      synchronized so only one transaction in this period will create a summary and \n+\t *      will cache its results.\n+\t */\n+\tprivate static int  marketSummaryInterval = 20;\n+\n+\t/*\n+\t * Penny stocks is a problem where the random price change factor gets a stock\n+\t * down to $.01.  In this case trade jumpstarts the price back to $6.00 to\n+\t * keep the math interesting.\n+\t */\n+\tpublic static BigDecimal PENNY_STOCK_PRICE;\n+\tpublic static BigDecimal PENNY_STOCK_RECOVERY_MIRACLE_MULTIPLIER;\n+\tstatic {\n+\t\tPENNY_STOCK_PRICE = new BigDecimal(0.01);\n+\t\tPENNY_STOCK_PRICE =\n+\t\t\tPENNY_STOCK_PRICE.setScale(2, BigDecimal.ROUND_HALF_UP);\n+\t\tPENNY_STOCK_RECOVERY_MIRACLE_MULTIPLIER = new BigDecimal(600.0);\n+\t\tPENNY_STOCK_RECOVERY_MIRACLE_MULTIPLIER.setScale(\n+\t\t\t2,\n+\t\t\tBigDecimal.ROUND_HALF_UP);\n+\t}\n+\n+\t/* CJB (DAYTRADER-25) - Also need to impose a ceiling on the quote price to ensure\n+\t * prevent account and holding balances from exceeding the databases decimal precision.\n+\t * At some point, this maximum value can be used to trigger a stock split.\n+\t */\n+\n+\tpublic static BigDecimal MAXIMUM_STOCK_PRICE;\n+\tpublic static BigDecimal MAXIMUM_STOCK_SPLIT_MULTIPLIER;\n+\tstatic {\n+\t\tMAXIMUM_STOCK_PRICE = new BigDecimal(400);\n+\t\tMAXIMUM_STOCK_PRICE.setScale(2, BigDecimal.ROUND_HALF_UP);\n+\t\tMAXIMUM_STOCK_SPLIT_MULTIPLIER = new BigDecimal(0.5);\n+\t\tMAXIMUM_STOCK_SPLIT_MULTIPLIER.setScale(2, BigDecimal.ROUND_HALF_UP);\n+\t}\n+\n+\t/* Trade Scenario actions mixes. Each of the array rows represents a specific Trade Scenario Mix. \n+\t   The columns give the percentages for each action in the column header. Note: \"login\" is always 0. \n+\t   logout represents both login and logout (because each logout operation will cause a new login when\n+\t   the user context attempts the next action.\n+\t */\n+\t/* Trade Scenario Workload parameters */\n+\tpublic final static int HOME_OP = 0;\n+\tpublic final static int QUOTE_OP = 1;\n+\tpublic final static int LOGIN_OP = 2;\n+\tpublic final static int LOGOUT_OP = 3;\n+\tpublic final static int REGISTER_OP = 4;\n+\tpublic final static int ACCOUNT_OP = 5;\n+\tpublic final static int PORTFOLIO_OP = 6;\n+\tpublic final static int BUY_OP = 7;\n+\tpublic final static int SELL_OP = 8;\n+\tpublic final static int UPDATEACCOUNT_OP = 9;\n+\n+\tprivate static int scenarioMixes[][] = {\n+\t\t//\th\tq\tl\to\tr\ta\tp\tb\ts\tu\n+\t\t{ 20, 40, 0, 4, 2, 10, 12, 4, 4, 4 }, //STANDARD\n+\t\t{\n+\t\t\t20, 40, 0, 4, 2, 7, 7, 7, 7, 6 }, //High Volume\n+\t};\n+\tprivate static char actions[] =\n+\t\t{ 'h', 'q', 'l', 'o', 'r', 'a', 'p', 'b', 's', 'u' };\n+\tprivate static int sellDeficit = 0;\n+\t//Tracks the number of buys over sell when a users portfolio is empty\n+\t// Used to maintain the correct ratio of buys/sells\n+\n+\t/* JSP pages for all Trade Actions */\n+\n+\tpublic final static int WELCOME_PAGE = 0;\n+\tpublic final static int REGISTER_PAGE = 1;\n+\tpublic final static int PORTFOLIO_PAGE = 2;\n+\tpublic final static int QUOTE_PAGE = 3;\n+\tpublic final static int HOME_PAGE = 4;\n+\tpublic final static int ACCOUNT_PAGE = 5;\n+\tpublic final static int ORDER_PAGE = 6;\n+\tpublic final static int CONFIG_PAGE = 7;\n+\tpublic final static int STATS_PAGE = 8;\n+\n+\t//FUTURE Add XML/XSL View\n+\tpublic static String webUI[][] =\n+\t\t{\n+\t\t\t{\n+\t\t\t\t\"/welcome.jsp\",\n+\t\t\t\t\"/register.jsp\",\n+\t\t\t\t\"/portfolio.jsp\",\n+\t\t\t\t\"/quote.jsp\",\n+\t\t\t\t\"/tradehome.jsp\",\n+\t\t\t\t\"/account.jsp\",\n+\t\t\t\t\"/order.jsp\",\n+\t\t\t\t\"/config.jsp\",\n+\t\t\t\t\"/runStats.jsp\" },\n+\t\t//JSP Interface\n+\t\t{\n+\t\t\t\"/welcomeImg.jsp\",\n+\t\t\t\t\"/registerImg.jsp\",\n+\t\t\t\t\"/portfolioImg.jsp\",\n+\t\t\t\t\"/quoteImg.jsp\",\n+\t\t\t\t\"/tradehomeImg.jsp\",\n+\t\t\t\t\"/accountImg.jsp\",\n+\t\t\t\t\"/orderImg.jsp\",\n+\t\t\t\t\"/config.jsp\",\n+\t\t\t\t\"/runStats.jsp\" },\n+\t\t//JSP Interface\t\n+\t};\n+\n+\t// These are the property settings the VAJ access beans look for.\t\n+\tprivate static final String NAMESERVICE_TYPE_PROPERTY =\n+\t\t\"java.naming.factory.initial\";\n+\tprivate static final String NAMESERVICE_PROVIDER_URL_PROPERTY =\n+\t\t\"java.naming.provider.url\";\n+\n+\t// FUTURE:\n+\t// If a \"trade2.properties\" property file is supplied, reset the default values \n+\t// to match those specified in the file. This provides a persistent runtime \n+\t// property mechanism during server startup\n+\n+\t/**\n+\t * Return the hostname for this system\n+\t * Creation date: (2/16/2000 9:02:25 PM)\n+\t */\n+\n+\tprivate static String getHostname() {\n+\t\ttry {\n+\t\t\tif (hostName == null) {\n+\t\t\t\thostName = java.net.InetAddress.getLocalHost().getHostName();\n+\t\t\t\t//Strip of fully qualifed domain if necessary\n+\t\t\t\ttry {\n+\t\t\t\t\thostName = hostName.substring(0, hostName.indexOf('.'));\n+\t\t\t\t} catch (Exception e) {\n+\t\t\t\t}\n+\t\t\t}\n+\t\t} catch (Exception e) {\n+\t\t\tlog.error(\n+\t\t\t\t\"Exception getting local host name using 'localhost' - \",\n+\t\t\t\te);\n+\t\t\thostName = \"localhost\";\n+\t\t}\n+\t\treturn hostName;\n+\t}\n+\n+\t/**\n+\t * Return a Trade UI Web page based on the current configuration\n+\t * This may return a JSP page or a Servlet page \n+\t * Creation date: (3/14/2000 9:08:34 PM)\n+\t */\n+\n+\tpublic static String getPage(int pageNumber) {\n+\t\treturn webUI[webInterface][pageNumber];\n+\t}\n+\n+\t/**\n+\t * Return the list of run time mode names\n+\t * Creation date: (3/8/2000 5:58:34 PM)\n+\t * @return java.lang.String[]\n+\t */\n+\tpublic static java.lang.String[] getRunTimeModeNames() {\n+\t\treturn runTimeModeNames;\n+\t}\n+\n+\tprivate static int scenarioCount = 0;\n+\n+\t/**\n+\t * Return a Trade Scenario Operation based on the setting of the current mix (TradeScenarioMix)\n+\t * Creation date: (2/10/2000 9:08:34 PM)\n+\t */\n+\n+\tpublic static char getScenarioAction(boolean newUser) {\n+\t\tint r = rndInt(100); //0 to 99 = 100\n+\t\tint i = 0;\n+\t\tint sum = scenarioMixes[workloadMix][i];\n+\t\twhile (sum <= r) {\n+\t\t\ti++;\n+\t\t\tsum += scenarioMixes[workloadMix][i];\n+\t\t}\n+\n+\t\tincrementScenarioCount();\n+\n+\t\t/* In TradeScenarioServlet, if a sell action is selected, but the users portfolio is empty,\n+\t\t * a buy is executed instead and sellDefecit is incremented. This allows the number of buy/sell\n+\t\t * operations to stay in sync w/ the given Trade mix.\n+\t\t */\n+\n+\t\tif ((!newUser) && (actions[i] == 'b')) {\n+\t\t\tsynchronized (TradeConfig.class) {\n+\t\t\t\tif (sellDeficit > 0) {\n+\t\t\t\t\tsellDeficit--;\n+\t\t\t\t\treturn 's';\n+\t\t\t\t\t//Special case for TradeScenarioServlet to note this is a buy switched to a sell to fix sellDeficit\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\n+\t\treturn actions[i];\n+\t}\n+\n+\tpublic static String getUserID() {\n+\t\tString userID;\n+\t\tif (RND_USER) {\n+\t\t\tuserID = rndUserID();\n+\t\t} else {\n+\t\t\tuserID = nextUserID();\n+\t\t}\n+\t\treturn userID;\n+\t}\n+\tprivate static final BigDecimal orderFee = new BigDecimal(\"24.95\");\n+\tprivate static final BigDecimal cashFee = new BigDecimal(\"0.0\");\n+\tpublic static BigDecimal getOrderFee(String orderType) {\n+\t\tif ((orderType.compareToIgnoreCase(\"BUY\") == 0)\n+\t\t\t|| (orderType.compareToIgnoreCase(\"SELL\") == 0))\n+\t\t\treturn orderFee;\n+\n+\t\treturn cashFee;\n+\n+\t}\n+\n+\t/**\n+\t * Increment the sell deficit counter\n+\t * Creation date: (6/21/2000 11:33:45 AM)\n+\t */\n+\tpublic synchronized static void incrementSellDeficit() {\n+\t\tsellDeficit++;\n+\t}\n+\n+\tpublic static String nextUserID() {\n+\t\tString userID;\n+\t\tsynchronized (userID_count_semaphore) {\n+\t\t\tuserID = \"uid:\" + userID_count;\n+\t\t\tuserID_count++;\n+\t\t\tif (userID_count % MAX_USERS == 0) {\n+\t\t\t\tuserID_count = 0;\n+\t\t\t}\n+\t\t}\n+\t\treturn userID;\n+\t}\n+\tpublic static double random() {\n+\t\treturn randomNumberGenerator.nextDouble();\n+\t}\n+\tpublic static String rndAddress() {\n+\t\treturn rndInt(1000) + \" Oak St.\";\n+\t}\n+\tpublic static String rndBalance() {\n+\t\t//Give all new users a cool mill in which to trade\n+\t\treturn \"1000000\";\n+\t}\n+\tpublic static String rndCreditCard() {\n+\t\treturn rndInt(100)\n+\t\t\t+ \"-\"\n+\t\t\t+ rndInt(1000)\n+\t\t\t+ \"-\"\n+\t\t\t+ rndInt(1000)\n+\t\t\t+ \"-\"\n+\t\t\t+ rndInt(1000);\n+\t}\n+\tpublic static String rndEmail(String userID) {\n+\t\treturn userID + \"@\" + rndInt(100) + \".com\";\n+\t}\n+\tpublic static String rndFullName() {\n+\t\treturn \"first:\" + rndInt(1000) + \" last:\" + rndInt(5000);\n+\t}\n+\tpublic static int rndInt(int i) {\n+\t\treturn (new Float(random() * i)).intValue();\n+\t}\n+\tpublic static float rndFloat(int i) {\n+\t\treturn (new Float(random() * i)).floatValue();\n+\t}\n+\tpublic static BigDecimal rndBigDecimal(float f) {\n+\t\treturn (new BigDecimal(random() * f)).setScale(\n+\t\t\t2,\n+\t\t\tBigDecimal.ROUND_HALF_UP);\n+\t}\n+\n+\tpublic static boolean rndBoolean() {\n+\t\treturn randomNumberGenerator.nextBoolean();\n+\t}\n+\n+\t/**\n+\t * Returns a new Trade user\n+\t * Creation date: (2/16/2000 8:50:35 PM)\n+\t */\n+\tpublic synchronized static String rndNewUserID() {\n+\n+\t\treturn newUserPrefix\n+\t\t\t+ getHostname()\n+\t\t\t+ System.currentTimeMillis()\n+\t\t\t+ count++;\n+\t}\n+\n+\tpublic static float rndPrice() {\n+\t\treturn ((new Integer(rndInt(200))).floatValue()) + 1.0f;\n+\t}\n+\tprivate final static BigDecimal ONE = new BigDecimal(1.0);\n+\tpublic static BigDecimal getRandomPriceChangeFactor() {\n+\t\t// CJB (DAYTRADER-25) - Vary change factor between 1.2 and 0.8\n+\t\tdouble percentGain = rndFloat(1) * 0.2;\n+\t\tif (random() < .5)\n+\t\t\tpercentGain *= -1;\n+\t\tpercentGain += 1;\n+\n+\t\t// change factor is between +/- 20%\n+\t\tBigDecimal percentGainBD =\n+\t\t\t(new BigDecimal(percentGain)).setScale(2, BigDecimal.ROUND_HALF_UP);\n+\t\tif (percentGainBD.doubleValue() <= 0.0)\n+\t\t\tpercentGainBD = ONE;\n+\n+\t\treturn percentGainBD;\n+\t}\n+\n+\tpublic static float rndQuantity() {\n+\t\treturn ((new Integer(rndInt(200))).floatValue()) + 1.0f;\n+\t}\n+\n+\tpublic static String rndSymbol() {\n+\t\treturn \"s:\" + rndInt(MAX_QUOTES - 1);\n+\t}\n+\tpublic static String rndSymbols() {\n+\n+\t\tString symbols = \"\";\n+\t\tint num_symbols = rndInt(QUOTES_PER_PAGE);\n+\n+\t\tfor (int i = 0; i <= num_symbols; i++) {\n+\t\t\tsymbols += \"s:\" + rndInt(MAX_QUOTES - 1);\n+\t\t\tif (i < num_symbols)\n+\t\t\t\tsymbols += \",\";\n+\t\t}\n+\t\treturn symbols;\n+\t}\n+\n+\tpublic static String rndUserID() {\n+\t\tString nextUser = getNextUserIDFromDeck();\n+\t\tif (log.isTraceEnabled())\n+\t\t\tlog.trace(\"TradeConfig:rndUserID -- new trader = \" + nextUser);\n+\n+\t\treturn nextUser;\n+\t}\n+\n+\tprivate static synchronized String getNextUserIDFromDeck() {\n+\t\tint numUsers = getMAX_USERS();\n+\t\tif (deck == null) {\n+\t\t\tdeck = new ArrayList(numUsers);\n+\t\t\tfor (int i = 0; i < numUsers; i++)\n+\t\t\t\tdeck.add(i, new Integer(i));\n+\t\t\tjava.util.Collections.shuffle(deck, r0);\n+\t\t}\n+\t\tif (card >= numUsers)\n+\t\t\tcard = 0;\n+\t\treturn \"uid:\" + deck.get(card++);\n+\n+\t}\n+\n+\t//Trade implements a card deck approach to selecting \n+\t// users for trading with tradescenarioservlet\n+\tprivate static ArrayList deck = null;\n+\tprivate static int card = 0;\n+\n+\t/**\n+\t * Set the list of run time mode names\n+\t * Creation date: (3/8/2000 5:58:34 PM)\n+\t * @param newRunTimeModeNames java.lang.String[]\n+\t */\n+\tpublic static void setRunTimeModeNames(\n+\t\tjava.lang.String[] newRunTimeModeNames) {\n+\t\trunTimeModeNames = newRunTimeModeNames;\n+\t}\n+\t/**\n+\t * This is a convenience method for servlets to set Trade configuration parameters\n+\t * from servlet initialization parameters. The servlet provides the init param and its\n+\t * value as strings. This method then parses the parameter, converts the value to the\n+\t * correct type and sets the corresponding TradeConfig parameter to the converted value\n+\t * \n+\t */\n+\tpublic static void setConfigParam(String parm, String value) {\n+\t    if (log.isTraceEnabled())\n+\t        log.trace(\"TradeConfig setting parameter: \" + parm + \"=\" + value);\n+\t\t// Compare the parm value to valid TradeConfig parameters that can be set\n+\t\t// by servlet initialization\n+\n+\t\t// First check the proposed new parm and value - if empty or null ignore it\n+\t\tif (parm == null)\n+\t\t\treturn;\n+\t\tparm = parm.trim();\n+\t\tif (parm.length() <= 0)\n+\t\t\treturn;\n+\t\tif (value == null)\n+\t\t\treturn;\n+\t\tvalue = value.trim();\n+\n+\t\tif (parm.equalsIgnoreCase(\"runTimeMode\")) {\n+\t\t\ttry {\n+\t\t\t\tfor (int i = 0; i < runTimeModeNames.length; i++) {\n+\t\t\t\t\tif (value.equalsIgnoreCase(runTimeModeNames[i])) {\n+\t\t\t\t\t\tsetRunTimeMode(i);\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t} catch (Exception e) {\n+\t\t\t\t//>>rjm\n+\t\t\t\tlog.error(\n+\t\t\t\t\t\"TradeConfig.setConfigParm(..): minor exception caught\"\n+\t\t\t\t\t\t+ \"trying to set runtimemode to \"\n+\t\t\t\t\t\t+ value\n+\t\t\t\t\t\t+ \"reverting to current value: \"\n+\t\t\t\t\t\t+ runTimeModeNames[getRunTimeMode()],\n+\t\t\t\t\te);\n+\t\t\t} // If the value is bad, simply revert to current\n+\t\t} else if (parm.equalsIgnoreCase(\"orderProcessingMode\")) {\n+\t\t\ttry {\n+\t\t\t\tfor (int i = 0; i < orderProcessingModeNames.length; i++) {\n+\t\t\t\t\tif (value.equalsIgnoreCase(orderProcessingModeNames[i])) {\n+\t\t\t\t\t\torderProcessingMode = i;\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t} catch (Exception e) {\n+\t\t\t\tlog.error(\n+\t\t\t\t\t\"TradeConfig.setConfigParm(..): minor exception caught\"\n+\t\t\t\t\t\t+ \"trying to set orderProcessingMode to \"\n+\t\t\t\t\t\t+ value\n+\t\t\t\t\t\t+ \"reverting to current value: \"\n+\t\t\t\t\t\t+ orderProcessingModeNames[orderProcessingMode],\n+\t\t\t\t\te);\n+\t\t\t} // If the value is bad, simply revert to current\n+\t\t} else if (parm.equalsIgnoreCase(\"accessMode\")) {\t\t\n+\t\t\ttry {\n+\t\t\t\tfor (int i = 0; i < accessModeNames.length; i++) {\n+\t\t\t\t\tif (value.equalsIgnoreCase(accessModeNames[i])) {\n+\t\t\t\t\t\taccessMode = i;\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tcatch (Exception e) {\n+\t\t\t\tlog.error(\n+\t\t\t\t\t\"TradeConfig.setConfigParm(..): minor exception caught\"\n+\t\t\t\t\t\t+ \"trying to set accessMode to \"\n+\t\t\t\t\t\t+ value\n+\t\t\t\t\t\t+ \"reverting to current value: \"\n+\t\t\t\t\t\t+ accessModeNames[accessMode],\n+\t\t\t\t\te);\n+\t\t\t}\n+\t\t} else if (parm.equalsIgnoreCase(\"webServicesEndpoint\")) {\n+\t\t\ttry {\n+\t\t\t\tsetSoapURL(value);\n+\t\t\t} catch (Exception e) {\n+\t\t\t\tlog.error(\n+\t\t\t\t\t\"TradeConfig.setConfigParm(..): minor exception caught\"\n+\t\t\t\t\t\t+ \"Setting web services endpoint\",\n+\t\t\t\t\te);\n+\t\t\t} //On error, revert to saved\t\t\n+\t\t} else if (parm.equalsIgnoreCase(\"workloadMix\")) {\n+\t\t\ttry {\n+\t\t\t\tfor (int i = 0; i < workloadMixNames.length; i++) {\n+\t\t\t\t\tif (value.equalsIgnoreCase(workloadMixNames[i])) {\n+\t\t\t\t\t\tworkloadMix = i;\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t} catch (Exception e) {\n+\t\t\t\tlog.error(\n+\t\t\t\t\t\"TradeConfig.setConfigParm(..): minor exception caught\"\n+\t\t\t\t\t\t+ \"trying to set workloadMix to \"\n+\t\t\t\t\t\t+ value\n+\t\t\t\t\t\t+ \"reverting to current value: \"\n+\t\t\t\t\t\t+ workloadMixNames[workloadMix],\n+\t\t\t\t\te);\n+\t\t\t} // If the value is bad, simply revert to current\t\t\n+\t\t} else if (parm.equalsIgnoreCase(\"WebInterface\")) {\n+\t\t\ttry {\n+\t\t\t\tfor (int i = 0; i < webInterfaceNames.length; i++) {\n+\t\t\t\t\tif (value.equalsIgnoreCase(webInterfaceNames[i])) {\n+\t\t\t\t\t\twebInterface = i;\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t} catch (Exception e) {\n+\t\t\t\tlog.error(\n+\t\t\t\t\t\"TradeConfig.setConfigParm(..): minor exception caught\"\n+\t\t\t\t\t\t+ \"trying to set WebInterface to \"\n+\t\t\t\t\t\t+ value\n+\t\t\t\t\t\t+ \"reverting to current value: \"\n+\t\t\t\t\t\t+ webInterfaceNames[webInterface],\n+\t\t\t\t\te);\n+\n+\t\t\t} // If the value is bad, simply revert to current\n+\t\t} else if (parm.equalsIgnoreCase(\"CachingType\")) {\n+\t\t\ttry {\n+\t\t\t\tfor (int i = 0; i < cachingTypeNames.length; i++) {\n+\t\t\t\t\tif (value.equalsIgnoreCase(cachingTypeNames[i])) {\n+\t\t\t\t\t\tcachingType = i;\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t} catch (Exception e) {\n+\t\t\t\tlog.error(\n+\t\t\t\t\t\"TradeConfig.setConfigParm(..): minor exception caught\"\n+\t\t\t\t\t\t+ \"trying to set CachingType to \"\n+\t\t\t\t\t\t+ value\n+\t\t\t\t\t\t+ \"reverting to current value: \"\n+\t\t\t\t\t\t+ cachingTypeNames[cachingType],\n+\t\t\t\t\te);\n+\t\t\t} // If the value is bad, simply revert to current\n+\t\t} else if (parm.equalsIgnoreCase(\"maxUsers\")) {\n+\t\t\ttry {\n+\t\t\t\tMAX_USERS = Integer.parseInt(value);\n+\t\t\t} catch (Exception e) {\n+\t\t\t\tlog.error(\n+\t\t\t\t\t\"TradeConfig.setConfigParm(..): minor exception caught\"\n+\t\t\t\t\t\t+ \"Setting maxusers, error parsing string to int:\"\n+\t\t\t\t\t\t+ value\n+\t\t\t\t\t\t+ \"revering to current value: \"\n+\t\t\t\t\t\t+ MAX_USERS,\n+\t\t\t\t\te);\n+\t\t\t} //On error, revert to saved\t\t\n+\t\t} else if (parm.equalsIgnoreCase(\"maxQuotes\")) {\n+\t\t\ttry {\n+\t\t\t\tMAX_QUOTES = Integer.parseInt(value);\n+\t\t\t} catch (Exception e) {\n+\t\t\t\t//>>rjm\n+\t\t\t\tlog.error(\n+\t\t\t\t\t\"TradeConfig.setConfigParm(...) minor exception caught\"\n+\t\t\t\t\t\t+ \"Setting max_quotes, error parsing string to int \"\n+\t\t\t\t\t\t+ value\n+\t\t\t\t\t\t+ \"reverting to current value: \"\n+\t\t\t\t\t\t+ MAX_QUOTES,\n+\t\t\t\t\te);\n+\t\t\t\t//<<rjm\n+\t\t\t} //On error, revert to saved\t\t\n+\t\t} else if (parm.equalsIgnoreCase(\"primIterations\")) {\n+\t\t\ttry {\n+\t\t\t\tprimIterations = Integer.parseInt(value);\n+\t\t\t} catch (Exception e) {\n+\t\t\t\tlog.error(\n+\t\t\t\t\t\"TradeConfig.setConfigParm(..): minor exception caught\"\n+\t\t\t\t\t\t+ \"Setting primIterations, error parsing string to int:\"\n+\t\t\t\t\t\t+ value\n+\t\t\t\t\t\t+ \"revering to current value: \"\n+\t\t\t\t\t\t+ primIterations,\n+\t\t\t\t\te);\n+\t\t\t} //On error, revert to saved\n+\t\t}\t\t\n+\t}\n+\n+\t/**\n+\t * Gets the orderProcessingModeNames\n+\t * @return Returns a String[]\n+\t */\n+\tpublic static String[] getOrderProcessingModeNames() {\n+\t\treturn orderProcessingModeNames;\n+\t}\n+\n+\t/**\n+\t * Gets the workloadMixNames\n+\t * @return Returns a String[]\n+\t */\n+\tpublic static String[] getWorkloadMixNames() {\n+\t\treturn workloadMixNames;\n+\t}\n+\n+\t/**\n+\t * Gets the webInterfaceNames\n+\t * @return Returns a String[]\n+\t */\n+\tpublic static String[] getWebInterfaceNames() {\n+\t\treturn webInterfaceNames;\n+\t}\n+\n+\t/**\n+\t * Gets the webInterfaceNames\n+\t * @return Returns a String[]\n+\t */\n+\tpublic static String[] getCachingTypeNames() {\n+\t\treturn cachingTypeNames;\n+\t}\n+\n+\t/**\n+\t * Gets the scenarioMixes\n+\t * @return Returns a int[][]\n+\t */\n+\tpublic static int[][] getScenarioMixes() {\n+\t\treturn scenarioMixes;\n+\t}\n+\n+\t/**\n+\t * Gets the trace\n+\t * @return Returns a boolean\n+\t */\n+\tpublic static boolean getTrace() {\n+\t\treturn trace;\n+\t}\n+\t/**\n+\t * Sets the trace\n+\t * @param trace The trace to set\n+\t */\n+\tpublic static void setTrace(boolean traceValue) {\n+\t\ttrace = traceValue;\n+\t}\n+\n+\t/**\n+\t * Gets the mAX_USERS.\n+\t * @return Returns a int\n+\t */\n+\tpublic static int getMAX_USERS() {\n+\t\treturn MAX_USERS;\n+\t}\n+\n+\t/**\n+\t * Sets the mAX_USERS.\n+\t * @param mAX_USERS The mAX_USERS to set\n+\t */\n+\tpublic static void setMAX_USERS(int mAX_USERS) {\n+\t\tMAX_USERS = mAX_USERS;\n+\t\tdeck = null; // reset the card deck for selecting users\n+\t}\n+\n+\t/**\n+\t * Gets the mAX_QUOTES.\n+\t * @return Returns a int\n+\t */\n+\tpublic static int getMAX_QUOTES() {\n+\t\treturn MAX_QUOTES;\n+\t}\n+\n+\t/**\n+\t * Sets the mAX_QUOTES.\n+\t * @param mAX_QUOTES The mAX_QUOTES to set\n+\t */\n+\tpublic static void setMAX_QUOTES(int mAX_QUOTES) {\n+\t\tMAX_QUOTES = mAX_QUOTES;\n+\t}\n+\n+\t/**\n+\t * Gets the mAX_HOLDINGS.\n+\t * @return Returns a int\n+\t */\n+\tpublic static int getMAX_HOLDINGS() {\n+\t\treturn MAX_HOLDINGS;\n+\t}\n+\n+\t/**\n+\t * Sets the mAX_HOLDINGS.\n+\t * @param mAX_HOLDINGS The mAX_HOLDINGS to set\n+\t */\n+\tpublic static void setMAX_HOLDINGS(int mAX_HOLDINGS) {\n+\t\tMAX_HOLDINGS = mAX_HOLDINGS;\n+\t}\n+\n+\t/**\n+\t * Gets the actionTrace.\n+\t * @return Returns a boolean\n+\t */\n+\tpublic static boolean getActionTrace() {\n+\t\treturn actionTrace;\n+\t}\n+\n+\t/**\n+\t * Sets the actionTrace.\n+\t * @param actionTrace The actionTrace to set\n+\t */\n+\tpublic static void setActionTrace(boolean actionTrace) {\n+\t\tTradeConfig.actionTrace = actionTrace;\n+\t}\n+\n+\t/**\n+\t * Gets the scenarioCount.\n+\t * @return Returns a int\n+\t */\n+\tpublic static int getScenarioCount() {\n+\t\treturn scenarioCount;\n+\t}\n+\n+\t/**\n+\t * Sets the scenarioCount.\n+\t * @param scenarioCount The scenarioCount to set\n+\t */\n+\tpublic static void setScenarioCount(int scenarioCount) {\n+\t\tTradeConfig.scenarioCount = scenarioCount;\n+\t}\n+\n+\tpublic static synchronized void incrementScenarioCount() {\n+\t\tscenarioCount++;\n+\t}\n+\n+\t/**\n+\t * Gets the jdbc driver needs global transaction\n+\t * Some XA Drivers require a global transaction to be started\n+\t * for all SQL calls.  To work around this, set this to true\n+\t * to cause the direct mode to start a user transaction.\n+\t * @return Returns a boolean\n+\t */\n+\tpublic static boolean getJDBCDriverNeedsGlobalTransaction() {\n+\t\treturn JDBCDriverNeedsGlobalTransaction;\n+\t}\n+\n+\t/**\n+\t * Sets the jdbc driver needs global transaction\n+         * @param JDBCDriverNeedsGlobalTransactionVal the value\n+\t */\n+\tpublic static void setJDBCDriverNeedsGlobalTransaction(boolean JDBCDriverNeedsGlobalTransactionVal) {\n+\t\tJDBCDriverNeedsGlobalTransaction = JDBCDriverNeedsGlobalTransactionVal;\n+\t}\n+\n+\t/**\n+\t * Gets the updateQuotePrices.\n+\t * @return Returns a boolean\n+\t */\n+\tpublic static boolean getUpdateQuotePrices() {\n+\t\treturn updateQuotePrices;\n+\t}\n+\n+\t/**\n+\t * Sets the updateQuotePrices.\n+\t * @param updateQuotePrices The updateQuotePrices to set\n+\t */\n+\tpublic static void setUpdateQuotePrices(boolean updateQuotePrices) {\n+\t\tTradeConfig.updateQuotePrices = updateQuotePrices;\n+\t}\n+\t\n+\tpublic static String getSoapURL() {\n+\t\treturn SoapURL;\n+\t}\n+\t\n+\tpublic static void setSoapURL(String value) {\n+\t\tSoapURL = value;\n+//\t\tTradeWebSoapProxy.updateServicePort();\n+\t}\n+\t\n+\tpublic static int getAccessMode() {\n+\t\treturn accessMode;\n+\t}\n+\t\n+\tpublic static void setAccessMode(int value) {\n+\t\taccessMode = value;\n+//\t\tTradeWebSoapProxy.updateServicePort();\n+\t}\n+\n+    public static int getRunTimeMode() {\n+        return runTimeMode;\n+    }\n+    \n+    public static void setRunTimeMode(int value) {\n+        runTimeMode = value;\n+    }\n+\n+\tpublic static int getPrimIterations() {\n+\t\treturn primIterations;\n+\t}\n+\t\n+\tpublic static void setPrimIterations(int iter) {\n+\t\tprimIterations = iter;\n+\t}\t\n+\n+    public static boolean getLongRun() {\n+        return longRun;\n+    }\n+\n+    public static void setLongRun(boolean longRun) {\n+        TradeConfig.longRun = longRun;\n+    }\n+\n+    public static void setPublishQuotePriceChange(boolean publishQuotePriceChange) {\n+        TradeConfig.publishQuotePriceChange = publishQuotePriceChange;\n+    }\n+    \n+    public static boolean getPublishQuotePriceChange() {\n+        return publishQuotePriceChange;\n+    }\n+\n+    public static void setMarketSummaryInterval(int seconds) {\n+        TradeConfig.marketSummaryInterval = seconds;\n+    }\n+    \n+    public static  int getMarketSummaryInterval() {\n+        return TradeConfig.marketSummaryInterval;\n+    }\n+    \n+    /**\n+\t * Return the list of JPA Layer names\n+\t * Creation date: (01/10/2009)\n+\t * @return java.lang.String[]\n+\t */\n+\tpublic static java.lang.String[] getJPALayerNames() {\n+\t\treturn jpaLayerNames;\n+    }\n+\n+\t// added by OpenJPA\n+\tpublic static void setLog(Log log) {\n+\t    TradeConfig.log = log;\n+\t}\n+}"},{"sha":"f6ddf0ad25b28270f68acd5c50cc032d40eda4c3","filename":"openjpa-integration/daytrader/src/test/java/org/apache/openjpa/integration/daytrader/TradeJPADirect.java","status":"added","additions":1026,"deletions":0,"changes":1026,"blob_url":"https://github.com/apache/openjpa/blob/b85c4e30fa0b03bc6c717e0370917662d9d64b5d/openjpa-integration/daytrader/src/test/java/org/apache/openjpa/integration/daytrader/TradeJPADirect.java","raw_url":"https://github.com/apache/openjpa/raw/b85c4e30fa0b03bc6c717e0370917662d9d64b5d/openjpa-integration/daytrader/src/test/java/org/apache/openjpa/integration/daytrader/TradeJPADirect.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/daytrader/src/test/java/org/apache/openjpa/integration/daytrader/TradeJPADirect.java?ref=b85c4e30fa0b03bc6c717e0370917662d9d64b5d","patch":"@@ -0,0 +1,1026 @@\n+/**\n+ *  Licensed to the Apache Software Foundation (ASF) under one or more\n+ *  contributor license agreements.  See the NOTICE file distributed with\n+ *  this work for additional information regarding copyright ownership.\n+ *  The ASF licenses this file to You under the Apache License, Version 2.0\n+ *  (the \"License\"); you may not use this file except in compliance with\n+ *  the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.apache.openjpa.integration.daytrader;\n+\n+import java.math.BigDecimal;\n+import java.sql.Timestamp;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import javax.persistence.Persistence;\n+import javax.persistence.PersistenceUnit;\n+import javax.persistence.Query;\n+\n+import org.apache.openjpa.lib.log.Log;\n+\n+// import org.apache.geronimo.samples.daytrader.beans.AccountDataBean;\n+// import org.apache.geronimo.samples.daytrader.beans.AccountProfileDataBean;\n+// import org.apache.geronimo.samples.daytrader.beans.HoldingDataBean;\n+// import org.apache.geronimo.samples.daytrader.beans.OrderDataBean;\n+// import org.apache.geronimo.samples.daytrader.beans.QuoteDataBean;\n+// import org.apache.geronimo.samples.daytrader.core.FinancialUtils;\n+// import org.apache.geronimo.samples.daytrader.core.MarketSummaryDataBean;\n+// import org.apache.geronimo.samples.daytrader.core.RunStatsDataBean;\n+// import org.apache.geronimo.samples.daytrader.core.TradeDBServices;\n+// import org.apache.geronimo.samples.daytrader.core.TradeServices;\n+// import org.apache.geronimo.samples.daytrader.util.Log;\n+// import org.apache.geronimo.samples.daytrader.util.TradeConfig;\n+\n+/**\n+ * TradeJPADirect uses JPA to implement the business methods of the Trade online\n+ * broker application. These business methods represent the features and\n+ * operations that can be performed by customers of the brokerage such as login,\n+ * logout, get a stock quote, buy or sell a stock, etc. and are specified in the\n+ * {@link org.apache.geronimo.samples.daytrader.TradeServices} interface\n+ * \n+ * Note: In order for this class to be thread-safe, a new TradeJPA must be\n+ * created for each call to a method from the TradeInterface interface.\n+ * Otherwise, pooled connections may not be released.\n+ * \n+ * @see org.apache.geronimo.samples.daytrader.TradeServices\n+ * \n+ */\n+\n+// public class TradeJPADirect implements TradeServices, TradeDBServices {\n+public class TradeJPADirect {\n+\n+    @PersistenceUnit(unitName=\"daytrader\")\n+    private static EntityManagerFactory emf;\n+\n+    private static BigDecimal ZERO = new BigDecimal(0.0);\n+\n+    private static boolean initialized = false;\n+\n+    private static Log log = null;\n+    \n+\n+    // constructor for OpenJPA junit tests\n+    public TradeJPADirect(Log log, EntityManagerFactory emf) {\n+        this.log = log;\n+        this.emf = emf;\n+        if (initialized == false)\n+            init();\n+    }\n+    \n+    public static synchronized void init() {\n+        if (initialized)\n+            return;\n+        //if (Log.isTraceEnabled())\n+        //    Log.trace(\"TradeJPADirect:init -- *** initializing\");\n+\n+        TradeConfig.setPublishQuotePriceChange(false);\n+\n+        //if (Log.isTraceEnabled())\n+        //    Log.trace(\"TradeJPADirect:init -- +++ initialized\");\n+\n+        initialized = true;\n+    }\n+\n+    public static void destroy() {\n+        try {\n+            if (!initialized)\n+                return;\n+            log.trace(\"TradeJPADirect:destroy\");\n+        }\n+        catch (Exception e) {\n+            log.error(\"TradeJPADirect:destroy\", e);\n+        }\n+\n+    }\n+\n+    public MarketSummaryDataBean getMarketSummary() {\n+        MarketSummaryDataBean marketSummaryData;\n+\n+        /*\n+         * Creating entiManager\n+         */\n+        EntityManager entityManager = emf.createEntityManager();\n+\n+        try {\n+            if (log.isTraceEnabled())\n+                log.trace(\"TradeJPADirect:getMarketSummary -- getting market summary\");\n+\n+            // Find Trade Stock Index Quotes (Top 100 quotes)\n+            // ordered by their change in value\n+            Collection<QuoteDataBean> quotes;\n+\n+            Query query = entityManager.createNamedQuery(\"quoteejb.quotesByChange\");\n+            quotes = query.getResultList();\n+\n+            QuoteDataBean[] quoteArray = (QuoteDataBean[]) quotes.toArray(new QuoteDataBean[quotes.size()]);\n+            ArrayList<QuoteDataBean> topGainers = new ArrayList<QuoteDataBean>(\n+                                                                              5);\n+            ArrayList<QuoteDataBean> topLosers = new ArrayList<QuoteDataBean>(5);\n+            // BigDecimal TSIA = FinancialUtils.ZERO;\n+            BigDecimal TSIA = (new BigDecimal(0.00)).setScale(2);\n+            // BigDecimal openTSIA = FinancialUtils.ZERO;\n+            BigDecimal openTSIA = (new BigDecimal(0.00)).setScale(2);\n+            double totalVolume = 0.0;\n+\n+            if (quoteArray.length > 5) {\n+                for (int i = 0; i < 5; i++)\n+                    topGainers.add(quoteArray[i]);\n+                for (int i = quoteArray.length - 1; i >= quoteArray.length - 5; i--)\n+                    topLosers.add(quoteArray[i]);\n+\n+                for (QuoteDataBean quote : quoteArray) {\n+                    BigDecimal price = quote.getPrice();\n+                    BigDecimal open = quote.getOpen();\n+                    double volume = quote.getVolume();\n+                    TSIA = TSIA.add(price);\n+                    openTSIA = openTSIA.add(open);\n+                    totalVolume += volume;\n+                }\n+                TSIA = TSIA.divide(new BigDecimal(quoteArray.length),\n+                    // FinancialUtils.ROUND);\n+                    BigDecimal.ROUND_HALF_UP);\n+                openTSIA = openTSIA.divide(new BigDecimal(quoteArray.length),\n+                    // FinancialUtils.ROUND);\n+                    BigDecimal.ROUND_HALF_UP);\n+            }\n+\n+            marketSummaryData = new MarketSummaryDataBean(TSIA, openTSIA,\n+                                                          totalVolume, topGainers, topLosers);\n+        }\n+        catch (Exception e) {\n+            log.error(\"TradeJPADirect:getMarketSummary\", e);\n+            throw new RuntimeException(\"TradeJPADirect:getMarketSummary -- error \", e);\n+        } finally {\n+            entityManager.close();\n+        }\n+\n+        return marketSummaryData;\n+    }\n+\n+    public OrderDataBean buy(String userID, String symbol, double quantity, int orderProcessingMode) {\n+        OrderDataBean order = null;\n+        BigDecimal total;\n+        /*\n+         * creating entitymanager\n+         */\n+        EntityManager entityManager = emf.createEntityManager();\n+\n+        try {\n+            if (log.isTraceEnabled())\n+                log.trace(\"TradeJPADirect:buy - userID=\" + userID + \" symbol=\" + symbol + \" quantity=\" + quantity);\n+\n+            entityManager.getTransaction().begin();\n+\n+            AccountProfileDataBean profile = entityManager.find(\n+                                                               AccountProfileDataBean.class, userID);\n+            AccountDataBean account = profile.getAccount();\n+\n+            QuoteDataBean quote = entityManager.find(QuoteDataBean.class,\n+                                                     symbol);\n+\n+            HoldingDataBean holding = null; // The holding will be created by this buy order\n+\n+            order = createOrder(account, quote, holding, \"buy\", quantity, entityManager);\n+\n+            // order = createOrder(account, quote, holding, \"buy\", quantity);\n+            // UPDATE - account should be credited during completeOrder\n+\n+            BigDecimal price = quote.getPrice();\n+            BigDecimal orderFee = order.getOrderFee();\n+            BigDecimal balance = account.getBalance();\n+            total = (new BigDecimal(quantity).multiply(price)).add(orderFee);\n+            account.setBalance(balance.subtract(total));\n+\n+            // commit the transaction before calling completeOrder\n+            entityManager.getTransaction().commit();\n+\n+            if (orderProcessingMode == TradeConfig.SYNCH)\n+                completeOrder(order.getOrderID(), false);\n+            else if (orderProcessingMode == TradeConfig.ASYNCH_2PHASE)\n+                queueOrder(order.getOrderID(), true);\n+        }\n+        catch (Exception e) {\n+            log.error(\"TradeJPADirect:buy(\" + userID + \",\" + symbol + \",\" + quantity + \") --> failed\", e);\n+            /* On exception - cancel the order */\n+            // TODO figure out how to do this with JPA\n+            if (order != null)\n+                order.cancel();\n+\n+            entityManager.getTransaction().rollback();\n+\n+            // throw new EJBException(e);\n+            throw new RuntimeException(e);\n+        } finally {\n+            if (entityManager != null) {\n+                entityManager.close();\n+                entityManager = null;\n+            }\n+\n+        }\n+\n+        // after the purchase or sell of a stock, update the stocks volume and\n+        // price\n+        updateQuotePriceVolume(symbol, TradeConfig.getRandomPriceChangeFactor(), quantity);\n+\n+        return order;\n+    }\n+\n+    public OrderDataBean sell(String userID, Integer holdingID,\n+                              int orderProcessingMode) {\n+        EntityManager entityManager = emf.createEntityManager();\n+\n+        OrderDataBean order = null;\n+        BigDecimal total;\n+        try {\n+            entityManager.getTransaction().begin();\n+            if (log.isTraceEnabled())\n+                log.trace(\"TradeJPADirect:sell - userID=\" + userID + \" holding=\" + holdingID);\n+\n+            AccountProfileDataBean profile = entityManager.find(\n+                                                               AccountProfileDataBean.class, userID);\n+\n+            AccountDataBean account = profile.getAccount();\n+            HoldingDataBean holding = entityManager.find(HoldingDataBean.class,\n+                                                         holdingID);\n+\n+            if (holding == null) {\n+                log.error(\"TradeJPADirect:sell User \" + userID\n+                          + \" attempted to sell holding \" + holdingID\n+                          + \" which has already been sold\");\n+\n+                OrderDataBean orderData = new OrderDataBean();\n+                orderData.setOrderStatus(\"cancelled\");\n+\n+                entityManager.persist(orderData);\n+                entityManager.getTransaction().commit();\n+                return orderData;\n+            }\n+\n+            QuoteDataBean quote = holding.getQuote();\n+            double quantity = holding.getQuantity();\n+\n+            order = createOrder(account, quote, holding, \"sell\", quantity,\n+                                entityManager);\n+            // UPDATE the holding purchase data to signify this holding is\n+            // \"inflight\" to be sold\n+            // -- could add a new holdingStatus attribute to holdingEJB\n+            holding.setPurchaseDate(new java.sql.Timestamp(0));\n+\n+            // UPDATE - account should be credited during completeOrder\n+            BigDecimal price = quote.getPrice();\n+            BigDecimal orderFee = order.getOrderFee();\n+            BigDecimal balance = account.getBalance();\n+            total = (new BigDecimal(quantity).multiply(price)).subtract(orderFee);\n+\n+            account.setBalance(balance.add(total));\n+\n+            // commit the transaction before calling completeOrder\n+            entityManager.getTransaction().commit();\n+\n+            if (orderProcessingMode == TradeConfig.SYNCH)\n+                completeOrder(order.getOrderID(), false);\n+            else if (orderProcessingMode == TradeConfig.ASYNCH_2PHASE)\n+                queueOrder(order.getOrderID(), true);\n+\n+        }\n+        catch (Exception e) {\n+            log.error(\"TradeJPADirect:sell(\" + userID + \",\" + holdingID + \") --> failed\", e);\n+            // TODO figure out JPA cancel\n+            if (order != null)\n+                order.cancel();\n+\n+            entityManager.getTransaction().rollback();\n+\n+            throw new RuntimeException(\"TradeJPADirect:sell(\" + userID + \",\" + holdingID + \")\", e);\n+        } finally {\n+            if (entityManager != null) {\n+                entityManager.close();\n+                entityManager = null;\n+            }\n+        }\n+\n+        if (!(order.getOrderStatus().equalsIgnoreCase(\"cancelled\")))\n+            //after the purchase or sell of a stock, update the stocks volume and price\n+            updateQuotePriceVolume(order.getSymbol(), TradeConfig.getRandomPriceChangeFactor(), order.getQuantity());\n+\n+        return order;\n+    }\n+\n+    public void queueOrder(Integer orderID, boolean twoPhase) {\n+        log\n+        .error(\"TradeJPADirect:queueOrder() not implemented for this runtime mode\");\n+        throw new UnsupportedOperationException(\n+                                               \"TradeJPADirect:queueOrder() not implemented for this runtime mode\");\n+    }\n+\n+    public OrderDataBean completeOrder(Integer orderID, boolean twoPhase)\n+    throws Exception {\n+        EntityManager entityManager = emf.createEntityManager();\n+        OrderDataBean order = null;\n+\n+        if (log.isTraceEnabled())\n+            log.trace(\"TradeJPADirect:completeOrder - orderId=\" + orderID + \" twoPhase=\" + twoPhase);\n+\n+        order = entityManager.find(OrderDataBean.class, orderID);\n+        order.getQuote();\n+\n+        if (order == null) {\n+            log.error(\"TradeJPADirect:completeOrder -- Unable to find Order \" + orderID + \" FBPK returned \" + order);\n+            return null;\n+        }\n+\n+        if (order.isCompleted()) {\n+            throw new RuntimeException(\"Error: attempt to complete Order that is already completed\\n\" + order);\n+        }\n+\n+        AccountDataBean account = order.getAccount();\n+        QuoteDataBean quote = order.getQuote();\n+        HoldingDataBean holding = order.getHolding();\n+        BigDecimal price = order.getPrice();\n+        double quantity = order.getQuantity();\n+\n+        String userID = account.getProfile().getUserID();\n+\n+        if (log.isTraceEnabled())\n+            log.trace(\"TradeJPADirect:completeOrder--> Completing Order \"\n+                      + order.getOrderID() + \"\\n\\t Order info: \" + order\n+                      + \"\\n\\t Account info: \" + account + \"\\n\\t Quote info: \"\n+                      + quote + \"\\n\\t Holding info: \" + holding);\n+\n+        HoldingDataBean newHolding = null;\n+        if (order.isBuy()) {\n+            /*\n+             * Complete a Buy operation - create a new Holding for the Account -\n+             * deduct the Order cost from the Account balance\n+             */\n+\n+            newHolding = createHolding(account, quote, quantity, price, entityManager);\n+        }\n+\n+        try {\n+            entityManager.getTransaction().begin();\n+\n+            if (newHolding != null) {\n+                order.setHolding(newHolding);\n+            }\n+\n+            if (order.isSell()) {\n+                /*\n+                 * Complete a Sell operation - remove the Holding from the Account -\n+                 * deposit the Order proceeds to the Account balance\n+                 */\n+                if (holding == null) {\n+                    log.error(\"TradeJPADirect:completeOrder -- Unable to sell order \" + order.getOrderID() + \" holding already sold\");\n+                    order.cancel();\n+                    entityManager.getTransaction().commit();\n+                    return order;\n+                }\n+                else {\n+                    entityManager.remove(holding);\n+                    order.setHolding(null);\n+                }\n+            }\n+\n+            order.setOrderStatus(\"closed\");\n+\n+            order.setCompletionDate(new java.sql.Timestamp(System.currentTimeMillis()));\n+\n+            if (log.isTraceEnabled())\n+                log.trace(\"TradeJPADirect:completeOrder--> Completed Order \"\n+                          + order.getOrderID() + \"\\n\\t Order info: \" + order\n+                          + \"\\n\\t Account info: \" + account + \"\\n\\t Quote info: \"\n+                          + quote + \"\\n\\t Holding info: \" + holding);\n+\n+            entityManager.getTransaction().commit();\n+        }\n+        catch (Exception e) {\n+            e.printStackTrace();\n+            entityManager.getTransaction().rollback();\n+        } finally {\n+            if (entityManager != null) {\n+                entityManager.close();\n+                entityManager = null;\n+            }\n+        }\n+\n+        return order;\n+    }\n+\n+    public void cancelOrder(Integer orderID, boolean twoPhase) {\n+        EntityManager entityManager = emf.createEntityManager();\n+\n+        if (log.isTraceEnabled())\n+            log.trace(\"TradeJPADirect:cancelOrder - orderId=\" + orderID + \" twoPhase=\" + twoPhase);\n+\n+        OrderDataBean order = entityManager.find(OrderDataBean.class, orderID);\n+        /*\n+         * managed transaction\n+         */\n+        try {\n+            entityManager.getTransaction().begin();\n+            order.cancel();\n+            entityManager.getTransaction().commit();\n+        }\n+        catch (Exception e) {\n+            entityManager.getTransaction().rollback();\n+        } finally {\n+            entityManager.close();\n+        }\n+    }\n+\n+    public void orderCompleted(String userID, Integer orderID) {\n+        if (log.isTraceEnabled())\n+            log.trace(\"TradeAction:orderCompleted - userID=\" + userID + \" orderID=\" + orderID);\n+    }\n+\n+    public Collection<OrderDataBean> getOrders(String userID) {\n+        if (log.isTraceEnabled())\n+            log.trace(\"TradeJPADirect:getOrders - userID=\" + userID);\n+        EntityManager entityManager = emf.createEntityManager();\n+        AccountProfileDataBean profile = entityManager.find(\n+                                                           AccountProfileDataBean.class, userID);\n+        AccountDataBean account = profile.getAccount();\n+        entityManager.close();\n+        return account.getOrders();\n+    }\n+\n+    public Collection<OrderDataBean> getClosedOrders(String userID) {\n+\n+        if (log.isTraceEnabled())\n+            log.trace(\"TradeJPADirect:getClosedOrders - userID=\" + userID);\n+        EntityManager entityManager = emf.createEntityManager();\n+\n+        try {\n+\n+            // Get the primary keys for all the closed Orders for this\n+            // account.\n+            /*\n+             * managed transaction\n+             */\n+            entityManager.getTransaction().begin();\n+            Query query = entityManager\n+                          .createNamedQuery(\"orderejb.closedOrders\");\n+            query.setParameter(\"userID\", userID);\n+\n+            entityManager.getTransaction().commit();\n+            Collection results = query.getResultList();\n+            Iterator itr = results.iterator();\n+            // entityManager.joinTransaction();\n+            // Spin through the orders to populate the lazy quote fields\n+            while (itr.hasNext()) {\n+                OrderDataBean thisOrder = (OrderDataBean) itr.next();\n+                thisOrder.getQuote();\n+            }\n+\n+            if (TradeConfig.jpaLayer == TradeConfig.OPENJPA) {\n+                Query updateStatus = entityManager\n+                                     .createNamedQuery(\"orderejb.completeClosedOrders\");\n+                /*\n+                 * managed transaction\n+                 */\n+                try {\n+                    entityManager.getTransaction().begin();\n+                    updateStatus.setParameter(\"userID\", userID);\n+\n+                    updateStatus.executeUpdate();\n+                    entityManager.getTransaction().commit();\n+                }\n+                catch (Exception e) {\n+                    entityManager.getTransaction().rollback();\n+                    entityManager.close();\n+                    entityManager = null;\n+                }\n+            }\n+            else if (TradeConfig.jpaLayer == TradeConfig.HIBERNATE) {\n+                /*\n+                 * Add logic to do update orders operation, because JBoss5'\n+                 * Hibernate 3.3.1GA DB2Dialect and MySQL5Dialect do not work\n+                 * with annotated query \"orderejb.completeClosedOrders\" defined\n+                 * in OrderDatabean\n+                 */\n+                Query findaccountid = entityManager\n+                                      .createNativeQuery(\n+                                                        \"select \"\n+                                                        + \"a.ACCOUNTID, \"\n+                                                        + \"a.LOGINCOUNT, \"\n+                                                        + \"a.LOGOUTCOUNT, \"\n+                                                        + \"a.LASTLOGIN, \"\n+                                                        + \"a.CREATIONDATE, \"\n+                                                        + \"a.BALANCE, \"\n+                                                        + \"a.OPENBALANCE, \"\n+                                                        + \"a.PROFILE_USERID \"\n+                                                        + \"from accountejb a where a.profile_userid = ?\",\n+                                                        // org.apache.geronimo.samples.daytrader.beans.AccountDataBean.class);\n+                                                        org.apache.openjpa.integration.daytrader.AccountDataBean.class);\n+                findaccountid.setParameter(1, userID);\n+                AccountDataBean account = (AccountDataBean) findaccountid.getSingleResult();\n+                Integer accountid = account.getAccountID();\n+                Query updateStatus = entityManager.createNativeQuery(\"UPDATE orderejb o SET o.orderStatus = 'completed' WHERE \"\n+                                                                     + \"o.orderStatus = 'closed' AND o.ACCOUNT_ACCOUNTID  = ?\");\n+                updateStatus.setParameter(1, accountid.intValue());\n+                updateStatus.executeUpdate();\n+            }\n+            if (entityManager != null) {\n+                entityManager.close();\n+                entityManager = null;\n+            }\n+            return results;\n+        } catch (Exception e) {\n+            log.error(\"TradeJPADirect.getClosedOrders\", e);\n+            entityManager.close();\n+            entityManager = null;\n+            throw new RuntimeException(\"TradeJPADirect.getClosedOrders - error\", e);\n+\n+        } finally {\n+            if (entityManager != null) {\n+                entityManager.close();\n+                entityManager = null;\n+            }\n+        }\n+    }\n+\n+    public QuoteDataBean createQuote(String symbol, String companyName,\n+                                     BigDecimal price) {\n+        EntityManager entityManager = emf.createEntityManager();\n+        try {\n+            QuoteDataBean quote = new QuoteDataBean(symbol, companyName, 0, price, price, price, price, 0);\n+            /*\n+             * managed transaction\n+             */\n+            try {\n+            entityManager.getTransaction().begin();\n+            entityManager.persist(quote);\n+            entityManager.getTransaction().commit();\n+            }\n+            catch (Exception e) {\n+                entityManager.getTransaction().rollback();\n+            }\n+\n+            if (log.isTraceEnabled())\n+                log.trace(\"TradeJPADirect:createQuote-->\" + quote);\n+\n+            if (entityManager != null) {\n+                entityManager.close();\n+                entityManager = null;\n+            }\n+            return quote;\n+        } catch (Exception e) {\n+            log.error(\"TradeJPADirect:createQuote -- exception creating Quote\", e);\n+            entityManager.close();\n+            entityManager = null;\n+            throw new RuntimeException(e);\n+        } finally {\n+            if (entityManager != null) {\n+                entityManager.close();\n+                entityManager = null;\n+            }\n+        }\n+\n+    }\n+\n+    public QuoteDataBean getQuote(String symbol) {\n+        if (log.isTraceEnabled())\n+            log.trace(\"TradeJPADirect:getQuote - symbol=\" + symbol);\n+        EntityManager entityManager = emf.createEntityManager();\n+\n+        QuoteDataBean qdb = entityManager.find(QuoteDataBean.class, symbol);\n+\n+        if (entityManager != null) {\n+            entityManager.close();\n+            entityManager = null;\n+        }\n+        return qdb;\n+    }\n+\n+    public Collection<QuoteDataBean> getAllQuotes() {\n+        if (log.isTraceEnabled())\n+            log.trace(\"TradeJPADirect:getAllQuotes\");\n+        EntityManager entityManager = emf.createEntityManager();\n+\n+        Query query = entityManager.createNamedQuery(\"quoteejb.allQuotes\");\n+\n+        if (entityManager != null) {\n+            entityManager.close();\n+            entityManager = null;\n+\n+        }\n+        return query.getResultList();\n+    }\n+\n+    public QuoteDataBean updateQuotePriceVolume(String symbol,\n+                                                BigDecimal changeFactor, double sharesTraded) {\n+        if (!TradeConfig.getUpdateQuotePrices())\n+            return new QuoteDataBean();\n+\n+        if (log.isTraceEnabled())\n+            log.trace(\"TradeJPADirect:updateQuote - symbol=\" + symbol + \"changeFactor=\" + changeFactor);\n+\n+        /*\n+         * Add logic to determine JPA layer, because JBoss5' Hibernate 3.3.1GA\n+         * DB2Dialect and MySQL5Dialect do not work with annotated query\n+         * \"quoteejb.quoteForUpdate\" defined in QuoteDatabean\n+         */\n+        EntityManager entityManager = emf.createEntityManager();\n+        QuoteDataBean quote = null;\n+        if (TradeConfig.jpaLayer == TradeConfig.HIBERNATE) {\n+            quote = entityManager.find(QuoteDataBean.class, symbol);\n+        } else if (TradeConfig.jpaLayer == TradeConfig.OPENJPA) {\n+  \n+            Query q = entityManager.createNamedQuery(\"quoteejb.quoteForUpdate\");\n+            q.setParameter(1, symbol);\n+  \n+            quote = (QuoteDataBean) q.getSingleResult();\n+        }\n+\n+        BigDecimal oldPrice = quote.getPrice();\n+\n+        if (quote.getPrice().equals(TradeConfig.PENNY_STOCK_PRICE)) {\n+            changeFactor = TradeConfig.PENNY_STOCK_RECOVERY_MIRACLE_MULTIPLIER;\n+        }\n+\n+        BigDecimal newPrice = changeFactor.multiply(oldPrice).setScale(2, BigDecimal.ROUND_HALF_UP);\n+\n+        /*\n+         * managed transaction\n+         */\n+\n+        try {\n+\n+            quote.setPrice(newPrice);\n+            quote.setVolume(quote.getVolume() + sharesTraded);\n+            quote.setChange((newPrice.subtract(quote.getOpen()).doubleValue()));\n+\n+            entityManager.getTransaction().begin();\n+            entityManager.merge(quote);\n+            entityManager.getTransaction().commit();\n+        }\n+        catch (Exception e) {\n+            entityManager.getTransaction().rollback();\n+        } finally {\n+            if (entityManager != null) {\n+                entityManager.close();\n+                entityManager = null;\n+            }\n+        }\n+\n+        this.publishQuotePriceChange(quote, oldPrice, changeFactor, sharesTraded);\n+\n+        return quote;\n+    }\n+\n+    public Collection<HoldingDataBean> getHoldings(String userID) {\n+        if (log.isTraceEnabled())\n+            log.trace(\"TradeJPADirect:getHoldings - userID=\" + userID);\n+        EntityManager entityManager = emf.createEntityManager();\n+        /*\n+         * managed transaction\n+         */\n+        entityManager.getTransaction().begin();\n+\n+        Query query = entityManager.createNamedQuery(\"holdingejb.holdingsByUserID\");\n+        query.setParameter(\"userID\", userID);\n+\n+        entityManager.getTransaction().commit();\n+        Collection<HoldingDataBean> holdings = query.getResultList();\n+        /*\n+         * Inflate the lazy data memebers\n+         */\n+        Iterator itr = holdings.iterator();\n+        while (itr.hasNext()) {\n+            ((HoldingDataBean) itr.next()).getQuote();\n+        }\n+\n+        entityManager.close();\n+        entityManager = null;\n+        return holdings;\n+    }\n+\n+    public HoldingDataBean getHolding(Integer holdingID) {\n+        if (log.isTraceEnabled())\n+            log.trace(\"TradeJPADirect:getHolding - holdingID=\" + holdingID);\n+        HoldingDataBean holding;\n+        EntityManager entityManager = emf.createEntityManager();\n+        holding = entityManager.find(HoldingDataBean.class, holdingID);\n+        entityManager.close();\n+        return holding;\n+    }\n+\n+    public AccountDataBean getAccountData(String userID) {\n+        if (log.isTraceEnabled())\n+            log.trace(\"TradeJPADirect:getAccountData - userID=\" + userID);\n+\n+        EntityManager entityManager = emf.createEntityManager();\n+\n+        AccountProfileDataBean profile = entityManager.find(AccountProfileDataBean.class, userID);\n+        /*\n+         * Inflate the lazy data memebers\n+         */\n+        AccountDataBean account = profile.getAccount();\n+        account.getProfile();\n+\n+        // Added to populate transient field for account\n+        account.setProfileID(profile.getUserID());\n+        entityManager.close();\n+        entityManager = null;\n+\n+        return account;\n+    }\n+\n+    public AccountProfileDataBean getAccountProfileData(String userID) {\n+        if (log.isTraceEnabled())\n+            log.trace(\"TradeJPADirect:getProfileData - userID=\" + userID);\n+        EntityManager entityManager = emf.createEntityManager();\n+\n+        AccountProfileDataBean apb = entityManager.find(AccountProfileDataBean.class, userID);\n+        entityManager.close();\n+        entityManager = null;\n+        return apb;\n+    }\n+\n+    public AccountProfileDataBean updateAccountProfile(AccountProfileDataBean profileData) {\n+\n+        EntityManager entityManager = emf.createEntityManager();\n+\n+        if (log.isTraceEnabled())\n+            log.trace(\"TradeJPADirect:updateAccountProfileData - profileData=\" + profileData);\n+        /*\n+         * // Retrieve the previous account profile in order to get account\n+         * data... hook it into new object AccountProfileDataBean temp =\n+         * entityManager.find(AccountProfileDataBean.class,\n+         * profileData.getUserID()); // In order for the object to merge\n+         * correctly, the account has to be hooked into the temp object... // -\n+         * may need to reverse this and obtain the full object first\n+         * \n+         * profileData.setAccount(temp.getAccount());\n+         * \n+         * //TODO this might not be correct temp =\n+         * entityManager.merge(profileData); //System.out.println(temp);\n+         */\n+\n+        AccountProfileDataBean temp = entityManager.find(AccountProfileDataBean.class, profileData.getUserID());\n+        temp.setAddress(profileData.getAddress());\n+        temp.setPassword(profileData.getPassword());\n+        temp.setFullName(profileData.getFullName());\n+        temp.setCreditCard(profileData.getCreditCard());\n+        temp.setEmail(profileData.getEmail());\n+        /*\n+         * Managed Transaction\n+         */\n+        try {\n+\n+            entityManager.getTransaction().begin();\n+            entityManager.merge(temp);\n+            entityManager.getTransaction().commit();\n+        }\n+        catch (Exception e) {\n+            entityManager.getTransaction().rollback();\n+        } finally {\n+            entityManager.close();\n+        }\n+\n+        return temp;\n+    }\n+\n+    public AccountDataBean login(String userID, String password)\n+    throws Exception {\n+\n+        EntityManager entityManager = emf.createEntityManager();\n+\n+        AccountProfileDataBean profile = entityManager.find(AccountProfileDataBean.class, userID);\n+\n+        if (profile == null) {\n+            throw new RuntimeException(\"No such user: \" + userID);\n+        }\n+        /*\n+         * Managed Transaction\n+         */\n+        entityManager.getTransaction().begin();\n+        entityManager.merge(profile);\n+\n+        AccountDataBean account = profile.getAccount();\n+\n+        if (log.isTraceEnabled())\n+            log.trace(\"TradeJPADirect:login - userID=\" + userID + \" password=\" + password);\n+\n+        account.login(password);\n+        entityManager.getTransaction().commit();\n+        if (log.isTraceEnabled())\n+            log.trace(\"TradeJPADirect:login(\" + userID + \",\" + password + \") success\" + account);\n+        entityManager.close();\n+        return account;\n+    }\n+\n+    public void logout(String userID) {\n+        if (log.isTraceEnabled())\n+            log.trace(\"TradeJPADirect:logout - userID=\" + userID);\n+        EntityManager entityManager = emf.createEntityManager();\n+\n+        AccountProfileDataBean profile = entityManager.find(AccountProfileDataBean.class, userID);\n+        AccountDataBean account = profile.getAccount();\n+\n+        /*\n+         * Managed Transaction\n+         */\n+        try {\n+            entityManager.getTransaction().begin();\n+            account.logout();\n+            entityManager.getTransaction().commit();\n+        }\n+        catch (Exception e) {\n+            entityManager.getTransaction().rollback();\n+        } finally {\n+            entityManager.close();\n+        }\n+\n+        if (log.isTraceEnabled())\n+            log.trace(\"TradeJPADirect:logout(\" + userID + \") success\");\n+    }\n+\n+    public AccountDataBean register(String userID, String password, String fullname, \n+                                    String address, String email, String creditcard,\n+                                    BigDecimal openBalance) {\n+        AccountDataBean account = null;\n+        AccountProfileDataBean profile = null;\n+        EntityManager entityManager = emf.createEntityManager();\n+\n+        if (log.isTraceEnabled()) {\n+            // Log.trace(\"TradeJPADirect:register\", userID, password, fullname, address, email, creditcard, openBalance);\n+            log.trace(\"TradeJPADirect:register - userID=\" + userID);\n+        }\n+        \n+        // Check to see if a profile with the desired userID already exists\n+\n+        profile = entityManager.find(AccountProfileDataBean.class, userID);\n+\n+        if (profile != null) {\n+            log.error(\"Failed to register new Account - AccountProfile with userID(\" + userID + \") already exists\");\n+            return null;\n+        }\n+        else {\n+        \tprofile = new AccountProfileDataBean(userID, password, fullname,\n+                                                 address, email, creditcard);\n+            account = new AccountDataBean(0, 0, null, new Timestamp(System.currentTimeMillis()), openBalance, openBalance, userID);\n+            profile.setAccount(account);\n+            account.setProfile(profile);\n+            /*\n+             * managed Transaction\n+             */\n+            try {\n+                entityManager.getTransaction().begin();\n+                entityManager.persist(profile);\n+                entityManager.persist(account);\n+                entityManager.getTransaction().commit();\n+            }\n+            catch (Exception e) {\n+                entityManager.getTransaction().rollback();\n+            } finally {\n+                entityManager.close();\n+            }\n+\n+        }\n+\n+        return account;\n+    }\n+\n+    // @TransactionAttribute(TransactionAttributeType.NOT_SUPPORTED)\n+    //public RunStatsDataBean resetTrade(boolean deleteAll) throws Exception {\n+    public void resetTrade(boolean deleteAll) throws Exception {\n+        // return(new TradeJDBCDirect(false)).resetTrade(deleteAll);\n+        new RuntimeException(\"TradeJPADirect:resetTrade - not implemented in JPA mode\");\n+    }\n+\n+    /*\n+     * NO LONGER USE\n+     */\n+\n+    private void publishQuotePriceChange(QuoteDataBean quote,\n+                                         BigDecimal oldPrice, BigDecimal changeFactor, double sharesTraded) {\n+        if (!TradeConfig.getPublishQuotePriceChange())\n+            return;\n+        log.error(\"TradeJPADirect:publishQuotePriceChange - is not implemented for this runtime mode\");\n+        throw new UnsupportedOperationException(\"TradeJPADirect:publishQuotePriceChange - is not implemented for this runtime mode\");\n+    }\n+\n+    /*\n+     * new Method() that takes EntityManager as a parameter\n+     */\n+    private OrderDataBean createOrder(AccountDataBean account,\n+                                      QuoteDataBean quote, HoldingDataBean holding, String orderType,\n+                                      double quantity, EntityManager entityManager) {\n+        OrderDataBean order;\n+        if (log.isTraceEnabled())\n+            log.trace(\"TradeJPADirect:createOrder(orderID=\" + \" account=\"\n+                      + ((account == null) ? null : account.getAccountID())\n+                      + \" quote=\" + ((quote == null) ? null : quote.getSymbol())\n+                      + \" orderType=\" + orderType + \" quantity=\" + quantity);\n+        try {\n+            order = new OrderDataBean(orderType, \n+                                      \"open\", \n+                                      new Timestamp(System.currentTimeMillis()), \n+                                      null, \n+                                      quantity, \n+                                      // quote.getPrice().setScale(FinancialUtils.SCALE, FinancialUtils.ROUND),\n+                                      quote.getPrice().setScale(2, BigDecimal.ROUND_HALF_UP),\n+                                      TradeConfig.getOrderFee(orderType), \n+                                      account, \n+                                      quote, \n+                                      holding);\n+                entityManager.persist(order);\n+        }\n+        catch (Exception e) {\n+            log.error(\"TradeJPADirect:createOrder -- failed to create Order\", e);\n+            throw new RuntimeException(\"TradeJPADirect:createOrder -- failed to create Order\", e);\n+        }\n+        return order;\n+    }\n+\n+    private HoldingDataBean createHolding(AccountDataBean account,\n+                                          QuoteDataBean quote, double quantity, BigDecimal purchasePrice,\n+                                          EntityManager entityManager) throws Exception {\n+        HoldingDataBean newHolding = new HoldingDataBean(quantity,\n+                                                         purchasePrice, new Timestamp(System.currentTimeMillis()),\n+                                                         account, quote);\n+        try {\n+            /*\n+             * manage transactions\n+             */\n+            entityManager.getTransaction().begin();\n+            entityManager.persist(newHolding);\n+            entityManager.getTransaction().commit();\n+        }\n+        catch (Exception e) {\n+            entityManager.getTransaction().rollback();\n+        } finally {\n+            entityManager.close();\n+        }\n+\n+        return newHolding;\n+    }\n+\n+    public double investmentReturn(double investment, double NetValue)\n+    throws Exception {\n+        if (log.isTraceEnabled())\n+            log.trace(\"TradeJPADirect:investmentReturn\");\n+\n+        double diff = NetValue - investment;\n+        double ir = diff / investment;\n+        return ir;\n+    }\n+\n+    public QuoteDataBean pingTwoPhase(String symbol) throws Exception {\n+        log\n+        .error(\"TradeJPADirect:pingTwoPhase - is not implemented for this runtime mode\");\n+        throw new UnsupportedOperationException(\"TradeJPADirect:pingTwoPhase - is not implemented for this runtime mode\");\n+    }\n+\n+    class quotePriceComparator implements java.util.Comparator {\n+        public int compare(Object quote1, Object quote2) {\n+            double change1 = ((QuoteDataBean) quote1).getChange();\n+            double change2 = ((QuoteDataBean) quote2).getChange();\n+            return new Double(change2).compareTo(change1);\n+        }\n+    }\n+\n+    /**\n+     * TradeBuildDB needs this abstracted method\n+     */\n+    public String checkDBProductName() throws Exception {\n+        log.error(\"TradeJPADirect:checkDBProductName - is not implemented in JPA mode\");\n+        // return(new TradeJDBCDirect(false)).checkDBProductName();\n+        new RuntimeException(\"TradeJPADirect:checkDBProductName - is not implemented in JPA mode\");\n+        return null;\n+    }\n+\n+    /**\n+     * TradeBuildDB needs this abstracted method\n+     */\n+    public boolean recreateDBTables(Object[] sqlBuffer, java.io.PrintWriter out)\n+    throws Exception {\n+        log.error(\"TradeJPADirect:recreateDBTables - is not implemented in JPA mode\");\n+        //return(new TradeJDBCDirect(false)).recreateDBTables(sqlBuffer, out);\n+        new RuntimeException(\"TradeJPADirect:recreateDBTables - is not implemented in JPA mode\");\n+        return false;\n+    }\n+\n+    /**\n+     * Get mode - returns the persistence mode (TradeConfig.JPA)\n+     * \n+     * @return int mode\n+     */\n+    public int getMode() {\n+        return TradeConfig.JPA;\n+    }\n+\n+}"},{"sha":"55952057ed1bf2e67d817368015ac5ff4a822194","filename":"openjpa-integration/daytrader/src/test/resources/META-INF/persistence.xml","status":"added","additions":48,"deletions":0,"changes":48,"blob_url":"https://github.com/apache/openjpa/blob/b85c4e30fa0b03bc6c717e0370917662d9d64b5d/openjpa-integration/daytrader/src/test/resources/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/b85c4e30fa0b03bc6c717e0370917662d9d64b5d/openjpa-integration/daytrader/src/test/resources/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/daytrader/src/test/resources/META-INF/persistence.xml?ref=b85c4e30fa0b03bc6c717e0370917662d9d64b5d","patch":"@@ -0,0 +1,48 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  Licensed to the Apache Software Foundation (ASF) under one or more\n+  contributor license agreements.  See the NOTICE file distributed with\n+  this work for additional information regarding copyright ownership.\n+  The ASF licenses this file to You under the Apache License, Version 2.0\n+  (the \"License\"); you may not use this file except in compliance with\n+  the License.  You may obtain a copy of the License at\n+\n+      http://www.apache.org/licenses/LICENSE-2.0\n+\n+  Unless required by applicable law or agreed to in writing, software\n+  distributed under the License is distributed on an \"AS IS\" BASIS,\n+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  See the License for the specific language governing permissions and\n+  limitations under the License.\n+-->\n+<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\"\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    version=\"2.0\">\n+\n+    <persistence-unit name=\"daytrader\">\n+        <description>PU for Daytrader tests</description>\n+        <provider>org.apache.openjpa.persistence.PersistenceProviderImpl</provider>\n+        <class>org.apache.openjpa.integration.daytrader.AccountDataBean</class>\n+        <class>org.apache.openjpa.integration.daytrader.AccountProfileDataBean</class>\n+        <class>org.apache.openjpa.integration.daytrader.HoldingDataBean</class>\n+        <class>org.apache.openjpa.integration.daytrader.OrderDataBean</class>\n+        <class>org.apache.openjpa.integration.daytrader.QuoteDataBean</class>\n+        <exclude-unlisted-classes>true</exclude-unlisted-classes>\n+        \n+        <properties>\n+            <property name=\"openjpa.DynamicEnhancementAgent\" value=\"false\"/>\n+            <property name=\"openjpa.BrokerImpl\" value=\"non-finalizing\" />\n+            <property name=\"openjpa.jdbc.SynchronizeMappings\" value=\"buildSchema(ForeignKeys=true)\"/>\n+            <property name=\"openjpa.Sequence\" value=\"table(Table=OPENJPASEQ, Increment=100)\"/>\n+            <!--\n+            <property name=\"openjpa.jdbc.UpdateManager\" value=\"org.apache.openjpa.jdbc.kernel.OperationOrderUpdateManager(batchLimit=0)\" /> \n+            <property name=\"openjpa.jdbc.DBDictionary\" value=\"derby\"/>\n+            <property name=\"openjpa.ConnectionDriverName\" value=\"org.apache.commons.dbcp.BasicDataSource\"/>\n+            <property name=\"openjpa.ConnectionDriverName\" value=\"org.apache.derby.jdbc.EmbeddedDriver\"/>\n+            <property name=\"openjpa.ConnectionURL\" value=\"jdbc:derby:tradedb;create=true\"/>\n+            <property name=\"openjpa.ConnectionProperties\" value=\"DriverClassName=org.apache.derby.jdbc.EmbeddedDriver,Url=jdbc:derby:tradedb;create=true,MaxActive=50,MaxWait=10000,Username=,Password=\"/>\n+             <property name=\"openjpa.jdbc.MappingDefaults\" value=\"ForeignKeyDeleteAction=restrict,JoinForeignKeyDeleteAction=restrict\"/>\n+            -->\n+        </properties>\n+    </persistence-unit>\n+</persistence>"}]}

