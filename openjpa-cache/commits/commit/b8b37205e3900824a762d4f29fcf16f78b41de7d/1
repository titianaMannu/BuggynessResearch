{"sha":"b8b37205e3900824a762d4f29fcf16f78b41de7d","node_id":"MDY6Q29tbWl0MjA2MzY0OmI4YjM3MjA1ZTM5MDA4MjRhNzYyZDRmMjlmY2YxNmY3OGI0MWRlN2Q=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-13T22:25:55Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-13T22:25:55Z"},"message":"updates to run TCK twice, since pluggability tests require a different setup\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@898974 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"be38da70ae081a447005a9fe2d7e48cadb154b01","url":"https://api.github.com/repos/apache/openjpa/git/trees/be38da70ae081a447005a9fe2d7e48cadb154b01"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b8b37205e3900824a762d4f29fcf16f78b41de7d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b8b37205e3900824a762d4f29fcf16f78b41de7d","html_url":"https://github.com/apache/openjpa/commit/b8b37205e3900824a762d4f29fcf16f78b41de7d","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b8b37205e3900824a762d4f29fcf16f78b41de7d/comments","author":null,"committer":null,"parents":[{"sha":"2331d205229f72e7526d03896b5fbdca16ffca2b","url":"https://api.github.com/repos/apache/openjpa/commits/2331d205229f72e7526d03896b5fbdca16ffca2b","html_url":"https://github.com/apache/openjpa/commit/2331d205229f72e7526d03896b5fbdca16ffca2b"}],"stats":{"total":638,"additions":429,"deletions":209},"files":[{"sha":"bcf7b02e8805f79deeefbe9d8310809fa9e9fbe8","filename":"openjpa-integration/tck/pom.xml","status":"modified","additions":42,"deletions":209,"changes":251,"blob_url":"https://github.com/apache/openjpa/blob/b8b37205e3900824a762d4f29fcf16f78b41de7d/openjpa-integration/tck/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/b8b37205e3900824a762d4f29fcf16f78b41de7d/openjpa-integration/tck/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/tck/pom.xml?ref=b8b37205e3900824a762d4f29fcf16f78b41de7d","patch":"@@ -102,236 +102,69 @@\n               <groupId>org.apache.maven.plugins</groupId>\n               <artifactId>maven-antrun-plugin</artifactId>\n               <executions>\n+                <execution>\n+                  <id>tckinit</id>\n+                  <phase>pre-integration-test</phase>\n+                  <configuration>\n+                    <tasks>\n+                        <echo>Running Sun JPA 2.0 TCK Init</echo>\n+                        <property name=\"tck.base\" value=\"${basedir}/target/tck\" />\n+                        <property name=\"tck.dir\" value=\"${tck.base}/jpatck\" />\n+                        <property name=\"LOCAL_M2_REPO\" value=\"${settings.localRepository}\"/>\n+                        <ant antfile=\"${basedir}/tck2.xml\">\n+                            <target name=\"init\" />\n+                        </ant>\n+                    </tasks>\n+                  </configuration>\n+                  <goals>\n+                    <goal>run</goal>\n+                  </goals>\n+                </execution>\n                 <execution>\n                   <id>run-tck</id>\n                   <phase>integration-test</phase>\n                   <configuration>\n                     <tasks>\n                         <echo>Running Sun JPA 2.0 TCK</echo>\n \n-                        <property name=\"tck.level\" value=\"jpatck-2.0_09-Dec-2009\" />\n-                        <property name=\"tck.zip\" value=\"${settings.localRepository}/../privaterepos/${tck.level}.zip\" />\n-                        <available property=\"tck.available\" file=\"${tck.zip}\" />\n-                        <fail unless=\"tck.available\">The TCK file specified in the \"tck.zip\" system property (${tck.zip}) does not exist. This file must be downloaded separately in order to be able to run the JPA 2.0 TCK</fail>\n-\n-                        <property name=\"tck_patches.zip\" value=\"${settings.localRepository}/../privaterepos/${tck.level}_patches.zip\" />\n-                        <available property=\"tck_patches.available\" file=\"${tck_patches.zip}\" />\n-                        <fail unless=\"tck_patches.available\">The TCK patches file specified in the \"tck_patches.zip\" system property (${tck_patches.zip}) does not exist. This file must be downloaded separately in order to be able to run the JPA 2.0 TCK</fail>\n-\n                         <property name=\"tck.base\" value=\"${basedir}/target/tck\" />\n                         <property name=\"tck.dir\" value=\"${tck.base}/jpatck\" />\n+                        <property name=\"tck.reports\" value=\"${tck.dir}/reports\" />\n+                        <property name=\"tck.work\" value=\"${tck.dir}/work\" />\n \n-                        <delete dir=\"${tck.dir}\" />\n-                        <unzip overwrite=\"false\" src=\"${tck.zip}\" dest=\"${tck.base}\" />\n-                        <unzip overwrite=\"true\" src=\"${tck_patches.zip}\" dest=\"${tck.base}\" />\n-\n-                        <!-- \n+                        <!--\n                             Setup jpa.classes to only use the Maven artifacts\n                             that we specified as dependencies\n                         -->\n-                        <path id=\"cp\">\n+                        <path id=\"cp.openjpa\">\n                             <path refid=\"maven.compile.classpath\" />\n                         </path>\n-                        <pathconvert property=\"cp.property\" refid=\"cp\" />\n-\n-                        <property name=\"db.name\" value=\"derby\" />\n-                        <property name=\"db.driver\" value=\"org.apache.derby.jdbc.EmbeddedDriver\" />\n-                        <property name=\"db.url\" value=\"jdbc:derby:derby-database;create=true\" />\n-                        <property name=\"db.username\" value=\"nousername\" />\n-                        <property name=\"db.password\" value=\"nopassword\" />\n-\n-                        <property name=\"openjpa.log.level\" value=\"WARN\" />\n-\n-                        <property name=\"jpatck.pkg.dir\" value=\"com\" />\n-                        <property name=\"jpatck.test\" value=\"\" />\n-\n-                        <property name=\"jpatck.reports.dir\" value=\"${tck.base}/reports\" />\n-                        <property name=\"jpatck.work.dir\" value=\"${tck.base}/work\" />\n-                        <property name=\"tck.log\" value=\"${tck.base}/openjpa-tck.log\" />\n-\n-                        <property name=\"openjpa.properties\" value=\"${tck.dir}/openjpa-provier.properties\" />\n-\n-                        <!-- create the OpenJPA properties for the TCK run -->\n-                        <echo append=\"false\" file=\"${openjpa.properties}\">\n-javax.persistence.provider: org.apache.openjpa.persistence.PersistenceProviderImpl\n-openjpa.ConnectionDriverName: ${db.driver}\n-openjpa.ConnectionURL: ${db.url}\n-openjpa.ConnectionUserName: ${db.username}\n-openjpa.ConnectionPassword: ${db.password}\n-openjpa.FetchBatchSize: -1\n-openjpa.Compatibility: StrictIdentityValues=true\n-openjpa.Sequence: time\n-openjpa.Log: DefaultLevel=${openjpa.log.level}\n-openjpa.jdbc.DBDictionary: StoreCharsAsNumbers=true\n-openjpa.jdbc.SchemaFactory: native(ForeignKeys=true)\n-openjpa.jdbc.SynchronizeMappings: buildSchema(ForeignKeys=true)\n-                        </echo>\n-\n-                        <!-- Append OpenJPA-specific configuration -->\n-                        <property name=\"jpatck.config\" value=\"${tck.dir}/bin/ts.jte\" />\n-\n-                        <echo append=\"false\" file=\"${jpatck.config}.tmp\">\n-\n-\n-#########################################################################\n-## OpenJPA specific properties follow\n-#########################################################################\n-\n-jpa.home=${tck.dir}\n-work.dir=${jpatck.work.dir}\n-report.dir=${jpatck.reports.dir}\n-jpa.classes=${cp.property}\n-# jpa.classes includes Derby, so only set database.classes for other DBs\n-database.classes=\n-# Need to specify java.* classes, both in Windows/UNIX locations as well as Mac.\n-# This includes a few different possible locations; only one of them needs to \n-# actually work for a given environment.\n-sigTestClasspath=${JAVA_HOME}/lib/rt.jar${path.separator}${JAVA_HOME}/jre/lib/rt.jar${path.separator}${JAVA_HOME}/../Classes/classes.jar${path.separator}$${jpa.classes}\n-persistence.unit.properties.file.full.path=${openjpa.properties}\n-database.user=${db.username}\n-database.passwd=${db.password}\n-database.url=${db.url}\n-database.driver=${db.driver}\n-databaseName=${db.name}\n-\n-                        </echo>\n-\n-                        <!-- convert backslashes and known paths with spaces\n-                            to get around a problem with the TCK testrunner \n-                            on windows -->\n-                        <echo>Update directory paths if running on Windows</echo>\n-                        <replace summary=\"yes\" file=\"${jpatck.config}.tmp\" replacefilterfile=\"windows-replacefilter.properties\" />\n-                        <concat append=\"true\" destfile=\"${jpatck.config}\">\n-                            <fileset file=\"${jpatck.config}.tmp\" />\n-                        </concat>\n-\n-                        <path id=\"agent.path\">\n-                            <fileset dir=\"../../openjpa/target\">\n-                                <include name=\"*.jar\" />\n-                                <exclude name=\"*-sources.jar\" />\n-                                <exclude name=\"original-*.jar\" />\n-                                <exclude name=\"*-tests.jar\" />\n-                                <exclude name=\"*-javadoc.jar\" />\n-                            </fileset>\n-                        </path>\n-                        <pathconvert dirsep=\"/\" property=\"agent\" refid=\"agent.path\" />\n-                        <property name=\"agent.properties\" value=\"\" />\n-                        <echo>AGENT: ${agent}${agent.properties}</echo>\n+                        <pathconvert property=\"OPENJPA_CLASSPATH\" refid=\"cp.openjpa\" />\n \n                         <!--\n-                            Add in a javaagent argument (optional in JPA2 TCK.)\n-                            Also, we need to specify the default MetaDataFactory\n-                            inorder to allow tests that don't have any\n-                            persistent classes to work (like the SignatureTest)\n+                            Setup jpa.classes to use the Maven artifacts AND\n+                            the toplink provider required for pluggability tests\n                         -->\n-                        <replace file=\"${jpatck.config}\">\n-                            <replacefilter token=\"-Ddeliverable.class=${deliverable.class}\" value=\"-Ddeliverable.class=${deliverable.class} -javaagent:${agent}${agent.properties} -Dopenjpa.MetaDataFactory=jpa(DefaultAccessType=PROPERTY)\"/>\n-                        </replace>\n-\n-                        <!-- Fix path for java.security.policy -->\n-                        <replace file=\"${jpatck.config}\">\n-                            <replacefilter token=\"-Djava.security.policy=${bin.dir}/harness.policy\" value=\"-Djava.security.policy=${ts.home}/bin/harness.policy\"/>\n-                        </replace>\n-\n-                        <!-- make a macro for the TCK harness launcher -->\n-                        <macrodef name=\"tsant\">\n-                            <attribute name=\"buildfile\" />\n-                            <attribute name=\"target\" />\n-                            <sequential>\n-                                <java classname=\"org.apache.tools.ant.launch.Launcher\" fork=\"true\" failonerror=\"false\" dir=\"${tck.dir}/src\" append=\"true\" output=\"${tck.log}\" timeout=\"7200000\" resultproperty=\"tsant.result\">\n-                                    <arg value=\"-emacs\" />\n-                                    <arg value=\"-buildfile\" />\n-                                    <arg value=\"@{buildfile}\" />\n-                                    <arg value=\"-listener\" />\n-                                    <arg value=\"com.sun.ant.TSBuildListener\" />\n-                                    <arg value=\"-logger\" />\n-                                    <arg value=\"com.sun.ant.TSLogger\" />\n-                                    <arg value=\"@{target}\" />\n-\n-                                    <env key=\"TS_HOME\" value=\"${tck.dir}\" />\n-                                    <sysproperty key=\"ts.home\" value=\"${tck.dir}\" />\n-\n-                                    <env key=\"ANT_HOME\" value=\"${tck.dir}/tools/ant\" />\n-                                    <sysproperty key=\"ant.home\" value=\"${tck.dir}/tools/ant\" />\n-\n-                                    <sysproperty key=\"pkg.dir\" value=\"${jpatck.pkg.dir}\" />\n-                                    <!--\n-                                    <sysproperty key=\"test\" value=\"${jpatck.test}\" />\n-                                    -->\n-\n-                                    <classpath>\n-                                        <path refid=\"cp\" />\n-                                        <fileset dir=\"${tck.dir}/tools/ant/lib\">\n-                                            <include name=\"**/*.jar\" />\n-                                        </fileset>\n-                                        <fileset dir=\"${tck.dir}/lib\">\n-                                            <include name=\"**/*.jar\" />\n-                                        </fileset>\n-                                    </classpath>\n-                                </java>\n-                            </sequential>\n-                        </macrodef>\n-\n-                        <echo>Logging JPA 2.0 TCK output to ${tck.log}</echo>\n-\n-                        <!-- first initialize the database -->\n-                        <echo>Calling TCK initdb.xml</echo>\n-                        <tsant buildfile=\"${tck.dir}/bin/initdb.xml\" target=\"init.database\" />\n-                        <echo>TCK initdb.xml returned result=${tsant.result}</echo>\n-\n-                        <!-- now run the TCK -->\n-                        <echo>Calling TCK build.xml</echo>\n-                        <tsant buildfile=\"${tck.dir}/bin/build.xml\" target=\"runclient\" />\n-                        <echo>TCK build.xml returned result=${tsant.result}</echo>\n-\n-                        <!-- archive the results -->\n-                        <property name=\"tck.results.archive\" value=\"${tck.base}/openjpa-tck-results.zip\" />\n-                        <zip destfile=\"${tck.results.archive}\">\n-                            <fileset dir=\"${jpatck.work.dir}\" />\n-                            <fileset dir=\"${jpatck.reports.dir}\" />\n-                        </zip>\n-                        <echo>Results archive at: ${tck.results.archive}</echo>\n+                        <path id=\"cp.toplink\">\n+                            <path refid=\"maven.compile.classpath\" />\n+                            <!-- need to include the toplink jars for pluggability tests -->\n+                            <fileset dir=\"${tck.dir}/lib\">\n+                                <include name=\"**/*toplink*.jar\" />\n+                            </fileset>\n+                        </path>\n+                        <pathconvert property=\"TOPLINK_CLASSPATH\" refid=\"cp.toplink\" />\n \n-                        <!-- Figure out the Passed/Failed counts -->\n-                        <resourcecount property=\"count.passed\">\n-                          <tokens>\n-                            <concat>\n-                              <filterchain>\n-                                <tokenfilter>\n-                                  <containsstring contains=\"Passed.\"/>\n-                                </tokenfilter>\n-                              </filterchain>\n-                              <fileset dir=\"${jpatck.reports.dir}\" includes=\"summary.txt\" />\n-                            </concat>\n-                          </tokens>\n-                        </resourcecount>\n-                        <resourcecount property=\"count.failed\">\n-                          <tokens>\n-                            <concat>\n-                              <filterchain>\n-                                <tokenfilter>\n-                                  <containsstring contains=\"Failed.\"/>\n-                                </tokenfilter>\n-                              </filterchain>\n-                              <fileset dir=\"${jpatck.reports.dir}\" includes=\"summary.txt\" />\n-                            </concat>\n-                          </tokens>\n-                        </resourcecount>\n-                        <echo>TCK Results - Passed: ${count.passed}, Failed: ${count.failed}</echo>\n+                        <path id=\"cp\">\n+                            <path refid=\"maven.compile.classpath\" />\n+                        </path>\n \n-                        <!--\n-                            The TCK's Java process doesn't actually fail when\n-                            tests fail, so we need to parse the results file\n-                            for a string indicating whether or not it passed.\n-                        -->\n-                        <loadfile property=\"jpatck.results\" srcfile=\"${jpatck.work.dir}/jtData/log.txt\" />\n-                        <condition property=\"jpatck.failed\">\n-                            <contains string=\"${jpatck.results}\" substring=\"Completed test run: not ok\" />\n-                        </condition>\n-                        <fail if=\"jpatck.failed\">${count.failed} tests failed</fail>\n-                        <!-- else -->\n-                        <echo>Passed JPA 2.0 TCK!</echo>\n+                        <ant antfile=\"${basedir}/tck2.xml\" inheritRefs=\"true\">\n+                            <target name=\"run-pluggability\" />\n+                        </ant>\n \n+                        <ant antfile=\"${basedir}/tck2.xml\" inheritRefs=\"true\">\n+                            <target name=\"run-tck\" />\n+                        </ant>\n                     </tasks>\n                   </configuration>\n                   <goals>"},{"sha":"02b077bb380b7ad4667e161c49213549524bd54f","filename":"openjpa-integration/tck/tck2.xml","status":"added","additions":387,"deletions":0,"changes":387,"blob_url":"https://github.com/apache/openjpa/blob/b8b37205e3900824a762d4f29fcf16f78b41de7d/openjpa-integration/tck/tck2.xml","raw_url":"https://github.com/apache/openjpa/raw/b8b37205e3900824a762d4f29fcf16f78b41de7d/openjpa-integration/tck/tck2.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/tck/tck2.xml?ref=b8b37205e3900824a762d4f29fcf16f78b41de7d","patch":"@@ -0,0 +1,387 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+ \n+ http://www.apache.org/licenses/LICENSE-2.0\n+ \n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.   \n+-->\n+\n+<!--\n+    This ANT build file is used to run the JPA 2.0 TCK. It assumes that you have\n+    the TCK and patches zip files located at:\n+\n+        ${user.home}/.m2/privaterepos/jpatck-2.0_09-Dec-2009.zip\n+        ${user.home}/.m2/privaterepos/jpatck-2.0_09-Dec-2009_patches.zip\n+\n+    If you have that file in a different location, it can be specified with\n+    the \"tck.zip\" and \"tck_patches.zip\" system property.\n+\n+    The TCK running process will do the following:\n+        1. Fine the TCK zip file and extract it\n+        2. Create an openjpa-provider.properties file with the OpenJPA config\n+        3. Modify the TCK's main configuration file (ts.jte) to use OpenJPA\n+        4. Run the database initialization script\n+        5. Run the TCK script\n+        6. Parse the TCK result log to determine to fail the build or not\n+\n+    Other options are documented in the Maven pom.xml which calls this script.\n+-->\n+<!-- \n+    Please keep the project tag on one line to avoid confusing \n+    the release plugin.\n+-->\n+<project name=\"JPA2TCK\" default=\"run-tck\">\n+\n+\n+    <!--\n+        Target:  init\n+        Description:  This initializes required properties and validates that\n+                      required TCK zip files are present on the system and\n+                      then extracts them.\n+     -->\n+    <target name=\"init\">\n+        <property name=\"tck.level\" value=\"jpatck-2.0_09-Dec-2009\" />\n+        <property name=\"tck.zip\" value=\"${LOCAL_M2_REPO}/../privaterepos/${tck.level}.zip\" />\n+        <available property=\"tck.available\" file=\"${tck.zip}\" />\n+        <fail unless=\"tck.available\">The TCK file specified in the \"tck.zip\" system property (${tck.zip}) does not exist. This file must be downloaded separately in order to be able to run the JPA 2.0 TCK</fail>\n+\n+        <property name=\"tck_patches.zip\" value=\"${LOCAL_M2_REPO}/../privaterepos/${tck.level}_patches.zip\" />\n+        <available property=\"tck_patches.available\" file=\"${tck_patches.zip}\" />\n+        <fail unless=\"tck_patches.available\">The TCK patches file specified in the \"tck_patches.zip\" system property (${tck_patches.zip}) does not exist. This file must be downloaded separately in order to be able to run the JPA 2.0 TCK</fail>\n+\n+        <delete dir=\"${tck.dir}\" />\n+        <unzip overwrite=\"false\" src=\"${tck.zip}\" dest=\"${tck.base}\" />\n+        <unzip overwrite=\"true\" src=\"${tck_patches.zip}\" dest=\"${tck.base}\" />\n+        <copy overwrite=\"true\"\n+            file=\"${tck.dir}/bin/ts.jte\" tofile=\"${tck.dir}/bin/ts.jte.orig\" />\n+        <!-- Pluggability tests using Toplink needs this dir created -->\n+        <mkdir dir=\"${tck.dir}/domains/domain1/logs\" />\n+    </target>\n+\n+\n+    <!--\n+        Target:  setup\n+        Description:  This updates the TCK configuration for OpenJPA.\n+     -->\n+    <target name=\"setup\">\n+        <property name=\"db.name\" value=\"derby\" />\n+        <property name=\"db.driver\" value=\"org.apache.derby.jdbc.EmbeddedDriver\" />\n+        <property name=\"db.url\" value=\"jdbc:derby:derby-database;create=true\" />\n+        <property name=\"db.username\" value=\"nousername\" />\n+        <property name=\"db.password\" value=\"nopassword\" />\n+\n+        <property name=\"openjpa.log.level\" value=\"WARN\" />\n+\n+        <property name=\"jpatck.test\" value=\"\" />\n+\n+        <property name=\"tck.reports\" value=\"${tck.base}/reports\" />\n+        <property name=\"tck.work\" value=\"${tck.base}/work\" />\n+\n+        <property name=\"openjpa.properties\" value=\"${tck.dir}/openjpa-provider.properties\" />\n+        <property name=\"toplink.properties\" value=\"${tck.dir}/bin/toplink-provider.properties\" />\n+        <!-- create the OpenJPA properties for the TCK run -->\n+        <echo append=\"false\" file=\"${openjpa.properties}\">\n+javax.persistence.provider: org.apache.openjpa.persistence.PersistenceProviderImpl\n+openjpa.ConnectionDriverName: ${db.driver}\n+openjpa.ConnectionURL: ${db.url}\n+openjpa.ConnectionUserName: ${db.username}\n+openjpa.ConnectionPassword: ${db.password}\n+openjpa.FetchBatchSize: -1\n+openjpa.Compatibility: StrictIdentityValues=true\n+openjpa.Sequence: time\n+openjpa.Log: DefaultLevel=${openjpa.log.level}\n+openjpa.jdbc.DBDictionary: StoreCharsAsNumbers=true\n+openjpa.jdbc.SchemaFactory: native(ForeignKeys=true)\n+openjpa.jdbc.SynchronizeMappings: buildSchema(ForeignKeys=true)\n+        </echo>\n+\n+        <!-- Append OpenJPA-specific configuration -->\n+        <property name=\"jpatck.config\" value=\"${tck.dir}/bin/ts.jte\" />\n+\n+        <echo append=\"false\" file=\"${jpatck.config}.tmp\">\n+\n+\n+#########################################################################\n+## OpenJPA specific properties follow\n+#########################################################################\n+\n+jpa.home=${tck.dir}\n+work.dir=${tck.work}\n+report.dir=${tck.reports}\n+jpa.classes=${cp.property}\n+# jpa.classes includes Derby, so only set database.classes for other DBs\n+database.classes=\n+# different properties needed for pluggability bucket\n+openjpa.properties=${openjpa.properties}\n+toplink.properties=${toplink.properties}\n+# Need to specify java.* classes, both in Windows/UNIX locations as well as Mac.\n+# This includes a few different possible locations; only one of them needs to \n+# actually work for a given environment.\n+sigTestClasspath=${JAVA_HOME}/lib/rt.jar${path.separator}${JAVA_HOME}/jre/lib/rt.jar${path.separator}${JAVA_HOME}/../Classes/classes.jar${path.separator}$${jpa.classes}\n+persistence.unit.properties.file.full.path=${provider.properties}\n+database.user=${db.username}\n+database.passwd=${db.password}\n+database.url=${db.url}\n+database.driver=${db.driver}\n+databaseName=${db.name}\n+\n+        </echo>\n+\n+        <!-- convert backslashes and known paths with spaces\n+            to get around a problem with the TCK testrunner \n+            on windows -->\n+        <echo>Update directory paths if running on Windows</echo>\n+        <replace summary=\"yes\" file=\"${jpatck.config}.tmp\" replacefilterfile=\"windows-replacefilter.properties\" />\n+\n+        <!-- append our updated config properties to a clean ts.jte -->\n+        <copy overwrite=\"true\"\n+            file=\"${tck.dir}/bin/ts.jte.orig\" tofile=\"${tck.dir}/bin/ts.jte\" />\n+        <concat append=\"true\" destfile=\"${jpatck.config}\">\n+            <fileset file=\"${jpatck.config}.tmp\" />\n+        </concat>\n+\n+        <path id=\"agent.path\">\n+            <fileset dir=\"../../openjpa/target\">\n+                <include name=\"*.jar\" />\n+                <exclude name=\"*-sources.jar\" />\n+                <exclude name=\"original-*.jar\" />\n+                <exclude name=\"*-tests.jar\" />\n+                <exclude name=\"*-javadoc.jar\" />\n+            </fileset>\n+        </path>\n+        <pathconvert dirsep=\"/\" property=\"agent\" refid=\"agent.path\" />\n+        <property name=\"agent.properties\" value=\"\" />\n+        <echo>AGENT: ${agent}${agent.properties}</echo>\n+\n+        <!--\n+            Add in a javaagent argument (optional in JPA2 TCK.)\n+            Also, we need to specify the default MetaDataFactory\n+            inorder to allow tests that don't have any\n+            persistent classes to work (like the SignatureTest)\n+        -->\n+        <replace file=\"${jpatck.config}\">\n+            <replacefilter token=\"-Ddeliverable.class=${deliverable.class}\" value=\"-Ddeliverable.class=${deliverable.class} -javaagent:${agent}${agent.properties} -Dopenjpa.MetaDataFactory=jpa(DefaultAccessType=PROPERTY)\"/>\n+        </replace>\n+\n+        <!-- Fix path for java.security.policy -->\n+        <replace file=\"${jpatck.config}\">\n+            <replacefilter token=\"-Djava.security.policy=${bin.dir}/harness.policy\" value=\"-Djava.security.policy=${ts.home}/bin/harness.policy\"/>\n+        </replace>\n+\n+        <!-- cleanup reports/work dirs from any prior runs -->\n+        <delete dir=\"${tck.reports}\" />\n+        <delete dir=\"${tck.work}\" />\n+        <echo>Logging JPA 2.0 TCK output to ${tck.log}</echo>\n+    </target>\n+\n+\n+    <!--\n+        Macro for the TCK harness launcher\n+    -->\n+    <macrodef name=\"tsant\">\n+        <attribute name=\"buildfile\" />\n+        <attribute name=\"target\" />\n+        <sequential>\n+            <java classname=\"org.apache.tools.ant.launch.Launcher\" fork=\"true\" failonerror=\"false\" dir=\"${tck.dir}/src\" append=\"true\" output=\"${tck.log}\" timeout=\"7200000\" resultproperty=\"tsant.result\">\n+                <arg value=\"-emacs\" />\n+                <arg value=\"-buildfile\" />\n+                <arg value=\"@{buildfile}\" />\n+                <arg value=\"-listener\" />\n+                <arg value=\"com.sun.ant.TSBuildListener\" />\n+                <arg value=\"-logger\" />\n+                <arg value=\"com.sun.ant.TSLogger\" />\n+                <arg value=\"@{target}\" />\n+\n+                <env key=\"TS_HOME\" value=\"${tck.dir}\" />\n+                <sysproperty key=\"ts.home\" value=\"${tck.dir}\" />\n+\n+                <env key=\"ANT_HOME\" value=\"${tck.dir}/tools/ant\" />\n+                <sysproperty key=\"ant.home\" value=\"${tck.dir}/tools/ant\" />\n+\n+                <sysproperty key=\"pkg.dir\" value=\"${jpatck.pkg.dir}\" />\n+                <!--\n+                <sysproperty key=\"test\" value=\"${jpatck.test}\" />\n+                -->\n+\n+                <classpath>\n+                    <path refid=\"cp\" />\n+                    <fileset dir=\"${tck.dir}/tools/ant/lib\">\n+                        <include name=\"**/*.jar\" />\n+                    </fileset>\n+                    <fileset dir=\"${tck.dir}/lib\">\n+                        <include name=\"**/*.jar\" />\n+                    </fileset>\n+                </classpath>\n+            </java>\n+        </sequential>\n+    </macrodef>\n+\n+\n+    <!--\n+        Macro to determine how many tests passed/failed\n+    -->\n+    <macrodef name=\"results\">\n+        <!-- Figure out the Passed/Failed counts -->\n+        <sequential>\n+        <resourcecount property=\"count.passed\">\n+            <tokens>\n+                <concat>\n+                    <filterchain>\n+                        <tokenfilter>\n+                            <containsstring contains=\"Passed.\"/>\n+                        </tokenfilter>\n+                    </filterchain>\n+                    <fileset dir=\"${tck.reports}\" includes=\"summary.txt\" />\n+                </concat>\n+            </tokens>\n+        </resourcecount>\n+        <resourcecount property=\"count.failed\">\n+            <tokens>\n+                <concat>\n+                    <filterchain>\n+                        <tokenfilter>\n+                            <containsstring contains=\"Failed.\"/>\n+                        </tokenfilter>\n+                    </filterchain>\n+                    <fileset dir=\"${tck.reports}\" includes=\"summary.txt\" />\n+                </concat>\n+            </tokens>\n+        </resourcecount>\n+        <echo>TCK Results - Passed: ${count.passed}, Failed: ${count.failed}</echo>\n+        </sequential>\n+    </macrodef>\n+\n+\n+    <!--\n+        Target:  run-tck\n+        Description:  This is the main routine that runs the TCK, after\n+                      all other setup steps have been performed.\n+     -->\n+    <target name=\"run-tck\">\n+        <echo>Running Sun JPA 2.0 TCK - w/o Pluggability tests</echo>\n+        <echo>Init must have been called before running this target!</echo>\n+        <property name=\"jpatck.pkg.dir\" value=\"com\" />\n+        <property name=\"tck.log\" value=\"${tck.base}/openjpa-tck.log\" />\n+        <property name=\"provider.properties\" value=\"${openjpa.properties}\" />\n+\n+        <!-- call TCK setup with above run specific properties set -->\n+        <fail unless=\"OPENJPA_CLASSPATH\">The OPENJPA_CLASSPATH was not provided and needs to point to the required OpenJPA and Derby runtime jars.</fail>\n+        <antcall target=\"setup\">\n+            <param name=\"cp.property\" value=\"${OPENJPA_CLASSPATH}\" />\n+        </antcall>\n+\n+        <!-- HACK - Need to exclude Pluggability tests from a normal run,\n+            due to the need for Toplink.\n+        -->\n+        <delete dir=\"${tck.dir}/src/com/sun/ts/tests/pluggability\" />\n+\n+        <!-- backup our updated ts.jte for later debugging -->\n+        <copy overwrite=\"true\"\n+            file=\"${tck.dir}/bin/ts.jte\" tofile=\"${tck.base}/ts.jte.tck\" />\n+\n+        <!-- first initialize the database -->\n+        <echo>Calling TCK initdb.xml</echo>\n+        <tsant buildfile=\"${tck.dir}/bin/initdb.xml\" target=\"init.database\" />\n+        <echo>TCK initdb.xml returned result=${tsant.result}</echo>\n+\n+        <!-- now run the TCK -->\n+        <echo>Calling TCK build.xml</echo>\n+        <tsant buildfile=\"${tck.dir}/bin/build.xml\" target=\"runclient\" />\n+        <echo>TCK build.xml returned result=${tsant.result}</echo>\n+\n+        <!-- archive the results and check for test failures -->\n+        <antcall target=\"zip-artifacts\">\n+            <param name=\"results.name\" value=\"tck\" />\n+        </antcall> \n+    </target>\n+\n+\n+    <!--\n+        Target:  run-pluggability\n+        Description:  This runs just the pluggability bucket, which requires\n+                      us to add the toplink provider on the classpath\n+     -->\n+    <target name=\"run-pluggability\">\n+        <echo>Running Sun JPA 2.0 TCK - only Pluggability tests</echo>\n+        <echo>Init must have been called before running this target!</echo>\n+        <property name=\"jpatck.pkg.dir\" value=\"com/sun/ts/tests/pluggability\" />\n+        <property name=\"tck.log\" value=\"${tck.base}/openjpa-pluggability.log\" />\n+        <property name=\"provider.properties\" value=\"${toplink.properties}\" />\n+\n+        <!-- call TCK setup with above run specific properties set -->\n+        <fail unless=\"TOPLINK_CLASSPATH\">The TOPLINK_CLASSPATH was not provided and needs to point to the required Toplink, OpenJPA and Derby runtime jars.</fail>\n+        <antcall target=\"setup\">\n+            <param name=\"cp.property\" value=\"${TOPLINK_CLASSPATH}\" />\n+        </antcall>\n+\n+        <!-- backup our updated ts.jte for later debugging -->\n+        <copy overwrite=\"true\"\n+            file=\"${tck.dir}/bin/ts.jte\" tofile=\"${tck.base}/ts.jte.pluggability\" />\n+\n+        <!-- first initialize the database -->\n+        <echo>Calling TCK initdb.xml</echo>\n+        <tsant buildfile=\"${tck.dir}/bin/initdb.xml\" target=\"init.database\" />\n+        <echo>TCK initdb.xml returned result=${tsant.result}</echo>\n+\n+        <!-- now run the TCK -->\n+        <echo>Calling TCK build.xml</echo>\n+        <tsant buildfile=\"${tck.dir}/bin/build.xml\" target=\"runclient\" />\n+        <echo>TCK build.xml returned result=${tsant.result}</echo>\n+\n+        <!-- archive the results and check for test failures -->\n+        <antcall target=\"zip-artifacts\">\n+            <param name=\"results.name\" value=\"pluggability\" />\n+        </antcall> \n+    </target>\n+\n+\n+    <!--\n+        Target:  zip-artifacts\n+        Description:  Collects generic TCK test artifacts for debugging\n+     -->\n+    <target name=\"zip-artifacts\">\n+        <echo>Gathering test artifacts for Sun JPA 2.0 TCK</echo>\n+        <copy overwrite=\"true\"\n+            file=\"${tck.reports}/summary.txt\"\n+            tofile=\"${tck.base}/summary-${results.name}.txt\" />\n+        <property name=\"tck.results.archive\" value=\"${tck.base}/openjpa-${results.name}-results.zip\" />\n+        <!-- archive the results -->\n+        <zip destfile=\"${tck.results.archive}\">\n+            <fileset dir=\"${tck.work}\" />\n+            <fileset dir=\"${tck.reports}\" />\n+            <fileset dir=\"${tck.base}\">\n+                <include name=\"*${results.name}.log\" />\n+                <include name=\"*${results.name}.txt\" />\n+                <include name=\"ts.jte.${results.name}\" />\n+            </fileset>\n+        </zip>\n+        <echo>Results archive at: ${tck.results.archive}</echo>\n+\n+        <!--\n+            The TCK's Java process doesn't actually fail when\n+            tests fail, so we need to parse the results file\n+            for a string indicating whether or not it passed.\n+        -->\n+        <loadfile property=\"jpatck.results\" srcfile=\"${tck.work}/jtData/log.txt\" />\n+        <condition property=\"jpatck.failed\">\n+            <contains string=\"${jpatck.results}\" substring=\"Completed test run: not ok\" />\n+        </condition>\n+        <fail if=\"jpatck.failed\">Test Results:  FAILED ${count.failed} tests!</fail>\n+        <!-- else -->\n+        <echo>Test Results:  PASSED!</echo>\n+    </target>\n+\n+</project>\n+"}]}

