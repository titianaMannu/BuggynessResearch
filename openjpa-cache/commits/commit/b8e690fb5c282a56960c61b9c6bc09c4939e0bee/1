{"sha":"b8e690fb5c282a56960c61b9c6bc09c4939e0bee","node_id":"MDY6Q29tbWl0MjA2MzY0OmI4ZTY5MGZiNWMyODJhNTY5NjBjNjFiOWM2YmMwOWM0OTM5ZTBiZWU=","commit":{"author":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2009-10-30T04:49:21Z"},"committer":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2009-10-30T04:49:21Z"},"message":"OPENJPA-1366 Modified persistence util to do a direct ref comparison instead of iterating through all pu's when determining if an entity is managed within a pu.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@831200 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d447ee57d62b089f40aef58d5a69a3d3fa97eac0","url":"https://api.github.com/repos/apache/openjpa/git/trees/d447ee57d62b089f40aef58d5a69a3d3fa97eac0"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b8e690fb5c282a56960c61b9c6bc09c4939e0bee","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b8e690fb5c282a56960c61b9c6bc09c4939e0bee","html_url":"https://github.com/apache/openjpa/commit/b8e690fb5c282a56960c61b9c6bc09c4939e0bee","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b8e690fb5c282a56960c61b9c6bc09c4939e0bee/comments","author":null,"committer":null,"parents":[{"sha":"8c8636fce98d7907c444bc9f7dc2c94321163d68","url":"https://api.github.com/repos/apache/openjpa/commits/8c8636fce98d7907c444bc9f7dc2c94321163d68","html_url":"https://github.com/apache/openjpa/commit/8c8636fce98d7907c444bc9f7dc2c94321163d68"}],"stats":{"total":37,"additions":16,"deletions":21},"files":[{"sha":"42bc104d45079d2ad96e0b5896f366969b6abebd","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAPersistenceUtil.java","status":"modified","additions":16,"deletions":21,"changes":37,"blob_url":"https://github.com/apache/openjpa/blob/b8e690fb5c282a56960c61b9c6bc09c4939e0bee/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAPersistenceUtil.java","raw_url":"https://github.com/apache/openjpa/raw/b8e690fb5c282a56960c61b9c6bc09c4939e0bee/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAPersistenceUtil.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAPersistenceUtil.java?ref=b8e690fb5c282a56960c61b9c6bc09c4939e0bee","patch":"@@ -27,7 +27,6 @@\n \n import org.apache.openjpa.enhance.PersistenceCapable;\n import org.apache.openjpa.enhance.StateManager;\n-import org.apache.openjpa.kernel.AbstractBrokerFactory;\n import org.apache.openjpa.kernel.Broker;\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n import org.apache.openjpa.meta.FieldMetaData;\n@@ -76,36 +75,32 @@ public static Object getIdentifier(OpenJPAEntityManagerFactory emf,\n     }\n \n     /**\n-     * Determines whether the specified state manager is managed by a broker\n-     * within the persistence unit of this utility instance.\n+     * Determines whether the specified state manager is managed by an open\n+     * broker within the persistence unit of the provided EMF instance.\n+     * @param emf OpenJPAEntityManagerFactory\n      * @param sm StateManager\n      * @return true if this state manager is managed by a broker within\n      * this persistence unit.\n      */\n     public static boolean isManagedBy(OpenJPAEntityManagerFactory emf, Object entity) {\n+        // Assert a valid emf was provided, it is open, and the entity is PC\n         if (emf == null || !emf.isOpen() || !ImplHelper.isManageable(entity)) {\n             return false;\n         }\n-        Object abfobj = JPAFacadeHelper.toBrokerFactory(emf);\n-        if (abfobj == null) {\n+        // Assert the context is a broker\n+        PersistenceCapable pc = (PersistenceCapable)entity;\n+        if (!(pc.pcGetGenericContext() instanceof Broker)) {\n             return false;\n         }\n-        if (abfobj instanceof AbstractBrokerFactory) {\n-            AbstractBrokerFactory abf = (AbstractBrokerFactory)abfobj;\n-            Collection<Broker> brokers = abf.getOpenBrokers();\n-            if (brokers == null || brokers.size() == 0) {\n-                return false;\n-            }\n-            // Cycle through all brokers managed by this factory.  \n-            for (Broker broker : brokers) {\n-                if (broker != null && !broker.isClosed()) {\n-                    PersistenceCapable pc = (PersistenceCapable)entity;\n-                    // Verify this broker is managing the entity\n-                    if (pc.pcGetGenericContext() == broker) {\n-                        return true;\n-                    }\n-                }\n-            }\n+        // Assert the broker is available and open\n+        Broker broker = (Broker)pc.pcGetGenericContext();\n+        if (broker == null || broker.isClosed()) {\n+            return false;\n+        }\n+        // Assert the emf associated with the PC is the same as the provided emf\n+        OpenJPAEntityManagerFactory eemf = JPAFacadeHelper.toEntityManagerFactory(broker.getBrokerFactory());\n+        if (eemf == emf && eemf.isOpen()) {\n+            return true;\n         }\n         return false;\n     }"}]}

