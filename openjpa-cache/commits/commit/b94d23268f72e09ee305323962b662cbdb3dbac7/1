{"sha":"b94d23268f72e09ee305323962b662cbdb3dbac7","node_id":"MDY6Q29tbWl0MjA2MzY0OmI5NGQyMzI2OGY3MmUwOWVlMzA1MzIzOTYyYjY2MmNiZGIzZGJhYzc=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-01-21T00:16:03Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-01-21T00:16:03Z"},"message":"OPENJPA-1473: Replace null object with non-null default for aggregate expressions\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@901454 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"66220672299378628ddcacfe6495b57fb9c06a76","url":"https://api.github.com/repos/apache/openjpa/git/trees/66220672299378628ddcacfe6495b57fb9c06a76"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b94d23268f72e09ee305323962b662cbdb3dbac7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b94d23268f72e09ee305323962b662cbdb3dbac7","html_url":"https://github.com/apache/openjpa/commit/b94d23268f72e09ee305323962b662cbdb3dbac7","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b94d23268f72e09ee305323962b662cbdb3dbac7/comments","author":null,"committer":null,"parents":[{"sha":"5a0b97302ba89edbc08b90954805ad26ce6b1f3a","url":"https://api.github.com/repos/apache/openjpa/commits/5a0b97302ba89edbc08b90954805ad26ce6b1f3a","html_url":"https://github.com/apache/openjpa/commit/5a0b97302ba89edbc08b90954805ad26ce6b1f3a"}],"stats":{"total":114,"additions":112,"deletions":2},"files":[{"sha":"b7246ba20d5c9c7008d20e2ac58bdfafb4c9935c","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/UnaryOp.java","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/b94d23268f72e09ee305323962b662cbdb3dbac7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/UnaryOp.java","raw_url":"https://github.com/apache/openjpa/raw/b94d23268f72e09ee305323962b662cbdb3dbac7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/UnaryOp.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/UnaryOp.java?ref=b94d23268f72e09ee305323962b662cbdb3dbac7","patch":"@@ -113,8 +113,12 @@ private SQLBuffer newSQLBuffer(Select sel, ExpContext ctx, ExpState state) {\n \n     public Object load(ExpContext ctx, ExpState state, Result res)\n         throws SQLException {\n-        return Filters.convert(res.getObject(this,\n-            JavaSQLTypes.JDBC_DEFAULT, null), getType());\n+        Object value = res.getObject(this, JavaSQLTypes.JDBC_DEFAULT, null);\n+        Class<?> type = getType();\n+        if (value == null && (type.isPrimitive() || Number.class.isAssignableFrom(type))) {\n+            value = Filters.getDefaultForNull(Filters.wrap(type));\n+        }\n+        return Filters.convert(value, type);\n     }\n \n     public void calculateValue(Select sel, ExpContext ctx, ExpState state, "},{"sha":"592fcdd1477baa521fc041c9c82cd1f527da9bac","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Filters.java","status":"modified","additions":14,"deletions":0,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/b94d23268f72e09ee305323962b662cbdb3dbac7/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Filters.java","raw_url":"https://github.com/apache/openjpa/raw/b94d23268f72e09ee305323962b662cbdb3dbac7/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Filters.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Filters.java?ref=b94d23268f72e09ee305323962b662cbdb3dbac7","patch":"@@ -974,5 +974,19 @@ public static boolean isTemporalType(Class<?> c) {\n              || Time.class.isAssignableFrom(c) \n              || Timestamp.class.isAssignableFrom(c));\n     }\n+    \n+    public static Object getDefaultForNull(Class<?> nType) {\n+        if (nType == Long.class) \n+            return new Long(0);\n+        if (nType == Integer.class)\n+            return new Integer(0);\n+        if (nType == Double.class) \n+            return new Double(0.0);\n+        if (nType == Float.class) \n+            return new Float(0.0);\n+        if (nType == Short.class) \n+            return new Short((short)0);\n+        return null;\n+    }\n \n }"},{"sha":"5b095a8da4b89f514156b26f90d0f3dda054e304","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestAggregateQueryWithNoResult.java","status":"added","additions":92,"deletions":0,"changes":92,"blob_url":"https://github.com/apache/openjpa/blob/b94d23268f72e09ee305323962b662cbdb3dbac7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestAggregateQueryWithNoResult.java","raw_url":"https://github.com/apache/openjpa/raw/b94d23268f72e09ee305323962b662cbdb3dbac7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestAggregateQueryWithNoResult.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestAggregateQueryWithNoResult.java?ref=b94d23268f72e09ee305323962b662cbdb3dbac7","patch":"@@ -0,0 +1,92 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.query;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.jdbc.query.domain.Chess;\n+import org.apache.openjpa.persistence.jdbc.query.domain.Game;\n+import org.apache.openjpa.persistence.jdbc.query.domain.IndoorGame;\n+import org.apache.openjpa.persistence.jdbc.query.domain.Scrabble;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+/**\n+ * Tests Aggregate Query that has no record.\n+ * \n+ * SUM() and COUNT() always return Long.\n+ * AVG(), MAX(), MIN() preserves the type of aggregated field.\n+ * \n+ * @author Pinaki Poddar\n+ * \n+ */\n+public class TestAggregateQueryWithNoResult extends SingleEMFTestCase {\n+    EntityManager em;\n+\tpublic void setUp() {\n+        super.setUp(CLEAR_TABLES, Game.class, IndoorGame.class, Scrabble.class,\n+\t\t\t\tChess.class);\n+        em = emf.createEntityManager();\n+        assertTrue(em.createQuery(\"select p from Scrabble p\").getResultList().isEmpty());\n+\t}\n+\n+\n+    public void testSumWithNoResult() {\n+        String jpql = \"SELECT SUM(g.nTile) FROM Scrabble g\";\n+\n+        Long result = (Long)em.createQuery(jpql).getSingleResult();\n+        \n+        assertNotNull(result);\n+        assertEquals(result, new Long(0));\n+    }\n+    \n+    public void testAvgWithNoResult() {\n+        String jpql = \"SELECT AVG(g.nTile) FROM Scrabble g\";\n+\n+        Integer result = (Integer)em.createQuery(jpql).getSingleResult();\n+        \n+        assertNotNull(result);\n+        assertEquals(result, new Integer(0));\n+    }\n+    \n+    public void testCountWithNoResult() {\n+        String jpql = \"SELECT COUNT(g.nTile) FROM Scrabble g\";\n+\n+        Long result = (Long)em.createQuery(jpql).getSingleResult();\n+        \n+        assertNotNull(result);\n+        assertEquals(result, new Long(0));\n+    }\n+    \n+    public void testMaxWithNoResult() {\n+        String jpql = \"SELECT MAX(g.nTile) FROM Scrabble g\";\n+\n+        Integer result = (Integer)em.createQuery(jpql).getSingleResult();\n+       \n+        assertNotNull(result);\n+        assertEquals(result, new Integer(0));\n+    }\n+    \n+    public void testMinWithNoResult() {\n+        String jpql = \"SELECT MIN(g.nTile) FROM Scrabble g\";\n+\n+        Integer result = (Integer)em.createQuery(jpql).getSingleResult();\n+        \n+        assertNotNull(result);\n+        assertEquals(result, new Integer(0));\n+    }\n+}"}]}

