{"sha":"b95e0d1c6c2e2cc8f6f9d422058dfe232f6091d5","node_id":"MDY6Q29tbWl0MjA2MzY0OmI5NWUwZDFjNmMyZTJjYzhmNmY5ZDQyMjA1OGRmZTIzMmY2MDkxZDU=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2014-06-05T15:48:54Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2014-06-05T15:48:54Z"},"message":"OPENJPA-2502 : Update accessPath metas in CriteriaExpressionBuilder. Merged changes from 2.2.1.x. Patch contributed by Albert Lee.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1600682 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ac4ca04cc3728e8d36f93d94f1d546ee0b61edac","url":"https://api.github.com/repos/apache/openjpa/git/trees/ac4ca04cc3728e8d36f93d94f1d546ee0b61edac"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b95e0d1c6c2e2cc8f6f9d422058dfe232f6091d5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b95e0d1c6c2e2cc8f6f9d422058dfe232f6091d5","html_url":"https://github.com/apache/openjpa/commit/b95e0d1c6c2e2cc8f6f9d422058dfe232f6091d5","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b95e0d1c6c2e2cc8f6f9d422058dfe232f6091d5/comments","author":null,"committer":null,"parents":[{"sha":"80015bdbf9b953b7ec23afe63b816a7c7a81a8c7","url":"https://api.github.com/repos/apache/openjpa/commits/80015bdbf9b953b7ec23afe63b816a7c7a81a8c7","html_url":"https://github.com/apache/openjpa/commit/80015bdbf9b953b7ec23afe63b816a7c7a81a8c7"}],"stats":{"total":479,"additions":476,"deletions":3},"files":[{"sha":"07ae0f478cf3f15f0fc6c4cdda96a32bf72d80e4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/joins/Department.java","status":"added","additions":103,"deletions":0,"changes":103,"blob_url":"https://github.com/apache/openjpa/blob/b95e0d1c6c2e2cc8f6f9d422058dfe232f6091d5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/joins/Department.java","raw_url":"https://github.com/apache/openjpa/raw/b95e0d1c6c2e2cc8f6f9d422058dfe232f6091d5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/joins/Department.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/joins/Department.java?ref=b95e0d1c6c2e2cc8f6f9d422058dfe232f6091d5","patch":"@@ -0,0 +1,103 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.jpql.joins;\r\n+\r\n+import java.io.Serializable;\r\n+import java.util.List;\r\n+\r\n+import javax.persistence.CascadeType;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.OneToMany;\r\n+import javax.persistence.Table;\r\n+import javax.persistence.Version;\r\n+\r\n+/**\r\n+ * Entity implementation class for Entity: Parent\r\n+ *\r\n+ */\r\n+@Entity\r\n+@Table(name=\"FETCHDEPT\")\r\n+public class Department implements Serializable {\r\n+\r\n+        private static final long serialVersionUID = -5537435298484817651L;\r\n+\r\n+        @Id\r\n+        private int deptno;\r\n+        @Version\r\n+        private int version;\r\n+        private String name;\r\n+        @OneToMany(cascade=CascadeType.ALL)\r\n+        private List<Employee> employees;\r\n+        @OneToMany(cascade=CascadeType.ALL)\r\n+        private List<Employee> employee2s;\r\n+\r\n+        public Department() {\r\n+                super();\r\n+        }\r\n+\r\n+        public Department(int deptno, String name) {\r\n+                super();\r\n+                this.deptno = deptno;\r\n+                this.name = name;\r\n+        }\r\n+        public int getDeptno() {\r\n+                return this.deptno;\r\n+        }\r\n+\r\n+        public void setDeptno(int deptno) {\r\n+                this.deptno = deptno;\r\n+        }\r\n+\r\n+        public int getVersion() {\r\n+                return this.version;\r\n+        }\r\n+\r\n+        public void setVersion(int version) {\r\n+                this.version = version;\r\n+        }\r\n+\r\n+        public String getName() {\r\n+                return this.name;\r\n+        }\r\n+\r\n+        public void setName(String name) {\r\n+                this.name = name;\r\n+        }\r\n+\r\n+        public List<Employee> getEmployees() {\r\n+                return this.employees;\r\n+        }\r\n+        public void setEmployees(List<Employee> employees) {\r\n+                this.employees = employees;\r\n+        }\r\n+\r\n+        public List<Employee> getEmployee2s() {\r\n+                return this.employee2s;\r\n+        }\r\n+        public void setEmployee2s(List<Employee> employees) {\r\n+                this.employee2s = employees;\r\n+        }\r\n+\r\n+        public String toString() {\r\n+                return \"[Department:depno=\" + deptno + \", version=\" + version + \", name=\" + name +\r\n+                                \", employees=\" + employees + \", employee2s=\" + employee2s+ ']';\r\n+        }\r\n+\r\n+}\r"},{"sha":"2e80f34046e72970faffbd32304146f24d9fa54b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/joins/Department_.java","status":"added","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/apache/openjpa/blob/b95e0d1c6c2e2cc8f6f9d422058dfe232f6091d5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/joins/Department_.java","raw_url":"https://github.com/apache/openjpa/raw/b95e0d1c6c2e2cc8f6f9d422058dfe232f6091d5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/joins/Department_.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/joins/Department_.java?ref=b95e0d1c6c2e2cc8f6f9d422058dfe232f6091d5","patch":"@@ -0,0 +1,36 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.jpql.joins;\r\n+\r\n+import java.lang.Integer;\r\n+import java.lang.String;\r\n+import javax.persistence.metamodel.ListAttribute;\r\n+import javax.persistence.metamodel.SingularAttribute;\r\n+\r\n+@javax.persistence.metamodel.StaticMetamodel\r\n+(value=org.apache.openjpa.persistence.jpql.joins.Department.class)\r\n+@javax.annotation.Generated\r\n+(value=\"org.apache.openjpa.persistence.meta.AnnotationProcessor6\",date=\"Sat May 17 17:25:13 CDT 2014\")\r\n+public class Department_ {\r\n+    public static volatile SingularAttribute<Department,Integer> deptno;\r\n+    public static volatile ListAttribute<Department,Employee> employee2s;\r\n+    public static volatile ListAttribute<Department,Employee> employees;\r\n+    public static volatile SingularAttribute<Department,String> name;\r\n+    public static volatile SingularAttribute<Department,Integer> version;\r\n+}\r"},{"sha":"659b1ffc5a834ea56d1965d16658206a47b81688","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/joins/Employee.java","status":"added","additions":78,"deletions":0,"changes":78,"blob_url":"https://github.com/apache/openjpa/blob/b95e0d1c6c2e2cc8f6f9d422058dfe232f6091d5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/joins/Employee.java","raw_url":"https://github.com/apache/openjpa/raw/b95e0d1c6c2e2cc8f6f9d422058dfe232f6091d5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/joins/Employee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/joins/Employee.java?ref=b95e0d1c6c2e2cc8f6f9d422058dfe232f6091d5","patch":"@@ -0,0 +1,78 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.jpql.joins;\r\n+\r\n+import java.io.Serializable;\r\n+import java.lang.String;\r\n+import javax.persistence.*;\r\n+\r\n+/**\r\n+ * Entity implementation class for Entity: Child\r\n+ *\r\n+ */\r\n+@Entity\r\n+@Table(name=\"FETCHEMPL\")\r\n+public class Employee implements Serializable {\r\n+\r\n+        private static final long serialVersionUID = -5155314943010802723L;\r\n+\r\n+        @Id\r\n+        private int empno;\r\n+        private String name;\r\n+        @Version\r\n+        private int version;\r\n+\r\n+        public Employee() {\r\n+                super();\r\n+        }\r\n+\r\n+        public Employee(int empno, String name) {\r\n+                super();\r\n+                this.empno = empno;\r\n+                this.name = name;\r\n+        }\r\n+\r\n+        public int getEmpno() {\r\n+                return this.empno;\r\n+        }\r\n+\r\n+        public void setEmpno(int empno) {\r\n+                this.empno = empno;\r\n+        }\r\n+\r\n+        public int getVersion() {\r\n+                return this.version;\r\n+        }\r\n+\r\n+        public void setVersion(int version) {\r\n+                this.version = version;\r\n+        }\r\n+\r\n+        public String getName() {\r\n+                return this.name;\r\n+        }\r\n+\r\n+        public void setName(String name) {\r\n+                this.name = name;\r\n+        }\r\n+\r\n+        public String toString() {\r\n+                return \"[Employee:id=\" + empno + \", version=\" + version + \", name=\" + name + ']';\r\n+        }\r\n+}\r"},{"sha":"2949dc4f320f52aeed3ea506058a9dbcf292b865","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/joins/Employee_.java","status":"added","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/apache/openjpa/blob/b95e0d1c6c2e2cc8f6f9d422058dfe232f6091d5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/joins/Employee_.java","raw_url":"https://github.com/apache/openjpa/raw/b95e0d1c6c2e2cc8f6f9d422058dfe232f6091d5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/joins/Employee_.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/joins/Employee_.java?ref=b95e0d1c6c2e2cc8f6f9d422058dfe232f6091d5","patch":"@@ -0,0 +1,33 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.jpql.joins;\r\n+\r\n+import java.lang.Integer;\r\n+import java.lang.String;\r\n+import javax.persistence.metamodel.SingularAttribute;\r\n+\r\n+@javax.persistence.metamodel.StaticMetamodel\r\n+(value=org.apache.openjpa.persistence.jpql.joins.Employee.class)\r\n+@javax.annotation.Generated\r\n+(value=\"org.apache.openjpa.persistence.meta.AnnotationProcessor6\",date=\"Sat May 17 17:25:28 CDT 2014\")\r\n+public class Employee_ {\r\n+    public static volatile SingularAttribute<Employee,Integer> empno;\r\n+    public static volatile SingularAttribute<Employee,String> name;\r\n+    public static volatile SingularAttribute<Employee,Integer> version;\r\n+}\r"},{"sha":"4dc56bdd0a952c011742e666690bda82fafae16b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/joins/TestJoinFetchWithQueryDataCache.java","status":"added","additions":224,"deletions":0,"changes":224,"blob_url":"https://github.com/apache/openjpa/blob/b95e0d1c6c2e2cc8f6f9d422058dfe232f6091d5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/joins/TestJoinFetchWithQueryDataCache.java","raw_url":"https://github.com/apache/openjpa/raw/b95e0d1c6c2e2cc8f6f9d422058dfe232f6091d5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/joins/TestJoinFetchWithQueryDataCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/joins/TestJoinFetchWithQueryDataCache.java?ref=b95e0d1c6c2e2cc8f6f9d422058dfe232f6091d5","patch":"@@ -0,0 +1,224 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.jpql.joins;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.criteria.CriteriaBuilder;\r\n+import javax.persistence.criteria.CriteriaQuery;\r\n+import javax.persistence.criteria.JoinType;\r\n+import javax.persistence.criteria.Root;\r\n+\r\n+import junit.framework.Assert;\r\n+\r\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n+\r\n+/**\r\n+ * Tests JQPL and Criteria API equivalent using left join fetch with QueryCache and DataCache enabled.\r\n+ */\r\n+public class TestJoinFetchWithQueryDataCache extends SingleEMFTestCase {\r\n+    EntityManager em;\r\n+        public void setUp() {\r\n+        super.setUp(DROP_TABLES, Employee.class, Department.class\r\n+                , \"openjpa.QueryCompilationCache\", \"all\"\r\n+                , \"openjpa.DataCache\", \"true(CacheSize=2000, SoftReferenceSize=0, EvictionSchedule='+60' )\"\r\n+                , \"openjpa.RemoteCommitProvider\", \"sjvm\"\r\n+                , \"openjpa.QueryCache\", \"true\"\r\n+                        );\r\n+\r\n+                em = emf.createEntityManager();\r\n+                em.getTransaction().begin();\r\n+\r\n+                Department dept;\r\n+                dept = new Department(10, \"department 10\");\r\n+                dept.setEmployees(new ArrayList<Employee>());\r\n+                dept.getEmployees().add(new Employee(11, \"Emp11\"));\r\n+                dept.getEmployees().add(new Employee(12, \"Emp12\"));\r\n+                dept.setEmployee2s(new ArrayList<Employee>());\r\n+                dept.getEmployee2s().add(new Employee(211, \"Emp211\"));\r\n+                dept.getEmployee2s().add(new Employee(212, \"Emp212\"));\r\n+                em.persist(dept);\r\n+\r\n+                dept = new Department(20, \"department 20\");\r\n+                dept.setEmployees(new ArrayList<Employee>());\r\n+                dept.getEmployees().add(new Employee(21, \"Emp21\"));\r\n+                dept.getEmployees().add(new Employee(22, \"Emp22\"));\r\n+                dept.setEmployee2s(new ArrayList<Employee>());\r\n+                dept.getEmployee2s().add(new Employee(221, \"Emp221\"));\r\n+                dept.getEmployee2s().add(new Employee(222, \"Emp222\"));\r\n+                em.persist(dept);\r\n+\r\n+                em.getTransaction().commit();\r\n+\r\n+                em.close();\r\n+        }\r\n+\r\n+        public void testJPQLNoFetch() {\r\n+                EntityManager em = emf.createEntityManager();\r\n+                List<Department> ds = em.createQuery(\r\n+                                \"SELECT DISTINCT d FROM Department d WHERE d.deptno = 10\")\r\n+                                .getResultList();\r\n+                System.out.println(\"-- testJPQLNoFetch -----\");\r\n+                em.clear();\r\n+                Assert.assertEquals(1, ds.size());\r\n+                for (Department x : ds) {\r\n+                        Assert.assertNull(x.getEmployees());\r\n+                        Assert.assertNull(x.getEmployee2s());\r\n+                        System.out.println(x);\r\n+                }\r\n+\r\n+                em.close();\r\n+        }\r\n+\r\n+        public void testJPQLOneFetch() {\r\n+                EntityManager em = emf.createEntityManager();\r\n+                List<Department> ds = em.createQuery(\r\n+                                \"SELECT DISTINCT d FROM Department d LEFT JOIN FETCH d.employee2s \" +\r\n+                                        \"WHERE d.deptno = 10\")\r\n+                                .getResultList();\r\n+                System.out.println(\"-- testJPQLOneFetch -----\");\r\n+                em.clear();\r\n+                Assert.assertEquals(1, ds.size());\r\n+                for (Department x : ds) {\r\n+                        Assert.assertNull(x.getEmployees());\r\n+                        Assert.assertNotNull(x.getEmployee2s());\r\n+                        Assert.assertEquals(2, x.getEmployee2s().size());\r\n+                        System.out.println(x);\r\n+                }\r\n+\r\n+                em.close();\r\n+        }\r\n+\r\n+        public void testJPQLTwoFetch() {\r\n+                EntityManager em = emf.createEntityManager();\r\n+                List<Department> ds = em.createQuery(\r\n+                                \"SELECT DISTINCT d FROM Department d LEFT JOIN FETCH d.employees \" +\r\n+                            \"LEFT JOIN FETCH d.employee2s \" +\r\n+                                        \"WHERE d.deptno = 10\")\r\n+                                .getResultList();\r\n+                System.out.println(\"-- testJPQLTwoFetch -----\");\r\n+                em.clear();\r\n+                Assert.assertEquals(1, ds.size());\r\n+                for (Department x : ds) {\r\n+                        Assert.assertNotNull(x.getEmployees());\r\n+                        Assert.assertEquals(2, x.getEmployees().size());\r\n+                        Assert.assertNotNull(x.getEmployee2s());\r\n+                        Assert.assertEquals(2, x.getEmployee2s().size());\r\n+                        System.out.println(x);\r\n+                }\r\n+\r\n+                em.close();\r\n+        }\r\n+\r\n+        public void testCriteriaAPINoFetch() {\r\n+                EntityManager em = emf.createEntityManager();\r\n+                CriteriaBuilder cb = em.getCriteriaBuilder();\r\n+\r\n+                // This query is equivalent to the following Java Persistence query\r\n+                // language query:\r\n+                // SELECT d\r\n+                // FROM Department d\r\n+                // WHERE d.deptno = 1\r\n+\r\n+                CriteriaQuery<Department> q = cb.createQuery(Department.class);\r\n+                Root<Department> d = q.from(Department.class);\r\n+                q.where(cb.equal(d.get(Department_.deptno), 20)).select(d);\r\n+\r\n+                List<Department> ds = em.createQuery(q).getResultList();\r\n+                System.out.println(\"-- testCriteriaAPINoFetch -----\");\r\n+                em.clear();\r\n+                Assert.assertEquals(1, ds.size());\r\n+                for (Department x : ds) {\r\n+                        Assert.assertNull(x.getEmployees());\r\n+                        Assert.assertNull(x.getEmployee2s());\r\n+                        System.out.println(x);\r\n+                }\r\n+\r\n+                em.close();\r\n+        }\r\n+\r\n+        public void testCriteriaAPIOneFetch() {\r\n+                EntityManager em = emf.createEntityManager();\r\n+                CriteriaBuilder cb = em.getCriteriaBuilder();\r\n+\r\n+                // 6.5.4 Fetch Joins\r\n+                // Example:\r\n+                // CriteriaQuery<Department> q = cb.createQuery(Department.class);\r\n+                // Root<Department> d = q.from(Department.class);\r\n+                // d.fetch(Department_.employees, JoinType.LEFT);\r\n+                // q.where(cb.equal(d.get(Department_.deptno), 1)).select(d);\r\n+                //\r\n+                // This query is equivalent to the following Java Persistence query\r\n+                // language query:\r\n+                // SELECT DISTINCT d\r\n+                // FROM Department d LEFT JOIN FETCH d.employees\r\n+                // WHERE d.deptno = 1\r\n+\r\n+                CriteriaQuery<Department> q = cb.createQuery(Department.class);\r\n+                Root<Department> d = q.from(Department.class);\r\n+                d.fetch(Department_.employees, JoinType.LEFT);\r\n+                q.where(cb.equal(d.get(Department_.deptno), 20)).select(d).distinct(true);\r\n+\r\n+                List<Department> ds = em.createQuery(q).getResultList();\r\n+                System.out.println(\"-- testCriteriaAPIOneFetch -----\");\r\n+                em.clear();\r\n+                Assert.assertEquals(1, ds.size());\r\n+                for (Department x : ds) {\r\n+                        Assert.assertNotNull(x.getEmployees());\r\n+                        Assert.assertEquals(2, x.getEmployees().size());\r\n+                        Assert.assertNull(x.getEmployee2s());\r\n+                        System.out.println(x);\r\n+                }\r\n+\r\n+                em.close();\r\n+        }\r\n+\r\n+        public void testCriteriaAPITwoFetch() {\r\n+                EntityManager em = emf.createEntityManager();\r\n+                CriteriaBuilder cb = em.getCriteriaBuilder();\r\n+\r\n+                // This query is equivalent to the following Java Persistence query\r\n+                // language query:\r\n+                // SELECT DISTINCT d\r\n+                // FROM Department d LEFT JOIN FETCH d.employees LEFT JOIN FETCH d.employee2s\r\n+                // WHERE d.deptno = 1\r\n+                CriteriaQuery<Department> q = cb.createQuery(Department.class);\r\n+                Root<Department> d = q.from(Department.class);\r\n+                d.fetch(Department_.employees, JoinType.LEFT);\r\n+                d.fetch(Department_.employee2s, JoinType.LEFT);\r\n+                q.where(cb.equal(d.get(Department_.deptno), 20)).select(d).distinct(true);\r\n+\r\n+                List<Department> ds = em.createQuery(q).getResultList();\r\n+                System.out.println(\"-- testCriteriaAPITwoFetch -----\");\r\n+                em.clear();\r\n+                Assert.assertEquals(1, ds.size());\r\n+                for (Department x : ds) {\r\n+                        Assert.assertNotNull(x.getEmployees());\r\n+                        Assert.assertEquals(2, x.getEmployees().size());\r\n+                        Assert.assertNotNull(x.getEmployee2s());\r\n+                        Assert.assertEquals(2, x.getEmployee2s().size());\r\n+                        System.out.println(x);\r\n+                }\r\n+\r\n+                em.close();\r\n+        }\r\n+\r\n+}\r"},{"sha":"6d84adad27fd27a71159a2f4f790939668350230","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaExpressionBuilder.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/b95e0d1c6c2e2cc8f6f9d422058dfe232f6091d5/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaExpressionBuilder.java","raw_url":"https://github.com/apache/openjpa/raw/b95e0d1c6c2e2cc8f6f9d422058dfe232f6091d5/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaExpressionBuilder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaExpressionBuilder.java?ref=b95e0d1c6c2e2cc8f6f9d422058dfe232f6091d5","patch":"@@ -98,10 +98,9 @@ protected void evalAccessPaths(QueryExpressions exps, ExpressionFactory factory,\n                         metas.add(meta);\n                 }\n             }\n-            for (Fetch<?,?> fetch : root.getFetches()) {\n-                metas.add(metamodel.getRepository().getCachedMetaData(fetch.getAttribute().getJavaType()));\n-            }\n         }\n+        // TODO -- need to handle subqueries\n+        \n         exps.accessPath = metas.toArray(new ClassMetaData[metas.size()]);\n     }\n "}]}

