{"sha":"b9a230567ec725cd06f5c0db326572907f42ea52","node_id":"MDY6Q29tbWl0MjA2MzY0OmI5YTIzMDU2N2VjNzI1Y2QwNmY1YzBkYjMyNjU3MjkwN2Y0MmVhNTI=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-06T03:26:24Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-06T03:26:24Z"},"message":"OPENJPA-1097 Detachment processing of our proxied mutable types (Date, Timestamp, etc) needs to be consistent as EM.clear() was not unproxying JavaTypes.OBJECT fields but detach()/detachAll() were.  Thanks to Rick Curtis for the DetachManager changes.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@919696 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f0fd11d958f8f0387169741f9d47a4f7c71aac0d","url":"https://api.github.com/repos/apache/openjpa/git/trees/f0fd11d958f8f0387169741f9d47a4f7c71aac0d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b9a230567ec725cd06f5c0db326572907f42ea52","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b9a230567ec725cd06f5c0db326572907f42ea52","html_url":"https://github.com/apache/openjpa/commit/b9a230567ec725cd06f5c0db326572907f42ea52","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b9a230567ec725cd06f5c0db326572907f42ea52/comments","author":null,"committer":null,"parents":[{"sha":"bb538f49f9478e4aef3029fda91940c5f849b2ff","url":"https://api.github.com/repos/apache/openjpa/commits/bb538f49f9478e4aef3029fda91940c5f849b2ff","html_url":"https://github.com/apache/openjpa/commit/bb538f49f9478e4aef3029fda91940c5f849b2ff"}],"stats":{"total":412,"additions":398,"deletions":14},"files":[{"sha":"63444aef56543499344554bcb595a2b8f6649a32","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachManager.java","status":"modified","additions":12,"deletions":11,"changes":23,"blob_url":"https://github.com/apache/openjpa/blob/b9a230567ec725cd06f5c0db326572907f42ea52/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachManager.java","raw_url":"https://github.com/apache/openjpa/raw/b9a230567ec725cd06f5c0db326572907f42ea52/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachManager.java?ref=b9a230567ec725cd06f5c0db326572907f42ea52","patch":"@@ -476,8 +476,7 @@ private Object detachInternal(Object toDetach) {\n             _fullFM.reproxy(detSM);\n             _fullFM.setStateManager(null);\n         } else {\n-            InstanceDetachFieldManager fm = new InstanceDetachFieldManager\n-                (detachedPC, detSM);\n+            InstanceDetachFieldManager fm = new InstanceDetachFieldManager(detachedPC, detSM);\n             fm.setStateManager(sm);\n             fm.detachFields(fields);\n         }\n@@ -548,28 +547,28 @@ public void detachVersion() {\n          * Unproxies second class object fields.\n          */\n         public void reproxy(DetachedStateManager dsm) {\n-            FieldMetaData[] fmds = sm.getMetaData().getFields();\n-            for (int i = 0; i < fmds.length; i++) {\n-                switch (fmds[i].getDeclaredTypeCode()) {\n+            for (FieldMetaData fmd : sm.getMetaData().getProxyFields()) {\n+                switch (fmd.getDeclaredTypeCode()) {\n                 case JavaTypes.COLLECTION:\n                 case JavaTypes.MAP:\n                     // lrs proxies not detached\n-                    if (fmds[i].isLRS()) {\n+                    if (fmd.isLRS()) {\n                         objval = null;\n-                        sm.replaceField(getDetachedPersistenceCapable(), \n-                            this, i);\n+                        sm.replaceField(getDetachedPersistenceCapable(), this, fmd.getIndex());\n                         break;\n                     }\n                     // no break\n                 case JavaTypes.CALENDAR:\n                 case JavaTypes.DATE:\n                 case JavaTypes.OBJECT:\n-                    sm.provideField(getDetachedPersistenceCapable(), this, i);\n+                    sm.provideField(getDetachedPersistenceCapable(), this, fmd.getIndex());\n                     if (objval instanceof Proxy) {\n                         Proxy proxy = (Proxy) objval;\n                         if (proxy.getChangeTracker() != null)\n                             proxy.getChangeTracker().stopTracking();\n-                        proxy.setOwner(dsm, (dsm == null) ? -1 : i);\n+                        proxy.setOwner(dsm, (dsm == null) ? -1 : fmd.getIndex());\n+                        objval = proxy.copy(proxy);\n+                        sm.replaceField(getDetachedPersistenceCapable(), this, fmd.getIndex());\n                     }\n                 }\n             }\n@@ -711,8 +710,10 @@ public void storeObjectField(int field, Object curVal) {\n          * Set the owner of the field's proxy to the detached state manager.\n          */\n         private Object reproxy(Object obj, int field) {\n-            if (obj != null && _detSM != null && obj instanceof Proxy)\n+            if (obj != null && _detSM != null && obj instanceof Proxy){\n                 ((Proxy) obj).setOwner(_detSM, field);\n+                return ((Proxy) obj).copy(obj); \n+            }\n             return obj;\n         }\n "},{"sha":"b71144740e712211b1562c1540bc974a88a1c893","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detach/Entity20.java","status":"added","additions":107,"deletions":0,"changes":107,"blob_url":"https://github.com/apache/openjpa/blob/b9a230567ec725cd06f5c0db326572907f42ea52/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detach/Entity20.java","raw_url":"https://github.com/apache/openjpa/raw/b9a230567ec725cd06f5c0db326572907f42ea52/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detach/Entity20.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detach/Entity20.java?ref=b9a230567ec725cd06f5c0db326572907f42ea52","patch":"@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.detach;\n+\n+import java.io.Serializable;\n+import java.sql.Date;\n+import java.sql.Time;\n+import java.sql.Timestamp;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+import javax.persistence.Temporal;\n+import javax.persistence.TemporalType;\n+\n+@Entity\n+@Table(name=\"Entity20_detach\")\n+public class Entity20 implements Serializable {\n+    \n+    private static final long serialVersionUID = 1L;\n+\n+    @Id\n+    private Integer id;\n+    \n+    @Column(name = \"sqldate\" ) \n+    @Temporal(TemporalType.DATE) \n+    private Date sqlDate; \n+\n+    @Column(name = \"sqltime\") \n+    @Temporal(TemporalType.TIME)\n+    private Time sqlTime; \n+\n+    @Column(name = \"sqltimestamp\") \n+    @Temporal(TemporalType.TIMESTAMP)\n+    private Timestamp sqlTimestamp; \n+\n+    private String name;\n+\n+    public Entity20() {\n+    }\n+    \n+    public Entity20(int id) {\n+        this.id = new Integer(id);\n+        this.name = this.id.toString();\n+        Long time = System.currentTimeMillis();\n+        this.sqlTime = new Time(time);\n+        this.sqlDate = new Date(time);\n+        this.sqlTimestamp = new Timestamp(time);\n+    }\n+    \n+    public void setId(Integer id) {\n+        this.id = id;\n+    }\n+\n+    public Integer getId() {\n+        return id;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setDate(Date d) {\n+        sqlDate = d;\n+    }\n+    \n+    public Date getDate() {\n+        return sqlDate;\n+    }\n+    \n+    public void setTime(Time t) {\n+        sqlTime = t;\n+    }\n+    \n+    public Time getTime() {\n+        return sqlTime;\n+    }\n+    \n+    public void setTimestamp(Timestamp t) {\n+        sqlTimestamp = t;\n+    }\n+    \n+    public Timestamp getTimestamp() {\n+        return sqlTimestamp;\n+    }\n+}"},{"sha":"836a6ba824b4dbd63ca5bda65bf67c05c38cb8b1","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detach/TestDetachNoProxy.java","status":"added","additions":262,"deletions":0,"changes":262,"blob_url":"https://github.com/apache/openjpa/blob/b9a230567ec725cd06f5c0db326572907f42ea52/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detach/TestDetachNoProxy.java","raw_url":"https://github.com/apache/openjpa/raw/b9a230567ec725cd06f5c0db326572907f42ea52/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detach/TestDetachNoProxy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detach/TestDetachNoProxy.java?ref=b9a230567ec725cd06f5c0db326572907f42ea52","patch":"@@ -0,0 +1,262 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.detach;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.util.ArrayList;\n+\n+import org.apache.openjpa.conf.Compatibility;\n+import org.apache.openjpa.lib.log.Log;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+public class TestDetachNoProxy extends SingleEMFTestCase {\n+    \n+    private static final int numEntities = 3;\n+    private static final String PROXY = new String(\"$proxy\");\n+    private Log log;\n+    \n+    public void setUp() {\n+        setUp(DROP_TABLES, Entity20.class);\n+        log = emf.getConfiguration().getLog(\"test\");\n+        \n+        // check and set Compatibility values to new 2.0 values\n+        Compatibility compat = emf.getConfiguration().getCompatibilityInstance();\n+        assertNotNull(compat);\n+        if (log.isTraceEnabled()) {\n+            log.info(\"Before set, FlushBeforeDetach=\" + compat.getFlushBeforeDetach());\n+            log.info(\"Before set, CopyOnDetach=\" + compat.getCopyOnDetach());\n+            log.info(\"Before set, CascadeWithDetach=\" + compat.getCascadeWithDetach());\n+        }\n+        compat.setFlushBeforeDetach(false);\n+        compat.setCopyOnDetach(false);\n+        compat.setCascadeWithDetach(false);\n+        if (log.isTraceEnabled()) {\n+            log.info(\"After set, FlushBeforeDetach=\" + compat.getFlushBeforeDetach());\n+            log.info(\"After set, CopyOnDetach=\" + compat.getCopyOnDetach());\n+            log.info(\"After set, CascadeWithDetach=\" + compat.getCascadeWithDetach());\n+        }\n+        createEntities(numEntities);\n+    }\n+    \n+    private void createEntities(int count) {\n+        Entity20 e20 = null;\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        for (int i=0; i<count; i++) {\n+            e20 = new Entity20(i);\n+            em.persist(e20);\n+        }\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+    \n+    /* \n+     * Verify that an in-place detached entity does not use the proxy classes.\n+     */\n+    public void testDetach() {\n+        if (log.isTraceEnabled())\n+            log.info(\"***** testDetach() *****\");\n+        Integer id = new Integer(0);\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        \n+        em.clear();\n+        Entity20 e20 = em.find(Entity20.class, id);\n+        if (log.isTraceEnabled())\n+            log.trace(\"** after find\");\n+        assertTrue(em.contains(e20));\n+        verifySerializable(e20, true);\n+        \n+        // new openjpa-2.0.0 behavior, where detach() doesn't return updated entity, but does it in-place\n+        em.detach(e20);\n+        if (log.isTraceEnabled())\n+            log.trace(\"** after detach\");\n+        // in-place updated entity should not have any proxy classes and should be detached\n+        assertTrue(em.isDetached(e20));\n+        verifySerializable(e20, false);\n+               \n+        em.close();\n+    }\n+\n+    /* \n+     * Verify that a detachCopy() returned entity does not contain any proxy classes.\n+     */\n+    public void testDetachCopy() {\n+        if (log.isTraceEnabled())\n+            log.info(\"***** testDetachCopy() *****\");\n+        Integer id = new Integer(0);\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        em.clear();\n+\n+        Entity20 e20 = em.find(Entity20.class, id);\n+        if (log.isTraceEnabled())\n+            log.trace(\"** after find\");\n+        assertTrue(em.contains(e20));\n+        verifySerializable(e20, true);\n+        \n+        // Test new detachCopy() method added in 2.0.0\n+        Entity20 e20copy = em.detachCopy(e20);\n+        if (log.isTraceEnabled())\n+            log.trace(\"** after detachCopy\");\n+        assertTrue(em.isDetached(e20copy));\n+        verifySerializable(e20copy, false);\n+        \n+        em.close();\n+    }\n+\n+    /*\n+     * Verify that in-place detachAll entities do not use the proxy classes.\n+     */\n+    public void testDetachAll() {\n+        if (log.isTraceEnabled())\n+            log.info(\"***** testDetachAll() *****\");\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        em.clear();\n+\n+        ArrayList<Entity20> e20List = new ArrayList<Entity20>(numEntities);\n+        for (int i=0; i<numEntities; i++) {\n+            Entity20 e20 = em.find(Entity20.class, new Integer(i));\n+            e20List.add(e20);\n+            if (log.isTraceEnabled())\n+                log.trace(\"** after find Entity20(\" + i + \")\");\n+            assertTrue(em.contains(e20));\n+            verifySerializable(e20, true);            \n+        }\n+\n+        // new openjpa-2.0.0 behavior, where detachAll() updates entities in-place\n+        // ArrayList<Entity20> e20ListCopy = new ArrayList<Entity20>(em.detachAll(e20List));\n+        // em.detachAll(e20List);   // for some reason calling with Collection causes a NPE, so use Object[] instead\n+        em.detachAll(e20List.get(0), e20List.get(1), e20List.get(2));\n+        for (int i=0; i<numEntities; i++) {\n+            if (log.isTraceEnabled())\n+                log.trace(\"** after EM.clear() verify Entity20(\" + i + \")\");\n+            Entity20 e20 = e20List.get(i);\n+            // entity should not have any proxy classes and should be detached\n+            assertTrue(em.isDetached(e20));\n+            verifySerializable(e20, false);\n+        }\n+\n+        em.close();\n+    }\n+\n+    /*\n+     * Verify that after EM.clear() in-place detached entities do not contain any proxy classes.\n+     */\n+    public void testClear() {\n+        if (log.isTraceEnabled())\n+            log.info(\"***** testClear() *****\");\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        em.clear();\n+\n+        ArrayList<Entity20> e20List = new ArrayList<Entity20>(numEntities);\n+        for (int i=0; i<numEntities; i++) {\n+            Entity20 e20 = em.find(Entity20.class, new Integer(i));\n+            e20List.add(e20);\n+            if (log.isTraceEnabled())\n+                log.trace(\"** after find Entity20(\" + i + \")\");\n+            assertTrue(em.contains(e20));\n+            verifySerializable(e20, true);            \n+        }\n+\n+        em.clear();\n+        for (int i=0; i<numEntities; i++) {\n+            if (log.isTraceEnabled())\n+                log.trace(\"** after EM.clear() verify Entity20(\" + i + \")\");\n+            Entity20 e20 = e20List.get(i);\n+            assertTrue(em.isDetached(e20));\n+            verifySerializable(e20, false);\n+        }\n+\n+        em.close();\n+    }\n+\n+    \n+    private void verifySerializable(Entity20 e20, boolean usesProxy) {\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ObjectOutputStream oos = null;\n+        byte[] e20bytes = null;\n+        \n+        if (log.isTraceEnabled())\n+            log.trace(\"verifySerializable() - before serialize\");\n+        verifyEntities(e20, usesProxy);\n+\n+        // first serialize\n+        try {\n+            oos = new ObjectOutputStream(baos);\n+            oos.writeObject(e20);\n+            e20bytes = baos.toByteArray();\n+        } catch (IOException e) {\n+            fail(e.toString());\n+        } finally {\n+            try {\n+                if (oos != null)\n+                    oos.close();\n+            } catch (IOException e) {\n+            }\n+        }\n+        \n+        // then deserialize\n+        ByteArrayInputStream bais = new ByteArrayInputStream(e20bytes);\n+        ObjectInputStream ois = null;\n+        Entity20 e20new = null;\n+        try {\n+            ois = new ObjectInputStream(bais);\n+            e20new = (Entity20) ois.readObject();\n+            if (log.isTraceEnabled())\n+                log.trace(\"verifySerializable() - after deserialize\");\n+            verifyEntities(e20new, false);\n+        } catch (IOException e) {\n+            fail(e.toString());\n+        } catch (ClassNotFoundException e) {\n+            fail(e.toString());\n+        } finally {\n+            try {\n+                if (ois != null)\n+                    ois.close();\n+            } catch (IOException e) {\n+            }\n+        }\n+\n+    }\n+\n+    private void verifyEntities(Entity20 e20, boolean usesProxy) {\n+        if (log.isTraceEnabled()) {\n+            printClassNames(e20);\n+            log.trace(\"asserting expected proxy usage\");\n+        }\n+        assertTrue(\"Expected sqlDate endsWith($proxy) to return \" + usesProxy,\n+            usesProxy == e20.getDate().getClass().getCanonicalName().endsWith(PROXY));\n+        assertTrue(\"Expected sqlTime endsWith($proxy) to return \" + usesProxy,\n+            usesProxy == e20.getTime().getClass().getCanonicalName().endsWith(PROXY));\n+        assertTrue(\"Expected sqlTimestamp endsWith($proxy) to return \" + usesProxy,\n+            usesProxy == e20.getTimestamp().getClass().getCanonicalName().endsWith(PROXY));\n+        \n+    }\n+    \n+    private void printClassNames(Entity20 e20) {\n+        log.info(\"sqlDate = \" + e20.getDate().getClass().getCanonicalName());\n+        log.info(\"sqlTime = \" + e20.getTime().getClass().getCanonicalName());\n+        log.info(\"sqlTimestamp = \" + e20.getTimestamp().getClass().getCanonicalName());\n+    }\n+    \n+}"},{"sha":"514d7180820987c82121f47c314a2d585a41c73c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/TestProxyCollection.java","status":"modified","additions":17,"deletions":3,"changes":20,"blob_url":"https://github.com/apache/openjpa/blob/b9a230567ec725cd06f5c0db326572907f42ea52/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/TestProxyCollection.java","raw_url":"https://github.com/apache/openjpa/raw/b9a230567ec725cd06f5c0db326572907f42ea52/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/TestProxyCollection.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/TestProxyCollection.java?ref=b9a230567ec725cd06f5c0db326572907f42ea52","patch":"@@ -124,10 +124,12 @@ void createModifyAndMerge(int[] original, int[] modifier) {\n \t\tmodified.modify(modifier);\n \t\tem.merge(modified);\n \t\tem.getTransaction().commit();\n+\n+\t\t// this was unproxied by EM.clear() in create() below\n+\t\t// assertProxyCollection(root.getNodes(), true);\n+\t\tassertNotProxyCollection(root.getNodes());\n+\n \t\tem.clear();\n-\t\t\n-\t\tassertProxyCollection(root.getNodes(), false);\n-\t\t\n \t\tverify(root, modifier);\n \t}\n \t\n@@ -145,7 +147,11 @@ TreeNode create(int[] original) {\n \t\tem.getTransaction().begin();\n \t\tem.persist(root);\n \t\tem.getTransaction().commit();\n+\t\t// OPENJPA-1097 Fixed behavior so entities will use the proxy classes until EM.clear() is called\n+\t\tassertProxyCollection(root.getNodes(), true);\n \t\tem.clear();\n+\t\t// OPENJPA-1097 All proxies are removed after EM.clear()\n+\t\tassertNotProxyCollection(root.getNodes());\n \t\t\n \t\treturn root;\n \t}\n@@ -181,4 +187,12 @@ void assertProxyCollection(Object o, boolean tracking) {\n \t\t\tassertFalse(tracker.isTracking());\n \t\t}\n \t}\n+\n+\t/**\n+\t * Asserts that the given object is NOT a proxy collection.\n+\t */\n+\tvoid assertNotProxyCollection(Object o) {\n+\t\tassertFalse(o instanceof ProxyCollection);\n+\t}\n }\n+"}]}

