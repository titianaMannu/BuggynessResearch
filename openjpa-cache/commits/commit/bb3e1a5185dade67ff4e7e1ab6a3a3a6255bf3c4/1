{"sha":"bb3e1a5185dade67ff4e7e1ab6a3a3a6255bf3c4","node_id":"MDY6Q29tbWl0MjA2MzY0OmJiM2UxYTUxODVkYWRlNjdmZjRlN2UxYWI2YTNhM2E2MjU1YmYzYzQ=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-09-26T16:17:32Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-09-26T16:17:32Z"},"message":"OPENJPA-1253: check in test case of join table strategy for bi-directional one-to-many using Map with entity as map key\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@819163 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"224fc6062cd5ef56b5eb2d089c1d23657422d638","url":"https://api.github.com/repos/apache/openjpa/git/trees/224fc6062cd5ef56b5eb2d089c1d23657422d638"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/bb3e1a5185dade67ff4e7e1ab6a3a3a6255bf3c4","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/bb3e1a5185dade67ff4e7e1ab6a3a3a6255bf3c4","html_url":"https://github.com/apache/openjpa/commit/bb3e1a5185dade67ff4e7e1ab6a3a3a6255bf3c4","comments_url":"https://api.github.com/repos/apache/openjpa/commits/bb3e1a5185dade67ff4e7e1ab6a3a3a6255bf3c4/comments","author":null,"committer":null,"parents":[{"sha":"9eeb4b2fbd89570410fcfc165640852353b6c6d7","url":"https://api.github.com/repos/apache/openjpa/commits/9eeb4b2fbd89570410fcfc165640852353b6c6d7","html_url":"https://github.com/apache/openjpa/commit/9eeb4b2fbd89570410fcfc165640852353b6c6d7"}],"stats":{"total":160,"additions":160,"deletions":0},"files":[{"sha":"6bc0c7910ff8603b9c734606f1623e3c18b50b20","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/Bi_1ToM_Map_RelKey_JT.java","status":"added","additions":94,"deletions":0,"changes":94,"blob_url":"https://github.com/apache/openjpa/blob/bb3e1a5185dade67ff4e7e1ab6a3a3a6255bf3c4/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/Bi_1ToM_Map_RelKey_JT.java","raw_url":"https://github.com/apache/openjpa/raw/bb3e1a5185dade67ff4e7e1ab6a3a3a6255bf3c4/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/Bi_1ToM_Map_RelKey_JT.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/Bi_1ToM_Map_RelKey_JT.java?ref=bb3e1a5185dade67ff4e7e1ab6a3a3a6255bf3c4","patch":"@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.compat;\n+\n+import java.util.Map;\n+import java.util.Set;\n+\n+import javax.persistence.*;\n+\n+\n+\n+@Entity\n+public class Bi_1ToM_Map_RelKey_JT {\n+\n+    @Id\n+    @GeneratedValue\n+    private long id;\n+\n+    private String name;\n+\n+    @OneToMany(mappedBy=\"bi1mjt\", fetch=FetchType.EAGER)\n+    @JoinTable(\n+        name=\"Bi1M_Map_RelKey_JT_C\",\n+        joinColumns=\n+          @JoinColumn(name=\"C_ID\", referencedColumnName=\"ID\"),\n+          inverseJoinColumns=\n+          @JoinColumn(name=\"B_ID\", referencedColumnName=\"ID\")\n+    )\n+    private Map<EntityC, EntityC_B1M_Map_RelKey_JT> entityCs = null;\n+    \n+    public long getId() { \n+        return id; \n+    }\n+\n+    public String getName() { \n+        return name; \n+    }\n+\n+    public void setName(String name) { \n+        this.name = name; \n+    }\n+\n+    public Map<EntityC, EntityC_B1M_Map_RelKey_JT> getEntityCs() { \n+        return entityCs; \n+    }\n+\n+    public void setEntityCs(Map<EntityC, EntityC_B1M_Map_RelKey_JT> entityCs) { \n+        this.entityCs = entityCs; \n+    }\n+\n+    public int hashCode() {\n+        return name.hashCode();\n+    }\n+    \n+    public boolean equals(Object o) {\n+        if (!(o instanceof Bi_1ToM_Map_RelKey_JT)) return false;\n+        Bi_1ToM_Map_RelKey_JT b = (Bi_1ToM_Map_RelKey_JT)o;\n+        if (!b.name.equals(name)) return false;\n+        if (b.entityCs.size() != entityCs.size()) return false;\n+        Set<EntityC> coll = b.entityCs.keySet();\n+        for (EntityC cKey : coll) {\n+            Object val = getValue(b.entityCs, cKey); //b.entityCs.get(cKey);\n+            Object val1 = getValue(entityCs, cKey); //entityCs.get(cKey);\n+            if (!val.equals(val1))\n+                return false;\n+        }\n+        return true;\n+    }\n+    \n+    private Object getValue(Map map, Object mkey) {\n+        Set<Map.Entry> entries = map.entrySet();\n+        for (Map.Entry entry : entries) {\n+            if (entry.getKey().equals(mkey))\n+                return entry.getValue();\n+        }\n+        return null;\n+    }\n+}"},{"sha":"1d3315f1930b916a30a4ecaee9b9b5081147e885","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/EntityC_B1M_Map_RelKey_JT.java","status":"added","additions":66,"deletions":0,"changes":66,"blob_url":"https://github.com/apache/openjpa/blob/bb3e1a5185dade67ff4e7e1ab6a3a3a6255bf3c4/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/EntityC_B1M_Map_RelKey_JT.java","raw_url":"https://github.com/apache/openjpa/raw/bb3e1a5185dade67ff4e7e1ab6a3a3a6255bf3c4/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/EntityC_B1M_Map_RelKey_JT.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/EntityC_B1M_Map_RelKey_JT.java?ref=bb3e1a5185dade67ff4e7e1ab6a3a3a6255bf3c4","patch":"@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.compat;\n+\n+import javax.persistence.*;\n+\n+@Entity\n+public class EntityC_B1M_Map_RelKey_JT {\n+\n+    @Id\n+    @GeneratedValue\n+    private long id;\n+\n+    private String name;\n+    \n+    @ManyToOne\n+    Bi_1ToM_Map_RelKey_JT bi1mjt;\n+\n+    public long getId() { \n+        return id; \n+    }\n+\n+    public String getName() { \n+        return name; \n+    }\n+\n+    public void setName(String name) { \n+        this.name = name; \n+    }\n+\n+    public void setBi1mjt(Bi_1ToM_Map_RelKey_JT bi1mjt) {\n+        this.bi1mjt = bi1mjt;\n+    }\n+    \n+    public Bi_1ToM_Map_RelKey_JT getBi1mjt() {\n+        return bi1mjt;\n+    }\n+    \n+    public int hashCode() {\n+        return name.hashCode() + (int)id;\n+    }\n+    \n+    public boolean equals(Object o) {\n+        if (!(o instanceof EntityC_B1M_Map_RelKey_JT)) return false;\n+        EntityC_B1M_Map_RelKey_JT c = (EntityC_B1M_Map_RelKey_JT)o;\n+        if (!c.name.equals(name)) return false;\n+        if (c.id != id) return false;\n+        return true;\n+    }\n+}"}]}

