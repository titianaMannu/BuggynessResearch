{"sha":"bb527a1e882b9aff495a02b14a31231651487ef6","node_id":"MDY6Q29tbWl0MjA2MzY0OmJiNTI3YTFlODgyYjlhZmY0OTVhMDJiMTRhMzEyMzE2NTE0ODdlZjY=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-09-28T18:23:48Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-09-28T18:23:48Z"},"message":"OPENJPA-369. Committing Albert's 1.5-supporting changes.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@580451 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"beffe9f334cec10e656608332c5cc74f91e24933","url":"https://api.github.com/repos/apache/openjpa/git/trees/beffe9f334cec10e656608332c5cc74f91e24933"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/bb527a1e882b9aff495a02b14a31231651487ef6","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/bb527a1e882b9aff495a02b14a31231651487ef6","html_url":"https://github.com/apache/openjpa/commit/bb527a1e882b9aff495a02b14a31231651487ef6","comments_url":"https://api.github.com/repos/apache/openjpa/commits/bb527a1e882b9aff495a02b14a31231651487ef6/comments","author":null,"committer":null,"parents":[{"sha":"a92418ddd6d486cff60d3c377dda16149ca2297c","url":"https://api.github.com/repos/apache/openjpa/commits/a92418ddd6d486cff60d3c377dda16149ca2297c","html_url":"https://github.com/apache/openjpa/commit/a92418ddd6d486cff60d3c377dda16149ca2297c"}],"stats":{"total":291,"additions":194,"deletions":97},"files":[{"sha":"fc6213ea6385915f32bc274bdd86d01fa231ad3c","filename":"openjpa-kernel-5/pom.xml","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/bb527a1e882b9aff495a02b14a31231651487ef6/openjpa-kernel-5/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/bb527a1e882b9aff495a02b14a31231651487ef6/openjpa-kernel-5/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel-5/pom.xml?ref=bb527a1e882b9aff495a02b14a31231651487ef6","patch":"@@ -39,6 +39,12 @@\n             <version>${pom.version}</version>\n             <scope>compile</scope>\n         </dependency>\n+        <dependency>\n+            <groupId>org.apache.openjpa</groupId>\n+            <artifactId>openjpa-lib-5</artifactId>\n+            <version>${pom.version}</version>\n+            <scope>compile</scope>\n+        </dependency>\n     </dependencies>\n     <build>\n         <plugins>"},{"sha":"36480b01642a644cb7c15c98540f1aed34dbe485","filename":"openjpa-lib-5/pom.xml","status":"added","additions":55,"deletions":0,"changes":55,"blob_url":"https://github.com/apache/openjpa/blob/bb527a1e882b9aff495a02b14a31231651487ef6/openjpa-lib-5/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/bb527a1e882b9aff495a02b14a31231651487ef6/openjpa-lib-5/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib-5/pom.xml?ref=bb527a1e882b9aff495a02b14a31231651487ef6","patch":"@@ -0,0 +1,55 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n+<!--\r\n+ Licensed to the Apache Software Foundation (ASF) under one\r\n+ or more contributor license agreements.  See the NOTICE file\r\n+ distributed with this work for additional information\r\n+ regarding copyright ownership.  The ASF licenses this file\r\n+ to you under the Apache License, Version 2.0 (the\r\n+ \"License\"); you may not use this file except in compliance\r\n+ with the License.  You may obtain a copy of the License at\r\n+\r\n+ http://www.apache.org/licenses/LICENSE-2.0\r\n+\r\n+ Unless required by applicable law or agreed to in writing,\r\n+ software distributed under the License is distributed on an\r\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ KIND, either express or implied.  See the License for the\r\n+ specific language governing permissions and limitations\r\n+ under the License.\r\n+-->\r\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\r\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\r\n+    <modelVersion>4.0.0</modelVersion>\r\n+    <groupId>org.apache.openjpa</groupId>\r\n+    <artifactId>openjpa-lib-5</artifactId>\r\n+    <packaging>jar</packaging>\r\n+    <name>OpenJPA Utilities 1.5</name>\r\n+    <description>OpenJPA Utilities 1.5</description>\r\n+    <url>http://openjpa.apache.org</url>\r\n+    <parent>\r\n+        <groupId>org.apache.openjpa</groupId>\r\n+        <artifactId>openjpa-parent</artifactId>\r\n+        <version>1.1.0-SNAPSHOT</version>\r\n+    </parent>\r\n+    <dependencies>\r\n+        <dependency>\r\n+            <groupId>org.apache.openjpa</groupId>\r\n+            <artifactId>openjpa-lib</artifactId>\r\n+            <version>${pom.version}</version>\r\n+            <scope>compile</scope>\r\n+        </dependency>\r\n+    </dependencies>\r\n+    <build>\r\n+        <plugins>\r\n+            <plugin>\r\n+                <groupId>org.apache.maven.plugins</groupId>\r\n+                <artifactId>maven-compiler-plugin</artifactId>\r\n+                <configuration>\r\n+                    <source>1.5</source>\r\n+                    <target>1.5</target>\r\n+                </configuration>\r\n+            </plugin>\r\n+        </plugins>\r\n+    </build>\r\n+</project>\r"},{"sha":"cf42913f326e999026c7fabdd31bedc25b4bf8ba","filename":"openjpa-lib-5/src/main/java/org/apache/openjpa/lib/util/J2DoPriv5Helper.java","status":"added","additions":92,"deletions":0,"changes":92,"blob_url":"https://github.com/apache/openjpa/blob/bb527a1e882b9aff495a02b14a31231651487ef6/openjpa-lib-5/src/main/java/org/apache/openjpa/lib/util/J2DoPriv5Helper.java","raw_url":"https://github.com/apache/openjpa/raw/bb527a1e882b9aff495a02b14a31231651487ef6/openjpa-lib-5/src/main/java/org/apache/openjpa/lib/util/J2DoPriv5Helper.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib-5/src/main/java/org/apache/openjpa/lib/util/J2DoPriv5Helper.java?ref=bb527a1e882b9aff495a02b14a31231651487ef6","patch":"@@ -0,0 +1,92 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.lib.util;\r\n+\r\n+import java.lang.reflect.AnnotatedElement;\r\n+import java.security.PrivilegedAction;\r\n+\r\n+/**\r\n+ * Helper class to obtain the Privilege(Exception)Action object to perform\r\n+ * Java 2 doPrivilege security sensitive function call in the following\r\n+ * methods:\r\n+ * <ul>\r\n+ * <li>AnnotatedElement.getAnnotations\r\n+ * <li>AnnotatedElement.getDeclaredAnnotations\r\n+ * <li>AnnotatedElement.isAnnotationPresent\r\n+ * </ul>\r\n+ *\r\n+ * @author Albert Lee\r\n+ */\r\n+\r\n+public abstract class J2DoPriv5Helper extends J2DoPrivHelper {\r\n+\r\n+    /**\r\n+     * Return a PrivilegeAction object for AnnotatedElement.getAnnotations().\r\n+     *\r\n+     * Requires security policy:\r\n+     *   'permission java.lang.RuntimePermission \"accessDeclaredMembers\";'\r\n+     *\r\n+     * @return Annotation[]\r\n+     */\r\n+    public static final PrivilegedAction getAnnotationsAction(\r\n+        final AnnotatedElement element) {\r\n+        return new PrivilegedAction() {\r\n+            public Object run() {\r\n+                return element.getAnnotations();\r\n+            }\r\n+        };\r\n+    }\r\n+\r\n+    /**\r\n+     * Return a PrivilegeAction object for\r\n+     *   AnnotatedElement.getDeclaredAnnotations().\r\n+     *\r\n+     * Requires security policy:\r\n+     *   'permission java.lang.RuntimePermission \"accessDeclaredMembers\";'\r\n+     *\r\n+     * @return Annotation[]\r\n+     */\r\n+    public static final PrivilegedAction getDeclaredAnnotationsAction(\r\n+        final AnnotatedElement element) {\r\n+        return new PrivilegedAction() {\r\n+            public Object run() {\r\n+                return element.getDeclaredAnnotations();\r\n+            }\r\n+        };\r\n+    }\r\n+\r\n+    /**\r\n+     * Return a PrivilegeAction object for\r\n+     *   AnnotatedElement.isAnnotationPresent().\r\n+     *\r\n+     * Requires security policy:\r\n+     *   'permission java.lang.RuntimePermission \"accessDeclaredMembers\";'\r\n+     *\r\n+     * @return Boolean\r\n+     */\r\n+    public static final PrivilegedAction isAnnotationPresentAction(\r\n+        final AnnotatedElement element, final Class annotationClazz) {\r\n+        return new PrivilegedAction() {\r\n+            public Object run() {\r\n+                return element.isAnnotationPresent(annotationClazz)\r\n+                    ? Boolean.TRUE : Boolean.FALSE;\r\n+            }\r\n+        };\r\n+    }\r\n+}\r"},{"sha":"a9d9b42866e01b2b7aa3bfb10f1f526883b08cb0","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/J2DoPrivHelper.java","status":"modified","additions":0,"deletions":58,"changes":58,"blob_url":"https://github.com/apache/openjpa/blob/bb527a1e882b9aff495a02b14a31231651487ef6/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/J2DoPrivHelper.java","raw_url":"https://github.com/apache/openjpa/raw/bb527a1e882b9aff495a02b14a31231651487ef6/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/J2DoPrivHelper.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/J2DoPrivHelper.java?ref=bb527a1e882b9aff495a02b14a31231651487ef6","patch":"@@ -24,7 +24,6 @@\n import java.io.FileOutputStream;\n import java.io.IOException;\n import java.lang.reflect.AccessibleObject;\n-import java.lang.reflect.AnnotatedElement;\n import java.net.InetAddress;\n import java.net.MalformedURLException;\n import java.net.ServerSocket;\n@@ -49,9 +48,6 @@\n  * methods:\n  * <ul>\n  * <li>AccessibleObject.setAccessible\n- * <li>AnnotatedElement.getAnnotations\n- * <li>AnnotatedElement.getDeclaredAnnotations\n- * <li>AnnotatedElement.isAnnotationPresent\n  * <li>Class.forName\n  * <li>Class.getClassLoader\n  * <li>Class.getDeclaredField\n@@ -328,60 +324,6 @@ public Object run() {\n         };\n     }\n \n-    /**\n-     * Return a PrivilegeAction object for AnnotatedElement.getAnnotations().\n-     * \n-     * Requires security policy:\n-     *   'permission java.lang.RuntimePermission \"accessDeclaredMembers\";'\n-     * \n-     * @return Annotation[]\n-     */\n-    public static final PrivilegedAction getAnnotationsAction(\n-        final AnnotatedElement element) {\n-        return new PrivilegedAction() {\n-            public Object run() {\n-                return element.getAnnotations();\n-            }\n-        };\n-    }\n-\n-    /**\n-     * Return a PrivilegeAction object for \n-     *   AnnotatedElement.getDeclaredAnnotations().\n-     * \n-     * Requires security policy:\n-     *   'permission java.lang.RuntimePermission \"accessDeclaredMembers\";'\n-     * \n-     * @return Annotation[]\n-     */\n-    public static final PrivilegedAction getDeclaredAnnotationsAction(\n-        final AnnotatedElement element) {\n-        return new PrivilegedAction() {\n-            public Object run() {\n-                return element.getDeclaredAnnotations();\n-            }\n-        };\n-    }\n-\n-    /**\n-     * Return a PrivilegeAction object for\n-     *   AnnotatedElement.isAnnotationPresent().\n-     * \n-     * Requires security policy:\n-     *   'permission java.lang.RuntimePermission \"accessDeclaredMembers\";'\n-     * \n-     * @return Boolean\n-     */\n-    public static final PrivilegedAction isAnnotationPresentAction(\n-        final AnnotatedElement element, final Class annotationClazz) {\n-        return new PrivilegedAction() {\n-            public Object run() {\n-                return element.isAnnotationPresent(annotationClazz)\n-                    ? Boolean.TRUE : Boolean.FALSE;\n-            }\n-        };\n-    }\n-\n     /**\n      * Return a PrivilegedExceptionAction object for clazz.newInstance().\n      * "},{"sha":"37a6d22aed1e0a7e3ffff59e7ff08d7c3b44990a","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/bb527a1e882b9aff495a02b14a31231651487ef6/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java","raw_url":"https://github.com/apache/openjpa/raw/bb527a1e882b9aff495a02b14a31231651487ef6/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java?ref=bb527a1e882b9aff495a02b14a31231651487ef6","patch":"@@ -75,7 +75,7 @@\n import org.apache.openjpa.jdbc.schema.Unique;\n import org.apache.openjpa.jdbc.sql.DBDictionary;\n import org.apache.openjpa.lib.log.Log;\n-import org.apache.openjpa.lib.util.J2DoPrivHelper;\n+import org.apache.openjpa.lib.util.J2DoPriv5Helper;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.meta.FieldMetaData;\n@@ -1060,7 +1060,7 @@ protected void parseColumns(FieldMapping fm,\n             \n             if (xmlTypeClass != null\n                 && StringUtils.isEmpty(pcols[i].columnDefinition())\n-                && ((Boolean) AccessController.doPrivileged(J2DoPrivHelper\n+                && ((Boolean) AccessController.doPrivileged(J2DoPriv5Helper\n                     .isAnnotationPresentAction(fm.getDeclaredType(),\n                         xmlTypeClass))).booleanValue()) {\n                 DBDictionary dict = ((MappingRepository) getRepository())"},{"sha":"e188fc2f6b5be90d2d404510e84106d1d24f3512","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","status":"modified","additions":14,"deletions":13,"changes":27,"blob_url":"https://github.com/apache/openjpa/blob/bb527a1e882b9aff495a02b14a31231651487ef6/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/bb527a1e882b9aff495a02b14a31231651487ef6/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java?ref=bb527a1e882b9aff495a02b14a31231651487ef6","patch":"@@ -87,7 +87,7 @@\n import org.apache.openjpa.kernel.jpql.JPQLParser;\n import org.apache.openjpa.lib.conf.Configurations;\n import org.apache.openjpa.lib.log.Log;\n-import org.apache.openjpa.lib.util.J2DoPrivHelper;\n+import org.apache.openjpa.lib.util.J2DoPriv5Helper;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.meta.DelegatingMetaDataFactory;\n@@ -465,12 +465,12 @@ private ClassMetaData parseClassAnnotations() {\n         // check immediately whether the user is using any annotations,\n         // regardless of mode.  this prevents adding non-entity classes to\n         // repository if we're ignoring these annotations in mapping mode\n-        if (!((Boolean) AccessController.doPrivileged(J2DoPrivHelper\n+        if (!((Boolean) AccessController.doPrivileged(J2DoPriv5Helper\n             .isAnnotationPresentAction(_cls, Entity.class))).booleanValue()\n-            && !((Boolean) AccessController.doPrivileged(J2DoPrivHelper\n+            && !((Boolean) AccessController.doPrivileged(J2DoPriv5Helper\n                 .isAnnotationPresentAction(_cls, Embeddable.class)))\n                 .booleanValue()\n-            && !((Boolean) AccessController.doPrivileged(J2DoPrivHelper\n+            && !((Boolean) AccessController.doPrivileged(J2DoPriv5Helper\n                 .isAnnotationPresentAction(_cls, MappedSuperclass.class)))\n                 .booleanValue())\n             return null;\n@@ -669,17 +669,17 @@ protected File getSourceFile() {\n \n         String rsrc = StringUtils.replace(cls.getName(), \".\", \"/\");\n         ClassLoader loader = (ClassLoader) AccessController.doPrivileged(\n-            J2DoPrivHelper.getClassLoaderAction(cls)); \n+            J2DoPriv5Helper.getClassLoaderAction(cls)); \n         if (loader == null)\n             loader = (ClassLoader) AccessController.doPrivileged(\n-                J2DoPrivHelper.getSystemClassLoaderAction()); \n+                J2DoPriv5Helper.getSystemClassLoaderAction()); \n         if (loader == null)\n             return null;\n         URL url = (URL) AccessController.doPrivileged(\n-            J2DoPrivHelper.getResourceAction(loader, rsrc + \".java\")); \n+            J2DoPriv5Helper.getResourceAction(loader, rsrc + \".java\")); \n         if (url == null) {\n             url = (URL) AccessController.doPrivileged(\n-                J2DoPrivHelper.getResourceAction(loader, rsrc + \".class\")); \n+                J2DoPriv5Helper.getResourceAction(loader, rsrc + \".class\")); \n             if (url == null)\n                 return null;\n         }\n@@ -764,10 +764,10 @@ else if (StringUtils.isEmpty(detached.fieldName()))\n                 meta.setDetachedState(detached.fieldName());\n         } else {\n             Field[] fields = (Field[]) AccessController.doPrivileged(\n-                J2DoPrivHelper.getDeclaredFieldsAction(\n+                J2DoPriv5Helper.getDeclaredFieldsAction(\n                     meta.getDescribedType())); \n             for (int i = 0; i < fields.length; i++)\n-                if (((Boolean) AccessController.doPrivileged(J2DoPrivHelper\n+                if (((Boolean) AccessController.doPrivileged(J2DoPriv5Helper\n                     .isAnnotationPresentAction(fields[i], DetachedState.class)))\n                     .booleanValue())\n                     meta.setDetachedState(fields[i].getName());\n@@ -808,7 +808,7 @@ else if (StringUtils.isEmpty(detached.fieldName()))\n         Set<MethodKey> seen = new HashSet<MethodKey>();\n         do {\n             for (Method m : (Method[]) AccessController.doPrivileged(\n-                J2DoPrivHelper.getDeclaredMethodsAction(sup))) {\n+                J2DoPriv5Helper.getDeclaredMethodsAction(sup))) {\n                 mods = m.getModifiers();\n                 if (Modifier.isStatic(mods) || Modifier.isFinal(mods) ||\n                     Object.class.equals(m.getDeclaringClass()))\n@@ -826,7 +826,8 @@ else if (StringUtils.isEmpty(detached.fieldName()))\n         MetaDataDefaults def = repos.getMetaDataFactory().getDefaults();\n         for (Method m : methods) {\n             for (Annotation anno : (Annotation[]) AccessController\n-                .doPrivileged(J2DoPrivHelper.getDeclaredAnnotationsAction(m))) {\n+                .doPrivileged(J2DoPriv5Helper\n+                    .getDeclaredAnnotationsAction(m))) {\n                 MetaDataTag tag = _tags.get(anno.annotationType());\n                 if (tag == null)\n                     continue;\n@@ -964,7 +965,7 @@ private void parseMemberAnnotations(FieldMetaData fmd) {\n         fmd.setExplicit(true);\n \n         AnnotatedElement el = (AnnotatedElement) member;\n-        boolean lob = ((Boolean) AccessController.doPrivileged(J2DoPrivHelper\n+        boolean lob = ((Boolean) AccessController.doPrivileged(J2DoPriv5Helper\n             .isAnnotationPresentAction(el, Lob.class))).booleanValue();\n         if (isMetaDataMode()) {\n             switch (pstrat) {"},{"sha":"f9e0c00fdeac8a806e2c596c37178b8a954e5497","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceXMLMetaDataParser.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/bb527a1e882b9aff495a02b14a31231651487ef6/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceXMLMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/bb527a1e882b9aff495a02b14a31231651487ef6/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceXMLMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceXMLMetaDataParser.java?ref=bb527a1e882b9aff495a02b14a31231651487ef6","patch":"@@ -27,7 +27,7 @@\n import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.lib.log.Log;\n-import org.apache.openjpa.lib.util.J2DoPrivHelper;\n+import org.apache.openjpa.lib.util.J2DoPriv5Helper;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.meta.DelegatingMetaDataFactory;\n import org.apache.openjpa.meta.FieldMetaData;\n@@ -173,10 +173,10 @@ public void parse(FieldMetaData fmd) {\n     private XMLMetaData parseXMLClassAnnotations() {\n         // check immediately whether the class has JAXB XML annotations\n         if (_cls == null || xmlTypeClass == null\n-            || !(((Boolean) AccessController.doPrivileged(J2DoPrivHelper\n+            || !(((Boolean) AccessController.doPrivileged(J2DoPriv5Helper\n                 .isAnnotationPresentAction(_cls, xmlTypeClass))).booleanValue()\n                 && ((Boolean) AccessController\n-                .doPrivileged(J2DoPrivHelper.isAnnotationPresentAction(_cls,\n+                .doPrivileged(J2DoPriv5Helper.isAnnotationPresentAction(_cls,\n                     xmlRootElementClass))).booleanValue()))\n             return null;\n \n@@ -225,7 +225,7 @@ private void populateFromReflection(Class cls, XMLMetaData meta) {\n         Class superclass = cls.getSuperclass();\n \n         // handle inheritance at sub-element level\n-        if (((Boolean) AccessController.doPrivileged(J2DoPrivHelper\n+        if (((Boolean) AccessController.doPrivileged(J2DoPriv5Helper\n             .isAnnotationPresentAction(superclass, xmlTypeClass)))\n             .booleanValue())\n             populateFromReflection(superclass, meta);\n@@ -247,7 +247,7 @@ private void populateFromReflection(Class cls, XMLMetaData meta) {\n                     // avoid JAXB XML bind default name\n                     if (StringUtils.equals(XMLMetaData.defaultName, xmlname))\n                         xmlname = member.getName();\n-                    if (((Boolean) AccessController.doPrivileged(J2DoPrivHelper\n+                    if (((Boolean) AccessController.doPrivileged(J2DoPriv5Helper\n                         .isAnnotationPresentAction(((Field) member).getType(),\n                             xmlTypeClass))).booleanValue()) {\n                         field = _repos.addXMLMetaData(((Field) member).getType()"},{"sha":"83e00b7e13bb0e197fd68a656927d22930f31def","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataDefaults.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/bb527a1e882b9aff495a02b14a31231651487ef6/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataDefaults.java","raw_url":"https://github.com/apache/openjpa/raw/bb527a1e882b9aff495a02b14a31231651487ef6/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataDefaults.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataDefaults.java?ref=bb527a1e882b9aff495a02b14a31231651487ef6","patch":"@@ -48,7 +48,7 @@\n import javax.persistence.Transient;\n \n import org.apache.commons.lang.StringUtils;\n-import org.apache.openjpa.lib.util.J2DoPrivHelper;\n+import org.apache.openjpa.lib.util.J2DoPriv5Helper;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.meta.AbstractMetaDataDefaults;\n@@ -116,7 +116,7 @@ public PersistenceMetaDataDefaults() {\n         if (member == null)\n             return null;\n         AnnotatedElement el = (AnnotatedElement) member;\n-        if (((Boolean) AccessController.doPrivileged(J2DoPrivHelper\n+        if (((Boolean) AccessController.doPrivileged(J2DoPriv5Helper\n             .isAnnotationPresentAction(el, Transient.class))).booleanValue())\n             return TRANSIENT;\n         if (fmd != null\n@@ -183,7 +183,7 @@ public PersistenceMetaDataDefaults() {\n         }\n \n         //### EJB3: what if defined in XML?\n-        if (((Boolean) AccessController.doPrivileged(J2DoPrivHelper\n+        if (((Boolean) AccessController.doPrivileged(J2DoPriv5Helper\n             .isAnnotationPresentAction(type, Embeddable.class))).booleanValue())\n             return EMBEDDED;\n         if (Serializable.class.isAssignableFrom(type))\n@@ -258,10 +258,10 @@ private int getAccessType(Class cls) {\n \n         int access = 0;\n         if (usesAccess((Field[]) AccessController.doPrivileged(\n-            J2DoPrivHelper.getDeclaredFieldsAction(cls))))\n+            J2DoPriv5Helper.getDeclaredFieldsAction(cls))))\n             access |= ClassMetaData.ACCESS_FIELD;\n         if (usesAccess((Method[]) AccessController.doPrivileged(\n-            J2DoPrivHelper.getDeclaredMethodsAction(cls))))\n+            J2DoPriv5Helper.getDeclaredMethodsAction(cls))))\n             access |= ClassMetaData.ACCESS_PROPERTY;\n         return (access == 0) ? getAccessType(cls.getSuperclass()) : access;\n     }\n@@ -273,7 +273,7 @@ private static boolean usesAccess(AnnotatedElement[] members) {\n         Annotation[] annos;\n         String name;\n         for (int i = 0; i < members.length; i++) {\n-            annos = (Annotation[]) AccessController.doPrivileged(J2DoPrivHelper\n+            annos = (Annotation[]) AccessController.doPrivileged(J2DoPriv5Helper\n                 .getAnnotationsAction(members[i]));\n             for (int j = 0; j < annos.length; j++) {\n                 name = annos[j].annotationType().getName();\n@@ -296,7 +296,7 @@ protected boolean isDefaultPersistent(ClassMetaData meta, Member member,\n             try {\n                 // check for setters for methods\n                 Method setter = (Method) AccessController.doPrivileged(\n-                    J2DoPrivHelper.getDeclaredMethodAction(\n+                    J2DoPriv5Helper.getDeclaredMethodAction(\n                         meta.getDescribedType(), \"set\" +\n                         StringUtils.capitalize(name), new Class[] { \n                             ((Method) member).getReturnType() }));\n@@ -320,7 +320,7 @@ protected boolean isDefaultPersistent(ClassMetaData meta, Member member,\n \n     private boolean isAnnotatedTransient(Member member) {\n         return member instanceof AnnotatedElement\n-            && ((Boolean) AccessController.doPrivileged(J2DoPrivHelper\n+            && ((Boolean) AccessController.doPrivileged(J2DoPriv5Helper\n                 .isAnnotationPresentAction(((AnnotatedElement) member),\n                     Transient.class))).booleanValue();\n     }"},{"sha":"c2325704097299ec0e819926b3be7e4035bb4a8d","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataFactory.java","status":"modified","additions":11,"deletions":11,"changes":22,"blob_url":"https://github.com/apache/openjpa/blob/bb527a1e882b9aff495a02b14a31231651487ef6/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataFactory.java","raw_url":"https://github.com/apache/openjpa/raw/bb527a1e882b9aff495a02b14a31231651487ef6/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataFactory.java?ref=bb527a1e882b9aff495a02b14a31231651487ef6","patch":"@@ -32,10 +32,10 @@\n import javax.persistence.Embeddable;\n import javax.persistence.Entity;\n import javax.persistence.MappedSuperclass;\n-import javax.persistence.NamedQueries;\n-import javax.persistence.NamedQuery;\n import javax.persistence.NamedNativeQueries;\n import javax.persistence.NamedNativeQuery;\n+import javax.persistence.NamedQueries;\n+import javax.persistence.NamedQuery;\n import javax.persistence.SqlResultSetMapping;\n import javax.persistence.SqlResultSetMappings;\n \n@@ -46,7 +46,7 @@\n import org.apache.openjpa.lib.meta.ClassArgParser;\n import org.apache.openjpa.lib.meta.MetaDataFilter;\n import org.apache.openjpa.lib.meta.MetaDataParser;\n-import org.apache.openjpa.lib.util.J2DoPrivHelper;\n+import org.apache.openjpa.lib.util.J2DoPriv5Helper;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.lib.util.Options;\n import org.apache.openjpa.meta.AbstractCFMetaDataFactory;\n@@ -293,24 +293,24 @@ public Class getQueryScope(String queryName, ClassLoader loader) {\n             return null;\n         Collection classes = repos.loadPersistentTypes(false, loader);\n         for (Class cls : (Collection<Class>) classes) {\n-            if (((Boolean) AccessController.doPrivileged(J2DoPrivHelper\n+            if (((Boolean) AccessController.doPrivileged(J2DoPriv5Helper\n                 .isAnnotationPresentAction(cls, NamedQuery.class)))\n                 .booleanValue() && hasNamedQuery\n                 (queryName, (NamedQuery) cls.getAnnotation(NamedQuery.class)))\n                 return cls;\n-            if (((Boolean) AccessController.doPrivileged(J2DoPrivHelper\n+            if (((Boolean) AccessController.doPrivileged(J2DoPriv5Helper\n                 .isAnnotationPresentAction(cls, NamedQueries.class)))\n                 .booleanValue() &&\n                 hasNamedQuery(queryName, ((NamedQueries) cls.\n                     getAnnotation(NamedQueries.class)).value()))\n                 return cls;\n-            if (((Boolean) AccessController.doPrivileged(J2DoPrivHelper\n+            if (((Boolean) AccessController.doPrivileged(J2DoPriv5Helper\n                 .isAnnotationPresentAction(cls, NamedNativeQuery.class)))\n                 .booleanValue() &&\n                 hasNamedNativeQuery(queryName, (NamedNativeQuery) cls.\n                     getAnnotation(NamedNativeQuery.class)))\n                 return cls;\n-            if (((Boolean) AccessController.doPrivileged(J2DoPrivHelper\n+            if (((Boolean) AccessController.doPrivileged(J2DoPriv5Helper\n                 .isAnnotationPresentAction(cls, NamedNativeQueries.class)))\n                 .booleanValue() &&\n                 hasNamedNativeQuery(queryName, ((NamedNativeQueries) cls.\n@@ -329,14 +329,14 @@ public Class getResultSetMappingScope(String rsMappingName,\n         Collection classes = repos.loadPersistentTypes(false, loader);\n         for (Class cls : (Collection<Class>) classes) {\n \n-            if (((Boolean) AccessController.doPrivileged(J2DoPrivHelper\n+            if (((Boolean) AccessController.doPrivileged(J2DoPriv5Helper\n                 .isAnnotationPresentAction(cls, SqlResultSetMapping.class)))\n                 .booleanValue() &&\n                 hasRSMapping(rsMappingName, (SqlResultSetMapping) cls.\n                 getAnnotation(SqlResultSetMapping.class)))\n                 return cls;\n \n-            if (((Boolean) AccessController.doPrivileged(J2DoPrivHelper\n+            if (((Boolean) AccessController.doPrivileged(J2DoPriv5Helper\n                 .isAnnotationPresentAction(cls, SqlResultSetMappings.class)))\n                 .booleanValue() &&\n                 hasRSMapping(rsMappingName, ((SqlResultSetMappings) cls.\n@@ -458,11 +458,11 @@ private File defaultXMLFile() {\n         ClassLoader loader = repos.getConfiguration().\n             getClassResolverInstance().getClassLoader(getClass(), null);\n         URL rsrc = (URL) AccessController.doPrivileged(\n-            J2DoPrivHelper.getResourceAction(loader, \"META-INF/orm.xml\"));\n+            J2DoPriv5Helper.getResourceAction(loader, \"META-INF/orm.xml\"));\n         if (rsrc != null) {\n             File file = new File(rsrc.getFile());\n             if (((Boolean) AccessController.doPrivileged(\n-                J2DoPrivHelper.existsAction(file))).booleanValue())\n+                J2DoPriv5Helper.existsAction(file))).booleanValue())\n                 return file;\n         }\n         return new File(\"orm.xml\");"},{"sha":"b47ab4298e0b69d3357fbc9caa06e695a805a58f","filename":"pom.xml","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/bb527a1e882b9aff495a02b14a31231651487ef6/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/bb527a1e882b9aff495a02b14a31231651487ef6/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/pom.xml?ref=bb527a1e882b9aff495a02b14a31231651487ef6","patch":"@@ -96,6 +96,7 @@\n                 <jdk>1.5</jdk>\n             </activation>\n             <modules>\n+                <module>openjpa-lib-5</module>\n                 <module>openjpa-persistence</module>\n                 <module>openjpa-persistence-jdbc</module>\n                 <module>openjpa-kernel-5</module>"}]}

