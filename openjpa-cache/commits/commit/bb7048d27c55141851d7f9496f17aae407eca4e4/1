{"sha":"bb7048d27c55141851d7f9496f17aae407eca4e4","node_id":"MDY6Q29tbWl0MjA2MzY0OmJiNzA0OGQyN2M1NTE0MTg1MWQ3Zjk0OTZmMTdhYWU0MDdlY2E0ZTQ=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-08-21T19:55:09Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-08-21T19:55:09Z"},"message":"OPENJPA-1200: \nDiscriminator column ignored for in select statement for OneToMany relationships.\nSubmitted By : Ravi Palacherla\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@806693 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2adf538741fd9346a468fc2638830c0d6a498d62","url":"https://api.github.com/repos/apache/openjpa/git/trees/2adf538741fd9346a468fc2638830c0d6a498d62"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/bb7048d27c55141851d7f9496f17aae407eca4e4","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/bb7048d27c55141851d7f9496f17aae407eca4e4","html_url":"https://github.com/apache/openjpa/commit/bb7048d27c55141851d7f9496f17aae407eca4e4","comments_url":"https://api.github.com/repos/apache/openjpa/commits/bb7048d27c55141851d7f9496f17aae407eca4e4/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"2615a9b42666e867c50cf5537c91e6f2f4b58908","url":"https://api.github.com/repos/apache/openjpa/commits/2615a9b42666e867c50cf5537c91e6f2f4b58908","html_url":"https://github.com/apache/openjpa/commit/2615a9b42666e867c50cf5537c91e6f2f4b58908"}],"stats":{"total":418,"additions":410,"deletions":8},"files":[{"sha":"fa0d877101bcc65f4f3ebcfab9507b73451059b5","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","status":"modified","additions":30,"deletions":8,"changes":38,"blob_url":"https://github.com/apache/openjpa/blob/bb7048d27c55141851d7f9496f17aae407eca4e4/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/bb7048d27c55141851d7f9496f17aae407eca4e4/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java?ref=bb7048d27c55141851d7f9496f17aae407eca4e4","patch":"@@ -41,6 +41,7 @@\n import org.apache.openjpa.jdbc.meta.Discriminator;\n import org.apache.openjpa.jdbc.meta.FieldMapping;\n import org.apache.openjpa.jdbc.meta.ValueMapping;\n+import org.apache.openjpa.jdbc.meta.strats.SuperclassDiscriminatorStrategy;\n import org.apache.openjpa.jdbc.sql.DBDictionary;\n import org.apache.openjpa.jdbc.sql.JoinSyntaxes;\n import org.apache.openjpa.jdbc.sql.Joins;\n@@ -1050,15 +1051,11 @@ public boolean select(Select sel, ClassMapping mapping, int subs,\n         OpenJPAStateManager sm, BitSet fields, JDBCFetchConfiguration fetch,\n         int eager, boolean ident, boolean outer) {\n         // add class conditions so that they're cloned for any batched selects\n-        boolean joinedSupers = false;\n-        if ((sm == null || sm.getPCState() == PCState.TRANSIENT)\n-            && (subs == Select.SUBS_JOINABLE || subs == Select.SUBS_NONE)) {\n-            loadSubclasses(mapping); \n-            Joins joins = (outer) ? sel.newOuterJoins() : null;\n-            joinedSupers = mapping.getDiscriminator().addClassConditions(sel,\n-                subs == Select.SUBS_JOINABLE, joins);\n+        boolean joinedSupers = false;    \n+        if(needClassCondition(mapping, subs, sm)) {\n+            joinedSupers = getJoinedSupers(sel, mapping, subs, outer);\n         }\n-\n+        \n         // create all our eager selects so that those fields are reserved\n         // and cannot be reused during the actual eager select process,\n         // preventing infinite recursion\n@@ -1087,6 +1084,31 @@ public boolean select(Select sel, ClassMapping mapping, int subs,\n         return seld > 0;\n     }\n \n+    private boolean getJoinedSupers(Select sel, ClassMapping mapping, int subs, boolean outer) {\n+        loadSubclasses(mapping); \n+        Joins joins = (outer) ? sel.newOuterJoins() : null;\n+        return mapping.getDiscriminator().addClassConditions(sel, subs == Select.SUBS_JOINABLE, joins);\n+    }\n+    \n+    private boolean needClassCondition(ClassMapping mapping, int subs,\n+        OpenJPAStateManager sm) {\n+        boolean retVal = false;\n+        if(sm == null || sm.getPCState() == PCState.TRANSIENT) {\n+            if(subs == Select.SUBS_JOINABLE || subs == Select.SUBS_NONE) {\n+                retVal = true;\n+            }\n+            else {\n+                if (mapping.getDiscriminator() != null\n+                    && SuperclassDiscriminatorStrategy.class.isInstance(mapping.getDiscriminator().getStrategy())\n+                    && mapping.getMappingRepository().getConfiguration().getCompatibilityInstance()\n+                        .getSuperclassDiscriminatorStrategyByDefault()) {\n+                    retVal = true;\n+                }\n+            }\n+        }\n+        return retVal;\n+    }\n+    \n     /**\n      * Mark the fields of this mapping as reserved so that eager fetches can't\n      * get into infinite recursive situations."},{"sha":"90e2a76d8134ffd692de68f407fada53aaf0c5e9","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java","status":"modified","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/bb7048d27c55141851d7f9496f17aae407eca4e4/openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java","raw_url":"https://github.com/apache/openjpa/raw/bb7048d27c55141851d7f9496f17aae407eca4e4/openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java?ref=bb7048d27c55141851d7f9496f17aae407eca4e4","patch":"@@ -61,6 +61,7 @@\n     private boolean _copyOnDetach = false;\n     private boolean _privatePersistentProperties = false;\n     private boolean _autoOff = true;\n+    private boolean _superclassDiscriminatorStrategyByDefault = true;\n     \n     /**\n      * Whether to require exact identity value types when creating object\n@@ -93,6 +94,22 @@ public boolean getAutoOff() {\n     public void setAutoOff(boolean autoOff) {\n         _autoOff = autoOff;\n     }\n+    \n+    /**\n+     * Whether to add class criteria for super class discreminator strategy.\n+     * Defaults to false.\n+     */\n+    public boolean getSuperclassDiscriminatorStrategyByDefault() {\n+        return _superclassDiscriminatorStrategyByDefault;\n+    }\n+\n+    /**\n+     * Whether to add class criteria for super class discreminator strategy.\n+     * Defaults to false.\n+     */\n+    public void setSuperclassDiscriminatorStrategyByDefault(boolean superclassDiscriminatorStrategyByDefault) {\n+        _superclassDiscriminatorStrategyByDefault = superclassDiscriminatorStrategyByDefault;\n+    }\n \n     /**\n      * Whether to interpret quoted numbers in query strings as numbers.\n@@ -403,3 +420,4 @@ public void setPrivatePersistentProperties(boolean privateProps) {\n         _privatePersistentProperties = privateProps;\n     }    \n }\n+"},{"sha":"4086314ad995aa428f1c5a3c0191407b99bc8054","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/persistence/classcriteria/Artist.java","status":"added","additions":76,"deletions":0,"changes":76,"blob_url":"https://github.com/apache/openjpa/blob/bb7048d27c55141851d7f9496f17aae407eca4e4/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/persistence/classcriteria/Artist.java","raw_url":"https://github.com/apache/openjpa/raw/bb7048d27c55141851d7f9496f17aae407eca4e4/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/persistence/classcriteria/Artist.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/persistence/classcriteria/Artist.java?ref=bb7048d27c55141851d7f9496f17aae407eca4e4","patch":"@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.jdbc.persistence.classcriteria;\n+\n+import java.util.Collection;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.Id;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name = \"ARTIST\")\n+public class Artist {\n+    @Id\n+    @Column(name = \"NAME\")\n+    private String name;\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        if (name == null || name.trim().length() == 0)\n+            throw new IllegalArgumentException(\"null or empty name not allowed\");\n+        this.name = name;\n+    }\n+\n+    @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.EAGER, mappedBy = \"artist1\")\n+    public Collection<Book> books;\n+\n+    public Collection<Book> getBooks() {\n+        return books;\n+    }\n+\n+    public void setBooks(Collection<Book> books) {\n+        this.books = books;\n+    }\n+\n+    @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.EAGER, mappedBy = \"artist\")\n+    public Collection<Movie> movies;\n+\n+    public Collection<Movie> getMovies() {\n+        return movies;\n+    }\n+\n+    public void setMovies(Collection<Movie> movies) {\n+        this.movies = movies;\n+    }\n+\n+    public Artist() {\n+    }\n+\n+    public Artist(String name) {\n+        this.name = name;\n+    }\n+}"},{"sha":"11d3d63ee91bdb834fa444a34c615dc4d116a6bf","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/persistence/classcriteria/Book.java","status":"added","additions":62,"deletions":0,"changes":62,"blob_url":"https://github.com/apache/openjpa/blob/bb7048d27c55141851d7f9496f17aae407eca4e4/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/persistence/classcriteria/Book.java","raw_url":"https://github.com/apache/openjpa/raw/bb7048d27c55141851d7f9496f17aae407eca4e4/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/persistence/classcriteria/Book.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/persistence/classcriteria/Book.java?ref=bb7048d27c55141851d7f9496f17aae407eca4e4","patch":"@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.jdbc.persistence.classcriteria;\n+\n+import javax.persistence.*;\n+\n+@Entity\n+@DiscriminatorValue(value = \"BOOK\")\n+public class Book extends Item {\n+    private static final long serialVersionUID = 7150584274453979159L;\n+\n+    @Column(name = \"PAGE_COUNT\")\n+    private int pageCount;\n+\n+    @ManyToOne(cascade = CascadeType.ALL, fetch = FetchType.EAGER)\n+    @Column(name = \"ARTIST\")\n+    private Artist artist1;\n+\n+    public Book() {\n+        super();\n+    }\n+\n+    public Book(String title) {\n+        super(title);\n+    }\n+\n+    public int getPageCount() {\n+        return pageCount;\n+    }\n+\n+    public void setPageCount(int d) {\n+        if (d < 0) {\n+            throw new IllegalArgumentException(\"Invalid page count \" + d + \" for \" + this);\n+        }\n+\n+        pageCount = d;\n+    }\n+\n+    public Artist getArtist() {\n+        return artist1;\n+    }\n+\n+    public void setArtist(Artist artist1) {\n+        this.artist1 = artist1;\n+    }\n+}"},{"sha":"47aaff5bab43fb685b2bf55f4d466ea79aec684b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/persistence/classcriteria/Item.java","status":"added","additions":96,"deletions":0,"changes":96,"blob_url":"https://github.com/apache/openjpa/blob/bb7048d27c55141851d7f9496f17aae407eca4e4/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/persistence/classcriteria/Item.java","raw_url":"https://github.com/apache/openjpa/raw/bb7048d27c55141851d7f9496f17aae407eca4e4/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/persistence/classcriteria/Item.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/persistence/classcriteria/Item.java?ref=bb7048d27c55141851d7f9496f17aae407eca4e4","patch":"@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.jdbc.persistence.classcriteria;\n+\n+import java.io.Serializable;\n+\n+import javax.persistence.Column;\n+import javax.persistence.DiscriminatorColumn;\n+import javax.persistence.DiscriminatorType;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.Inheritance;\n+import javax.persistence.InheritanceType;\n+import javax.persistence.Table;\n+import javax.persistence.Transient;\n+\n+@Entity\n+@Table(name = \"ITEMTABLE\")\n+@Inheritance(strategy = InheritanceType.SINGLE_TABLE)\n+@DiscriminatorColumn(name = \"ITEM_TYPE\", discriminatorType = DiscriminatorType.STRING, length = 8)\n+public class Item implements Serializable {\n+    private static final long serialVersionUID = 3375001494950016360L;\n+\n+    @Id\n+    @GeneratedValue\n+    @Column(name = \"UID1\")\n+    private int id;\n+\n+    @Column\n+    private String title;\n+\n+    @Transient\n+    private float rating;\n+\n+    protected Item() {\n+        super();\n+    }\n+\n+    public Item(String title) {\n+        super();\n+        this.title = title;\n+    }\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public String getTitle() {\n+        return title;\n+    }\n+\n+    public void setTitle(String title) {\n+        if (title == null || title.trim().length() == 0) {\n+            throw new IllegalArgumentException(\"null or empty title not allowed\");\n+        }\n+        this.title = title;\n+    }\n+\n+    public float getRating() {\n+        return rating;\n+    }\n+\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+\n+        final Item item = (Item) o;\n+\n+        return id == item.id;\n+    }\n+\n+    public int hashCode() {\n+        return id;\n+    }\n+}"},{"sha":"6eaf6dc5020f831fd47e6d36a40fd1186c39ba98","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/persistence/classcriteria/Movie.java","status":"added","additions":63,"deletions":0,"changes":63,"blob_url":"https://github.com/apache/openjpa/blob/bb7048d27c55141851d7f9496f17aae407eca4e4/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/persistence/classcriteria/Movie.java","raw_url":"https://github.com/apache/openjpa/raw/bb7048d27c55141851d7f9496f17aae407eca4e4/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/persistence/classcriteria/Movie.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/persistence/classcriteria/Movie.java?ref=bb7048d27c55141851d7f9496f17aae407eca4e4","patch":"@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.jdbc.persistence.classcriteria;\n+\n+import javax.persistence.*;\n+\n+@Entity\n+@DiscriminatorValue(value = \"MOVIE\")\n+public class Movie extends Item {\n+    private static final long serialVersionUID = 5263476520279196994L;\n+\n+    @Column(name = \"DURATION\")\n+    private Integer duration;\n+\n+    @ManyToOne(cascade = CascadeType.ALL, fetch = FetchType.EAGER)\n+    @Column(name = \"ARTIST\")\n+    private Artist artist;\n+\n+    public Movie() {\n+        super();\n+    }\n+\n+    public Movie(String title) {\n+        super(title);\n+    }\n+\n+    public Integer getDuration() {\n+        return duration;\n+    }\n+\n+    public void setDuration(int d) {\n+        if (d < 0) {\n+            throw new IllegalArgumentException(\"Invalid duration \" + d + \" for \" + this);\n+        }\n+\n+        duration = d;\n+    }\n+\n+    public Artist getArtist() {\n+        return artist;\n+    }\n+\n+    public void setArtist(Artist artist) {\n+        this.artist = artist;\n+    }\n+\n+}"},{"sha":"95964f8b9f8bf6a95aafcbf1d97e8b1f8a38697f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/persistence/classcriteria/TestQuerySubclass.java","status":"added","additions":65,"deletions":0,"changes":65,"blob_url":"https://github.com/apache/openjpa/blob/bb7048d27c55141851d7f9496f17aae407eca4e4/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/persistence/classcriteria/TestQuerySubclass.java","raw_url":"https://github.com/apache/openjpa/raw/bb7048d27c55141851d7f9496f17aae407eca4e4/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/persistence/classcriteria/TestQuerySubclass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/persistence/classcriteria/TestQuerySubclass.java?ref=bb7048d27c55141851d7f9496f17aae407eca4e4","patch":"@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.jdbc.persistence.classcriteria;\n+\n+import java.util.Collection;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+public class TestQuerySubclass extends SingleEMFTestCase {\n+\n+    private OpenJPAEntityManager em;\n+\n+    public void setUp() {\n+        setUp(\"openjpa.Compatibility\",\n+            \"superclassDiscriminatorStrategyByDefault=true\", CLEAR_TABLES,\n+            Artist.class, Book.class, Item.class, Movie.class);\n+        em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        Book b = new Book(\"book\");\n+        Movie m = new Movie(\"movie\");\n+        Artist a = new Artist(\"Herman Hess\");\n+        b.setArtist(a);\n+        m.setArtist(a);\n+        em.persist(a);\n+        em.persist(b);\n+        em.persist(m);\n+        em.getTransaction().commit();\n+\n+    }\n+\n+    public void testQuery() {\n+        Collection<Book> books = null;\n+        Collection<Movie> movies = null;\n+        em = emf.createEntityManager();\n+        Artist artist = em.find(Artist.class, \"Herman Hess\");\n+        if (artist == null) {\n+            System.out.println(\"No artist found with ID Herman Hess\");\n+        }\n+        else {\n+            books = artist.getBooks();\n+            movies = artist.getMovies();\n+        }\n+        assertEquals(1, books.size());\n+        assertEquals(1, movies.size());\n+    }\n+\n+    public void tearDown() throws Exception {\n+    }\n+}"}]}

