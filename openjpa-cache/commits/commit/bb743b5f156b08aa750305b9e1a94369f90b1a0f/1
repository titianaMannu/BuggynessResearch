{"sha":"bb743b5f156b08aa750305b9e1a94369f90b1a0f","node_id":"MDY6Q29tbWl0MjA2MzY0OmJiNzQzYjVmMTU2YjA4YWE3NTAzMDViOWUxYTk0MzY5ZjkwYjFhMGY=","commit":{"author":{"name":"Heath Thomann","email":"hthomann@apache.org","date":"2013-10-17T19:46:14Z"},"committer":{"name":"Heath Thomann","email":"hthomann@apache.org","date":"2013-10-17T19:46:14Z"},"message":"OPENJPA-2343: Version field returns null when explicity projected from a JOIN in SELECT clause - based fix off of patch provided by Howard Kelsey.  Merged 2.2.x commit to trunk.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1533227 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c8e0dfc2894ce26c8bbbe8f461807fcf936fb636","url":"https://api.github.com/repos/apache/openjpa/git/trees/c8e0dfc2894ce26c8bbbe8f461807fcf936fb636"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/bb743b5f156b08aa750305b9e1a94369f90b1a0f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/bb743b5f156b08aa750305b9e1a94369f90b1a0f","html_url":"https://github.com/apache/openjpa/commit/bb743b5f156b08aa750305b9e1a94369f90b1a0f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/bb743b5f156b08aa750305b9e1a94369f90b1a0f/comments","author":null,"committer":null,"parents":[{"sha":"dc36e9ae8f2c98222f8a514a52e2b295c8ccafff","url":"https://api.github.com/repos/apache/openjpa/commits/dc36e9ae8f2c98222f8a514a52e2b295c8ccafff","html_url":"https://github.com/apache/openjpa/commit/dc36e9ae8f2c98222f8a514a52e2b295c8ccafff"}],"stats":{"total":205,"additions":197,"deletions":8},"files":[{"sha":"3f9382dcf296ddebac1ecd0b45fe52243f0a0c8e","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMapping.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/bb743b5f156b08aa750305b9e1a94369f90b1a0f/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMapping.java","raw_url":"https://github.com/apache/openjpa/raw/bb743b5f156b08aa750305b9e1a94369f90b1a0f/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMapping.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMapping.java?ref=bb743b5f156b08aa750305b9e1a94369f90b1a0f","patch":"@@ -1006,7 +1006,7 @@ public Object loadProjection(JDBCStore store, JDBCFetchConfiguration fetch,\n     \t// OPENJPA-662: Version fields have NoneFieldStrategy -- hence they\n     \t// need special treatment\n     \tif (isVersion()) {\n-    \t\treturn getDefiningMapping().getVersion().load(null, store, res);\n+    \t\treturn getDefiningMapping().getVersion().load(null, store, res, joins);\n     \t}\n         return assertStrategy().loadProjection(store, fetch, res, joins);\n     }"},{"sha":"2b36b26e384ebfde1daf228908d40edef619adf7","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/Version.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/bb743b5f156b08aa750305b9e1a94369f90b1a0f/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/Version.java","raw_url":"https://github.com/apache/openjpa/raw/bb743b5f156b08aa750305b9e1a94369f90b1a0f/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/Version.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/Version.java?ref=bb743b5f156b08aa750305b9e1a94369f90b1a0f","patch":"@@ -26,6 +26,7 @@\n import org.apache.openjpa.jdbc.schema.ColumnIO;\n import org.apache.openjpa.jdbc.schema.Index;\n import org.apache.openjpa.jdbc.schema.Schemas;\n+import org.apache.openjpa.jdbc.sql.Joins;\n import org.apache.openjpa.jdbc.sql.Result;\n import org.apache.openjpa.jdbc.sql.RowManager;\n import org.apache.openjpa.jdbc.sql.Select;\n@@ -343,6 +344,11 @@ public Object load(OpenJPAStateManager sm, JDBCStore store, Result res)\n         return assertStrategy().load(sm, store, res);\n     }\n \n+    public Object load(OpenJPAStateManager sm, JDBCStore store, Result res, Joins joins)\n+        throws SQLException {\n+        return assertStrategy().load(sm, store, res, joins);\n+    }\n+    \n     public void afterLoad(OpenJPAStateManager sm, JDBCStore store) {\n         assertStrategy().afterLoad(sm, store);\n     }"},{"sha":"5d8ba22c23b57361d6ff1d1380c96c180dc5a03c","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/VersionStrategy.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/bb743b5f156b08aa750305b9e1a94369f90b1a0f/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/VersionStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/bb743b5f156b08aa750305b9e1a94369f90b1a0f/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/VersionStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/VersionStrategy.java?ref=bb743b5f156b08aa750305b9e1a94369f90b1a0f","patch":"@@ -23,6 +23,7 @@\n \n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.schema.Column;\n+import org.apache.openjpa.jdbc.sql.Joins;\n import org.apache.openjpa.jdbc.sql.Result;\n import org.apache.openjpa.jdbc.sql.Select;\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n@@ -55,6 +56,12 @@\n      */\n     public Object load(OpenJPAStateManager sm, JDBCStore store, Result res)\n         throws SQLException;\n+    \n+    /**\n+     * Load data.\n+     */\n+    public Object load(OpenJPAStateManager sm, JDBCStore store, Result res, Joins joins)\n+        throws SQLException;\n \n     /**\n      * This method is called after data is loaded into the instance, in"},{"sha":"907b9181fa34a012538440ef9405cde76215ecb2","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/AbstractVersionStrategy.java","status":"modified","additions":7,"deletions":1,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/bb743b5f156b08aa750305b9e1a94369f90b1a0f/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/AbstractVersionStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/bb743b5f156b08aa750305b9e1a94369f90b1a0f/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/AbstractVersionStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/AbstractVersionStrategy.java?ref=bb743b5f156b08aa750305b9e1a94369f90b1a0f","patch":"@@ -19,13 +19,14 @@\n package org.apache.openjpa.jdbc.meta.strats;\n \n import java.sql.SQLException;\n-import java.util.Map;\n import java.util.Collections;\n+import java.util.Map;\n \n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.meta.Version;\n import org.apache.openjpa.jdbc.meta.VersionStrategy;\n+import org.apache.openjpa.jdbc.sql.Joins;\n import org.apache.openjpa.jdbc.sql.Result;\n import org.apache.openjpa.jdbc.sql.Select;\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n@@ -58,6 +59,11 @@ public Object load(OpenJPAStateManager sm, JDBCStore store, Result res)\n     \treturn null;\n     }\n \n+    public Object load(OpenJPAStateManager sm, JDBCStore store, Result res, Joins joins)\n+        throws SQLException {\n+        return null;\n+    }\n+    \n     public void afterLoad(OpenJPAStateManager sm, JDBCStore store) {\n     }\n "},{"sha":"4839ac4bcdb9f8c3555ebc1b2204987ea598521c","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ColumnVersionStrategy.java","status":"modified","additions":13,"deletions":6,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/bb743b5f156b08aa750305b9e1a94369f90b1a0f/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ColumnVersionStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/bb743b5f156b08aa750305b9e1a94369f90b1a0f/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ColumnVersionStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ColumnVersionStrategy.java?ref=bb743b5f156b08aa750305b9e1a94369f90b1a0f","patch":"@@ -29,11 +29,13 @@\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.meta.VersionMappingInfo;\n+import org.apache.openjpa.jdbc.meta.strats.AbstractVersionStrategy;\n import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.jdbc.schema.ColumnIO;\n import org.apache.openjpa.jdbc.schema.ForeignKey;\n import org.apache.openjpa.jdbc.schema.Index;\n import org.apache.openjpa.jdbc.sql.DBDictionary;\n+import org.apache.openjpa.jdbc.sql.Joins;\n import org.apache.openjpa.jdbc.sql.Result;\n import org.apache.openjpa.jdbc.sql.Row;\n import org.apache.openjpa.jdbc.sql.RowManager;\n@@ -258,17 +260,22 @@ public boolean select(Select sel, ClassMapping mapping) {\n         sel.select(vers.getColumns());\n         return true;\n     }\n+    \n+    public Object load(OpenJPAStateManager sm, JDBCStore store, Result res) \n+        throws SQLException {\n+        return this.load(sm, store, res, null);\n+    }\n \n-    public Object load(OpenJPAStateManager sm, JDBCStore store, Result res)\n+    public Object load(OpenJPAStateManager sm, JDBCStore store, Result res, Joins joins)\n         throws SQLException {\n         // typically if one version column is in the result, they all are, so\n         // optimize by checking for the first one before doing any real work\n         Column[] cols = vers.getColumns();\n-        if (!res.contains(cols[0])) {\n+        if (!res.contains(cols[0], joins)) {\n             return null;\n         }\n \n-        Object version = populateFromResult(res);\n+        Object version = populateFromResult(res, joins);\n         \n         // OPENJPA-662 Allow a null StateManager because this method may just be\n         // invoked to get the result of projection query\n@@ -298,7 +305,7 @@ public boolean checkVersion(OpenJPAStateManager sm, JDBCStore store,\n                 return false;\n \n             Object memVersion = sm.getVersion();\n-            Object dbVersion  = populateFromResult(res);\n+            Object dbVersion  = populateFromResult(res, null);\n             boolean refresh   = compare(memVersion, dbVersion) < 0;\n \n             if (updateVersion)\n@@ -329,14 +336,14 @@ public int compareVersion(Object v1, Object v2) {\n      * @return a single Object or an array depending on whether using a single\n      * or multiple columns being used for representation.\n     */\n-    Object populateFromResult(Result res) throws SQLException {\n+    Object populateFromResult(Result res, Joins joins) throws SQLException {\n         if (res == null)\n  \t\treturn null;\n     \t\n         Column[] cols = vers.getColumns();\n         Object[] values = new Object[cols.length];\n         for (int i = 0; i < cols.length; i++) {\n-            values[i] = res.getObject(cols[i], -1, null);\n+            values[i] = res.getObject(cols[i], null, joins);\n         }\n         return (cols.length == 1) ? values[0] : values;\n     }"},{"sha":"547e169cfbcd4e3cb5a576d32c81c8864d610ce2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/version/Author.java","status":"added","additions":40,"deletions":0,"changes":40,"blob_url":"https://github.com/apache/openjpa/blob/bb743b5f156b08aa750305b9e1a94369f90b1a0f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/version/Author.java","raw_url":"https://github.com/apache/openjpa/raw/bb743b5f156b08aa750305b9e1a94369f90b1a0f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/version/Author.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/version/Author.java?ref=bb743b5f156b08aa750305b9e1a94369f90b1a0f","patch":"@@ -0,0 +1,40 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jpql.version;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.Version;\r\n+\r\n+@Entity\r\n+public class Author {\r\n+    \r\n+    @Id\r\n+    private int id;\r\n+\r\n+    @Version\r\n+    private int version;\r\n+\r\n+    public int getId() { return id; }\r\n+    public void setId(int id) { this.id = id; }\r\n+\r\n+    public int getVersion() { return version; }\r\n+    public void setVersion(int version) { this.version = version; }\r\n+}\r\n+\r"},{"sha":"59a41bd6b9604788c7fb517cad10e8348767953e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/version/Document.java","status":"added","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/apache/openjpa/blob/bb743b5f156b08aa750305b9e1a94369f90b1a0f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/version/Document.java","raw_url":"https://github.com/apache/openjpa/raw/bb743b5f156b08aa750305b9e1a94369f90b1a0f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/version/Document.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/version/Document.java?ref=bb743b5f156b08aa750305b9e1a94369f90b1a0f","patch":"@@ -0,0 +1,38 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jpql.version;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.ManyToOne;\r\n+\r\n+@Entity\r\n+public class Document {\r\n+    \r\n+    @Id\r\n+    private int id;\r\n+\r\n+    @ManyToOne\r\n+    private Author author;\r\n+\r\n+    public int getId() { return id; }\r\n+    public void setId(int id) { this.id = id; }\r\n+    public Author getAuthor() { return author; }\r\n+    public void setAuthor(Author author) { this.author = author; }\r\n+}\r"},{"sha":"197caa72eef5339cf0b2eaef9a9cc64457b17494","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/version/TestJoinVersionField.java","status":"added","additions":85,"deletions":0,"changes":85,"blob_url":"https://github.com/apache/openjpa/blob/bb743b5f156b08aa750305b9e1a94369f90b1a0f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/version/TestJoinVersionField.java","raw_url":"https://github.com/apache/openjpa/raw/bb743b5f156b08aa750305b9e1a94369f90b1a0f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/version/TestJoinVersionField.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/version/TestJoinVersionField.java?ref=bb743b5f156b08aa750305b9e1a94369f90b1a0f","patch":"@@ -0,0 +1,85 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jpql.version;\r\n+\r\n+import java.util.List;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.Query;\r\n+import javax.persistence.TypedQuery;\r\n+\r\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n+\r\n+/**\r\n+ * Verifies that the version field is returned when part of a join statement.\r\n+ * See OPENJPA-2343.\r\n+ */\r\n+public class TestJoinVersionField extends SingleEMFTestCase {\r\n+\r\n+    public void setUp(){\r\n+        setUp(CLEAR_TABLES, Author.class,Document.class);\r\n+        createTestData();\r\n+    }\r\n+    \r\n+    public void testGetDocuments(){\r\n+        EntityManager em = emf.createEntityManager();\r\n+        String str = \"SELECT doc FROM Document doc JOIN doc.author auth\";\r\n+        TypedQuery<Document> query = em.createQuery(str, Document.class);\r\n+        List<Document> documentList =  query.getResultList();\r\n+\r\n+        for (Document doc : documentList) {        \r\n+            assertEquals(\"Author version field should have a value of 1.\",\r\n+                1, doc.getAuthor().getVersion());\r\n+        }\r\n+        \r\n+        em.close();\r\n+    }\r\n+    \r\n+    /**\r\n+     * Prior to OPENJPA-2343, the version field in the Author entity is returned \r\n+     * as null.\r\n+     */\r\n+    public void testGetDocumentsByExplicitAttributeSelection(){\r\n+        EntityManager em = emf.createEntityManager();\r\n+        String str = \"SELECT doc.id, auth.id, auth.version FROM Document doc JOIN doc.author auth\";\r\n+        Query query = em.createQuery(str);\r\n+        List<Object[]> objectList = query.getResultList();\r\n+\r\n+        for (Object[] objects : objectList) {\r\n+            assertEquals(\"Author version field should have a value of 1.\",1,objects[2]);\r\n+        }\r\n+    }\r\n+    \r\n+    public void createTestData() {\r\n+        EntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        \r\n+        Author author = new Author();\r\n+        author.setId(10);\r\n+        em.persist(author);\r\n+\r\n+        Document document = new Document();\r\n+        document.setId(2);\r\n+        document.setAuthor(author);\r\n+        em.persist(document);\r\n+\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+    }\r\n+}\r"}]}

