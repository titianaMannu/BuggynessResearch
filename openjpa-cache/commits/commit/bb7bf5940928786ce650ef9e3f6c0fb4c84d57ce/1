{"sha":"bb7bf5940928786ce650ef9e3f6c0fb4c84d57ce","node_id":"MDY6Q29tbWl0MjA2MzY0OmJiN2JmNTk0MDkyODc4NmNlNjUwZWY5ZTNmNmMwZmI0Yzg0ZDU3Y2U=","commit":{"author":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-01-17T22:46:39Z"},"committer":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-01-17T22:46:39Z"},"message":"Changes for JIRA OPENJPA-103 issue.\n\nThe processing for default (system level) pre-* and post-* lifecycle methods was not getting kicked off properly.  I just had to add a case entry for these MetaDataTags in the switch statement.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@497219 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"614697b3d166fb3e905a05284ca8a1970abfea9e","url":"https://api.github.com/repos/apache/openjpa/git/trees/614697b3d166fb3e905a05284ca8a1970abfea9e"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/bb7bf5940928786ce650ef9e3f6c0fb4c84d57ce","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/bb7bf5940928786ce650ef9e3f6c0fb4c84d57ce","html_url":"https://github.com/apache/openjpa/commit/bb7bf5940928786ce650ef9e3f6c0fb4c84d57ce","comments_url":"https://api.github.com/repos/apache/openjpa/commits/bb7bf5940928786ce650ef9e3f6c0fb4c84d57ce/comments","author":null,"committer":null,"parents":[{"sha":"ef67680a55f3b38643c9e485b0736d3066cd2eb4","url":"https://api.github.com/repos/apache/openjpa/commits/ef67680a55f3b38643c9e485b0736d3066cd2eb4","html_url":"https://github.com/apache/openjpa/commit/ef67680a55f3b38643c9e485b0736d3066cd2eb4"}],"stats":{"total":29,"additions":19,"deletions":10},"files":[{"sha":"74eecc63aad7f48f798eba5eb8d45615e3d91a70","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java","status":"modified","additions":19,"deletions":10,"changes":29,"blob_url":"https://github.com/apache/openjpa/blob/bb7bf5940928786ce650ef9e3f6c0fb4c84d57ce/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/bb7bf5940928786ce650ef9e3f6c0fb4c84d57ce/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java?ref=bb7bf5940928786ce650ef9e3f6c0fb4c84d57ce","patch":"@@ -72,7 +72,7 @@\n public class XMLPersistenceMetaDataParser\n     extends CFMetaDataParser\n     implements PersistenceMetaDataFactory.Parser {\n-    \n+\n     // parse constants\n     protected static final String ELEM_PKG = \"package\";\n     protected static final String ELEM_ACCESS = \"access\";\n@@ -86,7 +86,7 @@\n     protected static final String ELEM_CASCADE_REF = \"cascade-refresh\";\n     protected static final String ELEM_PU_META = \"persistence-unit-metadata\";\n     protected static final String ELEM_PU_DEF = \"persistence-unit-defaults\";\n-    protected static final String ELEM_XML_MAP_META_COMPLETE = \n+    protected static final String ELEM_XML_MAP_META_COMPLETE =\n         \"xml-mapping-metadata-complete\";\n \n     private static final Map<String, Object> _elems =\n@@ -106,7 +106,7 @@\n         _elems.put(ELEM_PU_META, ELEM_PU_META);\n         _elems.put(ELEM_PU_DEF, ELEM_PU_DEF);\n         _elems.put(ELEM_XML_MAP_META_COMPLETE, ELEM_XML_MAP_META_COMPLETE);\n-        \n+\n         _elems.put(\"entity-listeners\", ENTITY_LISTENERS);\n         _elems.put(\"pre-persist\", PRE_PERSIST);\n         _elems.put(\"post-persist\", POST_PERSIST);\n@@ -458,12 +458,21 @@ protected boolean startSystemElement(String name, Attributes attrs)\n                 case ENTITY_LISTENERS:\n                     ret = startEntityListeners(attrs);\n                     break;\n+                case PRE_PERSIST:\n+                case POST_PERSIST:\n+                case PRE_REMOVE:\n+                case POST_REMOVE:\n+                case PRE_UPDATE:\n+                case POST_UPDATE:\n+                case POST_LOAD:\n+                    ret = startCallback((MetaDataTag) tag, attrs);\n+                    break;\n                 default:\n                     warnUnsupportedTag(name);\n             }\n-        } else if (tag == ELEM_PU_META || tag == ELEM_PU_DEF) \n+        } else if (tag == ELEM_PU_META || tag == ELEM_PU_DEF)\n             ret = isMetaDataMode();\n-        else if (tag == ELEM_XML_MAP_META_COMPLETE) \n+        else if (tag == ELEM_XML_MAP_META_COMPLETE)\n             setAnnotationParser(null);\n         else if (tag == ELEM_ACCESS)\n             ret = _mode != MODE_QUERY;\n@@ -708,7 +717,7 @@ protected void endClassMappingElement(String name)\n     protected boolean startClass(String elem, Attributes attrs)\n         throws SAXException {\n         super.startClass(elem, attrs);\n-        \n+\n         // query mode only?\n         _cls = classForName(currentClassName());\n         if (_mode == MODE_QUERY) {\n@@ -1510,7 +1519,7 @@ private boolean startEntityListener(Attributes attrs)\n         throws SAXException {\n         _listener = classForName(attrs.getValue(\"class\"));\n         boolean system = currentElement() == null;\n-        Collection<LifecycleCallbacks>[] parsed = \n+        Collection<LifecycleCallbacks>[] parsed =\n             AnnotationPersistenceMetaDataParser.parseCallbackMethods(_listener,\n                 null, true, true, _repos);\n         if (parsed == null)\n@@ -1580,14 +1589,14 @@ private boolean startCallback(MetaDataTag callback, Attributes attrs)\n         for (int i = 0; i < events.length; i++) {\n             int event = events[i];\n             if (_listener != null) {\n-                MetaDataParsers.validateMethodsForSameCallback(_listener, \n+                MetaDataParsers.validateMethodsForSameCallback(_listener,\n                     _callbacks[event], ((BeanLifecycleCallbacks) adapter).\n                     getCallbackMethod(), callback, def, getLog());\n             } else {\n-                MetaDataParsers.validateMethodsForSameCallback(_cls, \n+                MetaDataParsers.validateMethodsForSameCallback(_cls,\n                     _callbacks[event], ((MethodLifecycleCallbacks) adapter).\n                     getCallbackMethod(), callback, def, getLog());\n-                \n+\n             }\n             if (_callbacks[event] == null)\n                 _callbacks[event] = new ArrayList<LifecycleCallbacks>(3);"}]}

