{"sha":"bb8ef003acb107ca4cbb59a79a2c542552a97a9b","node_id":"MDY6Q29tbWl0MjA2MzY0OmJiOGVmMDAzYWNiMTA3Y2E0Y2JiNTlhNzlhMmM1NDI1NTJhOTdhOWI=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-04-08T15:54:05Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-04-08T15:54:05Z"},"message":"OPENJPA-1616 Fix TestTimeoutException test failures on MSSQL.  Merged in from trunk r931693.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.x@931982 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2da2465c6bb1c910ab3bf985eb0d54bf0cac3c11","url":"https://api.github.com/repos/apache/openjpa/git/trees/2da2465c6bb1c910ab3bf985eb0d54bf0cac3c11"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/bb8ef003acb107ca4cbb59a79a2c542552a97a9b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/bb8ef003acb107ca4cbb59a79a2c542552a97a9b","html_url":"https://github.com/apache/openjpa/commit/bb8ef003acb107ca4cbb59a79a2c542552a97a9b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/bb8ef003acb107ca4cbb59a79a2c542552a97a9b/comments","author":null,"committer":null,"parents":[{"sha":"c384f39d277dbfbe464dcdf13af86c7661bce9c0","url":"https://api.github.com/repos/apache/openjpa/commits/c384f39d277dbfbe464dcdf13af86c7661bce9c0","html_url":"https://github.com/apache/openjpa/commit/c384f39d277dbfbe464dcdf13af86c7661bce9c0"}],"stats":{"total":63,"additions":48,"deletions":15},"files":[{"sha":"1ec1b60b5d7aa2fef0b7bfbcf269da15324f3435","filename":"openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/sql-error-state-codes.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/bb8ef003acb107ca4cbb59a79a2c542552a97a9b/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/sql-error-state-codes.xml","raw_url":"https://github.com/apache/openjpa/raw/bb8ef003acb107ca4cbb59a79a2c542552a97a9b/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/sql-error-state-codes.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/sql-error-state-codes.xml?ref=bb8ef003acb107ca4cbb59a79a2c542552a97a9b","patch":"@@ -47,7 +47,7 @@\n \t</dictionary>\n \t\n \t<dictionary class=\"org.apache.openjpa.jdbc.sql.SQLServerDictionary\">\n-\t\t<lock>1204,1205,1222</lock>\n+\t\t<lock>1204,1205,1222,HY008</lock>\n \t\t<referential-integrity>544,2601,2627,8114,8115</referential-integrity>\n \t\t<object-exists>23000</object-exists>\n \t\t<object-not-found></object-not-found>"},{"sha":"830eec6d5b2dd0993e77fa6e19056da9e812b414","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestTimeoutException.java","status":"modified","additions":47,"deletions":14,"changes":61,"blob_url":"https://github.com/apache/openjpa/blob/bb8ef003acb107ca4cbb59a79a2c542552a97a9b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestTimeoutException.java","raw_url":"https://github.com/apache/openjpa/raw/bb8ef003acb107ca4cbb59a79a2c542552a97a9b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestTimeoutException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestTimeoutException.java?ref=bb8ef003acb107ca4cbb59a79a2c542552a97a9b","patch":"@@ -13,6 +13,7 @@\n  */\n package org.apache.openjpa.persistence.query;\n \n+import java.sql.SQLException;\n import java.util.HashMap;\n import java.util.Map;\n \n@@ -44,10 +45,13 @@ public void setUp() {\n         setUnsupportedDatabases(OracleDictionary.class, DB2Dictionary.class);\n         if (isTestsDisabled())\n             return;\n-        super.setUp(entityClass);\n+        super.setUp(entityClass, CLEAR_TABLES);\n     }\n     \n     public void testQueryTimeOutExceptionWhileQueryingWithLocksOnAlreadyLockedEntities() {\n+        if (getLog().isTraceEnabled())\n+            getLog().trace(\"***** Entered TestTimeoutException.\" +\n+                \"testQueryTimeOutExceptionWhileQueryingWithLocksOnAlreadyLockedEntities()\");\n         EntityManager em1 = emf.createEntityManager();\n         EntityManager em2 = emf.createEntityManager();\n         assertNotSame(em1, em2);\n@@ -76,6 +80,9 @@ public void testQueryTimeOutExceptionWhileQueryingWithLocksOnAlreadyLockedEntiti\n     }\n     \n     public void testLockTimeOutExceptionWhileLockingAlreadyLockedEntities() {\n+        if (getLog().isTraceEnabled())\n+            getLog().trace(\"***** Entered TestTimeoutException.\" +\n+                \"testLockTimeOutExceptionWhileLockingAlreadyLockedEntities()\");\n         EntityManager em1 = emf.createEntityManager();\n         final EntityManager em2 = emf.createEntityManager();\n         assertNotSame(em1, em2);\n@@ -104,6 +111,10 @@ public void testLockTimeOutExceptionWhileLockingAlreadyLockedEntities() {\n     }\n \n     public void testQueryTimeOutExceptionWhileFindWithLocksOnAlreadyLockedEntities() {\n+        final int timeout = 1000;\n+        if (getLog().isTraceEnabled())\n+            getLog().trace(\"***** Entered TestTimeoutException.\" +\n+                \"testQueryTimeOutExceptionWhileFindWithLocksOnAlreadyLockedEntities()\");\n         EntityManager em1 = emf.createEntityManager();\n         EntityManager em2 = emf.createEntityManager();\n         assertNotSame(em1, em2);\n@@ -116,7 +127,11 @@ public void testQueryTimeOutExceptionWhileFindWithLocksOnAlreadyLockedEntities()\n         \n         em2.getTransaction().begin();\n         try {\n-            em2.find(entityClass, oid, LockModeType.PESSIMISTIC_WRITE);\n+            Map<String,Object> hint = new HashMap<String, Object>();\n+            hint.put(\"javax.persistence.lock.timeout\", timeout);\n+            //em2.setProperty(\"javax.persistence.lock.timeout\", timeout);\n+\n+            em2.find(entityClass, oid, LockModeType.PESSIMISTIC_WRITE, hint);\n             fail(\"Expected \" + LockTimeoutException.class.getName());\n         } catch (Throwable t) {\n             assertError(t, LockTimeoutException.class);\n@@ -146,29 +161,47 @@ public Object createEntity(EntityManager em) {\n      */\n     void assertError(Throwable actual, Class<? extends Throwable> expected) {\n         if (!expected.isAssignableFrom(actual.getClass())) {\n-                actual.printStackTrace();\n-                throw new AssertionFailedError(actual.getClass().getName() + \" was raised but expected \" + \n-                        expected.getName());\n+            getLog().error(\"TestTimeoutException.assertError() - unexpected exception type\", actual);\n+            //actual.printStackTrace();\n+            print(actual, 0);\n+            fail(actual.getClass().getName() + \" was raised but expected \" + expected.getName());\n         }\n         Object failed = getFailedObject(actual);\n         assertNotNull(\"Failed object is null\", failed);\n         assertNotEquals(\"null\", failed);\n     } \n     \n     Object getFailedObject(Throwable e) {\n-        if (e instanceof LockTimeoutException) {\n+        if (e == null) {\n+            getLog().error(\"TestTimeoutException.getFailedObject() - Object e was null\");\n+            return null;\n+        } else if (e instanceof LockTimeoutException) {\n             return ((LockTimeoutException) e).getObject();\n-        }\n-        if (e instanceof PessimisticLockException) {\n+        } else if (e instanceof PessimisticLockException) {\n             return ((PessimisticLockException) e).getEntity();\n-        }\n-        if (e instanceof QueryTimeoutException) {\n+        } else if (e instanceof QueryTimeoutException) {\n             return ((QueryTimeoutException) e).getQuery();\n-        }\n-        if (e instanceof OpenJPAException) {\n+        } else if (e instanceof OpenJPAException) {\n             return ((OpenJPAException) e).getFailedObject();\n+        } else {\n+            getLog().error(\"TestTimeoutException.getFailedObject() - unexpected exception type\", e);\n+            return null;\n         }\n-        return null;\n     }\n-    \n+\n+    void print(Throwable t, int tab) {\n+        if (t == null) return;\n+        StringBuilder str = new StringBuilder(80);\n+        for (int i=0; i<tab*4;i++)\n+            str.append(\" \");\n+        String sqlState = (t instanceof SQLException) ? \n+            \"(SQLState=\" + ((SQLException)t).getSQLState() + \":\" \n+                + t.getMessage() + \")\" : \"\";\n+        str.append(t.getClass().getName() + sqlState);\n+        getLog().error(str);\n+        if (t.getCause() == t) \n+            return;\n+        print(t.getCause(), tab+1);\n+    }\n+\n }"}]}

