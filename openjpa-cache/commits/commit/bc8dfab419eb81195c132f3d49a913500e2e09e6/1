{"sha":"bc8dfab419eb81195c132f3d49a913500e2e09e6","node_id":"MDY6Q29tbWl0MjA2MzY0OmJjOGRmYWI0MTllYjgxMTk1YzEzMmYzZDQ5YTkxMzUwMGUyZTA5ZTY=","commit":{"author":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-10-08T21:06:45Z"},"committer":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-10-08T21:06:45Z"},"message":"OPENJPA-396.  Going ahead with the commit of the patch.  Per the discussion in the Issue and the dev mailing list, I have added a few more comments to the clone() generation.  Thanks.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@582974 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"97222e6bafab8cb7c21a721b7fe5b8c6723ce9ec","url":"https://api.github.com/repos/apache/openjpa/git/trees/97222e6bafab8cb7c21a721b7fe5b8c6723ce9ec"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/bc8dfab419eb81195c132f3d49a913500e2e09e6","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/bc8dfab419eb81195c132f3d49a913500e2e09e6","html_url":"https://github.com/apache/openjpa/commit/bc8dfab419eb81195c132f3d49a913500e2e09e6","comments_url":"https://api.github.com/repos/apache/openjpa/commits/bc8dfab419eb81195c132f3d49a913500e2e09e6/comments","author":null,"committer":null,"parents":[{"sha":"3412d7df07551ba515534e110267628a60f86e80","url":"https://api.github.com/repos/apache/openjpa/commits/3412d7df07551ba515534e110267628a60f86e80","html_url":"https://github.com/apache/openjpa/commit/3412d7df07551ba515534e110267628a60f86e80"}],"stats":{"total":102,"additions":97,"deletions":5},"files":[{"sha":"48fcad7513a707da93ea1ebf7fbaf377ae117d5d","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyManagerImpl.java","status":"modified","additions":26,"deletions":0,"changes":26,"blob_url":"https://github.com/apache/openjpa/blob/bc8dfab419eb81195c132f3d49a913500e2e09e6/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/bc8dfab419eb81195c132f3d49a913500e2e09e6/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyManagerImpl.java?ref=bc8dfab419eb81195c132f3d49a913500e2e09e6","patch":"@@ -719,6 +719,32 @@ private void addProxyMethods(BCClass bc, boolean changeTracker) {\n         code.calculateMaxStack();\n         code.calculateMaxLocals();\n \n+        /* \n+         * clone (return detached proxy object)\n+         * Note:  This method is only being provided to satisfy a quirk with\n+         * the IBM JDK -- while comparing Calendar objects, the clone() method\n+         * was invoked.  So, we are now overriding the clone() method so as to\n+         * provide a detached proxy object (null out the StateManager).\n+         */\n+        m = bc.declareMethod(\"clone\", Object.class, null);\n+        m.makePublic();\n+        code = m.getCode(true);\n+        code.aload().setThis();\n+        code.invokespecial().setMethod(bc.getSuperclassType(), \"clone\",\n+                Object.class, null);  \n+        code.checkcast().setType(Proxy.class);  \n+        int other = code.getNextLocalsIndex();\n+        code.astore().setLocal(other);\n+        code.aload().setLocal(other);\n+        code.constant().setNull();\n+        code.constant().setValue(0);\n+        code.invokeinterface().setMethod(Proxy.class, \"setOwner\", void.class,\n+                new Class[] { OpenJPAStateManager.class, int.class });\n+        code.aload().setLocal(other);\n+        code.areturn();\n+        code.calculateMaxStack();\n+        code.calculateMaxLocals();\n+        \n         if (changeTracker) {\n             m = bc.declareMethod(\"getChangeTracker\", ChangeTracker.class, null);\n             m.makePublic();"},{"sha":"53fa96c2167f28ba218a810de75e22d1ee86a412","filename":"openjpa-kernel/src/test/java/org/apache/openjpa/util/TestProxyManager.java","status":"modified","additions":71,"deletions":5,"changes":76,"blob_url":"https://github.com/apache/openjpa/blob/bc8dfab419eb81195c132f3d49a913500e2e09e6/openjpa-kernel/src/test/java/org/apache/openjpa/util/TestProxyManager.java","raw_url":"https://github.com/apache/openjpa/raw/bc8dfab419eb81195c132f3d49a913500e2e09e6/openjpa-kernel/src/test/java/org/apache/openjpa/util/TestProxyManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/test/java/org/apache/openjpa/util/TestProxyManager.java?ref=bc8dfab419eb81195c132f3d49a913500e2e09e6","patch":"@@ -46,6 +46,7 @@\n import java.util.TreeMap;\n import java.util.Vector;\n \n+import org.apache.openjpa.util.Proxy;\n import junit.framework.TestCase;\n import junit.textui.TestRunner;\n \n@@ -151,12 +152,20 @@ private static void populate(SortedSet coll) {\n      */\n     private static void assertSortedSetsEqual(SortedSet s1, SortedSet s2) {\n         assertTrue(s1.getClass() == s2.getClass());\n+        assertSortedSetsEquals(s1, s2);\n+    }  \n+\n+    /**\n+     * Assert that the given sets are exactly the same (minus the class).\n+     */\n+    private static void assertSortedSetsEquals(SortedSet s1, SortedSet s2) {\n         assertEquals(s1.comparator(), s2.comparator());\n         assertEquals(s1.size(), s2.size());\n         Iterator itr1 = s1.iterator();\n         Iterator itr2 = s2.iterator();\n         while (itr1.hasNext())\n             assertTrue(itr1.next() == itr2.next());\n+        assertTrue(s1.equals(s2));\n     }  \n \n     public void testCopyNullCollection() {\n@@ -176,6 +185,16 @@ public void testCopyProxyCollection() {\n             _mgr.copyCollection(torig));\n     }\n \n+    public void testCloneProxyCollection() {\n+        // List doesn't support clone()\n+        \n+        TreeSet torig = (TreeSet) _mgr.newCollectionProxy(TreeSet.class, null, \n+            new CustomComparator());\n+        assertTrue(torig.comparator() instanceof CustomComparator);\n+        populate(torig);\n+        assertSortedSetsEquals(new TreeSet(torig), (SortedSet) torig.clone());\n+    }\n+\n     public void testListMethodsProxied() \n         throws Exception {\n         Class proxy = _mgr.newCollectionProxy(ArrayList.class, null, null).\n@@ -433,6 +452,13 @@ public void testCopySortedMaps() {\n      */\n     private static void assertSortedMapsEqual(SortedMap m1, SortedMap m2) {\n         assertTrue(m1.getClass() == m2.getClass());\n+        assertSortedMapsEquals(m1, m2);\n+    }  \n+\n+    /**\n+     * Assert that the given maps are exactly the same (minus the class).\n+     */\n+    private static void assertSortedMapsEquals(SortedMap m1, SortedMap m2) {\n         assertEquals(m1.comparator(), m2.comparator());\n         assertEquals(m1.size(), m2.size());\n         Map.Entry entry1;\n@@ -445,6 +471,7 @@ private static void assertSortedMapsEqual(SortedMap m1, SortedMap m2) {\n             assertTrue(entry1.getKey() == entry2.getKey());\n             assertTrue(entry1.getValue() == entry2.getValue());\n         }\n+        assertTrue(m1.equals(m2));\n     }  \n \n     public void testCopyNullMap() {\n@@ -464,6 +491,16 @@ public void testCopyProxyMap() {\n             _mgr.copyMap(torig));\n     }\n \n+    public void testCloneProxyMap() {\n+        // Map does not support clone()\n+        \n+        TreeMap torig = (TreeMap) _mgr.newMapProxy(TreeMap.class, null, null, \n+            new CustomComparator());\n+        assertTrue(torig.comparator() instanceof CustomComparator);\n+        populate(torig);\n+        assertSortedMapsEquals(new TreeMap(torig), (SortedMap) torig.clone());\n+    }\n+\n     public void testMapMethodsProxied() \n         throws Exception {\n         Class proxy = _mgr.newMapProxy(HashMap.class, null, null, null).\n@@ -551,8 +588,15 @@ public void testCopyDates() {\n      * Assert that the given dates are exactly the same.\n      */\n     private static void assertDatesEqual(Date d1, Date d2) {\n-        assertTrue(d1.getClass() == d1.getClass());\n-        assertEquals(d1, d2);\n+        assertTrue(d1.getClass() == d2.getClass());\n+        assertDatesEquals(d1, d2);\n+    }  \n+\n+    /**\n+     * Assert that the given dates are exactly the same (minus the class).\n+     */\n+    private static void assertDatesEquals(Date d1, Date d2) {\n+        assertTrue(d1.equals(d2));\n     }  \n \n     public void testCopyNullDate() {\n@@ -562,7 +606,13 @@ public void testCopyNullDate() {\n     public void testCopyProxyDate() {\n         Date orig = (Date) _mgr.newDateProxy(Time.class);\n         orig.setTime(1999);\n-        assertDatesEqual(new Date(orig.getTime()), (Date) _mgr.copyDate(orig));\n+        assertDatesEqual(new Time(orig.getTime()), (Date) _mgr.copyDate(orig));\n+    }\n+\n+    public void testCloneProxyDate() {\n+        Date orig = (Date) _mgr.newDateProxy(Time.class);\n+        orig.setTime(1999);\n+        assertDatesEquals(new Time(orig.getTime()), (Date) orig.clone());\n     }\n \n     public void testDateMethodsProxied() \n@@ -647,8 +697,15 @@ private static void populate(Calendar cal) {\n      * Assert that the given dates are exactly the same.\n      */\n     private static void assertCalendarsEqual(Calendar c1, Calendar c2) {\n-        assertTrue(c1.getClass() == c1.getClass());\n-        assertEquals(c1, c2);\n+        assertTrue(c1.getClass() == c2.getClass());\n+        assertCalendarsEquals(c1, c2);\n+    }  \n+\n+    /**\n+     * Assert that the given dates are exactly the same (minus the class).\n+     */\n+    private static void assertCalendarsEquals(Calendar c1, Calendar c2) {\n+        assertTrue(c1.equals(c2));\n     }  \n \n     public void testCopyNullCalendar() {\n@@ -664,6 +721,15 @@ public void testCopyProxyCalendar() {\n         assertCalendarsEqual(cal, _mgr.copyCalendar(orig));\n     }\n \n+    public void testCloneProxyCalendar() {\n+        Calendar orig = (Calendar) _mgr.newCalendarProxy\n+            (GregorianCalendar.class, TimeZone.getTimeZone(\"CST\"));\n+        populate(orig);\n+        Calendar cal = new GregorianCalendar();\n+        populate(cal);\n+        assertCalendarsEquals(cal, (Calendar)orig.clone());\n+    }\n+\n     public void testCalendarAbstractClassProxy() {\n         Proxy cal = _mgr.newCalendarProxy(Calendar.class, null);\n         assertNotNull(cal);"}]}

