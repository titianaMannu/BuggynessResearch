{"sha":"bcda87c67b6e35d3236e04c0bc699da6f6d5022f","node_id":"MDY6Q29tbWl0MjA2MzY0OmJjZGE4N2M2N2I2ZTM1ZDMyMzZlMDRjMGJjNjk5ZGE2ZjZkNTAyMmY=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2012-08-02T12:54:26Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2012-08-02T12:54:26Z"},"message":"OPENJPA-2245: Fix NotSerializableException when using Criteria and QueryCache.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1368438 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"94e46f8c101d223ad07a577efd2b610def6014a6","url":"https://api.github.com/repos/apache/openjpa/git/trees/94e46f8c101d223ad07a577efd2b610def6014a6"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/bcda87c67b6e35d3236e04c0bc699da6f6d5022f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/bcda87c67b6e35d3236e04c0bc699da6f6d5022f","html_url":"https://github.com/apache/openjpa/commit/bcda87c67b6e35d3236e04c0bc699da6f6d5022f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/bcda87c67b6e35d3236e04c0bc699da6f6d5022f/comments","author":null,"committer":null,"parents":[{"sha":"5c05a69ce6f371616dfb049fc1c996260b10a394","url":"https://api.github.com/repos/apache/openjpa/commits/5c05a69ce6f371616dfb049fc1c996260b10a394","html_url":"https://github.com/apache/openjpa/commit/5c05a69ce6f371616dfb049fc1c996260b10a394"}],"stats":{"total":130,"additions":127,"deletions":3},"files":[{"sha":"f58f6f11caa985865b4f492a1329a23f03db3854","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryKey.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/bcda87c67b6e35d3236e04c0bc699da6f6d5022f/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryKey.java","raw_url":"https://github.com/apache/openjpa/raw/bcda87c67b6e35d3236e04c0bc699da6f6d5022f/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryKey.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryKey.java?ref=bcda87c67b6e35d3236e04c0bc699da6f6d5022f","patch":"@@ -245,9 +245,9 @@ private static QueryKey createKey(QueryContext q, boolean packed,\n         key._accessPathClassNames = accessPathClassNames;\n         key._timeout = timeout;\n         key._query = q.getQueryString();\n-        if (key._query == null) {\n-            // this can be a criteria query\n-            key._query = parsed;\n+        if (key._query == null && parsed != null) {\n+            // this is a criteria query. Store the Stringified query value rather than the full cq.\n+            key._query = parsed.toString();\n         }\n         key._ignoreChanges = q.getIgnoreChanges();\n         key._rangeStart = startIdx;"},{"sha":"2789439fc4c267f7f7cbd0bb51671034e2a3f39a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestRemoteQueryCacheCriteriaQuery.java","status":"added","additions":61,"deletions":0,"changes":61,"blob_url":"https://github.com/apache/openjpa/blob/bcda87c67b6e35d3236e04c0bc699da6f6d5022f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestRemoteQueryCacheCriteriaQuery.java","raw_url":"https://github.com/apache/openjpa/raw/bcda87c67b6e35d3236e04c0bc699da6f6d5022f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestRemoteQueryCacheCriteriaQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestRemoteQueryCacheCriteriaQuery.java?ref=bcda87c67b6e35d3236e04c0bc699da6f6d5022f","patch":"@@ -0,0 +1,61 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.criteria;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.criteria.CriteriaQuery;\r\n+import javax.persistence.criteria.Root;\r\n+import javax.persistence.metamodel.EntityType;\r\n+import javax.persistence.metamodel.Metamodel;\r\n+\r\n+import org.apache.openjpa.persistence.datacache.SerializingConcurrentQueryCache;\r\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n+\r\n+public class TestRemoteQueryCacheCriteriaQuery extends SingleEMFTestCase {\r\n+    protected EntityType<Department> department_ = null;\r\n+    protected OpenJPACriteriaBuilder cb;\r\n+\r\n+    @Override\r\n+    public void setUp() throws Exception {\r\n+        super.setUp(\"openjpa.DataCache\", \"true\", \"openjpa.QueryCache\",\r\n+            SerializingConcurrentQueryCache.SERIALIZING_CONCURRENT_QUERY_CACHE, Department.class, Employee.class,\r\n+            Contact.class, Manager.class, FrequentFlierPlan.class);\r\n+        EntityManager em = emf.createEntityManager();\r\n+        try {\r\n+            Metamodel mm = em.getMetamodel();\r\n+            department_ = mm.entity(Department.class);\r\n+            cb = emf.getCriteriaBuilder();\r\n+        } finally {\r\n+            em.close();\r\n+        }\r\n+    }\r\n+\r\n+    public void test() {\r\n+        CriteriaQuery<Department> q = cb.createQuery(Department.class);\r\n+        Root<Department> dept = q.from(Department.class);\r\n+        q.select(dept).where(cb.equal(dept.get(department_.getSingularAttribute(\"name\", String.class)), \"test\"));\r\n+\r\n+        EntityManager em = emf.createEntityManager();\r\n+        try {\r\n+            em.createQuery(q).getResultList();\r\n+        } finally {\r\n+            em.close();\r\n+        }\r\n+    }\r\n+}\r"},{"sha":"8e153f264cee7587a977b5b04de3c2b9a40f951e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/SerializingConcurrentQueryCache.java","status":"added","additions":63,"deletions":0,"changes":63,"blob_url":"https://github.com/apache/openjpa/blob/bcda87c67b6e35d3236e04c0bc699da6f6d5022f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/SerializingConcurrentQueryCache.java","raw_url":"https://github.com/apache/openjpa/raw/bcda87c67b6e35d3236e04c0bc699da6f6d5022f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/SerializingConcurrentQueryCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/SerializingConcurrentQueryCache.java?ref=bcda87c67b6e35d3236e04c0bc699da6f6d5022f","patch":"@@ -0,0 +1,63 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.datacache;\r\n+\r\n+import java.io.ByteArrayInputStream;\r\n+import java.io.ByteArrayOutputStream;\r\n+import java.io.ObjectInputStream;\r\n+import java.io.ObjectOutputStream;\r\n+\r\n+import org.apache.openjpa.datacache.ConcurrentQueryCache;\r\n+import org.apache.openjpa.datacache.QueryKey;\r\n+import org.apache.openjpa.datacache.QueryResult;\r\n+\r\n+/**\r\n+ * A QueryCache implementation that serializes all keys / values to simulate having a remote cache.\r\n+ */\r\n+public class SerializingConcurrentQueryCache extends ConcurrentQueryCache {\r\n+    private static final long serialVersionUID = 1L;\r\n+    public static String SERIALIZING_CONCURRENT_QUERY_CACHE = SerializingConcurrentQueryCache.class.getName();\r\n+\r\n+    @Override\r\n+    public QueryResult get(QueryKey key) {\r\n+        return roundtrip(super.get(roundtrip(key)));\r\n+    }\r\n+\r\n+    @Override\r\n+    public QueryResult put(QueryKey qk, QueryResult oids) {\r\n+        roundtrip(qk);\r\n+        roundtrip(oids);\r\n+        return roundtrip(super.put(qk, oids));\r\n+    }\r\n+\r\n+    @SuppressWarnings(\"unchecked\")\r\n+    private static <T> T roundtrip(T o) {\r\n+        try {\r\n+            ByteArrayOutputStream bytes = new ByteArrayOutputStream();\r\n+            ObjectOutputStream out = new ObjectOutputStream(bytes);\r\n+            out.writeObject(o);\r\n+            out.flush();\r\n+            ObjectInputStream in = new ObjectInputStream(new ByteArrayInputStream(bytes.toByteArray()));\r\n+            return (T) in.readObject();\r\n+        } catch (Exception e) {\r\n+            throw new RuntimeException(e);\r\n+        }\r\n+    }\r\n+\r\n+}\r"}]}

