{"sha":"bd015d02e95bd3d7c39f3b0a9bdf2cb448bedc75","node_id":"MDY6Q29tbWl0MjA2MzY0OmJkMDE1ZDAyZTk1YmQzZDdjMzlmM2IwYTliZGYyY2I0NDhiZWRjNzU=","commit":{"author":{"name":"Romain Manni-Bucau","email":"rmannibucau@gmail.com","date":"2020-09-30T10:14:35Z"},"committer":{"name":"Romain Manni-Bucau","email":"rmannibucau@gmail.com","date":"2020-09-30T10:14:35Z"},"message":"[OPENJPA-2834] cache EMF#properties","tree":{"sha":"a525eb12d648dd895835a88ba6fd87b32955d66d","url":"https://api.github.com/repos/apache/openjpa/git/trees/a525eb12d648dd895835a88ba6fd87b32955d66d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/bd015d02e95bd3d7c39f3b0a9bdf2cb448bedc75","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/bd015d02e95bd3d7c39f3b0a9bdf2cb448bedc75","html_url":"https://github.com/apache/openjpa/commit/bd015d02e95bd3d7c39f3b0a9bdf2cb448bedc75","comments_url":"https://api.github.com/repos/apache/openjpa/commits/bd015d02e95bd3d7c39f3b0a9bdf2cb448bedc75/comments","author":{"login":"rmannibucau","id":1249546,"node_id":"MDQ6VXNlcjEyNDk1NDY=","avatar_url":"https://avatars.githubusercontent.com/u/1249546?v=4","gravatar_id":"","url":"https://api.github.com/users/rmannibucau","html_url":"https://github.com/rmannibucau","followers_url":"https://api.github.com/users/rmannibucau/followers","following_url":"https://api.github.com/users/rmannibucau/following{/other_user}","gists_url":"https://api.github.com/users/rmannibucau/gists{/gist_id}","starred_url":"https://api.github.com/users/rmannibucau/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rmannibucau/subscriptions","organizations_url":"https://api.github.com/users/rmannibucau/orgs","repos_url":"https://api.github.com/users/rmannibucau/repos","events_url":"https://api.github.com/users/rmannibucau/events{/privacy}","received_events_url":"https://api.github.com/users/rmannibucau/received_events","type":"User","site_admin":false},"committer":{"login":"rmannibucau","id":1249546,"node_id":"MDQ6VXNlcjEyNDk1NDY=","avatar_url":"https://avatars.githubusercontent.com/u/1249546?v=4","gravatar_id":"","url":"https://api.github.com/users/rmannibucau","html_url":"https://github.com/rmannibucau","followers_url":"https://api.github.com/users/rmannibucau/followers","following_url":"https://api.github.com/users/rmannibucau/following{/other_user}","gists_url":"https://api.github.com/users/rmannibucau/gists{/gist_id}","starred_url":"https://api.github.com/users/rmannibucau/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rmannibucau/subscriptions","organizations_url":"https://api.github.com/users/rmannibucau/orgs","repos_url":"https://api.github.com/users/rmannibucau/repos","events_url":"https://api.github.com/users/rmannibucau/events{/privacy}","received_events_url":"https://api.github.com/users/rmannibucau/received_events","type":"User","site_admin":false},"parents":[{"sha":"910a812a1550382d2bafd9a001a66c5e7425ccf5","url":"https://api.github.com/repos/apache/openjpa/commits/910a812a1550382d2bafd9a001a66c5e7425ccf5","html_url":"https://github.com/apache/openjpa/commit/910a812a1550382d2bafd9a001a66c5e7425ccf5"}],"stats":{"total":35,"additions":31,"deletions":4},"files":[{"sha":"0c8ff9aecdaab6835e22f3b2c807262be8b21ed5","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerFactoryImpl.java","status":"modified","additions":23,"deletions":4,"changes":27,"blob_url":"https://github.com/apache/openjpa/blob/bd015d02e95bd3d7c39f3b0a9bdf2cb448bedc75/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerFactoryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/bd015d02e95bd3d7c39f3b0a9bdf2cb448bedc75/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerFactoryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerFactoryImpl.java?ref=bd015d02e95bd3d7c39f3b0a9bdf2cb448bedc75","patch":"@@ -75,6 +75,8 @@\n     private transient StoreCache _cache = null;\n     private transient QueryResultCache _queryCache = null;\n     private transient MetamodelImpl _metaModel;\n+    private transient Map<String, Object> properties;\n+    private transient Map<String, Object> emEmptyPropsProperties;\n \n     /**\n      * Default constructor provided for auto-instantiation.\n@@ -111,10 +113,19 @@ public OpenJPAConfiguration getConfiguration() {\n \n     @Override\n     public Map<String,Object> getProperties() {\n-        Map<String,Object> props = _factory.getProperties();\n-        // convert to user readable values\n-        props.putAll(createEntityManager().getProperties());\n-        return props;\n+        if (properties == null) {\n+            Map<String,Object> props = _factory.getProperties();\n+            // convert to user readable values\n+            if (emEmptyPropsProperties != null) {\n+                props.putAll(emEmptyPropsProperties);\n+            } else {\n+                props.putAll(createEntityManager().getProperties());\n+            }\n+            // no need to sync or volatile, worse case concurrent threads create 2 instances\n+            // we just want to avoid to do it after some \"init\" phase\n+            this.properties = props;\n+        }\n+        return properties;\n     }\n \n     @Override\n@@ -201,6 +212,7 @@ else if (!props.isEmpty()) {\n             props = new HashMap(props);\n         }\n \n+        boolean canCacheGetProperties = props.isEmpty(); // nominal case\n \n         OpenJPAConfiguration conf = getConfiguration();\n         Log log = conf.getLog(OpenJPAConfiguration.LOG_RUNTIME);\n@@ -273,6 +285,13 @@ else if (!props.isEmpty()) {\n         for (Map.Entry entry : entrySet) {\n             em.setProperty(entry.getKey().toString(), entry.getValue());\n         }\n+        if (canCacheGetProperties) {\n+            if (emEmptyPropsProperties == null) {\n+                emEmptyPropsProperties = em.getProperties();\n+            } else if (EntityManagerImpl.class.isInstance(em)) {\n+                EntityManagerImpl.class.cast(em).setProperties(emEmptyPropsProperties);\n+            }\n+        }\n         if (log != null && log.isTraceEnabled()) {\n             log.trace(this + \" created EntityManager \" + em + \".\");\n         }"},{"sha":"978241230db9daae83f90bbdf3081e8b537056f2","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/bd015d02e95bd3d7c39f3b0a9bdf2cb448bedc75/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/bd015d02e95bd3d7c39f3b0a9bdf2cb448bedc75/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java?ref=bd015d02e95bd3d7c39f3b0a9bdf2cb448bedc75","patch":"@@ -122,6 +122,7 @@\n     protected RuntimeExceptionTranslator _ret = PersistenceExceptions.getRollbackTranslator(this);\n     private boolean _convertPositionalParams = false;\n     private boolean _isJoinedToTransaction;\n+    private Map<String, Object> properties;\n \n     public EntityManagerImpl() {\n         // for Externalizable\n@@ -1792,6 +1793,10 @@ public void writeExternal(ObjectOutput out) throws IOException {\n         }\n     }\n \n+    public void setProperties(final Map<String, Object> emEmptyPropsProperties) {\n+        this.properties = emEmptyPropsProperties;\n+    }\n+\n     private static class BrokerBytesInputStream extends ObjectInputStream {\n \n         private OpenJPAConfiguration conf;\n@@ -1935,6 +1940,9 @@ public OpenJPAQuery createDynamicQuery(\n      */\n     @Override\n     public Map<String, Object> getProperties() {\n+        if (properties != null) {\n+            return properties;\n+        }\n         Map<String,Object> props = _broker.getProperties();\n         for (String s : _broker.getSupportedProperties()) {\n             String kernelKey = getBeanPropertyName(s);"}]}

