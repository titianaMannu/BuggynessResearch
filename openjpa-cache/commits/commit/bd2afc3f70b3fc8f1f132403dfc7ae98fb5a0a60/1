{"sha":"bd2afc3f70b3fc8f1f132403dfc7ae98fb5a0a60","node_id":"MDY6Q29tbWl0MjA2MzY0OmJkMmFmYzNmNzBiM2ZjOGYxZjEzMjQwM2RmYzdhZTk4ZmI1YTBhNjA=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-04-24T22:28:42Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-04-24T22:28:42Z"},"message":"OPENJPA-149 OPENJPA-159 Moving suspendJTA code to ManagedRuntime\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@651441 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f7b0d6359ca50986626a280d3ab83fc245dca0e7","url":"https://api.github.com/repos/apache/openjpa/git/trees/f7b0d6359ca50986626a280d3ab83fc245dca0e7"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/bd2afc3f70b3fc8f1f132403dfc7ae98fb5a0a60","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/bd2afc3f70b3fc8f1f132403dfc7ae98fb5a0a60","html_url":"https://github.com/apache/openjpa/commit/bd2afc3f70b3fc8f1f132403dfc7ae98fb5a0a60","comments_url":"https://api.github.com/repos/apache/openjpa/commits/bd2afc3f70b3fc8f1f132403dfc7ae98fb5a0a60/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"d78e76aa5addbfdfa92fa5fc93142c325c250ab1","url":"https://api.github.com/repos/apache/openjpa/commits/d78e76aa5addbfdfa92fa5fc93142c325c250ab1","html_url":"https://github.com/apache/openjpa/commit/d78e76aa5addbfdfa92fa5fc93142c325c250ab1"}],"stats":{"total":601,"additions":485,"deletions":116},"files":[{"sha":"6b086b5a6b37b155133473cd61931998c55ca2ec","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/AbstractJDBCSeq.java","status":"modified","additions":16,"deletions":33,"changes":49,"blob_url":"https://github.com/apache/openjpa/blob/bd2afc3f70b3fc8f1f132403dfc7ae98fb5a0a60/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/AbstractJDBCSeq.java","raw_url":"https://github.com/apache/openjpa/raw/bd2afc3f70b3fc8f1f132403dfc7ae98fb5a0a60/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/AbstractJDBCSeq.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/AbstractJDBCSeq.java?ref=bd2afc3f70b3fc8f1f132403dfc7ae98fb5a0a60","patch":"@@ -45,7 +45,6 @@\n \n     protected int type = TYPE_DEFAULT;\n     protected Object current = null;\n-    private static ThreadLocal _outerTransaction = new ThreadLocal();\n \n     /**\n      * Records the sequence type.\n@@ -144,24 +143,22 @@ private JDBCStore getStore(StoreContext ctx) {\n     }\n \n     /**\n-     * Return the connection to use based on the type of sequence. This\n-     * connection will automatically be closed; do not close it.\n+     * <P>Return the connection to use based on the type of sequence. This\n+     * connection will automatically be closed; do not close it.</P>\n+     * \n+     * @return If the sequence type is <code>TYPE_TRANSACTIONAL</code> or \n+     * <code>TYPE_CONTIGUOUS</code> the connection from the {@link StoreManager}\n+     * will be returned. \n+     * \n+     * <P>Otherwise a new connection will be obtained using DataSource2 from the \n+     * current configuration. In this case autocommit is set to false prior to \n+     * returning the connection.</P>\n      */\n     protected Connection getConnection(JDBCStore store)\n         throws SQLException {\n         if (type == TYPE_TRANSACTIONAL || type == TYPE_CONTIGUOUS)\n             return store.getConnection();\n-        else if (suspendInJTA()) {\n-            try {\n-                TransactionManager tm = getConfiguration()\n-                    .getManagedRuntimeInstance().getTransactionManager();\n-                _outerTransaction.set(tm.suspend());\n-                tm.begin();\n-                return store.getConnection();\n-            } catch (Exception e) {\n-                throw new StoreException(e);\n-            }\n-        } else {\n+        else {\n             JDBCConfiguration conf = store.getConfiguration();\n             DataSource ds = conf.getDataSource2(store.getContext());\n             Connection conn = ds.getConnection();\n@@ -172,32 +169,18 @@ else if (suspendInJTA()) {\n     }\n \n     /**\n-     * Close the current connection.\n+     * Close the current connection. If the sequence is\n+     * <code>TYPE_TRANSACTIONAL</code> or <code>TYPE_CONTIGUOUS</code>\n+     * nothing will be done. Otherwise the connection will be closed.\n      */\n     protected void closeConnection(Connection conn) {\n         if (conn == null)\n             return;\n-\n         if (type == TYPE_TRANSACTIONAL || type == TYPE_CONTIGUOUS) {\n             // do nothing; this seq is part of the business transaction\n             return;\n-        } else if (suspendInJTA()) {\n-            try {\n-                TransactionManager tm = getConfiguration()\n-                    .getManagedRuntimeInstance().getTransactionManager();\n-                tm.commit();\n-                try { conn.close(); } catch (SQLException se) {}\n-\n-                Transaction outerTxn = (Transaction)_outerTransaction.get();\n-                if (outerTxn != null)\n-                    tm.resume(outerTxn);\n-\n-            } catch (Exception e) {\n-                throw new StoreException(e);\n-            } finally {\n-                _outerTransaction.set(null);\n-            }\n-        } else {\n+        }\n+        else {\n             try {\n                 conn.commit();\n             } catch (SQLException se) {"},{"sha":"1003a7ff9e8f0977dd0cb93c642c7e63fc93eae5","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/TableJDBCSeq.java","status":"modified","additions":171,"deletions":51,"changes":222,"blob_url":"https://github.com/apache/openjpa/blob/bd2afc3f70b3fc8f1f132403dfc7ae98fb5a0a60/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/TableJDBCSeq.java","raw_url":"https://github.com/apache/openjpa/raw/bd2afc3f70b3fc8f1f132403dfc7ae98fb5a0a60/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/TableJDBCSeq.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/TableJDBCSeq.java?ref=bd2afc3f70b3fc8f1f132403dfc7ae98fb5a0a60","patch":"@@ -26,6 +26,8 @@\n import java.sql.Types;\n import java.util.HashMap;\n \n+import javax.transaction.NotSupportedException;\n+\n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n import org.apache.openjpa.jdbc.conf.JDBCConfigurationImpl;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n@@ -39,7 +41,6 @@\n import org.apache.openjpa.jdbc.sql.DBDictionary;\n import org.apache.openjpa.jdbc.sql.RowImpl;\n import org.apache.openjpa.jdbc.sql.SQLBuffer;\n-import org.apache.openjpa.jdbc.sql.SQLExceptions;\n import org.apache.openjpa.lib.conf.Configurable;\n import org.apache.openjpa.lib.conf.Configuration;\n import org.apache.openjpa.lib.conf.Configurations;\n@@ -79,16 +80,16 @@\n     private transient Log _log = null;\n     private int _alloc = 50;\n     private int _intValue = 1;\n-    private final HashMap _stat = new HashMap();\n+    private final HashMap<ClassMapping, Status> _stat =\n+        new HashMap<ClassMapping, Status>();\n \n     private String _table = \"OPENJPA_SEQUENCE_TABLE\";\n     private String _seqColumnName = \"SEQUENCE_VALUE\";\n     private String _pkColumnName = \"ID\";\n \n     private Column _seqColumn = null;\n     private Column _pkColumn = null;\n-    private int _schemasIdx = 0;    \n-\n+    \n     /**\n      * The sequence table name. Defaults to <code>OPENJPA_SEQUENCE_TABLE</code>.\n      * By default, the table will be placed in the first schema listed in your\n@@ -270,13 +271,19 @@ protected Object nextInternal(JDBCStore store, ClassMapping mapping)\n     protected Object currentInternal(JDBCStore store, ClassMapping mapping)\n         throws Exception {\n         if (current == null) {\n-            Connection conn = getConnection(store);\n+            CurrentSequenceRunnable runnable =\n+                new CurrentSequenceRunnable(store, mapping);\n             try {\n-                long cur = getSequence(mapping, conn);\n-                if (cur != -1)\n-                    current = Numbers.valueOf(cur);\n-            } finally {\n-                closeConnection(conn);\n+                if (suspendInJTA()) {\n+                    // NotSupportedException is wrapped in a StoreException by\n+                    // the caller.\n+                    _conf.getManagedRuntimeInstance().doNonTransactionalWork(\n+                            runnable);\n+                } else {\n+                    runnable.run();\n+                }\n+            } catch (RuntimeException re) {\n+                throw (Exception) (re.getCause() == null ? re : re.getCause());\n             }\n         }\n         return super.currentInternal(store, mapping);\n@@ -311,7 +318,6 @@ protected Status getStatus(ClassMapping mapping) {\n             _stat.put(mapping, status);\n         }\n         return status;\n-            \n     }\n \n     /**\n@@ -361,50 +367,43 @@ private void buildTable() {\n      * Updates the max available sequence value.\n      */\n     private void allocateSequence(JDBCStore store, ClassMapping mapping,\n-        Status stat, int alloc, boolean updateStatSeq) \n-        throws SQLException {\n-        Connection conn = getConnection(store);\n-        try { \n-            if (setSequence(mapping, stat, alloc, updateStatSeq, conn))\n-                return;\n-        } catch (SQLException se) {\n-            throw SQLExceptions.getStore(_loc.get(\"bad-seq-up\", _table),\n-                se, _conf.getDBDictionaryInstance());\n-        } finally {\n-            closeConnection(conn);\n-        }\n-        \n+            Status stat, int alloc, boolean updateStatSeq) throws SQLException {\n+        Runnable runnable =\n+            new AllocateSequenceRunnable(\n+                    store, mapping, stat, alloc, updateStatSeq);\n         try {\n-            // possible that we might get errors when inserting if\n-            // another thread/process is inserting same pk at same time\n-            SQLException err = null; \n-            // ### why does this not call getConnection() / closeConnection()?\n-            conn = _conf.getDataSource2(store.getContext()).getConnection();\n-            try {\n-                insertSequence(mapping, conn);\n-            } catch (SQLException se) {\n-                err = se;\n-            } finally {\n-                try { conn.close(); } catch (SQLException se) {}\n-            }\n-\n-            // now we should be able to update...\n-            conn = getConnection(store);\n-            try {\n-                if (!setSequence(mapping, stat, alloc, updateStatSeq, conn))\n-                    throw (err != null) ? err : new SQLException(_loc.get\n-                        (\"no-seq-row\", mapping, _table).getMessage());\n-            } finally {\n-                closeConnection(conn);\n+            if (suspendInJTA()) {\n+                // NotSupportedException is wrapped in a StoreException by\n+                // the caller.\n+                try {\n+                _conf.getManagedRuntimeInstance().doNonTransactionalWork(\n+                        runnable);\n+                }\n+                catch(NotSupportedException nse) { \n+                    SQLException sqlEx = new SQLException(nse.getLocalizedMessage());\n+                    sqlEx.initCause(nse);\n+                    throw sqlEx;\n+                }\n+            } else {\n+                runnable.run();\n             }\n-        } catch (SQLException se2) {\n-            throw SQLExceptions.getStore(_loc.get(\"bad-seq-up\", _table),\n-                se2, _conf.getDBDictionaryInstance());\n-        } \n+        } catch (RuntimeException re) {\n+            Throwable e = re.getCause();\n+            if(e instanceof SQLException ) \n+                throw (SQLException) e;\n+            else \n+                throw re;\n+        }\n     }\n \n     /**\n-     * Inserts the initial sequence information into the database, if any.\n+     * Inserts the initial sequence column into the database.\n+     * \n+     * @param mapping\n+     *            ClassMapping for the class whose sequence column will be\n+     *            updated\n+     * @param conn\n+     *            Connection used issue SQL statements.\n      */\n     private void insertSequence(ClassMapping mapping, Connection conn)\n         throws SQLException {\n@@ -442,7 +441,16 @@ private void insertSequence(ClassMapping mapping, Connection conn)\n     }\n \n     /**\n-     * Return the current sequence value, or -1 if unattainable.\n+     * Get the current sequence value.\n+     * \n+     * @param mapping\n+     *            ClassMapping of the entity whose sequence value will be\n+     *            obtained.\n+     * @param conn\n+     *            Connection used issue SQL statements.\n+     * \n+     * @return The current sequence value, or <code>SEQUENCE_NOT_FOUND</code>\n+     *         if the sequence could not be found.\n      */\n     protected long getSequence(ClassMapping mapping, Connection conn)\n         throws SQLException {\n@@ -737,4 +745,116 @@ protected long getSequence(ResultSet rs, DBDictionary dict) throws SQLException\n             return -1;\n         return dict.getLong(rs, 1);\n     }\n+\n+    /**\n+     * AllocateSequenceRunnable is a runnable wrapper that will inserts the\n+     * initial sequence value into the database.\n+     */\n+    protected class AllocateSequenceRunnable implements Runnable {\n+\n+        JDBCStore store = null;\n+        ClassMapping mapping = null;\n+        Status stat = null;\n+        int alloc;\n+        boolean updateStatSeq;\n+\n+        AllocateSequenceRunnable(JDBCStore store, ClassMapping mapping,\n+                Status stat, int alloc, boolean updateStatSeq) {\n+            this.store = store;\n+            this.mapping = mapping;\n+            this.stat = stat;\n+            this.alloc = alloc;\n+            this.updateStatSeq = updateStatSeq;\n+        }\n+\n+        /**\n+         * This method actually obtains the current sequence value.\n+         * \n+         * @throws RuntimeException\n+         *             any SQLExceptions that occur when obtaining the sequence\n+         *             value are wrapped in a runtime exception to avoid\n+         *             breaking the Runnable method signature. The caller can\n+         *             obtain the \"real\" exception by calling getCause().\n+         */\n+        public void run() throws RuntimeException {\n+            Connection conn = null;\n+            SQLException err = null;\n+            try {\n+                // Try to use the store's connection.\n+                \n+                conn = getConnection(store);  \n+                boolean sequenceSet =\n+                    setSequence(mapping, stat, alloc, updateStatSeq, conn);\n+                closeConnection(conn);\n+\n+                if (!sequenceSet) {\n+                    // insert a new sequence column. \n+                    // Prefer connection2 / non-jta-data-source when inserting \n+                    // a sequence column regardless of Seq.type.\n+                    conn = _conf.getDataSource2(store.getContext())\n+                                .getConnection();\n+                    insertSequence(mapping, conn);\n+                    conn.close();\n+\n+                    // now we should be able to update using the connection per\n+                    // on the seq type.\n+                    conn = getConnection(store);\n+                    if (!setSequence(mapping, stat, alloc, updateStatSeq, conn))\n+                    {\n+                        throw (err != null) ? err : new SQLException(_loc.get(\n+                                \"no-seq-row\", mapping, _table).getMessage());\n+                    }\n+                    closeConnection(conn);\n+                }\n+            } catch (SQLException e) {\n+                if (conn != null) {\n+                    closeConnection(conn);\n+                }\n+                RuntimeException re = new RuntimeException(e.getMessage());\n+                re.initCause(e);\n+                throw re;\n+            }\n+        }\n+    }\n+\n+    /**\n+     * CurentSequenceRunnable is a runnable wrapper which obtains the current\n+     * sequence value from the database.\n+     */\n+    protected class CurrentSequenceRunnable implements Runnable {\n+        private JDBCStore _store;\n+        private ClassMapping _mapping;\n+\n+        CurrentSequenceRunnable(JDBCStore store, ClassMapping mapping) {\n+            _store = store;\n+            _mapping = mapping;\n+        }\n+\n+        /**\n+         * This method actually obtains the current sequence value.\n+         * \n+         * @throws RuntimeException\n+         *             any SQLExceptions that occur when obtaining the sequence\n+         *             value are wrapped in a runtime exception to avoid\n+         *             breaking the Runnable method signature. The caller can\n+         *             obtain the \"real\" exception by calling getCause().\n+         */\n+        public void run() throws RuntimeException {\n+            Connection conn = null;\n+            try {\n+                conn = getConnection(_store);\n+                long cur = getSequence(_mapping, conn);\n+                if (cur != -1 ) // USE the constant\n+                    current = Numbers.valueOf(cur);\n+            } catch (SQLException sqle) {\n+                RuntimeException re = new RuntimeException(sqle.getMessage());\n+                re.initCause(sqle);\n+                throw re;\n+            } finally {\n+                if (conn != null) {\n+                    closeConnection(conn);\n+                }\n+            }\n+        }\n+    }\n }"},{"sha":"ccdc3595e3de966ac690f987d2a4ac40a3a0c4ac","filename":"openjpa-kernel/pom.xml","status":"modified","additions":11,"deletions":2,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/bd2afc3f70b3fc8f1f132403dfc7ae98fb5a0a60/openjpa-kernel/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/bd2afc3f70b3fc8f1f132403dfc7ae98fb5a0a60/openjpa-kernel/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/pom.xml?ref=bd2afc3f70b3fc8f1f132403dfc7ae98fb5a0a60","patch":"@@ -52,8 +52,8 @@\n         <dependency>\r\n             <groupId>commons-pool</groupId>\r\n             <artifactId>commons-pool</artifactId>\r\n-            <scope>compile</scope>\r\n-        </dependency>\r\n+            <scope>compile</scope>\n+        </dependency>\n     </dependencies>\r\n     <build>\r\n         <plugins>\r\n@@ -142,6 +142,15 @@\n \t\t\t\t\t\t</goals>\r\n \t\t\t\t\t</execution>\r\n                 </executions>\r\n+            </plugin>\n+            <plugin>\n+                <artifactId>maven-jar-plugin</artifactId>\n+                <version>2.2</version>\n+                <configuration>\n+                    <excludes>\n+                        <exclude>**/com/ibm/**</exclude>\n+                    </excludes>\n+                </configuration>                \n             </plugin>\r\n         </plugins>\r\n     </build>\r"},{"sha":"c8d6e9e96baaf26e8dd5fff105f4b0ee90899738","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/ee/AbstractManagedRuntime.java","status":"modified","additions":68,"deletions":1,"changes":69,"blob_url":"https://github.com/apache/openjpa/blob/bd2afc3f70b3fc8f1f132403dfc7ae98fb5a0a60/openjpa-kernel/src/main/java/org/apache/openjpa/ee/AbstractManagedRuntime.java","raw_url":"https://github.com/apache/openjpa/raw/bd2afc3f70b3fc8f1f132403dfc7ae98fb5a0a60/openjpa-kernel/src/main/java/org/apache/openjpa/ee/AbstractManagedRuntime.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/ee/AbstractManagedRuntime.java?ref=bd2afc3f70b3fc8f1f132403dfc7ae98fb5a0a60","patch":"@@ -17,7 +17,14 @@\n \n package org.apache.openjpa.ee;\n \n+import javax.transaction.InvalidTransactionException;\n+import javax.transaction.NotSupportedException;\n import javax.transaction.SystemException;\n+import javax.transaction.Transaction;\n+import javax.transaction.TransactionManager;\n+\n+import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.util.GeneralException;\n \n /*\n  * AbstractManagedRuntime.java\n@@ -26,7 +33,9 @@\n  *\n  */\n public abstract class AbstractManagedRuntime implements ManagedRuntime {\n-    \n+\n+    private static Localizer _loc =\n+        Localizer.forPackage(AbstractManagedRuntime.class);\n     /**\n      * Returns a transaction key that can be used to associate transactions\n      * and Brokers.\n@@ -38,4 +47,62 @@ public Object getTransactionKey() throws Exception, SystemException {\n         return getTransactionManager().getTransaction();\n     }\n \n+    /**\n+     * <P>\n+     * Do a unit of work which will execute outside of the current managed\n+     * transaction. The default implementation suspends the transaction prior to\n+     * execution, and resumes the transaction afterwards.\n+     * </P>\n+     * \n+     * @param runnable\n+     *            The runnable wrapper for the work that will be done. The\n+     *            runnable object should be fully initialized with any state\n+     *            needed to execute.\n+     * \n+     * @throws NotSupportedException\n+     *            if the current transaction can not be obtained, or an error \n+     *            occurs when suspending or resuming the transaction.\n+     */\n+    public void doNonTransactionalWork(Runnable runnable) throws \n+            NotSupportedException {\n+        TransactionManager tm = null;\n+        Transaction transaction = null;\n+        \n+        try { \n+            tm = getTransactionManager(); \n+        }\n+        catch(Exception e) {\n+            NotSupportedException nse =\n+                new NotSupportedException(e.getMessage());\n+            nse.initCause(e);\n+            throw nse;\n+        }\n+        try {\n+            transaction = tm.suspend();\n+        } catch (Exception e) {\n+            NotSupportedException nse = new NotSupportedException(  \n+                    _loc.get(\"exc-suspend-tran\", e.getClass()).getMessage());\n+            nse.initCause(e);\n+            throw nse;\n+        }\n+        \n+        runnable.run();\n+        \n+        try {\n+            tm.resume(transaction);\n+        } catch (Exception e) {\n+            try {\n+                transaction.setRollbackOnly();\n+            }\n+            catch(SystemException se2) {\n+                throw new GeneralException(se2);\n+            }\n+            NotSupportedException nse =\n+                new NotSupportedException(\n+                        _loc.get(\"exc-resume-tran\", e.getClass()).getMessage());\n+            nse.initCause(e);\n+            throw nse;\n+        } \n+\n+    }\n }"},{"sha":"0c072a08b73a67fb47907a41e11b01b00543add3","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/ee/AutomaticManagedRuntime.java","status":"modified","additions":60,"deletions":5,"changes":65,"blob_url":"https://github.com/apache/openjpa/blob/bd2afc3f70b3fc8f1f132403dfc7ae98fb5a0a60/openjpa-kernel/src/main/java/org/apache/openjpa/ee/AutomaticManagedRuntime.java","raw_url":"https://github.com/apache/openjpa/raw/bd2afc3f70b3fc8f1f132403dfc7ae98fb5a0a60/openjpa-kernel/src/main/java/org/apache/openjpa/ee/AutomaticManagedRuntime.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/ee/AutomaticManagedRuntime.java?ref=bd2afc3f70b3fc8f1f132403dfc7ae98fb5a0a60","patch":"@@ -21,11 +21,13 @@\n import java.util.LinkedList;\n import java.util.List;\n \n+import javax.transaction.NotSupportedException;\n import javax.transaction.SystemException;\n import javax.transaction.TransactionManager;\n \n import org.apache.openjpa.lib.conf.Configurable;\n import org.apache.openjpa.lib.conf.Configuration;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.util.InvalidStateException;\n \n@@ -73,6 +75,7 @@\n     private static final WLSManagedRuntime WLS;\n     private static final SunOneManagedRuntime SUNONE;\n     private static final WASManagedRuntime WAS;\n+    private static final WASRegistryManagedRuntime WAS_REG;\n \n     private static Localizer _loc = Localizer.forPackage\n         (AutomaticManagedRuntime.class);\n@@ -108,24 +111,57 @@\n         mr = null;\n         try {\n             mr = new WASManagedRuntime();\n+        } catch (Throwable t) {\n         }\n-        catch (Throwable t) {\n+        WAS = (WASManagedRuntime) mr;\n+\n+        mr = null;\n+        try {\n+            // In a WebSphere environment the thread's current classloader might\n+            // not have access to the WebSphere APIs. However the \"runtime\"\n+            // classloader will have access to them.\n+            \n+            // Should not need a doPriv getting this class' classloader\n+            ClassLoader cl = AutomaticManagedRuntime.class.getClassLoader();\n+\n+            Class<WASRegistryManagedRuntime> mrClass =\n+                (Class<WASRegistryManagedRuntime>) J2DoPrivHelper\n+                        .getForNameAction(\n+                                WASRegistryManagedRuntime.class.getName(),\n+                                true, cl).run();\n+            mr = J2DoPrivHelper.newInstanceAction(mrClass).run();\n+        } catch (Throwable t) {\n+            // safe to ignore\n         }\n-        WAS= (WASManagedRuntime) mr;\n+        WAS_REG = (WASRegistryManagedRuntime) mr;\n     }\n \n     private Configuration _conf = null;\n     private ManagedRuntime _runtime = null;\n-\n+    \n     public TransactionManager getTransactionManager()\n         throws Exception {\n         if (_runtime != null)\n             return _runtime.getTransactionManager();\n \n-        List errors = new LinkedList();\n+        List<Throwable> errors = new LinkedList<Throwable>();\n         TransactionManager tm = null;\n \n-        // first try the registry, which is the official way to obtain\n+        // Try the registry extensions first so that any applicable vendor\n+        // specific extensions are used.\n+        if (WAS_REG != null) {\n+            try {\n+                tm = WAS_REG.getTransactionManager();\n+            } catch (Throwable t) {\n+                errors.add(t);\n+            }\n+            if (tm != null) {\n+                _runtime = WAS_REG;\n+                return tm;\n+            }\n+        }\n+\n+        // Then try the registry, which is the official way to obtain\n         // transaction synchronication in JTA 1.1\n         if (REGISTRY != null) {\n             try {\n@@ -256,4 +292,23 @@ public Object getTransactionKey() throws Exception, SystemException {\n         \n         return null;\n     }\n+\n+    /**\n+     * Delegate nonTransactional work to the appropriate managed runtime. If no\n+     * managed runtime is found then delegate {@link AbstractManagedRuntime}.\n+     */\n+    public void doNonTransactionalWork(Runnable runnable)\n+            throws NotSupportedException {\n+        // Obtain a transaction manager to initialize the runtime.\n+        try {\n+            getTransactionManager();\n+        } catch (Exception e) {\n+            NotSupportedException nse =\n+                new NotSupportedException(_loc\n+                        .get(\"tm-unavailable\", _runtime).getMessage());\n+            nse.initCause(e);\n+            throw nse;\n+        }\n+        _runtime.doNonTransactionalWork(runnable);\n+    }\n }"},{"sha":"0ef4a0983b02fb938148527c9284f9fa50b6a7f2","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/ee/ManagedRuntime.java","status":"modified","additions":23,"deletions":1,"changes":24,"blob_url":"https://github.com/apache/openjpa/blob/bd2afc3f70b3fc8f1f132403dfc7ae98fb5a0a60/openjpa-kernel/src/main/java/org/apache/openjpa/ee/ManagedRuntime.java","raw_url":"https://github.com/apache/openjpa/raw/bd2afc3f70b3fc8f1f132403dfc7ae98fb5a0a60/openjpa-kernel/src/main/java/org/apache/openjpa/ee/ManagedRuntime.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/ee/ManagedRuntime.java?ref=bd2afc3f70b3fc8f1f132403dfc7ae98fb5a0a60","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.openjpa.ee;\n \n+import javax.transaction.NotSupportedException;\n import javax.transaction.SystemException;\n import javax.transaction.TransactionManager;\n \n@@ -65,5 +66,26 @@ public Throwable getRollbackCause()\n      */\n     public Object getTransactionKey()\n         throws Exception, SystemException;\n-    \n+\n+    /**\n+     * <P>\n+     * Do a unit of work which will execute outside of the current managed\n+     * transaction.\n+     * </P>\n+     * <P>\n+     * If the runnable object encounters an exception it should be wrapped in a\n+     * RuntimeException and thrown back to the caller\n+     * </P>\n+     * \n+     * @param runnable\n+     *            The runnable wrapper for the work that will be done. The\n+     *            runnable object should be fully initialized with any state\n+     *            needed to execute.\n+     * \n+     * @throws NotSupportedException\n+     *             if the transaction can not be suspended.\n+     */\n+    public void doNonTransactionalWork(Runnable runnable)\n+            throws NotSupportedException;\n+  \n }"},{"sha":"4517eb04ec7dad4f5af138924c2b81779344b20c","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/ee/RegistryManagedRuntime.java","status":"modified","additions":15,"deletions":1,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/bd2afc3f70b3fc8f1f132403dfc7ae98fb5a0a60/openjpa-kernel/src/main/java/org/apache/openjpa/ee/RegistryManagedRuntime.java","raw_url":"https://github.com/apache/openjpa/raw/bd2afc3f70b3fc8f1f132403dfc7ae98fb5a0a60/openjpa-kernel/src/main/java/org/apache/openjpa/ee/RegistryManagedRuntime.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/ee/RegistryManagedRuntime.java?ref=bd2afc3f70b3fc8f1f132403dfc7ae98fb5a0a60","patch":"@@ -32,6 +32,8 @@\n import javax.transaction.TransactionSynchronizationRegistry;\n import javax.transaction.xa.XAResource;\n \n+import org.apache.openjpa.lib.util.Localizer;\n+\n /**\n  * Implementation of the {@link ManagedRuntime} interface that uses \n  * the {@link TransactionSynchronizationRegistry} interface (new in JTA 1.1)\n@@ -42,10 +44,12 @@\n  */\n public class RegistryManagedRuntime\n     implements ManagedRuntime {\n-\n     private String _registryName =\n         \"java:comp/TransactionSynchronizationRegistry\";\n     private TransactionManagerRegistryFacade _tm = null;\n+    \n+    private static Localizer _loc =\n+        Localizer.forPackage(RegistryManagedRuntime.class);\n \n     /**\n      * Return the cached TransactionManager instance.\n@@ -188,5 +192,15 @@ public boolean enlistResource(XAResource xaRes)\n             throw new SystemException();\n         }\n     }\n+    \n+    /**\n+     * <P>\n+     * RegistryManagedRuntime cannot suspend transactions.\n+     * </P>\n+     */\n+    public void doNonTransactionalWork(Runnable runnable) throws NotSupportedException {\n+        throw new NotSupportedException(\n+                _loc.get(\"tsr-cannot-suspend\").getMessage());\n+    }\n }\n "},{"sha":"818b060237b59ac3589048fa661f37758197ed3b","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/ee/WASRegistryManagedRuntime.java","status":"added","additions":74,"deletions":0,"changes":74,"blob_url":"https://github.com/apache/openjpa/blob/bd2afc3f70b3fc8f1f132403dfc7ae98fb5a0a60/openjpa-kernel/src/main/java/org/apache/openjpa/ee/WASRegistryManagedRuntime.java","raw_url":"https://github.com/apache/openjpa/raw/bd2afc3f70b3fc8f1f132403dfc7ae98fb5a0a60/openjpa-kernel/src/main/java/org/apache/openjpa/ee/WASRegistryManagedRuntime.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/ee/WASRegistryManagedRuntime.java?ref=bd2afc3f70b3fc8f1f132403dfc7ae98fb5a0a60","patch":"@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.ee;\n+\n+import com.ibm.wsspi.uow.UOWAction;\n+import com.ibm.wsspi.uow.UOWActionException;\n+import com.ibm.wsspi.uow.UOWException;\n+import com.ibm.wsspi.uow.UOWManager;\n+import com.ibm.wsspi.uow.UOWManagerFactory;\n+\n+/**\n+ * WASRegistryManagedRuntime provides WebSphere specific extensions to\n+ * {@link RegistryManagedRuntime}. Currently these extensions consist of using\n+ * the WebSphere UOWManager interface to submit non transactional work.\n+ */\n+public class WASRegistryManagedRuntime extends RegistryManagedRuntime {\n+    /**\n+     * <P>\n+     * RegistryManagedRuntime cannot suspend transactions, but WebSphere \n+     * provides an interface to submit work outside of the current tran.\n+     * </P>\n+     */\n+    public void doNonTransactionalWork(Runnable runnable)\n+            throws RuntimeException, UnsupportedOperationException {\n+        try {\n+            UOWManagerFactory.getUOWManager().runUnderUOW(\n+                UOWManager.UOW_TYPE_LOCAL_TRANSACTION, false,\n+                new DelegatingUOWAction(runnable));\n+        }\n+        catch(UOWActionException e ) {\n+            RuntimeException re = new RuntimeException(e.getMessage());\n+            re.initCause(e);\n+            throw re;\n+        }\n+        catch(UOWException e ) {\n+            RuntimeException re = new RuntimeException(e.getMessage());\n+            re.initCause(e);\n+            throw re;\n+        }\n+    }\n+\n+    \n+    /**\n+     * Delegate for the WebSphere proprietary UOWAction interface. Enables a \n+     * {$link Runnable} to be passed in to the WebSphere UOWManager.  \n+     */\n+    class DelegatingUOWAction implements UOWAction {\n+        Runnable _del;\n+\n+        public DelegatingUOWAction(Runnable delegate) {\n+            _del = delegate;\n+        }\n+\n+        public void run() throws Exception {\n+            _del.run();\n+        }\n+    }\n+}"},{"sha":"d13c92b071cae3b550e75528a09f19f7bb96dd57","filename":"openjpa-kernel/src/main/resources/com/ibm/license.txt","status":"added","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/bd2afc3f70b3fc8f1f132403dfc7ae98fb5a0a60/openjpa-kernel/src/main/resources/com/ibm/license.txt","raw_url":"https://github.com/apache/openjpa/raw/bd2afc3f70b3fc8f1f132403dfc7ae98fb5a0a60/openjpa-kernel/src/main/resources/com/ibm/license.txt","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/com/ibm/license.txt?ref=bd2afc3f70b3fc8f1f132403dfc7ae98fb5a0a60","patch":"@@ -0,0 +1,18 @@\n+You may use or redistribute the files or modules contained in this jar subject to the following terms:  \n+\n+The WebSphere Application Server files or modules contained in this jar \n+may be redistrubuted as provided by IBM to you, and only as part of Your \n+application distribution.  \n+\n+You may not use IBM's name or trademarks in connection with the marketing \n+of Your applications without IBM's prior written consent.  \n+\n+IBM PROVIDES THESE FILES OR MODULES ON AN \"AS IS\" BASIS AND IBM DISCLAIMS \n+ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE \n+WARRANTY OF NON-INFRINGEMENT AND THE IMPLIED WARRANTIES OF MERCHANTABILITY \n+OR FITNESS FOR A PARTICULAR PURPOSE.  IBM SHALL NOT BE LIABLE FOR ANY \n+DIRECT, INDIRECT, INCIDENTAL, SPECIAL OR CONSEQUENTIAL DAMAGES ARISING OUT \n+OF THE USE OR OPERATION OF THE FILES OR MODULES .  IBM HAS NO OBLIGATION \n+TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS OR MODIFICATIONS TO \n+THE FILES OR MODULES .  \n+"},{"sha":"0e45c9911e9041191d40638ed69ce11a38b5a7ca","filename":"openjpa-kernel/src/main/resources/com/ibm/websphere/uow/UOWSynchronizationRegistry.class","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/bd2afc3f70b3fc8f1f132403dfc7ae98fb5a0a60/openjpa-kernel/src/main/resources/com/ibm/websphere/uow/UOWSynchronizationRegistry.class","raw_url":"https://github.com/apache/openjpa/raw/bd2afc3f70b3fc8f1f132403dfc7ae98fb5a0a60/openjpa-kernel/src/main/resources/com/ibm/websphere/uow/UOWSynchronizationRegistry.class","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/com/ibm/websphere/uow/UOWSynchronizationRegistry.class?ref=bd2afc3f70b3fc8f1f132403dfc7ae98fb5a0a60"},{"sha":"2af0240f1918044544a7cb10db4073dc8dfc24be","filename":"openjpa-kernel/src/main/resources/com/ibm/wsspi/uow/UOWAction.class","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/bd2afc3f70b3fc8f1f132403dfc7ae98fb5a0a60/openjpa-kernel/src/main/resources/com/ibm/wsspi/uow/UOWAction.class","raw_url":"https://github.com/apache/openjpa/raw/bd2afc3f70b3fc8f1f132403dfc7ae98fb5a0a60/openjpa-kernel/src/main/resources/com/ibm/wsspi/uow/UOWAction.class","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/com/ibm/wsspi/uow/UOWAction.class?ref=bd2afc3f70b3fc8f1f132403dfc7ae98fb5a0a60"},{"sha":"08d2cf5701a42bd633905a5066f278e29a7c163e","filename":"openjpa-kernel/src/main/resources/com/ibm/wsspi/uow/UOWActionException.class","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/bd2afc3f70b3fc8f1f132403dfc7ae98fb5a0a60/openjpa-kernel/src/main/resources/com/ibm/wsspi/uow/UOWActionException.class","raw_url":"https://github.com/apache/openjpa/raw/bd2afc3f70b3fc8f1f132403dfc7ae98fb5a0a60/openjpa-kernel/src/main/resources/com/ibm/wsspi/uow/UOWActionException.class","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/com/ibm/wsspi/uow/UOWActionException.class?ref=bd2afc3f70b3fc8f1f132403dfc7ae98fb5a0a60"},{"sha":"59d42e37fe054cb0c8b30a17b82bfe4d31568307","filename":"openjpa-kernel/src/main/resources/com/ibm/wsspi/uow/UOWException.class","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/bd2afc3f70b3fc8f1f132403dfc7ae98fb5a0a60/openjpa-kernel/src/main/resources/com/ibm/wsspi/uow/UOWException.class","raw_url":"https://github.com/apache/openjpa/raw/bd2afc3f70b3fc8f1f132403dfc7ae98fb5a0a60/openjpa-kernel/src/main/resources/com/ibm/wsspi/uow/UOWException.class","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/com/ibm/wsspi/uow/UOWException.class?ref=bd2afc3f70b3fc8f1f132403dfc7ae98fb5a0a60"},{"sha":"a229c966b365d1e408005a837a63050b84c34eed","filename":"openjpa-kernel/src/main/resources/com/ibm/wsspi/uow/UOWManager.class","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/bd2afc3f70b3fc8f1f132403dfc7ae98fb5a0a60/openjpa-kernel/src/main/resources/com/ibm/wsspi/uow/UOWManager.class","raw_url":"https://github.com/apache/openjpa/raw/bd2afc3f70b3fc8f1f132403dfc7ae98fb5a0a60/openjpa-kernel/src/main/resources/com/ibm/wsspi/uow/UOWManager.class","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/com/ibm/wsspi/uow/UOWManager.class?ref=bd2afc3f70b3fc8f1f132403dfc7ae98fb5a0a60"},{"sha":"8a8e0a26cffe4dc48acbfabb3c596062b02f03f8","filename":"openjpa-kernel/src/main/resources/com/ibm/wsspi/uow/UOWManagerFactory.class","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/bd2afc3f70b3fc8f1f132403dfc7ae98fb5a0a60/openjpa-kernel/src/main/resources/com/ibm/wsspi/uow/UOWManagerFactory.class","raw_url":"https://github.com/apache/openjpa/raw/bd2afc3f70b3fc8f1f132403dfc7ae98fb5a0a60/openjpa-kernel/src/main/resources/com/ibm/wsspi/uow/UOWManagerFactory.class","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/com/ibm/wsspi/uow/UOWManagerFactory.class?ref=bd2afc3f70b3fc8f1f132403dfc7ae98fb5a0a60"},{"sha":"db6ae7bd17f2af4464731dd82db9b21e0b44181a","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/ee/localizer.properties","status":"modified","additions":15,"deletions":7,"changes":22,"blob_url":"https://github.com/apache/openjpa/blob/bd2afc3f70b3fc8f1f132403dfc7ae98fb5a0a60/openjpa-kernel/src/main/resources/org/apache/openjpa/ee/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/bd2afc3f70b3fc8f1f132403dfc7ae98fb5a0a60/openjpa-kernel/src/main/resources/org/apache/openjpa/ee/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/ee/localizer.properties?ref=bd2afc3f70b3fc8f1f132403dfc7ae98fb5a0a60","patch":"@@ -18,19 +18,27 @@\n tm-not-found: Could not perform automatic lookup of EJB container''s \\\r\n \tjavax.transaction.TransactionManager implementation. Please ensure that \\\r\n \tyou are running the application from within an EJB 1.1 compliant EJB \\\r\n-\tcontainer, and then set the org.apache.openjpa.ManagedRuntime property to the \\\r\n-\tappropriate value to obtain the TransactionManager.\r\n+\tcontainer, and then set the org.apache.openjpa.ManagedRuntime property to \\ \r\n+\tthe\tappropriate value to obtain the TransactionManager.\r\n expected-reference: Expected object to be of type Reference, but instead was \\\r\n \t\"{0}\".\r\n not-supported: This operation is not supported.\r\n was-unsupported-op: Unable to execute {0} on a WebSphere managed transaction. \\\r\n \tWebSphere does not support direct manipulation of managed transactions.\r\n-was-transaction-id-exception: Unable to determine identity of the current WebSphere \\\r\n-\tmanaged transaction. Please ensure that your are running the application from \\\r\n-\twithin WebSphere Application Server (version 5.0.2 or newer).\r\n+was-transaction-id-exception: Unable to determine identity of the current \\ \r\n+\tWebSphere managed transaction. Please ensure that your are running the \\\r\n+\tapplication from within WebSphere Application Server (version 5.0.2 or \\ \r\n+\tnewer).\r\n was-reflection-exception: An error occured reflecting WebSphere proprietary \\\r\n \tinterfaces. Please ensure that you are running the application from within \\\r\n \tWebSphere Application Server (version 5.0.2 or newer).\r\n was-lookup-error: An error occurred looking up the WebSphere extended JTA \\\r\n-\tservice. Please ensure that you are running the application from within WebSphere \\\r\n-\tApplication Server (version 5.0.2 or newer).\r\n+\tservice. Please ensure that you are running the application from within \\ \r\n+\tWebSphere Application Server (version 5.0.2 or newer).\r\n+tm-unavailable: Unable to obtain a TransactionManager using {0}. \r\n+tsr-cannot-suspend: The Transaction Synchronization Registry can not suspend \\\r\n+\tthe current transaction. \r\n+exc-suspend-tran: A {0} exception occurred when trying to suspend the current \\\r\n+\ttransaction. \r\n+exc-resume-tran: A {0} exception occurred when trying to resume the current \\\r\n+\ttransaction. The transaction will be marked rollback only.\n\\ No newline at end of file"},{"sha":"b9611e10eaf45da4c5751fd50902f0275b4a410f","filename":"openjpa-kernel/src/test/java/org/apache/openjpa/ee/TestWASManagedRuntime.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/bd2afc3f70b3fc8f1f132403dfc7ae98fb5a0a60/openjpa-kernel/src/test/java/org/apache/openjpa/ee/TestWASManagedRuntime.java","raw_url":"https://github.com/apache/openjpa/raw/bd2afc3f70b3fc8f1f132403dfc7ae98fb5a0a60/openjpa-kernel/src/test/java/org/apache/openjpa/ee/TestWASManagedRuntime.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/test/java/org/apache/openjpa/ee/TestWASManagedRuntime.java?ref=bd2afc3f70b3fc8f1f132403dfc7ae98fb5a0a60","patch":"@@ -36,7 +36,6 @@\n      * been modified via the maven build.\r\n      *\r\n      * @throws ClassNotFoundException\r\n-     * @author Michael Dick\r\n      */\r\n     public void testInterfaceAdded() throws ClassNotFoundException {\r\n \r"},{"sha":"35b3af3f5a4f23152a3856dd8fbaae82272360bb","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/J2DoPrivHelper.java","status":"modified","additions":14,"deletions":14,"changes":28,"blob_url":"https://github.com/apache/openjpa/blob/bd2afc3f70b3fc8f1f132403dfc7ae98fb5a0a60/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/J2DoPrivHelper.java","raw_url":"https://github.com/apache/openjpa/raw/bd2afc3f70b3fc8f1f132403dfc7ae98fb5a0a60/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/J2DoPrivHelper.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/J2DoPrivHelper.java?ref=bd2afc3f70b3fc8f1f132403dfc7ae98fb5a0a60","patch":"@@ -201,13 +201,13 @@ public Object run() {\n      * Requires security policy: 'permission java.lang.RuntimePermission\n      * \"getClassLoader\";'\n      * \n-     * @return Classloader\n+     * @return Class\n      */\n-    public static final PrivilegedExceptionAction getForNameAction(\n+    public static final PrivilegedExceptionAction<Class<?>> getForNameAction(\n         final String className, final boolean initializeBoolean,\n         final ClassLoader classLoader) {\n-        return new PrivilegedExceptionAction() {\n-            public Object run() throws ClassNotFoundException {\n+        return new PrivilegedExceptionAction<Class<?>>() {\n+            public Class<?> run() throws ClassNotFoundException {\n                 return Class.forName(className, initializeBoolean, classLoader);\n             }\n         };\n@@ -228,10 +228,10 @@ public Object run() throws ClassNotFoundException {\n      *   \n      * @return Classloader\n      */\n-    public static final PrivilegedAction getClassLoaderAction(\n+    public static final PrivilegedAction<ClassLoader> getClassLoaderAction(\n         final Class clazz) {\n-        return new PrivilegedAction() {\n-            public Object run() {\n+        return new PrivilegedAction<ClassLoader>() {\n+            public ClassLoader run() {\n                 return clazz.getClassLoader();\n             }\n         };\n@@ -330,21 +330,21 @@ public Object run() {\n      * Requires security policy:\n      *   'permission java.lang.RuntimePermission \"getClassLoader\";'\n      *   \n-     * @return Object\n-     * @exception IllegalAccessException\n+     * @return A new instance of the provided class.\n+     * @exception IllegalAccessException \n      * @exception InstantiationException\n      */\n-    public static final PrivilegedExceptionAction newInstanceAction(\n-        final Class clazz) throws IllegalAccessException,\n+    public static final <T> PrivilegedExceptionAction<T> newInstanceAction(\n+        final Class<T> clazz) throws IllegalAccessException,\n         InstantiationException {\n-        return new PrivilegedExceptionAction() {\n-            public Object run() throws IllegalAccessException,\n+        return new PrivilegedExceptionAction<T>() {\n+            public T run() throws IllegalAccessException,\n                     InstantiationException {\n                 return clazz.newInstance();\n             }\n         };\n     }\n-\n+    \n     /**\n      * Return a PrivilegeAction object for loader.getParent().\n      * "}]}

