{"sha":"bd50e177bb770396c10cec7ee8f85d0a01044ac4","node_id":"MDY6Q29tbWl0MjA2MzY0OmJkNTBlMTc3YmI3NzAzOTZjMTBjZWM3ZWU4Zjg1ZDBhMDEwNDRhYzQ=","commit":{"author":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2009-04-29T19:55:39Z"},"committer":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2009-04-29T19:55:39Z"},"message":"OPENJPA-932 Committing code and tests contributed by Rick Curtis\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@769901 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"836a2b94c3433ee08eea440b93f6ac10443de5ea","url":"https://api.github.com/repos/apache/openjpa/git/trees/836a2b94c3433ee08eea440b93f6ac10443de5ea"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/bd50e177bb770396c10cec7ee8f85d0a01044ac4","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/bd50e177bb770396c10cec7ee8f85d0a01044ac4","html_url":"https://github.com/apache/openjpa/commit/bd50e177bb770396c10cec7ee8f85d0a01044ac4","comments_url":"https://api.github.com/repos/apache/openjpa/commits/bd50e177bb770396c10cec7ee8f85d0a01044ac4/comments","author":null,"committer":null,"parents":[{"sha":"1677b481b2783ee02aeba8c7175a0ae27d18fa92","url":"https://api.github.com/repos/apache/openjpa/commits/1677b481b2783ee02aeba8c7175a0ae27d18fa92","html_url":"https://github.com/apache/openjpa/commit/1677b481b2783ee02aeba8c7175a0ae27d18fa92"}],"stats":{"total":240,"additions":237,"deletions":3},"files":[{"sha":"12a7b71636f10f6794dafd1b362c4df35d0b4008","filename":"openjpa-persistence/pom.xml","status":"modified","additions":52,"deletions":0,"changes":52,"blob_url":"https://github.com/apache/openjpa/blob/bd50e177bb770396c10cec7ee8f85d0a01044ac4/openjpa-persistence/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/bd50e177bb770396c10cec7ee8f85d0a01044ac4/openjpa-persistence/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/pom.xml?ref=bd50e177bb770396c10cec7ee8f85d0a01044ac4","patch":"@@ -54,6 +54,32 @@\n   \t\t    <id>jdk5-compiler</id>\n             <build>\n               <plugins>\n+\t\t\t\t\t<plugin>\n+\t\t\t\t\t\t<groupId>org.apache.maven.plugins</groupId>\n+\t\t\t\t\t\t<artifactId>maven-surefire-plugin</artifactId>\n+\t\t\t\t\t\t<configuration>\n+\t\t\t\t\t\t\t<additionalClasspathElements>\n+\t\t\t\t\t\t\t\t<additionalClasspathElement>${basedir}/target/test-classes/second-persistence.jar</additionalClasspathElement>\n+\t\t\t\t\t\t\t</additionalClasspathElements>\n+\t\t\t\t\t\t</configuration>\n+\t\t\t\t\t</plugin>\n+\t\t\t\t\t<plugin>\n+\t\t\t\t\t\t<artifactId>maven-antrun-plugin</artifactId>\n+\t\t\t\t\t\t<executions>\n+\t\t\t\t\t\t\t<execution>\n+\t\t\t\t\t\t\t\t<phase>test-compile</phase>\n+\t\t\t\t\t\t\t\t<configuration>\n+\t\t\t\t\t\t\t\t\t<tasks>\n+\t\t\t\t\t\t\t\t\t\t<jar destfile=\"${basedir}/target/test-classes/second-persistence.jar\"\n+\t\t\t\t\t\t\t\t\t\t\tbasedir=\"${basedir}/src/test/resources/second-persistence\" />\n+\t\t\t\t\t\t\t\t\t</tasks>\n+\t\t\t\t\t\t\t\t</configuration>\n+\t\t\t\t\t\t\t\t<goals>\n+\t\t\t\t\t\t\t\t\t<goal>run</goal>\n+\t\t\t\t\t\t\t\t</goals>\n+\t\t\t\t\t\t\t</execution>\n+\t\t\t\t\t\t</executions>\n+\t\t\t\t\t</plugin>\n \t\t        <plugin>\n \t\t    \t\t<groupId>org.apache.maven.plugins</groupId>\n \t\t    \t\t<artifactId>maven-compiler-plugin</artifactId>\n@@ -78,6 +104,32 @@\n   \t\t    <id>jdk6-compiler</id>\n             <build>\n               <plugins>\n+\t\t\t\t\t<plugin>\n+\t\t\t\t\t\t<groupId>org.apache.maven.plugins</groupId>\n+\t\t\t\t\t\t<artifactId>maven-surefire-plugin</artifactId>\n+\t\t\t\t\t\t<configuration>\n+\t\t\t\t\t\t\t<additionalClasspathElements>\n+\t\t\t\t\t\t\t\t<additionalClasspathElement>${basedir}/target/test-classes/second-persistence.jar</additionalClasspathElement>\n+\t\t\t\t\t\t\t</additionalClasspathElements>\n+\t\t\t\t\t\t</configuration>\n+\t\t\t\t\t</plugin>\n+\t\t\t\t\t<plugin>\n+\t\t\t\t\t\t<artifactId>maven-antrun-plugin</artifactId>\n+\t\t\t\t\t\t<executions>\n+\t\t\t\t\t\t\t<execution>\n+\t\t\t\t\t\t\t\t<phase>test-compile</phase>\n+\t\t\t\t\t\t\t\t<configuration>\n+\t\t\t\t\t\t\t\t\t<tasks>\n+\t\t\t\t\t\t\t\t\t\t<jar destfile=\"${basedir}/target/test-classes/second-persistence.jar\"\n+\t\t\t\t\t\t\t\t\t\t\tbasedir=\"${basedir}/src/test/resources/second-persistence\" />\n+\t\t\t\t\t\t\t\t\t</tasks>\n+\t\t\t\t\t\t\t\t</configuration>\n+\t\t\t\t\t\t\t\t<goals>\n+\t\t\t\t\t\t\t\t\t<goal>run</goal>\n+\t\t\t\t\t\t\t\t</goals>\n+\t\t\t\t\t\t\t</execution>\n+\t\t\t\t\t\t</executions>\n+\t\t\t\t\t</plugin>\n \t\t        <plugin>\n \t\t    \t\t<groupId>org.apache.maven.plugins</groupId>\n \t\t    \t\t<artifactId>maven-antrun-plugin</artifactId>"},{"sha":"c0d25d199e7b1d67030365e12f46928e3e6e4475","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java","status":"modified","additions":79,"deletions":3,"changes":82,"blob_url":"https://github.com/apache/openjpa/blob/bd50e177bb770396c10cec7ee8f85d0a01044ac4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java","raw_url":"https://github.com/apache/openjpa/raw/bd50e177bb770396c10cec7ee8f85d0a01044ac4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java?ref=bd50e177bb770396c10cec7ee8f85d0a01044ac4","patch":"@@ -27,9 +27,12 @@\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.Enumeration;\n+import java.util.HashMap;\n+import java.util.LinkedHashSet;\n import java.util.List;\n import java.util.Map;\n import java.util.MissingResourceException;\n+import java.util.Set;\n \n import javax.persistence.spi.PersistenceUnitInfo;\n import javax.persistence.spi.PersistenceUnitTransactionType;\n@@ -82,6 +85,8 @@\n     private static final Localizer _loc = Localizer.forPackage\n         (PersistenceProductDerivation.class);\n \n+    private HashMap<String, PUNameCollision> _puNameCollisions\n+        = new HashMap<String,PUNameCollision>();\n     public void putBrokerFactoryAliases(Map m) {\n     }\n \n@@ -266,15 +271,17 @@ public List getAnchorsInFile(File file) throws IOException {\n     public List getAnchorsInResource(String resource) throws Exception {\n         ConfigurationParser parser = new ConfigurationParser(null);\n         try {\n+        \tList results = new ArrayList();\n             ClassLoader loader = AccessController.doPrivileged(\n                 J2DoPrivHelper.getContextClassLoaderAction());\n             List<URL> urls = getResourceURLs(resource, loader);\n             if (urls != null) {\n                 for (URL url : urls) {\n                     parser.parse(url);\n+                    results.addAll(getUnitNames(parser));\n                 }\n             }\n-            return getUnitNames(parser);\n+            return results;\n         } catch (IOException e) {\n             // not all configuration files are XML; return null if unparsable\n             return null;\n@@ -318,6 +325,21 @@ public ConfigurationProvider loadDefaults(ClassLoader loader)\n         return null;\n     }\n \n+      /**\n+      * This method checks to see if the provided <code>puName</code> was\n+      * detected in multiple resources. If a collision is detected, a warning\n+      * will be logged and this method will return <code>true</code>.\n+      * <p>\n+      */\n+     public boolean checkPuNameCollisions(Log logger,String puName){\n+         PUNameCollision p = _puNameCollisions.get(puName);\n+         if(p!=null){\n+             p.logCollision(logger);\n+             return true;\n+         }\n+         return false;\n+     }\n+\n     private static List<URL> getResourceURLs(String rsrc, ClassLoader loader)\n         throws IOException {\n         Enumeration<URL> urls = null;\n@@ -407,11 +429,24 @@ private PersistenceUnitInfoImpl parseResources(ConfigurationParser parser,\n     private PersistenceUnitInfoImpl findUnit(List<PersistenceUnitInfoImpl> \n         pinfos, String name, ClassLoader loader) {\n         PersistenceUnitInfoImpl ojpa = null;\n+        PersistenceUnitInfoImpl result = null;\n         for (PersistenceUnitInfoImpl pinfo : pinfos) {\n             // found named unit?\n             if (name != null) {\n-                if (name.equals(pinfo.getPersistenceUnitName()))\n-                    return pinfo;\n+                if (name.equals(pinfo.getPersistenceUnitName())){\n+\n+                    if(result!=null){\n+                        this.addPuNameCollision(name,\n+                            result.getPersistenceXmlFileUrl().toString(),\n+                                pinfo.getPersistenceXmlFileUrl().toString());\n+\n+                    }else{\n+                        // Grab a ref to the pinfo that matches the name we're\n+                        // looking for. Keep going to look for duplicate pu\n+                        // names.\n+                        result = pinfo;\n+                    }\n+                }\n                 continue;\n             }\n \n@@ -425,6 +460,9 @@ private PersistenceUnitInfoImpl findUnit(List<PersistenceUnitInfoImpl>\n                     ojpa = pinfo;\n             }\n         }\n+        if(result!=null){\n+            return result;\n+        }\n         return ojpa;\n     }\n \n@@ -469,6 +507,16 @@ private static void log(String msg) {\n         System.err.println(msg);\n     }\n \n+    private void addPuNameCollision(String puName, String file1, String file2){\n+        PUNameCollision pun = _puNameCollisions.get(puName);\n+        if(pun!=null){\n+            pun.addCollision(file1, file2);\n+        }else{\n+            _puNameCollisions.put(puName,\n+            \tnew PUNameCollision(puName, file1, file2));\n+        }\n+\n+    }\n     /**\n      * Custom configuration provider.   \n      */\n@@ -691,4 +739,32 @@ private void startPersistenceUnit(Attributes attrs)\n                 _info.setPersistenceXmlFileUrl(_source);\n \t\t}\n \t}\n+    /**\n+     * This private class is used to hold onto information regarding\n+     * PersistentUnit name collisions.\n+     */\n+    private static class PUNameCollision{\n+        private String _puName;\n+        private Set<String> _resources;\n+\n+        PUNameCollision(String puName, String file1, String file2) {\n+            _resources = new LinkedHashSet<String>();\n+            _resources.add(file1);\n+            _resources.add(file2);\n+\n+            _puName=puName;\n+        }\n+        void logCollision(Log logger){\n+            if(logger.isWarnEnabled()){\n+                logger.warn(_loc.getFatal(\"dup-pu\",\n+                    new Object[]{_puName,_resources.toString(),\n+                    \t_resources.iterator().next()}));\n+            }\n+        }\n+        void addCollision(String file1, String file2){\n+            _resources.add(file1);\n+            _resources.add(file2);\n+        }\n+\n+    }\n }"},{"sha":"f8779914dd4644e901d5ce8369f3dedcc55d4951","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProviderImpl.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/bd50e177bb770396c10cec7ee8f85d0a01044ac4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProviderImpl.java","raw_url":"https://github.com/apache/openjpa/raw/bd50e177bb770396c10cec7ee8f85d0a01044ac4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProviderImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProviderImpl.java?ref=bd50e177bb770396c10cec7ee8f85d0a01044ac4","patch":"@@ -37,6 +37,7 @@\n import org.apache.openjpa.lib.conf.Configuration;\n import org.apache.openjpa.lib.conf.ConfigurationProvider;\n import org.apache.openjpa.lib.conf.Configurations;\n+import org.apache.openjpa.lib.conf.ProductDerivations;\n import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.meta.MetaDataModes;\n@@ -60,6 +61,7 @@\n     private static final Localizer _loc = Localizer.forPackage(\n         PersistenceProviderImpl.class);\n \n+    private Log _log;\n     /**\n      * Loads the entity manager specified by <code>name</code>, applying\n      * the properties in <code>m</code> as overrides to the properties defined\n@@ -80,6 +82,11 @@ public OpenJPAEntityManagerFactory createEntityManagerFactory(String name,\n                 return null;\n \n             BrokerFactory factory = getBrokerFactory(cp, poolValue, null);\n+            _log = factory.getConfiguration()\n+                .getLog(OpenJPAConfiguration.LOG_RUNTIME);\n+            if(pd.checkPuNameCollisions(_log,name)==true){\n+                ;//return null;\n+            }\n             return JPAFacadeHelper.toEntityManagerFactory(factory);\n         } catch (Exception e) {\n             throw PersistenceExceptions.toPersistenceException(e);"},{"sha":"19e34634f07ad1dff3e045b9a481230b3d8c5b46","filename":"openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/bd50e177bb770396c10cec7ee8f85d0a01044ac4/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/bd50e177bb770396c10cec7ee8f85d0a01044ac4/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties?ref=bd50e177bb770396c10cec7ee8f85d0a01044ac4","patch":"@@ -179,6 +179,9 @@ unwrap-em-invalid: EntityManager can not be unwrapped to an instance of \"{0}\".\n unwrap-query-invalid: Query can not be unwrapped to an instance of \"{0}\".\n invalid_entity_argument: Object being locked must be an valid and not detached \\\n     entity.\n+dup-pu: The persistence unit \"{0}\" was found multiple times in the following \\\n+\tresources \"{1}\", but persistence unit names should be unique. The first \\\n+\tpersistence unit matching the provided name in \"{2}\" is being used.    \n bad-lock-level: Invalid lock mode/level. Valid values are \\\n     \"none\"(0), \"read\"(10), \"optimistic\"(15), \"write\"(20), \\\n     \"optimistic-force-increment\"(25), \\"},{"sha":"42573a20d385a385e948bf026c5e90db23ef98a5","filename":"openjpa-persistence/src/test/java/org/apache/openjpa/persistence/TestPersistenceProductDerivation.java","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/apache/openjpa/blob/bd50e177bb770396c10cec7ee8f85d0a01044ac4/openjpa-persistence/src/test/java/org/apache/openjpa/persistence/TestPersistenceProductDerivation.java","raw_url":"https://github.com/apache/openjpa/raw/bd50e177bb770396c10cec7ee8f85d0a01044ac4/openjpa-persistence/src/test/java/org/apache/openjpa/persistence/TestPersistenceProductDerivation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/test/java/org/apache/openjpa/persistence/TestPersistenceProductDerivation.java?ref=bd50e177bb770396c10cec7ee8f85d0a01044ac4","patch":"@@ -0,0 +1,43 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import junit.framework.TestCase;\n+\n+public class TestPersistenceProductDerivation extends TestCase {\n+\n+    /**\n+     * Added for OPENJPA-932. Verifies a ppd properly loads pu's from multiple archives.\n+     * \n+     * @throws Exception\n+     */\n+    public void testGetAnchorsInResource()throws Exception{\n+        \n+        List<String> expectedPUs = Arrays.asList(\n+            new String[]{\"pu_1\",\"pu_2\",\"pu_3\"});\n+        \n+        PersistenceProductDerivation ppd = new PersistenceProductDerivation();\n+        List actual = ppd.getAnchorsInResource(\"META-INF/persistence.xml\");\n+        \n+        assertEquals(expectedPUs, actual);        \n+    }\n+}"},{"sha":"334dd3f3e8d1a12337a1f7ebc8028c843cc99cbc","filename":"openjpa-persistence/src/test/resources/META-INF/persistence.xml","status":"added","additions":27,"deletions":0,"changes":27,"blob_url":"https://github.com/apache/openjpa/blob/bd50e177bb770396c10cec7ee8f85d0a01044ac4/openjpa-persistence/src/test/resources/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/bd50e177bb770396c10cec7ee8f85d0a01044ac4/openjpa-persistence/src/test/resources/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/test/resources/META-INF/persistence.xml?ref=bd50e177bb770396c10cec7ee8f85d0a01044ac4","patch":"@@ -0,0 +1,27 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+ \n+ http://www.apache.org/licenses/LICENSE-2.0\n+ \n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.   \n+-->\n+<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\"\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    version=\"1.0\">\n+    <persistence-unit name=\"pu_1\" transaction-type=\"RESOURCE_LOCAL\">\n+    </persistence-unit>      \n+    <persistence-unit name=\"pu_2\" transaction-type=\"RESOURCE_LOCAL\">\n+    </persistence-unit>      \n+</persistence>"},{"sha":"a4623fe931c51b2bde47c4a433116dd3105af950","filename":"openjpa-persistence/src/test/resources/second-persistence/META-INF/persistence.xml","status":"added","additions":26,"deletions":0,"changes":26,"blob_url":"https://github.com/apache/openjpa/blob/bd50e177bb770396c10cec7ee8f85d0a01044ac4/openjpa-persistence/src/test/resources/second-persistence/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/bd50e177bb770396c10cec7ee8f85d0a01044ac4/openjpa-persistence/src/test/resources/second-persistence/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/test/resources/second-persistence/META-INF/persistence.xml?ref=bd50e177bb770396c10cec7ee8f85d0a01044ac4","patch":"@@ -0,0 +1,26 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+ \n+ http://www.apache.org/licenses/LICENSE-2.0\n+ \n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.   \n+-->\n+<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\"\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    version=\"1.0\">\n+    <persistence-unit name=\"pu_3\" transaction-type=\"RESOURCE_LOCAL\">\n+    </persistence-unit>       \n+</persistence>\n+"}]}

