{"sha":"bd51cad23f96e2febfdcde4abc83350b11aeba4d","node_id":"MDY6Q29tbWl0MjA2MzY0OmJkNTFjYWQyM2Y5NmUyZmViZmRjZGU0YWJjODMzNTBiMTFhZWJhNGQ=","commit":{"author":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-06-21T15:44:06Z"},"committer":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-06-21T15:44:06Z"},"message":"Changed checking for javax.xml.bind.annotation.XmlType to use reflection instead of a hard-wired class name so we more gracefully handle cases where JAXB is not available.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@549517 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"053484177502948a71e4b5d444a4287ab04ceb76","url":"https://api.github.com/repos/apache/openjpa/git/trees/053484177502948a71e4b5d444a4287ab04ceb76"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/bd51cad23f96e2febfdcde4abc83350b11aeba4d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/bd51cad23f96e2febfdcde4abc83350b11aeba4d","html_url":"https://github.com/apache/openjpa/commit/bd51cad23f96e2febfdcde4abc83350b11aeba4d","comments_url":"https://api.github.com/repos/apache/openjpa/commits/bd51cad23f96e2febfdcde4abc83350b11aeba4d/comments","author":null,"committer":null,"parents":[{"sha":"cc8ac0bc6424ecb46d4ee7893ab0c2df0bbce91a","url":"https://api.github.com/repos/apache/openjpa/commits/cc8ac0bc6424ecb46d4ee7893ab0c2df0bbce91a","html_url":"https://github.com/apache/openjpa/commit/cc8ac0bc6424ecb46d4ee7893ab0c2df0bbce91a"}],"stats":{"total":14,"additions":11,"deletions":3},"files":[{"sha":"6c40dce56370aa13d260ce556ddec2e42c0971a4","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java","status":"modified","additions":11,"deletions":3,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/bd51cad23f96e2febfdcde4abc83350b11aeba4d/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java","raw_url":"https://github.com/apache/openjpa/raw/bd51cad23f96e2febfdcde4abc83350b11aeba4d/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java?ref=bd51cad23f96e2febfdcde4abc83350b11aeba4d","patch":"@@ -51,7 +51,6 @@\n import javax.persistence.TableGenerator;\n import javax.persistence.Temporal;\n import javax.persistence.UniqueConstraint;\n-import javax.xml.bind.annotation.XmlType;\n \n import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n@@ -1023,6 +1022,14 @@ protected void parseColumns(FieldMapping fm,\n             throw new MetaDataException(_loc.get(\"num-cols-mismatch\", fm,\n                 String.valueOf(cols.size()), String.valueOf(pcols.length)));\n \n+        // cache the JAXB XmlType class if it is present so we do not\n+        // have a hard-wired dependency on JAXB here\n+        Class xmlTypeClass = null;\n+        try {\n+            xmlTypeClass = Class.forName(\"javax.xml.bind.annotation.XmlType\");\n+        } catch (Exception e) {\n+        }\n+\n         int unique = 0;\n         String secondary = null;\n         for (int i = 0; i < pcols.length; i++) {\n@@ -1034,8 +1041,9 @@ protected void parseColumns(FieldMapping fm,\n                 cols.add(newColumn(pcols[i]));\n             }\n             \n-            if (StringUtils.isEmpty(pcols[i].columnDefinition())\n-                && fm.getDeclaredType().isAnnotationPresent(XmlType.class)) {\n+            if (xmlTypeClass != null\n+                && StringUtils.isEmpty(pcols[i].columnDefinition())\n+                && fm.getDeclaredType().isAnnotationPresent(xmlTypeClass)) {\n                 DBDictionary dict = ((MappingRepository) getRepository())\n                     .getDBDictionary();\n                 if (dict.supportsXMLColumn)"}]}

