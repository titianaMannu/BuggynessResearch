{"sha":"bd93bfa284315130c4f9e9a65d091925ffa919f4","node_id":"MDY6Q29tbWl0MjA2MzY0OmJkOTNiZmEyODQzMTUxMzBjNGY5ZTlhNjVkMDkxOTI1ZmZhOTE5ZjQ=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-04-06T19:50:53Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-04-06T19:50:53Z"},"message":"OPENJPA-182. forUpdateClause is now used even if forUpdate is false, to allow for read-only optimizations. Changed JDBCFetchPlan.setIsolationLevel and JDBCFetchConfiguration.setIsolationLevel to just JDBCFetchXXX.setIsolation.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@526266 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c4eeaf6adbe12d678660d745995029946fa09786","url":"https://api.github.com/repos/apache/openjpa/git/trees/c4eeaf6adbe12d678660d745995029946fa09786"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/bd93bfa284315130c4f9e9a65d091925ffa919f4","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/bd93bfa284315130c4f9e9a65d091925ffa919f4","html_url":"https://github.com/apache/openjpa/commit/bd93bfa284315130c4f9e9a65d091925ffa919f4","comments_url":"https://api.github.com/repos/apache/openjpa/commits/bd93bfa284315130c4f9e9a65d091925ffa919f4/comments","author":null,"committer":null,"parents":[{"sha":"31c7a575e76d55b120444962fa999d17fc7e2c06","url":"https://api.github.com/repos/apache/openjpa/commits/31c7a575e76d55b120444962fa999d17fc7e2c06","html_url":"https://github.com/apache/openjpa/commit/31c7a575e76d55b120444962fa999d17fc7e2c06"}],"stats":{"total":66,"additions":31,"deletions":35},"files":[{"sha":"8ce4d7aed35b086d834197955810dd4f7a53b815","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/DelegatingJDBCFetchConfiguration.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/bd93bfa284315130c4f9e9a65d091925ffa919f4/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/DelegatingJDBCFetchConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/bd93bfa284315130c4f9e9a65d091925ffa919f4/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/DelegatingJDBCFetchConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/DelegatingJDBCFetchConfiguration.java?ref=bd93bfa284315130c4f9e9a65d091925ffa919f4","patch":"@@ -241,17 +241,17 @@ public JDBCFetchConfiguration traverseJDBC(FieldMetaData fm) {\n         }\n     }\n \n-    public int getIsolationLevel() {\n+    public int getIsolation() {\n         try {\n-            return getJDBCDelegate().getIsolationLevel();\n+            return getJDBCDelegate().getIsolation();\n         } catch (RuntimeException re) {\n             throw translate(re);\n         }\n     }\n \n-    public JDBCFetchConfiguration setIsolationLevel(int level) {\n+    public JDBCFetchConfiguration setIsolation(int level) {\n         try {\n-            getJDBCDelegate().setIsolationLevel(level);\n+            getJDBCDelegate().setIsolation(level);\n             return this;\n         } catch (RuntimeException re) {\n             throw translate(re);"},{"sha":"46a7d9d9ebec7892343ba33bbba7ac99fde4550b","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCFetchConfiguration.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/bd93bfa284315130c4f9e9a65d091925ffa919f4/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCFetchConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/bd93bfa284315130c4f9e9a65d091925ffa919f4/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCFetchConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCFetchConfiguration.java?ref=bd93bfa284315130c4f9e9a65d091925ffa919f4","patch":"@@ -186,7 +186,7 @@\n      *\n      * @since 0.9.7\n      */\n-    public int getIsolationLevel();\n+    public int getIsolation();\n \n     /**\n      * <p>The isolation level for queries issued to the database. This overrides\n@@ -203,5 +203,5 @@\n      *\n      * @since 0.9.7\n      */\n-    public JDBCFetchConfiguration setIsolationLevel(int level);\n+    public JDBCFetchConfiguration setIsolation(int level);\n }"},{"sha":"a4339723738bf938916fae696c152db79417f41e","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCFetchConfigurationImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/bd93bfa284315130c4f9e9a65d091925ffa919f4/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCFetchConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/bd93bfa284315130c4f9e9a65d091925ffa919f4/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCFetchConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCFetchConfigurationImpl.java?ref=bd93bfa284315130c4f9e9a65d091925ffa919f4","patch":"@@ -322,11 +322,11 @@ private JDBCConfiguration getJDBCConfiguration() {\n         return (JDBCConfiguration) conf;\n     }\n \n-    public int getIsolationLevel() {\n+    public int getIsolation() {\n         return _state.isolationLevel;\n     }\n \n-    public JDBCFetchConfiguration setIsolationLevel(int level) {\n+    public JDBCFetchConfiguration setIsolation(int level) {\n         if (level != -1 && level != DEFAULT\n             && level != Connection.TRANSACTION_NONE\n             && level != Connection.TRANSACTION_READ_UNCOMMITTED"},{"sha":"f46f2970c16b332f92e655c87454b2bae5857831","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/bd93bfa284315130c4f9e9a65d091925ffa919f4/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","raw_url":"https://github.com/apache/openjpa/raw/bd93bfa284315130c4f9e9a65d091925ffa919f4/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java?ref=bd93bfa284315130c4f9e9a65d091925ffa919f4","patch":"@@ -24,7 +24,6 @@\n import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\r\n import org.apache.openjpa.jdbc.schema.Sequence;\r\n import org.apache.openjpa.util.OpenJPAException;\r\n-import org.apache.openjpa.kernel.LockLevels;\r\n \r\n /**\r\n  * Dictionary for IBM DB2 database.\r\n@@ -238,8 +237,8 @@ protected String getForUpdateClause(JDBCFetchConfiguration fetch,\n         try {\r\n             // Determine the isolationLevel; the fetch\r\n             // configuration data overrides the persistence.xml value\r\n-            if (fetch != null && fetch.getIsolationLevel() != -1)\r\n-                isolationLevel = fetch.getIsolationLevel();\r\n+            if (fetch != null && fetch.getIsolation() != -1)\r\n+                isolationLevel = fetch.getIsolation();\r\n             else\r\n                 isolationLevel = conf.getTransactionIsolationConstant();\r\n \r"},{"sha":"298298439bde264e7c78dbb54607faae63ad0d4e","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","status":"modified","additions":11,"deletions":11,"changes":22,"blob_url":"https://github.com/apache/openjpa/blob/bd93bfa284315130c4f9e9a65d091925ffa919f4/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/bd93bfa284315130c4f9e9a65d091925ffa919f4/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java?ref=bd93bfa284315130c4f9e9a65d091925ffa919f4","patch":"@@ -2145,7 +2145,7 @@ public SQLBuffer toSelect(SQLBuffer selects, JDBCFetchConfiguration fetch,\n         SQLBuffer having, SQLBuffer order,\n         boolean distinct, boolean forUpdate, long start, long end) {\n         return toOperation(getSelectOperation(fetch), selects, from, where,\n-            group, having, order, distinct, forUpdate, start, end,\n+            group, having, order, distinct, start, end,\n             getForUpdateClause(fetch, forUpdate));\n     }\n \n@@ -2155,12 +2155,16 @@ public SQLBuffer toSelect(SQLBuffer selects, JDBCFetchConfiguration fetch,\n      */\n     protected String getForUpdateClause(JDBCFetchConfiguration fetch,\n         boolean forUpdate) {\n-        if (fetch != null && fetch.getIsolationLevel() != -1)\n+        if (fetch != null && fetch.getIsolation() != -1) {\n             throw new IllegalStateException(_loc.get(\n                 \"isolation-level-config-not-supported\", getClass().getName())\n                 .getMessage());\n-        else\n+        } else if (forUpdate && !simulateLocking) {\n+            assertSupport(supportsSelectForUpdate, \"SupportsSelectForUpdate\");\n             return forUpdateClause;\n+        } else {\n+            return null;\n+        }\n     }\n \n     /**\n@@ -2175,8 +2179,8 @@ public String getSelectOperation(JDBCFetchConfiguration fetch) {\n      */\n     protected SQLBuffer toOperation(String op, SQLBuffer selects,\n         SQLBuffer from, SQLBuffer where, SQLBuffer group, SQLBuffer having,\n-        SQLBuffer order, boolean distinct, boolean forUpdate, long start,\n-        long end, String forUpdateClause) {\n+        SQLBuffer order, boolean distinct, long start, long end,\n+        String forUpdateClause) {\n         SQLBuffer buf = new SQLBuffer(this);\n         buf.append(op);\n \n@@ -2202,12 +2206,8 @@ protected SQLBuffer toOperation(String op, SQLBuffer selects,\n             buf.append(\" ORDER BY \").append(order);\n         if (range && rangePosition == RANGE_POST_SELECT)\n             appendSelectRange(buf, start, end);\n-\n-        if (forUpdate && !simulateLocking) {\n-            assertSupport(supportsSelectForUpdate, \"SupportsSelectForUpdate\");\n-            if (forUpdateClause != null)\n-                buf.append(\" \").append(forUpdateClause);\n-        }\n+        if (forUpdateClause != null)\n+            buf.append(\" \").append(forUpdateClause);\n         if (range && rangePosition == RANGE_POST_LOCK)\n             appendSelectRange(buf, start, end);\n         return buf;"},{"sha":"878dbcd53b5ecfa5a5f8e7c40a140306b567d4e1","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/HSQLDictionary.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/bd93bfa284315130c4f9e9a65d091925ffa919f4/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/HSQLDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/bd93bfa284315130c4f9e9a65d091925ffa919f4/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/HSQLDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/HSQLDictionary.java?ref=bd93bfa284315130c4f9e9a65d091925ffa919f4","patch":"@@ -192,14 +192,14 @@ protected String getSequencesSQL(String schemaName, String sequenceName) {\n \n     protected SQLBuffer toOperation(String op, SQLBuffer selects,\n         SQLBuffer from, SQLBuffer where, SQLBuffer group, SQLBuffer having,\n-        SQLBuffer order, boolean distinct, boolean forUpdate, long start,\n-        long end, String forUpdateClause) {\n+        SQLBuffer order, boolean distinct, long start, long end,\n+        String forUpdateClause) {\n         // hsql requires ordering when limit is used\n         if ((start != 0 || end != Long.MAX_VALUE)\n             && (order == null || order.isEmpty()))\n             order = _oneBuffer;\n         return super.toOperation(op, selects, from, where, group, having,\n-            order, distinct, forUpdate, start, end, forUpdateClause);\n+            order, distinct, start, end, forUpdateClause);\n     }\n \n     public Column[] getColumns(DatabaseMetaData meta, String catalog,"},{"sha":"0c8e3295dd19f4f0cff6c1680628750b690ba068","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCFetchPlan.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/bd93bfa284315130c4f9e9a65d091925ffa919f4/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCFetchPlan.java","raw_url":"https://github.com/apache/openjpa/raw/bd93bfa284315130c4f9e9a65d091925ffa919f4/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCFetchPlan.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCFetchPlan.java?ref=bd93bfa284315130c4f9e9a65d091925ffa919f4","patch":"@@ -132,7 +132,7 @@\n      *\n      * @since 0.9.7\n      */\n-    public int getIsolationLevel();\n+    public int getIsolation();\n \n     /**\n      * <p>The isolation level for queries issued to the database. This overrides\n@@ -149,5 +149,5 @@\n      *\n      * @since 0.9.7\n      */\n-    public JDBCFetchPlan setIsolationLevel(int level);\n+    public JDBCFetchPlan setIsolation(int level);\n }"},{"sha":"533e50a264a52bcc008027b239537aee099382f0","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCFetchPlanImpl.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/bd93bfa284315130c4f9e9a65d091925ffa919f4/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCFetchPlanImpl.java","raw_url":"https://github.com/apache/openjpa/raw/bd93bfa284315130c4f9e9a65d091925ffa919f4/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCFetchPlanImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCFetchPlanImpl.java?ref=bd93bfa284315130c4f9e9a65d091925ffa919f4","patch":"@@ -103,12 +103,12 @@ public JDBCFetchPlanImpl setJoinSyntax(int syntax) {\n         return this;\n     }\n \n-    public int getIsolationLevel() {\n-        return _fetch.getIsolationLevel();\n+    public int getIsolation() {\n+        return _fetch.getIsolation();\n     }\n \n-    public JDBCFetchPlan setIsolationLevel(int level) {\n-        _fetch.setIsolationLevel(level);\n+    public JDBCFetchPlan setIsolation(int level) {\n+        _fetch.setIsolation(level);\n         return this;\n     }\n }"},{"sha":"ca973d3cb159982e3265e69539adbe76f2a15587","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestIsolationLevelOverride.java","status":"modified","additions":1,"deletions":4,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/bd93bfa284315130c4f9e9a65d091925ffa919f4/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestIsolationLevelOverride.java","raw_url":"https://github.com/apache/openjpa/raw/bd93bfa284315130c4f9e9a65d091925ffa919f4/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestIsolationLevelOverride.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestIsolationLevelOverride.java?ref=bd93bfa284315130c4f9e9a65d091925ffa919f4","patch":"@@ -16,14 +16,11 @@\n package org.apache.openjpa.persistence.jdbc;\n \n import java.sql.Connection;\n-import javax.persistence.EntityManager;\n-import javax.persistence.LockModeType;\n import javax.persistence.PersistenceException;\n \n import org.apache.openjpa.persistence.test.SQLListenerTestCase;\n import org.apache.openjpa.persistence.simple.AllFieldTypes;\n import org.apache.openjpa.persistence.OpenJPAPersistence;\n-import org.apache.openjpa.persistence.FetchPlan;\n import org.apache.openjpa.persistence.OpenJPAEntityManager;\n import org.apache.openjpa.jdbc.sql.DBDictionary;\n import org.apache.openjpa.jdbc.sql.DB2Dictionary;\n@@ -53,7 +50,7 @@ public void testIsolationLevelOverride() {\n         try {\n             em.getTransaction().begin();\n             ((JDBCFetchPlan) em.getFetchPlan())\n-                .setIsolationLevel(Connection.TRANSACTION_SERIALIZABLE);\n+                .setIsolation(Connection.TRANSACTION_SERIALIZABLE);\n             em.find(AllFieldTypes.class, 0);\n \n             if (dict instanceof DB2Dictionary) {"}]}

