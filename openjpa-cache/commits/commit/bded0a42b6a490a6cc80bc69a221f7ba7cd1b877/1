{"sha":"bded0a42b6a490a6cc80bc69a221f7ba7cd1b877","node_id":"MDY6Q29tbWl0MjA2MzY0OmJkZWQwYTQyYjZhNDkwYTZjYzgwYmM2OWEyMjFmN2JhN2NkMWI4Nzc=","commit":{"author":{"name":"Heath Thomann","email":"hthomann@apache.org","date":"2012-12-27T22:21:52Z"},"committer":{"name":"Heath Thomann","email":"hthomann@apache.org","date":"2012-12-27T22:21:52Z"},"message":"OPENJPA-2235: READ_UNCOMMITTED setting for the fetch plan isolation level is ignored in DB2Dictionary - applied Helen Xu's patch to trunk.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1426352 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0826685778e5eced047308ae59096a13aa39582b","url":"https://api.github.com/repos/apache/openjpa/git/trees/0826685778e5eced047308ae59096a13aa39582b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/bded0a42b6a490a6cc80bc69a221f7ba7cd1b877","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/bded0a42b6a490a6cc80bc69a221f7ba7cd1b877","html_url":"https://github.com/apache/openjpa/commit/bded0a42b6a490a6cc80bc69a221f7ba7cd1b877","comments_url":"https://api.github.com/repos/apache/openjpa/commits/bded0a42b6a490a6cc80bc69a221f7ba7cd1b877/comments","author":null,"committer":null,"parents":[{"sha":"dc02973a1988c2b153bc4e63ca3530940b59c545","url":"https://api.github.com/repos/apache/openjpa/commits/dc02973a1988c2b153bc4e63ca3530940b59c545","html_url":"https://github.com/apache/openjpa/commit/dc02973a1988c2b153bc4e63ca3530940b59c545"}],"stats":{"total":69,"additions":68,"deletions":1},"files":[{"sha":"e222b3944b865d42e581a8f4ac72d79fa45d0dc1","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","status":"modified","additions":7,"deletions":1,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/bded0a42b6a490a6cc80bc69a221f7ba7cd1b877/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","raw_url":"https://github.com/apache/openjpa/raw/bded0a42b6a490a6cc80bc69a221f7ba7cd1b877/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java?ref=bded0a42b6a490a6cc80bc69a221f7ba7cd1b877","patch":"@@ -382,7 +382,8 @@ public boolean supportsIsolationForUpdate() {\n \n     /**\n      * Get the update clause for the query based on the\n-     * updateClause and isolationLevel hints\n+     * isolationLevel hints if it is for update.\n+     * It also handles the UR hint when it is not for update.\n      */\n     protected String getForUpdateClause(JDBCFetchConfiguration fetch,\n         boolean isForUpdate, Select sel) {\n@@ -435,6 +436,11 @@ protected String getForUpdateClause(JDBCFetchConfiguration fetch,\n                 }\n                 break;\n             }\n+        } else {\n+        \tif ( fetch != null && fetch.getIsolation() == Connection.TRANSACTION_READ_UNCOMMITTED ) {\n+\t            forUpdateString.append(\" \").append(forReadOnlyClause)\n+\t            .append(\" \").append(withURClause);\n+\t    \t}\n         }\n    \n         return forUpdateString.toString();"},{"sha":"2621281ce8d02fc926d34b9ab8e31c393b53501b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestIsolationFecthHint.java","status":"added","additions":61,"deletions":0,"changes":61,"blob_url":"https://github.com/apache/openjpa/blob/bded0a42b6a490a6cc80bc69a221f7ba7cd1b877/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestIsolationFecthHint.java","raw_url":"https://github.com/apache/openjpa/raw/bded0a42b6a490a6cc80bc69a221f7ba7cd1b877/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestIsolationFecthHint.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestIsolationFecthHint.java?ref=bded0a42b6a490a6cc80bc69a221f7ba7cd1b877","patch":"@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.openjpa.persistence.jdbc;\n+\n+import javax.persistence.Query;\n+\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.sql.DB2Dictionary;\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\n+import org.apache.openjpa.persistence.simple.AllFieldTypes;\n+import org.apache.openjpa.persistence.test.SQLListenerTestCase;\n+\n+public class TestIsolationFecthHint extends SQLListenerTestCase{\n+\t\n+\tpublic void setUp(){\n+\t\tsetUp(AllFieldTypes.class, CLEAR_TABLES);\n+\t\t\n+\t}\t\n+\n+    public void testFetchPlanIsolationURHint(){\n+    \tOpenJPAEntityManagerSPI em = emf.createEntityManager();     \n+        try {\n+        \tDBDictionary dict = ((JDBCConfiguration) em.getConfiguration())\n+                    .getDBDictionaryInstance();\n+        \t if (dict instanceof DB2Dictionary) {\n+        \t\t AllFieldTypes allFieldTypes = new AllFieldTypes();\n+            \tallFieldTypes.setStringField(\"testString\");\n+            \tallFieldTypes.setIntField(2012);\n+            \t\n+            \tem.getTransaction().begin();\n+            \tem.persist(allFieldTypes);\n+            \tQuery query = em.createQuery(\"select e from AllFieldTypes e where e.stringField = ?1\");\n+            \tquery.setParameter(1, \"testString\");\n+            \tquery.setHint(\"openjpa.FetchPlan.Isolation\", \"READ_UNCOMMITTED\");\n+            \tassertEquals(1, query.getResultList().size());\n+            \tassertContainsSQL(\"FOR READ ONLY WITH UR\");\n+            \tem.getTransaction().rollback();\n+    \t\t}\n+        } finally {\n+        \tem.close();\n+        }\n+    }\n+}"}]}

