{"sha":"be2195b1a487fb9eaba0a9ed083fb6358b786c00","node_id":"MDY6Q29tbWl0MjA2MzY0OmJlMjE5NWIxYTQ4N2ZiOWVhYmEwYTllZDA4M2ZiNjM1OGI3ODZjMDA=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-04-09T19:46:24Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-04-09T19:46:24Z"},"message":"OPENJPA-1622 Invoking MetaModel generator.  Merged in from trunk.  Contributed by Pinaki.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.x@932560 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b4415c4baebcdf2b6b41f4b1dafc63677fc7a991","url":"https://api.github.com/repos/apache/openjpa/git/trees/b4415c4baebcdf2b6b41f4b1dafc63677fc7a991"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/be2195b1a487fb9eaba0a9ed083fb6358b786c00","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/be2195b1a487fb9eaba0a9ed083fb6358b786c00","html_url":"https://github.com/apache/openjpa/commit/be2195b1a487fb9eaba0a9ed083fb6358b786c00","comments_url":"https://api.github.com/repos/apache/openjpa/commits/be2195b1a487fb9eaba0a9ed083fb6358b786c00/comments","author":null,"committer":null,"parents":[{"sha":"62f17567af5e74037a871f552afd35d07d87e0f4","url":"https://api.github.com/repos/apache/openjpa/commits/62f17567af5e74037a871f552afd35d07d87e0f4","html_url":"https://github.com/apache/openjpa/commit/62f17567af5e74037a871f552afd35d07d87e0f4"}],"stats":{"total":96,"additions":65,"deletions":31},"files":[{"sha":"dd7a361cc2096087a78451d0b3a286baa77c419c","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/AnnotationProcessor6.java","status":"modified","additions":54,"deletions":24,"changes":78,"blob_url":"https://github.com/apache/openjpa/blob/be2195b1a487fb9eaba0a9ed083fb6358b786c00/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/AnnotationProcessor6.java","raw_url":"https://github.com/apache/openjpa/raw/be2195b1a487fb9eaba0a9ed083fb6358b786c00/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/AnnotationProcessor6.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/AnnotationProcessor6.java?ref=be2195b1a487fb9eaba0a9ed083fb6358b786c00","patch":"@@ -30,6 +30,7 @@\n import java.util.Collections;\n import java.util.Date;\n import java.util.List;\n+import java.util.Map;\n import java.util.Set;\n \n import javax.annotation.Generated;\n@@ -45,6 +46,7 @@\n import javax.lang.featureSelection.type.TypeMirror;\n import javax.lang.featureSelection.util.Elements;\n import javax.persistence.metamodel.StaticMetamodel;\n+import javax.tools.Diagnostic;\n import javax.tools.JavaCompiler;\n import javax.tools.JavaFileObject;\n import javax.tools.StandardJavaFileManager;\n@@ -56,33 +58,38 @@\n import org.apache.openjpa.persistence.PersistenceMetaDataFactory;\n import org.apache.openjpa.persistence.util.SourceCode;\n \n+\n /**\n  * Annotation processing tool generates source code for a meta-featureSelection class given \n  * the annotated source code of persistent entity.\n  * <p>\n- * This tool is invoked during compilation for JDK6 compiler if OpenJPA and JPA \n- * libraries are specified in the compiler <code>-processorpath</code> option.\n+ * This tool is invoked during compilation for JDK6 compiler if \n+ * <UL>\n+ * <LI>OpenJPA and JPA libraries are available in the compiler classpath\n+ * and <LI>Annotation Processor option <code>-Aopenjpa.generate=true</code> is specified.\n+ * </UL>\n  * <br>\n  * <B>Usage</B><br>\n- * <code>$ javac -processorpath path/to/openjpa-all.jar mypackage/MyEntity.java</code><br>\n+ * <code>$ javac -classpath path/to/openjpa-all.jar -Aopenjpa.generated=true mypackage/MyEntity.java</code><br>\n  * will generate source code for canonical meta-featureSelection class <code>mypackage.MyEntity_.java</code>.\n  * <p>\n- * The Annotation Processor recognizes the following options (none of them are mandatory):\n- * <LI><code>-Alog=TRACE|INFO|WARN|ERROR</code><br>\n- * The logging level. Default is <code>WARN</code>.\n- * <LI>-Asource=&lt;n&gt;<br>\n- * where &lt;n&gt; denotes the integral number for Java source version of the generated code. \n- * Default is <code>6</code>.\n- * <LI>-Anaming=class name <br>\n- * fully-qualified name of a class implementing <code>org.apache.openjpa.meta.MetaDataFactory</code> that determines\n+ * The Annotation Processor also recognizes the following options (none of them are mandatory).\n+ * Each of the following option key can also be prefixed with <code>openjpa.</code> to distinguish if multiple \n+ * annotation processors are active during compilation:<br>\n+ * <TABLE border=\"1\">\n+ * <TR><TD>-Alog={log level}<TD>The logging level. Default is <code>WARN</code>. Permissible values are \n+ *     <code>TRACE</code>, <code>INFO</code>, <code>WARN</code> or <code> ERROR</code>.\n+ * <TR><TD>-Asource={n}         <TD>Java source version of the generated code. Default is <code>6</code>.\n+ * <TR><TD>-Anaming={class name}        <TD>fully-qualified name of a class implementing \n+ * <code>org.apache.openjpa.meta.MetaDataFactory</code> that determines\n  * the name of a meta-class given the name of the original persistent Java entity class. Defaults to\n  * <code>org.apache.openjpa.persistence.PersistenceMetaDataFactory</code> which appends a underscore character\n  * (<code>_</code>) to the original Java class name. \n- * <LI>-Aheader=&lt;url&gt;<br>\n+ * <TR><TD>-Aheader={url}           <TD>\n  * A url whose content will appear as comment header to the generated file(s). Recognizes special value\n  * <code>ASL</code> for Apache Source License header as comment. By default adds a OpenJPA proprietary   \n  * text.\n- * <LI>-Aout=dir<br>\n+ * <TR><TD>-Aout={dir}                      <TD>\n  * A directory in the local file system. The generated files will be written <em>relative</em> to this directory\n  * according to the package structure i.e. if <code>dir</code> is specified as <code>/myproject/generated-src</code>\n  * then the generated source code will be written to <code>/myproject/generated-src/mypackage/MyEntity_.java</code>.\n@@ -92,7 +99,9 @@\n  * to the compiler classpath. If the source code location for the original class can not be determined, and the \n  * option is not specified, then the generated source code is written relative to the current directory according \n  * to the package structure.  \n+ * </TABLE>\n  * <br>\n+ *\n  * @author Pinaki Poddar\n  * \n  * @since 2.0.0\n@@ -102,17 +111,24 @@\n     \"javax.persistence.Entity\",\n     \"javax.persistence.Embeddable\", \n     \"javax.persistence.MappedSuperclass\" })\n-@SupportedOptions( { \"log\", \"out\", \"source\", \"naming\", \"header\" })\n+@SupportedOptions({ \"openjpa.log\", \"log\", \n+                     \"openjpa.out\", \"out\", \n+                     \"openjpa.source\", \"source\",\n+                     \"openjpa.naming\", \"naming\",\n+                     \"openjpa.header\", \"header\",\n+                     \"openjpa.generate\"\n+                  })\n @SupportedSourceVersion(RELEASE_6)\n \n public class AnnotationProcessor6 extends AbstractProcessor {\n     private SourceAnnotationHandler handler;\n     private StandardJavaFileManager fileManager;\n-    private boolean isUserSpecifiedOutputLocation = false;\n+    private boolean isUserSpecifiedOutputLocation;\n     private MetaDataFactory factory;\n     private int generatedSourceVersion = 6;\n     private CompileTimeLogger logger;\n     private String header;\n+    private boolean active;\n     private static Localizer _loc =  Localizer.forPackage(AnnotationProcessor6.class);\n \n     /**\n@@ -190,8 +206,11 @@ private TypeCategory toMetaModelTypeCategory(TypeMirror mirror,\n     @Override\n     public synchronized void init(ProcessingEnvironment processingEnv) {\n         super.init(processingEnv);\n-        logger = new CompileTimeLogger(processingEnv);\n-        logger.info(_loc.get(\"mmg-tool-banner\"));\n+        active = \"true\".equalsIgnoreCase(getOptionValue(\"openjpa.generate\"));\n+        if (!active)\n+            return;\n+        processingEnv.getMessager().printMessage(Diagnostic.Kind.NOTE, _loc.get(\"mmg-tool-banner\").toString());\n+        logger = new CompileTimeLogger(processingEnv, getOptionValue(\"openjpa.log\", \"log\"));\n         setSourceVersion();\n         setFileManager();\n         setNamingPolicy();\n@@ -203,9 +222,8 @@ public synchronized void init(ProcessingEnvironment processingEnv) {\n      * The entry point for java compiler.\n      */\n     @Override\n-    public boolean process(Set<? extends TypeElement> annos,\n-        RoundEnvironment roundEnv) {\n-        if (!roundEnv.processingOver()) {\n+    public boolean process(Set<? extends TypeElement> annos, RoundEnvironment roundEnv) {\n+        if (active && !roundEnv.processingOver()) {\n             Set<? extends Element> elements = roundEnv.getRootElements();\n             for (Element e : elements) {\n                 process((TypeElement) e);\n@@ -314,7 +332,7 @@ private void comment(SourceCode source) {\n      * n must be a integer. Default or wrong specification returns 6.\n      */\n     private void setSourceVersion() {\n-        String version = processingEnv.getOptions().get(\"source\");\n+        String version = getOptionValue(\"openjpa.source\", \"source\");\n         if (version != null) {\n             try {\n                 generatedSourceVersion = Integer.parseInt(version);\n@@ -328,7 +346,7 @@ private void setSourceVersion() {\n     }\n     \n     private void setNamingPolicy() {\n-        String policy = processingEnv.getOptions().get(\"naming\");\n+        String policy = getOptionValue(\"openjpa.naming\",\"naming\");\n         if (policy != null) {\n             try {\n                 factory = (MetaDataFactory)Class.forName(policy).newInstance();\n@@ -342,7 +360,7 @@ private void setNamingPolicy() {\n     }\n     \n     private void setHeader() {\n-        String headerOption = processingEnv.getOptions().get(\"header\");\n+        String headerOption = getOptionValue(\"openjpa.header\", \"header\");\n         if (headerOption == null) {\n             return;\n         }\n@@ -361,7 +379,7 @@ private void setHeader() {\n     private void setFileManager() {\n         JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();\n         fileManager = compiler.getStandardFileManager(null, null, null);\n-        String outDir = processingEnv.getOptions().get(\"out\");\n+        String outDir = getOptionValue(\"openjpa.out\", \"out\");\n         if (outDir != null)\n            isUserSpecifiedOutputLocation = setSourceOutputDirectory(new File(outDir));\n     }\n@@ -408,6 +426,18 @@ boolean setSourceOutputDirectory(File outDir) {\n         }\n     }\n     \n+    /**\n+     * Get the value for the given keys, whoever matches first, in the current available options.\n+     */\n+    private String getOptionValue(String... keys) {\n+        Map<String,String> options = processingEnv.getOptions();\n+        for (String key : keys) {\n+            if (options.containsKey(key))\n+                return options.get(key);\n+        }\n+        return null;\n+    }\n+    \n     /**\n      * An utility class to determine the source file corresponding to a {@link TypeElement}.\n      * The utility uses Sun JDK internal API (com.sun.tools.*) and hence works reflectively"},{"sha":"60e3a2a24ec2a3b045a4d14a1a720dc010be7708","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/CompileTimeLogger.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/be2195b1a487fb9eaba0a9ed083fb6358b786c00/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/CompileTimeLogger.java","raw_url":"https://github.com/apache/openjpa/raw/be2195b1a487fb9eaba0a9ed083fb6358b786c00/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/CompileTimeLogger.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/CompileTimeLogger.java?ref=be2195b1a487fb9eaba0a9ed083fb6358b786c00","patch":"@@ -34,16 +34,14 @@\n  */\n public class CompileTimeLogger {\n     private static enum Level {TRACE, INFO, WARN, ERROR};\n-    private static Localizer _loc = Localizer.forPackage(\n-            CompileTimeLogger.class);\n+    private static Localizer _loc = Localizer.forPackage(CompileTimeLogger.class);\n     private static Level DEFAULT_LEVEL = Level.WARN;\n     private int logLevel;\n     private Messager messager;\n     \n-    public CompileTimeLogger(ProcessingEnvironment env) {\n+    public CompileTimeLogger(ProcessingEnvironment env, String level) {\n         messager = env.getMessager();\n         \n-        String level = env.getOptions().get(\"log\");\n         if (level == null) {\n             logLevel = DEFAULT_LEVEL.ordinal();\n             return;"},{"sha":"1bd83842618647222a90ce8814b07b13be641b46","filename":"openjpa-project/src/doc/manual/jpa_overview_criteria.xml","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/be2195b1a487fb9eaba0a9ed083fb6358b786c00/openjpa-project/src/doc/manual/jpa_overview_criteria.xml","raw_url":"https://github.com/apache/openjpa/raw/be2195b1a487fb9eaba0a9ed083fb6358b786c00/openjpa-project/src/doc/manual/jpa_overview_criteria.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/jpa_overview_criteria.xml?ref=be2195b1a487fb9eaba0a9ed083fb6358b786c00","patch":"@@ -167,16 +167,18 @@ List result = query.getResultList();\n Annotation processing tool generates source code for a metamodel class given \n the annotated source code of persistent entity. \n This tool is invoked during compilation for JDK6 compiler if OpenJPA and JPA \n-libraries are specified in the compiler <code>-processorpath</code> option.\n+libraries are specified in the compiler <code>-classpath</code> option <emphasis>and</emphasis>\n+Annotation processor option <code>-Aopenjpa.generate=true</code> is specified.\n     <programlisting>\n- $ javac -processor org.apache.openjpa.persistence.meta.AnnotationProcessor6 -processorpath path/to/openjpa-all.jar mypackage/MyEntity.java\n+ $ javac -classpath path/to/openjpa-all.jar -Aopenjpa.generate=true mypackage/MyEntity.java\n     </programlisting>\n will generate source code for canonical meta-featureSelection class <code>mypackage.MyEntity_.java</code>.\n       </para>\n       \n       <para>\n The Annotation Processor recognizes the following options specified in the command-line with <code>-A</code> \n-(none of them are mandatory):\n+(none of them are mandatory). Each of the following option key can also be prefixed with <code>openjpa.</code> \n+to distinguish if multiple annotation processors are active during compilation.\n     <itemizedlist>\n         <listitem>\n \t\t\t<para>"},{"sha":"8b2218d4cbed31ff337bfe46280ac0c1361fe98c","filename":"openjpa/src/main/resources/META-INF/services/javax.annotation.processing.Processor","status":"added","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/be2195b1a487fb9eaba0a9ed083fb6358b786c00/openjpa/src/main/resources/META-INF/services/javax.annotation.processing.Processor","raw_url":"https://github.com/apache/openjpa/raw/be2195b1a487fb9eaba0a9ed083fb6358b786c00/openjpa/src/main/resources/META-INF/services/javax.annotation.processing.Processor","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa/src/main/resources/META-INF/services/javax.annotation.processing.Processor?ref=be2195b1a487fb9eaba0a9ed083fb6358b786c00","patch":"@@ -0,0 +1 @@\n+org.apache.openjpa.persistence.meta.AnnotationProcessor6"},{"sha":"e88f9625e051ec2493add8bc3a218a81f21ce1d0","filename":"pom.xml","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/be2195b1a487fb9eaba0a9ed083fb6358b786c00/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/be2195b1a487fb9eaba0a9ed083fb6358b786c00/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/pom.xml?ref=be2195b1a487fb9eaba0a9ed083fb6358b786c00","patch":"@@ -274,6 +274,7 @@\n                                         javax.persistence.Persistence\n                                     -->\n                                     <exclude>**/javax.persistence.spi.PersistenceProvider</exclude>\n+                                    <exclude>**/javax.annotation.processing.Processor</exclude>\n \n                                     <!--\n                                         comments are usupported by our rsrc parser\n@@ -441,6 +442,7 @@\n                                     javax.persistence.Persistence\n                                 -->\n                                 <exclude>**/javax.persistence.spi.PersistenceProvider</exclude>\n+                                <exclude>**/javax.annotation.processing.Processor</exclude>\n \n                                 <!--\n                                     comments are usupported by our rsrc parser\n@@ -854,6 +856,7 @@\n                                 javax.persistence.Persistence\n                             -->\n                             <exclude>**/javax.persistence.spi.PersistenceProvider</exclude>\n+                            <exclude>**/javax.annotation.processing.Processor</exclude>\n \n                             <!--\n                                 comments are usupported by our rsrc parser"}]}

