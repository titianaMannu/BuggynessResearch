{"sha":"be2ff16fe3ac83e54723daa4452dc71a6c1e2a14","node_id":"MDY6Q29tbWl0MjA2MzY0OmJlMmZmMTZmZTNhYzgzZTU0NzIzZGFhNDQ1MmRjNzFhNmMxZTJhMTQ=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-17T21:16:23Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-17T21:16:23Z"},"message":"OPENJPA-1391: Handle untyped collection\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@881529 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f05df79f324bf981d42def858ffce2f893b2644c","url":"https://api.github.com/repos/apache/openjpa/git/trees/f05df79f324bf981d42def858ffce2f893b2644c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/be2ff16fe3ac83e54723daa4452dc71a6c1e2a14","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/be2ff16fe3ac83e54723daa4452dc71a6c1e2a14","html_url":"https://github.com/apache/openjpa/commit/be2ff16fe3ac83e54723daa4452dc71a6c1e2a14","comments_url":"https://api.github.com/repos/apache/openjpa/commits/be2ff16fe3ac83e54723daa4452dc71a6c1e2a14/comments","author":null,"committer":null,"parents":[{"sha":"481bb3d6eb14697e425a673b643e6037424c173e","url":"https://api.github.com/repos/apache/openjpa/commits/481bb3d6eb14697e425a673b643e6037424c173e","html_url":"https://github.com/apache/openjpa/commit/481bb3d6eb14697e425a673b643e6037424c173e"}],"stats":{"total":101,"additions":65,"deletions":36},"files":[{"sha":"fbca4ca60051028c22fd04dd50a5dae59e3eb84a","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/AbstractManagedType.java","status":"modified","additions":8,"deletions":6,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/be2ff16fe3ac83e54723daa4452dc71a6c1e2a14/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/AbstractManagedType.java","raw_url":"https://github.com/apache/openjpa/raw/be2ff16fe3ac83e54723daa4452dc71a6c1e2a14/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/AbstractManagedType.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/AbstractManagedType.java?ref=be2ff16fe3ac83e54723daa4452dc71a6c1e2a14","patch":"@@ -58,7 +58,7 @@\n public abstract class AbstractManagedType<X> extends Types.BaseType<X> \n     implements ManagedType<X> {\n     \n-    private static final Localizer _loc = Localizer.forPackage(Types.class);\n+    private static final Localizer _loc = Localizer.forPackage(AbstractManagedType.class);\n     public final MetamodelImpl featureSelection;\n     public final ClassMetaData meta;\n \n@@ -248,7 +248,7 @@ public AbstractManagedType(ClassMetaData meta, MetamodelImpl featureSelection) {\n                 new AttributeTypeFilter<X, Y>(type), \n                 singularAttributeFilter);\n         if (result == null)\n-            notFoundException(\"attr-not-found-single\",name, type);\n+            notFoundException(\"attr-not-found-single\", name, type);\n          \n         return (SingularAttribute<? super X, Y>) result;\n     }\n@@ -317,7 +317,7 @@ public AbstractManagedType(ClassMetaData meta, MetamodelImpl featureSelection) {\n                 new ElementTypeFilter<X, E>(elementType),\n                 new AttributeNameFilter<X>(name));\n         if (result == null)\n-            notFoundException(\"attr-not-found-coll\",name, elementType);\n+            notFoundException(\"attr-not-found-coll\", name, elementType);\n \n         return (CollectionAttribute<? super X, E>) result;\n     }\n@@ -729,12 +729,14 @@ void assertType(String msg, FieldMetaData fmd, Class<?> actual,\n     // Exception handling\n     // -------------------------------------------------------------------------\n     private void notFoundException(String msg, String name, Class<?> t1) {\n-        throw new IllegalArgumentException(msg + \" Attribute \" + name + \" of type \" + \n-                (t1 == null ? \"any\" : t1.getName()) + \" not found in \" + meta);\n+        throw new IllegalArgumentException(\n+            _loc.get(msg, name, (t1 == null ? \"any\" : t1.getName()), meta).getMessage());\n     }\n     \n     private void notFoundException(String msg, String name, Class<?> t1, Class<?> t2) {\n-        throw new IllegalArgumentException(\"Attribute \" + name + \" not found\");\n+        throw new IllegalArgumentException(\n+            _loc.get(msg, new Object[]{name, (t1 == null ? \"any\" : t1.getName()), \n+                    (t2 == null ? \"any\" : t1.getName()), meta}).getMessage());\n     }\n     // --------------------------------------------------------------------------\n     // Attribute filtering"},{"sha":"3c53a0f5cf063cf2c1c6aeee2f75f818118b3820","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/AnnotationProcessor6.java","status":"modified","additions":5,"deletions":7,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/be2ff16fe3ac83e54723daa4452dc71a6c1e2a14/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/AnnotationProcessor6.java","raw_url":"https://github.com/apache/openjpa/raw/be2ff16fe3ac83e54723daa4452dc71a6c1e2a14/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/AnnotationProcessor6.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/AnnotationProcessor6.java?ref=be2ff16fe3ac83e54723daa4452dc71a6c1e2a14","patch":"@@ -244,12 +244,10 @@ private boolean process(TypeElement e) {\n             Set<? extends Element> members = handler.getPersistentMembers(e);\n             \n             for (Element m : members) {\n-                TypeMirror decl = handler.getDeclaredType(m);\n-                decl.getKind();\n+                TypeMirror decl  = handler.getDeclaredType(m);\n                 String fieldName = handler.getPersistentMemberName(m);\n                 String fieldType = handler.getDeclaredTypeName(decl);\n-                TypeCategory typeCategory = toMetaModelTypeCategory(decl, \n-                        fieldType);\n+                TypeCategory typeCategory = toMetaModelTypeCategory(decl, fieldType);\n                 String metaModelType = typeCategory.getMetaModelType();\n                 SourceCode.Field modelField = null;\n                 switch (typeCategory) {\n@@ -261,15 +259,15 @@ private boolean process(TypeElement e) {\n                 case COLLECTION:\n                 case LIST:\n                 case SET:\n-                    TypeMirror param = handler.getTypeParameter(decl, 0);\n+                    TypeMirror param   = handler.getTypeParameter(m, decl, 0, true);\n                     String elementType = handler.getDeclaredTypeName(param);\n                     modelField = modelClass.addField(fieldName, metaModelType);\n                     modelField.addParameter(originalSimpleClass)\n                               .addParameter(elementType);\n                     break;\n                 case MAP:\n-                    TypeMirror key = handler.getTypeParameter(decl, 0);\n-                    TypeMirror value = handler.getTypeParameter(decl, 1);\n+                    TypeMirror key   = handler.getTypeParameter(m, decl, 0, false);\n+                    TypeMirror value = handler.getTypeParameter(m, decl, 1, true);\n                     String keyType = handler.getDeclaredTypeName(key);\n                     String valueType = handler.getDeclaredTypeName(value);\n                     modelField = modelClass.addField(fieldName, metaModelType);"},{"sha":"c68192cf9037f77feb8dcbba6ae61c2e54706102","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/SourceAnnotationHandler.java","status":"modified","additions":49,"deletions":22,"changes":71,"blob_url":"https://github.com/apache/openjpa/blob/be2ff16fe3ac83e54723daa4452dc71a6c1e2a14/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/SourceAnnotationHandler.java","raw_url":"https://github.com/apache/openjpa/raw/be2ff16fe3ac83e54723daa4452dc71a6c1e2a14/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/SourceAnnotationHandler.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/SourceAnnotationHandler.java?ref=be2ff16fe3ac83e54723daa4452dc71a6c1e2a14","patch":"@@ -47,7 +47,11 @@\n \n import javax.persistence.Embeddable;\n import javax.persistence.Entity;\n+import javax.persistence.ManyToMany;\n+import javax.persistence.ManyToOne;\n import javax.persistence.MappedSuperclass;\n+import javax.persistence.OneToMany;\n+import javax.persistence.OneToOne;\n import javax.persistence.Transient;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.meta.AccessCode;\n@@ -65,6 +69,7 @@\n     implements MetadataProcessor<TypeElement, Element> {\n \t\n \tprivate final ProcessingEnvironment processingEnv;\n+\tprivate final Types typeUtility;\n \tprivate final CompileTimeLogger logger;\n \t/**\n      * Set of Inclusion Filters based on member type, access type or transient\n@@ -81,8 +86,14 @@\n     protected GetterFilter getterFilter = new GetterFilter();\n     protected SetterFilter setterFilter = new SetterFilter();\n     \n-    private static Localizer _loc = Localizer.forPackage(\n-    \t\tSourceAnnotationHandler.class);\n+    protected static List<Class<? extends Annotation>> mappingAnnos = new ArrayList<Class<? extends Annotation>>();\n+    static {\n+        mappingAnnos.add(OneToOne.class);\n+        mappingAnnos.add(OneToMany.class);\n+        mappingAnnos.add(ManyToOne.class);\n+        mappingAnnos.add(ManyToMany.class);\n+    }\n+    private static Localizer _loc = Localizer.forPackage(SourceAnnotationHandler.class);\n     \n \t/**\n \t * Construct with JDK6 annotation processing environment.\n@@ -92,6 +103,7 @@ public SourceAnnotationHandler(ProcessingEnvironment processingEnv,\n         CompileTimeLogger logger) {\n \t\tsuper();\n \t\tthis.processingEnv = processingEnv;\n+\t\tthis.typeUtility   = processingEnv.getTypeUtils();\n \t\tthis.logger = logger;\n \t}\n \n@@ -187,15 +199,12 @@ public boolean isMixedAccess(TypeElement t) {\n     \n     private int getImplicitAccessType(TypeElement type) {\n         List<? extends Element> allMembers = type.getEnclosedElements();\n-        Set<VariableElement> allFields = (Set<VariableElement>) \n-           filter(allMembers, fieldFilter, nonTransientFilter);\n-        Set<ExecutableElement> allMethods = (Set<ExecutableElement>) \n-          filter(allMembers, methodFilter, nonTransientFilter);\n+        Set<VariableElement> allFields = (Set<VariableElement>) filter(allMembers, fieldFilter, nonTransientFilter);\n+        Set<ExecutableElement> allMethods = (Set<ExecutableElement>) filter(allMembers, methodFilter, \n+                nonTransientFilter);\n \n-        Set<VariableElement> annotatedFields = filter(allFields, \n-            annotatedFilter);\n-        Set<ExecutableElement> getters = filter(allMethods, getterFilter, \n-            annotatedFilter);\n+        Set<VariableElement> annotatedFields = filter(allFields, annotatedFilter);\n+        Set<ExecutableElement> getters = filter(allMethods, getterFilter, annotatedFilter);\n         Set<ExecutableElement> setters = filter(allMethods, setterFilter);\n         getters = matchGetterAndSetter(getters, setters);\n         \n@@ -242,9 +251,7 @@ private int getImplicitAccessType(TypeElement type) {\n      */\n     private Set<ExecutableElement> matchGetterAndSetter(\n         Set<ExecutableElement> getters,  Set<ExecutableElement> setters) {\n-        Collection<ExecutableElement> unmatched =\n-            new ArrayList<ExecutableElement>();\n-        Types typeUtils = processingEnv.getTypeUtils();\n+        Collection<ExecutableElement> unmatched =  new ArrayList<ExecutableElement>();\n         \n         for (ExecutableElement getter : getters) {\n             String getterName = getter.getSimpleName().toString();\n@@ -257,13 +264,12 @@ private int getImplicitAccessType(TypeElement type) {\n                                      .iterator().next().asType();\n                 String actualSetterName = setter.getSimpleName().toString();\n                 matched = actualSetterName.equals(expectedSetterName)\n-                    && typeUtils.isSameType(setterArgType, getterReturnType);\n+                       && typeUtility.isSameType(setterArgType, getterReturnType);\n                 if (matched)\n                     break;\n             }\n             if (!matched) {\n-                logger.warn(_loc.get(\"getter-unmatched\", getter, \n-                    getter.getEnclosingElement()));\n+                logger.warn(_loc.get(\"getter-unmatched\", getter, getter.getEnclosingElement()));\n                 unmatched.add(getter);\n             }\n \n@@ -524,6 +530,17 @@ public static boolean isAnnotatedWith(Element e, Set<String> annos) {\n         }\n     }\n     \n+    TypeMirror getTargetEntityType(Element e) {\n+        for (Class<? extends Annotation> anno : mappingAnnos) {\n+            Object target = getAnnotationValue(e, anno, \"targetEntity\");\n+            if (target != null) {\n+                return (TypeMirror)target;\n+            }\n+            \n+        };\n+        return null;\n+    }\n+    \n     String getDeclaredTypeName(TypeMirror mirror) {\n     \treturn getDeclaredTypeName(mirror, true);\n     }\n@@ -537,14 +554,16 @@ String getDeclaredTypeName(TypeMirror mirror) {\n      * return <code>java.util.Set</code>.\n      */\n     String getDeclaredTypeName(TypeMirror mirror, boolean box) {\n+        if (mirror == null || mirror.getKind() == TypeKind.NULL || mirror.getKind() == TypeKind.WILDCARD)\n+            return \"java.lang.Object\";\n     \tif (mirror.getKind() == TypeKind.ARRAY) {\n     \t\tTypeMirror comp = ((ArrayType)mirror).getComponentType();\n     \t\treturn getDeclaredTypeName(comp, false);\n     \t}\n     \tmirror = box ? box(mirror) : mirror;\n     \tif (isPrimitive(mirror))\n     \t\treturn ((PrimitiveType)mirror).toString();\n-    \tElement elem = processingEnv.getTypeUtils().asElement(mirror);\n+    \tElement elem = typeUtility.asElement(mirror);\n     \tif (elem == null)\n     \t    throw new RuntimeException(_loc.get(\"mmg-no-type\", mirror).getMessage());\n         return elem.toString();\n@@ -600,15 +619,23 @@ public TypeMirror box(TypeMirror t) {\n      * @return if the given type represents a parameterized type, then the\n      *         indexed parameter type argument. Otherwise null.\n      */\n-    TypeMirror getTypeParameter(TypeMirror mirror, int index) {\n+    TypeMirror getTypeParameter(Element e, TypeMirror mirror, int index, boolean checkTarget) {\n         if (mirror.getKind() == TypeKind.ARRAY)\n             return ((ArrayType)mirror).getComponentType();\n     \tif (mirror.getKind() != TypeKind.DECLARED)\n     \t\treturn null;\n-        List<? extends TypeMirror> params = ((DeclaredType)mirror)\n-        \t.getTypeArguments();\n-        return (params == null || params.size() < index+1) \n-            ? null : params.get(index);\n+    \tif (checkTarget) {\n+    \t    TypeMirror target = getTargetEntityType(e);\n+    \t    if (target != null)\n+    \t        return target;\n+    \t}\n+        List<? extends TypeMirror> params = ((DeclaredType)mirror).getTypeArguments();\n+        TypeMirror param = (params == null || params.size() < index+1) \n+            ? typeUtility.getNullType() : params.get(index);\n+        if (param.getKind() == TypeKind.NULL || param.getKind() == TypeKind.WILDCARD) {\n+            logger.warn(_loc.get(\"generic-type-param\", e, getDeclaredType(e), e.getEnclosingElement()));\n+        }\n+        return param;\n     }\n \n     public TypeElement getPersistentSupertype(TypeElement cls) {"},{"sha":"f181cd207c52409b2ebf7df221c7cc972c88d769","filename":"openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/meta/localizer.properties","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/be2ff16fe3ac83e54723daa4452dc71a6c1e2a14/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/meta/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/be2ff16fe3ac83e54723daa4452dc71a6c1e2a14/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/meta/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/meta/localizer.properties?ref=be2ff16fe3ac83e54723daa4452dc71a6c1e2a14","patch":"@@ -79,4 +79,6 @@ attr-not-found-decl-set: Declared Set attribute \"{0}\" of {1} element type not fo\n attr-not-found-map: Map attribute \"{0}\" of {1} key type and {2} value type not found in {3}\n attr-not-found-decl-map: Declared Map attribute \"{0}\" of {1} key type and {2} value type not found in {3}\n decl-version-not-found: Declared version attribute of {1} type not found in {2} \n-version-not-found: Version attribute of {1} type not found in {2}\n\\ No newline at end of file\n+version-not-found: Version attribute of {1} type not found in {2}\n+generic-type-param: Can not determine generic type parameter for field {0} of type {1} in {2}. \\\n+\tUsing java.lang.Object.\n\\ No newline at end of file"}]}

