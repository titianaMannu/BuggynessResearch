{"sha":"be91d228c537529c5bb7a9681a083b2e422ce0e5","node_id":"MDY6Q29tbWl0MjA2MzY0OmJlOTFkMjI4YzUzNzUyOWM1YmI3YTk2ODFhMDgzYjJlNDIyY2UwZTU=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-06-22T17:08:28Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-06-22T17:08:28Z"},"message":"OPENJPA-51. Committing Catalina's patch. It passes against Derby in my environment as well.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@549882 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"cc7c4473832ffef64d7d809a24cf3a406ecbb9b2","url":"https://api.github.com/repos/apache/openjpa/git/trees/cc7c4473832ffef64d7d809a24cf3a406ecbb9b2"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/be91d228c537529c5bb7a9681a083b2e422ce0e5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/be91d228c537529c5bb7a9681a083b2e422ce0e5","html_url":"https://github.com/apache/openjpa/commit/be91d228c537529c5bb7a9681a083b2e422ce0e5","comments_url":"https://api.github.com/repos/apache/openjpa/commits/be91d228c537529c5bb7a9681a083b2e422ce0e5/comments","author":null,"committer":null,"parents":[{"sha":"578c987ac494c90f837f3915c1b945aedaec8d78","url":"https://api.github.com/repos/apache/openjpa/commits/578c987ac494c90f837f3915c1b945aedaec8d78","html_url":"https://github.com/apache/openjpa/commit/578c987ac494c90f837f3915c1b945aedaec8d78"}],"stats":{"total":35,"additions":28,"deletions":7},"files":[{"sha":"d3a483d307e02ca70d0c472eb85cfb0cce4fb3b1","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","status":"modified","additions":28,"deletions":7,"changes":35,"blob_url":"https://github.com/apache/openjpa/blob/be91d228c537529c5bb7a9681a083b2e422ce0e5/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","raw_url":"https://github.com/apache/openjpa/raw/be91d228c537529c5bb7a9681a083b2e422ce0e5/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java?ref=be91d228c537529c5bb7a9681a083b2e422ce0e5","patch":"@@ -26,6 +26,7 @@\n import java.sql.Types;\n import java.util.AbstractList;\n import java.util.ArrayList;\n+import java.util.BitSet;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.HashMap;\n@@ -158,6 +159,13 @@\n     // from select if this select selects from a tmp table created by another\n     private SelectImpl _from = null;\n     private SelectImpl _outer = null;\n+    \n+    // bitSet indicating if an alias is removed from parent select\n+    // bit 0 : correspond to alias 0\n+    // bit 1 : correspond to alias 1, etc.\n+    // if the bit is set, the corresponding alias has been removed from parent\n+    // and recorded under subselect.\n+    private BitSet _removedAliasFromParent = new BitSet(16);\n      \n     /**\n      * Helper method to return the proper table alias for the given alias index.\n@@ -1488,8 +1496,13 @@ else if (!pre) {\n     private void removeParentJoins(PathJoins pj) {\n         if (_parent == null)\n             return;\n-        if (_parent._joins != null && !_parent._joins.isEmpty())\n-            pj.joins().removeAll(_parent._joins.joins());\n+        if (_parent._joins != null && !_parent._joins.isEmpty()) {\n+            boolean removed = false;\n+            if (!_removedAliasFromParent.isEmpty())\n+                removed = _parent._joins.joins().removeAll(pj.joins());\n+            if (!removed)\n+                pj.joins().removeAll(_parent._joins.joins());\n+        }\n         if (!pj.isEmpty())\n             _parent.removeParentJoins(pj);\n     }\n@@ -1898,9 +1911,15 @@ private Integer findAlias(Table table, Object key, boolean fromParent,\n             }\n         }\n         if (!fromParent && _parent != null) {\n-            alias = _parent.findAlias(table, key, false, this);\n-            if (alias != null)\n+            boolean removeAliasFromParent = key.toString().contains(\":\");\n+            alias = _parent.findAlias(table, key, removeAliasFromParent, this);\n+            if (alias != null) {\n+                if (removeAliasFromParent) {\n+                    recordTableAlias(table, key, alias);\n+                    _removedAliasFromParent.set(alias.intValue());\n+                }\n                 return alias;\n+            }\n         }\n         if (_subsels != null) {\n             SelectImpl sub;\n@@ -1914,9 +1933,11 @@ private Integer findAlias(Table table, Object key, boolean fromParent,\n                     if (sub._tables != null)\n                         sub._tables.remove(alias);\n                 } else {\n-                    alias = sub.findAlias(table, key, true, null);\n-                    if (!fromParent && alias != null)\n-                        recordTableAlias(table, key, alias);\n+                    if (key instanceof String) {\n+                        alias = sub.findAlias(table, key, true, null);\n+                        if (!fromParent && alias != null)\n+                            recordTableAlias(table, key, alias);\n+                    }\n                 }\n             }\n         }"}]}

