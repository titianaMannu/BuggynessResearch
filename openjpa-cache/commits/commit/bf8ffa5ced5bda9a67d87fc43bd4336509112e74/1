{"sha":"bf8ffa5ced5bda9a67d87fc43bd4336509112e74","node_id":"MDY6Q29tbWl0MjA2MzY0OmJmOGZmYTVjZWQ1YmRhOWE2N2Q4N2ZjNDNiZDQzMzY1MDkxMTJlNzQ=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2006-06-30T22:37:18Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2006-06-30T22:37:18Z"},"message":"reformatted using a better formatter; added a bunch of tests\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@418401 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"af6d77f9e1a60a6e8d87660ca5da971ab660c2ae","url":"https://api.github.com/repos/apache/openjpa/git/trees/af6d77f9e1a60a6e8d87660ca5da971ab660c2ae"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/bf8ffa5ced5bda9a67d87fc43bd4336509112e74","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/bf8ffa5ced5bda9a67d87fc43bd4336509112e74","html_url":"https://github.com/apache/openjpa/commit/bf8ffa5ced5bda9a67d87fc43bd4336509112e74","comments_url":"https://api.github.com/repos/apache/openjpa/commits/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/comments","author":null,"committer":null,"parents":[{"sha":"67410de676d5a77588829e97edbe1e251839f99d","url":"https://api.github.com/repos/apache/openjpa/commits/67410de676d5a77588829e97edbe1e251839f99d","html_url":"https://github.com/apache/openjpa/commit/67410de676d5a77588829e97edbe1e251839f99d"}],"stats":{"total":35176,"additions":15480,"deletions":19696},"files":[{"sha":"7c32348a2b3295893cb00b7836e45a7ecf5d3b39","filename":"openjpa-lib/pom.xml","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/pom.xml?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74","patch":"@@ -23,6 +23,14 @@\n \t\t\t<version>0.0.1</version>\n \t\t\t<scope>compile</scope>\n \t\t\t\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\n+\t\t\t<groupId>jakarta-regexp</groupId>\n+\t\t\t<artifactId>jakarta-regexp</artifactId>\n+\t\t\t<version>1.4</version>\n+\t\t\t<scope>test</scope>\n+\t\t\t\n \t\t</dependency>\n \t\t<dependency>\n \t\t"},{"sha":"94a35b3b0ea47ca2ff4eb4cf10b429d44610251b","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/ant/AbstractTask.java","status":"modified","additions":49,"deletions":71,"changes":120,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/ant/AbstractTask.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/ant/AbstractTask.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/ant/AbstractTask.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74","patch":"@@ -1,147 +1,132 @@\n /*\n  * Copyright 2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *  Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-\n /*********************************************************************\n \n **********************************************************************/\n package org.apache.openjpa.lib.ant;\n \n+import java.io.*;\n+import java.util.*;\n import org.apache.openjpa.lib.conf.*;\n import org.apache.openjpa.lib.util.*;\n-\n import org.apache.tools.ant.*;\n import org.apache.tools.ant.taskdefs.*;\n import org.apache.tools.ant.types.*;\n import org.apache.tools.ant.util.*;\n \n-import java.io.*;\n-\n-import java.util.*;\n-\n-\n /**\n- *  <p>Ant tasks all have a nested <code>&lt;config&rt;</code> tag, which uses\n- *  the configuration as a bean-like task. E.g., you can do:\n- *  <p>\n- *  <code>\n- *  &lt;mytask&rt;<br />\n- *  &nbsp;&nbsp;&lt;config licenseKey=\"key\" connectionUserName=\"foo\"/&rt;<br />\n- *  &lt;/mytask&rt;\n- *  </code></p>\n- *\n- *  <p>The defailt configuration for the system will be used if the\n- *  <code>&lt;config&rt;</code> subtask is excluded.</p>\n- *\n- *  @nojavadoc */\n+ * Ant tasks all have a nested <code>&lt;config&rt;</code> tag, which uses\n+ * the configuration as a bean-like task. E.g., you can do:\n+ * \n+ * <code> &lt;mytask&rt;<br />\n+ * &nbsp;&nbsp;&lt;config licenseKey=\"key\" connectionUserName=\"foo\"/&rt;<br />\n+ * &lt;/mytask&rt;\n+ * </code>\n+ *  The defailt configuration for the system will be used if the\n+ * <code>&lt;config&rt;</code> subtask is excluded.\n+ * \n+ * @nojavadoc\n+ */\n public abstract class AbstractTask extends MatchingTask {\n     static final Localizer _loc = Localizer.forPackage(AbstractTask.class);\n+\n     protected List fileSets = new ArrayList();\n     protected boolean haltOnError = true;\n     protected Path classpath = null;\n     protected boolean useParent = false;\n     protected boolean isolate = false;\n+\n     private Configuration _conf = null;\n     private AntClassLoader _cl = null;\n \n     /**\n-     *  Set whether we want the task to ignore all errors.\n+     * Set whether we want the task to ignore all errors.\n      */\n     public void setHaltOnError(boolean haltOnError) {\n         this.haltOnError = haltOnError;\n     }\n \n     /**\n-     *  Whether we want the ClassLoader to be isolated from\n-     *  all other ClassLoaders\n+     * Whether we want the ClassLoader to be isolated from\n+     * all other ClassLoaders\n      */\n     public void setIsolate(boolean isolate) {\n         this.isolate = isolate;\n     }\n \n     /**\n-     *  Whether we want to delegate to the parent ClassLoader\n-     *  for resolveing classes. This may \"taint\" classes.\n+     * Whether we want to delegate to the parent ClassLoader\n+     * for resolveing classes. This may \"taint\" classes.\n      */\n     public void setUseParentClassloader(boolean useParent) {\n         this.useParent = useParent;\n     }\n \n     /**\n-     *  The task configuration.\n+     * The task configuration.\n      */\n     public Configuration getConfiguration() {\n-        if (_conf == null) {\n+        if (_conf == null)\n             _conf = newConfiguration();\n-        }\n-\n         return _conf;\n     }\n \n     /**\n-     *  Implement this method to return a configuration object for the\n-     *  product in use.\n+     * Implement this method to return a configuration object for the\n+     * product in use.\n      */\n     protected abstract Configuration newConfiguration();\n \n     /**\n-     *  Perform the task action on the given files.\n+     * Perform the task action on the given files.\n      */\n     protected abstract void executeOn(String[] files) throws Exception;\n \n     /**\n-     *  Return the classloader to use.\n+     * Return the classloader to use.\n      */\n     protected ClassLoader getClassLoader() {\n-        if (_cl != null) {\n+        if (_cl != null)\n             return _cl;\n-        }\n \n-        if (classpath != null) {\n+        if (classpath != null)\n             _cl = new AntClassLoader(project, classpath, useParent);\n-        } else {\n+        else\n             _cl = new AntClassLoader(project.getCoreLoader(), project,\n-                    new Path(project), useParent);\n-        }\n-\n+                new Path(project), useParent);\n         _cl.setIsolated(isolate);\n \n         return _cl;\n     }\n \n     /**\n-     *  Helper method to throw a standard exception if the task is not given\n-     *  any files to execute on.  Implementations might call this method as\n-     *  the first step in {@link #executeOn} to validate that they are given\n-     *  files to work on.\n+     * Helper method to throw a standard exception if the task is not given\n+     * any files to execute on. Implementations might call this method as\n+     * the first step in {@link #executeOn} to validate that they are given\n+     * files to work on.\n      */\n     protected void assertFiles(String[] files) {\n-        if (files.length == 0) {\n+        if (files.length == 0)\n             throw new BuildException(_loc.get(\"no-filesets\"));\n-        }\n     }\n \n     public void setClasspath(Path classPath) {\n         createClasspath().append(classPath);\n     }\n \n     public Path createClasspath() {\n-        if (classpath == null) {\n+        if (classpath == null)\n             classpath = new Path(project);\n-        }\n-\n         return classpath.createPath();\n     }\n \n@@ -155,44 +140,37 @@ public void addFileset(FileSet set) {\n \n     public void execute() throws BuildException {\n         String[] files = getFiles();\n-\n         try {\n             executeOn(files);\n         } catch (Throwable e) {\n             e.printStackTrace();\n-\n-            if (haltOnError) {\n+            if (haltOnError)\n                 throw new BuildException(e);\n-            }\n-        } finally {\n-            if (_conf != null) {\n+        }\n+        finally {\n+            if (_conf != null)\n                 _conf.close();\n-            }\n-\n             _conf = null;\n         }\n     }\n \n     private String[] getFiles() {\n         List files = new ArrayList();\n-\n-        for (Iterator i = fileSets.iterator(); i.hasNext();) {\n-            FileSet fs = (FileSet) i.next();\n+        for (Iterator i = fileSets.iterator(); i.hasNext(); ) {\n+            FileSet fs = (FileSet)i.next();\n             DirectoryScanner ds = fs.getDirectoryScanner(project);\n \n             String[] dsFiles = ds.getIncludedFiles();\n-\n             for (int j = 0; j < dsFiles.length; j++) {\n                 File f = new File(dsFiles[j]);\n-\n-                if (!f.isFile()) {\n+                if (!f.isFile())\n                     f = new File(ds.getBasedir(), dsFiles[j]);\n-                }\n \n                 files.add(f.getAbsolutePath());\n             }\n         }\n \n-        return (String[]) files.toArray(new String[files.size()]);\n+        return(String[]) files.toArray(new String[files.size()]);\n     }\n }\n+"},{"sha":"9f756faabed60bcbee127073d97acf39d42ec696","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/BooleanValue.java","status":"modified","additions":11,"deletions":18,"changes":29,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/BooleanValue.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/BooleanValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/BooleanValue.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74","patch":"@@ -1,25 +1,21 @@\n /*\n  * Copyright 2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *  Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n package org.apache.openjpa.lib.conf;\n \n-\n /**\n- *  A boolean {@link Value}.\n- *\n- *  @author Marc Prud'hommeaux\n+ * A boolean {@link Value}.\n+ * \n+ * @author Marc Prud'hommeaux\n  */\n public class BooleanValue extends Value {\n     private boolean value;\n@@ -34,19 +30,17 @@ public Class getValueType() {\n     }\n \n     /**\n-     *  The internal value.\n+     * The internal value.\n      */\n     public void set(boolean value) {\n         boolean oldValue = this.value;\n         this.value = value;\n-\n-        if (oldValue != value) {\n+        if (oldValue != value)\n             valueChanged();\n-        }\n     }\n \n     /**\n-     *  The internal value.\n+     * The internal value.\n      */\n     public boolean get() {\n         return value;\n@@ -61,10 +55,9 @@ protected void setInternalString(String val) {\n     }\n \n     protected void setInternalObject(Object obj) {\n-        if (obj == null) {\n+        if (obj == null)\n             set(false);\n-        } else {\n+        else\n             set(((Boolean) obj).booleanValue());\n-        }\n     }\n }"},{"sha":"710a9564889a0885bd1ba299478c5b79944cc3db","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurable.java","status":"modified","additions":12,"deletions":16,"changes":28,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurable.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurable.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74","patch":"@@ -1,42 +1,38 @@\n /*\n  * Copyright 2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *  Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n package org.apache.openjpa.lib.conf;\n \n-\n /**\n- *  <p>This interface provides a mechanism for notifying interested\n- *  objects when configuration events occur. It provides an object\n- *  with the opportunity to set itself up for configuration and to\n- *  perform any necessary post-configuration.</p>\n- *\n- *  @author Patrick Linskey\n+ * This interface provides a mechanism for notifying interested\n+ * objects when configuration events occur. It provides an object\n+ * with the opportunity to set itself up for configuration and to\n+ * perform any necessary post-configuration.\n+ * \n+ * @author Patrick Linskey\n  */\n public interface Configurable {\n     /**\n-     *  Invoked prior to setting bean properties.\n+     * Invoked prior to setting bean properties.\n      */\n     public void setConfiguration(Configuration conf);\n \n     /**\n-     *  Invoked before bean property configuration is begun on this object.\n+     * Invoked before bean property configuration is begun on this object.\n      */\n     public void startConfiguration();\n \n     /**\n-     *  Invoked upon completion of bean property configuration for this object.\n+     * Invoked upon completion of bean property configuration for this object.\n      */\n     public void endConfiguration();\n }"},{"sha":"b339ef8fdc81e8c12cdee71feac40f1d032f48af","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configuration.java","status":"modified","additions":70,"deletions":80,"changes":150,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configuration.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configuration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configuration.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74","patch":"@@ -1,205 +1,195 @@\n /*\n  * Copyright 2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *  Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n package org.apache.openjpa.lib.conf;\n \n-import org.apache.openjpa.lib.log.*;\n-import org.apache.openjpa.lib.util.Closeable;\n-\n import java.beans.*;\n-\n import java.io.*;\n-\n import java.util.*;\n-\n+import org.apache.openjpa.lib.log.*;\n+import org.apache.openjpa.lib.util.Closeable;\n \n /**\n- *  <p>Interface for generic configuration objects.  Includes the ability\n- *  to write configuration to and from {@link Properties} instances.  Instances\n- *  are threadsafe for reads, but not for writes.</p>\n- *\n- *  @author Marc Prud'hommeaux\n- *  @author Abe White\n+ * Interface for generic configuration objects. Includes the ability\n+ * to write configuration to and from {@link Properties} instances. Instances\n+ * are threadsafe for reads, but not for writes.\n+ * \n+ * @author Marc Prud'hommeaux\n+ * @author Abe White\n  */\n-public interface Configuration extends BeanInfo, Serializable, Closeable,\n-    Cloneable {\n+public interface Configuration\n+    extends BeanInfo, Serializable, Closeable, Cloneable {\n     /**\n-     *  Attribute of returned {@link Value} property descriptors listing\n-     *  recognized values for the property.\n+     * Attribute of returned {@link Value} property descriptors listing\n+     * recognized values for the property.\n      */\n     public static final String ATTRIBUTE_ALLOWED_VALUES = \"allowedValues\";\n \n     /**\n-     *  Attribute of the returned {@link Value} property descriptors naming\n-     *  the property's type or category.\n+     * Attribute of the returned {@link Value} property descriptors naming\n+     * the property's type or category.\n      */\n     public static final String ATTRIBUTE_TYPE = \"propertyType\";\n \n     /**\n-     *  Attribute of the returned {@link Value} property descriptors naming\n-     *  the property' hierarchical category.\n+     * Attribute of the returned {@link Value} property descriptors naming\n+     * the property' hierarchical category.\n      */\n     public static final String ATTRIBUTE_CATEGORY = \"propertyCategory\";\n \n     /**\n-     *  Attribute of the returned {@link Value} property descriptors naming\n-     *  the property's ordering in its category.\n+     * Attribute of the returned {@link Value} property descriptors naming\n+     * the property's ordering in its category.\n      */\n     public static final String ATTRIBUTE_ORDER = \"propertyCategoryOrder\";\n \n     /**\n-     *  Attribute of the returned {@link Value} property descriptors naming\n-     *  the interface that plugin values for this property must implement.\n+     * Attribute of the returned {@link Value} property descriptors naming\n+     * the interface that plugin values for this property must implement.\n      */\n     public static final String ATTRIBUTE_INTERFACE = \"propertyInterface\";\n \n     /**\n-     *  Return the product name.  Defaults to <code>solarmetric</code>.\n+     * Return the product name. Defaults to <code>solarmetric</code>.\n      */\n     public String getProductName();\n \n     /**\n-     *  The log factory. If no log factory has been set explicitly,\n-      *  this method will create one.\n+     * The log factory. If no log factory has been set explicitly,\n+     * this method will create one.\n      */\n     public LogFactory getLogFactory();\n \n     /**\n-     *   The log factory.\n+     * The log factory.\n      */\n     public void setLogFactory(LogFactory factory);\n \n     /**\n-     *  Log plugin setting.\n+     * Log plugin setting.\n      */\n     public String getLog();\n \n     /**\n-     *  Log plugin setting.\n+     * Log plugin setting.\n      */\n     public void setLog(String log);\n \n     /**\n-     *  Return the log for the given category.\n-     *\n-     *  @see #getLogFactory\n+     * Return the log for the given category.\n+     * \n+     * @see #getLogFactory\n      */\n     public Log getLog(String category);\n \n     /**\n-     *  Return the log to use for configuration messages.\n+     * Return the log to use for configuration messages.\n      */\n     public Log getConfigurationLog();\n \n     /**\n-     *  Return the log to use for management messages.\n+     * Return the log to use for management messages.\n      */\n     public Log getManagementLog();\n \n     /**\n-     *  Return the log to use for profiling messages.\n+     * Return the log to use for profiling messages.\n      */\n     public Log getProfilingLog();\n \n     /**\n-     *  Return the {@link Value} for the given property, or null if none.\n+     * Return the {@link Value} for the given property, or null if none.\n      */\n     public Value getValue(String property);\n \n     /**\n-     *  Return the set of all {@link Value}s.\n+     * Return the set of all {@link Value}s.\n      */\n     public Value[] getValues();\n \n     /**\n-     *  Add the given value to the set of configuration properties.  This\n-     *  method replaces any existing value under the same property.\n+     * Add the given value to the set of configuration properties. This\n+     * method replaces any existing value under the same property.\n      */\n     public Value addValue(Value val);\n \n     /**\n-     *  Remove the given value from the set of configuration properties.\n+     * Remove the given value from the set of configuration properties.\n      */\n     public boolean removeValue(Value val);\n \n     /**\n-     *  A properties representation of this Configuration.\n-     *  Note that changes made to this properties object will\n-     *  not be automatically reflected in this Configuration object.\n-     *\n-     *  @param storeDefaults if true, then properties will be written\n-     *                                          out even if they match the default value\n-     *                                          for a property\n+     * A properties representation of this Configuration.\n+     * Note that changes made to this properties object will\n+     * not be automatically reflected in this Configuration object.\n+     * \n+     * @param storeDefaults if true, then properties will be written\n+     * out even if they match the default value for a property\n      */\n     public Map toProperties(boolean storeDefaults);\n \n     /**\n-     *  Set this Configuration via the given map.  Any keys missing from\n-     *  the given map will not be set. Note that changes made to this map\n-     *  will not be automatically reflected in this Configuration object.\n-     *\n-     *  IMPORTANT: If the map contains instantiated objects (rather than\n-     *  string values), only the string representation of those objects\n-     *  are considered in this configuration's <code>equals</code> and\n-     *  <code>hashCode</code> methods.   If the object's property has no\n-     *  string form (such as an {@link ObjectValue}), the object is not\n-     *  part of the equality and hashing calculations.\n+     * Set this Configuration via the given map. Any keys missing from\n+     * the given map will not be set. Note that changes made to this map\n+     * will not be automatically reflected in this Configuration object.\n+     *  IMPORTANT: If the map contains instantiated objects(rather than\n+     * string values), only the string representation of those objects\n+     * are considered in this configuration's <code>equals</code> and\n+     * <code>hashCode</code> methods. If the object's property has no\n+     * string form(such as an {@link ObjectValue}), the object is not\n+     * part of the equality and hashing calculations.\n      */\n     public void fromProperties(Map map);\n \n     /**\n-     *  Adds a listener for any property changes.  The property events fired\n-     *  will <b>not</b> include the old value.\n-     *\n-     *  @param listener          the listener to receive notification\n-     *                                          of property changes\n+     * Adds a listener for any property changes. The property events fired\n+     * will <b>not</b> include the old value.\n+     * \n+     * @param listener the listener to receive notification of property changes\n      */\n     public void addPropertyChangeListener(PropertyChangeListener listener);\n \n     /**\n-     *  Removes a listener for any property changes.\n-     *\n-     *  @param listener  the listener to remove\n+     * Removes a listener for any property changes.\n+     * \n+     * @param listener the listener to remove\n      */\n     public void removePropertyChangeListener(PropertyChangeListener listener);\n \n     /**\n-     *  Lock down the configuration's state.  Attempting to set state on a\n-     *  read-only configuration results in an exception.\n+     * Lock down the configuration's state. Attempting to set state on a\n+     * read-only configuration results in an exception.\n      */\n     public void setReadOnly(boolean readOnly);\n \n     /**\n-     *  Return true if this configuration is immutable.\n+     * Return true if this configuration is immutable.\n      */\n     public boolean isReadOnly();\n \n     /**\n-     *  Call the instantiating get methods for all values.  Up-front\n-     *  instantiation allows one to avoid the synchronization necessary with\n-     *  lazy instantiation.\n+     * Call the instantiating get methods for all values. Up-front\n+     * instantiation allows one to avoid the synchronization necessary with\n+     * lazy instantiation.\n      */\n     public void instantiateAll();\n \n     /**\n-     *  Free the resources used by this object.\n+     * Free the resources used by this object.\n      */\n     public void close();\n \n     /**\n-     *  Return a copy of this configuration.\n+     * Return a copy of this configuration.\n      */\n     public Object clone();\n }"},{"sha":"72af0579e6d56885c3b1cc35ed18c649d49af7f3","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java","status":"modified","additions":201,"deletions":332,"changes":533,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74","patch":"@@ -1,78 +1,70 @@\n /*\n  * Copyright 2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *  Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n package org.apache.openjpa.lib.conf;\n \n-import org.apache.commons.lang.*;\n-\n-import org.apache.openjpa.lib.log.*;\n-import org.apache.openjpa.lib.util.*;\n-import org.apache.openjpa.lib.util.Closeable;\n-\n-import serp.util.*;\n-\n import java.awt.*;\n-\n import java.beans.*;\n-\n import java.io.*;\n-\n import java.lang.reflect.*;\n-\n import java.util.*;\n import java.util.List;\n-\n+import org.apache.commons.lang.*;\n+import org.apache.openjpa.lib.log.*;\n+import org.apache.openjpa.lib.util.*;\n+import org.apache.openjpa.lib.util.Closeable;\n+import serp.util.*;\n \n /**\n- *  <p>Default implementation of the {@link Configuration} interface.\n- *  Subclasses can choose to obtain configuration\n- *  information from JNDI, Properties, a Bean-builder, etc.  This class\n- *  provides base configuration functionality, including serialization,\n- *  the <code>equals</code> and <code>hashCode</code> contracts, and default\n- *  property loading.</p>\n- *\n- *  <p>Property descriptors for {@link Value} instances are constructed from\n- *  the {@link Localizer} for the package of the configuration class. The\n- *  following localized strings will be used for describing a value, where\n- *  <em>name</em> is the last token of the value's property string:\n- *  <ul>\n- *  <li><em>name</em>-name: The name that will be displayed for the\n-*          option in a user interface; required.</li>\n- *  <li><em>name</em>-desc: A brief description of the option; required.</li>\n- *  <li><em>name</em>-type: The type or category name for this option;\n- *          required.</li>\n- *  <li><em>name</em>-expert: True if this is an expert option, false\n- *          otherwise; defaults to false.</li>\n- *  <li><em>name</em>-values: Set of expected or common values, excluding\n- *          alias keys; optional.</li>\n- *  <li><em>name</em>-interface: The class name of an interface whose\n- *          discoverable implementations should be included in the set of expected\n- *          or common values; optional.</li>\n- *  <li><em>name</em>-cat: The hierarchical category for the property\n- *          name, separated by \".\".\n- *  <li><em>name</em>-displayorder: The order in which the property should\n- *          be displayer.</li>\n- *  </ul></p>\n- *\n- *  @author Abe White\n+ * Default implementation of the {@link Configuration} interface.\n+ * Subclasses can choose to obtain configuration\n+ * information from JNDI, Properties, a Bean-builder, etc. This class\n+ * provides base configuration functionality, including serialization,\n+ * the <code>equals</code> and <code>hashCode</code> contracts, and default\n+ * property loading.\n+ *  Property descriptors for {@link Value} instances are constructed from\n+ * the {@link Localizer} for the package of the configuration class. The\n+ * following localized strings will be used for describing a value, where\n+ * <em>name</em> is the last token of the value's property string:\n+ * <ul>\n+ * <li><em>name</em>-name: The name that will be displayed for the\n+ * option in a user interface; required.</li>\n+ * <li><em>name</em>-desc: A brief description of the option; required.</li>\n+ * <li><em>name</em>-type: The type or category name for this option;\n+ * required.</li>\n+ * <li><em>name</em>-expert: True if this is an expert option, false\n+ * otherwise; defaults to false.</li>\n+ * <li><em>name</em>-values: Set of expected or common values, excluding\n+ * alias keys; optional.</li>\n+ * <li><em>name</em>-interface: The class name of an interface whose\n+ * discoverable implementations should be included in the set of expected\n+ * or common values; optional.</li>\n+ * <li><em>name</em>-cat: The hierarchical category for the property\n+ * name, separated by \".\".\n+ * <li><em>name</em>-displayorder: The order in which the property should\n+ * be displayer.</li>\n+ * </ul>\n+ * \n+ * @author Abe White\n  */\n-public class ConfigurationImpl implements Configuration, Externalizable,\n-    ValueListener {\n+public class ConfigurationImpl\n+    implements Configuration, Externalizable, ValueListener {\n     private static final String SEP = System.getProperty(\"line.separator\");\n-    private static final Localizer _loc = Localizer.forPackage(ConfigurationImpl.class);\n+\n+    private static final Localizer _loc = Localizer.forPackage\n+        (ConfigurationImpl.class);\n+\n     public ObjectValue logFactoryPlugin;\n+\n     private boolean _readOnly = false;\n     private Map _props = null;\n     private boolean _defaults = false;\n@@ -86,50 +78,44 @@\n     private MethodDescriptor[] _mds = null;\n \n     /**\n-     *  Default constructor.  Attempts to load default properties through\n-     *  system's configured {@link ConfigurationProvider}s.\n+     * Default constructor. Attempts to load default properties through\n+     * system's configured {@link ConfigurationProvider}s.\n      */\n     public ConfigurationImpl() {\n         this(true);\n     }\n \n     /**\n-     *  Constructor.\n-      *\n-     *  @param loadDefaults        whether to attempt to load the default\n-     *                                                  properties\n+     * Constructor.\n+     * \n+     * @param loadDefaults whether to attempt to load the default properties\n      */\n     public ConfigurationImpl(boolean loadDefaults) {\n         logFactoryPlugin = addPlugin(\"org.apache.openjpa.lib.Log\", true);\n-\n         String[] aliases = new String[] {\n-                \"true\", \"org.apache.openjpa.lib.log.LogFactoryImpl\", \"commons\",\n-                \"org.apache.openjpa.lib.log.CommonsLogFactory\", \"log4j\",\n-                \"org.apache.openjpa.lib.log.Log4JLogFactory\", \"none\",\n-                \"org.apache.openjpa.lib.log.NoneLogFactory\", \"false\",\n-                \"org.apache.openjpa.lib.log.NoneLogFactory\",\n-            };\n+            \"true\", \"org.apache.openjpa.lib.log.LogFactoryImpl\",\n+            \"commons\", \"org.apache.openjpa.lib.log.CommonsLogFactory\",\n+            \"log4j\", \"org.apache.openjpa.lib.log.Log4JLogFactory\",\n+            \"none\", \"org.apache.openjpa.lib.log.NoneLogFactory\",\n+            \"false\", \"org.apache.openjpa.lib.log.NoneLogFactory\", };\n         logFactoryPlugin.setAliases(aliases);\n         logFactoryPlugin.setDefault(aliases[0]);\n         logFactoryPlugin.setString(aliases[0]);\n         logFactoryPlugin.setInstantiatingGetter(\"getLogFactory\");\n \n-        if (loadDefaults) {\n+        if (loadDefaults)\n             loadDefaults();\n-        }\n     }\n \n     /**\n-     *  Automatically load default values from the system's\n-     *  {@link ConfigurationProvider}s, and from System properties.\n+     * Automatically load default values from the system's\n+     * {@link ConfigurationProvider}s, and from System properties.\n      */\n     public boolean loadDefaults() {\n-        ConfigurationProvider provider = Configurations.loadDefaults(getClass()\n-                                                                         .getClassLoader());\n-\n-        if (provider != null) {\n+        ConfigurationProvider provider = Configurations.loadDefaults\n+            (getClass().getClassLoader());\n+        if (provider != null)\n             provider.setInto(this);\n-        }\n \n         // let system properties override other defaults\n         try {\n@@ -139,17 +125,12 @@ public boolean loadDefaults() {\n         }\n \n         _defaults = true;\n-\n         if (provider == null) {\n             Log log = getConfigurationLog();\n-\n-            if (log.isTraceEnabled()) {\n+            if (log.isTraceEnabled())\n                 log.trace(_loc.get(\"no-providers\"));\n-            }\n-\n             return false;\n         }\n-\n         return true;\n     }\n \n@@ -158,11 +139,9 @@ public String getProductName() {\n     }\n \n     public LogFactory getLogFactory() {\n-        if (logFactoryPlugin.get() == null) {\n+        if (logFactoryPlugin.get() == null)\n             logFactoryPlugin.instantiate(LogFactory.class, this);\n-        }\n-\n-        return (LogFactory) logFactoryPlugin.get();\n+        return(LogFactory) logFactoryPlugin.get();\n     }\n \n     public void setLogFactory(LogFactory logFactory) {\n@@ -184,50 +163,45 @@ public Log getLog(String category) {\n     }\n \n     /**\n-     *  Returns the logging channel <code>org.apache.openjpa.lib.Runtime</code> by\n-     *  default.\n+     * Returns the logging channel <code>org.apache.openjpa.lib.Runtime</code> by\n+     * default.\n      */\n     public Log getConfigurationLog() {\n         return getLog(\"org.apache.openjpa.lib.Runtime\");\n     }\n \n     /**\n-     *  Returns the logging channel <code>org.apache.openjpa.lib.Manage</code> by\n-     *  default.\n+     * Returns the logging channel <code>org.apache.openjpa.lib.Manage</code> by\n+     * default.\n      */\n     public Log getManagementLog() {\n         return getLog(\"org.apache.openjpa.lib.Manage\");\n     }\n \n     /**\n-     *  Returns the logging channel <code>org.apache.openjpa.lib.Profile</code> by\n-     *  default.\n+     * Returns the logging channel <code>org.apache.openjpa.lib.Profile</code> by\n+     * default.\n      */\n     public Log getProfilingLog() {\n         return getLog(\"org.apache.openjpa.lib.Profile\");\n     }\n \n     public Value[] getValues() {\n-        return (Value[]) _vals.toArray(new Value[_vals.size()]);\n+        return(Value[]) _vals.toArray(new Value[_vals.size()]);\n     }\n \n     public Value getValue(String property) {\n-        if (property == null) {\n+        if (property == null)\n             return null;\n-        }\n \n         // search backwards so that custom values added after construction\n         // are found quickly, since this will be the std way of accessing them\n         Value val;\n-\n         for (int i = _vals.size() - 1; i >= 0; i--) {\n             val = (Value) _vals.get(i);\n-\n-            if (val.getProperty().equals(property)) {\n+            if (val.getProperty().equals(property))\n                 return val;\n-            }\n         }\n-\n         return null;\n     }\n \n@@ -242,102 +216,84 @@ public void instantiateAll() {\n         String getterName;\n         Method getter;\n         Object getterTarget;\n-\n         for (int i = 0; i < _vals.size(); i++) {\n             val = (Value) _vals.get(i);\n             getterName = val.getInstantiatingGetter();\n-\n-            if (getterName == null) {\n+            if (getterName == null)\n                 continue;\n-            }\n \n             getterTarget = this;\n-\n             if (getterName.startsWith(\"this.\")) {\n                 getterName = getterName.substring(\"this.\".length());\n                 getterTarget = val;\n             }\n \n             try {\n-                getter = getterTarget.getClass()\n-                                     .getMethod(getterName, (Class[]) null);\n+                getter = getterTarget.getClass().getMethod(getterName,\n+                    (Class[]) null);\n                 getter.invoke(getterTarget, (Object[]) null);\n             } catch (Throwable t) {\n-                if (t instanceof InvocationTargetException) {\n+                if (t instanceof InvocationTargetException)\n                     t = ((InvocationTargetException) t).getTargetException();\n-                }\n-\n                 if (errs == null) {\n                     errs = new StringWriter();\n                     stack = new PrintWriter(errs);\n-                } else {\n+                } else\n                     errs.write(SEP);\n-                }\n-\n                 t.printStackTrace(stack);\n                 stack.flush();\n             }\n         }\n-\n-        if (errs != null) {\n-            throw new RuntimeException(_loc.get(\"get-prop-errs\", errs.toString()));\n-        }\n+        if (errs != null)\n+            throw new RuntimeException(_loc.get(\"get-prop-errs\",\n+                errs.toString()));\n     }\n \n     public boolean isReadOnly() {\n         return _readOnly;\n     }\n \n     public void addPropertyChangeListener(PropertyChangeListener listener) {\n-        if (_changeSupport == null) {\n+        if (_changeSupport == null)\n             _changeSupport = new PropertyChangeSupport(this);\n-        }\n-\n         _changeSupport.addPropertyChangeListener(listener);\n     }\n \n     public void removePropertyChangeListener(PropertyChangeListener listener) {\n-        if (_changeSupport != null) {\n+        if (_changeSupport != null)\n             _changeSupport.removePropertyChangeListener(listener);\n-        }\n     }\n \n     public void valueChanged(Value val) {\n-        if ((_changeSupport == null) && (_props == null)) {\n+        if (_changeSupport == null && _props == null)\n             return;\n-        }\n \n         String newString = val.getString();\n-\n-        if (_changeSupport != null) {\n-            _changeSupport.firePropertyChange(val.getProperty(), null, newString);\n-        }\n+        if (_changeSupport != null)\n+            _changeSupport.firePropertyChange(val.getProperty(), null,\n+                newString);\n \n         // keep cached props up to date\n         if (_props != null) {\n-            if (newString == null) {\n+            if (newString == null)\n                 _props.remove(val.getProperty());\n-            } else if (_props.containsKey(val.getProperty()) ||\n-                    (val.getDefault() == null) ||\n-                    !val.getDefault().equals(newString)) {\n+            else if (_props.containsKey(val.getProperty())\n+                || val.getDefault() == null\n+                || !val.getDefault().equals(newString))\n                 _props.put(val.getProperty(), newString);\n-            }\n         }\n     }\n \n     /**\n-     *  Closes all closeable plugins.\n+     * Closes all closeable plugins.\n      */\n     public void close() {\n         ObjectValue val;\n-\n         for (int i = 0; i < _vals.size(); i++) {\n-            if (!(_vals.get(i) instanceof ObjectValue)) {\n+            if (!(_vals.get(i) instanceof ObjectValue))\n                 continue;\n-            }\n \n             val = (ObjectValue) _vals.get(i);\n-\n             if (val.get() instanceof Closeable) {\n                 try {\n                     ((Closeable) val.get()).close();\n@@ -350,6 +306,7 @@ public void close() {\n     ///////////////////////////\n     // BeanInfo implementation\n     ///////////////////////////\n+\n     public BeanInfo[] getAdditionalBeanInfo() {\n         return new BeanInfo[0];\n     }\n@@ -375,61 +332,47 @@ public Image getIcon(int kind) {\n     }\n \n     public synchronized MethodDescriptor[] getMethodDescriptors() {\n-        if (_mds != null) {\n+        if (_mds != null)\n             return _mds;\n-        }\n-\n         PropertyDescriptor[] pds = getPropertyDescriptors();\n         _mds = new MethodDescriptor[pds.length * 2];\n-\n         for (int i = 0; i < pds.length; i++) {\n             _mds[i * 2] = new MethodDescriptor(pds[i].getWriteMethod());\n             _mds[(i * 2) + 1] = new MethodDescriptor(pds[i].getReadMethod());\n         }\n-\n         return _mds;\n     }\n \n     public synchronized PropertyDescriptor[] getPropertyDescriptors() {\n-        if (_pds != null) {\n+        if (_pds != null)\n             return _pds;\n-        }\n \n         _pds = new PropertyDescriptor[_vals.size()];\n-\n         List failures = null;\n         Value val;\n-\n         for (int i = 0; i < _vals.size(); i++) {\n             val = (Value) _vals.get(i);\n-\n             try {\n                 _pds[i] = getPropertyDescriptor(val);\n             } catch (MissingResourceException mre) {\n-                if (failures == null) {\n+                if (failures == null)\n                     failures = new ArrayList();\n-                }\n-\n                 failures.add(val.getProperty());\n             } catch (IntrospectionException ie) {\n-                if (failures == null) {\n+                if (failures == null)\n                     failures = new ArrayList();\n-                }\n-\n                 failures.add(val.getProperty());\n             }\n         }\n-\n-        if (failures != null) {\n+        if (failures != null)\n             throw new ParseException(_loc.get(\"invalid-property-descriptors\",\n-                    failures));\n-        }\n+                failures));\n \n         return _pds;\n     }\n \n     /**\n-     *  Create a property descriptor for the given value.\n+     * Create a property descriptor for the given value.\n      */\n     private PropertyDescriptor getPropertyDescriptor(Value val)\n         throws IntrospectionException {\n@@ -438,186 +381,151 @@ private PropertyDescriptor getPropertyDescriptor(Value val)\n \n         // set up property descriptor\n         PropertyDescriptor pd;\n-\n         try {\n-            pd = new PropertyDescriptor(Introspector.decapitalize(prop),\n-                    getClass());\n+            pd = new PropertyDescriptor\n+                (Introspector.decapitalize(prop), getClass());\n         } catch (IntrospectionException ie) {\n-            // if there aren't any methods for this value (i.e., if it's a \n+            // if there aren't any methods for this value(i.e., if it's a\n             // dynamically-added value), then an IntrospectionException will\n             // be thrown. Try to create a PD with no read or write methods.\n             pd = new PropertyDescriptor(Introspector.decapitalize(prop),\n-                    (Method) null, (Method) null);\n+                (Method) null, (Method) null);\n         }\n-\n         pd.setDisplayName(findLocalized(prop + \"-name\", true, val.getScope()));\n         pd.setShortDescription(findLocalized(prop + \"-desc\", true,\n-                val.getScope()));\n+            val.getScope()));\n         pd.setExpert(\"true\".equals(findLocalized(prop + \"-expert\", false,\n-                    val.getScope())));\n+            val.getScope())));\n \n         try {\n-            pd.setReadMethod(getClass()\n-                                 .getMethod(\"get\" +\n-                    StringUtils.capitalize(prop), (Class[]) null));\n-            pd.setWriteMethod(getClass()\n-                                  .getMethod(\"set\" +\n-                    StringUtils.capitalize(prop),\n-                    new Class[] { pd.getReadMethod().getReturnType() }));\n+            pd.setReadMethod(getClass().getMethod(\"get\"\n+                + StringUtils.capitalize(prop), (Class[]) null));\n+            pd.setWriteMethod(getClass().getMethod(\"set\"\n+                + StringUtils.capitalize(prop), new Class[]\n+                {pd.getReadMethod().getReturnType()}));\n         } catch (Throwable t) {\n-            // if an error occurs, it might be because the value is a \n+            // if an error occurs, it might be because the value is a\n             // dynamic property.\n         }\n \n         String type = findLocalized(prop + \"-type\", true, val.getScope());\n-\n-        if (type != null) {\n+        if (type != null)\n             pd.setValue(ATTRIBUTE_TYPE, type);\n-        }\n \n         String cat = findLocalized(prop + \"-cat\", false, val.getScope());\n-\n-        if (cat != null) {\n+        if (cat != null)\n             pd.setValue(ATTRIBUTE_CATEGORY, cat);\n-        }\n \n         String order = findLocalized(prop + \"-displayorder\", false,\n-                val.getScope());\n-\n-        if (order != null) {\n+            val.getScope());\n+        if (order != null)\n             pd.setValue(ATTRIBUTE_ORDER, order);\n-        }\n \n         // collect allowed values from alias keys, listed values, and\n         // interface implementors\n         Collection allowed = new TreeSet();\n         List aliases = Collections.EMPTY_LIST;\n-\n         if (val.getAliases() != null) {\n             aliases = Arrays.asList(val.getAliases());\n-\n             for (int i = 0; i < aliases.size(); i += 2)\n                 allowed.add(aliases.get(i));\n         }\n-\n-        String[] vals = Strings.split(findLocalized(prop + \"-values\", false,\n-                    val.getScope()), \",\", 0);\n-\n+        String[] vals = Strings.split(findLocalized(prop\n+            + \"-values\", false, val.getScope()), \",\", 0);\n         for (int i = 0; i < vals.length; i++)\n-            if (!aliases.contains(vals[i])) {\n+            if (!aliases.contains(vals[i]))\n                 allowed.add(vals[i]);\n-            }\n-\n         try {\n-            Class intf = Class.forName(findLocalized(prop + \"-interface\", true,\n-                        val.getScope()), false, getClass().getClassLoader());\n+            Class intf = Class.forName(findLocalized(prop\n+                + \"-interface\", true, val.getScope()), false,\n+                getClass().getClassLoader());\n             pd.setValue(ATTRIBUTE_INTERFACE, intf.getName());\n-\n             String[] impls = Services.getImplementors(intf);\n-\n             for (int i = 0; i < impls.length; i++)\n-                if (!aliases.contains(impls[i])) {\n+                if (!aliases.contains(impls[i]))\n                     allowed.add(impls[i]);\n-                }\n         } catch (Throwable t) {\n         }\n-\n-        if (!allowed.isEmpty()) {\n-            pd.setValue(ATTRIBUTE_ALLOWED_VALUES,\n-                (String[]) allowed.toArray(new String[allowed.size()]));\n-        }\n+        if (!allowed.isEmpty())\n+            pd.setValue(ATTRIBUTE_ALLOWED_VALUES, (String[]) allowed.toArray\n+                (new String[allowed.size()]));\n \n         return pd;\n     }\n \n     /**\n-     *  Find the given localized string, or return null if not found.\n+     * Find the given localized string, or return null if not found.\n      */\n     private String findLocalized(String key, boolean fatal, Class scope) {\n         // find the localizer package that contains this key\n         Localizer loc = null;\n \n-        // check the package that the value claims to be defined in, if \n+        // check the package that the value claims to be defined in, if\n         // available, before we start guessing.\n         if (scope != null) {\n             loc = Localizer.forPackage(scope);\n-\n             try {\n                 return loc.getFatal(key);\n             } catch (MissingResourceException mse) {\n             }\n         }\n \n         for (Class cls = getClass(); cls != Object.class;\n-                cls = cls.getSuperclass()) {\n+            cls = cls.getSuperclass()) {\n             loc = Localizer.forPackage(cls);\n-\n             try {\n                 return loc.getFatal(key);\n             } catch (MissingResourceException mse) {\n             }\n         }\n \n-        if (fatal) {\n+        if (fatal)\n             throw new MissingResourceException(key, getClass().getName(), key);\n-        }\n-\n         return null;\n     }\n \n     ////////////////\n     // To/from maps\n     ////////////////\n+\n     public Map toProperties(boolean storeDefaults) {\n         // clone properties before making any modifications; we need to keep\n         // the internal properties instance consistent to maintain equals and\n         // hashcode contracts\n         Map clone;\n-\n-        if (_props == null) {\n+        if (_props == null)\n             clone = new HashMap();\n-        } else if (_props instanceof Properties) {\n+        else if (_props instanceof Properties)\n             clone = (Map) ((Properties) _props).clone();\n-        } else {\n+        else\n             clone = new HashMap(_props);\n-        }\n \n         // if no existing properties or the properties should contain entries\n         // with default values, add values to properties\n-        if ((_props == null) || storeDefaults) {\n+        if (_props == null || storeDefaults) {\n             Value val;\n             String str;\n-\n             for (int i = 0; i < _vals.size(); i++) {\n-                // if key in existing properties, we already know value is up \n+                // if key in existing properties, we already know value is up\n                 // to date\n                 val = (Value) _vals.get(i);\n-\n-                if ((_props != null) && _props.containsKey(val.getProperty())) {\n+                if (_props != null && _props.containsKey(val.getProperty()))\n                     continue;\n-                }\n \n                 str = val.getString();\n-\n-                if ((str != null) &&\n-                        (storeDefaults || !str.equals(val.getDefault()))) {\n+                if (str != null && (storeDefaults\n+                    || !str.equals(val.getDefault())))\n                     clone.put(val.getProperty(), str);\n-                }\n             }\n-\n-            if (_props == null) {\n+            if (_props == null)\n                 _props = new HashMap(clone);\n-            }\n         }\n-\n         return clone;\n     }\n \n     public void fromProperties(Map map) {\n-        if ((map == null) || map.isEmpty()) {\n+        if (map == null || map.isEmpty())\n             return;\n-        }\n-\n         assertNotReadOnly();\n \n         // if the only previous call was to load defaults, forget them.\n@@ -633,19 +541,15 @@ public void fromProperties(Map map) {\n         boolean ser = true;\n         Value val;\n         Object set;\n-\n         for (int i = 0; i < _vals.size(); i++) {\n             val = (Value) _vals.get(i);\n             set = map.get(val.getProperty());\n-\n-            if (set == null) {\n+            if (set == null)\n                 continue;\n-            }\n \n             if (set instanceof String) {\n-                if (!StringUtils.equals((String) set, val.getString())) {\n+                if (!StringUtils.equals((String) set, val.getString()))\n                     val.setString((String) set);\n-                }\n             } else {\n                 ser = ser && set instanceof Serializable;\n                 val.setObject(set);\n@@ -654,60 +558,50 @@ public void fromProperties(Map map) {\n             remaining.remove(val.getProperty());\n         }\n \n-        // convention is to point product at a resource with the \n+        // convention is to point product at a resource with the\n         // <product>.properties System property; remove that property so we\n         // we don't warn about it\n         remaining.remove(getProductName() + \".properties\");\n \n         // now warn if there are any remaining properties that there\n         // is an unhandled prop\n         Map.Entry entry;\n-\n         for (Iterator itr = remaining.entrySet().iterator(); itr.hasNext();) {\n             entry = (Map.Entry) itr.next();\n-\n-            if (entry.getKey() != null) {\n+            if (entry.getKey() != null)\n                 warnInvalidProperty((String) entry.getKey());\n-            }\n-\n             ser = ser && entry.getValue() instanceof Serializable;\n         }\n \n         // cache properties\n-        if ((_props == null) && ser) {\n+        if (_props == null && ser)\n             _props = map;\n-        }\n     }\n \n     /**\n-     *  Issue a warning that the specified property is not valid.\n+     * Issue a warning that the specified property is not valid.\n      */\n     private void warnInvalidProperty(String propName) {\n-        if (!isInvalidProperty(propName)) {\n+        if (!isInvalidProperty(propName))\n             return;\n-        }\n-\n         Log log = getConfigurationLog();\n-\n-        if ((log == null) || !log.isWarnEnabled()) {\n+        if (log == null || !log.isWarnEnabled())\n             return;\n-        }\n \n         // try to find the closest string to the invalid property\n         // so that we can provide a hint in case of a misspelling\n-        String closest = StringDistance.getClosestLevenshteinDistance(propName,\n-                new PropertyList(), 15);\n+        String closest = StringDistance.getClosestLevenshteinDistance\n+            (propName, new PropertyList(), 15);\n \n-        if (closest == null) {\n+        if (closest == null)\n             log.warn(_loc.get(\"invalid-property\", propName));\n-        } else {\n+        else\n             log.warn(_loc.get(\"invalid-property-hint\", propName, closest));\n-        }\n     }\n \n     /**\n-     *  Returns true if the specified property name should raise a warning\n-     *  if it is not found in the list of known properties.\n+     * Returns true if the specified property name should raise a warning\n+     * if it is not found in the list of known properties.\n      */\n     protected boolean isInvalidProperty(String propName) {\n         // by default, we don't warn on any properties, since we don't\n@@ -716,110 +610,98 @@ protected boolean isInvalidProperty(String propName) {\n     }\n \n     /**\n-     *  This method loads the named resource as a properties file.  It is\n-     *  useful for auto-configuration tools so users can specify a\n-     *  <code>properties</code> value with the name of a resource.\n+     * This method loads the named resource as a properties file. It is\n+     * useful for auto-configuration tools so users can specify a\n+     * <code>properties</code> value with the name of a resource.\n      */\n     public void setProperties(String resourceName) throws IOException {\n-        Configurations.load(resourceName, getClass().getClassLoader())\n-                      .setInto(this);\n+        Configurations.load(resourceName, getClass().getClassLoader()).\n+            setInto(this);\n     }\n \n     /**\n-     *  This method loads the named file as a properties file.  It is\n-     *  useful for auto-configuration tools so users can specify a\n-     *  <code>propertiesFile</code> value with the name of a file.\n+     * This method loads the named file as a properties file. It is\n+     * useful for auto-configuration tools so users can specify a\n+     * <code>propertiesFile</code> value with the name of a file.\n      */\n     public void setPropertiesFile(File file) throws IOException {\n-        Configurations.load(file, getClass().getClassLoader()).setInto(this);\n+        Configurations.load(file, getClass().getClassLoader()). setInto(this);\n     }\n \n     /////////////\n     // Utilities\n     /////////////\n \n     /**\n-     *  Checks if the configuration is read only and if so throws an\n-     *  exception, otherwise returns silently.\n-     *  Implementations        should call this method before setting any state.\n+     * Checks if the configuration is read only and if so throws an\n+     * exception, otherwise returns silently.\n+     * Implementations should call this method before setting any state.\n      */\n     public void assertNotReadOnly() {\n-        if (isReadOnly()) {\n+        if (isReadOnly())\n             throw new IllegalStateException(_loc.get(\"read-only\"));\n-        }\n     }\n \n     /**\n-     *  Performs an equality check based on the properties returned from\n-     *  {@link #toProperties}.\n+     * Performs an equality check based on the properties returned from\n+     * {@link #toProperties}.\n      */\n     public boolean equals(Object other) {\n-        if (other == this) {\n+        if (other == this)\n             return true;\n-        }\n-\n-        if (other == null) {\n+        if (other == null)\n             return false;\n-        }\n-\n-        if (!getClass().equals(other.getClass())) {\n+        if (!getClass().equals(other.getClass()))\n             return false;\n-        }\n \n         // compare properties\n         ConfigurationImpl conf = (ConfigurationImpl) other;\n         Map p1 = (_props == null) ? toProperties(false) : _props;\n         Map p2 = (conf._props == null) ? conf.toProperties(false) : conf._props;\n-\n         return p1.equals(p2);\n     }\n \n     /**\n-     *  Computes hash code based on the properties returned from\n-     *  {@link #toProperties}.\n+     * Computes hash code based on the properties returned from\n+     * {@link #toProperties}.\n      */\n     public int hashCode() {\n-        if (_props != null) {\n+        if (_props != null)\n             return _props.hashCode();\n-        }\n-\n         return toProperties(false).hashCode();\n     }\n \n     /**\n-     *  Implementation of the {@link Externalizable} interface to read from\n-     *  the properties written by {@link #writeExternal}.\n+     * Implementation of the {@link Externalizable} interface to read from\n+     * the properties written by {@link #writeExternal}.\n      */\n     public void readExternal(ObjectInput in)\n         throws IOException, ClassNotFoundException {\n         fromProperties((Map) in.readObject());\n     }\n \n     /**\n-     *  Implementation of the {@link Externalizable} interface to write\n-     *  the properties returned by {@link #toProperties}.\n+     * Implementation of the {@link Externalizable} interface to write\n+     * the properties returned by {@link #toProperties}.\n      */\n     public void writeExternal(ObjectOutput out) throws IOException {\n-        if (_props != null) {\n+        if (_props != null)\n             out.writeObject(_props);\n-        } else {\n+        else\n             out.writeObject(toProperties(false));\n-        }\n     }\n \n     /**\n-     *  Uses {@link #toProperties} and {@link #fromProperties} to clone\n-     *  configuration.\n+     * Uses {@link #toProperties} and {@link #fromProperties} to clone\n+     * configuration.\n      */\n     public Object clone() {\n         try {\n-            Constructor cons = getClass()\n-                                   .getConstructor(new Class[] { boolean.class });\n-            Configuration clone = (Configuration) cons.newInstance(new Object[] {\n-                        Boolean.FALSE\n-                    });\n+            Constructor cons = getClass().getConstructor\n+                (new Class[] { boolean.class });\n+            Configuration clone = (Configuration) cons.newInstance\n+                (new Object[] { Boolean.FALSE });\n             clone.fromProperties(toProperties(true));\n-\n             return clone;\n         } catch (RuntimeException re) {\n             throw re;\n@@ -829,118 +711,105 @@ public Object clone() {\n     }\n \n     public boolean removeValue(Value val) {\n-        if (!_vals.remove(val)) {\n+        if (!_vals.remove(val))\n             return false;\n-        }\n-\n         val.setListener(null);\n-\n         return true;\n     }\n \n     public Value addValue(Value val) {\n         _vals.add(val);\n         val.setListener(this);\n-\n         return val;\n     }\n \n     /**\n-     *  Add the given value to the set of configuration properties.\n+     * Add the given value to the set of configuration properties.\n      */\n     public StringValue addString(String property) {\n         StringValue val = new StringValue(property);\n         addValue(val);\n-\n         return val;\n     }\n \n     /**\n-     *  Add the given value to the set of configuration properties.\n+     * Add the given value to the set of configuration properties.\n      */\n     public FileValue addFile(String property) {\n         FileValue val = new FileValue(property);\n         addValue(val);\n-\n         return val;\n     }\n \n     /**\n-     *  Add the given value to the set of configuration properties.\n+     * Add the given value to the set of configuration properties.\n      */\n     public IntValue addInt(String property) {\n         IntValue val = new IntValue(property);\n         addValue(val);\n-\n         return val;\n     }\n \n     /**\n-     *  Add the given value to the set of configuration properties.\n+     * Add the given value to the set of configuration properties.\n      */\n     public DoubleValue addDouble(String property) {\n         DoubleValue val = new DoubleValue(property);\n         addValue(val);\n-\n         return val;\n     }\n \n     /**\n-     *  Add the given value to the set of configuration properties.\n+     * Add the given value to the set of configuration properties.\n      */\n     public BooleanValue addBoolean(String property) {\n         BooleanValue val = new BooleanValue(property);\n         addValue(val);\n-\n         return val;\n     }\n \n     /**\n-     *  Add the given value to the set of configuration properties.\n+     * Add the given value to the set of configuration properties.\n      */\n     public StringListValue addStringList(String property) {\n         StringListValue val = new StringListValue(property);\n         addValue(val);\n-\n         return val;\n     }\n \n     /**\n-     *  Add the given value to the set of configuration properties.\n+     * Add the given value to the set of configuration properties.\n      */\n     public ObjectValue addObject(String property) {\n         ObjectValue val = new ObjectValue(property);\n         addValue(val);\n-\n         return val;\n     }\n \n     /**\n-     *  Add the given value to the set of configuration properties.\n+     * Add the given value to the set of configuration properties.\n      */\n     public PluginValue addPlugin(String property, boolean singleton) {\n         PluginValue val = new PluginValue(property, singleton);\n         addValue(val);\n-\n         return val;\n     }\n \n     /**\n-     *  Add the given value to the set of configuration properties.\n+     * Add the given value to the set of configuration properties.\n      */\n     public PluginListValue addPluginList(String property) {\n         PluginListValue val = new PluginListValue(property);\n         addValue(val);\n-\n         return val;\n     }\n \n     /**\n-     *  Exposes our values list as a list of property names.\n+     * Exposes our values list as a list of property names.\n      */\n     private class PropertyList extends AbstractList {\n         public Object get(int i) {\n-            return ((Value) _vals.get(i)).getProperty();\n+            return((Value) _vals.get(i)).getProperty();\n         }\n \n         public int size() {"},{"sha":"3dd94b77da27fd2706c09f60f0e39b064fa65cab","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationProvider.java","status":"modified","additions":23,"deletions":28,"changes":51,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationProvider.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationProvider.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74","patch":"@@ -1,13 +1,10 @@\n /*\n  * Copyright 2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *  Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n@@ -16,56 +13,54 @@\n package org.apache.openjpa.lib.conf;\n \n import java.io.*;\n-\n import java.util.*;\n \n-\n /**\n- *  Implementations of this interface can populate {@link Configuration}s in\n- *  some environment-specific way.  Implementations must implement the\n- *  <code>equals</code> and <code>hashCode</code> methods so that equivalent\n- *  configurations compare equal.\n- *\n-*  @since 4.0.0\n- *  @nojavadoc */\n+ * Implementations of this interface can populate {@link Configuration}s in\n+ * some environment-specific way. Implementations must implement the\n+ * <code>equals</code> and <code>hashCode</code> methods so that equivalent\n+ * configurations compare equal.\n+ * \n+ * @since 4.0.0\n+ * @nojavadoc\n+ */\n public interface ConfigurationProvider {\n     /**\n-     *  Load defaults, or return false if no defaults for this provider found.\n+     * Load defaults, or return false if no defaults for this provider found.\n      */\n     public boolean loadDefaults(ClassLoader loader) throws Exception;\n \n     /**\n-     *  Load the given given resource, or return false if it is not a resource\n-     *  this provider understands.  The given class loader may be null.\n+     * Load the given given resource, or return false if it is not a resource\n+     * this provider understands. The given class loader may be null.\n      */\n-    public boolean load(String resource, ClassLoader loader)\n-        throws Exception;\n+    public boolean load(String resource, ClassLoader loader) throws Exception;\n \n     /**\n-     *  Load given file, or return false if it is not a file this provider\n-     *  understands.\n+     * Load given file, or return false if it is not a file this provider\n+     * understands.\n      */\n     public boolean load(File file) throws Exception;\n \n     /**\n-     *  Return properties loaded thus far, or empty map if none.\n+     * Return properties loaded thus far, or empty map if none.\n      */\n     public Map getProperties();\n \n     /**\n-     *  Add the given properties to those in this provider, overwriting\n-     *  any exisitng properties under the same keys.\n+     * Add the given properties to those in this provider, overwriting\n+     * any exisitng properties under the same keys.\n      */\n     public void addProperties(Map props);\n \n     /**\n-     *  Add a single property, overwriting any existing property under the\n-     *  same key.\n+     * Add a single property, overwriting any existing property under the\n+     * same key.\n      */\n     public Object addProperty(String key, Object value);\n \n     /**\n-     *  Set loaded information into the given configuration.\n+     * Set loaded information into the given configuration.\n      */\n     public void setInto(Configuration conf);\n }"},{"sha":"156a3c0273bb9f4dc00134b46a287f8d6077607e","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java","status":"modified","additions":173,"deletions":302,"changes":475,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74","patch":"@@ -1,189 +1,148 @@\n /*\n  * Copyright 2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *  Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n package org.apache.openjpa.lib.conf;\n \n+import java.io.*;\n+import java.util.*;\n+import javax.naming.*;\n import org.apache.commons.lang.exception.*;\n-\n import org.apache.openjpa.lib.log.*;\n import org.apache.openjpa.lib.util.*;\n-\n import serp.util.*;\n \n-import java.io.*;\n-\n-import java.util.*;\n-\n-import javax.naming.*;\n-\n-\n /**\n- *  <p>Utility methods dealing with configuration.</p>\n- *\n- *  @author Abe White\n- *  @nojavadoc */\n+ * Utility methods dealing with configuration.\n+ * \n+ * @author Abe White\n+ * @nojavadoc\n+ */\n public class Configurations {\n-    private static final Localizer _loc = Localizer.forPackage(Configurations.class);\n+    private static final Localizer _loc = Localizer.forPackage\n+        (Configurations.class);\n \n     /**\n-     *  Return the class name from the given plugin string, or null if none.\n-      */\n+     * Return the class name from the given plugin string, or null if none.\n+     */\n     public static String getClassName(String plugin) {\n         return getPluginComponent(plugin, true);\n     }\n \n     /**\n-     *  Return the properties part of the given plugin string, or null if none.\n+     * Return the properties part of the given plugin string, or null if none.\n      */\n     public static String getProperties(String plugin) {\n         return getPluginComponent(plugin, false);\n     }\n \n     /**\n-     *  Return either the class name or properties string from a plugin string.\n+     * Return either the class name or properties string from a plugin string.\n      */\n     private static String getPluginComponent(String plugin, boolean clsName) {\n-        if (plugin != null) {\n+        if (plugin != null)\n             plugin = plugin.trim();\n-        }\n-\n-        if ((plugin == null) || (plugin.length() == 0)) {\n+        if (plugin == null || plugin.length() == 0)\n             return null;\n-        }\n \n         int openParen = -1;\n-\n-        if (plugin.charAt(plugin.length() - 1) == ')') {\n+        if (plugin.charAt(plugin.length() - 1) == ')')\n             openParen = plugin.indexOf('(');\n-        }\n-\n         if (openParen == -1) {\n             int eq = plugin.indexOf('=');\n-\n-            if (eq == -1) {\n-                return (clsName) ? plugin : null;\n-            }\n-\n-            return (clsName) ? null : plugin;\n+            if (eq == -1)\n+                return(clsName) ? plugin : null;\n+            return(clsName) ? null : plugin;\n         }\n \n         // clsName(props) form\n-        if (clsName) {\n+        if (clsName)\n             return plugin.substring(0, openParen).trim();\n-        }\n-\n-        String prop = plugin.substring(openParen + 1, plugin.length() - 1).trim();\n-\n-        return (prop.length() == 0) ? null : prop;\n+        String prop = plugin.substring(openParen + 1,\n+            plugin.length() - 1).trim();\n+        return(prop.length() == 0) ? null : prop;\n     }\n \n     /**\n-     *  Combine the given class name and properties into a plugin string.\n+     * Combine the given class name and properties into a plugin string.\n      */\n     public static String getPlugin(String clsName, String props) {\n-        if ((clsName == null) || (clsName.length() == 0)) {\n+        if (clsName == null || clsName.length() == 0)\n             return props;\n-        }\n-\n-        if ((props == null) || (props.length() == 0)) {\n+        if (props == null || props.length() == 0)\n             return clsName;\n-        }\n-\n         return clsName + \"(\" + props + \")\";\n     }\n \n     /**\n-     *  Create the instance with the given class name, using the given\n-     *  class loader.  No configuration of the instance is performed by\n-     *  this method.\n+     * Create the instance with the given class name, using the given\n+     * class loader. No configuration of the instance is performed by\n+     * this method.\n      */\n     public static Object newInstance(String clsName, ClassLoader loader) {\n         return newInstance(clsName, null, null, loader, true);\n     }\n \n     /**\n-     *  Create and configure an instance with the given class name and\n-     *  properties.\n+     * Create and configure an instance with the given class name and\n+     * properties.\n      */\n     public static Object newInstance(String clsName, Configuration conf,\n         String props, ClassLoader loader) {\n         Object obj = newInstance(clsName, null, conf, loader, true);\n         configureInstance(obj, conf, props);\n-\n         return obj;\n     }\n \n     /**\n-     *  Helper method used by members of this package to instantiate plugin\n-     *  values.\n+     * Helper method used by members of this package to instantiate plugin\n+     * values.\n      */\n     static Object newInstance(String clsName, Value val, Configuration conf,\n         ClassLoader loader, boolean fatal) {\n-        if ((clsName == null) || (clsName.length() == 0)) {\n+        if (clsName == null || clsName.length() == 0)\n             return null;\n-        }\n-\n-        if ((loader == null) && (conf != null)) {\n+        if (loader == null && conf != null)\n             loader = conf.getClass().getClassLoader();\n-        }\n \n         Class cls = null;\n-\n         try {\n             cls = Strings.toClass(clsName, loader);\n         } catch (RuntimeException re) {\n-            if (val != null) {\n+            if (val != null)\n                 re = getCreateException(clsName, val, re);\n-            }\n-\n-            if (fatal) {\n+            if (fatal)\n                 throw re;\n-            }\n-\n             Log log = (conf == null) ? null : conf.getConfigurationLog();\n-\n-            if ((log != null) && log.isErrorEnabled()) {\n+            if (log != null && log.isErrorEnabled())\n                 log.error(re);\n-            }\n-\n             return null;\n         }\n \n         try {\n             return cls.newInstance();\n         } catch (Exception e) {\n-            RuntimeException re = new NestableRuntimeException(_loc.get(\n-                        \"obj-create\", cls), e);\n-\n-            if (fatal) {\n+            RuntimeException re = new NestableRuntimeException(_loc.get\n+                (\"obj-create\", cls), e);\n+            if (fatal)\n                 throw re;\n-            }\n-\n             Log log = (conf == null) ? null : conf.getConfigurationLog();\n-\n-            if ((log != null) && log.isErrorEnabled()) {\n+            if (log != null && log.isErrorEnabled())\n                 log.error(re);\n-            }\n-\n             return null;\n         }\n     }\n \n     /**\n-     *  Helper method to throw an informative description on instantiation\n-     *  error.\n+     * Helper method to throw an informative description on instantiation error.\n      */\n     private static RuntimeException getCreateException(String clsName,\n         Value val, Exception e) {\n@@ -194,229 +153,188 @@ private static RuntimeException getCreateException(String clsName,\n         String alias = val.alias(clsName);\n         String[] aliases = val.getAliases();\n         String[] keys;\n-\n-        if (aliases.length == 0) {\n+        if (aliases.length == 0)\n             keys = aliases;\n-        } else {\n+        else {\n             keys = new String[aliases.length / 2];\n-\n             for (int i = 0; i < aliases.length; i += 2)\n                 keys[i / 2] = aliases[i];\n         }\n \n         String closest;\n-\n         if (keys.length == 0) {\n             msg = \"invalid-plugin\";\n             params = new Object[] { val.getProperty(), alias, e.toString(), };\n-        } else if ((closest = StringDistance.getClosestLevenshteinDistance(\n-                        alias, keys, 0.5f)) == null) {\n+        } else if ((closest = StringDistance.getClosestLevenshteinDistance\n+            (alias, keys, 0.5f)) == null) {\n             msg = \"invalid-plugin-aliases\";\n             params = new Object[] {\n-                    val.getProperty(), alias, e.toString(),\n-                    new TreeSet(Arrays.asList(keys)),\n-                };\n+                val.getProperty(), alias, e.toString(),\n+                new TreeSet(Arrays.asList(keys)), };\n         } else {\n             msg = \"invalid-plugin-aliases-hint\";\n             params = new Object[] {\n-                    val.getProperty(), alias, e.toString(),\n-                    new TreeSet(Arrays.asList(keys)), closest,\n-                };\n+                val.getProperty(), alias, e.toString(),\n+                new TreeSet(Arrays.asList(keys)), closest, };\n         }\n-\n         return new ParseException(_loc.get(msg, params), e);\n     }\n \n     /**\n-     *  Configures the given object with the given properties by\n-     *  matching the properties string to the object's setter\n-     *  methods. The properties string should be in the form\n-     *  \"prop1=val1, prop2=val2 ...\". Does not validate that setter\n-     *  methods exist for the properties.\n-     *\n-     *  @throws RuntimeException on configuration error\n+     * Configures the given object with the given properties by\n+     * matching the properties string to the object's setter\n+     * methods. The properties string should be in the form\n+     * \"prop1=val1, prop2=val2 ...\". Does not validate that setter\n+     * methods exist for the properties.\n+     * \n+     * @throws RuntimeException on configuration error\n      */\n     public static void configureInstance(Object obj, Configuration conf,\n         String properties) {\n         configureInstance(obj, conf, properties, null);\n     }\n \n     /**\n-     *  Configures the given object with the given properties by\n-     *  matching the properties string to the object's setter\n-     *  methods. The properties string should be in the form\n-     *  \"prop1=val1, prop2=val2 ...\". Validates that setter methods\n-     *  exist for the properties.\n-     *\n-     *  @throws RuntimeException on configuration error\n+     * Configures the given object with the given properties by\n+     * matching the properties string to the object's setter\n+     * methods. The properties string should be in the form\n+     * \"prop1=val1, prop2=val2 ...\". Validates that setter methods\n+     * exist for the properties.\n+     * \n+     * @throws RuntimeException on configuration error\n      */\n     public static void configureInstance(Object obj, Configuration conf,\n         String properties, String configurationName) {\n-        if (obj == null) {\n+        if (obj == null)\n             return;\n-        }\n \n         Properties props = null;\n-\n-        if ((properties != null) && (properties.length() > 0)) {\n+        if (properties != null && properties.length() > 0)\n             props = parseProperties(properties);\n-        }\n-\n         configureInstance(obj, conf, props, configurationName);\n     }\n \n     /**\n-     *  Configures the given object with the given properties by\n-     *  matching the properties string to the object's setter\n-     *  methods. Does not validate that setter methods exist for the\n-     *  properties.\n-     *\n-     *  @throws RuntimeException on configuration error\n+     * Configures the given object with the given properties by\n+     * matching the properties string to the object's setter\n+     * methods. Does not validate that setter methods exist for the properties.\n+     * \n+     * @throws RuntimeException on configuration error\n      */\n     public static void configureInstance(Object obj, Configuration conf,\n         Properties properties) {\n         configureInstance(obj, conf, properties, null);\n     }\n \n     /**\n-     *  Configures the given object with the given properties by\n-     *  matching the properties string to the object's setter\n-     *  methods. If <code>configurationName</code> is\n-     *  non-<code>null</code>, validates that setter methods exist for\n-     *  the properties.\n-     *\n-     *  @throws RuntimeException on configuration error\n+     * Configures the given object with the given properties by\n+     * matching the properties string to the object's setter\n+     * methods. If <code>configurationName</code> is\n+     * non-<code>null</code>, validates that setter methods exist for\n+     * the properties.\n+     * \n+     * @throws RuntimeException on configuration error\n      */\n     public static void configureInstance(Object obj, Configuration conf,\n         Properties properties, String configurationName) {\n-        if (obj == null) {\n+        if (obj == null)\n             return;\n-        }\n \n         Options opts = null;\n-\n-        if (properties instanceof Options) {\n+        if (properties instanceof Options)\n             opts = (Options) properties;\n-        } else if (properties != null) {\n+        else if (properties != null) {\n             opts = new Options();\n             opts.putAll(properties);\n         }\n \n         Configurable configurable = null;\n-\n-        if ((conf != null) && obj instanceof Configurable) {\n+        if (conf != null && obj instanceof Configurable)\n             configurable = (Configurable) obj;\n-        }\n \n         if (configurable != null) {\n             configurable.setConfiguration(conf);\n             configurable.startConfiguration();\n         }\n-\n         if (opts != null) {\n             Map invalidEntries = opts.setInto(obj);\n-\n-            if (obj instanceof GenericConfigurable) {\n+            if (obj instanceof GenericConfigurable)\n                 ((GenericConfigurable) obj).setInto(invalidEntries);\n-            }\n \n-            if (!invalidEntries.isEmpty() && (configurationName != null)) {\n+            if (!invalidEntries.isEmpty() && configurationName != null) {\n                 String msg = null;\n-                String first = (String) invalidEntries.keySet().iterator().next();\n-\n-                if ((invalidEntries.keySet().size() == 1) &&\n-                        (first.indexOf('.') == -1)) {\n+                String first = (String) invalidEntries.keySet().iterator()\n+                    .next();\n+                if (invalidEntries.keySet().size() == 1 &&\n+                    first.indexOf('.') == -1) {\n                     // if there's just one misspelling and this is not a\n                     // path traversal, check for near misses.\n                     Collection options = Options.findOptionsFor(obj.getClass());\n-                    String close = StringDistance.getClosestLevenshteinDistance(first,\n-                            options, 0.75f);\n-\n-                    if (close != null) {\n+                    String close = StringDistance.getClosestLevenshteinDistance\n+                        (first, options, 0.75f);\n+                    if (close != null)\n                         msg = _loc.get(\"invalid-config-param-hint\",\n-                                new Object[] {\n-                                    configurationName, obj.getClass(), first,\n-                                    close, options,\n-                                });\n-                    }\n+                            new Object[] {\n+                                configurationName, obj.getClass(), first, close,\n+                                options, });\n                 }\n \n                 if (msg == null) {\n-                    msg = _loc.get(\"invalid-config-params\",\n-                            new String[] {\n-                                configurationName, obj.getClass().getName(),\n-                                invalidEntries.keySet().toString(),\n-                                Options.findOptionsFor(obj.getClass()).toString(),\n-                            });\n+                    msg = _loc.get(\"invalid-config-params\", new String[] {\n+                        configurationName, obj.getClass().getName(),\n+                        invalidEntries.keySet().toString(),\n+                        Options.findOptionsFor(obj.getClass()).toString(), });\n                 }\n-\n                 throw new ParseException(msg);\n             }\n         }\n-\n-        if (configurable != null) {\n+        if (configurable != null)\n             configurable.endConfiguration();\n-        }\n     }\n \n     /**\n-     *  Turn a set of properties into a comma-separated string.\n+     * Turn a set of properties into a comma-separated string.\n      */\n     public static String serializeProperties(Map map) {\n-        if ((map == null) || map.isEmpty()) {\n+        if (map == null || map.isEmpty())\n             return null;\n-        }\n \n         StringBuffer buf = new StringBuffer();\n         Map.Entry entry;\n         String val;\n-\n         for (Iterator itr = map.entrySet().iterator(); itr.hasNext();) {\n             entry = (Map.Entry) itr.next();\n-\n-            if (buf.length() > 0) {\n+            if (buf.length() > 0)\n                 buf.append(\", \");\n-            }\n-\n             buf.append(entry.getKey()).append('=');\n             val = String.valueOf(entry.getValue());\n-\n-            if (val.indexOf(',') != -1) {\n+            if (val.indexOf(',') != -1)\n                 buf.append('\"').append(val).append('\"');\n-            } else {\n+            else\n                 buf.append(val);\n-            }\n         }\n-\n         return buf.toString();\n     }\n \n     /**\n-     *  Parse a set of properties from a comma-separated string.\n+     * Parse a set of properties from a comma-separated string.\n      */\n     public static Options parseProperties(String properties) {\n         Options opts = new Options();\n-\n-        if (properties == null) {\n+        if (properties == null)\n             return opts;\n-        }\n-\n         properties = properties.trim();\n-\n-        if (properties.length() == 0) {\n+        if (properties.length() == 0)\n             return opts;\n-        }\n \n         try {\n             String[] props = Strings.split(properties, \",\", 0);\n             int idx;\n             char quote;\n             String prop;\n             String val;\n-\n             for (int i = 0; i < props.length; i++) {\n                 idx = props[i].indexOf('=');\n-\n                 if (idx == -1) {\n                     // if the key is not assigned to any value, set the\n                     // value to the same thing as the key, and continue.\n@@ -434,244 +352,197 @@ public static Options parseProperties(String properties) {\n                 }\n \n                 // if the value is quoted, read until the end quote\n-                if (((val.startsWith(\"\\\"\") && val.endsWith(\"\\\"\")) ||\n-                        (val.startsWith(\"'\") && val.endsWith(\"'\"))) &&\n-                        (val.length() > 1)) {\n+                if (((val.startsWith(\"\\\"\") && val.endsWith(\"\\\"\"))\n+                    || (val.startsWith(\"'\") && val.endsWith(\"'\")))\n+                    && val.length() > 1)\n                     val = val.substring(1, val.length() - 1);\n-                } else if (val.startsWith(\"\\\"\") || val.startsWith(\"'\")) {\n+                else if (val.startsWith(\"\\\"\") || val.startsWith(\"'\")) {\n                     quote = val.charAt(0);\n-\n                     StringBuffer buf = new StringBuffer(val.substring(1));\n                     int quotIdx;\n-\n                     while (++i < props.length) {\n                         buf.append(\",\");\n \n                         quotIdx = props[i].indexOf(quote);\n-\n                         if (quotIdx != -1) {\n                             buf.append(props[i].substring(0, quotIdx));\n-\n-                            if ((quotIdx + 1) < props[i].length()) {\n+                            if (quotIdx + 1 < props[i].length())\n                                 buf.append(props[i].substring(quotIdx + 1));\n-                            }\n-\n                             break;\n-                        } else {\n+                        } else\n                             buf.append(props[i]);\n-                        }\n                     }\n \n                     val = buf.toString();\n                 }\n \n                 opts.put(prop, val);\n             }\n-\n             return opts;\n         } catch (RuntimeException re) {\n             throw new ParseException(_loc.get(\"prop-parse\", properties), re);\n         }\n     }\n \n     /**\n-     *  Set the given {@link Configuration} instance from the command line\n-     *  options provided.  All property names of the given configuration are\n-     *  recognized; additionally, if a <code>properties</code> or\n-     *  <code>p</code> argument exists, the resource it\n-     *  points to will be loaded and set into the given configuration instance.\n-     *  It can point to either a file or a resource name.\n+     * Set the given {@link Configuration} instance from the command line\n+     * options provided. All property names of the given configuration are\n+     * recognized; additionally, if a <code>properties</code> or\n+     * <code>p</code> argument exists, the resource it\n+     * points to will be loaded and set into the given configuration instance.\n+     * It can point to either a file or a resource name.\n      */\n     public static void populateConfiguration(Configuration conf, Options opts) {\n         String props = opts.removeProperty(\"properties\", \"p\", null);\n-\n-        if ((props != null) && (props.length() > 0)) {\n+        if (props != null && props.length() > 0) {\n             File file = new File(props);\n             ConfigurationProvider provider;\n-\n-            if (file.isFile()) {\n+            if (file.isFile())\n                 provider = load(file, null);\n-            } else {\n+            else {\n                 file = new File(\"META-INF\" + File.separatorChar + props);\n-\n-                if (file.isFile()) {\n+                if (file.isFile())\n                     provider = load(file, null);\n-                } else {\n+                else\n                     provider = load(props, null);\n-                }\n             }\n-\n             provider.setInto(conf);\n         }\n-\n         opts.setInto(conf);\n     }\n \n     /**\n-     *  Return a {@link ConfigurationProvider} that has parsed system defaults.\n+     * Return a {@link ConfigurationProvider} that has parsed system defaults.\n      */\n     public static ConfigurationProvider loadDefaults(ClassLoader loader) {\n-        if (loader == null) {\n+        if (loader == null)\n             loader = Thread.currentThread().getContextClassLoader();\n-        }\n-\n-        Class[] impls = Services.getImplementorClasses(ConfigurationProvider.class,\n-                loader);\n+        Class[] impls = Services.getImplementorClasses\n+            (ConfigurationProvider.class, loader);\n         ConfigurationProvider provider = null;\n         StringBuffer errs = null;\n-\n         for (int i = 0; i < impls.length; i++) {\n             provider = newProvider(impls[i]);\n-\n             try {\n-                if ((provider != null) && provider.loadDefaults(loader)) {\n+                if (provider != null && provider.loadDefaults(loader))\n                     return provider;\n-                }\n             } catch (MissingResourceException mre) {\n                 throw mre;\n             } catch (Exception e) {\n-                if (errs == null) {\n+                if (errs == null)\n                     errs = new StringBuffer();\n-                } else {\n+                else\n                     errs.append(\", \");\n-                }\n-\n                 errs.append(e.toString());\n             }\n         }\n-\n-        if (errs != null) {\n+        if (errs != null)\n             throw new MissingResourceException(errs.toString(),\n                 Configurations.class.getName(), \"defaults\");\n-        }\n \n         return null;\n     }\n \n     /**\n-     *  Return a new new configuration provider instance of the given class,\n-     *  or null if the class cannot be instantiated.\n+     * Return a new new configuration provider instance of the given class,\n+     * or null if the class cannot be instantiated.\n      */\n     private static ConfigurationProvider newProvider(Class cls) {\n         try {\n-            return (ConfigurationProvider) cls.newInstance();\n+            return(ConfigurationProvider) cls.newInstance();\n         } catch (Throwable e) {\n             return null;\n         }\n     }\n \n     /**\n-     *  Return a {@link ConfigurationProvider} that has parsed the given\n-     *  resource.  Throws {@link MissingResourceException} if resource does\n-     *  not exist.\n+     * Return a {@link ConfigurationProvider} that has parsed the given\n+     * resource. Throws {@link MissingResourceException} if resource does\n+     * not exist.\n      */\n-    public static ConfigurationProvider load(String resource, ClassLoader loader) {\n-        if ((resource == null) || (resource.length() == 0)) {\n+    public static ConfigurationProvider load(String resource,\n+        ClassLoader loader) {\n+        if (resource == null || resource.length() == 0)\n             return null;\n-        }\n \n-        if (loader == null) {\n+        if (loader == null)\n             loader = Thread.currentThread().getContextClassLoader();\n-        }\n-\n-        Class[] impls = Services.getImplementorClasses(ConfigurationProvider.class,\n-                loader);\n+        Class[] impls = Services.getImplementorClasses\n+            (ConfigurationProvider.class, loader);\n         ConfigurationProvider provider = null;\n         StringBuffer errs = null;\n-\n         for (int i = 0; i < impls.length; i++) {\n             provider = newProvider(impls[i]);\n-\n             try {\n-                if ((provider != null) && provider.load(resource, loader)) {\n+                if (provider != null && provider.load(resource, loader))\n                     return provider;\n-                }\n             } catch (MissingResourceException mre) {\n                 throw mre;\n             } catch (Exception e) {\n-                if (errs == null) {\n+                if (errs == null)\n                     errs = new StringBuffer();\n-                } else {\n+                else\n                     errs.append(\", \");\n-                }\n-\n                 errs.append(e.toString());\n             }\n         }\n-\n         String msg = (errs == null) ? resource : errs.toString();\n-        throw new MissingResourceException(msg, Configurations.class.getName(),\n-            resource);\n+        throw new MissingResourceException(msg,\n+            Configurations.class.getName(), resource);\n     }\n \n     /**\n-     *  Return a {@link ConfigurationProvider} that has parsed the given\n-     *  file.  Throws {@link MissingResourceException} if file does\n-     *  not exist.\n+     * Return a {@link ConfigurationProvider} that has parsed the given\n+     * file. Throws {@link MissingResourceException} if file does not exist.\n      */\n     public static ConfigurationProvider load(File file, ClassLoader loader) {\n-        if (file == null) {\n+        if (file == null)\n             return null;\n-        }\n \n-        if (loader == null) {\n+        if (loader == null)\n             loader = Thread.currentThread().getContextClassLoader();\n-        }\n-\n-        Class[] impls = Services.getImplementorClasses(ConfigurationProvider.class,\n-                loader);\n+        Class[] impls = Services.getImplementorClasses\n+            (ConfigurationProvider.class, loader);\n         ConfigurationProvider provider = null;\n         StringBuffer errs = null;\n-\n         for (int i = 0; i < impls.length; i++) {\n             provider = newProvider(impls[i]);\n-\n             try {\n-                if ((provider != null) && provider.load(file)) {\n+                if (provider != null && provider.load(file))\n                     return provider;\n-                }\n             } catch (MissingResourceException mre) {\n                 throw mre;\n             } catch (Exception e) {\n-                if (errs == null) {\n+                if (errs == null)\n                     errs = new StringBuffer();\n-                } else {\n+                else\n                     errs.append(\", \");\n-                }\n-\n                 errs.append(e.toString());\n             }\n         }\n-\n         String msg = (errs == null) ? file.toString() : errs.toString();\n-        throw new MissingResourceException(msg, Configurations.class.getName(),\n-            file.toString());\n+        throw new MissingResourceException(msg,\n+            Configurations.class.getName(), file.toString());\n     }\n \n     /**\n-     *  Looks up the given name in JNDI.  If the name is null, null is\n-     *  returned.\n+     * Looks up the given name in JNDI. If the name is null, null is returned.\n      */\n     public static Object lookup(String name) {\n-        if ((name == null) || (name.length() == 0)) {\n+        if (name == null || name.length() == 0)\n             return null;\n-        }\n \n         Context ctx = null;\n-\n         try {\n             ctx = new InitialContext();\n-\n             return ctx.lookup(name);\n         } catch (NamingException ne) {\n-            throw new NestableRuntimeException(_loc.get(\"naming-err\", name), ne);\n-        } finally {\n-            if (ctx != null) {\n-                try {\n-                    ctx.close();\n-                } catch (Exception e) {\n-                }\n-            }\n+            throw new NestableRuntimeException(_loc.get(\"naming-err\", name),\n+                ne);\n+        }\n+        finally {\n+            if (ctx != null)\n+                try { ctx.close(); } catch (Exception e) {}\n         }\n     }\n }"},{"sha":"a2cfa39a5ead6a92011c02a31cf171a18871c68c","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/DoubleValue.java","status":"modified","additions":13,"deletions":21,"changes":34,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/DoubleValue.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/DoubleValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/DoubleValue.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74","patch":"@@ -1,25 +1,21 @@\n /*\n  * Copyright 2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *  Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n package org.apache.openjpa.lib.conf;\n \n-\n /**\n- *  A double {@link Value}.\n- *\n- *  @author Marc Prud'hommeaux\n+ * A double {@link Value}.\n+ * \n+ * @author Marc Prud'hommeaux\n  */\n public class DoubleValue extends Value {\n     private double value;\n@@ -33,19 +29,17 @@ public Class getValueType() {\n     }\n \n     /**\n-     *  The internal value.\n+     * The internal value.\n      */\n     public void set(double value) {\n         double oldValue = this.value;\n         this.value = value;\n-\n-        if (oldValue != value) {\n+        if (oldValue != value)\n             valueChanged();\n-        }\n     }\n \n     /**\n-     *  The internal value.\n+     * The internal value.\n      */\n     public double get() {\n         return value;\n@@ -56,18 +50,16 @@ protected String getInternalString() {\n     }\n \n     protected void setInternalString(String val) {\n-        if ((val == null) || (val.length() == 0)) {\n+        if (val == null || val.length() == 0)\n             set(0D);\n-        } else {\n+        else\n             set(Double.parseDouble(val));\n-        }\n     }\n \n     protected void setInternalObject(Object obj) {\n-        if (obj == null) {\n+        if (obj == null)\n             set(0D);\n-        } else {\n+        else\n             set(((Number) obj).doubleValue());\n-        }\n     }\n }"},{"sha":"aa1039fca8841729bcd502124de0cb900a4df0e7","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/FileValue.java","status":"modified","additions":12,"deletions":18,"changes":30,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/FileValue.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/FileValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/FileValue.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74","patch":"@@ -1,29 +1,24 @@\n /*\n  * Copyright 2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *  Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n package org.apache.openjpa.lib.conf;\n \n-import org.apache.commons.lang.*;\n-\n import java.io.*;\n-\n+import org.apache.commons.lang.*;\n \n /**\n- *  A {@link File} {@link Value}.\n- *\n- *  @author Marc Prud'hommeaux\n+ * A {@link File} {@link Value}.\n+ * \n+ * @author Marc Prud'hommeaux\n  */\n public class FileValue extends Value {\n     private File value;\n@@ -37,26 +32,24 @@ public Class getValueType() {\n     }\n \n     /**\n-     *  The internal value.\n+     * The internal value.\n      */\n     public void set(File value) {\n         File oldValue = this.value;\n         this.value = value;\n-\n-        if (!ObjectUtils.equals(oldValue, value)) {\n+        if (!ObjectUtils.equals(oldValue, value))\n             valueChanged();\n-        }\n     }\n \n     /**\n-     *  The internal value.\n+     * The internal value.\n      */\n     public File get() {\n         return value;\n     }\n \n     protected String getInternalString() {\n-        return (value == null) ? null : value.getAbsolutePath();\n+        return(value == null) ? null : value.getAbsolutePath();\n     }\n \n     protected void setInternalString(String val) {\n@@ -67,3 +60,4 @@ protected void setInternalObject(Object obj) {\n         set((File) obj);\n     }\n }\n+"},{"sha":"5f2d6f59e64ff9ab9c3c56caeb840ffd88e70ffc","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/GenericConfigurable.java","status":"modified","additions":14,"deletions":19,"changes":33,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/GenericConfigurable.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/GenericConfigurable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/GenericConfigurable.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74","patch":"@@ -1,13 +1,10 @@\n /*\n  * Copyright 2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *  Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n@@ -17,23 +14,21 @@\n \n import java.util.*;\n \n-\n /**\n- *  <p>Implementations of this interface may perform additional\n- *  generic configuration with any key-value pairs that cannot be set\n- *  into the object via the normal {@link org.apache.openjpa.lib.util.Options#setInto}\n- *  means.</p>\n- *\n- *  @author Patrick Linskey\n+ * Implementations of this interface may perform additional\n+ * generic configuration with any key-value pairs that cannot be set\n+ * into the object via the normal {@link org.apache.openjpa.lib.util.Options#setInto}\n+ * means.\n+ * \n+ * @author Patrick Linskey\n  */\n public interface GenericConfigurable {\n     /**\n-     *  Perform any generic configuration based on the data in\n-     *  <code>m</code>. This method should remove any values in\n-     *  <code>m</code> that have been successfully processed; if any\n-     *  values remain in <code>m</code> after this method is executed,\n-     *  an exception will be thrown identifying those key-value pairs\n-     *  as invalid.\n+     * Perform any generic configuration based on the data in\n+     * <code>m</code>. This method should remove any values in\n+     * <code>m</code> that have been successfully processed; if any\n+     * values remain in <code>m</code> after this method is executed,\n+     * an exception will be thrown identifying those key-value pairs as invalid.\n      */\n     public void setInto(Map m);\n }"},{"sha":"c7492f4912197481b2a9a34e679b93439fa79cdc","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/IntValue.java","status":"modified","additions":13,"deletions":21,"changes":34,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/IntValue.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/IntValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/IntValue.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74","patch":"@@ -1,13 +1,10 @@\n /*\n  * Copyright 2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *  Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n@@ -17,11 +14,10 @@\n \n import serp.util.*;\n \n-\n /**\n- *  An int {@link Value}.\n- *\n- *  @author Marc Prud'hommeaux\n+ * An int {@link Value}.\n+ * \n+ * @author Marc Prud'hommeaux\n  */\n public class IntValue extends Value {\n     private int value;\n@@ -35,19 +31,17 @@ public Class getValueType() {\n     }\n \n     /**\n-     *  The internal value.\n+     * The internal value.\n      */\n     public void set(int value) {\n         int oldValue = this.value;\n         this.value = value;\n-\n-        if (value != oldValue) {\n+        if (value != oldValue)\n             valueChanged();\n-        }\n     }\n \n     /**\n-     *  The internal value.\n+     * The internal value.\n      */\n     public int get() {\n         return this.value;\n@@ -58,18 +52,16 @@ protected String getInternalString() {\n     }\n \n     protected void setInternalString(String val) {\n-        if ((val == null) || (val.length() == 0)) {\n+        if (val == null || val.length() == 0)\n             set(0);\n-        } else {\n+        else\n             set(Integer.parseInt(val));\n-        }\n     }\n \n     protected void setInternalObject(Object obj) {\n-        if (obj == null) {\n+        if (obj == null)\n             set(0);\n-        } else {\n+        else\n             set(((Number) obj).intValue());\n-        }\n     }\n }"},{"sha":"df65b7ef433e8d186d259e1ccd40dbcf4dc76a81","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/MapConfigurationProvider.java","status":"modified","additions":25,"deletions":39,"changes":64,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/MapConfigurationProvider.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/MapConfigurationProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/MapConfigurationProvider.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74","patch":"@@ -1,48 +1,44 @@\n /*\n  * Copyright 2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *  Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n package org.apache.openjpa.lib.conf;\n \n+import java.io.*;\n+import java.util.*;\n import org.apache.commons.collections.*;\n-\n import org.apache.openjpa.lib.log.*;\n import org.apache.openjpa.lib.util.*;\n \n-import java.io.*;\n-\n-import java.util.*;\n-\n-\n /**\n- *  <p>Simple configuration provider that sets configuration based on a\n- *  provided map.</p>\n- *\n- *  @author Abe White\n- *  @nojavadoc */\n+ * Simple configuration provider that sets configuration based on a\n+ * provided map.\n+ * \n+ * @author Abe White\n+ * @nojavadoc\n+ */\n public class MapConfigurationProvider implements ConfigurationProvider {\n-    private static final Localizer _loc = Localizer.forPackage(MapConfigurationProvider.class);\n+    private static final Localizer _loc = Localizer.forPackage\n+        (MapConfigurationProvider.class);\n+\n     private Map _props = null;\n \n     /**\n-     *  Construct with null properties.\n+     * Construct with null properties.\n      */\n     public MapConfigurationProvider() {\n     }\n \n     /**\n-     *  Constructor; supply properties map.\n+     * Constructor; supply properties map.\n      */\n     public MapConfigurationProvider(Map props) {\n         addProperties(props);\n@@ -52,8 +48,7 @@ public boolean loadDefaults(ClassLoader loader) throws Exception {\n         return false;\n     }\n \n-    public boolean load(String resource, ClassLoader loader)\n-        throws Exception {\n+    public boolean load(String resource, ClassLoader loader) throws Exception {\n         return false;\n     }\n \n@@ -62,26 +57,20 @@ public boolean load(File file) throws Exception {\n     }\n \n     public Map getProperties() {\n-        return (_props == null) ? Collections.EMPTY_MAP : _props;\n+        return(_props == null) ? Collections.EMPTY_MAP : _props;\n     }\n \n     public void addProperties(Map props) {\n-        if ((props == null) || props.isEmpty()) {\n+        if (props == null || props.isEmpty())\n             return;\n-        }\n-\n-        if (_props == null) {\n+        if (_props == null)\n             _props = new HashMap();\n-        }\n-\n         _props.putAll(props);\n     }\n \n     public Object addProperty(String key, Object value) {\n-        if (_props == null) {\n+        if (_props == null)\n             _props = new HashMap();\n-        }\n-\n         return _props.put(key, value);\n     }\n \n@@ -90,16 +79,13 @@ public void setInto(Configuration conf) {\n     }\n \n     /**\n-     *  Set properties into configuration.  If the log is non-null, will log\n-     *  a TRACE message about the set.\n+     * Set properties into configuration. If the log is non-null, will log\n+     * a TRACE message about the set.\n      */\n     protected void setInto(Configuration conf, Log log) {\n-        if ((log != null) && log.isTraceEnabled()) {\n+        if (log != null && log.isTraceEnabled())\n             log.trace(_loc.get(\"conf-load\", getProperties()));\n-        }\n-\n-        if (_props != null) {\n+        if (_props != null)\n             conf.fromProperties(_props);\n-        }\n     }\n }"},{"sha":"53d42a256d41798e6ebe699eafb1fe878d7d7445","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ObjectValue.java","status":"modified","additions":26,"deletions":31,"changes":57,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ObjectValue.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ObjectValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ObjectValue.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74","patch":"@@ -1,13 +1,10 @@\n /*\n  * Copyright 2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *  Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n@@ -16,73 +13,72 @@\n package org.apache.openjpa.lib.conf;\n \n import org.apache.commons.lang.*;\n-\n import org.apache.openjpa.lib.util.*;\n \n-\n /**\n- *  <p>An object {@link Value}.</p>\n- *\n- *  @author Abe White\n+ * An object {@link Value}.\n+ * \n+ * @author Abe White\n  */\n public class ObjectValue extends Value {\n-    private static final Localizer _loc = Localizer.forPackage(ObjectValue.class);\n+    private static final Localizer _loc = Localizer.forPackage\n+        (ObjectValue.class);\n+\n     private Object _value = null;\n \n     public ObjectValue(String prop) {\n         super(prop);\n     }\n \n     /**\n-     *  The internal value.\n+     * The internal value.\n      */\n     public Object get() {\n         return _value;\n     }\n \n     /**\n-     *  The internal value.\n+     * The internal value.\n      */\n     public void set(Object obj) {\n         set(obj, false);\n     }\n \n     /**\n-     *  The internal value.\n-     *\n-     *  @param derived        if true, this value was derived from other properties\n+     * The internal value.\n+     * \n+     * @param derived if true, this value was derived from other properties\n      */\n     public void set(Object obj, boolean derived) {\n         Object oldValue = _value;\n         _value = obj;\n-\n         if (!derived && !ObjectUtils.equals(obj, oldValue)) {\n             objectChanged();\n             valueChanged();\n         }\n     }\n \n     /**\n-     *  Instantiate the object as an instance of the given class. Equivalent\n-     *  to <code>instantiate (type, conf, true)</code>.\n+     * Instantiate the object as an instance of the given class. Equivalent\n+     * to <code>instantiate(type, conf, true)</code>.\n      */\n     public Object instantiate(Class type, Configuration conf) {\n         return instantiate(type, conf, true);\n     }\n \n     /**\n-     *  Instantiate the object as an instance of the given class.\n+     * Instantiate the object as an instance of the given class.\n      */\n     public Object instantiate(Class type, Configuration conf, boolean fatal) {\n         throw new UnsupportedOperationException();\n     }\n \n     /**\n-     *  Allow subclasses to instantiate additional plugins.  This method does\n-     *  not perform configuration.\n+     * Allow subclasses to instantiate additional plugins. This method does\n+     * not perform configuration.\n      */\n-    public Object newInstance(String clsName, Class type, Configuration conf,\n-        boolean fatal) {\n+    public Object newInstance(String clsName, Class type,\n+        Configuration conf, boolean fatal) {\n         return Configurations.newInstance(clsName, this, conf,\n             type.getClassLoader(), fatal);\n     }\n@@ -92,8 +88,8 @@ public Class getValueType() {\n     }\n \n     /**\n-     *  Implement this method to synchronize internal data with the new\n-     *  object value.\n+     * Implement this method to synchronize internal data with the new\n+     * object value.\n      */\n     protected void objectChanged() {\n     }\n@@ -103,12 +99,11 @@ protected String getInternalString() {\n     }\n \n     protected void setInternalString(String str) {\n-        if (str == null) {\n+        if (str == null)\n             set(null);\n-        } else {\n+        else\n             throw new IllegalArgumentException(_loc.get(\"cant-set-string\",\n-                    getProperty()));\n-        }\n+                getProperty()));\n     }\n \n     protected void setInternalObject(Object obj) {"},{"sha":"e5e795227c4d0505021eb00d6f6bd14c4cfa8749","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/PluginListValue.java","status":"modified","additions":37,"deletions":75,"changes":112,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/PluginListValue.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/PluginListValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/PluginListValue.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74","patch":"@@ -1,37 +1,34 @@\n /*\n  * Copyright 2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *  Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n package org.apache.openjpa.lib.conf;\n \n-import org.apache.openjpa.lib.util.*;\n-\n import java.lang.reflect.*;\n-\n import java.util.*;\n-\n+import org.apache.openjpa.lib.util.*;\n \n /**\n- *  <p>A list of plugins.  Defaults and aliases on plugin lists apply only\n- *  to individual class names.</p>\n- *\n- *  @see PluginValue\n- *  @author Abe White\n+ * A list of plugins. Defaults and aliases on plugin lists apply only\n+ * to individual class names.\n+ * \n+ * @see PluginValue\n+ * @author Abe White\n  */\n public class PluginListValue extends ObjectValue {\n     private static final String[] EMPTY = new String[0];\n-    private static final Localizer _loc = Localizer.forPackage(PluginListValue.class);\n+\n+    private static final Localizer _loc = Localizer.forPackage\n+        (PluginListValue.class);\n+\n     private String[] _names = EMPTY;\n     private String[] _props = EMPTY;\n \n@@ -40,109 +37,91 @@ public PluginListValue(String prop) {\n     }\n \n     /**\n-     *  The plugin class names.\n+     * The plugin class names.\n      */\n     public String[] getClassNames() {\n         return _names;\n     }\n \n     /**\n-     *  The plugin class names.\n+     * The plugin class names.\n      */\n     public void setClassNames(String[] names) {\n-        if (names == null) {\n+        if (names == null)\n             names = EMPTY;\n-        }\n-\n         _names = names;\n         set(null, true);\n         valueChanged();\n     }\n \n     /**\n-     *  The plugin properties.\n+     * The plugin properties.\n      */\n     public String[] getProperties() {\n         return _props;\n     }\n \n     /**\n-     *  The plugin properties.\n+     * The plugin properties.\n      */\n     public void setProperties(String[] props) {\n-        if (props == null) {\n+        if (props == null)\n             props = EMPTY;\n-        }\n-\n         _props = props;\n         set(null, true);\n         valueChanged();\n     }\n \n     /**\n-     *  Instantiate the plugins as instances of the given class.\n+     * Instantiate the plugins as instances of the given class.\n      */\n     public Object instantiate(Class elemType, Configuration conf, boolean fatal) {\n         Object[] ret;\n-\n-        if (_names.length == 0) {\n+        if (_names.length == 0)\n             ret = (Object[]) Array.newInstance(elemType, 0);\n-        } else {\n+        else {\n             ret = (Object[]) Array.newInstance(elemType, _names.length);\n-\n             for (int i = 0; i < ret.length; i++) {\n                 ret[i] = newInstance(_names[i], elemType, conf, fatal);\n                 Configurations.configureInstance(ret[i], conf, _props[i],\n                     getProperty());\n             }\n         }\n-\n         set(ret, true);\n-\n         return ret;\n     }\n \n     /**\n-     *  Override to recognize aliases of the class name without the attached\n-     *  properties string.\n+     * Override to recognize aliases of the class name without the attached\n+     * properties string.\n      */\n     public String getString() {\n-        if (_names.length == 0) {\n+        if (_names.length == 0)\n             return null;\n-        }\n \n         StringBuffer buf = new StringBuffer();\n-\n         for (int i = 0; i < _names.length; i++) {\n-            if (i > 0) {\n+            if (i > 0)\n                 buf.append(\", \");\n-            }\n-\n             buf.append(Configurations.getPlugin(alias(_names[i]), _props[i]));\n         }\n-\n-        if (buf.length() == 0) {\n+        if (buf.length() == 0)\n             return null;\n-        }\n-\n         return buf.toString();\n     }\n \n     /**\n-     *  Override to recognize aliases of the plugin name without the attached\n-     *  properties string.\n+     * Override to recognize aliases of the plugin name without the attached\n+     * properties string.\n      */\n     public void setString(String str) {\n-        if ((str == null) || (str.length() == 0)) {\n+        if (str == null || str.length() == 0)\n             str = getDefault();\n-        }\n-\n-        if ((str == null) || (str.length() == 0)) {\n+        if (str == null || str.length() == 0) {\n             _names = EMPTY;\n             _props = EMPTY;\n             set(null, true);\n             valueChanged();\n-\n             return;\n         }\n \n@@ -152,58 +131,44 @@ public void setString(String str) {\n         StringBuffer plugin = new StringBuffer();\n         boolean inParen = false;\n         char c;\n-\n         for (int i = 0; i < str.length(); i++) {\n             c = str.charAt(i);\n-\n             switch (c) {\n             case '(':\n                 inParen = true;\n                 plugin.append(c);\n-\n                 break;\n-\n             case ')':\n                 inParen = false;\n                 plugin.append(c);\n-\n                 break;\n-\n             case ',':\n-\n-                if (inParen) {\n+                if (inParen)\n                     plugin.append(c);\n-                } else {\n+                else {\n                     plugins.add(plugin.toString());\n                     plugin = new StringBuffer();\n                 }\n-\n                 break;\n-\n             default:\n                 plugin.append(c);\n             }\n         }\n-\n-        if (plugin.length() > 0) {\n+        if (plugin.length() > 0)\n             plugins.add(plugin.toString());\n-        }\n \n         // parse each plugin element into its name and properties\n         List names = new ArrayList();\n         List props = new ArrayList();\n         String clsName;\n-\n         for (int i = 0; i < plugins.size(); i++) {\n             str = (String) plugins.get(i);\n             clsName = unalias(Configurations.getClassName(str));\n-\n             if (clsName != null) {\n                 names.add(clsName);\n                 props.add(Configurations.getProperties(str));\n             }\n         }\n-\n         _names = (String[]) names.toArray(new String[names.size()]);\n         _props = (String[]) props.toArray(new String[props.size()]);\n         set(null, true);\n@@ -216,17 +181,14 @@ public Class getValueType() {\n \n     protected void objectChanged() {\n         Object[] vals = (Object[]) get();\n-\n-        if ((vals == null) || (vals.length == 0)) {\n+        if (vals == null || vals.length == 0)\n             _names = EMPTY;\n-        } else {\n+        else {\n             _names = new String[vals.length];\n-\n             for (int i = 0; i < vals.length; i++)\n                 _names[i] = (vals[i] == null) ? null\n-                                              : vals[i].getClass().getName();\n+                    : vals[i].getClass().getName();\n         }\n-\n         _props = EMPTY;\n     }\n "},{"sha":"07a7304d3aa2d2449d75c12c86e3693ca93fcc52","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/PluginValue.java","status":"modified","additions":28,"deletions":46,"changes":74,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/PluginValue.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/PluginValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/PluginValue.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74","patch":"@@ -1,13 +1,10 @@\n /*\n  * Copyright 2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *  Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n@@ -16,25 +13,24 @@\n package org.apache.openjpa.lib.conf;\n \n import org.apache.commons.lang.*;\n-\n import org.apache.openjpa.lib.util.*;\n \n-\n /**\n- *  <p>A plugin {@link Value} consisting of plugin name and properties.\n- *  Plugins should be specified in the form:<br />\n- *  <code>&lt;plugin-name&gt;(&lt;prop1&gt;=&lt;val1&gt;, ...)</code><br />\n- *  Both the plugin name and prop list are optional, so that the following\n- *  forms are also valid:<br />\n- *  <code>&lt;plugin-name&gt;</code><br />\n- *  <code>&lt;prop1&gt;=&lt;val1&gt; ...</code></p>\n- *\n- *  <p>Defaults and aliases on plugin values apply only to the plugin name.</p>\n- *\n- *  @author Abe White\n+ * A plugin {@link Value} consisting of plugin name and properties.\n+ * Plugins should be specified in the form:<br />\n+ * <code>&lt;plugin-name&gt;(&lt;prop1&gt;=&lt;val1&gt;, ...)</code><br />\n+ * Both the plugin name and prop list are optional, so that the following\n+ * forms are also valid:<br />\n+ * <code>&lt;plugin-name&gt;</code><br />\n+ * <code>&lt;prop1&gt;=&lt;val1&gt; ...</code>\n+ *  Defaults and aliases on plugin values apply only to the plugin name.\n+ * \n+ * @author Abe White\n  */\n public class PluginValue extends ObjectValue {\n-    private static final Localizer _loc = Localizer.forPackage(PluginValue.class);\n+    private static final Localizer _loc = Localizer.forPackage\n+        (PluginValue.class);\n+\n     private final boolean _singleton;\n     private String _name = null;\n     private String _props = null;\n@@ -45,79 +41,68 @@ public PluginValue(String prop, boolean singleton) {\n     }\n \n     /**\n-     *  Whether this value is a singleton.\n+     * Whether this value is a singleton.\n      */\n     public boolean isSingleton() {\n         return _singleton;\n     }\n \n     /**\n-     *  The plugin class name.\n+     * The plugin class name.\n      */\n     public String getClassName() {\n         return _name;\n     }\n \n     /**\n-     *  The plugin class name.\n+     * The plugin class name.\n      */\n     public void setClassName(String name) {\n         String oldName = _name;\n         _name = name;\n-\n         if (!StringUtils.equals(oldName, name)) {\n-            if (_singleton) {\n+            if (_singleton)\n                 set(null, true);\n-            }\n-\n             valueChanged();\n         }\n     }\n \n     /**\n-     *  The plugin properties.\n+     * The plugin properties.\n      */\n     public String getProperties() {\n         return _props;\n     }\n \n     /**\n-     *  The plugin properties.\n+     * The plugin properties.\n      */\n     public void setProperties(String props) {\n         String oldProps = _props;\n         _props = props;\n-\n         if (!StringUtils.equals(oldProps, props)) {\n-            if (_singleton) {\n+            if (_singleton)\n                 set(null, true);\n-            }\n-\n             valueChanged();\n         }\n     }\n \n     /**\n-     *  Instantiate the plugin as an instance of the given class.\n+     * Instantiate the plugin as an instance of the given class.\n      */\n     public Object instantiate(Class type, Configuration conf, boolean fatal) {\n         Object obj = newInstance(_name, type, conf, fatal);\n         Configurations.configureInstance(obj, conf, _props,\n             (fatal) ? getProperty() : null);\n-\n-        if (_singleton) {\n+        if (_singleton)\n             set(obj, true);\n-        }\n-\n         return obj;\n     }\n \n     public void set(Object obj, boolean derived) {\n-        if (!_singleton) {\n+        if (!_singleton)\n             throw new IllegalStateException(_loc.get(\"not-singleton\",\n-                    getProperty()));\n-        }\n-\n+                getProperty()));\n         super.set(obj, derived);\n     }\n \n@@ -129,11 +114,8 @@ public void setString(String str) {\n         _name = Configurations.getClassName(str);\n         _name = unalias(_name);\n         _props = Configurations.getProperties(str);\n-\n-        if (_singleton) {\n+        if (_singleton)\n             set(null, true);\n-        }\n-\n         valueChanged();\n     }\n "},{"sha":"a5f44b2eb0d8de339a208302d6b4070d170eda80","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/StringListValue.java","status":"modified","additions":11,"deletions":16,"changes":27,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/StringListValue.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/StringListValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/StringListValue.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74","patch":"@@ -1,13 +1,10 @@\n /*\n  * Copyright 2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *  Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n@@ -17,30 +14,30 @@\n \n import serp.util.*;\n \n-\n /**\n- *  <p>A comma-separated list of string values.</p>\n- *\n- *  @author Abe White\n+ * A comma-separated list of string values.\n+ * \n+ * @author Abe White\n  */\n public class StringListValue extends Value {\n     public static final String[] EMPTY = new String[0];\n+\n     private String[] _values = EMPTY;\n \n     public StringListValue(String prop) {\n         super(prop);\n     }\n \n     /**\n-     *  The internal value.\n+     * The internal value.\n      */\n     public void set(String[] values) {\n         _values = (values == null) ? EMPTY : values;\n         valueChanged();\n     }\n \n     /**\n-     *  The internal value.\n+     * The internal value.\n      */\n     public String[] get() {\n         return _values;\n@@ -56,16 +53,14 @@ protected String getInternalString() {\n \n     protected void setInternalString(String val) {\n         String[] vals = Strings.split(val, \",\", 0);\n-\n-        if (vals != null) {\n+        if (vals != null)\n             for (int i = 0; i < vals.length; i++)\n                 vals[i] = vals[i].trim();\n-        }\n-\n         set(vals);\n     }\n \n     protected void setInternalObject(Object obj) {\n         set((String[]) obj);\n     }\n }\n+"},{"sha":"fcf2776b9c79735684c41b07c4a99dbd346e1cda","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/StringValue.java","status":"modified","additions":10,"deletions":15,"changes":25,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/StringValue.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/StringValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/StringValue.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74","patch":"@@ -1,13 +1,10 @@\n /*\n  * Copyright 2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *  Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n@@ -17,11 +14,10 @@\n \n import org.apache.commons.lang.*;\n \n-\n /**\n- *  A string {@link Value}.\n- *\n- *  @author Marc Prud'hommeaux\n+ * A string {@link Value}.\n+ * \n+ * @author Marc Prud'hommeaux\n  */\n public class StringValue extends Value {\n     private String value;\n@@ -35,22 +31,20 @@ public Class getValueType() {\n     }\n \n     /**\n-     *  The internal value.\n+     * The internal value.\n      */\n     public String get() {\n         return value;\n     }\n \n     /**\n-     *  The internal value.\n+     * The internal value.\n      */\n     public void set(String value) {\n         String oldValue = this.value;\n         this.value = value;\n-\n-        if (!StringUtils.equals(value, oldValue)) {\n+        if (!StringUtils.equals(value, oldValue))\n             valueChanged();\n-        }\n     }\n \n     protected String getInternalString() {\n@@ -65,3 +59,4 @@ protected void setInternalObject(Object obj) {\n         set((String) obj);\n     }\n }\n+"},{"sha":"f2d61462f7df58d182974f298dae1eea5cd4ec66","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Value.java","status":"modified","additions":82,"deletions":111,"changes":193,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Value.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Value.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Value.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74","patch":"@@ -1,35 +1,30 @@\n /*\n  * Copyright 2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *  Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n package org.apache.openjpa.lib.conf;\n \n+import java.util.*;\n import org.apache.commons.lang.*;\n-\n import org.apache.openjpa.lib.util.*;\n \n-import java.util.*;\n-\n-\n /**\n- *  A configuration value.\n- *\n- *  @author Marc Prud'hommeaux\n+ * A configuration value.\n+ * \n+ * @author Marc Prud'hommeaux\n  */\n public abstract class Value implements Cloneable {\n     private static final String[] EMPTY_ALIASES = new String[0];\n     private static final Localizer s_loc = Localizer.forPackage(Value.class);\n+\n     private String prop = null;\n     private String def = null;\n     private String[] aliases = null;\n@@ -39,73 +34,70 @@\n     private Class scope = null;\n \n     /**\n-     *  Constructor.  Supply the property name.\n-     *\n-     *  @see #setProperty\n+     * Constructor. Supply the property name.\n+     * \n+     * @see #setProperty\n      */\n     public Value(String prop) {\n         setProperty(prop);\n     }\n \n     /**\n-     *  Default constructor.\n+     * Default constructor.\n      */\n     public Value() {\n     }\n \n     /**\n-     *  The property name that will be used when setting or\n-     *  getting this value in a {@link Map}.\n+     * The property name that will be used when setting or\n+     * getting this value in a {@link Map}.\n      */\n     public String getProperty() {\n         return prop;\n     }\n \n     /**\n-     *  The property name that will be used when setting or\n-     *  getting this value in a {@link Map}.\n+     * The property name that will be used when setting or\n+     * getting this value in a {@link Map}.\n      */\n     public void setProperty(String prop) {\n         this.prop = prop;\n     }\n \n     /**\n-     *  Aliases for the value in the form key1, value1, key2, value2, ...\n-     *  All alias values must be in string form.\n+     * Aliases for the value in the form key1, value1, key2, value2, ...\n+     * All alias values must be in string form.\n      */\n     public String[] getAliases() {\n-        return (aliases == null) ? EMPTY_ALIASES : aliases;\n+        return(aliases == null) ? EMPTY_ALIASES : aliases;\n     }\n \n     /**\n-     *  Aliases for the value in the form key1, value1, key2, value2, ...\n-     *  All alias values must be in string form.\n+     * Aliases for the value in the form key1, value1, key2, value2, ...\n+     * All alias values must be in string form.\n      */\n     public void setAliases(String[] aliases) {\n         this.aliases = aliases;\n     }\n \n     /**\n-     *  Replaces an existing alias, or adds the given alias to the front of the\n-     *  alias list if it does not already exist.  All alias values must be in\n-     *  string form.\n+     * Replaces an existing alias, or adds the given alias to the front of the\n+     * alias list if it does not already exist. All alias values must be in\n+     * string form.\n      */\n     public void setAlias(String key, String value) {\n         aliases = setAlias(key, value, aliases);\n     }\n \n     /**\n-     *  Set an alias into a current alias list, returning the new list.\n+     * Set an alias into a current alias list, returning the new list.\n      */\n     protected String[] setAlias(String key, String value, String[] aliases) {\n-        if (aliases == null) {\n+        if (aliases == null)\n             aliases = EMPTY_ALIASES;\n-        }\n-\n         for (int i = 0; i < aliases.length; i += 2) {\n             if (key.equals(aliases[i])) {\n                 aliases[i + 1] = value;\n-\n                 return aliases;\n             }\n         }\n@@ -115,121 +107,107 @@ public void setAlias(String key, String value) {\n         System.arraycopy(aliases, 0, newAliases, 2, aliases.length);\n         newAliases[0] = key;\n         newAliases[1] = value;\n-\n         return newAliases;\n     }\n \n     /**\n-     *  Whether or not the alias list defines all possible settings for this\n-     *  value. If so, an error will be generated when attempting to invoke\n-     *  any method on this value with an unknown option.\n+     * Whether or not the alias list defines all possible settings for this\n+     * value. If so, an error will be generated when attempting to invoke\n+     * any method on this value with an unknown option.\n      */\n     public boolean isAliasListComprehensive() {\n         return aliasListComprehensive;\n     }\n \n     /**\n-     *  Whether or not the alias list defines all possible settings for this\n-     *  value. If so, an error will be generated when attempting to invoke\n-     *  any method on this value with an unknown option.\n+     * Whether or not the alias list defines all possible settings for this\n+     * value. If so, an error will be generated when attempting to invoke\n+     * any method on this value with an unknown option.\n      */\n     public void setAliasListComprehensive(boolean aliasListIsComprehensive) {\n         this.aliasListComprehensive = aliasListIsComprehensive;\n     }\n \n     /**\n-     *  Alias the given setting.\n+     * Alias the given setting.\n      */\n     public String alias(String str) {\n         return alias(str, aliases, false);\n     }\n \n     /**\n-     *  Alias the given setting.\n+     * Alias the given setting.\n      */\n     protected String alias(String str, String[] aliases, boolean nullNotFound) {\n-        if (str != null) {\n+        if (str != null)\n             str = str.trim();\n-        }\n-\n-        if ((aliases == null) || (aliases.length == 0)) {\n-            return (nullNotFound) ? null : str;\n-        }\n-\n-        boolean empty = (str != null) && (str.length() == 0);\n+        if (aliases == null || aliases.length == 0)\n+            return(nullNotFound) ? null : str;\n \n+        boolean empty = str != null && str.length() == 0;\n         for (int i = 1; i < aliases.length; i += 2)\n-            if (StringUtils.equals(str, aliases[i]) ||\n-                    (empty && (aliases[i] == null))) {\n+            if (StringUtils.equals(str, aliases[i])\n+                || (empty && aliases[i] == null))\n                 return aliases[i - 1];\n-            }\n-\n-        return (nullNotFound) ? null : str;\n+        return(nullNotFound) ? null : str;\n     }\n \n     /**\n-     *  Unalias the given setting.\n+     * Unalias the given setting.\n      */\n     public String unalias(String str) {\n         return unalias(str, aliases, false);\n     }\n \n     /**\n-     *  Unalias the given setting.\n+     * Unalias the given setting.\n      */\n     protected String unalias(String str, String[] aliases, boolean nullNotFound) {\n-        if (str != null) {\n+        if (str != null)\n             str = str.trim();\n-        }\n \n-        boolean empty = (str != null) && (str.length() == 0);\n-\n-        if ((str == null) || (empty && (def != null))) {\n+        boolean empty = str != null && str.length() == 0;\n+        if (str == null || (empty && def != null))\n             str = def;\n-        }\n-\n-        if (aliases != null) {\n+        if (aliases != null)\n             for (int i = 0; i < aliases.length; i += 2)\n-                if (StringUtils.equals(str, aliases[i]) ||\n-                        StringUtils.equals(str, aliases[i + 1]) ||\n-                        (empty && (aliases[i] == null))) {\n+                if (StringUtils.equals(str, aliases[i])\n+                    || StringUtils.equals(str, aliases[i+1])\n+                    || (empty && aliases[i] == null))\n                     return aliases[i + 1];\n-                }\n-        }\n \n-        if (isAliasListComprehensive() && (aliases != null)) {\n+        if (isAliasListComprehensive() && aliases != null)\n             throw new ParseException(s_loc.get(\"invalid-enumerated-config\",\n-                    getProperty(), str, Arrays.asList(aliases)));\n-        }\n+                getProperty(), str, Arrays.asList(aliases)));\n \n-        return (nullNotFound) ? null : str;\n+        return(nullNotFound) ? null : str;\n     }\n \n     /**\n-     *  The default value for the property as a string.\n+     * The default value for the property as a string.\n      */\n     public String getDefault() {\n         return def;\n     }\n \n     /**\n-     *  The default value for the propert as a string.\n+     * The default value for the propert as a string.\n      */\n     public void setDefault(String def) {\n         this.def = def;\n     }\n \n     /**\n-     *  The name of the getter method for the instantiated value of this\n-     *  property (as opposed to the string value)\n+     * The name of the getter method for the instantiated value of this\n+     * property(as opposed to the string value)\n      */\n     public String getInstantiatingGetter() {\n         return getter;\n     }\n \n     /**\n-     *  The name of the getter method for the instantiated value of this\n-     *  property (as opposed to the string value)\n+     * The name of the getter method for the instantiated value of this\n+     * property(as opposed to the string value)\n      */\n     public void setInstantiatingGetter(String getter) {\n         this.getter = getter;\n@@ -254,22 +232,21 @@ public void setScope(Class cls) {\n     }\n \n     /**\n-     *  Return a stringified version of this value.  If the current value has\n-     *  a short alias key, the alias key is returned.\n+     * Return a stringified version of this value. If the current value has\n+     * a short alias key, the alias key is returned.\n      */\n     public String getString() {\n         return alias(getInternalString());\n     }\n \n     /**\n-     *  Set this value from the given string.  If the given string is null or\n-     *  empty and a default is defined, the default is used.  If the given\n-     *  string (or default) is an alias key, it will be converted to the\n-     *  corresponding value internally.\n+     * Set this value from the given string. If the given string is null or\n+     * empty and a default is defined, the default is used. If the given\n+     * string(or default) is an alias key, it will be converted to the\n+     * corresponding value internally.\n      */\n     public void setString(String val) {\n         String str = unalias(val);\n-\n         try {\n             setInternalString(str);\n         } catch (ParseException pe) {\n@@ -280,13 +257,13 @@ public void setString(String val) {\n     }\n \n     /**\n-     *  Set this value as an object.\n+     * Set this value as an object.\n      */\n     public void setObject(Object obj) {\n         // if setting to null set as string to get defaults into play\n-        if ((obj == null) && (def != null)) {\n+        if (obj == null && def != null)\n             setString(null);\n-        } else {\n+        else {\n             try {\n                 setInternalObject(obj);\n             } catch (ParseException pe) {\n@@ -298,69 +275,63 @@ public void setObject(Object obj) {\n     }\n \n     /**\n-     *  Returns the type of the property that this Value represents.\n+     * Returns the type of the property that this Value represents.\n      */\n     public abstract Class getValueType();\n \n     /**\n-      *  Return the internal string form of this value.\n+     * Return the internal string form of this value.\n      */\n     protected abstract String getInternalString();\n \n     /**\n-     *  Set this value from the given string.\n+     * Set this value from the given string.\n      */\n     protected abstract void setInternalString(String str);\n \n     /**\n-     *  Set this value from an object.\n+     * Set this value from an object.\n      */\n     protected abstract void setInternalObject(Object obj);\n \n     /**\n-     *  Listener for value changes.\n+     * Listener for value changes.\n      */\n     public ValueListener getListener() {\n         return this.listen;\n     }\n \n     /**\n-     *  Listener for value changes.\n+     * Listener for value changes.\n      */\n     public void setListener(ValueListener listen) {\n         this.listen = listen;\n     }\n \n     /**\n-     *  Subclasses should call this method when their inernal value changes.\n+     * Subclasses should call this method when their inernal value changes.\n      */\n     public void valueChanged() {\n-        if (listen != null) {\n+        if (listen != null)\n             listen.valueChanged(this);\n-        }\n     }\n \n     public int hashCode() {\n         String str = getString();\n-        int strHash = (str == null) ? 0 : str.hashCode();\n+        int strHash =  (str == null) ? 0 : str.hashCode();\n         int propHash = (prop == null) ? 0 : prop.hashCode();\n-\n         return strHash ^ propHash;\n     }\n \n     public boolean equals(Object other) {\n-        if (other == this) {\n+        if (other == this)\n             return true;\n-        }\n-\n-        if (!(other instanceof Value)) {\n+        if (!(other instanceof Value))\n             return false;\n-        }\n-\n-        Value o = (Value) other;\n \n-        return StringUtils.equals(prop, o.getProperty()) &&\n-        StringUtils.equals(getString(), o.getString());\n+        Value o = (Value)other;\n+        return StringUtils.equals(prop, o.getProperty())\n+            && StringUtils.equals(getString(), o.getString());\n     }\n \n     public Object clone() {"},{"sha":"0d235621eb5784fcac6f78a0cb12e38b1b12fbfb","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ValueListener.java","status":"modified","additions":7,"deletions":12,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ValueListener.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ValueListener.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ValueListener.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74","patch":"@@ -1,30 +1,25 @@\n /*\n  * Copyright 2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *  Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n package org.apache.openjpa.lib.conf;\n \n-\n /**\n- *  <p>Components can listen on {@link Value} objects for changes directly.</p>\n- *\n- *  @author Abe White\n+ * Components can listen on {@link Value} objects for changes directly.\n+ * \n+ * @author Abe White\n  */\n public interface ValueListener {\n     /**\n-     *  Callback used by {@link Value} objects to notify listener of\n-     *  change.\n+     * Callback used by {@link Value} objects to notify listener of change.\n      */\n     public void valueChanged(Value val);\n }"},{"sha":"2bff5dc605769d8e9033529fda58a8678a183f6e","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/AbstractJDBCListener.java","status":"modified","additions":10,"deletions":14,"changes":24,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/AbstractJDBCListener.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/AbstractJDBCListener.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/AbstractJDBCListener.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74","patch":"@@ -1,32 +1,27 @@\n /*\n  * Copyright 2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *  Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n package org.apache.openjpa.lib.jdbc;\n \n-\n /**\n- *  An abstract implementation of the {@link JDBCListener}\n- *  listener. It allows simple implementation of fine-grained\n- *  event handling.\n- *\n- *  @author Marc Prud'hommeaux\n+ * An abstract implementation of the {@link JDBCListener}\n+ * listener. It allows simple implementation of fine-grained event handling.\n+ * \n+ * @author Marc Prud'hommeaux\n  */\n public class AbstractJDBCListener implements JDBCListener {\n     /**\n-     *  Catch-all for unhandled events.  This method is called by all other\n-     *  event methods if you do not override them.  Does nothing by default.\n+     * Catch-all for unhandled events. This method is called by all other\n+     * event methods if you do not override them. Does nothing by default.\n      */\n     protected void eventOccurred(JDBCEvent event) {\n     }\n@@ -87,3 +82,4 @@ public void beforeClose(JDBCEvent event) {\n         eventOccurred(event);\n     }\n }\n+"},{"sha":"69ae82db13d70fad4a78a52b56a2d47e19fa899e","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/ConfiguringConnectionDecorator.java","status":"modified","additions":41,"deletions":71,"changes":112,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/ConfiguringConnectionDecorator.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/ConfiguringConnectionDecorator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/ConfiguringConnectionDecorator.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74","patch":"@@ -1,13 +1,10 @@\n /*\n  * Copyright 2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *  Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n@@ -16,100 +13,92 @@\n package org.apache.openjpa.lib.jdbc;\n \n import java.sql.*;\n-\n import javax.sql.*;\n \n-\n /**\n- *  <p>Connection decorator that can configure some properties of the\n- *  underlying connection.  Understands the following properties:\n- *  <ul>\n- *  <li>QueryTimeout</li>\n- *  <li>TransactionIsolation ({@link Connection} constants)</li>\n- *  <li>AutoCommit</li>\n- *  </ul></p>\n- *\n- *  @author Abe White\n- *  @nojavadoc */\n+ * Connection decorator that can configure some properties of the\n+ * underlying connection. Understands the following properties:\n+ * <ul>\n+ * <li>QueryTimeout</li>\n+ * <li>TransactionIsolation({@link Connection} constants)</li>\n+ * <li>AutoCommit</li>\n+ * </ul>\n+ * \n+ * @author Abe White\n+ * @nojavadoc\n+ */\n public class ConfiguringConnectionDecorator implements ConnectionDecorator {\n     private int _isolation = -1;\n     private int _queryTimeout = -1;\n     private Boolean _autoCommit = null;\n \n     /**\n-     *  The number of seconds to wait for a query to execute before\n-     *  terminating it.\n+     * The number of seconds to wait for a query to execute before\n+     * terminating it.\n      */\n     public int getQueryTimeout() {\n         return _queryTimeout;\n     }\n \n     /**\n-     *  The number of seconds to wait for a query to execute before\n-     *  terminating it.\n+     * The number of seconds to wait for a query to execute before\n+     * terminating it.\n      */\n     public void setQueryTimeout(int timeout) {\n         _queryTimeout = timeout;\n     }\n \n     /**\n-     *  The transaction isolation level.\n+     * The transaction isolation level.\n      */\n     public int getTransactionIsolation() {\n         return _isolation;\n     }\n \n     /**\n-     *  The transaction isolation level.\n+     * The transaction isolation level.\n      */\n     public void setTransactionIsolation(int isolation) {\n         _isolation = isolation;\n     }\n \n     /**\n-     *  Whether auto commit should be on.  Use null to keep\n-     *  the connection's default setting.  Defaults to null.\n+     * Whether auto commit should be on. Use null to keep\n+     * the connection's default setting. Defaults to null.\n      */\n     public Boolean getAutoCommit() {\n         return _autoCommit;\n     }\n \n     /**\n-     *  Whether auto commit should be on.  Use null to keep\n-     *  the connection's default setting.  Defaults to null.\n+     * Whether auto commit should be on. Use null to keep\n+     * the connection's default setting. Defaults to null.\n      */\n     public void setAutoCommit(Boolean autoCommit) {\n         _autoCommit = autoCommit;\n     }\n \n     public Connection decorate(Connection conn) throws SQLException {\n-        if ((_isolation == Connection.TRANSACTION_NONE) ||\n-                (_queryTimeout != -1) || (_autoCommit != null)) {\n+        if (_isolation == Connection.TRANSACTION_NONE || _queryTimeout != -1\n+            || _autoCommit != null)\n             conn = new ConfiguringConnection(conn);\n-        }\n-\n-        if ((_isolation != -1) && (_isolation != Connection.TRANSACTION_NONE)) {\n+        if (_isolation != -1 && _isolation != Connection.TRANSACTION_NONE)\n             conn.setTransactionIsolation(_isolation);\n-        }\n-\n         return conn;\n     }\n \n     /**\n-     *  Decorator to configure connection components correctly.\n+     * Decorator to configure connection components correctly.\n      */\n     private class ConfiguringConnection extends DelegatingConnection {\n         private boolean _curAutoCommit = false;\n \n         public ConfiguringConnection(Connection conn) throws SQLException {\n             super(conn);\n-\n             if (_autoCommit != null) {\n                 _curAutoCommit = ConfiguringConnection.this.getAutoCommit();\n-\n-                if (_curAutoCommit != _autoCommit.booleanValue()) {\n+                if (_curAutoCommit != _autoCommit.booleanValue())\n                     setAutoCommit(_autoCommit.booleanValue());\n-                }\n             }\n         }\n \n@@ -121,69 +110,50 @@ public void setAutoCommit(boolean auto) throws SQLException {\n         }\n \n         public void commit() throws SQLException {\n-            if (_isolation != TRANSACTION_NONE) {\n+            if (_isolation != TRANSACTION_NONE)\n                 super.commit();\n-            }\n-\n-            if ((_autoCommit != null) &&\n-                    (_autoCommit.booleanValue() != _curAutoCommit)) {\n+            if (_autoCommit != null\n+                && _autoCommit.booleanValue() != _curAutoCommit)\n                 setAutoCommit(_autoCommit.booleanValue());\n-            }\n         }\n \n         public void rollback() throws SQLException {\n-            if (_isolation != TRANSACTION_NONE) {\n+            if (_isolation != TRANSACTION_NONE)\n                 super.rollback();\n-            }\n-\n-            if ((_autoCommit != null) &&\n-                    (_autoCommit.booleanValue() != _curAutoCommit)) {\n+            if (_autoCommit != null\n+                && _autoCommit.booleanValue() != _curAutoCommit)\n                 setAutoCommit(_autoCommit.booleanValue());\n-            }\n         }\n \n         protected PreparedStatement prepareStatement(String sql, boolean wrap)\n             throws SQLException {\n             PreparedStatement stmnt = super.prepareStatement(sql, wrap);\n-\n-            if (_queryTimeout != -1) {\n+            if (_queryTimeout != -1)\n                 stmnt.setQueryTimeout(_queryTimeout);\n-            }\n-\n             return stmnt;\n         }\n \n         protected PreparedStatement prepareStatement(String sql, int rsType,\n             int rsConcur, boolean wrap) throws SQLException {\n             PreparedStatement stmnt = super.prepareStatement(sql, rsType,\n-                    rsConcur, wrap);\n-\n-            if (_queryTimeout != -1) {\n+                rsConcur, wrap);\n+            if (_queryTimeout != -1)\n                 stmnt.setQueryTimeout(_queryTimeout);\n-            }\n-\n             return stmnt;\n         }\n \n-        protected Statement createStatement(boolean wrap)\n-            throws SQLException {\n+        protected Statement createStatement(boolean wrap) throws SQLException {\n             Statement stmnt = super.createStatement(wrap);\n-\n-            if (_queryTimeout != -1) {\n+            if (_queryTimeout != -1)\n                 stmnt.setQueryTimeout(_queryTimeout);\n-            }\n-\n             return stmnt;\n         }\n \n         protected Statement createStatement(int rsType, int rsConcur,\n             boolean wrap) throws SQLException {\n             Statement stmnt = super.createStatement(rsType, rsConcur, wrap);\n-\n-            if (_queryTimeout != -1) {\n+            if (_queryTimeout != -1)\n                 stmnt.setQueryTimeout(_queryTimeout);\n-            }\n-\n             return stmnt;\n         }\n     }"},{"sha":"c88b6bc56826af42fda8f791276e3f31c2264393","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/ConnectionDecorator.java","status":"modified","additions":8,"deletions":12,"changes":20,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/ConnectionDecorator.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/ConnectionDecorator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/ConnectionDecorator.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74","patch":"@@ -1,13 +1,10 @@\n /*\n  * Copyright 2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *  Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n@@ -17,16 +14,15 @@\n \n import java.sql.*;\n \n-\n /**\n- *  <p>A connection decorator can wrap {@link Connection}s before they are\n- *  returned to the user to add functionality.</p>\n- *\n- *  @author Abe White\n+ * A connection decorator can wrap {@link Connection}s before they are\n+ * returned to the user to add functionality.\n+ * \n+ * @author Abe White\n  */\n public interface ConnectionDecorator {\n     /**\n-     *  Decorate the given connection if desired.\n+     * Decorate the given connection if desired.\n      */\n     public Connection decorate(Connection conn) throws SQLException;\n }"},{"sha":"2a96155068f1caf67b4ee13d5d69aaa060bd64f4","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DataSourceLogs.java","status":"modified","additions":34,"deletions":44,"changes":78,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DataSourceLogs.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DataSourceLogs.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DataSourceLogs.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74","patch":"@@ -1,34 +1,28 @@\n /*\n  * Copyright 2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *  Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n package org.apache.openjpa.lib.jdbc;\n \n-import org.apache.openjpa.lib.log.*;\n-\n import java.sql.*;\n-\n import java.util.*;\n-\n import javax.sql.*;\n-\n+import org.apache.openjpa.lib.log.*;\n \n /**\n- *  Provies basic logging facilities to a DataSource.\n- *\n- *  @author Marc Prud'hommeaux\n- *  @nojavadoc */\n+ * Provies basic logging facilities to a DataSource.\n+ * \n+ * @author Marc Prud'hommeaux\n+ * @nojavadoc\n+ */\n public class DataSourceLogs {\n     private Log _jdbcLog = null;\n     private Log _sqlLog = null;\n@@ -42,112 +36,108 @@ public DataSourceLogs(Log jdbcLog, Log sqlLog) {\n     }\n \n     /**\n-     *  The log to write JDBC messages to.\n+     * The log to write JDBC messages to.\n      */\n     public Log getJDBCLog() {\n-        return (_jdbcLog == null) ? NoneLogFactory.NoneLog.getInstance()\n-                                  : _jdbcLog;\n+        return(_jdbcLog == null) ? NoneLogFactory.NoneLog.getInstance()\n+            : _jdbcLog;\n     }\n \n     /**\n-     *  The log to write JDBC messages to.\n+     * The log to write JDBC messages to.\n      */\n     public void setJDBCLog(Log log) {\n         _jdbcLog = log;\n     }\n \n     /**\n-     *  Return true if JDBC logging is enabled.\n+     * Return true if JDBC logging is enabled.\n      */\n     public boolean isJDBCEnabled() {\n-        return ((_jdbcLog != null) && _jdbcLog.isTraceEnabled());\n+        return(_jdbcLog != null && _jdbcLog.isTraceEnabled());\n     }\n \n     /**\n-     *  The log to write SQL messages to.\n+     * The log to write SQL messages to.\n      */\n     public Log getSQLLog() {\n-        return (_sqlLog == null) ? NoneLogFactory.NoneLog.getInstance() : _sqlLog;\n+        return(_sqlLog == null) ? NoneLogFactory.NoneLog.getInstance()\n+            : _sqlLog;\n     }\n \n     /**\n-     *  The log to write SQL messages to.\n+     * The log to write SQL messages to.\n      */\n     public void setSQLLog(Log log) {\n         _sqlLog = log;\n     }\n \n     /**\n-     *  Return true if SQL logging is enabled.\n+     * Return true if SQL logging is enabled.\n      */\n     public boolean isSQLEnabled() {\n-        return ((_sqlLog != null) && _sqlLog.isTraceEnabled());\n+        return(_sqlLog != null && _sqlLog.isTraceEnabled());\n     }\n \n     /**\n-     *  Log a JDBC message on behalf of the given connection.\n+     * Log a JDBC message on behalf of the given connection.\n      */\n     public void logJDBC(String msg, Connection conn) {\n         log(msg, conn, _jdbcLog);\n     }\n \n     /**\n-     *  Log a JDBC message on behalf of the given connection.\n+     * Log a JDBC message on behalf of the given connection.\n      */\n     public void logJDBC(String msg, long startTime, Connection conn) {\n         log(msg, conn, _jdbcLog, startTime);\n     }\n \n     /**\n-     *  Log a SQL message on behalf of the given connection.\n+     * Log a SQL message on behalf of the given connection.\n      */\n     public void logSQL(String msg, Connection conn) {\n         log(msg, conn, _sqlLog);\n     }\n \n     /**\n-     *  Log a SQL message on behalf of the given connection.\n+     * Log a SQL message on behalf of the given connection.\n      */\n     public void logSQL(String msg, long startTime, Connection conn) {\n         log(msg, conn, _sqlLog, startTime);\n     }\n \n     /**\n-     *  Log a message to the given logger.\n+     * Log a message to the given logger.\n      */\n     private static void log(String msg, Connection conn, Log log) {\n         log(msg, conn, log, -1);\n     }\n \n     /**\n-     *  Log a message to the given logger.\n+     * Log a message to the given logger.\n      */\n-    private static void log(String msg, Connection conn, Log log, long startTime) {\n-        if ((log == null) || !log.isTraceEnabled()) {\n+    private static void log(String msg, Connection conn,\n+        Log log, long startTime) {\n+        if (log == null || !log.isTraceEnabled())\n             return;\n-        }\n \n         long totalTime = -1;\n-\n-        if (startTime != -1) {\n+        if (startTime != -1)\n             totalTime = System.currentTimeMillis() - startTime;\n-        }\n \n         StringBuffer buf = new StringBuffer(25 + msg.length());\n         buf.append(\"<t \").append(Thread.currentThread().hashCode());\n-\n-        if (conn != null) {\n+        if (conn != null)\n             buf.append(\", \").append(conn);\n-        }\n-\n         buf.append(\"> \");\n \n         // in the time != -1, append time profiling information\n-        if (totalTime != -1) {\n+        if (totalTime != -1)\n             buf.append(\"[\").append(totalTime).append(\" ms] \");\n-        }\n \n         buf.append(msg);\n         log.trace(buf.toString());\n     }\n }\n+"},{"sha":"19d7c6d9f20c153b7212494cd138cd0c167f75ae","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DecoratingDataSource.java","status":"modified","additions":19,"deletions":32,"changes":51,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DecoratingDataSource.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DecoratingDataSource.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DecoratingDataSource.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74","patch":"@@ -1,105 +1,92 @@\n /*\n  * Copyright 2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *  Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n package org.apache.openjpa.lib.jdbc;\n \n-import org.apache.openjpa.lib.util.concurrent.*;\n-\n import java.sql.*;\n-\n import java.util.*;\n-\n import javax.sql.*;\n-\n+import org.apache.openjpa.lib.util.concurrent.*;\n \n /**\n- *  <p>Delegating data source that maintains a list of\n- *  {@link ConnectionDecorator}s.</p>\n- *\n- *  @author Abe White\n- *  @nojavadoc */\n+ * Delegating data source that maintains a list of {@link ConnectionDecorator}s.\n+ * \n+ * @author Abe White\n+ * @nojavadoc\n+ */\n public class DecoratingDataSource extends DelegatingDataSource {\n     private List _decorators = new CopyOnWriteArrayList();\n     private boolean _conf = false;\n \n     /**\n-     *  Constructor.  Supply wrapped data source.\n+     * Constructor. Supply wrapped data source.\n      */\n     public DecoratingDataSource(DataSource ds) {\n         super(ds);\n     }\n \n     /**\n-     *  Return a read-only list of connection decorators in the order they were\n-     *  added.\n+     * Return a read-only list of connection decorators in the order they were\n+     * added.\n      */\n     public Collection getDecorators() {\n         return Collections.unmodifiableCollection(_decorators);\n     }\n \n     /**\n-     *  Add a connection decorator.\n+     * Add a connection decorator.\n      */\n     public void addDecorator(ConnectionDecorator decorator) {\n-        if (decorator != null) {\n+        if (decorator != null)\n             _decorators.add(decorator);\n-        }\n     }\n \n     /**\n-     *  Add multiple connection decorators efficiently.\n+     * Add multiple connection decorators efficiently.\n      */\n     public void addDecorators(Collection decorators) {\n-        if (decorators != null) {\n+        if (decorators != null)\n             _decorators.addAll(decorators);\n-        }\n     }\n \n     /**\n-     *  Remove a connection decorator.\n+     * Remove a connection decorator.\n      */\n     public boolean removeDecorator(ConnectionDecorator decorator) {\n         return _decorators.remove(decorator);\n     }\n \n     /**\n-     *  Clear all decorators.\n+     * Clear all decorators.\n      */\n     public void clearDecorators() {\n         _decorators.clear();\n     }\n \n     public Connection getConnection() throws SQLException {\n         Connection conn = super.getConnection();\n-\n         return decorate(conn);\n     }\n \n     public Connection getConnection(String user, String pass)\n         throws SQLException {\n         Connection conn = super.getConnection(user, pass);\n-\n         return decorate(conn);\n     }\n \n     private Connection decorate(Connection conn) throws SQLException {\n-        if (!_decorators.isEmpty()) {\n+        if (!_decorators.isEmpty())\n             for (Iterator itr = _decorators.iterator(); itr.hasNext();)\n                 conn = ((ConnectionDecorator) itr.next()).decorate(conn);\n-        }\n-\n         return conn;\n     }\n }"},{"sha":"1fe56d2f47fcd39faad3c0c83a1102069a4296ae","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingCallableStatement.java","status":"modified","additions":45,"deletions":73,"changes":118,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingCallableStatement.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingCallableStatement.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingCallableStatement.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74","patch":"@@ -1,130 +1,109 @@\n /*\n  * Copyright 2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *  Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n package org.apache.openjpa.lib.jdbc;\n \n-import org.apache.openjpa.lib.util.*;\n-import org.apache.openjpa.lib.util.Closeable;\n-\n import java.io.*;\n-\n import java.math.*;\n-\n import java.net.*;\n-\n import java.sql.*;\n import java.sql.Date;\n-\n import java.util.*;\n-\n+import org.apache.openjpa.lib.util.*;\n+import org.apache.openjpa.lib.util.Closeable;\n \n /**\n- *  <p>{@link CallableStatement} that delegates to an internal statement.</p>\n- *\n- *  @author Abe White\n+ * {@link CallableStatement} that delegates to an internal statement.\n+ * \n+ * @author Abe White\n  */\n-public class DelegatingCallableStatement implements CallableStatement,\n-    Closeable {\n+public class DelegatingCallableStatement implements CallableStatement, Closeable {\n     private final CallableStatement _stmnt;\n     private final DelegatingCallableStatement _del;\n     private final Connection _conn;\n \n     public DelegatingCallableStatement(CallableStatement stmnt, Connection conn) {\n         _conn = conn;\n         _stmnt = stmnt;\n-\n-        if (_stmnt instanceof DelegatingCallableStatement) {\n+        if (_stmnt instanceof DelegatingCallableStatement)\n             _del = (DelegatingCallableStatement) _stmnt;\n-        } else {\n+        else\n             _del = null;\n-        }\n     }\n \n     private ResultSet wrapResult(boolean wrap, ResultSet rs) {\n-        if (!wrap) {\n+        if (!wrap)\n             return rs;\n-        }\n \n         // never wrap null\n-        if (rs == null) {\n+        if (rs == null)\n             return null;\n-        }\n \n         return new DelegatingResultSet(rs, this);\n     }\n \n     /**\n-     *  Return the wrapped statement.\n+     * Return the wrapped statement.\n      */\n     public CallableStatement getDelegate() {\n         return _stmnt;\n     }\n \n     /**\n-     *  Return the base underlying data store statement.\n+     * Return the base underlying data store statement.\n      */\n     public CallableStatement getInnermostDelegate() {\n-        return (_del == null) ? _stmnt : _del.getInnermostDelegate();\n+        return(_del == null) ? _stmnt : _del.getInnermostDelegate();\n     }\n \n     public int hashCode() {\n         return getInnermostDelegate().hashCode();\n     }\n \n     public boolean equals(Object other) {\n-        if (other == this) {\n+        if (other == this)\n             return true;\n-        }\n-\n-        if (other instanceof DelegatingCallableStatement) {\n-            other = ((DelegatingCallableStatement) other).getInnermostDelegate();\n-        }\n-\n+        if (other instanceof DelegatingCallableStatement)\n+            other = ((DelegatingCallableStatement) other).\n+                getInnermostDelegate();\n         return getInnermostDelegate().equals(other);\n     }\n \n     public String toString() {\n         StringBuffer buf = new StringBuffer(\"prepstmnt \").append(hashCode());\n         appendInfo(buf);\n-\n         return buf.toString();\n     }\n \n     protected void appendInfo(StringBuffer buf) {\n-        if (_del != null) {\n+        if (_del != null)\n             _del.appendInfo(buf);\n-        }\n     }\n \n     public ResultSet executeQuery(String str) throws SQLException {\n         return executeQuery(true);\n     }\n \n     /**\n-      *  Execute the query, with the option of not wrapping it in a\n-     *  {@link DelegatingResultSet}, which is the default.\n+     * Execute the query, with the option of not wrapping it in a\n+     * {@link DelegatingResultSet}, which is the default.\n      */\n     protected ResultSet executeQuery(String sql, boolean wrap)\n         throws SQLException {\n         ResultSet rs;\n-\n-        if (_del != null) {\n+        if (_del != null)\n             rs = _del.executeQuery(sql, false);\n-        } else {\n+        else\n             rs = _stmnt.executeQuery(sql);\n-        }\n \n         return wrapResult(wrap, rs);\n     }\n@@ -190,17 +169,15 @@ public ResultSet getResultSet() throws SQLException {\n     }\n \n     /**\n-      *  Get the last result set, with the option of not wrapping it in a\n-     *  {@link DelegatingResultSet}, which is the default.\n+     * Get the last result set, with the option of not wrapping it in a\n+     * {@link DelegatingResultSet}, which is the default.\n      */\n     protected ResultSet getResultSet(boolean wrap) throws SQLException {\n         ResultSet rs;\n-\n-        if (_del != null) {\n+        if (_del != null)\n             rs = _del.getResultSet(false);\n-        } else {\n+        else\n             rs = _stmnt.getResultSet();\n-        }\n \n         return wrapResult(wrap, rs);\n     }\n@@ -258,22 +235,20 @@ public ResultSet executeQuery() throws SQLException {\n     }\n \n     /**\n-      *  Execute the query, with the option of not wrapping it in a\n-     *  {@link DelegatingResultSet}, which is the default.\n+     * Execute the query, with the option of not wrapping it in a\n+     * {@link DelegatingResultSet}, which is the default.\n      */\n     protected ResultSet executeQuery(boolean wrap) throws SQLException {\n         ResultSet rs;\n-\n-        if (_del != null) {\n+        if (_del != null)\n             rs = _del.executeQuery(false);\n-        } else {\n+        else\n             rs = _stmnt.executeQuery();\n-        }\n \n         return wrapResult(wrap, rs);\n     }\n \n-    public int executeUpdate() throws SQLException {\n+    public int executeUpdate  () throws SQLException {\n         return _stmnt.executeUpdate();\n     }\n \n@@ -352,8 +327,7 @@ public void clearParameters() throws SQLException {\n         _stmnt.clearParameters();\n     }\n \n-    public void setObject(int i1, Object o, int i2, int i3)\n-        throws SQLException {\n+    public void setObject(int i1, Object o, int i2, int i3) throws SQLException {\n         _stmnt.setObject(i1, o, i2, i3);\n     }\n \n@@ -373,8 +347,7 @@ public void addBatch() throws SQLException {\n         _stmnt.addBatch();\n     }\n \n-    public void setCharacterStream(int i1, Reader r, int i2)\n-        throws SQLException {\n+    public void setCharacterStream(int i1, Reader r, int i2) throws SQLException {\n         _stmnt.setCharacterStream(i1, r, i2);\n     }\n \n@@ -406,17 +379,17 @@ public void setTime(int i, Time t, Calendar c) throws SQLException {\n         _stmnt.setTime(i, t, c);\n     }\n \n-    public void setTimestamp(int i, Timestamp t, Calendar c)\n-        throws SQLException {\n+    public void setTimestamp(int i, Timestamp t, Calendar c) throws SQLException {\n         _stmnt.setTimestamp(i, t, c);\n     }\n \n     public void setNull(int i1, int i2, String s) throws SQLException {\n         _stmnt.setNull(i1, i2, s);\n     }\n \n-    // JDBC 3.0 (unsupported) methods follow; these are required to be able \n+    // JDBC 3.0 (unsupported) methods follow; these are required to be able\n     // to compile against JDK 1.4\n+\n     public boolean getMoreResults(int i) throws SQLException {\n         throw new UnsupportedOperationException();\n     }\n@@ -464,12 +437,12 @@ public ParameterMetaData getParameterMetaData() throws SQLException {\n     /////////////////////////////\n     // CallableStatement methods\n     /////////////////////////////\n+\n     public void registerOutParameter(int i1, int i2) throws SQLException {\n         _stmnt.registerOutParameter(i1, i2);\n     }\n \n-    public void registerOutParameter(int i1, int i2, int i3)\n-        throws SQLException {\n+    public void registerOutParameter(int i1, int i2, int i3) throws SQLException {\n         _stmnt.registerOutParameter(i1, i2, i3);\n     }\n \n@@ -574,8 +547,9 @@ public void registerOutParameter(int i1, int i2, String s)\n         _stmnt.registerOutParameter(i1, i2, s);\n     }\n \n-    // JDBC 3.0 (unsupported) methods follow; these are required to be able \n+    // JDBC 3.0 (unsupported) methods follow; these are required to be able\n     // to compile against JDK 1.4\n+\n     public void registerOutParameter(String s, int i) throws SQLException {\n         throw new UnsupportedOperationException();\n     }\n@@ -668,8 +642,7 @@ public void setBinaryStream(String a, InputStream b, int c)\n         throw new UnsupportedOperationException();\n     }\n \n-    public void setObject(String a, Object b, int c, int d)\n-        throws SQLException {\n+    public void setObject(String a, Object b, int c, int d) throws SQLException {\n         throw new UnsupportedOperationException();\n     }\n \n@@ -787,8 +760,7 @@ public Time getTime(String a, Calendar b) throws SQLException {\n         throw new UnsupportedOperationException();\n     }\n \n-    public Timestamp getTimestamp(String a, Calendar b)\n-        throws SQLException {\n+    public Timestamp getTimestamp(String a, Calendar b) throws SQLException {\n         throw new UnsupportedOperationException();\n     }\n }"},{"sha":"adf914752be053907828078499b3cda174cd770b","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingConnection.java","status":"modified","additions":160,"deletions":305,"changes":465,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingConnection.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingConnection.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingConnection.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74","patch":"@@ -1,183 +1,153 @@\n /*\n  * Copyright 2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *  Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n package org.apache.openjpa.lib.jdbc;\n \n-import org.apache.commons.lang.exception.*;\n-\n-import org.apache.openjpa.lib.util.*;\n-import org.apache.openjpa.lib.util.Closeable;\n-\n-import serp.util.*;\n-\n import java.io.*;\n-\n import java.lang.reflect.*;\n-\n import java.sql.*;\n-\n import java.util.*;\n-\n+import org.apache.commons.lang.exception.*;\n+import org.apache.openjpa.lib.util.*;\n+import org.apache.openjpa.lib.util.Closeable;\n+import serp.util.*;\n \n /**\n- *  <p>Wrapper around an existing connection.  Subclasses can override the\n- *  methods whose behavior they mean to change.  The <code>equals</code> and\n- *  <code>hashCode</code> methods pass through to the base underlying data\n- *  store connection.</p>\n- *\n- *  @author Abe White\n+ * Wrapper around an existing connection. Subclasses can override the\n+ * methods whose behavior they mean to change. The <code>equals</code> and\n+ * <code>hashCode</code> methods pass through to the base underlying data\n+ * store connection.\n+ * \n+ * @author Abe White\n  */\n public class DelegatingConnection implements Connection, Closeable {\n     // jdbc 3 method keys\n-    private static final Object SET_HOLDABILITY = new Object();\n-    private static final Object GET_HOLDABILITY = new Object();\n-    private static final Object SET_SAVEPOINT_NONAME = new Object();\n-    private static final Object SET_SAVEPOINT = new Object();\n-    private static final Object ROLLBACK_SAVEPOINT = new Object();\n-    private static final Object RELEASE_SAVEPOINT = new Object();\n-    private static final Object CREATE_STATEMENT = new Object();\n-    private static final Object PREPARE_STATEMENT = new Object();\n-    private static final Object PREPARE_CALL = new Object();\n-    private static final Object PREPARE_WITH_KEYS = new Object();\n-    private static final Object PREPARE_WITH_INDEX = new Object();\n-    private static final Object PREPARE_WITH_NAMES = new Object();\n-    private static final Localizer _loc = Localizer.forPackage(DelegatingConnection.class);\n-    private static final Map _jdbc3;\n+    private static final Object SET_HOLDABILITY         = new Object();\n+    private static final Object GET_HOLDABILITY         = new Object();\n+    private static final Object SET_SAVEPOINT_NONAME    = new Object();\n+    private static final Object SET_SAVEPOINT           = new Object();\n+    private static final Object ROLLBACK_SAVEPOINT      = new Object();\n+    private static final Object RELEASE_SAVEPOINT       = new Object();\n+    private static final Object CREATE_STATEMENT        = new Object();\n+    private static final Object PREPARE_STATEMENT       = new Object();\n+    private static final Object PREPARE_CALL            = new Object();\n+    private static final Object PREPARE_WITH_KEYS       = new Object();\n+    private static final Object PREPARE_WITH_INDEX      = new Object();\n+    private static final Object PREPARE_WITH_NAMES      = new Object();\n+\n+    private static final Localizer _loc = Localizer.forPackage\n+        (DelegatingConnection.class);\n \n+    private static final Map _jdbc3;\n     static {\n         boolean jdbc3 = false;\n         Method m = null;\n-\n         try {\n             m = Connection.class.getMethod(\"setSavepoint\",\n-                    new Class[] { String.class });\n+                new Class[] { String.class });\n             jdbc3 = true;\n-        } catch (Throwable t) {\n-        }\n+        } catch (Throwable t) {}\n \n         if (jdbc3) {\n             _jdbc3 = new HashMap();\n             _jdbc3.put(SET_SAVEPOINT, m);\n-        } else {\n+        } else\n             _jdbc3 = null;\n-        }\n     }\n \n     private final Connection _conn;\n     private final DelegatingConnection _del;\n \n     public DelegatingConnection(Connection conn) {\n         _conn = conn;\n-\n-        if (conn instanceof DelegatingConnection) {\n+        if (conn instanceof DelegatingConnection)\n             _del = (DelegatingConnection) _conn;\n-        } else {\n+        else\n             _del = null;\n-        }\n     }\n \n     /**\n-     *  Return the wrapped connection.\n+     * Return the wrapped connection.\n      */\n     public Connection getDelegate() {\n         return _conn;\n     }\n \n     /**\n-     *  Return the base underlying data store connection.\n+     * Return the base underlying data store connection.\n      */\n     public Connection getInnermostDelegate() {\n-        return (_del == null) ? _conn : _del.getInnermostDelegate();\n+        return(_del == null) ? _conn : _del.getInnermostDelegate();\n     }\n \n     public int hashCode() {\n         return getInnermostDelegate().hashCode();\n     }\n \n     public boolean equals(Object other) {\n-        if (other == this) {\n+        if (other == this)\n             return true;\n-        }\n-\n-        if (other instanceof DelegatingConnection) {\n+        if (other instanceof DelegatingConnection)\n             other = ((DelegatingConnection) other).getInnermostDelegate();\n-        }\n-\n         return getInnermostDelegate().equals(other);\n     }\n \n     public String toString() {\n         StringBuffer buf = new StringBuffer(\"conn \").append(hashCode());\n         appendInfo(buf);\n-\n         return buf.toString();\n     }\n \n     protected void appendInfo(StringBuffer buf) {\n-        if (_del != null) {\n+        if (_del != null)\n             _del.appendInfo(buf);\n-        }\n     }\n \n     public Statement createStatement() throws SQLException {\n         return createStatement(true);\n     }\n \n     /**\n-      *  Create a statement, with the option of not wrapping it in a\n-     *  {@link DelegatingStatement}, which is the default.\n+     * Create a statement, with the option of not wrapping it in a\n+     * {@link DelegatingStatement}, which is the default.\n      */\n     protected Statement createStatement(boolean wrap) throws SQLException {\n         Statement stmnt;\n-\n-        if (_del != null) {\n+        if (_del != null)\n             stmnt = _del.createStatement(false);\n-        } else {\n+        else\n             stmnt = _conn.createStatement();\n-        }\n-\n-        if (wrap) {\n+        if (wrap)\n             stmnt = new DelegatingStatement(stmnt, this);\n-        }\n-\n         return stmnt;\n     }\n \n-    public PreparedStatement prepareStatement(String str)\n-        throws SQLException {\n+    public PreparedStatement prepareStatement(String str) throws SQLException {\n         return prepareStatement(str, true);\n     }\n \n     /**\n-      *  Prepare a statement, with the option of not wrapping it in a\n-     *  {@link DelegatingPreparedStatement}, which is the default.\n+     * Prepare a statement, with the option of not wrapping it in a\n+     * {@link DelegatingPreparedStatement}, which is the default.\n      */\n     protected PreparedStatement prepareStatement(String str, boolean wrap)\n         throws SQLException {\n         PreparedStatement stmnt;\n-\n-        if (_del != null) {\n+        if (_del != null)\n             stmnt = _del.prepareStatement(str, false);\n-        } else {\n+        else\n             stmnt = _conn.prepareStatement(str);\n-        }\n-\n-        if (wrap) {\n+        if (wrap)\n             stmnt = new DelegatingPreparedStatement(stmnt, this);\n-        }\n-\n         return stmnt;\n     }\n \n@@ -186,23 +156,18 @@ public CallableStatement prepareCall(String str) throws SQLException {\n     }\n \n     /**\n-      *  Prepare a call, with the option of not wrapping it in a\n-     *  {@link DelegatingCallableStatement}, which is the default.\n+     * Prepare a call, with the option of not wrapping it in a\n+     * {@link DelegatingCallableStatement}, which is the default.\n      */\n     protected CallableStatement prepareCall(String str, boolean wrap)\n         throws SQLException {\n         CallableStatement stmnt;\n-\n-        if (_del != null) {\n+        if (_del != null)\n             stmnt = _del.prepareCall(str, false);\n-        } else {\n+        else\n             stmnt = _conn.prepareCall(str);\n-        }\n-\n-        if (wrap) {\n+        if (wrap)\n             stmnt = new DelegatingCallableStatement(stmnt, this);\n-        }\n-\n         return stmnt;\n     }\n \n@@ -239,23 +204,17 @@ public DatabaseMetaData getMetaData() throws SQLException {\n     }\n \n     /**\n-      *  Return the metadata, with the option of not wrapping it in a\n-     *  {@link DelegatingDatabaseMetaData}, which is the default.\n+     * Return the metadata, with the option of not wrapping it in a\n+     * {@link DelegatingDatabaseMetaData}, which is the default.\n      */\n-    protected DatabaseMetaData getMetaData(boolean wrap)\n-        throws SQLException {\n+    protected DatabaseMetaData getMetaData(boolean wrap) throws SQLException {\n         DatabaseMetaData meta;\n-\n-        if (_del != null) {\n+        if (_del != null)\n             meta = _del.getMetaData(false);\n-        } else {\n+        else\n             meta = _conn.getMetaData();\n-        }\n-\n-        if (wrap) {\n+        if (wrap)\n             meta = new DelegatingDatabaseMetaData(meta, this);\n-        }\n-\n         return meta;\n     }\n \n@@ -291,29 +250,23 @@ public void clearWarnings() throws SQLException {\n         _conn.clearWarnings();\n     }\n \n-    public Statement createStatement(int type, int concur)\n-        throws SQLException {\n+    public Statement createStatement(int type, int concur) throws SQLException {\n         return createStatement(type, concur, true);\n     }\n \n     /**\n-      *  Create a statement, with the option of not wrapping it in a\n-     *  {@link DelegatingStatement}, which is the default.\n+     * Create a statement, with the option of not wrapping it in a\n+     * {@link DelegatingStatement}, which is the default.\n      */\n     protected Statement createStatement(int type, int concur, boolean wrap)\n         throws SQLException {\n         Statement stmnt;\n-\n-        if (_del != null) {\n+        if (_del != null)\n             stmnt = _del.createStatement(type, concur, false);\n-        } else {\n+        else\n             stmnt = _conn.createStatement(type, concur);\n-        }\n-\n-        if (wrap) {\n+        if (wrap)\n             stmnt = new DelegatingStatement(stmnt, this);\n-        }\n-\n         return stmnt;\n     }\n \n@@ -323,23 +276,18 @@ public PreparedStatement prepareStatement(String str, int type, int concur)\n     }\n \n     /**\n-      *  Prepare a statement, with the option of not wrapping it in a\n-     *  {@link DelegatingPreparedStatement}, which is the default.\n+     * Prepare a statement, with the option of not wrapping it in a\n+     * {@link DelegatingPreparedStatement}, which is the default.\n      */\n     protected PreparedStatement prepareStatement(String str, int type,\n         int concur, boolean wrap) throws SQLException {\n         PreparedStatement stmnt;\n-\n-        if (_del != null) {\n+        if (_del != null)\n             stmnt = _del.prepareStatement(str, type, concur, false);\n-        } else {\n+        else\n             stmnt = _conn.prepareStatement(str, type, concur);\n-        }\n-\n-        if (wrap) {\n+        if (wrap)\n             stmnt = new DelegatingPreparedStatement(stmnt, this);\n-        }\n-\n         return stmnt;\n     }\n \n@@ -349,23 +297,18 @@ public CallableStatement prepareCall(String str, int type, int concur)\n     }\n \n     /**\n-      *  Prepare a call, with the option of not wrapping it in a\n-     *  {@link DelegatingCallableStatement}, which is the default.\n+     * Prepare a call, with the option of not wrapping it in a\n+     * {@link DelegatingCallableStatement}, which is the default.\n      */\n     protected CallableStatement prepareCall(String str, int type, int concur,\n         boolean wrap) throws SQLException {\n         CallableStatement stmnt;\n-\n-        if (_del != null) {\n+        if (_del != null)\n             stmnt = _del.prepareCall(str, type, concur, false);\n-        } else {\n+        else\n             stmnt = _conn.prepareCall(str, type, concur);\n-        }\n-\n-        if (wrap) {\n+        if (wrap)\n             stmnt = new DelegatingCallableStatement(stmnt, this);\n-        }\n-\n         return stmnt;\n     }\n \n@@ -377,90 +320,65 @@ public void setTypeMap(Map map) throws SQLException {\n         _conn.setTypeMap(map);\n     }\n \n-    // JDBC 3.0 methods follow; these are required to be able to \n+    // JDBC 3.0 methods follow; these are required to be able to\n     // compile against JDK 1.4; these methods will not work on\n     // previous JVMs\n+\n     public void setHoldability(int holdability) throws SQLException {\n         assertJDBC3();\n-\n         Method m = (Method) _jdbc3.get(SET_HOLDABILITY);\n-\n-        if (m == null) {\n+        if (m == null)\n             m = createJDBC3Method(SET_HOLDABILITY, \"setHoldability\",\n-                    new Class[] { int.class });\n-        }\n-\n-        invokeJDBC3(m, new Object[] { Numbers.valueOf(holdability) });\n+                new Class[] {int.class});\n+        invokeJDBC3(m, new Object[] {Numbers.valueOf(holdability)});\n     }\n \n     public int getHoldability() throws SQLException {\n         assertJDBC3();\n-\n         Method m = (Method) _jdbc3.get(GET_HOLDABILITY);\n-\n-        if (m == null) {\n+        if (m == null)\n             m = createJDBC3Method(GET_HOLDABILITY, \"getHoldability\", null);\n-        }\n-\n-        return ((Number) invokeJDBC3(m, null)).intValue();\n+        return((Number) invokeJDBC3(m, null)).intValue();\n     }\n \n     public Savepoint setSavepoint() throws SQLException {\n         assertJDBC3();\n-\n         Method m = (Method) _jdbc3.get(SET_SAVEPOINT_NONAME);\n-\n-        if (m == null) {\n+        if (m == null)\n             m = createJDBC3Method(SET_SAVEPOINT_NONAME, \"setSavepoint\", null);\n-        }\n-\n-        return (Savepoint) invokeJDBC3(m, null);\n+        return(Savepoint) invokeJDBC3(m, null);\n     }\n \n     public Savepoint setSavepoint(String savepoint) throws SQLException {\n         assertJDBC3();\n-\n         Method m = (Method) _jdbc3.get(SET_SAVEPOINT);\n-\n-        if (m == null) {\n+        if (m == null)\n             m = createJDBC3Method(SET_SAVEPOINT, \"setSavepoint\",\n-                    new Class[] { String.class });\n-        }\n-\n-        return (Savepoint) invokeJDBC3(m, new Object[] { savepoint });\n+                new Class[] {String.class});\n+        return(Savepoint) invokeJDBC3(m, new Object[] {savepoint});\n     }\n \n     public void rollback(Savepoint savepoint) throws SQLException {\n         assertJDBC3();\n-\n         Method m = (Method) _jdbc3.get(ROLLBACK_SAVEPOINT);\n-\n-        if (m == null) {\n+        if (m == null)\n             m = createJDBC3Method(ROLLBACK_SAVEPOINT, \"rollback\",\n-                    new Class[] { Savepoint.class });\n-        }\n-\n-        invokeJDBC3(m, new Object[] { savepoint });\n+                new Class[] {Savepoint.class});\n+        invokeJDBC3(m, new Object[] {savepoint});\n     }\n \n     public void releaseSavepoint(Savepoint savepoint) throws SQLException {\n         assertJDBC3();\n-\n         Method m = (Method) _jdbc3.get(RELEASE_SAVEPOINT);\n-\n-        if (m == null) {\n+        if (m == null)\n             m = createJDBC3Method(RELEASE_SAVEPOINT, \"releaseSavepoint\",\n-                    new Class[] { Savepoint.class });\n-        }\n-\n-        invokeJDBC3(m, new Object[] { savepoint });\n+                new Class[] {Savepoint.class});\n+        invokeJDBC3(m, new Object[] {savepoint});\n     }\n \n     public Statement createStatement(int resultSetType,\n-        int resultSetConcurrency, int resultSetHoldability)\n-        throws SQLException {\n+        int resultSetConcurrency, int resultSetHoldability) throws SQLException {\n         assertJDBC3();\n-\n         return createStatement(resultSetType, resultSetConcurrency,\n             resultSetHoldability, true);\n     }\n@@ -469,80 +387,58 @@ protected Statement createStatement(int resultSetType,\n         int resultSetConcurrency, int resultSetHoldability, boolean wrap)\n         throws SQLException {\n         Statement stmnt;\n-\n-        if (_del != null) {\n+        if (_del != null)\n             stmnt = _del.createStatement(resultSetType, resultSetConcurrency,\n-                    resultSetHoldability, false);\n-        } else {\n+                resultSetHoldability, false);\n+        else {\n             Method m = (Method) _jdbc3.get(CREATE_STATEMENT);\n-\n-            if (m == null) {\n+            if (m == null)\n                 m = createJDBC3Method(CREATE_STATEMENT, \"createStatement\",\n-                        new Class[] { int.class, int.class, int.class });\n-            }\n-\n-            stmnt = (Statement) invokeJDBC3(m,\n-                    new Object[] {\n-                        Numbers.valueOf(resultSetType),\n-                        Numbers.valueOf(resultSetConcurrency),\n-                        Numbers.valueOf(resultSetHoldability)\n-                    });\n+                    new Class[] {int.class, int.class, int.class});\n+            stmnt = (Statement) invokeJDBC3(m, new Object[] {\n+                Numbers.valueOf(resultSetType),\n+                Numbers.valueOf(resultSetConcurrency),\n+                Numbers.valueOf(resultSetHoldability)});\n         }\n-\n-        if (wrap) {\n+        if (wrap)\n             stmnt = new DelegatingStatement(stmnt, this);\n-        }\n-\n         return stmnt;\n     }\n \n-    public PreparedStatement prepareStatement(String sql, int resultSetType,\n-        int resultSetConcurrency, int resultSetHoldability)\n+    public PreparedStatement prepareStatement(String sql,\n+        int resultSetType, int resultSetConcurrency, int resultSetHoldability)\n         throws SQLException {\n         assertJDBC3();\n-\n         return prepareStatement(sql, resultSetType, resultSetConcurrency,\n             resultSetHoldability, true);\n     }\n \n-    protected PreparedStatement prepareStatement(String sql, int resultSetType,\n-        int resultSetConcurrency, int resultSetHoldability, boolean wrap)\n-        throws SQLException {\n+    protected PreparedStatement prepareStatement(String sql,\n+        int resultSetType, int resultSetConcurrency, int resultSetHoldability,\n+        boolean wrap) throws SQLException {\n         PreparedStatement stmnt;\n-\n-        if (_del != null) {\n+        if (_del != null)\n             stmnt = _del.prepareStatement(sql, resultSetType,\n-                    resultSetConcurrency, resultSetHoldability, false);\n-        } else {\n+                resultSetConcurrency, resultSetHoldability, false);\n+        else {\n             Method m = (Method) _jdbc3.get(PREPARE_STATEMENT);\n-\n-            if (m == null) {\n+            if (m == null)\n                 m = createJDBC3Method(PREPARE_STATEMENT, \"prepareStatement\",\n-                        new Class[] {\n-                            String.class, int.class, int.class, int.class\n-                        });\n-            }\n-\n-            stmnt = (PreparedStatement) invokeJDBC3(m,\n-                    new Object[] {\n-                        sql, Numbers.valueOf(resultSetType),\n-                        Numbers.valueOf(resultSetConcurrency),\n-                        Numbers.valueOf(resultSetHoldability)\n-                    });\n+                    new Class[]{String.class, int.class, int.class, int.class});\n+            stmnt = (PreparedStatement) invokeJDBC3(m, new Object[] { sql,\n+                Numbers.valueOf(resultSetType),\n+                Numbers.valueOf(resultSetConcurrency),\n+                Numbers.valueOf(resultSetHoldability)});\n         }\n-\n-        if (wrap) {\n+        if (wrap)\n             stmnt = new DelegatingPreparedStatement(stmnt, this);\n-        }\n-\n         return stmnt;\n     }\n \n-    public CallableStatement prepareCall(String sql, int resultSetType,\n-        int resultSetConcurrency, int resultSetHoldability)\n+    public CallableStatement prepareCall(String sql,\n+        int resultSetType, int resultSetConcurrency, int resultSetHoldability)\n         throws SQLException {\n         assertJDBC3();\n-\n         return prepareCall(sql, resultSetType, resultSetConcurrency,\n             resultSetHoldability, true);\n     }\n@@ -551,148 +447,108 @@ protected CallableStatement prepareCall(String sql, int resultSetType,\n         int resultSetConcurrency, int resultSetHoldability, boolean wrap)\n         throws SQLException {\n         CallableStatement stmnt;\n-\n-        if (_del != null) {\n-            stmnt = _del.prepareCall(sql, resultSetType, resultSetConcurrency,\n-                    resultSetHoldability, false);\n-        } else {\n+        if (_del != null)\n+            stmnt = _del.prepareCall(sql, resultSetType,\n+                resultSetConcurrency, resultSetHoldability, false);\n+        else {\n             Method m = (Method) _jdbc3.get(PREPARE_CALL);\n-\n-            if (m == null) {\n+            if (m == null)\n                 m = createJDBC3Method(PREPARE_CALL, \"prepareCall\",\n-                        new Class[] {\n-                            String.class, int.class, int.class, int.class\n-                        });\n-            }\n-\n-            stmnt = (CallableStatement) invokeJDBC3(m,\n-                    new Object[] {\n-                        sql, Numbers.valueOf(resultSetType),\n-                        Numbers.valueOf(resultSetConcurrency),\n-                        Numbers.valueOf(resultSetHoldability)\n-                    });\n+                    new Class[]{String.class, int.class, int.class, int.class});\n+            stmnt = (CallableStatement) invokeJDBC3(m, new Object[] { sql,\n+                Numbers.valueOf(resultSetType),\n+                Numbers.valueOf(resultSetConcurrency),\n+                Numbers.valueOf(resultSetHoldability)});\n         }\n-\n-        if (wrap) {\n+        if (wrap)\n             stmnt = new DelegatingCallableStatement(stmnt, this);\n-        }\n-\n         return stmnt;\n     }\n \n     public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys)\n         throws SQLException {\n         assertJDBC3();\n-\n         return prepareStatement(sql, autoGeneratedKeys, true);\n     }\n \n     protected PreparedStatement prepareStatement(String sql,\n         int autoGeneratedKeys, boolean wrap) throws SQLException {\n         PreparedStatement stmnt;\n-\n-        if (_del != null) {\n+        if (_del != null)\n             stmnt = _del.prepareStatement(sql, autoGeneratedKeys);\n-        } else {\n+        else {\n             Method m = (Method) _jdbc3.get(PREPARE_WITH_KEYS);\n-\n-            if (m == null) {\n+            if (m == null)\n                 m = createJDBC3Method(PREPARE_WITH_KEYS, \"prepareStatement\",\n-                        new Class[] { String.class, int.class });\n-            }\n-\n-            stmnt = (PreparedStatement) invokeJDBC3(m,\n-                    new Object[] { sql, Numbers.valueOf(autoGeneratedKeys) });\n+                    new Class[] {String.class, int.class});\n+            stmnt = (PreparedStatement) invokeJDBC3(m, new Object[] { sql,\n+                Numbers.valueOf(autoGeneratedKeys)});\n         }\n-\n-        if (wrap) {\n+        if (wrap)\n             stmnt = new DelegatingPreparedStatement(stmnt, this);\n-        }\n-\n         return stmnt;\n     }\n \n     public PreparedStatement prepareStatement(String sql, int[] columnIndexes)\n         throws SQLException {\n         assertJDBC3();\n-\n         return prepareStatement(sql, columnIndexes, true);\n     }\n \n     protected PreparedStatement prepareStatement(String sql,\n         int[] columnIndexes, boolean wrap) throws SQLException {\n         PreparedStatement stmnt;\n-\n-        if (_del != null) {\n+        if (_del != null)\n             stmnt = _del.prepareStatement(sql, columnIndexes, wrap);\n-        } else {\n+        else {\n             Method m = (Method) _jdbc3.get(PREPARE_WITH_INDEX);\n-\n-            if (m == null) {\n+            if (m == null)\n                 m = createJDBC3Method(PREPARE_WITH_INDEX, \"prepareStatement\",\n-                        new Class[] { String.class, int[].class });\n-            }\n-\n-            stmnt = (PreparedStatement) invokeJDBC3(m,\n-                    new Object[] { sql, columnIndexes });\n+                    new Class[] {String.class, int[].class});\n+            stmnt = (PreparedStatement) invokeJDBC3(m, new Object[] { sql,\n+                columnIndexes});\n         }\n-\n-        if (wrap) {\n+        if (wrap)\n             stmnt = new DelegatingPreparedStatement(stmnt, this);\n-        }\n-\n         return stmnt;\n     }\n \n     public PreparedStatement prepareStatement(String sql, String[] columnNames)\n         throws SQLException {\n         assertJDBC3();\n-\n         return prepareStatement(sql, columnNames, true);\n     }\n \n     protected PreparedStatement prepareStatement(String sql,\n         String[] columnNames, boolean wrap) throws SQLException {\n         assertJDBC3();\n-\n         PreparedStatement stmnt;\n-\n-        if (_del != null) {\n+        if (_del != null)\n             stmnt = _del.prepareStatement(sql, columnNames, wrap);\n-        } else {\n+        else {\n             Method m = (Method) _jdbc3.get(PREPARE_WITH_NAMES);\n-\n-            if (m == null) {\n+            if (m == null)\n                 m = createJDBC3Method(PREPARE_WITH_NAMES, \"prepareStatement\",\n-                        new Class[] { String.class, String[].class });\n-            }\n-\n-            stmnt = (PreparedStatement) invokeJDBC3(m,\n-                    new Object[] { sql, columnNames });\n+                    new Class[] {String.class, String[].class});\n+            stmnt = (PreparedStatement) invokeJDBC3(m, new Object[] { sql,\n+                columnNames});\n         }\n-\n-        if (wrap) {\n+        if (wrap)\n             stmnt = new DelegatingPreparedStatement(stmnt, this);\n-        }\n-\n         return stmnt;\n     }\n \n     private static void assertJDBC3() {\n-        if (_jdbc3 == null) {\n+        if (_jdbc3 == null)\n             throw new UnsupportedOperationException(_loc.get(\"not-jdbc3\"));\n-        }\n     }\n \n-    private Object invokeJDBC3(Method m, Object[] args)\n-        throws SQLException {\n+    private Object invokeJDBC3(Method m, Object[] args) throws SQLException {\n         try {\n             return m.invoke(_conn, args);\n         } catch (Throwable t) {\n-            if (t instanceof SQLException) {\n-                throw (SQLException) t;\n-            }\n-\n+            if (t instanceof SQLException)\n+                throw(SQLException) t;\n             throw new NestableRuntimeException(_loc.get(\"invoke-jdbc3\"), t);\n         }\n     }\n@@ -702,7 +558,6 @@ private static Method createJDBC3Method(Object key, String name,\n         try {\n             Method m = Connection.class.getMethod(name, args);\n             _jdbc3.put(key, m);\n-\n             return m;\n         } catch (Throwable t) {\n             throw new NestableRuntimeException(_loc.get(\"error-jdbc3\"), t);"},{"sha":"405006735cae7f2a52a2718b6de4d4af48882959","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingDataSource.java","status":"modified","additions":22,"deletions":40,"changes":62,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingDataSource.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingDataSource.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingDataSource.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74","patch":"@@ -1,96 +1,81 @@\n /*\n  * Copyright 2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *  Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n package org.apache.openjpa.lib.jdbc;\n \n-import org.apache.openjpa.lib.util.*;\n-import org.apache.openjpa.lib.util.Closeable;\n-\n import java.io.*;\n-\n import java.sql.*;\n-\n import javax.sql.*;\n-\n+import org.apache.openjpa.lib.util.*;\n+import org.apache.openjpa.lib.util.Closeable;\n \n /**\n- *  <p>Wrapper around an existing data source.  Subclasses can override the\n- *  methods whose behavior they mean to change.  The <code>equals</code> and\n- *  <code>hashCode</code> methods pass through to the base underlying data\n- *  store.</p>\n- *\n- *  @author Abe White\n+ * Wrapper around an existing data source. Subclasses can override the\n+ * methods whose behavior they mean to change. The <code>equals</code> and\n+ * <code>hashCode</code> methods pass through to the base underlying data store.\n+ * \n+ * @author Abe White\n  */\n public class DelegatingDataSource implements DataSource, Closeable {\n     private final DataSource _ds;\n     private final DelegatingDataSource _del;\n \n     /**\n-     *  Constructor.  Supply wrapped data source.\n+     * Constructor. Supply wrapped data source.\n      */\n     public DelegatingDataSource(DataSource ds) {\n         _ds = ds;\n \n-        if (_ds instanceof DelegatingDataSource) {\n+        if (_ds instanceof DelegatingDataSource)\n             _del = (DelegatingDataSource) _ds;\n-        } else {\n+        else\n             _del = null;\n-        }\n     }\n \n     /**\n-     *  Return the wrapped data source.\n+     * Return the wrapped data source.\n      */\n     public DataSource getDelegate() {\n         return _ds;\n     }\n \n     /**\n-     *  Return the inner-most wrapped delegate.\n+     * Return the inner-most wrapped delegate.\n      */\n     public DataSource getInnermostDelegate() {\n-        return (_del == null) ? _ds : _del.getInnermostDelegate();\n+        return(_del == null) ? _ds : _del.getInnermostDelegate();\n     }\n \n     public int hashCode() {\n         return getInnermostDelegate().hashCode();\n     }\n \n     public boolean equals(Object other) {\n-        if (other == this) {\n+        if (other == this)\n             return true;\n-        }\n-\n-        if (other instanceof DelegatingDataSource) {\n+        if (other instanceof DelegatingDataSource)\n             other = ((DelegatingDataSource) other).getInnermostDelegate();\n-        }\n-\n         return getInnermostDelegate().equals(other);\n     }\n \n     public String toString() {\n-        StringBuffer buf = new StringBuffer(\"datasource \").append(hashCode());\n+        StringBuffer buf = new StringBuffer(\"datasource \"). append(hashCode());\n         appendInfo(buf);\n-\n         return buf.toString();\n     }\n \n     protected void appendInfo(StringBuffer buf) {\n-        if (_del != null) {\n+        if (_del != null)\n             _del.appendInfo(buf);\n-        }\n     }\n \n     public PrintWriter getLogWriter() throws SQLException {\n@@ -115,16 +100,13 @@ public Connection getConnection() throws SQLException {\n \n     public Connection getConnection(String user, String pass)\n         throws SQLException {\n-        if ((user == null) && (pass == null)) {\n+        if (user == null && pass == null)\n             return _ds.getConnection();\n-        }\n-\n         return _ds.getConnection(user, pass);\n     }\n \n     public void close() throws Exception {\n-        if (_ds instanceof Closeable) {\n+        if (_ds instanceof Closeable)\n             ((Closeable) _ds).close();\n-        }\n     }\n }"},{"sha":"dcd6ab29cfb461eb23299ec75d29600d3f52ed44","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingDatabaseMetaData.java","status":"modified","additions":64,"deletions":87,"changes":151,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingDatabaseMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingDatabaseMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingDatabaseMetaData.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74","patch":"@@ -1,13 +1,10 @@\n /*\n  * Copyright 2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *  Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n@@ -16,55 +13,49 @@\n package org.apache.openjpa.lib.jdbc;\n \n import java.io.*;\n-\n import java.sql.*;\n-\n import java.util.*;\n \n-\n /**\n- *  <p>Wrapper around a DatabaseMetadata instance.</p>\n- *\n- *  @author Marc Prud'hommeaux\n+ * Wrapper around a DatabaseMetadata instance.\n+ * \n+ * @author Marc Prud'hommeaux\n  */\n public class DelegatingDatabaseMetaData implements DatabaseMetaData {\n     private final DatabaseMetaData _metaData;\n-    private final Connection _conn;\n+    private final Connection  _conn;\n \n-    public DelegatingDatabaseMetaData(DatabaseMetaData metaData, Connection conn) {\n+    public DelegatingDatabaseMetaData(DatabaseMetaData metaData,\n+        Connection conn) {\n         _conn = conn;\n         _metaData = metaData;\n     }\n \n     /**\n-     *  Return the base underlying database metadata.\n+     * Return the base underlying database metadata.\n      */\n     public DatabaseMetaData getInnermostDelegate() {\n-        return (_metaData instanceof DelegatingDatabaseMetaData)\n-        ? ((DelegatingDatabaseMetaData) _metaData).getInnermostDelegate()\n-        : _metaData;\n+        return _metaData instanceof DelegatingDatabaseMetaData ?\n+            ((DelegatingDatabaseMetaData)_metaData).getInnermostDelegate()\n+            : _metaData;\n     }\n \n     public int hashCode() {\n         return getInnermostDelegate().hashCode();\n     }\n \n     public boolean equals(Object other) {\n-        if (other == this) {\n+        if (other == this)\n             return true;\n-        }\n-\n-        if (other instanceof DelegatingDatabaseMetaData) {\n-            other = ((DelegatingDatabaseMetaData) other).getInnermostDelegate();\n-        }\n-\n+        if (other instanceof DelegatingDatabaseMetaData)\n+            other = ((DelegatingDatabaseMetaData) other)\n+            .getInnermostDelegate();\n         return getInnermostDelegate().equals(other);\n     }\n \n     public String toString() {\n         StringBuffer buf = new StringBuffer(\"metadata \").append(hashCode());\n         buf.append(\"[\").append(_metaData.toString()).append(\"]\");\n-\n         return buf.toString();\n     }\n \n@@ -76,13 +67,11 @@ public boolean allTablesAreSelectable() throws SQLException {\n         return _metaData.allTablesAreSelectable();\n     }\n \n-    public boolean dataDefinitionCausesTransactionCommit()\n-        throws SQLException {\n+    public boolean dataDefinitionCausesTransactionCommit() throws SQLException {\n         return _metaData.dataDefinitionCausesTransactionCommit();\n     }\n \n-    public boolean dataDefinitionIgnoredInTransactions()\n-        throws SQLException {\n+    public boolean dataDefinitionIgnoredInTransactions() throws SQLException {\n         return _metaData.dataDefinitionIgnoredInTransactions();\n     }\n \n@@ -94,10 +83,11 @@ public boolean doesMaxRowSizeIncludeBlobs() throws SQLException {\n         return _metaData.doesMaxRowSizeIncludeBlobs();\n     }\n \n-    public ResultSet getBestRowIdentifier(String catalog, String schema,\n-        String table, int scope, boolean nullable) throws SQLException {\n-        return _metaData.getBestRowIdentifier(catalog, schema, table, scope,\n-            nullable);\n+    public ResultSet getBestRowIdentifier(String catalog,\n+        String schema, String table, int scope, boolean nullable)\n+        throws SQLException {\n+        return _metaData.getBestRowIdentifier(catalog, schema,\n+            table, scope, nullable);\n     }\n \n     public ResultSet getCatalogs() throws SQLException {\n@@ -114,15 +104,14 @@ public String getCatalogTerm() throws SQLException {\n \n     public ResultSet getColumnPrivileges(String catalog, String schema,\n         String table, String columnNamePattern) throws SQLException {\n-        return _metaData.getColumnPrivileges(catalog, schema, table,\n-            columnNamePattern);\n+        return _metaData.getColumnPrivileges(catalog, schema,\n+            table, columnNamePattern);\n     }\n \n     public ResultSet getColumns(String catalog, String schemaPattern,\n-        String tableNamePattern, String columnNamePattern)\n-        throws SQLException {\n-        return _metaData.getColumns(catalog, schemaPattern, tableNamePattern,\n-            columnNamePattern);\n+        String tableNamePattern, String columnNamePattern) throws SQLException {\n+        return _metaData.getColumns(catalog, schemaPattern,\n+            tableNamePattern, columnNamePattern);\n     }\n \n     public Connection getConnection() throws SQLException {\n@@ -164,8 +153,8 @@ public String getDriverVersion() throws SQLException {\n         return _metaData.getDriverVersion();\n     }\n \n-    public ResultSet getExportedKeys(String catalog, String schema, String table)\n-        throws SQLException {\n+    public ResultSet getExportedKeys(String catalog, String schema,\n+        String table) throws SQLException {\n         return _metaData.getExportedKeys(catalog, schema, table);\n     }\n \n@@ -177,13 +166,13 @@ public String getIdentifierQuoteString() throws SQLException {\n         return _metaData.getIdentifierQuoteString();\n     }\n \n-    public ResultSet getImportedKeys(String catalog, String schema, String table)\n-        throws SQLException {\n+    public ResultSet getImportedKeys(String catalog, String schema,\n+        String table) throws SQLException {\n         return _metaData.getImportedKeys(catalog, schema, table);\n     }\n \n-    public ResultSet getIndexInfo(String catalog, String schema, String table,\n-        boolean unique, boolean approximate) throws SQLException {\n+    public ResultSet getIndexInfo(String catalog, String schema,\n+        String table, boolean unique, boolean approximate) throws SQLException {\n         return _metaData.getIndexInfo(catalog, schema, table, unique,\n             approximate);\n     }\n@@ -318,16 +307,16 @@ public String getSystemFunctions() throws SQLException {\n         return _metaData.getSystemFunctions();\n     }\n \n-    public ResultSet getTablePrivileges(String catalog, String schemaPattern,\n-        String tableNamePattern) throws SQLException {\n+    public ResultSet getTablePrivileges(String catalog,\n+        String schemaPattern, String tableNamePattern) throws SQLException {\n         return _metaData.getTablePrivileges(catalog, schemaPattern,\n             tableNamePattern);\n     }\n \n     public ResultSet getTables(String catalog, String schemaPattern,\n         String tableNamePattern, String[] types) throws SQLException {\n-        return _metaData.getTables(catalog, schemaPattern, tableNamePattern,\n-            types);\n+        return _metaData.getTables(catalog, schemaPattern,\n+            tableNamePattern, types);\n     }\n \n     public ResultSet getTableTypes() throws SQLException {\n@@ -344,7 +333,8 @@ public ResultSet getTypeInfo() throws SQLException {\n \n     public ResultSet getUDTs(String catalog, String schemaPattern,\n         String typeNamePattern, int[] types) throws SQLException {\n-        return _metaData.getUDTs(catalog, schemaPattern, typeNamePattern, types);\n+        return _metaData.getUDTs(catalog, schemaPattern,\n+            typeNamePattern, types);\n     }\n \n     public String getURL() throws SQLException {\n@@ -355,8 +345,8 @@ public String getUserName() throws SQLException {\n         return _metaData.getUserName();\n     }\n \n-    public ResultSet getVersionColumns(String catalog, String schema,\n-        String table) throws SQLException {\n+    public ResultSet getVersionColumns(String catalog,\n+        String schema, String table) throws SQLException {\n         return _metaData.getVersionColumns(catalog, schema, table);\n     }\n \n@@ -464,27 +454,23 @@ public boolean supportsBatchUpdates() throws SQLException {\n         return _metaData.supportsBatchUpdates();\n     }\n \n-    public boolean supportsCatalogsInDataManipulation()\n-        throws SQLException {\n+    public boolean supportsCatalogsInDataManipulation() throws SQLException {\n         return _metaData.supportsCatalogsInDataManipulation();\n     }\n \n-    public boolean supportsCatalogsInIndexDefinitions()\n-        throws SQLException {\n+    public boolean supportsCatalogsInIndexDefinitions() throws SQLException {\n         return _metaData.supportsCatalogsInIndexDefinitions();\n     }\n \n-    public boolean supportsCatalogsInPrivilegeDefinitions()\n-        throws SQLException {\n+    public boolean supportsCatalogsInPrivilegeDefinitions() throws SQLException {\n         return _metaData.supportsCatalogsInPrivilegeDefinitions();\n     }\n \n     public boolean supportsCatalogsInProcedureCalls() throws SQLException {\n         return _metaData.supportsCatalogsInProcedureCalls();\n     }\n \n-    public boolean supportsCatalogsInTableDefinitions()\n-        throws SQLException {\n+    public boolean supportsCatalogsInTableDefinitions() throws SQLException {\n         return _metaData.supportsCatalogsInTableDefinitions();\n     }\n \n@@ -496,8 +482,7 @@ public boolean supportsConvert() throws SQLException {\n         return _metaData.supportsConvert();\n     }\n \n-    public boolean supportsConvert(int fromType, int toType)\n-        throws SQLException {\n+    public boolean supportsConvert(int fromType, int toType) throws SQLException {\n         return _metaData.supportsConvert(fromType, toType);\n     }\n \n@@ -511,16 +496,16 @@ public boolean supportsCorrelatedSubqueries() throws SQLException {\n \n     public boolean supportsDataDefinitionAndDataManipulationTransactions()\n         throws SQLException {\n-        return _metaData.supportsDataDefinitionAndDataManipulationTransactions();\n+        return _metaData\n+            .supportsDataDefinitionAndDataManipulationTransactions();\n     }\n \n     public boolean supportsDataManipulationTransactionsOnly()\n         throws SQLException {\n         return _metaData.supportsDataManipulationTransactionsOnly();\n     }\n \n-    public boolean supportsDifferentTableCorrelationNames()\n-        throws SQLException {\n+    public boolean supportsDifferentTableCorrelationNames() throws SQLException {\n         return _metaData.supportsDifferentTableCorrelationNames();\n     }\n \n@@ -548,8 +533,7 @@ public boolean supportsGroupByUnrelated() throws SQLException {\n         return _metaData.supportsGroupByUnrelated();\n     }\n \n-    public boolean supportsIntegrityEnhancementFacility()\n-        throws SQLException {\n+    public boolean supportsIntegrityEnhancementFacility() throws SQLException {\n         return _metaData.supportsIntegrityEnhancementFacility();\n     }\n \n@@ -569,8 +553,7 @@ public boolean supportsMixedCaseIdentifiers() throws SQLException {\n         return _metaData.supportsMixedCaseIdentifiers();\n     }\n \n-    public boolean supportsMixedCaseQuotedIdentifiers()\n-        throws SQLException {\n+    public boolean supportsMixedCaseQuotedIdentifiers() throws SQLException {\n         return _metaData.supportsMixedCaseQuotedIdentifiers();\n     }\n \n@@ -590,18 +573,15 @@ public boolean supportsOpenCursorsAcrossCommit() throws SQLException {\n         return _metaData.supportsOpenCursorsAcrossCommit();\n     }\n \n-    public boolean supportsOpenCursorsAcrossRollback()\n-        throws SQLException {\n+    public boolean supportsOpenCursorsAcrossRollback() throws SQLException {\n         return _metaData.supportsOpenCursorsAcrossRollback();\n     }\n \n-    public boolean supportsOpenStatementsAcrossCommit()\n-        throws SQLException {\n+    public boolean supportsOpenStatementsAcrossCommit() throws SQLException {\n         return _metaData.supportsOpenStatementsAcrossCommit();\n     }\n \n-    public boolean supportsOpenStatementsAcrossRollback()\n-        throws SQLException {\n+    public boolean supportsOpenStatementsAcrossRollback() throws SQLException {\n         return _metaData.supportsOpenStatementsAcrossRollback();\n     }\n \n@@ -630,27 +610,23 @@ public boolean supportsResultSetType(int type) throws SQLException {\n         return _metaData.supportsResultSetType(type);\n     }\n \n-    public boolean supportsSchemasInDataManipulation()\n-        throws SQLException {\n+    public boolean supportsSchemasInDataManipulation() throws SQLException {\n         return _metaData.supportsSchemasInDataManipulation();\n     }\n \n-    public boolean supportsSchemasInIndexDefinitions()\n-        throws SQLException {\n+    public boolean supportsSchemasInIndexDefinitions() throws SQLException {\n         return _metaData.supportsSchemasInIndexDefinitions();\n     }\n \n-    public boolean supportsSchemasInPrivilegeDefinitions()\n-        throws SQLException {\n+    public boolean supportsSchemasInPrivilegeDefinitions() throws SQLException {\n         return _metaData.supportsSchemasInPrivilegeDefinitions();\n     }\n \n     public boolean supportsSchemasInProcedureCalls() throws SQLException {\n         return _metaData.supportsSchemasInProcedureCalls();\n     }\n \n-    public boolean supportsSchemasInTableDefinitions()\n-        throws SQLException {\n+    public boolean supportsSchemasInTableDefinitions() throws SQLException {\n         return _metaData.supportsSchemasInTableDefinitions();\n     }\n \n@@ -711,8 +687,9 @@ public boolean usesLocalFiles() throws SQLException {\n         return _metaData.usesLocalFiles();\n     }\n \n-    // JDBC 3.0 methods (unsupported) follow; these are required to be able to \n+    // JDBC 3.0 methods(unsupported) follow; these are required to be able to\n     // compile against JDK 1.4\n+\n     public boolean supportsSavepoints() throws SQLException {\n         throw new UnsupportedOperationException();\n     }\n@@ -740,8 +717,7 @@ public ResultSet getSuperTables(String catalog, String schemaPatter,\n     }\n \n     public ResultSet getAttributes(String catalog, String schemaPatter,\n-        String typeNamePattern, String attributeNamePattern)\n-        throws SQLException {\n+        String typeNamePattern, String attributeNamePattern) throws SQLException {\n         throw new UnsupportedOperationException();\n     }\n \n@@ -782,3 +758,4 @@ public boolean supportsStatementPooling() throws SQLException {\n         throw new UnsupportedOperationException();\n     }\n }\n+"},{"sha":"1cd66948d22392fdf011d4dc49b05ca6cd4b59c2","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingPreparedStatement.java","status":"modified","additions":41,"deletions":71,"changes":112,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingPreparedStatement.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingPreparedStatement.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingPreparedStatement.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74","patch":"@@ -1,129 +1,107 @@\n /*\n  * Copyright 2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *  Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n package org.apache.openjpa.lib.jdbc;\n \n-import org.apache.openjpa.lib.util.*;\n-import org.apache.openjpa.lib.util.Closeable;\n-\n import java.io.*;\n-\n import java.math.*;\n-\n import java.net.*;\n-\n import java.sql.*;\n import java.sql.Date;\n-\n import java.util.*;\n-\n+import org.apache.openjpa.lib.util.*;\n+import org.apache.openjpa.lib.util.Closeable;\n \n /**\n- *  <p>Wrapper around an existing statement.  Subclasses can override the\n- *  methods whose behavior they mean to change.  The <code>equals</code> and\n- *  <code>hashCode</code> methods pass through to the base underlying data\n- *  store statement.</p>\n- *\n- *  @author Abe White\n+ * Wrapper around an existing statement. Subclasses can override the\n+ * methods whose behavior they mean to change. The <code>equals</code> and\n+ * <code>hashCode</code> methods pass through to the base underlying data\n+ * store statement.\n+ * \n+ * @author Abe White\n  */\n-public class DelegatingPreparedStatement implements PreparedStatement,\n-    Closeable {\n+public class DelegatingPreparedStatement implements PreparedStatement, Closeable {\n     private final PreparedStatement _stmnt;\n     private final DelegatingPreparedStatement _del;\n     private final Connection _conn;\n \n     public DelegatingPreparedStatement(PreparedStatement stmnt, Connection conn) {\n         _conn = conn;\n         _stmnt = stmnt;\n-\n-        if (_stmnt instanceof DelegatingPreparedStatement) {\n+        if (_stmnt instanceof DelegatingPreparedStatement)\n             _del = (DelegatingPreparedStatement) _stmnt;\n-        } else {\n+        else\n             _del = null;\n-        }\n     }\n \n     protected ResultSet wrapResult(ResultSet rs, boolean wrap) {\n-        if (!wrap || (rs == null)) {\n+        if (!wrap || rs == null)\n             return rs;\n-        }\n-\n         return new DelegatingResultSet(rs, this);\n     }\n \n     /**\n-     *  Return the wrapped statement.\n+     * Return the wrapped statement.\n      */\n     public PreparedStatement getDelegate() {\n         return _stmnt;\n     }\n \n     /**\n-     *  Return the base underlying data store statement.\n+     * Return the base underlying data store statement.\n      */\n     public PreparedStatement getInnermostDelegate() {\n-        return (_del == null) ? _stmnt : _del.getInnermostDelegate();\n+        return(_del == null) ? _stmnt : _del.getInnermostDelegate();\n     }\n \n     public int hashCode() {\n         return getInnermostDelegate().hashCode();\n     }\n \n     public boolean equals(Object other) {\n-        if (other == this) {\n+        if (other == this)\n             return true;\n-        }\n-\n-        if (other instanceof DelegatingPreparedStatement) {\n-            other = ((DelegatingPreparedStatement) other).getInnermostDelegate();\n-        }\n-\n+        if (other instanceof DelegatingPreparedStatement)\n+            other = ((DelegatingPreparedStatement) other).\n+                getInnermostDelegate();\n         return getInnermostDelegate().equals(other);\n     }\n \n     public String toString() {\n         StringBuffer buf = new StringBuffer(\"prepstmnt \").append(hashCode());\n         appendInfo(buf);\n-\n         return buf.toString();\n     }\n \n     protected void appendInfo(StringBuffer buf) {\n-        if (_del != null) {\n+        if (_del != null)\n             _del.appendInfo(buf);\n-        }\n     }\n \n     public ResultSet executeQuery(String str) throws SQLException {\n         return executeQuery(str, true);\n     }\n \n     /**\n-      *  Execute the query, with the option of not wrapping it in a\n-     *  {@link DelegatingResultSet}, which is the default.\n+     * Execute the query, with the option of not wrapping it in a\n+     * {@link DelegatingResultSet}, which is the default.\n      */\n     protected ResultSet executeQuery(String sql, boolean wrap)\n         throws SQLException {\n         ResultSet rs;\n-\n-        if (_del != null) {\n+        if (_del != null)\n             rs = _del.executeQuery(sql, false);\n-        } else {\n+        else\n             rs = _stmnt.executeQuery(sql);\n-        }\n-\n         return wrapResult(rs, wrap);\n     }\n \n@@ -188,18 +166,15 @@ public ResultSet getResultSet() throws SQLException {\n     }\n \n     /**\n-      *  Get the last result set, with the option of not wrapping it in a\n-     *  {@link DelegatingResultSet}, which is the default.\n+     * Get the last result set, with the option of not wrapping it in a\n+     * {@link DelegatingResultSet}, which is the default.\n      */\n     protected ResultSet getResultSet(boolean wrap) throws SQLException {\n         ResultSet rs;\n-\n-        if (_del != null) {\n+        if (_del != null)\n             rs = _del.getResultSet(false);\n-        } else {\n+        else\n             rs = _stmnt.getResultSet();\n-        }\n-\n         return wrapResult(rs, wrap);\n     }\n \n@@ -256,22 +231,19 @@ public ResultSet executeQuery() throws SQLException {\n     }\n \n     /**\n-      *  Execute the query, with the option of not wrapping it in a\n-     *  {@link DelegatingResultSet}, which is the default.\n+     * Execute the query, with the option of not wrapping it in a\n+     * {@link DelegatingResultSet}, which is the default.\n      */\n     protected ResultSet executeQuery(boolean wrap) throws SQLException {\n         ResultSet rs;\n-\n-        if (_del != null) {\n+        if (_del != null)\n             rs = _del.executeQuery(false);\n-        } else {\n+        else\n             rs = _stmnt.executeQuery();\n-        }\n-\n         return wrapResult(rs, wrap);\n     }\n \n-    public int executeUpdate() throws SQLException {\n+    public int executeUpdate  () throws SQLException {\n         return _stmnt.executeUpdate();\n     }\n \n@@ -350,8 +322,7 @@ public void clearParameters() throws SQLException {\n         _stmnt.clearParameters();\n     }\n \n-    public void setObject(int i1, Object o, int i2, int i3)\n-        throws SQLException {\n+    public void setObject(int i1, Object o, int i2, int i3) throws SQLException {\n         _stmnt.setObject(i1, o, i2, i3);\n     }\n \n@@ -371,8 +342,7 @@ public void addBatch() throws SQLException {\n         _stmnt.addBatch();\n     }\n \n-    public void setCharacterStream(int i1, Reader r, int i2)\n-        throws SQLException {\n+    public void setCharacterStream(int i1, Reader r, int i2) throws SQLException {\n         _stmnt.setCharacterStream(i1, r, i2);\n     }\n \n@@ -404,17 +374,17 @@ public void setTime(int i, Time t, Calendar c) throws SQLException {\n         _stmnt.setTime(i, t, c);\n     }\n \n-    public void setTimestamp(int i, Timestamp t, Calendar c)\n-        throws SQLException {\n+    public void setTimestamp(int i, Timestamp t, Calendar c) throws SQLException {\n         _stmnt.setTimestamp(i, t, c);\n     }\n \n     public void setNull(int i1, int i2, String s) throws SQLException {\n         _stmnt.setNull(i1, i2, s);\n     }\n \n-    // JDBC 3.0 (unsupported) method follow; these are required to be able \n+    // JDBC 3.0 (unsupported) method follow; these are required to be able\n     // to compile against JDK 1.4\n+\n     public boolean getMoreResults(int i) throws SQLException {\n         throw new UnsupportedOperationException();\n     }"},{"sha":"c677f4a96dd9b2110e30e8851f0302a57b500e55","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingResultSet.java","status":"modified","additions":30,"deletions":53,"changes":83,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingResultSet.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingResultSet.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingResultSet.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74","patch":"@@ -1,104 +1,86 @@\n /*\n  * Copyright 2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *  Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n package org.apache.openjpa.lib.jdbc;\n \n-import org.apache.openjpa.lib.util.*;\n-import org.apache.openjpa.lib.util.Closeable;\n-\n import java.io.*;\n-\n import java.math.*;\n-\n import java.net.*;\n-\n import java.sql.*;\n import java.sql.Date;\n-\n import java.util.*;\n-\n+import org.apache.openjpa.lib.util.*;\n+import org.apache.openjpa.lib.util.Closeable;\n \n /**\n- *  <p>Wrapper around an existing result set.  Subclasses can override the\n- *  methods whose behavior they mean to change.  The <code>equals</code> and\n- *  <code>hashCode</code> methods pass through to the base underlying data\n- *  store statement.</p>\n- *\n- *  @author Marc Prud'hommeaux\n+ * Wrapper around an existing result set. Subclasses can override the\n+ * methods whose behavior they mean to change. The <code>equals</code> and\n+ * <code>hashCode</code> methods pass through to the base underlying data\n+ * store statement.\n+ * \n+ * @author Marc Prud'hommeaux\n  */\n public class DelegatingResultSet implements ResultSet, Closeable {\n     private final ResultSet _rs;\n     private final DelegatingResultSet _del;\n     private final Statement _stmnt;\n \n     public DelegatingResultSet(ResultSet rs, Statement stmnt) {\n-        if (rs == null) {\n+        if (rs == null)\n             throw new IllegalArgumentException();\n-        }\n \n         _stmnt = stmnt;\n         _rs = rs;\n-\n-        if (_rs instanceof DelegatingResultSet) {\n+        if (_rs instanceof DelegatingResultSet)\n             _del = (DelegatingResultSet) _rs;\n-        } else {\n+        else\n             _del = null;\n-        }\n     }\n \n     /**\n-     *  Return the wrapped result set.\n+     * Return the wrapped result set.\n      */\n     public ResultSet getDelegate() {\n         return _rs;\n     }\n \n     /**\n-     *  Return the inner-most wrapped delegate.\n+     * Return the inner-most wrapped delegate.\n      */\n     public ResultSet getInnermostDelegate() {\n-        return (_del == null) ? _rs : _del.getInnermostDelegate();\n+        return(_del == null) ? _rs : _del.getInnermostDelegate();\n     }\n \n     public int hashCode() {\n         return _rs.hashCode();\n     }\n \n     public boolean equals(Object other) {\n-        if (other == this) {\n+        if (other == this)\n             return true;\n-        }\n-\n-        if (other instanceof DelegatingResultSet) {\n+        if (other instanceof DelegatingResultSet)\n             other = ((DelegatingResultSet) other).getInnermostDelegate();\n-        }\n-\n         return getInnermostDelegate().equals(other);\n     }\n \n     public String toString() {\n         StringBuffer buf = new StringBuffer(\"resultset \").append(hashCode());\n         appendInfo(buf);\n-\n         return buf.toString();\n     }\n \n     protected void appendInfo(StringBuffer buf) {\n-        if (_del != null) {\n+        if (_del != null)\n             _del.appendInfo(buf);\n-        }\n     }\n \n     public boolean next() throws SQLException {\n@@ -480,8 +462,7 @@ public void updateDouble(String a, double b) throws SQLException {\n         _rs.updateDouble(a, b);\n     }\n \n-    public void updateBigDecimal(String a, BigDecimal b)\n-        throws SQLException {\n+    public void updateBigDecimal(String a, BigDecimal b) throws SQLException {\n         _rs.updateBigDecimal(a, b);\n     }\n \n@@ -501,8 +482,7 @@ public void updateTime(String a, Time b) throws SQLException {\n         _rs.updateTime(a, b);\n     }\n \n-    public void updateTimestamp(String a, Timestamp b)\n-        throws SQLException {\n+    public void updateTimestamp(String a, Timestamp b) throws SQLException {\n         _rs.updateTimestamp(a, b);\n     }\n \n@@ -521,8 +501,7 @@ public void updateCharacterStream(String a, Reader reader, int b)\n         _rs.updateCharacterStream(a, reader, b);\n     }\n \n-    public void updateObject(String a, Object ob, int b)\n-        throws SQLException {\n+    public void updateObject(String a, Object ob, int b) throws SQLException {\n         _rs.updateObject(a, ob, b);\n     }\n \n@@ -622,13 +601,13 @@ public Timestamp getTimestamp(int a, Calendar b) throws SQLException {\n         return _rs.getTimestamp(a, b);\n     }\n \n-    public Timestamp getTimestamp(String a, Calendar b)\n-        throws SQLException {\n+    public Timestamp getTimestamp(String a, Calendar b) throws SQLException {\n         return _rs.getTimestamp(a, b);\n     }\n \n-    // JDBC 3.0 (unsupported) method follow; these are required to be able \n+    // JDBC 3.0 (unsupported) method follow; these are required to be able\n     // to compile against JDK 1.4\n+\n     public URL getURL(int column) throws SQLException {\n         throw new UnsupportedOperationException();\n     }\n@@ -649,26 +628,24 @@ public void updateBlob(int column, Blob blob) throws SQLException {\n         throw new UnsupportedOperationException();\n     }\n \n-    public void updateBlob(String columnName, Blob blob)\n-        throws SQLException {\n+    public void updateBlob(String columnName, Blob blob) throws SQLException {\n         throw new UnsupportedOperationException();\n     }\n \n     public void updateClob(int column, Clob clob) throws SQLException {\n         throw new UnsupportedOperationException();\n     }\n \n-    public void updateClob(String columnName, Clob clob)\n-        throws SQLException {\n+    public void updateClob(String columnName, Clob clob) throws SQLException {\n         throw new UnsupportedOperationException();\n     }\n \n     public void updateArray(int column, Array array) throws SQLException {\n         throw new UnsupportedOperationException();\n     }\n \n-    public void updateArray(String columnName, Array array)\n-        throws SQLException {\n+    public void updateArray(String columnName, Array array) throws SQLException {\n         throw new UnsupportedOperationException();\n     }\n }\n+"},{"sha":"87ec876ad3dc5f692304a26cad5815e8bab24b5d","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingStatement.java","status":"modified","additions":30,"deletions":49,"changes":79,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingStatement.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingStatement.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingStatement.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74","patch":"@@ -1,32 +1,27 @@\n /*\n  * Copyright 2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *  Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n package org.apache.openjpa.lib.jdbc;\n \n-import org.apache.openjpa.lib.util.*;\n-\n import java.sql.*;\n-\n+import org.apache.openjpa.lib.util.*;\n \n /**\n- *  <p>Wrapper around an existing statement.  Subclasses can override the\n- *  methods whose behavior they mean to change.  The <code>equals</code> and\n- *  <code>hashCode</code> methods pass through to the base underlying data\n- *  store statement.</p>\n- *\n- *  @author Abe White\n+ * Wrapper around an existing statement. Subclasses can override the\n+ * methods whose behavior they mean to change. The <code>equals</code> and\n+ * <code>hashCode</code> methods pass through to the base underlying data\n+ * store statement.\n+ * \n+ * @author Abe White\n  */\n public class DelegatingStatement implements Statement, Closeable {\n     private final Statement _stmnt;\n@@ -36,83 +31,70 @@\n     public DelegatingStatement(Statement stmnt, Connection conn) {\n         _conn = conn;\n         _stmnt = stmnt;\n-\n-        if (stmnt instanceof DelegatingStatement) {\n+        if (stmnt instanceof DelegatingStatement)\n             _del = (DelegatingStatement) stmnt;\n-        } else {\n+        else\n             _del = null;\n-        }\n     }\n \n     protected ResultSet wrapResult(ResultSet rs, boolean wrap) {\n-        if (!wrap || (rs == null)) {\n+        if (!wrap || rs == null)\n             return rs;\n-        }\n-\n         return new DelegatingResultSet(rs, this);\n     }\n \n     /**\n-     *  Return the wrapped statement.\n+     * Return the wrapped statement.\n      */\n     public Statement getDelegate() {\n         return _stmnt;\n     }\n \n     /**\n-     *  Return the base underlying data store statement.\n+     * Return the base underlying data store statement.\n      */\n     public Statement getInnermostDelegate() {\n-        return (_del == null) ? _stmnt : _del.getInnermostDelegate();\n+        return(_del == null) ? _stmnt : _del.getInnermostDelegate();\n     }\n \n     public int hashCode() {\n         return getInnermostDelegate().hashCode();\n     }\n \n     public boolean equals(Object other) {\n-        if (other == this) {\n+        if (other == this)\n             return true;\n-        }\n-\n-        if (other instanceof DelegatingStatement) {\n+        if (other instanceof DelegatingStatement)\n             other = ((DelegatingStatement) other).getInnermostDelegate();\n-        }\n-\n         return getInnermostDelegate().equals(other);\n     }\n \n     public String toString() {\n         StringBuffer buf = new StringBuffer(\"stmnt \").append(hashCode());\n         appendInfo(buf);\n-\n         return buf.toString();\n     }\n \n     protected void appendInfo(StringBuffer buf) {\n-        if (_del != null) {\n+        if (_del != null)\n             _del.appendInfo(buf);\n-        }\n     }\n \n     public ResultSet executeQuery(String str) throws SQLException {\n         return executeQuery(str, true);\n     }\n \n     /**\n-      *  Execute the query, with the option of not wrapping it in a\n-     *  {@link DelegatingResultSet}, which is the default.\n+     * Execute the query, with the option of not wrapping it in a\n+     * {@link DelegatingResultSet}, which is the default.\n      */\n     protected ResultSet executeQuery(String sql, boolean wrap)\n         throws SQLException {\n         ResultSet rs;\n-\n-        if (_del != null) {\n+        if (_del != null)\n             rs = _del.executeQuery(sql, false);\n-        } else {\n+        else\n             rs = _stmnt.executeQuery(sql);\n-        }\n-\n         return wrapResult(rs, wrap);\n     }\n \n@@ -177,18 +159,15 @@ public ResultSet getResultSet() throws SQLException {\n     }\n \n     /**\n-      *  Get the last result set, with the option of not wrapping it in a\n-     *  {@link DelegatingResultSet}, which is the default.\n+     * Get the last result set, with the option of not wrapping it in a\n+     * {@link DelegatingResultSet}, which is the default.\n      */\n     protected ResultSet getResultSet(boolean wrap) throws SQLException {\n         ResultSet rs;\n-\n-        if (_del != null) {\n+        if (_del != null)\n             rs = _del.getResultSet(false);\n-        } else {\n+        else\n             rs = _stmnt.getResultSet();\n-        }\n-\n         return wrapResult(rs, wrap);\n     }\n \n@@ -240,8 +219,9 @@ public Connection getConnection() throws SQLException {\n         return _conn;\n     }\n \n-    // JDBC 3.0 (unsupported) method follow; these are required to be able \n+    // JDBC 3.0 (unsupported) method follow; these are required to be able\n     // to compile against JDK 1.4\n+\n     public boolean getMoreResults(int i) throws SQLException {\n         throw new UnsupportedOperationException();\n     }\n@@ -278,3 +258,4 @@ public int getResultSetHoldability() throws SQLException {\n         throw new UnsupportedOperationException();\n     }\n }\n+"},{"sha":"4deb579d7e29a5aa1d5c2d99068e4c612b47ac5f","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/JDBCEvent.java","status":"modified","additions":37,"deletions":40,"changes":77,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/JDBCEvent.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/JDBCEvent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/JDBCEvent.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74","patch":"@@ -1,13 +1,10 @@\n /*\n  * Copyright 2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *  Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n@@ -16,88 +13,87 @@\n package org.apache.openjpa.lib.jdbc;\n \n import java.sql.*;\n-\n import java.util.*;\n \n-\n /**\n- *  <p>A JDBC event.  The event source will be the connection.</p>\n- *\n- *  @see JDBCListener\n- *  @author Marc Prud'hommeaux\n- *  @author Abe White\n+ * A JDBC event. The event source will be the connection.\n+ * \n+ * @see JDBCListener\n+ * @author Marc Prud'hommeaux\n+ * @author Abe White\n  */\n public class JDBCEvent extends EventObject {\n     /**\n-     *  Type code indicating that a {@link Statement} is being prepared.\n+     * Type code indicating that a {@link Statement} is being prepared.\n      */\n     public static final short BEFORE_PREPARE_STATEMENT = 1;\n \n     /**\n-     *  Type code indicating that a {@link Statement} is being prepared.\n+     * Type code indicating that a {@link Statement} is being prepared.\n      */\n     public static final short AFTER_PREPARE_STATEMENT = 2;\n \n     /**\n-     *  Type code indicating that a {@link Statement} is being created.\n+     * Type code indicating that a {@link Statement} is being created.\n      */\n     public static final short BEFORE_CREATE_STATEMENT = 3;\n \n     /**\n-     *  Type code indicating that a {@link Statement} is being created.\n+     * Type code indicating that a {@link Statement} is being created.\n      */\n     public static final short AFTER_CREATE_STATEMENT = 4;\n \n     /**\n-     *  Type code indicating that a {@link Statement} is about to be executed.\n+     * Type code indicating that a {@link Statement} is about to be executed.\n      */\n     public static final short BEFORE_EXECUTE_STATEMENT = 5;\n \n     /**\n-     *  Type code indicating that a {@link Statement} completed execution.\n+     * Type code indicating that a {@link Statement} completed execution.\n      */\n     public static final short AFTER_EXECUTE_STATEMENT = 6;\n \n     /**\n-     *  Type code indicating that a {@link Connection} is about to be committed.\n+     * Type code indicating that a {@link Connection} is about to be committed.\n      */\n     public static final short BEFORE_COMMIT = 7;\n \n     /**\n-     *  Type code indicating that a {@link Connection} was just committed.\n+     * Type code indicating that a {@link Connection} was just committed.\n      */\n     public static final short AFTER_COMMIT = 8;\n \n     /**\n-     *  Type code indicating that a rollback is about to occur.\n+     * Type code indicating that a rollback is about to occur.\n      */\n     public static final short BEFORE_ROLLBACK = 9;\n \n     /**\n-     *  Type code indicating that a rollback just occured.\n+     * Type code indicating that a rollback just occured.\n      */\n     public static final short AFTER_ROLLBACK = 10;\n \n     /**\n-     *  Type code indicating that a connection was obtained.  This does\n-     *  not necessarily mean that the connection is new if pooling is enabled.\n+     * Type code indicating that a connection was obtained. This does\n+     * not necessarily mean that the connection is new if pooling is enabled.\n      */\n     public static final short AFTER_CONNECT = 11;\n \n     /**\n-     *  Type code indicating that a connection was closed.  This does\n-     *  not necessarily mean that the underlying database connection was\n-     *  severed if pooling is enabled.\n+     * Type code indicating that a connection was closed. This does\n+     * not necessarily mean that the underlying database connection was\n+     * severed if pooling is enabled.\n      */\n     public static final short BEFORE_CLOSE = 12;\n+\n     private final short type;\n     private final long time;\n     private final String sql;\n     private final JDBCEvent associatedEvent;\n     private final transient Statement statement;\n \n     /**\n-     *  Constructor.\n+     * Constructor.\n      */\n     public JDBCEvent(Connection source, short type, JDBCEvent associatedEvent,\n         Statement statement, String sql) {\n@@ -110,48 +106,49 @@ public JDBCEvent(Connection source, short type, JDBCEvent associatedEvent,\n     }\n \n     /**\n-     *  Return the event's type code.\n+     * Return the event's type code.\n      */\n     public final short getType() {\n         return type;\n     }\n \n     /**\n-     *  Return the Connection for this event.\n+     * Return the Connection for this event.\n      */\n     public final Connection getConnection() {\n-        return (Connection) getSource();\n+        return(Connection) getSource();\n     }\n \n     /**\n-     *  Return the time the event was constructed.\n+     * Return the time the event was constructed.\n      */\n     public final long getTime() {\n         return time;\n     }\n \n     /**\n-     *  Return the associated {@link JDBCEvent} for this event.\n-     *  For AFTER_XXX events, this will typically be the JDBCEvent\n-     *  that was created in the        BEFORE_XXX stage. This may be null when\n-     *  an association is not appropriate for the event.\n+     * Return the associated {@link JDBCEvent} for this event.\n+     * For AFTER_XXX events, this will typically be the JDBCEvent\n+     * that was created in the BEFORE_XXX stage. This may be null when\n+     * an association is not appropriate for the event.\n      */\n     public final JDBCEvent getAssociatedEvent() {\n         return associatedEvent;\n     }\n \n     /**\n-     *  Return the SQL associated with this event; may be null.\n+     * Return the SQL associated with this event; may be null.\n      */\n     public final String getSQL() {\n         return sql;\n     }\n \n     /**\n-     *  Return the Statement for this event, may be null for events\n-     *  unrelated to Statement execution.\n+     * Return the Statement for this event, may be null for events\n+     * unrelated to Statement execution.\n      */\n     public final Statement getStatement() {\n         return statement;\n     }\n }\n+"},{"sha":"67759db85227d2f6bfa0a2739600863786e2af01","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/JDBCEventConnectionDecorator.java","status":"modified","additions":77,"deletions":119,"changes":196,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/JDBCEventConnectionDecorator.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/JDBCEventConnectionDecorator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/JDBCEventConnectionDecorator.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74","patch":"@@ -1,133 +1,99 @@\n /*\n  * Copyright 2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *  Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n package org.apache.openjpa.lib.jdbc;\n \n-import org.apache.openjpa.lib.util.concurrent.*;\n-\n import java.sql.*;\n-\n import java.util.*;\n-\n import javax.sql.*;\n-\n+import org.apache.openjpa.lib.util.concurrent.*;\n \n /**\n- *  <p>Manages the firing of {@link JDBCEvent}s.</p>\n- *\n- *  @author Abe White\n- *  @nojavadoc */\n+ * Manages the firing of {@link JDBCEvent}s.\n+ * \n+ * @author Abe White\n+ * @nojavadoc\n+ */\n public class JDBCEventConnectionDecorator extends AbstractConcurrentEventManager\n     implements ConnectionDecorator {\n     public Connection decorate(Connection conn) {\n-        if (!hasListeners()) {\n+        if (!hasListeners())\n             return conn;\n-        }\n-\n         return new EventConnection(conn);\n     }\n \n     /**\n-     *  Fire the given event to all listeners.  Prevents creation of an\n-     *  event object when there are no listeners.\n+     * Fire the given event to all listeners. Prevents creation of an\n+     * event object when there are no listeners.\n      */\n     private JDBCEvent fireEvent(Connection source, short type,\n         JDBCEvent associatedEvent, Statement stmnt, String sql) {\n-        if (!hasListeners()) {\n+        if (!hasListeners())\n             return null;\n-        }\n \n-        JDBCEvent event = new JDBCEvent(source, type, associatedEvent, stmnt,\n-                sql);\n+        JDBCEvent event = new JDBCEvent(source, type, associatedEvent,\n+            stmnt, sql);\n         fireEvent(event);\n-\n         return event;\n     }\n \n     /**\n-     *  Fire the given event to all listeners.\n+     * Fire the given event to all listeners.\n      */\n     protected void fireEvent(Object event, Object listener) {\n         JDBCListener listen = (JDBCListener) listener;\n         JDBCEvent ev = (JDBCEvent) event;\n-\n         switch (ev.getType()) {\n         case JDBCEvent.BEFORE_PREPARE_STATEMENT:\n             listen.beforePrepareStatement(ev);\n-\n             break;\n-\n         case JDBCEvent.AFTER_PREPARE_STATEMENT:\n             listen.afterPrepareStatement(ev);\n-\n             break;\n-\n         case JDBCEvent.BEFORE_CREATE_STATEMENT:\n             listen.beforeCreateStatement(ev);\n-\n             break;\n-\n         case JDBCEvent.AFTER_CREATE_STATEMENT:\n             listen.afterCreateStatement(ev);\n-\n             break;\n-\n         case JDBCEvent.BEFORE_EXECUTE_STATEMENT:\n             listen.beforeExecuteStatement(ev);\n-\n             break;\n-\n         case JDBCEvent.AFTER_EXECUTE_STATEMENT:\n             listen.afterExecuteStatement(ev);\n-\n             break;\n-\n         case JDBCEvent.BEFORE_COMMIT:\n             listen.beforeCommit(ev);\n-\n             break;\n-\n         case JDBCEvent.AFTER_COMMIT:\n             listen.afterCommit(ev);\n-\n             break;\n-\n         case JDBCEvent.BEFORE_ROLLBACK:\n             listen.beforeRollback(ev);\n-\n             break;\n-\n         case JDBCEvent.AFTER_ROLLBACK:\n             listen.afterRollback(ev);\n-\n             break;\n-\n         case JDBCEvent.AFTER_CONNECT:\n             listen.afterConnect(ev);\n-\n             break;\n-\n         case JDBCEvent.BEFORE_CLOSE:\n             listen.beforeClose(ev);\n-\n             break;\n         }\n     }\n \n     /**\n-     *  Fires events as appropriate.\n+     * Fires events as appropriate.\n      */\n     private class EventConnection extends DelegatingConnection {\n         public EventConnection(Connection conn) {\n@@ -137,108 +103,104 @@ public EventConnection(Connection conn) {\n \n         public void commit() throws SQLException {\n             JDBCEvent before = fireEvent(getDelegate(),\n-                    JDBCEvent.BEFORE_COMMIT, null, null, null);\n-\n+                JDBCEvent.BEFORE_COMMIT, null, null, null);\n             try {\n                 super.commit();\n-            } finally {\n-                fireEvent(getDelegate(), JDBCEvent.AFTER_COMMIT, before, null,\n-                    null);\n+            }\n+            finally {\n+                fireEvent(getDelegate(), JDBCEvent.AFTER_COMMIT, before,\n+                    null, null);\n             }\n         }\n \n         public void rollback() throws SQLException {\n             JDBCEvent before = fireEvent(getDelegate(),\n-                    JDBCEvent.BEFORE_ROLLBACK, null, null, null);\n-\n+                JDBCEvent.BEFORE_ROLLBACK, null, null, null);\n             try {\n                 super.rollback();\n-            } finally {\n+            }\n+            finally {\n                 fireEvent(getDelegate(), JDBCEvent.AFTER_ROLLBACK, before,\n                     null, null);\n             }\n         }\n \n-        protected Statement createStatement(boolean wrap)\n-            throws SQLException {\n+        protected Statement createStatement(boolean wrap) throws SQLException {\n             JDBCEvent before = fireEvent(getDelegate(),\n-                    JDBCEvent.BEFORE_CREATE_STATEMENT, null, null, null);\n+                JDBCEvent.BEFORE_CREATE_STATEMENT, null, null, null);\n             Statement stmnt = null;\n-\n             try {\n                 stmnt = new EventStatement(super.createStatement(false),\n-                        EventConnection.this);\n-            } finally {\n+                    EventConnection.this);\n+            }\n+            finally {\n                 fireEvent(getDelegate(), JDBCEvent.AFTER_CREATE_STATEMENT,\n                     before, stmnt, null);\n             }\n-\n             return stmnt;\n         }\n \n         protected Statement createStatement(int rsType, int rsConcur,\n             boolean wrap) throws SQLException {\n             JDBCEvent before = fireEvent(getDelegate(),\n-                    JDBCEvent.BEFORE_CREATE_STATEMENT, null, null, null);\n+                JDBCEvent.BEFORE_CREATE_STATEMENT, null, null, null);\n             Statement stmnt = null;\n-\n             try {\n-                stmnt = new EventStatement(super.createStatement(rsType,\n-                            rsConcur, false), EventConnection.this);\n-            } finally {\n+                stmnt = new EventStatement(super.createStatement\n+                    (rsType, rsConcur, false), EventConnection.this);\n+            }\n+            finally {\n                 fireEvent(getDelegate(), JDBCEvent.AFTER_CREATE_STATEMENT,\n                     before, stmnt, null);\n             }\n-\n             return stmnt;\n         }\n \n         protected PreparedStatement prepareStatement(String sql, boolean wrap)\n             throws SQLException {\n             JDBCEvent before = fireEvent(getDelegate(),\n-                    JDBCEvent.BEFORE_PREPARE_STATEMENT, null, null, sql);\n+                JDBCEvent.BEFORE_PREPARE_STATEMENT, null, null, sql);\n             PreparedStatement stmnt = null;\n-\n             try {\n-                stmnt = new EventPreparedStatement(super.prepareStatement(sql,\n-                            false), EventConnection.this, sql);\n-            } finally {\n+                stmnt = new EventPreparedStatement(super.prepareStatement\n+                    (sql, false), EventConnection.this, sql);\n+            }\n+            finally {\n                 fireEvent(getDelegate(), JDBCEvent.AFTER_PREPARE_STATEMENT,\n                     before, stmnt, sql);\n             }\n-\n             return stmnt;\n         }\n \n         protected PreparedStatement prepareStatement(String sql, int rsType,\n             int rsConcur, boolean wrap) throws SQLException {\n             JDBCEvent before = fireEvent(getDelegate(),\n-                    JDBCEvent.BEFORE_PREPARE_STATEMENT, null, null, sql);\n+                JDBCEvent.BEFORE_PREPARE_STATEMENT, null, null, sql);\n             PreparedStatement stmnt = null;\n-\n             try {\n-                stmnt = new EventPreparedStatement(super.prepareStatement(sql,\n-                            rsType, rsConcur, false), EventConnection.this, sql);\n-            } finally {\n+                stmnt = new EventPreparedStatement(super.prepareStatement\n+                    (sql, rsType, rsConcur, false), EventConnection.this, sql);\n+            }\n+            finally {\n                 fireEvent(getDelegate(), JDBCEvent.AFTER_PREPARE_STATEMENT,\n                     before, stmnt, sql);\n             }\n-\n             return stmnt;\n         }\n \n         public void close() throws SQLException {\n             try {\n-                fireEvent(getDelegate(), JDBCEvent.BEFORE_CLOSE, null, null,\n-                    null);\n-            } finally {\n+                fireEvent(getDelegate(), JDBCEvent.BEFORE_CLOSE,\n+                    null, null, null);\n+            }\n+            finally {\n                 super.close();\n             }\n         }\n     }\n \n     /**\n-     *  Fires events as appropriate.\n+     * Fires events as appropriate.\n      */\n     private class EventPreparedStatement extends DelegatingPreparedStatement {\n         private final EventConnection _conn;\n@@ -253,50 +215,46 @@ public EventPreparedStatement(PreparedStatement ps,\n \n         public int executeUpdate() throws SQLException {\n             JDBCEvent before = fireEvent(_conn.getDelegate(),\n-                    JDBCEvent.BEFORE_EXECUTE_STATEMENT, null, getDelegate(),\n-                    _sql);\n-\n+                JDBCEvent.BEFORE_EXECUTE_STATEMENT, null, getDelegate(), _sql);\n             try {\n                 return super.executeUpdate();\n-            } finally {\n+            }\n+            finally {\n                 fireEvent(_conn.getDelegate(),\n-                    JDBCEvent.AFTER_EXECUTE_STATEMENT, before, getDelegate(),\n-                    _sql);\n+                    JDBCEvent.AFTER_EXECUTE_STATEMENT, before,\n+                    getDelegate(), _sql);\n             }\n         }\n \n-        protected ResultSet executeQuery(boolean wrap)\n-            throws SQLException {\n+        protected ResultSet executeQuery(boolean wrap) throws SQLException {\n             JDBCEvent before = fireEvent(_conn.getDelegate(),\n-                    JDBCEvent.BEFORE_EXECUTE_STATEMENT, null, getDelegate(),\n-                    _sql);\n-\n+                JDBCEvent.BEFORE_EXECUTE_STATEMENT, null, getDelegate(), _sql);\n             try {\n                 return super.executeQuery(wrap);\n-            } finally {\n+            }\n+            finally {\n                 fireEvent(_conn.getDelegate(),\n-                    JDBCEvent.AFTER_EXECUTE_STATEMENT, before, getDelegate(),\n-                    _sql);\n+                    JDBCEvent.AFTER_EXECUTE_STATEMENT, before,\n+                    getDelegate(), _sql);\n             }\n         }\n \n         public int[] executeBatch() throws SQLException {\n             JDBCEvent before = fireEvent(_conn.getDelegate(),\n-                    JDBCEvent.BEFORE_EXECUTE_STATEMENT, null, getDelegate(),\n-                    _sql);\n-\n+                JDBCEvent.BEFORE_EXECUTE_STATEMENT, null, getDelegate(), _sql);\n             try {\n                 return super.executeBatch();\n-            } finally {\n+            }\n+            finally {\n                 fireEvent(_conn.getDelegate(),\n-                    JDBCEvent.AFTER_EXECUTE_STATEMENT, before, getDelegate(),\n-                    _sql);\n+                    JDBCEvent.AFTER_EXECUTE_STATEMENT, before,\n+                    getDelegate(), _sql);\n             }\n         }\n     }\n \n     /**\n-     *  Fires events as appropriate.\n+     * Fires events as appropriate.\n      */\n     private class EventStatement extends DelegatingStatement {\n         private final EventConnection _conn;\n@@ -308,28 +266,28 @@ public EventStatement(Statement stmnt, EventConnection conn) {\n \n         public int executeUpdate(String sql) throws SQLException {\n             JDBCEvent before = fireEvent(_conn.getDelegate(),\n-                    JDBCEvent.BEFORE_EXECUTE_STATEMENT, null, getDelegate(), sql);\n-\n+                JDBCEvent.BEFORE_EXECUTE_STATEMENT, null, getDelegate(), sql);\n             try {\n                 return super.executeUpdate(sql);\n-            } finally {\n+            }\n+            finally {\n                 fireEvent(_conn.getDelegate(),\n-                    JDBCEvent.AFTER_EXECUTE_STATEMENT, before, getDelegate(),\n-                    sql);\n+                    JDBCEvent.AFTER_EXECUTE_STATEMENT, before,\n+                    getDelegate(), sql);\n             }\n         }\n \n         protected ResultSet executeQuery(String sql, boolean wrap)\n             throws SQLException {\n             JDBCEvent before = fireEvent(_conn.getDelegate(),\n-                    JDBCEvent.BEFORE_EXECUTE_STATEMENT, null, getDelegate(), sql);\n-\n+                JDBCEvent.BEFORE_EXECUTE_STATEMENT, null, getDelegate(), sql);\n             try {\n                 return super.executeQuery(sql, wrap);\n-            } finally {\n+            }\n+            finally {\n                 fireEvent(_conn.getDelegate(),\n-                    JDBCEvent.AFTER_EXECUTE_STATEMENT, before, getDelegate(),\n-                    sql);\n+                    JDBCEvent.AFTER_EXECUTE_STATEMENT, before,\n+                    getDelegate(), sql);\n             }\n         }\n     }"},{"sha":"d339897937b16473a9123842226a8c0f0ab914da","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/JDBCListener.java","status":"modified","additions":21,"deletions":24,"changes":45,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/JDBCListener.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/JDBCListener.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/JDBCListener.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74","patch":"@@ -1,86 +1,83 @@\n /*\n  * Copyright 2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *  Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n package org.apache.openjpa.lib.jdbc;\n \n-\n /**\n- *  A listener for all {@link JDBCEvent}s that occur.\n- *\n- *  @see AbstractJDBCListener\n- *  @author Marc Prud'hommeaux\n- *  @author Abe White\n+ * A listener for all {@link JDBCEvent}s that occur.\n+ * \n+ * @see AbstractJDBCListener\n+ * @author Marc Prud'hommeaux\n+ * @author Abe White\n  */\n public interface JDBCListener {\n     /**\n-     *  @see JDBCEvent#BEFORE_PREPARE_STATEMENT\n+     * @see JDBCEvent#BEFORE_PREPARE_STATEMENT\n      */\n     public void beforePrepareStatement(JDBCEvent event);\n \n     /**\n-     *  @see JDBCEvent#AFTER_PREPARE_STATEMENT\n+     * @see JDBCEvent#AFTER_PREPARE_STATEMENT\n      */\n     public void afterPrepareStatement(JDBCEvent event);\n \n     /**\n-     *  @see JDBCEvent#BEFORE_CREATE_STATEMENT\n+     * @see JDBCEvent#BEFORE_CREATE_STATEMENT\n      */\n     public void beforeCreateStatement(JDBCEvent event);\n \n     /**\n-     *  @see JDBCEvent#AFTER_CREATE_STATEMENT\n+     * @see JDBCEvent#AFTER_CREATE_STATEMENT\n      */\n     public void afterCreateStatement(JDBCEvent event);\n \n     /**\n-     *  @see JDBCEvent#BEFORE_EXECUTE_STATEMENT\n+     * @see JDBCEvent#BEFORE_EXECUTE_STATEMENT\n      */\n     public void beforeExecuteStatement(JDBCEvent event);\n \n     /**\n-     *  @see JDBCEvent#AFTER_EXECUTE_STATEMENT\n+     * @see JDBCEvent#AFTER_EXECUTE_STATEMENT\n      */\n     public void afterExecuteStatement(JDBCEvent event);\n \n     /**\n-     *  @see JDBCEvent#BEFORE_COMMIT\n+     * @see JDBCEvent#BEFORE_COMMIT\n      */\n     public void beforeCommit(JDBCEvent event);\n \n     /**\n-     *  @see JDBCEvent#AFTER_COMMIT\n+     * @see JDBCEvent#AFTER_COMMIT\n      */\n     public void afterCommit(JDBCEvent event);\n \n     /**\n-     *  @see JDBCEvent#BEFORE_ROLLBACK\n+     * @see JDBCEvent#BEFORE_ROLLBACK\n      */\n     public void beforeRollback(JDBCEvent event);\n \n     /**\n-     *  @see JDBCEvent#AFTER_ROLLBACK\n+     * @see JDBCEvent#AFTER_ROLLBACK\n      */\n     public void afterRollback(JDBCEvent event);\n \n     /**\n-     *  @see JDBCEvent#AFTER_CONNECT\n+     * @see JDBCEvent#AFTER_CONNECT\n      */\n     public void afterConnect(JDBCEvent event);\n \n     /**\n-     *  @see JDBCEvent#BEFORE_CLOSE\n+     * @see JDBCEvent#BEFORE_CLOSE\n      */\n     public void beforeClose(JDBCEvent event);\n }\n+"},{"sha":"6f5e8c0ded7e8f2e9b0c7d261b5877a091bb38d7","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator.java","status":"modified","additions":267,"deletions":401,"changes":668,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74","patch":"@@ -1,42 +1,35 @@\n /*\n  * Copyright 2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *  Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n package org.apache.openjpa.lib.jdbc;\n \n-import org.apache.openjpa.lib.log.*;\n-\n import java.io.*;\n-\n import java.math.*;\n-\n import java.sql.*;\n import java.sql.Date;\n-\n import java.util.*;\n-\n import javax.sql.*;\n-\n+import org.apache.openjpa.lib.log.*;\n \n /**\n- *  A {@link ConnectionDecorator} that creates logging connections and\n- *  {@link ReportingSQLException}s.\n- *\n- *  @author Marc Prud'hommeaux\n- *  @nojavadoc */\n+ * A {@link ConnectionDecorator} that creates logging connections and\n+ * {@link ReportingSQLException}s.\n+ * \n+ * @author Marc Prud'hommeaux\n+ * @nojavadoc\n+ */\n public class LoggingConnectionDecorator implements ConnectionDecorator {\n     private static final String SEP = System.getProperty(\"line.separator\");\n+\n     private static final int WARN_IGNORE = 0;\n     private static final int WARN_LOG_TRACE = 1;\n     private static final int WARN_LOG_INFO = 2;\n@@ -45,7 +38,6 @@\n     private static final int WARN_THROW = 5;\n     private static final int WARN_HANDLE = 6;\n     private static final String[] WARNING_ACTIONS = new String[7];\n-\n     static {\n         WARNING_ACTIONS[WARN_IGNORE] = \"ignore\";\n         WARNING_ACTIONS[WARN_LOG_TRACE] = \"trace\";\n@@ -65,101 +57,94 @@\n     private boolean _trackParameters = true;\n \n     /**\n-     *  If set to <code>true</code>, pretty-print SQL by running it\n-     *  through {@link SQLFormatter#prettyPrint}. If\n-     *  <code>false</code>, don't pretty-print, and output SQL logs in\n-     *  a single line. Pretty-printed SQL can be easier for a human to\n-     *  read, but is harder to parse with tools like grep.\n+     * If set to <code>true</code>, pretty-print SQL by running it\n+     * through {@link SQLFormatter#prettyPrint}. If\n+     * <code>false</code>, don't pretty-print, and output SQL logs in\n+     * a single line. Pretty-printed SQL can be easier for a human to\n+     * read, but is harder to parse with tools like grep.\n      */\n     public void setPrettyPrint(boolean prettyPrint) {\n         _prettyPrint = prettyPrint;\n-\n-        if ((_formatter == null) && _prettyPrint) {\n+        if (_formatter == null && _prettyPrint) {\n             _formatter = new SQLFormatter();\n             _formatter.setLineLength(_prettyPrintLineLength);\n-        } else if (!_prettyPrint) {\n+        } else if (!_prettyPrint)\n             _formatter = null;\n-        }\n     }\n \n     /**\n-     *  @see {@link #setPrettyPrint}\n+     * @see {@link #setPrettyPrint}\n      */\n     public boolean getPrettyPrint() {\n         return _prettyPrint;\n     }\n \n     /**\n-     *  The number of characters to print per line when\n-     *  pretty-printing of SQL is enabled. Defaults to 60 to provide\n-     *  some space for any ant-related characters on the left of a\n-     *  standard 80-character display.\n+     * The number of characters to print per line when\n+     * pretty-printing of SQL is enabled. Defaults to 60 to provide\n+     * some space for any ant-related characters on the left of a\n+     * standard 80-character display.\n      */\n     public void setPrettyPrintLineLength(int length) {\n         _prettyPrintLineLength = length;\n-\n-        if (_formatter != null) {\n+        if (_formatter != null)\n             _formatter.setLineLength(length);\n-        }\n     }\n \n     /**\n-     *  @see {@link #setPrettyPrintLineLength}\n+     * @see {@link #setPrettyPrintLineLength}\n      */\n     public int getPrettyPrintLineLength() {\n         return _prettyPrintLineLength;\n     }\n \n     /**\n-     *  Whether to track parameters for the purposes of reporting exceptions.\n+     * Whether to track parameters for the purposes of reporting exceptions.\n      */\n     public void setTrackParameters(boolean trackParameters) {\n         _trackParameters = trackParameters;\n     }\n \n     /**\n-     *  Whether to track parameters for the purposes of reporting exceptions.\n+     * Whether to track parameters for the purposes of reporting exceptions.\n      */\n     public boolean getTrackParameters() {\n         return _trackParameters;\n     }\n \n     /**\n-     *  What to do with SQL warnings.\n+     * What to do with SQL warnings.\n      */\n     public void setWarningAction(String warningAction) {\n         int index = Arrays.asList(WARNING_ACTIONS).indexOf(warningAction);\n-\n-        if (index < 0) {\n+        if (index < 0)\n             index = WARN_IGNORE;\n-        }\n-\n         _warningAction = index;\n     }\n \n     /**\n-     *  What to do with SQL warnings.\n+     * What to do with SQL warnings.\n      */\n     public String getWarningAction() {\n         return WARNING_ACTIONS[_warningAction];\n     }\n \n     /**\n-     *  What to do with SQL warnings.\n+     * What to do with SQL warnings.\n      */\n     public void setWarningHandler(SQLWarningHandler warningHandler) {\n         _warningHandler = warningHandler;\n     }\n \n     /**\n-     *  What to do with SQL warnings.\n+     * What to do with SQL warnings.\n      */\n     public SQLWarningHandler getWarningHandler() {\n         return _warningHandler;\n     }\n \n     /**\n-     *  The log to write to.\n+     * The log to write to.\n      */\n     public DataSourceLogs getLogs() {\n         return _logs;\n@@ -170,33 +155,33 @@ public Connection decorate(Connection conn) throws SQLException {\n     }\n \n     private SQLException wrap(SQLException sqle, Statement stmnt) {\n-        if (sqle instanceof ReportingSQLException) {\n-            return (ReportingSQLException) sqle;\n-        }\n+        if (sqle instanceof ReportingSQLException)\n+            return(ReportingSQLException)sqle;\n \n         return new ReportingSQLException(sqle, stmnt);\n     }\n \n     private SQLException wrap(SQLException sqle, String sql) {\n-        if (sqle instanceof ReportingSQLException) {\n-            return (ReportingSQLException) sqle;\n-        }\n+        if (sqle instanceof ReportingSQLException)\n+            return(ReportingSQLException)sqle;\n \n         return new ReportingSQLException(sqle, sql);\n     }\n \n-    private static String getExceptionMessage(SQLException sqle, Statement stmnt) {\n+    private static String getExceptionMessage(SQLException sqle,\n+        Statement stmnt) {\n         try {\n-            return sqle.getMessage() + \" {\" + stmnt + \"} \" + \"[code=\" +\n-            sqle.getErrorCode() + \", state=\" + sqle.getSQLState() + \"]\";\n+            return sqle.getMessage() + \" {\" + stmnt + \"} \"\n+                + \"[code=\" + sqle.getErrorCode() + \", state=\"\n+                + sqle.getSQLState() + \"]\";\n         } catch (Throwable t) {\n             return sqle.getMessage();\n         }\n     }\n \n     /**\n-     *  Interface that allows customization of what to do when\n-     *  {@link SQLWarning}s occur.\n+     * Interface that allows customization of what to do when\n+     * {@link SQLWarning}s occur.\n      */\n     public static interface SQLWarningHandler {\n         public void handleWarning(SQLWarning warning) throws SQLException;\n@@ -211,7 +196,6 @@ protected PreparedStatement prepareStatement(String sql, boolean wrap)\n             throws SQLException {\n             try {\n                 PreparedStatement stmnt = super.prepareStatement(sql, false);\n-\n                 return new LoggingPreparedStatement(stmnt, sql);\n             } catch (SQLException se) {\n                 throw wrap(se, sql);\n@@ -221,26 +205,22 @@ protected PreparedStatement prepareStatement(String sql, boolean wrap)\n         protected PreparedStatement prepareStatement(String sql, int rsType,\n             int rsConcur, boolean wrap) throws SQLException {\n             try {\n-                PreparedStatement stmnt = super.prepareStatement(sql, rsType,\n-                        rsConcur, false);\n-\n+                PreparedStatement stmnt = super.prepareStatement\n+                    (sql, rsType, rsConcur, false);\n                 return new LoggingPreparedStatement(stmnt, sql);\n             } catch (SQLException se) {\n                 throw wrap(se, sql);\n             }\n         }\n \n-        protected Statement createStatement(boolean wrap)\n-            throws SQLException {\n+        protected Statement createStatement(boolean wrap) throws SQLException {\n             Statement stmnt = super.createStatement(false);\n-\n             return new LoggingStatement(stmnt);\n         }\n \n         protected Statement createStatement(int type, int concurrency,\n             boolean wrap) throws SQLException {\n             Statement stmnt = super.createStatement(type, concurrency, false);\n-\n             return new LoggingStatement(stmnt);\n         }\n \n@@ -249,11 +229,10 @@ public void commit() throws SQLException {\n \n             try {\n                 super.commit();\n-            } finally {\n-                if (_logs.isJDBCEnabled()) {\n+            }\n+            finally {\n+                if (_logs.isJDBCEnabled())\n                     _logs.logJDBC(\"commit\", start, this);\n-                }\n-\n                 handleSQLWarning();\n             }\n         }\n@@ -263,11 +242,10 @@ public void rollback() throws SQLException {\n \n             try {\n                 super.rollback();\n-            } finally {\n-                if (_logs.isJDBCEnabled()) {\n+            }\n+            finally {\n+                if (_logs.isJDBCEnabled())\n                     _logs.logJDBC(\"rollback\", start, this);\n-                }\n-\n                 handleSQLWarning();\n             }\n         }\n@@ -277,82 +255,71 @@ public void close() throws SQLException {\n \n             try {\n                 super.close();\n-            } finally {\n-                if (_logs.isJDBCEnabled()) {\n+            }\n+            finally {\n+                if (_logs.isJDBCEnabled())\n                     _logs.logJDBC(\"close\", start, this);\n-                }\n             }\n         }\n \n         public Savepoint setSavepoint() throws SQLException {\n             long start = System.currentTimeMillis();\n-\n             try {\n                 return super.setSavepoint();\n-            } finally {\n-                if (_logs.isJDBCEnabled()) {\n+            }\n+            finally {\n+                if (_logs.isJDBCEnabled())\n                     _logs.logJDBC(\"savepoint\", start, this);\n-                }\n-\n                 handleSQLWarning();\n             }\n         }\n \n         public Savepoint setSavepoint(String name) throws SQLException {\n             long start = System.currentTimeMillis();\n-\n             try {\n                 return super.setSavepoint(name);\n-            } finally {\n-                if (_logs.isJDBCEnabled()) {\n+            }\n+            finally {\n+                if (_logs.isJDBCEnabled())\n                     _logs.logJDBC(\"savepoint: \" + name, start, this);\n-                }\n-\n                 handleSQLWarning();\n             }\n         }\n \n         public void rollback(Savepoint savepoint) throws SQLException {\n             long start = System.currentTimeMillis();\n-\n             try {\n                 super.rollback(savepoint);\n-            } finally {\n+            }\n+            finally {\n                 if (_logs.isJDBCEnabled()) {\n                     String name = null;\n-\n                     try {\n                         name = savepoint.getSavepointName();\n                     } catch (SQLException sqe) {\n                         name = String.valueOf(savepoint.getSavepointId());\n                     }\n-\n                     _logs.logJDBC(\"rollback: \" + name, start, this);\n                 }\n-\n                 handleSQLWarning();\n             }\n         }\n \n-        public void releaseSavepoint(Savepoint savepoint)\n-            throws SQLException {\n+        public void releaseSavepoint(Savepoint savepoint) throws SQLException {\n             long start = System.currentTimeMillis();\n-\n             try {\n                 super.releaseSavepoint(savepoint);\n-            } finally {\n+            }\n+            finally {\n                 if (_logs.isJDBCEnabled()) {\n                     String name = null;\n-\n                     try {\n                         name = savepoint.getSavepointName();\n                     } catch (SQLException sqe) {\n                         name = String.valueOf(savepoint.getSavepointId());\n                     }\n-\n                     _logs.logJDBC(\"release: \" + name, start, this);\n                 }\n-\n                 handleSQLWarning();\n             }\n         }\n@@ -361,21 +328,19 @@ protected Statement createStatement(int resultSetType,\n             int resultSetConcurrency, int resultSetHoldability, boolean wrap)\n             throws SQLException {\n             Statement stmnt = super.createStatement(resultSetType,\n-                    resultSetConcurrency, resultSetHoldability, false);\n+                resultSetConcurrency, resultSetHoldability, false);\n             handleSQLWarning();\n-\n             return new LoggingStatement(stmnt);\n         }\n \n         protected PreparedStatement prepareStatement(String sql,\n             int resultSetType, int resultSetConcurrency,\n             int resultSetHoldability, boolean wrap) throws SQLException {\n             try {\n-                PreparedStatement stmnt = super.prepareStatement(sql,\n-                        resultSetType, resultSetConcurrency,\n-                        resultSetHoldability, false);\n+                PreparedStatement stmnt = super.prepareStatement\n+                    (sql, resultSetType, resultSetConcurrency,\n+                    resultSetHoldability, false);\n                 handleSQLWarning();\n-\n                 return new LoggingPreparedStatement(stmnt, sql);\n             } catch (SQLException se) {\n                 throw wrap(se, sql);\n@@ -385,10 +350,9 @@ protected PreparedStatement prepareStatement(String sql,\n         protected PreparedStatement prepareStatement(String sql,\n             int autoGeneratedKeys, boolean wrap) throws SQLException {\n             try {\n-                PreparedStatement stmnt = super.prepareStatement(sql,\n-                        autoGeneratedKeys, false);\n+                PreparedStatement stmnt = super.prepareStatement\n+                    (sql, autoGeneratedKeys, false);\n                 handleSQLWarning();\n-\n                 return new LoggingPreparedStatement(stmnt, sql);\n             } catch (SQLException se) {\n                 throw wrap(se, sql);\n@@ -398,10 +362,9 @@ protected PreparedStatement prepareStatement(String sql,\n         protected PreparedStatement prepareStatement(String sql,\n             int[] columnIndexes, boolean wrap) throws SQLException {\n             try {\n-                PreparedStatement stmnt = super.prepareStatement(sql,\n-                        columnIndexes, false);\n+                PreparedStatement stmnt = super.prepareStatement\n+                    (sql, columnIndexes, false);\n                 handleSQLWarning();\n-\n                 return new LoggingPreparedStatement(stmnt, sql);\n             } catch (SQLException se) {\n                 throw wrap(se, sql);\n@@ -411,139 +374,109 @@ protected PreparedStatement prepareStatement(String sql,\n         protected PreparedStatement prepareStatement(String sql,\n             String[] columnNames, boolean wrap) throws SQLException {\n             try {\n-                PreparedStatement stmnt = super.prepareStatement(sql,\n-                        columnNames, false);\n+                PreparedStatement stmnt = super.prepareStatement\n+                    (sql, columnNames, false);\n                 handleSQLWarning();\n-\n                 return new LoggingPreparedStatement(stmnt, sql);\n             } catch (SQLException se) {\n                 throw wrap(se, sql);\n             }\n         }\n \n-        protected DatabaseMetaData getMetaData(boolean wrap)\n-            throws SQLException {\n+        protected DatabaseMetaData getMetaData(boolean wrap) throws SQLException {\n             return new LoggingDatabaseMetaData(super.getMetaData(false));\n         }\n \n         /**\n-         *  Handle any {@link SQLWarning}s on the current {@link Connection}.\n-         *\n-         *  @see #handleSQLWarning(SQLWarning)\n+         * Handle any {@link SQLWarning}s on the current {@link Connection}.\n+         * \n+         * @see #handleSQLWarning(SQLWarning)\n          */\n         private void handleSQLWarning() throws SQLException {\n-            if (_warningAction == WARN_IGNORE) {\n+            if (_warningAction == WARN_IGNORE)\n                 return;\n-            }\n \n             try {\n                 handleSQLWarning(getWarnings());\n-            } finally {\n+            }\n+            finally {\n                 clearWarnings();\n             }\n         }\n \n         /**\n-         *  Handle any {@link SQLWarning}s on the specified {@link Statement}.\n-         *\n-         *  @see #handleSQLWarning(SQLWarning)\n+         * Handle any {@link SQLWarning}s on the specified {@link Statement}.\n+         * \n+         * @see #handleSQLWarning(SQLWarning)\n          */\n-        private void handleSQLWarning(Statement stmnt)\n-            throws SQLException {\n-            if (_warningAction == WARN_IGNORE) {\n+        private void handleSQLWarning(Statement stmnt) throws SQLException {\n+            if (_warningAction == WARN_IGNORE)\n                 return;\n-            }\n \n             try {\n                 handleSQLWarning(stmnt.getWarnings());\n-            } finally {\n+            }\n+            finally {\n                 stmnt.clearWarnings();\n             }\n         }\n \n         /**\n-         *  Handle any {@link SQLWarning}s on the specified {@link ResultSet}.\n-         *\n-         *  @see #handleSQLWarning(SQLWarning)\n+         * Handle any {@link SQLWarning}s on the specified {@link ResultSet}.\n+         * \n+         * @see #handleSQLWarning(SQLWarning)\n          */\n         private void handleSQLWarning(ResultSet rs) throws SQLException {\n-            if (_warningAction == WARN_IGNORE) {\n+            if (_warningAction == WARN_IGNORE)\n                 return;\n-            }\n \n             try {\n                 handleSQLWarning(rs.getWarnings());\n-            } finally {\n+            }\n+            finally {\n                 rs.clearWarnings();\n             }\n         }\n \n         /**\n-         *  Handle the specified {@link SQLWarning} depending on the\n-         *  setting of the {@link #setWarningAction} attribute.\n-         *\n-         *  @param warning  the warning to handle\n+         * Handle the specified {@link SQLWarning} depending on the\n+         * setting of the {@link #setWarningAction} attribute.\n+         * \n+         * @param warning the warning to handle\n          */\n         void handleSQLWarning(SQLWarning warning) throws SQLException {\n-            if (warning == null) {\n+            if (warning == null)\n                 return;\n-            }\n-\n-            if (_warningAction == WARN_IGNORE) {\n+            if (_warningAction == WARN_IGNORE)\n                 return;\n-            }\n \n             Log log = _logs.getJDBCLog();\n-\n-            for (; warning != null; warning = warning.getNextWarning()) {\n+            for ( ; warning != null; warning = warning.getNextWarning()) {\n                 switch (_warningAction) {\n                 case WARN_LOG_TRACE:\n-\n-                    if (log.isTraceEnabled()) {\n+                    if (log.isTraceEnabled())\n                         log.trace(warning);\n-                    }\n-\n                     break;\n-\n                 case WARN_LOG_INFO:\n-\n-                    if (log.isInfoEnabled()) {\n+                    if (log.isInfoEnabled())\n                         log.info(warning);\n-                    }\n-\n                     break;\n-\n                 case WARN_LOG_WARN:\n-\n-                    if (log.isWarnEnabled()) {\n+                    if (log.isWarnEnabled())\n                         log.warn(warning);\n-                    }\n-\n                     break;\n-\n                 case WARN_LOG_ERROR:\n-\n-                    if (log.isErrorEnabled()) {\n+                    if (log.isErrorEnabled())\n                         log.error(warning);\n-                    }\n-\n                     break;\n-\n                 case WARN_THROW:\n-\n                     // just throw it as if it were a SQLException\n                     throw warning;\n-\n                 case WARN_HANDLE:\n-\n-                    if (_warningHandler != null) {\n+                    if (_warningHandler != null)\n                         _warningHandler.handleWarning(warning);\n-                    }\n-\n                     break;\n-\n                 default:\n-\n                     // ignore\n                     break;\n                 }\n@@ -558,203 +491,175 @@ public LoggingDatabaseMetaData(DatabaseMetaData meta) {\n             public ResultSet getBestRowIdentifier(String catalog,\n                 String schema, String table, int scope, boolean nullable)\n                 throws SQLException {\n-                if (_logs.isJDBCEnabled()) {\n-                    _logs.logJDBC(\"getBestRowIdentifier: \" + catalog + \", \" +\n-                        schema + \", \" + table, LoggingConnection.this);\n-                }\n-\n-                return super.getBestRowIdentifier(catalog, schema, table,\n-                    scope, nullable);\n+                if (_logs.isJDBCEnabled())\n+                    _logs.logJDBC(\"getBestRowIdentifier: \"\n+                        + catalog + \", \" + schema + \", \" + table,\n+                        LoggingConnection.this);\n+                return super.getBestRowIdentifier(catalog, schema,\n+                    table, scope, nullable);\n             }\n \n             public ResultSet getCatalogs() throws SQLException {\n-                if (_logs.isJDBCEnabled()) {\n+                if (_logs.isJDBCEnabled())\n                     _logs.logJDBC(\"getCatalogs\", LoggingConnection.this);\n-                }\n-\n                 return super.getCatalogs();\n             }\n \n             public ResultSet getColumnPrivileges(String catalog, String schema,\n-                String table, String columnNamePattern)\n-                throws SQLException {\n-                if (_logs.isJDBCEnabled()) {\n-                    _logs.logJDBC(\"getColumnPrivileges: \" + catalog + \", \" +\n-                        schema + \", \" + table, LoggingConnection.this);\n-                }\n-\n-                return super.getColumnPrivileges(catalog, schema, table,\n-                    columnNamePattern);\n+                String table, String columnNamePattern) throws SQLException {\n+                if (_logs.isJDBCEnabled())\n+                    _logs.logJDBC(\"getColumnPrivileges: \"\n+                        + catalog + \", \" + schema + \", \" + table,\n+                        LoggingConnection.this);\n+                return super.getColumnPrivileges(catalog, schema,\n+                    table, columnNamePattern);\n             }\n \n             public ResultSet getColumns(String catalog, String schemaPattern,\n                 String tableNamePattern, String columnNamePattern)\n                 throws SQLException {\n-                if (_logs.isJDBCEnabled()) {\n-                    _logs.logJDBC(\"getColumns: \" + catalog + \", \" +\n-                        schemaPattern + \", \" + tableNamePattern + \", \" +\n-                        columnNamePattern, LoggingConnection.this);\n-                }\n-\n+                if (_logs.isJDBCEnabled())\n+                    _logs.logJDBC(\"getColumns: \"\n+                        + catalog + \", \" + schemaPattern + \", \"\n+                        + tableNamePattern + \", \" + columnNamePattern,\n+                        LoggingConnection.this);\n                 return super.getColumns(catalog, schemaPattern,\n                     tableNamePattern, columnNamePattern);\n             }\n \n             public ResultSet getCrossReference(String primaryCatalog,\n                 String primarySchema, String primaryTable,\n-                String foreignCatalog, String foreignSchema, String foreignTable)\n-                throws SQLException {\n-                if (_logs.isJDBCEnabled()) {\n-                    _logs.logJDBC(\"getCrossReference: \" + primaryCatalog +\n-                        \", \" + primarySchema + \", \" + primaryTable + \", \" +\n-                        foreignCatalog + \", \" + foreignSchema + \", \" +\n-                        foreignSchema, LoggingConnection.this);\n-                }\n-\n+                String foreignCatalog, String foreignSchema,\n+                String foreignTable) throws SQLException {\n+                if (_logs.isJDBCEnabled())\n+                    _logs.logJDBC(\"getCrossReference: \"\n+                        + primaryCatalog + \", \" + primarySchema + \", \"\n+                        + primaryTable + \", \" + foreignCatalog + \", \"\n+                        + foreignSchema + \", \" + foreignSchema,\n+                        LoggingConnection.this);\n                 return super.getCrossReference(primaryCatalog, primarySchema,\n                     primaryTable, foreignCatalog, foreignSchema, foreignTable);\n             }\n \n             public ResultSet getExportedKeys(String catalog, String schema,\n                 String table) throws SQLException {\n-                if (_logs.isJDBCEnabled()) {\n-                    _logs.logJDBC(\"getExportedKeys: \" + catalog + \", \" +\n-                        schema + \", \" + table, LoggingConnection.this);\n-                }\n-\n+                if (_logs.isJDBCEnabled())\n+                    _logs.logJDBC(\"getExportedKeys: \"\n+                        + catalog + \", \" + schema + \", \" + table,\n+                        LoggingConnection.this);\n                 return super.getExportedKeys(catalog, schema, table);\n             }\n \n             public ResultSet getImportedKeys(String catalog, String schema,\n                 String table) throws SQLException {\n-                if (_logs.isJDBCEnabled()) {\n-                    _logs.logJDBC(\"getImportedKeys: \" + catalog + \", \" +\n-                        schema + \", \" + table, LoggingConnection.this);\n-                }\n-\n+                if (_logs.isJDBCEnabled())\n+                    _logs.logJDBC(\"getImportedKeys: \"\n+                        + catalog + \", \" + schema + \", \" + table,\n+                        LoggingConnection.this);\n                 return super.getImportedKeys(catalog, schema, table);\n             }\n \n             public ResultSet getIndexInfo(String catalog, String schema,\n                 String table, boolean unique, boolean approximate)\n                 throws SQLException {\n-                if (_logs.isJDBCEnabled()) {\n-                    _logs.logJDBC(\"getIndexInfo: \" + catalog + \", \" + schema +\n-                        \", \" + table, LoggingConnection.this);\n-                }\n-\n+                if (_logs.isJDBCEnabled())\n+                    _logs.logJDBC(\"getIndexInfo: \"\n+                        + catalog + \", \" + schema + \", \" + table,\n+                        LoggingConnection.this);\n                 return super.getIndexInfo(catalog, schema, table, unique,\n                     approximate);\n             }\n \n             public ResultSet getPrimaryKeys(String catalog, String schema,\n                 String table) throws SQLException {\n-                if (_logs.isJDBCEnabled()) {\n-                    _logs.logJDBC(\"getPrimaryKeys: \" + catalog + \", \" + schema +\n-                        \", \" + table, LoggingConnection.this);\n-                }\n-\n+                if (_logs.isJDBCEnabled())\n+                    _logs.logJDBC(\"getPrimaryKeys: \"\n+                        + catalog + \", \" + schema + \", \" + table,\n+                        LoggingConnection.this);\n                 return super.getPrimaryKeys(catalog, schema, table);\n             }\n \n             public ResultSet getProcedureColumns(String catalog,\n                 String schemaPattern, String procedureNamePattern,\n                 String columnNamePattern) throws SQLException {\n-                if (_logs.isJDBCEnabled()) {\n-                    _logs.logJDBC(\"getProcedureColumns: \" + catalog + \", \" +\n-                        schemaPattern + \", \" + procedureNamePattern + \", \" +\n-                        columnNamePattern, LoggingConnection.this);\n-                }\n-\n+                if (_logs.isJDBCEnabled())\n+                    _logs.logJDBC(\"getProcedureColumns: \"\n+                        + catalog + \", \" + schemaPattern + \", \"\n+                        + procedureNamePattern + \", \" + columnNamePattern,\n+                        LoggingConnection.this);\n                 return super.getProcedureColumns(catalog, schemaPattern,\n                     procedureNamePattern, columnNamePattern);\n             }\n \n             public ResultSet getProcedures(String catalog,\n                 String schemaPattern, String procedureNamePattern)\n                 throws SQLException {\n-                if (_logs.isJDBCEnabled()) {\n-                    _logs.logJDBC(\"getProcedures: \" + catalog + \", \" +\n-                        schemaPattern + \", \" + procedureNamePattern,\n-                        LoggingConnection.this);\n-                }\n-\n+                if (_logs.isJDBCEnabled())\n+                    _logs.logJDBC(\"getProcedures: \"\n+                        + catalog + \", \" + schemaPattern + \", \"\n+                        + procedureNamePattern, LoggingConnection.this);\n                 return super.getProcedures(catalog, schemaPattern,\n                     procedureNamePattern);\n             }\n \n             public ResultSet getSchemas() throws SQLException {\n-                if (_logs.isJDBCEnabled()) {\n+                if (_logs.isJDBCEnabled())\n                     _logs.logJDBC(\"getSchemas\", LoggingConnection.this);\n-                }\n-\n                 return super.getSchemas();\n             }\n \n             public ResultSet getTablePrivileges(String catalog,\n                 String schemaPattern, String tableNamePattern)\n                 throws SQLException {\n-                if (_logs.isJDBCEnabled()) {\n+                if (_logs.isJDBCEnabled())\n                     _logs.logJDBC(\"getTablePrivileges\", LoggingConnection.this);\n-                }\n-\n                 return super.getTablePrivileges(catalog, schemaPattern,\n                     tableNamePattern);\n             }\n \n             public ResultSet getTables(String catalog, String schemaPattern,\n-                String tableNamePattern, String[] types)\n-                throws SQLException {\n-                if (_logs.isJDBCEnabled()) {\n-                    _logs.logJDBC(\"getTables: \" + catalog + \", \" +\n-                        schemaPattern + \", \" + tableNamePattern,\n-                        LoggingConnection.this);\n-                }\n-\n+                String tableNamePattern, String[] types) throws SQLException {\n+                if (_logs.isJDBCEnabled())\n+                    _logs.logJDBC(\"getTables: \"\n+                        + catalog + \", \" + schemaPattern + \", \"\n+                        + tableNamePattern, LoggingConnection.this);\n                 return super.getTables(catalog, schemaPattern,\n                     tableNamePattern, types);\n             }\n \n             public ResultSet getTableTypes() throws SQLException {\n-                if (_logs.isJDBCEnabled()) {\n+                if (_logs.isJDBCEnabled())\n                     _logs.logJDBC(\"getTableTypes\", LoggingConnection.this);\n-                }\n-\n                 return super.getTableTypes();\n             }\n \n             public ResultSet getTypeInfo() throws SQLException {\n-                if (_logs.isJDBCEnabled()) {\n+                if (_logs.isJDBCEnabled())\n                     _logs.logJDBC(\"getTypeInfo\", LoggingConnection.this);\n-                }\n-\n                 return super.getTypeInfo();\n             }\n \n             public ResultSet getUDTs(String catalog, String schemaPattern,\n                 String typeNamePattern, int[] types) throws SQLException {\n-                if (_logs.isJDBCEnabled()) {\n+                if (_logs.isJDBCEnabled())\n                     _logs.logJDBC(\"getUDTs\", LoggingConnection.this);\n-                }\n-\n-                return super.getUDTs(catalog, schemaPattern, typeNamePattern,\n-                    types);\n+                return super.getUDTs(catalog, schemaPattern,\n+                    typeNamePattern, types);\n             }\n \n-            public ResultSet getVersionColumns(String catalog, String schema,\n-                String table) throws SQLException {\n-                if (_logs.isJDBCEnabled()) {\n-                    _logs.logJDBC(\"getVersionColumns: \" + catalog + \", \" +\n-                        schema + \", \" + table, LoggingConnection.this);\n-                }\n-\n+            public ResultSet getVersionColumns(String catalog,\n+                String schema, String table) throws SQLException {\n+                if (_logs.isJDBCEnabled())\n+                    _logs.logJDBC(\"getVersionColumns: \"\n+                        + catalog + \", \" + schema + \", \" + table,\n+                        LoggingConnection.this);\n                 return super.getVersionColumns(catalog, schema, table);\n             }\n         }\n \n         /**\n-         *  Statement wrapper that logs SQL to the parent data source and\n-         *  remembers the last piece of SQL to be executed on it.\n+         * Statement wrapper that logs SQL to the parent data source and\n+         * remembers the last piece of SQL to be executed on it.\n          */\n         private class LoggingStatement extends DelegatingStatement {\n             private String _sql = null;\n@@ -766,7 +671,6 @@ public LoggingStatement(Statement stmnt) throws SQLException {\n             public void appendInfo(StringBuffer buf) {\n                 if (_sql != null) {\n                     buf.append(\" \");\n-\n                     if (_formatter != null) {\n                         buf.append(SEP);\n                         buf.append(_formatter.prettyPrint(_sql));\n@@ -777,18 +681,15 @@ public void appendInfo(StringBuffer buf) {\n             }\n \n             protected ResultSet wrapResult(ResultSet rs, boolean wrap) {\n-                if (!wrap || (rs == null)) {\n+                if (!wrap || rs == null)\n                     return super.wrapResult(rs, wrap);\n-                }\n-\n                 return new LoggingResultSet(rs, this);\n             }\n \n             public void cancel() throws SQLException {\n-                if (_logs.isJDBCEnabled()) {\n+                if (_logs.isJDBCEnabled())\n                     _logs.logJDBC(\"cancel \" + this + \": \" + _sql,\n                         LoggingConnection.this);\n-                }\n \n                 super.cancel();\n             }\n@@ -798,17 +699,15 @@ protected ResultSet executeQuery(String sql, boolean wrap)\n                 long start = System.currentTimeMillis();\n \n                 _sql = sql;\n-\n                 try {\n                     return super.executeQuery(sql, wrap);\n                 } catch (SQLException se) {\n                     throw wrap(se, LoggingStatement.this);\n-                } finally {\n-                    if (_logs.isSQLEnabled()) {\n+                }\n+                finally {\n+                    if (_logs.isSQLEnabled())\n                         _logs.logSQL(\"executing \" + this, start,\n                             LoggingConnection.this);\n-                    }\n-\n                     handleSQLWarning(LoggingStatement.this);\n                 }\n             }\n@@ -817,17 +716,15 @@ public int executeUpdate(String sql) throws SQLException {\n                 long start = System.currentTimeMillis();\n \n                 _sql = sql;\n-\n                 try {\n                     return super.executeUpdate(sql);\n                 } catch (SQLException se) {\n                     throw wrap(se, LoggingStatement.this);\n-                } finally {\n-                    if (_logs.isSQLEnabled()) {\n+                }\n+                finally {\n+                    if (_logs.isSQLEnabled())\n                         _logs.logSQL(\"executing \" + this, start,\n                             LoggingConnection.this);\n-                    }\n-\n                     handleSQLWarning(LoggingStatement.this);\n                 }\n             }\n@@ -836,17 +733,15 @@ public boolean execute(String sql) throws SQLException {\n                 long start = System.currentTimeMillis();\n \n                 _sql = sql;\n-\n                 try {\n                     return super.execute(sql);\n                 } catch (SQLException se) {\n                     throw wrap(se, LoggingStatement.this);\n-                } finally {\n-                    if (_logs.isSQLEnabled()) {\n+                }\n+                finally {\n+                    if (_logs.isSQLEnabled())\n                         _logs.logSQL(\"executing \" + this, start,\n                             LoggingConnection.this);\n-                    }\n-\n                     handleSQLWarning(LoggingStatement.this);\n                 }\n             }\n@@ -865,10 +760,8 @@ public LoggingPreparedStatement(PreparedStatement stmnt, String sql)\n             }\n \n             protected ResultSet wrapResult(ResultSet rs, boolean wrap) {\n-                if (!wrap || (rs == null)) {\n+                if (!wrap || rs == null)\n                     return super.wrapResult(rs, wrap);\n-                }\n-\n                 return new LoggingResultSet(rs, this);\n             }\n \n@@ -880,7 +773,8 @@ protected ResultSet executeQuery(String sql, boolean wrap)\n                     return super.executeQuery(sql, wrap);\n                 } catch (SQLException se) {\n                     throw wrap(se, LoggingPreparedStatement.this);\n-                } finally {\n+                }\n+                finally {\n                     log(\"executing\", start);\n                     clearLogParameters(true);\n                     handleSQLWarning(LoggingPreparedStatement.this);\n@@ -894,7 +788,8 @@ public int executeUpdate(String sql) throws SQLException {\n                     return super.executeUpdate(sql);\n                 } catch (SQLException se) {\n                     throw wrap(se, LoggingPreparedStatement.this);\n-                } finally {\n+                }\n+                finally {\n                     log(\"executing\", start);\n                     clearLogParameters(true);\n                     handleSQLWarning(LoggingPreparedStatement.this);\n@@ -908,36 +803,38 @@ public boolean execute(String sql) throws SQLException {\n                     return super.execute(sql);\n                 } catch (SQLException se) {\n                     throw wrap(se, LoggingPreparedStatement.this);\n-                } finally {\n+                }\n+                finally {\n                     log(\"executing\", start);\n                     clearLogParameters(true);\n                     handleSQLWarning(LoggingPreparedStatement.this);\n                 }\n             }\n \n-            protected ResultSet executeQuery(boolean wrap)\n-                throws SQLException {\n+            protected ResultSet executeQuery(boolean wrap) throws SQLException {\n                 long start = System.currentTimeMillis();\n \n                 try {\n                     return super.executeQuery(wrap);\n                 } catch (SQLException se) {\n                     throw wrap(se, LoggingPreparedStatement.this);\n-                } finally {\n+                }\n+                finally {\n                     log(\"executing\", start);\n                     clearLogParameters(true);\n                     handleSQLWarning(LoggingPreparedStatement.this);\n                 }\n             }\n \n-            public int executeUpdate() throws SQLException {\n+            public int executeUpdate  () throws SQLException {\n                 long start = System.currentTimeMillis();\n \n                 try {\n                     return super.executeUpdate();\n                 } catch (SQLException se) {\n                     throw wrap(se, LoggingPreparedStatement.this);\n-                } finally {\n+                }\n+                finally {\n                     log(\"executing\", start);\n                     clearLogParameters(true);\n                     handleSQLWarning(LoggingPreparedStatement.this);\n@@ -955,40 +852,35 @@ public int executeUpdate() throws SQLException {\n                     // parameter set to be the index of the failed\n                     // statement so that the ReportingSQLException will\n                     // show the correct param\n-                    if (se instanceof BatchUpdateException &&\n-                            (_paramBatch != null) && shouldTrackParameters()) {\n-                        int[] count = ((BatchUpdateException) se).getUpdateCounts();\n-\n-                        if ((count != null) &&\n-                                (count.length <= _paramBatch.size())) {\n+                    if (se instanceof BatchUpdateException\n+                        && _paramBatch != null && shouldTrackParameters()) {\n+                        int[] count = ((BatchUpdateException)se).\n+                            getUpdateCounts();\n+                        if (count != null && count.length <= _paramBatch.size()) {\n                             int index = -1;\n-\n                             for (int i = 0; i < count.length; i++) {\n                                 // -3 is Statement.STATEMENT_FAILED, but is\n                                 // only available in JDK 1.4+\n                                 if (count[i] == -3) {\n                                     index = i;\n-\n                                     break;\n                                 }\n                             }\n \n                             // no -3 element: it may be that the server stopped\n                             // processing, so the size of the count will be\n                             // the index\n-                            if (index == -1) {\n+                            if (index == -1)\n                                 index = count.length + 1;\n-                            }\n \n                             // set the current params to the saved values\n-                            if (index < _paramBatch.size()) {\n-                                _params = (List) _paramBatch.get(index);\n-                            }\n+                            if (index < _paramBatch.size())\n+                                _params = (List)_paramBatch.get(index);\n                         }\n                     }\n-\n                     throw wrap(se, LoggingPreparedStatement.this);\n-                } finally {\n+                }\n+                finally {\n                     log(\"executing batch\", start);\n                     clearLogParameters(true);\n                     handleSQLWarning(LoggingPreparedStatement.this);\n@@ -1002,18 +894,18 @@ public boolean execute() throws SQLException {\n                     return super.execute();\n                 } catch (SQLException se) {\n                     throw wrap(se, LoggingPreparedStatement.this);\n-                } finally {\n+                }\n+                finally {\n                     log(\"executing\", start);\n                     clearLogParameters(true);\n                     handleSQLWarning(LoggingPreparedStatement.this);\n                 }\n             }\n \n             public void cancel() throws SQLException {\n-                if (_logs.isJDBCEnabled()) {\n+                if (_logs.isJDBCEnabled())\n                     _logs.logJDBC(\"cancel \" + this + \": \" + _sql,\n                         LoggingConnection.this);\n-                }\n \n                 super.cancel();\n             }\n@@ -1030,7 +922,7 @@ public void setBoolean(int i, boolean b) throws SQLException {\n \n             public void setByte(int i, byte b) throws SQLException {\n                 setLogParameter(i, b);\n-                super.setByte(i, b);\n+                super.setByte(i,b);\n             }\n \n             public void setShort(int i, short s) throws SQLException {\n@@ -1058,8 +950,7 @@ public void setDouble(int i, double d) throws SQLException {\n                 super.setDouble(i, d);\n             }\n \n-            public void setBigDecimal(int i, BigDecimal bd)\n-                throws SQLException {\n+            public void setBigDecimal(int i, BigDecimal bd) throws SQLException {\n                 setLogParameter(i, \"BigDecimal\", bd);\n                 super.setBigDecimal(i, bd);\n             }\n@@ -1084,8 +975,7 @@ public void setTime(int i, Time t) throws SQLException {\n                 super.setTime(i, t);\n             }\n \n-            public void setTimestamp(int i, Timestamp t)\n-                throws SQLException {\n+            public void setTimestamp(int i, Timestamp t) throws SQLException {\n                 setLogParameter(i, \"Timestamp\", t);\n                 super.setTimestamp(i, t);\n             }\n@@ -1119,8 +1009,7 @@ public void setObject(int i1, Object o, int i2, int i3)\n                 super.setObject(i1, o, i2, i3);\n             }\n \n-            public void setObject(int i1, Object o, int i2)\n-                throws SQLException {\n+            public void setObject(int i1, Object o, int i2) throws SQLException {\n                 setLogParameter(i1, \"Object\", o);\n                 super.setObject(i1, o, i2);\n             }\n@@ -1135,21 +1024,18 @@ public void addBatch() throws SQLException {\n \n                 try {\n                     super.addBatch();\n-\n                     if (shouldTrackParameters()) {\n                         // make sure our list is initialized\n-                        if (_paramBatch == null) {\n+                        if (_paramBatch == null)\n                             _paramBatch = new ArrayList();\n-                        }\n-\n                         // copy parameters since they will be re-used\n-                        if (_params != null) {\n+                        if (_params != null)\n                             _paramBatch.add(new ArrayList(_params));\n-                        } else {\n+                        else\n                             _paramBatch.add(null);\n-                        }\n                     }\n-                } finally {\n+                }\n+                finally {\n                     log(\"batching\", start);\n                 }\n             }\n@@ -1184,14 +1070,12 @@ public ResultSetMetaData getMetaData() throws SQLException {\n                 return super.getMetaData();\n             }\n \n-            public void setDate(int i, Date d, Calendar c)\n-                throws SQLException {\n+            public void setDate(int i, Date d, Calendar c) throws SQLException {\n                 setLogParameter(i, \"Date\", d);\n                 super.setDate(i, d, c);\n             }\n \n-            public void setTime(int i, Time t, Calendar c)\n-                throws SQLException {\n+            public void setTime(int i, Time t, Calendar c) throws SQLException {\n                 setLogParameter(i, \"Time\", t);\n                 super.setTime(i, t, c);\n             }\n@@ -1202,15 +1086,13 @@ public void setTimestamp(int i, Timestamp t, Calendar c)\n                 super.setTimestamp(i, t, c);\n             }\n \n-            public void setNull(int i1, int i2, String s)\n-                throws SQLException {\n+            public void setNull(int i1, int i2, String s) throws SQLException {\n                 setLogParameter(i1, \"null\", null);\n                 super.setNull(i1, i2, s);\n             }\n \n             protected void appendInfo(StringBuffer buf) {\n                 buf.append(\" \");\n-\n                 if (_formatter != null) {\n                     buf.append(SEP);\n                     buf.append(_formatter.prettyPrint(_sql));\n@@ -1220,113 +1102,88 @@ protected void appendInfo(StringBuffer buf) {\n                 }\n \n                 StringBuffer paramBuf = null;\n-\n-                if ((_params != null) && !_params.isEmpty()) {\n+                if (_params != null && !_params.isEmpty()) {\n                     paramBuf = new StringBuffer();\n-\n                     for (Iterator itr = _params.iterator(); itr.hasNext();) {\n                         paramBuf.append(itr.next());\n-\n-                        if (itr.hasNext()) {\n+                        if (itr.hasNext())\n                             paramBuf.append(\", \");\n-                        }\n                     }\n                 }\n \n                 if (paramBuf != null) {\n-                    if (!_prettyPrint) {\n+                    if (!_prettyPrint)\n                         buf.append(\" \");\n-                    }\n-\n-                    buf.append(\"[params=\").append(paramBuf.toString())\n-                       .append(\"]\");\n+                    buf.append(\"[params=\").\n+                        append(paramBuf.toString()).append(\"]\");\n                 }\n-\n                 super.appendInfo(buf);\n             }\n \n-            private void log(String msg, long startTime)\n-                throws SQLException {\n-                if (_logs.isSQLEnabled()) {\n+            private void log(String msg, long startTime) throws SQLException {\n+                if (_logs.isSQLEnabled())\n                     _logs.logSQL(msg + \" \" + this, startTime,\n                         LoggingConnection.this);\n-                }\n             }\n \n             private void clearLogParameters(boolean batch) {\n-                if (_params != null) {\n+                if (_params != null)\n                     _params.clear();\n-                }\n-\n-                if (batch && (_paramBatch != null)) {\n+                if (batch && _paramBatch != null)\n                     _paramBatch.clear();\n-                }\n             }\n \n             private boolean shouldTrackParameters() {\n                 return _trackParameters || _logs.isSQLEnabled();\n             }\n \n             private void setLogParameter(int index, boolean val) {\n-                if (shouldTrackParameters()) {\n+                if (shouldTrackParameters())\n                     setLogParameter(index, \"(boolean) \" + val);\n-                }\n             }\n \n             private void setLogParameter(int index, byte val) {\n-                if (shouldTrackParameters()) {\n+                if (shouldTrackParameters())\n                     setLogParameter(index, \"(byte) \" + val);\n-                }\n             }\n \n             private void setLogParameter(int index, double val) {\n-                if (shouldTrackParameters()) {\n+                if (shouldTrackParameters())\n                     setLogParameter(index, \"(double) \" + val);\n-                }\n             }\n \n             private void setLogParameter(int index, float val) {\n-                if (shouldTrackParameters()) {\n+                if (shouldTrackParameters())\n                     setLogParameter(index, \"(float) \" + val);\n-                }\n             }\n \n             private void setLogParameter(int index, int val) {\n-                if (shouldTrackParameters()) {\n+                if (shouldTrackParameters())\n                     setLogParameter(index, \"(int) \" + val);\n-                }\n             }\n \n             private void setLogParameter(int index, long val) {\n-                if (shouldTrackParameters()) {\n+                if (shouldTrackParameters())\n                     setLogParameter(index, \"(long) \" + val);\n-                }\n             }\n \n             private void setLogParameter(int index, short val) {\n-                if (shouldTrackParameters()) {\n+                if (shouldTrackParameters())\n                     setLogParameter(index, \"(short) \" + val);\n-                }\n             }\n \n             private void setLogParameter(int index, String type, Object val) {\n-                if (shouldTrackParameters()) {\n+                if (shouldTrackParameters())\n                     setLogParameter(index, \"(\" + type + \") \" + val);\n-                }\n             }\n \n             private void setLogParameter(int index, String val) {\n-                if (_params == null) {\n+                if (_params == null)\n                     _params = new ArrayList();\n-                }\n-\n                 while (_params.size() < index)\n                     _params.add(null);\n-\n-                if (val.length() > 80) {\n+                if (val.length() > 80)\n                     val = val.substring(0, 77) + \"...\";\n-                }\n-\n                 _params.set(index - 1, val);\n             }\n         }\n@@ -1339,71 +1196,80 @@ public LoggingResultSet(ResultSet rs, Statement stmnt) {\n             public boolean next() throws SQLException {\n                 try {\n                     return super.next();\n-                } finally {\n+                }\n+                finally {\n                     handleSQLWarning(LoggingResultSet.this);\n                 }\n             }\n \n             public void close() throws SQLException {\n                 try {\n                     super.close();\n-                } finally {\n+                }\n+                finally {\n                     handleSQLWarning(LoggingResultSet.this);\n                 }\n             }\n \n             public void beforeFirst() throws SQLException {\n                 try {\n                     super.beforeFirst();\n-                } finally {\n+                }\n+                finally {\n                     handleSQLWarning(LoggingResultSet.this);\n                 }\n             }\n \n             public void afterLast() throws SQLException {\n                 try {\n                     super.afterLast();\n-                } finally {\n+                }\n+                finally {\n                     handleSQLWarning(LoggingResultSet.this);\n                 }\n             }\n \n             public boolean first() throws SQLException {\n                 try {\n                     return super.first();\n-                } finally {\n+                }\n+                finally {\n                     handleSQLWarning(LoggingResultSet.this);\n                 }\n             }\n \n             public boolean last() throws SQLException {\n                 try {\n                     return super.last();\n-                } finally {\n+                }\n+                finally {\n                     handleSQLWarning(LoggingResultSet.this);\n                 }\n             }\n \n             public boolean absolute(int a) throws SQLException {\n                 try {\n                     return super.absolute(a);\n-                } finally {\n+                }\n+                finally {\n                     handleSQLWarning(LoggingResultSet.this);\n                 }\n             }\n \n             public boolean relative(int a) throws SQLException {\n                 try {\n                     return super.relative(a);\n-                } finally {\n+                }\n+                finally {\n                     handleSQLWarning(LoggingResultSet.this);\n                 }\n             }\n \n             public boolean previous() throws SQLException {\n                 try {\n                     return super.previous();\n-                } finally {\n+                }\n+                finally {\n                     handleSQLWarning(LoggingResultSet.this);\n                 }\n             }"},{"sha":"fc2c3256d877d73b103e5b0dd21d145e49cd92fd","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/ReportingSQLException.java","status":"modified","additions":25,"deletions":25,"changes":50,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/ReportingSQLException.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/ReportingSQLException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/ReportingSQLException.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74","patch":"@@ -1,13 +1,10 @@\n /*\n  * Copyright 2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *  Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n@@ -17,13 +14,13 @@\n \n import java.sql.*;\n \n-\n /**\n- *  <p>A {@link SQLException} that contains information about\n- *  the {@link Statement} SQL that caused the exception.</p>\n- *\n- *  @author Marc Prud'hommeaux\n- *  @nojavadoc */\n+ * A {@link SQLException} that contains information about\n+ * the {@link Statement} SQL that caused the exception.\n+ * \n+ * @author Marc Prud'hommeaux\n+ * @nojavadoc\n+ */\n public class ReportingSQLException extends SQLException {\n     private final transient Statement _stmnt;\n     private final SQLException _sqle;\n@@ -44,21 +41,21 @@ public ReportingSQLException(SQLException sqle, Statement stmnt) {\n     }\n \n     /**\n-     *  Returns the SQL state of the underlying {@link SQLException}.\n+     * Returns the SQL state of the underlying {@link SQLException}.\n      */\n     public String getSQLState() {\n         return _sqle.getSQLState();\n     }\n \n     /**\n-     *  Returns the error code of the underlying {@link SQLException}.\n+     * Returns the error code of the underlying {@link SQLException}.\n      */\n     public int getErrorCode() {\n         return _sqle.getErrorCode();\n     }\n \n     /**\n-     *  Returns the {@link Statement} that caused the exception.\n+     * Returns the {@link Statement} that caused the exception.\n      */\n     public Statement getStatement() {\n         return _stmnt;\n@@ -67,18 +64,21 @@ public Statement getStatement() {\n     private static String getExceptionMessage(SQLException sqle,\n         Statement stmnt, String sql) {\n         try {\n-            if (stmnt != null) {\n-                return sqle.getMessage() + \" {\" + stmnt + \"} \" + \"[code=\" +\n-                sqle.getErrorCode() + \", state=\" + sqle.getSQLState() + \"]\";\n-            } else if (sql != null) {\n-                return sqle.getMessage() + \" {\" + sql + \"} \" + \"[code=\" +\n-                sqle.getErrorCode() + \", state=\" + sqle.getSQLState() + \"]\";\n-            } else {\n-                return sqle.getMessage() + \" \" + \"[code=\" +\n-                sqle.getErrorCode() + \", state=\" + sqle.getSQLState() + \"]\";\n-            }\n+            if (stmnt != null)\n+                return sqle.getMessage() + \" {\" + stmnt + \"} \"\n+                    + \"[code=\" + sqle.getErrorCode() + \", state=\"\n+                    + sqle.getSQLState() + \"]\";\n+            else if (sql != null)\n+                return sqle.getMessage() + \" {\" + sql + \"} \"\n+                    + \"[code=\" + sqle.getErrorCode() + \", state=\"\n+                    + sqle.getSQLState() + \"]\";\n+            else\n+                return sqle.getMessage() + \" \"\n+                    + \"[code=\" + sqle.getErrorCode() + \", state=\"\n+                    + sqle.getSQLState() + \"]\";\n         } catch (Throwable t) {\n             return sqle.getMessage();\n         }\n     }\n }\n+"},{"sha":"8369c7e44e3943ceaf88db3fd84fa5949e64743a","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/SQLFormatter.java","status":"modified","additions":65,"deletions":83,"changes":148,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/SQLFormatter.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/SQLFormatter.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/SQLFormatter.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74","patch":"@@ -1,13 +1,10 @@\n /*\n  * Copyright 2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *  Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n@@ -17,54 +14,57 @@\n \n import java.util.*;\n \n-\n /*\n- *  Lots of this could be abstracted out into a word-wrapping class.\n+ * Lots of this could be abstracted out into a word-wrapping class.\n  */\n \n /**\n- *  <p>Converts single-line SQL strings into nicely-formatted\n- *  multi-line, indented statements.</p>\n- *\n-        <p>Example:\n-         <code>SELECT * from PERSON t0, COMPANY t1 WHERE t0.ID = 10 AND \\\n-t0.COMPANY_ID = t1.ID AND t1.NAME = 'OpenJPA'</code>\n-         becomes\n-         <code>SELECT *\n-    FROM PERSON t0, COMPANY t1\n-    WHERE t0.ID = 10 AND t0.COMPANY_ID = t1.ID AND t1.NAME = 'OpenJPA'\\\n-</code>\n-        and\n-         <code>INSERT INTO PERSON VALUES ('Patrick', 'Linskey', 'OpenJPA', \\\n-'202 595 2064 x1111')</code>\n-         becomes\n-         <code>INSERT INTO PERSON VALUES ('Patrick', 'Linskey', 'OpenJPA', '202\n-        595 2064 x1111')</code>\n-        etc.</p>\n- *\n- *  @author Patrick Linskey\n+ * Converts single-line SQL strings into nicely-formatted\n+ * multi-line, indented statements.\n+ *  Example: from PERSON t0, COMPANY t1 WHERE t0.ID = 10 AND \\\n+ t0.COMPANY_ID = t1.ID AND t1.NAME = 'OpenJPA'</code>\n+ becomes\n+    <code>SELECT * \n+ FROM PERSON t0, COMPANY t1\n+ WHERE t0.ID = 10 AND t0.COMPANY_ID = t1.ID AND t1.NAME = 'OpenJPA'\\\n+ </code>\n+ and\n+ <code>INSERT INTO PERSON VALUES('Patrick', 'Linskey', 'OpenJPA', \\\n+ '202 595 2064 x1111')</code>\n+ becomes\n+ <code>INSERT INTO PERSON VALUES('Patrick', 'Linskey', 'OpenJPA', '202\n+ 595 2064 x1111')</code>\n+ etc.\n+ * \n+ * @author Patrick Linskey\n  */\n public class SQLFormatter {\n-    private static final String[] selectSeparators = new String[] {\n-            \"FROM \", \"WHERE \", \"ORDER BY \", // ### is this order correct?\n-            \"GROUP BY \", \"HAVING \",\n-        };\n-    private static final String[] insertSeparators = new String[] { \"VALUES \", };\n-    private static final String[] updateSeparators = new String[] {\n-            \"SET \", \"WHERE \",\n-        };\n-    private static final String[] deleteSeparators = new String[] { \"WHERE \", };\n-    private static final String[] createTableSeparators = new String[] { \"( \", };\n-    private static final String[] createIndexSeparators = new String[] {\n-            \"ON \", \"( \",\n-        };\n     private boolean multiLine = false;\n     private boolean doubleSpace = true;\n     private String newline = System.getProperty(\"line.separator\");\n     private int lineLength = 72;\n     private String wrapIndent = \"        \";\n     private String clauseIndent = \"    \";\n \n+    private static final String[] selectSeparators = new String[] {\n+            \"FROM \", \"WHERE \", \"ORDER BY \", // ### is this order correct?\n+            \"GROUP BY \", \"HAVING \", };\n+\n+    private static final String[] insertSeparators = new String[] {\n+            \"VALUES \", };\n+\n+    private static final String[] updateSeparators = new String[] {\n+            \"SET \", \"WHERE \", };\n+\n+    private static final String[] deleteSeparators = new String[] {\n+            \"WHERE \", };\n+\n+    private static final String[] createTableSeparators = new String[] {\n+            \"( \", };\n+\n+    private static final String[] createIndexSeparators = new String[] {\n+            \"ON \", \"( \", };\n+\n     public void setNewline(String val) {\n         newline = val;\n     }\n@@ -98,28 +98,28 @@ public String getClauseIndent() {\n     }\n \n     /**\n-     *  If true, then try to parse multi-line SQL statements.\n+     * If true, then try to parse multi-line SQL statements.\n      */\n     public void setMultiLine(boolean multiLine) {\n         this.multiLine = multiLine;\n     }\n \n     /**\n-     *  If true, then try to parse multi-line SQL statements.\n+     * If true, then try to parse multi-line SQL statements.\n      */\n     public boolean getMultiLine() {\n         return this.multiLine;\n     }\n \n     /**\n-     *  If true, then output two lines after multi-line statements.\n+     * If true, then output two lines after multi-line statements.\n      */\n     public void setDoubleSpace(boolean doubleSpace) {\n         this.doubleSpace = doubleSpace;\n     }\n \n     /**\n-     *  If true, then output two lines after multi-line statements.\n+     * If true, then output two lines after multi-line statements.\n      */\n     public boolean getDoubleSpace() {\n         return this.doubleSpace;\n@@ -136,20 +136,17 @@ public Object prettyPrint(Object sqlObject) {\n                 String line = null;\n \n                 int index = Math.max(sql.toString().indexOf(\";\\n\"),\n-                        sql.toString().indexOf(\";\\r\"));\n-\n-                if (index == -1) {\n+                    sql.toString().indexOf(\";\\r\"));\n+                if (index == -1)\n                     line = sql.toString();\n-                } else {\n+                else\n                     line = sql.substring(0, index + 2);\n-                }\n \n                 // remove the current line from the sql buffer\n                 sql.delete(0, line.length());\n \n                 buf.append(prettyPrintLine(line));\n-\n-                for (int i = 0; i < (1 + (getDoubleSpace() ? 1 : 0)); i++)\n+                for (int i = 0; i < 1 + (getDoubleSpace() ? 1 : 0); i++)\n                     buf.append(System.getProperty(\"line.separator\"));\n             }\n \n@@ -162,35 +159,31 @@ private Object prettyPrintLine(Object sqlObject) {\n         String lowerCaseSql = sql.toLowerCase();\n \n         String[] separators;\n-\n-        if (lowerCaseSql.startsWith(\"select\")) {\n+        if (lowerCaseSql.startsWith(\"select\"))\n             separators = selectSeparators;\n-        } else if (lowerCaseSql.startsWith(\"insert\")) {\n+        else if (lowerCaseSql.startsWith(\"insert\"))\n             separators = insertSeparators;\n-        } else if (lowerCaseSql.startsWith(\"update\")) {\n+        else if (lowerCaseSql.startsWith(\"update\"))\n             separators = updateSeparators;\n-        } else if (lowerCaseSql.startsWith(\"delete\")) {\n+        else if (lowerCaseSql.startsWith(\"delete\"))\n             separators = deleteSeparators;\n-        } else if (lowerCaseSql.startsWith(\"create table\")) {\n+        else if (lowerCaseSql.startsWith(\"create table\"))\n             separators = createTableSeparators;\n-        } else if (lowerCaseSql.startsWith(\"create index\")) {\n+        else if (lowerCaseSql.startsWith(\"create index\"))\n             separators = createIndexSeparators;\n-        } else {\n+        else\n             separators = new String[0];\n-        }\n \n         int start = 0;\n         int end = -1;\n         StringBuffer clause;\n         List clauses = new ArrayList();\n         clauses.add(new StringBuffer());\n-\n         for (int i = 0; i < separators.length; i++) {\n-            end = lowerCaseSql.indexOf(\" \" + separators[i].toLowerCase(), start);\n-\n-            if (end == -1) {\n+            end = lowerCaseSql.indexOf(\" \" + separators[i].toLowerCase(),\n+                start);\n+            if (end == -1)\n                 break;\n-            }\n \n             clause = (StringBuffer) clauses.get(clauses.size() - 1);\n             clause.append(sql.substring(start, end));\n@@ -207,13 +200,10 @@ private Object prettyPrintLine(Object sqlObject) {\n         clause.append(sql.substring(start));\n \n         StringBuffer pp = new StringBuffer(sql.length());\n-\n-        for (Iterator iter = clauses.iterator(); iter.hasNext();) {\n+        for (Iterator iter = clauses.iterator(); iter.hasNext(); ) {\n             pp.append(wrapLine(((StringBuffer) iter.next()).toString()));\n-\n-            if (iter.hasNext()) {\n+            if (iter.hasNext())\n                 pp.append(newline);\n-            }\n         }\n \n         return pp.toString();\n@@ -223,16 +213,14 @@ private String wrapLine(String line) {\n         StringBuffer lines = new StringBuffer(line.length());\n \n         // ensure that any leading whitespace is preserved.\n-        for (int i = 0;\n-                (i < line.length()) &&\n-                ((line.charAt(i) == ' ') || (line.charAt(i) == '\\t')); i++) {\n+        for (int i = 0; i < line.length() &&\n+                 (line.charAt(i) == ' ' || line.charAt(i) == '\\t'); i++) {\n             lines.append(line.charAt(i));\n         }\n \n         StringTokenizer tok = new StringTokenizer(line);\n         int length = 0;\n         String elem;\n-\n         while (tok.hasMoreTokens()) {\n             elem = tok.nextToken();\n             length += elem.length();\n@@ -245,7 +233,6 @@ private String wrapLine(String line) {\n                 lines.append(elem);\n                 lines.append(' ');\n                 length = wrapIndent.length() + elem.length() + 1;\n-\n                 continue;\n             }\n \n@@ -254,14 +241,10 @@ private String wrapLine(String line) {\n             // newline and move on.\n             if (elem.length() >= lineLength) {\n                 lines.append(elem);\n-\n-                if (tok.hasMoreTokens()) {\n+                if (tok.hasMoreTokens())\n                     lines.append(newline);\n-                }\n-\n                 lines.append(wrapIndent);\n                 length = wrapIndent.length();\n-\n                 continue;\n             }\n \n@@ -273,9 +256,8 @@ private String wrapLine(String line) {\n         return lines.toString();\n     }\n \n-    public static void main(String[] args) {\n+    public static void main(String [] args) {\n         SQLFormatter formatter = new SQLFormatter();\n-\n         for (int i = 0; i < args.length; i++) {\n             System.out.println(formatter.prettyPrint(args[i]));\n         }"},{"sha":"dc4690f301252d6d19233b57dbccb1cfcac82cd6","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/log/AbstractLog.java","status":"modified","additions":27,"deletions":41,"changes":68,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/AbstractLog.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/AbstractLog.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/AbstractLog.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74","patch":"@@ -1,13 +1,10 @@\n /*\n  * Copyright 2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *  Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n@@ -17,25 +14,24 @@\n \n import java.io.*;\n \n-\n /**\n- *  A simple implementation of the {@link Log} interface. Writes\n- *  output to stdout.\n- *\n- *  @author Patrick Linskey\n+ * A simple implementation of the {@link Log} interface. Writes\n+ * output to stdout.\n+ * \n+ * @author Patrick Linskey\n  */\n public abstract class AbstractLog implements Log {\n     /**\n-     *  Check to see if the specified logging level is enabled.\n+     * Check to see if the specified logging level is enabled.\n      */\n     protected abstract boolean isEnabled(short level);\n \n     /**\n-     *  Send the specified log message to the handler.\n-     *\n-     *  @param level        the level of the log message\n-     *  @param message        the message to send\n-     *  @param t                the Throwable, or null if this is not an error\n+     * Send the specified log message to the handler.\n+     * \n+     * @param level the level of the log message\n+     * @param message the message to send\n+     * @param t the Throwable, or null if this is not an error\n      */\n     protected abstract void log(short level, String message, Throwable t);\n \n@@ -68,92 +64,82 @@ public void trace(Object message) {\n     }\n \n     public void trace(Object message, Throwable t) {\n-        if (isTraceEnabled()) {\n+        if (isTraceEnabled())\n             log(TRACE, toString(message), throwableParam(message, t));\n-        }\n     }\n \n     public void debug(Object message) {\n         debug(message, throwableParam(message, null));\n     }\n \n     public void debug(Object message, Throwable t) {\n-        if (isDebugEnabled()) {\n+        if (isDebugEnabled())\n             log(DEBUG, toString(message), throwableParam(message, t));\n-        }\n     }\n \n     public void info(Object message) {\n         info(message, throwableParam(message, null));\n     }\n \n     public void info(Object message, Throwable t) {\n-        if (isInfoEnabled()) {\n+        if (isInfoEnabled())\n             log(INFO, toString(message), throwableParam(message, t));\n-        }\n     }\n \n     public void warn(Object message) {\n         warn(message, throwableParam(message, null));\n     }\n \n     public void warn(Object message, Throwable t) {\n-        if (isWarnEnabled()) {\n+        if (isWarnEnabled())\n             log(WARN, toString(message), throwableParam(message, t));\n-        }\n     }\n \n     public void error(Object message) {\n         error(message, throwableParam(message, null));\n     }\n \n     public void error(Object message, Throwable t) {\n-        if (isErrorEnabled()) {\n+        if (isErrorEnabled())\n             log(ERROR, toString(message), throwableParam(message, t));\n-        }\n     }\n \n     public void fatal(Object message) {\n         fatal(message, throwableParam(message, null));\n     }\n \n     public void fatal(Object message, Throwable t) {\n-        if (isFatalEnabled()) {\n+        if (isFatalEnabled())\n             log(FATAL, toString(message), throwableParam(message, t));\n-        }\n     }\n \n     /**\n-     *  Utility method to obtain a stack trace as a String.\n+     * Utility method to obtain a stack trace as a String.\n      */\n     protected static String getStackTrace(Throwable t) {\n         StringWriter sw = new StringWriter();\n         PrintWriter pw = new PrintWriter(sw, true);\n         t.printStackTrace(pw);\n         pw.close();\n-\n         return sw.toString();\n     }\n \n     /**\n-     *  If either given instance is a throwable, return it.\n+     * If either given instance is a throwable, return it.\n      */\n     private static Throwable throwableParam(Object message, Throwable t) {\n-        if (t != null) {\n+        if (t != null)\n             return t;\n-        }\n-\n-        if (message instanceof Throwable) {\n-            return (Throwable) message;\n-        }\n+        if (message instanceof Throwable)\n+            return(Throwable)message;\n \n         return null;\n     }\n \n     /**\n-     *  Efficiently turn the given object into a string.\n-      */\n+     * Efficiently turn the given object into a string.\n+     */\n     private static String toString(Object o) {\n-        return (o == null) ? \"null\" : o.toString();\n+        return(o == null) ? \"null\" : o.toString();\n     }\n }"},{"sha":"0f4ff00a6b57269d51c26aa77e11c0a199ccf936","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/log/CommonsLogFactory.java","status":"modified","additions":9,"deletions":13,"changes":22,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/CommonsLogFactory.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/CommonsLogFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/CommonsLogFactory.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74","patch":"@@ -1,13 +1,10 @@\n /*\n  * Copyright 2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *  Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n@@ -17,12 +14,11 @@\n \n import java.util.*;\n \n-\n /**\n- *  {@link LogFactory} implementation that delegates to the commons logging\n- *  framework.\n- *\n- *  @author Patrick Linskey\n+ * {@link LogFactory} implementation that delegates to the commons logging\n+ * framework.\n+ * \n+ * @author Patrick Linskey\n  */\n public class CommonsLogFactory extends LogFactoryAdapter {\n     private org.apache.commons.logging.LogFactory _factory;\n@@ -36,8 +32,8 @@ public CommonsLogFactory() {\n     }\n \n     /**\n-     *  Adapts a commons logging log to the {@link org.apache.openjpa.lib.log.Log}\n-     *  interface.\n+     * Adapts a commons logging log to the {@link org.apache.openjpa.lib.log.Log}\n+     * interface.\n      */\n     public static class LogAdapter implements org.apache.openjpa.lib.log.Log {\n         private org.apache.commons.logging.Log _log;"},{"sha":"62ae577cbb6da0013c7432fa9ff619dcc46d8231","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/log/Log.java","status":"modified","additions":49,"deletions":53,"changes":102,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/Log.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/Log.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/Log.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74","patch":"@@ -1,26 +1,22 @@\n /*\n  * Copyright 2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *  Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n package org.apache.openjpa.lib.log;\n \n-\n /**\n- *  Logging interface that is independent of other logging frameworks.\n- *\n- *  @author Patrick Linskey\n- *  @author Abe White\n+ * Logging interface that is independent of other logging frameworks.\n+ * \n+ * @author Patrick Linskey\n+ * @author Abe White\n  */\n public interface Log {\n     public static final short TRACE = 1;\n@@ -31,116 +27,116 @@\n     public static final short FATAL = 6;\n \n     /**\n-     *  Returns if the {@link #TRACE} log level is enabled.\n+     * Returns if the {@link #TRACE} log level is enabled.\n      */\n     public boolean isTraceEnabled();\n \n     /**\n-     *  Returns if the {@link #DEBUG} log level is enabled.\n+     * Returns if the {@link #DEBUG} log level is enabled.\n      */\n     public boolean isDebugEnabled();\n \n     /**\n-     *  Returns if the {@link #INFO} log level is enabled.\n+     * Returns if the {@link #INFO} log level is enabled.\n      */\n     public boolean isInfoEnabled();\n \n     /**\n-     *  Returns if the {@link #WARN} log level is enabled.\n+     * Returns if the {@link #WARN} log level is enabled.\n      */\n     public boolean isWarnEnabled();\n \n     /**\n-     *  Returns if the {@link #ERROR} log level is enabled.\n+     * Returns if the {@link #ERROR} log level is enabled.\n      */\n     public boolean isErrorEnabled();\n \n     /**\n-     *  Returns if the {@link #FATAL} log level is enabled.\n+     * Returns if the {@link #FATAL} log level is enabled.\n      */\n     public boolean isFatalEnabled();\n \n     /**\n-     *  Write out a log message at the {@link #TRACE}\n-     *  level with the stringification of <code>o</code> as the body\n-     *  of the message.\n+     * Write out a log message at the {@link #TRACE}\n+     * level with the stringification of <code>o</code> as the body\n+     * of the message.\n      */\n     public void trace(Object o);\n \n     /**\n-     *  Write out a log message at the {@link #TRACE}\n-     *  level with the stringification of <code>o</code> as the body\n-     *  of the message, also outputting <code>t</code> to the log.\n+     * Write out a log message at the {@link #TRACE}\n+     * level with the stringification of <code>o</code> as the body\n+     * of the message, also outputting <code>t</code> to the log.\n      */\n     public void trace(Object o, Throwable t);\n \n     /**\n-     *  Write out a log message at the {@link #DEBUG}\n-     *  level with the stringification of <code>o</code> as the body\n-     *  of the message, also outputting <code>t</code> to the log.\n+     * Write out a log message at the {@link #DEBUG}\n+     * level with the stringification of <code>o</code> as the body\n+     * of the message, also outputting <code>t</code> to the log.\n      */\n     public void debug(Object o);\n \n     /**\n-     *  Write out a log message at the {@link #DEBUG}\n-     *  level with the stringification of <code>o</code> as the body\n-     *  of the message, also outputting <code>t</code> to the log.\n+     * Write out a log message at the {@link #DEBUG}\n+     * level with the stringification of <code>o</code> as the body\n+     * of the message, also outputting <code>t</code> to the log.\n      */\n     public void debug(Object o, Throwable t);\n \n     /**\n-     *  Write out a log message at the {@link #INFO}\n-     *  level with the stringification of <code>o</code> as the body\n-     *  of the message, also outputting <code>t</code> to the log.\n+     * Write out a log message at the {@link #INFO}\n+     * level with the stringification of <code>o</code> as the body\n+     * of the message, also outputting <code>t</code> to the log.\n      */\n     public void info(Object o);\n \n     /**\n-     *  Write out a log message at the {@link #INFO}\n-     *  level with the stringification of <code>o</code> as the body\n-     *  of the message, also outputting <code>t</code> to the log.\n+     * Write out a log message at the {@link #INFO}\n+     * level with the stringification of <code>o</code> as the body\n+     * of the message, also outputting <code>t</code> to the log.\n      */\n     public void info(Object o, Throwable t);\n \n     /**\n-     *  Write out a log message at the {@link #WARN}\n-     *  level with the stringification of <code>o</code> as the body\n-     *  of the message, also outputting <code>t</code> to the log.\n+     * Write out a log message at the {@link #WARN}\n+     * level with the stringification of <code>o</code> as the body\n+     * of the message, also outputting <code>t</code> to the log.\n      */\n     public void warn(Object o);\n \n     /**\n-     *  Write out a log message at the {@link #WARN}\n-     *  level with the stringification of <code>o</code> as the body\n-     *  of the message, also outputting <code>t</code> to the log.\n+     * Write out a log message at the {@link #WARN}\n+     * level with the stringification of <code>o</code> as the body\n+     * of the message, also outputting <code>t</code> to the log.\n      */\n     public void warn(Object o, Throwable t);\n \n     /**\n-     *  Write out a log message at the {@link #ERROR}\n-     *  level with the stringification of <code>o</code> as the body\n-     *  of the message, also outputting <code>t</code> to the log.\n+     * Write out a log message at the {@link #ERROR}\n+     * level with the stringification of <code>o</code> as the body\n+     * of the message, also outputting <code>t</code> to the log.\n      */\n     public void error(Object o);\n \n     /**\n-     *  Write out a log message at the {@link #ERROR}\n-     *  level with the stringification of <code>o</code> as the body\n-     *  of the message, also outputting <code>t</code> to the log.\n+     * Write out a log message at the {@link #ERROR}\n+     * level with the stringification of <code>o</code> as the body\n+     * of the message, also outputting <code>t</code> to the log.\n      */\n     public void error(Object o, Throwable t);\n \n     /**\n-     *  Write out a log message at the {@link #FATAL}\n-     *  level with the stringification of <code>o</code> as the body\n-     *  of the message, also outputting <code>t</code> to the log.\n+     * Write out a log message at the {@link #FATAL}\n+     * level with the stringification of <code>o</code> as the body\n+     * of the message, also outputting <code>t</code> to the log.\n      */\n     public void fatal(Object o);\n \n     /**\n-     *  Write out a log message at the {@link #FATAL}\n-     *  level with the stringification of <code>o</code> as the body\n-     *  of the message, also outputting <code>t</code> to the log.\n+     * Write out a log message at the {@link #FATAL}\n+     * level with the stringification of <code>o</code> as the body\n+     * of the message, also outputting <code>t</code> to the log.\n      */\n     public void fatal(Object o, Throwable t);\n }"},{"sha":"4b11d40c3520f6bf4ce1e378b24be23503437a45","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/log/Log4JLogFactory.java","status":"modified","additions":8,"deletions":13,"changes":21,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/Log4JLogFactory.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/Log4JLogFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/Log4JLogFactory.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74","patch":"@@ -1,37 +1,32 @@\n /*\n  * Copyright 2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *  Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n package org.apache.openjpa.lib.log;\n \n-import org.apache.log4j.*;\n-\n import java.util.*;\n-\n+import org.apache.log4j.*;\n \n /**\n- *  {@link LogFactory} implementation that delegates to the Log4J framework.\n- *\n- *  @author Patrick Linskey\n+ * {@link LogFactory} implementation that delegates to the Log4J framework.\n+ * \n+ * @author Patrick Linskey\n  */\n public class Log4JLogFactory extends LogFactoryAdapter {\n     protected Log newLogAdapter(String channel) {\n         return new LogAdapter((Logger) LogManager.getLogger(channel));\n     }\n \n     /**\n-     *  Adapts a Log4J logger to the {@link org.apache.openjpa.lib.log.Log} interface.\n+     * Adapts a Log4J logger to the {@link org.apache.openjpa.lib.log.Log} interface.\n      */\n     public static class LogAdapter implements Log {\n         private Logger _log;"},{"sha":"74e957c0b49a294e4893931a7abdfc375bad6937","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/log/LogFactory.java","status":"modified","additions":7,"deletions":11,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/LogFactory.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/LogFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/LogFactory.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74","patch":"@@ -1,29 +1,25 @@\n /*\n  * Copyright 2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *  Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n package org.apache.openjpa.lib.log;\n \n-\n /**\n- *  <p>Factory for log instances.</p>\n- *\n- *  @author Abe White\n+ * Factory for log instances.\n+ * \n+ * @author Abe White\n  */\n public interface LogFactory {\n     /**\n-     *  Return a log for the given channel name.\n+     * Return a log for the given channel name.\n      */\n     public Log getLog(String channel);\n }"},{"sha":"7609e2f573a69d14792dfea8a1824b9d632cefe8","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/log/LogFactoryAdapter.java","status":"modified","additions":10,"deletions":17,"changes":27,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/LogFactoryAdapter.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/LogFactoryAdapter.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/LogFactoryAdapter.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74","patch":"@@ -1,30 +1,25 @@\n /*\n  * Copyright 2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *  Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n package org.apache.openjpa.lib.log;\n \n-import org.apache.openjpa.lib.util.concurrent.*;\n-\n import java.util.*;\n-\n+import org.apache.openjpa.lib.util.concurrent.*;\n \n /**\n- *  <p>Base type that aids in adapting an external log framework to the\n- *  {@link LogFactory}.</p>\n- *\n- *  @author Abe White\n+ * Base type that aids in adapting an external log framework to the\n+ * {@link LogFactory}.\n+ * \n+ * @author Abe White\n  */\n public abstract class LogFactoryAdapter implements LogFactory {\n     // cache category to log adapters\n@@ -33,18 +28,16 @@\n     public Log getLog(String channel) {\n         // no locking; OK if same adapter created multiple times\n         Log log = (Log) _logs.get(channel);\n-\n         if (log == null) {\n             log = newLogAdapter(channel);\n             _logs.put(channel, log);\n         }\n-\n         return log;\n     }\n \n     /**\n-     *  Return a log adapter for the given channel.  This method may be called\n-     *  multiple times for the same channel in concurrent situations.\n+     * Return a log adapter for the given channel. This method may be called\n+     * multiple times for the same channel in concurrent situations.\n      */\n     protected abstract Log newLogAdapter(String channel);\n }"},{"sha":"f32a9510e310854b2d6511b3e8603a46ddc39c8e","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/log/LogFactoryImpl.java","status":"modified","additions":63,"deletions":92,"changes":155,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/LogFactoryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/LogFactoryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/LogFactoryImpl.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74","patch":"@@ -1,74 +1,70 @@\n /*\n  * Copyright 2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *  Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n package org.apache.openjpa.lib.log;\n \n+import java.io.*;\n+import java.util.*;\n import org.apache.openjpa.lib.conf.*;\n import org.apache.openjpa.lib.util.*;\n import org.apache.openjpa.lib.util.concurrent.*;\n \n-import java.io.*;\n-\n-import java.util.*;\n-\n-\n /**\n- *  Default {@link LogFactory} implementation.  For ease of automatic\n- *  configuration, this implementation keys on only the last dot-separated\n- *  token of the log channel name.\n- *\n- *  @author Patrick Linskey\n+ * Default {@link LogFactory} implementation. For ease of automatic\n+ * configuration, this implementation keys on only the last dot-separated\n+ * token of the log channel name.\n+ * \n+ * @author Patrick Linskey\n  */\n public class LogFactoryImpl implements LogFactory, GenericConfigurable {\n     private static Localizer _loc = Localizer.forPackage(LogFactoryImpl.class);\n+\n     public static final String TRACE_STR = _loc.get(\"log-trace\");\n     public static final String DEBUG_STR = _loc.get(\"log-debug\");\n     public static final String INFO_STR = _loc.get(\"log-info\");\n     public static final String WARN_STR = _loc.get(\"log-warn\");\n     public static final String ERROR_STR = _loc.get(\"log-error\");\n     public static final String FATAL_STR = _loc.get(\"log-fatal\");\n+\n     public static final String STDOUT = \"stdout\";\n     public static final String STDERR = \"stderr\";\n+\n     private static final String NEWLINE = System.getProperty(\"line.separator\");\n \n     /**\n-     *  The time at which this factory was initialized.\n+     * The time at which this factory was initialized.\n      */\n     protected final long initializationMillis;\n \n     /**\n-     *  The {@link Log}s that this factory manages, keyed by log\n-     *  channel name.\n+     * The {@link Log}s that this factory manages, keyed by log channel name.\n      */\n     private Map _logs = new ConcurrentHashMap(); // <String,Log>\n \n     /**\n-     *  The default logging level.\n+     * The default logging level.\n      */\n     private short _defaultLogLevel = Log.INFO;\n \n     /**\n-     *  Storage for logging level configuration specified at\n-     *  configuration time.\n+     * Storage for logging level configuration specified at configuration time.\n      */\n     private Map _configuredLevels = new HashMap(); // <String,Integer>\n \n     /**\n-     *  The stream to write to.  Defaults to System.err.\n+     * The stream to write to. Defaults to System.err.\n      */\n     private PrintStream _out = System.err;\n+\n     private String _diagContext = null;\n \n     public LogFactoryImpl() {\n@@ -78,166 +74,149 @@ public LogFactoryImpl() {\n     public Log getLog(String channel) {\n         // no locking; ok if same log created multiple times\n         LogImpl l = (LogImpl) _logs.get(channel);\n-\n         if (l == null) {\n             l = newLogImpl();\n             l.setChannel(channel);\n-\n             Short lvl = (Short) _configuredLevels.get(shorten(channel));\n-            l.setLevel((lvl == null) ? _defaultLogLevel : lvl.shortValue());\n+            l.setLevel(lvl == null ? _defaultLogLevel : lvl.shortValue());\n             _logs.put(channel, l);\n         }\n-\n         return l;\n     }\n \n     /**\n-     *  Create a new log.  The log will be cached.\n+     * Create a new log. The log will be cached.\n      */\n     protected LogImpl newLogImpl() {\n         return new LogImpl();\n     }\n \n     /**\n-     *  The string name of the default level for unconfigured log channels;\n-     *  used for automatic configuration.\n+     * The string name of the default level for unconfigured log channels;\n+     * used for automatic configuration.\n      */\n     public void setDefaultLevel(String level) {\n         _defaultLogLevel = getLevel(level);\n     }\n \n     /**\n-     *  The default level for unconfigured log channels.\n+     * The default level for unconfigured log channels.\n      */\n     public short getDefaultLevel() {\n         return _defaultLogLevel;\n     }\n \n     /**\n-     *  The default level for unconfigured log channels.\n+     * The default level for unconfigured log channels.\n      */\n     public void setDefaultLevel(short level) {\n         _defaultLogLevel = level;\n     }\n \n     /**\n-     *  A string to prefix all log messages with. Set to\n-     *  <code>null</code> for no prefix.\n+     * A string to prefix all log messages with. Set to\n+     * <code>null</code> for no prefix.\n      */\n     public void setDiagnosticContext(String val) {\n         _diagContext = val;\n     }\n \n     /**\n-     *  A string to prefix all log messages with. Set to\n-     *  <code>null</code> for no prefix.\n+     * A string to prefix all log messages with. Set to\n+     * <code>null</code> for no prefix.\n      */\n     public String getDiagnosticContext() {\n         return _diagContext;\n     }\n \n     /**\n-     *  The stream to write to.  Recognized values are: <code>stdout</code>\n-     *  and <code>stderr</code>.   Any other value will be considered a\n-     *  file name.\n+     * The stream to write to. Recognized values are: <code>stdout</code>\n+     * and <code>stderr</code>. Any other value will be considered a file name.\n      */\n     public void setFile(String file) {\n-        if (STDOUT.equals(file)) {\n+        if (STDOUT.equals(file))\n             _out = System.out;\n-        } else if (STDERR.equals(file)) {\n+        else if (STDERR.equals(file))\n             _out = System.err;\n-        } else {\n+        else {\n             File f = Files.getFile(file, null);\n-\n             try {\n-                _out = new PrintStream(new FileOutputStream(\n-                            f.getCanonicalPath(), true));\n+                _out = new PrintStream(new FileOutputStream\n+                    (f.getCanonicalPath(), true));\n             } catch (IOException ioe) {\n-                throw new IllegalArgumentException(_loc.get(\"log-bad-file\", file) +\n-                    \" \" + ioe.toString());\n+                throw new IllegalArgumentException(_loc.get(\"log-bad-file\",\n+                    file) + \" \" + ioe.toString());\n             }\n         }\n     }\n \n     /**\n-     *  The stream to write to.\n+     * The stream to write to.\n      */\n     public PrintStream getStream() {\n         return _out;\n     }\n \n     /**\n-     *  The stream to write to.\n+     * The stream to write to.\n      */\n     public void setStream(PrintStream stream) {\n-        if (stream == null) {\n+        if (stream == null)\n             throw new NullPointerException(\"stream == null\");\n-        }\n-\n         _out = stream;\n     }\n \n     /**\n-     *  Returns a string representation of the specified log level constant.\n+     * Returns a string representation of the specified log level constant.\n      */\n     public static String getLevelName(short level) {\n         switch (level) {\n         case Log.TRACE:\n             return TRACE_STR;\n-\n         case Log.DEBUG:\n             return DEBUG_STR;\n-\n         case Log.INFO:\n             return INFO_STR;\n-\n         case Log.WARN:\n             return WARN_STR;\n-\n         case Log.ERROR:\n             return ERROR_STR;\n-\n         case Log.FATAL:\n             return FATAL_STR;\n-\n         default:\n             return _loc.get(\"log-unknown\");\n         }\n     }\n \n     /**\n-     *  Returns a symbolic constant for the specified string level.\n+     * Returns a symbolic constant for the specified string level.\n      */\n     public static short getLevel(String str) {\n         str = str.toUpperCase().trim();\n+        short val = TRACE_STR.equals(str) ? Log.TRACE :\n+            DEBUG_STR.equals(str) ? Log.DEBUG :\n+            INFO_STR.equals(str) ? Log.INFO :\n+            WARN_STR.equals(str) ? Log.WARN :\n+            ERROR_STR.equals(str) ? Log.ERROR :\n+            FATAL_STR.equals(str) ? Log.FATAL : -1;\n \n-        short val = TRACE_STR.equals(str) ? Log.TRACE\n-                                          : (DEBUG_STR.equals(str) ? Log.DEBUG\n-                                                                   : (INFO_STR.equals(str)\n-            ? Log.INFO\n-            : (WARN_STR.equals(str) ? Log.WARN\n-                                    : (ERROR_STR.equals(str) ? Log.ERROR\n-                                                             : (FATAL_STR.equals(str)\n-            ? Log.FATAL : (-1))))));\n-\n-        if (val == -1) {\n-            throw new IllegalArgumentException(_loc.get(\"log-bad-constant\", str));\n-        }\n+        if (val == -1)\n+            throw new IllegalArgumentException\n+                (_loc.get(\"log-bad-constant\", str));\n \n         return val;\n     }\n \n     // ---------- GenericConfigurable implementation ----------\n+\n     public void setInto(Map m) {\n         if (!m.isEmpty()) {\n             Map.Entry e;\n-\n-            for (Iterator iter = m.entrySet().iterator(); iter.hasNext();) {\n+            for (Iterator iter = m.entrySet().iterator(); iter.hasNext(); ) {\n                 e = (Map.Entry) iter.next();\n                 _configuredLevels.put(shorten((String) e.getKey()),\n                     new Short(getLevel((String) e.getValue())));\n             }\n-\n             m.clear();\n         }\n     }\n@@ -247,8 +226,8 @@ private static String shorten(String channel) {\n     }\n \n     /**\n-     *  A simple implementation of the {@link Log} interface. Writes\n-     *  output to stderr.\n+     * A simple implementation of the {@link Log} interface. Writes\n+     * output to stderr.\n      */\n     public class LogImpl extends AbstractLog {\n         private short _level = INFO;\n@@ -260,39 +239,32 @@ protected boolean isEnabled(short level) {\n \n         protected void log(short level, String message, Throwable t) {\n             String msg = formatMessage(level, message, t);\n-\n             synchronized (_out) {\n                 _out.print(msg);\n             }\n         }\n \n         /**\n-         *  Convert <code>message</code> into a string ready to be written to\n-         *  the log.  The string should include the terminating newline.\n-          *\n-         *  @param t        may be null\n+         * Convert <code>message</code> into a string ready to be written to\n+         * the log. The string should include the terminating newline.\n+         * \n+         * @param t may be null\n          */\n         protected String formatMessage(short level, String message, Throwable t) {\n             // we write to a StringBuffer and then flush it all at\n-            // once as a single line, since some environments (e.g., JBoss)\n+            // once as a single line, since some environments(e.g., JBoss)\n             // override the System output stream to flush any calls\n             // to write without regard to line breaks, making the\n             // output incomprehensibe.\n             StringBuffer buf = new StringBuffer();\n \n             buf.append(getOffset());\n             buf.append(\"  \");\n-\n-            if (_diagContext != null) {\n+            if (_diagContext != null)\n                 buf.append(_diagContext).append(\"  \");\n-            }\n-\n             buf.append(getLevelName(level));\n-\n-            if ((level == INFO) || (level == WARN)) {\n+            if (level == INFO || level == WARN)\n                 buf.append(\" \");\n-            }\n-\n             buf.append(\"  [\");\n             buf.append(Thread.currentThread().getName());\n             buf.append(\"] \");\n@@ -308,7 +280,6 @@ protected String formatMessage(short level, String message, Throwable t) {\n                 pwriter.flush();\n                 buf.append(swriter.toString());\n             }\n-\n             return buf.toString();\n         }\n "},{"sha":"4ceee0a04f03d666da42a95e5a183e0541b558c1","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/log/LogOutputStream.java","status":"modified","additions":18,"deletions":35,"changes":53,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/LogOutputStream.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/LogOutputStream.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/LogOutputStream.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74","patch":"@@ -1,46 +1,40 @@\n /*\n  * Copyright 2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *  Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n package org.apache.openjpa.lib.log;\n \n-import org.apache.openjpa.lib.log.*;\n-\n import java.io.*;\n-\n import java.util.*;\n-\n+import org.apache.openjpa.lib.log.*;\n \n /**\n- *  <p>Many standard components log to {@link OutputStream}s.\n- *  This wrapper class extends the {@link ByteArrayOutputStream}\n- *  class and writes all given data to an underlying {@link Log} instance\n- *  whenever it is flushed and the internally held byte array contains a\n- *  newline.</p>\n- *\n- *  @author Abe White, Marc Prud'hommeaux\n+ * Many standard components log to {@link OutputStream}s.\n+ * This wrapper class extends the {@link ByteArrayOutputStream}\n+ * class and writes all given data to an underlying {@link Log} instance\n+ * whenever it is flushed and the internally held byte array contains a newline.\n+ * \n+ * @author Abe White, Marc Prud'hommeaux\n  */\n public class LogOutputStream extends ByteArrayOutputStream {\n     private static final String _sep = System.getProperty(\"line.separator\");\n+\n     private final int _level;\n     private final Log _log;\n \n     /**\n-     *  Constructor.\n-     *\n-     *  @param log                the log to log to\n-     *  @param level        the level to log at\n+     * Constructor.\n+     * \n+     * @param log the log to log to\n+     * @param level the level to log at\n      */\n     public LogOutputStream(Log log, int level) {\n         _log = log;\n@@ -51,12 +45,11 @@ public void flush() throws IOException {\n         super.flush();\n \n         String msg = new String(toByteArray());\n-\n-        if ((msg != null) && (msg.length() > 0) && (msg.indexOf(_sep) != -1)) {\n+        if (msg != null && msg.length() > 0 && msg.indexOf(_sep) != -1) {\n             // break up the message based on the line separator; this\n             // may be because the flushed buffer contains mutliple lines\n             for (StringTokenizer tok = new StringTokenizer(msg, _sep);\n-                    tok.hasMoreTokens();) {\n+                tok.hasMoreTokens(); ) {\n                 String next = tok.nextToken();\n                 log(next);\n             }\n@@ -70,33 +63,23 @@ private void log(String msg) {\n         switch (_level) {\n         case Log.TRACE:\n             _log.trace(msg);\n-\n             break;\n-\n         case Log.DEBUG:\n             _log.debug(msg);\n-\n             break;\n-\n         case Log.INFO:\n             _log.info(msg);\n-\n             break;\n-\n         case Log.WARN:\n             _log.warn(msg);\n-\n             break;\n-\n         case Log.ERROR:\n             _log.error(msg);\n-\n             break;\n-\n         case Log.FATAL:\n             _log.fatal(msg);\n-\n             break;\n         }\n     }\n }\n+"},{"sha":"4f912ae4e6b9c0ecdf68652dc2986cd452338a12","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/log/MultiLogFactory.java","status":"modified","additions":24,"deletions":40,"changes":64,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/MultiLogFactory.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/MultiLogFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/MultiLogFactory.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74","patch":"@@ -1,13 +1,10 @@\n /*\n  * Copyright 2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *  Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n@@ -17,12 +14,11 @@\n \n import java.util.*;\n \n-\n /**\n-*  A LogFactory implementation to pass events through multiple\n-*  LogFactory implementations (such as log4j and LogPanelFactory).\n- *\n-*  @author Steve Kim\n+ * A LogFactory implementation to pass events through multiple\n+ * LogFactory implementations(such as log4j and LogPanelFactory).\n+ * \n+ * @author Steve Kim\n  */\n public class MultiLogFactory implements LogFactory {\n     private List _delegates;\n@@ -31,19 +27,18 @@\n      * create an instance with two delegates\n      */\n     public MultiLogFactory(LogFactory d1, LogFactory d2) {\n-        this(new LogFactory[] { d1, d2 });\n+        this(new LogFactory [] { d1, d2 });\n     }\n \n     public MultiLogFactory(LogFactory d1, LogFactory d2, LogFactory d3) {\n-        this(new LogFactory[] { d1, d2, d3 });\n+        this(new LogFactory [] { d1, d2, d3 });\n     }\n \n     /**\n      * create an instance with the given delegates\n      */\n-    public MultiLogFactory(LogFactory[] delegates) {\n-        _delegates = new LinkedList(Arrays.asList(delegates));\n-        ;\n+    public MultiLogFactory(LogFactory [] delegates) {\n+        _delegates = new LinkedList(Arrays.asList(delegates));;\n     }\n \n     public synchronized void addLogFactory(LogFactory factory) {\n@@ -55,32 +50,27 @@ public synchronized void removeLogFactory(LogFactory factory) {\n     }\n \n     /**\n-     *  Returns the delegates that this MultiLogFactory delegates\n-     *  messages to.\n+     * Returns the delegates that this MultiLogFactory delegates messages to.\n      */\n     public synchronized LogFactory[] getDelegates() {\n-        return (LogFactory[]) _delegates.toArray(new LogFactory[0]);\n+        return(LogFactory[])_delegates.toArray(new LogFactory[0]);\n     }\n \n     /**\n      * returns a Log impl that combines all logs.\n      */\n     public synchronized Log getLog(String channel) {\n         List logs = new ArrayList(_delegates.size());\n-\n-        for (Iterator i = _delegates.iterator(); i.hasNext();) {\n-            LogFactory f = (LogFactory) i.next();\n-\n+        for (Iterator i = _delegates.iterator(); i.hasNext(); ) {\n+            LogFactory f = (LogFactory)i.next();\n             if (f != null) {\n                 Log l = f.getLog(channel);\n-\n-                if (l != null) {\n+                if (l != null)\n                     logs.add(l);\n-                }\n             }\n         }\n \n-        return new MultiLog((Log[]) logs.toArray(new Log[logs.size()]));\n+        return new MultiLog((Log[])logs.toArray(new Log[logs.size()]));\n     }\n \n     /**\n@@ -94,7 +84,7 @@ public MultiLog(Log[] logs) {\n         }\n \n         /**\n-         *  Return the logs that this log delegates to.\n+         * Return the logs that this log delegates to.\n          */\n         public Log[] getDelegates() {\n             return _logs;\n@@ -162,54 +152,48 @@ public void fatal(Object msg, Throwable t) {\n \n         public boolean isTraceEnabled() {\n             for (int i = 0; i < _logs.length; i++)\n-                if (_logs[i].isTraceEnabled()) {\n+                if (_logs[i].isTraceEnabled())\n                     return true;\n-                }\n \n             return false;\n         }\n \n         public boolean isInfoEnabled() {\n             for (int i = 0; i < _logs.length; i++)\n-                if (_logs[i].isInfoEnabled()) {\n+                if (_logs[i].isInfoEnabled())\n                     return true;\n-                }\n \n             return false;\n         }\n \n         public boolean isWarnEnabled() {\n             for (int i = 0; i < _logs.length; i++)\n-                if (_logs[i].isWarnEnabled()) {\n+                if (_logs[i].isWarnEnabled())\n                     return true;\n-                }\n \n             return false;\n         }\n \n         public boolean isDebugEnabled() {\n             for (int i = 0; i < _logs.length; i++)\n-                if (_logs[i].isDebugEnabled()) {\n+                if (_logs[i].isDebugEnabled())\n                     return true;\n-                }\n \n             return false;\n         }\n \n         public boolean isErrorEnabled() {\n             for (int i = 0; i < _logs.length; i++)\n-                if (_logs[i].isErrorEnabled()) {\n+                if (_logs[i].isErrorEnabled())\n                     return true;\n-                }\n \n             return false;\n         }\n \n         public boolean isFatalEnabled() {\n             for (int i = 0; i < _logs.length; i++)\n-                if (_logs[i].isFatalEnabled()) {\n+                if (_logs[i].isFatalEnabled())\n                     return true;\n-                }\n \n             return false;\n         }"},{"sha":"997a7f31f14fe9b7c9ab5f0cd27b82f55e7ffcc2","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/log/NoneLogFactory.java","status":"modified","additions":9,"deletions":12,"changes":21,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/NoneLogFactory.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/NoneLogFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/NoneLogFactory.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74","patch":"@@ -1,34 +1,30 @@\n /*\n  * Copyright 2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *  Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n package org.apache.openjpa.lib.log;\n \n-\n /**\n- *  A log factory implementation that does not do any logging, as\n- *  quickly as possible.\n- *\n- *  @author Patrick Linskey\n+ * A log factory implementation that does not do any logging, as\n+ * quickly as possible.\n+ * \n+ * @author Patrick Linskey\n  */\n public class NoneLogFactory implements LogFactory {\n     public final Log getLog(String channel) {\n         return NoneLog.getInstance();\n     }\n \n     /**\n-     *  No-op log.\n+     * No-op log.\n      */\n     public static class NoneLog implements Log {\n         private static final NoneLog s_log = new NoneLog();\n@@ -98,3 +94,4 @@ public final void fatal(Object o, Throwable t) {\n         }\n     }\n }\n+"},{"sha":"5167812f7ea7aae54301eee8270c13139b116922","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/CFMetaDataParser.java","status":"modified","additions":84,"deletions":124,"changes":208,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/CFMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/CFMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/CFMetaDataParser.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74","patch":"@@ -1,13 +1,10 @@\n /*\n  * Copyright 2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *  Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n@@ -16,23 +13,21 @@\n package org.apache.openjpa.lib.meta;\n \n import org.apache.openjpa.lib.util.*;\n-\n import org.xml.sax.*;\n-\n import serp.util.*;\n \n-\n /**\n- *  <p>Custom SAX parser used by the system to quickly parse metadata files\n- *  for classes.</p>\n- *\n- *  @author Abe White\n- *  @nojavadoc */\n+ * Custom SAX parser used by the system to quickly parse metadata files\n+ * for classes.\n+ * \n+ * @author Abe White\n+ * @nojavadoc\n+ */\n public class CFMetaDataParser extends XMLMetaDataParser {\n     static final String[] PACKAGES = new String[] {\n-            \"java.lang.\", \"java.util.\", \"java.math.\"\n-        };\n-    private static final Localizer _loc = Localizer.forPackage(CFMetaDataParser.class);\n+        \"java.lang.\", \"java.util.\", \"java.math.\" };\n+    private static final Localizer _loc = Localizer.forPackage\n+        (CFMetaDataParser.class);\n \n     // the current package and class being parsed\n     private String _package = null;\n@@ -43,44 +38,44 @@ public CFMetaDataParser() {\n     }\n \n     /**\n-     *  The name of the package element.  Defaults to \"package\".\n+     * The name of the package element. Defaults to \"package\".\n      */\n     protected boolean isPackageElementName(String name) {\n         return \"package\".equals(name);\n     }\n \n     /**\n-     *  The attribute of the package element that holds the name, or null to\n-     *  use the element text.  Defaults to \"name\".\n+     * The attribute of the package element that holds the name, or null to\n+     * use the element text. Defaults to \"name\".\n      */\n     protected String getPackageAttributeName() {\n         return \"name\";\n     }\n \n     /**\n-     *  The depth of the package element.  Defaults to 1.\n+     * The depth of the package element. Defaults to 1.\n      */\n     protected int getPackageElementDepth() {\n         return 1;\n     }\n \n     /**\n-     *  The name of the class element.  Defaults to \"class\".\n+     * The name of the class element. Defaults to \"class\".\n      */\n     protected boolean isClassElementName(String name) {\n         return \"class\".equals(name);\n     }\n \n     /**\n-     *  The attribute of the class element that holds the name, or null to\n-     *  use the element text.  Defaults to \"name\".\n+     * The attribute of the class element that holds the name, or null to\n+     * use the element text. Defaults to \"name\".\n      */\n     protected String getClassAttributeName() {\n         return \"name\";\n     }\n \n     /**\n-     *  The depth of the class element.  Defaults to 2.\n+     * The depth of the class element. Defaults to 2.\n      */\n     protected int getClassElementDepth() {\n         return 2;\n@@ -90,31 +85,21 @@ protected boolean startElement(String name, Attributes attrs)\n         throws SAXException {\n         // skip root element\n         int depth = currentDepth();\n-\n-        if (depth == 0) {\n+        if (depth == 0)\n             return true;\n-        }\n \n         try {\n-            if ((depth == getPackageElementDepth()) &&\n-                    isPackageElementName(name)) {\n+            if (depth == getPackageElementDepth()\n+                && isPackageElementName(name))\n                 return startPackage(name, attrs);\n-            }\n-\n-            if ((depth == getClassElementDepth()) && isClassElementName(name)) {\n+            if (depth == getClassElementDepth() && isClassElementName(name))\n                 return startClass(name, attrs);\n-            }\n-\n-            if ((depth > getClassElementDepth()) && (_class != null) &&\n-                    (getClassAttributeName() != null)) {\n+            if (depth > getClassElementDepth() && _class != null\n+                && getClassAttributeName() != null)\n                 return startClassElement(name, attrs);\n-            }\n-\n-            if ((depth > getPackageElementDepth()) && (_package != null) &&\n-                    (getPackageAttributeName() != null)) {\n+            if (depth > getPackageElementDepth() && _package != null\n+                && getPackageAttributeName() != null)\n                 return startPackageElement(name, attrs);\n-            }\n-\n             return startSystemElement(name, attrs);\n         } catch (SAXException se) {\n             throw se;\n@@ -126,27 +111,24 @@ protected boolean startElement(String name, Attributes attrs)\n     protected void endElement(String name) throws SAXException {\n         // skip root element\n         int depth = currentDepth();\n-\n-        if (depth == 0) {\n+        if (depth == 0)\n             return;\n-        }\n \n         try {\n-            if ((depth == getPackageElementDepth()) &&\n-                    isPackageElementName(name)) {\n+            if (depth == getPackageElementDepth()\n+                && isPackageElementName(name))\n                 endPackage(name);\n-            } else if ((depth == getClassElementDepth()) &&\n-                    isClassElementName(name)) {\n+            else if (depth == getClassElementDepth()\n+                && isClassElementName(name))\n                 endClass(name);\n-            } else if ((depth > getClassElementDepth()) && (_class != null) &&\n-                    (getClassAttributeName() != null)) {\n+            else if (depth > getClassElementDepth() && _class != null\n+                && getClassAttributeName() != null)\n                 endClassElement(name);\n-            } else if ((depth > getPackageElementDepth()) &&\n-                    (_package != null) && (getPackageAttributeName() != null)) {\n+            else if (depth > getPackageElementDepth() && _package != null\n+                && getPackageAttributeName() != null)\n                 endPackageElement(name);\n-            } else {\n+            else\n                 endSystemElement(name);\n-            }\n         } catch (SAXException se) {\n             throw se;\n         } catch (NullPointerException npe) {\n@@ -155,119 +137,110 @@ protected void endElement(String name) throws SAXException {\n     }\n \n     /**\n-     *  Start a package.  Parses out package attribute by default.\n-     *  Return false to skip package element and its contents.\n+     * Start a package. Parses out package attribute by default.\n+     * Return false to skip package element and its contents.\n      */\n     protected boolean startPackage(String elem, Attributes attrs)\n         throws SAXException {\n         if (getPackageAttributeName() != null) {\n             _package = attrs.getValue(getPackageAttributeName());\n-\n-            if (_package == null) {\n+            if (_package == null)\n                 _package = \"\";\n-            }\n         }\n-\n         return true;\n     }\n \n     /**\n-     *  End a package.  Parses contained text by default.\n+     * End a package. Parses contained text by default.\n      */\n     protected void endPackage(String elem) {\n-        if (getPackageAttributeName() != null) {\n+        if (getPackageAttributeName() != null)\n             _package = null;\n-        } else {\n+        else\n             _package = currentText();\n-        }\n     }\n \n     /**\n-     *  Start a class.  Parses out class name by default.  Return\n-     *  false to skip class element and its contents.\n+     * Start a class. Parses out class name by default. Return\n+     * false to skip class element and its contents.\n      */\n     protected boolean startClass(String elem, Attributes attrs)\n         throws SAXException {\n         if (getClassAttributeName() != null) {\n             _class = attrs.getValue(getClassAttributeName());\n-\n-            if ((_package != null) && (_package.length() > 0) &&\n-                    (_class.indexOf('.') == -1)) {\n+            if (_package != null && _package.length() > 0\n+                && _class.indexOf('.') == -1)\n                 _class = _package + \".\" + _class;\n-            }\n         }\n-\n         return true;\n     }\n \n     /**\n-     *  End a class.  Parses contained text by default.\n+     * End a class. Parses contained text by default.\n      */\n     protected void endClass(String elem) throws SAXException {\n-        if (getClassAttributeName() != null) {\n+        if (getClassAttributeName() != null)\n             _class = null;\n-        } else {\n+        else {\n             _class = currentText();\n-\n-            if ((_package != null) && (_package.length() > 0) &&\n-                    (_class.indexOf('.') == -1)) {\n+            if (_package != null && _package.length() > 0\n+                && _class.indexOf('.') == -1)\n                 _class = _package + \".\" + _class;\n-            }\n         }\n     }\n \n     /**\n-     *  Override this method marking the start of an element outside of any\n-     *  package or class.\n+     * Override this method marking the start of an element outside of any\n+     * package or class.\n      */\n     protected boolean startSystemElement(String name, Attributes attrs)\n         throws SAXException {\n         return false;\n     }\n \n     /**\n-     *  Override this method marking the end of an element outside of any\n-     *  package or class.\n+     * Override this method marking the end of an element outside of any\n+     * package or class.\n      */\n     protected void endSystemElement(String name) throws SAXException {\n     }\n \n     /**\n-     *  Override this method marking the start of an element within a declared\n-     *  package.\n+     * Override this method marking the start of an element within a declared\n+     * package.\n      */\n     protected boolean startPackageElement(String name, Attributes attrs)\n         throws SAXException {\n         return false;\n     }\n \n     /**\n-     *  Override this method marking the end of an element within a declared\n-     *  package.\n+     * Override this method marking the end of an element within a declared\n+     * package.\n      */\n     protected void endPackageElement(String name) throws SAXException {\n     }\n \n     /**\n-     *  Override this method marking the start of an element within a declared\n-     *  class.\n+     * Override this method marking the start of an element within a declared\n+     * class.\n      */\n     protected boolean startClassElement(String name, Attributes attrs)\n         throws SAXException {\n         return false;\n     }\n \n     /**\n-     *  Override this method marking the end of an element within a declared\n-     *  class.\n+     * Override this method marking the end of an element within a declared\n+     * class.\n      */\n     protected void endClassElement(String name) throws SAXException {\n     }\n \n     /**\n-     *  Override this method to clear any state and ready the parser for\n-     *  a new document.  Subclasses should call\n-     *  <code>super.reset ()</code> to clear superclass state.\n+     * Override this method to clear any state and ready the parser for\n+     * a new document. Subclasses should call\n+     * <code>super.reset()</code> to clear superclass state.\n      */\n     protected void reset() {\n         super.reset();\n@@ -276,63 +249,51 @@ protected void reset() {\n     }\n \n     /**\n-     *  Return the current class being parsed; the returned name will\n-     *  be fully qualified.\n+     * Return the current class being parsed; the returned name will\n+     * be fully qualified.\n      */\n     protected String currentClassName() {\n         return _class;\n     }\n \n     /**\n-     *  Return the current package being parsed.\n+     * Return the current package being parsed.\n      */\n     protected String currentPackage() {\n         return _package;\n     }\n \n     /**\n-     *  Helper method to create the {@link Class} for the given name,\n-     *  taking into account the package currently being parsed for relative\n-     *  class names.\n+     * Helper method to create the {@link Class} for the given name,\n+     * taking into account the package currently being parsed for relative\n+     * class names.\n      */\n     protected Class classForName(String name, boolean resolve)\n         throws SAXException {\n-        if (name == null) {\n+        if (name == null)\n             return null;\n-        }\n-\n         Class cls = classForName(name, _package, resolve, currentClassLoader());\n-\n-        if (cls == null) {\n+        if (cls == null)\n             throw getException(_loc.get(\"invalid-class\", name));\n-        }\n-\n         return cls;\n     }\n \n     /**\n-      *  Load the given class name against the given package and the set\n-     *  of accepted standard packages.  Return null if the class cannot be\n-     *  loaded.\n+     * Load the given class name against the given package and the set\n+     * of accepted standard packages. Return null if the class cannot be loaded.\n      */\n-    public static Class classForName(String name, String pkg, boolean resolve,\n-        ClassLoader loader) {\n-        if ((name == null) || (name.length() == 0)) {\n+    public static Class classForName(String name, String pkg,\n+        boolean resolve, ClassLoader loader) {\n+        if (name == null || name.length() == 0)\n             return null;\n-        }\n \n-        if (loader == null) {\n+        if (loader == null)\n             loader = Thread.currentThread().getContextClassLoader();\n-        }\n-\n         boolean fullName = name.indexOf('.') != -1;\n-        boolean noPackage = (pkg == null) || (pkg.length() == 0);\n-\n+        boolean noPackage = pkg == null || pkg.length() == 0;\n         try {\n-            if (fullName || noPackage) {\n+            if (fullName || noPackage)\n                 return Strings.toClass(name, resolve, loader);\n-            }\n-\n             return Strings.toClass(pkg + \".\" + name, resolve, loader);\n         } catch (RuntimeException re) {\n         }\n@@ -354,7 +315,6 @@ public static Class classForName(String name, String pkg, boolean resolve,\n                 }\n             }\n         }\n-\n         return null;\n     }\n }"},{"sha":"86e7b77dac5237a33bc4e6ab876be80da22d926b","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/CFMetaDataSerializer.java","status":"modified","additions":27,"deletions":40,"changes":67,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/CFMetaDataSerializer.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/CFMetaDataSerializer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/CFMetaDataSerializer.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74","patch":"@@ -1,110 +1,97 @@\n /*\n  * Copyright 2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *  Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n package org.apache.openjpa.lib.meta;\n \n+import java.util.*;\n import org.apache.commons.collections.map.*;\n-\n import org.apache.openjpa.lib.util.*;\n-\n import org.xml.sax.*;\n \n-import java.util.*;\n-\n-\n /**\n- *  <p>Helps serialize metadata objects to package and class elements.</p>\n- *\n- *  @see CFMetaDataParser\n- *\n- *  @author Abe White\n- *  @nojavadoc */\n+ * Helps serialize metadata objects to package and class elements.\n+ * \n+ * @see CFMetaDataParser\n+ * \n+ * @author Abe White\n+ * @nojavadoc\n+ */\n public abstract class CFMetaDataSerializer extends XMLMetaDataSerializer {\n-    private static final Localizer _loc = Localizer.forPackage(CFMetaDataSerializer.class);\n+    private static final Localizer _loc = Localizer.forPackage\n+        (CFMetaDataSerializer.class);\n+\n     private String _package = null;\n \n     /**\n-     *  The default package for objects being serialized.\n+     * The default package for objects being serialized.\n      */\n     protected String getPackage() {\n         return _package;\n     }\n \n     /**\n-     *  The default package for objects being serialized.\n+     * The default package for objects being serialized.\n      */\n     protected void setPackage(String pkg) {\n         _package = pkg;\n     }\n \n     /**\n-     *  Helper method to group objects by package.\n-     *\n-     *  @return mapping of package name to a collection of objects in\n-     *                          that package\n+     * Helper method to group objects by package.\n+     * \n+     * @return mapping of package name to a collection of objects in\n+     * that package\n      */\n     protected Map groupByPackage(Collection objs) throws SAXException {\n         Map packages = new LinkedMap();\n         String packageName;\n         Collection packageObjs;\n         Object obj;\n-\n         for (Iterator itr = objs.iterator(); itr.hasNext();) {\n             obj = itr.next();\n             packageName = getPackage(obj);\n             packageObjs = (Collection) packages.get(packageName);\n-\n             if (packageObjs == null) {\n                 packageObjs = new LinkedList();\n                 packages.put(packageName, packageObjs);\n             }\n-\n             packageObjs.add(obj);\n         }\n-\n         return packages;\n     }\n \n     /**\n-     *  Return the package name of the given object, or null if not in a\n-     *  package.  Used by {@link #groupByPackage}.  Returns null by default.\n+     * Return the package name of the given object, or null if not in a\n+     * package. Used by {@link #groupByPackage}. Returns null by default.\n      */\n     protected String getPackage(Object obj) {\n         return null;\n     }\n \n     /**\n-     *  Returns the given class name, stripping the package if it is not\n-     *  needed.\n+     * Returns the given class name, stripping the package if it is not needed.\n      */\n     protected String getClassName(String name) {\n         // check if in current package; make sure not in a sub-package\n-        if ((_package != null) && (name.lastIndexOf('.') == _package.length()) &&\n-                name.startsWith(_package)) {\n+        if (_package != null && name.lastIndexOf('.') == _package.length()\n+            && name.startsWith(_package))\n             return name.substring(_package.length() + 1);\n-        }\n \n         // check other known packages\n         String[] packages = CFMetaDataParser.PACKAGES;\n-\n         for (int i = 0; i < packages.length; i++)\n-            if (name.startsWith(packages[i]) &&\n-                    (name.lastIndexOf('.') == (packages[i].length() - 1))) {\n+            if (name.startsWith(packages[i])\n+                && name.lastIndexOf('.') == packages[i].length() - 1)\n                 return name.substring(packages[i].length());\n-            }\n-\n         return name;\n     }\n }"},{"sha":"fe729f9c2a634574f80f66442837261450f81d53","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClassAnnotationMetaDataFilter.java","status":"modified","additions":26,"deletions":66,"changes":92,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClassAnnotationMetaDataFilter.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClassAnnotationMetaDataFilter.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClassAnnotationMetaDataFilter.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74","patch":"@@ -1,152 +1,126 @@\n /*\n  * Copyright 2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *  Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n package org.apache.openjpa.lib.meta;\n \n-import serp.bytecode.lowlevel.*;\n-\n import java.io.*;\n-\n+import serp.bytecode.lowlevel.*;\n \n /**\n- *  <p>Filter that looks for classes with one of a set of annotations.\n- *  See JDK 1.5 JVM spec for details on annotation bytecode:<br />\n- *  java.sun.com/docs/books/vmspec/2nd-edition/ClassFileFormat-final-draft.pdf\n- *  </p>\n- *\n- *  @author Abe White\n- *  @nojavadoc */\n+ * Filter that looks for classes with one of a set of annotations.\n+ * See JDK 1.5 JVM spec for details on annotation bytecode:<br />\n+ * java.sun.com/docs/books/vmspec/2nd-edition/ClassFileFormat-final-draft.pdf\n+ * \n+ * @author Abe White\n+ * @nojavadoc\n+ */\n public class ClassAnnotationMetaDataFilter implements MetaDataFilter {\n     private final String[] _annos;\n \n     /**\n-     *  Constructor; supply annotation to match against.\n+     * Constructor; supply annotation to match against.\n      */\n     public ClassAnnotationMetaDataFilter(Class anno) {\n         this(new Class[] { anno });\n     }\n \n     /**\n-     *  Constructor; supply annotations to match against.\n+     * Constructor; supply annotations to match against.\n      */\n     public ClassAnnotationMetaDataFilter(Class[] annos) {\n         _annos = new String[annos.length];\n-\n         for (int i = 0; i < annos.length; i++)\n             _annos[i] = \"L\" + annos[i].getName().replace('.', '/') + \";\";\n     }\n \n     public boolean matches(Resource rsrc) throws IOException {\n-        if ((_annos.length == 0) || !rsrc.getName().endsWith(\".class\")) {\n+        if (_annos.length == 0 || !rsrc.getName().endsWith(\".class\"))\n             return false;\n-        }\n \n         ConstantPoolTable table = new ConstantPoolTable(rsrc.getContent());\n         int idx = table.getEndIndex();\n         idx += 6; // skip access, cls, super\n \n         // skip interfaces\n         int interfaces = table.readUnsignedShort(idx);\n-        idx += (2 + (interfaces * 2));\n+        idx += 2 + interfaces * 2;\n \n         // skip fields and methods\n         int fields = table.readUnsignedShort(idx);\n         idx += 2;\n-\n         for (int i = 0; i < fields; i++)\n             idx += skipFieldOrMethod(table, idx);\n-\n         int methods = table.readUnsignedShort(idx);\n         idx += 2;\n-\n         for (int i = 0; i < methods; i++)\n             idx += skipFieldOrMethod(table, idx);\n \n         // look for annotation attrs\n         int attrs = table.readUnsignedShort(idx);\n         idx += 2;\n-\n         int name;\n-\n         for (int i = 0; i < attrs; i++) {\n             name = table.readUnsignedShort(idx);\n             idx += 2;\n-\n-            if (\"RuntimeVisibleAnnotations\".equals(table.readString(table.get(\n-                                name)))) {\n+            if (\"RuntimeVisibleAnnotations\".equals(table.readString\n+                (table.get(name))))\n                 return matchAnnotations(table, idx + 4);\n-            }\n-\n-            idx += (4 + table.readInt(idx));\n+            idx += 4 + table.readInt(idx);\n         }\n-\n         return false;\n     }\n \n     /**\n-     *  Return whether the given annotations match our candidates.\n+     * Return whether the given annotations match our candidates.\n      */\n     private boolean matchAnnotations(ConstantPoolTable table, int idx) {\n         int annos = table.readUnsignedShort(idx);\n         idx += 2;\n \n         int type;\n         int props;\n-\n         for (int i = 0; i < annos; i++) {\n             type = table.readUnsignedShort(idx);\n             idx += 2;\n-\n-            if (matchAnnotation(table.readString(table.get(type)))) {\n+            if (matchAnnotation(table.readString(table.get(type))))\n                 return true;\n-            }\n \n             props = table.readUnsignedShort(idx);\n             idx += 2;\n-\n             for (int j = 0; j < props; j++) {\n                 idx += 2; // name\n                 idx += skipAnnotationPropertyValue(table, idx);\n             }\n         }\n-\n         return false;\n     }\n \n     /**\n-     *  Return whether the given annotation matches our candidates.\n+     * Return whether the given annotation matches our candidates.\n      */\n     private boolean matchAnnotation(String name) {\n         for (int i = 0; i < _annos.length; i++)\n-            if (name.equals(_annos[i])) {\n+            if (name.equals(_annos[i]))\n                 return true;\n-            }\n-\n         return false;\n     }\n \n     /**\n-     *  Skip an annotation property value, returning the number of bytes\n-     *  skipped.\n+     * Skip an annotation property value, returning the number of bytes skipped.\n      */\n     private static int skipAnnotationPropertyValue(ConstantPoolTable table,\n         int idx) {\n         int skipped = 0;\n-\n-        switch (table.readByte(idx + skipped++)) // value type\n-        {\n+        switch (table.readByte(idx + skipped++)) {\n         case 'Z': // bool\n         case 'B': // byte\n         case 'C': // char\n@@ -158,54 +132,40 @@ private static int skipAnnotationPropertyValue(ConstantPoolTable table,\n         case 's': // string\n         case 'c': // class\n             skipped += 2;\n-\n             break;\n-\n         case 'e': // enum ptr\n             skipped += 4;\n-\n             break;\n-\n         case '[': // array\n-\n             int size = table.readUnsignedShort(idx + skipped);\n             skipped += 2;\n-\n             for (int i = 0; i < size; i++)\n                 skipped += skipAnnotationPropertyValue(table, idx + skipped);\n-\n             break;\n-\n         case '@': // anno\n             skipped += 2; // type\n-\n             int props = table.readUnsignedShort(idx + skipped);\n             skipped += 2;\n-\n             for (int j = 0; j < props; j++) {\n                 skipped += 2; // name\n                 skipped += skipAnnotationPropertyValue(table, idx + skipped);\n             }\n-\n             break;\n         }\n-\n         return skipped;\n     }\n \n     /**\n-     *  Skip the current field or method, returning the number of bytes skipped.\n+     * Skip the current field or method, returning the number of bytes skipped.\n      */\n     private static int skipFieldOrMethod(ConstantPoolTable table, int idx) {\n         int attrs = table.readUnsignedShort(idx + 6);\n         int skipped = 8;\n         int len;\n-\n         for (int i = 0; i < attrs; i++) {\n             len = table.readInt(idx + skipped + 2);\n-            skipped += (6 + len);\n+            skipped += 6 + len;\n         }\n-\n         return skipped;\n     }\n }"},{"sha":"e4b34a2de29813069a6afc8136aff65ff00c984f","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClassArgParser.java","status":"modified","additions":160,"deletions":327,"changes":487,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClassArgParser.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClassArgParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClassArgParser.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74","patch":"@@ -1,235 +1,199 @@\n /*\n  * Copyright 2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *  Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n package org.apache.openjpa.lib.meta;\n \n+import java.io.*;\n+import java.net.*;\n+import java.util.*;\n import org.apache.commons.lang.exception.*;\n-\n import org.apache.openjpa.lib.util.*;\n-\n import org.xml.sax.*;\n import org.xml.sax.Attributes;\n-\n import serp.bytecode.lowlevel.*;\n-\n import serp.util.*;\n \n-import java.io.*;\n-\n-import java.net.*;\n-\n-import java.util.*;\n-\n-\n /**\n- *  <p>Parser used to resolve arguments into java classes.\n- *  Interprets command-line args as either class names, .class files or\n- *  resources, .java files or resources, or metadata files or resources\n- *  conforming to the common format defined by {@link CFMetaDataParser}.\n- *  Transforms the information in these args into {@link Class} instances.</p>\n- *\n- *  <p>Note that when parsing .java files, only the main class in the file\n- *  is detected.  Other classes defined in the file, such as inner classes,\n- *  are not added to the returned classes list.</p>\n- *\n- *  @author Abe White\n- *  @nojavadoc */\n+ * Parser used to resolve arguments into java classes.\n+ * Interprets command-line args as either class names, .class files or\n+ * resources, .java files or resources, or metadata files or resources\n+ * conforming to the common format defined by {@link CFMetaDataParser}.\n+ * Transforms the information in these args into {@link Class} instances.\n+ *  Note that when parsing .java files, only the main class in the file\n+ * is detected. Other classes defined in the file, such as inner classes,\n+ * are not added to the returned classes list.\n+ * \n+ * @author Abe White\n+ * @nojavadoc\n+ */\n public class ClassArgParser {\n-    private static final int TOKEN_EOF = -1;\n+    private static final int TOKEN_EOF  = -1;\n     private static final int TOKEN_NONE = 0;\n     private static final int TOKEN_PACKAGE = 1;\n     private static final int TOKEN_CLASS = 2;\n     private static final int TOKEN_PACKAGE_NOATTR = 3;\n     private static final int TOKEN_CLASS_NOATTR = 4;\n-    private static final Localizer _loc = Localizer.forPackage(ClassArgParser.class);\n+\n+    private static final Localizer _loc = Localizer.forPackage\n+        (ClassArgParser.class);\n+\n     private ClassLoader _loader = null;\n     private char[] _packageAttr = \"name\".toCharArray();\n     private char[] _classAttr = \"name\".toCharArray();\n-    private char[][] _beginElements = {\n-            { 'p' },\n-            { 'c' }\n-        };\n-    private char[][] _endElements = {\n-            \"ackage\".toCharArray(), \"lass\".toCharArray()\n-        };\n+    private char[][] _beginElements = { { 'p' }, { 'c' } };\n+    private char[][] _endElements = { \"ackage\".toCharArray(),\n+                                                \"lass\".toCharArray() };\n \n     /**\n-     *  The class loader with which to load parsed classes.\n+     * The class loader with which to load parsed classes.\n      */\n     public ClassLoader getClassLoader() {\n         return _loader;\n     }\n \n     /**\n-     *  The class loader with which to load parsed classes.\n+     * The class loader with which to load parsed classes.\n      */\n     public void setClassLoader(ClassLoader loader) {\n         _loader = loader;\n     }\n \n     /**\n-     *  Set the the relevant metadata file structure so that metadata files\n-     *  containing class names can be parsed.  Null attribute names indicate\n-     *  that the text content of the element contains the data.\n+     * Set the the relevant metadata file structure so that metadata files\n+     * containing class names can be parsed. Null attribute names indicate\n+     * that the text content of the element contains the data.\n      */\n     public void setMetaDataStructure(String packageElementName,\n         String packageAttributeName, String[] classElementNames,\n         String classAttributeName) {\n         // calculate how many chars deep we have to go to identify each element\n-        // name as unique.  this is extremely inefficient for large N, but \n+        // name as unique.  this is extremely inefficient for large N, but\n         // should never be called for more than a few elements\n         char[] buf = new char[classElementNames.length + 1];\n         int charIdx = 0;\n-\n         for (; true; charIdx++) {\n             for (int i = 0; i < buf.length; i++) {\n                 if (i == 0) {\n-                    if (charIdx == packageElementName.length()) {\n-                        throw new UnsupportedOperationException(_loc.get(\n-                                \"cant-diff-elems\"));\n-                    }\n-\n+                    if (charIdx == packageElementName.length())\n+                        throw new UnsupportedOperationException(_loc.get\n+                            (\"cant-diff-elems\"));\n                     buf[i] = packageElementName.charAt(charIdx);\n                 } else {\n-                    if (charIdx == classElementNames[i - 1].length()) {\n-                        throw new UnsupportedOperationException(_loc.get(\n-                                \"cant-diff-elems\"));\n-                    }\n-\n+                    if (charIdx == classElementNames[i - 1].length())\n+                        throw new UnsupportedOperationException(_loc.get\n+                            (\"cant-diff-elems\"));\n                     buf[i] = classElementNames[i - 1].charAt(charIdx);\n                 }\n             }\n-\n-            if (charsUnique(buf)) {\n+            if (charsUnique(buf))\n                 break;\n-            }\n         }\n \n         _packageAttr = (packageAttributeName == null) ? null\n-                                                      : packageAttributeName.toCharArray();\n+            : packageAttributeName.toCharArray();\n         _classAttr = (classAttributeName == null) ? null\n-                                                  : classAttributeName.toCharArray();\n+            : classAttributeName.toCharArray();\n         _beginElements = new char[classElementNames.length + 1][];\n         _endElements = new char[classElementNames.length + 1][];\n-        _beginElements[0] = packageElementName.substring(0, charIdx + 1)\n-                                              .toCharArray();\n-        _endElements[0] = packageElementName.substring(charIdx + 1).toCharArray();\n-\n+        _beginElements[0] = packageElementName.substring(0, charIdx + 1).\n+            toCharArray();\n+        _endElements[0] = packageElementName.substring(charIdx + 1).\n+            toCharArray();\n         for (int i = 0; i < classElementNames.length; i++) {\n-            _beginElements[i + 1] = classElementNames[i].substring(0,\n-                    charIdx + 1).toCharArray();\n-            _endElements[i + 1] = classElementNames[i].substring(charIdx + 1)\n-                                                      .toCharArray();\n+            _beginElements[i + 1] = classElementNames[i].\n+                substring(0, charIdx + 1).toCharArray();\n+            _endElements[i + 1] = classElementNames[i].\n+                substring(charIdx + 1).toCharArray();\n         }\n     }\n \n     /**\n-     *  Return true if all characters in given buffer are unique.\n+     * Return true if all characters in given buffer are unique.\n      */\n     private static boolean charsUnique(char[] buf) {\n         for (int i = buf.length - 1; i >= 0; i--)\n             for (int j = 0; j < i; j++)\n-                if (buf[j] == buf[i]) {\n+                if (buf[j] == buf[i])\n                     return false;\n-                }\n-\n         return true;\n     }\n \n     /**\n-     *  Return the {@link Class} representation of the class(es) named in the\n-     *  given arg.\n-     *\n-      *  @param arg                a class name, .java file, .class file, or metadata\n-     *                                  file naming        the type(s) to act on\n+     * Return the {@link Class} representation of the class(es) named in the\n+     * given arg.\n+     * \n+     * @param arg a class name, .java file, .class file, or metadata\n+     * file naming the type(s) to act on\n      */\n     public Class[] parseTypes(String arg) {\n         String[] names = parseTypeNames(arg);\n         Class[] objs = new Class[names.length];\n-\n         for (int i = 0; i < names.length; i++)\n             objs[i] = Strings.toClass(names[i], _loader);\n-\n         return objs;\n     }\n \n     /**\n-     *  Return the {@link Class} representation of the class(es) named in the\n-     *  given metadatas.\n+     * Return the {@link Class} representation of the class(es) named in the\n+     * given metadatas.\n      */\n     public Class[] parseTypes(MetaDataIterator itr) {\n         String[] names = parseTypeNames(itr);\n         Class[] objs = new Class[names.length];\n-\n         for (int i = 0; i < names.length; i++)\n             objs[i] = Strings.toClass(names[i], _loader);\n-\n         return objs;\n     }\n \n     /**\n-     *  Return a mapping of each metadata resource to an array of its\n-     *  contained classes.\n+     * Return a mapping of each metadata resource to an array of its\n+     * contained classes.\n      */\n     public Map mapTypes(MetaDataIterator itr) {\n         Map map = mapTypeNames(itr);\n         Map.Entry entry;\n         String[] names;\n         Class[] objs;\n-\n         for (Iterator i = map.entrySet().iterator(); i.hasNext();) {\n             entry = (Map.Entry) i.next();\n             names = (String[]) entry.getValue();\n             objs = new Class[names.length];\n-\n             for (int j = 0; j < names.length; j++)\n                 objs[j] = Strings.toClass(names[j], _loader);\n-\n             entry.setValue(objs);\n         }\n-\n         return map;\n     }\n \n     /**\n-     *  Return the names of the class(es) from the given arg.\n-     *\n-      *  @param arg                a class name, .java file, .class file, or metadata\n-     *                                  file naming        the type(s) to act on\n-     *  @throws IllegalArgumentException with appropriate message on error\n+     * Return the names of the class(es) from the given arg.\n+     * \n+     * @param arg a class name, .java file, .class file, or metadata\n+     * file naming the type(s) to act on\n+     * @throws IllegalArgumentException with appropriate message on error\n      */\n     public String[] parseTypeNames(String arg) {\n-        if (arg == null) {\n+        if (arg == null)\n             return new String[0];\n-        }\n \n         try {\n             File file = Files.getFile(arg, _loader);\n-\n-            if (arg.endsWith(\".class\")) {\n+            if (arg.endsWith(\".class\"))\n                 return new String[] { getFromClassFile(file) };\n-            }\n-\n-            if (arg.endsWith(\".java\")) {\n+            if (arg.endsWith(\".java\"))\n                 return new String[] { getFromJavaFile(file) };\n-            }\n-\n             if (file.exists()) {\n                 Collection col = getFromMetaDataFile(file);\n-\n-                return (String[]) col.toArray(new String[col.size()]);\n+                return(String[]) col.toArray(new String[col.size()]);\n             }\n         } catch (Exception e) {\n             throw new NestableRuntimeException(_loc.get(\"class-arg\", arg), e);\n@@ -240,145 +204,120 @@ public Map mapTypes(MetaDataIterator itr) {\n     }\n \n     /**\n-     *  Return the names of the class(es) from the given metadatas.\n+     * Return the names of the class(es) from the given metadatas.\n      */\n     public String[] parseTypeNames(MetaDataIterator itr) {\n-        if (itr == null) {\n+        if (itr == null)\n             return new String[0];\n-        }\n \n         List names = new ArrayList();\n         Object source = null;\n-\n         try {\n             while (itr.hasNext()) {\n                 source = itr.next();\n                 appendTypeNames(source, itr.getInputStream(), names);\n             }\n         } catch (Exception e) {\n-            throw new NestableRuntimeException(_loc.get(\"class-arg\", source), e);\n+            throw new NestableRuntimeException(_loc.get(\"class-arg\", source),\n+                e);\n         }\n-\n-        return (String[]) names.toArray(new String[names.size()]);\n+        return(String[]) names.toArray(new String[names.size()]);\n     }\n \n     /**\n-     *  Parse the names in the given metadata iterator stream, closing the\n-     *  stream on completion.\n+     * Parse the names in the given metadata iterator stream, closing the\n+     * stream on completion.\n      */\n     private void appendTypeNames(Object source, InputStream in, List names)\n         throws IOException {\n         try {\n-            if (source.toString().endsWith(\".class\")) {\n+            if (source.toString().endsWith(\".class\"))\n                 names.add(getFromClass(in));\n-            }\n-\n             names.addAll(getFromMetaData(new InputStreamReader(in)));\n-        } finally {\n-            try {\n-                in.close();\n-            } catch (IOException ioe) {\n-            }\n+        }\n+        finally {\n+            try { in.close(); } catch (IOException ioe) {}\n         }\n     }\n \n     /**\n-     *  Return a mapping of each metadata resource to an array of its contained\n-     *  class names.\n+     * Return a mapping of each metadata resource to an array of its contained\n+     * class names.\n      */\n     public Map mapTypeNames(MetaDataIterator itr) {\n-        if (itr == null) {\n+        if (itr == null)\n             return Collections.EMPTY_MAP;\n-        }\n \n         Map map = new HashMap();\n         Object source = null;\n         List names = new ArrayList();\n-\n         try {\n             while (itr.hasNext()) {\n                 source = itr.next();\n                 appendTypeNames(source, itr.getInputStream(), names);\n-\n-                if (!names.isEmpty()) {\n-                    map.put(source,\n-                        (String[]) names.toArray(new String[names.size()]));\n-                }\n-\n+                if (!names.isEmpty())\n+                    map.put(source, (String[]) names.toArray\n+                        (new String[names.size()]));\n                 names.clear();\n             }\n         } catch (Exception e) {\n-            throw new NestableRuntimeException(_loc.get(\"class-arg\", source), e);\n+            throw new NestableRuntimeException(_loc.get(\"class-arg\", source),\n+                e);\n         }\n-\n         return map;\n     }\n \n     /**\n-     *  Returns the class named in the given .class file.\n+     * Returns the class named in the given .class file.\n      */\n     private String getFromClassFile(File file) throws IOException {\n         FileInputStream fin = null;\n-\n         try {\n             fin = new FileInputStream(file);\n-\n             return getFromClass(fin);\n-        } finally {\n-            if (fin != null) {\n-                try {\n-                    fin.close();\n-                } catch (IOException ioe) {\n-                }\n-            }\n+        }\n+        finally {\n+            if (fin != null)\n+                try { fin.close(); } catch (IOException ioe) {}\n         }\n     }\n \n     /**\n-     *  Returns the class name in the given .class bytecode.\n+     * Returns the class name in the given .class bytecode.\n      */\n     private String getFromClass(InputStream in) throws IOException {\n         ConstantPoolTable table = new ConstantPoolTable(in);\n         int idx = table.getEndIndex();\n         idx += 2; // access flags\n-\n         int clsEntry = table.readUnsignedShort(idx);\n         int utfEntry = table.readUnsignedShort(table.get(clsEntry));\n-\n         return table.readString(table.get(utfEntry)).replace('/', '.');\n     }\n \n     /**\n-     *  Returns the class named in the given .java file.\n+     * Returns the class named in the given .java file.\n      */\n     private String getFromJavaFile(File file) throws IOException {\n         BufferedReader in = null;\n-\n         try {\n             // find the line with the package declaration\n             in = new BufferedReader(new FileReader(file));\n-\n             String line;\n             StringBuffer pack = null;\n-\n             while ((line = in.readLine()) != null) {\n                 line = line.trim();\n-\n                 if (line.startsWith(\"package \")) {\n                     line = line.substring(8).trim();\n \n                     // strip off anything beyond the package declaration\n                     pack = new StringBuffer();\n-\n                     for (int i = 0; i < line.length(); i++) {\n-                        if (Character.isJavaIdentifierPart(line.charAt(i)) ||\n-                                (line.charAt(i) == '.')) {\n+                        if (Character.isJavaIdentifierPart(line.charAt(i))\n+                            || line.charAt(i) == '.')\n                             pack.append(line.charAt(i));\n-                        } else {\n+                        else\n                             break;\n-                        }\n                     }\n-\n                     break;\n                 }\n             }\n@@ -388,43 +327,34 @@ private String getFromJavaFile(File file) throws IOException {\n             clsName = clsName.substring(0, clsName.length() - 5);\n \n             // prefix with package\n-            if ((pack != null) && (pack.length() > 0)) {\n+            if (pack != null && pack.length() > 0)\n                 clsName = pack + \".\" + clsName;\n-            }\n \n             return clsName;\n-        } finally {\n-            if (in != null) {\n-                try {\n-                    in.close();\n-                } catch (IOException ioe) {\n-                }\n-            }\n+        }\n+        finally {\n+            if (in != null)\n+                try { in.close(); } catch (IOException ioe) {}\n         }\n     }\n \n     /**\n-     *  Returns the classes named in the given common format metadata file.\n+     * Returns the classes named in the given common format metadata file.\n      */\n     private Collection getFromMetaDataFile(File file) throws IOException {\n         FileReader in = null;\n-\n         try {\n             in = new FileReader(file);\n-\n             return getFromMetaData(in);\n-        } finally {\n-            if (in != null) {\n-                try {\n-                    in.close();\n-                } catch (IOException ioe) {\n-                }\n-            }\n+        }\n+        finally {\n+            if (in != null)\n+                try { in.close(); } catch (IOException ioe) {}\n         }\n     }\n \n     /**\n-     *  Returns the classes named in the given common format metadata stream.\n+     * Returns the classes named in the given common format metadata stream.\n      */\n     private Collection getFromMetaData(Reader xml) throws IOException {\n         Collection names = new ArrayList();\n@@ -434,320 +364,223 @@ private Collection getFromMetaData(Reader xml) throws IOException {\n         int token = TOKEN_NONE;\n         String pkg = \"\";\n         String name;\n-read: \n-        for (int ch = 0, last = 0, last2 = 0;\n-                (ch == '<') || ((ch = in.read()) != -1);\n-                last2 = last, last = ch) {\n+        read: for (int ch = 0, last = 0, last2 = 0;\n+            ch == '<' || (ch = in.read()) != -1; last2 = last, last = ch) {\n             // handle comments\n-            if (comment && (last2 == '-') && (last == '-') && (ch == '>')) {\n+            if (comment && last2 == '-' && last == '-' && ch == '>') {\n                 comment = false;\n-\n                 continue;\n             }\n-\n             if (comment) {\n                 if (ch == '<') {\n                     ch = in.read();\n-\n-                    if (ch == -1) {\n+                    if (ch == -1)\n                         break read;\n-                    }\n                 }\n-\n                 continue;\n             }\n-\n-            if ((last2 == '<') && (last == '!') && (ch == '-')) {\n+            if (last2 == '<' && last == '!' && ch == '-') {\n                 comment = true;\n-\n                 continue;\n             }\n \n             // if not an element start, skip it\n-            if (ch != '<') {\n+            if (ch != '<')\n                 continue;\n-            }\n-\n             token = TOKEN_NONE; // reset token\n             last = ch; // update needed for comment detection\n             ch = readThroughWhitespace(in);\n-\n-            if ((ch == '/') || (ch == '!') || (ch == '?')) {\n+            if (ch == '/' || ch == '!' || ch == '?')\n                 continue;\n-            }\n \n             // read element name; look for packages and classes\n             token = readElementToken(ch, in);\n-\n             switch (token) {\n             case TOKEN_EOF:\n                 break read;\n-\n             case TOKEN_PACKAGE:\n                 pkg = readAttribute(in, _packageAttr);\n-\n-                if (pkg == null) {\n+                if (pkg == null)\n                     break read;\n-                }\n-\n                 break;\n-\n             case TOKEN_PACKAGE_NOATTR:\n                 pkg = readElementText(in);\n-\n-                if (pkg == null) {\n+                if (pkg == null)\n                     break read;\n-                }\n-\n                 ch = '<'; // reading element text reads to next '<'\n-\n                 break;\n-\n             case TOKEN_CLASS:\n                 name = readAttribute(in, _classAttr);\n-\n-                if (name == null) {\n+                if (name == null)\n                     break read;\n-                }\n-\n-                if ((pkg.length() > 0) && (name.indexOf('.') == -1)) {\n+                if (pkg.length() > 0 && name.indexOf('.') == -1)\n                     names.add(pkg + \".\" + name);\n-                } else {\n+                else\n                     names.add(name);\n-                }\n-\n                 break;\n-\n             case TOKEN_CLASS_NOATTR:\n                 name = readElementText(in);\n-\n-                if (name == null) {\n+                if (name == null)\n                     break read;\n-                }\n-\n                 ch = '<'; // reading element text reads to next '<'\n-\n-                if ((pkg.length() > 0) && (name.indexOf('.') == -1)) {\n+                if (pkg.length() > 0 && name.indexOf('.') == -1)\n                     names.add(pkg + \".\" + name);\n-                } else {\n+                else\n                     names.add(name);\n-                }\n-\n                 break;\n             }\n         }\n-\n         return names;\n     }\n \n     /**\n-     *  Read the name of the current XML element and return the matching token.\n+     * Read the name of the current XML element and return the matching token.\n      */\n     private int readElementToken(int ch, Reader in) throws IOException {\n         // look through the beginning element names to find what element this\n-        // might be (if any)\n+        // might be(if any)\n         int matchIdx = -1;\n         int matched = 0;\n         int dq = 0;\n-\n-        for (int beginIdx = 0; beginIdx < _beginElements[0].length;\n-                beginIdx++) {\n-            if (beginIdx != 0) {\n+        for (int beginIdx = 0; beginIdx < _beginElements[0].length; beginIdx++) {\n+            if (beginIdx != 0)\n                 ch = in.read();\n-            }\n-\n-            if (ch == -1) {\n+            if (ch == -1)\n                 return TOKEN_EOF;\n-            }\n \n             matched = 0;\n-\n             for (int i = 0; i < _beginElements.length; i++) {\n-                if ((dq & (2 << i)) != 0) {\n+                if ((dq & (2 << i)) != 0)\n                     continue;\n-                }\n \n                 if (ch == _beginElements[i][beginIdx]) {\n                     matchIdx = i;\n                     matched++;\n-                } else {\n-                    dq |= (2 << i);\n-                }\n+                } else\n+                    dq |= 2 << i;\n             }\n \n-            if (matched == 0) {\n+            if (matched == 0)\n                 break;\n-            }\n         }\n-\n-        if (matched != 1) {\n+        if (matched != 1)\n             return TOKEN_NONE;\n-        }\n \n         // make sure the rest of the element name matches\n         char[] match = _endElements[matchIdx];\n-\n         for (int i = 0; i < match.length; i++) {\n             ch = in.read();\n-\n-            if (ch == -1) {\n+            if (ch == -1)\n                 return TOKEN_EOF;\n-            }\n-\n-            if (ch != match[i]) {\n+            if (ch != match[i])\n                 return TOKEN_NONE;\n-            }\n         }\n \n         // read the next char to make sure we finished the element name\n         ch = in.read();\n-\n-        if (ch == -1) {\n+        if (ch == -1)\n             return TOKEN_EOF;\n-        }\n-\n         if (ch == '>') {\n-            if ((matchIdx == 0) && (_packageAttr == null)) {\n+            if (matchIdx == 0 && _packageAttr == null)\n                 return TOKEN_PACKAGE_NOATTR;\n-            }\n-\n-            if ((matchIdx != 0) && (_classAttr == null)) {\n+            if (matchIdx != 0 && _classAttr == null)\n                 return TOKEN_CLASS_NOATTR;\n-            }\n         } else if (Character.isWhitespace((char) ch)) {\n-            if ((matchIdx == 0) && (_packageAttr != null)) {\n+            if (matchIdx == 0 && _packageAttr != null)\n                 return TOKEN_PACKAGE;\n-            }\n-\n-            if ((matchIdx != 0) && (_classAttr != null)) {\n+            if (matchIdx != 0 && _classAttr != null)\n                 return TOKEN_CLASS;\n-            }\n         }\n-\n         return TOKEN_NONE;\n     }\n \n     /**\n-     *  Read the attribute with the given name in chars of the current XML\n-     *  element.\n+     * Read the attribute with the given name in chars of the current XML\n+     * element.\n      */\n-    private String readAttribute(Reader in, char[] name)\n-        throws IOException {\n+    private String readAttribute(Reader in, char[] name) throws IOException {\n         int expected = 0;\n-\n         for (int ch, last = 0; true; last = ch) {\n             ch = in.read();\n-\n-            if (ch == -1) {\n+            if (ch == -1)\n                 return null;\n-            }\n-\n-            if (ch == '>') {\n+            if (ch == '>')\n                 return \"\";\n-            }\n \n             // if not expected char or still looking for 'n' and previous\n             // char is not whitespace, keep looking\n-            if ((ch != name[expected]) ||\n-                    ((expected == 0) && (last != 0) &&\n-                    !Character.isWhitespace((char) last))) {\n+            if (ch != name[expected] || (expected == 0 && last != 0\n+                && !Character.isWhitespace((char) last))) {\n                 expected = 0;\n-\n                 continue;\n             }\n \n             // found expected char; have we found the whole \"name\"?\n             expected++;\n-\n             if (expected == name.length) {\n                 // make sure the next char is '='\n                 ch = readThroughWhitespace(in);\n-\n-                if (ch == -1) {\n+                if (ch == -1)\n                     return null;\n-                }\n-\n                 if (ch != '=') {\n                     expected = 0;\n-\n                     continue;\n                 }\n \n                 // toss out any subsequent whitespace and the next char, which\n                 // is the opening quote for the attr value, then read until the\n                 // closing quote\n                 readThroughWhitespace(in);\n-\n                 return readAttributeValue(in);\n             }\n         }\n     }\n \n     /**\n-     *  Read the current text value until the next element.\n+     * Read the current text value until the next element.\n      */\n     private String readElementText(Reader in) throws IOException {\n         StringBuffer buf = null;\n         int ch;\n-\n         while (true) {\n             ch = in.read();\n-\n-            if (ch == -1) {\n+            if (ch == -1)\n                 return null;\n-            }\n-\n-            if (ch == '<') {\n+            if (ch == '<')\n                 break;\n-            }\n-\n-            if (Character.isWhitespace((char) ch)) {\n+            if (Character.isWhitespace((char) ch))\n                 continue;\n-            }\n-\n-            if (buf == null) {\n+            if (buf == null)\n                 buf = new StringBuffer();\n-            }\n-\n             buf.append((char) ch);\n         }\n-\n-        return (buf == null) ? \"\" : buf.toString();\n+        return(buf == null) ? \"\" : buf.toString();\n     }\n \n     /**\n-     *  Read until the next non-whitespace character.\n+     * Read until the next non-whitespace character.\n      */\n     private int readThroughWhitespace(Reader in) throws IOException {\n         int ch;\n-\n         while (true) {\n             ch = in.read();\n-\n-            if ((ch == -1) || !Character.isWhitespace((char) ch)) {\n+            if (ch == -1 || !Character.isWhitespace((char) ch))\n                 return ch;\n-            }\n         }\n     }\n \n     /**\n-     *  Return the current attribute value.\n+     * Return the current attribute value.\n      */\n     private String readAttributeValue(Reader in) throws IOException {\n         StringBuffer buf = new StringBuffer();\n         int ch;\n-\n         while (true) {\n             ch = in.read();\n-\n-            if (ch == -1) {\n+            if (ch == -1)\n                 return null;\n-            }\n-\n-            if ((ch == '\\'') || (ch == '\"')) {\n+            if (ch == '\\'' || ch == '\"')\n                 return buf.toString();\n-            }\n-\n             buf.append((char) ch);\n         }\n     }"},{"sha":"48278e2c0e1d3a224dc006f7435ef67c74545f13","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClassMetaDataIterator.java","status":"modified","additions":42,"deletions":76,"changes":118,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClassMetaDataIterator.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClassMetaDataIterator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClassMetaDataIterator.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74","patch":"@@ -1,40 +1,32 @@\n /*\n  * Copyright 2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *  Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n package org.apache.openjpa.lib.meta;\n \n-import org.apache.commons.collections.set.*;\n-\n-import org.apache.openjpa.lib.util.*;\n-\n-import serp.util.*;\n-\n import java.io.*;\n-\n import java.net.*;\n-\n import java.util.*;\n-\n+import org.apache.commons.collections.set.*;\n+import org.apache.openjpa.lib.util.*;\n+import serp.util.*;\n \n /**\n- *  <p>Iterator over all metadata resources that might contain the\n- *  metadata for a given class, starting with the most general.  Assumes that\n- *  package-level resources are named \"package.&lt;suffix&gt;\".</p>\n- *\n- *  @author Abe White\n- *  @nojavadoc */\n+ * Iterator over all metadata resources that might contain the\n+ * metadata for a given class, starting with the most general. Assumes that\n+ * package-level resources are named \"package.&lt;suffix&gt;\".\n+ * \n+ * @author Abe White\n+ * @nojavadoc\n+ */\n public class ClassMetaDataIterator implements MetaDataIterator {\n     private final ClassLoader _loader;\n     private final List _locs;\n@@ -44,26 +36,25 @@\n     private URL _last = null;\n \n     /**\n-     *  Constructor; supply the class whose metadata to find, the suffix\n-     *  of metadata files, and whether to parse top-down or bottom-up.\n+     * Constructor; supply the class whose metadata to find, the suffix\n+     * of metadata files, and whether to parse top-down or bottom-up.\n      */\n     public ClassMetaDataIterator(Class cls, String suffix, boolean topDown) {\n         this(cls, suffix, null, topDown);\n     }\n \n     /**\n-     *  Constructor; supply the class whose metadata to find, the suffix\n-     *  of metadata files, and whether to parse top-down or bottom-up.\n+     * Constructor; supply the class whose metadata to find, the suffix\n+     * of metadata files, and whether to parse top-down or bottom-up.\n      */\n     public ClassMetaDataIterator(Class cls, String suffix, ClassLoader loader,\n         boolean topDown) {\n         // skip classes that can't have metadata\n-        if ((cls != null) &&\n-                (cls.isPrimitive() || cls.getName().startsWith(\"java.\") ||\n-                cls.getName().startsWith(\"javax.\"))) {\n+        if (cls != null && (cls.isPrimitive()\n+            || cls.getName().startsWith(\"java.\")\n+            || cls.getName().startsWith(\"javax.\"))) {\n             _loader = null;\n             _locs = Collections.EMPTY_LIST;\n-\n             return;\n         }\n \n@@ -72,14 +63,10 @@ public ClassMetaDataIterator(Class cls, String suffix, ClassLoader loader,\n             multi.addClassLoader(multi.SYSTEM_LOADER);\n             multi.addClassLoader(multi.THREAD_LOADER);\n             multi.addClassLoader(getClass().getClassLoader());\n-\n-            if ((cls != null) && (cls.getClassLoader() != null)) {\n+            if (cls != null && cls.getClassLoader() != null)\n                 multi.addClassLoader(cls.getClassLoader());\n-            }\n-\n             loader = multi;\n         }\n-\n         _loader = loader;\n \n         // collect the set of all possible metadata locations; start with\n@@ -89,32 +76,25 @@ public ClassMetaDataIterator(Class cls, String suffix, ClassLoader loader,\n         _locs.add(\"WEB-INF/package\" + suffix);\n         _locs.add(\"package\" + suffix);\n \n-        // put this legacy location at the end regardless of whether we're \n+        // put this legacy location at the end regardless of whether we're\n         // going top down or bottom up so we don't have to parse it as often\n         // during testing\n-        if (!topDown) {\n+        if (!topDown)\n             _locs.add(\"system\" + suffix);\n-        }\n \n         if (cls != null) {\n             // also check:\n             // 1. for each package from the top down to cls' package:\n-            //\t\t<path>/package<suffix>\n-            //\t\t<path>/<package-name><suffix> \t\t(legacy support)\n-            // \t\t<path>/../<package-name><suffix>\t(legacy support)\n+            // <path>/package<suffix>\n+            // <path>/<package-name><suffix> (legacy support)\n+            // <path>/../<package-name><suffix> (legacy support)\n             // 2. <path>/<class-name><suffix>\n             String pkg = Strings.getPackageName(cls).replace('.', '/');\n-\n             if (pkg.length() > 0) {\n-                int idx;\n-                int start = 0;\n-                String pkgName;\n-                String path;\n-                String upPath = \"\";\n-\n+                int idx, start = 0;\n+                String pkgName, path, upPath = \"\";\n                 do {\n                     idx = pkg.indexOf('/', start);\n-\n                     if (idx == -1) {\n                         pkgName = (start == 0) ? pkg : pkg.substring(start);\n                         path = pkg + \"/\";\n@@ -126,71 +106,57 @@ public ClassMetaDataIterator(Class cls, String suffix, ClassLoader loader,\n                     _locs.add(path + \"package\" + suffix);\n                     _locs.add(path + pkgName + suffix); // legacy\n                     _locs.add(upPath + pkgName + suffix); // legacy\n-\n-                    if (idx == -1) {\n+                    if (idx == -1)\n                         _locs.add(path + Strings.getClassName(cls) + suffix);\n-                    }\n \n                     start = idx + 1;\n                     upPath = path;\n-                } while (idx != -1);\n+                }\n+                while (idx != -1);\n             } else {\n                 // <class-name><suffix> for top-level classes\n                 _locs.add(cls.getName() + suffix);\n             }\n         }\n-\n-        if (topDown) {\n+        if (topDown)\n             _locs.add(\"system\" + suffix); // legacy\n-        } else {\n+        else\n             Collections.reverse(_locs);\n-        }\n     }\n \n     public boolean hasNext() throws IOException {\n         Enumeration e;\n-\n-        while ((_url + 1) >= _urls.size()) {\n-            if (++_loc >= _locs.size()) {\n+        while (_url + 1 >= _urls.size()) {\n+            if (++_loc >= _locs.size())\n                 return false;\n-            }\n \n             _url = -1;\n             _urls.clear();\n             e = _loader.getResources((String) _locs.get(_loc));\n-\n             while (e.hasMoreElements())\n                 _urls.add(e.nextElement());\n         }\n-\n         return true;\n     }\n \n     public Object next() throws IOException {\n-        if (!hasNext()) {\n+        if (!hasNext())\n             throw new NoSuchElementException();\n-        }\n-\n         return _urls.get(++_url);\n     }\n \n     public InputStream getInputStream() throws IOException {\n-        if ((_url == -1) || (_url >= _urls.size())) {\n+        if (_url == -1 || _url >= _urls.size())\n             throw new IllegalStateException();\n-        }\n-\n-        return ((URL) _urls.get(_url)).openStream();\n+        return((URL) _urls.get(_url)).openStream();\n     }\n \n     public File getFile() throws IOException {\n-        if ((_url == -1) || (_url >= _urls.size())) {\n+        if (_url == -1 || _url >= _urls.size())\n             throw new IllegalStateException();\n-        }\n-\n-        File file = new File(URLDecoder.decode(\n-                    ((URL) _urls.get(_url)).getFile()));\n-\n-        return (file.exists()) ? file : null;\n+        File file = new File(URLDecoder.decode(((URL) _urls.get(_url)).\n+            getFile()));\n+        return(file.exists()) ? file : null;\n     }\n \n     public void close() {"},{"sha":"71f3355d4a4353c0005bf54cbfc36364f5ba6c95","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClasspathMetaDataIterator.java","status":"modified","additions":21,"deletions":34,"changes":55,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClasspathMetaDataIterator.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClasspathMetaDataIterator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClasspathMetaDataIterator.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74","patch":"@@ -1,83 +1,70 @@\n /*\n  * Copyright 2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *  Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n package org.apache.openjpa.lib.meta;\n \n-import serp.util.*;\n-\n import java.io.*;\n-\n import java.util.*;\n import java.util.zip.*;\n-\n+import serp.util.*;\n \n /**\n- *  <p>Iterator over directories in the classpath.</p>\n- *\n- *  @author Abe White\n- *  @nojavadoc */\n+ * Iterator over directories in the classpath.\n+ * \n+ * @author Abe White\n+ * @nojavadoc\n+ */\n public class ClasspathMetaDataIterator extends MetaDataIteratorChain {\n     /**\n-     *  Default constructor; iterates over all classpath elements.\n+     * Default constructor; iterates over all classpath elements.\n      */\n     public ClasspathMetaDataIterator() throws IOException {\n         this(null, null);\n     }\n \n     /**\n-     *  Constructor; supply the classpath directories to scan and an optional\n-     *  resource filter.  The given directories may be null to scan all\n-     *  classpath directories.\n+     * Constructor; supply the classpath directories to scan and an optional\n+     * resource filter. The given directories may be null to scan all\n+     * classpath directories.\n      */\n     public ClasspathMetaDataIterator(String[] dirs, MetaDataFilter filter)\n         throws IOException {\n         Properties props = System.getProperties();\n         String path = props.getProperty(\"java.class.path\");\n         String[] tokens = Strings.split(path,\n-                props.getProperty(\"path.separator\"), 0);\n+            props.getProperty(\"path.separator\"), 0);\n \n         for (int i = 0; i < tokens.length; i++) {\n-            if ((dirs != null) && (dirs.length != 0) &&\n-                    !endsWith(tokens[i], dirs)) {\n+            if (dirs != null && dirs.length != 0 && !endsWith(tokens[i], dirs))\n                 continue;\n-            }\n \n             File file = new File(tokens[i]);\n-\n-            if (!file.exists()) {\n+            if (!file.exists())\n                 continue;\n-            }\n-\n-            if (file.isDirectory()) {\n+            if (file.isDirectory())\n                 addIterator(new FileMetaDataIterator(file, filter));\n-            } else if (tokens[i].endsWith(\".jar\")) {\n+            else if (tokens[i].endsWith(\".jar\"))\n                 addIterator(new ZipFileMetaDataIterator(new ZipFile(file),\n-                        filter));\n-            }\n+                    filter));\n         }\n     }\n \n     /**\n-     *  Return true if the given token ends with any of the given strings.\n+     * Return true if the given token ends with any of the given strings.\n      */\n     private static boolean endsWith(String token, String[] suffs) {\n         for (int i = 0; i < suffs.length; i++)\n-            if (token.endsWith(suffs[i])) {\n+            if (token.endsWith(suffs[i]))\n                 return true;\n-            }\n-\n         return false;\n     }\n }"},{"sha":"40edbbf048fddd1fd31e4f8dfb23dd9ed7d2c885","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/FileMetaDataIterator.java","status":"modified","additions":32,"deletions":50,"changes":82,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/FileMetaDataIterator.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/FileMetaDataIterator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/FileMetaDataIterator.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74","patch":"@@ -1,55 +1,52 @@\n /*\n  * Copyright 2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *  Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n package org.apache.openjpa.lib.meta;\n \n-import org.apache.openjpa.lib.util.*;\n-\n import java.io.*;\n-\n import java.util.*;\n-\n+import org.apache.openjpa.lib.util.*;\n \n /**\n- *  <p>Iterator over a file, or over all metadata resources below a given\n- *  directory.</p>\n- *\n- *  @author Abe White\n- *  @nojavadoc */\n+ * Iterator over a file, or over all metadata resources below a given directory.\n+ * \n+ * @author Abe White\n+ * @nojavadoc\n+ */\n public class FileMetaDataIterator implements MetaDataIterator {\n     private static final long SCAN_LIMIT = 100000;\n-    private static final Localizer _loc = Localizer.forPackage(FileMetaDataIterator.class);\n+\n+    private static final Localizer _loc = Localizer.forPackage\n+        (FileMetaDataIterator.class);\n+\n     private final Iterator _itr;\n     private File _file = null;\n \n     /**\n-     *  Constructor; supply metadata file.\n+     * Constructor; supply metadata file.\n      */\n     public FileMetaDataIterator(File file) {\n         _itr = Collections.singleton(file).iterator();\n     }\n \n     /**\n-     *  Constructor; supply root of directory tree to search and optional\n-     *  file filter.\n+     * Constructor; supply root of directory tree to search and optional\n+     * file filter.\n      */\n     public FileMetaDataIterator(File dir, MetaDataFilter filter)\n         throws IOException {\n-        if (dir == null) {\n+        if (dir == null)\n             _itr = null;\n-        } else {\n+        else {\n             Collection metas = new ArrayList();\n             FileResource rsrc = (filter == null) ? null : new FileResource();\n             scan(dir, filter, rsrc, metas, 0);\n@@ -58,65 +55,53 @@ public FileMetaDataIterator(File dir, MetaDataFilter filter)\n     }\n \n     /**\n-     *  Scan all files below the given one for metadata files, adding them\n-     *  to the given collection.\n+     * Scan all files below the given one for metadata files, adding them\n+     * to the given collection.\n      */\n     private int scan(File file, MetaDataFilter filter, FileResource rsrc,\n         Collection metas, int scanned) throws IOException {\n-        if (scanned > SCAN_LIMIT) {\n+        if (scanned > SCAN_LIMIT)\n             throw new IllegalStateException(_loc.get(\"too-many-files\",\n-                    String.valueOf(SCAN_LIMIT)));\n-        }\n-\n+                String.valueOf(SCAN_LIMIT)));\n         scanned++;\n \n-        if (filter == null) {\n+        if (filter == null)\n             metas.add(file);\n-        } else {\n+        else {\n             rsrc.setFile(file);\n-\n-            if (filter.matches(rsrc)) {\n+            if (filter.matches(rsrc))\n                 metas.add(file);\n-            } else {\n+            else {\n                 File[] files = file.listFiles();\n-\n-                if (files != null) {\n+                if (files != null)\n                     for (int i = 0; i < files.length; i++)\n                         scanned = scan(files[i], filter, rsrc, metas, scanned);\n-                }\n             }\n         }\n-\n         return scanned;\n     }\n \n     public boolean hasNext() {\n-        return (_itr != null) && _itr.hasNext();\n+        return _itr != null && _itr.hasNext();\n     }\n \n     public Object next() throws IOException {\n-        if (_itr == null) {\n+        if (_itr == null)\n             throw new NoSuchElementException();\n-        }\n \n         _file = (File) _itr.next();\n-\n         return _file.getAbsoluteFile().toURL();\n     }\n \n     public InputStream getInputStream() throws IOException {\n-        if (_file == null) {\n+        if (_file == null)\n             throw new IllegalStateException();\n-        }\n-\n         return new FileInputStream(_file);\n     }\n \n     public File getFile() {\n-        if (_file == null) {\n+        if (_file == null)\n             throw new IllegalStateException();\n-        }\n-\n         return _file;\n     }\n \n@@ -136,16 +121,13 @@ public String getName() {\n \n         public byte[] getContent() throws IOException {\n             long len = _file.length();\n-\n-            if (len <= 0) {\n+            if (len <= 0)\n                 return new byte[0];\n-            }\n \n             byte[] content = new byte[(int) len];\n             FileInputStream fin = new FileInputStream(_file);\n             fin.read(content);\n             fin.close();\n-\n             return content;\n         }\n     }"},{"sha":"f2dc917be4ff2ccfb8189f2638dfce0de5ade175","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/MetaDataFilter.java","status":"modified","additions":14,"deletions":17,"changes":31,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/MetaDataFilter.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/MetaDataFilter.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/MetaDataFilter.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74","patch":"@@ -1,13 +1,10 @@\n /*\n  * Copyright 2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *  Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n@@ -17,30 +14,30 @@\n \n import java.io.*;\n \n-\n /**\n- *  <p>Filters metadata resources.  Typically used to constrain the results\n- *  of a {@link MetaDataIterator}.</p>\n- *\n- *  @author Abe White\n- *  @nojavadoc */\n+ * Filters metadata resources. Typically used to constrain the results\n+ * of a {@link MetaDataIterator}.\n+ * \n+ * @author Abe White\n+ * @nojavadoc\n+ */\n public interface MetaDataFilter {\n     /**\n-     *  Return whether the given resource passes the filter.\n+     * Return whether the given resource passes the filter.\n      */\n     public boolean matches(Resource rsrc) throws IOException;\n \n     /**\n-     *  Information about a metadata resource.\n+     * Information about a metadata resource.\n      */\n     public static interface Resource {\n         /**\n-         *  The name of the resource.\n-          */\n+         * The name of the resource.\n+         */\n         public String getName();\n \n         /**\n-          *  Resource content.\n+         * Resource content.\n          */\n         public byte[] getContent() throws IOException;\n     }"},{"sha":"dc42e6f965c6ff361836bd2a2323dd99a33398ed","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/MetaDataIterator.java","status":"modified","additions":17,"deletions":22,"changes":39,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/MetaDataIterator.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/MetaDataIterator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/MetaDataIterator.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74","patch":"@@ -1,57 +1,52 @@\n /*\n  * Copyright 2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *  Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n package org.apache.openjpa.lib.meta;\n \n-import org.apache.openjpa.lib.util.*;\n-import org.apache.openjpa.lib.util.Closeable; // also in java.io (in 1.5)\n-\n import java.io.*;\n-\n import java.util.*;\n-\n+import org.apache.openjpa.lib.util.*;\n+import org.apache.openjpa.lib.util.Closeable; // also in java.io(in 1.5)\n \n /**\n- *  <p>Iterator over metadata resources.</p>\n- *\n- *  @author Abe White\n+ * Iterator over metadata resources.\n+ * \n+ * @author Abe White\n  */\n public interface MetaDataIterator extends Closeable {\n     /**\n-     *  Return whether there is another resource to iterate over.\n+     * Return whether there is another resource to iterate over.\n      */\n     public boolean hasNext() throws IOException;\n \n     /**\n-     *  Return the next metadata resource.\n+     * Return the next metadata resource.\n      */\n     public Object next() throws IOException;\n \n     /**\n-     *  Return the last-iterated metadata resource content as a stream.\n-      */\n+     * Return the last-iterated metadata resource content as a stream.\n+     */\n     public InputStream getInputStream() throws IOException;\n \n     /**\n-     *  Return the last-iterated metadata resource content as a file, or null\n-     *  if not an extant file.\n-      */\n+     * Return the last-iterated metadata resource content as a file, or null\n+     * if not an extant file.\n+     */\n     public File getFile() throws IOException;\n \n     /**\n-     *  Close the resources used by this iterator.\n+     * Close the resources used by this iterator.\n      */\n     public void close();\n }\n+"},{"sha":"e6bf238760bf571dc5581b0e706e91e8a95a6b2b","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/MetaDataIteratorChain.java","status":"modified","additions":21,"deletions":45,"changes":66,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/MetaDataIteratorChain.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/MetaDataIteratorChain.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/MetaDataIteratorChain.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74","patch":"@@ -1,45 +1,40 @@\n /*\n  * Copyright 2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *  Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n package org.apache.openjpa.lib.meta;\n \n-import org.apache.commons.collections.iterators.*;\n-\n import java.io.*;\n-\n import java.util.*;\n-\n+import org.apache.commons.collections.iterators.*;\n \n /**\n- *  <p>Metadata iterator that combines several iterators.</p>\n- *\n- *  @author Abe White\n- *  @nojavadoc */\n+ * Metadata iterator that combines several iterators.\n+ * \n+ * @author Abe White\n+ * @nojavadoc\n+ */\n public class MetaDataIteratorChain implements MetaDataIterator {\n     private List _itrs = null;\n-    private int _cur = -1;\n+    private int  _cur = -1;\n     private MetaDataIterator _itr = null;\n \n     /**\n-     *  Default constructor.\n+     * Default constructor.\n      */\n     public MetaDataIteratorChain() {\n     }\n \n     /**\n-     *  Combine two iterators.\n+     * Combine two iterators.\n      */\n     public MetaDataIteratorChain(MetaDataIterator itr1, MetaDataIterator itr2) {\n         _itrs = new ArrayList(2);\n@@ -48,74 +43,55 @@ public MetaDataIteratorChain(MetaDataIterator itr1, MetaDataIterator itr2) {\n     }\n \n     /**\n-     *  Add an iterator to the chain.\n+     * Add an iterator to the chain.\n      */\n     public void addIterator(MetaDataIterator itr) {\n-        if (_cur != -1) {\n+        if (_cur != -1)\n             throw new IllegalStateException();\n-        }\n-\n-        if (_itrs == null) {\n+        if (_itrs == null)\n             _itrs = new ArrayList(4);\n-        }\n-\n         _itrs.add(itr);\n     }\n \n     public boolean hasNext() throws IOException {\n-        if (_itrs == null) {\n+        if (_itrs == null)\n             return false;\n-        }\n-\n-        if (_cur == -1) {\n+        if (_cur == -1)\n             _cur = 0;\n-        }\n \n         MetaDataIterator itr;\n-\n         for (; _cur < _itrs.size(); _cur++) {\n             itr = (MetaDataIterator) _itrs.get(_cur);\n-\n             if (itr.hasNext()) {\n                 _itr = itr;\n-\n                 return true;\n             }\n         }\n-\n         _itr = null;\n-\n         return false;\n     }\n \n     public Object next() throws IOException {\n-        if (!hasNext()) {\n+        if (!hasNext())\n             throw new NoSuchElementException();\n-        }\n-\n         return _itr.next();\n     }\n \n     public InputStream getInputStream() throws IOException {\n-        if (_itr == null) {\n+        if (_itr == null)\n             throw new IllegalStateException();\n-        }\n-\n         return _itr.getInputStream();\n     }\n \n     public File getFile() throws IOException {\n-        if (_itr == null) {\n+        if (_itr == null)\n             throw new IllegalStateException();\n-        }\n-\n         return _itr.getFile();\n     }\n \n     public void close() {\n-        if (_itrs != null) {\n+        if (_itrs != null)\n             for (Iterator itr = _itrs.iterator(); itr.hasNext();)\n                 ((MetaDataIterator) itr.next()).close();\n-        }\n     }\n }"},{"sha":"02000ced264e6e388e5d63ab3e09322f0da809fd","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/MetaDataParser.java","status":"modified","additions":26,"deletions":32,"changes":58,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/MetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/MetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/MetaDataParser.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74","patch":"@@ -1,13 +1,10 @@\n /*\n  * Copyright 2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *  Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n@@ -16,69 +13,66 @@\n package org.apache.openjpa.lib.meta;\n \n import java.io.*;\n-\n import java.net.*;\n-\n import java.util.*;\n \n-\n /**\n- *  <p>Interface for metadata parsers.</p>\n- *\n- *  @author Abe White\n- *  @nojavadoc */\n+ * Interface for metadata parsers.\n+ * \n+ * @author Abe White\n+ * @nojavadoc\n+ */\n public interface MetaDataParser {\n     /**\n-     *  The classloader to use to resolve resources, or null for impl-defined\n-     *  default.\n+     * The classloader to use to resolve resources, or null for impl-defined\n+     * default.\n      */\n     public void setClassLoader(ClassLoader loader);\n \n     /**\n-     *  Return the results from the last parse.\n+     * Return the results from the last parse.\n      */\n     public List getResults();\n \n     /**\n-     *  Parse the given resource.\n+     * Parse the given resource.\n      */\n     public void parse(String rsrc) throws IOException;\n \n     /**\n-     *  Parse the given resource.\n+     * Parse the given resource.\n      */\n     public void parse(URL url) throws IOException;\n \n     /**\n-     *  Parse the given file, which may be a directory, in which case it\n-     *  will be scanned recursively for metadata files.\n+     * Parse the given file, which may be a directory, in which case it\n+     * will be scanned recursively for metadata files.\n      */\n     public void parse(File file) throws IOException;\n \n     /**\n-     *  Parse all possible metadata locations for the given class, going\n-     *  top-down or bottom-up.  If the class is null, only top-level locations\n-     *  will be parsed.\n+     * Parse all possible metadata locations for the given class, going\n+     * top-down or bottom-up. If the class is null, only top-level locations\n+     * will be parsed.\n      */\n     public void parse(Class cls, boolean topDown) throws IOException;\n \n     /**\n-     *  Parse the metadata in the given reader.\n-      *\n-     *  @param content                reader containing the metadata to parse\n-     *  @param sourceName        the name of the source being parsed, for use\n-     *                                          in error messages\n+     * Parse the metadata in the given reader.\n+     * \n+     * @param content reader containing the metadata to parse\n+     * @param sourceName the name of the source being parsed, for use\n+     * in error messages\n      */\n-    public void parse(Reader content, String sourceName)\n-        throws IOException;\n+    public void parse(Reader content, String sourceName) throws IOException;\n \n     /**\n-     *  Parse the metadata supplied by the given iterator.\n+     * Parse the metadata supplied by the given iterator.\n      */\n     public void parse(MetaDataIterator itr) throws IOException;\n \n     /**\n-     *  Clears the cache of parsed resource names.\n+     * Clears the cache of parsed resource names.\n      */\n     public void clear();\n }"},{"sha":"95a109fd88151f5421fa62dee94ec58576bfc546","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/MetaDataSerializer.java","status":"modified","additions":32,"deletions":39,"changes":71,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/MetaDataSerializer.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/MetaDataSerializer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/MetaDataSerializer.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74","patch":"@@ -1,76 +1,69 @@\n /*\n  * Copyright 2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *  Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n package org.apache.openjpa.lib.meta;\n \n-import org.apache.openjpa.lib.log.*;\n-\n import java.io.*;\n-\n import java.util.*;\n-\n+import org.apache.openjpa.lib.log.*;\n \n /**\n- *  <p>Interface for meta data serializers.</p>\n- *\n- *  @author Abe White\n- *  @nojavadoc */\n+ * Interface for meta data serializers.\n+ * \n+ * @author Abe White\n+ * @nojavadoc\n+ */\n public interface MetaDataSerializer {\n     public static final int COMPACT = 0;\n     public static final int PRETTY = 1;\n     public static final int APPEND = 2;\n     public static final int VERBOSE = 4;\n \n     /**\n-     *  Serialize the current set of objects to the files from which they were\n-     *  parsed.  Any objects for which a source file cannot be determined will\n-       *  not be included in the output.\n-     *\n-      *  @param flags        bit flags specifying the output flags; e.g.\n-     *                                  {@link PRETTY #PRETTY}\n+     * Serialize the current set of objects to the files from which they were\n+     * parsed. Any objects for which a source file cannot be determined will\n+     * not be included in the output.\n+     * \n+     * @param flags bit flags specifying the output flags; e.g.\n+     * {@link PRETTY #PRETTY}\n      */\n     public void serialize(int flags) throws IOException;\n \n     /**\n-     *  Serialize the current set of objects to the files from which they were\n-     *  parsed.  The objects must implement the {@link SourceTracker}\n-     *  interface.\n-     *\n-     *  @param output  if null, then serialize directly to the file system;\n-     *                                  othwerwise, populate the specified {@link Map} with\n-     *                                  keys that are the {@link File} instances, and\n-     *                                  values that are the {@link String} contents of\n-     *                                  the metadata\n-      *  @param flags        bit flags specifying the output flags; e.g.\n-     *                                  {@link PRETTY #PRETTY}\n+     * Serialize the current set of objects to the files from which they were\n+     * parsed. The objects must implement the {@link SourceTracker} interface.\n+     * \n+     * @param output if null, then serialize directly to the file system;\n+     * othwerwise, populate the specified {@link Map} with\n+     * keys that are the {@link File} instances, and\n+     * values that are the {@link String} contents of the metadata\n+     * @param flags bit flags specifying the output flags; e.g.\n+     * {@link PRETTY #PRETTY}\n      */\n     public void serialize(Map output, int flags) throws IOException;\n \n     /**\n-     *  Serialize the current set of objects to the given file.\n-     *\n-      *  @param flags        bit flags specifying the output flags; e.g.\n-     *                                  {@link PRETTY #PRETTY} | {@link APPEND #APPEND}\n+     * Serialize the current set of objects to the given file.\n+     * \n+     * @param flags bit flags specifying the output flags; e.g.\n+     * {@link PRETTY #PRETTY} | {@link APPEND #APPEND}\n      */\n     public void serialize(File file, int flags) throws IOException;\n \n     /**\n-     *  Serialize the current set of objects to the given stream.\n-     *\n-      *  @param flags        bit flags specifying the output flags; e.g.\n-     *                                  {@link PRETTY #PRETTY}\n+     * Serialize the current set of objects to the given stream.\n+     * \n+     * @param flags bit flags specifying the output flags; e.g.\n+     * {@link PRETTY #PRETTY}\n      */\n     public void serialize(Writer out, int flags) throws IOException;\n }"},{"sha":"5ccd90c17f4c93d6f384ec59ae00ff44db8f99ca","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ResourceMetaDataIterator.java","status":"modified","additions":22,"deletions":38,"changes":60,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ResourceMetaDataIterator.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ResourceMetaDataIterator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ResourceMetaDataIterator.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74","patch":"@@ -1,49 +1,42 @@\n /*\n  * Copyright 2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *  Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n package org.apache.openjpa.lib.meta;\n \n-import org.apache.commons.collections.iterators.*;\n-\n-import org.apache.openjpa.lib.util.*;\n-\n import java.io.*;\n-\n import java.net.*;\n-\n import java.util.*;\n-\n+import org.apache.commons.collections.iterators.*;\n+import org.apache.openjpa.lib.util.*;\n \n /**\n- *  <p>Iterator over a given metadata resource.</p>\n- *\n- *  @author Abe White\n- *  @nojavadoc */\n+ * Iterator over a given metadata resource.\n+ * \n+ * @author Abe White\n+ * @nojavadoc\n+ */\n public class ResourceMetaDataIterator implements MetaDataIterator {\n     private List _urls = null;\n     private int _url = -1;\n \n     /**\n-     *  Constructor; supply the resource to parse.\n+     * Constructor; supply the resource to parse.\n      */\n     public ResourceMetaDataIterator(String rsrc) throws IOException {\n         this(rsrc, null);\n     }\n \n     /**\n-     *  Constructor; supply the resource to parse.\n+     * Constructor; supply the resource to parse.\n      */\n     public ResourceMetaDataIterator(String rsrc, ClassLoader loader)\n         throws IOException {\n@@ -56,47 +49,38 @@ public ResourceMetaDataIterator(String rsrc, ClassLoader loader)\n         }\n \n         Enumeration e = loader.getResources(rsrc);\n-\n         while (e.hasMoreElements()) {\n-            if (_urls == null) {\n+            if (_urls == null)\n                 _urls = new ArrayList(3);\n-            }\n-\n             _urls.add(e.nextElement());\n         }\n     }\n \n     public boolean hasNext() {\n-        return (_urls != null) && ((_url + 1) < _urls.size());\n+        return _urls != null && _url + 1 < _urls.size();\n     }\n \n     public Object next() {\n-        if (!hasNext()) {\n+        if (!hasNext())\n             throw new NoSuchElementException();\n-        }\n-\n         return _urls.get(++_url);\n     }\n \n     public InputStream getInputStream() throws IOException {\n-        if ((_url == -1) || (_url >= _urls.size())) {\n+        if (_url == -1 || _url >= _urls.size())\n             throw new IllegalStateException();\n-        }\n-\n-        return ((URL) _urls.get(_url)).openStream();\n+        return((URL) _urls.get(_url)).openStream();\n     }\n \n     public File getFile() throws IOException {\n-        if ((_url == -1) || (_url >= _urls.size())) {\n+        if (_url == -1 || _url >= _urls.size())\n             throw new IllegalStateException();\n-        }\n-\n-        File file = new File(URLDecoder.decode(\n-                    ((URL) _urls.get(_url)).getFile()));\n-\n-        return (file.exists()) ? file : null;\n+        File file = new File(URLDecoder.decode(((URL) _urls.get(_url)).\n+            getFile()));\n+        return(file.exists()) ? file : null;\n     }\n \n     public void close() {\n     }\n }\n+"},{"sha":"b277a5460fcf753511d51d2068f3ba4f0d04c9a7","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/SourceTracker.java","status":"modified","additions":13,"deletions":18,"changes":31,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/SourceTracker.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/SourceTracker.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/SourceTracker.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74","patch":"@@ -1,13 +1,10 @@\n /*\n  * Copyright 2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *  Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n@@ -17,38 +14,36 @@\n \n import java.io.*;\n \n-\n /**\n- *  <p>Interface that can optionally be implemented by metadata\n- *  to include the source file from which the metadata was originally\n- *  parsed.</p>\n- *\n- *  @author Abe White\n+ * Interface that can optionally be implemented by metadata\n+ * to include the source file from which the metadata was originally parsed.\n+ * \n+ * @author Abe White\n  */\n public interface SourceTracker {\n     public static final int SRC_OTHER = 0;\n     public static final int SRC_ANNOTATIONS = 1;\n     public static final int SRC_XML = 2;\n \n     /**\n-     *  Return the file from which this instance was parsed.\n+     * Return the file from which this instance was parsed.\n      */\n     public File getSourceFile();\n \n     /**\n-     *  Return the domain-dependent scope of this instance within its file.\n+     * Return the domain-dependent scope of this instance within its file.\n      */\n     public Object getSourceScope();\n \n     /**\n-     *  Return the type of source.\n+     * Return the type of source.\n      */\n     public int getSourceType();\n \n     /**\n-     *  Return the domain-meaningful name of the resource that was loaded\n-     *  from this source. I.e., if we had loaded the source for a Java\n-     *  class, this would return the name of the class.\n+     * Return the domain-meaningful name of the resource that was loaded\n+     * from this source. I.e., if we had loaded the source for a Java\n+     * class, this would return the name of the class.\n      */\n     public String getResourceName();\n }"},{"sha":"9b77e3f8631de248eb4cab4c103c517f959023cc","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/SourceTrackers.java","status":"modified","additions":21,"deletions":28,"changes":49,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/SourceTrackers.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/SourceTrackers.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/SourceTrackers.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74","patch":"@@ -1,13 +1,10 @@\n /*\n  * Copyright 2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *  Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n@@ -17,42 +14,38 @@\n \n import org.apache.openjpa.lib.util.*;\n \n-\n /**\n- *  Utility class for performing common operations on {@link SourceTracker}s.\n- *\n- *  @since 3.3.1\n+ * Utility class for performing common operations on {@link SourceTracker}s.\n+ * \n+ * @since 3.3.1\n  */\n public class SourceTrackers {\n-    private static final Localizer _loc = Localizer.forPackage(SourceTrackers.class);\n+    private static final Localizer _loc =\n+        Localizer.forPackage(SourceTrackers.class);\n+\n     private static final String SEP = System.getProperty(\"line.separator\");\n \n     /**\n-     *  Create a message appropriate for display to the user describing\n-     *  the location(s) that <code>trackers</code> were loaded from.\n-     *\n-     *  @param trackers        the source-trackers for which location info should\n-     *                                  be provided.\n+     * Create a message appropriate for display to the user describing\n+     * the location(s) that <code>trackers</code> were loaded from.\n+     * \n+     * @param trackers the source-trackers for which location info should\n+     * be provided.\n      */\n     public static String getSourceLocationMessage(SourceTracker[] trackers) {\n         StringBuffer buf = new StringBuffer(20 * (trackers.length + 1));\n         buf.append(_loc.get(\"source-trackers-location-header\")).append(SEP);\n-\n         String sourceFilePath;\n-\n         for (int i = 0; i < trackers.length; i++) {\n-            sourceFilePath = ((trackers[i].getSourceFile() == null)\n-                ? _loc.get(\"source-tracker-file-unknown\")\n-                : trackers[i].getSourceFile().getAbsolutePath());\n-            buf.append(\"  \")\n-               .append(_loc.get(\"source-trackers-location-line-item\",\n-                    trackers[i].getResourceName(), sourceFilePath));\n-\n-            if (i < (trackers.length - 1)) {\n+            sourceFilePath = (trackers[i].getSourceFile() == null ?\n+                _loc.get(\"source-tracker-file-unknown\") :\n+                trackers[i].getSourceFile().getAbsolutePath());\n+            buf.append(\"  \").append(_loc.get(\n+                \"source-trackers-location-line-item\",\n+                trackers[i].getResourceName(), sourceFilePath));\n+            if (i < trackers.length - 1)\n                 buf.append(SEP);\n-            }\n         }\n-\n         return buf.toString();\n     }\n }"},{"sha":"9c39b245d54ab90b422f36a5f8162d596592710b","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/SuffixMetaDataFilter.java","status":"modified","additions":10,"deletions":14,"changes":24,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/SuffixMetaDataFilter.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/SuffixMetaDataFilter.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/SuffixMetaDataFilter.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74","patch":"@@ -1,39 +1,35 @@\n /*\n  * Copyright 2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *  Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n package org.apache.openjpa.lib.meta;\n \n-\n /**\n- *  <p>Filters metadata iteration based on resource name suffix.</p>\n- *\n- *  @author Abe White\n- *  @nojavadoc */\n+ * Filters metadata iteration based on resource name suffix.\n+ * \n+ * @author Abe White\n+ * @nojavadoc\n+ */\n public class SuffixMetaDataFilter implements MetaDataFilter {\n     private final String _suffix;\n \n     /**\n-     *  Constructor; supply suffix to match against.\n+     * Constructor; supply suffix to match against.\n      */\n     public SuffixMetaDataFilter(String suffix) {\n         _suffix = suffix;\n     }\n \n     public boolean matches(Resource rsrc) {\n         String name = rsrc.getName();\n-\n-        return (name != null) && name.endsWith(_suffix);\n+        return name != null && name.endsWith(_suffix);\n     }\n }"},{"sha":"3f71539bfa6321a5366e9db97cba32d90132b7a8","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/URLMetaDataIterator.java","status":"modified","additions":17,"deletions":31,"changes":48,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/URLMetaDataIterator.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/URLMetaDataIterator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/URLMetaDataIterator.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74","patch":"@@ -1,13 +1,10 @@\n /*\n  * Copyright 2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *  Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n@@ -16,66 +13,55 @@\n package org.apache.openjpa.lib.meta;\n \n import java.io.*;\n-\n import java.net.*;\n \n-\n /**\n- *  <p>Iterator over the metadata resource represented by a URL.</p>\n- *\n- *  @author Abe White\n- *  @nojavadoc */\n+ * Iterator over the metadata resource represented by a URL.\n+ * \n+ * @author Abe White\n+ * @nojavadoc\n+ */\n public class URLMetaDataIterator implements MetaDataIterator {\n     private final URL _url;\n     private boolean _iterated = false;\n \n     /**\n-     *  Constructor; supply resource URL.\n+     * Constructor; supply resource URL.\n      */\n     public URLMetaDataIterator(URL url) {\n         _url = url;\n     }\n \n     public boolean hasNext() {\n-        return (_url != null) && !_iterated;\n+        return _url != null && !_iterated;\n     }\n \n     public Object next() throws IOException {\n-        if (!hasNext()) {\n+        if (!hasNext())\n             throw new IllegalStateException();\n-        }\n \n         _iterated = true;\n-\n         return _url;\n     }\n \n     public InputStream getInputStream() throws IOException {\n-        if (!_iterated) {\n+        if (!_iterated)\n             throw new IllegalStateException();\n-        }\n-\n-        if (_url == null) {\n+        if (_url == null)\n             return null;\n-        }\n-\n         return _url.openStream();\n     }\n \n     public File getFile() {\n-        if (!_iterated) {\n+        if (!_iterated)\n             throw new IllegalStateException();\n-        }\n-\n-        if (_url == null) {\n+        if (_url == null)\n             return null;\n-        }\n-\n         File file = new File(URLDecoder.decode(_url.getPath()));\n-\n-        return (file.exists()) ? file : null;\n+        return(file.exists()) ? file : null;\n     }\n \n     public void close() {\n     }\n }\n+"},{"sha":"b62b6fa6dc7c71bf9b2e6d7ae84748473ad22717","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/XMLMetaDataParser.java","status":"modified","additions":164,"deletions":253,"changes":417,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/XMLMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/XMLMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/XMLMetaDataParser.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74","patch":"@@ -1,56 +1,48 @@\n /*\n  * Copyright 2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *  Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n package org.apache.openjpa.lib.meta;\n \n+import java.io.*;\n+import java.net.*;\n+import java.util.*;\n+import javax.xml.parsers.*;\n import org.apache.openjpa.lib.log.*;\n import org.apache.openjpa.lib.util.*;\n import org.apache.openjpa.lib.xml.*;\n-\n import org.xml.sax.*;\n import org.xml.sax.ext.*;\n import org.xml.sax.helpers.*;\n \n-import java.io.*;\n-\n-import java.net.*;\n-\n-import java.util.*;\n-\n-import javax.xml.parsers.*;\n-\n-\n /**\n- *  <p>Custom SAX parser used by the system to quickly parse metadata files.\n- *  Subclasses should handle the processing of the content.</p>\n- *\n- *  @author Abe White\n- *  @nojavadoc */\n+ * Custom SAX parser used by the system to quickly parse metadata files.\n+ * Subclasses should handle the processing of the content.\n+ * \n+ * @author Abe White\n+ * @nojavadoc\n+ */\n public abstract class XMLMetaDataParser extends DefaultHandler\n     implements LexicalHandler, MetaDataParser {\n-    private static final Localizer _loc = Localizer.forPackage(XMLMetaDataParser.class);\n+    private static final Localizer _loc = Localizer.forPackage\n+        (XMLMetaDataParser.class);\n     private static boolean _schemaBug;\n-\n     static {\n         try {\n-            // check for Xerces version 2.0.2 to see if we need to disable \n+            // check for Xerces version 2.0.2 to see if we need to disable\n             // schema validation, which works around the bug reported at:\n             // http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4708859\n-            _schemaBug = \"Xerces-J 2.0.2\".equals(Class.forName(\n-                        \"org.apache.xerces.impl.Version\").getField(\"fVersion\")\n-                                                      .get(null));\n+            _schemaBug = \"Xerces-J 2.0.2\".equals(Class.forName\n+                (\"org.apache.xerces.impl.Version\").getField(\"fVersion\").\n+                get(null));\n         } catch (Throwable t) {\n             // Xerces might not be available\n             _schemaBug = false;\n@@ -60,6 +52,7 @@\n     // map of classloaders to sets of parsed locations, so that we don't parse\n     // the same resource multiple times for the same class\n     private Map _parsed = null;\n+\n     private Log _log = null;\n     private boolean _validating = true;\n     private boolean _systemId = true;\n@@ -83,183 +76,176 @@\n     private int _ignore = Integer.MAX_VALUE;\n \n     /**\n-     *  Whether to parse element text.\n+     * Whether to parse element text.\n      */\n     public boolean getParseText() {\n         return _parseText;\n     }\n \n     /**\n-     *  Whether to parse element text.\n+     * Whether to parse element text.\n      */\n     public void setParseText(boolean text) {\n         _parseText = text;\n     }\n \n     /**\n-     *  Whether to parse element comments.\n+     * Whether to parse element comments.\n      */\n     public boolean getParseComments() {\n         return _parseComments;\n     }\n \n     /**\n-     *  Whether to parse element comments.\n+     * Whether to parse element comments.\n      */\n     public void setParseComments(boolean comments) {\n         _parseComments = comments;\n     }\n \n     /**\n-     *  The XML document location.\n+     * The XML document location.\n      */\n     public Location getLocation() {\n         return _location;\n     }\n \n     /**\n-     *  The lexical handler that should be registered with the SAX parser used\n-     *  by this class. Since the <code>org.xml.sax.ext</code> package is not\n-     *  a required part of SAX2, this handler might not be used by the parser.\n+     * The lexical handler that should be registered with the SAX parser used\n+     * by this class. Since the <code>org.xml.sax.ext</code> package is not\n+     * a required part of SAX2, this handler might not be used by the parser.\n      */\n     public LexicalHandler getLexicalHandler() {\n         return _lh;\n     }\n \n     /**\n-     *  The lexical handler that should be registered with the SAX parser used\n-     *  by this class. Since the <code>org.xml.sax.ext</code> package is not\n-     *  a required part of SAX2, this handler might not be used by the parser.\n+     * The lexical handler that should be registered with the SAX parser used\n+     * by this class. Since the <code>org.xml.sax.ext</code> package is not\n+     * a required part of SAX2, this handler might not be used by the parser.\n      */\n     public void setLexicalHandler(LexicalHandler lh) {\n         _lh = lh;\n     }\n \n     /**\n-     *  The XML document location.\n+     * The XML document location.\n      */\n     public void setLocation(Location location) {\n         _location = location;\n     }\n \n     /**\n-     *  Whether to use the source name as the XML system id.\n+     * Whether to use the source name as the XML system id.\n      */\n     public boolean getSourceIsSystemId() {\n         return _systemId;\n     }\n \n     /**\n-     *  Whether to use the source name as the XML system id.\n+     * Whether to use the source name as the XML system id.\n      */\n     public void setSourceIsSystemId(boolean systemId) {\n         _systemId = systemId;\n     }\n \n     /**\n-     *  Whether this is a validating parser.\n+     * Whether this is a validating parser.\n      */\n     public boolean isValidating() {\n         return _validating;\n     }\n \n     /**\n-     *  Whether this is a validating parser.\n+     * Whether this is a validating parser.\n      */\n     public void setValidating(boolean validating) {\n         _validating = validating;\n     }\n \n     /**\n-     *  Expected suffix for metadata resources, or null if unknown.\n-      */\n+     * Expected suffix for metadata resources, or null if unknown.\n+     */\n     public String getSuffix() {\n         return _suffix;\n     }\n \n     /**\n-     *  Expected suffix for metadata resources, or null if unknown.\n-      */\n+     * Expected suffix for metadata resources, or null if unknown.\n+     */\n     public void setSuffix(String suffix) {\n         _suffix = suffix;\n     }\n \n     /**\n-     *  Whether parsed resource names are cached to avoid duplicate parsing.\n+     * Whether parsed resource names are cached to avoid duplicate parsing.\n      */\n     public boolean isCaching() {\n         return _caching;\n     }\n \n     /**\n-     *  Whether parsed resource names are cached to avoid duplicate parsing.\n+     * Whether parsed resource names are cached to avoid duplicate parsing.\n      */\n     public void setCaching(boolean caching) {\n         _caching = caching;\n-\n-        if (!caching) {\n+        if (!caching)\n             clear();\n-        }\n     }\n \n     /**\n-     *  The log to write to.\n+     * The log to write to.\n      */\n     public Log getLog() {\n         return _log;\n     }\n \n     /**\n-     *  The log to write to.\n+     * The log to write to.\n      */\n     public void setLog(Log log) {\n         _log = log;\n     }\n \n     /**\n-     *  Classloader to use for class name resolution.\n+     * Classloader to use for class name resolution.\n      */\n     public ClassLoader getClassLoader() {\n         return _loader;\n     }\n \n     /**\n-     *  Classloader to use for class name resolution.\n+     * Classloader to use for class name resolution.\n      */\n     public void setClassLoader(ClassLoader loader) {\n         _loader = loader;\n     }\n \n     public List getResults() {\n-        if (_results == null) {\n+        if (_results == null)\n             return Collections.EMPTY_LIST;\n-        }\n-\n         return _results;\n     }\n \n     public void parse(String rsrc) throws IOException {\n-        if (rsrc != null) {\n+        if (rsrc != null)\n             parse(new ResourceMetaDataIterator(rsrc, _loader));\n-        }\n     }\n \n     public void parse(URL url) throws IOException {\n-        if (url != null) {\n+        if (url != null)\n             parse(new URLMetaDataIterator(url));\n-        }\n     }\n \n     public void parse(File file) throws IOException {\n-        if (file == null) {\n+        if (file == null)\n             return;\n-        }\n-\n-        if (!file.isDirectory()) {\n+        if (!file.isDirectory())\n             parse(new FileMetaDataIterator(file));\n-        } else {\n+        else {\n             String suff = (_suffix == null) ? \"\" : _suffix;\n-            parse(new FileMetaDataIterator(file, new SuffixMetaDataFilter(suff)));\n+            parse(new FileMetaDataIterator(file,\n+                new SuffixMetaDataFilter(suff)));\n         }\n     }\n \n@@ -269,177 +255,145 @@ public void parse(Class cls, boolean topDown) throws IOException {\n     }\n \n     public void parse(Reader xml, String sourceName) throws IOException {\n-        if ((xml != null) && ((sourceName == null) || !parsed(sourceName))) {\n+        if (xml != null && (sourceName == null || !parsed(sourceName)))\n             parseNewResource(xml, sourceName);\n-        }\n     }\n \n     public void parse(MetaDataIterator itr) throws IOException {\n         parse(itr, false);\n     }\n \n     /**\n-     *  Parse the resources returned by the given iterator, optionally stopping\n-     *  when the first valid resource is found.\n+     * Parse the resources returned by the given iterator, optionally stopping\n+     * when the first valid resource is found.\n      */\n     private void parse(MetaDataIterator itr, boolean stopFirst)\n         throws IOException {\n-        if (itr == null) {\n+        if (itr == null)\n             return;\n-        }\n-\n         try {\n             String sourceName;\n-\n             while (itr.hasNext()) {\n                 sourceName = itr.next().toString();\n-\n                 if (parsed(sourceName)) {\n-                    if (stopFirst) {\n+                    if (stopFirst)\n                         break;\n-                    }\n-\n                     continue;\n                 }\n \n                 // individual files of the resource might already be parsed\n                 _sourceFile = itr.getFile();\n                 parseNewResource(new InputStreamReader(itr.getInputStream()),\n                     sourceName);\n-\n-                if (stopFirst) {\n+                if (stopFirst)\n                     break;\n-                }\n             }\n-        } finally {\n+        }\n+        finally {\n             itr.close();\n         }\n     }\n \n     /**\n-     *  Parse a previously-unseen source.  All parsing methods delegate\n-     *  to this one.\n+     * Parse a previously-unseen source. All parsing methods delegate\n+     * to this one.\n      */\n     protected void parseNewResource(Reader xml, String sourceName)\n         throws IOException {\n-        if ((_log != null) && _log.isInfoEnabled()) {\n+        if (_log != null && _log.isInfoEnabled())\n             _log.info(_loc.get(\"start-parse\", sourceName));\n-        }\n \n         // even if we want to validate, specify that it won't happen\n         // if we have neither a DocType not a Schema\n         Object schemaSource = getSchemaSource();\n \n-        if ((schemaSource != null) && _schemaBug) {\n-            if ((_log != null) && _log.isInfoEnabled()) {\n+        if (schemaSource != null && _schemaBug) {\n+            if (_log != null && _log.isInfoEnabled())\n                 _log.info(_loc.get(\"parser-schema-bug\"));\n-            }\n-\n             schemaSource = null;\n         }\n \n         boolean validating = _validating &&\n-            ((getDocType() != null) || (schemaSource != null));\n+            (getDocType() != null || schemaSource != null);\n \n         // parse the metadata with a SAX parser\n         try {\n             _sourceName = sourceName;\n-\n             SAXParser parser = XMLFactory.getSAXParser(validating, true);\n             Object schema = null;\n-\n             if (validating) {\n                 schema = schemaSource;\n-\n-                if ((schema == null) && (getDocType() != null)) {\n+                if (schema == null && getDocType() != null)\n                     xml = new DocTypeReader(xml, getDocType());\n-                }\n             }\n \n-            if (_parseComments || (_lh != null)) {\n-                parser.setProperty(\"http://xml.org/sax/properties/lexical-handler\",\n-                    this);\n-            }\n+            if (_parseComments || _lh != null)\n+                parser.setProperty\n+                    (\"http://xml.org/sax/properties/lexical-handler\", this);\n \n             if (schema != null) {\n-                parser.setProperty(\"http://java.sun.com/xml/jaxp/properties/schemaLanguage\",\n+                parser.setProperty\n+                    (\"http://java.sun.com/xml/jaxp/properties/schemaLanguage\",\n                     \"http://www.w3.org/2001/XMLSchema\");\n-                parser.setProperty(\"http://java.sun.com/xml/jaxp/properties/schemaSource\",\n+                parser.setProperty\n+                    (\"http://java.sun.com/xml/jaxp/properties/schemaSource\",\n                     schema);\n             }\n \n             InputSource is = new InputSource(xml);\n-\n-            if (_systemId && (sourceName != null)) {\n+            if (_systemId && sourceName != null)\n                 is.setSystemId(sourceName);\n-            }\n-\n             parser.parse(is, this);\n             finish();\n         } catch (SAXException se) {\n             IOException ioe = new IOException(se.toString());\n             JavaVersions.initCause(ioe, se);\n             throw ioe;\n-        } finally {\n+        }\n+        finally {\n             reset();\n         }\n     }\n \n     /**\n-     *  Return true if the given source is parsed.  Otherwise, record that\n-     *  it will be parsed.\n+     * Return true if the given source is parsed. Otherwise, record that\n+     * it will be parsed.\n      */\n     protected boolean parsed(String src) {\n-        if (!_caching) {\n+        if (!_caching)\n             return false;\n-        }\n-\n-        if (_parsed == null) {\n+        if (_parsed == null)\n             _parsed = new HashMap();\n-        }\n \n         ClassLoader loader = currentClassLoader();\n         Set set = (Set) _parsed.get(loader);\n-\n         if (set == null) {\n             set = new HashSet();\n             _parsed.put(loader, set);\n         }\n-\n         boolean added = set.add(src);\n-\n-        if (!added && (_log != null) && _log.isTraceEnabled()) {\n+        if (!added && _log != null && _log.isTraceEnabled())\n             _log.trace(_loc.get(\"already-parsed\", src));\n-        }\n-\n         return !added;\n     }\n \n     /**\n-     *  Whether we previously parsed the given file.\n+     * Whether we previously parsed the given file.\n      */\n     private boolean parsed(File file, String cur) throws IOException {\n-        if (file == null) {\n+        if (file == null)\n             return false;\n-        }\n-\n         String src = file.getCanonicalFile().toURL().toString();\n-\n-        if (src.equals(cur)) {\n+        if (src.equals(cur))\n             return false;\n-        }\n-\n         return parsed(src);\n     }\n \n     public void clear() {\n-        if ((_log != null) && _log.isTraceEnabled()) {\n+        if (_log != null && _log.isTraceEnabled())\n             _log.trace(_loc.get(\"clear-parser\", this));\n-        }\n-\n-        if (_parsed != null) {\n+        if (_parsed != null)\n             _parsed.clear();\n-        }\n     }\n \n     public void error(SAXParseException se) throws SAXException {\n@@ -457,136 +411,109 @@ public void setDocumentLocator(Locator locator) {\n     public void startElement(String uri, String name, String qName,\n         Attributes attrs) throws SAXException {\n         _depth++;\n-\n-        if (_depth <= _ignore) {\n-            if (!startElement(qName, attrs)) {\n+        if (_depth <= _ignore)\n+            if (!startElement(qName, attrs))\n                 ignoreContent(true);\n-            }\n-        }\n     }\n \n     public void endElement(String uri, String name, String qName)\n         throws SAXException {\n-        if (_depth < _ignore) {\n+        if (_depth < _ignore)\n             endElement(qName);\n-        }\n-\n         _text = null;\n-\n-        if (_comments != null) {\n+        if (_comments != null)\n             _comments.clear();\n-        }\n-\n-        if (_depth == _ignore) {\n+        if (_depth == _ignore)\n             _ignore = Integer.MAX_VALUE;\n-        }\n-\n         _depth--;\n     }\n \n     public void characters(char[] ch, int start, int length) {\n-        if (_parseText && (_depth <= _ignore)) {\n-            if (_text == null) {\n+        if (_parseText && _depth <= _ignore) {\n+            if (_text == null)\n                 _text = new StringBuffer();\n-            }\n-\n             _text.append(ch, start, length);\n         }\n     }\n \n-    public void comment(char[] ch, int start, int length)\n-        throws SAXException {\n-        if (_parseComments && (_depth <= _ignore)) {\n-            if (_comments == null) {\n+    public void comment(char[] ch, int start, int length) throws SAXException {\n+        if (_parseComments && _depth <= _ignore) {\n+            if (_comments == null)\n                 _comments = new ArrayList(3);\n-            }\n-\n             _comments.add(String.valueOf(ch, start, length));\n         }\n-\n-        if (_lh != null) {\n+        if (_lh != null)\n             _lh.comment(ch, start, length);\n-        }\n     }\n \n     public void startCDATA() throws SAXException {\n-        if (_lh != null) {\n+        if (_lh != null)\n             _lh.startCDATA();\n-        }\n     }\n \n     public void endCDATA() throws SAXException {\n-        if (_lh != null) {\n+        if (_lh != null)\n             _lh.endCDATA();\n-        }\n     }\n \n     public void startDTD(String name, String publicId, String systemId)\n         throws SAXException {\n-        if (_lh != null) {\n+        if (_lh != null)\n             _lh.startDTD(name, publicId, systemId);\n-        }\n     }\n \n     public void endDTD() throws SAXException {\n-        if (_lh != null) {\n+        if (_lh != null)\n             _lh.endDTD();\n-        }\n     }\n \n     public void startEntity(String name) throws SAXException {\n-        if (_lh != null) {\n+        if (_lh != null)\n             _lh.startEntity(name);\n-        }\n     }\n \n     public void endEntity(String name) throws SAXException {\n-        if (_lh != null) {\n+        if (_lh != null)\n             _lh.endEntity(name);\n-        }\n     }\n \n     /**\n-     *  Override this method marking the start of some element.  If this method\n-     *  returns false, the content of the element and the end element event will\n-     *  be ignored.\n+     * Override this method marking the start of some element. If this method\n+     * returns false, the content of the element and the end element event will\n+     * be ignored.\n      */\n     protected abstract boolean startElement(String name, Attributes attrs)\n         throws SAXException;\n \n     /**\n-     *  Override this method marking the end of some element.\n+     * Override this method marking the end of some element.\n      */\n     protected abstract void endElement(String name) throws SAXException;\n \n     /**\n-     *  Add a result to be returned from the current parse.\n+     * Add a result to be returned from the current parse.\n      */\n     protected void addResult(Object result) {\n-        if ((_log != null) && _log.isTraceEnabled()) {\n+        if (_log != null && _log.isTraceEnabled())\n             _log.trace(_loc.get(\"add-result\", result));\n-        }\n-\n         _curResults.add(result);\n     }\n \n     /**\n-     *  Override this method to finish up after a parse; this is only\n-     *  called if no errors are encountered during parsing.  Subclasses should\n-     *  call <code>super.finish ()</code> to resolve superclass state.\n+     * Override this method to finish up after a parse; this is only\n+     * called if no errors are encountered during parsing. Subclasses should\n+     * call <code>super.finish()</code> to resolve superclass state.\n      */\n     protected void finish() {\n-        if ((_log != null) && _log.isTraceEnabled()) {\n+        if (_log != null && _log.isTraceEnabled())\n             _log.trace(_loc.get(\"end-parse\", getSourceName()));\n-        }\n-\n         _results = new ArrayList(_curResults);\n     }\n \n     /**\n-     *  Override this method to clear any state and ready the parser for\n-     *  a new document.  Subclasses should call\n-     *  <code>super.reset ()</code> to clear superclass state.\n+     * Override this method to clear any state and ready the parser for\n+     * a new document. Subclasses should call\n+     * <code>super.reset()</code> to clear superclass state.\n      */\n     protected void reset() {\n         _curResults.clear();\n@@ -595,147 +522,131 @@ protected void reset() {\n         _sourceFile = null;\n         _depth = -1;\n         _ignore = Integer.MAX_VALUE;\n-\n-        if (_comments != null) {\n+        if (_comments != null)\n             _comments.clear();\n-        }\n     }\n \n     /**\n-     *  Implement to return the XML schema source for the document.  Returns\n-     *  null by default.  May return:\n-     *  <ul>\n-     *  <li><code>String</code> pointing to schema URI.</li>\n-     *  <li><code>InputStream</code> containing schema contents.</li>\n-     *  <li><code>InputSource</code> containing schema contents.</li>\n-     *  <li><code>File</code> containing schema contents.</li>\n-     *  <li>Array of any of the above elements.</li>\n-     *  </ul>\n+     * Implement to return the XML schema source for the document. Returns\n+     * null by default. May return:\n+     * <ul>\n+     * <li><code>String</code> pointing to schema URI.</li>\n+     * <li><code>InputStream</code> containing schema contents.</li>\n+     * <li><code>InputSource</code> containing schema contents.</li>\n+     * <li><code>File</code> containing schema contents.</li>\n+     * <li>Array of any of the above elements.</li>\n+     * </ul>\n      */\n     protected Object getSchemaSource() throws IOException {\n         return null;\n     }\n \n     /**\n-     *  Override this method to return any <code>DOCTYPE</code> declaration\n-     *  that should be dynamically included in xml documents that will be\n-     *  validated.  Returns null by default.\n+     * Override this method to return any <code>DOCTYPE</code> declaration\n+     * that should be dynamically included in xml documents that will be\n+     * validated. Returns null by default.\n      */\n     protected Reader getDocType() throws IOException {\n         return null;\n     }\n \n     /**\n-     *  Return the name of the source file being parsed.\n+     * Return the name of the source file being parsed.\n      */\n     protected String getSourceName() {\n         return _sourceName;\n     }\n \n     /**\n-     *  Return the file of the source being parsed.\n-      */\n+     * Return the file of the source being parsed.\n+     */\n     protected File getSourceFile() {\n         return _sourceFile;\n     }\n \n     /**\n-     *  Add current comments to the given entity.  By default, assumes entity\n-     *  is {@link Commentable}.\n+     * Add current comments to the given entity. By default, assumes entity\n+     * is {@link Commentable}.\n      */\n     protected void addComments(Object obj) {\n         String[] comments = currentComments();\n-\n-        if ((comments.length > 0) && obj instanceof Commentable) {\n+        if (comments.length > 0 && obj instanceof Commentable)\n             ((Commentable) obj).setComments(comments);\n-        }\n     }\n \n     /**\n-     *  Array of comments for the current node, or empty array if none.\n+     * Array of comments for the current node, or empty array if none.\n      */\n     protected String[] currentComments() {\n-        if ((_comments == null) || _comments.isEmpty()) {\n+        if (_comments == null || _comments.isEmpty())\n             return Commentable.EMPTY_COMMENTS;\n-        }\n-\n-        return (String[]) _comments.toArray(new String[_comments.size()]);\n+        return(String[]) _comments.toArray(new String[_comments.size()]);\n     }\n \n     /**\n-     *  Return the text value within the current node.\n+     * Return the text value within the current node.\n      */\n     protected String currentText() {\n-        if (_text == null) {\n+        if (_text == null)\n             return \"\";\n-        }\n-\n         return _text.toString().trim();\n     }\n \n     /**\n-     *  Return the current location within the source file.\n+     * Return the current location within the source file.\n      */\n     protected String currentLocation() {\n         return \" [\" + _loc.get(\"loc-prefix\") + _location.getLocation() + \"]\";\n     }\n \n     /**\n-     *  Return the parse depth.  Within the root element, the depth is 0,\n-     *  within the first nested element, it is 1, and so forth.\n+     * Return the parse depth. Within the root element, the depth is 0,\n+     * within the first nested element, it is 1, and so forth.\n      */\n     protected int currentDepth() {\n         return _depth;\n     }\n \n     /**\n-     *  Return the class loader to use when resolving resources and loading\n-     *  classes.\n+     * Return the class loader to use when resolving resources and loading\n+     * classes.\n      */\n     protected ClassLoader currentClassLoader() {\n-        if (_loader != null) {\n+        if (_loader != null)\n             return _loader;\n-        }\n-\n-        if (_curLoader == null) {\n+        if (_curLoader == null)\n             _curLoader = Thread.currentThread().getContextClassLoader();\n-        }\n-\n         return _curLoader;\n     }\n \n     /**\n-     *  Ignore all content below the current element.\n-     *\n-     *  @param ignoreEnd        whether to ignore the end element event\n+     * Ignore all content below the current element.\n+     * \n+     * @param ignoreEnd whether to ignore the end element event\n      */\n     protected void ignoreContent(boolean ignoreEnd) {\n         _ignore = _depth;\n-\n-        if (!ignoreEnd) {\n+        if (!ignoreEnd)\n             _ignore++;\n-        }\n     }\n \n     /**\n-     *  Returns a SAXException with the source file name and the given error\n-     *  message.\n+     * Returns a SAXException with the source file name and the given error\n+     * message.\n      */\n     protected SAXException getException(String msg) {\n-        return new SAXException(getSourceName() + currentLocation() + \": \" +\n-            msg);\n+        return new SAXException(getSourceName() + currentLocation() +\n+            \": \" + msg);\n     }\n \n     /**\n-     *  Returns a SAXException with the source file name and the given error\n-     *  message.\n+     * Returns a SAXException with the source file name and the given error\n+     * message.\n      */\n     protected SAXException getException(String msg, Throwable cause) {\n-        if ((cause != null) && (_log != null) && _log.isTraceEnabled()) {\n+        if (cause != null && _log != null && _log.isTraceEnabled())\n             _log.trace(cause);\n-        }\n-\n-        return new SAXException(getSourceName() + currentLocation() + \": \" +\n-            msg + \" [\" + cause + \"]\");\n+        return new SAXException(getSourceName() + currentLocation() +\n+            \": \" + msg + \" [\" + cause + \"]\");\n     }\n }"},{"sha":"020c44f3fd002f5dc7e31945ca3ab77bd46b7320","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/XMLMetaDataSerializer.java","status":"modified","additions":73,"deletions":112,"changes":185,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/XMLMetaDataSerializer.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/XMLMetaDataSerializer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/XMLMetaDataSerializer.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74","patch":"@@ -1,49 +1,44 @@\n /*\n  * Copyright 2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *  Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n package org.apache.openjpa.lib.meta;\n \n+import java.io.*;\n+import java.util.*;\n+import javax.xml.transform.*;\n+import javax.xml.transform.sax.*;\n+import javax.xml.transform.stream.*;\n import org.apache.openjpa.lib.log.*;\n import org.apache.openjpa.lib.util.*;\n import org.apache.openjpa.lib.xml.*;\n-\n import org.xml.sax.*;\n import org.xml.sax.ext.*;\n import org.xml.sax.helpers.*;\n \n-import java.io.*;\n-\n-import java.util.*;\n-\n-import javax.xml.transform.*;\n-import javax.xml.transform.sax.*;\n-import javax.xml.transform.stream.*;\n-\n-\n /**\n- *  <p>Abstract base type for serlializers that transfer groups of objects\n- *  to XML.  Includes a way of serializing objects back to the XML files\n- *  they were parsed from.</p>\n- *\n- *  <p>Serializers are not thread safe.</p>\n- *\n- *  @author Abe White\n- *  @nojavadoc */\n+ * Abstract base type for serlializers that transfer groups of objects\n+ * to XML. Includes a way of serializing objects back to the XML files\n+ * they were parsed from.\n+ *  Serializers are not thread safe.\n+ * \n+ * @author Abe White\n+ * @nojavadoc\n+ */\n public abstract class XMLMetaDataSerializer implements MetaDataSerializer {\n-    private static final Localizer _loc = Localizer.forPackage(XMLMetaDataSerializer.class);\n-    private static final SAXTransformerFactory _factory = (SAXTransformerFactory) TransformerFactory.newInstance();\n+    private static final Localizer _loc = Localizer.forPackage\n+        (XMLMetaDataSerializer.class);\n+    private static final SAXTransformerFactory _factory =\n+        (SAXTransformerFactory) TransformerFactory.newInstance();\n+\n     private Log _log = null;\n \n     // current serialization state\n@@ -53,15 +48,15 @@\n     private File _backup = null;\n \n     /**\n-     *  The log to write to.\n-      */\n+     * The log to write to.\n+     */\n     public Log getLog() {\n         return _log;\n     }\n \n     /**\n-     *  The log to write to.\n-      */\n+     * The log to write to.\n+     */\n     public void setLog(Log log) {\n         _log = log;\n     }\n@@ -72,47 +67,36 @@ public void serialize(int flags) throws IOException {\n \n     public void serialize(Map output, int flags) throws IOException {\n         Map files = getFileMap();\n-\n-        if (files == null) {\n+        if (files == null)\n             return;\n-        }\n \n         // for each file, serialize objects\n         Map.Entry entry;\n-\n         for (Iterator itr = files.entrySet().iterator(); itr.hasNext();) {\n             entry = (Map.Entry) itr.next();\n-\n             File file = (File) entry.getKey();\n             Collection fileObjs = (Collection) entry.getValue();\n \n-            if ((_log != null) && _log.isInfoEnabled()) {\n+            if (_log != null && _log.isInfoEnabled())\n                 _log.info(_loc.get(\"ser-file\", file));\n-            }\n \n             try {\n                 TransformerHandler trans = _factory.newTransformerHandler();\n                 Writer writer;\n-\n                 if (output == null) {\n                     _backup = prepareWrite(file);\n                     writer = new FileWriter(file);\n-                } else {\n+                } else\n                     writer = new StringWriter();\n-                }\n \n                 Writer xml = writer;\n-\n-                if ((flags & PRETTY) > 0) {\n+                if ((flags & PRETTY) > 0)\n                     xml = new XMLWriter(writer);\n-                }\n-\n                 trans.setResult(new StreamResult(xml));\n                 serialize(fileObjs, trans, flags);\n \n-                if (output != null) {\n+                if (output != null)\n                     output.put(file, ((StringWriter) writer).toString());\n-                }\n             } catch (SAXException se) {\n                 throw new IOException(se.toString());\n             } catch (TransformerConfigurationException tce) {\n@@ -122,105 +106,88 @@ public void serialize(Map output, int flags) throws IOException {\n     }\n \n     /**\n-     *  Prepare to write to the given file.  Back up the file and make sure the\n-     *  path to it is created.\n+     * Prepare to write to the given file. Back up the file and make sure the\n+     * path to it is created.\n      */\n     protected File prepareWrite(File file) throws IOException {\n         File backup = Files.backup(file, false);\n-\n         if (backup == null) {\n             File parent = file.getParentFile();\n-\n-            if ((parent != null) && !parent.exists()) {\n+            if (parent != null && !parent.exists())\n                 parent.mkdirs();\n-            }\n         }\n-\n         return backup;\n     }\n \n     /**\n-     *  Returns a {@link Map} with keys of the {@link File} to be\n-     *  written to, and values of a {@link Collection} of\n-     *  {@link SourceTracker} instances.\n+     * Returns a {@link Map} with keys of the {@link File} to be\n+     * written to, and values of a {@link Collection} of\n+     * {@link SourceTracker} instances.\n      */\n     protected Map getFileMap() {\n         Collection objs = getObjects();\n-\n-        if ((objs == null) || objs.isEmpty()) {\n+        if (objs == null || objs.isEmpty())\n             return null;\n-        }\n \n         // create a map of files to lists of objects\n         Map files = new HashMap();\n         File file;\n         Collection fileObjs;\n         Object obj;\n-\n         for (Iterator itr = objs.iterator(); itr.hasNext();) {\n             obj = itr.next();\n             file = getSourceFile(obj);\n-\n             if (file == null) {\n-                if ((_log != null) && _log.isTraceEnabled()) {\n+                if (_log != null && _log.isTraceEnabled())\n                     _log.trace(_loc.get(\"no-file\", obj));\n-                }\n-\n                 continue;\n             }\n \n             fileObjs = (Collection) files.get(file);\n-\n             if (fileObjs == null) {\n                 fileObjs = new LinkedList();\n                 files.put(file, fileObjs);\n             }\n-\n             fileObjs.add(obj);\n         }\n \n         return files;\n     }\n \n     /**\n-     *  Return the source file for the given instance.  By default, checks\n-     *  to see if the instance implements {@link SourceTracker}.\n+     * Return the source file for the given instance. By default, checks\n+     * to see if the instance implements {@link SourceTracker}.\n      */\n     protected File getSourceFile(Object obj) {\n-        if (obj instanceof SourceTracker) {\n-            return ((SourceTracker) obj).getSourceFile();\n-        }\n-\n+        if (obj instanceof SourceTracker)\n+            return((SourceTracker) obj).getSourceFile();\n         return null;\n     }\n \n     public void serialize(File file, int flags) throws IOException {\n-        if (_log != null) {\n+        if (_log != null)\n             _log.info(_loc.get(\"ser-file\", file));\n-        }\n \n         _backup = prepareWrite(file);\n-\n         FileWriter out = new FileWriter(file.getCanonicalPath(),\n-                (flags & APPEND) > 0);\n+            (flags & APPEND) > 0);\n         serialize(out, flags);\n         out.close();\n     }\n \n     public void serialize(Writer out, int flags) throws IOException {\n         try {\n-            if ((flags & PRETTY) > 0) {\n+            if ((flags & PRETTY) > 0)\n                 serialize(new StreamResult(new XMLWriter(out)), flags);\n-            } else {\n+            else\n                 serialize(new StreamResult(out), flags);\n-            }\n         } catch (SAXException se) {\n             throw new IOException(se.toString());\n         }\n     }\n \n     /**\n-     *  Serialize the current set of objects to the given result.\n+     * Serialize the current set of objects to the given result.\n      */\n     public void serialize(Result result, int flags) throws SAXException {\n         try {\n@@ -233,118 +200,113 @@ public void serialize(Result result, int flags) throws SAXException {\n     }\n \n     /**\n-     *  Serilize the current set of objects to a series of SAX events on the\n-     *  given handler.\n+     * Serilize the current set of objects to a series of SAX events on the\n+     * given handler.\n      */\n-    public void serialize(ContentHandler handler, int flags)\n-        throws SAXException {\n+    public void serialize(ContentHandler handler, int flags) throws SAXException {\n         serialize(getObjects(), handler, flags);\n     }\n \n     /**\n-     *  Serialize the given collection of objects to the given handler.\n+     * Serialize the given collection of objects to the given handler.\n      */\n     private void serialize(Collection objs, ContentHandler handler, int flags)\n         throws SAXException {\n-        if ((_log != null) && _log.isTraceEnabled()) {\n+        if (_log != null && _log.isTraceEnabled())\n             _log.trace(_loc.get(\"ser-objs\", objs));\n-        }\n \n         _handler = handler;\n         _flags = flags;\n-\n         try {\n             if (!objs.isEmpty()) {\n                 handler.startDocument();\n                 serialize(objs);\n                 handler.endDocument();\n             }\n-        } finally {\n+        }\n+        finally {\n             reset();\n         }\n     }\n \n     /**\n-     *  Whether this serialization is in verbose mode.\n+     * Whether this serialization is in verbose mode.\n      */\n     protected boolean isVerbose() {\n-        return (_flags & VERBOSE) > 0;\n+        return(_flags & VERBOSE) > 0;\n     }\n \n     /**\n-     *  The backup file made for the current file being parsed.\n+     * The backup file made for the current file being parsed.\n      */\n     protected File currentBackupFile() {\n         return _backup;\n     }\n \n     /**\n-     *  Start an element with the current attribute settings.  Clears the\n-     *  attributes as well.\n+     * Start an element with the current attribute settings. Clears the\n+     * attributes as well.\n      */\n     protected void startElement(String name) throws SAXException {\n         _handler.startElement(\"\", name, name, _attrs);\n         _attrs.clear();\n     }\n \n     /**\n-     *  End the current element.\n+     * End the current element.\n      */\n     protected void endElement(String name) throws SAXException {\n         _handler.endElement(\"\", name, name);\n     }\n \n     /**\n-     *  Add text to the current element.\n+     * Add text to the current element.\n      */\n     protected void addText(String text) throws SAXException {\n         _handler.characters(text.toCharArray(), 0, text.length());\n     }\n \n     /**\n-     *  Add an attribute to the current group.\n+     * Add an attribute to the current group.\n      */\n     protected void addAttribute(String name, String value) {\n         _attrs.addAttribute(\"\", name, name, \"CDATA\", value);\n     }\n \n     /**\n-     *  The current attributes.\n+     * The current attributes.\n      */\n     protected Attributes getAttributes() {\n         return _attrs;\n     }\n \n     /**\n-     *  Add a comment to the stream.\n+     * Add a comment to the stream.\n      */\n     protected void addComments(String[] comments) throws SAXException {\n-        if ((comments == null) || (comments.length == 0) ||\n-                !(_handler instanceof LexicalHandler)) {\n+        if (comments == null || comments.length == 0\n+            || !(_handler instanceof LexicalHandler))\n             return;\n-        }\n \n         LexicalHandler lh = (LexicalHandler) _handler;\n         char[] chars;\n-\n         for (int i = 0; i < comments.length; i++) {\n             chars = comments[i].toCharArray();\n             lh.comment(chars, 0, chars.length);\n         }\n     }\n \n     /**\n-     *  Write the given entity's comments.  By default, tests if entity is\n-     *  {@link Commentable}.\n+     * Write the given entity's comments. By default, tests if entity is\n+     * {@link Commentable}.\n      */\n     protected void addComments(Object obj) throws SAXException {\n-        if (obj instanceof Commentable) {\n+        if (obj instanceof Commentable)\n             addComments(((Commentable) obj).getComments());\n-        }\n     }\n \n     /**\n-     *  Reset serialization state for the next document.\n+     * Reset serialization state for the next document.\n      */\n     protected void reset() {\n         _attrs.clear();\n@@ -354,13 +316,12 @@ protected void reset() {\n     }\n \n     /**\n-     *  Serialize the given set of objects.\n+     * Serialize the given set of objects.\n      */\n-    protected abstract void serialize(Collection objs)\n-        throws SAXException;\n+    protected abstract void serialize(Collection objs) throws SAXException;\n \n     /**\n-     *  Return the current set of objects for serialization.\n+     * Return the current set of objects for serialization.\n      */\n     protected abstract Collection getObjects();\n }"},{"sha":"12da20a361c3f50ff87334cc96e225903ba85801","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ZipFileMetaDataIterator.java","status":"modified","additions":24,"deletions":50,"changes":74,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ZipFileMetaDataIterator.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ZipFileMetaDataIterator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ZipFileMetaDataIterator.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74","patch":"@@ -1,13 +1,10 @@\n /*\n  * Copyright 2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *  Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n@@ -16,20 +13,18 @@\n package org.apache.openjpa.lib.meta;\n \n import java.io.*;\n-\n import java.net.*;\n-\n import java.util.*;\n import java.util.zip.*;\n \n-\n /**\n- *  <p>Iterator over all metadata resources in a given zip file.</p>\n- *\n- *  @author Abe White\n- *  @nojavadoc */\n-public class ZipFileMetaDataIterator implements MetaDataIterator,\n-    MetaDataFilter.Resource {\n+ * Iterator over all metadata resources in a given zip file.\n+ * \n+ * @author Abe White\n+ * @nojavadoc\n+ */\n+public class ZipFileMetaDataIterator\n+    implements MetaDataIterator, MetaDataFilter.Resource {\n     private final ZipFile _file;\n     private final MetaDataFilter _filter;\n     private final Enumeration _entries;\n@@ -38,7 +33,7 @@\n     private ZipEntry _last = null;\n \n     /**\n-     *  Constructor; supply zip/jar URL and optional file filter.\n+     * Constructor; supply zip/jar URL and optional file filter.\n      */\n     public ZipFileMetaDataIterator(URL url, MetaDataFilter filter)\n         throws IOException {\n@@ -49,7 +44,7 @@ public ZipFileMetaDataIterator(URL url, MetaDataFilter filter)\n     }\n \n     /**\n-     *  Constructor; supply zip file and optional file filter.\n+     * Constructor; supply zip file and optional file filter.\n      */\n     public ZipFileMetaDataIterator(ZipFile file, MetaDataFilter filter) {\n         _file = file;\n@@ -59,91 +54,70 @@ public ZipFileMetaDataIterator(ZipFile file, MetaDataFilter filter) {\n     }\n \n     public boolean hasNext() throws IOException {\n-        if (_entries == null) {\n+        if (_entries == null)\n             return false;\n-        }\n \n         // search for next metadata file\n-        while ((_entry == null) && _entries.hasMoreElements()) {\n+        while (_entry == null && _entries.hasMoreElements()) {\n             _entry = (ZipEntry) _entries.nextElement();\n-\n-            if ((_filter != null) && !_filter.matches(this)) {\n+            if (_filter != null && !_filter.matches(this))\n                 _entry = null;\n-            }\n         }\n-\n         return _entry != null;\n     }\n \n     public Object next() throws IOException {\n-        if (!hasNext()) {\n+        if (!hasNext())\n             throw new NoSuchElementException();\n-        }\n-\n         String ret = _entry.getName();\n         _last = _entry;\n         _entry = null;\n-\n         return ret;\n     }\n \n     public InputStream getInputStream() throws IOException {\n-        if (_last == null) {\n+        if (_last == null)\n             throw new IllegalStateException();\n-        }\n-\n         return _file.getInputStream(_last);\n     }\n \n     public File getFile() {\n-        if (_last == null) {\n+        if (_last == null)\n             throw new IllegalStateException();\n-        }\n-\n         return null;\n     }\n \n     public void close() {\n-        if (_close) {\n-            try {\n-                _file.close();\n-            } catch (IOException ioe) {\n-            }\n-        }\n+        if (_close)\n+            try { _file.close(); } catch (IOException ioe) {}\n     }\n \n     //////////////////////////////////////////\n     // MetaDataFilter.Resource implementation\n     //////////////////////////////////////////\n+\n     public String getName() {\n         return _entry.getName();\n     }\n \n     public byte[] getContent() throws IOException {\n         long size = _entry.getSize();\n-\n-        if (size == 0) {\n+        if (size == 0)\n             return new byte[0];\n-        }\n \n         InputStream in = _file.getInputStream(_entry);\n         byte[] content;\n-\n         if (size < 0) {\n             ByteArrayOutputStream bout = new ByteArrayOutputStream();\n             byte[] buf = new byte[1024];\n-\n-            for (int r; (r = in.read(buf)) != -1; bout.write(buf, 0, r))\n-                ;\n-\n+            for (int r; (r = in.read(buf)) != -1; bout.write(buf, 0, r));\n             content = bout.toByteArray();\n         } else {\n             content = new byte[(int) size];\n             in.read(content);\n         }\n-\n         in.close();\n-\n         return content;\n     }\n }\n+"},{"sha":"6197b4450c52e5071f4e46e67efe18a2b7097677","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ZipStreamMetaDataIterator.java","status":"modified","additions":25,"deletions":50,"changes":75,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ZipStreamMetaDataIterator.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ZipStreamMetaDataIterator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ZipStreamMetaDataIterator.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74","patch":"@@ -1,13 +1,10 @@\n /*\n  * Copyright 2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *  Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n@@ -16,26 +13,25 @@\n package org.apache.openjpa.lib.meta;\n \n import java.io.*;\n-\n import java.util.*;\n import java.util.zip.*;\n \n-\n /**\n- *  <p>Iterator over all metadata resources in a given zip input stream.</p>\n- *\n- *  @author Abe White\n- *  @nojavadoc */\n-public class ZipStreamMetaDataIterator implements MetaDataIterator,\n-    MetaDataFilter.Resource {\n+ * Iterator over all metadata resources in a given zip input stream.\n+ * \n+ * @author Abe White\n+ * @nojavadoc\n+ */\n+public class ZipStreamMetaDataIterator\n+    implements MetaDataIterator, MetaDataFilter.Resource {\n     private final ZipInputStream _stream;\n     private final MetaDataFilter _filter;\n     private ZipEntry _entry = null;\n     private ZipEntry _last = null;\n     private byte[] _buf = null;\n \n     /**\n-     *  Constructor; supply zip stream and optional metadata filter.\n+     * Constructor; supply zip stream and optional metadata filter.\n      */\n     public ZipStreamMetaDataIterator(ZipInputStream stream,\n         MetaDataFilter filter) {\n@@ -44,58 +40,44 @@ public ZipStreamMetaDataIterator(ZipInputStream stream,\n     }\n \n     public boolean hasNext() throws IOException {\n-        if (_stream == null) {\n+        if (_stream == null)\n             return false;\n-        }\n-\n-        if (_entry != null) {\n+        if (_entry != null)\n             return true;\n-        }\n \n         // close last rsrc\n-        if ((_buf == null) && (_last != null)) {\n+        if (_buf == null && _last != null)\n             _stream.closeEntry();\n-        }\n-\n         _last = null;\n         _buf = null;\n \n         // search for next file\n         ZipEntry entry;\n-\n-        while ((_entry == null) && ((entry = _stream.getNextEntry()) != null)) {\n+        while (_entry == null && (entry = _stream.getNextEntry()) != null) {\n             _entry = entry;\n-\n-            if ((_filter != null) && !_filter.matches(this)) {\n+            if (_filter != null && !_filter.matches(this)) {\n                 _entry = null;\n                 _stream.closeEntry();\n             }\n         }\n-\n         return _entry != null;\n     }\n \n     public Object next() throws IOException {\n-        if (!hasNext()) {\n+        if (!hasNext())\n             throw new NoSuchElementException();\n-        }\n-\n         String ret = _entry.getName();\n         _last = _entry;\n         _entry = null;\n-\n         return ret;\n     }\n \n     public InputStream getInputStream() {\n-        if (_last == null) {\n+        if (_last == null)\n             throw new IllegalStateException();\n-        }\n \n-        if (_buf != null) {\n+        if (_buf != null)\n             return new ByteArrayInputStream(_buf);\n-        }\n-\n         return new NoCloseInputStream();\n     }\n \n@@ -104,15 +86,13 @@ public File getFile() {\n     }\n \n     public void close() {\n-        try {\n-            _stream.close();\n-        } catch (IOException ioe) {\n-        }\n+        try { _stream.close(); } catch (IOException ioe) {}\n     }\n \n     //////////////////////////////////////////\n     // MetaDataFilter.Resource implementation\n     //////////////////////////////////////////\n+\n     public String getName() {\n         return _entry.getName();\n     }\n@@ -121,28 +101,22 @@ public String getName() {\n         // buffer content so that future calls to getInputStream can read\n         // the same data\n         int size = (int) _entry.getSize();\n-\n         if (size < 0) {\n             ByteArrayOutputStream bout = new ByteArrayOutputStream();\n             byte[] buf = new byte[1024];\n-\n-            for (int r; (r = _stream.read(buf)) != -1; bout.write(buf, 0, r))\n-                ;\n-\n+            for (int r; (r = _stream.read(buf)) != -1; bout.write(buf, 0, r));\n             _buf = bout.toByteArray();\n         } else {\n             _buf = new byte[size];\n             _stream.read(_buf);\n         }\n-\n         _stream.closeEntry();\n-\n         return _buf;\n     }\n \n     /**\n-     *  Non-closing input stream used to make sure the underlying zip\n-     *  stream is not closed.\n+     * Non-closing input stream used to make sure the underlying zip\n+     * stream is not closed.\n      */\n     private class NoCloseInputStream extends InputStream {\n         public int available() throws IOException {\n@@ -161,3 +135,4 @@ public void close() {\n         }\n     }\n }\n+"},{"sha":"b01b116094cf55eb9928b40c444da1cc50beefcc","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/AbstractListIterator.java","status":"modified","additions":11,"deletions":14,"changes":25,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/AbstractListIterator.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/AbstractListIterator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/AbstractListIterator.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74","patch":"@@ -1,32 +1,29 @@\n /*\n  * Copyright 2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *  Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n package org.apache.openjpa.lib.rop;\n \n-import org.apache.openjpa.lib.util.*;\n-\n import java.util.*;\n-\n+import org.apache.openjpa.lib.util.*;\n \n /**\n- *  <p>Abstract read-only list iterator.</p>\n- *\n- *  @author Abe White\n- *  @nojavadoc */\n+ * Abstract read-only list iterator.\n+ * \n+ * @author Abe White\n+ * @nojavadoc\n+ */\n abstract class AbstractListIterator implements ListIterator {\n-    private static final Localizer _loc = Localizer.forPackage(AbstractListIterator.class);\n+    private static final Localizer _loc = Localizer.forPackage\n+        (AbstractListIterator.class);\n \n     public void add(Object o) {\n         throw new UnsupportedOperationException(_loc.get(\"read-only\"));"},{"sha":"4bc5c1f49a9bae597d7e119c4eed0e8a2d16a712","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/AbstractNonSequentialResultList.java","status":"modified","additions":26,"deletions":77,"changes":103,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/AbstractNonSequentialResultList.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/AbstractNonSequentialResultList.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/AbstractNonSequentialResultList.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74","patch":"@@ -1,128 +1,95 @@\n /*\n  * Copyright 2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *  Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n package org.apache.openjpa.lib.rop;\n \n-import org.apache.commons.lang.*;\n-\n import java.util.*;\n-\n+import org.apache.commons.lang.*;\n \n /**\n- *  <p>Abstract base class for random-access result lists.  Unlike the\n- *  {@link AbstractList}, this class doesn't rely on the\n- *  {@link Collection#size} method.</p>\n- *\n- *  @author Abe White\n- *  @nojavadoc */\n+ * Abstract base class for random-access result lists. Unlike the\n+ * {@link AbstractList}, this class doesn't rely on the\n+ * {@link Collection#size} method.\n+ * \n+ * @author Abe White\n+ * @nojavadoc\n+ */\n public abstract class AbstractNonSequentialResultList extends AbstractResultList {\n     protected static final Object PAST_END = new Object();\n \n     /**\n-     *  Implement this method and {@link #size}.  Return {@link #PAST_END}\n-     *  if the index is out of bounds.\n-      */\n+     * Implement this method and {@link #size}. Return {@link #PAST_END}\n+     * if the index is out of bounds.\n+     */\n     protected abstract Object getInternal(int index);\n \n     public boolean contains(Object o) {\n         assertOpen();\n-\n         Object obj;\n-\n         for (int i = 0; true; i++) {\n             obj = getInternal(i);\n-\n-            if (obj == PAST_END) {\n+            if (obj == PAST_END)\n                 break;\n-            }\n-\n-            if (ObjectUtils.equals(o, obj)) {\n+            if (ObjectUtils.equals(o, obj))\n                 return true;\n-            }\n         }\n-\n         return false;\n     }\n \n     public boolean containsAll(Collection c) {\n         assertOpen();\n-\n         for (Iterator itr = c.iterator(); itr.hasNext();)\n-            if (!contains(itr.next())) {\n+            if (!contains(itr.next()))\n                 return false;\n-            }\n-\n         return true;\n     }\n \n     public Object get(int index) {\n         assertOpen();\n-\n         Object obj = getInternal(index);\n-\n-        if (obj == PAST_END) {\n+        if (obj == PAST_END)\n             throw new NoSuchElementException();\n-        }\n-\n         return obj;\n     }\n \n     public int indexOf(Object o) {\n         assertOpen();\n-\n         Object obj;\n-\n         for (int i = 0; true; i++) {\n             obj = getInternal(i);\n-\n-            if (obj == PAST_END) {\n+            if (obj == PAST_END)\n                 break;\n-            }\n-\n-            if (ObjectUtils.equals(o, obj)) {\n+            if (ObjectUtils.equals(o, obj))\n                 return i;\n-            }\n         }\n-\n         return -1;\n     }\n \n     public int lastIndexOf(Object o) {\n         assertOpen();\n-\n         int index = -1;\n         Object obj;\n-\n         for (int i = 0; true; i++) {\n             obj = getInternal(i);\n-\n-            if (obj == PAST_END) {\n+            if (obj == PAST_END)\n                 break;\n-            }\n-\n-            if (ObjectUtils.equals(o, obj)) {\n+            if (ObjectUtils.equals(o, obj))\n                 index = i;\n-            }\n         }\n-\n         return index;\n     }\n \n     public boolean isEmpty() {\n         assertOpen();\n-\n         return getInternal(0) == PAST_END;\n     }\n \n@@ -140,39 +107,27 @@ public ListIterator listIterator(int index) {\n \n     public Object[] toArray() {\n         assertOpen();\n-\n         ArrayList list = new ArrayList();\n         Object obj;\n-\n         for (int i = 0; true; i++) {\n             obj = getInternal(i);\n-\n-            if (obj == PAST_END) {\n+            if (obj == PAST_END)\n                 break;\n-            }\n-\n             list.add(obj);\n         }\n-\n         return list.toArray();\n     }\n \n     public Object[] toArray(Object[] a) {\n         assertOpen();\n-\n         ArrayList list = new ArrayList();\n         Object obj;\n-\n         for (int i = 0; true; i++) {\n             obj = getInternal(i);\n-\n-            if (obj == PAST_END) {\n+            if (obj == PAST_END)\n                 break;\n-            }\n-\n             list.add(obj);\n         }\n-\n         return list.toArray(a);\n     }\n \n@@ -194,7 +149,6 @@ public int previousIndex() {\n \n         public boolean hasNext() {\n             _next = getInternal(_idx);\n-\n             return _next != PAST_END;\n         }\n \n@@ -203,20 +157,15 @@ public boolean hasPrevious() {\n         }\n \n         public Object previous() {\n-            if (_idx == 0) {\n+            if (_idx == 0)\n                 throw new NoSuchElementException();\n-            }\n-\n             return getInternal(--_idx);\n         }\n \n         public Object next() {\n-            if (!hasNext()) {\n+            if (!hasNext())\n                 throw new NoSuchElementException();\n-            }\n-\n             _idx++;\n-\n             return _next;\n         }\n     }"},{"sha":"829018f0cbbaa93e3e0326f686e58a77ec21a0b4","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/AbstractResultList.java","status":"modified","additions":12,"deletions":16,"changes":28,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/AbstractResultList.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/AbstractResultList.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/AbstractResultList.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74","patch":"@@ -1,32 +1,29 @@\n /*\n  * Copyright 2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *  Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n package org.apache.openjpa.lib.rop;\n \n-import org.apache.openjpa.lib.util.*;\n-\n import java.util.*;\n-\n+import org.apache.openjpa.lib.util.*;\n \n /**\n- *  <p>Abstract base class for read-only result lists.</p>\n- *\n- *  @author Abe White\n- *  @nojavadoc */\n+ * Abstract base class for read-only result lists.\n+ * \n+ * @author Abe White\n+ * @nojavadoc\n+ */\n public abstract class AbstractResultList implements ResultList {\n-    private static final Localizer _loc = Localizer.forPackage(AbstractResultList.class);\n+    private static final Localizer _loc = Localizer.forPackage\n+        (AbstractResultList.class);\n \n     public void add(int index, Object element) {\n         throw new UnsupportedOperationException(_loc.get(\"read-only\"));\n@@ -78,8 +75,7 @@ protected void finalize() throws Throwable {\n     }\n \n     protected void assertOpen() {\n-        if (isClosed()) {\n+        if (isClosed())\n             throw new NoSuchElementException(_loc.get(\"closed\"));\n-        }\n     }\n }"},{"sha":"c36cd8c4730511325910b723ae1bc395ffa66594","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/AbstractSequentialResultList.java","status":"modified","additions":17,"deletions":43,"changes":60,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/AbstractSequentialResultList.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/AbstractSequentialResultList.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/AbstractSequentialResultList.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74","patch":"@@ -1,96 +1,76 @@\n /*\n  * Copyright 2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *  Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n package org.apache.openjpa.lib.rop;\n \n-import org.apache.commons.lang.*;\n-\n import java.util.*;\n-\n+import org.apache.commons.lang.*;\n \n /**\n- *  <p>Abstract base class for sequential result lists.  Unlike the\n- *  {@link AbstractSequentialList}, this class doesn't rely on the\n- *  {@link Collection#size} method.</p>\n- *\n- *  @author Abe White\n- *  @nojavadoc */\n+ * Abstract base class for sequential result lists. Unlike the\n+ * {@link AbstractSequentialList}, this class doesn't rely on the\n+ * {@link Collection#size} method.\n+ * \n+ * @author Abe White\n+ * @nojavadoc\n+ */\n public abstract class AbstractSequentialResultList extends AbstractResultList {\n     /**\n-     *  Implement this method and {@link #size}.\n-      */\n+     * Implement this method and {@link #size}.\n+     */\n     protected abstract ListIterator itr(int index);\n \n     public boolean contains(Object o) {\n         assertOpen();\n-\n         for (Iterator itr = itr(0); itr.hasNext();)\n-            if (ObjectUtils.equals(o, itr.next())) {\n+            if (ObjectUtils.equals(o, itr.next()))\n                 return true;\n-            }\n-\n         return false;\n     }\n \n     public boolean containsAll(Collection c) {\n         assertOpen();\n-\n         for (Iterator itr = c.iterator(); itr.hasNext();)\n-            if (!contains(itr.next())) {\n+            if (!contains(itr.next()))\n                 return false;\n-            }\n-\n         return true;\n     }\n \n     public Object get(int index) {\n         assertOpen();\n-\n         return itr(index).next();\n     }\n \n     public int indexOf(Object o) {\n         assertOpen();\n-\n         int index = 0;\n-\n         for (Iterator itr = itr(0); itr.hasNext(); index++)\n-            if (ObjectUtils.equals(o, itr.next())) {\n+            if (ObjectUtils.equals(o, itr.next()))\n                 return index;\n-            }\n-\n         return -1;\n     }\n \n     public int lastIndexOf(Object o) {\n         assertOpen();\n-\n         int index = -1;\n         int i = 0;\n-\n         for (Iterator itr = itr(0); itr.hasNext(); i++)\n-            if (ObjectUtils.equals(o, itr.next())) {\n+            if (ObjectUtils.equals(o, itr.next()))\n                 index = i;\n-            }\n-\n         return index;\n     }\n \n     public boolean isEmpty() {\n         assertOpen();\n-\n         return !itr(0).hasNext();\n     }\n \n@@ -108,23 +88,17 @@ public ListIterator listIterator(int index) {\n \n     public Object[] toArray() {\n         assertOpen();\n-\n         ArrayList list = new ArrayList();\n-\n         for (Iterator itr = itr(0); itr.hasNext();)\n             list.add(itr.next());\n-\n         return list.toArray();\n     }\n \n     public Object[] toArray(Object[] a) {\n         assertOpen();\n-\n         ArrayList list = new ArrayList();\n-\n         for (Iterator itr = itr(0); itr.hasNext();)\n             list.add(itr.next());\n-\n         return list.toArray(a);\n     }\n }"},{"sha":"561128740624cce2ddc464f356d0c253683eff1d","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/EagerResultList.java","status":"modified","additions":12,"deletions":18,"changes":30,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/EagerResultList.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/EagerResultList.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/EagerResultList.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74","patch":"@@ -1,13 +1,10 @@\n /*\n  * Copyright 2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *  Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n@@ -17,30 +14,27 @@\n \n import java.util.*;\n \n-\n /**\n- *  Simple, non-lazy ResultList implementation\n- *\n- *  @author Patrick Linskey\n- *  @nojavadoc */\n+ * Simple, non-lazy ResultList implementation\n+ * \n+ * @author Patrick Linskey\n+ * @nojavadoc\n+ */\n public class EagerResultList extends ListResultList implements ResultList {\n     public EagerResultList(ResultObjectProvider rop) {\n         super(new ArrayList());\n-\n         try {\n             rop.open();\n-\n             while (rop.next())\n                 getDelegate().add(rop.getResultObject());\n         } catch (RuntimeException re) {\n             throw re;\n         } catch (Exception e) {\n             rop.handleCheckedException(e);\n-        } finally {\n-            try {\n-                rop.close();\n-            } catch (Exception e) {\n-            }\n+        }\n+        finally {\n+            try { rop.close(); } catch (Exception e) {}\n         }\n     }\n }\n+"},{"sha":"df893aca265c0da7f2c87de30b973cc660dbd0c1","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/LazyForwardResultList.java","status":"modified","additions":21,"deletions":54,"changes":75,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/LazyForwardResultList.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/LazyForwardResultList.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/LazyForwardResultList.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74","patch":"@@ -1,13 +1,10 @@\n /*\n  * Copyright 2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *  Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n@@ -16,28 +13,27 @@\n package org.apache.openjpa.lib.rop;\n \n import java.io.*;\n-\n import java.util.*;\n \n-\n /**\n- *  <p>Lazy forward-only result list.</p>\n- *\n- *  @author Abe White\n- *  @nojavadoc */\n+ * Lazy forward-only result list.\n+ * \n+ * @author Abe White\n+ * @nojavadoc\n+ */\n public class LazyForwardResultList extends AbstractSequentialResultList\n     implements ResultList {\n     private static final int OPEN = 0;\n     private static final int CLOSED = 1;\n     private static final int FREED = 2;\n+\n     private ResultObjectProvider _rop = null;\n     private final List _list = new ArrayList();\n     private int _state = OPEN;\n     private int _size = -1;\n \n     public LazyForwardResultList(ResultObjectProvider rop) {\n         _rop = rop;\n-\n         try {\n             _rop.open();\n         } catch (RuntimeException re) {\n@@ -68,43 +64,33 @@ public Object get(int index) {\n         assertOpen();\n \n         // optimization for getting sequntially\n-        if (index == _list.size()) {\n+        if (index == _list.size())\n             addNext();\n-        }\n-\n-        if (index < _list.size()) {\n+        if (index < _list.size())\n             return _list.get(index);\n-        }\n \n         return super.get(index);\n     }\n \n     protected ListIterator itr(int index) {\n-        return (_state != OPEN) ? _list.listIterator(index) : new Itr(index);\n+        return(_state != OPEN) ? _list.listIterator(index) : new Itr(index);\n     }\n \n     public int size() {\n         assertOpen();\n-\n-        if (_size != -1) {\n+        if (_size != -1)\n             return _size;\n-        }\n-\n-        if (_state != OPEN) {\n+        if (_state != OPEN)\n             return _list.size();\n-        }\n-\n         try {\n             _size = _rop.size();\n-\n             return _size;\n         } catch (RuntimeException re) {\n             close();\n             throw re;\n         } catch (Exception e) {\n             close();\n             _rop.handleCheckedException(e);\n-\n             return -1;\n         }\n     }\n@@ -113,47 +99,37 @@ private boolean addNext() {\n         try {\n             if (!_rop.next()) {\n                 free();\n-\n                 return false;\n             }\n-\n             _list.add(_rop.getResultObject());\n-\n             return true;\n         } catch (RuntimeException re) {\n             close();\n             throw re;\n         } catch (Exception e) {\n             close();\n             _rop.handleCheckedException(e);\n-\n             return false;\n         }\n     }\n \n     private void free() {\n         if (_state == OPEN) {\n-            try {\n-                _rop.close();\n-            } catch (Exception e) {\n-            }\n-\n+            try { _rop.close(); } catch (Exception e) {}\n             _state = FREED;\n         }\n     }\n \n     public Object writeReplace() throws ObjectStreamException {\n         // fully traverse results\n-        if (_state == OPEN) {\n+        if (_state == OPEN)\n             for (Iterator itr = itr(_list.size()); itr.hasNext();)\n                 itr.next();\n-        }\n-\n         return _list;\n     }\n \n     public int hashCode() {\n-        // superclass tries to traverses entire list for hashcode \n+        // superclass tries to traverses entire list for hashcode\n         return System.identityHashCode(this);\n     }\n \n@@ -167,7 +143,6 @@ public boolean equals(Object other) {\n \n         public Itr(int index) {\n             _idx = Math.min(index, _list.size());\n-\n             while (_idx < index)\n                 next();\n         }\n@@ -181,14 +156,10 @@ public int previousIndex() {\n         }\n \n         public boolean hasNext() {\n-            if (_list.size() > _idx) {\n+            if (_list.size() > _idx)\n                 return true;\n-            }\n-\n-            if (_state != OPEN) {\n+            if (_state != OPEN)\n                 return false;\n-            }\n-\n             return addNext();\n         }\n \n@@ -197,18 +168,14 @@ public boolean hasPrevious() {\n         }\n \n         public Object previous() {\n-            if (_idx == 0) {\n+            if (_idx == 0)\n                 throw new NoSuchElementException();\n-            }\n-\n             return _list.get(--_idx);\n         }\n \n         public Object next() {\n-            if (!hasNext()) {\n+            if (!hasNext())\n                 throw new NoSuchElementException();\n-            }\n-\n             return _list.get(_idx++);\n         }\n     }"},{"sha":"4a2814ab9ff11a44fec825cad8fe95746bb42936","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/ListResultList.java","status":"modified","additions":10,"deletions":22,"changes":32,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/ListResultList.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/ListResultList.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/ListResultList.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74","patch":"@@ -1,13 +1,10 @@\n /*\n  * Copyright 2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *  Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n@@ -17,25 +14,25 @@\n \n import java.util.*;\n \n-\n /**\n- *  <p>A basic {@link ResultList} implementation that wraps a normal list.</p>\n- *\n- *  @author Abe White\n- *  @nojavadoc */\n+ * A basic {@link ResultList} implementation that wraps a normal list.\n+ * \n+ * @author Abe White\n+ * @nojavadoc\n+ */\n public class ListResultList extends AbstractResultList {\n     private final List _list;\n     private boolean _closed = false;\n \n     /**\n-     *  Constructor.  Supply delegate.\n+     * Constructor. Supply delegate.\n      */\n     public ListResultList(List list) {\n         _list = list;\n     }\n \n     /**\n-     *  Return the wrapped list.\n+     * Return the wrapped list.\n      */\n     public List getDelegate() {\n         return _list;\n@@ -55,43 +52,36 @@ public void close() {\n \n     public boolean contains(Object o) {\n         assertOpen();\n-\n         return _list.contains(o);\n     }\n \n     public boolean containsAll(Collection c) {\n         assertOpen();\n-\n         return _list.containsAll(c);\n     }\n \n     public Object get(int index) {\n         assertOpen();\n-\n         return _list.get(index);\n     }\n \n     public int indexOf(Object o) {\n         assertOpen();\n-\n         return _list.indexOf(o);\n     }\n \n     public int lastIndexOf(Object o) {\n         assertOpen();\n-\n         return _list.lastIndexOf(o);\n     }\n \n     public int size() {\n         assertOpen();\n-\n         return _list.size();\n     }\n \n     public boolean isEmpty() {\n         assertOpen();\n-\n         return _list.isEmpty();\n     }\n \n@@ -109,13 +99,11 @@ public ListIterator listIterator(int index) {\n \n     public Object[] toArray() {\n         assertOpen();\n-\n         return _list.toArray();\n     }\n \n     public Object[] toArray(Object[] a) {\n         assertOpen();\n-\n         return _list.toArray(a);\n     }\n "},{"sha":"0c30cf82a5a45f80cea58f1f5c06d0cb8fdbfe25","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/ListResultObjectProvider.java","status":"modified","additions":11,"deletions":23,"changes":34,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/ListResultObjectProvider.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/ListResultObjectProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/ListResultObjectProvider.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74","patch":"@@ -1,38 +1,32 @@\n /*\n  * Copyright 2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *  Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n package org.apache.openjpa.lib.rop;\n \n+import java.util.*;\n import org.apache.commons.lang.exception.*;\n-\n import org.apache.openjpa.lib.util.*;\n \n-import java.util.*;\n-\n-\n /**\n- *  <p>A result object provider wrapped around a normal list.</p>\n- *\n- *  @author Abe White\n+ * A result object provider wrapped around a normal list.\n+ * \n+ * @author Abe White\n  */\n public class ListResultObjectProvider implements ResultObjectProvider {\n     private final List _list;\n     private int _idx = -1;\n \n     /**\n-     *  Constructor.  Supply delegate.\n+     * Constructor. Supply delegate.\n      */\n     public ListResultObjectProvider(List list) {\n         _list = list;\n@@ -58,12 +52,10 @@ public boolean next() throws Exception {\n     }\n \n     public boolean absolute(int pos) throws Exception {\n-        if ((pos >= 0) && (pos < _list.size())) {\n+        if (pos >= 0 && pos < _list.size()) {\n             _idx = pos;\n-\n             return true;\n         }\n-\n         return false;\n     }\n \n@@ -76,12 +68,8 @@ public void reset() throws Exception {\n     }\n \n     public void close() throws Exception {\n-        if (_list instanceof Closeable) {\n-            try {\n-                ((Closeable) _list).close();\n-            } catch (Exception e) {\n-            }\n-        }\n+        if (_list instanceof Closeable)\n+            try { ((Closeable) _list).close(); } catch (Exception e) {}\n     }\n \n     public void handleCheckedException(Exception e) {"},{"sha":"6f5f334dd09be7f6965dff5e5edad8c280e24e62","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/MergedResultObjectProvider.java","status":"modified","additions":35,"deletions":76,"changes":111,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/MergedResultObjectProvider.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/MergedResultObjectProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/MergedResultObjectProvider.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74","patch":"@@ -1,38 +1,34 @@\n /*\n  * Copyright 2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *  Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n package org.apache.openjpa.lib.rop;\n \n-import org.apache.commons.lang.exception.*;\n-\n import java.util.*;\n-\n+import org.apache.commons.lang.exception.*;\n \n /**\n- *  <p>A result object provider that merges multiple result object provider\n- *  delegates. Support exists for maintaining ordering of the internally held\n- *  results, provided that each of the individual results is itself ordered.</p>\n- *\n- *  @author Abe White\n- *  @author Marc Prud'hommeaux\n+ * A result object provider that merges multiple result object provider\n+ * delegates. Support exists for maintaining ordering of the internally held\n+ * results, provided that each of the individual results is itself ordered.\n+ * \n+ * @author Abe White\n+ * @author Marc Prud'hommeaux\n  */\n public class MergedResultObjectProvider implements ResultObjectProvider {\n     private static final byte UNOPENED = 0;\n     private static final byte OPENED = 1;\n     private static final byte VALUE = 2;\n     private static final byte DONE = 3;\n+\n     private final ResultObjectProvider[] _rops;\n     private final Comparator _comp;\n     private final byte[] _status;\n@@ -42,14 +38,14 @@\n     private int _size = -1;\n \n     /**\n-     *  Constructor.  Provide delegates.\n+     * Constructor. Provide delegates.\n      */\n     public MergedResultObjectProvider(ResultObjectProvider[] rops) {\n         this(rops, null);\n     }\n \n     /**\n-     *  Constructor.  Provide delegates and optional comparator.\n+     * Constructor. Provide delegates and optional comparator.\n      */\n     public MergedResultObjectProvider(ResultObjectProvider[] rops,\n         Comparator comp) {\n@@ -67,7 +63,6 @@ public boolean supportsRandomAccess() {\n     public void open() throws Exception {\n         // if we have a comparator, then open all; else open first\n         int len = (_comp != null) ? _rops.length : 1;\n-\n         for (int i = 0; i < len; i++) {\n             _rops[i].open();\n             _status[i] = OPENED;\n@@ -79,9 +74,8 @@ public boolean absolute(int pos) throws Exception {\n     }\n \n     public int size() throws Exception {\n-        if (_size != -1) {\n+        if (_size != -1)\n             return _size;\n-        }\n \n         // have to open all to get sizes\n         for (int i = 0; i < _status.length; i++) {\n@@ -93,139 +87,106 @@ public int size() throws Exception {\n \n         int total = 0;\n         int size;\n-\n         for (int i = 0; i < _rops.length; i++) {\n             size = _rops[i].size();\n-\n             if (size == Integer.MAX_VALUE) {\n                 total = size;\n-\n                 break;\n             }\n-\n             total += size;\n         }\n-\n         _size = total;\n-\n         return _size;\n     }\n \n     public void reset() throws Exception {\n         for (int i = 0; i < _rops.length; i++)\n-            if (_status[i] != UNOPENED) {\n+            if (_status[i] != UNOPENED)\n                 _rops[i].reset();\n-            }\n-\n         clear();\n     }\n \n     public void close() throws Exception {\n         Exception err = null;\n-\n         for (int i = 0; i < _rops.length; i++) {\n             try {\n-                if (_status[i] != UNOPENED) {\n+                if (_status[i] != UNOPENED)\n                     _rops[i].close();\n-                }\n             } catch (Exception e) {\n-                if (err == null) {\n+                if (err == null)\n                     err = e;\n-                }\n             }\n         }\n \n         clear();\n-\n-        if (err != null) {\n+        if (err != null)\n             throw err;\n-        }\n     }\n \n     private void clear() {\n         _cur = null;\n-\n         for (int i = 0; i < _rops.length; i++) {\n             _status[i] = OPENED;\n-\n-            if (_values != null) {\n+            if (_values != null)\n                 _values[i] = null;\n-            }\n-\n-            if (_orderValues != null) {\n+            if (_orderValues != null)\n                 _orderValues[i] = null;\n-            }\n         }\n     }\n \n     public void handleCheckedException(Exception e) {\n-        if (_rops.length == 0) {\n+        if (_rops.length == 0)\n             throw new NestableRuntimeException(e);\n-        }\n-\n         _rops[0].handleCheckedException(e);\n     }\n \n     public boolean next() throws Exception {\n         // initialize all rops with the latest values\n         boolean hasValue = false;\n-\n         for (int i = 0; i < _status.length; i++) {\n             switch (_status[i]) {\n             case UNOPENED:\n                 // this will only ever be the case if we aren't ordering\n                 _rops[i].open();\n                 _status[i] = OPENED;\n-\n-            // no break\n+                // no break\n             case OPENED:\n-\n                 // if this rop has a value, cache it; if we're not ordering,\n                 // then that's the value to return\n                 if (_rops[i].next()) {\n                     if (_comp == null) {\n                         _cur = _rops[i].getResultObject();\n-\n                         return true;\n                     } else {\n                         hasValue = true;\n                         _status[i] = VALUE;\n                         _values[i] = _rops[i].getResultObject();\n-                        _orderValues[i] = getOrderingValue(_values[i], i,\n-                                _rops[i]);\n+                        _orderValues[i] = getOrderingValue(_values[i],\n+                            i, _rops[i]);\n                     }\n-                } else {\n+                } else\n                     _status[i] = DONE;\n-                }\n-\n                 break;\n-\n             case VALUE:\n                 // we only use this state when ordering\n                 hasValue = true;\n-\n                 break;\n             }\n         }\n \n         // if we get to this point without a comparator, it means none\n         // of our rops have any more values\n-        if ((_comp == null) || !hasValue) {\n+        if (_comp == null || !hasValue)\n             return false;\n-        }\n \n         // for all the rops with values, find the 'least' one according to\n         // the comparator\n         int least = -1;\n         Object orderVal = null;\n-\n         for (int i = 0; i < _orderValues.length; i++) {\n-            if (_status[i] != VALUE) {\n+            if (_status[i] != VALUE)\n                 continue;\n-            }\n-\n-            if ((least == -1) ||\n-                    (_comp.compare(_orderValues[i], orderVal) < 0)) {\n+            if (least == -1 || _comp.compare(_orderValues[i], orderVal) < 0) {\n                 least = i;\n                 orderVal = _orderValues[i];\n             }\n@@ -238,7 +199,6 @@ public boolean next() throws Exception {\n         _values[least] = null;\n         _orderValues[least] = null;\n         _status[least] = OPENED;\n-\n         return true;\n     }\n \n@@ -247,14 +207,13 @@ public Object getResultObject() throws Exception {\n     }\n \n     /**\n-     *  Return the value to use for ordering on the given result value.  Returns\n-     *  the result value by default.\n-     *\n-     *  @param val                the result value\n-     *  @param idx                the index of the result object provider in the array\n-     *                                  given on construction that produced the result value\n-     *  @param rop                the result object provider that produced the result\n-     *                                  value\n+     * Return the value to use for ordering on the given result value. Returns\n+     * the result value by default.\n+     * \n+     * @param val the result value\n+     * @param idx the index of the result object provider in the array\n+     * given on construction that produced the result value\n+     * @param rop the result object provider that produced the result value\n      */\n     protected Object getOrderingValue(Object val, int idx,\n         ResultObjectProvider rop) {"},{"sha":"853351bc4e793608b1454b736789081a79e7bc28","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/RandomAccessResultList.java","status":"modified","additions":39,"deletions":72,"changes":111,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/RandomAccessResultList.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/RandomAccessResultList.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/RandomAccessResultList.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74","patch":"@@ -1,34 +1,29 @@\n /*\n  * Copyright 2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *  Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n package org.apache.openjpa.lib.rop;\n \n-import serp.util.*;\n-\n import java.io.*;\n-\n import java.util.*;\n-\n+import serp.util.*;\n \n /**\n- *  <p>Random-access result list implementation. It maintains a map\n- *  of the items that we have already instantiated.</p>\n- *\n- *  @author Marc Prud'hommeaux\n- *  @author Abe White\n- *  @nojavadoc */\n+ * Random-access result list implementation. It maintains a map\n+ * of the items that we have already instantiated.\n+ * \n+ * @author Marc Prud'hommeaux\n+ * @author Abe White\n+ * @nojavadoc\n+ */\n public class RandomAccessResultList extends AbstractNonSequentialResultList {\n     private static final int OPEN = 0;\n     private static final int FREED = 1;\n@@ -62,8 +57,8 @@ public RandomAccessResultList(ResultObjectProvider rop) {\n     }\n \n     /**\n-     *  Override this method to control what kind of map is used for\n-     *  the instantiated rows.\n+     * Override this method to control what kind of map is used for\n+     * the instantiated rows.\n      */\n     protected Map newRowMap() {\n         return new HashMap();\n@@ -86,82 +81,67 @@ public void close() {\n \n     protected Object getInternal(int index) {\n         if (_full != null) {\n-            if (index >= _full.length) {\n+            if (index >= _full.length)\n                 return PAST_END;\n-            }\n-\n             return _full[index];\n         }\n \n         Integer i = Numbers.valueOf(index);\n         Object ret = _rows.get(i);\n-\n         if (ret != null) {\n-            if (ret instanceof Null) {\n+            if (ret instanceof Null)\n                 return null;\n-            }\n-\n             return ret;\n         }\n \n         ret = instantiateRow(i);\n-\n-        return (ret == null) ? PAST_END : ret;\n+        return(ret == null) ? PAST_END : ret;\n     }\n \n     /**\n-     *  Instantiate the row object at the specified index.\n+     * Instantiate the row object at the specified index.\n      */\n     private Object instantiateRow(Integer i) {\n         _requests++;\n-\n         try {\n-            if (!_rop.absolute(i.intValue())) {\n+            if (!_rop.absolute(i.intValue()))\n                 return PAST_END;\n-            }\n \n             Object ob = _rop.getResultObject();\n-\n-            if (ob == null) {\n+            if (ob == null)\n                 ob = new Null();\n-            }\n \n             // cache the result\n             _rows.put(i, ob);\n \n             // check to see if our map is full\n             checkComplete();\n-\n             return ob;\n         } catch (RuntimeException re) {\n             close();\n             throw re;\n         } catch (Exception e) {\n             close();\n             _rop.handleCheckedException(e);\n-\n             return null;\n         }\n     }\n \n     /**\n-     *  Check to see if the soft map is the same size as all the\n-     *  rows in the Result: if so, we copy over the values to a\n-     *  hard reference HashSet and close the Result object associated with\n-     *  this endeavour.\n+     * Check to see if the soft map is the same size as all the\n+     * rows in the Result: if so, we copy over the values to a\n+     * hard reference HashSet and close the Result object associated with\n+     * this endeavour.\n      */\n     private void checkComplete() {\n         // only check if we've actually gotten the size for some reason already\n-        if ((_size == -1) || (_rows.size() != _size)) {\n+        if (_size == -1 || _rows.size() != _size)\n             return;\n-        }\n \n         Object[] full = new Object[_size];\n         int count = 0;\n         Integer key;\n-\n-        for (Iterator itr = _rows.keySet().iterator(); itr.hasNext();\n-                count++) {\n+        for (Iterator itr = _rows.keySet().iterator(); itr.hasNext(); count++) {\n             key = (Integer) itr.next();\n             full[key.intValue()] = _rows.get(key);\n         }\n@@ -177,63 +157,49 @@ private void checkComplete() {\n \n     public int size() {\n         assertOpen();\n-\n-        if (_size != -1) {\n+        if (_size != -1)\n             return _size;\n-        }\n-\n-        if (_full != null) {\n+        if (_full != null)\n             return _full.length;\n-        }\n-\n         try {\n             _size = _rop.size();\n-\n             return _size;\n         } catch (RuntimeException re) {\n             close();\n             throw re;\n         } catch (Exception e) {\n             close();\n             _rop.handleCheckedException(e);\n-\n             return -1;\n         }\n     }\n \n     private void free() {\n         if (_state == OPEN) {\n-            try {\n-                _rop.close();\n-            } catch (Exception e) {\n-            }\n-\n+            try { _rop.close(); } catch (Exception e) {}\n             _rows = null;\n             _state = FREED;\n         }\n     }\n \n     public Object writeReplace() throws ObjectStreamException {\n-        if (_full != null) {\n+        if (_full != null)\n             return new ListResultList(Arrays.asList(_full));\n-        }\n-\n         ArrayList list = new ArrayList();\n-\n         for (Iterator itr = iterator(); itr.hasNext();)\n             list.add(itr.next());\n-\n         return list;\n     }\n \n     public String toString() {\n-        return getClass().getName() + \"; identity: \" +\n-        System.identityHashCode(this) + \"; cached: \" + _rows.size() +\n-        \"; requests: \" + _requests;\n+        return getClass().getName()\n+            + \"; identity: \" + System.identityHashCode(this)\n+            + \"; cached: \" + _rows.size()\n+            + \"; requests: \" + _requests;\n     }\n \n     public int hashCode() {\n-        // superclass tries to traverses entire list for hashcode \n+        // superclass tries to traverses entire list for hashcode\n         return System.identityHashCode(this);\n     }\n \n@@ -243,11 +209,12 @@ public boolean equals(Object other) {\n     }\n \n     /**\n-     *  Used to represent nulls in the result list.  Can't use a singleton\n-     *  pattern, because then there will always be a hard ref to all the\n-     *  nulls, and they'll never get GC'd; this is bad in the unlikely\n-     *  event of a huge result set with lots of nulls.\n+     * Used to represent nulls in the result list. Can't use a singleton\n+     * pattern, because then there will always be a hard ref to all the\n+     * nulls, and they'll never get GC'd; this is bad in the unlikely\n+     * event of a huge result set with lots of nulls.\n      */\n     private static class Null {\n     }\n }\n+"},{"sha":"c67fef102d677073e4677eb56718f4ad7c805fad","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/RangeResultObjectProvider.java","status":"modified","additions":36,"deletions":56,"changes":92,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/RangeResultObjectProvider.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/RangeResultObjectProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/RangeResultObjectProvider.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74","patch":"@@ -1,64 +1,58 @@\n /*\n  * Copyright 2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *  Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n package org.apache.openjpa.lib.rop;\n \n-import org.apache.openjpa.lib.util.*;\n-\n import java.util.*;\n-\n+import org.apache.openjpa.lib.util.*;\n \n /**\n- *  <p>Prevents a view of a given range of indices from the delegate\n- *  result object provider.</p>\n- *\n- *  @author Abe White\n- *  @nojavadoc */\n+ * Prevents a view of a given range of indices from the delegate\n+ * result object provider.\n+ * \n+ * @author Abe White\n+ * @nojavadoc\n+ */\n public class RangeResultObjectProvider implements ResultObjectProvider {\n-    private static final Localizer _loc = Localizer.forPackage(RangeResultObjectProvider.class);\n+    private static final Localizer _loc = Localizer.forPackage\n+        (RangeResultObjectProvider.class);\n+\n     private final ResultObjectProvider _delegate;\n     private final int _startIdx;\n     private final int _endIdx;\n     private int _idx = -1;\n \n     /**\n-     *  Constructor. Because this is a wrapper around some delegate,\n-     *  and result object providers work with int indexes, neither the start\n-     *  or end index can be greater than Integer.MAX_VALUE (with the exception\n-     *  of Long.MAX_VALUE, which is used to indicate no limit).\n-     *\n-     *  @param delegate        the result object provider to delegate to\n-     *  @param startIdx        0-based inclusive start index of the range\n-     *                                          to present; must be &lt; Integer.MAX_VALUE\n-     *  @param endIdx                0-based exclusive end index of the range to\n-     *                                          present; must be &lt; Integer.MAX_VALUE, or\n-     *                                          Long.MAX_VALUE for no limit\n-      */\n+     * Constructor. Because this is a wrapper around some delegate,\n+     * and result object providers work with int indexes, neither the start\n+     * or end index can be greater than Integer.MAX_VALUE(with the exception\n+     * of Long.MAX_VALUE, which is used to indicate no limit).\n+     * \n+     * @param delegate the result object provider to delegate to\n+     * @param startIdx 0-based inclusive start index of the range\n+     * to present; must be &lt; Integer.MAX_VALUE\n+     * @param endIdx 0-based exclusive end index of the range to\n+     * present; must be &lt; Integer.MAX_VALUE, or Long.MAX_VALUE for no limit\n+     */\n     public RangeResultObjectProvider(ResultObjectProvider delegate,\n         long startIdx, long endIdx) {\n         // use Integer.MAX_VALUE for no limit internally\n-        if (endIdx == Long.MAX_VALUE) {\n+        if (endIdx == Long.MAX_VALUE)\n             endIdx = Integer.MAX_VALUE;\n-        }\n \n         _delegate = delegate;\n-\n-        if ((startIdx > Integer.MAX_VALUE) || (endIdx > Integer.MAX_VALUE)) {\n+        if (startIdx > Integer.MAX_VALUE || endIdx > Integer.MAX_VALUE)\n             throw new IllegalArgumentException(_loc.get(\"range-too-high\",\n-                    String.valueOf(startIdx), String.valueOf(endIdx)));\n-        }\n+                String.valueOf(startIdx), String.valueOf(endIdx)));\n \n         _startIdx = (int) startIdx;\n         _endIdx = (int) endIdx;\n@@ -73,61 +67,46 @@ public void open() throws Exception {\n     }\n \n     public Object getResultObject() throws Exception {\n-        if ((_idx < _startIdx) || (_idx >= _endIdx)) {\n+        if (_idx < _startIdx || _idx >= _endIdx)\n             throw new NoSuchElementException(String.valueOf(_idx));\n-        }\n-\n         return _delegate.getResultObject();\n     }\n \n     public boolean next() throws Exception {\n         // advance up to just behind _startIdx if we haven't already\n-        while (_idx < (_startIdx - 1)) {\n+        while (_idx < _startIdx - 1) {\n             if (_delegate.supportsRandomAccess()) {\n                 _idx = _startIdx - 1;\n-\n-                if (!_delegate.absolute(_startIdx - 1)) {\n+                if (!_delegate.absolute(_startIdx - 1))\n                     return false;\n-                }\n             } else {\n                 _idx++;\n-\n-                if (!_delegate.next()) {\n+                if (!_delegate.next())\n                     return false;\n-                }\n             }\n         }\n \n         // make sure we're not falling off the end of the range\n-        if (_idx >= (_endIdx - 1)) {\n+        if (_idx >= _endIdx - 1)\n             return false;\n-        }\n \n         _idx++;\n-\n         return _delegate.next();\n     }\n \n     public boolean absolute(int pos) throws Exception {\n         _idx = pos + _startIdx;\n-\n-        if (_idx >= _endIdx) {\n+        if (_idx >= _endIdx)\n             return false;\n-        }\n-\n         return _delegate.absolute(_idx);\n     }\n \n     public int size() throws Exception {\n         int size = _delegate.size();\n-\n-        if (size == Integer.MAX_VALUE) {\n+        if (size == Integer.MAX_VALUE)\n             return size;\n-        }\n-\n         size = Math.min(_endIdx, size) - _startIdx;\n-\n-        return (size < 0) ? 0 : size;\n+        return(size < 0) ? 0 : size;\n     }\n \n     public void reset() throws Exception {\n@@ -143,3 +122,4 @@ public void handleCheckedException(Exception e) {\n         _delegate.handleCheckedException(e);\n     }\n }\n+"},{"sha":"53bb1488264cf159ddb59ad914b7fbf4263a3c1a","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/ResultList.java","status":"modified","additions":23,"deletions":32,"changes":55,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/ResultList.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/ResultList.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/ResultList.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74","patch":"@@ -1,62 +1,53 @@\n /*\n  * Copyright 2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *  Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n package org.apache.openjpa.lib.rop;\n \n-import org.apache.openjpa.lib.util.*;\n-import org.apache.openjpa.lib.util.Closeable;\n-\n import java.io.*;\n-\n import java.util.*;\n import java.util.NoSuchElementException; // for javadoc; bug #4330419\n-\n+import org.apache.openjpa.lib.util.*;\n+import org.apache.openjpa.lib.util.Closeable;\n \n /**\n- *  <p>List interface that represents a potentially lazy ResultList\n- *  instantiation.</p>\n- *\n- *  <p>A ResultList will typically be instantiated from a factory, and\n- *  will use a ResultObjectProvider for obtaining individual object\n- *  data representations.</p>\n- *\n- *  <p>Depending on the support for scrolling inputs,\n- *  the list that is returned may use lazy instantiation of the\n- *  objects, and thus allow very large result sets to be obtained and\n- *  manipulated.</p>\n- *\n- *  <p>Note that wrapping a ResultList in another Collection will\n- *  always instantiate the entire set of elements contained in the\n- *  ResultList. This may not always be desireable, since the list may\n- *  be very large.</p>\n- *\n- *  @author Marc Prud'hommeaux\n+ * List interface that represents a potentially lazy ResultList instantiation.\n+ *  A ResultList will typically be instantiated from a factory, and\n+ * will use a ResultObjectProvider for obtaining individual object\n+ * data representations.\n+ *  Depending on the support for scrolling inputs,\n+ * the list that is returned may use lazy instantiation of the\n+ * objects, and thus allow very large result sets to be obtained and\n+ * manipulated.\n+ *  Note that wrapping a ResultList in another Collection will\n+ * always instantiate the entire set of elements contained in the\n+ * ResultList. This may not always be desireable, since the list may\n+ * be very large.\n+ * \n+ * @author Marc Prud'hommeaux\n  */\n public interface ResultList extends List, Serializable, Closeable {\n     /**\n-     *  Returns true if the provider backing this list is open.\n+     * Returns true if the provider backing this list is open.\n      */\n     public boolean isProviderOpen();\n \n     /**\n-     *  Close the list.\n+     * Close the list.\n      */\n     public void close();\n \n     /**\n-     *  Returns true if the list has been closed.\n+     * Returns true if the list has been closed.\n      */\n     public boolean isClosed();\n }\n+"},{"sha":"f1d2e4a63f23c13b271fc9142face82c72969fd5","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/ResultListIterator.java","status":"modified","additions":16,"deletions":21,"changes":37,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/ResultListIterator.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/ResultListIterator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/ResultListIterator.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74","patch":"@@ -1,33 +1,31 @@\n /*\n  * Copyright 2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *  Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n package org.apache.openjpa.lib.rop;\n \n-import org.apache.openjpa.lib.util.*;\n-\n import java.util.*;\n-\n+import org.apache.openjpa.lib.util.*;\n \n /**\n- *  Wrapper iterator that will return false for <code>hasNext()</code> if\n- *  the owning ResultList has been closed.\n- *\n- *  @author Marc Prud'hommeaux\n- *  @nojavadoc */\n+ * Wrapper iterator that will return false for <code>hasNext()</code> if\n+ * the owning ResultList has been closed.\n+ * \n+ * @author Marc Prud'hommeaux\n+ * @nojavadoc\n+ */\n public class ResultListIterator extends AbstractListIterator {\n-    private static final Localizer _loc = Localizer.forPackage(ResultListIterator.class);\n+    private static final Localizer _loc = Localizer.forPackage(\n+        ResultListIterator.class);\n+\n     private final ListIterator _li;\n     private final ResultList _rl;\n \n@@ -41,10 +39,8 @@ public ResultList getResultList() {\n     }\n \n     public boolean hasNext() {\n-        if (_rl.isClosed()) {\n+        if (_rl.isClosed())\n             return false;\n-        }\n-\n         return _li.hasNext();\n     }\n \n@@ -53,10 +49,8 @@ public boolean hasPrevious() {\n     }\n \n     public Object next() {\n-        if (_rl.isClosed()) {\n+        if (_rl.isClosed())\n             throw new NoSuchElementException(_loc.get(\"closed\"));\n-        }\n-\n         return _li.next();\n     }\n \n@@ -72,3 +66,4 @@ public int previousIndex() {\n         return _li.previousIndex();\n     }\n }\n+"},{"sha":"2cd07eb4bb653cbd56345dbf10c904ca09fcef5e","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/ResultObjectProvider.java","status":"modified","additions":36,"deletions":43,"changes":79,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/ResultObjectProvider.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/ResultObjectProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/ResultObjectProvider.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74","patch":"@@ -1,13 +1,10 @@\n /*\n  * Copyright 2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *  Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n@@ -17,79 +14,75 @@\n \n import org.apache.openjpa.lib.util.*;\n \n-\n /**\n- *  <p>Interface that allows lazy/custom instantiation of input\n- *  objects.</p>\n- *\n- *  <p>{@link ResultList} objects do not necessarily load in data all\n- *  at once. Instead, they may lazily load objects as necessary. So,\n- *  the lifespan of a {@link ResultObjectProvider} instance is\n- *  related to how the application deals with processing the\n- *  {@link ResultList} created with a given\n- *  {@link ResultObjectProvider} instance.</p>\n- *\n- *  @author Marc Prud'hommeaux\n- *  @author Patrick Linskey\n- *  @author Abe White\n+ * Interface that allows lazy/custom instantiation of input objects.\n+ *  {@link ResultList} objects do not necessarily load in data all\n+ * at once. Instead, they may lazily load objects as necessary. So,\n+ * the lifespan of a {@link ResultObjectProvider} instance is\n+ * related to how the application deals with processing the\n+ * {@link ResultList} created with a given\n+ * {@link ResultObjectProvider} instance.\n+ * \n+ * @author Marc Prud'hommeaux\n+ * @author Patrick Linskey\n+ * @author Abe White\n  */\n public interface ResultObjectProvider extends Closeable {\n     /**\n-     *  Return true if this provider supports random access.\n+     * Return true if this provider supports random access.\n      */\n     public boolean supportsRandomAccess();\n \n     /**\n-     *  Open the result.  This will be called before\n-     *  {@link #next}, {@link #absolute}, or {@link #size}.\n+     * Open the result. This will be called before\n+     * {@link #next}, {@link #absolute}, or {@link #size}.\n      */\n     public void open() throws Exception;\n \n     /**\n-     *  Instantiate the current result object.  This method will only be\n-     *  called after {@link #next} or {@link #absolute}.\n+     * Instantiate the current result object. This method will only be\n+     * called after {@link #next} or {@link #absolute}.\n      */\n     public Object getResultObject() throws Exception;\n \n     /**\n-     *  Advance the input to the next position. Return <code>true</code> if\n-     *  there is more data; otherwise <code>false</code>.\n+     * Advance the input to the next position. Return <code>true</code> if\n+     * there is more data; otherwise <code>false</code>.\n      */\n     public boolean next() throws Exception;\n \n     /**\n-     *  Move to the given 0-based position.  This method is\n-     *  only called for providers that support random access.\n-      *  Return <code>true</code> if there is data at this position;\n-     *  otherwise <code>false</code>.  This may be invoked in place of\n-     *  {@link #next}.\n+     * Move to the given 0-based position. This method is\n+     * only called for providers that support random access.\n+     * Return <code>true</code> if there is data at this position;\n+     * otherwise <code>false</code>. This may be invoked in place of\n+     * {@link #next}.\n      */\n     public boolean absolute(int pos) throws Exception;\n \n     /**\n-     *  Return the number of items in the input, or {@link Integer#MAX_VALUE}\n-     *  if the size in unknown.\n+     * Return the number of items in the input, or {@link Integer#MAX_VALUE}\n+     * if the size in unknown.\n      */\n     public int size() throws Exception;\n \n     /**\n-     *  Reset this provider.  This is an optional operation.  If supported,\n-     *  it should move the position of the provider to before the first\n-     *  element.  Non-random-access providers may be able to support this\n-     *  method by re-acquiring all resources as if the result were\n-     *  just opened.\n+     * Reset this provider. This is an optional operation. If supported,\n+     * it should move the position of the provider to before the first\n+     * element. Non-random-access providers may be able to support this\n+     * method by re-acquiring all resources as if the result were just opened.\n      */\n     public void reset() throws Exception;\n \n     /**\n-     *  Free the resources associated with this provider.\n+     * Free the resources associated with this provider.\n      */\n     public void close() throws Exception;\n \n     /**\n-     *  Any checked exceptions that are thrown will be passed to this method.\n-     *  The provider should re-throw the exception as an appropriate unchecked\n-     *  exception.\n+     * Any checked exceptions that are thrown will be passed to this method.\n+     * The provider should re-throw the exception as an appropriate unchecked\n+     * exception.\n      */\n     public void handleCheckedException(Exception e);\n }"},{"sha":"ab26ed56522686a3a926dd9b46b8ce38b9d093ee","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/ResultObjectProviderIterator.java","status":"modified","additions":14,"deletions":31,"changes":45,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/ResultObjectProviderIterator.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/ResultObjectProviderIterator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/ResultObjectProviderIterator.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74","patch":"@@ -1,52 +1,44 @@\n /*\n  * Copyright 2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *  Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n package org.apache.openjpa.lib.rop;\n \n-import org.apache.openjpa.lib.util.*;\n-\n import java.util.*;\n-\n+import org.apache.openjpa.lib.util.*;\n \n /**\n- *  <p>Iterator wrapped around a {@link ResultObjectProvider}.</p>\n- *\n- *  @author Abe White\n- *  @nojavadoc */\n+ * Iterator wrapped around a {@link ResultObjectProvider}.\n+ * \n+ * @author Abe White\n+ * @nojavadoc\n+ */\n public class ResultObjectProviderIterator implements Iterator, Closeable {\n     private final ResultObjectProvider _rop;\n     private Boolean _hasNext = null;\n     private Boolean _open = null;\n \n     /**\n-     *  Constructor.  Supply object provider.\n+     * Constructor. Supply object provider.\n      */\n     public ResultObjectProviderIterator(ResultObjectProvider rop) {\n         _rop = rop;\n     }\n \n     /**\n-     *  Close the underlying result object provider.\n+     * Close the underlying result object provider.\n      */\n     public void close() {\n         if (_open == Boolean.TRUE) {\n-            try {\n-                _rop.close();\n-            } catch (Exception e) {\n-            }\n-\n+            try { _rop.close(); } catch (Exception e) {}\n             _open = Boolean.FALSE;\n         }\n     }\n@@ -56,56 +48,47 @@ public void remove() {\n     }\n \n     public boolean hasNext() {\n-        if (_open == Boolean.FALSE) {\n+        if (_open == Boolean.FALSE)\n             return false;\n-        }\n \n         if (_hasNext == null) {\n             try {\n                 if (_open == null) {\n                     _rop.open();\n                     _open = Boolean.TRUE;\n                 }\n-\n                 _hasNext = (_rop.next()) ? Boolean.TRUE : Boolean.FALSE;\n             } catch (RuntimeException re) {\n                 close();\n                 throw re;\n             } catch (Exception e) {\n                 close();\n                 _rop.handleCheckedException(e);\n-\n                 return false;\n             }\n         }\n \n         // close if we reach the end of the list\n         if (!_hasNext.booleanValue()) {\n             close();\n-\n             return false;\n         }\n-\n         return true;\n     }\n \n     public Object next() {\n-        if (!hasNext()) {\n+        if (!hasNext())\n             throw new NoSuchElementException();\n-        }\n-\n         try {\n             Object ret = _rop.getResultObject();\n             _hasNext = null;\n-\n             return ret;\n         } catch (RuntimeException re) {\n             close();\n             throw re;\n         } catch (Exception e) {\n             close();\n             _rop.handleCheckedException(e);\n-\n             return null;\n         }\n     }"},{"sha":"88ecaae7682fe20a750bc1c990d79539ec093800","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/SimpleResultList.java","status":"modified","additions":15,"deletions":35,"changes":50,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/SimpleResultList.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/SimpleResultList.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/SimpleResultList.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74","patch":"@@ -1,13 +1,10 @@\n /*\n  * Copyright 2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *  Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n@@ -16,26 +13,24 @@\n package org.apache.openjpa.lib.rop;\n \n import java.io.*;\n-\n import java.util.*;\n \n-\n /**\n- *  <p>An almost stateless {@link ResultList} designed for use with result\n- *  object providers backed by efficient random-access data structures, such\n- *  as the {@link ListResultObjectProvider}.  This result list does not\n- *  perform any caching.</p>\n- *\n- *  @author Abe White\n- *  @nojavadoc */\n+ * An almost stateless {@link ResultList} designed for use with result\n+ * object providers backed by efficient random-access data structures, such\n+ * as the {@link ListResultObjectProvider}. This result list does not\n+ * perform any caching.\n+ * \n+ * @author Abe White\n+ * @nojavadoc\n+ */\n public class SimpleResultList extends AbstractNonSequentialResultList {\n     private final transient ResultObjectProvider _rop;\n     private boolean _closed = false;\n     private int _size = -1;\n \n     public SimpleResultList(ResultObjectProvider rop) {\n         _rop = rop;\n-\n         try {\n             _rop.open();\n         } catch (RuntimeException re) {\n@@ -58,65 +53,50 @@ public boolean isClosed() {\n     public void close() {\n         if (!_closed) {\n             _closed = true;\n-\n-            try {\n-                _rop.close();\n-            } catch (Exception e) {\n-            }\n+            try { _rop.close(); } catch (Exception e) {}\n         }\n     }\n \n     public Object getInternal(int index) {\n         try {\n-            if (!_rop.absolute(index)) {\n+            if (!_rop.absolute(index))\n                 return PAST_END;\n-            }\n-\n             return _rop.getResultObject();\n         } catch (RuntimeException re) {\n             close();\n             throw re;\n         } catch (Exception e) {\n             close();\n             _rop.handleCheckedException(e);\n-\n             return PAST_END;\n         }\n     }\n \n     public int size() {\n         assertOpen();\n-\n-        if (_size != -1) {\n+        if (_size != -1)\n             return _size;\n-        }\n-\n         try {\n             _size = _rop.size();\n-\n             return _size;\n         } catch (RuntimeException re) {\n             close();\n             throw re;\n         } catch (Exception e) {\n             close();\n             _rop.handleCheckedException(e);\n-\n             return -1;\n         }\n     }\n \n     public Object writeReplace() throws ObjectStreamException {\n-        if (_closed) {\n+        if (_closed)\n             return this;\n-        }\n \n         // load results into list\n         List list = new ArrayList();\n-\n         for (Iterator itr = iterator(); itr.hasNext();)\n             list.add(itr.next());\n-\n         return list;\n     }\n }"},{"sha":"9c92ebf466cf02ecfaa91a174c342ec1b7f095ec","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/SoftRandomAccessResultList.java","status":"modified","additions":10,"deletions":14,"changes":24,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/SoftRandomAccessResultList.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/SoftRandomAccessResultList.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/SoftRandomAccessResultList.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74","patch":"@@ -1,31 +1,27 @@\n /*\n  * Copyright 2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *  Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n package org.apache.openjpa.lib.rop;\n \n-import org.apache.commons.collections.*;\n-\n import java.util.*;\n-\n+import org.apache.commons.collections.*;\n \n /**\n- *  <p>Specialization of the {@link RandomAccessResultList} that only maintains\n- *  soft references to instantiated objects.</p>\n- *\n- *  @author Abe White\n- *  @nojavadoc */\n+ * Specialization of the {@link RandomAccessResultList} that only maintains\n+ * soft references to instantiated objects.\n+ * \n+ * @author Abe White\n+ * @nojavadoc\n+ */\n public class SoftRandomAccessResultList extends RandomAccessResultList {\n     public SoftRandomAccessResultList(ResultObjectProvider rop) {\n         super(rop);"},{"sha":"9a27d113975dfc08249cf7a65ed6c9a338f15c14","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/WindowResultList.java","status":"modified","additions":24,"deletions":52,"changes":76,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/WindowResultList.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/WindowResultList.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/WindowResultList.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74","patch":"@@ -1,13 +1,10 @@\n /*\n  * Copyright 2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *  Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n@@ -16,20 +13,19 @@\n package org.apache.openjpa.lib.rop;\n \n import java.io.*;\n-\n import java.util.*;\n \n-\n /**\n- *  <p>ResultList implementation that uses a forward-scrolling window of\n- *  results.</p>\n- *\n- *  @author Abe White\n- *  @nojavadoc */\n+ * ResultList implementation that uses a forward-scrolling window of results.\n+ * \n+ * @author Abe White\n+ * @nojavadoc\n+ */\n public class WindowResultList extends AbstractNonSequentialResultList {\n     private static final int OPEN = 0;\n     private static final int FREED = 1;\n     private static final int CLOSED = 2;\n+\n     private final Object[] _window;\n     private int _pos = -1;\n     private ResultObjectProvider _rop = null;\n@@ -44,10 +40,8 @@ public WindowResultList(ResultObjectProvider rop) {\n     public WindowResultList(ResultObjectProvider rop, int windowSize) {\n         _rop = rop;\n \n-        if (windowSize <= 0) {\n+        if (windowSize <= 0)\n             windowSize = 10;\n-        }\n-\n         _window = new Object[windowSize];\n \n         try {\n@@ -79,73 +73,59 @@ public void close() {\n \n     public int size() {\n         assertOpen();\n-\n-        if (_size != -1) {\n+        if (_size != -1)\n             return _size;\n-        }\n-\n         try {\n             _size = _rop.size();\n-\n             return _size;\n         } catch (RuntimeException re) {\n             close();\n             throw re;\n         } catch (Exception e) {\n             close();\n             _rop.handleCheckedException(e);\n-\n             return -1;\n         }\n     }\n \n     public Object getInternal(int index) {\n         // out of range?\n-        if ((index < 0) || ((_size != -1) && (index >= _size))) {\n+        if (index < 0 || (_size != -1 && index >= _size))\n             return PAST_END;\n-        }\n \n         try {\n             // if this is before window range, move window back\n             if (index < _pos) {\n-                if (!_random || (index == 0)) {\n+                if (!_random || index == 0)\n                     _rop.reset();\n-                }\n-\n                 _pos = -1;\n             }\n \n             // if this is the first get or past window range, move window\n-            if ((_pos == -1) || (index >= (_pos + _window.length))) {\n+            if (_pos == -1 || index >= _pos + _window.length) {\n                 // position result provider just before requested index\n-                if (_random && (index != 0)) {\n-                    if (!_rop.absolute(index - 1)) {\n+                if (_random && index != 0) {\n+                    if (!_rop.absolute(index - 1))\n                         return PAST_END;\n-                    }\n                 } else {\n-                    int begin = (_pos == -1) ? 0 : (_pos + _window.length);\n-\n+                    int begin = (_pos == -1) ? 0 : _pos + _window.length;\n                     for (int i = begin; i < index; i++)\n-                        if (!_rop.next()) {\n+                        if (!_rop.next())\n                             return PAST_END;\n-                        }\n                 }\n \n                 // create window starting at requested index\n                 int end = -1;\n-\n                 for (int i = 0; i < _window.length; i++) {\n-                    if ((end == -1) && !_rop.next()) {\n+                    if (end == -1 && !_rop.next())\n                         end = i;\n-                    }\n-\n-                    _window[i] = (end == -1) ? _rop.getResultObject() : PAST_END;\n+                    _window[i] = (end == -1) ? _rop.getResultObject()\n+                        : PAST_END;\n                 }\n-\n                 _pos = index;\n \n                 // if the window spans the entire result list, free\n-                if ((end != -1) && (_pos == 0)) {\n+                if (end != -1 && _pos == 0) {\n                     _size = end;\n                     free();\n                 }\n@@ -159,33 +139,25 @@ public Object getInternal(int index) {\n         } catch (Exception e) {\n             close();\n             _rop.handleCheckedException(e);\n-\n             return null;\n         }\n     }\n \n     private void free() {\n         if (_state == OPEN) {\n-            try {\n-                _rop.close();\n-            } catch (Exception e) {\n-            }\n-\n+            try { _rop.close(); } catch (Exception e) {}\n             _state = FREED;\n         }\n     }\n \n     public Object writeReplace() throws ObjectStreamException {\n-        if (_state != OPEN) {\n+        if (_state != OPEN)\n             return this;\n-        }\n \n         // load results into list\n         List list = new ArrayList();\n-\n         for (Iterator itr = iterator(); itr.hasNext();)\n             list.add(itr.next());\n-\n         return list;\n     }\n }"},{"sha":"832ada565dca9a17412918749f78decfc17c3b9a","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/AbstractEventManager.java","status":"modified","additions":35,"deletions":59,"changes":94,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/AbstractEventManager.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/AbstractEventManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/AbstractEventManager.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74","patch":"@@ -1,13 +1,10 @@\n /*\n  * Copyright 2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *  Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n@@ -17,110 +14,93 @@\n \n import java.util.*;\n \n-\n /**\n- *  <p>Base event manager that handles adding/removing listeners\n- *  and firing events.  This class is reentrant-safe; listeners can be added\n- *  and removed by other listeners when they receive events.  The changes will\n- *  not be visible until the event fire that initiated the recursive sequence\n- *  of calls completes, however.</p>\n- *\n- *  @author Abe White\n+ * Base event manager that handles adding/removing listeners\n+ * and firing events. This class is reentrant-safe; listeners can be added\n+ * and removed by other listeners when they receive events. The changes will\n+ * not be visible until the event fire that initiated the recursive sequence\n+ * of calls completes, however.\n+ * \n+ * @author Abe White\n  */\n public abstract class AbstractEventManager implements EventManager {\n     private static Exception[] EMPTY_EXCEPTIONS = new Exception[0];\n+\n     private boolean _firing = false;\n     private Collection _listeners = null;\n     private Collection _newListeners = null;\n \n     /**\n-     *  Register an event listener.\n+     * Register an event listener.\n      */\n     public synchronized void addListener(Object listener) {\n-        if (listener == null) {\n+        if (listener == null)\n             return;\n-        }\n-\n         if (_firing) {\n-            if (_newListeners == null) {\n+            if (_newListeners == null)\n                 _newListeners = newListenerCollection();\n-            }\n-\n             _newListeners.addAll(_listeners);\n             _newListeners.add(listener);\n         } else {\n-            if (_listeners == null) {\n+            if (_listeners == null)\n                 _listeners = newListenerCollection();\n-            }\n-\n             _listeners.add(listener);\n         }\n     }\n \n     /**\n-     *  Remove an event listener.\n+     * Remove an event listener.\n      */\n     public synchronized boolean removeListener(Object listener) {\n-        if (listener == null) {\n+        if (listener == null)\n             return false;\n-        }\n-\n         if (_firing && _listeners.contains(listener)) {\n-            if (_newListeners == null) {\n+            if (_newListeners == null)\n                 _newListeners = newListenerCollection();\n-            }\n-\n             _newListeners.addAll(_listeners);\n-\n             return _newListeners.remove(listener);\n         }\n-\n-        return (_listeners != null) && _listeners.remove(listener);\n+        return _listeners != null && _listeners.remove(listener);\n     }\n \n     /**\n-     *  Return whether the given instance is in the list of listeners.\n+     * Return whether the given instance is in the list of listeners.\n      */\n     public synchronized boolean hasListener(Object listener) {\n-        return (_listeners != null) && _listeners.contains(listener);\n+        return _listeners != null && _listeners.contains(listener);\n     }\n \n     /**\n-     *  Return true if there are any registered listeners.\n+     * Return true if there are any registered listeners.\n      */\n     public synchronized boolean hasListeners() {\n-        return (_listeners != null) && !_listeners.isEmpty();\n+        return _listeners != null && !_listeners.isEmpty();\n     }\n \n     /**\n-     *  Return a read-only list of listeners.\n+     * Return a read-only list of listeners.\n      */\n     public synchronized Collection getListeners() {\n-        return (_listeners == null) ? Collections.EMPTY_LIST\n-                                    : Collections.unmodifiableCollection(_listeners);\n+        return(_listeners == null) ? Collections.EMPTY_LIST\n+            : Collections.unmodifiableCollection(_listeners);\n     }\n \n     /**\n-     *  Fire the given event to all listeners.\n+     * Fire the given event to all listeners.\n      */\n     public synchronized Exception[] fireEvent(Object event) {\n-        if ((_listeners == null) || _listeners.isEmpty()) {\n+        if (_listeners == null || _listeners.isEmpty())\n             return EMPTY_EXCEPTIONS;\n-        }\n \n         boolean reentrant = _firing;\n         _firing = true;\n-\n         List exceptions = null;\n-\n         for (Iterator itr = _listeners.iterator(); itr.hasNext();) {\n             try {\n                 fireEvent(event, itr.next());\n             } catch (Exception e) {\n-                if (exceptions == null) {\n+                if (exceptions == null)\n                     exceptions = new LinkedList();\n-                }\n-\n                 exceptions.add(e);\n             }\n         }\n@@ -130,29 +110,25 @@ public synchronized Collection getListeners() {\n         // list with the set of new listeners\n         if (!reentrant) {\n             _firing = false;\n-\n-            if (_newListeners != null) {\n+            if (_newListeners != null)\n                 _listeners = _newListeners;\n-            }\n-\n             _newListeners = null;\n         }\n \n-        if (exceptions == null) {\n+        if (exceptions == null)\n             return EMPTY_EXCEPTIONS;\n-        }\n-\n-        return (Exception[]) exceptions.toArray(new Exception[exceptions.size()]);\n+        return(Exception[]) exceptions.toArray\n+            (new Exception[exceptions.size()]);\n     }\n \n     /**\n-     *  Implement this method to fire the given event to the given listener.\n+     * Implement this method to fire the given event to the given listener.\n      */\n     protected abstract void fireEvent(Object event, Object listener)\n         throws Exception;\n \n     /**\n-     *  Return a new container for listeners.  Uses a linked list by default.\n+     * Return a new container for listeners. Uses a linked list by default.\n      */\n     protected Collection newListenerCollection() {\n         return new LinkedList();"},{"sha":"9c4d5bb1d4ca3f281f578062f5fc55b89e437c7b","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Base16Encoder.java","status":"modified","additions":19,"deletions":32,"changes":51,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Base16Encoder.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Base16Encoder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Base16Encoder.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74","patch":"@@ -1,71 +1,58 @@\n /*\n  * Copyright 2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *  Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n package org.apache.openjpa.lib.util;\n \n-\n /**\n- *  <p>Base 16 encoder.</p>\n- *\n- *  @author Marc Prud'hommeaux\n- *  @nojavadoc */\n+ * Base 16 encoder.\n+ * \n+ * @author Marc Prud'hommeaux\n+ * @nojavadoc\n+ */\n public class Base16Encoder {\n     private final static char[] HEX = new char[] {\n-            '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D',\n-            'E', 'F'\n-        };\n+        '0', '1', '2', '3', '4', '5', '6', '7',\n+        '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };\n \n     /**\n-     *  Convert bytes to a base16 string.\n+     * Convert bytes to a base16 string.\n      */\n     public static String encode(byte[] byteArray) {\n         StringBuffer hexBuffer = new StringBuffer(byteArray.length * 2);\n-\n         for (int i = 0; i < byteArray.length; i++)\n             for (int j = 1; j >= 0; j--)\n                 hexBuffer.append(HEX[(byteArray[i] >> (j * 4)) & 0xF]);\n-\n         return hexBuffer.toString();\n     }\n \n     /**\n-     *  Convert a base16 string into a byte array.\n+     * Convert a base16 string into a byte array.\n      */\n     public static byte[] decode(String s) {\n         int len = s.length();\n         byte[] r = new byte[len / 2];\n-\n         for (int i = 0; i < r.length; i++) {\n-            int digit1 = s.charAt(i * 2);\n-            int digit2 = s.charAt((i * 2) + 1);\n-\n-            if ((digit1 >= '0') && (digit1 <= '9')) {\n+            int digit1 = s.charAt(i * 2), digit2 = s.charAt(i * 2 + 1);\n+            if (digit1 >= '0' && digit1 <= '9')\n                 digit1 -= '0';\n-            } else if ((digit1 >= 'A') && (digit1 <= 'F')) {\n-                digit1 -= ('A' - 10);\n-            }\n-\n-            if ((digit2 >= '0') && (digit2 <= '9')) {\n+            else if (digit1 >= 'A' && digit1 <= 'F')\n+                digit1 -= 'A' - 10;\n+            if (digit2 >= '0' && digit2 <= '9')\n                 digit2 -= '0';\n-            } else if ((digit2 >= 'A') && (digit2 <= 'F')) {\n-                digit2 -= ('A' - 10);\n-            }\n+            else if (digit2 >= 'A' && digit2 <= 'F')\n+                digit2 -= 'A' - 10;\n \n             r[i] = (byte) ((digit1 << 4) + digit2);\n         }\n-\n         return r;\n     }\n }"},{"sha":"6d6cd672c63f6b14ca85a7c5623ed6d8aa9ccb2d","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/BytecodeWriter.java","status":"modified","additions":7,"deletions":12,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/BytecodeWriter.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/BytecodeWriter.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/BytecodeWriter.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74","patch":"@@ -1,29 +1,24 @@\n /*\n  * Copyright 2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *  Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n package org.apache.openjpa.lib.util;\n \n-import serp.bytecode.*;\n-\n import java.io.*;\n-\n+import serp.bytecode.*;\n \n /**\n- *  Control how enhanced bytecode is written.\n- *\n- *  @author Steve Kim\n+ * Control how enhanced bytecode is written.\n+ * \n+ * @author Steve Kim\n  */\n public interface BytecodeWriter {\n     public void write(BCClass type) throws IOException;"},{"sha":"6707c33342bb3ba211e1b05866098ab1e3c7d8d8","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Closeable.java","status":"modified","additions":7,"deletions":11,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Closeable.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Closeable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Closeable.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74","patch":"@@ -1,26 +1,22 @@\n /*\n  * Copyright 2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *  Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n package org.apache.openjpa.lib.util;\n \n-\n /**\n- *  <p>Generic interface for components that can be closed so that helpers\n- *  can treate them in a generic way.</p>\n- *\n- *  @author Abe White\n+ * Generic interface for components that can be closed so that helpers\n+ * can treate them in a generic way.\n+ * \n+ * @author Abe White\n  */\n public interface Closeable {\n     public void close() throws Exception;"},{"sha":"c4b709b8e6dbf8b66abd39f13959e8a47fad273d","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/CodeFormat.java","status":"modified","additions":144,"deletions":211,"changes":355,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/CodeFormat.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/CodeFormat.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/CodeFormat.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74","patch":"@@ -1,633 +1,567 @@\n /*\n  * Copyright 2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *  Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n package org.apache.openjpa.lib.util;\n \n-\n /**\n- *  <p>Encapsulates some common Java source code formatting options.  The\n- *  class can also be used as a buffer for formatted Java code.</p>\n- *\n- *  @author Abe White\n+ * Encapsulates some common Java source code formatting options. The\n+ * class can also be used as a buffer for formatted Java code.\n+ * \n+ * @author Abe White\n  */\n public final class CodeFormat implements Cloneable {\n     private static final String _sep = System.getProperty(\"line.separator\");\n+\n     private String _tab = \"\\t\";\n     private boolean _spaceBeforeParen = false;\n     private boolean _spaceInParen = false;\n     private boolean _braceOnSameLine = true;\n     private boolean _braceAtSameTabLevel = false;\n     private boolean _scoreBeforeFieldName = false;\n     private int _linesBetweenSections = 2;\n+\n     private StringBuffer _buf = new StringBuffer();\n \n     /**\n-     *  The number of spaces to use for tabs; 0 means to use actual tab\n-     *  characters.  Defaults to 0.\n+     * The number of spaces to use for tabs; 0 means to use actual tab\n+     * characters. Defaults to 0.\n      */\n     public int getTabSpaces() {\n-        return (_tab.equals(\"\\t\")) ? 0 : _tab.length();\n+        return(_tab.equals(\"\\t\")) ? 0 : _tab.length();\n     }\n \n     /**\n-     *  The number of spaces to use for tabs; 0 means to use actual tab\n-     *  characters.  Defaults to 0.\n+     * The number of spaces to use for tabs; 0 means to use actual tab\n+     * characters. Defaults to 0.\n      */\n     public void setTabSpaces(int tab) {\n-        if (tab == 0) {\n+        if (tab == 0)\n             _tab = \"\\t\";\n-        } else {\n+        else {\n             StringBuffer tabs = new StringBuffer(tab);\n-\n             for (int i = 0; i < tab; i++)\n                 tabs.append(\" \");\n-\n             _tab = tabs.toString();\n         }\n     }\n \n     /**\n-     *  Whether to place a space before parentheses.  Defaults to false.\n+     * Whether to place a space before parentheses. Defaults to false.\n      */\n     public boolean getSpaceBeforeParen() {\n         return _spaceBeforeParen;\n     }\n \n     /**\n-     *  Whether to place a space before parentheses.  Defaults to false.\n+     * Whether to place a space before parentheses. Defaults to false.\n      */\n     public void setSpaceBeforeParen(boolean spaceBeforeParen) {\n         _spaceBeforeParen = spaceBeforeParen;\n     }\n \n     /**\n-     *  Whether to place a space within parentheses.  Defaults to false.\n+     * Whether to place a space within parentheses. Defaults to false.\n      */\n     public boolean getSpaceInParen() {\n         return _spaceInParen;\n     }\n \n     /**\n-     *  Whether to place a space within parentheses.  Defaults to false.\n+     * Whether to place a space within parentheses. Defaults to false.\n      */\n     public void setSpaceInParen(boolean spaceInParen) {\n         _spaceInParen = spaceInParen;\n     }\n \n     /**\n-     *  Whether to place opening braces on the same line as the\n-     *  block declaration, or on the next line.  Defaults to same line.\n+     * Whether to place opening braces on the same line as the\n+     * block declaration, or on the next line. Defaults to same line.\n      */\n     public boolean getBraceOnSameLine() {\n         return _braceOnSameLine;\n     }\n \n     /**\n-     *  Whether to place opening braces on the same line as the\n-     *  block declaration, or on the next line.  Defaults to same line.\n+     * Whether to place opening braces on the same line as the\n+     * block declaration, or on the next line. Defaults to same line.\n      */\n     public void setBraceOnSameLine(boolean braceOnSameLine) {\n         _braceOnSameLine = braceOnSameLine;\n     }\n \n     /**\n-     *  Whether to place braces at the same tab level as the code within\n-     *  the block.  Defaults to false.\n+     * Whether to place braces at the same tab level as the code within\n+     * the block. Defaults to false.\n      */\n     public boolean getBraceAtSameTabLevel() {\n         return _braceAtSameTabLevel;\n     }\n \n     /**\n-     *  Whether to place braces at the same tab level as the code within\n-     *  the block.  Defaults to false.\n+     * Whether to place braces at the same tab level as the code within\n+     * the block. Defaults to false.\n      */\n     public void setBraceAtSameTabLevel(boolean braceAtSameTabLevel) {\n         _braceAtSameTabLevel = braceAtSameTabLevel;\n     }\n \n     /**\n-     *  Whether to place an underscore before private field names.  Defaults\n-     *  to false.\n+     * Whether to place an underscore before private field names. Defaults\n+     * to false.\n      */\n     public boolean getScoreBeforeFieldName() {\n         return _scoreBeforeFieldName;\n     }\n \n     /**\n-     *  Whether to place an underscore before private field names.  Defaults\n-     *  to false.\n+     * Whether to place an underscore before private field names. Defaults\n+     * to false.\n      */\n     public void setScoreBeforeFieldName(boolean scoreBeforeFieldName) {\n         _scoreBeforeFieldName = scoreBeforeFieldName;\n     }\n \n     /**\n-     *  The number of empty lines between code sections.  Defaults to 2.\n+     * The number of empty lines between code sections. Defaults to 2.\n      */\n     public int getLinesBetweenSections() {\n         return _linesBetweenSections;\n     }\n \n     /**\n-     *  The number of empty lines between sections.  Defaults to 2.\n+     * The number of empty lines between sections. Defaults to 2.\n      */\n     public void setLinesBetweenSections(int linesBetweenSections) {\n         _linesBetweenSections = linesBetweenSections;\n     }\n \n     /**\n-     *  Return a new line character.\n+     * Return a new line character.\n      */\n     public String getEndl() {\n         return getEndl(1);\n     }\n \n     /**\n-     *  Return the given number of new line characters.\n+     * Return the given number of new line characters.\n      */\n     public String getEndl(int num) {\n-        if (num == 0) {\n+        if (num == 0)\n             return \"\";\n-        }\n-\n-        if (num == 1) {\n+        if (num == 1)\n             return _sep;\n-        }\n \n         StringBuffer buf = new StringBuffer(_sep.length() * num);\n-\n         for (int i = 0; i < num; i++)\n             buf.append(_sep);\n-\n         return buf.toString();\n     }\n \n     /**\n-     *  Return the given number of new line characters, followed by\n-     *  the given tab level indentation.\n+     * Return the given number of new line characters, followed by\n+     * the given tab level indentation.\n      */\n     public String getEndl(int num, int tabs) {\n         return getEndl(num) + getTab(tabs);\n     }\n \n     /**\n-     *  Return {#getLinesBetweenSections} + 1 new line characters.\n+     * Return {#getLinesBetweenSections} + 1 new line characters.\n      */\n     public String getAfterSection() {\n         return getEndl(getLinesBetweenSections() + 1);\n     }\n \n     /**\n-     *  Open parentheses string.  Users can choose to place spaces before\n-     *  and within parentheses.\n+     * Open parentheses string. Users can choose to place spaces before\n+     * and within parentheses.\n      */\n     public String getOpenParen(boolean methodOrIf) {\n-        if ((_spaceBeforeParen && methodOrIf) && _spaceInParen) {\n+        if ((_spaceBeforeParen && methodOrIf) && _spaceInParen)\n             return \" ( \";\n-        }\n-\n-        if (_spaceBeforeParen && methodOrIf) {\n+        if (_spaceBeforeParen && methodOrIf)\n             return \" (\";\n-        }\n-\n-        if (_spaceInParen) {\n+        if (_spaceInParen)\n             return \"( \";\n-        }\n-\n         return \"(\";\n     }\n \n     /**\n-     *  Close parentheses string.  Users can choose to place spaces within\n-     *  parentheses.\n+     * Close parentheses string. Users can choose to place spaces within\n+     * parentheses.\n      */\n     public String getCloseParen() {\n-        if (_spaceInParen) {\n+        if (_spaceInParen)\n             return \" )\";\n-        }\n-\n         return \")\";\n     }\n \n     /**\n-     *  Paired parentheses for empty method parameters.  Users can choose\n-     *  to place spaces before parentheses.\n+     * Paired parentheses for empty method parameters. Users can choose\n+     * to place spaces before parentheses.\n      */\n     public String getParens() {\n-        if (_spaceBeforeParen) {\n+        if (_spaceBeforeParen)\n             return \" ()\";\n-        }\n-\n         return \"()\";\n     }\n \n     /**\n-     *  Open brace string.  Users can choose to place braces on the same\n-     *  line, or on a new line, and can choose the indenting level.\n-     *\n-     *  @param tabLevel        the tab level of code within the brace\n+     * Open brace string. Users can choose to place braces on the same\n+     * line, or on a new line, and can choose the indenting level.\n+     * \n+     * @param tabLevel the tab level of code within the brace\n      */\n     public String getOpenBrace(int tabLevel) {\n-        if (_braceOnSameLine) {\n+        if (_braceOnSameLine)\n             return \" {\";\n-        }\n-\n-        if (_braceAtSameTabLevel) {\n+        if (_braceAtSameTabLevel)\n             return getEndl() + getTab(tabLevel) + \"{\";\n-        }\n-\n         return getEndl() + getTab(tabLevel - 1) + \"{\";\n     }\n \n     /**\n-     *  Close brace string.  Users can choose to place braces on the same\n-     *  line, or on a new line, and can choose the indenting level.\n-     *\n-     *  @param tabLevel        the tab level of code within the brace\n+     * Close brace string. Users can choose to place braces on the same\n+     * line, or on a new line, and can choose the indenting level.\n+     * \n+     * @param tabLevel the tab level of code within the brace\n      */\n     public String getCloseBrace(int tabLevel) {\n-        if (_braceAtSameTabLevel) {\n+        if (_braceAtSameTabLevel)\n             return getTab(tabLevel) + \"}\";\n-        }\n-\n         return getTab(tabLevel - 1) + \"}\";\n     }\n \n     /**\n-     *  Extends declaration.  Uses configuration of {@link #openBrace},\n-     *  but prints \"extends\" instead of a brace.\n+     * Extends declaration. Uses configuration of {@link #openBrace},\n+     * but prints \"extends\" instead of a brace.\n      */\n     public String getExtendsDec(int tabLevel) {\n-        if (_braceOnSameLine) {\n+        if (_braceOnSameLine)\n             return \" extends\";\n-        }\n-\n-        if (_braceAtSameTabLevel) {\n+        if (_braceAtSameTabLevel)\n             return getEndl() + getTab(tabLevel) + \"extends\";\n-        }\n-\n         return getEndl() + getTab(tabLevel) + \"extends\";\n     }\n \n     /**\n-     *  Implements declaration.  Uses configuration of {@link #openBrace},\n-     *  but prints \"implements\" instead of a brace.\n+     * Implements declaration. Uses configuration of {@link #openBrace},\n+     * but prints \"implements\" instead of a brace.\n      */\n     public String getImplementsDec(int tabLevel) {\n-        if (_braceOnSameLine) {\n+        if (_braceOnSameLine)\n             return \" implements\";\n-        }\n-\n-        if (_braceAtSameTabLevel) {\n+        if (_braceAtSameTabLevel)\n             return getEndl() + getTab(tabLevel) + \"implements\";\n-        }\n-\n         return getEndl() + getTab(tabLevel) + \"implements\";\n     }\n \n     /**\n-     *  Throws declaration.  Uses configuration of {@link #openBrace},\n-     *  but prints \"throws\" instead of a brace.\n+     * Throws declaration. Uses configuration of {@link #openBrace},\n+     * but prints \"throws\" instead of a brace.\n      */\n     public String getThrowsDec(int tabLevel) {\n-        if (_braceOnSameLine) {\n+        if (_braceOnSameLine)\n             return \" throws\";\n-        }\n-\n-        if (_braceAtSameTabLevel) {\n+        if (_braceAtSameTabLevel)\n             return getEndl() + getTab(tabLevel) + \"throws\";\n-        }\n-\n         return getEndl() + getTab(tabLevel) + \"throws\";\n     }\n \n     /**\n-     *  Tab string.  Users can choose to use spaces or tab characters.\n+     * Tab string. Users can choose to use spaces or tab characters.\n      */\n     public String getTab() {\n         return getTab(1);\n     }\n \n     /**\n-     *  Tab string.  Users can choose to use spaces or tab characters.\n-     *\n-     *  @param tabLevel        the number of tabs\n+     * Tab string. Users can choose to use spaces or tab characters.\n+     * \n+     * @param tabLevel the number of tabs\n      */\n     public String getTab(int tabLevel) {\n-        if (tabLevel == 0) {\n+        if (tabLevel == 0)\n             return \"\";\n-        }\n-\n-        if (tabLevel == 1) {\n+        if (tabLevel == 1)\n             return _tab;\n-        }\n \n         StringBuffer tabs = new StringBuffer(_tab.length() * tabLevel);\n-\n         for (int i = 0; i < tabLevel; i++)\n             tabs.append(_tab);\n-\n         return tabs.toString();\n     }\n \n     /**\n-     *  Return the field name for given suggested name, possibly adding\n-     *  leading underscore.\n+     * Return the field name for given suggested name, possibly adding\n+     * leading underscore.\n      */\n     public String getFieldName(String fieldName) {\n-        return (_scoreBeforeFieldName) ? (\"_\" + fieldName) : fieldName;\n+        return(_scoreBeforeFieldName) ? \"_\" + fieldName : fieldName;\n     }\n \n     /**\n-     *  Return the internal code buffer.\n+     * Return the internal code buffer.\n      */\n     public StringBuffer getBuffer() {\n         return _buf;\n     }\n \n     /**\n-     *  Append the given value to the internal buffer.\n+     * Append the given value to the internal buffer.\n      */\n     public CodeFormat append(boolean val) {\n         _buf.append(val);\n-\n         return this;\n     }\n \n     /**\n-     *  Append the given value to the internal buffer.\n+     * Append the given value to the internal buffer.\n      */\n     public CodeFormat append(byte val) {\n         _buf.append(val);\n-\n         return this;\n     }\n \n     /**\n-     *  Append the given value to the internal buffer.\n+     * Append the given value to the internal buffer.\n      */\n     public CodeFormat append(char val) {\n         _buf.append(val);\n-\n         return this;\n     }\n \n     /**\n-     *  Append the given value to the internal buffer.\n+     * Append the given value to the internal buffer.\n      */\n     public CodeFormat append(double val) {\n         _buf.append(val);\n-\n         return this;\n     }\n \n     /**\n-     *  Append the given value to the internal buffer.\n+     * Append the given value to the internal buffer.\n      */\n     public CodeFormat append(float val) {\n         _buf.append(val);\n-\n         return this;\n     }\n \n     /**\n-     *  Append the given value to the internal buffer.\n+     * Append the given value to the internal buffer.\n      */\n     public CodeFormat append(int val) {\n         _buf.append(val);\n-\n         return this;\n     }\n \n     /**\n-     *  Append the given value to the internal buffer.\n+     * Append the given value to the internal buffer.\n      */\n     public CodeFormat append(long val) {\n         _buf.append(val);\n-\n         return this;\n     }\n \n     /**\n-     *  Append the given value to the internal buffer.\n+     * Append the given value to the internal buffer.\n      */\n     public CodeFormat append(short val) {\n         _buf.append(val);\n-\n         return this;\n     }\n \n     /**\n-     *  Append the given value to the internal buffer.\n+     * Append the given value to the internal buffer.\n      */\n     public CodeFormat append(Object val) {\n         _buf.append(val);\n-\n         return this;\n     }\n \n     /**\n-     *  Append the given value to the internal buffer.\n-     *\n-     *  @see #getEndl()\n+     * Append the given value to the internal buffer.\n+     * \n+     * @see #getEndl()\n      */\n     public CodeFormat endl() {\n         _buf.append(getEndl());\n-\n         return this;\n     }\n \n     /**\n-     *  Append the given value to the internal buffer.\n-     *\n-     *  @see #getEndl(int)\n+     * Append the given value to the internal buffer.\n+     * \n+     * @see #getEndl(int)\n      */\n     public CodeFormat endl(int num) {\n         _buf.append(getEndl(num));\n-\n         return this;\n     }\n \n     /**\n-     *  Append the given value to the internal buffer.\n-     *\n-     *  @see #getEndl(int, int)\n+     * Append the given value to the internal buffer.\n+     * \n+     * @see #getEndl(int, int)\n      */\n     public CodeFormat endl(int num, int tabs) {\n         _buf.append(getEndl(num, tabs));\n-\n         return this;\n     }\n \n     /**\n-     *  Append the given value to the internal buffer.\n-     *\n-     *  @see #getAfterSection\n+     * Append the given value to the internal buffer.\n+     * \n+     * @see #getAfterSection\n      */\n     public CodeFormat afterSection() {\n         _buf.append(getAfterSection());\n-\n         return this;\n     }\n \n     /**\n-     *  Append the given value to the internal buffer.\n-     *\n-     *  @see #getOpenParen\n+     * Append the given value to the internal buffer.\n+     * \n+     * @see #getOpenParen\n      */\n     public CodeFormat openParen(boolean methodOrIf) {\n         _buf.append(getOpenParen(methodOrIf));\n-\n         return this;\n     }\n \n     /**\n-     *  Append the given value to the internal buffer.\n-     *\n-     *  @see #getCloseParen\n+     * Append the given value to the internal buffer.\n+     * \n+     * @see #getCloseParen\n      */\n     public CodeFormat closeParen() {\n         _buf.append(getCloseParen());\n-\n         return this;\n     }\n \n     /**\n-     *  Append the given value to the internal buffer.\n-     *\n-     *  @see #getParens\n+     * Append the given value to the internal buffer.\n+     * \n+     * @see #getParens\n      */\n     public CodeFormat parens() {\n         _buf.append(getParens());\n-\n         return this;\n     }\n \n     /**\n-     *  Append the given value to the internal buffer.\n-     *\n-     *  @see #getOpenBrace\n+     * Append the given value to the internal buffer.\n+     * \n+     * @see #getOpenBrace\n      */\n     public CodeFormat openBrace(int tabLevel) {\n         _buf.append(getOpenBrace(tabLevel));\n-\n         return this;\n     }\n \n     /**\n-     *  Append the given value to the internal buffer.\n-     *\n-     *  @see #getCloseBrace\n+     * Append the given value to the internal buffer.\n+     * \n+     * @see #getCloseBrace\n      */\n     public CodeFormat closeBrace(int tabLevel) {\n         _buf.append(getCloseBrace(tabLevel));\n-\n         return this;\n     }\n \n     /**\n-     *  Append the given value to the internal buffer.\n-     *\n-     *  @see #getExtendsDec\n+     * Append the given value to the internal buffer.\n+     * \n+     * @see #getExtendsDec\n      */\n     public CodeFormat extendsDec(int tabLevel) {\n         _buf.append(getExtendsDec(tabLevel));\n-\n         return this;\n     }\n \n     /**\n-     *  Append the given value to the internal buffer.\n-     *\n-     *  @see #getImplementsDec\n+     * Append the given value to the internal buffer.\n+     * \n+     * @see #getImplementsDec\n      */\n     public CodeFormat implementsDec(int tabLevel) {\n         _buf.append(getImplementsDec(tabLevel));\n-\n         return this;\n     }\n \n     /**\n-     *  Append the given value to the internal buffer.\n-     *\n-     *  @see #getThrowsDec\n+     * Append the given value to the internal buffer.\n+     * \n+     * @see #getThrowsDec\n      */\n     public CodeFormat throwsDec(int tabLevel) {\n         _buf.append(getThrowsDec(tabLevel));\n-\n         return this;\n     }\n \n     /**\n-     *  Append the given value to the internal buffer.\n-     *\n-     *  @see #getTab\n+     * Append the given value to the internal buffer.\n+     * \n+     * @see #getTab\n      */\n     public CodeFormat tab() {\n         _buf.append(getTab());\n-\n         return this;\n     }\n \n     /**\n-     *  Append the given value to the internal buffer.\n-     *\n-     *  @see #getTab\n+     * Append the given value to the internal buffer.\n+     * \n+     * @see #getTab\n      */\n     public CodeFormat tab(int tabLevel) {\n         _buf.append(getTab(tabLevel));\n-\n         return this;\n     }\n \n     /**\n-     *  Append the given value to the internal buffer.\n-     *\n-     *  @see #getFieldName\n+     * Append the given value to the internal buffer.\n+     * \n+     * @see #getFieldName\n      */\n     public CodeFormat fieldName(String name) {\n         _buf.append(getFieldName(name));\n-\n         return this;\n     }\n \n     /**\n-     *  Clear the internal code buffer.\n+     * Clear the internal code buffer.\n      */\n     public void clear() {\n         _buf = new StringBuffer();\n     }\n \n     /**\n-     *  Return the internal buffer as a string.\n+     * Return the internal buffer as a string.\n      */\n     public String toString() {\n         return _buf.toString();\n     }\n \n     /**\n-     *  Return the length of the internal buffer.\n+     * Return the length of the internal buffer.\n      */\n     public int length() {\n         return _buf.length();\n     }\n \n     /**\n-     *  Make a copy of this code format object with all the same formatting\n-     *  settings.\n+     * Make a copy of this code format object with all the same formatting\n+     * settings.\n      */\n     public Object clone() {\n         CodeFormat format = new CodeFormat();\n@@ -638,7 +572,6 @@ public Object clone() {\n         format._braceAtSameTabLevel = _braceAtSameTabLevel;\n         format._scoreBeforeFieldName = _scoreBeforeFieldName;\n         format._linesBetweenSections = _linesBetweenSections;\n-\n         return format;\n     }\n }"},{"sha":"5d00eea9f3cba6b61b9a6d1cb1adf0ba61570680","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/EventManager.java","status":"modified","additions":12,"deletions":16,"changes":28,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/EventManager.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/EventManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/EventManager.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74","patch":"@@ -1,13 +1,10 @@\n /*\n  * Copyright 2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *  Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n@@ -17,40 +14,39 @@\n \n import java.util.*;\n \n-\n /**\n- *  <p>Basic event manager interface.</p>\n- *\n- *  @author Abe White\n+ * Basic event manager interface.\n+ * \n+ * @author Abe White\n  */\n public interface EventManager {\n     /**\n-     *  Add an event listener.\n+     * Add an event listener.\n      */\n     public void addListener(Object listener);\n \n     /**\n-     *  Remove an event listener.\n+     * Remove an event listener.\n      */\n     public boolean removeListener(Object listener);\n \n     /**\n-     *  Return whether the given instance is in the list of listeners.\n+     * Return whether the given instance is in the list of listeners.\n      */\n     public boolean hasListener(Object listener);\n \n     /**\n-     *  Return true if there are any registered listeners.\n+     * Return true if there are any registered listeners.\n      */\n     public boolean hasListeners();\n \n     /**\n-     *  Return a read-only list of listeners.\n+     * Return a read-only list of listeners.\n      */\n     public Collection getListeners();\n \n     /**\n-     *  Fire the given event to all listeners, returning any exceptions.\n+     * Fire the given event to all listeners, returning any exceptions.\n      */\n     public Exception[] fireEvent(Object event);\n }"},{"sha":"88c22937ea6e1e4cac619ba94799ad138ea2e65c","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Files.java","status":"modified","additions":76,"deletions":148,"changes":224,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Files.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Files.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Files.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74","patch":"@@ -1,218 +1,174 @@\n /*\n  * Copyright 2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *  Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n package org.apache.openjpa.lib.util;\n \n-import org.apache.commons.lang.exception.*;\n-\n-import serp.util.*;\n-\n import java.io.*;\n-\n import java.net.*;\n-\n+import org.apache.commons.lang.exception.*;\n+import serp.util.*;\n \n /**\n- *  <p>Utility operations on files.</p>\n- *\n- *  @author Abe White\n- *  @nojavadoc */\n+ * Utility operations on files.\n+ * \n+ * @author Abe White\n+ * @nojavadoc\n+ */\n public class Files {\n     /**\n-     *  Backup the given file to a new file called &lt;file-name&gt;~.  If\n-     *  the file does not exist or a backup could not be created, returns null.\n+     * Backup the given file to a new file called &lt;file-name&gt;~. If\n+     * the file does not exist or a backup could not be created, returns null.\n      */\n     public static File backup(File file, boolean copy) {\n-        if ((file == null) || !file.exists()) {\n+        if (file == null || !file.exists())\n             return null;\n-        }\n \n         // create new file object copy so we don't modify the original\n         File clone = new File(file.getAbsolutePath());\n         File bk = new File(file.getAbsolutePath() + \"~\");\n-\n-        if (!clone.renameTo(bk)) {\n+        if (!clone.renameTo(bk))\n             return null;\n-        }\n-\n         if (copy) {\n             try {\n                 copy(bk, file);\n             } catch (IOException ioe) {\n                 throw new NestableRuntimeException(ioe);\n             }\n         }\n-\n         return bk;\n     }\n \n     /**\n-     *  Revert the given backup file to the original location.  If the given\n-     *  file's name does not end in '~', the '~' is appended before proceeding.\n-     *  If the backup file does not exist or could not be reverted,\n-     *  returns null.\n+     * Revert the given backup file to the original location. If the given\n+     * file's name does not end in '~', the '~' is appended before proceeding.\n+     * If the backup file does not exist or could not be reverted, returns null.\n      */\n     public static File revert(File backup, boolean copy) {\n-        if (backup == null) {\n+        if (backup == null)\n             return null;\n-        }\n-\n-        if (!backup.getName().endsWith(\"~\")) {\n+        if (!backup.getName().endsWith(\"~\"))\n             backup = new File(backup.getPath() + \"~\");\n-        }\n-\n-        if (!backup.exists()) {\n+        if (!backup.exists())\n             return null;\n-        }\n \n         // create new file object copy so we don't modify the original\n         String path = backup.getAbsolutePath();\n         File clone = new File(path);\n         File orig = new File(path.substring(0, path.length() - 1));\n-\n-        if (!clone.renameTo(orig)) {\n+        if (!clone.renameTo(orig))\n             return null;\n-        }\n-\n         if (copy) {\n             try {\n                 copy(orig, backup);\n             } catch (IOException ioe) {\n                 throw new NestableRuntimeException(ioe);\n             }\n         }\n-\n         return orig;\n     }\n \n     /**\n-     *  Return the source file for the given class, or null if the\n-     *  source is not in the CLASSPATH.\n+     * Return the source file for the given class, or null if the\n+     * source is not in the CLASSPATH.\n      */\n     public static File getSourceFile(Class cls) {\n         return getClassFile(cls, \".java\");\n     }\n \n     /**\n-     *  Return the class file of the given class, or null if the\n-     *  class is in a jar.\n-      */\n+     * Return the class file of the given class, or null if the\n+     * class is in a jar.\n+     */\n     public static File getClassFile(Class cls) {\n         return getClassFile(cls, \".class\");\n     }\n \n     /**\n-     *  Return the file for the class resource with the given extension.\n+     * Return the file for the class resource with the given extension.\n      */\n     private static File getClassFile(Class cls, String ext) {\n         String name = Strings.getClassName(cls);\n \n         // if it's an inner class, use the parent class name\n         int innerIdx = name.indexOf('$');\n-\n-        if (innerIdx != -1) {\n+        if (innerIdx != -1)\n             name = name.substring(0, innerIdx);\n-        }\n \n         URL rsrc = cls.getResource(name + ext);\n-\n-        if ((rsrc != null) && rsrc.getProtocol().equals(\"file\")) {\n+        if (rsrc != null && rsrc.getProtocol().equals(\"file\"))\n             return new File(URLDecoder.decode(rsrc.getFile()));\n-        }\n-\n         return null;\n     }\n \n     /**\n-      *  Return the file for the given package.  If the given base directory\n-     *  matches the given package structure, it will be used as-is.  If not,\n-     *  the package structure will be added beneath the base directory.  If\n-     *  the base directory is null, the current working directory will be\n-     *  used as the base.\n+     * Return the file for the given package. If the given base directory\n+     * matches the given package structure, it will be used as-is. If not,\n+     * the package structure will be added beneath the base directory. If\n+     * the base directory is null, the current working directory will be\n+     * used as the base.\n      */\n     public static File getPackageFile(File base, String pkg, boolean mkdirs) {\n-        if (base == null) {\n+        if (base == null)\n             base = new File(System.getProperty(\"user.dir\"));\n-        }\n-\n-        if ((pkg == null) || (pkg.length() == 0)) {\n-            if (mkdirs && !base.exists()) {\n+        if (pkg == null || pkg.length() == 0) {\n+            if (mkdirs && !base.exists())\n                 base.mkdirs();\n-            }\n-\n             return base;\n         }\n \n         pkg = pkg.replace('.', File.separatorChar);\n-\n         File file = null;\n-\n         try {\n-            if (base.getCanonicalPath().endsWith(pkg)) {\n+            if (base.getCanonicalPath().endsWith(pkg))\n                 file = base;\n-            } else {\n+            else\n                 file = new File(base, pkg);\n-            }\n         } catch (IOException ioe) {\n             throw new NestableRuntimeException(ioe);\n         }\n \n-        if (mkdirs && !file.exists()) {\n+        if (mkdirs && !file.exists())\n             file.mkdirs();\n-        }\n-\n         return file;\n     }\n \n     /**\n-     *  Check the given string for a matching file.  The string is first\n-     *  tested to see if it is an existing file path.  If it does not\n-     *  represent an existing file, it is checked as a resource name of a\n-     *  file.  If no resource exists, then it is interpreted as a path\n-     *  to a file that does not exist yet.\n-     *\n-     *  @param name        the file path or resource name\n-     *  @param loader        a class loader to use in resource lookup, or null\n-     *                                  to use the thread's context loader\n+     * Check the given string for a matching file. The string is first\n+     * tested to see if it is an existing file path. If it does not\n+     * represent an existing file, it is checked as a resource name of a\n+     * file. If no resource exists, then it is interpreted as a path\n+     * to a file that does not exist yet.\n+     * \n+     * @param name the file path or resource name\n+     * @param loader a class loader to use in resource lookup, or null\n+     * to use the thread's context loader\n      */\n     public static File getFile(String name, ClassLoader loader) {\n-        if (name == null) {\n+        if (name == null)\n             return null;\n-        }\n \n         File file = new File(name);\n-\n-        if (file.exists()) {\n+        if (file.exists())\n             return file;\n-        }\n \n-        if (loader == null) {\n+        if (loader == null)\n             loader = Thread.currentThread().getContextClassLoader();\n-        }\n-\n         URL url = loader.getResource(name);\n-\n         if (url != null) {\n             String urlFile = url.getFile();\n-\n             if (urlFile != null) {\n                 File rsrc = new File(URLDecoder.decode(urlFile));\n-\n-                if (rsrc.exists()) {\n+                if (rsrc.exists())\n                     return rsrc;\n-                }\n             }\n         }\n \n@@ -221,25 +177,19 @@ public static File getFile(String name, ClassLoader loader) {\n     }\n \n     /**\n-     *  Return a writer to the stream (stdout or stderr) or file named by the\n-     *  given string.\n-     *\n-     *  @see #getFile\n+     * Return a writer to the stream(stdout or stderr) or file named by the\n+     * given string.\n+     * \n+     * @see #getFile\n      */\n     public static Writer getWriter(String file, ClassLoader loader)\n         throws IOException {\n-        if (file == null) {\n+        if (file == null)\n             return null;\n-        }\n-\n-        if (\"stdout\".equals(file)) {\n+        if (\"stdout\".equals(file))\n             return new PrintWriter(System.out);\n-        }\n-\n-        if (\"stderr\".equals(file)) {\n+        if (\"stderr\".equals(file))\n             return new PrintWriter(System.err);\n-        }\n-\n         try {\n             return new FileWriter(getFile(file, loader));\n         } catch (IOException ioe) {\n@@ -248,24 +198,18 @@ public static Writer getWriter(String file, ClassLoader loader)\n     }\n \n     /**\n-     *  Return an output stream to the stream (stdout or stderr) or file named\n-     *  by the given string.\n-     *\n-     *  @see #getFile\n+     * Return an output stream to the stream(stdout or stderr) or file named\n+     * by the given string.\n+     * \n+     * @see #getFile\n      */\n     public static OutputStream getOutputStream(String file, ClassLoader loader) {\n-        if (file == null) {\n+        if (file == null)\n             return null;\n-        }\n-\n-        if (\"stdout\".equals(file)) {\n+        if (\"stdout\".equals(file))\n             return System.out;\n-        }\n-\n-        if (\"stderr\".equals(file)) {\n+        if (\"stderr\".equals(file))\n             return System.err;\n-        }\n-\n         try {\n             return new FileOutputStream(getFile(file, loader));\n         } catch (IOException ioe) {\n@@ -274,44 +218,28 @@ public static OutputStream getOutputStream(String file, ClassLoader loader) {\n     }\n \n     /**\n-     *  Copy a file.  Return false if <code>from</code> does not exist.\n+     * Copy a file. Return false if <code>from</code> does not exist.\n      */\n     public static boolean copy(File from, File to) throws IOException {\n-        if ((from == null) || (to == null) || !from.exists()) {\n+        if (from == null || to == null || !from.exists())\n             return false;\n-        }\n \n         FileInputStream in = null;\n         FileOutputStream out = null;\n-\n         try {\n             in = new FileInputStream(from);\n-\n             BufferedInputStream inbuf = new BufferedInputStream(in);\n             out = new FileOutputStream(to);\n-\n             BufferedOutputStream outbuf = new BufferedOutputStream(out);\n-\n-            for (int b; (b = inbuf.read()) != -1; outbuf.write(b))\n-                ;\n-\n+            for (int b; (b = inbuf.read()) != -1; outbuf.write(b));\n             outbuf.flush();\n-\n             return true;\n-        } finally {\n-            if (in != null) {\n-                try {\n-                    in.close();\n-                } catch (Exception e) {\n-                }\n-            }\n-\n-            if (out != null) {\n-                try {\n-                    out.close();\n-                } catch (Exception e) {\n-                }\n-            }\n+        }\n+        finally {\n+            if (in != null)\n+                try { in.close(); } catch (Exception e) {}\n+            if (out != null)\n+                try { out.close(); } catch (Exception e) {}\n         }\n     }\n }"},{"sha":"cb7f2b2d24cd43b5af20f5b5c67b86d151d5d21a","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/FormatPreservingProperties.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/FormatPreservingProperties.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/FormatPreservingProperties.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/FormatPreservingProperties.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"f657d5396014e6bcaf8bd55495f94bbb9b6a9043","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/JavaVersions.java","status":"modified","additions":80,"deletions":103,"changes":183,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/JavaVersions.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/JavaVersions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/JavaVersions.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"48c81ba7f3b24cd83697810738ee04c5b3450649","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/LRUMap.java","status":"modified","additions":13,"deletions":22,"changes":35,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/LRUMap.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/LRUMap.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/LRUMap.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"fd6197a35912e6d29024ae9cfd8916d23a1f1fe5","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Localizer.java","status":"modified","additions":78,"deletions":102,"changes":180,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Localizer.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Localizer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Localizer.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"5355bd1a10dda0f1b3fc5de8658d699c19e0efe1","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/MultiClassLoader.java","status":"modified","additions":54,"deletions":100,"changes":154,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/MultiClassLoader.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/MultiClassLoader.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/MultiClassLoader.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"b928aff9d41cb4ec7e630444dba4dd2ff9c9cb25","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Options.java","status":"modified","additions":228,"deletions":345,"changes":573,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Options.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Options.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Options.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"458a66c86f84c504fcae8635b84d6a9a6acf37d2","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ParameterTemplate.java","status":"modified","additions":53,"deletions":81,"changes":134,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ParameterTemplate.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ParameterTemplate.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ParameterTemplate.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"2c39f701998a038091a2a89886fb9ffca5dd062c","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ParseException.java","status":"modified","additions":9,"deletions":12,"changes":21,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ParseException.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ParseException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ParseException.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"ee901d017e926d7b593727c65abc5981f12b0fa1","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ReferenceHashMap.java","status":"modified","additions":39,"deletions":64,"changes":103,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ReferenceHashMap.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ReferenceHashMap.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ReferenceHashMap.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"196bb8b0400e90a5ed39bafab3af1741ad4e6444","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ReferenceHashSet.java","status":"modified","additions":28,"deletions":35,"changes":63,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ReferenceHashSet.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ReferenceHashSet.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ReferenceHashSet.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"a90bbc7dfdb82b31fc850a3b81f2750847a8beb7","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ReferenceMap.java","status":"modified","additions":14,"deletions":18,"changes":32,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ReferenceMap.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ReferenceMap.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ReferenceMap.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"b83a81d51038b13c5eb2d2961d4e0192eabcdce7","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ResourceBundleProvider.java","status":"modified","additions":10,"deletions":13,"changes":23,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ResourceBundleProvider.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ResourceBundleProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ResourceBundleProvider.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"19384c136bf1d79e61440485a6661fa03b23b5c2","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Services.java","status":"modified","additions":30,"deletions":51,"changes":81,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Services.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Services.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Services.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"9296fd3b320fcbfd348b10faa2688a9f54d8f000","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/SimpleRegex.java","status":"modified","additions":38,"deletions":60,"changes":98,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/SimpleRegex.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/SimpleRegex.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/SimpleRegex.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"e8478f31ca382162ebf3a08af7107745969018ff","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/SimpleResourceBundleProvider.java","status":"modified","additions":7,"deletions":12,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/SimpleResourceBundleProvider.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/SimpleResourceBundleProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/SimpleResourceBundleProvider.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"a6f54f72a2c7efc10e1bf52b1824478562dcb853","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/SizedMap.java","status":"modified","additions":11,"deletions":16,"changes":27,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/SizedMap.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/SizedMap.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/SizedMap.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"bbe41dfddd05c3a4b01c35bff5d8662cfd517f22","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/StreamResourceBundleProvider.java","status":"modified","additions":12,"deletions":23,"changes":35,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/StreamResourceBundleProvider.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/StreamResourceBundleProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/StreamResourceBundleProvider.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"5c805f7df64a9630f5509e4529e3027e328fc031","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/StringDistance.java","status":"modified","additions":65,"deletions":80,"changes":145,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/StringDistance.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/StringDistance.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/StringDistance.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"e2cb625ff49f0f4dc49c0ccba18ca23cf807681b","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/TemporaryClassLoader.java","status":"modified","additions":24,"deletions":41,"changes":65,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/TemporaryClassLoader.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/TemporaryClassLoader.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/TemporaryClassLoader.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"eb87658933a93d26740be00ab9a003ea2c00362e","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/TypedProperties.java","status":"modified","additions":120,"deletions":150,"changes":270,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/TypedProperties.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/TypedProperties.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/TypedProperties.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"81e3bb4ec6500219237c24699b7332e5f80c1f02","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/UUIDGenerator.java","status":"modified","additions":29,"deletions":42,"changes":71,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/UUIDGenerator.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/UUIDGenerator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/UUIDGenerator.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"4f5b0bb32446a2111801977061c0a269a900723a","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ZipResourceBundleProvider.java","status":"modified","additions":15,"deletions":32,"changes":47,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ZipResourceBundleProvider.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ZipResourceBundleProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ZipResourceBundleProvider.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"df3c740348409ff30ac8b964074c5cbfe7a6c1b2","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/AbstractCollection.java","status":"modified","additions":6,"deletions":12,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/AbstractCollection.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/AbstractCollection.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/AbstractCollection.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"1675ece0ecfca6aa34440d90882431764691d722","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/AbstractConcurrentEventManager.java","status":"modified","additions":24,"deletions":34,"changes":58,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/AbstractConcurrentEventManager.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/AbstractConcurrentEventManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/AbstractConcurrentEventManager.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"18336824ad895ba7f4b9d2eb10779329c03782e9","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/AbstractQueue.java","status":"modified","additions":41,"deletions":66,"changes":107,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/AbstractQueue.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/AbstractQueue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/AbstractQueue.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"7d097d1cd72e0d1fc062974ec1f76963a4d1d8c3","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/AbstractSet.java","status":"modified","additions":6,"deletions":12,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/AbstractSet.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/AbstractSet.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/AbstractSet.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"42a371600d3fdaab0f5b157d04eccbeda335919a","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/Arrays.java","status":"modified","additions":167,"deletions":393,"changes":560,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/Arrays.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/Arrays.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/Arrays.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"5e7d610f9b63f3abf01d2f1a97bbe752bbcf2c40","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ConcurrentHashMap.java","status":"modified","additions":238,"deletions":364,"changes":602,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ConcurrentHashMap.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ConcurrentHashMap.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ConcurrentHashMap.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"b124282e85ffbbb7db5a154ffc83765ba3202237","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ConcurrentHashSet.java","status":"modified","additions":14,"deletions":22,"changes":36,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ConcurrentHashSet.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ConcurrentHashSet.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ConcurrentHashSet.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"8450a7de1dbd3f3adb8c8571a531b581abd1661c","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ConcurrentLinkedQueue.java","status":"modified","additions":172,"deletions":246,"changes":418,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ConcurrentLinkedQueue.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ConcurrentLinkedQueue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ConcurrentLinkedQueue.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"775a5d363c39bf07b8865bf7ffd3e2c561b93320","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ConcurrentMap.java","status":"modified","additions":12,"deletions":16,"changes":28,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ConcurrentMap.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ConcurrentMap.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ConcurrentMap.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"75206ce4816c03ad848d0f9ffaa1066337c26c8d","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ConcurrentReferenceHashMap.java","status":"modified","additions":243,"deletions":358,"changes":601,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ConcurrentReferenceHashMap.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ConcurrentReferenceHashMap.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ConcurrentReferenceHashMap.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"8a88499444bf9c00ed491dc44cd096f900a88de9","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ConcurrentReferenceHashSet.java","status":"modified","additions":25,"deletions":34,"changes":59,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ConcurrentReferenceHashSet.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ConcurrentReferenceHashSet.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ConcurrentReferenceHashSet.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"8f363732c4a1177c78d40047c9ccb43d976a3bdc","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/CondVar.java","status":"modified","additions":40,"deletions":85,"changes":125,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/CondVar.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/CondVar.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/CondVar.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"a8bf8d00e542529be2c0862463809bb49fc95b51","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/Condition.java","status":"modified","additions":168,"deletions":225,"changes":393,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/Condition.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/Condition.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/Condition.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"4cbd055e46822cc4698f92f93c33341c667c682a","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/CopyOnWriteArrayList.java","status":"modified","additions":196,"deletions":546,"changes":742,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/CopyOnWriteArrayList.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/CopyOnWriteArrayList.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/CopyOnWriteArrayList.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"34c9e8e95ad1e9255f27ef28ea3f55b7281208f8","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/CopyOnWriteArraySet.java","status":"modified","additions":95,"deletions":134,"changes":229,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/CopyOnWriteArraySet.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/CopyOnWriteArraySet.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/CopyOnWriteArraySet.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"ef55b89bd8b385244833ecf0787f14b47f480dca","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/FIFOCondVar.java","status":"modified","additions":30,"deletions":77,"changes":107,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/FIFOCondVar.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/FIFOCondVar.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/FIFOCondVar.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"9defad1c14b214141646c191865dafcf4937df7e","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/FIFOWaitQueue.java","status":"modified","additions":14,"deletions":40,"changes":54,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/FIFOWaitQueue.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/FIFOWaitQueue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/FIFOWaitQueue.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"c6f9366da5ff5ae3cf407e4c71d29e420916b472","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/Lock.java","status":"modified","additions":92,"deletions":137,"changes":229,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/Lock.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/Lock.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/Lock.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"a82e7e87924e5f89f78e2d18cc5eef609fb55346","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/NanoTimer.java","status":"modified","additions":6,"deletions":11,"changes":17,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/NanoTimer.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/NanoTimer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/NanoTimer.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"886be6d2b73f3dc1629a4bcf95b2752e0e618bde","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/Queue.java","status":"modified","additions":66,"deletions":79,"changes":145,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/Queue.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/Queue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/Queue.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"a54b063a84634dce2c4ac3861ea3238992aa4ea6","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ReentrantLock.java","status":"modified","additions":528,"deletions":708,"changes":1236,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ReentrantLock.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ReentrantLock.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ReentrantLock.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"08bcba9af843d4eb81f0bf50001f677a2cc52fc8","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/TimeUnit.java","status":"modified","additions":127,"deletions":343,"changes":470,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/TimeUnit.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/TimeUnit.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/TimeUnit.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"0474d2e573681d2c30a516b822fe4a2ab648d25c","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/Utils.java","status":"modified","additions":113,"deletions":169,"changes":282,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/Utils.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/Utils.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/Utils.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"35e676eb942e243f30a14b73c6be82e69b55b4ad","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/WaitQueue.java","status":"modified","additions":14,"deletions":36,"changes":50,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/WaitQueue.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/WaitQueue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/WaitQueue.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"393d7ffc411b297a0c988586788f7a999e25b9cf","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/xml/Commentable.java","status":"modified","additions":10,"deletions":13,"changes":23,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/xml/Commentable.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/xml/Commentable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/xml/Commentable.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"bd0a6cc18f0755ad65690669c8380480e846feec","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/xml/DocTypeReader.java","status":"modified","additions":67,"deletions":114,"changes":181,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/xml/DocTypeReader.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/xml/DocTypeReader.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/xml/DocTypeReader.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"8a465c6933d34b4b820b0f9d7ce828b61bee15c6","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/xml/Location.java","status":"modified","additions":13,"deletions":24,"changes":37,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/xml/Location.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/xml/Location.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/xml/Location.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"54a83ff534f7723c0a716a5af5876c0fd861b71b","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/xml/ValidatingErrorHandler.java","status":"modified","additions":10,"deletions":14,"changes":24,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/xml/ValidatingErrorHandler.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/xml/ValidatingErrorHandler.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/xml/ValidatingErrorHandler.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"21ecaad229324cb2bbac28c85231d65e1cebba8d","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/xml/XMLFactory.java","status":"modified","additions":37,"deletions":55,"changes":92,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/xml/XMLFactory.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/xml/XMLFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/xml/XMLFactory.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"7080055edf625732b54537666fc00f593dc08113","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/xml/XMLWriter.java","status":"modified","additions":23,"deletions":32,"changes":55,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/xml/XMLWriter.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/main/java/org/apache/openjpa/lib/xml/XMLWriter.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/xml/XMLWriter.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"d05f097f9277f194d71bc6ff17a770cd5772667e","filename":"openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/TestConfigurations.java","status":"added","additions":83,"deletions":0,"changes":83,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/TestConfigurations.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/TestConfigurations.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/TestConfigurations.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"bbc88af260d9b32e2a3d9440d85dc942cb8fd4f4","filename":"openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/test/TestConfigurationImpl.java","status":"added","additions":315,"deletions":0,"changes":315,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/test/TestConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/test/TestConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/test/TestConfigurationImpl.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"d42e822dead0e4a1b6b36c05f3afb85e2f616b28","filename":"openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/test/TestPluginValue.java","status":"added","additions":172,"deletions":0,"changes":172,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/test/TestPluginValue.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/test/TestPluginValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/test/TestPluginValue.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"722ed7bce014f490ac183ad33761ac0553fcbba8","filename":"openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/ResultListTest.java","status":"added","additions":258,"deletions":0,"changes":258,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/ResultListTest.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/ResultListTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/ResultListTest.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"0090cf8e5244cab5c8c9a6e5b036d22217f1e022","filename":"openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestEagerResultList.java","status":"added","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestEagerResultList.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestEagerResultList.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestEagerResultList.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"d8c814e19f901cdacaacbc8549701fbcf755231a","filename":"openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestLazyForwardResultList.java","status":"added","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestLazyForwardResultList.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestLazyForwardResultList.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestLazyForwardResultList.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"8895b8bf1276251b0414866069fb15c661ac8f34","filename":"openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestListResultList.java","status":"added","additions":35,"deletions":0,"changes":35,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestListResultList.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestListResultList.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestListResultList.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"0dc2354a18be3b2313c77ed1431d3e5db6eaa85f","filename":"openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestMergedResultObjectProvider.java","status":"added","additions":58,"deletions":0,"changes":58,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestMergedResultObjectProvider.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestMergedResultObjectProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestMergedResultObjectProvider.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"f37857042b3c902ecc9ee5f135d83bbf520349a6","filename":"openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestOrderedMergedResultObjectProvider.java","status":"added","additions":66,"deletions":0,"changes":66,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestOrderedMergedResultObjectProvider.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestOrderedMergedResultObjectProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestOrderedMergedResultObjectProvider.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"e7a3df59a9feb655412df0efdd5f2509b6e54cef","filename":"openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestRandomAccessResultList.java","status":"added","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestRandomAccessResultList.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestRandomAccessResultList.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestRandomAccessResultList.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"b2487aacdb5bfc93b1b9dda5d6f5905ca6c8343a","filename":"openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestRangeResultObjectProvider.java","status":"added","additions":62,"deletions":0,"changes":62,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestRangeResultObjectProvider.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestRangeResultObjectProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestRangeResultObjectProvider.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"36196550a0aaeced8ce26f735c2d462a049833b4","filename":"openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestSimpleResultList.java","status":"added","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestSimpleResultList.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestSimpleResultList.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestSimpleResultList.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"dd352f3c3a02b07985f2e197d8e4b47ecc8b9e56","filename":"openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestSoftRandomAccessResultList.java","status":"added","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestSoftRandomAccessResultList.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestSoftRandomAccessResultList.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestSoftRandomAccessResultList.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"896f4f06f318fa77434069d59085718ee43b61f7","filename":"openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestWindowResultList.java","status":"added","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestWindowResultList.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestWindowResultList.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestWindowResultList.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"b8d12eb792eca4ceaf3512907e40f9af46bf8f0b","filename":"openjpa-lib/src/test/java/org/apache/openjpa/lib/test/AbstractTestCase.java","status":"added","additions":1502,"deletions":0,"changes":1502,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/test/java/org/apache/openjpa/lib/test/AbstractTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/test/java/org/apache/openjpa/lib/test/AbstractTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/test/AbstractTestCase.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"e1e62f360f64bbe41fb70aabce9072e36406e06e","filename":"openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestAbstractEventManager.java","status":"modified","additions":11,"deletions":17,"changes":28,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestAbstractEventManager.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestAbstractEventManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestAbstractEventManager.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"9dd1477cbc05e370d0d39e0232004d5b1af720ce","filename":"openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestLocalizer.java","status":"modified","additions":20,"deletions":31,"changes":51,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestLocalizer.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestLocalizer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestLocalizer.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"8fcd3ca9e09f15c2ef053d66d0e4e775d709a3f4","filename":"openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestMultiClassLoader.java","status":"modified","additions":46,"deletions":58,"changes":104,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestMultiClassLoader.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestMultiClassLoader.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestMultiClassLoader.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"b97e7d8e718e8038d1f1b613189b0785ab1f6c71","filename":"openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestOptions.java","status":"modified","additions":19,"deletions":27,"changes":46,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestOptions.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestOptions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestOptions.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"b5db2aab94833038386da7e6065d175d11301b19","filename":"openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestParameterTemplate.java","status":"modified","additions":7,"deletions":12,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestParameterTemplate.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestParameterTemplate.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestParameterTemplate.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"dde91f242900addf9ff2e143b9c79c072e33e3e9","filename":"openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestPropertiesParser.java","status":"modified","additions":79,"deletions":122,"changes":201,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestPropertiesParser.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestPropertiesParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestPropertiesParser.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"19d046198acb3e3fb5182b540b833a331c374423","filename":"openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestReferenceSet.java","status":"modified","additions":19,"deletions":28,"changes":47,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestReferenceSet.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestReferenceSet.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestReferenceSet.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"60b23d9017922b804d0f066fd8627b29b41f468d","filename":"openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestSimpleRegex.java","status":"modified","additions":11,"deletions":17,"changes":28,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestSimpleRegex.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestSimpleRegex.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestSimpleRegex.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"d9115b9fc6150fdd391dd7973dc8db312fc8767d","filename":"openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestTemporaryClassLoader.java","status":"modified","additions":8,"deletions":15,"changes":23,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestTemporaryClassLoader.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestTemporaryClassLoader.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestTemporaryClassLoader.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"5f5aff34937665bcb9ae74876820d84515351fc9","filename":"openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestTypedProperties.java","status":"modified","additions":11,"deletions":16,"changes":27,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestTypedProperties.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestTypedProperties.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestTypedProperties.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"a16859950040791e9db15754916fe2488227839a","filename":"openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestUUIDGenerator.java","status":"modified","additions":7,"deletions":14,"changes":21,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestUUIDGenerator.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestUUIDGenerator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestUUIDGenerator.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"26eddfa76d9a70f15063fe6f2612d8ef734c3be3","filename":"openjpa-lib/src/test/java/org/apache/openjpa/lib/util/concurrent/TestConcurrentMap.java","status":"modified","additions":23,"deletions":44,"changes":67,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/concurrent/TestConcurrentMap.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/concurrent/TestConcurrentMap.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/concurrent/TestConcurrentMap.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"24fad024e34f06929658af09026607b95b08f636","filename":"openjpa-lib/src/test/java/org/apache/openjpa/lib/util/testlocalizer/LocalizerTestHelper.java","status":"modified","additions":9,"deletions":13,"changes":22,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/testlocalizer/LocalizerTestHelper.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/testlocalizer/LocalizerTestHelper.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/testlocalizer/LocalizerTestHelper.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"6cc08bb2948d82b28c2ba9db655af3c4766953fd","filename":"openjpa-lib/src/test/java/org/apache/openjpa/lib/xml/TestDocTypeReader.java","status":"added","additions":200,"deletions":0,"changes":200,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/test/java/org/apache/openjpa/lib/xml/TestDocTypeReader.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/test/java/org/apache/openjpa/lib/xml/TestDocTypeReader.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/xml/TestDocTypeReader.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"86c81dfdf83caf95b1888991d0247d3917ba2935","filename":"openjpa-lib/src/test/java/org/apache/openjpa/lib/xml/TestXMLWriter.java","status":"added","additions":71,"deletions":0,"changes":71,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/test/java/org/apache/openjpa/lib/xml/TestXMLWriter.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/openjpa-lib/src/test/java/org/apache/openjpa/lib/xml/TestXMLWriter.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/xml/TestXMLWriter.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"278be4b94fcdc6853826f22eb440e8554f251f8e","filename":"serp/src/main/java/serp/bytecode/ArrayInstruction.java","status":"modified","additions":8,"deletions":13,"changes":21,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/ArrayInstruction.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/ArrayInstruction.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/main/java/serp/bytecode/ArrayInstruction.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"8ac2a9a03ae65cf1f2a8d189da1e7132ffd8bee8","filename":"serp/src/main/java/serp/bytecode/ArrayLoadInstruction.java","status":"modified","additions":17,"deletions":41,"changes":58,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/ArrayLoadInstruction.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/ArrayLoadInstruction.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/main/java/serp/bytecode/ArrayLoadInstruction.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"5085c420f2b7eeb14bc48d2d1c6a9156ae7ac527","filename":"serp/src/main/java/serp/bytecode/ArrayState.java","status":"modified","additions":6,"deletions":10,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/ArrayState.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/ArrayState.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/main/java/serp/bytecode/ArrayState.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"84d2add9f28751065b6603362a23160a847279a8","filename":"serp/src/main/java/serp/bytecode/ArrayStoreInstruction.java","status":"modified","additions":17,"deletions":43,"changes":60,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/ArrayStoreInstruction.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/ArrayStoreInstruction.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/main/java/serp/bytecode/ArrayStoreInstruction.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"712a0dc09371a3ece7376590e15003e5f4ea4b70","filename":"serp/src/main/java/serp/bytecode/Attribute.java","status":"modified","additions":39,"deletions":51,"changes":90,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/Attribute.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/Attribute.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/main/java/serp/bytecode/Attribute.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"6e664d2cf16d272fc857f3d777115c2ff1a16be1","filename":"serp/src/main/java/serp/bytecode/Attributes.java","status":"modified","additions":46,"deletions":71,"changes":117,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/Attributes.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/Attributes.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/main/java/serp/bytecode/Attributes.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"0551570466d5a6679d1a2b4e76f9b717880a94f1","filename":"serp/src/main/java/serp/bytecode/BCClass.java","status":"modified","additions":439,"deletions":683,"changes":1122,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/BCClass.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/BCClass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/main/java/serp/bytecode/BCClass.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"47f8a1dc4145898eca57f851ca1656a9a37acaf0","filename":"serp/src/main/java/serp/bytecode/BCClassLoader.java","status":"modified","additions":17,"deletions":27,"changes":44,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/BCClassLoader.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/BCClassLoader.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/main/java/serp/bytecode/BCClassLoader.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"f8a0344cdba3b0fd9285b3b41a919adb02c562b0","filename":"serp/src/main/java/serp/bytecode/BCEntity.java","status":"modified","additions":12,"deletions":17,"changes":29,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/BCEntity.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/BCEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/main/java/serp/bytecode/BCEntity.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"fced39d6d8217c52e12c38aab854731af5533fe4","filename":"serp/src/main/java/serp/bytecode/BCField.java","status":"modified","additions":48,"deletions":59,"changes":107,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/BCField.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/BCField.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/main/java/serp/bytecode/BCField.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"c0beeee9d3c0708e48739cd9636d587d86b8c0e0","filename":"serp/src/main/java/serp/bytecode/BCMember.java","status":"modified","additions":87,"deletions":101,"changes":188,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/BCMember.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/BCMember.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/main/java/serp/bytecode/BCMember.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"fe8091937f9959283aa9970f14aef471db2ad5c0","filename":"serp/src/main/java/serp/bytecode/BCMethod.java","status":"modified","additions":135,"deletions":180,"changes":315,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/BCMethod.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/BCMethod.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/main/java/serp/bytecode/BCMethod.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"e7a7dd749d7ba9715b0e2898b44e9c24513ee901","filename":"serp/src/main/java/serp/bytecode/ClassConstantInstruction.java","status":"modified","additions":50,"deletions":73,"changes":123,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/ClassConstantInstruction.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/ClassConstantInstruction.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/main/java/serp/bytecode/ClassConstantInstruction.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"617ba792dce880316b38f7f3c8caf8b87acf7b67","filename":"serp/src/main/java/serp/bytecode/ClassInstruction.java","status":"modified","additions":25,"deletions":42,"changes":67,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/ClassInstruction.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/ClassInstruction.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/main/java/serp/bytecode/ClassInstruction.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"1d7ed1a1e91b112635dd465027ecd7441a9e4819","filename":"serp/src/main/java/serp/bytecode/CmpInstruction.java","status":"modified","additions":37,"deletions":73,"changes":110,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/CmpInstruction.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/CmpInstruction.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/main/java/serp/bytecode/CmpInstruction.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"3b72dcb570c5d2524a2fe52a51637600879b1dff","filename":"serp/src/main/java/serp/bytecode/Code.java","status":"modified","additions":712,"deletions":942,"changes":1654,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/Code.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/Code.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/main/java/serp/bytecode/Code.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"7209ac5d1b9494cf15708c8e1cba1322900b9608","filename":"serp/src/main/java/serp/bytecode/CodeEntry.java","status":"modified","additions":6,"deletions":10,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/CodeEntry.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/CodeEntry.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/main/java/serp/bytecode/CodeEntry.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"5400e5cdff98281e81f4a874d0dfb62faacc89cf","filename":"serp/src/main/java/serp/bytecode/ConstantInstruction.java","status":"modified","additions":109,"deletions":175,"changes":284,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/ConstantInstruction.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/ConstantInstruction.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/main/java/serp/bytecode/ConstantInstruction.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"de77fb3a91933079ea7c076615476880d85c3013","filename":"serp/src/main/java/serp/bytecode/ConstantValue.java","status":"modified","additions":61,"deletions":95,"changes":156,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/ConstantValue.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/ConstantValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/main/java/serp/bytecode/ConstantValue.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"355fe9fe46b1833a1c58f1e5285ebe032d86b7d7","filename":"serp/src/main/java/serp/bytecode/Constants.java","status":"modified","additions":38,"deletions":45,"changes":83,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/Constants.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/Constants.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/main/java/serp/bytecode/Constants.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"71a4941ef53083c908b2e0a1a58ddead56b23ba9","filename":"serp/src/main/java/serp/bytecode/ConvertInstruction.java","status":"modified","additions":82,"deletions":170,"changes":252,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/ConvertInstruction.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/ConvertInstruction.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/main/java/serp/bytecode/ConvertInstruction.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"dcf8aa045b45cde02e2dc1aca5b9c835735218e0","filename":"serp/src/main/java/serp/bytecode/Deprecated.java","status":"modified","additions":6,"deletions":10,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/Deprecated.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/Deprecated.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/main/java/serp/bytecode/Deprecated.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"d6a8d85c061d83627df63c1af6af615ea31dbdce","filename":"serp/src/main/java/serp/bytecode/ExceptionHandler.java","status":"modified","additions":59,"deletions":75,"changes":134,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/ExceptionHandler.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/ExceptionHandler.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/main/java/serp/bytecode/ExceptionHandler.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"8c60a7587c9c4181f873dacf967b3ca2c5e986de","filename":"serp/src/main/java/serp/bytecode/Exceptions.java","status":"modified","additions":68,"deletions":115,"changes":183,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/Exceptions.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/Exceptions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/main/java/serp/bytecode/Exceptions.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"4af72c553289d154d7e75c87feb603a12fe675c4","filename":"serp/src/main/java/serp/bytecode/FieldInstruction.java","status":"modified","additions":128,"deletions":211,"changes":339,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/FieldInstruction.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/FieldInstruction.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/main/java/serp/bytecode/FieldInstruction.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"dad9f1cbd1fdb829307143e8ca78762dde628483","filename":"serp/src/main/java/serp/bytecode/GetFieldInstruction.java","status":"modified","additions":11,"deletions":24,"changes":35,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/GetFieldInstruction.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/GetFieldInstruction.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/main/java/serp/bytecode/GetFieldInstruction.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"5d45706c561117489114d6da89ed42b365ebdd75","filename":"serp/src/main/java/serp/bytecode/IIncInstruction.java","status":"modified","additions":17,"deletions":29,"changes":46,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/IIncInstruction.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/IIncInstruction.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/main/java/serp/bytecode/IIncInstruction.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"386d4a89b46402be285524bfe064d8885349ee8a","filename":"serp/src/main/java/serp/bytecode/IfInstruction.java","status":"modified","additions":6,"deletions":14,"changes":20,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/IfInstruction.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/IfInstruction.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/main/java/serp/bytecode/IfInstruction.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"976b6c63074da7306e38a799ce401cc55cc4a798","filename":"serp/src/main/java/serp/bytecode/InnerClass.java","status":"modified","additions":105,"deletions":137,"changes":242,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/InnerClass.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/InnerClass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/main/java/serp/bytecode/InnerClass.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"bb3196b97909a01155103b410d7bf072e0ae3409","filename":"serp/src/main/java/serp/bytecode/InnerClasses.java","status":"modified","additions":57,"deletions":84,"changes":141,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/InnerClasses.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/InnerClasses.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/main/java/serp/bytecode/InnerClasses.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"65d5d16bbdb2fffd6ed4890e5ff6f1380bc094b1","filename":"serp/src/main/java/serp/bytecode/Instruction.java","status":"modified","additions":44,"deletions":59,"changes":103,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/Instruction.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/Instruction.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/main/java/serp/bytecode/Instruction.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"b3c62fea333b4c9d28b5ca6094b70d79046c6506","filename":"serp/src/main/java/serp/bytecode/InstructionPtr.java","status":"modified","additions":16,"deletions":20,"changes":36,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/InstructionPtr.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/InstructionPtr.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/main/java/serp/bytecode/InstructionPtr.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"3e70ad9b6b059279c2d885640429c65eac6a49f2","filename":"serp/src/main/java/serp/bytecode/InstructionPtrStrategy.java","status":"modified","additions":32,"deletions":44,"changes":76,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/InstructionPtrStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/InstructionPtrStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/main/java/serp/bytecode/InstructionPtrStrategy.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"3c994154bb359b253eeea1ee50bc5e7ac251f8db","filename":"serp/src/main/java/serp/bytecode/JumpInstruction.java","status":"modified","additions":24,"deletions":51,"changes":75,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/JumpInstruction.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/JumpInstruction.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/main/java/serp/bytecode/JumpInstruction.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"6ff79b69ed88da8b1f72926a241aa338d1d18935","filename":"serp/src/main/java/serp/bytecode/LineNumber.java","status":"modified","additions":23,"deletions":35,"changes":58,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/LineNumber.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/LineNumber.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/main/java/serp/bytecode/LineNumber.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"4d4a2c50ab29612f21106254a492ffd0ba890b2f","filename":"serp/src/main/java/serp/bytecode/LineNumberTable.java","status":"modified","additions":43,"deletions":65,"changes":108,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/LineNumberTable.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/LineNumberTable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/main/java/serp/bytecode/LineNumberTable.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"e2bf292fae55730ea8050932d0d0b1cbf319bf49","filename":"serp/src/main/java/serp/bytecode/LoadInstruction.java","status":"modified","additions":37,"deletions":75,"changes":112,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/LoadInstruction.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/LoadInstruction.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/main/java/serp/bytecode/LoadInstruction.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"5dfd4f62693b07ad2635a9111427d8c3d44a78fc","filename":"serp/src/main/java/serp/bytecode/Local.java","status":"modified","additions":47,"deletions":57,"changes":104,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/Local.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/Local.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/main/java/serp/bytecode/Local.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"c5fcbb50f4f5d9b28cf0ce1faa666e56e2a88d92","filename":"serp/src/main/java/serp/bytecode/LocalTable.java","status":"modified","additions":47,"deletions":74,"changes":121,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/LocalTable.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/LocalTable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/main/java/serp/bytecode/LocalTable.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"26ef8c61a86c10d2ef33348509d11a0adbe9388e","filename":"serp/src/main/java/serp/bytecode/LocalVariable.java","status":"modified","additions":21,"deletions":34,"changes":55,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/LocalVariable.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/LocalVariable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/main/java/serp/bytecode/LocalVariable.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"d5ac0666b4ea9666fd4f0dbc631b1bc44a5d1dc1","filename":"serp/src/main/java/serp/bytecode/LocalVariableInstruction.java","status":"modified","additions":44,"deletions":66,"changes":110,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/LocalVariableInstruction.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/LocalVariableInstruction.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/main/java/serp/bytecode/LocalVariableInstruction.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"6e4f078110b7a2de5feddcb2a405b811693e1193","filename":"serp/src/main/java/serp/bytecode/LocalVariableTable.java","status":"modified","additions":27,"deletions":34,"changes":61,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/LocalVariableTable.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/LocalVariableTable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/main/java/serp/bytecode/LocalVariableTable.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"2718a678c779471b23c0288dffce960e560b0319","filename":"serp/src/main/java/serp/bytecode/LocalVariableType.java","status":"modified","additions":9,"deletions":13,"changes":22,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/LocalVariableType.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/LocalVariableType.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/main/java/serp/bytecode/LocalVariableType.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"2472385172991f716750434a7311878a424f6a6c","filename":"serp/src/main/java/serp/bytecode/LocalVariableTypeTable.java","status":"modified","additions":25,"deletions":30,"changes":55,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/LocalVariableTypeTable.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/LocalVariableTypeTable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/main/java/serp/bytecode/LocalVariableTypeTable.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"2ac202a1c34f9ae7415009eb5cd953589c99d2c6","filename":"serp/src/main/java/serp/bytecode/LookupSwitchInstruction.java","status":"modified","additions":46,"deletions":70,"changes":116,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/LookupSwitchInstruction.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/LookupSwitchInstruction.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/main/java/serp/bytecode/LookupSwitchInstruction.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"9f431c23de512a4626b1121e65630cde81fe3bdd","filename":"serp/src/main/java/serp/bytecode/MathInstruction.java","status":"modified","additions":42,"deletions":85,"changes":127,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/MathInstruction.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/MathInstruction.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/main/java/serp/bytecode/MathInstruction.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"55cd8ab6e5260c6ab3e9f0762e7a5867386a948e","filename":"serp/src/main/java/serp/bytecode/MethodInstruction.java","status":"modified","additions":190,"deletions":315,"changes":505,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/MethodInstruction.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/MethodInstruction.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/main/java/serp/bytecode/MethodInstruction.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"49f31be237c7fade03c3ca4931804fdc139ed8b6","filename":"serp/src/main/java/serp/bytecode/MonitorEnterInstruction.java","status":"modified","additions":7,"deletions":12,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/MonitorEnterInstruction.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/MonitorEnterInstruction.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/main/java/serp/bytecode/MonitorEnterInstruction.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"fe59826781a04f46aa1642d091b2f5245ae1bd29","filename":"serp/src/main/java/serp/bytecode/MonitorExitInstruction.java","status":"modified","additions":6,"deletions":10,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/MonitorExitInstruction.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/MonitorExitInstruction.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/main/java/serp/bytecode/MonitorExitInstruction.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"bd39f61bcebdd5cd6b215439bfe141d3ba5a3674","filename":"serp/src/main/java/serp/bytecode/MonitorInstruction.java","status":"modified","additions":6,"deletions":10,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/MonitorInstruction.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/MonitorInstruction.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/main/java/serp/bytecode/MonitorInstruction.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"4cf374392da7b016f0d9a3d33dc1746b3ec66728","filename":"serp/src/main/java/serp/bytecode/MultiANewArrayInstruction.java","status":"modified","additions":18,"deletions":31,"changes":49,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/MultiANewArrayInstruction.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/MultiANewArrayInstruction.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/main/java/serp/bytecode/MultiANewArrayInstruction.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"0dee43b36ac2b6d6014c4dca4528614bdc85e0b7","filename":"serp/src/main/java/serp/bytecode/NameCache.java","status":"modified","additions":58,"deletions":108,"changes":166,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/NameCache.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/NameCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/main/java/serp/bytecode/NameCache.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"fecff5c212fc5a9e143835e8efece95e4d5a6768","filename":"serp/src/main/java/serp/bytecode/NewArrayInstruction.java","status":"modified","additions":21,"deletions":53,"changes":74,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/NewArrayInstruction.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/NewArrayInstruction.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/main/java/serp/bytecode/NewArrayInstruction.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"f54514b603f43ad7f883f2f2310024da9d868f51","filename":"serp/src/main/java/serp/bytecode/ObjectState.java","status":"modified","additions":15,"deletions":22,"changes":37,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/ObjectState.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/ObjectState.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/main/java/serp/bytecode/ObjectState.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"70730e0c57a0d827ca33086b62705115d834b7f8","filename":"serp/src/main/java/serp/bytecode/PrimitiveState.java","status":"modified","additions":7,"deletions":12,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/PrimitiveState.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/PrimitiveState.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/main/java/serp/bytecode/PrimitiveState.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"791945c104c72fedf7b6a90baec68fef503014c8","filename":"serp/src/main/java/serp/bytecode/Project.java","status":"modified","additions":129,"deletions":182,"changes":311,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/Project.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/Project.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/main/java/serp/bytecode/Project.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"2ee26937f086995ba919b8973e9882f6f9525cb6","filename":"serp/src/main/java/serp/bytecode/PutFieldInstruction.java","status":"modified","additions":12,"deletions":27,"changes":39,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/PutFieldInstruction.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/PutFieldInstruction.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/main/java/serp/bytecode/PutFieldInstruction.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"d3ff7608781e9ab8080970ed872f2b71af9c87b3","filename":"serp/src/main/java/serp/bytecode/RetInstruction.java","status":"modified","additions":9,"deletions":19,"changes":28,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/RetInstruction.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/RetInstruction.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/main/java/serp/bytecode/RetInstruction.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"4a5493be40c97bd105a125a5a5d6668af3b27866","filename":"serp/src/main/java/serp/bytecode/ReturnInstruction.java","status":"modified","additions":17,"deletions":42,"changes":59,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/ReturnInstruction.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/ReturnInstruction.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/main/java/serp/bytecode/ReturnInstruction.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"b14215d3c705cf87463bedcc7d0f91a2c78fe806","filename":"serp/src/main/java/serp/bytecode/SourceFile.java","status":"modified","additions":29,"deletions":45,"changes":74,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/SourceFile.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/SourceFile.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/main/java/serp/bytecode/SourceFile.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"7fcd5980afba1d6452393dbdf785d47362e28f2c","filename":"serp/src/main/java/serp/bytecode/StackInstruction.java","status":"modified","additions":29,"deletions":80,"changes":109,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/StackInstruction.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/StackInstruction.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/main/java/serp/bytecode/StackInstruction.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"31882644b22aed07910dd9db54c1b89ecae15ca8","filename":"serp/src/main/java/serp/bytecode/State.java","status":"modified","additions":51,"deletions":56,"changes":107,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/State.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/State.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/main/java/serp/bytecode/State.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"745bf2aba98e2927c7e82411a47c6f9549b61b83","filename":"serp/src/main/java/serp/bytecode/StoreInstruction.java","status":"modified","additions":28,"deletions":68,"changes":96,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/StoreInstruction.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/StoreInstruction.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/main/java/serp/bytecode/StoreInstruction.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"cb0ff8b35f08caf8ac79ddaf5bf9309b0dbb303a","filename":"serp/src/main/java/serp/bytecode/SwitchInstruction.java","status":"modified","additions":51,"deletions":73,"changes":124,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/SwitchInstruction.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/SwitchInstruction.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/main/java/serp/bytecode/SwitchInstruction.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"df18bca74c31555d9f3b2cbb1382ee89e0399fbb","filename":"serp/src/main/java/serp/bytecode/Synthetic.java","status":"modified","additions":7,"deletions":11,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/Synthetic.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/Synthetic.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/main/java/serp/bytecode/Synthetic.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"131c3e17dbe3c40bf7c96f009f57b1f6da7240a2","filename":"serp/src/main/java/serp/bytecode/TableSwitchInstruction.java","status":"modified","additions":51,"deletions":77,"changes":128,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/TableSwitchInstruction.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/TableSwitchInstruction.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/main/java/serp/bytecode/TableSwitchInstruction.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"9e0ad5e671d23ef66caa03341964ac235623b722","filename":"serp/src/main/java/serp/bytecode/TypedInstruction.java","status":"modified","additions":42,"deletions":66,"changes":108,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/TypedInstruction.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/TypedInstruction.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/main/java/serp/bytecode/TypedInstruction.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"b66eed948fb425b403ce74a7ce22fc4757350a1b","filename":"serp/src/main/java/serp/bytecode/UnknownAttribute.java","status":"modified","additions":11,"deletions":18,"changes":29,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/UnknownAttribute.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/UnknownAttribute.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/main/java/serp/bytecode/UnknownAttribute.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"5e325a5554d488465b74778ce2fed912e55e96d3","filename":"serp/src/main/java/serp/bytecode/WideInstruction.java","status":"modified","additions":86,"deletions":142,"changes":228,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/WideInstruction.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/WideInstruction.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/main/java/serp/bytecode/WideInstruction.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"ae311ab8f3dc5162ec094938e1ed2a76b7e9a91a","filename":"serp/src/main/java/serp/bytecode/lowlevel/ClassEntry.java","status":"modified","additions":23,"deletions":28,"changes":51,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/lowlevel/ClassEntry.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/lowlevel/ClassEntry.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/main/java/serp/bytecode/lowlevel/ClassEntry.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"01d244839242c59617e96b8843ae42b13155f05a","filename":"serp/src/main/java/serp/bytecode/lowlevel/ComplexEntry.java","status":"modified","additions":30,"deletions":36,"changes":66,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/lowlevel/ComplexEntry.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/lowlevel/ComplexEntry.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/main/java/serp/bytecode/lowlevel/ComplexEntry.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"2ee1e9df297446c6bbbf665b57eca62ef7f426b1","filename":"serp/src/main/java/serp/bytecode/lowlevel/ConstantEntry.java","status":"modified","additions":9,"deletions":13,"changes":22,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/lowlevel/ConstantEntry.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/lowlevel/ConstantEntry.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/main/java/serp/bytecode/lowlevel/ConstantEntry.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"75d0c9671e940ae35eba91d4ec1fbc3aff192292","filename":"serp/src/main/java/serp/bytecode/lowlevel/ConstantPool.java","status":"modified","additions":171,"deletions":290,"changes":461,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/lowlevel/ConstantPool.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/lowlevel/ConstantPool.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/main/java/serp/bytecode/lowlevel/ConstantPool.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"6789ddf5b09be3cc0dc622be4781bd2824b471e0","filename":"serp/src/main/java/serp/bytecode/lowlevel/ConstantPoolTable.java","status":"modified","additions":47,"deletions":67,"changes":114,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/lowlevel/ConstantPoolTable.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/lowlevel/ConstantPoolTable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/main/java/serp/bytecode/lowlevel/ConstantPoolTable.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"6bc0cd329b6a86425f2f4942c0e07f8323f38e08","filename":"serp/src/main/java/serp/bytecode/lowlevel/DoubleEntry.java","status":"modified","additions":13,"deletions":18,"changes":31,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/lowlevel/DoubleEntry.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/lowlevel/DoubleEntry.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/main/java/serp/bytecode/lowlevel/DoubleEntry.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"12c590f85d391bc11aaf8d97693e2f617e50a20b","filename":"serp/src/main/java/serp/bytecode/lowlevel/Entry.java","status":"modified","additions":31,"deletions":54,"changes":85,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/lowlevel/Entry.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/lowlevel/Entry.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/main/java/serp/bytecode/lowlevel/Entry.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"ee830f160e7a46b95ea0ae9fad51105cd396d0fc","filename":"serp/src/main/java/serp/bytecode/lowlevel/FieldEntry.java","status":"modified","additions":11,"deletions":16,"changes":27,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/lowlevel/FieldEntry.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/lowlevel/FieldEntry.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/main/java/serp/bytecode/lowlevel/FieldEntry.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"6776edb1f85944fcc2f12077aeb0e629c14ebf18","filename":"serp/src/main/java/serp/bytecode/lowlevel/FloatEntry.java","status":"modified","additions":15,"deletions":20,"changes":35,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/lowlevel/FloatEntry.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/lowlevel/FloatEntry.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/main/java/serp/bytecode/lowlevel/FloatEntry.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"70a2e044b54e9c10db6a10379498de3b20b0e2ab","filename":"serp/src/main/java/serp/bytecode/lowlevel/IntEntry.java","status":"modified","additions":13,"deletions":19,"changes":32,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/lowlevel/IntEntry.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/lowlevel/IntEntry.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/main/java/serp/bytecode/lowlevel/IntEntry.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"6417831b76d1e3fd035ac5b6b97afa3ff7daa4af","filename":"serp/src/main/java/serp/bytecode/lowlevel/InterfaceMethodEntry.java","status":"modified","additions":11,"deletions":16,"changes":27,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/lowlevel/InterfaceMethodEntry.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/lowlevel/InterfaceMethodEntry.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/main/java/serp/bytecode/lowlevel/InterfaceMethodEntry.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"84fa3156296e168d5e97d04732afba2bcaf0e74a","filename":"serp/src/main/java/serp/bytecode/lowlevel/LongEntry.java","status":"modified","additions":13,"deletions":19,"changes":32,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/lowlevel/LongEntry.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/lowlevel/LongEntry.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/main/java/serp/bytecode/lowlevel/LongEntry.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"5ee4693a4094fde247bd04c87dcdadef754a5c88","filename":"serp/src/main/java/serp/bytecode/lowlevel/MethodEntry.java","status":"modified","additions":11,"deletions":16,"changes":27,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/lowlevel/MethodEntry.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/lowlevel/MethodEntry.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/main/java/serp/bytecode/lowlevel/MethodEntry.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"39aacaa04d4b5a9af22b15b3a1997048a291f9cd","filename":"serp/src/main/java/serp/bytecode/lowlevel/NameAndTypeEntry.java","status":"modified","additions":29,"deletions":36,"changes":65,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/lowlevel/NameAndTypeEntry.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/lowlevel/NameAndTypeEntry.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/main/java/serp/bytecode/lowlevel/NameAndTypeEntry.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"438d8c032c69db1f8ceddac7882ed9547a3d7d08","filename":"serp/src/main/java/serp/bytecode/lowlevel/StringEntry.java","status":"modified","additions":20,"deletions":25,"changes":45,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/lowlevel/StringEntry.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/lowlevel/StringEntry.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/main/java/serp/bytecode/lowlevel/StringEntry.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"5b3a696b66a0cdae01b87a6b817d62753ff62cca","filename":"serp/src/main/java/serp/bytecode/lowlevel/UTF8Entry.java","status":"modified","additions":14,"deletions":20,"changes":34,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/lowlevel/UTF8Entry.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/lowlevel/UTF8Entry.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/main/java/serp/bytecode/lowlevel/UTF8Entry.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"501fdff0d872967706b93641e4dc87f5fda2b83f","filename":"serp/src/main/java/serp/bytecode/visitor/BCVisitor.java","status":"modified","additions":17,"deletions":23,"changes":40,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/visitor/BCVisitor.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/visitor/BCVisitor.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/main/java/serp/bytecode/visitor/BCVisitor.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"50c4c1abab86be6a21ee943505690717d4d962bb","filename":"serp/src/main/java/serp/bytecode/visitor/PrettyPrintVisitor.java","status":"modified","additions":63,"deletions":92,"changes":155,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/visitor/PrettyPrintVisitor.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/visitor/PrettyPrintVisitor.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/main/java/serp/bytecode/visitor/PrettyPrintVisitor.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"d26a56d5569afebe5839a63588df8b3201d7b4be","filename":"serp/src/main/java/serp/bytecode/visitor/VisitAcceptor.java","status":"modified","additions":13,"deletions":16,"changes":29,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/visitor/VisitAcceptor.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/bytecode/visitor/VisitAcceptor.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/main/java/serp/bytecode/visitor/VisitAcceptor.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"06817fe8576a8551657e35f966d96d206324143f","filename":"serp/src/main/java/serp/util/Numbers.java","status":"modified","additions":14,"deletions":28,"changes":42,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/util/Numbers.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/util/Numbers.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/main/java/serp/util/Numbers.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"9cd24ab47cd0d51cb71674e9d25bb06d45235e36","filename":"serp/src/main/java/serp/util/Strings.java","status":"modified","additions":111,"deletions":206,"changes":317,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/util/Strings.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/main/java/serp/util/Strings.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/main/java/serp/util/Strings.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"a5adae2e6e486239ef0d03a4b47761586c2ead43","filename":"serp/src/test/java/serp/bytecode/AbstractStateTest.java","status":"modified","additions":17,"deletions":33,"changes":50,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/test/java/serp/bytecode/AbstractStateTest.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/test/java/serp/bytecode/AbstractStateTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/test/java/serp/bytecode/AbstractStateTest.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"bd67014b0e6279c0aafe70aedc2e81a83cd8b8ae","filename":"serp/src/test/java/serp/bytecode/TestArray.java","status":"modified","additions":6,"deletions":13,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/test/java/serp/bytecode/TestArray.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/test/java/serp/bytecode/TestArray.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/test/java/serp/bytecode/TestArray.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"a7b92a6176fa33b0ff2c8010231d69d2da3d7143","filename":"serp/src/test/java/serp/bytecode/TestArrayLoadInstruction.java","status":"modified","additions":10,"deletions":15,"changes":25,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/test/java/serp/bytecode/TestArrayLoadInstruction.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/test/java/serp/bytecode/TestArrayLoadInstruction.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/test/java/serp/bytecode/TestArrayLoadInstruction.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"f80acd368bccc4a35bfa63479eebfe142d94c854","filename":"serp/src/test/java/serp/bytecode/TestArrayStoreInstruction.java","status":"modified","additions":11,"deletions":15,"changes":26,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/test/java/serp/bytecode/TestArrayStoreInstruction.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/test/java/serp/bytecode/TestArrayStoreInstruction.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/test/java/serp/bytecode/TestArrayStoreInstruction.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"dbd2399211f1427518b895148ab5fdc50f47f7d1","filename":"serp/src/test/java/serp/bytecode/TestAttributes.java","status":"modified","additions":31,"deletions":30,"changes":61,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/test/java/serp/bytecode/TestAttributes.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/test/java/serp/bytecode/TestAttributes.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/test/java/serp/bytecode/TestAttributes.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"420709a2cca8d3d4afc5ccb8a24c7ff22e7d0a81","filename":"serp/src/test/java/serp/bytecode/TestBCClass.java","status":"modified","additions":25,"deletions":35,"changes":60,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/test/java/serp/bytecode/TestBCClass.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/test/java/serp/bytecode/TestBCClass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/test/java/serp/bytecode/TestBCClass.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"683408149d1d195d93aa02afb70070d5acb39228","filename":"serp/src/test/java/serp/bytecode/TestCode.java","status":"modified","additions":9,"deletions":17,"changes":26,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/test/java/serp/bytecode/TestCode.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/test/java/serp/bytecode/TestCode.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/test/java/serp/bytecode/TestCode.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"76738d208b41a07362b940bab086151f3216140a","filename":"serp/src/test/java/serp/bytecode/TestConstantInstruction.java","status":"modified","additions":15,"deletions":18,"changes":33,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/test/java/serp/bytecode/TestConstantInstruction.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/test/java/serp/bytecode/TestConstantInstruction.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/test/java/serp/bytecode/TestConstantInstruction.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"98a1cdd79dd9ca6527190370ca12f7d39fd59d77","filename":"serp/src/test/java/serp/bytecode/TestConvertInstruction.java","status":"modified","additions":7,"deletions":12,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/test/java/serp/bytecode/TestConvertInstruction.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/test/java/serp/bytecode/TestConvertInstruction.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/test/java/serp/bytecode/TestConvertInstruction.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"db92388fba758ad5b0bfd9d2a2fa992d23e13f44","filename":"serp/src/test/java/serp/bytecode/TestLoadInstruction.java","status":"modified","additions":10,"deletions":15,"changes":25,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/test/java/serp/bytecode/TestLoadInstruction.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/test/java/serp/bytecode/TestLoadInstruction.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/test/java/serp/bytecode/TestLoadInstruction.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"7aed2fd426a7b3feb3bb02c39d60496697f908d9","filename":"serp/src/test/java/serp/bytecode/TestMathInstruction.java","status":"modified","additions":10,"deletions":15,"changes":25,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/test/java/serp/bytecode/TestMathInstruction.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/test/java/serp/bytecode/TestMathInstruction.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/test/java/serp/bytecode/TestMathInstruction.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"25c31d384e6901be2f059548c54e66ad60102941","filename":"serp/src/test/java/serp/bytecode/TestNameCache.java","status":"modified","additions":65,"deletions":69,"changes":134,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/test/java/serp/bytecode/TestNameCache.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/test/java/serp/bytecode/TestNameCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/test/java/serp/bytecode/TestNameCache.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"f8877ef5bdd1f5442e07b0ba876779b7ae2793f0","filename":"serp/src/test/java/serp/bytecode/TestPrimitive.java","status":"modified","additions":6,"deletions":13,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/test/java/serp/bytecode/TestPrimitive.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/test/java/serp/bytecode/TestPrimitive.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/test/java/serp/bytecode/TestPrimitive.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"e02844df9c8ac9e4ad70440d6952cb5825f5df39","filename":"serp/src/test/java/serp/bytecode/TestProject.java","status":"modified","additions":34,"deletions":54,"changes":88,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/test/java/serp/bytecode/TestProject.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/test/java/serp/bytecode/TestProject.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/test/java/serp/bytecode/TestProject.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"b8ecb162b520de6618fe943eb94cc0441195196a","filename":"serp/src/test/java/serp/bytecode/TestStoreInstruction.java","status":"modified","additions":10,"deletions":15,"changes":25,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/test/java/serp/bytecode/TestStoreInstruction.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/test/java/serp/bytecode/TestStoreInstruction.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/test/java/serp/bytecode/TestStoreInstruction.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"bb0b954ec609cb95ce5ba4e531acc947a5a92aa8","filename":"serp/src/test/java/serp/bytecode/lowlevel/TestConstantPool.java","status":"modified","additions":46,"deletions":53,"changes":99,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/test/java/serp/bytecode/lowlevel/TestConstantPool.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/test/java/serp/bytecode/lowlevel/TestConstantPool.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/test/java/serp/bytecode/lowlevel/TestConstantPool.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"},{"sha":"22259bfd96167127091072778e17298cc612451a","filename":"serp/src/test/java/serp/util/TestStrings.java","status":"modified","additions":18,"deletions":22,"changes":40,"blob_url":"https://github.com/apache/openjpa/blob/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/test/java/serp/util/TestStrings.java","raw_url":"https://github.com/apache/openjpa/raw/bf8ffa5ced5bda9a67d87fc43bd4336509112e74/serp/src/test/java/serp/util/TestStrings.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/serp/src/test/java/serp/util/TestStrings.java?ref=bf8ffa5ced5bda9a67d87fc43bd4336509112e74"}]}

