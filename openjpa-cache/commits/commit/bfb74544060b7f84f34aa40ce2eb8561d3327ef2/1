{"sha":"bfb74544060b7f84f34aa40ce2eb8561d3327ef2","node_id":"MDY6Q29tbWl0MjA2MzY0OmJmYjc0NTQ0MDYwYjdmODRmMzRhYTQwY2UyZWI4NTYxZDMzMjdlZjI=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-07-02T14:06:54Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-07-02T14:06:54Z"},"message":"OPENJPA-648 committing patch provided by Jeremy Bauer\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@673400 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4f5f3276b43c5ff9fc257e77522ed7e97477ea1e","url":"https://api.github.com/repos/apache/openjpa/git/trees/4f5f3276b43c5ff9fc257e77522ed7e97477ea1e"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/bfb74544060b7f84f34aa40ce2eb8561d3327ef2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/bfb74544060b7f84f34aa40ce2eb8561d3327ef2","html_url":"https://github.com/apache/openjpa/commit/bfb74544060b7f84f34aa40ce2eb8561d3327ef2","comments_url":"https://api.github.com/repos/apache/openjpa/commits/bfb74544060b7f84f34aa40ce2eb8561d3327ef2/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"81163a320e7b441282836f148a1c65fc7da8b97c","url":"https://api.github.com/repos/apache/openjpa/commits/81163a320e7b441282836f148a1c65fc7da8b97c","html_url":"https://github.com/apache/openjpa/commit/81163a320e7b441282836f148a1c65fc7da8b97c"}],"stats":{"total":294,"additions":283,"deletions":11},"files":[{"sha":"59178a57cd0d58d26f11d09e5effa27426795db3","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/TableJDBCSeq.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/bfb74544060b7f84f34aa40ce2eb8561d3327ef2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/TableJDBCSeq.java","raw_url":"https://github.com/apache/openjpa/raw/bfb74544060b7f84f34aa40ce2eb8561d3327ef2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/TableJDBCSeq.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/TableJDBCSeq.java?ref=bfb74544060b7f84f34aa40ce2eb8561d3327ef2","patch":"@@ -552,8 +552,10 @@ public String resolveTableName(ClassMapping mapping, Table table) {\n         String tableName;\n         if (sName == null)\n             tableName = table.getFullName();\n+        else if (table.getSchemaName() != null)\n+            tableName = table.getFullName();\n         else\n-            tableName = sName + \".\" + table.getFullName();\n+            tableName = sName + \".\" + table.getName();\n         return tableName;\n     }\n "},{"sha":"7e30bcce996192a7ad650146eeb661207aef6ff5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/DogTable3.java","status":"added","additions":87,"deletions":0,"changes":87,"blob_url":"https://github.com/apache/openjpa/blob/bfb74544060b7f84f34aa40ce2eb8561d3327ef2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/DogTable3.java","raw_url":"https://github.com/apache/openjpa/raw/bfb74544060b7f84f34aa40ce2eb8561d3327ef2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/DogTable3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/DogTable3.java?ref=bfb74544060b7f84f34aa40ce2eb8561d3327ef2","patch":"@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.generationtype;\n+\n+import java.io.*;\n+import javax.persistence.*;\n+\n+/**\n+ * Extension of Animal class illustrating inheritance.\n+ */\n+@Entity(name = \"DogTable3\")\n+@Table(name = \"DOGTABLES\", schema = \"SCHEMA3\")\n+public class DogTable3 implements Serializable\n+\n+{\n+    @Id\n+    @TableGenerator(name = \"Dog_Gen3\", table = \"ID_Gen3\", schema=\"SCHEMA3G\",\n+            pkColumnName = \"GEN_NAME\", valueColumnName = \"GEN_VAL\", \n+            pkColumnValue = \"ID2\", initialValue = 100, allocationSize = 10)\n+    @GeneratedValue(strategy = GenerationType.TABLE, generator = \"Dog_Gen3\")\n+    private int id2;\n+\n+    private String name;\n+\n+    private float price;\n+\n+    private boolean domestic;\n+\n+    public DogTable3() {\n+        super();\n+\n+    }\n+\n+    public DogTable3(String name) {\n+        this.name = name;\n+\n+    }\n+\n+    public int getId2() {\n+        return id2;\n+    }\n+\n+    public void setId2(int id) {\n+        this.id2 = id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public float getPrice() {\n+        return price;\n+    }\n+\n+    public void setPrice(float price) {\n+\n+        this.price = price;\n+    }\n+\n+    public boolean isDomestic() {\n+        return domestic;\n+    }\n+\n+    public void setDomestic(boolean domestic) {\n+        this.domestic = domestic;\n+    }\n+}"},{"sha":"68009ba387b4138b037098e7992a654bf7a7cc30","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/DogTable4.java","status":"added","additions":87,"deletions":0,"changes":87,"blob_url":"https://github.com/apache/openjpa/blob/bfb74544060b7f84f34aa40ce2eb8561d3327ef2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/DogTable4.java","raw_url":"https://github.com/apache/openjpa/raw/bfb74544060b7f84f34aa40ce2eb8561d3327ef2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/DogTable4.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/DogTable4.java?ref=bfb74544060b7f84f34aa40ce2eb8561d3327ef2","patch":"@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.generationtype;\n+\n+import java.io.*;\n+import javax.persistence.*;\n+\n+/**\n+ * Extension of Animal class illustrating inheritance.\n+ */\n+@Entity(name = \"DogTable4\")\n+@Table(name = \"DOGTABLES4\")\n+public class DogTable4 implements Serializable\n+\n+{\n+    @Id\n+    @TableGenerator(name = \"Dog_Gen4\", table = \"ID_Gen4\", schema=\"SCHEMA4G\",\n+            pkColumnName = \"GEN_NAME\", valueColumnName = \"GEN_VAL\", \n+            pkColumnValue = \"ID2\", initialValue = 100, allocationSize = 10)\n+    @GeneratedValue(strategy = GenerationType.TABLE, generator = \"Dog_Gen4\")\n+    private int id2;\n+\n+    private String name;\n+\n+    private float price;\n+\n+    private boolean domestic;\n+\n+    public DogTable4() {\n+        super();\n+\n+    }\n+\n+    public DogTable4(String name) {\n+        this.name = name;\n+\n+    }\n+\n+    public int getId2() {\n+        return id2;\n+    }\n+\n+    public void setId2(int id) {\n+        this.id2 = id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public float getPrice() {\n+        return price;\n+    }\n+\n+    public void setPrice(float price) {\n+\n+        this.price = price;\n+    }\n+\n+    public boolean isDomestic() {\n+        return domestic;\n+    }\n+\n+    public void setDomestic(boolean domestic) {\n+        this.domestic = domestic;\n+    }\n+}"},{"sha":"57486898e8a60f60048fe4ec4a56b28085508f22","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestMultipleSchemaNames.java","status":"modified","additions":106,"deletions":10,"changes":116,"blob_url":"https://github.com/apache/openjpa/blob/bfb74544060b7f84f34aa40ce2eb8561d3327ef2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestMultipleSchemaNames.java","raw_url":"https://github.com/apache/openjpa/raw/bfb74544060b7f84f34aa40ce2eb8561d3327ef2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestMultipleSchemaNames.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestMultipleSchemaNames.java?ref=bfb74544060b7f84f34aa40ce2eb8561d3327ef2","patch":"@@ -19,14 +19,19 @@\n package org.apache.openjpa.persistence.generationtype;\n \n import java.util.List;\n+\n import javax.persistence.EntityManager;\n import javax.persistence.Query;\n-import org.apache.openjpa.persistence.*;\n+\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\n import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n \n public class TestMultipleSchemaNames extends SingleEMFTestCase {\n+    @Override\n     public void setUp() {\n-        setUp(Dog1.class, Dog2.class, DogTable.class, DogTable2.class);\n+        setUp(Dog1.class, Dog2.class, DogTable.class, DogTable2.class,\n+                DogTable3.class, DogTable4.class);\n \n         EntityManager em = emf.createEntityManager();\n         em.getTransaction().begin();\n@@ -60,6 +65,22 @@ public void setUp() {\n             em.remove(Obj);\n         }\n \n+        Query qry5 = em.createQuery(\"select d from DogTable3 d\");\n+        List result5 = qry5.getResultList();\n+\n+        for (int index = 0; index < result5.size(); index++) {\n+            DogTable3 Obj = (DogTable3) result5.get(index);\n+            em.remove(Obj);\n+        }\n+\n+        Query qry6 = em.createQuery(\"select d from DogTable4 d\");\n+        List result6 = qry6.getResultList();\n+\n+        for (int index = 0; index < result6.size(); index++) {\n+            DogTable4 Obj = (DogTable4) result6.get(index);\n+            em.remove(Obj);\n+        }\n+\n         Query delschema1 = em\n                 .createNativeQuery(\"delete from schema1.openjpa_sequence_table\");\n         delschema1.executeUpdate();\n@@ -71,8 +92,14 @@ public void setUp() {\n         Query delgentable2 = em\n                 .createNativeQuery(\"delete from schema2.id_gen2\");\n         delgentable2.executeUpdate();\n+        Query delgentable3 = em\n+                .createNativeQuery(\"delete from schema3g.id_gen3\");\n+        Query delgentable4 = em\n+                .createNativeQuery(\"delete from schema4g.id_gen4\");\n+        delgentable4.executeUpdate();\n \n         em.getTransaction().commit();\n+        em.close();\n \n     }\n \n@@ -177,8 +204,30 @@ public void testGeneratedTABLE() {\n         dog2a.setName(\"helloDog4\");\n         dog2a.setPrice(25000);\n         em.persist(dog2a);\n-        em.getTransaction().commit();\n \n+        // add dog3\n+        DogTable3 dog3 = new DogTable3();\n+        dog3.setName(\"helloDog5\");\n+        dog3.setPrice(15001);\n+        em.persist(dog3);\n+\n+        DogTable3 dog3a = new DogTable3();\n+        dog3a.setName(\"helloDog6\");\n+        dog3a.setPrice(25001);\n+        em.persist(dog3a);\n+\n+        // add dog4\n+        DogTable4 dog4 = new DogTable4();\n+        dog4.setName(\"helloDog7\");\n+        dog4.setPrice(15002);\n+        em.persist(dog4);\n+\n+        DogTable4 dog4a = new DogTable4();\n+        dog4a.setName(\"helloDog8\");\n+        dog4a.setPrice(25002);\n+        em.persist(dog4a);\n+        em.getTransaction().commit();        \n+        \n         DogTable dog1x = em.find(DogTable.class, kem.getObjectId(dog1));\n         assertTrue(dog1x.getId2() == 20 || dog1x.getId2() == 21);\n         assertEquals(dog1x.getName(), \"helloDog1\");\n@@ -189,28 +238,53 @@ public void testGeneratedTABLE() {\n         assertEquals(dog11.getName(), \"helloDog2\");\n         dog11.setName(\"Dog2\");\n         dog11.setDomestic(true);\n+        \n         // update dog2\n         DogTable2 dog2x = em.find(DogTable2.class, kem.getObjectId(dog2));\n         assertTrue(dog2x.getId2() == 100 || dog2x.getId2() == 101);\n         assertEquals(dog2x.getName(), \"helloDog3\");\n         dog2x.setName(\"Dog3\");\n         dog2x.setDomestic(true);\n         DogTable2 dog21 = em.find(DogTable2.class, kem.getObjectId(dog2a));\n-        assertTrue(dog2x.getId2() == 100 || dog2x.getId2() == 101);\n+        assertTrue(dog21.getId2() == 100 || dog21.getId2() == 101);\n         assertEquals(dog21.getName(), \"helloDog4\");\n         dog21.setName(\"Dog4\");\n         dog21.setDomestic(true);\n \n+        // update dog3\n+        DogTable3 dog3x = em.find(DogTable3.class, kem.getObjectId(dog3));\n+        assertTrue(dog3x.getId2() == 100 || dog3x.getId2() == 101);\n+        assertEquals(dog3x.getName(), \"helloDog5\");\n+        dog3x.setName(\"Dog5\");\n+        dog3x.setDomestic(true);\n+        DogTable3 dog31 = em.find(DogTable3.class, kem.getObjectId(dog3a));\n+        assertTrue(dog31.getId2() == 100 || dog31.getId2() == 101);\n+        assertEquals(dog31.getName(), \"helloDog6\");\n+        dog31.setName(\"Dog6\");\n+        dog31.setDomestic(true);\n+\n+        // update dog4\n+        DogTable4 dog4x = em.find(DogTable4.class, kem.getObjectId(dog4));\n+        assertTrue(dog4x.getId2() == 100 || dog4x.getId2() == 101);\n+        assertEquals(dog4x.getName(), \"helloDog7\");\n+        dog4x.setName(\"Dog7\");\n+        dog4x.setDomestic(true);\n+        DogTable4 dog41 = em.find(DogTable4.class, kem.getObjectId(dog4a));\n+        assertTrue(dog41.getId2() == 100 || dog41.getId2() == 101);\n+        assertEquals(dog41.getName(), \"helloDog8\");\n+        dog41.setName(\"Dog8\");\n+        dog41.setDomestic(true);\n+\n         // get the update dog name\n \n         em.getTransaction().begin();\n         Query qry1 = em.createQuery(\"select d from DogTable d order by d.name\");\n         List result1 = qry1.getResultList();\n         for (int index = 0; index < result1.size(); index++) {\n-            DogTable dog4 = (DogTable) result1.get(index);\n-            assertTrue(dog4.getId2() == 20 || dog4.getId2() == 21);\n+            DogTable dog1xx = (DogTable) result1.get(index);\n+            assertTrue(dog1xx.getId2() == 20 || dog1xx.getId2() == 21);\n             int j = index + 1;\n-            assertEquals(dog4.getName(), \"Dog\" + j);\n+            assertEquals(dog1xx.getName(), \"Dog\" + j);\n \n         }\n \n@@ -219,10 +293,32 @@ public void testGeneratedTABLE() {\n         List result2 = qry2.getResultList();\n \n         for (int index = 0; index < result2.size(); index++) {\n-            DogTable2 dog5 = (DogTable2) result2.get(index);\n-            assertTrue(dog5.getId2() == 100 || dog5.getId2() == 101);\n+            DogTable2 dog2xx = (DogTable2) result2.get(index);\n+            assertTrue(dog2xx.getId2() == 100 || dog2xx.getId2() == 101);\n             int j = index + 3;\n-            assertEquals(dog5.getName(), \"Dog\" + j);\n+            assertEquals(dog2xx.getName(), \"Dog\" + j);\n+        }\n+\n+        Query qry3 = em\n+                .createQuery(\"select d from DogTable3 d order by d.name\");\n+        List result3 = qry3.getResultList();\n+\n+        for (int index = 0; index < result3.size(); index++) {\n+            DogTable3 dog3xx = (DogTable3) result3.get(index);\n+            assertTrue(dog3xx.getId2() == 100 || dog3xx.getId2() == 101);\n+            int j = index + 5;\n+            assertEquals(dog3xx.getName(), \"Dog\" + j);\n+        }\n+\n+        Query qry4 = em\n+                .createQuery(\"select d from DogTable4 d order by d.name\");\n+        List result4 = qry4.getResultList();\n+\n+        for (int index = 0; index < result4.size(); index++) {\n+            DogTable4 dog4xx = (DogTable4) result4.get(index);\n+            assertTrue(dog4xx.getId2() == 100 || dog4xx.getId2() == 101);\n+            int j = index + 7;\n+            assertEquals(dog4xx.getName(), \"Dog\" + j);\n         }\n \n         em.getTransaction().commit();"}]}

