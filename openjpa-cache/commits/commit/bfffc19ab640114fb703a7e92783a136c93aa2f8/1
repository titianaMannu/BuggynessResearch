{"sha":"bfffc19ab640114fb703a7e92783a136c93aa2f8","node_id":"MDY6Q29tbWl0MjA2MzY0OmJmZmZjMTlhYjY0MDExNGZiNzAzYTdlOTI3ODNhMTM2YzkzYWEyZjg=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-07-21T18:00:18Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-07-21T18:00:18Z"},"message":"OPENJPA-1714 Added Optimistic check as part the logic for setting the default lock mode for named queries in order to retain 1.x behavior. \nOriginal changes made in trunk by Jeremy Bauer\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.x@966333 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5db9d9776e2a4c4aa4d9f6831951ff8c955bafde","url":"https://api.github.com/repos/apache/openjpa/git/trees/5db9d9776e2a4c4aa4d9f6831951ff8c955bafde"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/bfffc19ab640114fb703a7e92783a136c93aa2f8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/bfffc19ab640114fb703a7e92783a136c93aa2f8","html_url":"https://github.com/apache/openjpa/commit/bfffc19ab640114fb703a7e92783a136c93aa2f8","comments_url":"https://api.github.com/repos/apache/openjpa/commits/bfffc19ab640114fb703a7e92783a136c93aa2f8/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"1d667e8d67dfa0f2d730dc121c657b1015f9da3e","url":"https://api.github.com/repos/apache/openjpa/commits/1d667e8d67dfa0f2d730dc121c657b1015f9da3e","html_url":"https://github.com/apache/openjpa/commit/1d667e8d67dfa0f2d730dc121c657b1015f9da3e"}],"stats":{"total":136,"additions":134,"deletions":2},"files":[{"sha":"7710fd51e5e35b88e03b560f53516e3dda489eef","filename":"openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestOptimisticNamedQueryLockMode.java","status":"added","additions":129,"deletions":0,"changes":129,"blob_url":"https://github.com/apache/openjpa/blob/bfffc19ab640114fb703a7e92783a136c93aa2f8/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestOptimisticNamedQueryLockMode.java","raw_url":"https://github.com/apache/openjpa/raw/bfffc19ab640114fb703a7e92783a136c93aa2f8/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestOptimisticNamedQueryLockMode.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestOptimisticNamedQueryLockMode.java?ref=bfffc19ab640114fb703a7e92783a136c93aa2f8","patch":"@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.lockmgr;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.LockModeType;\n+import javax.persistence.Query;\n+\n+import org.apache.openjpa.persistence.FetchPlan;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\n+import org.apache.openjpa.persistence.OpenJPAQuery;\n+import org.apache.openjpa.persistence.TransactionRequiredException;\n+import org.apache.openjpa.persistence.test.AllowFailure;\n+import org.apache.openjpa.persistence.test.SQLListenerTestCase;\n+\n+/**\n+ * Tests whether the lock mode on named query emits a FOR UPDATE clause in target SQL\n+ * query when Optimistic=true (default), with pessimistic lock manager.\n+ */\n+public class TestOptimisticNamedQueryLockMode extends SQLListenerTestCase {\n+    public void setUp() {\n+        super.setUp(CLEAR_TABLES, LockEmployee.class, \n+            \"openjpa.LockManager\", \"pessimistic\"\n+            );\n+    }\n+\n+    /*\n+     * Optimistic=true, but a lock mode specified - assert statement will lock.\n+     */\n+    public void testForUpdateClausePresentInNamedQueryWithLockMode() {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        assertClausePresentInSQL(\"FOR UPDATE\", em.createNamedQuery(\"findEmployeeByIdWithLock\").setParameter(\"id\", 0));\n+        em.getTransaction().rollback();\n+        em.getTransaction().begin();\n+        assertClausePresentInSQL(\"FOR UPDATE\", em.createNamedQuery(\"findEmployeeByIdWithLock\").setParameter(\"id\", 0));\n+        em.getTransaction().rollback();\n+        em.getTransaction().begin();\n+        assertClausePresentInSQL(\"FOR UPDATE\", em.createNamedQuery(\"findEmployeeByIdWithLock\").setParameter(\"id\", 0));\n+        em.getTransaction().rollback();\n+        em.close();\n+    }\n+\n+    /*\n+     * Optimistic=true, but a no lock mode specified - assert statement does not lock.\n+     */\n+    public void testForUpdateClausePresentInQueryWithDefault() {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        assertClauseAbsentInSQL(\"FOR UPDATE\", em.createNamedQuery(\"findEmployeeById\").setParameter(\"id\", 0));\n+        assertClauseAbsentInSQL(\"FOR UPDATE\", em.createNamedQuery(\"findEmployeeById\").setParameter(\"id\", 0));\n+        \n+        OpenJPAEntityManager oem = (OpenJPAEntityManager)em;\n+        OpenJPAQuery<?> q = oem.createNamedQuery(\"findEmployeeById\").setParameter(\"id\", 0); \n+        FetchPlan fp = q.getFetchPlan();\n+        fp.setReadLockMode(LockModeType.NONE);\n+\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+    \n+    /*\n+     * Optimistic=true, lock mode = none set explicitly on the fetch plan.\n+     */\n+    public void testForUpdateClauseAbsentInQueryWithFetchPlanNoneLockMode() {\n+        OpenJPAEntityManagerSPI em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        \n+        OpenJPAQuery<?> q = em.createNamedQuery(\"findEmployeeById\").setParameter(\"id\", 0); \n+        FetchPlan fp = q.getFetchPlan();\n+        fp.setReadLockMode(LockModeType.NONE);\n+        assertClauseAbsentInSQL(\"FOR UPDATE\", q);\n+        \n+        q = em.createNamedQuery(\"findEmployeeByIdWithNoLock\").setParameter(\"id\", 0); \n+        fp = q.getFetchPlan();\n+        fp.setReadLockMode(LockModeType.NONE);\n+        assertClauseAbsentInSQL(\"FOR UPDATE\", q);\n+        \n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+\n+    /*\n+    * Optimistic = false, explicit no locking on the named query\n+    */\n+    public void testForUpdateClauseAbsentInQueryWithExplictNoLock() {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        assertClauseAbsentInSQL(\"FOR UPDATE\", em.createNamedQuery(\"findEmployeeByIdWithNoLock\").setParameter(\"id\", 0));\n+        assertClauseAbsentInSQL(\"FOR UPDATE\", em.createNamedQuery(\"findEmployeeByIdWithNoLock\").setParameter(\"id\", 0));\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+\n+    String getLastSQL() {\n+        String last = sql.get(getSQLCount() - 1);\n+        assertNotNull(\"No last sql found\", last);\n+        return last;\n+    }\n+\n+    void assertClausePresentInSQL(String clause, Query q) {\n+        q.getResultList();\n+        String last = getLastSQL();\n+        assertTrue(clause + \" is not present in \" + last, last.toUpperCase().indexOf(clause) != -1);\n+    }\n+\n+    void assertClauseAbsentInSQL(String clause, Query q) {\n+        q.getResultList();\n+        String last = getLastSQL();\n+        assertTrue(clause + \" is not absent in \" + last, last.toUpperCase().indexOf(clause) == -1);\n+    }\n+}"},{"sha":"862625c39fb68e883a5fbec258fc96dbce1abc71","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/bfffc19ab640114fb703a7e92783a136c93aa2f8/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/bfffc19ab640114fb703a7e92783a136c93aa2f8/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java?ref=bfffc19ab640114fb703a7e92783a136c93aa2f8","patch":"@@ -1848,10 +1848,11 @@ private LockModeType processNamedQueryLockModeType(NamedQuery query) {\n         LockModeType lmt = query.lockMode();\n         if (query.lockMode() != null) {\n             String lm = _conf.getLockManager();\n+            boolean optimistic = _conf.getOptimistic();\n             if (lm != null) {\n                 lm = lm.toLowerCase();\n                 if (lm.contains(\"pessimistic\")) {\n-                    if (lmt == LockModeType.NONE) {\n+                    if (lmt == LockModeType.NONE && !optimistic) {\n                         if (_log.isWarnEnabled() == true) {\n                             _log.warn(_loc.get(\"override-named-query-lock-mode\", new String[] { \"annotation\",\n                                 query.name(), _cls.getName() }));"},{"sha":"32c9bcdb671cdd8c64e5d9099efdc38488c38d09","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/bfffc19ab640114fb703a7e92783a136c93aa2f8/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/bfffc19ab640114fb703a7e92783a136c93aa2f8/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java?ref=bfffc19ab640114fb703a7e92783a136c93aa2f8","patch":"@@ -1708,10 +1708,11 @@ private LockModeType processNamedQueryLockModeType(Log log, String lockModeStrin\n         }\n         LockModeType lmt = LockModeType.valueOf(lockModeString);\n         String lm = _conf.getLockManager();\n+        boolean optimistic = _conf.getOptimistic();\n         if (lm != null) {\n             lm = lm.toLowerCase();\n             if (lm.contains(\"pessimistic\")) {\n-                if (lmt == LockModeType.NONE) {\n+                if (lmt == LockModeType.NONE && !optimistic) {\n                     if (log != null && log.isWarnEnabled() == true) {\n                         log.warn(_loc.get(\"override-named-query-lock-mode\", new String[] { \"xml\", queryName,\n                             _cls.getName() }));\n@@ -1724,6 +1725,7 @@ private LockModeType processNamedQueryLockModeType(Log log, String lockModeStrin\n         return lmt;\n     }\n \n+\n     protected void endNamedQuery()\n         throws SAXException {\n         popElement();"}]}

