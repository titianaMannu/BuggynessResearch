{"sha":"c00f3b5b788775703494a1566be6529d70e4f724","node_id":"MDY6Q29tbWl0MjA2MzY0OmMwMGYzYjViNzg4Nzc1NzAzNDk0YTE1NjZiZTY1MjlkNzBlNGY3MjQ=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2007-12-10T20:16:11Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2007-12-10T20:16:11Z"},"message":"OPENJPA-462: Adding a Test case to verify correct exception type\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@603032 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0a1492ea655aa3dc9badd1f4b67c87160024c266","url":"https://api.github.com/repos/apache/openjpa/git/trees/0a1492ea655aa3dc9badd1f4b67c87160024c266"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/c00f3b5b788775703494a1566be6529d70e4f724","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/c00f3b5b788775703494a1566be6529d70e4f724","html_url":"https://github.com/apache/openjpa/commit/c00f3b5b788775703494a1566be6529d70e4f724","comments_url":"https://api.github.com/repos/apache/openjpa/commits/c00f3b5b788775703494a1566be6529d70e4f724/comments","author":null,"committer":null,"parents":[{"sha":"111098f1b3af2a8cb65618a78eb1bc9b53d6bddb","url":"https://api.github.com/repos/apache/openjpa/commits/111098f1b3af2a8cb65618a78eb1bc9b53d6bddb","html_url":"https://github.com/apache/openjpa/commit/111098f1b3af2a8cb65618a78eb1bc9b53d6bddb"}],"stats":{"total":164,"additions":164,"deletions":0},"files":[{"sha":"f079f9a9b857a5baba61b5e785b31d43236d1f31","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/exception/PObject.java","status":"added","additions":57,"deletions":0,"changes":57,"blob_url":"https://github.com/apache/openjpa/blob/c00f3b5b788775703494a1566be6529d70e4f724/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/exception/PObject.java","raw_url":"https://github.com/apache/openjpa/raw/c00f3b5b788775703494a1566be6529d70e4f724/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/exception/PObject.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/exception/PObject.java?ref=c00f3b5b788775703494a1566be6529d70e4f724","patch":"@@ -0,0 +1,57 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.exception;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.Version;\r\n+\r\n+/**\r\n+ * A Simple entity for testing. Has a version field for testing optimistic\r\n+ * concurrent usage.\r\n+ * \r\n+ * @author Pinaki Poddar\r\n+ *\r\n+ */\r\n+@Entity\r\n+public class PObject {\r\n+\t@Id\r\n+\t@GeneratedValue\r\n+\tprivate long id;\r\n+\tprivate String name;\r\n+\t@Version\r\n+\tprivate int version;\r\n+\t\r\n+\tpublic String getName() {\r\n+\t\treturn name;\r\n+\t}\r\n+\t\r\n+\tpublic void setName(String name) {\r\n+\t\tthis.name = name;\r\n+\t}\r\n+\t\r\n+\tpublic long getId() {\r\n+\t\treturn id;\r\n+\t}\r\n+\t\r\n+\tpublic int getVersion() {\r\n+\t\treturn version;\r\n+\t}\r\n+}\r"},{"sha":"bb587ae3d055d049380a03b8f5b9a3086a22706d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/exception/TestException.java","status":"added","additions":107,"deletions":0,"changes":107,"blob_url":"https://github.com/apache/openjpa/blob/c00f3b5b788775703494a1566be6529d70e4f724/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/exception/TestException.java","raw_url":"https://github.com/apache/openjpa/raw/c00f3b5b788775703494a1566be6529d70e4f724/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/exception/TestException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/exception/TestException.java?ref=c00f3b5b788775703494a1566be6529d70e4f724","patch":"@@ -0,0 +1,107 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.exception;\r\n+\r\n+import java.sql.SQLException;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.OptimisticLockException;\r\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n+\r\n+/**\r\n+ * Tests proper JPA exceptions are raised by the implementation. \r\n+ */\r\n+public class TestException extends SingleEMFTestCase {\r\n+    public void setUp() {\r\n+        super.setUp(PObject.class);\r\n+    }\r\n+    \r\n+\t/**\r\n+\t * Tests that when Optimistic transaction consistency is violated, the\r\n+\t * exception thrown is an instance of javax.persistence.OptimisticException.\r\n+\t */\r\n+\tpublic void testThrowsJPADefinedOptimisticException() {\r\n+\t\tEntityManager em1 = emf.createEntityManager();\r\n+\t\tEntityManager em2 = emf.createEntityManager();\r\n+\t\tassertNotEquals(em1, em2);\r\n+\t\t\r\n+\t\tem1.getTransaction().begin();\r\n+\t\tPObject pc = new PObject();\r\n+\t\tem1.persist(pc);\r\n+\t\tem1.getTransaction().commit();\r\n+\t\tObject id = pc.getId();\r\n+\t\tem1.clear();\r\n+\t\t\r\n+\t\tem1.getTransaction().begin();\r\n+\t\tem2.getTransaction().begin();\r\n+\t\t\r\n+\t\tPObject pc1 = em1.find(PObject.class, id);\r\n+\t\tPObject pc2 = em2.find(PObject.class, id);\r\n+\t\t\r\n+\t\tassertTrue(pc1 != pc2);\r\n+\t\t\r\n+\t\tpc1.setName(\"Modified in TXN1\");\r\n+\t\tem1.flush();\r\n+\t\ttry {\r\n+\t\t\tpc2.setName(\"Modified in TXN2\");\r\n+\t\t\tem2.flush();\r\n+\t\t\tfail(\"Expected optimistic exception on flush\");\r\n+\t\t} catch (Throwable t) {\r\n+\t\t\tif (!isExpectedException(t, OptimisticLockException.class)) {\r\n+\t\t\t\tprint(t);\r\n+\t\t\t\tfail(t.getCause().getClass() + \" is not \" + \r\n+\t\t\t\t\t\tOptimisticLockException.class);\r\n+\t\t\t}\r\n+\t\t}\r\n+\t\t\r\n+\t\tem1.getTransaction().commit();\r\n+\t\ttry {\r\n+\t\t\tem2.getTransaction().commit();\r\n+\t\t\tfail(\"Expected optimistic exception on commit\");\r\n+\t\t} catch (Throwable t) {\r\n+\t\t\tif (!isExpectedException(t, OptimisticLockException.class)) {\r\n+\t\t\t\tprint(t);\r\n+\t\t\t\tfail(t.getCause().getClass() + \" is not \" + \r\n+\t\t\t\t\t\tOptimisticLockException.class);\r\n+\t\t\t}\r\n+\t\t}\r\n+\t}\r\n+\t\r\n+\tboolean isExpectedException(Throwable t, Class expectedType) {\r\n+\t\tif (t == null) return false;\r\n+\t\tif (expectedType.isAssignableFrom(t.getClass()))\r\n+\t\t\t\treturn true;\r\n+\t\tif (t.getCause()==t) return false;\r\n+\t\treturn isExpectedException(t.getCause(), expectedType);\r\n+\t}\r\n+\t\r\n+\tvoid print(Throwable t) {\r\n+\t\tprint(t, 0);\r\n+\t}\r\n+\t\r\n+\tvoid print(Throwable t, int tab) {\r\n+\t\tif (t == null) return;\r\n+\t\tfor (int i=0; i<tab*4;i++) System.out.print(\" \");\r\n+\t\tString sqlState = (t instanceof SQLException) ? \r\n+\t\t\t\"(SQLState=\" + ((SQLException)t).getSQLState() + \":\" + t.getMessage() + \")\":\"\";\r\n+\t\tSystem.out.println(t.getClass().getName() + sqlState);\r\n+\t\tif (t.getCause()==t) return;\r\n+\t\tprint(t.getCause(), tab+1);\r\n+\t}\r\n+}\r"}]}

