{"sha":"c014c925382f115e067fb9265d9c49f96aaf17f9","node_id":"MDY6Q29tbWl0MjA2MzY0OmMwMTRjOTI1MzgyZjExNWUwNjdmYjkyNjVkOWM0OWY5NmFhZjE3Zjk=","commit":{"author":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-08-15T02:24:50Z"},"committer":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-08-15T02:24:50Z"},"message":"Help Catalina committing OPENJPA-313.2.patch\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@566006 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"82a8e6c563e2a2534c4801b0a6538c0941173ef1","url":"https://api.github.com/repos/apache/openjpa/git/trees/82a8e6c563e2a2534c4801b0a6538c0941173ef1"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/c014c925382f115e067fb9265d9c49f96aaf17f9","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/c014c925382f115e067fb9265d9c49f96aaf17f9","html_url":"https://github.com/apache/openjpa/commit/c014c925382f115e067fb9265d9c49f96aaf17f9","comments_url":"https://api.github.com/repos/apache/openjpa/commits/c014c925382f115e067fb9265d9c49f96aaf17f9/comments","author":null,"committer":null,"parents":[{"sha":"e59b9deab9ebe7d077867122e35060a641e24476","url":"https://api.github.com/repos/apache/openjpa/commits/e59b9deab9ebe7d077867122e35060a641e24476","html_url":"https://github.com/apache/openjpa/commit/e59b9deab9ebe7d077867122e35060a641e24476"}],"stats":{"total":39,"additions":37,"deletions":2},"files":[{"sha":"38de37923fa1df122e2b2201a1569935858d2460","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMapping.java","status":"modified","additions":29,"deletions":2,"changes":31,"blob_url":"https://github.com/apache/openjpa/blob/c014c925382f115e067fb9265d9c49f96aaf17f9/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMapping.java","raw_url":"https://github.com/apache/openjpa/raw/c014c925382f115e067fb9265d9c49f96aaf17f9/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMapping.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMapping.java?ref=c014c925382f115e067fb9265d9c49f96aaf17f9","patch":"@@ -30,6 +30,7 @@\n import java.util.Map;\n import java.util.Set;\n \n+import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.meta.strats.NoneClassStrategy;\n@@ -189,8 +190,34 @@ private Object getObjectId(ClassMapping cls, JDBCStore store, Result res,\n             }\n         }\n         Object oid = ApplicationIds.fromPKValues(vals, cls);\n-        if (!subs && oid instanceof OpenJPAId)\n-            ((OpenJPAId) oid).setManagedInstanceType(cls.getDescribedType());\n+        \n+        /**\n+         * For polymorphic relations,\n+         * the type field in the oid is initially set to base type.\n+         * If the discriminator value is preset in the current result,\n+         * then the type field needs reset based on the discriminator value.\n+         * If the discriminator value is not present or invalid,\n+         * ignore any exceptions being thrown.\n+         */        \n+        if (oid instanceof OpenJPAId) {\n+            Class type = cls.getDescribedType();\n+            if (!subs)\n+                // non-polymorphic relations\n+                ((OpenJPAId) oid).setManagedInstanceType(type);\n+            else if (cls.getDiscriminator() != null\n+                && !StringUtils.equals(\"none\",\n+                    cls.getDiscriminator().getStrategy().getAlias())) {\n+                // polymorphic relations\n+                res.startDataRequest(cls.getDiscriminator());\n+                try {\n+                    type = cls.getDiscriminator().getClass(store, cls, res);\n+                    ((OpenJPAId) oid).setManagedInstanceType(type, true);\n+                } catch (Exception e) {\n+                    // intentionally ignored\n+                }\n+                res.endDataRequest();  \n+            } \n+        }\n         return oid;\n     }\n "},{"sha":"2b64a4e35f7b1ea20e71bbd98c1edd4c5750e9d5","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/OpenJPAId.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/c014c925382f115e067fb9265d9c49f96aaf17f9/openjpa-kernel/src/main/java/org/apache/openjpa/util/OpenJPAId.java","raw_url":"https://github.com/apache/openjpa/raw/c014c925382f115e067fb9265d9c49f96aaf17f9/openjpa-kernel/src/main/java/org/apache/openjpa/util/OpenJPAId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/OpenJPAId.java?ref=c014c925382f115e067fb9265d9c49f96aaf17f9","patch":"@@ -77,6 +77,14 @@ public void setManagedInstanceType(Class type) {\n         this.subs = false;\n     }\n \n+    /**\n+     * Set the exact type of the described instance once it is known.\n+     */\n+    public void setManagedInstanceType(Class type, boolean subs) {\n+        this.type = type;\n+        this.subs = subs;\n+    }\n+\n     /**\n      * Return the identity value as an object.\n      */"}]}

