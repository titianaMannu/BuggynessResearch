{"sha":"c06481b4527a8e6903ebe62df9c040171435fbf5","node_id":"MDY6Q29tbWl0MjA2MzY0OmMwNjQ4MWI0NTI3YThlNjkwM2ViZTYyZGY5YzA0MDE3MTQzNWZiZjU=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2009-09-29T18:12:15Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2009-09-29T18:12:15Z"},"message":"OPENJPA-1224. Updated DBDictionary and AbstractDB2Dictionary to properly support java.math.BigDecimal.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@820050 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2d78a111d897d50a93c92ccd82f1a034735f1c6e","url":"https://api.github.com/repos/apache/openjpa/git/trees/2d78a111d897d50a93c92ccd82f1a034735f1c6e"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/c06481b4527a8e6903ebe62df9c040171435fbf5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/c06481b4527a8e6903ebe62df9c040171435fbf5","html_url":"https://github.com/apache/openjpa/commit/c06481b4527a8e6903ebe62df9c040171435fbf5","comments_url":"https://api.github.com/repos/apache/openjpa/commits/c06481b4527a8e6903ebe62df9c040171435fbf5/comments","author":null,"committer":null,"parents":[{"sha":"c8d1003612cd9845c5e6df4f2c27c10d12c02dae","url":"https://api.github.com/repos/apache/openjpa/commits/c8d1003612cd9845c5e6df4f2c27c10d12c02dae","html_url":"https://github.com/apache/openjpa/commit/c8d1003612cd9845c5e6df4f2c27c10d12c02dae"}],"stats":{"total":47,"additions":28,"deletions":19},"files":[{"sha":"6825fb4d96188d7297c205aca38aa22497ace846","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractDB2Dictionary.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/c06481b4527a8e6903ebe62df9c040171435fbf5/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractDB2Dictionary.java","raw_url":"https://github.com/apache/openjpa/raw/c06481b4527a8e6903ebe62df9c040171435fbf5/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractDB2Dictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractDB2Dictionary.java?ref=c06481b4527a8e6903ebe62df9c040171435fbf5","patch":"@@ -29,7 +29,6 @@\n     public int varcharCastLength = 1000;\n \n     public AbstractDB2Dictionary() {\n-        numericTypeName = \"DOUBLE\";\n         bitTypeName = \"SMALLINT\";\n         smallintTypeName = \"SMALLINT\";\n         tinyintTypeName = \"SMALLINT\";"},{"sha":"2373f1d3376fba3c347ec6debf5df82819cbf12d","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/c06481b4527a8e6903ebe62df9c040171435fbf5/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/c06481b4527a8e6903ebe62df9c040171435fbf5/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java?ref=c06481b4527a8e6903ebe62df9c040171435fbf5","patch":"@@ -404,7 +404,7 @@\n     public DBDictionary() {\n         fixedSizeTypeNameSet.addAll(Arrays.asList(new String[]{\n             \"BIGINT\", \"BIT\", \"BLOB\", \"CLOB\", \"DATE\", \"DECIMAL\", \"DISTINCT\",\n-            \"DOUBLE\", \"FLOAT\", \"INTEGER\", \"JAVA_OBJECT\", \"NULL\", \"NUMERIC\",\n+            \"DOUBLE\", \"FLOAT\", \"INTEGER\", \"JAVA_OBJECT\", \"NULL\", \n             \"OTHER\", \"REAL\", \"REF\", \"SMALLINT\", \"STRUCT\", \"TIME\", \"TIMESTAMP\",\n             \"TINYINT\",\n         }));"},{"sha":"c0567a7d58a0ff8217cfc8f3ed052bc2f9e00180","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/SQLBigDecimalIdEntity.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/c06481b4527a8e6903ebe62df9c040171435fbf5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/SQLBigDecimalIdEntity.java","raw_url":"https://github.com/apache/openjpa/raw/c06481b4527a8e6903ebe62df9c040171435fbf5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/SQLBigDecimalIdEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/SQLBigDecimalIdEntity.java?ref=c06481b4527a8e6903ebe62df9c040171435fbf5","patch":"@@ -19,6 +19,8 @@\n package org.apache.openjpa.persistence.identity;\n \n import java.math.BigDecimal;\n+\n+import javax.persistence.Column;\n import javax.persistence.Entity;\n import javax.persistence.Id;\n \n@@ -29,6 +31,7 @@\n public class SQLBigDecimalIdEntity {\n \n     @Id\n+    @Column(precision=15)\n     private BigDecimal id;\n     private int data;\n "},{"sha":"cd90d92c935132d76a0e3324e0a13595c2e9ba0e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/TestSQLBigDecimalId.java","status":"modified","additions":24,"deletions":17,"changes":41,"blob_url":"https://github.com/apache/openjpa/blob/c06481b4527a8e6903ebe62df9c040171435fbf5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/TestSQLBigDecimalId.java","raw_url":"https://github.com/apache/openjpa/raw/c06481b4527a8e6903ebe62df9c040171435fbf5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/TestSQLBigDecimalId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/TestSQLBigDecimalId.java?ref=c06481b4527a8e6903ebe62df9c040171435fbf5","patch":"@@ -19,16 +19,11 @@\n package org.apache.openjpa.persistence.identity;\n \n import java.math.BigDecimal;\n+\n import javax.persistence.EntityManager;\n \n import junit.textui.TestRunner;\n \n-import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n-import org.apache.openjpa.jdbc.sql.DBDictionary;\n-import org.apache.openjpa.jdbc.sql.MySQLDictionary;\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\n-import org.apache.openjpa.persistence.test.SQLListenerTestCase;\n import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n \n /**\n@@ -48,17 +43,6 @@ public void testPersist() {\n         SQLBigDecimalIdEntity e = new SQLBigDecimalIdEntity();\n         e.setId(decimal);\n         e.setData(1);\n-\n-        // trigger schema definition\n-        JDBCConfiguration jdbccfg = (JDBCConfiguration)emf.getConfiguration();\n-        DBDictionary dict = jdbccfg.getDBDictionaryInstance();\n-        //currently BigDecimal is mapped to NUMERIC column type. This causes\n-        //truncation error from MySQL. Without knowing the implication of changing the \n-        //mapping of BigDecimal universally to DOUBLE, I will just change the mapping\n-        //for this test case. \n-        if (dict instanceof MySQLDictionary) {\n-            dict.numericTypeName = \"DOUBLE\";\n-        }\n         \n         EntityManager em = emf.createEntityManager();\n         em.getTransaction().begin();\n@@ -71,6 +55,29 @@ public void testPersist() {\n         e = em.find(SQLBigDecimalIdEntity.class, decimal);\n         assertEquals(1, e.getData());\n         em.close();\n+        \n+    }\n+    \n+    public void testQuery() {\n+        int data = 156;\n+        BigDecimal decimal = new BigDecimal(1234);\n+        SQLBigDecimalIdEntity e = new SQLBigDecimalIdEntity();\n+        e.setId(decimal);\n+        e.setData(data);\n+\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.persist(e);\n+        em.getTransaction().commit();\n+\n+        SQLBigDecimalIdEntity e2 =\n+            (SQLBigDecimalIdEntity) em.createQuery(\"SELECT a FROM SQLBigDecimalIdEntity a WHERE a.data=\" + data)\n+                .getSingleResult();\n+        \n+        // This would fail prior to OPENJPA-1224.\n+        assertEquals(e, e2);\n+        em.close();\n+\n     }\n \n     public static void main(String[] args) {"}]}

