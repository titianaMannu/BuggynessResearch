{"sha":"c13f0b0e136b0c2730c769948937975a92055940","node_id":"MDY6Q29tbWl0MjA2MzY0OmMxM2YwYjBlMTM2YjBjMjczMGM3Njk5NDg5Mzc5NzVhOTIwNTU5NDA=","commit":{"author":{"name":"Robert Mayer","email":"robert.mayer@rise-world.com","date":"2020-07-06T13:52:27Z"},"committer":{"name":"Mark Struberg","email":"struberg@apache.org","date":"2020-08-31T14:08:53Z"},"message":"This fixes OPENJPA-2795 in that generation of indizes for @ManyToOne relations that are also foreign keys can optionally be turned on if so desired. Default behaviour of OpenJPA is unchanged.\n\nThis commit contains two new features:\n1) A new DB-specific flag DBDictionary#indexPhysicalForeignKeys so that indices for foreign keys will be generated for\ndatabase systems that don't automatically create an index for foreign keys.\n2) A new boolean property MappingDefaults.IndexPhysicalForeignKeys that will turn the feature from 1) on or off.\nBy default MappingDefaults.IndexPhysicalForeignKeys is false so that the feature from 1) is disabled.\n\nNote: DBDictionary#indexPhysicalForeignKeys works similar to the pre-existing flag DBDictionary#indexLogicalForeignKeys.\n\nNote: this commit enables FK indices for Oracle and MS SQLServer. Other database systems may benefit, too, and should also be changed.","tree":{"sha":"20fe4fce0eec1b9c6080d73253437b7b44c0dc58","url":"https://api.github.com/repos/apache/openjpa/git/trees/20fe4fce0eec1b9c6080d73253437b7b44c0dc58"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/c13f0b0e136b0c2730c769948937975a92055940","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/c13f0b0e136b0c2730c769948937975a92055940","html_url":"https://github.com/apache/openjpa/commit/c13f0b0e136b0c2730c769948937975a92055940","comments_url":"https://api.github.com/repos/apache/openjpa/commits/c13f0b0e136b0c2730c769948937975a92055940/comments","author":null,"committer":{"login":"struberg","id":79310,"node_id":"MDQ6VXNlcjc5MzEw","avatar_url":"https://avatars.githubusercontent.com/u/79310?v=4","gravatar_id":"","url":"https://api.github.com/users/struberg","html_url":"https://github.com/struberg","followers_url":"https://api.github.com/users/struberg/followers","following_url":"https://api.github.com/users/struberg/following{/other_user}","gists_url":"https://api.github.com/users/struberg/gists{/gist_id}","starred_url":"https://api.github.com/users/struberg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/struberg/subscriptions","organizations_url":"https://api.github.com/users/struberg/orgs","repos_url":"https://api.github.com/users/struberg/repos","events_url":"https://api.github.com/users/struberg/events{/privacy}","received_events_url":"https://api.github.com/users/struberg/received_events","type":"User","site_admin":false},"parents":[{"sha":"119df603b8223043499b28410ce28a1edae22459","url":"https://api.github.com/repos/apache/openjpa/commits/119df603b8223043499b28410ce28a1edae22459","html_url":"https://github.com/apache/openjpa/commit/119df603b8223043499b28410ce28a1edae22459"}],"stats":{"total":54,"additions":46,"deletions":8},"files":[{"sha":"9843ab38a42393b3de9b61078f93f63c91e8629b","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingDefaultsImpl.java","status":"modified","additions":33,"deletions":8,"changes":41,"blob_url":"https://github.com/apache/openjpa/blob/c13f0b0e136b0c2730c769948937975a92055940/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingDefaultsImpl.java","raw_url":"https://github.com/apache/openjpa/raw/c13f0b0e136b0c2730c769948937975a92055940/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingDefaultsImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingDefaultsImpl.java?ref=c13f0b0e136b0c2730c769948937975a92055940","patch":"@@ -61,7 +61,8 @@\n     private int _joinFKAction = ForeignKey.ACTION_NONE;\n     private int _fkAction = ForeignKey.ACTION_NONE;\n     private boolean _defer = false;\n-    private boolean _indexFK = true;\n+    private boolean _indexLogicalFK = true;\n+    private boolean _indexPhysicalFK = false;\n     private boolean _indexDisc = true;\n     private boolean _indexVers = false;\n     private boolean _orderLists = true;\n@@ -248,14 +249,30 @@ public void setForeignKeyDeleteAction(String fkAction) {\n      * Whether to index logical foreign keys by default. Defaults to true.\n      */\n     public boolean getIndexLogicalForeignKeys() {\n-        return _indexFK;\n+        return _indexLogicalFK;\n     }\n \n     /**\n      * Whether to index logical foreign keys by default. Defaults to true.\n      */\n     public void setIndexLogicalForeignKeys(boolean indexFK) {\n-        _indexFK = indexFK;\n+        _indexLogicalFK = indexFK;\n+    }\n+\n+    /**\n+     * Whether to use DbDictionary specific index on real foreign keys by default.\n+     * Defaults to false i.e. old compatibility behaviour (i.e. no foreign key indices for FKs)\n+     */\n+    public boolean getIndexPhysicalForeignKeys() {\n+        return _indexPhysicalFK;\n+    }\n+\n+    /**\n+     * Whether to use DbDictionary specific index on real foreign keys by default.\n+     * Defaults to false i.e. old compatibility behaviour (i.e. no foreign key indices for FKs)\n+     */\n+    public void setIndexPhysicalForeignKeys(boolean indexPhysFKCompat) {\n+        _indexPhysicalFK = indexPhysFKCompat;\n     }\n \n     /**\n@@ -812,17 +829,25 @@ public ForeignKey getForeignKey(ValueMapping vm, DBIdentifier name, Table local,\n \n     @Override\n     public Index getJoinIndex(FieldMapping fm, Table table, Column[] cols) {\n-        if (!_indexFK || fm.getJoinForeignKey() == null\n-            || !fm.getJoinForeignKey().isLogical())\n+        if (!needsFkIndex(fm.getJoinForeignKey())) {\n             return null;\n-        if (areAllPrimaryKeyColumns(cols))\n+        }\n+        if (areAllPrimaryKeyColumns(cols)) {\n             return null;\n+        }\n \n         Index idx = new Index();\n         idx.setIdentifier(getIndexName(DBIdentifier.NULL, table, cols));\n         return idx;\n     }\n \n+    private boolean needsFkIndex(ForeignKey fk) {\n+        if (fk == null)\n+            return false;\n+        boolean fkIsLogical = fk.isLogical();\n+        return (_indexLogicalFK && fkIsLogical) || (_indexPhysicalFK && !fkIsLogical && dict.indexPhysicalForeignKeys);\n+    }\n+\n     /**\n      * Return whether all the given columns are primary key columns.\n      */\n@@ -868,9 +893,9 @@ public Index getIndex(ValueMapping vm, String name, Table table,\n     @Override\n     public Index getIndex(ValueMapping vm, DBIdentifier name, Table table,\n         Column[] cols) {\n-        if (!_indexFK || vm.getForeignKey() == null\n-            || !vm.getForeignKey().isLogical())\n+        if (!needsFkIndex(vm.getForeignKey())) {\n             return null;\n+        }\n         if (areAllPrimaryKeyColumns(cols))\n             return null;\n "},{"sha":"16a221644ecdf4c18043f96a829f61ac2ba258b4","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/c13f0b0e136b0c2730c769948937975a92055940/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/c13f0b0e136b0c2730c769948937975a92055940/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java?ref=c13f0b0e136b0c2730c769948937975a92055940","patch":"@@ -345,6 +345,16 @@\n      */\n     protected BooleanRepresentation booleanRepresentation = BooleanRepresentationFactory.INT_10;\n \n+    /**\n+     * Whether an index is generated for a relation that is also a foreign key.\n+     * Some database systems (e.g. MySQL) will automatically create an index for a foreign key,\n+     * others (e.g. Oracle, MS-SQL-Server) do not.\n+     *\n+     * See also {@link org.apache.openjpa.jdbc.meta.MappingDefaultsImpl#_indexPhysicalFK}\n+     * which may disable this feature for backwards compatibility.\n+     */\n+    public boolean indexPhysicalForeignKeys = false;\n+\n     public int characterColumnSize = 255;\n     public String arrayTypeName = \"ARRAY\";\n     public String bigintTypeName = \"BIGINT\";"},{"sha":"0b30cb32b9a1eebde2d19fda27c1f67362390eb0","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/c13f0b0e136b0c2730c769948937975a92055940/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/c13f0b0e136b0c2730c769948937975a92055940/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java?ref=c13f0b0e136b0c2730c769948937975a92055940","patch":"@@ -251,6 +251,7 @@ public OracleDictionary() {\n         oracleBlob_empty_lob_Method = getMethodByReflection(\"oracle.sql.BLOB\", \"getEmptyBLOB\");\n         oracleClob_isEmptyLob_Method = getMethodByReflection(\"oracle.sql.CLOB\", \"isEmptyLob\");\n \n+        indexPhysicalForeignKeys = true; // Oracle does not automatically create an index for a foreign key so we will\n     }\n \n     private Method getMethodByReflection(String className, String methodName, Class<?>... paramTypes) {"},{"sha":"c50ccb126e4cadd6183c214843bf75ba77bbefd3","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLServerDictionary.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/c13f0b0e136b0c2730c769948937975a92055940/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLServerDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/c13f0b0e136b0c2730c769948937975a92055940/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLServerDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLServerDictionary.java?ref=c13f0b0e136b0c2730c769948937975a92055940","patch":"@@ -80,6 +80,8 @@ public SQLServerDictionary() {\n \n         timeWithZoneTypeName = \"TIME\";\n         timestampWithZoneTypeName = \"DATETIMEOFFSET\";\n+\n+        indexPhysicalForeignKeys = true; // MS-SQLServer does not automatically create an index for a foreign key so we will\n     }\n \n     @Override"}]}

