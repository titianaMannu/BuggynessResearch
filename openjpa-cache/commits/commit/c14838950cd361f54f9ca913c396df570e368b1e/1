{"sha":"c14838950cd361f54f9ca913c396df570e368b1e","node_id":"MDY6Q29tbWl0MjA2MzY0OmMxNDgzODk1MGNkMzYxZjU0ZjljYTkxM2MzOTZkZjU3MGUzNjhiMWU=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-10-01T23:18:56Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-10-01T23:18:56Z"},"message":"OPENJPA-1330: support join table strategy for uni-directional many-to-one relation and uni-/bi-directional one-to-one relation. \n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@820839 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"98b162d1df1e1f129b7c4204cf08e09438ad3d84","url":"https://api.github.com/repos/apache/openjpa/git/trees/98b162d1df1e1f129b7c4204cf08e09438ad3d84"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/c14838950cd361f54f9ca913c396df570e368b1e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/c14838950cd361f54f9ca913c396df570e368b1e","html_url":"https://github.com/apache/openjpa/commit/c14838950cd361f54f9ca913c396df570e368b1e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/c14838950cd361f54f9ca913c396df570e368b1e/comments","author":null,"committer":null,"parents":[{"sha":"1ff5810e9e98dbcd9ccb9cbfb26e1196be8737a4","url":"https://api.github.com/repos/apache/openjpa/commits/1ff5810e9e98dbcd9ccb9cbfb26e1196be8737a4","html_url":"https://github.com/apache/openjpa/commit/1ff5810e9e98dbcd9ccb9cbfb26e1196be8737a4"}],"stats":{"total":696,"additions":652,"deletions":44},"files":[{"sha":"a4d8f5eb165c8c8c60c7a960c2805d6aeeae01af","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMapping.java","status":"modified","additions":31,"deletions":6,"changes":37,"blob_url":"https://github.com/apache/openjpa/blob/c14838950cd361f54f9ca913c396df570e368b1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMapping.java","raw_url":"https://github.com/apache/openjpa/raw/c14838950cd361f54f9ca913c396df570e368b1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMapping.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMapping.java?ref=c14838950cd361f54f9ca913c396df570e368b1e","patch":"@@ -84,6 +84,10 @@\n     \n     private Boolean _bi_MTo1_JT = null;\n     private Boolean _uni_1ToM_FK = null;\n+    private Boolean _uni_MTo1_JT = null;\n+    private Boolean _uni_1To1_JT = null;\n+    private Boolean _bi_1To1_JT = null;\n+    \n     private FieldMapping _bi_1ToM_JT_Field = null;\n     private FieldMapping _bi_MTo1_JT_Field = null;\n     private ForeignKey _bi_1ToM_Join_FK = null;\n@@ -1258,6 +1262,30 @@ public boolean isBiMTo1JT() {\n         return _bi_MTo1_JT;\n     }\n \n+    public boolean isUni1ToMFK() {\n+        if (_uni_1ToM_FK == null)\n+            _uni_1ToM_FK = getMappingRepository().isUni1ToMFK(this);\n+        return _uni_1ToM_FK;\n+    }\n+    \n+    public boolean isUniMTo1JT() {\n+        if (_uni_MTo1_JT == null)\n+            _uni_MTo1_JT = getMappingRepository().isUniMTo1JT(this);\n+        return _uni_MTo1_JT;\n+    }\n+\n+    public boolean isUni1To1JT() {\n+        if (_uni_1To1_JT == null)\n+            _uni_1To1_JT = getMappingRepository().isUni1To1JT(this);\n+        return _uni_1To1_JT;\n+    }\n+\n+    public boolean isBi1To1JT() {\n+        if (_bi_1To1_JT == null)\n+            _bi_1To1_JT = getMappingRepository().isBi1To1JT(this);\n+        return _bi_1To1_JT;\n+    }\n+    \n     public FieldMapping getBi_1ToM_JTField() {\n         if (_bi_1ToM_JT_Field == null) {\n             _bi_1ToM_JT_Field = getMappingRepository().getBi_1ToM_JoinTableField(this);\n@@ -1290,12 +1318,6 @@ public ForeignKey getBi1ToMElemFK() {\n         return _bi_1ToM_Elem_FK;\n     }\n     \n-    public boolean isUni1ToMFK() {\n-        if (_uni_1ToM_FK == null)\n-            _uni_1ToM_FK = getMappingRepository().isUni1ToMFK(this);\n-        return _uni_1ToM_FK;\n-    }\n-    \n     public void setBi1MJoinTableInfo() {\n         if (getAssociationType() == FieldMetaData.ONE_TO_MANY) {\n             FieldMapping mapped = getBi_MTo1_JTField();\n@@ -1310,4 +1332,7 @@ public void setBi1MJoinTableInfo() {\n         }\n     }\n    \n+    public boolean isNonDefaultMappingUsingJoinTableStrategy() {\n+        return isBi1To1JT() || isUni1To1JT() || isUniMTo1JT() || isBiMTo1JT();\n+    }\n }"},{"sha":"082238d9d376500fb2ad792076f90fafd11ffaee","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingRepository.java","status":"modified","additions":56,"deletions":18,"changes":74,"blob_url":"https://github.com/apache/openjpa/blob/c14838950cd361f54f9ca913c396df570e368b1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingRepository.java","raw_url":"https://github.com/apache/openjpa/raw/c14838950cd361f54f9ca913c396df570e368b1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingRepository.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingRepository.java?ref=c14838950cd361f54f9ca913c396df570e368b1e","patch":"@@ -1016,19 +1016,46 @@ public boolean isNonDefaultMappingAllowed() {\n         return getMetaDataFactory().getDefaults().isNonDefaultMappingAllowed(conf);\n     }\n     \n+    public boolean isUniMTo1JT(FieldMapping field) {\n+        if (isNonDefaultMappingAllowed() && \n+            field.getAssociationType() == FieldMetaData.MANY_TO_ONE &&\n+            hasJoinTable(field) && \n+            !isBidirectional(field))  {\n+            field.getValueMapping().getValueInfo().setColumns(field.getElementMapping().getValueInfo().getColumns());\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    public boolean isUni1To1JT(FieldMapping field) {\n+        if (isNonDefaultMappingAllowed() && \n+            field.getAssociationType() == FieldMetaData.ONE_TO_ONE && \n+            hasJoinTable(field) && \n+            !isBidirectional(field)) {\n+            field.getValueMapping().getValueInfo().setColumns(field.getElementMapping().getValueInfo().getColumns());\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    public boolean isBi1To1JT(FieldMapping field) {\n+        if (isNonDefaultMappingAllowed() && \n+            field.getAssociationType() == FieldMetaData.ONE_TO_ONE && \n+            hasJoinTable(field) && \n+            isBidirectional(field)) {\n+            field.getValueMapping().getValueInfo().setColumns(field.getElementMapping().getValueInfo().getColumns());\n+            return true;\n+        }\n+        return false;\n+    }\n+    \n     public boolean isUni1ToMFK(FieldMapping field) {\n-        FieldMapping mapped = field.getMappedByMapping();\n-        if (isNonDefaultMappingAllowed()) {\n-            if (field.getAssociationType() == FieldMetaData.ONE_TO_MANY ) {\n-                if (mapped == null) {\n-                    if (hasJoinTable(field))\n-                        return false;\n-                    else if (hasJoinColumn(field)) {\n-                        field.getElementMapping().getValueInfo().setColumns(field.getValueInfo().getColumns());\n-                        return true;\n-                    }\n-                } \n-            } \n+        if (isNonDefaultMappingAllowed() && \n+            field.getAssociationType() == FieldMetaData.ONE_TO_MANY &&\n+            hasJoinColumn(field) &&\n+            !isBidirectional(field)) {\n+            field.getElementMapping().getValueInfo().setColumns(field.getValueInfo().getColumns());\n+            return true;\n         }\n         return false;\n     }\n@@ -1076,12 +1103,8 @@ public FieldMapping getBi_MTo1_JoinTableField(FieldMapping field) {\n             if (field.getAssociationType() == FieldMetaData.MANY_TO_ONE) {\n                 if (!hasJoinTable(field))\n                     return null;\n-                ClassMapping inverse = field.getValueMapping().getTypeMapping();\n-                FieldMapping[] fmds = inverse.getFieldMappings();\n-                for (int i = 0; i < fmds.length; i++) {\n-                    if (field == fmds[i].getMappedByMapping()) \n-                        return field;\n-                }\n+                if (isBidirectional(field))\n+                    return field;\n              } else if (field.getAssociationType() == FieldMetaData.ONE_TO_MANY) {\n                 FieldMapping mappedBy = field.getMappedByMapping();\n                 if (mappedBy != null && hasJoinTable(mappedBy))\n@@ -1100,6 +1123,21 @@ public boolean hasJoinTable(FieldMapping field) {\n         boolean hasJoinTable = field.getMappingInfo().getTableName() != null ? true : false;\n         return hasJoinTable;\n     }\n+\n+    public boolean isBidirectional(FieldMapping field) {\n+        if (field.getMappedByMapping() != null) return true;\n+        int assoType = field.getAssociationType();\n+        if (assoType == FieldMetaData.ONE_TO_ONE || \n+            assoType == FieldMetaData.MANY_TO_ONE) {\n+            ClassMapping inverse = field.getValueMapping().getTypeMapping();\n+            FieldMapping[] fmds = inverse.getFieldMappings();\n+            for (int i = 0; i < fmds.length; i++) {\n+                if (field == fmds[i].getMappedByMapping()) \n+                    return true;\n+            }\n+        }\n+        return false;\n+    }\n     \n     /**\n      * Check the given value against mapped strategies."},{"sha":"04de366d9c7c4f5007ad67812b48d9ff12d4d878","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/c14838950cd361f54f9ca913c396df570e368b1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/c14838950cd361f54f9ca913c396df570e368b1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java?ref=c14838950cd361f54f9ca913c396df570e368b1e","patch":"@@ -88,7 +88,7 @@ public void map(boolean adapt) {\n \n         field.getKeyMapping().getValueInfo().assertNoSchemaComponents\n             (field.getKey(), !adapt);\n-        if (!field.isBiMTo1JT())\n+        if (!field.isNonDefaultMappingUsingJoinTableStrategy())\n             field.getElementMapping().getValueInfo().assertNoSchemaComponents\n                 (field.getElement(), !adapt);\n         boolean criteria = field.getValueInfo().getUseClassCriteria();"},{"sha":"e1d86030309cfaa1b3c0330974c7aeb1b3cab7ab","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/Bi_1To1_JT.java","status":"added","additions":76,"deletions":0,"changes":76,"blob_url":"https://github.com/apache/openjpa/blob/c14838950cd361f54f9ca913c396df570e368b1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/Bi_1To1_JT.java","raw_url":"https://github.com/apache/openjpa/raw/c14838950cd361f54f9ca913c396df570e368b1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/Bi_1To1_JT.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/Bi_1To1_JT.java?ref=c14838950cd361f54f9ca913c396df570e368b1e","patch":"@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.compat;\n+\n+import javax.persistence.*;\n+\n+@Entity\n+public class Bi_1To1_JT {\n+\n+    @Id\n+    @GeneratedValue\n+    private long id;\n+\n+    private String name;\n+\n+    // A JoinTable annotation is specified on the owning side of the association\n+    @OneToOne\n+    @JoinTable(\n+        name=\"Bi11JT_C\",\n+        joinColumns=\n+          @JoinColumn(name=\"B_ID\", referencedColumnName=\"ID\"),\n+        inverseJoinColumns=\n+          @JoinColumn(name=\"C_ID\", referencedColumnName=\"ID\")\n+    )\n+    private EntityC_B11JT entityC;\n+    \n+    public long getId() { \n+        return id; \n+    }\n+\n+    public String getName() { \n+        return name; \n+    }\n+\n+    public void setName(String name) { \n+        this.name = name; \n+    }\n+\n+    public EntityC_B11JT getEntityC() { \n+        return entityC; \n+    }\n+\n+    public void setEntityC(EntityC_B11JT entityC) { \n+        this.entityC = entityC; \n+    }\n+\n+    public int hashCode() {\n+        return name.hashCode() + (int)id;\n+    }\n+    \n+    public boolean equals(Object o) {\n+        if (!(o instanceof Bi_1To1_JT)) return false;\n+        Bi_1To1_JT b = (Bi_1To1_JT)o;\n+        if (!b.name.equals(name)) return false;\n+        if (b.id != id) return false;\n+        if (b.entityC == null && entityC == null) return true;\n+        if (b.entityC.getId() != entityC.getId()) return false;\n+        return true;\n+    }\n+}"},{"sha":"7422a6339f49963816cfda8d090faed67ba19b1e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/EntityC_B11JT.java","status":"added","additions":68,"deletions":0,"changes":68,"blob_url":"https://github.com/apache/openjpa/blob/c14838950cd361f54f9ca913c396df570e368b1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/EntityC_B11JT.java","raw_url":"https://github.com/apache/openjpa/raw/c14838950cd361f54f9ca913c396df570e368b1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/EntityC_B11JT.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/EntityC_B11JT.java?ref=c14838950cd361f54f9ca913c396df570e368b1e","patch":"@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.compat;\n+\n+import javax.persistence.*;\n+\n+@Entity\n+public class EntityC_B11JT {\n+\n+    @Id\n+    @GeneratedValue\n+    private long id;\n+\n+    private String name;\n+    \n+    @OneToOne(mappedBy=\"entityC\")\n+    private Bi_1To1_JT bi11jt;\n+    \n+    public long getId() { \n+        return id; \n+    }\n+\n+    public String getName() { \n+        return name; \n+    }\n+\n+    public void setName(String name) { \n+        this.name = name; \n+    }\n+\n+    public void setBi11jt(Bi_1To1_JT bi11jt) {\n+        this.bi11jt = bi11jt;\n+    }\n+    \n+    public Bi_1To1_JT getBi11jt() {\n+        return bi11jt;\n+    }\n+    \n+    public int hashCode() {\n+        return name.hashCode() + (int)id;\n+    }\n+    \n+    public boolean equals(Object o) {\n+        if (!(o instanceof EntityC_B11JT)) return false;\n+        EntityC_B11JT c = (EntityC_B11JT)o;\n+        if (!c.name.equals(name)) return false;\n+        if (c.id != id) return false;\n+        if (c.bi11jt == null && bi11jt == null) return true;\n+        if (!c.bi11jt.equals(bi11jt)) return false;\n+        return true;\n+    }\n+}"},{"sha":"6c7bc8c81e467d93215f12f4824c9fe395902587","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/EntityC_U11JT.java","status":"added","additions":56,"deletions":0,"changes":56,"blob_url":"https://github.com/apache/openjpa/blob/c14838950cd361f54f9ca913c396df570e368b1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/EntityC_U11JT.java","raw_url":"https://github.com/apache/openjpa/raw/c14838950cd361f54f9ca913c396df570e368b1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/EntityC_U11JT.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/EntityC_U11JT.java?ref=c14838950cd361f54f9ca913c396df570e368b1e","patch":"@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.compat;\n+\n+import javax.persistence.*;\n+\n+\n+@Entity\n+public class EntityC_U11JT {\n+\n+    @Id\n+    @GeneratedValue\n+    private long id;\n+\n+    private String name;\n+    \n+    public long getId() { \n+        return id; \n+    }\n+\n+    public String getName() { \n+        return name; \n+    }\n+\n+    public void setName(String name) { \n+        this.name = name; \n+    }\n+\n+    public int hashCode() {\n+        return name.hashCode() + (int)id;\n+    }\n+    \n+    public boolean equals(Object o) {\n+        if (!(o instanceof EntityC_U11JT)) return false;\n+        EntityC_U11JT c = (EntityC_U11JT)o;\n+        if (!c.name.equals(name)) return false;\n+        if (c.id != id) return false;\n+        return true;\n+    }\n+}"},{"sha":"5eb9ed642b171457e32d8edc83c19a1d3901f6fc","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/TestSpecCompatibilityOptions.java","status":"modified","additions":214,"deletions":19,"changes":233,"blob_url":"https://github.com/apache/openjpa/blob/c14838950cd361f54f9ca913c396df570e368b1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/TestSpecCompatibilityOptions.java","raw_url":"https://github.com/apache/openjpa/raw/c14838950cd361f54f9ca913c396df570e368b1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/TestSpecCompatibilityOptions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/TestSpecCompatibilityOptions.java?ref=c14838950cd361f54f9ca913c396df570e368b1e","patch":"@@ -201,7 +201,7 @@ public void testOneToManyRelation() {\n     public void crudUni1MFK(EntityManager em) {\n         //create\n         Uni_1ToM_FK u = new Uni_1ToM_FK();\n-        u.setName(\"uni1mfk\");\n+        u.setName(\"u\");\n         List<EntityC_U1MFK> cs = new ArrayList<EntityC_U1MFK>();\n         EntityC_U1MFK c = new EntityC_U1MFK();\n         c.setName(\"c\");\n@@ -227,7 +227,7 @@ public void crudUni1MFK(EntityManager em) {\n         EntityC_U1MFK c2 = cs.remove(0);\n         \n         Uni_1ToM_FK u2 = new Uni_1ToM_FK();\n-        u2.setName(\"uni1mfk2\");\n+        u2.setName(\"u2\");\n         List<EntityC_U1MFK> cs2 = new ArrayList<EntityC_U1MFK>();\n         cs2.add(c2);\n         u2.setEntityCs(cs2);\n@@ -256,7 +256,7 @@ public void crudUni1MFK(EntityManager em) {\n     // default\n     public void crudUni1MJT(EntityManager em) {\n         Uni_1ToM_JT u = new Uni_1ToM_JT();\n-        u.setName(\"uni1mjt\");\n+        u.setName(\"u\");\n         List<EntityC> cs = new ArrayList<EntityC>();\n         EntityC c = new EntityC();\n         c.setName(\"c\");\n@@ -299,7 +299,7 @@ public void crudUni1MJT(EntityManager em) {\n     //default\n     public void crudBi1MFK(EntityManager em) {\n         Bi_1ToM_FK b = new Bi_1ToM_FK();\n-        b.setName(\"bi1mfk\");\n+        b.setName(\"b\");\n         List<EntityC_B1MFK> cs = new ArrayList<EntityC_B1MFK>();\n         EntityC_B1MFK c = new EntityC_B1MFK();\n         c.setName(\"c\");\n@@ -324,7 +324,7 @@ public void crudBi1MFK(EntityManager em) {\n         em.clear();\n         \n         //query\n-        Query q = em.createQuery(\"SELECT u FROM Bi_1ToM_FK u\");\n+        Query q = em.createQuery(\"SELECT b FROM Bi_1ToM_FK b\");\n         Bi_1ToM_FK b1 = (Bi_1ToM_FK)q.getSingleResult();\n         assertEquals(b, b1);\n         em.clear();\n@@ -343,7 +343,7 @@ public void crudBi1MFK(EntityManager em) {\n \n     public void crudBi1MJT(EntityManager em) {\n         Bi_1ToM_JT b = new Bi_1ToM_JT();\n-        b.setName(\"bi1mfk\");\n+        b.setName(\"b\");\n         List<EntityC_B1MJT> cs = new ArrayList<EntityC_B1MJT>();\n         EntityC_B1MJT c = new EntityC_B1MJT();\n         c.setName(\"c\");\n@@ -429,7 +429,7 @@ public void testOneToManyMapRelation() {\n     public void crudUni1MMapFK(EntityManager em) {\n         //create\n         Uni_1ToM_Map_FK u = new Uni_1ToM_Map_FK();\n-        u.setName(\"uni1mfk\");\n+        u.setName(\"u\");\n         Map<String, EntityC_U1M_Map_FK> cs = new HashMap<String, EntityC_U1M_Map_FK>();\n         EntityC_U1M_Map_FK c1 = new EntityC_U1M_Map_FK();\n         c1.setName(\"c1\");\n@@ -447,7 +447,7 @@ public void crudUni1MMapFK(EntityManager em) {\n \n         //update by adding a new C\n         cs = u.getEntityCs();\n-        u.setName(\"uni1mfk_new\");\n+        u.setName(\"newName\");\n         EntityC_U1M_Map_FK c3 = new EntityC_U1M_Map_FK();\n         c3.setName(\"c3\");\n         cs.put(c3.getName(), c3);\n@@ -461,7 +461,7 @@ public void crudUni1MMapFK(EntityManager em) {\n         EntityC_U1M_Map_FK c4 = cs.remove(\"c1\");\n         \n         Uni_1ToM_Map_FK u2 = new Uni_1ToM_Map_FK();\n-        u2.setName(\"uni1mfk2\");\n+        u2.setName(\"u2\");\n         Map<String, EntityC_U1M_Map_FK> cs2 = new HashMap<String, EntityC_U1M_Map_FK>();\n         cs2.put(c4.getName(), c4);\n         u2.setEntityCs(cs2);\n@@ -470,7 +470,7 @@ public void crudUni1MMapFK(EntityManager em) {\n         em.clear();\n         \n         //query\n-        Query q = em.createQuery(\"SELECT u FROM Uni_1ToM_Map_FK u where u.name='uni1mfk_new'\");\n+        Query q = em.createQuery(\"SELECT u FROM Uni_1ToM_Map_FK u where u.name='newName'\");\n         Uni_1ToM_Map_FK u1 = (Uni_1ToM_Map_FK)q.getSingleResult();\n         assertEquals(u, u1);\n         em.clear();\n@@ -488,7 +488,7 @@ public void crudUni1MMapFK(EntityManager em) {\n     \n     public void crudBi1MMapJT(EntityManager em) {\n         Bi_1ToM_Map_JT b = new Bi_1ToM_Map_JT();\n-        b.setName(\"bi1mfk\");\n+        b.setName(\"b\");\n         Map<String, EntityC_B1M_Map_JT> cs = new HashMap<String, EntityC_B1M_Map_JT>();\n         EntityC_B1M_Map_JT c = new EntityC_B1M_Map_JT();\n         c.setName(\"c\");\n@@ -513,15 +513,15 @@ public void crudBi1MMapJT(EntityManager em) {\n         em.clear();\n         \n         //query\n-        Query q = em.createQuery(\"SELECT u FROM Bi_1ToM_Map_JT u\");\n+        Query q = em.createQuery(\"SELECT b FROM Bi_1ToM_Map_JT b\");\n         Bi_1ToM_Map_JT b1 = (Bi_1ToM_Map_JT)q.getSingleResult();\n         assertEquals(b, b1);\n         em.clear();\n \n         // query the owner\n         q = em.createQuery(\"SELECT c FROM EntityC_B1M_Map_JT c\");\n         List<EntityC_B1M_Map_JT> cs1 = q.getResultList();\n-        System.err.println(\"cs1 size = \" + cs1.size());\n+        assertEquals(2, cs.size());\n         em.clear();\n         \n         //find\n@@ -538,7 +538,7 @@ public void crudBi1MMapJT(EntityManager em) {\n     public void crudUni1MMapRelKeyFK(EntityManager em) {\n         //create\n         Uni_1ToM_Map_RelKey_FK u = new Uni_1ToM_Map_RelKey_FK();\n-        u.setName(\"uni1mfk\");\n+        u.setName(\"u\");\n         Map<EntityC, EntityC_U1M_Map_RelKey_FK> cs = new HashMap<EntityC, EntityC_U1M_Map_RelKey_FK>();\n         EntityC_U1M_Map_RelKey_FK c1 = new EntityC_U1M_Map_RelKey_FK();\n         c1.setName(\"c1\");\n@@ -563,7 +563,7 @@ public void crudUni1MMapRelKeyFK(EntityManager em) {\n         //update by adding a new C\n         em.getTransaction().begin();\n         cs = u.getEntityCs();\n-        u.setName(\"uni1mfk_new\");\n+        u.setName(\"newName\");\n         EntityC_U1M_Map_RelKey_FK c3 = new EntityC_U1M_Map_RelKey_FK();\n         c3.setName(\"c3\");\n         EntityC cKey3 = new EntityC();\n@@ -578,7 +578,7 @@ public void crudUni1MMapRelKeyFK(EntityManager em) {\n         EntityC_U1M_Map_RelKey_FK c4 = cs.remove(cKey1);\n         \n         Uni_1ToM_Map_RelKey_FK u2 = new Uni_1ToM_Map_RelKey_FK();\n-        u2.setName(\"uni1mfk2\");\n+        u2.setName(\"u2\");\n         Map<EntityC, EntityC_U1M_Map_RelKey_FK> cs2 = new HashMap<EntityC, EntityC_U1M_Map_RelKey_FK>();\n         cs2.put(cKey1, c4);\n         u2.setEntityCs(cs2);\n@@ -587,7 +587,7 @@ public void crudUni1MMapRelKeyFK(EntityManager em) {\n         em.clear();\n         \n         //query\n-        Query q = em.createQuery(\"SELECT u FROM Uni_1ToM_Map_RelKey_FK u where u.name='uni1mfk_new'\");\n+        Query q = em.createQuery(\"SELECT u FROM Uni_1ToM_Map_RelKey_FK u where u.name='newName'\");\n         Uni_1ToM_Map_RelKey_FK u1 = (Uni_1ToM_Map_RelKey_FK)q.getSingleResult();\n         assertEquals(u, u1);\n         em.clear();\n@@ -605,7 +605,7 @@ public void crudUni1MMapRelKeyFK(EntityManager em) {\n \n     public void crudBi1MMapRelKeyJT(EntityManager em) {\n         Bi_1ToM_Map_RelKey_JT b = new Bi_1ToM_Map_RelKey_JT();\n-        b.setName(\"bi1mfk\");\n+        b.setName(\"b\");\n         Map<EntityC, EntityC_B1M_Map_RelKey_JT> cs = new HashMap<EntityC, EntityC_B1M_Map_RelKey_JT>();\n         EntityC_B1M_Map_RelKey_JT c = new EntityC_B1M_Map_RelKey_JT();\n         c.setName(\"c\");\n@@ -636,7 +636,7 @@ public void crudBi1MMapRelKeyJT(EntityManager em) {\n         em.clear();\n         \n         //query\n-        Query q = em.createQuery(\"SELECT u FROM Bi_1ToM_Map_RelKey_JT u\");\n+        Query q = em.createQuery(\"SELECT b FROM Bi_1ToM_Map_RelKey_JT b\");\n         Bi_1ToM_Map_RelKey_JT b1 = (Bi_1ToM_Map_RelKey_JT)q.getSingleResult();\n         assertEquals(b, b1);\n         em.clear();\n@@ -658,6 +658,201 @@ public void crudBi1MMapRelKeyJT(EntityManager em) {\n         em.getTransaction().commit();\n     }\n \n+    public void testUniManyToOneUsingJoinTable() {\n+        List<Class<?>> types = new ArrayList<Class<?>>();\n+        types.add(EntityC.class);\n+        types.add(Uni_MTo1_JT.class);\n+        OpenJPAEntityManagerFactorySPI emf = createEMF2_0(types);\n+        EntityManager em = emf.createEntityManager();\n+        \n+        try {\n+            // trigger table creation\n+            em.getTransaction().begin();\n+            em.getTransaction().commit();\n+            assertSQLFragnments(sql, \"CREATE TABLE UniM1JT_C\", \"U_ID\", \"C_ID\");\n+            crudUniM1JT(em);\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+            fail(\"ManyToOne mapping failed with exception message: \" + e.getMessage());\n+        } finally {\n+            em.close();\n+            emf.close();            \n+        }\n+    }\n+    \n+    public void crudUniM1JT(EntityManager em) {\n+        //create\n+        Uni_MTo1_JT u = new Uni_MTo1_JT();\n+        u.setName(\"u\");\n+\n+        Uni_MTo1_JT u1 = new Uni_MTo1_JT();\n+        u1.setName(\"u1\");\n+\n+        EntityC c1 = new EntityC();\n+        c1.setName(\"c1\");\n+        u.setEntityC(c1);\n+        u1.setEntityC(c1);\n+        \n+        em.persist(u);\n+        em.persist(u1);\n+        em.persist(c1);\n+        em.getTransaction().begin();\n+        em.getTransaction().commit();\n+\n+        //update by changing the many-to-one value \n+        em.getTransaction().begin();\n+        u.setName(\"u_new\");\n+        EntityC c3 = new EntityC();\n+        c3.setName(\"c3\");\n+        u.setEntityC(c3);\n+        em.persist(c3);\n+        em.getTransaction().commit();\n+        \n+        // update be removing the many-to-one value\n+        em.getTransaction().begin();\n+        u.setEntityC(null);\n+        em.getTransaction().commit();\n+        \n+        //query\n+        Query q = em.createQuery(\"SELECT u FROM Uni_MTo1_JT u where u.name='u_new'\");\n+        Uni_MTo1_JT queryU = (Uni_MTo1_JT)q.getSingleResult();\n+        assertEquals(u, queryU);\n+        em.clear();\n+\n+        //find\n+        long id = u1.getId();\n+        Uni_MTo1_JT findU = em.find(Uni_MTo1_JT.class, id);\n+        assertEquals(u1, findU);\n+        \n+        //remove\n+        em.getTransaction().begin();\n+        em.remove(findU);\n+        em.getTransaction().commit();\n+    }\n+\n+    public void testOneToOneUsingJoinTable() {\n+        List<Class<?>> types = new ArrayList<Class<?>>();\n+        types.add(EntityC_B11JT.class);\n+        types.add(EntityC_U11JT.class);\n+        types.add(Bi_1To1_JT.class);\n+        types.add(Uni_1To1_JT.class);\n+        OpenJPAEntityManagerFactorySPI emf = createEMF2_0(types);\n+        EntityManager em = emf.createEntityManager();\n+        \n+        try {\n+            // trigger table creation\n+            em.getTransaction().begin();\n+            em.getTransaction().commit();\n+            assertSQLFragnments(sql, \"CREATE TABLE Bi11JT_C\", \"B_ID\", \"C_ID\");\n+            assertSQLFragnments(sql, \"CREATE TABLE Uni11JT_C\", \"U_ID\", \"C_ID\");\n+            crudBi11JT(em);\n+            crudUni11JT(em);\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+            fail(\"OneToOne mapping failed with exception message: \" + e.getMessage());\n+        } finally {\n+            em.close();\n+            emf.close();            \n+        }\n+    }\n+\n+    public void crudUni11JT(EntityManager em) {\n+        Uni_1To1_JT u = new Uni_1To1_JT();\n+        u.setName(\"uni1mjt\");\n+\n+        EntityC_U11JT c1 = new EntityC_U11JT();\n+        c1.setName(\"c1\");\n+        u.setEntityC(c1);\n+\n+        em.persist(u);\n+        em.persist(c1);\n+        em.getTransaction().begin();\n+        em.getTransaction().commit();\n+        \n+        //update by setting to a new C\n+        em.getTransaction().begin();\n+        u.setName(\"uni1mjt_new\");\n+        EntityC_U11JT newC = new EntityC_U11JT();\n+        newC.setName(\"newC\");\n+        u.setEntityC(newC);\n+        em.persist(newC);\n+        em.getTransaction().commit();\n+        \n+        // update by setting to null\n+        em.getTransaction().begin();\n+        u.setEntityC(null);\n+        em.getTransaction().commit();\n+        em.clear();\n+        \n+        //query\n+        Query q = em.createQuery(\"SELECT u FROM Uni_1To1_JT u where u.name = 'uni1mjt_new'\");\n+        Uni_1To1_JT u1 = (Uni_1To1_JT)q.getSingleResult();\n+        assertEquals(u, u1);\n+        em.clear();\n+\n+        //find\n+        long id = u1.getId();\n+        Uni_1To1_JT findU1 = em.find(Uni_1To1_JT.class, id);\n+        assertEquals(u, findU1);\n+        \n+        //remove\n+        em.getTransaction().begin();\n+        em.remove(findU1);\n+        em.getTransaction().commit();\n+    }\n+\n+    public void crudBi11JT(EntityManager em) {\n+        Bi_1To1_JT b = new Bi_1To1_JT();\n+        b.setName(\"bi11fk\");\n+        \n+        EntityC_B11JT c = new EntityC_B11JT();\n+        c.setName(\"c\");\n+        b.setEntityC(c);\n+        //c.setBi11jt(b);\n+\n+        em.persist(b);\n+        em.persist(c);\n+        em.getTransaction().begin();\n+        em.getTransaction().commit();\n+\n+        // update by removing a c \n+        em.getTransaction().begin();\n+        b.setEntityC(null);\n+        em.getTransaction().commit();\n+\n+        //update\n+        em.getTransaction().begin();\n+        b.setName(\"newName\");\n+        EntityC_B11JT c1 = new EntityC_B11JT();\n+        c1.setName(\"c1\");\n+        b.setEntityC(c1);\n+        //c1.setBi11jt(b);\n+        em.persist(c1);\n+        em.getTransaction().commit();\n+        \n+        //query\n+        Query q = em.createQuery(\"SELECT u FROM Bi_1To1_JT u\");\n+        Bi_1To1_JT b1 = (Bi_1To1_JT)q.getSingleResult();\n+        assertEquals(b, b1);\n+        em.clear();\n+\n+        // query\n+        q = em.createQuery(\"SELECT c FROM EntityC_B11JT c\");\n+        List<EntityC_B11JT> cs1 = q.getResultList();\n+        assertEquals(2, cs1.size());\n+        em.clear();\n+        \n+        //find\n+        long id = b1.getId();\n+        Bi_1To1_JT b2 = em.find(Bi_1To1_JT.class, id);\n+        assertEquals(b, b2);\n+        \n+        //remove\n+        em.getTransaction().begin();\n+        em.remove(b2);\n+        em.getTransaction().commit();\n+    }\n+\n     private OpenJPAEntityManagerFactorySPI createEMF2_0(List<Class<?>> types) {\n         Map<Object,Object> map = new HashMap<Object,Object>();\n         map.put(\"openjpa.jdbc.JDBCListeners\", "},{"sha":"cb28ff11fa7a504bc2e01b3f62e2e1be5016ba72","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/Uni_1To1_JT.java","status":"added","additions":75,"deletions":0,"changes":75,"blob_url":"https://github.com/apache/openjpa/blob/c14838950cd361f54f9ca913c396df570e368b1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/Uni_1To1_JT.java","raw_url":"https://github.com/apache/openjpa/raw/c14838950cd361f54f9ca913c396df570e368b1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/Uni_1To1_JT.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/Uni_1To1_JT.java?ref=c14838950cd361f54f9ca913c396df570e368b1e","patch":"@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.compat;\n+\n+import javax.persistence.*;\n+\n+@Entity\n+public class Uni_1To1_JT {\n+\n+    @Id\n+    @GeneratedValue\n+    private long id;\n+\n+    private String name;\n+\n+    @OneToOne\n+    @JoinTable(\n+        name=\"Uni11JT_C\",\n+        joinColumns=\n+          @JoinColumn(name=\"U_ID\", referencedColumnName=\"ID\"),\n+        inverseJoinColumns=\n+          @JoinColumn(name=\"C_ID\", referencedColumnName=\"ID\")\n+    )\n+    private EntityC_U11JT entityC;\n+    \n+    public long getId() { \n+        return id; \n+    }\n+\n+    public String getName() { \n+        return name; \n+    }\n+\n+    public void setName(String name) { \n+        this.name = name; \n+    }\n+\n+    public EntityC_U11JT getEntityC() { \n+        return entityC; \n+    }\n+\n+    public void setEntityC(EntityC_U11JT entityC) { \n+        this.entityC = entityC; \n+    }\n+\n+    public int hashCode() {\n+        return name.hashCode() + (int)id;\n+    }\n+    \n+    public boolean equals(Object o) {\n+        if (!(o instanceof Uni_1To1_JT)) return false;\n+        Uni_1To1_JT u = (Uni_1To1_JT)o;\n+        if (!u.name.equals(name)) return false;\n+        if (u.id != id) return false;\n+        if (u.entityC == null && entityC == null) return true;\n+        if (u.entityC.getId() != entityC.getId()) return false;\n+        return true;\n+    }\n+}"},{"sha":"85fa2d6b3dd32445dde47ac3c63a7d579b4bb3a6","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/Uni_MTo1_JT.java","status":"added","additions":75,"deletions":0,"changes":75,"blob_url":"https://github.com/apache/openjpa/blob/c14838950cd361f54f9ca913c396df570e368b1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/Uni_MTo1_JT.java","raw_url":"https://github.com/apache/openjpa/raw/c14838950cd361f54f9ca913c396df570e368b1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/Uni_MTo1_JT.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/Uni_MTo1_JT.java?ref=c14838950cd361f54f9ca913c396df570e368b1e","patch":"@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.compat;\n+\n+import javax.persistence.*;\n+\n+@Entity\n+public class Uni_MTo1_JT {\n+\n+    @Id\n+    @GeneratedValue\n+    private long id;\n+\n+    private String name;\n+\n+    @ManyToOne\n+    @JoinTable(\n+        name=\"UniM1JT_C\",\n+        joinColumns=\n+          @JoinColumn(name=\"U_ID\", referencedColumnName=\"ID\"),\n+        inverseJoinColumns=\n+          @JoinColumn(name=\"C_ID\", referencedColumnName=\"ID\")\n+    )\n+    private EntityC entityC;\n+    \n+    public long getId() { \n+        return id; \n+    }\n+\n+    public String getName() { \n+        return name; \n+    }\n+\n+    public void setName(String name) { \n+        this.name = name; \n+    }\n+\n+    public EntityC getEntityC() { \n+        return entityC; \n+    }\n+\n+    public void setEntityC(EntityC entityC) { \n+        this.entityC = entityC; \n+    }\n+\n+    public int hashCode() {\n+        return name.hashCode() + (int)id;\n+    }\n+    \n+    public boolean equals(Object o) {\n+        if (!(o instanceof Uni_MTo1_JT)) return false;\n+        Uni_MTo1_JT c = (Uni_MTo1_JT)o;\n+        if (!c.name.equals(name)) return false;\n+        if (c.id != id) return false;\n+        if (c.entityC == null && entityC == null) return true;\n+        if (!c.entityC.equals(entityC)) return false;\n+        return true;\n+    }\n+}"}]}

