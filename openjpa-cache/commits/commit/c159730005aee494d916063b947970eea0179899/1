{"sha":"c159730005aee494d916063b947970eea0179899","node_id":"MDY6Q29tbWl0MjA2MzY0OmMxNTk3MzAwMDVhZWU0OTRkOTE2MDYzYjk0Nzk3MGVlYTAxNzk4OTk=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2011-05-09T22:09:40Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2011-05-09T22:09:40Z"},"message":"OPENJPA-1725: Ignore schema when checking the length of a table name\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1101243 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"35b593f10902b40daa8eb0c7645e5fbb52d13304","url":"https://api.github.com/repos/apache/openjpa/git/trees/35b593f10902b40daa8eb0c7645e5fbb52d13304"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/c159730005aee494d916063b947970eea0179899","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/c159730005aee494d916063b947970eea0179899","html_url":"https://github.com/apache/openjpa/commit/c159730005aee494d916063b947970eea0179899","comments_url":"https://api.github.com/repos/apache/openjpa/commits/c159730005aee494d916063b947970eea0179899/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"26aa776627e84f62767d689f3f71941a51687602","url":"https://api.github.com/repos/apache/openjpa/commits/26aa776627e84f62767d689f3f71941a51687602","html_url":"https://github.com/apache/openjpa/commit/26aa776627e84f62767d689f3f71941a51687602"}],"stats":{"total":168,"additions":162,"deletions":6},"files":[{"sha":"773e24e350c1555cc32e230eb46c8e222067f1e4","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Table.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/c159730005aee494d916063b947970eea0179899/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Table.java","raw_url":"https://github.com/apache/openjpa/raw/c159730005aee494d916063b947970eea0179899/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Table.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Table.java?ref=c159730005aee494d916063b947970eea0179899","patch":"@@ -178,7 +178,7 @@ public DBIdentifier getIdentifier() {\n     /**\n      * Set the name of the table. This method can only be called on tables\n      * that are not part of a schema.\n-     * @deprecated\n+     * @deprecated (use setIdentifier(DBIdentifier) instead.\n      */\n     public void setName(String name) {\n         setIdentifier(DBIdentifier.newTable(name));"},{"sha":"25f9cd0c11cec718398d00e17b8b5820df4fdeac","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","status":"modified","additions":43,"deletions":5,"changes":48,"blob_url":"https://github.com/apache/openjpa/blob/c159730005aee494d916063b947970eea0179899/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/c159730005aee494d916063b947970eea0179899/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java?ref=c159730005aee494d916063b947970eea0179899","patch":"@@ -3317,8 +3317,7 @@ protected DBIdentifier makeNameValid(DBIdentifier name, NameSet set, int maxLen,\n      */\n     public String[] getCreateTableSQL(Table table) {\n         StringBuilder buf = new StringBuilder();\n-        String tableName = checkNameLength(getFullName(table, false), \n-                maxTableNameLength, \"long-table-name\");\n+        String tableName = checkNameLength(getFullIdentifier(table, false), maxTableNameLength, \"long-table-name\");\n         buf.append(\"CREATE TABLE \").append(tableName);\n         if (supportsComments && table.hasComment()) {\n             buf.append(\" \");\n@@ -5258,9 +5257,48 @@ public void deleteStream(JDBCStore store, Select sel) throws SQLException {\n      * given message key otherwise returns the same name.\n      */\n     final String checkNameLength(String name, int length, String msgKey) {\n-        if (name.length() > length)\n-            throw new UserException(_loc.get(msgKey, name, name.length(), \n-                    length));\n+        if (name.length() > length) {\n+            throw new UserException(_loc.get(msgKey, name, name.length(), length));\n+        }\n+        return name;\n+    }\n+    \n+    /**\n+     * Validate that the given name is not longer than given maximum length. Uses the unqualified name\n+     * from the supplied {@link DBIdentifier} by default..\n+     * \n+     * @param identifer The database identifier to check.\n+     * @param length    Max length for this type of identifier\n+     * @param msgKey    message identifier for the exception.\n+     * @param qualified If true the qualified name of the DBIdentifier will be used. \n+     * \n+     * @throws @{link UserException} with the given message key if the given name is indeed longer.\n+     * @return the same name.\n+     */\n+    final String checkNameLength(DBIdentifier identifier, int length, String msgKey) {\n+        return checkNameLength(identifier, length, msgKey, false);\n+    }\n+\n+    /**\n+     * Validate that the given name is not longer than given maximum length. Conditionally uses the unqualified name\n+     * from the supplied {@link DBIdentifier}.\n+     * \n+     * @param identifer The database identifier to check.\n+     * @param length    Max length for this type of identifier\n+     * @param msgKey    message identifier for the exception.\n+     * @param qualified If true the qualified name of the DBIdentifier will be used. \n+     * \n+     * @throws @{link UserException} with the given message key if the given name is indeed longer.\n+     * @return the same name.\n+     */\n+    final String checkNameLength(DBIdentifier identifier, int length, String msgKey, boolean qualified) {\n+        // always return the input name, \n+        String name = toDBName(identifier);\n+        String compareName = qualified ? name : toDBName(identifier.getUnqualifiedName());\n+        \n+        if (compareName.length() > length) {\n+            throw new UserException(_loc.get(msgKey, name, name.length(), length));\n+        }\n         return name;\n     }\n "},{"sha":"bc3b6970e89b3d1659d455ff43c80edf7157f435","filename":"openjpa-jdbc/src/test/java/org/apache/openjpa/jdbc/sql/TestDBDictionaryGeneratedSQL.java","status":"added","additions":118,"deletions":0,"changes":118,"blob_url":"https://github.com/apache/openjpa/blob/c159730005aee494d916063b947970eea0179899/openjpa-jdbc/src/test/java/org/apache/openjpa/jdbc/sql/TestDBDictionaryGeneratedSQL.java","raw_url":"https://github.com/apache/openjpa/raw/c159730005aee494d916063b947970eea0179899/openjpa-jdbc/src/test/java/org/apache/openjpa/jdbc/sql/TestDBDictionaryGeneratedSQL.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/test/java/org/apache/openjpa/jdbc/sql/TestDBDictionaryGeneratedSQL.java?ref=c159730005aee494d916063b947970eea0179899","patch":"@@ -0,0 +1,118 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.jdbc.sql;\n+\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.identifier.DBIdentifier;\n+import org.apache.openjpa.jdbc.identifier.DBIdentifierUtilImpl;\n+import org.apache.openjpa.jdbc.schema.Table;\n+import org.apache.openjpa.util.UserException;\n+import org.jmock.Expectations;\n+import org.jmock.integration.junit3.MockObjectTestCase;\n+\n+public class TestDBDictionaryGeneratedSQL extends MockObjectTestCase {\n+\n+    public void testCreateTableLongNameException() {\n+        final JDBCConfiguration mockConfiguration = mock(JDBCConfiguration.class);\n+        final DBIdentifierUtilImpl idImpl = new DBIdentifierUtilImpl();\n+        \n+        checking(new Expectations() {\n+            {\n+                allowing(mockConfiguration).getIdentifierUtilInstance();\n+                will(returnValue(idImpl)); \n+\n+                allowing(mockConfiguration);\n+            }\n+        });\n+        \n+        DBDictionary dict = new DBDictionary();\n+        dict.setConfiguration(mockConfiguration);\n+        dict.maxTableNameLength = 10;\n+\n+        Table table = new Table();\n+        table.setIdentifier(DBIdentifier.newTable(\"NameIsTooLong\"));\n+        \n+        try {\n+            dict.getCreateTableSQL(table);\n+            fail(\"Expected a UserException\");\n+        } catch (UserException ue) {\n+            // expected - check message incase a different UserException is thrown.\n+            assertTrue(ue.getMessage().contains(\"Table name \\\"NameIsTooLong\\\"\"));\n+        }\n+    }\n+    \n+    \n+    public void testThrowsExceptionWithSchemaSet() {\n+        final JDBCConfiguration mockConfiguration = mock(JDBCConfiguration.class);\n+        final DBIdentifierUtilImpl idImpl = new DBIdentifierUtilImpl();\n+        \n+        checking(new Expectations() {\n+            {\n+                allowing(mockConfiguration).getIdentifierUtilInstance();\n+                will(returnValue(idImpl)); \n+\n+                allowing(mockConfiguration);\n+            }\n+        });\n+        \n+        DBDictionary dict = new DBDictionary();\n+        dict.setConfiguration(mockConfiguration);\n+        dict.maxTableNameLength = 10;\n+\n+        Table table = new Table();\n+        table.setIdentifier(DBIdentifier.newTable(\"NameIsTooLong\"));\n+        table.setSchemaIdentifier(DBIdentifier.newSchema(\"IAmASchema\"));\n+        \n+        try {\n+            dict.getCreateTableSQL(table);\n+            fail(\"Expected a UserException\");\n+        } catch (UserException ue) {\n+            // expected - check message incase a different UserException is thrown.\n+            assertTrue(ue.getMessage().contains(\"Table name \\\"IAmASchema.NameIsTooLong\\\"\"));\n+        } \n+    }\n+    \n+    public void testSchemaNameIsNotConsidered() {\n+        final JDBCConfiguration mockConfiguration = mock(JDBCConfiguration.class);\n+        final DBIdentifierUtilImpl idImpl = new DBIdentifierUtilImpl();\n+        \n+        checking(new Expectations() {\n+            {\n+                allowing(mockConfiguration).getIdentifierUtilInstance();\n+                will(returnValue(idImpl)); \n+\n+                allowing(mockConfiguration);\n+            }\n+        });\n+        \n+        DBDictionary dict = new DBDictionary();\n+        dict.setConfiguration(mockConfiguration);\n+        dict.maxTableNameLength = 12;\n+\n+        Table table = new Table();\n+        table.setIdentifier(DBIdentifier.newTable(\"NameIsRight\"));\n+        table.setSchemaIdentifier(DBIdentifier.newSchema(\"IAmASchema\"));\n+        \n+        String[] sqls = dict.getCreateTableSQL(table);\n+        assertEquals(1, sqls.length);\n+        assertTrue(sqls[0].contains(\"NameIsRight\"));\n+        assertTrue(sqls[0].contains(\"IAmASchema\"));\n+    }    \n+\n+}"}]}

