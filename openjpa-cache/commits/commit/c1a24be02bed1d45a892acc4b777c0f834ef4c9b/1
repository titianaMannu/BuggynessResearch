{"sha":"c1a24be02bed1d45a892acc4b777c0f834ef4c9b","node_id":"MDY6Q29tbWl0MjA2MzY0OmMxYTI0YmUwMmJlZDFkNDVhODkyYWNjNGI3NzdjMGY4MzRlZjRjOWI=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-02-12T18:21:01Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-02-12T18:21:01Z"},"message":"OPENJPA-1370:\nSetting svn:eol-style native\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@909545 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6eeab790b4328e3c844a9603b270b857e6baa9e2","url":"https://api.github.com/repos/apache/openjpa/git/trees/6eeab790b4328e3c844a9603b270b857e6baa9e2"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/c1a24be02bed1d45a892acc4b777c0f834ef4c9b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/c1a24be02bed1d45a892acc4b777c0f834ef4c9b","html_url":"https://github.com/apache/openjpa/commit/c1a24be02bed1d45a892acc4b777c0f834ef4c9b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/c1a24be02bed1d45a892acc4b777c0f834ef4c9b/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"a0e95fb993b33ff75d528d5e96c71b4f27f2f505","url":"https://api.github.com/repos/apache/openjpa/commits/a0e95fb993b33ff75d528d5e96c71b4f27f2f505","html_url":"https://github.com/apache/openjpa/commit/a0e95fb993b33ff75d528d5e96c71b4f27f2f505"}],"stats":{"total":184,"additions":92,"deletions":92},"files":[{"sha":"fa8bab88c637ca82cc685b9102cca81e17135233","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryResultClassAPI.java","status":"modified","additions":92,"deletions":92,"changes":184,"blob_url":"https://github.com/apache/openjpa/blob/c1a24be02bed1d45a892acc4b777c0f834ef4c9b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryResultClassAPI.java","raw_url":"https://github.com/apache/openjpa/raw/c1a24be02bed1d45a892acc4b777c0f834ef4c9b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryResultClassAPI.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryResultClassAPI.java?ref=c1a24be02bed1d45a892acc4b777c0f834ef4c9b","patch":"@@ -1,92 +1,92 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.query;\r\n-\r\n-import java.util.Collection;\r\n-import java.util.List;\r\n-\r\n-import javax.persistence.EntityManager;\r\n-import javax.persistence.Query;\r\n-\r\n-\r\n-\r\n-import org.apache.openjpa.kernel.PreparedQuery;\r\n-import org.apache.openjpa.kernel.PreparedQueryCache;\r\n-import org.apache.openjpa.persistence.query.common.apps.QueryTest1;\r\n-import org.apache.openjpa.persistence.query.common.apps.QueryTest2;\r\n-import org.apache.openjpa.persistence.query.common.apps.QueryTest4;\r\n-import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n-\r\n-public class TestQueryResultClassAPI extends SingleEMFTestCase {\r\n-\r\n-    public void setUp() {\r\n-        setUp(QueryTest1.class, QueryTest2.class, QueryTest4.class,\r\n-            \"openjpa.jdbc.QuerySQLCache\", \"true\",\r\n-            CLEAR_TABLES);\r\n-\r\n-        EntityManager em = emf.createEntityManager();\r\n-        em.getTransaction().begin();\r\n-        QueryTest1 pc = null;\r\n-        for (int i = 0; i < 10; i++) {\r\n-            pc = new QueryTest1();\r\n-            if (i < 5)\r\n-                pc.setNum(4);\r\n-            else\r\n-                pc.setNum(i + 10);\r\n-            pc.setDate(new java.util.Date(9999));\r\n-            em.persist(pc);\r\n-        }\r\n-        em.getTransaction().commit();\r\n-        em.close();\r\n-    }\r\n-\r\n-\r\n-    public void testQueryWithResultClass() {\r\n-        EntityManager em = emf.createEntityManager();\r\n-        String jpql = \"SELECT o FROM QueryTest1 o\";\r\n-\r\n-        Query query = em.createQuery(jpql, QueryTest1.class);\r\n-\r\n-        List rs = query.getResultList();\r\n-        assertTrue(rs.get(0) instanceof QueryTest1);\r\n-        PreparedQuery pq = getPreparedQueryCache().get(jpql);\r\n-        assertNotNull(pq);\r\n-\r\n-        Query query2 = em.createQuery(jpql, QueryTest1.class);\r\n-        PreparedQuery pq2 = getPreparedQueryCache().get(jpql);\r\n-        assertEquals(pq, pq2);\r\n-        rs = query2.getResultList();\r\n-        assertTrue(rs.get(0) instanceof QueryTest1);\r\n-\r\n-        jpql = \"SELECT o.datum FROM QueryTest1 o\";\r\n-        query = em.createQuery(jpql, java.util.Date.class);\r\n-        rs = query.getResultList();\r\n-        assertTrue(rs.get(0) instanceof java.util.Date);\r\n-\r\n-        query = em.createNamedQuery(\"named\", QueryTest1.class);\r\n-        rs = query.getResultList();\r\n-        assertTrue(rs.get(0) instanceof QueryTest1);\r\n-\r\n-        em.close();\r\n-    }\r\n-    \r\n-    PreparedQueryCache getPreparedQueryCache() {\r\n-        return emf.getConfiguration().getQuerySQLCacheInstance();\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.query;\n+\n+import java.util.Collection;\n+import java.util.List;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.Query;\n+\n+\n+\n+import org.apache.openjpa.kernel.PreparedQuery;\n+import org.apache.openjpa.kernel.PreparedQueryCache;\n+import org.apache.openjpa.persistence.query.common.apps.QueryTest1;\n+import org.apache.openjpa.persistence.query.common.apps.QueryTest2;\n+import org.apache.openjpa.persistence.query.common.apps.QueryTest4;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+public class TestQueryResultClassAPI extends SingleEMFTestCase {\n+\n+    public void setUp() {\n+        setUp(QueryTest1.class, QueryTest2.class, QueryTest4.class,\n+            \"openjpa.jdbc.QuerySQLCache\", \"true\",\n+            CLEAR_TABLES);\n+\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        QueryTest1 pc = null;\n+        for (int i = 0; i < 10; i++) {\n+            pc = new QueryTest1();\n+            if (i < 5)\n+                pc.setNum(4);\n+            else\n+                pc.setNum(i + 10);\n+            pc.setDate(new java.util.Date(9999));\n+            em.persist(pc);\n+        }\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+\n+\n+    public void testQueryWithResultClass() {\n+        EntityManager em = emf.createEntityManager();\n+        String jpql = \"SELECT o FROM QueryTest1 o\";\n+\n+        Query query = em.createQuery(jpql, QueryTest1.class);\n+\n+        List rs = query.getResultList();\n+        assertTrue(rs.get(0) instanceof QueryTest1);\n+        PreparedQuery pq = getPreparedQueryCache().get(jpql);\n+        assertNotNull(pq);\n+\n+        Query query2 = em.createQuery(jpql, QueryTest1.class);\n+        PreparedQuery pq2 = getPreparedQueryCache().get(jpql);\n+        assertEquals(pq, pq2);\n+        rs = query2.getResultList();\n+        assertTrue(rs.get(0) instanceof QueryTest1);\n+\n+        jpql = \"SELECT o.datum FROM QueryTest1 o\";\n+        query = em.createQuery(jpql, java.util.Date.class);\n+        rs = query.getResultList();\n+        assertTrue(rs.get(0) instanceof java.util.Date);\n+\n+        query = em.createNamedQuery(\"named\", QueryTest1.class);\n+        rs = query.getResultList();\n+        assertTrue(rs.get(0) instanceof QueryTest1);\n+\n+        em.close();\n+    }\n+    \n+    PreparedQueryCache getPreparedQueryCache() {\n+        return emf.getConfiguration().getQuerySQLCacheInstance();\n+    }\n+}"}]}

