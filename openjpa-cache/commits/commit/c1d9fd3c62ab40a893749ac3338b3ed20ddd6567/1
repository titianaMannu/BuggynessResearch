{"sha":"c1d9fd3c62ab40a893749ac3338b3ed20ddd6567","node_id":"MDY6Q29tbWl0MjA2MzY0OmMxZDlmZDNjNjJhYjQwYTg5Mzc0OWFjMzMzOGIzZWQyMGRkZDY1Njc=","commit":{"author":{"name":"Mark Struberg","email":"struberg@apache.org","date":"2019-01-10T12:25:38Z"},"committer":{"name":"Mark Struberg","email":"struberg@apache.org","date":"2019-01-10T12:25:38Z"},"message":"OPENJPA-2768 fix XMLStore xml handling\n\nthe SAXParser handler didn't properly distinguish between 'extent' and 'element'","tree":{"sha":"8e0654211db7562d6a2cb927b548be3314cbd435","url":"https://api.github.com/repos/apache/openjpa/git/trees/8e0654211db7562d6a2cb927b548be3314cbd435"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/c1d9fd3c62ab40a893749ac3338b3ed20ddd6567","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/c1d9fd3c62ab40a893749ac3338b3ed20ddd6567","html_url":"https://github.com/apache/openjpa/commit/c1d9fd3c62ab40a893749ac3338b3ed20ddd6567","comments_url":"https://api.github.com/repos/apache/openjpa/commits/c1d9fd3c62ab40a893749ac3338b3ed20ddd6567/comments","author":{"login":"struberg","id":79310,"node_id":"MDQ6VXNlcjc5MzEw","avatar_url":"https://avatars.githubusercontent.com/u/79310?v=4","gravatar_id":"","url":"https://api.github.com/users/struberg","html_url":"https://github.com/struberg","followers_url":"https://api.github.com/users/struberg/followers","following_url":"https://api.github.com/users/struberg/following{/other_user}","gists_url":"https://api.github.com/users/struberg/gists{/gist_id}","starred_url":"https://api.github.com/users/struberg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/struberg/subscriptions","organizations_url":"https://api.github.com/users/struberg/orgs","repos_url":"https://api.github.com/users/struberg/repos","events_url":"https://api.github.com/users/struberg/events{/privacy}","received_events_url":"https://api.github.com/users/struberg/received_events","type":"User","site_admin":false},"committer":{"login":"struberg","id":79310,"node_id":"MDQ6VXNlcjc5MzEw","avatar_url":"https://avatars.githubusercontent.com/u/79310?v=4","gravatar_id":"","url":"https://api.github.com/users/struberg","html_url":"https://github.com/struberg","followers_url":"https://api.github.com/users/struberg/followers","following_url":"https://api.github.com/users/struberg/following{/other_user}","gists_url":"https://api.github.com/users/struberg/gists{/gist_id}","starred_url":"https://api.github.com/users/struberg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/struberg/subscriptions","organizations_url":"https://api.github.com/users/struberg/orgs","repos_url":"https://api.github.com/users/struberg/repos","events_url":"https://api.github.com/users/struberg/events{/privacy}","received_events_url":"https://api.github.com/users/struberg/received_events","type":"User","site_admin":false},"parents":[{"sha":"08acaa4f559d53afc413720ab65e429614bc5c52","url":"https://api.github.com/repos/apache/openjpa/commits/08acaa4f559d53afc413720ab65e429614bc5c52","html_url":"https://github.com/apache/openjpa/commit/08acaa4f559d53afc413720ab65e429614bc5c52"}],"stats":{"total":170,"additions":81,"deletions":89},"files":[{"sha":"d8b138496a23909be1132c3810cbbe70a51c805f","filename":"openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/XMLFileHandler.java","status":"modified","additions":71,"deletions":79,"changes":150,"blob_url":"https://github.com/apache/openjpa/blob/c1d9fd3c62ab40a893749ac3338b3ed20ddd6567/openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/XMLFileHandler.java","raw_url":"https://github.com/apache/openjpa/raw/c1d9fd3c62ab40a893749ac3338b3ed20ddd6567/openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/XMLFileHandler.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/XMLFileHandler.java?ref=c1d9fd3c62ab40a893749ac3338b3ed20ddd6567","patch":"@@ -357,52 +357,49 @@ public void startElement(String uri, String localName, String qName,\n \n         private void startElement(String qName, Attributes attrs)\n             throws Exception {\n-            switch (qName.charAt(0)) {\n-                case 'o': // object\n-                    // get the metadata for the type we're reading\n-                    String type = attrs.getValue(\"class\");\n-                    ClassMetaData meta = _conf.getMetaDataRepositoryInstance().\n+\n+            if (\"object\".equals(qName)) { // object\n+                // get the metadata for the type we're reading\n+                String type = attrs.getValue(\"class\");\n+                ClassMetaData meta = _conf.getMetaDataRepositoryInstance().\n                         getMetaData(classForName(type), null, true);\n \n-                    // construct the oid object\n-                    Object oid;\n-                    if (meta.getIdentityType() == ClassMetaData.ID_DATASTORE)\n-                        oid = new Id(attrs.getValue(\"oid\"), _conf, null);\n-                    else\n-                        oid = PCRegistry.newObjectId(meta.getDescribedType(),\n+                // construct the oid object\n+                Object oid;\n+                if (meta.getIdentityType() == ClassMetaData.ID_DATASTORE)\n+                    oid = new Id(attrs.getValue(\"oid\"), _conf, null);\n+                else\n+                    oid = PCRegistry.newObjectId(meta.getDescribedType(),\n                             attrs.getValue(\"oid\"));\n \n-                    // create an ObjectData that will contain the information\n-                    // for this instance, and set the version\n-                    _object = new ObjectData(oid, meta);\n-                    _object.setVersion(new Long(attrs.getValue(\"version\")));\n-                    break;\n-\n-                case 'f': // field\n-                    // start parsing a field element: for container types,\n-                    // initialize the container; for other types, initialize a\n-                    // buffer\n-                    _fmd =\n-                        _object.getMetaData().getField(attrs.getValue(\"name\"));\n-                    switch (_fmd.getTypeCode()) {\n-                        case JavaTypes.COLLECTION:\n-                        case JavaTypes.ARRAY:\n-                            _fieldVal = new ArrayList();\n-                            break;\n-                        case JavaTypes.MAP:\n-                            _fieldVal = new HashMap();\n-                            break;\n-                        default:\n-                            _buf = new StringBuffer();\n-                    }\n-                    break;\n+                // create an ObjectData that will contain the information\n+                // for this instance, and set the version\n+                _object = new ObjectData(oid, meta);\n+                _object.setVersion(new Long(attrs.getValue(\"version\")));\n+            }\n+            else if (\"field\".equals(qName)) { // field\n+                // start parsing a field element: for container types,\n+                // initialize the container; for other types, initialize a\n+                // buffer\n+                _fmd = _object.getMetaData().getField(attrs.getValue(\"name\"));\n+                switch (_fmd.getTypeCode()) {\n+                    case JavaTypes.COLLECTION:\n+                    case JavaTypes.ARRAY:\n+                        _fieldVal = new ArrayList();\n+                        break;\n+                    case JavaTypes.MAP:\n+                        _fieldVal = new HashMap();\n+                        break;\n+                    default:\n+                        _buf = new StringBuffer();\n+                }\n+            }\n+            else if (\"element\".equals(qName) ||\n+                     \"key\".equals(qName)     ||\n+                     \"value\".equals(qName) ) { // field\n \n-                case 'e': // element\n-                case 'k': // key\n-                case 'v': // value\n                     // initialize a buffer for the element value\n                     _buf = new StringBuffer();\n-                    break;\n             }\n         }\n \n@@ -411,7 +408,7 @@ public void endElement(String uri, String localName, String qName)\n             throws SAXException {\n             try {\n                 endElement(qName);\n-            } catch (RuntimeException re) {\n+                } catch (RuntimeException re) {\n                 throw re;\n             } catch (SAXException se) {\n                 throw se;\n@@ -423,49 +420,44 @@ public void endElement(String uri, String localName, String qName)\n         private void endElement(String qName)\n             throws Exception {\n             Object val;\n-            switch (qName.charAt(0)) {\n-                case 'o': // object\n-                    // add the object to our results\n-                    _extent.add(_object);\n-\n-                case 'f': // field\n-                    switch (_fmd.getTypeCode()) {\n-                        case JavaTypes.COLLECTION:\n-                        case JavaTypes.ARRAY:\n-                        case JavaTypes.MAP:\n-                            // field value already constructed\n-                            break;\n-                        default:\n-                            // construct the field value from text within the\n-                            // element\n-                            _fieldVal = fromXMLString(_fmd.getTypeCode(),\n+            if (\"object\".equals(qName)) {\n+                // add the object to our results\n+                _extent.add(_object);\n+            }\n+            else if (\"field\".equals(qName)) {\n+                switch (_fmd.getTypeCode()) {\n+                    case JavaTypes.COLLECTION:\n+                    case JavaTypes.ARRAY:\n+                    case JavaTypes.MAP:\n+                        // field value already constructed\n+                        break;\n+                    default:\n+                        // construct the field value from text within the\n+                        // element\n+                        _fieldVal = fromXMLString(_fmd.getTypeCode(),\n                                 _fmd.getTypeMetaData(), _buf.toString());\n-                    }\n-\n-                    // set the field value into the object being parsed\n-                    _object.setField(_fmd.getIndex(), _fieldVal);\n-                    break;\n+                }\n \n-                case 'e': // element\n-                    // cache element value\n-                    val = fromXMLString(_fmd.getElement().getTypeCode(),\n+                // set the field value into the object being parsed\n+                _object.setField(_fmd.getIndex(), _fieldVal);\n+            }\n+            else if (\"element\".equals(qName)) {\n+                // cache element value\n+                val = fromXMLString(_fmd.getElement().getTypeCode(),\n                         _fmd.getElement().getTypeMetaData(), _buf.toString());\n-                    ((Collection) _fieldVal).add(val);\n-                    break;\n-\n-                case 'k': // key\n-                    // cache key value\n-                    _keyVal = fromXMLString(_fmd.getKey().getTypeCode(),\n+                ((Collection) _fieldVal).add(val);\n+            }\n+            else if (\"key\".equals(qName)) {\n+                // cache key value\n+                _keyVal = fromXMLString(_fmd.getKey().getTypeCode(),\n                         _fmd.getKey().getTypeMetaData(), _buf.toString());\n-                    break;\n-\n-                case 'v': // value\n-                    // create value and put cached key and value into map\n-                    val = fromXMLString(_fmd.getElement().getTypeCode(),\n-                        _fmd.getElement().getTypeMetaData(), _buf.toString());\n-                    Map map = (Map) _fieldVal;\n-                    map.put(_keyVal, val);\n-                    break;\n+            }\n+            else if (\"value\".equals(qName)) {\n+                // create value and put cached key and value into map\n+                val = fromXMLString(_fmd.getElement().getTypeCode(),\n+                    _fmd.getElement().getTypeMetaData(), _buf.toString());\n+                Map map = (Map) _fieldVal;\n+                map.put(_keyVal, val);\n             }\n \n             // don't cache text between elements"},{"sha":"7cc330fd8f99d294130624de4ae2c5ac4fa88f4c","filename":"openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/XMLStore.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/c1d9fd3c62ab40a893749ac3338b3ed20ddd6567/openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/XMLStore.java","raw_url":"https://github.com/apache/openjpa/raw/c1d9fd3c62ab40a893749ac3338b3ed20ddd6567/openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/XMLStore.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/XMLStore.java?ref=c1d9fd3c62ab40a893749ac3338b3ed20ddd6567","patch":"@@ -118,8 +118,8 @@ public synchronized void beginTransaction() {\n      * @param updates {@link ObjectData} instances to insert or update\n      * @param deletes {@link ObjectData} instances to delete\n      */\n-    public synchronized void endTransaction(Collection updates,\n-        Collection deletes) {\n+    public synchronized void endTransaction(Collection<ObjectData> updates,\n+                                            Collection<ObjectData> deletes) {\n         // track dirty types\n         Set dirty = new HashSet();\n         try {\n@@ -154,6 +154,6 @@ public synchronized void endTransaction(Collection updates,\n             // unlock store\n             notify();\n             _locked = false;\n-\t\t}\n-\t}\n+        }\n+    }\n }"},{"sha":"5562c98c279e503d3c3b76b71ea2ee50392f9a6e","filename":"openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/XMLStoreManager.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/c1d9fd3c62ab40a893749ac3338b3ed20ddd6567/openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/XMLStoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/c1d9fd3c62ab40a893749ac3338b3ed20ddd6567/openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/XMLStoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/XMLStoreManager.java?ref=c1d9fd3c62ab40a893749ac3338b3ed20ddd6567","patch":"@@ -51,8 +51,8 @@\n     private XMLStore _store;\n \n     // changed data within the current transaction\n-    private Collection _updates;\n-    private Collection _deletes;\n+    private Collection<ObjectData> _updates;\n+    private Collection<ObjectData> _deletes;\n \n     @Override\n     protected Collection getUnsupportedOptions() {\n@@ -201,17 +201,17 @@ public void rollback() {\n     }\n \n     @Override\n-    protected Collection flush(Collection pNew, Collection pNewUpdated,\n-        Collection pNewFlushedDeleted, Collection pDirty, Collection pDeleted) {\n+    protected Collection flush(Collection<OpenJPAStateManager> pNew, Collection<OpenJPAStateManager> pNewUpdated,\n+        Collection<OpenJPAStateManager> pNewFlushedDeleted, Collection<OpenJPAStateManager> pDirty, Collection<OpenJPAStateManager> pDeleted) {\n         // we don't support incremental flushing, so pNewUpdated and\n         // pNewFlushedDeleted should be empty; we ignore them here\n \n         // track optimistic violations\n         Collection exceps = new LinkedList();\n \n         // convert instances to ObjectDatas\n-        _updates = new ArrayList(pNew.size() + pDirty.size());\n-        _deletes = new ArrayList(pDeleted.size());\n+        _updates = new ArrayList<>(pNew.size() + pDirty.size());\n+        _deletes = new ArrayList<>(pDeleted.size());\n \n         // convert additions\n         for (Iterator itr = pNew.iterator(); itr.hasNext();) {"}]}

