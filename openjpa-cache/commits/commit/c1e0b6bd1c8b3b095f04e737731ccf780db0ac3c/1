{"sha":"c1e0b6bd1c8b3b095f04e737731ccf780db0ac3c","node_id":"MDY6Q29tbWl0MjA2MzY0OmMxZTBiNmJkMWM4YjNiMDk1ZjA0ZTczNzczMWNjZjc4MGRiMGFjM2M=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2009-12-08T16:53:56Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2009-12-08T16:53:56Z"},"message":"OPENJPA-1414: Performance improvements for detach processing. Patch contributed by Dianne Richards.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@888481 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"13eb2e690202ebc4add52953678fb58ec60b131a","url":"https://api.github.com/repos/apache/openjpa/git/trees/13eb2e690202ebc4add52953678fb58ec60b131a"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/c1e0b6bd1c8b3b095f04e737731ccf780db0ac3c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/c1e0b6bd1c8b3b095f04e737731ccf780db0ac3c","html_url":"https://github.com/apache/openjpa/commit/c1e0b6bd1c8b3b095f04e737731ccf780db0ac3c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/c1e0b6bd1c8b3b095f04e737731ccf780db0ac3c/comments","author":null,"committer":null,"parents":[{"sha":"70518a3685fd93cb67e8591f4f48e2545c005bbd","url":"https://api.github.com/repos/apache/openjpa/commits/70518a3685fd93cb67e8591f4f48e2545c005bbd","html_url":"https://github.com/apache/openjpa/commit/70518a3685fd93cb67e8591f4f48e2545c005bbd"}],"stats":{"total":54,"additions":46,"deletions":8},"files":[{"sha":"7896fdd39e42d15ed52d3679cdd7aee2a51a2d48","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java","status":"modified","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/apache/openjpa/blob/c1e0b6bd1c8b3b095f04e737731ccf780db0ac3c/openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java","raw_url":"https://github.com/apache/openjpa/raw/c1e0b6bd1c8b3b095f04e737731ccf780db0ac3c/openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java?ref=c1e0b6bd1c8b3b095f04e737731ccf780db0ac3c","patch":"@@ -65,6 +65,7 @@\n     private boolean _isAbstractMappingUniDirectional = false;\n     private boolean _isNonDefaultMappingAllowed = false;\n     private boolean _reorderMetaDataResolution = true;\n+    private boolean _reloadOnDetach = false;\n     \n     /**\n      * Whether to require exact identity value types when creating object\n@@ -494,4 +495,31 @@ public void setReorderMetaDataResolution(boolean reorderProcessBuffer) {\n         _reorderMetaDataResolution = reorderProcessBuffer;\n     }\n \n+    /**\n+     * Whether OpenJPA should attempt to load fields when the DetachState\n+     * option is set to loaded. This also determines whether a\n+     * redundant copy of the version field is made. Beginning in 2.0\n+     * it defaults to false.\n+     * \n+     * @return the _reloadOnDetach\n+     * \n+     * @since 1.2.2\n+     */\n+    public boolean getReloadOnDetach() {\n+        return _reloadOnDetach;\n+    }\n+\n+    /**\n+     * Whether OpenJPA should attempt to load fields when the DetachState\n+     * option is set to loaded. This also determines whether a\n+     * redundant copy of the version field is made. Beginning in 2.0\n+     * it defaults to false.\n+     * \n+     * @param reloadOnDetach the _reloadOnDetach to set\n+     * \n+     * @since 1.2.2\n+     */\n+    public void setReloadOnDetach(boolean reloadOnDetach) {\n+        _reloadOnDetach = reloadOnDetach;\n+    }       \n }"},{"sha":"53566875d1d5ad43d92011cda437a92a2aee7890","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachManager.java","status":"modified","additions":18,"deletions":8,"changes":26,"blob_url":"https://github.com/apache/openjpa/blob/c1e0b6bd1c8b3b095f04e737731ccf780db0ac3c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachManager.java","raw_url":"https://github.com/apache/openjpa/raw/c1e0b6bd1c8b3b095f04e737731ccf780db0ac3c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachManager.java?ref=c1e0b6bd1c8b3b095f04e737731ccf780db0ac3c","patch":"@@ -70,7 +70,8 @@\n     private final boolean _failFast;\n     private boolean _flushed = false;\n     private boolean _flushBeforeDetach;\n-    private boolean _cascadeWithDetach;    \n+    private boolean _cascadeWithDetach; \n+    private boolean _reloadOnDetach;\n \n     // if we're not detaching full, we need to track all detached objects;\n     // if we are, then we use a special field manager for more efficient\n@@ -95,7 +96,7 @@ static boolean preSerialize(StateManagerImpl sm) {\n         boolean setState = meta.getDetachedState() != null\n             && !ClassMetaData.SYNTHETIC.equals(meta.getDetachedState());\n         BitSet idxs = (setState) ? new BitSet(meta.getFields().length) : null;\n-        preDetach(sm.getBroker(), sm, idxs);\n+        preDetach(sm.getBroker(), sm, idxs, false, true);\n \n         if (setState) {\n             sm.getPersistenceCapable().pcSetDetachedState(getDetachedState\n@@ -123,7 +124,7 @@ static boolean writeDetachedState(StateManagerImpl sm, ObjectOutput out,\n         flushDirty(sm);\n \n         Broker broker = sm.getBroker();\n-        preDetach(broker, sm, idxs);\n+        preDetach(broker, sm, idxs, false, true);\n \n         // write detached state object and state manager\n         DetachOptions opts = broker.getConfiguration().\n@@ -148,7 +149,8 @@ static boolean writeDetachedState(StateManagerImpl sm, ObjectOutput out,\n      * effect of this method\n      */\n     private static void preDetach(Broker broker, StateManagerImpl sm,\n-        BitSet idxs) {\n+        BitSet idxs, boolean full,\n+        boolean reloadOnDetach) {\n         // make sure the existing object has the right fields fetched; call\n         // even if using currently-loaded fields for detach to make sure\n         // version is set\n@@ -160,8 +162,12 @@ private static void preDetach(Broker broker, StateManagerImpl sm,\n         else if (detachMode == DETACH_ALL)\n             loadMode = StateManagerImpl.LOAD_ALL;\n         try {\n-            sm.load(broker.getFetchConfiguration(), loadMode, exclude, null, \n-                false);\n+            if (detachMode != DETACH_LOADED || \n+                    reloadOnDetach ||\n+                    (!reloadOnDetach && !full)) {\n+                sm.load(broker.getFetchConfiguration(), loadMode, exclude,\n+                    null, false);\n+            }\n         } catch (ObjectNotFoundException onfe) {\n             // consume the exception\n         }\n@@ -280,6 +286,7 @@ public DetachManager(BrokerImpl broker, boolean full, OpCallbacks call) {\n         Compatibility compatibility = \n             broker.getConfiguration().getCompatibilityInstance();\n         _flushBeforeDetach = compatibility.getFlushBeforeDetach();\n+        _reloadOnDetach = compatibility.getReloadOnDetach();\n         _cascadeWithDetach = compatibility.getCascadeWithDetach();\n         if (full) {\n             _copy = false;\n@@ -441,7 +448,8 @@ private Object detachInternal(Object toDetach) {\n         }\n         \n         BitSet fields = new BitSet();\n-        preDetach(_broker, sm, fields);\n+        preDetach(_broker, sm, fields, _full,\n+            _reloadOnDetach);\n \n         // create and store new object before copy to avoid endless recursion\n         PersistenceCapable pc = sm.getPersistenceCapable();\n@@ -462,7 +470,9 @@ private Object detachInternal(Object toDetach) {\n                 _opts.getAccessUnloaded(), _broker.getMultithreaded());\n         if (_full) {\n             _fullFM.setStateManager(sm);\n-            _fullFM.detachVersion();\n+            if (_copy || _reloadOnDetach) {\n+                _fullFM.detachVersion();\n+            }\n             _fullFM.reproxy(detSM);\n             _fullFM.setStateManager(null);\n         } else {"}]}

