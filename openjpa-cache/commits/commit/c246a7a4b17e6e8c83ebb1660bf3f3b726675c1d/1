{"sha":"c246a7a4b17e6e8c83ebb1660bf3f3b726675c1d","node_id":"MDY6Q29tbWl0MjA2MzY0OmMyNDZhN2E0YjE3ZTZlOGM4M2ViYjE2NjBiZjNmM2I3MjY2NzVjMWQ=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-01-22T15:20:03Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-01-22T15:20:03Z"},"message":"OPENJPA-1150:  \nRemoving incomplete WriteBehind implementation.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@902113 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e8d40f194eaf18be6192a3bb60c6b6f6ae0c4ad8","url":"https://api.github.com/repos/apache/openjpa/git/trees/e8d40f194eaf18be6192a3bb60c6b6f6ae0c4ad8"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/c246a7a4b17e6e8c83ebb1660bf3f3b726675c1d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/c246a7a4b17e6e8c83ebb1660bf3f3b726675c1d","html_url":"https://github.com/apache/openjpa/commit/c246a7a4b17e6e8c83ebb1660bf3f3b726675c1d","comments_url":"https://api.github.com/repos/apache/openjpa/commits/c246a7a4b17e6e8c83ebb1660bf3f3b726675c1d/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"d299ac431108416d606549ec771ca5b5a26d78a6","url":"https://api.github.com/repos/apache/openjpa/commits/d299ac431108416d606549ec771ca5b5a26d78a6","html_url":"https://github.com/apache/openjpa/commit/d299ac431108416d606549ec771ca5b5a26d78a6"}],"stats":{"total":3196,"additions":5,"deletions":3191},"files":[{"sha":"d1548b6ffd072a9602f9ad3663a895120dc4d227","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfiguration.java","status":"modified","additions":0,"deletions":50,"changes":50,"blob_url":"https://github.com/apache/openjpa/blob/c246a7a4b17e6e8c83ebb1660bf3f3b726675c1d/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/c246a7a4b17e6e8c83ebb1660bf3f3b726675c1d/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfiguration.java?ref=c246a7a4b17e6e8c83ebb1660bf3f3b726675c1d","patch":"@@ -55,8 +55,6 @@\n import org.apache.openjpa.util.ClassResolver;\n import org.apache.openjpa.util.ProxyManager;\n import org.apache.openjpa.util.StoreFacadeTypeRegistry;\n-import org.apache.openjpa.writebehind.WriteBehindCacheManager;\n-import org.apache.openjpa.writebehind.WriteBehindCallback;\n \n /**\n  * Defines the properties necessary to configure runtime properties and\n@@ -1731,54 +1729,6 @@\n      */\n     public void setLifecycleEventManager(String eventMgr);\n \n-    /**\n-     * The {@link WriteBehindCache} configuration string.\n-     * @since 2.0.0\n-     */\n-    public String getWriteBehindCache();\n-\n-    /**\n-     * Set the {@link WriteBehindCache} configuration string.\n-     * @since 2.0.0\n-     */\n-    public void setWriteBehindCache(String writeBehindCache);\n-    \n-    /**\n-     * Get the {@link WriteBehindCacheManager} configuration string.\n-     * @since 2.0.0\n-     */\n-    public String getWriteBehindCacheManager();\n-\n-    /**\n-     * Set the {@link WriteBehindCacheManager} configuration string.\n-     * @since 2.0.0\n-     */\n-    public void setWriteBehindCacheManager(String writeBehindCache);\n-    \n-    /**\n-     * Get the {@link WriteBehindCacheManager} instance for this configuration.\n-     * @since 2.0.0\n-     */\n-    public WriteBehindCacheManager getWriteBehindCacheManagerInstance();\n-    \n-    /**\n-     * Get the {@link WriteBehindCallback} configuration string.\n-     * @since 2.0.0\n-     */\n-    public String getWriteBehindCallback();\n-    \n-    /**\n-     * Get the {@link WriteBehindCallback} instance for this configuration.\n-     * @since 2.0.0 \n-     */\n-    public WriteBehindCallback getWriteBehindCallbackInstance();\n-    \n-    /**\n-     * Set the {@link WriteBehindCallback} configuration string.\n-     * @since 2.0.0\n-     */\n-    public void setWriteBehindCallback(String wbcallback);\n-\n     /**\n      * Gets the validation groups for pre-persist\n      * "},{"sha":"75de8e07840411329e346acae99146c3dda0becb","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","status":"modified","additions":0,"deletions":75,"changes":75,"blob_url":"https://github.com/apache/openjpa/blob/c246a7a4b17e6e8c83ebb1660bf3f3b726675c1d/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/c246a7a4b17e6e8c83ebb1660bf3f3b726675c1d/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java?ref=c246a7a4b17e6e8c83ebb1660bf3f3b726675c1d","patch":"@@ -70,11 +70,6 @@\n import org.apache.openjpa.util.ProxyManager;\n import org.apache.openjpa.util.StoreFacadeTypeRegistry;\n import org.apache.openjpa.validation.ValidatingLifecycleEventManager;\n-import org.apache.openjpa.writebehind.SimpleWriteBehindCache;\n-import org.apache.openjpa.writebehind.SimpleWriteBehindCallback;\n-import org.apache.openjpa.writebehind.WriteBehindCacheManager;\n-import org.apache.openjpa.writebehind.WriteBehindCacheManagerImpl;\n-import org.apache.openjpa.writebehind.WriteBehindCallback;\n \n /**\n  * Implementation of the {@link OpenJPAConfiguration} interface.\n@@ -584,32 +579,6 @@ public OpenJPAConfigurationImpl(boolean derivations, boolean loadGlobals) {\n         supportedOptions.add(OPTION_VALUE_INCREMENT);\n         supportedOptions.add(OPTION_DATASTORE_CONNECTION);\n         \n-        writeBehindCacheManagerPlugin = addPlugin(\"WriteBehindCacheManager\", true);\n-        aliases = new String[] { \"default\", WriteBehindCacheManagerImpl.class.getName() };\n-        writeBehindCacheManagerPlugin.setAliases(aliases);\n-        writeBehindCacheManagerPlugin.setDefault(aliases[0]);\n-        writeBehindCacheManagerPlugin.setString(aliases[0]);\n-        writeBehindCacheManagerPlugin.setInstantiatingGetter(\"getWriteBehindCacheManager\");\n-\n-        writeBehindCachePlugin = addPlugin(\"WriteBehindCache\", false);\n-        aliases = new String[] { \n-            \"false\",  null, \n-            \"true\",   SimpleWriteBehindCache.class.getName(), \n-            \"simple\", SimpleWriteBehindCache.class.getName() };\n-        writeBehindCachePlugin.setAliases(aliases);\n-        writeBehindCachePlugin.setDefault(aliases[0]);\n-        writeBehindCachePlugin.setString(aliases[0]);\n-        \n-        writeBehindCallbackPlugin = addPlugin(\"WriteBehindCallback\", true); \n-        aliases = new String[] { \n-            \"false\",  null, \n-            \"true\",   SimpleWriteBehindCallback.class.getName(), \n-            \"simple\", SimpleWriteBehindCallback.class.getName() };\n-        writeBehindCallbackPlugin.setAliases(aliases);\n-        writeBehindCallbackPlugin.setDefault(aliases[0]);\n-        writeBehindCallbackPlugin.setString(aliases[0]);\n-        \n-\n         if (derivations)\n             ProductDerivations.beforeConfigurationLoad(this);\n         if (loadGlobals)\n@@ -1709,50 +1678,6 @@ public void setDynamicEnhancementAgent(boolean dynamic) {\n         dynamicEnhancementAgent.set(dynamic);\n     }    \n \n-    public String getWriteBehindCache() {\n-        return writeBehindCachePlugin.getString();\n-    }\n-\n-    public void setWriteBehindCache(String writeBehindCache) {\n-        writeBehindCachePlugin.setString(writeBehindCache);\n-    }\n-    \n-    public String getWriteBehindCacheManager() {\n-        return writeBehindCacheManagerPlugin.getString();\n-    }\n-\n-    public void setWriteBehindCacheManager(String writeBehindCacheManager) {\n-        writeBehindCacheManagerPlugin.setString(writeBehindCacheManager);\n-    }\n-\n-    public WriteBehindCacheManager getWriteBehindCacheManagerInstance() {\n-        WriteBehindCacheManager wbcm =\n-            (WriteBehindCacheManager) writeBehindCacheManagerPlugin.get();\n-        if (wbcm == null) {\n-            wbcm =\n-                (WriteBehindCacheManager) writeBehindCacheManagerPlugin\n-                    .instantiate(WriteBehindCacheManager.class, this);\n-            wbcm.initialize(this, writeBehindCachePlugin); \n-        }\n-        return wbcm;\n-    }\n-    \n-    public String getWriteBehindCallback() { \n-        return writeBehindCallbackPlugin.getString();\n-        \n-    }\n-    public WriteBehindCallback getWriteBehindCallbackInstance() {\n-        WriteBehindCallback callback = (WriteBehindCallback) writeBehindCallbackPlugin.get();\n-        if (callback == null) {\n-            callback = (WriteBehindCallback) writeBehindCallbackPlugin.instantiate(WriteBehindCallback.class, this);\n-        }\n-        return callback;\n-    }\n-    \n-    public void setWriteBehindCallback(String writeBehindCallback) {\n-        writeBehindCallbackPlugin.setString(writeBehindCallback);\n-    }\n-    \n     public void setEncryptionProvider(String p) {\n         encryptionProvider.setString(p);\n     }"},{"sha":"bf696e944c7d717a9f8b5a864cd40b4f19a56c49","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","status":"modified","additions":5,"deletions":75,"changes":80,"blob_url":"https://github.com/apache/openjpa/blob/c246a7a4b17e6e8c83ebb1660bf3f3b726675c1d/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","raw_url":"https://github.com/apache/openjpa/raw/c246a7a4b17e6e8c83ebb1660bf3f3b726675c1d/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java?ref=c246a7a4b17e6e8c83ebb1660bf3f3b726675c1d","patch":"@@ -63,10 +63,6 @@\n import org.apache.openjpa.util.MetaDataException;\n import org.apache.openjpa.util.OpenJPAException;\n import org.apache.openjpa.util.UserException;\n-import org.apache.openjpa.writebehind.WriteBehindCache;\n-import org.apache.openjpa.writebehind.WriteBehindCallback;\n-import org.apache.openjpa.writebehind.WriteBehindConfigurationException;\n-import org.apache.openjpa.writebehind.WriteBehindStoreManager;\n \n /**\n  * Abstract implementation of the {@link BrokerFactory}\n@@ -117,8 +113,6 @@\n     // and later identified\n     private Object _poolKey;   \n     \n-    private WriteBehindCallback _writeBehindCallback; \n-\n     /**\n      * Return an internal factory pool key for the given configuration.\n      *\n@@ -163,8 +157,6 @@ protected AbstractBrokerFactory(OpenJPAConfiguration config) {\n             \t_conf.isConnectionFactoryModeManaged(),\n                 _conf.getConnectionRetainModeConstant(), false).close(); \n         }\n-\n-        initWriteBehindCallback();        \n     }\n \n     /**\n@@ -189,13 +181,8 @@ public Broker newBroker(boolean managed, int connRetainMode) {\n     public Broker newBroker(String user, String pass, boolean managed, int connRetainMode) {\n         return newBroker(user, pass, managed, connRetainMode, true);\n     }\n-\n-    public Broker newBroker(String user, String pass, boolean managed, int connRetainMode, boolean findExisting) {\n-        return newBroker(user, pass, managed, connRetainMode, findExisting, false);\n-    }\n     \n-    public Broker newBroker(String user, String pass, boolean managed, int connRetainMode, boolean findExisting,\n-        boolean writeBehindCallback) {\n+    public Broker newBroker(String user, String pass, boolean managed, int connRetainMode, boolean findExisting) {\n         try {\n             assertOpen();\n             makeReadOnly();\n@@ -205,7 +192,7 @@ public Broker newBroker(String user, String pass, boolean managed, int connRetai\n                 broker = findBroker(user, pass, managed);\n             if (broker == null) {\n                 broker = newBrokerImpl(user, pass);\n-                initializeBroker(managed, connRetainMode, broker, false, writeBehindCallback);\n+                initializeBroker(managed, connRetainMode, broker, false);\n             }\n             return broker;\n         } catch (OpenJPAException ke) {\n@@ -216,18 +203,12 @@ public Broker newBroker(String user, String pass, boolean managed, int connRetai\n     }\n \n     void initializeBroker(boolean managed, int connRetainMode, Broker broker, boolean fromDeserialization) {\n-        initializeBroker(managed, connRetainMode, broker, fromDeserialization, false);\n-    }    \n-    \n-    void initializeBroker(boolean managed, int connRetainMode, Broker broker, boolean fromDeserialization,\n-        boolean fromWriteBehindCallback) {\n         assertOpen();\n         makeReadOnly();\n         \n         DelegatingStoreManager dsm = createDelegatingStoreManager();\n \n-        ((BrokerImpl) broker).initialize(this, dsm, managed, connRetainMode, fromDeserialization,\n-            fromWriteBehindCallback);\n+        ((BrokerImpl) broker).initialize(this, dsm, managed, connRetainMode, fromDeserialization);\n         if (!fromDeserialization)\n             addListeners(broker);\n \n@@ -377,10 +358,6 @@ public boolean isClosed() {\n     public void close() {\n         lock();\n \n-        if(_writeBehindCallback != null) {\n-            _writeBehindCallback.close();\n-        }\n-        \n         try {\n             assertOpen();\n             assertNoActiveTransaction();\n@@ -828,11 +805,7 @@ public void afterCompletion(int status) {\n     /**\n      * <P>\n      * Create a DelegatingStoreManager for use with a Broker created by this factory.\n-     * </P>\n-     * <P>\n-     * If a DataCache has been enabled a DataCacheStoreManager will be returned. If a WriteBehind cache is also enabled \n-     * the DataCacheStoreManager will  delegate to a WriteBehindStoreManager. If no WriteBehindCache is in use the \n-     * DataCache will delegate to a StoreManager returned by newStoreManager(). \n+     * If a DataCache has been enabled a DataCacheStoreManager will be returned.\n      * </P>\n      * <P>\n      * If no DataCache is in use an ROPStoreManager will be returned. \n@@ -849,54 +822,11 @@ protected DelegatingStoreManager createDelegatingStoreManager() {\n         StoreManager sm = newStoreManager();\n         DelegatingStoreManager dsm = null;\n         if (_conf.getDataCacheManagerInstance().getSystemDataCache() != null) {\n-            WriteBehindCache wbCache = _conf.getWriteBehindCacheManagerInstance().getSystemWriteBehindCache();\n-            if (wbCache != null) {\n-                dsm = new DataCacheStoreManager(new WriteBehindStoreManager(sm, wbCache));\n-            } else {\n-                dsm = new DataCacheStoreManager(sm);\n-            }\n+            dsm = new DataCacheStoreManager(sm);\n         }\n         dsm = new ROPStoreManager((dsm == null) ? sm : dsm);\n         \n         return dsm;\n     }\n-    \n-    protected void initWriteBehindCallback() { \n-        WriteBehindCache cache = _conf.getWriteBehindCacheManagerInstance().getSystemWriteBehindCache();\n-        if (cache != null) {\n-            // Verify we are not missing one or more of the following required\n-            // WriteBehind configuration parameters:\n-            //   - openjpa.DataCache\n-            //   - openjpa.WriteBehindCallback\n-            if (_conf.getDataCacheManagerInstance().getSystemDataCache() == null) {\n-                throw new WriteBehindConfigurationException(\n-                    _loc.get(\"writebehind-cfg-err\",\n-                    \"openjpa.DataCache\").getMessage());\n-            }\n-            if (_conf.getWriteBehindCallbackInstance() == null ) {\n-                throw new WriteBehindConfigurationException(\n-                    _loc.get(\"writebehind-cfg-err\",\n-                    \"openjpa.WriteBehindCallback\").getMessage());\n-            }\n-    \n-            Broker broker =\n-                newBroker(_conf.getConnectionUserName(), \n-                          _conf.getConnectionPassword(), \n-                          false, // WriteBehind broker is always unmanaged.\n-                          _conf.getConnectionRetainModeConstant(),\n-                          false, true);\n-\n-            // The Broker used by the WriteBehind cache should not be tracked\n-            // by the factory - we'll manually clean up when the factory is\n-            // closed.\n-            _transactional.remove(broker);\n-            _brokers.remove(broker);\n-            \n-            _writeBehindCallback = _conf.getWriteBehindCallbackInstance();\n-            _writeBehindCallback.initialize(broker, cache);\n-\n-            new Thread(_writeBehindCallback).start();\n-        }\n-    }\n }\n "},{"sha":"c32c60efe68a0ede2766eadd1fc6dfb2ac57890a","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/writebehind/AbstractWriteBehindCache.java","status":"removed","additions":0,"deletions":28,"changes":28,"blob_url":"https://github.com/apache/openjpa/blob/d299ac431108416d606549ec771ca5b5a26d78a6/openjpa-kernel/src/main/java/org/apache/openjpa/writebehind/AbstractWriteBehindCache.java","raw_url":"https://github.com/apache/openjpa/raw/d299ac431108416d606549ec771ca5b5a26d78a6/openjpa-kernel/src/main/java/org/apache/openjpa/writebehind/AbstractWriteBehindCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/writebehind/AbstractWriteBehindCache.java?ref=d299ac431108416d606549ec771ca5b5a26d78a6","patch":"@@ -1,28 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.writebehind;\n-\n-public abstract class AbstractWriteBehindCache implements WriteBehindCache {\n-    public String getName() {\n-        return null;\n-    }\n-    \n-    public void setName(String name) {\n-    }\n-}"},{"sha":"a3f67a6b77d8a7d96879d3aea5aa1f7b1c10b454","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/writebehind/AbstractWriteBehindCallback.java","status":"removed","additions":0,"deletions":23,"changes":23,"blob_url":"https://github.com/apache/openjpa/blob/d299ac431108416d606549ec771ca5b5a26d78a6/openjpa-kernel/src/main/java/org/apache/openjpa/writebehind/AbstractWriteBehindCallback.java","raw_url":"https://github.com/apache/openjpa/raw/d299ac431108416d606549ec771ca5b5a26d78a6/openjpa-kernel/src/main/java/org/apache/openjpa/writebehind/AbstractWriteBehindCallback.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/writebehind/AbstractWriteBehindCallback.java?ref=d299ac431108416d606549ec771ca5b5a26d78a6","patch":"@@ -1,23 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.writebehind;\n-\n-public abstract class AbstractWriteBehindCallback implements\n-    WriteBehindCallback {\n-}"},{"sha":"8923a0890647c6c7cb317f41ad851403fcf630e7","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/writebehind/SimpleWriteBehindCache.java","status":"removed","additions":0,"deletions":122,"changes":122,"blob_url":"https://github.com/apache/openjpa/blob/d299ac431108416d606549ec771ca5b5a26d78a6/openjpa-kernel/src/main/java/org/apache/openjpa/writebehind/SimpleWriteBehindCache.java","raw_url":"https://github.com/apache/openjpa/raw/d299ac431108416d606549ec771ca5b5a26d78a6/openjpa-kernel/src/main/java/org/apache/openjpa/writebehind/SimpleWriteBehindCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/writebehind/SimpleWriteBehindCache.java?ref=d299ac431108416d606549ec771ca5b5a26d78a6","patch":"@@ -1,122 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.writebehind;\n-\n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-\n-import org.apache.openjpa.enhance.PersistenceCapable;\n-import org.apache.openjpa.kernel.OpenJPAStateManager;\n-import org.apache.openjpa.kernel.StateManagerImpl;\n-import org.apache.openjpa.meta.ClassMetaData;\n-\n-public class SimpleWriteBehindCache extends AbstractWriteBehindCache {\n-\n-    private Map<WriteBehindCacheKey, OpenJPAStateManager> _cache = \n-        new HashMap<WriteBehindCacheKey, OpenJPAStateManager>();\n-\n-    public List<Exception> add(Collection<OpenJPAStateManager> sms) {\n-        List<Exception> exceptions = new ArrayList<Exception>();\n-        for (OpenJPAStateManager sm : sms) {\n-            try {\n-                add(sm);\n-            } catch (WriteBehindException wbe) {\n-                exceptions.add(wbe);\n-            }\n-        }\n-        return exceptions;\n-    }\n-\n-    protected void add(OpenJPAStateManager sm) {\n-        WriteBehindCacheKey key = getKey(sm);\n-        synchronized (_cache) {\n-            if (_cache.containsKey(key) && _cache.get(key) != sm) {\n-                _cache.put(key, merge(_cache.get(key), sm));\n-            } else { \n-                _cache.put(key, sm);\n-            }\n-        }\n-\n-    }\n-\n-    public boolean contains(Object o) {\n-        boolean rval = false;\n-        StateManagerImpl sm = getStateManager(o);\n-        if(sm != null) {\n-            rval =  _cache.containsKey(getKey(sm));    \n-        }\n-        return rval;\n-    }\n-\n-    public WriteBehindCacheKey getKey(OpenJPAStateManager sm) {\n-        ClassMetaData md = sm.getMetaData();\n-        Class<?> cls = md.getDescribedType();\n-        String className = cls.getCanonicalName();\n-        Object id = sm.getId();\n-        \n-        SimpleWriteBehindCacheKey key = new SimpleWriteBehindCacheKey(className, id);\n-        return key;\n-    }\n-\n-    public int getSize() {\n-        return _cache.size();\n-    }\n-\n-    public Collection<OpenJPAStateManager> getStateManagers() {\n-        return new ArrayList<OpenJPAStateManager>(_cache.values());\n-    }\n-\n-    public void initialize(WriteBehindCacheManager manager) {\n-        // TODO Auto-generated method stub\n-    }\n-\n-    protected StateManagerImpl getStateManager(Object o) {\n-        StateManagerImpl rval = null;\n-        if (o instanceof StateManagerImpl) {\n-            rval = (StateManagerImpl) o;\n-        } else if (o instanceof PersistenceCapable) {\n-            rval = (StateManagerImpl) ((PersistenceCapable) o).pcGetStateManager();\n-        }\n-        return rval;\n-    }\n-\n-    public void clear() {\n-        synchronized(_cache) { \n-            _cache.clear();\n-        }\n-    }\n-\n-    public boolean isEmpty() {\n-        return _cache.isEmpty();\n-    }\n-    \n-    // Might be better in smImpl. \n-    protected OpenJPAStateManager merge(OpenJPAStateManager from, OpenJPAStateManager into) {\n-        for (int i = 0; i < into.getMetaData().getFields().length; i++) {\n-            if (from.getDirty().get(i)) {\n-                into.dirty(i);\n-            }\n-        }\n-        return into;\n-    }\n-\n-}"},{"sha":"41187caa9326b0039d29b74d1640b6d01e1df566","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/writebehind/SimpleWriteBehindCacheKey.java","status":"removed","additions":0,"deletions":82,"changes":82,"blob_url":"https://github.com/apache/openjpa/blob/d299ac431108416d606549ec771ca5b5a26d78a6/openjpa-kernel/src/main/java/org/apache/openjpa/writebehind/SimpleWriteBehindCacheKey.java","raw_url":"https://github.com/apache/openjpa/raw/d299ac431108416d606549ec771ca5b5a26d78a6/openjpa-kernel/src/main/java/org/apache/openjpa/writebehind/SimpleWriteBehindCacheKey.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/writebehind/SimpleWriteBehindCacheKey.java?ref=d299ac431108416d606549ec771ca5b5a26d78a6","patch":"@@ -1,82 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.writebehind;\n-\n-/**\n- * Simple key implementation (concatenates entity classname with primary key\n- * value).\n- */\n-public class SimpleWriteBehindCacheKey implements WriteBehindCacheKey {\n-    public String _className;\n-    public Object _pk;\n-\n-    public SimpleWriteBehindCacheKey(String className, Object pk) {\n-        _className = className;\n-        _pk = pk;\n-    }\n-\n-    public Object getPk() {\n-        return _pk;\n-    }\n-\n-    public void setPk(Object pk) {\n-        this._pk = pk;\n-    }\n-\n-    public String getClassName() {\n-        return _className;\n-    }\n-\n-    public void setClassName(String className) {\n-        _className = className;\n-    }\n-\n-    @Override\n-    public int hashCode() {\n-        final int prime = 31;\n-        int result = 1;\n-        result =\n-            prime * result + ((_className == null) ? 0 : _className.hashCode());\n-        result = prime * result + ((_pk == null) ? 0 : _pk.hashCode());\n-        return result;\n-    }\n-\n-    @Override\n-    public boolean equals(Object obj) {\n-        if (this == obj)\n-            return true;\n-        if (obj == null)\n-            return false;\n-        if (getClass() != obj.getClass())\n-            return false;\n-        SimpleWriteBehindCacheKey other = (SimpleWriteBehindCacheKey) obj;\n-        if (_className == null) {\n-            if (other._className != null)\n-                return false;\n-        } else if (!_className.equals(other._className))\n-            return false;\n-        if (_pk == null) {\n-            if (other._pk != null)\n-                return false;\n-        } else if (!_pk.equals(other._pk))\n-            return false;\n-        return true;\n-    }\n-\n-}"},{"sha":"e7ad5fcbe34056ef128bb4860c6fe468ee526169","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/writebehind/SimpleWriteBehindCallback.java","status":"removed","additions":0,"deletions":101,"changes":101,"blob_url":"https://github.com/apache/openjpa/blob/d299ac431108416d606549ec771ca5b5a26d78a6/openjpa-kernel/src/main/java/org/apache/openjpa/writebehind/SimpleWriteBehindCallback.java","raw_url":"https://github.com/apache/openjpa/raw/d299ac431108416d606549ec771ca5b5a26d78a6/openjpa-kernel/src/main/java/org/apache/openjpa/writebehind/SimpleWriteBehindCallback.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/writebehind/SimpleWriteBehindCallback.java?ref=d299ac431108416d606549ec771ca5b5a26d78a6","patch":"@@ -1,101 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.writebehind;\n-\n-import java.util.Collection;\n-\n-import org.apache.openjpa.kernel.Broker;\n-import org.apache.openjpa.kernel.OpenJPAStateManager;\n-import org.apache.openjpa.kernel.StateManagerImpl;\n-import org.apache.openjpa.kernel.StoreManager;\n-\n-public class SimpleWriteBehindCallback extends AbstractWriteBehindCallback {\n-\n-    private int _sleepTime = 2000;\n-    private boolean done = false;\n-\n-    private WriteBehindCache _cache = null;\n-    private Broker _broker;\n-\n-    public void initialize(Broker broker, WriteBehindCache cache) {\n-        _cache = cache;\n-        _broker = broker;\n-    }\n-\n-    public Collection<Exception> flush() {\n-        Collection<Exception> errors = null;\n-        // skip past any delegating store managers.\n-        StoreManager storeManager =\n-            _broker.getStoreManager().getInnermostDelegate();\n-        Collection<OpenJPAStateManager> sms = null;\n-        if (_cache != null && !_cache.isEmpty()) {\n-            // TODO lock or switch the cache\n-            sms = _cache.getStateManagers();\n-            _cache.clear();\n-        }\n-        if (sms != null && !sms.isEmpty()) {\n-            storeManager.retainConnection();\n-            storeManager.begin();\n-            errors = storeManager.flush(sms);\n-            if(errors != null && !errors.isEmpty() ) {\n-                for(Exception e : errors) {\n-                    // TODO add error handling.\n-                    e.printStackTrace();\n-                }\n-            }\n-            storeManager.commit();\n-            storeManager.releaseConnection();\n-        }\n-        return errors;\n-    }\n-\n-    public void run() {\n-        while (!done) {\n-            try {\n-                Thread.sleep(_sleepTime);\n-                handleExceptions(flush());\n-            } catch (InterruptedException e) {\n-                // ignore\n-            }\n-        }\n-    }\n-\n-    public void handleExceptions(Collection<Exception> exceptions) {\n-        if (exceptions != null && !exceptions.isEmpty()) {\n-            done = true;\n-            for (Exception e : exceptions) {\n-                e.printStackTrace();\n-            }\n-        }\n-    }\n-\n-    public void close() {\n-        done = true;\n-        flush();\n-        _broker.close();\n-    }\n-    \n-    public int getSleepTime() { \n-        return _sleepTime;\n-    }\n-    \n-    public void setSleepTime(int sleepTime) { \n-        _sleepTime = sleepTime;\n-    }\n-}"},{"sha":"30976a8f698b3024843680b4361ee854a334c7d5","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/writebehind/WriteBehindCache.java","status":"removed","additions":0,"deletions":109,"changes":109,"blob_url":"https://github.com/apache/openjpa/blob/d299ac431108416d606549ec771ca5b5a26d78a6/openjpa-kernel/src/main/java/org/apache/openjpa/writebehind/WriteBehindCache.java","raw_url":"https://github.com/apache/openjpa/raw/d299ac431108416d606549ec771ca5b5a26d78a6/openjpa-kernel/src/main/java/org/apache/openjpa/writebehind/WriteBehindCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/writebehind/WriteBehindCache.java?ref=d299ac431108416d606549ec771ca5b5a26d78a6","patch":"@@ -1,109 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.writebehind;\n-\n-import java.util.Collection;\n-import java.util.List;\n-\n-import org.apache.openjpa.kernel.OpenJPAStateManager;\n-import org.apache.openjpa.kernel.StateManagerImpl;\n-\n-/**\n- * The WriteBehindCache stores updates to entities before flushing to the\n- * database. A {@link WriteBehindCallback} instance will be used to write the\n- * changes to the database.\n- * \n- */\n-public interface WriteBehindCache {\n-    /**\n-     * Obtain the number of entities in the cache.\n-     * \n-     * @return number of entities in the cache.\n-     */\n-    public int getSize();\n-\n-    /**\n-     * Answer whether the provided object is included in the WriteBehindCache\n-     * \n-     * @param o\n-     *            Object which may be in the cache\n-     * @return True if the object is in the cache, otherwise false.\n-     */\n-    public boolean contains(Object o);\n-\n-    /**\n-     * Returns a string name that can be used by end-user-visible code to\n-     * identify this cache.\n-     */\n-    public String getName();\n-\n-    /**\n-     * Sets a string name to be used to identify this cache to end-user needs.\n-     */\n-    public void setName(String name);\n-\n-    /**\n-     * Add the provided {@link StateManagerImpl}s to the cache. Mimics the\n-     * StoreManager.flush() method. If the StateManagers cannot be added to the\n-     * cache or if any exceptions occur they will be returned to the caller in a\n-     * collection.\n-     * \n-     * @param sms\n-     *            StateManagerImpls to add.\n-     * @return A collection of exceptions if any occurred when adding the\n-     *         StateManager to the cache. If no exceptions occur the collection\n-     *         will be empty.\n-     */\n-    public List<Exception> add(Collection<OpenJPAStateManager> sms);\n-\n-    /**\n-     * Obtain the StateManagers currently in the cache.\n-     * \n-     * @return collection of state managers.\n-     */\n-    public Collection<OpenJPAStateManager> getStateManagers();\n-\n-    /**\n-     * Initialize any resources associated with the given\n-     * {@link WriteBehindCacheManager}.\n-     * \n-     */\n-    public void initialize(WriteBehindCacheManager manager);\n-\n-    /**\n-     * Obtain a cache key for the provided {@link StateManagerImpl}.\n-     * \n-     * @param sm\n-     *            A StateManager\n-     * @return A key that may be used to cache the StateManager.\n-     */\n-    public WriteBehindCacheKey getKey(OpenJPAStateManager sm);\n-\n-    /**\n-     * Determine whether the cache is empty.\n-     * \n-     * @return true if there are no entities in the cache, otherwise false.\n-     */\n-    public boolean isEmpty();\n-\n-    /**\n-     * Remove all entities from the cache.\n-     */\n-    public void clear();\n-}"},{"sha":"ef5ad277e198ad16994faa79a787ff2b8f9f51d0","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/writebehind/WriteBehindCacheKey.java","status":"removed","additions":0,"deletions":40,"changes":40,"blob_url":"https://github.com/apache/openjpa/blob/d299ac431108416d606549ec771ca5b5a26d78a6/openjpa-kernel/src/main/java/org/apache/openjpa/writebehind/WriteBehindCacheKey.java","raw_url":"https://github.com/apache/openjpa/raw/d299ac431108416d606549ec771ca5b5a26d78a6/openjpa-kernel/src/main/java/org/apache/openjpa/writebehind/WriteBehindCacheKey.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/writebehind/WriteBehindCacheKey.java?ref=d299ac431108416d606549ec771ca5b5a26d78a6","patch":"@@ -1,40 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.writebehind;\n-\n-/**\n- * Key used for entities in the WriteBehind Cache.\n- */\n-public interface WriteBehindCacheKey {\n-    /**\n-     * Answers an integer hash for this key.\n-     * \n-     * @return integer hashcode\n-     */\n-    public int hashCode();\n-\n-    /**\n-     * Return true if the supplied object is equal to this instance.\n-     * \n-     * @param obj\n-     *            object to compare\n-     * @return True if they are equal, otherwise false.\n-     */\n-    public boolean equals(Object obj);\n-}"},{"sha":"74af406736bca61362d2fea1a14ff570200a2724","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/writebehind/WriteBehindCacheManager.java","status":"removed","additions":0,"deletions":58,"changes":58,"blob_url":"https://github.com/apache/openjpa/blob/d299ac431108416d606549ec771ca5b5a26d78a6/openjpa-kernel/src/main/java/org/apache/openjpa/writebehind/WriteBehindCacheManager.java","raw_url":"https://github.com/apache/openjpa/raw/d299ac431108416d606549ec771ca5b5a26d78a6/openjpa-kernel/src/main/java/org/apache/openjpa/writebehind/WriteBehindCacheManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/writebehind/WriteBehindCacheManager.java?ref=d299ac431108416d606549ec771ca5b5a26d78a6","patch":"@@ -1,58 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.writebehind;\n-\n-import org.apache.openjpa.conf.OpenJPAConfiguration;\n-import org.apache.openjpa.lib.conf.ObjectValue;\n-\n-/**\n- * Manages the system's WriteBehind cache(s). You can retrieve the data cache\n- * manager from the {@link OpenJPAConfiguration}.\n- * \n- */\n-public interface WriteBehindCacheManager {\n-    /**\n-     * Get the default WriteBehind cache.\n-     * \n-     * @return If WriteBehind mode is enabled the default WriteBehind cache will\n-     *         be returned. If WriteBehind is not enabled return null.\n-     */\n-    public WriteBehindCache getSystemWriteBehindCache();\n-\n-    /**\n-     * Obtain a named WriteBehindCache.\n-     * \n-     * @param name\n-     *            Name of the WriteBehindCache to obtain\n-     * @return If WriteBehind mode is enabled a WriteBehindCache for 'name' will\n-     *         be returned (creating a new instance if needed). Otherwise return\n-     *         null.\n-     */\n-    public WriteBehindCache getWriteBehindCache(String name);\n-\n-    /**\n-     * Initialize the WriteBehindCacheManager\n-     * \n-     * @param conf\n-     *            OpenJPAConfiguration in use\n-     * @param writeBehindCache\n-     *            The pluginvalue for WritBehindCache.\n-     */\n-    public void initialize(OpenJPAConfiguration conf, ObjectValue writeBehindCache);\n-}"},{"sha":"f534dc8ed17c00a3ef7e5b8a193ec676f99bbef6","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/writebehind/WriteBehindCacheManagerImpl.java","status":"removed","additions":0,"deletions":39,"changes":39,"blob_url":"https://github.com/apache/openjpa/blob/d299ac431108416d606549ec771ca5b5a26d78a6/openjpa-kernel/src/main/java/org/apache/openjpa/writebehind/WriteBehindCacheManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/d299ac431108416d606549ec771ca5b5a26d78a6/openjpa-kernel/src/main/java/org/apache/openjpa/writebehind/WriteBehindCacheManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/writebehind/WriteBehindCacheManagerImpl.java?ref=d299ac431108416d606549ec771ca5b5a26d78a6","patch":"@@ -1,39 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.writebehind;\n-\n-import org.apache.openjpa.conf.OpenJPAConfiguration;\n-import org.apache.openjpa.lib.conf.ObjectValue;\n-\n-public class WriteBehindCacheManagerImpl implements WriteBehindCacheManager {\n-\n-    WriteBehindCache _cache;\n-\n-    public WriteBehindCache getSystemWriteBehindCache() {\n-        return _cache;\n-    }\n-\n-    public WriteBehindCache getWriteBehindCache(String name) {\n-        return _cache;\n-    }\n-\n-    public void initialize(OpenJPAConfiguration conf, ObjectValue writeBehindCache) {\n-        _cache = (WriteBehindCache) writeBehindCache.instantiate(WriteBehindCache.class, conf);\n-    }\n-}"},{"sha":"8b237c12ee79316cba77a3bc079370e899ffb879","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/writebehind/WriteBehindCallback.java","status":"removed","additions":0,"deletions":57,"changes":57,"blob_url":"https://github.com/apache/openjpa/blob/d299ac431108416d606549ec771ca5b5a26d78a6/openjpa-kernel/src/main/java/org/apache/openjpa/writebehind/WriteBehindCallback.java","raw_url":"https://github.com/apache/openjpa/raw/d299ac431108416d606549ec771ca5b5a26d78a6/openjpa-kernel/src/main/java/org/apache/openjpa/writebehind/WriteBehindCallback.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/writebehind/WriteBehindCallback.java?ref=d299ac431108416d606549ec771ca5b5a26d78a6","patch":"@@ -1,57 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.writebehind;\n-\n-import java.util.Collection;\n-\n-import org.apache.openjpa.kernel.Broker;\n-\n-/**\n- * The WriteBehindCallback is responsible for flushing changes to the database\n- * when OpenJPA is used in a Write-Behind mode.\n- * \n- */\n-public interface WriteBehindCallback extends Runnable {\n-\n-    /**\n-     * Initialize the WriteBehindCallback. The callback will pull changes from\n-     * the provided WriteBehindCache flush them using the provided broker. The\n-     * WriteBehindCallback is responsible for closing the Broker.\n-     * \n-     * @param broker\n-     *            A new broker instance that the writebehind callback will use\n-     *            to flush changes to the database.\n-     * @param cache\n-     *            A {@link WriteBehindCache} which contains the inflight\n-     *            changes.\n-     */\n-    public void initialize(Broker broker, WriteBehindCache cache);\n-\n-    /**\n-     * Manually flush changes to the database.\n-     * \n-     * @return A Collection of Exceptions which occurred during the flush.\n-     */\n-    public Collection<Exception> flush();\n-\n-    /**\n-     * Close the WriteBehindCallback releasing resources to the JVM\n-     */\n-    public void close();\n-}"},{"sha":"fde5dab8919115d772f895decadaddd394807a99","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/writebehind/WriteBehindConfigurationException.java","status":"removed","additions":0,"deletions":39,"changes":39,"blob_url":"https://github.com/apache/openjpa/blob/d299ac431108416d606549ec771ca5b5a26d78a6/openjpa-kernel/src/main/java/org/apache/openjpa/writebehind/WriteBehindConfigurationException.java","raw_url":"https://github.com/apache/openjpa/raw/d299ac431108416d606549ec771ca5b5a26d78a6/openjpa-kernel/src/main/java/org/apache/openjpa/writebehind/WriteBehindConfigurationException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/writebehind/WriteBehindConfigurationException.java?ref=d299ac431108416d606549ec771ca5b5a26d78a6","patch":"@@ -1,39 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.writebehind;\n-\n-import org.apache.openjpa.util.OpenJPAException;\n-\n-public class WriteBehindConfigurationException extends OpenJPAException {\n-\n-    private static final long serialVersionUID = 4378466107767896762L;\n-\n-    /**\n-     * Constructor; supply message as String.\n-     */\n-    public WriteBehindConfigurationException(String msg) {\n-        super(msg);\n-    }\n-\n-    @Override\n-    public int getType() {\n-        return USER;\n-    }\n-\n-}"},{"sha":"5cb942743bb78f20f0e0221f13ccb96ecb6b1cfd","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/writebehind/WriteBehindException.java","status":"removed","additions":0,"deletions":30,"changes":30,"blob_url":"https://github.com/apache/openjpa/blob/d299ac431108416d606549ec771ca5b5a26d78a6/openjpa-kernel/src/main/java/org/apache/openjpa/writebehind/WriteBehindException.java","raw_url":"https://github.com/apache/openjpa/raw/d299ac431108416d606549ec771ca5b5a26d78a6/openjpa-kernel/src/main/java/org/apache/openjpa/writebehind/WriteBehindException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/writebehind/WriteBehindException.java?ref=d299ac431108416d606549ec771ca5b5a26d78a6","patch":"@@ -1,30 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.writebehind;\n-\n-import org.apache.openjpa.util.OpenJPAException;\n-\n-public class WriteBehindException extends OpenJPAException {\n-    private static final long serialVersionUID = 3377707939479198010L;\n-\n-    @Override\n-    public int getType() {\n-        return INTERNAL;\n-    }\n-}"},{"sha":"96a7c8216e4dc135b705f3b717cb8a29a972c5dd","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/writebehind/WriteBehindStoreManager.java","status":"removed","additions":0,"deletions":150,"changes":150,"blob_url":"https://github.com/apache/openjpa/blob/d299ac431108416d606549ec771ca5b5a26d78a6/openjpa-kernel/src/main/java/org/apache/openjpa/writebehind/WriteBehindStoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/d299ac431108416d606549ec771ca5b5a26d78a6/openjpa-kernel/src/main/java/org/apache/openjpa/writebehind/WriteBehindStoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/writebehind/WriteBehindStoreManager.java?ref=d299ac431108416d606549ec771ca5b5a26d78a6","patch":"@@ -1,150 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.writebehind;\n-\n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.LinkedHashSet;\n-import java.util.Set;\n-\n-import org.apache.openjpa.kernel.DelegatingStoreManager;\n-import org.apache.openjpa.kernel.OpenJPAStateManager;\n-import org.apache.openjpa.kernel.PCState;\n-import org.apache.openjpa.kernel.StateManagerImpl;\n-import org.apache.openjpa.kernel.StoreManager;\n-\n-public class WriteBehindStoreManager extends DelegatingStoreManager {\n-\n-    protected Set<Class<?>> includedTypes;\n-    protected Set<Class<?>> excludedTypes;\n-    \n-    protected boolean _cacheInserts = true;\n-    protected boolean _cacheUpdates = true;\n-    protected boolean _cacheDeletes = true;\n-    \n-    public static final int OP_INSERT = 1;\n-    public static final int OP_DELETE = 2;\n-    public static final int OP_UPDATE = 3; \n-\n-    WriteBehindCache _cache;\n-    Collection<OpenJPAStateManager> inFlightSMs = new ArrayList<OpenJPAStateManager>();\n-\n-    public WriteBehindStoreManager(StoreManager store) {\n-        this(store, null);\n-    }\n-\n-    public WriteBehindStoreManager(StoreManager store, \n-        WriteBehindCache wbCache) {\n-        super(store);\n-        _cache = wbCache;\n-    }\n-\n-    public Collection<Exception> flush(Collection<OpenJPAStateManager> sms) {\n-        LinkedHashSet<OpenJPAStateManager> passingThrough = null;\n-        for (OpenJPAStateManager sm : sms) {\n-            if (cacheAble(sm)) {\n-                PCState newState = sm.getPCState();\n-                if (newState == PCState.PDELETEDFLUSHED) { \n-                    newState = PCState.PDELETED; // effectively reset the flush\n-                }\n-                inFlightSMs.add(new StateManagerImpl((StateManagerImpl)sm, newState));\n-            } else {\n-                if (passingThrough == null) { \n-                    passingThrough = new LinkedHashSet<OpenJPAStateManager>();\n-                }\n-                passingThrough.add(sm);\n-            }\n-        }\n-        \n-        Collection<Exception> rval;\n-        if (passingThrough != null) { \n-            rval = getDelegate().flush(passingThrough);\n-        } else { \n-            rval = new ArrayList<Exception>();\n-        }\n-        return rval;\n-    }\n-\n-    public void commit() {\n-        try {\n-            super.commit();\n-            _cache.add(inFlightSMs);\n-        } finally {\n-            inFlightSMs.clear();\n-        }\n-    }\n-\n-    public void rollback() {\n-        try {\n-            super.rollback();\n-        } finally {\n-            inFlightSMs.clear();\n-        }\n-    }\n-\n-    public Collection<Exception> flushBehind(Collection<OpenJPAStateManager> sms) {\n-        return super.flush(sms);\n-    }\n-\n-    public boolean cacheAble(OpenJPAStateManager sm) {\n-        boolean rval = false;\n-        switch (getOperation(sm)) {\n-        case OP_INSERT:\n-            if (_cacheInserts) {\n-                rval = true;\n-            }\n-            break;\n-        case OP_DELETE:\n-            if (_cacheDeletes) {\n-                rval = true;\n-            }\n-            break;\n-        case OP_UPDATE:\n-            if (_cacheUpdates) {\n-                rval = true;\n-            }\n-            break;\n-            default:\n-                rval = false; // not sure what this is. Don't mess with it.\n-        }\n-        \n-        // TODO Check includedTypes\n-        // Like the DataCache this information should be contained in the \n-        // Mapping repository\n-        // Check after checking operations since unlisted types will pre-empt \n-        // operations.\n-\n-        return rval;\n-    }\n-    \n-    protected int getOperation(OpenJPAStateManager sm) {\n-        int rval = -1; // TODO define me\n-        if (sm.isDirty()) {\n-            if (sm.isNew()) {\n-                rval = OP_INSERT;\n-            } else if (sm.isDeleted()) {\n-                rval = OP_DELETE;\n-            } else {\n-                rval = OP_UPDATE;\n-            }\n-        }\n-        return rval;\n-    }\n-\n-}"},{"sha":"f6f450a4b5249c183eb97c507be82a9c30c72a14","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/AbstractWriteBehindTestCase.java","status":"removed","additions":0,"deletions":116,"changes":116,"blob_url":"https://github.com/apache/openjpa/blob/d299ac431108416d606549ec771ca5b5a26d78a6/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/AbstractWriteBehindTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/d299ac431108416d606549ec771ca5b5a26d78a6/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/AbstractWriteBehindTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/AbstractWriteBehindTestCase.java?ref=d299ac431108416d606549ec771ca5b5a26d78a6","patch":"@@ -1,116 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.writebehind;\n-\n-import javax.persistence.EntityManagerFactory;\n-\n-import org.apache.commons.lang.StringUtils;\n-import org.apache.openjpa.jdbc.writebehind.entities.AbstractSimpleEntity;\n-import org.apache.openjpa.jdbc.writebehind.entities.SimpleNonGeneratedIdEntity;\n-import org.apache.openjpa.jdbc.writebehind.entities.SimpleTableGeneratedIdEntity;\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\n-import org.apache.openjpa.persistence.test.AbstractCachedEMFTestCase;\n-import org.apache.openjpa.writebehind.WriteBehindCache;\n-import org.apache.openjpa.writebehind.WriteBehindCacheManager;\n-import org.apache.openjpa.writebehind.WriteBehindCallback;\n-\n-public abstract class AbstractWriteBehindTestCase extends AbstractCachedEMFTestCase  {\n-    protected static Object[] writeBehindProps =\n-        new Object[] { \n-            \"openjpa.DataCache\", \"true\",\n-            \"openjpa.RemoteCommitProvider\", \"sjvm\", \n-            \"openjpa.WriteBehindCache\", \"true\",\n-            \"openjpa.WriteBehindCallback\", \"true(sleepTime=15000)\", \n-            \"openjpa.RuntimeUnenhancedClasses\", \"unsupported\",\n-            SimpleNonGeneratedIdEntity.class, SimpleTableGeneratedIdEntity.class,\n-            AbstractSimpleEntity.class};\n-    \n-    protected static Object [] validatorProps = \n-        new Object[] { \n-        \"openjpa.RuntimeUnenhancedClasses\", \"unsupported\",\n-        SimpleNonGeneratedIdEntity.class, SimpleTableGeneratedIdEntity.class,\n-        AbstractSimpleEntity.class  };\n-    \n-    protected static OpenJPAEntityManagerFactorySPI _validatorEMF = null; \n-    protected static OpenJPAEntityManagerFactorySPI emf = null;\n-    protected OpenJPAEntityManagerSPI em = null;\n-    \n-    public void setUp() throws Exception {\n-        super.setUp();\n-        if(emf == null) { \n-            emf = createEMF(writeBehindProps);\n-        }\n-        if(_validatorEMF == null) { \n-            _validatorEMF = createEMF(validatorProps);\n-        }\n-        em = emf.createEntityManager();\n-    }\n-    \n-    public void tearDown() throws Exception {\n-        em.close();\n-        super.tearDown();\n-    }\n-    \n-    \n-    public static Object[] getDefaultWriteBehindProperties() { \n-        return writeBehindProps;\n-    }\n-\n-    protected WriteBehindCacheManager getWBCacheManager() {\n-        return getWBCacheManager(emf);\n-    }\n-\n-    protected WriteBehindCacheManager getWBCacheManager(OpenJPAEntityManagerFactorySPI factory) {\n-        WriteBehindCacheManager wbcm = factory.getConfiguration().getWriteBehindCacheManagerInstance();\n-        return wbcm;\n-    }\n-\n-    protected WriteBehindCache getWBCache() {\n-        return getWBCache(emf);\n-    }\n-\n-    protected WriteBehindCache \n-        getWBCache(OpenJPAEntityManagerFactorySPI factory) {\n-        return getWBCache(factory, \"\"); // TODO handle default name better\n-    }\n-\n-    protected WriteBehindCallback getWBCallback() {\n-        return getWBCallback(emf);\n-    }\n-\n-    protected WriteBehindCallback getWBCallback(\n-        OpenJPAEntityManagerFactorySPI factory) {\n-        return factory.getConfiguration().getWriteBehindCallbackInstance();\n-    }\n-\n-    protected WriteBehindCache getWBCache(OpenJPAEntityManagerFactorySPI factory, String name) {\n-        WriteBehindCache wbc = null;\n-        if (StringUtils.isEmpty(name)) {\n-            wbc = getWBCacheManager(factory).getSystemWriteBehindCache();\n-        } else {\n-            wbc = getWBCacheManager(factory).getWriteBehindCache(name);\n-        }\n-        return wbc;\n-    }\n-\n-    protected EntityManagerFactory getValidatorEMF() { \n-        return _validatorEMF;\n-    }\n-}"},{"sha":"3e3649de4ba1e470f34457d4f317feb9616e805d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/CustomWriteBehindCache.java","status":"removed","additions":0,"deletions":84,"changes":84,"blob_url":"https://github.com/apache/openjpa/blob/d299ac431108416d606549ec771ca5b5a26d78a6/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/CustomWriteBehindCache.java","raw_url":"https://github.com/apache/openjpa/raw/d299ac431108416d606549ec771ca5b5a26d78a6/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/CustomWriteBehindCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/CustomWriteBehindCache.java?ref=d299ac431108416d606549ec771ca5b5a26d78a6","patch":"@@ -1,84 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.writebehind;\n-\n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.List;\n-\n-import org.apache.openjpa.kernel.OpenJPAStateManager;\n-import org.apache.openjpa.kernel.StateManagerImpl;\n-import org.apache.openjpa.writebehind.AbstractWriteBehindCache;\n-import org.apache.openjpa.writebehind.WriteBehindCacheKey;\n-import org.apache.openjpa.writebehind.WriteBehindCacheManager;\n-\n-/**\n- * Skeleton WriteBehindCache used to verify that the configuration options for WriteBehind are working properly. \n- */\n-public class CustomWriteBehindCache extends AbstractWriteBehindCache {\n-\n-    public List<Exception> add(Collection<OpenJPAStateManager> sms) {\n-        List<Exception> exceptions = new ArrayList<Exception>(); \n-        return exceptions;\n-    }\n-\n-    public void add(StateManagerImpl sm) {\n-    }\n-\n-    public boolean contains(Object o) {\n-        return false;\n-    }\n-\n-    public void flush() {\n-    }\n-\n-    public WriteBehindCacheKey getKey(OpenJPAStateManager sm) {\n-        return null;\n-    }\n-\n-    public String getName() {\n-        return null;\n-    }\n-\n-    public OpenJPAStateManager getSateManager(WriteBehindCacheKey key) {\n-        return null;\n-    }\n-\n-    public int getSize() {\n-        return 0;\n-    }\n-\n-    public Collection<OpenJPAStateManager> getStateManagers() {\n-        return null;\n-    }\n-\n-    public void initialize(WriteBehindCacheManager manager) {\n-    }\n-\n-    public void setName(String name) {\n-    }\n-\n-    public void clear() {\n-    }\n-\n-    public boolean isEmpty() {\n-        return false;\n-    }\n-}\n-"},{"sha":"0c4b13a5f365c899debf7dc5e4b25e8bd0ff43c9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/CustomWriteBehindCallback.java","status":"removed","additions":0,"deletions":45,"changes":45,"blob_url":"https://github.com/apache/openjpa/blob/d299ac431108416d606549ec771ca5b5a26d78a6/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/CustomWriteBehindCallback.java","raw_url":"https://github.com/apache/openjpa/raw/d299ac431108416d606549ec771ca5b5a26d78a6/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/CustomWriteBehindCallback.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/CustomWriteBehindCallback.java?ref=d299ac431108416d606549ec771ca5b5a26d78a6","patch":"@@ -1,45 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.writebehind;\n-\n-import java.util.Collection;\n-\n-import org.apache.openjpa.kernel.Broker;\n-import org.apache.openjpa.writebehind.AbstractWriteBehindCallback;\n-import org.apache.openjpa.writebehind.WriteBehindCache;\n-\n-/**\n- * Skeleton WriteBehindCallback used to verify that a custom instance can be created.\n- */\n-public class CustomWriteBehindCallback extends AbstractWriteBehindCallback {\n-\n-    public Collection<Exception> flush() {\n-        return null;\n-    }\n-\n-    public void run() {\n-    }\n-\n-    public void initialize(Broker broker,\n-        WriteBehindCache cache) {\n-    }\n-\n-    public void close() {\n-    }\n-}"},{"sha":"646f1c0bc3dabca94c894a8bf7a5597d89d9406f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/TestWriteBehindConfiguration.java","status":"removed","additions":0,"deletions":153,"changes":153,"blob_url":"https://github.com/apache/openjpa/blob/d299ac431108416d606549ec771ca5b5a26d78a6/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/TestWriteBehindConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/d299ac431108416d606549ec771ca5b5a26d78a6/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/TestWriteBehindConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/TestWriteBehindConfiguration.java?ref=d299ac431108416d606549ec771ca5b5a26d78a6","patch":"@@ -1,153 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.writebehind;\n-\n-import java.util.ArrayList;\n-import java.util.HashMap;\n-import java.util.Map;\n-\n-import javax.persistence.Persistence;\n-\n-import org.apache.openjpa.conf.OpenJPAConfigurationImpl;\n-import org.apache.openjpa.datacache.DataCacheStoreManager;\n-import org.apache.openjpa.kernel.DelegatingStoreManager;\n-import org.apache.openjpa.persistence.EntityManagerImpl;\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n-import org.apache.openjpa.writebehind.SimpleWriteBehindCache;\n-import org.apache.openjpa.writebehind.SimpleWriteBehindCallback;\n-import org.apache.openjpa.writebehind.WriteBehindCache;\n-import org.apache.openjpa.writebehind.WriteBehindCacheManager;\n-import org.apache.openjpa.writebehind.WriteBehindCallback;\n-import org.apache.openjpa.writebehind.WriteBehindStoreManager;\n-\n-public class TestWriteBehindConfiguration extends AbstractWriteBehindTestCase {\n-    public void testWriteBehindStoreManagerCreated() {\n-        assertNotNull(emf);\n-        assertNotNull(em);\n-        DelegatingStoreManager storeManager = ((EntityManagerImpl) em).getBroker().getStoreManager();\n-        \n-        storeManager = (DelegatingStoreManager) storeManager.getDelegate();\n-        assertTrue(String.format(\"Unexpected StoreManager type : %s\",\n-            storeManager.getClass().getName()),\n-            storeManager instanceof DataCacheStoreManager);\n-        assertTrue(String.format(\"Unexpected StoreManager type : %s\",\n-            storeManager.getDelegate().getClass().getName()), \n-            storeManager.getDelegate() instanceof WriteBehindStoreManager);\n-    }\n-\n-    public void testWriteBehindCacheCreated() {\n-        assertNotNull(\"EMF was not created.\", emf);\n-        WriteBehindCacheManager manager = getWBCacheManager();\n-        assertNotNull(\"WriteBehindCacheManager should exist\", manager);\n-\n-        WriteBehindCache wbcache = manager.getSystemWriteBehindCache();\n-        assertNotNull(\"SystemWriteBehindCache should exist\", wbcache);\n-\n-        assertTrue(String.format(\"Expecting %s to be an instance of %s\",\n-            wbcache, SimpleWriteBehindCache.class),\n-            wbcache instanceof SimpleWriteBehindCache);\n-    }\n-\n-    public void testWriteBehindCallbackCreated() {\n-        assertNotNull(\"EMF was not created.\", emf);\n-        WriteBehindCallback callback = getWBCallback();\n-        assertNotNull(\"WB Callback should exist\", callback);\n-\n-        assertTrue(String.format(\"Expecting %s to be an instance of %s\",\n-            callback, SimpleWriteBehindCallback.class),\n-            callback instanceof SimpleWriteBehindCallback);\n-\n-    }\n-\n-    public void testCustomCacheInstanceCreated() {\n-        HashMap<String, Object> props = new HashMap<String, Object>();\n-        props.put(\"openjpa.WriteBehindCache\", CustomWriteBehindCache.class.getCanonicalName());\n-        props.put(\"openjpa.WriteBehindCallback\", \"true\");\n-\n-        WriteBehindCacheManager manager = getWBCacheManager(getCustomFactory(props));\n-        assertNotNull(\"WriteBehindCacheManager should exist\", manager);\n-\n-        WriteBehindCache wbcache = manager.getSystemWriteBehindCache();\n-        assertNotNull(\"SystemWriteBehindCache should exist\", wbcache);\n-\n-        assertTrue(String.format(\"Expecting %s to be an instance of %s\",\n-            wbcache, CustomWriteBehindCache.class),\n-            wbcache instanceof CustomWriteBehindCache);\n-    }\n-    \n-    public void testCustomCallbackCreated() {\n-        HashMap<String, Object> props = new HashMap<String, Object>();\n-        props.put(\"openjpa.WriteBehindCache\", CustomWriteBehindCache.class.getCanonicalName());\n-        props.put(\"openjpa.WriteBehindCallback\", CustomWriteBehindCallback.class.getCanonicalName());\n-\n-        WriteBehindCallback callback = getWBCallback(getCustomFactory(props));\n-        assertNotNull(\"WB Callback should exist\", callback);\n-\n-        assertTrue(String.format(\"Expecting %s to be an instance of %s\",\n-            callback, CustomWriteBehindCallback.class),\n-            callback instanceof CustomWriteBehindCallback);\n-    }\n-    \n-    \n-    public void testWriteBehindCallbackCreatedForEachConfiguration() {\n-        OpenJPAEntityManagerFactorySPI emf1 = emf;\n-        ArrayList<Object> clonedProps = new ArrayList<Object>();\n-        for(Object o : writeBehindProps) {\n-            // quick and dirty way to alter the properties, this should prevent the cached EMF from being reused.\n-            if(o.toString().equals(\"unsupported\")) {\n-                // just change the runtimeUnenhancedClasses value.\n-                clonedProps.add(\"supported\");\n-            }\n-            else {\n-                clonedProps.add(o);\n-            }\n-        }\n-        OpenJPAEntityManagerFactorySPI emf2 = createEMF(clonedProps.toArray()); \n-        assertNotNull(\"Unable to create first EntityManager \", emf1);\n-        assertNotNull(\"Unable to create second EntityManager \", emf2);\n-        assertNotSame(\"Test is invalid if the same EMF is used\", emf1, emf2);\n-\n-        OpenJPAConfigurationImpl conf1 = (OpenJPAConfigurationImpl) emf1.getConfiguration();\n-        OpenJPAConfigurationImpl conf2 = (OpenJPAConfigurationImpl) emf2.getConfiguration();\n-\n-        assertNotNull(conf1);\n-        assertNotNull(conf2);\n-        assertNotSame(\"Configuration objects for different EMFs should not be the same\", conf1, conf2);\n-\n-        assertNotSame(\"Each Configuration should have its own WriteBehindCallbackPlugins\",\n-            conf1.writeBehindCallbackPlugin, conf2.writeBehindCallbackPlugin);\n-        \n-        WriteBehindCallback wbc1 = conf1.getWriteBehindCallbackInstance();\n-        WriteBehindCallback wbc2 = conf2.getWriteBehindCallbackInstance();\n-        assertNotNull(wbc1);\n-        assertNotNull(wbc2);\n-        assertNotSame(\"Each Configuration should have its own WriteBehindCallback\", wbc1, wbc2);\n-    }\n-    \n-    public OpenJPAEntityManagerFactorySPI getCustomFactory(\n-        Map<String, Object> extraProps) {\n-        Map<String, Object> props = getPropertiesMap(getDefaultWriteBehindProperties());\n-        props.putAll(extraProps);\n-\n-        OpenJPAEntityManagerFactorySPI customEMF =\n-            (OpenJPAEntityManagerFactorySPI) Persistence.createEntityManagerFactory(getPersistenceUnitName(), props);\n-        assertNotNull(\"EMF was not created.\", customEMF);\n-        return customEMF;\n-    }\n-}"},{"sha":"08aabe712f309ac816ad9212ce492c0fd61ae724","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/TestWriteBehindConfigurations.java","status":"removed","additions":0,"deletions":225,"changes":225,"blob_url":"https://github.com/apache/openjpa/blob/d299ac431108416d606549ec771ca5b5a26d78a6/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/TestWriteBehindConfigurations.java","raw_url":"https://github.com/apache/openjpa/raw/d299ac431108416d606549ec771ca5b5a26d78a6/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/TestWriteBehindConfigurations.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/TestWriteBehindConfigurations.java?ref=d299ac431108416d606549ec771ca5b5a26d78a6","patch":"@@ -1,225 +0,0 @@\n-/* \n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.openjpa.jdbc.writebehind;\n-\n-import java.util.HashMap;\n-import java.util.Map;\n-import javax.persistence.EntityManagerFactory;\n-import javax.persistence.Persistence;\n-import javax.persistence.PersistenceException;\n-\n-import junit.framework.TestCase;\n-\n-import org.apache.openjpa.persistence.ArgumentException;\n-//import org.apache.openjpa.persistence.PersistenceException;\n-import org.apache.openjpa.writebehind.WriteBehindConfigurationException;\n-\n-\n-/** \n- * <b>TestWriteBehindConfigurations</b> is used to create various configurations for the new JPA 2.0\n- * WriteBehind capability to ensure that the appropriate exception is thrown for the invalid\n- * configurations and an EntityManagerFactory is instantiated for the valid configurations\n- */\n-public class TestWriteBehindConfigurations extends TestCase {\n-\n-\n-    /**\n-     * Invalid configuration since there is no DataCache specified\n-     */\n-    public void testInvalidConfiguration01() {\n-        EntityManagerFactory emf01 = null;\n-        Map map = new HashMap();\n-        map.put( \"openjpa.WriteBehindCache\", \"true\");\n-        map.put( \"openjpa.WriteBehindCallback\", \"true\" );\n-        map.put( \"openjpa.RuntimeUnenhancedClasses\", \"supported\" );\n-        try {\n-            emf01 = Persistence.createEntityManagerFactory(\"empty-pu\", map);\n-            fail(\"testInvalidConfiguration01: Exception expected but not thrown\");\n-        } catch (ArgumentException ae) {\n-            // prior behavior - spec api returned runtime exceptions as-is\n-        } catch (PersistenceException pe) {\n-            // new 2.0 behavior - Geronimo spec api wraps exceptions and tries all providers\n-        } catch (Exception e) {\n-            fail(\"testInvalidConfiguration01: Caught unexpected exception: \" + e);\n-            e.printStackTrace();\n-        } finally {\n-            if (emf01 != null) {\n-                emf01.close();\n-            }\n-        }\n-    }  \n-\n-\n-    /**\n-     * Invalid configuration since there is no DataCache remote commit provider specified\n-     */\n-    public void testInvalidConfiguration02() {\n-        EntityManagerFactory emf02 = null;\n-        Map map = new HashMap();\n-        map.put( \"openjpa.DataCache\", \"true\" );\n-        map.put( \"openjpa.WriteBehindCache\", \"true\");\n-        map.put( \"openjpa.WriteBehindCallback\", \"true(sleepTime=30000)\" );\n-        map.put( \"openjpa.RuntimeUnenhancedClasses\", \"unsupported\" );\n-        try {\n-            emf02 = Persistence.createEntityManagerFactory(\"empty-pu\", map);\n-            fail(\"testInvalidConfiguration02: Exception expected but not thrown\");\n-        } catch (ArgumentException ae) {\n-            // prior behavior - spec api returned runtime exceptions as-is\n-        } catch (PersistenceException pe) {\n-            // new 2.0 behavior - Geronimo spec api wraps exceptions and tries all providers\n-        } catch (Exception e) {\n-            fail(\"testInvalidConfiguration02: Caught unexpected exception: \" + e);\n-            e.printStackTrace();\n-        } finally {\n-            if (emf02 != null) {\n-                emf02.close();\n-            }\n-        }\n-    }  \n-\n-\n-    /**\n-     * Invalid configuration since there is no WriteBehindCallback specified\n-     */\n-    public void testInvalidConfiguration03() {\n-        EntityManagerFactory emf03 = null;\n-        Map map = new HashMap();\n-        map.put( \"openjpa.DataCache\", \"true\" );\n-        map.put( \"openjpa.RemoteCommitProvider\", \"sjvm\");\n-        map.put( \"openjpa.WriteBehindCache\", \"true\");\n-        map.put( \"openjpa.RuntimeUnenhancedClasses\", \"warn\" );\n-        try {\n-            emf03 = Persistence.createEntityManagerFactory(\"empty-pu\", map);\n-            fail(\"testInvalidConfiguration03: Exception not thrown\");\n-        } catch (ArgumentException ae) {\n-            // prior behavior - spec api returned runtime exceptions as-is\n-        } catch (PersistenceException pe) {\n-            // new 2.0 behavior - Geronimo spec api wraps exceptions and tries all providers\n-        } catch (Exception e) {\n-            fail(\"testInvalidConfiguration03: Caught unexpected exception: \" + e);\n-            e.printStackTrace();\n-        } finally {\n-            if (emf03 != null) {\n-                emf03.close();\n-            }\n-        }\n-    }  \n-\n-\n-    /**\n-     * Invalid configuration since there is no DataCache remote commit provider nor a \n-     * WriteBehindCallback specified\n-     */\n-    public void testInvalidConfiguration04() {\n-        EntityManagerFactory emf04 = null;\n-        Map map = new HashMap();\n-        map.put( \"openjpa.DataCache\", \"true\" );\n-        map.put( \"openjpa.WriteBehindCache\", \"true\");\n-        try {\n-            emf04 = Persistence.createEntityManagerFactory(\"empty-pu\", map);\n-            fail(\"testInvalidConfiguration04: Exception not thrown\");\n-        } catch (ArgumentException ae) {\n-            // prior behavior - spec api returned runtime exceptions as-is\n-        } catch (PersistenceException pe) {\n-            // new 2.0 behavior - Geronimo spec api wraps exceptions and tries all providers\n-        } catch (Exception e) {\n-            fail(\"testInvalidConfiguration04: Caught unexpected exception: \" + e);\n-            e.printStackTrace();\n-        } finally {\n-            if (emf04 != null) {\n-                emf04.close();\n-            }\n-        }\n-    }  \n-\n-\n-    /**\n-     * Valid configuration \n-     */\n-    public void testValidConfiguration01() {\n-        EntityManagerFactory emf05 = null;\n-        Map map = new HashMap();\n-        map.put( \"openjpa.DataCache\", \"true\" );\n-        map.put( \"openjpa.RemoteCommitProvider\", \"sjvm\");\n-        map.put( \"openjpa.WriteBehindCache\", \"true\");\n-        map.put( \"openjpa.WriteBehindCallback\", \"true\" );\n-        map.put( \"openjpa.RuntimeUnenhancedClasses\", \"unsupported\" );\n-        try {\n-            emf05 = Persistence.createEntityManagerFactory(\"empty-pu\", map);\n-        } catch (Exception e) {\n-            fail(\"testValidConfiguration01: Caught unexpected exception: \" + e);\n-            e.printStackTrace();\n-        } finally {\n-            assertNotNull(emf05);\n-            if (emf05 != null) {\n-                emf05.close();\n-            }\n-        }\n-    }  \n-\n-\n-    /**\n-     * Valid configuration \n-     */\n-    public void testValidConfiguration02() {\n-        EntityManagerFactory emf06 = null;\n-        Map map = new HashMap();\n-        map.put( \"openjpa.DataCache\", \"true\" );\n-        map.put( \"openjpa.RemoteCommitProvider\", \"sjvm\");\n-        map.put( \"openjpa.WriteBehindCache\", \"true\");\n-        map.put( \"openjpa.WriteBehindCallback\", \"true(sleepTime=30000)\" );\n-        map.put( \"openjpa.RuntimeUnenhancedClasses\", \"supported\" );\n-        try {\n-            emf06 = Persistence.createEntityManagerFactory(\"empty-pu\", map);\n-        } catch (Exception e) {\n-            fail(\"testValidConfiguration02: Caught unexpected exception: \" + e);\n-            e.printStackTrace();\n-        } finally {\n-            assertNotNull(emf06);\n-            if (emf06 != null) {\n-                emf06.close();\n-            }\n-        }\n-    }  \n-\n-\n-    /**\n-     * Valid configuration \n-     */\n-    public void testValidConfiguration03() {\n-        EntityManagerFactory emf07 = null;\n-        Map map = new HashMap();\n-        map.put( \"openjpa.DataCache\", \"true\" );\n-        map.put( \"openjpa.RemoteCommitProvider\", \"sjvm\");\n-        map.put( \"openjpa.WriteBehindCache\", \"true\");\n-        map.put( \"openjpa.WriteBehindCallback\", \"true(sleepTime=30000)\" );\n-        map.put( \"openjpa.RuntimeUnenhancedClasses\", \"warn\" );\n-        try {\n-            emf07 = Persistence.createEntityManagerFactory(\"empty-pu\", map);\n-        } catch (Exception e) {\n-            fail(\"testValidConfiguration03: Caught unexpected exception: \" + e);\n-            e.printStackTrace();\n-        } finally {\n-            assertNotNull(emf07);\n-            if (emf07 != null) {\n-                emf07.close();\n-            }\n-        }\n-    }  \n-}"},{"sha":"a85eff7cda1c6dce1ea61ac10613c89df7477a6a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/crud/AbstractCrudTest.java","status":"removed","additions":0,"deletions":264,"changes":264,"blob_url":"https://github.com/apache/openjpa/blob/d299ac431108416d606549ec771ca5b5a26d78a6/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/crud/AbstractCrudTest.java","raw_url":"https://github.com/apache/openjpa/raw/d299ac431108416d606549ec771ca5b5a26d78a6/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/crud/AbstractCrudTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/crud/AbstractCrudTest.java?ref=d299ac431108416d606549ec771ca5b5a26d78a6","patch":"@@ -1,264 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.writebehind.crud;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-\n-import javax.persistence.EntityManager;\n-\n-import org.apache.openjpa.jdbc.writebehind.AbstractWriteBehindTestCase;\n-import org.apache.openjpa.jdbc.writebehind.entities.SimpleEntity;\n-\n-public abstract class AbstractCrudTest extends AbstractWriteBehindTestCase {\n-    protected List<Integer> _ids;\n-    protected static int SLEEP_TIME = 6000;\n-    protected static int NUM_INSERTS = 5;\n-    protected static String[] NAMES = { \"Able\", \"Baker\", \"Charlie\" };\n-\n-    /**\n-     * populate a set of SimpleEntities appropriate for this test.\n-     */\n-    protected void populate() {\n-        _ids = new ArrayList<Integer>();\n-        EntityManager em = _validatorEMF.createEntityManager();\n-        em.getTransaction().begin();\n-        SimpleEntity se = null;\n-        for (int i = 0; i < NUM_INSERTS; i++) {\n-            se = newEntityInstance();\n-            if (!idIsGenerated()) {\n-                se.setId(i + 1);\n-            }\n-            se.setForename(NAMES[i % NAMES.length]);\n-            se.setSurname(NAMES[(i + 1) % NAMES.length]);\n-            em.persist(se);\n-            em.flush();\n-            _ids.add(se.getId());\n-        }\n-        em.getTransaction().commit();\n-    }\n-    \n-    protected void cleanup() { \n-        EntityManager vem = getValidatorEMF().createEntityManager();\n-        vem.getTransaction().begin();\n-\n-        // TODO replace with getTableName();\n-        vem.createNativeQuery(\"Delete from \" + getEntityTypeName())\n-            .executeUpdate();\n-        vem.getTransaction().commit();\n-        \n-        // clear l2 cache since the native query is outside of the wb cache.\n-        emf.getStoreCache().evictAll();\n-    }\n-\n-    /**\n-     * Return the class of entities used by this testcase\n-     * @return\n-     */\n-    protected abstract Class<? extends SimpleEntity> getEntityType();\n-\n-    /**\n-     * Get the type name for this entity could be different from the alias\n-     * \n-     * @return\n-     */\n-    protected String getEntityTypeName() {\n-        return getEntityType().getSimpleName();\n-    }\n-\n-    /**\n-     * Obtain a new instance of the entity used by this test\n-     * @return\n-     */\n-    protected SimpleEntity newEntityInstance() {\n-        try {\n-            return getEntityType().newInstance();\n-        } catch (IllegalAccessException e) {\n-            return null;\n-        } catch (InstantiationException e) {\n-            return null;\n-        }\n-    }\n-\n-    /**\n-     * Indicate whether the entities used by this test have generated ids\n-     * \n-     * @return true if the entity ID is generated, otherwise false\n-     */\n-    protected abstract boolean idIsGenerated();\n-\n-    // Begin asserts\n-    /**\n-     * Assert that an entity \"found\" by a given EntityManager matches one\n-     * provided.\n-     * \n-     * @param em\n-     *            The entity manager which will be used to find an entity.\n-     * @param se\n-     *            An entity instance (usually unmanaged) which is contains the\n-     *            expected state of the entity.\n-     * @throws AssertionFailedError\n-     *             an entity matching se's ID cannot be found or if any of the\n-     *             non-version fields do not match\n-     */\n-    public void assertEntityContents(EntityManager em, SimpleEntity se) {\n-        SimpleEntity found = em.find(getEntityType(), se.getId());\n-        assertNotNull(String.format(\"%s::%d should be found\",\n-            getEntityTypeName(), 1), found);\n-        assertTrue(found instanceof SimpleEntity);\n-        if (se.getForename() != null && se.getForename().length() != 0) {\n-            assertEquals(se.getForename(), found.getForename());\n-        }\n-        if (se.getSurname() != null && se.getSurname().length() != 0) {\n-            assertEquals(se.getSurname(), found.getSurname());\n-        }\n-    }\n-\n-    /**\n-     * Assert that all entities can not be found in the database. No L2 cache or\n-     * write behind cache is used.\n-     */\n-    public void assertEntitiesDeleted() {\n-        EntityManager validatorEM = getValidatorEMF().createEntityManager();\n-        SimpleEntity se = null;\n-        for (int i = 0; i < NUM_INSERTS; i++) {\n-            se = validatorEM.find(getEntityType(), _ids.get(i));\n-            assertNull(String.format(\"%s::%d should have been deleted\",\n-                getEntityTypeName(),_ids.get(i)), se);\n-        }\n-        validatorEM.close();\n-    }\n-\n-    /**\n-     * Assert that all entities can be found in the database. No L2 cache or\n-     * write behind cache is used.\n-     */\n-    public void assertEntitiesExist() {\n-        EntityManager validatorEM = getValidatorEMF().createEntityManager();\n-        SimpleEntity se = null;\n-        for (int i = 0; i < NUM_INSERTS; i++) {\n-            se = validatorEM.find(getEntityType(), _ids.get(i));\n-            assertNotNull(String.format(\"%s::%d should exist in the database\",\n-                getEntityTypeName(), _ids.get(i)), se);\n-        }\n-        validatorEM.close();\n-    }\n-\n-    /**\n-     * Assert that all entities can not be found in the database and the name\n-     * field has been updated . No L2 cache or write behind cache is used.\n-     */\n-    public void assertEntitiesUpdated() {\n-        EntityManager validatorEM = getValidatorEMF().createEntityManager();\n-        SimpleEntity se = null;\n-        for (int i = 0; i < NUM_INSERTS; i++) {\n-            se = newEntityInstance();\n-            se.setId(_ids.get(i));\n-            se.setForename(NAMES[i % NAMES.length] + \" UPDATED\");\n-            se.setSurname(NAMES[(i + 1) % NAMES.length] + \" UPDATED\");\n-            assertEntityContents(validatorEM, se);\n-        }\n-        validatorEM.close();\n-    }\n-\n-    /**\n-     * Assert that all entities can not be found in the database and the name\n-     * fields are unmodified. No L2 cache or write behind cache is used.\n-     */\n-    public void assertEntitiesUnmodified() {\n-        EntityManager validatorEM = getValidatorEMF().createEntityManager();\n-        SimpleEntity se = null;\n-        for (int i = 0; i < NUM_INSERTS; i++) {\n-            se = newEntityInstance();\n-            se.setId(_ids.get(i));\n-            se.setForename(NAMES[i % NAMES.length]);\n-            assertEntityContents(validatorEM, se);\n-        }\n-        validatorEM.close();\n-    }\n-\n-    // begin operations\n-\n-    public void deleteEntities(boolean flushBetween) {\n-        assertEntitiesExist();\n-        em.getTransaction().begin();\n-        SimpleEntity se = null;\n-        for (int i = 0; i < NUM_INSERTS; i++) {\n-            se = em.find(getEntityType(),_ids.get(i));\n-            em.remove(se);\n-            if (flushBetween) {\n-                em.flush();\n-            }\n-        }\n-        em.getTransaction().commit();\n-    }\n-\n-    public void updateEntities(boolean flushBetween) {\n-        em.getTransaction().begin();\n-        SimpleEntity se = null;\n-        assertEquals(NUM_INSERTS, _ids.size());\n-        try {\n-            for (Integer id : _ids) {\n-                se = em.find(getEntityType(), id);\n-                assertNotNull(String.format(\"%s::%d should be found\",\n-                    getEntityTypeName(), id), se);\n-                se.setForename(se.getForename() + \" UPDATED\");\n-                if (flushBetween) {\n-                    em.flush();\n-                }\n-            }\n-        } finally {\n-            em.getTransaction().commit();\n-        }\n-        \n-        em.getTransaction().begin();\n-        try {\n-            for (Integer id : _ids) {\n-                se = em.find(getEntityType(), id);\n-                assertNotNull(String.format(\"%s::%d should be found\",\n-                    getEntityTypeName(), id), se);\n-                se.setSurname(se.getSurname() + \" UPDATED\");\n-                if (flushBetween) {\n-                    em.flush();\n-                }\n-            }\n-        } finally {\n-            em.getTransaction().commit();\n-        }\n-    }\n-\n-    public void insertEntities(boolean flushBetween) {\n-        _ids = new ArrayList<Integer>();\n-        em.getTransaction().begin();\n-        SimpleEntity se = null;\n-        for (int i = 0; i < NUM_INSERTS; i++) {\n-            se = newEntityInstance();\n-            if (!idIsGenerated()) {\n-                se.setId(i + 1);\n-            }\n-            se.setForename(NAMES[i % NAMES.length]);\n-            em.persist(se);\n-            if (flushBetween) {\n-                em.flush();\n-            }\n-            _ids.add(se.getId());\n-        }\n-        em.getTransaction().commit();\n-    }\n-}"},{"sha":"3914b93c942fcb80d4c7a293fa3d3dee0ae2fd31","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/crud/AbstractDeleteTest.java","status":"removed","additions":0,"deletions":65,"changes":65,"blob_url":"https://github.com/apache/openjpa/blob/d299ac431108416d606549ec771ca5b5a26d78a6/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/crud/AbstractDeleteTest.java","raw_url":"https://github.com/apache/openjpa/raw/d299ac431108416d606549ec771ca5b5a26d78a6/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/crud/AbstractDeleteTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/crud/AbstractDeleteTest.java?ref=d299ac431108416d606549ec771ca5b5a26d78a6","patch":"@@ -1,65 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.writebehind.crud;\n-\n-public abstract class AbstractDeleteTest extends AbstractCrudTest {\n-\n-    // Commenting out the timed tests to keep build time down. \n-    // public void testTimedDeletesAfterCommit() throws InterruptedException {\n-    // cleanup();\n-    // populate();\n-    // assertEntitiesExist();\n-    // deleteEntities(false);\n-    // assertEntitiesExist();\n-    // Thread.sleep(SLEEP_TIME);\n-    // assertEntitiesDeleted();\n-    // }\n-    //\n-    // public void testTimedDeletesAfterCommitWithFlush()\n-    // throws InterruptedException {\n-    // cleanup();\n-    // populate();\n-    // assertEntitiesExist();\n-    // deleteEntities(true);\n-    // assertEntitiesExist();\n-    // Thread.sleep(SLEEP_TIME);\n-    // assertEntitiesDeleted();\n-    // }\n-    \n-    public void testTriggeredDeletesAfterCommit() throws InterruptedException {\n-        cleanup();\n-        populate();\n-        assertEntitiesExist();\n-        deleteEntities(false);\n-        assertEntitiesExist();\n-        getWBCallback().flush();\n-        assertEntitiesDeleted();\n-    }\n-\n-    public void testTriggeredDeletesAfterCommitWithFlush()\n-        throws InterruptedException {\n-        cleanup();\n-        populate();\n-        assertEntitiesExist();\n-        deleteEntities(true);\n-        assertEntitiesExist();\n-        getWBCallback().flush();\n-        assertEntitiesDeleted();\n-    }\n-}"},{"sha":"1c33ff4c8cc3ab0ae3fd1485524ea128f2ed4bb0","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/crud/AbstractInsertTest.java","status":"removed","additions":0,"deletions":58,"changes":58,"blob_url":"https://github.com/apache/openjpa/blob/d299ac431108416d606549ec771ca5b5a26d78a6/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/crud/AbstractInsertTest.java","raw_url":"https://github.com/apache/openjpa/raw/d299ac431108416d606549ec771ca5b5a26d78a6/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/crud/AbstractInsertTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/crud/AbstractInsertTest.java?ref=d299ac431108416d606549ec771ca5b5a26d78a6","patch":"@@ -1,58 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.writebehind.crud;\n-\n-public abstract class AbstractInsertTest extends AbstractCrudTest {\n-\n-    // Commenting out the timed tests to keep build time down. \n-    // public void testTimedInsertsAfterCommit() throws InterruptedException {\n-    // cleanup();\n-    // insertEntities(false);\n-    // assertEntitiesDeleted();\n-    // Thread.sleep(SLEEP_TIME);\n-    // assertEntitiesExist();\n-    // }\n-    //\n-    // public void testTimedInsertsAfterCommitWithFlush()\n-    // throws InterruptedException {\n-    // cleanup();\n-    // insertEntities(true);\n-    // assertEntitiesDeleted();\n-    // Thread.sleep(SLEEP_TIME);\n-    // assertEntitiesExist();\n-    // }\n-\n-    public void testTriggeredInsertsAfterCommit() throws InterruptedException {\n-        cleanup();\n-        insertEntities(false);\n-        assertEntitiesDeleted();\n-        getWBCallback().flush();\n-        assertEntitiesExist();\n-    }\n-\n-    public void testTriggeredInsertsAfterCommitWithFlush()\n-        throws InterruptedException {\n-        cleanup();\n-        insertEntities(true);\n-        assertEntitiesDeleted();\n-        getWBCallback().flush();\n-        assertEntitiesExist();\n-    }\n-\n-}"},{"sha":"ad842d42c99311bf294902e84906b0ffa0b0aeb4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/crud/AbstractUpdateTest.java","status":"removed","additions":0,"deletions":64,"changes":64,"blob_url":"https://github.com/apache/openjpa/blob/d299ac431108416d606549ec771ca5b5a26d78a6/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/crud/AbstractUpdateTest.java","raw_url":"https://github.com/apache/openjpa/raw/d299ac431108416d606549ec771ca5b5a26d78a6/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/crud/AbstractUpdateTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/crud/AbstractUpdateTest.java?ref=d299ac431108416d606549ec771ca5b5a26d78a6","patch":"@@ -1,64 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.writebehind.crud;\n-\n-public abstract class AbstractUpdateTest extends AbstractCrudTest {\n-    // Commenting out the timed tests to keep build time down. \n-    // public void testTimedUpdatesAfterCommit() throws InterruptedException {\n-    // cleanup();\n-    // populate();\n-    // assertEntitiesUnmodified();\n-    // updateEntities(false);\n-    // assertEntitiesUnmodified();\n-    // Thread.sleep(SLEEP_TIME);\n-    // assertEntitiesUpdated();\n-    // }\n-    //\n-    // public void testTimedUpdatesAfterCommitWithFlush()\n-    // throws InterruptedException {\n-    // cleanup();\n-    // populate();\n-    // assertEntitiesUnmodified();\n-    // updateEntities(true);\n-    // assertEntitiesUnmodified();\n-    // Thread.sleep(SLEEP_TIME);\n-    // assertEntitiesUpdated();\n-    // }\n-    \n-    public void testTriggeredUpdatesAfterCommit() throws InterruptedException {\n-        cleanup();\n-        populate();\n-        assertEntitiesUnmodified();\n-        updateEntities(false);\n-        assertEntitiesUnmodified();\n-        getWBCallback().flush();\n-        assertEntitiesUpdated();\n-    }\n-\n-    public void testTriggeredUpdatesAfterCommitWithFlush()\n-        throws InterruptedException {\n-        cleanup();\n-        populate();\n-        assertEntitiesUnmodified();\n-        updateEntities(true);\n-        assertEntitiesUnmodified();\n-        getWBCallback().flush();\n-        assertEntitiesUpdated();\n-    }\n-}"},{"sha":"3e53ec41189aec9f8fd9677af383d180d694db02","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/crud/TestEmbeddable.java","status":"removed","additions":0,"deletions":252,"changes":252,"blob_url":"https://github.com/apache/openjpa/blob/d299ac431108416d606549ec771ca5b5a26d78a6/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/crud/TestEmbeddable.java","raw_url":"https://github.com/apache/openjpa/raw/d299ac431108416d606549ec771ca5b5a26d78a6/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/crud/TestEmbeddable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/crud/TestEmbeddable.java?ref=d299ac431108416d606549ec771ca5b5a26d78a6","patch":"@@ -1,252 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.writebehind.crud;\n-\n-import java.util.Collection;\n-\n-import org.apache.openjpa.jdbc.writebehind.entities.Embeddable01;\n-import org.apache.openjpa.jdbc.writebehind.entities.Entity01;\n-import org.apache.openjpa.jdbc.writebehind.entities.Entity02;\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\n-import org.apache.openjpa.persistence.test.AllowFailure;\n-import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n-import org.apache.openjpa.writebehind.WriteBehindCache;\n-import org.apache.openjpa.writebehind.WriteBehindCacheManager;\n-import org.apache.openjpa.writebehind.WriteBehindCallback;\n-\n-public class TestEmbeddable extends SingleEMFTestCase {\n-\n-    private OpenJPAEntityManagerSPI         em = null;\n-    private OpenJPAEntityManagerFactorySPI  emf_noCache = null;\n-    private OpenJPAEntityManagerSPI         em_noCache = null;\n-    private WriteBehindCache                wbCache = null;\n-    private WriteBehindCacheManager         wbcm = null;\n-    private WriteBehindCallback             wbCallback = null;\n-\n-\n-    private static Object[] cacheProps =\n-        new Object[] { \n-            Entity01.class, Embeddable01.class, Entity02.class, CLEAR_TABLES, RETAIN_DATA,\n-            \"openjpa.DataCache\", \"true\",\n-            \"openjpa.RemoteCommitProvider\", \"sjvm\", \n-            \"openjpa.WriteBehindCache\", \"true\",\n-            \"openjpa.WriteBehindCallback\", \"true(sleepTime=15000)\", \n-            \"openjpa.RuntimeUnenhancedClasses\", \"unsupported\",\n-            \"openjpa.Log\", \"DefaultLevel=WARN\" \n-        };\n-\n-    private static Object [] noCacheProps = \n-        new Object[] { \n-            Entity01.class, Embeddable01.class, Entity02.class, CLEAR_TABLES, RETAIN_DATA,\n-            \"openjpa.RuntimeUnenhancedClasses\", \"unsupported\",\n-            \"openjpa.Log\", \"DefaultLevel=WARN\" \n-        };\n-\n-    public void setUp() throws Exception {\n-        // \n-        // Create and verify the necessary WriteBehind cache objects\n-        // \n-        emf = createEMF(cacheProps);\n-        assertNotNull(emf);\n-        em = emf.createEntityManager();\n-        assertNotNull(em);\n-        wbcm = emf.getConfiguration().getWriteBehindCacheManagerInstance();\n-        assertNotNull(wbcm);\n-        wbCache = wbcm.getSystemWriteBehindCache();\n-        assertNotNull(wbCache);\n-        wbCallback = emf.getConfiguration().getWriteBehindCallbackInstance();\n-        assertNotNull(wbCallback);\n-\n-        // \n-        // Create and verify the non-WriteBehind cache objects\n-        // \n-        emf_noCache = createEMF(noCacheProps);\n-        assertNotNull(emf_noCache);\n-        em_noCache = emf_noCache.createEntityManager();\n-        assertNotNull(em_noCache);\n-\n-        //\n-        // Clear the persistence contexts\n-        //\n-        em.clear();\n-        em_noCache.clear();\n-\n-        // \n-        // Clear the WriteBehind cache\n-        //\n-        wbCache.clear();\n-        assertTrue(wbCache.getSize() == 0);\n-        assertTrue(wbCache.isEmpty());\n-    }\n-\n-    public void tearDown() {\n-        // \n-        // WriteBehind cache EMF/EM\n-        //\n-        if (em != null) {\n-            em.close();\n-        }\n-        if (emf != null) {\n-            emf.close();\n-        }\n-\n-        // \n-        // Non-WriteBehind cache EMF/EF\n-        //\n-        if (em_noCache != null) {\n-            em_noCache.close();\n-        }\n-        if (emf_noCache != null) {\n-            emf_noCache.close();\n-        }\n-    }\n-\n-\n-    /**\n-     * Insert Entity01/Embeddable01 with manual flush of WriteBehind cache\n-     *\n-     * @exception Exception\n-     */\n-    public void test_Entity01_Manual_Flush() { \n-\n-        // \n-        // Create a new instance of the entity/embeddable class\n-        // \n-        Entity01 newEntity01 = new Entity01();\n-        newEntity01.setId(1);\n-        newEntity01.setEnt01_str01(\"AA\");\n-        newEntity01.setEnt01_str02(\"BBBB\");\n-        newEntity01.setEnt01_str03(\"CCCCCCCC\");\n-        newEntity01.setEnt01_int01(1);\n-        newEntity01.setEnt01_int02(2);\n-        newEntity01.setEnt01_int03(3);\n-        newEntity01.setEmb01_int01(4);\n-        newEntity01.setEmb01_int02(5);\n-        newEntity01.setEmb01_int03(6);\n-\n-        // \n-        // Persist the new entity/embeddable in the WriteBehind cache\n-        // \n-        em.getTransaction().begin();\n-        em.persist(newEntity01);\n-        em.getTransaction().commit();\n-\n-        // \n-        // Verify the entity was saved in the WriteBehind cache\n-        // \n-        assertTrue(wbCache.getSize() > 0);\n-        assertFalse(wbCache.isEmpty());\n-        assertTrue(wbCache.contains(newEntity01));\n-\n-        // \n-        // Verify the entity has not yet been saved in the database\n-        // \n-        Entity01 findEntity01 = em_noCache.find(Entity01.class, 1);\n-        assertNull(findEntity01);\n-\n-        // \n-        // Flush the WriteBehind cache\n-        // \n-        Collection<Exception> exceptions = wbCallback.flush();\n-        assertTrue(exceptions.size() == 0);\n-        assertTrue(wbCache.getSize() == 0);\n-        assertTrue(wbCache.isEmpty());\n-\n-        // \n-        // Verify the entity/embeddable has now been saved in the database\n-        // \n-        em_noCache.clear();\n-        findEntity01 = em_noCache.find(Entity01.class, 1);\n-        assertNotNull(findEntity01);\n-        assertEquals(findEntity01.getId(), 1);\n-        assertEquals(findEntity01.getEnt01_str01(), \"AA\");\n-        assertEquals(findEntity01.getEnt01_str02(), \"BBBB\");\n-        assertEquals(findEntity01.getEnt01_str03(), \"CCCCCCCC\");\n-        assertEquals(findEntity01.getEnt01_int01(), 1);\n-        assertEquals(findEntity01.getEnt01_int02(), 2);\n-        assertEquals(findEntity01.getEnt01_int03(), 3);\n-        assertEquals(findEntity01.getEmb01_int01(), 4);\n-        assertEquals(findEntity01.getEmb01_int02(), 5);\n-        assertEquals(findEntity01.getEmb01_int03(), 6);\n-    }  \n-\n-\n-    /**\n-     * Insert Entity02 with manual flush of WriteBehind cache\n-     *\n-     * @exception Exception\n-     */\n-    public void test_Entity02_Manual_Flush() { \n-\n-        // \n-        // Create a new instance of the entity class\n-        // \n-        Entity02 newEntity02 = new Entity02();\n-        newEntity02.setId(2);\n-        newEntity02.setEnt02_str01(\"DD\");\n-        newEntity02.setEnt02_str02(\"EEEE\");\n-        newEntity02.setEnt02_str03(\"FFFFFFFF\");\n-        newEntity02.setEnt02_int01(7);\n-        newEntity02.setEnt02_int02(8);\n-        newEntity02.setEnt02_int03(9);\n-\n-        // \n-        // Persist the new entity in the WriteBehind cache\n-        // \n-        em.getTransaction().begin();\n-        em.persist(newEntity02);\n-        em.getTransaction().commit();\n-\n-        // \n-        // Verify the entity was saved in the WriteBehind cache\n-        // \n-        assertTrue(wbCache.getSize() > 0);\n-        assertFalse(wbCache.isEmpty());\n-        assertTrue(wbCache.contains(newEntity02));\n-\n-        // \n-        // Verify the entity has not yet been saved in the database\n-        // \n-        Entity02 findEntity02 = em_noCache.find(Entity02.class, 2);\n-        assertNull(findEntity02);\n-\n-        // \n-        // Flush the WriteBehind cache\n-        // \n-        Collection<Exception> exceptions = wbCallback.flush();\n-        assertTrue(exceptions.size() == 0);\n-        assertTrue(wbCache.getSize() == 0);\n-        assertTrue(wbCache.isEmpty());\n-\n-        // \n-        // Verify the entity has now been saved in the database\n-        // \n-        em_noCache.clear();\n-        findEntity02 = em_noCache.find(Entity02.class, 2);\n-        assertNotNull(findEntity02);\n-        assertEquals(findEntity02.getId(), 2);\n-        assertEquals(findEntity02.getEnt02_str01(), \"DD\");\n-        assertEquals(findEntity02.getEnt02_str02(), \"EEEE\");\n-        assertEquals(findEntity02.getEnt02_str03(), \"FFFFFFFF\");\n-        assertEquals(findEntity02.getEnt02_int01(), 7);\n-        assertEquals(findEntity02.getEnt02_int02(), 8);\n-        assertEquals(findEntity02.getEnt02_int03(), 9);\n-    } \n-}"},{"sha":"c02c480822070343aa9f8ea0e4aba1a219d3d670","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/crud/TestNonGeneratedIdDelete.java","status":"removed","additions":0,"deletions":40,"changes":40,"blob_url":"https://github.com/apache/openjpa/blob/d299ac431108416d606549ec771ca5b5a26d78a6/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/crud/TestNonGeneratedIdDelete.java","raw_url":"https://github.com/apache/openjpa/raw/d299ac431108416d606549ec771ca5b5a26d78a6/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/crud/TestNonGeneratedIdDelete.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/crud/TestNonGeneratedIdDelete.java?ref=d299ac431108416d606549ec771ca5b5a26d78a6","patch":"@@ -1,40 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.writebehind.crud;\n-\n-import org.apache.openjpa.jdbc.writebehind.entities.SimpleEntity;\n-import org.apache.openjpa.jdbc.writebehind.entities.SimpleNonGeneratedIdEntity;\n-\n-public class TestNonGeneratedIdDelete extends AbstractDeleteTest {\n-\n-    @Override\n-    protected Class<? extends SimpleEntity> getEntityType() {\n-        return SimpleNonGeneratedIdEntity.class;\n-    }\n-\n-    @Override\n-    protected boolean idIsGenerated() {\n-        return false;\n-    }\n-\n-    @Override\n-    protected SimpleEntity newEntityInstance() {\n-        return new SimpleNonGeneratedIdEntity();\n-    }\n-}"},{"sha":"8cac1fd7def2d301fd55958586f52083519da216","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/crud/TestNonGeneratedIdInsert.java","status":"removed","additions":0,"deletions":35,"changes":35,"blob_url":"https://github.com/apache/openjpa/blob/d299ac431108416d606549ec771ca5b5a26d78a6/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/crud/TestNonGeneratedIdInsert.java","raw_url":"https://github.com/apache/openjpa/raw/d299ac431108416d606549ec771ca5b5a26d78a6/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/crud/TestNonGeneratedIdInsert.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/crud/TestNonGeneratedIdInsert.java?ref=d299ac431108416d606549ec771ca5b5a26d78a6","patch":"@@ -1,35 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.writebehind.crud;\n-\n-import org.apache.openjpa.jdbc.writebehind.entities.SimpleEntity;\n-import org.apache.openjpa.jdbc.writebehind.entities.SimpleNonGeneratedIdEntity;\n-\n-public class TestNonGeneratedIdInsert extends AbstractInsertTest {\n-\n-    @Override\n-    protected final Class<? extends SimpleEntity> getEntityType() {\n-        return SimpleNonGeneratedIdEntity.class;\n-    }\n-\n-    @Override\n-    protected boolean idIsGenerated() {\n-        return false;\n-    }\n-}"},{"sha":"5e81efe087bebd3f7dd3df51870772f7ed5bf180","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/crud/TestNonGeneratedIdUpdate.java","status":"removed","additions":0,"deletions":40,"changes":40,"blob_url":"https://github.com/apache/openjpa/blob/d299ac431108416d606549ec771ca5b5a26d78a6/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/crud/TestNonGeneratedIdUpdate.java","raw_url":"https://github.com/apache/openjpa/raw/d299ac431108416d606549ec771ca5b5a26d78a6/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/crud/TestNonGeneratedIdUpdate.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/crud/TestNonGeneratedIdUpdate.java?ref=d299ac431108416d606549ec771ca5b5a26d78a6","patch":"@@ -1,40 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.writebehind.crud;\n-\n-import org.apache.openjpa.jdbc.writebehind.entities.SimpleEntity;\n-import org.apache.openjpa.jdbc.writebehind.entities.SimpleNonGeneratedIdEntity;\n-\n-public class TestNonGeneratedIdUpdate extends AbstractUpdateTest {\n-\n-    @Override\n-    protected Class<? extends SimpleEntity> getEntityType() {\n-        return SimpleNonGeneratedIdEntity.class;\n-    }\n-\n-    @Override\n-    protected boolean idIsGenerated() {\n-        return false;\n-    }\n-\n-    @Override\n-    protected SimpleEntity newEntityInstance() {\n-        return new SimpleNonGeneratedIdEntity();\n-    }\n-}"},{"sha":"9b0000e06584a40039d3f597b27af0225aa10ee2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/crud/TestTableGeneratedIdDelete.java","status":"removed","additions":0,"deletions":41,"changes":41,"blob_url":"https://github.com/apache/openjpa/blob/d299ac431108416d606549ec771ca5b5a26d78a6/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/crud/TestTableGeneratedIdDelete.java","raw_url":"https://github.com/apache/openjpa/raw/d299ac431108416d606549ec771ca5b5a26d78a6/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/crud/TestTableGeneratedIdDelete.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/crud/TestTableGeneratedIdDelete.java?ref=d299ac431108416d606549ec771ca5b5a26d78a6","patch":"@@ -1,41 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.writebehind.crud;\n-\n-import org.apache.openjpa.jdbc.writebehind.entities.SimpleEntity;\n-import org.apache.openjpa.jdbc.writebehind.entities.\n-    SimpleTableGeneratedIdEntity;\n-\n-public class TestTableGeneratedIdDelete extends AbstractDeleteTest {\n-\n-    @Override\n-    protected Class<? extends SimpleEntity> getEntityType() {\n-        return SimpleTableGeneratedIdEntity.class;\n-    }\n-\n-    @Override\n-    protected boolean idIsGenerated() {\n-        return true;\n-    }\n-\n-    @Override\n-    protected SimpleEntity newEntityInstance() {\n-        return new SimpleTableGeneratedIdEntity();\n-    }\n-}"},{"sha":"04c9f947787a115391ab218a195344ccf8cb9ddd","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/crud/TestTableGeneratedIdUpdate.java","status":"removed","additions":0,"deletions":40,"changes":40,"blob_url":"https://github.com/apache/openjpa/blob/d299ac431108416d606549ec771ca5b5a26d78a6/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/crud/TestTableGeneratedIdUpdate.java","raw_url":"https://github.com/apache/openjpa/raw/d299ac431108416d606549ec771ca5b5a26d78a6/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/crud/TestTableGeneratedIdUpdate.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/crud/TestTableGeneratedIdUpdate.java?ref=d299ac431108416d606549ec771ca5b5a26d78a6","patch":"@@ -1,40 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.writebehind.crud;\n-\n-import org.apache.openjpa.jdbc.writebehind.entities.SimpleEntity;\n-import org.apache.openjpa.jdbc.writebehind.entities.\n-    SimpleTableGeneratedIdEntity;\n-\n-public class TestTableGeneratedIdUpdate extends AbstractUpdateTest {\n-    @Override\n-    protected Class<? extends SimpleEntity> getEntityType() {\n-        return SimpleTableGeneratedIdEntity.class;\n-    }\n-\n-    @Override\n-    protected boolean idIsGenerated() {\n-        return true;\n-    }\n-\n-    @Override\n-    protected SimpleEntity newEntityInstance() {\n-        return new SimpleTableGeneratedIdEntity();\n-    }\n-}"},{"sha":"de58d73ec18b6425568a5c1eefbecbf2e8a34f69","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/crud/TestTableGeneratedInsert.java","status":"removed","additions":0,"deletions":36,"changes":36,"blob_url":"https://github.com/apache/openjpa/blob/d299ac431108416d606549ec771ca5b5a26d78a6/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/crud/TestTableGeneratedInsert.java","raw_url":"https://github.com/apache/openjpa/raw/d299ac431108416d606549ec771ca5b5a26d78a6/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/crud/TestTableGeneratedInsert.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/crud/TestTableGeneratedInsert.java?ref=d299ac431108416d606549ec771ca5b5a26d78a6","patch":"@@ -1,36 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.writebehind.crud;\n-\n-import org.apache.openjpa.jdbc.writebehind.entities.SimpleEntity;\n-import org.apache.openjpa.jdbc.writebehind.entities.\n-    SimpleTableGeneratedIdEntity;\n-\n-public class TestTableGeneratedInsert extends AbstractInsertTest {\n-\n-    @Override\n-    protected final Class<? extends SimpleEntity> getEntityType() {\n-        return SimpleTableGeneratedIdEntity.class;\n-    }\n-\n-    @Override\n-    protected boolean idIsGenerated() {\n-        return true;\n-    }\n-}"},{"sha":"0264be0ebbc96d12b20b965b395a50cc2994e9d2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/entities/AbstractSimpleEntity.java","status":"removed","additions":0,"deletions":55,"changes":55,"blob_url":"https://github.com/apache/openjpa/blob/d299ac431108416d606549ec771ca5b5a26d78a6/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/entities/AbstractSimpleEntity.java","raw_url":"https://github.com/apache/openjpa/raw/d299ac431108416d606549ec771ca5b5a26d78a6/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/entities/AbstractSimpleEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/entities/AbstractSimpleEntity.java?ref=d299ac431108416d606549ec771ca5b5a26d78a6","patch":"@@ -1,55 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.writebehind.entities;\n-\n-import javax.persistence.MappedSuperclass;\n-import javax.persistence.Version;\n-\n-\n-@MappedSuperclass\n-public abstract class AbstractSimpleEntity implements SimpleEntity {\n-    @Version\n-    private int version;\n-    private String forename;\n-    private String surname;\n-\n-    public int getVersion() {\n-        return version;\n-    }\n-\n-    public void setVersion(int version) {\n-        this.version = version;\n-    }\n-\n-    public String getSurname() {\n-        return surname;\n-    }\n-\n-    public void setSurname(String surname) {\n-        this.surname = surname;\n-    }\n-\n-    public String getForename() {\n-        return forename;\n-    }\n-\n-    public void setForename(String name) {\n-        this.forename = name;\n-    }\n-}"},{"sha":"63958a84febab3beb823f4cff0d974984d248354","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/entities/Embeddable01.java","status":"removed","additions":0,"deletions":70,"changes":70,"blob_url":"https://github.com/apache/openjpa/blob/d299ac431108416d606549ec771ca5b5a26d78a6/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/entities/Embeddable01.java","raw_url":"https://github.com/apache/openjpa/raw/d299ac431108416d606549ec771ca5b5a26d78a6/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/entities/Embeddable01.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/entities/Embeddable01.java?ref=d299ac431108416d606549ec771ca5b5a26d78a6","patch":"@@ -1,70 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.writebehind.entities;\n-\n-import javax.persistence.Embeddable;\n-\n-@Embeddable\n-public class Embeddable01 {\n-\n-    private int emb01_int01;\n-    private int emb01_int02;\n-    private int emb01_int03;\n-\n-    public Embeddable01() {        \n-    }\n-    public Embeddable01(int emb01_int01, \n-                        int emb01_int02, \n-                        int emb01_int03) {        \n-        this.emb01_int01 = emb01_int01;\n-        this.emb01_int02 = emb01_int02;\n-        this.emb01_int03 = emb01_int03;\n-    }\n-\n-    public String toString() {\n-        return( \"Embeddable01: \" + \n-                \" emb01_int01: \" + getEmb01_int01() + \n-                \" emb01_int02: \" + getEmb01_int02() + \n-                \" emb01_int03: \" + getEmb01_int03() );\n-    }\n-\n-    //----------------------------------------------------------------------------------------------\n-    // Embeddable01 fields\n-    //----------------------------------------------------------------------------------------------\n-    public int getEmb01_int01() {\n-        return emb01_int01;\n-    }\n-    public void setEmb01_int01(int ii) {\n-        this.emb01_int01 = ii;\n-    }\n-\n-    public int getEmb01_int02() {\n-        return emb01_int02;\n-    }\n-    public void setEmb01_int02(int ii) {\n-        this.emb01_int02 = ii;\n-    }\n-\n-    public int getEmb01_int03() {\n-        return emb01_int03;\n-    } \n-    public void setEmb01_int03(int ii) {\n-        this.emb01_int03 = ii;\n-    }\n-}"},{"sha":"4c36e88c2ba1e3f0caac182063e0b778c40185e0","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/entities/Entity01.java","status":"removed","additions":0,"deletions":155,"changes":155,"blob_url":"https://github.com/apache/openjpa/blob/d299ac431108416d606549ec771ca5b5a26d78a6/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/entities/Entity01.java","raw_url":"https://github.com/apache/openjpa/raw/d299ac431108416d606549ec771ca5b5a26d78a6/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/entities/Entity01.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/entities/Entity01.java?ref=d299ac431108416d606549ec771ca5b5a26d78a6","patch":"@@ -1,155 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.writebehind.entities;\n-\n-import java.io.Serializable;\n-\n-import javax.persistence.Embedded;\n-import javax.persistence.Entity;\n-import javax.persistence.Id;\n-import javax.persistence.Table;\n-\n-@Entity\n-@Table(name=\"WB_Entity01\")\n-public class Entity01 implements Serializable {\n-\n-    private static final long serialVersionUID = 2961572787273807912L;\n-    \n-    @Id\n-    private int id; \n-    private String ent01_str01;\n-    private String ent01_str02;\n-    private String ent01_str03;\n-    private int ent01_int01;\n-    private int ent01_int02;\n-    private int ent01_int03;\n-    @Embedded \n-    private Embeddable01 embeddable01;\n-\n-    public Entity01() {\n-        embeddable01 = new Embeddable01();\n-    }\n-    public Entity01(String ent01_str01, \n-                    String ent01_str02, \n-                    String ent01_str03, \n-                    int ent01_int01, \n-                    int ent01_int02, \n-                    int ent01_int03,\n-                    Embeddable01 embeddable01) {\n-        this.ent01_str01 = ent01_str01;\n-        this.ent01_str02 = ent01_str02;\n-        this.ent01_str02 = ent01_str03;\n-        this.ent01_int01 = ent01_int01;\n-        this.ent01_int02 = ent01_int02;\n-        this.ent01_int03 = ent01_int03;\n-        this.embeddable01 = embeddable01;\n-    }\n-\n-    public String toString() {\n-        return( \"Entity01: id: \" + getId() + \n-                \" ent01_str01: \" + getEnt01_str01() +\n-                \" ent01_str02: \" + getEnt01_str02() + \n-                \" ent01_str03: \" + getEnt01_str03() + \n-                \" ent01_int01: \" + getEnt01_int01() + \n-                \" ent01_int02: \" + getEnt01_int02() + \n-                \" ent01_int03: \" + getEnt01_int03() +\n-                \" embeddable01: \" + getEmbeddable01() );\n-    }\n-\n-    //----------------------------------------------------------------------------------------------\n-    // Entity01 fields\n-    //----------------------------------------------------------------------------------------------\n-    public int getId() {\n-        return id;\n-    }\n-    public void setId(int id) {\n-        this.id = id;\n-    }\n-\n-    public String getEnt01_str01() {\n-        return ent01_str01;\n-    }\n-    public void setEnt01_str01(String str) {\n-        this.ent01_str01 = str;\n-    }\n-\n-    public String getEnt01_str02() {\n-        return ent01_str02;\n-    }\n-    public void setEnt01_str02(String str) {\n-        this.ent01_str02 = str;\n-    }\n-\n-    public String getEnt01_str03() {\n-        return ent01_str03;\n-    }\n-    public void setEnt01_str03(String str) {\n-        this.ent01_str03 = str;\n-    }\n-\n-    public int getEnt01_int01() {\n-        return ent01_int01;\n-    }\n-    public void setEnt01_int01(int ii) {\n-        this.ent01_int01 = ii;\n-    }\n-\n-    public int getEnt01_int02() {\n-        return ent01_int02;\n-    }\n-    public void setEnt01_int02(int ii) {\n-        this.ent01_int02 = ii;\n-    }\n-\n-    public int getEnt01_int03() {\n-        return ent01_int03;\n-    } \n-    public void setEnt01_int03(int ii) {\n-        this.ent01_int03 = ii;\n-    }\n-\n-    public Embeddable01 getEmbeddable01() {\n-        return embeddable01;\n-    }\n-    public void setEmbeddable01(Embeddable01 embeddable01) {\n-        this.embeddable01 = embeddable01;\n-    }\n-\n-    //----------------------------------------------------------------------------------------------\n-    // Embeddable01 fields\n-    //----------------------------------------------------------------------------------------------\n-    public int getEmb01_int01() {\n-        return embeddable01.getEmb01_int01();\n-    }\n-    public void setEmb01_int01(int ii) {\n-        embeddable01.setEmb01_int01(ii);\n-    }\n-    public int getEmb01_int02() {\n-        return embeddable01.getEmb01_int02();\n-    }\n-    public void setEmb01_int02(int ii) {\n-        embeddable01.setEmb01_int02(ii);\n-    }\n-    public int getEmb01_int03() {\n-        return embeddable01.getEmb01_int03();\n-    }\n-    public void setEmb01_int03(int ii) {\n-        embeddable01.setEmb01_int03(ii);\n-    }\n-}"},{"sha":"59fa0218a50069a7fe524085234d7ce6c342577c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/entities/Entity02.java","status":"removed","additions":0,"deletions":119,"changes":119,"blob_url":"https://github.com/apache/openjpa/blob/d299ac431108416d606549ec771ca5b5a26d78a6/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/entities/Entity02.java","raw_url":"https://github.com/apache/openjpa/raw/d299ac431108416d606549ec771ca5b5a26d78a6/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/entities/Entity02.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/entities/Entity02.java?ref=d299ac431108416d606549ec771ca5b5a26d78a6","patch":"@@ -1,119 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.writebehind.entities;\n-\n-import java.io.Serializable;\n-\n-import javax.persistence.Entity;\n-import javax.persistence.Id;\n-import javax.persistence.Table;\n-\n-@Entity\n-@Table(name=\"WB_Entity02\")\n-public class Entity02 implements Serializable {\n-\n-    private static final long serialVersionUID = 2961572787273807912L;\n-    \n-    @Id\n-    private int id; \n-    private String ent02_str01;\n-    private String ent02_str02;\n-    private String ent02_str03;\n-    private int ent02_int01;\n-    private int ent02_int02;\n-    private int ent02_int03;\n-\n-    public Entity02() {\n-    }\n-    public Entity02(String ent02_str01, \n-                    String ent02_str02, \n-                    String ent02_str03,\n-                    int ent02_int01, \n-                    int ent02_int02, \n-                    int ent02_int03) {\n-        this.ent02_str01 = ent02_str01;\n-        this.ent02_str02 = ent02_str02;\n-        this.ent02_str02 = ent02_str03;\n-        this.ent02_int01 = ent02_int01;\n-        this.ent02_int02 = ent02_int02;\n-        this.ent02_int03 = ent02_int03;\n-    }\n-\n-    public String toString() {\n-        return( \"Entity02: id: \" + getId() + \n-                \" ent02_str01: \" + getEnt02_str01() +\n-                \" ent02_str02: \" + getEnt02_str02() + \n-                \" ent02_str03: \" + getEnt02_str03() +\n-                \" ent02_int01: \" + getEnt02_int01() + \n-                \" ent02_int02: \" + getEnt02_int02() + \n-                \" ent02_int03: \" + getEnt02_int03() );\n-    }\n-\n-    //----------------------------------------------------------------------------------------------\n-    // Entity02 fields\n-    //----------------------------------------------------------------------------------------------\n-    public int getId() {\n-        return id;\n-    }\n-    public void setId(int id) {\n-        this.id = id;\n-    }\n-\n-    public String getEnt02_str01() {\n-        return ent02_str01;\n-    }\n-    public void setEnt02_str01(String str) {\n-        this.ent02_str01 = str;\n-    }\n-\n-    public String getEnt02_str02() {\n-        return ent02_str02;\n-    }\n-    public void setEnt02_str02(String str) {\n-        this.ent02_str02 = str;\n-    }\n-\n-    public String getEnt02_str03() {\n-        return ent02_str03;\n-    }\n-    public void setEnt02_str03(String str) {\n-        this.ent02_str03 = str;\n-    }\n-\n-    public int getEnt02_int01() {\n-        return ent02_int01;\n-    }\n-    public void setEnt02_int01(int ii) {\n-        this.ent02_int01 = ii;\n-    }\n-\n-    public int getEnt02_int02() {\n-        return ent02_int02;\n-    }\n-    public void setEnt02_int02(int ii) {\n-        this.ent02_int02 = ii;\n-    }\n-\n-    public int getEnt02_int03() {\n-        return ent02_int03;\n-    } \n-    public void setEnt02_int03(int ii) {\n-        this.ent02_int03 = ii;\n-    }\n-}"},{"sha":"d44e7068f76d7022cca9125efcc88bf09cf8c698","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/entities/SimpleDatabaseGeneratedIdEntity.java","status":"removed","additions":0,"deletions":41,"changes":41,"blob_url":"https://github.com/apache/openjpa/blob/d299ac431108416d606549ec771ca5b5a26d78a6/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/entities/SimpleDatabaseGeneratedIdEntity.java","raw_url":"https://github.com/apache/openjpa/raw/d299ac431108416d606549ec771ca5b5a26d78a6/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/entities/SimpleDatabaseGeneratedIdEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/entities/SimpleDatabaseGeneratedIdEntity.java?ref=d299ac431108416d606549ec771ca5b5a26d78a6","patch":"@@ -1,41 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.writebehind.entities;\n-\n-import javax.persistence.Entity;\n-import javax.persistence.GeneratedValue;\n-import javax.persistence.GenerationType;\n-import javax.persistence.Id;\n-\n-\n-@Entity\n-public class SimpleDatabaseGeneratedIdEntity extends AbstractSimpleEntity\n-    implements SimpleEntity {\n-    @Id\n-    @GeneratedValue(strategy = GenerationType.IDENTITY)\n-    private int id;\n-\n-    public int getId() {\n-        return id;\n-    }\n-\n-    public void setId(int id) {\n-        this.id = id;\n-    }\n-}"},{"sha":"eb15aa84d7d7d1736f8807ca41a6fd53f3ba43a4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/entities/SimpleEntity.java","status":"removed","additions":0,"deletions":37,"changes":37,"blob_url":"https://github.com/apache/openjpa/blob/d299ac431108416d606549ec771ca5b5a26d78a6/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/entities/SimpleEntity.java","raw_url":"https://github.com/apache/openjpa/raw/d299ac431108416d606549ec771ca5b5a26d78a6/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/entities/SimpleEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/entities/SimpleEntity.java?ref=d299ac431108416d606549ec771ca5b5a26d78a6","patch":"@@ -1,37 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.writebehind.entities;\n-\n-public interface SimpleEntity {\n-    public int getId();\n-\n-    public void setId(int id);\n-\n-    public int getVersion();\n-\n-    public void setVersion(int version);\n-\n-    public String getForename();\n-\n-    public void setForename(String name);\n-    \n-    public String getSurname();\n-\n-    public void setSurname(String name);\n-}"},{"sha":"2b209435f707c5a204b994e55f3010e7200c7868","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/entities/SimpleNonGeneratedIdEntity.java","status":"removed","additions":0,"deletions":38,"changes":38,"blob_url":"https://github.com/apache/openjpa/blob/d299ac431108416d606549ec771ca5b5a26d78a6/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/entities/SimpleNonGeneratedIdEntity.java","raw_url":"https://github.com/apache/openjpa/raw/d299ac431108416d606549ec771ca5b5a26d78a6/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/entities/SimpleNonGeneratedIdEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/entities/SimpleNonGeneratedIdEntity.java?ref=d299ac431108416d606549ec771ca5b5a26d78a6","patch":"@@ -1,38 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.writebehind.entities;\n-\n-import javax.persistence.Entity;\n-import javax.persistence.Id;\n-\n-\n-@Entity\n-public class SimpleNonGeneratedIdEntity extends AbstractSimpleEntity implements\n-    SimpleEntity {\n-    @Id\n-    private int id;\n-\n-    public int getId() {\n-        return id;\n-    }\n-\n-    public void setId(int id) {\n-        this.id = id;\n-    }\n-}"},{"sha":"d7be8d4953d8968163daf72a7f4e1337aa924982","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/entities/SimpleTableGeneratedIdEntity.java","status":"removed","additions":0,"deletions":40,"changes":40,"blob_url":"https://github.com/apache/openjpa/blob/d299ac431108416d606549ec771ca5b5a26d78a6/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/entities/SimpleTableGeneratedIdEntity.java","raw_url":"https://github.com/apache/openjpa/raw/d299ac431108416d606549ec771ca5b5a26d78a6/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/entities/SimpleTableGeneratedIdEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/entities/SimpleTableGeneratedIdEntity.java?ref=d299ac431108416d606549ec771ca5b5a26d78a6","patch":"@@ -1,40 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.writebehind.entities;\n-\n-import javax.persistence.Entity;\n-import javax.persistence.GeneratedValue;\n-import javax.persistence.Id;\n-\n-\n-@Entity\n-public class SimpleTableGeneratedIdEntity extends AbstractSimpleEntity\n-    implements SimpleEntity {\n-    @Id\n-    @GeneratedValue\n-    private int id;\n-\n-    public int getId() {\n-        return id;\n-    }\n-\n-    public void setId(int id) {\n-        this.id = id;\n-    }\n-}"}]}

