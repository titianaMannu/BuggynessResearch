{"sha":"c2a723816bddb0730c3f7c44e6d15fa1fd4189d1","node_id":"MDY6Q29tbWl0MjA2MzY0OmMyYTcyMzgxNmJkZGIwNzMwYzNmN2M0NGU2ZDE1ZmExZmQ0MTg5ZDE=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-10-01T18:49:05Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-10-01T18:49:05Z"},"message":"OPENJPA-1330: bi-directional many-to-one/one-to-many using join table strategy\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@820748 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4c1056941d0e4ebc0bc17c81cd8f8439b227f113","url":"https://api.github.com/repos/apache/openjpa/git/trees/4c1056941d0e4ebc0bc17c81cd8f8439b227f113"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/c2a723816bddb0730c3f7c44e6d15fa1fd4189d1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/c2a723816bddb0730c3f7c44e6d15fa1fd4189d1","html_url":"https://github.com/apache/openjpa/commit/c2a723816bddb0730c3f7c44e6d15fa1fd4189d1","comments_url":"https://api.github.com/repos/apache/openjpa/commits/c2a723816bddb0730c3f7c44e6d15fa1fd4189d1/comments","author":null,"committer":null,"parents":[{"sha":"99844b6b1f3d13c07bdb6223d2edc2f47320aad2","url":"https://api.github.com/repos/apache/openjpa/commits/99844b6b1f3d13c07bdb6223d2edc2f47320aad2","html_url":"https://github.com/apache/openjpa/commit/99844b6b1f3d13c07bdb6223d2edc2f47320aad2"}],"stats":{"total":535,"additions":273,"deletions":262},"files":[{"sha":"22ccda2e8f6c9971709b5b8c2ddfbfa80ad63eda","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMapping.java","status":"modified","additions":66,"deletions":0,"changes":66,"blob_url":"https://github.com/apache/openjpa/blob/c2a723816bddb0730c3f7c44e6d15fa1fd4189d1/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMapping.java","raw_url":"https://github.com/apache/openjpa/raw/c2a723816bddb0730c3f7c44e6d15fa1fd4189d1/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMapping.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMapping.java?ref=c2a723816bddb0730c3f7c44e6d15fa1fd4189d1","patch":"@@ -82,6 +82,13 @@\n     private Boolean _bidirectionalJoinTableOwner = null;\n     private Boolean _bidirectionalJoinTableNonOwner = null;\n     \n+    private Boolean _bi_MTo1_JT = null;\n+    private Boolean _uni_1ToM_FK = null;\n+    private FieldMapping _bi_1ToM_JT_Field = null;\n+    private FieldMapping _bi_MTo1_JT_Field = null;\n+    private ForeignKey _bi_1ToM_Join_FK = null;\n+    private ForeignKey _bi_1ToM_Elem_FK = null;\n+        \n     /**\n      * Constructor.\n      */\n@@ -1243,5 +1250,64 @@ public boolean isBidirectionalJoinTableMappingNonOwner() {\n         }\n         return _bidirectionalJoinTableNonOwner.booleanValue();\n     }\n+    \n+    public boolean isBiMTo1JT() {\n+        if (_bi_MTo1_JT == null) {\n+            _bi_MTo1_JT = getMappingRepository().isBiMTo1JT(this);\n+        }\n+        return _bi_MTo1_JT;\n+    }\n \n+    public FieldMapping getBi_1ToM_JTField() {\n+        if (_bi_1ToM_JT_Field == null) {\n+            _bi_1ToM_JT_Field = getMappingRepository().getBi_1ToM_JoinTableField(this);\n+        }\n+        return _bi_1ToM_JT_Field;\n+    }\n+    \n+    public FieldMapping getBi_MTo1_JTField() {\n+        if (_bi_MTo1_JT_Field == null) {\n+            _bi_MTo1_JT_Field = getMappingRepository().getBi_MTo1_JoinTableField(this);\n+        }\n+        return _bi_MTo1_JT_Field;\n+    }\n+\n+    public ForeignKey getBi1ToMJoinFK() {\n+        if (_bi_1ToM_Join_FK == null) {\n+            getBi_1ToM_JTField();\n+            if (_bi_1ToM_JT_Field != null)\n+                _bi_1ToM_Join_FK = _bi_1ToM_JT_Field.getJoinForeignKey();\n+        }\n+        return _bi_1ToM_Join_FK;\n+    }\n+    \n+    public ForeignKey getBi1ToMElemFK() {\n+        if (_bi_1ToM_Elem_FK == null) {\n+            getBi_1ToM_JTField();\n+            if (_bi_1ToM_JT_Field != null)\n+                _bi_1ToM_Elem_FK = _bi_1ToM_JT_Field.getElementMapping().getForeignKey();\n+        }\n+        return _bi_1ToM_Elem_FK;\n+    }\n+    \n+    public boolean isUni1ToMFK() {\n+        if (_uni_1ToM_FK == null)\n+            _uni_1ToM_FK = getMappingRepository().isUni1ToMFK(this);\n+        return _uni_1ToM_FK;\n+    }\n+    \n+    public void setBi1MJoinTableInfo() {\n+        if (getAssociationType() == FieldMetaData.ONE_TO_MANY) {\n+            FieldMapping mapped = getBi_MTo1_JTField();\n+            if (mapped != null) {\n+                FieldMappingInfo info = getMappingInfo();\n+                FieldMappingInfo mappedInfo = mapped.getMappingInfo();\n+                info.setTableName(mappedInfo.getTableName());\n+                info.setColumns(mapped.getElementMapping().getValueInfo().getColumns());\n+                getElementMapping().getValueInfo().setColumns(\n+                    mappedInfo.getColumns());\n+            }\n+        }\n+    }\n+   \n }"},{"sha":"f097f0989e281aa2bc394f0f6a607032f2179ece","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMappingInfo.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/c2a723816bddb0730c3f7c44e6d15fa1fd4189d1/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMappingInfo.java","raw_url":"https://github.com/apache/openjpa/raw/c2a723816bddb0730c3f7c44e6d15fa1fd4189d1/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMappingInfo.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMappingInfo.java?ref=c2a723816bddb0730c3f7c44e6d15fa1fd4189d1","patch":"@@ -150,9 +150,7 @@ public String get(Schema schema) {\n \n     public ForeignKey getJoinForeignKey (final FieldMapping field, Table table,\n         boolean adapt) {\n-        Strategy strat = field.getStrategy();\n-        if (strat instanceof MapTableFieldStrategy && \n-            ((MapTableFieldStrategy)strat).isUni1ToMFK()) {\n+        if (field.isUni1ToMFK()) {\n             List cols = field.getElementMapping().getValueInfo().getColumns();\n             return getJoin(field, table, adapt, cols);\n         }"},{"sha":"b48ecc626b30ab2ea65232cf69287a55a4871543","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingRepository.java","status":"modified","additions":93,"deletions":12,"changes":105,"blob_url":"https://github.com/apache/openjpa/blob/c2a723816bddb0730c3f7c44e6d15fa1fd4189d1/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingRepository.java","raw_url":"https://github.com/apache/openjpa/raw/c2a723816bddb0730c3f7c44e6d15fa1fd4189d1/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingRepository.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingRepository.java?ref=c2a723816bddb0730c3f7c44e6d15fa1fd4189d1","patch":"@@ -982,16 +982,10 @@ protected FieldStrategy handlerMapStrategy(FieldMapping field,\n      * field should use an inverse foreign key or an association table mapping.\n      */\n     private boolean useInverseKeyMapping(FieldMapping field) {\n-        OpenJPAConfiguration conf = field.getRepository().getConfiguration();\n-        boolean isNonDefaultMappingAllowed = field.getRepository().\n-            getMetaDataFactory().getDefaults().isNonDefaultMappingAllowed(conf);\n         FieldMapping mapped = field.getMappedByMapping();\n         if (mapped != null) {\n-            // JPA 2.0: non-default mapping: bi-/1-M/JoinTable ==> join table strategy\n-            FieldMappingInfo info = field.getMappingInfo();\n-            if (isNonDefaultMappingAllowed && \n-                field.getAssociationType() == FieldMetaData.ONE_TO_MANY && \n-                info.getTableName() != null) \n+            //bi-/M-1/JoinTable ==> join table strategy\n+            if (isBiMTo1JT(field)) \n                 return false;\n             if (mapped.getTypeCode() == JavaTypes.PC)\n                 return true;\n@@ -1011,14 +1005,101 @@ private boolean useInverseKeyMapping(FieldMapping field) {\n             && !elem.getValueInfo().getColumns().isEmpty();\n         \n         // JPA 2.0: non-default mapping: uni-/1-M/JoinColumn ==> foreign key strategy\n-        if (isNonDefaultMappingAllowed && \n-            field.getValueInfo().getColumns().size() > 0 &&\n-            field.getAssociationType() == FieldMetaData.ONE_TO_MANY) {\n-            field.getElementMapping().getValueInfo().setColumns(field.getValueInfo().getColumns());\n+        if (isUni1ToMFK(field)) {\n             return true;\n         }\n         return useInverseKeyMapping;\n     }\n+        \n+    public boolean isNonDefaultMappingAllowed() {\n+        OpenJPAConfiguration conf = getConfiguration();\n+        return getMetaDataFactory().getDefaults().isNonDefaultMappingAllowed(conf);\n+    }\n+    \n+    public boolean isUni1ToMFK(FieldMapping field) {\n+        FieldMapping mapped = field.getMappedByMapping();\n+        if (isNonDefaultMappingAllowed()) {\n+            if (field.getAssociationType() == FieldMetaData.ONE_TO_MANY ) {\n+                if (mapped == null) {\n+                    if (hasJoinTable(field))\n+                        return false;\n+                    else if (hasJoinColumn(field)) {\n+                        field.getElementMapping().getValueInfo().setColumns(field.getValueInfo().getColumns());\n+                        return true;\n+                    }\n+                } \n+            } \n+        }\n+        return false;\n+    }\n+    \n+    public boolean isBiMTo1JT(FieldMapping field) {\n+        FieldMapping mapped = field.getMappedByMapping();\n+        if (isNonDefaultMappingAllowed()) {\n+            if (field.getAssociationType() == FieldMetaData.ONE_TO_MANY ) {\n+                if (mapped != null && hasJoinTable(mapped))\n+                    return true;\n+            } else if (field.getAssociationType() == FieldMetaData.MANY_TO_ONE) {\n+                if (getBi_1ToM_JoinTableField(field) != null)\n+                    return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    // return the inverse field of bidirectional many to one\n+    // relation using join table strategy\n+    public FieldMapping getBi_1ToM_JoinTableField(FieldMapping field) {\n+        if (isNonDefaultMappingAllowed()) {\n+            if (field.getAssociationType() == FieldMetaData.ONE_TO_MANY) {\n+                FieldMapping mappedBy = field.getMappedByMapping();\n+                if (mappedBy != null && hasJoinTable(mappedBy))\n+                    return field;\n+            } else if (field.getAssociationType() == FieldMetaData.MANY_TO_ONE) {\n+                if (!hasJoinTable(field))\n+                    return null;\n+                ClassMapping inverse = field.getValueMapping().getTypeMapping();\n+                FieldMapping[] fmds = inverse.getFieldMappings();\n+                for (int i = 0; i < fmds.length; i++) {\n+                    if (field == fmds[i].getMappedByMapping()) \n+                        return fmds[i];\n+                }\n+            }\n+        }\n+        return null;\n+    }\n+\n+    // return the owning field of bidirectional one to many\n+    // relation using join table strategy\n+    public FieldMapping getBi_MTo1_JoinTableField(FieldMapping field) {\n+        if (isNonDefaultMappingAllowed()) {\n+            if (field.getAssociationType() == FieldMetaData.MANY_TO_ONE) {\n+                if (!hasJoinTable(field))\n+                    return null;\n+                ClassMapping inverse = field.getValueMapping().getTypeMapping();\n+                FieldMapping[] fmds = inverse.getFieldMappings();\n+                for (int i = 0; i < fmds.length; i++) {\n+                    if (field == fmds[i].getMappedByMapping()) \n+                        return field;\n+                }\n+             } else if (field.getAssociationType() == FieldMetaData.ONE_TO_MANY) {\n+                FieldMapping mappedBy = field.getMappedByMapping();\n+                if (mappedBy != null && hasJoinTable(mappedBy))\n+                    return mappedBy;\n+            }\n+        }\n+        return null;\n+    }\n+    \n+    public boolean hasJoinColumn(FieldMapping field) {\n+        boolean hasJoinColumn = (field.getValueInfo().getColumns().size() > 0 ? true : false);\n+        return hasJoinColumn;\n+    }\n+    \n+    public boolean hasJoinTable(FieldMapping field) {\n+        boolean hasJoinTable = field.getMappingInfo().getTableName() != null ? true : false;\n+        return hasJoinTable;\n+    }\n     \n     /**\n      * Check the given value against mapped strategies."},{"sha":"1e97d6681686f4101f56666f04ddbaff50273890","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/AbstractFieldStrategy.java","status":"modified","additions":0,"deletions":116,"changes":116,"blob_url":"https://github.com/apache/openjpa/blob/c2a723816bddb0730c3f7c44e6d15fa1fd4189d1/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/AbstractFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/c2a723816bddb0730c3f7c44e6d15fa1fd4189d1/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/AbstractFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/AbstractFieldStrategy.java?ref=c2a723816bddb0730c3f7c44e6d15fa1fd4189d1","patch":"@@ -20,14 +20,10 @@\n \n import java.sql.SQLException;\n \n-import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n-import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.meta.FieldMapping;\n-import org.apache.openjpa.jdbc.meta.FieldMappingInfo;\n import org.apache.openjpa.jdbc.meta.FieldStrategy;\n-import org.apache.openjpa.jdbc.schema.ForeignKey;\n import org.apache.openjpa.jdbc.sql.Joins;\n import org.apache.openjpa.jdbc.sql.Result;\n import org.apache.openjpa.jdbc.sql.RowManager;\n@@ -36,8 +32,6 @@\n import org.apache.openjpa.jdbc.sql.SelectExecutor;\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n import org.apache.openjpa.lib.util.Localizer;\n-import org.apache.openjpa.meta.FieldMetaData;\n-import org.apache.openjpa.meta.JavaTypes;\n import org.apache.openjpa.util.MetaDataException;\n \n /**\n@@ -52,13 +46,6 @@\n     private static final Localizer _loc = Localizer.forPackage\n         (AbstractFieldStrategy.class);\n \n-    private Boolean _isNonDefaultMappingAllowed = null;\n-    private Boolean _isBi1ToMJT = null;\n-    private Boolean _isUni1ToMFK = null;\n-    private Integer _bi1ToMJT = null; //index of the field\n-    private ForeignKey _bi_1ToM_JoinFK = null;\n-    private ForeignKey _bi_1ToM_ElemFK = null;\n-    \n     /**\n      * The owning field mapping.\n      */\n@@ -194,107 +181,4 @@ public void where(OpenJPAStateManager sm, JDBCStore store, RowManager rm,\n         Object prevValue)\n         throws SQLException {\n     }\n-    \n-    private void isNonDefaultMapping() {\n-        FieldMapping mapped = field.getMappedByMapping();\n-        _isBi1ToMJT = false;\n-        _isUni1ToMFK = false;\n-        if (isNonDefaultMappingAllowed()) {\n-            if (field.getAssociationType() == FieldMetaData.ONE_TO_MANY ) {\n-                if (mapped == null) {\n-                    if (hasJoinTable())\n-                        return;\n-                    else if (hasJoinColumn()) {\n-                        _isUni1ToMFK = true;\n-                        return;\n-                    }\n-                } else {\n-                    if (hasJoinTable()) {\n-                        _isBi1ToMJT = true;\n-                        return;\n-                    } else if (hasJoinColumn()){\n-                        return;\n-                    }\n-                }\n-            }\n-        }\n-    }\n-    \n-    private boolean hasJoinColumn() {\n-        boolean hasJoinColumn = (field.getValueInfo().getColumns().size() > 0 ? true : false);\n-        return hasJoinColumn;\n-    }\n-    \n-    private boolean hasJoinTable() {\n-        boolean hasJoinTable = (field.getMappingInfo().getTableName() != null ? true : false);\n-        return hasJoinTable;\n-    }\n-\n-    public boolean isBi1ToMJT() {\n-        if (_isBi1ToMJT == null)\n-            isNonDefaultMapping();\n-        return _isBi1ToMJT;\n-    }\n-    \n-    public boolean isUni1ToMFK() {\n-        if (_isUni1ToMFK == null)\n-            isNonDefaultMapping();\n-        return _isUni1ToMFK;\n-    }\n-\n-    protected boolean isNonDefaultMappingAllowed() {\n-        if (_isNonDefaultMappingAllowed == null) {\n-            OpenJPAConfiguration conf = field.getRepository().getConfiguration();\n-            _isNonDefaultMappingAllowed = field.getRepository().\n-                getMetaDataFactory().getDefaults().isNonDefaultMappingAllowed(conf);\n-        }\n-        return _isNonDefaultMappingAllowed;\n-    }\n-\n-    protected void getBiOneToManyInfo() {\n-        _bi1ToMJT = -1;\n-        if (!isNonDefaultMappingAllowed())\n-            return;\n-        ClassMapping inverse = field.getValueMapping().getTypeMapping();\n-        FieldMapping[] fmds = inverse.getFieldMappings();\n-        for (int i = 0; i < fmds.length; i++) {\n-            if (field == fmds[i].getMappedByMapping()) {\n-                int typeCode = fmds[i].getDeclaredTypeCode(); \n-                if (typeCode == JavaTypes.ARRAY ||\n-                        typeCode == JavaTypes.COLLECTION ||\n-                        typeCode == JavaTypes.MAP) {\n-                    // this is a bi-directional oneToMany relation with\n-                    // @JoinTable annotation ==> join table strategy\n-                    // ==> should not mapped in the owner's table\n-                    FieldMappingInfo info = fmds[i].getMappingInfo();\n-                    if (info.getTableName() != null)\n-                        _bi1ToMJT = i;\n-                    _bi_1ToM_ElemFK = fmds[i].getElementMapping().getForeignKey();\n-                    _bi_1ToM_JoinFK = fmds[i].getJoinForeignKey();\n-                }\n-                break;\n-            } \n-        }\n-    }\n-\n-    protected int getFieldIndexBi1ToMJT() {\n-        if (_bi1ToMJT == null) {\n-            getBiOneToManyInfo();\n-        }\n-        return _bi1ToMJT;\n-    }\n-    \n-    protected ForeignKey getBi1ToMElemFK() {\n-        if (_bi1ToMJT == null) {\n-            getBiOneToManyInfo();\n-        }\n-        return _bi_1ToM_ElemFK;\n-    }\n-    \n-    protected ForeignKey getBi1ToMJoinFK() {\n-        if (_bi1ToMJT == null) {\n-            getBiOneToManyInfo();\n-        }\n-        return _bi_1ToM_JoinFK;\n-    }\n }"},{"sha":"04244383e9867cd10a3b383654512b3dad0527ba","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerRelationMapTableFieldStrategy.java","status":"modified","additions":21,"deletions":23,"changes":44,"blob_url":"https://github.com/apache/openjpa/blob/c2a723816bddb0730c3f7c44e6d15fa1fd4189d1/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerRelationMapTableFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/c2a723816bddb0730c3f7c44e6d15fa1fd4189d1/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerRelationMapTableFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerRelationMapTableFieldStrategy.java?ref=c2a723816bddb0730c3f7c44e6d15fa1fd4189d1","patch":"@@ -86,7 +86,7 @@ public void selectValue(Select sel, ClassMapping val,\n         union.select(new Union.Selector() {\n             public void select(Select sel, int idx) {\n                 sel.select(_kcols);\n-                if (isUni1ToMFK()) {\n+                if (field.isUni1ToMFK()) {\n                     sel.whereForeignKey(field.getElementMapping().getForeignKey(),\n                         sm.getObjectId(), field.getElementMapping().getDeclaredTypeMapping(), store);\n                     sel.select(vals[idx], field.getElementMapping().\n@@ -145,12 +145,10 @@ public void map(boolean adapt) {\n             throw new MetaDataException(_loc.get(\"not-relation\", val));\n         \n         FieldMapping mapped = field.getMappedByMapping();\n-        if ((isUni1ToMFK() && !isBi1ToMJT()) || \n-            (!isUni1ToMFK() && !isBi1ToMJT() && mapped != null)) { \n+        if (field.isUni1ToMFK() || (!field.isBiMTo1JT() && mapped != null)) { \n             // map to the owner table\n             handleMappedByForeignKey(adapt);\n-        } else if ((!isUni1ToMFK() && isBi1ToMJT()) || \n-            (!isUni1ToMFK() && !isBi1ToMJT() && mapped == null)) { \n+        } else if (field.isBiMTo1JT() || mapped == null) { \n             // map to a separate table\n             field.mapJoin(adapt, true);\n             if (val.getTypeMapping().isMapped()) {\n@@ -187,11 +185,11 @@ private void insert(OpenJPAStateManager sm, JDBCStore store, RowManager rm,\n         if (map == null || map.isEmpty())\n             return;\n         \n-        if (!isBi1ToMJT() && field.getMappedBy() != null)\n+        if (!field.isBiMTo1JT() && field.getMappedBy() != null)\n             return;\n \n         Row row = null;\n-        if (!isUni1ToMFK()) {\n+        if (!field.isUni1ToMFK()) {\n             row = rm.getSecondaryRow(field.getTable(), Row.ACTION_INSERT);\n             row.setForeignKey(field.getJoinForeignKey(), field.getJoinColumnIO(),\n                 sm);\n@@ -205,7 +203,7 @@ private void insert(OpenJPAStateManager sm, JDBCStore store, RowManager rm,\n             entry = (Map.Entry) itr.next();\n             valsm = RelationStrategies.getStateManager(entry.getValue(),\n                 ctx);\n-            if (isUni1ToMFK()){\n+            if (field.isUni1ToMFK()){\n                 row = rm.getRow(field.getElementMapping().getDeclaredTypeMapping().getTable(),\n                     Row.ACTION_UPDATE, valsm, true);\n                 row.wherePrimaryKey(valsm);\n@@ -224,7 +222,7 @@ private void insert(OpenJPAStateManager sm, JDBCStore store, RowManager rm,\n             // from the view point of the owned side\n             PersistenceCapable obj = sm.getPersistenceCapable();\n             if (!populateKey(row, valsm, obj, ctx, rm, store)) {\n-                if (!isUni1ToMFK())\n+                if (!field.isUni1ToMFK())\n                     rm.flushSecondaryRow(row);\n             }\n         }\n@@ -239,7 +237,7 @@ public void setKey(Object keyObj, JDBCStore store, Row row)\n \n     public void update(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\n         throws SQLException {\n-        if (field.getMappedBy() != null && !isBi1ToMJT())\n+        if (field.getMappedBy() != null && !field.isBiMTo1JT())\n             return;\n \n         Map map = (Map) sm.fetchObject(field.getIndex());\n@@ -270,7 +268,7 @@ public void update(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\n         Object mkey;\n         if (canChange && !change.isEmpty()) {\n             Row changeRow = null;\n-            if (!isUni1ToMFK()) {\n+            if (!field.isUni1ToMFK()) {\n                 changeRow = rm.getSecondaryRow(field.getTable(),\n                     Row.ACTION_UPDATE);\n                 changeRow.whereForeignKey(field.getJoinForeignKey(), sm);\n@@ -279,7 +277,7 @@ public void update(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\n             for (Iterator itr = change.iterator(); itr.hasNext();) {\n                 mkey = itr.next();\n                 valsm = RelationStrategies.getStateManager(map.get(mkey), ctx);\n-                if (isUni1ToMFK()){\n+                if (field.isUni1ToMFK()){\n                     changeRow = rm.getRow(field.getElementMapping().getDeclaredTypeMapping().getTable(),\n                         Row.ACTION_UPDATE, valsm, true);\n                     changeRow.wherePrimaryKey(valsm);\n@@ -289,7 +287,7 @@ public void update(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\n                 }\n                 \n                 HandlerStrategies.where(key, mkey, store, changeRow, _kcols);\n-                if (!isUni1ToMFK())\n+                if (!field.isUni1ToMFK())\n                     rm.flushSecondaryRow(changeRow);\n             }\n         }\n@@ -298,14 +296,14 @@ public void update(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\n         Collection rem = ct.getRemoved();\n         if (!rem.isEmpty() || (!canChange && !change.isEmpty())) {\n             Row delRow = null;\n-            if (!isUni1ToMFK()) {\n+            if (!field.isUni1ToMFK()) {\n                 delRow = rm.getSecondaryRow(field.getTable(),\n                     Row.ACTION_DELETE);\n                 delRow.whereForeignKey(field.getJoinForeignKey(), sm);\n             }\n             for (Iterator itr = rem.iterator(); itr.hasNext();) {\n                 mkey = itr.next();\n-                if (isUni1ToMFK()){\n+                if (field.isUni1ToMFK()){\n                     updateSetNull(sm, mkey, store, rm);\n                 } else {\n                     HandlerStrategies.where(key, mkey, store, delRow, _kcols);\n@@ -315,7 +313,7 @@ public void update(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\n             if (!canChange && !change.isEmpty()) {\n                 for (Iterator itr = change.iterator(); itr.hasNext();) {\n                     mkey = itr.next();\n-                    if (isUni1ToMFK()){\n+                    if (field.isUni1ToMFK()){\n                         updateSetNull(sm, mkey, store, rm);\n                     } else { \n                         HandlerStrategies.where(key, itr.next(), store, delRow,  _kcols);\n@@ -329,7 +327,7 @@ public void update(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\n         Collection add = ct.getAdded();\n         if (!add.isEmpty() || (!canChange && !change.isEmpty())) {\n             Row addRow = null;\n-            if (!isUni1ToMFK()) {\n+            if (!field.isUni1ToMFK()) {\n                 addRow = rm.getSecondaryRow(field.getTable(),\n                         Row.ACTION_INSERT);\n                 addRow.setForeignKey(field.getJoinForeignKey(),\n@@ -338,7 +336,7 @@ public void update(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\n             for (Iterator itr = add.iterator(); itr.hasNext();) {\n                 mkey = itr.next();\n                 valsm = RelationStrategies.getStateManager(map.get(mkey), ctx);\n-                if (isUni1ToMFK()){\n+                if (field.isUni1ToMFK()){\n                     addRow = rm.getRow(field.getElementMapping().getDeclaredTypeMapping().getTable(),\n                         Row.ACTION_UPDATE, valsm, true);\n                     addRow.wherePrimaryKey(valsm);\n@@ -349,14 +347,14 @@ public void update(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\n                 \n                 HandlerStrategies.set(key, mkey, store, addRow, _kcols,\n                     _kio, true);\n-                if (!isUni1ToMFK())\n+                if (!field.isUni1ToMFK())\n                     rm.flushSecondaryRow(addRow);\n             }\n             if (!canChange && !change.isEmpty()) {\n                 for (Iterator itr = change.iterator(); itr.hasNext();) {\n                     mkey = itr.next();\n                     valsm = RelationStrategies.getStateManager(map.get(mkey), ctx);\n-                    if (isUni1ToMFK()){\n+                    if (field.isUni1ToMFK()){\n                         addRow = rm.getRow(field.getElementMapping().getDeclaredTypeMapping().getTable(),\n                             Row.ACTION_UPDATE, valsm, true);\n                         addRow.wherePrimaryKey(valsm);\n@@ -367,7 +365,7 @@ public void update(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\n                     \n                     HandlerStrategies.set(key, mkey, store, addRow, _kcols,\n                         _kio, true);\n-                    if (!isUni1ToMFK())\n+                    if (!field.isUni1ToMFK())\n                         rm.flushSecondaryRow(addRow);\n                 }\n             }\n@@ -414,9 +412,9 @@ public Object toKeyDataStoreValue(Object val, JDBCStore store) {\n     \n     public void delete(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\n         throws SQLException {\n-        if ((field.getMappedBy() != null && !isBi1ToMJT()))\n+        if ((field.getMappedBy() != null && !field.isBiMTo1JT()))\n             return;\n-        if (isUni1ToMFK()) {\n+        if (field.isUni1ToMFK()) {\n             Map mapObj = (Map)sm.fetchObject(field.getIndex());\n             updateSetNull(sm, store, rm, mapObj.keySet());\n             return;"},{"sha":"71c0ff208e728a2046a1defa17d25ffaeb99420c","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MapTableFieldStrategy.java","status":"modified","additions":4,"deletions":6,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/c2a723816bddb0730c3f7c44e6d15fa1fd4189d1/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MapTableFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/c2a723816bddb0730c3f7c44e6d15fa1fd4189d1/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MapTableFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MapTableFieldStrategy.java?ref=c2a723816bddb0730c3f7c44e6d15fa1fd4189d1","patch":"@@ -22,7 +22,6 @@\n import java.util.Collection;\n import java.util.Map;\n \n-import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.enhance.PersistenceCapable;\n import org.apache.openjpa.enhance.ReflectingPersistenceCapable;\n import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n@@ -44,7 +43,6 @@\n import org.apache.openjpa.kernel.StoreContext;\n import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.lib.util.Localizer;\n-import org.apache.openjpa.meta.FieldMetaData;\n import org.apache.openjpa.meta.JavaTypes;\n import org.apache.openjpa.util.MetaDataException;\n \n@@ -113,10 +111,10 @@ public void map(boolean adapt) {\n             throw new MetaDataException(_loc.get(\"mapped-by-key\", field));\n \n         // Non-default mapping Uni-/OneToMany/ForeignKey allows schema components\n-        if (isNonDefaultMappingAllowed() && \n-            field.getAssociationType() == FieldMetaData.ONE_TO_MANY && \n-            field.getMappedByMapping() == null)  \n-                return;\n+        if (field.isUni1ToMFK())  \n+            return;\n+        if (field.isBiMTo1JT())\n+            field.setBi1MJoinTableInfo();\n         field.getValueInfo().assertNoSchemaComponents(field, !adapt);\n     }\n     "},{"sha":"25903cb33ceb01c3a50e20a149b4d76861d82083","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","status":"modified","additions":23,"deletions":24,"changes":47,"blob_url":"https://github.com/apache/openjpa/blob/c2a723816bddb0730c3f7c44e6d15fa1fd4189d1/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/c2a723816bddb0730c3f7c44e6d15fa1fd4189d1/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java?ref=c2a723816bddb0730c3f7c44e6d15fa1fd4189d1","patch":"@@ -26,15 +26,13 @@\n import java.util.Map;\n import java.util.Set;\n \n-import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.enhance.PersistenceCapable;\n import org.apache.openjpa.enhance.ReflectingPersistenceCapable;\n import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.meta.Embeddable;\n import org.apache.openjpa.jdbc.meta.FieldMapping;\n-import org.apache.openjpa.jdbc.meta.FieldMappingInfo;\n import org.apache.openjpa.jdbc.meta.FieldStrategy;\n import org.apache.openjpa.jdbc.meta.Joinable;\n import org.apache.openjpa.jdbc.meta.MappingInfo;\n@@ -90,8 +88,9 @@ public void map(boolean adapt) {\n \n         field.getKeyMapping().getValueInfo().assertNoSchemaComponents\n             (field.getKey(), !adapt);\n-        field.getElementMapping().getValueInfo().assertNoSchemaComponents\n-            (field.getElement(), !adapt);\n+        if (!field.isBiMTo1JT())\n+            field.getElementMapping().getValueInfo().assertNoSchemaComponents\n+                (field.getElement(), !adapt);\n         boolean criteria = field.getValueInfo().getUseClassCriteria();\n \n         // check for named inverse\n@@ -135,9 +134,7 @@ public void map(boolean adapt) {\n \n             field.setUseClassCriteria(criteria);\n             return;\n-        } else { // this could be the owner in a bi-directional relation\n-            getBiOneToManyInfo();\n-        }\n+        } \n \n         // this is necessary to support openjpa 3 mappings, which didn't\n         // differentiate between secondary table joins and relations built\n@@ -155,13 +152,14 @@ public void map(boolean adapt) {\n             field.getMappingInfo().setTableName(null);\n             field.getMappingInfo().setColumns(null);\n         }\n-\n-        field.mapJoin(adapt, false);\n+        \n+        if (!field.isBiMTo1JT())\n+            field.mapJoin(adapt, false);\n         if (field.getTypeMapping().isMapped()) {\n             if (field.getMappedByIdValue() != null) \n                 setMappedByIdColumns();            \n              \n-            if (getFieldIndexBi1ToMJT() == -1) {\n+            if (!field.isBiMTo1JT()) {\n                 ForeignKey fk = vinfo.getTypeJoin(field, field.getName(), true,\n                     adapt);\n                 field.setForeignKey(fk);\n@@ -272,7 +270,7 @@ public void insert(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\n             updateInverse(sm, rel, store, rm);\n         else {\n             Row row = field.getRow(sm, store, rm, Row.ACTION_INSERT);\n-            if (row != null && getFieldIndexBi1ToMJT() == -1) {\n+            if (row != null && !field.isBiMTo1JT()) {\n                 field.setForeignKey(row, rel);\n                 // this is for bi-directional maps, the key and value of the \n                 // map are stored in the table of the mapped-by entity  \n@@ -364,21 +362,22 @@ public void update(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\n                     field.isBidirectionalJoinTableMappingNonOwner()) ?\n                     Row.ACTION_DELETE : Row.ACTION_UPDATE;\n             Row row = field.getRow(sm, store, rm, action);\n-            if (row != null && getFieldIndexBi1ToMJT() == -1) {\n+            if (row != null && !field.isBiMTo1JT()) {\n                 field.setForeignKey(row, rel);\n                 // this is for bi-directional maps, the key and value of the \n                 // map are stored in the table of the mapped-by entity  \n                 setMapKey(sm, rel, store, row);\n             }\n             \n-            if (getFieldIndexBi1ToMJT() != -1) { // also need to update the join table\n-                PersistenceCapable invPC = (PersistenceCapable)sm.fetchObject(getFieldIndexBi1ToMJT());\n+            if (field.isBiMTo1JT()) { // also need to update the join table\n+                PersistenceCapable invPC = (PersistenceCapable)sm.fetchObject(\n+                    field.getBi_1ToM_JTField().getIndex());\n                 Row secondaryRow = null;\n                 if (invPC != null) {\n-                    secondaryRow = rm.getSecondaryRow(getBi1ToMJoinFK().getTable(),\n+                    secondaryRow = rm.getSecondaryRow(field.getBi1ToMJoinFK().getTable(),\n                         Row.ACTION_INSERT);\n-                    secondaryRow.setForeignKey(getBi1ToMElemFK(), null, sm);\n-                    secondaryRow.setForeignKey(getBi1ToMJoinFK(), null, \n+                    secondaryRow.setForeignKey(field.getBi1ToMElemFK(), null, sm);\n+                    secondaryRow.setForeignKey(field.getBi1ToMJoinFK(), null, \n                         RelationStrategies.getStateManager(invPC,\n                         store.getContext()));\n                     rm.flushSecondaryRow(secondaryRow);\n@@ -556,7 +555,7 @@ public void select(Select sel, int idx) {\n      */\n     private void selectEagerParallel(Select sel, ClassMapping cls,\n         JDBCStore store, JDBCFetchConfiguration fetch, int eagerMode) {\n-        if (getFieldIndexBi1ToMJT() != -1)\n+        if (field.isBiMTo1JT())\n             return;\n         sel.selectPrimaryKey(field.getDefiningMapping());\n         // set a variable name that does not conflict with any in the query;\n@@ -571,7 +570,7 @@ private void selectEagerParallel(Select sel, ClassMapping cls,\n \n     public void selectEagerJoin(Select sel, OpenJPAStateManager sm,\n         JDBCStore store, JDBCFetchConfiguration fetch, int eagerMode) {\n-        if (getFieldIndexBi1ToMJT() != -1) \n+        if (field.isBiMTo1JT()) \n             return;\n \n         // limit the eager mode to single on recursive eager fetching b/c\n@@ -676,7 +675,7 @@ private Map processEagerParallelResult(OpenJPAStateManager sm,\n     public void loadEagerJoin(OpenJPAStateManager sm, JDBCStore store,\n         JDBCFetchConfiguration fetch, Result res)\n         throws SQLException {\n-        if (getFieldIndexBi1ToMJT() != -1)\n+        if (field.isBiMTo1JT())\n             return;\n         ClassMapping cls = field.getIndependentTypeMappings()[0];\n \n@@ -725,7 +724,7 @@ public void load(OpenJPAStateManager sm, JDBCStore store,\n         // get the related object's oid\n         ClassMapping relMapping = field.getTypeMapping();\n         Object oid = null;\n-        if (relMapping.isMapped() && getFieldIndexBi1ToMJT() == -1) { \n+        if (relMapping.isMapped() && !field.isBiMTo1JT()) { \n             oid = relMapping.getObjectId(store, res, field.getForeignKey(),\n                     field.getPolymorphic() != ValueMapping.POLY_FALSE, null);\n         } else {\n@@ -791,16 +790,16 @@ public void select(Select sel, int idx) {\n                     sel.whereForeignKey(field.getForeignKey(rels[idx]),\n                         sm.getObjectId(), field.getDefiningMapping(), store);\n                 else {\n-                    if (getFieldIndexBi1ToMJT() == -1) {\n+                    if (!field.isBiMTo1JT()) {\n                         resJoins[idx] = sel.newJoins().joinRelation(field.getName(),\n                             field.getForeignKey(rels[idx]), rels[idx],\n                             field.getSelectSubclasses(), false, false);\n                         field.wherePrimaryKey(sel, sm, store);\n                     } else {\n                         resJoins[idx] = sel.newJoins().joinRelation(null,\n-                            getBi1ToMJoinFK(), rels[idx],\n+                            field.getBi1ToMJoinFK(), rels[idx],\n                             field.getSelectSubclasses(), false, false);\n-                        sel.whereForeignKey(getBi1ToMElemFK(), sm.getObjectId(), \n+                        sel.whereForeignKey(field.getBi1ToMElemFK(), sm.getObjectId(), \n                             field.getDefiningMapping(), store);\n                     }\n                 }"},{"sha":"4573eda6852f1ae890eed03c6447542ab705e653","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationRelationMapTableFieldStrategy.java","status":"modified","additions":18,"deletions":20,"changes":38,"blob_url":"https://github.com/apache/openjpa/blob/c2a723816bddb0730c3f7c44e6d15fa1fd4189d1/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationRelationMapTableFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/c2a723816bddb0730c3f7c44e6d15fa1fd4189d1/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationRelationMapTableFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationRelationMapTableFieldStrategy.java?ref=c2a723816bddb0730c3f7c44e6d15fa1fd4189d1","patch":"@@ -81,7 +81,7 @@ public void selectValue(Select sel, ClassMapping val,\n         kunion.select(new Union.Selector() {\n             public void select(Select sel, int idx) {\n                 ForeignKey joinFK = null;\n-                if (isUni1ToMFK()) {\n+                if (field.isUni1ToMFK()) {\n                     ValueMapping val = field.getElementMapping();\n                     ValueMappingInfo vinfo = val.getValueInfo();\n                     Table table = vinfo.getTable(val);\n@@ -116,7 +116,7 @@ public void select(Select sel, int idx) {\n         vunion.setLRS(lrs);\n         vunion.select(new Union.Selector() {\n             public void select(Select sel, int idx) {\n-                if (isUni1ToMFK()) {\n+                if (field.isUni1ToMFK()) {\n                     sel.orderBy(field.getKeyMapping().getColumns(), true, true);\n                     sel.select(vals[idx], field.getElementMapping().\n                         getSelectSubclasses(), store, fetch, eagerMode, null);\n@@ -202,12 +202,10 @@ public void map(boolean adapt) {\n         FieldMapping mapped = field.getMappedByMapping();\n         DBDictionary dict = field.getMappingRepository().getDBDictionary();\n         String keyName = null;\n-        if ((isUni1ToMFK() && !isBi1ToMJT()) || \n-            (!isUni1ToMFK() && !isBi1ToMJT() && mapped != null)) { \n+        if (field.isUni1ToMFK() || (!field.isBiMTo1JT() && mapped != null)) { \n             handleMappedByForeignKey(adapt);\n             keyName = dict.getValidColumnName(\"vkey\", field.getTable());\n-         } else if ((!isUni1ToMFK() && isBi1ToMJT()) || \n-            (!isUni1ToMFK() && !isBi1ToMJT() && mapped == null)) { \n+        } else if (field.isBiMTo1JT() || mapped == null) { \n             field.mapJoin(adapt, true);\n             mapTypeJoin(val, \"value\", adapt);\n             keyName = dict.getValidColumnName(\"key\", field.getTable());\n@@ -246,11 +244,11 @@ private void insert(OpenJPAStateManager sm, RowManager rm, Map map,\n         if (map == null || map.isEmpty())\n             return;\n         \n-        if (!isBi1ToMJT() && field.getMappedBy() != null)\n+        if (!field.isBiMTo1JT() && field.getMappedBy() != null)\n             return;\n \n         Row row = null;\n-        if (!isUni1ToMFK()) {\n+        if (!field.isUni1ToMFK()) {\n             row = rm.getSecondaryRow(field.getTable(), Row.ACTION_INSERT);\n             row.setForeignKey(field.getJoinForeignKey(), field.getJoinColumnIO(),\n                 sm);\n@@ -264,7 +262,7 @@ private void insert(OpenJPAStateManager sm, RowManager rm, Map map,\n             entry = (Map.Entry) itr.next();\n             keysm = RelationStrategies.getStateManager(entry.getKey(), ctx);\n             valsm = RelationStrategies.getStateManager(entry.getValue(), ctx);\n-            if (isUni1ToMFK()){\n+            if (field.isUni1ToMFK()){\n                 row = rm.getRow(field.getElementMapping().getDeclaredTypeMapping().getTable(),\n                     Row.ACTION_UPDATE, valsm, true);\n                 row.wherePrimaryKey(valsm);\n@@ -282,14 +280,14 @@ private void insert(OpenJPAStateManager sm, RowManager rm, Map map,\n             // from the view point of the owned side\n             PersistenceCapable obj = sm.getPersistenceCapable();\n             if (!populateKey(row, valsm, obj, ctx, rm, store))\n-                if (!isUni1ToMFK())\n+                if (!field.isUni1ToMFK())\n                     rm.flushSecondaryRow(row);\n         }\n     }\n \n     public void update(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\n         throws SQLException {\n-        if (field.getMappedBy() != null && !isBi1ToMJT())\n+        if (field.getMappedBy() != null && !field.isBiMTo1JT())\n             return;\n         \n         Map map = (Map) sm.fetchObject(field.getIndex());\n@@ -320,7 +318,7 @@ public void update(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\n         Object mkey;\n         if (canChange && !change.isEmpty()) {\n             Row changeRow = null;\n-            if (!isUni1ToMFK()) {\n+            if (!field.isUni1ToMFK()) {\n                 rm.getSecondaryRow(field.getTable(),\n                     Row.ACTION_UPDATE);\n                 changeRow.whereForeignKey(field.getJoinForeignKey(), sm);\n@@ -340,7 +338,7 @@ public void update(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\n                 keysm = RelationStrategies.getStateManager(mkey, ctx);\n                 valsm = RelationStrategies.getStateManager(mval, ctx);\n                 key.whereForeignKey(changeRow, keysm);\n-                if (isUni1ToMFK()){\n+                if (field.isUni1ToMFK()){\n                     changeRow = rm.getRow(field.getElementMapping().getDeclaredTypeMapping().getTable(),\n                         Row.ACTION_UPDATE, valsm, true);\n                     changeRow.wherePrimaryKey(valsm);\n@@ -356,15 +354,15 @@ public void update(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\n         Collection rem = ct.getRemoved();\n         if (!rem.isEmpty() || (!canChange && !change.isEmpty())) {\n             Row delRow = null;\n-            if (!isUni1ToMFK()) {\n+            if (!field.isUni1ToMFK()) {\n                 delRow = rm.getSecondaryRow(field.getTable(),\n                     Row.ACTION_DELETE);\n                 delRow.whereForeignKey(field.getJoinForeignKey(), sm);\n             }\n \n             for (Iterator itr = rem.iterator(); itr.hasNext();) {\n                 Object pc = itr.next();\n-                if (isUni1ToMFK()){\n+                if (field.isUni1ToMFK()){\n                     updateSetNull(sm, rm, pc);\n                 } else {\n                     keysm = RelationStrategies.getStateManager(pc, ctx);\n@@ -375,7 +373,7 @@ public void update(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\n             if (!canChange && !change.isEmpty()) {\n                 for (Iterator itr = change.iterator(); itr.hasNext();) {\n                     Object pc = itr.next();\n-                    if (isUni1ToMFK()){\n+                    if (field.isUni1ToMFK()){\n                         updateSetNull(sm, rm, pc);\n                     } else { \n                         keysm = RelationStrategies.getStateManager(pc, ctx);\n@@ -390,7 +388,7 @@ public void update(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\n         Collection add = ct.getAdded();\n         if (!add.isEmpty() || (!canChange && !change.isEmpty())) {\n             Row addRow = null;\n-            if (!isUni1ToMFK()) {\n+            if (!field.isUni1ToMFK()) {\n                 addRow = rm.getSecondaryRow(field.getTable(),\n                     Row.ACTION_INSERT);\n                 addRow.setForeignKey(field.getJoinForeignKey(),\n@@ -410,7 +408,7 @@ public void update(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\n                     continue;\n                 keysm = RelationStrategies.getStateManager(mkey, ctx);\n                 valsm = RelationStrategies.getStateManager(mval, ctx);\n-                if (isUni1ToMFK()){\n+                if (field.isUni1ToMFK()){\n                     addRow = rm.getRow(field.getElementMapping().getDeclaredTypeMapping().getTable(),\n                         Row.ACTION_UPDATE, valsm, true);\n                     addRow.wherePrimaryKey(valsm);\n@@ -437,7 +435,7 @@ public void update(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\n                         continue;\n                     keysm = RelationStrategies.getStateManager(mkey, ctx);\n                     valsm = RelationStrategies.getStateManager(mval, ctx);\n-                    if (isUni1ToMFK()){\n+                    if (field.isUni1ToMFK()){\n                         addRow = rm.getRow(field.getElementMapping().getDeclaredTypeMapping().getTable(),\n                             Row.ACTION_UPDATE, valsm, true);\n                         addRow.wherePrimaryKey(valsm);\n@@ -504,7 +502,7 @@ public Object toKeyDataStoreValue(Object val, JDBCStore store) {\n     \n     public void delete(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\n         throws SQLException {\n-        if (isUni1ToMFK()) {\n+        if (field.isUni1ToMFK()) {\n             Map mapObj = (Map)sm.fetchObject(field.getIndex());\n             updateSetNull(sm, store, rm, mapObj.keySet());\n             return;"},{"sha":"55514b0ce4ada874f90419321d4a00c0632d47fd","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationToManyTableFieldStrategy.java","status":"modified","additions":7,"deletions":14,"changes":21,"blob_url":"https://github.com/apache/openjpa/blob/c2a723816bddb0730c3f7c44e6d15fa1fd4189d1/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationToManyTableFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/c2a723816bddb0730c3f7c44e6d15fa1fd4189d1/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationToManyTableFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationToManyTableFieldStrategy.java?ref=c2a723816bddb0730c3f7c44e6d15fa1fd4189d1","patch":"@@ -40,7 +40,6 @@\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n import org.apache.openjpa.kernel.StoreContext;\n import org.apache.openjpa.lib.util.Localizer;\n-import org.apache.openjpa.meta.FieldMetaData;\n import org.apache.openjpa.meta.JavaTypes;\n import org.apache.openjpa.util.ChangeTracker;\n import org.apache.openjpa.util.MetaDataException;\n@@ -55,8 +54,6 @@\n public abstract class RelationToManyTableFieldStrategy\n     extends StoreCollectionFieldStrategy {\n \n-    boolean _isBiOneToManyJoinTable = false;\n-\n     private static final Localizer _loc = Localizer.forPackage\n         (RelationToManyTableFieldStrategy.class);\n \n@@ -113,16 +110,10 @@ public void map(boolean adapt) {\n         OpenJPAConfiguration conf = field.getRepository().getConfiguration();\n         boolean isNonDefaultMappingAllowed = field.getRepository().\n             getMetaDataFactory().getDefaults().isNonDefaultMappingAllowed(conf);\n-        // Bi-directional oneToMany relation with\n-        // @JoinTable annotation ==> join table strategy\n+        // Bi-directional oneToMany relation with join table strategy\n         // ==> should not mapped in the owner's table\n         if (mapped != null) {\n-            _isBiOneToManyJoinTable = \n-                field.getAssociationType() == FieldMetaData.ONE_TO_MANY &&\n-                field.getMappingInfo().getTableName() != null ? true : false;\n-        \n-            if (!isNonDefaultMappingAllowed || !_isBiOneToManyJoinTable) {\n-                // JPA 2.0: Bi-/OneToMany/@JoinTable ==> join table strategy is allowed\n+            if (!field.isBiMTo1JT()) {\n                 if (mapped.getElement().getTypeCode() != JavaTypes.PC) {\n                     throw new MetaDataException(_loc.get(\"not-inv-relation-coll\",\n                             field, mapped));\n@@ -143,7 +134,9 @@ public void map(boolean adapt) {\n             }\n         }\n \n-        if (mapped == null || (_isBiOneToManyJoinTable && isNonDefaultMappingAllowed)) {\n+        if (mapped == null || field.isBiMTo1JT()) {\n+            if (field.isBiMTo1JT())\n+                field.setBi1MJoinTableInfo();\n             field.mapJoin(adapt, true);\n             if (elem.getTypeMapping().isMapped()) {\n                 ForeignKey fk = vinfo.getTypeJoin(elem, \"element\", false, adapt);\n@@ -164,7 +157,7 @@ public void map(boolean adapt) {\n \n     public void insert(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\n         throws SQLException {\n-        if (field.getMappedBy() == null || _isBiOneToManyJoinTable) \n+        if (field.getMappedBy() == null || field.isBiMTo1JT()) \n             insert(sm, rm, sm.fetchObject(field.getIndex()));\n     }\n \n@@ -195,7 +188,7 @@ private void insert(OpenJPAStateManager sm, RowManager rm, Object vals)\n \n     public void update(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\n         throws SQLException {\n-        if (field.getMappedBy() != null && !_isBiOneToManyJoinTable)\n+        if (field.getMappedBy() != null && !field.isBiMTo1JT())\n             return;\n \n         Object obj = sm.fetchObject(field.getIndex());"},{"sha":"63056ec7c6663169e736eaf7d90a2f27d57c03ba","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java","status":"modified","additions":3,"deletions":10,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/c2a723816bddb0730c3f7c44e6d15fa1fd4189d1/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java","raw_url":"https://github.com/apache/openjpa/raw/c2a723816bddb0730c3f7c44e6d15fa1fd4189d1/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java?ref=c2a723816bddb0730c3f7c44e6d15fa1fd4189d1","patch":"@@ -1651,16 +1651,9 @@ private String trackSecondaryTable(FieldMapping fm, String secondary,\n     private void parseJoinTable(FieldMapping fm, JoinTable join) {\n     \tFieldMappingInfo info = fm.getMappingInfo();\n         info.setTableName(toTableName(join.schema(), join.name()));\n-        if (fm.getAssociationType() == FieldMetaData.ONE_TO_MANY && \n-            fm.getMappedBy() != null) { //Bi-/One-To-Many/JoinTable+JoinColumn\n-            parseJoinColumns(fm, info, false, join.inverseJoinColumns());\n-            parseJoinColumns(fm, fm.getElementMapping().getValueInfo(), false,\n-                join.joinColumns());\n-        } else {\n-            parseJoinColumns(fm, info, false, join.joinColumns());\n-            parseJoinColumns(fm, fm.getElementMapping().getValueInfo(), false,\n-                join.inverseJoinColumns());\n-        }\n+        parseJoinColumns(fm, info, false, join.joinColumns());\n+        parseJoinColumns(fm, fm.getElementMapping().getValueInfo(), false,\n+            join.inverseJoinColumns());\n         addUniqueConstraints(info.getTableName(), fm, info,  \n             join.uniqueConstraints());\n     }"},{"sha":"770596bec0359fd2a56b8d8957e6609b411d72e1","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/Bi_1ToM_FK.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/c2a723816bddb0730c3f7c44e6d15fa1fd4189d1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/Bi_1ToM_FK.java","raw_url":"https://github.com/apache/openjpa/raw/c2a723816bddb0730c3f7c44e6d15fa1fd4189d1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/Bi_1ToM_FK.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/Bi_1ToM_FK.java?ref=c2a723816bddb0730c3f7c44e6d15fa1fd4189d1","patch":"@@ -40,7 +40,6 @@\n     private String name;\n \n     @OneToMany(mappedBy=\"bi1mfk\", fetch=FetchType.EAGER)\n-    //@JoinColumn(name=\"Bi1MFK_ColC\") // should comment out\n     private List<EntityC_B1MFK> entityCs = null;\n     \n     public long getId() { "},{"sha":"ebee8f9d29ea983f8260452def9e0ccb72e5c18d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/Bi_1ToM_JT.java","status":"modified","additions":0,"deletions":7,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/c2a723816bddb0730c3f7c44e6d15fa1fd4189d1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/Bi_1ToM_JT.java","raw_url":"https://github.com/apache/openjpa/raw/c2a723816bddb0730c3f7c44e6d15fa1fd4189d1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/Bi_1ToM_JT.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/Bi_1ToM_JT.java?ref=c2a723816bddb0730c3f7c44e6d15fa1fd4189d1","patch":"@@ -34,13 +34,6 @@\n     private String name;\n \n     @OneToMany(mappedBy=\"bi1mjt\", fetch=FetchType.EAGER)\n-    @JoinTable(\n-        name=\"Bi1MJT_C\",\n-        joinColumns=\n-          @JoinColumn(name=\"C_ID\", referencedColumnName=\"CID\"),\n-          inverseJoinColumns=\n-          @JoinColumn(name=\"Bi1MJT_ID\", referencedColumnName=\"BID\")\n-    )\n     private List<EntityC_B1MJT> entityCs = null;\n     \n     public long getId() { "},{"sha":"919fe252d8925be78911bf55a22479e09256216a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/Bi_1ToM_Map_JT.java","status":"modified","additions":0,"deletions":7,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/c2a723816bddb0730c3f7c44e6d15fa1fd4189d1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/Bi_1ToM_Map_JT.java","raw_url":"https://github.com/apache/openjpa/raw/c2a723816bddb0730c3f7c44e6d15fa1fd4189d1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/Bi_1ToM_Map_JT.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/Bi_1ToM_Map_JT.java?ref=c2a723816bddb0730c3f7c44e6d15fa1fd4189d1","patch":"@@ -36,13 +36,6 @@\n     private String name;\n \n     @OneToMany(mappedBy=\"bi1mjt\", fetch=FetchType.EAGER)\n-    @JoinTable(\n-        name=\"Bi1M_Map_JT_C\",\n-        joinColumns=\n-          @JoinColumn(name=\"C_ID\", referencedColumnName=\"ID\"),\n-          inverseJoinColumns=\n-          @JoinColumn(name=\"B_ID\", referencedColumnName=\"ID\")\n-    )\n     private Map<String, EntityC_B1M_Map_JT> entityCs = null;\n     \n     public long getId() { "},{"sha":"aaa137ef2cd2adef53ea8f110d0c30ef6f6c9420","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/Bi_1ToM_Map_RelKey_JT.java","status":"modified","additions":0,"deletions":7,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/c2a723816bddb0730c3f7c44e6d15fa1fd4189d1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/Bi_1ToM_Map_RelKey_JT.java","raw_url":"https://github.com/apache/openjpa/raw/c2a723816bddb0730c3f7c44e6d15fa1fd4189d1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/Bi_1ToM_Map_RelKey_JT.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/Bi_1ToM_Map_RelKey_JT.java?ref=c2a723816bddb0730c3f7c44e6d15fa1fd4189d1","patch":"@@ -35,13 +35,6 @@\n     private String name;\n \n     @OneToMany(mappedBy=\"bi1mjt\", fetch=FetchType.EAGER)\n-    @JoinTable(\n-        name=\"Bi1M_Map_RelKey_JT_C\",\n-        joinColumns=\n-          @JoinColumn(name=\"C_ID\", referencedColumnName=\"ID\"),\n-          inverseJoinColumns=\n-          @JoinColumn(name=\"B_ID\", referencedColumnName=\"ID\")\n-    )\n     private Map<EntityC, EntityC_B1M_Map_RelKey_JT> entityCs = null;\n     \n     public long getId() { "},{"sha":"94f2cd035f2271bec6b369d3cc5f558e7dbdcc1a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/EntityC_B1MFK.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/c2a723816bddb0730c3f7c44e6d15fa1fd4189d1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/EntityC_B1MFK.java","raw_url":"https://github.com/apache/openjpa/raw/c2a723816bddb0730c3f7c44e6d15fa1fd4189d1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/EntityC_B1MFK.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/EntityC_B1MFK.java?ref=c2a723816bddb0730c3f7c44e6d15fa1fd4189d1","patch":"@@ -22,6 +22,7 @@\n import javax.persistence.*;\n \n @Entity\n+@Table(name=\"C_B1MFK\")\n public class EntityC_B1MFK {\n \n     @Id"},{"sha":"0bc16fa701e32f8e4a29975c541ec055d1d7c66e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/EntityC_B1MJT.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/c2a723816bddb0730c3f7c44e6d15fa1fd4189d1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/EntityC_B1MJT.java","raw_url":"https://github.com/apache/openjpa/raw/c2a723816bddb0730c3f7c44e6d15fa1fd4189d1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/EntityC_B1MJT.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/EntityC_B1MJT.java?ref=c2a723816bddb0730c3f7c44e6d15fa1fd4189d1","patch":"@@ -30,6 +30,13 @@\n     private String name;\n     \n     @ManyToOne\n+    @JoinTable(\n+            name=\"Bi1MJT_C\",\n+            joinColumns=\n+              @JoinColumn(name=\"C_ID\", referencedColumnName=\"CID\"),\n+              inverseJoinColumns=\n+              @JoinColumn(name=\"Bi1MJT_ID\", referencedColumnName=\"BID\")\n+    )\n     Bi_1ToM_JT bi1mjt;\n \n     public long getId() { "},{"sha":"d578f9c30a04adbe676de3232e1d0389a2336b6c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/EntityC_B1M_Map_JT.java","status":"modified","additions":8,"deletions":1,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/c2a723816bddb0730c3f7c44e6d15fa1fd4189d1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/EntityC_B1M_Map_JT.java","raw_url":"https://github.com/apache/openjpa/raw/c2a723816bddb0730c3f7c44e6d15fa1fd4189d1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/EntityC_B1M_Map_JT.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/EntityC_B1M_Map_JT.java?ref=c2a723816bddb0730c3f7c44e6d15fa1fd4189d1","patch":"@@ -18,11 +18,11 @@\n  */\n package org.apache.openjpa.persistence.compat;\n \n-import java.util.List;\n \n import javax.persistence.*;\n \n @Entity\n+@Table(name=\"C_B1M_Map_JT\")\n public class EntityC_B1M_Map_JT {\n \n     @Id\n@@ -32,6 +32,13 @@\n     private String name;\n     \n     @ManyToOne\n+    @JoinTable(\n+        name=\"Bi1M_Map_JT_C\",\n+        joinColumns=\n+            @JoinColumn(name=\"C_ID\", referencedColumnName=\"ID\"),\n+        inverseJoinColumns=\n+            @JoinColumn(name=\"B_ID\", referencedColumnName=\"ID\")\n+    )\n     Bi_1ToM_Map_JT bi1mjt;\n \n     public long getId() { "},{"sha":"47e4dcfad95782762372eea77fa78df4ddd8e92c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/EntityC_B1M_Map_RelKey_JT.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/c2a723816bddb0730c3f7c44e6d15fa1fd4189d1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/EntityC_B1M_Map_RelKey_JT.java","raw_url":"https://github.com/apache/openjpa/raw/c2a723816bddb0730c3f7c44e6d15fa1fd4189d1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/EntityC_B1M_Map_RelKey_JT.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/EntityC_B1M_Map_RelKey_JT.java?ref=c2a723816bddb0730c3f7c44e6d15fa1fd4189d1","patch":"@@ -21,6 +21,7 @@\n import javax.persistence.*;\n \n @Entity\n+@Table(name=\"C_B1M_Map_RelKey_JT\")\n public class EntityC_B1M_Map_RelKey_JT {\n \n     @Id\n@@ -30,6 +31,13 @@\n     private String name;\n     \n     @ManyToOne\n+    @JoinTable(\n+        name=\"Bi1M_Map_RelKey_JT_C\",\n+        joinColumns=\n+            @JoinColumn(name=\"C_ID\", referencedColumnName=\"ID\"),\n+        inverseJoinColumns=\n+            @JoinColumn(name=\"B_ID\", referencedColumnName=\"ID\")\n+    )\n     Bi_1ToM_Map_RelKey_JT bi1mjt;\n \n     public long getId() { "},{"sha":"4bb52611b39aa8464c5737cc9127a320bb78f600","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/EntityC_U1MFK.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/c2a723816bddb0730c3f7c44e6d15fa1fd4189d1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/EntityC_U1MFK.java","raw_url":"https://github.com/apache/openjpa/raw/c2a723816bddb0730c3f7c44e6d15fa1fd4189d1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/EntityC_U1MFK.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/EntityC_U1MFK.java?ref=c2a723816bddb0730c3f7c44e6d15fa1fd4189d1","patch":"@@ -22,6 +22,7 @@\n import javax.persistence.*;\n \n @Entity\n+@Table(name=\"C_U1MFK\")\n public class EntityC_U1MFK {\n \n     @Id"},{"sha":"e7dad1dbbea8ca5c62c6ee9e9aaa916e01daa44a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/EntityC_U1M_Map_FK.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/c2a723816bddb0730c3f7c44e6d15fa1fd4189d1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/EntityC_U1M_Map_FK.java","raw_url":"https://github.com/apache/openjpa/raw/c2a723816bddb0730c3f7c44e6d15fa1fd4189d1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/EntityC_U1M_Map_FK.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/EntityC_U1M_Map_FK.java?ref=c2a723816bddb0730c3f7c44e6d15fa1fd4189d1","patch":"@@ -18,11 +18,11 @@\n  */\n package org.apache.openjpa.persistence.compat;\n \n-import java.util.List;\n \n import javax.persistence.*;\n \n @Entity\n+@Table(name=\"C_U1M_Map_FK\")\n public class EntityC_U1M_Map_FK {\n \n     @Id"},{"sha":"265c002aab06c2fede639fdcff184ab39ec9550e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/EntityC_U1M_Map_RelKey_FK.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/c2a723816bddb0730c3f7c44e6d15fa1fd4189d1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/EntityC_U1M_Map_RelKey_FK.java","raw_url":"https://github.com/apache/openjpa/raw/c2a723816bddb0730c3f7c44e6d15fa1fd4189d1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/EntityC_U1M_Map_RelKey_FK.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/EntityC_U1M_Map_RelKey_FK.java?ref=c2a723816bddb0730c3f7c44e6d15fa1fd4189d1","patch":"@@ -23,6 +23,7 @@\n import javax.persistence.*;\n \n @Entity\n+@Table(name=\"C_U1M_Map_RelKey_FK\")\n public class EntityC_U1M_Map_RelKey_FK {\n \n     @Id"},{"sha":"dcb03c4751e43a77c028ee17f579dccaa674adb5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/TestSpecCompatibilityOptions.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/c2a723816bddb0730c3f7c44e6d15fa1fd4189d1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/TestSpecCompatibilityOptions.java","raw_url":"https://github.com/apache/openjpa/raw/c2a723816bddb0730c3f7c44e6d15fa1fd4189d1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/TestSpecCompatibilityOptions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/TestSpecCompatibilityOptions.java?ref=c2a723816bddb0730c3f7c44e6d15fa1fd4189d1","patch":"@@ -180,10 +180,10 @@ public void testOneToManyRelation() {\n             em.getTransaction().begin();\n             em.getTransaction().commit();\n             assertSQLFragnments(sql, \"CREATE TABLE Bi1MJT_C\", \"C_ID\", \"Bi1MJT_ID\");\n-            assertSQLFragnments(sql, \"CREATE TABLE EntityC_B1MFK\", \"BI1MFK_ID\");\n+            assertSQLFragnments(sql, \"CREATE TABLE C_B1MFK\", \"BI1MFK_ID\");\n             assertSQLFragnments(sql, \"CREATE TABLE Uni1MJT_C\", \"Uni1MJT_ID\", \"C_ID\");\n-            assertSQLFragnments(sql, \"CREATE TABLE EntityC_B1MFK\", \"BI1MFK_ID\");\n-            assertSQLFragnments(sql, \"CREATE TABLE EntityC_U1MFK\", \"Uni1MFK_ID\");\n+            assertSQLFragnments(sql, \"CREATE TABLE C_B1MFK\", \"BI1MFK_ID\");\n+            assertSQLFragnments(sql, \"CREATE TABLE C_U1MFK\", \"Uni1MFK_ID\");\n             crudUni1MFK(em);\n             crudUni1MJT(em);\n             crudBi1MFK(em);\n@@ -409,9 +409,9 @@ public void testOneToManyMapRelation() {\n             // trigger table creation\n             em.getTransaction().begin();\n             em.getTransaction().commit();\n-            assertSQLFragnments(sql, \"CREATE TABLE EntityC_U1M_Map_FK\", \"Uni1MFK_ID\", \"KEY0\");\n+            assertSQLFragnments(sql, \"CREATE TABLE C_U1M_Map_FK\", \"Uni1MFK_ID\", \"KEY0\");\n             assertSQLFragnments(sql, \"CREATE TABLE Bi1M_Map_JT_C\", \"B_ID\", \"C_ID\");\n-            assertSQLFragnments(sql, \"CREATE TABLE EntityC_U1M_Map_RelKey_FK\", \"Uni1MFK_ID\");\n+            assertSQLFragnments(sql, \"CREATE TABLE C_U1M_Map_RelKey_FK\", \"Uni1MFK_ID\");\n             assertSQLFragnments(sql, \"CREATE TABLE Bi1M_Map_RelKey_JT_C\", \"B_ID\", \"C_ID\");\n             crudUni1MMapFK(em);\n             crudBi1MMapJT(em);"},{"sha":"381f2906dfc34f30621b022b500dd37678221874","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/Uni_1ToM_JT.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/c2a723816bddb0730c3f7c44e6d15fa1fd4189d1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/Uni_1ToM_JT.java","raw_url":"https://github.com/apache/openjpa/raw/c2a723816bddb0730c3f7c44e6d15fa1fd4189d1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/Uni_1ToM_JT.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/Uni_1ToM_JT.java?ref=c2a723816bddb0730c3f7c44e6d15fa1fd4189d1","patch":"@@ -40,12 +40,12 @@\n \n     @OneToMany(fetch=FetchType.EAGER)\n     @JoinTable(\n-            name=\"Uni1MJT_C\",\n-            joinColumns=\n+        name=\"Uni1MJT_C\",\n+        joinColumns=\n             @JoinColumn(name=\"Uni1MJT_ID\", referencedColumnName=\"ID\"),\n-            inverseJoinColumns=\n+        inverseJoinColumns=\n             @JoinColumn(name=\"C_ID\", referencedColumnName=\"ID\")\n-            )    \n+    )    \n     private List<EntityC> entityCs = null;\n     \n     public long getId() { "},{"sha":"b9fa7ddb50b52e8f172e910ec6b24523db03babd","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/Uni_1ToM_Map_RelKey_FK.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/c2a723816bddb0730c3f7c44e6d15fa1fd4189d1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/Uni_1ToM_Map_RelKey_FK.java","raw_url":"https://github.com/apache/openjpa/raw/c2a723816bddb0730c3f7c44e6d15fa1fd4189d1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/Uni_1ToM_Map_RelKey_FK.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/Uni_1ToM_Map_RelKey_FK.java?ref=c2a723816bddb0730c3f7c44e6d15fa1fd4189d1","patch":"@@ -42,7 +42,7 @@\n \n     private String name;\n \n-    @OneToMany(/*cascade = CascadeType.ALL,*/ fetch=FetchType.EAGER)\n+    @OneToMany(cascade = CascadeType.ALL, fetch=FetchType.EAGER)\n     @JoinColumn(name=\"Uni1MFK_ID\")\n     private Map<EntityC, EntityC_U1M_Map_RelKey_FK> entityCs = null;\n     "}]}

