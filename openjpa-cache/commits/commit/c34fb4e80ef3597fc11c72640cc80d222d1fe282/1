{"sha":"c34fb4e80ef3597fc11c72640cc80d222d1fe282","node_id":"MDY6Q29tbWl0MjA2MzY0OmMzNGZiNGU4MGVmMzU5N2ZjMTFjNzI2NDBjYzgwZDIyMmQxZmUyODI=","commit":{"author":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-08-05T23:30:08Z"},"committer":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-08-05T23:30:08Z"},"message":"OPENJPA-281.  Committing the patch that I posted earlier this week.  These changes do the proper eager loading of @Basic types.  Along with a new testcase and updated AllFieldTypes.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@562986 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"879c88f45d9f35fdfb3db4bb06e1916b6edf5c60","url":"https://api.github.com/repos/apache/openjpa/git/trees/879c88f45d9f35fdfb3db4bb06e1916b6edf5c60"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/c34fb4e80ef3597fc11c72640cc80d222d1fe282","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/c34fb4e80ef3597fc11c72640cc80d222d1fe282","html_url":"https://github.com/apache/openjpa/commit/c34fb4e80ef3597fc11c72640cc80d222d1fe282","comments_url":"https://api.github.com/repos/apache/openjpa/commits/c34fb4e80ef3597fc11c72640cc80d222d1fe282/comments","author":null,"committer":null,"parents":[{"sha":"890d16047e3b1feabfd12134168589feb8bc13d2","url":"https://api.github.com/repos/apache/openjpa/commits/890d16047e3b1feabfd12134168589feb8bc13d2","html_url":"https://github.com/apache/openjpa/commit/890d16047e3b1feabfd12134168589feb8bc13d2"}],"stats":{"total":363,"additions":358,"deletions":5},"files":[{"sha":"07c4c3ed570e556d799b9f935910152621ac3a59","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMapping.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/c34fb4e80ef3597fc11c72640cc80d222d1fe282/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMapping.java","raw_url":"https://github.com/apache/openjpa/raw/c34fb4e80ef3597fc11c72640cc80d222d1fe282/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMapping.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMapping.java?ref=c34fb4e80ef3597fc11c72640cc80d222d1fe282","patch":"@@ -483,7 +483,8 @@ private void initializeMapping() {\n         _val.resolve(MODE_MAPPING_INIT);\n         _key.resolve(MODE_MAPPING_INIT);\n         _val.resolve(MODE_MAPPING_INIT);\n-        _strategy.initialize();\n+        if (_strategy != null)\n+            _strategy.initialize();\n     }\n \n     public void copy(FieldMetaData fmd) {"},{"sha":"195f8b40ed275e235787b15182c1fc0535e7555b","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingRepository.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/c34fb4e80ef3597fc11c72640cc80d222d1fe282/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingRepository.java","raw_url":"https://github.com/apache/openjpa/raw/c34fb4e80ef3597fc11c72640cc80d222d1fe282/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingRepository.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingRepository.java?ref=c34fb4e80ef3597fc11c72640cc80d222d1fe282","patch":"@@ -1009,7 +1009,8 @@ protected ValueHandler defaultHandler(ValueMapping val, boolean adapting) {\n         if (handler instanceof ValueHandler)\n             return (ValueHandler) handler;\n \n-        if (val.getType() == byte[].class) {\n+        if (val.getType() == byte[].class \n+            || val.getType() == Byte[].class) {\n             if (_dict.maxEmbeddedBlobSize != -1)\n                 warnMaxEmbedded(val, _dict.maxEmbeddedBlobSize);\n             return ByteArrayValueHandler.getInstance();"},{"sha":"631f613c22cba2078a9b81f2def1ffc540d25e29","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java","status":"modified","additions":59,"deletions":0,"changes":59,"blob_url":"https://github.com/apache/openjpa/blob/c34fb4e80ef3597fc11c72640cc80d222d1fe282/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/c34fb4e80ef3597fc11c72640cc80d222d1fe282/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java?ref=c34fb4e80ef3597fc11c72640cc80d222d1fe282","patch":"@@ -22,6 +22,7 @@\n import java.io.IOException;\n import java.io.ObjectInput;\n import java.io.ObjectOutput;\n+import java.io.Serializable;\n import java.lang.reflect.Constructor;\n import java.lang.reflect.Field;\n import java.lang.reflect.InvocationTargetException;\n@@ -170,6 +171,10 @@\n     private String _extString = null;\n     private Map _extValues = Collections.EMPTY_MAP;\n     private Map _fieldValues = Collections.EMPTY_MAP;\n+    private Boolean _enumField = null;\n+    private Boolean _lobField = null;\n+    private Boolean _serializableField = null;\n+    private boolean _generated = false;\n \n     // Members aren't serializable. Use a proxy that can provide a Member\n     // to avoid writing the full Externalizable implementation.\n@@ -590,7 +595,17 @@ public boolean isInDefaultFetchGroup() {\n                 switch (getTypeCode()) {\n                     case JavaTypes.OBJECT:\n                     case JavaTypes.PC:\n+                        if (isSerializable() || isEnum())\n+                            _dfg = DFG_TRUE;\n+                        else\n+                            _dfg = DFG_FALSE;\n+                        break;\n                     case JavaTypes.ARRAY:\n+                        if (isLobArray())\n+                            _dfg = DFG_TRUE;\n+                        else\n+                            _dfg = DFG_FALSE;\n+                        break;\n                     case JavaTypes.COLLECTION:\n                     case JavaTypes.MAP:\n                     case JavaTypes.PC_UNTYPED:\n@@ -604,6 +619,38 @@ public boolean isInDefaultFetchGroup() {\n         return (_dfg & DFG_TRUE) > 0;\n     }\n \n+    private boolean isEnum() {\n+        if (_enumField == null) {\n+            Class dt = getDeclaredType();\n+            _enumField = dt.isEnum() ? Boolean.TRUE : Boolean.FALSE;\n+        }\n+        return _enumField.booleanValue();\n+    }\n+\n+    private boolean isSerializable() {\n+        if (_serializableField == null) {\n+            Class dt = getDeclaredType();\n+            if (Serializable.class.isAssignableFrom(dt))\n+                _serializableField = Boolean.TRUE;\n+            else\n+                _serializableField = Boolean.FALSE;\n+        }\n+        return _serializableField.booleanValue();\n+    }\n+\n+    private boolean isLobArray() {\n+        // check for byte[], Byte[], char[], Character[]\n+        if (_lobField == null) {\n+            Class dt = getDeclaredType();\n+            if (dt == byte[].class || dt == Byte[].class ||\n+                dt == char[].class || dt == Character[].class)\n+                _lobField = Boolean.TRUE;\n+            else\n+                _lobField = Boolean.FALSE;\n+        }\n+        return _lobField.booleanValue();\n+    }\n+\n     /**\n      * Whether this field is in the default fetch group.\n      */\n@@ -1732,6 +1779,10 @@ public void copy(FieldMetaData field) {\n         _fieldValues = Collections.EMPTY_MAP;\n         _primKey = field.isPrimaryKey();\n         _backingMember = field._backingMember;\n+        _enumField = field._enumField;\n+        _lobField = field._lobField;\n+        _serializableField = field._serializableField;\n+        _generated = field._generated;\n \n         // embedded fields can't be versions\n         if (_owner.getEmbeddingMetaData() == null && _version == null)\n@@ -1996,4 +2047,12 @@ public void writeExternal(ObjectOutput out)\n                 out.writeObject(((Method) _member).getParameterTypes());\n         }\n     }\n+\n+    public boolean is_generated() {\n+        return _generated;\n+    }\n+\n+    public void set_generated(boolean _generated) {\n+        this._generated = _generated;\n+    }\n }"},{"sha":"63650e849eb9070b2749ae08fc66040909c3cdd8","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/AllFieldTypes.java","status":"modified","additions":192,"deletions":1,"changes":193,"blob_url":"https://github.com/apache/openjpa/blob/c34fb4e80ef3597fc11c72640cc80d222d1fe282/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/AllFieldTypes.java","raw_url":"https://github.com/apache/openjpa/raw/c34fb4e80ef3597fc11c72640cc80d222d1fe282/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/AllFieldTypes.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/AllFieldTypes.java?ref=c34fb4e80ef3597fc11c72640cc80d222d1fe282","patch":"@@ -18,16 +18,24 @@\n  */\n package org.apache.openjpa.persistence.simple;\n \n+import java.io.Serializable;\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+import java.util.Calendar;\n import java.util.Date;\n import java.util.HashSet;\n import java.util.Set;\n import javax.persistence.Entity;\n+import javax.persistence.Version;\n \n import org.apache.openjpa.persistence.PersistentCollection;\n \n @Entity\n public class AllFieldTypes {\n-\n+    \n+    public static enum EnumType {Value1, Value2};\n+    \n+    // @Basic types\n     private short shortField;\n     private int intField;\n     private boolean booleanField;\n@@ -36,8 +44,30 @@\n     private char charField;\n     private double doubleField;\n     private byte byteField;\n+    private Short wShortField;\n+    private Integer wIntegerField;\n+    private Boolean wBooleanField;\n+    private Long wLongField;\n+    private Float wFloatField;\n+    private Character wCharacterField;\n+    private Double wDoubleField;\n+    private Byte wByteField;\n+    private BigInteger bigIntegerField;\n+    private BigDecimal bigDecimalField;\n     private String stringField;\n     private Date dateField;\n+    private Calendar calendarField;\n+    private java.sql.Date sqlDateField;\n+    private java.sql.Time sqlTimeField;\n+    private java.sql.Timestamp sqlTimestampField;\n+    private byte[] byteLob;\n+    private Byte[] wByteLob;\n+    private char[] charLob;\n+    private Character[] wCharacterLob;\n+    private EnumType enumField;\n+    private Serializable serializableField;\n+    \n+    // Additional types\n     private Set<String> setOfStrings = new HashSet<String>();\n     private String[] arrayOfStrings;\n \n@@ -147,5 +177,166 @@ public void setArrayOfInts(int[] arrayOfInts) {\n     public int[] getArrayOfInts() {\n         return arrayOfInts;\n     }\n+\n+    public BigDecimal getBigDecimalField() {\n+        return bigDecimalField;\n+    }\n+\n+    public void setBigDecimalField(BigDecimal bigDecimalField) {\n+        this.bigDecimalField = bigDecimalField;\n+    }\n+\n+    public BigInteger getBigIntegerField() {\n+        return bigIntegerField;\n+    }\n+\n+    public void setBigIntegerField(BigInteger bigIntegerField) {\n+        this.bigIntegerField = bigIntegerField;\n+    }\n+\n+    public byte[] getByteLob() {\n+        return byteLob;\n+    }\n+\n+    public void setByteLob(byte[] byteLob) {\n+        this.byteLob = byteLob;\n+    }\n+\n+    public Calendar getCalendarField() {\n+        return calendarField;\n+    }\n+\n+    public void setCalendarField(Calendar calendarField) {\n+        this.calendarField = calendarField;\n+    }\n+\n+    public char[] getCharLob() {\n+        return charLob;\n+    }\n+\n+    public void setCharLob(char[] charLob) {\n+        this.charLob = charLob;\n+    }\n+\n+    public EnumType getEnumField() {\n+        return enumField;\n+    }\n+\n+    public void setEnumField(EnumType enumField) {\n+        this.enumField = enumField;\n+    }\n+\n+    public Serializable getSerializableField() {\n+        return serializableField;\n+    }\n+\n+    public void setSerializableField(Serializable serializableField) {\n+        this.serializableField = serializableField;\n+    }\n+\n+    public java.sql.Date getSqlDateField() {\n+        return sqlDateField;\n+    }\n+\n+    public void setSqlDateField(java.sql.Date sqlDateField) {\n+        this.sqlDateField = sqlDateField;\n+    }\n+\n+    public java.sql.Time getSqlTimeField() {\n+        return sqlTimeField;\n+    }\n+\n+    public void setSqlTimeField(java.sql.Time sqlTimeField) {\n+        this.sqlTimeField = sqlTimeField;\n+    }\n+\n+    public java.sql.Timestamp getSqlTimestampField() {\n+        return sqlTimestampField;\n+    }\n+\n+    public void setSqlTimestampField(java.sql.Timestamp sqlTimestampField) {\n+        this.sqlTimestampField = sqlTimestampField;\n+    }\n+\n+    public Boolean getWBooleanField() {\n+        return wBooleanField;\n+    }\n+\n+    public void setWBooleanField(Boolean booleanField) {\n+        wBooleanField = booleanField;\n+    }\n+\n+    public Byte getWByteField() {\n+        return wByteField;\n+    }\n+\n+    public void setWByteField(Byte byteField) {\n+        wByteField = byteField;\n+    }\n+\n+    public Byte[] getWByteLob() {\n+        return wByteLob;\n+    }\n+\n+    public void setWByteLob(Byte[] byteLob) {\n+        wByteLob = byteLob;\n+    }\n+\n+    public Character getWCharacterField() {\n+        return wCharacterField;\n+    }\n+\n+    public void setWCharacterField(Character characterField) {\n+        wCharacterField = characterField;\n+    }\n+\n+    public Character[] getWCharacterLob() {\n+        return wCharacterLob;\n+    }\n+\n+    public void setWCharacterLob(Character[] characterLob) {\n+        wCharacterLob = characterLob;\n+    }\n+\n+    public Double getWDoubleField() {\n+        return wDoubleField;\n+    }\n+\n+    public void setWDoubleField(Double doubleField) {\n+        wDoubleField = doubleField;\n+    }\n+\n+    public Float getWFloatField() {\n+        return wFloatField;\n+    }\n+\n+    public void setWFloatField(Float floatField) {\n+        wFloatField = floatField;\n+    }\n+\n+    public Integer getWIntegerField() {\n+        return wIntegerField;\n+    }\n+\n+    public void setWIntegerField(Integer integerField) {\n+        wIntegerField = integerField;\n+    }\n+\n+    public Long getWLongField() {\n+        return wLongField;\n+    }\n+\n+    public void setWLongField(Long longField) {\n+        wLongField = longField;\n+    }\n+\n+    public Short getWShortField() {\n+        return wShortField;\n+    }\n+\n+    public void setWShortField(Short shortField) {\n+        wShortField = shortField;\n+    }\n+\n }\n "},{"sha":"390339dbc7d10324b7da1f7b8f797d37872fa2cf","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestBasicAnnotation.java","status":"added","additions":92,"deletions":0,"changes":92,"blob_url":"https://github.com/apache/openjpa/blob/c34fb4e80ef3597fc11c72640cc80d222d1fe282/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestBasicAnnotation.java","raw_url":"https://github.com/apache/openjpa/raw/c34fb4e80ef3597fc11c72640cc80d222d1fe282/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestBasicAnnotation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestBasicAnnotation.java?ref=c34fb4e80ef3597fc11c72640cc80d222d1fe282","patch":"@@ -0,0 +1,92 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.simple;\r\n+\r\n+import java.math.BigDecimal;\r\n+import java.util.Calendar;\r\n+import java.util.Date;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+\r\n+import junit.textui.TestRunner;\r\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n+\r\n+/**\r\n+ * Simple test case to test the default values associated with the @Basic \r\n+ * annotation.\r\n+ *\r\n+ * @author Kevin Sutter\r\n+ */\r\n+public class TestBasicAnnotation\r\n+    extends SingleEMFTestCase {\r\n+\r\n+    public void setUp() {\r\n+        setUp(CLEAR_TABLES, AllFieldTypes.class);\r\n+    }\r\n+\r\n+    public void testEagerFetchType() {\r\n+        EntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        AllFieldTypes aft = new AllFieldTypes();\r\n+        \r\n+        // Initialize a sampling of the types\r\n+        aft.setBigDecimalField(new BigDecimal(1));\r\n+        aft.setBooleanField(false);\r\n+        aft.setByteLob(new byte[1]);\r\n+        aft.setCalendarField(Calendar.getInstance());\r\n+        aft.setDateField(new Date());\r\n+        aft.setEnumField(AllFieldTypes.EnumType.Value1);\r\n+        aft.setSerializableField(new Date());\r\n+        aft.setSqlTimestampField(new java.sql.Timestamp(\r\n+                System.currentTimeMillis()));\r\n+        aft.setStringField(\"aft\");\r\n+        aft.setWByteLob(new Byte[1]);\r\n+        aft.setWDoubleField(new Double(1));\r\n+        \r\n+        em.persist(aft);\r\n+        em.getTransaction().commit();\r\n+        em.clear();\r\n+        \r\n+        AllFieldTypes aftQuery = (AllFieldTypes)em.createQuery\r\n+            (\"select x from AllFieldTypes x where x.stringField = 'aft'\").\r\n+            getSingleResult();\r\n+        em.clear();  // ensure detached\r\n+        assertFalse(em.contains(aftQuery));\r\n+        \r\n+        // assert that the sampling of fields are not null\r\n+        assertNotNull(aftQuery.getBigDecimalField());\r\n+        assertNotNull(aftQuery.getBooleanField());\r\n+        assertNotNull(aftQuery.getByteLob());\r\n+        assertNotNull(aftQuery.getCalendarField());\r\n+        assertNotNull(aftQuery.getDateField());\r\n+        assertNotNull(aftQuery.getEnumField());\r\n+        assertNotNull(aftQuery.getSerializableField());\r\n+        assertNotNull(aftQuery.getSqlTimestampField());\r\n+        assertNotNull(aftQuery.getStringField());\r\n+        assertNotNull(aftQuery.getWByteLob());\r\n+        assertNotNull(aftQuery.getWDoubleField());\r\n+        \r\n+        em.close();\r\n+    }\r\n+\r\n+    public static void main(String[] args) {\r\n+        TestRunner.run(TestBasicAnnotation.class);\r\n+    }\r\n+}\r\n+\r"},{"sha":"bf8d014ea43106b4e58f694427381418bbb24da3","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/xml/orm.xml","status":"modified","additions":11,"deletions":2,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/c34fb4e80ef3597fc11c72640cc80d222d1fe282/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/xml/orm.xml","raw_url":"https://github.com/apache/openjpa/raw/c34fb4e80ef3597fc11c72640cc80d222d1fe282/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/xml/orm.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/xml/orm.xml?ref=c34fb4e80ef3597fc11c72640cc80d222d1fe282","patch":"@@ -39,9 +39,18 @@\n     </entity>\n     <entity name=\"XmlOverride\" class=\"XmlOverrideEntity\">\n     \t<attributes>\n-\t    <basic name=\"name\" optional=\"true\"></basic>\n-\t    <basic name=\"description\" optional=\"false\"></basic>\n+\t    \t<basic name=\"name\" optional=\"true\"></basic>\n+\t    \t<basic name=\"description\" optional=\"false\"></basic>\n     \t</attributes>\n     </entity>\n+    <entity name=\"AllFieldTypes\" \n+        \tclass=\"org.apache.openjpa.persistence.simple.AllFieldTypes\">\n+    \t<attributes>\n+\t\t\t<basic name=\"byteLob\" fetch=\"EAGER\"> \n+\t\t\t\t<column name=\"BYTELOB\"/>\n+\t\t\t\t<lob/>\n+\t\t\t</basic>\n+\t\t</attributes>\n+    </entity>\n </entity-mappings>\n "}]}

