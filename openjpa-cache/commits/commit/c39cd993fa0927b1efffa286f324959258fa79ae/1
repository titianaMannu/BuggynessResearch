{"sha":"c39cd993fa0927b1efffa286f324959258fa79ae","node_id":"MDY6Q29tbWl0MjA2MzY0OmMzOWNkOTkzZmEwOTI3YjFlZmZmYTI4NmYzMjQ5NTkyNThmYTc5YWU=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2011-01-03T19:32:03Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2011-01-03T19:32:03Z"},"message":"OPENJPA-1911: fix merge problem for entities with derived id\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1054717 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b343e6534bbf5a0767e254e1ab41d3ea20259235","url":"https://api.github.com/repos/apache/openjpa/git/trees/b343e6534bbf5a0767e254e1ab41d3ea20259235"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/c39cd993fa0927b1efffa286f324959258fa79ae","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/c39cd993fa0927b1efffa286f324959258fa79ae","html_url":"https://github.com/apache/openjpa/commit/c39cd993fa0927b1efffa286f324959258fa79ae","comments_url":"https://api.github.com/repos/apache/openjpa/commits/c39cd993fa0927b1efffa286f324959258fa79ae/comments","author":null,"committer":null,"parents":[{"sha":"aae0ccfc3a51cae02d9515d3a100012987fd297e","url":"https://api.github.com/repos/apache/openjpa/commits/aae0ccfc3a51cae02d9515d3a100012987fd297e","html_url":"https://github.com/apache/openjpa/commit/aae0ccfc3a51cae02d9515d3a100012987fd297e"}],"stats":{"total":426,"additions":425,"deletions":1},"files":[{"sha":"ca97c2f0503cd37266fe9dbd5bad909875aec6ee","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","status":"modified","additions":17,"deletions":1,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/c39cd993fa0927b1efffa286f324959258fa79ae/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/c39cd993fa0927b1efffa286f324959258fa79ae/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java?ref=c39cd993fa0927b1efffa286f324959258fa79ae","patch":"@@ -1999,9 +1999,25 @@ public void settingObjectField(PersistenceCapable pc, int field,\n                     case JavaTypes.ARRAY:\n                     case JavaTypes.COLLECTION:\n                     case JavaTypes.MAP:\n-                    case JavaTypes.PC:\n                     case JavaTypes.PC_UNTYPED:\n                         break;\n+                    case JavaTypes.PC:\n+                        if (_meta.getField(field).isPrimaryKey()) {\n+                            // this field is a derived identity\n+                            //if (newVal != null && newVal.equals(curVal))\n+                            //    return;\n+                            //else {\n+                                if (curVal != null && newVal != null && \n+                                    curVal instanceof PersistenceCapable && newVal instanceof PersistenceCapable) {\n+                                    PersistenceCapable curPc = (PersistenceCapable) curVal;\n+                                    PersistenceCapable newPc = (PersistenceCapable) newVal;\n+                                    if (curPc.pcFetchObjectId().equals(newPc.pcFetchObjectId()))\n+                                        return;\n+                                    \n+                                }\n+                            //}\n+                        } else     \n+                            break;\n                     default:\n                         if (newVal != null && newVal.equals(curVal))\n                             return;"},{"sha":"dcfffe297fc7726ece931504c6e69f3bdf5e9572","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xs/AccountingHierarchy.java","status":"added","additions":114,"deletions":0,"changes":114,"blob_url":"https://github.com/apache/openjpa/blob/c39cd993fa0927b1efffa286f324959258fa79ae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xs/AccountingHierarchy.java","raw_url":"https://github.com/apache/openjpa/raw/c39cd993fa0927b1efffa286f324959258fa79ae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xs/AccountingHierarchy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xs/AccountingHierarchy.java?ref=c39cd993fa0927b1efffa286f324959258fa79ae","patch":"@@ -0,0 +1,114 @@\n+package org.apache.openjpa.persistence.xs;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.Id;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Table;\n+import javax.persistence.Transient;\n+\n+@Entity\n+@Table(name = \"PM_ACCOUNTING_HIERARCHY_TEST\")\n+public class AccountingHierarchy implements Serializable {\n+\n+    private static final long serialVersionUID = -1759978020595211326L;\n+\n+    private String code;\n+    private String shortDesc;\n+\n+    private List<AccountingHierarchyRate> accRateList = new ArrayList<AccountingHierarchyRate>(0);\n+\n+    private Long version;\n+\n+    public AccountingHierarchy() {\n+    }\n+\n+    public AccountingHierarchy(String code) {\n+        this.code = code;\n+    }\n+\n+    public AccountingHierarchy(String code, String shortDesc) {\n+        this.code = code;\n+        this.shortDesc = shortDesc;\n+    }\n+\n+    public AccountingHierarchy(String code, String shortDesc, String hierarchyType) {\n+        this.code = code;\n+        this.shortDesc = shortDesc;\n+    }\n+\n+    @Id\n+    @Column(name = \"code\", length = 20)\n+    public String getCode() {\n+        return code;\n+    }\n+\n+    @Column(name = \"short_desc\", nullable = false, length = 50)\n+    public String getShortDesc() {\n+        return shortDesc;\n+    }\n+\n+    @OneToMany(mappedBy = \"accountingHierarchy\", fetch = FetchType.EAGER, \n+        targetEntity = AccountingHierarchyRate.class, cascade = CascadeType.ALL, orphanRemoval = true)\n+    public List<AccountingHierarchyRate> getAccRateList() {\n+        return accRateList;\n+    }\n+\n+    public void setCode(String code) {\n+        this.code = code;\n+    }\n+\n+    public void setShortDesc(String shortDesc) {\n+        this.shortDesc = shortDesc;\n+    }\n+\n+    public void setAccRateList(List<AccountingHierarchyRate> accRateList) {\n+        this.accRateList = accRateList;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        final int prime = 31;\n+        int result = 1;\n+        result = prime * result + ((getCode() == null) ? 0 : getCode().hashCode());\n+        return result;\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj)\n+            return true;\n+        if (obj == null)\n+            return false;\n+        if (!(obj instanceof AccountingHierarchy))\n+            return false;\n+        AccountingHierarchy other = (AccountingHierarchy) obj;\n+        if (getCode() == null) {\n+            if (other.getCode() != null)\n+                return false;\n+        } else if (!getCode().equals(other.getCode()))\n+            return false;\n+        return true;\n+    }\n+\n+    @Transient\n+    public Long getVersion() {\n+        return version;\n+    }\n+\n+    public void setVersion(Long version) {\n+        this.version = version;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"AccountingHierarchy [getCode()=\" + getCode() + \", getShortDesc()=\" + getShortDesc() + \"]\";\n+    }\n+\n+}"},{"sha":"9cf4ab6072a857c85380f12011eea214eb078a32","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xs/AccountingHierarchyRate.java","status":"added","additions":109,"deletions":0,"changes":109,"blob_url":"https://github.com/apache/openjpa/blob/c39cd993fa0927b1efffa286f324959258fa79ae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xs/AccountingHierarchyRate.java","raw_url":"https://github.com/apache/openjpa/raw/c39cd993fa0927b1efffa286f324959258fa79ae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xs/AccountingHierarchyRate.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xs/AccountingHierarchyRate.java?ref=c39cd993fa0927b1efffa286f324959258fa79ae","patch":"@@ -0,0 +1,109 @@\n+package org.apache.openjpa.persistence.xs;\n+\n+import java.io.Serializable;\n+import java.math.BigDecimal;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.Id;\n+import javax.persistence.IdClass;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name = \"PM_ACCOUNTING_HIERARCHY_RATE_TEST\")\n+@IdClass(AccountingHierarchyRateOpenJPAKey.class)\n+public class AccountingHierarchyRate implements Serializable {\n+\n+\tprivate static final long serialVersionUID = 538926265319989492L;\n+\n+\tprivate String id;\n+\tprivate AccountingHierarchy accountingHierarchy;\n+\n+\tprivate BigDecimal currentRate;\n+\tprivate BigDecimal budgetRate;\n+\n+\tpublic AccountingHierarchyRate() {\n+\t}\n+\n+\tpublic AccountingHierarchyRate(String id, AccountingHierarchy accountingHierarchy, \n+\t        BigDecimal currentRate, BigDecimal budgetRate) {\n+\t\tthis.id = id;\n+\t\tthis.accountingHierarchy = accountingHierarchy;\n+\t\tthis.currentRate = currentRate;\n+\t\tthis.budgetRate = budgetRate;\n+\t}\n+\n+\t@Id\n+\t@Column(name = \"id\", length = 20, nullable = false)\n+\tpublic String getId() {\n+\t\treturn id;\n+\t}\n+\n+\t@Id\n+\t@ManyToOne(targetEntity = AccountingHierarchy.class, fetch = FetchType.LAZY)\n+\t@JoinColumn(name = \"acc_hier\", nullable = false)\n+\tpublic AccountingHierarchy getAccountingHierarchy() {\n+\t\treturn accountingHierarchy;\n+\t}\n+\n+\t@Column(name = \"current_rate\", nullable = true, precision = 12, scale = 4)\n+\tpublic BigDecimal getCurrentRate() {\n+\t\treturn currentRate;\n+\t}\n+\n+\t@Column(name = \"budget_rate\", nullable = true, precision = 12, scale = 4)\n+\tpublic BigDecimal getBudgetRate() {\n+\t\treturn budgetRate;\n+\t}\n+\n+\tpublic void setId(String id) {\n+\t\tthis.id = id;\n+\t}\n+\n+\tpublic void setAccountingHierarchy(AccountingHierarchy accountingHierarchy) {\n+\t\tthis.accountingHierarchy = accountingHierarchy;\n+\t}\n+\n+\tpublic void setCurrentRate(BigDecimal currentRate) {\n+\t\tthis.currentRate = currentRate;\n+\t}\n+\n+\tpublic void setBudgetRate(BigDecimal budgetRate) {\n+\t\tthis.budgetRate = budgetRate;\n+\t}\n+\n+\t@Override\n+\tpublic int hashCode() {\n+\t\tfinal int prime = 31;\n+\t\tint result = 1;\n+\t\tresult = prime * result + ((getId() == null) ? 0 : getId().hashCode());\n+\t\tresult = prime * result + ((getAccountingHierarchy() == null) ? 0 : \n+\t\t    getAccountingHierarchy().hashCode());\n+\t\treturn result;\n+\t}\n+\n+\t@Override\n+\tpublic boolean equals(Object obj) {\n+\t\tif (this == obj)\n+\t\t\treturn true;\n+\t\tif (obj == null)\n+\t\t\treturn false;\n+\t\tif (!(obj instanceof AccountingHierarchyRate))\n+\t\t\treturn false;\n+\t\tAccountingHierarchyRate other = (AccountingHierarchyRate) obj;\n+\t\tif (getId() == null) {\n+\t\t\tif (other.getId() != null)\n+\t\t\t\treturn false;\n+\t\t} else if (!getId().equals(other.getId()))\n+\t\t\treturn false;\n+\t\tif (getAccountingHierarchy() == null) {\n+\t\t\tif (other.getAccountingHierarchy() != null)\n+\t\t\t\treturn false;\n+\t\t} else if (!getAccountingHierarchy().equals(other.getAccountingHierarchy()))\n+\t\t\treturn false;\n+\t\treturn true;\n+\t}\n+}"},{"sha":"4a1415ac8caad141cc2736f6fcf31307d17d93c0","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xs/AccountingHierarchyRateOpenJPAKey.java","status":"added","additions":109,"deletions":0,"changes":109,"blob_url":"https://github.com/apache/openjpa/blob/c39cd993fa0927b1efffa286f324959258fa79ae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xs/AccountingHierarchyRateOpenJPAKey.java","raw_url":"https://github.com/apache/openjpa/raw/c39cd993fa0927b1efffa286f324959258fa79ae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xs/AccountingHierarchyRateOpenJPAKey.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xs/AccountingHierarchyRateOpenJPAKey.java?ref=c39cd993fa0927b1efffa286f324959258fa79ae","patch":"@@ -0,0 +1,109 @@\n+package org.apache.openjpa.persistence.xs;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * Application identity class for: lk.informatics.infotrack.featureSelection.entity.AccountingHierarchyRate\n+ *\n+ * Auto-generated by:\n+ * org.apache.openjpa.enhance.ApplicationIdTool\n+ */\n+public class AccountingHierarchyRateOpenJPAKey implements Serializable {\n+\t/**\n+\t * \n+\t */\n+\tprivate static final long serialVersionUID = -2345673847908844341L;\n+\n+\tstatic {\n+\t\t// register persistent class in JVM\n+\t\ttry { Class.forName(\"org.apache.openjpa.persistence.xs.AccountingHierarchyRate\"); }\n+\t\tcatch(Exception e) {}\n+\t}\n+\n+\tpublic String accountingHierarchy;\n+\tpublic String id;\n+\n+\tpublic AccountingHierarchyRateOpenJPAKey() {\n+\t}\n+\n+\tpublic AccountingHierarchyRateOpenJPAKey(String str) {\n+\t\tfromString(str);\n+\t}\n+\n+\tpublic String getAccountingHierarchy() {\n+\t\treturn accountingHierarchy;\n+\t}\n+\n+\tpublic void setAccountingHierarchy(String accountingHierarchy) {\n+\t\tthis.accountingHierarchy = accountingHierarchy;\n+\t}\n+\n+\tpublic String getId() {\n+\t\treturn id;\n+\t}\n+\n+\tpublic void setId(String id) {\n+\t\tthis.id = id;\n+\t}\n+\n+\tpublic String toString() {\n+\t\treturn accountingHierarchy\n+\t\t\t+ \"::\" + id;\n+\t}\n+\n+\tpublic int hashCode() {\n+\t\tint rs = 17;\n+\t\trs = rs * 37 + ((accountingHierarchy == null) ? 0 : accountingHierarchy.hashCode());\n+\t\trs = rs * 37 + ((id == null) ? 0 : id.hashCode());\n+\t\treturn rs;\n+\t}\n+\n+\tpublic boolean equals(Object obj) {\n+\t\tif(this == obj)\n+\t\t\treturn true;\n+\t\tif(obj == null || obj.getClass() != getClass())\n+\t\t\treturn false;\n+\n+\t\tAccountingHierarchyRateOpenJPAKey other = (AccountingHierarchyRateOpenJPAKey) obj;\n+\t\treturn ((accountingHierarchy == null && other.accountingHierarchy == null)\n+\t\t\t|| (accountingHierarchy != null && accountingHierarchy.equals(other.accountingHierarchy)))\n+\t\t\t&& ((id == null && other.id == null)\n+\t\t\t|| (id != null && id.equals(other.id)));\n+\t}\n+\n+\tprivate void fromString(String str) {\n+\t\tTokenizer toke = new Tokenizer(str);\n+\t\tstr = toke.nextToken();\n+\t\tif(\"null\".equals(str))\n+\t\t\taccountingHierarchy = null;\n+\t\telse\n+\t\t\taccountingHierarchy = str;\n+\t\tstr = toke.nextToken();\n+\t\tif(\"null\".equals(str))\n+\t\t\tid = null;\n+\t\telse\n+\t\t\tid = str;\n+\t}\n+\n+\tprotected static class Tokenizer {\n+\t\tprivate final String str;\n+\t\tprivate int last;\n+\n+\t\tpublic Tokenizer (String str) {\n+\t\t\tthis.str = str;\n+\t\t}\n+\n+\t\tpublic String nextToken () {\n+\t\t\tint next = str.indexOf(\"::\", last);\n+\t\t\tString part;\n+\t\t\tif(next == -1) {\n+\t\t\t\tpart = str.substring(last);\n+\t\t\t\tlast = str.length();\n+\t\t\t} else {\n+\t\t\t\tpart = str.substring(last, next);\n+\t\t\t\tlast = next + 2;\n+\t\t\t}\n+\t\t\treturn part;\n+\t\t}\n+\t}\n+}"},{"sha":"37939a55c31c1b510a0365eb18040fa7fac2bad2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xs/TestMergeComplexKey.java","status":"added","additions":76,"deletions":0,"changes":76,"blob_url":"https://github.com/apache/openjpa/blob/c39cd993fa0927b1efffa286f324959258fa79ae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xs/TestMergeComplexKey.java","raw_url":"https://github.com/apache/openjpa/raw/c39cd993fa0927b1efffa286f324959258fa79ae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xs/TestMergeComplexKey.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xs/TestMergeComplexKey.java?ref=c39cd993fa0927b1efffa286f324959258fa79ae","patch":"@@ -0,0 +1,76 @@\n+package org.apache.openjpa.persistence.xs;\n+\n+import java.math.BigDecimal;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityTransaction;\n+\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+public class TestMergeComplexKey extends SingleEMFTestCase {\n+    Object[] props = new Object[] { AccountingHierarchy.class, AccountingHierarchyRate.class, CLEAR_TABLES };\n+\n+    @Override\n+    public void setUp() throws Exception {\n+        setUp(props);\n+    }\n+\n+    public void test() throws Exception {\n+        createDate();\n+        EntityManager em = emf.createEntityManager();\n+        AccountingHierarchy accountingHierarchy = (AccountingHierarchy) em.find(AccountingHierarchy.class, \"TESTING\");\n+        accountingHierarchy.setShortDesc(\"NAME:\" + System.currentTimeMillis());\n+        accountingHierarchy = roundtrip(accountingHierarchy);\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        try {\n+            em.merge(accountingHierarchy);\n+        } catch (RuntimeException e) {\n+            em.getTransaction().setRollbackOnly();\n+            throw e;\n+        } finally {\n+            if (em.getTransaction().getRollbackOnly()) {\n+                em.getTransaction().rollback();\n+            } else {\n+                em.getTransaction().commit();\n+            }\n+        }\n+\n+    }\n+\n+    void createDate() {\n+        EntityManager em = emf.createEntityManager();\n+        System.out.println(em.createQuery(\"select o from AccountingHierarchy o\").getResultList().size());\n+\n+        String code = \"TESTING\";\n+        AccountingHierarchy accountingHierarchy = em.find(AccountingHierarchy.class, code);\n+        if (accountingHierarchy == null) {\n+            accountingHierarchy = new AccountingHierarchy();\n+            accountingHierarchy.setCode(code);\n+            accountingHierarchy.setShortDesc(\"TESTING\");\n+\n+            AccountingHierarchyRate accountingHierarchyRate =\n+                new AccountingHierarchyRate(\"1\", accountingHierarchy, BigDecimal.ONE, BigDecimal.TEN);\n+\n+            accountingHierarchy.getAccRateList().add(accountingHierarchyRate);\n+\n+            EntityTransaction tx = em.getTransaction();\n+            tx.begin();\n+            try {\n+                em.persist(accountingHierarchy);\n+            } catch (RuntimeException e) {\n+                tx.setRollbackOnly();\n+                throw e;\n+            } finally {\n+                if (tx.getRollbackOnly()) {\n+                    tx.rollback();\n+                } else {\n+                    tx.commit();\n+                }\n+            }\n+        }\n+\n+    }\n+}"}]}

