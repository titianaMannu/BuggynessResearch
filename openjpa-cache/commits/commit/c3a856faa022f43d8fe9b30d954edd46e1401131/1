{"sha":"c3a856faa022f43d8fe9b30d954edd46e1401131","node_id":"MDY6Q29tbWl0MjA2MzY0OmMzYTg1NmZhYTAyMmY0M2Q4ZmU5YjMwZDk1NGVkZDQ2ZTE0MDExMzE=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-11-19T15:12:36Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-11-19T15:12:36Z"},"message":"OPENJPA-1396: fix metadata-complete problem so that it will override @Transient annotation in the entity class\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@882172 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"fc6e6fa0885305cec22c1d23fdc22fbabcc3d770","url":"https://api.github.com/repos/apache/openjpa/git/trees/fc6e6fa0885305cec22c1d23fdc22fbabcc3d770"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/c3a856faa022f43d8fe9b30d954edd46e1401131","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/c3a856faa022f43d8fe9b30d954edd46e1401131","html_url":"https://github.com/apache/openjpa/commit/c3a856faa022f43d8fe9b30d954edd46e1401131","comments_url":"https://api.github.com/repos/apache/openjpa/commits/c3a856faa022f43d8fe9b30d954edd46e1401131/comments","author":null,"committer":null,"parents":[{"sha":"9f0b7abbeed20dcb4a9fae076e0b9aa50cbf6e64","url":"https://api.github.com/repos/apache/openjpa/commits/9f0b7abbeed20dcb4a9fae076e0b9aa50cbf6e64","html_url":"https://github.com/apache/openjpa/commit/9f0b7abbeed20dcb4a9fae076e0b9aa50cbf6e64"}],"stats":{"total":116,"additions":88,"deletions":28},"files":[{"sha":"c17f4408ad673612133379bc0e0af0839c3ea086","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractMetaDataDefaults.java","status":"modified","additions":10,"deletions":6,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/c3a856faa022f43d8fe9b30d954edd46e1401131/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractMetaDataDefaults.java","raw_url":"https://github.com/apache/openjpa/raw/c3a856faa022f43d8fe9b30d954edd46e1401131/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractMetaDataDefaults.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractMetaDataDefaults.java?ref=c3a856faa022f43d8fe9b30d954edd46e1401131","patch":"@@ -151,6 +151,10 @@ public void setIgnoreNonPersistent(boolean ignore) {\n     }\n \n     public void populate(ClassMetaData meta, int access) {\n+        populate(meta, access, false);\n+    }\n+    \n+    public void populate(ClassMetaData meta, int access, boolean ignoreTransient) {\n         if (meta.getDescribedType() == Object.class)\n             return;\n         meta.setAccessType(access);\n@@ -161,7 +165,7 @@ public void populate(ClassMetaData meta, int access) {\n         if (!_pcRegistry || !populateFromPCRegistry(meta)) {\n             if (log.isTraceEnabled())\n                 log.trace(_loc.get(\"meta-reflect\"));\n-            populateFromReflection(meta);\n+            populateFromReflection(meta, ignoreTransient);\n         }\n     }\n \n@@ -197,15 +201,15 @@ private boolean populateFromPCRegistry(ClassMetaData meta) {\n         }\n     }\n \n-    protected abstract List<Member> getPersistentMembers(ClassMetaData meta);\n+    protected abstract List<Member> getPersistentMembers(ClassMetaData meta, boolean ignoreTransient);\n     /**\n      * Generate the given meta-data using reflection.\n      * Adds FieldMetaData for each persistent state.\n      * Delegate to concrete implementation to determine the persistent\n      * members.\n      */\n-    private void populateFromReflection(ClassMetaData meta) {\n-        List<Member> members = getPersistentMembers(meta);\n+    private void populateFromReflection(ClassMetaData meta, boolean ignoreTransient) {\n+        List<Member> members = getPersistentMembers(meta, ignoreTransient);\n         boolean iface = meta.getDescribedType().isInterface();\n         // If access is mixed or if the default is currently unknown, \n         // process all fields, otherwise only process members of the class  \n@@ -220,7 +224,7 @@ private void populateFromReflection(ClassMetaData meta) {\n             if (name == null || isReservedFieldName(name))\n                 continue;\n \n-            def = isDefaultPersistent(meta, member, name);\n+            def = isDefaultPersistent(meta, member, name, ignoreTransient);\n             if (!def && _ignore)\n                 continue;\n \n@@ -311,7 +315,7 @@ protected boolean isReservedFieldName(String name) {\n      * @param name the field name from {@link #getFieldName}\n      */\n     protected abstract boolean isDefaultPersistent(ClassMetaData meta,\n-        Member member, String name);\n+        Member member, String name, boolean ignoreTransient);\n \n     /**\n      * Gets the backing member of the given field. If the field has not been"},{"sha":"48a633399bf40cfc508a66ee76c1a0449e7d8024","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataDefaults.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/c3a856faa022f43d8fe9b30d954edd46e1401131/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataDefaults.java","raw_url":"https://github.com/apache/openjpa/raw/c3a856faa022f43d8fe9b30d954edd46e1401131/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataDefaults.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataDefaults.java?ref=c3a856faa022f43d8fe9b30d954edd46e1401131","patch":"@@ -80,6 +80,13 @@\n      */\n     public void populate(ClassMetaData meta, int access);\n \n+    /**\n+     * Populate the given metadata with default settings.\n+     *\n+     * @param access access type constant from {@link ClassMetaData}\n+     */\n+    public void populate(ClassMetaData meta, int access, boolean ignoreTransient);\n+\n     /**\n      * Return the backing member for the given field metadata.\n      */"},{"sha":"572823a8c93a78b35de7c0eeef5482fc12af90ca","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","status":"modified","additions":12,"deletions":1,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/c3a856faa022f43d8fe9b30d954edd46e1401131/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","raw_url":"https://github.com/apache/openjpa/raw/c3a856faa022f43d8fe9b30d954edd46e1401131/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java?ref=c3a856faa022f43d8fe9b30d954edd46e1401131","patch":"@@ -889,11 +889,22 @@ public ClassMetaData addMetaData(Class<?> cls) {\n      *            the access type to use in populating metadata\n      */\n     public ClassMetaData addMetaData(Class<?> cls, int access) {\n+        return addMetaData(cls, access, false);\n+    }\n+    \n+    /**\n+     * Create a new metadata, populate it with default information, add it to the repository, and\n+     * return it.\n+     * \n+     * @param access\n+     *            the access type to use in populating metadata\n+     */\n+    public ClassMetaData addMetaData(Class<?> cls, int access, boolean ignoreTransient) {\n         if (cls == null || cls.isPrimitive())\n             return null;\n \n         ClassMetaData meta = newClassMetaData(cls);\n-        _factory.getDefaults().populate(meta, access);\n+        _factory.getDefaults().populate(meta, access, ignoreTransient);\n \n         // synchronize on this rather than the map, because all other methods\n         // that access _metas are synchronized on this"},{"sha":"e1f2da1561d267f585229fb995456b190fd87efa","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/NoneMetaDataFactory.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/c3a856faa022f43d8fe9b30d954edd46e1401131/openjpa-kernel/src/main/java/org/apache/openjpa/meta/NoneMetaDataFactory.java","raw_url":"https://github.com/apache/openjpa/raw/c3a856faa022f43d8fe9b30d954edd46e1401131/openjpa-kernel/src/main/java/org/apache/openjpa/meta/NoneMetaDataFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/NoneMetaDataFactory.java?ref=c3a856faa022f43d8fe9b30d954edd46e1401131","patch":"@@ -128,6 +128,9 @@ public boolean isDataStoreObjectIdFieldUnwrapped() {\n     public void populate(ClassMetaData meta, int access) {\n     }\n \n+    public void populate(ClassMetaData meta, int access, boolean ignoreTransient) {\n+    }\n+\n     public Member getBackingMember(FieldMetaData fmd) {\n         return null;\n     }"},{"sha":"d606390c6287caeeca4c47108616e54735630f02","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EmbedXml.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/c3a856faa022f43d8fe9b30d954edd46e1401131/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EmbedXml.java","raw_url":"https://github.com/apache/openjpa/raw/c3a856faa022f43d8fe9b30d954edd46e1401131/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EmbedXml.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EmbedXml.java?ref=c3a856faa022f43d8fe9b30d954edd46e1401131","patch":"@@ -19,13 +19,17 @@\n package org.apache.openjpa.persistence.embed;\n \n import javax.persistence.Embeddable;\n+import javax.persistence.Transient;\n \n+@Embeddable\n public class EmbedXml {\n     // owned by BasicA via Embed4\n     // can not contain a collection of basic types if BasicA contains \n     // a collection of Embed4 \n     protected int intVal1;\n     protected int intVal2;\n+    \n+    @Transient\n     protected int intVal3;\n     \n     public int getIntVal1() {"},{"sha":"2023f9e2bf20ba016abdbc4702ac31da06a31e49","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/embed/embed-orm.xml","status":"modified","additions":1,"deletions":7,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/c3a856faa022f43d8fe9b30d954edd46e1401131/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/embed/embed-orm.xml","raw_url":"https://github.com/apache/openjpa/raw/c3a856faa022f43d8fe9b30d954edd46e1401131/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/embed/embed-orm.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/embed/embed-orm.xml?ref=c3a856faa022f43d8fe9b30d954edd46e1401131","patch":"@@ -259,13 +259,7 @@ version=\"2.0\">\n \t</embeddable>\n \n \t<embeddable class=\"org.apache.openjpa.persistence.embed.EmbedXml\"\n-\t\taccess=\"FIELD\">\n-\t\t<attributes>\n-\t\t\t<basic name=\"intVal1\"></basic>\n-\t\t\t<basic name=\"intVal2\"></basic>\n-\t\t\t<basic name=\"intVal3\"></basic>\n-\t\t</attributes>\n-\t</embeddable>\n+\t\taccess=\"FIELD\"  metadata-complete=\"true\"/>\n \n     <embeddable class=\"org.apache.openjpa.persistence.embed.attrOverrides.BasicEmbedXML\">\n         <attributes>"},{"sha":"4808df8e437cf8f06fa190f469285c196b48d5b8","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataDefaults.java","status":"modified","additions":42,"deletions":13,"changes":55,"blob_url":"https://github.com/apache/openjpa/blob/c3a856faa022f43d8fe9b30d954edd46e1401131/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataDefaults.java","raw_url":"https://github.com/apache/openjpa/raw/c3a856faa022f43d8fe9b30d954edd46e1401131/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataDefaults.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataDefaults.java?ref=c3a856faa022f43d8fe9b30d954edd46e1401131","patch":"@@ -145,11 +145,20 @@ public PersistenceMetaDataDefaults() {\n      * no strategy.\n      */\n     public static PersistenceStrategy getPersistenceStrategy\n-        (FieldMetaData fmd, Member member) {\n+    (FieldMetaData fmd, Member member) {\n+        return getPersistenceStrategy(fmd, member, false);\n+    }\n+    \n+    /**\n+     * Return the code for the strategy of the given member. Return null if\n+     * no strategy.\n+     */\n+    public static PersistenceStrategy getPersistenceStrategy\n+        (FieldMetaData fmd, Member member, boolean ignoreTransient) {\n         if (member == null)\n             return null;\n         AnnotatedElement el = (AnnotatedElement) member;\n-        if ((AccessController.doPrivileged(J2DoPrivHelper\n+        if (!ignoreTransient && (AccessController.doPrivileged(J2DoPrivHelper\n             .isAnnotationPresentAction(el, Transient.class))).booleanValue())\n             return TRANSIENT;\n         if (fmd != null\n@@ -248,13 +257,26 @@ else if (\"FIELD\".equals(type.toUpperCase()))\n      */\n     @Override\n     public void populate(ClassMetaData meta, int access) {\n+        populate(meta, access, false);\n+    }\n+    \n+    /**\n+     * Populates the given class metadata. The access style determines which\n+     * field and/or getter method will contribute as the persistent property\n+     * of the given class. If the given access is unknown, then the access\n+     * type is to be determined at first. \n+     * \n+     * @see #determineAccessType(ClassMetaData)\n+     */\n+    @Override\n+    public void populate(ClassMetaData meta, int access, boolean ignoreTransient) {\n     \tif (AccessCode.isUnknown(access)) {\n     \t\taccess = determineAccessType(meta);\n     \t}\n     \tif (AccessCode.isUnknown(access)) {\n     \t\terror(meta, _loc.get(\"access-unknown\", meta));\n     \t}\n-        super.populate(meta, access);\n+        super.populate(meta, access, ignoreTransient);\n         meta.setDetachable(true);\n         // do not call get*Fields as it will lock down the fields.\n     }\n@@ -425,7 +447,7 @@ private int determineExplicitAccessType(Class<?> cls) {\n      * Gets the fields that are possible candidate for being persisted. The  \n      * result depends on the current access style of the given class. \n      */\n-    List<Field> getPersistentFields(ClassMetaData meta) {\n+    List<Field> getPersistentFields(ClassMetaData meta, boolean ignoreTransient) {\n     \tboolean explicit = meta.isExplicitAccess();\n     \tboolean unknown  = AccessCode.isUnknown(meta);\n     \tboolean isField  = AccessCode.isField(meta);\n@@ -434,7 +456,8 @@ private int determineExplicitAccessType(Class<?> cls) {\n     \t\tField[] fields = AccessController.doPrivileged(J2DoPrivHelper.\n                 getDeclaredFieldsAction(meta.getDescribedType()));\n     \t\t\n-        \treturn filter(fields, fieldFilter, nonTransientFilter, \n+        \treturn filter(fields, fieldFilter, \n+        \t    ignoreTransient ? null : nonTransientFilter, \n         \t\tunknown || isField  ? null : annotatedFilter, \n         \t    explicit ? (isField ? null : fieldAccessFilter) : null);\n     \t} \n@@ -445,7 +468,7 @@ private int determineExplicitAccessType(Class<?> cls) {\n      * Gets the methods that are possible candidate for being persisted. The  \n      * result depends on the current access style of the given class. \n      */\n-    List<Method> getPersistentMethods(ClassMetaData meta) {\n+    List<Method> getPersistentMethods(ClassMetaData meta, boolean ignoreTransient) {\n     \tboolean explicit = meta.isExplicitAccess();\n     \tboolean unknown  = AccessCode.isUnknown(meta.getAccessType());\n     \tboolean isProperty  = AccessCode.isProperty(meta.getAccessType());\n@@ -455,7 +478,8 @@ private int determineExplicitAccessType(Class<?> cls) {\n               J2DoPrivHelper.getDeclaredMethodsAction(meta.getDescribedType()));\n         \n     \t\tList<Method> getters = filter(publicMethods, methodFilter, \n-                getterFilter, nonTransientFilter, \n+                getterFilter, \n+                ignoreTransient ? null : nonTransientFilter, \n         \t\tunknown || isProperty ? null : annotatedFilter, \n                 explicit ? (isProperty ? null : propertyAccessFilter) : null);\n     \t\tList<Method> setters = filter(publicMethods, setterFilter);\n@@ -475,10 +499,10 @@ private int determineExplicitAccessType(Class<?> cls) {\n      * no access type set, this method will set it.\n      */\n     @Override\n-    public List<Member> getPersistentMembers(ClassMetaData meta) {\n+    public List<Member> getPersistentMembers(ClassMetaData meta, boolean ignoreTransient) {\n     \tList<Member> members = new ArrayList<Member>();\n-    \tList<Field> fields   = getPersistentFields(meta);\n-    \tList<Method> getters = getPersistentMethods(meta);\n+    \tList<Field> fields   = getPersistentFields(meta, ignoreTransient);\n+    \tList<Method> getters = getPersistentMethods(meta, ignoreTransient);\n     \t\n     \tboolean isMixed = !fields.isEmpty() && !getters.isEmpty();\n     \tboolean isEmpty = fields.isEmpty() && getters.isEmpty();\n@@ -532,16 +556,21 @@ void warn(ClassMetaData meta, Localizer.Message message) {\n     \n     @Override\n     protected List<String> getFieldAccessNames(ClassMetaData meta) {\n-    \treturn toNames(getPersistentFields(meta));\n+    \treturn toNames(getPersistentFields(meta, false));\n     }\n \n     @Override\n     protected List<String> getPropertyAccessNames(ClassMetaData meta) {\n-    \treturn toNames(getPersistentMethods(meta));\n+    \treturn toNames(getPersistentMethods(meta, false));\n     }\n \n     protected boolean isDefaultPersistent(ClassMetaData meta, Member member,\n         String name) {\n+        return isDefaultPersistent(meta, member, name, false);\n+    }\n+    \n+    protected boolean isDefaultPersistent(ClassMetaData meta, Member member,\n+        String name, boolean ignoreTransient) {\n         int mods = member.getModifiers();\n         if (Modifier.isTransient(mods))\n             return false;\n@@ -581,7 +610,7 @@ else if (member instanceof Method) {\n             }\n         }\n \n-        PersistenceStrategy strat = getPersistenceStrategy(null, member);\n+        PersistenceStrategy strat = getPersistenceStrategy(null, member, ignoreTransient);\n         if (strat == null || strat == PersistenceStrategy.TRANSIENT)\n             return false;\n         return true;"},{"sha":"72249601f004ba31d81b9546aacc5359f32d0f4a","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java","status":"modified","additions":9,"deletions":1,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/c3a856faa022f43d8fe9b30d954edd46e1401131/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/c3a856faa022f43d8fe9b30d954edd46e1401131/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java?ref=c3a856faa022f43d8fe9b30d954edd46e1401131","patch":"@@ -829,8 +829,10 @@ void resetAnnotationParser() {\n     @Override\n     protected boolean startClass(String elem, Attributes attrs)\n         throws SAXException {\n+        boolean metaDataComplete = false;\n         super.startClass(elem, attrs);\n         if (isMetaDataComplete(attrs)) {\n+            metaDataComplete = true;\n         \tsetAnnotationParser(null);\n         } else if (!_isXMLMappingMetaDataComplete){\n         \tresetAnnotationParser();\n@@ -874,7 +876,13 @@ protected boolean startClass(String elem, Attributes attrs)\n             // be UNKNOWN)\n             if (accessCode == AccessCode.UNKNOWN)\n                 accessCode = _access;\n-            meta = repos.addMetaData(_cls, accessCode);\n+            meta = repos.addMetaData(_cls, accessCode, metaDataComplete);\n+            FieldMetaData[] fmds = meta.getFields();\n+            if (metaDataComplete) {\n+                for (int i = 0; i < fmds.length; i++) {\n+                    fmds[i].setExplicit(true);\n+                }\n+            }\n             meta.setEnvClassLoader(_envLoader);\n             meta.setSourceMode(MODE_NONE);\n "}]}

