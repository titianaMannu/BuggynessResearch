{"sha":"c3c97f7cf3477d92d94e792e8aa8bdbb36991df3","node_id":"MDY6Q29tbWl0MjA2MzY0OmMzYzk3ZjdjZjM0NzdkOTJkOTRlNzkyZThhYThiZGJiMzY5OTFkZjM=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2010-10-27T20:55:00Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2010-10-27T20:55:00Z"},"message":"OPENJPA-1857: fix the exception to be thrown by OpenJPA when wrong JoinColumn annotation is specified.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1028095 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ff74bf8592a02fe1b420597673010ed80451bcc1","url":"https://api.github.com/repos/apache/openjpa/git/trees/ff74bf8592a02fe1b420597673010ed80451bcc1"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/c3c97f7cf3477d92d94e792e8aa8bdbb36991df3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/c3c97f7cf3477d92d94e792e8aa8bdbb36991df3","html_url":"https://github.com/apache/openjpa/commit/c3c97f7cf3477d92d94e792e8aa8bdbb36991df3","comments_url":"https://api.github.com/repos/apache/openjpa/commits/c3c97f7cf3477d92d94e792e8aa8bdbb36991df3/comments","author":null,"committer":null,"parents":[{"sha":"3f8bff4331e047a0cd7735129e8ad30adaed692e","url":"https://api.github.com/repos/apache/openjpa/commits/3f8bff4331e047a0cd7735129e8ad30adaed692e","html_url":"https://github.com/apache/openjpa/commit/3f8bff4331e047a0cd7735129e8ad30adaed692e"}],"stats":{"total":112,"additions":110,"deletions":2},"files":[{"sha":"1c63efdfac2e5c6f5c585fec06719a14c822d83c","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingInfo.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/c3c97f7cf3477d92d94e792e8aa8bdbb36991df3/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingInfo.java","raw_url":"https://github.com/apache/openjpa/raw/c3c97f7cf3477d92d94e792e8aa8bdbb36991df3/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingInfo.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingInfo.java?ref=c3c97f7cf3477d92d94e792e8aa8bdbb36991df3","patch":"@@ -1528,7 +1528,7 @@ else if (foreign.getColumn(name) != null) {\n         Column tmplate = new Column();\n         tmplate.setIdentifier(name);\n         if (!constant) {\n-            Column tcol = foreign.getColumn(targetName);\n+            Column tcol = foreign.getColumn(targetName, false); \n             if (tcol == null)\n                 throw new MetaDataException(_loc.get(prefix + \"-bad-fktarget\",\n                     new Object[]{ context, targetName, name, foreign }));"},{"sha":"8a93c4d2141b86c51756911677d85bc89938b71c","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/DynamicSchemaFactory.java","status":"modified","additions":9,"deletions":1,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/c3c97f7cf3477d92d94e792e8aa8bdbb36991df3/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/DynamicSchemaFactory.java","raw_url":"https://github.com/apache/openjpa/raw/c3c97f7cf3477d92d94e792e8aa8bdbb36991df3/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/DynamicSchemaFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/DynamicSchemaFactory.java?ref=c3c97f7cf3477d92d94e792e8aa8bdbb36991df3","patch":"@@ -158,6 +158,10 @@ public Column getColumn(String name) {\n             return getColumn(name, null);\n         }\n \n+        public Column getColumn(DBIdentifier name, boolean create) {\n+            return getColumn(name, null, create);\n+        }\n+\n         public Column getColumn(DBIdentifier name) {\n             return getColumn(name, null);\n         }\n@@ -172,11 +176,15 @@ public Column getColumn(String name, DBDictionary dict) {\n         }\n \n         public Column getColumn(DBIdentifier name, DBDictionary dict) {\n+            return getColumn(name, dict, true);\n+        }\n+        \n+        public Column getColumn(DBIdentifier name, DBDictionary dict, boolean create) {\n             if (DBIdentifier.isNull(name))\n                 return null;\n \n             Column col = super.getColumn(name);\n-            if (col != null)\n+            if (col != null || !create)\n                 return col;\n \n             // Ensure only valid column name(s) are added to the table"},{"sha":"8400993dc294908799f91603bdf22bd72aa5bd4d","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Table.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/c3c97f7cf3477d92d94e792e8aa8bdbb36991df3/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Table.java","raw_url":"https://github.com/apache/openjpa/raw/c3c97f7cf3477d92d94e792e8aa8bdbb36991df3/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Table.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Table.java?ref=c3c97f7cf3477d92d94e792e8aa8bdbb36991df3","patch":"@@ -322,6 +322,9 @@ public Column getColumn(DBIdentifier name) {\n         return _colMap.get(DBIdentifier.toUpper(name));\n     }\n \n+    public Column getColumn(DBIdentifier name, boolean create) {\n+        return getColumn(name);\n+    }\n     \n     /**\n      * Affirms if this table contains the column of the given name without any "},{"sha":"15633d678412a7725a1813c01e8c59351cb21be7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Dependent5a.java","status":"added","additions":49,"deletions":0,"changes":49,"blob_url":"https://github.com/apache/openjpa/blob/c3c97f7cf3477d92d94e792e8aa8bdbb36991df3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Dependent5a.java","raw_url":"https://github.com/apache/openjpa/raw/c3c97f7cf3477d92d94e792e8aa8bdbb36991df3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Dependent5a.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Dependent5a.java?ref=c3c97f7cf3477d92d94e792e8aa8bdbb36991df3","patch":"@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.enhance.identity;\n+import java.io.Serializable;\n+\n+import javax.persistence.*;\n+\n+@Entity\n+@IdClass(DependentId5.class)\n+public class Dependent5a implements Serializable {\n+\n+    private static final long serialVersionUID = 1L;\n+    @Id\n+    String name;\n+    \n+    @Id\n+    @JoinColumns({\n+       @JoinColumn(name=\"FIRSTNAME\", referencedColumnName=\"xFIRSTNAME\"),\n+       @JoinColumn(name=\"LASTNAME\", referencedColumnName=\"yLASTNAME\")\n+    })\n+    @ManyToOne\n+    Employee5 emp;\n+\n+    public Dependent5a(String name, Employee5 emp) {\n+        this.name = name;\n+        this.emp = emp;\n+    }\n+\n+    public Dependent5a(DependentId5 dId, Employee5 emp){\n+        this.name = dId.getName();\n+        this.emp = emp;\n+    } \n+}"},{"sha":"bac66b1c037ffb64114bdb2d44ec35050f70853c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/TestDerivedIdentity.java","status":"added","additions":48,"deletions":0,"changes":48,"blob_url":"https://github.com/apache/openjpa/blob/c3c97f7cf3477d92d94e792e8aa8bdbb36991df3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/TestDerivedIdentity.java","raw_url":"https://github.com/apache/openjpa/raw/c3c97f7cf3477d92d94e792e8aa8bdbb36991df3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/TestDerivedIdentity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/TestDerivedIdentity.java?ref=c3c97f7cf3477d92d94e792e8aa8bdbb36991df3","patch":"@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.enhance.identity;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.ArgumentException;\n+import org.apache.openjpa.persistence.PersistenceException;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+public class TestDerivedIdentity extends SingleEMFTestCase {\n+    public void setUp() throws Exception {\n+        super.setUp(DROP_TABLES, Dependent5a.class, Employee5.class, EmployeeId5.class);\n+    }\n+\n+    public void testIncorrectJoinColumnAnnotation() {\n+        try {\n+            EntityManager em = emf.createEntityManager();\n+            em.getTransaction().begin();\n+            em.getTransaction().commit();\n+        } catch (PersistenceException e) {\n+            fail(\"Wrong exception\");\n+        } catch (ArgumentException e) {\n+            //Correct exception is thrown:\n+            //\"org.apache.openjpa.persistence.enhance.identity.Dependent5a.emp\" defines a target of \"xFIRSTNAME\" \n+            //for column \"FIRSTNAME\", but that target does not exist in table \"Employee5\".\n+        }\n+        \n+        \n+    }\n+\n+}"}]}

