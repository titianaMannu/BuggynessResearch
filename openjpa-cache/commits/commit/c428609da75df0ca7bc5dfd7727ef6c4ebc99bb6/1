{"sha":"c428609da75df0ca7bc5dfd7727ef6c4ebc99bb6","node_id":"MDY6Q29tbWl0MjA2MzY0OmM0Mjg2MDlkYTc1ZGYwY2E3YmM1ZGZkNzcyN2VmNmM0ZWJjOTliYjY=","commit":{"author":{"name":"Mark Struberg","email":"struberg@apache.org","date":"2013-10-25T15:13:10Z"},"committer":{"name":"Mark Struberg","email":"struberg@apache.org","date":"2013-10-25T15:13:10Z"},"message":"OPENJPA-2018 correctly handle select IN with arrays\n\ntxs to rmannibucau for the patch.\nApplied with minor changes\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1535760 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b6ec63c056f46e15fd327751ee6aebf026514f48","url":"https://api.github.com/repos/apache/openjpa/git/trees/b6ec63c056f46e15fd327751ee6aebf026514f48"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/c428609da75df0ca7bc5dfd7727ef6c4ebc99bb6","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/c428609da75df0ca7bc5dfd7727ef6c4ebc99bb6","html_url":"https://github.com/apache/openjpa/commit/c428609da75df0ca7bc5dfd7727ef6c4ebc99bb6","comments_url":"https://api.github.com/repos/apache/openjpa/commits/c428609da75df0ca7bc5dfd7727ef6c4ebc99bb6/comments","author":{"login":"struberg","id":79310,"node_id":"MDQ6VXNlcjc5MzEw","avatar_url":"https://avatars.githubusercontent.com/u/79310?v=4","gravatar_id":"","url":"https://api.github.com/users/struberg","html_url":"https://github.com/struberg","followers_url":"https://api.github.com/users/struberg/followers","following_url":"https://api.github.com/users/struberg/following{/other_user}","gists_url":"https://api.github.com/users/struberg/gists{/gist_id}","starred_url":"https://api.github.com/users/struberg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/struberg/subscriptions","organizations_url":"https://api.github.com/users/struberg/orgs","repos_url":"https://api.github.com/users/struberg/repos","events_url":"https://api.github.com/users/struberg/events{/privacy}","received_events_url":"https://api.github.com/users/struberg/received_events","type":"User","site_admin":false},"committer":{"login":"struberg","id":79310,"node_id":"MDQ6VXNlcjc5MzEw","avatar_url":"https://avatars.githubusercontent.com/u/79310?v=4","gravatar_id":"","url":"https://api.github.com/users/struberg","html_url":"https://github.com/struberg","followers_url":"https://api.github.com/users/struberg/followers","following_url":"https://api.github.com/users/struberg/following{/other_user}","gists_url":"https://api.github.com/users/struberg/gists{/gist_id}","starred_url":"https://api.github.com/users/struberg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/struberg/subscriptions","organizations_url":"https://api.github.com/users/struberg/orgs","repos_url":"https://api.github.com/users/struberg/repos","events_url":"https://api.github.com/users/struberg/events{/privacy}","received_events_url":"https://api.github.com/users/struberg/received_events","type":"User","site_admin":false},"parents":[{"sha":"fef5615e5326e76820d7bfa79de8fb2d6324acaa","url":"https://api.github.com/repos/apache/openjpa/commits/fef5615e5326e76820d7bfa79de8fb2d6324acaa","html_url":"https://github.com/apache/openjpa/commit/fef5615e5326e76820d7bfa79de8fb2d6324acaa"}],"stats":{"total":293,"additions":273,"deletions":20},"files":[{"sha":"87ff2564f4676d7f88808c8e4230edaa08dad077","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/openjpa2018/OpenJPA2018Test.java","status":"added","additions":119,"deletions":0,"changes":119,"blob_url":"https://github.com/apache/openjpa/blob/c428609da75df0ca7bc5dfd7727ef6c4ebc99bb6/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/openjpa2018/OpenJPA2018Test.java","raw_url":"https://github.com/apache/openjpa/raw/c428609da75df0ca7bc5dfd7727ef6c4ebc99bb6/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/openjpa2018/OpenJPA2018Test.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/openjpa2018/OpenJPA2018Test.java?ref=c428609da75df0ca7bc5dfd7727ef6c4ebc99bb6","patch":"@@ -0,0 +1,119 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.openjpa2018;\n+\n+import junit.framework.TestCase;\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import javax.persistence.EntityTransaction;\n+import javax.persistence.TypedQuery;\n+import javax.persistence.criteria.CriteriaBuilder;\n+import javax.persistence.criteria.CriteriaQuery;\n+import javax.persistence.criteria.ParameterExpression;\n+import javax.persistence.criteria.Root;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+\n+public class OpenJPA2018Test extends TestCase {\n+    private EntityManager em;\n+    private EntityTransaction transaction;\n+    private EntityManagerFactory factory;\n+\n+    @Override\n+    public void setUp() {\n+        factory = OpenJPAPersistence.createEntityManagerFactory(\"openjpa2018\", \"META-INF/openjpa2018.xml\");\n+        em = factory.createEntityManager();\n+        transaction = em.getTransaction();\n+        transaction.begin();\n+    }\n+\n+    @Override\n+    public void tearDown() {\n+        transaction.rollback();\n+        em.close();\n+        factory.close();\n+    }\n+\n+    public void testInCriteriaWithArray() {\n+\n+        User2018 user = new User2018();\n+        em.persist(user);\n+        em.flush();\n+\n+        CriteriaBuilder builder = em.getCriteriaBuilder();\n+\n+        CriteriaQuery<User2018> criteria = builder.createQuery(User2018.class);\n+        Root<User2018> root = criteria.from(User2018.class);\n+        criteria.where(root.get(\"id\").in(builder.parameter(Long[].class)));\n+\n+        TypedQuery<User2018> query = em.createQuery(criteria);\n+        for (ParameterExpression parameter : criteria.getParameters()) {\n+            query.setParameter(parameter, new Long[] { user.id });\n+        }\n+\n+        List<User2018> result = query.getResultList();\n+        assertTrue(!result.isEmpty());\n+    }\n+\n+    public void testInCriteriaWithCollection() {\n+\n+        User2018 user = new User2018();\n+        em.persist(user);\n+        em.flush();\n+\n+        CriteriaBuilder builder = em.getCriteriaBuilder();\n+\n+        CriteriaQuery<User2018> criteria = builder.createQuery(User2018.class);\n+        Root<User2018> root = criteria.from(User2018.class);\n+        criteria.where(root.get(\"id\").in(builder.parameter(Collection.class)));\n+\n+        TypedQuery<User2018> query = em.createQuery(criteria);\n+        for (ParameterExpression parameter : criteria.getParameters()) {\n+            query.setParameter(parameter, Arrays.asList(user.id));\n+        }\n+\n+        List<User2018> result = query.getResultList();\n+        assertTrue(!result.isEmpty());\n+    }\n+\n+    public void testId() {\n+\n+        User2018 user = new User2018();\n+        em.persist(user);\n+        em.flush();\n+\n+        CriteriaBuilder builder = em.getCriteriaBuilder();\n+\n+        CriteriaQuery<User2018> criteria = builder.createQuery(User2018.class);\n+        Root<User2018> root = criteria.from(User2018.class);\n+        criteria.where(builder.equal(root.get(\"id\"), user.id));\n+\n+        TypedQuery<User2018> query = em.createQuery(criteria);\n+        for (ParameterExpression parameter : criteria.getParameters()) {\n+            query.setParameter(parameter, user.id);\n+        }\n+\n+        List<User2018> result = query.getResultList();\n+        assertTrue(!result.isEmpty());\n+    }\n+\n+}"},{"sha":"18f988e5baf3e0adc9e5decb7ac463c23d9deb53","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/openjpa2018/User2018.java","status":"added","additions":30,"deletions":0,"changes":30,"blob_url":"https://github.com/apache/openjpa/blob/c428609da75df0ca7bc5dfd7727ef6c4ebc99bb6/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/openjpa2018/User2018.java","raw_url":"https://github.com/apache/openjpa/raw/c428609da75df0ca7bc5dfd7727ef6c4ebc99bb6/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/openjpa2018/User2018.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/openjpa2018/User2018.java?ref=c428609da75df0ca7bc5dfd7727ef6c4ebc99bb6","patch":"@@ -0,0 +1,30 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.openjpa2018;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+\n+@Entity\n+public class User2018 {\n+\n+    @Id @GeneratedValue Long id;\n+}\n+"},{"sha":"384801970e0fdc728adad0374682edf0667abc9e","filename":"openjpa-persistence-jdbc/src/test/resources/META-INF/openjpa2018.xml","status":"added","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/apache/openjpa/blob/c428609da75df0ca7bc5dfd7727ef6c4ebc99bb6/openjpa-persistence-jdbc/src/test/resources/META-INF/openjpa2018.xml","raw_url":"https://github.com/apache/openjpa/raw/c428609da75df0ca7bc5dfd7727ef6c4ebc99bb6/openjpa-persistence-jdbc/src/test/resources/META-INF/openjpa2018.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/META-INF/openjpa2018.xml?ref=c428609da75df0ca7bc5dfd7727ef6c4ebc99bb6","patch":"@@ -0,0 +1,33 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+\n+ http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.\n+-->\n+<persistence version=\"2.0\" xmlns=\"http://java.sun.com/xml/ns/persistence\"\n+             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+             xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd\">\n+  <persistence-unit name=\"openjpa2018\">\n+    <provider>org.apache.openjpa.persistence.PersistenceProviderImpl</provider>\n+    <class>org.apache.openjpa.openjpa2018.User2018</class>\n+    <properties>\n+      <property name=\"openjpa.ConnectionDriverName\" value=\"org.apache.derby.jdbc.EmbeddedDriver\"/>\n+      <property name=\"openjpa.ConnectionURL\" value=\"jdbc:derby:memory:openjpa2018;create=true\"/>\n+      <property name=\"openjpa.jdbc.SynchronizeMappings\" value=\"buildSchema(ForeignKeys=true)\"/>\n+      <property name=\"openjpa.RuntimeUnenhancedClasses\" value=\"supported\"/>\n+    </properties>\n+  </persistence-unit>\n+</persistence>"},{"sha":"66797964d19e13cba2799fe5bacc86f3789928b8","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AbstractQuery.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/c428609da75df0ca7bc5dfd7727ef6c4ebc99bb6/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AbstractQuery.java","raw_url":"https://github.com/apache/openjpa/raw/c428609da75df0ca7bc5dfd7727ef6c4ebc99bb6/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AbstractQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AbstractQuery.java?ref=c428609da75df0ca7bc5dfd7727ef6c4ebc99bb6","patch":"@@ -39,6 +39,7 @@\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.lib.util.OrderedMap;\n import org.apache.openjpa.meta.QueryMetaData;\n+import org.apache.openjpa.persistence.criteria.BindableParameter;\n \n /**\n  * An abstract implementation of the Query interface.\n@@ -345,7 +346,10 @@ void clearBinding() {\n     }\n \n     public <T> OpenJPAQuery<X> setParameter(Parameter<T> p, T arg1) {\n-        bindValue((Parameter<T>) p, arg1);\n+        bindValue(p, arg1);\n+        if (BindableParameter.class.isInstance(p)) {\n+            BindableParameter.class.cast(p).setValue(arg1);\n+        }\n         return this;\n     }\n "},{"sha":"a0b6e90c0e96d507156d7c877aa83b1c77938073","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/BindableParameter.java","status":"added","additions":24,"deletions":0,"changes":24,"blob_url":"https://github.com/apache/openjpa/blob/c428609da75df0ca7bc5dfd7727ef6c4ebc99bb6/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/BindableParameter.java","raw_url":"https://github.com/apache/openjpa/raw/c428609da75df0ca7bc5dfd7727ef6c4ebc99bb6/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/BindableParameter.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/BindableParameter.java?ref=c428609da75df0ca7bc5dfd7727ef6c4ebc99bb6","patch":"@@ -0,0 +1,24 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.criteria;\n+\n+public interface BindableParameter {\n+    void setValue(Object value);\n+    Object value();\n+}"},{"sha":"98b4176c40411cb9daa6cdb9371202530259e073","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/Expressions.java","status":"modified","additions":42,"deletions":10,"changes":52,"blob_url":"https://github.com/apache/openjpa/blob/c428609da75df0ca7bc5dfd7727ef6c4ebc99bb6/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/Expressions.java","raw_url":"https://github.com/apache/openjpa/raw/c428609da75df0ca7bc5dfd7727ef6c4ebc99bb6/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/Expressions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/Expressions.java?ref=c428609da75df0ca7bc5dfd7727ef6c4ebc99bb6","patch":"@@ -19,6 +19,8 @@\n \n package org.apache.openjpa.persistence.criteria;\n \n+import java.lang.reflect.Array;\n+import java.lang.reflect.ParameterizedType;\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.HashSet;\n@@ -1446,17 +1448,47 @@ public PredicateImpl not() {\n                 Expressions.Equal e = (Expressions.Equal)_exps.get(0);\n                 ExpressionImpl<?> e2 = e.e2;\n                 ExpressionImpl<?> e1 = e.e1;\n-                Value val2 = Expressions.toValue(e2, factory, q);\n-                if (!(val2 instanceof Literal)) {\n-                    Value val1 = Expressions.toValue(e1, factory, q);\n-                    Expressions.setImplicitTypes(val1, val2, e1.getJavaType(), q);\n-                    inExpr = factory.contains(val2, val1);\n-                    return isNegated() ? factory.not(inExpr) : inExpr;\n-                } else if (((Literal)val2).getParseType() == Literal.TYPE_COLLECTION) {\n-                    Collection coll = (Collection)((Literal)val2).getValue();\n+\n+                Class<?> e1JavaType = e1.getJavaType();\n+                Class<?> e2jt = e2.getJavaType();\n+\n+                // array\n+                if (BindableParameter.class.isInstance(e2) && BindableParameter.class.cast(e2).value() != null &&\n+                    ((e2jt.isArray() && e2jt.getComponentType().equals(e1JavaType))\n+                    || (Class.class.isInstance(e2jt) ||\n+                        (ParameterizedType.class.isInstance(e2jt)\n+                            && ParameterizedType.class.cast(e2jt).getActualTypeArguments().length > 0\n+                            && e1JavaType.equals(ParameterizedType.class.cast(e2jt).getActualTypeArguments()[0]))))) {\n+                    final BindableParameter bp = BindableParameter.class.cast(e2);\n+                    final Object value = bp.value();\n+\n                     _exps.clear();\n-                    for (Object v : coll) {\n-                        add(new Expressions.Equal(e1,v));\n+                    if (value == null) {\n+                        add(new Expressions.Equal(e1, null));\n+                    } else if (value.getClass().isArray()) {\n+                        final int len = Array.getLength(value);\n+                        for (int i = 0; i < len; i++) {\n+                            add(new Expressions.Equal(e1, Array.get(value, i)));\n+                        }\n+                    } else if (Collection.class.isInstance(value)) {\n+                        for (final Object item : Collection.class.cast(value)) {\n+                            add(new Expressions.Equal(e1, item));\n+                        }\n+                    }\n+                } else {\n+                    // normal case\n+                    Value val2 = Expressions.toValue(e2, factory, q);\n+                    if (!(val2 instanceof Literal)) {\n+                        Value val1 = Expressions.toValue(e1, factory, q);\n+                        Expressions.setImplicitTypes(val1, val2, e1.getJavaType(), q);\n+                        inExpr = factory.contains(val2, val1);\n+                        return isNegated() ? factory.not(inExpr) : inExpr;\n+                    } else if (((Literal)val2).getParseType() == Literal.TYPE_COLLECTION) {\n+                        Collection coll = (Collection)((Literal)val2).getValue();\n+                        _exps.clear();\n+                        for (Object v : coll) {\n+                            add(new Expressions.Equal(e1,v));\n+                        }\n                     }\n                 }\n             } "},{"sha":"23d1e37c9b875b4c613e82c938511817c69b71ac","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/ParameterExpressionImpl.java","status":"modified","additions":20,"deletions":9,"changes":29,"blob_url":"https://github.com/apache/openjpa/blob/c428609da75df0ca7bc5dfd7727ef6c4ebc99bb6/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/ParameterExpressionImpl.java","raw_url":"https://github.com/apache/openjpa/raw/c428609da75df0ca7bc5dfd7727ef6c4ebc99bb6/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/ParameterExpressionImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/ParameterExpressionImpl.java?ref=c428609da75df0ca7bc5dfd7727ef6c4ebc99bb6","patch":"@@ -39,16 +39,17 @@\n  * @param <T> the type of value held by this parameter.\n  */\n class ParameterExpressionImpl<T> extends ExpressionImpl<T> \n-    implements ParameterExpression<T> {\n+    implements ParameterExpression<T>, BindableParameter {\n     private String _name;\n     private int _index = 0; // index of the parameter as seen by the kernel, not position\n-\t\n-\t/**\n-\t * Construct a Parameter of given expected value type and name.\n-\t * \n-\t * @param cls expected value type\n-\t * @param name name of the parameter which can be null.\n-\t */\n+    private Object value;\n+\n+    /**\n+     * Construct a Parameter of given expected value type and name.\n+     *\n+     * @param cls expected value type\n+     * @param name name of the parameter which can be null.\n+     */\n     public ParameterExpressionImpl(Class<T> cls, String name) {\n         super(cls);\n         if (name != null)\n@@ -84,7 +85,17 @@ public String toString() {\n \n         return buf.toString();\n     }\n-    \n+\n+    @Override\n+    public void setValue(Object value) {\n+        this.value = value;\n+    }\n+\n+    @Override\n+    public Object value() {\n+        return value;\n+    }\n+\n     @Override\n     public Value toValue(ExpressionFactory factory, CriteriaQueryImpl<?> q) {\n         Class<?> clzz = getJavaType();"}]}

