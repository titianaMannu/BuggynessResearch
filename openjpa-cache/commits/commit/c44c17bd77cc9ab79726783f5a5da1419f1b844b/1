{"sha":"c44c17bd77cc9ab79726783f5a5da1419f1b844b","node_id":"MDY6Q29tbWl0MjA2MzY0OmM0NGMxN2JkNzdjYzlhYjc5NzI2NzgzZjVhNWRhMTQxOWYxYjg0NGI=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-17T17:13:48Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-17T17:13:48Z"},"message":"Add error messages for attribute not found exceptions.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@881381 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c64d7c6266f4b23e848387f0cdf251f44b582eb5","url":"https://api.github.com/repos/apache/openjpa/git/trees/c64d7c6266f4b23e848387f0cdf251f44b582eb5"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/c44c17bd77cc9ab79726783f5a5da1419f1b844b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/c44c17bd77cc9ab79726783f5a5da1419f1b844b","html_url":"https://github.com/apache/openjpa/commit/c44c17bd77cc9ab79726783f5a5da1419f1b844b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/c44c17bd77cc9ab79726783f5a5da1419f1b844b/comments","author":null,"committer":null,"parents":[{"sha":"fb82c6ad138638358017b9516f3340bf1a75e4fe","url":"https://api.github.com/repos/apache/openjpa/commits/fb82c6ad138638358017b9516f3340bf1a75e4fe","html_url":"https://github.com/apache/openjpa/commit/fb82c6ad138638358017b9516f3340bf1a75e4fe"}],"stats":{"total":75,"additions":75,"deletions":0},"files":[{"sha":"15ad085e9e7c3cf89e6d64f1ddcc55ac2e28d59f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestMetamodel.java","status":"modified","additions":62,"deletions":0,"changes":62,"blob_url":"https://github.com/apache/openjpa/blob/c44c17bd77cc9ab79726783f5a5da1419f1b844b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestMetamodel.java","raw_url":"https://github.com/apache/openjpa/raw/c44c17bd77cc9ab79726783f5a5da1419f1b844b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestMetamodel.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestMetamodel.java?ref=c44c17bd77cc9ab79726783f5a5da1419f1b844b","patch":"@@ -20,6 +20,8 @@\n package org.apache.openjpa.persistence.meta;\n \n import java.lang.reflect.Field;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n import java.lang.reflect.Modifier;\n \n import javax.persistence.metamodel.Attribute;\n@@ -311,6 +313,66 @@ public void testBasicAttributeType() {\n         assertEquals(PersistentAttributeType.BASIC, pInt.getPersistentAttributeType());\n     }\n     \n+    public void testNotFoundErrorMessage() {\n+        IdentifiableType<ImplicitFieldAccessBase> e0 = featureSelection.entity(ImplicitFieldAccessBase.class);\n+        String name = \"unknown\";\n+        try {\n+          Method[] getters = {\n+            e0.getClass().getMethod(\"getAttribute\",          new Class<?>[]{String.class}),\n+            e0.getClass().getMethod(\"getCollection\",         new Class<?>[]{String.class}),\n+            e0.getClass().getMethod(\"getList\",               new Class<?>[]{String.class}),\n+            e0.getClass().getMethod(\"getSet\",                new Class<?>[]{String.class}),\n+            e0.getClass().getMethod(\"getSingularAttribute\",  new Class<?>[]{String.class}),\n+            \n+            e0.getClass().getMethod(\"getDeclaredAttribute\",  new Class<?>[]{String.class}),\n+            e0.getClass().getMethod(\"getDeclaredCollection\", new Class<?>[]{String.class}),\n+            e0.getClass().getMethod(\"getDeclaredList\",       new Class<?>[]{String.class}),\n+            e0.getClass().getMethod(\"getDeclaredSet\",        new Class<?>[]{String.class}),\n+            e0.getClass().getMethod(\"getDeclaredSingularAttribute\", new Class<?>[]{String.class}),\n+            \n+            e0.getClass().getMethod(\"getAttribute\",          new Class<?>[]{String.class, Class.class}),\n+            e0.getClass().getMethod(\"getCollection\",         new Class<?>[]{String.class, Class.class}),\n+            e0.getClass().getMethod(\"getList\",               new Class<?>[]{String.class, Class.class}),\n+            e0.getClass().getMethod(\"getSet\",                new Class<?>[]{String.class, Class.class}),\n+            e0.getClass().getMethod(\"getSingularAttribute\",  new Class<?>[]{String.class, Class.class}),\n+            \n+            e0.getClass().getMethod(\"getDeclaredAttribute\",  new Class<?>[]{String.class, Class.class}),\n+            e0.getClass().getMethod(\"getDeclaredCollection\", new Class<?>[]{String.class, Class.class}),\n+            e0.getClass().getMethod(\"getDeclaredList\",       new Class<?>[]{String.class, Class.class}),\n+            e0.getClass().getMethod(\"getDeclaredSet\",        new Class<?>[]{String.class, Class.class}),\n+            e0.getClass().getMethod(\"getDeclaredSingularAttribute\", new Class<?>[]{String.class, Class.class}),\n+\n+            e0.getClass().getMethod(\"getMap\",          new Class<?>[]{String.class}),\n+            e0.getClass().getMethod(\"getMap\",          new Class<?>[]{String.class, Class.class, Class.class}),\n+            e0.getClass().getMethod(\"getDeclaredMap\",  new Class<?>[]{String.class}),\n+            e0.getClass().getMethod(\"getDeclaredMap\",  new Class<?>[]{String.class, Class.class, Class.class}),\n+          };\n+//                 e0.getClass().getMethod(\"getDeclaredVersion\", new Class<?>[]{Class.class}),\n+        \n+        for (int i = 0; i < getters.length; i++) {\n+            Object[] args;\n+            if (i < 10) {\n+                args = new Object[]{name};\n+            } else if (i < 20) {\n+                args = new Object[]{name, Object.class};\n+            } else if (i%2 == 0) {\n+                args = new Object[]{name};\n+            } else {\n+                args = new Object[]{name, Object.class, String.class};\n+            }\n+            try {\n+                getters[i].invoke(e0, args);\n+                fail();\n+            }  catch (InvocationTargetException e) {\n+               System.err.println(\"Expeceted:\" + e.getTargetException());\n+            }\n+        }\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+            fail();\n+        }\n+    }\n+    \n     void assertFails(ManagedType<?> type, String name, boolean dec) {\n         try {\n             Attribute<?,?> a = dec ? type.getDeclaredAttribute(name) "},{"sha":"abc1051a520b2ba9aea14060878297f2be7eafe4","filename":"openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/meta/localizer.properties","status":"modified","additions":13,"deletions":0,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/c44c17bd77cc9ab79726783f5a5da1419f1b844b/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/meta/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/c44c17bd77cc9ab79726783f5a5da1419f1b844b/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/meta/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/meta/localizer.properties?ref=c44c17bd77cc9ab79726783f5a5da1419f1b844b","patch":"@@ -67,3 +67,16 @@ mmg-asl-header: Licensed to the Apache Software Foundation (ASF) under one \\\n \tWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. \\\n \tSee the License for the specific language governing permissions and \\\n \tlimitations under the License.\n+attr-not-found: Attribute \"{0}\" of {1} not found in {2}\n+attr-not-found-single: Singular attribute \"{0}\" of {1} type not found in {2}\n+attr-not-found-decl-single: Declared singular attribute \"{0}\" of {1} type not found in {2}\n+attr-not-found-coll: Collection attribute \"{0}\" of {1} element type not found in {2}\n+attr-not-found-decl-coll: Declared Collection attribute \"{0}\" of {1} element type not found in {2}\n+attr-not-found-list: List attribute \"{0}\" of {1} element type not found in {2}\n+attr-not-found-decl-list: Declared List attribute \"{0}\" of {1} element type not found in {2}\n+attr-not-found-set: Set attribute \"{0}\" of {1} element type not found in {2}\n+attr-not-found-decl-set: Declared Set attribute \"{0}\" of {1} element type not found in {2}\n+attr-not-found-map: Map attribute \"{0}\" of {1} key type and {2} value type not found in {3}\n+attr-not-found-decl-map: Declared Map attribute \"{0}\" of {1} key type and {2} value type not found in {3}\n+decl-version-not-found: Declared version attribute of {1} type not found in {2} \n+version-not-found: Version attribute of {1} type not found in {2}\n\\ No newline at end of file"}]}

