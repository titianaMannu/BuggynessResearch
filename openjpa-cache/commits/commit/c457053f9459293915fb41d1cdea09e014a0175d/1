{"sha":"c457053f9459293915fb41d1cdea09e014a0175d","node_id":"MDY6Q29tbWl0MjA2MzY0OmM0NTcwNTNmOTQ1OTI5MzkxNWZiNDFkMWNkZWEwOWUwMTRhMDE3NWQ=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-02-16T22:03:25Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-02-16T22:03:25Z"},"message":"OPENJPA-515 Remove XA transaction across slices + test configuration for Derby + activate tests\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@628387 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"23d11fa4c2f212cb08dc3f811fb60190e847568c","url":"https://api.github.com/repos/apache/openjpa/git/trees/23d11fa4c2f212cb08dc3f811fb60190e847568c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/c457053f9459293915fb41d1cdea09e014a0175d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/c457053f9459293915fb41d1cdea09e014a0175d","html_url":"https://github.com/apache/openjpa/commit/c457053f9459293915fb41d1cdea09e014a0175d","comments_url":"https://api.github.com/repos/apache/openjpa/commits/c457053f9459293915fb41d1cdea09e014a0175d/comments","author":null,"committer":null,"parents":[{"sha":"de8a4760c8b7df2186cd831733b8fdc095dbc736","url":"https://api.github.com/repos/apache/openjpa/commits/de8a4760c8b7df2186cd831733b8fdc095dbc736","html_url":"https://github.com/apache/openjpa/commit/de8a4760c8b7df2186cd831733b8fdc095dbc736"}],"stats":{"total":1925,"additions":440,"deletions":1485},"files":[{"sha":"072eb6889ed371889dbe1c308155616f28f7bab2","filename":"openjpa-slice/pom.xml","status":"modified","additions":167,"deletions":159,"changes":326,"blob_url":"https://github.com/apache/openjpa/blob/c457053f9459293915fb41d1cdea09e014a0175d/openjpa-slice/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/c457053f9459293915fb41d1cdea09e014a0175d/openjpa-slice/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/pom.xml?ref=c457053f9459293915fb41d1cdea09e014a0175d","patch":"@@ -1,164 +1,172 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n <!--\r\n- Licensed to the Apache Software Foundation (ASF) under one\r\n- or more contributor license agreements.  See the NOTICE file\r\n- distributed with this work for additional information\r\n- regarding copyright ownership.  The ASF licenses this file\r\n- to you under the Apache License, Version 2.0 (the\r\n- \"License\"); you may not use this file except in compliance\r\n- with the License.  You may obtain a copy of the License at\r\n- \r\n- http://www.apache.org/licenses/LICENSE-2.0\r\n- \r\n- Unless required by applicable law or agreed to in writing,\r\n- software distributed under the License is distributed on an\r\n- \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- KIND, either express or implied.  See the License for the\r\n- specific language governing permissions and limitations\r\n- under the License.   \r\n+\tLicensed to the Apache Software Foundation (ASF) under one\r\n+\tor more contributor license agreements.  See the NOTICE file\r\n+\tdistributed with this work for additional information\r\n+\tregarding copyright ownership.  The ASF licenses this file\r\n+\tto you under the Apache License, Version 2.0 (the\r\n+\t\"License\"); you may not use this file except in compliance\r\n+\twith the License.  You may obtain a copy of the License at\r\n+\t\r\n+\thttp://www.apache.org/licenses/LICENSE-2.0\r\n+\t\r\n+\tUnless required by applicable law or agreed to in writing,\r\n+\tsoftware distributed under the License is distributed on an\r\n+\t\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+\tKIND, either express or implied.  See the License for the\r\n+\tspecific language governing permissions and limitations\r\n+\tunder the License.   \r\n -->\r\n <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\r\n-         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n-         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\r\n-    <modelVersion>4.0.0</modelVersion>\r\n-    <groupId>org.apache.openjpa</groupId>\r\n-    <artifactId>openjpa-slice</artifactId>\r\n-    <packaging>jar</packaging>\r\n-    <name>OpenJPA Slice</name>\r\n-    <description>OpenJPA Slice</description>\r\n-    <url>http://openjpa.apache.org</url>\r\n-    <parent>\r\n-        <groupId>org.apache.openjpa</groupId>\r\n-        <artifactId>openjpa-parent</artifactId>\r\n-        <version>1.1.0-SNAPSHOT</version>\r\n-    </parent>\r\n-    <properties>\r\n-        <openjpa.loglevel>INFO</openjpa.loglevel>\r\n-        <!-- to set debug arguments, you might set the following at the command line:\r\n-            -Dtest.jvm.arguments=\"-Xmx500m -agentlib:jdwp=transport=dt_socket,server=y,address=8000\"\r\n-        -->\r\n-        <test.jvm.arguments>-Xmx500m</test.jvm.arguments>\r\n-    </properties>\r\n-    <dependencies>\r\n-        <dependency>\r\n-            <groupId>org.apache.openjpa</groupId>\r\n-            <artifactId>openjpa-kernel</artifactId>\r\n-            <version>${pom.version}</version>\r\n-            <scope>compile</scope>\r\n-        </dependency>\r\n-        <dependency>\r\n-            <groupId>org.apache.openjpa</groupId>\r\n-            <artifactId>openjpa-jdbc</artifactId>\r\n-            <version>${pom.version}</version>\r\n-            <scope>compile</scope>\r\n-        </dependency>\r\n-        <dependency>\r\n-            <groupId>org.apache.geronimo.specs</groupId>\r\n-            <artifactId>geronimo-jpa_3.0_spec</artifactId>\r\n-            <scope>test</scope>\r\n-        </dependency>\r\n-        <dependency>\r\n-            <groupId>org.apache.openjpa</groupId>\r\n-            <artifactId>openjpa-persistence</artifactId>\r\n-            <version>${pom.version}</version>\r\n-            <scope>test</scope>\r\n-        </dependency>\r\n-    </dependencies>\r\n-        <profiles>\r\n-        <!-- Profile for testing with Apache Derby -->\r\n-        <profile>\r\n-            <id>test-derby</id>\r\n-            <activation>\r\n-                <activeByDefault>false</activeByDefault>\r\n-                <property><name>test-derby</name></property>\r\n-            </activation>\r\n-            <dependencies>\r\n-                <dependency>\r\n-                    <groupId>org.apache.derby</groupId>\r\n-                    <artifactId>derby</artifactId>\r\n-                    <scope>test</scope>\r\n-                </dependency>\r\n-            </dependencies>\r\n-            <properties>\r\n-                <connection.driver.name>org.apache.derby.jdbc.EmbeddedDriver</connection.driver.name>\r\n-                <connection.url>jdbc:derby:target/database/slice-derby-One;create=true</connection.url>\r\n-                <connection.username></connection.username>\r\n-                <connection.password></connection.password>\r\n-            </properties>\r\n-        </profile>\r\n-        <profile>\r\n-            <id>test-mysql</id>\r\n-            <activation>\r\n-                <activeByDefault>false</activeByDefault>\r\n-                <property><name>test-mysql</name></property>\r\n-            </activation>\r\n-            <dependencies>\r\n-                <dependency>\r\n-                    <groupId>mysql</groupId>\r\n-                    <artifactId>mysql-connector-java</artifactId>\r\n-                    <version>5.1.5</version>\r\n-                </dependency>\r\n-            </dependencies>\r\n-            <properties>\r\n-                <connection.driver.name>com.mysql.jdbc.Driver</connection.driver.name>\r\n-                <connection.url>${openjpa.mysql.url}</connection.url>\r\n-                <connection.username>${openjpa.mysql.username}</connection.username>\r\n-                <connection.password>${openjpa.mysql.password}</connection.password>\r\n-            </properties>\r\n-        </profile>\r\n-        \r\n-    </profiles>\r\n-    <build>\r\n-        <plugins>\r\n-            <plugin>\r\n-                <groupId>org.apache.maven.plugins</groupId>\r\n-                <artifactId>maven-compiler-plugin</artifactId>\r\n-                <configuration>\r\n-                    <source>1.5</source>\r\n-                    <target>1.5</target>\r\n-                </configuration>\r\n-            </plugin>\r\n-            <plugin>\r\n-                <artifactId>maven-antrun-plugin</artifactId>\r\n-                <executions>\r\n-                    <execution>\r\n-                        <phase>test-compile</phase>\r\n-                        <configuration>\r\n-                            <tasks>\r\n-                                <ant antfile=\"src/main/ant/enhancer.xml\"\r\n-                                    target=\"enhance\"\r\n-                                    inheritRefs=\"true\">\r\n-                                    <property name=\"maven.test.skip\" value=\"${maven.test.skip}\" />\r\n-                                    <property name=\"test\" value=\"${test}\" />\r\n-                                    <property name=\"outdir\" value=\"${project.build.outputDirectory}\" />\r\n-                                    <property name=\"project.build.testOutputDirectory\" value=\"${project.build.testOutputDirectory}\" />\r\n-                                    <property name=\"openjpa.loglevel\" value=\"${openjpa.loglevel}\" />\r\n-                                </ant>\r\n-                            </tasks>\r\n-                        </configuration>\r\n-                        <goals>\r\n-                            <goal>run</goal>\r\n-                        </goals>\r\n-                    </execution>\r\n-                </executions>\r\n-            </plugin>\r\n-            \r\n-            <plugin>\r\n-                <groupId>org.apache.maven.plugins</groupId>\r\n-                <artifactId>maven-surefire-plugin</artifactId>\r\n-                <!-- ======================================================= -->\r\n-                <!-- All tests are excluded currently                        -->\r\n-                <!-- ======================================================= -->\r\n-                <configuration>\r\n-                     <includes>\r\n-                        <include>**/DummyTest.java</include>\r\n-                     </includes>\r\n-                     <excludes>\r\n-                        <exclude>**/Test*.java</exclude>\r\n-                     </excludes>\r\n-                </configuration>\r\n-           </plugin>\r\n-            \r\n-        </plugins>\r\n-    </build>\r\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n+\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\r\n+\t<modelVersion>4.0.0</modelVersion>\r\n+\t<groupId>org.apache.openjpa</groupId>\r\n+\t<artifactId>openjpa-slice</artifactId>\r\n+\t<packaging>jar</packaging>\r\n+\t<name>OpenJPA Slice</name>\r\n+\t<description>OpenJPA Slice</description>\r\n+\t<url>http://openjpa.apache.org</url>\r\n+\t<parent>\r\n+\t\t<groupId>org.apache.openjpa</groupId>\r\n+\t\t<artifactId>openjpa-parent</artifactId>\r\n+\t\t<version>1.1.0-SNAPSHOT</version>\r\n+\t</parent>\r\n+\t<properties>\r\n+\t\t<openjpa.loglevel>INFO</openjpa.loglevel>\r\n+\t\t<!-- to set debug arguments, you might set the following at the command line:\r\n+\t\t\t-Dtest.jvm.arguments=\"-Xmx500m -agentlib:jdwp=transport=dt_socket,server=y,address=8000\"\r\n+\t\t-->\r\n+\t\t<test.jvm.arguments>-Xmx500m</test.jvm.arguments>\r\n+\t</properties>\r\n+\t<dependencies>\r\n+\t\t<dependency>\r\n+\t\t\t<groupId>org.apache.openjpa</groupId>\r\n+\t\t\t<artifactId>openjpa-kernel</artifactId>\r\n+\t\t\t<version>${pom.version}</version>\r\n+\t\t\t<scope>compile</scope>\r\n+\t\t</dependency>\r\n+\t\t<dependency>\r\n+\t\t\t<groupId>org.apache.openjpa</groupId>\r\n+\t\t\t<artifactId>openjpa-jdbc</artifactId>\r\n+\t\t\t<version>${pom.version}</version>\r\n+\t\t\t<scope>compile</scope>\r\n+\t\t</dependency>\r\n+\t\t<dependency>\r\n+\t\t\t<groupId>org.apache.geronimo.specs</groupId>\r\n+\t\t\t<artifactId>geronimo-jpa_3.0_spec</artifactId>\r\n+\t\t\t<scope>test</scope>\r\n+\t\t</dependency>\r\n+\t\t<dependency>\r\n+\t\t\t<groupId>org.apache.openjpa</groupId>\r\n+\t\t\t<artifactId>openjpa-persistence</artifactId>\r\n+\t\t\t<version>${pom.version}</version>\r\n+\t\t\t<scope>test</scope>\r\n+\t\t</dependency>\r\n+\t</dependencies>\r\n+\t<profiles>\r\n+\t\t<!-- Profile for testing with Apache Derby -->\r\n+\t\t<profile>\r\n+\t\t\t<id>test-derby</id>\r\n+\t\t\t<activation>\r\n+\t\t\t\t<activeByDefault>true</activeByDefault>\r\n+\t\t\t\t<property>\r\n+\t\t\t\t\t<name>test-derby</name>\r\n+\t\t\t\t</property>\r\n+\t\t\t</activation>\r\n+\t\t\t<dependencies>\r\n+\t\t\t\t<dependency>\r\n+\t\t\t\t\t<groupId>org.apache.derby</groupId>\r\n+\t\t\t\t\t<artifactId>derby</artifactId>\r\n+\t\t\t\t\t<scope>test</scope>\r\n+\t\t\t\t</dependency>\r\n+\t\t\t</dependencies>\r\n+\t\t\t<properties>\r\n+\t\t\t\t<connection.driver.name>\r\n+\t\t\t\t\torg.apache.derby.jdbc.EmbeddedDriver\r\n+\t\t\t\t</connection.driver.name>\r\n+\t\t\t\t<connection.url>\r\n+\t\t\t\t\tjdbc:derby:target/database/slice-derby-One;create=true\r\n+\t\t\t\t</connection.url>\r\n+\t\t\t\t<connection.username></connection.username>\r\n+\t\t\t\t<connection.password></connection.password>\r\n+\t\t\t</properties>\r\n+\t\t</profile>\r\n+\t\t<profile>\r\n+\t\t\t<id>test-mysql</id>\r\n+\t\t\t<activation>\r\n+\t\t\t\t<activeByDefault>false</activeByDefault>\r\n+\t\t\t\t<property>\r\n+\t\t\t\t\t<name>test-mysql</name>\r\n+\t\t\t\t</property>\r\n+\t\t\t</activation>\r\n+\t\t\t<dependencies>\r\n+\t\t\t\t<dependency>\r\n+\t\t\t\t\t<groupId>mysql</groupId>\r\n+\t\t\t\t\t<artifactId>mysql-connector-java</artifactId>\r\n+\t\t\t\t\t<version>5.1.5</version>\r\n+\t\t\t\t</dependency>\r\n+\t\t\t</dependencies>\r\n+\t\t\t<properties>\r\n+\t\t\t\t<connection.driver.name>\r\n+\t\t\t\t\tcom.mysql.jdbc.Driver\r\n+\t\t\t\t</connection.driver.name>\r\n+\t\t\t\t<connection.url>${openjpa.mysql.url}</connection.url>\r\n+\t\t\t\t<connection.username>\r\n+\t\t\t\t\t${openjpa.mysql.username}\r\n+\t\t\t\t</connection.username>\r\n+\t\t\t\t<connection.password>\r\n+\t\t\t\t\t${openjpa.mysql.password}\r\n+\t\t\t\t</connection.password>\r\n+\t\t\t</properties>\r\n+\t\t</profile>\r\n+\r\n+\t</profiles>\r\n+\t<build>\r\n+\t\t<plugins>\r\n+\t\t\t<plugin>\r\n+\t\t\t\t<groupId>org.apache.maven.plugins</groupId>\r\n+\t\t\t\t<artifactId>maven-compiler-plugin</artifactId>\r\n+\t\t\t\t<configuration>\r\n+\t\t\t\t\t<source>1.5</source>\r\n+\t\t\t\t\t<target>1.5</target>\r\n+\t\t\t\t</configuration>\r\n+\t\t\t</plugin>\r\n+\t\t\t<plugin>\r\n+\t\t\t\t<artifactId>maven-antrun-plugin</artifactId>\r\n+\t\t\t\t<executions>\r\n+\t\t\t\t\t<execution>\r\n+\t\t\t\t\t\t<phase>test-compile</phase>\r\n+\t\t\t\t\t\t<configuration>\r\n+\t\t\t\t\t\t\t<tasks>\r\n+\t\t\t\t\t\t\t\t<ant antfile=\"src/main/ant/enhancer.xml\"\r\n+\t\t\t\t\t\t\t\t\ttarget=\"enhance\" inheritRefs=\"true\">\r\n+\t\t\t\t\t\t\t\t\t<property name=\"maven.test.skip\"\r\n+\t\t\t\t\t\t\t\t\t\tvalue=\"${maven.test.skip}\" />\r\n+\t\t\t\t\t\t\t\t\t<property name=\"test\"\r\n+\t\t\t\t\t\t\t\t\t\tvalue=\"${test}\" />\r\n+\t\t\t\t\t\t\t\t\t<property name=\"outdir\"\r\n+\t\t\t\t\t\t\t\t\t\tvalue=\"${project.build.outputDirectory}\" />\r\n+\t\t\t\t\t\t\t\t\t<property\r\n+\t\t\t\t\t\t\t\t\t\tname=\"project.build.testOutputDirectory\"\r\n+\t\t\t\t\t\t\t\t\t\tvalue=\"${project.build.testOutputDirectory}\" />\r\n+\t\t\t\t\t\t\t\t\t<property name=\"openjpa.loglevel\"\r\n+\t\t\t\t\t\t\t\t\t\tvalue=\"${openjpa.loglevel}\" />\r\n+\t\t\t\t\t\t\t\t</ant>\r\n+\t\t\t\t\t\t\t</tasks>\r\n+\t\t\t\t\t\t</configuration>\r\n+\t\t\t\t\t\t<goals>\r\n+\t\t\t\t\t\t\t<goal>run</goal>\r\n+\t\t\t\t\t\t</goals>\r\n+\t\t\t\t\t</execution>\r\n+\t\t\t\t</executions>\r\n+\t\t\t</plugin>\r\n+\r\n+\t\t\t<plugin>\r\n+\t\t\t\t<groupId>org.apache.maven.plugins</groupId>\r\n+\t\t\t\t<artifactId>maven-surefire-plugin</artifactId>\r\n+\t\t\t</plugin>\r\n+\r\n+\t\t</plugins>\r\n+\t</build>\r\n </project>\r"},{"sha":"f06b6f3602eebd04a99bdcada5bf76bc41fd7959","filename":"openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedConnection.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/c457053f9459293915fb41d1cdea09e014a0175d/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedConnection.java","raw_url":"https://github.com/apache/openjpa/raw/c457053f9459293915fb41d1cdea09e014a0175d/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedConnection.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedConnection.java?ref=c457053f9459293915fb41d1cdea09e014a0175d","patch":"@@ -119,15 +119,15 @@ public SQLWarning getWarnings() throws SQLException {\n \t}\r\n \r\n \tpublic boolean isClosed() throws SQLException {\r\n-\t\tboolean ret = false;\r\n+\t\tboolean ret = true;\r\n \t\tfor (Connection c : real) {\r\n \t\t\tret &= c.isClosed();\r\n \t\t}\r\n \t\treturn ret;\r\n \t}\r\n \r\n \tpublic boolean isReadOnly() throws SQLException {\r\n-\t\tboolean ret = false;\r\n+\t\tboolean ret = true;\r\n \t\tfor (Connection c : real) {\r\n \t\t\tret &= c.isReadOnly();\r\n \t\t}\r"},{"sha":"665befbf4a3f2e58a3e86c6186e1df3723ac014e","filename":"openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedJDBCConfiguration.java","status":"modified","additions":0,"deletions":12,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/c457053f9459293915fb41d1cdea09e014a0175d/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedJDBCConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/c457053f9459293915fb41d1cdea09e014a0175d/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedJDBCConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedJDBCConfiguration.java?ref=c457053f9459293915fb41d1cdea09e014a0175d","patch":"@@ -20,8 +20,6 @@\n \r\n import java.util.concurrent.ExecutorService;\r\n \r\n-import javax.transaction.TransactionManager;\r\n-\r\n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n import org.apache.openjpa.slice.DistributedConfiguration;\r\n import org.apache.openjpa.slice.Slice;\r\n@@ -40,16 +38,6 @@\n      */\r\n     Slice getMaster();\r\n     \r\n-    /**\r\n-     * Gets the TransactionManager instance being used.\r\n-     */\r\n-    TransactionManager getTransactionManagerInstance();\r\n-    \r\n-    /**\r\n-     * Gets the alias for TransactionManager being used.\r\n-     */\r\n-    String getTransactionManager();\r\n-    \r\n     /**\r\n      * Gets the alias for ExecutorService being used.\r\n      */\r"},{"sha":"4b066a33ce9a844050aea20b22237820fbe784ac","filename":"openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedJDBCConfigurationImpl.java","status":"modified","additions":0,"deletions":28,"changes":28,"blob_url":"https://github.com/apache/openjpa/blob/c457053f9459293915fb41d1cdea09e014a0175d/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedJDBCConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/c457053f9459293915fb41d1cdea09e014a0175d/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedJDBCConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedJDBCConfigurationImpl.java?ref=c457053f9459293915fb41d1cdea09e014a0175d","patch":"@@ -29,7 +29,6 @@\n \r\n import javax.sql.DataSource;\r\n import javax.sql.XADataSource;\r\n-import javax.transaction.TransactionManager;\r\n \r\n import org.apache.openjpa.conf.OpenJPAConfiguration;\r\n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n@@ -73,7 +72,6 @@\n     protected BooleanValue lenientPlugin;\r\n     protected StringValue masterPlugin;\r\n     protected StringListValue namesPlugin;\r\n-    protected PluginValue txnMgrPlugin;\r\n     protected ExecutorServiceValue executorServicePlugin;\r\n     protected PluginValue distributionPolicyPlugin;\r\n \r\n@@ -105,17 +103,6 @@ public DistributedJDBCConfigurationImpl(ConfigurationProvider cp) {\n         \r\n         namesPlugin = addStringList(\"Names\");\r\n         \r\n-        txnMgrPlugin = addPlugin(\"TransactionPolicy\", true);\r\n-        txnMgrPlugin.setAlias(\"default\", \r\n-                \"org.apache.openjpa.slice.transaction.NaiveTransactionManager\");\r\n-        txnMgrPlugin.setAlias(\"xa\", \r\n-                \"org.apache.openjpa.slice.transaction.DistributedTransactionManager\");\r\n-        txnMgrPlugin.setAlias(\"jndi\", \r\n-                \"org.apache.openjpa.slice.transaction.LookUpTransactionManager\");\r\n-        txnMgrPlugin.setDefault(\"default\");\r\n-        txnMgrPlugin.setString(\"default\");\r\n-        \r\n-        \r\n         executorServicePlugin = new ExecutorServiceValue();\r\n         addValue(executorServicePlugin);\r\n         \r\n@@ -464,21 +451,6 @@ private void setMaster(Map original) {\n         }\r\n     }\r\n     \r\n-    public String getTransactionManager() {\r\n-        return txnMgrPlugin.getString();\r\n-    }\r\n-\r\n-    public void setTransactionManager(TransactionManager txnManager) {\r\n-        txnMgrPlugin.set(txnManager);\r\n-    }\r\n-\r\n-    public TransactionManager getTransactionManagerInstance() {\r\n-        if (txnMgrPlugin.get() == null) {\r\n-            txnMgrPlugin.instantiate(TransactionManager.class, this);\r\n-        }\r\n-        return (TransactionManager) txnMgrPlugin.get();\r\n-    }\r\n-\r\n     public String getExecutorService() {\r\n         return executorServicePlugin.getString();\r\n     }\r"},{"sha":"85270dea3991e7dd63270f3c7000d7d817e8ae16","filename":"openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedPreparedStatement.java","status":"modified","additions":3,"deletions":185,"changes":188,"blob_url":"https://github.com/apache/openjpa/blob/c457053f9459293915fb41d1cdea09e014a0175d/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedPreparedStatement.java","raw_url":"https://github.com/apache/openjpa/raw/c457053f9459293915fb41d1cdea09e014a0175d/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedPreparedStatement.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedPreparedStatement.java?ref=c457053f9459293915fb41d1cdea09e014a0175d","patch":"@@ -235,195 +235,13 @@ public void setURL(int arg0, URL arg1) throws SQLException {\n \t }\r\n \t\r\n \t public void setUnicodeStream(int arg0, InputStream arg1, int arg2)\r\n-\t throws SQLException {\r\n+\t     throws SQLException {\r\n \t\t\tfor (PreparedStatement t : this)\r\n \t\t\t\tt.setUnicodeStream(arg0, arg1, arg2);\r\n \t }\r\n \t\r\n \t public void addBatch() throws SQLException {\r\n-\t\t\t\tfor (PreparedStatement t:this)\r\n-\t\t\t\t\tt.addBatch();\r\n+\t\tfor (PreparedStatement t:this)\r\n+\t\t    t.addBatch();\r\n \t }\r\n-\t\r\n-\t// public void cancel() throws SQLException {\r\n-\t// // TODO Auto-generated method stub\r\n-\t//\r\n-\t// }\r\n-\t//\r\n-\t// public void clearBatch() throws SQLException {\r\n-\t// // TODO Auto-generated method stub\r\n-\t//\r\n-\t// }\r\n-\t//\r\n-\t// public void clearWarnings() throws SQLException {\r\n-\t// // TODO Auto-generated method stub\r\n-\t//\r\n-\t// }\r\n-\t//\r\n-\t// public void close() throws SQLException {\r\n-\t// // TODO Auto-generated method stub\r\n-\t//\r\n-\t// }\r\n-\t//\r\n-\t// public boolean execute(String arg0) throws SQLException {\r\n-\t// // TODO Auto-generated method stub\r\n-\t// return false;\r\n-\t// }\r\n-\t//\r\n-\t// public boolean execute(String arg0, int arg1) throws SQLException {\r\n-\t// // TODO Auto-generated method stub\r\n-\t// return false;\r\n-\t// }\r\n-\t//\r\n-\t// public boolean execute(String arg0, int[] arg1) throws SQLException {\r\n-\t// // TODO Auto-generated method stub\r\n-\t// return false;\r\n-\t// }\r\n-\t//\r\n-\t// public boolean execute(String arg0, String[] arg1) throws SQLException {\r\n-\t// // TODO Auto-generated method stub\r\n-\t// return false;\r\n-\t// }\r\n-\t//\r\n-\t// public int[] executeBatch() throws SQLException {\r\n-\t// // TODO Auto-generated method stub\r\n-\t// return null;\r\n-\t// }\r\n-\t//\r\n-\t// public ResultSet executeQuery(String arg0) throws SQLException {\r\n-\t// // TODO Auto-generated method stub\r\n-\t// return null;\r\n-\t// }\r\n-\t//\r\n-\t// public int executeUpdate(String arg0) throws SQLException {\r\n-\t// // TODO Auto-generated method stub\r\n-\t// return 0;\r\n-\t// }\r\n-\t//\r\n-\t// public int executeUpdate(String arg0, int arg1) throws SQLException {\r\n-\t// // TODO Auto-generated method stub\r\n-\t// return 0;\r\n-\t// }\r\n-\t//\r\n-\t// public int executeUpdate(String arg0, int[] arg1) throws SQLException {\r\n-\t// // TODO Auto-generated method stub\r\n-\t// return 0;\r\n-\t// }\r\n-\t//\r\n-\t// public int executeUpdate(String arg0, String[] arg1) throws SQLException\r\n-\t// {\r\n-\t// // TODO Auto-generated method stub\r\n-\t// return 0;\r\n-\t// }\r\n-\t//\r\n-\t// public Connection getConnection() throws SQLException {\r\n-\t// // TODO Auto-generated method stub\r\n-\t// return null;\r\n-\t// }\r\n-\t//\r\n-\t// public int getFetchDirection() throws SQLException {\r\n-\t// // TODO Auto-generated method stub\r\n-\t// return 0;\r\n-\t// }\r\n-\t//\r\n-\t// public int getFetchSize() throws SQLException {\r\n-\t// // TODO Auto-generated method stub\r\n-\t// return 0;\r\n-\t// }\r\n-\t//\r\n-\t// public ResultSet getGeneratedKeys() throws SQLException {\r\n-\t// // TODO Auto-generated method stub\r\n-\t// return null;\r\n-\t// }\r\n-\t//\r\n-\t// public int getMaxFieldSize() throws SQLException {\r\n-\t// // TODO Auto-generated method stub\r\n-\t// return 0;\r\n-\t// }\r\n-\t//\r\n-\t// public int getMaxRows() throws SQLException {\r\n-\t// // TODO Auto-generated method stub\r\n-\t// return 0;\r\n-\t// }\r\n-\t//\r\n-\t// public boolean getMoreResults() throws SQLException {\r\n-\t// // TODO Auto-generated method stub\r\n-\t// return false;\r\n-\t// }\r\n-\t//\r\n-\t// public boolean getMoreResults(int arg0) throws SQLException {\r\n-\t// // TODO Auto-generated method stub\r\n-\t// return false;\r\n-\t// }\r\n-\t//\r\n-\t// public int getQueryTimeout() throws SQLException {\r\n-\t// // TODO Auto-generated method stub\r\n-\t// return 0;\r\n-\t// }\r\n-\t//\r\n-\t// public ResultSet getResultSet() throws SQLException {\r\n-\t// // TODO Auto-generated method stub\r\n-\t// return null;\r\n-\t// }\r\n-\t//\r\n-\t// public int getResultSetConcurrency() throws SQLException {\r\n-\t// // TODO Auto-generated method stub\r\n-\t// return 0;\r\n-\t// }\r\n-\t//\r\n-\t// public int getResultSetHoldability() throws SQLException {\r\n-\t// // TODO Auto-generated method stub\r\n-\t// return 0;\r\n-\t// }\r\n-\t//\r\n-\t// public int getResultSetType() throws SQLException {\r\n-\t// // TODO Auto-generated method stub\r\n-\t// return 0;\r\n-\t// }\r\n-\t//\r\n-\t// public int getUpdateCount() throws SQLException {\r\n-\t// // TODO Auto-generated method stub\r\n-\t// return 0;\r\n-\t// }\r\n-\t//\r\n-\t// public SQLWarning getWarnings() throws SQLException {\r\n-\t// // TODO Auto-generated method stub\r\n-\t// return null;\r\n-\t// }\r\n-\t//\r\n-\t// public void setCursorName(String arg0) throws SQLException {\r\n-\t// // TODO Auto-generated method stub\r\n-\t//\r\n-\t// }\r\n-\t//\r\n-\t// public void setEscapeProcessing(boolean arg0) throws SQLException {\r\n-\t// // TODO Auto-generated method stub\r\n-\t//\r\n-\t// }\r\n-\t//\r\n-\t// public void setFetchDirection(int arg0) throws SQLException {\r\n-\t// // TODO Auto-generated method stub\r\n-\t//\r\n-\t// }\r\n-\t//\r\n-\t// public void setFetchSize(int arg0) throws SQLException {\r\n-\t// // TODO Auto-generated method stub\r\n-\t//\r\n-\t// }\r\n-\t//\r\n-\t// public void setMaxFieldSize(int arg0) throws SQLException {\r\n-\t// // TODO Auto-generated method stub\r\n-\t//\r\n-\t// }\r\n-\t//\r\n-\t// public void setMaxRows(int arg0) throws SQLException {\r\n-\t// // TODO Auto-generated method stub\r\n-\t//\r\n-\t// }\r\n-\t//\r\n-\t// public void setQueryTimeout(int arg0) throws SQLException {\r\n-\t// // TODO Auto-generated method stub\r\n-\t//\r\n-\t// }\r\n-\r\n }\r"},{"sha":"0fefc75c6f3d45ff6ad233d4f5353fed7858672b","filename":"openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedStoreManager.java","status":"modified","additions":4,"deletions":113,"changes":117,"blob_url":"https://github.com/apache/openjpa/blob/c457053f9459293915fb41d1cdea09e014a0175d/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedStoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/c457053f9459293915fb41d1cdea09e014a0175d/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedStoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedStoreManager.java?ref=c457053f9459293915fb41d1cdea09e014a0175d","patch":"@@ -33,11 +33,6 @@\n import java.util.concurrent.Executors;\r\n import java.util.concurrent.Future;\r\n \r\n-import javax.transaction.Transaction;\r\n-import javax.transaction.TransactionManager;\r\n-\r\n-import org.apache.openjpa.conf.OpenJPAConfiguration;\r\n-import org.apache.openjpa.enhance.PersistenceCapable;\r\n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n import org.apache.openjpa.jdbc.kernel.ConnectionInfo;\r\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\r\n@@ -53,16 +48,13 @@\n import org.apache.openjpa.kernel.StoreManager;\r\n import org.apache.openjpa.kernel.StoreQuery;\r\n import org.apache.openjpa.kernel.exps.ExpressionParser;\r\n-import org.apache.openjpa.lib.log.Log;\r\n import org.apache.openjpa.lib.rop.MergedResultObjectProvider;\r\n import org.apache.openjpa.lib.rop.ResultObjectProvider;\r\n import org.apache.openjpa.lib.util.Localizer;\r\n import org.apache.openjpa.meta.ClassMetaData;\r\n import org.apache.openjpa.meta.FieldMetaData;\r\n import org.apache.openjpa.slice.DistributionPolicy;\r\n import org.apache.openjpa.slice.ProductDerivation;\r\n-import org.apache.openjpa.slice.transaction.DistributedNaiveTransaction;\r\n-import org.apache.openjpa.slice.transaction.NaiveTransactionManager;\r\n import org.apache.openjpa.util.InternalException;\r\n import org.apache.openjpa.util.StoreException;\r\n import org.apache.openjpa.util.UserException;\r\n@@ -80,11 +72,7 @@\n class DistributedStoreManager extends JDBCStoreManager {\r\n     private final List<SliceStoreManager> _slices;\r\n     private JDBCStoreManager _master;\r\n-    private boolean isXA;\r\n-    private TransactionManager _tm;\r\n     private final DistributedJDBCConfiguration _conf;\r\n-    private boolean _active = false;\r\n-    private Log _log;\r\n     private static final Localizer _loc =\r\n             Localizer.forPackage(DistributedStoreManager.class);\r\n     private static ExecutorService threadPool = Executors.newCachedThreadPool();\r\n@@ -100,7 +88,6 @@\n     public DistributedStoreManager(DistributedJDBCConfiguration conf) {\r\n         super();\r\n         _conf = conf;\r\n-        _log = conf.getLog(OpenJPAConfiguration.LOG_RUNTIME);\r\n         _slices = new ArrayList<SliceStoreManager>();\r\n         List<String> sliceNames = conf.getActiveSliceNames();\r\n         for (String name : sliceNames) {\r\n@@ -199,37 +186,6 @@ public void beforeStateChange(OpenJPAStateManager sm, PCState fromState,\n         _master.beforeStateChange(sm, fromState, toState);\r\n     }\r\n \r\n-    public void begin() {\r\n-        if (_active)\r\n-            return;\r\n-        _active = true;\r\n-        TransactionManager tm = getTransactionManager();\r\n-        for (SliceStoreManager slice : _slices) {\r\n-            try {\r\n-                Transaction txn = tm.getTransaction();\r\n-                if (isXA) {\r\n-                    txn.enlistResource(slice.getXAConnection().getXAResource());\r\n-                } else { // This is the only place where casting to our\r\n-                         // internal implementation classes become necessary\r\n-                    ((DistributedNaiveTransaction) txn).enlistResource(slice);\r\n-                }\r\n-            } catch (Exception e) {\r\n-                throw new InternalException(e);\r\n-            }\r\n-        }\r\n-\r\n-        try {\r\n-            tm.begin();\r\n-        } catch (Exception e) {\r\n-            throw new StoreException(e);\r\n-        }\r\n-    }\r\n-\r\n-    Log getLog(SliceStoreManager slice) {\r\n-        return slice.getConfiguration()\r\n-                .getLog(OpenJPAConfiguration.LOG_RUNTIME);\r\n-    }\r\n-\r\n     public void beginOptimistic() {\r\n         for (SliceStoreManager slice : _slices)\r\n             slice.beginOptimistic();\r\n@@ -242,25 +198,6 @@ public boolean cancelAll() {\n         return ret;\r\n     }\r\n \r\n-    public void close() {\r\n-        _active = false;\r\n-        for (SliceStoreManager slice : _slices)\r\n-            slice.close();\r\n-    }\r\n-\r\n-    public void commit() {\r\n-        if (!_active) \r\n-            return;\r\n-        TransactionManager tm = getTransactionManager();\r\n-        try {\r\n-            tm.commit();\r\n-        } catch (Exception e) {\r\n-            throw new StoreException(e);\r\n-        } finally {\r\n-            _active = false;\r\n-        }\r\n-    }\r\n-\r\n     public int compareVersion(OpenJPAStateManager sm, Object v1, Object v2) {\r\n         return selectStore(sm, null).compareVersion(sm, v1, v2);\r\n     }\r\n@@ -421,47 +358,15 @@ public StoreQuery newQuery(String language) {\n         return ret;\r\n     }\r\n \r\n-    public void releaseConnection() {\r\n-        for (SliceStoreManager slice : _slices)\r\n-            slice.releaseConnection();\r\n-\r\n-    }\r\n-\r\n-    public void retainConnection() {\r\n-        for (SliceStoreManager slice : _slices)\r\n-            slice.retainConnection();\r\n-    }\r\n-\r\n-    public void rollback() {\r\n-        if (!_active)\r\n-            return;\r\n-        TransactionManager tm = getTransactionManager();\r\n-        try {\r\n-            tm.rollback();\r\n-        } catch (Exception e) {\r\n-            throw new StoreException(e);\r\n-        } finally {\r\n-            _active = false;\r\n-        }\r\n-    }\r\n-\r\n-    public void rollbackOptimistic() {\r\n-        for (SliceStoreManager slice : _slices)\r\n-            slice.rollbackOptimistic();\r\n-    }\r\n-\r\n     /**\r\n      * Sets the context for this receiver and all its underlying slices.\r\n      */\r\n     public void setContext(StoreContext ctx) {\r\n         super.setContext(ctx);\r\n-        isXA = true;\r\n         for (SliceStoreManager store : _slices) {\r\n             store.setContext(ctx, \r\n                     (JDBCConfiguration)store.getSlice().getConfiguration());\r\n-            isXA &= store.isXAEnabled();\r\n         }\r\n-        _tm = getTransactionManager();\r\n     }\r\n \r\n     private SliceStoreManager lookup(String name) {\r\n@@ -475,24 +380,6 @@ public boolean syncVersion(OpenJPAStateManager sm, Object edata) {\n         return selectStore(sm, edata).syncVersion(sm, edata);\r\n     }\r\n \r\n-    protected TransactionManager getTransactionManager() {\r\n-        if (_tm == null) {\r\n-            _tm = getConfiguration().getTransactionManagerInstance();\r\n-            String alias = getConfiguration().getTransactionManager();\r\n-            boolean is2pc = !(_tm instanceof NaiveTransactionManager);\r\n-            if (isXA) { \r\n-                if (!is2pc) { \r\n-                    _log.warn(_loc.get(\"resource-xa-tm-not-2pc\", alias));\r\n-                    isXA = false;\r\n-                }\r\n-            } else if (is2pc) {\r\n-                throw new UserException(_loc.get(\"resource-not-xa-tm-2pc\", \r\n-                        alias));\r\n-            } \r\n-        }\r\n-        return _tm;\r\n-    }\r\n-    \r\n     @Override\r\n     protected RefCountConnection connectInternal() throws SQLException {\r\n         List<Connection> list = new ArrayList<Connection>();\r\n@@ -526,6 +413,10 @@ protected RefCountConnection connectInternal() throws SQLException {\n             return _slices;\r\n         return targets;\r\n     }\r\n+    \r\n+    void log(String s) {\r\n+        System.out.println(\"[\"+Thread.currentThread().getName()+\"] \" + this + s);\r\n+    }\r\n \r\n     private static class Flusher implements Callable<Collection> {\r\n         final SliceStoreManager store;\r"},{"sha":"b2450659f94bd6775efff3cf9f5480d108ed12dc","filename":"openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedStoreQuery.java","status":"modified","additions":1,"deletions":4,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/c457053f9459293915fb41d1cdea09e014a0175d/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/c457053f9459293915fb41d1cdea09e014a0175d/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedStoreQuery.java?ref=c457053f9459293915fb41d1cdea09e014a0175d","patch":"@@ -108,8 +108,7 @@ public ParallelExecutor(DistributedStoreQuery dsq, ClassMetaData meta,\n         \t\tboolean subclasses, ExpressionParser parser, Object parsed) {\r\n         \tsuper(dsq, meta, subclasses, parser, parsed);\r\n         \towner = dsq;\r\n-        \tthreadPool = ((DistributedJDBCConfiguration)dsq.getStore()\r\n-        \t        .getConfiguration()).getExecutorServiceInstance();\r\n+        \tthreadPool = dsq.getExecutorServiceInstance();\r\n         }\r\n         \r\n         /**\r\n@@ -164,7 +163,6 @@ public ResultObjectProvider executeQuery(StoreQuery q,\n         \r\n         public Number executeDelete(StoreQuery q, Object[] params) {\r\n         \tIterator<StoreQuery> qs = owner._queries.iterator();\r\n-            owner.getStore().getContext().beginStore();\r\n         \tfinal List<Future<Number>> futures = new ArrayList<Future<Number>>();\r\n         \tfor (Executor ex:executors) {\r\n         \t\tDeleteExecutor call = new DeleteExecutor();\r\n@@ -190,7 +188,6 @@ public Number executeDelete(StoreQuery q, Object[] params) {\n         \r\n         public Number executeUpdate(StoreQuery q, Object[] params) {\r\n         \tIterator<StoreQuery> qs = owner._queries.iterator();\r\n-            owner.getStore().getContext().beginStore();\r\n         \tfinal List<Future<Number>> futures = new ArrayList<Future<Number>>();\r\n         \tfor (Executor ex:executors) {\r\n         \t\tUpdateExecutor call = new UpdateExecutor();\r"},{"sha":"fb36b503e64ba4da5412aca5c9fd0fcc55d1ca82","filename":"openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/SliceStoreManager.java","status":"modified","additions":1,"deletions":64,"changes":65,"blob_url":"https://github.com/apache/openjpa/blob/c457053f9459293915fb41d1cdea09e014a0175d/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/SliceStoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/c457053f9459293915fb41d1cdea09e014a0175d/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/SliceStoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/SliceStoreManager.java?ref=c457053f9459293915fb41d1cdea09e014a0175d","patch":"@@ -18,34 +18,17 @@\n  */\r\n package org.apache.openjpa.slice.jdbc;\r\n \r\n-import java.sql.Connection;\r\n-import java.sql.SQLException;\r\n-\r\n-import javax.sql.DataSource;\r\n-import javax.sql.XAConnection;\r\n-import javax.sql.XADataSource;\r\n-\r\n import org.apache.openjpa.jdbc.kernel.JDBCStoreManager;\r\n-import org.apache.openjpa.lib.jdbc.DelegatingDataSource;\r\n-import org.apache.openjpa.lib.util.Localizer;\r\n import org.apache.openjpa.slice.Slice;\r\n-import org.apache.openjpa.util.InternalException;\r\n \r\n /**\r\n- * A specialized JDBCStoreManager for XA-complaint DataSource.\r\n- * If the configured DataSource is not XA-complaint, behaves as the super \r\n- * implementation.\r\n+ * A specialized JDBCStoreManager for a slice.\r\n  * \r\n  * @author Pinaki Poddar \r\n  *\r\n  */\r\n public class SliceStoreManager extends JDBCStoreManager {\r\n \tprivate final Slice _slice;\r\n-\tprivate Boolean isXAEnabled;\r\n-\tprivate XAConnection xcon;\r\n-\t\r\n-\tprivate static final Localizer _loc = \r\n-\t\tLocalizer.forPackage(SliceStoreManager.class);\r\n \t\r\n \t/**\r\n \t * Construct with immutable logical name of the slice. \r\n@@ -64,50 +47,4 @@ public Slice getSlice() {\n \tpublic String getName() {\r\n \t    return _slice.getName();\r\n \t}\r\n-\t\r\n-\t/**\r\n-\t * Gets the connection via XAConnection if the datasource is XA-complaint.\r\n-\t * Otherwise, behaves exactly as the super implementation. \r\n-\t */\r\n-\t@Override\r\n-\tprotected RefCountConnection connectInternal() throws SQLException { \r\n-\t\tif (!isXAEnabled)\r\n-\t\t\treturn super.connectInternal();\r\n-\t\tXADataSource xds = getXADataSource();\r\n-\t\txcon = xds.getXAConnection();\r\n-\t\tConnection con = xcon.getConnection();\r\n-\t\treturn new RefCountConnection(con);\r\n-\t}\r\n-\t\r\n-\t/**\r\n-\t * Gets the XAConnection if connected and XA-complaint. Otherwise null.\r\n-\t */\r\n-\tpublic XAConnection getXAConnection() {\r\n-\t\treturn xcon;\r\n-\t}\r\n-\t\r\n-\tprivate XADataSource getXADataSource() {\r\n-\t\tif (!isXAEnabled())\r\n-\t\t\tthrow new InternalException(_loc.get(\"slice-not-xa\", this));\r\n-\t\treturn (XADataSource)getInnerDataSource();\r\n-\t}\r\n-\t\r\n-\t/**\r\n-\t * Affirms if the configured DataSource is XA-complaint.\r\n-\t * Can return null if the context has not been set yet.\r\n-\t */\r\n-\tpublic boolean isXAEnabled() {\r\n-\t\tif (isXAEnabled == null) {\r\n-\t\t\tisXAEnabled = getInnerDataSource() instanceof XADataSource;\r\n-\t\t}\r\n-\t\treturn isXAEnabled.booleanValue();\r\n-\t}\r\n-\t\r\n-\tprivate DataSource getInnerDataSource() {\r\n-\t\tDataSource parent = super.getDataSource();\r\n-\t\tDataSource real = (parent instanceof DelegatingDataSource) ?\r\n-\t\t\t\t((DelegatingDataSource)parent).getInnermostDelegate() \r\n-\t\t\t\t: parent;\r\n-\t\treturn real;\r\n-\t}\r\n }\r"},{"sha":"932dcf8ffcbc423a132b9ab32113e88f4883c593","filename":"openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/UniqueResultObjectProvider.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/c457053f9459293915fb41d1cdea09e014a0175d/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/UniqueResultObjectProvider.java","raw_url":"https://github.com/apache/openjpa/raw/c457053f9459293915fb41d1cdea09e014a0175d/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/UniqueResultObjectProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/UniqueResultObjectProvider.java?ref=c457053f9459293915fb41d1cdea09e014a0175d","patch":"@@ -24,7 +24,6 @@\n import org.apache.openjpa.lib.rop.ResultObjectProvider;\r\n import org.apache.openjpa.lib.util.Localizer;\r\n import org.apache.openjpa.util.InternalException;\r\n-import org.apache.openjpa.util.UserException;\r\n \r\n /**\r\n  * Aggregates individual single query results from different databases.\r"},{"sha":"c9706bc03e91ae1b4d558a6753caa98817faebd3","filename":"openjpa-slice/src/main/java/org/apache/openjpa/slice/transaction/DistributedNaiveTransaction.java","status":"removed","additions":0,"deletions":93,"changes":93,"blob_url":"https://github.com/apache/openjpa/blob/de8a4760c8b7df2186cd831733b8fdc095dbc736/openjpa-slice/src/main/java/org/apache/openjpa/slice/transaction/DistributedNaiveTransaction.java","raw_url":"https://github.com/apache/openjpa/raw/de8a4760c8b7df2186cd831733b8fdc095dbc736/openjpa-slice/src/main/java/org/apache/openjpa/slice/transaction/DistributedNaiveTransaction.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/main/java/org/apache/openjpa/slice/transaction/DistributedNaiveTransaction.java?ref=de8a4760c8b7df2186cd831733b8fdc095dbc736","patch":"@@ -1,93 +0,0 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.slice.transaction;\r\n-\r\n-import java.util.Collections;\r\n-import java.util.HashSet;\r\n-import java.util.Set;\r\n-\r\n-import javax.transaction.HeuristicMixedException;\r\n-import javax.transaction.HeuristicRollbackException;\r\n-import javax.transaction.RollbackException;\r\n-import javax.transaction.Synchronization;\r\n-import javax.transaction.SystemException;\r\n-import javax.transaction.Transaction;\r\n-import javax.transaction.TransactionManager;\r\n-import javax.transaction.xa.XAResource;\r\n-\r\n-import org.apache.openjpa.slice.jdbc.SliceStoreManager;\r\n-\r\n-public class DistributedNaiveTransaction implements Transaction {\r\n-    private Set<SliceStoreManager> _slices = new HashSet<SliceStoreManager>();\r\n-    private Set<Synchronization> _syncs = new HashSet<Synchronization>();\r\n-    private final TransactionManager _tm;\r\n-    private int _status;\r\n-    private boolean _rollbackOnly;\r\n-\r\n-    DistributedNaiveTransaction(TransactionManager tm) {\r\n-        _tm = tm;\r\n-    }\r\n-\r\n-    public void commit() throws HeuristicMixedException,\r\n-            HeuristicRollbackException, RollbackException, SecurityException,\r\n-            SystemException {\r\n-        throw new UnsupportedOperationException();\r\n-    }\r\n-\r\n-    public boolean delistResource(XAResource arg0, int arg1)\r\n-            throws IllegalStateException, SystemException {\r\n-        return _slices.remove(arg0);\r\n-    }\r\n-\r\n-    public boolean enlistResource(XAResource arg0)\r\n-            throws IllegalStateException, RollbackException, SystemException {\r\n-        throw new UnsupportedOperationException();\r\n-    }\r\n-\r\n-    public boolean enlistResource(SliceStoreManager arg0)\r\n-            throws IllegalStateException, RollbackException, SystemException {\r\n-        return _slices.add(arg0);\r\n-    }\r\n-\r\n-    public int getStatus() throws SystemException {\r\n-        return _status;\r\n-    }\r\n-\r\n-    public void registerSynchronization(Synchronization arg0)\r\n-            throws IllegalStateException, RollbackException, SystemException {\r\n-        _syncs.add(arg0);\r\n-    }\r\n-\r\n-    public void rollback() throws IllegalStateException, SystemException {\r\n-        _tm.rollback();\r\n-    }\r\n-\r\n-    public void setRollbackOnly() throws IllegalStateException, SystemException {\r\n-        _rollbackOnly = true;\r\n-    }\r\n-    \r\n-    public boolean isRollbackOnly() {\r\n-        return _rollbackOnly;\r\n-    }\r\n-\r\n-    Set<SliceStoreManager> getEnlistedResources() {\r\n-        return Collections.unmodifiableSet(_slices);\r\n-    }\r\n-\r\n-}\r"},{"sha":"1d4d34ef38dd547177c9870ab7e34e6bf248f2fa","filename":"openjpa-slice/src/main/java/org/apache/openjpa/slice/transaction/DistributedTransactionManager.java","status":"removed","additions":0,"deletions":234,"changes":234,"blob_url":"https://github.com/apache/openjpa/blob/de8a4760c8b7df2186cd831733b8fdc095dbc736/openjpa-slice/src/main/java/org/apache/openjpa/slice/transaction/DistributedTransactionManager.java","raw_url":"https://github.com/apache/openjpa/raw/de8a4760c8b7df2186cd831733b8fdc095dbc736/openjpa-slice/src/main/java/org/apache/openjpa/slice/transaction/DistributedTransactionManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/main/java/org/apache/openjpa/slice/transaction/DistributedTransactionManager.java?ref=de8a4760c8b7df2186cd831733b8fdc095dbc736","patch":"@@ -1,234 +0,0 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.slice.transaction;\r\n-\r\n-import static javax.transaction.xa.XAResource.TMJOIN;\r\n-import static javax.transaction.xa.XAResource.TMNOFLAGS;\r\n-import static javax.transaction.xa.XAResource.TMSUCCESS;\r\n-\r\n-import java.util.Set;\r\n-\r\n-import javax.transaction.HeuristicMixedException;\r\n-import javax.transaction.HeuristicRollbackException;\r\n-import javax.transaction.InvalidTransactionException;\r\n-import javax.transaction.NotSupportedException;\r\n-import javax.transaction.RollbackException;\r\n-import javax.transaction.SystemException;\r\n-import javax.transaction.Transaction;\r\n-import javax.transaction.TransactionManager;\r\n-import javax.transaction.xa.XAException;\r\n-import javax.transaction.xa.XAResource;\r\n-\r\n-import org.apache.openjpa.lib.util.Localizer;\r\n-\r\n-/**\r\n- * A simple (naive?) implementation for distributed transaction across \r\n- * XA-complaint data sources. \r\n- * Assumes begin() and commit() being called on the same thread.\r\n- * \r\n- * @author Pinaki Poddar\r\n- * \r\n- */\r\n-public class DistributedTransactionManager implements TransactionManager {\r\n-    private final ThreadLocal<DistributedXATransaction> txns =\r\n-            new ThreadLocal<DistributedXATransaction>();\r\n-    private static final Localizer _loc =\r\n-            Localizer.forPackage(DistributedTransactionManager.class);\r\n-\r\n-    public void begin() throws NotSupportedException, SystemException {\r\n-        DistributedXATransaction txn = (DistributedXATransaction)getTransaction();\r\n-        int i = 1;\r\n-        Set<XAResource> resources = txn.getEnlistedResources();\r\n-        for (XAResource resource : resources) {\r\n-            try {\r\n-                XAResource existing = isSame(resource, resources);\r\n-                XID branch = txn.getXID().branch(i++);\r\n-                int flag = (existing == null) ? TMNOFLAGS : TMJOIN;\r\n-                resource.start(branch, flag);\r\n-            } catch (Exception e) {\r\n-                throw new SystemException(e.toString());\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-    public void commit() throws HeuristicMixedException,\r\n-            HeuristicRollbackException, IllegalStateException,\r\n-            RollbackException, SecurityException, SystemException {\r\n-        DistributedXATransaction txn = getTransactionOfCurrentThread(true);\r\n-        Set<XAResource> resources = txn.getEnlistedResources();\r\n-        int branchId = 1;\r\n-        Exception failedFirstPhase = null;\r\n-        Exception failedSecondPhase = null;\r\n-        \r\n-        for (XAResource resource : resources) {\r\n-            XID branch = txn.getXID().branch(branchId++);\r\n-            try {\r\n-                resource.end(branch, TMSUCCESS);\r\n-                resource.prepare(branch);\r\n-            } catch (XAException e) {\r\n-                failedFirstPhase = e;\r\n-            }\r\n-        }\r\n-\r\n-        branchId = 1; // reset\r\n-        if (failedFirstPhase != null) {\r\n-            for (XAResource resource : resources) {\r\n-                try {\r\n-                    XID branch = txn.getXID().branch(branchId++);\r\n-                    resource.forget(branch);\r\n-                } catch (XAException e) {\r\n-                    // ignore\r\n-                }\r\n-            }\r\n-        } else {\r\n-            branchId = 1; // reset\r\n-            for (XAResource resource : resources) {\r\n-                XID branch = txn.getXID().branch(branchId++);\r\n-                try {\r\n-                    resource.commit(branch, false);\r\n-                } catch (XAException e) {\r\n-                    failedSecondPhase = e;\r\n-                }\r\n-            }\r\n-        }\r\n-        txn.commit();\r\n-        txns.set(null);\r\n-        if (failedFirstPhase != null) {\r\n-            throw new SystemException(failedFirstPhase.getMessage());\r\n-        } else if (failedSecondPhase != null)\r\n-            throw new SystemException(failedSecondPhase.getMessage());\r\n-    }\r\n-\r\n-    public int getStatus() throws SystemException {\r\n-        return getTransaction().getStatus();\r\n-    }\r\n-\r\n-    public Transaction getTransaction() throws SystemException {\r\n-        DistributedXATransaction txn =  getTransactionOfCurrentThread(false);\r\n-        if (txn == null)\r\n-            txn = newTransaction();\r\n-        return txn;\r\n-    }\r\n-\r\n-    public void resume(Transaction arg0) throws IllegalStateException,\r\n-            InvalidTransactionException, SystemException {\r\n-        throw new UnsupportedOperationException();\r\n-    }\r\n-\r\n-    public void rollback() throws IllegalStateException, SecurityException,\r\n-            SystemException {\r\n-        DistributedXATransaction txn = getTransactionOfCurrentThread(true);\r\n-        if (txn == null)\r\n-            return;\r\n-        Set<XAResource> slices = txn.getEnlistedResources();\r\n-        int branchId = 1;\r\n-        for (XAResource slice : slices) {\r\n-            XID branch = txn.getXID().branch(branchId++);\r\n-            try {\r\n-                slice.end(branch, XAResource.TMFAIL);\r\n-                slice.rollback(branch);\r\n-            } catch (XAException e) {\r\n-            }\r\n-        }\r\n-        txn.rollback();\r\n-        txns.set(null);\r\n-    }\r\n-\r\n-    public void setRollbackOnly() throws IllegalStateException, SystemException {\r\n-        getTransaction().setRollbackOnly();\r\n-    }\r\n-\r\n-    public void setTransactionTimeout(int arg0) throws SystemException {\r\n-        throw new UnsupportedOperationException();\r\n-    }\r\n-\r\n-    public Transaction suspend() throws SystemException {\r\n-        throw new UnsupportedOperationException();\r\n-    }\r\n-\r\n-    XAResource isSame(XAResource rm, Set<XAResource> others) {\r\n-        for (XAResource other : others)\r\n-            try {\r\n-                if (rm != other && other.isSameRM(rm))\r\n-                    return other;\r\n-            } catch (XAException e) {\r\n-                e.printStackTrace();\r\n-            }\r\n-        return null;\r\n-    }\r\n-\r\n-    String toString(Object o) {\r\n-        return o.getClass().getSimpleName() + \"@\"\r\n-                + Long.toHexString(System.identityHashCode(o));\r\n-    }\r\n-\r\n-    /**\r\n-     * Gets the transaction associated with the current thread. \r\n-     * \r\n-     * @param mustExist if true, a transaction must be associated with the \r\n-     * current thread a priori. If false, the current thread has no associated\r\n-     * transaction, a new transaction is created with a global identifier \r\n-     * and associated with the current thread.\r\n-     */\r\n-//    DistributedXATransaction getTransaction(boolean create, boolean mustExist) {\r\n-//        DistributedXATransaction txn = txns.get();\r\n-//        if (txn == null && mustExist) {\r\n-//            throw new IllegalStateException(_loc.get(\"no-txn-on-thread\",\r\n-//                Thread.currentThread().getName()).getMessage());\r\n-//        }\r\n-////        if (txn != null && !mustExist) {\r\n-////            throw new IllegalStateException(_loc.get(\"txn-exists--on-thread\",\r\n-////                 txn.getXID(), Thread.currentThread().getName()).getMessage());\r\n-////        }\r\n-//        if (create && txn == null) {\r\n-//        }\r\n-//        \r\n-//        \r\n-//        return txn;\r\n-//    }\r\n-    \r\n-//    DistributedXATransaction getTransactionOfCurrentThread() {\r\n-//        return txns.get();\r\n-//    }\r\n-    \r\n-    DistributedXATransaction getTransactionOfCurrentThread(boolean mustExist) {\r\n-        DistributedXATransaction txn =  txns.get();\r\n-        if (txn == null && mustExist)\r\n-            throw new IllegalStateException(_loc.get(\"no-txn-on-thread\",\r\n-            Thread.currentThread().getName()).getMessage());\r\n-        return txn;\r\n-    }\r\n-    \r\n-    DistributedXATransaction newTransaction() {\r\n-        DistributedXATransaction txn = getTransactionOfCurrentThread(false);\r\n-        if (txn != null)\r\n-            throw new IllegalStateException(_loc.get(\"txn-exists-on-thread\",\r\n-            txn.getXID(), Thread.currentThread().getName()).getMessage());\r\n-        \r\n-        byte[] global =\r\n-            Long.toHexString(System.currentTimeMillis()).getBytes();\r\n-        XID xid = new XID(0, global, new byte[] { 0x1 });\r\n-        txn = new DistributedXATransaction(xid, this);\r\n-        txns.set(txn);\r\n-        \r\n-        return txn;\r\n-    }\r\n-    \r\n-\r\n-}\r"},{"sha":"64cec78a024389cb7895b4aabaff3cb44504eb0f","filename":"openjpa-slice/src/main/java/org/apache/openjpa/slice/transaction/DistributedXATransaction.java","status":"removed","additions":0,"deletions":101,"changes":101,"blob_url":"https://github.com/apache/openjpa/blob/de8a4760c8b7df2186cd831733b8fdc095dbc736/openjpa-slice/src/main/java/org/apache/openjpa/slice/transaction/DistributedXATransaction.java","raw_url":"https://github.com/apache/openjpa/raw/de8a4760c8b7df2186cd831733b8fdc095dbc736/openjpa-slice/src/main/java/org/apache/openjpa/slice/transaction/DistributedXATransaction.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/main/java/org/apache/openjpa/slice/transaction/DistributedXATransaction.java?ref=de8a4760c8b7df2186cd831733b8fdc095dbc736","patch":"@@ -1,101 +0,0 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.slice.transaction;\r\n-\r\n-import java.util.Collections;\r\n-import java.util.HashSet;\r\n-import java.util.Set;\r\n-\r\n-import javax.transaction.HeuristicMixedException;\r\n-import javax.transaction.HeuristicRollbackException;\r\n-import javax.transaction.RollbackException;\r\n-import javax.transaction.Status;\r\n-import javax.transaction.Synchronization;\r\n-import javax.transaction.SystemException;\r\n-import javax.transaction.Transaction;\r\n-import javax.transaction.TransactionManager;\r\n-import javax.transaction.xa.XAResource;\r\n-\r\n-/**\r\n- * Internal implementation of a Transaction with an internal global transaction\r\n- * identifier scheme.\r\n- * \r\n- * @author Pinaki Poddar \r\n- *\r\n- */\r\n-class DistributedXATransaction implements Transaction {\r\n-    private Set<XAResource> _slices = new HashSet<XAResource>();\r\n-    private Set<Synchronization> _syncs = new HashSet<Synchronization>();\r\n-//    private final TransactionManager _tm;\r\n-    private final XID xid;\r\n-    private int _status;\r\n-    \r\n-    /**\r\n-     * Construct with \r\n-     * @param xid\r\n-     * @param tm\r\n-     */\r\n-    DistributedXATransaction(XID xid, TransactionManager tm) {\r\n-        this.xid = xid;\r\n-        _status = Status.STATUS_ACTIVE;\r\n-    }\r\n-    \r\n-    public XID getXID() {\r\n-        return xid;\r\n-    }\r\n-    \r\n-    public void commit() throws HeuristicMixedException,\r\n-            HeuristicRollbackException, RollbackException, SecurityException,\r\n-            SystemException {\r\n-        _status = Status.STATUS_COMMITTED;\r\n-        _slices.clear();\r\n-    }\r\n-\r\n-    public boolean delistResource(XAResource arg0, int arg1)\r\n-            throws IllegalStateException, SystemException {\r\n-        return _slices.remove(arg0);\r\n-    }\r\n-\r\n-    public boolean enlistResource(XAResource arg0)\r\n-            throws IllegalStateException, RollbackException, SystemException {\r\n-        return _slices.add(arg0);\r\n-    }\r\n-\r\n-    public int getStatus() throws SystemException {\r\n-        return _status;\r\n-    }\r\n-\r\n-    public void registerSynchronization(Synchronization arg0)\r\n-            throws IllegalStateException, RollbackException, SystemException {\r\n-        _syncs.add(arg0);\r\n-    }\r\n-\r\n-    public void rollback() throws IllegalStateException, SystemException {\r\n-        _status = Status.STATUS_ROLLEDBACK;\r\n-        _slices.clear();\r\n-    }\r\n-\r\n-    public void setRollbackOnly() throws IllegalStateException, SystemException {\r\n-        _status = Status.STATUS_MARKED_ROLLBACK;\r\n-    }\r\n-    \r\n-    Set<XAResource> getEnlistedResources() {\r\n-        return Collections.unmodifiableSet(_slices);\r\n-    }\r\n-}\r"},{"sha":"3b4e3476100595b7e4599d3d75fb77dabb347a32","filename":"openjpa-slice/src/main/java/org/apache/openjpa/slice/transaction/NaiveTransactionManager.java","status":"removed","additions":0,"deletions":125,"changes":125,"blob_url":"https://github.com/apache/openjpa/blob/de8a4760c8b7df2186cd831733b8fdc095dbc736/openjpa-slice/src/main/java/org/apache/openjpa/slice/transaction/NaiveTransactionManager.java","raw_url":"https://github.com/apache/openjpa/raw/de8a4760c8b7df2186cd831733b8fdc095dbc736/openjpa-slice/src/main/java/org/apache/openjpa/slice/transaction/NaiveTransactionManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/main/java/org/apache/openjpa/slice/transaction/NaiveTransactionManager.java?ref=de8a4760c8b7df2186cd831733b8fdc095dbc736","patch":"@@ -1,125 +0,0 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.slice.transaction;\r\n-\r\n-import java.sql.SQLException;\r\n-import java.util.Set;\r\n-\r\n-import javax.transaction.HeuristicMixedException;\r\n-import javax.transaction.HeuristicRollbackException;\r\n-import javax.transaction.InvalidTransactionException;\r\n-import javax.transaction.NotSupportedException;\r\n-import javax.transaction.RollbackException;\r\n-import javax.transaction.SystemException;\r\n-import javax.transaction.Transaction;\r\n-import javax.transaction.TransactionManager;\r\n-\r\n-import org.apache.openjpa.lib.util.Localizer;\r\n-import org.apache.openjpa.slice.jdbc.SliceStoreManager;\r\n-\r\n-/**\r\n- * A fake transaction manager which runs a serial commit or rollback across\r\n- * the enlisted non-XA resources without any two-phase commit protocol. \r\n- *  \r\n- * @author Pinaki Poddar \r\n- *\r\n- */\r\n-public class NaiveTransactionManager implements TransactionManager {\r\n-    private final ThreadLocal<DistributedNaiveTransaction> _txns = \r\n-        new ThreadLocal<DistributedNaiveTransaction>();\r\n-    private static final Localizer _loc = \r\n-        Localizer.forPackage(NaiveTransactionManager.class);\r\n-\r\n-    public void begin() throws NotSupportedException, SystemException {\r\n-        DistributedNaiveTransaction txn = getTransaction(false);\r\n-        Set<SliceStoreManager> slices = txn.getEnlistedResources();\r\n-        for (SliceStoreManager slice : slices) {\r\n-            slice.getConnection();\r\n-            slice.begin();\r\n-        }\r\n-    }\r\n-\r\n-    public void commit() throws HeuristicMixedException,\r\n-            HeuristicRollbackException, IllegalStateException,\r\n-            RollbackException, SecurityException, SystemException {\r\n-        DistributedNaiveTransaction txn = getTransaction(false);\r\n-        Set<SliceStoreManager> slices = txn.getEnlistedResources();\r\n-        for (SliceStoreManager slice : slices) {\r\n-            try {\r\n-                if (!slice.getConnection().getAutoCommit())\r\n-                    slice.commit();\r\n-            } catch (SQLException e) {\r\n-                e.printStackTrace();\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-    public int getStatus() throws SystemException {\r\n-        return getTransaction().getStatus();\r\n-    }\r\n-\r\n-    public Transaction getTransaction() throws SystemException {\r\n-        return getTransaction(false);\r\n-    }\r\n-\r\n-    public void resume(Transaction arg0) throws IllegalStateException,\r\n-            InvalidTransactionException, SystemException {\r\n-        throw new UnsupportedOperationException();\r\n-    }\r\n-\r\n-    public void rollback() throws IllegalStateException, SecurityException,\r\n-            SystemException {\r\n-        DistributedNaiveTransaction txn = getTransaction(false);\r\n-        Set<SliceStoreManager> slices = txn.getEnlistedResources();\r\n-        for (SliceStoreManager slice : slices) {\r\n-            try {\r\n-                if (!slice.getConnection().getAutoCommit())\r\n-                    slice.rollback();\r\n-            } catch (SQLException e) {\r\n-                e.printStackTrace();\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-    public void setRollbackOnly() throws IllegalStateException, SystemException {\r\n-        getTransaction().setRollbackOnly();\r\n-    }\r\n-\r\n-    public void setTransactionTimeout(int arg0) throws SystemException {\r\n-        throw new UnsupportedOperationException();\r\n-    }\r\n-\r\n-    public Transaction suspend() throws SystemException {\r\n-        throw new UnsupportedOperationException();\r\n-    }\r\n-    \r\n-    DistributedNaiveTransaction getTransaction(boolean mustExist) {\r\n-        DistributedNaiveTransaction txn = _txns.get();\r\n-        if (txn == null) {\r\n-            if (mustExist)\r\n-                throw new IllegalStateException(_loc.get(\"no-txn-on-thread\",\r\n-                        Thread.currentThread().getName()).getMessage());\r\n-            txn = new DistributedNaiveTransaction(this);\r\n-            _txns.set(txn);\r\n-        }\r\n-        return txn;\r\n-    }\r\n-\r\n-\r\n-}\r"},{"sha":"cf272c2622bde4498669b51ae3e785b01e1fb2d0","filename":"openjpa-slice/src/main/java/org/apache/openjpa/slice/transaction/XID.java","status":"removed","additions":0,"deletions":83,"changes":83,"blob_url":"https://github.com/apache/openjpa/blob/de8a4760c8b7df2186cd831733b8fdc095dbc736/openjpa-slice/src/main/java/org/apache/openjpa/slice/transaction/XID.java","raw_url":"https://github.com/apache/openjpa/raw/de8a4760c8b7df2186cd831733b8fdc095dbc736/openjpa-slice/src/main/java/org/apache/openjpa/slice/transaction/XID.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/main/java/org/apache/openjpa/slice/transaction/XID.java?ref=de8a4760c8b7df2186cd831733b8fdc095dbc736","patch":"@@ -1,83 +0,0 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.slice.transaction;\r\n-\r\n-import javax.transaction.xa.Xid;\r\n-\r\n-/**\r\n- * Internally used Global Transaction Identifier for two-phase distributed\r\n- * commit protocol.\r\n- * \r\n- * @author Pinaki Poddar\r\n- * \r\n- */\r\n-class XID implements Xid {\r\n-    private final int format;\r\n-    private final byte[] global;\r\n-    private final byte[] branch;\r\n-\r\n-    public XID(int format, byte[] global, byte[] branch) {\r\n-        super();\r\n-        this.format = format;\r\n-        this.global = global;\r\n-        this.branch = branch;\r\n-    }\r\n-\r\n-    public byte[] getBranchQualifier() {\r\n-        return branch;\r\n-    }\r\n-\r\n-    public int getFormatId() {\r\n-        return format;\r\n-    }\r\n-\r\n-    public byte[] getGlobalTransactionId() {\r\n-        return global;\r\n-    }\r\n-\r\n-    XID branch(Number number) {\r\n-        return branch((number == null) ? \"null\" : number.toString());\r\n-    }\r\n-    \r\n-    XID branch(String branch) {\r\n-        return new XID(format, global, branch.getBytes());\r\n-    }\r\n-\r\n-    public String toString() {\r\n-        return new String(global) + \":\" + new String(branch);\r\n-    }\r\n-\r\n-    public boolean equals(Object other) {\r\n-        if (other instanceof XID) {\r\n-            XID that = (XID) other;\r\n-            return format == that.format && equals(global, that.global)\r\n-                    && equals(branch, that.branch);\r\n-        }\r\n-        return false;\r\n-    }\r\n-\r\n-    boolean equals(byte[] a, byte[] b) {\r\n-        if (a == null && b == null)\r\n-            return true;\r\n-        if (a == null || b == null)\r\n-            return false;\r\n-        return new String(a).equals(new String(b));\r\n-    }\r\n-\r\n-}\r"},{"sha":"1133ca0552ee11d885d31718d026eaa38f001f9c","filename":"openjpa-slice/src/main/java/org/apache/openjpa/slice/transaction/package.html","status":"removed","additions":0,"deletions":28,"changes":28,"blob_url":"https://github.com/apache/openjpa/blob/de8a4760c8b7df2186cd831733b8fdc095dbc736/openjpa-slice/src/main/java/org/apache/openjpa/slice/transaction/package.html","raw_url":"https://github.com/apache/openjpa/raw/de8a4760c8b7df2186cd831733b8fdc095dbc736/openjpa-slice/src/main/java/org/apache/openjpa/slice/transaction/package.html","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/main/java/org/apache/openjpa/slice/transaction/package.html?ref=de8a4760c8b7df2186cd831733b8fdc095dbc736","patch":"@@ -1,28 +0,0 @@\n-<!--\r\n- Licensed to the Apache Software Foundation (ASF) under one\r\n- or more contributor license agreements.  See the NOTICE file\r\n- distributed with this work for additional information\r\n- regarding copyright ownership.  The ASF licenses this file\r\n- to you under the Apache License, Version 2.0 (the\r\n- \"License\"); you may not use this file except in compliance\r\n- with the License.  You may obtain a copy of the License at\r\n- \r\n- http://www.apache.org/licenses/LICENSE-2.0\r\n- \r\n- Unless required by applicable law or agreed to in writing,\r\n- software distributed under the License is distributed on an\r\n- \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- KIND, either express or implied.  See the License for the\r\n- specific language governing permissions and limitations\r\n- under the License.   \r\n--->\r\n-<HTML>\r\n-<BODY>\r\n-Implements TransactionManager to manage transactions across the database\r\n-slices. This package provides two flavors of TransactionManager: one provides\r\n-two-phase commit protocol when all underlying database slices is XA-complaint;\r\n-while the other runs commit/rollback simply looping across all database slices\r\n-when one or more underlying database slices is not XA-complaint and hence does \r\n-not guarantee atomic nature of transaction.  \r\n-</BODY>\r\n-</HTML> \n\\ No newline at end of file"},{"sha":"6572d067d81443f4c8d18fdcdf2c5940ddc9f430","filename":"openjpa-slice/src/test/java/org/apache/openjpa/slice/DummyTest.java","status":"removed","additions":0,"deletions":32,"changes":32,"blob_url":"https://github.com/apache/openjpa/blob/de8a4760c8b7df2186cd831733b8fdc095dbc736/openjpa-slice/src/test/java/org/apache/openjpa/slice/DummyTest.java","raw_url":"https://github.com/apache/openjpa/raw/de8a4760c8b7df2186cd831733b8fdc095dbc736/openjpa-slice/src/test/java/org/apache/openjpa/slice/DummyTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/test/java/org/apache/openjpa/slice/DummyTest.java?ref=de8a4760c8b7df2186cd831733b8fdc095dbc736","patch":"@@ -1,32 +0,0 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.slice;\r\n-\r\n-import junit.framework.TestCase;\r\n-\r\n-public class DummyTest extends TestCase {\r\n-    public void testDeactive() {\r\n-        System.err.println(\"\\t\\t============================= WARNING ====================================\");\r\n-        System.err.println(\"\\t\\tTest for distributed database is deactivated\");\r\n-        System.err.println(\"\\t\\tTo activate: \");\r\n-        System.err.println(\"\\t\\t   1. create databases as per META-INF/persistence.xml in openjpa-slice module\");\r\n-        System.err.println(\"\\t\\t   2. uncomment the SureFire plugin in pom.xml\");\r\n-        System.err.println(\"\\t\\t==========================================================================\");\r\n-    }\r\n-}\r"},{"sha":"7a0fc6e3a9fc9617b0b60a3addb27f037425690e","filename":"openjpa-slice/src/test/java/org/apache/openjpa/slice/PObject.java","status":"modified","additions":3,"deletions":5,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/c457053f9459293915fb41d1cdea09e014a0175d/openjpa-slice/src/test/java/org/apache/openjpa/slice/PObject.java","raw_url":"https://github.com/apache/openjpa/raw/c457053f9459293915fb41d1cdea09e014a0175d/openjpa-slice/src/test/java/org/apache/openjpa/slice/PObject.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/test/java/org/apache/openjpa/slice/PObject.java?ref=c457053f9459293915fb41d1cdea09e014a0175d","patch":"@@ -28,12 +28,10 @@\n \t\r\n \tprivate int value;\r\n \t\r\n-\tpublic PObject() {\r\n-\t\tthis(System.currentTimeMillis());\r\n-\t}\r\n+\tprivate static long idCounter = System.currentTimeMillis();\r\n \t\r\n-\tpublic PObject(long id) {\r\n-\t\tthis.id = id;\r\n+\tpublic PObject() {\r\n+\t\tid = ++idCounter;\r\n \t}\r\n \t\r\n \tpublic long getId() {\r"},{"sha":"e61ca7c3aaaa11e3c3212ef5bf016df04868db47","filename":"openjpa-slice/src/test/java/org/apache/openjpa/slice/PersistenceTestCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/c457053f9459293915fb41d1cdea09e014a0175d/openjpa-slice/src/test/java/org/apache/openjpa/slice/PersistenceTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/c457053f9459293915fb41d1cdea09e014a0175d/openjpa-slice/src/test/java/org/apache/openjpa/slice/PersistenceTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/test/java/org/apache/openjpa/slice/PersistenceTestCase.java?ref=c457053f9459293915fb41d1cdea09e014a0175d","patch":"@@ -215,8 +215,8 @@ private void clear(EntityManagerFactory emf, boolean closeEMs, ClassMetaData...\n             if (!meta.isMapped() || meta.isEmbeddedOnly() \r\n                 || Modifier.isAbstract(meta.getDescribedType().getModifiers()))\r\n                 continue;\r\n-            em.createQuery(\"DELETE FROM \" + meta.getTypeAlias() + \" o\").\r\n-                executeUpdate();\r\n+//            em.createQuery(\"DELETE FROM \" + meta.getTypeAlias() + \" o\").\r\n+//                executeUpdate();\r\n         }\r\n         em.getTransaction().commit();\r\n         em.close();\r"},{"sha":"6bde7d8b61e9fb0de73cbe678ef4128ee9e534f5","filename":"openjpa-slice/src/test/java/org/apache/openjpa/slice/TestBasic.java","status":"modified","additions":157,"deletions":129,"changes":286,"blob_url":"https://github.com/apache/openjpa/blob/c457053f9459293915fb41d1cdea09e014a0175d/openjpa-slice/src/test/java/org/apache/openjpa/slice/TestBasic.java","raw_url":"https://github.com/apache/openjpa/raw/c457053f9459293915fb41d1cdea09e014a0175d/openjpa-slice/src/test/java/org/apache/openjpa/slice/TestBasic.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/test/java/org/apache/openjpa/slice/TestBasic.java?ref=c457053f9459293915fb41d1cdea09e014a0175d","patch":"@@ -18,144 +18,172 @@\n  */\r\n package org.apache.openjpa.slice;\r\n \r\n+import java.util.ArrayList;\r\n import java.util.List;\r\n \r\n import javax.persistence.EntityManager;\r\n \r\n+/**\r\n+ * Tests basic create, read, update and delete operations.\r\n+ * \r\n+ * @author Pinaki Poddar \r\n+ *\r\n+ */\r\n public class TestBasic extends SliceTestCase {\r\n-\tprivate static String persistenceUnitName = \"slice\";\r\n-\r\n-\tpublic void setUp() throws Exception {\r\n-\t\tsuper.setUp(PObject.class, Person.class, Address.class);\r\n-\t}\r\n-\t\r\n-\tPObject persist() {\r\n-\t\tEntityManager em = emf.createEntityManager();\r\n-\t\tint value = (int)(System.currentTimeMillis()%100);\r\n-\t\tPObject pc = new PObject();\r\n-\t\tem.getTransaction().begin();\r\n-\t\tem.persist(pc);\r\n-\t\tpc.setValue(value);\r\n-\t\tem.getTransaction().commit();\r\n-\t\tem.clear();\r\n-\t\treturn pc;\r\n-\t}\r\n-\r\n-\tpublic void testDelete() {\r\n+    \r\n+    protected String getPersistenceUnitName() {\r\n+        return \"slice\";\r\n+    }\r\n+\r\n+\r\n+    public void setUp() throws Exception {\r\n+        super.setUp(PObject.class, Person.class, Address.class, CLEAR_TABLES);\r\n+    }\r\n+\r\n+    /**\r\n+     * Persist N objects.\r\n+     */\r\n+    List<PObject> create(int N) {\r\n+        List<PObject> pcs = new ArrayList<PObject>();\r\n+        EntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        for (int i = 0; i < N; i++) {\r\n+            PObject pc = new PObject();\r\n+            pcs.add(pc);\r\n+            em.persist(pc);\r\n+            pc.setValue(i);\r\n+        }\r\n+        em.getTransaction().commit();\r\n+        em.clear();\r\n+        return pcs;\r\n+    }\r\n+\r\n+    /**\r\n+     * Create a single object.\r\n+     */\r\n+    PObject create() {\r\n+        return create(1).get(0);\r\n+    }\r\n+\r\n+    /**\r\n+     * Delete a single object by EntityManager.remove()\r\n+     */\r\n+    public void testDelete() {\r\n+        int N = 10;\r\n+        create(N);\r\n         EntityManager em = emf.createEntityManager();\r\n         em.getTransaction().begin();\r\n+        int before = count(PObject.class);\r\n         List all = em.createQuery(\"SELECT p FROM PObject p\").getResultList();\r\n-        for (Object pc:all)\r\n-            em.remove(pc);\r\n+        assertFalse(all.isEmpty());\r\n+        em.remove(all.get(0));\r\n         em.getTransaction().commit();\r\n-        \r\n-        int count = count(PObject.class);\r\n-        assertEquals(0, count);\r\n-        \r\n-\t}\r\n-\t\r\n-\t   public void testBulkDelete() {\r\n-\t        EntityManager em = emf.createEntityManager();\r\n-\t        em.getTransaction().begin();\r\n-\t        int c = count(PObject.class);\r\n-\t        int d = em.createQuery(\"DELETE FROM PObject p\").executeUpdate();\r\n-\t        assertEquals(c, d);\r\n-\t        em.getTransaction().commit();\r\n-\t        \r\n-\t        c = count(PObject.class);\r\n-\t        assertEquals(0, c);\r\n-\t        \r\n-\t    }\r\n-\r\n-\t/**\r\n-\t * Stores and finds the same object.\r\n-\t */\r\n-\tpublic void testFind() {\r\n-\t\tPObject pc = persist();\r\n-\t\tint value = pc.getValue();\r\n-\t\t\r\n-\t\tEntityManager em = emf.createEntityManager();\r\n-\t\tem.getTransaction().begin();\r\n-\t\tPObject pc2 = em.find(PObject.class, pc.getId());\r\n-\t\tassertNotNull(pc2);\r\n-\t\tassertNotEquals(pc, pc2);\r\n-\t\tassertEquals(pc.getId(), pc2.getId());\r\n-\t\tassertEquals(value, pc2.getValue());\r\n-\t}\r\n-\t\r\n-\tpublic void testPersistIndependentObjects() {\r\n-\t\tint before = count(PObject.class);\r\n-\t\tEntityManager em = emf.createEntityManager();\r\n-\t\tint N = 2;\r\n-\t\tlong start = System.currentTimeMillis();\r\n-\t\tem.getTransaction().begin();\r\n-\t\tfor (int i=0; i<N; i++)\r\n-\t\t\tem.persist(new PObject(start++));\r\n-\t\tem.getTransaction().commit();\r\n-\t\tem.clear();\r\n-\t\tint after = count(PObject.class);\r\n-\t\tassertEquals(before+N, after);\r\n-\t}\r\n-\t\r\n-\tpublic void testPersistConnectedObjectGraph() {\r\n-\t\tPerson p1 = new Person(\"A\");\r\n-\t\tPerson p2 = new Person(\"B\");\r\n-\t\tPerson p3 = new Person(\"C\");\r\n-\t\tAddress a1 = new Address(\"Rome\", 12345);\r\n-\t\tAddress a2 = new Address(\"San Francisco\", 23456);\r\n-\t\tAddress a3 = new Address(\"New York\", 34567);\r\n-\t\tp1.setAddress(a1);\r\n-\t\tp2.setAddress(a2);\r\n-\t\tp3.setAddress(a3);\r\n-\t\t\r\n-\t\tEntityManager em = emf.createEntityManager();\r\n-\t\tem.getTransaction().begin();\r\n-\t\tem.persist(p1);\r\n-\t\tem.persist(p2);\r\n-\t\tem.persist(p3);\r\n-\t\tem.getTransaction().commit();\r\n-\t\t\r\n-\t\tem.clear();\r\n-\t\t\r\n-\t\tem = emf.createEntityManager();\r\n-\t\tem.getTransaction().begin();\r\n-\t\tList<Person> persons = em.createQuery(\"SELECT p FROM Person p WHERE p.name=?1\").\r\n-\t\t\tsetParameter(1, \"A\").getResultList();\r\n-\t\tList<Address> addresses = em.createQuery(\"SELECT a FROM Address a\").getResultList();\r\n-\t\tfor (Address pc:addresses) {\r\n-\t\t\tassertNotNull(pc.getCity());\r\n-\t\t\tassertNotNull(pc.getOwner().getName());\r\n-\t\t}\r\n-\t\tfor (Person pc:persons) {\r\n-\t\t    assertNotNull(pc.getName());\r\n-\t\t    assertNotNull(pc.getAddress().getCity());\r\n-\t\t}\r\n-\t\tem.getTransaction().rollback();\r\n-\t}\r\n-\t\r\n-\t/**\r\n-\t * Merge only works if the distribution policy assigns the correct slice\r\n-\t * from which the instance was fetched.\r\n-\t */\r\n-\tpublic void testMerge() {\r\n-\t\tPObject pc = persist();\r\n-\t\tint value = pc.getValue();\r\n-\t\tpc.setValue(value+1);\r\n-\t\tassertNotNull(pc);\r\n-\t\tEntityManager em = emf.createEntityManager();\r\n-\t\tem.getTransaction().begin();\r\n-\t\tPObject pc2 = em.merge(pc);\r\n-\t\tem.getTransaction().commit();\r\n-\t\tem.clear();\r\n-\t\t\r\n-\t\tassertNotNull(pc2);\r\n-\t\tassertNotEquals(pc, pc2);\r\n-\t\tassertEquals(pc.getId(), pc2.getId());\r\n-\t\tassertEquals(value+1, pc2.getValue());\r\n-\t}\r\n-\t\r\n-    protected String getPersistenceUnitName() {\r\n-        return persistenceUnitName;\r\n+\r\n+        int after = count(PObject.class);\r\n+        assertEquals(before - 1, after);\r\n+    }\r\n+\r\n+    /**\r\n+     * Delete in bulk by query.\r\n+     */\r\n+    public void testBulkDelete() {\r\n+        EntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        int c = count(PObject.class);\r\n+        int d = em.createQuery(\"DELETE FROM PObject p\").executeUpdate();\r\n+        assertEquals(c, d);\r\n+        em.getTransaction().commit();\r\n+        c = count(PObject.class);\r\n+        assertEquals(0, c);\r\n+\r\n+    }\r\n+\r\n+    /**\r\n+     * Store and find the same object.\r\n+     */\r\n+    public void testFind() {\r\n+        PObject pc = create();\r\n+        int value = pc.getValue();\r\n+\r\n+        EntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        PObject pc2 = em.find(PObject.class, pc.getId());\r\n+        assertNotNull(pc2);\r\n+        assertNotEquals(pc, pc2);\r\n+        assertEquals(pc.getId(), pc2.getId());\r\n+        assertEquals(value, pc2.getValue());\r\n+    }\r\n+\r\n+    public void testPersistIndependentObjects() {\r\n+        int before = count(PObject.class);\r\n+        EntityManager em = emf.createEntityManager();\r\n+        int N = 2;\r\n+        em.getTransaction().begin();\r\n+        for (int i = 0; i < N; i++)\r\n+            em.persist(new PObject());\r\n+        em.getTransaction().commit();\r\n+        em.clear();\r\n+        int after = count(PObject.class);\r\n+        assertEquals(before + N, after);\r\n+    }\r\n+\r\n+    public void testPersistConnectedObjectGraph() {\r\n+        Person p1 = new Person(\"A\");\r\n+        Person p2 = new Person(\"B\");\r\n+        Person p3 = new Person(\"C\");\r\n+        Address a1 = new Address(\"Rome\", 12345);\r\n+        Address a2 = new Address(\"San Francisco\", 23456);\r\n+        Address a3 = new Address(\"New York\", 34567);\r\n+        p1.setAddress(a1);\r\n+        p2.setAddress(a2);\r\n+        p3.setAddress(a3);\r\n+\r\n+        EntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        em.persist(p1);\r\n+        em.persist(p2);\r\n+        em.persist(p3);\r\n+        em.getTransaction().commit();\r\n+\r\n+        em.clear();\r\n+\r\n+        em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        List<Person> persons =\r\n+                em.createQuery(\"SELECT p FROM Person p WHERE p.name=?1\")\r\n+                        .setParameter(1, \"A\").getResultList();\r\n+        List<Address> addresses =\r\n+                em.createQuery(\"SELECT a FROM Address a\").getResultList();\r\n+        for (Address pc : addresses) {\r\n+            assertNotNull(pc.getCity());\r\n+            assertNotNull(pc.getOwner().getName());\r\n+        }\r\n+        for (Person pc : persons) {\r\n+            assertNotNull(pc.getName());\r\n+            assertNotNull(pc.getAddress().getCity());\r\n+        }\r\n+        em.getTransaction().rollback();\r\n+    }\r\n+\r\n+    /**\r\n+     * Merge only works if the distribution policy assigns the correct slice\r\n+     * from which the instance was fetched.\r\n+     */\r\n+    public void testMerge() {\r\n+        PObject pc = create(1).get(0);\r\n+        int value = pc.getValue();\r\n+        pc.setValue(value + 1);\r\n+        assertNotNull(pc);\r\n+        EntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        PObject pc2 = em.merge(pc);\r\n+        em.getTransaction().commit();\r\n+        em.clear();\r\n+\r\n+        assertNotNull(pc2);\r\n+        assertNotEquals(pc, pc2);\r\n+        assertEquals(pc.getId(), pc2.getId());\r\n+        assertEquals(value + 1, pc2.getValue());\r\n     }\r\n \r\n }\r"},{"sha":"77f57180de3ac6196eaa3c4444069cf46f6451fb","filename":"openjpa-slice/src/test/java/org/apache/openjpa/slice/TestConfiguration.java","status":"modified","additions":23,"deletions":35,"changes":58,"blob_url":"https://github.com/apache/openjpa/blob/c457053f9459293915fb41d1cdea09e014a0175d/openjpa-slice/src/test/java/org/apache/openjpa/slice/TestConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/c457053f9459293915fb41d1cdea09e014a0175d/openjpa-slice/src/test/java/org/apache/openjpa/slice/TestConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/test/java/org/apache/openjpa/slice/TestConfiguration.java?ref=c457053f9459293915fb41d1cdea09e014a0175d","patch":"@@ -25,51 +25,39 @@\n import org.apache.openjpa.persistence.EntityManagerFactoryImpl;\r\n import org.apache.openjpa.slice.jdbc.DistributedJDBCBrokerFactory;\r\n import org.apache.openjpa.slice.jdbc.DistributedJDBCConfiguration;\r\n-import org.apache.openjpa.slice.transaction.NaiveTransactionManager;\r\n \r\n /**\r\n+ * Tests user-level configuration is set on per-slice basis.\r\n+ * \r\n+ * @author Pinaki Poddar\r\n  * \r\n- * @author Pinaki Poddar \r\n- *\r\n  */\r\n public class TestConfiguration extends SliceTestCase {\r\n-\t/**\r\n-\t * Tests that user-level configurations are set.\r\n-\t * \r\n-\t */\r\n-\tpublic void testConfig() {\r\n-\t\tassertTrue(emf.getConfiguration() instanceof DistributedConfiguration);\r\n-\t\tDistributedJDBCConfiguration conf = (DistributedJDBCConfiguration)\r\n-\t\t    emf.getConfiguration();\r\n-\t\tList<String> slices = conf.getAvailableSliceNames();\r\n-\t\tassertTrue(slices.size()>1);\r\n-\t\tassertTrue(slices.contains(\"One\"));\r\n+    protected String getPersistenceUnitName() {\r\n+        return \"per-slice\";\r\n+    }\r\n+\r\n+    public void testConfig() {\r\n+        assertTrue(emf.getConfiguration() instanceof DistributedConfiguration);\r\n+        DistributedJDBCConfiguration conf =\r\n+                (DistributedJDBCConfiguration) emf.getConfiguration();\r\n+        List<String> slices = conf.getAvailableSliceNames();\r\n+        assertTrue(slices.size() > 1);\r\n+        assertTrue(slices.contains(\"One\"));\r\n         assertTrue(slices.contains(\"Two\"));\r\n         assertTrue(slices.contains(\"Three\"));\r\n-\t\tassertEquals(\"jdbc:mysql://localhost/slice1\", conf.getSlice(\"One\").getConfiguration().getConnectionURL());\r\n-        assertEquals(\"jdbc:mysql://localhost/slice2\", conf.getSlice(\"Two\").getConfiguration().getConnectionURL());\r\n-        assertEquals(\"jdbc:mysql://localhost/slice3\", conf.getSlice(\"Three\").getConfiguration().getConnectionURL());\r\n-        assertTrue(conf.getTransactionManagerInstance() instanceof NaiveTransactionManager);\r\n-\t\tBrokerFactory bf = ((EntityManagerFactoryImpl)emf).getBrokerFactory();\r\n-\t\tBroker broker = bf.newBroker();\r\n-\t\tassertEquals(DistributedJDBCBrokerFactory.class, bf.getClass());\r\n-\t\tassertEquals(DistributedBrokerImpl.class, broker.getClass());\r\n-\t\tassertNotNull(conf.getDistributionPolicyInstance());\r\n-\t\t\r\n-\t\t\r\n-\t\temf.createEntityManager();\r\n-\t\t\r\n+        BrokerFactory bf = ((EntityManagerFactoryImpl) emf).getBrokerFactory();\r\n+        Broker broker = bf.newBroker();\r\n+        assertEquals(DistributedJDBCBrokerFactory.class, bf.getClass());\r\n+        assertEquals(DistributedBrokerImpl.class, broker.getClass());\r\n+        assertNotNull(conf.getDistributionPolicyInstance());\r\n+\r\n+        emf.createEntityManager();\r\n+\r\n         slices = conf.getActiveSliceNames();\r\n-        assertTrue(slices.size()>1);\r\n+        assertTrue(slices.size() > 1);\r\n         assertTrue(slices.contains(\"One\"));\r\n         assertTrue(slices.contains(\"Two\"));\r\n         assertFalse(slices.contains(\"Three\"));\r\n-        \r\n-        conf.getExecutorServiceInstance();\r\n-\t}\r\n-\t\r\n-    protected String getPersistenceUnitName() {\r\n-        return \"per-slice\";\r\n     }\r\n-\r\n }\r"},{"sha":"1c0875348c50b0f32503250507a8aadcc0a2a7c2","filename":"openjpa-slice/src/test/java/org/apache/openjpa/slice/TestQuery.java","status":"modified","additions":43,"deletions":22,"changes":65,"blob_url":"https://github.com/apache/openjpa/blob/c457053f9459293915fb41d1cdea09e014a0175d/openjpa-slice/src/test/java/org/apache/openjpa/slice/TestQuery.java","raw_url":"https://github.com/apache/openjpa/raw/c457053f9459293915fb41d1cdea09e014a0175d/openjpa-slice/src/test/java/org/apache/openjpa/slice/TestQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/test/java/org/apache/openjpa/slice/TestQuery.java?ref=c457053f9459293915fb41d1cdea09e014a0175d","patch":"@@ -19,27 +19,43 @@\n package org.apache.openjpa.slice;\r\n \r\n import java.util.ArrayList;\r\n-import java.util.Arrays;\r\n import java.util.List;\r\n \r\n import javax.persistence.EntityManager;\r\n import javax.persistence.Query;\r\n \r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-import org.apache.openjpa.slice.SlicePersistence;\r\n-\r\n+/**\r\n+ * Tests query ordering.\r\n+ * \r\n+ * @author Pinaki Poddar \r\n+ *\r\n+ */\r\n public class TestQuery extends SliceTestCase {\r\n+    private int POBJECT_COUNT = 25;\r\n+    private int VALUE_MIN = 100;\r\n+    private int VALUE_MAX = VALUE_MIN + POBJECT_COUNT - 1;\r\n+    \r\n+    protected String getPersistenceUnitName() {\r\n+        return \"ordering\";\r\n+    }\r\n+\r\n     public void setUp() throws Exception {\r\n-        super.setUp(PObject.class, Person.class, Address.class);\r\n+        super.setUp(PObject.class, Person.class, Address.class, CLEAR_TABLES);\r\n+        int count = count(PObject.class);\r\n+        if (count == 0) {\r\n+            create(POBJECT_COUNT);\r\n+        }\r\n+    }\r\n+    \r\n+    void create(int N) {\r\n         EntityManager em = emf.createEntityManager();\r\n         em.getTransaction().begin();\r\n-        long id = System.currentTimeMillis();\r\n-        for (int i=0;i<10;i++) {\r\n-            PObject pc = new PObject(id++);\r\n-            pc.setValue(i);\r\n+        for (int i=0;i<POBJECT_COUNT;i++) {\r\n+            PObject pc = new PObject();\r\n+            pc.setValue(VALUE_MIN + i);\r\n             em.persist(pc);\r\n             String slice = SlicePersistence.getSlice(pc);\r\n-            String expected = (i%2 == 0) ? \"Even\" : \"Odd\";\r\n+            String expected = (pc.getValue()%2 == 0) ? \"Even\" : \"Odd\";\r\n             assertEquals(expected, slice);\r\n         }\r\n         em.getTransaction().commit();\r\n@@ -51,22 +67,30 @@ public void testQueryResultIsOrderedAcrossSlice() {\n         Query query = em.createQuery(\"SELECT p.value,p FROM PObject p ORDER BY p.value ASC\");\r\n         List result = query.getResultList();\r\n         Integer old = Integer.MIN_VALUE;\r\n-        for (Object row:result) {\r\n+        for (Object row : result) {\r\n             Object[] line = (Object[])row;\r\n             int value = ((Integer)line[0]).intValue();\r\n             PObject pc = (PObject)line[1];\r\n             assertTrue(value >= old);\r\n             old = value;\r\n             assertEquals(value, pc.getValue());\r\n         }\r\n-        em.getTransaction().commit();\r\n+        em.getTransaction().rollback();\r\n     }\r\n     \r\n     public void testAggregateQuery() {\r\n         EntityManager em = emf.createEntityManager();\r\n-        List result = em.createQuery(\"SELECT COUNT(p) FROM PObject p\").getResultList();\r\n-        for (Object r:result)\r\n-            System.err.println(r);\r\n+        em.getTransaction().begin();\r\n+        Object count = em.createQuery(\"SELECT COUNT(p) FROM PObject p\").getSingleResult();\r\n+        Object max   = em.createQuery(\"SELECT MAX(p.value) FROM PObject p\").getSingleResult();\r\n+        Object min   = em.createQuery(\"SELECT MIN(p.value) FROM PObject p\").getSingleResult();\r\n+        Object sum   = em.createQuery(\"SELECT SUM(p.value) FROM PObject p\").getSingleResult();\r\n+        em.getTransaction().rollback();\r\n+        \r\n+        assertEquals(POBJECT_COUNT, ((Number)count).intValue());\r\n+        assertEquals(VALUE_MAX, ((Number)max).intValue());\r\n+        assertEquals(VALUE_MIN, ((Number)min).intValue());\r\n+        assertEquals((VALUE_MIN+VALUE_MAX)*POBJECT_COUNT, 2*((Number)sum).intValue());\r\n     }\r\n     \r\n     public void testSetMaxResult() {\r\n@@ -76,14 +100,15 @@ public void testSetMaxResult() {\n         List result = em.createQuery(\"SELECT p.value,p FROM PObject p ORDER BY p.value ASC\")\r\n             .setMaxResults(limit).getResultList();\r\n         int i = 0;\r\n-        for (Object row:result) {\r\n+        for (Object row : result) {\r\n             Object[] line = (Object[])row;\r\n             int value = ((Integer)line[0]).intValue();\r\n             PObject pc = (PObject)line[1];\r\n-            System.err.println(++i + \".\" + SlicePersistence.getSlice(pc) + \":\" + pc.getId() + \",\" + pc.getValue());\r\n+            System.err.println(++i + \".\" + SlicePersistence.getSlice(pc) + \":\" \r\n+                    + pc.getId() + \",\" + pc.getValue());\r\n         }\r\n-        em.getTransaction().rollback();\r\n         assertEquals(limit, result.size());\r\n+        em.getTransaction().rollback();\r\n     }\r\n     \r\n     public void testHint() {\r\n@@ -100,8 +125,4 @@ public void testHint() {\n         }\r\n         em.getTransaction().rollback();\r\n     }\r\n-    \r\n-    protected String getPersistenceUnitName() {\r\n-        return \"ordering\";\r\n-    }\r\n }\r"},{"sha":"4d71f2df62be733527cfb7890203ba371ce04eba","filename":"openjpa-slice/src/test/java/org/apache/openjpa/slice/TestXA.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/c457053f9459293915fb41d1cdea09e014a0175d/openjpa-slice/src/test/java/org/apache/openjpa/slice/TestXA.java","raw_url":"https://github.com/apache/openjpa/raw/c457053f9459293915fb41d1cdea09e014a0175d/openjpa-slice/src/test/java/org/apache/openjpa/slice/TestXA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/test/java/org/apache/openjpa/slice/TestXA.java?ref=c457053f9459293915fb41d1cdea09e014a0175d","patch":"@@ -22,7 +22,7 @@\n \r\n public class TestXA extends SliceTestCase {\r\n     public void setUp() throws Exception {\r\n-        super.setUp(PObject.class, Person.class, Address.class);\r\n+        super.setUp(PObject.class, Person.class, Address.class, CLEAR_TABLES);\r\n     }\r\n     public void testEmptyCommit() {\r\n         EntityManager em = emf.createEntityManager();\r\n@@ -39,10 +39,9 @@ public void testPersistIndependentObjects() {\n \t\tEntityManager em = emf.createEntityManager();\r\n         int before = count(PObject.class);\r\n \t\tint N = 2;\r\n-\t\tlong start = System.currentTimeMillis();\r\n \t\tem.getTransaction().begin();\r\n \t\tfor (int i=0; i<N; i++)\r\n-\t\t\tem.persist(new PObject(start++));\r\n+\t\t\tem.persist(new PObject());\r\n \t\tem.getTransaction().commit();\r\n \t\tem.clear();\r\n \t\tint after = count(PObject.class);\r"},{"sha":"b4509b3ccc150d891b70df620e554e0f914a9c27","filename":"openjpa-slice/src/test/resources/META-INF/persistence.xml","status":"modified","additions":32,"deletions":25,"changes":57,"blob_url":"https://github.com/apache/openjpa/blob/c457053f9459293915fb41d1cdea09e014a0175d/openjpa-slice/src/test/resources/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/c457053f9459293915fb41d1cdea09e014a0175d/openjpa-slice/src/test/resources/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/test/resources/META-INF/persistence.xml?ref=c457053f9459293915fb41d1cdea09e014a0175d","patch":"@@ -22,7 +22,12 @@\n         <class>org.apache.openjpa.slice.PObject</class>\r\n         <class>org.apache.openjpa.slice.Person</class>\r\n         <class>org.apache.openjpa.slice.Address</class>\r\n+        <properties>\r\n+         <property name=\"openjpa.Log\" value=\"DefaultLevel=WARN, Enhance=TRACE\"/>\r\n+        </properties>\r\n     </persistence-unit>\r\n+    \r\n+    \r\n    <!-- ==================================================================== -->\r\n    <!-- Configuration for testing basic per-slice configuration              -->\r\n    <!-- ==================================================================== -->\r\n@@ -36,12 +41,13 @@\n          <property name=\"openjpa.slice.DistributionPolicy\"  value=\"org.apache.openjpa.slice.policy.UserDistributionPolicy\"/>\r\n          <property name=\"openjpa.slice.ThreadingPolicy\"     value=\"fixed\"/>\r\n \r\n-         <property name=\"openjpa.Log\"                       value=\"DefaultLevel=WARN, Enhance=TRACE, SQL=TRACE\"/>\r\n-         <property name=\"openjpa.ConnectionDriverName\"      value=\"com.mysql.jdbc.Driver\"/>\r\n-         \r\n-         <property name=\"openjpa.slice.One.ConnectionURL\"   value=\"jdbc:mysql://localhost/slice1\"/>\r\n-         <property name=\"openjpa.slice.Two.ConnectionURL\"   value=\"jdbc:mysql://localhost/slice2\"/>\r\n-         <property name=\"openjpa.slice.Three.ConnectionURL\" value=\"jdbc:mysql://localhost/slice3\"/>\r\n+         <property name=\"openjpa.Log\"                       value=\"DefaultLevel=INFO, Enhance=TRACE, SQL=TRACE\"/>\r\n+         <property name=\"openjpa.ConnectionDriverName\"      value=\"org.apache.derby.jdbc.EmbeddedDriver\"/>\r\n+         <property name=\"openjpa.ConnectionUserName\"        value=\"\"/>\r\n+         <property name=\"openjpa.ConnectionPassword\"        value=\"\"/>\r\n+         <property name=\"openjpa.slice.One.ConnectionURL\"   value=\"jdbc:derby:target/database/openjpa-slice1;create=true\"/>\r\n+         <property name=\"openjpa.slice.Two.ConnectionURL\"   value=\"jdbc:derby:target/database/openjpa-slice2;create=true\"/>\r\n+         <property name=\"openjpa.slice.Three.ConnectionURL\" value=\"jdbc:some-bad-url\"/>\r\n          \r\n       </properties>\r\n    </persistence-unit>\r\n@@ -50,19 +56,20 @@\n       <class>org.apache.openjpa.slice.PObject</class>\r\n       <properties>\r\n          <property name=\"openjpa.BrokerFactory\" value=\"slice\"/>\r\n-         <property name=\"openjpa.ConnectionDriverName\" value=\"com.mysql.jdbc.Driver\"/>\r\n+         <property name=\"openjpa.ConnectionDriverName\" value=\"org.apache.derby.jdbc.EmbeddedDriver\"/>\r\n \r\n          <property name=\"openjpa.slice.Names\" value=\"One,Two\"/>\r\n          <property name=\"openjpa.slice.DistributionPolicy\" value=\"org.apache.openjpa.slice.policy.UserDistributionPolicy\"/>\r\n-         <property name=\"openjpa.slice.TransactionPolicy\" value=\"xa\"/>\r\n          \r\n-         <property name=\"openjpa.slice.One.ConnectionDriverName\" value=\"com.mysql.jdbc.jdbc2.optional.MysqlXADataSource\"/>\r\n-         <property name=\"openjpa.slice.One.ConnectionProperties\" value=\"url=jdbc:mysql://localhost/slice1\"/>\r\n-         <property name=\"openjpa.slice.Two.ConnectionDriverName\" value=\"com.mysql.jdbc.jdbc2.optional.MysqlXADataSource\"/>\r\n-         <property name=\"openjpa.slice.Two.ConnectionProperties\" value=\"url=jdbc:mysql://localhost/slice2\"/>\r\n+         <property name=\"openjpa.ConnectionUserName\"        value=\"\"/>\r\n+         <property name=\"openjpa.ConnectionPassword\"        value=\"\"/>\r\n+         <property name=\"openjpa.slice.One.ConnectionDriverName\" value=\"org.apache.derby.jdbc.EmbeddedDriver\"/>\r\n+         <property name=\"openjpa.slice.One.ConnectionURL\" value=\"jdbc:derby:target/database/openjpa-slice1;create=true\"/>\r\n+         <property name=\"openjpa.slice.Two.ConnectionDriverName\" value=\"org.apache.derby.jdbc.EmbeddedDriver\"/>\r\n+         <property name=\"openjpa.slice.Two.ConnectionURL\" value=\"jdbc:derby:target/database/openjpa-slice2;create=true\"/>\r\n          \r\n          <property name=\"openjpa.Multithreaded\" value=\"false\"/>\r\n-         <property name=\"openjpa.Log\" value=\"DefaultLevel=WARN, Enhance=TRACE, SQL=TRACE\"/>\r\n+         <property name=\"openjpa.Log\" value=\"DefaultLevel=INFO, Enhance=TRACE, SQL=TRACE\"/>\r\n          <property name=\"openjpa.jdbc.SynchronizeMappings\" value=\"refresh\"/>\r\n          <property name=\"openjpa.jdbc.MappingDefaults\" value=\"DefaultMissingInfo=true\"/>\r\n          <property name=\"openjpa.RuntimeUnenhancedClasses\" value=\"supported\"/>\r\n@@ -78,17 +85,17 @@\n         <class>org.apache.openjpa.slice.Address</class>\r\n \t\t<properties>\r\n             <property name=\"openjpa.BrokerFactory\" value=\"slice\"/>\r\n-            <property name=\"openjpa.ConnectionDriverName\" value=\"com.mysql.jdbc.Driver\"/>\r\n+            <property name=\"openjpa.ConnectionDriverName\" value=\"org.apache.derby.jdbc.EmbeddedDriver\"/>\r\n             <property name=\"openjpa.slice.Names\" value=\"One,Two\"/>\r\n             <property name=\"openjpa.slice.Master\" value=\"Two\"/>\r\n-            <property name=\"openjpa.slice.One.ConnectionURL\" value=\"jdbc:mysql://localhost/slice1\"/>\r\n-            <property name=\"openjpa.slice.Two.ConnectionURL\" value=\"jdbc:mysql://localhost/slice2\"/>\r\n-            <property name=\"openjpa.ConnectionUserName\" value=\"root\"/>\r\n-            <property name=\"openjpa.ConnectionPassword\" value=\"hello\"/>\r\n+            <property name=\"openjpa.slice.One.ConnectionURL\" value=\"jdbc:derby:target/database/openjpa-slice1;create=true\"/>\r\n+            <property name=\"openjpa.slice.Two.ConnectionURL\" value=\"jdbc:derby:target/database/openjpa-slice2;create=true\"/>\r\n+            <property name=\"openjpa.ConnectionUserName\" value=\"\"/>\r\n+            <property name=\"openjpa.ConnectionPassword\" value=\"\"/>\r\n             <property name=\"openjpa.slice.DistributionPolicy\" value=\"org.apache.openjpa.slice.policy.UserDistributionPolicy\"/>\r\n             <property name=\"openjpa.slice.Lenient\" value=\"false\"/>\r\n             \r\n-            <property name=\"openjpa.Connection2URL\" value=\"jdbc:mysql://localhost/slice1\"/>\r\n+            <property name=\"openjpa.Connection2URL\" value=\"jdbc:derby:target/database/openjpa-slice1;create=true\"/>\r\n \t        <property name=\"openjpa.jdbc.SynchronizeMappings\" value=\"buildSchema\"/>\r\n             <property name=\"openjpa.QueryCompilationCache\" value=\"false\"/>\r\n    \t        <property name=\"openjpa.Log\" value=\"DefaultLevel=WARN, Enhance=TRACE, SQL=TRACE\"/>\r\n@@ -101,15 +108,15 @@\n         <class>org.apache.openjpa.slice.PObject</class>\r\n         <properties>\r\n             <property name=\"openjpa.BrokerFactory\" value=\"slice\"/>\r\n-            <property name=\"openjpa.ConnectionDriverName\" value=\"com.mysql.jdbc.Driver\"/>\r\n-            <property name=\"openjpa.slice.Even.ConnectionURL\" value=\"jdbc:mysql://localhost/slice1\"/>\r\n-            <property name=\"openjpa.slice.Odd.ConnectionURL\" value=\"jdbc:mysql://localhost/slice2\"/>\r\n-            <property name=\"openjpa.ConnectionUserName\" value=\"root\"/>\r\n-            <property name=\"openjpa.ConnectionPassword\" value=\"hello\"/>\r\n+            <property name=\"openjpa.ConnectionDriverName\" value=\"org.apache.derby.jdbc.EmbeddedDriver\"/>\r\n+            <property name=\"openjpa.slice.Even.ConnectionURL\" value=\"jdbc:derby:target/database/openjpa-slice1;create=true\"/>\r\n+            <property name=\"openjpa.slice.Odd.ConnectionURL\" value=\"jdbc:derby:target/database/openjpa-slice2;create=true\"/>\r\n+            <property name=\"openjpa.ConnectionUserName\" value=\"\"/>\r\n+            <property name=\"openjpa.ConnectionPassword\" value=\"\"/>\r\n             <property name=\"openjpa.slice.DistributionPolicy\" value=\"org.apache.openjpa.slice.policy.EvenOddDistributionPolicy\"/>\r\n             <property name=\"openjpa.slice.Lenient\" value=\"false\"/>\r\n             \r\n-            <property name=\"openjpa.Connection2URL\" value=\"jdbc:mysql://localhost/slice1\"/>\r\n+            <property name=\"openjpa.Connection2URL\" value=\"jdbc:derby:target/database/openjpa-slice1;create=true\"/>\r\n             <property name=\"openjpa.jdbc.SynchronizeMappings\" value=\"buildSchema\"/>\r\n             <property name=\"openjpa.Log\" value=\"DefaultLevel=WARN, Enhance=TRACE, SQL=TRACE\"/>\r\n             <property name=\"openjpa.jdbc.MappingDefaults\" value=\"DefaultMissingInfo=true\"/>\r"}]}

