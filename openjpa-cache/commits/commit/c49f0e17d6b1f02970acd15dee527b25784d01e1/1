{"sha":"c49f0e17d6b1f02970acd15dee527b25784d01e1","node_id":"MDY6Q29tbWl0MjA2MzY0OmM0OWYwZTE3ZDZiMWYwMjk3MGFjZDE1ZGVlNTI3YjI1Nzg0ZDAxZTE=","commit":{"author":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2008-10-23T04:43:35Z"},"committer":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2008-10-23T04:43:35Z"},"message":"OPENJPA-750: Added option to Sybase dictionary to ignore truncation warnings, added doc for new dictionary option, and code to log any SQLWarnings when update count isn't expected value.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@707270 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"fd588be787ea70517341575cc56dca89af933878","url":"https://api.github.com/repos/apache/openjpa/git/trees/fd588be787ea70517341575cc56dca89af933878"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/c49f0e17d6b1f02970acd15dee527b25784d01e1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/c49f0e17d6b1f02970acd15dee527b25784d01e1","html_url":"https://github.com/apache/openjpa/commit/c49f0e17d6b1f02970acd15dee527b25784d01e1","comments_url":"https://api.github.com/repos/apache/openjpa/commits/c49f0e17d6b1f02970acd15dee527b25784d01e1/comments","author":null,"committer":null,"parents":[{"sha":"703a2b9b600817f96ed3d7ba1024fabf50184dc9","url":"https://api.github.com/repos/apache/openjpa/commits/703a2b9b600817f96ed3d7ba1024fabf50184dc9","html_url":"https://github.com/apache/openjpa/commit/703a2b9b600817f96ed3d7ba1024fabf50184dc9"}],"stats":{"total":95,"additions":92,"deletions":3},"files":[{"sha":"7942fb272591b2316be34786ef5ccbf0e67032a8","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/BatchingPreparedStatementManagerImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/c49f0e17d6b1f02970acd15dee527b25784d01e1/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/BatchingPreparedStatementManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/c49f0e17d6b1f02970acd15dee527b25784d01e1/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/BatchingPreparedStatementManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/BatchingPreparedStatementManagerImpl.java?ref=c49f0e17d6b1f02970acd15dee527b25784d01e1","patch":"@@ -55,7 +55,6 @@\n     private List _batchedRows = new ArrayList();\n     private int _batchLimit;\n     private boolean _disableBatch = false;\n-    private transient Log _log = null;\n \n     /**\n      * Constructor. Supply connection.\n@@ -64,7 +63,6 @@ public BatchingPreparedStatementManagerImpl(JDBCStore store,\n         Connection conn, int batchLimit) {\n         super(store, conn);\n         _batchLimit = batchLimit;\n-        _log = store.getConfiguration().getLog(JDBCConfiguration.LOG_JDBC);\n         if (_log.isTraceEnabled())\n             _log.trace(_loc.get(\"batch_limit\", String.valueOf(_batchLimit)));\n     }\n@@ -216,6 +214,7 @@ private void flushSingleRow(RowImpl row, PreparedStatement ps)\n             row.flush(ps, _dict, _store);\n         int count = executeUpdate(ps, row.getSQL(_dict), row);\n         if (count != 1) {\n+            logSQLWarnings(ps);\n             Object failed = row.getFailedObject();\n             if (failed != null)\n                 _exceptions.add(new OptimisticException(failed));\n@@ -280,6 +279,7 @@ else if (row.getAction() == Row.ACTION_INSERT)\n                 break;\n             case 0: // no row is inserted, treats it as failed\n                 // case\n+                logSQLWarnings(ps);\n                 if (failed != null)\n                     _exceptions.add(new OptimisticException(failed));\n                 else if (row.getAction() == Row.ACTION_INSERT)"},{"sha":"df1c66c7f1bb3d4adfdfb519dcd6f0b579178807","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedStatementManagerImpl.java","status":"modified","additions":35,"deletions":0,"changes":35,"blob_url":"https://github.com/apache/openjpa/blob/c49f0e17d6b1f02970acd15dee527b25784d01e1/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedStatementManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/c49f0e17d6b1f02970acd15dee527b25784d01e1/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedStatementManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedStatementManagerImpl.java?ref=c49f0e17d6b1f02970acd15dee527b25784d01e1","patch":"@@ -22,18 +22,21 @@\n import java.sql.PreparedStatement;\n import java.sql.ResultSet;\n import java.sql.SQLException;\n+import java.sql.SQLWarning;\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.LinkedList;\n import java.util.List;\n \n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.jdbc.sql.DBDictionary;\n import org.apache.openjpa.jdbc.sql.Row;\n import org.apache.openjpa.jdbc.sql.RowImpl;\n import org.apache.openjpa.jdbc.sql.SQLExceptions;\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n+import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.util.ApplicationIds;\n import org.apache.openjpa.util.OpenJPAException;\n@@ -53,6 +56,7 @@\n     protected final JDBCStore _store;\n     protected final Connection _conn;\n     protected final DBDictionary _dict;\n+    protected transient Log _log = null;\n \n     // track exceptions\n     protected final Collection _exceptions = new LinkedList();\n@@ -64,6 +68,8 @@ public PreparedStatementManagerImpl(JDBCStore store, Connection conn) {\n         _store = store;\n         _dict = store.getDBDictionary();\n         _conn = conn;\n+        if (store.getConfiguration() != null)\n+            _log = store.getConfiguration().getLog(JDBCConfiguration.LOG_JDBC);\n     }\n \n     public Collection getExceptions() {\n@@ -105,6 +111,7 @@ protected void flushAndUpdate(RowImpl row)\n         try {\n             int count = executeUpdate(stmnt, sql, row);\n             if (count != 1) {\n+                logSQLWarnings(stmnt);\n                 Object failed = row.getFailedObject();\n                 if (failed != null)\n                     _exceptions.add(new OptimisticException(failed));\n@@ -233,4 +240,32 @@ protected PreparedStatement prepareStatement(String sql,\n         else\n             return _conn.prepareStatement(sql);\n     }\n+    \n+    /**\n+     * Provided the JDBC log category is logging warnings, this method will \n+     * log any SQL warnings that result from the execution of a SQL statement. \n+     */\n+    protected void logSQLWarnings(PreparedStatement stmt) {\n+        if (stmt != null && _log != null && _log.isTraceEnabled()) {\n+            try {\n+                SQLWarning warn = stmt.getWarnings();\n+                while (warn != null) {\n+                    logSQLWarning(warn);\n+                    warn = warn.getNextWarning();\n+                } while (warn != null);\n+            } catch (SQLException e) {}\n+        }\n+    }\n+\n+    /*\n+     * Log the SQLWarning message.  Some drivers report expected conditions \n+     * such as \"no rows returned\" as a warning.  These types of messages can \n+     * clutter up the default log very quickly, so trace level will be used to\n+     * log SQL warnings.\n+     */\n+    private void logSQLWarning(SQLWarning warn) {\n+        if (warn != null) {\n+            _log.trace(_loc.get(\"sql-warning\", warn.getMessage()));\n+        }\n+    }\n }"},{"sha":"4cca4718850192142879d0a3c171dc1dcb9d4396","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SybaseDictionary.java","status":"modified","additions":19,"deletions":0,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/c49f0e17d6b1f02970acd15dee527b25784d01e1/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SybaseDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/c49f0e17d6b1f02970acd15dee527b25784d01e1/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SybaseDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SybaseDictionary.java?ref=c49f0e17d6b1f02970acd15dee527b25784d01e1","patch":"@@ -75,6 +75,13 @@\n      */\n     public String identityColumnName = \"UNQ_INDEX\";\n \n+    /**\n+     * If true, Sybase will ignore numeric truncation on insert or\n+     * update operations.  Otherwise, the operation will fail. The default\n+     * value, false is in accordance with SQL92.\n+     */\n+    public boolean ignoreNumericTruncation = false;\n+    \n     public SybaseDictionary() {\n         platform = \"Sybase\";\n         schemaCase = SCHEMA_CASE_PRESERVE;\n@@ -277,6 +284,18 @@ public Connection decorate(Connection conn)\n             stmnt.execute();\n             stmnt.close();\n         }\n+        \n+        // By default, Sybase will fail to insert or update if a numeric\n+        // truncation occurs as a result of, for example, loss of decimal\n+        // precision.  This setting specifies that the operation should not \n+        // fail if a numeric truncation occurs.\n+        if (ignoreNumericTruncation) {\n+            String str = \"set arithabort numeric_truncation off\";\n+            PreparedStatement stmnt = prepareStatement(conn, str);        \n+            stmnt.execute();\n+            stmnt.close();            \n+        }        \n+        \n         return new SybaseConnection(conn);\n     }\n "},{"sha":"e6c383ca017c8cea842fd1cea4b6a124d908f966","filename":"openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/kernel/localizer.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/c49f0e17d6b1f02970acd15dee527b25784d01e1/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/kernel/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/c49f0e17d6b1f02970acd15dee527b25784d01e1/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/kernel/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/kernel/localizer.properties?ref=c49f0e17d6b1f02970acd15dee527b25784d01e1","patch":"@@ -117,3 +117,4 @@ batch_update_info: ExecuteBatch command returns update count {0} for \\\n \tstatement {1}.\n cache-hit: SQL Cache hit with key: {0} in {1}\n cache-missed: SQL Cache missed with key: {0} in {1}    \n+sql-warning: The statement resulted in SQL warning: {0}"},{"sha":"e61217e07ac03b3e14006c7708f59b0df1e1dccd","filename":"openjpa-project/src/doc/manual/ref_guide_dbsetup.xml","status":"modified","additions":35,"deletions":1,"changes":36,"blob_url":"https://github.com/apache/openjpa/blob/c49f0e17d6b1f02970acd15dee527b25784d01e1/openjpa-project/src/doc/manual/ref_guide_dbsetup.xml","raw_url":"https://github.com/apache/openjpa/raw/c49f0e17d6b1f02970acd15dee527b25784d01e1/openjpa-project/src/doc/manual/ref_guide_dbsetup.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_dbsetup.xml?ref=c49f0e17d6b1f02970acd15dee527b25784d01e1","patch":"@@ -3360,7 +3360,41 @@ detects that this is the case, a warning will be logged.\n                 </listitem>\n             </itemizedlist>\n         </section>\n-    </section>\n+        <section id=\"ref_guide_dbsetup_dbsupport_sybase\">\n+            <title>\n+                SybaseDictionary Properties\n+            </title>\n+            <indexterm zone=\"ref_guide_dbsetup_dbsupport_sybase\">\n+                <primary>\n+                    Sybase\n+                </primary>\n+                <seealso>\n+                    DBDictionary\n+                </seealso>\n+            </indexterm>\n+            <para>\n+The <literal>sybase</literal> dictionary understands the following additional\n+properties:\n+            </para>\n+            <itemizedlist>\n+                <listitem id=\"OracleDictionary.IgnoreNumericTruncation\">\n+                    <para>\n+                    <indexterm>\n+                        <primary>\n+                            Sybase\n+                        </primary>\n+                        <secondary>\n+                            IgnoreNumericTruncation\n+                        </secondary>\n+                    </indexterm>\n+<literal>IgnoreNumericTruncation</literal>: If true, Sybase will ignore numeric\n+truncation on SQL operations.  Otherwise, if numeric trunctation is detected, \n+the operation will fail.\n+                    </para>\n+                </listitem>\n+            </itemizedlist>\n+        </section>        \n+    </section>    \n     <section id=\"ref_guide_dbsetup_isolation\">\n         <title>\n             Setting the Transaction Isolation"}]}

