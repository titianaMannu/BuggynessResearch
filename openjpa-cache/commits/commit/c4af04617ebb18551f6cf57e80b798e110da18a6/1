{"sha":"c4af04617ebb18551f6cf57e80b798e110da18a6","node_id":"MDY6Q29tbWl0MjA2MzY0OmM0YWYwNDYxN2ViYjE4NTUxZjZjZjU3ZTgwYjc5OGUxMTBkYTE4YTY=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2008-02-25T22:59:29Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2008-02-25T22:59:29Z"},"message":"OPENJPA-359 Improve Timestamp resolution for use by versioning.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@631028 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"08e20f9487ef5cec1c5d57b18c07a5d45f9383de","url":"https://api.github.com/repos/apache/openjpa/git/trees/08e20f9487ef5cec1c5d57b18c07a5d45f9383de"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/c4af04617ebb18551f6cf57e80b798e110da18a6","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/c4af04617ebb18551f6cf57e80b798e110da18a6","html_url":"https://github.com/apache/openjpa/commit/c4af04617ebb18551f6cf57e80b798e110da18a6","comments_url":"https://api.github.com/repos/apache/openjpa/commits/c4af04617ebb18551f6cf57e80b798e110da18a6/comments","author":null,"committer":null,"parents":[{"sha":"c3e2f01204f028ef4563d17cd192a15bead36f27","url":"https://api.github.com/repos/apache/openjpa/commits/c3e2f01204f028ef4563d17cd192a15bead36f27","html_url":"https://github.com/apache/openjpa/commit/c3e2f01204f028ef4563d17cd192a15bead36f27"}],"stats":{"total":172,"additions":171,"deletions":1},"files":[{"sha":"f3766783cfd602e6dd3b3c8467783dee3410ba66","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingRepository.java","status":"modified","additions":7,"deletions":1,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/c4af04617ebb18551f6cf57e80b798e110da18a6/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingRepository.java","raw_url":"https://github.com/apache/openjpa/raw/c4af04617ebb18551f6cf57e80b798e110da18a6/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingRepository.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingRepository.java?ref=c4af04617ebb18551f6cf57e80b798e110da18a6","patch":"@@ -49,6 +49,7 @@\n import org.apache.openjpa.jdbc.meta.strats.MaxEmbeddedByteArrayFieldStrategy;\n import org.apache.openjpa.jdbc.meta.strats.MaxEmbeddedCharArrayFieldStrategy;\n import org.apache.openjpa.jdbc.meta.strats.MaxEmbeddedClobFieldStrategy;\n+import org.apache.openjpa.jdbc.meta.strats.NanoPrecisionTimestampVersionStrategy;\n import org.apache.openjpa.jdbc.meta.strats.NoneClassStrategy;\n import org.apache.openjpa.jdbc.meta.strats.NoneDiscriminatorStrategy;\n import org.apache.openjpa.jdbc.meta.strats.NoneFieldStrategy;\n@@ -80,6 +81,7 @@\n import org.apache.openjpa.lib.conf.Configurable;\n import org.apache.openjpa.lib.conf.Configurations;\n import org.apache.openjpa.lib.util.J2DoPrivHelper;\n+import org.apache.openjpa.lib.util.JavaVersions;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.meta.FieldMetaData;\n@@ -618,6 +620,8 @@ protected VersionStrategy instantiateVersionStrategy(String name,\n             strat = NumberVersionStrategy.class;\n         else if (TimestampVersionStrategy.ALIAS.equals(name))\n             strat = TimestampVersionStrategy.class;\n+        else if (NanoPrecisionTimestampVersionStrategy.ALIAS.equals(name))\n+            strat = NanoPrecisionTimestampVersionStrategy.class;\n         else if (StateComparisonVersionStrategy.ALIAS.equals(name))\n             strat = StateComparisonVersionStrategy.class;\n \n@@ -1221,7 +1225,9 @@ protected VersionStrategy defaultStrategy(Version vers,\n         switch (vfield.getTypeCode()) {\n             case JavaTypes.DATE:\n             case JavaTypes.CALENDAR:\n-                return new TimestampVersionStrategy();\n+                return (JavaVersions.VERSION >= 5) \n+                    ? new NanoPrecisionTimestampVersionStrategy()\n+                    : new TimestampVersionStrategy();\n             case JavaTypes.BYTE:\n             case JavaTypes.INT:\n             case JavaTypes.LONG:"},{"sha":"89ba3c5835c489508db8409058b4afde830a0f48","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/NanoPrecisionTimestampVersionStrategy.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/apache/openjpa/blob/c4af04617ebb18551f6cf57e80b798e110da18a6/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/NanoPrecisionTimestampVersionStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/c4af04617ebb18551f6cf57e80b798e110da18a6/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/NanoPrecisionTimestampVersionStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/NanoPrecisionTimestampVersionStrategy.java?ref=c4af04617ebb18551f6cf57e80b798e110da18a6","patch":"@@ -0,0 +1,41 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.jdbc.meta.strats;\r\n+\r\n+import org.apache.openjpa.lib.util.TimestampHelper;\r\n+\r\n+/**\r\n+ * Uses a timestamp for optimistic versioning with nanosecond\r\n+ * precision.\r\n+ *\r\n+ * @author Albert Lee\r\n+ */\r\n+public class NanoPrecisionTimestampVersionStrategy\r\n+    extends TimestampVersionStrategy {\r\n+\r\n+    public static final String ALIAS = \"nano-timestamp\";\r\n+\r\n+    public String getAlias() {\r\n+        return ALIAS;\r\n+    }\r\n+\r\n+    protected Object nextVersion(Object version) {\r\n+        return TimestampHelper.getNanoPrecisionTimestamp();\r\n+    }\r\n+}\r"},{"sha":"0479b2474e0049e00ff1c5e196df59c5dd82f97a","filename":"openjpa-lib-5/src/main/java/org/apache/openjpa/lib/util/Timestamp5Helper.java","status":"added","additions":56,"deletions":0,"changes":56,"blob_url":"https://github.com/apache/openjpa/blob/c4af04617ebb18551f6cf57e80b798e110da18a6/openjpa-lib-5/src/main/java/org/apache/openjpa/lib/util/Timestamp5Helper.java","raw_url":"https://github.com/apache/openjpa/raw/c4af04617ebb18551f6cf57e80b798e110da18a6/openjpa-lib-5/src/main/java/org/apache/openjpa/lib/util/Timestamp5Helper.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib-5/src/main/java/org/apache/openjpa/lib/util/Timestamp5Helper.java?ref=c4af04617ebb18551f6cf57e80b798e110da18a6","patch":"@@ -0,0 +1,56 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.lib.util;\r\n+\r\n+import java.sql.Timestamp;\r\n+\r\n+/**\r\n+ * Helper class to create java.sql.Timestamp object with nanosecond precision.\r\n+ * This is only available since JDB 5.\r\n+ * \r\n+ * @author Albert Lee\r\n+ */\r\n+public final class Timestamp5Helper extends TimestampHelper{\r\n+\r\n+    // number of seconds passed 1970/1/1 00:00:00 GMT.\r\n+    private static long sec0;\r\n+    // fraction of seconds passed 1970/1/1 00:00:00 GMT, offset by\r\n+    // the base System.nanoTime (nano0), in nanosecond unit.\r\n+    private static long nano0;\r\n+\r\n+    static {\r\n+        // initialize base time in second and fraction of second (ns).\r\n+        long curTime = System.currentTimeMillis();\r\n+        sec0 = curTime / MilliMuliplier;\r\n+        nano0 = (curTime % MilliMuliplier) * MicroMuliplier - System.nanoTime();\r\n+    }\r\n+\r\n+    /*\r\n+     * This class implements a nanosecond precision Timestamp.\r\n+     */\r\n+    protected Timestamp getTimestamp() {\r\n+        long nano_delta = nano0 + System.nanoTime();\r\n+        long sec1 = sec0 + (nano_delta / NanoMuliplier);\r\n+        long nano1 = nano_delta % NanoMuliplier;\r\n+\r\n+        Timestamp rtnTs = new Timestamp(sec1 * MilliMuliplier);\r\n+        rtnTs.setNanos((int) nano1);\r\n+        return rtnTs;\r\n+    }\r\n+}\r"},{"sha":"255b6d58c46d602e5b4a5e7bdc72ce22a6a6ca0c","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/TimestampHelper.java","status":"added","additions":67,"deletions":0,"changes":67,"blob_url":"https://github.com/apache/openjpa/blob/c4af04617ebb18551f6cf57e80b798e110da18a6/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/TimestampHelper.java","raw_url":"https://github.com/apache/openjpa/raw/c4af04617ebb18551f6cf57e80b798e110da18a6/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/TimestampHelper.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/TimestampHelper.java?ref=c4af04617ebb18551f6cf57e80b798e110da18a6","patch":"@@ -0,0 +1,67 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.lib.util;\r\n+\r\n+import java.sql.Timestamp;\r\n+\r\n+/**\r\n+ * Helper base class attempts to return java.sql.Timestamp object with\r\n+ * nanosecond precision. This base class is created to allow JDK 1.4 maven build\r\n+ * and only implements millisecond precision.\r\n+ * \r\n+ * @author Albert Lee\r\n+ */\r\n+public class TimestampHelper {\r\n+\r\n+    // number of millisecond, mircoseconds and nanoseconds in one second.\r\n+    protected static final long MilliMuliplier = 1000L;\r\n+    protected static final long MicroMuliplier = MilliMuliplier * 1000L;\r\n+    protected static final long NanoMuliplier = MicroMuliplier * 1000L;\r\n+\r\n+    private static TimestampHelper instance = null;\r\n+    \r\n+    static {\r\n+        if (JavaVersions.VERSION >= 5) {\r\n+            try {\r\n+                Class timestamp5HelperClass = Class\r\n+                    .forName(\"org.apache.openjpa.lib.util.Timestamp5Helper\");\r\n+                instance = (TimestampHelper) timestamp5HelperClass\r\n+                    .newInstance();\r\n+            } catch (Throwable e) {\r\n+                instance = new TimestampHelper();\r\n+            }\r\n+        } else {\r\n+            instance = new TimestampHelper();\r\n+        }\r\n+    }\r\n+\r\n+    /*\r\n+     * Return a java.sql.Timestamp object of current time.\r\n+     */\r\n+    public static Timestamp getNanoPrecisionTimestamp() {\r\n+        return instance.getTimestamp();\r\n+    }\r\n+    \r\n+    /*\r\n+     * This class implements a millisecond precision Timestamp.\r\n+     */\r\n+    protected Timestamp getTimestamp() { \r\n+        return new Timestamp(System.currentTimeMillis());\r\n+    }\r\n+}\r"}]}

