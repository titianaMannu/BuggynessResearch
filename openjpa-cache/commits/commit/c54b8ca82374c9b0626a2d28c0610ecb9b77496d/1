{"sha":"c54b8ca82374c9b0626a2d28c0610ecb9b77496d","node_id":"MDY6Q29tbWl0MjA2MzY0OmM1NGI4Y2E4MjM3NGM5YjA2MjZhMmQyOGMwNjEwZWNiOWI3NzQ5NmQ=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2011-02-22T02:06:11Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2011-02-22T02:06:11Z"},"message":"OPENJPA-1944: Version defaults to 1 if the column returns null from the database\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1073201 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"cd0d2a505474379337dbdc0c1d49a0f3d8c2f561","url":"https://api.github.com/repos/apache/openjpa/git/trees/cd0d2a505474379337dbdc0c1d49a0f3d8c2f561"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/c54b8ca82374c9b0626a2d28c0610ecb9b77496d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/c54b8ca82374c9b0626a2d28c0610ecb9b77496d","html_url":"https://github.com/apache/openjpa/commit/c54b8ca82374c9b0626a2d28c0610ecb9b77496d","comments_url":"https://api.github.com/repos/apache/openjpa/commits/c54b8ca82374c9b0626a2d28c0610ecb9b77496d/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"b44614d94b13f90d879aff00d0c8bd62f368529f","url":"https://api.github.com/repos/apache/openjpa/commits/b44614d94b13f90d879aff00d0c8bd62f368529f","html_url":"https://github.com/apache/openjpa/commit/b44614d94b13f90d879aff00d0c8bd62f368529f"}],"stats":{"total":294,"additions":292,"deletions":2},"files":[{"sha":"db900cf68f1e9f654cc24183007c4cd7f244924a","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ColumnVersionStrategy.java","status":"modified","additions":14,"deletions":2,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/c54b8ca82374c9b0626a2d28c0610ecb9b77496d/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ColumnVersionStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/c54b8ca82374c9b0626a2d28c0610ecb9b77496d/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ColumnVersionStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ColumnVersionStrategy.java?ref=c54b8ca82374c9b0626a2d28c0610ecb9b77496d","patch":"@@ -21,6 +21,7 @@\n import java.lang.reflect.Array;\n import java.math.BigDecimal;\n import java.sql.SQLException;\n+import java.sql.Timestamp;\n import java.util.Comparator;\n \n import org.apache.openjpa.jdbc.identifier.DBIdentifier;\n@@ -263,15 +264,26 @@ public Object load(OpenJPAStateManager sm, JDBCStore store, Result res)\n         // typically if one version column is in the result, they all are, so\n         // optimize by checking for the first one before doing any real work\n         Column[] cols = vers.getColumns();\n-        if (!res.contains(cols[0]))\n+        if (!res.contains(cols[0])) {\n             return null;\n+        }\n \n         Object version = populateFromResult(res);\n+        \n+        // we know the version column was part of the result - safe to initialize to 1.\n+        if(version == null) { \n+            if (sm.getMetaData().getVersionField().getDeclaredTypeCode() == JavaTypes.DATE) {\n+                version = new Timestamp(1);\n+            } else {\n+                version = new Long(1);\n+            }\n+        }\n \n         // OPENJPA-662 Allow a null StateManager because this method may just be\n         // invoked to get the result of projection query\n-        if (sm != null)\n+        if (sm != null) {\n         \tsm.setVersion(version);\n+        }\n         return version;\n     }\n "},{"sha":"bca4e2092f904ad41566e60485ecd3c763cd3631","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/version/TestVersionColumn.java","status":"added","additions":117,"deletions":0,"changes":117,"blob_url":"https://github.com/apache/openjpa/blob/c54b8ca82374c9b0626a2d28c0610ecb9b77496d/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/version/TestVersionColumn.java","raw_url":"https://github.com/apache/openjpa/raw/c54b8ca82374c9b0626a2d28c0610ecb9b77496d/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/version/TestVersionColumn.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/version/TestVersionColumn.java?ref=c54b8ca82374c9b0626a2d28c0610ecb9b77496d","patch":"@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+ package org.apache.openjpa.persistence.jdbc.version;\n+\n+import java.sql.Timestamp;\n+import java.util.List;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityTransaction;\n+\n+import org.apache.openjpa.persistence.jdbc.version.featureSelection.IntVersion;\n+import org.apache.openjpa.persistence.jdbc.version.featureSelection.ShortVersion;\n+import org.apache.openjpa.persistence.jdbc.version.featureSelection.TimestampVersion;\n+import org.apache.openjpa.persistence.test.SQLListenerTestCase;\n+\n+public class TestVersionColumn extends SQLListenerTestCase {\n+    public void setUp() {\n+        super.setUp(IntVersion.class, TimestampVersion.class, ShortVersion.class);\n+    }\n+\n+    public void testNullIntegerVersion() {\n+        EntityManager em = emf.createEntityManager();\n+        EntityTransaction tran = em.getTransaction();\n+        tran.begin();\n+        em.persist(new IntVersion());\n+        em.persist(new IntVersion());\n+        tran.commit();\n+\n+        tran.begin();\n+        em.createNativeQuery(\"UPDATE IntVersion set version = NULL\").executeUpdate();\n+        tran.commit();\n+        em.clear();\n+\n+        resetSQL();\n+\n+        List<IntVersion> results = em.createQuery(\"SELECT i from IntVersion i\", IntVersion.class).getResultList();\n+        assertNotNull(\"No results found\", results);\n+        assertFalse(\"No results found\", results.isEmpty());\n+        for (IntVersion iv : results) {\n+            assertEquals(\"Version should be initialized to 1, was: \" + iv.getVersion(), 1, iv.getVersion());\n+        }\n+\n+        assertEquals(\"Unexpected number of SQL statements: \" + getSQLCount(), 1, getSQLCount());\n+\n+        em.close();\n+    }\n+\n+    public void testNullTimestampVersion() {\n+        EntityManager em = emf.createEntityManager();\n+        EntityTransaction tran = em.getTransaction();\n+        tran.begin();\n+        em.persist(new TimestampVersion());\n+        em.persist(new TimestampVersion());\n+        tran.commit();\n+\n+        tran.begin();\n+        em.createNativeQuery(\"UPDATE TimestampVersion set version = NULL\").executeUpdate();\n+        tran.commit();\n+        em.clear();\n+\n+        resetSQL();\n+        List<TimestampVersion> results =\n+            em.createQuery(\"SELECT i from TimestampVersion i\", TimestampVersion.class).getResultList();\n+        assertNotNull(\"No results found\", results);\n+        assertFalse(\"No results found\", results.isEmpty());\n+        for (TimestampVersion iv : results) {\n+            assertEquals(\"Version should be initialized to 1\" + iv.getVersion(), new Timestamp(1), iv.getVersion());\n+        }\n+\n+        assertEquals(\"Unexpected number of SQL statements: \" + getSQLCount(), 1, getSQLCount());\n+\n+        em.close();\n+    }\n+    \n+    public void testNullShortVersion() {\n+        EntityManager em = emf.createEntityManager();\n+        EntityTransaction tran = em.getTransaction();\n+        tran.begin();\n+        em.persist(new ShortVersion());\n+        em.persist(new ShortVersion());\n+        tran.commit();\n+\n+        tran.begin();\n+        em.createNativeQuery(\"UPDATE ShortVersion set version = NULL\").executeUpdate();\n+        tran.commit();\n+        em.clear();\n+\n+        resetSQL();\n+        List<ShortVersion> results =\n+            em.createQuery(\"SELECT i from ShortVersion i\", ShortVersion.class).getResultList();\n+        assertNotNull(\"No results found\", results);\n+        assertFalse(\"No results found\", results.isEmpty());\n+        for (ShortVersion iv : results) {\n+            assertEquals(\"Version should be initialized to 1\" + iv.getVersion(), 1, iv.getVersion());\n+        }\n+\n+        assertEquals(\"Unexpected number of SQL statements: \" + getSQLCount(), 1, getSQLCount());\n+\n+        em.close();\n+    }\n+}"},{"sha":"8b761e0fe8d9eef122232cf13e346a39fb959df9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/version/featureSelection/IntVersion.java","status":"added","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/apache/openjpa/blob/c54b8ca82374c9b0626a2d28c0610ecb9b77496d/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/version/featureSelection/IntVersion.java","raw_url":"https://github.com/apache/openjpa/raw/c54b8ca82374c9b0626a2d28c0610ecb9b77496d/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/version/featureSelection/IntVersion.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/version/featureSelection/IntVersion.java?ref=c54b8ca82374c9b0626a2d28c0610ecb9b77496d","patch":"@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.version.featureSelection;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+import javax.persistence.Version;\n+\n+@Entity\n+@Table(name=\"IntVersion\")\n+public class IntVersion {\n+    @Id\n+    @GeneratedValue\n+    private int id;\n+\n+    @Version\n+    private int version;\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public int getVersion() {\n+        return version;\n+    }\n+\n+    public void setVersion(int version) {\n+        this.version = version;\n+    }\n+\n+}"},{"sha":"faee55c4c640cd4a6fdf88697e3e04ae1c2cc993","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/version/featureSelection/ShortVersion.java","status":"added","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/apache/openjpa/blob/c54b8ca82374c9b0626a2d28c0610ecb9b77496d/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/version/featureSelection/ShortVersion.java","raw_url":"https://github.com/apache/openjpa/raw/c54b8ca82374c9b0626a2d28c0610ecb9b77496d/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/version/featureSelection/ShortVersion.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/version/featureSelection/ShortVersion.java?ref=c54b8ca82374c9b0626a2d28c0610ecb9b77496d","patch":"@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.version.featureSelection;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+import javax.persistence.Version;\n+\n+@Entity\n+@Table(name=\"ShortVersion\")\n+public class ShortVersion {\n+    @Id\n+    @GeneratedValue\n+    private int id;\n+\n+    @Version\n+    private short version;\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public short getVersion() {\n+        return version;\n+    }\n+\n+    public void setVersion(short version) {\n+        this.version = version;\n+    }\n+\n+}"},{"sha":"e567ed4a3974a159661944ea9b9a6481fa90cc0a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/version/featureSelection/TimestampVersion.java","status":"added","additions":55,"deletions":0,"changes":55,"blob_url":"https://github.com/apache/openjpa/blob/c54b8ca82374c9b0626a2d28c0610ecb9b77496d/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/version/featureSelection/TimestampVersion.java","raw_url":"https://github.com/apache/openjpa/raw/c54b8ca82374c9b0626a2d28c0610ecb9b77496d/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/version/featureSelection/TimestampVersion.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/version/featureSelection/TimestampVersion.java?ref=c54b8ca82374c9b0626a2d28c0610ecb9b77496d","patch":"@@ -0,0 +1,55 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.version.featureSelection;\n+\n+import java.sql.Timestamp;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+import javax.persistence.Version;\n+\n+@Entity\n+@Table(name = \"TimestampVersion\")\n+public class TimestampVersion {\n+    @Id\n+    @GeneratedValue\n+    private int id;\n+\n+    @Version\n+    private Timestamp version;\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public Timestamp getVersion() {\n+        return version;\n+    }\n+\n+    public void setVersion(Timestamp version) {\n+        this.version = version;\n+    }\n+\n+}"}]}

