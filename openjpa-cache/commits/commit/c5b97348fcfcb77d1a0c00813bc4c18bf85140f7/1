{"sha":"c5b97348fcfcb77d1a0c00813bc4c18bf85140f7","node_id":"MDY6Q29tbWl0MjA2MzY0OmM1Yjk3MzQ4ZmNmY2I3N2QxYTBjMDA4MTNiYzRjMThiZjg1MTQwZjc=","commit":{"author":{"name":"Mark Struberg","email":"struberg@apache.org","date":"2021-06-16T17:54:25Z"},"committer":{"name":"Mark Struberg","email":"struberg@apache.org","date":"2021-06-16T17:54:25Z"},"message":"OPENJPA-2614 run ALTER SEQUENCE in a separate tx\n\nQuite a lot databases force a commit on DDL changes.\nFor sequences we try to run an ALTER SEQUENCE to make the sequence\nreflect the allocationSize. Doing this will commit all outstanding open\nDB changes in Oracle and a few other databases.\nWe now open a new connection.","tree":{"sha":"2d7f01a88e2cd5df7ecc39abfec2166d95b7837e","url":"https://api.github.com/repos/apache/openjpa/git/trees/2d7f01a88e2cd5df7ecc39abfec2166d95b7837e"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/c5b97348fcfcb77d1a0c00813bc4c18bf85140f7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/c5b97348fcfcb77d1a0c00813bc4c18bf85140f7","html_url":"https://github.com/apache/openjpa/commit/c5b97348fcfcb77d1a0c00813bc4c18bf85140f7","comments_url":"https://api.github.com/repos/apache/openjpa/commits/c5b97348fcfcb77d1a0c00813bc4c18bf85140f7/comments","author":{"login":"struberg","id":79310,"node_id":"MDQ6VXNlcjc5MzEw","avatar_url":"https://avatars.githubusercontent.com/u/79310?v=4","gravatar_id":"","url":"https://api.github.com/users/struberg","html_url":"https://github.com/struberg","followers_url":"https://api.github.com/users/struberg/followers","following_url":"https://api.github.com/users/struberg/following{/other_user}","gists_url":"https://api.github.com/users/struberg/gists{/gist_id}","starred_url":"https://api.github.com/users/struberg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/struberg/subscriptions","organizations_url":"https://api.github.com/users/struberg/orgs","repos_url":"https://api.github.com/users/struberg/repos","events_url":"https://api.github.com/users/struberg/events{/privacy}","received_events_url":"https://api.github.com/users/struberg/received_events","type":"User","site_admin":false},"committer":{"login":"struberg","id":79310,"node_id":"MDQ6VXNlcjc5MzEw","avatar_url":"https://avatars.githubusercontent.com/u/79310?v=4","gravatar_id":"","url":"https://api.github.com/users/struberg","html_url":"https://github.com/struberg","followers_url":"https://api.github.com/users/struberg/followers","following_url":"https://api.github.com/users/struberg/following{/other_user}","gists_url":"https://api.github.com/users/struberg/gists{/gist_id}","starred_url":"https://api.github.com/users/struberg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/struberg/subscriptions","organizations_url":"https://api.github.com/users/struberg/orgs","repos_url":"https://api.github.com/users/struberg/repos","events_url":"https://api.github.com/users/struberg/events{/privacy}","received_events_url":"https://api.github.com/users/struberg/received_events","type":"User","site_admin":false},"parents":[{"sha":"5801f419c0e7df6be74bc96e9366303cf7b1293d","url":"https://api.github.com/repos/apache/openjpa/commits/5801f419c0e7df6be74bc96e9366303cf7b1293d","html_url":"https://github.com/apache/openjpa/commit/5801f419c0e7df6be74bc96e9366303cf7b1293d"}],"stats":{"total":33,"additions":24,"deletions":9},"files":[{"sha":"98de5666077ecd98fc190f5952d17bfa81317d22","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/AbstractJDBCSeq.java","status":"modified","additions":11,"deletions":2,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/c5b97348fcfcb77d1a0c00813bc4c18bf85140f7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/AbstractJDBCSeq.java","raw_url":"https://github.com/apache/openjpa/raw/c5b97348fcfcb77d1a0c00813bc4c18bf85140f7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/AbstractJDBCSeq.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/AbstractJDBCSeq.java?ref=c5b97348fcfcb77d1a0c00813bc4c18bf85140f7","patch":"@@ -149,6 +149,14 @@ private JDBCStore getStore(StoreContext ctx) {\n         return (JDBCStore) ctx.getStoreManager().getInnermostDelegate();\n     }\n \n+\n+    /**\n+     * @see #getConnection(JDBCStore, boolean) but without forcing a connection.\n+     */\n+    protected Connection getConnection(JDBCStore store) throws SQLException {\n+        return getConnection(store, false);\n+    }\n+\n     /**\n      * <P>Return the connection to use based on the type of sequence. This\n      * connection will automatically be closed; do not close it.</P>\n@@ -160,10 +168,11 @@ private JDBCStore getStore(StoreContext ctx) {\n      * <P>Otherwise a new connection will be obtained using DataSource2 from the\n      * current configuration. In this case autocommit is set to false prior to\n      * returning the connection.</P>\n+     * @param forceNewConnection if {@code true} a new connection will be forced\n      */\n-    protected Connection getConnection(JDBCStore store)\n+    protected Connection getConnection(JDBCStore store, boolean forceNewConnection)\n         throws SQLException {\n-        if (type == TYPE_TRANSACTIONAL || type == TYPE_CONTIGUOUS) {\n+        if (!forceNewConnection && (type == TYPE_TRANSACTIONAL || type == TYPE_CONTIGUOUS)) {\n             // Also increments ref count.\n             return store.getConnection();\n         }"},{"sha":"d15852d668d44aabe8869d4cfdd73fdb0ce8d685","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/NativeJDBCSeq.java","status":"modified","additions":13,"deletions":7,"changes":20,"blob_url":"https://github.com/apache/openjpa/blob/c5b97348fcfcb77d1a0c00813bc4c18bf85140f7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/NativeJDBCSeq.java","raw_url":"https://github.com/apache/openjpa/raw/c5b97348fcfcb77d1a0c00813bc4c18bf85140f7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/NativeJDBCSeq.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/NativeJDBCSeq.java?ref=c5b97348fcfcb77d1a0c00813bc4c18bf85140f7","patch":"@@ -227,15 +227,21 @@ protected synchronized void allocateInternal(int additional, JDBCStore store, Cl\n                     // If this fails, we will warn the user at most one time and set _allocated and _increment to 1 so\n                     // as to not potentially insert records ahead of what the database thinks is the next sequence\n                     // value.\n-                    if (updateSql(conn, dict.getAlterSequenceSQL(_seq)) == -1) {\n-                        if (!alreadyLoggedAlterSeqFailure) {\n-                            Log log = _conf.getLog(OpenJPAConfiguration.LOG_RUNTIME);\n-                            if (log.isWarnEnabled()) {\n-                                log.warn(_loc.get(\"fallback-no-seq-cache\", _seqName));\n+\n+                    // first we have to allocate a new connection as some databases do an implicit commit\n+                    // if a DDL gets changed. Others do blow up on a DDL change\n+                    try (Connection newConn = getConnection(store, true)) {\n+                        if (updateSql(newConn, dict.getAlterSequenceSQL(_seq)) == -1) {\n+                            newConn.commit(); // new connection has autoCommit=false\n+                            if (!alreadyLoggedAlterSeqFailure) {\n+                                Log log = _conf.getLog(OpenJPAConfiguration.LOG_RUNTIME);\n+                                if (log.isWarnEnabled()) {\n+                                    log.warn(_loc.get(\"fallback-no-seq-cache\", _seqName));\n+                                }\n                             }\n+                            alreadyLoggedAlterSeqFailure = true;\n+                            _allocate = 1;\n                         }\n-                        alreadyLoggedAlterSeqFailure = true;\n-                        _allocate = 1;\n                     }\n                 } else {\n                     if (!alreadyLoggedAlterSeqDisabled) {"}]}

