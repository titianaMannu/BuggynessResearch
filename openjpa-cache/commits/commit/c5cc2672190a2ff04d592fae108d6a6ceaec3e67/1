{"sha":"c5cc2672190a2ff04d592fae108d6a6ceaec3e67","node_id":"MDY6Q29tbWl0MjA2MzY0OmM1Y2MyNjcyMTkwYTJmZjA0ZDU5MmZhZTEwOGQ2YTZjZWFlYzNlNjc=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-10-29T01:51:14Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-10-29T01:51:14Z"},"message":"OPENJPA-1337: Push/Pop fetch plan with find()/refresh()\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@830826 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"432e6ee9a34b3979ae43edc59ad1663023888d7d","url":"https://api.github.com/repos/apache/openjpa/git/trees/432e6ee9a34b3979ae43edc59ad1663023888d7d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/c5cc2672190a2ff04d592fae108d6a6ceaec3e67","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/c5cc2672190a2ff04d592fae108d6a6ceaec3e67","html_url":"https://github.com/apache/openjpa/commit/c5cc2672190a2ff04d592fae108d6a6ceaec3e67","comments_url":"https://api.github.com/repos/apache/openjpa/commits/c5cc2672190a2ff04d592fae108d6a6ceaec3e67/comments","author":null,"committer":null,"parents":[{"sha":"41f750a8f12f41d950328802ecfaf406348484b5","url":"https://api.github.com/repos/apache/openjpa/commits/41f750a8f12f41d950328802ecfaf406348484b5","html_url":"https://github.com/apache/openjpa/commit/41f750a8f12f41d950328802ecfaf406348484b5"}],"stats":{"total":48,"additions":26,"deletions":22},"files":[{"sha":"4d77bac6085bf610872d5dce8cbd78d53e5effe6","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","status":"modified","additions":26,"deletions":22,"changes":48,"blob_url":"https://github.com/apache/openjpa/blob/c5cc2672190a2ff04d592fae108d6a6ceaec3e67/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/c5cc2672190a2ff04d592fae108d6a6ceaec3e67/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java?ref=c5cc2672190a2ff04d592fae108d6a6ceaec3e67","patch":"@@ -486,10 +486,7 @@ public void setLifecycleListenerCallbackMode(int callbackMode) {\n     @SuppressWarnings(\"unchecked\")\n     public <T> T find(Class<T> cls, Object oid, LockModeType mode, Map<String, Object> properties) {\n         assertNotCloseInvoked();\n-        if (mode != null && mode != LockModeType.NONE) {\n-            _broker.assertActiveTransaction();\n-        }\n-        processLockProperties(pushFetchPlan(), mode, properties);\n+        configureCurrentFetchPlan(pushFetchPlan(), properties, mode, true);\n         try {\n             oid = _broker.newObjectId(cls, oid);\n             return (T) _broker.find(oid, true, this);\n@@ -749,16 +746,13 @@ public void refresh(Object entity, Map<String, Object> properties) {\n         refresh(entity, null, properties);\n     }\n \n-    public void refresh(Object entity, LockModeType mode,\n-        Map<String, Object> properties) {\n+    public void refresh(Object entity, LockModeType mode, Map<String, Object> properties) {\n         assertNotCloseInvoked();\n         assertValidAttchedEntity(entity);\n-        if (mode != null && mode != LockModeType.NONE) {\n-            _broker.assertActiveTransaction();\n-        }\n+\n         _broker.assertWriteOperation();\n \n-        processLockProperties(pushFetchPlan(), mode, properties);\n+        configureCurrentFetchPlan(pushFetchPlan(), properties, mode, true);\n         try {\n             _broker.refresh(entity, this);\n         } finally {\n@@ -1145,10 +1139,9 @@ public void lock(Object entity, LockModeType mode, int timeout) {\n         assertNotCloseInvoked();\n         assertValidAttchedEntity(entity);\n \n-        processLockProperties(pushFetchPlan(), mode, null);\n+        configureCurrentFetchPlan(pushFetchPlan(), null, mode, false);\n         try {\n-            _broker.lock(entity, MixedLockLevelsHelper.toLockLevel(mode),\n-                timeout, this);\n+            _broker.lock(entity, MixedLockLevelsHelper.toLockLevel(mode),  timeout, this);\n         } finally {\n             popFetchPlan();\n         }\n@@ -1159,7 +1152,7 @@ public void lock(Object entity, LockModeType mode, Map<String, Object> propertie\n         assertValidAttchedEntity(entity);\n         _broker.assertActiveTransaction();\n \n-        processLockProperties(pushFetchPlan(), mode, properties);\n+        configureCurrentFetchPlan(pushFetchPlan(), properties, mode, false);\n         try {\n             _broker.lock(entity, MixedLockLevelsHelper.toLockLevel(mode),\n                 _broker.getFetchConfiguration().getLockTimeout(), this);\n@@ -1607,28 +1600,39 @@ RuntimeExceptionTranslator getExceptionTranslator() {\n      * Populate the given FetchPlan with the given properties. \n      * Optionally overrides the given lock mode.\n      */\n-    private void processLockProperties(FetchPlan fetch, LockModeType lock, Map<String, Object> properties) {\n+    private void configureCurrentFetchPlan(FetchPlan fetch, Map<String, Object> properties, \n+            LockModeType lock, boolean requiresTxn) {\n         // handle properties in map first\n+        configureCurrentCacheModes(fetch, properties);\n         fetch.addHints(properties);\n         // override with the specific lockMode, if needed.\n         if (lock != null && lock != LockModeType.NONE) {\n+            if (requiresTxn) {\n+                _broker.assertActiveTransaction();\n+            }\n             // Override read lock level\n             LockModeType curReadLockMode = fetch.getReadLockMode();\n             if (lock != curReadLockMode)\n                 fetch.setReadLockMode(lock);\n         }\n     }\n     \n-    private void processFetchProperties(FetchPlan fetch, Map<String, Object> properties) {\n+    private void configureCurrentCacheModes(FetchPlan fetch, Map<String, Object> properties) {\n         if (properties == null)\n             return;\n-        CacheRetrieveMode rMode = JPAProperties.getCacheRetrieveMode(properties);\n+        CacheRetrieveMode rMode = JPAProperties.get(CacheRetrieveMode.class, JPAProperties.CACHE_RETRIEVE_MODE, \n+                properties);\n         if (rMode != null) {\n-            fetch.setCacheRetrieveMode(DataCacheRetrieveMode.valueOf(rMode.toString()));\n+            fetch.setCacheRetrieveMode(JPAProperties.convertValue(DataCacheRetrieveMode.class, \n+                    JPAProperties.CACHE_RETRIEVE_MODE, rMode));\n+            properties.remove(JPAProperties.CACHE_RETRIEVE_MODE);\n         }\n-        CacheStoreMode sMode = JPAProperties.getCacheStoreMode(properties);\n-        if (rMode != null) {\n-            fetch.setCacheStoreMode(DataCacheStoreMode.valueOf(sMode.toString()));\n+        CacheStoreMode sMode = JPAProperties.get(CacheStoreMode.class, JPAProperties.CACHE_STORE_MODE, \n+                properties);\n+        if (sMode != null) {\n+            fetch.setCacheStoreMode(JPAProperties.convertValue(DataCacheStoreMode.class, \n+                    JPAProperties.CACHE_STORE_MODE, sMode));\n+            properties.remove(JPAProperties.CACHE_STORE_MODE);\n         }\n     }\n \n@@ -1702,7 +1706,7 @@ String getBeanPropertyName(String s) {\n      */\n     Object convertUserValue(String key, Object value, Class<?> targetType) {\n         if (JPAProperties.isValidKey(key)) \n-            return JPAProperties.convertValue(key, value);\n+            return JPAProperties.convertValue(targetType, key, value);\n         if (value instanceof String) {\n             if (\"null\".equals(value)) {\n                 return null;"}]}

