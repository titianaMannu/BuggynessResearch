{"sha":"c66d5e1688d13c9be3c039733c192160bc064402","node_id":"MDY6Q29tbWl0MjA2MzY0OmM2NmQ1ZTE2ODhkMTNjOWJlM2MwMzk3MzNjMTkyMTYwYmMwNjQ0MDI=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2011-10-30T03:28:05Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2011-10-30T03:28:05Z"},"message":"OPENJPA-2066 build failure due to eol style mis-match. Add eol-style=native and lf -> cr/lf fix up.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1195104 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"78ebbb648a52f16ef66d8c68fcb2e73fe1526baf","url":"https://api.github.com/repos/apache/openjpa/git/trees/78ebbb648a52f16ef66d8c68fcb2e73fe1526baf"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/c66d5e1688d13c9be3c039733c192160bc064402","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/c66d5e1688d13c9be3c039733c192160bc064402","html_url":"https://github.com/apache/openjpa/commit/c66d5e1688d13c9be3c039733c192160bc064402","comments_url":"https://api.github.com/repos/apache/openjpa/commits/c66d5e1688d13c9be3c039733c192160bc064402/comments","author":null,"committer":null,"parents":[{"sha":"31e00f7d76acbf37a1ba314237af7db7ddce881e","url":"https://api.github.com/repos/apache/openjpa/commits/31e00f7d76acbf37a1ba314237af7db7ddce881e","html_url":"https://github.com/apache/openjpa/commit/31e00f7d76acbf37a1ba314237af7db7ddce881e"}],"stats":{"total":54,"additions":23,"deletions":31},"files":[{"sha":"2fc441688db1ab84739fb7c055e4cb866381963d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ChildChildClass.java","status":"modified","additions":2,"deletions":6,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/c66d5e1688d13c9be3c039733c192160bc064402/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ChildChildClass.java","raw_url":"https://github.com/apache/openjpa/raw/c66d5e1688d13c9be3c039733c192160bc064402/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ChildChildClass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ChildChildClass.java?ref=c66d5e1688d13c9be3c039733c192160bc064402","patch":"@@ -14,15 +14,12 @@\n  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n  * KIND, either express or implied.  See the License for the\n  * specific language governing permissions and limitations\n- * under the License.    \n+ * under the License.\n  */\n \n package org.apache.openjpa.persistence.relations;\n \n import javax.persistence.*;\n-import org.apache.openjpa.persistence.FetchAttribute;\n-import org.apache.openjpa.persistence.FetchGroup;\n-import org.apache.openjpa.persistence.FetchGroups;\n \n @Entity\n @Inheritance(strategy=InheritanceType.JOINED)\n@@ -42,10 +39,9 @@ public String getName2() {\n     public void setName2(String name2) {\n         this.name2 = name2;\n     }\n-    \n+\n     @Override\n     public String toString() {\n         return super.toString()+\"\\n\"+\"Name2: \"+name2+\"\\n\";\n     }\n }\n-"},{"sha":"82c0f23e7dde4133958d8bf62b65b2d305cae904","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ChildClass.java","status":"modified","additions":3,"deletions":5,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/c66d5e1688d13c9be3c039733c192160bc064402/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ChildClass.java","raw_url":"https://github.com/apache/openjpa/raw/c66d5e1688d13c9be3c039733c192160bc064402/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ChildClass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ChildClass.java?ref=c66d5e1688d13c9be3c039733c192160bc064402","patch":"@@ -14,15 +14,12 @@\n  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n  * KIND, either express or implied.  See the License for the\n  * specific language governing permissions and limitations\n- * under the License.    \n+ * under the License.\n  */\n \n package org.apache.openjpa.persistence.relations;\n \n import javax.persistence.*;\n-import org.apache.openjpa.persistence.FetchAttribute;\n-import org.apache.openjpa.persistence.FetchGroup;\n-import org.apache.openjpa.persistence.FetchGroups;\n \n @Entity\n @Inheritance(strategy=InheritanceType.JOINED)\n@@ -35,7 +32,7 @@\n     public ChildClass() {\n         super();\n     }\n-    \n+\n     public String getName() {\n         return name;\n     }\n@@ -62,3 +59,4 @@ public String toString() {\n         return sBuf.toString();\n     }\n }\n+"},{"sha":"89cf8289a3bf8c7508dd75e04094271f66d18943","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/GrandChildClass.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/c66d5e1688d13c9be3c039733c192160bc064402/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/GrandChildClass.java","raw_url":"https://github.com/apache/openjpa/raw/c66d5e1688d13c9be3c039733c192160bc064402/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/GrandChildClass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/GrandChildClass.java?ref=c66d5e1688d13c9be3c039733c192160bc064402","patch":"@@ -14,26 +14,26 @@\n  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n  * KIND, either express or implied.  See the License for the\n  * specific language governing permissions and limitations\n- * under the License.    \n+ * under the License.\n  */\n \n package org.apache.openjpa.persistence.relations;\n \n import javax.persistence.*;\n-import org.apache.openjpa.persistence.PersistentCollection;\n \n @Entity\n @Inheritance(strategy=InheritanceType.JOINED)\n public class GrandChildClass extends ChildChildClass {\n- \n+\n     @Basic(fetch=FetchType.EAGER)\n     private String someUnloadedField;\n \n     public String getSomeUnloadedString() {\n         return someUnloadedField;\n     }\n-    \n+\n     public String toString() {\n         return super.toString() + \"SomeUnloadedField: \" + someUnloadedField + \"\\n\";\n     }\n }\n+"},{"sha":"d0e3345c1d2c7bfe381bb06367ea69aca66b303e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ParentClass.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/c66d5e1688d13c9be3c039733c192160bc064402/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ParentClass.java","raw_url":"https://github.com/apache/openjpa/raw/c66d5e1688d13c9be3c039733c192160bc064402/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ParentClass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ParentClass.java?ref=c66d5e1688d13c9be3c039733c192160bc064402","patch":"@@ -14,7 +14,7 @@\n  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n  * KIND, either express or implied.  See the License for the\n  * specific language governing permissions and limitations\n- * under the License.    \n+ * under the License.\n  */\n \n package org.apache.openjpa.persistence.relations;\n@@ -43,8 +43,9 @@ protected ParentClass() {\n     public Set<String> getItems() {\n         return items;\n     }\n-    \n+\n     public void setItems(Collection<String> items) {\n         this.items.addAll(items);\n     }\n }\n+"},{"sha":"1e6e7b45443f1e9de637c5720e2d7900b48f06cc","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestJoinedMultiInheritanceHierarchy.java","status":"modified","additions":11,"deletions":14,"changes":25,"blob_url":"https://github.com/apache/openjpa/blob/c66d5e1688d13c9be3c039733c192160bc064402/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestJoinedMultiInheritanceHierarchy.java","raw_url":"https://github.com/apache/openjpa/raw/c66d5e1688d13c9be3c039733c192160bc064402/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestJoinedMultiInheritanceHierarchy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestJoinedMultiInheritanceHierarchy.java?ref=c66d5e1688d13c9be3c039733c192160bc064402","patch":"@@ -14,53 +14,50 @@\n  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n  * KIND, either express or implied.  See the License for the\n  * specific language governing permissions and limitations\n- * under the License.    \n+ * under the License.\n  */\n \n package org.apache.openjpa.persistence.relations;\n \n-import java.util.ArrayList;\n-import java.util.HashSet;\n-import java.util.List;\n import java.util.Collection;\n \n-import org.apache.openjpa.meta.FetchGroup;\n import org.apache.openjpa.persistence.OpenJPAEntityManager;\n import org.apache.openjpa.persistence.PersistenceException;\n import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n \n public class TestJoinedMultiInheritanceHierarchy\n     extends SingleEMFTestCase {\n-    \n+\n     public void setUp() {\n-        super.setUp( CLEAR_TABLES, ChildChildClass.class, ChildClass.class, \n+        super.setUp( CLEAR_TABLES, ChildChildClass.class, ChildClass.class,\n                      GrandChildClass.class, ParentClass.class,\n                      \"openjpa.BrokerImpl\", \"EvictFromDataCache=true\" );\n     }\n-    \n+\n     public void testCacheSqlGeneration() throws PersistenceException {\n         OpenJPAEntityManager em = emf.createEntityManager();\n-        \n+\n         em.getTransaction().begin();\n         final GrandChildClass notEmpty = new GrandChildClass();\n         notEmpty.setName(\"Not empty object\");\n         Collection<String> itemSet = notEmpty.getItems();\n         for (int i = 0; i < 5; i++) {\n             itemSet.add(notEmpty.getName() + \" : item n.\" + i);\n         }\n-        \n+\n         notEmpty.setItems(itemSet);\n-        \n+\n         final GrandChildClass empty = new GrandChildClass();\n         empty.setName(\"empty object\");\n-        \n+\n         em.persist(notEmpty);\n         em.persist(empty);\n         em.getTransaction().commit();\n-        \n+\n         em.evictAll();\n         assertTrue(empty.getItems().isEmpty());\n     }\n-    \n+\n }\n \n+"}]}

