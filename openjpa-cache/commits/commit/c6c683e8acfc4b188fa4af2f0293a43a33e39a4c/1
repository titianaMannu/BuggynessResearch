{"sha":"c6c683e8acfc4b188fa4af2f0293a43a33e39a4c","node_id":"MDY6Q29tbWl0MjA2MzY0OmM2YzY4M2U4YWNmYzRiMTg4ZmE0YWYyZjAyOTNhNDNhMzNlMzlhNGM=","commit":{"author":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2006-09-14T23:06:11Z"},"committer":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2006-09-14T23:06:11Z"},"message":"Allow callback methods to accept the Entity subclass of the type they are listening on, rather than forcing them to all take an argument of type java.lang.Object (section 3.5.1)\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@443509 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"19f90262af038e3ce9883009f26b00a864b515c0","url":"https://api.github.com/repos/apache/openjpa/git/trees/19f90262af038e3ce9883009f26b00a864b515c0"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/c6c683e8acfc4b188fa4af2f0293a43a33e39a4c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/c6c683e8acfc4b188fa4af2f0293a43a33e39a4c","html_url":"https://github.com/apache/openjpa/commit/c6c683e8acfc4b188fa4af2f0293a43a33e39a4c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/c6c683e8acfc4b188fa4af2f0293a43a33e39a4c/comments","author":null,"committer":null,"parents":[{"sha":"7846adbf3f732c3258e88c326445044387385fb3","url":"https://api.github.com/repos/apache/openjpa/commits/7846adbf3f732c3258e88c326445044387385fb3","html_url":"https://github.com/apache/openjpa/commit/7846adbf3f732c3258e88c326445044387385fb3"}],"stats":{"total":53,"additions":46,"deletions":7},"files":[{"sha":"89fe2eac15c70e4bb4b5e3c07e80e5bf7a002588","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/event/BeanLifecycleCallbacks.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/c6c683e8acfc4b188fa4af2f0293a43a33e39a4c/openjpa-kernel/src/main/java/org/apache/openjpa/event/BeanLifecycleCallbacks.java","raw_url":"https://github.com/apache/openjpa/raw/c6c683e8acfc4b188fa4af2f0293a43a33e39a4c/openjpa-kernel/src/main/java/org/apache/openjpa/event/BeanLifecycleCallbacks.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/event/BeanLifecycleCallbacks.java?ref=c6c683e8acfc4b188fa4af2f0293a43a33e39a4c","patch":"@@ -38,9 +38,10 @@\n      *\n      * @arg whether another argunent is expected such as AfterDetach\n      */\n-    public BeanLifecycleCallbacks(Class cls, String method, boolean arg) {\n+    public BeanLifecycleCallbacks(Class cls, String method, boolean arg,\n+        Class type) {\n         this(cls, getMethod(cls, method, arg ? new Class[]{ Object.class,\n-            Object.class } : new Class[]{ Object.class }), arg);\n+            type } : new Class[]{ type }), arg);\n     }\n \n     /**"},{"sha":"e6ed34b487b4985217407f632b4058eb21dd394c","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/event/MethodLifecycleCallbacks.java","status":"modified","additions":34,"deletions":2,"changes":36,"blob_url":"https://github.com/apache/openjpa/blob/c6c683e8acfc4b188fa4af2f0293a43a33e39a4c/openjpa-kernel/src/main/java/org/apache/openjpa/event/MethodLifecycleCallbacks.java","raw_url":"https://github.com/apache/openjpa/raw/c6c683e8acfc4b188fa4af2f0293a43a33e39a4c/openjpa-kernel/src/main/java/org/apache/openjpa/event/MethodLifecycleCallbacks.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/event/MethodLifecycleCallbacks.java?ref=c6c683e8acfc4b188fa4af2f0293a43a33e39a4c","patch":"@@ -16,6 +16,7 @@\n package org.apache.openjpa.event;\n \n import java.lang.reflect.Method;\n+import java.util.Arrays;\n \n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.util.UserException;\n@@ -92,7 +93,14 @@ public String toString() {\n      */\n     protected static Method getMethod(Class cls, String method, Class[] args) {\n         try {\n-            return cls.getMethod(method, args);\n+            Method[] methods = cls.getMethods();\n+            for (int i = 0; i < methods.length; i++) {\n+                if (!method.equals(methods[i].getName()))\n+                    continue;\n+\n+                if (isAssignable(methods[i].getParameterTypes(), args))\n+                    return methods[i];\n+            }\n         } catch (Throwable t) {\n             try {\n                 // try again with the declared methods, which will\n@@ -103,8 +111,32 @@ protected static Method getMethod(Class cls, String method, Class[] args) {\n                 return m;\n             } catch (Throwable t2) {\n                 throw new UserException(_loc.get(\"method-notfound\",\n-                    cls.getName(), method), t);\n+                    cls.getName(), method,\n+                        args == null ? null : Arrays.asList(args)), t);\n             }\n \t\t}\n+\n+        throw new UserException(_loc.get(\"method-notfound\",\n+            cls.getName(), method,\n+                args == null ? null : Arrays.asList(args)));\n \t}\n+\n+    /** \n+     * Returns true if all parameters in the from array are assignable\n+     * from the corresponding parameters of the to array. \n+     */\n+    private static boolean isAssignable(Class[] from, Class[] to) {\n+        if (from == null)\n+            return to == null;\n+\n+        if (from.length != to.length)\n+            return false;\n+\n+        for (int i = 0; i < from.length; i++) {\n+            if (from[i] == null || !from[i].isAssignableFrom(to[i]))\n+                return false;\n+        }\n+\n+        return true;\n+    } \n }"},{"sha":"0487c4056bc82392abc301725ad40baddf3e2325","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/InterfaceImplGenerator.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/c6c683e8acfc4b188fa4af2f0293a43a33e39a4c/openjpa-kernel/src/main/java/org/apache/openjpa/meta/InterfaceImplGenerator.java","raw_url":"https://github.com/apache/openjpa/raw/c6c683e8acfc4b188fa4af2f0293a43a33e39a4c/openjpa-kernel/src/main/java/org/apache/openjpa/meta/InterfaceImplGenerator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/InterfaceImplGenerator.java?ref=c6c683e8acfc4b188fa4af2f0293a43a33e39a4c","patch":"@@ -205,7 +205,7 @@ private static boolean isGetter(Class iface, FieldMetaData fmd) {\n             return true;\n         try {\n             Method meth = iface.getDeclaredMethod(\"is\" + StringUtils.capitalize\n-                (fmd.getName()), null);\n+                (fmd.getName()), (Class[]) null);\n             return meth == null;\n         } catch (NoSuchMethodException e) {}\n         return true;"},{"sha":"ef0994dc4ca3dea0d3391c24b287926b6aeadc34","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/event/localizer.properties","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/c6c683e8acfc4b188fa4af2f0293a43a33e39a4c/openjpa-kernel/src/main/resources/org/apache/openjpa/event/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/c6c683e8acfc4b188fa4af2f0293a43a33e39a4c/openjpa-kernel/src/main/resources/org/apache/openjpa/event/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/event/localizer.properties?ref=c6c683e8acfc4b188fa4af2f0293a43a33e39a4c","patch":"@@ -75,4 +75,5 @@ tcp-close-pool-error: Exception thrown while closing connection pool.\n tcp-wrong-version-error: Received packet from \"{0}\" with invalid version \\\n \tnumber. Check if a prior release of OpenJPA is being used on this host.\n bean-constructor: Could not instantiate class {0}.\n-method-notfound: Method \"{1}\" not found in class \"{0}\".\n+method-notfound: Method \"{1}\" with arguments of type: {2} \\\n+    not found in class \"{0}\"."},{"sha":"fd5899980ca4992ce91ee106e3e14d5c559a9b73","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/c6c683e8acfc4b188fa4af2f0293a43a33e39a4c/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/c6c683e8acfc4b188fa4af2f0293a43a33e39a4c/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java?ref=c6c683e8acfc4b188fa4af2f0293a43a33e39a4c","patch":"@@ -1528,6 +1528,11 @@ private boolean startCallback(MetaDataTag callback, Attributes attrs)\n             return false;\n         boolean system = currentElement() == null;\n \n+        Class type = currentElement() == null ? null :\n+            ((ClassMetaData) currentElement()).getDescribedType();\n+        if (type == null)\n+            type = Object.class;\n+\n         if (_callbacks == null) {\n             _callbacks = (Collection<LifecycleCallbacks>[])\n                 new Collection[LifecycleEvent.ALL_EVENTS.length];\n@@ -1538,7 +1543,7 @@ private boolean startCallback(MetaDataTag callback, Attributes attrs)\n         LifecycleCallbacks adapter;\n         if (_listener != null)\n             adapter = new BeanLifecycleCallbacks(_listener,\n-                attrs.getValue(\"method-name\"), false);\n+                attrs.getValue(\"method-name\"), false, type);\n         else\n             adapter = new MethodLifecycleCallbacks(_cls,\n                 attrs.getValue(\"method-name\"), false);"}]}

