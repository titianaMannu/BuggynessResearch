{"sha":"c7addd5f51598dc111e89db16160c912e159c132","node_id":"MDY6Q29tbWl0MjA2MzY0OmM3YWRkZDVmNTE1OThkYzExMWU4OWRiMTYxNjBjOTEyZTE1OWMxMzI=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-05-04T23:01:51Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-05-04T23:01:51Z"},"message":"OPENJPA-1648,OPENJPA-1649,OPENJPA-1650: Replace fixed thread pools by cached thread pool. \nStop creating thread pools on every flush/query. \nStreamline property parsing/processing to create slice configurations.\nRetain addSlice() on Persistence Unit and remove from Persistence Context and Configuration.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@941084 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"fe244cb82867c3f7c867ac06e26a8c0cdeb95fc3","url":"https://api.github.com/repos/apache/openjpa/git/trees/fe244cb82867c3f7c867ac06e26a8c0cdeb95fc3"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/c7addd5f51598dc111e89db16160c912e159c132","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/c7addd5f51598dc111e89db16160c912e159c132","html_url":"https://github.com/apache/openjpa/commit/c7addd5f51598dc111e89db16160c912e159c132","comments_url":"https://api.github.com/repos/apache/openjpa/commits/c7addd5f51598dc111e89db16160c912e159c132/comments","author":null,"committer":null,"parents":[{"sha":"ed2940d54731bd83e864eb0b74e0dadbc8cdab67","url":"https://api.github.com/repos/apache/openjpa/commits/ed2940d54731bd83e864eb0b74e0dadbc8cdab67","html_url":"https://github.com/apache/openjpa/commit/ed2940d54731bd83e864eb0b74e0dadbc8cdab67"}],"stats":{"total":411,"additions":206,"deletions":205},"files":[{"sha":"3a6ea3e6428f4c59616fbf934bbc7d6e1617bd9a","filename":"openjpa-slice/src/main/java/org/apache/openjpa/slice/DistributedBroker.java","status":"modified","additions":3,"deletions":15,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/c7addd5f51598dc111e89db16160c912e159c132/openjpa-slice/src/main/java/org/apache/openjpa/slice/DistributedBroker.java","raw_url":"https://github.com/apache/openjpa/raw/c7addd5f51598dc111e89db16160c912e159c132/openjpa-slice/src/main/java/org/apache/openjpa/slice/DistributedBroker.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/main/java/org/apache/openjpa/slice/DistributedBroker.java?ref=c7addd5f51598dc111e89db16160c912e159c132","patch":"@@ -18,29 +18,17 @@\n  */\n package org.apache.openjpa.slice;\n \n-import java.util.Map;\n-\n import org.apache.openjpa.kernel.Broker;\n \n /**\n- * Extension to Broker to allow dynamically add/remove slices.\n+ * Extension to Broker to allow access to virtual data store.\n  * \n  * @author Pinaki Poddar\n  *\n  */\n public interface DistributedBroker extends Broker {\n     /**\n-     * Adds the given slice with the given properties. This newly added slice\n-     * will participate in the current and subsequent transaction.\n-     * \n-     * @param name logical name of the to be added slice. Must be different from\n-     * any currently available slices.\n-     * @see DistributedConfiguration#getAvailableSliceNames()\n-     * \n-     * @param properties key-value pair of configuration for the slice to be\n-     * added. The keys must have openjpa.slice.&lt;name&gt;.* as prefix.\n-     * \n-     * @see DistributedConfiguration#addSlice(String, Map)\n+     * Gets the distributed store manager used by this receiver.\n      */\n-    Slice addSlice(String name, Map properties);\n+    DistributedStoreManager getDistributedStoreManager();\n }"},{"sha":"fdb8502674376bd51cd6c0bdbf63dc66c607d87e","filename":"openjpa-slice/src/main/java/org/apache/openjpa/slice/DistributedBrokerImpl.java","status":"modified","additions":3,"deletions":13,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/c7addd5f51598dc111e89db16160c912e159c132/openjpa-slice/src/main/java/org/apache/openjpa/slice/DistributedBrokerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/c7addd5f51598dc111e89db16160c912e159c132/openjpa-slice/src/main/java/org/apache/openjpa/slice/DistributedBrokerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/main/java/org/apache/openjpa/slice/DistributedBrokerImpl.java?ref=c7addd5f51598dc111e89db16160c912e159c132","patch":"@@ -44,8 +44,7 @@\n \tprivate transient DistributedConfiguration _conf;\n \tprivate final ReentrantSliceLock _lock;\n \t\n-\tprivate static final Localizer _loc =\n-\t\t\tLocalizer.forPackage(DistributedBrokerImpl.class);\n+\tprivate static final Localizer _loc = Localizer.forPackage(DistributedBrokerImpl.class);\n \n \tpublic DistributedBrokerImpl() {\n \t    super();\n@@ -60,15 +59,7 @@ public DistributedConfiguration getConfiguration() {\n     }\n     \n     public DistributedStoreManager getDistributedStoreManager() {\n-        return (DistributedStoreManager)getStoreManager().\n-                getInnermostDelegate();\n-    }\n-    \n-    public Slice addSlice(String name, Map properties) {\n-        Slice slice = ((DistributedBrokerFactory)getBrokerFactory()).addSlice(\n-            name, properties);\n-        getDistributedStoreManager().addSlice(slice);\n-        return slice;\n+        return (DistributedStoreManager)getStoreManager().getInnermostDelegate();\n     }\n     \n \t/**\n@@ -81,8 +72,7 @@ public Slice addSlice(String name, Map properties) {\n \t * been assigned before.\n \t */\n \t@Override\n-    public OpenJPAStateManager persist(Object pc, Object id, boolean explicit,\n-\t\t\tOpCallbacks call) {\n+    public OpenJPAStateManager persist(Object pc, Object id, boolean explicit, OpCallbacks call) {\n \t\tOpenJPAStateManager sm = getStateManager(pc);\n \t\tSliceInfo info = null;\n         boolean replicated = SliceImplHelper.isReplicated(pc,"},{"sha":"3c48e06a7668cfcf2a1b881b04179d62e01fbc75","filename":"openjpa-slice/src/main/java/org/apache/openjpa/slice/DistributedConfiguration.java","status":"modified","additions":0,"deletions":7,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/c7addd5f51598dc111e89db16160c912e159c132/openjpa-slice/src/main/java/org/apache/openjpa/slice/DistributedConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/c7addd5f51598dc111e89db16160c912e159c132/openjpa-slice/src/main/java/org/apache/openjpa/slice/DistributedConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/main/java/org/apache/openjpa/slice/DistributedConfiguration.java?ref=c7addd5f51598dc111e89db16160c912e159c132","patch":"@@ -19,7 +19,6 @@\n package org.apache.openjpa.slice;\n \n import java.util.List;\n-import java.util.Map;\n \n import org.apache.openjpa.conf.OpenJPAConfiguration;\n \n@@ -118,10 +117,4 @@\n      * replicated instances will be replicated across the available slices.\n      */\n     void setReplicationPolicy(String policy);\n-\t/**\n-\t * Adds a new Slice of the given name and given properties.\n-     * The given properties must have keys with prefix openjpa.slice.<name>.*\n-     * where <name> is the new slice to be added.\n-\t */\n-    Slice addSlice(String name, Map properties);\n }"},{"sha":"d22e8560680b9c95bbb034ba34b863a7684fb8e7","filename":"openjpa-slice/src/main/java/org/apache/openjpa/slice/Slice.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/c7addd5f51598dc111e89db16160c912e159c132/openjpa-slice/src/main/java/org/apache/openjpa/slice/Slice.java","raw_url":"https://github.com/apache/openjpa/raw/c7addd5f51598dc111e89db16160c912e159c132/openjpa-slice/src/main/java/org/apache/openjpa/slice/Slice.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/main/java/org/apache/openjpa/slice/Slice.java?ref=c7addd5f51598dc111e89db16160c912e159c132","patch":"@@ -24,11 +24,12 @@\n \n /**\n  * Represents a database slice of immutable logical name, a configuration and\n- * status.\n+ * status. A Slice is uniquely identified by its logical name.\n  * \n  * @author Pinaki Poddar \n  *\n  */\n+@SuppressWarnings(\"serial\")\n public class Slice implements Comparable<Slice>,Serializable {\n     public enum Status {\n         NOT_INITIALIZED, "},{"sha":"ef75f83c659fdecf9df6cce93204e45c46a45212","filename":"openjpa-slice/src/main/java/org/apache/openjpa/slice/SliceThread.java","status":"modified","additions":11,"deletions":12,"changes":23,"blob_url":"https://github.com/apache/openjpa/blob/c7addd5f51598dc111e89db16160c912e159c132/openjpa-slice/src/main/java/org/apache/openjpa/slice/SliceThread.java","raw_url":"https://github.com/apache/openjpa/raw/c7addd5f51598dc111e89db16160c912e159c132/openjpa-slice/src/main/java/org/apache/openjpa/slice/SliceThread.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/main/java/org/apache/openjpa/slice/SliceThread.java?ref=c7addd5f51598dc111e89db16160c912e159c132","patch":"@@ -19,10 +19,8 @@\n package org.apache.openjpa.slice;\n \n import java.util.concurrent.ExecutorService;\n-import java.util.concurrent.SynchronousQueue;\n+import java.util.concurrent.Executors;\n import java.util.concurrent.ThreadFactory;\n-import java.util.concurrent.ThreadPoolExecutor;\n-import java.util.concurrent.TimeUnit;\n \n /**\n  * A thread to execute operation against each database slice.\n@@ -32,7 +30,8 @@\n  */\n public class SliceThread extends Thread {\n     private final Thread _parent;\n-\n+    private static ExecutorService _pool;\n+    \n     public SliceThread(String name, Thread parent, Runnable r) {\n         super(r, name);\n         _parent = parent;\n@@ -52,23 +51,23 @@ public Thread getParent() {\n     }\n     \n     /** \n-     * Create a pool of given size.\n-     * The thread factory is specialized to create SliceThread which gets\n-     * preferential treatment for locking.\n+     * Create a cached pool of <em>slice</em> threads.\n+     * The thread factory creates specialized threads for preferential locking treatment.\n      * \n      */\n \n-    public static ExecutorService newPool(int size) {\n-        return new ThreadPoolExecutor(size, size, 60L, TimeUnit.SECONDS, \n-            new SynchronousQueue<Runnable>(), new SliceThreadFactory());\n+    public static ExecutorService getPool() {\n+        if (_pool == null) {\n+            _pool = Executors.newCachedThreadPool(new SliceThreadFactory());\n+        }\n+        return _pool;\n     }\n     \n-    static class SliceThreadFactory implements ThreadFactory {\n+    private static class SliceThreadFactory implements ThreadFactory {\n         int n = 0;\n         public Thread newThread(Runnable r) {\n             Thread parent = Thread.currentThread();\n             return new SliceThread(parent.getName()+\"-slice-\"+n++, parent, r);\n         }\n     }\n-\n }"},{"sha":"1185d875d4db676fd07157f138332b8d3e03a0a6","filename":"openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedJDBCBrokerFactory.java","status":"modified","additions":35,"deletions":23,"changes":58,"blob_url":"https://github.com/apache/openjpa/blob/c7addd5f51598dc111e89db16160c912e159c132/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedJDBCBrokerFactory.java","raw_url":"https://github.com/apache/openjpa/raw/c7addd5f51598dc111e89db16160c912e159c132/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedJDBCBrokerFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedJDBCBrokerFactory.java?ref=c7addd5f51598dc111e89db16160c912e159c132","patch":"@@ -19,17 +19,21 @@\n package org.apache.openjpa.slice.jdbc;\n \n import java.security.AccessController;\n+import java.util.Collection;\n+import java.util.List;\n import java.util.Map;\n \n import org.apache.openjpa.conf.OpenJPAVersion;\n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCBrokerFactory;\n import org.apache.openjpa.kernel.Bootstrap;\n-import org.apache.openjpa.kernel.StoreManager;\n+import org.apache.openjpa.kernel.Broker;\n import org.apache.openjpa.lib.conf.ConfigurationProvider;\n import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.slice.DistributedBroker;\n import org.apache.openjpa.slice.DistributedBrokerFactory;\n+import org.apache.openjpa.slice.DistributedBrokerImpl;\n import org.apache.openjpa.slice.Slice;\n \n /**\n@@ -41,16 +45,14 @@\n @SuppressWarnings(\"serial\")\n public class DistributedJDBCBrokerFactory extends JDBCBrokerFactory \n     implements DistributedBrokerFactory {\n-\tprivate static final Localizer _loc = \n-\t    Localizer.forPackage(DistributedJDBCBrokerFactory.class);\n+\tprivate static final Localizer _loc = Localizer.forPackage(DistributedJDBCBrokerFactory.class);\n+\t\n \t/**\n      * Factory method for constructing a factory from properties. Invoked from\n \t * {@link Bootstrap#newBrokerFactory}.\n \t */\n-\tpublic static DistributedJDBCBrokerFactory newInstance(\n-\t\t\tConfigurationProvider cp) {\n-\t\tDistributedJDBCConfigurationImpl conf =\n-\t\t\t\tnew DistributedJDBCConfigurationImpl(cp);\n+\tpublic static DistributedJDBCBrokerFactory newInstance(ConfigurationProvider cp) {\n+\t\tDistributedJDBCConfigurationImpl conf =\tnew DistributedJDBCConfigurationImpl();\n \t\tcp.setInto(conf);\n \t\treturn new DistributedJDBCBrokerFactory(conf);\n \t}\n@@ -60,10 +62,9 @@ public static DistributedJDBCBrokerFactory newInstance(\n \t * Invoked from {@link Bootstrap#getBrokerFactory}.\n \t */\n \tpublic static JDBCBrokerFactory getInstance(ConfigurationProvider cp) {\n-\t    Map properties = cp.getProperties();\n+\t    Map<String,Object> properties = cp.getProperties();\n \t    Object key = toPoolKey(properties);\n-\t\tDistributedJDBCBrokerFactory factory =\n-                (DistributedJDBCBrokerFactory) getPooledFactoryForKey(key);\n+\t\tDistributedJDBCBrokerFactory factory = (DistributedJDBCBrokerFactory) getPooledFactoryForKey(key);\n \t\tif (factory != null)\n \t\t\treturn factory;\n \n@@ -75,17 +76,14 @@ public static JDBCBrokerFactory getInstance(ConfigurationProvider cp) {\n \t/**\n \t * Factory method for constructing a factory from a configuration.\n \t */\n-\tpublic static synchronized JDBCBrokerFactory getInstance(\n-\t\t\tJDBCConfiguration conf) {\n-\t    Map properties = conf.toProperties(false);\n+\tpublic static synchronized JDBCBrokerFactory getInstance(DistributedJDBCConfiguration conf) {\n+\t    Map<String,Object> properties = conf.toProperties(false);\n \t    Object key = toPoolKey(properties);\n-\t\tDistributedJDBCBrokerFactory factory =\n-                (DistributedJDBCBrokerFactory) getPooledFactoryForKey(key);\n+\t\tDistributedJDBCBrokerFactory factory = (DistributedJDBCBrokerFactory) getPooledFactoryForKey(key);\n \t\tif (factory != null)\n \t\t\treturn factory;\n \n-\t\tfactory = new DistributedJDBCBrokerFactory(\n-\t\t        (DistributedJDBCConfiguration) conf);\n+\t\tfactory = new DistributedJDBCBrokerFactory(conf);\n \t\tpool(key, factory);\n \t\treturn factory;\n \t}\n@@ -100,19 +98,33 @@ public DistributedJDBCConfiguration getConfiguration() {\n \t}\n \t\n \tpublic Slice addSlice(String name, Map properties) {\n-\t    Slice slice = getConfiguration().addSlice(name, properties);\n-        ClassLoader loader = AccessController.doPrivileged(\n-            J2DoPrivHelper.getContextClassLoaderAction());\n-        synchronizeMappings(loader, (JDBCConfiguration)slice.\n-                getConfiguration());\n+\t    Slice slice = ((DistributedJDBCConfigurationImpl)getConfiguration()).addSlice(name, properties);\n+        ClassLoader loader = AccessController.doPrivileged(J2DoPrivHelper.getContextClassLoaderAction());\n+        synchronizeMappings(loader, (JDBCConfiguration)slice.getConfiguration());\n+        Collection<Broker> brokers = getOpenBrokers();\n+        for (Broker broker : brokers) {\n+            ((DistributedBroker)broker).getDistributedStoreManager().addSlice(slice);\n+        }\n \t    return slice;\n \t}\n \n \t@Override\n \tprotected DistributedJDBCStoreManager newStoreManager() {\n \t\treturn new DistributedJDBCStoreManager(getConfiguration());\n \t}\n-\t\n+    \n+    @Override\n+    public DistributedBroker newBroker() {\n+        return new DistributedBrokerImpl();\n+    }\n+    \n+    protected void synchronizeMappings(ClassLoader loader) {\n+        List<Slice> slices = getConfiguration().getSlices(Slice.Status.ACTIVE);\n+        for (Slice slice : slices) {\n+            synchronizeMappings(loader, (JDBCConfiguration) slice.getConfiguration());\n+        }\n+    }\n+\n     @Override\n     protected Object getFactoryInitializationBanner() {\n         return _loc.get(\"factory-init\", OpenJPAVersion.VERSION_NUMBER);"},{"sha":"855f7c9d8385a7135c53662ffd9699232d6be04e","filename":"openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedJDBCConfiguration.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/c7addd5f51598dc111e89db16160c912e159c132/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedJDBCConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/c7addd5f51598dc111e89db16160c912e159c132/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedJDBCConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedJDBCConfiguration.java?ref=c7addd5f51598dc111e89db16160c912e159c132","patch":"@@ -34,6 +34,6 @@\n     /**\n      * Gets the master slice.\n      */\n-    Slice getMaster();\n+    Slice getMasterSlice();\n \n }"},{"sha":"a3e40b3072b976b4ae80dc4c82e25c45be588b52","filename":"openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedJDBCConfigurationImpl.java","status":"modified","additions":98,"deletions":106,"changes":204,"blob_url":"https://github.com/apache/openjpa/blob/c7addd5f51598dc111e89db16160c912e159c132/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedJDBCConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/c7addd5f51598dc111e89db16160c912e159c132/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedJDBCConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedJDBCConfigurationImpl.java?ref=c7addd5f51598dc111e89db16160c912e159c132","patch":"@@ -52,7 +52,7 @@\n import org.apache.openjpa.util.UserException;\n \n /**\n- * Implements a distributed configuration of JDBCStoreManagers.\n+ * A specialized configuration embodies a set of Slice configurations.\n  * The original configuration properties are analyzed to create a set of\n  * Slice specific properties with defaulting rules. \n  * \n@@ -73,63 +73,49 @@\n     public PluginValue distributionPolicyPlugin;\n     public PluginValue replicationPolicyPlugin;\n     \n-    protected Log log;\n-    protected String unit;\n-    \n     public static final String DOT = \".\";\n     public static final String REGEX_DOT = \"\\\\.\";\n-    public static final String PREFIX_SLICE = ProductDerivation.PREFIX_SLICE + \n-    \tDOT;\n+    public static final String PREFIX_SLICE = ProductDerivation.PREFIX_SLICE + DOT;\n     public static final String PREFIX_OPENJPA = \"openjpa.\";\n-    private static Localizer _loc =\n-            Localizer.forPackage(DistributedJDBCConfigurationImpl.class);\n+    private static Localizer _loc = Localizer.forPackage(DistributedJDBCConfigurationImpl.class);\n \n-    public DistributedJDBCConfigurationImpl() {\n-        super();\n-    }\n-    \n     /**\n-     * Configure itself as well as underlying slices.\n-     * \n+     * Create a configuration and declare the plug-ins.\n      */\n-    public DistributedJDBCConfigurationImpl(ConfigurationProvider cp) {\n-        super(true, false);\n-        Map p = cp.getProperties();\n-        log = getConfigurationLog();\n-        unit = getPersistenceUnitName(p);\n-        setDiagnosticContext(this, unit);\n-        \n+    public DistributedJDBCConfigurationImpl() {\n+        super(true,   // load derivations\n+              false); // load globals\n         brokerPlugin.setString(DistributedBrokerImpl.class.getName());\n         \n-        distributionPolicyPlugin = addPlugin(\n-            PREFIX_SLICE + \"DistributionPolicy\", true);\n-        distributionPolicyPlugin.setAlias(\"random\", \n-        \tDistributionPolicy.Default.class.getName());\n+        distributionPolicyPlugin = addPlugin(PREFIX_SLICE + \"DistributionPolicy\", true);\n+        distributionPolicyPlugin.setAlias(\"random\", DistributionPolicy.Default.class.getName());\n         distributionPolicyPlugin.setDefault(\"random\");\n         distributionPolicyPlugin.setDynamic(true);\n         \n-        replicationPolicyPlugin = addPlugin(\n-            PREFIX_SLICE + \"ReplicationPolicy\", true);\n-        replicationPolicyPlugin.setAlias(\"all\", \n-            ReplicationPolicy.Default.class.getName());\n+        replicationPolicyPlugin = addPlugin(PREFIX_SLICE + \"ReplicationPolicy\", true);\n+        replicationPolicyPlugin.setAlias(\"all\", ReplicationPolicy.Default.class.getName());\n         replicationPolicyPlugin.setDefault(\"all\");\n         replicationPolicyPlugin.setDynamic(true);\n         \n         lenientPlugin = addBoolean(PREFIX_SLICE + \"Lenient\");\n+        lenientPlugin.setDefault(\"true\");\n         \n-        masterPlugin = addString(PREFIX_SLICE + \"Master\");\n-        \n-        namesPlugin = addStringList(PREFIX_SLICE + \"Names\");\n-        \n-        setSlices(p);\n+        masterPlugin  = addString(PREFIX_SLICE + \"Master\");\n+        namesPlugin   = addStringList(PREFIX_SLICE + \"Names\");\n     }\n     \n-    private String getPersistenceUnitName(Map p) {\n-        Object unit = p.get(PREFIX_OPENJPA + id.getProperty());\n-        return (unit == null) ? \"?\" : unit.toString();\n+    /**\n+     * Configure itself as well as underlying slices.\n+     * \n+     */\n+    public DistributedJDBCConfigurationImpl(ConfigurationProvider cp) {\n+        this();\n+        cp.setInto(this);\n+        setDiagnosticContext(this);\n     }\n     \n-    private void setDiagnosticContext(OpenJPAConfiguration conf, String unit) {\n+    private void setDiagnosticContext(OpenJPAConfiguration conf) {\n+        String unit = conf.getId();\n         LogFactory logFactory = conf.getLogFactory();\n         if (logFactory instanceof LogFactoryImpl) {\n             ((LogFactoryImpl)logFactory).setDiagnosticContext(unit);\n@@ -153,7 +139,7 @@ private void setDiagnosticContext(OpenJPAConfiguration conf, String unit) {\n      */\n     public List<String> getAvailableSliceNames() {\n         List<String> result = new ArrayList<String>();\n-        for (Slice slice:_slices)\n+        for (Slice slice : _slices)\n             result.add(slice.getName());\n         return result;\n     }\n@@ -163,7 +149,7 @@ private void setDiagnosticContext(OpenJPAConfiguration conf, String unit) {\n      */\n     public List<Slice> getSlices(Slice.Status...statuses) {\n         if (statuses == null)\n-            return Collections.unmodifiableList(_slices);\n+            return _slices == null ? Collections.EMPTY_LIST : Collections.unmodifiableList(_slices);\n         List<Slice> result = new ArrayList<Slice>();\n         for (Slice slice:_slices) {\n             for (Slice.Status status:statuses)\n@@ -173,25 +159,19 @@ private void setDiagnosticContext(OpenJPAConfiguration conf, String unit) {\n         return result;\n     }\n     \n-    /**\n-     * Gets the master slice. \n-     */\n-    public Slice getMaster() {\n-        return _master;\n-    }\n \n     public Slice getSlice(String name) {\n         return getSlice(name, false);\n     }\n     \n     /**\n-     * Get the configuration for given slice.\n+     * Get the Slice of the given slice.\n      * \n      * @param mustExist if true an exception if raised if the given slice name\n-     * is not an active slice.\n+     * is not a valid slice.\n      */\n     public Slice getSlice(String name, boolean mustExist) {\n-        for (Slice slice:_slices)\n+        for (Slice slice : _slices)\n             if (slice.getName().equals(name))\n                 return slice;\n         if (mustExist) {\n@@ -261,6 +241,29 @@ public DistributedDataSource getConnectionFactory() {\n     public boolean isLenient() {\n         return lenientPlugin.get();\n     }\n+    \n+    public void setLenient(boolean lenient) {\n+        lenientPlugin.set(lenient);\n+    }\n+\n+    public void setMaster(String master) {\n+        masterPlugin.set(master);\n+    }\n+    \n+    /**\n+     * Gets the master slice.\n+     */\n+    public Slice getMasterSlice() {\n+        if (_master == null) {\n+            String value = masterPlugin.get();\n+            if (value == null) {\n+                _master = _slices.get(0);\n+            } else {\n+                _master = getSlice(value, true);\n+            }\n+        }\n+        return _master;\n+    }\n \n     /**\n      * Create a virtual DistributedDataSource as a composite of individual\n@@ -355,48 +358,37 @@ private boolean verifyDataSource(Slice slice, DataSource ds,\n      * Either throw a user exception or add the configuration to the given list,\n      * based on <code>isLenient</code>.\n      */\n-    private void handleBadConnection(boolean isLenient, Slice slice,\n-            Throwable ex) {\n+    private void handleBadConnection(boolean isLenient, Slice slice, Throwable ex) {\n         OpenJPAConfiguration conf = slice.getConfiguration();\n         String url = conf.getConnectionURL();\n-        Log log = getLog(LOG_RUNTIME);\n+        Log log = conf.getConfigurationLog();\n         if (isLenient) {\n             if (ex != null) {\n-                log.warn(_loc.get(\"slice-connect-known-warn\", slice, url, ex\n-                        .getCause()));\n+                log.warn(_loc.get(\"slice-connect-known-warn\", slice, url, ex.getCause()));\n             } else {\n                 log.warn(_loc.get(\"slice-connect-warn\", slice, url));\n             }\n         } else if (ex != null) {\n-            throw new UserException(_loc.get(\"slice-connect-known-error\",\n-                    slice, url, ex), ex.getCause());\n+            throw new UserException(_loc.get(\"slice-connect-known-error\", slice, url, ex), ex.getCause());\n         } else {\n-            throw new UserException(_loc.get(\"slice-connect-error\", slice,\n-                    url));\n+            throw new UserException(_loc.get(\"slice-connect-error\", slice, url));\n         }\n     }\n \n     /**\n-     * Create individual slices with configurations from the given properties.\n+     * Create a new Slice of given name and given properties.\n+     * \n+     * @param key name of the slice to be created\n+     * @param original a set of properties.\n+     * @return a newly configured slice\n      */\n-    void setSlices(Map original) {\n-        List<String> sliceNames = findSlices(original);\n-        if (sliceNames.isEmpty()) {\n-            throw new UserException(_loc.get(\"slice-none-configured\"));\n-        } \n-        for (String key : sliceNames) {\n-            Slice slice = newSlice(key, original);\n-            _slices.add(slice);\n-        }\n-        setMaster(original);\n-    }\n-    \n     protected Slice newSlice(String key, Map original) {\n         JDBCConfiguration child = new JDBCConfigurationImpl();\n         child.fromProperties(createSliceProperties(original, key));\n-        child.setId(unit+DOT+key);\n-        setDiagnosticContext(child, unit+DOT+key);\n+        child.setId(getId()+DOT+key);\n+        setDiagnosticContext(child);\n         Slice slice = new Slice(key, child);\n+        Log log = getConfigurationLog();\n         if (log.isTraceEnabled())\n             log.trace(_loc.get(\"slice-configuration\", key, child\n                     .toProperties(false)));\n@@ -470,21 +462,21 @@ private static String chopTail(String s, String tail) {\n             return s;\n         return s.substring(0, i);\n     }\n-\n+    \n     /**\n      * Creates given <code>slice</code> specific configuration properties from\n      * given <code>original</code> key-value map. The rules are\n-     * <LI> if key begins with <code>\"slice.XXX.\"</code> where\n+     * <LI> if key begins with <code>\"openjpa.slice.XXX.\"</code> where\n      * <code>XXX</code> is the given slice name, then replace\n-     * <code>\"slice.XXX.</code> with <code>openjpa.</code>.\n-     * <LI>if key begins with <code>\"slice.\"</code> but not with\n-     * <code>\"slice.XXX.\"</code>, the ignore i.e. any property of other\n+     * <code>\"openjpa.slice.XXX.</code> with <code>openjpa.</code>.\n+     * <LI>if key begins with <code>\"openjpa.slice.\"</code> but not with\n+     * <code>\"openjpa.slice.XXX.\"</code>, then ignore i.e. any property of other\n      * slices or global slice property e.g.\n-     * <code>slice.DistributionPolicy</code>\n-     * <code>if key starts with <code>\"openjpa.\"</code> and a corresponding\n-     * <code>\"slice.XXX.\"</code> property does not exist, then use this as\n+     * <code>openjpa.slice.DistributionPolicy</code>\n+     * <li>if key starts with <code>\"openjpa.\"</code> and a corresponding\n+     * <code>\"openjpa.slice.XXX.\"</code> property does not exist, then use this as\n      * default property\n-     * <code>property with any other prefix is simply copied\n+     * <li>property with any other prefix is simply copied\n      *\n      */\n     Map createSliceProperties(Map original, String slice) {\n@@ -510,30 +502,8 @@ Map createSliceProperties(Map original, String slice) {\n         }\n         return result;\n     }\n-\n-    /**\n-     * Determine the master slice.\n-     */\n-    private void setMaster(Map original) {\n-        String key = masterPlugin.getProperty();\n-        Object masterSlice = original.get(key);\n-        Log log = getConfigurationLog();\n-        List<Slice> activeSlices = getSlices(null);\n-        if (masterSlice == null) {\n-            _master = activeSlices.get(0);\n-            if (log.isWarnEnabled())\n-                log.warn(_loc.get(\"no-master-slice\", key, _master));\n-            return;\n-        }\n-        for (Slice slice:activeSlices)\n-            if (slice.getName().equals(masterSlice))\n-                _master = slice;\n-        if (_master == null) {\n-            _master = activeSlices.get(0);\n-        }\n-    }\n     \n-    public Slice addSlice(String name, Map newProps) {\n+    Slice addSlice(String name, Map newProps) {\n         String prefix = PREFIX_SLICE + DOT + name + DOT;\n         for (Object key : newProps.keySet()) {\n             if (!String.class.isInstance(key) \n@@ -548,11 +518,33 @@ public Slice addSlice(String name, Map newProps) {\n          slice = newSlice(name, original);\n         _slices.add(slice);\n         try {\n-            virtualDataSource.addDataSource(createDataSource(slice));\n+            getConnectionFactory().addDataSource(createDataSource(slice));\n         } catch (Exception ex) {\n             handleBadConnection(false, slice, ex);\n             return null;\n         }\n         return slice;\n     }\n+    \n+    /**\n+     * Given the properties, creates a set of individual configurations.\n+     */\n+    @Override\n+    public void fromProperties(Map original) {\n+        super.fromProperties(original);\n+        setDiagnosticContext(this);\n+        List<String> sliceNames = findSlices(original);\n+        for (String name : sliceNames) {\n+            Slice slice = newSlice(name, original);\n+            _slices.add(slice);\n+        }\n+    }\n+       \n+    @Override\n+    public DecoratingDataSource createConnectionFactory() {\n+        if (virtualDataSource == null) {\n+            virtualDataSource = createDistributedDataStore();\n+        }\n+        return virtualDataSource;\n+    }\n }"},{"sha":"eb6779bc5bca391ad31cf53c0f1e710400f66740","filename":"openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedJDBCStoreManager.java","status":"modified","additions":11,"deletions":12,"changes":23,"blob_url":"https://github.com/apache/openjpa/blob/c7addd5f51598dc111e89db16160c912e159c132/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedJDBCStoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/c7addd5f51598dc111e89db16160c912e159c132/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedJDBCStoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedJDBCStoreManager.java?ref=c7addd5f51598dc111e89db16160c912e159c132","patch":"@@ -80,8 +80,7 @@\n     private final List<SliceStoreManager> _slices;\n     private JDBCStoreManager _master;\n     private final DistributedJDBCConfiguration _conf;\n-    private static final Localizer _loc =\n-            Localizer.forPackage(DistributedJDBCStoreManager.class);\n+    private static final Localizer _loc = Localizer.forPackage(DistributedJDBCStoreManager.class);\n \n     private static final Constructor<ClientConnection> clientConnectionImpl;\n     private static final Constructor<RefCountConnection> refCountConnectionImpl;\n@@ -108,13 +107,14 @@ public DistributedJDBCStoreManager(DistributedJDBCConfiguration conf) {\n         super();\n         _conf = conf;\n         _slices = new ArrayList<SliceStoreManager>();\n-        List<String> sliceNames = conf.getActiveSliceNames();\n-        for (String name : sliceNames) {\n-            SliceStoreManager slice =\n-                    new SliceStoreManager(conf.getSlice(name));\n-            _slices.add(slice);\n-            if (slice.getName().equals(_conf.getMaster().getName()))\n-                _master = slice;\n+        List<Slice> slices = conf.getSlices(Slice.Status.ACTIVE);\n+        Slice masterSlice = conf.getMasterSlice();\n+        for (Slice slice : slices) {\n+            SliceStoreManager store = new SliceStoreManager(slice);\n+            _slices.add(store);\n+            if (slice == masterSlice) {\n+                _master = store;\n+            }\n         }\n     }\n \n@@ -128,8 +128,7 @@ public SliceStoreManager getSlice(int i) {\n     \n     public SliceStoreManager addSlice(Slice slice) {\n         SliceStoreManager result = new SliceStoreManager(slice);\n-        result.setContext(getContext(),\n-                (JDBCConfiguration)slice.getConfiguration());\n+        result.setContext(getContext(), (JDBCConfiguration)slice.getConfiguration());\n         _slices.add(result);\n         return result;\n     }\n@@ -274,7 +273,7 @@ public Collection flush(Collection sms) {\n         Map<String, StateManagerSet> subsets = bin(sms, null);\n         Collection<StateManagerSet> remaining = \n             new ArrayList<StateManagerSet>(subsets.values());\n-        ExecutorService threadPool = SliceThread.newPool(_slices.size());\n+        ExecutorService threadPool = SliceThread.getPool();\n         for (int i = 0; i < _slices.size(); i++) {\n             SliceStoreManager slice = _slices.get(i);\n             StateManagerSet subset = subsets.get(slice.getName());"},{"sha":"849d4c43367eb0781f26a004494c58182ea11966","filename":"openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedStoreQuery.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/c7addd5f51598dc111e89db16160c912e159c132/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/c7addd5f51598dc111e89db16160c912e159c132/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedStoreQuery.java?ref=c7addd5f51598dc111e89db16160c912e159c132","patch":"@@ -125,8 +125,7 @@ public ResultObjectProvider executeQuery(StoreQuery q,\n \t\t\tList<SliceStoreManager> targets = findTargets();\n \t\t\tQueryContext ctx = q.getContext();\n \t\t\tboolean isReplicated = containsReplicated(ctx);\n-            ExecutorService threadPool = SliceThread.newPool(\n-                    owner._queries.size());\n+            ExecutorService threadPool = SliceThread.getPool();\n \t\t\tfor (int i = 0; i < owner._queries.size(); i++) {\n                 // if replicated, then execute only on single slice\n \t\t\t\tif (isReplicated && !usedExecutors.isEmpty()) {\n@@ -206,7 +205,7 @@ public Number executeDelete(StoreQuery q, Object[] params) {\n \t\t\tIterator<StoreQuery> qs = owner._queries.iterator();\n \t\t\tList<Future<Number>> futures = null;\n \t\t\tint result = 0;\n-            ExecutorService threadPool = SliceThread.newPool(executors.size());\n+            ExecutorService threadPool = SliceThread.getPool();\n \t\t\tfor (Executor ex : executors) {\n \t\t\t\tif (futures == null)\n                     futures = new ArrayList<Future<Number>>();\n@@ -234,7 +233,7 @@ public Number executeUpdate(StoreQuery q, Object[] params) {\n \t\t\tIterator<StoreQuery> qs = owner._queries.iterator();\n \t\t\tList<Future<Number>> futures = null;\n \t\t\tint result = 0;\n-            ExecutorService threadPool = SliceThread.newPool(executors.size());\n+            ExecutorService threadPool = SliceThread.getPool();\n \t\t\tfor (Executor ex : executors) {\n \t\t\t\tif (futures == null)\n                     futures = new ArrayList<Future<Number>>();"},{"sha":"60213113f545458b7f328f8ef90990421875a144","filename":"openjpa-slice/src/test/java/org/apache/openjpa/slice/PObject.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/c7addd5f51598dc111e89db16160c912e159c132/openjpa-slice/src/test/java/org/apache/openjpa/slice/PObject.java","raw_url":"https://github.com/apache/openjpa/raw/c7addd5f51598dc111e89db16160c912e159c132/openjpa-slice/src/test/java/org/apache/openjpa/slice/PObject.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/test/java/org/apache/openjpa/slice/PObject.java?ref=c7addd5f51598dc111e89db16160c912e159c132","patch":"@@ -18,6 +18,8 @@\n  */\n package org.apache.openjpa.slice;\n \n+import java.util.concurrent.atomic.AtomicLong;\n+\n import javax.persistence.Entity;\n import javax.persistence.Id;\n \n@@ -28,10 +30,10 @@\n \t\n \tprivate int value;\n \t\n-\tprivate static long idCounter = System.currentTimeMillis();\n+\tprivate static AtomicLong idCounter = new AtomicLong(System.currentTimeMillis());\n \t\n \tpublic PObject() {\n-\t\tid = ++idCounter;\n+\t\tid = idCounter.addAndGet(1);\n \t}\n \t\n \tpublic long getId() {"},{"sha":"14215b613769e33bf2b6be0d058789f6fa978885","filename":"openjpa-slice/src/test/java/org/apache/openjpa/slice/TestBasic.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/c7addd5f51598dc111e89db16160c912e159c132/openjpa-slice/src/test/java/org/apache/openjpa/slice/TestBasic.java","raw_url":"https://github.com/apache/openjpa/raw/c7addd5f51598dc111e89db16160c912e159c132/openjpa-slice/src/test/java/org/apache/openjpa/slice/TestBasic.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/test/java/org/apache/openjpa/slice/TestBasic.java?ref=c7addd5f51598dc111e89db16160c912e159c132","patch":"@@ -317,22 +317,22 @@ public void testGetConnection() {\n     }\n     \n     public void testDynamicSlice() {\n-        DistributedConfiguration conf =\n-            (DistributedConfiguration)emf.getConfiguration();\n+        DistributedConfiguration conf = (DistributedConfiguration)emf.getConfiguration();\n         conf.setDistributionPolicyInstance(new DistributionPolicy() {\n             public String distribute(Object pc, List<String> slices,\n                     Object context) {\n                 if (PObject.class.isInstance(pc)) {\n                     PObject o = (PObject)pc;\n                     if (o.getValue() > 50) {\n-                        DistributedBroker broker = (DistributedBroker)context;\n+                        DistributedBrokerFactory bf = (DistributedBrokerFactory)\n+                            ((DistributedBroker)context).getBrokerFactory();\n                         Map newProps = new HashMap();\n                         newProps.put(\"openjpa.slice.newslice.ConnectionURL\",\n                             \"jdbc:derby:target/database/newslice;create=true\");\n                         newProps.put(\n                             \"openjpa.slice.newslice.ConnectionDriverName\",\n                             \"org.apache.derby.jdbc.EmbeddedDriver\");\n-                        broker.addSlice(\"newslice\", newProps);\n+                        bf.addSlice(\"newslice\", newProps);\n                         return \"newslice\";\n                     } else {\n                         return slices.get(o.getValue()%slices.size());"},{"sha":"ee65ebda0f745e77fd7b9b2c6bbb986acad875aa","filename":"openjpa-slice/src/test/java/org/apache/openjpa/slice/TestConfiguration.java","status":"modified","additions":3,"deletions":5,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/c7addd5f51598dc111e89db16160c912e159c132/openjpa-slice/src/test/java/org/apache/openjpa/slice/TestConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/c7addd5f51598dc111e89db16160c912e159c132/openjpa-slice/src/test/java/org/apache/openjpa/slice/TestConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/test/java/org/apache/openjpa/slice/TestConfiguration.java?ref=c7addd5f51598dc111e89db16160c912e159c132","patch":"@@ -64,20 +64,18 @@ public void testConfig() {\n     }\n     \n     public void testDynamicConfiguration() {\n-        DistributedJDBCConfiguration conf =\n-            (DistributedJDBCConfiguration) emf.getConfiguration();\n+        DistributedJDBCConfiguration conf = (DistributedJDBCConfiguration) emf.getConfiguration();\n         List<String> slices = conf.getAvailableSliceNames();\n         assertTrue(slices.contains(\"One\"));\n         assertTrue(slices.contains(\"Two\"));\n         assertTrue(slices.contains(\"Three\"));\n-        BrokerFactory bf = ((EntityManagerFactoryImpl) emf).getBrokerFactory();\n-        DistributedBroker broker = (DistributedBroker)bf.newBroker();\n+        DistributedBrokerFactory bf = (DistributedBrokerFactory)((EntityManagerFactoryImpl) emf).getBrokerFactory();\n         Map newProps = new HashMap();\n         newProps.put(\"openjpa.slice.newslice.ConnectionURL\",\n                 \"jdbc:derby:target/database/newslice;create=true\");\n         newProps.put(\"openjpa.slice.newslice.ConnectionDriverName\",\n                 \"org.apache.derby.jdbc.EmbeddedDriver\");\n-        broker.addSlice(\"newslice\", newProps);\n+        bf.addSlice(\"newslice\", newProps);\n         \n         assertTrue(conf.getActiveSliceNames().contains(\"newslice\"));\n         "},{"sha":"5b82f58105ce3ec6384de9891fdd4654a254d290","filename":"openjpa-slice/src/test/java/org/apache/openjpa/slice/TestQueryMultiThreaded.java","status":"modified","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/apache/openjpa/blob/c7addd5f51598dc111e89db16160c912e159c132/openjpa-slice/src/test/java/org/apache/openjpa/slice/TestQueryMultiThreaded.java","raw_url":"https://github.com/apache/openjpa/raw/c7addd5f51598dc111e89db16160c912e159c132/openjpa-slice/src/test/java/org/apache/openjpa/slice/TestQueryMultiThreaded.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/test/java/org/apache/openjpa/slice/TestQueryMultiThreaded.java?ref=c7addd5f51598dc111e89db16160c912e159c132","patch":"@@ -213,6 +213,34 @@ public Object call() {\n         waitForTermination();\n         em.getTransaction().rollback();\n     }\n+    \n+    public void testHeavyLoad() {\n+        Thread[] threads = new Thread[1000];\n+        for (int i = 0; i < 1000; i++) {\n+            Runnable r = new Runnable() {\n+                public void run() {\n+                    EntityManager em = emf.createEntityManager();\n+                    em.getTransaction().begin();\n+                    for (int j = 0; j < 10; j ++) {\n+                        PObject pc = new PObject();\n+                        pc.setValue((int)System.currentTimeMillis()%10);\n+                        em.persist(pc);\n+                    }\n+                    em.getTransaction().commit();\n+                }\n+            };\n+            threads[i] = new Thread(r);\n+            threads[i].start();\n+        }\n+        for (Thread t : threads) {\n+            try {\n+                t.join();\n+            } catch (InterruptedException e) {\n+                e.printStackTrace();\n+                fail();\n+            }\n+        }\n+    }\n \n     public void testHint() {\n         final List<String> targets = new ArrayList<String>();"}]}

