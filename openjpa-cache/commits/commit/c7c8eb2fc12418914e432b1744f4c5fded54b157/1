{"sha":"c7c8eb2fc12418914e432b1744f4c5fded54b157","node_id":"MDY6Q29tbWl0MjA2MzY0OmM3YzhlYjJmYzEyNDE4OTE0ZTQzMmIxNzQ0ZjRjNWZkZWQ1NGIxNTc=","commit":{"author":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2011-10-12T18:28:26Z"},"committer":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2011-10-12T18:28:26Z"},"message":"OPENJPA-2044.  Updating the processing for the openjpa.header parameter on the AnnotationProcessor6 code.  Not only to read the actual data (vs a String representation of the URL stream), but also to make it more flexible on the number of lines contained in the designated header file.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1182512 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"684f2fc65a206f52c96977abd03f655661388719","url":"https://api.github.com/repos/apache/openjpa/git/trees/684f2fc65a206f52c96977abd03f655661388719"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/c7c8eb2fc12418914e432b1744f4c5fded54b157","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/c7c8eb2fc12418914e432b1744f4c5fded54b157","html_url":"https://github.com/apache/openjpa/commit/c7c8eb2fc12418914e432b1744f4c5fded54b157","comments_url":"https://api.github.com/repos/apache/openjpa/commits/c7c8eb2fc12418914e432b1744f4c5fded54b157/comments","author":null,"committer":null,"parents":[{"sha":"b5859a740b3d3245654841a9c2b9d142e1d2457a","url":"https://api.github.com/repos/apache/openjpa/commits/b5859a740b3d3245654841a9c2b9d142e1d2457a","html_url":"https://github.com/apache/openjpa/commit/b5859a740b3d3245654841a9c2b9d142e1d2457a"}],"stats":{"total":33,"additions":23,"deletions":10},"files":[{"sha":"eb2b7bc811ad3246f2720b87b6a7ab2b55467dbd","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/AnnotationProcessor6.java","status":"modified","additions":12,"deletions":5,"changes":17,"blob_url":"https://github.com/apache/openjpa/blob/c7c8eb2fc12418914e432b1744f4c5fded54b157/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/AnnotationProcessor6.java","raw_url":"https://github.com/apache/openjpa/raw/c7c8eb2fc12418914e432b1744f4c5fded54b157/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/AnnotationProcessor6.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/AnnotationProcessor6.java?ref=c7c8eb2fc12418914e432b1744f4c5fded54b157","patch":"@@ -21,12 +21,15 @@\n import static javax.lang.model.SourceVersion.RELEASE_6;\n \n import java.io.IOException;\n+import java.io.InputStream;\n import java.io.PrintWriter;\n import java.net.URL;\n+import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Date;\n import java.util.List;\n import java.util.Map;\n+import java.util.Scanner;\n import java.util.Set;\n \n import javax.annotation.Generated;\n@@ -107,7 +110,7 @@\n     private MetaDataFactory factory;\n     private int generatedSourceVersion = 6;\n     private CompileTimeLogger logger;\n-    private String header;\n+    private List<String> header = new ArrayList<String>();\n     private boolean active;\n     private static Localizer _loc =  Localizer.forPackage(AnnotationProcessor6.class);\n \n@@ -302,8 +305,8 @@ private void annotate(SourceCode source, String originalClass) {\n     }\n     \n     private void comment(SourceCode source) {\n-        if (header != null)\n-            source.addComment(false, header);\n+        if (header.size() != 0)\n+            source.addComment(false, header.toArray(new String[header.size()]));\n         String defaultHeader = _loc.get(\"mmg-tool-sign\").getMessage();\n         source.addComment(false, defaultHeader);\n     }\n@@ -347,11 +350,15 @@ private void setHeader() {\n             return;\n         }\n         if (\"ASL\".equalsIgnoreCase(headerOption)) {\n-            header = _loc.get(\"mmg-asl-header\").getMessage();\n+            header.add(_loc.get(\"mmg-asl-header\").getMessage());\n         } else {\n             try {\n                 URL url = new URL(headerOption);\n-                header = url.getContent().toString();\n+                InputStream is = url.openStream();\n+                Scanner s = new Scanner(is);\n+                while (s.hasNextLine()) {\n+                    header.add(s.nextLine());\n+                }\n             } catch (Throwable t) {\n                 \n             }"},{"sha":"498b1b26c2d2dac7874d9dc371cb236f44dec25c","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/util/SourceCode.java","status":"modified","additions":11,"deletions":5,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/c7c8eb2fc12418914e432b1744f4c5fded54b157/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/util/SourceCode.java","raw_url":"https://github.com/apache/openjpa/raw/c7c8eb2fc12418914e432b1744f4c5fded54b157/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/util/SourceCode.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/util/SourceCode.java?ref=c7c8eb2fc12418914e432b1744f4c5fded54b157","patch":"@@ -141,14 +141,20 @@ ClassName getOrCreateImport(String name) {\n \tpublic SourceCode addComment(boolean inline, String... lines) {\n \t    if (lines == null)\n \t        return this;\n-\t    if (lines.length == 1 && lines[0].length() > 120)\n-\t        return addComment(inline, wrap(lines[0], 120-4));\n \t\tif (comments == null) \n \t\t    comments = new ArrayList<Comment>();\n \t\tComment comment = new Comment();\n \t\tcomments.add(comment);\n \t\tcomment.makeInline(inline);\n-\t\tfor (String line:lines) comment.append(line);\n+\t\tfor (String line:lines) {\n+\t\t    // Handle long header comment lines...\n+\t\t    if (line.length() > 120-4) {\n+\t\t        String[] wrappedLines = wrap(line, 120-4);\n+\t\t        for (String w:wrappedLines) comment.append(w);\n+\t\t    } else {\n+\t            comment.append(line);\n+\t\t    }\n+\t\t}\n \t\treturn this;\n \t}\n \t\n@@ -746,8 +752,8 @@ public void write(PrintWriter out, int tab) {\n \t\t\t\t\tif (i == 0) {\n \t\t\t\t\t\tout.println(\"/** \");\n \t\t\t\t\t\ttab(out, tab);\n-\t\t\t\t\t} \n-\t\t\t\t\tout.println(\" *  \" + l);\n+\t\t\t\t\t}\n+                    out.println(\" *  \" + l);\n \t\t\t\t\ti++;\n \t\t\t\t}\n \t\t\t\ttab(out, tab);"}]}

