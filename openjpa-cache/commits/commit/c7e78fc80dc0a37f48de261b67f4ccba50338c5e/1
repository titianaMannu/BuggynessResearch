{"sha":"c7e78fc80dc0a37f48de261b67f4ccba50338c5e","node_id":"MDY6Q29tbWl0MjA2MzY0OmM3ZTc4ZmM4MGRjMGEzN2Y0OGRlMjYxYjY3ZjRjY2JhNTAzMzhjNWU=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-07-17T20:11:42Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-07-17T20:11:42Z"},"message":"OPENJPA-662: Allow version field values be loaded in projection query\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@677704 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ca12826ee7a1698862f9eec24ec57239b97a5e45","url":"https://api.github.com/repos/apache/openjpa/git/trees/ca12826ee7a1698862f9eec24ec57239b97a5e45"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/c7e78fc80dc0a37f48de261b67f4ccba50338c5e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/c7e78fc80dc0a37f48de261b67f4ccba50338c5e","html_url":"https://github.com/apache/openjpa/commit/c7e78fc80dc0a37f48de261b67f4ccba50338c5e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/c7e78fc80dc0a37f48de261b67f4ccba50338c5e/comments","author":null,"committer":null,"parents":[{"sha":"948c38e3329d56fa751835dbe0f89d910f775d9f","url":"https://api.github.com/repos/apache/openjpa/commits/948c38e3329d56fa751835dbe0f89d910f775d9f","html_url":"https://github.com/apache/openjpa/commit/948c38e3329d56fa751835dbe0f89d910f775d9f"}],"stats":{"total":26,"additions":18,"deletions":8},"files":[{"sha":"7cf3c535daf986d2581366017d5e408d49c9a788","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMapping.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/c7e78fc80dc0a37f48de261b67f4ccba50338c5e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMapping.java","raw_url":"https://github.com/apache/openjpa/raw/c7e78fc80dc0a37f48de261b67f4ccba50338c5e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMapping.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMapping.java?ref=c7e78fc80dc0a37f48de261b67f4ccba50338c5e","patch":"@@ -880,6 +880,11 @@ public Joins join(Joins joins, boolean forceOuter, boolean toMany) {\n     public Object loadProjection(JDBCStore store, JDBCFetchConfiguration fetch,\n         Result res, Joins joins)\n         throws SQLException {\n+    \t// OPENJPA-662: Version fields have NoneFieldStrategy -- hence they\n+    \t// need special treatment\n+    \tif (isVersion()) {\n+    \t\treturn getDefiningMapping().getVersion().load(null, store, res);\n+    \t}\n         return assertStrategy().loadProjection(store, fetch, res, joins);\n     }\n "},{"sha":"7a60a2d72c1179e8f6993d8ffaf9a33fb1baf868","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/Version.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/c7e78fc80dc0a37f48de261b67f4ccba50338c5e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/Version.java","raw_url":"https://github.com/apache/openjpa/raw/c7e78fc80dc0a37f48de261b67f4ccba50338c5e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/Version.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/Version.java?ref=c7e78fc80dc0a37f48de261b67f4ccba50338c5e","patch":"@@ -338,9 +338,9 @@ public boolean select(Select sel, ClassMapping mapping) {\n         return assertStrategy().select(sel, mapping);\n     }\n \n-    public void load(OpenJPAStateManager sm, JDBCStore store, Result res)\n+    public Object load(OpenJPAStateManager sm, JDBCStore store, Result res)\n         throws SQLException {\n-        assertStrategy().load(sm, store, res);\n+        return assertStrategy().load(sm, store, res);\n     }\n \n     public void afterLoad(OpenJPAStateManager sm, JDBCStore store) {"},{"sha":"425e44c01bff5f8aa33e25e30571c3107b95b076","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/VersionStrategy.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/c7e78fc80dc0a37f48de261b67f4ccba50338c5e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/VersionStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/c7e78fc80dc0a37f48de261b67f4ccba50338c5e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/VersionStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/VersionStrategy.java?ref=c7e78fc80dc0a37f48de261b67f4ccba50338c5e","patch":"@@ -53,7 +53,7 @@\n     /**\n      * Load data.\n      */\n-    public void load(OpenJPAStateManager sm, JDBCStore store, Result res)\n+    public Object load(OpenJPAStateManager sm, JDBCStore store, Result res)\n         throws SQLException;\n \n     /**"},{"sha":"426e2231e6455653e549182416dd597a1497cb69","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/AbstractVersionStrategy.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/c7e78fc80dc0a37f48de261b67f4ccba50338c5e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/AbstractVersionStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/c7e78fc80dc0a37f48de261b67f4ccba50338c5e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/AbstractVersionStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/AbstractVersionStrategy.java?ref=c7e78fc80dc0a37f48de261b67f4ccba50338c5e","patch":"@@ -53,8 +53,9 @@ public boolean select(Select sel, ClassMapping mapping) {\n         return false;\n     }\n \n-    public void load(OpenJPAStateManager sm, JDBCStore store, Result res)\n+    public Object load(OpenJPAStateManager sm, JDBCStore store, Result res)\n         throws SQLException {\n+    \treturn null;\n     }\n \n     public void afterLoad(OpenJPAStateManager sm, JDBCStore store) {"},{"sha":"b23c9164989350068e7e9d6b9318b7cd922e2ed4","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ColumnVersionStrategy.java","status":"modified","additions":8,"deletions":4,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/c7e78fc80dc0a37f48de261b67f4ccba50338c5e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ColumnVersionStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/c7e78fc80dc0a37f48de261b67f4ccba50338c5e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ColumnVersionStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ColumnVersionStrategy.java?ref=c7e78fc80dc0a37f48de261b67f4ccba50338c5e","patch":"@@ -178,28 +178,32 @@ public boolean select(Select sel, ClassMapping mapping) {\n         return true;\n     }\n \n-    public void load(OpenJPAStateManager sm, JDBCStore store, Result res)\n+    public Object load(OpenJPAStateManager sm, JDBCStore store, Result res)\n         throws SQLException {\n         // typically if one version column is in the result, they all are, so\n         // optimize by checking for the first one before doing any real work\n         Column[] cols = vers.getColumns();\n         if (!res.contains(cols[0]))\n-            return;\n+            return null;\n \n         Object version = null;\n         if (cols.length > 0)\n             version = new Object[cols.length];\n         Object cur;\n         for (int i = 0; i < cols.length; i++) {\n             if (i > 0 && !res.contains(cols[i]))\n-                return;\n+                return null;\n             cur = res.getObject(cols[i], -1, null);\n             if (cols.length == 1)\n                 version = cur;\n             else\n                 ((Object[]) version)[i] = cur;\n         }\n-        sm.setVersion(version);\n+        // OPENJPA-662 Allow a null StateManager because this method may just be\n+        // invoked to get the result of projection query\n+        if (sm != null)\n+        \tsm.setVersion(version);\n+        return version;\n     }\n \n     public boolean checkVersion(OpenJPAStateManager sm, JDBCStore store,"}]}

