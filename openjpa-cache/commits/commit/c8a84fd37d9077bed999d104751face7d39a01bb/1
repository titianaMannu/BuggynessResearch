{"sha":"c8a84fd37d9077bed999d104751face7d39a01bb","node_id":"MDY6Q29tbWl0MjA2MzY0OmM4YTg0ZmQzN2Q5MDc3YmVkOTk5ZDEwNDc1MWZhY2U3ZDM5YTAxYmI=","commit":{"author":{"name":"Heath Thomann","email":"hthomann@apache.org","date":"2011-10-20T16:37:15Z"},"committer":{"name":"Heath Thomann","email":"hthomann@apache.org","date":"2011-10-20T16:37:15Z"},"message":"OPENJPA-2051: Change to ensure entities are properly cascaded after a flush.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1186903 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d428ec3fcfd4e11ea245ec5e6fbc37aa2f6d221e","url":"https://api.github.com/repos/apache/openjpa/git/trees/d428ec3fcfd4e11ea245ec5e6fbc37aa2f6d221e"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/c8a84fd37d9077bed999d104751face7d39a01bb","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/c8a84fd37d9077bed999d104751face7d39a01bb","html_url":"https://github.com/apache/openjpa/commit/c8a84fd37d9077bed999d104751face7d39a01bb","comments_url":"https://api.github.com/repos/apache/openjpa/commits/c8a84fd37d9077bed999d104751face7d39a01bb/comments","author":null,"committer":null,"parents":[{"sha":"16c76a0870c24d4a61a1dd191f17a155504accbb","url":"https://api.github.com/repos/apache/openjpa/commits/16c76a0870c24d4a61a1dd191f17a155504accbb","html_url":"https://github.com/apache/openjpa/commit/16c76a0870c24d4a61a1dd191f17a155504accbb"}],"stats":{"total":355,"additions":354,"deletions":1},"files":[{"sha":"7fec3957f8cde8742ff5f161b4a926be29d271f2","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java","status":"modified","additions":30,"deletions":0,"changes":30,"blob_url":"https://github.com/apache/openjpa/blob/c8a84fd37d9077bed999d104751face7d39a01bb/openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java","raw_url":"https://github.com/apache/openjpa/raw/c8a84fd37d9077bed999d104751face7d39a01bb/openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java?ref=c8a84fd37d9077bed999d104751face7d39a01bb","patch":"@@ -73,6 +73,8 @@\n     \n     private boolean _useListAttributeForArrays = false; \n     private boolean _metaFactoriesAreStrict = false; \n+    private boolean _resetFlushFlagForCascadePersist = true;//OPENJPA-2051\n+\n     \n     /**\n      * Whether to require exact identity value types when creating object\n@@ -666,4 +668,32 @@ public boolean getMetaFactoriesAreStrict() {\n     public void setMetaFactoriesAreStrict(boolean metaFactoriesAreStrict) {\n         _metaFactoriesAreStrict = metaFactoriesAreStrict;\n     }\n+\n+    /**\n+     * Whether OpenJPA should reset the internal state (flush flag) when cascading a persist to another \n+     * Entity. That is, when a flush is performed, OpenJPA keep state to indicate the flush has been \n+     * performed.  In certain cascade persist scenarios the fact that a flush has been performed prior to \n+     * a cascade persist can cause certain entities to not be written to the database given the prior \n+     * flush.  This property, when set, will cause the flush flag to be reset in cascade scenarios. For more \n+     * details see JIRA OPENJPA-2051\n+     *    \n+     * @since 2.0.x\n+     */\n+    public boolean getResetFlushFlagForCascadePersist(){\n+        return _resetFlushFlagForCascadePersist;\n+    }\n+    \n+    /**\n+     * Whether OpenJPA should reset the internal state (flush flag) when cascading a persist to another \n+     * Entity. That is, when a flush is performed, OpenJPA keep state to indicate the flush has been \n+     * performed.  In certain cascade persist scenarios the fact that a flush has been performed prior to \n+     * a cascade persist can cause certain entities to not be written to the database given the prior \n+     * flush.  This property, when set, will cause the flush flag to be reset in cascade scenarios. For more \n+     * details see JIRA OPENJPA-2051\n+     *    \n+     * @since 2.0.x\n+     */\n+    public void setResetFlushFlagForCascadePersist(boolean b){\n+        _resetFlushFlagForCascadePersist = b;\n+    }\n }"},{"sha":"c34729015ceda6907e382c9e12d1d7f7d28da325","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/c8a84fd37d9077bed999d104751face7d39a01bb/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/c8a84fd37d9077bed999d104751face7d39a01bb/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java?ref=c8a84fd37d9077bed999d104751face7d39a01bb","patch":"@@ -4109,7 +4109,10 @@ protected void setStateManager(Object id, StateManagerImpl sm, int status) {\n         lock();\n         try {\n             switch (status) {\n-                case STATUS_INIT:\n+                case STATUS_INIT:                \t\n+                \tif (_compat.getResetFlushFlagForCascadePersist()){//OPENJPA-2051                \t\n+                \t\t_flags &= ~FLAG_FLUSHED;\n+                \t}\n                     _cache.add(sm);\n                     break;\n                 case STATUS_TRANSIENT:"},{"sha":"46c3efc8137bc876011974b5f69ca43018b77696","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cascade/Edge.java","status":"added","additions":59,"deletions":0,"changes":59,"blob_url":"https://github.com/apache/openjpa/blob/c8a84fd37d9077bed999d104751face7d39a01bb/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cascade/Edge.java","raw_url":"https://github.com/apache/openjpa/raw/c8a84fd37d9077bed999d104751face7d39a01bb/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cascade/Edge.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cascade/Edge.java?ref=c8a84fd37d9077bed999d104751face7d39a01bb","patch":"@@ -0,0 +1,59 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.cascade;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+\n+@Entity\n+public class Edge {\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.AUTO)\n+    private long oid;\n+\n+    @ManyToOne(cascade = CascadeType.ALL)\n+    @JoinColumn(name = \"SOURCE_OID\")\n+    private Vertex source;\n+\n+    @ManyToOne(cascade = CascadeType.ALL)\n+    @JoinColumn(name = \"TARGET_OID\")\n+    private Vertex target;\n+\n+    protected Edge() {\n+    }\n+\n+    Edge( Vertex src ) {\n+        this();\n+        this.source = src;\n+    }\n+\n+    public void setTarget( Vertex node ) {\n+        this.target = node;\n+    }\n+\n+\tpublic long getOid() {\n+\t\treturn oid;\n+\t}\n+}"},{"sha":"3e6cc2876d3a4366d0ddeb5cf0000618c60c63f3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cascade/TestMultiCascadePersist.java","status":"added","additions":117,"deletions":0,"changes":117,"blob_url":"https://github.com/apache/openjpa/blob/c8a84fd37d9077bed999d104751face7d39a01bb/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cascade/TestMultiCascadePersist.java","raw_url":"https://github.com/apache/openjpa/raw/c8a84fd37d9077bed999d104751face7d39a01bb/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cascade/TestMultiCascadePersist.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cascade/TestMultiCascadePersist.java?ref=c8a84fd37d9077bed999d104751face7d39a01bb","patch":"@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.cascade;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityTransaction;\n+import javax.persistence.NoResultException;\n+import javax.persistence.TypedQuery;\n+\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+public class TestMultiCascadePersist extends SingleEMFTestCase {    \n+\n+    @Override\n+    public void setUp() throws Exception {\n+      setUp(DROP_TABLES, Vertex.class, VertexType.class, Edge.class);\n+    }\n+    \n+    public void testSingleTransaction() {\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        EntityTransaction tx = em.getTransaction();\n+\n+        tx.begin();\n+\n+        //The flush is important to the rest of the test.  If this\n+        //is removed, the test works as expected.  While the flush\n+        //at this point in the test may seem odd/unnecessary, it\n+        //is more clear to perform a flush directly rather than\n+        //something (e.g. query) which would cause a flush under\n+        //the covers.  See OPENJPA-2051 for more details.\n+        em.flush();\n+\n+        VertexType defaultType = new VertexType( \"default\" );\n+        VertexType specialType = new VertexType( \"special\" );\n+\n+        em.persist(defaultType);\n+        em.persist(specialType);\n+\n+        Vertex src = new Vertex( defaultType );\n+        Vertex target = new Vertex( specialType );\n+        \n+        Edge t = src.newEdge( target );\n+        assertNotNull( t );\n+\n+        em.persist(src);\n+\n+        tx.commit();\n+\n+        TypedQuery<Edge> q = em.createQuery( \"SELECT t FROM Edge t\", Edge.class );\n+        List<Edge> resultList = q.getResultList();\n+\n+        assertEquals( 1, resultList.size() );\n+        assertEquals( 2, findAllVertexType(em).size() );\n+        if (emf.getConfiguration().getCompatibilityInstance().getResetFlushFlagForCascadePersist()){\n+        \tassertEquals( 2, findAllVertex(em).size() );\n+        }\n+        else{\n+        \t//There *should* be 2 Vertex....but by default we can not fix this without a\n+        \t//compatibility flag.\n+       \t    assertEquals( 1, findAllVertex(em).size() );\n+        }\n+    }\n+\n+    public VertexType findVertexTypeByName(EntityManager em, String name ) {\n+        try {\n+            TypedQuery<VertexType> query = em.createNamedQuery( \"VertexType.findByName\",\n+                    VertexType.class );\n+            query.setParameter( 1, name );\n+            return query.getSingleResult();\n+        } catch ( NoResultException nre ) {\n+            return null;\n+        }\n+    }\n+    \n+    public List<VertexType> findAllVertexType(EntityManager em) {\n+        try {\n+            TypedQuery<VertexType> query = em.createNamedQuery( \"VertexType.findAll\",\n+                    VertexType.class );\n+            return query.getResultList();\n+        } catch ( NoResultException nre ) {\n+            return Collections.emptyList();\n+        }\n+    }\n+    \n+    public List<Vertex> findAllVertex(EntityManager em) {\n+        try {\n+            TypedQuery<Vertex> query = em.createNamedQuery( \"Vertex.findAll\",\n+                    Vertex.class );\n+            return query.getResultList();\n+        } catch ( NoResultException nre ) {\n+            return Collections.emptyList();\n+        }\n+    }    \n+}\n+\n+\n+"},{"sha":"e9917fc84ad12457df5101fc3912164894a7c7be","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cascade/Vertex.java","status":"added","additions":78,"deletions":0,"changes":78,"blob_url":"https://github.com/apache/openjpa/blob/c8a84fd37d9077bed999d104751face7d39a01bb/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cascade/Vertex.java","raw_url":"https://github.com/apache/openjpa/raw/c8a84fd37d9077bed999d104751face7d39a01bb/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cascade/Vertex.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cascade/Vertex.java?ref=c8a84fd37d9077bed999d104751face7d39a01bb","patch":"@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.cascade;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.NamedQueries;\n+import javax.persistence.NamedQuery;\n+import javax.persistence.OneToMany;\n+\n+\n+@Entity\n+@NamedQueries({\n+        @NamedQuery(name = \"Vertex.findByName\",\n+                    query = \"SELECT n FROM Vertex n where n.type.name=?1\"),\n+        @NamedQuery(name = \"Vertex.findAll\", query = \"SELECT n FROM Vertex n\") })\n+public class Vertex {\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.AUTO)\n+    private long oid;\n+\n+    @OneToMany(mappedBy = \"source\", cascade = CascadeType.ALL)\n+    private List<Edge> outgoing;\n+\n+    @OneToMany(mappedBy = \"target\", cascade = CascadeType.ALL)\n+    private List<Edge> incoming;\n+\n+    @ManyToOne(cascade = CascadeType.ALL)\n+    @JoinColumn(name = \"TYPE_OID\")\n+    private VertexType type;\n+\n+    protected Vertex() {\n+        this.incoming = new ArrayList<Edge>();\n+        this.outgoing = new ArrayList<Edge>();\n+    }\n+\n+    public Vertex( VertexType type ) {\n+        this();\n+        this.type = type;\n+        type.instances.add( this );\n+    }\n+\n+    public Edge newEdge( Vertex target ) {\n+        Edge t = new Edge( this );\n+        outgoing.add( t );\n+        t.setTarget( target );\n+        return t;\n+    }\n+\n+\tpublic long getOid() {\n+\t\treturn oid;\n+\t}\n+}"},{"sha":"58362f4aa7ae1df82ca6965d29facb5db267e178","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cascade/VertexType.java","status":"added","additions":66,"deletions":0,"changes":66,"blob_url":"https://github.com/apache/openjpa/blob/c8a84fd37d9077bed999d104751face7d39a01bb/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cascade/VertexType.java","raw_url":"https://github.com/apache/openjpa/raw/c8a84fd37d9077bed999d104751face7d39a01bb/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cascade/VertexType.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cascade/VertexType.java?ref=c8a84fd37d9077bed999d104751face7d39a01bb","patch":"@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.cascade;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.NamedQueries;\n+import javax.persistence.NamedQuery;\n+import javax.persistence.OneToMany;\n+\n+@Entity\n+@NamedQueries({\n+        @NamedQuery(name = \"VertexType.findByName\",\n+                    query = \"SELECT t FROM VertexType t where t.name=?1\"),\n+        @NamedQuery(name = \"VertexType.findAll\",\n+                    query = \"SELECT t FROM VertexType t\") })\n+public class VertexType {\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.AUTO)    \n+    private long oid;\n+\n+    @OneToMany(mappedBy = \"type\", cascade = CascadeType.ALL)\n+    List<Vertex> instances;\n+\n+    private String name;\n+\n+    protected VertexType() {\n+        this.instances = new ArrayList<Vertex>();\n+    }\n+\n+    public VertexType( String name ) {\n+        this();\n+        this.name = name;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public long getOid() {\n+        return oid;\n+    }\n+}"}]}

