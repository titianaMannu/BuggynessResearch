{"sha":"c8e3d5dcbb664ae8f9c5a87392fc1e6204e55238","node_id":"MDY6Q29tbWl0MjA2MzY0OmM4ZTNkNWRjYmI2NjRhZThmOWM1YTg3MzkyZmMxZTYyMDRlNTUyMzg=","commit":{"author":{"name":"Jody Grassel","email":"jgrassel@apache.org","date":"2013-10-16T20:12:10Z"},"committer":{"name":"Jody Grassel","email":"jgrassel@apache.org","date":"2013-10-16T20:12:10Z"},"message":"OPENJPA-2414: FinderCache does not consider active Fetch Groups/FetchPlan added Fields\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1532882 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"941d67a6723fdc49bc7a93488c342b60ad366637","url":"https://api.github.com/repos/apache/openjpa/git/trees/941d67a6723fdc49bc7a93488c342b60ad366637"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/c8e3d5dcbb664ae8f9c5a87392fc1e6204e55238","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/c8e3d5dcbb664ae8f9c5a87392fc1e6204e55238","html_url":"https://github.com/apache/openjpa/commit/c8e3d5dcbb664ae8f9c5a87392fc1e6204e55238","comments_url":"https://api.github.com/repos/apache/openjpa/commits/c8e3d5dcbb664ae8f9c5a87392fc1e6204e55238/comments","author":null,"committer":null,"parents":[{"sha":"c3f73b7f7c504d2220c3ae8ceeafba1c458ffee8","url":"https://api.github.com/repos/apache/openjpa/commits/c3f73b7f7c504d2220c3ae8ceeafba1c458ffee8","html_url":"https://github.com/apache/openjpa/commit/c3f73b7f7c504d2220c3ae8ceeafba1c458ffee8"}],"stats":{"total":54,"additions":47,"deletions":7},"files":[{"sha":"2970b608c703f185eec1f47e0ae4e72dab37359e","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/FinderCacheImpl.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/c8e3d5dcbb664ae8f9c5a87392fc1e6204e55238/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/FinderCacheImpl.java","raw_url":"https://github.com/apache/openjpa/raw/c8e3d5dcbb664ae8f9c5a87392fc1e6204e55238/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/FinderCacheImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/FinderCacheImpl.java?ref=c8e3d5dcbb664ae8f9c5a87392fc1e6204e55238","patch":"@@ -108,8 +108,7 @@ public FinderCacheImpl() {\n             return null;\n         }\n         \n-        // FinderCache only operates with Default Fetch Plans\n-        if (!fetch.isDefaultPUFetchGroupConfigurationOnly()) {\n+        if (!fetch.isFetchConfigurationSQLCacheAdmissible()) {\n             return null;\n         }\n         \n@@ -151,8 +150,7 @@ public FinderCacheImpl() {\n                 return null;\n             }\n             \n-            // FinderCache only operates with Default Fetch Plans\n-            if (!fetch.isDefaultPUFetchGroupConfigurationOnly()) {\n+            if (!fetch.isFetchConfigurationSQLCacheAdmissible()) {\n                 return null;\n             }           \n             "},{"sha":"0084ad6a1c2f28ed11075c804fdf729b61d1fee3","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java","status":"modified","additions":15,"deletions":0,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/c8e3d5dcbb664ae8f9c5a87392fc1e6204e55238/openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java","raw_url":"https://github.com/apache/openjpa/raw/c8e3d5dcbb664ae8f9c5a87392fc1e6204e55238/openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java?ref=c8e3d5dcbb664ae8f9c5a87392fc1e6204e55238","patch":"@@ -77,6 +77,7 @@\n     private boolean _singletonLifecycleEventManager = false;\n     private boolean _filterPCRegistryClasses = false; // OPENJPA-2288\n     private boolean _returnNullOnEmptyAggregateResult = true;   // OPENJPA-1794\n+    private boolean _cacheNonDefaultFetchPlanQueries = false; // OPENJPA-2414\n \n     /**\n      * Whether to require exact identity value types when creating object\n@@ -763,4 +764,18 @@ public boolean getReturnNullOnEmptyAggregateResult() {\n     public void setReturnNullOnAggregateResult(boolean returnNullOnEmptyAggregateResult) {\n         _returnNullOnEmptyAggregateResult = returnNullOnEmptyAggregateResult;\n     }\n+    \n+    /**\n+     * Whether the SQL generated for queries executed with a modified fetch plan are cached.\n+     */\n+    public boolean  getCacheNonDefaultFetchPlanQueries() { \n+        return _cacheNonDefaultFetchPlanQueries;\n+    }\n+    \n+    /**\n+     * Whether the SQL generated for queries executed with a modified fetch plan are cached.\n+     */\n+    public void setCacheNonDefaultFetchPlanQueries(boolean bool) {\n+        _cacheNonDefaultFetchPlanQueries = bool;\n+    }\n }"},{"sha":"7edbfca84d00da0ffa309d7afffc74c2b81348f3","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingFetchConfiguration.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/c8e3d5dcbb664ae8f9c5a87392fc1e6204e55238/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingFetchConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/c8e3d5dcbb664ae8f9c5a87392fc1e6204e55238/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingFetchConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingFetchConfiguration.java?ref=c8e3d5dcbb664ae8f9c5a87392fc1e6204e55238","patch":"@@ -595,4 +595,12 @@ public void setCacheStoreMode(DataCacheStoreMode mode) {\n             throw translate(re);\n         }\n     }\n+    \n+    public boolean isFetchConfigurationSQLCacheAdmissible() {\n+        try {\n+            return _fetch.isFetchConfigurationSQLCacheAdmissible();\n+        } catch (RuntimeException re) {\n+            throw translate(re);\n+        }\n+    }\n }"},{"sha":"72c92bd7b5e273740da2ad9ab5514bcf3ddf80c5","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfiguration.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/c8e3d5dcbb664ae8f9c5a87392fc1e6204e55238/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/c8e3d5dcbb664ae8f9c5a87392fc1e6204e55238/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfiguration.java?ref=c8e3d5dcbb664ae8f9c5a87392fc1e6204e55238","patch":"@@ -474,4 +474,9 @@\n      * @since 0.4.1\n      */\n     public FetchConfiguration traverse(FieldMetaData fm);\n+    \n+    /**\n+     * Whether SQL generated by the FetchConfiguration's current configuration should be cached.\n+     */\n+    public boolean isFetchConfigurationSQLCacheAdmissible();\n }"},{"sha":"70c73810ca5f3db1e78a0f7501de0032b3039adc","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfigurationImpl.java","status":"modified","additions":17,"deletions":3,"changes":20,"blob_url":"https://github.com/apache/openjpa/blob/c8e3d5dcbb664ae8f9c5a87392fc1e6204e55238/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/c8e3d5dcbb664ae8f9c5a87392fc1e6204e55238/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfigurationImpl.java?ref=c8e3d5dcbb664ae8f9c5a87392fc1e6204e55238","patch":"@@ -148,7 +148,8 @@ protected static void populateHintSetter(Class<?> target, String method, String\n         public boolean fetchGroupIsPUDefault = false;\n         public boolean extendedPathLookup = false;\n         public DataCacheRetrieveMode cacheRetrieveMode = DataCacheRetrieveMode.USE;\n-        public DataCacheStoreMode cacheStoreMode = DataCacheStoreMode.USE;        \n+        public DataCacheStoreMode cacheStoreMode = DataCacheStoreMode.USE;\n+        public boolean cacheNonDefaultFetchPlanQueries = false;\n     }\n \n     private final ConfigurationState _state;\n@@ -193,6 +194,8 @@ public void setContext(StoreContext ctx) {\n         \n         addFetchGroups(Arrays.asList(fetchGroupList));\n         setMaxFetchDepth(conf.getMaxFetchDepth());\n+        \n+        _state.cacheNonDefaultFetchPlanQueries = conf.getCompatibilityInstance().getCacheNonDefaultFetchPlanQueries();\n     }\n \n     /**\n@@ -201,6 +204,7 @@ public void setContext(StoreContext ctx) {\n     public Object clone() {\n         FetchConfigurationImpl clone = newInstance(null);\n         clone._state.ctx = _state.ctx;\n+        clone._state.cacheNonDefaultFetchPlanQueries = _state.cacheNonDefaultFetchPlanQueries;\n         clone._parent = _parent;\n         clone._fromField = _fromField;\n         clone._fromType = _fromType;\n@@ -346,7 +350,7 @@ public FetchConfiguration addFetchGroup(String name) {\n         return addFetchGroup(name, true);\n     }\n      \n-    public FetchConfiguration addFetchGroup(String name, boolean recomputeIsDefault) {\n+    private FetchConfiguration addFetchGroup(String name, boolean recomputeIsDefault) {\n         if (StringUtils.isEmpty(name))\n             throw new UserException(_loc.get(\"null-fg\"));\n \n@@ -383,7 +387,7 @@ public FetchConfiguration removeFetchGroup(String group) {\n         return removeFetchGroup(group, true);\n     }\n \n-    public FetchConfiguration removeFetchGroup(String group, boolean recomputeIsDefault) {\n+    private FetchConfiguration removeFetchGroup(String group, boolean recomputeIsDefault) {\n         lock();\n         try {\n             if (_state.fetchGroups != null) {\n@@ -483,6 +487,15 @@ public boolean isDefaultPUFetchGroupConfigurationOnly() {\n         return _state.fetchGroupIsPUDefault;\n     }\n \n+    public boolean isFetchConfigurationSQLCacheAdmissible() {\n+        if (_state == null || _state.cacheNonDefaultFetchPlanQueries) {\n+            return false;\n+        } else {\n+            // Only pctx-default matching FetchConfiguration generated SQL is cache permissible\n+            return _state.fetchGroupIsPUDefault;\n+        }\n+    }\n+    \n     public Set<String> getFields() {\n         if (_state.fields == null) return Collections.emptySet();\n         return _state.fields;\n@@ -518,6 +531,7 @@ public FetchConfiguration addFields(Collection<String> fields) {\n                 _state.fields = new HashSet<String>();\n             _state.fields.addAll(fields);\n         } finally {\n+            verifyDefaultPUFetchGroups();\n             unlock();\n         }\n         return this;"}]}

