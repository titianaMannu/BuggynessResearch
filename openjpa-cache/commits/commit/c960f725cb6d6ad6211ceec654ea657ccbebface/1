{"sha":"c960f725cb6d6ad6211ceec654ea657ccbebface","node_id":"MDY6Q29tbWl0MjA2MzY0OmM5NjBmNzI1Y2I2ZDZhZDYyMTFjZWVjNjU0ZWE2NTdjY2JlYmZhY2U=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-11-10T18:34:35Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-11-10T18:34:35Z"},"message":"OPENJPA-1882: Fix DataCacheStoreManager NPE.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1033637 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"db4746dd22fd604a8991b4ac2b025f638efb23d0","url":"https://api.github.com/repos/apache/openjpa/git/trees/db4746dd22fd604a8991b4ac2b025f638efb23d0"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/c960f725cb6d6ad6211ceec654ea657ccbebface","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/c960f725cb6d6ad6211ceec654ea657ccbebface","html_url":"https://github.com/apache/openjpa/commit/c960f725cb6d6ad6211ceec654ea657ccbebface","comments_url":"https://api.github.com/repos/apache/openjpa/commits/c960f725cb6d6ad6211ceec654ea657ccbebface/comments","author":null,"committer":null,"parents":[{"sha":"5040a436e7dc394dececa869321cfae52f30e4ac","url":"https://api.github.com/repos/apache/openjpa/commits/5040a436e7dc394dececa869321cfae52f30e4ac","html_url":"https://github.com/apache/openjpa/commit/5040a436e7dc394dececa869321cfae52f30e4ac"}],"stats":{"total":97,"additions":89,"deletions":8},"files":[{"sha":"8f1fecf645abe5319ba1152fcbe21a432436a337","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java","status":"modified","additions":7,"deletions":8,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/c960f725cb6d6ad6211ceec654ea657ccbebface/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/c960f725cb6d6ad6211ceec654ea657ccbebface/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java?ref=c960f725cb6d6ad6211ceec654ea657ccbebface","patch":"@@ -281,17 +281,17 @@ private static Modifications getModifications(Map<DataCache,Modifications> modMa\n \n     public boolean exists(OpenJPAStateManager sm, Object edata) {\n         DataCache cache = _mgr.selectCache(sm);\n-        CacheStatistics stats = cache.getStatistics();\n+        CacheStatistics stats = (cache == null) ? null : cache.getStatistics();\n         if (cache != null && !isLocking(null) && cache.contains(sm.getObjectId())){\n-            if (stats.isEnabled()) {\n+            if (stats != null && stats.isEnabled()) {\n                 // delay this call ONLY if stats collection is enabled\n                 Class<?> cls = sm.getMetaData().getDescribedType();\n                 ((CacheStatisticsSPI)stats).newGet(cls, false);\n             }\n             return true;\n         }\n         // If isLocking(null)==true && cache.contains(..) == true... probably shouldn't count?\n-        if (stats.isEnabled()) {\n+        if (stats != null && stats.isEnabled()) {\n             // delay this call ONLY if stats collection is enabled\n             Class<?> cls = sm.getMetaData().getDescribedType();\n             ((CacheStatisticsSPI)stats).newGet(cls, false);\n@@ -322,14 +322,13 @@ public boolean isCached(List<Object> oids, BitSet edata) {\n     public boolean syncVersion(OpenJPAStateManager sm, Object edata) {\n         DataCache cache = _mgr.selectCache(sm);\n         FetchConfiguration fc = sm.getContext().getFetchConfiguration();\n-        CacheStatistics stats = cache.getStatistics();\n+        CacheStatistics stats = (cache == null) ? null : cache.getStatistics();\n         if (cache == null || sm.isEmbedded() || fc.getCacheRetrieveMode() == DataCacheRetrieveMode.BYPASS) {\n-            if(stats.isEnabled()){\n-                ((CacheStatisticsSPI)stats).newGet(sm.getMetaData().getDescribedType(), false);\n+            if (stats != null && stats.isEnabled()) {\n+                ((CacheStatisticsSPI) stats).newGet(sm.getMetaData().getDescribedType(), false);\n             }\n             return super.syncVersion(sm, edata);\n         }\n-        \n         DataCachePCData data;\n         Object version = null;\n         data = cache.get(sm.getObjectId());\n@@ -338,7 +337,7 @@ public boolean syncVersion(OpenJPAStateManager sm, Object edata) {\n \n         // if we have a cached version update from there\n         if (version != null) {\n-            if(stats.isEnabled()){\n+            if (stats != null && stats.isEnabled()) {\n                 ((CacheStatisticsSPI)stats).newGet(data.getType(), true);\n             }\n             if (!version.equals(sm.getVersion())) {"},{"sha":"e84cf8c91811000650b021406db7414b1ac5f4d6","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheStoreManager.java","status":"added","additions":82,"deletions":0,"changes":82,"blob_url":"https://github.com/apache/openjpa/blob/c960f725cb6d6ad6211ceec654ea657ccbebface/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheStoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/c960f725cb6d6ad6211ceec654ea657ccbebface/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheStoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheStoreManager.java?ref=c960f725cb6d6ad6211ceec654ea657ccbebface","patch":"@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.datacache;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.datacache.DataCacheManager;\n+import org.apache.openjpa.datacache.DataCacheStoreManager;\n+import org.apache.openjpa.enhance.PersistenceCapable;\n+import org.apache.openjpa.kernel.DelegatingStoreManager;\n+import org.apache.openjpa.kernel.OpenJPAStateManager;\n+import org.apache.openjpa.persistence.EntityManagerImpl;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+/**\n+ * \n+ * This test was added for OPENJPA-1882.\n+ * <p>\n+ * When caching is enabled and a given type isn't being cached, make sure calling exists/syncVersion with that type\n+ * doesn't result in a NPE.\n+ * \n+ */\n+public class TestDataCacheStoreManager extends SingleEMFTestCase {\n+    Object[] p =\n+        new Object[] { CLEAR_TABLES, CachedEntityStatistics.class, \"openjpa.DataCache\", \"true(EnableStatistics=true)\",\n+            \"openjpa.QueryCache\", \"true\", };\n+\n+    private EntityManager em;\n+    private DataCacheStoreManager dsm;\n+    private DataCacheManager dcm;\n+    private OpenJPAStateManager sm;\n+\n+    public void setUp() {\n+        super.setUp(p);\n+\n+        em = emf.createEntityManager();\n+        dcm = emf.getConfiguration().getDataCacheManagerInstance();\n+        dsm =\n+            (DataCacheStoreManager) ((DelegatingStoreManager) ((EntityManagerImpl) em).getBroker().getStoreManager())\n+                .getDelegate();\n+\n+        em.getTransaction().begin();\n+        CachedEntityStatistics p = new CachedEntityStatistics();\n+        em.persist(p);\n+        em.getTransaction().commit();\n+\n+        dcm.stopCaching(CachedEntityStatistics.class.getName());\n+\n+        sm = (OpenJPAStateManager) ((PersistenceCapable) p).pcGetStateManager();\n+    }\n+\n+    public void tearDown() throws Exception {\n+        dcm.startCaching(CachedEntityStatistics.class.getName());\n+        em.close();\n+\n+        super.tearDown();\n+    }\n+\n+    public void testExists() {\n+        dsm.exists(sm, null);\n+    }\n+\n+    public void testsyncVersion() {\n+        dsm.syncVersion(sm, null);\n+    }\n+}"}]}

