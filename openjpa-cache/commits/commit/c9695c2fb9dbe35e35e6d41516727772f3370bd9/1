{"sha":"c9695c2fb9dbe35e35e6d41516727772f3370bd9","node_id":"MDY6Q29tbWl0MjA2MzY0OmM5Njk1YzJmYjlkYmUzNWUzNWU2ZDQxNTE2NzI3NzcyZjMzNzBiZDk=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2009-08-13T21:47:39Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2009-08-13T21:47:39Z"},"message":"OPENJPA-1885 Subquery restructure code\nadd more test string in TestSubquery\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@804037 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d4281d74c50322fe653392f77aee99ac05c127a4","url":"https://api.github.com/repos/apache/openjpa/git/trees/d4281d74c50322fe653392f77aee99ac05c127a4"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/c9695c2fb9dbe35e35e6d41516727772f3370bd9","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/c9695c2fb9dbe35e35e6d41516727772f3370bd9","html_url":"https://github.com/apache/openjpa/commit/c9695c2fb9dbe35e35e6d41516727772f3370bd9","comments_url":"https://api.github.com/repos/apache/openjpa/commits/c9695c2fb9dbe35e35e6d41516727772f3370bd9/comments","author":null,"committer":null,"parents":[{"sha":"06bd0d64e7538fd2d682cc0eadb4767dac8f449b","url":"https://api.github.com/repos/apache/openjpa/commits/06bd0d64e7538fd2d682cc0eadb4767dac8f449b","html_url":"https://github.com/apache/openjpa/commit/06bd0d64e7538fd2d682cc0eadb4767dac8f449b"}],"stats":{"total":177,"additions":169,"deletions":8},"files":[{"sha":"c2c75e88ebe84c18146497ca1bc51644c0aaf794","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Account.java","status":"added","additions":81,"deletions":0,"changes":81,"blob_url":"https://github.com/apache/openjpa/blob/c9695c2fb9dbe35e35e6d41516727772f3370bd9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Account.java","raw_url":"https://github.com/apache/openjpa/raw/c9695c2fb9dbe35e35e6d41516727772f3370bd9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Account.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Account.java?ref=c9695c2fb9dbe35e35e6d41516727772f3370bd9","patch":"@@ -0,0 +1,81 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.query;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.ManyToOne;\r\n+import javax.persistence.OneToOne;\r\n+import javax.persistence.Table;\r\n+\r\n+/**\r\n+ * Persistent class used in testing subquery.\r\n+ */\r\n+@Entity\r\n+@Table(name=\"ACCT\")\r\n+public class Account {\r\n+    @Id\r\n+    @GeneratedValue\r\n+    private long aid;\r\n+\r\n+    private int balance;\r\n+    private Integer loan;\r\n+\r\n+    @ManyToOne\r\n+    private Customer cust;\r\n+    \r\n+    private String name;\r\n+\r\n+    public long getId() {\r\n+        return aid;\r\n+    }\r\n+\r\n+    public String getName() {\r\n+        return name;\r\n+    }\r\n+\r\n+    public void setName(String name) {\r\n+        this.name = name;\r\n+    }\r\n+\r\n+    public int getBalance() {\r\n+        return balance;\r\n+    }\r\n+\r\n+    public void setBalance(int balance) {\r\n+        this.balance = balance;\r\n+    }\r\n+\r\n+    public Integer getLoan() {\r\n+        return loan;\r\n+    }\r\n+\r\n+    public void setLoan(Integer loan) {\r\n+        this.loan = loan;\r\n+    }\r\n+    \r\n+    public Customer getCustomer() {\r\n+        return cust;\r\n+    }\r\n+    \r\n+    public void setCustomer(Customer customer) {\r\n+        this.cust = customer;\r\n+    }\r\n+}\r"},{"sha":"ca8725329cb98816025ccbfd515086273a666e0a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Customer.java","status":"modified","additions":19,"deletions":7,"changes":26,"blob_url":"https://github.com/apache/openjpa/blob/c9695c2fb9dbe35e35e6d41516727772f3370bd9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Customer.java","raw_url":"https://github.com/apache/openjpa/raw/c9695c2fb9dbe35e35e6d41516727772f3370bd9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Customer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Customer.java?ref=c9695c2fb9dbe35e35e6d41516727772f3370bd9","patch":"@@ -23,39 +23,40 @@\n import java.io.Serializable;\n import java.util.Collection;\n import java.util.ArrayList;\n+import java.util.List;\n \n @Entity\n-@Table(name=\"TCTMR\")\n+@Table(name=\"TCUS\")\n public class Customer {\n \n     @Embeddable\n \tpublic static class CustomerKey implements Serializable {\n-\t\tpublic String countryCode;\n+\t\tpublic String cyCode;\n \t\tpublic int id;\n \t\t\n \t\tpublic CustomerKey(){}\n \t\t\n \t\tpublic  CustomerKey(String cc, int id){\n-\t\t\tcountryCode=cc;\n+\t\t\tcyCode=cc;\n \t\t\tthis.id=id;\n \t\t}\n \t\t\n \t\tpublic String toString() {\n-\t\t\treturn countryCode+\"/\"+id;\n+\t\t\treturn cyCode+\"/\"+id;\n \t\t}\n \t\t@Override\n \t\tpublic boolean equals(Object obj){\n \t\t\tif (obj==this) return true;\n \t\t\tif ( ! (obj instanceof CustomerKey) ) return false;\n \t\t\tCustomerKey key = (CustomerKey)obj;\n-\t\t\tif (key.countryCode.equals(this.countryCode) && \n+\t\t\tif (key.cyCode.equals(this.cyCode) && \n \t\t\t\t\tkey.id==this.id) return true;\n \t\t\treturn false;\n \t\t}\n \t\t\n \t\t@Override\n \t\tpublic int hashCode() {\n-\t\t\treturn this.countryCode.hashCode()\n+\t\t\treturn this.cyCode.hashCode()\n \t\t\t\t^ this.id;\n \t\t}\n \t}\n@@ -75,7 +76,10 @@ public int hashCode() {\n \t\n     @OneToMany(fetch=FetchType.EAGER, mappedBy=\"customer\")\n     private Collection<Order> orders = new ArrayList<Order>();\n-\t\n+\n+    @OneToMany(mappedBy=\"cust\")\n+    private List<Account> accounts = new ArrayList<Account>();\n+\n \tpublic Customer() {}\n \t\n \tpublic Customer(CustomerKey cid, String name, CreditRating rating){\n@@ -104,6 +108,14 @@ public void setRating(CreditRating rating) {\n \tpublic void setOrders(Collection<Order> orders) {\n \t\tthis.orders = orders;\n \t}\n+    \n+    public List<Account> getAccounts() {\n+        return accounts;\n+    }\n+    \n+    public void setAccounts(List<Account> accounts) {\n+        this.accounts = accounts;\n+    }\n \t\n \tpublic String toString() {\n \t\treturn \"Customer:\"+cid+\" name:\"+name; "},{"sha":"28169317984ff655ee2b0ab0f83c98fbb1a4a7af","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestSubquery.java","status":"modified","additions":69,"deletions":1,"changes":70,"blob_url":"https://github.com/apache/openjpa/blob/c9695c2fb9dbe35e35e6d41516727772f3370bd9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestSubquery.java","raw_url":"https://github.com/apache/openjpa/raw/c9695c2fb9dbe35e35e6d41516727772f3370bd9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestSubquery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestSubquery.java?ref=c9695c2fb9dbe35e35e6d41516727772f3370bd9","patch":"@@ -36,7 +36,7 @@\n     public void setUp() {\n         setUp(Customer.class, Customer.CustomerKey.class, Order.class,\n             OrderItem.class, Magazine.class, Publisher.class, Employee.class,\n-            Dependent.class, DependentId.class, DROP_TABLES);\n+            Dependent.class, DependentId.class, Account.class, DROP_TABLES);\n     }\n \n     static String[]  querys = new String[] {\n@@ -160,6 +160,74 @@ public void setUp() {\n             \" where o.customer.cid.id = o2.customer.cid.id)\",  \n     };\n \n+    static String[]  querys2 = new String[] {\n+            // 0\n+        \"select o1.oid, c.name from Order o1, Customer c\" +\n+            \" where o1.customer.name = \" + \n+            \" any(select o2.customer.name from in(c.orders) o2)\",\n+            // 1\n+        \"select o1.oid, c.name from Order o1, Customer c\" +\n+            \" where o1.amount = \" +\n+            \" any(select o2.amount from in(c.orders) o2)\",\n+            // 2\n+        \"select DISTINCT c.name FROM Customer c JOIN c.orders o \" +\n+            \"WHERE EXISTS (SELECT o FROM o.lineitems l where l.quantity > 2 ) \",\n+            // 3\n+        \"select DISTINCT c.name FROM Customer c, IN(c.orders) co \" +\n+            \"WHERE co.amount > ALL \" +\n+            \"(Select o.amount FROM Order o, in(o.lineitems) l WHERE l.quantity > 2)\", \n+            // 4\n+        \"select distinct c.name FROM Customer C, IN(C.orders) co \" +\n+            \"WHERE co.amount < ALL \" +\n+            \"(Select o.amount FROM Order o, IN(o.lineitems) l WHERE l.quantity > 2)\", \n+            //5\n+        \"select c.name FROM Customer c, IN(c.orders) co \" +\n+            \"WHERE co.amount <= ALL \" +\n+            \"(Select o.amount FROM Order o, IN(o.lineitems) l WHERE l.quantity > 2)\",\n+            // 6\n+        \"select DISTINCT c.name FROM Customer c, IN(c.orders) co \" +\n+            \"WHERE co.amount > ANY \" +\n+            \"(Select o.amount FROM Order o, IN(o.lineitems) l WHERE l.quantity = 2)\",\n+            // 7\n+        \"select DISTINCT c.name FROM Customer c \" +\n+            \"WHERE EXISTS (SELECT o FROM c.orders o where o.amount \" +\n+            \"BETWEEN 1000 AND 1200)\",\n+            // 8\n+        \"select DISTINCT c.name FROM Customer c \" +\n+            \"WHERE EXISTS (SELECT o FROM c.orders o where o.amount > 1000 )\",\n+            // 9\n+        \"SELECT o.oid from Order o WHERE \" +\n+            \"EXISTS (SELECT c.name From o.customer c WHERE c.name LIKE '%los') \",\n+            // 10\n+        \"select Distinct c.name FROM Customer c, IN(c.orders) co \" +\n+            \"WHERE co.amount >= SOME\" +\n+            \"(Select o.amount FROM Order o, IN(o.lineitems) l WHERE l.quantity = 2)\",\n+            // 11\n+        \"select c FROM Customer c WHERE EXISTS\" +\n+            \" (SELECT o FROM c.orders o where o.amount > 1000)\",\n+            // 12\n+        \"select c FROM Customer c WHERE EXISTS\" +\n+            \" (SELECT o FROM c.orders o)\",\n+            // 13\n+        \"SELECT c FROM Customer c WHERE \"\n+            + \"(SELECT COUNT(o) FROM c.orders o) > 10\",\n+            // 14\n+        \"SELECT o FROM Order o JOIN o.customer c WHERE c.name = \"\n+            + \"SOME (SELECT a.name FROM c.accounts a)\",\n+\n+        };\n+\n+    public void testSubquery2() {\n+        EntityManager em = emf.createEntityManager();\n+        for (int i = 0; i < querys2.length; i++) {\n+            String q = querys2[i];\n+            System.err.println(\">>> JPQL JPA2 :[ \" + i + \"]\" +q);\n+            List rs = em.createQuery(q).getResultList();\n+            assertEquals(0, rs.size());\n+        }\n+        em.close();\n+    }\n+\n \n     public void testSubquery() {\n         EntityManager em = emf.createEntityManager();"}]}

