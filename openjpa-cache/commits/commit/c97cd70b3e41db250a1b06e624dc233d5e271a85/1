{"sha":"c97cd70b3e41db250a1b06e624dc233d5e271a85","node_id":"MDY6Q29tbWl0MjA2MzY0OmM5N2NkNzBiM2U0MWRiMjUwYTFiMDZlNjI0ZGMyMzNkNWUyNzFhODU=","commit":{"author":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-11-29T01:17:47Z"},"committer":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-11-29T01:17:47Z"},"message":"Added nested stack trace to the MissingResourceException as an additional diagnostic for issues around ProductDerivations.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@599239 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f3bd24cbe36a0c556a8396895477abbbed4abb63","url":"https://api.github.com/repos/apache/openjpa/git/trees/f3bd24cbe36a0c556a8396895477abbbed4abb63"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/c97cd70b3e41db250a1b06e624dc233d5e271a85","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/c97cd70b3e41db250a1b06e624dc233d5e271a85","html_url":"https://github.com/apache/openjpa/commit/c97cd70b3e41db250a1b06e624dc233d5e271a85","comments_url":"https://api.github.com/repos/apache/openjpa/commits/c97cd70b3e41db250a1b06e624dc233d5e271a85/comments","author":null,"committer":null,"parents":[{"sha":"1928eeb61111b92c0b594ce8286be973671d47e7","url":"https://api.github.com/repos/apache/openjpa/commits/1928eeb61111b92c0b594ce8286be973671d47e7","html_url":"https://github.com/apache/openjpa/commit/1928eeb61111b92c0b594ce8286be973671d47e7"}],"stats":{"total":35,"additions":24,"deletions":11},"files":[{"sha":"c50a3832ee61eb7cac175752ad402187e966f418","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ProductDerivations.java","status":"modified","additions":24,"deletions":11,"changes":35,"blob_url":"https://github.com/apache/openjpa/blob/c97cd70b3e41db250a1b06e624dc233d5e271a85/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ProductDerivations.java","raw_url":"https://github.com/apache/openjpa/raw/c97cd70b3e41db250a1b06e624dc233d5e271a85/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ProductDerivations.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ProductDerivations.java?ref=c97cd70b3e41db250a1b06e624dc233d5e271a85","patch":"@@ -32,6 +32,7 @@\n \n import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.lib.util.J2DoPrivHelper;\n+import org.apache.openjpa.lib.util.JavaVersions;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.lib.util.Services;\n \n@@ -254,19 +255,22 @@ public static ConfigurationProvider load(String resource, String anchor,\n         ConfigurationProvider provider = null;\n         StringBuffer errs = null;\n         // most specific to least\n+        Throwable err = null;\n         for (int i = _derivations.length - 1; i >= 0; i--) {\n             try {\n                 provider = _derivations[i].load(resource, anchor, loader);\n                 if (provider != null)\n                     return provider;\n             } catch (Throwable t) {\n+                err = t;\n                 errs = (errs == null) ? new StringBuffer() : errs.append(\"\\n\");\n                 errs.append(_derivations[i].getClass().getName() + \":\" + t);\n             }\n         }\n-        reportErrors(errs, resource);\n-        throw new MissingResourceException(resource, \n-            ProductDerivations.class.getName(), resource);\n+        reportErrors(errs, resource, err);\n+        throw (MissingResourceException) JavaVersions.initCause\n+            (new MissingResourceException(resource,\n+                ProductDerivations.class.getName(), resource), err);\n     }\n \n     /**\n@@ -284,22 +288,25 @@ public static ConfigurationProvider load(File file, String anchor,\n                 J2DoPrivHelper.getContextClassLoaderAction());\n         ConfigurationProvider provider = null;\n         StringBuffer errs = null;\n+        Throwable err = null;\n         // most specific to least\n         for (int i = _derivations.length - 1; i >= 0; i--) {\n             try {\n                 provider = _derivations[i].load(file, anchor);\n                 if (provider != null)\n                     return provider;\n             } catch (Throwable t) {\n+                err = t;\n                 errs = (errs == null) ? new StringBuffer() : errs.append(\"\\n\");\n                 errs.append(_derivations[i].getClass().getName() + \":\" + t);\n             }\n         }\n         String aPath = (String) AccessController.doPrivileged(\n             J2DoPrivHelper.getAbsolutePathAction(file));\n-        reportErrors(errs, aPath);\n-        throw new MissingResourceException(aPath, \n-            ProductDerivations.class.getName(), aPath);\n+        reportErrors(errs, aPath, err);\n+        throw (MissingResourceException) JavaVersions.initCause\n+            (new MissingResourceException(aPath,\n+                ProductDerivations.class.getName(), aPath), err);\n     }\n    \n     /**\n@@ -328,6 +335,7 @@ private static ConfigurationProvider load(ClassLoader loader,\n         ConfigurationProvider provider = null;\n         StringBuffer errs = null;\n         String type = (globals) ? \"globals\" : \"defaults\";\n+        Throwable err = null;\n         // most specific to least\n         for (int i = _derivations.length - 1; i >= 0; i--) {\n             try {\n@@ -336,22 +344,25 @@ private static ConfigurationProvider load(ClassLoader loader,\n                 if (provider != null)\n                    return provider;\n             } catch (Throwable t) {\n+                err = t;\n                 errs = (errs == null) ? new StringBuffer() : errs.append(\"\\n\");\n                 errs.append(_derivations[i].getClass().getName() + \":\" + t);\n             }\n         }\n-        reportErrors(errs, type);\n+        reportErrors(errs, type, err);\n         return null;\n     }\n  \n     /**\n      * Thrown proper exception for given errors.\n      */\n-    private static void reportErrors(StringBuffer errs, String resource) {\n+    private static void reportErrors(StringBuffer errs, String resource,\n+        Throwable nested) {\n         if (errs == null)\n             return;\n-        throw new MissingResourceException(errs.toString(), \n-            ProductDerivations.class.getName(), resource);\n+        throw (MissingResourceException) JavaVersions.initCause\n+            (new MissingResourceException(errs.toString(),\n+                ProductDerivations.class.getName(), resource), nested);\n     }\n \n     /**\n@@ -367,6 +378,7 @@ public static List getFullyQualifiedAnchorsInPropertiesLocation(\n         final String propertiesLocation) {\n         List fqAnchors = new ArrayList();\n         StringBuffer errs = null;\n+        Throwable err = null;\n         for (int i = _derivations.length - 1; i >= 0; i--) {\n             try {\n                 if (propertiesLocation == null) {\n@@ -395,11 +407,12 @@ public static List getFullyQualifiedAnchorsInPropertiesLocation(\n                     }\n                 }\n             } catch (Throwable t) {\n+                err = t;\n                 errs = (errs == null) ? new StringBuffer() : errs.append(\"\\n\");\n                 errs.append(_derivations[i].getClass().getName() + \":\" + t);\n             }\n         }\n-        reportErrors(errs, propertiesLocation);\n+        reportErrors(errs, propertiesLocation, err);\n         return fqAnchors;\n     }\n "}]}

