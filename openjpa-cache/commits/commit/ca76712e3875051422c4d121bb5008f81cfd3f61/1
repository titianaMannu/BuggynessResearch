{"sha":"ca76712e3875051422c4d121bb5008f81cfd3f61","node_id":"MDY6Q29tbWl0MjA2MzY0OmNhNzY3MTJlMzg3NTA1MTQyMmM0ZDEyMWJiNTAwOGY4MWNmZDNmNjE=","commit":{"author":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2013-07-23T18:26:42Z"},"committer":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2013-07-23T18:26:42Z"},"message":"OPENJPA-1794 aggregate function with no result set must return null\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1506198 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"386939f084e87fb345ee5511b5e192a21d0794e7","url":"https://api.github.com/repos/apache/openjpa/git/trees/386939f084e87fb345ee5511b5e192a21d0794e7"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ca76712e3875051422c4d121bb5008f81cfd3f61","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ca76712e3875051422c4d121bb5008f81cfd3f61","html_url":"https://github.com/apache/openjpa/commit/ca76712e3875051422c4d121bb5008f81cfd3f61","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ca76712e3875051422c4d121bb5008f81cfd3f61/comments","author":null,"committer":null,"parents":[{"sha":"5b3fea7cd446622d8479ca13e09b225161910bea","url":"https://api.github.com/repos/apache/openjpa/commits/5b3fea7cd446622d8479ca13e09b225161910bea","html_url":"https://github.com/apache/openjpa/commit/5b3fea7cd446622d8479ca13e09b225161910bea"}],"stats":{"total":612,"additions":602,"deletions":10},"files":[{"sha":"841e7785c849a3412cd674cf051288c948e43661","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Avg.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/ca76712e3875051422c4d121bb5008f81cfd3f61/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Avg.java","raw_url":"https://github.com/apache/openjpa/raw/ca76712e3875051422c4d121bb5008f81cfd3f61/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Avg.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Avg.java?ref=ca76712e3875051422c4d121bb5008f81cfd3f61","patch":"@@ -23,8 +23,9 @@\n  *\n  * @author Abe White\n  */\n+@SuppressWarnings(\"serial\")\n class Avg\n-    extends UnaryOp {\n+    extends NullableAggregateUnaryOp { // OPENJPA-1794\n \n     /**\n      * Constructor. Provide the value to operate on.\n@@ -41,4 +42,3 @@ public boolean isAggregate() {\n         return true;\n     }\n }\n-"},{"sha":"0cccfab90230795a70015dbc196dd788a2ea88e2","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Max.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/ca76712e3875051422c4d121bb5008f81cfd3f61/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Max.java","raw_url":"https://github.com/apache/openjpa/raw/ca76712e3875051422c4d121bb5008f81cfd3f61/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Max.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Max.java?ref=ca76712e3875051422c4d121bb5008f81cfd3f61","patch":"@@ -23,8 +23,9 @@\n  *\n  * @author Abe White\n  */\n+@SuppressWarnings(\"serial\")\n class Max\n-    extends UnaryOp {\n+    extends NullableAggregateUnaryOp { // OPENJPA-1794\n \n     /**\n      * Constructor. Provide the value to operate on."},{"sha":"97c7de0ae3b93cd57013bb60680b1cfd26073e43","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Min.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/ca76712e3875051422c4d121bb5008f81cfd3f61/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Min.java","raw_url":"https://github.com/apache/openjpa/raw/ca76712e3875051422c4d121bb5008f81cfd3f61/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Min.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Min.java?ref=ca76712e3875051422c4d121bb5008f81cfd3f61","patch":"@@ -23,8 +23,9 @@\n  *\n  * @author Abe White\n  */\n+@SuppressWarnings(\"serial\")\n class Min\n-    extends UnaryOp {\n+    extends NullableAggregateUnaryOp { // OPENJPA-1794\n \n     /**\n      * Constructor. Provide the value to operate on."},{"sha":"b69c0187f52ca5fdcdf8e890f1ebaefc9ac122d2","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/NullableAggregateUnaryOp.java","status":"added","additions":46,"deletions":0,"changes":46,"blob_url":"https://github.com/apache/openjpa/blob/ca76712e3875051422c4d121bb5008f81cfd3f61/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/NullableAggregateUnaryOp.java","raw_url":"https://github.com/apache/openjpa/raw/ca76712e3875051422c4d121bb5008f81cfd3f61/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/NullableAggregateUnaryOp.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/NullableAggregateUnaryOp.java?ref=ca76712e3875051422c4d121bb5008f81cfd3f61","patch":"@@ -0,0 +1,46 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.jdbc.kernel.exps;\r\n+\r\n+/**\r\n+ * OPENJPA-1794\r\n+ * An aggregate unary operation that can indicate whether a null value from the data store\r\n+ * should be returned as null.\r\n+ */\r\n+@SuppressWarnings(\"serial\")\r\n+public abstract class NullableAggregateUnaryOp extends UnaryOp {\r\n+\r\n+    public NullableAggregateUnaryOp(Val val) {\r\n+        super(val);\r\n+    }\r\n+\r\n+    public NullableAggregateUnaryOp(Val val, boolean noParen) {\r\n+        super(val, noParen);\r\n+    }\r\n+\r\n+    @Override\r\n+    protected boolean nullableValue(ExpContext ctx, ExpState state) {\r\n+        // If this is a simple operator (no joins involved), check compatibility to determine\r\n+        // whether 'null' should be returned for the aggregate operation\r\n+        if (ctx != null && ctx.store != null && (state.joins == null || state.joins.isEmpty())) {\r\n+            return ctx.store.getConfiguration().getCompatibilityInstance().getReturnNullOnEmptyAggregateResult();\r\n+        }\r\n+        return false;\r\n+    }\r\n+}\r"},{"sha":"292547efa6d1b9e5af0e60642db35056820a4df9","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Sum.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/ca76712e3875051422c4d121bb5008f81cfd3f61/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Sum.java","raw_url":"https://github.com/apache/openjpa/raw/ca76712e3875051422c4d121bb5008f81cfd3f61/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Sum.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Sum.java?ref=ca76712e3875051422c4d121bb5008f81cfd3f61","patch":"@@ -25,8 +25,9 @@\n  *\n  * @author Abe White\n  */\n+@SuppressWarnings(\"serial\")\n class Sum\n-    extends UnaryOp {\n+    extends NullableAggregateUnaryOp { // OPENJPA-1794\n \n     /**\n      * Constructor. Provide the value to operate on."},{"sha":"46a01e94206af7c17fa2d85b3ef998fb26136be5","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/UnaryOp.java","status":"modified","additions":13,"deletions":3,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/ca76712e3875051422c4d121bb5008f81cfd3f61/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/UnaryOp.java","raw_url":"https://github.com/apache/openjpa/raw/ca76712e3875051422c4d121bb5008f81cfd3f61/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/UnaryOp.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/UnaryOp.java?ref=ca76712e3875051422c4d121bb5008f81cfd3f61","patch":"@@ -119,8 +119,13 @@ public Object load(ExpContext ctx, ExpState state, Result res)\n         throws SQLException {\n         Object value = res.getObject(this, JavaSQLTypes.JDBC_DEFAULT, null);\n         Class<?> type = getType();\n-        if (value == null && (type.isPrimitive() || Number.class.isAssignableFrom(type))) {\n-            value = Filters.getDefaultForNull(Filters.wrap(type));\n+        if (value == null) {\n+            if (nullableValue(ctx, state)) {  // OPENJPA-1794\n+                return null;\n+            }\n+            else if (type.isPrimitive() || Number.class.isAssignableFrom(type)) {\n+                value = Filters.getDefaultForNull(Filters.wrap(type));\n+            }\n         }\n         return Filters.convert(value, type);\n     }\n@@ -171,5 +176,10 @@ public void acceptVisit(ExpressionVisitor visitor) {\n         _val.acceptVisit(visitor);\n         visitor.exit(this);\n     }\n-}\n+    \n+    // OPENJPA-1794\n+    protected boolean nullableValue(ExpContext ctx, ExpState state) {\n+        return false;\n+    }\n \n+}"},{"sha":"a422597a74f9082953fecddfa6216cbc1e8424f9","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java","status":"modified","additions":36,"deletions":1,"changes":37,"blob_url":"https://github.com/apache/openjpa/blob/ca76712e3875051422c4d121bb5008f81cfd3f61/openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java","raw_url":"https://github.com/apache/openjpa/raw/ca76712e3875051422c4d121bb5008f81cfd3f61/openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java?ref=ca76712e3875051422c4d121bb5008f81cfd3f61","patch":"@@ -76,7 +76,8 @@\n     private boolean _resetFlushFlagForCascadePersist = true;//OPENJPA-2051\n     private boolean _singletonLifecycleEventManager = false;\n     private boolean _filterPCRegistryClasses = false; // OPENJPA-2288\n-    \n+    private boolean _returnNullOnEmptyAggregateResult = true;   // OPENJPA-1794\n+\n     /**\n      * Whether to require exact identity value types when creating object\n      * ids from a class and value. Defaults to false.\n@@ -728,4 +729,38 @@ public boolean  getFilterPCRegistryClasses() {\n     public void setFilterPCRegistryClasses(boolean bool) {\n         _filterPCRegistryClasses = bool;\n     }\n+    \n+    /**\n+     * This property is used to specify whether the aggregate query functions \n+     * SUM, AVG, MAX, and MIN return null if there is no query result.  This will occur\n+     * if no rows are returned for the specified query predicate. The default is \n+     * false, meaning that 0 will be returned for functions operating on numeric\n+     * data.\n+     * \n+     * In compliance with the JPA specification, the default value is true.\n+     * \n+     * @return true if the result of an aggregate with an empty query result returns null.\n+     * @since \n+     * \n+     */\n+    public boolean getReturnNullOnEmptyAggregateResult() {\n+        return _returnNullOnEmptyAggregateResult;\n+    }\n+\n+    /**\n+     * This property is used to specify whether the aggregate query functions \n+     * SUM, AVG, MAX, and MIN return null if there is no query result.  This will occur\n+     * if no rows are returned for the specified query predicate. The default is \n+     * false, meaning that 0 will be returned for functions operating on numeric\n+     * data.\n+     * \n+     * In compliance with the JPA specification, the default value is true.\n+     * \n+     * @since \n+     * @param returnNullOnAggregate whether OpenJPA will return null for aggregate\n+     * expressions when the query result is empty.\n+     */\n+    public void setReturnNullOnAggregateResult(boolean returnNullOnEmptyAggregateResult) {\n+        _returnNullOnEmptyAggregateResult = returnNullOnEmptyAggregateResult;\n+    }\n }"},{"sha":"8478e3c6a47543fe0b09853be45470eabe446b61","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jira1794/AggEntity.java","status":"added","additions":160,"deletions":0,"changes":160,"blob_url":"https://github.com/apache/openjpa/blob/ca76712e3875051422c4d121bb5008f81cfd3f61/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jira1794/AggEntity.java","raw_url":"https://github.com/apache/openjpa/raw/ca76712e3875051422c4d121bb5008f81cfd3f61/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jira1794/AggEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jira1794/AggEntity.java?ref=ca76712e3875051422c4d121bb5008f81cfd3f61","patch":"@@ -0,0 +1,160 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.jira1794;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.Table;\r\n+\r\n+@Entity\r\n+@Table(name = \"j1794_ae\")\r\n+public class AggEntity {\r\n+\r\n+    @Id\r\n+    @GeneratedValue\r\n+    private int id;\r\n+\r\n+    private short pshortVal;\r\n+    private Short shortVal;\r\n+\r\n+    private int pintVal;\r\n+    private Integer intVal;\r\n+\r\n+    private long plongVal;\r\n+    private Long longVal;\r\n+\r\n+    private float pfloatVal;\r\n+    private Float floatVal;\r\n+\r\n+    private double pdblVal;\r\n+    private Double dblVal;\r\n+\r\n+    private String stringVal;\r\n+\r\n+    public void setId(int id) {\r\n+        this.id = id;\r\n+    }\r\n+\r\n+    public int getId() {\r\n+        return id;\r\n+    }\r\n+\r\n+    public void setPshortVal(short pshortVal) {\r\n+        this.pshortVal = pshortVal;\r\n+    }\r\n+\r\n+    public short getPshortVal() {\r\n+        return pshortVal;\r\n+    }\r\n+\r\n+    public void setShortVal(Short pShortVal) {\r\n+        this.shortVal = pShortVal;\r\n+    }\r\n+\r\n+    public Short getShortVal() {\r\n+        return shortVal;\r\n+    }\r\n+\r\n+    public void setPintVal(int pintVal) {\r\n+        this.pintVal = pintVal;\r\n+    }\r\n+\r\n+    public int getPintVal() {\r\n+        return pintVal;\r\n+    }\r\n+\r\n+    public void setIntVal(Integer intVal) {\r\n+        this.intVal = intVal;\r\n+    }\r\n+\r\n+    public Integer getIntVal() {\r\n+        return intVal;\r\n+    }\r\n+\r\n+    public void setPlongVal(long plongVal) {\r\n+        this.plongVal = plongVal;\r\n+    }\r\n+\r\n+    public long getPlongVal() {\r\n+        return plongVal;\r\n+    }\r\n+\r\n+    public void setLongVal(Long longVal) {\r\n+        this.longVal = longVal;\r\n+    }\r\n+\r\n+    public Long getLongVal() {\r\n+        return longVal;\r\n+    }\r\n+\r\n+    public void setPfloatVal(float pfloatVal) {\r\n+        this.pfloatVal = pfloatVal;\r\n+    }\r\n+\r\n+    public float getPfloatVal() {\r\n+        return pfloatVal;\r\n+    }\r\n+\r\n+    public void setFloatVal(Float floatVal) {\r\n+        this.floatVal = floatVal;\r\n+    }\r\n+\r\n+    public Float getFloatVal() {\r\n+        return floatVal;\r\n+    }\r\n+\r\n+    public void setPdblVal(double pdblVal) {\r\n+        this.pdblVal = pdblVal;\r\n+    }\r\n+\r\n+    public double getPdblVal() {\r\n+        return pdblVal;\r\n+    }\r\n+\r\n+    public void setDblVal(Double dblVal) {\r\n+        this.dblVal = dblVal;\r\n+    }\r\n+\r\n+    public Double getDblVal() {\r\n+        return dblVal;\r\n+    }\r\n+\r\n+    public void setStringVal(String stringVal) {\r\n+        this.stringVal = stringVal;\r\n+    }\r\n+\r\n+    public String getStringVal() {\r\n+        return stringVal;\r\n+    }\r\n+\r\n+    public void init() {\r\n+        setPshortVal((short) 1);\r\n+        setShortVal(Short.valueOf((short) 1));\r\n+        setIntVal(1);\r\n+        setPintVal(1);\r\n+        setLongVal(1L);\r\n+        setPlongVal(1L);\r\n+        setDblVal(1d);\r\n+        setPdblVal(1d);\r\n+        setFloatVal(1f);\r\n+        setPfloatVal(1f);\r\n+        setStringVal(\"1\");\r\n+    }\r\n+}\r"},{"sha":"18a5cbf953fb6a1c15eaaffd4abd6b03454cfb07","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jira1794/AggEntity_.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/apache/openjpa/blob/ca76712e3875051422c4d121bb5008f81cfd3f61/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jira1794/AggEntity_.java","raw_url":"https://github.com/apache/openjpa/raw/ca76712e3875051422c4d121bb5008f81cfd3f61/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jira1794/AggEntity_.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jira1794/AggEntity_.java?ref=ca76712e3875051422c4d121bb5008f81cfd3f61","patch":"@@ -0,0 +1,41 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+\r\n+/** \r\n+ *  Generated by OpenJPA MetaModel Generator Tool.\r\n+**/\r\n+package org.apache.openjpa.jira1794;\r\n+\r\n+import javax.persistence.metamodel.SingularAttribute;\r\n+\r\n+@javax.persistence.metamodel.StaticMetamodel\r\n+(value=org.apache.openjpa.jira1794.AggEntity.class)\r\n+public class AggEntity_ {\r\n+    public static volatile SingularAttribute<AggEntity,Short> pshortVal;\r\n+    public static volatile SingularAttribute<AggEntity,Short> shortVal;    \r\n+    public static volatile SingularAttribute<AggEntity,Integer> pintVal;\r\n+    public static volatile SingularAttribute<AggEntity,Integer> intVal;\r\n+    public static volatile SingularAttribute<AggEntity,Long> plongVal;\r\n+    public static volatile SingularAttribute<AggEntity,Long> longVal;\r\n+    public static volatile SingularAttribute<AggEntity,Float> pfloatVal;\r\n+    public static volatile SingularAttribute<AggEntity,Float> floatVal;\r\n+    public static volatile SingularAttribute<AggEntity,Double> pdblVal;\r\n+    public static volatile SingularAttribute<AggEntity,Double> dblVal;\r\n+    public static volatile SingularAttribute<AggEntity,String> stringVal;\r\n+}\r"},{"sha":"aa7cc4e371d0411462e14d9505bbbb72fc10383b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jira1794/TestAggregateFunctions.java","status":"added","additions":235,"deletions":0,"changes":235,"blob_url":"https://github.com/apache/openjpa/blob/ca76712e3875051422c4d121bb5008f81cfd3f61/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jira1794/TestAggregateFunctions.java","raw_url":"https://github.com/apache/openjpa/raw/ca76712e3875051422c4d121bb5008f81cfd3f61/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jira1794/TestAggregateFunctions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jira1794/TestAggregateFunctions.java?ref=ca76712e3875051422c4d121bb5008f81cfd3f61","patch":"@@ -0,0 +1,235 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.jira1794;\r\n+\r\n+import java.util.List;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.Query;\r\n+import javax.persistence.criteria.CriteriaBuilder;\r\n+import javax.persistence.criteria.CriteriaQuery;\r\n+import javax.persistence.criteria.Expression;\r\n+import javax.persistence.criteria.Path;\r\n+import javax.persistence.criteria.Root;\r\n+import javax.persistence.metamodel.Metamodel;\r\n+import javax.persistence.metamodel.SingularAttribute;\r\n+\r\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n+\r\n+/**\r\n+ * OPENJPA-1794 Verifies the return value of aggregate functions when a query\r\n+ * result set is empty. In this set of variations, the compatibility flag is not\r\n+ * set so null is expected.\r\n+ */\r\n+public class TestAggregateFunctions extends SingleEMFTestCase {\r\n+\r\n+    private static final int MAX = 0;\r\n+    private static final int MIN = 1;\r\n+    private static final int SUM = 2;\r\n+\r\n+    private static final String[] numericAggregateFunctions = { \"MAX\", \"AVG\",\r\n+            \"MIN\", \"SUM\" };\r\n+\r\n+    private static final String[] stringAggregateFunctions = { \"MAX\", \"MIN\" };\r\n+\r\n+    private static final String[] numericAttributes = { \"ae.pintVal\",\r\n+            \"ae.intVal\", \"ae.shortVal\", \"ae.pshortVal\", \"ae.pintVal\",\r\n+            \"ae.intVal\", \"ae.plongVal\", \"ae.longVal\", \"ae.pfloatVal\",\r\n+            \"ae.floatVal\", \"ae.pdblVal\", \"ae.dblVal\" };\r\n+\r\n+    @Override\r\n+    public void setUp() {\r\n+        super.setUp(CLEAR_TABLES, AggEntity.class);\r\n+    }\r\n+\r\n+    protected boolean nullResultExpected() {\r\n+        return true;\r\n+    }\r\n+\r\n+    public void testAggregateJPQL() {\r\n+        EntityManager em = emf.createEntityManager();\r\n+\r\n+        // Verify all numeric types for all aggregate functions return null\r\n+        // if there is no query result\r\n+        verifyResult(em, numericAggregateFunctions, numericAttributes, true);\r\n+\r\n+        // Verify a string for all applicable aggregate functions return null\r\n+        // if there is no query result\r\n+        verifyResult(em, stringAggregateFunctions,\r\n+                new String[] { \"ae.stringVal\" }, true, true);\r\n+\r\n+        // Add a row to the table and re-test\r\n+        AggEntity ae = new AggEntity();\r\n+        ae.init();\r\n+        em.getTransaction().begin();\r\n+        em.persist(ae);\r\n+        em.getTransaction().commit();\r\n+\r\n+        // Verify all numeric types for all aggregate functions return a\r\n+        // non-null value when there is a query result\r\n+        verifyResult(em, numericAggregateFunctions, numericAttributes, false);\r\n+        // Verify string types for all applicable aggregate functions return a\r\n+        // non-null value when there is a query result\r\n+        verifyResult(em, stringAggregateFunctions,\r\n+                new String[] { \"ae.stringVal\" }, false);\r\n+\r\n+        em.close();\r\n+    }\r\n+\r\n+    public void testAggregateCriteria() {\r\n+        EntityManager em = emf.createEntityManager();\r\n+        Metamodel mm = emf.getMetamodel();\r\n+        mm.getEntities();\r\n+\r\n+        Query q = null;\r\n+        // Verify all types of criteria query that return a Numeric type\r\n+        for (int agg = MAX; agg <= SUM; agg++) {\r\n+            CriteriaQuery<Short> cqs = buildNumericCriteriaQuery(em,\r\n+                    Short.class, AggEntity_.shortVal, agg);\r\n+            q = em.createQuery(cqs);\r\n+            verifyQueryResult(q, true);\r\n+\r\n+            cqs = buildNumericCriteriaQuery(em, Short.class,\r\n+                    AggEntity_.pshortVal, agg);\r\n+            q = em.createQuery(cqs);\r\n+            verifyQueryResult(q, true);\r\n+\r\n+            CriteriaQuery<Integer> cqi = buildNumericCriteriaQuery(em,\r\n+                    Integer.class, AggEntity_.intVal, agg);\r\n+            q = em.createQuery(cqi);\r\n+            verifyQueryResult(q, true);\r\n+\r\n+            cqi = buildNumericCriteriaQuery(em, Integer.class,\r\n+                    AggEntity_.pintVal, agg);\r\n+            q = em.createQuery(cqi);\r\n+            verifyQueryResult(q, true);\r\n+\r\n+            CriteriaQuery<Float> cqf = buildNumericCriteriaQuery(em,\r\n+                    Float.class, AggEntity_.floatVal, agg);\r\n+            q = em.createQuery(cqf);\r\n+            verifyQueryResult(q, true);\r\n+\r\n+            cqf = buildNumericCriteriaQuery(em, Float.class,\r\n+                    AggEntity_.pfloatVal, agg);\r\n+            q = em.createQuery(cqi);\r\n+            verifyQueryResult(q, true);\r\n+\r\n+            CriteriaQuery<Double> cqd = buildNumericCriteriaQuery(em,\r\n+                    Double.class, AggEntity_.dblVal, agg);\r\n+            q = em.createQuery(cqd);\r\n+            verifyQueryResult(q, true);\r\n+\r\n+            cqd = buildNumericCriteriaQuery(em, Double.class,\r\n+                    AggEntity_.pdblVal, agg);\r\n+            q = em.createQuery(cqi);\r\n+            verifyQueryResult(q, true);\r\n+        }\r\n+\r\n+        // Verify AVG criteria query - it strictly returns type 'Double' so\r\n+        // unlike other aggregates,\r\n+        // it cannot be handled generically (as Numeric).\r\n+        CriteriaQuery<Double> cqd = buildAvgCriteriaQuery(em, Double.class,\r\n+                AggEntity_.dblVal);\r\n+        q = em.createQuery(cqd);\r\n+        verifyQueryResult(q, true);\r\n+\r\n+        cqd = buildAvgCriteriaQuery(em, Double.class, AggEntity_.pdblVal);\r\n+        q = em.createQuery(cqd);\r\n+        verifyQueryResult(q, true);\r\n+\r\n+        em.close();\r\n+    }\r\n+\r\n+    private <T extends Number> CriteriaQuery<T> buildNumericCriteriaQuery(\r\n+            EntityManager em, Class<T> type,\r\n+            SingularAttribute<AggEntity, T> sa, int at) {\r\n+        CriteriaBuilder cb = em.getCriteriaBuilder();\r\n+        CriteriaQuery<T> cq = cb.createQuery(type);\r\n+        Root<AggEntity> aer = cq.from(AggEntity.class);\r\n+        Path<T> path = aer.get(sa);\r\n+        Expression<T> exp = null;\r\n+        switch (at) {\r\n+        case MAX:\r\n+            exp = cb.max(path);\r\n+            break;\r\n+        case MIN:\r\n+            exp = cb.min(path);\r\n+            break;\r\n+        case SUM:\r\n+            exp = cb.sum(path);\r\n+            break;\r\n+        }\r\n+        cq.select(exp);\r\n+        return cq;\r\n+    }\r\n+\r\n+    private CriteriaQuery<Double> buildAvgCriteriaQuery(EntityManager em,\r\n+            Class<Double> type, SingularAttribute<AggEntity, Double> sa) {\r\n+        CriteriaBuilder cb = em.getCriteriaBuilder();\r\n+        CriteriaQuery<Double> cq = cb.createQuery(type);\r\n+        Root<AggEntity> aer = cq.from(AggEntity.class);\r\n+        return cq.select(cb.avg(aer.get(sa)));\r\n+    }\r\n+\r\n+    private void verifyResult(EntityManager em, String[] aggregates,\r\n+            String[] attributes, boolean expectNull) {\r\n+        verifyResult(em, aggregates, attributes, expectNull, false);\r\n+    }\r\n+\r\n+    private void verifyResult(EntityManager em, String[] aggregates,\r\n+            String[] attributes, boolean expectNull, boolean isString) {\r\n+        for (String func : aggregates) {\r\n+            for (String attr : attributes) {\r\n+                // JPQL with aggregate and aggregate in subselect\r\n+                String sql = \"SELECT \" + func + \"(\" + attr + \")\"\r\n+                        + \" FROM AggEntity ae WHERE \" + attr + \" <= \"\r\n+                        + \"(SELECT \" + func + \"(\"\r\n+                        + attr.replaceFirst(\"^ae.\", \"ae2.\")\r\n+                        + \") FROM AggEntity ae2)\";\r\n+                ;\r\n+                Query q = em.createQuery(sql);\r\n+                verifyQueryResult(q, expectNull, isString);\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    private void verifyQueryResult(Query q, boolean emptyRs) {\r\n+        verifyQueryResult(q, emptyRs, false);\r\n+    }\r\n+\r\n+    private void verifyQueryResult(Query q, boolean emptyRs, boolean isString) {\r\n+        Object result = q.getSingleResult();\r\n+        if (!emptyRs && !isString) {\r\n+            assertNotNull(result);\r\n+        } else if (isString || nullResultExpected()) {\r\n+            assertNull(result);\r\n+        } else {\r\n+            assertNotNull(result);\r\n+        }\r\n+        List<?> resultList = q.getResultList();\r\n+        assertEquals(1, resultList.size());\r\n+        if (!emptyRs && !isString) {\r\n+            assertNotNull(result);\r\n+        } else if (isString || nullResultExpected()) {\r\n+            assertNull(result);\r\n+        } else {\r\n+            assertNotNull(result);\r\n+        }\r\n+    }\r\n+}\r"},{"sha":"08ddb70f3f36c5809390714077a97cfc6a357405","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jira1794/TestCompatAggregateFunctions.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/apache/openjpa/blob/ca76712e3875051422c4d121bb5008f81cfd3f61/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jira1794/TestCompatAggregateFunctions.java","raw_url":"https://github.com/apache/openjpa/raw/ca76712e3875051422c4d121bb5008f81cfd3f61/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jira1794/TestCompatAggregateFunctions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jira1794/TestCompatAggregateFunctions.java?ref=ca76712e3875051422c4d121bb5008f81cfd3f61","patch":"@@ -0,0 +1,41 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.jira1794;\r\n+\r\n+/**\r\n+ * OPENJPA-1794\r\n+ * Verifies the return value of aggregate functions when a query result\r\n+ * set is empty.  In this variation, the compatibility flag\r\n+ * is set so 0 is expected.\r\n+ */\r\n+public class TestCompatAggregateFunctions extends TestAggregateFunctions {\r\n+  \r\n+    @Override\r\n+    public void setUp() {\r\n+        super.setUp(CLEAR_TABLES,\r\n+                    \"openjpa.Compatibility\", \"ReturnNullOnAggregateResult=false\",\r\n+                    AggEntity.class);\r\n+    }\r\n+\r\n+    @Override\r\n+    // In compatibility mode a null result is not expected.\r\n+    protected boolean nullResultExpected() {\r\n+        return false;\r\n+    }\r\n+}\r"},{"sha":"547a247a1e729e50aa91e3aa38b1a71ba6adf33f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestAggregateQueryWithNoResult.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/ca76712e3875051422c4d121bb5008f81cfd3f61/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestAggregateQueryWithNoResult.java","raw_url":"https://github.com/apache/openjpa/raw/ca76712e3875051422c4d121bb5008f81cfd3f61/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestAggregateQueryWithNoResult.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestAggregateQueryWithNoResult.java?ref=ca76712e3875051422c4d121bb5008f81cfd3f61","patch":"@@ -38,7 +38,9 @@\n public class TestAggregateQueryWithNoResult extends SingleEMFTestCase {\n     EntityManager em;\n \tpublic void setUp() {\n-        super.setUp(CLEAR_TABLES, Game.class, IndoorGame.class, Scrabble.class,\n+        super.setUp(CLEAR_TABLES,\n+                \"openjpa.Compatibility\", \"ReturnNullOnAggregateResult=false\",  //OPENJPA-1794\n+                Game.class, IndoorGame.class, Scrabble.class,\n \t\t\t\tChess.class);\n         em = emf.createEntityManager();\n         assertTrue(em.createQuery(\"select p from Scrabble p\").getResultList().isEmpty());"},{"sha":"ce523ab38c6bc9d28dd7a68edae65bf4fef1dc28","filename":"openjpa-project/src/doc/manual/migration_considerations.xml","status":"modified","additions":19,"deletions":0,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/ca76712e3875051422c4d121bb5008f81cfd3f61/openjpa-project/src/doc/manual/migration_considerations.xml","raw_url":"https://github.com/apache/openjpa/raw/ca76712e3875051422c4d121bb5008f81cfd3f61/openjpa-project/src/doc/manual/migration_considerations.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/migration_considerations.xml?ref=ca76712e3875051422c4d121bb5008f81cfd3f61","patch":"@@ -557,6 +557,25 @@\n                     RequiresSearchStringEscapeForLike property to be true if the old behavior is desired. \n                 </para>\n             </section>\n+            <section id=\"ReturnNullOnEmptyAggregateResult\">\n+                <title>\n+                    Return value of aggregate functions in SELECT clause \n+                </title>\n+                <!-- See OPENJPA-1794 for details. -->\n+                <para>\n+                    The JPA specification states \"If SUM, AVG, MAX, or MIN is used, and there are no values to which the aggregate function can be\n+                    applied, the result of the aggregate function is NULL.\"  Prior to this update, OpenJPA incorrectly returned 0 for SUM, AVG, MIN, \n+                    and MAX when a state field being aggregated is numeric.  This behavior affects both JPQL and Criteria queries.  With this update,\n+                    OpenJPA will return a null result value for these aggregate functions when a query returns no result.\n+                </para>\n+                <para>\n+                    To re-enable the prior behavior, you need to set the following persistence property in your persistence.xml or when\n+                    creating an EntityManagerFactory.\n+                    <programlisting>\n+    &lt;property name=\"openjpa.Compatibility\" value=\"ReturnNullOnAggregateResult=false\"/&gt;\n+                    </programlisting>\n+                </para>\n+            </section>\n         </section>\n     </section>\n </appendix>"}]}

