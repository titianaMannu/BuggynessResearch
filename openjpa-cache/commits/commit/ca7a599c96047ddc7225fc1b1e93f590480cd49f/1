{"sha":"ca7a599c96047ddc7225fc1b1e93f590480cd49f","node_id":"MDY6Q29tbWl0MjA2MzY0OmNhN2E1OTljOTYwNDdkZGM3MjI1ZmMxYjFlOTNmNTkwNDgwY2Q0OWY=","commit":{"author":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2006-10-19T19:07:02Z"},"committer":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2006-10-19T19:07:02Z"},"message":"Modified TestGenerationType testcase to check whether the current\nDBDictionary supports AutoAssign(ment) of column values.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@465733 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"9d5f9ee9dd452b7655535b046756fb694d3d56d9","url":"https://api.github.com/repos/apache/openjpa/git/trees/9d5f9ee9dd452b7655535b046756fb694d3d56d9"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ca7a599c96047ddc7225fc1b1e93f590480cd49f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ca7a599c96047ddc7225fc1b1e93f590480cd49f","html_url":"https://github.com/apache/openjpa/commit/ca7a599c96047ddc7225fc1b1e93f590480cd49f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ca7a599c96047ddc7225fc1b1e93f590480cd49f/comments","author":null,"committer":null,"parents":[{"sha":"c000408cce1d54c8f8e35fe343f02fc14b437ac8","url":"https://api.github.com/repos/apache/openjpa/commits/c000408cce1d54c8f8e35fe343f02fc14b437ac8","html_url":"https://github.com/apache/openjpa/commit/c000408cce1d54c8f8e35fe343f02fc14b437ac8"}],"stats":{"total":25,"additions":22,"deletions":3},"files":[{"sha":"e0b7536641bceb779438ae2aead235db2f88fc2d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestGenerationType.java","status":"modified","additions":22,"deletions":3,"changes":25,"blob_url":"https://github.com/apache/openjpa/blob/ca7a599c96047ddc7225fc1b1e93f590480cd49f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestGenerationType.java","raw_url":"https://github.com/apache/openjpa/raw/ca7a599c96047ddc7225fc1b1e93f590480cd49f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestGenerationType.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestGenerationType.java?ref=ca7a599c96047ddc7225fc1b1e93f590480cd49f","patch":"@@ -19,14 +19,16 @@\n import java.util.List;\n import java.util.Map;\n import javax.persistence.EntityManager;\n-import javax.persistence.EntityManagerFactory;\n import javax.persistence.EntityTransaction;\n import javax.persistence.Persistence;\n import javax.persistence.Query;\n \n import junit.framework.TestCase;\n import junit.textui.TestRunner;\n+\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\n \n /**\n  * Simple test case to test the GenerationType for @Id...\n@@ -36,13 +38,24 @@\n public class TestGenerationType\n     extends TestCase {\n \n-    private EntityManagerFactory emf;\n+    private OpenJPAEntityManagerFactory emf;\n \n     public void setUp() {\n         Map props = new HashMap();\n         props.put(\"openjpa.MetaDataFactory\",\n             \"jpa(Types=\" + IdentityGenerationType.class.getName() + \")\");\n-        emf = Persistence.createEntityManagerFactory(\"test\", props);\n+        emf = (OpenJPAEntityManagerFactory) Persistence.\n+            createEntityManagerFactory(\"test\", props);\n+        /*\n+         * If the DBDictionary doesn't support AutoAssign(ment) of column\n+         * values, then null out the emf instance to prevent the rest of\n+         * the tests from executing.\n+         */\n+        JDBCConfiguration conf = (JDBCConfiguration) emf.getConfiguration();\n+        if (!conf.getDBDictionaryInstance().supportsAutoAssign) {\n+            emf = null;\n+        }\n+\n     }\n \n     public void tearDown() {\n@@ -60,6 +73,8 @@ public void tearDown() {\n     }\n \n     public void testCreateEntityManager() {\n+        if (emf == null)\n+            return;\n         EntityManager em = emf.createEntityManager();\n \n         EntityTransaction t = em.getTransaction();\n@@ -77,6 +92,8 @@ public void testCreateEntityManager() {\n     }\n \n     public void testPersist() {\n+        if (emf == null)\n+            return;\n         EntityManager em = emf.createEntityManager();\n         em.getTransaction().begin();\n         em.persist(new IdentityGenerationType());\n@@ -85,6 +102,8 @@ public void testPersist() {\n     }\n \n     public void testQuery() {\n+        if (emf == null)\n+            return;\n         EntityManager em = emf.createEntityManager();\n         em.getTransaction().begin();\n         IdentityGenerationType igt = new IdentityGenerationType();"}]}

