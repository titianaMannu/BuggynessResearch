{"sha":"caa1ea4543411cd254d218b1baaa748ebad1633f","node_id":"MDY6Q29tbWl0MjA2MzY0OmNhYTFlYTQ1NDM0MTFjZDI1NGQyMThiMWJhYWE3NDhlYmFkMTYzM2Y=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2006-10-31T09:43:43Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2006-10-31T09:43:43Z"},"message":"made in-mem match queries fail faster; added another test case for new  DataCacheStoreManager work\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@469429 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5c015570c76fe5bb9cb580e8d4c30a1ae4a095c6","url":"https://api.github.com/repos/apache/openjpa/git/trees/5c015570c76fe5bb9cb580e8d4c30a1ae4a095c6"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/caa1ea4543411cd254d218b1baaa748ebad1633f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/caa1ea4543411cd254d218b1baaa748ebad1633f","html_url":"https://github.com/apache/openjpa/commit/caa1ea4543411cd254d218b1baaa748ebad1633f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/caa1ea4543411cd254d218b1baaa748ebad1633f/comments","author":null,"committer":null,"parents":[{"sha":"8b2e03262154b21e07f016f99a4775abc06f097e","url":"https://api.github.com/repos/apache/openjpa/commits/8b2e03262154b21e07f016f99a4775abc06f097e","html_url":"https://github.com/apache/openjpa/commit/8b2e03262154b21e07f016f99a4775abc06f097e"}],"stats":{"total":141,"additions":118,"deletions":23},"files":[{"sha":"7eb8d70662e7693f7beebd1879af1f4f61cbae0d","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/caa1ea4543411cd254d218b1baaa748ebad1633f/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/caa1ea4543411cd254d218b1baaa748ebad1633f/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java?ref=caa1ea4543411cd254d218b1baaa748ebad1633f","patch":"@@ -578,10 +578,11 @@ private void evictOptimisticLockFailure(OptimisticException e) {\n             switch (compareVersion(sm, sm.getVersion(), data.getVersion())) {\n                 case StoreManager.VERSION_LATER:\n                 case StoreManager.VERSION_SAME:\n-                    // This tx's current version is later than the data cache \n-                    // version. In this case, the commit should have succeeded. \n-                    // Remove the instance from cache in the hopes that the \n-                    // cache is out of sync.\n+                    // This tx's current version is later than or the same as \n+                    // the data cache version. In this case, the commit should \n+                    // have succeeded from the standpoint of the cache. Remove \n+                    // the instance from cache in the hopes that the cache is \n+                    // out of sync.\n                     remove = true;\n                     break;\n                 case StoreManager.VERSION_EARLIER:"},{"sha":"6bd60745ffbb4e8c983d0a1189a1fcedd4f1189d","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/MatchesExpression.java","status":"modified","additions":7,"deletions":2,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/caa1ea4543411cd254d218b1baaa748ebad1633f/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/MatchesExpression.java","raw_url":"https://github.com/apache/openjpa/raw/caa1ea4543411cd254d218b1baaa748ebad1633f/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/MatchesExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/MatchesExpression.java?ref=caa1ea4543411cd254d218b1baaa748ebad1633f","patch":"@@ -15,6 +15,7 @@\n  */\n package org.apache.openjpa.kernel.exps;\n \n+import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.lib.util.SimpleRegex;\n import serp.util.Strings;\n \n@@ -26,9 +27,11 @@\n class MatchesExpression\n     extends CompareExpression {\n \n+    private static final Localizer _loc = Localizer.forPackage(\n+        MatchesExpression.class);\n+    \n     private final String _single;\n     private final String _multi;\n-    private final String _escape; // ### in-memory queries are not using escapes\n     private final boolean _affirmation;\n \n     /**\n@@ -39,7 +42,9 @@ public MatchesExpression(Val val1, Val val2,\n         super(val1, val2);\n         _single = single;\n         _multi = multi;\n-        _escape = escape;\n+        if (escape != null)\n+            throw new IllegalArgumentException(_loc.get(\n+                \"escape-for-inmem-query-not-supported\").getMessage());\n         _affirmation = affirmation;\n     }\n "},{"sha":"15a324acd35b0fe0abc71b37a56317ed22832b67","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheOptimisticLockRecovery.java","status":"modified","additions":40,"deletions":17,"changes":57,"blob_url":"https://github.com/apache/openjpa/blob/caa1ea4543411cd254d218b1baaa748ebad1633f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheOptimisticLockRecovery.java","raw_url":"https://github.com/apache/openjpa/raw/caa1ea4543411cd254d218b1baaa748ebad1633f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheOptimisticLockRecovery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheOptimisticLockRecovery.java?ref=caa1ea4543411cd254d218b1baaa748ebad1633f","patch":"@@ -20,6 +20,7 @@\n     extends TestCase {\r\n \r\n     private EntityManagerFactory emf;\r\n+    private int pk;\r\n \r\n     public void setUp() {\r\n         Map options = new HashMap();\r\n@@ -38,7 +39,16 @@ public void setUp() {\n         EntityManager em = emf.createEntityManager();\r\n         em.getTransaction().begin();\r\n         em.createQuery(\"delete from OptimisticLockInstance\");\r\n-        em.getTransaction().commit();\r\n+\r\n+        OptimisticLockInstance oli = new OptimisticLockInstance(\"foo\");\r\n+        try {\r\n+            em.persist(oli);\r\n+            em.getTransaction().commit();\r\n+        } finally {\r\n+            if (em.getTransaction().isActive())\r\n+                em.getTransaction().rollback();\r\n+        }\r\n+        pk = oli.getPK();\r\n         em.close();\r\n     }\r\n \r\n@@ -51,26 +61,12 @@ public void testOptimisticLockRecovery()\n \r\n         EntityManager em;\r\n         \r\n-        // 1. get the instance into the cache via this insert\r\n-        em = emf.createEntityManager();\r\n-        em.getTransaction().begin();\r\n-        OptimisticLockInstance oli = new OptimisticLockInstance(\"foo\");\r\n-        try {\r\n-            em.persist(oli);\r\n-            em.getTransaction().commit();\r\n-        } finally {\r\n-            if (em.getTransaction().isActive())\r\n-                em.getTransaction().rollback();\r\n-        }\r\n-        int pk = oli.getPK();\r\n-        em.close();\r\n-        \r\n-        // 2. get the oplock value for the instance after commit and\r\n+        // 1. get the oplock value for the instance after commit and\r\n         // get a read lock to ensure that we check for the optimistic\r\n         // lock column at tx commit.\r\n         em = emf.createEntityManager();\r\n         em.getTransaction().begin();\r\n-        oli = em.find(OptimisticLockInstance.class, pk);\r\n+        OptimisticLockInstance oli = em.find(OptimisticLockInstance.class, pk);\r\n         int firstOpLockValue = oli.getOpLock();\r\n         em.lock(oli, LockModeType.READ);\r\n \r\n@@ -129,4 +125,31 @@ public void testOptimisticLockRecovery()\n         }\r\n         em.close();\r\n     }\r\n+    \r\n+    public void testExpectedOptimisticLockException() {\r\n+        EntityManager em;\r\n+        \r\n+        // 1. start a new tx\r\n+        em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        em.lock(em.find(OptimisticLockInstance.class, pk), LockModeType.READ);\r\n+        \r\n+        // 2. start another tx, and cause a version increment\r\n+        EntityManager em2 = emf.createEntityManager();\r\n+        em2.getTransaction().begin();\r\n+        em2.lock(em2.find(OptimisticLockInstance.class, pk), \r\n+            LockModeType.WRITE);\r\n+        em2.getTransaction().commit();\r\n+        em2.close();\r\n+        \r\n+        // 3. try to commit. this should fail, as this is a regular optimistic\r\n+        // lock failure situation.\r\n+        try {\r\n+            em.getTransaction().commit();\r\n+            fail(\"write lock in em2 should trigger an optimistic lock failure\");\r\n+        } catch (RollbackException pe) {\r\n+            // expected\r\n+        }\r\n+        em.close();\r\n+    }\r\n }\r"},{"sha":"dbb5876caddaa13d5a706bb4abf1cda0f745001e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestInMemoryQueryMatchEscapes.java","status":"added","additions":66,"deletions":0,"changes":66,"blob_url":"https://github.com/apache/openjpa/blob/caa1ea4543411cd254d218b1baaa748ebad1633f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestInMemoryQueryMatchEscapes.java","raw_url":"https://github.com/apache/openjpa/raw/caa1ea4543411cd254d218b1baaa748ebad1633f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestInMemoryQueryMatchEscapes.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestInMemoryQueryMatchEscapes.java?ref=caa1ea4543411cd254d218b1baaa748ebad1633f","patch":"@@ -0,0 +1,66 @@\n+package org.apache.openjpa.persistence.query;\r\n+\r\n+import java.util.HashMap;\r\n+import java.util.Map;\r\n+\r\n+import javax.persistence.FlushModeType;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+import javax.persistence.Persistence;\r\n+\r\n+import org.apache.openjpa.persistence.OpenJPAQuery;\r\n+import org.apache.openjpa.persistence.simple.AllFieldTypes;\r\n+\r\n+import junit.framework.TestCase;\r\n+\r\n+public class TestInMemoryQueryMatchEscapes\r\n+    extends TestCase {\r\n+\r\n+    private EntityManagerFactory emf;\r\n+\r\n+    public void setUp() {\r\n+        Map options = new HashMap();\r\n+\r\n+        // ensure that OpenJPA knows about our type, so that \r\n+        // auto-schema-creation works\r\n+        options.put(\"openjpa.MetaDataFactory\",\r\n+            \"jpa(Types=\" + AllFieldTypes.class.getName() + \")\");\r\n+\r\n+        emf = Persistence.createEntityManagerFactory(\"test\", options);\r\n+    }\r\n+    \r\n+    public void testDatabaseEscape() {\r\n+        OpenJPAQuery q = escapeHelper(false);\r\n+        q.setFlushMode(FlushModeType.AUTO);\r\n+        q.getEntityManager().flush();\r\n+        AllFieldTypes aft = (AllFieldTypes) q.getSingleResult();\r\n+        assertEquals(\"foo_bar\", aft.getStringField());\r\n+        q.getEntityManager().getTransaction().rollback();\r\n+    }\r\n+    \r\n+    public void testInMemoryEscape() {\r\n+        OpenJPAQuery q = escapeHelper(true);\r\n+        q.setFlushMode(FlushModeType.COMMIT);\r\n+        try {\r\n+            q.getSingleResult();\r\n+            fail(\"OpenJPA doesn't support escape syntax for in-mem queries\");\r\n+        } catch (Exception e) {\r\n+            // expected\r\n+        }\r\n+    }\r\n+    \r\n+    private OpenJPAQuery escapeHelper(boolean inMem) {\r\n+        EntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        AllFieldTypes aft = new AllFieldTypes();\r\n+        aft.setStringField(\"foo_bar\");\r\n+        em.persist(aft);\r\n+        aft = new AllFieldTypes();\r\n+        aft.setStringField(\"foozbar\");\r\n+        em.persist(aft);\r\n+\r\n+        return (OpenJPAQuery) em.createQuery(\r\n+            \"select e from AllFieldTypes e where e.stringField \" +\r\n+            \"like 'foox_bar' escape 'x'\");\r\n+    }\r\n+}\r"}]}

