{"sha":"cae33419ae4aab79500a8d574ff7873f005a955f","node_id":"MDY6Q29tbWl0MjA2MzY0OmNhZTMzNDE5YWU0YWFiNzk1MDBhOGQ1NzRmZjc4NzNmMDA1YTk1NWY=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-03-06T07:50:54Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-03-06T07:50:54Z"},"message":"OPENJPA-955:  test+documentation on MethodQL. Allow candidate class be optional on MethodQL. Do not cache MethodQLQuery.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@750798 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b482fc2b49532d8335df92150362fbae33a8f7f2","url":"https://api.github.com/repos/apache/openjpa/git/trees/b482fc2b49532d8335df92150362fbae33a8f7f2"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/cae33419ae4aab79500a8d574ff7873f005a955f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/cae33419ae4aab79500a8d574ff7873f005a955f","html_url":"https://github.com/apache/openjpa/commit/cae33419ae4aab79500a8d574ff7873f005a955f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/cae33419ae4aab79500a8d574ff7873f005a955f/comments","author":null,"committer":null,"parents":[{"sha":"4b31d54b3e5d20391301f6bb54537a80ae0a66cf","url":"https://api.github.com/repos/apache/openjpa/commits/4b31d54b3e5d20391301f6bb54537a80ae0a66cf","html_url":"https://github.com/apache/openjpa/commit/4b31d54b3e5d20391301f6bb54537a80ae0a66cf"}],"stats":{"total":111,"additions":74,"deletions":37},"files":[{"sha":"eba8dce4960356012e7ef6f66ddff51ad74ace4f","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedQueryCacheImpl.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/cae33419ae4aab79500a8d574ff7873f005a955f/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedQueryCacheImpl.java","raw_url":"https://github.com/apache/openjpa/raw/cae33419ae4aab79500a8d574ff7873f005a955f/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedQueryCacheImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedQueryCacheImpl.java?ref=cae33419ae4aab79500a8d574ff7873f005a955f","patch":"@@ -72,6 +72,7 @@ public Boolean register(String id, Query query, FetchConfiguration hints) {\n         if (id == null \r\n             || query == null \r\n             || QueryLanguages.LANG_SQL.equals(query.getLanguage()) \r\n+            || QueryLanguages.LANG_METHODQL.equals(query.getLanguage())\r\n             || isHinted(hints, QueryHints.HINT_IGNORE_PREPARED_QUERY)\r\n             || isHinted(hints, QueryHints.HINT_INVALIDATE_PREPARED_QUERY))\r\n             return Boolean.FALSE;\r"},{"sha":"f8d19fa597ee8a5d50d1a0c55f190336b9104fcc","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/MethodStoreQuery.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/cae33419ae4aab79500a8d574ff7873f005a955f/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/MethodStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/cae33419ae4aab79500a8d574ff7873f005a955f/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/MethodStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/MethodStoreQuery.java?ref=cae33419ae4aab79500a8d574ff7873f005a955f","patch":"@@ -88,6 +88,10 @@ public boolean supportsDataStoreExecution() {\n         return true;\n     }\n \n+    public boolean requiresCandidateType() {\n+        return false;\n+    }\n+    \n     /**\n      * Parse the parameter declarations.\n      */"},{"sha":"4f852516660e327eb155c0ecf2012845407c6380","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestMethodQLQuery.java","status":"modified","additions":46,"deletions":25,"changes":71,"blob_url":"https://github.com/apache/openjpa/blob/cae33419ae4aab79500a8d574ff7873f005a955f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestMethodQLQuery.java","raw_url":"https://github.com/apache/openjpa/raw/cae33419ae4aab79500a8d574ff7873f005a955f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestMethodQLQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestMethodQLQuery.java?ref=cae33419ae4aab79500a8d574ff7873f005a955f","patch":"@@ -18,20 +18,29 @@\n  */\r\n package org.apache.openjpa.persistence.query;\r\n \r\n+import java.util.Collections;\r\n import java.util.Map;\r\n-import java.util.ArrayList;\r\n \r\n-import org.apache.openjpa.persistence.test.SingleEMTestCase;\r\n-import org.apache.openjpa.persistence.OpenJPAQuery;\r\n-import org.apache.openjpa.persistence.QueryImpl;\r\n-import org.apache.openjpa.persistence.ArgumentException;\r\n+import org.apache.openjpa.kernel.FetchConfiguration;\r\n+import org.apache.openjpa.kernel.Query;\r\n import org.apache.openjpa.kernel.QueryLanguages;\r\n import org.apache.openjpa.kernel.StoreContext;\r\n-import org.apache.openjpa.kernel.FetchConfiguration;\r\n-import org.apache.openjpa.meta.ClassMetaData;\r\n-import org.apache.openjpa.lib.rop.ResultObjectProvider;\r\n import org.apache.openjpa.lib.rop.ListResultObjectProvider;\r\n+import org.apache.openjpa.lib.rop.ResultObjectProvider;\r\n+import org.apache.openjpa.meta.ClassMetaData;\r\n+import org.apache.openjpa.persistence.ArgumentException;\r\n+import org.apache.openjpa.persistence.OpenJPAQuery;\r\n+import org.apache.openjpa.persistence.QueryImpl;\r\n+import org.apache.openjpa.persistence.test.SingleEMTestCase;\r\n \r\n+/**\r\n+ * Tests MethodQL.\r\n+ * \r\n+ * The 'user method' is simply echos the parameters set on the query.\r\n+ *  \r\n+ * @author Pinaki Poddar\r\n+ *\r\n+ */\r\n public class TestMethodQLQuery\r\n     extends SingleEMTestCase {\r\n \r\n@@ -40,21 +49,32 @@ public void setUp() {\n         setUp(SimpleEntity.class);\r\n     }\r\n \r\n+    OpenJPAQuery createMethodQuery(String method) {\r\n+        String methodName = getClass().getName()+ \".\" + method;\r\n+        return em.createQuery(QueryLanguages.LANG_METHODQL, methodName);\r\n+    }\r\n+    \r\n+    public void testMethodQLWithParameters() {\r\n+        OpenJPAQuery q = createMethodQuery(\"echo\");\r\n+        Query kernelQ = q.unwrap(Query.class);\r\n+        kernelQ.declareParameters(\"String firstName, String lastName\");\r\n+        q.setParameter(\"firstName\", \"Fred\").setParameter(\"lastName\", \"Lucas\");\r\n+        Object result = q.getResultList().get(0);\r\n+        assertTrue(result instanceof Map);\r\n+        Map params = (Map)result;\r\n+        assertEquals(\"Fred\", params.get(\"firstName\"));\r\n+        assertEquals(\"Lucas\", params.get(\"lastName\"));\r\n+    }\r\n+\r\n     public void testMethodQLWithoutParametersDeclared() {\r\n-        OpenJPAQuery q = em.createQuery(QueryLanguages.LANG_METHODQL,\r\n-            getClass().getName() + \".echo\");\r\n-        ((QueryImpl) q).getDelegate().setCandidateType(\r\n-            SimpleEntity.class, true);\r\n-        q.setParameter(\"param\", 5);\r\n-        ((QueryImpl) q).getDelegate().declareParameters(\"Integer param\");\r\n-        assertEquals(5, q.getResultList().get(0));\r\n+        OpenJPAQuery q = createMethodQuery(\"echo\");\r\n+        Object result = q.getResultList().get(0);\r\n+        assertTrue(result instanceof Map);\r\n+        assertTrue(((Map)result).isEmpty());\r\n     }\r\n \r\n     public void testInvalidMethodReturnType() {\r\n-        OpenJPAQuery q = em.createQuery(QueryLanguages.LANG_METHODQL,\r\n-            getClass().getName() + \".invalidReturnMeth\");\r\n-        ((QueryImpl) q).getDelegate().setCandidateType(\r\n-            SimpleEntity.class, true);\r\n+        OpenJPAQuery q = createMethodQuery(\"invalidReturnMeth\");\r\n         try {\r\n             q.getResultList().get(0);\r\n             fail(\"should have gotten an exception since method is invalid\");\r\n@@ -64,21 +84,22 @@ public void testInvalidMethodReturnType() {\n     }\r\n \r\n     public void testVoidMethodReturnType() {\r\n-        OpenJPAQuery q = em.createQuery(QueryLanguages.LANG_METHODQL,\r\n-            getClass().getName() + \".voidMeth\");\r\n-        ((QueryImpl) q).getDelegate().setCandidateType(\r\n-            SimpleEntity.class, true);\r\n+        OpenJPAQuery q = createMethodQuery(\"voidMeth\");\r\n         try {\r\n             q.getResultList().get(0);\r\n             fail(\"should have gotten an exception since method is invalid\");\r\n         } catch (ArgumentException ae) {\r\n             // expected\r\n         }\r\n     }\r\n-\r\n+    \r\n+    /**\r\n+     * Returns the list whose element is the Map of input parameters.\r\n+     * @return\r\n+     */\r\n     public static ResultObjectProvider echo(StoreContext ctx,\r\n         ClassMetaData meta, boolean subs, Map params, FetchConfiguration conf) {\r\n-        return new ListResultObjectProvider(new ArrayList(params.values()));\r\n+        return new ListResultObjectProvider(Collections.singletonList(params));\r\n     }\r\n \r\n     public static void voidMeth(StoreContext ctx,\r"},{"sha":"7b3d3688ec3bd545ed8e27a48758f7f65fc40830","filename":"openjpa-project/src/doc/manual/ref_guide_runtime.xml","status":"modified","additions":23,"deletions":12,"changes":35,"blob_url":"https://github.com/apache/openjpa/blob/cae33419ae4aab79500a8d574ff7873f005a955f/openjpa-project/src/doc/manual/ref_guide_runtime.xml","raw_url":"https://github.com/apache/openjpa/raw/cae33419ae4aab79500a8d574ff7873f005a955f/openjpa-project/src/doc/manual/ref_guide_runtime.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_runtime.xml?ref=cae33419ae4aab79500a8d574ff7873f005a955f","patch":"@@ -1372,21 +1372,32 @@ import org.apache.openjpa.persistence.*;\n ...\n \n // the method query language is 'openjpa.MethodQL'.\n-// set the query string to the method to execute, including full class name; if\n-// the class is in the candidate class' package or in the query imports, you\n-// can omit the package; if the method is in the candidate class, you can omit\n-// the class name and just specify the method name\n-OpenJPAEntityManager oem = OpenJPAPersistence.cast(emf);\n-OpenJPAQuery q = oem.createQuery(\"openjpa.MethodQL\", \"com.xyz.Finder.getByName\");\n+// set the query string to the target method to execute, prefixed by fullly-\r\n+// qualified class name.\r\n+// If a candidate class has been specified for the query, then if the class is \r\n+// in the candidate class' package or in the query imports, you can omit the \r\n+// package. If the method is in the candidate class, you can omit the class name \r\n+// and just specify the method name.\r\n \n-// set the type of objects that the method returns\n-q.setResultClass(Person.class);\n+  OpenJPAEntityManager oem = OpenJPAPersistence.cast(emf);\n+  OpenJPAQuery q = oem.createQuery(\"openjpa.MethodQL\", \"com.xyz.Finder.getByName\");\n \n-// parameters are passed the same way as in standard queries\n-q.setParameter(\"firstName\", \"Fred\").setParameter(\"lastName\", \"Lucas\");\n+// parameters are passed the same way as in standard queries\r\n+// but you have to declare the parameters with their types on the implementation\r\n+\r\n+// Unwrap the implementation and declare parameters with types in a \r\n+// comma-separated list\r\n+  q.unwrap(org.apache.openjpa.kernel.Query.class)\r\n+   .declareParameters(\"String firstName, String lastName\");\r\n \n-// this executes your method to get the results\n-List results = q.getResultList();\n+  q.setParameter(\"firstName\", \"Fred\").setParameter(\"lastName\", \"Lucas\");\n+\n+// this executes the target method to get the results\n+  List results = q.getResultList();\r\n+\r\n+// The result is returned as a list but the element(s) in the list is determined \r\n+// by the returned value of the target method\r\n+ \n </programlisting>\n             <para>\n For datastore queries, the method must have the following signature:"}]}

