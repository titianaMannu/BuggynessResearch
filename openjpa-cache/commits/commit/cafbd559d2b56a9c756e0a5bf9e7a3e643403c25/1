{"sha":"cafbd559d2b56a9c756e0a5bf9e7a3e643403c25","node_id":"MDY6Q29tbWl0MjA2MzY0OmNhZmJkNTU5ZDJiNTZhOWM3NTZlMGE1YmY5ZTdhM2U2NDM0MDNjMjU=","commit":{"author":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2009-09-25T20:15:12Z"},"committer":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2009-09-25T20:15:12Z"},"message":"OPENJPA-1115 Targeted delimited id tests for specific DB platforms based on schema support/usage.  Includes test updates contributed by Dianne Richards.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@818987 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"8d77cda2aa6a3b0ff92e3a9b71e6962c3ac4e27c","url":"https://api.github.com/repos/apache/openjpa/git/trees/8d77cda2aa6a3b0ff92e3a9b71e6962c3ac4e27c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/cafbd559d2b56a9c756e0a5bf9e7a3e643403c25","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/cafbd559d2b56a9c756e0a5bf9e7a3e643403c25","html_url":"https://github.com/apache/openjpa/commit/cafbd559d2b56a9c756e0a5bf9e7a3e643403c25","comments_url":"https://api.github.com/repos/apache/openjpa/commits/cafbd559d2b56a9c756e0a5bf9e7a3e643403c25/comments","author":null,"committer":null,"parents":[{"sha":"22391c91333a27e49dcbe9789bc7e456d8930161","url":"https://api.github.com/repos/apache/openjpa/commits/22391c91333a27e49dcbe9789bc7e456d8930161","html_url":"https://github.com/apache/openjpa/commit/22391c91333a27e49dcbe9789bc7e456d8930161"}],"stats":{"total":1464,"additions":1411,"deletions":53},"files":[{"sha":"d3f9a5a40f72f6c244bb67adaded16ed3c392f9c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/EntityE.java","status":"modified","additions":1,"deletions":8,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/cafbd559d2b56a9c756e0a5bf9e7a3e643403c25/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/EntityE.java","raw_url":"https://github.com/apache/openjpa/raw/cafbd559d2b56a9c756e0a5bf9e7a3e643403c25/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/EntityE.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/EntityE.java?ref=cafbd559d2b56a9c756e0a5bf9e7a3e643403c25","patch":"@@ -27,12 +27,11 @@\n import javax.persistence.Table;\n \n @Entity\n-//@Table(name=\"primary_entityE\", schema=\"delim_id\")\n @Table(name=\"\\\"primary entityE\\\"\", schema=\"\\\"delim id\\\"\")\n public class EntityE {\n     @Id\n     @SequenceGenerator(name=\"entityE_seq_gen_name\", \n-        sequenceName=\"\\\"entityE_seq_gen\\\"\", schema=\"\\\"delim_id\\\"\")\n+        sequenceName=\"\\\"entityE_seq_gen\\\"\", schema=\"\\\"delim id\\\"\")\n     @GeneratedValue(strategy=GenerationType.SEQUENCE, \n         generator=\"entityE_seq_gen_name\")\n     private int id;\n@@ -41,14 +40,8 @@\n     \n     public EntityE(String name) {\n         this.name = name;\n-//        id = 1;\n     }\n     \n-//    public EntityE(int id, String name) {\n-//        this.id = id;\n-//        this.name = name;\n-//    }\n-    \n     /**\n      * @return the id\n      */"},{"sha":"e916fc8424eb4360bb6ac07e1471bde93a729826","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/EntityF.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/cafbd559d2b56a9c756e0a5bf9e7a3e643403c25/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/EntityF.java","raw_url":"https://github.com/apache/openjpa/raw/cafbd559d2b56a9c756e0a5bf9e7a3e643403c25/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/EntityF.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/EntityF.java?ref=cafbd559d2b56a9c756e0a5bf9e7a3e643403c25","patch":"@@ -77,8 +77,8 @@\n     @ElementCollection\n     // Note: Delimited column definition is not supported on some DBs, so\n     // it is not delimited here\n-    // TODO: create a separate entity and conditionally run the test\n-    @MapKeyColumn(name=\"\\\"mapKey\\\"\", columnDefinition=\"varchar(20)\")\n+    // TODO: create a separate entity and conditionally run the test on a supported DB\n+    @MapKeyColumn(name=\"\\\"mapKey\\\"\", columnDefinition=\"varchar(20)\", table=\"\\\"delim collection map\\\"\")\n     private Map<String, String> delimCollectionMap = \n         new HashMap<String, String>();\n     "},{"sha":"241ca37fe4e213363b2eeaff9a052cdbcbf677db","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/EntityG.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/cafbd559d2b56a9c756e0a5bf9e7a3e643403c25/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/EntityG.java","raw_url":"https://github.com/apache/openjpa/raw/cafbd559d2b56a9c756e0a5bf9e7a3e643403c25/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/EntityG.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/EntityG.java?ref=cafbd559d2b56a9c756e0a5bf9e7a3e643403c25","patch":"@@ -25,10 +25,8 @@\n \n @Entity\n @Table(name=\"\\\"entity d4\\\"\", schema=\"\\\"delim id\\\"\")\n-//@Table(name=\"xxx\")\n public class EntityG {\n     @Id\n-//    @Column(name=\"\\\"entityD4 id\\\"\")\n     int id;\n     String name;\n     "},{"sha":"130fe7acb780ac42c3d6c70fab6b93c64ce7394e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/TestManualDelimId.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/cafbd559d2b56a9c756e0a5bf9e7a3e643403c25/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/TestManualDelimId.java","raw_url":"https://github.com/apache/openjpa/raw/cafbd559d2b56a9c756e0a5bf9e7a3e643403c25/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/TestManualDelimId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/TestManualDelimId.java?ref=cafbd559d2b56a9c756e0a5bf9e7a3e643403c25","patch":"@@ -22,6 +22,8 @@\n \n import javax.persistence.Query;\n \n+import org.apache.openjpa.jdbc.sql.DB2Dictionary;\n+import org.apache.openjpa.jdbc.sql.DerbyDictionary;\n import org.apache.openjpa.persistence.OpenJPAEntityManager;\n import org.apache.openjpa.persistence.test.SQLListenerTestCase;\n \n@@ -31,6 +33,13 @@\n     \n     @Override\n     public void setUp() throws Exception {\n+        // NOTE: This test is only configured to run on DB2 and Derby since \n+        // those DBs handle non-default schemas without additional authority or \n+        // configuration  \n+        setSupportedDatabases(DB2Dictionary.class, DerbyDictionary.class);\n+        if (isTestsDisabled())\n+            return;\n+        \n         super.setUp(\n             org.apache.openjpa.persistence.delimited.identifiers.EntityF.class,\n             DROP_TABLES);"},{"sha":"dc02ed9eafe184fcd8b237e6f6c55f9cc43fe17c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/TestManualDelimIdResultSetAnnotations.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/cafbd559d2b56a9c756e0a5bf9e7a3e643403c25/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/TestManualDelimIdResultSetAnnotations.java","raw_url":"https://github.com/apache/openjpa/raw/cafbd559d2b56a9c756e0a5bf9e7a3e643403c25/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/TestManualDelimIdResultSetAnnotations.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/TestManualDelimIdResultSetAnnotations.java?ref=cafbd559d2b56a9c756e0a5bf9e7a3e643403c25","patch":"@@ -22,6 +22,8 @@\n \n import javax.persistence.Query;\n \n+import org.apache.openjpa.jdbc.sql.DB2Dictionary;\n+import org.apache.openjpa.jdbc.sql.DerbyDictionary;\n import org.apache.openjpa.persistence.OpenJPAEntityManager;\n import org.apache.openjpa.persistence.test.SQLListenerTestCase;\n \n@@ -38,6 +40,13 @@\n     \n     @Override\n     public void setUp() throws Exception {\n+        // NOTE: This test is only configured to run on DB2 and Derby since \n+        // those DBs handle non-default schemas without additional authority or \n+        // configuration  \n+        setSupportedDatabases(DB2Dictionary.class, DerbyDictionary.class);\n+        if (isTestsDisabled())\n+            return;\n+        \n         super.setUp(\n             org.apache.openjpa.persistence.delimited.identifiers.Animal.class,\n             org.apache.openjpa.persistence.delimited.identifiers.Dog.class,"},{"sha":"9a916e3250e7fbe82ac01ffa5ee52fd0b94fa3ea","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/TestManualDelimIdSeqGen.java","status":"modified","additions":10,"deletions":35,"changes":45,"blob_url":"https://github.com/apache/openjpa/blob/cafbd559d2b56a9c756e0a5bf9e7a3e643403c25/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/TestManualDelimIdSeqGen.java","raw_url":"https://github.com/apache/openjpa/raw/cafbd559d2b56a9c756e0a5bf9e7a3e643403c25/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/TestManualDelimIdSeqGen.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/TestManualDelimIdSeqGen.java?ref=cafbd559d2b56a9c756e0a5bf9e7a3e643403c25","patch":"@@ -19,7 +19,9 @@\n package org.apache.openjpa.persistence.delimited.identifiers;\n \n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.sql.DB2Dictionary;\n import org.apache.openjpa.jdbc.sql.DBDictionary;\n+import org.apache.openjpa.jdbc.sql.DerbyDictionary;\n import org.apache.openjpa.persistence.OpenJPAEntityManager;\n import org.apache.openjpa.persistence.test.SQLListenerTestCase;\n \n@@ -33,6 +35,13 @@\n     \n     @Override\n     public void setUp() throws Exception {\n+        // NOTE: This test is only configured to run on DB2 and Derby since \n+        // those DBs handle non-default schemas without additional authority or \n+        // configuration  \n+        setSupportedDatabases(DB2Dictionary.class, DerbyDictionary.class);\n+        if (isTestsDisabled())\n+            return;\n+\n         super.setUp(EntityE.class,DROP_TABLES);\n         assertNotNull(emf);\n         \n@@ -50,37 +59,6 @@ public void createEntityE() {\n         entityE = new EntityE(\"e name\");\n     }\n     \n-    // TODO: temp\n-//    public void testDBCapability() {\n-//        Connection conn = (Connection)em.getConnection();\n-//        try {\n-//            DatabaseMetaData meta = conn.getMetaData();\n-//            System.out.println(\"LC - \" + \n-//                meta.storesLowerCaseIdentifiers());\n-//            System.out.println(\"LCQ - \" + \n-//                meta.storesLowerCaseQuotedIdentifiers());\n-//            System.out.println(\"MC - \" + \n-//                meta.storesMixedCaseIdentifiers());\n-//            System.out.println(\"MCQ - \" + \n-//                meta.storesMixedCaseQuotedIdentifiers());\n-//            System.out.println(\"UC - \" + \n-//                meta.storesUpperCaseIdentifiers());\n-//            System.out.println(\"UCQ - \" + \n-//                meta.storesUpperCaseQuotedIdentifiers());\n-//            \n-//            System.out.println(\"db product name - \" + \n-//                meta.getDatabaseProductName());\n-//            System.out.println(\"db product version - \" + \n-//                meta.getDatabaseProductVersion());\n-//            System.out.println(\"driver name - \" + \n-//                meta.getDriverName());\n-//            System.out.println(\"driver version - \" + \n-//                meta.getDriverVersion());\n-//        } catch (SQLException e) {\n-//            e.printStackTrace();\n-//        }\n-//    }\n-    \n     public void testSeqGen() {\n         if (!supportsNativeSequence) {\n             return;\n@@ -90,11 +68,8 @@ public void testSeqGen() {\n         em.getTransaction().begin();\n         em.persist(entityE);\n         em.getTransaction().commit();\n-        \n-        System.out.println(super.toString(sql));\n-        \n+                \n         int genId = entityE.getId();\n-        System.out.println(\"generated id - \" + genId);\n         em.clear();\n         em.getTransaction().begin();\n         EntityE eA = em.find(EntityE.class, genId);"},{"sha":"91466ba430385cda96540fd9315e8ffb5308ff90","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/TestManualDelimInheritance.java","status":"modified","additions":11,"deletions":6,"changes":17,"blob_url":"https://github.com/apache/openjpa/blob/cafbd559d2b56a9c756e0a5bf9e7a3e643403c25/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/TestManualDelimInheritance.java","raw_url":"https://github.com/apache/openjpa/raw/cafbd559d2b56a9c756e0a5bf9e7a3e643403c25/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/TestManualDelimInheritance.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/TestManualDelimInheritance.java?ref=cafbd559d2b56a9c756e0a5bf9e7a3e643403c25","patch":"@@ -5,7 +5,9 @@\n import javax.persistence.Query;\n \n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.sql.DB2Dictionary;\n import org.apache.openjpa.jdbc.sql.DBDictionary;\n+import org.apache.openjpa.jdbc.sql.DerbyDictionary;\n import org.apache.openjpa.persistence.OpenJPAEntityManager;\n /*\n  * Licensed to the Apache Software Foundation (ASF) under one\n@@ -32,22 +34,25 @@\n     int id = 0;\n     Dog dog;\n     Cat cat;\n-    JDBCConfiguration conf;\n-    DBDictionary dict;\n     \n     @Override\n     public void setUp() throws Exception {\n+        // NOTE: This test is only configured to run on DB2 and Derby since \n+        // those DBs handle non-default schemas without additional authority or \n+        // configuration  \n+        setSupportedDatabases(DB2Dictionary.class, DerbyDictionary.class);\n+        if (isTestsDisabled())\n+            return;\n+\n         super.setUp(\n             org.apache.openjpa.persistence.delimited.identifiers.Animal.class,\n             org.apache.openjpa.persistence.delimited.identifiers.Dog.class,\n-            org.apache.openjpa.persistence.delimited.identifiers.Cat.class);\n+            org.apache.openjpa.persistence.delimited.identifiers.Cat.class,\n+            DROP_TABLES);\n         assertNotNull(emf);\n         \n         em = emf.createEntityManager();\n         assertNotNull(em);\n-        \n-        conf = (JDBCConfiguration) emf.getConfiguration();\n-        dict = conf.getDBDictionaryInstance();\n     }\n     \n     private void createDog(int id) {"},{"sha":"8efcf533d5e9236d99f5eb387c62c80b5d0a485f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/TestManualDelimitedJoinAnnotations.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/cafbd559d2b56a9c756e0a5bf9e7a3e643403c25/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/TestManualDelimitedJoinAnnotations.java","raw_url":"https://github.com/apache/openjpa/raw/cafbd559d2b56a9c756e0a5bf9e7a3e643403c25/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/TestManualDelimitedJoinAnnotations.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/TestManualDelimitedJoinAnnotations.java?ref=cafbd559d2b56a9c756e0a5bf9e7a3e643403c25","patch":"@@ -23,7 +23,9 @@\n import javax.persistence.Query;\n \n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.sql.DB2Dictionary;\n import org.apache.openjpa.jdbc.sql.DBDictionary;\n+import org.apache.openjpa.jdbc.sql.DerbyDictionary;\n import org.apache.openjpa.persistence.OpenJPAEntityManager;\n import org.apache.openjpa.persistence.test.SQLListenerTestCase;\n \n@@ -40,6 +42,13 @@\n     \n     @Override\n     public void setUp() throws Exception {\n+        // NOTE: This test is only configured to run on DB2 and Derby since \n+        // those DBs handle non-default schemas without additional authority or \n+        // configuration  \n+        setSupportedDatabases(DB2Dictionary.class, DerbyDictionary.class);\n+        if (isTestsDisabled())\n+            return;\n+        \n         super.setUp(\n             org.apache.openjpa.persistence.delimited.identifiers.EntityC.class,\n             org.apache.openjpa.persistence.delimited.identifiers.EntityD.class,"},{"sha":"c4a046b73068c105f69a895a2b68f99ceb291c3e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/EntityC.java","status":"added","additions":181,"deletions":0,"changes":181,"blob_url":"https://github.com/apache/openjpa/blob/cafbd559d2b56a9c756e0a5bf9e7a3e643403c25/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/EntityC.java","raw_url":"https://github.com/apache/openjpa/raw/cafbd559d2b56a9c756e0a5bf9e7a3e643403c25/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/EntityC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/EntityC.java?ref=cafbd559d2b56a9c756e0a5bf9e7a3e643403c25","patch":"@@ -0,0 +1,181 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.delimited.identifiers.noschema;\r\n+\r\n+import java.util.Collection;\r\n+import java.util.HashMap;\r\n+import java.util.HashSet;\r\n+import java.util.Map;\r\n+\r\n+import javax.persistence.Column;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.JoinColumn;\r\n+import javax.persistence.JoinTable;\r\n+import javax.persistence.ManyToMany;\r\n+import javax.persistence.MapKeyJoinColumn;\r\n+import javax.persistence.OneToOne;\r\n+import javax.persistence.PrimaryKeyJoinColumn;\r\n+import javax.persistence.SecondaryTable;\r\n+import javax.persistence.Table;\r\n+\r\n+@Entity\r\n+@Table(name=\"\\\"entity c\\\"\")\r\n+@SecondaryTable(name=\"\\\"sec join table\\\"\",\r\n+    pkJoinColumns=@PrimaryKeyJoinColumn(name=\"\\\"entity c\\\"\",\r\n+        referencedColumnName=\"\\\"c id\\\"\"))\r\n+public class EntityC {\r\n+    @Id\r\n+    @Column(name=\"\\\"c id\\\"\")\r\n+    private int id;\r\n+    private String name;\r\n+    \r\n+    @Column(table=\"\\\"sec join table\\\"\")\r\n+    private String secName;\r\n+    \r\n+    @ManyToMany\r\n+    @JoinTable(name=\"\\\"c d\\\"\")\r\n+    private Collection<EntityD> entityDs = new HashSet<EntityD>();\r\n+    \r\n+    @OneToOne\r\n+    @JoinColumn(name=\"\\\"entd2 id\\\"\", referencedColumnName=\"\\\"entityD2 id\\\"\")\r\n+    private EntityD2 entityD2;\r\n+    \r\n+    @ManyToMany\r\n+    @JoinTable(name=\"\\\"map join table\\\"\")\r\n+    @MapKeyJoinColumn(name=\"map_ed3\", referencedColumnName=\"\\\"entityD3 id\\\"\")\r\n+    Map<EntityD3,EntityD4> map = new HashMap<EntityD3,EntityD4>();\r\n+    \r\n+    @ManyToMany\r\n+    @JoinTable(name=\"\\\"map2 join table\\\"\")\r\n+    @MapKeyJoinColumn(name=\"\\\"map ed4\\\"\", \r\n+        referencedColumnName=\"\\\"entityD4 id\\\"\")\r\n+    Map<EntityD4,EntityD3> map2 = new HashMap<EntityD4,EntityD3>();\r\n+    \r\n+    public EntityC() {}\r\n+    \r\n+    public EntityC(int id) {\r\n+        this.id = id;\r\n+    }\r\n+    \r\n+    /**\r\n+     * @return the id\r\n+     */\r\n+    public int getId() {\r\n+        return id;\r\n+    }\r\n+    /**\r\n+     * @param id the id to set\r\n+     */\r\n+    public void setId(int id) {\r\n+        this.id = id;\r\n+    }\r\n+    /**\r\n+     * @return the name\r\n+     */\r\n+    public String getName() {\r\n+        return name;\r\n+    }\r\n+    /**\r\n+     * @param name the name to set\r\n+     */\r\n+    public void setName(String name) {\r\n+        this.name = name;\r\n+    }\r\n+    /**\r\n+     * @return the entityDs\r\n+     */\r\n+    public Collection<EntityD> getEntityDs() {\r\n+        return entityDs;\r\n+    }\r\n+    /**\r\n+     * @param entityDs the entityDs to set\r\n+     */\r\n+    public void setEntityDs(Collection<EntityD> entityDs) {\r\n+        this.entityDs = entityDs;\r\n+    }\r\n+    \r\n+    public void addEntityD(EntityD entityD) {\r\n+        entityDs.add(entityD);\r\n+    }\r\n+\r\n+    /**\r\n+     * @return the entityD2\r\n+     */\r\n+    public EntityD2 getEntityD2() {\r\n+        return entityD2;\r\n+    }\r\n+\r\n+    /**\r\n+     * @param entityD2 the entityD2 to set\r\n+     */\r\n+    public void setEntityD2(EntityD2 entityD2) {\r\n+        this.entityD2 = entityD2;\r\n+    }\r\n+\r\n+    /**\r\n+     * @return the map\r\n+     */\r\n+    public Map<EntityD3, EntityD4> getMap() {\r\n+        return map;\r\n+    }\r\n+\r\n+    /**\r\n+     * @param map the map to set\r\n+     */\r\n+    public void setMap(Map<EntityD3, EntityD4> map) {\r\n+        this.map = map;\r\n+    }\r\n+    \r\n+    public void addMapValues(EntityD3 key, EntityD4 value) {\r\n+        map.put(key, value);\r\n+    }\r\n+\r\n+    /**\r\n+     * @return the map2\r\n+     */\r\n+    public Map<EntityD4, EntityD3> getMap2() {\r\n+        return map2;\r\n+    }\r\n+\r\n+    /**\r\n+     * @param map2 the map2 to set\r\n+     */\r\n+    public void setMap2(Map<EntityD4, EntityD3> map2) {\r\n+        this.map2 = map2;\r\n+    }\r\n+    \r\n+    public void addMap2Values(EntityD4 key, EntityD3 value) {\r\n+        map2.put(key, value);\r\n+    }\r\n+\r\n+    /**\r\n+     * @return the secName\r\n+     */\r\n+    public String getSecName() {\r\n+        return secName;\r\n+    }\r\n+\r\n+    /**\r\n+     * @param secName the secName to set\r\n+     */\r\n+    public void setSecName(String secName) {\r\n+        this.secName = secName;\r\n+    }\r\n+}\r"},{"sha":"8428a346abbee42989fdce7a7e743f46d3055231","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/EntityD.java","status":"added","additions":89,"deletions":0,"changes":89,"blob_url":"https://github.com/apache/openjpa/blob/cafbd559d2b56a9c756e0a5bf9e7a3e643403c25/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/EntityD.java","raw_url":"https://github.com/apache/openjpa/raw/cafbd559d2b56a9c756e0a5bf9e7a3e643403c25/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/EntityD.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/EntityD.java?ref=cafbd559d2b56a9c756e0a5bf9e7a3e643403c25","patch":"@@ -0,0 +1,89 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.delimited.identifiers.noschema;\r\n+\r\n+import java.util.Collection;\r\n+import java.util.HashSet;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.ManyToMany;\r\n+import javax.persistence.Table;\r\n+\r\n+@Entity\r\n+@Table(name=\"\\\"entity d\\\"\")\r\n+public class EntityD {\r\n+    @Id\r\n+    private int id;\r\n+    private String name;\r\n+    @ManyToMany(mappedBy=\"entityDs\")\r\n+    private Collection<EntityC> entityCs = new HashSet<EntityC>();\r\n+    \r\n+    public EntityD() {}\r\n+    \r\n+    public EntityD(int id) {\r\n+        this.id = id;\r\n+    }\r\n+\r\n+    /**\r\n+     * @return the id\r\n+     */\r\n+    public int getId() {\r\n+        return id;\r\n+    }\r\n+\r\n+    /**\r\n+     * @param id the id to set\r\n+     */\r\n+    public void setId(int id) {\r\n+        this.id = id;\r\n+    }\r\n+\r\n+    /**\r\n+     * @return the name\r\n+     */\r\n+    public String getName() {\r\n+        return name;\r\n+    }\r\n+\r\n+    /**\r\n+     * @param name the name to set\r\n+     */\r\n+    public void setName(String name) {\r\n+        this.name = name;\r\n+    }\r\n+\r\n+    /**\r\n+     * @return the entityCs\r\n+     */\r\n+    public Collection<EntityC> getEntityCs() {\r\n+        return entityCs;\r\n+    }\r\n+\r\n+    /**\r\n+     * @param entityCs the entityCs to set\r\n+     */\r\n+    public void setEntityCs(Collection<EntityC> entityCs) {\r\n+        this.entityCs = entityCs;\r\n+    }\r\n+    \r\n+    public void addEntityC(EntityC entityC) {\r\n+        entityCs.add(entityC);\r\n+    }\r\n+}\r"},{"sha":"7289be54975175e206f14347669d0c4a96757776","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/EntityD2.java","status":"added","additions":87,"deletions":0,"changes":87,"blob_url":"https://github.com/apache/openjpa/blob/cafbd559d2b56a9c756e0a5bf9e7a3e643403c25/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/EntityD2.java","raw_url":"https://github.com/apache/openjpa/raw/cafbd559d2b56a9c756e0a5bf9e7a3e643403c25/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/EntityD2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/EntityD2.java?ref=cafbd559d2b56a9c756e0a5bf9e7a3e643403c25","patch":"@@ -0,0 +1,87 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.delimited.identifiers.noschema;\r\n+\r\n+import javax.persistence.Column;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.OneToOne;\r\n+import javax.persistence.PrimaryKeyJoinColumn;\r\n+import javax.persistence.Table;\r\n+\r\n+@Entity\r\n+@Table(name=\"\\\"entity d2\\\"\")\r\n+public class EntityD2 {\r\n+    @Id\r\n+    @Column(name=\"\\\"entityD2 id\\\"\")\r\n+    private int id;\r\n+    private String name;\r\n+    \r\n+    @OneToOne\r\n+    @PrimaryKeyJoinColumn\r\n+    private EntityD3 entityD3;\r\n+    \r\n+    public EntityD2() {}\r\n+    \r\n+    public EntityD2(int id) {\r\n+        this.id = id;\r\n+    }\r\n+\r\n+    /**\r\n+     * @return the id\r\n+     */\r\n+    public int getId() {\r\n+        return id;\r\n+    }\r\n+\r\n+    /**\r\n+     * @param id the id to set\r\n+     */\r\n+    public void setId(int id) {\r\n+        this.id = id;\r\n+    }\r\n+\r\n+    /**\r\n+     * @return the name\r\n+     */\r\n+    public String getName() {\r\n+        return name;\r\n+    }\r\n+\r\n+    /**\r\n+     * @param name the name to set\r\n+     */\r\n+    public void setName(String name) {\r\n+        this.name = name;\r\n+    }\r\n+\r\n+    /**\r\n+     * @return the entityD3\r\n+     */\r\n+    public EntityD3 getEntityD3() {\r\n+        return entityD3;\r\n+    }\r\n+\r\n+    /**\r\n+     * @param entityD3 the entityD3 to set\r\n+     */\r\n+    public void setEntityD3(EntityD3 entityD3) {\r\n+        this.entityD3 = entityD3;\r\n+    }\r\n+}\r"},{"sha":"34ec59067fe3297d874dc563e560bd9b6b054b59","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/EntityD3.java","status":"added","additions":65,"deletions":0,"changes":65,"blob_url":"https://github.com/apache/openjpa/blob/cafbd559d2b56a9c756e0a5bf9e7a3e643403c25/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/EntityD3.java","raw_url":"https://github.com/apache/openjpa/raw/cafbd559d2b56a9c756e0a5bf9e7a3e643403c25/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/EntityD3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/EntityD3.java?ref=cafbd559d2b56a9c756e0a5bf9e7a3e643403c25","patch":"@@ -0,0 +1,65 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.delimited.identifiers.noschema;\r\n+\r\n+import javax.persistence.Column;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.Table;\r\n+\r\n+@Entity\r\n+@Table(name=\"\\\"entity d3\\\"\")\r\n+public class EntityD3 {\r\n+    @Id\r\n+    @Column(name=\"\\\"entityD3 id\\\"\")\r\n+    int id;\r\n+    String name;\r\n+    \r\n+    public EntityD3() {}\r\n+    \r\n+    public EntityD3(int id) {\r\n+        this.id = id;\r\n+    }\r\n+    \r\n+    /**\r\n+     * @return the id\r\n+     */\r\n+    public int getId() {\r\n+        return id;\r\n+    }\r\n+    /**\r\n+     * @param id the id to set\r\n+     */\r\n+    public void setId(int id) {\r\n+        this.id = id;\r\n+    }\r\n+    /**\r\n+     * @return the name\r\n+     */\r\n+    public String getName() {\r\n+        return name;\r\n+    }\r\n+    /**\r\n+     * @param name the name to set\r\n+     */\r\n+    public void setName(String name) {\r\n+        this.name = name;\r\n+    }\r\n+\r\n+}\r"},{"sha":"9fd8769995be55096838e1898be7a63f6d612960","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/EntityD4.java","status":"added","additions":65,"deletions":0,"changes":65,"blob_url":"https://github.com/apache/openjpa/blob/cafbd559d2b56a9c756e0a5bf9e7a3e643403c25/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/EntityD4.java","raw_url":"https://github.com/apache/openjpa/raw/cafbd559d2b56a9c756e0a5bf9e7a3e643403c25/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/EntityD4.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/EntityD4.java?ref=cafbd559d2b56a9c756e0a5bf9e7a3e643403c25","patch":"@@ -0,0 +1,65 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.delimited.identifiers.noschema;\r\n+\r\n+import javax.persistence.Column;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.Table;\r\n+\r\n+@Entity\r\n+@Table(name=\"\\\"entity d4\\\"\")\r\n+public class EntityD4 {\r\n+    @Id\r\n+    @Column(name=\"\\\"entityD4 id\\\"\")\r\n+    int id;\r\n+    String name;\r\n+    \r\n+    public EntityD4() {}\r\n+    \r\n+    public EntityD4(int id) {\r\n+        this.id = id;\r\n+    }\r\n+    \r\n+    /**\r\n+     * @return the id\r\n+     */\r\n+    public int getId() {\r\n+        return id;\r\n+    }\r\n+    /**\r\n+     * @param id the id to set\r\n+     */\r\n+    public void setId(int id) {\r\n+        this.id = id;\r\n+    }\r\n+    /**\r\n+     * @return the name\r\n+     */\r\n+    public String getName() {\r\n+        return name;\r\n+    }\r\n+    /**\r\n+     * @param name the name to set\r\n+     */\r\n+    public void setName(String name) {\r\n+        this.name = name;\r\n+    }\r\n+\r\n+}\r"},{"sha":"1ab2a715340ed2db1074ea4824fae9afcfc871d0","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/EntityE.java","status":"added","additions":69,"deletions":0,"changes":69,"blob_url":"https://github.com/apache/openjpa/blob/cafbd559d2b56a9c756e0a5bf9e7a3e643403c25/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/EntityE.java","raw_url":"https://github.com/apache/openjpa/raw/cafbd559d2b56a9c756e0a5bf9e7a3e643403c25/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/EntityE.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/EntityE.java?ref=cafbd559d2b56a9c756e0a5bf9e7a3e643403c25","patch":"@@ -0,0 +1,69 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.delimited.identifiers.noschema;\r\n+\r\n+import javax.persistence.Column;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.GenerationType;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.SequenceGenerator;\r\n+import javax.persistence.Table;\r\n+\r\n+@Entity\r\n+@Table(name=\"\\\"primary entityE\\\"\")\r\n+public class EntityE {\r\n+    @Id\r\n+    @SequenceGenerator(name=\"entityE_seq_gen_name\", \r\n+        sequenceName=\"\\\"entityE_seq_gen\\\"\")\r\n+    @GeneratedValue(strategy=GenerationType.SEQUENCE, \r\n+        generator=\"entityE_seq_gen_name\")\r\n+    private int id;\r\n+    @Column(name=\"e_name\")\r\n+    private String name;\r\n+    \r\n+    public EntityE(String name) {\r\n+        this.name = name;\r\n+    }\r\n+    \r\n+    /**\r\n+     * @return the id\r\n+     */\r\n+    public int getId() {\r\n+        return id;\r\n+    }\r\n+    /**\r\n+     * @param id the id to set\r\n+     */\r\n+    public void setId(int id) {\r\n+        this.id = id;\r\n+    }\r\n+    /**\r\n+     * @return the name\r\n+     */\r\n+    public String getName() {\r\n+        return name;\r\n+    }\r\n+    /**\r\n+     * @param name the name to set\r\n+     */\r\n+    public void setName(String name) {\r\n+        this.name = name;\r\n+    }\r\n+}\r"},{"sha":"92b0ab4d07ca7aa56cd52e80f9292dda99aec2c5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/EntityF.java","status":"added","additions":212,"deletions":0,"changes":212,"blob_url":"https://github.com/apache/openjpa/blob/cafbd559d2b56a9c756e0a5bf9e7a3e643403c25/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/EntityF.java","raw_url":"https://github.com/apache/openjpa/raw/cafbd559d2b56a9c756e0a5bf9e7a3e643403c25/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/EntityF.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/EntityF.java?ref=cafbd559d2b56a9c756e0a5bf9e7a3e643403c25","patch":"@@ -0,0 +1,212 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.delimited.identifiers.noschema;\r\n+\r\n+import java.util.HashMap;\r\n+import java.util.HashSet;\r\n+import java.util.Map;\r\n+import java.util.Set;\r\n+\r\n+import javax.persistence.CollectionTable;\r\n+import javax.persistence.Column;\r\n+import javax.persistence.ElementCollection;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.GenerationType;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.MapKeyColumn;\r\n+import javax.persistence.SecondaryTable;\r\n+import javax.persistence.Table;\r\n+import javax.persistence.TableGenerator;\r\n+import javax.persistence.UniqueConstraint;\r\n+\r\n+@Entity\r\n+@Table(name=\"\\\"primary entityF\\\"\",\r\n+    uniqueConstraints=\r\n+        @UniqueConstraint(columnNames={\"\\\"f name\\\"\", \"f_nonDelimName\"}))\r\n+@SecondaryTable(name=\"\\\"secondary entityF\\\"\",\r\n+    uniqueConstraints=\r\n+        @UniqueConstraint(name=\"\\\"sec_unq\\\"\", \r\n+            columnNames={\"\\\"secondary name\\\"\"}))         \r\n+public class EntityF {\r\n+    @TableGenerator(name = \"f_id_gen\", table = \"\\\"f_id_gen\\\"\", \r\n+        pkColumnName = \"\\\"gen_pk\\\"\", valueColumnName = \"\\\"gen_value\\\"\")\r\n+    @GeneratedValue(strategy = GenerationType.TABLE, generator = \"f_id_gen\")\r\n+    @Id\r\n+    private int id;\r\n+    // Note: Delimited columnDefinition is not supported on some DBs\r\n+    // TODO: copy into a separate entity and conditionally run a different test\r\n+    @Column(name=\"\\\"f name\\\"\", columnDefinition=\"varchar(15)\")\r\n+    private String name;\r\n+    @Column(name=\"f_nonDelimName\")\r\n+    private String nonDelimName;\r\n+    @Column(name=\"\\\"secondary name\\\"\", table=\"\\\"secondary entityF\\\"\")\r\n+    private String secName;\r\n+    \r\n+    @ElementCollection\r\n+    // CollectionTable with default name generation\r\n+    @CollectionTable\r\n+    private Set<String> collectionSet = new HashSet<String>();\r\n+    \r\n+    @ElementCollection\r\n+    @CollectionTable(name=\"\\\"collectionDelimSet\\\"\")\r\n+    private Set<String> collectionDelimSet = new HashSet<String>();\r\n+    \r\n+    @ElementCollection\r\n+    // MapKeyColumn with default name generation\r\n+    @MapKeyColumn\r\n+    private Map<String, String> collectionMap = new HashMap<String, String>();\r\n+    \r\n+    @ElementCollection\r\n+    // Note: Delimited column definition is not supported on some DBs, so\r\n+    // it is not delimited here\r\n+    // TODO: create a separate entity and conditionally run the test on a supported DB\r\n+    @MapKeyColumn(name=\"\\\"mapKey\\\"\", columnDefinition=\"varchar(20)\", table=\"\\\"delim collection map\\\"\")\r\n+    private Map<String, String> delimCollectionMap = \r\n+        new HashMap<String, String>();\r\n+    \r\n+    public EntityF(String name) {\r\n+        this.name = name;\r\n+    }\r\n+    \r\n+    /**\r\n+     * @return the id\r\n+     */\r\n+    public int getId() {\r\n+        return id;\r\n+    }\r\n+    /**\r\n+     * @param id the id to set\r\n+     */\r\n+    public void setId(int id) {\r\n+        this.id = id;\r\n+    }\r\n+    /**\r\n+     * @return the name\r\n+     */\r\n+    public String getName() {\r\n+        return name;\r\n+    }\r\n+    /**\r\n+     * @param name the name to set\r\n+     */\r\n+    public void setName(String name) {\r\n+        this.name = name;\r\n+    }\r\n+\r\n+    /**\r\n+     * @return the nonDelimName\r\n+     */\r\n+    public String getNonDelimName() {\r\n+        return nonDelimName;\r\n+    }\r\n+\r\n+    /**\r\n+     * @param nonDelimName the nonDelimName to set\r\n+     */\r\n+    public void setNonDelimName(String nonDelimName) {\r\n+        this.nonDelimName = nonDelimName;\r\n+    }\r\n+\r\n+    /**\r\n+     * @return the secName\r\n+     */\r\n+    public String getSecName() {\r\n+        return secName;\r\n+    }\r\n+\r\n+    /**\r\n+     * @param secName the secName to set\r\n+     */\r\n+    public void setSecName(String secName) {\r\n+        this.secName = secName;\r\n+    }\r\n+\r\n+    /**\r\n+     * @return the collectionSet\r\n+     */\r\n+    public Set<String> getCollectionSet() {\r\n+        return collectionSet;\r\n+    }\r\n+\r\n+    /**\r\n+     * @param collectionSet the collectionSet to set\r\n+     */\r\n+    public void setCollectionSet(Set<String> collectionSet) {\r\n+        this.collectionSet = collectionSet;\r\n+    }\r\n+    \r\n+    public void addCollectionSet(String item) {\r\n+        collectionSet.add(item);\r\n+    }\r\n+\r\n+    /**\r\n+     * @return the collectionNamedSet\r\n+     */\r\n+    public Set<String> getCollectionDelimSet() {\r\n+        return collectionDelimSet;\r\n+    }\r\n+\r\n+    /**\r\n+     * @param collectionNamedSet the collectionNamedSet to set\r\n+     */\r\n+    public void setCollectionDelimSet(Set<String> collectionDelimSet) {\r\n+        this.collectionDelimSet = collectionDelimSet;\r\n+    } \r\n+    \r\n+    public void addCollectionDelimSet(String item) {\r\n+        this.collectionDelimSet.add(item);\r\n+    }\r\n+\r\n+    /**\r\n+     * @return the collectionMap\r\n+     */\r\n+    public Map<String, String> getCollectionMap() {\r\n+        return collectionMap;\r\n+    }\r\n+\r\n+    /**\r\n+     * @param collectionMap the collectionMap to set\r\n+     */\r\n+    public void setCollectionMap(Map<String, String> collectionMap) {\r\n+        this.collectionMap = collectionMap;\r\n+    }\r\n+\r\n+    public void addCollectionMap(String key, String value) {\r\n+        collectionMap.put(key, value);\r\n+    }\r\n+\r\n+    /**\r\n+     * @return the delimCollectionMap\r\n+     */\r\n+    public Map<String, String> getDelimCollectionMap() {\r\n+        return delimCollectionMap;\r\n+    }\r\n+\r\n+    /**\r\n+     * @param delimCollectionMap the delimCollectionMap to set\r\n+     */\r\n+    public void setDelimCollectionMap(Map<String, String> delimCollectionMap) {\r\n+        this.delimCollectionMap = delimCollectionMap;\r\n+    }\r\n+    \r\n+    public void addDelimCollectionMap(String key, String value) {\r\n+        delimCollectionMap.put(key, value);\r\n+    }\r\n+}\r"},{"sha":"82678cc7f922cd3aa994444d8d7a93669a9a8fe9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/EntityG.java","status":"added","additions":68,"deletions":0,"changes":68,"blob_url":"https://github.com/apache/openjpa/blob/cafbd559d2b56a9c756e0a5bf9e7a3e643403c25/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/EntityG.java","raw_url":"https://github.com/apache/openjpa/raw/cafbd559d2b56a9c756e0a5bf9e7a3e643403c25/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/EntityG.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/EntityG.java?ref=cafbd559d2b56a9c756e0a5bf9e7a3e643403c25","patch":"@@ -0,0 +1,68 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.delimited.identifiers.noschema;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.Table;\r\n+\r\n+@Entity\r\n+@Table(name=\"\\\"entity d4\\\"\")\r\n+public class EntityG {\r\n+    @Id\r\n+    int id;\r\n+    String name;\r\n+    \r\n+    public EntityG() {}\r\n+    \r\n+    public EntityG(int id) {\r\n+        this.id = id;\r\n+    }\r\n+    \r\n+    public EntityG(int id, String name) {\r\n+        this.id = id;\r\n+        this.name = name;\r\n+    }\r\n+    \r\n+    /**\r\n+     * @return the id\r\n+     */\r\n+    public int getId() {\r\n+        return id;\r\n+    }\r\n+    /**\r\n+     * @param id the id to set\r\n+     */\r\n+    public void setId(int id) {\r\n+        this.id = id;\r\n+    }\r\n+    /**\r\n+     * @return the name\r\n+     */\r\n+    public String getName() {\r\n+        return name;\r\n+    }\r\n+    /**\r\n+     * @param name the name to set\r\n+     */\r\n+    public void setName(String name) {\r\n+        this.name = name;\r\n+    }\r\n+\r\n+}\r"},{"sha":"1f3c9f8e638313b34c19070202338d49d0bd619f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/TestNoSchemaManualDelimId.java","status":"added","additions":128,"deletions":0,"changes":128,"blob_url":"https://github.com/apache/openjpa/blob/cafbd559d2b56a9c756e0a5bf9e7a3e643403c25/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/TestNoSchemaManualDelimId.java","raw_url":"https://github.com/apache/openjpa/raw/cafbd559d2b56a9c756e0a5bf9e7a3e643403c25/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/TestNoSchemaManualDelimId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/TestNoSchemaManualDelimId.java?ref=cafbd559d2b56a9c756e0a5bf9e7a3e643403c25","patch":"@@ -0,0 +1,128 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.delimited.identifiers.noschema;\r\n+\r\n+import java.util.List;\r\n+\r\n+import javax.persistence.Query;\r\n+\r\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n+import org.apache.openjpa.jdbc.sql.DB2Dictionary;\r\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\r\n+import org.apache.openjpa.jdbc.sql.DerbyDictionary;\r\n+import org.apache.openjpa.jdbc.sql.MySQLDictionary;\r\n+import org.apache.openjpa.jdbc.sql.OracleDictionary;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+import org.apache.openjpa.persistence.test.SQLListenerTestCase;\r\n+\r\n+public class TestNoSchemaManualDelimId extends SQLListenerTestCase {\r\n+    OpenJPAEntityManager em;\r\n+    EntityF entityF;\r\n+    \r\n+    @Override\r\n+    public void setUp() throws Exception {\r\n+        \r\n+        // TODO: Delimiter support is currently limited to database that use\r\n+        // double quote as a delimiter.\r\n+        setUnsupportedDatabases(MySQLDictionary.class);\r\n+        if (isTestsDisabled())\r\n+            return;\r\n+        \r\n+        super.setUp(\r\n+            org.apache.openjpa.persistence.delimited.identifiers.noschema.EntityF.class,\r\n+            DROP_TABLES);\r\n+        assertNotNull(emf);\r\n+\r\n+        em = emf.createEntityManager();\r\n+        assertNotNull(em);\r\n+    }\r\n+\r\n+    public void createEntityF() {\r\n+        entityF = new EntityF(\"fName\");\r\n+        entityF.setNonDelimName(\"fNonDelimName\");\r\n+        entityF.setSecName(\"sec name\");\r\n+        entityF.addCollectionSet(\"xxx\");\r\n+        entityF.addCollectionSet(\"yyy\");\r\n+        entityF.addCollectionDelimSet(\"aaa\");\r\n+        entityF.addCollectionDelimSet(\"bbb\");\r\n+        entityF.addCollectionMap(\"aaa\", \"xxx\");\r\n+        entityF.addCollectionMap(\"bbb\", \"yyy\");\r\n+        entityF.addDelimCollectionMap(\"www\", \"xxx\");\r\n+        entityF.addDelimCollectionMap(\"yyy\", \"zzz\");\r\n+    }\r\n+    \r\n+    public void testCreateF() {\r\n+        createEntityF();\r\n+        \r\n+        em.getTransaction().begin();\r\n+        em.persist(entityF);\r\n+        em.getTransaction().commit();\r\n+        \r\n+        runQueries();\r\n+        \r\n+    }\r\n+    \r\n+    // Run a second time to re-create a situation that initially caused a problem when running this\r\n+    // test consecutive times.\r\n+    public void testCreateF2() {\r\n+        createEntityF();\r\n+        \r\n+        em.getTransaction().begin();\r\n+        em.persist(entityF);\r\n+        em.getTransaction().commit();\r\n+    }\r\n+    \r\n+    private void runQueries() {\r\n+        em.clear();\r\n+        queryOnEntityOnly();\r\n+        em.clear();\r\n+        queryOnColumnValue();\r\n+        em.clear();\r\n+        queryCollection();\r\n+    }\r\n+    \r\n+    private void queryOnEntityOnly() {\r\n+        String query =\r\n+            \"SELECT DISTINCT f \" +\r\n+            \"FROM EntityF f\";\r\n+        Query q = em.createQuery(query);\r\n+        List<EntityF> results = (List<EntityF>)q.getResultList();\r\n+        assertEquals(1,results.size());\r\n+    }\r\n+    \r\n+    private void queryOnColumnValue() {\r\n+        String query =\r\n+            \"SELECT DISTINCT f \" +\r\n+            \"FROM EntityF f \" +\r\n+            \"WHERE f.name = 'fName'\";\r\n+        Query q = em.createQuery(query);\r\n+        List<EntityF> results = (List<EntityF>)q.getResultList();\r\n+        assertEquals(1,results.size());\r\n+    }\r\n+    \r\n+    private void queryCollection() {\r\n+        String query =\r\n+            \"SELECT DISTINCT f \" +\r\n+            \"FROM EntityF f, IN(f.collectionDelimSet) s \" +\r\n+            \"WHERE s = 'aaa'\";\r\n+        Query q = em.createQuery(query);\r\n+        List<EntityF> results = (List<EntityF>)q.getResultList();\r\n+        assertEquals(1,results.size());\r\n+    }\r\n+}\r"},{"sha":"d4ea256a7c87606008786f580b925d8b7d577311","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/TestNoSchemaManualDelimIdSeqGen.java","status":"added","additions":113,"deletions":0,"changes":113,"blob_url":"https://github.com/apache/openjpa/blob/cafbd559d2b56a9c756e0a5bf9e7a3e643403c25/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/TestNoSchemaManualDelimIdSeqGen.java","raw_url":"https://github.com/apache/openjpa/raw/cafbd559d2b56a9c756e0a5bf9e7a3e643403c25/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/TestNoSchemaManualDelimIdSeqGen.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/TestNoSchemaManualDelimIdSeqGen.java?ref=cafbd559d2b56a9c756e0a5bf9e7a3e643403c25","patch":"@@ -0,0 +1,113 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.delimited.identifiers.noschema;\r\n+\r\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\r\n+import org.apache.openjpa.jdbc.sql.MySQLDictionary;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+import org.apache.openjpa.persistence.test.SQLListenerTestCase;\r\n+\r\n+public class TestNoSchemaManualDelimIdSeqGen extends SQLListenerTestCase {\r\n+    OpenJPAEntityManager em;\r\n+    JDBCConfiguration conf;\r\n+    DBDictionary dict;\r\n+    boolean supportsNativeSequence = false;\r\n+    \r\n+    EntityE entityE;\r\n+    \r\n+    @Override\r\n+    public void setUp() throws Exception {\r\n+\r\n+        // TODO: Delimiter support is limited to \r\n+        setUnsupportedDatabases(MySQLDictionary.class);\r\n+        if (isTestsDisabled())\r\n+            return;\r\n+        \r\n+        super.setUp(EntityE.class,DROP_TABLES);\r\n+        assertNotNull(emf);\r\n+        \r\n+        conf = (JDBCConfiguration) emf.getConfiguration();\r\n+        dict = conf.getDBDictionaryInstance();\r\n+        supportsNativeSequence = dict.nextSequenceQuery != null;\r\n+        \r\n+        if (supportsNativeSequence) {\r\n+            em = emf.createEntityManager();\r\n+            assertNotNull(em);\r\n+        }\r\n+    }\r\n+    \r\n+    public void createEntityE() {\r\n+        entityE = new EntityE(\"e name\");\r\n+    }\r\n+    \r\n+    // TODO: temp\r\n+//    public void testDBCapability() {\r\n+//        Connection conn = (Connection)em.getConnection();\r\n+//        try {\r\n+//            DatabaseMetaData meta = conn.getMetaData();\r\n+//            System.out.println(\"LC - \" + \r\n+//                meta.storesLowerCaseIdentifiers());\r\n+//            System.out.println(\"LCQ - \" + \r\n+//                meta.storesLowerCaseQuotedIdentifiers());\r\n+//            System.out.println(\"MC - \" + \r\n+//                meta.storesMixedCaseIdentifiers());\r\n+//            System.out.println(\"MCQ - \" + \r\n+//                meta.storesMixedCaseQuotedIdentifiers());\r\n+//            System.out.println(\"UC - \" + \r\n+//                meta.storesUpperCaseIdentifiers());\r\n+//            System.out.println(\"UCQ - \" + \r\n+//                meta.storesUpperCaseQuotedIdentifiers());\r\n+//            \r\n+//            System.out.println(\"db product name - \" + \r\n+//                meta.getDatabaseProductName());\r\n+//            System.out.println(\"db product version - \" + \r\n+//                meta.getDatabaseProductVersion());\r\n+//            System.out.println(\"driver name - \" + \r\n+//                meta.getDriverName());\r\n+//            System.out.println(\"driver version - \" + \r\n+//                meta.getDriverVersion());\r\n+//        } catch (SQLException e) {\r\n+//            e.printStackTrace();\r\n+//        }\r\n+//    }\r\n+    \r\n+    public void testSeqGen() {\r\n+        if (!supportsNativeSequence) {\r\n+            return;\r\n+        }\r\n+        createEntityE();\r\n+        \r\n+        em.getTransaction().begin();\r\n+        em.persist(entityE);\r\n+        em.getTransaction().commit();\r\n+        \r\n+        System.out.println(super.toString(sql));\r\n+        \r\n+        int genId = entityE.getId();\r\n+        System.out.println(\"generated id - \" + genId);\r\n+        em.clear();\r\n+        em.getTransaction().begin();\r\n+        EntityE eA = em.find(EntityE.class, genId);\r\n+        assertEquals(\"e name\", eA.getName());\r\n+        \r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+    }\r\n+}\r"},{"sha":"053464e2044325c972b5a4524c3edffbf014f0b4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/TestNoSchemaManualDelimInheritance.java","status":"added","additions":120,"deletions":0,"changes":120,"blob_url":"https://github.com/apache/openjpa/blob/cafbd559d2b56a9c756e0a5bf9e7a3e643403c25/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/TestNoSchemaManualDelimInheritance.java","raw_url":"https://github.com/apache/openjpa/raw/cafbd559d2b56a9c756e0a5bf9e7a3e643403c25/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/TestNoSchemaManualDelimInheritance.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/TestNoSchemaManualDelimInheritance.java?ref=cafbd559d2b56a9c756e0a5bf9e7a3e643403c25","patch":"@@ -0,0 +1,120 @@\n+package org.apache.openjpa.persistence.delimited.identifiers.noschema;\r\n+\r\n+import java.util.List;\r\n+\r\n+import javax.persistence.Query;\r\n+\r\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\r\n+import org.apache.openjpa.jdbc.sql.MySQLDictionary;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+import org.apache.openjpa.persistence.delimited.identifiers.Animal;\r\n+import org.apache.openjpa.persistence.delimited.identifiers.Cat;\r\n+import org.apache.openjpa.persistence.delimited.identifiers.Dog;\r\n+import org.apache.openjpa.persistence.test.DatabasePlatform;\r\n+import org.apache.openjpa.persistence.test.SQLListenerTestCase;\r\n+\r\n+@DatabasePlatform(value=\"\")\r\n+public class TestNoSchemaManualDelimInheritance extends SQLListenerTestCase {\r\n+    OpenJPAEntityManager em;\r\n+    int id = 0;\r\n+    Dog dog;\r\n+    Cat cat;\r\n+    JDBCConfiguration conf;\r\n+    DBDictionary dict;\r\n+    \r\n+    @Override\r\n+    public void setUp() throws Exception {\r\n+        \r\n+        // TODO: Delimiter support is currently limited to database that use\r\n+        // double quote as a delimiter.\r\n+        setUnsupportedDatabases(MySQLDictionary.class);\r\n+        if (isTestsDisabled())\r\n+            return;\r\n+\r\n+        super.setUp(\r\n+            org.apache.openjpa.persistence.delimited.identifiers.Animal.class,\r\n+            org.apache.openjpa.persistence.delimited.identifiers.Dog.class,\r\n+            org.apache.openjpa.persistence.delimited.identifiers.Cat.class,\r\n+            DROP_TABLES);\r\n+        assertNotNull(emf);\r\n+        \r\n+        em = emf.createEntityManager();\r\n+        assertNotNull(em);\r\n+        \r\n+        conf = (JDBCConfiguration) emf.getConfiguration();\r\n+        dict = conf.getDBDictionaryInstance();\r\n+    }\r\n+    \r\n+    private void createDog(int id) {\r\n+        dog = new Dog(id);\r\n+        dog.setName(\"Spot\");\r\n+        dog.setType(\"dog\");\r\n+    }\r\n+    \r\n+    private void createCat(int id) {\r\n+        cat = new Cat(id);\r\n+        cat.setName(\"Puff\");\r\n+        cat.setType(\"cat\");\r\n+    }\r\n+    \r\n+    public void testCreate() {\r\n+        id++;\r\n+        createDog(id);\r\n+        id++;\r\n+        createCat(id);\r\n+        \r\n+        em.getTransaction().begin();\r\n+        em.persist(dog);\r\n+        em.persist(cat);\r\n+        em.getTransaction().commit();\r\n+        \r\n+        runQueries();\r\n+    }\r\n+    \r\n+    private void runQueries() {\r\n+        em.clear();\r\n+        queryCat();\r\n+        em.clear();\r\n+        queryDog();\r\n+    }\r\n+    \r\n+    private void queryCat() {\r\n+        String query =\r\n+            \"SELECT DISTINCT a \" +\r\n+            \"FROM Animal a \" +\r\n+            \"WHERE a.type = 'cat'\";\r\n+        Query q = em.createQuery(query);\r\n+        List<Animal> results = (List<Animal>)q.getResultList();\r\n+        assertEquals(1,results.size());\r\n+    }\r\n+    \r\n+    // Use native query\r\n+    private void queryDog() {\r\n+        String query = \r\n+            \"SELECT * \" +\r\n+            \"FROM \\\"Animal\\\" a \" +\r\n+            \"WHERE a.\\\"discr col\\\" = 'Dog'\";\r\n+        Query q = em.createNativeQuery(query);\r\n+        List<Animal> results = (List<Animal>)q.getResultList();\r\n+        assertEquals(1,results.size());\r\n+    }\r\n+}\r"},{"sha":"cb4c05fcc077c0854de6eece83a307148e8d6efd","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/TestNoSchemaManualDelimitedJoinAnnotations.java","status":"added","additions":163,"deletions":0,"changes":163,"blob_url":"https://github.com/apache/openjpa/blob/cafbd559d2b56a9c756e0a5bf9e7a3e643403c25/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/TestNoSchemaManualDelimitedJoinAnnotations.java","raw_url":"https://github.com/apache/openjpa/raw/cafbd559d2b56a9c756e0a5bf9e7a3e643403c25/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/TestNoSchemaManualDelimitedJoinAnnotations.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/TestNoSchemaManualDelimitedJoinAnnotations.java?ref=cafbd559d2b56a9c756e0a5bf9e7a3e643403c25","patch":"@@ -0,0 +1,163 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.delimited.identifiers.noschema;\r\n+\r\n+import java.util.List;\r\n+\r\n+import javax.persistence.Query;\r\n+\r\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\r\n+import org.apache.openjpa.jdbc.sql.MySQLDictionary;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+import org.apache.openjpa.persistence.test.SQLListenerTestCase;\r\n+\r\n+public class TestNoSchemaManualDelimitedJoinAnnotations extends SQLListenerTestCase {\r\n+    OpenJPAEntityManager em;\r\n+    int id = 0;\r\n+    EntityC entityC;\r\n+    EntityD entityD;\r\n+    EntityD2 entityD2;\r\n+    EntityD3 entityD3;\r\n+    EntityD4 entityD4;\r\n+    JDBCConfiguration conf;\r\n+    DBDictionary dict;\r\n+    \r\n+    @Override\r\n+    public void setUp() throws Exception {\r\n+        \r\n+        // TODO: Delimiter support is currently limited to database that use\r\n+        // double quote as a delimiter.\r\n+        setUnsupportedDatabases(MySQLDictionary.class);\r\n+        if (isTestsDisabled())\r\n+            return;\r\n+\r\n+        super.setUp(\r\n+            org.apache.openjpa.persistence.delimited.identifiers.noschema.EntityC.class,\r\n+            org.apache.openjpa.persistence.delimited.identifiers.noschema.EntityD.class,\r\n+            org.apache.openjpa.persistence.delimited.identifiers.noschema.EntityD2.class,\r\n+            org.apache.openjpa.persistence.delimited.identifiers.noschema.EntityD3.class,\r\n+            org.apache.openjpa.persistence.delimited.identifiers.noschema.EntityD4.class,\r\n+            DROP_TABLES);\r\n+        assertNotNull(emf);\r\n+        \r\n+        em = emf.createEntityManager();\r\n+        assertNotNull(em);\r\n+        \r\n+        conf = (JDBCConfiguration) emf.getConfiguration();\r\n+        dict = conf.getDBDictionaryInstance();\r\n+    }\r\n+    \r\n+    private void createCandD(int id) {\r\n+        entityC = new EntityC(id);\r\n+        entityC.setName(\"ec\");\r\n+        entityC.setSecName(\"secName1\");\r\n+        \r\n+        entityD = new EntityD(id);\r\n+        entityD.setName(\"ed\");\r\n+        \r\n+        entityD2 = new EntityD2(id);\r\n+        entityD2.setName(\"ed2\");\r\n+        \r\n+        entityD3 = new EntityD3(id);\r\n+        entityD3.setName(\"ed3\");\r\n+        \r\n+        entityD4 = new EntityD4(id);\r\n+        entityD4.setName(\"ed4\");\r\n+        \r\n+        entityC.addEntityD(entityD);\r\n+        entityD.addEntityC(entityC);\r\n+        \r\n+        entityC.setEntityD2(entityD2);\r\n+        \r\n+        entityC.addMapValues(entityD3, entityD4);\r\n+        entityC.addMap2Values(entityD4, entityD3);\r\n+        \r\n+        entityD2.setEntityD3(entityD3);\r\n+    }\r\n+    \r\n+    public void testCreate() {\r\n+        id++;\r\n+        createCandD(id);\r\n+        // TODO: Maybe create another one.\r\n+        \r\n+        em.getTransaction().begin();\r\n+        em.persist(entityC);\r\n+        em.persist(entityD);\r\n+        em.persist(entityD2);\r\n+        em.persist(entityD3);\r\n+        em.persist(entityD4);\r\n+        em.getTransaction().commit();\r\n+        \r\n+        runQueries();\r\n+    }\r\n+    \r\n+    private void runQueries() {\r\n+        em.clear();\r\n+        queryJoinTable();\r\n+        em.clear();\r\n+        queryJoinColumn();\r\n+        em.clear();\r\n+        querySecondaryTableValue();\r\n+        em.clear();\r\n+        queryMapValue();\r\n+    }\r\n+    \r\n+    private void queryJoinTable() {\r\n+        String query =\r\n+            \"SELECT c \" +\r\n+            \"FROM EntityC c JOIN c.entityDs d \" +\r\n+            \"WHERE d.name = 'ed'\";\r\n+        Query q = em.createQuery(query);\r\n+        List<EntityC> results = (List<EntityC>)q.getResultList();\r\n+        assertEquals(1,results.size());\r\n+    }\r\n+    \r\n+    private void queryJoinColumn() {\r\n+        String query = \r\n+            \"SELECT c \" +\r\n+            \"FROM EntityC c JOIN c.entityD2 d2 \" +\r\n+            \"WHERE d2.name = 'ed2'\";\r\n+        Query q = em.createQuery(query);\r\n+        List<EntityC> results = (List<EntityC>)q.getResultList();\r\n+        assertEquals(1,results.size());\r\n+    }\r\n+    \r\n+    private void querySecondaryTableValue() {\r\n+        String query = \r\n+            \"SELECT c \" +\r\n+            \"FROM EntityC c \" +\r\n+            \"WHERE c.secName = 'secName1'\";\r\n+        Query q = em.createQuery(query);\r\n+        List<EntityC> results = (List<EntityC>)q.getResultList();\r\n+        assertEquals(1,results.size());\r\n+    }\r\n+    \r\n+    private void queryMapValue() {\r\n+        String query =\r\n+            \"SELECT c \" +\r\n+            \"FROM EntityC c, IN(c.map2) m \" +\r\n+            \"WHERE m.name = 'ed3'\";\r\n+        Query q = em.createQuery(query);\r\n+        List<EntityC> results = (List<EntityC>)q.getResultList();\r\n+        assertEquals(1,results.size());\r\n+    }\r\n+        \r\n+      \r\n+}\r"}]}

