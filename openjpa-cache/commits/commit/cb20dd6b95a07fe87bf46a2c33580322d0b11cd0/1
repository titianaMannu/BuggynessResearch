{"sha":"cb20dd6b95a07fe87bf46a2c33580322d0b11cd0","node_id":"MDY6Q29tbWl0MjA2MzY0OmNiMjBkZDZiOTVhMDdmZTg3YmY0NmEyYzMzNTgwMzIyZDBiMTFjZDA=","commit":{"author":{"name":"Maxim Solodovnik","email":"solomax666@gmail.com","date":"2019-03-05T13:44:49Z"},"committer":{"name":"GitHub","email":"noreply@github.com","date":"2019-03-05T13:44:49Z"},"message":"[OPENJPA-2777] Javax index (#39)\n\n[OPENJPA-2777] javax.persistense.Index can be used on Table annotation","tree":{"sha":"d5acb921c9deac8172acd78b0c1bc2a917816438","url":"https://api.github.com/repos/apache/openjpa/git/trees/d5acb921c9deac8172acd78b0c1bc2a917816438"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/cb20dd6b95a07fe87bf46a2c33580322d0b11cd0","comment_count":0,"verification":{"verified":true,"reason":"valid","signature":"-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcfn1RCRBK7hj4Ov3rIwAAdHIIAFBQICLigwQq9nTe2MQCazMD\nu3QIeBWeRT/gaCgZiTNJUfhyHN9RrfnSItUFj7h0V5EJHGZM0iLkusL/Pag0Dsvz\ndifITMymshBWyYbgVeYYkNx95KUFlbTrClHT+tqn1GzbOmAscFWfjS0+RhSKKysv\nYcKjA/a7nS4FetgyLLLU+tfA/1RCPEUJrylPW0RP+0X8CA9Vv57Dce8JjZjRZNxT\nUDEdMRsNY9adaimovbMLda/S6KYaiRRiofznuFCrBd30uLc82vaYMFum730qUVxE\nGaU4G4/Se6t4PQV3mwXqU+JQZ2njxvGy4fYe2Vd4eq5KR17LOF1HRatIdA19J00=\n=WHRy\n-----END PGP SIGNATURE-----\n","payload":"tree d5acb921c9deac8172acd78b0c1bc2a917816438\nparent 44aede26df24d0e0615309c7b31fc59a1479231e\nauthor Maxim Solodovnik <solomax666@gmail.com> 1551793489 +0700\ncommitter GitHub <noreply@github.com> 1551793489 +0700\n\n[OPENJPA-2777] Javax index (#39)\n\n[OPENJPA-2777] javax.persistense.Index can be used on Table annotation\r\n"}},"url":"https://api.github.com/repos/apache/openjpa/commits/cb20dd6b95a07fe87bf46a2c33580322d0b11cd0","html_url":"https://github.com/apache/openjpa/commit/cb20dd6b95a07fe87bf46a2c33580322d0b11cd0","comments_url":"https://api.github.com/repos/apache/openjpa/commits/cb20dd6b95a07fe87bf46a2c33580322d0b11cd0/comments","author":{"login":"solomax","id":3870591,"node_id":"MDQ6VXNlcjM4NzA1OTE=","avatar_url":"https://avatars.githubusercontent.com/u/3870591?v=4","gravatar_id":"","url":"https://api.github.com/users/solomax","html_url":"https://github.com/solomax","followers_url":"https://api.github.com/users/solomax/followers","following_url":"https://api.github.com/users/solomax/following{/other_user}","gists_url":"https://api.github.com/users/solomax/gists{/gist_id}","starred_url":"https://api.github.com/users/solomax/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomax/subscriptions","organizations_url":"https://api.github.com/users/solomax/orgs","repos_url":"https://api.github.com/users/solomax/repos","events_url":"https://api.github.com/users/solomax/events{/privacy}","received_events_url":"https://api.github.com/users/solomax/received_events","type":"User","site_admin":false},"committer":{"login":"web-flow","id":19864447,"node_id":"MDQ6VXNlcjE5ODY0NDQ3","avatar_url":"https://avatars.githubusercontent.com/u/19864447?v=4","gravatar_id":"","url":"https://api.github.com/users/web-flow","html_url":"https://github.com/web-flow","followers_url":"https://api.github.com/users/web-flow/followers","following_url":"https://api.github.com/users/web-flow/following{/other_user}","gists_url":"https://api.github.com/users/web-flow/gists{/gist_id}","starred_url":"https://api.github.com/users/web-flow/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/web-flow/subscriptions","organizations_url":"https://api.github.com/users/web-flow/orgs","repos_url":"https://api.github.com/users/web-flow/repos","events_url":"https://api.github.com/users/web-flow/events{/privacy}","received_events_url":"https://api.github.com/users/web-flow/received_events","type":"User","site_admin":false},"parents":[{"sha":"44aede26df24d0e0615309c7b31fc59a1479231e","url":"https://api.github.com/repos/apache/openjpa/commits/44aede26df24d0e0615309c7b31fc59a1479231e","html_url":"https://github.com/apache/openjpa/commit/44aede26df24d0e0615309c7b31fc59a1479231e"}],"stats":{"total":317,"additions":286,"deletions":31},"files":[{"sha":"1e35054efa34dfbe792c711ff42b8c1ff69b6cb8","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMapping.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/cb20dd6b95a07fe87bf46a2c33580322d0b11cd0/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMapping.java","raw_url":"https://github.com/apache/openjpa/raw/cb20dd6b95a07fe87bf46a2c33580322d0b11cd0/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMapping.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMapping.java?ref=cb20dd6b95a07fe87bf46a2c33580322d0b11cd0","patch":"@@ -903,6 +903,7 @@ protected void resolveMapping(boolean runtime) {\n         // once columns are resolved, resolve unique constraints as they need\n         // the columns be resolved\n         _info.getUniques(this, true);\n+        _info.getIndices(this, true);\n     }\n \n     /**"},{"sha":"60cc2a035ff45d3aff9747b5dbcf1be86b413b55","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMappingInfo.java","status":"modified","additions":98,"deletions":28,"changes":126,"blob_url":"https://github.com/apache/openjpa/blob/cb20dd6b95a07fe87bf46a2c33580322d0b11cd0/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMappingInfo.java","raw_url":"https://github.com/apache/openjpa/raw/cb20dd6b95a07fe87bf46a2c33580322d0b11cd0/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMappingInfo.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMappingInfo.java?ref=cb20dd6b95a07fe87bf46a2c33580322d0b11cd0","patch":"@@ -34,6 +34,7 @@\n import org.apache.openjpa.jdbc.meta.strats.FullClassStrategy;\n import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.jdbc.schema.ForeignKey;\n+import org.apache.openjpa.jdbc.schema.Index;\n import org.apache.openjpa.jdbc.schema.Schema;\n import org.apache.openjpa.jdbc.schema.SchemaGroup;\n import org.apache.openjpa.jdbc.schema.Table;\n@@ -77,6 +78,7 @@\n     // Unique constraints indexed by primary or secondary table name\n     private Map<DBIdentifier,List<Unique>> _uniques;\n \n+    private Map<DBIdentifier,List<Index>> _indices = new HashMap<>();\n     /**\n      * The described class name.\n      */\n@@ -452,13 +454,21 @@ public void copy(MappingInfo info) {\n             }\n         }\n         if (cinfo._uniques != null) {\n-        \tif (_uniques == null)\n-        \t\t_uniques = new HashMap<>();\n-        for (Entry<DBIdentifier, List<Unique>> entry : cinfo._uniques.entrySet())\n-        \t\tif (!_uniques.containsKey(entry.getKey()))\n-        \t\t\t_uniques.put(entry.getKey(), entry.getValue());\n+            if (_uniques == null) {\n+                _uniques = new HashMap<>();\n+            }\n+            for (Entry<DBIdentifier, List<Unique>> entry : cinfo._uniques.entrySet()) {\n+                if (!_uniques.containsKey(entry.getKey())) {\n+                    _uniques.put(entry.getKey(), entry.getValue());\n+                }\n+            }\n+        }\n+        _indices.clear();\n+        for (Entry<DBIdentifier, List<Index>> entry : cinfo._indices.entrySet()) {\n+            if (!_indices.containsKey(entry.getKey())) {\n+                _indices.put(entry.getKey(), entry.getValue());\n+            }\n         }\n-\n     }\n \n     /**\n@@ -480,24 +490,50 @@ public void addUnique(String table, Unique unique) {\n      * @param unique the unique constraint. null means no-op.\n      */\n     public void addUnique(DBIdentifier table, Unique unique) {\n-    \tif (!DBIdentifier.equal(_tableName, table) &&\n-    \t   (_seconds == null || !_seconds.containsKey(table))) {\n+        if (!DBIdentifier.equal(_tableName, table) &&\n+            (_seconds == null || !_seconds.containsKey(table))) {\n             throw new UserException(_loc.get(\"unique-no-table\",\n                     new Object[]{table, _className, _tableName,\n                     ((_seconds == null) ? \"\" : _seconds.keySet())}));\n-    \t}\n-    \tif (unique == null)\n-    \t\treturn;\n+        }\n+        if (unique == null)\n+            return;\n         if (_uniques == null)\n             _uniques = new HashMap<>();\n         unique.setTableIdentifier(table);\n         List<Unique> uniques = _uniques.get(table);\n         if (uniques == null) {\n-        \tuniques = new ArrayList<>();\n-        \tuniques.add(unique);\n-        \t_uniques.put(table, uniques);\n+            uniques = new ArrayList<>();\n+            uniques.add(unique);\n+            _uniques.put(table, uniques);\n         } else {\n-        \tuniques.add(unique);\n+            uniques.add(unique);\n+        }\n+    }\n+\n+    /**\n+     * Add index for the given table.\n+     * @param table must be primary table or secondary table name added a\n+     * priori to this receiver.\n+     * @param idx the index. null means no-op.\n+     */\n+    public void addIndex(DBIdentifier table, Index idx) {\n+        if (!DBIdentifier.equal(_tableName, table) &&\n+           (_seconds == null || !_seconds.containsKey(table))) {\n+            throw new UserException(_loc.get(\"index-no-table\",\n+                    new Object[]{table, _className, _tableName,\n+                    ((_seconds == null) ? \"\" : _seconds.keySet())}));\n+        }\n+        if (idx == null)\n+            return;\n+        idx.setTableIdentifier(table);\n+        List<Index> indices = _indices.get(table);\n+        if (indices == null) {\n+            indices = new ArrayList<>();\n+            indices.add(idx);\n+            _indices.put(table, indices);\n+        } else {\n+            indices.add(idx);\n         }\n     }\n \n@@ -531,31 +567,65 @@ public void addUnique(DBIdentifier table, Unique unique) {\n             return new Unique[0];\n         List<Unique> result = new ArrayList<>();\n         for (DBIdentifier tableName : _uniques.keySet()) {\n-        \tList<Unique> uniqueConstraints = _uniques.get(tableName);\n-        \tfor (Unique template : uniqueConstraints) {\n-        \t\tColumn[] templateColumns = template.getColumns();\n+            List<Unique> uniqueConstraints = _uniques.get(tableName);\n+            for (Unique template : uniqueConstraints) {\n+                Column[] templateColumns = template.getColumns();\n                 Column[] uniqueColumns = new Column[templateColumns.length];\n                 Table table = getTable((ClassMapping)cm, tableName, adapt);\n-        \t\tfor (int i=0; i<uniqueColumns.length; i++) {\n+                for (int i=0; i<uniqueColumns.length; i++) {\n                     DBIdentifier columnName = templateColumns[i].getIdentifier();\n-        \t\t\tif (!table.containsColumn(columnName)) {\n+                    if (!table.containsColumn(columnName)) {\n                         throw new UserException(_loc.get(\n                                 \"unique-missing-column\",\n                                 new Object[]{cm, columnName, tableName,\n                                 Arrays.toString(table.getColumnNames())}));\n-        \t\t\t}\n+                    }\n                     Column uniqueColumn = table.getColumn(columnName);\n-        \t\t\tuniqueColumns[i] = uniqueColumn;\n-        \t\t}\n-        \t\tUnique unique = createUnique(cm, \"unique\", template,\n-        \t\t\t\tuniqueColumns, adapt);\n-        \t\tif (unique != null)\n-        \t\t\tresult.add(unique);\n-        \t}\n+                    uniqueColumns[i] = uniqueColumn;\n+                }\n+                Unique unique = createUnique(cm, \"unique\", template,\n+                        uniqueColumns, adapt);\n+                if (unique != null)\n+                    result.add(unique);\n+            }\n         }\n         return result.toArray(new Unique[result.size()]);\n     }\n \n+    /**\n+     * Get all indices associated with both the primary and/or\n+     * secondary tables.\n+     *\n+     */\n+    public Index[] getIndices(MetaDataContext cm, boolean adapt) {\n+        if (_indices.isEmpty())\n+            return new Index[0];\n+        List<Index> result = new ArrayList<>();\n+        for (DBIdentifier tableName : _indices.keySet()) {\n+            List<Index> indices = _indices.get(tableName);\n+            for (Index template : indices) {\n+                Column[] templateColumns = template.getColumns();\n+                Column[] columns = new Column[templateColumns.length];\n+                Table table = getTable((ClassMapping)cm, tableName, adapt);\n+                for (int i = 0; i < columns.length; i++) {\n+                    DBIdentifier columnName = templateColumns[i].getIdentifier();\n+                    if (!table.containsColumn(columnName)) {\n+                        throw new UserException(_loc.get(\n+                                \"index-missing-column\",\n+                                new Object[]{cm, columnName, tableName,\n+                                Arrays.toString(table.getColumnNames())}));\n+                    }\n+                    Column column = table.getColumn(columnName);\n+                    columns[i] = column;\n+                }\n+                Index idx = createIndex(cm, \"index\", template, columns, adapt);\n+                if (idx != null)\n+                    result.add(idx);\n+            }\n+        }\n+        return result.toArray(new Index[result.size()]);\n+    }\n+\n     @Override\n     public File getSourceFile() {\n         return _file;"},{"sha":"f267615d7e06f008e4399f105ce4c5484419bc0b","filename":"openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/localizer.properties","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/cb20dd6b95a07fe87bf46a2c33580322d0b11cd0/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/cb20dd6b95a07fe87bf46a2c33580322d0b11cd0/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/localizer.properties?ref=cb20dd6b95a07fe87bf46a2c33580322d0b11cd0","patch":"@@ -416,6 +416,11 @@ unique-missing-column: The column \"{1}\" in a unique constraint in \"{0}\" on \\\n unique-no-table: A unique constraint on table \"{0}\" can not be added to \\\n \tmapping of class \"{1}\" because the table does neither match its primary \\\n \ttable \"{2}\" nor any of its secondary table(s) \"{3}\".\n+index-no-table: Index on table \"{0}\" can not be added to \\\n+\tmapping of class \"{1}\" because the table does neither match its primary \\\n+\ttable \"{2}\" nor any of its secondary table(s) \"{3}\".\n+index-missing-column: The column \"{1}\" in a index in \"{0}\" on \\\n+\ttable \"{2}\" can not be found in the list of available columns \"{3}\".\n bad-version-column-table: One of the version column \"{0}\" has been associated \\\n \twith table \"{1}\", but no primary or secondary table of such name exists.\n version-type-unsupported: Version field \"{0}\" of {1} is not supported."},{"sha":"d22431b523600e5444eb6610269fb8e2900221ca","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java","status":"modified","additions":38,"deletions":3,"changes":41,"blob_url":"https://github.com/apache/openjpa/blob/cb20dd6b95a07fe87bf46a2c33580322d0b11cd0/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java","raw_url":"https://github.com/apache/openjpa/raw/cb20dd6b95a07fe87bf46a2c33580322d0b11cd0/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java?ref=cb20dd6b95a07fe87bf46a2c33580322d0b11cd0","patch":"@@ -615,6 +615,7 @@ private void parseTable(ClassMapping cm, Table table) {\n         }\n         addUniqueConstraints(tName.getName(), cm, cm.getMappingInfo(),\n             table.uniqueConstraints());\n+        addIndices(tName.getName(), cm, cm.getMappingInfo(), table.indexes());\n     }\n \n     Unique createUniqueConstraint(MetaDataContext ctx, UniqueConstraint anno) {\n@@ -643,14 +644,48 @@ void addUniqueConstraints(String table, MetaDataContext ctx,\n             Unique unique = createUniqueConstraint(ctx, anno);\n             unique.setTableIdentifier(DBIdentifier.newTable(table, delimit()));\n             if (info instanceof ClassMappingInfo)\n-                ((ClassMappingInfo) info).addUnique(table, unique);\n+                ((ClassMappingInfo) info).addUnique(DBIdentifier.newTable(table), unique);\n             else if (info instanceof FieldMappingInfo)\n                 ((FieldMappingInfo) info).addJoinTableUnique(unique);\n             else\n                 throw new InternalException();\n         }\n     }\n \n+\n+    org.apache.openjpa.jdbc.schema.Index createIndex(MetaDataContext ctx, javax.persistence.Index anno) {\n+        String columnNames = anno.columnList();\n+        if (StringUtil.isEmpty(columnNames))\n+            throw new UserException(_loc.get(\"index-no-column\", ctx));\n+        DBIdentifier[] sColNames = DBIdentifier.toArray(columnNames.split(\",\"), DBIdentifierType.COLUMN, delimit());\n+        org.apache.openjpa.jdbc.schema.Index indx = new org.apache.openjpa.jdbc.schema.Index();\n+        for (int i = 0; i < sColNames.length; i++) {\n+            if (DBIdentifier.isEmpty(sColNames[i]))\n+                throw new UserException(_loc.get(\"index-empty-column\",\n+                        Arrays.toString(sColNames), ctx));\n+            Column column = new Column();\n+            column.setIdentifier(sColNames[i]);\n+            indx.addColumn(column);\n+        }\n+        indx.setUnique(anno.unique());\n+        if (!StringUtil.isEmpty(anno.name())) {\n+            indx.setIdentifier(DBIdentifier.newConstraint(anno.name(), delimit()));\n+        }\n+        return indx;\n+    }\n+\n+    void addIndices(String table, MetaDataContext ctx,\n+        MappingInfo info, javax.persistence.Index... indices) {\n+        for (javax.persistence.Index anno : indices) {\n+            org.apache.openjpa.jdbc.schema.Index idx = createIndex(ctx, anno);\n+            idx.setTableIdentifier(DBIdentifier.newTable(table, delimit()));\n+            if (info instanceof ClassMappingInfo)\n+                ((ClassMappingInfo) info).addIndex(DBIdentifier.newTable(table), idx);\n+            else\n+                throw new InternalException();\n+        }\n+    }\n+\n     /**\n      * Form a qualified table name from a schema and table name.\n      */\n@@ -1644,7 +1679,7 @@ protected void parseColumns(FieldMapping fm,\n \n         // cache the JAXB XmlRootElement class if it is present so we do not\n         // have a hard-wired dependency on JAXB here\n-        Class xmlRootElementClass = null;\n+        Class<?> xmlRootElementClass = null;\n         try {\n             xmlRootElementClass = Class.forName(\"javax.xml.bind.annotation.XmlRootElement\");\n         } catch (Exception e) {\n@@ -1669,7 +1704,7 @@ protected void parseColumns(FieldMapping fm,\n                     .getDBDictionary();\n                 if (dict.supportsXMLColumn)\n                     // column maps to xml type\n-                    ((Column) cols.get(i)).setTypeIdentifier(DBIdentifier.newColumnDefinition(dict.xmlTypeName));\n+                    cols.get(i).setTypeIdentifier(DBIdentifier.newColumnDefinition(dict.xmlTypeName));\n             }\n \n             unique |= (pcols[i].unique()) ? TRUE : FALSE;"},{"sha":"b4ab97c1b18afe2a79563bf3a8b6fc13260f6710","filename":"openjpa-persistence-jdbc/src/main/resources/org/apache/openjpa/persistence/jdbc/localizer.properties","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/cb20dd6b95a07fe87bf46a2c33580322d0b11cd0/openjpa-persistence-jdbc/src/main/resources/org/apache/openjpa/persistence/jdbc/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/cb20dd6b95a07fe87bf46a2c33580322d0b11cd0/openjpa-persistence-jdbc/src/main/resources/org/apache/openjpa/persistence/jdbc/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/resources/org/apache/openjpa/persistence/jdbc/localizer.properties?ref=cb20dd6b95a07fe87bf46a2c33580322d0b11cd0","patch":"@@ -53,6 +53,10 @@ unique-empty-column: A unique constraint \"{0}\" specified in mapping of class  \\\n unique-many-on-seq-unsupported: More than one unique constraints is specified \\\n \ton sequence generator \"{1}\" in \"{0}\". But multiple unique constraint on \\\n \tsequence generator is currently not supported.\n+index-no-column: An index specified in mapping of \"{0}\" specified \\\n+    no column.\n+index-empty-column: An index \"{0}\" specified in mapping of class  \\\n+    \"{1}\" includes an empty column.\n discriminator-on-abstract-class: A discriminator value has been specified for \\\n \tthe abstract class \"{0}\". The discriminator will never be used and may be \\\n \tsafely removed."},{"sha":"cc073d177c07591729aff8a0af3b3294976db430","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EntityWithIndices.java","status":"added","additions":76,"deletions":0,"changes":76,"blob_url":"https://github.com/apache/openjpa/blob/cb20dd6b95a07fe87bf46a2c33580322d0b11cd0/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EntityWithIndices.java","raw_url":"https://github.com/apache/openjpa/raw/cb20dd6b95a07fe87bf46a2c33580322d0b11cd0/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EntityWithIndices.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EntityWithIndices.java?ref=cb20dd6b95a07fe87bf46a2c33580322d0b11cd0","patch":"@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.jdbc.annotations;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.Index;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name = \"INDICES1\"\n+\t, indexes = {@Index(name = \"idx_index1\", columnList = \"index1\")\n+\t\t, @Index(name = \"idx_long\", columnList = \"LONG_NAME\", unique = true)})\n+public class EntityWithIndices {\n+\t@Id\n+\t@Column(name = \"PK\")\n+\tprivate Long pk;\n+\n+\t@Column(name = \"INDEX1\")\n+\tprivate String index1;\n+\n+\t@Column(name = \"LONG_NAME\")\n+\tprivate String longName;\n+\n+\t@Column(name = \"NAME\")\n+\tprivate String name;\n+\n+\tpublic Long getPk() {\n+\t\treturn pk;\n+\t}\n+\n+\tpublic void setPk(Long pk) {\n+\t\tthis.pk = pk;\n+\t}\n+\n+\tpublic String getIndex1() {\n+\t\treturn index1;\n+\t}\n+\n+\tpublic void setIndex1(String index1) {\n+\t\tthis.index1 = index1;\n+\t}\n+\n+\tpublic String getLongName() {\n+\t\treturn longName;\n+\t}\n+\n+\tpublic void setLongName(String longName) {\n+\t\tthis.longName = longName;\n+\t}\n+\n+\tpublic String getName() {\n+\t\treturn name;\n+\t}\n+\n+\tpublic void setName(String name) {\n+\t\tthis.name = name;\n+\t}\n+}"},{"sha":"f105d64715848b01c5d22a76c610b3fbebb07629","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestIndices.java","status":"added","additions":64,"deletions":0,"changes":64,"blob_url":"https://github.com/apache/openjpa/blob/cb20dd6b95a07fe87bf46a2c33580322d0b11cd0/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestIndices.java","raw_url":"https://github.com/apache/openjpa/raw/cb20dd6b95a07fe87bf46a2c33580322d0b11cd0/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestIndices.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestIndices.java?ref=cb20dd6b95a07fe87bf46a2c33580322d0b11cd0","patch":"@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.jdbc.annotations;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.identifier.DBIdentifier;\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\n+import org.apache.openjpa.jdbc.schema.Column;\n+import org.apache.openjpa.jdbc.schema.Index;\n+import org.apache.openjpa.jdbc.schema.Table;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+import org.junit.Test;\n+\n+public class TestIndices extends SingleEMFTestCase {\n+\t@Override\n+\tpublic void setUp() {\n+\t\tsetUp(EntityWithIndices.class, CLEAR_TABLES\n+//\t\t\t,\"openjpa.Log\",\"SQL=trace\"\n+\t\t);\n+\t}\n+\n+\t@Test\n+\tpublic void testIndicesCreated() {\n+\t\tJDBCConfiguration conf = (JDBCConfiguration) emf.getConfiguration();\n+\t\tClassMapping cls = conf.getMappingRepositoryInstance().getMapping(EntityWithIndices.class, null, true);\n+\t\tTable table = cls.getTable();\n+\t\tIndex idx1 = table.getIndex(DBIdentifier.newIndex(\"idx_index1\"));\n+\t\tassertNotNull(\"Defined index should exist\", idx1);\n+\t\tassertFalse(idx1.isUnique());\n+\n+\t\tIndex idx2 = table.getIndex(DBIdentifier.newIndex(\"idx_long\"));\n+\t\tassertNotNull(\"Defined index should exist\", idx2);\n+\t\tassertTrue(idx2.isUnique());\n+\n+\t\tSet<String> indexedCols = new HashSet<>();\n+\t\tfor (Index idx : table.getIndexes()) {\n+\t\t\tfor (Column col : idx.getColumns()) {\n+\t\t\t\tindexedCols.add(col.getIdentifier().getName());\n+\t\t\t}\n+\t\t}\n+\t\tassertTrue(indexedCols.contains(\"INDEX1\"));\n+\t\tassertTrue(indexedCols.contains(\"LONG_NAME\"));\n+\t\tassertFalse(indexedCols.contains(\"NAME\"));\n+\t}\n+}"}]}

