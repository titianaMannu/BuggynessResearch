{"sha":"cb258aee424374a79b9d4fd7728d5ee5eb2cdc17","node_id":"C_kwDOAAMmHNoAKGNiMjU4YWVlNDI0Mzc0YTc5YjlkNGZkNzcyOGQ1ZWU1ZWIyY2RjMTc","commit":{"author":{"name":"Romain Manni-Bucau","email":"rmannibucau@gmail.com","date":"2021-10-27T10:14:20Z"},"committer":{"name":"GitHub","email":"noreply@github.com","date":"2021-10-27T10:14:20Z"},"message":"Merge pull request #81 from tandraschko/master\n\nOPENJPA-2877 Implement JPA2.1 @Convert / AttributeConverter","tree":{"sha":"d109be38d1141e3be04b174dbd524195203a2453","url":"https://api.github.com/repos/apache/openjpa/git/trees/d109be38d1141e3be04b174dbd524195203a2453"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/cb258aee424374a79b9d4fd7728d5ee5eb2cdc17","comment_count":0,"verification":{"verified":true,"reason":"valid","signature":"-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJheSZ8CRBK7hj4Ov3rIwAAL3gIAHXZ7OPe2R0b+MjXyoVZApBH\nT3eK3NT+CCfWuqoGHuDkxmzNfPx8YXwhySh6R9CW7B5SUQFVzcojZ9p/huzUZDb/\nzRXXPMQ077qUb32Vy5P1UfnB62s0oCAHAOnkK+0aVBsqII76G9JGtVM32H+LRy2R\n8TAP4p2Rnq3NNdtof8HHqo7VR6efapOw31ie7Fc+eaLLAB1OqVuN6kAr8t5VHNwh\nxFAA8a+R9KtNZNTZyXlmHvULA4HxHw4vsGdf0aKtVxgYtECXjfBdiWVgkr24Oovu\nWvqCVZxHrGX/QM/nA5jHLBbXN3O6VlQ9y8a0Mf8oeraQrNdtgZwXx0eGRKuL6ms=\n=vTmj\n-----END PGP SIGNATURE-----\n","payload":"tree d109be38d1141e3be04b174dbd524195203a2453\nparent 1fdf245200fc839d25d59a637994c62173429bd2\nparent 8ff3dff49b4754205315df0d144e2e9da1fe6880\nauthor Romain Manni-Bucau <rmannibucau@gmail.com> 1635329660 +0200\ncommitter GitHub <noreply@github.com> 1635329660 +0200\n\nMerge pull request #81 from tandraschko/master\n\nOPENJPA-2877 Implement JPA2.1 @Convert / AttributeConverter"}},"url":"https://api.github.com/repos/apache/openjpa/commits/cb258aee424374a79b9d4fd7728d5ee5eb2cdc17","html_url":"https://github.com/apache/openjpa/commit/cb258aee424374a79b9d4fd7728d5ee5eb2cdc17","comments_url":"https://api.github.com/repos/apache/openjpa/commits/cb258aee424374a79b9d4fd7728d5ee5eb2cdc17/comments","author":{"login":"rmannibucau","id":1249546,"node_id":"MDQ6VXNlcjEyNDk1NDY=","avatar_url":"https://avatars.githubusercontent.com/u/1249546?v=4","gravatar_id":"","url":"https://api.github.com/users/rmannibucau","html_url":"https://github.com/rmannibucau","followers_url":"https://api.github.com/users/rmannibucau/followers","following_url":"https://api.github.com/users/rmannibucau/following{/other_user}","gists_url":"https://api.github.com/users/rmannibucau/gists{/gist_id}","starred_url":"https://api.github.com/users/rmannibucau/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rmannibucau/subscriptions","organizations_url":"https://api.github.com/users/rmannibucau/orgs","repos_url":"https://api.github.com/users/rmannibucau/repos","events_url":"https://api.github.com/users/rmannibucau/events{/privacy}","received_events_url":"https://api.github.com/users/rmannibucau/received_events","type":"User","site_admin":false},"committer":{"login":"web-flow","id":19864447,"node_id":"MDQ6VXNlcjE5ODY0NDQ3","avatar_url":"https://avatars.githubusercontent.com/u/19864447?v=4","gravatar_id":"","url":"https://api.github.com/users/web-flow","html_url":"https://github.com/web-flow","followers_url":"https://api.github.com/users/web-flow/followers","following_url":"https://api.github.com/users/web-flow/following{/other_user}","gists_url":"https://api.github.com/users/web-flow/gists{/gist_id}","starred_url":"https://api.github.com/users/web-flow/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/web-flow/subscriptions","organizations_url":"https://api.github.com/users/web-flow/orgs","repos_url":"https://api.github.com/users/web-flow/repos","events_url":"https://api.github.com/users/web-flow/events{/privacy}","received_events_url":"https://api.github.com/users/web-flow/received_events","type":"User","site_admin":false},"parents":[{"sha":"1fdf245200fc839d25d59a637994c62173429bd2","url":"https://api.github.com/repos/apache/openjpa/commits/1fdf245200fc839d25d59a637994c62173429bd2","html_url":"https://github.com/apache/openjpa/commit/1fdf245200fc839d25d59a637994c62173429bd2"},{"sha":"8ff3dff49b4754205315df0d144e2e9da1fe6880","url":"https://api.github.com/repos/apache/openjpa/commits/8ff3dff49b4754205315df0d144e2e9da1fe6880","html_url":"https://github.com/apache/openjpa/commit/8ff3dff49b4754205315df0d144e2e9da1fe6880"}],"stats":{"total":256,"additions":192,"deletions":64},"files":[{"sha":"fb47b56573c2b22164377c3c28a0dff3747c74cb","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java","status":"modified","additions":125,"deletions":63,"changes":188,"blob_url":"https://github.com/apache/openjpa/blob/cb258aee424374a79b9d4fd7728d5ee5eb2cdc17/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/cb258aee424374a79b9d4fd7728d5ee5eb2cdc17/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java?ref=cb258aee424374a79b9d4fd7728d5ee5eb2cdc17","patch":"@@ -188,6 +188,7 @@\n     private Boolean _serializableField = null;\n     private boolean _generated = false;\n     private boolean _useSchemaElement = true;\n+    private Class _converter;\n \n     // Members aren't serializable. Use a proxy that can provide a Member\n     // to avoid writing the full Externalizable implementation.\n@@ -198,6 +199,10 @@\n     private transient Method _extMethod = DEFAULT_METHOD;\n     private transient Member _factMethod = DEFAULT_METHOD;\n \n+    private transient Constructor _converterConstructor;\n+    private transient Method _converterExtMethod;\n+    private transient Method _converterFactMethod;\n+    \n     // intermediate and impl data\n     private boolean _intermediate = true;\n     private Boolean _implData = Boolean.TRUE;\n@@ -1317,35 +1322,58 @@ public Object getExternalValue(Object val, StoreContext ctx) {\n         }\n \n         Method externalizer = getExternalizerMethod();\n-        if (externalizer == null)\n-            return val;\n+        if (externalizer != null) {\n+            // special case for queries: allow the given value to pass through\n+            // as-is if it is already in externalized form\n+            if (val != null && getType().isInstance(val)\n+                && (!getDeclaredType().isInstance(val)\n+                || getDeclaredType() == Object.class))\n+                return val;\n \n-        // special case for queries: allow the given value to pass through\n-        // as-is if it is already in externalized form\n-        if (val != null && getType().isInstance(val)\n-            && (!getDeclaredType().isInstance(val)\n-            || getDeclaredType() == Object.class))\n-            return val;\n+            try {\n+                // either invoke the static toExternal(val[, ctx]) method, or the\n+                // non-static val.toExternal([ctx]) method\n+                if (Modifier.isStatic(externalizer.getModifiers())) {\n+                    if (externalizer.getParameterTypes().length == 1)\n+                        return externalizer.invoke(null, new Object[]{ val });\n+                    return externalizer.invoke(null, new Object[]{ val, ctx });\n+                }\n+                if (val == null)\n+                    return null;\n+                if (externalizer.getParameterTypes().length == 0)\n+                    return externalizer.invoke(val, (Object[]) null);\n+                return externalizer.invoke(val, new Object[]{ ctx });\n+            } catch (OpenJPAException ke) {\n+                throw ke;\n+            } catch (Exception e) {\n+                throw new MetaDataException(_loc.get(\"externalizer-err\", this,\n+                    Exceptions.toString(val), e.toString())).setCause(e);\n+            }\n+        }\n \n-        try {\n-            // either invoke the static toExternal(val[, ctx]) method, or the\n-            // non-static val.toExternal([ctx]) method\n-            if (Modifier.isStatic(externalizer.getModifiers())) {\n-                if (externalizer.getParameterTypes().length == 1)\n-                    return externalizer.invoke(null, new Object[]{ val });\n-                return externalizer.invoke(null, new Object[]{ val, ctx });\n+        Class converter = getConverter();\n+        if (converter != null && val != null) {\n+            try {\n+                // TODO support CDI (OPENJPA-2714)\n+                if (_converterConstructor == null) {\n+                    _converterConstructor = converter.getDeclaredConstructor();\n+                }\n+                Object instance = _converterConstructor.newInstance();\n+\n+                // see AttributeConverter.java from the JPA specs\n+                if (_converterExtMethod == null) {\n+                    _converterExtMethod = converter.getDeclaredMethod(\"convertToDatabaseColumn\", Object.class);\n+                }\n+                return _converterExtMethod.invoke(instance, val);\n+            } catch (OpenJPAException ke) {\n+                throw ke;\n+            } catch (Exception e) {\n+                throw new MetaDataException(_loc.get(\"converter-err\", this,\n+                    Exceptions.toString(val), e.toString())).setCause(e);\n             }\n-            if (val == null)\n-                return null;\n-            if (externalizer.getParameterTypes().length == 0)\n-                return externalizer.invoke(val, (Object[]) null);\n-            return externalizer.invoke(val, new Object[]{ ctx });\n-        } catch (OpenJPAException ke) {\n-            throw ke;\n-        } catch (Exception e) {\n-            throw new MetaDataException(_loc.get(\"externalizer-err\", this,\n-                Exceptions.toString(val), e.toString())).setCause(e);\n         }\n+\n+        return val;\n     }\n \n     /**\n@@ -1359,50 +1387,73 @@ public Object getFieldValue(Object val, StoreContext ctx) {\n             return fieldValues.get(val);\n \n         Member factory = getFactoryMethod();\n-        if (factory == null)\n-            return val;\n+        if (factory != null) {\n+            try {\n+                if (val == null && getNullValue() == NULL_DEFAULT)\n+                    return AccessController.doPrivileged(\n+                        J2DoPrivHelper.newInstanceAction(getDeclaredType()));\n+\n+                // invoke either the constructor for the field type,\n+                // or the static type.toField(val[, ctx]) method\n+                if (factory instanceof Constructor) {\n+                    if (val == null)\n+                        return null;\n+                    return ((Constructor) factory).newInstance\n+                        (new Object[]{ val });\n+                }\n \n-        try {\n-            if (val == null && getNullValue() == NULL_DEFAULT)\n-                return AccessController.doPrivileged(\n-                    J2DoPrivHelper.newInstanceAction(getDeclaredType()));\n+                Method meth = (Method) factory;\n+                if (meth.getParameterTypes().length == 1)\n+                    return meth.invoke(null, new Object[]{ val });\n+                return meth.invoke(null, new Object[]{ val, ctx });\n+            } catch (Exception e) {\n+                // unwrap cause\n+                if (e instanceof InvocationTargetException) {\n+                    Throwable t = ((InvocationTargetException) e).\n+                        getTargetException();\n+                    if (t instanceof Error)\n+                        throw (Error) t;\n+                    e = (Exception) t;\n+\n+                    // allow null values to cause NPEs and illegal arg exceptions\n+                    // without error\n+                    if (val == null && (e instanceof NullPointerException\n+                        || e instanceof IllegalArgumentException))\n+                        return null;\n+                }\n \n-            // invoke either the constructor for the field type,\n-            // or the static type.toField(val[, ctx]) method\n-            if (factory instanceof Constructor) {\n-                if (val == null)\n-                    return null;\n-                return ((Constructor) factory).newInstance\n-                    (new Object[]{ val });\n+                if (e instanceof OpenJPAException)\n+                    throw (OpenJPAException) e;\n+                if (e instanceof PrivilegedActionException)\n+                    e = ((PrivilegedActionException) e).getException();\n+                throw new MetaDataException(_loc.get(\"factory-err\", this,\n+                    Exceptions.toString(val), e.toString())).setCause(e);\n             }\n+        }\n \n-            Method meth = (Method) factory;\n-            if (meth.getParameterTypes().length == 1)\n-                return meth.invoke(null, new Object[]{ val });\n-            return meth.invoke(null, new Object[]{ val, ctx });\n-        } catch (Exception e) {\n-            // unwrap cause\n-            if (e instanceof InvocationTargetException) {\n-                Throwable t = ((InvocationTargetException) e).\n-                    getTargetException();\n-                if (t instanceof Error)\n-                    throw (Error) t;\n-                e = (Exception) t;\n-\n-                // allow null values to cause NPEs and illegal arg exceptions\n-                // without error\n-                if (val == null && (e instanceof NullPointerException\n-                    || e instanceof IllegalArgumentException))\n-                    return null;\n-            }\n+        Class converter = getConverter();\n+        if (converter != null && val != null) {\n+            try {\n+                // TODO support CDI (OPENJPA-2714)\n+                if (_converterConstructor == null) {\n+                    _converterConstructor = converter.getDeclaredConstructor();\n+                }\n+                Object instance = _converterConstructor.newInstance();\n \n-            if (e instanceof OpenJPAException)\n-                throw (OpenJPAException) e;\n-            if (e instanceof PrivilegedActionException)\n-                e = ((PrivilegedActionException) e).getException();\n-            throw new MetaDataException(_loc.get(\"factory-err\", this,\n-                Exceptions.toString(val), e.toString())).setCause(e);\n+                // see AttributeConverter.java from the JPA specs\n+                if (_converterFactMethod == null) {\n+                    _converterFactMethod = converter.getDeclaredMethod(\"convertToEntityAttribute\", Object.class);\n+                }\n+                return _converterFactMethod.invoke(instance, val);\n+            } catch (OpenJPAException ke) {\n+                throw ke;\n+            } catch (Exception e) {\n+                throw new MetaDataException(_loc.get(\"converter-err\", this,\n+                    Exceptions.toString(val), e.toString())).setCause(e);\n+            }\n         }\n+\n+        return val;\n     }\n \n     /**\n@@ -1420,6 +1471,12 @@ public void setExternalizer(String externalizer) {\n         _extMethod = DEFAULT_METHOD;\n     }\n \n+    public void setConverter(Class converter) {\n+        _converter = converter;\n+        _converterExtMethod = null;\n+        _converterFactMethod = null;\n+    }\n+    \n     /**\n      * The name of this field's factory, or null if none.\n      */\n@@ -2044,6 +2101,7 @@ public void copy(FieldMetaData field) {\n         _access = field._access;\n         _orderDec = field._orderDec;\n         _useSchemaElement = field._useSchemaElement;\n+        _converter = field._converter;\n \n         // embedded fields can't be versions\n         if (_owner.getEmbeddingMetaData() == null && _version == null)\n@@ -2523,4 +2581,8 @@ public String getSetterName() {\n         }\n         return setterName;\n     }\n+\n+    public Class getConverter() {\n+        return _converter;\n+    }\n }"},{"sha":"a9deb4b4b567ddf53d0b8483ad8500cc4df761a0","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/meta/localizer.properties","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/cb258aee424374a79b9d4fd7728d5ee5eb2cdc17/openjpa-kernel/src/main/resources/org/apache/openjpa/meta/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/cb258aee424374a79b9d4fd7728d5ee5eb2cdc17/openjpa-kernel/src/main/resources/org/apache/openjpa/meta/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/meta/localizer.properties?ref=cb258aee424374a79b9d4fd7728d5ee5eb2cdc17","patch":"@@ -119,6 +119,8 @@ bad-externalizer: The externalizer method \"{1}\" on field \"{0}\" is not valid. \\\n \t\"<owning-class>.<method-name>\", and that the method is static.\n externalizer-err: There was an error invoking the externalizer for field \\\n \t\"{0}\" on Java value \"{1}\": {2}\n+converter-err: There was an error invoking the converter for field \\\n+\t\"{0}\" on Java value \"{1}\": {2}\n factory-err: There was an error invoking the factory for field \\\n \t\"{0}\" on datastore value \"{1}\": {2}\n bad-factory: The factory method supplied for field \"{0}\" does not exist or \\"},{"sha":"58603c974ef635c9398dcb509cb54b43101c4186","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestExternalValues.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/cb258aee424374a79b9d4fd7728d5ee5eb2cdc17/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestExternalValues.java","raw_url":"https://github.com/apache/openjpa/raw/cb258aee424374a79b9d4fd7728d5ee5eb2cdc17/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestExternalValues.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestExternalValues.java?ref=cb258aee424374a79b9d4fd7728d5ee5eb2cdc17","patch":"@@ -133,6 +133,7 @@ public void testPositionalBindingQueryParameterEqualsDeclaredType() {\n         assertFalse(result.isEmpty());\n         for (ExternalValues x:result) {\n             assertEquals(uuid, x.getUuid());\n+            assertEquals(uuid, x.getUuid2());\n         }\n     }\n \n@@ -148,6 +149,7 @@ public void testNamedBindingQueryParameterEqualsDeclaredType() {\n         assertFalse(result.isEmpty());\n         for (ExternalValues pc:result) {\n             assertEquals(uuid, pc.getUuid());\n+            assertEquals(uuid, pc.getUuid2());\n         }\n     }\n \n@@ -189,6 +191,7 @@ private void createInstance(UUID uuid) {\n         em.getTransaction().begin();\n         ExternalValues pc = new ExternalValues();\n         pc.setUuid(uuid);\n+        pc.setUuid2(uuid);\n         em.persist(pc);\n         em.getTransaction().commit();\n         em.clear();"},{"sha":"1a1788d79202255958bd554b822fe6cd82683c4f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/ExternalValues.java","status":"modified","additions":13,"deletions":0,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/cb258aee424374a79b9d4fd7728d5ee5eb2cdc17/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/ExternalValues.java","raw_url":"https://github.com/apache/openjpa/raw/cb258aee424374a79b9d4fd7728d5ee5eb2cdc17/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/ExternalValues.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/ExternalValues.java?ref=cb258aee424374a79b9d4fd7728d5ee5eb2cdc17","patch":"@@ -20,6 +20,7 @@\n \n \n import java.util.UUID;\n+import javax.persistence.Convert;\n \n import javax.persistence.Entity;\n \n@@ -44,6 +45,9 @@\n     @Factory(\"UUID.fromString\")\n     private UUID    uuid;\n \n+    @Convert(converter = UuidAttributeConverter.class)\n+    private UUID    uuid2;\n+\n     public boolean getBooleanToShort() {\n         return booleanToShort;\n     }\n@@ -123,4 +127,13 @@ public UUID getUuid() {\n     public void setUuid(UUID uuid) {\n         this.uuid = uuid;\n     }\n+\n+    public UUID getUuid2() {\n+        return uuid2;\n+    }\n+\n+    public void setUuid2(UUID uuid2) {\n+        this.uuid2 = uuid2;\n+    }\n+\n }"},{"sha":"736326826a573d7d9dd6056c0fa1ffca269c31f5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/UuidAttributeConverter.java","status":"added","additions":40,"deletions":0,"changes":40,"blob_url":"https://github.com/apache/openjpa/blob/cb258aee424374a79b9d4fd7728d5ee5eb2cdc17/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/UuidAttributeConverter.java","raw_url":"https://github.com/apache/openjpa/raw/cb258aee424374a79b9d4fd7728d5ee5eb2cdc17/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/UuidAttributeConverter.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/UuidAttributeConverter.java?ref=cb258aee424374a79b9d4fd7728d5ee5eb2cdc17","patch":"@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.meta.common.apps;\n+\n+import java.util.UUID;\n+import javax.persistence.AttributeConverter;\n+import javax.persistence.Converter;\n+\n+@Converter\n+public class UuidAttributeConverter implements AttributeConverter<UUID, String>\n+{\n+    @Override\n+    public String convertToDatabaseColumn(UUID attribute)\n+    {\n+        return attribute.toString();\n+    }\n+\n+    @Override\n+    public UUID convertToEntityAttribute(String dbData)\n+    {\n+        return UUID.fromString(dbData);\n+    }\n+    \n+}"},{"sha":"fd9a6847e6bdc61831edf54d2fc53b19de00dc54","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/cb258aee424374a79b9d4fd7728d5ee5eb2cdc17/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/cb258aee424374a79b9d4fd7728d5ee5eb2cdc17/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java?ref=cb258aee424374a79b9d4fd7728d5ee5eb2cdc17","patch":"@@ -96,6 +96,7 @@\n import javax.persistence.Basic;\n import javax.persistence.Cacheable;\n import javax.persistence.CascadeType;\n+import javax.persistence.Convert;\n import javax.persistence.ElementCollection;\n import javax.persistence.Embeddable;\n import javax.persistence.Embedded;\n@@ -174,6 +175,7 @@\n import org.apache.openjpa.util.MetaDataException;\n import org.apache.openjpa.util.UnsupportedException;\n import org.apache.openjpa.util.UserException;\n+import static org.apache.openjpa.persistence.MetaDataTag.CONVERT;\n \n \n /**\n@@ -231,6 +233,7 @@\n         _tags.put(ElementType.class, ELEM_TYPE);\n         _tags.put(ExternalValues.class, EXTERNAL_VALS);\n         _tags.put(Externalizer.class, EXTERNALIZER);\n+        _tags.put(Convert.class, CONVERT);\n         _tags.put(Factory.class, FACTORY);\n         _tags.put(FetchGroup.class, FETCH_GROUP);\n         _tags.put(FetchGroups.class, FETCH_GROUPS);\n@@ -1326,6 +1329,10 @@ private void parseMemberAnnotations(FieldMetaData fmd) {\n                         fmd.setTypeOverride(toOverrideType(((Type) anno).\n                             value()));\n                     break;\n+                case CONVERT:\n+                    if (isMetaDataMode() && !((Convert) anno).disableConversion())\n+                        fmd.setConverter(((Convert) anno).converter());\n+                    break;\n                 default:\n                     throw new UnsupportedException(_loc.get(\"unsupported\", fmd,\n                         anno.toString()));"},{"sha":"45cc9478e1627601bbfd2c83be7034ca9961b53d","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/MetaDataTag.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/cb258aee424374a79b9d4fd7728d5ee5eb2cdc17/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/MetaDataTag.java","raw_url":"https://github.com/apache/openjpa/raw/cb258aee424374a79b9d4fd7728d5ee5eb2cdc17/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/MetaDataTag.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/MetaDataTag.java?ref=cb258aee424374a79b9d4fd7728d5ee5eb2cdc17","patch":"@@ -91,5 +91,6 @@\n     OPENJPA_VERSION,\n     // JPA 2.1\n     STOREDPROCEDURE_QUERIES,\n-    STOREDPROCEDURE_QUERY\n+    STOREDPROCEDURE_QUERY,\n+    CONVERT\n }"}]}

