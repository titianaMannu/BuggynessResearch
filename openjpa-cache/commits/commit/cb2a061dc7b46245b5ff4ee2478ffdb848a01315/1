{"sha":"cb2a061dc7b46245b5ff4ee2478ffdb848a01315","node_id":"MDY6Q29tbWl0MjA2MzY0OmNiMmEwNjFkYzdiNDYyNDViNWZmNGVlMjQ3OGZmZGI4NDhhMDEzMTU=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-10-24T04:17:59Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-10-24T04:17:59Z"},"message":"OPENJPA-113 with testcase\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@587775 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"fa271a49f13afa055fc1bac1771e2afd7b8390cb","url":"https://api.github.com/repos/apache/openjpa/git/trees/fa271a49f13afa055fc1bac1771e2afd7b8390cb"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/cb2a061dc7b46245b5ff4ee2478ffdb848a01315","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/cb2a061dc7b46245b5ff4ee2478ffdb848a01315","html_url":"https://github.com/apache/openjpa/commit/cb2a061dc7b46245b5ff4ee2478ffdb848a01315","comments_url":"https://api.github.com/repos/apache/openjpa/commits/cb2a061dc7b46245b5ff4ee2478ffdb848a01315/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"92919929f81a32dd451c1f2116dbbcf4acff860d","url":"https://api.github.com/repos/apache/openjpa/commits/92919929f81a32dd451c1f2116dbbcf4acff860d","html_url":"https://github.com/apache/openjpa/commit/92919929f81a32dd451c1f2116dbbcf4acff860d"}],"stats":{"total":126,"additions":126,"deletions":0},"files":[{"sha":"067be5761c71e77f5b960e3963d3ac11bc3cbdf0","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMapping.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/cb2a061dc7b46245b5ff4ee2478ffdb848a01315/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMapping.java","raw_url":"https://github.com/apache/openjpa/raw/cb2a061dc7b46245b5ff4ee2478ffdb848a01315/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMapping.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMapping.java?ref=cb2a061dc7b46245b5ff4ee2478ffdb848a01315","patch":"@@ -515,6 +515,13 @@ public void map(boolean adapt) {\n      */\n     public void mapJoin(boolean adapt, boolean joinRequired) {\n         Table table = _info.getTable(this, joinRequired, adapt);\n+\n+        if(table != null && table.equals(getDefiningMapping().getTable())) {\n+            // Don't create a join if the field's table is the same as the\n+            // class's table. \n+            table = null;\n+        }\n+\n         ForeignKey join = null;\n         if (table != null)\n             join = _info.getJoin(this, table, adapt);"},{"sha":"04c8d1f20bfc3ab4e099990e5d001e37f2e8483e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/Item.java","status":"added","additions":77,"deletions":0,"changes":77,"blob_url":"https://github.com/apache/openjpa/blob/cb2a061dc7b46245b5ff4ee2478ffdb848a01315/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/Item.java","raw_url":"https://github.com/apache/openjpa/raw/cb2a061dc7b46245b5ff4ee2478ffdb848a01315/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/Item.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/Item.java?ref=cb2a061dc7b46245b5ff4ee2478ffdb848a01315","patch":"@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.simple;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name = \"ITEM\")\n+public class Item {\n+\n+    public int itemId;\n+    public String itemName;\n+    public java.math.BigDecimal itemPrice;\n+    public String itemData;\n+\n+    @Column(name = \"I_DATA\", table = \"ITEM\")\n+    public String getItemData() {\n+        return itemData;\n+    }\n+\n+    public void setItemData(String itemData) {\n+        this.itemData = itemData;\n+    }\n+\n+    @Id\n+    @Column(name = \"I_ID\", table = \"ITEM\")\n+    @GeneratedValue(strategy = GenerationType.AUTO)\n+    public int getItemId() {\n+        return itemId;\n+    }\n+\n+    public void setItemId(int itemId) {\n+        this.itemId = itemId;\n+    }\n+\n+    @Column(name = \"I_NAME\", table = \"ITEM\")\n+    public String getItemName() {\n+        return itemName;\n+    }\n+\n+    public void setItemName(String itemName) {\n+        this.itemName = itemName;\n+    }\n+\n+    @Basic\n+    @Column(name = \"I_PRICE\", table = \"ITEM\")\n+    public java.math.BigDecimal getItemPrice() {\n+        return itemPrice;\n+    }\n+\n+    public void setItemPrice(java.math.BigDecimal itemPrice) {\n+        this.itemPrice = itemPrice;\n+    }\n+\n+}\n\\ No newline at end of file"},{"sha":"afbdf9a368230d4c7d05a662655db217e6c298ed","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestJoin.java","status":"added","additions":42,"deletions":0,"changes":42,"blob_url":"https://github.com/apache/openjpa/blob/cb2a061dc7b46245b5ff4ee2478ffdb848a01315/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestJoin.java","raw_url":"https://github.com/apache/openjpa/raw/cb2a061dc7b46245b5ff4ee2478ffdb848a01315/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestJoin.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestJoin.java?ref=cb2a061dc7b46245b5ff4ee2478ffdb848a01315","patch":"@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.simple;\n+\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\n+import org.apache.openjpa.jdbc.meta.FieldMapping;\n+import org.apache.openjpa.persistence.JPAFacadeHelper;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+public class TestJoin extends SingleEMFTestCase {\n+\n+    public void setUp() {\n+        super.setUp(Item.class);\n+    }\n+\n+    /*\n+     * Verify that an entity does not create joins to itself.\n+     */\n+    public void testSelfJoin() {\n+        ClassMapping cm = (ClassMapping) JPAFacadeHelper.getMetaData(emf,\n+                Item.class);\n+        FieldMapping fm = cm.getFieldMapping(\"itemId\");\n+        assertNotNull(fm);\n+        assertNull(fm.getJoinForeignKey());\n+    }\n+}"}]}

