{"sha":"cbbe382ecda74174f567e2659a7fd2ccb5419abf","node_id":"MDY6Q29tbWl0MjA2MzY0OmNiYmUzODJlY2RhNzQxNzRmNTY3ZTI2NTlhN2ZkMmNjYjU0MTlhYmY=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2009-11-27T05:11:21Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2009-11-27T05:11:21Z"},"message":"OPENJPA-1402 - Improve concurrency by not locking relation field whenever appropriate for mixed lock manager.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@884744 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d4a648bf3d084ea5a491884bae19f6bd22b6522d","url":"https://api.github.com/repos/apache/openjpa/git/trees/d4a648bf3d084ea5a491884bae19f6bd22b6522d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/cbbe382ecda74174f567e2659a7fd2ccb5419abf","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/cbbe382ecda74174f567e2659a7fd2ccb5419abf","html_url":"https://github.com/apache/openjpa/commit/cbbe382ecda74174f567e2659a7fd2ccb5419abf","comments_url":"https://api.github.com/repos/apache/openjpa/commits/cbbe382ecda74174f567e2659a7fd2ccb5419abf/comments","author":null,"committer":null,"parents":[{"sha":"a1221ea36d7bb701ef0777478ea805856516b39a","url":"https://api.github.com/repos/apache/openjpa/commits/a1221ea36d7bb701ef0777478ea805856516b39a","html_url":"https://github.com/apache/openjpa/commit/a1221ea36d7bb701ef0777478ea805856516b39a"}],"stats":{"total":599,"additions":433,"deletions":166},"files":[{"sha":"f168688ac8791b42c2e261501539a303ade5d9ab","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCLockManager.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/cbbe382ecda74174f567e2659a7fd2ccb5419abf/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCLockManager.java","raw_url":"https://github.com/apache/openjpa/raw/cbbe382ecda74174f567e2659a7fd2ccb5419abf/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCLockManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCLockManager.java?ref=cbbe382ecda74174f567e2659a7fd2ccb5419abf","patch":"@@ -46,4 +46,9 @@\n      * produced by a FOR UPDATE select.\n      */\n     public void loadedForUpdate(OpenJPAStateManager sm);\n+\n+    /**\n+     * Return true if locking is not desired for relation fields.\n+     */\n+    public boolean skipRelationFieldLock();\n }"},{"sha":"1aaf7fa51b2d6610002f694a1b0c3a4e7efc3fff","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/MixedLockManager.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/cbbe382ecda74174f567e2659a7fd2ccb5419abf/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/MixedLockManager.java","raw_url":"https://github.com/apache/openjpa/raw/cbbe382ecda74174f567e2659a7fd2ccb5419abf/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/MixedLockManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/MixedLockManager.java?ref=cbbe382ecda74174f567e2659a7fd2ccb5419abf","patch":"@@ -128,4 +128,8 @@ protected void optimisticLockInternal(OpenJPAStateManager sm, int level,\n             }\n         }\n     }\n+\n+    public boolean skipRelationFieldLock() {\n+        return true;\n+    }\n }"},{"sha":"f166edaf8159b4dfb3a8308c428153aab209ab16","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/VersionStrategy.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/cbbe382ecda74174f567e2659a7fd2ccb5419abf/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/VersionStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/cbbe382ecda74174f567e2659a7fd2ccb5419abf/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/VersionStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/VersionStrategy.java?ref=cbbe382ecda74174f567e2659a7fd2ccb5419abf","patch":"@@ -24,7 +24,6 @@\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.sql.Result;\n import org.apache.openjpa.jdbc.sql.Select;\n-import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n import org.apache.openjpa.kernel.StoreManager;\n "},{"sha":"adc42007200f11aa665ae60fe664c78f83a1323d","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ColumnVersionStrategy.java","status":"modified","additions":9,"deletions":1,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/cbbe382ecda74174f567e2659a7fd2ccb5419abf/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ColumnVersionStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/cbbe382ecda74174f567e2659a7fd2ccb5419abf/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ColumnVersionStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ColumnVersionStrategy.java?ref=cbbe382ecda74174f567e2659a7fd2ccb5419abf","patch":"@@ -23,6 +23,7 @@\n import java.sql.SQLException;\n import java.util.Comparator;\n \n+import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.meta.VersionMappingInfo;\n@@ -34,6 +35,7 @@\n import org.apache.openjpa.jdbc.sql.Row;\n import org.apache.openjpa.jdbc.sql.RowManager;\n import org.apache.openjpa.jdbc.sql.Select;\n+import org.apache.openjpa.kernel.MixedLockLevels;\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n import org.apache.openjpa.kernel.StoreManager;\n import org.apache.openjpa.lib.util.Localizer;\n@@ -277,7 +279,13 @@ public boolean checkVersion(OpenJPAStateManager sm, JDBCStore store,\n         sel.select(cols);\n         sel.wherePrimaryKey(sm.getObjectId(), vers.getClassMapping(), store);\n \n-        Result res = sel.execute(store, null);\n+        // No need to lock version field (i.e. optimistic), except when version update is required (e.g. refresh) \n+        JDBCFetchConfiguration fetch = store.getFetchConfiguration();\n+        if (!updateVersion && fetch.getReadLockLevel() >= MixedLockLevels.LOCK_PESSIMISTIC_READ) {\n+            fetch = (JDBCFetchConfiguration) fetch.clone();\n+            fetch.setReadLockLevel(MixedLockLevels.LOCK_NONE);\n+        }\n+        Result res = sel.execute(store, fetch);\n         try {\n             if (!res.next())\n                 return false;"},{"sha":"944d04d46955184606d8613b42b64d27f0087c65","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","status":"modified","additions":11,"deletions":2,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/cbbe382ecda74174f567e2659a7fd2ccb5419abf/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/cbbe382ecda74174f567e2659a7fd2ccb5419abf/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java?ref=cbbe382ecda74174f567e2659a7fd2ccb5419abf","patch":"@@ -30,6 +30,7 @@\n import org.apache.openjpa.enhance.ReflectingPersistenceCapable;\n import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n+import org.apache.openjpa.jdbc.kernel.MixedLockManager;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.meta.Embeddable;\n import org.apache.openjpa.jdbc.meta.FieldMapping;\n@@ -53,6 +54,7 @@\n import org.apache.openjpa.jdbc.sql.Select;\n import org.apache.openjpa.jdbc.sql.SelectExecutor;\n import org.apache.openjpa.jdbc.sql.Union;\n+import org.apache.openjpa.kernel.LockManager;\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.lib.util.Localizer;\n@@ -65,6 +67,7 @@\n import org.apache.openjpa.util.MetaDataException;\n import org.apache.openjpa.util.OpenJPAId;\n import org.apache.openjpa.util.UnsupportedException;\n+\n import serp.util.Numbers;\n \n /**\n@@ -699,8 +702,14 @@ public void loadEagerJoin(OpenJPAStateManager sm, JDBCStore store,\n         \t}\n         }\n \n-        sm.storeObject(field.getIndex(), res.load(cls, store, fetch,\n-            eagerJoin(res.newJoins(), cls, false)));\n+        boolean isLocked = res.isLocking();\n+        try {\n+            res.setLocking(store.getLockManager().skipRelationFieldLock());\n+            sm.storeObject(field.getIndex(), res.load(cls, store, fetch,\n+                    eagerJoin(res.newJoins(), cls, false)));\n+        } finally {\n+            res.setLocking(isLocked);\n+        }\n \n         // reset mapped by is needed for OneToOne bidirectional relations\n         // having a mapped-by parent to correctly set the parent-child"},{"sha":"2e2b268c3769a1cdd9e20117d33b9bbce65742a8","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MergedResult.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/cbbe382ecda74174f567e2659a7fd2ccb5419abf/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MergedResult.java","raw_url":"https://github.com/apache/openjpa/raw/cbbe382ecda74174f567e2659a7fd2ccb5419abf/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MergedResult.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MergedResult.java?ref=cbbe382ecda74174f567e2659a7fd2ccb5419abf","patch":"@@ -97,6 +97,10 @@ public void close() {\n             _res[i].close();\n     }\n \n+    public void setLocking(boolean locking) {\n+        _res[_idx].setLocking(locking);\n+    }\n+\n     public boolean isLocking() {\n         return _res[_idx].isLocking();\n     }"},{"sha":"a6ae3a9206eaa7668683310e6cdb8ec90e45b7e3","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Result.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/cbbe382ecda74174f567e2659a7fd2ccb5419abf/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Result.java","raw_url":"https://github.com/apache/openjpa/raw/cbbe382ecda74174f567e2659a7fd2ccb5419abf/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Result.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Result.java?ref=cbbe382ecda74174f567e2659a7fd2ccb5419abf","patch":"@@ -78,6 +78,11 @@\n      */\n     public void close();\n \n+    /**\n+     * Set to true if row locking has been issued for the row.  \n+     */\n+    public void setLocking(boolean locking);\n+\n     /**\n      * If true, then any results loaded from this Result\n      * will be locked in the database."},{"sha":"139b452ee2ee494dd3a7c8c21655aebbc2a4724e","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractLockManager.java","status":"modified","additions":9,"deletions":3,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/cbbe382ecda74174f567e2659a7fd2ccb5419abf/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractLockManager.java","raw_url":"https://github.com/apache/openjpa/raw/cbbe382ecda74174f567e2659a7fd2ccb5419abf/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractLockManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractLockManager.java?ref=cbbe382ecda74174f567e2659a7fd2ccb5419abf","patch":"@@ -57,7 +57,7 @@ public StoreContext getContext() {\n      */\n     public void lockAll(Collection sms, int level, int timeout,\n         Object context) {\n-        for (Iterator itr = sms.iterator(); itr.hasNext();)\n+        for (Iterator<?> itr = sms.iterator(); itr.hasNext();)\n             lock((OpenJPAStateManager) itr.next(), level, timeout, context);\n     }\n \n@@ -76,8 +76,14 @@ public void endTransaction() {\n     /**\n      * Does nothing by default.\n      */\n-    public void close ()\n-\t{\n+    public void close () {\n \t}\n+\n+    /**\n+     * Default not to skip relation field to maintain PessimisticLockManager semantics. \n+     */\n+    public boolean skipRelationFieldLock() {\n+        return false;\n+    }\n }\n "},{"sha":"4e8cc9b515c0c9ed2032c06e120a8ef8d9fbe15e","filename":"openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lock/extended/LockScopeTestCase.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/cbbe382ecda74174f567e2659a7fd2ccb5419abf/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lock/extended/LockScopeTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/cbbe382ecda74174f567e2659a7fd2ccb5419abf/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lock/extended/LockScopeTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lock/extended/LockScopeTestCase.java?ref=cbbe382ecda74174f567e2659a7fd2ccb5419abf","patch":"@@ -68,6 +68,7 @@\n     \n     protected final String Any              = \".*\";\n     protected final String Select           = \"SELECT.*FROM.*\";\n+    protected final String SelectVersion    = \"SELECT.*version.*FROM.*\";\n     protected final String Where            = \".*WHERE.*\";\n //    protected final String Join             = \".*(JOIN){1}.*\";\n     protected final String NoJoin           = \"(JOIN){0}\";\n@@ -155,6 +156,15 @@ public void assertLockTestSQLs(String... expected) {\n         assertAllSQLAnyOrder(expected);\n     }\n     \n+    public void assertLockTestNoSQLs(String... expected) {\n+        Log log = getDumpSQLLog(); \n+        if( log.isTraceEnabled()) {\n+            log.trace(\"\\r\\n\" + toString(sql));\n+            return;\n+        }\n+        assertNoneSQLAnyOrder(expected);\n+    }\n+\n     protected void logStack(Throwable t) {\n         StringWriter str = new StringWriter();\n         PrintWriter print = new PrintWriter(str);"},{"sha":"0ff371641b9acf3091a9bf08678996732bf98508","filename":"openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lock/extended/Test1x1LockScope.java","status":"modified","additions":93,"deletions":37,"changes":130,"blob_url":"https://github.com/apache/openjpa/blob/cbbe382ecda74174f567e2659a7fd2ccb5419abf/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lock/extended/Test1x1LockScope.java","raw_url":"https://github.com/apache/openjpa/raw/cbbe382ecda74174f567e2659a7fd2ccb5419abf/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lock/extended/Test1x1LockScope.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lock/extended/Test1x1LockScope.java?ref=cbbe382ecda74174f567e2659a7fd2ccb5419abf","patch":"@@ -43,8 +43,8 @@ public void setUp() {\n             , LSE1x1LfJT.class\n             , LSE1x1LfJTLzy.class\n             , LSE1x1Rt.class\n-            , \"openjpa.LockManager\", \"mixed\",\n-            \"openjpa.jdbc.SynchronizeMappings\", \"buildSchema(ForeignKeys=true)\"\n+            , \"openjpa.LockManager\", \"mixed\"\n+            , \"openjpa.jdbc.SynchronizeMappings\", \"buildSchema(ForeignKeys=true)\"\n         );\n         commonSetUp(LSE1x1Lf.class\n                 , LSE1x1LfLzy.class\n@@ -138,12 +138,18 @@ public void findPessimisticForcIncDbSQL(EntityManager em) {\n                         case db2:\n                             // SELECT t0.version, t0.firstName, t1.id, t1.version, t1.lastName FROM LSE1x1Lf t0\n                             //      LEFT OUTER JOIN LSE1x1Rt t1 ON t0.UNIRIGHT_ID = t1.id WHERE t0.id = ?\n-                            //      optimize for 1 row FOR READ ONLY WITH RR USE AND KEEP UPDATE LOCKS [params=(int) 1111202]\n+                            //      optimize for 1 row FOR READ ONLY WITH RR USE AND KEEP UPDATE LOCKS\n+                            //      [params=(int) 1111202]\n                             // SELECT t0.version FROM LSE1x1Rt t0 WHERE t0.id = ?\n-                            //      FOR READ ONLY WITH RR USE AND KEEP UPDATE LOCKS [params=(int) 1121202]                                                                                                                                 \n+                            //      -FOR READ ONLY WITH RR USE AND KEEP UPDATE LOCKS- [params=(int) 1121202]                                                                                                                                 \n                             // SELECT t0.version FROM LSE1x1Lf t0 WHERE t0.id = ?\n-                            //      FOR READ ONLY WITH RR USE AND KEEP UPDATE LOCKS [params=(int) 1111202]\n-                            assertLockTestSQLs(Select + joinTables + Where + DB2Lock);\n+                            //      -FOR READ ONLY WITH RR USE AND KEEP UPDATE LOCKS- [params=(int) 1111202]\n+                            assertLockTestSQLs(Select + joinTables + Where + DB2Lock,\n+                                    SelectVersion + NoJoin + Any + tableLfName + Any + NoJoin + Where + NoForUpdate,\n+                                    SelectVersion + NoJoin + Any + tableRtName + Any + NoJoin + Where + NoForUpdate\n+                                    );\n+                            assertLockTestNoSQLs(Select + NoJoin + Any + tableRtName + Any + NoJoin + Where + ForUpdate\n+                                    );\n                             break;\n                         case oracle:    // TODO: if jpa2, DO NOT lock LSE1x1RT using \"FOR UPDATE OF col\"\n                             // SELECT t0.version, t0.firstName, t1.id, t1.version, t1.lastName \n@@ -154,20 +160,25 @@ public void findPessimisticForcIncDbSQL(EntityManager em) {\n                             assertLockTestSQLs(Select + tableLfName + Any + tableRtName + Where + \"\\\\(\\\\+\\\\).*\"\n                                     + ForUpdate);\n                             break;\n-                        case derby:     //TODO: **Non-atomic lock.\n+                        case derby:     //-TODO: **Non-atomic lock.\n                             // The database is unable to lock this query.  Each object matching the query will be \n                             //  locked individually after it is loaded; however, it is technically possible that\n                             //  another transaction could modify the data before the lock is obtained.\n                             // SELECT t0.version, t0.firstName, t1.id, t1.version, t1.lastName FROM LSE1x1Lf t0\n                             //      LEFT OUTER JOIN LSE1x1Rt t1 ON t0.UNIRIGHT_ID = t1.id WHERE t0.id = ?\n                             //      [params=(int) 1111202]\n-                            // SELECT t0.id FROM LSE1x1Rt t0 WHERE t0.id = ? FOR UPDATE WITH RR [params=(int) 1121202]\n-                            // SELECT t0.version FROM LSE1x1Rt t0 WHERE t0.id = ? FOR UPDATE WITH RR [params=(int) 1121202]\n+                            // SELECT t0.version FROM LSE1x1Rt t0 WHERE t0.id = ? -FOR UPDATE WITH RR-\n+                            //      [params=(int) 1121202]\n                             // SELECT t0.id FROM LSE1x1Lf t0 WHERE t0.id = ? FOR UPDATE WITH RR [params=(int) 1111202]\n-                            // SELECT t0.version FROM LSE1x1Lf t0 WHERE t0.id = ? FOR UPDATE WITH RR [params=(int) 1111202]\n+                            // SELECT t0.version FROM LSE1x1Lf t0 WHERE t0.id = ? -FOR UPDATE WITH RR-\n+                            //      [params=(int) 1111202]\n                             assertLockTestSQLs(Select + joinTables + Where + NoForUpdate,\n                                     Select + NoJoin + Any + tableLfName + Any + NoJoin + Where + ForUpdate,\n-                                    Select + NoJoin + Any + tableRtName + Any + NoJoin + Where + ForUpdate\n+                                    SelectVersion + NoJoin + Any + tableLfName + Any + NoJoin + Where + NoForUpdate,\n+                                    SelectVersion + NoJoin + Any + tableRtName + Any + NoJoin + Where + NoForUpdate\n+                                    );\n+                            //-SELECT t0.id FROM LSE1x1Rt t0 WHERE t0.id = ? FOR UPDATE WITH RR [params=(int) 1121202]-\n+                            assertLockTestNoSQLs(Select + NoJoin + Any + tableRtName + Any + NoJoin + Where + ForUpdate\n                                     );\n                             break;\n                         default:\n@@ -184,7 +195,12 @@ public void queryPessimisticReadDbSQL(EntityManager em) {\n                             //      FOR READ ONLY WITH RS USE AND KEEP UPDATE LOCKS [params=(String) firstName%1111201]\n                             // SELECT t0.version FROM LSE1x1Rt t0 WHERE t0.id = ?  [params=(int) 1121201]\n                             // SELECT t0.version FROM LSE1x1Lf t0 WHERE t0.id = ?  [params=(int) 1111201]\n-                            assertLockTestSQLs(Select + joinTables + Where + DB2Lock);\n+                            assertLockTestSQLs(Select + joinTables + Where + DB2Lock,\n+                                    SelectVersion + NoJoin + Any + tableLfName + Any + NoJoin + Where + NoForUpdate,\n+                                    SelectVersion + NoJoin + Any + tableRtName + Any + NoJoin + Where + NoForUpdate\n+                                    );\n+                            assertLockTestNoSQLs(Select + NoJoin + Any + tableRtName + Any + NoJoin + Where + ForUpdate\n+                                    );\n                             break;\n                         case oracle:    // TODO: if jpa2, DO NOT lock LSE1x1RT using \"FOR UPDATE OF col\"\n                             // SELECT t0.id, t0.version, t0.firstName, t1.id, t1.version, t1.lastName \n@@ -196,20 +212,23 @@ public void queryPessimisticReadDbSQL(EntityManager em) {\n                             assertLockTestSQLs(Select + tableLfName + Any + tableRtName + Where + \"\\\\(\\\\+\\\\).*\"\n                                     + ForUpdate);\n                             break;\n-                        case derby:     //TODO: **Non-atomic lock.\n+                        case derby:     //-TODO: **Non-atomic lock.\n                             // The database is unable to lock this query.  Each object matching the query will be \n                             //  locked individually after it is loaded; however, it is technically possible that\n                             //  another transaction could modify the data before the lock is obtained.\n-                            //SELECT t0.id, t0.version, t0.firstName, t1.id, t1.version, t1.lastName FROM LSE1x1Lf t0\n+                            // SELECT t0.id, t0.version, t0.firstName, t1.id, t1.version, t1.lastName FROM LSE1x1Lf t0\n                             //      LEFT OUTER JOIN LSE1x1Rt t1 ON t0.UNIRIGHT_ID = t1.id\n                             //      WHERE (t0.firstName LIKE ? ESCAPE '\\') [params=(String) firstName%1111201]\n-                            // SELECT t0.id FROM LSE1x1Rt t0 WHERE t0.id = ? FOR UPDATE WITH RR [params=(int) 1121201]\n                             // SELECT t0.version FROM LSE1x1Rt t0 WHERE t0.id = ? [params=(int) 1121201]\n                             // SELECT t0.id FROM LSE1x1Lf t0 WHERE t0.id = ? FOR UPDATE WITH RR [params=(int) 1111201]\n                             // SELECT t0.version FROM LSE1x1Lf t0 WHERE t0.id = ? [params=(int) 1111201]\n                             assertLockTestSQLs(Select + joinTables + Where + NoForUpdate,\n                                     Select + NoJoin + Any + tableLfName + Any + NoJoin + Where + ForUpdate,\n-                                    Select + NoJoin + Any + tableRtName + Any + NoJoin + Where + ForUpdate\n+                                    SelectVersion + NoJoin + Any + tableLfName + Any + NoJoin + Where + NoForUpdate,\n+                                    SelectVersion + NoJoin + Any + tableRtName + Any + NoJoin + Where + NoForUpdate\n+                                    );\n+                            //-SELECT t0.id FROM LSE1x1Rt t0 WHERE t0.id = ? FOR UPDATE WITH RR [params=(int) 1121201]-\n+                            assertLockTestNoSQLs(Select + NoJoin + Any + tableRtName + Any + NoJoin + Where + ForUpdate\n                                     );\n                             break;\n                         default:\n@@ -250,7 +269,12 @@ public void namedQueryPessimisticWriteDbSql(EntityManager em) {\n                             //      FOR READ ONLY WITH RR USE AND KEEP UPDATE LOCKS [params=(String) firstName%1111201]\n                             // SELECT t0.version FROM LSE1x1Rt t0 WHERE t0.id = ?  [params=(int) 1121201]\n                             // SELECT t0.version FROM LSE1x1Lf t0 WHERE t0.id = ?  [params=(int) 1111201]\n-                            assertLockTestSQLs(Select + joinTables + Where + DB2Lock);\n+                            assertLockTestSQLs(Select + joinTables + Where + DB2Lock,\n+                                    SelectVersion + NoJoin + Any + tableLfName + Any + NoJoin + Where + NoForUpdate,\n+                                    SelectVersion + NoJoin + Any + tableRtName + Any + NoJoin + Where + NoForUpdate\n+                                    );\n+                            assertLockTestNoSQLs(Select + NoJoin + Any + tableRtName + Any + NoJoin + Where + ForUpdate\n+                                    );\n                             break;\n                         case oracle:    // TODO: if jpa2, DO NOT lock LSE1x1RT using \"FOR UPDATE OF col\"\n                             // SELECT t0.id, t0.version, t0.firstName, t1.id, t1.version, t1.lastName \n@@ -262,20 +286,23 @@ public void namedQueryPessimisticWriteDbSql(EntityManager em) {\n                             assertLockTestSQLs(Select + tableLfName + Any + tableRtName + Where + \"\\\\(\\\\+\\\\).*\"\n                                     + ForUpdate);\n                             break;\n-                        case derby:     //TODO: **Non-atomic lock.\n+                        case derby:     //-TODO: **Non-atomic lock.\n                             // The database is unable to lock this query.  Each object matching the query will be \n                             //  locked individually after it is loaded; however, it is technically possible that\n                             //  another transaction could modify the data before the lock is obtained.\n                             // SELECT t0.id, t0.version, t0.firstName, t1.id, t1.version, t1.lastName FROM LSE1x1Lf t0\n                             //      LEFT OUTER JOIN LSE1x1Rt t1 ON t0.UNIRIGHT_ID = t1.id\n                             //      WHERE (t0.firstName LIKE ? ESCAPE '\\') [params=(String) firstName%1111201]\n-                            // SELECT t0.id FROM LSE1x1Rt t0 WHERE t0.id = ? FOR UPDATE WITH RR [params=(int) 1121201]\n                             // SELECT t0.version FROM LSE1x1Rt t0 WHERE t0.id = ? [params=(int) 1121201]\n                             // SELECT t0.id FROM LSE1x1Lf t0 WHERE t0.id = ? FOR UPDATE WITH RR [params=(int) 1111201]\n                             // SELECT t0.version FROM LSE1x1Lf t0 WHERE t0.id = ? [params=(int) 1111201]\n                             assertLockTestSQLs(Select + joinTables + Where + NoForUpdate,\n                                     Select + NoJoin + Any + tableLfName + Any + NoJoin + Where + ForUpdate,\n-                                    Select + NoJoin + Any + tableRtName + Any + NoJoin + Where + ForUpdate\n+                                    SelectVersion + NoJoin + Any + tableLfName + Any + NoJoin + Where + NoForUpdate,\n+                                    SelectVersion + NoJoin + Any + tableRtName + Any + NoJoin + Where + NoForUpdate\n+                                    );\n+                            //-SELECT t0.id FROM LSE1x1Rt t0 WHERE t0.id = ? FOR UPDATE WITH RR [params=(int) 1121201]-\n+                            assertLockTestNoSQLs(Select + NoJoin + Any + tableRtName + Any + NoJoin + Where + ForUpdate\n                                     );\n                             break;\n                         default:\n@@ -579,10 +606,18 @@ public void findPessimisticForcIncDbSQL(EntityManager em) {\n                             // SELECT t0.version, t0.firstName, t2.id, t2.version, t2.lastName FROM LSE1x1LfJT t0 \n                             //      INNER JOIN Uni1x1LfJT_Uni1x1RT t1 ON t0.id = t1.LSE1X1LFJT_ID \n                             //      LEFT OUTER JOIN LSE1x1Rt t2 ON t1.UNIRIGHTJT_ID = t2.id WHERE t0.id = ?\n-                            //      optimize for 1 row FOR READ ONLY WITH RR USE AND KEEP UPDATE LOCKS [params=(int) 1112202]\n-                            // SELECT t0.version FROM LSE1x1Rt t0 WHERE t0.id = ?  FOR READ ONLY WITH RR USE AND KEEP UPDATE LOCKS [params=(int) 1122202]\n-                            // SELECT t0.version FROM LSE1x1LfJT t0 WHERE t0.id = ?  FOR READ ONLY WITH RR USE AND KEEP UPDATE LOCKS [params=(int) 1112202]\n-                            assertLockTestSQLs(Select + joinTables + Where + DB2Lock);\n+                            //      optimize for 1 row FOR READ ONLY WITH RR USE AND KEEP UPDATE LOCKS \n+                            //      [params=(int) 1112202]\n+                            // SELECT t0.version FROM LSE1x1Rt t0 WHERE t0.id = ? \n+                            //      FOR READ ONLY WITH RR USE AND KEEP UPDATE LOCKS [params=(int) 1122202]\n+                            // SELECT t0.version FROM LSE1x1LfJT t0 WHERE t0.id = ?\n+                            //      FOR READ ONLY WITH RR USE AND KEEP UPDATE LOCKS [params=(int) 1112202]\n+                            assertLockTestSQLs(Select + joinTables + Where + DB2Lock,\n+                                    SelectVersion + NoJoin + Any + tableLfName + Any + NoJoin + Where + NoForUpdate,\n+                                    SelectVersion + NoJoin + Any + tableRtName + Any + NoJoin + Where + NoForUpdate\n+                                    );\n+                            assertLockTestNoSQLs(Select + NoJoin + Any + tableRtName + Any + NoJoin + Where + ForUpdate\n+                                    );\n                             break;\n                         case oracle:    // TODO: If jpa2, DO NOT lock LSE1x1RT using \"FOR UDPATE OF col\"\n                             // SELECT t0.version, t0.firstName, t2.id, t2.version, t2.lastName \n@@ -594,7 +629,7 @@ public void findPessimisticForcIncDbSQL(EntityManager em) {\n                             assertLockTestSQLs(Select + tableLfName + Any + tableJTName + Any + tableRtName + Where\n                                     + \"\\\\(\\\\+\\\\).*\" + ForUpdate);\n                             break;\n-                        case derby:     //TODO: **Non-atomic lock, if jpa2/extended scope, LOCK Uni1x1LfJT_Uni1x1RT\n+                        case derby:     //-TODO: **Non-atomic lock, if jpa2/extended scope, LOCK Uni1x1LfJT_Uni1x1RT\n                                         // DO NOT lock LSE1x1Rt\n                             // The database is unable to lock this query.  Each object matching the query will be \n                             //  locked individually after it is loaded; however, it is technically possible that\n@@ -603,13 +638,18 @@ public void findPessimisticForcIncDbSQL(EntityManager em) {\n                             //      INNER JOIN Uni1x1LfJT_Uni1x1RT t1 ON t0.id = t1.LSE1X1LFJT_ID\n                             //      LEFT OUTER JOIN LSE1x1Rt t2 ON t1.UNIRIGHTJT_ID = t2.id WHERE t0.id = ?\n                             //      [params=(int) 1112202]\n-                            // SELECT t0.id FROM LSE1x1Rt t0 WHERE t0.id = ? FOR UPDATE WITH RR [params=(int) 1122202]\n-                            // SELECT t0.version FROM LSE1x1Rt t0 WHERE t0.id = ? FOR UPDATE WITH RR [params=(int) 1122202]\n+                            // SELECT t0.version FROM LSE1x1Rt t0 WHERE t0.id = ? -FOR UPDATE WITH RR- \n+                            //      [params=(int) 1122202]\n                             // SELECT t0.id FROM LSE1x1LfJT t0 WHERE t0.id = ? FOR UPDATE WITH RR [params=(int) 1112202]\n-                            // SELECT t0.version FROM LSE1x1LfJT t0 WHERE t0.id = ? FOR UPDATE WITH RR [params=(int) 1112202]\n+                            // SELECT t0.version FROM LSE1x1LfJT t0 WHERE t0.id = ? -FOR UPDATE WITH RR-\n+                            //      [params=(int) 1112202]\n                             assertLockTestSQLs(Select + joinTables + Where + NoForUpdate,\n                                     Select + NoJoin + Any + tableLfName + Any + NoJoin + Where + ForUpdate,\n-                                    Select + NoJoin + Any + tableRtName + Any + NoJoin + Where + ForUpdate\n+                                    SelectVersion + NoJoin + Any + tableLfName + Any + NoJoin + Where + NoForUpdate,\n+                                    SelectVersion + NoJoin + Any + tableRtName + Any + NoJoin + Where + NoForUpdate\n+                                    );\n+                            //-SELECT t0.id FROM LSE1x1Rt t0 WHERE t0.id = ? FOR UPDATE WITH RR [params=(int) 1122202]-\n+                            assertLockTestNoSQLs(Select + NoJoin + Any + tableRtName + Any + NoJoin + Where + ForUpdate\n                                     );\n                             break;\n                         default:\n@@ -627,7 +667,12 @@ public void queryPessimisticReadDbSQL(EntityManager em) {\n                             //      FOR READ ONLY WITH RS USE AND KEEP UPDATE LOCKS [params=(String) firstName%1112201]\n                             // SELECT t0.version FROM LSE1x1Rt t0 WHERE t0.id = ?  [params=(int) 1122201]\n                             // SELECT t0.version FROM LSE1x1LfJT t0 WHERE t0.id = ?  [params=(int) 1112201]\n-                            assertLockTestSQLs(Select + joinTables + Where + DB2Lock);\n+                            assertLockTestSQLs(Select + joinTables + Where + DB2Lock,\n+                                    SelectVersion + NoJoin + Any + tableLfName + Any + NoJoin + Where + NoForUpdate,\n+                                    SelectVersion + NoJoin + Any + tableRtName + Any + NoJoin + Where + NoForUpdate\n+                                    );\n+                            assertLockTestNoSQLs(Select + NoJoin + Any + tableRtName + Any + NoJoin + Where + ForUpdate\n+                                    );\n                             break;\n                         case oracle:    // TODO: If jpa2, DO NOT lock LSE1x1RT using \"FOR UDPATE OF col\"\n                             // SELECT t0.id, t0.version, t0.firstName, t2.id, t2.version, t2.lastName \n@@ -639,7 +684,7 @@ public void queryPessimisticReadDbSQL(EntityManager em) {\n                             assertLockTestSQLs(Select + tableLfName + Any + tableJTName + Any + tableRtName + Where\n                                     + \"\\\\(\\\\+\\\\).*\" + ForUpdate);\n                             break;\n-                        case derby:     //TODO: **Non-atomic lock, if jpa2/extended scope, LOCK Uni1x1LfJT_Uni1x1RT\n+                        case derby:     //-TODO: **Non-atomic lock, if jpa2/extended scope, LOCK Uni1x1LfJT_Uni1x1RT\n                                         // DO NOT lock LSE1x1Rt\n                             // The database is unable to lock this query.  Each object matching the query will be \n                             //  locked individually after it is loaded; however, it is technically possible that\n@@ -648,13 +693,16 @@ public void queryPessimisticReadDbSQL(EntityManager em) {\n                             //      INNER JOIN Uni1x1LfJT_Uni1x1RT t1 ON t0.id = t1.LSE1X1LFJT_ID \n                             //      LEFT OUTER JOIN LSE1x1Rt t2 ON t1.UNIRIGHTJT_ID = t2.id \n                             //      WHERE (t0.firstName LIKE ? ESCAPE '\\') [params=(String) firstName%1112201]\n-                            // SELECT t0.id FROM LSE1x1Rt t0 WHERE t0.id = ? FOR UPDATE WITH RR [params=(int) 1122201]\n                             // SELECT t0.version FROM LSE1x1Rt t0 WHERE t0.id = ? [params=(int) 1122201]\n                             // SELECT t0.id FROM LSE1x1LfJT t0 WHERE t0.id = ? FOR UPDATE WITH RR [params=(int) 1112201]\n                             // SELECT t0.version FROM LSE1x1LfJT t0 WHERE t0.id = ? [params=(int) 1112201]\n                             assertLockTestSQLs(Select + joinTables + Where + NoForUpdate,\n                                     Select + NoJoin + Any + tableLfName + Any + NoJoin + Where + ForUpdate,\n-                                    Select + NoJoin + Any + tableRtName + Any + NoJoin + Where + ForUpdate\n+                                    SelectVersion + NoJoin + Any + tableLfName + Any + NoJoin + Where + NoForUpdate,\n+                                    SelectVersion + NoJoin + Any + tableRtName + Any + NoJoin + Where + NoForUpdate\n+                                    );\n+                            //-SELECT t0.id FROM LSE1x1Rt t0 WHERE t0.id = ? FOR UPDATE WITH RR [params=(int) 1122201]-\n+                            assertLockTestNoSQLs(Select + NoJoin + Any + tableRtName + Any + NoJoin + Where + ForUpdate\n                                     );\n                             break;\n                         default:\n@@ -699,7 +747,12 @@ public void namedQueryPessimisticWriteDbSql(EntityManager em) {\n                             //      FOR READ ONLY WITH RR USE AND KEEP UPDATE LOCKS [params=(String) firstName%1112201]\n                             // SELECT t0.version FROM LSE1x1Rt t0 WHERE t0.id = ?  [params=(int) 1122201]\n                             // SELECT t0.version FROM LSE1x1LfJT t0 WHERE t0.id = ?  [params=(int) 1112201]\n-                            assertLockTestSQLs(Select + joinTables + Where + DB2Lock);\n+                            assertLockTestSQLs(Select + joinTables + Where + DB2Lock,\n+                                    SelectVersion + NoJoin + Any + tableLfName + Any + NoJoin + Where + NoForUpdate,\n+                                    SelectVersion + NoJoin + Any + tableRtName + Any + NoJoin + Where + NoForUpdate\n+                                    );\n+                            assertLockTestNoSQLs(Select + NoJoin + Any + tableRtName + Any + NoJoin + Where + ForUpdate\n+                                    );\n                             break;\n                         case oracle:    // TODO: If jpa2, DO NOT lock LSE1x1RT using \"FOR UDPATE OF col\"\n                             // SELECT t0.id, t0.version, t0.firstName, t2.id, t2.version, t2.lastName \n@@ -711,7 +764,7 @@ public void namedQueryPessimisticWriteDbSql(EntityManager em) {\n                             assertLockTestSQLs(Select + tableLfName + Any + tableJTName + Any + tableRtName + Where\n                                     + \"\\\\(\\\\+\\\\).*\" + ForUpdate);\n                             break;\n-                        case derby:     //TODO: **Non-atomic lock, if jpa2/extended scope, LOCK Uni1x1LfJT_Uni1x1RT\n+                        case derby:     //-TODO: **Non-atomic lock, if jpa2/extended scope, LOCK Uni1x1LfJT_Uni1x1RT\n                                         // DO NOT lock LSE1x1Rt\n                             // The database is unable to lock this query.  Each object matching the query will be \n                             //  locked individually after it is loaded; however, it is technically possible that\n@@ -720,13 +773,16 @@ public void namedQueryPessimisticWriteDbSql(EntityManager em) {\n                             //      INNER JOIN Uni1x1LfJT_Uni1x1RT t1 ON t0.id = t1.LSE1X1LFJT_ID\n                             //      LEFT OUTER JOIN LSE1x1Rt t2 ON t1.UNIRIGHTJT_ID = t2.id\n                             //      WHERE (t0.firstName LIKE ? ESCAPE '\\') [params=(String) firstName%1112201]\n-                            // SELECT t0.id FROM LSE1x1Rt t0 WHERE t0.id = ? FOR UPDATE WITH RR [params=(int) 1122201]\n                             // SELECT t0.version FROM LSE1x1Rt t0 WHERE t0.id = ? [params=(int) 1122201]\n                             // SELECT t0.id FROM LSE1x1LfJT t0 WHERE t0.id = ? FOR UPDATE WITH RR [params=(int) 1112201]\n                             // SELECT t0.version FROM LSE1x1LfJT t0 WHERE t0.id = ? [params=(int) 1112201]\n                             assertLockTestSQLs(Select + joinTables + Where + NoForUpdate,\n                                     Select + NoJoin + Any + tableLfName + Any + NoJoin + Where + ForUpdate,\n-                                    Select + NoJoin + Any + tableRtName + Any + NoJoin + Where + ForUpdate\n+                                    SelectVersion + NoJoin + Any + tableLfName + Any + NoJoin + Where + NoForUpdate,\n+                                    SelectVersion + NoJoin + Any + tableRtName + Any + NoJoin + Where + NoForUpdate\n+                                    );\n+                            //-SELECT t0.id FROM LSE1x1Rt t0 WHERE t0.id = ? FOR UPDATE WITH RR [params=(int) 1122201]\n+                            assertLockTestNoSQLs(Select + NoJoin + Any + tableRtName + Any + NoJoin + Where + ForUpdate\n                                     );\n                             break;\n                         default:"},{"sha":"ba891f9198a2de85c3aa9fee63791700f39cf8e0","filename":"openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/SequencedActionsTest.java","status":"modified","additions":17,"deletions":8,"changes":25,"blob_url":"https://github.com/apache/openjpa/blob/cbbe382ecda74174f567e2659a7fd2ccb5419abf/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/SequencedActionsTest.java","raw_url":"https://github.com/apache/openjpa/raw/cbbe382ecda74174f567e2659a7fd2ccb5419abf/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/SequencedActionsTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/SequencedActionsTest.java?ref=cbbe382ecda74174f567e2659a7fd2ccb5419abf","patch":"@@ -573,14 +573,16 @@ private void launchCommonSequence(TestThread thisThread ) {\n                         waitTime = (Integer) args[2];\n                     }\n                     if (waitTime < MinThreadWaitInMs / 2)\n-                        waitTime = MinThreadWaitInMs / 2;                    \n+                        waitTime = MinThreadWaitInMs / 2;\n+                    log.trace(\">> Started wait for \" + waitTime + \" ms\");\n                     if( waitThreadid != 0) {\n                         thisThread.wait(waitTime);\n                     } else {\n                         synchronized (this) {\n                             wait(waitTime);\n                         }\n                     }\n+                    log.trace(\"<< Ended wait\");\n                     break;\n \n                 case EmployeeNotNull:\n@@ -725,7 +727,7 @@ private void launchCommonSequence(TestThread thisThread ) {\n                         new ArrayList<TestThread>(threads);\n                     while (proceedThread.size() > 0\n                         && System.currentTimeMillis() < endTime) {\n-                        for (Thread thread : proceedThread) {\n+                        for (TestThread thread : proceedThread) {\n                             if (thread.isAlive()) {\n                                 log.trace(thread + \" is still alive, wait\" +\n                                     \" for 500ms and try again.\");\n@@ -739,6 +741,9 @@ private void launchCommonSequence(TestThread thisThread ) {\n                                 continue;\n                             } else {\n                                 deadThreads++;\n+                                if(thread.assertError != null){\n+                                    throw thread.assertError;\n+                                }\n                                 proceedThread.remove(thread);\n                                 break;\n                             }\n@@ -823,8 +828,8 @@ private void launchCommonSequence(TestThread thisThread ) {\n                 logStack(ex);\n             } catch (Error err) {\n                 // only remember the first exception caught\n-                if (thisThread.throwable == null) {\n-                    thisThread.throwable = err;\n+                if (thisThread.assertError == null) {\n+                    thisThread.assertError = err;\n                 }\n                 log.trace(\"Caught exception and continue: \" + err);\n                 logStack(err);\n@@ -852,11 +857,14 @@ private void launchCommonSequence(TestThread thisThread ) {\n                 }\n             }\n             em.close();\n-            Throwable firstThrowable = thisThread.throwable;\n-            if (firstThrowable != null) {\n-                if( firstThrowable instanceof Error )\n-                    throw (Error)firstThrowable;\n+            if (thisThread.assertError != null) {\n+                throw thisThread.assertError;\n             }\n+//            Throwable firstThrowable = thisThread.throwable;            \n+//            if (firstThrowable != null) {\n+//                if( firstThrowable instanceof Error )\n+//                    throw (Error)firstThrowable;\n+//            }\n             log.trace(\"<<<< Sequenced Test: Threads=\" + threadToRun + '/'\n                 + numThreads);\n         }\n@@ -927,6 +935,7 @@ private boolean matchExpectedException(Class<?> expected,\n         private Map<Integer, LockEmployee> employees = null;\n \n         public Throwable throwable = null;\n+        public Error assertError = null;\n         public boolean systemRolledback = false;\n \n         public TestThread(int threadToRun, Object[][]... actions) {"},{"sha":"fcf494bef732a38642c8347488e741e17256d657","filename":"openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestMixedLockManagerDeadlock.java","status":"modified","additions":9,"deletions":2,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/cbbe382ecda74174f567e2659a7fd2ccb5419abf/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestMixedLockManagerDeadlock.java","raw_url":"https://github.com/apache/openjpa/raw/cbbe382ecda74174f567e2659a7fd2ccb5419abf/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestMixedLockManagerDeadlock.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestMixedLockManagerDeadlock.java?ref=cbbe382ecda74174f567e2659a7fd2ccb5419abf","patch":"@@ -48,6 +48,7 @@ public void setUp() {\n \n     /* ======== Find dead lock exception test ============*/\n     public void testFindDeadLockException() {\n+        commonFindTest(\"testFindDeadLockException\", LockModeType.READ, null); \n         commonFindTest(\"testFindDeadLockException\", LockModeType.WRITE, dbType == DBType.oracle ? null\n                 : ExpectingOptimisticLockExClass);\n         commonFindTest(\"testFindDeadLockException\", LockModeType.PESSIMISTIC_WRITE, ExpectingAnyLockExClass);\n@@ -73,6 +74,7 @@ private void commonFindTest( String testName,\n             \n             {Act.WaitAllChildren},\n             {Act.TestException, 1, t1Exceptions},\n+            {Act.RollbackTx}\n         };\n         Object[][] thread1 = {\n             {Act.CreateEm},\n@@ -81,6 +83,7 @@ private void commonFindTest( String testName,\n             {Act.Flush},            \n \n             {Act.Notify, 0},\n+            {Act.Sleep, 1000},\n             {Act.FindWithLock, 1, t1Lock},            \n \n             {Act.RollbackTx},\n@@ -90,10 +93,11 @@ private void commonFindTest( String testName,\n     \n     /* ======== named query dead lock exception test ============*/\n     public void testNamedQueryDeadLockException() {\n+        commonNamedQueryTest(\"testNamedQueryDeadLockException\", LockModeType.READ, null);\n         commonNamedQueryTest(\"testNamedQueryDeadLockException\", LockModeType.WRITE, dbType == DBType.oracle ? null\n                 : ExpectingOptimisticLockExClass);\n-        commonNamedQueryTest(\"testNamedQueryDeadLockException\", LockModeType.PESSIMISTIC_FORCE_INCREMENT,\n-                ExpectingAnyLockExClass);\n+//      commonNamedQueryTest(\"testNamedQueryDeadLockException\", LockModeType.PESSIMISTIC_FORCE_INCREMENT,\n+//      ExpectingAnyLockExClass);\n     }\n \n     private void commonNamedQueryTest( String testName, \n@@ -116,6 +120,8 @@ private void commonNamedQueryTest( String testName,\n             \n             {Act.WaitAllChildren},\n             {Act.TestException, 1, t1Exceptions},\n+\n+            {Act.RollbackTx}\n         };\n         Object[][] thread1 = {\n             {Act.CreateEm},\n@@ -124,6 +130,7 @@ private void commonNamedQueryTest( String testName,\n             {Act.Flush},            \n \n             {Act.Notify, 0},\n+            {Act.Sleep, 1000},\n             {Act.NamedQueryWithLock, \"findEmployeeById\", 1, t1Lock, \"openjpa.hint.IgnorePreparedQuery\", true},            \n \n             {Act.RollbackTx},"},{"sha":"f19be88af7c318fb849ccfa857dbf8dcdb27e0b0","filename":"openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestMixedLockManagerFindPermutation.java","status":"modified","additions":11,"deletions":19,"changes":30,"blob_url":"https://github.com/apache/openjpa/blob/cbbe382ecda74174f567e2659a7fd2ccb5419abf/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestMixedLockManagerFindPermutation.java","raw_url":"https://github.com/apache/openjpa/raw/cbbe382ecda74174f567e2659a7fd2ccb5419abf/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestMixedLockManagerFindPermutation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestMixedLockManagerFindPermutation.java?ref=cbbe382ecda74174f567e2659a7fd2ccb5419abf","patch":"@@ -38,7 +38,7 @@ public void testFindReadRead() {\n         commonFindTest(\n             \"testFind(Read,Commit/Read,Commit)\",\n             LockModeType.READ, Act.CommitTx, 1, null, \n-            LockModeType.READ, Act.CommitTx, 0, ExpectingOptimisticLockExClass);\n+            LockModeType.READ, Act.CommitTx, 1, ExpectingOptimisticLockExClass);\n         commonFindTest(\n             \"testFind(Read,Commit/Read,Rollback)\",\n             LockModeType.READ, Act.CommitTx, 1, null,\n@@ -49,8 +49,7 @@ public void testFindReadWrite() {\n         commonFindTest(\n             \"testFind(Read,Commit/Write,Commit)\",\n             LockModeType.READ, Act.CommitTx, 1, null,\n-            LockModeType.WRITE, Act.CommitTx, 0,\n-                ExpectingOptimisticLockExClass);\n+            LockModeType.WRITE, Act.CommitTx, 1, ExpectingOptimisticLockExClass);\n         commonFindTest(\n             \"testFind(Read,Commit/Write,Rollback)\",\n             LockModeType.READ, Act.CommitTx, 1, null,\n@@ -95,7 +94,7 @@ public void testFindWriteRead() {\n         commonFindTest(\n             \"testFind(Write,Commit/Read,Commit)\",\n             LockModeType.WRITE, Act.CommitTx, 1, null, \n-            LockModeType.READ, Act.CommitTx, 0, ExpectingOptimisticLockExClass);\n+            LockModeType.READ, Act.CommitTx, 1, ExpectingOptimisticLockExClass);\n         commonFindTest(\n             \"testFind(Write,Commit/Read,Rollback)\",\n             LockModeType.WRITE, Act.CommitTx, 1, null,\n@@ -106,8 +105,7 @@ public void testFindWriteWrite() {\n         commonFindTest(\n             \"testFind(Write,Commit/Write,Commit)\",\n             LockModeType.WRITE, Act.CommitTx, 1, null,\n-            LockModeType.WRITE, Act.CommitTx, 0,\n-                ExpectingOptimisticLockExClass);\n+            LockModeType.WRITE, Act.CommitTx, 1, ExpectingOptimisticLockExClass);\n         commonFindTest(\n             \"testFind(Write,Commit/Write,Rollback)\",\n             LockModeType.WRITE, Act.CommitTx, 1, null,\n@@ -139,8 +137,7 @@ public void testFindWritePessimisticWrite() {\n     public void testFindWritePessimisticForceInc() {\n         commonFindTest(\n             \"testFind(Write,Commit/PessimisticForceInc,Commit)\",\n-            LockModeType.WRITE, Act.CommitTx, 1,\n-            ExpectingOptimisticLockExClass, \n+            LockModeType.WRITE, Act.CommitTx, 1, ExpectingOptimisticLockExClass, \n             LockModeType.PESSIMISTIC_FORCE_INCREMENT, Act.CommitTx, 1, null);\n         commonFindTest(\n             \"testFind(Write,Commit/PessimisticForceInc,Rollback)\",\n@@ -153,7 +150,7 @@ public void testFindPessimisticReadRead() {\n         commonFindTest(\n             \"testFind(PessimisticRead,Commit/Read,Commit)\",\n             LockModeType.PESSIMISTIC_READ, Act.CommitTx, 1, null, \n-            LockModeType.READ, Act.CommitTx, 0, ExpectingOptimisticLockExClass);\n+            LockModeType.READ, Act.CommitTx, 1, ExpectingOptimisticLockExClass);\n         commonFindTest(\n             \"testFind(PessimisticRead,Commit/Read,Rollback)\",\n             LockModeType.PESSIMISTIC_READ, Act.CommitTx, 1, null,\n@@ -164,8 +161,7 @@ public void testFindPessimisticReadWrite() {\n         commonFindTest(\n             \"testFind(PessimisticRead,Commit/Write,Commit)\",\n             LockModeType.PESSIMISTIC_READ, Act.CommitTx, 1, null,\n-            LockModeType.WRITE, Act.CommitTx, 0, \n-                ExpectingOptimisticLockExClass);\n+            LockModeType.WRITE, Act.CommitTx, 1, ExpectingOptimisticLockExClass);\n         commonFindTest(\n             \"testFind(PessimisticRead,Commit/Write,Rollback)\",\n             LockModeType.PESSIMISTIC_READ, Act.CommitTx, 1, null,\n@@ -177,12 +173,10 @@ public void testFindPessimisticReadPessimisticRead() {\n             \"testFind(PessimisticRead,Commit/PessimisticRead,Commit)\",\n             LockModeType.PESSIMISTIC_READ, Act.CommitTx, 1, null, \n             LockModeType.PESSIMISTIC_READ, Act.CommitTx, 0, null);\n-//                ExpectingOptimisticLockExClass);\n         commonFindTest(\n             \"testFind(PessimisticRead,Commit/PessimisticRead,Rollback)\",\n             LockModeType.PESSIMISTIC_READ, Act.CommitTx, 1, null,\n             LockModeType.PESSIMISTIC_READ, Act.RollbackTx, 0, null); \n-//                ExpectingOptimisticLockExClass);\n     }\n     \n     public void testFindPessimisticReadPessimisticWrite() {\n@@ -212,7 +206,7 @@ public void testFindPessimsiticWriteRead() {\n         commonFindTest(\n             \"testFind(PessimsiticWrite,Commit/Read,Commit)\",\n             LockModeType.PESSIMISTIC_WRITE, Act.CommitTx, 1, null, \n-            LockModeType.READ, Act.CommitTx, 0, ExpectingOptimisticLockExClass);\n+            LockModeType.READ, Act.CommitTx, 1, ExpectingOptimisticLockExClass);\n         commonFindTest(\n             \"testFind(PessimsiticWrite,Commit/Read,Rollback)\",\n             LockModeType.PESSIMISTIC_WRITE, Act.CommitTx, 1, null,\n@@ -223,8 +217,7 @@ public void testFindPessimsiticWriteWrite() {\n         commonFindTest(\n             \"testFind(PessimsiticWrite,Commit/Write,Commit)\",\n             LockModeType.PESSIMISTIC_WRITE, Act.CommitTx, 1, null,\n-            LockModeType.WRITE, Act.CommitTx, 0, \n-                ExpectingOptimisticLockExClass);\n+            LockModeType.WRITE, Act.CommitTx, 1, ExpectingOptimisticLockExClass);\n         commonFindTest(\n             \"testFind(PessimsiticWrite,Commit/Write,Rollback)\",\n             LockModeType.PESSIMISTIC_WRITE, Act.CommitTx, 1, null,\n@@ -269,7 +262,7 @@ public void testFindPessimsiticForceIncRead() {\n         commonFindTest(\n             \"testFind(PessimsiticForceInc,Commit/Read,Commit)\",\n             LockModeType.PESSIMISTIC_FORCE_INCREMENT, Act.CommitTx, 1, null, \n-            LockModeType.READ, Act.CommitTx, 0, ExpectingOptimisticLockExClass);\n+            LockModeType.READ, Act.CommitTx, 1, ExpectingOptimisticLockExClass);\n         commonFindTest(\n             \"testFind(PessimsiticForceInc,Commit/Read,Rollback)\",\n             LockModeType.PESSIMISTIC_FORCE_INCREMENT, Act.CommitTx, 1, null,\n@@ -280,8 +273,7 @@ public void testFindPessimsiticForceIncWrite() {\n         commonFindTest(\n             \"testFind(PessimsiticForceInc,Commit/Write,Commit)\",\n             LockModeType.PESSIMISTIC_FORCE_INCREMENT, Act.CommitTx, 1, null,\n-            LockModeType.WRITE, Act.CommitTx, 0,\n-                ExpectingOptimisticLockExClass);\n+            LockModeType.WRITE, Act.CommitTx, 1, ExpectingOptimisticLockExClass);\n         commonFindTest(\n             \"testFind(PessimsiticForceInc,Commit/Write,Rollback)\",\n             LockModeType.PESSIMISTIC_FORCE_INCREMENT, Act.CommitTx, 1, null,"},{"sha":"5f72d6c2f8659c15a0800cef3871cee6e3af2f9f","filename":"openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestMixedLockManagerLockPermutation.java","status":"modified","additions":29,"deletions":53,"changes":82,"blob_url":"https://github.com/apache/openjpa/blob/cbbe382ecda74174f567e2659a7fd2ccb5419abf/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestMixedLockManagerLockPermutation.java","raw_url":"https://github.com/apache/openjpa/raw/cbbe382ecda74174f567e2659a7fd2ccb5419abf/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestMixedLockManagerLockPermutation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestMixedLockManagerLockPermutation.java?ref=cbbe382ecda74174f567e2659a7fd2ccb5419abf","patch":"@@ -38,7 +38,7 @@ public void testLockReadRead() {\n         commonLockTest(\n             \"testLock(Read,Commit/Read,Commit)\",\n             LockModeType.READ, Act.CommitTx, 1, null, \n-            LockModeType.READ, Act.CommitTx, 0, ExpectingOptimisticLockExClass);\n+            LockModeType.READ, Act.CommitTx, 1, ExpectingOptimisticLockExClass);\n         commonLockTest(\n             \"testLock(Read,Commit/Read,Rollback)\",\n             LockModeType.READ, Act.CommitTx, 1, null,\n@@ -49,8 +49,7 @@ public void testLockReadWrite() {\n         commonLockTest(\n             \"testLock(Read,Commit/Write,Commit)\",\n             LockModeType.READ, Act.CommitTx, 1, null,\n-            LockModeType.WRITE, Act.CommitTx, 0,\n-                ExpectingOptimisticLockExClass);\n+            LockModeType.WRITE, Act.CommitTx, 1, ExpectingOptimisticLockExClass);\n         commonLockTest(\n             \"testLock(Read,Commit/Write,Rollback)\",\n             LockModeType.READ, Act.CommitTx, 1, null,\n@@ -95,7 +94,7 @@ public void testLockWriteRead() {\n         commonLockTest(\n             \"testLock(Write,Commit/Read,Commit)\",\n             LockModeType.WRITE, Act.CommitTx, 1, null, \n-            LockModeType.READ, Act.CommitTx, 0, ExpectingOptimisticLockExClass);\n+            LockModeType.READ, Act.CommitTx, 1, ExpectingOptimisticLockExClass);\n         commonLockTest(\n             \"testLock(Write,Commit/Read,Rollback)\",\n             LockModeType.WRITE, Act.CommitTx, 1, null,\n@@ -106,8 +105,7 @@ public void testLockWriteWrite() {\n         commonLockTest(\n             \"testLock(Write,Commit/Write,Commit)\",\n             LockModeType.WRITE, Act.CommitTx, 1, null,\n-            LockModeType.WRITE, Act.CommitTx, 0,\n-                ExpectingOptimisticLockExClass);\n+            LockModeType.WRITE, Act.CommitTx, 1, ExpectingOptimisticLockExClass);\n         commonLockTest(\n             \"testLock(Write,Commit/Write,Rollback)\",\n             LockModeType.WRITE, Act.CommitTx, 1, null,\n@@ -139,8 +137,7 @@ public void testLockWritePessimisticWrite() {\n     public void testLockWritePessimisticForceInc() {\n         commonLockTest(\n             \"testLock(Write,Commit/PessimisticForceInc,Commit)\",\n-            LockModeType.WRITE, Act.CommitTx, 1,\n-            ExpectingOptimisticLockExClass, \n+            LockModeType.WRITE, Act.CommitTx, 1, ExpectingOptimisticLockExClass, \n             LockModeType.PESSIMISTIC_FORCE_INCREMENT, Act.CommitTx, 1, null);\n         commonLockTest(\n             \"testLock(Write,Commit/PessimisticForceInc,Rollback)\",\n@@ -153,7 +150,7 @@ public void testLockPessimisticReadRead() {\n         commonLockTest(\n             \"testLock(PessimisticRead,Commit/Read,Commit)\",\n             LockModeType.PESSIMISTIC_READ, Act.CommitTx, 1, null, \n-            LockModeType.READ, Act.CommitTx, 0, ExpectingOptimisticLockExClass);\n+            LockModeType.READ, Act.CommitTx, 1, ExpectingOptimisticLockExClass);\n         commonLockTest(\n             \"testLock(PessimisticRead,Commit/Read,Rollback)\",\n             LockModeType.PESSIMISTIC_READ, Act.CommitTx, 1, null,\n@@ -164,8 +161,7 @@ public void testLockPessimisticReadWrite() {\n         commonLockTest(\n             \"testLock(PessimisticRead,Commit/Write,Commit)\",\n             LockModeType.PESSIMISTIC_READ, Act.CommitTx, 1, null,\n-            LockModeType.WRITE, Act.CommitTx, 0, \n-                ExpectingOptimisticLockExClass);\n+            LockModeType.WRITE, Act.CommitTx, 1, ExpectingOptimisticLockExClass);\n         commonLockTest(\n             \"testLock(PessimisticRead,Commit/Write,Rollback)\",\n             LockModeType.PESSIMISTIC_READ, Act.CommitTx, 1, null,\n@@ -176,47 +172,41 @@ public void testLockPessimisticReadPessimisticRead() {\n         commonLockTest(\n             \"testLock(PessimisticRead,Commit/PessimisticRead,Commit)\",\n             LockModeType.PESSIMISTIC_READ, Act.CommitTx, 1, null, \n-            LockModeType.PESSIMISTIC_READ, Act.CommitTx, 1, \n-                ExpectingOptimisticLockExClass);\n+            LockModeType.PESSIMISTIC_READ, Act.CommitTx, 1, ExpectingOptimisticLockExClass);\n         commonLockTest(\n             \"testLock(PessimisticRead,Commit/PessimisticRead,Rollback)\",\n             LockModeType.PESSIMISTIC_READ, Act.CommitTx, 1, null,\n-            LockModeType.PESSIMISTIC_READ, Act.RollbackTx, 1, \n-                ExpectingOptimisticLockExClass);\n+            LockModeType.PESSIMISTIC_READ, Act.RollbackTx, 1, ExpectingOptimisticLockExClass);\n     }\n     \n     public void testLockPessimisticReadPessimisticWrite() {\n         commonLockTest(\n             \"testLock(PessimisticRead,Commit/PessimisticWrite,Commit)\",\n             LockModeType.PESSIMISTIC_READ, Act.CommitTx, 1, null, \n-            LockModeType.PESSIMISTIC_WRITE, Act.CommitTx, 1, \n-                ExpectingOptimisticLockExClass);\n+            LockModeType.PESSIMISTIC_WRITE, Act.CommitTx, 1, ExpectingOptimisticLockExClass);\n         commonLockTest(\n             \"testLock(PessimisticRead,Commit/PessimisticWrite,Rollback)\",\n             LockModeType.PESSIMISTIC_READ, Act.CommitTx, 1, null,\n-            LockModeType.PESSIMISTIC_WRITE, Act.RollbackTx, 1,\n-                ExpectingOptimisticLockExClass);\n+            LockModeType.PESSIMISTIC_WRITE, Act.RollbackTx, 1, ExpectingOptimisticLockExClass);\n     }\n     \n     public void testLockPessimisticReadPessimisticForceInc() {\n         commonLockTest(\n             \"testLock(PessimisticRead,Commit/PessimisticForceInc,Commit)\",\n             LockModeType.PESSIMISTIC_READ, Act.CommitTx, 1, null, \n-            LockModeType.PESSIMISTIC_FORCE_INCREMENT, Act.CommitTx, 2,\n-                ExpectingOptimisticLockExClass);\n+            LockModeType.PESSIMISTIC_FORCE_INCREMENT, Act.CommitTx, 1, ExpectingOptimisticLockExClass);\n         commonLockTest(\n             \"testLock(PessimisticRead,Commit/PessimisticForceInc,Rollback)\",\n             LockModeType.PESSIMISTIC_READ, Act.CommitTx, 1, null,\n-            LockModeType.PESSIMISTIC_FORCE_INCREMENT, Act.RollbackTx, 1,\n-                ExpectingOptimisticLockExClass);\n+            LockModeType.PESSIMISTIC_FORCE_INCREMENT, Act.RollbackTx, 1, ExpectingOptimisticLockExClass);\n     }\n     \n     /* ======== Thread 1 : Pessimsitic Write Lock ============*/\n     public void testLockPessimsiticWriteRead() {\n         commonLockTest(\n             \"testLock(PessimsiticWrite,Commit/Read,Commit)\",\n             LockModeType.PESSIMISTIC_WRITE, Act.CommitTx, 1, null, \n-            LockModeType.READ, Act.CommitTx, 0, ExpectingOptimisticLockExClass);\n+            LockModeType.READ, Act.CommitTx, 1, ExpectingOptimisticLockExClass);\n         commonLockTest(\n             \"testLock(PessimsiticWrite,Commit/Read,Rollback)\",\n             LockModeType.PESSIMISTIC_WRITE, Act.CommitTx, 1, null,\n@@ -227,8 +217,7 @@ public void testLockPessimsiticWriteWrite() {\n         commonLockTest(\n             \"testLock(PessimsiticWrite,Commit/Write,Commit)\",\n             LockModeType.PESSIMISTIC_WRITE, Act.CommitTx, 1, null,\n-            LockModeType.WRITE, Act.CommitTx, 0, \n-                ExpectingOptimisticLockExClass);\n+            LockModeType.WRITE, Act.CommitTx, 1, ExpectingOptimisticLockExClass);\n         commonLockTest(\n             \"testLock(PessimsiticWrite,Commit/Write,Rollback)\",\n             LockModeType.PESSIMISTIC_WRITE, Act.CommitTx, 1, null,\n@@ -239,47 +228,41 @@ public void testLockPessimsiticWritePessimisticRead() {\n         commonLockTest(\n             \"testLock(PessimsiticWrite,Commit/PessimisticRead,Commit)\",\n             LockModeType.PESSIMISTIC_WRITE, Act.CommitTx, 1, null, \n-            LockModeType.PESSIMISTIC_READ, Act.CommitTx, 1, \n-                ExpectingOptimisticLockExClass);\n+            LockModeType.PESSIMISTIC_READ, Act.CommitTx, 1, ExpectingOptimisticLockExClass);\n         commonLockTest(\n             \"testLock(PessimsiticWrite,Commit/PessimisticRead,Rollback)\",\n             LockModeType.PESSIMISTIC_WRITE, Act.CommitTx, 1, null,\n-            LockModeType.PESSIMISTIC_READ, Act.RollbackTx, 1, \n-                ExpectingOptimisticLockExClass);\n+            LockModeType.PESSIMISTIC_READ, Act.RollbackTx, 1, ExpectingOptimisticLockExClass);\n     }\n     \n     public void testLockPessimsiticWritePessimisticWrite() {\n         commonLockTest(\n             \"testLock(PessimsiticWrite,Commit/PessimisticWrite,Commit)\",\n             LockModeType.PESSIMISTIC_WRITE, Act.CommitTx, 1, null, \n-            LockModeType.PESSIMISTIC_WRITE, Act.CommitTx, 1, \n-                ExpectingOptimisticLockExClass);\n+            LockModeType.PESSIMISTIC_WRITE, Act.CommitTx, 1, ExpectingOptimisticLockExClass);\n         commonLockTest(\n             \"testLock(PessimsiticWrite,Commit/PessimisticWrite,Rollback)\",\n             LockModeType.PESSIMISTIC_WRITE, Act.CommitTx, 1, null,\n-            LockModeType.PESSIMISTIC_WRITE, Act.RollbackTx, 1, \n-                ExpectingOptimisticLockExClass);\n+            LockModeType.PESSIMISTIC_WRITE, Act.RollbackTx, 1, ExpectingOptimisticLockExClass);\n     }\n     \n     public void testLockPessimsiticWritePessimisticForceInc() {\n         commonLockTest(\n             \"testLock(PessimsiticWrite,Commit/PessimisticForceInc,Commit)\",\n             LockModeType.PESSIMISTIC_WRITE, Act.CommitTx, 1, null, \n-            LockModeType.PESSIMISTIC_FORCE_INCREMENT, Act.CommitTx, 2, \n-                ExpectingOptimisticLockExClass);\n+            LockModeType.PESSIMISTIC_FORCE_INCREMENT, Act.CommitTx, 1, ExpectingOptimisticLockExClass);\n         commonLockTest(\n             \"testLock(PessimsiticWrite,Commit/PessimisticForceInc,Rollback)\",\n             LockModeType.PESSIMISTIC_WRITE, Act.CommitTx, 1, null,\n-            LockModeType.PESSIMISTIC_FORCE_INCREMENT, Act.RollbackTx, 1,\n-                ExpectingOptimisticLockExClass);\n+            LockModeType.PESSIMISTIC_FORCE_INCREMENT, Act.RollbackTx, 1, ExpectingOptimisticLockExClass);\n     }\n     \n     /* ======== Thread 1 : Pessimsitic Force Increment Lock ============*/\n     public void testLockPessimsiticForceIncRead() {\n         commonLockTest(\n             \"testLock(PessimsiticForceInc,Commit/Read,Commit)\",\n             LockModeType.PESSIMISTIC_FORCE_INCREMENT, Act.CommitTx, 1, null, \n-            LockModeType.READ, Act.CommitTx, 0, ExpectingOptimisticLockExClass);\n+            LockModeType.READ, Act.CommitTx, 1, ExpectingOptimisticLockExClass);\n         commonLockTest(\n             \"testLock(PessimsiticForceInc,Commit/Read,Rollback)\",\n             LockModeType.PESSIMISTIC_FORCE_INCREMENT, Act.CommitTx, 1, null,\n@@ -290,8 +273,7 @@ public void testLockPessimsiticForceIncWrite() {\n         commonLockTest(\n             \"testLock(PessimsiticForceInc,Commit/Write,Commit)\",\n             LockModeType.PESSIMISTIC_FORCE_INCREMENT, Act.CommitTx, 1, null,\n-            LockModeType.WRITE, Act.CommitTx, 0,\n-                ExpectingOptimisticLockExClass);\n+            LockModeType.WRITE, Act.CommitTx, 1, ExpectingOptimisticLockExClass);\n         commonLockTest(\n             \"testLock(PessimsiticForceInc,Commit/Write,Rollback)\",\n             LockModeType.PESSIMISTIC_FORCE_INCREMENT, Act.CommitTx, 1, null,\n@@ -302,39 +284,33 @@ public void testLockPessimsiticForceIncPessimisticRead() {\n         commonLockTest(\n             \"testLock(PessimsiticForceInc,Commit/PessimisticRead,Commit)\",\n             LockModeType.PESSIMISTIC_FORCE_INCREMENT, Act.CommitTx, 1, null, \n-            LockModeType.PESSIMISTIC_READ, Act.CommitTx, 1, \n-                ExpectingOptimisticLockExClass);\n+            LockModeType.PESSIMISTIC_READ, Act.CommitTx, 1, ExpectingOptimisticLockExClass);\n         commonLockTest(\n             \"testLock(PessimsiticForceInc,Commit/PessimisticRead,Rollback)\",\n             LockModeType.PESSIMISTIC_FORCE_INCREMENT, Act.CommitTx, 1, null,\n-            LockModeType.PESSIMISTIC_READ, Act.RollbackTx, 1, \n-                ExpectingOptimisticLockExClass);\n+            LockModeType.PESSIMISTIC_READ, Act.RollbackTx, 1, ExpectingOptimisticLockExClass);\n     }\n     \n     public void testLockPessimsiticForceIncPessimisticWrite() {\n         commonLockTest(\n             \"testLock(PessimsiticForceInc,Commit/PessimisticWrite,Commit)\",\n             LockModeType.PESSIMISTIC_FORCE_INCREMENT, Act.CommitTx, 1, null, \n-            LockModeType.PESSIMISTIC_WRITE, Act.CommitTx, 1, \n-                ExpectingOptimisticLockExClass);\n+            LockModeType.PESSIMISTIC_WRITE, Act.CommitTx, 1, ExpectingOptimisticLockExClass);\n         commonLockTest(\n             \"testLock(PessimsiticForceInc,Commit/PessimisticWrite,Rollback)\",\n             LockModeType.PESSIMISTIC_FORCE_INCREMENT, Act.CommitTx, 1, null,\n-            LockModeType.PESSIMISTIC_WRITE, Act.RollbackTx, 1, \n-                ExpectingOptimisticLockExClass);\n+            LockModeType.PESSIMISTIC_WRITE, Act.RollbackTx, 1, ExpectingOptimisticLockExClass);\n     }\n     \n     public void testLockPessimsiticForceIncPessimisticForceInc() {\n         commonLockTest(\n             \"testLock(PessimsiticForceInc,Commit/PessimisticForceInc,Commit)\",\n             LockModeType.PESSIMISTIC_FORCE_INCREMENT, Act.CommitTx, 1, null, \n-            LockModeType.PESSIMISTIC_FORCE_INCREMENT, Act.CommitTx, 2, \n-                ExpectingOptimisticLockExClass);\n+            LockModeType.PESSIMISTIC_FORCE_INCREMENT, Act.CommitTx, 1, ExpectingOptimisticLockExClass);\n         commonLockTest(\n             \"testLock(PessimsiticForceInc,Commit/PessimisticForceInc,Rollback)\",\n             LockModeType.PESSIMISTIC_FORCE_INCREMENT, Act.CommitTx, 1, null,\n-            LockModeType.PESSIMISTIC_FORCE_INCREMENT, Act.RollbackTx, 1, \n-                ExpectingOptimisticLockExClass);\n+            LockModeType.PESSIMISTIC_FORCE_INCREMENT, Act.RollbackTx, 1, ExpectingOptimisticLockExClass);\n     }\n \n     private void commonLockTest( String testName, "},{"sha":"5a5527c258c5f4f6854db7f1e4567700be7fe90e","filename":"openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestMixedLockManagerRefreshPermutation.java","status":"modified","additions":9,"deletions":16,"changes":25,"blob_url":"https://github.com/apache/openjpa/blob/cbbe382ecda74174f567e2659a7fd2ccb5419abf/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestMixedLockManagerRefreshPermutation.java","raw_url":"https://github.com/apache/openjpa/raw/cbbe382ecda74174f567e2659a7fd2ccb5419abf/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestMixedLockManagerRefreshPermutation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestMixedLockManagerRefreshPermutation.java?ref=cbbe382ecda74174f567e2659a7fd2ccb5419abf","patch":"@@ -107,8 +107,7 @@ public void testRefreshWriteWrite() {\n         commonRefreshTest(\n             \"testRefresh(Write,Commit/Write,Commit)\",\n             LockModeType.WRITE, Act.CommitTx, 2, null,\n-            LockModeType.WRITE, Act.CommitTx, 2,\n-                ExpectingOptimisticLockExClass);\n+            LockModeType.WRITE, Act.CommitTx, 2, ExpectingOptimisticLockExClass);\n         commonRefreshTest(\n             \"testRefresh(Write,Commit/Write,Rollback)\",\n             LockModeType.WRITE, Act.CommitTx, 2, null,\n@@ -140,8 +139,7 @@ public void testRefreshWritePessimisticWrite() {\n     public void testRefreshWritePessimisticForceInc() {\n         commonRefreshTest(\n             \"testRefresh(Write,Commit/PessimisticForceInc,Commit)\",\n-            LockModeType.WRITE, Act.CommitTx, 2,\n-            ExpectingOptimisticLockExClass,\n+            LockModeType.WRITE, Act.CommitTx, 2, ExpectingOptimisticLockExClass,\n             LockModeType.PESSIMISTIC_FORCE_INCREMENT, Act.CommitTx, 2, null);\n         commonRefreshTest(\n             \"testRefresh(Write,Commit/PessimisticForceInc,Rollback)\",\n@@ -165,8 +163,7 @@ public void testRefreshPessimisticReadWrite() {\n         commonRefreshTest(\n             \"testRefresh(PessimisticRead,Commit/Write,Commit)\",\n             LockModeType.PESSIMISTIC_READ, Act.CommitTx, 2, null,\n-            LockModeType.WRITE, Act.CommitTx, 2, \n-                ExpectingOptimisticLockExClass);\n+            LockModeType.WRITE, Act.CommitTx, 2, ExpectingOptimisticLockExClass);\n         commonRefreshTest(\n             \"testRefresh(PessimisticRead,Commit/Write,Rollback)\",\n             LockModeType.PESSIMISTIC_READ, Act.CommitTx, 2, null,\n@@ -206,7 +203,7 @@ public void testRefreshPessimisticReadPessimisticForceInc() {\n             LockModeType.PESSIMISTIC_FORCE_INCREMENT, Act.RollbackTx, 2, null);\n     }\n     \n-    /* ======== Thread 1 : Pessimsitic Write Lock ============*/\n+    /* ======== Thread 1 : Pessimistic Write Lock ============*/\n     public void testRefreshPessimsiticWriteRead() {\n         commonRefreshTest(\n             \"testRefresh(PessimsiticWrite,Commit/Read,Commit)\",\n@@ -222,8 +219,7 @@ public void testRefreshPessimsiticWriteWrite() {\n         commonRefreshTest(\n             \"testRefresh(PessimsiticWrite,Commit/Write,Commit)\",\n             LockModeType.PESSIMISTIC_WRITE, Act.CommitTx, 2, null,\n-            LockModeType.WRITE, Act.CommitTx, 2, \n-                ExpectingOptimisticLockExClass);\n+            LockModeType.WRITE, Act.CommitTx, 2, ExpectingOptimisticLockExClass);\n         commonRefreshTest(\n             \"testRefresh(PessimsiticWrite,Commit/Write,Rollback)\",\n             LockModeType.PESSIMISTIC_WRITE, Act.CommitTx, 2, null,\n@@ -268,7 +264,7 @@ public void testRefreshPessimsiticForceIncRead() {\n         commonRefreshTest(\n             \"testRefresh(PessimsiticForceInc,Commit/Read,Commit)\",\n             LockModeType.PESSIMISTIC_FORCE_INCREMENT, Act.CommitTx, 2, null, \n-            LockModeType.READ, Act.CommitTx, 0, ExpectingOptimisticLockExClass);\n+            LockModeType.READ, Act.CommitTx, 2, ExpectingOptimisticLockExClass);\n         commonRefreshTest(\n             \"testRefresh(PessimsiticForceInc,Commit/Read,Rollback)\",\n             LockModeType.PESSIMISTIC_FORCE_INCREMENT, Act.CommitTx, 2, null,\n@@ -279,8 +275,7 @@ public void testRefreshPessimsiticForceIncWrite() {\n         commonRefreshTest(\n             \"testRefresh(PessimsiticForceInc,Commit/Write,Commit)\",\n             LockModeType.PESSIMISTIC_FORCE_INCREMENT, Act.CommitTx, 2, null,\n-            LockModeType.WRITE, Act.CommitTx, 0,\n-                ExpectingOptimisticLockExClass);\n+            LockModeType.WRITE, Act.CommitTx, 2, ExpectingOptimisticLockExClass);\n         commonRefreshTest(\n             \"testRefresh(PessimsiticForceInc,Commit/Write,Rollback)\",\n             LockModeType.PESSIMISTIC_FORCE_INCREMENT, Act.CommitTx, 2, null,\n@@ -311,13 +306,11 @@ public void testRefreshPessimsiticForceIncPessimisticWrite() {\n     \n     public void testRefreshPessimsiticForceIncPessimisticForceInc() {\n         commonRefreshTest(\n-            \"testRefresh(PessimsiticForceInc,Commit/\" \n-                + \"PessimisticForceInc,Commit)\",\n+            \"testRefresh(PessimsiticForceInc,Commit/PessimisticForceInc,Commit)\",\n             LockModeType.PESSIMISTIC_FORCE_INCREMENT, Act.CommitTx, 3, null, \n             LockModeType.PESSIMISTIC_FORCE_INCREMENT, Act.CommitTx, 3, null);\n         commonRefreshTest(\n-            \"testRefresh(PessimsiticForceInc,Commit/\"\n-                + \"PessimisticForceInc,Rollback)\",\n+            \"testRefresh(PessimsiticForceInc,Commit/PessimisticForceInc,Rollback)\",\n             LockModeType.PESSIMISTIC_FORCE_INCREMENT, Act.CommitTx, 2, null,\n             LockModeType.PESSIMISTIC_FORCE_INCREMENT, Act.RollbackTx, 2, null); \n     }"},{"sha":"f213d1917f94a262c90b919f52d77681aa124fcf","filename":"openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestPessimisticLocks.java","status":"modified","additions":208,"deletions":24,"changes":232,"blob_url":"https://github.com/apache/openjpa/blob/cbbe382ecda74174f567e2659a7fd2ccb5419abf/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestPessimisticLocks.java","raw_url":"https://github.com/apache/openjpa/raw/cbbe382ecda74174f567e2659a7fd2ccb5419abf/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestPessimisticLocks.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestPessimisticLocks.java?ref=cbbe382ecda74174f567e2659a7fd2ccb5419abf","patch":"@@ -28,16 +28,20 @@\n import javax.persistence.Query;\n import javax.persistence.QueryTimeoutException;\n \n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\n import org.apache.openjpa.persistence.test.SQLListenerTestCase;\n \n /**\n  * Test Pessimistic Lock and exception behavior against EntityManager and Query interface methods.\n  */\n public class TestPessimisticLocks extends SQLListenerTestCase {\n \n+    private DBDictionary dict = null;\n+\n     public void setUp() {\n         setSupportedDatabases(\n-//                org.apache.openjpa.jdbc.sql.DerbyDictionary.class,\n+                org.apache.openjpa.jdbc.sql.DerbyDictionary.class,\n //                org.apache.openjpa.jdbc.sql.OracleDictionary.class,\n                 org.apache.openjpa.jdbc.sql.DB2Dictionary.class);\n         if (isTestsDisabled()) {\n@@ -48,6 +52,8 @@ public void setUp() {\n         String empTable = getMapping(Employee.class).getTable().getFullName();\n         String deptTable = getMapping(Department.class).getTable().getFullName();\n \n+        dict= ((JDBCConfiguration)emf.getConfiguration()).getDBDictionaryInstance();\n+\n         EntityManager em = null;\n         try {\n             em = emf.createEntityManager();\n@@ -96,25 +102,110 @@ public void setUp() {\n     }\n \n     /*\n-     * Test a find with pessimistic lock after a query with pessimistic lock and expect PessimisticLockException.\n+     * Test find with pessimistic lock after a query with pessimistic lock.\n      */\n-    public void testFindWithLockTimeoutAfterQueryWithPessimisticLocks() {\n+    public void testFindAfterQueryWithPessimisticLocks() {\n         EntityManager em1 = emf.createEntityManager();\n         EntityManager em2 = emf.createEntityManager();\n         try {\n             em1.getTransaction().begin();\n+            Query query = em1.createQuery(\n+                    \"select e from Employee e where e.id < 10\").setFirstResult(1);\n+            // Lock all selected Employees, skip the first one, i.e should lock Employee(2)\n+            query.setLockMode(LockModeType.PESSIMISTIC_READ);\n+            query.setHint(\"javax.persistence.query.timeout\", 2000);\n+            List<Employee> q = query.getResultList();\n+            assertEquals(\"Expected 1 element with emplyee id=2\", q.size(), 1);\n+            assertTrue(\"Test Employee first name = 'first.2'\", q.get(0).getFirstName().equals(\"first.1\")\n+                    || q.get(0).getFirstName().equals(\"first.2\"));\n \n+            em2.getTransaction().begin();\n+            Map<String,Object> map = new HashMap<String,Object>();\n+            map.put(\"javax.persistence.lock.timeout\", 2000);\n+            // find Employee(2) with a lock, should block and expected a PessimisticLockException\n+            em2.find(Employee.class, 2, LockModeType.PESSIMISTIC_READ, map);\n+            fail(\"Unexcpected find succeeded. Should throw a PessimisticLockException.\");\n+        } catch (QueryTimeoutException e) {            \n+            // TODO: DB2: This is the current unexpected exception due to OPENJPA-991.\n+            // Remove this when the problem is fixed\n+//            System.out.println(\"Caught \" + e.getClass().getName() + \":\" + e.getMessage());\n+        } catch (PessimisticLockException e) {\n+            // TODO: This is the expected exception but will be fixed under OPENJPA-991\n+//            System.out.println(\"Caught \" + e.getClass().getName() + \":\" + e.getMessage());\n+        } catch (Exception ex) {\n+            fail(\"Caught unexpected \" + ex.getClass().getName() + \":\" + ex.getMessage());\n+        } finally {\n+            if( em1.getTransaction().isActive())\n+                em1.getTransaction().rollback();\n+            if( em2.getTransaction().isActive())\n+                em2.getTransaction().rollback();\n+        }\n+\n+        try {\n+            em1.getTransaction().begin();\n+            Query query = em1.createQuery(\n+                    \"select e.department from Employee e where e.id < 10\").setFirstResult(1);\n+            // Lock all selected Departments, skip the first one, i.e should lock Department(20)\n+            query.setLockMode(LockModeType.PESSIMISTIC_READ);\n+            query.setHint(\"javax.persistence.query.timeout\", 2000);\n+            List<Department> q = query.getResultList();\n+            assertEquals(\"Expected 1 element with department id=20\", q.size(), 1);\n+            assertTrue(\"Test department name = 'D20'\", q.get(0).getName().equals(\"D10\")\n+                    || q.get(0).getName().equals(\"D20\"));\n+\n+            em2.getTransaction().begin();\n+            Map<String,Object> map = new HashMap<String,Object>();\n+            map.put(\"javax.persistence.lock.timeout\", 2000);\n+            // find Employee(2) with a lock, no block since only department was locked\n+            Employee emp = em2.find(Employee.class, 1, LockModeType.PESSIMISTIC_READ, map);\n+            assertNotNull(\"Query locks department only, therefore should find Employee.\", emp);\n+            assertEquals(\"Test Employee first name = 'first.1'\", emp.getFirstName(), \"first.1\");\n+        } catch (QueryTimeoutException e) {            \n+            // TODO: DB2: This is the current unexpected exception due to OPENJPA-991.\n+            // Remove this when the problem is fixed\n+//            System.out.println(\"Caught \" + e.getClass().getName() + \":\" + e.getMessage());\n+            if( !(dict instanceof org.apache.openjpa.jdbc.sql.DB2Dictionary)) {\n+                fail(\"Caught unexpected \" + e.getClass().getName() + \":\" + e.getMessage());\n+            }\n+        } catch (PessimisticLockException e) {\n+            // TODO: This is the expected exception but will be fixed under OPENJPA-991\n+//            System.out.println(\"Caught \" + e.getClass().getName() + \":\" + e.getMessage());\n+            if( !(dict instanceof org.apache.openjpa.jdbc.sql.DB2Dictionary)) {\n+                fail(\"Caught unexpected \" + e.getClass().getName() + \":\" + e.getMessage());\n+            }\n+        } catch (Exception ex) {\n+            fail(\"Caught unexpected \" + ex.getClass().getName() + \":\" + ex.getMessage());\n+        } finally {\n+            if( em1.getTransaction().isActive())\n+                em1.getTransaction().rollback();\n+            if( em2.getTransaction().isActive())\n+                em2.getTransaction().rollback();\n+        }\n+        em1.close();\n+        em2.close();\n+    }\n+\n+    /*\n+     * Test find with pessimistic lock after a query with pessimistic lock.\n+     */\n+    public void testFindAfterQueryOrderByWithPessimisticLocks() {\n+        EntityManager em1 = emf.createEntityManager();\n+        EntityManager em2 = emf.createEntityManager();\n+        try {\n+            em1.getTransaction().begin();\n             Query query = em1.createQuery(\n                     \"select e from Employee e where e.id < 10 order by e.id\").setFirstResult(1);\n+            // Lock all selected Employees, skip the first one, i.e should lock Employee(2)\n             query.setLockMode(LockModeType.PESSIMISTIC_READ);\n+            query.setHint(\"javax.persistence.query.timeout\", 2000);\n             List<Employee> q = query.getResultList();\n             assertEquals(\"Expected 1 element with emplyee id=2\", q.size(), 1);\n             assertEquals(\"Test Employee first name = 'first.2'\", q.get(0).getFirstName(), \"first.2\");\n \n             em2.getTransaction().begin();\n-\n             Map<String,Object> map = new HashMap<String,Object>();\n             map.put(\"javax.persistence.lock.timeout\", 2000);\n+            // find Employee(2) with a lock, should block and expected a PessimisticLockException\n             em2.find(Employee.class, 2, LockModeType.PESSIMISTIC_READ, map);\n             fail(\"Unexcpected find succeeded. Should throw a PessimisticLockException.\");\n         } catch (QueryTimeoutException e) {            \n@@ -135,27 +226,35 @@ public void testFindWithLockTimeoutAfterQueryWithPessimisticLocks() {\n \n         try {\n             em1.getTransaction().begin();\n-\n             Query query = em1.createQuery(\n                     \"select e.department from Employee e where e.id < 10 order by e.department.id\").setFirstResult(1);\n+            // Lock all selected Departments, skip the first one, i.e should lock Department(20)\n             query.setLockMode(LockModeType.PESSIMISTIC_READ);\n+            query.setHint(\"javax.persistence.query.timeout\", 2000);\n             List<Department> q = query.getResultList();\n             assertEquals(\"Expected 1 element with department id=20\", q.size(), 1);\n             assertEquals(\"Test department name = 'D20'\", q.get(0).getName(), \"D20\");\n \n             em2.getTransaction().begin();\n-\n             Map<String,Object> map = new HashMap<String,Object>();\n             map.put(\"javax.persistence.lock.timeout\", 2000);\n+            // find Employee(2) with a lock, no block since only department was locked\n             Employee emp = em2.find(Employee.class, 1, LockModeType.PESSIMISTIC_READ, map);\n-            assertNotNull(\"Query locks department but find locks Employee.\", emp);\n-            fail(\"Unexcpected find succeeded. Should throw a PessimisticLockException.\");\n+            assertNotNull(\"Query locks department only, therefore should find Employee.\", emp);\n+            assertEquals(\"Test Employee first name = 'first.1'\", emp.getFirstName(), \"first.1\");\n         } catch (QueryTimeoutException e) {            \n-            // TODO: This is the current unexpected exception due to OPENJPA-991. Remove this when the problem is fixed \n-//            System.out.println(\"Caught \" + e.getClass().getName() + \":\" + e.getMessage());\n+            // TODO: DB2: This is the current unexpected exception due to OPENJPA-991.\n+            // Remove this when the problem is fixed\n+//          System.out.println(\"Caught \" + e.getClass().getName() + \":\" + e.getMessage());\n+            if( !(dict instanceof org.apache.openjpa.jdbc.sql.DB2Dictionary)) {\n+                fail(\"Caught unexpected \" + e.getClass().getName() + \":\" + e.getMessage());\n+            }\n         } catch (PessimisticLockException e) {\n             // TODO: This is the expected exception but will be fixed under OPENJPA-991\n-//            System.out.println(\"Caught \" + e.getClass().getName() + \":\" + e.getMessage());\n+//          System.out.println(\"Caught \" + e.getClass().getName() + \":\" + e.getMessage());\n+            if( !(dict instanceof org.apache.openjpa.jdbc.sql.DB2Dictionary)) {\n+                fail(\"Caught unexpected \" + e.getClass().getName() + \":\" + e.getMessage());\n+            }\n         } catch (Exception ex) {\n             fail(\"Caught unexpected \" + ex.getClass().getName() + \":\" + ex.getMessage());\n         } finally {\n@@ -169,28 +268,41 @@ public void testFindWithLockTimeoutAfterQueryWithPessimisticLocks() {\n     }\n \n     /*\n-     * Test a query with pessimistic lock after a find with pessimistic lock and expect PessimisticLockException.\n+     * Test query with pessimistic lock after a find with pessimistic lock.\n      */\n     public void testQueryAfterFindWithPessimisticLocks() {\n         EntityManager em1 = emf.createEntityManager();\n         EntityManager em2 = emf.createEntityManager();\n         try {\n             em2.getTransaction().begin();\n-\n             Map<String,Object> map = new HashMap<String,Object>();\n             map.put(\"javax.persistence.lock.timeout\", 2000);\n+            // Lock Emplyee(1), no department should be locked\n             em2.find(Employee.class, 1, LockModeType.PESSIMISTIC_READ, map);\n \n             em1.getTransaction().begin();\n-\n             Query query = em1.createQuery(\n-                    \"select e.department from Employee e where e.id < 10 order by e.department.id\").setFirstResult(1);\n+                    \"select e.department from Employee e where e.id < 10\").setFirstResult(1);\n             query.setLockMode(LockModeType.PESSIMISTIC_READ);\n+            query.setHint(\"javax.persistence.query.timeout\", 2000);\n+            // Lock all selected Department but skip the first, i.e. lock Department(20), should query successfully.\n             List<Department> q = query.getResultList();\n-\n-            fail(\"Unexcpected find succeeded. Should throw a PessimisticLockException.\");\n+            assertEquals(\"Expected 1 element with department id=20\", q.size(), 1);\n+            assertTrue(\"Test department name = 'D20'\", q.get(0).getName().equals(\"D10\")\n+                    || q.get(0).getName().equals(\"D20\"));\n+        } catch (QueryTimeoutException e) {            \n+            // TODO: DB2: This is the current unexpected exception due to OPENJPA-991.\n+            // Remove this when the problem is fixed\n+//          System.out.println(\"Caught \" + e.getClass().getName() + \":\" + e.getMessage());\n+            if( !(dict instanceof org.apache.openjpa.jdbc.sql.DB2Dictionary)) {\n+                fail(\"Caught unexpected \" + e.getClass().getName() + \":\" + e.getMessage());\n+            }\n         } catch (PessimisticLockException e) {\n-            // This is the expected exception.\n+            // TODO: This is the expected exception but will be fixed under OPENJPA-991\n+//          System.out.println(\"Caught \" + e.getClass().getName() + \":\" + e.getMessage());\n+            if( !(dict instanceof org.apache.openjpa.jdbc.sql.DB2Dictionary)) {\n+                fail(\"Caught unexpected \" + e.getClass().getName() + \":\" + e.getMessage());\n+            }\n         } catch (Exception ex) {\n             fail(\"Caught unexpected \" + ex.getClass().getName() + \":\" + ex.getMessage());\n         } finally {\n@@ -199,35 +311,107 @@ public void testQueryAfterFindWithPessimisticLocks() {\n             if (em2.getTransaction().isActive())\n                 em2.getTransaction().rollback();\n         }\n+        \n+        try {\n+            em2.getTransaction().begin();\n+\n+            Map<String,Object> map = new HashMap<String,Object>();\n+            map.put(\"javax.persistence.lock.timeout\", 2000);\n+            // Lock Emplyee(2), no department should be locked\n+            em2.find(Employee.class, 2, LockModeType.PESSIMISTIC_READ, map);\n+\n+            em1.getTransaction().begin();\n+            Query query = em1.createQuery(\n+                    \"select e from Employee e where e.id < 10\").setFirstResult(1);\n+            // Lock all selected Employees, skip the first one, i.e should lock Employee(2)\n+            query.setLockMode(LockModeType.PESSIMISTIC_READ);\n+            query.setHint(\"javax.persistence.query.timeout\", 2000);\n+            List<Employee> q = query.getResultList();\n+            fail(\"Unexcpected find succeeded. Should throw a QueryLockException.\");\n+        } catch (QueryTimeoutException e) {            \n+            // This is the expected exception.\n+//            System.out.println(\"Caught \" + e.getClass().getName() + \":\" + e.getMessage());\n+        } catch (PessimisticLockException e) {\n+            // TODO: This is the expected exception but will be fixed under OPENJPA-991\n+//            System.out.println(\"Caught \" + e.getClass().getName() + \":\" + e.getMessage());\n+        } catch (Exception ex) {\n+            fail(\"Caught unexpected \" + ex.getClass().getName() + \":\" + ex.getMessage());\n+        } finally {\n+            if( em1.getTransaction().isActive())\n+                em1.getTransaction().rollback();\n+            if( em2.getTransaction().isActive())\n+                em2.getTransaction().rollback();\n+        }\n         em1.close();\n         em2.close();\n     }\n \n     /*\n-     * Test a query with pessimistic lock with query timeout set after a find\n-     * with pessimistic lock and expect QueryTimeoutException.\n+     * Test query with pessimistic lock after a find with pessimistic lock.\n      */\n-    public void testQueryWithQueryTimeoutAfterFindWithPessimisticLocks() {\n+    public void testQueryOrderByAfterFindWithPessimisticLocks() {\n         EntityManager em1 = emf.createEntityManager();\n         EntityManager em2 = emf.createEntityManager();\n         try {\n             em2.getTransaction().begin();\n-\n             Map<String,Object> map = new HashMap<String,Object>();\n             map.put(\"javax.persistence.lock.timeout\", 2000);\n+            // Lock Emplyee(1), no department should be locked\n             em2.find(Employee.class, 1, LockModeType.PESSIMISTIC_READ, map);\n \n             em1.getTransaction().begin();\n-\n             Query query = em1.createQuery(\n                     \"select e.department from Employee e where e.id < 10 order by e.department.id\").setFirstResult(1);\n             query.setLockMode(LockModeType.PESSIMISTIC_READ);\n             query.setHint(\"javax.persistence.query.timeout\", 2000);\n+            // Lock all selected Department but skip the first, i.e. lock Department(20), should query successfully.\n             List<Department> q = query.getResultList();\n+            assertEquals(\"Expected 1 element with department id=20\", q.size(), 1);\n+            assertEquals(\"Test department name = 'D20'\", q.get(0).getName(), \"D20\");\n+        } catch (QueryTimeoutException e) {            \n+            // TODO: DB2: This is the current unexpected exception due to OPENJPA-991.\n+            // Remove this when the problem is fixed\n+//          System.out.println(\"Caught \" + e.getClass().getName() + \":\" + e.getMessage());\n+            if( !(dict instanceof org.apache.openjpa.jdbc.sql.DB2Dictionary)) {\n+                fail(\"Caught unexpected \" + e.getClass().getName() + \":\" + e.getMessage());\n+            }\n+        } catch (PessimisticLockException e) {\n+            // TODO: This is the expected exception but will be fixed under OPENJPA-991\n+//          System.out.println(\"Caught \" + e.getClass().getName() + \":\" + e.getMessage());\n+            if( !(dict instanceof org.apache.openjpa.jdbc.sql.DB2Dictionary)) {\n+                fail(\"Caught unexpected \" + e.getClass().getName() + \":\" + e.getMessage());\n+            }\n+        } catch (Exception ex) {\n+            fail(\"Caught unexpected \" + ex.getClass().getName() + \":\" + ex.getMessage());\n+        } finally {\n+            if( em1.getTransaction().isActive())\n+                em1.getTransaction().rollback();\n+            if (em2.getTransaction().isActive())\n+                em2.getTransaction().rollback();\n+        }\n+        \n+        try {\n+            em2.getTransaction().begin();\n \n-            fail(\"Unexcpected find succeeded. Should throw a PessimisticLockException.\");\n+            Map<String,Object> map = new HashMap<String,Object>();\n+            map.put(\"javax.persistence.lock.timeout\", 2000);\n+            // Lock Emplyee(2), no department should be locked\n+            em2.find(Employee.class, 2, LockModeType.PESSIMISTIC_READ, map);\n+\n+            em1.getTransaction().begin();\n+            Query query = em1.createQuery(\n+                    \"select e from Employee e where e.id < 10 order by e.department.id\").setFirstResult(1);\n+            // Lock all selected Employees, skip the first one, i.e should lock Employee(2)\n+            query.setLockMode(LockModeType.PESSIMISTIC_READ);\n+            query.setHint(\"javax.persistence.query.timeout\", 2000);\n+            List<Employee> q = query.getResultList();\n+            fail(\"Unexcpected find succeeded. Should throw a QueryLockException.\");\n         } catch (QueryTimeoutException e) {            \n             // This is the expected exception.\n+//            System.out.println(\"Caught \" + e.getClass().getName() + \":\" + e.getMessage());\n+        } catch (PessimisticLockException e) {\n+            // TODO: This is the expected exception but will be fixed under OPENJPA-991\n+//            System.out.println(\"Caught \" + e.getClass().getName() + \":\" + e.getMessage());\n         } catch (Exception ex) {\n             fail(\"Caught unexpected \" + ex.getClass().getName() + \":\" + ex.getMessage());\n         } finally {"}]}

