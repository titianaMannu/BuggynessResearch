{"sha":"cc59e096ef9850ec1638ebcf001d558b9cfaa166","node_id":"MDY6Q29tbWl0MjA2MzY0OmNjNTllMDk2ZWY5ODUwZWMxNjM4ZWJjZjAwMWQ1NThiOWNmYWExNjY=","commit":{"author":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2009-10-14T04:01:45Z"},"committer":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2009-10-14T04:01:45Z"},"message":"OPENJPA-1349 Spec version property was being prematurely removed from the config map in the  create container emf path.  Spec version was always set to 2.0, thus compatibility and other options were not set properly for a 1.0 persistence.xml.  Also added a test framework class that allows pseudo-testing of the createContainerEMF path using a specific persistence.xml and pu name.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@825006 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a72234ab4e80154dc877474f1349ec45afbb1bb2","url":"https://api.github.com/repos/apache/openjpa/git/trees/a72234ab4e80154dc877474f1349ec45afbb1bb2"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/cc59e096ef9850ec1638ebcf001d558b9cfaa166","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/cc59e096ef9850ec1638ebcf001d558b9cfaa166","html_url":"https://github.com/apache/openjpa/commit/cc59e096ef9850ec1638ebcf001d558b9cfaa166","comments_url":"https://api.github.com/repos/apache/openjpa/commits/cc59e096ef9850ec1638ebcf001d558b9cfaa166/comments","author":null,"committer":null,"parents":[{"sha":"52fdddcf380a9b0599039fd5beaa0bacd7e7067b","url":"https://api.github.com/repos/apache/openjpa/commits/52fdddcf380a9b0599039fd5beaa0bacd7e7067b","html_url":"https://github.com/apache/openjpa/commit/52fdddcf380a9b0599039fd5beaa0bacd7e7067b"}],"stats":{"total":1052,"additions":1051,"deletions":1},"files":[{"sha":"4bc3624be2f9e2165a28d7459c913b4250b06ae9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/TestContainerSpecCompatibilityOptions.java","status":"added","additions":906,"deletions":0,"changes":906,"blob_url":"https://github.com/apache/openjpa/blob/cc59e096ef9850ec1638ebcf001d558b9cfaa166/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/TestContainerSpecCompatibilityOptions.java","raw_url":"https://github.com/apache/openjpa/raw/cc59e096ef9850ec1638ebcf001d558b9cfaa166/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/TestContainerSpecCompatibilityOptions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/TestContainerSpecCompatibilityOptions.java?ref=cc59e096ef9850ec1638ebcf001d558b9cfaa166","patch":"@@ -0,0 +1,906 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.compat;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.Query;\n+\n+import org.apache.openjpa.conf.Compatibility;\n+import org.apache.openjpa.conf.Specification;\n+import org.apache.openjpa.lib.jdbc.AbstractJDBCListener;\n+import org.apache.openjpa.lib.jdbc.JDBCEvent;\n+import org.apache.openjpa.lib.jdbc.JDBCListener;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\n+import org.apache.openjpa.persistence.jdbc.SQLSniffer;\n+import org.apache.openjpa.persistence.test.AbstractCachedEMFTestCase;\n+import org.apache.openjpa.persistence.test.ContainerEMFTest;\n+\n+// Tests same functionality as TestSpecCompatibilityOptions, except that \n+// this variation runs through the path a JEE container uses to create\n+// an EMF.\n+public class TestContainerSpecCompatibilityOptions \n+    extends ContainerEMFTest {\n+    \n+    protected List<String> sql = new ArrayList<String>();\n+    protected int sqlCount;\n+\n+    @Override\n+    public String getPersistenceResourceName() {\n+        return \"org/apache/openjpa/persistence/compat/persistence_2_0.xml\";\n+    }\n+\n+    @Override\n+    public String getPersistenceUnitName() {\n+        return \"persistence_2_0\";\n+    }\n+    \n+    /*\n+     * Verifies compatibility options and spec level are appropriate\n+     * for a version 2 persistence.xml\n+     */\n+    public void testJPA1CompatibilityOptions() {\n+        OpenJPAEntityManagerFactorySPI emf1 =\n+        (OpenJPAEntityManagerFactorySPI)\n+            createContainerEMF(\"persistence_1_0\",\n+                \"org/apache/openjpa/persistence/compat/\" +\n+                \"persistence_1_0.xml\", null);\n+\n+        Compatibility compat = emf1.getConfiguration().getCompatibilityInstance();\n+        assertTrue(compat.getFlushBeforeDetach());\n+        assertTrue(compat.getCopyOnDetach());\n+        assertTrue(compat.getPrivatePersistentProperties());\n+        assertFalse(compat.isAbstractMappingUniDirectional());\n+        assertFalse(compat.isNonDefaultMappingAllowed());\n+        String vMode = emf1.getConfiguration().getValidationMode();\n+        assertEquals(\"NONE\", vMode);\n+        Specification spec = emf1.getConfiguration().getSpecificationInstance();\n+        assertEquals(\"JPA\", spec.getName().toUpperCase());\n+        assertEquals(spec.getVersion(), 1);\n+        \n+        emf1.close();\n+\n+    }\n+\n+    /*\n+     * Verifies compatibility options and spec level are appropriate\n+     * for a version 2 persistence.xml\n+     */\n+    public void testJPA2CompatibilityOptions() {\n+        Compatibility compat = emf.getConfiguration().getCompatibilityInstance();\n+        assertFalse(compat.getFlushBeforeDetach());\n+        assertFalse(compat.getCopyOnDetach());\n+        assertFalse(compat.getPrivatePersistentProperties());\n+        assertTrue(compat.isAbstractMappingUniDirectional());\n+        assertTrue(compat.isNonDefaultMappingAllowed());\n+        String vMode = emf.getConfiguration().getValidationMode();\n+        assertEquals(\"AUTO\", vMode);\n+        Specification spec = emf.getConfiguration().getSpecificationInstance();\n+        assertEquals(\"JPA\", spec.getName().toUpperCase());\n+        assertEquals(spec.getVersion(), 2);\n+    }\n+\n+    /*\n+     * Per JPA 2.0, Relationships in mapped superclass must be unidirectional.\n+     * An exceptioin will be thrown when a bi-directional relation is detected in\n+     * a mapped superclass. \n+     */\n+    public void testMappedSuperClass() {\n+        List<Class<?>> types = new ArrayList<Class<?>>();\n+        types.add(EntityA.class);\n+        types.add(EntityB.class);\n+        types.add(MappedSuper.class);\n+        OpenJPAEntityManagerFactorySPI oemf = createEMF2_0(types);\n+        EntityManager em = null;\n+        try {\n+            em = oemf.createEntityManager();\n+            EntityA a = new EntityA();\n+            a.setId(1);\n+            EntityB b = new EntityB();\n+            b.setId(1);\n+            a.setEntityB(b);\n+            b.setEntityA(a);\n+            em.getTransaction().begin();\n+            em.persist(a);\n+            em.persist(b);\n+            em.getTransaction().commit();\n+            em.close();\n+            fail(\"An exceptioin will be thrown for a bi-directional relation declared in mapped superclass\");\n+        } catch (org.apache.openjpa.persistence.ArgumentException e) {\n+            if (em != null) {\n+                em.getTransaction().rollback();\n+                em.close();\n+            }\n+        } finally {\n+            oemf.close();\n+        }\n+    }\n+\n+    /**\n+     * Per JPA 2.0, the following one-to-many mappings are supported.\n+     * (1) uni-/OneToMany/foreign key strategy\n+     * (2) uni-/OneToMany/join table strategy (default)\n+     * (3) bi-/OneToMany/foreign key strategy (default)\n+     * (4) bi-/OneToMany/join table strategy\n+     * The JoinColumn and JoinTable annotations or corresponding XML \n+     * elements must be used to specify such non-default mappings\n+     * \n+     * For (1), the spec provides the following example (Sec 11.1.36):\n+     * Example 3: Unidirectional One-to-Many association using a foreign \n+     * key mapping:\n+     * In Customer class:\n+     * @OneToMany(orphanRemoval=true)\n+     * @JoinColumn(name=\"CUST_ID\") // join column is in table for Order\n+     * public Set<Order> getOrders() {return orders;}\n+     * \n+     * For (4), Bi-directional One-t-Many association using the join \n+     * table mapping:\n+     * In Customer class:\n+     * @OneToMany(mappedBy=\"customer\")\n+     * @JoinTable(\n+     *   name=\"Customer_Orders\",\n+     *   joinColumns=\n+     *     @JoinColumn(name=\"Order_ID\", referencedColumnName=\"ID\"),\n+     *    inverseJoinColumns=\n+     *     @JoinColumn(name=\"Cust_ID\", referencedColumnName=\"ID\")\n+     *  )\n+     *  public Set<Order> getOrders() {return orders;}\n+     *  \n+     *  Note that in this scenario, @JoinTable is required. Simply applying @JoinColumn \n+     *  without @JoinTable will result in an exception thrown by openjpa.\n+     * \n+     */\n+    public void testOneToManyRelation() {\n+        List<Class<?>> types = new ArrayList<Class<?>>();\n+        types.add(EntityC.class);\n+        types.add(EntityC_B1MFK.class);\n+        types.add(EntityC_B1MJT.class);\n+        types.add(EntityC_U1MFK.class);\n+        types.add(Bi_1ToM_FK.class);\n+        types.add(Bi_1ToM_JT.class);\n+        types.add(Uni_1ToM_FK.class);\n+        types.add(Uni_1ToM_JT.class);\n+        OpenJPAEntityManagerFactorySPI oemf = createEMF2_0(types);\n+        EntityManager em = oemf.createEntityManager();\n+        \n+        try {\n+            // trigger table creation\n+            em.getTransaction().begin();\n+            em.getTransaction().commit();\n+            assertSQLFragnments(sql, \"CREATE TABLE Bi1MJT_C\", \"C_ID\", \"Bi1MJT_ID\");\n+            assertSQLFragnments(sql, \"CREATE TABLE C_B1MFK\", \"BI1MFK_ID\");\n+            assertSQLFragnments(sql, \"CREATE TABLE Uni1MJT_C\", \"Uni1MJT_ID\", \"C_ID\");\n+            assertSQLFragnments(sql, \"CREATE TABLE C_B1MFK\", \"BI1MFK_ID\");\n+            assertSQLFragnments(sql, \"CREATE TABLE C_U1MFK\", \"Uni1MFK_ID\");\n+            crudUni1MFK(em);\n+            crudUni1MJT(em);\n+            crudBi1MFK(em);\n+            crudBi1MJT(em);\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+            fail(\"OneToMany mapping failed with exception message: \" + e.getMessage());\n+        } finally {\n+            em.close();\n+            oemf.close();            \n+        }\n+    }\n+    \n+    // non default\n+    public void crudUni1MFK(EntityManager em) {\n+        //create\n+        Uni_1ToM_FK u = new Uni_1ToM_FK();\n+        u.setName(\"u\");\n+        List<EntityC_U1MFK> cs = new ArrayList<EntityC_U1MFK>();\n+        EntityC_U1MFK c = new EntityC_U1MFK();\n+        c.setName(\"c\");\n+        cs.add(c);\n+        u.setEntityCs(cs);\n+        em.persist(u);\n+        em.persist(c);\n+        em.getTransaction().begin();\n+        em.getTransaction().commit();\n+\n+        //update\n+        em.getTransaction().begin();\n+        cs = u.getEntityCs();\n+        u.setName(\"newName\");\n+        EntityC_U1MFK c1 = new EntityC_U1MFK();\n+        c1.setName(\"c1\");\n+        cs.add(c1);\n+        em.persist(c1);\n+        em.getTransaction().commit();\n+        \n+        // update by removing a c and then add this c to a new u\n+        em.getTransaction().begin();\n+        EntityC_U1MFK c2 = cs.remove(0);\n+        \n+        Uni_1ToM_FK u2 = new Uni_1ToM_FK();\n+        u2.setName(\"u2\");\n+        List<EntityC_U1MFK> cs2 = new ArrayList<EntityC_U1MFK>();\n+        cs2.add(c2);\n+        u2.setEntityCs(cs2);\n+        em.persist(u2);\n+        em.getTransaction().commit();\n+        em.clear();\n+        \n+        //query\n+        Query q = em.createQuery(\"SELECT u FROM Uni_1ToM_FK u where u.name = 'newName'\");\n+        Uni_1ToM_FK u1 = (Uni_1ToM_FK)q.getSingleResult();\n+        assertEquals(u, u1);\n+        em.clear();\n+\n+        //find\n+        long id = u1.getId();\n+        Uni_1ToM_FK findU1 = em.find(Uni_1ToM_FK.class, id);\n+        assertEquals(findU1, u1);\n+        \n+        //remove\n+        em.getTransaction().begin();\n+        em.remove(findU1);\n+        em.getTransaction().commit();\n+        em.clear();\n+    }\n+    \n+    // default\n+    public void crudUni1MJT(EntityManager em) {\n+        Uni_1ToM_JT u = new Uni_1ToM_JT();\n+        u.setName(\"u\");\n+        List<EntityC> cs = new ArrayList<EntityC>();\n+        EntityC c = new EntityC();\n+        c.setName(\"c\");\n+        cs.add(c);\n+        u.setEntityCs(cs);\n+        em.persist(u);\n+        em.persist(c);\n+        em.getTransaction().begin();\n+        em.getTransaction().commit();\n+        \n+        //update\n+        em.getTransaction().begin();\n+        cs = u.getEntityCs();\n+        u.setName(\"newName\");\n+        EntityC c1 = new EntityC();\n+        c1.setName(\"c1\");\n+        cs.add(c1);\n+        em.persist(c1);\n+        em.getTransaction().commit();\n+        em.clear();\n+        \n+        //query\n+        Query q = em.createQuery(\"SELECT u FROM Uni_1ToM_JT u\");\n+        Uni_1ToM_JT u1 = (Uni_1ToM_JT)q.getSingleResult();\n+        assertEquals(u, u1);\n+        em.clear();\n+\n+        //find\n+        long id = u1.getId();\n+        Uni_1ToM_JT u2 = em.find(Uni_1ToM_JT.class, id);\n+        assertEquals(u, u2);\n+        \n+        //remove\n+        em.getTransaction().begin();\n+        em.remove(u2);\n+        em.getTransaction().commit();\n+        em.clear();\n+    }\n+    \n+    //default\n+    public void crudBi1MFK(EntityManager em) {\n+        Bi_1ToM_FK b = new Bi_1ToM_FK();\n+        b.setName(\"b\");\n+        List<EntityC_B1MFK> cs = new ArrayList<EntityC_B1MFK>();\n+        EntityC_B1MFK c = new EntityC_B1MFK();\n+        c.setName(\"c\");\n+        c.setBi1mfk(b);\n+        cs.add(c);\n+        b.setEntityCs(cs);\n+        em.persist(b);\n+        em.persist(c);\n+        em.getTransaction().begin();\n+        em.getTransaction().commit();\n+        \n+        //update\n+        em.getTransaction().begin();\n+        cs = b.getEntityCs();\n+        b.setName(\"newName\");\n+        EntityC_B1MFK c1 = new EntityC_B1MFK();\n+        c1.setName(\"c1\");\n+        cs.add(c1);\n+        c1.setBi1mfk(b);\n+        em.persist(c1);\n+        em.getTransaction().commit();\n+        em.clear();\n+        \n+        //query\n+        Query q = em.createQuery(\"SELECT b FROM Bi_1ToM_FK b\");\n+        Bi_1ToM_FK b1 = (Bi_1ToM_FK)q.getSingleResult();\n+        assertEquals(b, b1);\n+        em.clear();\n+\n+        //find\n+        long id = b1.getId();\n+        Bi_1ToM_FK b2 = em.find(Bi_1ToM_FK.class, id);\n+        assertEquals(b, b2);\n+        \n+        //remove\n+        em.getTransaction().begin();\n+        em.remove(b2);\n+        em.getTransaction().commit();\n+        em.clear();\n+    }\n+\n+    public void crudBi1MJT(EntityManager em) {\n+        Bi_1ToM_JT b = new Bi_1ToM_JT();\n+        b.setName(\"b\");\n+        List<EntityC_B1MJT> cs = new ArrayList<EntityC_B1MJT>();\n+        EntityC_B1MJT c = new EntityC_B1MJT();\n+        c.setName(\"c\");\n+        c.setBi1mjt(b);\n+        cs.add(c);\n+        b.setEntityCs(cs);\n+        em.persist(b);\n+        em.persist(c);\n+        em.getTransaction().begin();\n+        em.getTransaction().commit();\n+\n+        //update\n+        em.getTransaction().begin();\n+        cs = b.getEntityCs();\n+        b.setName(\"newName\");\n+        EntityC_B1MJT c1 = new EntityC_B1MJT();\n+        c1.setName(\"c1\");\n+        cs.add(c1);\n+        c1.setBi1mjt(b);\n+        em.persist(c1);\n+        em.getTransaction().commit();\n+        em.clear();\n+        \n+        //query\n+        Query q = em.createQuery(\"SELECT b FROM Bi_1ToM_JT b where b.name = 'newName'\");\n+        Bi_1ToM_JT b1 = (Bi_1ToM_JT)q.getSingleResult();\n+        assertEquals(b, b1);\n+        em.clear();\n+\n+        //query\n+        q = em.createQuery(\"SELECT c FROM EntityC_B1MJT c\");\n+        List<EntityC_B1MJT> cs1 = q.getResultList();\n+        assertEquals(2, cs1.size());\n+        em.clear();\n+                \n+        //find\n+        long id = b1.getId();\n+        Bi_1ToM_JT b2 = em.find(Bi_1ToM_JT.class, id);\n+        assertEquals(b, b2);\n+        \n+        //remove\n+        em.getTransaction().begin();\n+        em.remove(b2);\n+        em.getTransaction().commit();\n+        em.clear();\n+    }\n+    \n+    public void testOneToManyMapRelation() {\n+        List<Class<?>> types = new ArrayList<Class<?>>();\n+        types.add(EntityC_U1M_Map_FK.class);\n+        types.add(Uni_1ToM_Map_FK.class);\n+        types.add(EntityC_B1M_Map_JT.class);\n+        types.add(Bi_1ToM_Map_JT.class);\n+        types.add(EntityC_U1M_Map_RelKey_FK.class);\n+        types.add(Uni_1ToM_Map_RelKey_FK.class);\n+        types.add(EntityC.class);\n+        types.add(EntityC_B1M_Map_RelKey_JT.class);\n+        types.add(Bi_1ToM_Map_RelKey_JT.class);\n+        OpenJPAEntityManagerFactorySPI emf = createEMF2_0(types);\n+        EntityManager em = emf.createEntityManager();\n+        \n+        try {\n+            // trigger table creation\n+            em.getTransaction().begin();\n+            em.getTransaction().commit();\n+            assertSQLFragnments(sql, \"CREATE TABLE C_U1M_Map_FK\", \"Uni1MFK_ID\", \"KEY0\");\n+            assertSQLFragnments(sql, \"CREATE TABLE Bi1M_Map_JT_C\", \"B_ID\", \"C_ID\");\n+            assertSQLFragnments(sql, \"CREATE TABLE C_U1M_Map_RelKey_FK\", \"Uni1MFK_ID\");\n+            assertSQLFragnments(sql, \"CREATE TABLE Bi1M_Map_RelKey_JT_C\", \"B_ID\", \"C_ID\");\n+            crudUni1MMapFK(em);\n+            crudBi1MMapJT(em);\n+            crudUni1MMapRelKeyFK(em);\n+            crudBi1MMapRelKeyJT(em);\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+            fail(\"OneToMany mapping failed with exception message: \" + e.getMessage());\n+        } finally {\n+            em.close();\n+            emf.close();            \n+        }\n+    }\n+\n+    public void crudUni1MMapFK(EntityManager em) {\n+        //create\n+        Uni_1ToM_Map_FK u = new Uni_1ToM_Map_FK();\n+        u.setName(\"u\");\n+        Map<String, EntityC_U1M_Map_FK> cs = new HashMap<String, EntityC_U1M_Map_FK>();\n+        EntityC_U1M_Map_FK c1 = new EntityC_U1M_Map_FK();\n+        c1.setName(\"c1\");\n+        cs.put(c1.getName(), c1);\n+        EntityC_U1M_Map_FK c2 = new EntityC_U1M_Map_FK();\n+        c2.setName(\"c2\");\n+        cs.put(c2.getName(), c2);\n+        u.setEntityCs(cs);\n+        \n+        em.persist(u);\n+        em.persist(c1);\n+        em.persist(c2);\n+        em.getTransaction().begin();\n+        em.getTransaction().commit();\n+\n+        //update by adding a new C\n+        cs = u.getEntityCs();\n+        u.setName(\"newName\");\n+        EntityC_U1M_Map_FK c3 = new EntityC_U1M_Map_FK();\n+        c3.setName(\"c3\");\n+        cs.put(c3.getName(), c3);\n+        em.persist(c3);\n+\n+        em.getTransaction().begin();\n+        em.getTransaction().commit();\n+        \n+        // update by removing a c and then add this c to a new u\n+        em.getTransaction().begin();\n+        EntityC_U1M_Map_FK c4 = cs.remove(\"c1\");\n+        \n+        Uni_1ToM_Map_FK u2 = new Uni_1ToM_Map_FK();\n+        u2.setName(\"u2\");\n+        Map<String, EntityC_U1M_Map_FK> cs2 = new HashMap<String, EntityC_U1M_Map_FK>();\n+        cs2.put(c4.getName(), c4);\n+        u2.setEntityCs(cs2);\n+        em.persist(u2);\n+        em.getTransaction().commit();\n+        em.clear();\n+        \n+        //query\n+        Query q = em.createQuery(\"SELECT u FROM Uni_1ToM_Map_FK u where u.name='newName'\");\n+        Uni_1ToM_Map_FK u1 = (Uni_1ToM_Map_FK)q.getSingleResult();\n+        assertEquals(u, u1);\n+        em.clear();\n+\n+        //find\n+        long id = u1.getId();\n+        Uni_1ToM_Map_FK findU = em.find(Uni_1ToM_Map_FK.class, id);\n+        assertEquals(u, findU);\n+        \n+        //remove\n+        em.getTransaction().begin();\n+        em.remove(findU);\n+        em.getTransaction().commit();\n+    }\n+    \n+    public void crudBi1MMapJT(EntityManager em) {\n+        Bi_1ToM_Map_JT b = new Bi_1ToM_Map_JT();\n+        b.setName(\"b\");\n+        Map<String, EntityC_B1M_Map_JT> cs = new HashMap<String, EntityC_B1M_Map_JT>();\n+        EntityC_B1M_Map_JT c = new EntityC_B1M_Map_JT();\n+        c.setName(\"c\");\n+        c.setBi1mjt(b);\n+        cs.put(c.getName(), c);\n+        b.setEntityCs(cs);\n+        em.persist(b);\n+        em.persist(c);\n+        em.getTransaction().begin();\n+        em.getTransaction().commit();\n+\n+        //update\n+        em.getTransaction().begin();\n+        cs = b.getEntityCs();\n+        b.setName(\"newName\");\n+        EntityC_B1M_Map_JT c1 = new EntityC_B1M_Map_JT();\n+        c1.setName(\"c1\");\n+        cs.put(c1.getName(), c1);\n+        c1.setBi1mjt(b);\n+        em.persist(c1);\n+        em.getTransaction().commit();\n+        em.clear();\n+        \n+        //query\n+        Query q = em.createQuery(\"SELECT b FROM Bi_1ToM_Map_JT b\");\n+        Bi_1ToM_Map_JT b1 = (Bi_1ToM_Map_JT)q.getSingleResult();\n+        assertEquals(b, b1);\n+        em.clear();\n+\n+        // query the owner\n+        q = em.createQuery(\"SELECT c FROM EntityC_B1M_Map_JT c\");\n+        List<EntityC_B1M_Map_JT> cs1 = q.getResultList();\n+        assertEquals(2, cs.size());\n+        em.clear();\n+        \n+        //find\n+        long id = b1.getId();\n+        Bi_1ToM_Map_JT b2 = em.find(Bi_1ToM_Map_JT.class, id);\n+        assertEquals(b, b2);\n+        \n+        //remove\n+        em.getTransaction().begin();\n+        em.remove(b2);\n+        em.getTransaction().commit();\n+    }\n+    \n+    public void crudUni1MMapRelKeyFK(EntityManager em) {\n+        //create\n+        Uni_1ToM_Map_RelKey_FK u = new Uni_1ToM_Map_RelKey_FK();\n+        u.setName(\"u\");\n+        Map<EntityC, EntityC_U1M_Map_RelKey_FK> cs = new HashMap<EntityC, EntityC_U1M_Map_RelKey_FK>();\n+        EntityC_U1M_Map_RelKey_FK c1 = new EntityC_U1M_Map_RelKey_FK();\n+        c1.setName(\"c1\");\n+        EntityC cKey1 = new EntityC();\n+        cKey1.setName(\"cKey1\");\n+        cs.put(cKey1, c1);\n+        EntityC_U1M_Map_RelKey_FK c2 = new EntityC_U1M_Map_RelKey_FK();\n+        c2.setName(\"c2\");\n+        EntityC cKey2 = new EntityC();\n+        cKey2.setName(\"cKey2\");\n+        cs.put(cKey2, c1);\n+        cs.put(cKey2, c2);\n+        u.setEntityCs(cs);\n+        em.persist(u);\n+        em.persist(c1);\n+        em.persist(c2);\n+        em.persist(cKey1);\n+        em.persist(cKey2);\n+        em.getTransaction().begin();\n+        em.getTransaction().commit();\n+\n+        //update by adding a new C\n+        em.getTransaction().begin();\n+        cs = u.getEntityCs();\n+        u.setName(\"newName\");\n+        EntityC_U1M_Map_RelKey_FK c3 = new EntityC_U1M_Map_RelKey_FK();\n+        c3.setName(\"c3\");\n+        EntityC cKey3 = new EntityC();\n+        cKey3.setName(\"cKey3\");\n+        cs.put(cKey3, c3);\n+        em.persist(c3);\n+        em.persist(cKey3);\n+        em.getTransaction().commit();\n+        \n+        // update by removing a c and then add this c to a new u\n+        em.getTransaction().begin();\n+        EntityC_U1M_Map_RelKey_FK c4 = cs.remove(cKey1);\n+        \n+        Uni_1ToM_Map_RelKey_FK u2 = new Uni_1ToM_Map_RelKey_FK();\n+        u2.setName(\"u2\");\n+        Map<EntityC, EntityC_U1M_Map_RelKey_FK> cs2 = new HashMap<EntityC, EntityC_U1M_Map_RelKey_FK>();\n+        cs2.put(cKey1, c4);\n+        u2.setEntityCs(cs2);\n+        em.persist(u2);\n+        em.getTransaction().commit();\n+        em.clear();\n+        \n+        //query\n+        Query q = em.createQuery(\"SELECT u FROM Uni_1ToM_Map_RelKey_FK u where u.name='newName'\");\n+        Uni_1ToM_Map_RelKey_FK u1 = (Uni_1ToM_Map_RelKey_FK)q.getSingleResult();\n+        assertEquals(u, u1);\n+        em.clear();\n+\n+        //find\n+        long id = u1.getId();\n+        Uni_1ToM_Map_RelKey_FK findU = em.find(Uni_1ToM_Map_RelKey_FK.class, id);\n+        assertEquals(u, findU);\n+        \n+        //remove\n+        em.getTransaction().begin();\n+        em.remove(findU);\n+        em.getTransaction().commit();\n+    }\n+\n+    public void crudBi1MMapRelKeyJT(EntityManager em) {\n+        Bi_1ToM_Map_RelKey_JT b = new Bi_1ToM_Map_RelKey_JT();\n+        b.setName(\"b\");\n+        Map<EntityC, EntityC_B1M_Map_RelKey_JT> cs = new HashMap<EntityC, EntityC_B1M_Map_RelKey_JT>();\n+        EntityC_B1M_Map_RelKey_JT c = new EntityC_B1M_Map_RelKey_JT();\n+        c.setName(\"c\");\n+        c.setBi1mjt(b);\n+        EntityC cKey = new EntityC();\n+        cKey.setName(\"cKey\");\n+        cs.put(cKey, c);\n+        b.setEntityCs(cs);\n+        em.persist(b);\n+        em.persist(c);\n+        em.persist(cKey);\n+        em.getTransaction().begin();\n+        em.getTransaction().commit();\n+\n+        //update\n+        em.getTransaction().begin();\n+        cs = b.getEntityCs();\n+        b.setName(\"newName\");\n+        EntityC_B1M_Map_RelKey_JT c1 = new EntityC_B1M_Map_RelKey_JT();\n+        c1.setName(\"c1\");\n+        EntityC cKey1 = new EntityC();\n+        cKey1.setName(\"cKey1\");\n+        cs.put(cKey1, c1);\n+        c1.setBi1mjt(b);\n+        em.persist(c1);\n+        em.persist(cKey1);\n+        em.getTransaction().commit();\n+        em.clear();\n+        \n+        //query\n+        Query q = em.createQuery(\"SELECT b FROM Bi_1ToM_Map_RelKey_JT b\");\n+        Bi_1ToM_Map_RelKey_JT b1 = (Bi_1ToM_Map_RelKey_JT)q.getSingleResult();\n+        assertEquals(b, b1);\n+        em.clear();\n+\n+        // query the owner\n+        q = em.createQuery(\"SELECT c FROM EntityC_B1M_Map_RelKey_JT c where c.name = 'c'\");\n+        EntityC_B1M_Map_RelKey_JT newC = (EntityC_B1M_Map_RelKey_JT)q.getSingleResult();\n+        assertEquals(newC, c);\n+        em.clear();\n+        \n+        //find\n+        long id = b1.getId();\n+        Bi_1ToM_Map_RelKey_JT b2 = em.find(Bi_1ToM_Map_RelKey_JT.class, id);\n+        assertEquals(b, b2);\n+        \n+        //remove\n+        em.getTransaction().begin();\n+        em.remove(b2);\n+        em.getTransaction().commit();\n+    }\n+\n+    public void testUniManyToOneUsingJoinTable() {\n+        List<Class<?>> types = new ArrayList<Class<?>>();\n+        types.add(EntityC.class);\n+        types.add(Uni_MTo1_JT.class);\n+        OpenJPAEntityManagerFactorySPI emf = createEMF2_0(types);\n+        EntityManager em = emf.createEntityManager();\n+        \n+        try {\n+            // trigger table creation\n+            em.getTransaction().begin();\n+            em.getTransaction().commit();\n+            assertSQLFragnments(sql, \"CREATE TABLE UniM1JT_C\", \"U_ID\", \"C_ID\");\n+            crudUniM1JT(em);\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+            fail(\"ManyToOne mapping failed with exception message: \" + e.getMessage());\n+        } finally {\n+            em.close();\n+            emf.close();            \n+        }\n+    }\n+    \n+    public void crudUniM1JT(EntityManager em) {\n+        //create\n+        Uni_MTo1_JT u = new Uni_MTo1_JT();\n+        u.setName(\"u\");\n+\n+        Uni_MTo1_JT u1 = new Uni_MTo1_JT();\n+        u1.setName(\"u1\");\n+\n+        EntityC c1 = new EntityC();\n+        c1.setName(\"c1\");\n+        u.setEntityC(c1);\n+        u1.setEntityC(c1);\n+        \n+        em.persist(u);\n+        em.persist(u1);\n+        em.persist(c1);\n+        em.getTransaction().begin();\n+        em.getTransaction().commit();\n+\n+        //update by changing the many-to-one value \n+        em.getTransaction().begin();\n+        u.setName(\"u_new\");\n+        EntityC c3 = new EntityC();\n+        c3.setName(\"c3\");\n+        u.setEntityC(c3);\n+        em.persist(c3);\n+        em.getTransaction().commit();\n+        \n+        // update be removing the many-to-one value\n+        em.getTransaction().begin();\n+        u.setEntityC(null);\n+        em.getTransaction().commit();\n+        \n+        //query\n+        Query q = em.createQuery(\"SELECT u FROM Uni_MTo1_JT u where u.name='u_new'\");\n+        Uni_MTo1_JT queryU = (Uni_MTo1_JT)q.getSingleResult();\n+        assertEquals(u, queryU);\n+        em.clear();\n+\n+        //find\n+        long id = u1.getId();\n+        Uni_MTo1_JT findU = em.find(Uni_MTo1_JT.class, id);\n+        assertEquals(u1, findU);\n+        \n+        //remove\n+        em.getTransaction().begin();\n+        em.remove(findU);\n+        em.getTransaction().commit();\n+    }\n+\n+    public void testOneToOneUsingJoinTable() {\n+        List<Class<?>> types = new ArrayList<Class<?>>();\n+        types.add(EntityC_B11JT.class);\n+        types.add(EntityC_U11JT.class);\n+        types.add(Bi_1To1_JT.class);\n+        types.add(Uni_1To1_JT.class);\n+        OpenJPAEntityManagerFactorySPI emf = createEMF2_0(types);\n+        EntityManager em = emf.createEntityManager();\n+        \n+        try {\n+            // trigger table creation\n+            em.getTransaction().begin();\n+            em.getTransaction().commit();\n+            assertSQLFragnments(sql, \"CREATE TABLE Bi11JT_C\", \"B_ID\", \"C_ID\");\n+            assertSQLFragnments(sql, \"CREATE TABLE Uni11JT_C\", \"U_ID\", \"C_ID\");\n+            crudBi11JT(em);\n+            crudUni11JT(em);\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+            fail(\"OneToOne mapping failed with exception message: \" + e.getMessage());\n+        } finally {\n+            em.close();\n+            emf.close();            \n+        }\n+    }\n+\n+    public void crudUni11JT(EntityManager em) {\n+        Uni_1To1_JT u = new Uni_1To1_JT();\n+        u.setName(\"uni1mjt\");\n+\n+        EntityC_U11JT c1 = new EntityC_U11JT();\n+        c1.setName(\"c1\");\n+        u.setEntityC(c1);\n+\n+        em.persist(u);\n+        em.persist(c1);\n+        em.getTransaction().begin();\n+        em.getTransaction().commit();\n+        \n+        //update by setting to a new C\n+        em.getTransaction().begin();\n+        u.setName(\"uni1mjt_new\");\n+        EntityC_U11JT newC = new EntityC_U11JT();\n+        newC.setName(\"newC\");\n+        u.setEntityC(newC);\n+        em.persist(newC);\n+        em.getTransaction().commit();\n+        \n+        // update by setting to null\n+        em.getTransaction().begin();\n+        u.setEntityC(null);\n+        em.getTransaction().commit();\n+        em.clear();\n+        \n+        //query\n+        Query q = em.createQuery(\"SELECT u FROM Uni_1To1_JT u where u.name = 'uni1mjt_new'\");\n+        Uni_1To1_JT u1 = (Uni_1To1_JT)q.getSingleResult();\n+        assertEquals(u, u1);\n+        em.clear();\n+\n+        //find\n+        long id = u1.getId();\n+        Uni_1To1_JT findU1 = em.find(Uni_1To1_JT.class, id);\n+        assertEquals(u, findU1);\n+        \n+        //remove\n+        em.getTransaction().begin();\n+        em.remove(findU1);\n+        em.getTransaction().commit();\n+    }\n+\n+    public void crudBi11JT(EntityManager em) {\n+        Bi_1To1_JT b = new Bi_1To1_JT();\n+        b.setName(\"bi11fk\");\n+        \n+        EntityC_B11JT c = new EntityC_B11JT();\n+        c.setName(\"c\");\n+        b.setEntityC(c);\n+        //c.setBi11jt(b);\n+\n+        em.persist(b);\n+        em.persist(c);\n+        em.getTransaction().begin();\n+        em.getTransaction().commit();\n+\n+        // update by removing a c \n+        em.getTransaction().begin();\n+        b.setEntityC(null);\n+        em.getTransaction().commit();\n+\n+        //update\n+        em.getTransaction().begin();\n+        b.setName(\"newName\");\n+        EntityC_B11JT c1 = new EntityC_B11JT();\n+        c1.setName(\"c1\");\n+        b.setEntityC(c1);\n+        //c1.setBi11jt(b);\n+        em.persist(c1);\n+        em.getTransaction().commit();\n+        \n+        //query\n+        Query q = em.createQuery(\"SELECT u FROM Bi_1To1_JT u\");\n+        Bi_1To1_JT b1 = (Bi_1To1_JT)q.getSingleResult();\n+        assertEquals(b, b1);\n+        em.clear();\n+\n+        // query\n+        q = em.createQuery(\"SELECT c FROM EntityC_B11JT c\");\n+        List<EntityC_B11JT> cs1 = q.getResultList();\n+        assertEquals(2, cs1.size());\n+        em.clear();\n+        \n+        //find\n+        long id = b1.getId();\n+        Bi_1To1_JT b2 = em.find(Bi_1To1_JT.class, id);\n+        assertEquals(b, b2);\n+        \n+        //remove\n+        em.getTransaction().begin();\n+        em.remove(b2);\n+        em.getTransaction().commit();\n+    }\n+\n+    private OpenJPAEntityManagerFactorySPI createEMF2_0(List<Class<?>> types) {\n+        Map<String,Object> map = new HashMap<String,Object>();\n+        map.put(\"openjpa.jdbc.JDBCListeners\", \n+                new JDBCListener[] { \n+                    this.new Listener() \n+                });\n+        map.put(\"openjpa.jdbc.SynchronizeMappings\", \n+            \"buildSchema(ForeignKeys=true,SchemaAction='drop,add')\");\n+\n+        map.put(PERSISTENT_CLASS_LIST, types);\n+        return (OpenJPAEntityManagerFactorySPI)\n+                createContainerEMF(\"persistence_2_0\",\n+                    \"org/apache/openjpa/persistence/compat/\" +\n+                    \"persistence_2_0.xml\", map);\n+    }\n+    \n+    void assertSQLFragnments(List<String> list, String... keys) {\n+        if (SQLSniffer.matches(list, keys))\n+            return;\n+        fail(\"None of the following \" + sql.size() + \" SQL \\r\\n\" + \n+                toString(sql) + \"\\r\\n contains all keys \\r\\n\"\n+                + toString(Arrays.asList(keys)));\n+    }\n+\n+    public String toString(List<String> list) {\n+        StringBuffer buf = new StringBuffer();\n+        for (String s : list)\n+            buf.append(s).append(\"\\r\\n\");\n+        return buf.toString();\n+    }\n+\n+    public class Listener extends AbstractJDBCListener {\n+        @Override\n+        public void beforeExecuteStatement(JDBCEvent event) {\n+            if (event.getSQL() != null && sql != null) {\n+                sql.add(event.getSQL());\n+                sqlCount++;\n+            }\n+        }\n+    }\n+}"},{"sha":"c9bcb4b6a40c3183a93147d71ebe141c6e85f3ea","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/ContainerEMFTest.java","status":"added","additions":145,"deletions":0,"changes":145,"blob_url":"https://github.com/apache/openjpa/blob/cc59e096ef9850ec1638ebcf001d558b9cfaa166/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/ContainerEMFTest.java","raw_url":"https://github.com/apache/openjpa/raw/cc59e096ef9850ec1638ebcf001d558b9cfaa166/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/ContainerEMFTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/ContainerEMFTest.java?ref=cc59e096ef9850ec1638ebcf001d558b9cfaa166","patch":"@@ -0,0 +1,145 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.test;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.security.AccessController;\n+import java.security.PrivilegedActionException;\n+import java.util.Collections;\n+import java.util.Enumeration;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.persistence.spi.PersistenceUnitInfo;\n+\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n+import org.apache.openjpa.persistence.PersistenceProductDerivation;\n+import org.apache.openjpa.persistence.PersistenceProviderImpl;\n+import org.apache.openjpa.persistence.PersistenceUnitInfoImpl;\n+\n+/*\n+ * This abstract test framework class provides scaffolding for using\n+ * PersistenceProvider.createContainerEntityManagerFactory from within\n+ * a JSE environment.  Tests which extend this class can specify a non-default\n+ * persistence file name by overriding the getPersistenceResourceName() \n+ * method.\n+ * \n+ */\n+public abstract class ContainerEMFTest extends SingleEMFTestCase {\n+\n+    // Use this constant as a config map key to specify a list of persistent \n+    // classes.  For example:\n+    // List<Class<?>> clist = new ArrayList<Class<?>>();\n+    // clist.add(com.my.Cls.class);\n+    // clist.add(com.my.OtherCls.class);\n+    // cfgMap.put(PERSISTENT_CLASS_LIST, clist);\n+    // emf = createContainerEMF(\"pu\",\"persistence.xml\", cfgMap);\n+    public static final String PERSISTENT_CLASS_LIST = \"PERSISTENT_CLASS_LIST\";\n+    \n+    // The persistence file name to parse.  This file gets parsed\n+    // and converted into one or more PersistenceUnitInfo's\n+    public String getPersistenceResourceName() {\n+        return PersistenceProductDerivation.RSRC_DEFAULT;\n+    }\n+    \n+    // Creates an EMF through the typical container path.  This EMF may be\n+    // a bit quirky, but provides some level of testing from within a JSE\n+    // environment.\n+    @Override\n+    public void setUp(Object...props) {\n+        Map<String, Object> map = getPropertiesMap(props);\n+        emf = createContainerEMF(getPersistenceUnitName(),\n+            getPersistenceResourceName(), map);\n+    }\n+\n+    // Create an EMF through the path a container normally takes - calling\n+    // createContainerEntityManagerFactory directly on the persistence impl.\n+    @SuppressWarnings(\"unchecked\")\n+    protected OpenJPAEntityManagerFactorySPI createContainerEMF(final String pu,\n+        final String persistenceFile, Map<String, Object> map) {\n+        List<Class<?>> clist = null;\n+        OpenJPAEntityManagerFactorySPI oemf = null;\n+        Map<String, Object> config = new HashMap(System.getProperties());\n+        if (map != null) {\n+            config.putAll(map);\n+            // Get the persistent class list\n+            clist = (List<Class<?>>)map.remove(PERSISTENT_CLASS_LIST);\n+        }\n+        PersistenceProductDerivation.ConfigurationParser cfgParser = \n+            new PersistenceProductDerivation.ConfigurationParser(config);\n+        try {\n+            URL url = getResourceURL(persistenceFile);\n+            cfgParser.parse(url);\n+            List<PersistenceUnitInfoImpl> units = cfgParser.getResults();\n+            PersistenceUnitInfo puinf = null;\n+            // Find the pu info that matches the pu name\n+            for (PersistenceUnitInfo pui : units) {\n+                if (pu.equals(pui.getPersistenceUnitName())) {\n+                    puinf = pui;\n+                    break;\n+                }\n+            }\n+            \n+            // If there is a persistent class list, add each class to the puinfo\n+            if (clist != null) {\n+                for (Class<?> cl : clist) {\n+                    ((PersistenceUnitInfoImpl)puinf).addManagedClassName(cl.getName());\n+                }\n+            }\n+            \n+            oemf = createContainerEMF(pu, puinf, config);\n+        }\n+        catch (IOException ioe) {\n+            throw new RuntimeException(\"Failed to parse: \" + getPersistenceResourceName(), ioe);\n+        }\n+        if (oemf == null) {\n+            throw new NullPointerException(\"Expected an entity manager factory \" + \"for the persistence unit named: \\\"\"\n+                + pu + \"\\\"\");\n+        }\n+        return oemf;\n+    }\n+\n+    // Creates an instance of the OpenJPA PersistenceProviderImpl and\n+    // returns an EMF via createContainerEntityManagerFactory\n+    private OpenJPAEntityManagerFactorySPI createContainerEMF(String puName, \n+        PersistenceUnitInfo pui, Map<String, Object> map) {\n+        \n+        PersistenceProviderImpl  ppi = new PersistenceProviderImpl();\n+        \n+        return (OpenJPAEntityManagerFactorySPI)ppi.createContainerEntityManagerFactory(pui, map);\n+    }\n+\n+    // Build a resource URL for the given resource\n+    private static URL getResourceURL(String rsrc) throws IOException {\n+        Enumeration<URL> urls = null;\n+        try {\n+            ClassLoader cl = ContainerEMFTest.class.getClassLoader();\n+            urls = AccessController.doPrivileged(\n+                J2DoPrivHelper.getResourcesAction(cl, rsrc));\n+        } catch (PrivilegedActionException pae) {\n+            throw (IOException) pae.getException();\n+        }\n+        return Collections.list(urls).get(0);\n+    }\n+\n+    \n+}"},{"sha":"8e31b896561201b9a1778a01722a2b170e0b818a","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/cc59e096ef9850ec1638ebcf001d558b9cfaa166/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java","raw_url":"https://github.com/apache/openjpa/raw/cc59e096ef9850ec1638ebcf001d558b9cfaa166/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java?ref=cc59e096ef9850ec1638ebcf001d558b9cfaa166","patch":"@@ -558,7 +558,6 @@ public void setInto(Configuration conf) {\n                 } else {\n                     // Set the spec level based on the persistence version\n                     oconf.setSpecification(\"jpa \" + persistenceVersion.toString());\n-                    getProperties().remove(PersistenceUnitInfoImpl.PERSISTENCE_VERSION);\n                 }\n                     \n "}]}

