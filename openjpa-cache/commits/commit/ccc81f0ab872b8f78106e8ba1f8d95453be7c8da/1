{"sha":"ccc81f0ab872b8f78106e8ba1f8d95453be7c8da","node_id":"MDY6Q29tbWl0MjA2MzY0OmNjYzgxZjBhYjg3MmI4Zjc4MTA2ZThiYTFmOGQ5NTQ1M2JlN2M4ZGE=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-12-07T22:42:16Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-12-07T22:42:16Z"},"message":"OPENJPA-1903: Parameter substitution for complex identity\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1043221 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"abce35f80cc6dc2e6c474af53774276784b250c7","url":"https://api.github.com/repos/apache/openjpa/git/trees/abce35f80cc6dc2e6c474af53774276784b250c7"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ccc81f0ab872b8f78106e8ba1f8d95453be7c8da","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ccc81f0ab872b8f78106e8ba1f8d95453be7c8da","html_url":"https://github.com/apache/openjpa/commit/ccc81f0ab872b8f78106e8ba1f8d95453be7c8da","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ccc81f0ab872b8f78106e8ba1f8d95453be7c8da/comments","author":null,"committer":null,"parents":[{"sha":"b56fcf328763c661e1651c2ec1f2888efa9c9155","url":"https://api.github.com/repos/apache/openjpa/commits/b56fcf328763c661e1651c2ec1f2888efa9c9155","html_url":"https://github.com/apache/openjpa/commit/b56fcf328763c661e1651c2ec1f2888efa9c9155"}],"stats":{"total":28,"additions":13,"deletions":15},"files":[{"sha":"540b9fae63b80b1a4d780767b85ade8f547801b7","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedQueryImpl.java","status":"modified","additions":13,"deletions":15,"changes":28,"blob_url":"https://github.com/apache/openjpa/blob/ccc81f0ab872b8f78106e8ba1f8d95453be7c8da/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedQueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/ccc81f0ab872b8f78106e8ba1f8d95453be7c8da/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedQueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedQueryImpl.java?ref=ccc81f0ab872b8f78106e8ba1f8d95453be7c8da","patch":"@@ -19,6 +19,7 @@\n \n package org.apache.openjpa.jdbc.kernel;\n \n+import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collection;\n import java.util.Collections;\n@@ -79,7 +80,7 @@\n     private Class<?>[] _projTypes;\n \n     // Position of the user defined parameters in the _params list\n-    private Map<Object, int[]>    _userParamPositions;\n+    private Map<Object, Integer[]>    _userParamPositions;\n     private Map<Integer, Object> _template;\n     private SelectImpl select;\n \n@@ -326,7 +327,7 @@ private boolean isUsingFieldStrategy(QueryExpressions exp) {\n         Set<Map.Entry<Object,Object>> userSet = user.entrySet();\n         for (Map.Entry<Object,Object> userEntry : userSet) {\n             Object key = userEntry.getKey();\n-            int[] indices = _userParamPositions.get(key);\n+            Integer[] indices = _userParamPositions.get(key);\n             if (indices == null || indices.length == 0)\n                 throw new UserException(_loc.get(\"uparam-no-pos\", key, this));\n             Object val = userEntry.getValue();\n@@ -361,7 +362,7 @@ private boolean isUsingFieldStrategy(QueryExpressions exp) {\n      * @param broker used to obtain the primary key values\n      */\n     private void setPersistenceCapableParameter(Map<Integer,Object> result, \n-        Object pc, int[] indices, Broker broker) {\n+        Object pc, Integer[] indices, Broker broker) {\n         JDBCStore store = (JDBCStore)broker.getStoreManager()\n             .getInnermostDelegate();\n         MappingRepository repos = store.getConfiguration()\n@@ -389,7 +390,7 @@ private void setPersistenceCapableParameter(Map<Integer,Object> result,\n     }\n     \n     private void setCollectionValuedParameter(Map<Integer,Object> result, \n-        Collection values, int[] indices, Object param, Broker broker) {\n+        Collection values, Integer[] indices, Object param, Broker broker) {\n         int n = values.size();\n         Object[] array = values.toArray();\n         if (n > indices.length || indices.length%n != 0) {\n@@ -415,20 +416,17 @@ private void setCollectionValuedParameter(Map<Integer,Object> result,\n      * key. A user parameter key may appear more than once.\n      */\n     void setUserParameterPositions(List list) {\n-        _userParamPositions = new HashMap<Object, int[]>();\n+        _userParamPositions = new HashMap<Object, Integer[]>();\n+        List<Integer> positions = new ArrayList<Integer>();\n         for (int i = 1; list != null && i < list.size(); i += 2) {\n             Object key = ((Parameter)list.get(i)).getParameterKey();\n-            int p = (Integer)list.get(i-1);\n-            int[] positions = _userParamPositions.get(key);\n-            if (positions == null) {\n-                positions = new int[]{p};\n-            } else {\n-                int[] temp = new int[positions.length+1];\n-                System.arraycopy(positions, 0, temp, 0, positions.length);\n-                temp[positions.length] = p;\n-                positions = temp;\n+            positions.clear();\n+            for (int j = 1; j < list.size(); j += 2) {\n+                Object other = ((Parameter)list.get(j)).getParameterKey();\n+                if (key.equals(other))\n+                    positions.add((Integer)list.get(j-1));\n             }\n-            _userParamPositions.put(key, positions);\n+            _userParamPositions.put(key, positions.toArray(new Integer[positions.size()]));\n         }\n     }\n     "}]}

