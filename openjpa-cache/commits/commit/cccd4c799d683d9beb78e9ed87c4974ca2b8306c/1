{"sha":"cccd4c799d683d9beb78e9ed87c4974ca2b8306c","node_id":"MDY6Q29tbWl0MjA2MzY0OmNjY2Q0Yzc5OWQ2ODNkOWJlYjc4ZTllZDg3YzQ5NzRjYTJiODMwNmM=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-09-22T20:41:15Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-09-22T20:41:15Z"},"message":"OPENJPA-1811 Dynamic load of enhancer agent on Mac OS X fails\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1000209 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"fdc1e4385589ad0a9eae6ae18449df2cc203317d","url":"https://api.github.com/repos/apache/openjpa/git/trees/fdc1e4385589ad0a9eae6ae18449df2cc203317d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/cccd4c799d683d9beb78e9ed87c4974ca2b8306c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/cccd4c799d683d9beb78e9ed87c4974ca2b8306c","html_url":"https://github.com/apache/openjpa/commit/cccd4c799d683d9beb78e9ed87c4974ca2b8306c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/cccd4c799d683d9beb78e9ed87c4974ca2b8306c/comments","author":null,"committer":null,"parents":[{"sha":"9b105a2f00e451e190defd033c70271020de034d","url":"https://api.github.com/repos/apache/openjpa/commits/9b105a2f00e451e190defd033c70271020de034d","html_url":"https://github.com/apache/openjpa/commit/9b105a2f00e451e190defd033c70271020de034d"}],"stats":{"total":63,"additions":39,"deletions":24},"files":[{"sha":"899906c3e9e1b866c61534d7588e5b9ca174736b","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/InstrumentationFactory.java","status":"modified","additions":39,"deletions":24,"changes":63,"blob_url":"https://github.com/apache/openjpa/blob/cccd4c799d683d9beb78e9ed87c4974ca2b8306c/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/InstrumentationFactory.java","raw_url":"https://github.com/apache/openjpa/raw/cccd4c799d683d9beb78e9ed87c4974ca2b8306c/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/InstrumentationFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/InstrumentationFactory.java?ref=cccd4c799d683d9beb78e9ed87c4974ca2b8306c","patch":"@@ -83,15 +83,19 @@ public static synchronized void setDynamicallyInstallAgent(boolean val) {\n      */\n     public static synchronized Instrumentation getInstrumentation(final Log log) {\n         if (log.isTraceEnabled() == true) {\n-            log.trace(InstrumentationFactory.class.getName() + \"getInstrumentation() _disabled:\" + \" _inst:\" + _inst\n-                + \"_dynamicallyInstall:\" + _dynamicallyInstall);\n+            log.trace(_name + \".getInstrumentation() _inst:\" + _inst\n+                + \" _dynamicallyInstall:\" + _dynamicallyInstall);\n         }\n         if ( _inst != null || !_dynamicallyInstall)\n             return _inst;\n \n         // dynamic loading of the agent is only available in JDK 1.6+\n-        if (JavaVersions.VERSION < 6)\n+        if (JavaVersions.VERSION < 6) {\n+            if (log.isTraceEnabled() == true) {\n+                log.trace(_name + \".getInstrumentation() Dynamic loading only supported on Java SE 6 or later\");\n+            }\n             return null;\n+        }\n \n         AccessController.doPrivileged(new PrivilegedAction<Object>() {\n             public Object run() {\n@@ -182,35 +186,46 @@ private static File findToolsJar(Log log) {\n         String javaHome = System.getProperty(\"java.home\");\n         File javaHomeFile = new File(javaHome);\n \n-        // IBM JDK hack -- for some reason when running on the IBM JDK, the JVM\n-        // appends /jre to the java.home SystemProperty. Remove the addition to\n-        // be consistent with Sun. Note: Not sure if this is something dependent\n-        // on my machine. Not really that big of a deal since this isn't\n-        // supported on the IBM JDK at this point.\n-        File toolsJarFile =\n-            new File(javaHomeFile, \"lib\" + File.separator + \"tools.jar\");\n+        File toolsJarFile = new File(javaHomeFile, \"lib\" + File.separator + \"tools.jar\");\n         if (toolsJarFile.exists() == false) {\n-            // If tools jar file isn't found, we may be on an IBM JDK. If the\n-            // java.home property ends in /jre, try removing it to look for the\n-            // tools.jar.\n-            String absPath = javaHomeFile.getAbsolutePath();\n-            if (absPath.endsWith(File.separator + \"jre\") == true) {\n-                javaHomeFile = javaHomeFile.getParentFile();\n-                toolsJarFile =\n-                    new File(javaHomeFile, \"lib\" + File.separator +\n-                        \"tools.jar\");\n+            if (log.isTraceEnabled() == true) {\n+                log.trace(_name + \".findToolsJar() -- couldn't find default \" + toolsJarFile.getAbsolutePath());\n+            }\n+            if (JavaVendors.getCurrentVendor().isIBM()) {\n+                // If we're on an IBM SDK, then remove /jre off of java.home and try again.\n+                if (javaHomeFile.getAbsolutePath().endsWith(File.separator + \"jre\") == true) {\n+                    javaHomeFile = javaHomeFile.getParentFile();\n+                    toolsJarFile = new File(javaHomeFile, \"lib\" + File.separator + \"tools.jar\");\n+                    if (toolsJarFile.exists() == false) {\n+                        if (log.isTraceEnabled() == true) {\n+                            log.trace(_name + \".findToolsJar() -- for IBM SDK couldn't find \" +\n+                                toolsJarFile.getAbsolutePath());\n+                        }\n+                    }\n+                }\n+            } else if (System.getProperty(\"os.name\").toLowerCase().indexOf(\"mac\") >= 0) {\n+                // If we're on a Mac, then change the search path to use ../Classes/classes.jar.\n+                if (javaHomeFile.getAbsolutePath().endsWith(File.separator + \"Home\") == true) {\n+                    javaHomeFile = javaHomeFile.getParentFile();\n+                    toolsJarFile = new File(javaHomeFile, \"Classes\" + File.separator + \"classes.jar\");\n+                    if (toolsJarFile.exists() == false) {\n+                        if (log.isTraceEnabled() == true) {\n+                            log.trace(_name + \".findToolsJar() -- for Mac OS couldn't find \" +\n+                                toolsJarFile.getAbsolutePath());\n+                        }\n+                    }\n+                }\n             }\n         }\n \n         if (toolsJarFile.exists() == false) {\n-            String toolsJarPath = toolsJarFile.getAbsolutePath();\n+            return null;\n+        } else {\n             if (log.isTraceEnabled() == true) {\n-                log.trace(_name + \".findToolsJar() -- couldn't find \"\n-                    + toolsJarPath);\n+                log.trace(_name + \".findToolsJar() -- found \" + toolsJarFile.getAbsolutePath());\n             }\n-            return null;\n+            return toolsJarFile;\n         }\n-        return toolsJarFile;\n     }\n \n     /**"}]}

