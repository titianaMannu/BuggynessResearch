{"sha":"ccfbe6cd3187c1a585633c32e8db9486e591a099","node_id":"MDY6Q29tbWl0MjA2MzY0OmNjZmJlNmNkMzE4N2MxYTU4NTYzM2MzMmU4ZGI5NDg2ZTU5MWEwOTk=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-08-13T20:01:38Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-08-13T20:01:38Z"},"message":"OPENJPA-1185: check in embeddable in subquery support on behalf of Catalina\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@804011 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b063f57c8718533dafd936782ca67121828d59e2","url":"https://api.github.com/repos/apache/openjpa/git/trees/b063f57c8718533dafd936782ca67121828d59e2"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ccfbe6cd3187c1a585633c32e8db9486e591a099","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ccfbe6cd3187c1a585633c32e8db9486e591a099","html_url":"https://github.com/apache/openjpa/commit/ccfbe6cd3187c1a585633c32e8db9486e591a099","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ccfbe6cd3187c1a585633c32e8db9486e591a099/comments","author":null,"committer":null,"parents":[{"sha":"a488a122cf639eb23b37ba23670758ce6b2eef40","url":"https://api.github.com/repos/apache/openjpa/commits/a488a122cf639eb23b37ba23670758ce6b2eef40","html_url":"https://github.com/apache/openjpa/commit/a488a122cf639eb23b37ba23670758ce6b2eef40"}],"stats":{"total":227,"additions":159,"deletions":68},"files":[{"sha":"174459464a29dd591837480d9e20284a02876e7d","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ConstPath.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/ccfbe6cd3187c1a585633c32e8db9486e591a099/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ConstPath.java","raw_url":"https://github.com/apache/openjpa/raw/ccfbe6cd3187c1a585633c32e8db9486e591a099/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ConstPath.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ConstPath.java?ref=ccfbe6cd3187c1a585633c32e8db9486e591a099","patch":"@@ -226,6 +226,10 @@ public String getSchemaAlias() {\n         return null;\n     }\n     \n-    public void setSubqueryContext(Context conext) {\n+    public void setSubqueryContext(Context conext, String correlationVar) {\n+    }\n+\n+    public String getCorrelationVar() {\n+        return null;\n     }\n }"},{"sha":"86ef7828ba57c560b55cb56fffecf60ca9b5161b","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java","status":"modified","additions":5,"deletions":8,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/ccfbe6cd3187c1a585633c32e8db9486e591a099/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java","raw_url":"https://github.com/apache/openjpa/raw/ccfbe6cd3187c1a585633c32e8db9486e591a099/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java?ref=ccfbe6cd3187c1a585633c32e8db9486e591a099","patch":"@@ -117,6 +117,7 @@ public PCPath(ClassMapping candidate, Variable var) {\n             action.op = Action.VAR;\n             action.data = var.getName();\n             _schemaAlias = other._schemaAlias;\n+            _correlationVar = other._correlationVar;\n         }\n         _actions.add(action);\n         _cast = var.getType(); // initial type is var type\n@@ -146,11 +147,12 @@ public String getSchemaAlias() {\n         return _schemaAlias;\n     }\n     \n-    public void setSubqueryContext(Context context) {\n+    public void setSubqueryContext(Context context, String correlationVar) {\n         Action action = lastFieldAction();\n         if (action == null)\n             return;\n         action.context = context;\n+        _correlationVar = correlationVar;\n     }\n     \n     /**\n@@ -317,11 +319,8 @@ else if (pstate.joinedRel\n                     if (pstate.field.isElementCollection() && pstate.field.getElement().isEmbedded()) {\n                         Strategy strategy = pstate.field.getStrategy();\n                         if (strategy instanceof HandlerCollectionTableFieldStrategy) {\n-                            if (pstate.compareEqual)\n-                                return pstate.field.getJoinForeignKey().getColumns();\n                             return ((HandlerCollectionTableFieldStrategy) strategy).\n-                                getElementColumns(elem.getTypeMapping());\n-                            \n+                                getElementColumns(elem.getTypeMapping());                            \n                         }\n                     }\n                     if (pstate.joinedRel && elem.getTypeCode() == JavaTypes.PC)\n@@ -475,7 +474,6 @@ public void setImplicitType(Class type) {\n \n     public ExpState initialize(Select sel, ExpContext ctx, int flags) {\n         PathExpState pstate = new PathExpState(sel.newJoins());\n-        pstate.compareEqual = (flags & Val.CMP_EQUAL) != 0 ? true : false;\n         boolean key = false;\n         boolean forceOuter = false;\n         ClassMapping rel = _candidate;\n@@ -501,7 +499,6 @@ public ExpState initialize(Select sel, ExpContext ctx, int flags) {\n                 if (sel.getParent() != null && action.var != null &&\n                     prevaction != null && prevaction.data != null &&\n                     sel.ctx().getVariable(action.var) == null) {\n-                    //System.out.println(\"Correlated action var=\"+action.var);\n                     isCorrelatedPath = true;\n                     pstate.joins = pstate.joins.setCorrelatedVariable(action.var);\n                 } else \n@@ -748,7 +745,6 @@ protected Object eval(Object candidate, Object orig,\n         public Column[] cols = null;\n         public boolean joinedRel = false;\n         public boolean isEmbedElementColl = false;\n-        public boolean compareEqual = false;\n         \n         public PathExpState(Joins joins) {\n             super(joins);\n@@ -827,6 +823,7 @@ public void select(Select sel, ExpContext ctx, ExpState state,\n \n     public void selectColumns(Select sel, ExpContext ctx, ExpState state, \n         boolean pks) {\n+        sel.setSchemaAlias(_schemaAlias);\n         ClassMapping mapping = getClassMapping(state);\n         PathExpState pstate = (PathExpState) state;\n         if (mapping == null || !pstate.joinedRel ||"},{"sha":"477e132bd762aa4f802d2aa02743b8360ec537b8","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SubQ.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/ccfbe6cd3187c1a585633c32e8db9486e591a099/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SubQ.java","raw_url":"https://github.com/apache/openjpa/raw/ccfbe6cd3187c1a585633c32e8db9486e591a099/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SubQ.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SubQ.java?ref=ccfbe6cd3187c1a585633c32e8db9486e591a099","patch":"@@ -46,7 +46,7 @@\n \n     private final ClassMapping _candidate;\n     private final boolean _subs;\n-    private final String _subqAlias;\n+    private String _subqAlias;\n     private final SelectConstructor _cons = new SelectConstructor();\n \n     private Class _type = null;\n@@ -81,6 +81,10 @@ public ClassMapping getCandidate() {\n     public boolean getSubs() {\n         return _subs;\n     }\n+\n+    public void setSubqAlias(String subqAlias) {\n+        _subqAlias = subqAlias;\n+    }\n     \n     public String getSubqAlias() {\n         return _subqAlias;"},{"sha":"2b3d1e5538b5b64c4fd861d30585ec1e1f69c935","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","status":"modified","additions":48,"deletions":24,"changes":72,"blob_url":"https://github.com/apache/openjpa/blob/ccfbe6cd3187c1a585633c32e8db9486e591a099/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/ccfbe6cd3187c1a585633c32e8db9486e591a099/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java?ref=ccfbe6cd3187c1a585633c32e8db9486e591a099","patch":"@@ -2193,28 +2193,48 @@ protected SQLBuffer getFrom(Select sel, boolean forUpdate) {\n                 if (itr.hasNext())\n                     fromSQL.append(\", \");\n             }\n+            if (aliases.size() < 2 && sel.getParent() != null) {\n+                // subquery may contain correlated joins\n+                Iterator itr = sel.getJoinIterator();\n+                while (itr.hasNext()) {\n+                    Join join = (Join) itr.next();\n+                    // append where clause\n+                    if (join.isCorrelated() && join.getForeignKey() != null) {\n+                        SQLBuffer where = new SQLBuffer(this);\n+                        where.append(\"(\").append(toTraditionalJoin(join)).append(\")\");\n+                        sel.where(where.getSQL());\n+                    }                \n+                }\n+            }\n         } else {\n             Iterator itr = sel.getJoinIterator();\n             boolean first = true;\n             while (itr.hasNext()) {\n                 Join join = (Join) itr.next();\n                 if (correlatedJoinCondition(join, sel))\n                     continue;\n-                fromSQL.append(toSQL92Join(sel, join, forUpdate,\n-                    first));\n+\n+                if (join.isCorrelated())\n+                    toCorrelatedJoin(sel, join, forUpdate, first);                    \n+                else    \n+                    fromSQL.append(toSQL92Join(sel, join, forUpdate,\n+                        first));\n                 first = false;\n                 if (itr.hasNext() && join.isCorrelated()) {\n-                    fromSQL.append(\", \");\n+                    if (fromSQL.getSQL().length() > 0)\n+                        fromSQL.append(\", \");\n                     first = true;\n                 }\n             }\n \n             for (Iterator itr2 = aliases.iterator(); itr2.hasNext();) {\n                 String tableAlias = itr2.next().toString();\n                 if (fromSQL.getSQL().indexOf(tableAlias) == -1) {\n-                    if (!first)\n+                    if (!first && fromSQL.getSQL().length() > 0)\n                         fromSQL.append(\", \");\n                     fromSQL.append(tableAlias);\n+                    if (forUpdate && tableForUpdateClause != null)\n+                        fromSQL.append(\" \").append(tableForUpdateClause);\n                     first = false;\n                 }\n             }\n@@ -2233,8 +2253,9 @@ private boolean correlatedJoinCondition(Join join, Select sel) {\n         //the where clause in the subquery\n         while (itr.hasNext()) {\n             Join join1 = (Join) itr.next();\n-            if (join == join1)\n+            if (join == join1 && !join.isForeignKeyInversed()) {\n                 continue;\n+            }\n             if (join.getIndex2() == join1.getIndex1() ||\n                 join.getIndex2() == join1.getIndex2()) {\n                 skip = true;\n@@ -2356,42 +2377,45 @@ public SQLBuffer toTraditionalJoin(Join join) {\n     public SQLBuffer toSQL92Join(Select sel, Join join, boolean forUpdate,\n         boolean first) {\n         SQLBuffer buf = new SQLBuffer(this);\n-        boolean corelated = join.isCorrelated();\n-        if (first && !corelated) {\n+\n+        if (first) {\n             buf.append(join.getTable1()).append(\" \").\n                 append(join.getAlias1());\n             if (forUpdate && tableForUpdateClause != null)\n                 buf.append(\" \").append(tableForUpdateClause);\n         }\n \n         buf.append(\" \");\n-        if (!corelated) {\n-            if (join.getType() == Join.TYPE_OUTER)\n-                buf.append(outerJoinClause);\n-            else if (join.getType() == Join.TYPE_INNER)\n-                buf.append(innerJoinClause);\n-            else // cross\n-                buf.append(crossJoinClause);\n-            buf.append(\" \");\n-        }\n+        if (join.getType() == Join.TYPE_OUTER)\n+            buf.append(outerJoinClause);\n+        else if (join.getType() == Join.TYPE_INNER)\n+            buf.append(innerJoinClause);\n+        else // cross\n+            buf.append(crossJoinClause);\n+        buf.append(\" \");\n \n         buf.append(join.getTable2()).append(\" \").append(join.getAlias2());\n         if (forUpdate && tableForUpdateClause != null)\n             buf.append(\" \").append(tableForUpdateClause);\n \n-        if (!corelated) {\n-            if (join.getForeignKey() != null)\n-                buf.append(\" ON \").append(toTraditionalJoin(join));\n-            else if (requiresConditionForCrossJoin &&\n-                    join.getType() == Join.TYPE_CROSS)\n-                buf.append(\" ON (1 = 1)\");\n-        } else if (join.getForeignKey() != null){\n+        if (join.getForeignKey() != null)\n+            buf.append(\" ON \").append(toTraditionalJoin(join));\n+        else if (requiresConditionForCrossJoin &&\n+                join.getType() == Join.TYPE_CROSS)\n+            buf.append(\" ON (1 = 1)\");\n+        \n+        return buf;\n+    }\n+\n+    private SQLBuffer toCorrelatedJoin(Select sel, Join join, boolean forUpdate,\n+        boolean first) {\n+        if (join.getForeignKey() != null){\n             SQLBuffer where = new SQLBuffer(this);\n             where.append(\"(\").append(toTraditionalJoin(join)).append(\")\");\n             sel.where(where.getSQL());\n         }\n \n-        return buf;\n+        return null;\n     }\n \n     /**"},{"sha":"9376be854caa72e45005f894491af3ce14304eef","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Join.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/ccfbe6cd3187c1a585633c32e8db9486e591a099/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Join.java","raw_url":"https://github.com/apache/openjpa/raw/ccfbe6cd3187c1a585633c32e8db9486e591a099/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Join.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Join.java?ref=ccfbe6cd3187c1a585633c32e8db9486e591a099","patch":"@@ -154,6 +154,7 @@ public Join reverse() {\n         join._target = _target;\n         join._subs = _subs;\n         join._joins = _joins;\n+        join._correlated = _correlated;\n         return join;\n     }\n \n@@ -180,6 +181,8 @@ else if (_type == TYPE_INNER)\n             typeString = \"inner\";\n         else\n             typeString = \"outer\";\n+        if (_correlated)\n+            typeString += \" &\";\n         return \"<\" + System.identityHashCode(this) + \"> t\"\n             + _alias1 + \"->t\" + _alias2 + \" (\" + typeString + \")\";\n     }"},{"sha":"4b633c2408a94da05ba4b84ffd529cf4689b1774","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/ccfbe6cd3187c1a585633c32e8db9486e591a099/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","raw_url":"https://github.com/apache/openjpa/raw/ccfbe6cd3187c1a585633c32e8db9486e591a099/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java?ref=ccfbe6cd3187c1a585633c32e8db9486e591a099","patch":"@@ -2845,7 +2845,8 @@ private Joins join(String name, ForeignKey fk, ClassMapping target,\n             // update the path with the relation name before getting pk alias\n             this.append(name);\n             this.append(var);\n-            this.append(correlatedVar);\n+            if (var == null)\n+                this.append(correlatedVar);\n             context = ctx; \n             \n             if (toMany) {"},{"sha":"f64bc7bea8a79dacefa7e9284ce62171a8515472","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/AbstractExpressionBuilder.java","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/ccfbe6cd3187c1a585633c32e8db9486e591a099/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/AbstractExpressionBuilder.java","raw_url":"https://github.com/apache/openjpa/raw/ccfbe6cd3187c1a585633c32e8db9486e591a099/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/AbstractExpressionBuilder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/AbstractExpressionBuilder.java?ref=ccfbe6cd3187c1a585633c32e8db9486e591a099","patch":"@@ -158,8 +158,12 @@ protected void bind(Value var) {\n     protected Value getVariable(String id, boolean bind) {\n         // check for already constructed var\n         if (isSeenVariable(id))\n-            return (Value) _seenVars.get(id);\n+            return getVariable(id);\n \n+        return createVariable(id, bind);\n+    }\n+\n+    protected Value createVariable(String id, boolean bind) {\n         // create and cache var\n         Class<?> type = getDeclaredVariableType(id);\n \n@@ -547,6 +551,6 @@ protected abstract void addSchemaToContext(String alias,\n      * @param id\n      * @return\n      */\n-    protected abstract Value getSeenVariable(String id);\n+    protected abstract Value getVariable(String id);\n }\n "},{"sha":"69ec96667ff57de7bf2faf610d148ea0cef05d64","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/CandidatePath.java","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/ccfbe6cd3187c1a585633c32e8db9486e591a099/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/CandidatePath.java","raw_url":"https://github.com/apache/openjpa/raw/ccfbe6cd3187c1a585633c32e8db9486e591a099/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/CandidatePath.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/CandidatePath.java?ref=ccfbe6cd3187c1a585633c32e8db9486e591a099","patch":"@@ -42,6 +42,7 @@\n     implements Path {\n \n     protected LinkedList _actions = null;\n+    protected String _correlationVar = null;\n \n     /**\n      * Traverse into the given field of the current object, and update\n@@ -204,6 +205,10 @@ public String getSchemaAlias() {\n         return null;\n     }\n     \n-    public void setSubqueryContext(Context conext) {\n+    public void setSubqueryContext(Context conext, String correlationVar) {\n+    }\n+\n+    public String getCorrelationVar() {\n+        return _correlationVar;\n     }\n }"},{"sha":"7daa4e1eb5f874859f86c15fdb9c0b5efaacbc1d","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Path.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/ccfbe6cd3187c1a585633c32e8db9486e591a099/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Path.java","raw_url":"https://github.com/apache/openjpa/raw/ccfbe6cd3187c1a585633c32e8db9486e591a099/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Path.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Path.java?ref=ccfbe6cd3187c1a585633c32e8db9486e591a099","patch":"@@ -77,5 +77,7 @@\n         \n     public String getSchemaAlias();\n     \n-    public void setSubqueryContext(Context context);\n+    public void setSubqueryContext(Context context, String correlationVar);\n+\n+    public String getCorrelationVar();\n }"},{"sha":"60784cfdd72bfae371cd7246fceab532c314f5a3","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/SubQ.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/ccfbe6cd3187c1a585633c32e8db9486e591a099/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/SubQ.java","raw_url":"https://github.com/apache/openjpa/raw/ccfbe6cd3187c1a585633c32e8db9486e591a099/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/SubQ.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/SubQ.java?ref=ccfbe6cd3187c1a585633c32e8db9486e591a099","patch":"@@ -35,10 +35,12 @@\n     private static final Localizer _loc = Localizer.forPackage(Subquery.class);\n \n     private final String _alias;\n+    private String _subqAlias = null;\n     private Class _type = null;\n \n     public SubQ(String alias) {\n         _alias = alias;\n+        _subqAlias = alias;\n     }\n \n     public Object getSelect() {\n@@ -49,6 +51,14 @@ public String getCandidateAlias() {\n         return _alias;\n     }\n \n+    public void setSubqAlias(String subqAlias) {\n+        _subqAlias = subqAlias;\n+    }\n+\n+    public String getSubqAlias() {\n+        return _subqAlias;\n+    }\n+\n     public void setQueryExpressions(QueryExpressions q) {\n     }\n "},{"sha":"6756f3c4c952d73c6f0a92b9711003a874755586","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Subquery.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/ccfbe6cd3187c1a585633c32e8db9486e591a099/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Subquery.java","raw_url":"https://github.com/apache/openjpa/raw/ccfbe6cd3187c1a585633c32e8db9486e591a099/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Subquery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Subquery.java?ref=ccfbe6cd3187c1a585633c32e8db9486e591a099","patch":"@@ -32,6 +32,16 @@\n      */\n     public String getCandidateAlias();\n \n+    /*\n+     * Set the candidate alias for this subquery.\n+     */\n+    public void setSubqAlias(String subqAlias);\n+\n+    /*\n+     * Return the subqAlias\n+     */\n+    public String getSubqAlias();\n+\n     /**\n      * Set the parsed subquery.\n      */"},{"sha":"c9fc98d3140f64f77087e63e839525ff61b86da5","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","status":"modified","additions":56,"deletions":29,"changes":85,"blob_url":"https://github.com/apache/openjpa/blob/ccfbe6cd3187c1a585633c32e8db9486e591a099/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","raw_url":"https://github.com/apache/openjpa/raw/ccfbe6cd3187c1a585633c32e8db9486e591a099/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java?ref=ccfbe6cd3187c1a585633c32e8db9486e591a099","patch":"@@ -31,12 +31,15 @@\n import java.util.TreeSet;\n \n import org.apache.commons.collections.map.LinkedMap;\n+import org.apache.openjpa.conf.Compatibility;\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\n+import org.apache.openjpa.kernel.BrokerFactory;\n import org.apache.openjpa.kernel.ExpressionStoreQuery;\n import org.apache.openjpa.kernel.QueryContext;\n import org.apache.openjpa.kernel.QueryOperations;\n import org.apache.openjpa.kernel.StoreContext;\n-import org.apache.openjpa.kernel.BrokerFactory;\n import org.apache.openjpa.kernel.exps.AbstractExpressionBuilder;\n+import org.apache.openjpa.kernel.exps.Context;\n import org.apache.openjpa.kernel.exps.Expression;\n import org.apache.openjpa.kernel.exps.ExpressionFactory;\n import org.apache.openjpa.kernel.exps.Literal;\n@@ -46,19 +49,17 @@\n import org.apache.openjpa.kernel.exps.Resolver;\n import org.apache.openjpa.kernel.exps.Subquery;\n import org.apache.openjpa.kernel.exps.Value;\n-import org.apache.openjpa.kernel.exps.Context;\n+import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.lib.util.Localizer.Message;\n-import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.meta.FieldMetaData;\n import org.apache.openjpa.meta.JavaTypes;\n import org.apache.openjpa.meta.MetaDataRepository;\n import org.apache.openjpa.meta.ValueMetaData;\n import org.apache.openjpa.util.InternalException;\n import org.apache.openjpa.util.UserException;\n-import org.apache.openjpa.conf.Compatibility;\n-import org.apache.openjpa.conf.OpenJPAConfiguration;\n+\n import serp.util.Numbers;\n \n /**\n@@ -83,6 +84,7 @@\n     private final Stack<Context> contexts = new Stack<Context>();\n     private LinkedMap parameterTypes;\n     private int aliasCount = 0;\n+    private boolean inAssignSubselectProjection = false;\n \n     /**\n      * Constructor.\n@@ -147,7 +149,11 @@ protected ClassMetaData resolveClassMetaData(JPQLNode node) {\n         // we might be referencing a collection field of a subquery's parent\n         if (isPath(node)) {\n             Path path = getPath(node);\n-            return getFieldType(path.last());\n+            FieldMetaData fmd = path.last();\n+            cmd = getFieldType(fmd);\n+            if (cmd == null && fmd.isElementCollection())\n+                cmd = fmd.getDefiningMetaData();\n+            return cmd;\n         }\n \n         // now run again to throw the correct exception\n@@ -322,6 +328,22 @@ private static String assemble(JPQLNode node, String delimiter, int last) {\n         return result.toString();\n     }\n \n+    private Expression assignSubselectProjection(JPQLNode node,\n+        QueryExpressions exps) {\n+        inAssignSubselectProjection = true;\n+        exps.projections = new Value[1];\n+        exps.projectionClauses = new String[1];\n+        exps.projectionAliases = new String[1];\n+\n+        Value val = getValue(node);\n+        exps.projections[0] = val;\n+        exps.projectionClauses[0] = \n+            projectionClause(node.id == JJTSCALAREXPRESSION ?\n+                firstChild(node) : node);\n+        inAssignSubselectProjection = false;\n+        return null;\n+    }\n+\n     private Expression assignProjections(JPQLNode parametersNode,\n         QueryExpressions exps) {\n         int count = parametersNode.getChildCount();\n@@ -334,7 +356,7 @@ private Expression assignProjections(JPQLNode parametersNode,\n             JPQLNode parent = parametersNode.getChild(i);\n             JPQLNode node = firstChild(parent);\n             JPQLNode aliasNode = parent.children.length > 1 ? right(parent)\n-                : null;; \n+                : null; \n             Value proj = getValue(node);\n             String alias = aliasNode == null ? nextAlias()\n                  : aliasNode.text;\n@@ -467,6 +489,10 @@ private Expression evalSelectClause(QueryExpressions exps) {\n             int selectCount = expNode.getChildCount();\n             JPQLNode selectChild = firstChild(expNode);\n \n+            if (selectClause.parent.id == JJTSUBSELECT) {\n+                exps.distinct &= ~QueryExpressions.DISTINCT_AUTO;\n+                return assignSubselectProjection(onlyChild(selectChild), exps);\n+            }\n             // if we are selecting just one thing and that thing is the\n             // schema's alias, then do not treat it as a projection\n             if (selectCount == 1 && selectChild != null &&\n@@ -579,21 +605,10 @@ else if (node.id == JJTOUTERFETCHJOIN)\n         return exp;\n     }\n \n-    private Expression bindVariableForKeyPath(Path path, String alias,\n-        Expression exp) {\n-        if (alias != null && ctx().findVariable(alias) == null) {\n-            // subquery may have KEY range over a variable \n-            // that is not defined.\n-            JPQLNode key = root().findChildByID(JJTKEY, true);\n-            if (key != null && firstChild(key).text.equalsIgnoreCase(alias)) {\n-                Value var = getVariable(alias, true);\n-                exp = and(exp, factory.bindVariable(var, path));\n-            }\n-        }\n-        return exp;\n-    }\n-\n     private Expression getSubquery(String alias, Path path, Expression exp) {\n+        Value var = getVariable(alias, true);\n+        // this bind is for validateMapPath to resolve alias\n+        Expression bindVar = factory.bindVariable(var, path);\n         FieldMetaData fmd = path.last();\n         ClassMetaData candidate = getFieldType(fmd);\n         if (candidate == null && fmd.isElementCollection())\n@@ -607,11 +622,19 @@ private Expression getSubquery(String alias, Path path, Expression exp) {\n             subquery = factory.newSubquery(candidate, true, alias);\n             subContext.setSubquery(subquery);\n         }\n+        else {\n+            subquery.setSubqAlias(alias);\n+        }\n+\n         Path subpath = factory.newPath(subquery);\n+        subpath.setSchemaAlias(path.getCorrelationVar());\n         subpath.setMetaData(candidate);\n         subquery.setMetaData(candidate);\n-        exp = bindVariableForKeyPath(path, alias, exp);\n-        exp =  and(exp, factory.equal(path, subpath));\n+        if (fmd.isElementCollection())\n+            exp = and(exp, bindVar);\n+        else\n+            exp = and(exp, factory.equal(path, subpath));\n+\n         return exp;\n     }\n \n@@ -776,6 +799,9 @@ protected Value getVariable(String id, boolean bind) {\n         if (id == null)\n             return null;\n \n+        if (bind && getDefinedVariable(id) == null)\n+            return createVariable(id, bind);\n+\n         return super.getVariable(id.toLowerCase(), bind);\n     }\n \n@@ -1414,7 +1440,6 @@ private Value getTypeValue(JPQLNode node, Class<?> implicitType) {\n \n     private Value getSubquery(JPQLNode node) {\n         final boolean subclasses = true;\n-        String alias = nextAlias();\n \n         // parse the subquery\n         ParsedJPQL parsed = new ParsedJPQL(node.parser.jpql, node);\n@@ -1424,7 +1449,7 @@ private Value getSubquery(JPQLNode node) {\n         ClassMetaData candidate = getCandidateMetaData(node);\n         Subquery subq = subContext.getSubquery();\n         if (subq == null) {\n-            subq = factory.newSubquery(candidate, subclasses, alias);\n+            subq = factory.newSubquery(candidate, subclasses, nextAlias());\n             subContext.setSubquery(subq);\n         }\n         subq.setMetaData(candidate);\n@@ -1543,7 +1568,10 @@ private Value getIdentifier(JPQLNode node) {\n             Value thiz = null;\n             if (ctx().subquery == null || \n                 ctx().getSchema(name.toLowerCase()) == null) {\n-                thiz = factory.getThis();\n+                if (ctx().subquery != null && inAssignSubselectProjection)\n+                    thiz = factory.newPath(ctx().subquery);\n+                else\n+                    thiz = factory.getThis();\n             } else {\n                 thiz = factory.newPath(ctx().subquery);\n             }\n@@ -1775,7 +1803,6 @@ private Path getPath(JPQLNode node, boolean pcOnly, boolean inner) {\n             if (ctx().subquery != null) {\n                 path = factory.newPath(ctx().subquery);\n                 path.setMetaData(ctx().subquery.getMetaData());\n-                factory.bindVariable(val, path);\n             } else {\n                 path = factory.newPath();\n                 path.setMetaData(ctx().meta);\n@@ -1803,7 +1830,7 @@ else if (val.getMetaData() != null)\n             path = (Path) traversePath(path, node.children[i].text, pcOnly,\n                 allowNull);\n             if (ctx().getParent() != null && ctx().getVariable(path.getSchemaAlias()) == null) {\n-                path.setSubqueryContext(ctx());\n+                path.setSubqueryContext(ctx(), name);\n             }\n         \n             // all traversals but the first one will always be inner joins\n@@ -1957,7 +1984,7 @@ protected void addVariableToContext(String id, Value var) {\n         ctx().addVariable(id, var);\n     }\n \n-    protected Value getSeenVariable(String var) {\n+    protected Value getVariable(String var) {\n         Context c = ctx();\n         Value v = c.getVariable(var);\n         if (v != null)"}]}

