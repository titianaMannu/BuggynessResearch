{"sha":"cd4c8839f87f750e2655a5b98f552e2ba4031a67","node_id":"MDY6Q29tbWl0MjA2MzY0OmNkNGM4ODM5Zjg3Zjc1MGUyNjU1YTViOThmNTUyZTJiYTQwMzFhNjc=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-08-26T01:24:57Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-08-26T01:24:57Z"},"message":"[maven-release-plugin]  copy for tag 1.0.4\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/tags/1.0.4@989420 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1fe1e0ea43954a8604d7ed99abb0b88a0cc67a5e","url":"https://api.github.com/repos/apache/openjpa/git/trees/1fe1e0ea43954a8604d7ed99abb0b88a0cc67a5e"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/cd4c8839f87f750e2655a5b98f552e2ba4031a67","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/cd4c8839f87f750e2655a5b98f552e2ba4031a67","html_url":"https://github.com/apache/openjpa/commit/cd4c8839f87f750e2655a5b98f552e2ba4031a67","comments_url":"https://api.github.com/repos/apache/openjpa/commits/cd4c8839f87f750e2655a5b98f552e2ba4031a67/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"3c939144327d3b2be6994e919f5249fdfe030d77","url":"https://api.github.com/repos/apache/openjpa/commits/3c939144327d3b2be6994e919f5249fdfe030d77","html_url":"https://github.com/apache/openjpa/commit/3c939144327d3b2be6994e919f5249fdfe030d77"},{"sha":"a36edfc88c1781b4993010ed14cfa92fd59190bd","url":"https://api.github.com/repos/apache/openjpa/commits/a36edfc88c1781b4993010ed14cfa92fd59190bd","html_url":"https://github.com/apache/openjpa/commit/a36edfc88c1781b4993010ed14cfa92fd59190bd"}],"stats":{"total":55654,"additions":32829,"deletions":22825},"files":[{"sha":"0b90b93ab6e09424a5764ac3d7491d9e92028902","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/ManyOneEntity.java","status":"modified","additions":65,"deletions":65,"changes":130,"blob_url":"https://github.com/apache/openjpa/blob/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/ManyOneEntity.java","raw_url":"https://github.com/apache/openjpa/raw/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/ManyOneEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/ManyOneEntity.java?ref=cd4c8839f87f750e2655a5b98f552e2ba4031a67","patch":"@@ -1,65 +1,65 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.query;\r\n-\r\n-import javax.persistence.CascadeType;\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.GeneratedValue;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.Inheritance;\r\n-import javax.persistence.InheritanceType;\r\n-import javax.persistence.ManyToOne;\r\n-import javax.persistence.Version;\r\n-\r\n-@Entity\r\n-@Inheritance(strategy=InheritanceType.SINGLE_TABLE)\r\n-public class ManyOneEntity {\r\n-\r\n-    @Id\r\n-    @GeneratedValue\r\n-    private long id;\r\n-\r\n-    private String name;\r\n-\r\n-    @ManyToOne(cascade=CascadeType.ALL)\r\n-    private ManyOneEntity rel;\r\n-\r\n-    @Version\r\n-    private Integer optLock;\r\n-\r\n-    public long getId() { \r\n-        return id; \r\n-    }\r\n-\r\n-    public ManyOneEntity getRel() {\r\n-        return rel; \r\n-    }\r\n-\r\n-    public void setRel(ManyOneEntity rel) {\r\n-        this.rel = rel;\r\n-    }\r\n-\r\n-    public String getName() { \r\n-        return name; \r\n-    }\r\n-\r\n-    public void setName(String name) { \r\n-        this.name = name; \r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.query;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.Inheritance;\n+import javax.persistence.InheritanceType;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Version;\n+\n+@Entity\n+@Inheritance(strategy=InheritanceType.SINGLE_TABLE)\n+public class ManyOneEntity {\n+\n+    @Id\n+    @GeneratedValue\n+    private long id;\n+\n+    private String name;\n+\n+    @ManyToOne(cascade=CascadeType.ALL)\n+    private ManyOneEntity rel;\n+\n+    @Version\n+    private Integer optLock;\n+\n+    public long getId() { \n+        return id; \n+    }\n+\n+    public ManyOneEntity getRel() {\n+        return rel; \n+    }\n+\n+    public void setRel(ManyOneEntity rel) {\n+        this.rel = rel;\n+    }\n+\n+    public String getName() { \n+        return name; \n+    }\n+\n+    public void setName(String name) { \n+        this.name = name; \n+    }\n+}"},{"sha":"b13cfcb10758e676a294c733e4d0bd6f2dc4e9f7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/ManyOneEntitySub.java","status":"modified","additions":36,"deletions":36,"changes":72,"blob_url":"https://github.com/apache/openjpa/blob/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/ManyOneEntitySub.java","raw_url":"https://github.com/apache/openjpa/raw/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/ManyOneEntitySub.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/ManyOneEntitySub.java?ref=cd4c8839f87f750e2655a5b98f552e2ba4031a67","patch":"@@ -1,36 +1,36 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.query;\r\n-\r\n-import javax.persistence.Entity;\r\n-\r\n-@Entity\r\n-public class ManyOneEntitySub \r\n-    extends ManyOneEntity {\r\n-\r\n-    private int subInt;\r\n-\r\n-    public int getSubInt() { \r\n-        return subInt; \r\n-    }\r\n-\r\n-    public void setSubInt(int subInt) { \r\n-        this.subInt = subInt; \r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.query;\n+\n+import javax.persistence.Entity;\n+\n+@Entity\n+public class ManyOneEntitySub \n+    extends ManyOneEntity {\n+\n+    private int subInt;\n+\n+    public int getSubInt() { \n+        return subInt; \n+    }\n+\n+    public void setSubInt(int subInt) { \n+        this.subInt = subInt; \n+    }\n+}"},{"sha":"5700ba5babdeb40b8fdba4886a8223f83008aeff","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Publisher.java","status":"added","additions":75,"deletions":0,"changes":75,"blob_url":"https://github.com/apache/openjpa/blob/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Publisher.java","raw_url":"https://github.com/apache/openjpa/raw/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Publisher.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Publisher.java?ref=cd4c8839f87f750e2655a5b98f552e2ba4031a67","patch":"@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.query;\n+\n+import java.io.Serializable;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.OneToMany;\n+import java.util.Set;\n+\n+@Entity\n+public class Publisher implements Serializable {\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    @Column(name=\"id\")\n+    private int id;\n+\n+    @Column(name=\"name\")\n+    private String name;\n+\n+    @OneToMany(mappedBy=\"idPublisher\")\n+    private Set<Magazine> magazineCollection;\n+\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    public int getId() {\n+        return this.id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public String getName() {\n+        return this.name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public Set<Magazine> getMagazineCollection() {\n+        return this.magazineCollection;\n+    }\n+\n+    public void setMagazineCollection(Set<Magazine> magazineCollection) {\n+        this.magazineCollection = magazineCollection;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return name;\n+    }\n+}"},{"sha":"0760ad5cdeb335206fd19033608f7c6408610483","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/SimpleEntity.java","status":"modified","additions":103,"deletions":103,"changes":206,"blob_url":"https://github.com/apache/openjpa/blob/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/SimpleEntity.java","raw_url":"https://github.com/apache/openjpa/raw/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/SimpleEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/SimpleEntity.java?ref=cd4c8839f87f750e2655a5b98f552e2ba4031a67","patch":"@@ -1,103 +1,103 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.query;\r\n-\r\n-import javax.persistence.Basic;\r\n-import javax.persistence.Column;\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.EntityResult;\r\n-import javax.persistence.FieldResult;\r\n-import javax.persistence.GeneratedValue;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.NamedNativeQueries;\r\n-import javax.persistence.NamedNativeQuery;\r\n-import javax.persistence.NamedQueries;\r\n-import javax.persistence.NamedQuery;\r\n-import javax.persistence.SqlResultSetMapping;\r\n-import javax.persistence.Table;\r\n-\r\n-@NamedQuery(name=\"FindXTwo\", query=\"select s from simple s where s.name = :fname\")\r\n-\r\n-@NamedQueries( {\r\n-    @NamedQuery(name=\"FindOne\", query=\"select s from simple s where s.name = :fname\"),\r\n-    @NamedQuery(name=\"FindOne\", query=\"select s from simple s where s.name = :fname\"),\r\n-    @NamedQuery(name=\"FindAll\", query=\"select s from simple s\")\r\n-})\r\n-\r\n-@NamedNativeQueries( { \r\n-    @NamedNativeQuery(name = \"findSimpleEntitites\",\r\n-        query = \"SELECT ID, NAME, VALUE FROM SIMPLE_ENTITY\", \r\n-        resultSetMapping = \"simpleEntitiesResult\") })\r\n-\r\n-@SqlResultSetMapping(name = \"simpleEntitiesResult\",\r\n-    entities = @EntityResult(\r\n-    entityClass = org.apache.openjpa.persistence.query.SimpleEntity.class, \r\n-    fields = {@FieldResult(name = \"id\", column = \"ID\"),\r\n-        @FieldResult(name = \"name\", column = \"NAME\"),\r\n-        @FieldResult(name = \"value\", column = \"VALUE\") }))\r\n-@Entity(name = \"simple\")\r\n-@Table(name = \"SIMPLE_ENTITY\")\r\n-public class SimpleEntity {\r\n-\r\n-    @Id\r\n-    @GeneratedValue\r\n-    @Column(name = \"ID\")\r\n-    private long id;\r\n-\r\n-    @Basic\r\n-    @Column(name = \"NAME\")\r\n-    private String name;\r\n-\r\n-    @Basic\r\n-    @Column(name = \"VALUE\")\r\n-    private String value;\r\n-\r\n-    public SimpleEntity() {\r\n-    }\r\n-\r\n-    public SimpleEntity(String name, String value) {\r\n-        this();\r\n-        this.name = name;\r\n-        this.value = value;\r\n-    }\r\n-\r\n-    public long getId() {\r\n-        return this.id;\r\n-    }\r\n-\r\n-    public void setId(long id) {\r\n-        this.id = id;\r\n-    }\r\n-\r\n-    public String getName() {\r\n-        return name;\r\n-    }\r\n-\r\n-    public void setName(String name) {\r\n-        this.name = name;\r\n-    }\r\n-\r\n-    public String getValue() {\r\n-        return value;\r\n-    }\r\n-\r\n-    public void setValue(String value) {\r\n-        this.value = value;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.query;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.EntityResult;\n+import javax.persistence.FieldResult;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.NamedNativeQueries;\n+import javax.persistence.NamedNativeQuery;\n+import javax.persistence.NamedQueries;\n+import javax.persistence.NamedQuery;\n+import javax.persistence.SqlResultSetMapping;\n+import javax.persistence.Table;\n+\n+@NamedQuery(name=\"FindXTwo\", query=\"select s from simple s where s.name = :fname\")\n+\n+@NamedQueries( {\n+    @NamedQuery(name=\"FindOne\", query=\"select s from simple s where s.name = :fname\"),\n+    @NamedQuery(name=\"FindOne\", query=\"select s from simple s where s.name = :fname\"),\n+    @NamedQuery(name=\"FindAll\", query=\"select s from simple s\")\n+})\n+\n+@NamedNativeQueries( { \n+    @NamedNativeQuery(name = \"findSimpleEntitites\",\n+        query = \"SELECT ID, NAME, VALUE FROM SIMPLE_ENTITY\", \n+        resultSetMapping = \"simpleEntitiesResult\") })\n+\n+@SqlResultSetMapping(name = \"simpleEntitiesResult\",\n+    entities = @EntityResult(\n+    entityClass = org.apache.openjpa.persistence.query.SimpleEntity.class, \n+    fields = {@FieldResult(name = \"id\", column = \"ID\"),\n+        @FieldResult(name = \"name\", column = \"NAME\"),\n+        @FieldResult(name = \"value\", column = \"VALUE\") }))\n+@Entity(name = \"simple\")\n+@Table(name = \"SIMPLE_ENTITY\")\n+public class SimpleEntity {\n+\n+    @Id\n+    @GeneratedValue\n+    @Column(name = \"ID\")\n+    private long id;\n+\n+    @Basic\n+    @Column(name = \"NAME\")\n+    private String name;\n+\n+    @Basic\n+    @Column(name = \"VALUE\")\n+    private String value;\n+\n+    public SimpleEntity() {\n+    }\n+\n+    public SimpleEntity(String name, String value) {\n+        this();\n+        this.name = name;\n+        this.value = value;\n+    }\n+\n+    public long getId() {\n+        return this.id;\n+    }\n+\n+    public void setId(long id) {\n+        this.id = id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String getValue() {\n+        return value;\n+    }\n+\n+    public void setValue(String value) {\n+        this.value = value;\n+    }\n+}"},{"sha":"fc389048adc795703cc174b638bf6cbf736ec8ce","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/SimpleEntity2.java","status":"modified","additions":87,"deletions":87,"changes":174,"blob_url":"https://github.com/apache/openjpa/blob/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/SimpleEntity2.java","raw_url":"https://github.com/apache/openjpa/raw/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/SimpleEntity2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/SimpleEntity2.java?ref=cd4c8839f87f750e2655a5b98f552e2ba4031a67","patch":"@@ -1,87 +1,87 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.query;\r\n-\r\n-import javax.persistence.Basic;\r\n-import javax.persistence.Column;\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.GeneratedValue;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.NamedQueries;\r\n-import javax.persistence.NamedQuery;\r\n-import javax.persistence.Table;\r\n-\r\n-@NamedQuery(name=\"FindXTwo\", query=\"select s from simple2 s where s.name = :fname\")\r\n-\r\n-@NamedQueries( {\r\n-    @NamedQuery(name=\"FindOne\", query=\"select s from simple2 s where s.name = :fname\"),\r\n-    @NamedQuery(name=\"Find2One\", query=\"select s from simple2 s where s.name = :fname\"),\r\n-    @NamedQuery(name=\"Find2All\", query=\"select s from simple2 s\")\r\n-})\r\n-\r\n-@Entity(name = \"simple2\")\r\n-@Table(name = \"SIMPLE_ENTITY2\")\r\n-public class SimpleEntity2 {\r\n-\r\n-    @Id\r\n-    @GeneratedValue\r\n-    @Column(name = \"ID\")\r\n-    private long id;\r\n-\r\n-    @Basic\r\n-    @Column(name = \"NAME\")\r\n-    private String name;\r\n-\r\n-    @Basic\r\n-    @Column(name = \"VALUE\")\r\n-    private String value;\r\n-\r\n-    public SimpleEntity2() {\r\n-    }\r\n-\r\n-    public SimpleEntity2(String name, String value) {\r\n-        this();\r\n-        this.name = name;\r\n-        this.value = value;\r\n-    }\r\n-\r\n-    public long getId() {\r\n-        return this.id;\r\n-    }\r\n-\r\n-    public void setId(long id) {\r\n-        this.id = id;\r\n-    }\r\n-\r\n-    public String getName() {\r\n-        return name;\r\n-    }\r\n-\r\n-    public void setName(String name) {\r\n-        this.name = name;\r\n-    }\r\n-\r\n-    public String getValue() {\r\n-        return value;\r\n-    }\r\n-\r\n-    public void setValue(String value) {\r\n-        this.value = value;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.query;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.NamedQueries;\n+import javax.persistence.NamedQuery;\n+import javax.persistence.Table;\n+\n+@NamedQuery(name=\"FindXTwo\", query=\"select s from simple2 s where s.name = :fname\")\n+\n+@NamedQueries( {\n+    @NamedQuery(name=\"FindOne\", query=\"select s from simple2 s where s.name = :fname\"),\n+    @NamedQuery(name=\"Find2One\", query=\"select s from simple2 s where s.name = :fname\"),\n+    @NamedQuery(name=\"Find2All\", query=\"select s from simple2 s\")\n+})\n+\n+@Entity(name = \"simple2\")\n+@Table(name = \"SIMPLE_ENTITY2\")\n+public class SimpleEntity2 {\n+\n+    @Id\n+    @GeneratedValue\n+    @Column(name = \"ID\")\n+    private long id;\n+\n+    @Basic\n+    @Column(name = \"NAME\")\n+    private String name;\n+\n+    @Basic\n+    @Column(name = \"VALUE\")\n+    private String value;\n+\n+    public SimpleEntity2() {\n+    }\n+\n+    public SimpleEntity2(String name, String value) {\n+        this();\n+        this.name = name;\n+        this.value = value;\n+    }\n+\n+    public long getId() {\n+        return this.id;\n+    }\n+\n+    public void setId(long id) {\n+        this.id = id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String getValue() {\n+        return value;\n+    }\n+\n+    public void setValue(String value) {\n+        this.value = value;\n+    }\n+}"},{"sha":"43b22bf899d400fd83832e9d62c119191ef2b02d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestDataStoreActions.java","status":"modified","additions":39,"deletions":39,"changes":78,"blob_url":"https://github.com/apache/openjpa/blob/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestDataStoreActions.java","raw_url":"https://github.com/apache/openjpa/raw/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestDataStoreActions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestDataStoreActions.java?ref=cd4c8839f87f750e2655a5b98f552e2ba4031a67","patch":"@@ -1,39 +1,39 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.query;\r\n-\r\n-import org.apache.openjpa.persistence.test.SingleEMTestCase;\r\n-import org.apache.openjpa.persistence.OpenJPAQuery;\r\n-import org.apache.openjpa.persistence.simple.AllFieldTypes;\r\n-\r\n-public class TestDataStoreActions\r\n-    extends SingleEMTestCase {\r\n-\r\n-    @Override\r\n-    public void setUp() {\r\n-        setUp(AllFieldTypes.class);\r\n-    }\r\n-\r\n-    public void testDataStoreActions() {\r\n-        OpenJPAQuery q = em.createQuery(\"select o from AllFieldTypes o\");\r\n-        String[] sql = q.getDataStoreActions(null);\r\n-        assertEquals(1, sql.length);\r\n-        assertTrue(sql[0].startsWith(\"SELECT\"));\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.query;\n+\n+import org.apache.openjpa.persistence.test.SingleEMTestCase;\n+import org.apache.openjpa.persistence.OpenJPAQuery;\n+import org.apache.openjpa.persistence.simple.AllFieldTypes;\n+\n+public class TestDataStoreActions\n+    extends SingleEMTestCase {\n+\n+    @Override\n+    public void setUp() {\n+        setUp(AllFieldTypes.class);\n+    }\n+\n+    public void testDataStoreActions() {\n+        OpenJPAQuery q = em.createQuery(\"select o from AllFieldTypes o\");\n+        String[] sql = q.getDataStoreActions(null);\n+        assertEquals(1, sql.length);\n+        assertTrue(sql[0].startsWith(\"SELECT\"));\n+    }\n+}"},{"sha":"8fb0a383c7ff79e5b79c60781d4956e37d36f38e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestDistinctQueries.java","status":"modified","additions":98,"deletions":98,"changes":196,"blob_url":"https://github.com/apache/openjpa/blob/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestDistinctQueries.java","raw_url":"https://github.com/apache/openjpa/raw/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestDistinctQueries.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestDistinctQueries.java?ref=cd4c8839f87f750e2655a5b98f552e2ba4031a67","patch":"@@ -1,98 +1,98 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.query;\r\n-\r\n-import java.util.List;\r\n-\r\n-import org.apache.openjpa.persistence.test.SingleEMTestCase;\r\n-import org.apache.openjpa.persistence.models.company.fetchlazy.ProductOrder;\r\n-import org.apache.openjpa.persistence.models.company.fetchlazy.LineItem;\r\n-import org.apache.openjpa.persistence.models.company.fetchlazy.Product;\r\n-import org.apache.openjpa.persistence.models.company.fetchlazy.Customer;\r\n-import org.apache.openjpa.persistence.models.company.fetchlazy.Address;\r\n-import org.apache.openjpa.persistence.models.company.fetchlazy.Company;\r\n-import org.apache.openjpa.persistence.models.company.fetchlazy.Employee;\r\n-import org.apache.openjpa.persistence.models.company.fetchlazy.PartTimeEmployee;\r\n-import org.apache.openjpa.persistence.models.company.fetchlazy.FullTimeEmployee;\r\n-import org.apache.openjpa.persistence.models.company.fetchlazy.Person;\r\n-\r\n-public class TestDistinctQueries extends SingleEMTestCase {\r\n-\r\n-    public void setUp() {\r\n-        setUp(Address.class, Company.class, Customer.class, Employee.class,\r\n-            FullTimeEmployee.class, LineItem.class, PartTimeEmployee.class,\r\n-            Person.class, Product.class, ProductOrder.class, CLEAR_TABLES);\r\n-\r\n-        ProductOrder order = new ProductOrder();\r\n-        LineItem item0 = new LineItem();\r\n-        LineItem item1 = new LineItem();\r\n-        LineItem item2 = new LineItem();\r\n-        order.getItems().add(item0);\r\n-        order.getItems().add(item1);\r\n-        order.getItems().add(item2);\r\n-\r\n-        em.getTransaction().begin();\r\n-        em.persist(order);\r\n-        em.persist(item0);\r\n-        em.persist(item1);\r\n-        em.persist(item2);\r\n-        em.getTransaction().commit();\r\n-    }\r\n-\r\n-    public void testDuplicateResultsInNonDistinctJoinFetchQuery() {\r\n-        List l = em.createQuery(\"select o from LAZ_ProductOrder o \" +\r\n-            \"left join fetch o.items\").getResultList();\r\n-        assertEquals(3, l.size());\r\n-    }\r\n-\r\n-    public void testDuplicateResultsInNonDistinctJoinQuery() {\r\n-        List l = em.createQuery(\"select o from LAZ_ProductOrder o \" +\r\n-            \"left join o.items item\").getResultList();\r\n-        assertEquals(3, l.size());\r\n-    }\r\n-\r\n-    public void testNoDuplicateResultsInDistinctQuery() {\r\n-        List l = em.createQuery(\"select distinct o from LAZ_ProductOrder o \" +\r\n-            \"left join o.items item\").getResultList();\r\n-        assertEquals(1, l.size());\r\n-    }\r\n-\r\n-    public void testDuplicateResultsInNonDistinctConstructorJoinQuery() {\r\n-        List l = em.createQuery(\"select new \" +\r\n-            \"org.apache.openjpa.persistence.query.TestDistinctQueries$Holder(\" +\r\n-            \"o.id) from LAZ_ProductOrder o \" +\r\n-            \"left join o.items item\").getResultList();\r\n-        assertEquals(3, l.size());\r\n-    }\r\n-\r\n-    public void testNoDuplicateResultsInDistinctConstructorQuery()\r\n-        throws NoSuchMethodException {\r\n-        List l = em.createQuery(\"select distinct new \" +\r\n-            \"org.apache.openjpa.persistence.query.TestDistinctQueries$Holder(\" +\r\n-            \"o.id) from LAZ_ProductOrder o \" +\r\n-            \"left join o.items item\").getResultList();\r\n-        assertEquals(1, l.size());\r\n-    }\r\n-\r\n-    public static class Holder {\r\n-        public Holder(long id) {\r\n-            // we don't actually do anything with the returned data\r\n-        }\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.query;\n+\n+import java.util.List;\n+\n+import org.apache.openjpa.persistence.test.SingleEMTestCase;\n+import org.apache.openjpa.persistence.models.company.fetchlazy.ProductOrder;\n+import org.apache.openjpa.persistence.models.company.fetchlazy.LineItem;\n+import org.apache.openjpa.persistence.models.company.fetchlazy.Product;\n+import org.apache.openjpa.persistence.models.company.fetchlazy.Customer;\n+import org.apache.openjpa.persistence.models.company.fetchlazy.Address;\n+import org.apache.openjpa.persistence.models.company.fetchlazy.Company;\n+import org.apache.openjpa.persistence.models.company.fetchlazy.Employee;\n+import org.apache.openjpa.persistence.models.company.fetchlazy.PartTimeEmployee;\n+import org.apache.openjpa.persistence.models.company.fetchlazy.FullTimeEmployee;\n+import org.apache.openjpa.persistence.models.company.fetchlazy.Person;\n+\n+public class TestDistinctQueries extends SingleEMTestCase {\n+\n+    public void setUp() {\n+        setUp(Address.class, Company.class, Customer.class, Employee.class,\n+            FullTimeEmployee.class, LineItem.class, PartTimeEmployee.class,\n+            Person.class, Product.class, ProductOrder.class, CLEAR_TABLES);\n+\n+        ProductOrder order = new ProductOrder();\n+        LineItem item0 = new LineItem();\n+        LineItem item1 = new LineItem();\n+        LineItem item2 = new LineItem();\n+        order.getItems().add(item0);\n+        order.getItems().add(item1);\n+        order.getItems().add(item2);\n+\n+        em.getTransaction().begin();\n+        em.persist(order);\n+        em.persist(item0);\n+        em.persist(item1);\n+        em.persist(item2);\n+        em.getTransaction().commit();\n+    }\n+\n+    public void testDuplicateResultsInNonDistinctJoinFetchQuery() {\n+        List l = em.createQuery(\"select o from LAZ_ProductOrder o \" +\n+            \"left join fetch o.items\").getResultList();\n+        assertEquals(3, l.size());\n+    }\n+\n+    public void testDuplicateResultsInNonDistinctJoinQuery() {\n+        List l = em.createQuery(\"select o from LAZ_ProductOrder o \" +\n+            \"left join o.items item\").getResultList();\n+        assertEquals(3, l.size());\n+    }\n+\n+    public void testNoDuplicateResultsInDistinctQuery() {\n+        List l = em.createQuery(\"select distinct o from LAZ_ProductOrder o \" +\n+            \"left join o.items item\").getResultList();\n+        assertEquals(1, l.size());\n+    }\n+\n+    public void testDuplicateResultsInNonDistinctConstructorJoinQuery() {\n+        List l = em.createQuery(\"select new \" +\n+            \"org.apache.openjpa.persistence.query.TestDistinctQueries$Holder(\" +\n+            \"o.id) from LAZ_ProductOrder o \" +\n+            \"left join o.items item\").getResultList();\n+        assertEquals(3, l.size());\n+    }\n+\n+    public void testNoDuplicateResultsInDistinctConstructorQuery()\n+        throws NoSuchMethodException {\n+        List l = em.createQuery(\"select distinct new \" +\n+            \"org.apache.openjpa.persistence.query.TestDistinctQueries$Holder(\" +\n+            \"o.id) from LAZ_ProductOrder o \" +\n+            \"left join o.items item\").getResultList();\n+        assertEquals(1, l.size());\n+    }\n+\n+    public static class Holder {\n+        public Holder(long id) {\n+            // we don't actually do anything with the returned data\n+        }\n+    }\n+}"},{"sha":"46a7bbad0cc84700059dde18760576f43ef6844e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestEscapedSingleQuotesInJPQL.java","status":"modified","additions":55,"deletions":55,"changes":110,"blob_url":"https://github.com/apache/openjpa/blob/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestEscapedSingleQuotesInJPQL.java","raw_url":"https://github.com/apache/openjpa/raw/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestEscapedSingleQuotesInJPQL.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestEscapedSingleQuotesInJPQL.java?ref=cd4c8839f87f750e2655a5b98f552e2ba4031a67","patch":"@@ -1,55 +1,55 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.query;\r\n-\r\n-import java.util.Collection;\r\n-import javax.persistence.EntityManager;\r\n-\r\n-import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n-import org.apache.openjpa.persistence.simple.AllFieldTypes;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-import org.apache.openjpa.persistence.OpenJPAQuery;\r\n-\r\n-public class TestEscapedSingleQuotesInJPQL\r\n-    extends SingleEMFTestCase {\r\n-\r\n-    public void setUp() {\r\n-        setUp(AllFieldTypes.class, CLEAR_TABLES);\r\n-\r\n-        AllFieldTypes aft = new AllFieldTypes();\r\n-        aft.setStringField(\"foo'bar\");\r\n-        EntityManager em = emf.createEntityManager();\r\n-        em.getTransaction().begin();\r\n-        em.persist(aft);\r\n-        em.getTransaction().commit();\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void testEscapedSingleQuotesInJPQL() {\r\n-        OpenJPAEntityManager em = emf.createEntityManager();\r\n-        OpenJPAQuery q = em.createQuery(\"select count(o) \" +\r\n-            \"from AllFieldTypes o where o.stringField = 'foo''bar'\");\r\n-        assertEquals(1, ((Number) q.getSingleResult()).longValue());\r\n-\r\n-        Collection all = em.createQuery(\"select o from AllFieldTypes o\")\r\n-            .getResultList();\r\n-        q.setCandidateCollection(all);\r\n-        assertEquals(1, ((Number) q.getSingleResult()).longValue());\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.query;\n+\n+import java.util.Collection;\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+import org.apache.openjpa.persistence.simple.AllFieldTypes;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.OpenJPAQuery;\n+\n+public class TestEscapedSingleQuotesInJPQL\n+    extends SingleEMFTestCase {\n+\n+    public void setUp() {\n+        setUp(AllFieldTypes.class, CLEAR_TABLES);\n+\n+        AllFieldTypes aft = new AllFieldTypes();\n+        aft.setStringField(\"foo'bar\");\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.persist(aft);\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+\n+    public void testEscapedSingleQuotesInJPQL() {\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        OpenJPAQuery q = em.createQuery(\"select count(o) \" +\n+            \"from AllFieldTypes o where o.stringField = 'foo''bar'\");\n+        assertEquals(1, ((Number) q.getSingleResult()).longValue());\n+\n+        Collection all = em.createQuery(\"select o from AllFieldTypes o\")\n+            .getResultList();\n+        q.setCandidateCollection(all);\n+        assertEquals(1, ((Number) q.getSingleResult()).longValue());\n+    }\n+}"},{"sha":"702292d4995e5669c6dcd65f838bf7107cf8af19","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestInMemoryQueryMatchEscapes.java","status":"modified","additions":69,"deletions":69,"changes":138,"blob_url":"https://github.com/apache/openjpa/blob/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestInMemoryQueryMatchEscapes.java","raw_url":"https://github.com/apache/openjpa/raw/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestInMemoryQueryMatchEscapes.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestInMemoryQueryMatchEscapes.java?ref=cd4c8839f87f750e2655a5b98f552e2ba4031a67","patch":"@@ -1,69 +1,69 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.query;\r\n-\r\n-import javax.persistence.FlushModeType;\r\n-import javax.persistence.EntityManager;\r\n-\r\n-import org.apache.openjpa.persistence.OpenJPAQuery;\r\n-import org.apache.openjpa.persistence.simple.AllFieldTypes;\r\n-import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n-\r\n-public class TestInMemoryQueryMatchEscapes\r\n-    extends SingleEMFTestCase {\r\n-\r\n-    public void setUp() {\r\n-        setUp(AllFieldTypes.class);\r\n-    }\r\n-    \r\n-    public void testDatabaseEscape() {\r\n-        OpenJPAQuery q = escapeHelper(false);\r\n-        q.setFlushMode(FlushModeType.AUTO);\r\n-        q.getEntityManager().flush();\r\n-        AllFieldTypes aft = (AllFieldTypes) q.getSingleResult();\r\n-        assertEquals(\"foo_bar\", aft.getStringField());\r\n-        q.getEntityManager().getTransaction().rollback();\r\n-    }\r\n-    \r\n-    public void testInMemoryEscape() {\r\n-        OpenJPAQuery q = escapeHelper(true);\r\n-        q.setFlushMode(FlushModeType.COMMIT);\r\n-        try {\r\n-            q.getSingleResult();\r\n-            fail(\"OpenJPA doesn't support escape syntax for in-mem queries\");\r\n-        } catch (Exception e) {\r\n-            // expected\r\n-        }\r\n-    }\r\n-    \r\n-    private OpenJPAQuery escapeHelper(boolean inMem) {\r\n-        EntityManager em = emf.createEntityManager();\r\n-        em.getTransaction().begin();\r\n-        AllFieldTypes aft = new AllFieldTypes();\r\n-        aft.setStringField(\"foo_bar\");\r\n-        em.persist(aft);\r\n-        aft = new AllFieldTypes();\r\n-        aft.setStringField(\"foozbar\");\r\n-        em.persist(aft);\r\n-\r\n-        return (OpenJPAQuery) em.createQuery(\r\n-            \"select e from AllFieldTypes e where e.stringField \" +\r\n-            \"like 'foox_bar' escape 'x'\");\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.query;\n+\n+import javax.persistence.FlushModeType;\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.OpenJPAQuery;\n+import org.apache.openjpa.persistence.simple.AllFieldTypes;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+public class TestInMemoryQueryMatchEscapes\n+    extends SingleEMFTestCase {\n+\n+    public void setUp() {\n+        setUp(AllFieldTypes.class);\n+    }\n+    \n+    public void testDatabaseEscape() {\n+        OpenJPAQuery q = escapeHelper(false);\n+        q.setFlushMode(FlushModeType.AUTO);\n+        q.getEntityManager().flush();\n+        AllFieldTypes aft = (AllFieldTypes) q.getSingleResult();\n+        assertEquals(\"foo_bar\", aft.getStringField());\n+        q.getEntityManager().getTransaction().rollback();\n+    }\n+    \n+    public void testInMemoryEscape() {\n+        OpenJPAQuery q = escapeHelper(true);\n+        q.setFlushMode(FlushModeType.COMMIT);\n+        try {\n+            q.getSingleResult();\n+            fail(\"OpenJPA doesn't support escape syntax for in-mem queries\");\n+        } catch (Exception e) {\n+            // expected\n+        }\n+    }\n+    \n+    private OpenJPAQuery escapeHelper(boolean inMem) {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        AllFieldTypes aft = new AllFieldTypes();\n+        aft.setStringField(\"foo_bar\");\n+        em.persist(aft);\n+        aft = new AllFieldTypes();\n+        aft.setStringField(\"foozbar\");\n+        em.persist(aft);\n+\n+        return (OpenJPAQuery) em.createQuery(\n+            \"select e from AllFieldTypes e where e.stringField \" +\n+            \"like 'foox_bar' escape 'x'\");\n+    }\n+}"},{"sha":"d0cdbddd6fe77833c5fe52624ac28a4bb34afaee","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestMethodQLQuery.java","status":"modified","additions":92,"deletions":92,"changes":184,"blob_url":"https://github.com/apache/openjpa/blob/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestMethodQLQuery.java","raw_url":"https://github.com/apache/openjpa/raw/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestMethodQLQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestMethodQLQuery.java?ref=cd4c8839f87f750e2655a5b98f552e2ba4031a67","patch":"@@ -1,92 +1,92 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.query;\r\n-\r\n-import java.util.Map;\r\n-import java.util.ArrayList;\r\n-\r\n-import org.apache.openjpa.persistence.test.SingleEMTestCase;\r\n-import org.apache.openjpa.persistence.OpenJPAQuery;\r\n-import org.apache.openjpa.persistence.QueryImpl;\r\n-import org.apache.openjpa.persistence.ArgumentException;\r\n-import org.apache.openjpa.kernel.QueryLanguages;\r\n-import org.apache.openjpa.kernel.StoreContext;\r\n-import org.apache.openjpa.kernel.FetchConfiguration;\r\n-import org.apache.openjpa.meta.ClassMetaData;\r\n-import org.apache.openjpa.lib.rop.ResultObjectProvider;\r\n-import org.apache.openjpa.lib.rop.ListResultObjectProvider;\r\n-\r\n-public class TestMethodQLQuery\r\n-    extends SingleEMTestCase {\r\n-\r\n-    @Override\r\n-    public void setUp() {\r\n-        setUp(SimpleEntity.class);\r\n-    }\r\n-\r\n-    public void testMethodQLWithoutParametersDeclared() {\r\n-        OpenJPAQuery q = em.createQuery(QueryLanguages.LANG_METHODQL,\r\n-            getClass().getName() + \".echo\");\r\n-        ((QueryImpl) q).getDelegate().setCandidateType(\r\n-            SimpleEntity.class, true);\r\n-        q.setParameter(\"param\", 5);\r\n-        ((QueryImpl) q).getDelegate().declareParameters(\"Integer param\");\r\n-        assertEquals(5, q.getResultList().get(0));\r\n-    }\r\n-\r\n-    public void testInvalidMethodReturnType() {\r\n-        OpenJPAQuery q = em.createQuery(QueryLanguages.LANG_METHODQL,\r\n-            getClass().getName() + \".invalidReturnMeth\");\r\n-        ((QueryImpl) q).getDelegate().setCandidateType(\r\n-            SimpleEntity.class, true);\r\n-        try {\r\n-            q.getResultList().get(0);\r\n-            fail(\"should have gotten an exception since method is invalid\");\r\n-        } catch (ArgumentException ae) {\r\n-            // expected\r\n-        }\r\n-    }\r\n-\r\n-    public void testVoidMethodReturnType() {\r\n-        OpenJPAQuery q = em.createQuery(QueryLanguages.LANG_METHODQL,\r\n-            getClass().getName() + \".voidMeth\");\r\n-        ((QueryImpl) q).getDelegate().setCandidateType(\r\n-            SimpleEntity.class, true);\r\n-        try {\r\n-            q.getResultList().get(0);\r\n-            fail(\"should have gotten an exception since method is invalid\");\r\n-        } catch (ArgumentException ae) {\r\n-            // expected\r\n-        }\r\n-    }\r\n-\r\n-    public static ResultObjectProvider echo(StoreContext ctx,\r\n-        ClassMetaData meta, boolean subs, Map params, FetchConfiguration conf) {\r\n-        return new ListResultObjectProvider(new ArrayList(params.values()));\r\n-    }\r\n-\r\n-    public static void voidMeth(StoreContext ctx,\r\n-        ClassMetaData meta, boolean subs, Map params, FetchConfiguration conf) {\r\n-    }\r\n-\r\n-    public static Object invalidReturnMeth(StoreContext ctx,\r\n-        ClassMetaData meta, boolean subs, Map params, FetchConfiguration conf) {\r\n-        return null;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.query;\n+\n+import java.util.Map;\n+import java.util.ArrayList;\n+\n+import org.apache.openjpa.persistence.test.SingleEMTestCase;\n+import org.apache.openjpa.persistence.OpenJPAQuery;\n+import org.apache.openjpa.persistence.QueryImpl;\n+import org.apache.openjpa.persistence.ArgumentException;\n+import org.apache.openjpa.kernel.QueryLanguages;\n+import org.apache.openjpa.kernel.StoreContext;\n+import org.apache.openjpa.kernel.FetchConfiguration;\n+import org.apache.openjpa.meta.ClassMetaData;\n+import org.apache.openjpa.lib.rop.ResultObjectProvider;\n+import org.apache.openjpa.lib.rop.ListResultObjectProvider;\n+\n+public class TestMethodQLQuery\n+    extends SingleEMTestCase {\n+\n+    @Override\n+    public void setUp() {\n+        setUp(SimpleEntity.class);\n+    }\n+\n+    public void testMethodQLWithoutParametersDeclared() {\n+        OpenJPAQuery q = em.createQuery(QueryLanguages.LANG_METHODQL,\n+            getClass().getName() + \".echo\");\n+        ((QueryImpl) q).getDelegate().setCandidateType(\n+            SimpleEntity.class, true);\n+        q.setParameter(\"param\", 5);\n+        ((QueryImpl) q).getDelegate().declareParameters(\"Integer param\");\n+        assertEquals(5, q.getResultList().get(0));\n+    }\n+\n+    public void testInvalidMethodReturnType() {\n+        OpenJPAQuery q = em.createQuery(QueryLanguages.LANG_METHODQL,\n+            getClass().getName() + \".invalidReturnMeth\");\n+        ((QueryImpl) q).getDelegate().setCandidateType(\n+            SimpleEntity.class, true);\n+        try {\n+            q.getResultList().get(0);\n+            fail(\"should have gotten an exception since method is invalid\");\n+        } catch (ArgumentException ae) {\n+            // expected\n+        }\n+    }\n+\n+    public void testVoidMethodReturnType() {\n+        OpenJPAQuery q = em.createQuery(QueryLanguages.LANG_METHODQL,\n+            getClass().getName() + \".voidMeth\");\n+        ((QueryImpl) q).getDelegate().setCandidateType(\n+            SimpleEntity.class, true);\n+        try {\n+            q.getResultList().get(0);\n+            fail(\"should have gotten an exception since method is invalid\");\n+        } catch (ArgumentException ae) {\n+            // expected\n+        }\n+    }\n+\n+    public static ResultObjectProvider echo(StoreContext ctx,\n+        ClassMetaData meta, boolean subs, Map params, FetchConfiguration conf) {\n+        return new ListResultObjectProvider(new ArrayList(params.values()));\n+    }\n+\n+    public static void voidMeth(StoreContext ctx,\n+        ClassMetaData meta, boolean subs, Map params, FetchConfiguration conf) {\n+    }\n+\n+    public static Object invalidReturnMeth(StoreContext ctx,\n+        ClassMetaData meta, boolean subs, Map params, FetchConfiguration conf) {\n+        return null;\n+    }\n+}"},{"sha":"ac5c1371f75a275834f79a14dbe887e4c0a19d7f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryEscapeCharacters.java","status":"added","additions":161,"deletions":0,"changes":161,"blob_url":"https://github.com/apache/openjpa/blob/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryEscapeCharacters.java","raw_url":"https://github.com/apache/openjpa/raw/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryEscapeCharacters.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryEscapeCharacters.java?ref=cd4c8839f87f750e2655a5b98f552e2ba4031a67","patch":"@@ -0,0 +1,161 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.query;\n+\n+import java.util.List;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.Query;\n+\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.sql.MySQLDictionary;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+public class TestQueryEscapeCharacters\n+    extends SingleEMFTestCase {\n+\n+    public void setUp() {\n+        setUp(Employee.class, CLEAR_TABLES);\n+\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+\n+        Employee e = new Employee();\n+        e.setName(\"Mike Dick\");\n+        e.setEmpId(1);\n+        em.persist(e);\n+\n+        e = new Employee();\n+        e.setName(\"Mike Jones\");\n+        e.setEmpId(2);\n+        em.persist(e);\n+\n+        e = new Employee();\n+        e.setName(\"Mike Smith\");\n+        e.setEmpId(3);\n+        em.persist(e);\n+        \n+        e = new Employee();\n+        e.setName(\"M%ke Smith\");\n+        e.setEmpId(4);\n+        em.persist(e);\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+\n+    public void tearDown() throws Exception {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.createQuery(\"Delete from Employee\").executeUpdate();\n+        em.getTransaction().commit();\n+        em.close();\n+        super.tearDown();\n+    }\n+    \n+    public void testNormalQuery() {\n+        performFind (\"Employee.findByName\", \"%Dick\", 1);\n+    }\n+\n+    public void testMultiResultQuery() {\n+        performFind (\"Employee.findByName\", \"Mike%\", 3);\n+    }\n+\n+    public void testEscapedQuery() {\n+        if(getDBDictionary(emf) instanceof MySQLDictionary) { \n+            return;\n+        }\n+        \n+        performFind (\"Employee.findByNameEscaped\", \n+                \"M\\\\%%\", 1);\n+    }\n+\n+    public void testDoubleEscapedQuery() {\n+        performFind (\"Employee.findByName\", \"\\\\\\\\\", 0);\n+    }\n+\n+    public void testWrongEscape() {\n+        performFind (\"Employee.findByName\", \"M|%%\", 0);\n+    }\n+\n+    public void testDoubleSlashQuery() {\n+        // get the Dictionary and check the alwaysAddSearchString flag\n+        OpenJPAEntityManagerFactorySPI ojpaEmf = \n+            (OpenJPAEntityManagerFactorySPI) emf;\n+        JDBCConfiguration conf = (JDBCConfiguration)ojpaEmf.getConfiguration();\n+        \n+        if (conf.getDBDictionaryInstance().\n+                requiresSearchStringEscapeForLike == true) {\n+            return;\n+        }\n+\n+        performFind (\"Employee.findByName\", \"\\\\\", 0);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testDifferentEscapeCharacter () {\n+        OpenJPAEntityManagerFactorySPI ojpaEmf = \n+            (OpenJPAEntityManagerFactorySPI) emf;\n+        JDBCConfiguration conf = (JDBCConfiguration)ojpaEmf.getConfiguration();\n+\n+        // Would be nice to just pass a map to the createEntityManager, but\n+        // seems like it would be too much trouble to get the proper DB type\n+        // and then build the string for the map.\n+        conf.getDBDictionaryInstance().requiresSearchStringEscapeForLike = true;\n+        conf.getDBDictionaryInstance().searchStringEscape = \"|\";\n+        EntityManager em = emf.createEntityManager();\n+\n+        Query q = em.createNamedQuery(\"Employee.findByName\");\n+        q.setParameter(\"name\", \"M|%%\");\n+        List<Employee> emps = (List<Employee>) q.getResultList();\n+        assertEquals(1, emps.size());\n+\n+        String unnamedQuery =\n+            \"Select e from Employee e where e.name LIKE :name\";\n+\n+        q = em.createQuery(unnamedQuery);\n+        q.setParameter(\"name\", \"M|%%\");\n+        emps = (List<Employee>) q.getResultList();\n+        assertEquals(1, emps.size());\n+        em.close();\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private void performFind (String namedQuery, String parameter,\n+            int expected) {\n+        EntityManager em = emf.createEntityManager();\n+\n+        Query q = em.createNamedQuery(namedQuery);\n+        q.setParameter(\"name\", parameter);\n+        List<Employee> emps = (List<Employee>) q.getResultList();\n+        assertEquals(expected, emps.size());\n+\n+        String unnamedQuery =\n+            \"Select e from Employee e where e.name LIKE :name\";\n+        if (namedQuery.equals(\"Employee.findByNameEscaped\")) {\n+            unnamedQuery =\n+                \"Select e from Employee e where e.name LIKE :name ESCAPE '\\\\'\";\n+        }\n+        q = em.createQuery(unnamedQuery);\n+        q.setParameter(\"name\", parameter);\n+        emps = (List<Employee>) q.getResultList();\n+        assertEquals(expected, emps.size());\n+        em.close();\n+    }\n+}"},{"sha":"ef49ea4939749c75d1003f1875f55c00fb9ec7c6","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestSubquery.java","status":"modified","additions":55,"deletions":15,"changes":70,"blob_url":"https://github.com/apache/openjpa/blob/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestSubquery.java","raw_url":"https://github.com/apache/openjpa/raw/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestSubquery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestSubquery.java?ref=cd4c8839f87f750e2655a5b98f552e2ba4031a67","patch":"@@ -18,9 +18,11 @@\n  */\n package org.apache.openjpa.persistence.query;\n \n+import java.util.Date;\n import java.util.List;\n \n import javax.persistence.EntityManager;\n+import javax.persistence.Query;\n \n import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n \n@@ -31,8 +33,9 @@\n     extends SingleEMFTestCase {\n \n     public void setUp() {\n-        setUp(Customer.class, Customer.CustomerKey.class,\n-            Order.class, OrderItem.class, CLEAR_TABLES);\n+        setUp(Customer.class, Customer.CustomerKey.class, Order.class,\n+            OrderItem.class, Employee.class, Dependent.class,\n+            DependentId.class, Magazine.class, Publisher.class, CLEAR_TABLES);\n     }\n \n     static String[]  querys = new String[] {\n@@ -66,6 +69,18 @@ public void setUp() {\n             \" and (select min(o2.amount) from Customer c, in(c.orders) o2)\",\n         \"select o.oid from Customer c, in(c.orders)o where o.amount >\" +\n             \" (select sum(o2.amount) from c.orders o2)\",\n+        \"select o1.oid, c.name from Order o1, Customer c where o1.amount = \" +\n+            \" any(select o2.amount from in(c.orders) o2)\",\n+        \"SELECT p, m \"+\n+            \"FROM Publisher p \"+\n+            \"LEFT OUTER JOIN p.magazineCollection m \"+\n+            \"WHERE m.id = (SELECT MAX(m2.id) \"+\n+            \"FROM Magazine m2 \"+\n+            \"WHERE m2.idPublisher.id = p.id \"+\n+            \"AND m2.datePublished = \"+\n+            \"(SELECT MAX(m3.datePublished) \"+\n+            \"FROM Magazine m3 \"+\n+            \"WHERE m3.idPublisher.id = p.id)) \", \n     // outstanding problem subqueries:\n     //\"select o from Order o where o.amount > (select count(o) from Order o)\",\n     //\"select o from Order o where o.amount > (select count(o2) from Order o2)\",\n@@ -82,20 +97,45 @@ public void setUp() {\n \n \n     public void testSubquery() {\n-        EntityManager em = emf.createEntityManager();\n-        for (int i = 0; i < querys.length; i++) {\n-            String q = querys[i];\n-            List rs = em.createQuery(q).getResultList();\n-            assertEquals(0, rs.size());\n-        }\n+        if(getDBDictionary(emf).supportsSubselect) {\n+            EntityManager em = emf.createEntityManager();\n+            for (int i = 0; i < querys.length; i++) {\n+                String q = querys[i];\n+                List rs = em.createQuery(q).getResultList();\n+                assertEquals(0, rs.size());\n+            }\n \n-        em.getTransaction().begin();\n-        for (int i = 0; i < updates.length; i++) {\n-            int updateCount = em.createQuery(updates[i]).executeUpdate();\n-            assertEquals(0, updateCount);\n-        }\n+            em.getTransaction().begin();\n+            for (int i = 0; i < updates.length; i++) {\n+                int updateCount = em.createQuery(updates[i]).executeUpdate();\n+                assertEquals(0, updateCount);\n+            }\n \n-        em.getTransaction().rollback();\n-        em.close();\n+            em.getTransaction().rollback();\n+            em.close();\n+        }\n+    }\n+    \n+    /**\n+     * Verify a sub query can contain MAX and additional date comparisons \n+     * without losing the correct alias information. This sort of query \n+     * originally caused problems for DBDictionaries which used DATABASE syntax. \n+     */\n+    public void testSubSelectMaxDateRange() {\n+        if(getDBDictionary(emf).supportsSubselect) { \n+            String query =\n+                \"SELECT e,d from Employee e, Dependent d \"\n+                + \"WHERE e.empId = :empid \"\n+                + \"AND d.id.empid = (SELECT MAX (e2.empId) FROM Employee e2) \"\n+                + \"AND d.id.effDate > :minDate \"\n+                + \"AND d.id.effDate < :maxDate \";\n+            EntityManager em = emf.createEntityManager();\n+            Query q = em.createQuery(query);\n+            q.setParameter(\"empid\", (long) 101);\n+            q.setParameter(\"minDate\", new Date(100));\n+            q.setParameter(\"maxDate\", new Date(100000));\n+            q.getResultList();\n+            em.close();\n+        }\n     }\n }"},{"sha":"13aa958a7f9b883f22ec9e7b33cced57ce827b96","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/BasicEntity.java","status":"modified","additions":61,"deletions":61,"changes":122,"blob_url":"https://github.com/apache/openjpa/blob/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/BasicEntity.java","raw_url":"https://github.com/apache/openjpa/raw/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/BasicEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/BasicEntity.java?ref=cd4c8839f87f750e2655a5b98f552e2ba4031a67","patch":"@@ -1,61 +1,61 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.relations;\r\n-\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.GeneratedValue;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.ManyToOne;\r\n-import javax.persistence.Version;\r\n-\r\n-@Entity\r\n-public class BasicEntity {\r\n-\r\n-    @Id\r\n-    @GeneratedValue\r\n-    private long id;\r\n-\r\n-    private String name;\r\n-\r\n-    @ManyToOne\r\n-    private BasicEntity rel;\r\n-\r\n-    @Version\r\n-    private Integer optLock;\r\n-\r\n-    public long getId() { \r\n-        return id; \r\n-    }\r\n-\r\n-    public String getName() { \r\n-        return name; \r\n-    }\r\n-\r\n-    public void setName(String name) { \r\n-        this.name = name; \r\n-    }\r\n-\r\n-    public BasicEntity getRel() { \r\n-        return rel; \r\n-    }\r\n-\r\n-    public void setRel(BasicEntity rel) { \r\n-        this.rel = rel; \r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Version;\n+\n+@Entity\n+public class BasicEntity {\n+\n+    @Id\n+    @GeneratedValue\n+    private long id;\n+\n+    private String name;\n+\n+    @ManyToOne\n+    private BasicEntity rel;\n+\n+    @Version\n+    private Integer optLock;\n+\n+    public long getId() { \n+        return id; \n+    }\n+\n+    public String getName() { \n+        return name; \n+    }\n+\n+    public void setName(String name) { \n+        this.name = name; \n+    }\n+\n+    public BasicEntity getRel() { \n+        return rel; \n+    }\n+\n+    public void setRel(BasicEntity rel) { \n+        this.rel = rel; \n+    }\n+}"},{"sha":"4a50af786785888d07e254cf7ade30e9d73c18ae","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/CascadingOneManyChild.java","status":"modified","additions":66,"deletions":66,"changes":132,"blob_url":"https://github.com/apache/openjpa/blob/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/CascadingOneManyChild.java","raw_url":"https://github.com/apache/openjpa/raw/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/CascadingOneManyChild.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/CascadingOneManyChild.java?ref=cd4c8839f87f750e2655a5b98f552e2ba4031a67","patch":"@@ -1,66 +1,66 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.relations;\r\n-\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.GeneratedValue;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.JoinColumn;\r\n-import javax.persistence.ManyToOne;\r\n-import javax.persistence.Version;\r\n-\r\n-import org.apache.openjpa.persistence.jdbc.ForeignKey;\r\n-\r\n-@Entity\r\n-public class CascadingOneManyChild {\r\n-\r\n-    @Id\r\n-    @GeneratedValue\r\n-    private long id;\r\n-\r\n-    private String name;\r\n-\r\n-    @ManyToOne(optional=false)\r\n-    @JoinColumn(name=\"PARENT_ID\", nullable=false)\r\n-    @ForeignKey\r\n-    private CascadingOneManyParent parent;\r\n-\r\n-    @Version\r\n-    private Integer optLock;\r\n-\r\n-    public long getId() { \r\n-        return id; \r\n-    }\r\n-\r\n-    public String getName() { \r\n-        return name; \r\n-    }\r\n-\r\n-    public void setName(String name) { \r\n-        this.name = name; \r\n-    }\r\n-\r\n-    public CascadingOneManyParent getParent() { \r\n-        return parent; \r\n-    }\r\n-\r\n-    public void setParent(CascadingOneManyParent parent) { \r\n-        this.parent = parent; \r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Version;\n+\n+import org.apache.openjpa.persistence.jdbc.ForeignKey;\n+\n+@Entity\n+public class CascadingOneManyChild {\n+\n+    @Id\n+    @GeneratedValue\n+    private long id;\n+\n+    private String name;\n+\n+    @ManyToOne(optional=false)\n+    @JoinColumn(name=\"PARENT_ID\", nullable=false)\n+    @ForeignKey\n+    private CascadingOneManyParent parent;\n+\n+    @Version\n+    private Integer optLock;\n+\n+    public long getId() { \n+        return id; \n+    }\n+\n+    public String getName() { \n+        return name; \n+    }\n+\n+    public void setName(String name) { \n+        this.name = name; \n+    }\n+\n+    public CascadingOneManyParent getParent() { \n+        return parent; \n+    }\n+\n+    public void setParent(CascadingOneManyParent parent) { \n+        this.parent = parent; \n+    }\n+}"},{"sha":"f61fce26ae83a3a13099dd57833111089347b60d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/CascadingOneManyParent.java","status":"modified","additions":69,"deletions":69,"changes":138,"blob_url":"https://github.com/apache/openjpa/blob/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/CascadingOneManyParent.java","raw_url":"https://github.com/apache/openjpa/raw/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/CascadingOneManyParent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/CascadingOneManyParent.java?ref=cd4c8839f87f750e2655a5b98f552e2ba4031a67","patch":"@@ -1,69 +1,69 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.relations;\r\n-\r\n-import java.util.ArrayList;\r\n-import java.util.List;\r\n-\r\n-import javax.persistence.CascadeType;\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.GeneratedValue;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.OneToMany;\r\n-import javax.persistence.OrderBy;\r\n-import javax.persistence.Version;\r\n-\r\n-@Entity\r\n-public class CascadingOneManyParent {\r\n-\r\n-    @Id\r\n-    @GeneratedValue\r\n-    private long id;\r\n-\r\n-    private String name;\r\n-\r\n-    @OneToMany(mappedBy=\"parent\", cascade=CascadeType.ALL)\r\n-    @OrderBy(\"name ASC\")\r\n-    private List<CascadingOneManyChild> children = \r\n-        new ArrayList<CascadingOneManyChild>();\r\n-\r\n-    @Version\r\n-    private Integer optLock;\r\n-\r\n-    public long getId() { \r\n-        return id; \r\n-    }\r\n-\r\n-    public List<CascadingOneManyChild> getChildren() { \r\n-        return children; \r\n-    }\r\n-\r\n-    public void addChild(CascadingOneManyChild child) {\r\n-        child.setParent(this);\r\n-        children.add(child);\r\n-    }\r\n-\r\n-    public String getName() { \r\n-        return name; \r\n-    }\r\n-\r\n-    public void setName(String name) { \r\n-        this.name = name; \r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.OneToMany;\n+import javax.persistence.OrderBy;\n+import javax.persistence.Version;\n+\n+@Entity\n+public class CascadingOneManyParent {\n+\n+    @Id\n+    @GeneratedValue\n+    private long id;\n+\n+    private String name;\n+\n+    @OneToMany(mappedBy=\"parent\", cascade=CascadeType.ALL)\n+    @OrderBy(\"name ASC\")\n+    private List<CascadingOneManyChild> children = \n+        new ArrayList<CascadingOneManyChild>();\n+\n+    @Version\n+    private Integer optLock;\n+\n+    public long getId() { \n+        return id; \n+    }\n+\n+    public List<CascadingOneManyChild> getChildren() { \n+        return children; \n+    }\n+\n+    public void addChild(CascadingOneManyChild child) {\n+        child.setParent(this);\n+        children.add(child);\n+    }\n+\n+    public String getName() { \n+        return name; \n+    }\n+\n+    public void setName(String name) { \n+        this.name = name; \n+    }\n+}"},{"sha":"17b318d58c2c5c1921c877bb219d6ef505d70c67","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ChainEntityA.java","status":"added","additions":79,"deletions":0,"changes":79,"blob_url":"https://github.com/apache/openjpa/blob/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ChainEntityA.java","raw_url":"https://github.com/apache/openjpa/raw/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ChainEntityA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ChainEntityA.java?ref=cd4c8839f87f750e2655a5b98f552e2ba4031a67","patch":"@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import java.util.Collection;\n+import java.util.LinkedHashSet;\n+import java.util.Set;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.ManyToMany;\n+import javax.persistence.Version;\n+\n+@Entity\n+public class ChainEntityA {\n+\n+\t@Id\n+\t@GeneratedValue\n+\tprivate long aId;\n+\n+\t@Version\n+\tprivate Integer optLock;\n+\n+\t@ManyToMany(cascade = CascadeType.ALL, fetch = FetchType.EAGER)\n+\tprotected Set<ChainEntityB> chainEntityBSet;\n+\n+\tpublic ChainEntityA () {\n+\t\tsuper ();\n+\t}\n+\n+\tpublic void addChildEntityB (ChainEntityB bean) {\n+\t\tif (null == chainEntityBSet)\n+\t\t\tchainEntityBSet = new LinkedHashSet<ChainEntityB> ();\n+\t\tchainEntityBSet.add (bean);\n+\t}\n+\n+\tpublic Collection<ChainEntityB> getChildren () {\n+\t\tif (null == chainEntityBSet)\n+\t\t\tchainEntityBSet = new LinkedHashSet<ChainEntityB> ();\n+\t\treturn chainEntityBSet;\n+\t}\n+\n+\tprivate String name;\n+\n+\tpublic String getName () {\n+\t\treturn name;\n+\t}\n+\n+\tpublic void setName (String name) {\n+\t\tthis.name = name;\n+\t}\n+\n+\tpublic long getId () {\n+\t\treturn aId;\n+\t}\n+\n+\tpublic void setId (long id) {\n+\t\tthis.aId = id;\n+\t}\n+}"},{"sha":"5722823e6c30d045a298b7fcc5dd5e2d9efcad97","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ChainEntityB.java","status":"added","additions":78,"deletions":0,"changes":78,"blob_url":"https://github.com/apache/openjpa/blob/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ChainEntityB.java","raw_url":"https://github.com/apache/openjpa/raw/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ChainEntityB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ChainEntityB.java?ref=cd4c8839f87f750e2655a5b98f552e2ba4031a67","patch":"@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import java.util.Collection;\n+import java.util.LinkedHashSet;\n+import java.util.Set;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Version;\n+\n+@Entity\n+public class ChainEntityB {\n+\n+\t@Id\n+\t@GeneratedValue\n+\tprivate long bId;\n+\n+\t@Version\n+\tprivate Integer optLock;\n+\n+\t//cascade = CascadeType.ALL, \n+\t@OneToMany(cascade=CascadeType.ALL, fetch = FetchType.EAGER, mappedBy = \"chainEntityB\")\n+\tprotected Set<ChainEntityC> chainEntityCSet = null;\n+\n+\tpublic void addChainEntityC (ChainEntityC bean) {\n+\t\tif (null == chainEntityCSet)\n+\t\t\tchainEntityCSet = new LinkedHashSet<ChainEntityC> ();\n+\t\tchainEntityCSet.add (bean);\n+\t\tbean.setChainEntityB (this);\n+\t}\n+\n+\tpublic Collection<ChainEntityC> getChainEntityCSet () {\n+\t\tif (null == chainEntityCSet)\n+\t\t\tchainEntityCSet = new LinkedHashSet<ChainEntityC> ();\n+\t\treturn chainEntityCSet;\n+\t}\n+\n+\tprivate String name;\n+\n+\tpublic String getName () {\n+\t\treturn name;\n+\t}\n+\n+\tpublic void setName (String name) {\n+\t\tthis.name = name;\n+\t}\n+\n+\tpublic long getId () {\n+\t\treturn bId;\n+\t}\n+\n+\tpublic void setId (long id) {\n+\t\tthis.bId = id;\n+\t}\n+\n+}"},{"sha":"334ed5c76b9363219615f4d5e1b6ea4f9f02964e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ChainEntityC.java","status":"added","additions":69,"deletions":0,"changes":69,"blob_url":"https://github.com/apache/openjpa/blob/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ChainEntityC.java","raw_url":"https://github.com/apache/openjpa/raw/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ChainEntityC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ChainEntityC.java?ref=cd4c8839f87f750e2655a5b98f552e2ba4031a67","patch":"@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Version;\n+\n+@Entity\n+public class ChainEntityC {\n+\n+\t@Id\n+\t@GeneratedValue\n+\tprivate long cId;\n+\n+\t@Version\n+\tprivate Integer optLock;\n+\n+\t@ManyToOne(fetch = FetchType.EAGER, cascade=CascadeType.ALL)\n+\tprotected ChainEntityB chainEntityB;\n+\n+\t@Basic\n+\tprotected long chainEntityBId;\n+\n+\tpublic void setChainEntityB (ChainEntityB b) {\n+\t\tthis.chainEntityB = b;\n+//\t\tthis.chainEntityBId = null == b ? 0 : b.getId ();\n+\t}\n+\n+\tprivate String name;\n+\n+\tpublic String getName () {\n+\t\treturn name;\n+\t}\n+\n+\tpublic void setName (String name) {\n+\t\tthis.name = name;\n+\t}\n+\n+\tpublic long getId () {\n+\t\treturn cId;\n+\t}\n+\n+\tpublic void setId (long id) {\n+\t\tthis.cId = id;\n+\t}\n+\n+}"},{"sha":"88b94bd0101dcbe1a7ca48d008d4d8eb0d87063a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/DataStoreBasicEntity.java","status":"modified","additions":54,"deletions":54,"changes":108,"blob_url":"https://github.com/apache/openjpa/blob/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/DataStoreBasicEntity.java","raw_url":"https://github.com/apache/openjpa/raw/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/DataStoreBasicEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/DataStoreBasicEntity.java?ref=cd4c8839f87f750e2655a5b98f552e2ba4031a67","patch":"@@ -1,54 +1,54 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.relations;\r\n-\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.ManyToOne;\r\n-import javax.persistence.Version;\r\n-\r\n-import org.apache.openjpa.persistence.DataStoreId;\r\n-\r\n-@Entity\r\n-@DataStoreId\r\n-public class DataStoreBasicEntity {\r\n-\r\n-    private String name;\r\n-\r\n-    @ManyToOne\r\n-    private BasicEntity rel;\r\n-\r\n-    @Version\r\n-    private Integer optLock;\r\n-\r\n-    public String getName() { \r\n-        return name; \r\n-    }\r\n-\r\n-    public void setName(String name) { \r\n-        this.name = name; \r\n-    }\r\n-\r\n-    public BasicEntity getRel() { \r\n-        return rel; \r\n-    }\r\n-\r\n-    public void setRel(BasicEntity rel) { \r\n-        this.rel = rel; \r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Version;\n+\n+import org.apache.openjpa.persistence.DataStoreId;\n+\n+@Entity\n+@DataStoreId\n+public class DataStoreBasicEntity {\n+\n+    private String name;\n+\n+    @ManyToOne\n+    private BasicEntity rel;\n+\n+    @Version\n+    private Integer optLock;\n+\n+    public String getName() { \n+        return name; \n+    }\n+\n+    public void setName(String name) { \n+        this.name = name; \n+    }\n+\n+    public BasicEntity getRel() { \n+        return rel; \n+    }\n+\n+    public void setRel(BasicEntity rel) { \n+        this.rel = rel; \n+    }\n+}"},{"sha":"bf5128c667b7be92e0d696ab98bb26d0c64d3884","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/DataStoreManyOneIdOwner.java","status":"modified","additions":64,"deletions":64,"changes":128,"blob_url":"https://github.com/apache/openjpa/blob/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/DataStoreManyOneIdOwner.java","raw_url":"https://github.com/apache/openjpa/raw/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/DataStoreManyOneIdOwner.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/DataStoreManyOneIdOwner.java?ref=cd4c8839f87f750e2655a5b98f552e2ba4031a67","patch":"@@ -1,64 +1,64 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.relations;\r\n-\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.ManyToOne;\r\n-import javax.persistence.Version;\r\n-\r\n-@Entity\r\n-public class DataStoreManyOneIdOwner {\r\n-\r\n-    @Id\r\n-    @ManyToOne\r\n-    private DataStoreBasicEntity id;\r\n-\r\n-    private String name;\r\n-\r\n-    @ManyToOne\r\n-    private DataStoreManyOneIdOwner selfRel;\r\n-\r\n-    @Version\r\n-    private Integer optLock;\r\n-\r\n-    public DataStoreBasicEntity getId() { \r\n-        return id; \r\n-    }\r\n-\r\n-    public void setId(DataStoreBasicEntity id) { \r\n-        this.id = id; \r\n-    }\r\n-\r\n-    public String getName() { \r\n-        return name; \r\n-    }\r\n-\r\n-    public void setName(String name) { \r\n-        this.name = name; \r\n-    }\r\n-\r\n-    public DataStoreManyOneIdOwner getSelfRel() { \r\n-        return selfRel; \r\n-    }\r\n-\r\n-    public void setSelfRel(DataStoreManyOneIdOwner selfRel) { \r\n-        this.selfRel = selfRel; \r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Version;\n+\n+@Entity\n+public class DataStoreManyOneIdOwner {\n+\n+    @Id\n+    @ManyToOne\n+    private DataStoreBasicEntity id;\n+\n+    private String name;\n+\n+    @ManyToOne\n+    private DataStoreManyOneIdOwner selfRel;\n+\n+    @Version\n+    private Integer optLock;\n+\n+    public DataStoreBasicEntity getId() { \n+        return id; \n+    }\n+\n+    public void setId(DataStoreBasicEntity id) { \n+        this.id = id; \n+    }\n+\n+    public String getName() { \n+        return name; \n+    }\n+\n+    public void setName(String name) { \n+        this.name = name; \n+    }\n+\n+    public DataStoreManyOneIdOwner getSelfRel() { \n+        return selfRel; \n+    }\n+\n+    public void setSelfRel(DataStoreManyOneIdOwner selfRel) { \n+        this.selfRel = selfRel; \n+    }\n+}"},{"sha":"8906e9f48be51827186af0991034e859a277a097","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EmbeddableWithRelation.java","status":"modified","additions":48,"deletions":48,"changes":96,"blob_url":"https://github.com/apache/openjpa/blob/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EmbeddableWithRelation.java","raw_url":"https://github.com/apache/openjpa/raw/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EmbeddableWithRelation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EmbeddableWithRelation.java?ref=cd4c8839f87f750e2655a5b98f552e2ba4031a67","patch":"@@ -1,48 +1,48 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.relations;\r\n-\r\n-import javax.persistence.Embeddable;\r\n-import javax.persistence.CascadeType;\r\n-import javax.persistence.ManyToOne;\r\n-\r\n-@Embeddable\r\n-public class EmbeddableWithRelation {\r\n-\r\n-    private String name;\r\n-\r\n-    @ManyToOne(cascade=CascadeType.ALL)\r\n-    private MultipleSameTypedEmbedded rel;\r\n-\r\n-    public String getName() { \r\n-        return name; \r\n-    }\r\n-\r\n-    public void setName(String name) { \r\n-        this.name = name; \r\n-    }\r\n-\r\n-    public MultipleSameTypedEmbedded getRel() { \r\n-        return rel; \r\n-    }\r\n-\r\n-    public void setRel(MultipleSameTypedEmbedded rel) { \r\n-        this.rel = rel; \r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import javax.persistence.Embeddable;\n+import javax.persistence.CascadeType;\n+import javax.persistence.ManyToOne;\n+\n+@Embeddable\n+public class EmbeddableWithRelation {\n+\n+    private String name;\n+\n+    @ManyToOne(cascade=CascadeType.ALL)\n+    private MultipleSameTypedEmbedded rel;\n+\n+    public String getName() { \n+        return name; \n+    }\n+\n+    public void setName(String name) { \n+        this.name = name; \n+    }\n+\n+    public MultipleSameTypedEmbedded getRel() { \n+        return rel; \n+    }\n+\n+    public void setRel(MultipleSameTypedEmbedded rel) { \n+        this.rel = rel; \n+    }\n+}"},{"sha":"0bbf14cc56cd9e744f7e888b5156392787f542df","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ManyOneCompoundIdOwner.java","status":"modified","additions":75,"deletions":75,"changes":150,"blob_url":"https://github.com/apache/openjpa/blob/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ManyOneCompoundIdOwner.java","raw_url":"https://github.com/apache/openjpa/raw/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ManyOneCompoundIdOwner.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ManyOneCompoundIdOwner.java?ref=cd4c8839f87f750e2655a5b98f552e2ba4031a67","patch":"@@ -1,75 +1,75 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.relations;\r\n-\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.GeneratedValue;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.IdClass;\r\n-import javax.persistence.ManyToOne;\r\n-import javax.persistence.Version;\r\n-\r\n-@Entity\r\n-@IdClass(ManyOneCompoundIdOwnerId.class)\r\n-public class ManyOneCompoundIdOwner {\r\n-\r\n-    @Id\r\n-    @GeneratedValue\r\n-    private long longId;\r\n-\r\n-    @Id\r\n-    @ManyToOne\r\n-    private BasicEntity entityId;\r\n-\r\n-    private String name;\r\n-\r\n-    @ManyToOne\r\n-    private ManyOneCompoundIdOwner selfRel;\r\n-\r\n-    @Version\r\n-    private Integer optLock;\r\n-\r\n-    public long getLongId() {\r\n-        return longId;\r\n-    }\r\n-\r\n-    public BasicEntity getEntityId() { \r\n-        return entityId; \r\n-    }\r\n-\r\n-    public void setEntityId(BasicEntity entityId) { \r\n-        this.entityId = entityId; \r\n-    }\r\n-\r\n-    public String getName() { \r\n-        return name; \r\n-    }\r\n-\r\n-    public void setName(String name) { \r\n-        this.name = name; \r\n-    }\r\n-\r\n-    public ManyOneCompoundIdOwner getSelfRel() { \r\n-        return selfRel; \r\n-    }\r\n-\r\n-    public void setSelfRel(ManyOneCompoundIdOwner selfRel) { \r\n-        this.selfRel = selfRel; \r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.IdClass;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Version;\n+\n+@Entity\n+@IdClass(ManyOneCompoundIdOwnerId.class)\n+public class ManyOneCompoundIdOwner {\n+\n+    @Id\n+    @GeneratedValue\n+    private long longId;\n+\n+    @Id\n+    @ManyToOne\n+    private BasicEntity entityId;\n+\n+    private String name;\n+\n+    @ManyToOne\n+    private ManyOneCompoundIdOwner selfRel;\n+\n+    @Version\n+    private Integer optLock;\n+\n+    public long getLongId() {\n+        return longId;\n+    }\n+\n+    public BasicEntity getEntityId() { \n+        return entityId; \n+    }\n+\n+    public void setEntityId(BasicEntity entityId) { \n+        this.entityId = entityId; \n+    }\n+\n+    public String getName() { \n+        return name; \n+    }\n+\n+    public void setName(String name) { \n+        this.name = name; \n+    }\n+\n+    public ManyOneCompoundIdOwner getSelfRel() { \n+        return selfRel; \n+    }\n+\n+    public void setSelfRel(ManyOneCompoundIdOwner selfRel) { \n+        this.selfRel = selfRel; \n+    }\n+}"},{"sha":"ef4b09e5a8beb90a101ad8078c1a9cdbea472502","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ManyOneIdOwner.java","status":"modified","additions":64,"deletions":64,"changes":128,"blob_url":"https://github.com/apache/openjpa/blob/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ManyOneIdOwner.java","raw_url":"https://github.com/apache/openjpa/raw/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ManyOneIdOwner.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ManyOneIdOwner.java?ref=cd4c8839f87f750e2655a5b98f552e2ba4031a67","patch":"@@ -1,64 +1,64 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.relations;\r\n-\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.ManyToOne;\r\n-import javax.persistence.Version;\r\n-\r\n-@Entity\r\n-public class ManyOneIdOwner {\r\n-\r\n-    @Id\r\n-    @ManyToOne\r\n-    private BasicEntity id;\r\n-\r\n-    private String name;\r\n-\r\n-    @ManyToOne\r\n-    private ManyOneIdOwner selfRel;\r\n-\r\n-    @Version\r\n-    private Integer optLock;\r\n-\r\n-    public BasicEntity getId() { \r\n-        return id; \r\n-    }\r\n-\r\n-    public void setId(BasicEntity id) { \r\n-        this.id = id; \r\n-    }\r\n-\r\n-    public String getName() { \r\n-        return name; \r\n-    }\r\n-\r\n-    public void setName(String name) { \r\n-        this.name = name; \r\n-    }\r\n-\r\n-    public ManyOneIdOwner getSelfRel() { \r\n-        return selfRel; \r\n-    }\r\n-\r\n-    public void setSelfRel(ManyOneIdOwner selfRel) { \r\n-        this.selfRel = selfRel; \r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Version;\n+\n+@Entity\n+public class ManyOneIdOwner {\n+\n+    @Id\n+    @ManyToOne\n+    private BasicEntity id;\n+\n+    private String name;\n+\n+    @ManyToOne\n+    private ManyOneIdOwner selfRel;\n+\n+    @Version\n+    private Integer optLock;\n+\n+    public BasicEntity getId() { \n+        return id; \n+    }\n+\n+    public void setId(BasicEntity id) { \n+        this.id = id; \n+    }\n+\n+    public String getName() { \n+        return name; \n+    }\n+\n+    public void setName(String name) { \n+        this.name = name; \n+    }\n+\n+    public ManyOneIdOwner getSelfRel() { \n+        return selfRel; \n+    }\n+\n+    public void setSelfRel(ManyOneIdOwner selfRel) { \n+        this.selfRel = selfRel; \n+    }\n+}"},{"sha":"6ab328b509cf4e292cf71e0fd3e6e2baedb7be01","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/MultipleSameTypedEmbedded.java","status":"modified","additions":80,"deletions":80,"changes":160,"blob_url":"https://github.com/apache/openjpa/blob/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/MultipleSameTypedEmbedded.java","raw_url":"https://github.com/apache/openjpa/raw/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/MultipleSameTypedEmbedded.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/MultipleSameTypedEmbedded.java?ref=cd4c8839f87f750e2655a5b98f552e2ba4031a67","patch":"@@ -1,80 +1,80 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.relations;\r\n-\r\n-import javax.persistence.AttributeOverride;\r\n-import javax.persistence.AssociationOverride;\r\n-import javax.persistence.Column;\r\n-import javax.persistence.Embedded;\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.GeneratedValue;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.JoinColumn;\r\n-import javax.persistence.Version;\r\n-\r\n-@Entity\r\n-public class MultipleSameTypedEmbedded { \r\n-\r\n-    @Id\r\n-    @GeneratedValue\r\n-    private long id;\r\n-\r\n-    private String name;\r\n-\r\n-    @Embedded\r\n-    @AttributeOverride(name=\"name\", column=@Column(name=\"E1_NAME\"))\r\n-    @AssociationOverride(name=\"rel\", joinColumns=@JoinColumn(name=\"E1_REL\"))\r\n-    private EmbeddableWithRelation embed1;\r\n-\r\n-    @Embedded\r\n-    @AttributeOverride(name=\"name\", column=@Column(name=\"E2_NAME\"))\r\n-    @AssociationOverride(name=\"rel\", joinColumns=@JoinColumn(name=\"E2_REL\"))\r\n-    private EmbeddableWithRelation embed2;\r\n-\r\n-    @Version\r\n-    private Integer optLock;\r\n-\r\n-    public long getId() { \r\n-        return id; \r\n-    }\r\n-\r\n-    public EmbeddableWithRelation getEmbed1() {\r\n-        return embed1; \r\n-    }\r\n-\r\n-    public void setEmbed1(EmbeddableWithRelation embed1) {\r\n-        this.embed1 = embed1; \r\n-    }\r\n-\r\n-    public EmbeddableWithRelation getEmbed2() {\r\n-        return embed2; \r\n-    }\r\n-\r\n-    public void setEmbed2(EmbeddableWithRelation embed2) {\r\n-        this.embed2 = embed2; \r\n-    }\r\n-\r\n-    public String getName() { \r\n-        return name; \r\n-    }\r\n-\r\n-    public void setName(String name) { \r\n-        this.name = name; \r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import javax.persistence.AttributeOverride;\n+import javax.persistence.AssociationOverride;\n+import javax.persistence.Column;\n+import javax.persistence.Embedded;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.Version;\n+\n+@Entity\n+public class MultipleSameTypedEmbedded { \n+\n+    @Id\n+    @GeneratedValue\n+    private long id;\n+\n+    private String name;\n+\n+    @Embedded\n+    @AttributeOverride(name=\"name\", column=@Column(name=\"E1_NAME\"))\n+    @AssociationOverride(name=\"rel\", joinColumns=@JoinColumn(name=\"E1_REL\"))\n+    private EmbeddableWithRelation embed1;\n+\n+    @Embedded\n+    @AttributeOverride(name=\"name\", column=@Column(name=\"E2_NAME\"))\n+    @AssociationOverride(name=\"rel\", joinColumns=@JoinColumn(name=\"E2_REL\"))\n+    private EmbeddableWithRelation embed2;\n+\n+    @Version\n+    private Integer optLock;\n+\n+    public long getId() { \n+        return id; \n+    }\n+\n+    public EmbeddableWithRelation getEmbed1() {\n+        return embed1; \n+    }\n+\n+    public void setEmbed1(EmbeddableWithRelation embed1) {\n+        this.embed1 = embed1; \n+    }\n+\n+    public EmbeddableWithRelation getEmbed2() {\n+        return embed2; \n+    }\n+\n+    public void setEmbed2(EmbeddableWithRelation embed2) {\n+        this.embed2 = embed2; \n+    }\n+\n+    public String getName() { \n+        return name; \n+    }\n+\n+    public void setName(String name) { \n+        this.name = name; \n+    }\n+}"},{"sha":"ae0891dbe3db032c29c7b476f9b67cb8dc259933","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TargetedIFaceRelationParent.java","status":"modified","additions":64,"deletions":64,"changes":128,"blob_url":"https://github.com/apache/openjpa/blob/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TargetedIFaceRelationParent.java","raw_url":"https://github.com/apache/openjpa/raw/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TargetedIFaceRelationParent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TargetedIFaceRelationParent.java?ref=cd4c8839f87f750e2655a5b98f552e2ba4031a67","patch":"@@ -1,64 +1,64 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.relations;\r\n-\r\n-import javax.persistence.CascadeType;\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.GeneratedValue;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.ManyToOne;\r\n-import javax.persistence.Version;\r\n-\r\n-@Entity\r\n-public class TargetedIFaceRelationParent \r\n-    implements IFace {\r\n-\r\n-    @Id\r\n-    @GeneratedValue\r\n-    private long id;\r\n-\r\n-    private String name;\r\n-\r\n-    @ManyToOne(targetEntity=TargetedIFaceRelationParent.class,\r\n-        cascade=CascadeType.ALL)\r\n-    private IFace iface;\r\n-\r\n-    @Version\r\n-    private Integer optLock;\r\n-\r\n-    public long getId() { \r\n-        return id; \r\n-    }\r\n-\r\n-    public IFace getIFace() {\r\n-        return iface; \r\n-    }\r\n-\r\n-    public void setIFace(IFace iface) {\r\n-        this.iface = iface; \r\n-    }\r\n-\r\n-    public String getName() { \r\n-        return name; \r\n-    }\r\n-\r\n-    public void setName(String name) { \r\n-        this.name = name; \r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Version;\n+\n+@Entity\n+public class TargetedIFaceRelationParent \n+    implements IFace {\n+\n+    @Id\n+    @GeneratedValue\n+    private long id;\n+\n+    private String name;\n+\n+    @ManyToOne(targetEntity=TargetedIFaceRelationParent.class,\n+        cascade=CascadeType.ALL)\n+    private IFace iface;\n+\n+    @Version\n+    private Integer optLock;\n+\n+    public long getId() { \n+        return id; \n+    }\n+\n+    public IFace getIFace() {\n+        return iface; \n+    }\n+\n+    public void setIFace(IFace iface) {\n+        this.iface = iface; \n+    }\n+\n+    public String getName() { \n+        return name; \n+    }\n+\n+    public void setName(String name) { \n+        this.name = name; \n+    }\n+}"},{"sha":"cc8b2bac8b03b473648c92a2bc6eeb4e199ae201","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestBulkUpdatesAndEmbeddedFields.java","status":"modified","additions":47,"deletions":47,"changes":94,"blob_url":"https://github.com/apache/openjpa/blob/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestBulkUpdatesAndEmbeddedFields.java","raw_url":"https://github.com/apache/openjpa/raw/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestBulkUpdatesAndEmbeddedFields.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestBulkUpdatesAndEmbeddedFields.java?ref=cd4c8839f87f750e2655a5b98f552e2ba4031a67","patch":"@@ -1,48 +1,48 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.relations;\r\n-\r\n-import org.apache.openjpa.persistence.test.SingleEMTestCase;\r\n-\r\n-/**\r\n- * Tests OPENJPA-199\r\n- */\r\n-public class TestBulkUpdatesAndEmbeddedFields\r\n-    extends SingleEMTestCase {\r\n-\r\n-    public void setUp() {\r\n-        setUp(MultipleSameTypedEmbedded.class, EmbeddableWithRelation.class,\r\n-            CLEAR_TABLES);\r\n-\r\n-        em.getTransaction().begin();\r\n-        MultipleSameTypedEmbedded pc = new MultipleSameTypedEmbedded();\r\n-        pc.setEmbed1(new EmbeddableWithRelation());\r\n-        pc.getEmbed1().setName(\"foo\");\r\n-        em.persist(pc);\r\n-        em.getTransaction().commit();\r\n-    }\r\n-\r\n-    public void testBulkUpdateOfEmbeddedField() {\r\n-        em.getTransaction().begin();\r\n-        assertEquals(1, em.createQuery(\r\n-            \"UPDATE MultipleSameTypedEmbedded o SET o.embed1.name = 'bar'\")\r\n-            .executeUpdate());\r\n-        em.getTransaction().commit();\r\n-    }\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import org.apache.openjpa.persistence.test.SingleEMTestCase;\n+\n+/**\n+ * Tests OPENJPA-199\n+ */\n+public class TestBulkUpdatesAndEmbeddedFields\n+    extends SingleEMTestCase {\n+\n+    public void setUp() {\n+        setUp(MultipleSameTypedEmbedded.class, EmbeddableWithRelation.class,\n+            CLEAR_TABLES);\n+\n+        em.getTransaction().begin();\n+        MultipleSameTypedEmbedded pc = new MultipleSameTypedEmbedded();\n+        pc.setEmbed1(new EmbeddableWithRelation());\n+        pc.getEmbed1().setName(\"foo\");\n+        em.persist(pc);\n+        em.getTransaction().commit();\n+    }\n+\n+    public void testBulkUpdateOfEmbeddedField() {\n+        em.getTransaction().begin();\n+        assertEquals(1, em.createQuery(\n+            \"UPDATE MultipleSameTypedEmbedded o SET o.embed1.name = 'bar'\")\n+            .executeUpdate());\n+        em.getTransaction().commit();\n+    }\n }\n\\ No newline at end of file"},{"sha":"c0c457d4d410ce7668e3f7a078f54793af87a884","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestChainEntities.java","status":"added","additions":117,"deletions":0,"changes":117,"blob_url":"https://github.com/apache/openjpa/blob/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestChainEntities.java","raw_url":"https://github.com/apache/openjpa/raw/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestChainEntities.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestChainEntities.java?ref=cd4c8839f87f750e2655a5b98f552e2ba4031a67","patch":"@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+public class TestChainEntities extends SingleEMFTestCase {\n+\n+\t/*\n+\t * Set this magical number to 3 or less to avoid the error.\n+\t */\n+\tprivate static final int MAGICAL_NUMBER = 50;\n+\t\n+\tlong aid;\n+\n+\tpublic void setUp () {\n+\t\tsetUp (ChainEntityA.class, ChainEntityB.class, ChainEntityC.class);\n+\t\t// Create A\n+\t\tChainEntityA a = new ChainEntityA ();\n+\t\ta.setName (\"TEST_A\");\n+\t\t// Persist A\n+\t\tEntityManager em = emf.createEntityManager ();\n+\t\tem.getTransaction ().begin ();\n+\t\tem.persist (a);\n+\t\taid = a.getId ();\n+\t\tem.getTransaction ().commit ();\n+\t\tem.close ();\n+\t\tSystem.out.println (\"ChainEntityA id = \" + aid);\n+\t}\n+\n+\tpublic void testChainEntities () {\n+\t\tchainUpdate ();\n+\t}\n+\t\n+\tprotected void chainUpdate () {\n+\t\t// Get A\n+\t\tChainEntityA a = getA ();\n+\t\t// Create B\n+\t\tChainEntityB b = new ChainEntityB ();\n+\t\tb.setName (\"Test_B_\");\n+\t\tChainEntityC c;\n+\t\t/*\n+\t\t * Create and add C to B. Increasing the number of iterations (number of\n+\t\t * ChainEntityC) increases the probability to get the unique key\n+\t\t * constraint violation error.\n+\t\t */\n+\t\tfor (int i = 1; i <= MAGICAL_NUMBER; i++) {\n+\t\t\tc = new ChainEntityC ();\n+\t\t\tc.setName (\"Test_C_\" + i);\n+\t\t\tb.addChainEntityC (c);\n+\t\t}\n+\t\ta.addChildEntityB (b);\n+\t\t// dump (a);  // debug\n+\t\t// Merge A\n+\t\tEntityManager em = emf.createEntityManager ();\n+\t\tem.getTransaction ().begin ();\n+\t\ta = em.merge (a);\n+\t\t/*\n+\t\t * workaround: Uncommenting following line is a workaround. If we\n+\t\t * retrive Ids of ChainEntityC objects after merge but before commit we\n+\t\t * don't get the error.\n+\t\t */\n+\t\t//dump (a);\n+\t\tem.getTransaction ().commit ();\n+\t\tem.close ();\n+\t\t// dump (getA ());  // debug\n+\t}\n+\n+\t/**\n+\t * Get created ChainEntityA using aid field.\n+\t * \n+\t * @return\n+\t */\n+\tprotected ChainEntityA getA () {\n+\t\tEntityManager em = emf.createEntityManager ();\n+\t\tChainEntityA a = em.find (ChainEntityA.class, aid);\n+\t\tem.close ();\n+\t\treturn a;\n+\t}\n+\n+\t/**\n+\t * Print the object graph of given ChainEntityA to System.out\n+\t * \n+\t * @param testA\n+\t */\n+\tprotected void dump (ChainEntityA testA) {\n+\t\tSystem.out.println (\"-------\");\n+\t\tSystem.out.println (testA.getName () + \"[\" + testA.getId () + \"]\");\n+\t\tfor (ChainEntityB testB : testA.getChildren ()) {\n+\t\t\tSystem.out.println (testB.getName () + \"[\" + testB.getId () + \"]\");\n+\t\t\tfor (ChainEntityC testC : testB.getChainEntityCSet ()) {\n+\t\t\t\tSystem.out.println (testC.getName () + \"[\" + testC.getId ()\n+\t\t\t\t\t\t+ \"]\");\n+\t\t\t}\n+\t\t}\n+\t\tSystem.out.println (\"-------\");\n+\t}\n+\n+}"},{"sha":"8980e6611d5af5ab01362040ce7d7e15c4b6e42e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/sequence/EntityEmployee.java","status":"added","additions":138,"deletions":0,"changes":138,"blob_url":"https://github.com/apache/openjpa/blob/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/sequence/EntityEmployee.java","raw_url":"https://github.com/apache/openjpa/raw/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/sequence/EntityEmployee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/sequence/EntityEmployee.java?ref=cd4c8839f87f750e2655a5b98f552e2ba4031a67","patch":"@@ -0,0 +1,138 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.sequence;\n+\n+import java.io.Serializable;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.SequenceGenerator;\n+import javax.persistence.Table;\n+\n+/**\n+ * @author Tim McConnell\n+ * @since 2.0.0\n+ */\n+@Entity\n+@Table(name=\"ENTITY_EMPLOYEE\")\n+public class EntityEmployee implements Serializable {\n+\n+    private static final long serialVersionUID = 2961572787273807912L;\n+    \n+    @Id\n+    @SequenceGenerator(name=\"SeqEmployee\", sequenceName=\"test_native_sequence\")\n+    @GeneratedValue(strategy=GenerationType.SEQUENCE, generator=\"SeqEmployee\")\n+    private int id; \n+    private String firstName;\n+    private String lastName;\n+    private float salary;\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public String getFirstName() {\n+        return firstName;\n+    }\n+\n+    public void setFirstName(String firstName) {\n+        this.firstName = firstName;\n+    }\n+\n+    public String getLastName() {\n+        return lastName;\n+    }\n+\n+    public void setLastName(String lastName) {\n+        this.lastName = lastName;\n+    }\n+\n+    public float getSalary() {\n+        return salary;\n+    }\n+\n+    public void setSalary(float salary) {\n+        this.salary = salary;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"EntityEmployee: Employee id: \" + getId() + \n+               \" firstName: \" + getFirstName() +\n+               \" lastName: \" + getLastName() +\n+               \" salary: \" + getSalary();\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        final int prime = 31;\n+        int result = 1;\n+        result = prime * result\n+            + ((getFirstName() == null) ? 0 : getFirstName().hashCode());\n+        result = prime * result + getId();\n+        result = prime * result\n+            + ((getLastName() == null) ? 0 : getLastName().hashCode());\n+        result = prime * result + Float.floatToIntBits(getSalary());\n+        return result;\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (getClass() != obj.getClass()) {\n+            return false;\n+        }\n+        final EntityEmployee other = (EntityEmployee) obj;\n+        if (getId() != other.getId()) {\n+            return false;\n+        }\n+        if (getFirstName() == null) {\n+            if (other.getFirstName() != null) {\n+                return false;\n+            }\n+        }\n+        else if (!getFirstName().equals(other.getFirstName())) {\n+            return false;\n+        }\n+        if (getLastName() == null) {\n+            if (other.getLastName() != null) {\n+                return false;\n+            }\n+        }\n+        else if (!getLastName().equals(other.getLastName())) {\n+            return false;\n+        }\n+        if (Float.floatToIntBits(getSalary()) != Float.floatToIntBits(other\n+            .getSalary())) {\n+            return false;\n+        }\n+        return true;\n+    }\n+}"},{"sha":"e8c925c4a5ab3aa813cf48705cb36f1944268365","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/sequence/EntityPerson.java","status":"added","additions":132,"deletions":0,"changes":132,"blob_url":"https://github.com/apache/openjpa/blob/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/sequence/EntityPerson.java","raw_url":"https://github.com/apache/openjpa/raw/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/sequence/EntityPerson.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/sequence/EntityPerson.java?ref=cd4c8839f87f750e2655a5b98f552e2ba4031a67","patch":"@@ -0,0 +1,132 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.sequence;\n+\n+import java.io.Serializable;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.SequenceGenerator;\n+import javax.persistence.Table;\n+\n+/**\n+ * @author Tim McConnell\n+ * @since 2.0.0\n+ */\n+@Entity\n+@Table(name=\"ENTITY_PERSON\")\n+public class EntityPerson implements Serializable {\n+\n+    private static final long serialVersionUID = 3772049669261731520L;\n+    \n+    @Id\n+    @SequenceGenerator(name=\"SeqPerson\", sequenceName=\"test_native_sequence\")\n+    @GeneratedValue(strategy=GenerationType.SEQUENCE, generator=\"SeqPerson\")\n+    private int id; \n+    private String firstName;\n+    private String lastName;\n+\n+\n+    public EntityPerson() {\n+    }\n+\n+    public EntityPerson(String firstName, String lastName) {\n+        this.firstName = firstName;\n+        this.lastName = lastName;\n+    }\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public String getFirstName() {\n+        return firstName;\n+    }\n+\n+    public void setFirstName(String firstName) {\n+        this.firstName = firstName;\n+    }\n+\n+    public String getLastName() {\n+        return lastName;\n+    }\n+\n+    public void setLastName(String lastName) {\n+        this.lastName = lastName;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"EntityPerson: Person id: \" + getId() + \n+               \" firstName: \" + getFirstName() +\n+               \" lastName: \" + getLastName();\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        final int prime = 31;\n+        int result = 1;\n+        result = prime * result\n+            + ((getFirstName() == null) ? 0 : getFirstName().hashCode());\n+        result = prime * result + getId();\n+        result = prime * result\n+            + ((getLastName() == null) ? 0 : getLastName().hashCode());\n+        return result;\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (getClass() != obj.getClass()) {\n+            return false;\n+        }\n+        final EntityPerson other = (EntityPerson) obj;\n+        if (getId() != other.getId()) {\n+            return false;\n+        }\n+        if (getFirstName() == null) {\n+            if (other.getFirstName() != null) {\n+                return false;\n+            }\n+        }\n+        else if (!getFirstName().equals(other.getFirstName())) {\n+            return false;\n+        }\n+        if (getLastName() == null) {\n+            if (other.getLastName() != null) {\n+                return false;\n+            }\n+        }\n+        else if (!getLastName().equals(other.getLastName())) {\n+            return false;\n+        }\n+        return true;\n+    } \n+}"},{"sha":"ee9075ad36dffaad785e8469053c80f0e78d2a14","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/sequence/TestSequence.java","status":"added","additions":543,"deletions":0,"changes":543,"blob_url":"https://github.com/apache/openjpa/blob/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/sequence/TestSequence.java","raw_url":"https://github.com/apache/openjpa/raw/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/sequence/TestSequence.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/sequence/TestSequence.java?ref=cd4c8839f87f750e2655a5b98f552e2ba4031a67","patch":"@@ -0,0 +1,543 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agEmployee_Last_Name to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.sequence;\n+\n+import java.io.PrintStream;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.lang.reflect.Method;\n+import java.util.Collections;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.StringTokenizer;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+/**\n+ * @author Tim McConnell\n+ * @since 2.0.0\n+ */\n+public class TestSequence extends SingleEMFTestCase {\n+\n+    private String multiThreadExecuting = null;\n+    private static final int NUMBER_ENTITIES = 5000;\n+\n+    public void setUp() {\n+        setUp(EntityPerson.class, EntityEmployee.class, CLEAR_TABLES,\n+            \"openjpa.Multithreaded\", \"true\");\n+    }\n+\n+    // Override teardown to preserve database contents\n+    @Override\n+    public void tearDown() throws Exception {\n+    }\n+\n+    public void testMultiThreadedNativeSequences() throws Exception {\n+        boolean supportsNativeSequence = false;\n+\n+        try {\n+            supportsNativeSequence = ((JDBCConfiguration) emf\n+                .getConfiguration()).getDBDictionaryInstance()\n+                .nextSequenceQuery != null;\n+        } catch (Throwable t) {\n+            supportsNativeSequence = false;\n+        }\n+\n+        if (supportsNativeSequence) {\n+            mttest(6, 8);\n+            switch ((int) (Math.random() * 7)) {\n+            case 0:\n+                createAndRemove();\n+                break;\n+            case 1:\n+                createManyPersonsInSeparateTransactions();\n+                break;\n+            case 2:\n+                createManyEmployeesInSeparateTransactions();\n+                break;\n+            case 3:\n+                createManyPersonsAndEmployeesInSeparateTransactions();\n+                break;\n+            case 4:\n+                createManyPersonsInSingleTransaction();\n+                break;\n+            case 5:\n+                createManyEmployeesInSingleTransaction();\n+                break;\n+            case 6:\n+                createManyPersonsAndEmployeesInSingleTransaction();\n+                break;\n+            }\n+        }\n+    }\n+\n+    private void createAndRemove() {\n+        int person_id;\n+        int employee_id;\n+\n+        EntityManager em = emf.createEntityManager();\n+\n+        EntityPerson person = new EntityPerson();\n+        person.setFirstName(\"Person_First_Name\");\n+        person.setLastName(\"Person_Last_Name\");\n+\n+        EntityEmployee employee = new EntityEmployee();\n+        employee.setFirstName(\"Employee_First_Name\");\n+        employee.setLastName(\"Employee_Last_Name\");\n+        employee.setSalary(NUMBER_ENTITIES);\n+\n+        em.getTransaction().begin();\n+        em.persist(person);\n+        em.persist(employee);\n+        em.getTransaction().commit();\n+\n+        em.refresh(person);\n+        em.refresh(employee);\n+        person_id = person.getId();\n+        employee_id = employee.getId();\n+\n+        person = em.find(EntityPerson.class, person_id);\n+        assertTrue(person != null);\n+        assertTrue(person.getId() == person_id);\n+        assertTrue(person.getFirstName().equals(\"Person_First_Name\"));\n+        assertTrue(person.getLastName().equals(\"Person_Last_Name\"));\n+\n+        employee = em.find(EntityEmployee.class, employee_id);\n+        assertTrue(employee != null);\n+        assertTrue(employee.getId() == employee_id);\n+        assertTrue(employee.getFirstName().equals(\"Employee_First_Name\"));\n+        assertTrue(employee.getLastName().equals(\"Employee_Last_Name\"));\n+        assertTrue(employee.getSalary() == NUMBER_ENTITIES);\n+\n+        em.getTransaction().begin();\n+        em.remove(person);\n+        em.remove(employee);\n+        em.getTransaction().commit();\n+\n+        em.clear();\n+        em.close();\n+    }\n+\n+    private void createManyPersonsInSeparateTransactions() {\n+        EntityManager em = emf.createEntityManager();\n+\n+        for (int ii = 0; ii < NUMBER_ENTITIES; ii++) {\n+            EntityPerson person = new EntityPerson();\n+            person.setFirstName(\"1_First_name_\" + ii);\n+            person.setLastName(\"1_Last_name_\" + ii);\n+\n+            em.getTransaction().begin();\n+            em.persist(person);\n+            em.getTransaction().commit();\n+        }\n+\n+        em.clear();\n+        em.close();\n+    }\n+\n+    private void createManyEmployeesInSeparateTransactions() {\n+        EntityManager em = emf.createEntityManager();\n+\n+        for (int ii = 0; ii < NUMBER_ENTITIES; ii++) {\n+            EntityEmployee employee = new EntityEmployee();\n+            employee.setFirstName(\"2_First_name_\" + ii);\n+            employee.setLastName(\"2_Last_name_\" + ii);\n+            employee.setSalary(ii);\n+\n+            em.getTransaction().begin();\n+            em.persist(employee);\n+            em.getTransaction().commit();\n+        }\n+\n+        em.clear();\n+        em.close();\n+    }\n+\n+    private void createManyPersonsAndEmployeesInSeparateTransactions() {\n+        EntityManager em = emf.createEntityManager();\n+\n+        for (int ii = 0; ii < NUMBER_ENTITIES; ii++) {\n+            EntityPerson person = new EntityPerson();\n+            person.setFirstName(\"3_First_name_\" + ii);\n+            person.setLastName(\"3_Last_name_\" + ii);\n+\n+            EntityEmployee employee = new EntityEmployee();\n+            employee.setFirstName(\"4_First_name_\" + ii);\n+            employee.setLastName(\"4_Last_name_\" + ii);\n+            employee.setSalary(ii);\n+\n+            em.getTransaction().begin();\n+            em.persist(person);\n+            em.persist(employee);\n+            em.getTransaction().commit();\n+        }\n+\n+        em.clear();\n+        em.close();\n+    }\n+\n+    private void createManyPersonsInSingleTransaction() {\n+        EntityManager em = emf.createEntityManager();\n+\n+        em.getTransaction().begin();\n+        for (int ii = 0; ii < NUMBER_ENTITIES; ii++) {\n+            EntityPerson person = new EntityPerson();\n+            person.setFirstName(\"5_First_name_\" + ii);\n+            person.setLastName(\"5_Last_name_\" + ii);\n+\n+            em.persist(person);\n+        }\n+        em.getTransaction().commit();\n+\n+        em.clear();\n+        em.close();\n+    }\n+\n+    private void createManyEmployeesInSingleTransaction() {\n+        EntityManager em = emf.createEntityManager();\n+\n+        em.getTransaction().begin();\n+        for (int ii = 0; ii < NUMBER_ENTITIES; ii++) {\n+            EntityEmployee employee = new EntityEmployee();\n+            employee.setFirstName(\"6_First_name_\" + ii);\n+            employee.setLastName(\"6_Last_name_\" + ii);\n+            employee.setSalary(ii);\n+\n+            em.persist(employee);\n+        }\n+        em.getTransaction().commit();\n+\n+        em.clear();\n+        em.close();\n+    }\n+\n+    private void createManyPersonsAndEmployeesInSingleTransaction() {\n+        EntityManager em = emf.createEntityManager();\n+\n+        em.getTransaction().begin();\n+        for (int ii = 0; ii < NUMBER_ENTITIES; ii++) {\n+            EntityPerson person = new EntityPerson();\n+            person.setFirstName(\"7_First_name_\" + ii);\n+            person.setLastName(\"7_Last_name_\" + ii);\n+\n+            EntityEmployee employee = new EntityEmployee();\n+            employee.setFirstName(\"8_First_name_\" + ii);\n+            employee.setLastName(\"8_Last_name_\" + ii);\n+            employee.setSalary(ii);\n+\n+            em.persist(person);\n+            em.persist(employee);\n+        }\n+        em.getTransaction().commit();\n+\n+        em.clear();\n+        em.close();\n+    }\n+\n+    /**\n+     * Re-execute the invoking method a random number of times in a random\n+     * number of Threads.\n+     */\n+    public void mttest() throws ThreadingException {\n+        // 6 iterations in 8 threads is a good trade-off between\n+        // tests taking way too long and having a decent chance of\n+        // identifying MT problems.\n+        int iterations = 6;\n+        int threads = 8;\n+\n+        mttest(threads, iterations);\n+    }\n+\n+    /**\n+     * Execute the calling method <code>iterations</code> times in\n+     * <code>threads</code> Threads.\n+     */\n+    public void mttest(int threads, int iterations) {\n+        mttest(0, threads, iterations);\n+    }\n+\n+    public void mttest(int serialCount, int threads, int iterations)\n+        throws ThreadingException {\n+        String methodName = callingMethod(\"mttest\");\n+        mttest(serialCount, threads, iterations, methodName, new Object[0]);\n+    }\n+\n+    /**\n+     * Execute a test method in multiple threads.\n+     * \n+     * @param threads\n+     *            the number of Threads to run in\n+     * @param iterations\n+     *            the number of times the method should be execute in a single\n+     *            Thread\n+     * @param method\n+     *            the name of the method to execute\n+     * @param args\n+     *            the arguments to pass to the method\n+     * @throws ThreadingException\n+     *             if an errors occur in any of the Threads. The actual\n+     *             exceptions will be embedded in the exception. Note that this\n+     *             means that assert() failures will be treated as errors rather\n+     *             than warnings.\n+     * @author Marc Prud'hommeaux\n+     */\n+    public void mttest(int threads, int iterations, final String method,\n+        final Object[] args) throws ThreadingException {\n+        mttest(0, threads, iterations, method, args);\n+    }\n+\n+    public void mttest(int serialCount, int threads, int iterations,\n+        final String method, final Object[] args) throws ThreadingException {\n+        if (multiThreadExecuting != null \n+            && multiThreadExecuting.equals(method)) {\n+            // we are currently executing in multi-threaded mode:\n+            // don't deadlock!\n+            return;\n+        }\n+\n+        multiThreadExecuting = method;\n+\n+        try {\n+            Class<?>[] paramClasses = new Class[args.length];\n+            for (int i = 0; i < paramClasses.length; i++)\n+                paramClasses[i] = args[i].getClass();\n+\n+            final Method meth;\n+\n+            try {\n+                meth = getClass().getMethod(method, paramClasses);\n+            } catch (NoSuchMethodException nsme) {\n+                throw new ThreadingException(nsme.toString(), nsme);\n+            }\n+\n+            final Object thiz = this;\n+\n+            mttest(\"reflection invocation: (\" + method + \")\", serialCount,\n+                threads, iterations, new VolatileRunnable() {\n+                    public void run() throws Exception {\n+                        meth.invoke(thiz, args);\n+                    }\n+                });\n+        } finally {\n+            multiThreadExecuting = null;\n+        }\n+    }\n+\n+    public void mttest(String title, final int threads, final int iterations,\n+        final VolatileRunnable runner) throws ThreadingException {\n+        mttest(title, 0, threads, iterations, runner);\n+    }\n+\n+    /**\n+     * Execute a test method in multiple threads.\n+     * \n+     * @param title\n+     *            a description of the test, for inclusion in the error message\n+     * @param serialCount\n+     *            the number of times to run the method serially before spawning\n+     *            threads.\n+     * @param threads\n+     *            the number of Threads to run in\n+     * @param iterations\n+     *            the number of times the method should\n+     * @param runner\n+     *            the VolatileRunnable that will execute the actual test from\n+     *            within the Thread.\n+     * @throws ThreadingException\n+     *             if an errors occur in any of the Threads. The actual\n+     *             exceptions will be embedded in the exception. Note that this\n+     *             means that assert() failures will be treated as errors rather\n+     *             than warnings.\n+     * @author Marc Prud'hommeaux\n+     */\n+    public void mttest(String title, final int serialCount, final int threads,\n+        final int iterations, final VolatileRunnable runner)\n+        throws ThreadingException {\n+        final List exceptions = Collections.synchronizedList(new LinkedList());\n+\n+        Thread[] runners = new Thread[threads];\n+\n+        final long startMillis = System.currentTimeMillis() + 1000;\n+\n+        for (int i = 1; i <= threads; i++) {\n+            final int thisThread = i;\n+\n+            runners[i - 1] = new Thread(title + \" [\" + i + \" of \" + threads\n+                + \"]\") {\n+                public void run() {\n+                    // do our best to have all threads start at the exact\n+                    // same time. This is imperfect, but the closer we\n+                    // get to everyone starting at the same time, the\n+                    // better chance we have for identifying MT problems.\n+                    while (System.currentTimeMillis() < startMillis)\n+                        yield();\n+\n+                    int thisIteration = 1;\n+                    try {\n+                        for (; thisIteration <= iterations; thisIteration++) {\n+                            // go go go!\n+                            runner.run();\n+                        }\n+                    } catch (Throwable error) {\n+                        synchronized (exceptions) {\n+                            // embed the exception into something that gives\n+                            // us some more information about the threading\n+                            // environment\n+                            exceptions.add(new ThreadingException(\"thread=\"\n+                                + this.toString() + \";threadNum=\" + thisThread\n+                                + \";maxThreads=\" + threads + \";iteration=\"\n+                                + thisIteration + \";maxIterations=\"\n+                                + iterations, error));\n+                        }\n+                    }\n+                }\n+            };\n+        }\n+\n+        // start the serial tests(does not spawn the threads)\n+        for (int i = 0; i < serialCount; i++) {\n+            runners[0].run();\n+        }\n+\n+        // start the multithreaded\n+        for (int i = 0; i < threads; i++) {\n+            runners[i].start();\n+        }\n+\n+        // wait for them all to complete\n+        for (int i = 0; i < threads; i++) {\n+            try {\n+                runners[i].join();\n+            } catch (InterruptedException e) {\n+            }\n+        }\n+\n+        if (exceptions.size() == 0)\n+            return; // sweeeeeeeet: no errors\n+\n+        // embed all the exceptions that were throws into a\n+        // ThreadingException\n+        Throwable[] errors = (Throwable[]) exceptions.toArray(new Throwable[0]);\n+        throw new ThreadingException(\"The \" + errors.length\n+            + \" embedded errors \" + \"occured in the execution of \" + iterations\n+            + \" iterations \" + \"of \" + threads + \" threads: [\" + title + \"]\",\n+            errors);\n+    }\n+\n+    /**\n+     * Check to see if we are in the top-level execution stack.\n+     */\n+    public boolean isRootThread() {\n+        return multiThreadExecuting == null;\n+    }\n+\n+    /**\n+     * A Runnable that can throw an Exception: used to test cases.\n+     */\n+    public static interface VolatileRunnable {\n+\n+        public void run() throws Exception;\n+    }\n+\n+    /**\n+     * Exception for errors caught during threading tests.\n+     */\n+    public class ThreadingException extends RuntimeException {\n+\n+        private static final long serialVersionUID = -1911769845552507956L;\n+        private final Throwable[] _nested;\n+\n+        public ThreadingException(String msg, Throwable nested) {\n+            super(msg);\n+            if (nested == null)\n+                _nested = new Throwable[0];\n+            else\n+                _nested = new Throwable[] { nested };\n+        }\n+\n+        public ThreadingException(String msg, Throwable[] nested) {\n+            super(msg);\n+            if (nested == null)\n+                _nested = new Throwable[0];\n+            else\n+                _nested = nested;\n+        }\n+\n+        public void printStackTrace() {\n+            printStackTrace(System.out);\n+        }\n+\n+        public void printStackTrace(PrintStream out) {\n+            printStackTrace(new PrintWriter(out));\n+        }\n+\n+        public void printStackTrace(PrintWriter out) {\n+            super.printStackTrace(out);\n+            for (int i = 0; i < _nested.length; i++) {\n+                out.print(\"Nested Throwable #\" + (i + 1) + \": \");\n+                _nested[i].printStackTrace(out);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Return the last method name that called this one by parsing the current\n+     * stack trace.\n+     * \n+     * @param exclude\n+     *            a method name to skip\n+     * @throws IllegalStateException\n+     *             If the calling method could not be identified.\n+     * @author Marc Prud'hommeaux\n+     */\n+    public String callingMethod(String exclude) {\n+        // determine the currently executing method by\n+        // looking at the stack track. Hackish, but convenient.\n+        StringWriter sw = new StringWriter();\n+        new Exception().printStackTrace(new PrintWriter(sw));\n+        for (StringTokenizer stackTrace = new StringTokenizer(sw.toString(),\n+            System.getProperty(\"line.separator\"))\n+            ; stackTrace.hasMoreTokens() ; ) {\n+            String line = stackTrace.nextToken().trim();\n+\n+            // not a stack trace element\n+            if (!(line.startsWith(\"at \")))\n+                continue;\n+\n+            String fullMethodName = line.substring(0, line.indexOf(\"(\"));\n+\n+            String shortMethodName = fullMethodName.substring(fullMethodName\n+                .lastIndexOf(\".\") + 1);\n+\n+            // skip our own methods!\n+            if (shortMethodName.equals(\"callingMethod\"))\n+                continue;\n+            if (exclude != null && shortMethodName.equals(exclude))\n+                continue;\n+\n+            return shortMethodName;\n+        }\n+\n+        throw new IllegalStateException(\"Could not identify calling \"\n+            + \"method in stack trace\");\n+    }\n+}"},{"sha":"425d4fa19d3df7d677652579e32dcf9336b12886","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/NamedEntity.java","status":"modified","additions":49,"deletions":49,"changes":98,"blob_url":"https://github.com/apache/openjpa/blob/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/NamedEntity.java","raw_url":"https://github.com/apache/openjpa/raw/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/NamedEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/NamedEntity.java?ref=cd4c8839f87f750e2655a5b98f552e2ba4031a67","patch":"@@ -1,49 +1,49 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.simple;\r\n-\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.GeneratedValue;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.Version;\r\n-\r\n-@Entity(name=\"named\")\r\n-public class NamedEntity {\r\n-\r\n-    @Id\r\n-    @GeneratedValue\r\n-    private long id;\r\n-\r\n-    private String name;\r\n-\r\n-    @Version\r\n-    private Integer optLock;\r\n-\r\n-    public long getId() { \r\n-        return id; \r\n-    }\r\n-\r\n-    public String getName() { \r\n-        return name; \r\n-    }\r\n-\r\n-    public void setName(String name) { \r\n-        this.name = name; \r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.simple;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.Version;\n+\n+@Entity(name=\"named\")\n+public class NamedEntity {\n+\n+    @Id\n+    @GeneratedValue\n+    private long id;\n+\n+    private String name;\n+\n+    @Version\n+    private Integer optLock;\n+\n+    public long getId() { \n+        return id; \n+    }\n+\n+    public String getName() { \n+        return name; \n+    }\n+\n+    public void setName(String name) { \n+        this.name = name; \n+    }\n+}"},{"sha":"3c44eb6be10df5e254df5973dc824630640bca43","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestBasicAnnotation.java","status":"modified","additions":92,"deletions":92,"changes":184,"blob_url":"https://github.com/apache/openjpa/blob/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestBasicAnnotation.java","raw_url":"https://github.com/apache/openjpa/raw/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestBasicAnnotation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestBasicAnnotation.java?ref=cd4c8839f87f750e2655a5b98f552e2ba4031a67","patch":"@@ -1,92 +1,92 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.simple;\r\n-\r\n-import java.math.BigDecimal;\r\n-import java.util.Calendar;\r\n-import java.util.Date;\r\n-\r\n-import javax.persistence.EntityManager;\r\n-\r\n-import junit.textui.TestRunner;\r\n-import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n-\r\n-/**\r\n- * Simple test case to test the default values associated with the @Basic \r\n- * annotation.\r\n- *\r\n- * @author Kevin Sutter\r\n- */\r\n-public class TestBasicAnnotation\r\n-    extends SingleEMFTestCase {\r\n-\r\n-    public void setUp() {\r\n-        setUp(CLEAR_TABLES, AllFieldTypes.class);\r\n-    }\r\n-\r\n-    public void testEagerFetchType() {\r\n-        EntityManager em = emf.createEntityManager();\r\n-        em.getTransaction().begin();\r\n-        AllFieldTypes aft = new AllFieldTypes();\r\n-        \r\n-        // Initialize a sampling of the types\r\n-        aft.setBigDecimalField(new BigDecimal(1));\r\n-        aft.setBooleanField(false);\r\n-        aft.setByteLob(new byte[1]);\r\n-        aft.setCalendarField(Calendar.getInstance());\r\n-        aft.setDateField(new Date());\r\n-        aft.setEnumField(AllFieldTypes.EnumType.Value1);\r\n-        aft.setSerializableField(new Date());\r\n-        aft.setSqlTimestampField(new java.sql.Timestamp(\r\n-                System.currentTimeMillis()));\r\n-        aft.setStringField(\"aft\");\r\n-        aft.setWByteLob(new Byte[1]);\r\n-        aft.setWDoubleField(new Double(1));\r\n-        \r\n-        em.persist(aft);\r\n-        em.getTransaction().commit();\r\n-        em.clear();\r\n-        \r\n-        AllFieldTypes aftQuery = (AllFieldTypes)em.createQuery\r\n-            (\"select x from AllFieldTypes x where x.stringField = 'aft'\").\r\n-            getSingleResult();\r\n-        em.clear();  // ensure detached\r\n-        assertFalse(em.contains(aftQuery));\r\n-        \r\n-        // assert that the sampling of fields are not null\r\n-        assertNotNull(aftQuery.getBigDecimalField());\r\n-        assertNotNull(aftQuery.getBooleanField());\r\n-        assertNotNull(aftQuery.getByteLob());\r\n-        assertNotNull(aftQuery.getCalendarField());\r\n-        assertNotNull(aftQuery.getDateField());\r\n-        assertNotNull(aftQuery.getEnumField());\r\n-        assertNotNull(aftQuery.getSerializableField());\r\n-        assertNotNull(aftQuery.getSqlTimestampField());\r\n-        assertNotNull(aftQuery.getStringField());\r\n-        assertNotNull(aftQuery.getWByteLob());\r\n-        assertNotNull(aftQuery.getWDoubleField());\r\n-        \r\n-        em.close();\r\n-    }\r\n-\r\n-    public static void main(String[] args) {\r\n-        TestRunner.run(TestBasicAnnotation.class);\r\n-    }\r\n-}\r\n-\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.simple;\n+\n+import java.math.BigDecimal;\n+import java.util.Calendar;\n+import java.util.Date;\n+\n+import javax.persistence.EntityManager;\n+\n+import junit.textui.TestRunner;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+/**\n+ * Simple test case to test the default values associated with the @Basic \n+ * annotation.\n+ *\n+ * @author Kevin Sutter\n+ */\n+public class TestBasicAnnotation\n+    extends SingleEMFTestCase {\n+\n+    public void setUp() {\n+        setUp(CLEAR_TABLES, AllFieldTypes.class);\n+    }\n+\n+    public void testEagerFetchType() {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        AllFieldTypes aft = new AllFieldTypes();\n+        \n+        // Initialize a sampling of the types\n+        aft.setBigDecimalField(new BigDecimal(1));\n+        aft.setBooleanField(false);\n+        aft.setByteLob(new byte[1]);\n+        aft.setCalendarField(Calendar.getInstance());\n+        aft.setDateField(new Date());\n+        aft.setEnumField(AllFieldTypes.EnumType.Value1);\n+        aft.setSerializableField(new Date());\n+        aft.setSqlTimestampField(new java.sql.Timestamp(\n+                System.currentTimeMillis()));\n+        aft.setStringField(\"aft\");\n+        aft.setWByteLob(new Byte[1]);\n+        aft.setWDoubleField(new Double(1));\n+        \n+        em.persist(aft);\n+        em.getTransaction().commit();\n+        em.clear();\n+        \n+        AllFieldTypes aftQuery = (AllFieldTypes)em.createQuery\n+            (\"select x from AllFieldTypes x where x.stringField = 'aft'\").\n+            getSingleResult();\n+        em.clear();  // ensure detached\n+        assertFalse(em.contains(aftQuery));\n+        \n+        // assert that the sampling of fields are not null\n+        assertNotNull(aftQuery.getBigDecimalField());\n+        assertNotNull(aftQuery.getBooleanField());\n+        assertNotNull(aftQuery.getByteLob());\n+        assertNotNull(aftQuery.getCalendarField());\n+        assertNotNull(aftQuery.getDateField());\n+        assertNotNull(aftQuery.getEnumField());\n+        assertNotNull(aftQuery.getSerializableField());\n+        assertNotNull(aftQuery.getSqlTimestampField());\n+        assertNotNull(aftQuery.getStringField());\n+        assertNotNull(aftQuery.getWByteLob());\n+        assertNotNull(aftQuery.getWDoubleField());\n+        \n+        em.close();\n+    }\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(TestBasicAnnotation.class);\n+    }\n+}\n+"},{"sha":"47ae8de872b02e53be7b030465c7f950c537b23a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestEntityManagerMerge.java","status":"modified","additions":115,"deletions":115,"changes":230,"blob_url":"https://github.com/apache/openjpa/blob/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestEntityManagerMerge.java","raw_url":"https://github.com/apache/openjpa/raw/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestEntityManagerMerge.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestEntityManagerMerge.java?ref=cd4c8839f87f750e2655a5b98f552e2ba4031a67","patch":"@@ -1,115 +1,115 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.simple;\r\n-\r\n-import javax.persistence.EntityManager;\r\n-\r\n-import junit.textui.TestRunner;\r\n-import org.apache.openjpa.persistence.test.SingleEMTestCase;\r\n-\r\n-/**\r\n- * Test case to ensure that the proper JPA merge semantics are processed.\r\n- *\r\n- * @author Kevin Sutter\r\n- */\r\n-public class TestEntityManagerMerge\r\n-    extends SingleEMTestCase {\r\n-\r\n-    public void setUp() {\r\n-        setUp(AllFieldTypes.class, Person.class);\r\n-    }\r\n-\r\n-    public void testMerge() {\r\n-        // Create EntityManager and Start a transaction (1)\r\n-        begin();\r\n-\r\n-        // Insert a new object into the PC\r\n-        AllFieldTypes testObject = new AllFieldTypes();\r\n-        testObject.setStringField(\"new test object\");\r\n-        persist(testObject);\r\n-        assertTrue(\"testObject not found in pc\", em.contains(testObject));\r\n-        \r\n-        // Modify this object...\r\n-        testObject.setStringField(\"updated test object\");\r\n-\r\n-        // Attempt to merge this updated object into the PC.  Should be ignored.\r\n-        AllFieldTypes mergedObject = em.merge(testObject);\r\n-        assertTrue(\"mergedObject and testObject are not equal\", \r\n-                mergedObject.equals(testObject));\r\n-        assertTrue(\"mergedObject and testObject are not ==\", \r\n-                mergedObject == testObject);\r\n-        assertTrue(\"testObject not found in pc\", em.contains(testObject));\r\n-        assertTrue(\"mergedObject not found in pc\", em.contains(mergedObject));\r\n-        \r\n-        // And, once again...\r\n-        testObject.setStringField(\"yet another update\");\r\n-        AllFieldTypes mergedObject2 = em.merge(testObject);\r\n-        assertTrue(\"mergedObject2 and testObject are not equal\", \r\n-                mergedObject2.equals(testObject));\r\n-        assertTrue(\"mergedObject2 and testObject are not ==\", \r\n-                mergedObject2 == testObject);\r\n-        assertTrue(\"testObject not found in pc\", em.contains(testObject));\r\n-        assertTrue(\"mergedObject2 not found in pc\", em.contains(mergedObject2));\r\n-        \r\n-        // Rollback\r\n-        rollback();\r\n-  \r\n-    }\r\n-    \r\n-    /**\r\n-     * This test verifies that persisting a new entity which matches an existing \r\n-     * row in the database succeeds. \r\n-     */\r\n-    public void testMergeExistingEntity() {\r\n-        Person p = new Person();\r\n-        p.setId(102);\r\n-\r\n-        EntityManager em = emf.createEntityManager();\r\n-\r\n-        em.getTransaction().begin();\r\n-        em.persist(p);\r\n-        em.getTransaction().commit();\r\n-        em.close();\r\n-\r\n-        em = emf.createEntityManager();\r\n-        p = new Person();\r\n-        p.setId(102);\r\n-        p.setForename(\"Jane\");\r\n-\r\n-        em.getTransaction().begin();\r\n-        em.merge(p);\r\n-        em.getTransaction().commit();\r\n-\r\n-        em.close();\r\n-\r\n-        em = emf.createEntityManager();\r\n-        p = (Person) em.createQuery(\"Select p from Person p where p.id = 102\")\r\n-                .getSingleResult();\r\n-\r\n-        assertNotNull(p);\r\n-        assertEquals(\"Jane\", p.getForename());\r\n-        \r\n-        em.close();\r\n-    }\r\n-    \r\n-    public static void main(String[] args) {\r\n-        TestRunner.run(TestEntityManagerMerge.class);\r\n-    }\r\n-}\r\n-\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.simple;\n+\n+import javax.persistence.EntityManager;\n+\n+import junit.textui.TestRunner;\n+import org.apache.openjpa.persistence.test.SingleEMTestCase;\n+\n+/**\n+ * Test case to ensure that the proper JPA merge semantics are processed.\n+ *\n+ * @author Kevin Sutter\n+ */\n+public class TestEntityManagerMerge\n+    extends SingleEMTestCase {\n+\n+    public void setUp() {\n+        setUp(AllFieldTypes.class, Person.class);\n+    }\n+\n+    public void testMerge() {\n+        // Create EntityManager and Start a transaction (1)\n+        begin();\n+\n+        // Insert a new object into the PC\n+        AllFieldTypes testObject = new AllFieldTypes();\n+        testObject.setStringField(\"new test object\");\n+        persist(testObject);\n+        assertTrue(\"testObject not found in pc\", em.contains(testObject));\n+        \n+        // Modify this object...\n+        testObject.setStringField(\"updated test object\");\n+\n+        // Attempt to merge this updated object into the PC.  Should be ignored.\n+        AllFieldTypes mergedObject = em.merge(testObject);\n+        assertTrue(\"mergedObject and testObject are not equal\", \n+                mergedObject.equals(testObject));\n+        assertTrue(\"mergedObject and testObject are not ==\", \n+                mergedObject == testObject);\n+        assertTrue(\"testObject not found in pc\", em.contains(testObject));\n+        assertTrue(\"mergedObject not found in pc\", em.contains(mergedObject));\n+        \n+        // And, once again...\n+        testObject.setStringField(\"yet another update\");\n+        AllFieldTypes mergedObject2 = em.merge(testObject);\n+        assertTrue(\"mergedObject2 and testObject are not equal\", \n+                mergedObject2.equals(testObject));\n+        assertTrue(\"mergedObject2 and testObject are not ==\", \n+                mergedObject2 == testObject);\n+        assertTrue(\"testObject not found in pc\", em.contains(testObject));\n+        assertTrue(\"mergedObject2 not found in pc\", em.contains(mergedObject2));\n+        \n+        // Rollback\n+        rollback();\n+  \n+    }\n+    \n+    /**\n+     * This test verifies that persisting a new entity which matches an existing \n+     * row in the database succeeds. \n+     */\n+    public void testMergeExistingEntity() {\n+        Person p = new Person();\n+        p.setId(102);\n+\n+        EntityManager em = emf.createEntityManager();\n+\n+        em.getTransaction().begin();\n+        em.persist(p);\n+        em.getTransaction().commit();\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        p = new Person();\n+        p.setId(102);\n+        p.setForename(\"Jane\");\n+\n+        em.getTransaction().begin();\n+        em.merge(p);\n+        em.getTransaction().commit();\n+\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        p = (Person) em.createQuery(\"Select p from Person p where p.id = 102\")\n+                .getSingleResult();\n+\n+        assertNotNull(p);\n+        assertEquals(\"Jane\", p.getForename());\n+        \n+        em.close();\n+    }\n+    \n+    public static void main(String[] args) {\n+        TestRunner.run(TestEntityManagerMerge.class);\n+    }\n+}\n+"},{"sha":"b9a124711d955798ece423695b84685a9c0c1259","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestPersistence.java","status":"modified","additions":94,"deletions":94,"changes":188,"blob_url":"https://github.com/apache/openjpa/blob/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestPersistence.java","raw_url":"https://github.com/apache/openjpa/raw/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestPersistence.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestPersistence.java?ref=cd4c8839f87f750e2655a5b98f552e2ba4031a67","patch":"@@ -1,94 +1,94 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.simple;\r\n-\r\n-import javax.persistence.EntityManager;\r\n-import javax.persistence.EntityTransaction;\r\n-\r\n-import junit.textui.TestRunner;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n-\r\n-/**\r\n- * Simple test case to get an EntityManager and perform some basic operations.\r\n- *\r\n- * @author Marc Prud'hommeaux\r\n- */\r\n-public class TestPersistence\r\n-    extends SingleEMFTestCase {\r\n-\r\n-    public void setUp() {\r\n-        setUp(AllFieldTypes.class);\r\n-    }\r\n-\r\n-    public void testCreateEntityManager() {\r\n-        EntityManager em = emf.createEntityManager();\r\n-\r\n-        EntityTransaction t = em.getTransaction();\r\n-        assertNotNull(t);\r\n-        t.begin();\r\n-        t.setRollbackOnly();\r\n-        t.rollback();\r\n-\r\n-        // openjpa-facade test\r\n-        assertTrue(em instanceof OpenJPAEntityManager);\r\n-        OpenJPAEntityManager ojem = (OpenJPAEntityManager) em;\r\n-        ojem.getFetchPlan().setMaxFetchDepth(1);\r\n-        assertEquals(1, ojem.getFetchPlan().getMaxFetchDepth());\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void testPersist() {\r\n-        EntityManager em = emf.createEntityManager();\r\n-        em.getTransaction().begin();\r\n-        em.persist(new AllFieldTypes());\r\n-        em.getTransaction().commit();\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void testQuery() {\r\n-        EntityManager em = emf.createEntityManager();\r\n-        em.getTransaction().begin();\r\n-        AllFieldTypes aft = new AllFieldTypes();\r\n-        aft.setStringField(\"foo\");\r\n-        aft.setIntField(10);\r\n-        em.persist(aft);\r\n-        em.getTransaction().commit();\r\n-        em.close();\r\n-\r\n-        em = emf.createEntityManager();\r\n-        em.getTransaction().begin();\r\n-        assertEquals(1, em.createQuery\r\n-            (\"select x from AllFieldTypes x where x.stringField = 'foo'\").\r\n-            getResultList().size());\r\n-        assertEquals(0, em.createQuery\r\n-            (\"select x from AllFieldTypes x where x.stringField = 'bar'\").\r\n-            getResultList().size());\r\n-        assertEquals(1, em.createQuery\r\n-            (\"select x from AllFieldTypes x where x.intField >= 10\").\r\n-            getResultList().size());\r\n-        em.getTransaction().rollback();\r\n-        em.close();\r\n-    }\r\n-\r\n-    public static void main(String[] args) {\r\n-        TestRunner.run(TestPersistence.class);\r\n-    }\r\n-}\r\n-\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.simple;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityTransaction;\n+\n+import junit.textui.TestRunner;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+/**\n+ * Simple test case to get an EntityManager and perform some basic operations.\n+ *\n+ * @author Marc Prud'hommeaux\n+ */\n+public class TestPersistence\n+    extends SingleEMFTestCase {\n+\n+    public void setUp() {\n+        setUp(AllFieldTypes.class);\n+    }\n+\n+    public void testCreateEntityManager() {\n+        EntityManager em = emf.createEntityManager();\n+\n+        EntityTransaction t = em.getTransaction();\n+        assertNotNull(t);\n+        t.begin();\n+        t.setRollbackOnly();\n+        t.rollback();\n+\n+        // openjpa-facade test\n+        assertTrue(em instanceof OpenJPAEntityManager);\n+        OpenJPAEntityManager ojem = (OpenJPAEntityManager) em;\n+        ojem.getFetchPlan().setMaxFetchDepth(1);\n+        assertEquals(1, ojem.getFetchPlan().getMaxFetchDepth());\n+        em.close();\n+    }\n+\n+    public void testPersist() {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.persist(new AllFieldTypes());\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+\n+    public void testQuery() {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        AllFieldTypes aft = new AllFieldTypes();\n+        aft.setStringField(\"foo\");\n+        aft.setIntField(10);\n+        em.persist(aft);\n+        em.getTransaction().commit();\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        assertEquals(1, em.createQuery\n+            (\"select x from AllFieldTypes x where x.stringField = 'foo'\").\n+            getResultList().size());\n+        assertEquals(0, em.createQuery\n+            (\"select x from AllFieldTypes x where x.stringField = 'bar'\").\n+            getResultList().size());\n+        assertEquals(1, em.createQuery\n+            (\"select x from AllFieldTypes x where x.intField >= 10\").\n+            getResultList().size());\n+        em.getTransaction().rollback();\n+        em.close();\n+    }\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(TestPersistence.class);\n+    }\n+}\n+"},{"sha":"1e462decf4b8328841d671a26c2ffbd81eb1d4f8","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/PersistenceTestCase.java","status":"modified","additions":11,"deletions":2,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/PersistenceTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/PersistenceTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/PersistenceTestCase.java?ref=cd4c8839f87f750e2655a5b98f552e2ba4031a67","patch":"@@ -20,21 +20,25 @@\n \n import java.lang.reflect.Modifier;\n import java.util.ArrayList;\n+import java.util.HashMap;\n import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n-import java.util.HashMap;\n+\n import javax.persistence.EntityManager;\n import javax.persistence.EntityManagerFactory;\n import javax.persistence.Persistence;\n \n import junit.framework.TestCase;\n import junit.framework.TestResult;\n+\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\n import org.apache.openjpa.kernel.AbstractBrokerFactory;\n import org.apache.openjpa.kernel.Broker;\n import org.apache.openjpa.meta.ClassMetaData;\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n import org.apache.openjpa.persistence.JPAFacadeHelper;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n \n /**\n  * Base test class providing persistence utilities.\n@@ -195,4 +199,9 @@ protected String entityName(EntityManagerFactory emf, Class c) {\n         ClassMetaData meta = JPAFacadeHelper.getMetaData(emf, c);\n         return (meta == null) ? null : meta.getTypeAlias();\n     }\n+    \n+    protected DBDictionary getDBDictionary(OpenJPAEntityManagerFactorySPI emf) {\n+        return ((JDBCConfiguration) emf.getConfiguration())\n+            .getDBDictionaryInstance();\n+    }\n }"},{"sha":"fbab1f5518f9c50539d9dc3c30014d4221c74a36","filename":"openjpa-persistence-jdbc/src/test/resources/META-INF/listener-orm.xml","status":"modified","additions":39,"deletions":36,"changes":75,"blob_url":"https://github.com/apache/openjpa/blob/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence-jdbc/src/test/resources/META-INF/listener-orm.xml","raw_url":"https://github.com/apache/openjpa/raw/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence-jdbc/src/test/resources/META-INF/listener-orm.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/META-INF/listener-orm.xml?ref=cd4c8839f87f750e2655a5b98f552e2ba4031a67","patch":"@@ -1,37 +1,40 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n-<!--\r\n- Licensed to the Apache Software Foundation (ASF) under one\r\n- or more contributor license agreements.  See the NOTICE file\r\n- distributed with this work for additional information\r\n- regarding copyright ownership.  The ASF licenses this file\r\n- to you under the Apache License, Version 2.0 (the\r\n- \"License\"); you may not use this file except in compliance\r\n- with the License.  You may obtain a copy of the License at\r\n-\r\n- http://www.apache.org/licenses/LICENSE-2.0\r\n-\r\n- Unless required by applicable law or agreed to in writing,\r\n- software distributed under the License is distributed on an\r\n- \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- KIND, either express or implied.  See the License for the\r\n- specific language governing permissions and limitations\r\n- under the License.\r\n--->\r\n-<entity-mappings xmlns=\"http://java.sun.com/xml/ns/persistence/orm\"\r\n-    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n-    xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence/orm orm_1_0.xsd\"\r\n-    version=\"1.0\">\r\n-    <persistence-unit-metadata>\r\n-        <persistence-unit-defaults>\r\n-            <entity-listeners>\r\n-                <entity-listener class=\r\n-                \t\"org.apache.openjpa.persistence.callbacks.ListenerImpl\">\r\n-                </entity-listener>\r\n-            </entity-listeners>\r\n-        </persistence-unit-defaults>\r\n-    </persistence-unit-metadata>\r\n-    <package>org.apache.openjpa.persistence.callbacks</package>\r\n-    <entity class=\"EntityListenerEntity\">\r\n-        <exclude-default-listeners/>\r\n-    </entity>\r\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+\n+ http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.\n+-->\n+<entity-mappings xmlns=\"http://java.sun.com/xml/ns/persistence/orm\"\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence/orm orm_1_0.xsd\"\n+    version=\"1.0\">\n+    <persistence-unit-metadata>\n+        <persistence-unit-defaults>\n+            <entity-listeners>\n+                <entity-listener class=\n+                \t\"org.apache.openjpa.persistence.callbacks.ListenerImpl\">\n+                </entity-listener>\n+            </entity-listeners>\n+        </persistence-unit-defaults>\n+    </persistence-unit-metadata>\n+    <package>org.apache.openjpa.persistence.callbacks</package>\n+    <entity class=\"EntityListenerEntity\">\n+        <exclude-default-listeners/>\n+    </entity>\n+    <entity class=\"Message\">\n+        <exclude-default-listeners/>\n+    </entity>\n </entity-mappings>\n\\ No newline at end of file"},{"sha":"f0b185d22be4ebf3632c9143b4aacfbff220dba0","filename":"openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml?ref=cd4c8839f87f750e2655a5b98f552e2ba4031a67","patch":"@@ -68,6 +68,7 @@\n         <mapping-file>META-INF/listener-orm.xml</mapping-file>\n         <class>org.apache.openjpa.persistence.callbacks.EntityListenerEntity</class>\n         <class>org.apache.openjpa.persistence.callbacks.GlobalListenerEntity</class>\n+        <class>org.apache.openjpa.persistence.callbacks.Message</class>\n         <properties>\n             <property name=\"openjpa.jdbc.SynchronizeMappings\"\n                   value=\"buildSchema(ForeignKeys=true)\"/>"},{"sha":"1dd85ca180aa7cf85ef75d5e8580a8657e5db4dc","filename":"openjpa-persistence/pom.xml","status":"modified","additions":1,"deletions":13,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/pom.xml?ref=cd4c8839f87f750e2655a5b98f552e2ba4031a67","patch":"@@ -31,7 +31,7 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-parent</artifactId>\n-        <version>1.0.3</version>\n+        <version>1.0.4</version>\n     </parent>\n     <dependencies>\n         <dependency>\n@@ -47,16 +47,4 @@\n             <scope>compile</scope>\n         </dependency>\n     </dependencies>\n-    <build>\n-        <plugins>\n-            <plugin>\n-                <groupId>org.apache.maven.plugins</groupId>\n-                <artifactId>maven-compiler-plugin</artifactId>\n-                <configuration>\n-                    <source>1.5</source>\n-                    <target>1.5</target>\n-                </configuration>\n-            </plugin>\n-        </plugins>\n-    </build>\n </project>"},{"sha":"e7e832e17cfa662bf77b01f8f4ea1c2ac9c5e84c","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java?ref=cd4c8839f87f750e2655a5b98f552e2ba4031a67","patch":"@@ -481,7 +481,10 @@ private ClassMetaData parseClassAnnotations() {\n             return null;\n \n         Entity entity = (Entity) _cls.getAnnotation(Entity.class);\n+        MappedSuperclass mapped = (MappedSuperclass)\n+        \t_cls.getAnnotation(MappedSuperclass.class);\n         if (isMetaDataMode()) {\n+        \tmeta.setAbstract(mapped != null);\n             // while the spec only provides for embedded exclusive, it doesn't\n             // seem hard to support otherwise\n             if (entity == null)\n@@ -748,6 +751,8 @@ else if (cache.enabled())\n                 org.apache.openjpa.datacache.DataCache.NAME_DEFAULT);\n         else\n             meta.setDataCacheName(null);\n+        \n+        meta.setIsCacheable(cache.enabled(), true);\n     }\n \n     /**"},{"sha":"e402a73631126dcf751d15120422e2cff4a7b26b","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AutoClearType.java","status":"modified","additions":56,"deletions":56,"changes":112,"blob_url":"https://github.com/apache/openjpa/blob/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AutoClearType.java","raw_url":"https://github.com/apache/openjpa/raw/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AutoClearType.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AutoClearType.java?ref=cd4c8839f87f750e2655a5b98f552e2ba4031a67","patch":"@@ -1,56 +1,56 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence;\r\n-\r\n-import org.apache.openjpa.kernel.AutoClear;\r\n-\r\n-/**\r\n- * The possible settings for the auto-clear behavior of an\r\n- * {@link OpenJPAEntityManager}.\r\n- *\r\n- * @since 1.0.0\r\n- * @published\r\n- */\r\n-public enum AutoClearType {\r\n-    DATASTORE(AutoClear.CLEAR_DATASTORE),\r\n-    ALL(AutoClear.CLEAR_ALL);\r\n-\r\n-    private final int autoClearConstant;\r\n-\r\n-    private AutoClearType(int value) {\r\n-        autoClearConstant = value;\r\n-    }\r\n-\r\n-    int toKernelConstant() {\r\n-        return autoClearConstant;\r\n-    }\r\n-\r\n-    static AutoClearType fromKernelConstant(int kernelConstant) {\r\n-        switch (kernelConstant) {\r\n-            case AutoClear.CLEAR_DATASTORE:\r\n-                return DATASTORE;\r\n-\r\n-            case AutoClear.CLEAR_ALL:\r\n-                return ALL;\r\n-\r\n-            default:\r\n-                throw new IllegalArgumentException(kernelConstant + \"\");\r\n-        }\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence;\n+\n+import org.apache.openjpa.kernel.AutoClear;\n+\n+/**\n+ * The possible settings for the auto-clear behavior of an\n+ * {@link OpenJPAEntityManager}.\n+ *\n+ * @since 1.0.0\n+ * @published\n+ */\n+public enum AutoClearType {\n+    DATASTORE(AutoClear.CLEAR_DATASTORE),\n+    ALL(AutoClear.CLEAR_ALL);\n+\n+    private final int autoClearConstant;\n+\n+    private AutoClearType(int value) {\n+        autoClearConstant = value;\n+    }\n+\n+    int toKernelConstant() {\n+        return autoClearConstant;\n+    }\n+\n+    static AutoClearType fromKernelConstant(int kernelConstant) {\n+        switch (kernelConstant) {\n+            case AutoClear.CLEAR_DATASTORE:\n+                return DATASTORE;\n+\n+            case AutoClear.CLEAR_ALL:\n+                return ALL;\n+\n+            default:\n+                throw new IllegalArgumentException(kernelConstant + \"\");\n+        }\n+    }\n+}"},{"sha":"88aa1adcf1d24afc34fc761c134f6833cb64513a","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AutoDetachType.java","status":"modified","additions":63,"deletions":63,"changes":126,"blob_url":"https://github.com/apache/openjpa/blob/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AutoDetachType.java","raw_url":"https://github.com/apache/openjpa/raw/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AutoDetachType.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AutoDetachType.java?ref=cd4c8839f87f750e2655a5b98f552e2ba4031a67","patch":"@@ -1,63 +1,63 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence;\r\n-\r\n-import java.util.EnumSet;\r\n-\r\n-import org.apache.openjpa.kernel.AutoDetach;\r\n-\r\n-/**\r\n- * The possible settings for the auto-detach behavior of an\r\n- * {@link OpenJPAEntityManager}.\r\n- *\r\n- * @since 1.0.0\r\n- * @published\r\n- */\r\n-public enum AutoDetachType {\r\n-    CLOSE(AutoDetach.DETACH_CLOSE),\r\n-    COMMIT(AutoDetach.DETACH_COMMIT),\r\n-    NON_TRANSACTIONAL_READ(AutoDetach.DETACH_NONTXREAD),\r\n-    ROLLBACK(AutoDetach.DETACH_ROLLBACK);\r\n-\r\n-    private final int autoDetachConstant;\r\n-\r\n-    private AutoDetachType(int value) {\r\n-        autoDetachConstant = value;\r\n-    }\r\n-\r\n-    public static EnumSet<AutoDetachType> toEnumSet(int autoDetach) {\r\n-        EnumSet<AutoDetachType> types = EnumSet.noneOf(AutoDetachType.class);\r\n-        if ((autoDetach & AutoDetach.DETACH_CLOSE) != 0)\r\n-            types.add(CLOSE);\r\n-        if ((autoDetach & AutoDetach.DETACH_COMMIT) != 0)\r\n-            types.add(COMMIT);\r\n-        if ((autoDetach & AutoDetach.DETACH_NONTXREAD) != 0)\r\n-            types.add(NON_TRANSACTIONAL_READ);\r\n-        if ((autoDetach & AutoDetach.DETACH_ROLLBACK) != 0)\r\n-            types.add(ROLLBACK);\r\n-        return types;\r\n-    }\r\n-\r\n-    public static int fromEnumSet(EnumSet<AutoDetachType> types) {\r\n-        int autoDetach = 0;\r\n-        for (AutoDetachType type : types)\r\n-            autoDetach |= type.autoDetachConstant;\r\n-        return autoDetach;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence;\n+\n+import java.util.EnumSet;\n+\n+import org.apache.openjpa.kernel.AutoDetach;\n+\n+/**\n+ * The possible settings for the auto-detach behavior of an\n+ * {@link OpenJPAEntityManager}.\n+ *\n+ * @since 1.0.0\n+ * @published\n+ */\n+public enum AutoDetachType {\n+    CLOSE(AutoDetach.DETACH_CLOSE),\n+    COMMIT(AutoDetach.DETACH_COMMIT),\n+    NON_TRANSACTIONAL_READ(AutoDetach.DETACH_NONTXREAD),\n+    ROLLBACK(AutoDetach.DETACH_ROLLBACK);\n+\n+    private final int autoDetachConstant;\n+\n+    private AutoDetachType(int value) {\n+        autoDetachConstant = value;\n+    }\n+\n+    public static EnumSet<AutoDetachType> toEnumSet(int autoDetach) {\n+        EnumSet<AutoDetachType> types = EnumSet.noneOf(AutoDetachType.class);\n+        if ((autoDetach & AutoDetach.DETACH_CLOSE) != 0)\n+            types.add(CLOSE);\n+        if ((autoDetach & AutoDetach.DETACH_COMMIT) != 0)\n+            types.add(COMMIT);\n+        if ((autoDetach & AutoDetach.DETACH_NONTXREAD) != 0)\n+            types.add(NON_TRANSACTIONAL_READ);\n+        if ((autoDetach & AutoDetach.DETACH_ROLLBACK) != 0)\n+            types.add(ROLLBACK);\n+        return types;\n+    }\n+\n+    public static int fromEnumSet(EnumSet<AutoDetachType> types) {\n+        int autoDetach = 0;\n+        for (AutoDetachType type : types)\n+            autoDetach |= type.autoDetachConstant;\n+        return autoDetach;\n+    }\n+}"},{"sha":"02fe56f5f92a672db799f2222dd188cfbd1d18dd","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/CallbackMode.java","status":"modified","additions":66,"deletions":66,"changes":132,"blob_url":"https://github.com/apache/openjpa/blob/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/CallbackMode.java","raw_url":"https://github.com/apache/openjpa/raw/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/CallbackMode.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/CallbackMode.java?ref=cd4c8839f87f750e2655a5b98f552e2ba4031a67","patch":"@@ -1,66 +1,66 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence;\r\n-\r\n-import java.util.EnumSet;\r\n-\r\n-import org.apache.openjpa.event.CallbackModes;\r\n-\r\n-/**\r\n- * The possible settings for the callback behavior of an\r\n- * {@link OpenJPAEntityManager}.\r\n- *\r\n- * @since 1.0.0\r\n- * @published\r\n- */\r\n-public enum CallbackMode {\r\n-    FAIL_FAST(CallbackModes.CALLBACK_FAIL_FAST),\r\n-    IGNORE(CallbackModes.CALLBACK_IGNORE),\r\n-    LOG(CallbackModes.CALLBACK_LOG),\r\n-    RETHROW(CallbackModes.CALLBACK_RETHROW),\r\n-    ROLLBACK(CallbackModes.CALLBACK_ROLLBACK);\r\n-\r\n-    private final int callbackMode;\r\n-\r\n-    private CallbackMode(int value) {\r\n-        callbackMode = value;\r\n-    }\r\n-\r\n-    static EnumSet<CallbackMode> toEnumSet(int callback) {\r\n-        EnumSet<CallbackMode> modes = EnumSet.noneOf(CallbackMode.class);\r\n-        if ((callback & CallbackModes.CALLBACK_FAIL_FAST) != 0)\r\n-            modes.add(FAIL_FAST);\r\n-        if ((callback & CallbackModes.CALLBACK_IGNORE) != 0)\r\n-            modes.add(IGNORE);\r\n-        if ((callback & CallbackModes.CALLBACK_LOG) != 0)\r\n-            modes.add(LOG);\r\n-        if ((callback & CallbackModes.CALLBACK_RETHROW) != 0)\r\n-            modes.add(RETHROW);\r\n-        if ((callback & CallbackModes.CALLBACK_ROLLBACK) != 0)\r\n-            modes.add(ROLLBACK);\r\n-        return modes;\r\n-    }\r\n-\r\n-    static int fromEnumSet(EnumSet<CallbackMode> modes) {\r\n-        int callback = 0;\r\n-        for (CallbackMode mode : modes)\r\n-            callback |= mode.callbackMode;\r\n-        return callback;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence;\n+\n+import java.util.EnumSet;\n+\n+import org.apache.openjpa.event.CallbackModes;\n+\n+/**\n+ * The possible settings for the callback behavior of an\n+ * {@link OpenJPAEntityManager}.\n+ *\n+ * @since 1.0.0\n+ * @published\n+ */\n+public enum CallbackMode {\n+    FAIL_FAST(CallbackModes.CALLBACK_FAIL_FAST),\n+    IGNORE(CallbackModes.CALLBACK_IGNORE),\n+    LOG(CallbackModes.CALLBACK_LOG),\n+    RETHROW(CallbackModes.CALLBACK_RETHROW),\n+    ROLLBACK(CallbackModes.CALLBACK_ROLLBACK);\n+\n+    private final int callbackMode;\n+\n+    private CallbackMode(int value) {\n+        callbackMode = value;\n+    }\n+\n+    static EnumSet<CallbackMode> toEnumSet(int callback) {\n+        EnumSet<CallbackMode> modes = EnumSet.noneOf(CallbackMode.class);\n+        if ((callback & CallbackModes.CALLBACK_FAIL_FAST) != 0)\n+            modes.add(FAIL_FAST);\n+        if ((callback & CallbackModes.CALLBACK_IGNORE) != 0)\n+            modes.add(IGNORE);\n+        if ((callback & CallbackModes.CALLBACK_LOG) != 0)\n+            modes.add(LOG);\n+        if ((callback & CallbackModes.CALLBACK_RETHROW) != 0)\n+            modes.add(RETHROW);\n+        if ((callback & CallbackModes.CALLBACK_ROLLBACK) != 0)\n+            modes.add(ROLLBACK);\n+        return modes;\n+    }\n+\n+    static int fromEnumSet(EnumSet<CallbackMode> modes) {\n+        int callback = 0;\n+        for (CallbackMode mode : modes)\n+            callback |= mode.callbackMode;\n+        return callback;\n+    }\n+}"},{"sha":"5a77e82585e9f5d56c297ae3357bba6a25487f86","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ConnectionRetainMode.java","status":"modified","additions":60,"deletions":60,"changes":120,"blob_url":"https://github.com/apache/openjpa/blob/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ConnectionRetainMode.java","raw_url":"https://github.com/apache/openjpa/raw/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ConnectionRetainMode.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ConnectionRetainMode.java?ref=cd4c8839f87f750e2655a5b98f552e2ba4031a67","patch":"@@ -1,60 +1,60 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence;\r\n-\r\n-import org.apache.openjpa.kernel.ConnectionRetainModes;\r\n-\r\n-/**\r\n- * The possible values for use when configuring the connection retain\r\n- * behavior for an {@link OpenJPAEntityManager}.\r\n- *\r\n- * @since 1.0.0\r\n- * @published\r\n- */\r\n-public enum ConnectionRetainMode {\r\n-    ON_DEMAND(ConnectionRetainModes.CONN_RETAIN_DEMAND),\r\n-    TRANSACTION(ConnectionRetainModes.CONN_RETAIN_TRANS),\r\n-    ALWAYS(ConnectionRetainModes.CONN_RETAIN_ALWAYS);\r\n-\r\n-    private final int connectionRetainConstant;\r\n-\r\n-    private ConnectionRetainMode(int value) {\r\n-        connectionRetainConstant = value;\r\n-    }\r\n-\r\n-    int toKernelConstant() {\r\n-        return connectionRetainConstant;\r\n-    }\r\n-\r\n-    static ConnectionRetainMode fromKernelConstant(int kernelConstant) {\r\n-        switch (kernelConstant) {\r\n-            case ConnectionRetainModes.CONN_RETAIN_DEMAND:\r\n-                return ON_DEMAND;\r\n-\r\n-            case ConnectionRetainModes.CONN_RETAIN_ALWAYS:\r\n-                return ALWAYS;\r\n-\r\n-            case ConnectionRetainModes.CONN_RETAIN_TRANS:\r\n-                return TRANSACTION;\r\n-\r\n-            default:\r\n-                throw new IllegalArgumentException(kernelConstant + \"\");\r\n-        }\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence;\n+\n+import org.apache.openjpa.kernel.ConnectionRetainModes;\n+\n+/**\n+ * The possible values for use when configuring the connection retain\n+ * behavior for an {@link OpenJPAEntityManager}.\n+ *\n+ * @since 1.0.0\n+ * @published\n+ */\n+public enum ConnectionRetainMode {\n+    ON_DEMAND(ConnectionRetainModes.CONN_RETAIN_DEMAND),\n+    TRANSACTION(ConnectionRetainModes.CONN_RETAIN_TRANS),\n+    ALWAYS(ConnectionRetainModes.CONN_RETAIN_ALWAYS);\n+\n+    private final int connectionRetainConstant;\n+\n+    private ConnectionRetainMode(int value) {\n+        connectionRetainConstant = value;\n+    }\n+\n+    int toKernelConstant() {\n+        return connectionRetainConstant;\n+    }\n+\n+    static ConnectionRetainMode fromKernelConstant(int kernelConstant) {\n+        switch (kernelConstant) {\n+            case ConnectionRetainModes.CONN_RETAIN_DEMAND:\n+                return ON_DEMAND;\n+\n+            case ConnectionRetainModes.CONN_RETAIN_ALWAYS:\n+                return ALWAYS;\n+\n+            case ConnectionRetainModes.CONN_RETAIN_TRANS:\n+                return TRANSACTION;\n+\n+            default:\n+                throw new IllegalArgumentException(kernelConstant + \"\");\n+        }\n+    }\n+}"},{"sha":"db6a0fd0d243bd3e1f5ba93eec92af0d70b5e2e9","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/DetachStateType.java","status":"modified","additions":60,"deletions":60,"changes":120,"blob_url":"https://github.com/apache/openjpa/blob/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/DetachStateType.java","raw_url":"https://github.com/apache/openjpa/raw/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/DetachStateType.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/DetachStateType.java?ref=cd4c8839f87f750e2655a5b98f552e2ba4031a67","patch":"@@ -1,60 +1,60 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence;\r\n-\r\n-import org.apache.openjpa.kernel.DetachState;\r\n-\r\n-/**\r\n- * The possible settings for the detachment behavior of an\r\n- * {@link OpenJPAEntityManager}.\r\n- *\r\n- * @since 1.0.0\r\n- * @published\r\n- */\r\n-public enum DetachStateType {\r\n-    FETCH_GROUPS(DetachState.DETACH_FETCH_GROUPS),\r\n-    LOADED(DetachState.DETACH_LOADED),\r\n-    ALL(DetachState.DETACH_ALL);\r\n-\r\n-    private final int detachStateConstant;\r\n-\r\n-    private DetachStateType(int value) {\r\n-        detachStateConstant = value;\r\n-    }\r\n-\r\n-    int toKernelConstant() {\r\n-        return detachStateConstant;\r\n-    }\r\n-\r\n-    static DetachStateType fromKernelConstant(int kernelConstant) {\r\n-        switch (kernelConstant) {\r\n-            case DetachState.DETACH_FETCH_GROUPS:\r\n-                return FETCH_GROUPS;\r\n-\r\n-            case DetachState.DETACH_LOADED:\r\n-                return LOADED;\r\n-\r\n-            case DetachState.DETACH_ALL:\r\n-                return ALL;\r\n-\r\n-            default:\r\n-                throw new IllegalArgumentException(kernelConstant + \"\");\r\n-        }\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence;\n+\n+import org.apache.openjpa.kernel.DetachState;\n+\n+/**\n+ * The possible settings for the detachment behavior of an\n+ * {@link OpenJPAEntityManager}.\n+ *\n+ * @since 1.0.0\n+ * @published\n+ */\n+public enum DetachStateType {\n+    FETCH_GROUPS(DetachState.DETACH_FETCH_GROUPS),\n+    LOADED(DetachState.DETACH_LOADED),\n+    ALL(DetachState.DETACH_ALL);\n+\n+    private final int detachStateConstant;\n+\n+    private DetachStateType(int value) {\n+        detachStateConstant = value;\n+    }\n+\n+    int toKernelConstant() {\n+        return detachStateConstant;\n+    }\n+\n+    static DetachStateType fromKernelConstant(int kernelConstant) {\n+        switch (kernelConstant) {\n+            case DetachState.DETACH_FETCH_GROUPS:\n+                return FETCH_GROUPS;\n+\n+            case DetachState.DETACH_LOADED:\n+                return LOADED;\n+\n+            case DetachState.DETACH_ALL:\n+                return ALL;\n+\n+            default:\n+                throw new IllegalArgumentException(kernelConstant + \"\");\n+        }\n+    }\n+}"},{"sha":"185b30aeffb844a9d6c91778e1ac07bca1c0b0e0","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","status":"modified","additions":1130,"deletions":1130,"changes":2260,"blob_url":"https://github.com/apache/openjpa/blob/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java?ref=cd4c8839f87f750e2655a5b98f552e2ba4031a67","patch":"@@ -1,1130 +1,1130 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence;\r\n-\r\n-import java.lang.reflect.Array;\r\n-import java.util.Arrays;\r\n-import java.util.Collection;\r\n-import java.util.EnumSet;\r\n-import javax.persistence.EntityManager;\r\n-import javax.persistence.FlushModeType;\r\n-import javax.persistence.LockModeType;\r\n-import javax.persistence.Query;\r\n-\r\n-import org.apache.commons.lang.StringUtils;\r\n-import org.apache.openjpa.conf.OpenJPAConfiguration;\r\n-import org.apache.openjpa.ee.ManagedRuntime;\r\n-import org.apache.openjpa.kernel.Broker;\r\n-import org.apache.openjpa.kernel.DelegatingBroker;\r\n-import org.apache.openjpa.kernel.FindCallbacks;\r\n-import org.apache.openjpa.kernel.LockLevels;\r\n-import org.apache.openjpa.kernel.OpCallbacks;\r\n-import org.apache.openjpa.kernel.OpenJPAStateManager;\r\n-import org.apache.openjpa.kernel.QueryFlushModes;\r\n-import org.apache.openjpa.kernel.QueryLanguages;\r\n-import org.apache.openjpa.kernel.Seq;\r\n-import org.apache.openjpa.kernel.jpql.JPQLParser;\r\n-import org.apache.openjpa.lib.util.Localizer;\r\n-import org.apache.openjpa.lib.util.Closeable;\r\n-import org.apache.openjpa.meta.ClassMetaData;\r\n-import org.apache.openjpa.meta.FieldMetaData;\r\n-import org.apache.openjpa.meta.QueryMetaData;\r\n-import org.apache.openjpa.meta.SequenceMetaData;\r\n-import org.apache.openjpa.util.Exceptions;\r\n-import org.apache.openjpa.util.ImplHelper;\r\n-import org.apache.openjpa.util.RuntimeExceptionTranslator;\r\n-import org.apache.openjpa.util.UserException;\r\n-\r\n-/**\r\n- * Implementation of {@link EntityManager} interface.\r\n- *\r\n- * @author Patrick Linskey\r\n- * @author Abe White\r\n- * @nojavadoc\r\n- */\r\n-public class EntityManagerImpl\r\n-    implements OpenJPAEntityManagerSPI,\r\n-    FindCallbacks, OpCallbacks, Closeable, OpenJPAEntityTransaction {\r\n-\r\n-    private static final Localizer _loc = Localizer.forPackage\r\n-        (EntityManagerImpl.class);\r\n-\r\n-    private final DelegatingBroker _broker;\r\n-    private final EntityManagerFactoryImpl _emf;\r\n-    private FetchPlan _fetch = null;\r\n-    private static final Object[] EMPTY_OBJECTS = new Object[0];\r\n-\r\n-    /**\r\n-     * Constructor; supply factory and delegate.\r\n-     */\r\n-    public EntityManagerImpl(EntityManagerFactoryImpl factory,\r\n-        Broker broker) {\r\n-        _emf = factory;\r\n-        RuntimeExceptionTranslator translator =\r\n-            PersistenceExceptions.getRollbackTranslator(this);\r\n-        _broker = new DelegatingBroker(broker, translator);\r\n-        _broker.setImplicitBehavior(this, translator);\r\n-    }\r\n-\r\n-    /**\r\n-     * Broker delegate.\r\n-     */\r\n-    public Broker getBroker() {\r\n-        return _broker.getDelegate();\r\n-    }\r\n-\r\n-    public OpenJPAEntityManagerFactory getEntityManagerFactory() {\r\n-        return _emf;\r\n-    }\r\n-\r\n-    public OpenJPAConfiguration getConfiguration() {\r\n-        return _broker.getConfiguration();\r\n-    }\r\n-\r\n-    public FetchPlan getFetchPlan() {\r\n-        assertNotCloseInvoked();\r\n-        _broker.lock();\r\n-        try {\r\n-            if (_fetch == null)\r\n-                _fetch = _emf.toFetchPlan(_broker,\r\n-                    _broker.getFetchConfiguration());\r\n-            return _fetch;\r\n-        } finally {\r\n-            _broker.unlock();\r\n-        }\r\n-    }\r\n-\r\n-    public ConnectionRetainMode getConnectionRetainMode() {\r\n-        return ConnectionRetainMode.fromKernelConstant(\r\n-            _broker.getConnectionRetainMode());\r\n-    }\r\n-\r\n-    public boolean isManaged() {\r\n-        return _broker.isManaged();\r\n-    }\r\n-\r\n-    public ManagedRuntime getManagedRuntime() {\r\n-        return _broker.getManagedRuntime();\r\n-    }\r\n-\r\n-    public boolean getSyncWithManagedTransactions() {\r\n-        return _broker.getSyncWithManagedTransactions();\r\n-    }\r\n-\r\n-    public void setSyncWithManagedTransactions(boolean sync) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.setSyncWithManagedTransactions(sync);\r\n-    }\r\n-\r\n-    public ClassLoader getClassLoader() {\r\n-        return _broker.getClassLoader();\r\n-    }\r\n-\r\n-    public String getConnectionUserName() {\r\n-        return _broker.getConnectionUserName();\r\n-    }\r\n-\r\n-    public String getConnectionPassword() {\r\n-        return _broker.getConnectionPassword();\r\n-    }\r\n-\r\n-    public boolean getMultithreaded() {\r\n-        return _broker.getMultithreaded();\r\n-    }\r\n-\r\n-    public void setMultithreaded(boolean multithreaded) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.setMultithreaded(multithreaded);\r\n-    }\r\n-\r\n-    public boolean getIgnoreChanges() {\r\n-        return _broker.getIgnoreChanges();\r\n-    }\r\n-\r\n-    public void setIgnoreChanges(boolean val) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.setIgnoreChanges(val);\r\n-    }\r\n-\r\n-    public boolean getNontransactionalRead() {\r\n-        return _broker.getNontransactionalRead();\r\n-    }\r\n-\r\n-    public void setNontransactionalRead(boolean val) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.setNontransactionalRead(val);\r\n-    }\r\n-\r\n-    public boolean getNontransactionalWrite() {\r\n-        return _broker.getNontransactionalWrite();\r\n-    }\r\n-\r\n-    public void setNontransactionalWrite(boolean val) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.setNontransactionalWrite(val);\r\n-    }\r\n-\r\n-    public boolean getOptimistic() {\r\n-        return _broker.getOptimistic();\r\n-    }\r\n-\r\n-    public void setOptimistic(boolean val) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.setOptimistic(val);\r\n-    }\r\n-\r\n-    public RestoreStateType getRestoreState() {\r\n-        return RestoreStateType.fromKernelConstant(_broker.getRestoreState());\r\n-    }\r\n-\r\n-    public void setRestoreState(RestoreStateType val) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.setRestoreState(val.toKernelConstant());\r\n-    }\r\n-\r\n-    public boolean getRetainState() {\r\n-        return _broker.getRetainState();\r\n-    }\r\n-\r\n-    public void setRetainState(boolean val) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.setRetainState(val);\r\n-    }\r\n-\r\n-    public AutoClearType getAutoClear() {\r\n-        return AutoClearType.fromKernelConstant(_broker.getAutoClear());\r\n-    }\r\n-\r\n-    public void setAutoClear(AutoClearType val) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.setAutoClear(val.toKernelConstant());\r\n-    }\r\n-\r\n-    public DetachStateType getDetachState() {\r\n-        return DetachStateType.fromKernelConstant(_broker.getDetachState());\r\n-    }\r\n-\r\n-    public void setDetachState(DetachStateType type) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.setDetachState(type.toKernelConstant());\r\n-    }\r\n-\r\n-    public EnumSet<AutoDetachType> getAutoDetach() {\r\n-        return AutoDetachType.toEnumSet(_broker.getAutoDetach());\r\n-    }\r\n-\r\n-    public void setAutoDetach(AutoDetachType flag) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.setAutoDetach(AutoDetachType.fromEnumSet(EnumSet.of(flag)));\r\n-    }\r\n-\r\n-    public void setAutoDetach(EnumSet<AutoDetachType> flags) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.setAutoDetach(AutoDetachType.fromEnumSet(flags));\r\n-    }\r\n-\r\n-    public void setAutoDetach(int flag, boolean on) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.setAutoDetach(flag, on);\r\n-    }\r\n-\r\n-    public boolean getEvictFromStoreCache() {\r\n-        return _broker.getEvictFromDataCache();\r\n-    }\r\n-\r\n-    public void setEvictFromStoreCache(boolean evict) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.setEvictFromDataCache(evict);\r\n-    }\r\n-\r\n-    public boolean getPopulateStoreCache() {\r\n-        return _broker.getPopulateDataCache();\r\n-    }\r\n-\r\n-    public void setPopulateStoreCache(boolean cache) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.setPopulateDataCache(cache);\r\n-    }\r\n-\r\n-    public boolean isTrackChangesByType() {\r\n-        return _broker.isTrackChangesByType();\r\n-    }\r\n-\r\n-    public void setTrackChangesByType(boolean trackByType) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.setTrackChangesByType(trackByType);\r\n-    }\r\n-\r\n-    public Object getUserObject(Object key) {\r\n-        return _broker.getUserObject(key);\r\n-    }\r\n-\r\n-    public Object putUserObject(Object key, Object val) {\r\n-        assertNotCloseInvoked();\r\n-        return _broker.putUserObject(key, val);\r\n-    }\r\n-\r\n-    public void addTransactionListener(Object listener) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.addTransactionListener(listener);\r\n-    }\r\n-\r\n-    public void removeTransactionListener(Object listener) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.removeTransactionListener(listener);\r\n-    }\r\n-\r\n-    public EnumSet<CallbackMode> getTransactionListenerCallbackMode() {\r\n-        return CallbackMode.toEnumSet(\r\n-            _broker.getTransactionListenerCallbackMode());\r\n-    }\r\n-\r\n-    public void setTransactionListenerCallbackMode(CallbackMode mode) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.setTransactionListenerCallbackMode(\r\n-            CallbackMode.fromEnumSet(EnumSet.of(mode)));\r\n-    }\r\n-\r\n-    public void setTransactionListenerCallbackMode(EnumSet<CallbackMode> modes){\r\n-        assertNotCloseInvoked();\r\n-        _broker.setTransactionListenerCallbackMode(\r\n-            CallbackMode.fromEnumSet(modes));\r\n-    }\r\n-\r\n-    public void addLifecycleListener(Object listener, Class... classes) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.addLifecycleListener(listener, classes);\r\n-    }\r\n-\r\n-    public void removeLifecycleListener(Object listener) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.removeLifecycleListener(listener);\r\n-    }\r\n-\r\n-    public EnumSet<CallbackMode> getLifecycleListenerCallbackMode() {\r\n-        return CallbackMode.toEnumSet(\r\n-            _broker.getLifecycleListenerCallbackMode());\r\n-    }\r\n-\r\n-    public void setLifecycleListenerCallbackMode(CallbackMode mode) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.setLifecycleListenerCallbackMode(\r\n-            CallbackMode.fromEnumSet(EnumSet.of(mode)));\r\n-    }\r\n-\r\n-    public void setLifecycleListenerCallbackMode(EnumSet<CallbackMode> modes) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.setLifecycleListenerCallbackMode(\r\n-            CallbackMode.fromEnumSet(modes));\r\n-    }\r\n-\r\n-    @SuppressWarnings(\"unchecked\")\r\n-    public <T> T getReference(Class<T> cls, Object oid) {\r\n-        assertNotCloseInvoked();\r\n-        oid = _broker.newObjectId(cls, oid);\r\n-        return (T) _broker.find(oid, false, this);\r\n-    }\r\n-\r\n-    @SuppressWarnings(\"unchecked\")\r\n-    public <T> T find(Class<T> cls, Object oid) {\r\n-        assertNotCloseInvoked();\r\n-        oid = _broker.newObjectId(cls, oid);\r\n-        return (T) _broker.find(oid, true, this);\r\n-    }\r\n-\r\n-    @SuppressWarnings(\"unchecked\")\r\n-    public <T> T[] findAll(Class<T> cls, Object... oids) {\r\n-        if (oids.length == 0)\r\n-            return (T[]) Array.newInstance(cls, 0);\r\n-        Collection<T> ret = findAll(cls, Arrays.asList(oids));\r\n-        return ret.toArray((T[]) Array.newInstance(cls, ret.size()));\r\n-    }\r\n-\r\n-    @SuppressWarnings(\"unchecked\")\r\n-    public <T> Collection<T> findAll(final Class<T> cls, Collection oids) {\r\n-        assertNotCloseInvoked();\r\n-        Object[] objs = _broker.findAll(oids, true, new FindCallbacks() {\r\n-            public Object processArgument(Object oid) {\r\n-                return _broker.newObjectId(cls, oid);\r\n-            }\r\n-\r\n-            public Object processReturn(Object oid, OpenJPAStateManager sm) {\r\n-                return EntityManagerImpl.this.processReturn(oid, sm);\r\n-            }\r\n-        });\r\n-        return (Collection<T>) Arrays.asList(objs);\r\n-    }\r\n-\r\n-    @SuppressWarnings(\"unchecked\")\r\n-    public <T> T findCached(Class<T> cls, Object oid) {\r\n-        assertNotCloseInvoked();\r\n-        return (T) _broker.findCached(_broker.newObjectId(cls, oid), this);\r\n-    }\r\n-\r\n-    public Class getObjectIdClass(Class cls) {\r\n-        assertNotCloseInvoked();\r\n-        if (cls == null)\r\n-            return null;\r\n-        return JPAFacadeHelper.fromOpenJPAObjectIdClass\r\n-                (_broker.getObjectIdType(cls));\r\n-    }\r\n-\r\n-    public OpenJPAEntityTransaction getTransaction() {\r\n-        if (_broker.isManaged())\r\n-            throw new InvalidStateException(_loc.get(\"get-managed-trans\"),\r\n-                null, null, false);\r\n-        return this;\r\n-    }\r\n-\r\n-    public void joinTransaction() {\r\n-        assertNotCloseInvoked();\r\n-        if (!_broker.syncWithManagedTransaction())\r\n-            throw new TransactionRequiredException(_loc.get\r\n-                (\"no-managed-trans\"), null, null, false);\r\n-    }\r\n-\r\n-    public void begin() {\r\n-        _broker.begin();\r\n-    }\r\n-\r\n-    public void commit() {\r\n-        try {\r\n-            _broker.commit();\r\n-        } catch (RollbackException e) {\r\n-            throw e;\r\n-        } catch (IllegalStateException e) {\r\n-            throw e;\r\n-        } catch (Exception e) {\r\n-            // RollbackExceptions are special and aren't handled by the\r\n-            // normal exception translator, since the spec says they\r\n-            // should be thrown whenever the commit fails for any reason at\r\n-            // all, wheras the exception translator handles exceptions that\r\n-            // are caused for specific reasons\r\n-            throw new RollbackException(e);\r\n-        }\r\n-    }\r\n-\r\n-    public void rollback() {\r\n-        _broker.rollback();\r\n-    }\r\n-\r\n-    public void commitAndResume() {\r\n-        _broker.commitAndResume();\r\n-    }\r\n-\r\n-    public void rollbackAndResume() {\r\n-        _broker.rollbackAndResume();\r\n-    }\r\n-\r\n-    public Throwable getRollbackCause() {\r\n-        if (!isActive())\r\n-            throw new IllegalStateException(_loc.get(\"no-transaction\")\r\n-                .getMessage());\r\n-\r\n-        return _broker.getRollbackCause();\r\n-    }\r\n-\r\n-    public boolean getRollbackOnly() {\r\n-        if (!isActive())\r\n-            throw new IllegalStateException(_loc.get(\"no-transaction\")\r\n-                .getMessage());\r\n-\r\n-        return _broker.getRollbackOnly();\r\n-    }\r\n-\r\n-    public void setRollbackOnly() {\r\n-        _broker.setRollbackOnly();\r\n-    }\r\n-\r\n-    public void setRollbackOnly(Throwable cause) {\r\n-        _broker.setRollbackOnly(cause);\r\n-    }\r\n-\r\n-    public void setSavepoint(String name) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.setSavepoint(name);\r\n-    }\r\n-\r\n-    public void rollbackToSavepoint() {\r\n-        assertNotCloseInvoked();\r\n-        _broker.rollbackToSavepoint();\r\n-    }\r\n-\r\n-    public void rollbackToSavepoint(String name) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.rollbackToSavepoint(name);\r\n-    }\r\n-\r\n-    public void releaseSavepoint() {\r\n-        assertNotCloseInvoked();\r\n-        _broker.releaseSavepoint();\r\n-    }\r\n-\r\n-    public void releaseSavepoint(String name) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.releaseSavepoint(name);\r\n-    }\r\n-\r\n-    public void flush() {\r\n-        assertNotCloseInvoked();\r\n-        _broker.assertOpen();\r\n-        _broker.assertActiveTransaction();\r\n-        _broker.flush();\r\n-    }\r\n-\r\n-    public void preFlush() {\r\n-        assertNotCloseInvoked();\r\n-        _broker.preFlush();\r\n-    }\r\n-\r\n-    public void validateChanges() {\r\n-        assertNotCloseInvoked();\r\n-        _broker.validateChanges();\r\n-    }\r\n-\r\n-    public boolean isActive() {\r\n-        return isOpen() && _broker.isActive();\r\n-    }\r\n-\r\n-    public boolean isStoreActive() {\r\n-        return _broker.isStoreActive();\r\n-    }\r\n-\r\n-    public void beginStore() {\r\n-        _broker.beginStore();\r\n-    }\r\n-\r\n-    public boolean contains(Object entity) {\r\n-        assertNotCloseInvoked();\r\n-        if (entity == null)\r\n-            return false;\r\n-        OpenJPAStateManager sm = _broker.getStateManager(entity);\r\n-        if (sm == null\r\n-            && !ImplHelper.isManagedType(getConfiguration(), entity.getClass()))\r\n-            throw new ArgumentException(_loc.get(\"not-entity\",\r\n-                entity.getClass()), null, null, true);\r\n-        return sm != null && !sm.isDeleted();\r\n-    }\r\n-\r\n-    public boolean containsAll(Object... entities) {\r\n-        for (Object entity : entities)\r\n-            if (!contains(entity))\r\n-                return false;\r\n-        return true;\r\n-    }\r\n-\r\n-    public boolean containsAll(Collection entities) {\r\n-        for (Object entity : entities)\r\n-            if (!contains(entity))\r\n-                return false;\r\n-        return true;\r\n-    }\r\n-\r\n-    public void persist(Object entity) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.persist(entity, this);\r\n-    }\r\n-\r\n-    public void persistAll(Object... entities) {\r\n-        persistAll(Arrays.asList(entities));\r\n-    }\r\n-\r\n-    public void persistAll(Collection entities) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.persistAll(entities, this);\r\n-    }\r\n-\r\n-    public void remove(Object entity) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.delete(entity, this);\r\n-    }\r\n-\r\n-    public void removeAll(Object... entities) {\r\n-        removeAll(Arrays.asList(entities));\r\n-    }\r\n-\r\n-    public void removeAll(Collection entities) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.deleteAll(entities, this);\r\n-    }\r\n-\r\n-    public void release(Object entity) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.release(entity, this);\r\n-    }\r\n-\r\n-    public void releaseAll(Collection entities) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.releaseAll(entities, this);\r\n-    }\r\n-\r\n-    public void releaseAll(Object... entities) {\r\n-        releaseAll(Arrays.asList(entities));\r\n-    }\r\n-\r\n-    public void refresh(Object entity) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.assertWriteOperation();\r\n-        _broker.refresh(entity, this);\r\n-    }\r\n-\r\n-    public void refreshAll() {\r\n-        assertNotCloseInvoked();\r\n-        _broker.assertWriteOperation();\r\n-        _broker.refreshAll(_broker.getTransactionalObjects(), this);\r\n-    }\r\n-\r\n-    public void refreshAll(Collection entities) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.assertWriteOperation();\r\n-        _broker.refreshAll(entities, this);\r\n-    }\r\n-\r\n-    public void refreshAll(Object... entities) {\r\n-        refreshAll(Arrays.asList(entities));\r\n-    }\r\n-\r\n-    public void retrieve(Object entity) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.retrieve(entity, true, this);\r\n-    }\r\n-\r\n-    public void retrieveAll(Collection entities) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.retrieveAll(entities, true, this);\r\n-    }\r\n-\r\n-    public void retrieveAll(Object... entities) {\r\n-        retrieveAll(Arrays.asList(entities));\r\n-    }\r\n-\r\n-    public void evict(Object entity) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.evict(entity, this);\r\n-    }\r\n-\r\n-    public void evictAll(Collection entities) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.evictAll(entities, this);\r\n-    }\r\n-\r\n-    public void evictAll(Object... entities) {\r\n-        evictAll(Arrays.asList(entities));\r\n-    }\r\n-\r\n-    public void evictAll() {\r\n-        assertNotCloseInvoked();\r\n-        _broker.evictAll(this);\r\n-    }\r\n-\r\n-    public void evictAll(Class cls) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.evictAll(_broker.newExtent(cls, true), this);\r\n-    }\r\n-\r\n-    public void evictAll(Extent extent) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.evictAll(((ExtentImpl) extent).getDelegate(), this);\r\n-    }\r\n-\r\n-    @SuppressWarnings(\"unchecked\")\r\n-    public <T> T detach(T entity) {\r\n-        assertNotCloseInvoked();\r\n-        return (T) _broker.detach(entity, this);\r\n-    }\r\n-\r\n-    public Object[] detachAll(Object... entities) {\r\n-        assertNotCloseInvoked();\r\n-        return _broker.detachAll(Arrays.asList(entities), this);\r\n-    }\r\n-\r\n-    public Collection detachAll(Collection entities) {\r\n-        assertNotCloseInvoked();\r\n-        return Arrays.asList(_broker.detachAll(entities, this));\r\n-    }\r\n-\r\n-    @SuppressWarnings(\"unchecked\")\r\n-    public <T> T merge(T entity) {\r\n-        assertNotCloseInvoked();\r\n-        return (T) _broker.attach(entity, true, this);\r\n-    }\r\n-\r\n-    public Object[] mergeAll(Object... entities) {\r\n-        if (entities.length == 0)\r\n-            return EMPTY_OBJECTS;\r\n-        return mergeAll(Arrays.asList(entities)).toArray();\r\n-    }\r\n-\r\n-    public Collection mergeAll(Collection entities) {\r\n-        assertNotCloseInvoked();\r\n-        return Arrays.asList(_broker.attachAll(entities, true, this));\r\n-    }\r\n-\r\n-    public void transactional(Object entity, boolean updateVersion) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.transactional(entity, updateVersion, this);\r\n-    }\r\n-\r\n-    public void transactionalAll(Collection objs, boolean updateVersion) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.transactionalAll(objs, updateVersion, this);\r\n-    }\r\n-\r\n-    public void transactionalAll(Object[] objs, boolean updateVersion) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.transactionalAll(Arrays.asList(objs), updateVersion, this);\r\n-    }\r\n-\r\n-    public void nontransactional(Object entity) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.nontransactional(entity, this);\r\n-    }\r\n-\r\n-    public void nontransactionalAll(Collection objs) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.nontransactionalAll(objs, this);\r\n-    }\r\n-\r\n-    public void nontransactionalAll(Object[] objs) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.nontransactionalAll(Arrays.asList(objs), this);\r\n-    }\r\n-\r\n-    public Generator getNamedGenerator(String name) {\r\n-        assertNotCloseInvoked();\r\n-        try {\r\n-            SequenceMetaData meta = _broker.getConfiguration().\r\n-                getMetaDataRepositoryInstance().getSequenceMetaData(name,\r\n-                _broker.getClassLoader(), true);\r\n-            Seq seq = meta.getInstance(_broker.getClassLoader());\r\n-            return new GeneratorImpl(seq, name, _broker, null);\r\n-        } catch (RuntimeException re) {\r\n-            throw PersistenceExceptions.toPersistenceException(re);\r\n-        }\r\n-    }\r\n-\r\n-    public Generator getIdGenerator(Class forClass) {\r\n-        assertNotCloseInvoked();\r\n-        try {\r\n-            ClassMetaData meta = _broker.getConfiguration().\r\n-                getMetaDataRepositoryInstance().getMetaData(forClass,\r\n-                _broker.getClassLoader(), true);\r\n-            Seq seq = _broker.getIdentitySequence(meta);\r\n-            return (seq == null) ? null : new GeneratorImpl(seq, null, _broker,\r\n-                meta);\r\n-        } catch (Exception e) {\r\n-            throw PersistenceExceptions.toPersistenceException(e);\r\n-        }\r\n-    }\r\n-\r\n-    public Generator getFieldGenerator(Class forClass, String fieldName) {\r\n-        assertNotCloseInvoked();\r\n-        try {\r\n-            ClassMetaData meta = _broker.getConfiguration().\r\n-                getMetaDataRepositoryInstance().getMetaData(forClass,\r\n-                _broker.getClassLoader(), true);\r\n-            FieldMetaData fmd = meta.getField(fieldName);\r\n-            if (fmd == null)\r\n-                throw new ArgumentException(_loc.get(\"no-named-field\",\r\n-                    forClass, fieldName), null, null, false);\r\n-\r\n-            Seq seq = _broker.getValueSequence(fmd);\r\n-            return (seq == null) ? null : new GeneratorImpl(seq, null, _broker,\r\n-                meta);\r\n-        } catch (Exception e) {\r\n-            throw PersistenceExceptions.toPersistenceException(e);\r\n-        }\r\n-    }\r\n-\r\n-    public <T> Extent<T> createExtent(Class<T> cls, boolean subclasses) {\r\n-        assertNotCloseInvoked();\r\n-        return new ExtentImpl<T>(this, _broker.newExtent(cls, subclasses));\r\n-    }\r\n-\r\n-    public OpenJPAQuery createQuery(String query) {\r\n-        return createQuery(JPQLParser.LANG_JPQL, query);\r\n-    }\r\n-\r\n-    public OpenJPAQuery createQuery(String language, String query) {\r\n-        assertNotCloseInvoked();\r\n-        return new QueryImpl(this, _broker.newQuery(language, query));\r\n-    }\r\n-\r\n-    public OpenJPAQuery createQuery(Query query) {\r\n-        if (query == null)\r\n-            return createQuery((String) null);\r\n-        assertNotCloseInvoked();\r\n-        org.apache.openjpa.kernel.Query q = ((QueryImpl) query).getDelegate();\r\n-        return new QueryImpl(this, _broker.newQuery(q.getLanguage(),\r\n-            q));\r\n-    }\r\n-\r\n-    public OpenJPAQuery createNamedQuery(String name) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.assertOpen();\r\n-        try {\r\n-            QueryMetaData meta = _broker.getConfiguration().\r\n-                getMetaDataRepositoryInstance().getQueryMetaData(null, name,\r\n-                _broker.getClassLoader(), true);\r\n-            org.apache.openjpa.kernel.Query del =\r\n-                _broker.newQuery(meta.getLanguage(), null);\r\n-            meta.setInto(del);\r\n-            del.compile();\r\n-\r\n-            OpenJPAQuery q = new QueryImpl(this, del);\r\n-            String[] hints = meta.getHintKeys();\r\n-            Object[] values = meta.getHintValues();\r\n-            for (int i = 0; i < hints.length; i++)\r\n-                q.setHint(hints[i], values[i]);\r\n-            return q;\r\n-        } catch (RuntimeException re) {\r\n-            throw PersistenceExceptions.toPersistenceException(re);\r\n-        }\r\n-    }\r\n-\r\n-    public OpenJPAQuery createNativeQuery(String query) {\r\n-        validateSQL(query);\r\n-        return createQuery(QueryLanguages.LANG_SQL, query);\r\n-    }\r\n-\r\n-    public OpenJPAQuery createNativeQuery(String query, Class cls) {\r\n-        return createNativeQuery(query).setResultClass(cls);\r\n-    }\r\n-\r\n-    public OpenJPAQuery createNativeQuery(String query, String mappingName) {\r\n-        assertNotCloseInvoked();\r\n-        validateSQL(query);\r\n-        org.apache.openjpa.kernel.Query kernelQuery = _broker.newQuery(\r\n-            QueryLanguages.LANG_SQL, query);\r\n-        kernelQuery.setResultMapping(null, mappingName);\r\n-        return new QueryImpl(this, kernelQuery);\r\n-    }\r\n-\r\n-    /**\r\n-     * Validate that the user provided SQL.\r\n-     */\r\n-    private static void validateSQL(String query) {\r\n-        if (StringUtils.trimToNull(query) == null)\r\n-            throw new ArgumentException(_loc.get(\"no-sql\"), null, null, false);\r\n-    }\r\n-\r\n-    public void setFlushMode(FlushModeType flushMode) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.assertOpen();\r\n-        _broker.getFetchConfiguration().setFlushBeforeQueries\r\n-            (toFlushBeforeQueries(flushMode));\r\n-    }\r\n-\r\n-    public FlushModeType getFlushMode() {\r\n-        assertNotCloseInvoked();\r\n-        _broker.assertOpen();\r\n-        return fromFlushBeforeQueries(_broker.getFetchConfiguration().\r\n-            getFlushBeforeQueries());\r\n-    }\r\n-\r\n-    /**\r\n-     * Translate our internal flush constant to a flush mode enum value.\r\n-     */\r\n-    static FlushModeType fromFlushBeforeQueries(int flush) {\r\n-        switch (flush) {\r\n-            case QueryFlushModes.FLUSH_TRUE:\r\n-                return FlushModeType.AUTO;\r\n-            case QueryFlushModes.FLUSH_FALSE:\r\n-                return FlushModeType.COMMIT;\r\n-            default:\r\n-                return null;\r\n-        }\r\n-    }\r\n-\r\n-    /**\r\n-     * Translate a flush mode enum value to our internal flush constant.\r\n-     */\r\n-    static int toFlushBeforeQueries(FlushModeType flushMode) {\r\n-        // choose default for null\r\n-        if (flushMode == null)\r\n-            return QueryFlushModes.FLUSH_WITH_CONNECTION;\r\n-        if (flushMode == FlushModeType.AUTO)\r\n-            return QueryFlushModes.FLUSH_TRUE;\r\n-        if (flushMode == FlushModeType.COMMIT)\r\n-            return QueryFlushModes.FLUSH_FALSE;\r\n-        throw new ArgumentException(flushMode.toString(), null, null, false);\r\n-    }\r\n-\r\n-    public void clear() {\r\n-        assertNotCloseInvoked();\r\n-        _broker.detachAll(this, false);\r\n-    }\r\n-\r\n-    public Object getDelegate() {\r\n-        _broker.assertOpen();\r\n-        assertNotCloseInvoked();\r\n-        return this;\r\n-    }\r\n-\r\n-    public LockModeType getLockMode(Object entity) {\r\n-        assertNotCloseInvoked();\r\n-        return fromLockLevel(_broker.getLockLevel(entity));\r\n-    }\r\n-\r\n-    public void lock(Object entity, LockModeType mode) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.lock(entity, toLockLevel(mode), -1, this);\r\n-    }\r\n-\r\n-    public void lock(Object entity) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.lock(entity, this);\r\n-    }\r\n-\r\n-    public void lock(Object entity, LockModeType mode, int timeout) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.lock(entity, toLockLevel(mode), timeout, this);\r\n-    }\r\n-\r\n-    public void lockAll(Collection entities) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.lockAll(entities, this);\r\n-    }\r\n-\r\n-    public void lockAll(Collection entities, LockModeType mode, int timeout) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.lockAll(entities, toLockLevel(mode), timeout, this);\r\n-    }\r\n-\r\n-    public void lockAll(Object... entities) {\r\n-        lockAll(Arrays.asList(entities));\r\n-    }\r\n-\r\n-    public void lockAll(Object[] entities, LockModeType mode, int timeout) {\r\n-        lockAll(Arrays.asList(entities), mode, timeout);\r\n-    }\r\n-\r\n-    /**\r\n-     * Translate our internal lock level to a javax.persistence enum value.\r\n-     */\r\n-    static LockModeType fromLockLevel(int level) {\r\n-        if (level < LockLevels.LOCK_READ)\r\n-            return null;\r\n-        if (level < LockLevels.LOCK_WRITE)\r\n-            return LockModeType.READ;\r\n-        return LockModeType.WRITE;\r\n-    }\r\n-\r\n-    /**\r\n-     * Translate the javax.persistence enum value to our internal lock level.\r\n-     */\r\n-    static int toLockLevel(LockModeType mode) {\r\n-        if (mode == null)\r\n-            return LockLevels.LOCK_NONE;\r\n-        if (mode == LockModeType.READ)\r\n-            return LockLevels.LOCK_READ;\r\n-        if (mode == LockModeType.WRITE)\r\n-            return LockLevels.LOCK_WRITE;\r\n-        throw new ArgumentException(mode.toString(), null, null, true);\r\n-    }\r\n-\r\n-    public boolean cancelAll() {\r\n-        return _broker.cancelAll();\r\n-    }\r\n-\r\n-    public Object getConnection() {\r\n-        return _broker.getConnection();\r\n-    }\r\n-\r\n-    public Collection getManagedObjects() {\r\n-        return _broker.getManagedObjects();\r\n-    }\r\n-\r\n-    public Collection getTransactionalObjects() {\r\n-        return _broker.getTransactionalObjects();\r\n-    }\r\n-\r\n-    public Collection getPendingTransactionalObjects() {\r\n-        return _broker.getPendingTransactionalObjects();\r\n-    }\r\n-\r\n-    public Collection getDirtyObjects() {\r\n-        return _broker.getDirtyObjects();\r\n-    }\r\n-\r\n-    public boolean getOrderDirtyObjects() {\r\n-        return _broker.getOrderDirtyObjects();\r\n-    }\r\n-\r\n-    public void setOrderDirtyObjects(boolean order) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.setOrderDirtyObjects(order);\r\n-    }\r\n-\r\n-    public void dirtyClass(Class cls) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.dirtyType(cls);\r\n-    }\r\n-\r\n-    @SuppressWarnings(\"unchecked\")\r\n-    public Collection<Class> getPersistedClasses() {\r\n-        return (Collection<Class>) _broker.getPersistedTypes();\r\n-    }\r\n-\r\n-    @SuppressWarnings(\"unchecked\")\r\n-    public Collection<Class> getUpdatedClasses() {\r\n-        return (Collection<Class>) _broker.getUpdatedTypes();\r\n-    }\r\n-\r\n-    @SuppressWarnings(\"unchecked\")\r\n-    public Collection<Class> getRemovedClasses() {\r\n-        return (Collection<Class>) _broker.getDeletedTypes();\r\n-    }\r\n-\r\n-    public <T> T createInstance(Class<T> cls) {\r\n-        assertNotCloseInvoked();\r\n-        return (T) _broker.newInstance(cls);\r\n-    }\r\n-\r\n-    public void close() {\r\n-        assertNotCloseInvoked();\r\n-        _broker.close();\r\n-    }\r\n-\r\n-    public boolean isOpen() {\r\n-        return !_broker.isCloseInvoked();\r\n-    }\r\n-\r\n-    public void dirty(Object o, String field) {\r\n-        assertNotCloseInvoked();\r\n-        OpenJPAStateManager sm = _broker.getStateManager(o);\r\n-        try {\r\n-            if (sm != null)\r\n-                sm.dirty(field);\r\n-        } catch (Exception e) {\r\n-            throw PersistenceExceptions.toPersistenceException(e);\r\n-        }\r\n-    }\r\n-\r\n-    public Object getObjectId(Object o) {\r\n-        assertNotCloseInvoked();\r\n-        return JPAFacadeHelper.fromOpenJPAObjectId(_broker.getObjectId(o));\r\n-    }\r\n-\r\n-    public boolean isDirty(Object o) {\r\n-        assertNotCloseInvoked();\r\n-        return _broker.isDirty(o);\r\n-    }\r\n-\r\n-    public boolean isTransactional(Object o) {\r\n-        assertNotCloseInvoked();\r\n-        return _broker.isTransactional(o);\r\n-    }\r\n-\r\n-    public boolean isPersistent(Object o) {\r\n-        assertNotCloseInvoked();\r\n-        return _broker.isPersistent(o);\r\n-    }\r\n-\r\n-    public boolean isNewlyPersistent(Object o) {\r\n-        assertNotCloseInvoked();\r\n-        return _broker.isNew(o);\r\n-    }\r\n-\r\n-    public boolean isRemoved(Object o) {\r\n-        assertNotCloseInvoked();\r\n-        return _broker.isDeleted(o);\r\n-    }\r\n-\r\n-    public boolean isDetached(Object entity) {\r\n-        assertNotCloseInvoked();\r\n-        return _broker.isDetached(entity);\r\n-    }\r\n-\r\n-    public Object getVersion(Object o) {\r\n-        assertNotCloseInvoked();\r\n-        return _broker.getVersion(o);\r\n-    }\r\n-\r\n-    /**\r\n-     * Throw appropriate exception if close has been invoked but the broker\r\n-     * is still open.  We test only for this because if the broker is already\r\n-     * closed, it will throw its own more informative exception when we \r\n-     * delegate the pending operation to it.\r\n-     */\r\n-    void assertNotCloseInvoked() {\r\n-        if (!_broker.isClosed() && _broker.isCloseInvoked())\r\n-            throw new InvalidStateException(_loc.get(\"close-invoked\"), null,\r\n-                null, true);\r\n-    }\r\n-\r\n-    ////////////////////////////////\r\n-    // FindCallbacks implementation\r\n-    ////////////////////////////////\r\n-\r\n-    public Object processArgument(Object arg) {\r\n-        return arg;\r\n-    }\r\n-\r\n-    public Object processReturn(Object oid, OpenJPAStateManager sm) {\r\n-        return (sm == null || sm.isDeleted()) ? null : sm.getManagedInstance();\r\n-    }\r\n-\r\n-    //////////////////////////////\r\n-    // OpCallbacks implementation\r\n-    //////////////////////////////\r\n-\r\n-    public int processArgument(int op, Object obj, OpenJPAStateManager sm) {\r\n-        switch (op) {\r\n-            case OP_DELETE:\r\n-                // cascade through non-persistent non-detached instances\r\n-                if (sm == null && !_broker.isDetached(obj))\r\n-                    return ACT_CASCADE;\r\n-                if (sm != null && !sm.isDetached() && !sm.isPersistent())\r\n-                    return ACT_CASCADE;\r\n-                // ignore deleted instances\r\n-                if (sm != null && sm.isDeleted())\r\n-                    return ACT_NONE;\r\n-                break;\r\n-            case OP_ATTACH:\r\n-                // die on removed\r\n-                if (sm != null && sm.isDeleted())\r\n-                    throw new UserException(_loc.get(\"removed\",\r\n-                        Exceptions.toString(obj))).setFailedObject(obj);\r\n-                // cascade through managed instances\r\n-                if (sm != null && !sm.isDetached())\r\n-                    return ACT_CASCADE;\r\n-                break;\r\n-            case OP_REFRESH:\r\n-                // die on unmanaged instances\r\n-                if (sm == null)\r\n-                    throw new UserException(_loc.get(\"not-managed\",\r\n-                        Exceptions.toString(obj))).setFailedObject(obj);\r\n-                break;\r\n-        }\r\n-        return ACT_RUN | ACT_CASCADE;\r\n-    }\r\n-\r\n-    public int hashCode() {\r\n-        return _broker.hashCode();\r\n-    }\r\n-\r\n-    public boolean equals(Object other) {\r\n-        if (other == this)\r\n-            return true;\r\n-        if (!(other instanceof EntityManagerImpl))\r\n-            return false;\r\n-        return _broker.equals(((EntityManagerImpl) other)._broker);\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence;\n+\n+import java.lang.reflect.Array;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.EnumSet;\n+import javax.persistence.EntityManager;\n+import javax.persistence.FlushModeType;\n+import javax.persistence.LockModeType;\n+import javax.persistence.Query;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\n+import org.apache.openjpa.ee.ManagedRuntime;\n+import org.apache.openjpa.kernel.Broker;\n+import org.apache.openjpa.kernel.DelegatingBroker;\n+import org.apache.openjpa.kernel.FindCallbacks;\n+import org.apache.openjpa.kernel.LockLevels;\n+import org.apache.openjpa.kernel.OpCallbacks;\n+import org.apache.openjpa.kernel.OpenJPAStateManager;\n+import org.apache.openjpa.kernel.QueryFlushModes;\n+import org.apache.openjpa.kernel.QueryLanguages;\n+import org.apache.openjpa.kernel.Seq;\n+import org.apache.openjpa.kernel.jpql.JPQLParser;\n+import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.lib.util.Closeable;\n+import org.apache.openjpa.meta.ClassMetaData;\n+import org.apache.openjpa.meta.FieldMetaData;\n+import org.apache.openjpa.meta.QueryMetaData;\n+import org.apache.openjpa.meta.SequenceMetaData;\n+import org.apache.openjpa.util.Exceptions;\n+import org.apache.openjpa.util.ImplHelper;\n+import org.apache.openjpa.util.RuntimeExceptionTranslator;\n+import org.apache.openjpa.util.UserException;\n+\n+/**\n+ * Implementation of {@link EntityManager} interface.\n+ *\n+ * @author Patrick Linskey\n+ * @author Abe White\n+ * @nojavadoc\n+ */\n+public class EntityManagerImpl\n+    implements OpenJPAEntityManagerSPI,\n+    FindCallbacks, OpCallbacks, Closeable, OpenJPAEntityTransaction {\n+\n+    private static final Localizer _loc = Localizer.forPackage\n+        (EntityManagerImpl.class);\n+\n+    private final DelegatingBroker _broker;\n+    private final EntityManagerFactoryImpl _emf;\n+    private FetchPlan _fetch = null;\n+    private static final Object[] EMPTY_OBJECTS = new Object[0];\n+\n+    /**\n+     * Constructor; supply factory and delegate.\n+     */\n+    public EntityManagerImpl(EntityManagerFactoryImpl factory,\n+        Broker broker) {\n+        _emf = factory;\n+        RuntimeExceptionTranslator translator =\n+            PersistenceExceptions.getRollbackTranslator(this);\n+        _broker = new DelegatingBroker(broker, translator);\n+        _broker.setImplicitBehavior(this, translator);\n+    }\n+\n+    /**\n+     * Broker delegate.\n+     */\n+    public Broker getBroker() {\n+        return _broker.getDelegate();\n+    }\n+\n+    public OpenJPAEntityManagerFactory getEntityManagerFactory() {\n+        return _emf;\n+    }\n+\n+    public OpenJPAConfiguration getConfiguration() {\n+        return _broker.getConfiguration();\n+    }\n+\n+    public FetchPlan getFetchPlan() {\n+        assertNotCloseInvoked();\n+        _broker.lock();\n+        try {\n+            if (_fetch == null)\n+                _fetch = _emf.toFetchPlan(_broker,\n+                    _broker.getFetchConfiguration());\n+            return _fetch;\n+        } finally {\n+            _broker.unlock();\n+        }\n+    }\n+\n+    public ConnectionRetainMode getConnectionRetainMode() {\n+        return ConnectionRetainMode.fromKernelConstant(\n+            _broker.getConnectionRetainMode());\n+    }\n+\n+    public boolean isManaged() {\n+        return _broker.isManaged();\n+    }\n+\n+    public ManagedRuntime getManagedRuntime() {\n+        return _broker.getManagedRuntime();\n+    }\n+\n+    public boolean getSyncWithManagedTransactions() {\n+        return _broker.getSyncWithManagedTransactions();\n+    }\n+\n+    public void setSyncWithManagedTransactions(boolean sync) {\n+        assertNotCloseInvoked();\n+        _broker.setSyncWithManagedTransactions(sync);\n+    }\n+\n+    public ClassLoader getClassLoader() {\n+        return _broker.getClassLoader();\n+    }\n+\n+    public String getConnectionUserName() {\n+        return _broker.getConnectionUserName();\n+    }\n+\n+    public String getConnectionPassword() {\n+        return _broker.getConnectionPassword();\n+    }\n+\n+    public boolean getMultithreaded() {\n+        return _broker.getMultithreaded();\n+    }\n+\n+    public void setMultithreaded(boolean multithreaded) {\n+        assertNotCloseInvoked();\n+        _broker.setMultithreaded(multithreaded);\n+    }\n+\n+    public boolean getIgnoreChanges() {\n+        return _broker.getIgnoreChanges();\n+    }\n+\n+    public void setIgnoreChanges(boolean val) {\n+        assertNotCloseInvoked();\n+        _broker.setIgnoreChanges(val);\n+    }\n+\n+    public boolean getNontransactionalRead() {\n+        return _broker.getNontransactionalRead();\n+    }\n+\n+    public void setNontransactionalRead(boolean val) {\n+        assertNotCloseInvoked();\n+        _broker.setNontransactionalRead(val);\n+    }\n+\n+    public boolean getNontransactionalWrite() {\n+        return _broker.getNontransactionalWrite();\n+    }\n+\n+    public void setNontransactionalWrite(boolean val) {\n+        assertNotCloseInvoked();\n+        _broker.setNontransactionalWrite(val);\n+    }\n+\n+    public boolean getOptimistic() {\n+        return _broker.getOptimistic();\n+    }\n+\n+    public void setOptimistic(boolean val) {\n+        assertNotCloseInvoked();\n+        _broker.setOptimistic(val);\n+    }\n+\n+    public RestoreStateType getRestoreState() {\n+        return RestoreStateType.fromKernelConstant(_broker.getRestoreState());\n+    }\n+\n+    public void setRestoreState(RestoreStateType val) {\n+        assertNotCloseInvoked();\n+        _broker.setRestoreState(val.toKernelConstant());\n+    }\n+\n+    public boolean getRetainState() {\n+        return _broker.getRetainState();\n+    }\n+\n+    public void setRetainState(boolean val) {\n+        assertNotCloseInvoked();\n+        _broker.setRetainState(val);\n+    }\n+\n+    public AutoClearType getAutoClear() {\n+        return AutoClearType.fromKernelConstant(_broker.getAutoClear());\n+    }\n+\n+    public void setAutoClear(AutoClearType val) {\n+        assertNotCloseInvoked();\n+        _broker.setAutoClear(val.toKernelConstant());\n+    }\n+\n+    public DetachStateType getDetachState() {\n+        return DetachStateType.fromKernelConstant(_broker.getDetachState());\n+    }\n+\n+    public void setDetachState(DetachStateType type) {\n+        assertNotCloseInvoked();\n+        _broker.setDetachState(type.toKernelConstant());\n+    }\n+\n+    public EnumSet<AutoDetachType> getAutoDetach() {\n+        return AutoDetachType.toEnumSet(_broker.getAutoDetach());\n+    }\n+\n+    public void setAutoDetach(AutoDetachType flag) {\n+        assertNotCloseInvoked();\n+        _broker.setAutoDetach(AutoDetachType.fromEnumSet(EnumSet.of(flag)));\n+    }\n+\n+    public void setAutoDetach(EnumSet<AutoDetachType> flags) {\n+        assertNotCloseInvoked();\n+        _broker.setAutoDetach(AutoDetachType.fromEnumSet(flags));\n+    }\n+\n+    public void setAutoDetach(int flag, boolean on) {\n+        assertNotCloseInvoked();\n+        _broker.setAutoDetach(flag, on);\n+    }\n+\n+    public boolean getEvictFromStoreCache() {\n+        return _broker.getEvictFromDataCache();\n+    }\n+\n+    public void setEvictFromStoreCache(boolean evict) {\n+        assertNotCloseInvoked();\n+        _broker.setEvictFromDataCache(evict);\n+    }\n+\n+    public boolean getPopulateStoreCache() {\n+        return _broker.getPopulateDataCache();\n+    }\n+\n+    public void setPopulateStoreCache(boolean cache) {\n+        assertNotCloseInvoked();\n+        _broker.setPopulateDataCache(cache);\n+    }\n+\n+    public boolean isTrackChangesByType() {\n+        return _broker.isTrackChangesByType();\n+    }\n+\n+    public void setTrackChangesByType(boolean trackByType) {\n+        assertNotCloseInvoked();\n+        _broker.setTrackChangesByType(trackByType);\n+    }\n+\n+    public Object getUserObject(Object key) {\n+        return _broker.getUserObject(key);\n+    }\n+\n+    public Object putUserObject(Object key, Object val) {\n+        assertNotCloseInvoked();\n+        return _broker.putUserObject(key, val);\n+    }\n+\n+    public void addTransactionListener(Object listener) {\n+        assertNotCloseInvoked();\n+        _broker.addTransactionListener(listener);\n+    }\n+\n+    public void removeTransactionListener(Object listener) {\n+        assertNotCloseInvoked();\n+        _broker.removeTransactionListener(listener);\n+    }\n+\n+    public EnumSet<CallbackMode> getTransactionListenerCallbackMode() {\n+        return CallbackMode.toEnumSet(\n+            _broker.getTransactionListenerCallbackMode());\n+    }\n+\n+    public void setTransactionListenerCallbackMode(CallbackMode mode) {\n+        assertNotCloseInvoked();\n+        _broker.setTransactionListenerCallbackMode(\n+            CallbackMode.fromEnumSet(EnumSet.of(mode)));\n+    }\n+\n+    public void setTransactionListenerCallbackMode(EnumSet<CallbackMode> modes){\n+        assertNotCloseInvoked();\n+        _broker.setTransactionListenerCallbackMode(\n+            CallbackMode.fromEnumSet(modes));\n+    }\n+\n+    public void addLifecycleListener(Object listener, Class... classes) {\n+        assertNotCloseInvoked();\n+        _broker.addLifecycleListener(listener, classes);\n+    }\n+\n+    public void removeLifecycleListener(Object listener) {\n+        assertNotCloseInvoked();\n+        _broker.removeLifecycleListener(listener);\n+    }\n+\n+    public EnumSet<CallbackMode> getLifecycleListenerCallbackMode() {\n+        return CallbackMode.toEnumSet(\n+            _broker.getLifecycleListenerCallbackMode());\n+    }\n+\n+    public void setLifecycleListenerCallbackMode(CallbackMode mode) {\n+        assertNotCloseInvoked();\n+        _broker.setLifecycleListenerCallbackMode(\n+            CallbackMode.fromEnumSet(EnumSet.of(mode)));\n+    }\n+\n+    public void setLifecycleListenerCallbackMode(EnumSet<CallbackMode> modes) {\n+        assertNotCloseInvoked();\n+        _broker.setLifecycleListenerCallbackMode(\n+            CallbackMode.fromEnumSet(modes));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public <T> T getReference(Class<T> cls, Object oid) {\n+        assertNotCloseInvoked();\n+        oid = _broker.newObjectId(cls, oid);\n+        return (T) _broker.find(oid, false, this);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public <T> T find(Class<T> cls, Object oid) {\n+        assertNotCloseInvoked();\n+        oid = _broker.newObjectId(cls, oid);\n+        return (T) _broker.find(oid, true, this);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public <T> T[] findAll(Class<T> cls, Object... oids) {\n+        if (oids.length == 0)\n+            return (T[]) Array.newInstance(cls, 0);\n+        Collection<T> ret = findAll(cls, Arrays.asList(oids));\n+        return ret.toArray((T[]) Array.newInstance(cls, ret.size()));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public <T> Collection<T> findAll(final Class<T> cls, Collection oids) {\n+        assertNotCloseInvoked();\n+        Object[] objs = _broker.findAll(oids, true, new FindCallbacks() {\n+            public Object processArgument(Object oid) {\n+                return _broker.newObjectId(cls, oid);\n+            }\n+\n+            public Object processReturn(Object oid, OpenJPAStateManager sm) {\n+                return EntityManagerImpl.this.processReturn(oid, sm);\n+            }\n+        });\n+        return (Collection<T>) Arrays.asList(objs);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public <T> T findCached(Class<T> cls, Object oid) {\n+        assertNotCloseInvoked();\n+        return (T) _broker.findCached(_broker.newObjectId(cls, oid), this);\n+    }\n+\n+    public Class getObjectIdClass(Class cls) {\n+        assertNotCloseInvoked();\n+        if (cls == null)\n+            return null;\n+        return JPAFacadeHelper.fromOpenJPAObjectIdClass\n+                (_broker.getObjectIdType(cls));\n+    }\n+\n+    public OpenJPAEntityTransaction getTransaction() {\n+        if (_broker.isManaged())\n+            throw new InvalidStateException(_loc.get(\"get-managed-trans\"),\n+                null, null, false);\n+        return this;\n+    }\n+\n+    public void joinTransaction() {\n+        assertNotCloseInvoked();\n+        if (!_broker.syncWithManagedTransaction())\n+            throw new TransactionRequiredException(_loc.get\n+                (\"no-managed-trans\"), null, null, false);\n+    }\n+\n+    public void begin() {\n+        _broker.begin();\n+    }\n+\n+    public void commit() {\n+        try {\n+            _broker.commit();\n+        } catch (RollbackException e) {\n+            throw e;\n+        } catch (IllegalStateException e) {\n+            throw e;\n+        } catch (Exception e) {\n+            // RollbackExceptions are special and aren't handled by the\n+            // normal exception translator, since the spec says they\n+            // should be thrown whenever the commit fails for any reason at\n+            // all, wheras the exception translator handles exceptions that\n+            // are caused for specific reasons\n+            throw new RollbackException(e);\n+        }\n+    }\n+\n+    public void rollback() {\n+        _broker.rollback();\n+    }\n+\n+    public void commitAndResume() {\n+        _broker.commitAndResume();\n+    }\n+\n+    public void rollbackAndResume() {\n+        _broker.rollbackAndResume();\n+    }\n+\n+    public Throwable getRollbackCause() {\n+        if (!isActive())\n+            throw new IllegalStateException(_loc.get(\"no-transaction\")\n+                .getMessage());\n+\n+        return _broker.getRollbackCause();\n+    }\n+\n+    public boolean getRollbackOnly() {\n+        if (!isActive())\n+            throw new IllegalStateException(_loc.get(\"no-transaction\")\n+                .getMessage());\n+\n+        return _broker.getRollbackOnly();\n+    }\n+\n+    public void setRollbackOnly() {\n+        _broker.setRollbackOnly();\n+    }\n+\n+    public void setRollbackOnly(Throwable cause) {\n+        _broker.setRollbackOnly(cause);\n+    }\n+\n+    public void setSavepoint(String name) {\n+        assertNotCloseInvoked();\n+        _broker.setSavepoint(name);\n+    }\n+\n+    public void rollbackToSavepoint() {\n+        assertNotCloseInvoked();\n+        _broker.rollbackToSavepoint();\n+    }\n+\n+    public void rollbackToSavepoint(String name) {\n+        assertNotCloseInvoked();\n+        _broker.rollbackToSavepoint(name);\n+    }\n+\n+    public void releaseSavepoint() {\n+        assertNotCloseInvoked();\n+        _broker.releaseSavepoint();\n+    }\n+\n+    public void releaseSavepoint(String name) {\n+        assertNotCloseInvoked();\n+        _broker.releaseSavepoint(name);\n+    }\n+\n+    public void flush() {\n+        assertNotCloseInvoked();\n+        _broker.assertOpen();\n+        _broker.assertActiveTransaction();\n+        _broker.flush();\n+    }\n+\n+    public void preFlush() {\n+        assertNotCloseInvoked();\n+        _broker.preFlush();\n+    }\n+\n+    public void validateChanges() {\n+        assertNotCloseInvoked();\n+        _broker.validateChanges();\n+    }\n+\n+    public boolean isActive() {\n+        return isOpen() && _broker.isActive();\n+    }\n+\n+    public boolean isStoreActive() {\n+        return _broker.isStoreActive();\n+    }\n+\n+    public void beginStore() {\n+        _broker.beginStore();\n+    }\n+\n+    public boolean contains(Object entity) {\n+        assertNotCloseInvoked();\n+        if (entity == null)\n+            return false;\n+        OpenJPAStateManager sm = _broker.getStateManager(entity);\n+        if (sm == null\n+            && !ImplHelper.isManagedType(getConfiguration(), entity.getClass()))\n+            throw new ArgumentException(_loc.get(\"not-entity\",\n+                entity.getClass()), null, null, true);\n+        return sm != null && !sm.isDeleted();\n+    }\n+\n+    public boolean containsAll(Object... entities) {\n+        for (Object entity : entities)\n+            if (!contains(entity))\n+                return false;\n+        return true;\n+    }\n+\n+    public boolean containsAll(Collection entities) {\n+        for (Object entity : entities)\n+            if (!contains(entity))\n+                return false;\n+        return true;\n+    }\n+\n+    public void persist(Object entity) {\n+        assertNotCloseInvoked();\n+        _broker.persist(entity, this);\n+    }\n+\n+    public void persistAll(Object... entities) {\n+        persistAll(Arrays.asList(entities));\n+    }\n+\n+    public void persistAll(Collection entities) {\n+        assertNotCloseInvoked();\n+        _broker.persistAll(entities, this);\n+    }\n+\n+    public void remove(Object entity) {\n+        assertNotCloseInvoked();\n+        _broker.delete(entity, this);\n+    }\n+\n+    public void removeAll(Object... entities) {\n+        removeAll(Arrays.asList(entities));\n+    }\n+\n+    public void removeAll(Collection entities) {\n+        assertNotCloseInvoked();\n+        _broker.deleteAll(entities, this);\n+    }\n+\n+    public void release(Object entity) {\n+        assertNotCloseInvoked();\n+        _broker.release(entity, this);\n+    }\n+\n+    public void releaseAll(Collection entities) {\n+        assertNotCloseInvoked();\n+        _broker.releaseAll(entities, this);\n+    }\n+\n+    public void releaseAll(Object... entities) {\n+        releaseAll(Arrays.asList(entities));\n+    }\n+\n+    public void refresh(Object entity) {\n+        assertNotCloseInvoked();\n+        _broker.assertWriteOperation();\n+        _broker.refresh(entity, this);\n+    }\n+\n+    public void refreshAll() {\n+        assertNotCloseInvoked();\n+        _broker.assertWriteOperation();\n+        _broker.refreshAll(_broker.getTransactionalObjects(), this);\n+    }\n+\n+    public void refreshAll(Collection entities) {\n+        assertNotCloseInvoked();\n+        _broker.assertWriteOperation();\n+        _broker.refreshAll(entities, this);\n+    }\n+\n+    public void refreshAll(Object... entities) {\n+        refreshAll(Arrays.asList(entities));\n+    }\n+\n+    public void retrieve(Object entity) {\n+        assertNotCloseInvoked();\n+        _broker.retrieve(entity, true, this);\n+    }\n+\n+    public void retrieveAll(Collection entities) {\n+        assertNotCloseInvoked();\n+        _broker.retrieveAll(entities, true, this);\n+    }\n+\n+    public void retrieveAll(Object... entities) {\n+        retrieveAll(Arrays.asList(entities));\n+    }\n+\n+    public void evict(Object entity) {\n+        assertNotCloseInvoked();\n+        _broker.evict(entity, this);\n+    }\n+\n+    public void evictAll(Collection entities) {\n+        assertNotCloseInvoked();\n+        _broker.evictAll(entities, this);\n+    }\n+\n+    public void evictAll(Object... entities) {\n+        evictAll(Arrays.asList(entities));\n+    }\n+\n+    public void evictAll() {\n+        assertNotCloseInvoked();\n+        _broker.evictAll(this);\n+    }\n+\n+    public void evictAll(Class cls) {\n+        assertNotCloseInvoked();\n+        _broker.evictAll(_broker.newExtent(cls, true), this);\n+    }\n+\n+    public void evictAll(Extent extent) {\n+        assertNotCloseInvoked();\n+        _broker.evictAll(((ExtentImpl) extent).getDelegate(), this);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public <T> T detach(T entity) {\n+        assertNotCloseInvoked();\n+        return (T) _broker.detach(entity, this);\n+    }\n+\n+    public Object[] detachAll(Object... entities) {\n+        assertNotCloseInvoked();\n+        return _broker.detachAll(Arrays.asList(entities), this);\n+    }\n+\n+    public Collection detachAll(Collection entities) {\n+        assertNotCloseInvoked();\n+        return Arrays.asList(_broker.detachAll(entities, this));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public <T> T merge(T entity) {\n+        assertNotCloseInvoked();\n+        return (T) _broker.attach(entity, true, this);\n+    }\n+\n+    public Object[] mergeAll(Object... entities) {\n+        if (entities.length == 0)\n+            return EMPTY_OBJECTS;\n+        return mergeAll(Arrays.asList(entities)).toArray();\n+    }\n+\n+    public Collection mergeAll(Collection entities) {\n+        assertNotCloseInvoked();\n+        return Arrays.asList(_broker.attachAll(entities, true, this));\n+    }\n+\n+    public void transactional(Object entity, boolean updateVersion) {\n+        assertNotCloseInvoked();\n+        _broker.transactional(entity, updateVersion, this);\n+    }\n+\n+    public void transactionalAll(Collection objs, boolean updateVersion) {\n+        assertNotCloseInvoked();\n+        _broker.transactionalAll(objs, updateVersion, this);\n+    }\n+\n+    public void transactionalAll(Object[] objs, boolean updateVersion) {\n+        assertNotCloseInvoked();\n+        _broker.transactionalAll(Arrays.asList(objs), updateVersion, this);\n+    }\n+\n+    public void nontransactional(Object entity) {\n+        assertNotCloseInvoked();\n+        _broker.nontransactional(entity, this);\n+    }\n+\n+    public void nontransactionalAll(Collection objs) {\n+        assertNotCloseInvoked();\n+        _broker.nontransactionalAll(objs, this);\n+    }\n+\n+    public void nontransactionalAll(Object[] objs) {\n+        assertNotCloseInvoked();\n+        _broker.nontransactionalAll(Arrays.asList(objs), this);\n+    }\n+\n+    public Generator getNamedGenerator(String name) {\n+        assertNotCloseInvoked();\n+        try {\n+            SequenceMetaData meta = _broker.getConfiguration().\n+                getMetaDataRepositoryInstance().getSequenceMetaData(name,\n+                _broker.getClassLoader(), true);\n+            Seq seq = meta.getInstance(_broker.getClassLoader());\n+            return new GeneratorImpl(seq, name, _broker, null);\n+        } catch (RuntimeException re) {\n+            throw PersistenceExceptions.toPersistenceException(re);\n+        }\n+    }\n+\n+    public Generator getIdGenerator(Class forClass) {\n+        assertNotCloseInvoked();\n+        try {\n+            ClassMetaData meta = _broker.getConfiguration().\n+                getMetaDataRepositoryInstance().getMetaData(forClass,\n+                _broker.getClassLoader(), true);\n+            Seq seq = _broker.getIdentitySequence(meta);\n+            return (seq == null) ? null : new GeneratorImpl(seq, null, _broker,\n+                meta);\n+        } catch (Exception e) {\n+            throw PersistenceExceptions.toPersistenceException(e);\n+        }\n+    }\n+\n+    public Generator getFieldGenerator(Class forClass, String fieldName) {\n+        assertNotCloseInvoked();\n+        try {\n+            ClassMetaData meta = _broker.getConfiguration().\n+                getMetaDataRepositoryInstance().getMetaData(forClass,\n+                _broker.getClassLoader(), true);\n+            FieldMetaData fmd = meta.getField(fieldName);\n+            if (fmd == null)\n+                throw new ArgumentException(_loc.get(\"no-named-field\",\n+                    forClass, fieldName), null, null, false);\n+\n+            Seq seq = _broker.getValueSequence(fmd);\n+            return (seq == null) ? null : new GeneratorImpl(seq, null, _broker,\n+                meta);\n+        } catch (Exception e) {\n+            throw PersistenceExceptions.toPersistenceException(e);\n+        }\n+    }\n+\n+    public <T> Extent<T> createExtent(Class<T> cls, boolean subclasses) {\n+        assertNotCloseInvoked();\n+        return new ExtentImpl<T>(this, _broker.newExtent(cls, subclasses));\n+    }\n+\n+    public OpenJPAQuery createQuery(String query) {\n+        return createQuery(JPQLParser.LANG_JPQL, query);\n+    }\n+\n+    public OpenJPAQuery createQuery(String language, String query) {\n+        assertNotCloseInvoked();\n+        return new QueryImpl(this, _broker.newQuery(language, query));\n+    }\n+\n+    public OpenJPAQuery createQuery(Query query) {\n+        if (query == null)\n+            return createQuery((String) null);\n+        assertNotCloseInvoked();\n+        org.apache.openjpa.kernel.Query q = ((QueryImpl) query).getDelegate();\n+        return new QueryImpl(this, _broker.newQuery(q.getLanguage(),\n+            q));\n+    }\n+\n+    public OpenJPAQuery createNamedQuery(String name) {\n+        assertNotCloseInvoked();\n+        _broker.assertOpen();\n+        try {\n+            QueryMetaData meta = _broker.getConfiguration().\n+                getMetaDataRepositoryInstance().getQueryMetaData(null, name,\n+                _broker.getClassLoader(), true);\n+            org.apache.openjpa.kernel.Query del =\n+                _broker.newQuery(meta.getLanguage(), null);\n+            meta.setInto(del);\n+            del.compile();\n+\n+            OpenJPAQuery q = new QueryImpl(this, del);\n+            String[] hints = meta.getHintKeys();\n+            Object[] values = meta.getHintValues();\n+            for (int i = 0; i < hints.length; i++)\n+                q.setHint(hints[i], values[i]);\n+            return q;\n+        } catch (RuntimeException re) {\n+            throw PersistenceExceptions.toPersistenceException(re);\n+        }\n+    }\n+\n+    public OpenJPAQuery createNativeQuery(String query) {\n+        validateSQL(query);\n+        return createQuery(QueryLanguages.LANG_SQL, query);\n+    }\n+\n+    public OpenJPAQuery createNativeQuery(String query, Class cls) {\n+        return createNativeQuery(query).setResultClass(cls);\n+    }\n+\n+    public OpenJPAQuery createNativeQuery(String query, String mappingName) {\n+        assertNotCloseInvoked();\n+        validateSQL(query);\n+        org.apache.openjpa.kernel.Query kernelQuery = _broker.newQuery(\n+            QueryLanguages.LANG_SQL, query);\n+        kernelQuery.setResultMapping(null, mappingName);\n+        return new QueryImpl(this, kernelQuery);\n+    }\n+\n+    /**\n+     * Validate that the user provided SQL.\n+     */\n+    private static void validateSQL(String query) {\n+        if (StringUtils.trimToNull(query) == null)\n+            throw new ArgumentException(_loc.get(\"no-sql\"), null, null, false);\n+    }\n+\n+    public void setFlushMode(FlushModeType flushMode) {\n+        assertNotCloseInvoked();\n+        _broker.assertOpen();\n+        _broker.getFetchConfiguration().setFlushBeforeQueries\n+            (toFlushBeforeQueries(flushMode));\n+    }\n+\n+    public FlushModeType getFlushMode() {\n+        assertNotCloseInvoked();\n+        _broker.assertOpen();\n+        return fromFlushBeforeQueries(_broker.getFetchConfiguration().\n+            getFlushBeforeQueries());\n+    }\n+\n+    /**\n+     * Translate our internal flush constant to a flush mode enum value.\n+     */\n+    static FlushModeType fromFlushBeforeQueries(int flush) {\n+        switch (flush) {\n+            case QueryFlushModes.FLUSH_TRUE:\n+                return FlushModeType.AUTO;\n+            case QueryFlushModes.FLUSH_FALSE:\n+                return FlushModeType.COMMIT;\n+            default:\n+                return null;\n+        }\n+    }\n+\n+    /**\n+     * Translate a flush mode enum value to our internal flush constant.\n+     */\n+    static int toFlushBeforeQueries(FlushModeType flushMode) {\n+        // choose default for null\n+        if (flushMode == null)\n+            return QueryFlushModes.FLUSH_WITH_CONNECTION;\n+        if (flushMode == FlushModeType.AUTO)\n+            return QueryFlushModes.FLUSH_TRUE;\n+        if (flushMode == FlushModeType.COMMIT)\n+            return QueryFlushModes.FLUSH_FALSE;\n+        throw new ArgumentException(flushMode.toString(), null, null, false);\n+    }\n+\n+    public void clear() {\n+        assertNotCloseInvoked();\n+        _broker.detachAll(this, false);\n+    }\n+\n+    public Object getDelegate() {\n+        _broker.assertOpen();\n+        assertNotCloseInvoked();\n+        return this;\n+    }\n+\n+    public LockModeType getLockMode(Object entity) {\n+        assertNotCloseInvoked();\n+        return fromLockLevel(_broker.getLockLevel(entity));\n+    }\n+\n+    public void lock(Object entity, LockModeType mode) {\n+        assertNotCloseInvoked();\n+        _broker.lock(entity, toLockLevel(mode), -1, this);\n+    }\n+\n+    public void lock(Object entity) {\n+        assertNotCloseInvoked();\n+        _broker.lock(entity, this);\n+    }\n+\n+    public void lock(Object entity, LockModeType mode, int timeout) {\n+        assertNotCloseInvoked();\n+        _broker.lock(entity, toLockLevel(mode), timeout, this);\n+    }\n+\n+    public void lockAll(Collection entities) {\n+        assertNotCloseInvoked();\n+        _broker.lockAll(entities, this);\n+    }\n+\n+    public void lockAll(Collection entities, LockModeType mode, int timeout) {\n+        assertNotCloseInvoked();\n+        _broker.lockAll(entities, toLockLevel(mode), timeout, this);\n+    }\n+\n+    public void lockAll(Object... entities) {\n+        lockAll(Arrays.asList(entities));\n+    }\n+\n+    public void lockAll(Object[] entities, LockModeType mode, int timeout) {\n+        lockAll(Arrays.asList(entities), mode, timeout);\n+    }\n+\n+    /**\n+     * Translate our internal lock level to a javax.persistence enum value.\n+     */\n+    static LockModeType fromLockLevel(int level) {\n+        if (level < LockLevels.LOCK_READ)\n+            return null;\n+        if (level < LockLevels.LOCK_WRITE)\n+            return LockModeType.READ;\n+        return LockModeType.WRITE;\n+    }\n+\n+    /**\n+     * Translate the javax.persistence enum value to our internal lock level.\n+     */\n+    static int toLockLevel(LockModeType mode) {\n+        if (mode == null)\n+            return LockLevels.LOCK_NONE;\n+        if (mode == LockModeType.READ)\n+            return LockLevels.LOCK_READ;\n+        if (mode == LockModeType.WRITE)\n+            return LockLevels.LOCK_WRITE;\n+        throw new ArgumentException(mode.toString(), null, null, true);\n+    }\n+\n+    public boolean cancelAll() {\n+        return _broker.cancelAll();\n+    }\n+\n+    public Object getConnection() {\n+        return _broker.getConnection();\n+    }\n+\n+    public Collection getManagedObjects() {\n+        return _broker.getManagedObjects();\n+    }\n+\n+    public Collection getTransactionalObjects() {\n+        return _broker.getTransactionalObjects();\n+    }\n+\n+    public Collection getPendingTransactionalObjects() {\n+        return _broker.getPendingTransactionalObjects();\n+    }\n+\n+    public Collection getDirtyObjects() {\n+        return _broker.getDirtyObjects();\n+    }\n+\n+    public boolean getOrderDirtyObjects() {\n+        return _broker.getOrderDirtyObjects();\n+    }\n+\n+    public void setOrderDirtyObjects(boolean order) {\n+        assertNotCloseInvoked();\n+        _broker.setOrderDirtyObjects(order);\n+    }\n+\n+    public void dirtyClass(Class cls) {\n+        assertNotCloseInvoked();\n+        _broker.dirtyType(cls);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public Collection<Class> getPersistedClasses() {\n+        return (Collection<Class>) _broker.getPersistedTypes();\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public Collection<Class> getUpdatedClasses() {\n+        return (Collection<Class>) _broker.getUpdatedTypes();\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public Collection<Class> getRemovedClasses() {\n+        return (Collection<Class>) _broker.getDeletedTypes();\n+    }\n+\n+    public <T> T createInstance(Class<T> cls) {\n+        assertNotCloseInvoked();\n+        return (T) _broker.newInstance(cls);\n+    }\n+\n+    public void close() {\n+        assertNotCloseInvoked();\n+        _broker.close();\n+    }\n+\n+    public boolean isOpen() {\n+        return !_broker.isCloseInvoked();\n+    }\n+\n+    public void dirty(Object o, String field) {\n+        assertNotCloseInvoked();\n+        OpenJPAStateManager sm = _broker.getStateManager(o);\n+        try {\n+            if (sm != null)\n+                sm.dirty(field);\n+        } catch (Exception e) {\n+            throw PersistenceExceptions.toPersistenceException(e);\n+        }\n+    }\n+\n+    public Object getObjectId(Object o) {\n+        assertNotCloseInvoked();\n+        return JPAFacadeHelper.fromOpenJPAObjectId(_broker.getObjectId(o));\n+    }\n+\n+    public boolean isDirty(Object o) {\n+        assertNotCloseInvoked();\n+        return _broker.isDirty(o);\n+    }\n+\n+    public boolean isTransactional(Object o) {\n+        assertNotCloseInvoked();\n+        return _broker.isTransactional(o);\n+    }\n+\n+    public boolean isPersistent(Object o) {\n+        assertNotCloseInvoked();\n+        return _broker.isPersistent(o);\n+    }\n+\n+    public boolean isNewlyPersistent(Object o) {\n+        assertNotCloseInvoked();\n+        return _broker.isNew(o);\n+    }\n+\n+    public boolean isRemoved(Object o) {\n+        assertNotCloseInvoked();\n+        return _broker.isDeleted(o);\n+    }\n+\n+    public boolean isDetached(Object entity) {\n+        assertNotCloseInvoked();\n+        return _broker.isDetached(entity);\n+    }\n+\n+    public Object getVersion(Object o) {\n+        assertNotCloseInvoked();\n+        return _broker.getVersion(o);\n+    }\n+\n+    /**\n+     * Throw appropriate exception if close has been invoked but the broker\n+     * is still open.  We test only for this because if the broker is already\n+     * closed, it will throw its own more informative exception when we \n+     * delegate the pending operation to it.\n+     */\n+    void assertNotCloseInvoked() {\n+        if (!_broker.isClosed() && _broker.isCloseInvoked())\n+            throw new InvalidStateException(_loc.get(\"close-invoked\"), null,\n+                null, true);\n+    }\n+\n+    ////////////////////////////////\n+    // FindCallbacks implementation\n+    ////////////////////////////////\n+\n+    public Object processArgument(Object arg) {\n+        return arg;\n+    }\n+\n+    public Object processReturn(Object oid, OpenJPAStateManager sm) {\n+        return (sm == null || sm.isDeleted()) ? null : sm.getManagedInstance();\n+    }\n+\n+    //////////////////////////////\n+    // OpCallbacks implementation\n+    //////////////////////////////\n+\n+    public int processArgument(int op, Object obj, OpenJPAStateManager sm) {\n+        switch (op) {\n+            case OP_DELETE:\n+                // cascade through non-persistent non-detached instances\n+                if (sm == null && !_broker.isDetached(obj))\n+                    return ACT_CASCADE;\n+                if (sm != null && !sm.isDetached() && !sm.isPersistent())\n+                    return ACT_CASCADE;\n+                // ignore deleted instances\n+                if (sm != null && sm.isDeleted())\n+                    return ACT_NONE;\n+                break;\n+            case OP_ATTACH:\n+                // die on removed\n+                if (sm != null && sm.isDeleted())\n+                    throw new UserException(_loc.get(\"removed\",\n+                        Exceptions.toString(obj))).setFailedObject(obj);\n+                // cascade through managed instances\n+                if (sm != null && !sm.isDetached())\n+                    return ACT_CASCADE;\n+                break;\n+            case OP_REFRESH:\n+                // die on unmanaged instances\n+                if (sm == null)\n+                    throw new UserException(_loc.get(\"not-managed\",\n+                        Exceptions.toString(obj))).setFailedObject(obj);\n+                break;\n+        }\n+        return ACT_RUN | ACT_CASCADE;\n+    }\n+\n+    public int hashCode() {\n+        return _broker.hashCode();\n+    }\n+\n+    public boolean equals(Object other) {\n+        if (other == this)\n+            return true;\n+        if (!(other instanceof EntityManagerImpl))\n+            return false;\n+        return _broker.equals(((EntityManagerImpl) other)._broker);\n+    }\n+}"},{"sha":"ffef42e7559028b56d6afd197fcfa802abdad5a6","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/JPAFacadeHelper.java","status":"modified","additions":319,"deletions":319,"changes":638,"blob_url":"https://github.com/apache/openjpa/blob/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/JPAFacadeHelper.java","raw_url":"https://github.com/apache/openjpa/raw/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/JPAFacadeHelper.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/JPAFacadeHelper.java?ref=cd4c8839f87f750e2655a5b98f552e2ba4031a67","patch":"@@ -1,319 +1,319 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence;\r\n-\r\n-import java.math.BigDecimal;\r\n-import java.math.BigInteger;\r\n-import java.util.ArrayList;\r\n-import java.util.Collection;\r\n-import java.util.Iterator;\r\n-import javax.persistence.EntityManager;\r\n-import javax.persistence.EntityManagerFactory;\r\n-\r\n-import org.apache.openjpa.kernel.Broker;\r\n-import org.apache.openjpa.kernel.BrokerFactory;\r\n-import org.apache.openjpa.meta.ClassMetaData;\r\n-import org.apache.openjpa.util.BigDecimalId;\r\n-import org.apache.openjpa.util.BigIntegerId;\r\n-import org.apache.openjpa.util.ByteId;\r\n-import org.apache.openjpa.util.CharId;\r\n-import org.apache.openjpa.util.DoubleId;\r\n-import org.apache.openjpa.util.FloatId;\r\n-import org.apache.openjpa.util.Id;\r\n-import org.apache.openjpa.util.ImplHelper;\r\n-import org.apache.openjpa.util.IntId;\r\n-import org.apache.openjpa.util.LongId;\r\n-import org.apache.openjpa.util.ObjectId;\r\n-import org.apache.openjpa.util.OpenJPAId;\r\n-import org.apache.openjpa.util.ShortId;\r\n-import org.apache.openjpa.util.StringId;\r\n-import org.apache.openjpa.lib.util.Localizer;\r\n-\r\n-/**\r\n- * Helper class for switching between OpenJPA's JPA facade and the underlying\r\n- * Broker kernel.\r\n- *\r\n- * @since 1.0.0\r\n- * @nojavadoc\r\n- */\r\n-public class JPAFacadeHelper {\r\n-\r\n-    public static final String EM_KEY =\r\n-        \"org.apache.openjpa.persistence.EntityManager\";\r\n-    public static final String EMF_KEY =\r\n-        \"org.apache.openjpa.persistence.EntityManagerFactory\";\r\n-\r\n-    private static final Localizer _loc =\r\n-        Localizer.forPackage(JPAFacadeHelper.class);\r\n-\r\n-    public static OpenJPAEntityManagerFactory toEntityManagerFactory(\r\n-        BrokerFactory factory) {\r\n-        if (factory == null)\r\n-            return null;\r\n-\r\n-        factory.lock();\r\n-        try {\r\n-            OpenJPAEntityManagerFactory emf = (OpenJPAEntityManagerFactory)\r\n-                factory.getUserObject(EMF_KEY);\r\n-            if (emf == null) {\r\n-                emf = EntityManagerFactoryValue.newFactory(factory);\r\n-                factory.putUserObject(EMF_KEY, emf);\r\n-            }\r\n-            return emf;\r\n-        } catch (Exception e) {\r\n-            throw PersistenceExceptions.toPersistenceException(e);\r\n-        } finally {\r\n-            factory.unlock();\r\n-        }\r\n-    }\r\n-\r\n-    /**\r\n-     * Return the underlying broker factory for the given persistence manager\r\n-     * factory facade.\r\n-     */\r\n-    public static BrokerFactory toBrokerFactory(EntityManagerFactory emf) {\r\n-        if (emf == null)\r\n-            return null;\r\n-        if (!(emf instanceof EntityManagerFactoryImpl)) {\r\n-            Class c = emf.getClass();\r\n-            try {\r\n-                // either cast here may fail\r\n-                emf = (EntityManagerFactoryImpl) ((OpenJPAEntityManagerFactory)\r\n-                    emf).getUserObject(EMF_KEY);\r\n-            } catch (ClassCastException cce) {\r\n-                throw new ArgumentException(_loc.get(\r\n-                    \"cant-convert-brokerfactory\", c), null, null, false);\r\n-            }\r\n-        }\r\n-        return ((EntityManagerFactoryImpl) emf).getBrokerFactory();\r\n-    }\r\n-\r\n-    /**\r\n-     * Return a persistence manager facade to the given broker retaining\r\n-     * previously associated persistence context type.\r\n-     */\r\n-    public static OpenJPAEntityManager toEntityManager(Broker broker) {\r\n-        if (broker == null)\r\n-            return null;\r\n-\r\n-        broker.lock();\r\n-        try {\r\n-            OpenJPAEntityManager em = (OpenJPAEntityManager)\r\n-                broker.getUserObject(EM_KEY);\r\n-            if (em == null) {\r\n-                EntityManagerFactoryImpl emf = (EntityManagerFactoryImpl)\r\n-                    toEntityManagerFactory(broker.getBrokerFactory());\r\n-                em = emf.newEntityManagerImpl(broker);\r\n-                broker.putUserObject(EM_KEY, em);\r\n-            }\r\n-            return em;\r\n-        } catch (Exception e) {\r\n-            throw PersistenceExceptions.toPersistenceException(e);\r\n-        } finally {\r\n-            broker.unlock();\r\n-        }\r\n-    }\r\n-\r\n-    /**\r\n-     * Return the underlying broker for the given entity manager facade.\r\n-     */\r\n-    public static Broker toBroker(EntityManager em) {\r\n-        if (em == null)\r\n-            return null;\r\n-        if (!(em instanceof EntityManagerImpl)) {\r\n-            Class c = em.getClass();\r\n-            try {\r\n-                // either cast here may fail\r\n-                em = (EntityManagerImpl) ((OpenJPAEntityManager) em).\r\n-                    getUserObject(EM_KEY);\r\n-            } catch (ClassCastException cce) {\r\n-                throw new ArgumentException(_loc.get(\"cant-convert-broker\", c),\r\n-                    null, null, false);\r\n-            }\r\n-        }\r\n-        return ((EntityManagerImpl) em).getBroker();\r\n-    }\r\n-\r\n-    /**\r\n-     * Returns the {@link org.apache.openjpa.meta.ClassMetaData} associated with the\r\n-     * persistent object <code>o</code>.\r\n-     */\r\n-    public static ClassMetaData getMetaData(Object o) {\r\n-        if (o == null)\r\n-            return null;\r\n-        EntityManager em = OpenJPAPersistence.getEntityManager(o);\r\n-        return (em == null) ? null : getMetaData(em,\r\n-            ImplHelper.getManagedInstance(o).getClass());\r\n-    }\r\n-\r\n-    /**\r\n-     * Returns the {@link org.apache.openjpa.meta.ClassMetaData} associated\r\n-     * with the persistent type <code>cls</code>.\r\n-     */\r\n-    public static ClassMetaData getMetaData(EntityManager em, Class cls) {\r\n-        if (em == null)\r\n-            throw new NullPointerException(\"em == null\");\r\n-\r\n-        OpenJPAEntityManagerSPI kem = (OpenJPAEntityManagerSPI)\r\n-            OpenJPAPersistence.cast(em);\r\n-        try {\r\n-            return kem.getConfiguration().getMetaDataRepositoryInstance().\r\n-                getMetaData(cls, kem.getClassLoader(), false);\r\n-        } catch (Exception e) {\r\n-            throw PersistenceExceptions.toPersistenceException(e);\r\n-        }\r\n-    }\r\n-\r\n-    /**\r\n-     * Returns the {@link org.apache.openjpa.meta.ClassMetaData} associated\r\n-     * with the persistent type <code>cls</code>.\r\n-     */\r\n-    public static ClassMetaData getMetaData(EntityManagerFactory emf,\r\n-        Class cls) {\r\n-        if (emf == null)\r\n-            throw new NullPointerException(\"emf == null\");\r\n-\r\n-        OpenJPAEntityManagerFactorySPI emfSPI =\r\n-            (OpenJPAEntityManagerFactorySPI) OpenJPAPersistence.cast(emf);\r\n-        try {\r\n-            return emfSPI.getConfiguration().getMetaDataRepositoryInstance().\r\n-                getMetaData(cls, null, false);\r\n-        } catch (Exception e) {\r\n-            throw PersistenceExceptions.toPersistenceException(e);\r\n-        }\r\n-    }\r\n-\r\n-    /**\r\n-     * Translate from a OpenJPA identity object to a Persistence one.\r\n-     */\r\n-    public static Object fromOpenJPAObjectId(Object oid) {\r\n-        if (oid instanceof OpenJPAId)\r\n-            return ((OpenJPAId) oid).getIdObject();\r\n-        return oid;\r\n-    }\r\n-\r\n-    /**\r\n-     * Translate from a Persistence identity object to a OpenJPA one.\r\n-     */\r\n-    public static Object toOpenJPAObjectId(ClassMetaData meta, Object oid) {\r\n-        if (oid == null || meta == null)\r\n-            return null;\r\n-\r\n-        Class cls = meta.getDescribedType();\r\n-        if (meta.getIdentityType() == ClassMetaData.ID_DATASTORE)\r\n-            return new Id(cls, ((Number) oid).longValue());\r\n-\r\n-        if (oid instanceof Byte)\r\n-            return new ByteId(cls, (Byte) oid);\r\n-        if (oid instanceof Character)\r\n-            return new CharId(cls, (Character) oid);\r\n-        if (oid instanceof Double)\r\n-            return new DoubleId(cls, (Double) oid);\r\n-        if (oid instanceof Float)\r\n-            return new FloatId(cls, (Float) oid);\r\n-        if (oid instanceof Integer)\r\n-            return new IntId(cls, (Integer) oid);\r\n-        if (oid instanceof Long)\r\n-            return new LongId(cls, (Long) oid);\r\n-        if (oid instanceof Short)\r\n-            return new ShortId(cls, (Short) oid);\r\n-        if (oid instanceof String)\r\n-            return new StringId(cls, (String) oid);\r\n-        if (oid instanceof BigDecimal)\r\n-            return new BigDecimalId(cls, (BigDecimal) oid);\r\n-        if (oid instanceof BigInteger)\r\n-            return new BigIntegerId(cls, (BigInteger) oid);\r\n-        return new ObjectId(cls, oid);\r\n-    }\r\n-\r\n-    /**\r\n-     * Return an array of OpenJPA oids for the given native oid array.\r\n-     */\r\n-    public static Object[] toOpenJPAObjectIds(ClassMetaData meta,\r\n-        Object... oids) {\r\n-        if (oids == null || oids.length == 0)\r\n-            return oids;\r\n-\r\n-        // since the class if fixed for all oids, we can tell if we have to\r\n-        // translate the array based on whether the first oid needs translating\r\n-        Object oid = toOpenJPAObjectId(meta, oids[0]);\r\n-        if (oid == oids[0])\r\n-            return oids;\r\n-\r\n-        Object[] copy = new Object[oids.length];\r\n-        copy[0] = oid;\r\n-        for (int i = 1; i < oids.length; i++)\r\n-            copy[i] = toOpenJPAObjectId(meta, oids[i]);\r\n-        return copy;\r\n-    }\r\n-\r\n-    /**\r\n-     * Return a collection of OpenJPA oids for the given native oid collection.\r\n-     */\r\n-    public static Collection toOpenJPAObjectIds(ClassMetaData meta,\r\n-        Collection oids) {\r\n-        if (oids == null || oids.isEmpty())\r\n-            return oids;\r\n-\r\n-        // since the class if fixed for all oids, we can tell if we have to\r\n-        // translate the array based on whether the first oid needs translating\r\n-        Iterator itr = oids.iterator();\r\n-        Object orig = itr.next();\r\n-        Object oid = toOpenJPAObjectId(meta, orig);\r\n-        if (oid == orig)\r\n-            return oids;\r\n-\r\n-        Collection copy = new ArrayList(oids.size());\r\n-        copy.add(oid);\r\n-        while (itr.hasNext())\r\n-            copy.add(toOpenJPAObjectId(meta, itr.next()));\r\n-        return copy;\r\n-    }\r\n-\r\n-    /**\r\n-     * Translate from a OpenJPA identity class to a native one.\r\n-     */\r\n-    public static Class fromOpenJPAObjectIdClass(Class oidClass) {\r\n-        if (oidClass == null)\r\n-            return null;\r\n-        if (oidClass == Id.class)\r\n-            return Long.class;\r\n-        if (oidClass == ByteId.class)\r\n-            return Byte.class;\r\n-        if (oidClass == CharId.class)\r\n-            return Character.class;\r\n-        if (oidClass == DoubleId.class)\r\n-            return Double.class;\r\n-        if (oidClass == FloatId.class)\r\n-            return Float.class;\r\n-        if (oidClass == IntId.class)\r\n-            return Integer.class;\r\n-        if (oidClass == LongId.class)\r\n-            return Long.class;\r\n-        if (oidClass == ShortId.class)\r\n-            return Short.class;\r\n-        if (oidClass == StringId.class)\r\n-            return String.class;\r\n-        if (oidClass == BigDecimalId.class)\r\n-            return BigDecimal.class;\r\n-        if (oidClass == BigIntegerId.class)\r\n-            return BigInteger.class;\r\n-        return oidClass;\r\n-\t}\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence;\n+\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+\n+import org.apache.openjpa.kernel.Broker;\n+import org.apache.openjpa.kernel.BrokerFactory;\n+import org.apache.openjpa.meta.ClassMetaData;\n+import org.apache.openjpa.util.BigDecimalId;\n+import org.apache.openjpa.util.BigIntegerId;\n+import org.apache.openjpa.util.ByteId;\n+import org.apache.openjpa.util.CharId;\n+import org.apache.openjpa.util.DoubleId;\n+import org.apache.openjpa.util.FloatId;\n+import org.apache.openjpa.util.Id;\n+import org.apache.openjpa.util.ImplHelper;\n+import org.apache.openjpa.util.IntId;\n+import org.apache.openjpa.util.LongId;\n+import org.apache.openjpa.util.ObjectId;\n+import org.apache.openjpa.util.OpenJPAId;\n+import org.apache.openjpa.util.ShortId;\n+import org.apache.openjpa.util.StringId;\n+import org.apache.openjpa.lib.util.Localizer;\n+\n+/**\n+ * Helper class for switching between OpenJPA's JPA facade and the underlying\n+ * Broker kernel.\n+ *\n+ * @since 1.0.0\n+ * @nojavadoc\n+ */\n+public class JPAFacadeHelper {\n+\n+    public static final String EM_KEY =\n+        \"org.apache.openjpa.persistence.EntityManager\";\n+    public static final String EMF_KEY =\n+        \"org.apache.openjpa.persistence.EntityManagerFactory\";\n+\n+    private static final Localizer _loc =\n+        Localizer.forPackage(JPAFacadeHelper.class);\n+\n+    public static OpenJPAEntityManagerFactory toEntityManagerFactory(\n+        BrokerFactory factory) {\n+        if (factory == null)\n+            return null;\n+\n+        factory.lock();\n+        try {\n+            OpenJPAEntityManagerFactory emf = (OpenJPAEntityManagerFactory)\n+                factory.getUserObject(EMF_KEY);\n+            if (emf == null) {\n+                emf = EntityManagerFactoryValue.newFactory(factory);\n+                factory.putUserObject(EMF_KEY, emf);\n+            }\n+            return emf;\n+        } catch (Exception e) {\n+            throw PersistenceExceptions.toPersistenceException(e);\n+        } finally {\n+            factory.unlock();\n+        }\n+    }\n+\n+    /**\n+     * Return the underlying broker factory for the given persistence manager\n+     * factory facade.\n+     */\n+    public static BrokerFactory toBrokerFactory(EntityManagerFactory emf) {\n+        if (emf == null)\n+            return null;\n+        if (!(emf instanceof EntityManagerFactoryImpl)) {\n+            Class c = emf.getClass();\n+            try {\n+                // either cast here may fail\n+                emf = (EntityManagerFactoryImpl) ((OpenJPAEntityManagerFactory)\n+                    emf).getUserObject(EMF_KEY);\n+            } catch (ClassCastException cce) {\n+                throw new ArgumentException(_loc.get(\n+                    \"cant-convert-brokerfactory\", c), null, null, false);\n+            }\n+        }\n+        return ((EntityManagerFactoryImpl) emf).getBrokerFactory();\n+    }\n+\n+    /**\n+     * Return a persistence manager facade to the given broker retaining\n+     * previously associated persistence context type.\n+     */\n+    public static OpenJPAEntityManager toEntityManager(Broker broker) {\n+        if (broker == null)\n+            return null;\n+\n+        broker.lock();\n+        try {\n+            OpenJPAEntityManager em = (OpenJPAEntityManager)\n+                broker.getUserObject(EM_KEY);\n+            if (em == null) {\n+                EntityManagerFactoryImpl emf = (EntityManagerFactoryImpl)\n+                    toEntityManagerFactory(broker.getBrokerFactory());\n+                em = emf.newEntityManagerImpl(broker);\n+                broker.putUserObject(EM_KEY, em);\n+            }\n+            return em;\n+        } catch (Exception e) {\n+            throw PersistenceExceptions.toPersistenceException(e);\n+        } finally {\n+            broker.unlock();\n+        }\n+    }\n+\n+    /**\n+     * Return the underlying broker for the given entity manager facade.\n+     */\n+    public static Broker toBroker(EntityManager em) {\n+        if (em == null)\n+            return null;\n+        if (!(em instanceof EntityManagerImpl)) {\n+            Class c = em.getClass();\n+            try {\n+                // either cast here may fail\n+                em = (EntityManagerImpl) ((OpenJPAEntityManager) em).\n+                    getUserObject(EM_KEY);\n+            } catch (ClassCastException cce) {\n+                throw new ArgumentException(_loc.get(\"cant-convert-broker\", c),\n+                    null, null, false);\n+            }\n+        }\n+        return ((EntityManagerImpl) em).getBroker();\n+    }\n+\n+    /**\n+     * Returns the {@link org.apache.openjpa.meta.ClassMetaData} associated with the\n+     * persistent object <code>o</code>.\n+     */\n+    public static ClassMetaData getMetaData(Object o) {\n+        if (o == null)\n+            return null;\n+        EntityManager em = OpenJPAPersistence.getEntityManager(o);\n+        return (em == null) ? null : getMetaData(em,\n+            ImplHelper.getManagedInstance(o).getClass());\n+    }\n+\n+    /**\n+     * Returns the {@link org.apache.openjpa.meta.ClassMetaData} associated\n+     * with the persistent type <code>cls</code>.\n+     */\n+    public static ClassMetaData getMetaData(EntityManager em, Class cls) {\n+        if (em == null)\n+            throw new NullPointerException(\"em == null\");\n+\n+        OpenJPAEntityManagerSPI kem = (OpenJPAEntityManagerSPI)\n+            OpenJPAPersistence.cast(em);\n+        try {\n+            return kem.getConfiguration().getMetaDataRepositoryInstance().\n+                getMetaData(cls, kem.getClassLoader(), false);\n+        } catch (Exception e) {\n+            throw PersistenceExceptions.toPersistenceException(e);\n+        }\n+    }\n+\n+    /**\n+     * Returns the {@link org.apache.openjpa.meta.ClassMetaData} associated\n+     * with the persistent type <code>cls</code>.\n+     */\n+    public static ClassMetaData getMetaData(EntityManagerFactory emf,\n+        Class cls) {\n+        if (emf == null)\n+            throw new NullPointerException(\"emf == null\");\n+\n+        OpenJPAEntityManagerFactorySPI emfSPI =\n+            (OpenJPAEntityManagerFactorySPI) OpenJPAPersistence.cast(emf);\n+        try {\n+            return emfSPI.getConfiguration().getMetaDataRepositoryInstance().\n+                getMetaData(cls, null, false);\n+        } catch (Exception e) {\n+            throw PersistenceExceptions.toPersistenceException(e);\n+        }\n+    }\n+\n+    /**\n+     * Translate from a OpenJPA identity object to a Persistence one.\n+     */\n+    public static Object fromOpenJPAObjectId(Object oid) {\n+        if (oid instanceof OpenJPAId)\n+            return ((OpenJPAId) oid).getIdObject();\n+        return oid;\n+    }\n+\n+    /**\n+     * Translate from a Persistence identity object to a OpenJPA one.\n+     */\n+    public static Object toOpenJPAObjectId(ClassMetaData meta, Object oid) {\n+        if (oid == null || meta == null)\n+            return null;\n+\n+        Class cls = meta.getDescribedType();\n+        if (meta.getIdentityType() == ClassMetaData.ID_DATASTORE)\n+            return new Id(cls, ((Number) oid).longValue());\n+\n+        if (oid instanceof Byte)\n+            return new ByteId(cls, (Byte) oid);\n+        if (oid instanceof Character)\n+            return new CharId(cls, (Character) oid);\n+        if (oid instanceof Double)\n+            return new DoubleId(cls, (Double) oid);\n+        if (oid instanceof Float)\n+            return new FloatId(cls, (Float) oid);\n+        if (oid instanceof Integer)\n+            return new IntId(cls, (Integer) oid);\n+        if (oid instanceof Long)\n+            return new LongId(cls, (Long) oid);\n+        if (oid instanceof Short)\n+            return new ShortId(cls, (Short) oid);\n+        if (oid instanceof String)\n+            return new StringId(cls, (String) oid);\n+        if (oid instanceof BigDecimal)\n+            return new BigDecimalId(cls, (BigDecimal) oid);\n+        if (oid instanceof BigInteger)\n+            return new BigIntegerId(cls, (BigInteger) oid);\n+        return new ObjectId(cls, oid);\n+    }\n+\n+    /**\n+     * Return an array of OpenJPA oids for the given native oid array.\n+     */\n+    public static Object[] toOpenJPAObjectIds(ClassMetaData meta,\n+        Object... oids) {\n+        if (oids == null || oids.length == 0)\n+            return oids;\n+\n+        // since the class if fixed for all oids, we can tell if we have to\n+        // translate the array based on whether the first oid needs translating\n+        Object oid = toOpenJPAObjectId(meta, oids[0]);\n+        if (oid == oids[0])\n+            return oids;\n+\n+        Object[] copy = new Object[oids.length];\n+        copy[0] = oid;\n+        for (int i = 1; i < oids.length; i++)\n+            copy[i] = toOpenJPAObjectId(meta, oids[i]);\n+        return copy;\n+    }\n+\n+    /**\n+     * Return a collection of OpenJPA oids for the given native oid collection.\n+     */\n+    public static Collection toOpenJPAObjectIds(ClassMetaData meta,\n+        Collection oids) {\n+        if (oids == null || oids.isEmpty())\n+            return oids;\n+\n+        // since the class if fixed for all oids, we can tell if we have to\n+        // translate the array based on whether the first oid needs translating\n+        Iterator itr = oids.iterator();\n+        Object orig = itr.next();\n+        Object oid = toOpenJPAObjectId(meta, orig);\n+        if (oid == orig)\n+            return oids;\n+\n+        Collection copy = new ArrayList(oids.size());\n+        copy.add(oid);\n+        while (itr.hasNext())\n+            copy.add(toOpenJPAObjectId(meta, itr.next()));\n+        return copy;\n+    }\n+\n+    /**\n+     * Translate from a OpenJPA identity class to a native one.\n+     */\n+    public static Class fromOpenJPAObjectIdClass(Class oidClass) {\n+        if (oidClass == null)\n+            return null;\n+        if (oidClass == Id.class)\n+            return Long.class;\n+        if (oidClass == ByteId.class)\n+            return Byte.class;\n+        if (oidClass == CharId.class)\n+            return Character.class;\n+        if (oidClass == DoubleId.class)\n+            return Double.class;\n+        if (oidClass == FloatId.class)\n+            return Float.class;\n+        if (oidClass == IntId.class)\n+            return Integer.class;\n+        if (oidClass == LongId.class)\n+            return Long.class;\n+        if (oidClass == ShortId.class)\n+            return Short.class;\n+        if (oidClass == StringId.class)\n+            return String.class;\n+        if (oidClass == BigDecimalId.class)\n+            return BigDecimal.class;\n+        if (oidClass == BigIntegerId.class)\n+            return BigInteger.class;\n+        return oidClass;\n+\t}\n+}"},{"sha":"a5b7058f17db59e2a392c32c2e6d9bba0a66c9db","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityManagerFactorySPI.java","status":"modified","additions":71,"deletions":71,"changes":142,"blob_url":"https://github.com/apache/openjpa/blob/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityManagerFactorySPI.java","raw_url":"https://github.com/apache/openjpa/raw/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityManagerFactorySPI.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityManagerFactorySPI.java?ref=cd4c8839f87f750e2655a5b98f552e2ba4031a67","patch":"@@ -1,71 +1,71 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence;\r\n-\r\n-import java.util.Map;\r\n-\r\n-import org.apache.openjpa.conf.OpenJPAConfiguration;\r\n-\r\n-public interface OpenJPAEntityManagerFactorySPI\r\n-    extends OpenJPAEntityManagerFactory {\r\n-\r\n-    /**\r\n-     * Register a listener for lifecycle-related events on the specified\r\n-     * classes. If the classes are null, all events will be propagated to\r\n-     * the listener. The listener will be passed on to all new entity\r\n-     * managers. See the <code>org.apache.openjpa.event</code> package for\r\n-     * listener types.\r\n-     *\r\n-     * @since 0.3.3\r\n-     */\r\n-    public void addLifecycleListener(Object listener, Class... classes);\r\n-\r\n-    /**\r\n-     * Remove a listener for lifecycle-related events.\r\n-     *\r\n-     * @since 0.3.3\r\n-     */\r\n-    public void removeLifecycleListener (Object listener);\r\n-\r\n-    /**\r\n-     * Register a listener for transaction-related events on the specified\r\n-     * classes. The listener will be passed on to all new entity\r\n-     * managers. See the <code>org.apache.openjpa.event</code> package for\r\n-     * listener types.\r\n-     *\r\n-     * @since 1.0.0\r\n-     */\r\n-    public void addTransactionListener(Object listener);\r\n-\r\n-    /**\r\n-     * Remove a listener for transaction-related events.\r\n-     *\r\n-     * @since 1.0.0\r\n-     */\r\n-    public void removeTransactionListener (Object listener);\r\n-\r\n-    /**\r\n-     * Return the configuration for this factory.\r\n-     */\r\n-    public OpenJPAConfiguration getConfiguration();\r\n-\r\n-    public OpenJPAEntityManagerSPI createEntityManager();\r\n-\r\n-    public OpenJPAEntityManagerSPI createEntityManager(Map props);\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence;\n+\n+import java.util.Map;\n+\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\n+\n+public interface OpenJPAEntityManagerFactorySPI\n+    extends OpenJPAEntityManagerFactory {\n+\n+    /**\n+     * Register a listener for lifecycle-related events on the specified\n+     * classes. If the classes are null, all events will be propagated to\n+     * the listener. The listener will be passed on to all new entity\n+     * managers. See the <code>org.apache.openjpa.event</code> package for\n+     * listener types.\n+     *\n+     * @since 0.3.3\n+     */\n+    public void addLifecycleListener(Object listener, Class... classes);\n+\n+    /**\n+     * Remove a listener for lifecycle-related events.\n+     *\n+     * @since 0.3.3\n+     */\n+    public void removeLifecycleListener (Object listener);\n+\n+    /**\n+     * Register a listener for transaction-related events on the specified\n+     * classes. The listener will be passed on to all new entity\n+     * managers. See the <code>org.apache.openjpa.event</code> package for\n+     * listener types.\n+     *\n+     * @since 1.0.0\n+     */\n+    public void addTransactionListener(Object listener);\n+\n+    /**\n+     * Remove a listener for transaction-related events.\n+     *\n+     * @since 1.0.0\n+     */\n+    public void removeTransactionListener (Object listener);\n+\n+    /**\n+     * Return the configuration for this factory.\n+     */\n+    public OpenJPAConfiguration getConfiguration();\n+\n+    public OpenJPAEntityManagerSPI createEntityManager();\n+\n+    public OpenJPAEntityManagerSPI createEntityManager(Map props);\n+}"},{"sha":"135fcc780537b8d4afd161103a24880aa5190a7b","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityManagerSPI.java","status":"modified","additions":104,"deletions":104,"changes":208,"blob_url":"https://github.com/apache/openjpa/blob/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityManagerSPI.java","raw_url":"https://github.com/apache/openjpa/raw/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityManagerSPI.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityManagerSPI.java?ref=cd4c8839f87f750e2655a5b98f552e2ba4031a67","patch":"@@ -1,104 +1,104 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence;\r\n-\r\n-import java.util.EnumSet;\r\n-\r\n-import org.apache.openjpa.conf.OpenJPAConfiguration;\r\n-import org.apache.openjpa.ee.ManagedRuntime;\r\n-\r\n-public interface OpenJPAEntityManagerSPI\r\n-    extends OpenJPAEntityManager {\r\n-\r\n-    /**\r\n-     * Return the configuration associated with this entity manager.\r\n-     */\r\n-    public OpenJPAConfiguration getConfiguration();\r\n-\r\n-    /**\r\n-     * Return the managed runtime in use.\r\n-     */\r\n-    public ManagedRuntime getManagedRuntime();\r\n-\r\n-    //////////\r\n-    // Events\r\n-    //////////\r\n-\r\n-    /**\r\n-     * Register a listener for transaction-related events.\r\n-     */\r\n-    public void addTransactionListener(Object listener);\r\n-\r\n-    /**\r\n-     * Remove a listener for transaction-related events.\r\n-     */\r\n-    public void removeTransactionListener(Object listener);\r\n-\r\n-    /**\r\n-     * The {@link CallbackMode} flags for handling transaction listener\r\n-     * exceptions.\r\n-     */\r\n-    public EnumSet<CallbackMode> getTransactionListenerCallbackMode();\r\n-\r\n-    /**\r\n-     * The {@link CallbackMode} flag for handling transaction listener\r\n-     * exceptions. The flags provided here will entirely replace the\r\n-     * previous settings.\r\n-     */\r\n-    public void setTransactionListenerCallbackMode(CallbackMode mode);\r\n-\r\n-    /**\r\n-     * The {@link CallbackMode} flags for handling transaction listener\r\n-     * exceptions. The flags provided here will entirely replace the\r\n-     * previous settings.\r\n-     */\r\n-    public void setTransactionListenerCallbackMode(EnumSet<CallbackMode> modes);\r\n-\r\n-    /**\r\n-     * Register a listener for lifecycle-related events on the specified\r\n-     * classes. If the classes are null, all events will be propagated to\r\n-     * the listener.\r\n-     */\r\n-    public void addLifecycleListener(Object listener, Class... classes);\r\n-\r\n-    /**\r\n-     * Remove a listener for lifecycle-related events.\r\n-     */\r\n-    public void removeLifecycleListener(Object listener);\r\n-\r\n-    /**\r\n-     * The {@link CallbackMode} flags for handling lifecycle listener\r\n-     * exceptions.\r\n-     */\r\n-    public EnumSet<CallbackMode> getLifecycleListenerCallbackMode();\r\n-\r\n-    /**\r\n-     * The {@link CallbackMode} flag for handling lifecycle listener\r\n-     * exceptions. The flags provided here will entirely replace the\r\n-     * previous settings.\r\n-     */\r\n-    public void setLifecycleListenerCallbackMode(CallbackMode mode);\r\n-\r\n-    /**\r\n-     * The {@link CallbackMode} flags for handling lifecycle listener\r\n-     * exceptions. The flags provided here will entirely replace the\r\n-     * previous settings.\r\n-     */\r\n-    public void setLifecycleListenerCallbackMode(EnumSet<CallbackMode> modes);\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence;\n+\n+import java.util.EnumSet;\n+\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\n+import org.apache.openjpa.ee.ManagedRuntime;\n+\n+public interface OpenJPAEntityManagerSPI\n+    extends OpenJPAEntityManager {\n+\n+    /**\n+     * Return the configuration associated with this entity manager.\n+     */\n+    public OpenJPAConfiguration getConfiguration();\n+\n+    /**\n+     * Return the managed runtime in use.\n+     */\n+    public ManagedRuntime getManagedRuntime();\n+\n+    //////////\n+    // Events\n+    //////////\n+\n+    /**\n+     * Register a listener for transaction-related events.\n+     */\n+    public void addTransactionListener(Object listener);\n+\n+    /**\n+     * Remove a listener for transaction-related events.\n+     */\n+    public void removeTransactionListener(Object listener);\n+\n+    /**\n+     * The {@link CallbackMode} flags for handling transaction listener\n+     * exceptions.\n+     */\n+    public EnumSet<CallbackMode> getTransactionListenerCallbackMode();\n+\n+    /**\n+     * The {@link CallbackMode} flag for handling transaction listener\n+     * exceptions. The flags provided here will entirely replace the\n+     * previous settings.\n+     */\n+    public void setTransactionListenerCallbackMode(CallbackMode mode);\n+\n+    /**\n+     * The {@link CallbackMode} flags for handling transaction listener\n+     * exceptions. The flags provided here will entirely replace the\n+     * previous settings.\n+     */\n+    public void setTransactionListenerCallbackMode(EnumSet<CallbackMode> modes);\n+\n+    /**\n+     * Register a listener for lifecycle-related events on the specified\n+     * classes. If the classes are null, all events will be propagated to\n+     * the listener.\n+     */\n+    public void addLifecycleListener(Object listener, Class... classes);\n+\n+    /**\n+     * Remove a listener for lifecycle-related events.\n+     */\n+    public void removeLifecycleListener(Object listener);\n+\n+    /**\n+     * The {@link CallbackMode} flags for handling lifecycle listener\n+     * exceptions.\n+     */\n+    public EnumSet<CallbackMode> getLifecycleListenerCallbackMode();\n+\n+    /**\n+     * The {@link CallbackMode} flag for handling lifecycle listener\n+     * exceptions. The flags provided here will entirely replace the\n+     * previous settings.\n+     */\n+    public void setLifecycleListenerCallbackMode(CallbackMode mode);\n+\n+    /**\n+     * The {@link CallbackMode} flags for handling lifecycle listener\n+     * exceptions. The flags provided here will entirely replace the\n+     * previous settings.\n+     */\n+    public void setLifecycleListenerCallbackMode(EnumSet<CallbackMode> modes);\n+}"},{"sha":"7b7cf8597f629ec6de030e6fe28b0134bcc6576b","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityTransaction.java","status":"modified","additions":71,"deletions":71,"changes":142,"blob_url":"https://github.com/apache/openjpa/blob/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityTransaction.java","raw_url":"https://github.com/apache/openjpa/raw/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityTransaction.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityTransaction.java?ref=cd4c8839f87f750e2655a5b98f552e2ba4031a67","patch":"@@ -1,71 +1,71 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence;\r\n-\r\n-import javax.persistence.EntityTransaction;\r\n-\r\n-/**\r\n- * Extension of the JPA {@link EntityTransaction} interface.\r\n- *\r\n- * @since 1.0.0\r\n- * @published\r\n- */\r\n-public interface OpenJPAEntityTransaction\r\n-    extends EntityTransaction {\r\n-\r\n-    /**\r\n-     * Issue a commit and then start a new transaction. This is identical to:\r\n-     * <pre> manager.commit (); manager.begin ();\r\n-     * </pre> except that the entity manager's internal atomic lock is utilized,\r\n-     * so this method can be safely executed from multiple threads.\r\n-     *\r\n-     * @see javax.persistence.EntityTransaction#commit()\r\n-     * @see javax.persistence.EntityTransaction#begin()\r\n-     */\r\n-    public void commitAndResume();\r\n-\r\n-    /**\r\n-     * Issue a rollback and then start a new transaction. This is identical to:\r\n-     * <pre> manager.rollback (); manager.begin ();\r\n-     * </pre> except that the entity manager's internal atomic lock is utilized,\r\n-     * so this method can be safely executed from multiple threads.\r\n-     *\r\n-     * @see javax.persistence.EntityTransaction#rollback()\r\n-     * @see javax.persistence.EntityTransaction#begin()\r\n-     */\r\n-    public void rollbackAndResume();\r\n-\r\n-    /**\r\n-     * Mark the current transaction for rollback with the specified cause\r\n-     * of the rollback.\r\n-     *\r\n-     * @since 0.9.7\r\n-     */\r\n-    public void setRollbackOnly(Throwable cause);\r\n-\r\n-    /**\r\n-     * Returns the Throwable that caused the transaction to be\r\n-     * marked for rollback.\r\n-     *\r\n-     * @return the Throwable, or null if none was given\r\n-     *\r\n-     * @since 0.9.7\r\n-     */\r\n-    public Throwable getRollbackCause();\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence;\n+\n+import javax.persistence.EntityTransaction;\n+\n+/**\n+ * Extension of the JPA {@link EntityTransaction} interface.\n+ *\n+ * @since 1.0.0\n+ * @published\n+ */\n+public interface OpenJPAEntityTransaction\n+    extends EntityTransaction {\n+\n+    /**\n+     * Issue a commit and then start a new transaction. This is identical to:\n+     * <pre> manager.commit (); manager.begin ();\n+     * </pre> except that the entity manager's internal atomic lock is utilized,\n+     * so this method can be safely executed from multiple threads.\n+     *\n+     * @see javax.persistence.EntityTransaction#commit()\n+     * @see javax.persistence.EntityTransaction#begin()\n+     */\n+    public void commitAndResume();\n+\n+    /**\n+     * Issue a rollback and then start a new transaction. This is identical to:\n+     * <pre> manager.rollback (); manager.begin ();\n+     * </pre> except that the entity manager's internal atomic lock is utilized,\n+     * so this method can be safely executed from multiple threads.\n+     *\n+     * @see javax.persistence.EntityTransaction#rollback()\n+     * @see javax.persistence.EntityTransaction#begin()\n+     */\n+    public void rollbackAndResume();\n+\n+    /**\n+     * Mark the current transaction for rollback with the specified cause\n+     * of the rollback.\n+     *\n+     * @since 0.9.7\n+     */\n+    public void setRollbackOnly(Throwable cause);\n+\n+    /**\n+     * Returns the Throwable that caused the transaction to be\n+     * marked for rollback.\n+     *\n+     * @return the Throwable, or null if none was given\n+     *\n+     * @since 0.9.7\n+     */\n+    public Throwable getRollbackCause();\n+}"},{"sha":"bde8162b0cadca75840c5c38b8600653cf1eb54a","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAQuerySPI.java","status":"modified","additions":46,"deletions":46,"changes":92,"blob_url":"https://github.com/apache/openjpa/blob/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAQuerySPI.java","raw_url":"https://github.com/apache/openjpa/raw/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAQuerySPI.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAQuerySPI.java?ref=cd4c8839f87f750e2655a5b98f552e2ba4031a67","patch":"@@ -1,46 +1,46 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence;\r\n-\r\n-import org.apache.openjpa.kernel.exps.FilterListener;\r\n-import org.apache.openjpa.kernel.exps.AggregateListener;\r\n-\r\n-public interface OpenJPAQuerySPI\r\n-    extends OpenJPAQuery {\r\n-\r\n-    /**\r\n-     * Register a filter listener for the query.\r\n-     */\r\n-    public OpenJPAQuery addFilterListener(FilterListener listener);\r\n-\r\n-    /**\r\n-     * Remove a filter listener from the query.\r\n-     */\r\n-    public OpenJPAQuery removeFilterListener(FilterListener listener);\r\n-\r\n-    /**\r\n-     * Register an aggregate listener for the query.\r\n-     */\r\n-    public OpenJPAQuery addAggregateListener(AggregateListener listener);\r\n-\r\n-    /**\r\n-     * Remove an aggregate listener from the query.\r\n-     */\r\n-    public OpenJPAQuery removeAggregateListener(AggregateListener listener);\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence;\n+\n+import org.apache.openjpa.kernel.exps.FilterListener;\n+import org.apache.openjpa.kernel.exps.AggregateListener;\n+\n+public interface OpenJPAQuerySPI\n+    extends OpenJPAQuery {\n+\n+    /**\n+     * Register a filter listener for the query.\n+     */\n+    public OpenJPAQuery addFilterListener(FilterListener listener);\n+\n+    /**\n+     * Remove a filter listener from the query.\n+     */\n+    public OpenJPAQuery removeFilterListener(FilterListener listener);\n+\n+    /**\n+     * Register an aggregate listener for the query.\n+     */\n+    public OpenJPAQuery addAggregateListener(AggregateListener listener);\n+\n+    /**\n+     * Remove an aggregate listener from the query.\n+     */\n+    public OpenJPAQuery removeAggregateListener(AggregateListener listener);\n+}"},{"sha":"06a2863c8a8301f32b2bf25ee8545e815a59fa57","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java?ref=cd4c8839f87f750e2655a5b98f552e2ba4031a67","patch":"@@ -39,6 +39,7 @@\n import org.apache.openjpa.kernel.DelegatingQuery;\n import org.apache.openjpa.kernel.DelegatingResultList;\n import org.apache.openjpa.kernel.Filters;\n+import org.apache.openjpa.kernel.QueryLanguages;\n import org.apache.openjpa.kernel.QueryOperations;\n import org.apache.openjpa.kernel.exps.AggregateListener;\n import org.apache.openjpa.kernel.exps.FilterListener;\n@@ -224,7 +225,7 @@ public OpenJPAQuery compile() {\n     }\n \n     private Object execute() {\n-        if (_query.getOperation() != QueryOperations.OP_SELECT)\n+        if (! isNative() && _query.getOperation() != QueryOperations.OP_SELECT)\n             throw new InvalidStateException(_loc.get(\"not-select-query\",\n                 _query.getQueryString()), null, null, false);\n \n@@ -485,6 +486,10 @@ public OpenJPAQuery setParameter(String name, Object value) {\n             _query.unlock();\n         }\n     }\n+    \n+    public boolean isNative() {\n+        return QueryLanguages.LANG_SQL.equals(getLanguage());\n+    }\n \n     public boolean hasPositionalParameters() {\n         return _positional != null;"},{"sha":"a683f8d12b72876d0ce91f76135f511eeae890ec","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryOperationType.java","status":"modified","additions":59,"deletions":59,"changes":118,"blob_url":"https://github.com/apache/openjpa/blob/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryOperationType.java","raw_url":"https://github.com/apache/openjpa/raw/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryOperationType.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryOperationType.java?ref=cd4c8839f87f750e2655a5b98f552e2ba4031a67","patch":"@@ -1,59 +1,59 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence;\r\n-\r\n-import org.apache.openjpa.kernel.QueryOperations;\r\n-\r\n-/**\r\n- * The possible operations that a query can perform.\r\n- *\r\n- * @since 1.0.0\r\n- * @published\r\n- */\r\n-public enum QueryOperationType {\r\n-    SELECT(QueryOperations.OP_SELECT),\r\n-    DELETE(QueryOperations.OP_DELETE),\r\n-    UPDATE(QueryOperations.OP_UPDATE);\r\n-\r\n-    private final int queryOperationConstant;\r\n-\r\n-    private QueryOperationType(int value) {\r\n-        queryOperationConstant = value;\r\n-    }\r\n-\r\n-    int toKernelConstant() {\r\n-        return queryOperationConstant;\r\n-    }\r\n-\r\n-    static QueryOperationType fromKernelConstant(int kernelConstant) {\r\n-        switch (kernelConstant) {\r\n-            case QueryOperations.OP_SELECT:\r\n-                return SELECT;\r\n-\r\n-            case QueryOperations.OP_UPDATE:\r\n-                return UPDATE;\r\n-\r\n-            case QueryOperations.OP_DELETE:\r\n-                return DELETE;\r\n-\r\n-            default:\r\n-                throw new IllegalArgumentException(kernelConstant + \"\");\r\n-        }\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence;\n+\n+import org.apache.openjpa.kernel.QueryOperations;\n+\n+/**\n+ * The possible operations that a query can perform.\n+ *\n+ * @since 1.0.0\n+ * @published\n+ */\n+public enum QueryOperationType {\n+    SELECT(QueryOperations.OP_SELECT),\n+    DELETE(QueryOperations.OP_DELETE),\n+    UPDATE(QueryOperations.OP_UPDATE);\n+\n+    private final int queryOperationConstant;\n+\n+    private QueryOperationType(int value) {\n+        queryOperationConstant = value;\n+    }\n+\n+    int toKernelConstant() {\n+        return queryOperationConstant;\n+    }\n+\n+    static QueryOperationType fromKernelConstant(int kernelConstant) {\n+        switch (kernelConstant) {\n+            case QueryOperations.OP_SELECT:\n+                return SELECT;\n+\n+            case QueryOperations.OP_UPDATE:\n+                return UPDATE;\n+\n+            case QueryOperations.OP_DELETE:\n+                return DELETE;\n+\n+            default:\n+                throw new IllegalArgumentException(kernelConstant + \"\");\n+        }\n+    }\n+}"},{"sha":"f65439b9c4969ae1c68dc6e6aade5cf20979ffe8","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/RestoreStateType.java","status":"modified","additions":60,"deletions":60,"changes":120,"blob_url":"https://github.com/apache/openjpa/blob/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/RestoreStateType.java","raw_url":"https://github.com/apache/openjpa/raw/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/RestoreStateType.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/RestoreStateType.java?ref=cd4c8839f87f750e2655a5b98f552e2ba4031a67","patch":"@@ -1,60 +1,60 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence;\r\n-\r\n-import org.apache.openjpa.kernel.RestoreState;\r\n-\r\n-/**\r\n- * The possible settings for the restore behavior after transaction rollback\r\n- * of an {@link OpenJPAEntityManager}.\r\n- *\r\n- * @since 1.0.0\r\n- * @published\r\n- */\r\n-public enum RestoreStateType {\r\n-    NONE(RestoreState.RESTORE_NONE),\r\n-    IMMUTABLE(RestoreState.RESTORE_IMMUTABLE),\r\n-    ALL(RestoreState.RESTORE_ALL);\r\n-\r\n-    private final int restoreStateConstant;\r\n-\r\n-    private RestoreStateType(int value) {\r\n-        restoreStateConstant = value;\r\n-    }\r\n-\r\n-    int toKernelConstant() {\r\n-        return restoreStateConstant;\r\n-    }\r\n-\r\n-    static RestoreStateType fromKernelConstant(int kernelConstant) {\r\n-        switch (kernelConstant) {\r\n-            case RestoreState.RESTORE_NONE:\r\n-                return NONE;\r\n-\r\n-            case RestoreState.RESTORE_IMMUTABLE:\r\n-                return IMMUTABLE;\r\n-\r\n-            case RestoreState.RESTORE_ALL:\r\n-                return ALL;\r\n-\r\n-            default:\r\n-                throw new IllegalArgumentException(kernelConstant + \"\");\r\n-        }\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence;\n+\n+import org.apache.openjpa.kernel.RestoreState;\n+\n+/**\n+ * The possible settings for the restore behavior after transaction rollback\n+ * of an {@link OpenJPAEntityManager}.\n+ *\n+ * @since 1.0.0\n+ * @published\n+ */\n+public enum RestoreStateType {\n+    NONE(RestoreState.RESTORE_NONE),\n+    IMMUTABLE(RestoreState.RESTORE_IMMUTABLE),\n+    ALL(RestoreState.RESTORE_ALL);\n+\n+    private final int restoreStateConstant;\n+\n+    private RestoreStateType(int value) {\n+        restoreStateConstant = value;\n+    }\n+\n+    int toKernelConstant() {\n+        return restoreStateConstant;\n+    }\n+\n+    static RestoreStateType fromKernelConstant(int kernelConstant) {\n+        switch (kernelConstant) {\n+            case RestoreState.RESTORE_NONE:\n+                return NONE;\n+\n+            case RestoreState.RESTORE_IMMUTABLE:\n+                return IMMUTABLE;\n+\n+            case RestoreState.RESTORE_ALL:\n+                return ALL;\n+\n+            default:\n+                throw new IllegalArgumentException(kernelConstant + \"\");\n+        }\n+    }\n+}"},{"sha":"c8c789d56557d85867667ca666b94e43e647ca76","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java?ref=cd4c8839f87f750e2655a5b98f552e2ba4031a67","patch":"@@ -778,6 +778,7 @@ protected boolean startClass(String elem, Attributes attrs)\n             String name = attrs.getValue(\"name\");\n             if (!StringUtils.isEmpty(name))\n                 meta.setTypeAlias(name);\n+            meta.setAbstract(mappedSuper);\n             meta.setEmbeddedOnly(mappedSuper || \"embeddable\".equals(elem));\n             if (mappedSuper)\n                 meta.setIdentityType(meta.ID_UNKNOWN);"},{"sha":"a98a9661bdf63e66e19a873b4ba321aa43d2e5ab","filename":"openjpa-persistence/src/test/java/org/apache/openjpa/persistence/TestEnumToKernelConstantMappings.java","status":"modified","additions":270,"deletions":270,"changes":540,"blob_url":"https://github.com/apache/openjpa/blob/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence/src/test/java/org/apache/openjpa/persistence/TestEnumToKernelConstantMappings.java","raw_url":"https://github.com/apache/openjpa/raw/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-persistence/src/test/java/org/apache/openjpa/persistence/TestEnumToKernelConstantMappings.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/test/java/org/apache/openjpa/persistence/TestEnumToKernelConstantMappings.java?ref=cd4c8839f87f750e2655a5b98f552e2ba4031a67","patch":"@@ -1,270 +1,270 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence;\r\n-\r\n-import java.util.EnumSet;\r\n-\r\n-import junit.framework.TestCase;\r\n-import org.apache.openjpa.kernel.ConnectionRetainModes;\r\n-import org.apache.openjpa.kernel.DetachState;\r\n-import org.apache.openjpa.kernel.RestoreState;\r\n-import org.apache.openjpa.kernel.AutoClear;\r\n-import org.apache.openjpa.kernel.AutoDetach;\r\n-import org.apache.openjpa.kernel.QueryOperations;\r\n-import org.apache.openjpa.event.CallbackModes;\r\n-\r\n-public class TestEnumToKernelConstantMappings\r\n-    extends TestCase {\r\n-\r\n-    public void testConnectionRetainModes() {\r\n-        assertEquals(ConnectionRetainModes.CONN_RETAIN_ALWAYS,\r\n-            ConnectionRetainMode.ALWAYS.toKernelConstant());\r\n-        assertEquals(ConnectionRetainMode.ALWAYS,\r\n-            ConnectionRetainMode.fromKernelConstant(\r\n-                ConnectionRetainModes.CONN_RETAIN_ALWAYS));\r\n-        assertEquals(ConnectionRetainMode.ALWAYS.toKernelConstant(),\r\n-            ConnectionRetainMode.ALWAYS.ordinal());\r\n-\r\n-        assertEquals(ConnectionRetainModes.CONN_RETAIN_DEMAND,\r\n-            ConnectionRetainMode.ON_DEMAND.toKernelConstant());\r\n-        assertEquals(ConnectionRetainMode.ON_DEMAND,\r\n-            ConnectionRetainMode.fromKernelConstant(\r\n-                ConnectionRetainModes.CONN_RETAIN_DEMAND));\r\n-        assertEquals(ConnectionRetainMode.ON_DEMAND.toKernelConstant(),\r\n-            ConnectionRetainMode.ON_DEMAND.ordinal());\r\n-\r\n-        assertEquals(ConnectionRetainModes.CONN_RETAIN_TRANS,\r\n-            ConnectionRetainMode.TRANSACTION.toKernelConstant());\r\n-        assertEquals(ConnectionRetainMode.TRANSACTION,\r\n-            ConnectionRetainMode.fromKernelConstant(\r\n-                ConnectionRetainModes.CONN_RETAIN_TRANS));\r\n-        assertEquals(ConnectionRetainMode.TRANSACTION.toKernelConstant(),\r\n-            ConnectionRetainMode.TRANSACTION.ordinal());\r\n-\r\n-        assertEquals(getConstantCount(ConnectionRetainModes.class),\r\n-            ConnectionRetainMode.values().length);\r\n-    }\r\n-\r\n-    public void testDetachState() {\r\n-        assertEquals(DetachState.DETACH_ALL,\r\n-            DetachStateType.ALL.toKernelConstant());\r\n-        assertEquals(DetachStateType.ALL,\r\n-            DetachStateType.fromKernelConstant(DetachState.DETACH_ALL));\r\n-        assertEquals(DetachStateType.ALL.toKernelConstant(),\r\n-            DetachStateType.ALL.ordinal());\r\n-\r\n-        assertEquals(DetachState.DETACH_FETCH_GROUPS,\r\n-            DetachStateType.FETCH_GROUPS.toKernelConstant());\r\n-        assertEquals(DetachStateType.FETCH_GROUPS,\r\n-            DetachStateType.fromKernelConstant(\r\n-                DetachState.DETACH_FETCH_GROUPS));\r\n-        assertEquals(DetachStateType.FETCH_GROUPS.toKernelConstant(),\r\n-            DetachStateType.FETCH_GROUPS.ordinal());\r\n-\r\n-        assertEquals(DetachState.DETACH_LOADED,\r\n-            DetachStateType.LOADED.toKernelConstant());\r\n-        assertEquals(DetachStateType.LOADED,\r\n-            DetachStateType.fromKernelConstant(DetachState.DETACH_LOADED));\r\n-        assertEquals(DetachStateType.LOADED.toKernelConstant(),\r\n-            DetachStateType.LOADED.ordinal());\r\n-\r\n-        // subtract 1 for DetachState.DETACH_FGS, which is deprecated\r\n-        assertEquals(getConstantCount(DetachState.class) - 1,\r\n-            DetachStateType.values().length);\r\n-    }\r\n-\r\n-    public void testRestoreState() {\r\n-        assertEquals(RestoreState.RESTORE_ALL,\r\n-            RestoreStateType.ALL.toKernelConstant());\r\n-        assertEquals(RestoreStateType.ALL,\r\n-            RestoreStateType.fromKernelConstant(RestoreState.RESTORE_ALL));\r\n-        assertEquals(RestoreStateType.ALL.toKernelConstant(),\r\n-            RestoreStateType.ALL.ordinal());\r\n-\r\n-        assertEquals(RestoreState.RESTORE_IMMUTABLE,\r\n-            RestoreStateType.IMMUTABLE.toKernelConstant());\r\n-        assertEquals(RestoreStateType.IMMUTABLE,\r\n-            RestoreStateType.fromKernelConstant(\r\n-                RestoreState.RESTORE_IMMUTABLE));\r\n-        assertEquals(RestoreStateType.IMMUTABLE.toKernelConstant(),\r\n-            RestoreStateType.IMMUTABLE.ordinal());\r\n-\r\n-        assertEquals(RestoreState.RESTORE_NONE,\r\n-            RestoreStateType.NONE.toKernelConstant());\r\n-        assertEquals(RestoreStateType.NONE,\r\n-            RestoreStateType.fromKernelConstant(RestoreState.RESTORE_NONE));\r\n-        assertEquals(RestoreStateType.NONE.toKernelConstant(),\r\n-            RestoreStateType.NONE.ordinal());\r\n-\r\n-        assertEquals(getConstantCount(RestoreState.class),\r\n-            RestoreStateType.values().length);\r\n-    }\r\n-\r\n-    public void testAutoClear() {\r\n-        assertEquals(AutoClear.CLEAR_ALL, AutoClearType.ALL.toKernelConstant());\r\n-        assertEquals(AutoClearType.ALL,\r\n-            AutoClearType.fromKernelConstant(AutoClear.CLEAR_ALL));\r\n-        assertEquals(AutoClearType.ALL.toKernelConstant(),\r\n-            AutoClearType.ALL.ordinal());\r\n-\r\n-        assertEquals(AutoClear.CLEAR_DATASTORE,\r\n-            AutoClearType.DATASTORE.toKernelConstant());\r\n-        assertEquals(AutoClearType.DATASTORE,\r\n-            AutoClearType.fromKernelConstant(AutoClear.CLEAR_DATASTORE));\r\n-        assertEquals(AutoClearType.DATASTORE.toKernelConstant(),\r\n-            AutoClearType.DATASTORE.ordinal());\r\n-\r\n-        assertEquals(getConstantCount(AutoClear.class),\r\n-            AutoClearType.values().length);\r\n-    }\r\n-\r\n-    public void testAutoDetach() {\r\n-        assertEquals(getConstantCount(AutoDetach.class),\r\n-            AutoDetachType.values().length);\r\n-\r\n-        assertEquals(EnumSet.of(AutoDetachType.CLOSE),\r\n-            AutoDetachType.toEnumSet(AutoDetach.DETACH_CLOSE));\r\n-        assertEquals(AutoDetach.DETACH_CLOSE,\r\n-            AutoDetachType.fromEnumSet(EnumSet.of(AutoDetachType.CLOSE)));\r\n-\r\n-        assertEquals(EnumSet.of(AutoDetachType.COMMIT),\r\n-            AutoDetachType.toEnumSet(AutoDetach.DETACH_COMMIT));\r\n-        assertEquals(AutoDetach.DETACH_COMMIT,\r\n-            AutoDetachType.fromEnumSet(EnumSet.of(AutoDetachType.COMMIT)));\r\n-\r\n-        assertEquals(EnumSet.of(AutoDetachType.NON_TRANSACTIONAL_READ),\r\n-            AutoDetachType.toEnumSet(AutoDetach.DETACH_NONTXREAD));\r\n-        assertEquals(AutoDetach.DETACH_NONTXREAD,\r\n-            AutoDetachType.fromEnumSet(\r\n-                EnumSet.of(AutoDetachType.NON_TRANSACTIONAL_READ)));\r\n-\r\n-        assertEquals(EnumSet.of(AutoDetachType.ROLLBACK),\r\n-            AutoDetachType.toEnumSet(AutoDetach.DETACH_ROLLBACK));\r\n-        assertEquals(AutoDetach.DETACH_ROLLBACK,\r\n-            AutoDetachType.fromEnumSet(EnumSet.of(AutoDetachType.ROLLBACK)));\r\n-\r\n-\r\n-        assertEquals(EnumSet.of(AutoDetachType.CLOSE, AutoDetachType.COMMIT),\r\n-            AutoDetachType.toEnumSet(\r\n-                AutoDetach.DETACH_CLOSE | AutoDetach.DETACH_COMMIT));\r\n-        assertEquals(AutoDetach.DETACH_ROLLBACK | AutoDetach.DETACH_CLOSE,\r\n-            AutoDetachType.fromEnumSet(\r\n-                EnumSet.of(AutoDetachType.ROLLBACK, AutoDetachType.CLOSE)));\r\n-\r\n-\r\n-        assertEquals(EnumSet.allOf(AutoDetachType.class),\r\n-            AutoDetachType.toEnumSet(\r\n-                AutoDetach.DETACH_CLOSE\r\n-                    | AutoDetach.DETACH_COMMIT\r\n-                    | AutoDetach.DETACH_NONTXREAD\r\n-                    | AutoDetach.DETACH_ROLLBACK));\r\n-        assertEquals(AutoDetach.DETACH_CLOSE\r\n-                    | AutoDetach.DETACH_COMMIT\r\n-                    | AutoDetach.DETACH_NONTXREAD\r\n-                    | AutoDetach.DETACH_ROLLBACK,\r\n-            AutoDetachType.fromEnumSet(EnumSet.allOf(AutoDetachType.class)));\r\n-    }\r\n-\r\n-    public void testCallbackMode() {\r\n-        assertEquals(getConstantCount(CallbackModes.class),\r\n-            CallbackMode.values().length);\r\n-\r\n-        assertEquals(EnumSet.of(CallbackMode.FAIL_FAST),\r\n-            CallbackMode.toEnumSet(CallbackModes.CALLBACK_FAIL_FAST));\r\n-        assertEquals(CallbackModes.CALLBACK_FAIL_FAST,\r\n-            CallbackMode.fromEnumSet(EnumSet.of(CallbackMode.FAIL_FAST)));\r\n-\r\n-        assertEquals(EnumSet.of(CallbackMode.IGNORE),\r\n-            CallbackMode.toEnumSet(CallbackModes.CALLBACK_IGNORE));\r\n-        assertEquals(CallbackModes.CALLBACK_IGNORE,\r\n-            CallbackMode.fromEnumSet(EnumSet.of(CallbackMode.IGNORE)));\r\n-\r\n-        assertEquals(EnumSet.of(CallbackMode.LOG),\r\n-            CallbackMode.toEnumSet(CallbackModes.CALLBACK_LOG));\r\n-        assertEquals(CallbackModes.CALLBACK_LOG,\r\n-            CallbackMode.fromEnumSet(EnumSet.of(CallbackMode.LOG)));\r\n-\r\n-        assertEquals(EnumSet.of(CallbackMode.RETHROW),\r\n-            CallbackMode.toEnumSet(CallbackModes.CALLBACK_RETHROW));\r\n-        assertEquals(CallbackModes.CALLBACK_RETHROW,\r\n-            CallbackMode.fromEnumSet(EnumSet.of(CallbackMode.RETHROW)));\r\n-\r\n-        assertEquals(EnumSet.of(CallbackMode.ROLLBACK),\r\n-            CallbackMode.toEnumSet(CallbackModes.CALLBACK_ROLLBACK));\r\n-        assertEquals(CallbackModes.CALLBACK_ROLLBACK,\r\n-            CallbackMode.fromEnumSet(EnumSet.of(CallbackMode.ROLLBACK)));\r\n-\r\n-\r\n-        assertEquals(EnumSet.of(CallbackMode.ROLLBACK, CallbackMode.IGNORE),\r\n-            CallbackMode.toEnumSet(CallbackModes.CALLBACK_ROLLBACK\r\n-                | CallbackModes.CALLBACK_IGNORE));\r\n-        assertEquals(\r\n-            CallbackModes.CALLBACK_ROLLBACK | CallbackModes.CALLBACK_IGNORE,\r\n-            CallbackMode.fromEnumSet(\r\n-                EnumSet.of(CallbackMode.ROLLBACK, CallbackMode.IGNORE)));\r\n-\r\n-\r\n-        assertEquals(EnumSet.allOf(CallbackMode.class),\r\n-            CallbackMode.toEnumSet(\r\n-                CallbackModes.CALLBACK_FAIL_FAST\r\n-                    | CallbackModes.CALLBACK_IGNORE\r\n-                    | CallbackModes.CALLBACK_LOG\r\n-                    | CallbackModes.CALLBACK_RETHROW\r\n-                    | CallbackModes.CALLBACK_ROLLBACK));\r\n-        assertEquals(CallbackModes.CALLBACK_FAIL_FAST\r\n-                    | CallbackModes.CALLBACK_IGNORE\r\n-                    | CallbackModes.CALLBACK_LOG\r\n-                    | CallbackModes.CALLBACK_RETHROW\r\n-                    | CallbackModes.CALLBACK_ROLLBACK,\r\n-            CallbackMode.fromEnumSet(EnumSet.allOf(CallbackMode.class)));\r\n-    }\r\n-\r\n-    public void testQueryOperationTypes() {\r\n-        assertEquals(QueryOperations.OP_SELECT,\r\n-            QueryOperationType.SELECT.toKernelConstant());\r\n-        assertEquals(QueryOperationType.SELECT,\r\n-            QueryOperationType.fromKernelConstant(\r\n-                QueryOperations.OP_SELECT));\r\n-        assertEquals(QueryOperationType.SELECT.toKernelConstant(),\r\n-            QueryOperationType.SELECT.ordinal() + 1);\r\n-\r\n-        assertEquals(QueryOperations.OP_UPDATE,\r\n-            QueryOperationType.UPDATE.toKernelConstant());\r\n-        assertEquals(QueryOperationType.UPDATE,\r\n-            QueryOperationType.fromKernelConstant(\r\n-                QueryOperations.OP_UPDATE));\r\n-        assertEquals(QueryOperationType.UPDATE.toKernelConstant(),\r\n-            QueryOperationType.UPDATE.ordinal() + 1);\r\n-\r\n-        assertEquals(QueryOperations.OP_DELETE,\r\n-            QueryOperationType.DELETE.toKernelConstant());\r\n-        assertEquals(QueryOperationType.DELETE,\r\n-            QueryOperationType.fromKernelConstant(\r\n-                QueryOperations.OP_DELETE));\r\n-        assertEquals(QueryOperationType.DELETE.toKernelConstant(),\r\n-            QueryOperationType.DELETE.ordinal() + 1);\r\n-\r\n-        assertEquals(getConstantCount(QueryOperations.class),\r\n-            QueryOperationType.values().length);\r\n-    }\r\n-\r\n-    private int getConstantCount(Class cls) {\r\n-        return cls.getDeclaredFields().length;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence;\n+\n+import java.util.EnumSet;\n+\n+import junit.framework.TestCase;\n+import org.apache.openjpa.kernel.ConnectionRetainModes;\n+import org.apache.openjpa.kernel.DetachState;\n+import org.apache.openjpa.kernel.RestoreState;\n+import org.apache.openjpa.kernel.AutoClear;\n+import org.apache.openjpa.kernel.AutoDetach;\n+import org.apache.openjpa.kernel.QueryOperations;\n+import org.apache.openjpa.event.CallbackModes;\n+\n+public class TestEnumToKernelConstantMappings\n+    extends TestCase {\n+\n+    public void testConnectionRetainModes() {\n+        assertEquals(ConnectionRetainModes.CONN_RETAIN_ALWAYS,\n+            ConnectionRetainMode.ALWAYS.toKernelConstant());\n+        assertEquals(ConnectionRetainMode.ALWAYS,\n+            ConnectionRetainMode.fromKernelConstant(\n+                ConnectionRetainModes.CONN_RETAIN_ALWAYS));\n+        assertEquals(ConnectionRetainMode.ALWAYS.toKernelConstant(),\n+            ConnectionRetainMode.ALWAYS.ordinal());\n+\n+        assertEquals(ConnectionRetainModes.CONN_RETAIN_DEMAND,\n+            ConnectionRetainMode.ON_DEMAND.toKernelConstant());\n+        assertEquals(ConnectionRetainMode.ON_DEMAND,\n+            ConnectionRetainMode.fromKernelConstant(\n+                ConnectionRetainModes.CONN_RETAIN_DEMAND));\n+        assertEquals(ConnectionRetainMode.ON_DEMAND.toKernelConstant(),\n+            ConnectionRetainMode.ON_DEMAND.ordinal());\n+\n+        assertEquals(ConnectionRetainModes.CONN_RETAIN_TRANS,\n+            ConnectionRetainMode.TRANSACTION.toKernelConstant());\n+        assertEquals(ConnectionRetainMode.TRANSACTION,\n+            ConnectionRetainMode.fromKernelConstant(\n+                ConnectionRetainModes.CONN_RETAIN_TRANS));\n+        assertEquals(ConnectionRetainMode.TRANSACTION.toKernelConstant(),\n+            ConnectionRetainMode.TRANSACTION.ordinal());\n+\n+        assertEquals(getConstantCount(ConnectionRetainModes.class),\n+            ConnectionRetainMode.values().length);\n+    }\n+\n+    public void testDetachState() {\n+        assertEquals(DetachState.DETACH_ALL,\n+            DetachStateType.ALL.toKernelConstant());\n+        assertEquals(DetachStateType.ALL,\n+            DetachStateType.fromKernelConstant(DetachState.DETACH_ALL));\n+        assertEquals(DetachStateType.ALL.toKernelConstant(),\n+            DetachStateType.ALL.ordinal());\n+\n+        assertEquals(DetachState.DETACH_FETCH_GROUPS,\n+            DetachStateType.FETCH_GROUPS.toKernelConstant());\n+        assertEquals(DetachStateType.FETCH_GROUPS,\n+            DetachStateType.fromKernelConstant(\n+                DetachState.DETACH_FETCH_GROUPS));\n+        assertEquals(DetachStateType.FETCH_GROUPS.toKernelConstant(),\n+            DetachStateType.FETCH_GROUPS.ordinal());\n+\n+        assertEquals(DetachState.DETACH_LOADED,\n+            DetachStateType.LOADED.toKernelConstant());\n+        assertEquals(DetachStateType.LOADED,\n+            DetachStateType.fromKernelConstant(DetachState.DETACH_LOADED));\n+        assertEquals(DetachStateType.LOADED.toKernelConstant(),\n+            DetachStateType.LOADED.ordinal());\n+\n+        // subtract 1 for DetachState.DETACH_FGS, which is deprecated\n+        assertEquals(getConstantCount(DetachState.class) - 1,\n+            DetachStateType.values().length);\n+    }\n+\n+    public void testRestoreState() {\n+        assertEquals(RestoreState.RESTORE_ALL,\n+            RestoreStateType.ALL.toKernelConstant());\n+        assertEquals(RestoreStateType.ALL,\n+            RestoreStateType.fromKernelConstant(RestoreState.RESTORE_ALL));\n+        assertEquals(RestoreStateType.ALL.toKernelConstant(),\n+            RestoreStateType.ALL.ordinal());\n+\n+        assertEquals(RestoreState.RESTORE_IMMUTABLE,\n+            RestoreStateType.IMMUTABLE.toKernelConstant());\n+        assertEquals(RestoreStateType.IMMUTABLE,\n+            RestoreStateType.fromKernelConstant(\n+                RestoreState.RESTORE_IMMUTABLE));\n+        assertEquals(RestoreStateType.IMMUTABLE.toKernelConstant(),\n+            RestoreStateType.IMMUTABLE.ordinal());\n+\n+        assertEquals(RestoreState.RESTORE_NONE,\n+            RestoreStateType.NONE.toKernelConstant());\n+        assertEquals(RestoreStateType.NONE,\n+            RestoreStateType.fromKernelConstant(RestoreState.RESTORE_NONE));\n+        assertEquals(RestoreStateType.NONE.toKernelConstant(),\n+            RestoreStateType.NONE.ordinal());\n+\n+        assertEquals(getConstantCount(RestoreState.class),\n+            RestoreStateType.values().length);\n+    }\n+\n+    public void testAutoClear() {\n+        assertEquals(AutoClear.CLEAR_ALL, AutoClearType.ALL.toKernelConstant());\n+        assertEquals(AutoClearType.ALL,\n+            AutoClearType.fromKernelConstant(AutoClear.CLEAR_ALL));\n+        assertEquals(AutoClearType.ALL.toKernelConstant(),\n+            AutoClearType.ALL.ordinal());\n+\n+        assertEquals(AutoClear.CLEAR_DATASTORE,\n+            AutoClearType.DATASTORE.toKernelConstant());\n+        assertEquals(AutoClearType.DATASTORE,\n+            AutoClearType.fromKernelConstant(AutoClear.CLEAR_DATASTORE));\n+        assertEquals(AutoClearType.DATASTORE.toKernelConstant(),\n+            AutoClearType.DATASTORE.ordinal());\n+\n+        assertEquals(getConstantCount(AutoClear.class),\n+            AutoClearType.values().length);\n+    }\n+\n+    public void testAutoDetach() {\n+        assertEquals(getConstantCount(AutoDetach.class),\n+            AutoDetachType.values().length);\n+\n+        assertEquals(EnumSet.of(AutoDetachType.CLOSE),\n+            AutoDetachType.toEnumSet(AutoDetach.DETACH_CLOSE));\n+        assertEquals(AutoDetach.DETACH_CLOSE,\n+            AutoDetachType.fromEnumSet(EnumSet.of(AutoDetachType.CLOSE)));\n+\n+        assertEquals(EnumSet.of(AutoDetachType.COMMIT),\n+            AutoDetachType.toEnumSet(AutoDetach.DETACH_COMMIT));\n+        assertEquals(AutoDetach.DETACH_COMMIT,\n+            AutoDetachType.fromEnumSet(EnumSet.of(AutoDetachType.COMMIT)));\n+\n+        assertEquals(EnumSet.of(AutoDetachType.NON_TRANSACTIONAL_READ),\n+            AutoDetachType.toEnumSet(AutoDetach.DETACH_NONTXREAD));\n+        assertEquals(AutoDetach.DETACH_NONTXREAD,\n+            AutoDetachType.fromEnumSet(\n+                EnumSet.of(AutoDetachType.NON_TRANSACTIONAL_READ)));\n+\n+        assertEquals(EnumSet.of(AutoDetachType.ROLLBACK),\n+            AutoDetachType.toEnumSet(AutoDetach.DETACH_ROLLBACK));\n+        assertEquals(AutoDetach.DETACH_ROLLBACK,\n+            AutoDetachType.fromEnumSet(EnumSet.of(AutoDetachType.ROLLBACK)));\n+\n+\n+        assertEquals(EnumSet.of(AutoDetachType.CLOSE, AutoDetachType.COMMIT),\n+            AutoDetachType.toEnumSet(\n+                AutoDetach.DETACH_CLOSE | AutoDetach.DETACH_COMMIT));\n+        assertEquals(AutoDetach.DETACH_ROLLBACK | AutoDetach.DETACH_CLOSE,\n+            AutoDetachType.fromEnumSet(\n+                EnumSet.of(AutoDetachType.ROLLBACK, AutoDetachType.CLOSE)));\n+\n+\n+        assertEquals(EnumSet.allOf(AutoDetachType.class),\n+            AutoDetachType.toEnumSet(\n+                AutoDetach.DETACH_CLOSE\n+                    | AutoDetach.DETACH_COMMIT\n+                    | AutoDetach.DETACH_NONTXREAD\n+                    | AutoDetach.DETACH_ROLLBACK));\n+        assertEquals(AutoDetach.DETACH_CLOSE\n+                    | AutoDetach.DETACH_COMMIT\n+                    | AutoDetach.DETACH_NONTXREAD\n+                    | AutoDetach.DETACH_ROLLBACK,\n+            AutoDetachType.fromEnumSet(EnumSet.allOf(AutoDetachType.class)));\n+    }\n+\n+    public void testCallbackMode() {\n+        assertEquals(getConstantCount(CallbackModes.class),\n+            CallbackMode.values().length);\n+\n+        assertEquals(EnumSet.of(CallbackMode.FAIL_FAST),\n+            CallbackMode.toEnumSet(CallbackModes.CALLBACK_FAIL_FAST));\n+        assertEquals(CallbackModes.CALLBACK_FAIL_FAST,\n+            CallbackMode.fromEnumSet(EnumSet.of(CallbackMode.FAIL_FAST)));\n+\n+        assertEquals(EnumSet.of(CallbackMode.IGNORE),\n+            CallbackMode.toEnumSet(CallbackModes.CALLBACK_IGNORE));\n+        assertEquals(CallbackModes.CALLBACK_IGNORE,\n+            CallbackMode.fromEnumSet(EnumSet.of(CallbackMode.IGNORE)));\n+\n+        assertEquals(EnumSet.of(CallbackMode.LOG),\n+            CallbackMode.toEnumSet(CallbackModes.CALLBACK_LOG));\n+        assertEquals(CallbackModes.CALLBACK_LOG,\n+            CallbackMode.fromEnumSet(EnumSet.of(CallbackMode.LOG)));\n+\n+        assertEquals(EnumSet.of(CallbackMode.RETHROW),\n+            CallbackMode.toEnumSet(CallbackModes.CALLBACK_RETHROW));\n+        assertEquals(CallbackModes.CALLBACK_RETHROW,\n+            CallbackMode.fromEnumSet(EnumSet.of(CallbackMode.RETHROW)));\n+\n+        assertEquals(EnumSet.of(CallbackMode.ROLLBACK),\n+            CallbackMode.toEnumSet(CallbackModes.CALLBACK_ROLLBACK));\n+        assertEquals(CallbackModes.CALLBACK_ROLLBACK,\n+            CallbackMode.fromEnumSet(EnumSet.of(CallbackMode.ROLLBACK)));\n+\n+\n+        assertEquals(EnumSet.of(CallbackMode.ROLLBACK, CallbackMode.IGNORE),\n+            CallbackMode.toEnumSet(CallbackModes.CALLBACK_ROLLBACK\n+                | CallbackModes.CALLBACK_IGNORE));\n+        assertEquals(\n+            CallbackModes.CALLBACK_ROLLBACK | CallbackModes.CALLBACK_IGNORE,\n+            CallbackMode.fromEnumSet(\n+                EnumSet.of(CallbackMode.ROLLBACK, CallbackMode.IGNORE)));\n+\n+\n+        assertEquals(EnumSet.allOf(CallbackMode.class),\n+            CallbackMode.toEnumSet(\n+                CallbackModes.CALLBACK_FAIL_FAST\n+                    | CallbackModes.CALLBACK_IGNORE\n+                    | CallbackModes.CALLBACK_LOG\n+                    | CallbackModes.CALLBACK_RETHROW\n+                    | CallbackModes.CALLBACK_ROLLBACK));\n+        assertEquals(CallbackModes.CALLBACK_FAIL_FAST\n+                    | CallbackModes.CALLBACK_IGNORE\n+                    | CallbackModes.CALLBACK_LOG\n+                    | CallbackModes.CALLBACK_RETHROW\n+                    | CallbackModes.CALLBACK_ROLLBACK,\n+            CallbackMode.fromEnumSet(EnumSet.allOf(CallbackMode.class)));\n+    }\n+\n+    public void testQueryOperationTypes() {\n+        assertEquals(QueryOperations.OP_SELECT,\n+            QueryOperationType.SELECT.toKernelConstant());\n+        assertEquals(QueryOperationType.SELECT,\n+            QueryOperationType.fromKernelConstant(\n+                QueryOperations.OP_SELECT));\n+        assertEquals(QueryOperationType.SELECT.toKernelConstant(),\n+            QueryOperationType.SELECT.ordinal() + 1);\n+\n+        assertEquals(QueryOperations.OP_UPDATE,\n+            QueryOperationType.UPDATE.toKernelConstant());\n+        assertEquals(QueryOperationType.UPDATE,\n+            QueryOperationType.fromKernelConstant(\n+                QueryOperations.OP_UPDATE));\n+        assertEquals(QueryOperationType.UPDATE.toKernelConstant(),\n+            QueryOperationType.UPDATE.ordinal() + 1);\n+\n+        assertEquals(QueryOperations.OP_DELETE,\n+            QueryOperationType.DELETE.toKernelConstant());\n+        assertEquals(QueryOperationType.DELETE,\n+            QueryOperationType.fromKernelConstant(\n+                QueryOperations.OP_DELETE));\n+        assertEquals(QueryOperationType.DELETE.toKernelConstant(),\n+            QueryOperationType.DELETE.ordinal() + 1);\n+\n+        assertEquals(getConstantCount(QueryOperations.class),\n+            QueryOperationType.values().length);\n+    }\n+\n+    private int getConstantCount(Class cls) {\n+        return cls.getDeclaredFields().length;\n+    }\n+}"},{"sha":"bc2bbf3a1040abbc92033d8351d6d246dd2c5dda","filename":"openjpa-project/CHANGES.txt","status":"modified","additions":72,"deletions":62,"changes":134,"blob_url":"https://github.com/apache/openjpa/blob/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-project/CHANGES.txt","raw_url":"https://github.com/apache/openjpa/raw/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-project/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/CHANGES.txt?ref=cd4c8839f87f750e2655a5b98f552e2ba4031a67","patch":"@@ -1,21 +1,16 @@\n-                           Release Notes for OpenJPA\n+                           Release Notes for OpenJPA 1.0.4\n \n      * Overview\n      * License\n      * Prerequisites\n      * Documentation\n      * Getting Involved\n-     * Bugs\n-     * Improvements\n-     * New Features\n-     * Task\n-     * Test\n+     * JIRA Issues resolved\n \n Overview\n \n    These notes describe the difference between OpenJPA release 1.0.3 and the\n-   preceding releases 1.0.0, 1.0.1 and 1.0.2. 1.0.3 is a maintenance release\n-   and contains primarily bugfixes.\n+   preceding release: 1.0.3.\n \n    OpenJPA is a feature-rich implementation of the persistence part of Java\n    Community Process JSR-220 (Enterprise JavaBeans 3.0), which is known as\n@@ -82,61 +77,76 @@ Getting Involved\n        freenode.net.\n      * Bugs and other issues can be posted on the project JIRA.\n \n-OpenJPA 1.0.3 Changes\n-\n-    Sub-tasks\n-\n-    * [OPENJPA-517] - Oracle also supports WITH statements\n-    * [OPENJPA-555] - MappingTool got NullPointerException in \n-        DB2Dictionary.isDB2ZOSV8xOrLater()\n-    * [OPENJPA-575] - Use do priv for to get CL for Oracle empty blob/clob\n-    * [OPENJPA-591] - Entities are flushed before being detached or serialized\n-    * [OPENJPA-648] - Table generator uses incorrect schema name\n-\n-    Bugs\n-\n-    * [OPENJPA-51] - bad sql pushdown, sub select is missing from clause\n-    * [OPENJPA-245] - Attach NEW and auto-increment identity\n-    * [OPENJPA-209] - Query returning 2 entities w/unidir 1-1 relationship gets\n-        openjpa.persistence.ArgumentException: Address with the same id already\n-        exists in the L1 cache.\n-    * [OPENJPA-499] - Missing dependencies in openjpa-persistence and\n-        openjpa-persistence-jdbc\n-    * [OPENJPA-512] - Maven build fails if -Dmaven.test.skip=true\n-    * [OPENJPA-518] - openJpa jar is being locked causing future deployments on\n-        an app server to fail\n-    * [OPENJPA-527] - Merge of new one-to-many list only persists last element.\n-    * [OPENJPA-529] - ManagedClassSubclasses stores table names twice.\n-    * [OPENJPA-535] - Javadoc spelling errors in SchemaFactory and Localizer\n-    * [OPENJPA-537] - openjpa-parent pom should not overwrite central \n-        repository setting\n-    * [OPENJPA-540] - Classloading issue with WAS, Spring, and OpenJPA\n-    * [OPENJPA-542] - OracleDictionary.getEmptyClob uses its classloader \n-        instead of the current classloader.\n-    * [OPENJPA-543] - Unclosed prepared statements in \n-        SQLStoreQuery.executeUpdate.\n-    * [OPENJPA-547] - INNER JOIN Fetch query incorrectly generates LEFT join SQL\n-    * [OPENJPA-552] - Do not recognize Connection* properties in \n-        persistence.xml in appl server container\n-    * [OPENJPA-554] - The GetMapValue class should have/supply an alias for \n-        ORDER-BY clauses.\n-    * [OPENJPA-559] - java.rmi.MarshalException due to mismatched serialization\n-        UIDs of: Source (RepId RMI:org.apache.openjpa.kernel.DetachedStateManager\n-    * [OPENJPA-565] - Duplicate @NamedQuery terminates subsequent @NameQuery \n-        definitions in @NamedQueries\n-    * [OPENJPA-632] - setFirstResult and setMaxResults not working for Oracle.\n+JIRA Issues Resolved in this release\n+\n+Sub-task\n+\n+    * [OPENJPA-681] - Subquery generates SQL with syntax error\n+    * [OPENJPA-1023] - Message files contain windows EOL characters\n+    * [OPENJPA-1210] - Specify derby timeouts via properties.\n+\n+Bug\n+\n+    * [OPENJPA-210] - Query returning 2 entities w/1-1 relationship returns wrong types in the result list\n+    * [OPENJPA-466] - Primary key constraint violated using (Oracle) sequence to generate ID in multithreaded app\n+    * [OPENJPA-536] - getMetaData() causes OutOfMemoryError under some cases\n+    * [OPENJPA-572] - Merge operation fails with IdClass composite key\n+    * [OPENJPA-573] - JPQL: The combination LIKE ESCAPE does not accept parameters\n+    * [OPENJPA-594] - Incorrect schema separator used for Informix tables\n+    * [OPENJPA-605] - Informix will throw an exception when a unique index is explictily created on the primary key columns\n+    * [OPENJPA-606] - InformixDictionary default setting beaks many testcases\n+    * [OPENJPA-622] - Informix -lock timieout, cursor not open problem for NonJTA datasource transaction RESOURCE_LOCAL in JEE\n+    * [OPENJPA-629] - When creating foreign keys the schema name is not trimmed for WS before checking DB\n+    * [OPENJPA-644] - Handle databaseProductVersion string from newer jcc driver for DB2 ISeries\n+    * [OPENJPA-645] - Date millisecond precision lost for Informix IDS and SQLServer\n+    * [OPENJPA-650] - Document openjpa.RuntimeUnenhancedClasses=unsupported/warn configuration property\n+    * [OPENJPA-685] - Problem enhancing test cases with Maven 2.0.9\n+    * [OPENJPA-710] - Unordered collection field adds ORDER BY clause\n+    * [OPENJPA-711] - PDF manual lacks images\n+    * [OPENJPA-713] - openjpa-1.2.0.jar file is 11 MB\n+    * [OPENJPA-715] - OpenJpa does not generate IDs properly. \"duplicate key value in a unique or primary key constraint\" while merging object tree.\n+    * [OPENJPA-724] - Corrections for the manual\n+    * [OPENJPA-727] - Image mapping-table.png missing in HTML manual\n+    * [OPENJPA-864] - Subquery problems with SYNTAX_DATABASE (Oracle)\n+    * [OPENJPA-873] - @MappedSuperClass Cause Null Pointer Exception in Class With IdClass\n+    * [OPENJPA-896] - Several source files include Windows EoL chars\n+    * [OPENJPA-917] - stored procedures throw InvalidStateException when using getSingleResult() or getResultList()\n+    * [OPENJPA-951] - Javadoc jar file does not contain legal files\n+    * [OPENJPA-1025] - AbstractResultList.subList throws UnsupportedOperationException\n+    * [OPENJPA-1029] - SQLServerDictionary causes NumberFormatException if MS SQL Server JDBC driver is used\n+    * [OPENJPA-1061] - Entities extending from a Mapped Superclass that defines the ID fields share the same ObjectID type parameter\n+    * [OPENJPA-1067] - SetQueryTimeout(x) where x != 0 causes SQLException with DB2 on Z/OS\n+    * [OPENJPA-1197] - NativeQueries fail with MySQL\n+    * [OPENJPA-1243] - migrate Informix functionality from 1.2 to 1.0.x\n+    * [OPENJPA-1244] - Activation profiles should be more inclusive\n+    * [OPENJPA-1308] - shouldn't always use CAST with UPPER and LOWER for DB2\n+    * [OPENJPA-1328] - Move cacheable class configuration to ClassMetaData\n+    * [OPENJPA-1457] - Remove Java.net maven repostiory from tck pom.xml\n+    * [OPENJPA-1678] - SQL Parameter values may contain sensitive information and should not be logged by default.\n \n Improvement\n \n-    * [OPENJPA-374] - OpenJPA build process enhances Entity classes even when\n-        testing is deactivated via -Dtest=false\n-    * [OPENJPA-541] - Generate SQL92 JOIN syntax for Oracle 9 or later releases\n-\n-\n-OpenJPA 1.0.2 Changes: http://svn.apache.org/viewvc/openjpa/tags/1.0.2/openjpa-project/CHANGES.txt?view=markup\n-\n-OpenJPA 1.0.1 Changes: http://svn.apache.org/viewvc/openjpa/tags/1.0.1/openjpa-project/CHANGES.txt?view=markup\n-\n-OpenJPA 1.0.0 Changes: http://svn.apache.org/viewvc/openjpa/tags/1.0.0/openjpa-project/CHANGES.txt?view=markup\n-\n+    * [OPENJPA-633] - Update the release process to use maven plugins\n+    * [OPENJPA-666] - MS SQL Server 2005 does not support native sequences.\n+    * [OPENJPA-726] - Provide MD5Sums for latest downloads\n+    * [OPENJPA-752] - ProxySetupStateManager.setProxyData routing through PersistanceCapable caused \"PersistenceException: null\"\n+    * [OPENJPA-772] - Proper maven pluginManagement and use ianal-maven-plugin for enforcing legal files\n+    * [OPENJPA-779] - patch for eclipse .project and .classpath files...\n+    * [OPENJPA-876] - Better test profiles for proprietary databases (DB2, Oracle) and continuous build\n+    * [OPENJPA-881] - Enable connection pooling for testcases.\n+    * [OPENJPA-901] - Use hosted JAI artifacts as the default for the docbook build\n+    * [OPENJPA-975] - Oracle needs ability to not have an escape character for search strings.\n+    * [OPENJPA-1045] - Add opt-in and opt-out configuration for L2 DataCache\n+    * [OPENJPA-1136] - Add .gitignore for git users\n+    * [OPENJPA-1557] - Logging configuration is difficult for running tests\n+\n+Test\n+\n+    * [OPENJPA-1071] - Derby test suit speed-up\n+\n+\n+OpenJPA 1.0.3 Changes: http://svn.apache.org/viewvc/openjpa/tags/1.0.3/openjpa-project/CHANGES.txt?view=co\n+OpenJPA 1.0.2 Changes: http://svn.apache.org/viewvc/openjpa/tags/1.0.2/openjpa-project/CHANGES.txt?view=co\n+OpenJPA 1.0.1 Changes: http://svn.apache.org/viewvc/openjpa/tags/1.0.1/openjpa-project/CHANGES.txt?view=co\n+OpenJPA 1.0.0 Changes: http://svn.apache.org/viewvc/openjpa/tags/1.0.0/openjpa-project/CHANGES.txt?view=co\n "},{"sha":"76f9423003cfd08e3419d0b463f3ae3093837d39","filename":"openjpa-project/RELEASE-NOTES.html","status":"modified","additions":107,"deletions":42,"changes":149,"blob_url":"https://github.com/apache/openjpa/blob/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-project/RELEASE-NOTES.html","raw_url":"https://github.com/apache/openjpa/raw/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-project/RELEASE-NOTES.html","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/RELEASE-NOTES.html?ref=cd4c8839f87f750e2655a5b98f552e2ba4031a67","patch":"@@ -1,25 +1,22 @@\n <html>\n-<title>Release Notes for OpenJPA</title>\n+<title>Release Notes for OpenJPA 1.0.4</title>\n <body>\n-<h1>Release Notes for OpenJPA</h1>\n+<h1>Release Notes for OpenJPA 1.0.4</h1>\n \n <ul>\n <li><a href=\"#Overview\">Overview</a></li>\n <li><a href=\"#License\">License</a></li>\n <li><a href=\"#Prerequisites\">Prerequisites</a></li>\n <li><a href=\"#Documentation\">Documentation</a></li>\n <li><a href=\"#GetInvolved\">Getting Involved</a></li>\n-<li><a href=\"#Sub-task\">Sub-task</a></li>\n-<li><a href=\"#Bug\">Bug</a></li>\n-<li><a href=\"#Improvement\">Improvement</a></li>\n+<li><a href=\"#JIRA\">JIRA Issues Resolved</a></li>\n <li><a href=\"#Previous\">RELEASE-NOTES for previous releases</a></li>\n </ul>\n \n <h2><a name=\"Overview\"></a>Overview</h2>\n \n-<p> These notes describe the difference between OpenJPA release 1.0.3 and the\n-   preceding releases 1.0.0, 1.0.1 and 1.0.2. 1.0.3 is a maintenance release\n-   and contains primarily bugfixes.\n+<p> These notes describe the difference between OpenJPA release 1.0.4 and the\n+   preceding release 1.0.3.\n <P>\n OpenJPA is a feature-rich implementation of the persistence part of \n Java Community Process JSR-220 (Enterprise JavaBeans 3.0), which is\n@@ -96,68 +93,135 @@ <h2><a name=\"GetInvolved\"></a>Getting Involved</h2>\n     <li> Bugs and other issues can be posted on the project JIRA. </li>\n </ul>\n \n-\n-        Release Notes - OpenJPA - Version 1.0.3\n+<h2><a name=\"JIRA\"</a>JIRA Issues Fixed in this release</h2>\n     \n-<h2><a name=\"Sub-task\"></a>        Sub-task\n+<h2>       Sub-task\n </h2>\n <ul>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-517'>OPENJPA-517</a>] -         Oracle also supports WITH statements\n-</li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-555'>OPENJPA-555</a>] -         MappingTool got NullPointerException in DB2Dictionary.isDB2ZOSV8xOrLater()\n-</li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-575'>OPENJPA-575</a>] -         Use do priv for to get CL for Oracle empty blob/clob\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-681'>OPENJPA-681</a>] -         Subquery generates SQL with syntax error\n </li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-591'>OPENJPA-591</a>] -         Entities are flushed before being detached or serialized\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1023'>OPENJPA-1023</a>] -         Message files contain windows EOL characters\n </li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-648'>OPENJPA-648</a>] -         Table generator uses incorrect schema name\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1210'>OPENJPA-1210</a>] -         Specify derby timeouts via properties.\n </li>\n </ul>\n     \n-<h2><a name=\"Bug\"></a>        Bug\n+<h2>        Bug\n </h2>\n <ul>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-51'>OPENJPA-51</a>] -         bad sql pushdown, sub select is missing from clause\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-210'>OPENJPA-210</a>] -         Query returning 2 entities w/1-1 relationship returns wrong types in the result list\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-466'>OPENJPA-466</a>] -         Primary key constraint violated using (Oracle) sequence to generate ID in multithreaded app\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-536'>OPENJPA-536</a>] -         getMetaData() causes OutOfMemoryError under some cases\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-572'>OPENJPA-572</a>] -         Merge operation fails with IdClass composite key\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-573'>OPENJPA-573</a>] -         JPQL: The combination LIKE ESCAPE does not accept parameters\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-594'>OPENJPA-594</a>] -         Incorrect schema separator used for Informix tables\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-605'>OPENJPA-605</a>] -         Informix will throw an exception when a unique index is explictily created on the primary key columns\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-606'>OPENJPA-606</a>] -         InformixDictionary default setting beaks many testcases\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-622'>OPENJPA-622</a>] -         Informix -lock timieout, cursor not open problem for NonJTA datasource transaction RESOURCE_LOCAL in JEE\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-629'>OPENJPA-629</a>] -         When creating foreign keys the schema name is not trimmed for WS before checking DB\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-644'>OPENJPA-644</a>] -         Handle databaseProductVersion string from newer jcc driver for DB2 ISeries\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-645'>OPENJPA-645</a>] -         Date millisecond precision lost for Informix IDS and SQLServer\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-650'>OPENJPA-650</a>] -         Document openjpa.RuntimeUnenhancedClasses=unsupported/warn configuration property\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-685'>OPENJPA-685</a>] -         Problem enhancing test cases with Maven 2.0.9 \n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-710'>OPENJPA-710</a>] -         Unordered collection field adds ORDER BY clause\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-711'>OPENJPA-711</a>] -         PDF manual lacks images\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-713'>OPENJPA-713</a>] -         openjpa-1.2.0.jar file is 11 MB\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-715'>OPENJPA-715</a>] -         OpenJpa does not generate IDs properly. &quot;duplicate key value in a unique or primary key constraint&quot; while merging object tree.\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-724'>OPENJPA-724</a>] -         Corrections for the manual\n </li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-209'>OPENJPA-209</a>] -         Query returning 2 entities w/unidir 1-1 relationship gets openjpa.persistence.ArgumentException: Address with the same id already exists in the L1 cache.\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-727'>OPENJPA-727</a>] -         Image mapping-table.png missing in HTML manual\n </li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-245'>OPENJPA-245</a>] -         Attach NEW and auto-increment identity\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-864'>OPENJPA-864</a>] -         Subquery problems with SYNTAX_DATABASE (Oracle)\n </li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-499'>OPENJPA-499</a>] -         Missing dependencies in openjpa-persistence and openjpa-persistence-jdbc\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-873'>OPENJPA-873</a>] -         @MappedSuperClass Cause Null Pointer Exception in Class With IdClass\n </li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-512'>OPENJPA-512</a>] -         Maven build fails if -Dmaven.test.skip=true\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-896'>OPENJPA-896</a>] -         Several source files include Windows EoL chars\n </li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-518'>OPENJPA-518</a>] -         openJpa jar is being locked causing future deployments on an app server to fail\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-917'>OPENJPA-917</a>] -         stored procedures throw InvalidStateException when using getSingleResult() or getResultList()\n </li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-527'>OPENJPA-527</a>] -         Merge of new one-to-many list only persists last element.\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-951'>OPENJPA-951</a>] -         Javadoc jar file does not contain legal files\n </li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-529'>OPENJPA-529</a>] -         ManagedClassSubclasses stores table names twice. \n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1025'>OPENJPA-1025</a>] -         AbstractResultList.subList throws UnsupportedOperationException\n </li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-535'>OPENJPA-535</a>] -         Javadoc spelling errors in SchemaFactory and Localizer\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1029'>OPENJPA-1029</a>] -         SQLServerDictionary causes NumberFormatException if MS SQL Server JDBC driver is used\n </li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-537'>OPENJPA-537</a>] -         openjpa-parent pom should not overwrite central repository setting\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1061'>OPENJPA-1061</a>] -         Entities extending from a Mapped Superclass that defines the ID fields share the same ObjectID type parameter\n </li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-540'>OPENJPA-540</a>] -         Classloading issue with WAS, Spring, and OpenJPA\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1067'>OPENJPA-1067</a>] -         SetQueryTimeout(x) where x != 0 causes SQLException with DB2 on Z/OS\n </li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-542'>OPENJPA-542</a>] -         OracleDictionary.getEmptyClob uses its classloader instead of the current classloader. \n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1197'>OPENJPA-1197</a>] -         NativeQueries fail with MySQL \n </li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-543'>OPENJPA-543</a>] -         Unclosed prepared statements in SQLStoreQuery.executeUpdate.\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1243'>OPENJPA-1243</a>] -         migrate Informix functionality from 1.2 to 1.0.x\n </li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-547'>OPENJPA-547</a>] -         INNER JOIN Fetch query incorrectly generates  LEFT join SQL\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1244'>OPENJPA-1244</a>] -         Activation profiles should be more inclusive\n </li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-552'>OPENJPA-552</a>] -         Do not recognize Connection* properties in persistence.xml in appl server container\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1308'>OPENJPA-1308</a>] -         shouldn't always use CAST with UPPER and LOWER for DB2\n </li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-554'>OPENJPA-554</a>] -         The GetMapValue class should have/supply an alias for ORDER-BY clauses.\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1328'>OPENJPA-1328</a>] -         Move cacheable class configuration to ClassMetaData\n </li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-559'>OPENJPA-559</a>] -         java.rmi.MarshalException due to mismatched serialization UIDs of: Source (RepId RMI:org.apache.openjpa.kernel.DetachedStateManager\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1457'>OPENJPA-1457</a>] -         Remove Java.net maven repostiory from tck pom.xml\n </li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-565'>OPENJPA-565</a>] -         Duplicate @NamedQuery terminates subsequent @NameQuery definitions in @NamedQueries \n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1678'>OPENJPA-1678</a>] -         SQL Parameter values may contain sensitive information and should not be logged by default.\n </li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-632'>OPENJPA-632</a>] -         setFirstResult and setMaxResults not working for Oracle.\n+</ul>\n+    \n+<h2>        Improvement\n+</h2>\n+<ul>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-633'>OPENJPA-633</a>] -         Update the release process to use maven plugins\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-666'>OPENJPA-666</a>] -         MS SQL Server 2005 does not support native sequences.\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-726'>OPENJPA-726</a>] -         Provide MD5Sums for latest downloads\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-752'>OPENJPA-752</a>] -         ProxySetupStateManager.setProxyData routing through PersistanceCapable caused &quot;PersistenceException: null&quot;\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-772'>OPENJPA-772</a>] -         Proper maven pluginManagement and use ianal-maven-plugin for enforcing legal files\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-779'>OPENJPA-779</a>] -         patch for eclipse .project and .classpath files...\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-876'>OPENJPA-876</a>] -         Better test profiles for proprietary databases (DB2, Oracle) and continuous build\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-881'>OPENJPA-881</a>] -         Enable connection pooling for testcases. \n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-901'>OPENJPA-901</a>] -         Use hosted JAI artifacts as the default for the docbook build\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-975'>OPENJPA-975</a>] -         Oracle needs ability to not have an escape character for search strings.\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1045'>OPENJPA-1045</a>] -         Add opt-in and opt-out configuration for L2 DataCache\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1136'>OPENJPA-1136</a>] -         Add .gitignore for git users\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1557'>OPENJPA-1557</a>] -         Logging configuration is difficult for running tests\n+</li>\n+</ul>\n+                                \n+<h2>        Test\n+</h2>\n+<ul>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1071'>OPENJPA-1071</a>] -         Derby test suit speed-up\n </li>\n </ul>\n     \n-<h2><a name=\"Improvement\"></a>        Improvement\n+<h2>        Improvement\n </h2>\n <ul>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-374'>OPENJPA-374</a>] -         OpenJPA build process enhances Entity classes even when testing is deactivated via -Dtest=false\n@@ -169,9 +233,10 @@ <h2><a name=\"Improvement\"></a>        Improvement\n <h2><a name=\"Previous\"></a>         Previous Releases\n </h2>\n Release notes for earlier releases of OpenJPA may be found in SVN at the following locations. \n-<li><a href='http://svn.apache.org/viewvc/openjpa/tags/1.0.2/openjpa-project/RELEASE-NOTES.html?view=markup'>OpenJPA 1.0.2 RELEASE-NOTES.html</a></li>\n-<li><a href='http://svn.apache.org/viewvc/openjpa/tags/1.0.1/openjpa-project/RELEASE-NOTES.html?view=markup'>OpenJPA 1.0.1 RELEASE-NOTES.html</a></li>\n-<li><a href='http://svn.apache.org/viewvc/openjpa/tags/1.0.0/openjpa-project/RELEASE-NOTES.html?view=markup'>OpenJPA 1.0.0 RELEASE-NOTES.html</a></li>\n+<li><a href='http://svn.apache.org/viewvc/openjpa/tags/1.0.3/openjpa-project/RELEASE-NOTES.html?view=co'>OpenJPA 1.0.3 RELEASE-NOTES.html</a></li>\n+<li><a href='http://svn.apache.org/viewvc/openjpa/tags/1.0.2/openjpa-project/RELEASE-NOTES.html?view=co'>OpenJPA 1.0.2 RELEASE-NOTES.html</a></li>\n+<li><a href='http://svn.apache.org/viewvc/openjpa/tags/1.0.1/openjpa-project/RELEASE-NOTES.html?view=co'>OpenJPA 1.0.1 RELEASE-NOTES.html</a></li>\n+<li><a href='http://svn.apache.org/viewvc/openjpa/tags/1.0.0/openjpa-project/RELEASE-NOTES.html?view=co'>OpenJPA 1.0.0 RELEASE-NOTES.html</a></li>\n \n </body>\n </html>"},{"sha":"9b7de85568122f3f4f766c3803f6f5cad03eab3d","filename":"openjpa-project/assembly.xml","status":"modified","additions":104,"deletions":104,"changes":208,"blob_url":"https://github.com/apache/openjpa/blob/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-project/assembly.xml","raw_url":"https://github.com/apache/openjpa/raw/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-project/assembly.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/assembly.xml?ref=cd4c8839f87f750e2655a5b98f552e2ba4031a67","patch":"@@ -1,104 +1,104 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n-<!--\r\n- Licensed to the Apache Software Foundation (ASF) under one\r\n- or more contributor license agreements.  See the NOTICE file\r\n- distributed with this work for additional information\r\n- regarding copyright ownership.  The ASF licenses this file\r\n- to you under the Apache License, Version 2.0 (the\r\n- \"License\"); you may not use this file except in compliance\r\n- with the License.  You may obtain a copy of the License at\r\n- \r\n- http://www.apache.org/licenses/LICENSE-2.0\r\n- \r\n- Unless required by applicable law or agreed to in writing,\r\n- software distributed under the License is distributed on an\r\n- \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- KIND, either express or implied.  See the License for the\r\n- specific language governing permissions and limitations\r\n- under the License.   \r\n--->\r\n-<assembly>\r\n-    <id>binary</id>\r\n-    <formats>\r\n-        <format>zip</format>\r\n-    </formats>\r\n-    <includeBaseDirectory>true</includeBaseDirectory>\r\n-    <fileSets>\r\n-        <fileSet>\r\n-            <directory>target/aggregate</directory>\r\n-            <outputDirectory>/</outputDirectory>\r\n-        </fileSet>\r\n-        <fileSet>\r\n-            <includes>\r\n-                <include>README</include>\r\n-                <include>DISCLAIMER</include>\r\n-                <include>LICENSE</include>\r\n-                <include>STATUS</include>\r\n-                <include>NOTICE</include>\r\n-                <include>README.txt</include>\r\n-                <include>DISCLAIMER.txt</include>\r\n-                <include>LICENSE.txt</include>\r\n-                <include>STATUS.txt</include>\r\n-                <include>NOTICE.txt</include>\r\n-                <include>RELEASE-NOTES</include>\r\n-                <include>RELEASE-NOTES.html</include>\r\n-                <include>RELEASE-NOTES.txt</include>\r\n-                <include>CHANGES</include>\r\n-                <include>CHANGES.txt</include>\r\n-            </includes>\r\n-        </fileSet>\r\n-        <!--\r\n-        <fileSet>\r\n-            <directory>licenses</directory>\r\n-            <outputDirectory>/lib</outputDirectory>\r\n-            <includes>\r\n-                <include>*</include>\r\n-            </includes>\r\n-        </fileSet>\r\n-        <fileSet>\r\n-            <directory>target/examples</directory>\r\n-            <outputDirectory>/examples</outputDirectory>\r\n-        </fileSet>\r\n-        -->\r\n-        <fileSet>\r\n-            <directory>target/manual</directory>\r\n-            <outputDirectory>docs/manual</outputDirectory>\r\n-        </fileSet>\r\n-        <fileSet>\r\n-            <directory>../target/site/apidocs</directory>\r\n-            <outputDirectory>docs/javadoc</outputDirectory>\r\n-        </fileSet>\r\n-        <fileSet>\r\n-            <directory>../openjpa-examples/src/main/java</directory>\r\n-            <outputDirectory>examples</outputDirectory>\r\n-        </fileSet>\r\n-    </fileSets>\r\n-    <dependencySets>\r\n-        <dependencySet>\r\n-            <outputDirectory>/</outputDirectory>\r\n-            <unpack>false</unpack>\r\n-            <scope>runtime</scope>\r\n-            <includes>\r\n-                <include>org.apache.openjpa:openjpa</include>\r\n-            </includes>\r\n-        </dependencySet>\r\n-        <dependencySet>\r\n-            <outputDirectory>/lib</outputDirectory>\r\n-            <unpack>false</unpack>\r\n-            <scope>runtime</scope>\r\n-            <includes>\r\n-                <include>net.sourceforge.serp:serp</include>\r\n-                <include>org.apache.derby:derby</include>\r\n-\r\n-                <include>commons-logging:commons-logging</include>\r\n-                <include>commons-lang:commons-lang</include>\r\n-                <include>commons-collections:commons-collections</include>\r\n-                <include>commons-pool:commons-pool</include>\r\n-\r\n-                <include>org.apache.geronimo.specs:geronimo-jms_1.1_spec</include>\r\n-                <include>org.apache.geronimo.specs:geronimo-jta_1.1_spec</include>\r\n-                <include>org.apache.geronimo.specs:geronimo-jpa_3.0_spec</include>\r\n-            </includes>\r\n-        </dependencySet>\r\n-    </dependencySets>\r\n-</assembly>\r\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+ \n+ http://www.apache.org/licenses/LICENSE-2.0\n+ \n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.   \n+-->\n+<assembly>\n+    <id>binary</id>\n+    <formats>\n+        <format>zip</format>\n+    </formats>\n+    <includeBaseDirectory>true</includeBaseDirectory>\n+    <fileSets>\n+        <fileSet>\n+            <directory>target/aggregate</directory>\n+            <outputDirectory>/</outputDirectory>\n+        </fileSet>\n+        <fileSet>\n+            <includes>\n+                <include>README</include>\n+                <include>DISCLAIMER</include>\n+                <include>LICENSE</include>\n+                <include>STATUS</include>\n+                <include>NOTICE</include>\n+                <include>README.txt</include>\n+                <include>DISCLAIMER.txt</include>\n+                <include>LICENSE.txt</include>\n+                <include>STATUS.txt</include>\n+                <include>NOTICE.txt</include>\n+                <include>RELEASE-NOTES</include>\n+                <include>RELEASE-NOTES.html</include>\n+                <include>RELEASE-NOTES.txt</include>\n+                <include>CHANGES</include>\n+                <include>CHANGES.txt</include>\n+            </includes>\n+        </fileSet>\n+        <!--\n+        <fileSet>\n+            <directory>licenses</directory>\n+            <outputDirectory>/lib</outputDirectory>\n+            <includes>\n+                <include>*</include>\n+            </includes>\n+        </fileSet>\n+        <fileSet>\n+            <directory>target/examples</directory>\n+            <outputDirectory>/examples</outputDirectory>\n+        </fileSet>\n+        -->\n+        <fileSet>\n+            <directory>target/manual</directory>\n+            <outputDirectory>docs/manual</outputDirectory>\n+        </fileSet>\n+        <fileSet>\n+            <directory>../target/site/apidocs</directory>\n+            <outputDirectory>docs/javadoc</outputDirectory>\n+        </fileSet>\n+        <fileSet>\n+            <directory>../openjpa-examples/src/main/java</directory>\n+            <outputDirectory>examples</outputDirectory>\n+        </fileSet>\n+    </fileSets>\n+    <dependencySets>\n+        <dependencySet>\n+            <outputDirectory>/</outputDirectory>\n+            <unpack>false</unpack>\n+            <scope>runtime</scope>\n+            <includes>\n+                <include>org.apache.openjpa:openjpa</include>\n+            </includes>\n+        </dependencySet>\n+        <dependencySet>\n+            <outputDirectory>/lib</outputDirectory>\n+            <unpack>false</unpack>\n+            <scope>runtime</scope>\n+            <includes>\n+                <include>net.sourceforge.serp:serp</include>\n+                <include>org.apache.derby:derby</include>\n+\n+                <include>commons-logging:commons-logging</include>\n+                <include>commons-lang:commons-lang</include>\n+                <include>commons-collections:commons-collections</include>\n+                <include>commons-pool:commons-pool</include>\n+\n+                <include>org.apache.geronimo.specs:geronimo-jms_1.1_spec</include>\n+                <include>org.apache.geronimo.specs:geronimo-jta_1.1_spec</include>\n+                <include>org.apache.geronimo.specs:geronimo-jpa_3.0_spec</include>\n+            </includes>\n+        </dependencySet>\n+    </dependencySets>\n+</assembly>"},{"sha":"dc233cdcb828add6a21897b7eeed026fa5fb35d1","filename":"openjpa-project/pom.xml","status":"modified","additions":124,"deletions":2,"changes":126,"blob_url":"https://github.com/apache/openjpa/blob/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-project/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-project/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/pom.xml?ref=cd4c8839f87f750e2655a5b98f552e2ba4031a67","patch":"@@ -40,7 +40,7 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-parent</artifactId>\n-        <version>1.0.3</version>\n+        <version>1.0.4</version>\n     </parent>\n \n     <properties>\n@@ -76,6 +76,30 @@\n         <docbook.target>${project.basedir}/target/manual</docbook.target>\n         <docbook.version>1.67.2</docbook.version>\n         <local.repository>${settings.localRepository}</local.repository>\n+\n+        <!-- \n+            Java imaging apis are needed to include images in a PDF.\n+            JIMI or JAI may be used. Neither is available in a maven\n+            repository and should be downloaded and installed manually\n+            to your local repository.\n+\n+            ie :\n+            $ mvn install:install-file -Dfile=jai_core.jar \\\n+              -DgroupId=javax.media -DartifactId=jai-core \\ \n+              -Dversion=1.1.3 -Dpackaging=jar\n+\n+            Alternatively if you have installed the JAI artifacts to an \n+            internal repository you can specify it on the command line:\n+              -Djai.maven.repo=REPOS_URL\n+              -Djai.groupId=javax.media\n+            -->\n+        <jai.maven.repo>https://m2proxy.atlassian.com/repository/public</jai.maven.repo>\n+        <jai.groupId>com.sun</jai.groupId>\n+        <jai.version>1.1.3</jai.version>\n+\n+        <!-- authentication for nightly uploads -->\n+        <nightly.user.name>${user.name}</nightly.user.name>\n+        <nightly.password>passw0rd</nightly.password>\n     </properties>\n \n     <scm>\n@@ -100,6 +124,7 @@\n \n         <plugins>\n             <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n                 <artifactId>maven-assembly-plugin</artifactId>\n                 <executions>\n                     <execution>\n@@ -135,6 +160,7 @@\n                 content from the openjpa-project module.\n             -->\n             <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n                 <artifactId>maven-resources-plugin</artifactId>\n                 <executions>\n                     <execution>\n@@ -150,11 +176,26 @@\n             <plugin>\n                 <groupId>org.apache.maven.plugins</groupId>\n                 <artifactId>maven-site-plugin</artifactId>\n-                <version>2.0-beta-5</version>\n                 <configuration>\n                     <siteDirectory>target/filtered-site</siteDirectory>\n                 </configuration>\n             </plugin>\n+\n+            <plugin>\n+                <groupId>org.codehaus.mojo</groupId>\n+                <artifactId>ianal-maven-plugin</artifactId>\n+                <executions>\n+                    <execution>\n+                        <goals>\n+                            <goal>verify-legal-files</goal>\n+                        </goals>\n+                        <configuration>\n+                            <!-- Do not fail the build, as ianal will fail on source zips due to included META-INF dirs -->\n+                            <strict>false</strict>\n+                        </configuration>\n+                    </execution>\n+                </executions>\n+            </plugin>\n         </plugins>\n     </build>\n \n@@ -258,6 +299,18 @@\n                             <version>4.4</version>\n                             <scope>runtime</scope>\n                         </dependency>\n+                        <dependency>\n+                            <groupId>${jai.groupId}</groupId>\n+                            <artifactId>jai_core</artifactId>\n+                            <version>${jai.version}</version>\n+                            <scope>runtime</scope>\n+                        </dependency>\n+                        <dependency>\n+                            <groupId>${jai.groupId}</groupId>\n+                            <artifactId>jai_codec</artifactId>\n+                            <version>${jai.version}</version>\n+                            <scope>runtime</scope>\n+                        </dependency>\n                         </dependencies>\n                     </plugin>\n                 </plugins>\n@@ -275,6 +328,75 @@\n                     <url>http://agilejava.com/maven</url>\n                 </pluginRepository>\n             </pluginRepositories>\n+            <repositories>\n+                <repository>\n+                    <id>jai.repository</id>\n+                    <name>JAI Repository (indirectly used by Docbook plugin)</name>\n+                    <url>${jai.maven.repo}</url>\n+                </repository>\n+            </repositories>\n+        </profile>\n+        <!-- \n+          Upload distribution files, javadoc and manual to openjpa.apache.org/builds/latest. \n+          This profile is designed to be run nightly by a continuous build server, but can\n+          also be run manually.\n+\n+          The nightly.user.name and nightly.password properties need to be set prior to using\n+          this profile, ie : \n+          $ mvn -Dnightly.user.name=mikedd -Dnightly.password=mikesPassword -Pnightly-upload package\n+          or (using a profile defined in $user.home/.m2/settings.xml )\n+          $ mvn -Pnightly-upload,mikes-nightly-credentials package\n+          -->\n+        <profile>\n+            <id>nightly-upload</id>\n+            <build>\n+                <plugins>\n+                    <plugin>\n+                        <groupId>org.apache.maven.plugins</groupId>\n+                        <artifactId>maven-antrun-plugin</artifactId>\n+                        <executions>\n+                            <execution>\n+                                <phase>package</phase>\n+                                <configuration>\n+                                    <tasks>\n+                                        <mkdir dir=\"target/site/tempDocs\" />\n+                                        <unzip dest=\"target/site/tempDocs\">\n+                                            <fileset dir=\"target/site/downloads\">\n+                                                <include name=\"*binary*.zip\" />\n+                                            </fileset>\n+                                            <patternset>\n+                                                <include name=\"**/javadoc/**\" />\n+                                                <include name=\"**/manual/**\" />\n+                                            </patternset>\n+                                        </unzip>\n+                                        <move todir=\"target/site/tempDocs/docs\">\n+                                            <fileset dir=\"target/site/tempDocs/apache-openjpa-${pom.version}/docs\" /> \n+                                        </move>\n+                                        <checksum>\n+                                            <fileset dir=\"target/site/downloads/\">\n+                                                <include name=\"*.zip\" />\n+                                            </fileset>\n+                                        </checksum>\n+                                        <scp todir=\"${nightly.user.name}:${nightly.password}@people.apache.org:/www/openjpa.apache.org/builds/latest-1.0.x/downloads\" trust=\"true\">\n+                                            <fileset dir=\"target/site/downloads\" />\n+                                        </scp>\n+                                        <scp todir=\"${nightly.user.name}:${nightly.password}@people.apache.org:/www/openjpa.apache.org/builds/latest-1.0.x/docs\" trust=\"true\">\n+                                            <fileset dir=\"target/site/tempDocs/docs\" /> \n+                                        </scp>\n+                                        <sshexec host=\"people.apache.org\" username=\"${nightly.user.name}\" password=\"${nightly.password}\" command=\"chmod -R g+w /www/openjpa.apache.org/builds/latest-1.0.x\" trust=\"true\" />\n+                                        <delete>\n+                                            <fileset dir=\"target/site/tempDocs\" />\n+                                        </delete>\n+                                    </tasks>\n+                                </configuration>\n+                                <goals>\n+                                    <goal>run</goal>\n+                                </goals>\n+                            </execution>\n+                        </executions>\n+                    </plugin>\n+                </plugins>\n+            </build>\n         </profile>\n     </profiles>\n "},{"sha":"7298d1dd1762d588999c4499660319919af97bb9","filename":"openjpa-project/src/doc/manual/jpa_overview_mapping.xml","status":"modified","additions":18,"deletions":18,"changes":36,"blob_url":"https://github.com/apache/openjpa/blob/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-project/src/doc/manual/jpa_overview_mapping.xml","raw_url":"https://github.com/apache/openjpa/raw/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-project/src/doc/manual/jpa_overview_mapping.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/jpa_overview_mapping.xml?ref=cd4c8839f87f750e2655a5b98f552e2ba4031a67","patch":"@@ -99,6 +99,14 @@ JPA uses the defaults defined by the specification. As we present\n each mapping throughout this chapter, we also describe the defaults that apply\n when the mapping is absent.\n     </para>\n+    <note>\n+        <para>\n+Mapping metadata is used primarily with schema generation. This metadata should not\n+be relied upon for validation prior to communicating with the database. \n+For example using the @Column(nullable=false) annotation does not do up front validation\n+that the value in the entity is correct. \n+        </para>\n+    </note>\n     <section id=\"jpa_overview_mapping_table\">\n         <title>\n             Table\n@@ -184,22 +192,10 @@ consider the class' primary table. Later, we will see how to map certain fields\n to other tables.\n         </para>\n         <para>\n-The example below maps classes to tables according to the following diagram. The\n+The example below maps classes to tables to separate schemas. The\n <literal>CONTRACT</literal>, <literal>SUB</literal>, and <literal>LINE_ITEM\n </literal> tables are in the <literal>CNTRCT</literal> schema; all other tables\n are in the default schema.\n-        </para>\n-        <mediaobject>\n-            <imageobject>\n-                <!-- PNG image data, 513 x 410 (see README) -->\n-                <imagedata fileref=\"img/mapping-tables.png\" width=\"341px\"/>\n-                \n-            </imageobject>\n-        </mediaobject>\n-        <para>\n-Note that the diagram does not include our featureSelection's <classname>Document\n-</classname> and <classname>Address</classname> classes. Mapped superclasses and\n-embeddable classes are never mapped to tables.\n         </para>\n         <example id=\"jpa_overview_mapping_classex\">\n             <title>\n@@ -4127,6 +4123,7 @@ The same metadata expressed in XML:\n             &lt;join-table name=\"MAG_ARTS\"&gt;\n                 &lt;join-column name=\"MAG_ISBN\" referenced-column-name=\"ISBN\"/&gt;\n                 &lt;join-column name=\"MAG_TITLE\" referenced-column-name=\"TITLE\"/&gt;\n+                &lt;inverse-join-column name=\"ART_ID\" referenced-column-name=\"ID\"/&gt;\n             &lt;/join-table&gt;\n         &lt;/one-to-many&gt;\n         ...\n@@ -4136,12 +4133,15 @@ The same metadata expressed in XML:\n     &lt;table name=\"ART\"/&gt;\n         &lt;attributes&gt;\n             &lt;id name=\"id\"/&gt;\n-            &lt;many-to-many name=\"articles\"&gt;\n+            &lt;many-to-many name=\"authors\"&gt;\n                 &lt;order-by&gt;lastName, firstName&lt;/order-by&gt;\n                 &lt;join-table name=\"ART_AUTHS\"&gt;\n                     &lt;join-column name=\"ART_ID\" referenced-column-name=\"ID\"/&gt;\n                     &lt;inverse-join-column name=\"AUTH_ID\" referenced-column-name=\"AID\"/&gt;\n                 &lt;/join-table&gt;\n+            &lt;cascade&gt;\n+                &lt;cascade-persist/&gt;\n+            &lt;/cascade&gt;\n             &lt;/many-to-many&gt;\n             ...\n        &lt;/attributes&gt;\n@@ -4182,7 +4182,7 @@ complete mappings below:\n             <itemizedlist>\n                 <listitem>\n                     <para>\n-<literal>Magazine.publisher</literal> and <literal>Company.ags</literal>.\n+<literal>Magazine.publisher</literal> and <literal>Company.mags</literal>.\n                     </para>\n                 </listitem>\n                 <listitem>\n@@ -4276,9 +4276,9 @@ The same metadata expressed in XML:\n         ...\n         &lt;one-to-many name=\"items\"&gt;\n             &lt;map-key name=\"num\"&gt;\n-            &lt;join-table name=\"MAG_ARTS\"&gt;\n-                &lt;join-column name=\"MAG_ISBN\" referenced-column-name=\"ISBN\"/&gt;\n-                &lt;join-column name=\"MAG_TITLE\" referenced-column-name=\"TITLE\"/&gt;\n+            &lt;join-table name=\"SUB_ITEMS\" schema=\"CNTRCT\"&gt;\n+                &lt;join-column name=\"SUB_ID\"/&gt;\n+                &lt;inverse-join-column name=\"ITEM_ID\"/&gt;\n             &lt;/join-table&gt;\n             &lt;cascade&gt;\n                 &lt;cascade-persist/&gt;"},{"sha":"7d3bc5b776e85957ce87073ed1ffcf40fed50f39","filename":"openjpa-project/src/doc/manual/jpa_overview_meta.xml","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-project/src/doc/manual/jpa_overview_meta.xml","raw_url":"https://github.com/apache/openjpa/raw/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-project/src/doc/manual/jpa_overview_meta.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/jpa_overview_meta.xml?ref=cd4c8839f87f750e2655a5b98f552e2ba4031a67","patch":"@@ -107,6 +107,15 @@ in the Reference Guide for details. There are currently no XML equivalents for\n these extension annotations.\n         </para>\n     </note>\n+    <note>\n+        <para>\n+Persistence metadata may be used to validate the contents of your entities prior to communicating\n+with the database. This differs from mapping meta data which is primarily used for schema generation.\n+For example if you indicate that a relationship is not optional (e.g. @Basic(optional=false)) OpenJPA\n+will validate that the variable in your entity is not null <emphasis>before</emphasis> inserting a row \n+in the database. \n+        </para>\n+    </note>\n     <mediaobject>\n         <imageobject>\n             <!-- PNG image data, 553 x 580 (see README) -->"},{"sha":"91f06f6d1b27a760bca37dc3cdc62bf6b656e499","filename":"openjpa-project/src/doc/manual/jpa_overview_query.xml","status":"modified","additions":21,"deletions":20,"changes":41,"blob_url":"https://github.com/apache/openjpa/blob/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-project/src/doc/manual/jpa_overview_query.xml","raw_url":"https://github.com/apache/openjpa/raw/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-project/src/doc/manual/jpa_overview_query.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/jpa_overview_query.xml?ref=cd4c8839f87f750e2655a5b98f552e2ba4031a67","patch":"@@ -130,7 +130,7 @@ Keywords in JPQL expressions are case-insensitive, but entity, identifier, and\n member names are not. For example, the expression above could also be expressed\n as:\n             </para>\n-<programlisting>SELECT x FROM Magazine x WHERE x.title = 'JDJ'</programlisting>\n+<programlisting>select x from Magazine x where x.title = 'JDJ'</programlisting>\n             <para>\n But it could not be expressed as:\n             </para>\n@@ -175,18 +175,18 @@ they are evaluated. This is similar to how parentheses are used in Java. For\n example:\n             </para>\n <programlisting>\n-SELECT x FROM Magazine x WHERE (x.price &gt; 3.00 AND x.price &lt;= 5.00) OR x.price = 7.00\n+SELECT x FROM Magazine x WHERE (x.price &gt; 3.00 AND x.price &lt;= 5.00) OR x.price &lt; 7.00\n </programlisting>\n             <para>\n-This expression would match magazines whose price is 4.00, 5.00, or 7.00, but\n-not 6.00. Alternately:\n+This expression would match magazines whose price is less than 7.00.\n+Alternately:\n             </para>\n <programlisting>\n-SELECT x FROM Magazine x WHERE x.price &gt; 3.00 AND (x.price &lt;= 5.00 OR x.price = 7.00)\n+SELECT x FROM Magazine x WHERE x.price &gt; 3.00 AND (x.price &lt;= 5.00 OR x.price &lt; 7.00)\n </programlisting>\n             <para>\n-This expression will magazines whose price is 5.00 or 7.00, but not 4.00 or\n-6.00.\n+This expression would match magazines whose price is 4.00, 5.00 or 6.00, but not\n+1.00, 2.00 or 3.00.\n             </para>\n             <para>\n JPQL also includes the following conditionals:\n@@ -2247,7 +2247,7 @@ for '_foo' and false for 'bar'\n                         <listitem>\n                             <para>\n <programlisting>address.phone NOT LIKE '12%3'</programlisting> is false for\n-'123' and '12993' and true for '1234' If the value of the string_expression or\n+'123' and '12993' and true for '1234'. If the value of the string_expression or\n pattern_value is <literal>NULL</literal> or unknown, the value of the <literal>\n LIKE</literal> expression is unknown. If the escape_character is specified and\n is <literal>NULL</literal>, the value of the <literal>LIKE</literal> expression\n@@ -2301,8 +2301,10 @@ comparison expression is unknown.\n                     JPQL Collection Member Expressions\n                 </title>\n                 <para>\n-The use of the comparison collection_member_expression is as follows: syntax for\n-the operator <literal>MEMBER OF</literal> in an <itemizedlist><listitem><para>\n+The use of the comparison collection_member_expression is as follows:\n+                    <itemizedlist>\n+                        <listitem>\n+                            <para>\n collection_member_expression ::= entity_expression [NOT] MEMBER [OF]\n collection_valued_path_expression\n                             </para>\n@@ -2331,6 +2333,9 @@ single-valued association-field path expression in the collection member\n expression is <literal>NULL</literal> or unknown, the value of the collection\n member expression is unknown.\n                 </para>\n+                <para>\n+The use of the reserved word OF is optional in this expression.\n+                </para>\n             </section>\n             <section id=\"jpa_langref_exists\">\n                 <title>\n@@ -2346,9 +2351,6 @@ exists_expression ::= [NOT] EXISTS (subquery)\n                     </itemizedlist>\n                 </para>\n                 <para>\n-The use of the reserved word OF is optional in this expression.\n-                </para>\n-                <para>\n Example: <programlisting>SELECT DISTINCT auth FROM Author auth\n     WHERE EXISTS\n         (SELECT spouseAuthor FROM Author spouseAuthor WHERE spouseAuthor = auth.spouse)\n@@ -2802,7 +2804,10 @@ COUNT</literal> can be applied, the result of the aggregate function is 0.\n                 <para>\n The argument to an aggregate function may be preceded by the keyword <literal>\n DISTINCT</literal> to specify that duplicate values are to be eliminated before\n-the aggregate function is applied. Null values are eliminated before the\n+the aggregate function is applied.\n+It is legal to specify <literal>DISTINCT</literal> with <literal>MAX</literal>\n+or <literal>MIN</literal>, but it does not affect the result.\n+Null values are eliminated before the\n aggregate function is applied, regardless of whether the keyword <literal>\n DISTINCT</literal> is specified.\n                 </para>\n@@ -2813,7 +2818,7 @@ DISTINCT</literal> is specified.\n                     <para>\n Examples The following query returns the average price of all magazines:\n <programlisting>SELECT AVG(mag.price) FROM Magazine mag</programlisting> The\n-following query returns the sum total cost of all the prices from all the\n+following query returns the sum of all the prices from all the\n magazines published by 'Larry': <programlisting>SELECT SUM(mag.price) FROM Publisher pub JOIN pub.magazines mag pub.firstName = 'Larry'\n </programlisting> The following query returns the total number of magazines:\n <programlisting>SELECT COUNT(mag) FROM Magazine mag</programlisting>\n@@ -2843,16 +2848,12 @@ orderby_item ::= state_field_path_expression [ASC | DESC]\n                 </itemizedlist>\n             </para>\n             <para>\n-It is legal to specify <literal>DISTINCT</literal> with <literal>MAX</literal>\n-or <literal>MIN</literal>, but it does not affect the result.\n-            </para>\n-            <para>\n When the <literal>ORDER BY</literal> clause is used in a query, each element of\n the <literal>SELECT</literal> clause of the query must be one of the following:\n an identification variable x, optionally denoted as <literal>OBJECT(x)</literal>\n , a single_valued_association_path_expression, or a state_field_path_expression.\n For example: <programlisting>\n-SELECT pub FROM Publisher pub JOIN pub.magazines mag ORDER BY o.revenue, o.name\n+SELECT pub FROM Publisher pub ORDER BY pub.revenue, pub.name\n </programlisting> If more than one orderby_item is specified, the left-to-right\n sequence of the orderby_item elements determines the precedence, whereby the\n leftmost orderby_item has highest precedence. The keyword <literal>ASC</literal>"},{"sha":"61db7ce572cc180f9ad9c72a2a984921b4824f1f","filename":"openjpa-project/src/doc/manual/ref_guide_caching.xml","status":"modified","additions":45,"deletions":0,"changes":45,"blob_url":"https://github.com/apache/openjpa/blob/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-project/src/doc/manual/ref_guide_caching.xml","raw_url":"https://github.com/apache/openjpa/raw/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-project/src/doc/manual/ref_guide_caching.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_caching.xml?ref=cd4c8839f87f750e2655a5b98f552e2ba4031a67","patch":"@@ -216,6 +216,51 @@ public class Employee {\n }\n </programlisting>\n             </example>\n+\n+            <para>\n+            <indexterm>\n+                <primary>caching</primary>\n+                <secondary>exclusions</secondary>\n+            </indexterm>\n+            Entities may be explicitly excluded from the cache by providing a \n+            list of fully qualified class names in the ExcludedTypes argument.\n+            The entities provided via ExcludedTypes will not be cached \n+            regardless of the @DataCache annotation. \n+            </para>\n+            <example id=\"ex_exclude_types_from_cache\">\n+                <title>\n+                    Excluding entities\n+                </title>\n+                <para>\n+                    Exclude entities foo.bar.Person and foo.bar.Employee from the cache. \n+                    <programlisting>\n+&lt;property name=\"openjpa.DataCache\" value=\"true(ExcludedTypes=foo.bar.Person;foo.bar.Employee)\"/&gt;\n+                    </programlisting>\n+                </para>\n+            </example>\n+\n+            <para>\n+            <indexterm>\n+                <primary>caching</primary>\n+                <secondary>inclusions</secondary>\n+            </indexterm>\n+            Entities may be explicitly included from the cache by providing a \n+            list of fully qualified class names in the Types argument. The\n+            entities provided via ExcludedTypes will not cached regardless\n+            of the @DataCache annotation. Any entities which are not included\n+            in this list will not be cached. \n+            </para>\n+            <example id=\"ex_include_types_in_cache\">\n+                <title>\n+                    Including entities\n+                </title>\n+                <para>\n+                    Include only entity foo.bar.FullTimeEmployee from the cache. \n+                    <programlisting>\n+&lt;property name=\"openjpa.DataCache\" value=\"true(Types=foo.bar.FullTimeEmployee)\"/&gt;\n+                    </programlisting>\n+                </para>\n+            </example>\n             <para>\n See the <ulink url=\"../javadoc/org/apache/openjpa/persistence/DataCache.html\">\n <classname>org.apache.openjpa.persistence.DataCache</classname></ulink> Javadoc"},{"sha":"7bc85e0df75ab8f7e5031727880ce465801c1408","filename":"openjpa-project/src/doc/manual/ref_guide_conf.xml","status":"modified","additions":46,"deletions":2,"changes":48,"blob_url":"https://github.com/apache/openjpa/blob/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-project/src/doc/manual/ref_guide_conf.xml","raw_url":"https://github.com/apache/openjpa/raw/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-project/src/doc/manual/ref_guide_conf.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_conf.xml?ref=cd4c8839f87f750e2655a5b98f552e2ba4031a67","patch":"@@ -2741,6 +2741,50 @@ reading registered classes. Setting this to true unnecessarily may obscure more\n serious problems.\n             </para>\n         </section>\n+        <section id=\"openjpa.RuntimeUnenhancedClasses\">\n+            <title>openjpa.RuntimeUnenhancedClasses</title>\n+            <para> \n+                <emphasis role=\"bold\">Property name: </emphasis>\n+                <literal>openjpa.RuntimeUnenhancedClasses</literal>\n+            </para>\n+            <para>\n+                 <emphasis role=\"bold\">Configuration API: </emphasis>\n+                 <ulink url=\"../javadoc/org/apache/openjpa/conf/OpenJPAConfiguration.html#getRuntimeUnenhancedClasses()\">org.apache.openjpa.conf.OpenJPAConfiguration.getRuntimeUnenhancedClasses</ulink>\n+            </para>\n+            <para>\n+                <emphasis role=\"bold\">Resource adaptor config property:</emphasis>\n+                RuntimeUnenhancedClasses\n+            </para>\n+            <para>\n+                <emphasis role=\"bold\">Default: </emphasis>\n+                <literal>supported</literal>\n+                \n+            </para>\n+            <para>\n+                <emphasis role=\"bold\">Possible values:</emphasis>\n+                <literal>supported</literal>, \n+                <literal>unsupported</literal>, \n+                <literal>warn</literal>\n+            </para>\n+            <para>\n+                <emphasis role=\"bold\">Description:</emphasis>\n+                The RuntimeUnenhancedClasses property controls how OpenJPA \n+                handles classes that have not been enhanced byt the PCEnhancer \n+                tool or automatically by a javaagent. If RuntimeUnenhanced is \n+                set to <literal>supported</literal> OpenJPA will automatically \n+                create subclasses for unenhanced entity classes. If set to \n+                <literal>unsupported</literal>OpenJPA will not create subclasses \n+                for unenhanced entity classes and will throw an exception when \n+                they are detected. If set to <literal>warn</literal> OpenJPA \n+                will not create subclasses for unenhanced entity classes \n+                but will log a warning message.  \n+            </para>\n+            <para>\n+                See the reference guide section on unenhanced types for more \n+                information \n+                <xref linkend=\"ref_guide_pc_enhance_unenhanced_types\"/>\n+            </para>\n+        </section>\n         <section id=\"openjpa.SavepointManager\">\n             <title>\n                 openjpa.SavepointManager\n@@ -3709,8 +3753,8 @@ UpdateManager</literal>\n <classname>org.apache.openjpa.jdbc.kernel.UpdateManager</classname></ulink> to\n use to flush persistent object changes to the datastore. The provided default\n implementation is\n-<ulink url=\"../javadoc/org/apache/openjpa/jdbc/kernel/OperationOrderUpdateManager\">\n-<classname>org.apache.openjpa.jdbc.kernel.OperationOrderUpdateManager</classname>\n+<ulink url=\"../javadoc/org/apache/openjpa/jdbc/kernel/ConstraintUpdateManager\">\n+<classname>org.apache.openjpa.jdbc.kernel.ConstraintUpdateManager</classname>\n </ulink>.\n             </para>\n         </section>"},{"sha":"abd0e40b09109843e6791e2ccde2e1f24ae2f551","filename":"openjpa-project/src/doc/manual/ref_guide_dbsetup.xml","status":"modified","additions":61,"deletions":3,"changes":64,"blob_url":"https://github.com/apache/openjpa/blob/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-project/src/doc/manual/ref_guide_dbsetup.xml","raw_url":"https://github.com/apache/openjpa/raw/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-project/src/doc/manual/ref_guide_dbsetup.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_dbsetup.xml?ref=cd4c8839f87f750e2655a5b98f552e2ba4031a67","patch":"@@ -180,6 +180,22 @@ logged SQL statements.\n each pretty-printed SQL line.\n                         </para>\n                     </listitem>\n+                    <listitem>\n+                        <para>\n+                        <indexterm>\n+                            <primary>\n+                                SQL\n+                            </primary>\n+                            <secondary>\n+                                PrintParameters\n+                            </secondary>\n+                        </indexterm>\n+<literal>PrintParameters</literal>: A boolean indicating whether SQL parameter \n+values will be included in exception text and when logging is enabled. Since \n+the parameter values may contain sensitive information the default value is \n+false. \n+                        </para>\n+                    </listitem>\n                 </itemizedlist>\n             </listitem>\n         </itemizedlist>\n@@ -193,7 +209,7 @@ each pretty-printed SQL line.\n &lt;property name=\"openjpa.ConnectionURL\" value=\"jdbc:hsqldb:db-hypersonic\"/&gt;\n &lt;property name=\"openjpa.ConnectionDriverName\" value=\"org.hsqldb.jdbcDriver\"/&gt;\n &lt;property name=\"openjpa.ConnectionFactoryProperties\" \n-    value=\"PrettyPrint=true, PrettyPrintLineLength=80\"/&gt;\n+    value=\"PrettyPrint=true, PrettyPrintLineLength=80, PrintParameters=True\"/&gt;\n </programlisting>\n         </example>\n     </section>\n@@ -1925,6 +1941,42 @@ generated by the <literal>mappingtool</literal>.\n is generated by the <literal>mappingtool</literal>.\n                     </para>\n                 </listitem>\n+                <listitem id=\"DBDictionary.SearchStringEscape\">\n+                    <para>\n+                    <indexterm>\n+                        <primary>\n+                            SQL\n+                        </primary>\n+                        <secondary>\n+                            SearchStringEscape\n+                        </secondary>\n+                    </indexterm>\n+<literal>SearchStringEscape</literal>: \n+The default escape character used when generating SQL <literal>LIKE</literal>\n+clauses.  The escape character is used to escape the wildcard meaning of the \n+<literal>_</literal> and <literal>%</literal> characters.\n+Note: since JPQL provides the ability to define the escape character in\n+the query, this setting is primarily used when translating other query\n+languages, such as JDOQL.  Defaults to <literal>\"\\\\\"</literal> \n+(a single backslash in Java speak).\n+                    </para>\n+                </listitem>\n+                <listitem id=\"DBDictionary.RequiresSearchStringEscapeForLike\">\n+                    <para>\n+                    <indexterm>\n+                        <primary>\n+                            SQL\n+                        </primary>\n+                        <secondary>\n+                            RequiresSearchStringEscapeForLike\n+                        </secondary>\n+                    </indexterm>\n+<literal>RequiresSearchStringEscapeForLike</literal>:\n+When true, the database requires an escape string for queries that use\n+<literal>LIKE</literal>.  The escape string can be specified using\n+<literal>searchStringEscape</literal>.  Defaults to <literal>true</literal>.\n+                    </para>\n+                </listitem>\n                 <listitem id=\"DBDictionary.LongVarbinaryTypeName\">\n                     <para>\n                     <indexterm>\n@@ -2741,7 +2793,7 @@ SQL 92 syntax or a database-specific syntax with outer join support.\n         </para>\n         <para>\n The <link linkend=\"openjpa.jdbc.DBDictionary\"><literal>\n-openjpa.jdbc.DBDictionary</literal></link> plugin accepts the the <literal>\n+openjpa.jdbc.DBDictionary</literal></link> plugin accepts the <literal>\n JoinSyntax</literal> property to set the system's default syntax. The available\n values are:\n         </para>\n@@ -2853,7 +2905,13 @@ property accepts the following values:\n                 <para>\n <literal>always</literal>: Each <classname>EntityManager</classname> obtains a\n single connection and uses it until the <classname>EntityManager</classname>\n-closes.\n+closes. Great care should be taken when using this property if the application \n+cannot close the EntityManager (ie container-managed EntityManagers in a JEE \n+Application Server). In this case the connection will remain open for an \n+undefined time and the application may not be able to recover from a terminated\n+connection(ie if a TCP/IP timeout severs the connection to the database). \n+For this reason the <literal>always</literal> option should not be used with \n+container managed EntityManagers.\n                 </para>\n             </listitem>\n             <listitem>"},{"sha":"24c8bef413e66d583fcff6bdc4745e9c1ad08639","filename":"openjpa-project/src/doc/manual/ref_guide_logging.xml","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-project/src/doc/manual/ref_guide_logging.xml","raw_url":"https://github.com/apache/openjpa/raw/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-project/src/doc/manual/ref_guide_logging.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_logging.xml?ref=cd4c8839f87f750e2655a5b98f552e2ba4031a67","patch":"@@ -177,6 +177,16 @@ about possible performance concerns will be logged to the <literal>INFO\n use. Detailed information about the execution of SQL statements will be sent to\n the <literal>TRACE</literal> level. It is useful to enable this channel if you\n are curious about the exact SQL that OpenJPA issues to the datastore.\n+<note>\n+The SQL issued to the database may contain sensitive information. By default the\n+parameter values used in the prepared statements generated by OpenJPA will not \n+be printed in the SQL log - instead you will see a ? for each value. The actual \n+values may be printed by adding <literal>PrintParameters=True</literal> to the\n+<link linkend=\"openjpa.ConnectionFactoryProperties\">\n+<literal>openjpa.ConnectionFactoryProperties</literal></link> property. Also\n+see <link linkend=\"ref_guide_dbsetup_builtin\"><literal>Using the OpenJPA\n+DataSource</literal></link>\n+</note>\n                 </para>\n                 <para>\n When using the built-in OpenJPA logging facilities, you can enable SQL logging"},{"sha":"84602de08296e52babf28a628b7cdaea6944f83d","filename":"openjpa-project/src/doc/manual/ref_guide_mapping.xml","status":"modified","additions":3328,"deletions":3328,"changes":6656,"blob_url":"https://github.com/apache/openjpa/blob/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-project/src/doc/manual/ref_guide_mapping.xml","raw_url":"https://github.com/apache/openjpa/raw/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-project/src/doc/manual/ref_guide_mapping.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_mapping.xml?ref=cd4c8839f87f750e2655a5b98f552e2ba4031a67"},{"sha":"83b57133cbd6368c65ae11757d58cd19bf094816","filename":"openjpa-project/src/doc/manual/ref_guide_pc.xml","status":"modified","additions":13,"deletions":3,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-project/src/doc/manual/ref_guide_pc.xml","raw_url":"https://github.com/apache/openjpa/raw/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-project/src/doc/manual/ref_guide_pc.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_pc.xml?ref=cd4c8839f87f750e2655a5b98f552e2ba4031a67","patch":"@@ -431,13 +431,23 @@ if you set the <literal>classLoadEnhancement</literal> javaagent flag to\n runtime enhancement process for some reason.\n                 </para></listitem>\n                 <listitem><para>\n-<emphasis>state comparison and subclassing</emphasis>: if you are running\n+<emphasis>Runtime Unenhanced Classes</emphasis>: AKA statte comparison and \n+subclassing. If you are running\n in a Java 5 environment without a javaagent, or in a Java 6 environment that\n does not support class retransformation, OpenJPA will still create subclasses\n as outlined above. However, in some cases, OpenJPA may not be able to receive\n notifications when you read or write persistent data.\n                 </para>\n                 <para>\n+                <note>\n+Runtime Unenhanced Classes has some known limitations which are discussed below\n+and documented in JIRA issues on the OpenJPA website. Support for this method \n+of automatic enhancement may be enabled or disabled via the \n+<xref linkend=\"openjpa.RuntimeUnenhancedClasses\">\n+openjpa.RuntimeUnenhancedClasses configuration </xref>option.\n+                </note>\n+                </para>\n+                <para>\n If you are using <emphasis>property access</emphasis> for your persistent data,\n then OpenJPA will be able to track all accesses for instances that you load\n from the database, but not for instances that you create. This is because\n@@ -592,9 +602,9 @@ method:\n                     Finding an Entity with an Entity Identity Field\n                 </title>\n <programlisting>\n-public Delivery createDelivery(EntityManager em, Order order) {\n+public Delivery createDelivery(Order order) {\n     Delivery delivery = new Delivery();\n-    delivery.setId(o);\n+    delivery.setId(order);\n     delivery.setDelivered(new Date());\n     return delivery;\n }"},{"sha":"19d1cbf6d1d7979a9840ff712679531ffc73507b","filename":"openjpa-project/src/doc/manual/ref_guide_remote.xml","status":"modified","additions":19,"deletions":1,"changes":20,"blob_url":"https://github.com/apache/openjpa/blob/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-project/src/doc/manual/ref_guide_remote.xml","raw_url":"https://github.com/apache/openjpa/raw/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-project/src/doc/manual/ref_guide_remote.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_remote.xml?ref=cd4c8839f87f750e2655a5b98f552e2ba4031a67","patch":"@@ -563,6 +563,15 @@ construction. For example, you might set the <literal>java.naming.provider.url\n To configure a factory to use the JMS provider, your properties might look like\n the following:\n                 </para>\n+                <example id=\"ref_guide_event_conf_jmsex\">\n+                    <title>\n+                        JMS Remote Commit Provider Configuration\n+                    </title>\n+<programlisting>\n+&lt;property name=\"openjpa.RemoteCommitProvider\"\n+    value=\"jms(ExceptionReconnectAttempts=5)\"/&gt;\n+</programlisting>\n+                </example>\n                 <note>\n                     <para>\n Because of the nature of JMS, it is important that you invoke <methodname>\n@@ -624,7 +633,7 @@ which notifications should be sent. No default value.\n <literal>NumBroadcastThreads</literal>: The number of threads to create for the\n purpose of transmitting events to peers. You sould increase this value as the\n number of concurrent transactions increases. The maximum number of concurrent\n-transactions is a function of the size of the connection pool. See the the\n+transactions is a function of the size of the connection pool. See the\n <literal>MaxActive</literal> property of <literal>\n openjpa.ConnectionFactoryProperties</literal> in\n <xref linkend=\"ref_guide_dbsetup_builtin\"/>. Setting a value of 0 will\n@@ -702,6 +711,15 @@ persisted object ids as well.\n To transmit persisted object ids in our remote commit events using the JMS\n provider, we modify the previous example as follows:\n                 </para>\n+                <example id=\"ref_guide_event_conf_jms2ex\">\n+                    <title>\n+                        JMS Remote Commit Provider transmitting Persisted Object Ids\n+                    </title>\n+<programlisting>\n+&lt;property name=\"openjpa.RemoteCommitProvider\"\n+    value=\"jms(ExceptionReconnectAttempts=5, TransmitPersistedObjectIds=true)\"/&gt;\n+</programlisting>\n+                </example>\n             </section>\n         </section>\n         <section id=\"ref_guide_event_customization\">"},{"sha":"bf782a5ce69fdb3c1601292b05af3d3f3c60155a","filename":"openjpa-project/src/doc/manual/supported_databases.xml","status":"modified","additions":8,"deletions":1,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-project/src/doc/manual/supported_databases.xml","raw_url":"https://github.com/apache/openjpa/raw/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-project/src/doc/manual/supported_databases.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/supported_databases.xml?ref=cd4c8839f87f750e2655a5b98f552e2ba4031a67","patch":"@@ -693,6 +693,13 @@ in schema names, you need to set the \"schemaCase=preserve\" parameter in the\n property.\n                     </para>\n                 </listitem>\n+                <listitem>\n+                    <para>\n+SQL Server 2005 does not support native sequences. If you would like to use \n+generated values with SQL Server you should use GenerationType.IDENTITY, \n+GenerationType.TABLE, or GenerationType.AUTO.\n+                    </para> \n+                </listitem>\n             </itemizedlist>\n         </section>\n     </section>\n@@ -808,7 +815,7 @@ openjpa.ConnectionURL: jdbc:oracle:thin:@SERVER_NAME:1521:DB_NAME\n Oracle has support for \"query hints\", which are formatted comments embedded in\n SQL that provide some hint for how the query should be executed. These hints are\n usually designed to provide suggestions to the Oracle query optimizer for how to\n-efficiently perform a certainly query, and aren't typically needed for any but\n+efficiently perform a certain query, and aren't typically needed for any but\n the most intensive queries.\n             </para>\n             <example id=\"dbsupport_oracle_query_hints_ex\">"},{"sha":"b3ee843153fe7cc0637890a4366dc3ebc3d821fe","filename":"openjpa-xmlstore/pom.xml","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-xmlstore/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/cd4c8839f87f750e2655a5b98f552e2ba4031a67/openjpa-xmlstore/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-xmlstore/pom.xml?ref=cd4c8839f87f750e2655a5b98f552e2ba4031a67","patch":"@@ -31,7 +31,7 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-parent</artifactId>\n-        <version>1.0.3</version>\n+        <version>1.0.4</version>\n     </parent>\n     <profiles>\n         <profile>\n@@ -41,6 +41,7 @@\n                 <pluginManagement>\n                     <plugins>\n                         <plugin>\n+                            <groupId>org.apache.maven.plugins</groupId>\n                             <artifactId>maven-compiler-plugin</artifactId>\n                             <configuration>\n                                 <compilerArguments>\n@@ -64,6 +65,7 @@\n     <build>\n         <plugins>\n             <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n                 <artifactId>maven-compiler-plugin</artifactId>\n                 <configuration>\n                     <source>1.4</source>"},{"sha":"6ed2200285e4b31b863fd1f8a228d049262f8622","filename":"pom.xml","status":"modified","additions":126,"deletions":8,"changes":134,"blob_url":"https://github.com/apache/openjpa/blob/cd4c8839f87f750e2655a5b98f552e2ba4031a67/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/cd4c8839f87f750e2655a5b98f552e2ba4031a67/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/pom.xml?ref=cd4c8839f87f750e2655a5b98f552e2ba4031a67","patch":"@@ -34,13 +34,14 @@\n     <properties>\n         <scm.dir>svn.apache.org/repos/asf/openjpa/branches/1.0.x</scm.dir>\n         <openjpa.version>${pom.version}</openjpa.version>\n+        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n     </properties>\n \n     <!--\n         Changing this version needs to also be done in all children poms\n         See: http://jira.codehaus.org/browse/MNG-624\n     -->\n-    <version>1.0.3</version>\n+    <version>1.0.4</version>\n     <url>http://openjpa.apache.org</url>\n     <issueManagement>\n         <system>jira</system>\n@@ -117,7 +118,7 @@\n         <profile>\n             <id>jdk1.5</id>\n             <activation>\n-                <jdk>1.5</jdk>\n+                <jdk>[1.5,)</jdk>\n             </activation>\n             <modules>\n                 <module>openjpa-lib-5</module>\n@@ -140,10 +141,40 @@\n             </modules>\n             <build>\n                 <plugins>\n+                <plugin>\n+                    <!--\n+                        javadoc plugin doesn't copy resources like the normal jar plugin.\n+                        Unzip license,etc from normal jar and add to javadoc jar.\n+                     -->\n+                        <groupId>org.apache.maven.plugins</groupId>\n+                        <artifactId>maven-antrun-plugin</artifactId>\n+                        <executions>\n+                            <execution>\n+                                <id>javadoc.resources</id>\n+                                <phase>package</phase>\n+                                <goals>\n+                                    <goal>run</goal>\n+                                </goals>\n+                                <configuration>\n+                                    <tasks>\n+                                        <!-- create output dir for nested parent poms -->\n+                                        <mkdir dir=\"${project.build.directory}\" />\n+                                        <unzip dest=\"${project.build.directory}/apidocs\">\n+                                            <patternset>\n+                                                <include name=\"META-INF/*.txt\" />\n+                                            </patternset>\n+                                            <fileset dir=\"${project.build.directory}\">\n+                                                <include name=\"${artifactId}-${pom.version}.jar\" />\n+                                            </fileset>\n+                                        </unzip>\n+                                    </tasks>\n+                                </configuration>\n+                            </execution>\n+                        </executions>\n+                    </plugin>\n                     <plugin>\n                         <groupId>org.codehaus.mojo</groupId>\n                         <artifactId>rat-maven-plugin</artifactId>\n-                        <version>1.0-alpha-3</version>\n                         <executions>\n                             <execution>\n                                 <phase>process-sources</phase>\n@@ -177,6 +208,8 @@\n                             <exclude>**/org.apache.openjpa.revision.properties</exclude>\n                             <exclude>**/target/**/*</exclude>\n                             <exclude>release.properties</exclude>\n+                            <exclude>**/.*/**</exclude>\n+                            <exclude>**/pom.xml.tag</exclude>\n                         </excludes>\n                         </configuration>\n                     </plugin>\n@@ -194,7 +227,6 @@\n                     <plugin>\n                         <groupId>org.apache.maven.plugins</groupId>\n                         <artifactId>maven-javadoc-plugin</artifactId>\n-                        <version>2.4</version>\n                         <executions>\n                             <execution>\n                                 <id>attach-javadoc</id>\n@@ -225,7 +257,6 @@\n                     <plugin>\n                         <groupId>org.apache.maven.plugins</groupId>\n                         <artifactId>maven-gpg-plugin</artifactId>\n-                        <version>1.0-alpha-3</version>\n                         <executions>\n                             <execution>\n                                 <goals>\n@@ -237,7 +268,6 @@\n                     <plugin>\n                         <groupId>org.apache.maven.plugins</groupId>\n                         <artifactId>maven-release-plugin</artifactId>\n-                        <version>2.0-beta-7</version>\n                         <configuration>\n                             <useReleaseProfile>false</useReleaseProfile>\n                             <goals>deploy site site-deploy</goals>\n@@ -287,7 +317,6 @@\n                     <plugin>\n                         <groupId>org.apache.maven.plugins</groupId>\n                         <artifactId>maven-javadoc-plugin</artifactId>\n-                        <version>2.2</version>\n                         <executions>\n                             <execution>\n                                 <phase>process-classes</phase>\n@@ -334,7 +363,6 @@\n                     <plugin>\n                         <groupId>org.codehaus.mojo</groupId>\n                         <artifactId>rat-maven-plugin</artifactId>\n-                        <version>1.0-alpha-1</version>\n                         <executions>\n                             <execution>\n                                 <phase>verify</phase>\n@@ -391,6 +419,7 @@\n                 <plugin>\n                     <groupId>org.apache.maven.plugins</groupId>\n                     <artifactId>maven-compiler-plugin</artifactId>\n+                    <version>2.0.2</version>\n                     <configuration>\n                         <source>1.5</source>\n                         <target>1.5</target>\n@@ -423,6 +452,7 @@\n                 <plugin>\n                     <groupId>org.codehaus.mojo</groupId>\n                     <artifactId>rat-maven-plugin</artifactId>\n+                    <version>1.0-alpha-3</version>\n                     <configuration>\n                         <excludeSubProjects>false</excludeSubProjects>\n                         <numUnapprovedLicenses>0</numUnapprovedLicenses>\n@@ -449,15 +479,102 @@\n                             <exclude>**/*.txt</exclude>\n                             <exclude>**/org.apache.openjpa.revision.properties</exclude>\n                             <exclude>**/target/**/*</exclude>\n+                            <exclude>release.properties</exclude>\n+                            <exclude>**/.*/**</exclude>\n+                            <exclude>**/pom.xml.tag</exclude>\n                         </excludes>\n                     </configuration>\n                 </plugin>\n+                <plugin>\n+                    <groupId>org.apache.maven.plugins</groupId>\n+                    <artifactId>maven-resources-plugin</artifactId>\n+                    <version>2.3</version>\n+                </plugin>\n+                <plugin>\n+                    <groupId>org.apache.maven.plugins</groupId>\n+                    <artifactId>maven-site-plugin</artifactId>\n+                    <version>2.0-beta-7</version>\n+                </plugin>\n+                <plugin>\n+                    <groupId>org.apache.maven.plugins</groupId>\n+                    <artifactId>maven-assembly-plugin</artifactId>\n+                    <version>2.2-beta-3</version>\n+                </plugin>\n+                <plugin>\n+                    <groupId>org.apache.maven.plugins</groupId>\n+                    <artifactId>maven-antrun-plugin</artifactId>\n+                    <version>1.3</version>\n+                    <dependencies>\n+                        <dependency>\n+                            <groupId>org.apache.ant</groupId>\n+                            <artifactId>ant-jsch</artifactId>\n+                            <version>1.7.0</version>\n+                        </dependency>\n+                    </dependencies>\n+                </plugin>\n+                <plugin>\n+                    <groupId>org.apache.maven.plugins</groupId>\n+                    <artifactId>maven-gpg-plugin</artifactId>\n+                    <version>1.0-alpha-3</version>\n+                </plugin>\n+                <plugin>\n+                    <groupId>org.apache.maven.plugins</groupId>\n+                    <artifactId>maven-javadoc-plugin</artifactId>\n+                    <version>2.4</version>\n+                </plugin>\n+                <plugin>\n+                    <groupId>org.apache.maven.plugins</groupId>\n+                    <artifactId>maven-release-plugin</artifactId>\n+                    <version>2.0-beta-7</version>\n+                </plugin>\n+                <plugin>\n+                    <groupId>org.apache.maven.plugins</groupId>\n+                    <artifactId>maven-source-plugin</artifactId>\n+                    <version>2.0.4</version>\n+                </plugin>\n+                <plugin>\n+                    <groupId>org.apache.maven.plugins</groupId>\n+                    <artifactId>maven-project-info-reports-plugin</artifactId>\n+                    <version>2.1</version>\n+                </plugin>\n+                <plugin>\n+                    <groupId>org.codehaus.mojo</groupId>\n+                    <artifactId>taglist-maven-plugin</artifactId>\n+                    <version>2.3</version>\n+                </plugin>\n+                <plugin>\n+                    <groupId>org.codehaus.mojo</groupId>\n+                    <artifactId>ianal-maven-plugin</artifactId>\n+                    <version>1.0-alpha-1</version>\n+                </plugin>\n             </plugins>\n         </pluginManagement>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-compiler-plugin</artifactId>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.codehaus.mojo</groupId>\n+                <artifactId>ianal-maven-plugin</artifactId>\n+                <executions>\n+                    <execution>\n+                        <goals>\n+                            <goal>verify-legal-files</goal>\n+                        </goals>\n+                        <configuration>\n+                            <!-- Fail the build if any artifacts are missing legal files -->\n+                            <strict>true</strict>\n+                        </configuration>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+       </plugins>\n     </build>\n     <reporting>\n         <plugins>\n             <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n                 <artifactId>maven-project-info-reports-plugin</artifactId>\n                 <reportSets>\n                     <reportSet>\n@@ -476,6 +593,7 @@\n                 </reportSets>\n             </plugin>\n             <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n                 <artifactId>maven-surefire-plugin</artifactId>\n             </plugin>\n             <plugin>"}]}

