{"sha":"cdcfea47d4568f69783c6733b27dfbc33e3ba621","node_id":"MDY6Q29tbWl0MjA2MzY0OmNkY2ZlYTQ3ZDQ1NjhmNjk3ODNjNjczM2IyN2RmYmMzM2UzYmE2MjE=","commit":{"author":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-09-20T01:29:55Z"},"committer":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-09-20T01:29:55Z"},"message":"Review/cleanup of product derivation work.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@448025 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7d13b8c94b026ddcf7fb1dd19f0482ca07e915f1","url":"https://api.github.com/repos/apache/openjpa/git/trees/7d13b8c94b026ddcf7fb1dd19f0482ca07e915f1"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/cdcfea47d4568f69783c6733b27dfbc33e3ba621","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/cdcfea47d4568f69783c6733b27dfbc33e3ba621","html_url":"https://github.com/apache/openjpa/commit/cdcfea47d4568f69783c6733b27dfbc33e3ba621","comments_url":"https://api.github.com/repos/apache/openjpa/commits/cdcfea47d4568f69783c6733b27dfbc33e3ba621/comments","author":null,"committer":null,"parents":[{"sha":"2c31d9c6df811638f27bd7dac8608766a4a499e1","url":"https://api.github.com/repos/apache/openjpa/commits/2c31d9c6df811638f27bd7dac8608766a4a499e1","html_url":"https://github.com/apache/openjpa/commit/2c31d9c6df811638f27bd7dac8608766a4a499e1"}],"stats":{"total":1635,"additions":671,"deletions":964},"files":[{"sha":"bb0c46142e444a8c499f17a0c9ed530dd1fb5890","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCProductDerivation.java","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/cdcfea47d4568f69783c6733b27dfbc33e3ba621/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCProductDerivation.java","raw_url":"https://github.com/apache/openjpa/raw/cdcfea47d4568f69783c6733b27dfbc33e3ba621/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCProductDerivation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCProductDerivation.java?ref=cdcfea47d4568f69783c6733b27dfbc33e3ba621","patch":"@@ -45,8 +45,4 @@ public boolean beforeConfigurationConstruct(ConfigurationProvider cp) {\n         }\n         return false;\n     }\n-    \n-    public ConfigurationProvider newConfigurationProvider() {\n-        return null;\n-    }\n }"},{"sha":"f4c9a3a4df3dae4ec90f8dd95d73585cb658f892","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/AbstractUpdateManager.java","status":"modified","additions":5,"deletions":9,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/cdcfea47d4568f69783c6733b27dfbc33e3ba621/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/AbstractUpdateManager.java","raw_url":"https://github.com/apache/openjpa/raw/cdcfea47d4568f69783c6733b27dfbc33e3ba621/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/AbstractUpdateManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/AbstractUpdateManager.java?ref=cdcfea47d4568f69783c6733b27dfbc33e3ba621","patch":"@@ -68,10 +68,7 @@ public Collection flush(Collection states, JDBCStore store) {\n                 conn);\n             return flush(states, store, psMgr);\n         } finally {\n-            try {\n-                conn.close();\n-            } catch (SQLException se) {\n-            }\n+            try { conn.close(); } catch (SQLException se) {}\n         }\n     }\n \n@@ -141,7 +138,6 @@ private Collection populateRowManager(OpenJPAStateManager sm,\n         Collection customs) {\n         try {\n             BitSet dirty;\n-\n             if (sm.getPCState() == PCState.PNEW && !sm.isFlushed()) {\n                 insert(sm, (ClassMapping) sm.getMetaData(), rowMgr, store,\n                     customs);\n@@ -156,10 +152,10 @@ private Collection populateRowManager(OpenJPAStateManager sm,\n                 updateIndicators(sm, (ClassMapping) sm.getMetaData(), rowMgr,\n                     store, customs, true);\n             } else if (sm.isVersionCheckRequired()) {\n-                if (!((ClassMapping) sm.getMetaData()).getVersion()\n-                    .checkVersion(sm, store, false))\n-                    exceps = addException(exceps, new OptimisticException(sm\n-                        .getManagedInstance()));\n+                if (!((ClassMapping) sm.getMetaData()).getVersion().\n+                    checkVersion(sm, store, false))\n+                    exceps = addException(exceps, new OptimisticException(sm.\n+                        getManagedInstance()));\n             }\n         } catch (SQLException se) {\n             exceps = addException(exceps, SQLExceptions.getStore(se, dict));"},{"sha":"aed273dbff2a30a26893c9a596ee3e0c2e943407","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/ClassTableJDBCSeq.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/cdcfea47d4568f69783c6733b27dfbc33e3ba621/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/ClassTableJDBCSeq.java","raw_url":"https://github.com/apache/openjpa/raw/cdcfea47d4568f69783c6733b27dfbc33e3ba621/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/ClassTableJDBCSeq.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/ClassTableJDBCSeq.java?ref=cdcfea47d4568f69783c6733b27dfbc33e3ba621","patch":"@@ -29,7 +29,6 @@\n import org.apache.openjpa.jdbc.schema.Table;\n import org.apache.openjpa.jdbc.sql.DBDictionary;\n import org.apache.openjpa.lib.conf.Configurations;\n-import org.apache.openjpa.lib.conf.ProductDerivations;\n import org.apache.openjpa.lib.meta.ClassArgParser;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.lib.util.Options;"},{"sha":"a851c761abf4cb1f6310b95b52238b828907b498","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAProductDerivation.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/cdcfea47d4568f69783c6733b27dfbc33e3ba621/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAProductDerivation.java","raw_url":"https://github.com/apache/openjpa/raw/cdcfea47d4568f69783c6733b27dfbc33e3ba621/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAProductDerivation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAProductDerivation.java?ref=cdcfea47d4568f69783c6733b27dfbc33e3ba621","patch":"@@ -18,14 +18,14 @@\n import org.apache.openjpa.lib.conf.ProductDerivation;\r\n \r\n /**\r\n- * \r\n  * Adds datastore based extension to ProductDerivation.  \r\n  *\r\n  * @since 0.4.1\r\n  * @author Pinaki Poddar\r\n- *\r\n  */\r\n public interface OpenJPAProductDerivation extends ProductDerivation {\r\n+\r\n+    public static final int TYPE_SPEC = 0;\r\n     public static final int TYPE_STORE = 200;\r\n     public static final int TYPE_SPEC_STORE = 300;\r\n     public static final int TYPE_PRODUCT_STORE = 400;\r"},{"sha":"1bb48bcd94dbafdca53d0c4515f1608999c64aed","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PCState.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/cdcfea47d4568f69783c6733b27dfbc33e3ba621/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PCState.java","raw_url":"https://github.com/apache/openjpa/raw/cdcfea47d4568f69783c6733b27dfbc33e3ba621/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PCState.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PCState.java?ref=cdcfea47d4568f69783c6733b27dfbc33e3ba621","patch":"@@ -402,6 +402,14 @@ boolean isPendingTransactional() {\n         return false;\n     }\n \n+    /**\n+     * Whether this state requires a version check when being flushed, \n+     * assuming the system is configured for version checks.\n+     */\n+    boolean isVersionCheckRequired(StateManagerImpl context) {\n+        return false;\n+    }\n+\n     /**\n      * Throw an error with a localized message identified by the given key.\n      */"},{"sha":"8860a0cbd669957b381f652cff9be59ebabd7770","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PDeletedState.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/cdcfea47d4568f69783c6733b27dfbc33e3ba621/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PDeletedState.java","raw_url":"https://github.com/apache/openjpa/raw/cdcfea47d4568f69783c6733b27dfbc33e3ba621/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PDeletedState.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PDeletedState.java?ref=cdcfea47d4568f69783c6733b27dfbc33e3ba621","patch":"@@ -69,6 +69,10 @@ PCState beforeOptimisticWrite(StateManagerImpl context, int field,\n         return error(\"deleted\", context);\n     }\n \n+    boolean isVersionCheckRequired(StateManagerImpl context) {\n+        return true;\n+    }\n+\n     boolean isTransactional() {\n         return true;\n     }"},{"sha":"c9657517a442cd6ac354e5a2f196bd3af0053738","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PDirtyState.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/cdcfea47d4568f69783c6733b27dfbc33e3ba621/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PDirtyState.java","raw_url":"https://github.com/apache/openjpa/raw/cdcfea47d4568f69783c6733b27dfbc33e3ba621/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PDirtyState.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PDirtyState.java?ref=cdcfea47d4568f69783c6733b27dfbc33e3ba621","patch":"@@ -64,6 +64,10 @@ PCState release(StateManagerImpl context) {\n         return error(\"dirty\", context);\n     }\n \n+    boolean isVersionCheckRequired(StateManagerImpl context) {\n+        return !context.isFlushed() || context.isFlushedDirty(); \n+    }\n+\n     PCState afterRefresh() {\n         return PCLEAN;\n     }"},{"sha":"048f49c0d7bce32ceb96dd50ae0caccc8664d0b7","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PNewState.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/cdcfea47d4568f69783c6733b27dfbc33e3ba621/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PNewState.java","raw_url":"https://github.com/apache/openjpa/raw/cdcfea47d4568f69783c6733b27dfbc33e3ba621/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PNewState.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PNewState.java?ref=cdcfea47d4568f69783c6733b27dfbc33e3ba621","patch":"@@ -68,6 +68,10 @@ PCState release(StateManagerImpl context) {\n         return error(\"new\", context);\n     }\n \n+    boolean isVersionCheckRequired(StateManagerImpl context) {\n+        return context.isFlushedDirty(); \n+    }\n+\n     boolean isTransactional() {\n         return true;\n     }"},{"sha":"8336ad73a14258d81042c61c0e46feeaa8fe6764","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","status":"modified","additions":5,"deletions":14,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/cdcfea47d4568f69783c6733b27dfbc33e3ba621/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/cdcfea47d4568f69783c6733b27dfbc33e3ba621/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java?ref=cdcfea47d4568f69783c6733b27dfbc33e3ba621","patch":"@@ -2927,23 +2927,14 @@ private boolean syncVersion(Object sdata) {\n      * Returns whether this instance needs a version check.\n      */\n     public boolean isVersionCheckRequired() {\n-\n         // explicit flag for version check\n-        if ((_flags & FLAG_VERSION_CHECK) > 0)\n+        if ((_flags & FLAG_VERSION_CHECK) != 0)\n             return true;\n \n-        // need to check version if we have any dirty fields, unless we\n-        // are in a datastore transaction\n-        if (ImplHelper.getUpdateFields(this) != null) {\n-            if (_broker.getOptimistic()) {\n-                return true;\n-            } else {\n-                return _broker.getConfiguration().\n-                    getCompatibilityInstance().getNonOptimisticVersionCheck();\n-            }\n-        }\n-\n-        return false;\n+        if (!_broker.getOptimistic() && !_broker.getConfiguration().\n+            getCompatibilityInstance().getNonOptimisticVersionCheck())\n+            return false;\n+        return _state.isVersionCheckRequired(this);\n     }\n \n     /**"},{"sha":"a032732210e48ca240d6163708ade987a7d61c7f","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","status":"modified","additions":6,"deletions":8,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/cdcfea47d4568f69783c6733b27dfbc33e3ba621/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/cdcfea47d4568f69783c6733b27dfbc33e3ba621/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java?ref=cdcfea47d4568f69783c6733b27dfbc33e3ba621","patch":"@@ -143,7 +143,7 @@\n     private Boolean _interface = null;\n     private Class _impl = null;\n     private List _interfaces = null;\n-    private Map _ifaceMap = new HashMap();\n+    private final Map _ifaceMap = new HashMap();\n     private int _identity = ID_UNKNOWN;\n     private int _idStrategy = ValueStrategies.NONE;\n     private int _accessType = ACCESS_UNKNOWN;\n@@ -703,8 +703,7 @@ public void setInterfaceImpl(Class impl) {\n      */\n     public Class[] getDeclaredInterfaces() {\n         if (_interfaces == null)\n-            return _repos.EMPTY_CLASSES;\n-\n+            return MetaDataRepository.EMPTY_CLASSES;\n         return (Class[]) _interfaces.toArray(new Class[_interfaces.size()]);\n     }\n \n@@ -713,11 +712,11 @@ public void setInterfaceImpl(Class impl) {\n      * class implements.\n      */\n     public void addDeclaredInterface(Class iface) {\n-        if (_interfaces == null)\n-            _interfaces = new ArrayList();\n-        if (!iface.isInterface())\n+        if (iface == null || !iface.isInterface())\n             throw new MetaDataException(_loc.get(\"declare-non-interface\",\n                 this, iface));\n+        if (_interfaces == null)\n+            _interfaces = new ArrayList();\n         _interfaces.add(iface);\n     }\n \n@@ -1657,9 +1656,8 @@ protected void resolveMeta(boolean runtime) {\n \n         // record implements in the repository\n         if (_interfaces != null) {\n-            for (Iterator it = _interfaces.iterator(); it.hasNext();) {\n+            for (Iterator it = _interfaces.iterator(); it.hasNext();)\n                 _repos.addDeclaredInterfaceImpl(this, (Class) it.next());\n-            }\n         }\n \n         // resolve fetch groups"},{"sha":"ab755d4b027fc51d5dbc15b1976c79cca946df0f","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","status":"modified","additions":5,"deletions":10,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/cdcfea47d4568f69783c6733b27dfbc33e3ba621/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","raw_url":"https://github.com/apache/openjpa/raw/cdcfea47d4568f69783c6733b27dfbc33e3ba621/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java?ref=cdcfea47d4568f69783c6733b27dfbc33e3ba621","patch":"@@ -867,21 +867,16 @@ public synchronized boolean removeMetaData(Class cls) {\n      */\n     void addDeclaredInterfaceImpl(ClassMetaData meta, Class iface) {\n         synchronized (_impls) {\n-            boolean supDec = false;\n             Collection vals = (Collection) _impls.get(iface);\n             \n             // check to see if the superclass already declares to avoid dups\n             if (vals != null) {\n                 ClassMetaData sup = meta.getPCSuperclassMetaData();\n-                while (vals != null && sup != null && !supDec) {\n-                    supDec = vals.contains(sup.getDescribedType());\n-                    sup = sup.getPCSuperclassMetaData();\n-                }\n-                if (supDec)\n-                    return;\n+                for (; sup != null; sup = sup.getPCSuperclassMetaData())\n+                    if (vals.contains(sup.getDescribedType()))\n+                        return;\n             }\n-\n-            addToCollection(_impls, iface, meta.getDescribedType(), true);\n+            addToCollection(_impls, iface, meta.getDescribedType(), false);\n         }\n     }\n \n@@ -1399,7 +1394,7 @@ private void updateImpls(Class cls, Class leastDerived, Class check) {\n         }\n \n         // allow users to query on any implemented interfaces unless defaults \n-        // say the user must create persistent interfaces explicitly\n+        // say the user must implement persistent interfaces explicitly in meta\n         if (!_factory.getDefaults().isDeclaredInterfacePersistent())\n             return;\n         Class[] ints = check.getInterfaces();"},{"sha":"8830f8d83b9b6819ffc84021547d62a1fc4f5351","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ImplHelper.java","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/cdcfea47d4568f69783c6733b27dfbc33e3ba621/openjpa-kernel/src/main/java/org/apache/openjpa/util/ImplHelper.java","raw_url":"https://github.com/apache/openjpa/raw/cdcfea47d4568f69783c6733b27dfbc33e3ba621/openjpa-kernel/src/main/java/org/apache/openjpa/util/ImplHelper.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ImplHelper.java?ref=cdcfea47d4568f69783c6733b27dfbc33e3ba621","patch":"@@ -174,7 +174,6 @@ private static Object generateValue(StoreContext ctx,\n      * @return the BitSet of fields that need update, or null if none\n      */\n     public static BitSet getUpdateFields(OpenJPAStateManager sm) {\n-\n         if ((sm.getPCState() == PCState.PDIRTY\n             && (!sm.isFlushed() || sm.isFlushedDirty()))\n             || (sm.getPCState() == PCState.PNEW && sm.isFlushedDirty())) {\n@@ -183,11 +182,9 @@ public static BitSet getUpdateFields(OpenJPAStateManager sm) {\n                 dirty = (BitSet) dirty.clone();\n                 dirty.andNot(sm.getFlushed());\n             }\n-\n             if (dirty.length() > 0)\n                 return dirty;\n         }\n-\n         return null;\n     }\n "},{"sha":"472f532d5779c3f1a257109314be1b2c1a8bf9d4","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/AbstractProductDerivation.java","status":"modified","additions":6,"deletions":34,"changes":40,"blob_url":"https://github.com/apache/openjpa/blob/cdcfea47d4568f69783c6733b27dfbc33e3ba621/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/AbstractProductDerivation.java","raw_url":"https://github.com/apache/openjpa/raw/cdcfea47d4568f69783c6733b27dfbc33e3ba621/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/AbstractProductDerivation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/AbstractProductDerivation.java?ref=cdcfea47d4568f69783c6733b27dfbc33e3ba621","patch":"@@ -19,58 +19,32 @@\n import java.util.Map;\r\n \r\n /**\r\n- * Abstract implementation of ProductDerivation loads configuration data using\r\n- * ConfigurationProvider supplied by concrete implementation via \r\n- * {@link #newConfigurationProvider()} method.<p>\r\n- * This abstract implementation does <em>not</em> provide a concrete \r\n- * ConfigurationProvider and hence all its loadXXX() methods would return null\r\n- * by default. When the concrete subclass supplies a ConfigurationProvider,\r\n- * this abstratct implementation will use it to load the configuration data. \r\n+ * Abstract no-op product derivation for easy extension.\r\n  *\r\n  * @author Pinaki Poddar\r\n  * @since 0.4.1\r\n  */\r\n-\r\n public abstract class AbstractProductDerivation\r\n     implements ProductDerivation {\r\n \r\n     public ConfigurationProvider loadGlobals(ClassLoader loader)\r\n-            throws Exception {\r\n-        ConfigurationProvider provider = newConfigurationProvider();\r\n-        if (provider != null && provider.loadGlobals(loader))\r\n-            return provider;\r\n+        throws Exception {\r\n         return null;\r\n     }\r\n \r\n     public ConfigurationProvider loadDefaults(ClassLoader loader)\r\n-            throws Exception {\r\n-        ConfigurationProvider provider = newConfigurationProvider();\r\n-        if (provider != null && provider.loadDefaults(loader))\r\n-            return provider;\r\n+        throws Exception {\r\n         return null;\r\n     }\r\n \r\n     public ConfigurationProvider load(String resource, String anchor,\r\n-            ClassLoader loader)  throws Exception {\r\n-        ConfigurationProvider provider = newConfigurationProvider();\r\n-        if (provider != null && provider.load(resource, anchor, loader))\r\n-            return provider;\r\n-        return null;\r\n-    }\r\n-    \r\n-    public ConfigurationProvider load(String resource, String anchor,\r\n-            Map map) throws Exception {\r\n-        ConfigurationProvider provider = newConfigurationProvider();\r\n-        if (provider != null && provider.load(resource, anchor, map))\r\n-            return provider;\r\n+        ClassLoader loader) \r\n+        throws Exception {\r\n         return null;\r\n     }\r\n \r\n     public ConfigurationProvider load(File file, String anchor)\r\n-            throws Exception {\r\n-        ConfigurationProvider provider = newConfigurationProvider();\r\n-        if (provider != null && provider.load(file, anchor))\r\n-            return provider;\r\n+        throws Exception {\r\n         return null;\r\n     }\r\n \r\n@@ -85,6 +59,4 @@ public boolean beforeConfigurationLoad(Configuration conf) {\n     public boolean afterSpecificationSet(Configuration conf) {\r\n         return false;\r\n     }\r\n-    \r\n-    public abstract ConfigurationProvider newConfigurationProvider();\r\n }\r"},{"sha":"7851a550418ab40e804856b7262ba6fca71e0922","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/cdcfea47d4568f69783c6733b27dfbc33e3ba621/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/cdcfea47d4568f69783c6733b27dfbc33e3ba621/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java?ref=cdcfea47d4568f69783c6733b27dfbc33e3ba621","patch":"@@ -42,7 +42,6 @@\n import java.util.Collections;\n import java.util.HashMap;\n import java.util.Iterator;\n-import java.util.LinkedList;\n import java.util.List;\n import java.util.Map;\n import java.util.MissingResourceException;\n@@ -372,9 +371,9 @@ public Image getIcon(int kind) {\n     public synchronized MethodDescriptor[] getMethodDescriptors() {\n         if (_mds != null)\n             return _mds;\n-        PropertyDescriptor[] pds = getPropertyDescriptors();\n \n-        List descs = new LinkedList(); \n+        PropertyDescriptor[] pds = getPropertyDescriptors();\n+        List descs = new ArrayList(); \n         for (int i = 0; i < pds.length; i++) {\n             Method write = pds[i].getWriteMethod();\n             Method read = pds[i].getReadMethod();\n@@ -383,7 +382,6 @@ public Image getIcon(int kind) {\n                 descs.add(new MethodDescriptor(read));\n             }\n         }\n-\n         _mds = (MethodDescriptor[])descs.\n             toArray(new MethodDescriptor[descs.size()]);\n         return _mds;"},{"sha":"6c437a5f88a845d1358033d2406621d46ef7d171","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationProvider.java","status":"modified","additions":0,"deletions":45,"changes":45,"blob_url":"https://github.com/apache/openjpa/blob/cdcfea47d4568f69783c6733b27dfbc33e3ba621/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationProvider.java","raw_url":"https://github.com/apache/openjpa/raw/cdcfea47d4568f69783c6733b27dfbc33e3ba621/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationProvider.java?ref=cdcfea47d4568f69783c6733b27dfbc33e3ba621","patch":"@@ -15,7 +15,6 @@\n  */\n package org.apache.openjpa.lib.conf;\n \n-import java.io.File;\n import java.util.Map;\n \n /**\n@@ -50,48 +49,4 @@\n      * Set loaded information into the given configuration.\n      */\n     public void setInto(Configuration conf);\n-    \n-    /**\n-     * Loads the global resource. The meaning of <em>global</em> is specific\n-     * to concrte implementaion. \n-     * @param loader used to locate the resource. If null uses the current\n-     * thread's loader.\n-     * @return true if located and loaded global configuration \n-     */\n-    public boolean loadGlobals(ClassLoader loader) throws Exception;\n-\n-    /**\n-     * Loads the default resource. The meaning of <em>default</em> is specific\n-     * to concrte implementaion. \n-     * @param loader used to locate the resource. If null uses the current\n-     * thread's loader.\n-     * @return true if located and loaded default configuration \n-     */\n-    public boolean loadDefaults(ClassLoader loader) throws Exception;\n-    \n-    /**\n-     * Loads the given resource. \n-     * @param resource name of the resource\n-     * @param anchor optional named anchor within a resource containing multiple\n-     * configuration\n-     * @param loader used to locate the resource. If null uses the current\n-     * thread's loader.\n-     * @return true if located and loaded configuration \n-     */\n-    public boolean load(String resource, String anchor, ClassLoader loader) \n-        throws Exception;\n-    \n-    public boolean load(String resource, String anchor, Map map) \n-        throws Exception;\n-\n-    /**\n-     * Loads the given resource. \n-     * @param file name of the file to load from\n-     * @param anchor optional named anchor within a file containing multiple\n-     * configuration\n-     * @return true if located and loaded configuration \n-     */\n-    public boolean load(File file, String anchor) throws Exception;\n-\n-\n }"},{"sha":"7a3304569b00f7e8bbce9396ed5da5e282c8a8b9","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java","status":"modified","additions":7,"deletions":2,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/cdcfea47d4568f69783c6733b27dfbc33e3ba621/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java","raw_url":"https://github.com/apache/openjpa/raw/cdcfea47d4568f69783c6733b27dfbc33e3ba621/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java?ref=cdcfea47d4568f69783c6733b27dfbc33e3ba621","patch":"@@ -195,9 +195,14 @@ public static void populateConfiguration(Configuration conf, Options opts) {\n                 if (file.isFile())\n                     provider = ProductDerivations.load(file, anchor, null);\n                 else\n-                    provider = ProductDerivations.load(path, anchor, (Map)null);\n+                    provider = ProductDerivations.load(path, anchor, null);\n             }\n-            provider.setInto(conf);\n+            if (provider != null)\n+                provider.setInto(conf);\n+            else\n+                throw new MissingResourceException(_loc.get(\"no-provider\",\n+                    props).getMessage(), Configurations.class.getName(), \n+                    props);\n         } else {\n             provider = ProductDerivations.loadDefaults(null);\n             if (provider != null)"},{"sha":"06d5a6623520fbd4d5f8bd8ea938ccf7e6451830","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/MapConfigurationProvider.java","status":"modified","additions":0,"deletions":30,"changes":30,"blob_url":"https://github.com/apache/openjpa/blob/cdcfea47d4568f69783c6733b27dfbc33e3ba621/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/MapConfigurationProvider.java","raw_url":"https://github.com/apache/openjpa/raw/cdcfea47d4568f69783c6733b27dfbc33e3ba621/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/MapConfigurationProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/MapConfigurationProvider.java?ref=cdcfea47d4568f69783c6733b27dfbc33e3ba621","patch":"@@ -15,7 +15,6 @@\n  */\n package org.apache.openjpa.lib.conf;\n \n-import java.io.File;\n import java.util.Collections;\n import java.util.HashMap;\n import java.util.Map;\n@@ -47,37 +46,9 @@ public MapConfigurationProvider() {\n      * Constructor; supply properties map.\n      */\n     public MapConfigurationProvider(Map props) {\n-        this();\n         addProperties(props);\n     }\n \n-    public boolean loadGlobals(ClassLoader loader) throws Exception {\n-        return false;\n-    }\n-\n-    public boolean loadDefaults(ClassLoader loader) throws Exception {\n-        return false;\n-    }\n-\n-    public boolean load(String resource, String anchor, ClassLoader loader) \n-        throws Exception {\n-        return false;\n-    }\n-\n-    public boolean load(File file, String anchor) throws Exception {\n-        return false;\n-    }\n-\n-    /**\n-     * Loads only if the given map is non-null.\n-     * Always returns false.\n-     */\n-    public boolean load(String rsrc, String anchor, Map m) throws Exception {\n-        if (m != null)\n-            addProperties(m);\n-        return false;\n-    }\n-\n     public Map getProperties() {\n         return (_props == null) ? Collections.EMPTY_MAP : _props;\n     }\n@@ -107,7 +78,6 @@ public void setInto(Configuration conf) {\n     protected void setInto(Configuration conf, Log log) {\n         if (log != null && log.isTraceEnabled())\n             log.trace(_loc.get(\"conf-load\", getProperties()));\n-        \n         if (_props != null)\n             conf.fromProperties(_props);\n     }"},{"sha":"283923a3170d5a3e47c9e9b27719651156cd8100","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ProductDerivation.java","status":"modified","additions":14,"deletions":25,"changes":39,"blob_url":"https://github.com/apache/openjpa/blob/cdcfea47d4568f69783c6733b27dfbc33e3ba621/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ProductDerivation.java","raw_url":"https://github.com/apache/openjpa/raw/cdcfea47d4568f69783c6733b27dfbc33e3ba621/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ProductDerivation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ProductDerivation.java?ref=cdcfea47d4568f69783c6733b27dfbc33e3ba621","patch":"@@ -20,22 +20,18 @@\n \n /**\n  * Hooks for deriving products with additional functionality.\n- * The specific implementation uses corresponding {@link ConfigurationProvider}\n- * to locate and parse configuration information from global, default or\n- * explictly-specified resources.\n- * All implementations of this interface will have a chance to mutate\n- * a {@link Configuration} both before and after the user-specified\n- * configuration data is loaded. \n- * The order in which the product derivations are evaluated is determined by the \n- * specificity of the derivation type.\n+ * Parses configuration information from global, default or explictly-specified\n+ * resources. All implementations of this interface will have a chance to mutate\n+ * a {@link Configuration} both before and after the user-specified \n+ * configuration data is loaded. The order in which the product derivations are\n+ * evaluated is determined by the specificity of the derivation type.\n  *\n  * @author Abe White\n  * @author Pinaki Poddar\n  * @since 0.4.1\n  */\n public interface ProductDerivation {\n \n-    public static final int TYPE_SPEC = 0;\n     public static final int TYPE_PRODUCT = 100;\n     public static final int TYPE_FEATURE = 1000;\n \n@@ -45,29 +41,30 @@\n     public int getType();\n \n     /**\n-     * Load globals via the returned ConfigurationProvider, or return null if \n+     * Load globals into the returned ConfigurationProvider, or return null if \n      * no globals is found.\n      */\n     public ConfigurationProvider loadGlobals(ClassLoader loader) \n         throws Exception;\n \n     /**\n-     * Load defaults via the returned ConfigurationProvider, or return null if \n+     * Load defaults into the returned ConfigurationProvider, or return null if \n      * no defaults is found.\n      */\n     public ConfigurationProvider loadDefaults(ClassLoader loader) \n         throws Exception;\n \n     /**\n-     * Load the given given resource via the returned ConfigurationProvider, or \n-     * return null if it is not a resource this receiver understands. \n+     * Load the given given resource into the returned ConfigurationProvider, \n+     * or return null if it is not a resource this receiver understands. \n      * The given class loader may be null.\n      *\n      * @param anchor optional named anchor within a multiple-configuration\n      * resource\n      */\n     public ConfigurationProvider load(String resource, String anchor, \n-        ClassLoader loader) throws Exception;\n+        ClassLoader loader) \n+        throws Exception;\n \n     /**\n      * Load given file, or return null if it is not a file this receiver\n@@ -78,35 +75,27 @@ public ConfigurationProvider load(String resource, String anchor,\n     public ConfigurationProvider load(File file, String anchor) \n         throws Exception;\n     \n-    /**\n-     * Load given resource overriding with the given map <code>m</code>, or \n-     * return null if it is not a resource this receiver* understands.\n-     *\n-     * @param anchor optional named anchor within a multiple-configuration file\n-     * @param m optional properties to override the content of the resource.\n-     */\n-    public ConfigurationProvider load(String rsrc, String anchor, Map m) \n-        throws Exception;\n-\n-    \n     /**\n      * Provides the instance with a callback to mutate the initial properties\n      * of the {@link ConfigurationProvider}. This is primarily to alter or\n      * add properties that determine what type of configuration is constructed,\n      * and therefore is typically used at runtime only.\n+     * \n      * @return true if given ConfigurationProvider has been mutated.\n      */\n     public boolean beforeConfigurationConstruct(ConfigurationProvider cp);\n \n     /**\n      * Provides the instance with the opportunity to mutate\n      * <code>conf</code> before the user configuration is applied.\n+     *\n      * @return true if given Configuration has been mutated.\n      */\n     public boolean beforeConfigurationLoad(Configuration conf);\n \n     /**\n      * Called after the specification has been set.\n+     *\n      * @return true if given Configuration has been mutated.\n      */\n     public boolean afterSpecificationSet(Configuration conf);"},{"sha":"66a1ad9a1476c1555cfdc6ab93e1aa3408a47f38","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ProductDerivations.java","status":"modified","additions":45,"deletions":66,"changes":111,"blob_url":"https://github.com/apache/openjpa/blob/cdcfea47d4568f69783c6733b27dfbc33e3ba621/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ProductDerivations.java","raw_url":"https://github.com/apache/openjpa/raw/cdcfea47d4568f69783c6733b27dfbc33e3ba621/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ProductDerivations.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ProductDerivations.java?ref=cdcfea47d4568f69783c6733b27dfbc33e3ba621","patch":"@@ -20,12 +20,9 @@\n import java.util.Collections;\n import java.util.Comparator;\n import java.util.List;\n-import java.util.Map;\n import java.util.MissingResourceException;\n \n-import org.apache.openjpa.lib.util.JavaVersions;\n import org.apache.openjpa.lib.util.Localizer;\n-import org.apache.openjpa.lib.util.Options;\n import org.apache.openjpa.lib.util.Services;\n \n /**\n@@ -37,10 +34,9 @@\n public class ProductDerivations {\n \n     private static final ProductDerivation[] _derivations;\n-\n     static {\n         Class[] pdcls = Services.getImplementorClasses(ProductDerivation.class,\n-          ProductDerivation.class.getClassLoader());\n+            ProductDerivation.class.getClassLoader());\n         List derivations = new ArrayList(pdcls.length);\n         for (int i = 0; i < pdcls.length; i++) {\n             try {\n@@ -72,7 +68,7 @@\n     public static void beforeConfigurationConstruct(ConfigurationProvider cp) {\n         for (int i = 0; i < _derivations.length; i++) {\n             try {\n-                boolean ret = _derivations[i].beforeConfigurationConstruct(cp);\n+                _derivations[i].beforeConfigurationConstruct(cp);\n             } catch (Exception e) {\n                 // can't log; no configuration yet\n                 e.printStackTrace();\n@@ -87,7 +83,7 @@ public static void beforeConfigurationConstruct(ConfigurationProvider cp) {\n     public static void beforeConfigurationLoad(Configuration conf) {\n         for (int i = 0; i < _derivations.length; i++) {\n             try {\n-                boolean ret = _derivations[i].beforeConfigurationLoad(conf);\n+                _derivations[i].beforeConfigurationLoad(conf);\n             } catch (Exception e) {\n                 // logging not configured yet\n                 e.printStackTrace();\n@@ -102,7 +98,7 @@ public static void beforeConfigurationLoad(Configuration conf) {\n     public static void afterSpecificationSet(Configuration conf) {\n         for (int i = 0; i < _derivations.length; i++) {\n             try {\n-                boolean ret = _derivations[i].afterSpecificationSet(conf);\n+                _derivations[i].afterSpecificationSet(conf);\n             } catch (Exception e) {\n                 // logging not configured yet\n                 e.printStackTrace();\n@@ -125,19 +121,18 @@ public static ConfigurationProvider load(String resource, String anchor,\n             loader = Thread.currentThread().getContextClassLoader();\n         ConfigurationProvider provider = null;\n         StringBuffer errs = null;\n-        for (int i = 0; i < _derivations.length; i++) {\n+        // most specific to least\n+        for (int i = _derivations.length - 1; i >= 0; i--) {\n             try {\n                 provider = _derivations[i].load(resource, anchor, loader);\n-                if (provider != null) {\n+                if (provider != null)\n                     return provider;\n-                }\n             } catch (Throwable t) {\n-                errs = (errs == null) ? new StringBuffer() \n-                        : errs.append(\"\\r\\n\");\n+                errs = (errs == null) ? new StringBuffer() : errs.append(\"\\n\");\n                 errs.append(_derivations[i].getClass().getName() + \":\" + t);\n             }\n         }\n-        reportError(errs, resource);\n+        reportErrors(errs, resource);\n         return null;\n     }\n \n@@ -155,88 +150,72 @@ public static ConfigurationProvider load(File file, String anchor,\n             loader = Thread.currentThread().getContextClassLoader();\n         ConfigurationProvider provider = null;\n         StringBuffer errs = null;\n-        for (int i = 0; i < _derivations.length; i++) {\n+        // most specific to least\n+        for (int i = _derivations.length - 1; i >= 0; i--) {\n             try {\n                 provider = _derivations[i].load(file, anchor);\n-                if (provider != null) {\n+                if (provider != null)\n                     return provider;\n-                }\n             } catch (Throwable t) {\n-                errs = (errs == null) ? new StringBuffer() \n-                        : errs.append(\"\\r\\n\");\n+                errs = (errs == null) ? new StringBuffer() : errs.append(\"\\n\");\n                 errs.append(_derivations[i].getClass().getName() + \":\" + t);\n             }\n         }\n-        reportError(errs, file.getAbsolutePath());\n+        reportErrors(errs, file.getAbsolutePath());\n         return null;\n     }\n-    \n-    public static ConfigurationProvider load(String rsrc, String anchor, \n-        Map m) {\n-        ConfigurationProvider provider = null;\n-        StringBuffer errs = null;\n-        for (int i = 0; i < _derivations.length; i++) {\n-            try {\n-                provider = _derivations[i].load(rsrc, anchor, m);\n-                if (provider != null) {\n-                    return provider;\n-                }\n-            } catch (Throwable t) {\n-                errs = (errs == null) ? new StringBuffer() \n-                        : errs.append(\"\\r\\n\");\n-                errs.append(_derivations[i].getClass().getName() + \":\" + t);\n-            }\n-        }\n-        reportError(errs, rsrc);\n-        return null;\n+   \n+    /**\n+     * Return a {@link ConfigurationProvider} that has parsed system defaults.\n+     */\n+    public static ConfigurationProvider loadDefaults(ClassLoader loader) {\n+        return load(loader, false);\n     }\n-        \n-    public static ConfigurationProvider load(ClassLoader loader, \n+\n+    /**\n+     * Return a {@link ConfigurationProvider} that has parsed system globals.\n+     */\n+    public static ConfigurationProvider loadGlobals(ClassLoader loader) {\n+        return load(loader, true);\n+    }\n+            \n+    /**\n+     * Load a built-in resource location.\n+     */\n+    private static ConfigurationProvider load(ClassLoader loader, \n        boolean globals) {\n         if (loader == null)\n             loader = Thread.currentThread().getContextClassLoader();\n         \n         ConfigurationProvider provider = null;\n         StringBuffer errs = null;\n         String type = (globals) ? \"globals\" : \"defaults\";\n-        for (int i = 0; i < _derivations.length; i++) {\n+        // most specific to least\n+        for (int i = _derivations.length - 1; i >= 0; i--) {\n             try {\n                 provider = (globals) ? _derivations[i].loadGlobals(loader) \n-                        : _derivations[i].loadDefaults(loader);\n-                if (provider != null) {\n+                    : _derivations[i].loadDefaults(loader);\n+                if (provider != null)\n                    return provider;\n-                }\n             } catch (Throwable t) {\n-                errs = (errs == null) ? new StringBuffer() \n-                        : errs.append(\"\\r\\n\");\n+                errs = (errs == null) ? new StringBuffer() : errs.append(\"\\n\");\n                 errs.append(_derivations[i].getClass().getName() + \":\" + t);\n             }\n         }\n-        reportError(errs, type);\n+        reportErrors(errs, type);\n         return null;\n     }\n-    \n-    private static void reportError(StringBuffer errs, String resource) {\n-        if (errs == null)\n-            return;\n-        throw new MissingResourceException(\n-                errs.toString(), ProductDerivations.class.getName(), resource);\n-    }\n-\n+ \n     /**\n-     * Return a {@link ConfigurationProvider} that has parsed system defaults.\n+     * Thrown proper exception for given errors.\n      */\n-    public static ConfigurationProvider loadDefaults(ClassLoader loader) {\n-        return load(loader, false);\n+    private static void reportErrors(StringBuffer errs, String resource) {\n+        if (errs == null)\n+            return;\n+        throw new MissingResourceException(errs.toString(), \n+            ProductDerivations.class.getName(), resource);\n     }\n \n-    /**\n-     * Return a {@link ConfigurationProvider} that has parsed system globals.\n-     */\n-    public static ConfigurationProvider loadGlobals(ClassLoader loader) {\n-        return load(loader, true);\n-    }\n-    \n     /**\n      * Compare {@link ProductDerivation}s.\n      */"},{"sha":"e0cb01f732b04b13e7eb4984ae005bdda3a1c2d0","filename":"openjpa-lib/src/main/resources/org/apache/openjpa/lib/conf/localizer.properties","status":"modified","additions":0,"deletions":6,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/cdcfea47d4568f69783c6733b27dfbc33e3ba621/openjpa-lib/src/main/resources/org/apache/openjpa/lib/conf/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/cdcfea47d4568f69783c6733b27dfbc33e3ba621/openjpa-lib/src/main/resources/org/apache/openjpa/lib/conf/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/resources/org/apache/openjpa/lib/conf/localizer.properties?ref=cdcfea47d4568f69783c6733b27dfbc33e3ba621","patch":"@@ -52,12 +52,6 @@ no-providers: Your system is missing configuration providers. \\\n     classpath listing the available provider classes, and some listed class \\\n     must be instantiable.  Typically this file is bundled as part of the \\\n     distribution.  Have you unbundled it, or unbundled its listed classes?\n-hook-before: An exception occurred while invoking beforeConfigurationLoad() \\\n-\ton \"{0}\". This exception will be consumed.\n-hook-after: An exception occurred while invoking afterConfigurationLoad() \\\n-\ton \"{0}\". This exception will be consumed.\n-closeable-ex: An exception occurred while invoking close() on \"{0}\". This \\\n-\texception will be consumed.\n dup-with-different-prefixes: Found multiple properties with different valid \\\n \tprefixes. Properties: {0}, {1}.\n plugin-creation-exception: An exception occurred while creating a plugin for \\"},{"sha":"8044a335401b6c01d1b17933f02e0de5daf704fd","filename":"openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/test/ConfigurationTestConfigurationProvider.java","status":"removed","additions":0,"deletions":93,"changes":93,"blob_url":"https://github.com/apache/openjpa/blob/2c31d9c6df811638f27bd7dac8608766a4a499e1/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/test/ConfigurationTestConfigurationProvider.java","raw_url":"https://github.com/apache/openjpa/raw/2c31d9c6df811638f27bd7dac8608766a4a499e1/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/test/ConfigurationTestConfigurationProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/test/ConfigurationTestConfigurationProvider.java?ref=2c31d9c6df811638f27bd7dac8608766a4a499e1","patch":"@@ -1,93 +0,0 @@\n-package org.apache.openjpa.lib.conf.test;\n-\n-import java.io.File;\n-import java.io.InputStream;\n-import java.io.IOException;\n-import java.net.URL;\n-import java.util.MissingResourceException;\n-import java.util.Properties;\n-\n-import org.apache.openjpa.lib.conf.MapConfigurationProvider;\n-\n-/**\n- * Configuration provider used in testing.\n- *\n- * @author Abe White\n- */\n-public class ConfigurationTestConfigurationProvider\n-    extends MapConfigurationProvider {\n-\n-    public ConfigurationTestConfigurationProvider() {\n-        super(null);\n-    }\n-\n-    public boolean loadGlobals(ClassLoader loader)\n-        throws IOException {\n-        return load(null, loader);\n-    }\n-\n-    public boolean loadDefaults(ClassLoader loader)\n-        throws IOException {\n-        return false;\n-    }\n-\n-    public boolean load(String rsrc, ClassLoader loader)\n-        throws IOException {\n-        if (rsrc == null)\n-            rsrc = System.getProperty(\"openjpatest.properties\");\n-        if (rsrc == null || !rsrc.endsWith(\".properties\"))\n-            return false;\n-\n-        URL url = findResource(rsrc, loader);\n-        if (url == null)\n-            throw new MissingResourceException(rsrc, getClass().getName(), \n-                rsrc);\n-\n-        InputStream in = url.openStream();\n-        Properties props = new Properties();\n-        if (in != null) {\n-            try {\n-                props.load(in);\n-                addProperties(props);\n-                return true;\n-            } finally {\n-                try {\n-                    in.close();\n-                } catch (Exception e) {\n-                }\n-            }\n-        }\n-        return false;\n-    }\n-\n-    /**\n-     * Locate the given resource.\n-     */\n-    private URL findResource(String rsrc, ClassLoader loader)\n-        throws IOException {\n-        if (loader != null)\n-            return loader.getResource(rsrc);\n-\n-        // in jbuilder the classloader can be null\n-        URL url = null;\n-        loader = getClass().getClassLoader();\n-        if (loader != null)\n-            url = loader.getResource(rsrc);\n-        if (url == null) {\n-            loader = Thread.currentThread().getContextClassLoader();\n-            if (loader != null)\n-                url = loader.getResource(rsrc);\n-        }\n-        if (url == null) {\n-            loader = ClassLoader.getSystemClassLoader();\n-            if (loader != null)\n-                url = loader.getResource(rsrc);\n-        }\n-        return url;\n-    }\n-\n-    public boolean load(File file)\n-        throws IOException {\n-        return false;\n-    }\n-}"},{"sha":"38494f00b4d7e63a85af9515abdc4b7718e9a6ae","filename":"openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/test/ConfigurationTestProductDerivation.java","status":"modified","additions":66,"deletions":8,"changes":74,"blob_url":"https://github.com/apache/openjpa/blob/cdcfea47d4568f69783c6733b27dfbc33e3ba621/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/test/ConfigurationTestProductDerivation.java","raw_url":"https://github.com/apache/openjpa/raw/cdcfea47d4568f69783c6733b27dfbc33e3ba621/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/test/ConfigurationTestProductDerivation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/test/ConfigurationTestProductDerivation.java?ref=cdcfea47d4568f69783c6733b27dfbc33e3ba621","patch":"@@ -15,28 +15,86 @@\n  */\r\n package org.apache.openjpa.lib.conf.test;\r\n \r\n+import java.io.File;\r\n+import java.io.InputStream;\r\n+import java.io.IOException;\r\n+import java.net.URL;\r\n+import java.util.MissingResourceException;\r\n+import java.util.Properties;\r\n+\r\n import org.apache.openjpa.lib.conf.AbstractProductDerivation;\r\n import org.apache.openjpa.lib.conf.ConfigurationProvider;\r\n+import org.apache.openjpa.lib.conf.MapConfigurationProvider;\r\n import org.apache.openjpa.lib.conf.ProductDerivation;\r\n \r\n /**\r\n  * A Product Derivation to test loading of global and default configuration with\r\n- * System settings. This provider uses \r\n- * {@link ConfigurationTestConfigurationProvider} which reads its global from\r\n- * a file specified by <code>\"openjpatest.properties\"</code> system property.\r\n+ * System settings.  Reads its global from a file specified by \r\n+ * <code>\"openjpatest.properties\"</code> system property.\r\n  *\r\n  * @author Pinaki Poddar\r\n+ * @author Abe White\r\n  */\r\n public class ConfigurationTestProductDerivation \r\n     extends AbstractProductDerivation {\r\n     \r\n     public int getType() {\r\n         return ProductDerivation.TYPE_PRODUCT;\r\n     }\r\n-    \r\n-    public ConfigurationProvider newConfigurationProvider() {\r\n-        return new ConfigurationTestConfigurationProvider();\r\n+\r\n+    public ConfigurationProvider loadGlobals(ClassLoader loader)\r\n+        throws IOException {\r\n+        return load(null, loader);\r\n     }\r\n-    \r\n-}\r\n \r\n+    public ConfigurationProvider load(String rsrc, ClassLoader loader)\r\n+        throws IOException {\r\n+        if (rsrc == null)\r\n+            rsrc = System.getProperty(\"openjpatest.properties\");\r\n+        if (rsrc == null || !rsrc.endsWith(\".properties\"))\r\n+            return null;\r\n+\r\n+        URL url = findResource(rsrc, loader);\r\n+        if (url == null)\r\n+            throw new MissingResourceException(rsrc, getClass().getName(), \r\n+                rsrc);\r\n+\r\n+        InputStream in = url.openStream();\r\n+        Properties props = new Properties();\r\n+        if (in != null) {\r\n+            try {\r\n+                props.load(in);\r\n+                return new MapConfigurationProvider(props);\r\n+            } finally {\r\n+                try { in.close(); } catch (Exception e) {}\r\n+            }\r\n+        }\r\n+        return null;\r\n+    }\r\n+\r\n+    /**\r\n+     * Locate the given resource.\r\n+     */\r\n+    private URL findResource(String rsrc, ClassLoader loader)\r\n+        throws IOException {\r\n+        if (loader != null)\r\n+            return loader.getResource(rsrc);\r\n+\r\n+        // in jbuilder the classloader can be null\r\n+        URL url = null;\r\n+        loader = getClass().getClassLoader();\r\n+        if (loader != null)\r\n+            url = loader.getResource(rsrc);\r\n+        if (url == null) {\r\n+            loader = Thread.currentThread().getContextClassLoader();\r\n+            if (loader != null)\r\n+                url = loader.getResource(rsrc);\r\n+        }\r\n+        if (url == null) {\r\n+            loader = ClassLoader.getSystemClassLoader();\r\n+            if (loader != null)\r\n+                url = loader.getResource(rsrc);\r\n+        }\r\n+        return url;\r\n+    }\r\n+}\r"},{"sha":"5c033527eb563ad9adbf800c22806e679585b733","filename":"openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/test/TestConfigurationImpl.java","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/cdcfea47d4568f69783c6733b27dfbc33e3ba621/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/test/TestConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/cdcfea47d4568f69783c6733b27dfbc33e3ba621/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/test/TestConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/test/TestConfigurationImpl.java?ref=cdcfea47d4568f69783c6733b27dfbc33e3ba621","patch":"@@ -27,9 +27,6 @@\n  * properties, which are required for the bean descriptors used by the\n  * configuration framework {@link Value}.\n  * \n- * This test has been modified to test the same functionality of \n- * ConfigurationProvider but now invoked via ProductDerivation.\n- * \n  * This test assumes a <code>\"test.properties\"</code> file available in\n  * classpath and also system property <code>\"openjpatest.properties\"</code>\n  * is set to <code>\"test.properties\"</code>."},{"sha":"a5a527e0d2f845b81a06347f1bb10213174f04cd","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCPersistenceProductDerivation.java","status":"modified","additions":11,"deletions":13,"changes":24,"blob_url":"https://github.com/apache/openjpa/blob/cdcfea47d4568f69783c6733b27dfbc33e3ba621/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCPersistenceProductDerivation.java","raw_url":"https://github.com/apache/openjpa/raw/cdcfea47d4568f69783c6733b27dfbc33e3ba621/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCPersistenceProductDerivation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCPersistenceProductDerivation.java?ref=cdcfea47d4568f69783c6733b27dfbc33e3ba621","patch":"@@ -21,7 +21,6 @@\n import org.apache.openjpa.jdbc.kernel.JDBCStoreManager;\n import org.apache.openjpa.lib.conf.AbstractProductDerivation;\n import org.apache.openjpa.lib.conf.Configuration;\n-import org.apache.openjpa.lib.conf.ConfigurationProvider;\n import org.apache.openjpa.persistence.FetchPlan;\n import org.apache.openjpa.persistence.PersistenceProductDerivation;\n \n@@ -31,18 +30,21 @@\n  * @author Abe White\n  * @nojavadoc\n  */\n-public class JDBCPersistenceProductDerivation extends AbstractProductDerivation \n+public class JDBCPersistenceProductDerivation \n+    extends AbstractProductDerivation \n     implements OpenJPAProductDerivation {\n     \n     public int getType() {\n         return TYPE_SPEC_STORE;\n     }\n \n+    @Override\n     public boolean beforeConfigurationLoad(Configuration c) {\n-        if (c instanceof OpenJPAConfiguration) \n-        ((OpenJPAConfiguration)c).getStoreFacadeTypeRegistry().\n-            registerImplementation(FetchPlan.class, JDBCStoreManager.class, \n-            JDBCFetchPlanImpl.class);\n+        if (c instanceof OpenJPAConfiguration) {\n+            ((OpenJPAConfiguration) c).getStoreFacadeTypeRegistry().\n+                registerImplementation(FetchPlan.class, JDBCStoreManager.class, \n+                JDBCFetchPlanImpl.class);\n+        }\n         if (!(c instanceof JDBCConfigurationImpl))\n             return false;\n \n@@ -67,21 +69,17 @@ public boolean beforeConfigurationLoad(Configuration c) {\n         return true;\n     }\n \n+    @Override\n     public boolean afterSpecificationSet(Configuration c) {\n-        String jpa = PersistenceProductDerivation.SPEC_JPA;\n         if (!(c instanceof JDBCConfigurationImpl))\n             return false;\n         JDBCConfigurationImpl conf = (JDBCConfigurationImpl) c;\n-        \n-         if (!jpa.equals(conf.getSpecification()))\n+        String jpa = PersistenceProductDerivation.SPEC_JPA;\n+        if (!jpa.equals(conf.getSpecification()))\n             return false;\n         \n         conf.mappingDefaultsPlugin.setDefault(jpa);\n         conf.mappingDefaultsPlugin.setString(jpa);\n         return true;\n     }\n-    \n-    public ConfigurationProvider newConfigurationProvider() {\n-        return null;\n-    }\n }"},{"sha":"81bc69e42f3c840d395868986066b836984c0594","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ConfigurationProviderImpl.java","status":"removed","additions":0,"deletions":417,"changes":417,"blob_url":"https://github.com/apache/openjpa/blob/2c31d9c6df811638f27bd7dac8608766a4a499e1/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ConfigurationProviderImpl.java","raw_url":"https://github.com/apache/openjpa/raw/2c31d9c6df811638f27bd7dac8608766a4a499e1/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ConfigurationProviderImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ConfigurationProviderImpl.java?ref=2c31d9c6df811638f27bd7dac8608766a4a499e1","patch":"@@ -1,417 +0,0 @@\n-/*\n- * Copyright 2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.openjpa.persistence;\n-\n-import java.io.File;\n-import java.io.IOException;\n-import java.net.URL;\n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.Enumeration;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.MissingResourceException;\n-import javax.persistence.spi.PersistenceUnitInfo;\n-import javax.persistence.spi.PersistenceUnitTransactionType;\n-\n-import org.apache.commons.lang.StringUtils;\n-import org.apache.openjpa.conf.OpenJPAConfiguration;\n-import org.apache.openjpa.lib.conf.Configuration;\n-import org.apache.openjpa.lib.conf.MapConfigurationProvider;\n-import org.apache.openjpa.lib.log.Log;\n-import org.apache.openjpa.lib.meta.XMLMetaDataParser;\n-import org.apache.openjpa.lib.util.Localizer;\n-import org.apache.openjpa.util.GeneralException;\n-import org.xml.sax.Attributes;\n-import org.xml.sax.SAXException;\n-\n-/**\n- * Configuration provider capable of loading a {@link Configuration} from\n- * the current environment's JPA-style XML configuration data.\n- * \n- * For globals, looks in <code>openjpa.properties</code> system property for\n- * the location of a file to parse. If no system property is defined, the\n- * default resource location of <code>META-INF/openjpa.xml</code> is used.\n- *\n- * For defaults, looks for <code>META-INF/persistence.xml</code>.\n- * Within <code>persistence.xml</code>, look for the named persistence unit, or\n- * if no name given, an OpenJPA unit (preferring an unnamed OpenJPA unit to \n- * a named one).\n- *\n- * @nojavadoc\n- * @since 0.4.0.0\n- */\n-public class ConfigurationProviderImpl\n-    extends MapConfigurationProvider {\n-\n-    private static final String RSRC_GLOBAL = \"META-INF/openjpa.xml\";\n-    private static final String RSRC_DEFAULT = \"META-INF/persistence.xml\";\n-\n-    private static final Localizer _loc = Localizer.forPackage\n-        (ConfigurationProviderImpl.class);\n-\n-    private ClassLoader _loader = null;\n-    private String _source = null;\n-\n-    public ConfigurationProviderImpl() {\n-        super(null);\n-    }\n-\n-    public ClassLoader getClassLoader() {\n-        return _loader;\n-    }\n-\n-    /**\n-     * Load configuration from the given persistence unit with the specified\n-     * user properties.\n-     */\n-    public boolean load(PersistenceUnitInfo pinfo)\n-        throws IOException {\n-        return load(pinfo, null);\n-    }\n-\n-    /**\n-     * Load configuration from the given persistence unit with the specified\n-     * user properties in <code>m</code>.\n-     * Checks if this receiver's PersistenceProvider matches with the \n-     * PersistenceProvider specified in the given PersistenceUnitInfo.\n-     * @return false if PersistenceUnitInfo is null.\n-     * false if this receiver's PersistenceProvider does not matche with the \n-     * PersistenceProvider specified in the given PersistenceUnitInfo. \n-     */\n-    public boolean load(PersistenceUnitInfo pinfo, Map m)\n-        throws IOException {\n-        if (pinfo == null)\n-            return false;\n-        String providerName = pinfo.getPersistenceProviderClassName();\n-        if (!StringUtils.isEmpty(providerName)\n-            && !getPersistenceProviderName().equals(providerName)) {\n-            return false;\n-        }\n-        addProperties(PersistenceUnitInfoImpl.toOpenJPAProperties(pinfo));\n-        if (m != null)\n-            addProperties(m);\n-\n-        _loader = pinfo.getClassLoader();\n-        if (pinfo instanceof PersistenceUnitInfoImpl) {\n-            PersistenceUnitInfoImpl impl = (PersistenceUnitInfoImpl) pinfo;\n-            if (impl.getPersistenceXmlFileUrl() != null)\n-                _source = impl.getPersistenceXmlFileUrl().toString();\n-        }\n-        return true;\n-    }\n-\n-    /**\n-     * Load configuration from the given resource, with the given map of\n-     * overrides. If the resource is null, tries to load from persistence.xml,\n-     * but still returns true if persistence.xml does not exist.\n-     */\n-    public boolean load(String rsrc, String name, Map m)\n-        throws IOException {\n-        boolean explicit = !StringUtils.isEmpty(rsrc);\n-        if (!explicit)\n-            rsrc = RSRC_DEFAULT;\n-        Boolean ret = load(rsrc, name, m, null, explicit);\n-        if (ret != null)\n-            return ret.booleanValue();\n-        if (explicit)\n-            return false;\n-\n-        // persistence.xml does not exist; just load map\n-        PersistenceUnitInfoImpl punit = new PersistenceUnitInfoImpl();\n-        punit.fromUserProperties(m);\n-        return load(punit);\n-    }\n-\n-    @Override\n-    public boolean loadGlobals(ClassLoader loader)\n-        throws IOException {\n-        String rsrc = System.getProperty(\"openjpa.properties\");\n-        boolean explicit = !StringUtils.isEmpty(rsrc);\n-        String anchor = null;\n-        int idx = (!explicit) ? -1 : rsrc.lastIndexOf('#');\n-        if (idx != -1) {\n-            // separate name from <resrouce>#<name> string\n-            if (idx < rsrc.length() - 1)\n-                anchor = rsrc.substring(idx + 1);\n-            rsrc = rsrc.substring(0, idx);\n-        }\n-        if (StringUtils.isEmpty(rsrc))\n-            rsrc = RSRC_GLOBAL;\n-        else if (!rsrc.endsWith(\".xml\"))\n-            return false;\n-        return load(rsrc, anchor, null, loader, explicit) == Boolean.TRUE;\n-\n-    }\n-\n-    @Override\n-    public boolean loadDefaults(ClassLoader loader)\n-        throws IOException {\n-        return load(RSRC_DEFAULT, null, null, loader, false) == Boolean.TRUE;\n-    }\n-\n-    /**\n-     * Looks through the resources at <code>rsrc</code> for a configuration\n-     * file that matches <code>name</code> (or an unnamed one if\n-     * <code>name</code> is <code>null</code>), and loads the XML in the\n-     * resource into a new {@link PersistenceUnitInfo}. Then, applies the\n-     * overrides in <code>m</code>.\n-     *\n-     * @return {@link Boolean#TRUE} if the resource was loaded, null if it\n-     * does not exist, or {@link Boolean#FALSE} if it is not for OpenJPA\n-     */\n-    protected Boolean load(String rsrc, String name, Map m, ClassLoader loader,\n-        boolean explicit)\n-        throws IOException {\n-        if (loader == null)\n-            loader = Thread.currentThread().getContextClassLoader();\n-\n-        Enumeration<URL> urls = loader.getResources(rsrc);\n-        if (!urls.hasMoreElements()) {\n-            if (!rsrc.startsWith(\"META-INF\"))\n-                urls = loader.getResources(\"META-INF/\" + rsrc);\n-            if (!urls.hasMoreElements())\n-                return null;\n-        }\n-\n-        ConfigurationParser parser = new ConfigurationParser(m);\n-        PersistenceUnitInfo pinfo = parseResources(parser, urls, name, loader);\n-        if (pinfo == null || !load(pinfo)) {\n-            if (!explicit)\n-                return false;\n-            String msg = (pinfo == null) ? \"missing-xml-config\"\n-                : \"cantload-xml-config\";\n-            throw new MissingResourceException(_loc.get(msg, rsrc,\n-                String.valueOf(name)).getMessage(), getClass().getName(), rsrc);\n-        }\n-        return true;\n-    }\n-\n-    /**\n-     * Parse resources at the given location. Searches for a\n-     * PersistenceUnitInfo with the requested name, or an OpenJPA unit if\n-     * no name given (preferring an unnamed OpenJPA unit to a named one).\n-     */\n-    private PersistenceUnitInfo parseResources(ConfigurationParser parser,\n-        Enumeration<URL> urls, String name, ClassLoader loader)\n-        throws IOException {\n-        List<PersistenceUnitInfo> pinfos = new ArrayList<PersistenceUnitInfo>();\n-        for (URL url : Collections.list(urls)) {\n-            parser.parse(url);\n-            pinfos.addAll((List<PersistenceUnitInfo>) parser.getResults());\n-        }\n-        return findUnit(pinfos, name);\n-    }\n-\n-    /**\n-     * Find the unit with the given name, or an OpenJPA unit if no name is\n-     * given (preferring an unnamed OpenJPA unit to a named one).\n-     */\n-    private PersistenceUnitInfo findUnit(List<PersistenceUnitInfo> pinfos,\n-        String name) {\n-        PersistenceUnitInfo ojpa = null;\n-        for (PersistenceUnitInfo pinfo : pinfos) {\n-            // found named unit?\n-            if (name != null) {\n-                if (name.equals(pinfo.getPersistenceUnitName()))\n-                    return pinfo;\n-                continue;\n-            }\n-\n-            if (StringUtils.isEmpty(pinfo.getPersistenceProviderClassName())\n-                || getPersistenceProviderName().equals(pinfo.\n-                    getPersistenceProviderClassName())) {\n-                // if no name given and found unnamed unit, return it.  \n-                // otherwise record as default unit unless we find a \n-                // better match later\n-                if (StringUtils.isEmpty(pinfo.getPersistenceUnitName()))\n-                    return pinfo;\n-                if (ojpa == null)\n-                    ojpa = pinfo;\n-            }\n-        }\n-        return ojpa;\n-    }\n-\n-    @Override\n-    public boolean load(String rsrc, String anchor, ClassLoader loader)\n-        throws IOException {\n-        if (rsrc != null && !rsrc.endsWith(\".xml\"))\n-            return false;\n-        return load(rsrc, anchor, null, loader, true) == Boolean.TRUE;\n-    }\n-\n-    @Override\n-    public boolean load(File file, String anchor) {\n-        if (file != null && !file.getName().endsWith(\".xml\"))\n-            return false;\n-\n-        try {\n-            ConfigurationParser parser = new ConfigurationParser(null);\n-            parser.parse(file);\n-            return load(findUnit((List<PersistenceUnitInfo>) \n-                parser.getResults(), anchor));\n-        } catch (IOException ioe) {\n-            throw new GeneralException(ioe);\n-        }\n-    }\n-\n-    @Override\n-    public void setInto(Configuration conf) {\n-        if (conf instanceof OpenJPAConfiguration)\n-            ((OpenJPAConfiguration) conf).setSpecification\n-                (PersistenceProductDerivation.SPEC_JPA);\n-        super.setInto(conf, null);\n-\n-        Log log = conf.getConfigurationLog();\n-        if (log.isTraceEnabled())\n-            log.trace(_loc.get(\"conf-load\", _source, getProperties()));\n-    }\n-\n-    /**\n-     * Gets the concrete class used as Persistence Provider. \n-     * Used to detect whether this receiver should load the configuration.\n-     * This receiver will load only if the provider name in the resource\n-     * matches the provider name returned by this method. \n-     * <B>Note</B>: This is a tentative hook for backward-compatibility work\n-     * and would be replaced/removed once ProductDerivation-based extension\n-     * framework is available.\n-     *  \n-     * @return\n-     */\n-    protected String getPersistenceProviderName() {\n-    \treturn PersistenceProviderImpl.class.getName();\n-    }\n-    \n-    /**\n-     * SAX handler capable of parsing an JPA persistence.xml file.\n-     * Package-protected for testing.\n-     */\n-    static class ConfigurationParser\n-        extends XMLMetaDataParser {\n-\n-        private final Map _map;\n-\n-        private PersistenceUnitInfoImpl _info = null;\n-        private URL _source = null;\n-\n-        public ConfigurationParser(Map map) {\n-            _map = map;\n-            setCaching(false);\n-            setValidating(true);\n-            setParseText(true);\n-        }\n-\n-        @Override\n-        public void parse(URL url)\n-            throws IOException {\n-            _source = url;\n-            super.parse(url);\n-        }\n-\n-        @Override\n-        public void parse(File file)\n-            throws IOException {\n-            _source = file.toURL();\n-            super.parse(file);\n-        }\n-\n-        @Override\n-        protected Object getSchemaSource() {\n-            return getClass().getResourceAsStream(\"persistence-xsd.rsrc\");\n-        }\n-\n-        @Override\n-        protected void reset() {\n-            super.reset();\n-            _info = null;\n-            _source = null;\n-        }\n-\n-        protected boolean startElement(String name, Attributes attrs)\n-            throws SAXException {\n-            if (currentDepth() == 1)\n-                startPersistenceUnit(attrs);\n-            else if (currentDepth() == 3 && \"property\".equals(name))\n-                _info.setProperty(attrs.getValue(\"name\"),\n-                    attrs.getValue(\"value\"));\n-            return true;\n-        }\n-\n-        protected void endElement(String name)\n-            throws SAXException {\n-            if (currentDepth() == 1) {\n-                _info.fromUserProperties(_map);\n-                addResult(_info);\n-            }\n-            if (currentDepth() != 2)\n-                return;\n-\n-            switch (name.charAt(0)) {\n-                case 'c': // class\n-                    _info.addManagedClassName(currentText());\n-                case 'e': // exclude-unlisted-classes\n-                    _info.setExcludeUnlistedClasses(\"true\".equalsIgnoreCase\n-                        (currentText()));\n-                    break;\n-                case 'j':\n-                    if (\"jta-data-source\".equals(name))\n-                        _info.setJtaDataSourceName(currentText());\n-                    else // jar-file\n-                    {\n-                        try {\n-                            _info.addJarFileName(currentText());\n-                        } catch (IllegalArgumentException iae) {\n-                            throw getException(iae.getMessage());\n-                        }\n-                    }\n-                    break;\n-                case 'm': // mapping-file\n-                    _info.addMappingFileName(currentText());\n-                    break;\n-                case 'n': // non-jta-data-source\n-                    _info.setNonJtaDataSourceName(currentText());\n-                    break;\n-                case 'p':\n-                    if (\"provider\".equals(name))\n-                        _info.setPersistenceProviderClassName(currentText());\n-                    break;\n-            }\n-        }\n-\n-        /**\n-         * Parse persistence-unit element.\n-         */\n-        private void startPersistenceUnit(Attributes attrs)\n-            throws SAXException {\n-            _info = new PersistenceUnitInfoImpl();\n-            _info.setPersistenceUnitName(attrs.getValue(\"name\"));\n-\n-            // we only parse this ourselves outside a container, so default\n-            // transaction type to local\n-            String val = attrs.getValue(\"transaction-type\");\n-            if (val == null)\n-                _info.setTransactionType\n-                    (PersistenceUnitTransactionType.RESOURCE_LOCAL);\n-            else\n-                _info.setTransactionType(Enum.valueOf\n-                    (PersistenceUnitTransactionType.class, val));\n-\n-            if (_source != null)\n-                _info.setPersistenceXmlFileUrl(_source);\n-\t\t}\n-\t}\n-}"},{"sha":"9d4014b0405422eeb8e73f307f8bd1179a33ad64","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerFactoryImpl.java","status":"modified","additions":25,"deletions":6,"changes":31,"blob_url":"https://github.com/apache/openjpa/blob/cdcfea47d4568f69783c6733b27dfbc33e3ba621/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerFactoryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/cdcfea47d4568f69783c6733b27dfbc33e3ba621/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerFactoryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerFactoryImpl.java?ref=cdcfea47d4568f69783c6733b27dfbc33e3ba621","patch":"@@ -53,17 +53,22 @@\n     private static final Localizer _loc = Localizer.forPackage\n         (EntityManagerFactoryImpl.class);\n \n-    private final DelegatingBrokerFactory _factory;\n+    private DelegatingBrokerFactory _factory = null;\n     private transient Constructor<FetchPlan> _plan = null;\n     private transient StoreCache _cache = null;\n     private transient QueryResultCache _queryCache = null;\n \n     /**\n-     * Constructor. Delegate must be provided on construction.\n+     * Default constructor provided for auto-instantiation.\n+     */\n+    public EntityManagerFactoryImpl() {\n+    }\n+\n+    /**\n+     * Supply delegate on construction.\n      */\n     public EntityManagerFactoryImpl(BrokerFactory factory) {\n-        _factory = new DelegatingBrokerFactory(factory,\n-            PersistenceExceptions.TRANSLATOR);\n+        setBrokerFactory(factory);\n     }\n \n     /**\n@@ -73,6 +78,14 @@ public BrokerFactory getBrokerFactory() {\n         return _factory.getDelegate();\n     }\n \n+    /**\n+     * Delegate must be provided before use.\n+     */\n+    public void setBrokerFactory(BrokerFactory factory) {\n+        _factory = new DelegatingBrokerFactory(factory,\n+            PersistenceExceptions.TRANSLATOR);\n+    }\n+\n     public OpenJPAConfiguration getConfiguration() {\n         return _factory.getConfiguration();\n     }\n@@ -175,7 +188,7 @@ else if (obj != null) {\n         // regardless of PersistenceContextType\n         broker.setAutoDetach(AutoDetach.DETACH_CLOSE);\n         broker.setDetachedNew(false);\n-        OpenJPAEntityManager em = new EntityManagerImpl(this, broker);\n+        OpenJPAEntityManager em = newEntityManagerImpl(broker);\n \n         // allow setting of other bean properties of EM\n         List<RuntimeException> errs = null;\n@@ -224,10 +237,16 @@ else if (obj != null) {\n                 (Throwable[]) errs.toArray(new Throwable[errs.size()]),\n                 null, true);\n         }\n-\n         return em;\n     }\n \n+    /**\n+     * Create a new entity manager around the given broker.\n+     */\n+    protected EntityManagerImpl newEntityManagerImpl(Broker broker) {\n+        return new EntityManagerImpl(this, broker);\n+    }\n+\n     public void addLifecycleListener(Object listener, Class... classes) {\n         _factory.addLifecycleListener(listener, classes);\n     }"},{"sha":"80e105919072e0d126a87ed23d77e589fd0cbdf9","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerFactoryValue.java","status":"modified","additions":22,"deletions":37,"changes":59,"blob_url":"https://github.com/apache/openjpa/blob/cdcfea47d4568f69783c6733b27dfbc33e3ba621/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerFactoryValue.java","raw_url":"https://github.com/apache/openjpa/raw/cdcfea47d4568f69783c6733b27dfbc33e3ba621/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerFactoryValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerFactoryValue.java?ref=cdcfea47d4568f69783c6733b27dfbc33e3ba621","patch":"@@ -15,61 +15,46 @@\n  */\n package org.apache.openjpa.persistence;\n \n-import java.util.List;\n-import java.util.ArrayList;\n-import java.util.Map;\n-\n-import org.apache.openjpa.abstractstore.AbstractStoreBrokerFactory;\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.kernel.BrokerFactory;\n-import org.apache.openjpa.lib.conf.ConfigurationProvider;\n import org.apache.openjpa.lib.conf.PluginValue;\n \n /**\n- * Value type used to represent the {@link EntityManagerFactory}. \n+ * Plugin type used to represent the {@link EntityManagerFactory}. \n  *\n+ * @since 0.4.1\n  * @nojavadoc\n  */\n public class EntityManagerFactoryValue\n     extends PluginValue {\n \n-    public static final String KEY = \"EntityManagerFactory\";\n-\n-    private static final List _prefixes = new ArrayList(2);\n-    static {\n-        _prefixes.add(\"openjpa\");\n-    }\n-    \n-    /**\n-     * Add <code>prefix</code> to the list of prefixes under which configuration\n-     * properties may be scoped.\n-     */\n-    public static void addPropertyPrefix(String prefix) {\n-        if (!_prefixes.contains(prefix))\n-            _prefixes.add(prefix);\n-    }\n-    \n     /**\n-     * Extract the value of this property if set in the given provider.\n+     * Configuration property key.\n      */\n-    public static Object get(ConfigurationProvider cp) {\n-        Map props = cp.getProperties();\n-        Object bf;\n-        for (int i = 0; i < _prefixes.size (); i++) {\n-            bf = props.get(_prefixes.get(i) + \".\" + KEY);\n-            if (bf != null)\n-                return  bf;\n-        }\n-        return null;\n-    }\n+    public static final String KEY = \"EntityManagerFactory\";\n+\n+    public static final String[] ALIASES = {\n+        \"default\", EntityManagerFactoryImpl.class.getName(),\n+    };\n \n     /**\n-     * Return the key to use for this property.\n+     * Create a new factory of the configured type.\n      */\n-    public static String getKey(ConfigurationProvider cp) {\n-        return _prefixes.get(0) + \".\" + KEY;\n+    public static OpenJPAEntityManagerFactory newFactory(BrokerFactory bf) {\n+        OpenJPAConfiguration conf = bf.getConfiguration();\n+        PluginValue val = (PluginValue) conf.getValue(KEY); \n+        if (val == null)\n+            return null;\n+        EntityManagerFactoryImpl emf = (EntityManagerFactoryImpl) val.\n+            instantiate(EntityManagerFactoryImpl.class, conf, true);\n+        emf.setBrokerFactory(bf);\n+        return emf;\n     }\n \n     public EntityManagerFactoryValue() {\n         super(KEY, false);\n+        setAliases(ALIASES);\n+        setDefault(ALIASES[0]);\n+        setClassName(ALIASES[1]);\n     }\n }"},{"sha":"9fbd33fbfa83ef9d478cebc0ef29601f327e3cac","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAPersistence.java","status":"modified","additions":3,"deletions":59,"changes":62,"blob_url":"https://github.com/apache/openjpa/blob/cdcfea47d4568f69783c6733b27dfbc33e3ba621/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAPersistence.java","raw_url":"https://github.com/apache/openjpa/raw/cdcfea47d4568f69783c6733b27dfbc33e3ba621/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAPersistence.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAPersistence.java?ref=cdcfea47d4568f69783c6733b27dfbc33e3ba621","patch":"@@ -65,23 +65,15 @@\n     \n     public static OpenJPAEntityManagerFactory toEntityManagerFactory\n        (BrokerFactory factory) {\n-        return toEntityManagerFactory(factory, null);\n-    }\n-    \n-    /**\n-     * Return an entity manager factory facade to the given broker factory.\n-     */\n-    public static OpenJPAEntityManagerFactory toEntityManagerFactory\n-        (BrokerFactory factory, ConfigurationProvider cp) {\n         if (factory == null)\n             return null;\n+\n         factory.lock();\n-        \n         try {\n             OpenJPAEntityManagerFactory emf = (OpenJPAEntityManagerFactory)\n                 factory.getUserObject(EMF_KEY);\n             if (emf == null) {\n-                emf = newEntityManagerFactory(factory, cp, null);\n+                emf = EntityManagerFactoryValue.newFactory(factory);\n                 factory.putUserObject(EMF_KEY, emf);\n             }\n             return emf;\n@@ -116,19 +108,16 @@ public static OpenJPAEntityManager toEntityManager(Broker broker) {\n             if (em == null) {\n                 EntityManagerFactoryImpl emf = (EntityManagerFactoryImpl)\n                     toEntityManagerFactory(broker.getBrokerFactory());\n-                em = new EntityManagerImpl(emf, broker);\n+                em = emf.newEntityManagerImpl(broker);\n                 broker.putUserObject(EM_KEY, em);\n             }\n-\n             return em;\n         } catch (Exception e) {\n             throw PersistenceExceptions.toPersistenceException(e);\n         } finally {\n             broker.unlock();\n         }\n     }\n-    \n-     \n \n     /**\n      * Return the underlying broker for the given entity manager facade.\n@@ -441,49 +430,4 @@ public static Class fromOpenJPAObjectIdClass(Class oidClass) {\n \t\t\treturn String.class;\n \t\treturn oidClass;\n \t}\n-    \n-    private static OpenJPAEntityManagerFactory newEntityManagerFactory (\n-        BrokerFactory brokerFactory, ConfigurationProvider conf, \n-        ClassLoader loader) {\n-            if (conf == null)\n-                conf = new MapConfigurationProvider();\n-            ProductDerivations.beforeConfigurationConstruct(conf);\n-\n-            Class cls = getFactoryClass(conf, loader);\n-            Constructor ctr;\n-            try {\n-                ctr = cls.getConstructor(BrokerFactory.class); \n-                return (OpenJPAEntityManagerFactory)ctr\n-                   .newInstance(brokerFactory);\n-            } catch (Exception e) {\n-                throw PersistenceExceptions.toPersistenceException(e);\n-            }\n-        }\n-\n-    /**\n-     * Instantiate the factory class designated in properties.\n-     */\n-    private static Class getFactoryClass(ConfigurationProvider conf,\n-        ClassLoader loader) {\n-        if (loader == null)\n-            loader = Thread.currentThread().getContextClassLoader();\n-\n-        Object cls = EntityManagerFactoryValue.get(conf);\n-        if (cls instanceof Class)\n-            return (Class) cls;\n-\n-        EntityManagerFactoryValue value = new EntityManagerFactoryValue();\n-        value.setString((String) cls);\n-        String clsName = value.getClassName();\n-        if (clsName == null)\n-            throw new UserException(_loc.get(\"no-emf\", \n-                conf.getProperties())).setFatal(true);\n-\n-        try {\n-            return Class.forName(clsName, true, loader);\n-        } catch (Exception e) {\n-            throw new UserException(_loc.get(\"bad-emf-class\",\n-                clsName), e).setFatal(true);\n-        }\n-    }\n }"},{"sha":"daeb7097544a9e20a2bbd4613510cbf6d939523e","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java","status":"modified","additions":392,"deletions":32,"changes":424,"blob_url":"https://github.com/apache/openjpa/blob/cdcfea47d4568f69783c6733b27dfbc33e3ba621/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java","raw_url":"https://github.com/apache/openjpa/raw/cdcfea47d4568f69783c6733b27dfbc33e3ba621/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java?ref=cdcfea47d4568f69783c6733b27dfbc33e3ba621","patch":"@@ -15,18 +15,44 @@\n  */\n package org.apache.openjpa.persistence;\n \n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Enumeration;\n+import java.util.List;\n import java.util.Map;\n+import java.util.MissingResourceException;\n+import javax.persistence.spi.PersistenceUnitInfo;\n+import javax.persistence.spi.PersistenceUnitTransactionType;\n \n+import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.conf.OpenJPAConfigurationImpl;\n import org.apache.openjpa.conf.OpenJPAProductDerivation;\n import org.apache.openjpa.lib.conf.AbstractProductDerivation;\n import org.apache.openjpa.lib.conf.Configuration;\n import org.apache.openjpa.lib.conf.ConfigurationProvider;\n+import org.apache.openjpa.lib.conf.MapConfigurationProvider;\n import org.apache.openjpa.lib.conf.PluginValue;\n+import org.apache.openjpa.lib.log.Log;\n+import org.apache.openjpa.lib.meta.XMLMetaDataParser;\n+import org.apache.openjpa.lib.util.Localizer;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.SAXException;\n \n /**\n- * Sets JPA specification defaults.\n+ * Sets JPA specification defaults and parses JPA specification XML files.\n+ * \n+ * For globals, looks in <code>openjpa.properties</code> system property for\n+ * the location of a file to parse. If no system property is defined, the\n+ * default resource location of <code>META-INF/openjpa.xml</code> is used.\n+ *\n+ * For defaults, looks for <code>META-INF/persistence.xml</code>.\n+ * Within <code>persistence.xml</code>, look for the named persistence unit, or\n+ * if no name given, an OpenJPA unit (preferring an unnamed OpenJPA unit to \n+ * a named one).\n  *\n  * @author Abe White\n  * @nojavadoc\n@@ -37,40 +63,17 @@\n \n     public static final String SPEC_JPA = \"jpa\";\n     public static final String ALIAS_EJB = \"ejb\";\n+    public static final String RSRC_GLOBAL = \"META-INF/openjpa.xml\";\n+    public static final String RSRC_DEFAULT = \"META-INF/persistence.xml\";\n+\n+    private static final Localizer _loc = Localizer.forPackage\n+        (PersistenceProductDerivation.class);\n \n     public int getType() {\n         return TYPE_SPEC;\n     }\n-\n-    @Override\n-    public ConfigurationProvider newConfigurationProvider() {\n-        return new ConfigurationProviderImpl();\n-    }\n-\n-    @Override\n-    public ConfigurationProvider load(String rsrc, String anchor,\n-            ClassLoader loader)  throws Exception {\n-        if (rsrc != null && !rsrc.endsWith(\".xml\"))\n-            return null;\n-        return super.load(rsrc, anchor, loader);\n-    }\n-    \n-    public ConfigurationProvider load(String rsrc, String anchor,\n-            Map map) throws Exception {\n-        if (rsrc != null && !rsrc.endsWith(\".xml\"))\n-            return null;\n-        return super.load(rsrc, anchor, map);\n-    }\n-    \n-    public boolean beforeConfigurationConstruct(ConfigurationProvider cp) {\n-        if (EntityManagerFactoryValue.get(cp) == null) {\n-            cp.addProperty(EntityManagerFactoryValue.getKey(cp),\n-                EntityManagerFactoryImpl.class.getName());\n-            return true;\n-        }\n-        return false;\n-    }\n     \n+    @Override\n     public boolean beforeConfigurationLoad(Configuration c) {\n         if (!(c instanceof OpenJPAConfigurationImpl))\n             return false;\n@@ -81,11 +84,11 @@ public boolean beforeConfigurationLoad(Configuration c) {\n         conf.metaFactoryPlugin.setAlias(SPEC_JPA,\n             PersistenceMetaDataFactory.class.getName());\n         \n-        PluginValue emfPlugin = new EntityManagerFactoryValue();\n-        conf.addValue(emfPlugin);\n+        conf.addValue(new EntityManagerFactoryValue());\n         return true;\n     }\n \n+    @Override\n     public boolean afterSpecificationSet(Configuration c) {\n       if (!(c instanceof OpenJPAConfigurationImpl)\n          || !SPEC_JPA.equals(((OpenJPAConfiguration)c).getSpecification()))\n@@ -100,4 +103,361 @@ public boolean afterSpecificationSet(Configuration c) {\n         conf.nontransactionalWrite.set(true);\n         return true;\n     }\n+\n+    /**\n+     * Load configuration from the given persistence unit with the specified\n+     * user properties.\n+     */\n+    public ConfigurationProvider load(PersistenceUnitInfo pinfo, Map m)\n+        throws IOException {\n+        if (pinfo == null)\n+            return null;\n+\n+        if (!isOpenJPAPersistenceProvider(pinfo, null))\n+            return null;\n+\n+        ConfigurationProviderImpl cp = new ConfigurationProviderImpl();\n+        cp.addProperties(PersistenceUnitInfoImpl.toOpenJPAProperties(pinfo));\n+        cp.addProperties(m);\n+        if (pinfo instanceof PersistenceUnitInfoImpl) {\n+            PersistenceUnitInfoImpl impl = (PersistenceUnitInfoImpl) pinfo;\n+            if (impl.getPersistenceXmlFileUrl() != null)\n+                cp.setSource(impl.getPersistenceXmlFileUrl().toString());\n+        }\n+        return cp;\n+    }\n+\n+    /**\n+     * Load configuration from the given resource and unit names, which may\n+     * be null.\n+     */\n+    public ConfigurationProvider load(String rsrc, String name, Map m)\n+        throws IOException {\n+        boolean explicit = !StringUtils.isEmpty(rsrc);\n+        if (!explicit)\n+            rsrc = RSRC_DEFAULT;\n+        \n+        ConfigurationProviderImpl cp = new ConfigurationProviderImpl();\n+        Boolean ret = load(cp, rsrc, name, m, null, explicit);\n+        if (ret != null)\n+            return (ret.booleanValue()) ? cp : null;\n+        if (explicit)\n+            return null;\n+\n+        // persistence.xml does not exist; just load map\n+        PersistenceUnitInfoImpl pinfo = new PersistenceUnitInfoImpl();\n+        pinfo.fromUserProperties(m);\n+        if (!isOpenJPAPersistenceProvider(pinfo, null))\n+            return null;\n+        cp.addProperties(pinfo.toOpenJPAProperties());\n+        return cp;\n+    }\n+\n+    @Override\n+    public ConfigurationProvider load(String rsrc, String anchor, \n+        ClassLoader loader)\n+        throws IOException {\n+        if (rsrc != null && !rsrc.endsWith(\".xml\"))\n+            return null;\n+        ConfigurationProviderImpl cp = new ConfigurationProviderImpl();\n+        if (load(cp, rsrc, anchor, null, loader, true) == Boolean.TRUE)\n+            return cp;\n+        return null;\n+    }\n+\n+    @Override\n+    public ConfigurationProvider load(File file, String anchor) \n+        throws IOException {\n+        if (!file.getName().endsWith(\".xml\"))\n+            return null;\n+\n+        ConfigurationParser parser = new ConfigurationParser(null);\n+        parser.parse(file);\n+        return load(findUnit((List<PersistenceUnitInfoImpl>) \n+            parser.getResults(), anchor, null), null);\n+    }\n+\n+    @Override\n+    public ConfigurationProvider loadGlobals(ClassLoader loader)\n+        throws IOException {\n+        String rsrc = System.getProperty(\"openjpa.properties\");\n+        boolean explicit = !StringUtils.isEmpty(rsrc);\n+        String anchor = null;\n+        int idx = (!explicit) ? -1 : rsrc.lastIndexOf('#');\n+        if (idx != -1) {\n+            // separate name from <resrouce>#<name> string\n+            if (idx < rsrc.length() - 1)\n+                anchor = rsrc.substring(idx + 1);\n+            rsrc = rsrc.substring(0, idx);\n+        }\n+        if (StringUtils.isEmpty(rsrc))\n+            rsrc = RSRC_GLOBAL;\n+        else if (!rsrc.endsWith(\".xml\"))\n+            return null;\n+\n+        ConfigurationProviderImpl cp = new ConfigurationProviderImpl();\n+        if (load(cp, rsrc, anchor, null, loader, explicit) == Boolean.TRUE)\n+            return cp;\n+        return null;\n+    }\n+\n+    @Override\n+    public ConfigurationProvider loadDefaults(ClassLoader loader)\n+        throws IOException {\n+        ConfigurationProviderImpl cp = new ConfigurationProviderImpl();\n+        if (load(cp, RSRC_DEFAULT, null, null, loader, false) == Boolean.TRUE)\n+            return cp;\n+        return null;\n+    }\n+\n+    /**\n+     * Looks through the resources at <code>rsrc</code> for a configuration\n+     * file that matches <code>name</code> (or an unnamed one if\n+     * <code>name</code> is <code>null</code>), and loads the XML in the\n+     * resource into a new {@link PersistenceUnitInfo}. Then, applies the\n+     * overrides in <code>m</code>.\n+     *\n+     * @return {@link Boolean#TRUE} if the resource was loaded, null if it\n+     * does not exist, or {@link Boolean#FALSE} if it is not for OpenJPA\n+     */\n+    private Boolean load(ConfigurationProviderImpl cp, String rsrc, \n+        String name, Map m, ClassLoader loader, boolean explicit)\n+        throws IOException {\n+        if (loader == null)\n+            loader = Thread.currentThread().getContextClassLoader();\n+\n+        Enumeration<URL> urls = loader.getResources(rsrc);\n+        if (!urls.hasMoreElements()) {\n+            if (!rsrc.startsWith(\"META-INF\"))\n+                urls = loader.getResources(\"META-INF/\" + rsrc);\n+            if (!urls.hasMoreElements())\n+                return null;\n+        }\n+\n+        ConfigurationParser parser = new ConfigurationParser(m);\n+        PersistenceUnitInfoImpl pinfo = parseResources(parser, urls, name, \n+            loader);\n+        if (pinfo == null || !isOpenJPAPersistenceProvider(pinfo, loader)) {\n+            if (!explicit)\n+                return Boolean.FALSE;\n+            String msg = (pinfo == null) ? \"missing-xml-config\"\n+                : \"cantload-xml-config\";\n+            throw new MissingResourceException(_loc.get(msg, rsrc,\n+                String.valueOf(name)).getMessage(), getClass().getName(), rsrc);\n+        }\n+\n+        cp.addProperties(pinfo.toOpenJPAProperties());\n+        cp.setSource(pinfo.getPersistenceXmlFileUrl().toString());\n+        return Boolean.TRUE;\n+    }\n+\n+    /**\n+     * Parse resources at the given location. Searches for a\n+     * PersistenceUnitInfo with the requested name, or an OpenJPA unit if\n+     * no name given (preferring an unnamed OpenJPA unit to a named one).\n+     */\n+    private PersistenceUnitInfoImpl parseResources(ConfigurationParser parser,\n+        Enumeration<URL> urls, String name, ClassLoader loader)\n+        throws IOException {\n+        List<PersistenceUnitInfoImpl> pinfos = \n+            new ArrayList<PersistenceUnitInfoImpl>();\n+        for (URL url : Collections.list(urls)) {\n+            parser.parse(url);\n+            pinfos.addAll((List<PersistenceUnitInfoImpl>) parser.getResults());\n+        }\n+        return findUnit(pinfos, name, loader);\n+    }\n+\n+    /**\n+     * Find the unit with the given name, or an OpenJPA unit if no name is\n+     * given (preferring an unnamed OpenJPA unit to a named one).\n+     */\n+    private PersistenceUnitInfoImpl findUnit(List<PersistenceUnitInfoImpl> \n+        pinfos, String name, ClassLoader loader) {\n+        PersistenceUnitInfoImpl ojpa = null;\n+        for (PersistenceUnitInfoImpl pinfo : pinfos) {\n+            // found named unit?\n+            if (name != null) {\n+                if (name.equals(pinfo.getPersistenceUnitName()))\n+                    return pinfo;\n+                continue;\n+            }\n+\n+            if (isOpenJPAPersistenceProvider(pinfo, loader)) {\n+                // if no name given and found unnamed unit, return it.  \n+                // otherwise record as default unit unless we find a \n+                // better match later\n+                if (StringUtils.isEmpty(pinfo.getPersistenceUnitName()))\n+                    return pinfo;\n+                if (ojpa == null)\n+                    ojpa = pinfo;\n+            }\n+        }\n+        return ojpa;\n+    }\n+\n+    /**\n+     * Return whether the given persistence unit uses an OpenJPA provider.\n+     */\n+    private static boolean isOpenJPAPersistenceProvider\n+        (PersistenceUnitInfo pinfo, ClassLoader loader) {\n+        String name = pinfo.getPersistenceProviderClassName();\n+        if (StringUtils.isEmpty(name) \n+            || PersistenceProviderImpl.class.getName().equals(name))\n+            return true;\n+\n+        if (loader == null)\n+            loader = Thread.currentThread().getContextClassLoader();\n+        try {\n+            return PersistenceProviderImpl.class.isAssignableFrom\n+                (Class.forName(name, false, loader));\n+        } catch (Throwable t) {\n+            return false;\n+        }\n+    }\n+\n+    /**\n+     * Custom configuration provider.   \n+     */\n+    private static class ConfigurationProviderImpl\n+        extends MapConfigurationProvider {\n+\n+        private String _source;\n+\n+        /**\n+         * Set the source of information in this provider.\n+         */\n+        public void setSource(String source) {\n+            _source = source;\n+        }\n+\n+        @Override\n+        public void setInto(Configuration conf) {\n+            if (conf instanceof OpenJPAConfiguration)\n+                ((OpenJPAConfiguration) conf).setSpecification(SPEC_JPA);\n+            super.setInto(conf, null);\n+\n+            Log log = conf.getConfigurationLog();\n+            if (log.isTraceEnabled())\n+                log.trace(_loc.get(\"conf-load\", _source, getProperties()));\n+        }\n+    }\n+\n+    /**\n+     * SAX handler capable of parsing an JPA persistence.xml file.\n+     * Package-protected for testing.\n+     */\n+    static class ConfigurationParser\n+        extends XMLMetaDataParser {\n+\n+        private final Map _map;\n+        private PersistenceUnitInfoImpl _info = null;\n+        private URL _source = null;\n+\n+        public ConfigurationParser(Map map) {\n+            _map = map;\n+            setCaching(false);\n+            setValidating(true);\n+            setParseText(true);\n+        }\n+\n+        @Override\n+        public void parse(URL url)\n+            throws IOException {\n+            _source = url;\n+            super.parse(url);\n+        }\n+\n+        @Override\n+        public void parse(File file)\n+            throws IOException {\n+            _source = file.toURL();\n+            super.parse(file);\n+        }\n+\n+        @Override\n+        protected Object getSchemaSource() {\n+            return getClass().getResourceAsStream(\"persistence-xsd.rsrc\");\n+        }\n+\n+        @Override\n+        protected void reset() {\n+            super.reset();\n+            _info = null;\n+            _source = null;\n+        }\n+\n+        protected boolean startElement(String name, Attributes attrs)\n+            throws SAXException {\n+            if (currentDepth() == 1)\n+                startPersistenceUnit(attrs);\n+            else if (currentDepth() == 3 && \"property\".equals(name))\n+                _info.setProperty(attrs.getValue(\"name\"),\n+                    attrs.getValue(\"value\"));\n+            return true;\n+        }\n+\n+        protected void endElement(String name)\n+            throws SAXException {\n+            if (currentDepth() == 1) {\n+                _info.fromUserProperties(_map);\n+                addResult(_info);\n+            }\n+            if (currentDepth() != 2)\n+                return;\n+\n+            switch (name.charAt(0)) {\n+                case 'c': // class\n+                    _info.addManagedClassName(currentText());\n+                case 'e': // exclude-unlisted-classes\n+                    _info.setExcludeUnlistedClasses(\"true\".equalsIgnoreCase\n+                        (currentText()));\n+                    break;\n+                case 'j':\n+                    if (\"jta-data-source\".equals(name))\n+                        _info.setJtaDataSourceName(currentText());\n+                    else // jar-file\n+                    {\n+                        try {\n+                            _info.addJarFileName(currentText());\n+                        } catch (IllegalArgumentException iae) {\n+                            throw getException(iae.getMessage());\n+                        }\n+                    }\n+                    break;\n+                case 'm': // mapping-file\n+                    _info.addMappingFileName(currentText());\n+                    break;\n+                case 'n': // non-jta-data-source\n+                    _info.setNonJtaDataSourceName(currentText());\n+                    break;\n+                case 'p':\n+                    if (\"provider\".equals(name))\n+                        _info.setPersistenceProviderClassName(currentText());\n+                    break;\n+            }\n+        }\n+\n+        /**\n+         * Parse persistence-unit element.\n+         */\n+        private void startPersistenceUnit(Attributes attrs)\n+            throws SAXException {\n+            _info = new PersistenceUnitInfoImpl();\n+            _info.setPersistenceUnitName(attrs.getValue(\"name\"));\n+\n+            // we only parse this ourselves outside a container, so default\n+            // transaction type to local\n+            String val = attrs.getValue(\"transaction-type\");\n+            if (val == null)\n+                _info.setTransactionType\n+                    (PersistenceUnitTransactionType.RESOURCE_LOCAL);\n+            else\n+                _info.setTransactionType(Enum.valueOf\n+                    (PersistenceUnitTransactionType.class, val));\n+\n+            if (_source != null)\n+                _info.setPersistenceXmlFileUrl(_source);\n+\t\t}\n+\t}\n }"},{"sha":"6dedee7ffa4e97768ce77304605e325c5d806d02","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProviderImpl.java","status":"modified","additions":26,"deletions":33,"changes":59,"blob_url":"https://github.com/apache/openjpa/blob/cdcfea47d4568f69783c6733b27dfbc33e3ba621/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProviderImpl.java","raw_url":"https://github.com/apache/openjpa/raw/cdcfea47d4568f69783c6733b27dfbc33e3ba621/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProviderImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProviderImpl.java?ref=cdcfea47d4568f69783c6733b27dfbc33e3ba621","patch":"@@ -61,19 +61,20 @@\n      * identified by <code>resource</code>, and uses the first resource found\n      * when doing this lookup, regardless of the name specified in the XML\n      * resource or the name of the jar that the resource is contained in.\n-     *  This does no pooling of EntityManagersFactories.\n+     * This does no pooling of EntityManagersFactories.\n      */\n     public EntityManagerFactory createEntityManagerFactory(String name,\n         String resource, Map m) {\n+        PersistenceProductDerivation pd = new PersistenceProductDerivation();\n         try {\n-            ConfigurationProvider cp = ProductDerivations.load(resource, name, \n-                 m);\n-            if (cp != null) {\n-                BrokerFactory factory = Bootstrap.newBrokerFactory(cp, null);\n-            \treturn OpenJPAPersistence.toEntityManagerFactory(factory, cp);\n-            }\n-            else\n-                 return null;\n+            ConfigurationProvider cp = pd.load(resource, name, m);\n+            if (cp == null)\n+                return null;\n+\n+            if (m != null)\n+                cp.addProperties(m);\n+            BrokerFactory factory = Bootstrap.newBrokerFactory(cp, null);\n+            return OpenJPAPersistence.toEntityManagerFactory(factory);\n         } catch (Exception e) {\n             throw PersistenceExceptions.toPersistenceException(e);\n         }\n@@ -84,37 +85,29 @@ public EntityManagerFactory createEntityManagerFactory(String name, Map m) {\n     }\n \n     public EntityManagerFactory createContainerEntityManagerFactory(\n-        PersistenceUnitInfo pui, Map map) {\n-        ConfigurationProviderImpl cp = newConfigurationProvider();\n+        PersistenceUnitInfo pui, Map m) {\n+        PersistenceProductDerivation pd = new PersistenceProductDerivation();\n         try {\n-            if (cp.load(pui, map)) {\n-                BrokerFactory factory = Bootstrap.newBrokerFactory(cp, \n-                     cp.getClassLoader());\n-                OpenJPAEntityManagerFactory emf = \n-                    OpenJPAPersistence.toEntityManagerFactory(factory);\n-                Properties p = pui.getProperties();\n-                String ctOpts = null;\n-                if (p != null)\n-                    ctOpts = p.getProperty(CLASS_TRANSFORMER_OPTIONS);\n-                pui.addTransformer(new ClassTransformerImpl(\n-                    emf.getConfiguration(), ctOpts,\n-                    pui.getNewTempClassLoader()));\n-                return emf;\n-            } else\n+            ConfigurationProvider cp = pd.load(pui, m);\n+            if (cp == null)\n                 return null;\n+\n+            BrokerFactory factory = Bootstrap.newBrokerFactory(cp, \n+                pui.getClassLoader());\n+            OpenJPAEntityManagerFactory emf = \n+                OpenJPAPersistence.toEntityManagerFactory(factory);\n+            Properties p = pui.getProperties();\n+            String ctOpts = null;\n+            if (p != null)\n+                ctOpts = p.getProperty(CLASS_TRANSFORMER_OPTIONS);\n+            pui.addTransformer(new ClassTransformerImpl(emf.getConfiguration(),\n+                ctOpts, pui.getNewTempClassLoader()));\n+            return emf;\n         } catch (Exception e) {\n             throw PersistenceExceptions.toPersistenceException(e);\n         }\n     }\n     \n-    /**\n-     * Gets the configuration provider to locate and load configuration data.\n-     * An implementation is returned rather than the interface.\n-      */\n-    protected ConfigurationProviderImpl newConfigurationProvider() {\n-        return new ConfigurationProviderImpl();\n-    }\n-            \n     /**\n      * Java EE 5 class transformer.\n      */"},{"sha":"2973cd92ed820cc735bc9893aa54612cecbd143a","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceUnitInfoImpl.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/cdcfea47d4568f69783c6733b27dfbc33e3ba621/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceUnitInfoImpl.java","raw_url":"https://github.com/apache/openjpa/raw/cdcfea47d4568f69783c6733b27dfbc33e3ba621/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceUnitInfoImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceUnitInfoImpl.java?ref=cdcfea47d4568f69783c6733b27dfbc33e3ba621","patch":"@@ -294,6 +294,15 @@ else if (\"javax.persistence.transactionType\".equals(key)) {\n         }\n     }\n \n+    /**\n+     * Return a {@link Map} containing the properties necessary to create\n+     * a {@link Configuration} that reflects the information in this\n+     * persistence unit info.\n+     */\n+    public Map toOpenJPAProperties() {\n+        return toOpenJPAProperties(this);\n+    }\n+\n     /**\n      * Return a {@link Map} containing the properties necessary to create\n      * a {@link Configuration} that reflects the information in the given"}]}

