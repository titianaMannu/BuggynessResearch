{"sha":"cde2a4aaf278bc552f81158a6a573d15b775369c","node_id":"MDY6Q29tbWl0MjA2MzY0OmNkZTJhNGFhZjI3OGJjNTUyZjgxMTU4YTZhNTczZDE1Yjc3NTM2OWM=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2010-09-28T23:36:54Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2010-09-28T23:36:54Z"},"message":"OPENJPA-1814: JPQL fails with Group By and Having aggregate_expression IN (subquery)\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1002419 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ea93046138ae508353c2901b634fc01c1701d479","url":"https://api.github.com/repos/apache/openjpa/git/trees/ea93046138ae508353c2901b634fc01c1701d479"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/cde2a4aaf278bc552f81158a6a573d15b775369c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/cde2a4aaf278bc552f81158a6a573d15b775369c","html_url":"https://github.com/apache/openjpa/commit/cde2a4aaf278bc552f81158a6a573d15b775369c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/cde2a4aaf278bc552f81158a6a573d15b775369c/comments","author":null,"committer":null,"parents":[{"sha":"ed85f020fdd883e536db7f4e54b7f7e88e97397d","url":"https://api.github.com/repos/apache/openjpa/commits/ed85f020fdd883e536db7f4e54b7f7e88e97397d","html_url":"https://github.com/apache/openjpa/commit/ed85f020fdd883e536db7f4e54b7f7e88e97397d"}],"stats":{"total":47,"additions":45,"deletions":2},"files":[{"sha":"3d8761463021d09487d5128da2a5d1a2561fa34d","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ExpressionStoreQuery.java","status":"modified","additions":25,"deletions":2,"changes":27,"blob_url":"https://github.com/apache/openjpa/blob/cde2a4aaf278bc552f81158a6a573d15b775369c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ExpressionStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/cde2a4aaf278bc552f81158a6a573d15b775369c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ExpressionStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ExpressionStoreQuery.java?ref=cde2a4aaf278bc552f81158a6a573d15b775369c","patch":"@@ -19,6 +19,8 @@\n package org.apache.openjpa.kernel;\n \n import java.io.Serializable;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.HashSet;\n@@ -29,6 +31,7 @@\n \n import org.apache.commons.collections.map.LinkedMap;\n import org.apache.openjpa.conf.OpenJPAConfiguration;\n+import org.apache.openjpa.kernel.exps.Subquery;\n import org.apache.openjpa.kernel.exps.AbstractExpressionVisitor;\n import org.apache.openjpa.kernel.exps.AggregateListener;\n import org.apache.openjpa.kernel.exps.Constant;\n@@ -508,8 +511,28 @@ public static void validate(QueryContext ctx,\n                 for (int i = 0; i < exps.grouping.length; i++)\n                     exps.grouping[i].acceptVisit(visitor);\n                 visitor._grouping = false;\n-                if (exps.having != null)\n-                    exps.having.acceptVisit(visitor);\n+                if (exps.having != null) {\n+                    Class cls = exps.having.getClass();\n+                    if (cls.getName().endsWith(\"Expression\"))\n+                        cls = cls.getSuperclass();\n+                    Object value2 = null;\n+                    Method getValue2 = null;\n+                    try {\n+                        getValue2 = cls.getMethod(\"getValue2\");\n+                        getValue2.setAccessible(true);\n+                        value2 = getValue2.invoke(exps.having, (Object[]) null);\n+                    } catch (NoSuchMethodException name) {\n+                        // skip\n+                    } catch (IllegalAccessException iae) {\n+                        // skip\n+                    } catch (InvocationTargetException ite) {\n+                        // skip\n+                    } \n+                    if (value2 != null && value2 instanceof Subquery)\n+                        ;  // complex having with subquery, validation is performed by DBMS\n+                    else\n+                        exps.having.acceptVisit(visitor);\n+                }\n                 for (int i = 0; i < exps.projections.length; i++)\n                     exps.projections[i].acceptVisit(visitor);\n             }"},{"sha":"62c3c61d99e2592e2c69898072d5ed12664ce0a5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestMultipleEntityProjection.java","status":"modified","additions":20,"deletions":0,"changes":20,"blob_url":"https://github.com/apache/openjpa/blob/cde2a4aaf278bc552f81158a6a573d15b775369c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestMultipleEntityProjection.java","raw_url":"https://github.com/apache/openjpa/raw/cde2a4aaf278bc552f81158a6a573d15b775369c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestMultipleEntityProjection.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestMultipleEntityProjection.java?ref=cde2a4aaf278bc552f81158a6a573d15b775369c","patch":"@@ -165,6 +165,26 @@ public void testAggregateExpressionInHavingExpression() {\n \t\tquery = em.createQuery(jpql);\n \t\tresult = query.getResultList();\n \t\tassertTrue(result.isEmpty());\n+\n+//      The following JPQL results in syntax error,\n+//      see comments in OPENJPA-1814              \n+//\t\tjpql = \"select m.publisher, max(m.datePublished) \" + \n+//\t\t    \"from Magazine m group by m.publisher \" + \n+//\t\t    \"having max(m.tsPublished) IN \" + \n+//\t\t    \"(select max(m.tsPublished) from Magazine m \" +\n+//\t\t    \"where m.datePublished = CURRENT_TIMESTAMP)\";\n+//\t\tquery = em.createQuery(jpql);\n+//\t\tresult = query.getResultList();\n+//\t\tassertTrue(result.isEmpty());\n+\n+\t\tjpql = \"select m.publisher, max(m.datePublished) \" + \n+\t\t    \"from Magazine m group by m.publisher \" + \n+\t\t    \"having max(m.tsPublished) = \" + \n+\t\t    \"(select max(m.tsPublished) from Magazine m \" + \n+\t\t    \"where m.datePublished = CURRENT_TIMESTAMP)\";\n+\t\tquery = em.createQuery(jpql);\n+\t\tresult = query.getResultList();\n+\t\tassertTrue(result.isEmpty());\n \t}\n \t\n \t/**"}]}

