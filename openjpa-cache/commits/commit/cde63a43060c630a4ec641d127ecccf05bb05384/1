{"sha":"cde63a43060c630a4ec641d127ecccf05bb05384","node_id":"MDY6Q29tbWl0MjA2MzY0OmNkZTYzYTQzMDYwYzYzMGE0ZWM2NDFkMTI3ZWNjY2YwNWJiMDUzODQ=","commit":{"author":{"name":"Craig Russell","email":"clr@apache.org","date":"2007-02-01T20:05:16Z"},"committer":{"name":"Craig Russell","email":"clr@apache.org","date":"2007-02-01T20:05:16Z"},"message":"OPENJPA-122 Added test for throwing IllegalStateException after EntityManager.close\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@502341 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"337f1ec92788162fa54d535bf5a3e87a7af206d1","url":"https://api.github.com/repos/apache/openjpa/git/trees/337f1ec92788162fa54d535bf5a3e87a7af206d1"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/cde63a43060c630a4ec641d127ecccf05bb05384","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/cde63a43060c630a4ec641d127ecccf05bb05384","html_url":"https://github.com/apache/openjpa/commit/cde63a43060c630a4ec641d127ecccf05bb05384","comments_url":"https://api.github.com/repos/apache/openjpa/commits/cde63a43060c630a4ec641d127ecccf05bb05384/comments","author":{"login":"papajdo","id":2455884,"node_id":"MDQ6VXNlcjI0NTU4ODQ=","avatar_url":"https://avatars.githubusercontent.com/u/2455884?v=4","gravatar_id":"","url":"https://api.github.com/users/papajdo","html_url":"https://github.com/papajdo","followers_url":"https://api.github.com/users/papajdo/followers","following_url":"https://api.github.com/users/papajdo/following{/other_user}","gists_url":"https://api.github.com/users/papajdo/gists{/gist_id}","starred_url":"https://api.github.com/users/papajdo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/papajdo/subscriptions","organizations_url":"https://api.github.com/users/papajdo/orgs","repos_url":"https://api.github.com/users/papajdo/repos","events_url":"https://api.github.com/users/papajdo/events{/privacy}","received_events_url":"https://api.github.com/users/papajdo/received_events","type":"User","site_admin":false},"committer":{"login":"papajdo","id":2455884,"node_id":"MDQ6VXNlcjI0NTU4ODQ=","avatar_url":"https://avatars.githubusercontent.com/u/2455884?v=4","gravatar_id":"","url":"https://api.github.com/users/papajdo","html_url":"https://github.com/papajdo","followers_url":"https://api.github.com/users/papajdo/followers","following_url":"https://api.github.com/users/papajdo/following{/other_user}","gists_url":"https://api.github.com/users/papajdo/gists{/gist_id}","starred_url":"https://api.github.com/users/papajdo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/papajdo/subscriptions","organizations_url":"https://api.github.com/users/papajdo/orgs","repos_url":"https://api.github.com/users/papajdo/repos","events_url":"https://api.github.com/users/papajdo/events{/privacy}","received_events_url":"https://api.github.com/users/papajdo/received_events","type":"User","site_admin":false},"parents":[{"sha":"a11158d51a359bd51af3df5b0e03d7cbb50f93d8","url":"https://api.github.com/repos/apache/openjpa/commits/a11158d51a359bd51af3df5b0e03d7cbb50f93d8","html_url":"https://github.com/apache/openjpa/commit/a11158d51a359bd51af3df5b0e03d7cbb50f93d8"}],"stats":{"total":278,"additions":278,"deletions":0},"files":[{"sha":"07a668043589c6b932c35934de1589a7816a7612","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestEntityManagerMethodsThrowAfterClose.java","status":"added","additions":278,"deletions":0,"changes":278,"blob_url":"https://github.com/apache/openjpa/blob/cde63a43060c630a4ec641d127ecccf05bb05384/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestEntityManagerMethodsThrowAfterClose.java","raw_url":"https://github.com/apache/openjpa/raw/cde63a43060c630a4ec641d127ecccf05bb05384/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestEntityManagerMethodsThrowAfterClose.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestEntityManagerMethodsThrowAfterClose.java?ref=cde63a43060c630a4ec641d127ecccf05bb05384","patch":"@@ -0,0 +1,278 @@\n+/*\n+ * Copyright 2006 The Apache Software Foundation.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.openjpa.persistence.simple;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import javax.persistence.FlushModeType;\n+import javax.persistence.LockModeType;\n+import javax.persistence.Persistence;\n+\n+import junit.framework.TestCase;\n+import junit.textui.TestRunner;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+\n+/**\n+ * Negative test case to verify that EntityManager throws required exceptions\n+ * after close.\n+ *\n+ * @author Craig Russell\n+ */\n+public class TestEntityManagerMethodsThrowAfterClose\n+    extends TestCase {\n+\n+    private EntityManagerFactory emf;\n+    private EntityManager em;\n+    private AllFieldTypes aft = new AllFieldTypes();\n+\n+    public void setUp() {\n+        Map props = new HashMap(System.getProperties());\n+        props.put(\"openjpa.MetaDataFactory\",\n+            \"jpa(Types=\" + AllFieldTypes.class.getName() + \")\");\n+        emf = Persistence.createEntityManagerFactory(\"test\", props);\n+        em = emf.createEntityManager();\n+        em.close();\n+    }\n+\n+    public void tearDown() {\n+        if (emf == null)\n+            return;\n+        try {\n+            EntityManager em = emf.createEntityManager();\n+            em.getTransaction().begin();\n+            em.createQuery(\"delete from AllFieldTypes\").executeUpdate();\n+            em.getTransaction().commit();\n+            em.close();\n+            emf.close();\n+        } catch (Exception e) {\n+        }\n+    }\n+    public void testPersistAfterClose() {\n+        try {\n+            em.persist(aft);\n+            fail(\"Expected exception not thrown \" +\n+                    \"when calling em.persist \" +\n+                    \"after calling em.close\");\n+        } catch (IllegalStateException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testMergeAfterClose() {\n+        try {\n+            em.merge(aft);\n+            fail(\"Expected exception not thrown \" +\n+                    \"when calling em.merge \" +\n+                    \"after calling em.close\");\n+        } catch (IllegalStateException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testRemoveAfterClose() {\n+        try {\n+            em.remove(aft);\n+            fail(\"Expected exception not thrown \" +\n+                    \"when calling em.remove \" +\n+                    \"after calling em.close\");\n+        } catch (IllegalStateException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testFindAfterClose() {\n+        try {\n+            em.find(AllFieldTypes.class, Integer.valueOf(1));\n+            fail(\"Expected exception not thrown \" +\n+                    \"when calling em.find \" +\n+                    \"after calling em.close\");\n+        } catch (IllegalStateException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testGetReferenceAfterClose() {\n+        try {\n+            em.getReference(AllFieldTypes.class, Integer.valueOf(1));\n+            fail(\"Expected exception not thrown \" +\n+                    \"when calling em.getReference \" +\n+                    \"after calling em.close\");\n+        } catch (IllegalStateException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testFlushAfterClose() {\n+        try {\n+            em.flush();\n+            fail(\"Expected exception not thrown \" +\n+                    \"when calling em.flush \" +\n+                    \"after calling em.close\");\n+        } catch (IllegalStateException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testSetFlushModeAfterClose() {\n+        try {\n+            em.setFlushMode(FlushModeType.AUTO);\n+            fail(\"Expected exception not thrown \" +\n+                    \"when calling em.setFlushMode \" +\n+                    \"after calling em.close\");\n+        } catch (IllegalStateException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testGetFlushModeAfterClose() {\n+        try {\n+            em.getFlushMode();\n+            fail(\"Expected exception not thrown \" +\n+                    \"when calling em.getFlushMode \" +\n+                    \"after calling em.close\");\n+        } catch (IllegalStateException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testLockAfterClose() {\n+        try {\n+            em.lock(aft, LockModeType.WRITE);\n+            fail(\"Expected exception not thrown \" +\n+                    \"when calling em.lock \" +\n+                    \"after calling em.close\");\n+        } catch (IllegalStateException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testRefreshAfterClose() {\n+        try {\n+            em.refresh(aft);\n+            fail(\"Expected exception not thrown \" +\n+                    \"when calling em.refresh \" +\n+                    \"after calling em.close\");\n+        } catch (IllegalStateException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testClearAfterClose() {\n+        try {\n+            em.clear();\n+            fail(\"Expected exception not thrown \" +\n+                    \"when calling em.clear \" +\n+                    \"after calling em.close\");\n+        } catch (IllegalStateException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testContainsAfterClose() {\n+        try {\n+            em.contains(aft);\n+            fail(\"Expected exception not thrown \" +\n+                    \"when calling em.contains \" +\n+                    \"after calling em.close\");\n+        } catch (IllegalStateException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testCreateQueryAfterClose() {\n+        try {\n+            em.createQuery(\"SELECT Object(aft) FROM AllFieldTypes aft\");\n+            fail(\"Expected exception not thrown \" +\n+                    \"when calling em.createQuery \" +\n+                    \"after calling em.close\");\n+        } catch (IllegalStateException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testCreateNamedQueryAfterClose() {\n+        try {\n+            em.createNamedQuery(\"NamedQuery\");\n+            fail(\"Expected exception not thrown \" +\n+                    \"when calling em.createNamedQuery \" +\n+                    \"after calling em.close\");\n+        } catch (IllegalStateException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testCreateNativeQueryAfterClose() {\n+        try {\n+            em.createNativeQuery(\"SELECT NOTHINK FROM NOBODYZ\");\n+            fail(\"Expected exception not thrown \" +\n+                    \"when calling em.createNativeQuery \" +\n+                    \"after calling em.close\");\n+        } catch (IllegalStateException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testCreateNativeQueryWithMappingAfterClose() {\n+        try {\n+            em.createNativeQuery(\"SELECT NOTHINK FROM NOBODYZ\", \n+                    AllFieldTypes.class);\n+            fail(\"Expected exception not thrown \" +\n+                    \"when calling em.createNativeQuery \" +\n+                    \"with Mapping after calling em.close\");\n+        } catch (IllegalStateException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testJoinTransactionAfterClose() {\n+        try {\n+            em.joinTransaction();\n+            fail(\"Expected exception not thrown \" +\n+                    \"when calling em.joinTransaction \" +\n+                    \"after calling em.close\");\n+        } catch (IllegalStateException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testGetDelegateAfterClose() {\n+        try {\n+            em.getDelegate();\n+            fail(\"Expected exception not thrown \" +\n+                    \"when calling em.getDelegate \" +\n+                    \"after calling em.close\");\n+        } catch (IllegalStateException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testCloseAfterClose() {\n+        try {\n+            em.close();\n+            fail(\"Expected exception not thrown when calling em.close \" +\n+                    \"after calling em.close\");\n+        } catch (IllegalStateException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(TestPersistence.class);\n+    }\n+}\n+"}]}

