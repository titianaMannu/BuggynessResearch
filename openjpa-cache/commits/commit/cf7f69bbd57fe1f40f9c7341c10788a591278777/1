{"sha":"cf7f69bbd57fe1f40f9c7341c10788a591278777","node_id":"MDY6Q29tbWl0MjA2MzY0OmNmN2Y2OWJiZDU3ZmUxZjQwZjljNzM0MWMxMDc4OGE1OTEyNzg3Nzc=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-09-18T21:53:47Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-09-18T21:53:47Z"},"message":"OPENJPA-1253: support non-default One-To-Many mappings\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@816795 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ccc8a41765af6242ebf9e80ce7f8e3ea8f012978","url":"https://api.github.com/repos/apache/openjpa/git/trees/ccc8a41765af6242ebf9e80ce7f8e3ea8f012978"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/cf7f69bbd57fe1f40f9c7341c10788a591278777","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/cf7f69bbd57fe1f40f9c7341c10788a591278777","html_url":"https://github.com/apache/openjpa/commit/cf7f69bbd57fe1f40f9c7341c10788a591278777","comments_url":"https://api.github.com/repos/apache/openjpa/commits/cf7f69bbd57fe1f40f9c7341c10788a591278777/comments","author":null,"committer":null,"parents":[{"sha":"946781881847f4dee118aa286f3dd788781913d9","url":"https://api.github.com/repos/apache/openjpa/commits/946781881847f4dee118aa286f3dd788781913d9","html_url":"https://github.com/apache/openjpa/commit/946781881847f4dee118aa286f3dd788781913d9"}],"stats":{"total":883,"additions":690,"deletions":193},"files":[{"sha":"919830d425c439490295178a13bcd8190bb5610b","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingRepository.java","status":"modified","additions":14,"deletions":6,"changes":20,"blob_url":"https://github.com/apache/openjpa/blob/cf7f69bbd57fe1f40f9c7341c10788a591278777/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingRepository.java","raw_url":"https://github.com/apache/openjpa/raw/cf7f69bbd57fe1f40f9c7341c10788a591278777/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingRepository.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingRepository.java?ref=cf7f69bbd57fe1f40f9c7341c10788a591278777","patch":"@@ -949,8 +949,17 @@ protected FieldStrategy handlerMapStrategy(FieldMapping field,\n      * field should use an inverse foreign key or an association table mapping.\n      */\n     private boolean useInverseKeyMapping(FieldMapping field) {\n+        OpenJPAConfiguration conf = field.getRepository().getConfiguration();\n+        boolean isNonDefaultMappingAllowed = field.getRepository().\n+            getMetaDataFactory().getDefaults().isNonDefaultMappingAllowed(conf);\n         FieldMapping mapped = field.getMappedByMapping();\n         if (mapped != null) {\n+            // JPA 2.0: non-default mapping: bi-/1-M/JoinTable ==> join table strategy\n+            FieldMappingInfo info = field.getMappingInfo();\n+            if (isNonDefaultMappingAllowed && \n+                field.getAssociationType() == FieldMetaData.ONE_TO_MANY && \n+                info.getTableName() != null) \n+                return false;\n             if (mapped.getTypeCode() == JavaTypes.PC)\n                 return true;\n             if (mapped.getElement().getTypeCode() == JavaTypes.PC)\n@@ -968,17 +977,16 @@ private boolean useInverseKeyMapping(FieldMapping field) {\n         boolean useInverseKeyMapping = info.getTableName() == null && info.getColumns().isEmpty()\n             && !elem.getValueInfo().getColumns().isEmpty();\n         \n-        OpenJPAConfiguration conf = field.getRepository().getConfiguration();\n-        boolean isNonDefaultMappingAllowed = field.getRepository().\n-            getMetaDataFactory().getDefaults().isNonDefaultMappingAllowed(conf);\n-        if (isNonDefaultMappingAllowed && field.getValueInfo().getColumns().size() > 0) {\n-            // uni-/M-1/joinColumn ==> useInverseKeyMapping (foreign key strategy)\n+        // JPA 2.0: non-default mapping: uni-/1-M/JoinColumn ==> foreign key strategy\n+        if (isNonDefaultMappingAllowed && \n+            field.getValueInfo().getColumns().size() > 0 &&\n+            field.getAssociationType() == FieldMetaData.ONE_TO_MANY) {\n             field.getElementMapping().getValueInfo().setColumns(field.getValueInfo().getColumns());\n             return true;\n         }\n         return useInverseKeyMapping;\n     }\n-\n+    \n     /**\n      * Check the given value against mapped strategies.\n      */"},{"sha":"0c46375ca5f64fcab698ff8c124f85229688c87f","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","status":"modified","additions":23,"deletions":13,"changes":36,"blob_url":"https://github.com/apache/openjpa/blob/cf7f69bbd57fe1f40f9c7341c10788a591278777/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/cf7f69bbd57fe1f40f9c7341c10788a591278777/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java?ref=cf7f69bbd57fe1f40f9c7341c10788a591278777","patch":"@@ -34,6 +34,7 @@\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.meta.Embeddable;\n import org.apache.openjpa.jdbc.meta.FieldMapping;\n+import org.apache.openjpa.jdbc.meta.FieldMappingInfo;\n import org.apache.openjpa.jdbc.meta.FieldStrategy;\n import org.apache.openjpa.jdbc.meta.Joinable;\n import org.apache.openjpa.jdbc.meta.MappingInfo;\n@@ -82,6 +83,7 @@\n         (RelationFieldStrategy.class);\n \n     private Boolean _fkOid = null;\n+    boolean _isBiOneToManyJoinTable = false;\n \n     public void map(boolean adapt) {\n         if (field.getTypeCode() != JavaTypes.PC || field.isEmbeddedPC())\n@@ -136,9 +138,9 @@ public void map(boolean adapt) {\n             return;\n         } else { // this could be the owner in a bi-directional relation\n             OpenJPAConfiguration conf = field.getRepository().getConfiguration();\n-            boolean isJoinColumnAllowedForToManyRelation = field.getRepository().\n-                getMetaDataFactory().getDefaults().isJoinColumnAllowedForToManyRelation(conf);\n-            if (isJoinColumnAllowedForToManyRelation) { \n+            boolean isNonDefaultMappingAllowed = field.getRepository().\n+                getMetaDataFactory().getDefaults().isNonDefaultMappingAllowed(conf);\n+            if (isNonDefaultMappingAllowed) { \n                 ClassMapping inverse = field.getValueMapping().getTypeMapping();\n                 FieldMapping[] fmds = inverse.getFieldMappings();\n                 for (int i = 0; i < fmds.length; i++) {\n@@ -147,10 +149,11 @@ public void map(boolean adapt) {\n                         if (typeCode == JavaTypes.ARRAY ||\n                             typeCode == JavaTypes.COLLECTION ||\n                             typeCode == JavaTypes.MAP) {\n-                            // this is a bi-directional oneToMany relation                         \n-                            ValueMappingInfo info = field.getValueInfo();\n-                            if (info.getColumns().size() == 0) \n-                                info.setColumns(fmds[i].getValueInfo().getColumns());\n+                            // this is a bi-directional oneToMany relation with\n+                            // @JoinTable annotation ==> join table strategy\n+                            // ==> should not mapped in the owner's table\n+                            FieldMappingInfo info = fmds[i].getMappingInfo();\n+                            _isBiOneToManyJoinTable = (info.getTableName() != null ? true : false);\n                         }\n                         break;\n                     }\n@@ -180,9 +183,11 @@ public void map(boolean adapt) {\n             if (field.getMappedByIdValue() != null) \n                 setMappedByIdColumns();            \n              \n-            ForeignKey fk = vinfo.getTypeJoin(field, field.getName(), true,\n-                adapt);\n-            field.setForeignKey(fk);\n+            if (!_isBiOneToManyJoinTable) {\n+                ForeignKey fk = vinfo.getTypeJoin(field, field.getName(), true,\n+                    adapt);\n+                field.setForeignKey(fk);\n+            }\n             field.setColumnIO(vinfo.getColumnIO());\n             if (vinfo.getJoinDirection() == vinfo.JOIN_INVERSE)\n                 field.setJoinDirection(field.JOIN_INVERSE);\n@@ -290,7 +295,8 @@ public void insert(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\n         else {\n             Row row = field.getRow(sm, store, rm, Row.ACTION_INSERT);\n             if (row != null) {\n-                field.setForeignKey(row, rel);\n+                if (!_isBiOneToManyJoinTable)\n+                    field.setForeignKey(row, rel);\n                 // this is for bi-directional maps, the key and value of the \n                 // map are stored in the table of the mapped-by entity  \n                 setMapKey(sm, rel, store, row);\n@@ -376,7 +382,8 @@ public void update(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\n                     Row.ACTION_DELETE : Row.ACTION_UPDATE;\n             Row row = field.getRow(sm, store, rm, action);\n             if (row != null) {\n-                field.setForeignKey(row, rel);\n+                if (!_isBiOneToManyJoinTable)\n+                    field.setForeignKey(row, rel);\n                 // this is for bi-directional maps, the key and value of the \n                 // map are stored in the table of the mapped-by entity  \n                 setMapKey(sm, rel, store, row);\n@@ -566,6 +573,9 @@ private void selectEagerParallel(Select sel, ClassMapping cls,\n \n     public void selectEagerJoin(Select sel, OpenJPAStateManager sm,\n         JDBCStore store, JDBCFetchConfiguration fetch, int eagerMode) {\n+        if (_isBiOneToManyJoinTable) \n+            return;\n+\n         // limit the eager mode to single on recursive eager fetching b/c\n         // at this point the select has been modified and an attempt to\n         // clone it for a to-many eager select can result in a clone that\n@@ -715,7 +725,7 @@ public void load(OpenJPAStateManager sm, JDBCStore store,\n         // get the related object's oid\n         ClassMapping relMapping = field.getTypeMapping();\n         Object oid = null;\n-        if (relMapping.isMapped()) {\n+        if (relMapping.isMapped() && !_isBiOneToManyJoinTable) { \n             oid = relMapping.getObjectId(store, res, field.getForeignKey(),\n                     field.getPolymorphic() != ValueMapping.POLY_FALSE, null);\n         } else {"},{"sha":"f7aa63a528201cfcadf8692ce0a4a2e468c8b730","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationToManyInverseKeyFieldStrategy.java","status":"modified","additions":8,"deletions":5,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/cf7f69bbd57fe1f40f9c7341c10788a591278777/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationToManyInverseKeyFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/cf7f69bbd57fe1f40f9c7341c10788a591278777/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationToManyInverseKeyFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationToManyInverseKeyFieldStrategy.java?ref=cf7f69bbd57fe1f40f9c7341c10788a591278777","patch":"@@ -108,11 +108,15 @@ protected Joins joinElementRelation(Joins joins, ClassMapping elem) {\n \n     public void map(boolean adapt) {\n         OpenJPAConfiguration conf = field.getRepository().getConfiguration();\n-        boolean isJoinColumnAllowedForToManyRelation = field.getRepository().\n-            getMetaDataFactory().getDefaults().isJoinColumnAllowedForToManyRelation(conf);\n-        if (!isJoinColumnAllowedForToManyRelation) \n+        boolean isNonDefaultMappingAllowed = field.getRepository().\n+            getMetaDataFactory().getDefaults().isNonDefaultMappingAllowed(conf);\n+        FieldMapping mapped = field.getMappedByMapping();\n+\n+        // JPA 2.0 allows non-default mapping: Uni-/1-M/@JoinColumn ==> foreign key strategy\n+        // Bi-/1-M/@JoinColumn should result in exception \n+        if (!isNonDefaultMappingAllowed || mapped != null) {\n             field.getValueInfo().assertNoSchemaComponents(field, !adapt);\n-        \n+        }\n         field.getKeyMapping().getValueInfo().assertNoSchemaComponents\n             (field.getKey(), !adapt);\n \n@@ -122,7 +126,6 @@ public void map(boolean adapt) {\n             throw new MetaDataException(_loc.get(\"not-elem-relation\", field));\n \n         // check for named inverse\n-        FieldMapping mapped = field.getMappedByMapping();\n         FieldMappingInfo finfo = field.getMappingInfo();\n         ValueMappingInfo vinfo = elem.getValueInfo();\n         boolean criteria = vinfo.getUseClassCriteria();"},{"sha":"ce402e73972c916bf630fd0e49d407420491c860","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationToManyTableFieldStrategy.java","status":"modified","additions":54,"deletions":34,"changes":88,"blob_url":"https://github.com/apache/openjpa/blob/cf7f69bbd57fe1f40f9c7341c10788a591278777/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationToManyTableFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/cf7f69bbd57fe1f40f9c7341c10788a591278777/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationToManyTableFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationToManyTableFieldStrategy.java?ref=cf7f69bbd57fe1f40f9c7341c10788a591278777","patch":"@@ -22,6 +22,7 @@\n import java.util.Collection;\n import java.util.Iterator;\n \n+import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n@@ -39,6 +40,7 @@\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n import org.apache.openjpa.kernel.StoreContext;\n import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.meta.FieldMetaData;\n import org.apache.openjpa.meta.JavaTypes;\n import org.apache.openjpa.util.ChangeTracker;\n import org.apache.openjpa.util.MetaDataException;\n@@ -53,6 +55,8 @@\n public abstract class RelationToManyTableFieldStrategy\n     extends StoreCollectionFieldStrategy {\n \n+    boolean _isBiOneToManyJoinTable = false;\n+\n     private static final Localizer _loc = Localizer.forPackage\n         (RelationToManyTableFieldStrategy.class);\n \n@@ -105,46 +109,62 @@ public void map(boolean adapt) {\n         FieldMapping mapped = field.getMappedByMapping();\n         ValueMappingInfo vinfo = elem.getValueInfo();\n         boolean criteria = vinfo.getUseClassCriteria();\n+\n+        OpenJPAConfiguration conf = field.getRepository().getConfiguration();\n+        boolean isNonDefaultMappingAllowed = field.getRepository().\n+            getMetaDataFactory().getDefaults().isNonDefaultMappingAllowed(conf);\n+        // Bi-directional oneToMany relation with\n+        // @JoinTable annotation ==> join table strategy\n+        // ==> should not mapped in the owner's table\n         if (mapped != null) {\n-            if (mapped.getElement().getTypeCode() != JavaTypes.PC)\n-                throw new MetaDataException(_loc.get(\"not-inv-relation-coll\",\n-                    field, mapped));\n-            field.getMappingInfo().assertNoSchemaComponents(field, !adapt);\n-            vinfo.assertNoSchemaComponents(elem, !adapt);\n-            mapped.resolve(mapped.MODE_META | mapped.MODE_MAPPING);\n-\n-            if (!mapped.isMapped() || mapped.isSerialized())\n-                throw new MetaDataException(_loc.get(\"mapped-by-unmapped\",\n-                    field, mapped));\n-\n-            field.setJoinForeignKey(mapped.getElementMapping().\n-                getForeignKey(field.getDefiningMapping()));\n-            elem.setForeignKey(mapped.getJoinForeignKey());\n-            elem.setUseClassCriteria(criteria);\n-            field.setOrderColumn(mapped.getOrderColumn());\n-            return;\n+            _isBiOneToManyJoinTable = \n+                field.getAssociationType() == FieldMetaData.ONE_TO_MANY &&\n+                field.getMappingInfo().getTableName() != null ? true : false;\n+        \n+            if (!isNonDefaultMappingAllowed || !_isBiOneToManyJoinTable) {\n+                // JPA 2.0: Bi-/OneToMany/@JoinTable ==> join table strategy is allowed\n+                if (mapped.getElement().getTypeCode() != JavaTypes.PC) {\n+                    throw new MetaDataException(_loc.get(\"not-inv-relation-coll\",\n+                            field, mapped));\n+                }\n+                field.getMappingInfo().assertNoSchemaComponents(field, !adapt);\n+                vinfo.assertNoSchemaComponents(elem, !adapt);\n+\n+                mapped.resolve(mapped.MODE_META | mapped.MODE_MAPPING);\n+                if (!mapped.isMapped() || mapped.isSerialized())\n+                    throw new MetaDataException(_loc.get(\"mapped-by-unmapped\",\n+                            field, mapped));\n+                field.setJoinForeignKey(mapped.getElementMapping().\n+                        getForeignKey(field.getDefiningMapping()));\n+                elem.setForeignKey(mapped.getJoinForeignKey());\n+                elem.setUseClassCriteria(criteria);\n+                field.setOrderColumn(mapped.getOrderColumn());\n+                return;\n+            }\n         }\n \n-        field.mapJoin(adapt, true);\n-        if (elem.getTypeMapping().isMapped()) {\n-            ForeignKey fk = vinfo.getTypeJoin(elem, \"element\", false, adapt);\n-            elem.setForeignKey(fk);\n-            elem.setColumnIO(vinfo.getColumnIO());\n-        } else\n-            RelationStrategies.mapRelationToUnmappedPC(elem, \"element\", adapt);\n-        elem.setUseClassCriteria(criteria);\n-        elem.mapConstraints(\"element\", adapt);\n-\n-        FieldMappingInfo finfo = field.getMappingInfo();\n-        Column orderCol = finfo.getOrderColumn(field, field.getTable(), adapt);\n-        field.setOrderColumn(orderCol);\n-        field.setOrderColumnIO(finfo.getColumnIO());\n-        field.mapPrimaryKey(adapt);\n+        if (mapped == null || (_isBiOneToManyJoinTable && isNonDefaultMappingAllowed)) {\n+            field.mapJoin(adapt, true);\n+            if (elem.getTypeMapping().isMapped()) {\n+                ForeignKey fk = vinfo.getTypeJoin(elem, \"element\", false, adapt);\n+                elem.setForeignKey(fk);\n+                elem.setColumnIO(vinfo.getColumnIO());\n+            } else\n+                RelationStrategies.mapRelationToUnmappedPC(elem, \"element\", adapt);\n+            elem.setUseClassCriteria(criteria);\n+            elem.mapConstraints(\"element\", adapt);\n+\n+            FieldMappingInfo finfo = field.getMappingInfo();\n+            Column orderCol = finfo.getOrderColumn(field, field.getTable(), adapt);\n+            field.setOrderColumn(orderCol);\n+            field.setOrderColumnIO(finfo.getColumnIO());\n+            field.mapPrimaryKey(adapt);\n+        }\n     }\n \n     public void insert(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\n         throws SQLException {\n-        if (field.getMappedBy() == null)\n+        if (field.getMappedBy() == null || _isBiOneToManyJoinTable) \n             insert(sm, rm, sm.fetchObject(field.getIndex()));\n     }\n \n@@ -175,7 +195,7 @@ private void insert(OpenJPAStateManager sm, RowManager rm, Object vals)\n \n     public void update(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\n         throws SQLException {\n-        if (field.getMappedBy() != null)\n+        if (field.getMappedBy() != null && !_isBiOneToManyJoinTable)\n             return;\n \n         Object obj = sm.fetchObject(field.getIndex());"},{"sha":"850d926bd128f1618f8b55441fae2005a073f8c9","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java","status":"modified","additions":0,"deletions":27,"changes":27,"blob_url":"https://github.com/apache/openjpa/blob/cf7f69bbd57fe1f40f9c7341c10788a591278777/openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java","raw_url":"https://github.com/apache/openjpa/raw/cf7f69bbd57fe1f40f9c7341c10788a591278777/openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java?ref=cf7f69bbd57fe1f40f9c7341c10788a591278777","patch":"@@ -63,7 +63,6 @@\n     private boolean _autoOff = true;\n     private boolean _superclassDiscriminatorStrategyByDefault = true;\n     private boolean _isAbstractMappingUniDirectional = false;\n-    private boolean _isJoinColumnAllowedForToManyRelation = false;\n     private boolean _isNonDefaultMappingAllowed = false;\n     \n     /**\n@@ -452,32 +451,6 @@ public boolean isAbstractMappingUniDirectional() {\n         return _isAbstractMappingUniDirectional;\n     }\n     \n-    /**\n-     * Whether OpenJPA allows JoinColumn annotation in conjunction with \n-     * OneToMany annotation.\n-     * Prior to OpenJPA 2.0, the JoinColumn annotation is not allowed for \n-     * is OneToMany relation. JPA 2.0 spec relaxes this restriction.\n-     * \n-     * @param isJoinColumnAllowedForToManyRelation true if JoinColumn is \n-     *        allowed for OneToMany relation\n-     * @since 2.0.0\n-     */\n-    public void setJoinColumnAllowedForToManyRelation(boolean isJoinColumnAllowedForToManyRelation) {\n-        _isJoinColumnAllowedForToManyRelation = isJoinColumnAllowedForToManyRelation;\n-    }\n-\n-    /**\n-     * Whether OpenJPA allows JoinColumn annotation in conjunction with \n-     * OneToMany annotation.\n-     * Prior to OpenJPA 2.0, the JoinColumn annotation is not allowed for \n-     * is OneToMany relation. JPA 2.0 spec relaxes this restriction. The\n-     * default value is false.\n-     * @since 2.0.0\n-     */\n-    public boolean isJoinColumnAllowedForToManyRelation() {\n-        return _isJoinColumnAllowedForToManyRelation;\n-    }\n-\n     /**\n      * Whether OpenJPA allows non-default entity relationship mapping. \n      * Prior to OpenJPA 2.0, the non-default entity relationship mapping"},{"sha":"19f96214074abb0ec31ac9a3883cdfa599ffadf2","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java","status":"modified","additions":16,"deletions":1,"changes":17,"blob_url":"https://github.com/apache/openjpa/blob/cf7f69bbd57fe1f40f9c7341c10788a591278777/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/cf7f69bbd57fe1f40f9c7341c10788a591278777/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java?ref=cf7f69bbd57fe1f40f9c7341c10788a591278777","patch":"@@ -114,6 +114,11 @@\n      * Constant specifying the management level of a field.\n      */\n     public static final int MANAGE_NONE = 0;\n+    \n+    public static final int ONE_TO_ONE = 1;\n+    public static final int ONE_TO_MANY = 2;\n+    public static final int MANY_TO_ONE = 3;\n+    public static final int MANY_TO_MANY = 4;\n \n     private static final Localizer _loc = Localizer.forPackage\n         (FieldMetaData.class);\n@@ -213,6 +218,7 @@\n     // indicate if this field is used by other field as \"order by\" value \n     private boolean _usedInOrderBy = false;\n     private boolean _isElementCollection = false;\n+    private int _associationType;\n \n     /**\n      * Constructor.\n@@ -2217,5 +2223,14 @@ public void setAccessType(int fCode) {\n     \tClassMetaData owner = getDeclaringMetaData();\n     \towner.mergeFieldAccess(this, fCode);\n         _access = fCode;\n-    }    \n+    }\n+    \n+    public int getAssociationType() {\n+        return _associationType;\n+    }\n+    \n+    public void setAssociationType(int type) {\n+        _associationType = type;\n+    }\n+    \n }"},{"sha":"082a5161e23d5a8306e8a1449e25d84f8f5e2bb9","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataDefaults.java","status":"modified","additions":0,"deletions":7,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/cf7f69bbd57fe1f40f9c7341c10788a591278777/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataDefaults.java","raw_url":"https://github.com/apache/openjpa/raw/cf7f69bbd57fe1f40f9c7341c10788a591278777/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataDefaults.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataDefaults.java?ref=cf7f69bbd57fe1f40f9c7341c10788a591278777","patch":"@@ -114,13 +114,6 @@ public Member getMemberByProperty(ClassMetaData meta, String attribute,\n      */\n     public boolean isAbstractMappingUniDirectional(OpenJPAConfiguration conf);\n     \n-    /**\n-     * Whether the JoinColumn annotation is allowed in conjunction with toMany\n-     * relation.  \n-     * @since 2.0.0\n-     */\n-    public boolean isJoinColumnAllowedForToManyRelation(OpenJPAConfiguration conf);\n-\n     /**\n      * Whether non-default mapping is allowed.\n      * @since 2.0.0"},{"sha":"e0246a132bdc99750298f309aaeca3a90dfcf636","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/NoneMetaDataFactory.java","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/cf7f69bbd57fe1f40f9c7341c10788a591278777/openjpa-kernel/src/main/java/org/apache/openjpa/meta/NoneMetaDataFactory.java","raw_url":"https://github.com/apache/openjpa/raw/cf7f69bbd57fe1f40f9c7341c10788a591278777/openjpa-kernel/src/main/java/org/apache/openjpa/meta/NoneMetaDataFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/NoneMetaDataFactory.java?ref=cf7f69bbd57fe1f40f9c7341c10788a591278777","patch":"@@ -163,10 +163,6 @@ public boolean isAbstractMappingUniDirectional(OpenJPAConfiguration conf) {\n         return false;\n     }\n     \n-    public boolean isJoinColumnAllowedForToManyRelation(OpenJPAConfiguration conf) {\n-        return false;\n-    }\n-    \n     public boolean isNonDefaultMappingAllowed(OpenJPAConfiguration conf) {\n         return false;\n     }"},{"sha":"dc5a35783d0923010433e5a4d64faaf9af60d327","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/Bi_1ToM_FK.java","status":"modified","additions":30,"deletions":7,"changes":37,"blob_url":"https://github.com/apache/openjpa/blob/cf7f69bbd57fe1f40f9c7341c10788a591278777/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/Bi_1ToM_FK.java","raw_url":"https://github.com/apache/openjpa/raw/cf7f69bbd57fe1f40f9c7341c10788a591278777/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/Bi_1ToM_FK.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/Bi_1ToM_FK.java?ref=cf7f69bbd57fe1f40f9c7341c10788a591278777","patch":"@@ -22,6 +22,13 @@\n \n import javax.persistence.*;\n \n+/**\n+ * This is the default bi-directional one-to-many mapping.\n+ * Foreign key strategy is used. \n+ * Exception is thrown if @JoinColumn is used in conjunction\n+ * with @OneToMany. \n+ * @author faywang\n+ */\n \n @Entity\n public class Bi_1ToM_FK {\n@@ -32,9 +39,9 @@\n \n     private String name;\n \n-    @OneToMany(mappedBy=\"bi1mfk\")\n-    @JoinColumn(name=\"Bi1MFK_ColA\")\n-    private List<EntityC> entityAs = null;\n+    @OneToMany(mappedBy=\"bi1mfk\", fetch=FetchType.EAGER)\n+    //@JoinColumn(name=\"Bi1MFK_ColC\") // should comment out\n+    private List<EntityC_B1MFK> entityCs = null;\n     \n     public long getId() { \n         return id; \n@@ -48,11 +55,27 @@ public void setName(String name) {\n         this.name = name; \n     }\n \n-    public List<EntityC> getEntityAs() { \n-        return entityAs; \n+    public List<EntityC_B1MFK> getEntityCs() { \n+        return entityCs; \n     }\n \n-    public void setEntityAs(List<EntityC> entityAs) { \n-        this.entityAs = entityAs; \n+    public void setEntityCs(List<EntityC_B1MFK> entityCs) { \n+        this.entityCs = entityCs; \n+    }\n+    \n+    public int hashCode() {\n+        return name.hashCode();\n+    }\n+    \n+    public boolean equals(Object o) {\n+        if (!(o instanceof Bi_1ToM_FK)) return false;\n+        Bi_1ToM_FK b = (Bi_1ToM_FK)o;\n+        if (!b.name.equals(name)) return false;\n+        if (b.entityCs.size() != entityCs.size()) return false;\n+        if (b.entityCs.size() == 1) {\n+            if (!b.entityCs.get(0).getName().equals(entityCs.get(0).getName()))\n+                return false;\n+        }\n+        return true;\n     }\n }"},{"sha":"0f08b5fae19edc5e8bf2bc63b75c219d3bdd72c2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/Bi_1ToM_JT.java","status":"added","additions":81,"deletions":0,"changes":81,"blob_url":"https://github.com/apache/openjpa/blob/cf7f69bbd57fe1f40f9c7341c10788a591278777/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/Bi_1ToM_JT.java","raw_url":"https://github.com/apache/openjpa/raw/cf7f69bbd57fe1f40f9c7341c10788a591278777/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/Bi_1ToM_JT.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/Bi_1ToM_JT.java?ref=cf7f69bbd57fe1f40f9c7341c10788a591278777","patch":"@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.compat;\n+\n+import java.util.List;\n+\n+import javax.persistence.*;\n+\n+\n+\n+@Entity\n+public class Bi_1ToM_JT {\n+\n+    @Id\n+    @GeneratedValue\n+    private long id;\n+\n+    private String name;\n+\n+    @OneToMany(mappedBy=\"bi1mjt\", fetch=FetchType.EAGER)\n+    @JoinTable(\n+        name=\"Bi1MJT_C\",\n+        joinColumns=\n+          @JoinColumn(name=\"C_ID\", referencedColumnName=\"ID\"),\n+          inverseJoinColumns=\n+          @JoinColumn(name=\"Bi1MJT_ID\", referencedColumnName=\"ID\")\n+    )\n+    private List<EntityC_B1MJT> entityCs = null;\n+    \n+    public long getId() { \n+        return id; \n+    }\n+\n+    public String getName() { \n+        return name; \n+    }\n+\n+    public void setName(String name) { \n+        this.name = name; \n+    }\n+\n+    public List<EntityC_B1MJT> getEntityCs() { \n+        return entityCs; \n+    }\n+\n+    public void setEntityCs(List<EntityC_B1MJT> entityCs) { \n+        this.entityCs = entityCs; \n+    }\n+\n+    public int hashCode() {\n+        return name.hashCode();\n+    }\n+    \n+    public boolean equals(Object o) {\n+        if (!(o instanceof Bi_1ToM_JT)) return false;\n+        Bi_1ToM_JT b = (Bi_1ToM_JT)o;\n+        if (!b.name.equals(name)) return false;\n+        if (b.entityCs.size() != entityCs.size()) return false;\n+        if (b.entityCs.size() == 1) {\n+            if (!b.entityCs.get(0).getName().equals(entityCs.get(0).getName()))\n+                return false;\n+        }\n+        return true;\n+    }\n+}"},{"sha":"d7227ee0a1e0c33c7ab4e058dd567eb0cd3fc1fd","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/EntityC.java","status":"modified","additions":1,"deletions":13,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/cf7f69bbd57fe1f40f9c7341c10788a591278777/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/EntityC.java","raw_url":"https://github.com/apache/openjpa/raw/cf7f69bbd57fe1f40f9c7341c10788a591278777/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/EntityC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/EntityC.java?ref=cf7f69bbd57fe1f40f9c7341c10788a591278777","patch":"@@ -21,11 +21,10 @@\n import javax.persistence.Entity;\n import javax.persistence.GeneratedValue;\n import javax.persistence.Id;\n-import javax.persistence.ManyToOne;\n import javax.persistence.Table;\n \n @Entity\n-@Table(name=\"JnCol_C\")\n+@Table(name=\"Compact_C\")\n public class EntityC {\n \n     @Id\n@@ -34,9 +33,6 @@\n \n     private String name;\n     \n-    @ManyToOne\n-    Bi_1ToM_FK bi1mfk;\n-\n     public long getId() { \n         return id; \n     }\n@@ -48,12 +44,4 @@ public String getName() {\n     public void setName(String name) { \n         this.name = name; \n     }\n-\n-    public void setBi1mfk(Bi_1ToM_FK bi1mfk) {\n-        this.bi1mfk = bi1mfk;\n-    }\n-    \n-    public Bi_1ToM_FK getBi1mfk() {\n-        return bi1mfk;\n-    }\n }"},{"sha":"788fffa2d4aac1f61d6d4e5fb3b9ce0c91a01313","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/EntityC_B1MFK.java","status":"added","additions":56,"deletions":0,"changes":56,"blob_url":"https://github.com/apache/openjpa/blob/cf7f69bbd57fe1f40f9c7341c10788a591278777/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/EntityC_B1MFK.java","raw_url":"https://github.com/apache/openjpa/raw/cf7f69bbd57fe1f40f9c7341c10788a591278777/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/EntityC_B1MFK.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/EntityC_B1MFK.java?ref=cf7f69bbd57fe1f40f9c7341c10788a591278777","patch":"@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.compat;\n+\n+\n+import javax.persistence.*;\n+\n+@Entity\n+public class EntityC_B1MFK {\n+\n+    @Id\n+    @GeneratedValue\n+    private long id;\n+\n+    private String name;\n+    \n+    @ManyToOne\n+    Bi_1ToM_FK bi1mfk;\n+\n+    public long getId() { \n+        return id; \n+    }\n+\n+    public String getName() { \n+        return name; \n+    }\n+\n+    public void setName(String name) { \n+        this.name = name; \n+    }\n+\n+    public void setBi1mfk(Bi_1ToM_FK bi1mfk) {\n+        this.bi1mfk = bi1mfk;\n+    }\n+    \n+    public Bi_1ToM_FK getBi1mfk() {\n+        return bi1mfk;\n+    }\n+\n+}"},{"sha":"967abc8d9141e409ca8233238e1266e6dc33b277","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/EntityC_B1MJT.java","status":"added","additions":55,"deletions":0,"changes":55,"blob_url":"https://github.com/apache/openjpa/blob/cf7f69bbd57fe1f40f9c7341c10788a591278777/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/EntityC_B1MJT.java","raw_url":"https://github.com/apache/openjpa/raw/cf7f69bbd57fe1f40f9c7341c10788a591278777/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/EntityC_B1MJT.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/EntityC_B1MJT.java?ref=cf7f69bbd57fe1f40f9c7341c10788a591278777","patch":"@@ -0,0 +1,55 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.compat;\n+\n+import javax.persistence.*;\n+\n+@Entity\n+public class EntityC_B1MJT {\n+\n+    @Id\n+    @GeneratedValue\n+    private long id;\n+\n+    private String name;\n+    \n+    @ManyToOne\n+    Bi_1ToM_JT bi1mjt;\n+\n+    public long getId() { \n+        return id; \n+    }\n+\n+    public String getName() { \n+        return name; \n+    }\n+\n+    public void setName(String name) { \n+        this.name = name; \n+    }\n+\n+    public void setBi1mjt(Bi_1ToM_JT bi1mjt) {\n+        this.bi1mjt = bi1mjt;\n+    }\n+    \n+    public Bi_1ToM_JT getBi1mjt() {\n+        return bi1mjt;\n+    }\n+    \n+}"},{"sha":"8dbd63e5d7a64624f9f471931b4a41bd600dbce0","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/EntityC_U1MFK.java","status":"added","additions":45,"deletions":0,"changes":45,"blob_url":"https://github.com/apache/openjpa/blob/cf7f69bbd57fe1f40f9c7341c10788a591278777/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/EntityC_U1MFK.java","raw_url":"https://github.com/apache/openjpa/raw/cf7f69bbd57fe1f40f9c7341c10788a591278777/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/EntityC_U1MFK.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/EntityC_U1MFK.java?ref=cf7f69bbd57fe1f40f9c7341c10788a591278777","patch":"@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.compat;\n+\n+\n+import javax.persistence.*;\n+\n+@Entity\n+public class EntityC_U1MFK {\n+\n+    @Id\n+    @GeneratedValue\n+    private long id;\n+\n+    private String name;\n+\n+    public long getId() { \n+        return id; \n+    }\n+\n+    public String getName() { \n+        return name; \n+    }\n+\n+    public void setName(String name) { \n+        this.name = name; \n+    }\n+\n+}"},{"sha":"4b76c26c3e85aba75789e985eeaca789e74cbb23","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/TestSpecCompatibilityOptions.java","status":"modified","additions":244,"deletions":42,"changes":286,"blob_url":"https://github.com/apache/openjpa/blob/cf7f69bbd57fe1f40f9c7341c10788a591278777/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/TestSpecCompatibilityOptions.java","raw_url":"https://github.com/apache/openjpa/raw/cf7f69bbd57fe1f40f9c7341c10788a591278777/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/TestSpecCompatibilityOptions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/TestSpecCompatibilityOptions.java?ref=cf7f69bbd57fe1f40f9c7341c10788a591278777","patch":"@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.compat;\n \n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n@@ -127,67 +128,253 @@ public void testMappedSuperClass() {\n         }\n     }\n \n-    /*\n-     * Per JPA 2.0, JoinColumn annotation is allowed on OneToMany relations.\n+    /**\n+     * Per JPA 2.0, the following one-to-many mappings are supported.\n+     * (1) uni-/OneToMany/foreign key strategy\n+     * (2) uni-/OneToMany/join table strategy (default)\n+     * (3) bi-/OneToMany/foreign key strategy (default)\n+     * (4) bi-/OneToMany/join table strategy\n+     * The JoinColumn and JoinTable annotations or corresponding XML \n+     * elements must be used to specify such non-default mappings\n+     * \n+     * For (1), the spec provides the following example (Sec 11.1.36):\n+     * Example 3: Unidirectional One-to-Many association using a foreign \n+     * key mapping:\n+     * In Customer class:\n+     * @OneToMany(orphanRemoval=true)\n+     * @JoinColumn(name=\"CUST_ID\") // join column is in table for Order\n+     * public Set<Order> getOrders() {return orders;}\n+     * \n+     * For (4), Bi-directional One-t-Many association using the join \n+     * table mapping:\n+     * In Customer class:\n+     * @OneToMany(mappedBy=\"customer\")\n+     * @JoinTable(\n+     *   name=\"Customer_Orders\",\n+     *   joinColumns=\n+     *     @JoinColumn(name=\"Order_ID\", referencedColumnName=\"ID\"),\n+     *    inverseJoinColumns=\n+     *     @JoinColumn(name=\"Cust_ID\", referencedColumnName=\"ID\")\n+     *  )\n+     *  public Set<Order> getOrders() {return orders;}\n+     *  \n+     *  Note that in this scenario, @JoinTable is required. Simply applying @JoinColumn \n+     *  without @JoinTable will result in an exception thrown by openjpa.\n+     * \n      */\n-    public void testJoinColumnOnToManyRelation() {\n+    public void testOneToManyRelation() {\n         List<Class<?>> types = new ArrayList<Class<?>>();\n         types.add(EntityC.class);\n+        types.add(EntityC_B1MFK.class);\n+        types.add(EntityC_B1MJT.class);\n+        types.add(EntityC_U1MFK.class);\n         types.add(Bi_1ToM_FK.class);\n+        types.add(Bi_1ToM_JT.class);\n         types.add(Uni_1ToM_FK.class);\n         types.add(Uni_1ToM_JT.class);\n-\n         OpenJPAEntityManagerFactorySPI emf = createEMF2_0(types);\n         EntityManager em = emf.createEntityManager();\n-\n+        \n         try {\n             // trigger table creation\n             em.getTransaction().begin();\n             em.getTransaction().commit();\n-            em.close();\n-            emf.close();\n-            if (!SQLSniffer.matches(sql, \"CREATE TABLE JnCol_C\", \"Bi1MFK_ColA\"))\n-                fail(\"JoinColumn annotation fails to be with OneToMany relation\");\n+            assertSQLFragnments(sql, \"CREATE TABLE Bi1MJT_C\", \"C_ID\", \"Bi1MJT_ID\");\n+            assertSQLFragnments(sql, \"CREATE TABLE EntityC_B1MFK\", \"BI1MFK_ID\");\n+            assertSQLFragnments(sql, \"CREATE TABLE Uni1MJT_C\", \"Uni1MJT_ID\", \"C_ID\");\n+            assertSQLFragnments(sql, \"CREATE TABLE EntityC_B1MFK\", \"BI1MFK_ID\");\n+            assertSQLFragnments(sql, \"CREATE TABLE EntityC_U1MFK\", \"Uni1MFK_ID\");\n+            crudUni1MFK(em);\n+            crudUni1MJT(em);\n+            crudBi1MFK(em);\n+            crudBi1MJT(em);\n         } catch (Exception e) {\n-            fail(\"JoinColumn annotation fails to be with OneToMany relation\");\n+            e.printStackTrace();\n+            fail(\"OneToMany mapping failed with exception message: \" + e.getMessage());\n+        } finally {\n+            em.close();\n+            emf.close();            \n         }\n     }\n+    \n+    // non default\n+    public void crudUni1MFK(EntityManager em) {\n+        //create\n+        Uni_1ToM_FK u = new Uni_1ToM_FK();\n+        u.setName(\"uni1mfk\");\n+        List<EntityC_U1MFK> cs = new ArrayList<EntityC_U1MFK>();\n+        EntityC_U1MFK c = new EntityC_U1MFK();\n+        c.setName(\"c\");\n+        cs.add(c);\n+        u.setEntityCs(cs);\n+        em.persist(u);\n+        em.persist(c);\n+        em.getTransaction().begin();\n+        em.getTransaction().commit();\n \n-    /*\n-     * Per JPA 2.0, non-default mapping of uni-directional OneToMany using\n-     * foreign key strategy is allowed.\n-     */\n-    public void testNonDefaultUniOneToManyRelationUsingForeignKey() {\n-        List<Class<?>> types = new ArrayList<Class<?>>();\n-        types.add(EntityC.class);\n-        types.add(Bi_1ToM_FK.class);\n-        types.add(Uni_1ToM_FK.class);\n-        types.add(Uni_1ToM_JT.class);\n-        OpenJPAEntityManagerFactorySPI emf = createEMF2_0(types);\n-        EntityManager em = emf.createEntityManager();\n+        //update\n+        em.getTransaction().begin();\n+        cs = u.getEntityCs();\n+        u.setName(\"newName\");\n+        EntityC_U1MFK c1 = new EntityC_U1MFK();\n+        c1.setName(\"c1\");\n+        cs.add(c1);\n+        em.persist(c1);\n+        em.getTransaction().commit();\n+        em.clear();\n         \n-        try {\n-            // trigger table creation\n-            Uni_1ToM_FK uni1mfk = new Uni_1ToM_FK();\n-            uni1mfk.setName(\"test\");\n-            EntityC c = new EntityC();\n-            c.setName(\"c\");\n-            List cs = new ArrayList();\n-            cs.add(c);\n-            uni1mfk.setEntityAs(cs);\n-            em.persist(uni1mfk);\n-            em.persist(c);\n-            em.getTransaction().begin();\n-            em.getTransaction().commit();\n-            em.close();\n-            emf.close();\n-            if (!SQLSniffer.matches(sql, \"CREATE TABLE JnCol_C\", \"Uni1MFK_ColA\"))\n-                fail(\"JoinColumn annotation fails to be with OneToMany relation\");\n-        } catch (Exception e) {\n-            fail(\"Non-default uni-directional OneToMany Using foreign key fails\");\n-        }\n+        //query\n+        Query q = em.createQuery(\"SELECT u FROM Uni_1ToM_FK u\");\n+        Uni_1ToM_FK u1 = (Uni_1ToM_FK)q.getSingleResult();\n+        assertEquals(u, u1);\n+        em.clear();\n+\n+        //find\n+        long id = u1.getId();\n+        Uni_1ToM_FK u2 = em.find(Uni_1ToM_FK.class, id);\n+        assertEquals(u, u2);\n+        \n+        //remove\n+        em.getTransaction().begin();\n+        em.remove(u2);\n+        em.getTransaction().commit();\n+        em.clear();\n+    }\n+    \n+    // default\n+    public void crudUni1MJT(EntityManager em) {\n+        Uni_1ToM_JT u = new Uni_1ToM_JT();\n+        u.setName(\"uni1mjt\");\n+        List<EntityC> cs = new ArrayList<EntityC>();\n+        EntityC c = new EntityC();\n+        c.setName(\"c\");\n+        cs.add(c);\n+        u.setEntityCs(cs);\n+        em.persist(u);\n+        em.persist(c);\n+        em.getTransaction().begin();\n+        em.getTransaction().commit();\n+        \n+        //update\n+        em.getTransaction().begin();\n+        cs = u.getEntityCs();\n+        u.setName(\"newName\");\n+        EntityC c1 = new EntityC();\n+        c1.setName(\"c1\");\n+        cs.add(c1);\n+        em.persist(c1);\n+        em.getTransaction().commit();\n+        em.clear();\n+        \n+        //query\n+        Query q = em.createQuery(\"SELECT u FROM Uni_1ToM_JT u\");\n+        Uni_1ToM_JT u1 = (Uni_1ToM_JT)q.getSingleResult();\n+        assertEquals(u, u1);\n+        em.clear();\n+\n+        //find\n+        long id = u1.getId();\n+        Uni_1ToM_JT u2 = em.find(Uni_1ToM_JT.class, id);\n+        assertEquals(u, u2);\n+        \n+        //remove\n+        em.getTransaction().begin();\n+        em.remove(u2);\n+        em.getTransaction().commit();\n+        em.clear();\n+    }\n+    \n+    //default\n+    public void crudBi1MFK(EntityManager em) {\n+        Bi_1ToM_FK b = new Bi_1ToM_FK();\n+        b.setName(\"bi1mfk\");\n+        List<EntityC_B1MFK> cs = new ArrayList<EntityC_B1MFK>();\n+        EntityC_B1MFK c = new EntityC_B1MFK();\n+        c.setName(\"c\");\n+        c.setBi1mfk(b);\n+        cs.add(c);\n+        b.setEntityCs(cs);\n+        em.persist(b);\n+        em.persist(c);\n+        em.getTransaction().begin();\n+        em.getTransaction().commit();\n+        \n+        //update\n+        em.getTransaction().begin();\n+        cs = b.getEntityCs();\n+        b.setName(\"newName\");\n+        EntityC_B1MFK c1 = new EntityC_B1MFK();\n+        c1.setName(\"c1\");\n+        cs.add(c1);\n+        c1.setBi1mfk(b);\n+        em.persist(c1);\n+        em.getTransaction().commit();\n+        em.clear();\n+        \n+        //query\n+        Query q = em.createQuery(\"SELECT u FROM Bi_1ToM_FK u\");\n+        Bi_1ToM_FK b1 = (Bi_1ToM_FK)q.getSingleResult();\n+        assertEquals(b, b1);\n+        em.clear();\n+\n+        //find\n+        long id = b1.getId();\n+        Bi_1ToM_FK b2 = em.find(Bi_1ToM_FK.class, id);\n+        assertEquals(b, b2);\n+        \n+        //remove\n+        em.getTransaction().begin();\n+        em.remove(b2);\n+        em.getTransaction().commit();\n+        em.clear();\n     }\n \n+    // non default\n+    public void crudBi1MJT(EntityManager em) {\n+        Bi_1ToM_JT b = new Bi_1ToM_JT();\n+        b.setName(\"bi1mfk\");\n+        List<EntityC_B1MJT> cs = new ArrayList<EntityC_B1MJT>();\n+        EntityC_B1MJT c = new EntityC_B1MJT();\n+        c.setName(\"c\");\n+        c.setBi1mjt(b);\n+        cs.add(c);\n+        b.setEntityCs(cs);\n+        em.persist(b);\n+        em.persist(c);\n+        em.getTransaction().begin();\n+        em.getTransaction().commit();\n+\n+        //update\n+        em.getTransaction().begin();\n+        cs = b.getEntityCs();\n+        b.setName(\"newName\");\n+        EntityC_B1MJT c1 = new EntityC_B1MJT();\n+        c1.setName(\"c1\");\n+        cs.add(c1);\n+        c1.setBi1mjt(b);\n+        em.persist(c1);\n+        em.getTransaction().commit();\n+        em.clear();\n+        \n+        //query\n+        Query q = em.createQuery(\"SELECT u FROM Bi_1ToM_JT u\");\n+        Bi_1ToM_JT b1 = (Bi_1ToM_JT)q.getSingleResult();\n+        assertEquals(b, b1);\n+        em.clear();\n+\n+        //find\n+        long id = b1.getId();\n+        Bi_1ToM_JT b2 = em.find(Bi_1ToM_JT.class, id);\n+        assertEquals(b, b2);\n+        \n+        //remove\n+        em.getTransaction().begin();\n+        em.remove(b2);\n+        em.getTransaction().commit();\n+        em.clear();\n+    }\n+    \n+\n     private OpenJPAEntityManagerFactorySPI createEMF2_0(List<Class<?>> types) {\n         Map<Object,Object> map = new HashMap<Object,Object>();\n         map.put(\"openjpa.jdbc.JDBCListeners\", \n@@ -213,6 +400,21 @@ private OpenJPAEntityManagerFactorySPI createEMF2_0(List<Class<?>> types) {\n                     \"persistence_2_0.xml\", map);        \n     }\n     \n+    void assertSQLFragnments(List<String> list, String... keys) {\n+        if (SQLSniffer.matches(list, keys))\n+            return;\n+        fail(\"None of the following \" + sql.size() + \" SQL \\r\\n\" + \n+                toString(sql) + \"\\r\\n contains all keys \\r\\n\"\n+                + toString(Arrays.asList(keys)));\n+    }\n+\n+    public String toString(List<String> list) {\n+        StringBuffer buf = new StringBuffer();\n+        for (String s : list)\n+            buf.append(s).append(\"\\r\\n\");\n+        return buf.toString();\n+    }\n+\n     public class Listener extends AbstractJDBCListener {\n         @Override\n         public void beforeExecuteStatement(JDBCEvent event) {"},{"sha":"3a2ec6f69c7656ef24115696c49d88c71038c0ac","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/Uni_1ToM_FK.java","status":"modified","additions":30,"deletions":14,"changes":44,"blob_url":"https://github.com/apache/openjpa/blob/cf7f69bbd57fe1f40f9c7341c10788a591278777/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/Uni_1ToM_FK.java","raw_url":"https://github.com/apache/openjpa/raw/cf7f69bbd57fe1f40f9c7341c10788a591278777/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/Uni_1ToM_FK.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/Uni_1ToM_FK.java?ref=cf7f69bbd57fe1f40f9c7341c10788a591278777","patch":"@@ -22,13 +22,13 @@\n \n import javax.persistence.*;\n \n-//non-default mapping\n-//Sec 11.1.36, Example 3: \n-//    Unidirectional One-to-Many association using a foreign key mapping\n-//    In Customer class:\n-//    @OneToMany(orphanRemoval=true)\n-//    @JoinColumn(name=\"CUST_ID\") // join column is in table for Order\n-//    public Set<Order> getOrders() {return orders;}\n+/**\n+ * This is the non-default uni-directional one-to-many mapping.\n+ * Foreign key strategy is used. \n+ * @JoinColumn is required for this strategy (see Spec 11.1.36, Ex 3)\n+ * with @OneToMany. \n+ * @author faywang\n+ */\n \n @Entity\n public class Uni_1ToM_FK {\n@@ -39,9 +39,9 @@\n \n     private String name;\n \n-    @OneToMany\n-    @JoinColumn(name=\"Uni1MFK_ColA\")\n-    private List<EntityC> entityAs = null;\n+    @OneToMany(fetch=FetchType.EAGER)\n+    @JoinColumn(name=\"Uni1MFK_ID\")\n+    private List<EntityC_U1MFK> entityCs = null;\n     \n     public long getId() { \n         return id; \n@@ -55,11 +55,27 @@ public void setName(String name) {\n         this.name = name; \n     }\n \n-    public List<EntityC> getEntityAs() { \n-        return entityAs; \n+    public List<EntityC_U1MFK> getEntityCs() { \n+        return entityCs; \n+    }\n+\n+    public void setEntityCs(List<EntityC_U1MFK> entityCs) { \n+        this.entityCs = entityCs; \n     }\n \n-    public void setEntityAs(List<EntityC> entityAs) { \n-        this.entityAs = entityAs; \n+    public int hashCode() {\n+        return name.hashCode();\n+    }\n+    \n+    public boolean equals(Object o) {\n+        if (!(o instanceof Uni_1ToM_FK)) return false;\n+        Uni_1ToM_FK b = (Uni_1ToM_FK)o;\n+        if (!b.name.equals(name)) return false;\n+        if (b.entityCs.size() != entityCs.size()) return false;\n+        if (b.entityCs.size() == 1) {\n+            if (!b.entityCs.get(0).getName().equals(entityCs.get(0).getName()))\n+                return false;\n+        }\n+        return true;\n     }\n }"},{"sha":"d5e2857a7f0abc725b6da1de0aca7e00a7a6a364","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/Uni_1ToM_JT.java","status":"modified","additions":29,"deletions":7,"changes":36,"blob_url":"https://github.com/apache/openjpa/blob/cf7f69bbd57fe1f40f9c7341c10788a591278777/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/Uni_1ToM_JT.java","raw_url":"https://github.com/apache/openjpa/raw/cf7f69bbd57fe1f40f9c7341c10788a591278777/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/Uni_1ToM_JT.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/Uni_1ToM_JT.java?ref=cf7f69bbd57fe1f40f9c7341c10788a591278777","patch":"@@ -22,6 +22,12 @@\n \n import javax.persistence.*;\n \n+/**\n+ * This is the default uni-directional one-to-many mapping.\n+ * Join table strategy is used. \n+ *  \n+ * @author faywang\n+ */\n \n @Entity\n public class Uni_1ToM_JT {\n@@ -32,15 +38,15 @@\n \n     private String name;\n \n-    @OneToMany\n+    @OneToMany(fetch=FetchType.EAGER)\n     @JoinTable(\n-            name=\"Uni_1TOM_JT_C\",\n+            name=\"Uni1MJT_C\",\n             joinColumns=\n             @JoinColumn(name=\"Uni1MJT_ID\", referencedColumnName=\"ID\"),\n             inverseJoinColumns=\n             @JoinColumn(name=\"C_ID\", referencedColumnName=\"ID\")\n             )    \n-    private List<EntityC> entityAs = null;\n+    private List<EntityC> entityCs = null;\n     \n     public long getId() { \n         return id; \n@@ -54,11 +60,27 @@ public void setName(String name) {\n         this.name = name; \n     }\n \n-    public List<EntityC> getEntityAs() { \n-        return entityAs; \n+    public List<EntityC> getEntityCs() { \n+        return entityCs; \n+    }\n+\n+    public void setEntityCs(List<EntityC> entityAs) { \n+        this.entityCs = entityAs; \n     }\n \n-    public void setEntityAs(List<EntityC> entityAs) { \n-        this.entityAs = entityAs; \n+    public int hashCode() {\n+        return name.hashCode();\n+    }\n+    \n+    public boolean equals(Object o) {\n+        if (!(o instanceof Uni_1ToM_JT)) return false;\n+        Uni_1ToM_JT b = (Uni_1ToM_JT)o;\n+        if (!b.name.equals(name)) return false;\n+        if (b.entityCs.size() != entityCs.size()) return false;\n+        if (b.entityCs.size() == 1) {\n+            if (!b.entityCs.get(0).getName().equals(entityCs.get(0).getName()))\n+                return false;\n+        }\n+        return true;\n     }\n }"},{"sha":"7be335c4f4e865668723f61429df92d1f971d43a","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/cf7f69bbd57fe1f40f9c7341c10788a591278777/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/cf7f69bbd57fe1f40f9c7341c10788a591278777/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java?ref=cf7f69bbd57fe1f40f9c7341c10788a591278777","patch":"@@ -1386,6 +1386,7 @@ private void parseManyToOne(FieldMetaData fmd, ManyToOne anno) {\n         if (anno.targetEntity() != void.class)\n             fmd.setTypeOverride(anno.targetEntity());\n         setCascades(fmd, anno.cascade());\n+        fmd.setAssociationType(FieldMetaData.MANY_TO_ONE);\n     }\n \n     /**\n@@ -1410,6 +1411,7 @@ private void parseOneToOne(FieldMetaData fmd, OneToOne anno) {\n             fmd.setTypeOverride(anno.targetEntity());\n         setCascades(fmd, anno.cascade());\n         setOrphanRemoval(fmd, anno.orphanRemoval());\n+        fmd.setAssociationType(FieldMetaData.ONE_TO_ONE);\n     }\n \n     /**\n@@ -1450,6 +1452,7 @@ private void parseOneToMany(FieldMetaData fmd, OneToMany anno) {\n             fmd.getElement().setDeclaredType(anno.targetEntity());\n         setCascades(fmd.getElement(), anno.cascade());\n         setOrphanRemoval(fmd.getElement(), anno.orphanRemoval());\n+        fmd.setAssociationType(FieldMetaData.ONE_TO_MANY);\n     }\n \n     /**\n@@ -1474,6 +1477,7 @@ private void parseManyToMany(FieldMetaData fmd, ManyToMany anno) {\n         if (anno.targetEntity() != void.class)\n             fmd.getElement().setDeclaredType(anno.targetEntity());\n         setCascades(fmd.getElement(), anno.cascade());\n+        fmd.setAssociationType(FieldMetaData.MANY_TO_MANY);\n     }\n \n     /**"},{"sha":"784377ce24f98f7ed0ffe246e77e13f82135e3e7","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataDefaults.java","status":"modified","additions":0,"deletions":12,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/cf7f69bbd57fe1f40f9c7341c10788a591278777/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataDefaults.java","raw_url":"https://github.com/apache/openjpa/raw/cf7f69bbd57fe1f40f9c7341c10788a591278777/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataDefaults.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataDefaults.java?ref=cf7f69bbd57fe1f40f9c7341c10788a591278777","patch":"@@ -132,7 +132,6 @@\n     protected GetterFilter getterFilter = new GetterFilter();\n     protected SetterFilter setterFilter = new SetterFilter();\n     private Boolean _isAbstractMappingUniDirectional = null;\n-    private Boolean _isJoinColumnAllowedForToManyRelation = null;\n     private Boolean _isNonDefaultMappingAllowed = null;\n     \n     public PersistenceMetaDataDefaults() {\n@@ -875,17 +874,6 @@ public void setAbstractMappingUniDirectional(OpenJPAConfiguration conf) {\n         _isAbstractMappingUniDirectional = conf.getCompatibilityInstance().isAbstractMappingUniDirectional();\n     }\n     \n-    public boolean isJoinColumnAllowedForToManyRelation(OpenJPAConfiguration conf) {\n-        if (_isJoinColumnAllowedForToManyRelation == null)\n-            setJoinColumnAllowedForToManyRelation(conf);\n-        return _isJoinColumnAllowedForToManyRelation;\n-    }\n-    \n-    public void setJoinColumnAllowedForToManyRelation(OpenJPAConfiguration conf) {\n-        _isJoinColumnAllowedForToManyRelation = conf.getCompatibilityInstance().\n-            isJoinColumnAllowedForToManyRelation();\n-    }\n-\n     public boolean isNonDefaultMappingAllowed(OpenJPAConfiguration conf) {\n         if (_isNonDefaultMappingAllowed == null)\n             setNonDefaultMappingAllowed(conf);"},{"sha":"79fb186072165159225cf7e1f57a21b066841372","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/cf7f69bbd57fe1f40f9c7341c10788a591278777/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java","raw_url":"https://github.com/apache/openjpa/raw/cf7f69bbd57fe1f40f9c7341c10788a591278777/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java?ref=cf7f69bbd57fe1f40f9c7341c10788a591278777","patch":"@@ -186,7 +186,6 @@ public boolean afterSpecificationSet(Configuration c) {\n             conf.validationMode.set(String.valueOf(ValidationMode.NONE));\n         } else {\n             compatibility.setAbstractMappingUniDirectional(true);\n-            compatibility.setJoinColumnAllowedForToManyRelation(true);\n             compatibility.setNonDefaultMappingAllowed(true);\n         }\n         return true;"}]}

