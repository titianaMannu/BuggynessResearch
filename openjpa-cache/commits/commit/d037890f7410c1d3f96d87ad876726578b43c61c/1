{"sha":"d037890f7410c1d3f96d87ad876726578b43c61c","node_id":"MDY6Q29tbWl0MjA2MzY0OmQwMzc4OTBmNzQxMGMxZDNmOTZkODdhZDg3NjcyNjU3OGI0M2M2MWM=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-02-16T20:00:38Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-02-16T20:00:38Z"},"message":"OPENJPA-1515: Make CacheStatistics configurable.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@910667 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"422c6493231f88f4a5cec57ab42e316390a8ddab","url":"https://api.github.com/repos/apache/openjpa/git/trees/422c6493231f88f4a5cec57ab42e316390a8ddab"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/d037890f7410c1d3f96d87ad876726578b43c61c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/d037890f7410c1d3f96d87ad876726578b43c61c","html_url":"https://github.com/apache/openjpa/commit/d037890f7410c1d3f96d87ad876726578b43c61c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/d037890f7410c1d3f96d87ad876726578b43c61c/comments","author":null,"committer":null,"parents":[{"sha":"d82add658d2dd767680978e038501895005a3eb3","url":"https://api.github.com/repos/apache/openjpa/commits/d82add658d2dd767680978e038501895005a3eb3","html_url":"https://github.com/apache/openjpa/commit/d82add658d2dd767680978e038501895005a3eb3"}],"stats":{"total":140,"additions":96,"deletions":44},"files":[{"sha":"9eab145edc70f2d3495e66b2bde9cc12133ecbc6","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/AbstractDataCache.java","status":"modified","additions":23,"deletions":9,"changes":32,"blob_url":"https://github.com/apache/openjpa/blob/d037890f7410c1d3f96d87ad876726578b43c61c/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/AbstractDataCache.java","raw_url":"https://github.com/apache/openjpa/raw/d037890f7410c1d3f96d87ad876726578b43c61c/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/AbstractDataCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/AbstractDataCache.java?ref=d037890f7410c1d3f96d87ad876726578b43c61c","patch":"@@ -19,12 +19,10 @@\n package org.apache.openjpa.datacache;\n \n import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.BitSet;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.HashMap;\n-import java.util.HashSet;\n import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n@@ -40,8 +38,6 @@\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.lib.util.concurrent.AbstractConcurrentEventManager;\n \n-import serp.util.Strings;\n-\n /**\n  * Abstract {@link DataCache} implementation that provides various\n  * statistics, logging, and timeout functionality common across cache\n@@ -82,6 +78,14 @@ public String getName() {\n     public void setName(String name) {\n         _name = name;\n     }\n+    public void setEnableStatistics(boolean enable){\n+        if(enable == true){\n+            stats.enable();\n+        }\n+    }\n+    public void getEnableStatistics(){\n+        stats.isEnabled();\n+    }\n \n     public String getEvictionSchedule() {\n         return _schedule;\n@@ -131,7 +135,9 @@ public void commit(Collection<DataCachePCData> additions, Collection<DataCachePC\n \n     public boolean contains(Object key) {\n         DataCachePCData o = getInternal(key);\n-        stats.newGet(o == null ? null : o.getType(), o != null);\n+        if (stats.isEnabled()) {\n+            stats.newGet(o == null ? null : o.getType(), o != null);\n+        }\n         if (o != null && o.isTimedOut()) {\n             o = null;\n             removeInternal(key);\n@@ -167,7 +173,9 @@ public DataCachePCData get(Object key) {\n             else\n                 log.trace(s_loc.get(\"cache-hit\", key));\n         }\n-        stats.newGet((o == null) ? null : o.getType(), o != null);\n+        if (stats.isEnabled()) {\n+            stats.newGet((o == null) ? null : o.getType(), o != null);\n+        }\n         return o;\n     }\n \n@@ -183,7 +191,9 @@ public DataCachePCData get(Object key) {\n     }\n \n     public DataCachePCData put(DataCachePCData data) {\n-        stats.newPut(data.getType());\n+        if (stats.isEnabled()) {\n+            stats.newPut(data.getType());\n+        }\n         DataCachePCData o = putInternal(data.getId(), data);\n         if (log.isTraceEnabled())\n             log.trace(s_loc.get(\"cache-put\", data.getId()));\n@@ -192,7 +202,9 @@ public DataCachePCData put(DataCachePCData data) {\n \n     public void update(DataCachePCData data) {\n         if (recacheUpdates()) {\n-            stats.newPut(data.getType());\n+            if (stats.isEnabled()) {\n+                stats.newPut(data.getType());\n+            }\n             putInternal(data.getId(), data);\n         }\n     }\n@@ -381,7 +393,9 @@ protected abstract DataCachePCData putInternal(Object oid,\n      */\n     protected void putAllInternal(Collection<DataCachePCData> pcs) {\n         for (DataCachePCData pc : pcs) {\n-            stats.newPut(pc.getType());\n+            if (stats.isEnabled()) {\n+                stats.newPut(pc.getType());\n+            }\n             putInternal(pc.getId(), pc);\n         }\n     }"},{"sha":"bb4d9ce26b96e05cfa7d5ad0613f8bd313038225","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/CacheStatistics.java","status":"modified","additions":16,"deletions":1,"changes":17,"blob_url":"https://github.com/apache/openjpa/blob/d037890f7410c1d3f96d87ad876726578b43c61c/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/CacheStatistics.java","raw_url":"https://github.com/apache/openjpa/raw/d037890f7410c1d3f96d87ad876726578b43c61c/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/CacheStatistics.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/CacheStatistics.java?ref=d037890f7410c1d3f96d87ad876726578b43c61c","patch":"@@ -118,6 +118,11 @@\n \t */\n \tpublic void reset();\n \t\n+\t/**\n+\t * Returns whether or not statistics will be collected.\n+\t */\n+\tpublic boolean isEnabled();\n+\t\n \t/**\n \t * A default implementation.\n \t *\n@@ -129,7 +134,8 @@\n         private Map<Class, long[]> astats = new HashMap<Class, long[]>();\n \t\tprivate Date start = new Date();\n \t\tprivate Date since = new Date();\n-\n+\t\tprivate boolean enabled = false;\n+\t\t\n \t\tprivate static final int READ  = 0;\n \t\tprivate static final int HIT   = 1;\n \t\tprivate static final int WRITE = 2;\n@@ -201,6 +207,15 @@ public void reset() {\n \t\t\tsince = new Date();\n \t\t}\n \n+\t\tpublic boolean isEnabled() {\n+\t\t    return enabled;\n+\t\t}\n+\t\tvoid enable(){\n+\t\t    enabled = true;\n+\t\t}\n+\t      void disable() {\n+            enabled = false;\n+        }\n \t\tvoid newGet(Class cls, boolean hit) {\n \t\t\tcls = (cls == null) ? Object.class : cls;\n \t\t\taddSample(cls, READ);"},{"sha":"f45afafebfdeadbdf3eb98ecd26aba975b4a3865","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestStatistics.java","status":"modified","additions":43,"deletions":33,"changes":76,"blob_url":"https://github.com/apache/openjpa/blob/d037890f7410c1d3f96d87ad876726578b43c61c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestStatistics.java","raw_url":"https://github.com/apache/openjpa/raw/d037890f7410c1d3f96d87ad876726578b43c61c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestStatistics.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestStatistics.java?ref=d037890f7410c1d3f96d87ad876726578b43c61c","patch":"@@ -18,6 +18,8 @@\n  */\n package org.apache.openjpa.persistence.datacache;\n \n+import java.util.Arrays;\n+\n import javax.persistence.EntityManager;\n \n import org.apache.openjpa.datacache.CacheStatistics;\n@@ -40,9 +42,8 @@\n     private StoreCache cache;\n     CacheStatistics stats;\n     public void setUp() {\n-        \n         super.setUp(CLEAR_TABLES, CachedPerson.class,\n-                \"openjpa.DataCache\", \"true\",\n+                \"openjpa.DataCache\", \"true(EnableStatistics=true)\",\n                 \"openjpa.QueryCache\", \"true\",\n                 \"openjpa.RemoteCommitProvider\", \"sjvm\");\n         cache = emf.getStoreCache();\n@@ -51,36 +52,57 @@ public void setUp() {\n         assertNotNull(stats);\n         em = emf.createEntityManager();\n         \n-        if (person == null) {\n-            person = createData();\n-        }\n+        person = createData();\n         stats.reset();\n         em.clear();\n     }\n     \n-    public CachedPerson createData() {\n-        em.getTransaction().begin();\n-        CachedPerson p = new CachedPerson();\n-        p.setId((int)System.currentTimeMillis());\n-        em.persist(p);\n-        em.getTransaction().commit();\n-        return p;\n+    /**\n+     * Test that the CacheStatistics is disabled by default.\n+     */\n+    public void testDefaultSettings() {\n+        Object[] props = {\"openjpa.DataCache\", \"true\", \"openjpa.RemoteCommitProvider\", \"sjvm\"};\n+        OpenJPAEntityManagerFactory emf1 = createNamedEMF(\"second-persistence-unit\", props);\n+        \n+        assertFalse(emf1.getStoreCache().getStatistics().isEnabled());\n     }\n     \n     /**\n      * Finding an entity from a clean should hit the L2 cache.\n      */\n     public void testFind() {\n+        assertTrue(cache.getStatistics().isEnabled());\n         Object pid = person.getId();\n-        int N = 0;\n-        for (int i = 0; i < N; i++) {\n-            assertCached(person, pid, !L1Cached, L2Cached);\n-            long[] before = snapshot();\n-            CachedPerson p = em.find(CachedPerson.class, pid);\n-            long[] after = snapshot();\n-            assertDelta(before, after, 1, 1, 0); //READ:1 HIT:1, WRITE:0\n-            assertCached(p, pid, L1Cached, L2Cached);\n-        }\n+        assertCached(person, pid, !L1Cached, L2Cached);\n+        \n+        long[] before = snapshot();\n+        CachedPerson p = em.find(CachedPerson.class, pid);\n+        long[] after = snapshot();\n+\n+        assertDelta(before, after, 1, 1, 0); // READ:1 HIT:1, WRITE:0\n+        assertCached(p, pid, L1Cached, L2Cached);\n+\n+    }\n+    \n+    public void testMultipleUnits() {\n+        String[] props = {\"openjpa.DataCache\", \"true\", \"openjpa.RemoteCommitProvider\", \"sjvm\"};\n+        OpenJPAEntityManagerFactory emf1 = createNamedEMF(\"test\", props);\n+        OpenJPAEntityManagerFactory emf2 = createNamedEMF(\"empty-pu\", props);\n+        assertNotSame(emf1, emf2);\n+        assertNotSame(emf1.getStoreCache(), emf2.getStoreCache());\n+        assertNotSame(emf1.getStoreCache().getStatistics(), emf2.getStoreCache().getStatistics());\n+        assertNotSame(((StoreCacheImpl)emf1.getStoreCache()).getDelegate(), \n+                ((StoreCacheImpl)emf2.getStoreCache()).getDelegate());\n+        \n+    }\n+    \n+    CachedPerson createData() {\n+        em.getTransaction().begin();\n+        CachedPerson p = new CachedPerson();\n+        p.setId((int)System.currentTimeMillis());\n+        em.persist(p);\n+        em.getTransaction().commit();\n+        return p;\n     }\n     \n     /**\n@@ -121,16 +143,4 @@ void print(String msg, CacheStatistics stats) {\n         System.err.println(msg + stats + \" H:\" + stats.getHitCount() + \" R:\" + stats.getReadCount() + \" W:\" + \n                 stats.getWriteCount());\n     }\n-    \n-    public void testMultipleUnits() {\n-        String[] props = {\"openjpa.DataCache\", \"true\", \"openjpa.RemoteCommitProvider\", \"sjvm\"};\n-        OpenJPAEntityManagerFactory emf1 = createNamedEMF(\"test\", props);\n-        OpenJPAEntityManagerFactory emf2 = createNamedEMF(\"empty-pu\", props);\n-        assertNotSame(emf1, emf2);\n-        assertNotSame(emf1.getStoreCache(), emf2.getStoreCache());\n-        assertNotSame(emf1.getStoreCache().getStatistics(), emf2.getStoreCache().getStatistics());\n-        assertNotSame(((StoreCacheImpl)emf1.getStoreCache()).getDelegate(), \n-                ((StoreCacheImpl)emf2.getStoreCache()).getDelegate());\n-        \n-    }\n }"},{"sha":"a1a9018823447915965499f70278cebdf1d85bf5","filename":"openjpa-project/src/doc/manual/ref_guide_caching.xml","status":"modified","additions":14,"deletions":1,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/d037890f7410c1d3f96d87ad876726578b43c61c/openjpa-project/src/doc/manual/ref_guide_caching.xml","raw_url":"https://github.com/apache/openjpa/raw/d037890f7410c1d3f96d87ad876726578b43c61c/openjpa-project/src/doc/manual/ref_guide_caching.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_caching.xml?ref=d037890f7410c1d3f96d87ad876726578b43c61c","patch":"@@ -550,7 +550,17 @@ oem.evict(changedMag);  // will evict from data cache also\n data cache is available via \n <ulink url=\"../javadoc/org/apache/openjpa/datacache/CacheStatistics.html\">\n <classname>org.apache.openjpa.datacache.CacheStatistics</classname></ulink> \n-interface. You can access this statistics via StoreCache \n+interface. The collection of cache statistics is disabled by default and needs to be enabled on a per cache basis. By default\n+all counts returned from the CacheStatistics interface will return 0.\n+        <example id=\"ref_guide_cache_enablestats\">\n+                <title>\n+                    Configuring CacheStatistics\n+                </title>\n+                <programlisting>\n+&lt;property name=\"openjpa.DataCache\" value=\"true(EnableStatistics=true)\"/&gt;\n+</programlisting>\n+        </example>\n+Once cache statistics are enabled you can access them via StoreCache \n <programlisting>\n import org.apache.openjpa.datacache.CacheStatistics;\n ...\n@@ -587,6 +597,9 @@ public interface org.apache.openjpa.datacache.CacheStatistics extends java.io.Se\n     \n     // Resets the statistics. \n     public void reset();\n+    \n+    // Returns whether or not statistics will be collected.\n+    public boolean isEnabled();\n }\n </programlisting>\n Collecting per-class statistics depends on determining the runtime type of a"}]}

