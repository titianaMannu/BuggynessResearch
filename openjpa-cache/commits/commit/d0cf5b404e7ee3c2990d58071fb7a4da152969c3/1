{"sha":"d0cf5b404e7ee3c2990d58071fb7a4da152969c3","node_id":"MDY6Q29tbWl0MjA2MzY0OmQwY2Y1YjQwNGU3ZWUzYzI5OTBkNTgwNzFmYjdhNGRhMTUyOTY5YzM=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-10-29T14:27:32Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-10-29T14:27:32Z"},"message":"Doc for metamodel generation\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@830961 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6166a1c475d236c1fe78661c46b6cff9d30f1017","url":"https://api.github.com/repos/apache/openjpa/git/trees/6166a1c475d236c1fe78661c46b6cff9d30f1017"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/d0cf5b404e7ee3c2990d58071fb7a4da152969c3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/d0cf5b404e7ee3c2990d58071fb7a4da152969c3","html_url":"https://github.com/apache/openjpa/commit/d0cf5b404e7ee3c2990d58071fb7a4da152969c3","comments_url":"https://api.github.com/repos/apache/openjpa/commits/d0cf5b404e7ee3c2990d58071fb7a4da152969c3/comments","author":null,"committer":null,"parents":[{"sha":"a24efc3c55573341ec0cd31e0637946370310e2e","url":"https://api.github.com/repos/apache/openjpa/commits/a24efc3c55573341ec0cd31e0637946370310e2e","html_url":"https://github.com/apache/openjpa/commit/a24efc3c55573341ec0cd31e0637946370310e2e"}],"stats":{"total":133,"additions":101,"deletions":32},"files":[{"sha":"de6e91b72ec9d66269ee9ef4da0ec322ada3e244","filename":"openjpa-project/src/doc/manual/jpa_overview_criteria.xml","status":"modified","additions":101,"deletions":32,"changes":133,"blob_url":"https://github.com/apache/openjpa/blob/d0cf5b404e7ee3c2990d58071fb7a4da152969c3/openjpa-project/src/doc/manual/jpa_overview_criteria.xml","raw_url":"https://github.com/apache/openjpa/raw/d0cf5b404e7ee3c2990d58071fb7a4da152969c3/openjpa-project/src/doc/manual/jpa_overview_criteria.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/jpa_overview_criteria.xml?ref=d0cf5b404e7ee3c2990d58071fb7a4da152969c3","patch":"@@ -40,7 +40,7 @@\n     <para>\n     JPA 2.0 Specification introduces a new API to define queries dynamically\n     via construction of an object-based \n-    <classname>javax.persistence.QueryDefinition</classname> instance, rather\n+    <classname>javax.persistence.CriteriaQuery</classname> instance, rather\n     than string-based approach used in JPQL (Java Persistence Query Language).\n     This dynamic query definition capability, referred as Criteria API, is \n     based on the abstract persistent schema of the entities, their embedded\n@@ -51,68 +51,72 @@\n     </para>\n     \n     <section>\n-    \t<title>Constructing a QueryDefinition</title>\n+    \t<title>Constructing a CriteriaQuery</title>\n     \t<para>\n-    \tThe QueryBuilder interface is the factory for QueryDefinition. A\n-    \tQueryBuilder is obtained from either the EntityManagerFactory or \n-    \tthe EntityManager as follows:\n+    \tThe CriteriaBuilder interface is the factory for CriteriaQuery. A\n+    \tCriteriaBuilder is obtained from either an EntityManagerFactory or \n+    \tan EntityManager as follows:\n     \t<programlisting>\n EntityManager em = ... ; \n-QueryBuilder queryBuilder = em.getQueryBuilder();\n-QueryDefinition qdef = queryBuilder.createQueryDefinition();\n+CriteriaBuilder queryBuilder = em.getCriteriaBuilder();\n+CriteriaQuery qdef = queryBuilder.createCriteriaQuery();\n     \t</programlisting>\n     \tThe first step in constructing a query definition is specification of \n     \tquery roots.  Query roots specify the domain objects on which the query \n-    \tis evaluated. Query root is an instance of the DomainObject interface. A\n-    \tquery root is added to a QueryDefinition by \n+    \tis evaluated. Query root is an instance of the Root&lt;T&gt; interface. A\n+    \tquery root is added to a CriteriaQuery by \n     \t<methodname>addRoot(Class c)</methodname> method.\n     \t<programlisting>\n-    \tDomainObject customer = qdef.addRoot(Customer.class);\n-    \t</programlisting>\n-    \tOften a query definition has a single root, so the \n-    \tQueryBuilder interface allows to construct and add\n-    \ta root via a single method.\n-    \t<programlisting>\n-DomainObject customer = queryBuilder.createQueryDefinition(Customer.class);    \t\n+    \tRoot&lt;Customer&gt; customer = qdef.from(Customer.class);\n     \t</programlisting>\n     \tA query domain can be further refined by joining to other domain objects.\n     \tFor example, for the above query definition to operate over customers \n     \tand their orders, use <methodname>join(String attribute)</methodname>:\n \t\t<programlisting>\n-DomainObject order = customer.join(\"orders\");\n+Root&lt;Order&gt; order = customer.join(customer.get(Customer_.orders));\n \t\t</programlisting>  \n+\t\twhere Customer_.orders represent a field of canonical metamodel class for Customer.\n+\t\tThese canonical metamodel classes are generated during compilation by processing\n+\t\tthe persistent annotation in the source code of Customer.java.\n+\t\t</para>\n+\t\t<para>\n \t\tThe condition of a query definition is set via \n \t\t<methodname>where(Predicate p)</methodname> where the argument \n \t\tdesignates a conditional predicate. Conditional predicates are often\n \t\tcomposed of one or more comparisons between the attribute values of\n \t\tthe domain objects and some variable. For example, to select the\n-\t\tCustomers whose name is <emphasis>John Doe</emphasis> and has \n+\t\tCustomer whose name is <emphasis>\"John Doe\"</emphasis> and has \n \t\torders that are not yet delivered, you can build the predicate and set  \n \t\tit to the query definition as:\n \t\t<programlisting>\n-qdef.where(customer.get(\"name\").equal(\"John Doe\")\n-      .and(order.get(\"status\").equal(OrderStatus.DELIVERED).not()));\n+           qdef.where(customer.get(Customer_.name).equal(\"John Doe\")\n+               .and(order.get(Order_.status).equal(OrderStatus.DELIVERED).not()));\n \t\t</programlisting>\n \t\tThe <methodname>select()</methodname> method defines the result of the\n \t\tquery. If left unspecified, the select projection is assumed to be the\n \t\troot domain object. However, you can specify the selected projections\n \t\texplicitly as a list:\n \t\t<programlisting>\n-qdef.select(customer.get(\"name\"), order.get(\"status\"));\n+            qdef.select(customer.get(Customer_.name), order.get(Order_.status));\n \t\t</programlisting>\n-\t\tAn attribute of a domain object is specified by navigating via \n+    \t</para>\n+    \t\n+    \t<para>\n+    \tAn attribute of a domain object can also be specified by navigating via \n \t\t<methodname>get(String attr)</methodname>. The attribute \n \t\t<emphasis>should</emphasis> refer\n \t\tto a valid persistent property of the receiving domain object, however\n \t\tno such validation is enforced during the construction of the query \n \t\tdefinition. All validation is deferred until the query is actually executed.\n+\t\tOn the other hand, using canonical metamodel for path navigate enforces\n+\t\tcompile type checking. \n     \t</para>\n     </section> \n     \n     <section>\n-    <title>Executing a QueryDefinition</title>\n+    <title>Executing a CriteriaQuery</title>\n     <para>\n-    A QueryDefinition is executed in a similar fashion of a string-based JPQL\n+    A CriteriaQuery is executed in a similar fashion of a string-based JPQL\n     query via the EntityManager and Query interfaces.\n     <programlisting>\n EntityManager em = ...\n@@ -126,31 +130,96 @@ List result = query.getResultList();\n     </para>\n     \n     <para>\n-    The JPA 2.0 Specification on Criteria API is evolving and hence for an\n-    up-to-date version of the API, please consult the  \n+    The JPA 2.0 Specification on Criteria API can be found at \n     <ulink url=\"http://jcp.org/aboutJava/communityprocess/pr/jsr317/index.html\">\n     public draft</ulink>.\n     </para>\n+    <para>\n+    \n+    <ulink url=\"http://www.ibm.com/developerworks/java/library/j-typesafejpa/\">A developerworks article</ulink>\n+    explains details and further usage of Criteria API and its OpenJPA extensions.  \n+    </para>\n     </section>\n     \n     <section>\n     <title>Extension to Criteria API</title>\n     <para>\n     Criteria API has provided an alternative means to string-based JPQL to \n     execute a query. However, JPA 2.0 Specification has not explicitly specified \n-    any equivalence between a dynamically constructed QueryDefinition and\n-    a JPQL string. OpenJPA provides a mechanism to convert a QueryDefinition to\n-    an equivalent JPQL query string via the extended OpenJPAQueryBuilder API.\n+    any equivalence between a dynamically constructed CriteriaQuery and\n+    a JPQL string. OpenJPA provides a mechanism to convert a CriteriaQuery to\n+    an equivalent JPQL query string via the extended OpenJPACriteriaQuery API.\n     <programlisting>\n-    \tpublic interface OpenJPAQueryBuilder extends QueryBuilder {\n+    \tpublic interface OpenJPACriteriaQuery extends CriteriaQuery {\n \t\t/**\n-\t \t * Gets equivalent JPQL String for the given QueryDefinition.\n+\t \t * Gets equivalent JPQL String for the given CriteriaQuery.\n  \t\t*/\n-\t\tpublic String toJPQL(QueryDefinition qdef);\n+\t\tpublic String toCQL();\n \t}\n \t</programlisting>\n     \n     </para>\n     </section>\n+    \n+    <section>\n+       <title>Generation of Canonical MetaModel classes</title>\n+       <para>\n+Annotation processing tool generates source code for a metamodel class given \n+the annotated source code of persistent entity. \n+This tool is invoked during compilation for JDK6 compiler if OpenJPA and JPA \n+libraries are specified in the compiler <code>-processorpath</code> option.\n+    <programlisting>\n+ $ javac -processorpath path/to/openjpa-all.jar mypackage/MyEntity.java\n+    </programlisting>\n+will generate source code for canonical meta-featureSelection class <code>mypackage.MyEntity_.java</code>.\n+      </para>\n+      \n+      <para>\n+The Annotation Processor recognizes the following options (none of them are mandatory):\n+    <itemizedlist>\n+        <listitem>\n+\t\t\t<para>\n+              -Alog=TRACE|INFO|WARN|ERROR : The logging level. Default is <code>WARN</code>.\n+            </para>\n+        </listitem>\n+        <listitem>\n+\t\t\t<para>\n+             -Asource=&lt;n&gt; : where &lt;n&gt; denotes the integral number for Java source \n+             version of the generated code. Default is <code>6</code>.\n+             </para>\n+        </listitem>\n+        <listitem>\n+\t\t\t<para>\n+               -Anaming=class name : fully-qualified name of a class implementing \n+               <code>org.apache.openjpa.meta.MetaDataFactory</code> that determines\n+the name of a meta-class given the name of the original persistent Java entity class. Defaults to\n+<code>org.apache.openjpa.persistence.PersistenceMetaDataFactory</code> which appends a underscore character\n+(<code>_</code>) to the original Java class name. \n+             </para>\n+        </listitem>\n+        <listitem>\n+\t\t\t<para>\n+               -Aheader=&lt;url&gt; : A url whose content will appear as comment header to the generated file(s). \n+               Recognizes special value <code>ASL</code> for Apache Source License header as comment. \n+               By default, adds a OpenJPA proprietary text as comment block.\n+             </para>\n+        </listitem>\n+        <listitem>\n+\t\t\t<para>\n+              -Aout=dir : A directory in the local file system. The generated files will be written \n+              <emphasis>relative</emphasis> to this directory according to the package structure i.e. if <code>dir</code> \n+              is specified as <code>/myproject/generated-src</code> then the generated source code will be \n+              written to <code>/myproject/generated-src/mypackage/MyEntity_.java</code>.\n+              If this option is not specified, then an attempt will be made to write the generated source file \n+              in the same directory of the source code of original class <code>mypackage.MyEntity</code>. \n+              The source code location for <code>mypackage.MyEntity</code> can only be determined for Sun JDK6 \n+              and when <code>tools.jar</code> being available to the compiler classpath. If the source code \n+              location for the original class can not be determined, and the option is not specified, then the \n+              generated source code is written relative to the current directory according to the package structure.  \n+             </para>\n+        </listitem>\n+    </itemizedlist>\n+       </para>\n+    </section>\n \n </chapter>"}]}

