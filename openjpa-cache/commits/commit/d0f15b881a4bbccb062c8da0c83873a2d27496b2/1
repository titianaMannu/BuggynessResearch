{"sha":"d0f15b881a4bbccb062c8da0c83873a2d27496b2","node_id":"MDY6Q29tbWl0MjA2MzY0OmQwZjE1Yjg4MWE0YmJjY2IwNjJjOGRhMGM4Mzg3M2EyZDI3NDk2YjI=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2006-08-24T05:13:20Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2006-08-24T05:13:20Z"},"message":"Modified to ignore p-aware classes.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@434303 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"24a43bf127ddff32ac625951e21eeec31162ad51","url":"https://api.github.com/repos/apache/openjpa/git/trees/24a43bf127ddff32ac625951e21eeec31162ad51"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/d0f15b881a4bbccb062c8da0c83873a2d27496b2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/d0f15b881a4bbccb062c8da0c83873a2d27496b2","html_url":"https://github.com/apache/openjpa/commit/d0f15b881a4bbccb062c8da0c83873a2d27496b2","comments_url":"https://api.github.com/repos/apache/openjpa/commits/d0f15b881a4bbccb062c8da0c83873a2d27496b2/comments","author":null,"committer":null,"parents":[{"sha":"6e262960ae1b0d3a853a25dc514ab208afe139bc","url":"https://api.github.com/repos/apache/openjpa/commits/6e262960ae1b0d3a853a25dc514ab208afe139bc","html_url":"https://github.com/apache/openjpa/commit/6e262960ae1b0d3a853a25dc514ab208afe139bc"}],"stats":{"total":42,"additions":26,"deletions":16},"files":[{"sha":"6def4b5bfd308daf78de1648abc2b435589e3660","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingTool.java","status":"modified","additions":26,"deletions":16,"changes":42,"blob_url":"https://github.com/apache/openjpa/blob/d0f15b881a4bbccb062c8da0c83873a2d27496b2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingTool.java","raw_url":"https://github.com/apache/openjpa/raw/d0f15b881a4bbccb062c8da0c83873a2d27496b2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingTool.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingTool.java?ref=d0f15b881a4bbccb062c8da0c83873a2d27496b2","patch":"@@ -51,7 +51,14 @@\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.lib.util.Options;\n import org.apache.openjpa.lib.util.Services;\n-import org.apache.openjpa.meta.*;\n+import org.apache.openjpa.meta.ClassMetaData;\n+import org.apache.openjpa.meta.FieldMetaData;\n+import org.apache.openjpa.meta.JavaTypes;\n+import org.apache.openjpa.meta.MetaDataFactory;\n+import org.apache.openjpa.meta.MetaDataModes;\n+import org.apache.openjpa.meta.QueryMetaData;\n+import org.apache.openjpa.meta.SequenceMetaData;\n+import org.apache.openjpa.meta.ValueStrategies;\n import org.apache.openjpa.util.GeneralException;\n import org.apache.openjpa.util.InternalException;\n import org.apache.openjpa.util.MetaDataException;\n@@ -636,7 +643,9 @@ private void add(Class cls) {\n \n         _flush = true;\n         _flushSchema = true;\n-        getMapping(cls);\n+        MappingRepository repos = getRepository();\n+        repos.setStrategyInstaller(new MappingStrategyInstaller(repos));\n+        getMapping(repos, cls);\n     }\n \n     /**\n@@ -673,7 +682,9 @@ private void refresh(Class cls) {\n \n         _flush = true;\n         _flushSchema = true;\n-        getMapping(cls);\n+        MappingRepository repos = getRepository();\n+        repos.setStrategyInstaller(new RefreshStrategyInstaller(repos));\n+        getMapping(repos, cls);\n     }\n \n     /**\n@@ -685,7 +696,9 @@ private void validate(Class cls) {\n \n         _flushSchema = !SCHEMA_ACTION_NONE.equals(_schemaAction)\n             && !SchemaTool.ACTION_ADD.equals(_schemaAction);\n-        getMapping(cls);\n+        MappingRepository repos = getRepository();\n+        repos.setStrategyInstaller(new RuntimeStrategyInstaller(repos));\n+        getMapping(repos, cls);\n     }\n \n     /**\n@@ -696,7 +709,9 @@ private void buildSchema(Class cls) {\n             return;\n \n         _flushSchema = true;\n-        if (!getMapping(cls))\n+        MappingRepository repos = getRepository();\n+        repos.setStrategyInstaller(new RuntimeStrategyInstaller(repos));\n+        if (!getMapping(repos, cls))\n         \treturn;\n \n         // set any logical pks to non-logical so they get flushed\n@@ -727,21 +742,19 @@ private void buildSchema(Class cls) {\n      * \n      * @return true if the mapping of the class is found, false otherwise.\n      */\n-    boolean getMapping(Class cls) {\n-    \tMappingRepository repos = getRepository();\n-    \trepos.setStrategyInstaller(new RuntimeStrategyInstaller(repos));\n+    boolean getMapping(MappingRepository repos, Class cls) {\n     \ttry {\n     \t\trepos.getMapping(cls, null, true);\n     \t} catch (MetaDataException mex) {\n     \t\tif (!mex.isFatal()) {\n-    \t\t\tif (_log != null && _log.isWarnEnabled()) {\n-    \t\t\t\t_log.warn(_loc.get(\"no-mapping-aware\",cls));\n-    \t\t\t}\n-    \t\t\treturn false;\n+\t\t\t\tif (_log != null && _log.isWarnEnabled()) {\n+\t\t\t\t\t_log.warn(_loc.get(\"no-mapping-aware\",cls));\n+\t\t\t\t}\n+\t\t\t\treturn false;\n     \t\t} else {\n     \t\t\tthrow mex;\n     \t\t}\n-    \t}\n+\t    }\n     \treturn true;\n     }\n     /**\n@@ -993,9 +1006,6 @@ public static boolean run(JDBCConfiguration conf, String[] args,\n                 parsed = classParser.parseTypes(args[i]);\n                 classes.addAll(Arrays.asList(parsed));\n             }\n-            PersistenceAwareClass[] pawares = conf.getMappingRepositoryInstance().getPersistenceAwareClasses();\n-            for (int i=0; i<pawares.length; i++)\n-            \tclasses.remove(pawares[i].getDescribedType());\n         }\n \n         Class[] act = (Class[]) classes.toArray(new Class[classes.size()]);"}]}

