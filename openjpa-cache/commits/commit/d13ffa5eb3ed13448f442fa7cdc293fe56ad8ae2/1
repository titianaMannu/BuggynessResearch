{"sha":"d13ffa5eb3ed13448f442fa7cdc293fe56ad8ae2","node_id":"MDY6Q29tbWl0MjA2MzY0OmQxM2ZmYTVlYjNlZDEzNDQ4ZjQ0MmZhN2NkYzI5M2ZlNTZhZDhhZTI=","commit":{"author":{"name":"Mark Struberg","email":"struberg@apache.org","date":"2015-03-16T21:45:43Z"},"committer":{"name":"Mark Struberg","email":"struberg@apache.org","date":"2015-03-16T21:45:43Z"},"message":"OPENJPA-2335 only handle key columns very restrictive\n\nThere is no reason to forbid updates to other Columns like OrderColumn, etc\nPorted over from 2.3.x\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1667136 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ade6b506fb2be26f210d7e0117c272c2d29b1d77","url":"https://api.github.com/repos/apache/openjpa/git/trees/ade6b506fb2be26f210d7e0117c272c2d29b1d77"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/d13ffa5eb3ed13448f442fa7cdc293fe56ad8ae2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/d13ffa5eb3ed13448f442fa7cdc293fe56ad8ae2","html_url":"https://github.com/apache/openjpa/commit/d13ffa5eb3ed13448f442fa7cdc293fe56ad8ae2","comments_url":"https://api.github.com/repos/apache/openjpa/commits/d13ffa5eb3ed13448f442fa7cdc293fe56ad8ae2/comments","author":{"login":"struberg","id":79310,"node_id":"MDQ6VXNlcjc5MzEw","avatar_url":"https://avatars.githubusercontent.com/u/79310?v=4","gravatar_id":"","url":"https://api.github.com/users/struberg","html_url":"https://github.com/struberg","followers_url":"https://api.github.com/users/struberg/followers","following_url":"https://api.github.com/users/struberg/following{/other_user}","gists_url":"https://api.github.com/users/struberg/gists{/gist_id}","starred_url":"https://api.github.com/users/struberg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/struberg/subscriptions","organizations_url":"https://api.github.com/users/struberg/orgs","repos_url":"https://api.github.com/users/struberg/repos","events_url":"https://api.github.com/users/struberg/events{/privacy}","received_events_url":"https://api.github.com/users/struberg/received_events","type":"User","site_admin":false},"committer":{"login":"struberg","id":79310,"node_id":"MDQ6VXNlcjc5MzEw","avatar_url":"https://avatars.githubusercontent.com/u/79310?v=4","gravatar_id":"","url":"https://api.github.com/users/struberg","html_url":"https://github.com/struberg","followers_url":"https://api.github.com/users/struberg/followers","following_url":"https://api.github.com/users/struberg/following{/other_user}","gists_url":"https://api.github.com/users/struberg/gists{/gist_id}","starred_url":"https://api.github.com/users/struberg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/struberg/subscriptions","organizations_url":"https://api.github.com/users/struberg/orgs","repos_url":"https://api.github.com/users/struberg/repos","events_url":"https://api.github.com/users/struberg/events{/privacy}","received_events_url":"https://api.github.com/users/struberg/received_events","type":"User","site_admin":false},"parents":[{"sha":"3b49efddcccf63248f5e2ddfaa7a3241c0c78a72","url":"https://api.github.com/repos/apache/openjpa/commits/3b49efddcccf63248f5e2ddfaa7a3241c0c78a72","html_url":"https://github.com/apache/openjpa/commit/3b49efddcccf63248f5e2ddfaa7a3241c0c78a72"}],"stats":{"total":90,"additions":69,"deletions":21},"files":[{"sha":"fd041522f88765d16973abe2cbe9de716fbb9eca","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PrimaryRow.java","status":"modified","additions":28,"deletions":21,"changes":49,"blob_url":"https://github.com/apache/openjpa/blob/d13ffa5eb3ed13448f442fa7cdc293fe56ad8ae2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PrimaryRow.java","raw_url":"https://github.com/apache/openjpa/raw/d13ffa5eb3ed13448f442fa7cdc293fe56ad8ae2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PrimaryRow.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PrimaryRow.java?ref=d13ffa5eb3ed13448f442fa7cdc293fe56ad8ae2","patch":"@@ -331,43 +331,50 @@ protected void setObject(Column col, Object val, int metaType,\n         boolean overrideDefault)\n         throws SQLException {\n         // make sure we're not setting two different values\n-    \t// unless the given column is an implicit relationship and value\n-    \t// changes from logical default to non-default\n+        // unless the given column is an implicit relationship and value\n+        // changes from logical default to non-default\n         Object prev = getSet(col);\n         if (prev != null) {\n             if (prev == NULL)\n                 prev = null;\n             if (!rowValueEquals(prev, val)) {\n-            \tif (isDefaultValue(prev) || allowsUpdate(col, prev, val)) {\n-            \t\tsuper.setObject(col, val, metaType, overrideDefault);\n-            \t} else if (!isDefaultValue(prev)) {\n-            \t\tthrow new InvalidStateException(_loc.get(\"diff-values\",\n-            \t\t\t\tnew Object[]{ col.getFullDBIdentifier().getName(),\n-                            (prev == null) ? null : prev.getClass(), prev,\n-                            (val == null) ? null : val.getClass(), val })).\n-            \t\t\t\tsetFatal(true);\n-            \t} else {\n-            \t    // since not allow to update and the new value is 0 or null,\n-            \t    // just return.\n-            \t    return;\n-            \t}\n+                if (isDefaultValue(prev) || allowsUpdate(col, prev, val)) {\n+                    super.setObject(col, val, metaType, overrideDefault);\n+                    return;\n+                } else if (!isDefaultValue(val)) {\n+                    throw new InvalidStateException(_loc.get(\"diff-values\",\n+                            new Object[]{ col.getFullDBIdentifier().getName(),\n+                                    (prev == null) ? null : prev.getClass(), prev,\n+                                    (val == null) ? null : val.getClass(), val })).\n+                            setFatal(true);\n+                } else {\n+                    // since not allow to update and the new value is 0 or null,\n+                    // just return.\n+                    return;\n+                }\n             }\n         }\n         super.setObject(col, val, metaType, overrideDefault);\n     }\n     \n     /**\n-     * Allow the given column value to be updated only if old or current value\n-     * is a default value or was not set and the column is not a primary key.\n+     * Allow the given key column value to be updated if the old value is a default value\n+     * or the new value is default.\n+     * For primary keys we even disallow setting the current value to default\n      */\n     boolean allowsUpdate(Column col, Object old, Object cur) {\n-    \treturn ((!col.isPrimaryKey() && col.isImplicitRelation()) ||\n-    \t   col.isUni1MFK()) && (isDefaultValue(old));\n+        if (col.isPrimaryKey() && isDefaultValue(old) && !isDefaultValue(cur)) {\n+            // for primary keys we disallow re-setting it to default\n+            return false;\n+        }\n+\n+        return !(col.isPrimaryKey() || col.isRelationId() || col.isImplicitRelation() || col.isUni1MFK())\n+               || isDefaultValue(old) || isDefaultValue(cur);\n     }\n     \n     boolean isDefaultValue(Object val) {\n-    \treturn val == null || val == NULL\n-    \t    || (val instanceof Number && ((Number)val).longValue() == 0);\n+        return val == null || val == NULL\n+                || (val instanceof Number && ((Number)val).longValue() == 0);\n     }\n \n     /**"},{"sha":"08addec2e7e69032f9dd7d979933afce637403bf","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/TestOpenJPA2330.java","status":"modified","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/apache/openjpa/blob/d13ffa5eb3ed13448f442fa7cdc293fe56ad8ae2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/TestOpenJPA2330.java","raw_url":"https://github.com/apache/openjpa/raw/d13ffa5eb3ed13448f442fa7cdc293fe56ad8ae2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/TestOpenJPA2330.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/TestOpenJPA2330.java?ref=d13ffa5eb3ed13448f442fa7cdc293fe56ad8ae2","patch":"@@ -21,6 +21,7 @@\n import javax.persistence.EntityManager;\n import javax.persistence.spi.LoadState;\n \n+import junit.framework.Assert;\n import org.apache.openjpa.persistence.entity.EntityA;\n import org.apache.openjpa.persistence.entity.EntityB;\n import org.apache.openjpa.persistence.entity.EntityC;\n@@ -55,4 +56,44 @@ public void testOpenJPA2330() {\n \n         em.close();\n     }\n+\n+    public void testOpenJPA2335() {\n+        EntityManager em = emf.createEntityManager();\n+\n+        em.getTransaction().begin();\n+        EntityA a = new EntityA();\n+\n+        EntityB b1 = new EntityB(a);\n+        b1.setName(\"b1\");\n+\n+        EntityB b2 = new EntityB(a);\n+        b2.setName(\"b2\");\n+\n+        EntityB b3 = new EntityB(a);\n+        b3.setName(\"b3\");\n+\n+        EntityB b4 = new EntityB(a);\n+        b4.setName(\"b4\");\n+\n+        a.getBs().add(b1);\n+        a.getBs().add(b2);\n+        a.getBs().add(b3);\n+        a.getBs().add(b4);\n+\n+        em.persist(a);\n+\n+        em.getTransaction().commit();\n+        em.close();\n+\n+        // now read all back in\n+        em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        EntityA a2 = em.find(EntityA.class, a.getId());\n+        Assert.assertNotNull(a2);\n+        Assert.assertNotNull(a2.getBs());\n+        Assert.assertEquals(4, a2.getBs().size());\n+\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n }"}]}

