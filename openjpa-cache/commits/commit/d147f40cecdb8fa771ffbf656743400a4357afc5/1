{"sha":"d147f40cecdb8fa771ffbf656743400a4357afc5","node_id":"MDY6Q29tbWl0MjA2MzY0OmQxNDdmNDBjZWNkYjhmYTc3MWZmYmY2NTY3NDM0MDBhNDM1N2FmYzU=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-08-19T00:15:35Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-08-19T00:15:35Z"},"message":"Merge 686325, 686349, 686419 -- missed a whole block during manual merge.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@686905 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e79ccda7e1f01b07657663171e5df02c2d3daa9c","url":"https://api.github.com/repos/apache/openjpa/git/trees/e79ccda7e1f01b07657663171e5df02c2d3daa9c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/d147f40cecdb8fa771ffbf656743400a4357afc5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/d147f40cecdb8fa771ffbf656743400a4357afc5","html_url":"https://github.com/apache/openjpa/commit/d147f40cecdb8fa771ffbf656743400a4357afc5","comments_url":"https://api.github.com/repos/apache/openjpa/commits/d147f40cecdb8fa771ffbf656743400a4357afc5/comments","author":null,"committer":null,"parents":[{"sha":"12a87de4be0499ed53c6caa6eebb77151452715f","url":"https://api.github.com/repos/apache/openjpa/commits/12a87de4be0499ed53c6caa6eebb77151452715f","html_url":"https://github.com/apache/openjpa/commit/12a87de4be0499ed53c6caa6eebb77151452715f"}],"stats":{"total":78,"additions":73,"deletions":5},"files":[{"sha":"2cf8ed19656ab46ee5cb2551154096703ccf64e6","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","status":"modified","additions":73,"deletions":5,"changes":78,"blob_url":"https://github.com/apache/openjpa/blob/d147f40cecdb8fa771ffbf656743400a4357afc5/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/d147f40cecdb8fa771ffbf656743400a4357afc5/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java?ref=d147f40cecdb8fa771ffbf656743400a4357afc5","patch":"@@ -20,6 +20,8 @@\n \n import java.io.Serializable;\n import java.lang.reflect.Method;\n+import java.sql.Time;\n+import java.sql.Timestamp;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Calendar;\n@@ -356,6 +358,52 @@ private void validateParameters() {\n \t\t\t\t\t\n \t\t\t\t}\n \t\t\t}\n+\n+\t\t} else if (_named != null) {\n+\t\t\tLinkedMap expected = _query.getParameterTypes();\n+\t\t\t// key : name of the parameter used while binding\n+\t\t\t// value : user supplied parameter value. null may mean either\n+\t\t\t// user has supplied a value or not specified at all\n+\t\t\tMap<String, Object> actual = _named;\n+\t\t\tfor (Object o : expected.keySet()) {\n+\t\t\t\tString expectedName = (String) o;\n+\t\t\t\tClass expectedParamType = (Class) expected.get(expectedName);\n+\t\t\t\tObject actualValue = actual.get(expectedName);\n+\t\t\t\tboolean valueUnspecified = !actual.containsKey(expectedName);\n+\t\t\t\tif (valueUnspecified) {\n+\t\t\t\t\tnewValidationException(\"param-missing\", expectedName, query,\n+\t\t\t\t\t\t\tArrays.toString(actual.keySet().toArray()));\n+\t\t\t\t}\n+\t\t\t\tif (expectedParamType.isPrimitive() && actualValue == null)\n+\t\t\t\t\tnewValidationException(\"param-type-null\", \n+\t\t\t\t\t\t\texpectedName, query, expectedParamType.getName());\n+\t\t\t\tif (actualValue != null \n+\t\t\t\t && !Filters.wrap(expectedParamType).isInstance(actualValue)) {\n+\t\t\t\t\tnewValidationException(\"param-type-mismatch\",\n+\t\t\t\t\t\t\texpectedName, query, actualValue,\n+\t\t\t\t\t\t\tactualValue.getClass().getName(),\n+\t\t\t\t\t\t\texpectedParamType.getName());\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tfor (String actualName : actual.keySet()) {\n+\t\t\t\tObject actualValue = actual.get(actualName);\n+\t\t\t\tClass expectedParamType = (Class) expected.get(actualName);\n+\t\t\t\tboolean paramExpected = expected.containsKey(actualName);\n+\t\t\t\tif (!paramExpected) {\n+\t\t\t\t\tnewValidationException(\"param-extra\", actualName, query,\n+\t\t\t\t\t\t\texpected.asList());\n+\t\t\t\t}\n+\t\t\t\tif (expectedParamType.isPrimitive() && actualValue == null)\n+\t\t\t\t\tnewValidationException(\"param-type-null\", \n+\t\t\t\t\t\t\tactualName, query, expectedParamType.getName());\n+\t\t\t\tif (actualValue != null \n+\t\t\t\t && !Filters.wrap(expectedParamType).isInstance(actualValue)) {\n+\t\t\t\t\tnewValidationException(\"param-type-mismatch\",\n+\t\t\t\t\t\t\tactualName, query, actualValue,\n+\t\t\t\t\t\t\tactualValue.getClass().getName(),\n+\t\t\t\t\t\t\texpectedParamType.getName());\n+\t\t\t\t}\n+\t\t\t}\n \t\t}\n \t}\n \t\n@@ -521,15 +569,35 @@ private void hintToSetter(FetchPlan fetchPlan, String k, Object value) {\n \n     public OpenJPAQuery setParameter(int position, Calendar value,\n         TemporalType t) {\n-        return setParameter(position, value);\n+        return setParameter(position, convertTemporalType(value, t));\n     }\n \n     public OpenJPAQuery setParameter(int position, Date value,\n         TemporalType type) {\n-        return setParameter(position, value);\n+        return setParameter(position, convertTemporalType(value, type));\n     }\n \n-\tpublic OpenJPAQuery setParameter(int position, Object value) {\n+    /**\n+     * Converts the given Date to a value corresponding to given temporal type.\n+     */\n+    Object convertTemporalType(Date value, TemporalType type) {\n+            switch (type) {\n+            case DATE:\n+                    return value;\n+            case TIME:\n+                    return new Time(value.getTime());\n+            case TIMESTAMP:\n+                    return new Timestamp(value.getTime());\n+            default:\n+                    return null;\n+            }\n+    }\n+    \n+    Object convertTemporalType(Calendar value, TemporalType type) {\n+            return convertTemporalType(value.getTime(), type);\n+    }\n+    \n+    public OpenJPAQuery setParameter(int position, Object value) {\n \t\t_query.assertOpen();\n \t\t_em.assertNotCloseInvoked();\n \t\t_query.lock();\n@@ -565,12 +633,12 @@ public OpenJPAQuery setParameter(int position, Object value) {\n \n     public OpenJPAQuery setParameter(String name, Calendar value,\n         TemporalType t) {\n-        return setParameter(name, value);\n+        return setParameter(name, convertTemporalType(value, t));\n     }\n \n     public OpenJPAQuery setParameter(String name, Date value,\n         TemporalType type) {\n-        return setParameter(name, value);\n+        return setParameter(name, convertTemporalType(value, type));\n     }\n \n     public OpenJPAQuery setParameter(String name, Object value) {"}]}

