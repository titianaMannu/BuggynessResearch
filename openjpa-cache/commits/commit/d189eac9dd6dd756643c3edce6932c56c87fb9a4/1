{"sha":"d189eac9dd6dd756643c3edce6932c56c87fb9a4","node_id":"MDY6Q29tbWl0MjA2MzY0OmQxODllYWM5ZGQ2ZGQ3NTY2NDNjM2VkY2U2OTMyYzU2Yzg3ZmI5YTQ=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-12-19T04:50:24Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-12-19T04:50:24Z"},"message":"OPENJPA-1438: fix wherePrimaryKey for entity using derived identity\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@892430 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"48286eb1c08d3989bff82ee029970878e79d05d6","url":"https://api.github.com/repos/apache/openjpa/git/trees/48286eb1c08d3989bff82ee029970878e79d05d6"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/d189eac9dd6dd756643c3edce6932c56c87fb9a4","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/d189eac9dd6dd756643c3edce6932c56c87fb9a4","html_url":"https://github.com/apache/openjpa/commit/d189eac9dd6dd756643c3edce6932c56c87fb9a4","comments_url":"https://api.github.com/repos/apache/openjpa/commits/d189eac9dd6dd756643c3edce6932c56c87fb9a4/comments","author":null,"committer":null,"parents":[{"sha":"5d9f08e72877b208dad9135afec8b630ce41f81d","url":"https://api.github.com/repos/apache/openjpa/commits/5d9f08e72877b208dad9135afec8b630ce41f81d","html_url":"https://github.com/apache/openjpa/commit/5d9f08e72877b208dad9135afec8b630ce41f81d"}],"stats":{"total":20,"additions":15,"deletions":5},"files":[{"sha":"185b5423e774db940ca3bdca076c2af587ee8bc0","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/RowImpl.java","status":"modified","additions":11,"deletions":5,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/d189eac9dd6dd756643c3edce6932c56c87fb9a4/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/RowImpl.java","raw_url":"https://github.com/apache/openjpa/raw/d189eac9dd6dd756643c3edce6932c56c87fb9a4/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/RowImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/RowImpl.java?ref=d189eac9dd6dd756643c3edce6932c56c87fb9a4","patch":"@@ -183,7 +183,8 @@ private void flushPrimaryKey(OpenJPAStateManager sm, ColumnIO io,\n         while (mapping.getTable() != getTable())\n             mapping = mapping.getPCSuperclassMapping();\n         Column[] cols = mapping.getPrimaryKeyColumns();\n-        flushJoinValues(sm, cols, cols, io, set);\n+        Object oid = mapping.useIdClassFromParent() ? sm.getObjectId() : null;\n+        flushJoinValues(sm, oid, cols, cols, io, set);\n     }\n \n     public void setForeignKey(ForeignKey fk, OpenJPAStateManager sm)\n@@ -219,7 +220,7 @@ public void clearForeignKey(ForeignKey fk)\n     private void flushForeignKey(ForeignKey fk, ColumnIO io,\n         OpenJPAStateManager sm, boolean set)\n         throws SQLException {\n-        flushJoinValues(sm, fk.getPrimaryKeyColumns(), fk.getColumns(),\n+        flushJoinValues(sm, null, fk.getPrimaryKeyColumns(), fk.getColumns(),\n             io, set);\n         if (sm != null) {\n             Column[] cols = fk.getConstantColumns();\n@@ -250,7 +251,7 @@ else if (!set)\n      * @param set whether this should be flushed as an update or\n      * as a where condition\n      */\n-    private void flushJoinValues(OpenJPAStateManager to, Column[] toCols,\n+    private void flushJoinValues(OpenJPAStateManager to, Object oid, Column[] toCols,\n         Column[] fromCols, ColumnIO io, boolean set)\n         throws SQLException {\n         if (to == null) {\n@@ -278,8 +279,13 @@ else if (!set)\n             }\n \n             join = toMapping.assertJoinable(toCols[i]);\n-            val = join.getJoinValue(to, toCols[i], (JDBCStore) to.\n-                getContext().getStoreManager().getInnermostDelegate());\n+            if (oid != null)\n+                val = join.getJoinValue(oid, toCols[i], (JDBCStore) to.\n+                    getContext().getStoreManager().getInnermostDelegate());\n+            else\n+                val = join.getJoinValue(to, toCols[i], (JDBCStore) to.\n+                    getContext().getStoreManager().getInnermostDelegate());\n+                \n             if (set && val == null) {\n                 if (canSet(io, i, true))\n                     setNull(fromCols[i]);"},{"sha":"4e299d91f80cd5a21ba734073f70174c02192ee7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/TestMappedById.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/d189eac9dd6dd756643c3edce6932c56c87fb9a4/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/TestMappedById.java","raw_url":"https://github.com/apache/openjpa/raw/d189eac9dd6dd756643c3edce6932c56c87fb9a4/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/TestMappedById.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/TestMappedById.java?ref=d189eac9dd6dd756643c3edce6932c56c87fb9a4","patch":"@@ -610,6 +610,10 @@ public void findObj6() {\n         MedicalHistory3 m = em.find(MedicalHistory3.class, new PersonId3(\"f_1\", \"l_1\"));\n         MedicalHistory3 m0 = medicals3.get(\"f_1\");\n         assertEquals(m, m0);\n+        \n+        em.getTransaction().begin();\n+        em.remove(m);\n+        em.getTransaction().commit();\n     }\n \n     public void queryObj6() { "}]}

