{"sha":"d1b0d0fd6d376a381a0e7b6fd0f87b5222a86c69","node_id":"MDY6Q29tbWl0MjA2MzY0OmQxYjBkMGZkNmQzNzZhMzgxYTBlN2I2ZmQwZjg3YjUyMjJhODZjNjk=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-03-15T21:07:14Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-03-15T21:07:14Z"},"message":"OPENJPA-1575: Detect parametrized fields in a query expression to exclude queries from cache that use parameters for externized fields. \n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@923441 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"28775f8d3a7cf7b75ce7332384473fa9fe2e4e75","url":"https://api.github.com/repos/apache/openjpa/git/trees/28775f8d3a7cf7b75ce7332384473fa9fe2e4e75"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/d1b0d0fd6d376a381a0e7b6fd0f87b5222a86c69","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/d1b0d0fd6d376a381a0e7b6fd0f87b5222a86c69","html_url":"https://github.com/apache/openjpa/commit/d1b0d0fd6d376a381a0e7b6fd0f87b5222a86c69","comments_url":"https://api.github.com/repos/apache/openjpa/commits/d1b0d0fd6d376a381a0e7b6fd0f87b5222a86c69/comments","author":null,"committer":null,"parents":[{"sha":"b9d83ae33a9a7d0ef5780045d63fe08bcfd67d29","url":"https://api.github.com/repos/apache/openjpa/commits/b9d83ae33a9a7d0ef5780045d63fe08bcfd67d29","html_url":"https://github.com/apache/openjpa/commit/b9d83ae33a9a7d0ef5780045d63fe08bcfd67d29"}],"stats":{"total":86,"additions":79,"deletions":7},"files":[{"sha":"8efded5ffaca9449a12c18a95a89453e921480de","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedQueryImpl.java","status":"modified","additions":20,"deletions":0,"changes":20,"blob_url":"https://github.com/apache/openjpa/blob/d1b0d0fd6d376a381a0e7b6fd0f87b5222a86c69/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedQueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/d1b0d0fd6d376a381a0e7b6fd0f87b5222a86c69/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedQueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedQueryImpl.java?ref=d1b0d0fd6d376a381a0e7b6fd0f87b5222a86c69","patch":"@@ -45,6 +45,7 @@\n import org.apache.openjpa.lib.rop.RangeResultObjectProvider;\n import org.apache.openjpa.lib.rop.ResultList;\n import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.meta.FieldMetaData;\n import org.apache.openjpa.util.ImplHelper;\n import org.apache.openjpa.util.InternalException;\n import org.apache.openjpa.util.UserException;\n@@ -202,6 +203,11 @@ public Exclusion initialize(Object result) {\n         if (executor instanceof StoreQuery.Executor == false)\n             return new Object[]{null, _loc.get(\"exclude-not-executor\")};\n         _exps = ((StoreQuery.Executor)executor).getQueryExpressions();\n+        for (int i = 0; i < _exps.length; i++) {\n+            if (isUsingExternalizedParameter(_exps[i])) {\n+                return new Object[]{null, _loc.get(\"exclude-externalized-param\", provider.getClass().getName())};\n+            }\n+        }\n         if (_exps[0].projections.length == 0) {\n             _projTypes = StoreQuery.EMPTY_CLASSES;\n         } else {\n@@ -235,6 +241,20 @@ private SelectImpl extractImplementation(SelectExecutor selector) {\n         return null;\n     }\n     \n+    private boolean isUsingExternalizedParameter(QueryExpressions exp) {\n+        if (exp == null)\n+            return false;\n+        List<FieldMetaData> fmds = exp.getParameterizedFields();\n+        if (fmds == null || fmds.isEmpty())\n+            return false;\n+        for (FieldMetaData fmd : fmds) {\n+            if (fmd.isExternalized())\n+                return true;\n+        }\n+        return false;\n+    }\n+\n+    \n     /**\n      * Merge the given user parameters with its own parameter. The given map\n      * must be compatible with the user parameters extracted during "},{"sha":"811cb9019011c28cd2f376abd91cd99e2fcc996b","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java","status":"modified","additions":13,"deletions":5,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/d1b0d0fd6d376a381a0e7b6fd0f87b5222a86c69/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/d1b0d0fd6d376a381a0e7b6fd0f87b5222a86c69/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java?ref=d1b0d0fd6d376a381a0e7b6fd0f87b5222a86c69","patch":"@@ -45,6 +45,7 @@\n import org.apache.openjpa.kernel.exps.Val;\n import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.lib.rop.EagerResultList;\n+import org.apache.openjpa.lib.rop.ListResultList;\n import org.apache.openjpa.lib.rop.MergedResultObjectProvider;\n import org.apache.openjpa.lib.rop.RangeResultObjectProvider;\n import org.apache.openjpa.lib.rop.ResultList;\n@@ -1240,10 +1241,17 @@ protected Object toResult(StoreQuery q, StoreQuery.Executor ex,\n         boolean detach = (_broker.getAutoDetach() &\n             AutoDetach.DETACH_NONTXREAD) > 0 && !_broker.isActive();\n         boolean lrs = range.lrs && !ex.isAggregate(q) && !ex.hasGrouping(q);\n-        ResultList<?> res = (!detach && lrs) ? _fc.newResultList(rop)\n-            : new EagerResultList(rop);\n-        res.setUserObject(new Object[]{rop,ex});\n-        _resultLists.add(decorateResultList(res));\n+        ResultList<?> res = new ListResultList(Collections.emptyList());\n+        try {\n+            res = (!detach && lrs) ? _fc.newResultList(rop) : new EagerResultList(rop);\n+            res.setUserObject(new Object[]{rop,ex});\n+            _resultLists.add(decorateResultList(res));\n+        } catch (OpenJPAException e) {\n+            if (e.getFailedObject() == null) {\n+                e.setFailedObject(getQueryString());\n+            }\n+            throw e;\n+        }\n         return res;\n     }\n \n@@ -1758,7 +1766,7 @@ protected void assertParameters(StoreQuery q, StoreQuery.Executor ex, Map params\n         for (Object expected : paramTypes.keySet()) {\n             if (!params.containsKey(expected))\n             throw new UserException(_loc.get(\"unbound-params\",\n-                expected, params.keySet()));\n+                expected, paramTypes.keySet()));\n         }\n \n         Iterator<Map.Entry<Object, Class<?>>> itr = paramTypes.entrySet().iterator();"},{"sha":"560c6f9ed5df184ff8b1ebcdbe5d1714260457c6","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/QueryExpressions.java","status":"modified","additions":46,"deletions":2,"changes":48,"blob_url":"https://github.com/apache/openjpa/blob/d1b0d0fd6d376a381a0e7b6fd0f87b5222a86c69/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/QueryExpressions.java","raw_url":"https://github.com/apache/openjpa/raw/d1b0d0fd6d376a381a0e7b6fd0f87b5222a86c69/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/QueryExpressions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/QueryExpressions.java?ref=d1b0d0fd6d376a381a0e7b6fd0f87b5222a86c69","patch":"@@ -19,12 +19,13 @@\n package org.apache.openjpa.kernel.exps;\n \n import java.io.Serializable;\n+import java.util.ArrayList;\n import java.util.Collections;\n import java.util.LinkedHashMap;\n+import java.util.List;\n import java.util.Map;\n import java.util.Stack;\n \n-import org.apache.commons.collections.map.LinkedMap;\n import org.apache.openjpa.kernel.QueryOperations;\n import org.apache.openjpa.kernel.ResultShape;\n import org.apache.openjpa.kernel.StoreQuery;\n@@ -48,7 +49,7 @@\n     public static final int DISTINCT_TRUE = 2 << 1;\n     public static final int DISTINCT_FALSE = 2 << 2;\n     public static final Value[] EMPTY_VALUES = new Value[0];\n-\n+    \n     /**\n      * Map of {@link FieldMetaData},{@link Value} for update statements.\n      */\n@@ -109,6 +110,15 @@ public boolean isAggregate() {\n     public boolean isDistinct() {\n         return distinct != DISTINCT_FALSE;\n     }\n+    \n+    /**\n+     * Gets the fields that are bound to parameters.\n+     * \n+     * @return empty if the query has no filtering condition or no parameters.\n+     */\n+    public List<FieldMetaData> getParameterizedFields() {\n+        return ParameterExpressionVisitor.collectParameterizedFields(filter);\n+    }\n \n     /**\n      * Add an update.\n@@ -155,4 +165,38 @@ public void exit(Value val) {\n                 _sub = null;\n         }\n     }\n+    \n+    /**\n+     * Visits the expression tree to find the parameter nodes.\n+     * @author Pinaki Poddar\n+     *\n+     */\n+    private static class ParameterExpressionVisitor extends AbstractExpressionVisitor {\n+        private FieldMetaData _parameterized;\n+        private List<FieldMetaData> _collected = new ArrayList<FieldMetaData>();\n+        /**\n+         * Enters the current node.\n+         */\n+        public void enter(Value val) {\n+            if (val instanceof Parameter) {\n+                if (_parameterized != null) {\n+                    _collected.add(_parameterized);\n+                } \n+            } else if (val instanceof Path) {\n+                _parameterized = ((Path)val).last();\n+            } else {\n+                _parameterized = null;\n+            }\n+        }\n+        \n+        public static List<FieldMetaData> collectParameterizedFields(Expression e) {\n+            if (e == null) {\n+                return Collections.emptyList();\n+            }\n+            ParameterExpressionVisitor visitor = new ParameterExpressionVisitor();\n+            e.acceptVisit(visitor);\n+            return visitor._collected;\n+        }\n+        \n+    }\n }"}]}

