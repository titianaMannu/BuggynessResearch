{"sha":"d1c23c2d9df241ec2c3247aa0dd5ef18eafaa261","node_id":"MDY6Q29tbWl0MjA2MzY0OmQxYzIzYzJkOWRmMjQxZWMyYzMyNDdhYTBkZDVlZjE4ZWFmYWEyNjE=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2009-02-18T08:06:12Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2009-02-18T08:06:12Z"},"message":"OPENJPA-925 Bidirectional OneToOne relation incorrectly set in loadEagerJoin\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@745408 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3f5881cb18d397899f7fed4e5be0493f61c5df15","url":"https://api.github.com/repos/apache/openjpa/git/trees/3f5881cb18d397899f7fed4e5be0493f61c5df15"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/d1c23c2d9df241ec2c3247aa0dd5ef18eafaa261","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/d1c23c2d9df241ec2c3247aa0dd5ef18eafaa261","html_url":"https://github.com/apache/openjpa/commit/d1c23c2d9df241ec2c3247aa0dd5ef18eafaa261","comments_url":"https://api.github.com/repos/apache/openjpa/commits/d1c23c2d9df241ec2c3247aa0dd5ef18eafaa261/comments","author":null,"committer":null,"parents":[{"sha":"f08e4e1791528a88645cfc6dff550955ae8e71b9","url":"https://api.github.com/repos/apache/openjpa/commits/f08e4e1791528a88645cfc6dff550955ae8e71b9","html_url":"https://github.com/apache/openjpa/commit/f08e4e1791528a88645cfc6dff550955ae8e71b9"}],"stats":{"total":206,"additions":201,"deletions":5},"files":[{"sha":"b1fdddd34f05b57d78723a040d1328f869670bdb","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","status":"modified","additions":12,"deletions":3,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/d1c23c2d9df241ec2c3247aa0dd5ef18eafaa261/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/d1c23c2d9df241ec2c3247aa0dd5ef18eafaa261/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java?ref=d1c23c2d9df241ec2c3247aa0dd5ef18eafaa261","patch":"@@ -644,9 +644,12 @@ public void loadEagerJoin(OpenJPAStateManager sm, JDBCStore store,\n         if (mappedByFieldMapping != null) {\n         \tValueMapping val = mappedByFieldMapping.getValueMapping();\n         \tClassMetaData decMeta = val.getTypeMetaData();\n-        \t// this inverse field does not have corresponding classMapping\n-        \t// its value may be a collection/map etc.\n-        \tif (decMeta != null) {\n+            // eager loading a child from its toOne parent and\n+            // the parent has @OneToOne(mappedBy=\"parent\") child relation.\n+            // By saving the mapped-by info in 'res' is to\n+            // avoid unneeded SQL pushdown that would otherwise gets\n+            // generated.\n+            if (decMeta != null) {\n         \t    mappedByValue = sm.getPersistenceCapable();\n         \t    res.setMappedByFieldMapping(mappedByFieldMapping);\n         \t    res.setMappedByValue(mappedByValue);\n@@ -655,6 +658,12 @@ public void loadEagerJoin(OpenJPAStateManager sm, JDBCStore store,\n \n         sm.storeObject(field.getIndex(), res.load(cls, store, fetch,\n             eagerJoin(res.newJoins(), cls, false)));\n+\n+        // reset mapped by is needed for OneToOne bidirectional relations\n+        // having a mapped-by parent to correctly set the parent-child\n+        // relation.\n+        res.setMappedByFieldMapping(null);\n+        res.setMappedByValue(null);\n     }\n \n     public void load(OpenJPAStateManager sm, JDBCStore store,"},{"sha":"4e4250ba73a1e14cd17540dd089b48ea1e7ac262","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/OneOneChild.java","status":"added","additions":61,"deletions":0,"changes":61,"blob_url":"https://github.com/apache/openjpa/blob/d1c23c2d9df241ec2c3247aa0dd5ef18eafaa261/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/OneOneChild.java","raw_url":"https://github.com/apache/openjpa/raw/d1c23c2d9df241ec2c3247aa0dd5ef18eafaa261/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/OneOneChild.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/OneOneChild.java?ref=d1c23c2d9df241ec2c3247aa0dd5ef18eafaa261","patch":"@@ -0,0 +1,61 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.relations;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.OneToOne;\r\n+import javax.persistence.Version;\r\n+\r\n+@Entity\r\n+public class OneOneChild {\r\n+\r\n+    @Id\r\n+    @GeneratedValue\r\n+    private long id;\r\n+\r\n+    private String name;\r\n+\r\n+    @OneToOne\r\n+    private OneOneParent parent;\r\n+\r\n+    @Version\r\n+    private Integer optLock;\r\n+\r\n+    public long getId() { \r\n+        return id; \r\n+    }\r\n+\r\n+    public String getName() { \r\n+        return name; \r\n+    }\r\n+\r\n+    public void setName(String name) { \r\n+        this.name = name; \r\n+    }\r\n+\r\n+    public OneOneParent getParent() { \r\n+        return parent; \r\n+    }\r\n+\r\n+    public void setParent(OneOneParent parent) { \r\n+        this.parent = parent; \r\n+    }\r\n+}\r"},{"sha":"2b1e8a66ef709a2ed810b5fc1839cc36246ba115","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/OneOneParent.java","status":"added","additions":61,"deletions":0,"changes":61,"blob_url":"https://github.com/apache/openjpa/blob/d1c23c2d9df241ec2c3247aa0dd5ef18eafaa261/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/OneOneParent.java","raw_url":"https://github.com/apache/openjpa/raw/d1c23c2d9df241ec2c3247aa0dd5ef18eafaa261/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/OneOneParent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/OneOneParent.java?ref=d1c23c2d9df241ec2c3247aa0dd5ef18eafaa261","patch":"@@ -0,0 +1,61 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.relations;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.OneToOne;\r\n+import javax.persistence.Version;\r\n+\r\n+@Entity\r\n+public class OneOneParent {\r\n+\r\n+    @Id\r\n+    @GeneratedValue\r\n+    private long id;\r\n+\r\n+    private String name;\r\n+\r\n+    @OneToOne(mappedBy=\"parent\")\r\n+    private OneOneChild child;\r\n+\r\n+    @Version\r\n+    private Integer optLock;\r\n+\r\n+    public long getId() { \r\n+        return id; \r\n+    }\r\n+\r\n+    public String getName() { \r\n+        return name; \r\n+    }\r\n+\r\n+    public void setName(String name) { \r\n+        this.name = name; \r\n+    }\r\n+\r\n+    public OneOneChild getChild() { \r\n+        return child; \r\n+    }\r\n+\r\n+    public void setChild(OneOneChild child) { \r\n+        this.child = child; \r\n+    }\r\n+}\r"},{"sha":"6d586afc7abf73533bf88eb433add77592c9d7d5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestManyEagerSQL.java","status":"modified","additions":67,"deletions":2,"changes":69,"blob_url":"https://github.com/apache/openjpa/blob/d1c23c2d9df241ec2c3247aa0dd5ef18eafaa261/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestManyEagerSQL.java","raw_url":"https://github.com/apache/openjpa/raw/d1c23c2d9df241ec2c3247aa0dd5ef18eafaa261/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestManyEagerSQL.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestManyEagerSQL.java?ref=d1c23c2d9df241ec2c3247aa0dd5ef18eafaa261","patch":"@@ -35,7 +35,8 @@\n     public void setUp() {\r\n         setUp(\r\n             OneManyEagerParent.class, OneManyEagerChild.class,\r\n-            OneManyLazyChild.class);\r\n+            OneManyLazyChild.class, OneOneParent.class, \r\n+            OneOneChild.class);\r\n         \r\n         EntityManager em = emf.createEntityManager();\r\n         em.getTransaction().begin();\r\n@@ -55,7 +56,18 @@ public void setUp() {\n             }\r\n             em.persist(parent);\r\n         }\r\n-\r\n+        \r\n+        for (int i = 0; i < 3; i++) {\r\n+        \tOneOneParent parent = new OneOneParent();\r\n+        \tparent.setName(\"parent\" + i);\r\n+        \tOneOneChild child = new OneOneChild();\r\n+        \tchild.setName(\"child\" + i);\r\n+        \tparent.setChild(child);\r\n+        \tchild.setParent(parent);\r\n+        \tem.persist(child);\r\n+        \tem.persist(parent);\r\n+        }\r\n+        \r\n         em.flush();\r\n         em.getTransaction().commit();\r\n         em.close();\r\n@@ -190,6 +202,59 @@ public void testOneToManyEagerQuery() {\n         em.close();\r\n     }\r\n \r\n+    public void testOneToOneParentQuery() {\r\n+        sql.clear();\r\n+\r\n+        OpenJPAEntityManager em = emf.createEntityManager();\r\n+        String query = \"select p FROM OneOneParent p\";\r\n+        Query q = em.createQuery(query);\r\n+        List list = q.getResultList();\r\n+        assertEquals(3, list.size());\r\n+\r\n+        // Expected SQLs:\r\n+        //   SELECT t0.id, t0.optLock, t1.id, t1.optLock, t1.name, t2.id, \r\n+        //   t2.optLock, t2.CHILD_ID, t2.name, t0.name \r\n+        //       FROM OneOneParent t0 \r\n+        //       LEFT OUTER JOIN OneOneChild t1 ON t0.CHILD_ID = t1.id \r\n+        //       LEFT OUTER JOIN OneOneParent t2 ON t1.PARENT_ID = t2.id\r\n+\r\n+        assertEquals(1, sql.size());\r\n+\r\n+        sql.clear();\r\n+\r\n+        for (int i = 0; i < list.size(); i++) {\r\n+            OneOneParent p = (OneOneParent) list.get(i);\r\n+            assertEquals(p, p.getChild().getParent());\r\n+        }\r\n+\r\n+        assertEquals(0, sql.size());\r\n+        em.close();\r\n+    }\r\n+\r\n+    public void testOneToOneChildQuery() {\r\n+        sql.clear();\r\n+\r\n+        OpenJPAEntityManager em = emf.createEntityManager();\r\n+        String query = \"select c FROM OneOneChild c\";\r\n+        Query q = em.createQuery(query);\r\n+        List list = q.getResultList();\r\n+        assertEquals(3, list.size());\r\n+\r\n+        // Expected SQLs:\r\n+\r\n+        assertEquals(1, sql.size());\r\n+\r\n+        sql.clear();\r\n+\r\n+        for (int i = 0; i < list.size(); i++) {\r\n+            OneOneChild c = (OneOneChild) list.get(i);\r\n+            assertEquals(c, c.getParent().getChild());\r\n+        }\r\n+\r\n+        assertEquals(0, sql.size());\r\n+        em.close();\r\n+    }\r\n+\r\n     public static void main(String[] args) {\r\n         TestRunner.run(TestManyEagerSQL.class);\r\n     }\r"}]}

