{"sha":"d1e7a817d2bf5c08d61a4f275cf85c1318d70397","node_id":"MDY6Q29tbWl0MjA2MzY0OmQxZTdhODE3ZDJiZjVjMDhkNjFhNGYyNzVjZjg1YzEzMThkNzAzOTc=","commit":{"author":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-09-12T16:41:09Z"},"committer":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-09-12T16:41:09Z"},"message":"Fix failure to close some empty result sets.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@442643 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b14c76f5034b9021403180469057790f6ff26e07","url":"https://api.github.com/repos/apache/openjpa/git/trees/b14c76f5034b9021403180469057790f6ff26e07"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/d1e7a817d2bf5c08d61a4f275cf85c1318d70397","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/d1e7a817d2bf5c08d61a4f275cf85c1318d70397","html_url":"https://github.com/apache/openjpa/commit/d1e7a817d2bf5c08d61a4f275cf85c1318d70397","comments_url":"https://api.github.com/repos/apache/openjpa/commits/d1e7a817d2bf5c08d61a4f275cf85c1318d70397/comments","author":null,"committer":null,"parents":[{"sha":"2dfe77f2ca4a79ea2f6a1c4a1b533a8419121b00","url":"https://api.github.com/repos/apache/openjpa/commits/2dfe77f2ca4a79ea2f6a1c4a1b533a8419121b00","html_url":"https://github.com/apache/openjpa/commit/2dfe77f2ca4a79ea2f6a1c4a1b533a8419121b00"}],"stats":{"total":66,"additions":33,"deletions":33},"files":[{"sha":"d5e44d5db849f0ca0470d7a4bfea8fc609358079","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","status":"modified","additions":33,"deletions":33,"changes":66,"blob_url":"https://github.com/apache/openjpa/blob/d1e7a817d2bf5c08d61a4f275cf85c1318d70397/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/d1e7a817d2bf5c08d61a4f275cf85c1318d70397/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java?ref=d1e7a817d2bf5c08d61a4f275cf85c1318d70397","patch":"@@ -268,43 +268,43 @@ private boolean initializeState(OpenJPAStateManager sm, PCState state,\n         Object oid = sm.getObjectId();\n         ClassMapping mapping = (ClassMapping) sm.getMetaData();\n         Result res = null;\n-        if (info != null && info.result != null) {\n-            res = info.result;\n-            info.sm = sm;\n-            if (info.mapping == null)\n-                info.mapping = mapping;\n-            mapping = info.mapping;\n-        } else if (oid instanceof OpenJPAId\n-            && !((OpenJPAId) oid).hasSubclasses()) {\n-            Boolean custom = customLoad(sm, mapping, state, fetch);\n-            if (custom != null)\n-                return custom.booleanValue();\n-            res = getInitializeStateResult(sm, mapping, fetch,\n-                Select.SUBS_EXACT);\n-            if (res == null && !selectPrimaryKey(sm, mapping, fetch))\n-                return false;\n-            if (res != null && !res.next())\n-                return false;\n-        } else {\n-            ClassMapping[] mappings = mapping.\n-                getIndependentAssignableMappings();\n-            if (mappings.length == 1) {\n-                mapping = mappings[0];\n+        try {\n+            if (info != null && info.result != null) {\n+                res = info.result;\n+                info.sm = sm;\n+                if (info.mapping == null)\n+                    info.mapping = mapping;\n+                mapping = info.mapping;\n+            } else if (oid instanceof OpenJPAId\n+                && !((OpenJPAId) oid).hasSubclasses()) {\n                 Boolean custom = customLoad(sm, mapping, state, fetch);\n                 if (custom != null)\n                     return custom.booleanValue();\n                 res = getInitializeStateResult(sm, mapping, fetch,\n-                    Select.SUBS_ANY_JOINABLE);\n+                    Select.SUBS_EXACT);\n                 if (res == null && !selectPrimaryKey(sm, mapping, fetch))\n                     return false;\n-            } else\n-                res = getInitializeStateUnionResult(sm, mapping, mappings,\n-                    fetch);\n-            if (res != null && !res.next())\n-                return false;\n-        }\n+                if (res != null && !res.next())\n+                    return false;\n+            } else {\n+                ClassMapping[] mappings = mapping.\n+                    getIndependentAssignableMappings();\n+                if (mappings.length == 1) {\n+                    mapping = mappings[0];\n+                    Boolean custom = customLoad(sm, mapping, state, fetch);\n+                    if (custom != null)\n+                        return custom.booleanValue();\n+                    res = getInitializeStateResult(sm, mapping, fetch,\n+                        Select.SUBS_ANY_JOINABLE);\n+                    if (res == null && !selectPrimaryKey(sm, mapping, fetch))\n+                        return false;\n+                } else\n+                    res = getInitializeStateUnionResult(sm, mapping, mappings,\n+                        fetch);\n+                if (res != null && !res.next())\n+                    return false;\n+            }\n \n-        try {\n             // figure out what type of object this is; the state manager\n             // only guarantees to provide a base class\n             Class type;\n@@ -454,9 +454,9 @@ public boolean load(OpenJPAStateManager sm, BitSet fields,\n \n             // if the instance is hollow and there's a customized\n             // get by id method, use it\n-            if (sm.getLoaded().length() == 0)\n-                if (mapping.customLoad(sm, this, null, jfetch))\n-                    removeLoadedFields(sm, fields);\n+            if (sm.getLoaded().length() == 0 \n+                && mapping.customLoad(sm, this, null, jfetch))\n+                removeLoadedFields(sm, fields);\n \n             //### select is kind of a big object, and in some cases we don't\n             //### use it... would it be worth it to have a small shell select"}]}

