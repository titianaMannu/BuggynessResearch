{"sha":"d1ec54c6914e92f02817fdeb290a860bc908fc0b","node_id":"MDY6Q29tbWl0MjA2MzY0OmQxZWM1NGM2OTE0ZTkyZjAyODE3ZmRlYjI5MGE4NjBiYzkwOGZjMGI=","commit":{"author":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2011-02-08T16:42:22Z"},"committer":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2011-02-08T16:42:22Z"},"message":"OPENJPA-1935 Updated Informix dictionary to examine nested SQL exceptions when determining whether a generic exception is a lock exception.  Added Informix JDBC profile to jdbc and locking poms.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1068472 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e34fa61ebfbe70ad5ccce34176f67bd23fa476b4","url":"https://api.github.com/repos/apache/openjpa/git/trees/e34fa61ebfbe70ad5ccce34176f67bd23fa476b4"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/d1ec54c6914e92f02817fdeb290a860bc908fc0b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/d1ec54c6914e92f02817fdeb290a860bc908fc0b","html_url":"https://github.com/apache/openjpa/commit/d1ec54c6914e92f02817fdeb290a860bc908fc0b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/d1ec54c6914e92f02817fdeb290a860bc908fc0b/comments","author":null,"committer":null,"parents":[{"sha":"85a408aca74aee119f83a294b1144c4b5ae7699c","url":"https://api.github.com/repos/apache/openjpa/commits/85a408aca74aee119f83a294b1144c4b5ae7699c","html_url":"https://github.com/apache/openjpa/commit/85a408aca74aee119f83a294b1144c4b5ae7699c"}],"stats":{"total":221,"additions":215,"deletions":6},"files":[{"sha":"86e70693b7e7d0da9068be89bb51d49b0c2bf11f","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/InformixDictionary.java","status":"modified","additions":52,"deletions":1,"changes":53,"blob_url":"https://github.com/apache/openjpa/blob/d1ec54c6914e92f02817fdeb290a860bc908fc0b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/InformixDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/d1ec54c6914e92f02817fdeb290a860bc908fc0b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/InformixDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/InformixDictionary.java?ref=d1ec54c6914e92f02817fdeb290a860bc908fc0b","patch":"@@ -27,6 +27,8 @@\n import java.sql.Types;\n import java.util.Arrays;\n import java.util.Collection;\n+import java.util.Map;\n+import java.util.Set;\n \n import org.apache.openjpa.jdbc.identifier.DBIdentifier;\n import org.apache.openjpa.jdbc.identifier.DBIdentifier.DBIdentifierType;\n@@ -393,12 +395,61 @@ public boolean isFatalException(int subtype, SQLException ex) {\n         // SQL State of IX000 is a general purpose Informix error code\n         // category, so only return Boolean.TRUE if we match SQL Codes\n         // recoverable = Boolean.FALSE;\n-        if ((subtype == StoreException.LOCK && ex.getErrorCode() == -154) \n+        if ((subtype == StoreException.LOCK && checkNestedErrorCodes(ex, \"IX000\", -154)) \n           ||(subtype == StoreException.QUERY && ex.getErrorCode() == -213)) {\n             return false;\n         }\n         \n         return super.isFatalException(subtype, ex);\n     }\n+\n+    /**\n+     * Specialized matchErrorState method for Informix.  Informix exceptions are\n+     * typically nested multiple levels deep.  Correct determination of the exception type requires\n+     * inspection of nested exceptions to determine the root cause. A list of Informix (IDS v10) error codes\n+     * can be found here:\n+     * \n+     * http://publib.boulder.ibm.com/infocenter/idshelp/v10/index.jsp?topic=/com.ibm.em.doc/errors_ids100.html\n+     * \n+     * @param errorStates classification of SQL error states by their specific nature. The keys of the\n+     * map represent one of the constants defined in {@link StoreException}. The value corresponding to\n+     * a key represent the set of SQL Error States representing specific category of database error. \n+     * This supplied map is sourced from <code>sql-error-state-codes.xml</xml> and filtered the\n+     * error states for the current database.\n+     * \n+     * @param ex original SQL Exception as raised by the database driver.\n+     * \n+     * @return A constant indicating the category of error as defined in {@link StoreException}.\n+     */\n+    protected int matchErrorState(Map<Integer,Set<String>> errorStates, SQLException ex) {\n+        // Informix SQLState IX000 is a general SQLState that applies to many possible conditions\n+        // If the underlying cause is also an IX000 with error code: \n+        // -107 ISAM error: record is locked. || -154 ISAM error: Lock Timeout Expired.\n+        // the exception type is LOCK.\n+        if (checkNestedErrorCodes(ex, \"IX000\", -107, -154)) {\n+           return StoreException.LOCK;\n+        }\n+        return super.matchErrorState(errorStates, ex);\n+    }\n+    \n+    private boolean checkNestedErrorCodes(SQLException ex, String sqlState, int...errorCodes) {\n+        SQLException cause = ex;\n+        int level = 0;\n+        // Query at most 5 exceptions deep to prevent infinite iteration exception loops\n+        // Typically, the root exception is at level 3.\n+        while (cause != null && level < 5) {\n+            String errorState = cause.getSQLState();\n+            if (sqlState == null || sqlState.equals(errorState)) {\n+                for (int ec : errorCodes) {\n+                    if (cause.getErrorCode() == ec) {\n+                        return true;\n+                    }\n+                }\n+            }\n+            cause = cause.getNextException();\n+            level++;\n+        }\n+        return false;\n+    }\n }\n "},{"sha":"ee0af98b0d8e6fd12f505e6fedd984a725912fd7","filename":"openjpa-persistence-jdbc/pom.xml","status":"modified","additions":68,"deletions":0,"changes":68,"blob_url":"https://github.com/apache/openjpa/blob/d1ec54c6914e92f02817fdeb290a860bc908fc0b/openjpa-persistence-jdbc/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/d1ec54c6914e92f02817fdeb290a860bc908fc0b/openjpa-persistence-jdbc/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/pom.xml?ref=d1ec54c6914e92f02817fdeb290a860bc908fc0b","patch":"@@ -627,6 +627,74 @@\n             </repositories>\n         </profile>\n \n+        <!-- Profile for testing Informix with the Informix JDBC Driver -->\n+        <profile>\n+            <!--\n+                Example Informix profile. You can use this profile if you:\n+                1) have the Informix JDBC artifacts installed in a local repo and \n+                supply the URL:\n+                  -Dids.maven.repo=http://my.local.repo\n+                2) have a copy of the Informix driver and run the following\n+                commands :\n+                    mvn install:install-file -Dfile=${path to ifxjdbc.jar} \\\n+                                             -DgroupId=com.informix \\\n+                                             -DartifactId=informix-driver \\ \n+                                             -Dversion=3.70 \\\n+                                             -Dpackaging=jar\n+\n+                You must also set the following properties:\n+                    -Dopenjpa.ids.url=jdbc:informix-sqli://<HOST>:<PORT>:informixserver=<INFORMIXSERVER>;database=<DBNAME>\n+                    -Dopenjpa.ids.username=<ids_uid>\n+                    -Dopenjpa.ids.password=<ids_pwd>\n+\n+                Optionally, you can override the default Informix groupId,\n+                artifactIds and version by also supplying the following\n+                properties:\n+                    -Dids.groupid=com.informix\n+                    -Dids.driver.artifactid=informix-driver\n+                    -Dids.version=3.70\n+            -->\n+            <id>test-ids-informix</id>\n+            <activation>\n+                <property>\n+                    <name>test-ids-informix</name>\n+                </property>\n+            </activation>\n+            <dependencies>\n+                <dependency>\n+                    <groupId>${ids.groupid}</groupId>\n+                    <artifactId>${ids.driver.artifactid}</artifactId>\n+                    <version>${ids.version}</version>\n+                    <scope>test</scope>\n+                </dependency>\n+            </dependencies>\n+            <properties>\n+                <ids.maven.repo>http://not.a.real.repository</ids.maven.repo>\n+                <ids.groupid>com.informix</ids.groupid>\n+                <ids.driver.artifactid>informix-driver</ids.driver.artifactid>\n+                <ids.version>3.70</ids.version>\n+                <connection.driver.name>com.informix.jdbc.IfxDriver</connection.driver.name>\n+                <connection.url>${openjpa.ids.url}</connection.url>\n+                <connection.username>${openjpa.ids.username}</connection.username>\n+                <connection.password>${openjpa.ids.password}</connection.password>\n+            </properties>\n+            <repositories>\n+                <repository>\n+                    <id>ids.repository</id>\n+                    <name>Informix Repository</name>\n+                    <url>${ids.maven.repo}</url>\n+                    <layout>default</layout>\n+                    <snapshots>\n+                        <enabled>false</enabled>\n+                    </snapshots>\n+                    <releases>\n+                        <enabled>true</enabled>\n+                        <checksumPolicy>ignore</checksumPolicy>\n+                    </releases>\n+                </repository>\n+            </repositories>\n+        </profile>\n+        \n         <!-- Profile for testing with Oracle DB -->\n         <profile>\n             <!--"},{"sha":"761cc4dd364d3c3417f9bbcad8db22a62049112a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SQLListenerTestCase.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/d1ec54c6914e92f02817fdeb290a860bc908fc0b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SQLListenerTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/d1ec54c6914e92f02817fdeb290a860bc908fc0b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SQLListenerTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SQLListenerTestCase.java?ref=d1ec54c6914e92f02817fdeb290a860bc908fc0b","patch":"@@ -222,6 +222,16 @@ public String toString(List<String> list) {\n     \treturn buf.toString();\n     }\n \n+    /**\n+     * Returns the last SQL executed or the empty string if the list is\n+     * empty.\n+    */ \n+    public String getLastSQL(List<String> list) {\n+        if (list != null && list.size() > 0)\n+            return list.get(list.size() -1);\n+        return \"\";\n+    }\n+\n     public enum SQLAssertType {\n         SQL, NotSQL, ContainsSQL, AllSQLInOrder, AllExactSQLInOrder, \n         AllSQLAnyOrder, NoneSQLAnyOrder, AnySQLAnyOrder"},{"sha":"96a9891ed9ace7d72cce91fdd3b14956ca73e8ac","filename":"openjpa-persistence-locking/pom.xml","status":"modified","additions":68,"deletions":0,"changes":68,"blob_url":"https://github.com/apache/openjpa/blob/d1ec54c6914e92f02817fdeb290a860bc908fc0b/openjpa-persistence-locking/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/d1ec54c6914e92f02817fdeb290a860bc908fc0b/openjpa-persistence-locking/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-locking/pom.xml?ref=d1ec54c6914e92f02817fdeb290a860bc908fc0b","patch":"@@ -594,6 +594,74 @@\n             </repositories>\n         </profile>\n \n+        <!-- Profile for testing Informix with the Informix JDBC Driver -->\n+        <profile>\n+            <!--\n+                Example Informix profile. You can use this profile if you:\n+                1) have the Informix JDBC artifacts installed in a local repo and \n+                supply the URL:\n+                  -Dids.maven.repo=http://my.local.repo\n+                2) have a copy of the Informix driver and run the following\n+                commands :\n+                    mvn install:install-file -Dfile=${path to ifxjdbc.jar} \\\n+                                             -DgroupId=com.informix \\\n+                                             -DartifactId=informix-driver \\ \n+                                             -Dversion=3.70 \\\n+                                             -Dpackaging=jar\n+\n+                You must also set the following properties:\n+                    -Dopenjpa.ids.url=jdbc:informix-sqli://<HOST>:<PORT>:informixserver=<INFORMIXSERVER>;database=<DBNAME>\n+                    -Dopenjpa.ids.username=<ids_uid>\n+                    -Dopenjpa.ids.password=<ids_pwd>\n+\n+                Optionally, you can override the default Informix groupId,\n+                artifactIds and version by also supplying the following\n+                properties:\n+                    -Dids.groupid=com.informix\n+                    -Dids.driver.artifactid=informix-driver\n+                    -Dids.version=3.70\n+            -->\n+            <id>test-ids-informix</id>\n+            <activation>\n+                <property>\n+                    <name>test-ids-informix</name>\n+                </property>\n+            </activation>\n+            <dependencies>\n+                <dependency>\n+                    <groupId>${ids.groupid}</groupId>\n+                    <artifactId>${ids.driver.artifactid}</artifactId>\n+                    <version>${ids.version}</version>\n+                    <scope>test</scope>\n+                </dependency>\n+            </dependencies>\n+            <properties>\n+                <ids.maven.repo>http://not.a.real.repository</ids.maven.repo>\n+                <ids.groupid>com.informix</ids.groupid>\n+                <ids.driver.artifactid>informix-driver</ids.driver.artifactid>\n+                <ids.version>3.70</ids.version>\n+                <connection.driver.name>com.informix.jdbc.IfxDriver</connection.driver.name>\n+                <connection.url>${openjpa.ids.url}</connection.url>\n+                <connection.username>${openjpa.ids.username}</connection.username>\n+                <connection.password>${openjpa.ids.password}</connection.password>\n+            </properties>\n+            <repositories>\n+                <repository>\n+                    <id>ids.repository</id>\n+                    <name>Informix Repository</name>\n+                    <url>${ids.maven.repo}</url>\n+                    <layout>default</layout>\n+                    <snapshots>\n+                        <enabled>false</enabled>\n+                    </snapshots>\n+                    <releases>\n+                        <enabled>true</enabled>\n+                        <checksumPolicy>ignore</checksumPolicy>\n+                    </releases>\n+                </repository>\n+            </repositories>\n+        </profile>\n+        \n         <!-- Profile for testing with Oracle DB -->\n         <profile>\n             <!-- "},{"sha":"9f99cf9cda0f6f3ba24e66c490c9a29c5ce9f8c1","filename":"openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestPessimisticLocks.java","status":"modified","additions":17,"deletions":5,"changes":22,"blob_url":"https://github.com/apache/openjpa/blob/d1ec54c6914e92f02817fdeb290a860bc908fc0b/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestPessimisticLocks.java","raw_url":"https://github.com/apache/openjpa/raw/d1ec54c6914e92f02817fdeb290a860bc908fc0b/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestPessimisticLocks.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestPessimisticLocks.java?ref=d1ec54c6914e92f02817fdeb290a860bc908fc0b","patch":"@@ -40,6 +40,7 @@\n import org.apache.openjpa.jdbc.sql.DB2Dictionary;\n import org.apache.openjpa.jdbc.sql.DBDictionary;\n import org.apache.openjpa.jdbc.sql.DerbyDictionary;\n+import org.apache.openjpa.jdbc.sql.InformixDictionary;\n import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.persistence.LockTimeoutException;\n import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n@@ -396,14 +397,14 @@ public void testRepeatedQueryWithPessimisticLocks() {\n         String firstName1 = (String) q1.getSingleResult();\n         //Expected sql for Derby is:\n         //SELECT t0.firstName FROM Employee t0 WHERE (t0.id = CAST(? AS BIGINT)) FOR UPDATE WITH RR\n-        String SQL1 = toString(sql);\n+        String SQL1 = getLastSQL(sql);\n         \n         // run the second time\n         resetSQL();\n         Query q2 = em.createQuery(jpql);\n         q2.setLockMode(LockModeType.PESSIMISTIC_WRITE);\n         String firstName2 = (String) q2.getSingleResult();\n-        String SQL2 = toString(sql);\n+        String SQL2 = getLastSQL(sql);\n         assertEquals(SQL1, SQL2);\n         em.getTransaction().commit();\n     }\n@@ -422,10 +423,18 @@ public void testRefreshLockTimeout() {\n         // Only run this test on DB2 and Derby for now.  It could cause\n         // the test to hang on other platforms.\n         if (!(dict instanceof DerbyDictionary ||\n-              dict instanceof DB2Dictionary)) {\n+              dict instanceof DB2Dictionary ||\n+              dict instanceof InformixDictionary)) {\n             return;\n         }\n         \n+        // Informix currently requires the lock timeout to be set directly on the dictionary\n+        if (dict instanceof InformixDictionary) {\n+            InformixDictionary ifxDict = (InformixDictionary)((JDBCConfiguration)emf.getConfiguration()).getDBDictionaryInstance();\n+            ifxDict.lockModeEnabled = true;\n+            ifxDict.lockWaitSeconds = 5;\n+        }\n+\n         EntityManager em = emf.createEntityManager();\n         \n         resetSQL();\n@@ -459,8 +468,11 @@ public void testRefreshLockTimeout() {\n             Map<String,Object> props = new HashMap<String,Object>();\n             // This property does not have any effect on Derby for the locking\n             // condition produced by this test.  Instead, Derby uses the \n-            // lock timeout value specified in the config (pom.xml)\n-            props.put(\"javax.persistence.lock.timeout\", 5000);\n+            // lock timeout value specified in the config (pom.xml).  On Informix,\n+            // the dictionary level timeout (set above) will be used.\n+            if (!(dict instanceof InformixDictionary)) {\n+                props.put(\"javax.persistence.lock.timeout\", 5000);\n+            }\n             em.getTransaction().begin();\n             getLog().trace(\"Main: refresh with force increment\");\n             em.refresh(ve, LockModeType.PESSIMISTIC_FORCE_INCREMENT, props);  "}]}

