{"sha":"d1ed604dc14307ca585ebcf7e3f55c6f3f578245","node_id":"MDY6Q29tbWl0MjA2MzY0OmQxZWQ2MDRkYzE0MzA3Y2E1ODVlYmNmN2UzZjU1YzZmM2Y1NzgyNDU=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2010-08-13T16:50:34Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2010-08-13T16:50:34Z"},"message":"OPENJPA-1753 Update same test case changes from trunk to 2.0.x.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.x@985280 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1d1f0bf6a0ff3022b1115762cc45eda82408ef09","url":"https://api.github.com/repos/apache/openjpa/git/trees/1d1f0bf6a0ff3022b1115762cc45eda82408ef09"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/d1ed604dc14307ca585ebcf7e3f55c6f3f578245","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/d1ed604dc14307ca585ebcf7e3f55c6f3f578245","html_url":"https://github.com/apache/openjpa/commit/d1ed604dc14307ca585ebcf7e3f55c6f3f578245","comments_url":"https://api.github.com/repos/apache/openjpa/commits/d1ed604dc14307ca585ebcf7e3f55c6f3f578245/comments","author":null,"committer":null,"parents":[{"sha":"077f9d7f823dedc4d7a4fcda989b4be0ebb1f32a","url":"https://api.github.com/repos/apache/openjpa/commits/077f9d7f823dedc4d7a4fcda989b4be0ebb1f32a","html_url":"https://github.com/apache/openjpa/commit/077f9d7f823dedc4d7a4fcda989b4be0ebb1f32a"}],"stats":{"total":544,"additions":286,"deletions":258},"files":[{"sha":"148ebb03d1c1996c617d6f6b0ea0f303b2107284","filename":"openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/SequencedActionsTest.java","status":"modified","additions":15,"deletions":12,"changes":27,"blob_url":"https://github.com/apache/openjpa/blob/d1ed604dc14307ca585ebcf7e3f55c6f3f578245/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/SequencedActionsTest.java","raw_url":"https://github.com/apache/openjpa/raw/d1ed604dc14307ca585ebcf7e3f55c6f3f578245/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/SequencedActionsTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/SequencedActionsTest.java?ref=d1ed604dc14307ca585ebcf7e3f55c6f3f578245","patch":"@@ -81,6 +81,7 @@\n     private String empTableName;\n     private List<TestThread> threads = null;\n \n+    @SuppressWarnings(\"deprecation\")\n     protected void commonSetUp() {\n         empTableName = getMapping(LockEmployee.class).getTable().getFullName();\n \n@@ -326,10 +327,12 @@ private void launchCommonSequence(TestThread thisThread ) {\n         LockEmployee employee = null;\n         LockModeType lockMode = null;\n         Act curAction = null;\n+        int actIndex = 0;\n         Object[][] threadSequence = actions[threadToRun];\n         for (Object[] args : threadSequence) {\n             curAction = (Act) args[0];\n-            log.trace(\"** Act=\" + Arrays.toString(args));\n+            String curAct = \"Act[t\" + threadToRun + \":\" + (++actIndex) +\"]=\" + Arrays.toString(args);\n+            log.trace(\"** \" + curAct);\n             try {\n                 switch (curAction) {\n                 case CreateEm:\n@@ -591,7 +594,7 @@ private void launchCommonSequence(TestThread thisThread ) {\n                         id = (Integer)args[1];\n                     }\n                     employee = employees.get(id);\n-                    assertNotNull(employee);\n+                    assertNotNull(curAct, employee);\n                     break;\n                 case TestEmployee:\n                     id = 1;\n@@ -602,22 +605,22 @@ private void launchCommonSequence(TestThread thisThread ) {\n                     switch (args.length) {\n                     case 4:\n                         if (args[3] != null) {\n-                            assertEquals(\"\", saveVersion\n+                            assertEquals(curAct, saveVersion\n                                 + (Integer) args[3], employee.getVersion());\n                         }\n                     case 3:\n                         if (args[2] != null) {\n-                            assertEquals(\"\", (String) args[2], employee\n+                            assertEquals(curAct, (String) args[2], employee\n                                 .getFirstName());\n                         }\n                     case 2:\n                         if (args[1] != null) {\n-                            assertEquals(\"\", id.intValue(),\n+                            assertEquals(curAct, id.intValue(),\n                                 employee.getId());\n                         }\n                         break;\n                     case 1:\n-                        assertNull(employee);\n+                        assertNull(curAct, employee);\n                     }\n                     break;\n                 case SaveVersion:\n@@ -640,7 +643,7 @@ private void launchCommonSequence(TestThread thisThread ) {\n                         + (saveVersion + increment) + \", testing=\"\n                         + employee.getVersion());\n \n-                    assertEquals(\"\", saveVersion + increment, employee\n+                    assertEquals(curAct, saveVersion + increment, employee\n                         .getVersion());\n                     break;\n                 case TestLockMode:\n@@ -654,7 +657,7 @@ private void launchCommonSequence(TestThread thisThread ) {\n                     log.trace(\"test version: expected=\" + expectedlockMode\n                         + \", testing=\" + testinglockMode);\n \n-                    assertEquals(\"\", getCanonical(expectedlockMode),\n+                    assertEquals(curAct, getCanonical(expectedlockMode),\n                         getCanonical(testinglockMode));\n                     break;\n                 case ResetException:\n@@ -696,7 +699,7 @@ private void launchCommonSequence(TestThread thisThread ) {\n                         && expectedExceptions.size() > 0) {\n                         for (Class<?> expectedException :\n                             expectedExceptions) {\n-                            if (matchExpectedException(expectedException,\n+                            if (matchExpectedException(curAct, expectedException,\n                                 curThrowable)) {\n                                 exMatched = true;\n                                 break;\n@@ -713,7 +716,7 @@ private void launchCommonSequence(TestThread thisThread ) {\n                             logStack(curThrowable);\n                         }\n                     }\n-                    assertTrue(\"Expecting=\" + expectedExceptions\n+                    assertTrue(curAct + \":Expecting=\" + expectedExceptions\n                         + \", Testing=\" + testExClass, exMatched);\n                     exThread.throwable = null;\n                     break;\n@@ -908,9 +911,9 @@ private String processException(Act curAction, Throwable t) {\n         return props;\n     }\n \n-    private boolean matchExpectedException(Class<?> expected,\n+    private boolean matchExpectedException(String curAct, Class<?> expected,\n         Throwable tested) {\n-        assertNotNull(expected);\n+        assertNotNull(curAct, expected);\n         Class<?> testExClass = null;\n         boolean exMatched = true;\n         if (tested != null) {"},{"sha":"7227f308dbaeb583808cd095269daf43bb5815ec","filename":"openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestFetchHints.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/d1ed604dc14307ca585ebcf7e3f55c6f3f578245/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestFetchHints.java","raw_url":"https://github.com/apache/openjpa/raw/d1ed604dc14307ca585ebcf7e3f55c6f3f578245/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestFetchHints.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestFetchHints.java?ref=d1ed604dc14307ca585ebcf7e3f55c6f3f578245","patch":"@@ -20,7 +20,6 @@\n \n import java.sql.Connection;\n import java.sql.ResultSet;\n-import java.util.HashMap;\n \n import javax.persistence.EntityManager;\n import javax.persistence.LockModeType;"},{"sha":"11ebae8e28aa5e43799d907b6d139200c97f62f1","filename":"openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestMixedLockManagerDeadlock.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/d1ed604dc14307ca585ebcf7e3f55c6f3f578245/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestMixedLockManagerDeadlock.java","raw_url":"https://github.com/apache/openjpa/raw/d1ed604dc14307ca585ebcf7e3f55c6f3f578245/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestMixedLockManagerDeadlock.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestMixedLockManagerDeadlock.java?ref=d1ed604dc14307ca585ebcf7e3f55c6f3f578245","patch":"@@ -121,7 +121,8 @@ private void commonNamedQueryTest( String testName,\n             {Act.WaitAllChildren},\n             {Act.TestException, 1, t1Exceptions},\n \n-            {Act.RollbackTx}\n+            {Act.RollbackTx},\n+            {Act.CloseEm}\n         };\n         Object[][] thread1 = {\n             {Act.CreateEm},\n@@ -134,6 +135,7 @@ private void commonNamedQueryTest( String testName,\n             {Act.NamedQueryWithLock, \"findEmployeeById\", 1, t1Lock, \"openjpa.hint.IgnorePreparedQuery\", true},            \n \n             {Act.RollbackTx},\n+            {Act.CloseEm}\n         };\n         launchActionSequence(testName, parameters, threadMain, thread1);\n     }"},{"sha":"149dbd3b5806826f5614d3dc5fa7e1e35a6532fc","filename":"openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestMixedLockManagerFindBasic.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/d1ed604dc14307ca585ebcf7e3f55c6f3f578245/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestMixedLockManagerFindBasic.java","raw_url":"https://github.com/apache/openjpa/raw/d1ed604dc14307ca585ebcf7e3f55c6f3f578245/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestMixedLockManagerFindBasic.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestMixedLockManagerFindBasic.java?ref=d1ed604dc14307ca585ebcf7e3f55c6f3f578245","patch":"@@ -111,6 +111,7 @@ public void testCommon(String testName, LockModeType lockMode,\n             { Act.Clear },\n             { Act.Find, 1 },\n             { Act.TestEmployee, 1, lockMode.toString(), 0 },\n+            { Act.CloseEm }\n         };\n \n         launchActionSequence(testName, \"LockMode=\" + lockMode, threadMain);"},{"sha":"859d3f5000e42309ab958d57b3027416dd563cbb","filename":"openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestMixedLockManagerFindException.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/d1ed604dc14307ca585ebcf7e3f55c6f3f578245/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestMixedLockManagerFindException.java","raw_url":"https://github.com/apache/openjpa/raw/d1ed604dc14307ca585ebcf7e3f55c6f3f578245/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestMixedLockManagerFindException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestMixedLockManagerFindException.java?ref=d1ed604dc14307ca585ebcf7e3f55c6f3f578245","patch":"@@ -67,6 +67,7 @@ public void testFindTxReqExceptions() {\n             \n             {Act.FindWithLock, 1, LockModeType.PESSIMISTIC_FORCE_INCREMENT },\n             {Act.TestException, 0, TransactionRequiredException.class },\n+            {Act.CloseEm},\n         };\n         launchActionSequence(\"testLockTxReqExceptions()\",\n             null, threadMainTxReqTest);\n@@ -182,6 +183,7 @@ public void testFindIllegalArgrumentExceptions() {\n             {Act.FindObject, LockEmployee.class, Boolean.TRUE, \n                 LockModeType.PESSIMISTIC_FORCE_INCREMENT },\n             {Act.TestException, 0, IllegalArgumentException.class },\n+            {Act.CloseEm}\n         };\n         launchActionSequence(\"testLockIllegalArgrumentExceptions()\",\n             \"Test invalid entity.\", threadMainInvEntityIllegalArgTest);\n@@ -239,6 +241,7 @@ public void commonLockOptimisticLockExceptions(LockModeType lockMode,\n                 ? OptimisticLockException.class : null},\n             {Act.TestException, 1, expectingOptLockException2\n                     ? OptimisticLockException.class : null},\n+            {Act.CloseEm}\n         };\n         Object[][] thread1OptLockExTest = {\n             {Act.CreateEm},\n@@ -252,6 +255,7 @@ public void commonLockOptimisticLockExceptions(LockModeType lockMode,\n             \n             {Act.CommitTx},\n             {Act.Notify, 0},\n+            {Act.CloseEm}\n         };        \n         launchActionSequence(\"testLockOptimisticLockExceptions()\", null,\n             threadMainOptLockExTest, thread1OptLockExTest);"},{"sha":"8f57c1997cfcd00fb0c94b5b7ea4d5a3edde130f","filename":"openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestMixedLockManagerFindPermutation.java","status":"modified","additions":66,"deletions":60,"changes":126,"blob_url":"https://github.com/apache/openjpa/blob/d1ed604dc14307ca585ebcf7e3f55c6f3f578245/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestMixedLockManagerFindPermutation.java","raw_url":"https://github.com/apache/openjpa/raw/d1ed604dc14307ca585ebcf7e3f55c6f3f578245/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestMixedLockManagerFindPermutation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestMixedLockManagerFindPermutation.java?ref=d1ed604dc14307ca585ebcf7e3f55c6f3f578245","patch":"@@ -59,8 +59,8 @@ public void testFindReadWrite() {\n     public void testFindReadPessimisticRead() {\n         commonFindTest(\n             \"testFind(Read,Commit/PessimisticRead,Commit)\",\n-            LockModeType.READ, Act.CommitTx, 1, null, \n-            LockModeType.PESSIMISTIC_READ, Act.CommitTx, 0, null);\n+            LockModeType.READ, Act.CommitTx, 1, ExpectingOptimisticLockExClass, \n+            LockModeType.PESSIMISTIC_READ, Act.CommitTx, 1, null);\n         commonFindTest(\n             \"testFind(Read,Commit/PessimisticRead,Rollback)\",\n             LockModeType.READ, Act.CommitTx, 1, null,\n@@ -70,8 +70,8 @@ public void testFindReadPessimisticRead() {\n     public void testFindReadPessimisticWrite() {\n         commonFindTest(\n             \"testFind(Read,Commit/PessimisticWrite,Commit)\",\n-            LockModeType.READ, Act.CommitTx, 1, null, \n-            LockModeType.PESSIMISTIC_WRITE, Act.CommitTx, 0, null);\n+            LockModeType.READ, Act.CommitTx, 1, ExpectingOptimisticLockExClass, \n+            LockModeType.PESSIMISTIC_WRITE, Act.CommitTx, 1, null);\n         commonFindTest(\n             \"testFind(Read,Commit/PessimisticWrite,Rollback)\",\n             LockModeType.READ, Act.CommitTx, 1, null,\n@@ -115,8 +115,8 @@ public void testFindWriteWrite() {\n     public void testFindWritePessimisticRead() {\n         commonFindTest(\n             \"testFind(Write,Commit/PessimisticRead,Commit)\",\n-            LockModeType.WRITE, Act.CommitTx, 1, null, \n-            LockModeType.PESSIMISTIC_READ, Act.CommitTx, 0, null);\n+            LockModeType.WRITE, Act.CommitTx, 1, ExpectingOptimisticLockExClass, \n+            LockModeType.PESSIMISTIC_READ, Act.CommitTx, 1, null);\n         commonFindTest(\n             \"testFind(Write,Commit/PessimisticRead,Rollback)\",\n             LockModeType.WRITE, Act.CommitTx, 1, null,\n@@ -126,8 +126,8 @@ public void testFindWritePessimisticRead() {\n     public void testFindWritePessimisticWrite() {\n         commonFindTest(\n             \"testFind(Write,Commit/PessimisticWrite,Commit)\",\n-            LockModeType.WRITE, Act.CommitTx, 1, null, \n-            LockModeType.PESSIMISTIC_WRITE, Act.CommitTx, 0, null);\n+            LockModeType.WRITE, Act.CommitTx, 1, ExpectingOptimisticLockExClass, \n+            LockModeType.PESSIMISTIC_WRITE, Act.CommitTx, 1, null);\n         commonFindTest(\n             \"testFind(Write,Commit/PessimisticWrite,Rollback)\",\n             LockModeType.WRITE, Act.CommitTx, 1, null,\n@@ -172,7 +172,7 @@ public void testFindPessimisticReadPessimisticRead() {\n         commonFindTest(\n             \"testFind(PessimisticRead,Commit/PessimisticRead,Commit)\",\n             LockModeType.PESSIMISTIC_READ, Act.CommitTx, 1, null, \n-            LockModeType.PESSIMISTIC_READ, Act.CommitTx, 0, null);\n+            LockModeType.PESSIMISTIC_READ, Act.CommitTx, 1, null);\n         commonFindTest(\n             \"testFind(PessimisticRead,Commit/PessimisticRead,Rollback)\",\n             LockModeType.PESSIMISTIC_READ, Act.CommitTx, 1, null,\n@@ -183,7 +183,7 @@ public void testFindPessimisticReadPessimisticWrite() {\n         commonFindTest(\n             \"testFind(PessimisticRead,Commit/PessimisticWrite,Commit)\",\n             LockModeType.PESSIMISTIC_READ, Act.CommitTx, 1, null, \n-            LockModeType.PESSIMISTIC_WRITE, Act.CommitTx, 0, null); \n+            LockModeType.PESSIMISTIC_WRITE, Act.CommitTx, 1, null); \n         commonFindTest(\n             \"testFind(PessimisticRead,Commit/PessimisticWrite,Rollback)\",\n             LockModeType.PESSIMISTIC_READ, Act.CommitTx, 1, null,\n@@ -228,7 +228,7 @@ public void testFindPessimsiticWritePessimisticRead() {\n         commonFindTest(\n             \"testFind(PessimsiticWrite,Commit/PessimisticRead,Commit)\",\n             LockModeType.PESSIMISTIC_WRITE, Act.CommitTx, 1, null, \n-            LockModeType.PESSIMISTIC_READ, Act.CommitTx, 0, null); \n+            LockModeType.PESSIMISTIC_READ, Act.CommitTx, 1, null); \n         commonFindTest(\n             \"testFind(PessimsiticWrite,Commit/PessimisticRead,Rollback)\",\n             LockModeType.PESSIMISTIC_WRITE, Act.CommitTx, 1, null,\n@@ -239,7 +239,7 @@ public void testFindPessimsiticWritePessimisticWrite() {\n         commonFindTest(\n             \"testFind(PessimsiticWrite,Commit/PessimisticWrite,Commit)\",\n             LockModeType.PESSIMISTIC_WRITE, Act.CommitTx, 1, null, \n-            LockModeType.PESSIMISTIC_WRITE, Act.CommitTx, 0, null); \n+            LockModeType.PESSIMISTIC_WRITE, Act.CommitTx, 1, null); \n         commonFindTest(\n             \"testFind(PessimsiticWrite,Commit/PessimisticWrite,Rollback)\",\n             LockModeType.PESSIMISTIC_WRITE, Act.CommitTx, 1, null,\n@@ -284,7 +284,7 @@ public void testFindPessimsiticForceIncPessimisticRead() {\n         commonFindTest(\n             \"testFind(PessimsiticForceInc,Commit/PessimisticRead,Commit)\",\n             LockModeType.PESSIMISTIC_FORCE_INCREMENT, Act.CommitTx, 1, null, \n-            LockModeType.PESSIMISTIC_READ, Act.CommitTx, 0, null); \n+            LockModeType.PESSIMISTIC_READ, Act.CommitTx, 1, null); \n         commonFindTest(\n             \"testFind(PessimsiticForceInc,Commit/PessimisticRead,Rollback)\",\n             LockModeType.PESSIMISTIC_FORCE_INCREMENT, Act.CommitTx, 1, null,\n@@ -295,7 +295,7 @@ public void testFindPessimsiticForceIncPessimisticWrite() {\n         commonFindTest(\n             \"testFind(PessimsiticForceInc,Commit/PessimisticWrite,Commit)\",\n             LockModeType.PESSIMISTIC_FORCE_INCREMENT, Act.CommitTx, 1, null, \n-            LockModeType.PESSIMISTIC_WRITE, Act.CommitTx, 0, null);\n+            LockModeType.PESSIMISTIC_WRITE, Act.CommitTx, 1, null);\n         commonFindTest(\n             \"testFind(PessimsiticForceInc,Commit/PessimisticWrite,Rollback)\",\n             LockModeType.PESSIMISTIC_FORCE_INCREMENT, Act.CommitTx, 1, null,\n@@ -327,51 +327,57 @@ private void commonFindTest( String testName,\n                 \", expectedEx= \" + Arrays.toString(t2Exceptions)};\n             \n         Object[][] threadMain = {\n-            {Act.CreateEm},\n-            {Act.Find},\n-            {Act.SaveVersion},\n-            {Act.TestEmployee, 1, Default_FirstName},\n-            \n-            {Act.NewThread, 1 },\n-            {Act.NewThread, 2 },\n-            {Act.StartThread, 1 },\n-            {Act.Wait},\n-            {Act.StartThread, 2 },\n-            {Act.Notify, 1, 1000 },\n-            {Act.Notify, 2, 1000 },\n-            {Act.WaitAllChildren},\n-            {Act.Find},\n-            {Act.TestEmployee, 1},\n-            {Act.TestException, 1, t1Exceptions },\n-            {Act.TestException, 2, t2Exceptions },\n-        };\n-        Object[][] thread1 = {\n-            {Act.CreateEm},\n-            {Act.StartTx},\n-            {Act.FindWithLock, 1, t1Lock},\n-            {Act.SaveVersion},\n-            {Act.TestException},\n-            {Act.Notify, 0},\n-            {Act.Wait},\n-            {Act.UpdateEmployee},\n-            \n-            {t1IsCommit},\n-            {Act.Find},\n-            {Act.TestEmployee, 1, null, t1VersionInc}\n-        };\n-        Object[][] thread2 = {\n-            {Act.CreateEm},\n-            {Act.StartTx},\n-            {Act.FindWithLock, 1, t2Lock},\n-            {Act.SaveVersion},\n-            {Act.Notify, 0},\n-            {Act.Wait},\n-            \n-            {t2IsCommit},\n-            {Act.Find},\n-            {Act.TestEmployee, 1, null, t2VersionInc}\n-        };\n-        launchActionSequence(testName, parameters, threadMain, thread1,\n-            thread2);\n+                {Act.CreateEm},\n+                {Act.Find},\n+                {Act.SaveVersion},\n+                {Act.TestEmployee, 1, Default_FirstName},\n+                {Act.CloseEm},\n+                {Act.Sleep, 100},\n+\n+                {Act.CreateEm},\n+                {Act.StartTx},\n+                {Act.FindWithLock, 1, t1Lock},\n+                {Act.SaveVersion},\n+                {Act.TestException},\n+                \n+                {Act.NewThread, 1 },\n+                {Act.StartThread, 1 },\n+                \n+                {Act.Wait},\n+                {Act.UpdateEmployee},                \n+                {t1IsCommit},\n+                \n+                {Act.Notify, 1},\n+\n+                {Act.Find},\n+                \n+                {Act.WaitAllChildren},\n+                {Act.Find},\n+                {Act.TestEmployee, 1, null, t1VersionInc},\n+                {Act.TestException, 0, t1Exceptions },\n+                {Act.TestException, 1, t2Exceptions },\n+                {Act.CloseEm}\n+            };\n+\n+            Object[][] thread1 = {\n+                {Act.CreateEm},\n+                {Act.StartTx},\n+                {Act.FindWithLock, 1, t2Lock},\n+                {Act.SaveVersion},\n+                {Act.TestException},\n+                {Act.Notify, 0},\n+                \n+                {Act.Wait},\n+                {Act.Sleep, 2000},  // sleep for at least 2 sec so that the entity name updated with timestamp \n+                                    // in each of the 2 threads are different. \n+                {Act.UpdateEmployee},\n+                \n+                {t2IsCommit},\n+                {Act.Sleep, 1000},\n+                {Act.Find},\n+                {Act.TestEmployee, 1, null, t2VersionInc},\n+                {Act.CloseEm}\n+            };\n+            launchActionSequence(testName, parameters, threadMain, thread1);\n     }\n }"},{"sha":"c4b7f3401bb8521dfe5aa749c30ca12bcbcf11a4","filename":"openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestMixedLockManagerLockBasic.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/d1ed604dc14307ca585ebcf7e3f55c6f3f578245/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestMixedLockManagerLockBasic.java","raw_url":"https://github.com/apache/openjpa/raw/d1ed604dc14307ca585ebcf7e3f55c6f3f578245/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestMixedLockManagerLockBasic.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestMixedLockManagerLockBasic.java?ref=d1ed604dc14307ca585ebcf7e3f55c6f3f578245","patch":"@@ -109,6 +109,7 @@ public void testCommon(String testName, LockModeType lockMode,\n             { Act.Clear },\n             { Act.Find, 1 },\n             { Act.TestEmployee, 1, lockMode.toString(), 0 },\n+            { Act.CloseEm }\n         };\n         launchActionSequence(testName, \"LockMode=\" + lockMode, threadMain);\n     }"},{"sha":"4ecc9b03273041f58e52963c809b8e1f5ba75477","filename":"openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestMixedLockManagerLockException.java","status":"modified","additions":8,"deletions":1,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/d1ed604dc14307ca585ebcf7e3f55c6f3f578245/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestMixedLockManagerLockException.java","raw_url":"https://github.com/apache/openjpa/raw/d1ed604dc14307ca585ebcf7e3f55c6f3f578245/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestMixedLockManagerLockException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestMixedLockManagerLockException.java?ref=d1ed604dc14307ca585ebcf7e3f55c6f3f578245","patch":"@@ -66,6 +66,7 @@ public void testLockTxReqExceptions() {\n             \n             {Act.Lock, 1, LockModeType.PESSIMISTIC_FORCE_INCREMENT },\n             {Act.TestException, 0, TransactionRequiredException.class },\n+            {Act.CloseEm}\n         };\n         \n         launchActionSequence(\"testLockTxReqExceptions()\",\n@@ -124,7 +125,8 @@ public void testLockIllegalArgrumentExceptions() {\n             {Act.TestException, 0, IllegalArgumentException.class },\n             {Act.LockObject, \"null\", LockModeType.PESSIMISTIC_FORCE_INCREMENT },\n             {Act.TestException, 0, IllegalArgumentException.class },\n-        };\n+            {Act.CloseEm}\n+       };\n         launchActionSequence(\"testLockIllegalArgrumentExceptions()\",\n             \"Test invalid entity.\", threadMainInvEntityIllegalArgTest);\n         \n@@ -163,6 +165,7 @@ public void testLockIllegalArgrumentExceptions() {\n \n             {Act.Lock, 2, LockModeType.PESSIMISTIC_FORCE_INCREMENT },\n             {Act.TestException, 0, IllegalArgumentException.class },\n+            {Act.CloseEm}\n         };\n         launchActionSequence(\"testLockIllegalArgrumentExceptions()\",\n             \"Test detached entity.\", threadMainDetachEntityIllegalArgTest);\n@@ -200,6 +203,7 @@ public void testLockIllegalArgrumentExceptions() {\n \n             {Act.Lock, 2, LockModeType.PESSIMISTIC_FORCE_INCREMENT },\n             {Act.TestException, 0, IllegalArgumentException.class },\n+            {Act.CloseEm}\n         };        \n         launchActionSequence(\"testLockIllegalArgrumentExceptions()\",\n             \"Test detached entity using serialization.\",\n@@ -238,6 +242,7 @@ public void testLockIllegalArgrumentExceptions() {\n             {Act.TestException},\n             \n             {Act.RollbackTx},\n+            {Act.CloseEm}\n         };\n         launchActionSequence(\n             \"testLockIllegalArgrumentExceptions()\",\n@@ -296,6 +301,7 @@ public void commonLockOptimisticLockExceptions(LockModeType lockMode,\n                 ? OptimisticLockException.class : null},\n             \n             {Act.RollbackTx},\n+            {Act.CloseEm}\n         };\n         Object[][] thread1OptLockExTest = {\n             {Act.CreateEm},\n@@ -309,6 +315,7 @@ public void commonLockOptimisticLockExceptions(LockModeType lockMode,\n             \n             {Act.CommitTx},\n             {Act.Notify, 0},\n+            {Act.CloseEm}\n         };        \n         launchActionSequence(\"testLockOptimisticLockExceptions()\", null,\n             threadMainOptLockExTest, thread1OptLockExTest);"},{"sha":"ee6993e86860febfb2d8ec9dda0531f90b8c82f9","filename":"openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestMixedLockManagerLockPermutation.java","status":"modified","additions":118,"deletions":103,"changes":221,"blob_url":"https://github.com/apache/openjpa/blob/d1ed604dc14307ca585ebcf7e3f55c6f3f578245/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestMixedLockManagerLockPermutation.java","raw_url":"https://github.com/apache/openjpa/raw/d1ed604dc14307ca585ebcf7e3f55c6f3f578245/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestMixedLockManagerLockPermutation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestMixedLockManagerLockPermutation.java?ref=d1ed604dc14307ca585ebcf7e3f55c6f3f578245","patch":"@@ -38,286 +38,295 @@ public void testLockReadRead() {\n         commonLockTest(\n             \"testLock(Read,Commit/Read,Commit)\",\n             LockModeType.READ, Act.CommitTx, 1, null, \n-            LockModeType.READ, Act.CommitTx, 1, ExpectingOptimisticLockExClass);\n+            LockModeType.READ, Act.CommitTx, 1, null, ExpectingOptimisticLockExClass);\n         commonLockTest(\n             \"testLock(Read,Commit/Read,Rollback)\",\n             LockModeType.READ, Act.CommitTx, 1, null,\n-            LockModeType.READ, Act.RollbackTx, 1, null);\n+            LockModeType.READ, Act.RollbackTx, 1, null, null);\n     }\n     \n     public void testLockReadWrite() {\n         commonLockTest(\n             \"testLock(Read,Commit/Write,Commit)\",\n             LockModeType.READ, Act.CommitTx, 1, null,\n-            LockModeType.WRITE, Act.CommitTx, 1, ExpectingOptimisticLockExClass);\n+            LockModeType.WRITE, Act.CommitTx, 1, null, ExpectingOptimisticLockExClass);\n         commonLockTest(\n             \"testLock(Read,Commit/Write,Rollback)\",\n             LockModeType.READ, Act.CommitTx, 1, null,\n-            LockModeType.WRITE, Act.RollbackTx, 1, null);\n+            LockModeType.WRITE, Act.RollbackTx, 1, null, null);\n     }\n     \n     public void testLockReadPessimisticRead() {\n         commonLockTest(\n             \"testLock(Read,Commit/PessimisticRead,Commit)\",\n-            LockModeType.READ, Act.CommitTx, 1, null, \n-            LockModeType.PESSIMISTIC_READ, Act.CommitTx, 0, null);\n+            LockModeType.READ, Act.CommitTx, 1, ExpectingOptimisticLockExClass, \n+            LockModeType.PESSIMISTIC_READ, Act.CommitTx, 1, null, null);\n         commonLockTest(\n             \"testLock(Read,Commit/PessimisticRead,Rollback)\",\n             LockModeType.READ, Act.CommitTx, 1, null,\n-            LockModeType.PESSIMISTIC_READ, Act.RollbackTx, 1, null);\n+            LockModeType.PESSIMISTIC_READ, Act.RollbackTx, 1, null, null);\n     }\n     \n     public void testLockReadPessimisticWrite() {\n         commonLockTest(\n             \"testLock(Read,Commit/PessimisticWrite,Commit)\",\n-            LockModeType.READ, Act.CommitTx, 1, null, \n-            LockModeType.PESSIMISTIC_WRITE, Act.CommitTx, 0, null);\n+            LockModeType.READ, Act.CommitTx, 1, ExpectingOptimisticLockExClass, \n+            LockModeType.PESSIMISTIC_WRITE, Act.CommitTx, 1, null, null);\n         commonLockTest(\n             \"testLock(Read,Commit/PessimisticWrite,Rollback)\",\n             LockModeType.READ, Act.CommitTx, 1, null,\n-            LockModeType.PESSIMISTIC_WRITE, Act.RollbackTx, 1, null);\n+            LockModeType.PESSIMISTIC_WRITE, Act.RollbackTx, 1, null, null);\n     }\n     \n     public void testLockReadPessimisticForceInc() {\n         commonLockTest(\n             \"testLock(Read,Commit/PessimisticForceInc,Commit)\",\n             LockModeType.READ, Act.CommitTx, 1, ExpectingOptimisticLockExClass, \n-            LockModeType.PESSIMISTIC_FORCE_INCREMENT, Act.CommitTx, 1, null);\n+            LockModeType.PESSIMISTIC_FORCE_INCREMENT, Act.CommitTx, 1, null, null);\n         commonLockTest(\n             \"testLock(Read,Commit/PessimisticForceInc,Rollback)\",\n             LockModeType.READ, Act.CommitTx, 1, null,\n-            LockModeType.PESSIMISTIC_FORCE_INCREMENT, Act.RollbackTx, 1, null);\n+            LockModeType.PESSIMISTIC_FORCE_INCREMENT, Act.RollbackTx, 1, null, null);\n     }\n     \n     /* ======== Thread 1 : Write Lock ============*/\n     public void testLockWriteRead() {\n         commonLockTest(\n             \"testLock(Write,Commit/Read,Commit)\",\n             LockModeType.WRITE, Act.CommitTx, 1, null, \n-            LockModeType.READ, Act.CommitTx, 1, ExpectingOptimisticLockExClass);\n+            LockModeType.READ, Act.CommitTx, 1, null, ExpectingOptimisticLockExClass);\n         commonLockTest(\n             \"testLock(Write,Commit/Read,Rollback)\",\n             LockModeType.WRITE, Act.CommitTx, 1, null,\n-            LockModeType.READ, Act.RollbackTx, 1, null);\n+            LockModeType.READ, Act.RollbackTx, 1, null, null);\n     }\n     \n     public void testLockWriteWrite() {\n         commonLockTest(\n             \"testLock(Write,Commit/Write,Commit)\",\n             LockModeType.WRITE, Act.CommitTx, 1, null,\n-            LockModeType.WRITE, Act.CommitTx, 1, ExpectingOptimisticLockExClass);\n+            LockModeType.WRITE, Act.CommitTx, 1, null, ExpectingOptimisticLockExClass);\n         commonLockTest(\n             \"testLock(Write,Commit/Write,Rollback)\",\n             LockModeType.WRITE, Act.CommitTx, 1, null,\n-            LockModeType.WRITE, Act.RollbackTx, 1, null);\n+            LockModeType.WRITE, Act.RollbackTx, 1, null, null);\n     }\n     \n     public void testLockWritePessimisticRead() {\n         commonLockTest(\n             \"testLock(Write,Commit/PessimisticRead,Commit)\",\n-            LockModeType.WRITE, Act.CommitTx, 1, null, \n-            LockModeType.PESSIMISTIC_READ, Act.CommitTx, 0, null);\n+            LockModeType.WRITE, Act.CommitTx, 1, ExpectingOptimisticLockExClass, \n+            LockModeType.PESSIMISTIC_READ, Act.CommitTx, 1, null, null);\n         commonLockTest(\n             \"testLock(Write,Commit/PessimisticRead,Rollback)\",\n             LockModeType.WRITE, Act.CommitTx, 1, null,\n-            LockModeType.PESSIMISTIC_READ, Act.RollbackTx, 1, null);\n+            LockModeType.PESSIMISTIC_READ, Act.RollbackTx, 1, null, null);\n     }\n     \n     public void testLockWritePessimisticWrite() {\n         commonLockTest(\n             \"testLock(Write,Commit/PessimisticWrite,Commit)\",\n-            LockModeType.WRITE, Act.CommitTx, 1, null, \n-            LockModeType.PESSIMISTIC_WRITE, Act.CommitTx, 0, null);\n+            LockModeType.WRITE, Act.CommitTx, 1, ExpectingOptimisticLockExClass, \n+            LockModeType.PESSIMISTIC_WRITE, Act.CommitTx, 1, null, null);\n         commonLockTest(\n             \"testLock(Write,Commit/PessimisticWrite,Rollback)\",\n             LockModeType.WRITE, Act.CommitTx, 1, null,\n-            LockModeType.PESSIMISTIC_WRITE, Act.RollbackTx, 1, null);\n+            LockModeType.PESSIMISTIC_WRITE, Act.RollbackTx, 1, null, null);\n     }\n     \n     public void testLockWritePessimisticForceInc() {\n         commonLockTest(\n             \"testLock(Write,Commit/PessimisticForceInc,Commit)\",\n             LockModeType.WRITE, Act.CommitTx, 1, ExpectingOptimisticLockExClass, \n-            LockModeType.PESSIMISTIC_FORCE_INCREMENT, Act.CommitTx, 1, null);\n+            LockModeType.PESSIMISTIC_FORCE_INCREMENT, Act.CommitTx, 1, null, null);\n         commonLockTest(\n             \"testLock(Write,Commit/PessimisticForceInc,Rollback)\",\n             LockModeType.WRITE, Act.CommitTx, 1, null,\n-            LockModeType.PESSIMISTIC_FORCE_INCREMENT, Act.RollbackTx, 1, null);\n+            LockModeType.PESSIMISTIC_FORCE_INCREMENT, Act.RollbackTx, 1, null, null);\n     }\n     \n     /* ======== Thread 1 : PessimisticRead Lock ============*/\n     public void testLockPessimisticReadRead() {\n         commonLockTest(\n             \"testLock(PessimisticRead,Commit/Read,Commit)\",\n             LockModeType.PESSIMISTIC_READ, Act.CommitTx, 1, null, \n-            LockModeType.READ, Act.CommitTx, 1, ExpectingOptimisticLockExClass);\n+            LockModeType.READ, Act.CommitTx, 1, null, ExpectingOptimisticLockExClass);\n         commonLockTest(\n             \"testLock(PessimisticRead,Commit/Read,Rollback)\",\n             LockModeType.PESSIMISTIC_READ, Act.CommitTx, 1, null,\n-            LockModeType.READ, Act.RollbackTx, 1, null);\n+            LockModeType.READ, Act.RollbackTx, 1, null, null);\n     }\n     \n     public void testLockPessimisticReadWrite() {\n         commonLockTest(\n             \"testLock(PessimisticRead,Commit/Write,Commit)\",\n             LockModeType.PESSIMISTIC_READ, Act.CommitTx, 1, null,\n-            LockModeType.WRITE, Act.CommitTx, 1, ExpectingOptimisticLockExClass);\n+            LockModeType.WRITE, Act.CommitTx, 1, null, ExpectingOptimisticLockExClass);\n         commonLockTest(\n             \"testLock(PessimisticRead,Commit/Write,Rollback)\",\n             LockModeType.PESSIMISTIC_READ, Act.CommitTx, 1, null,\n-            LockModeType.WRITE, Act.RollbackTx, 1, null);\n+            LockModeType.WRITE, Act.RollbackTx, 1, null, null);\n     }\n     \n     public void testLockPessimisticReadPessimisticRead() {\n         commonLockTest(\n             \"testLock(PessimisticRead,Commit/PessimisticRead,Commit)\",\n             LockModeType.PESSIMISTIC_READ, Act.CommitTx, 1, null, \n-            LockModeType.PESSIMISTIC_READ, Act.CommitTx, 1, ExpectingOptimisticLockExClass);\n+            LockModeType.PESSIMISTIC_READ, Act.CommitTx, 1, ExpectingOptimisticLockExClass,\n+            ExpectingOptimisticLockExClass);\n         commonLockTest(\n             \"testLock(PessimisticRead,Commit/PessimisticRead,Rollback)\",\n             LockModeType.PESSIMISTIC_READ, Act.CommitTx, 1, null,\n-            LockModeType.PESSIMISTIC_READ, Act.RollbackTx, 1, ExpectingOptimisticLockExClass);\n+            LockModeType.PESSIMISTIC_READ, Act.RollbackTx, 1, ExpectingOptimisticLockExClass, null);\n     }\n     \n     public void testLockPessimisticReadPessimisticWrite() {\n         commonLockTest(\n             \"testLock(PessimisticRead,Commit/PessimisticWrite,Commit)\",\n             LockModeType.PESSIMISTIC_READ, Act.CommitTx, 1, null, \n-            LockModeType.PESSIMISTIC_WRITE, Act.CommitTx, 1, ExpectingOptimisticLockExClass);\n+            LockModeType.PESSIMISTIC_WRITE, Act.CommitTx, 1, ExpectingOptimisticLockExClass,\n+            ExpectingOptimisticLockExClass);\n         commonLockTest(\n             \"testLock(PessimisticRead,Commit/PessimisticWrite,Rollback)\",\n             LockModeType.PESSIMISTIC_READ, Act.CommitTx, 1, null,\n-            LockModeType.PESSIMISTIC_WRITE, Act.RollbackTx, 1, ExpectingOptimisticLockExClass);\n+            LockModeType.PESSIMISTIC_WRITE, Act.RollbackTx, 1, ExpectingOptimisticLockExClass, null);\n     }\n     \n     public void testLockPessimisticReadPessimisticForceInc() {\n         commonLockTest(\n             \"testLock(PessimisticRead,Commit/PessimisticForceInc,Commit)\",\n             LockModeType.PESSIMISTIC_READ, Act.CommitTx, 1, null, \n-            LockModeType.PESSIMISTIC_FORCE_INCREMENT, Act.CommitTx, 1, ExpectingOptimisticLockExClass);\n+            LockModeType.PESSIMISTIC_FORCE_INCREMENT, Act.CommitTx, 1, ExpectingOptimisticLockExClass,\n+            ExpectingOptimisticLockExClass);\n         commonLockTest(\n             \"testLock(PessimisticRead,Commit/PessimisticForceInc,Rollback)\",\n             LockModeType.PESSIMISTIC_READ, Act.CommitTx, 1, null,\n-            LockModeType.PESSIMISTIC_FORCE_INCREMENT, Act.RollbackTx, 1, ExpectingOptimisticLockExClass);\n+            LockModeType.PESSIMISTIC_FORCE_INCREMENT, Act.RollbackTx, 1, ExpectingOptimisticLockExClass, null);\n     }\n     \n     /* ======== Thread 1 : Pessimsitic Write Lock ============*/\n     public void testLockPessimsiticWriteRead() {\n         commonLockTest(\n             \"testLock(PessimsiticWrite,Commit/Read,Commit)\",\n             LockModeType.PESSIMISTIC_WRITE, Act.CommitTx, 1, null, \n-            LockModeType.READ, Act.CommitTx, 1, ExpectingOptimisticLockExClass);\n+            LockModeType.READ, Act.CommitTx, 1, null, ExpectingOptimisticLockExClass);\n         commonLockTest(\n             \"testLock(PessimsiticWrite,Commit/Read,Rollback)\",\n             LockModeType.PESSIMISTIC_WRITE, Act.CommitTx, 1, null,\n-            LockModeType.READ, Act.RollbackTx, 1, null);\n+            LockModeType.READ, Act.RollbackTx, 1, null, null);\n     }\n     \n     public void testLockPessimsiticWriteWrite() {\n         commonLockTest(\n             \"testLock(PessimsiticWrite,Commit/Write,Commit)\",\n             LockModeType.PESSIMISTIC_WRITE, Act.CommitTx, 1, null,\n-            LockModeType.WRITE, Act.CommitTx, 1, ExpectingOptimisticLockExClass);\n+            LockModeType.WRITE, Act.CommitTx, 1, null, ExpectingOptimisticLockExClass);\n         commonLockTest(\n             \"testLock(PessimsiticWrite,Commit/Write,Rollback)\",\n             LockModeType.PESSIMISTIC_WRITE, Act.CommitTx, 1, null,\n-            LockModeType.WRITE, Act.RollbackTx, 1, null);\n+            LockModeType.WRITE, Act.RollbackTx, 1, null, null);\n     }\n     \n     public void testLockPessimsiticWritePessimisticRead() {\n         commonLockTest(\n             \"testLock(PessimsiticWrite,Commit/PessimisticRead,Commit)\",\n             LockModeType.PESSIMISTIC_WRITE, Act.CommitTx, 1, null, \n-            LockModeType.PESSIMISTIC_READ, Act.CommitTx, 1, ExpectingOptimisticLockExClass);\n+            LockModeType.PESSIMISTIC_READ, Act.CommitTx, 1, ExpectingOptimisticLockExClass,\n+            ExpectingOptimisticLockExClass);\n         commonLockTest(\n             \"testLock(PessimsiticWrite,Commit/PessimisticRead,Rollback)\",\n             LockModeType.PESSIMISTIC_WRITE, Act.CommitTx, 1, null,\n-            LockModeType.PESSIMISTIC_READ, Act.RollbackTx, 1, ExpectingOptimisticLockExClass);\n+            LockModeType.PESSIMISTIC_READ, Act.RollbackTx, 1, ExpectingOptimisticLockExClass, null);\n     }\n     \n     public void testLockPessimsiticWritePessimisticWrite() {\n         commonLockTest(\n             \"testLock(PessimsiticWrite,Commit/PessimisticWrite,Commit)\",\n             LockModeType.PESSIMISTIC_WRITE, Act.CommitTx, 1, null, \n-            LockModeType.PESSIMISTIC_WRITE, Act.CommitTx, 1, ExpectingOptimisticLockExClass);\n+            LockModeType.PESSIMISTIC_WRITE, Act.CommitTx, 1, ExpectingOptimisticLockExClass,\n+            ExpectingOptimisticLockExClass);\n         commonLockTest(\n             \"testLock(PessimsiticWrite,Commit/PessimisticWrite,Rollback)\",\n             LockModeType.PESSIMISTIC_WRITE, Act.CommitTx, 1, null,\n-            LockModeType.PESSIMISTIC_WRITE, Act.RollbackTx, 1, ExpectingOptimisticLockExClass);\n+            LockModeType.PESSIMISTIC_WRITE, Act.RollbackTx, 1, ExpectingOptimisticLockExClass, null);\n     }\n     \n     public void testLockPessimsiticWritePessimisticForceInc() {\n         commonLockTest(\n             \"testLock(PessimsiticWrite,Commit/PessimisticForceInc,Commit)\",\n             LockModeType.PESSIMISTIC_WRITE, Act.CommitTx, 1, null, \n-            LockModeType.PESSIMISTIC_FORCE_INCREMENT, Act.CommitTx, 1, ExpectingOptimisticLockExClass);\n+            LockModeType.PESSIMISTIC_FORCE_INCREMENT, Act.CommitTx, 1, ExpectingOptimisticLockExClass,\n+            ExpectingOptimisticLockExClass);\n         commonLockTest(\n             \"testLock(PessimsiticWrite,Commit/PessimisticForceInc,Rollback)\",\n             LockModeType.PESSIMISTIC_WRITE, Act.CommitTx, 1, null,\n-            LockModeType.PESSIMISTIC_FORCE_INCREMENT, Act.RollbackTx, 1, ExpectingOptimisticLockExClass);\n+            LockModeType.PESSIMISTIC_FORCE_INCREMENT, Act.RollbackTx, 1, ExpectingOptimisticLockExClass, null);\n     }\n     \n     /* ======== Thread 1 : Pessimsitic Force Increment Lock ============*/\n     public void testLockPessimsiticForceIncRead() {\n         commonLockTest(\n             \"testLock(PessimsiticForceInc,Commit/Read,Commit)\",\n             LockModeType.PESSIMISTIC_FORCE_INCREMENT, Act.CommitTx, 1, null, \n-            LockModeType.READ, Act.CommitTx, 1, ExpectingOptimisticLockExClass);\n+            LockModeType.READ, Act.CommitTx, 1, null, ExpectingOptimisticLockExClass);\n         commonLockTest(\n             \"testLock(PessimsiticForceInc,Commit/Read,Rollback)\",\n             LockModeType.PESSIMISTIC_FORCE_INCREMENT, Act.CommitTx, 1, null,\n-            LockModeType.READ, Act.RollbackTx, 1, null);\n+            LockModeType.READ, Act.RollbackTx, 1, null, null);\n     }\n     \n     public void testLockPessimsiticForceIncWrite() {\n         commonLockTest(\n             \"testLock(PessimsiticForceInc,Commit/Write,Commit)\",\n             LockModeType.PESSIMISTIC_FORCE_INCREMENT, Act.CommitTx, 1, null,\n-            LockModeType.WRITE, Act.CommitTx, 1, ExpectingOptimisticLockExClass);\n+            LockModeType.WRITE, Act.CommitTx, 1, null, ExpectingOptimisticLockExClass);\n         commonLockTest(\n             \"testLock(PessimsiticForceInc,Commit/Write,Rollback)\",\n             LockModeType.PESSIMISTIC_FORCE_INCREMENT, Act.CommitTx, 1, null,\n-            LockModeType.WRITE, Act.RollbackTx, 1, null);\n+            LockModeType.WRITE, Act.RollbackTx, 1, null, null);\n     }\n     \n     public void testLockPessimsiticForceIncPessimisticRead() {\n         commonLockTest(\n             \"testLock(PessimsiticForceInc,Commit/PessimisticRead,Commit)\",\n             LockModeType.PESSIMISTIC_FORCE_INCREMENT, Act.CommitTx, 1, null, \n-            LockModeType.PESSIMISTIC_READ, Act.CommitTx, 1, ExpectingOptimisticLockExClass);\n+            LockModeType.PESSIMISTIC_READ, Act.CommitTx, 1, ExpectingOptimisticLockExClass,\n+            ExpectingOptimisticLockExClass);\n         commonLockTest(\n             \"testLock(PessimsiticForceInc,Commit/PessimisticRead,Rollback)\",\n             LockModeType.PESSIMISTIC_FORCE_INCREMENT, Act.CommitTx, 1, null,\n-            LockModeType.PESSIMISTIC_READ, Act.RollbackTx, 1, ExpectingOptimisticLockExClass);\n+            LockModeType.PESSIMISTIC_READ, Act.RollbackTx, 1, ExpectingOptimisticLockExClass, null);\n     }\n     \n     public void testLockPessimsiticForceIncPessimisticWrite() {\n         commonLockTest(\n             \"testLock(PessimsiticForceInc,Commit/PessimisticWrite,Commit)\",\n             LockModeType.PESSIMISTIC_FORCE_INCREMENT, Act.CommitTx, 1, null, \n-            LockModeType.PESSIMISTIC_WRITE, Act.CommitTx, 1, ExpectingOptimisticLockExClass);\n+            LockModeType.PESSIMISTIC_WRITE, Act.CommitTx, 1, ExpectingOptimisticLockExClass,\n+            ExpectingOptimisticLockExClass);\n         commonLockTest(\n             \"testLock(PessimsiticForceInc,Commit/PessimisticWrite,Rollback)\",\n             LockModeType.PESSIMISTIC_FORCE_INCREMENT, Act.CommitTx, 1, null,\n-            LockModeType.PESSIMISTIC_WRITE, Act.RollbackTx, 1, ExpectingOptimisticLockExClass);\n+            LockModeType.PESSIMISTIC_WRITE, Act.RollbackTx, 1, ExpectingOptimisticLockExClass, null);\n     }\n     \n     public void testLockPessimsiticForceIncPessimisticForceInc() {\n         commonLockTest(\n             \"testLock(PessimsiticForceInc,Commit/PessimisticForceInc,Commit)\",\n             LockModeType.PESSIMISTIC_FORCE_INCREMENT, Act.CommitTx, 1, null, \n-            LockModeType.PESSIMISTIC_FORCE_INCREMENT, Act.CommitTx, 1, ExpectingOptimisticLockExClass);\n+            LockModeType.PESSIMISTIC_FORCE_INCREMENT, Act.CommitTx, 1, ExpectingOptimisticLockExClass,\n+            ExpectingOptimisticLockExClass);\n         commonLockTest(\n             \"testLock(PessimsiticForceInc,Commit/PessimisticForceInc,Rollback)\",\n             LockModeType.PESSIMISTIC_FORCE_INCREMENT, Act.CommitTx, 1, null,\n-            LockModeType.PESSIMISTIC_FORCE_INCREMENT, Act.RollbackTx, 1, ExpectingOptimisticLockExClass);\n+            LockModeType.PESSIMISTIC_FORCE_INCREMENT, Act.RollbackTx, 1, ExpectingOptimisticLockExClass, null);\n     }\n \n     private void commonLockTest( String testName, \n         LockModeType t1Lock, Act t1IsCommit, int t1VersionInc, \n             Class<?>[] t1Exceptions, \n         LockModeType t2Lock, Act t2IsCommit, int t2VersionInc,\n-            Class<?>[] t2Exceptions ) {\n+            Class<?>[] t2Exceptions, Class<?>[] t3Exceptions ) {\n         String[] parameters = new String[] {\n             \"Thread 1: lock= \" + t1Lock + \", isCommit= \" + t1IsCommit +\n                 \", versionInc= +\" + t1VersionInc +\n@@ -327,53 +336,59 @@ private void commonLockTest( String testName,\n                 \", expectedEx= \" + Arrays.toString(t2Exceptions)};\n             \n         Object[][] threadMain = {\n-            {Act.CreateEm},\n-            {Act.Find},\n-            {Act.SaveVersion},\n-            {Act.TestEmployee, 1, Default_FirstName},\n-            \n-            {Act.NewThread, 1 },\n-            {Act.NewThread, 2 },\n-            {Act.StartThread, 1 },\n-            {Act.Wait},\n-            {Act.StartThread, 2 },\n-            {Act.Notify, 1, 1000 },\n-            {Act.Notify, 2, 1000 },\n-            {Act.WaitAllChildren},\n-            {Act.Find},\n-            {Act.TestEmployee, 1},\n-            {Act.TestException, 1, t1Exceptions },\n-            {Act.TestException, 2, t2Exceptions },\n-        };\n-        Object[][] thread1 = {\n-            {Act.CreateEm},\n-            {Act.StartTx},\n-            {Act.Find},\n-            {Act.SaveVersion},\n-            {Act.Lock, 1, t1Lock },\n-            {Act.TestException},\n-            {Act.Notify, 0},\n-            {Act.Wait},\n-            {Act.UpdateEmployee},\n-            \n-            {t1IsCommit},\n-            {Act.Find},\n-            {Act.TestEmployee, 1, null, t1VersionInc}\n-        };\n-        Object[][] thread2 = {\n-            {Act.CreateEm},\n-            {Act.StartTx},\n-            {Act.Find},\n-            {Act.SaveVersion},\n-            {Act.Lock, 1, t2Lock },\n-            {Act.Notify, 0},\n-            {Act.Wait},\n-            \n-            {t2IsCommit},\n-            {Act.Find},\n-            {Act.TestEmployee, 1, null, t2VersionInc}\n-        };\n-        launchActionSequence(testName, parameters, threadMain, thread1,\n-            thread2);\n+                {Act.CreateEm},\n+                {Act.Find},\n+                {Act.SaveVersion},\n+                {Act.TestEmployee, 1, Default_FirstName},\n+                {Act.CloseEm},\n+                {Act.Sleep, 100},\n+\n+                {Act.CreateEm},\n+                {Act.StartTx},\n+                {Act.Find},\n+                {Act.SaveVersion},\n+                {Act.Lock, 1, t1Lock},\n+                {Act.TestException},\n+                \n+                {Act.NewThread, 1 },\n+                {Act.StartThread, 1 },\n+                \n+                {Act.Wait},\n+                {Act.UpdateEmployee},                \n+                {t1IsCommit},\n+                \n+                {Act.Notify, 1},\n+\n+                {Act.Find},\n+                \n+                {Act.WaitAllChildren},\n+                {Act.Find},\n+                {Act.TestEmployee, 1, null, t1VersionInc},\n+                {Act.TestException, 0, t1Exceptions },\n+                {Act.TestException, 1, t3Exceptions },\n+                {Act.CloseEm}\n+            };\n+\n+            Object[][] thread1 = {\n+                {Act.CreateEm},\n+                {Act.StartTx},\n+                {Act.Find},\n+                {Act.SaveVersion},\n+                {Act.Lock, 1, t2Lock},\n+                {Act.TestException, 1, t2Exceptions},\n+                {Act.Notify, 0},\n+                \n+                {Act.Wait},\n+                {Act.Sleep, 2000},  // sleep for at least 2 sec so that the entity name updated with timestamp \n+                                    // in each of the 2 threads are different. \n+                {Act.UpdateEmployee},\n+                \n+                {t2IsCommit},\n+                {Act.Sleep, 1000},\n+                {Act.Find},\n+                {Act.TestEmployee, 1, null, t2VersionInc},\n+                {Act.CloseEm}\n+            };\n+            launchActionSequence(testName, parameters, threadMain, thread1);\n     }\n }"},{"sha":"ef06c8a20144cb20d6b8a7257fb1ab4427ec9152","filename":"openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestMixedLockManagerRefreshBasic.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/d1ed604dc14307ca585ebcf7e3f55c6f3f578245/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestMixedLockManagerRefreshBasic.java","raw_url":"https://github.com/apache/openjpa/raw/d1ed604dc14307ca585ebcf7e3f55c6f3f578245/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestMixedLockManagerRefreshBasic.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestMixedLockManagerRefreshBasic.java?ref=d1ed604dc14307ca585ebcf7e3f55c6f3f578245","patch":"@@ -116,6 +116,7 @@ public void testCommon(String testName, LockModeType lockMode,\n             { Act.Clear },\n             { Act.Find, 1 },\n             { Act.TestEmployee, 1, lockMode.toString(), 0 },\n+            { Act.CloseEm }\n         };\n         launchActionSequence(testName, \"LockMode=\" + lockMode, threadMain);\n     }"},{"sha":"922f8a495b917fedf9d326c829b48229235ca88d","filename":"openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestMixedLockManagerRefreshException.java","status":"modified","additions":7,"deletions":1,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/d1ed604dc14307ca585ebcf7e3f55c6f3f578245/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestMixedLockManagerRefreshException.java","raw_url":"https://github.com/apache/openjpa/raw/d1ed604dc14307ca585ebcf7e3f55c6f3f578245/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestMixedLockManagerRefreshException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestMixedLockManagerRefreshException.java?ref=d1ed604dc14307ca585ebcf7e3f55c6f3f578245","patch":"@@ -66,6 +66,7 @@ public void testRefreshNoTxReqExceptions() {\n             \n             {Act.Refresh, 1, LockModeType.PESSIMISTIC_FORCE_INCREMENT },\n             {Act.TestException, 0, null },\n+            {Act.CloseEm}\n         };\n         launchActionSequence(\"testLockTxReqExceptions()\",\n             null, threadMainTxReqTest);\n@@ -104,6 +105,7 @@ public void testRefreshTxReqExceptions() {\n             \n             {Act.RefreshWithLock, 1, LockModeType.PESSIMISTIC_FORCE_INCREMENT },\n             {Act.TestException, 0, TransactionRequiredException.class },\n+            {Act.CloseEm}\n         };\n         launchActionSequence(\"testLockTxReqExceptions()\",\n             null, threadMainTxReqTest);\n@@ -165,6 +167,7 @@ public void testRefreshIllegalArgrumentExceptions() {\n             {Act.RefreshObject, \"null\", \n                 LockModeType.PESSIMISTIC_FORCE_INCREMENT },\n             {Act.TestException, 0, IllegalArgumentException.class },\n+            {Act.CloseEm}\n         };\n         launchActionSequence(\"testLockIllegalArgrumentExceptions()\",\n             \"Test invalid entity.\", threadMainInvEntityIllegalArgTest);\n@@ -204,6 +207,7 @@ public void testRefreshIllegalArgrumentExceptions() {\n \n             {Act.Refresh, 2, LockModeType.PESSIMISTIC_FORCE_INCREMENT },\n             {Act.TestException, 0, IllegalArgumentException.class },\n+            {Act.CloseEm}\n         };\n         launchActionSequence(\"testLockIllegalArgrumentExceptions()\",\n             \"Test detached entity.\", threadMainDetachEntityIllegalArgTest);\n@@ -241,7 +245,8 @@ public void testRefreshIllegalArgrumentExceptions() {\n \n             {Act.Refresh, 2, LockModeType.PESSIMISTIC_FORCE_INCREMENT },\n             {Act.TestException, 0, IllegalArgumentException.class },\n-        };        \n+            {Act.CloseEm}\n+       };        \n         launchActionSequence(\"testLockIllegalArgrumentExceptions()\",\n             \"Test detached entity using serialization.\",\n             threadMainDetachSerializeIllegalArgTest);\n@@ -279,6 +284,7 @@ public void testRefreshIllegalArgrumentExceptions() {\n             {Act.TestException, 1, IllegalArgumentException.class },\n             \n             {Act.RollbackTx},\n+            {Act.CloseEm}\n         };\n         launchActionSequence(\n             \"testLockIllegalArgrumentExceptions()\","},{"sha":"2e5cba2ea2444a8d8a50ec6d612f2c943145c5f6","filename":"openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestMixedLockManagerRefreshPermutation.java","status":"modified","additions":62,"deletions":79,"changes":141,"blob_url":"https://github.com/apache/openjpa/blob/d1ed604dc14307ca585ebcf7e3f55c6f3f578245/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestMixedLockManagerRefreshPermutation.java","raw_url":"https://github.com/apache/openjpa/raw/d1ed604dc14307ca585ebcf7e3f55c6f3f578245/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestMixedLockManagerRefreshPermutation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestMixedLockManagerRefreshPermutation.java?ref=d1ed604dc14307ca585ebcf7e3f55c6f3f578245","patch":"@@ -308,7 +308,7 @@ public void testRefreshPessimsiticForceIncPessimisticForceInc() {\n         commonRefreshTest(\n             \"testRefresh(PessimsiticForceInc,Commit/PessimisticForceInc,Commit)\",\n             LockModeType.PESSIMISTIC_FORCE_INCREMENT, Act.CommitTx, 3, null, \n-            LockModeType.PESSIMISTIC_FORCE_INCREMENT, Act.CommitTx, 3, null);\n+            LockModeType.PESSIMISTIC_FORCE_INCREMENT, Act.CommitTx, 2, null);\n         commonRefreshTest(\n             \"testRefresh(PessimsiticForceInc,Commit/PessimisticForceInc,Rollback)\",\n             LockModeType.PESSIMISTIC_FORCE_INCREMENT, Act.CommitTx, 2, null,\n@@ -328,87 +328,70 @@ private void commonRefreshTest( String testName,\n                 \", versionInc= +\" + t2VersionInc +\n                 \", expectedEx= \" + Arrays.toString(t2Exceptions)};\n             \n-        String t1Message1 = \"Refresh in Thread 1\";\n-        String t1Message2 = \"Refresh in Thread 1 Again\";\n-        String t2Message1 = \"Refresh in Thread 2\";\n+        String t1Message1 = \"Refresh in Thread 0\";\n+        String t1Message2 = \"Refresh in Thread 0 Again\";\n+        String t2Message1 = \"Refresh in Thread 1\";\n         \n         Object[][] threadMain = {\n-            {Act.CreateEm},\n-            {Act.Find},\n-            {Act.SaveVersion},\n-            {Act.TestEmployee, 1, Default_FirstName},\n-            \n-            {Act.NewThread, 1 },\n-            {Act.NewThread, 2 },\n-            \n-            {Act.StartThread, 1 },\n-            {Act.Wait},\n-            \n-            {Act.StartThread, 2 },            \n-            {Act.WaitAllChildren},\n-            \n-            {Act.Find},\n-            {Act.TestEmployee, 1},\n-            {Act.TestException, 1, t1Exceptions },\n-            {Act.TestException, 2, t2Exceptions },\n-        };\n-        Object[][] thread1 = {\n-            {Act.CreateEm},\n-            {Act.Find, 1},\n-            {Act.SaveVersion},\n-            {Act.TestEmployee, 1, Default_FirstName},\n-            {Act.Notify, 0},\n-            {Act.Wait},\n-            \n-            {Act.StartTx},\n-            {Act.UpdateEmployee, 1, t1Message1},\n-            {Act.TestEmployee, 1, t1Message1},\n-            {Act.CommitTx},\n-            {Act.TestException},\n-            {Act.Notify, 2},\n-            {Act.Wait},\n-            \n-            {Act.StartTx},\n-            {Act.RefreshWithLock, 1, t1Lock },\n-            {Act.TestLockMode, 1, t1Lock},\n-            {Act.TestEmployee, 1, t1Message1},\n-            {Act.UpdateEmployee, 1, t1Message2},\n-            {Act.TestEmployee, 1, t1Message2},\n-            \n-            {t1IsCommit},\n-            {Act.Notify, 2},\n-            {Act.Notify, 2},\n-            \n-            {Act.Clear},\n-            {Act.Find},\n-            {Act.TestEmployee, 1, null, t1VersionInc}\n-        };\n-        Object[][] thread2 = {\n-            {Act.CreateEm},\n-            {Act.Find, 1},\n-            {Act.SaveVersion},\n-            {Act.TestEmployee, 1, Default_FirstName},\n-            {Act.Notify, 1},\n-            {Act.Wait},\n+                {Act.CreateEm},\n+                {Act.Find},\n+                {Act.SaveVersion},\n+                {Act.TestEmployee, 1, Default_FirstName},\n+                \n+                {Act.NewThread, 1 },\n+                {Act.StartThread, 1 },\n+                {Act.Wait},\n+      \n+                {Act.StartTx},\n+                {Act.UpdateEmployee, 1, t1Message1},\n+                {Act.TestEmployee, 1, t1Message1},\n+                {Act.CommitTx},\n+                {Act.TestException},\n+                {Act.Notify, 1},\n+                {Act.Wait},\n+        \n+                {Act.StartTx},\n+                {Act.RefreshWithLock, 1, t1Lock},\n+                {Act.TestLockMode, 1, t1Lock},\n+                {Act.TestEmployee, 1, t1Message1},\n+                {Act.UpdateEmployee, 1, t1Message2},\n+                {Act.TestEmployee, 1, t1Message2},\n+        \n+                {t1IsCommit},\n+                \n+                {Act.Notify, 1},\n \n-            {Act.StartTx},\n-            {Act.UpdateEmployee, 1, t2Message1},\n-            {Act.TestEmployee, 1, t2Message1},\n-            {Act.RefreshWithLock, 1, t2Lock },\n-            {Act.TestLockMode, 1, t2Lock},\n-            {Act.TestEmployee, 1, t1Message1},\n-            \n-            {Act.Notify, 1},\n-            {Act.Wait},\n-            {t2IsCommit},\n-            {Act.Wait},\n-            \n-            {Act.Clear},\n-            {Act.Find},\n-            {Act.TestEmployee, 1, null, t2VersionInc},\n-        };\n+                {Act.WaitAllChildren},\n+                {Act.Find},\n+                {Act.TestEmployee, 1, null, t1VersionInc},\n+        \n+                {Act.TestException, 0, t1Exceptions },\n+                {Act.TestException, 1, t2Exceptions },\n+                {Act.CloseEm}\n+            };\n+\n+            Object[][] thread1 = {\n+                {Act.CreateEm},\n+                {Act.Find, 1},\n+                {Act.SaveVersion},\n+                {Act.TestEmployee, 1, Default_FirstName},\n+                {Act.TestException},\n+                {Act.Notify, 0},\n+                {Act.Wait},\n+                \n+                {Act.StartTx},\n+                {Act.UpdateEmployee, 1, t2Message1},\n+                {Act.TestEmployee, 1, t2Message1},\n+                {Act.RefreshWithLock, 1, t2Lock },\n+                {Act.TestLockMode, 1, t2Lock},\n+                {Act.TestEmployee, 1, t1Message1},\n+        \n+                {Act.Notify, 0},\n+                {Act.Wait},\n+                {t2IsCommit},\n         \n-        launchActionSequence(testName, parameters, threadMain, thread1,\n-            thread2);\n+                {Act.CloseEm}\n+            };\n+            launchActionSequence(testName, parameters, threadMain, thread1);\n     }\n }"}]}

