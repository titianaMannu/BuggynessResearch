{"sha":"d20e84a2949dbdb9945e979b7e897bb63b259dc5","node_id":"MDY6Q29tbWl0MjA2MzY0OmQyMGU4NGEyOTQ5ZGJkYjk5NDVlOTc5YjdlODk3YmI2M2IyNTlkYzU=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-07-26T19:43:36Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-07-26T19:43:36Z"},"message":"OPENJPA-1722, OPENJPA-1690: Make DistinctResultList serializable, and add writeReplace method. \nSubmitted by: Dianne Richards and Pinaki Poddar\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.x@979418 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0d6cc1faeb92b3b0ef337fb61e59b8415f6b6c05","url":"https://api.github.com/repos/apache/openjpa/git/trees/0d6cc1faeb92b3b0ef337fb61e59b8415f6b6c05"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/d20e84a2949dbdb9945e979b7e897bb63b259dc5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/d20e84a2949dbdb9945e979b7e897bb63b259dc5","html_url":"https://github.com/apache/openjpa/commit/d20e84a2949dbdb9945e979b7e897bb63b259dc5","comments_url":"https://api.github.com/repos/apache/openjpa/commits/d20e84a2949dbdb9945e979b7e897bb63b259dc5/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"426db6e2b63b7004d054df5408cbc24ba9800702","url":"https://api.github.com/repos/apache/openjpa/commits/426db6e2b63b7004d054df5408cbc24ba9800702","html_url":"https://github.com/apache/openjpa/commit/426db6e2b63b7004d054df5408cbc24ba9800702"}],"stats":{"total":70,"additions":69,"deletions":1},"files":[{"sha":"8e4c31293d4b0ca3e6ceff96ae23d6fce1cb6c8b","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DistinctResultList.java","status":"modified","additions":10,"deletions":1,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/d20e84a2949dbdb9945e979b7e897bb63b259dc5/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DistinctResultList.java","raw_url":"https://github.com/apache/openjpa/raw/d20e84a2949dbdb9945e979b7e897bb63b259dc5/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DistinctResultList.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DistinctResultList.java?ref=d20e84a2949dbdb9945e979b7e897bb63b259dc5","patch":"@@ -18,6 +18,8 @@\n  */\n package org.apache.openjpa.kernel;\n \n+import java.io.ObjectStreamException;\n+import java.io.Serializable;\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Iterator;\n@@ -39,7 +41,9 @@\n  * @param <E>\n  *            element type\n  */\n-public class DistinctResultList<E> implements List<E> {\n+public class DistinctResultList<E> implements List<E>, Serializable {\n+    private static final long serialVersionUID = -6140119764940777922L;\n+\n     private final ArrayList<E> _del;\n     private final RuntimeExceptionTranslator _trans;\n \n@@ -204,4 +208,9 @@ protected RuntimeException translate(RuntimeException re) {\n         return (_trans == null) ? re : _trans.translate(re);\n     }\n \n+    public Object writeReplace()\n+        throws ObjectStreamException {\n+        return _del;\n+    }\n+\n }"},{"sha":"24bdb6bcb89f51ffe146e53b3038cec9dc127c0d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/results/TestListResultSerialization.java","status":"added","additions":59,"deletions":0,"changes":59,"blob_url":"https://github.com/apache/openjpa/blob/d20e84a2949dbdb9945e979b7e897bb63b259dc5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/results/TestListResultSerialization.java","raw_url":"https://github.com/apache/openjpa/raw/d20e84a2949dbdb9945e979b7e897bb63b259dc5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/results/TestListResultSerialization.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/results/TestListResultSerialization.java?ref=d20e84a2949dbdb9945e979b7e897bb63b259dc5","patch":"@@ -0,0 +1,59 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.query.results;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.openjpa.lib.rop.ListResultList;\n+import org.apache.openjpa.lib.rop.ResultList;\n+\n+import org.apache.openjpa.kernel.DistinctResultList;\n+import org.apache.openjpa.persistence.EntityManagerImpl;\n+import org.apache.openjpa.persistence.PersistenceExceptions;\n+import org.apache.openjpa.persistence.test.SQLListenerTestCase;\n+import org.apache.openjpa.util.RuntimeExceptionTranslator;\n+\n+/**\n+ * Test that the DistinctResultList serializes correctly and without error.\n+ *\n+ * @since 2.1.0\n+ */\n+public class TestListResultSerialization extends SQLListenerTestCase {\n+    public void setUp() throws Exception {\n+        super.setUp();\n+        assertNotNull(emf);\n+    }\n+    \n+    public void testRoundtrip() {\n+        List<String> list = new ArrayList<String>();\n+        list.add(\"xxx\");\n+        list.add(\"yyy\");\n+        ResultList resultList = new ListResultList(list);\n+        EntityManagerImpl em = (EntityManagerImpl)emf.createEntityManager();\n+        em.close();\n+        RuntimeExceptionTranslator trans = PersistenceExceptions.getRollbackTranslator(em);\n+        DistinctResultList distinctResultList = new DistinctResultList(resultList, trans);\n+        try {\n+            roundtrip(distinctResultList);\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+            fail(\"unexpected exception - see stack trace in output\");\n+        }\n+    }\n+}"}]}

