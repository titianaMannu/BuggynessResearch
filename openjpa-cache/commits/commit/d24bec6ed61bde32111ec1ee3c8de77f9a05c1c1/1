{"sha":"d24bec6ed61bde32111ec1ee3c8de77f9a05c1c1","node_id":"MDY6Q29tbWl0MjA2MzY0OmQyNGJlYzZlZDYxYmRlMzIxMTFlYzFlZTNjOGRlNzdmOWEwNWMxYzE=","commit":{"author":{"name":"David Ezzio","email":"dezzio@apache.org","date":"2008-01-31T00:59:02Z"},"committer":{"name":"David Ezzio","email":"dezzio@apache.org","date":"2008-01-31T00:59:02Z"},"message":"Allow EntityManagerFactory objects to be serialized and deserialized successfully.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@616972 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"55f5c53c23f3d6ab989b6815cb39be3345b3cf69","url":"https://api.github.com/repos/apache/openjpa/git/trees/55f5c53c23f3d6ab989b6815cb39be3345b3cf69"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/d24bec6ed61bde32111ec1ee3c8de77f9a05c1c1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/d24bec6ed61bde32111ec1ee3c8de77f9a05c1c1","html_url":"https://github.com/apache/openjpa/commit/d24bec6ed61bde32111ec1ee3c8de77f9a05c1c1","comments_url":"https://api.github.com/repos/apache/openjpa/commits/d24bec6ed61bde32111ec1ee3c8de77f9a05c1c1/comments","author":null,"committer":null,"parents":[{"sha":"8d161ff99e1e4f1f0bfa4b2c5e590abc590df42d","url":"https://api.github.com/repos/apache/openjpa/commits/8d161ff99e1e4f1f0bfa4b2c5e590abc590df42d","html_url":"https://github.com/apache/openjpa/commit/8d161ff99e1e4f1f0bfa4b2c5e590abc590df42d"}],"stats":{"total":92,"additions":88,"deletions":4},"files":[{"sha":"470f6012b5793c124855444a47ae0d5731b7c504","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","status":"modified","additions":14,"deletions":4,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/d24bec6ed61bde32111ec1ee3c8de77f9a05c1c1/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","raw_url":"https://github.com/apache/openjpa/raw/d24bec6ed61bde32111ec1ee3c8de77f9a05c1c1/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java?ref=d24bec6ed61bde32111ec1ee3c8de77f9a05c1c1","patch":"@@ -147,8 +147,7 @@ public static AbstractBrokerFactory getPooledFactoryForKey(Object key) {\n      */\n     protected AbstractBrokerFactory(OpenJPAConfiguration config) {\n         _conf = config;\n-        _pcClassLoaders = new ConcurrentReferenceHashSet(\n-            ConcurrentReferenceHashSet.WEAK);\n+        getPcClassLoaders();\n     }\n \n     /**\n@@ -287,13 +286,13 @@ private void loadPersistentTypes(ClassLoader envLoader) {\n                     if (needsSub(cls))\n                         toRedefine.add(cls);\n                 }\n-                _pcClassLoaders.add(loader);\n+                getPcClassLoaders().add(loader);\n                 _pcClassNames = c;\n             }\n             _persistentTypesLoaded = true;\n         } else {\n             // reload with this loader\n-            if (_pcClassLoaders.add(loader)) {\n+            if (getPcClassLoaders().add(loader)) {\n                 for (Iterator itr = _pcClassNames.iterator(); itr.hasNext();) {\n                     try {\n                         Class cls =\n@@ -818,4 +817,15 @@ public void afterCompletion(int status) {\n             _transactional.remove (_trans);\n \t\t}\n \t}\n+   \n+   /**\n+    * Method insures that deserialized EMF has this reference re-instantiated\n+    */\n+   private Collection getPcClassLoaders() {\n+      if (_pcClassLoaders == null)\n+        _pcClassLoaders = new ConcurrentReferenceHashSet(\n+            ConcurrentReferenceHashSet.WEAK);\n+         \n+      return _pcClassLoaders;\n+   }\n }"},{"sha":"d7cb92f3314af785c57b1efddd15ad23108921ea","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestSerializedFactory.java","status":"added","additions":74,"deletions":0,"changes":74,"blob_url":"https://github.com/apache/openjpa/blob/d24bec6ed61bde32111ec1ee3c8de77f9a05c1c1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestSerializedFactory.java","raw_url":"https://github.com/apache/openjpa/raw/d24bec6ed61bde32111ec1ee3c8de77f9a05c1c1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestSerializedFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestSerializedFactory.java?ref=d24bec6ed61bde32111ec1ee3c8de77f9a05c1c1","patch":"@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.simple;\n+\n+import java.io.*;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import javax.persistence.EntityTransaction;\n+\n+import junit.textui.TestRunner;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+/**\n+ * Tests that a EntityManagerFactory can be used after serialization.\n+ *\n+ * @author David Ezzio\n+ */\n+public class TestSerializedFactory\n+    extends SingleEMFTestCase {\n+\n+    public void setUp() {\n+        setUp(AllFieldTypes.class);\n+    }\n+\n+    public void testSerializedEntityManagerFactory() throws Exception {\n+        // serialize and deserialize the entity manager factory\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ObjectOutputStream oos = new ObjectOutputStream(baos);\n+        oos.writeObject(emf);\n+        EntityManagerFactory emf2 = \n+            (EntityManagerFactory) new ObjectInputStream(\n+            new ByteArrayInputStream(baos.toByteArray())).readObject();\n+            \n+        // use the deserialized entity manager factory\n+        assertTrue(\"The deserialized entity manager factory is not open\",\n+            emf2.isOpen());\n+        EntityManager em = emf2.createEntityManager();\n+        assertTrue(\"The newly created entity manager is not open\", em.isOpen());\n+\n+        // exercise the entity manager produced from the deserialized EMF\n+        em.getTransaction().begin();\n+        em.persist(new AllFieldTypes());\n+        em.getTransaction().commit();\n+        \n+        // close the extra resources\n+        em.close();\n+        assertFalse(\"The entity manager is not closed\", em.isOpen());\n+        emf2.close();\n+        assertFalse(\"The entity manager factory is not closed\", emf2.isOpen());\n+    }\n+    \n+    public static void main(String[] args) {\n+        TestRunner.run(TestSerializedFactory.class);\n+    }\n+}\n+"}]}

