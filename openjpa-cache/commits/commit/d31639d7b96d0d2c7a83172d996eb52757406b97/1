{"sha":"d31639d7b96d0d2c7a83172d996eb52757406b97","node_id":"MDY6Q29tbWl0MjA2MzY0OmQzMTYzOWQ3Yjk2ZDBkMmM3YTgzMTcyZDk5NmViNTI3NTc0MDZiOTc=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2010-01-17T22:39:32Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2010-01-17T22:39:32Z"},"message":"OPENJPA-931: support nesting EmbeddedId in IdClass\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@900231 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"96c52acf0b9817441dec567692bf9629323ee1f1","url":"https://api.github.com/repos/apache/openjpa/git/trees/96c52acf0b9817441dec567692bf9629323ee1f1"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/d31639d7b96d0d2c7a83172d996eb52757406b97","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/d31639d7b96d0d2c7a83172d996eb52757406b97","html_url":"https://github.com/apache/openjpa/commit/d31639d7b96d0d2c7a83172d996eb52757406b97","comments_url":"https://api.github.com/repos/apache/openjpa/commits/d31639d7b96d0d2c7a83172d996eb52757406b97/comments","author":null,"committer":null,"parents":[{"sha":"dff9c690bc677bb42ed4317cf9dce92de742110b","url":"https://api.github.com/repos/apache/openjpa/commits/dff9c690bc677bb42ed4317cf9dce92de742110b","html_url":"https://github.com/apache/openjpa/commit/dff9c690bc677bb42ed4317cf9dce92de742110b"}],"stats":{"total":247,"additions":246,"deletions":1},"files":[{"sha":"1d6f1f4ada4336bbdb632af0c7a0b49df51509d3","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/d31639d7b96d0d2c7a83172d996eb52757406b97/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/d31639d7b96d0d2c7a83172d996eb52757406b97/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java?ref=d31639d7b96d0d2c7a83172d996eb52757406b97","patch":"@@ -37,6 +37,7 @@\n import org.apache.openjpa.jdbc.meta.FieldStrategy;\n import org.apache.openjpa.jdbc.meta.Joinable;\n import org.apache.openjpa.jdbc.meta.MappingInfo;\n+import org.apache.openjpa.jdbc.meta.ValueHandler;\n import org.apache.openjpa.jdbc.meta.ValueMapping;\n import org.apache.openjpa.jdbc.meta.ValueMappingImpl;\n import org.apache.openjpa.jdbc.meta.ValueMappingInfo;\n@@ -65,6 +66,7 @@\n import org.apache.openjpa.util.ImplHelper;\n import org.apache.openjpa.util.InternalException;\n import org.apache.openjpa.util.MetaDataException;\n+import org.apache.openjpa.util.ObjectId;\n import org.apache.openjpa.util.OpenJPAId;\n import org.apache.openjpa.util.UnsupportedException;\n \n@@ -994,6 +996,8 @@ public Object getJoinValue(Object fieldVal, Column col, JDBCStore store) {\n         col = field.getForeignKey().getPrimaryKeyColumn(col);\n         if (col == null)\n             throw new InternalException();\n+        \n+        Object savedFieldVal = fieldVal;\n \n         ClassMapping relmapping = field.getTypeMapping();\n         Joinable j = field.getTypeMapping().assertJoinable(col);\n@@ -1006,6 +1010,9 @@ public Object getJoinValue(Object fieldVal, Column col, JDBCStore store) {\n             Object[] pks = ApplicationIds.toPKValues(fieldVal, relmapping);\n             fieldVal = pks[relmapping.getField(j.getFieldIndex()).\n                 getPrimaryKeyIndex()];\n+        } else if (relmapping.getObjectIdType() == ObjectId.class && \n+            relmapping.getPrimaryKeyFieldMappings()[0].getValueMapping().isEmbedded()) {\n+            return j.getJoinValue(savedFieldVal, col, store);\n         }\n         return j.getJoinValue(fieldVal, col, store);\n     }"},{"sha":"a8d8f0a43b59a392c835200ce79bbb63c979f8cc","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Dependent5.java","status":"added","additions":49,"deletions":0,"changes":49,"blob_url":"https://github.com/apache/openjpa/blob/d31639d7b96d0d2c7a83172d996eb52757406b97/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Dependent5.java","raw_url":"https://github.com/apache/openjpa/raw/d31639d7b96d0d2c7a83172d996eb52757406b97/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Dependent5.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Dependent5.java?ref=d31639d7b96d0d2c7a83172d996eb52757406b97","patch":"@@ -0,0 +1,49 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.enhance.identity;\r\n+import java.io.Serializable;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+@Entity\r\n+@IdClass(DependentId5.class)\r\n+public class Dependent5 implements Serializable {\r\n+\r\n+    private static final long serialVersionUID = 1L;\r\n+    @Id\r\n+    String name;\r\n+    \r\n+    @Id\r\n+    @JoinColumns({\r\n+       @JoinColumn(name=\"FIRSTNAME\", referencedColumnName=\"FIRSTNAME\"),\r\n+       @JoinColumn(name=\"LASTNAME\", referencedColumnName=\"LASTNAME\")\r\n+    })\r\n+    @ManyToOne\r\n+    Employee5 emp;\r\n+\r\n+    public Dependent5(String name, Employee5 emp) {\r\n+        this.name = name;\r\n+        this.emp = emp;\r\n+    }\r\n+\r\n+    public Dependent5(DependentId5 dId, Employee5 emp){\r\n+        this.name = dId.getName();\r\n+        this.emp = emp;\r\n+    } \r\n+}\r"},{"sha":"2fa0658d0f8b1e7645d5093e73ac294f56c8abdb","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/DependentId5.java","status":"added","additions":60,"deletions":0,"changes":60,"blob_url":"https://github.com/apache/openjpa/blob/d31639d7b96d0d2c7a83172d996eb52757406b97/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/DependentId5.java","raw_url":"https://github.com/apache/openjpa/raw/d31639d7b96d0d2c7a83172d996eb52757406b97/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/DependentId5.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/DependentId5.java?ref=d31639d7b96d0d2c7a83172d996eb52757406b97","patch":"@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.enhance.identity;\n+\n+public class DependentId5 {\n+    String name;\n+    EmployeeId5 emp;\n+\n+    public DependentId5() {\n+    }\n+\n+    public DependentId5(String name, EmployeeId5 emp) {\n+        this.name = name;\n+        this.emp = emp;\n+    }\n+    \n+    public String getName() {\n+        return name;\n+    }\n+    \n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+    \n+    public EmployeeId5 getEmp() {\n+        return emp;\n+    }\n+    \n+    public void setEmp(EmployeeId5 emp) {\n+        this.emp = emp;\n+    }\n+    \n+    public int hashCode() {\n+        return name.hashCode() + emp.hashCode();\n+    }\n+    \n+    public boolean equals(Object o) {\n+        if (!(o instanceof DependentId5)) return false;\n+        DependentId5 d = (DependentId5) o;\n+        if (!emp.equals(d.emp)) return false;\n+        if (!name.equals(d.name)) return false;\n+        return true;\n+    }\n+}"},{"sha":"d8ea7c1a5d838be1735d5ef5faeb86dd49d3a01a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Employee5.java","status":"added","additions":40,"deletions":0,"changes":40,"blob_url":"https://github.com/apache/openjpa/blob/d31639d7b96d0d2c7a83172d996eb52757406b97/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Employee5.java","raw_url":"https://github.com/apache/openjpa/raw/d31639d7b96d0d2c7a83172d996eb52757406b97/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Employee5.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Employee5.java?ref=d31639d7b96d0d2c7a83172d996eb52757406b97","patch":"@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.enhance.identity;\n+\n+import javax.persistence.*;\n+import java.io.*;\n+\n+@Entity\n+public class Employee5 implements Serializable {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    @EmbeddedId \n+    EmployeeId5 empId;\n+\n+    public Employee5() {\n+    }\n+\n+    public Employee5(EmployeeId5 eId) {\n+        this.empId=eId;\n+    }\n+    \n+    \n+}"},{"sha":"3e0799eb4c95f52cdc42e34f4cde5c9fefb1eae0","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/EmployeeId5.java","status":"added","additions":70,"deletions":0,"changes":70,"blob_url":"https://github.com/apache/openjpa/blob/d31639d7b96d0d2c7a83172d996eb52757406b97/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/EmployeeId5.java","raw_url":"https://github.com/apache/openjpa/raw/d31639d7b96d0d2c7a83172d996eb52757406b97/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/EmployeeId5.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/EmployeeId5.java?ref=d31639d7b96d0d2c7a83172d996eb52757406b97","patch":"@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.enhance.identity;\n+\n+import javax.persistence.Embeddable;\n+\n+@Embeddable\n+public class EmployeeId5 implements java.io.Serializable {\n+\n+    String firstName;\n+    String lastName;\n+\n+    public EmployeeId5() {\n+    }\n+\n+    public EmployeeId5(String firstName, String lastName) {\n+        this.firstName = firstName;\n+        this.lastName = lastName;\n+    }\n+\n+    public void setFirstName(String firstName) {\n+        this.firstName = firstName;\n+    }\n+    \n+    public void setLastName(String lastName) {\n+        this.lastName = lastName;\n+    }\n+    \n+    public String getFirstName() {\n+        return firstName;\n+    }\n+    \n+    public String getLastName() {\n+        return lastName;\n+    }\n+    \n+    public boolean equals(Object o) {\n+        if (!(o instanceof EmployeeId5))\n+            return false;\n+        EmployeeId5 other = (EmployeeId5) o;\n+        if (firstName.equals(other.firstName) && \n+                lastName.equals(other.lastName))\n+            return true;\n+        return false;\n+    }\n+    \n+    public int hashCode() {\n+        int ret = 0;\n+        ret += firstName.hashCode();\n+        ret = 31 * ret + lastName.hashCode();\n+        return ret;\n+    }\n+}\n+"},{"sha":"844ab6e136f2dd4e233017609ca9c06d474c923e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/TestMappedById.java","status":"modified","additions":20,"deletions":1,"changes":21,"blob_url":"https://github.com/apache/openjpa/blob/d31639d7b96d0d2c7a83172d996eb52757406b97/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/TestMappedById.java","raw_url":"https://github.com/apache/openjpa/raw/d31639d7b96d0d2c7a83172d996eb52757406b97/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/TestMappedById.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/TestMappedById.java?ref=d31639d7b96d0d2c7a83172d996eb52757406b97","patch":"@@ -87,7 +87,8 @@ public void setUp() throws Exception {\n             Person4.class, PersonId4.class, MedicalHistory4.class,\n             Dependent3.class, Employee3.class, DependentId3.class, \n             Parent3.class, Dependent4.class, Employee4.class, PhoneNumber.class,\n-            BeneContact.class, BeneContactId.class, Beneficiary.class);\n+            BeneContact.class, BeneContactId.class, Beneficiary.class,\n+            Dependent5.class, Employee5.class, EmployeeId5.class);\n     }\n \n     /**\n@@ -186,6 +187,24 @@ public void testEnumIdClass() {\n         em.close();\n     }\n     \n+    public void testEmbeddedIdContainedInIdClass() {\n+        EntityManager em = emf.createEntityManager();\n+        EmployeeId5 eId1 = new EmployeeId5(\"Java\", \"Duke\");\n+        Employee5 employee1 = new Employee5(eId1);\n+        Dependent5 dep1 = new Dependent5(\"1\", employee1);\n+\n+        em.persist(dep1);\n+        em.persist(employee1);\n+\n+        em.getTransaction().begin();\n+        em.flush();\n+        em.getTransaction().commit();\n+        em.clear();\n+        \n+        DependentId5 depId1 = new DependentId5(\"1\", eId1);\n+        Dependent5 newDep = em.find(Dependent5.class, depId1);\n+        assertNotNull(newDep);\n+    }\n     \n     public void createObj1() {\n         EntityManager em = emf.createEntityManager();"}]}

