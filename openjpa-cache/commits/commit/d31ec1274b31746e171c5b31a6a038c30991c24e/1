{"sha":"d31ec1274b31746e171c5b31a6a038c30991c24e","node_id":"MDY6Q29tbWl0MjA2MzY0OmQzMWVjMTI3NGIzMTc0NmUxNzFjNWIzMWE2YTAzOGMzMDk5MWMyNGU=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-06-09T12:03:15Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-06-09T12:03:15Z"},"message":"OPENJPA-1686: Refactor in RelationStrategies.isRelationId()\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@952972 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"8a92e6eaadb61bb4084d044e94633c8d0368ec6f","url":"https://api.github.com/repos/apache/openjpa/git/trees/8a92e6eaadb61bb4084d044e94633c8d0368ec6f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/d31ec1274b31746e171c5b31a6a038c30991c24e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/d31ec1274b31746e171c5b31a6a038c30991c24e","html_url":"https://github.com/apache/openjpa/commit/d31ec1274b31746e171c5b31a6a038c30991c24e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/d31ec1274b31746e171c5b31a6a038c30991c24e/comments","author":null,"committer":null,"parents":[{"sha":"a873065db7f3b9190ff47a88bff1b2cbce3d3e89","url":"https://api.github.com/repos/apache/openjpa/commits/a873065db7f3b9190ff47a88bff1b2cbce3d3e89","html_url":"https://github.com/apache/openjpa/commit/a873065db7f3b9190ff47a88bff1b2cbce3d3e89"}],"stats":{"total":32,"additions":27,"deletions":5},"files":[{"sha":"4bc70e3782d99e3c45940915188e0b1c6ea64f7c","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationStrategies.java","status":"modified","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/apache/openjpa/blob/d31ec1274b31746e171c5b31a6a038c30991c24e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationStrategies.java","raw_url":"https://github.com/apache/openjpa/raw/d31ec1274b31746e171c5b31a6a038c30991c24e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationStrategies.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationStrategies.java?ref=d31ec1274b31746e171c5b31a6a038c30991c24e","patch":"@@ -26,9 +26,11 @@\n import org.apache.openjpa.jdbc.meta.FieldMapping;\n import org.apache.openjpa.jdbc.meta.FieldStrategy;\n import org.apache.openjpa.jdbc.meta.JavaSQLTypes;\n+import org.apache.openjpa.jdbc.meta.RelationId;\n import org.apache.openjpa.jdbc.meta.ValueMapping;\n import org.apache.openjpa.jdbc.meta.ValueMappingInfo;\n import org.apache.openjpa.jdbc.schema.Column;\n+import org.apache.openjpa.jdbc.schema.ForeignKey;\n import org.apache.openjpa.kernel.DetachedValueStateManager;\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n import org.apache.openjpa.kernel.StoreContext;\n@@ -225,4 +227,25 @@ public static OpenJPAStateManager getStateManager(Object obj,\n             return new DetachedValueStateManager(obj, ctx);\n         return sm;\n     }\n+    \n+    /**\n+     * Affirms if all of the given columns represent a {@linkplain RelationId relationship identifier}. \n+     */\n+    public static boolean isRelationId(Column[] cols) {\n+        if (cols == null || cols.length == 0)\n+            return false;\n+        for (int i = 0; i < cols.length; i++) {\n+            if (!cols[i].isRelationId())\n+                return false;\n+        }\n+        return true;\n+    }\n+    \n+    /**\n+     * Affirms if all of the foreign key columns represent a {@linkplain RelationId relationship identifier}.\n+     */\n+    public static boolean isRelationId(ForeignKey fk) {\n+        return fk != null && isRelationId(fk.getColumns());\n+    }\n+\n }"},{"sha":"d2dfc2fd75d94cb4af648bd20a86ae99021a6fcb","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StoreCollectionFieldStrategy.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/d31ec1274b31746e171c5b31a6a038c30991c24e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StoreCollectionFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/d31ec1274b31746e171c5b31a6a038c30991c24e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StoreCollectionFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StoreCollectionFieldStrategy.java?ref=d31ec1274b31746e171c5b31a6a038c30991c24e","patch":"@@ -611,10 +611,8 @@ boolean requiresOrderBy() {\n      */\n     Object getObjectIdForJoin(ForeignKey fk, OpenJPAStateManager sm) {\n         Object oid = sm.getObjectId();\n-        for (Column col : fk.getColumns()) {\n-            if (!col.isRelationId()) {\n-                return oid;\n-            }\n+        if (!RelationStrategies.isRelationId(fk)) {\n+            return oid;\n         }\n         \n         FieldMapping owningField = field.getMappedByMapping();"},{"sha":"12ccaf4bd8ea20a445c2b551204411d61db6ea8a","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/d31ec1274b31746e171c5b31a6a038c30991c24e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","raw_url":"https://github.com/apache/openjpa/raw/d31ec1274b31746e171c5b31a6a038c30991c24e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java?ref=d31ec1274b31746e171c5b31a6a038c30991c24e","patch":"@@ -50,6 +50,7 @@\n import org.apache.openjpa.jdbc.meta.FieldMapping;\n import org.apache.openjpa.jdbc.meta.Joinable;\n import org.apache.openjpa.jdbc.meta.ValueMapping;\n+import org.apache.openjpa.jdbc.meta.strats.RelationStrategies;\n import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.jdbc.schema.ForeignKey;\n import org.apache.openjpa.jdbc.schema.Table;\n@@ -1343,7 +1344,6 @@ private void whereForeignKey(ForeignKey fk, Object oid,\n     private void where(Object oid, ClassMapping mapping, Column[] toCols,\n         Column[] fromCols, Object[] vals, Column[] constCols, PathJoins pj,\n         JDBCStore store) {\n-        boolean relationId = fromCols[0].isRelationId(); \n         ValueMapping embed = mapping.getEmbeddingMapping();\n         if (embed != null) {\n             where(oid, embed.getFieldMapping().getDefiningMapping(),\n@@ -1353,6 +1353,7 @@ private void where(Object oid, ClassMapping mapping, Column[] toCols,\n \n         // only bother to pack pk values into array if app id\n         Object[] pks = null;\n+        boolean relationId = RelationStrategies.isRelationId(fromCols); \n         if (!relationId && mapping.getIdentityType() == ClassMapping.ID_APPLICATION)\n             pks = ApplicationIds.toPKValues(oid, mapping);\n "}]}

