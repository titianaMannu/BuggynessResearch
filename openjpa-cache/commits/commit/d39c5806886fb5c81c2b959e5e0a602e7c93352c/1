{"sha":"d39c5806886fb5c81c2b959e5e0a602e7c93352c","node_id":"MDY6Q29tbWl0MjA2MzY0OmQzOWM1ODA2ODg2ZmI1YzgxYzJiOTU5ZTVlMGE2MDJlN2M5MzM1MmM=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-07-22T11:58:16Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-07-22T11:58:16Z"},"message":"OPENJPA-1742: move cfName logic to JDBCConfiguration, add tests for nonJTADataSource\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.x@966602 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"de4801bfa05e437362b656800968f8b203aa172f","url":"https://api.github.com/repos/apache/openjpa/git/trees/de4801bfa05e437362b656800968f8b203aa172f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/d39c5806886fb5c81c2b959e5e0a602e7c93352c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/d39c5806886fb5c81c2b959e5e0a602e7c93352c","html_url":"https://github.com/apache/openjpa/commit/d39c5806886fb5c81c2b959e5e0a602e7c93352c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/d39c5806886fb5c81c2b959e5e0a602e7c93352c/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"51805b02f0bfc630316206975a2cd8ee642b2bd1","url":"https://api.github.com/repos/apache/openjpa/commits/51805b02f0bfc630316206975a2cd8ee642b2bd1","html_url":"https://github.com/apache/openjpa/commit/51805b02f0bfc630316206975a2cd8ee642b2bd1"}],"stats":{"total":394,"additions":335,"deletions":59},"files":[{"sha":"55488212d177309cd7e29c53b59ef0ec7407c127","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCConfigurationImpl.java","status":"modified","additions":64,"deletions":6,"changes":70,"blob_url":"https://github.com/apache/openjpa/blob/d39c5806886fb5c81c2b959e5e0a602e7c93352c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/d39c5806886fb5c81c2b959e5e0a602e7c93352c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCConfigurationImpl.java?ref=d39c5806886fb5c81c2b959e5e0a602e7c93352c","patch":"@@ -55,6 +55,7 @@\n import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.meta.MetaDataFactory;\n+import org.apache.openjpa.util.UserException;\n \n /**\n  * Default implementation of the {@link JDBCConfiguration} interface.\n@@ -91,6 +92,8 @@\n     private String firstPass = null;\n     private DecoratingDataSource dataSource = null;\n     private DecoratingDataSource dataSource2 = null;\n+    \n+    private static final Localizer _loc = Localizer.forPackage(JDBCConfigurationImpl.class);\n \n     /**\n      * Default constructor. Attempts to load default properties.\n@@ -826,7 +829,7 @@ public DecoratingDataSource createConnectionFactory() {\n         Log log = getLog(LOG_JDBC);\n         if (ds != null) {\n             if (log.isTraceEnabled())\n-                log.trace(\"createConnectionFactory: DataSource:\"+ds);\n+                log.trace(\"createConnectionFactory: DataSource:\" + ds);\n \n             return setupConnectionFactory(ds, false);\n         }\n@@ -841,15 +844,70 @@ public DecoratingDataSource createConnectionFactory() {\n         return setupConnectionFactory(ds, false);\n     }\n \n-    public DataSource getDataSource(StoreContext ctx) {\n-        return getDataSource(ctx, (DataSource) getConnectionFactory());\n+    public DataSource getDataSource(StoreContext ctx) {       \n+        Log log = getLog(LOG_RUNTIME);\n+        DataSource ds = null;\n+        \n+        if(ctx != null && StringUtils.isNotEmpty(ctx.getConnectionFactoryName())) {\n+            ds =  getDataSource(ctx, (DataSource) ctx.getConnectionFactory()); \n+            // fail fast if a cfName has been provided, but was not available in JNDI\n+            if (ds == null) {\n+                throw new UserException(_loc.get(\"invalid-datasource\", ctx.getConnectionFactoryName())).setFatal(true);\n+            }\n+            if(! (ds instanceof DecoratingDataSource)) { \n+                ds = DataSourceFactory.decorateDataSource(ds, this, false);\n+            }\n+            if (log.isTraceEnabled()) {\n+                log.trace(\"Found datasource1: \" + ds + \" from StoreContext using jndiName: \"\n+                    + ctx.getConnectionFactory2Name());\n+            }\n+            return ds; \n+        }\n+        else {\n+            ds = getDataSource(ctx, (DataSource) getConnectionFactory());\n+            if (log.isTraceEnabled()) {\n+                log.trace(\"Found datasource1: \" + ds + \" from configuration. StoreContext: \" + ctx );\n+            }\n+            return ds; \n+        }\n     }\n \n     public DataSource getDataSource2(StoreContext ctx) {\n-        // if there is no connection factory 2, use the primary factory\n-        DataSource ds = (DataSource) getConnectionFactory2();\n-        if (ds == null)\n+        Log log = getLog(LOG_RUNTIME);\n+        DataSource ds = null;\n+\n+        // Try to obtain from the StoreContext first.\n+        if (ctx != null && StringUtils.isNotEmpty(ctx.getConnectionFactory2Name())) {\n+            ds = (DataSource) ctx.getConnectionFactory2();\n+            if (ds == null) {\n+                // fail fast. If the non-jta-data-source is configured on the context we want an immediate error. \n+                throw new UserException(_loc.get(\"invalid-datasource\", ctx.getConnectionFactory2Name())).setFatal(true);\n+            }\n+            if(! (ds instanceof DecoratingDataSource)) { \n+                ds = DataSourceFactory.decorateDataSource(ds, this, false);\n+            }\n+            if (log.isTraceEnabled()) {\n+                log.trace(\"Found datasource2: \" + ds + \" from StoreContext using jndiName: \"\n+                    + ctx.getConnectionFactory2Name());\n+            }\n+            return ds;\n+        }\n+\n+        // If not set on context or value from context is not available try cf2 from config\n+        else{ \n+            ds = (DataSource) getConnectionFactory2();\n+            if (log.isTraceEnabled()) {\n+                log.trace(\"Found datasource 2: \"+ ds + \" from config. StoreContext: \" + ctx);\n+            }\n+        }\n+        \n+        // fallback to cf1 / datasource1\n+        if (ds == null) {\n+            if(log.isTraceEnabled()) { \n+                log.trace(\"Trying datasource1\");\n+            }\n             return getDataSource(ctx);\n+        }\n \n         // prefer the global connection 2 auth info if given\n         String user = getConnection2UserName();"},{"sha":"1cfd8a0a08e5e82239935ca1ed1f8a1a436535bb","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","status":"modified","additions":5,"deletions":25,"changes":30,"blob_url":"https://github.com/apache/openjpa/blob/d39c5806886fb5c81c2b959e5e0a602e7c93352c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/d39c5806886fb5c81c2b959e5e0a602e7c93352c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java?ref=d39c5806886fb5c81c2b959e5e0a602e7c93352c","patch":"@@ -169,33 +169,13 @@ private final boolean useConnectionFactory2(StoreContext ctx) {\n     private final DataSource getDataSource(StoreContext ctx) {\n         DataSource ds;\n \n-        if (useConnectionFactory2(ctx)) {\n-            ds = (DataSource) ctx.getConnectionFactory2();\n-            if (ds != null) {\n-                ds = DataSourceFactory.decorateDataSource(ds, _conf, false);\n-            }\n-            else {\n-                ds = _conf.getDataSource2(ctx);\n-            }\n-        } else {\n-            ds = (DataSource) ctx.getConnectionFactory();\n-            if (ds != null) {\n-                ds = DataSourceFactory.decorateDataSource(ds, _conf, false);   \n-            }\n-            else {\n-                ds = _conf.getDataSource(ctx);\n-            }\n+        if(useConnectionFactory2(ctx)) { \n+            ds = _conf.getDataSource2(ctx); \n         }\n-        return ds;\n-    }\n-    \n-    private boolean useContextToGetDataSource(StoreContext ctx) { \n-        // configuration check to enable goes here. \n-        if (StringUtils.isBlank(ctx.getConnectionFactoryName()) \n-                && StringUtils.isBlank(ctx.getConnectionFactory2Name())) {\n-            return false;\n+        else {\n+            ds = _conf.getDataSource(ctx);\n         }\n-        return true;\n+        return ds; \n     }\n \n     public JDBCConfiguration getConfiguration() {"},{"sha":"e291620c51ca6345b29642cadbeca2544be49819","filename":"openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/conf/localizer.properties","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/d39c5806886fb5c81c2b959e5e0a602e7c93352c/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/conf/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/d39c5806886fb5c81c2b959e5e0a602e7c93352c/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/conf/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/conf/localizer.properties?ref=d39c5806886fb5c81c2b959e5e0a602e7c93352c","patch":"@@ -246,3 +246,5 @@ map-factory: Using mapping factory \"{0}\".\n meta-factory: Using metadata factory \"{0}\".\n unknown-datasource: JNDI lookup for \"{0}\" returned \"{1}\", which is not a  \\\n \tjavax.sql.DataSource object. \n+invalid-datasource: JNDI lookup for \"{0}\" specified on the StoreContext (\\\n+    EntityManager) returned null, the resulting EntityManager cannot be used. "},{"sha":"3972a32a8c4b9799e44365a6ac2c62010c2a6c62","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","status":"modified","additions":13,"deletions":0,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/d39c5806886fb5c81c2b959e5e0a602e7c93352c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","raw_url":"https://github.com/apache/openjpa/raw/d39c5806886fb5c81c2b959e5e0a602e7c93352c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java?ref=d39c5806886fb5c81c2b959e5e0a602e7c93352c","patch":"@@ -31,13 +31,15 @@\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.locks.ReentrantLock;\n \n+import javax.naming.NamingException;\n import javax.transaction.Status;\n import javax.transaction.Synchronization;\n import javax.transaction.Transaction;\n import javax.transaction.TransactionManager;\n \n import org.apache.commons.collections.set.MapBackedSet;\n import org.apache.commons.lang.StringUtils;\n+import org.apache.commons.lang.exception.NestableRuntimeException;\n import org.apache.openjpa.conf.BrokerValue;\n import org.apache.openjpa.conf.MetaDataRepositoryValue;\n import org.apache.openjpa.conf.OpenJPAConfiguration;\n@@ -190,6 +192,17 @@ public Broker newBroker(String user, String pass, boolean managed, int connRetai\n         String cf1Name, String cf2Name) {\n         try {\n             assertOpen();\n+            \n+            if(StringUtils.isNotEmpty(cf1Name)) {\n+                // If the cfName has been set on the broker try looking up now.\n+                try { \n+                    _conf.getConnectionFactory();\n+                }\n+                catch(UserException ue) { \n+                     // try setting the broker's CF into the configuration. \n+                    _conf.setConnectionFactoryName(cf1Name); \n+                }\n+            }\n             makeReadOnly();\n \n             Broker broker = null;"},{"sha":"e40f9bdf7c651b46ee8f2a7616a597656766a71e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/conf/Person.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/d39c5806886fb5c81c2b959e5e0a602e7c93352c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/conf/Person.java","raw_url":"https://github.com/apache/openjpa/raw/d39c5806886fb5c81c2b959e5e0a602e7c93352c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/conf/Person.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/conf/Person.java?ref=d39c5806886fb5c81c2b959e5e0a602e7c93352c","patch":"@@ -47,6 +47,12 @@ public Person(int id) {\n         setId(id);\n     }\n \n+    public Person(int id, String name) {\n+        super();\n+        setId(id);\n+        setName(name);\n+    }\n+\n     public int getId() {\n         return id;\n     }"},{"sha":"47609f20565599a32da64dcefcf4290d91c1bbfb","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/conf/TestOverrideNonJtaDataSource.java","status":"added","additions":169,"deletions":0,"changes":169,"blob_url":"https://github.com/apache/openjpa/blob/d39c5806886fb5c81c2b959e5e0a602e7c93352c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/conf/TestOverrideNonJtaDataSource.java","raw_url":"https://github.com/apache/openjpa/raw/d39c5806886fb5c81c2b959e5e0a602e7c93352c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/conf/TestOverrideNonJtaDataSource.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/conf/TestOverrideNonJtaDataSource.java?ref=d39c5806886fb5c81c2b959e5e0a602e7c93352c","patch":"@@ -0,0 +1,169 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.conf;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.persistence.EntityExistsException;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import javax.persistence.RollbackException;\n+\n+import org.apache.openjpa.persistence.ArgumentException;\n+import org.apache.openjpa.persistence.test.AbstractPersistenceTestCase;\n+\n+public class TestOverrideNonJtaDataSource extends AbstractPersistenceTestCase {\n+    private String defaultJndiName = \"jdbc/mocked\";\n+    private String[] jndiNames = { \"jdbc/mocked1\" };\n+\n+    protected void init(String cfName) {\n+        EntityManagerFactory emf = getEmf(\"openjpa.ConnectionFactoryName\", cfName, true);\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.createQuery(\"Delete from confPerson\").executeUpdate();\n+        em.getTransaction().commit();\n+        em.close();\n+        emf.close();\n+    }\n+\n+    protected void setUp() {\n+        // create an EMF for each database.\n+        init(defaultJndiName);\n+        init(jndiNames[0]);\n+    }\n+    \n+    protected EntityManagerFactory getEmf(String cfPropertyName, String cfPropertyValue) {\n+        return getEmf(cfPropertyName, cfPropertyValue, false);\n+    }\n+\n+    protected EntityManagerFactory getEmf(String cfPropertyName, String cfPropertyValue, boolean syncMappings) {\n+        // null out the driver to prevent system properties from taking effect.\n+        if (syncMappings) {\n+            return createEMF(\n+                \"openjpa.jdbc.SynchronizeMappings\", \"buildSchema\",\n+                \"openjpa.ConnectionDriverName\", \"\",\n+                \"openjpa.ConnectionFactoryMode\", \"managed\",\n+                \"openjpa.ConnectionFactoryName\", defaultJndiName,  // must have a cf1, to initialize configuration\n+                cfPropertyName,cfPropertyValue, \n+                Person.class);\n+        }\n+        return createEMF(\n+            \"openjpa.ConnectionDriverName\", \"\", \n+            \"openjpa.ConnectionFactoryMode\", \"managed\",\n+            \"openjpa.ConnectionFactoryName\", defaultJndiName, // must have a cf1, to initialize configuration\n+            cfPropertyName,cfPropertyValue, \n+            Person.class);\n+    }\n+\n+    protected EntityManager getEm(EntityManagerFactory emf, String name, String value) {\n+        Map<String, Object> props = new HashMap<String, Object>();\n+        props.put(name, value);\n+        return emf.createEntityManager(props);\n+    }\n+\n+    public String getPersistenceUnitName() {\n+        return \"TestCfSwitching\";\n+    }\n+\n+    public void testConnectionFactoryName() {\n+        // TODO Disable for non derby.\n+        // split out so that we can try javax.persistence.jtaDataSource in the future.\n+        overridePropertyOnEM(\"openjpa.ConnectionFactory2Name\", jndiNames[0]);\n+    }\n+\n+    public void testJtaDataSource() {\n+        // TODO Disable for non derby.\n+        // split out so that we can try javax.persistence.jtaDataSource in the future.\n+        overridePropertyOnEM(\"javax.persistence.nonJtaDataSource\", jndiNames[0]);\n+    }\n+\n+    public void overridePropertyOnEM(String name, String value) {\n+        // use the default JndiName for the base EntityManagerFactory\n+        EntityManagerFactory emf = getEmf(name, defaultJndiName);\n+        assertNotNull(emf);\n+\n+        EntityManager em = emf.createEntityManager();\n+        assertNotNull(em);\n+\n+        EntityManager em1 = getEm(emf, name, value);\n+        assertNotNull(em1);\n+\n+        // 'prove' that we're using a different database by inserting the same row\n+        em.getTransaction().begin();\n+        em.persist(new Person(1, \"em\"));\n+        em.getTransaction().commit();\n+\n+        em1.getTransaction().begin();\n+        em1.persist(new Person(1, \"em1\"));\n+        em1.getTransaction().commit();\n+\n+        em.clear();\n+        em1.clear();\n+\n+        Person p = em.find(Person.class, 1);\n+        Person p1 = em1.find(Person.class, 1);\n+        assertNotSame(p, p1);\n+        assertEquals(\"em\", p.getName());\n+        assertEquals(\"em1\", p1.getName());\n+\n+        em.clear();\n+        em1.clear();\n+\n+        // make sure inserting the same row again fails.\n+        em.getTransaction().begin();\n+        em.persist(new Person(1));\n+        try {\n+            em.getTransaction().commit();\n+            fail(\"Should not be able to commit the same row a second time\");\n+        } catch (RollbackException rbe) {\n+            assertTrue(rbe.getCause() instanceof EntityExistsException);\n+            // expected\n+        }\n+\n+        em1.getTransaction().begin();\n+        em1.persist(new Person(1));\n+        try {\n+            em1.getTransaction().commit();\n+            fail(\"Should not be able to commit the same row a second time\");\n+        } catch (RollbackException rbe) {\n+            assertTrue(rbe.getCause() instanceof EntityExistsException);\n+            // expected\n+        }\n+        em.close();\n+        em1.close();\n+        emf.close();\n+    }\n+\n+    public void testInvalidCfName() throws Exception {\n+        // ensure EM creation fails - when provided an invalid JNDI name\n+        EntityManagerFactory emf = null;\n+        try {\n+            emf = getEmf(\"openjpa.ConnectionFactory2Name\", defaultJndiName);\n+            getEm(emf, \"openjpa.ConnectionFactory2Name\", \"jdbc/NotReal\");\n+            fail(\"Expected an excepton when creating an EM with a bogus JNDI name\");\n+        } catch (ArgumentException e) {\n+            assertTrue(e.isFatal());\n+            System.out.println(e);\n+            assertTrue(e.getMessage().contains(\"jdbc/NotReal\")); // ensure failing JNDI name is in the message\n+            assertTrue(e.getMessage().contains(\"EntityManager\")); // ensure where the JNDI name came from is in message\n+        }\n+    }\n+}\n+"},{"sha":"1182f64088330019792036e432040a39bfe25853","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/conf/TestSwitchConnection.java","status":"modified","additions":65,"deletions":28,"changes":93,"blob_url":"https://github.com/apache/openjpa/blob/d39c5806886fb5c81c2b959e5e0a602e7c93352c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/conf/TestSwitchConnection.java","raw_url":"https://github.com/apache/openjpa/raw/d39c5806886fb5c81c2b959e5e0a602e7c93352c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/conf/TestSwitchConnection.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/conf/TestSwitchConnection.java?ref=d39c5806886fb5c81c2b959e5e0a602e7c93352c","patch":"@@ -26,78 +26,102 @@\n import javax.persistence.EntityManagerFactory;\n import javax.persistence.RollbackException;\n \n+import org.apache.openjpa.persistence.ArgumentException;\n import org.apache.openjpa.persistence.test.AbstractPersistenceTestCase;\n \n public class TestSwitchConnection extends AbstractPersistenceTestCase {\n     private String defaultJndiName = \"jdbc/mocked\";\n     private String[] jndiNames = { \"jdbc/mocked1\" };\n-    \n-    protected void initEMF(String cfName) { \n-        EntityManagerFactory emf = getEmf(\"openjpa.ConnectionFactoryName\", cfName);\n-        \n+\n+    protected void init(String cfName) {\n+        EntityManagerFactory emf = getEmf(\"openjpa.ConnectionFactoryName\", cfName, true);\n         EntityManager em = emf.createEntityManager();\n         em.getTransaction().begin();\n         em.createQuery(\"Delete from confPerson\").executeUpdate();\n         em.getTransaction().commit();\n         em.close();\n-        \n         emf.close();\n     }\n+\n+    protected void setUp() {\n+        // create an EMF for each database.\n+        init(defaultJndiName);\n+        init(jndiNames[0]);\n+    }\n+\n+    protected EntityManagerFactory getEmf(String cfPropertyName, String cfPropertyValue) {\n+        return getEmf(cfPropertyName, cfPropertyValue, false);\n+    }\n     \n-    protected EntityManagerFactory getEmf(String cfPropertyName, String cfPropertyValue) { \n+    protected EntityManagerFactory getEmf(String cfPropertyName, String cfPropertyValue, boolean syncMappings) {\n         // null out the driver to prevent system properties from taking effect.\n-        // do not set connectionFactoryModeManaged - or connectionFactory2 will be used. \n+        // do not set connectionFactoryModeManaged - or connectionFactory2 will be used.\n+        if(syncMappings) { \n+            return createEMF( \n+                \"openjpa.jdbc.SynchronizeMappings\", \"buildSchema\",\n+                \"openjpa.ConnectionDriverName\", \"\",\n+                cfPropertyName,cfPropertyValue);\n+        }\n         return createEMF(\n-            \"openjpa.ConnectionDriverName\", \"\", \n-            cfPropertyName, cfPropertyValue,\n-            Person.class); \n+            \"openjpa.ConnectionDriverName\", \"\",\n+            cfPropertyName,cfPropertyValue);\n     }\n-    \n+\n     protected EntityManager getEm(EntityManagerFactory emf, String name, String value) {\n         Map<String, Object> props = new HashMap<String, Object>();\n         props.put(name, value);\n         return emf.createEntityManager(props);\n     }\n-    \n-    protected void createTables() { \n-        // create an EMF for each database;\n-        initEMF(defaultJndiName);\n-        initEMF(jndiNames[0]);\n+\n+    public String getPersistenceUnitName() {\n+        return \"TestCfSwitching\";\n     }\n-    \n-    public void testConnectionFactoryName() { \n-        // split out so that we can try javax.persistence.jtaDataSource in the future. \n+\n+    public void testConnectionFactoryName() {\n+        // TODO Disable for non derby.\n+        // split out so that we can try javax.persistence.jtaDataSource in the future.\n         overridePropertyOnEM(\"openjpa.ConnectionFactoryName\", jndiNames[0]);\n     }\n+    \n+    public void testJtaDataSource() {\n+        // TODO Disable for non derby.\n+        // split out so that we can try javax.persistence.jtaDataSource in the future.\n+        overridePropertyOnEM(\"javax.persistence.jtaDataSource\", jndiNames[0]);\n+    }\n \n     public void overridePropertyOnEM(String name, String value) {\n-        // TODO Disable for non derby. \n-        createTables();\n-        \n         // use the default JndiName for the base EntityManagerFactory\n         EntityManagerFactory emf = getEmf(name, defaultJndiName);\n         assertNotNull(emf);\n \n         EntityManager em = emf.createEntityManager();\n         assertNotNull(em);\n \n-        EntityManager em1 = getEm(emf, name, value); \n+        EntityManager em1 = getEm(emf, name, value);\n         assertNotNull(em1);\n \n         // 'prove' that we're using a different database by inserting the same row\n         em.getTransaction().begin();\n-        em.persist(new Person(1));\n+        em.persist(new Person(1, \"em\"));\n         em.getTransaction().commit();\n \n         em1.getTransaction().begin();\n-        em1.persist(new Person(1));\n+        em1.persist(new Person(1, \"em1\"));\n         em1.getTransaction().commit();\n \n         em.clear();\n         em1.clear();\n \n-        // sanity test, make sure inserting the same row again fails.\n-        \n+        Person p = em.find(Person.class, 1);\n+        Person p1 = em1.find(Person.class, 1);\n+        assertNotSame(p, p1);\n+        assertEquals(\"em\", p.getName());\n+        assertEquals(\"em1\", p1.getName());\n+\n+        em.clear();\n+        em1.clear();\n+\n+        // make sure inserting the same row again fails.\n         em.getTransaction().begin();\n         em.persist(new Person(1));\n         try {\n@@ -117,9 +141,22 @@ public void overridePropertyOnEM(String name, String value) {\n             assertTrue(rbe.getCause() instanceof EntityExistsException);\n             // expected\n         }\n-        \n         em.close();\n         em1.close();\n         emf.close();\n     }\n+\n+    public void testInvalidCfName() throws Exception {\n+        // ensure EM creation fails - when provided an invalid JNDI name\n+        EntityManagerFactory emf = null;\n+        try {\n+            emf = getEmf(\"openjpa.ConnectionFactoryName\", defaultJndiName); \n+            getEm(emf, \"openjpa.ConnectionFactoryName\", \"jdbc/NotReal\");\n+            fail(\"Expected an excepton when creating an EM with a bogus JNDI name\");\n+        } catch (ArgumentException e) {\n+            assertTrue(e.isFatal());\n+            assertTrue(e.getMessage().contains(\"jdbc/NotReal\")); // ensure failing JNDI name is in the message\n+            assertTrue(e.getMessage().contains(\"EntityManager\")); // ensure where the JNDI name came from is in message\n+        }\n+    }\n }"},{"sha":"0531b2d442867182c7f96b22a58b5db794f28bc6","filename":"openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/d39c5806886fb5c81c2b959e5e0a602e7c93352c/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/d39c5806886fb5c81c2b959e5e0a602e7c93352c/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml?ref=d39c5806886fb5c81c2b959e5e0a602e7c93352c","patch":"@@ -363,6 +363,10 @@\n             <property name=\"openjpa.jdbc.Schema\" value=\"EJB30\" />\n             -->\n         </properties>\n+    </persistence-unit>    \n+    \n+    <persistence-unit name=\"TestCfSwitching\">\n+        <class>org.apache.openjpa.persistence.conf.Person</class>\n     </persistence-unit>\n \n </persistence>"},{"sha":"648a1c7efc3b0c86d5748e43e6186b94b3675c99","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerFactoryImpl.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/d39c5806886fb5c81c2b959e5e0a602e7c93352c/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerFactoryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/d39c5806886fb5c81c2b959e5e0a602e7c93352c/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerFactoryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerFactoryImpl.java?ref=d39c5806886fb5c81c2b959e5e0a602e7c93352c","patch":"@@ -30,6 +30,7 @@\n import javax.persistence.PersistenceUnitUtil;\n import javax.persistence.spi.LoadState;\n \n+import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.kernel.AutoDetach;\n import org.apache.openjpa.kernel.Broker;\n@@ -39,6 +40,7 @@\n import org.apache.openjpa.kernel.FetchConfiguration;\n import org.apache.openjpa.lib.conf.Configurations;\n import org.apache.openjpa.lib.conf.Value;\n+import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.lib.util.Closeable;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.persistence.criteria.CriteriaBuilderImpl;\n@@ -165,6 +167,7 @@ else if (!props.isEmpty())\n             props = new HashMap(props);\n \n         OpenJPAConfiguration conf = getConfiguration();\n+        Log log = conf.getLog(OpenJPAConfiguration.LOG_RUNTIME);\n         String user = (String) Configurations.removeProperty(\"ConnectionUserName\", props);\n         if (user == null)\n             user = conf.getConnectionUserName();\n@@ -210,6 +213,10 @@ else if (!props.isEmpty())\n             cf2Name = (String) Configurations.removeProperty(\"ConnectionFactory2Name\", props);\n         }\n         \n+        if (log != null && log.isTraceEnabled()) {\n+            log.trace(\"Found ConnectionFactoryName from props: \" + cfName);\n+        }\n+\n         Broker broker = _factory.newBroker(user, pass, managed, retainMode, false, cfName, cf2Name);\n             \n         // add autodetach for close and rollback conditions to the configuration"}]}

