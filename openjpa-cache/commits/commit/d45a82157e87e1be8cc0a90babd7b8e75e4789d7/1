{"sha":"d45a82157e87e1be8cc0a90babd7b8e75e4789d7","node_id":"MDY6Q29tbWl0MjA2MzY0OmQ0NWE4MjE1N2U4N2UxYmU4Y2MwYTkwYmFiZDdiOGU3NWU0Nzg5ZDc=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-08-25T01:18:04Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-08-25T01:18:04Z"},"message":"OPENJPA-1262: Missed file in commit\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@807445 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"eda98840a1e69847b57095c8edc185c6c3901648","url":"https://api.github.com/repos/apache/openjpa/git/trees/eda98840a1e69847b57095c8edc185c6c3901648"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/d45a82157e87e1be8cc0a90babd7b8e75e4789d7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/d45a82157e87e1be8cc0a90babd7b8e75e4789d7","html_url":"https://github.com/apache/openjpa/commit/d45a82157e87e1be8cc0a90babd7b8e75e4789d7","comments_url":"https://api.github.com/repos/apache/openjpa/commits/d45a82157e87e1be8cc0a90babd7b8e75e4789d7/comments","author":null,"committer":null,"parents":[{"sha":"2d4993954f5c191f8fb3c3e66dd3312fcd3ac565","url":"https://api.github.com/repos/apache/openjpa/commits/2d4993954f5c191f8fb3c3e66dd3312fcd3ac565","html_url":"https://github.com/apache/openjpa/commit/2d4993954f5c191f8fb3c3e66dd3312fcd3ac565"}],"stats":{"total":47,"additions":23,"deletions":24},"files":[{"sha":"d74e77338af71dcf1a61b704fb739c14f6bc66be","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/FromImpl.java","status":"modified","additions":23,"deletions":24,"changes":47,"blob_url":"https://github.com/apache/openjpa/blob/d45a82157e87e1be8cc0a90babd7b8e75e4789d7/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/FromImpl.java","raw_url":"https://github.com/apache/openjpa/raw/d45a82157e87e1be8cc0a90babd7b8e75e4789d7/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/FromImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/FromImpl.java?ref=d45a82157e87e1be8cc0a90babd7b8e75e4789d7","patch":"@@ -180,56 +180,55 @@ protected FromImpl(PathImpl<?,Z> parent, Members.Member<? super Z, ?> m, Class<X\n     }\n \n     public <W,Y> Join<W,Y> join(String attr, JoinType jt) {\n-        ManagedType<X> mtype = assertJoinable();\n-        return (Join<W,Y>)join(mtype.getSingularAttribute(attr), jt);\n+        assertJoinable();\n+        return (Join<W,Y>)join(((ManagedType<X>)type).getSingularAttribute(attr), jt);\n     }\n \n \n     public <W,Y> CollectionJoin<W, Y> joinCollection(String attr) {\n-        ManagedType<X> mtype = assertJoinable();\n-        return (CollectionJoin<W,Y>)join(mtype.getCollection(attr), JoinType.INNER);\n+        assertJoinable();\n+        return (CollectionJoin<W,Y>)join(((ManagedType<X>)type).getCollection(attr), JoinType.INNER);\n     }\n \n     public <W,Y> CollectionJoin<W, Y> joinCollection(String attr, JoinType jt) {\n-        ManagedType<X> mtype = assertJoinable();\n-        return (CollectionJoin<W,Y>)join(mtype.getCollection(attr), jt);\n+        assertJoinable();\n+        return (CollectionJoin<W,Y>)join(((ManagedType<X>)type).getCollection(attr), jt);\n     }\n \n     public <W,Y> ListJoin<W, Y> joinList(String attr) {\n-        ManagedType<X> mtype = assertJoinable();\n-        return (ListJoin<W,Y>)join(mtype.getList(attr), JoinType.INNER);\n+        assertJoinable();\n+        return (ListJoin<W,Y>)join(((ManagedType<X>)type).getList(attr), JoinType.INNER);\n     }\n \n     public <W,Y> ListJoin<W,Y> joinList(String attr, JoinType jt) {\n-        ManagedType<X> mtype = assertJoinable();\n-        return (ListJoin<W,Y>)join(mtype.getList(attr), jt);\n+        assertJoinable();\n+        return (ListJoin<W,Y>)join(((ManagedType<X>)type).getList(attr), jt);\n     }\n \n     public <W,K,V> MapJoin<W,K,V> joinMap(String attr) {\n-        ManagedType<X> mtype = assertJoinable();\n-        return (MapJoin<W,K,V>)join(mtype.getMap(attr));\n+        assertJoinable();\n+        return (MapJoin<W,K,V>)join(((ManagedType<X>)type).getMap(attr));\n     }\n \n     public <W,K,V> MapJoin<W,K,V>  joinMap(String attr, JoinType jt) {\n-        ManagedType<X> mtype = assertJoinable();\n-        return (MapJoin<W,K,V>)join(mtype.getMap(attr));\n+        assertJoinable();\n+        return (MapJoin<W,K,V>)join(((ManagedType<X>)type).getMap(attr));\n     }\n \n     public <W,Y> SetJoin<W, Y>  joinSet(String attr) {\n-        ManagedType<X> mtype = assertJoinable();\n-        return (SetJoin<W, Y>)join(mtype.getSet(attr));\n+        assertJoinable();\n+        return (SetJoin<W, Y>)join(((ManagedType<X>)type).getSet(attr));\n     }\n \n     public <W,Y> SetJoin<W, Y>  joinSet(String attr, JoinType jt) {\n-        ManagedType<X> mtype = assertJoinable();\n-        return (SetJoin<W, Y>)join(mtype.getSet(attr), jt);\n+        assertJoinable();\n+        return (SetJoin<W, Y>)join(((ManagedType<X>)type).getSet(attr), jt);\n     }\n     \n-    ManagedType<X> assertJoinable() {\n+    void assertJoinable() {\n         if (type.getPersistenceType() == PersistenceType.BASIC) {\n             throw new IllegalArgumentException(this + \" is a basic path and can not be navigated to \");\n         }\n-        return (ManagedType<X>)type;\n     }\n \n     private void addJoin(Join<X,?> join) {\n@@ -258,13 +257,13 @@ private void addJoin(Join<X,?> join) {\n \n     //String-based:\n \n-    public <Y> Fetch<X, Y> fetch(String assocName) {\n+    public <X,Y> Fetch<X, Y> fetch(String assocName) {\n         return fetch(assocName, JoinType.INNER);\n     }\n \n-    public <Y> Fetch<X, Y> fetch(String name, JoinType jt) {\n-        ManagedType<X> mtype = assertJoinable();\n-        Attribute<? super X,?> attr = mtype.getAttribute(name);\n+    public <X,Y> Fetch<X, Y> fetch(String name, JoinType jt) {\n+        assertJoinable();\n+        Attribute<? super X,?> attr = ((ManagedType<X>)type).getAttribute(name);\n         if (attr.isCollection()) {\n             return fetch((PluralAttribute)attr, jt);\n         } else {"}]}

