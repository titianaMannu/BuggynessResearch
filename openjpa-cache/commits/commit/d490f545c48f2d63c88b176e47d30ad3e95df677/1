{"sha":"d490f545c48f2d63c88b176e47d30ad3e95df677","node_id":"MDY6Q29tbWl0MjA2MzY0OmQ0OTBmNTQ1YzQ4ZjJkNjNjODhiMTc2ZTQ3ZDMwYWQzZTk1ZGY2Nzc=","commit":{"author":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-10-08T18:17:28Z"},"committer":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-10-08T18:17:28Z"},"message":"Make the inability to instantiate an auxiliary enhancer non-fatal.  Also cache\nauxiliary enhancers statically to speed up enhancement.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@454184 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e5f5ecbe22848686c8ef1e39c654f1c86824a2d0","url":"https://api.github.com/repos/apache/openjpa/git/trees/e5f5ecbe22848686c8ef1e39c654f1c86824a2d0"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/d490f545c48f2d63c88b176e47d30ad3e95df677","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/d490f545c48f2d63c88b176e47d30ad3e95df677","html_url":"https://github.com/apache/openjpa/commit/d490f545c48f2d63c88b176e47d30ad3e95df677","comments_url":"https://api.github.com/repos/apache/openjpa/commits/d490f545c48f2d63c88b176e47d30ad3e95df677/comments","author":null,"committer":null,"parents":[{"sha":"dcf691a7273437ffc53336c2d41115ee566fe2dc","url":"https://api.github.com/repos/apache/openjpa/commits/dcf691a7273437ffc53336c2d41115ee566fe2dc","html_url":"https://github.com/apache/openjpa/commit/dcf691a7273437ffc53336c2d41115ee566fe2dc"}],"stats":{"total":55,"additions":25,"deletions":30},"files":[{"sha":"8671bb9a9f7e7b3e6d6b4d3fcd4f5d125fabebc4","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","status":"modified","additions":21,"deletions":25,"changes":46,"blob_url":"https://github.com/apache/openjpa/blob/d490f545c48f2d63c88b176e47d30ad3e95df677/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","raw_url":"https://github.com/apache/openjpa/raw/d490f545c48f2d63c88b176e47d30ad3e95df677/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java?ref=d490f545c48f2d63c88b176e47d30ad3e95df677","patch":"@@ -109,6 +109,22 @@\n \n     private static final Localizer _loc = Localizer.forPackage\n         (PCEnhancer.class);\n+    private static final AuxiliaryEnhancer[] _auxEnhancers;\n+    static {\n+        Class[] classes = Services.getImplementorClasses(\n+            AuxiliaryEnhancer.class, \n+            AuxiliaryEnhancer.class.getClassLoader());\n+        List auxEnhancers = new ArrayList(classes.length);\n+        for (int i = 0; i < classes.length; i++) {\n+            try {\n+                auxEnhancers.add(classes[i].newInstance());\n+\t\t    } catch (Throwable t) {\n+                // aux enhancer may rely on non-existant spec classes, etc\n+\t\t    }\n+\t\t}\n+    \t_auxEnhancers = (AuxiliaryEnhancer[]) auxEnhancers.toArray\n+            (new AuxiliaryEnhancer[auxEnhancers.size()]);\n+    }\n \n     private final BCClass _pc;\n     private final MetaDataRepository _repos;\n@@ -118,7 +134,6 @@\n \n     private boolean _defCons = true;\n     private boolean _fail = false;\n-    private AuxiliaryEnhancer[] _auxEnhancers = null;\n     private File _dir = null;\n     private BytecodeWriter _writer = null;\n     private Map _backingFields = null;\n@@ -2639,35 +2654,17 @@ private BCClass getObjectIdBytecode(Class cls) {\n \n     /**\n      * Gets the auxiliary enhancers registered as {@link Services services}.\n-     * Multi-call safe -- the first call locates the auxiliary enhancers,\n-     * subsequent calls merely returns the existing set.\n-     * \n-     * @return array of auxiliary enhancers. empty array if none is registered.\n      */\n     public AuxiliaryEnhancer[] getAuxiliaryEnhancers() {\n-\t\tif (_auxEnhancers == null) {\n-\t\t    try {\n-                Class[] classes = Services.getImplementorClasses(\n-                    AuxiliaryEnhancer.class, \n-                    AuxiliaryEnhancer.class.getClassLoader());\n-                _auxEnhancers = new AuxiliaryEnhancer[classes.length];\n-                for (int i = 0; i < _auxEnhancers.length; i++)\n-                    _auxEnhancers[i] = (AuxiliaryEnhancer) classes[i].\n-                        newInstance();\n-\t\t    } catch (Throwable t) {\n-\t\t\t    throw new GeneralException(t);\n-\t\t    }\n-\t\t}\n-    \treturn _auxEnhancers;\t\n+\t\treturn _auxEnhancers;\n     }\n     \n     /**\n      * Allow any registered auxiliary code generators to run.\n      */\n     private void runAuxiliaryEnhancers() {\n-    \tAuxiliaryEnhancer[] auxEnhancers = getAuxiliaryEnhancers();\n-    \tfor (int i = 0; i < auxEnhancers.length; i++)\n-    \t\tauxEnhancers[i].run(_pc, _meta);\n+    \tfor (int i = 0; i < _auxEnhancers.length; i++)\n+    \t\t_auxEnhancers[i].run(_pc, _meta);\n     }\n     \n     /**\n@@ -2677,9 +2674,8 @@ private void runAuxiliaryEnhancers() {\n      * @return true if any of the auxiliary enhancers skips the given method\n      */\n     private boolean skipEnhance(BCMethod method) {\n-    \tAuxiliaryEnhancer[] auxEnhancers = getAuxiliaryEnhancers();\n-    \tfor (int i = 0; i < auxEnhancers.length; i++)\n-    \t\tif (auxEnhancers[i].skipEnhance(method))\n+    \tfor (int i = 0; i < _auxEnhancers.length; i++)\n+    \t\tif (_auxEnhancers[i].skipEnhance(method))\n     \t\t\treturn true;\n     \treturn false;\n     }"},{"sha":"0ff9a385fb9fc907d126ad836e96388a500de948","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/enhance/localizer.properties","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/d490f545c48f2d63c88b176e47d30ad3e95df677/openjpa-kernel/src/main/resources/org/apache/openjpa/enhance/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/d490f545c48f2d63c88b176e47d30ad3e95df677/openjpa-kernel/src/main/resources/org/apache/openjpa/enhance/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/enhance/localizer.properties?ref=d490f545c48f2d63c88b176e47d30ad3e95df677","patch":"@@ -2,9 +2,9 @@ needs-runtime-enhance: \"{0}\" requires runtime enhancement: {1}\n runtime-enhance-pcclasses: You have enabled runtime enhancement, but have not \\\n \tspecified the set of persistent classes.  OpenJPA must look for metadata for \\\n \tevery loaded class, which might increase class load times significantly.\n-running-all-classes: No targets were given.  Running on all classes listed in \\\n-\torg.apache.openjpa.PersistentClasses, or all metadata files in classpath directories if \\\n-\tthe property is not specified.\n+running-all-classes: No targets were given.  Running on all classes in your \\\n+    persistent classes list, or all metadata files in classpath directories if \\\n+\tyou have not listed your persistent classes.\n detach-custom-ser: Type \"{0}\" is set to detach on serialize, but implements \\\n \ta custom readObject and/or writeObject method.  You cannot use custom \\\n \tserialization with detachment. "},{"sha":"095e120320238a6f0faf0da7d5fbdb91d2cb237c","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Services.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/d490f545c48f2d63c88b176e47d30ad3e95df677/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Services.java","raw_url":"https://github.com/apache/openjpa/raw/d490f545c48f2d63c88b176e47d30ad3e95df677/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Services.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Services.java?ref=d490f545c48f2d63c88b176e47d30ad3e95df677","patch":"@@ -124,8 +124,7 @@ private static void addResources(URL url, Set set) throws IOException {\n                     }\n                 }\n             }\n-        }\n-        finally {\n+        } finally {\n             try {\n                 in.close();\n             } catch (IOException ioe) {"}]}

