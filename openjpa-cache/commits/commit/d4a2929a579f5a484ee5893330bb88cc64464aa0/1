{"sha":"d4a2929a579f5a484ee5893330bb88cc64464aa0","node_id":"MDY6Q29tbWl0MjA2MzY0OmQ0YTI5MjlhNTc5ZjVhNDg0ZWU1ODkzMzMwYmI4OGNjNjQ0NjRhYTA=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-01-10T20:44:35Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-01-10T20:44:35Z"},"message":"OPENJPA-147 -- managed interface support. Also includes failure test case for OPENJPA-481.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@610924 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"fb4c407290eeb089f0b75d6928a6688a9040ab01","url":"https://api.github.com/repos/apache/openjpa/git/trees/fb4c407290eeb089f0b75d6928a6688a9040ab01"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/d4a2929a579f5a484ee5893330bb88cc64464aa0","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/d4a2929a579f5a484ee5893330bb88cc64464aa0","html_url":"https://github.com/apache/openjpa/commit/d4a2929a579f5a484ee5893330bb88cc64464aa0","comments_url":"https://api.github.com/repos/apache/openjpa/commits/d4a2929a579f5a484ee5893330bb88cc64464aa0/comments","author":null,"committer":null,"parents":[{"sha":"2933147f53d43377613e9d51d51f9a55df75346e","url":"https://api.github.com/repos/apache/openjpa/commits/2933147f53d43377613e9d51d51f9a55df75346e","html_url":"https://github.com/apache/openjpa/commit/2933147f53d43377613e9d51d51f9a55df75346e"}],"stats":{"total":1063,"additions":1008,"deletions":55},"files":[{"sha":"a2f5277375f04ca92afabdbcc61308e69e8f53d5","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","status":"modified","additions":57,"deletions":23,"changes":80,"blob_url":"https://github.com/apache/openjpa/blob/d4a2929a579f5a484ee5893330bb88cc64464aa0/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","raw_url":"https://github.com/apache/openjpa/raw/d4a2929a579f5a484ee5893330bb88cc64464aa0/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java?ref=d4a2929a579f5a484ee5893330bb88cc64464aa0","patch":"@@ -176,7 +176,9 @@\n     private boolean _bcsConfigured = false;\n \n     /**\n-     * Constructor. Supply configuration and type to enhance.\n+     * Constructor. Supply configuration and type to enhance. This will look\n+     * up the metadata for <code>type</code> from <code>conf</code>'s\n+     * repository.\n      */\n     public PCEnhancer(OpenJPAConfiguration conf, Class type) {\n         this(conf, (BCClass) AccessController.doPrivileged(J2DoPrivHelper\n@@ -185,12 +187,14 @@ public PCEnhancer(OpenJPAConfiguration conf, Class type) {\n     }\n \n     /**\n-     * Constructor. Supply configuration and type to enhance.\n+     * Constructor. Supply configuration and type to enhance. This will look\n+     * up the metadata for <code>meta</code> by converting back to a class\n+     * and then loading from <code>conf</code>'s repository.\n      */\n-    public PCEnhancer(OpenJPAConfiguration conf, ClassMetaData type) {\n+    public PCEnhancer(OpenJPAConfiguration conf, ClassMetaData meta) {\n         this(conf, (BCClass) AccessController.doPrivileged(J2DoPrivHelper\n-            .loadProjectClassAction(new Project(), type.getDescribedType())),\n-            type.getRepository());\n+            .loadProjectClassAction(new Project(), meta.getDescribedType())),\n+            meta.getRepository());\n     }\n \n     /**\n@@ -241,6 +245,36 @@ public PCEnhancer(OpenJPAConfiguration conf, BCClass type,\n         _meta = _repos.getMetaData(type.getType(), loader, false);\n     }\n \n+    /**\n+     * Constructor. Supply repository. The repository's configuration will\n+     * be used, and the metadata passed in will be used as-is without doing\n+     * any additional lookups. This is useful when running the enhancer\n+     * during metadata load.\n+     *\n+     * @param repos a metadata repository to use for metadata access,\n+     * or null to create a new reporitory; the repository\n+     * from the given configuration isn't used by default\n+     * because the configuration might be an\n+     * implementation-specific subclass whose metadata\n+     * required more than just base metadata files\n+     * @param type the bytecode representation fo the type to\n+     * enhance; this can be created from any stream or file\n+     * @param meta the metadata to use for processing this type.\n+     *\n+     * @since 1.1.0\n+     */\n+    public PCEnhancer(MetaDataRepository repos, BCClass type,\n+        ClassMetaData meta) {\n+        _managedType = type;\n+        _pc = type;\n+\n+        _log = repos.getConfiguration()\n+            .getLog(OpenJPAConfiguration.LOG_ENHANCE);\n+\n+        _repos = repos;\n+        _meta = meta;\n+    }\n+\n     static String toPCSubclassName(Class cls) {\n         return Strings.getPackageName(PCEnhancer.class) + \".\"\n             + cls.getName().replace('.', '$') + \"$pcsubclass\";\n@@ -453,7 +487,7 @@ public int run() {\n \n         try {\n             // if managed interface, skip\n-            if (_managedType.isInterface())\n+            if (_pc.isInterface())\n                 return ENHANCE_INTERFACE;\n \n             // check if already enhanced\n@@ -526,8 +560,6 @@ private void configureBCs() {\n                 } else {\n                     _isAlreadySubclassed = true;\n                 }\n-            } else {\n-                _pc = _managedType;\n             }\n \n             _bcsConfigured = true;\n@@ -2656,8 +2688,10 @@ private void addStaticInitializer() {\n             }\n \n             // pcPCSuperclass = <superClass>;\n-            code.classconstant().setClass(getType(_meta.\n-                getPCSuperclassMetaData()));\n+            // this intentionally calls getDescribedType() directly\n+            // instead of PCEnhancer.getType()\n+            code.classconstant().setClass(\n+                _meta.getPCSuperclassMetaData().getDescribedType());\n             code.putstatic().setField(SUPER, Class.class);\n         }\n \n@@ -2698,7 +2732,7 @@ private void addStaticInitializer() {\n         // PCRegistry.register (cls,\n         //\tpcFieldNames, pcFieldTypes, pcFieldFlags,\n         //  pcPCSuperclass, alias, new XXX ());\n-        code.classconstant().setClass(_managedType);\n+        code.classconstant().setClass(_meta.getDescribedType());\n         code.getstatic().setField(PRE + \"FieldNames\", String[].class);\n         code.getstatic().setField(PRE + \"FieldTypes\", Class[].class);\n         code.getstatic().setField(PRE + \"FieldFlags\", byte[].class);\n@@ -3627,19 +3661,19 @@ private void getfield(Code code, BCClass declarer, String attrName) {\n         // first, see if we can convert the attribute name to a field name\n         String fieldName = toBackingFieldName(attrName);\n \n-        // next, find the field in the managed type.\n-        BCField[] fields = (BCField[]) AccessController\n-            .doPrivileged(J2DoPrivHelper.getBCClassFieldsAction(_managedType,\n-                fieldName)); \n+        // next, find the field in the managed type hierarchy\n         BCField field = null;\n-        for (int i = 0; i < fields.length; i++) {\n-            field = fields[i];\n-            // if we reach a field declared in this type, then this is the\n-            // most-masking field, and is the one that we want.\n-            // ##### probably should walk up the hierarchy, or check that\n-            // ##### serp does that.\n-            if (fields[i].getDeclarer() == declarer) {\n-                break;\n+        outer: for (BCClass bc = _pc; bc != null; bc = bc.getSuperclassBC()) {\n+            BCField[] fields = (BCField[]) AccessController\n+                .doPrivileged(J2DoPrivHelper.getBCClassFieldsAction(bc,\n+                    fieldName));\n+            for (int i = 0; i < fields.length; i++) {\n+                field = fields[i];\n+                // if we reach a field declared in this type, then this is the\n+                // most-masking field, and is the one that we want.\n+                if (fields[i].getDeclarer() == declarer) {\n+                    break outer;\n+                }\n             }\n         }\n "},{"sha":"454e16efb8ad24e24cc0604eef9b9b250428add6","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCRegistry.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/d4a2929a579f5a484ee5893330bb88cc64464aa0/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCRegistry.java","raw_url":"https://github.com/apache/openjpa/raw/d4a2929a579f5a484ee5893330bb88cc64464aa0/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCRegistry.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCRegistry.java?ref=d4a2929a579f5a484ee5893330bb88cc64464aa0","patch":"@@ -28,6 +28,7 @@\n import org.apache.openjpa.lib.util.ReferenceMap;\n import org.apache.openjpa.lib.util.concurrent.ConcurrentReferenceHashMap;\n import org.apache.openjpa.util.UserException;\n+import org.apache.openjpa.util.InvalidStateException;\n \n /**\n  * Tracks registered persistence-capable classes."},{"sha":"e945eba5a8173d770370f8784e006b528173378d","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Broker.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/d4a2929a579f5a484ee5893330bb88cc64464aa0/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Broker.java","raw_url":"https://github.com/apache/openjpa/raw/d4a2929a579f5a484ee5893330bb88cc64464aa0/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Broker.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Broker.java?ref=d4a2929a579f5a484ee5893330bb88cc64464aa0","patch":"@@ -557,7 +557,11 @@ public void setImplicitBehavior(OpCallbacks call,\n      * an interface or an abstract class whose abstract methods follow the\n      * JavaBeans convention, this method will create a concrete implementation\n      * according to the metadata that defines the class.\n-     * Otherwise, this will return an instance of the specified class.\n+     * Otherwise, if <code>cls</code> is a managed type, this will return an\n+     * instance of the specified class.\n+     *\n+     * @throws IllegalArgumentException if <code>cls</code> is not a managed\n+     * type or interface.\n      */\n     public Object newInstance(Class cls);\n "},{"sha":"65af581076290f9e556740746a92ba3bddba8787","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","status":"modified","additions":9,"deletions":8,"changes":17,"blob_url":"https://github.com/apache/openjpa/blob/d4a2929a579f5a484ee5893330bb88cc64464aa0/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/d4a2929a579f5a484ee5893330bb88cc64464aa0/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java?ref=d4a2929a579f5a484ee5893330bb88cc64464aa0","patch":"@@ -2641,8 +2641,6 @@ public OpenJPAStateManager embed(Object obj, Object id,\n             PersistenceCapable copy;\n             PCState state;\n             Class type = meta.getDescribedType();\n-            if (type.isInterface())\n-                type = meta.getInterfaceImpl();\n             if (obj != null) {\n                 // give copy and the original instance the same state manager\n                 // so that we can copy fields from one to the other\n@@ -4152,11 +4150,7 @@ public void unlock() {\n     public Object newInstance(Class cls) {\n         assertOpen();\n \n-        if (cls.isInterface()) {\n-            ClassMetaData meta = _conf.getMetaDataRepositoryInstance().\n-                getMetaData(cls, _loader, true);\n-            cls = meta.getInterfaceImpl();\n-        } else if (Modifier.isAbstract(cls.getModifiers()))\n+        if (!cls.isInterface() && Modifier.isAbstract(cls.getModifiers()))\n             throw new UnsupportedOperationException(_loc.get\n                 (\"new-abstract\", cls).getMessage());\n \n@@ -4169,7 +4163,14 @@ public Object newInstance(Class cls) {\n             } catch (Throwable t) {\n             }\n         }\n-        return PCRegistry.newInstance(cls, null, false);\n+        try {\n+            return PCRegistry.newInstance(cls, null, false);\n+        } catch (IllegalStateException ise) {\n+            IllegalArgumentException iae =\n+                new IllegalArgumentException(ise.getMessage());\n+            iae.setStackTrace(ise.getStackTrace());\n+            throw iae;\n+        }\n     }\n \n     public Object getObjectId(Object obj) {"},{"sha":"eb33507a7ec4f302d5aee260e48f46f43f772726","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/d4a2929a579f5a484ee5893330bb88cc64464aa0/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/d4a2929a579f5a484ee5893330bb88cc64464aa0/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java?ref=d4a2929a579f5a484ee5893330bb88cc64464aa0","patch":"@@ -260,8 +260,6 @@ else if (sub.getObjectIdType() != _meta.getObjectIdType()) {\n             }\n             _meta = sub;\n         }\n-        if (cls.isInterface())\n-            cls = _meta.getInterfaceImpl();\n \n         PersistenceCapable inst = PCRegistry.newInstance(cls, this, _oid, true);\n         if (inst == null) {\n@@ -814,7 +812,8 @@ public void dirtyCheck() {\n \n         SaveFieldManager saved = getSaveFieldManager();\n         if (saved == null)\n-            throw new InternalException(_loc.get(\"no-saved-fields\"));\n+            throw new InternalException(_loc.get(\"no-saved-fields\",\n+                getMetaData().getDescribedType().getName()));\n \n         FieldMetaData[] fmds = getMetaData().getFields();\n         for (int i = 0; i < fmds.length; i++) {"},{"sha":"762eee91969f8e1be5cfc1282a04776960f56f33","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractMetaDataDefaults.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/d4a2929a579f5a484ee5893330bb88cc64464aa0/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractMetaDataDefaults.java","raw_url":"https://github.com/apache/openjpa/raw/d4a2929a579f5a484ee5893330bb88cc64464aa0/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractMetaDataDefaults.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractMetaDataDefaults.java?ref=d4a2929a579f5a484ee5893330bb88cc64464aa0","patch":"@@ -180,6 +180,8 @@ protected void populate(FieldMetaData fmd) {\n      */\n     private boolean populateFromPCRegistry(ClassMetaData meta) {\n         Class cls = meta.getDescribedType();\n+        if (!PCRegistry.isRegistered(cls))\n+            return false;\n         try {\n             String[] fieldNames = PCRegistry.getFieldNames(cls);\n             Class[] fieldTypes = PCRegistry.getFieldTypes(cls);\n@@ -198,9 +200,6 @@ private boolean populateFromPCRegistry(ClassMetaData meta) {\n                 populate(fmd);\n             }\n             return true;\n-        } catch (IllegalStateException iae) {\n-            // thrown by registry when no metadata available\n-            return false;\n         } catch (OpenJPAException ke) {\n             throw ke;\n         } catch (Exception e) {"},{"sha":"43c097b8d81134c18a8904cc8a190310a1a86d73","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/d4a2929a579f5a484ee5893330bb88cc64464aa0/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/d4a2929a579f5a484ee5893330bb88cc64464aa0/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java?ref=d4a2929a579f5a484ee5893330bb88cc64464aa0","patch":"@@ -732,6 +732,11 @@ public void setManagedInterface(boolean managedInterface) {\n         if (!_type.isInterface())\n             throw new MetaDataException(_loc.get(\"not-interface\", _type));\n         _interface = managedInterface ? Boolean.TRUE : Boolean.FALSE;\n+\n+        // managed interfaces always do proper interception; OpenJPA generates\n+        // the implementations.\n+        if (isManagedInterface())\n+            setIntercepting(true);\n     }\n \n     /**\n@@ -2235,6 +2240,7 @@ public void copy(ClassMetaData meta) {\n         _extent = (meta.getRequiresExtent()) ? Boolean.TRUE : Boolean.FALSE;\n         _embedded = (meta.isEmbeddedOnly()) ? Boolean.TRUE : Boolean.FALSE;\n         _interface = (meta.isManagedInterface()) ? Boolean.TRUE : Boolean.FALSE;\n+        setIntercepting(meta.isIntercepting());\n         _impl = meta.getInterfaceImpl();\n         _identity = meta.getIdentityType();\n         _idStrategy = meta.getIdentityStrategy();"},{"sha":"5f6fdd2b0e9de608c0f85548dcbface6b5b0daba","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/InterfaceImplGenerator.java","status":"modified","additions":16,"deletions":3,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/d4a2929a579f5a484ee5893330bb88cc64464aa0/openjpa-kernel/src/main/java/org/apache/openjpa/meta/InterfaceImplGenerator.java","raw_url":"https://github.com/apache/openjpa/raw/d4a2929a579f5a484ee5893330bb88cc64464aa0/openjpa-kernel/src/main/java/org/apache/openjpa/meta/InterfaceImplGenerator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/InterfaceImplGenerator.java?ref=d4a2929a579f5a484ee5893330bb88cc64464aa0","patch":"@@ -114,14 +114,13 @@ public synchronized Class createImpl(ClassMetaData meta) {\n         // copy the BCClass into the enhancer project.\n         bc = _enhProject.loadClass(new ByteArrayInputStream(bc.toByteArray()), \n             loader);\n-        PCEnhancer enhancer = new PCEnhancer(_repos.getConfiguration(), bc, \n-            meta);\n+        PCEnhancer enhancer = new PCEnhancer(_repos, bc, meta);\n \n         int result = enhancer.run();\n         if (result != PCEnhancer.ENHANCE_PC)\n             throw new InternalException(_loc.get(\"interface-badenhance\", \n                 iface)).setFatal(true);\n-        try{\n+        try {\n             // load the class for real.\n             impl = Class.forName(bc.getName(), true, enhLoader);\n         } catch (Throwable t) {\n@@ -229,4 +228,18 @@ private static boolean isGetter(Class iface, FieldMetaData fmd) {\n         } catch (PrivilegedActionException pae) {}\n         return true;\n     }\n+\n+    boolean isImplType(Class cls) {\n+        return (cls.getName().endsWith(POSTFIX)\n+            && cls.getName().indexOf('$') != -1);\n+    }\n+\n+    public Class toManagedInterface(Class cls) {\n+        Class[] ifaces = cls.getInterfaces();\n+        for (int i = 0; i < ifaces.length; i++) {\n+            if (_impls.get(ifaces[i]) == cls)\n+                return ifaces[i];\n+        }\n+        throw new IllegalArgumentException(cls.getName());\n+    }\n }"},{"sha":"9cd2f0e2d81cff5481709450befb777e104405a3","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","status":"modified","additions":13,"deletions":4,"changes":17,"blob_url":"https://github.com/apache/openjpa/blob/d4a2929a579f5a484ee5893330bb88cc64464aa0/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","raw_url":"https://github.com/apache/openjpa/raw/d4a2929a579f5a484ee5893330bb88cc64464aa0/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java?ref=d4a2929a579f5a484ee5893330bb88cc64464aa0","patch":"@@ -287,6 +287,11 @@ public synchronized ClassMetaData getMetaData(Class cls,\n             DynamicPersistenceCapable.class.isAssignableFrom(cls))\n             cls = cls.getSuperclass();\n \n+        // if cls is a generated interface, use the user interface\n+        // to locate metadata\n+        if (cls != null && _implGen.isImplType(cls))\n+            cls = _implGen.toManagedInterface(cls);\n+\n         ClassMetaData meta = getMetaDataInternal(cls, envLoader);\n         if (meta == null && mustExist) {\n             if (cls != null &&\n@@ -952,7 +957,6 @@ synchronized void setInterfaceImpl(ClassMetaData meta, Class impl) {\n             throw new MetaDataException(_loc.get(\"not-managed-interface\", \n                 meta, impl));\n         _ifaces.put(meta.getDescribedType(), impl);\n-        _metas.put(impl, meta);\n         addDeclaredInterfaceImpl(meta, meta.getDescribedType());\n         ClassMetaData sup = meta.getPCSuperclassMetaData();\n         while (sup != null) {\n@@ -964,9 +968,7 @@ synchronized void setInterfaceImpl(ClassMetaData meta, Class impl) {\n         }\n     }\n     \n-    synchronized InterfaceImplGenerator getImplGenerator() {\n-        if (_implGen == null)\n-            _implGen = new InterfaceImplGenerator(this);\n+    InterfaceImplGenerator getImplGenerator() {\n         return _implGen;\n     }\n \n@@ -1278,6 +1280,11 @@ public synchronized Collection loadPersistentTypes(boolean devpath,\n             cls = classForName((String) itr.next(), clsLoader);\n             if (cls != null)\n                 classes.add(cls);\n+\n+            // if the class is an interface, load its metadata to kick\n+            // off the impl generator\n+            if (cls.isInterface())\n+                getMetaData(cls, clsLoader, false);\n         }\n         return classes;\n     }\n@@ -1548,6 +1555,8 @@ public void startConfiguration() {\n \n     public void endConfiguration() {\n         initializeMetaDataFactory();\n+        if (_implGen == null)\n+            _implGen = new InterfaceImplGenerator(this);\n     }\n \n     private void initializeMetaDataFactory() {"},{"sha":"de67d40aee3628e7897051fc6fe0f636cf65ea2b","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ApplicationIds.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/d4a2929a579f5a484ee5893330bb88cc64464aa0/openjpa-kernel/src/main/java/org/apache/openjpa/util/ApplicationIds.java","raw_url":"https://github.com/apache/openjpa/raw/d4a2929a579f5a484ee5893330bb88cc64464aa0/openjpa-kernel/src/main/java/org/apache/openjpa/util/ApplicationIds.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ApplicationIds.java?ref=d4a2929a579f5a484ee5893330bb88cc64464aa0","patch":"@@ -301,9 +301,7 @@ public static Object copy(Object oid, ClassMetaData meta) {\n         // oid instance\n         if (!Modifier.isAbstract(meta.getDescribedType().getModifiers())\n             && !hasPCPrimaryKeyFields(meta)) {\n-            Class type = meta.getInterfaceImpl();\n-            if (type == null)\n-                type = meta.getDescribedType();\n+            Class type = meta.getDescribedType();\n             PersistenceCapable pc = PCRegistry.newInstance(type, null, oid, \n                  false);\n             Object copy = pc.pcNewObjectIdInstance();"},{"sha":"55970dfc08f5317e186f867ed4b2e86d163e21fb","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/d4a2929a579f5a484ee5893330bb88cc64464aa0/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/d4a2929a579f5a484ee5893330bb88cc64464aa0/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties?ref=d4a2929a579f5a484ee5893330bb88cc64464aa0","patch":"@@ -388,11 +388,11 @@ multi-threaded-access: Multiple concurrent threads attempted to access a \\\n     single broker. By default brokers are not thread safe; if you require \\\n     and/or intend a broker to be accessed by more than one thread, set the \\\n     openjpa.Multithreaded property to true to override the default behavior.\n-no-saved-fields: No state snapshot is available for \"{0}\", but this instance \\\n-    uses state-comparison for dirty detection.\n+no-saved-fields: No state snapshot is available for instance of type \"{0}\", \\\n+    but this instance uses state-comparison for dirty detection.\n cant-serialize-flushed-broker: Serialization not allowed once a broker has \\\n     been flushed.\n cant-serialize-pessimistic-broker: Serialization not allowed for brokers with \\\n     an active datastore (pessimistic) transaction.\n cant-serialize-connected-broker: Serialization not allowed for brokers with \\\n-    an active connection to the database.\n\\ No newline at end of file\n+    an active connection to the database."},{"sha":"d95680c4de419b5029e715f0173c9c406ba3c218","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbedValue.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/d4a2929a579f5a484ee5893330bb88cc64464aa0/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbedValue.java","raw_url":"https://github.com/apache/openjpa/raw/d4a2929a579f5a484ee5893330bb88cc64464aa0/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbedValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbedValue.java?ref=d4a2929a579f5a484ee5893330bb88cc64464aa0","patch":"@@ -40,6 +40,9 @@\n     @JoinColumn(name = \"EMB_REL\")\r\n     protected EmbedOwner owner;\r\n \r\n+    @Transient\r\n+    private int transientField;\r\n+\r\n     public void setBasic(String basic) {\r\n         this.basic = basic;\r\n     }\r"},{"sha":"8e664029d1df8586cea8f228dc6e567d0d50ef02","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestEJBEmbedded.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/d4a2929a579f5a484ee5893330bb88cc64464aa0/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestEJBEmbedded.java","raw_url":"https://github.com/apache/openjpa/raw/d4a2929a579f5a484ee5893330bb88cc64464aa0/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestEJBEmbedded.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestEJBEmbedded.java?ref=d4a2929a579f5a484ee5893330bb88cc64464aa0","patch":"@@ -29,6 +29,9 @@\n import org.apache.openjpa.jdbc.meta.strats.StringFieldStrategy;\r\n import org.apache.openjpa.jdbc.sql.DBDictionary;\r\n import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n+import org.apache.openjpa.persistence.JPAFacadeHelper;\r\n+import org.apache.openjpa.meta.ClassMetaData;\r\n+import org.apache.openjpa.meta.FieldMetaData;\r\n \r\n /**\r\n  * Test for embedded\r\n@@ -78,6 +81,15 @@ public void testEmbedded() {\n         em.close();\r\n     }\r\n \r\n+    public void testEmbeddedMetaData() {\r\n+        ClassMetaData ownerMeta =\r\n+            JPAFacadeHelper.getMetaData(emf, EmbedOwner.class);\r\n+        FieldMetaData fmd = ownerMeta.getField(\"embed\");\r\n+        ClassMetaData embeddedMeta = fmd.getDefiningMetaData();\r\n+        assertNotNull(embeddedMeta);\r\n+        assertNull(embeddedMeta.getField(\"transientField\"));\r\n+    }\r\n+\r\n     public void testNull() {\r\n         EntityManager em = emf.createEntityManager();\r\n         em.getTransaction().begin();\r"},{"sha":"b41b7f926f7a42533f894b52234f56123751ac87","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/ManagedIface.java","status":"added","additions":47,"deletions":0,"changes":47,"blob_url":"https://github.com/apache/openjpa/blob/d4a2929a579f5a484ee5893330bb88cc64464aa0/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/ManagedIface.java","raw_url":"https://github.com/apache/openjpa/raw/d4a2929a579f5a484ee5893330bb88cc64464aa0/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/ManagedIface.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/ManagedIface.java?ref=d4a2929a579f5a484ee5893330bb88cc64464aa0","patch":"@@ -0,0 +1,47 @@\n+package org.apache.openjpa.persistence.managedinterface;\r\n+\r\n+\r\n+import java.util.*;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Embedded;\r\n+import javax.persistence.OneToOne;\r\n+import javax.persistence.OneToMany;\r\n+import javax.persistence.CascadeType;\r\n+\r\n+import org.apache.openjpa.persistence.PersistentCollection;\r\n+import org.apache.openjpa.persistence.ManagedInterface;\r\n+import org.apache.openjpa.persistence.query.SimpleEntity;\r\n+\r\n+@ManagedInterface\r\n+@Entity\r\n+public interface ManagedIface extends ManagedInterfaceSup {\r\n+    public int getIntField();\r\n+    public void setIntField(int i);\r\n+\r\n+    @Embedded\r\n+    public ManagedInterfaceEmbed getEmbed();\r\n+    public void setEmbed(ManagedInterfaceEmbed embed);\r\n+\r\n+    @OneToOne(cascade=CascadeType.PERSIST)\r\n+    public ManagedIface getSelf();\r\n+    public void setSelf(ManagedIface iface);\r\n+\r\n+    @PersistentCollection\r\n+    public Set<Integer> getSetInteger();\r\n+    public void setSetInteger(Set<Integer> collection);\r\n+\r\n+    @OneToMany(cascade=CascadeType.PERSIST)\r\n+    public Set<SimpleEntity> getSetPC();\r\n+    public void setSetPC(Set<SimpleEntity> collection);\r\n+\r\n+    @OneToMany(cascade=CascadeType.PERSIST)\r\n+    public Set<ManagedIface> getSetI();\r\n+    public void setSetI(Set<ManagedIface> collection);\r\n+\r\n+    @OneToOne(cascade=CascadeType.PERSIST)\r\n+    public SimpleEntity getPC();\r\n+    public void setPC(SimpleEntity pc);\r\n+\r\n+    public void unimplemented();\r\n+}\r"},{"sha":"a35bcecb0f65a5708a005f220ef3aaa78a86d22c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/ManagedInterfaceEmbed.java","status":"added","additions":13,"deletions":0,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/d4a2929a579f5a484ee5893330bb88cc64464aa0/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/ManagedInterfaceEmbed.java","raw_url":"https://github.com/apache/openjpa/raw/d4a2929a579f5a484ee5893330bb88cc64464aa0/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/ManagedInterfaceEmbed.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/ManagedInterfaceEmbed.java?ref=d4a2929a579f5a484ee5893330bb88cc64464aa0","patch":"@@ -0,0 +1,13 @@\n+package org.apache.openjpa.persistence.managedinterface;\r\n+\r\n+import javax.persistence.Embeddable;\r\n+import javax.persistence.Basic;\r\n+\r\n+import org.apache.openjpa.persistence.ManagedInterface;\r\n+\r\n+@ManagedInterface\r\n+@Embeddable\r\n+public interface ManagedInterfaceEmbed {\r\n+    public int getEmbedIntField();\r\n+    public void setEmbedIntField(int i);\r\n+}\r"},{"sha":"8b4b27031064dccde17d568646494ed499dae0cd","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/ManagedInterfaceOwner.java","status":"added","additions":46,"deletions":0,"changes":46,"blob_url":"https://github.com/apache/openjpa/blob/d4a2929a579f5a484ee5893330bb88cc64464aa0/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/ManagedInterfaceOwner.java","raw_url":"https://github.com/apache/openjpa/raw/d4a2929a579f5a484ee5893330bb88cc64464aa0/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/ManagedInterfaceOwner.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/ManagedInterfaceOwner.java?ref=d4a2929a579f5a484ee5893330bb88cc64464aa0","patch":"@@ -0,0 +1,46 @@\n+package org.apache.openjpa.persistence.managedinterface;\r\n+\r\n+import javax.persistence.OneToOne;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.Embedded;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.CascadeType;\r\n+\r\n+@Entity\r\n+public class ManagedInterfaceOwner {\r\n+\r\n+    @Id\r\n+    private int id;\r\n+\r\n+    private int intField;\r\n+\r\n+    @OneToOne(cascade=CascadeType.PERSIST)\r\n+    private ManagedInterfaceSup iface;\r\n+\r\n+    @Embedded\r\n+    private ManagedInterfaceEmbed embed;\r\n+\r\n+    public int getIntField() {\r\n+        return intField;\r\n+    }\r\n+\r\n+    public void setIntField(int i) {\r\n+        intField = i;\r\n+    }\r\n+\r\n+    public ManagedInterfaceSup getIFace() {\r\n+        return iface;\r\n+    }\r\n+\r\n+    public void setIFace(ManagedInterfaceSup iface) {\r\n+        this.iface = iface;\r\n+    }\r\n+\r\n+    public ManagedInterfaceEmbed getEmbed() {\r\n+        return embed;\r\n+    }\r\n+\r\n+    public void setEmbed(ManagedInterfaceEmbed embed) {\r\n+        this.embed = embed;\r\n+    }\r\n+}\r"},{"sha":"873746475f8b2f7c6f3182bbbd6d79c893c67044","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/ManagedInterfaceSup.java","status":"added","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/d4a2929a579f5a484ee5893330bb88cc64464aa0/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/ManagedInterfaceSup.java","raw_url":"https://github.com/apache/openjpa/raw/d4a2929a579f5a484ee5893330bb88cc64464aa0/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/ManagedInterfaceSup.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/ManagedInterfaceSup.java?ref=d4a2929a579f5a484ee5893330bb88cc64464aa0","patch":"@@ -0,0 +1,18 @@\n+package org.apache.openjpa.persistence.managedinterface;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.GeneratedValue;\r\n+\r\n+import org.apache.openjpa.persistence.ManagedInterface;\r\n+\r\n+@ManagedInterface\r\n+@Entity\r\n+public interface ManagedInterfaceSup {\r\n+    @Id @GeneratedValue\r\n+    public int getId();\r\n+    public void setId(int id);\r\n+\r\n+    public int getIntFieldSup();\r\n+    public void setIntFieldSup(int i);\r\n+}\r"},{"sha":"8befa73c62ad425640dbee9145d89ac0c8db233a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/MixedInterface.java","status":"added","additions":20,"deletions":0,"changes":20,"blob_url":"https://github.com/apache/openjpa/blob/d4a2929a579f5a484ee5893330bb88cc64464aa0/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/MixedInterface.java","raw_url":"https://github.com/apache/openjpa/raw/d4a2929a579f5a484ee5893330bb88cc64464aa0/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/MixedInterface.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/MixedInterface.java?ref=d4a2929a579f5a484ee5893330bb88cc64464aa0","patch":"@@ -0,0 +1,20 @@\n+package org.apache.openjpa.persistence.managedinterface;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.Id;\r\n+\r\n+import org.apache.openjpa.persistence.ManagedInterface;\r\n+\r\n+@ManagedInterface\r\n+@Entity\r\n+public interface MixedInterface {\r\n+\r\n+    @Id\r\n+    @GeneratedValue\r\n+    public int getId();\r\n+    public void setId(int id);\r\n+\r\n+    public int getIntField();\r\n+    public void setIntField(int i);\r\n+}\r"},{"sha":"1380f21ac1801e388ff6f216b919230a27cf8168","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/MixedInterfaceImpl.java","status":"added","additions":30,"deletions":0,"changes":30,"blob_url":"https://github.com/apache/openjpa/blob/d4a2929a579f5a484ee5893330bb88cc64464aa0/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/MixedInterfaceImpl.java","raw_url":"https://github.com/apache/openjpa/raw/d4a2929a579f5a484ee5893330bb88cc64464aa0/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/MixedInterfaceImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/MixedInterfaceImpl.java?ref=d4a2929a579f5a484ee5893330bb88cc64464aa0","patch":"@@ -0,0 +1,30 @@\n+package org.apache.openjpa.persistence.managedinterface;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.GeneratedValue;\r\n+\r\n+@Entity\r\n+public class MixedInterfaceImpl implements MixedInterface {\r\n+    @Id\r\n+    @GeneratedValue\r\n+    private int id;\r\n+\r\n+    private int intField;\r\n+\r\n+    public int getId() {\r\n+        return id;\r\n+    }\r\n+\r\n+    public void setId(int id) {\r\n+        this.id = id;\r\n+    }\r\n+\r\n+    public int getIntField() {\r\n+        return intField;\r\n+    }\r\n+\r\n+    public void setIntField(int i) {\r\n+        intField = i;\r\n+    }\r\n+}\r"},{"sha":"bfc1eef738a1cbad4669ae6b161c2123cea3e409","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/NonMappedInterface.java","status":"added","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/d4a2929a579f5a484ee5893330bb88cc64464aa0/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/NonMappedInterface.java","raw_url":"https://github.com/apache/openjpa/raw/d4a2929a579f5a484ee5893330bb88cc64464aa0/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/NonMappedInterface.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/NonMappedInterface.java?ref=d4a2929a579f5a484ee5893330bb88cc64464aa0","patch":"@@ -0,0 +1,8 @@\n+package org.apache.openjpa.persistence.managedinterface;\r\n+\r\n+\r\n+public interface NonMappedInterface {\r\n+    public int getIntField();\r\n+\r\n+    public void setIntField(int i);\r\n+}\r"},{"sha":"e8bd3e33ff49241061219b4d9604ff1fb1523ca2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/NonMappedInterfaceImpl.java","status":"added","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/apache/openjpa/blob/d4a2929a579f5a484ee5893330bb88cc64464aa0/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/NonMappedInterfaceImpl.java","raw_url":"https://github.com/apache/openjpa/raw/d4a2929a579f5a484ee5893330bb88cc64464aa0/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/NonMappedInterfaceImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/NonMappedInterfaceImpl.java?ref=d4a2929a579f5a484ee5893330bb88cc64464aa0","patch":"@@ -0,0 +1,17 @@\n+package org.apache.openjpa.persistence.managedinterface;\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+public class NonMappedInterfaceImpl\r\n+    implements NonMappedInterface {\r\n+    private int mismatch;\r\n+\r\n+    public int getIntField() {\r\n+        return mismatch;\r\n+    }\r\n+\r\n+    public void setIntField(int i) {\r\n+        mismatch = i;\r\n+    }\r\n+}\r"},{"sha":"2a4af537f7584ef879900143d1e00036bcfe2d96","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/SimpleManagedInterface.java","status":"added","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/apache/openjpa/blob/d4a2929a579f5a484ee5893330bb88cc64464aa0/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/SimpleManagedInterface.java","raw_url":"https://github.com/apache/openjpa/raw/d4a2929a579f5a484ee5893330bb88cc64464aa0/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/SimpleManagedInterface.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/SimpleManagedInterface.java?ref=d4a2929a579f5a484ee5893330bb88cc64464aa0","patch":"@@ -0,0 +1,36 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.managedinterface;\r\n+\r\n+import javax.persistence.Id;\r\n+import javax.persistence.Entity;\r\n+\r\n+import org.apache.openjpa.persistence.ManagedInterface;\r\n+\r\n+@ManagedInterface\r\n+@Entity\r\n+public interface SimpleManagedInterface {\r\n+\r\n+    @Id\r\n+    public int getId();\r\n+    public void setId(int id);\r\n+\r\n+    public String getString();\r\n+    public void setString(String s);\r\n+}\r"},{"sha":"6a37616c68467a83480e8953e00c9d3829e4e254","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/TestManagedInterfaces.java","status":"added","additions":449,"deletions":0,"changes":449,"blob_url":"https://github.com/apache/openjpa/blob/d4a2929a579f5a484ee5893330bb88cc64464aa0/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/TestManagedInterfaces.java","raw_url":"https://github.com/apache/openjpa/raw/d4a2929a579f5a484ee5893330bb88cc64464aa0/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/TestManagedInterfaces.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/TestManagedInterfaces.java?ref=d4a2929a579f5a484ee5893330bb88cc64464aa0","patch":"@@ -0,0 +1,449 @@\n+package org.apache.openjpa.persistence.managedinterface;\r\n+\r\n+import java.util.Set;\r\n+import java.util.HashSet;\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+import java.util.Iterator;\r\n+import javax.persistence.Query;\r\n+import javax.persistence.EntityNotFoundException;\r\n+\r\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+import org.apache.openjpa.persistence.JPAFacadeHelper;\r\n+import org.apache.openjpa.persistence.Extent;\r\n+import org.apache.openjpa.persistence.query.SimpleEntity;\r\n+import org.apache.openjpa.meta.ClassMetaData;\r\n+import org.apache.openjpa.persistence.PersistenceException;\r\n+\r\n+public class TestManagedInterfaces extends SingleEMFTestCase {\r\n+\r\n+    @Override\r\n+    public void setUp() {\r\n+        super.setUp(SimpleEntity.class, ManagedInterfaceEmbed.class,\r\n+            ManagedInterfaceSup.class, ManagedIface.class,\r\n+            ManagedInterfaceOwner.class, MixedInterface.class,\r\n+            MixedInterfaceImpl.class, NonMappedInterfaceImpl.class,\r\n+            CLEAR_TABLES);\r\n+    }\r\n+\r\n+    public void testEmbeddedMetaData() {\r\n+        emf.createEntityManager().close();\r\n+        ClassMetaData ownerMeta = JPAFacadeHelper.getMetaData(emf,\r\n+            ManagedIface.class);\r\n+        ClassMetaData embeddedMeta = ownerMeta.getField(\"embed\")\r\n+            .getDefiningMetaData();\r\n+        assertTrue(embeddedMeta.isManagedInterface());\r\n+        assertTrue(embeddedMeta.isIntercepting());\r\n+\r\n+        ClassMetaData embeddableMeta = JPAFacadeHelper.getMetaData(emf,\r\n+            ManagedInterfaceEmbed.class);\r\n+        assertTrue(embeddableMeta.isManagedInterface());\r\n+        assertTrue(embeddableMeta.isIntercepting());\r\n+    }\r\n+\r\n+    public void testManagedInterface() throws Exception {\r\n+        OpenJPAEntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        ManagedIface pc = em.createInstance(ManagedIface.class);\r\n+        pc.setIntFieldSup(3);\r\n+        pc.setIntField(4);\r\n+        pc.setEmbed(em.createInstance(ManagedInterfaceEmbed.class));\r\n+\r\n+        pc.getEmbed().setEmbedIntField(5);\r\n+        assertEquals(5, pc.getEmbed().getEmbedIntField());\r\n+        em.persist(pc);\r\n+        Object oid = em.getObjectId(pc);\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+\r\n+        em = emf.createEntityManager();\r\n+        pc = em.find(ManagedIface.class, oid);\r\n+        assertEquals(3, pc.getIntFieldSup());\r\n+        assertEquals(4, pc.getIntField());\r\n+        assertEquals(5, pc.getEmbed().getEmbedIntField());\r\n+        em.getTransaction().begin();\r\n+        pc.setIntField(14);\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+\r\n+        em = emf.createEntityManager ();\r\n+        em.getTransaction().begin();\r\n+        Query query = em.createQuery(\"select o from ManagedIface o \" +\r\n+            \"where o.intField = 14\");\r\n+        pc = (ManagedIface) query.getSingleResult();\r\n+        assertEquals(14, pc.getIntField());\r\n+        em.remove(pc);\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+\r\n+        em = emf.createEntityManager();\r\n+        try {\r\n+            assertNull(em.find(ManagedIface.class, oid));\r\n+        } catch (EntityNotFoundException onfe) {}\r\n+\r\n+        em.close();\r\n+    }\r\n+\r\n+    public void testInterfaceOwner() {\r\n+        OpenJPAEntityManager em = emf.createEntityManager();\r\n+        ManagedInterfaceOwner pc = new ManagedInterfaceOwner();\r\n+        pc.setIFace(em.createInstance(ManagedInterfaceSup.class));\r\n+        pc.setEmbed(em.createInstance(ManagedInterfaceEmbed.class));\r\n+        pc.getIFace().setIntFieldSup(3);\r\n+        pc.getEmbed().setEmbedIntField(5);\r\n+\r\n+        em.getTransaction().begin();\r\n+        em.persist(pc);\r\n+        Object oid = em.getObjectId(pc);\r\n+        em.getTransaction().commit();\r\n+        pc = em.find(ManagedInterfaceOwner.class, oid);\r\n+        assertEquals(3, pc.getIFace().getIntFieldSup());\r\n+        assertEquals(5, pc.getEmbed().getEmbedIntField());\r\n+        em.close();\r\n+\r\n+        em = emf.createEntityManager();\r\n+        pc = em.find(ManagedInterfaceOwner.class, oid);\r\n+        assertEquals(3, pc.getIFace().getIntFieldSup());\r\n+        assertEquals(5, pc.getEmbed().getEmbedIntField());\r\n+        em.close();\r\n+\r\n+        em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        Query q = em.createQuery(\"select o from ManagedInterfaceOwner o \" +\r\n+            \"where o.iface.intFieldSup = 3 and o.embed.embedIntField = 5\");\r\n+        pc = (ManagedInterfaceOwner) q.getSingleResult();\r\n+        assertEquals(3, pc.getIFace().getIntFieldSup());\r\n+        assertEquals(5, pc.getEmbed().getEmbedIntField());\r\n+\r\n+        pc.getIFace().setIntFieldSup(13);\r\n+        pc.getEmbed().setEmbedIntField(15);\r\n+        assertEquals(13, pc.getIFace().getIntFieldSup());\r\n+        assertEquals(15, pc.getEmbed().getEmbedIntField());\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+\r\n+        em = emf.createEntityManager();\r\n+        pc = em.find(ManagedInterfaceOwner.class, oid);\r\n+        assertEquals(13, pc.getIFace().getIntFieldSup());\r\n+        assertEquals(15, pc.getEmbed().getEmbedIntField());\r\n+        em.close();\r\n+    }\r\n+\r\n+    public void testCollection() {\r\n+        OpenJPAEntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        ManagedIface pc = em.createInstance(ManagedIface.class);\r\n+        Set set = new HashSet();\r\n+        set.add(new Integer(3));\r\n+        set.add(new Integer(4));\r\n+        set.add(new Integer(5));\r\n+        pc.setSetInteger(set);\r\n+        em.persist(pc);\r\n+        Object oid = em.getObjectId(pc);\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+\r\n+        em = emf.createEntityManager();\r\n+        pc = em.find(ManagedIface.class, oid);\r\n+        set = pc.getSetInteger();\r\n+        assertEquals(3, set.size());\r\n+        assertTrue(set.contains(new Integer(3)));\r\n+        assertTrue(set.contains(new Integer(4)));\r\n+        assertTrue(set.contains(new Integer(5)));\r\n+        em.getTransaction().begin();\r\n+        set.remove(new Integer(4));\r\n+        set.add(new Integer(14));\r\n+        set.add(new Integer(15));\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+\r\n+        em = emf.createEntityManager();\r\n+        pc = em.find(ManagedIface.class, oid);\r\n+        set = pc.getSetInteger();\r\n+        assertEquals(4, set.size());\r\n+        assertTrue(set.contains(new Integer(3)));\r\n+        assertTrue(set.contains(new Integer(5)));\r\n+        assertTrue(set.contains(new Integer(14)));\r\n+        assertTrue(set.contains(new Integer(15)));\r\n+        em.getTransaction().begin();\r\n+        pc.setSetInteger(null);\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+\r\n+        em = emf.createEntityManager();\r\n+        pc = em.find(ManagedIface.class, oid);\r\n+        set = pc.getSetInteger();\r\n+        assertTrue (set == null || set.size() == 0);\r\n+        em.close();\r\n+    }\r\n+\r\n+    public void testCollectionPC() {\r\n+        OpenJPAEntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        ManagedIface pc = em.createInstance(ManagedIface.class);\r\n+        Set set = new HashSet();\r\n+        set.add(new SimpleEntity(\"a\", \"3\"));\r\n+        set.add(new SimpleEntity(\"b\", \"4\"));\r\n+        set.add(new SimpleEntity(\"c\", \"5\"));\r\n+        pc.setSetPC(set);\r\n+        em.persist(pc);\r\n+        Object oid = em.getObjectId(pc);\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+\r\n+        em = emf.createEntityManager();\r\n+        pc = em.find(ManagedIface.class, oid);\r\n+        set = pc.getSetPC();\r\n+        assertEquals(3, set.size());\r\n+        Collection seen = new ArrayList();\r\n+        SimpleEntity rel;\r\n+        SimpleEntity toRem = null;\r\n+        for (Iterator it = set.iterator(); it.hasNext();) {\r\n+            rel = (SimpleEntity) it.next();\r\n+            seen.add(rel.getName());\r\n+            if (rel.getValue().equals(\"4\"))\r\n+                toRem = rel;\r\n+        }\r\n+        assertEquals(3, seen.size());\r\n+        assertTrue(seen.contains(\"a\"));\r\n+        assertTrue(seen.contains(\"b\"));\r\n+        assertTrue(seen.contains(\"c\"));\r\n+        em.getTransaction().begin();\r\n+        assertNotNull(toRem);\r\n+        set.remove(toRem);\r\n+        set.add(new SimpleEntity(\"x\", \"14\"));\r\n+        set.add(new SimpleEntity(\"y\", \"15\"));\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+\r\n+        em = emf.createEntityManager();\r\n+        pc = em.find(ManagedIface.class, oid);\r\n+        set = pc.getSetPC();\r\n+        assertEquals(4, set.size());\r\n+        seen.clear();\r\n+        for (Iterator it = set.iterator(); it.hasNext();) {\r\n+            rel = (SimpleEntity) it.next();\r\n+            seen.add(rel.getName());\r\n+        }\r\n+        assertEquals(4, seen.size());\r\n+        assertTrue(seen.contains(\"a\"));\r\n+        assertTrue(seen.contains(\"c\"));\r\n+        assertTrue(seen.contains(\"x\"));\r\n+        assertTrue(seen.contains(\"y\"));\r\n+        em.getTransaction().begin();\r\n+        pc.setSetPC(null);\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+\r\n+        em = emf.createEntityManager();\r\n+        pc = em.find(ManagedIface.class, oid);\r\n+        set = pc.getSetPC();\r\n+        assertTrue (set == null || set.size() == 0);\r\n+        em.close();\r\n+    }\r\n+\r\n+    public void testCollectionInterfaces() {\r\n+        OpenJPAEntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        ManagedIface pc = em.createInstance(ManagedIface.class);\r\n+        Set set = new HashSet();\r\n+        set.add(createInstance(em, 3));\r\n+        set.add(createInstance(em, 4));\r\n+        set.add(createInstance(em, 5));\r\n+        pc.setSetI(set);\r\n+        em.persist(pc);\r\n+        Object oid = em.getObjectId(pc);\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+\r\n+        em = emf.createEntityManager();\r\n+        pc = em.find(ManagedIface.class, oid);\r\n+        set = pc.getSetI();\r\n+        assertEquals(3, set.size());\r\n+        Collection seen = new ArrayList();\r\n+        ManagedIface rel = null;\r\n+        ManagedIface toRem = null;\r\n+        for (Iterator it = set.iterator(); it.hasNext();) {\r\n+            rel = (ManagedIface) it.next();\r\n+            seen.add(new Integer(rel.getIntField()));\r\n+            if (rel.getIntField() == 4)\r\n+                toRem = rel;\r\n+        }\r\n+        assertEquals(3, seen.size());\r\n+        assertTrue(seen.contains(new Integer(3)));\r\n+        assertTrue(seen.contains(new Integer(4)));\r\n+        assertTrue(seen.contains(new Integer(5)));\r\n+        em.getTransaction().begin();\r\n+        assertNotNull(toRem);\r\n+        set.remove(toRem);\r\n+        set.add(createInstance(em, 14));\r\n+        set.add(createInstance(em, 15));\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+\r\n+        em = emf.createEntityManager();\r\n+        pc = em.find(ManagedIface.class, oid);\r\n+        set = pc.getSetI();\r\n+        assertEquals(4, set.size());\r\n+        seen.clear();\r\n+        for (Iterator it = set.iterator(); it.hasNext();) {\r\n+            rel = (ManagedIface) it.next();\r\n+            seen.add(new Integer(rel.getIntField()));\r\n+        }\r\n+        assertEquals(4, seen.size());\r\n+        assertTrue(seen.contains(new Integer(3)));\r\n+        assertTrue(seen.contains(new Integer(5)));\r\n+        assertTrue(seen.contains(new Integer(14)));\r\n+        assertTrue(seen.contains(new Integer(15)));\r\n+        em.getTransaction().begin();\r\n+        pc.setSetPC(null);\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+\r\n+        em = emf.createEntityManager();\r\n+        pc = em.find(ManagedIface.class, oid);\r\n+        set = pc.getSetPC();\r\n+        assertTrue (set == null || set.size() == 0);\r\n+        em.close();\r\n+    }\r\n+\r\n+    public void testMixedQuery() {\r\n+        createMixed();\r\n+\r\n+        OpenJPAEntityManager em = emf.createEntityManager();\r\n+        try {\r\n+            Query q = em.createQuery(\"select o from MixedInterface o \" +\r\n+                \"where o.intField = 4\");\r\n+            Collection c = q.getResultList();\r\n+            Set seen = new HashSet();\r\n+            assertEquals(2, c.size());\r\n+            MixedInterface pc;\r\n+            for (Iterator it = c.iterator(); it.hasNext();) {\r\n+                pc = (MixedInterface) it.next();\r\n+                assertEquals(4, pc.getIntField());\r\n+                seen.add(pc.getClass());\r\n+            }\r\n+            assertEquals(2, seen.size());\r\n+\r\n+            fail(\"OPENJPA-481\");\r\n+        } catch (PersistenceException e) {\r\n+            // expected\r\n+        } finally {\r\n+            em.close();\r\n+        }\r\n+    }\r\n+\r\n+    public void testQueryForMixedInterfaceImpls() {\r\n+        createMixed();\r\n+\r\n+        OpenJPAEntityManager em = emf.createEntityManager();\r\n+        Query q = em.createQuery(\"select o from MixedInterfaceImpl o \" +\r\n+            \"where o.intField = 4\");\r\n+        MixedInterface pc = (MixedInterface) q.getSingleResult();\r\n+        assertEquals(4, pc.getIntField());\r\n+        assertTrue(pc instanceof MixedInterfaceImpl);\r\n+        em.close();\r\n+    }\r\n+\r\n+    public void testMixedExtent() {\r\n+        createMixed();\r\n+\r\n+        OpenJPAEntityManager em = emf.createEntityManager();\r\n+        Extent e = em.createExtent(MixedInterface.class, true);\r\n+        Set seen = new HashSet();\r\n+        int size = 0;\r\n+        for (Iterator it = e.iterator(); it.hasNext();) {\r\n+            seen.add(it.next().getClass());\r\n+            size++;\r\n+        }\r\n+        assertEquals(3, size);\r\n+        assertEquals(2, seen.size());\r\n+\r\n+        e = em.createExtent(MixedInterface.class, false);\r\n+        seen = new HashSet();\r\n+        size = 0;\r\n+        for (Iterator it = e.iterator(); it.hasNext();) {\r\n+            seen.add(it.next().getClass());\r\n+            size++;\r\n+        }\r\n+        assertEquals(1, size);\r\n+        assertNotEquals(MixedInterfaceImpl.class, seen.iterator().next());\r\n+        em.close();\r\n+    }\r\n+\r\n+    private void createMixed() {\r\n+        OpenJPAEntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        MixedInterface pc = em.createInstance(MixedInterface.class);\r\n+        pc.setIntField(4);\r\n+        em.persist(pc);\r\n+        pc = new MixedInterfaceImpl();\r\n+        pc.setIntField(4);\r\n+        em.persist(pc);\r\n+        pc = new MixedInterfaceImpl();\r\n+        pc.setIntField(8);\r\n+        em.persist(pc);\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+    }\r\n+\r\n+    public void testUnimplementedThrowsException() {\r\n+        OpenJPAEntityManager em = emf.createEntityManager();\r\n+        ManagedIface pc = createInstance(em, 1);\r\n+        try {\r\n+            pc.unimplemented();\r\n+            fail(\"Exception expected.\");\r\n+        } catch (UnsupportedOperationException uoe) {} // good\r\n+        em.close();\r\n+    }\r\n+\r\n+    public void testNonMappedCreateInstanceException() {\r\n+        // OpenJPA's support of non-mapped interfaces differs from JDO support;\r\n+        // there is no special query or relation support for non-mapped\r\n+        // interfaces in OpenJPA at this time.\r\n+        OpenJPAEntityManager em = null;\r\n+        try {\r\n+            em = emf.createEntityManager();\r\n+            em.createInstance(NonMappedInterface.class);\r\n+            fail(\"IllegalArgumentException expected\");\r\n+        } catch (IllegalArgumentException e) {} // good\r\n+        if (em != null)\r\n+            em.close();\r\n+    }\r\n+\r\n+    public void testDetach() {\r\n+        OpenJPAEntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        ManagedIface pc = createInstance(em, 4);\r\n+        em.persist(pc);\r\n+        Object oid = em.getObjectId(pc);\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+\r\n+        em = emf.createEntityManager();\r\n+        ManagedIface pcx = em.find(ManagedIface.class, oid);\r\n+        pc = em.detach(pcx);\r\n+        em.close();\r\n+\r\n+        assertTrue(em.isDetached(pc));\r\n+        pc.setIntField(7);\r\n+\r\n+        em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        em.merge(pc);\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+\r\n+        em = emf.createEntityManager();\r\n+        pc = em.find(ManagedIface.class, oid);\r\n+        assertEquals(7, pc.getIntField());\r\n+        em.close();\r\n+    }\r\n+\r\n+    private ManagedIface createInstance(OpenJPAEntityManager em, int i) {\r\n+        ManagedIface pc = em.createInstance(ManagedIface.class);\r\n+        pc.setIntField(i);\r\n+        return pc;\r\n+    }\r\n+}\r"},{"sha":"da567bb1f5d15e148278d87ccf3357e2e458754e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/TestSimpleManagedInterface.java","status":"added","additions":92,"deletions":0,"changes":92,"blob_url":"https://github.com/apache/openjpa/blob/d4a2929a579f5a484ee5893330bb88cc64464aa0/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/TestSimpleManagedInterface.java","raw_url":"https://github.com/apache/openjpa/raw/d4a2929a579f5a484ee5893330bb88cc64464aa0/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/TestSimpleManagedInterface.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/TestSimpleManagedInterface.java?ref=d4a2929a579f5a484ee5893330bb88cc64464aa0","patch":"@@ -0,0 +1,92 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.managedinterface;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+\r\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n+import org.apache.openjpa.persistence.JPAFacadeHelper;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+import org.apache.openjpa.persistence.query.SimpleEntity;\r\n+import org.apache.openjpa.kernel.AbstractBrokerFactory;\r\n+import org.apache.openjpa.meta.ClassMetaData;\r\n+import org.apache.openjpa.meta.MetaDataRepository;\r\n+\r\n+public class TestSimpleManagedInterface\r\n+    extends SingleEMFTestCase {\r\n+\r\n+    public void setUp() {\r\n+        setUp(SimpleManagedInterface.class, SimpleEntity.class, CLEAR_TABLES);\r\n+    }\r\n+\r\n+    public void testMetaDataRepository() {\r\n+        AbstractBrokerFactory bf =\r\n+            (AbstractBrokerFactory) JPAFacadeHelper.toBrokerFactory(emf);\r\n+        bf.makeReadOnly();\r\n+        MetaDataRepository repos = bf.getConfiguration()\r\n+            .getMetaDataRepositoryInstance();\r\n+        ClassMetaData meta = repos.getMetaData(SimpleManagedInterface.class,\r\n+            null, false);\r\n+        assertNotNull(meta);\r\n+        assertTrue(meta.isManagedInterface());\r\n+        assertEquals(SimpleManagedInterface.class, meta.getDescribedType());\r\n+    }\r\n+\r\n+    public void testInterfaceImplGeneration() {\r\n+        ((AbstractBrokerFactory) JPAFacadeHelper.toBrokerFactory(emf))\r\n+            .makeReadOnly();\r\n+        // load metadata to trigger instance creation\r\n+        ClassMetaData meta = JPAFacadeHelper.getMetaData(emf,\r\n+            SimpleManagedInterface.class);\r\n+        assertEquals(SimpleManagedInterface.class, meta.getDescribedType());\r\n+    }\r\n+\r\n+    public void testBasicOperations() {\r\n+        OpenJPAEntityManager em = emf.createEntityManager();\r\n+        SimpleManagedInterface pc =\r\n+            em.createInstance(SimpleManagedInterface.class);\r\n+        pc.setId(17);\r\n+        pc.setString(\"hello!\");\r\n+        em.getTransaction().begin();\r\n+        em.persist(pc);\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+\r\n+        em = emf.createEntityManager();\r\n+        pc = em.find(SimpleManagedInterface.class, 17);\r\n+        assertNotNull(pc);\r\n+        em.getTransaction().begin();\r\n+        pc.setString(\"updated\");\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+\r\n+        em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        em.remove(em.getReference(SimpleManagedInterface.class, 17));\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+    }\r\n+\r\n+    public void testJPQL() {\r\n+        EntityManager em = emf.createEntityManager();\r\n+        assertEquals(0, em.createQuery(\"select o from SimpleManagedInterface o\")\r\n+            .getResultList().size());\r\n+        em.close();\r\n+    }\r\n+}\n\\ No newline at end of file"},{"sha":"b12c818c83ae4b1f1bdd7a1a42d5ee463dbbaad9","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","status":"modified","additions":16,"deletions":1,"changes":17,"blob_url":"https://github.com/apache/openjpa/blob/d4a2929a579f5a484ee5893330bb88cc64464aa0/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/d4a2929a579f5a484ee5893330bb88cc64464aa0/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java?ref=d4a2929a579f5a484ee5893330bb88cc64464aa0","patch":"@@ -172,6 +172,7 @@\n         _tags.put(KeyType.class, KEY_TYPE);\n         _tags.put(LoadFetchGroup.class, LOAD_FETCH_GROUP);\n         _tags.put(LRS.class, LRS);\n+        _tags.put(ManagedInterface.class, MANAGED_INTERFACE);\n         _tags.put(ReadOnly.class, READ_ONLY);\n         _tags.put(Type.class, TYPE);\n     }\n@@ -572,6 +573,10 @@ private ClassMetaData parseClassAnnotations() {\n                     if (isMetaDataMode())\n                         fgs = ((FetchGroups) anno).value();\n                     break;\n+                case MANAGED_INTERFACE:\n+                    if (isMetaDataMode())\n+                        parseManagedInterface(meta, (ManagedInterface) anno);\n+                    break;\n                 default:\n                     throw new UnsupportedException(_loc.get(\"unsupported\", _cls,\n                         anno.toString()));\n@@ -595,7 +600,8 @@ private ClassMetaData parseClassAnnotations() {\n             // scan possibly non-PC hierarchy for callbacks.\n             // redundant for PC superclass but we don't know that yet\n             // so let LifecycleMetaData determine that\n-            if (!Object.class.equals(_cls.getSuperclass())) {\n+            if (_cls.getSuperclass() != null &&\n+                !Object.class.equals(_cls.getSuperclass())) {\n                 recordCallbacks(meta, parseCallbackMethods(_cls.getSuperclass(),\n                     null, true, false, getRepository()), null, true);\n             }\n@@ -750,6 +756,11 @@ else if (cache.enabled())\n             meta.setDataCacheName(null);\n     }\n \n+    private void parseManagedInterface(ClassMetaData meta,\n+        ManagedInterface iface) {\n+        meta.setManagedInterface(true);\n+    }\n+\n     /**\n      * Parse @DetachedState. The annotation may be null.\n      */\n@@ -798,6 +809,10 @@ else if (StringUtils.isEmpty(detached.fieldName()))\n     public static Collection<LifecycleCallbacks>[] parseCallbackMethods\n         (Class cls, Collection<LifecycleCallbacks>[] callbacks, boolean sups,\n         boolean listener, MetaDataRepository repos) {\n+\n+        if (cls == null)\n+            throw new IllegalArgumentException(\"cls cannot be null\");\n+\n         // first sort / filter based on inheritance\n         Set<Method> methods = new TreeSet<Method>(MethodComparator.\n             getInstance());"},{"sha":"999b8c095e60305f7d5762fba506b8f3e6f41652","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ManagedInterface.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/apache/openjpa/blob/d4a2929a579f5a484ee5893330bb88cc64464aa0/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ManagedInterface.java","raw_url":"https://github.com/apache/openjpa/raw/d4a2929a579f5a484ee5893330bb88cc64464aa0/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ManagedInterface.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ManagedInterface.java?ref=d4a2929a579f5a484ee5893330bb88cc64464aa0","patch":"@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence;\n+\n+import static java.lang.annotation.ElementType.TYPE;\n+import java.lang.annotation.Retention;\n+import static java.lang.annotation.RetentionPolicy.RUNTIME;\n+import java.lang.annotation.Target;\n+\n+/**\n+ * The annotated interface should be treated as a managed interface by OpenJPA.\n+ * New instances of this type can be created by invoking\n+ * {@link OpenJPAEntityManager#createInstance(Class)}.\n+ * Interfaces with this annotation should also be annotated with one of the JPA\n+ * entity annotations ({@link javax.persistence.Entity @Entity},\n+ * {@link javax.persistence.MappedSuperclass @MappedSuperclass},\n+ * or {@link javax.persistence.Embeddable @Embeddable}).\n+ *\n+ * @since 1.1.0\n+ * @published\n+ */\n+@Target({ TYPE })\n+@Retention(RUNTIME)\n+public @interface ManagedInterface {\n+}"},{"sha":"f10e07d039ad5657df9e62c8b1841756383ef94e","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/MetaDataTag.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/d4a2929a579f5a484ee5893330bb88cc64464aa0/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/MetaDataTag.java","raw_url":"https://github.com/apache/openjpa/raw/d4a2929a579f5a484ee5893330bb88cc64464aa0/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/MetaDataTag.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/MetaDataTag.java?ref=d4a2929a579f5a484ee5893330bb88cc64464aa0","patch":"@@ -77,6 +77,7 @@\n     KEY_TYPE,\n     LOAD_FETCH_GROUP,\n     LRS,\n+    MANAGED_INTERFACE,\n     READ_ONLY,\n     TYPE,\n }"},{"sha":"aba1c3eadee21ac27f1f66909f818878ffa2997d","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityManager.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/d4a2929a579f5a484ee5893330bb88cc64464aa0/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityManager.java","raw_url":"https://github.com/apache/openjpa/raw/d4a2929a579f5a484ee5893330bb88cc64464aa0/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityManager.java?ref=d4a2929a579f5a484ee5893330bb88cc64464aa0","patch":"@@ -780,8 +780,11 @@\n      * create a subclass of the type that does implement\n      * {@link org.apache.openjpa.enhance.PersistenceCapable}, and will attempt\n      * to redefine the methods in <code>cls</code> to enable persistent\n-     * attribute tracking. Otherwise, this will return an instance of the\n-     * specified class.\n+     * attribute tracking. Otherwise, if <code>cls</code> is a managed type,\n+     * this will return an instance of the specified class.\n+     *\n+     * @throws IllegalArgumentException if <code>cls</code> is not a managed\n+     * type or interface.\n      */\n     public <T> T createInstance(Class<T> cls);\n "},{"sha":"124055b9608d749f67d32c6d2d3fd9bc26b78c6d","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataDefaults.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/d4a2929a579f5a484ee5893330bb88cc64464aa0/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataDefaults.java","raw_url":"https://github.com/apache/openjpa/raw/d4a2929a579f5a484ee5893330bb88cc64464aa0/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataDefaults.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataDefaults.java?ref=d4a2929a579f5a484ee5893330bb88cc64464aa0","patch":"@@ -261,7 +261,8 @@ private int getAccessType(Class cls) {\n             J2DoPriv5Helper.getDeclaredFieldsAction(cls))))\n             access |= ClassMetaData.ACCESS_FIELD;\n         if (usesAccess((Method[]) AccessController.doPrivileged(\n-            J2DoPriv5Helper.getDeclaredMethodsAction(cls))))\n+            J2DoPriv5Helper.getDeclaredMethodsAction(cls)))\n+            || cls.isInterface()) // OpenJPA managed ifaces must use prop access\n             access |= ClassMetaData.ACCESS_PROPERTY;\n         return (access == 0) ? getAccessType(cls.getSuperclass()) : access;\n     }"},{"sha":"f83dcb79f25155e6642e22d676a9db7f3a63b018","filename":"openjpa-project/src/doc/manual/ref_guide_pc.xml","status":"modified","additions":37,"deletions":0,"changes":37,"blob_url":"https://github.com/apache/openjpa/blob/d4a2929a579f5a484ee5893330bb88cc64464aa0/openjpa-project/src/doc/manual/ref_guide_pc.xml","raw_url":"https://github.com/apache/openjpa/raw/d4a2929a579f5a484ee5893330bb88cc64464aa0/openjpa-project/src/doc/manual/ref_guide_pc.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_pc.xml?ref=d4a2929a579f5a484ee5893330bb88cc64464aa0","patch":"@@ -483,6 +483,43 @@ a javaagent or in a Java 6 environment.\n             </itemizedlist>\n         </section>\n     </section>\n+    <section id=\"ref_guide_pc_interfaces\">\n+        <title>Managed Interfaces</title>\n+        <indexterm zone=\"ref_guide_pc_interfaces\">\n+            <primary>interfaces</primary>\n+            <secondary>managed</secondary>\n+        </indexterm>\n+        <para>\n+OpenJPA's managed interface feature allows you to define your object featureSelection\n+entirely in terms of interfaces, instead of concrete classes. To use this\n+feature, you must annotate your managed interfaces with the\n+<classname>ManagedInterface</classname> annotation, and use the\n+<literal>OpenJPAEntityManager.createInstance(Class)</literal> method to\n+create new records. Note that <literal>createInstance()</literal> returns\n+unmanaged instances; you must pass them to\n+<literal>EntityManager.persist()</literal> to store them in the database.\n+        </para>\n+        <programlisting>\n+@ManagedInterface\n+public interface PersonIface {\n+    @Id @GeneratedValue\n+    int getId();\n+    void setId(int id);\n+\n+    // implicitly persistent per JPA property rules\n+    String getName();\n+    void setName(String name);\n+}\n+        </programlisting>\n+        <programlisting>\n+OpenJPAEntityManager em = ...;\n+PersonIface person = em.createInstance(PersonIface.class);\n+person.setName(\"Homer Simpson\");\n+em.getTransaction().begin();\n+em.persist(person);\n+em.getTransaction().commit();\n+        </programlisting>\n+    </section>\n     <section id=\"ref_guide_pc_oid\">\n         <title>\n             Object Identity"}]}

