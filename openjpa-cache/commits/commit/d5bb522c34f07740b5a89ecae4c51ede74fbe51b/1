{"sha":"d5bb522c34f07740b5a89ecae4c51ede74fbe51b","node_id":"MDY6Q29tbWl0MjA2MzY0OmQ1YmI1MjJjMzRmMDc3NDBiNWE4OWVjYWU0YzUxZWRlNzRmYmU1MWI=","commit":{"author":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-08-21T23:53:49Z"},"committer":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-08-21T23:53:49Z"},"message":"No need for parser to populate separate QueryExpressions.aggregate member now \nthat we can visit the projection values to see if they're aggregates.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@433431 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b22939341a1c9f992440a0ce2e36836e8f7b8882","url":"https://api.github.com/repos/apache/openjpa/git/trees/b22939341a1c9f992440a0ce2e36836e8f7b8882"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/d5bb522c34f07740b5a89ecae4c51ede74fbe51b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/d5bb522c34f07740b5a89ecae4c51ede74fbe51b","html_url":"https://github.com/apache/openjpa/commit/d5bb522c34f07740b5a89ecae4c51ede74fbe51b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/d5bb522c34f07740b5a89ecae4c51ede74fbe51b/comments","author":null,"committer":null,"parents":[{"sha":"9de53954861ed7f57e92be0c1054befec56d0af2","url":"https://api.github.com/repos/apache/openjpa/commits/9de53954861ed7f57e92be0c1054befec56d0af2","html_url":"https://github.com/apache/openjpa/commit/9de53954861ed7f57e92be0c1054befec56d0af2"}],"stats":{"total":65,"additions":55,"deletions":10},"files":[{"sha":"2cfcbdafeb8d4177e8f8028f3bf169f51ba86071","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreQuery.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/d5bb522c34f07740b5a89ecae4c51ede74fbe51b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/d5bb522c34f07740b5a89ecae4c51ede74fbe51b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreQuery.java?ref=d5bb522c34f07740b5a89ecae4c51ede74fbe51b","patch":"@@ -131,7 +131,7 @@ protected ResultObjectProvider executeQuery(Executor ex,\n         ClassMetaData base, ClassMetaData[] metas, boolean subclasses,\n         ExpressionFactory[] facts, QueryExpressions[] exps, Object[] params,\n         boolean lrs, long startIdx, long endIdx) {\n-        if (metas.length > 1 && exps[0].aggregate)\n+        if (metas.length > 1 && exps[0].isAggregate())\n             throw new UserException(Localizer.forPackage(JDBCStoreQuery.class)\n                 .get(\"mult-mapping-aggregate\", Arrays.asList(metas)));\n "},{"sha":"79245b7da497527e108a9d820ef0338c08461325","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SelectConstructor.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/d5bb522c34f07740b5a89ecae4c51ede74fbe51b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SelectConstructor.java","raw_url":"https://github.com/apache/openjpa/raw/d5bb522c34f07740b5a89ecae4c51ede74fbe51b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SelectConstructor.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SelectConstructor.java?ref=d5bb522c34f07740b5a89ecae4c51ede74fbe51b","patch":"@@ -177,16 +177,16 @@ else if ((exps.distinct & exps.DISTINCT_FALSE) != 0)\n                 // get unique candidate values) and needed field values and\n                 // applies the where conditions; the outer select applies\n                 // ordering, grouping, etc\n-                if (exps.aggregate || (exps.distinct & exps.DISTINCT_TRUE) == 0)\n-                {\n+                if (exps.isAggregate() \n+                    || (exps.distinct & exps.DISTINCT_TRUE) == 0) {\n                     DBDictionary dict = store.getDBDictionary();\n                     dict.assertSupport(dict.supportsSubselect,\n                         \"SupportsSubselect\");\n \n                     Select inner = sel;\n                     sel = store.getSQLFactory().newSelect();\n                     sel.setParent(parent, alias);\n-                    sel.setDistinct(exps.aggregate\n+                    sel.setDistinct(exps.isAggregate()\n                         && (exps.distinct & exps.DISTINCT_TRUE) != 0);\n                     sel.setFromSelect(inner);\n                 }"},{"sha":"038f93dcfb5d4dde364360f03e0e569f62913b11","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ExpressionStoreQuery.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/d5bb522c34f07740b5a89ecae4c51ede74fbe51b/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ExpressionStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/d5bb522c34f07740b5a89ecae4c51ede74fbe51b/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ExpressionStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ExpressionStoreQuery.java?ref=d5bb522c34f07740b5a89ecae4c51ede74fbe51b","patch":"@@ -349,7 +349,7 @@ public final int getOperation(StoreQuery q) {\n         }\n \n         public final boolean isAggregate(StoreQuery q) {\n-            return assertQueryExpression().aggregate;\n+            return assertQueryExpression().isAggregate();\n         }\n \n         public final boolean hasGrouping(StoreQuery q) {"},{"sha":"9c43d5dda1c0e97ed96954c44078a7e741100161","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/InMemoryExpressionFactory.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/d5bb522c34f07740b5a89ecae4c51ede74fbe51b/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/InMemoryExpressionFactory.java","raw_url":"https://github.com/apache/openjpa/raw/d5bb522c34f07740b5a89ecae4c51ede74fbe51b/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/InMemoryExpressionFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/InMemoryExpressionFactory.java?ref=d5bb522c34f07740b5a89ecae4c51ede74fbe51b","patch":"@@ -221,7 +221,7 @@ public List project(QueryExpressions exps, List matches,\n             return matches;\n \n         // if an ungrouped aggregate, evaluate the whole matches list\n-        if (exps.grouping.length == 0 && exps.aggregate) {\n+        if (exps.grouping.length == 0 && exps.isAggregate()) {\n             Object[] projection = project(matches, exps, true, ctx, params);\n             return Arrays.asList(new Object[]{ projection });\n         }"},{"sha":"f9270e253341eeed960921a77e05b679e1831423","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/QueryExpressions.java","status":"modified","additions":49,"deletions":3,"changes":52,"blob_url":"https://github.com/apache/openjpa/blob/d5bb522c34f07740b5a89ecae4c51ede74fbe51b/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/QueryExpressions.java","raw_url":"https://github.com/apache/openjpa/raw/d5bb522c34f07740b5a89ecae4c51ede74fbe51b/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/QueryExpressions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/QueryExpressions.java?ref=d5bb522c34f07740b5a89ecae4c51ede74fbe51b","patch":"@@ -37,7 +37,11 @@\n     public static final int DISTINCT_FALSE = 2 << 2;\n     public static final Value[] EMPTY_VALUES = new Value[0];\n \n-    public boolean aggregate = false;\n+    /**\n+     * Map of {@link FieldMetaData},{@link Value} for update statements.\n+     */\n+    public Map updates = null;\n+\n     public int distinct = DISTINCT_AUTO;\n     public String alias = null;\n     public Value[] projections = EMPTY_VALUES;\n@@ -55,9 +59,51 @@\n     public int operation = QueryOperations.OP_SELECT;\n     public ClassMetaData[] accessPath = StoreQuery.EMPTY_METAS;\n     public String[] fetchPaths = StoreQuery.EMPTY_STRINGS;\n+    private Boolean _aggregate = null;\n+\n+    public boolean isAggregate() {\n+        if (projections.length == 0)\n+            return false; \n+        if (_aggregate == null)\n+            _aggregate = (AggregateExpressionVisitor.isAggregate(projections))\n+                ? Boolean.TRUE : Boolean.FALSE;\n+        return _aggregate.booleanValue();    \n+    }\n \n     /**\n-     * Map of {@link FieldMetaData},{@link Value} for update statements.\n+     * Visitor to determine whether our projections are aggregates.\n      */\n-    public Map updates = null;\n+    private static class AggregateExpressionVisitor\n+        extends AbstractExpressionVisitor {\n+        \n+        private Value _sub = null;\n+        private boolean _agg = false;\n+\n+        /**\n+         * Return whether the given values include projections.\n+         */\n+        public static boolean isAggregate(Value[] vals) {\n+            if (vals.length == 0)\n+                return false;\n+            AggregateExpressionVisitor v = new AggregateExpressionVisitor();\n+            for (int i = 0; i < vals.length && !v._agg; i++)\n+                vals[i].acceptVisit(v);\n+            return v._agg;\n+        }\n+\n+        public void enter(Value val) {\n+            if (_agg)\n+                return;\n+            if (_sub == null) {\n+                if (val.isAggregate())\n+                    _agg = true;\n+            } else if (val instanceof Subquery)\n+                _sub = val;\n+        }\n+\n+        public void exit(Value val) {\n+            if (val == _sub)\n+                _sub = null;\n+        }\n+    }\n }"},{"sha":"66a3b742947474cf321f2a1012bfb2dfcf7dc114","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/d5bb522c34f07740b5a89ecae4c51ede74fbe51b/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","raw_url":"https://github.com/apache/openjpa/raw/d5bb522c34f07740b5a89ecae4c51ede74fbe51b/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java?ref=d5bb522c34f07740b5a89ecae4c51ede74fbe51b","patch":"@@ -286,7 +286,6 @@ private Expression assignProjections(JPQLNode parametersNode,\n             JPQLNode parent = parametersNode.getChild(i);\n             JPQLNode node = onlyChild(parent);\n             Value proj = getValue(node);\n-            exps.aggregate = exps.aggregate || node.id == JJTAGGREGATE;\n             exps.projections[i] = proj;\n             exps.projectionAliases[i] = nextAlias();\n "}]}

