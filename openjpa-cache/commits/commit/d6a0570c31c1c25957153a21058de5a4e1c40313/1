{"sha":"d6a0570c31c1c25957153a21058de5a4e1c40313","node_id":"MDY6Q29tbWl0MjA2MzY0OmQ2YTA1NzBjMzFjMWMyNTk1NzE1M2EyMTA1OGRlNWE0ZTFjNDAzMTM=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-08-06T16:52:31Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-08-06T16:52:31Z"},"message":"[maven-release-plugin]  copy for tag 1.2.0\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/tags/1.2.0@683325 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2ebc2f5fe8207bc5eff74de257b66bde0c3a1aae","url":"https://api.github.com/repos/apache/openjpa/git/trees/2ebc2f5fe8207bc5eff74de257b66bde0c3a1aae"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/d6a0570c31c1c25957153a21058de5a4e1c40313","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/d6a0570c31c1c25957153a21058de5a4e1c40313","html_url":"https://github.com/apache/openjpa/commit/d6a0570c31c1c25957153a21058de5a4e1c40313","comments_url":"https://api.github.com/repos/apache/openjpa/commits/d6a0570c31c1c25957153a21058de5a4e1c40313/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"d157a1429985e19fa5e096a651511a6845521366","url":"https://api.github.com/repos/apache/openjpa/commits/d157a1429985e19fa5e096a651511a6845521366","html_url":"https://github.com/apache/openjpa/commit/d157a1429985e19fa5e096a651511a6845521366"},{"sha":"62ff7fa9c64b1431933fb0dd07a863c0d32be240","url":"https://api.github.com/repos/apache/openjpa/commits/62ff7fa9c64b1431933fb0dd07a863c0d32be240","html_url":"https://github.com/apache/openjpa/commit/62ff7fa9c64b1431933fb0dd07a863c0d32be240"}],"stats":{"total":813,"additions":711,"deletions":102},"files":[{"sha":"5064c3c61f5e70d2032e4c0a6c42b1901515f470","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/AbstractJDBCSeq.java","status":"modified","additions":15,"deletions":3,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/d6a0570c31c1c25957153a21058de5a4e1c40313/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/AbstractJDBCSeq.java","raw_url":"https://github.com/apache/openjpa/raw/d6a0570c31c1c25957153a21058de5a4e1c40313/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/AbstractJDBCSeq.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/AbstractJDBCSeq.java?ref=d6a0570c31c1c25957153a21058de5a4e1c40313","patch":"@@ -25,6 +25,7 @@\n import javax.transaction.TransactionManager;\n \n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.kernel.JDBCStoreManager.RefCountConnection;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.schema.SchemaGroup;\n import org.apache.openjpa.jdbc.sql.SQLExceptions;\n@@ -156,8 +157,10 @@ private JDBCStore getStore(StoreContext ctx) {\n      */\n     protected Connection getConnection(JDBCStore store)\n         throws SQLException {\n-        if (type == TYPE_TRANSACTIONAL || type == TYPE_CONTIGUOUS)\n+        if (type == TYPE_TRANSACTIONAL || type == TYPE_CONTIGUOUS) {\n+            // Also increments ref count.\n             return store.getConnection();\n+        }\n         else {\n             JDBCConfiguration conf = store.getConfiguration();\n             DataSource ds = conf.getDataSource2(store.getContext());\n@@ -171,13 +174,22 @@ protected Connection getConnection(JDBCStore store)\n     /**\n      * Close the current connection. If the sequence is\n      * <code>TYPE_TRANSACTIONAL</code> or <code>TYPE_CONTIGUOUS</code>\n-     * nothing will be done. Otherwise the connection will be closed.\n+     * we will decrement the ref count. Otherwise the connection will be\n+     * committed and then closed. \n      */\n     protected void closeConnection(Connection conn) {\n         if (conn == null)\n             return;\n         if (type == TYPE_TRANSACTIONAL || type == TYPE_CONTIGUOUS) {\n-            // do nothing; this seq is part of the business transaction\n+            // The seq is part of the business transaction however we need\n+            // to decrement the ref count so that the connection may be \n+            // closed appropriately.\n+            \ttry { \n+            \t\tconn.close();\n+            \t}\n+            \tcatch(SQLException se) { \n+            \t\tthrow SQLExceptions.getStore(se);\n+            \t}\n             return;\n         }\n         else {"},{"sha":"e59a58252fd988c3a0b4ac36becf8678e5d2668d","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/d6a0570c31c1c25957153a21058de5a4e1c40313/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java","raw_url":"https://github.com/apache/openjpa/raw/d6a0570c31c1c25957153a21058de5a4e1c40313/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java?ref=d6a0570c31c1c25957153a21058de5a4e1c40313","patch":"@@ -488,8 +488,13 @@ else if (action.op == Action.UNBOUND_VAR) {\n                     }\n \n                     for (; from != null && from != to;\n-                        from = from.getJoinablePCSuperclassMapping())\n+                        from = from.getJoinablePCSuperclassMapping()) {\n+                    \tFieldMapping cast = from.getFieldMapping(pstate.field\n+                    \t\t\t.getName());\n+                    \tif (cast != null)\n+                    \t\tpstate.field = cast;\n                         pstate.joins = from.joinSuperclass(pstate.joins, false);\n+                    }\n                 }\n                 // nothing more to do from here on as we encountered an xpath action\n                 if (action.op == Action.GET_XPATH)"},{"sha":"1b82463902dd1a19b69e710bb451bdc68f403ed4","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerFieldStrategy.java","status":"modified","additions":17,"deletions":8,"changes":25,"blob_url":"https://github.com/apache/openjpa/blob/d6a0570c31c1c25957153a21058de5a4e1c40313/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/d6a0570c31c1c25957153a21058de5a4e1c40313/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerFieldStrategy.java?ref=d6a0570c31c1c25957153a21058de5a4e1c40313","patch":"@@ -42,6 +42,7 @@\n import org.apache.openjpa.meta.ValueStrategies;\n import org.apache.openjpa.util.InternalException;\n import org.apache.openjpa.util.MetaDataException;\n+import org.apache.openjpa.util.UserException;\n \n /**\n  * Mapping for a single-valued field that delegates to a {@link ValueHandler}.\n@@ -122,19 +123,27 @@ else if (_cols.length == 1)\n     public void insert(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\n         throws SQLException {\n         Row row = field.getRow(sm, store, rm, Row.ACTION_INSERT);\n-        if (row != null)\n-            HandlerStrategies.set(field, sm.fetch(field.getIndex()), store,\n-                row, _cols, _io, field.getNullValue() ==\n-                FieldMapping.NULL_NONE);\n+        if (row != null) {\n+            Object value = sm.fetch(field.getIndex());\n+            if (!HandlerStrategies.set(field, value, store, row, _cols, _io, \n+            \tfield.getNullValue() == FieldMapping.NULL_NONE))\n+            \tif (field.getValueStrategy() != ValueStrategies.AUTOASSIGN)\n+            \t\tthrow new UserException(_loc.get(\"cant-set-value\", \n+            \t\t\t\trow.getFailedObject(), field, value));\n+        }\n     }\n \n     public void update(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\n         throws SQLException {\n         Row row = field.getRow(sm, store, rm, Row.ACTION_UPDATE);\n-        if (row != null)\n-            HandlerStrategies.set(field, sm.fetch(field.getIndex()), store,\n-                row, _cols, _io, field.getNullValue() ==\n-                FieldMapping.NULL_NONE);\n+        if (row != null){\n+            Object value = sm.fetch(field.getIndex());\n+            if (!HandlerStrategies.set(field, value, store, row, _cols, _io,\n+                 field.getNullValue() == FieldMapping.NULL_NONE)) \n+            \tif (field.getValueStrategy() != ValueStrategies.AUTOASSIGN)\n+            \tthrow new UserException(_loc.get(\"cant-set-value\", \n+            \t\t\trow.getFailedObject(), field, value));\n+        }\n     }\n \n     public void delete(OpenJPAStateManager sm, JDBCStore store, RowManager rm)"},{"sha":"12f04c3752ca424fa2453185af23d749cff88e57","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerStrategies.java","status":"modified","additions":19,"deletions":7,"changes":26,"blob_url":"https://github.com/apache/openjpa/blob/d6a0570c31c1c25957153a21058de5a4e1c40313/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerStrategies.java","raw_url":"https://github.com/apache/openjpa/raw/d6a0570c31c1c25957153a21058de5a4e1c40313/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerStrategies.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerStrategies.java?ref=d6a0570c31c1c25957153a21058de5a4e1c40313","patch":"@@ -23,6 +23,7 @@\n import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n+import org.apache.openjpa.jdbc.meta.FieldMapping;\n import org.apache.openjpa.jdbc.meta.RelationId;\n import org.apache.openjpa.jdbc.meta.ValueHandler;\n import org.apache.openjpa.jdbc.meta.ValueMapping;\n@@ -35,6 +36,7 @@\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.util.InvalidStateException;\n+import org.apache.openjpa.util.UserException;\n \n /**\n  * Utility methods for strategies using value handlers.\n@@ -78,28 +80,38 @@\n \n     /**\n      * Set the given value into the given row.\n+     * Return false if the given value can not be set, for example, due to \n+     * null constraints on the columns. \n      */\n-    public static void set(ValueMapping vm, Object val, JDBCStore store,\n+    public static boolean set(ValueMapping vm, Object val, JDBCStore store,\n         Row row, Column[] cols, ColumnIO io, boolean nullNone)\n         throws SQLException {\n         if (!canSetAny(row, io, cols))\n-            return;\n+            return false;\n \n         ValueHandler handler = vm.getHandler();\n         val = handler.toDataStoreValue(vm, val, store);\n+        boolean isSet = false;\n         if (val == null) {\n             for (int i = 0; i < cols.length; i++)\n-                if (canSet(row, io, i, true))\n+                if (canSet(row, io, i, true)) {\n+                    isSet = true;\n                     set(row, cols[i], null, handler, nullNone);\n+                }\n         } else if (cols.length == 1) {\n-            if (canSet(row, io, 0, val == null))\n+            if (canSet(row, io, 0, val == null)) {\n+                isSet = true;\n                 set(row, cols[0], val, handler, nullNone);\n+            }\n         } else {\n             Object[] vals = (Object[]) val;\n             for (int i = 0; i < vals.length; i++)\n-                if (canSet(row, io, i, vals[i] == null))\n+                if (canSet(row, io, i, vals[i] == null)) {\n+                    isSet = true;\n                     set(row, cols[i], vals[i], handler, nullNone);\n+                }\n         }\n+        return isSet;\n     }\n \n     /**\n@@ -108,9 +120,9 @@ public static void set(ValueMapping vm, Object val, JDBCStore store,\n     private static boolean canSet(Row row, ColumnIO io, int i,\n         boolean nullValue) {\n         if (row.getAction() == Row.ACTION_INSERT)\n-            return io.isInsertable(i, nullValue);\n+        \treturn io.isInsertable(i, nullValue);\n         if (row.getAction() == Row.ACTION_UPDATE)\n-            return io.isUpdatable(i, nullValue);\n+        \treturn io.isUpdatable(i, nullValue);\n         return true;\n     }\n "},{"sha":"4189e46016403a5651ecc4d59bd41b560c3bc77d","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/d6a0570c31c1c25957153a21058de5a4e1c40313/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/d6a0570c31c1c25957153a21058de5a4e1c40313/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java?ref=d6a0570c31c1c25957153a21058de5a4e1c40313","patch":"@@ -329,7 +329,7 @@\n     public String sequenceSchemaSQL = null;\n     public String sequenceNameSQL = null;\n     // most native sequences can be run inside the business transaction\n-    public int nativeSequenceType= Seq.TYPE_CONTIGUOUS;\n+    public int nativeSequenceType= Seq.TYPE_TRANSACTIONAL;\n \n     protected JDBCConfiguration conf = null;\n     protected Log log = null;"},{"sha":"f441b19ffad5808b066836b021eed7e702594c40","filename":"openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/strats/localizer.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/d6a0570c31c1c25957153a21058de5a4e1c40313/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/strats/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/d6a0570c31c1c25957153a21058de5a4e1c40313/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/strats/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/strats/localizer.properties?ref=d6a0570c31c1c25957153a21058de5a4e1c40313","patch":"@@ -136,3 +136,4 @@ unmapped-datastore-value: Instances of type \"{0}\" are not valid query \\\n \tparameters because the type is not mapped.\n cache-hit: SQL Cache hit with key: {0} in {1}\n cache-missed: SQL Cache missed with key: {0} in {1}\n+cant-set-value: Field \"{1}\" of \"{0}\" can not be set to \"{2}\" value."},{"sha":"8c72a7d376189d6ad6bbae552f9ff6ae726b34e3","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancerAgent.java","status":"modified","additions":35,"deletions":24,"changes":59,"blob_url":"https://github.com/apache/openjpa/blob/d6a0570c31c1c25957153a21058de5a4e1c40313/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancerAgent.java","raw_url":"https://github.com/apache/openjpa/raw/d6a0570c31c1c25957153a21058de5a4e1c40313/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancerAgent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancerAgent.java?ref=d6a0570c31c1c25957153a21058de5a4e1c40313","patch":"@@ -20,6 +20,8 @@\n \n import java.lang.instrument.Instrumentation;\n import java.security.AccessController;\n+import java.util.Iterator;\n+import java.util.List;\n \n import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.conf.OpenJPAConfigurationImpl;\n@@ -90,30 +92,39 @@ else if (opts.containsKey(\"RuntimeEnhancement\") ||\n \n     private static void registerClassLoadEnhancer(Instrumentation inst,\n         Options opts) {\n-        OpenJPAConfiguration conf = new OpenJPAConfigurationImpl();\n-        Configurations.populateConfiguration(conf, opts);\n-        // don't allow connections\n-        conf.setConnectionUserName(null);\n-        conf.setConnectionPassword(null);\n-        conf.setConnectionURL(null);\n-        conf.setConnectionDriverName(null);\n-        conf.setConnectionFactoryName(null);\n-        // set single class resolver\n-        final ClassLoader tmpLoader = (ClassLoader) AccessController\n-            .doPrivileged(J2DoPrivHelper\n-                .newTemporaryClassLoaderAction((ClassLoader) AccessController\n-                    .doPrivileged(J2DoPrivHelper.getContextClassLoaderAction())\n-                    ));\n-        conf.setClassResolver(new ClassResolver() {\n-            public ClassLoader getClassLoader(Class context, ClassLoader env) {\n-                return tmpLoader;\n-            }\n-        });\n-        conf.setReadOnly(Configuration.INIT_STATE_FREEZING);\n-        conf.instantiateAll(); // avoid threading issues\n+    \tList<String> anchors = Configurations.\n+            getFullyQualifiedAnchorsInPropertiesLocation(opts);\n+    \tfor (String a : anchors) {\n+    \t\tOptions clonedOptions = (Options) opts.clone();\n+    \t\tclonedOptions.setProperty(\"properties\", a);\n+    \t\tOpenJPAConfiguration conf = new OpenJPAConfigurationImpl();\n+    \t\tConfigurations.populateConfiguration(conf, clonedOptions);\n+    \t\t// don't allow connections\n+    \t\tconf.setConnectionUserName(null);\n+    \t\tconf.setConnectionPassword(null);\n+    \t\tconf.setConnectionURL(null);\n+    \t\tconf.setConnectionDriverName(null);\n+    \t\tconf.setConnectionFactoryName(null);\n+    \t\t// set single class resolver\n+    \t\tfinal ClassLoader tmpLoader = (ClassLoader) AccessController\n+    \t\t    .doPrivileged(J2DoPrivHelper\n+    \t\t    .newTemporaryClassLoaderAction((ClassLoader) AccessController\n+    \t\t    .doPrivileged(J2DoPrivHelper.getContextClassLoaderAction())\n+    \t\t    ));\n+    \t\tconf.setClassResolver(new ClassResolver() {\n+    \t\t    public ClassLoader getClassLoader(Class context,\n+                    ClassLoader env) {\n+    \t\t        return tmpLoader;\n+    \t\t    }\n+    \t\t});\n+    \t\tconf.setReadOnly(Configuration.INIT_STATE_FREEZING);\n+    \t\tconf.instantiateAll(); // avoid threading issues\n \n-        PCClassFileTransformer transformer = new PCClassFileTransformer\n-            (conf.newMetaDataRepositoryInstance(), opts, tmpLoader);\n-        inst.addTransformer(transformer);\n+    \t\tPCClassFileTransformer transformer = new PCClassFileTransformer\n+    \t\t    (conf.newMetaDataRepositoryInstance(), clonedOptions,\n+    \t\t    tmpLoader);\n+    \t\tinst.addTransformer(transformer);\n+    \t\tconf.close();\n+    \t}\n     }\n }"},{"sha":"1bf5af3824a9c71b765c664b3952dd00dddd5ec5","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/d6a0570c31c1c25957153a21058de5a4e1c40313/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","raw_url":"https://github.com/apache/openjpa/raw/d6a0570c31c1c25957153a21058de5a4e1c40313/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java?ref=d6a0570c31c1c25957153a21058de5a4e1c40313","patch":"@@ -345,7 +345,7 @@ else if (root().id == JJTUPDATE)\n \n     private void evalGroupingClause(QueryExpressions exps) {\n         // handle GROUP BY clauses\n-        JPQLNode groupByNode = root().findChildByID(JJTGROUPBY, true);\n+        JPQLNode groupByNode = root().findChildByID(JJTGROUPBY, false);\n \n         if (groupByNode == null)\n             return;\n@@ -362,7 +362,7 @@ private void evalGroupingClause(QueryExpressions exps) {\n \n     private void evalHavingClause(QueryExpressions exps) {\n         // handle HAVING clauses\n-        JPQLNode havingNode = root().findChildByID(JJTHAVING, true);\n+        JPQLNode havingNode = root().findChildByID(JJTHAVING, false);\n \n         if (havingNode == null)\n             return;"},{"sha":"b5f54cb251ee37b598e57d4f2c6118dff2655df7","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyCollections.java","status":"modified","additions":1,"deletions":5,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/d6a0570c31c1c25957153a21058de5a4e1c40313/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyCollections.java","raw_url":"https://github.com/apache/openjpa/raw/d6a0570c31c1c25957153a21058de5a4e1c40313/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyCollections.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyCollections.java?ref=d6a0570c31c1c25957153a21058de5a4e1c40313","patch":"@@ -38,11 +38,7 @@\n      */\n     public static void beforeAdd(ProxyCollection coll, int index, Object value){\n         assertAllowedType(value, coll.getElementType());\n-        if (index == coll.size())\n-            // optimize for adding to the end\n-            beforeAdd(coll, value);\n-        else\n-            dirty(coll, true);\n+        dirty(coll, true);\n     }\n \n     /**"},{"sha":"0af73218cf944bed18753f4eebca16c14c541bae","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestGroupByQuery.java","status":"added","additions":84,"deletions":0,"changes":84,"blob_url":"https://github.com/apache/openjpa/blob/d6a0570c31c1c25957153a21058de5a4e1c40313/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestGroupByQuery.java","raw_url":"https://github.com/apache/openjpa/raw/d6a0570c31c1c25957153a21058de5a4e1c40313/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestGroupByQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestGroupByQuery.java?ref=d6a0570c31c1c25957153a21058de5a4e1c40313","patch":"@@ -0,0 +1,84 @@\n+/*\r\n+ * TestLockGroupsWithHorizontalBaseType.java\r\n+ *\r\n+ * Created on October 4, 2006, 5:03 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.query;\r\n+\r\n+import java.util.List;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.query.domain.IndoorGame;\r\n+import org.apache.openjpa.persistence.jdbc.query.domain.Scrabble;\r\n+import org.apache.openjpa.persistence.jdbc.query.domain.Chess;\r\n+import org.apache.openjpa.persistence.jdbc.query.domain.Game;\r\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n+\r\n+/**\r\n+ * Tests GROUP BY in sub query does not get parsed by owning query.\r\n+ * \r\n+ * Further details can be found in <A\r\n+ * HREF=\"https://issues.apache.org/jira/browse/OPENJPA-28\">OPENJPA-28</A>\r\n+ * \r\n+ * @author Pinaki Poddar\r\n+ * \r\n+ */\r\n+public class TestGroupByQuery extends SingleEMFTestCase {\r\n+\tpublic void setUp() {\r\n+\t\tsuper.setUp(DROP_TABLES, Game.class, IndoorGame.class, Scrabble.class,\r\n+\t\t\t\tChess.class);\r\n+\t\ttry {\r\n+\t\t\tcreateData();\r\n+\t\t} catch (Exception e) {\r\n+\t\t\tthrow new RuntimeException(e);\r\n+\t\t}\r\n+\t}\r\n+\r\n+\tvoid createData() throws Exception {\r\n+\t\tEntityManager em = emf.createEntityManager();\r\n+\t\tem.getTransaction().begin();\r\n+\t\tClass[] classes = { Game.class, IndoorGame.class, Scrabble.class,\r\n+\t\t\t\tChess.class };\r\n+\t\tfor (Class cls : classes) {\r\n+\t\t\tfor (int i = 1; i <= 4; i++) {\r\n+\t\t\t\tGame p = (Game) cls.newInstance();\r\n+\t\t\t\tp.setName(cls.getSimpleName() + \"-\" + i);\r\n+\t\t\t\tem.persist(p);\r\n+\t\t\t}\r\n+\t\t}\r\n+\t\tem.getTransaction().commit();\r\n+\t}\r\n+\r\n+\tpublic void testGroupBy() {\r\n+\t\tString jpql = \"SELECT g.name, g.nTile FROM Scrabble g WHERE \"\r\n+\t\t\t\t+ \"(g.name = ANY(SELECT g1.name FROM Scrabble g1 \"\r\n+\t\t\t\t+ \"GROUP BY g1.name )) ORDER BY g.name\";\r\n+\t\tEntityManager em = emf.createEntityManager();\r\n+\r\n+\t\tList<IndoorGame> employees = em.createQuery(jpql).getResultList();\r\n+\r\n+\t}\r\n+}\r"},{"sha":"4d7a5bdff2a6314ae707b47a0ecb8bc23d2159e7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Chess.java","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/apache/openjpa/blob/d6a0570c31c1c25957153a21058de5a4e1c40313/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Chess.java","raw_url":"https://github.com/apache/openjpa/raw/d6a0570c31c1c25957153a21058de5a4e1c40313/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Chess.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Chess.java?ref=d6a0570c31c1c25957153a21058de5a4e1c40313","patch":"@@ -0,0 +1,43 @@\n+/*\r\n+ * TestLockGroupsWithHorizontalBaseType.java\r\n+ *\r\n+ * Created on October 4, 2006, 5:03 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.query.domain;\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+public class Chess extends IndoorGame {\r\n+\tprivate int nPiece;\r\n+\r\n+\tpublic int getPiece() {\r\n+\t\treturn nPiece;\r\n+\t}\r\n+\r\n+\tpublic void setPiece(int n) {\r\n+\t\tthis.nPiece = n;\r\n+\t}\r\n+}\r"},{"sha":"de133a07d82770c9680eaabde101fdb79bbdfecf","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Game.java","status":"added","additions":65,"deletions":0,"changes":65,"blob_url":"https://github.com/apache/openjpa/blob/d6a0570c31c1c25957153a21058de5a4e1c40313/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Game.java","raw_url":"https://github.com/apache/openjpa/raw/d6a0570c31c1c25957153a21058de5a4e1c40313/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Game.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Game.java?ref=d6a0570c31c1c25957153a21058de5a4e1c40313","patch":"@@ -0,0 +1,65 @@\n+/*\r\n+ * TestLockGroupsWithHorizontalBaseType.java\r\n+ *\r\n+ * Created on October 4, 2006, 5:03 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.query.domain;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.Inheritance;\r\n+import javax.persistence.InheritanceType;\r\n+\r\n+/**\r\n+ * Simple unrelated persistent entity used to test logically union queries. \r\n+ * This class is root of an inheritance hierarchy using TABLE PER CLASS \r\n+ * strategy. Polymorphic queries on this class needs to run logical union\r\n+ * of queries on all known subclasses. \r\n+ * \r\n+ * @author Pinaki Poddar\r\n+ *\r\n+ */\r\n+@Entity\r\n+@Inheritance(strategy=InheritanceType.TABLE_PER_CLASS)\r\n+public class Game {\r\n+\t@Id\r\n+\t@GeneratedValue\r\n+\tprivate long id;\r\n+\t\r\n+\tprivate String name;\r\n+\r\n+\tpublic long getId() {\r\n+\t\treturn id;\r\n+\t}\r\n+\r\n+\tpublic String getName() {\r\n+\t\treturn name;\r\n+\t}\r\n+\r\n+\tpublic void setName(String name) {\r\n+\t\tthis.name = name;\r\n+\t}\r\n+}\r"},{"sha":"ffe7384d67308f0e422951ed21aeca3f96943114","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/IndoorGame.java","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/apache/openjpa/blob/d6a0570c31c1c25957153a21058de5a4e1c40313/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/IndoorGame.java","raw_url":"https://github.com/apache/openjpa/raw/d6a0570c31c1c25957153a21058de5a4e1c40313/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/IndoorGame.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/IndoorGame.java?ref=d6a0570c31c1c25957153a21058de5a4e1c40313","patch":"@@ -0,0 +1,43 @@\n+/*\r\n+ * TestLockGroupsWithHorizontalBaseType.java\r\n+ *\r\n+ * Created on October 4, 2006, 5:03 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.query.domain;\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+public class IndoorGame extends Game {\r\n+\tprivate int nPlayer;\r\n+\r\n+\tpublic int getPlayer() {\r\n+\t\treturn nPlayer;\r\n+\t}\r\n+\r\n+\tpublic void setPlayer(int n) {\r\n+\t\tthis.nPlayer = n;\r\n+\t}\r\n+}\r"},{"sha":"fd03563726798005f4f321cd842e355812938a0b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Scrabble.java","status":"added","additions":44,"deletions":0,"changes":44,"blob_url":"https://github.com/apache/openjpa/blob/d6a0570c31c1c25957153a21058de5a4e1c40313/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Scrabble.java","raw_url":"https://github.com/apache/openjpa/raw/d6a0570c31c1c25957153a21058de5a4e1c40313/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Scrabble.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Scrabble.java?ref=d6a0570c31c1c25957153a21058de5a4e1c40313","patch":"@@ -0,0 +1,44 @@\n+/*\r\n+ * TestLockGroupsWithHorizontalBaseType.java\r\n+ *\r\n+ * Created on October 4, 2006, 5:03 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.query.domain;\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+public class Scrabble extends IndoorGame {\r\n+\tprivate int nTile;\r\n+\r\n+\tpublic int getTile() {\r\n+\t\treturn nTile;\r\n+\t}\r\n+\r\n+\tpublic void setTile(int n) {\r\n+\t\tthis.nTile = n;\r\n+\t}\r\n+\r\n+}\r"},{"sha":"72685e2f878293e767ee9388603a16dc502b7083","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestEJBClauses.java","status":"modified","additions":7,"deletions":10,"changes":17,"blob_url":"https://github.com/apache/openjpa/blob/d6a0570c31c1c25957153a21058de5a4e1c40313/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestEJBClauses.java","raw_url":"https://github.com/apache/openjpa/raw/d6a0570c31c1c25957153a21058de5a4e1c40313/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestEJBClauses.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestEJBClauses.java?ref=d6a0570c31c1c25957153a21058de5a4e1c40313","patch":"@@ -165,16 +165,13 @@ public void testClausePathExpr() {\n         String failure = \"SELECT DISTINCT s \" +\r\n             \"FROM Student s WHERE\" +\r\n             \" s.department.name = 'CompSci1'\";\r\n-\r\n-        try {\r\n-            List ls = em.createQuery(failure).getResultList();\r\n-            fail(\r\n-                \"cannot compose path expressions from a path expression that evaluates to a collection.\");\r\n-        }\r\n-        catch (Exception e) {\r\n-            //\r\n-        }\r\n-\r\n+        // Changes related to OPENJPA-485 allows this query to pass.\r\n+        // The query is not kosher as it does navigate through a \r\n+        // collection-valued-path-expression (s.department.name) where\r\n+        // department is a Collection. \r\n+        // But we allow this because of the convenience of the query expression \r\n+        List ls = em.createQuery(failure).getResultList();\r\n+        assertFalse(ls.isEmpty());\r\n         endEm(em);\r\n     }\r\n \r"},{"sha":"5c0db50c9f1f861a5df12e18528c8bcdad7a02d4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/TestManagedInterfaces.java","status":"modified","additions":15,"deletions":19,"changes":34,"blob_url":"https://github.com/apache/openjpa/blob/d6a0570c31c1c25957153a21058de5a4e1c40313/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/TestManagedInterfaces.java","raw_url":"https://github.com/apache/openjpa/raw/d6a0570c31c1c25957153a21058de5a4e1c40313/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/TestManagedInterfaces.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/TestManagedInterfaces.java?ref=d6a0570c31c1c25957153a21058de5a4e1c40313","patch":"@@ -330,26 +330,22 @@ public void testMixedQuery() {\n         createMixed();\r\n \r\n         OpenJPAEntityManager em = emf.createEntityManager();\r\n-        try {\r\n-            Query q = em.createQuery(\"select o from MixedInterface o \" +\r\n-                \"where o.intField = 4\");\r\n-            Collection c = q.getResultList();\r\n-            Set seen = new HashSet();\r\n-            assertEquals(2, c.size());\r\n-            MixedInterface pc;\r\n-            for (Iterator it = c.iterator(); it.hasNext();) {\r\n-                pc = (MixedInterface) it.next();\r\n-                assertEquals(4, pc.getIntField());\r\n-                seen.add(pc.getClass());\r\n-            }\r\n-            assertEquals(2, seen.size());\r\n-\r\n-            fail(\"OPENJPA-481\");\r\n-        } catch (PersistenceException e) {\r\n-            // expected\r\n-        } finally {\r\n-            em.close();\r\n+        Query q = em.createQuery(\"select o from MixedInterface o \" +\r\n+            \"where o.intField = 4\");\r\n+        Collection c = q.getResultList();\r\n+        Set seen = new HashSet();\r\n+        assertEquals(2, c.size());\r\n+        MixedInterface pc;\r\n+        for (Iterator it = c.iterator(); it.hasNext();) {\r\n+            pc = (MixedInterface) it.next();\r\n+            assertEquals(4, pc.getIntField());\r\n+            seen.add(pc.getClass());\r\n         }\r\n+        assertEquals(2, seen.size());\r\n+        \r\n+        // Changes of OPENJPA-485 had the positive (but unintended) consequence\r\n+        // of making this case pass, which was failing before as reported in\r\n+        // OPENJPA-481\r\n     }\r\n \r\n     public void testQueryForMixedInterfaceImpls() {\r"},{"sha":"977a97818b2dbd3148392fe30875deb28f98b71c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/BlobValue.java","status":"added","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/apache/openjpa/blob/d6a0570c31c1c25957153a21058de5a4e1c40313/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/BlobValue.java","raw_url":"https://github.com/apache/openjpa/raw/d6a0570c31c1c25957153a21058de5a4e1c40313/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/BlobValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/BlobValue.java?ref=d6a0570c31c1c25957153a21058de5a4e1c40313","patch":"@@ -0,0 +1,33 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.nullity;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * Simple serializable entity for testing null constraint on field values.\n+ * \n+ * @author Pinaki Poddar\n+ *\n+ */\n+public class BlobValue implements Serializable {\n+    private String  strVal;\n+    private int     intVal;\n+    private byte[]  bytes;\n+}"},{"sha":"0c397991595830137891ac4eccaf13dca938f8ab","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/NullValues.java","status":"modified","additions":56,"deletions":0,"changes":56,"blob_url":"https://github.com/apache/openjpa/blob/d6a0570c31c1c25957153a21058de5a4e1c40313/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/NullValues.java","raw_url":"https://github.com/apache/openjpa/raw/d6a0570c31c1c25957153a21058de5a4e1c40313/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/NullValues.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/NullValues.java?ref=d6a0570c31c1c25957153a21058de5a4e1c40313","patch":"@@ -21,7 +21,9 @@\n import javax.persistence.Basic;\r\n import javax.persistence.Column;\r\n import javax.persistence.Entity;\r\n+import javax.persistence.GeneratedValue;\r\n import javax.persistence.Id;\r\n+import javax.persistence.Version;\r\n \r\n /**\r\n  * Persistent entity used to test behavior of null constraint on basic fields.\r\n@@ -32,6 +34,7 @@\n @Entity\r\n public class NullValues {\r\n \t@Id\r\n+\t@GeneratedValue\r\n \tprivate long id;\r\n \t\r\n \t@Column(nullable=true)\r\n@@ -46,6 +49,22 @@\n \t@Basic(optional=false)\r\n \tprivate Integer notOptional;\r\n \t\r\n+\t@Column(nullable=true)\r\n+\tprivate BlobValue nullableBlob;\r\n+\t\r\n+\t@Column(nullable=false)\r\n+\tprivate BlobValue notNullableBlob;\r\n+\t\r\n+\t@Basic(optional=true)\r\n+\tprivate BlobValue optionalBlob;\r\n+\t\r\n+\t@Basic(optional=false)\r\n+\tprivate BlobValue notOptionalBlob;\r\n+\t\r\n+\t@Version\r\n+\tprivate int version;\r\n+\t\r\n+\t\r\n \t/**\r\n \t * Construct with all fields set to non-null values.\r\n \t */\r\n@@ -54,6 +73,11 @@ public NullValues() {\n \t\tsetNotOptional(42);\r\n \t\tsetNotNullable(42);\r\n \t\tsetNullable(42);\r\n+\t\t\r\n+\t\tsetNullableBlob(new BlobValue());\r\n+\t\tsetNotNullableBlob(new BlobValue());\r\n+\t\tsetOptionalBlob(new BlobValue());\r\n+\t\tsetNotOptionalBlob(new BlobValue());\r\n \t}\r\n \t\r\n \tpublic long getId() {\r\n@@ -91,4 +115,36 @@ public Integer getNotOptional() {\n \tpublic void setNotOptional(Integer notOptional) {\r\n \t\tthis.notOptional = notOptional;\r\n \t}\r\n+\r\n+\tpublic BlobValue getNullableBlob() {\r\n+\t\treturn nullableBlob;\r\n+\t}\r\n+\r\n+\tpublic void setNullableBlob(BlobValue nullableBlob) {\r\n+\t\tthis.nullableBlob = nullableBlob;\r\n+\t}\r\n+\r\n+\tpublic BlobValue getNotNullableBlob() {\r\n+\t\treturn notNullableBlob;\r\n+\t}\r\n+\r\n+\tpublic void setNotNullableBlob(BlobValue notNullableBlob) {\r\n+\t\tthis.notNullableBlob = notNullableBlob;\r\n+\t}\r\n+\r\n+\tpublic BlobValue getOptionalBlob() {\r\n+\t\treturn optionalBlob;\r\n+\t}\r\n+\r\n+\tpublic void setOptionalBlob(BlobValue optionalBlob) {\r\n+\t\tthis.optionalBlob = optionalBlob;\r\n+\t}\r\n+\r\n+\tpublic BlobValue getNotOptionalBlob() {\r\n+\t\treturn notOptionalBlob;\r\n+\t}\r\n+\r\n+\tpublic void setNotOptionalBlob(BlobValue notOptionalBlob) {\r\n+\t\tthis.notOptionalBlob = notOptionalBlob;\r\n+\t}\r\n }\r"},{"sha":"d8bf5cbbdbcc27ccb20d840ac83e9c5dd1bad2c2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/TestBasicFieldNullity.java","status":"modified","additions":61,"deletions":21,"changes":82,"blob_url":"https://github.com/apache/openjpa/blob/d6a0570c31c1c25957153a21058de5a4e1c40313/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/TestBasicFieldNullity.java","raw_url":"https://github.com/apache/openjpa/raw/d6a0570c31c1c25957153a21058de5a4e1c40313/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/TestBasicFieldNullity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/TestBasicFieldNullity.java?ref=d6a0570c31c1c25957153a21058de5a4e1c40313","patch":"@@ -22,6 +22,7 @@\n import javax.persistence.RollbackException;\r\n \r\n import org.apache.openjpa.persistence.InvalidStateException;\r\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\r\n import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n \r\n \r\n@@ -34,86 +35,125 @@\n  * @author Pinaki Poddar\r\n  */\r\n public class TestBasicFieldNullity extends SingleEMFTestCase {\r\n-\r\n+\tprivate static boolean NEW = true;\r\n \r\n     public void setUp() {\r\n-        setUp(NullValues.class);\r\n+        setUp(CLEAR_TABLES, NullValues.class);\r\n     }\r\n \r\n     public void testNullOnOptionalFieldIsAllowed() {\r\n     \tNullValues pc = new NullValues();\r\n-    \tpc.setOptional(null);\r\n-    \tassertCommitSucceeds(pc);\r\n+    \tpc.setOptional(null); \r\n+    \tassertCommitSucceeds(pc, NEW);\r\n     }\r\n     \r\n     public void testNullOnNonOptionalFieldIsDisallowed() {\r\n     \tNullValues pc = new NullValues();\r\n     \tpc.setNotOptional(null);\r\n-    \tassertCommitFails(pc, InvalidStateException.class);\r\n+    \tassertCommitFails(pc, NEW, InvalidStateException.class);\r\n     }\r\n     \r\n     public void testNotNullOnOptionalFieldIsAllowed() {\r\n     \tNullValues pc = new NullValues();\r\n-    \tassertCommitSucceeds(pc);\r\n+    \tassertCommitSucceeds(pc, NEW);\r\n     }\r\n     \r\n     public void testNotNullOnNonOptionalFieldIsAllowed() {\r\n     \tNullValues pc = new NullValues();\r\n-    \tassertCommitSucceeds(pc);\r\n+    \tassertCommitSucceeds(pc, NEW);\r\n     }\r\n     \r\n     public void testNullOnNullableColumnAllowed() {\r\n     \tNullValues pc = new NullValues();\r\n     \tpc.setNullable(null);\r\n-    \tassertCommitSucceeds(pc);\r\n+    \tassertCommitSucceeds(pc, NEW);\r\n     }\r\n     \r\n     public void testNullOnNonNullableColumnIsDisallowed() {\r\n     \tNullValues pc = new NullValues();\r\n     \tpc.setNotNullable(null);\r\n-    \tassertCommitFails(pc, RollbackException.class);\r\n+    \tassertCommitFails(pc, NEW, RollbackException.class);\r\n     }\r\n     \r\n     public void testNotNullOnNullableColumnIsAllowed() {\r\n     \tNullValues pc = new NullValues();\r\n-    \tassertCommitSucceeds(pc);\r\n+    \tassertCommitSucceeds(pc, NEW);\r\n     }\r\n     \r\n     public void testNotNullOnNonNullableColumnIsAllowed() {\r\n     \tNullValues pc = new NullValues();\r\n-    \tassertCommitSucceeds(pc);\r\n+    \tassertCommitSucceeds(pc, NEW);\r\n+    }\r\n+    \r\n+    public void testNullOnOptionalBlobFieldIsAllowed() {\r\n+    \tNullValues pc = new NullValues();\r\n+    \tpc.setOptionalBlob(null);\r\n+    \tassertCommitSucceeds(pc, NEW);\r\n+    }\r\n+    \r\n+    public void testNullOnNonOptionalBlobFieldIsDisallowed() {\r\n+    \tNullValues pc = new NullValues();\r\n+    \tpc.setNotOptionalBlob(null);\r\n+    \tassertCommitFails(pc, NEW, InvalidStateException.class);\r\n+    }\r\n+    \r\n+    public void testNullOnNullableBlobColumnAllowed() {\r\n+    \tNullValues pc = new NullValues();\r\n+    \tpc.setNullableBlob(null);\r\n+    \tassertCommitSucceeds(pc, NEW);\r\n+    }\r\n+    \r\n+    public void testNullOnNonNullableBlobColumnIsDisallowed() {\r\n+    \tNullValues pc = new NullValues();\r\n+    \tpc.setNotNullableBlob(null);\r\n+    \tassertCommitFails(pc, NEW, RollbackException.class);\r\n+    }\r\n+    \r\n+    public void testX() {\r\n+    \tNullValues pc = new NullValues();\r\n+    \tassertCommitSucceeds(pc, NEW);\r\n+    \tOpenJPAPersistence.getEntityManager(pc).close();\r\n+    \t\r\n+    \tpc.setNotNullableBlob(null);\r\n+    \tassertCommitFails(pc, !NEW, RollbackException.class);\r\n+    \t\r\n     }\r\n     \r\n     /**\r\n      * Asserts that the given instance can not be committed.\r\n      */\r\n-    void assertCommitFails(Object pc, Class expected) {\r\n+    void assertCommitFails(Object pc, boolean isNew, Class expected) {\r\n     \tEntityManager em = emf.createEntityManager();\r\n     \tem.getTransaction().begin();\r\n-    \tem.persist(pc);\r\n+    \tif (isNew)\r\n+    \t\tem.persist(pc);\r\n+    \telse {\r\n+    \t\tObject merged = em.merge(pc);\r\n+    \t}\r\n     \ttry {\r\n \t\t\tem.getTransaction().commit();\r\n \t\t\tfail();\r\n-\t\t} catch (RuntimeException e) {\r\n+\t\t} catch (Exception e) {\r\n \t\t\tif (!expected.isAssignableFrom(e.getClass())) {\r\n-\t\t\t\tfail(\"Expected \" + expected.getName());\r\n \t\t\t\te.printStackTrace();\r\n-\t\t\t}\r\n+\t\t\t\tfail(\"Expected \" + expected.getName());\r\n+\t\t\t} \r\n \t\t}\r\n     }\r\n     \r\n-    void assertCommitSucceeds(Object pc) {\r\n+    void assertCommitSucceeds(Object pc, boolean isNew) {\r\n     \tEntityManager em = emf.createEntityManager();\r\n     \tem.getTransaction().begin();\r\n-    \tem.persist(pc);\r\n+    \tif (isNew)\r\n+    \t\tem.persist(pc);\r\n+    \telse \r\n+    \t\tem.merge(pc);\r\n     \ttry {\r\n \t\t\tem.getTransaction().commit();\r\n \t\t} catch (RuntimeException e) {\r\n-\t\t\tfail();\r\n \t\t\te.printStackTrace();\r\n+\t\t\tfail();\r\n \t\t}\r\n     }\r\n-\r\n-\r\n }\r\n \r"},{"sha":"2d2211d0eb98b0010282bcefaf7374f263ee0232","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/recursive/Node.java","status":"added","additions":67,"deletions":0,"changes":67,"blob_url":"https://github.com/apache/openjpa/blob/d6a0570c31c1c25957153a21058de5a4e1c40313/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/recursive/Node.java","raw_url":"https://github.com/apache/openjpa/raw/d6a0570c31c1c25957153a21058de5a4e1c40313/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/recursive/Node.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/recursive/Node.java?ref=d6a0570c31c1c25957153a21058de5a4e1c40313","patch":"@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.recursive;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Version;\n+\n+@Entity\n+public class Node {\n+\n+    @Id\n+    @GeneratedValue\n+    private int id;\n+    @Version\n+    private int version;\n+\n+    @OneToMany\n+    private List<Node> nodes = new ArrayList<Node>();\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public int getVersion() {\n+        return version;\n+    }\n+\n+    public void setVersion(int version) {\n+        this.version = version;\n+    }\n+\n+    public List<Node> getNodes() {\n+        return nodes;\n+    }\n+\n+    public void setNodes(List<Node> nodes) {\n+        this.nodes = nodes;\n+    }\n+\n+}\n\\ No newline at end of file"},{"sha":"4db37279a96e69ed0a7cf88706d11acc6ee74945","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/recursive/TestRecursiveRelationships.java","status":"added","additions":81,"deletions":0,"changes":81,"blob_url":"https://github.com/apache/openjpa/blob/d6a0570c31c1c25957153a21058de5a4e1c40313/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/recursive/TestRecursiveRelationships.java","raw_url":"https://github.com/apache/openjpa/raw/d6a0570c31c1c25957153a21058de5a4e1c40313/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/recursive/TestRecursiveRelationships.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/recursive/TestRecursiveRelationships.java?ref=d6a0570c31c1c25957153a21058de5a4e1c40313","patch":"@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.recursive;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+public class TestRecursiveRelationships extends SingleEMFTestCase {\n+    private int _l1Nodes = 3;\n+    private int _l2Nodes = 3;\n+\n+    public void setUp() {\n+        setUp(Node.class);\n+    }\n+\n+    public void testRecursiveNodes() {\n+        EntityManager em = emf.createEntityManager();\n+\n+        // set up initial tree\n+        em.getTransaction().begin();\n+        Node root = new Node();\n+        for (int i = 0; i < _l1Nodes; i++) {\n+            Node n1 = new Node();\n+            root.getNodes().add(n1);\n+            em.persist(n1);\n+        }\n+        em.persist(root);\n+        em.getTransaction().commit();\n+\n+        // clear PC\n+        em.refresh(root);\n+        int rootId = root.getId();\n+        em.clear();\n+        em.close();\n+        em = emf.createEntityManager();\n+\n+        // add new nodes\n+        em.getTransaction().begin();\n+        root = em.getReference(Node.class, rootId);\n+        assertNotNull(root);\n+        assertNotNull(root.getNodes());\n+        for (Node n : root.getNodes()) {\n+            for (int j = 0; j < _l2Nodes; j++) {\n+                Node n2 = new Node();\n+                n.getNodes().add(n.getNodes().size(), n2);\n+                em.persist(n2);\n+            }\n+        }\n+        em.getTransaction().commit();\n+        em.clear();\n+        em.close();\n+        em = emf.createEntityManager();\n+\n+        // ensure count is correct.\n+        root = em.getReference(Node.class, rootId);\n+        assertNotNull(root);\n+        assertNotNull(root.getNodes());\n+        assertEquals(_l1Nodes, root.getNodes().size());\n+        for (Node n : root.getNodes()) {\n+            assertEquals(_l2Nodes, n.getNodes().size());\n+        }\n+        em.close();\n+    }\n+}"},{"sha":"2462fc63f9386fe56388f8ed906d56728d84365c","filename":"openjpa-project/assembly.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/d6a0570c31c1c25957153a21058de5a4e1c40313/openjpa-project/assembly.xml","raw_url":"https://github.com/apache/openjpa/raw/d6a0570c31c1c25957153a21058de5a4e1c40313/openjpa-project/assembly.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/assembly.xml?ref=d6a0570c31c1c25957153a21058de5a4e1c40313","patch":"@@ -65,7 +65,7 @@\n             <outputDirectory>docs/manual</outputDirectory>\r\n         </fileSet>\r\n         <fileSet>\r\n-            <directory>target/site/apidocs</directory>\r\n+            <directory>../target/site/apidocs</directory>\r\n             <outputDirectory>docs/javadoc</outputDirectory>\r\n         </fileSet>\r\n         <fileSet>\r"},{"sha":"df362d0bca8c9b42eafaf95a90d88cfb123e876b","filename":"openjpa-project/src/doc/manual/supported_databases.xml","status":"modified","additions":14,"deletions":0,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/d6a0570c31c1c25957153a21058de5a4e1c40313/openjpa-project/src/doc/manual/supported_databases.xml","raw_url":"https://github.com/apache/openjpa/raw/d6a0570c31c1c25957153a21058de5a4e1c40313/openjpa-project/src/doc/manual/supported_databases.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/supported_databases.xml?ref=d6a0570c31c1c25957153a21058de5a4e1c40313","patch":"@@ -429,6 +429,20 @@ Fields of type BLOB and CLOB are limited to 1M. This number can be increased by\n extending <classname>DB2Dictionary</classname>.\n                     </para>\n                 </listitem>\n+                <listitem>\r\n+                    <para>\r\n+Explicit creation of indexes specified by the OpenJPA @Index annotation will \r\n+fail on DB2 for iSeries if the default schema used by the JDBC driver does not \r\n+exist.  If a default schema is not specified on the connection, the iSeries \r\n+will default to the user profile name.  If a schema of that name does not \r\n+exist, DB2 on iSeries will not create the schema, resulting in a failure when \r\n+creating the index.  The failure message will look similar to: \"[SQL0204] \r\n+USERNAME in QSYS type *LIB not found.\"  To work around this issue, specify a \r\n+default schema on the JDBC URL or data source property and make sure that \r\n+schema exists or create a schema which matches the user profile of the \r\n+connection.\r\n+                    </para>\r\n+                </listitem>\r\n             </itemizedlist>\n         </section>\n     </section>"}]}

