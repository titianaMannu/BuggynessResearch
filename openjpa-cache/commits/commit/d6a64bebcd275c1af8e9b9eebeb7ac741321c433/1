{"sha":"d6a64bebcd275c1af8e9b9eebeb7ac741321c433","node_id":"MDY6Q29tbWl0MjA2MzY0OmQ2YTY0YmViY2QyNzVjMWFmOGU5YjllZWJlYjdhYzc0MTMyMWM0MzM=","commit":{"author":{"name":"Mark Struberg","email":"struberg@apache.org","date":"2021-04-10T10:27:37Z"},"committer":{"name":"Mark Struberg","email":"struberg@apache.org","date":"2021-04-10T10:27:37Z"},"message":"OPENJPA-2866 Oracle GenerationType#IDENTITY support\n\nwe will now create a column definition\n\"GENERATED ALWAYS AS IDENTITY\"\nfor auto-increment columns.","tree":{"sha":"74098c8eaf90c66001d7813d83db568b4c3b2db8","url":"https://api.github.com/repos/apache/openjpa/git/trees/74098c8eaf90c66001d7813d83db568b4c3b2db8"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/d6a64bebcd275c1af8e9b9eebeb7ac741321c433","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/d6a64bebcd275c1af8e9b9eebeb7ac741321c433","html_url":"https://github.com/apache/openjpa/commit/d6a64bebcd275c1af8e9b9eebeb7ac741321c433","comments_url":"https://api.github.com/repos/apache/openjpa/commits/d6a64bebcd275c1af8e9b9eebeb7ac741321c433/comments","author":{"login":"struberg","id":79310,"node_id":"MDQ6VXNlcjc5MzEw","avatar_url":"https://avatars.githubusercontent.com/u/79310?v=4","gravatar_id":"","url":"https://api.github.com/users/struberg","html_url":"https://github.com/struberg","followers_url":"https://api.github.com/users/struberg/followers","following_url":"https://api.github.com/users/struberg/following{/other_user}","gists_url":"https://api.github.com/users/struberg/gists{/gist_id}","starred_url":"https://api.github.com/users/struberg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/struberg/subscriptions","organizations_url":"https://api.github.com/users/struberg/orgs","repos_url":"https://api.github.com/users/struberg/repos","events_url":"https://api.github.com/users/struberg/events{/privacy}","received_events_url":"https://api.github.com/users/struberg/received_events","type":"User","site_admin":false},"committer":{"login":"struberg","id":79310,"node_id":"MDQ6VXNlcjc5MzEw","avatar_url":"https://avatars.githubusercontent.com/u/79310?v=4","gravatar_id":"","url":"https://api.github.com/users/struberg","html_url":"https://github.com/struberg","followers_url":"https://api.github.com/users/struberg/followers","following_url":"https://api.github.com/users/struberg/following{/other_user}","gists_url":"https://api.github.com/users/struberg/gists{/gist_id}","starred_url":"https://api.github.com/users/struberg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/struberg/subscriptions","organizations_url":"https://api.github.com/users/struberg/orgs","repos_url":"https://api.github.com/users/struberg/repos","events_url":"https://api.github.com/users/struberg/events{/privacy}","received_events_url":"https://api.github.com/users/struberg/received_events","type":"User","site_admin":false},"parents":[{"sha":"2408ff7d9e4d8f16b29d3d393310680e6d93316f","url":"https://api.github.com/repos/apache/openjpa/commits/2408ff7d9e4d8f16b29d3d393310680e6d93316f","html_url":"https://github.com/apache/openjpa/commit/2408ff7d9e4d8f16b29d3d393310680e6d93316f"}],"stats":{"total":40,"additions":40,"deletions":0},"files":[{"sha":"8109937e3534a2a179aeda83d772de40084ee346","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java","status":"modified","additions":40,"deletions":0,"changes":40,"blob_url":"https://github.com/apache/openjpa/blob/d6a64bebcd275c1af8e9b9eebeb7ac741321c433/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/d6a64bebcd275c1af8e9b9eebeb7ac741321c433/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java?ref=d6a64bebcd275c1af8e9b9eebeb7ac741321c433","patch":"@@ -58,6 +58,7 @@\n import org.apache.openjpa.jdbc.schema.Index;\n import org.apache.openjpa.jdbc.schema.PrimaryKey;\n import org.apache.openjpa.jdbc.schema.Table;\n+import org.apache.openjpa.jdbc.schema.Unique;\n import org.apache.openjpa.lib.jdbc.DelegatingDatabaseMetaData;\n import org.apache.openjpa.lib.jdbc.DelegatingPreparedStatement;\n import org.apache.openjpa.lib.util.J2DoPrivHelper;\n@@ -180,6 +181,10 @@ public OracleDictionary() {\n         maxEmbeddedClobSize = 4000;\n         inClauseLimit = 1000;\n \n+        // support auto increment columns javax.persistence.GenerationType#IDENTITY\n+        supportsAutoAssign = true;\n+        autoAssignClause = \"GENERATED ALWAYS AS IDENTITY\";\n+\n         supportsDeferredConstraints = true;\n         supportsLockingWithDistinctClause = false;\n         supportsSelectStartIndex = true;\n@@ -397,6 +402,41 @@ public boolean supportsLocking(Select sel) {\n             sel.getEndIndex(), sel.isDistinct(), sel.getOrdering());\n     }\n \n+    /**\n+     * Return the declaration SQL for the given column. This method is used\n+     * for each column from within {@link #getCreateTableSQL} and\n+     * {@link #getAddColumnSQL}.\n+     *\n+     * Oracle needs a bit special handling for auto assign columns.\n+     * For those (\"GENERATED ALWAYS AS IDENTITY\") we must not generate NOT NULL\n+     * as this would create invalid statements for Oracle.\n+     */\n+    @Override\n+    protected String getDeclareColumnSQL(Column col, boolean alter) {\n+        StringBuilder buf = new StringBuilder();\n+        String columnName = checkNameLength(toDBName(col.getIdentifier()), maxColumnNameLength,\n+                \"long-column-name\");\n+        buf.append(columnName).append(\" \");\n+        buf.append(getTypeName(col));\n+\n+        // can't add constraints to a column we're adding after table\n+        // creation, cause some data might already be inserted\n+        if (!alter\n+            && !col.isAutoAssigned()) { // this is actually the only 'special' case for oracle\n+            if (col.getDefaultString() != null && !col.isAutoAssigned())\n+                buf.append(\" DEFAULT \").append(col.getDefaultString());\n+            if (col.isNotNull() || (!supportsNullUniqueColumn && col.hasConstraint(Unique.class)))\n+                buf.append(\" NOT NULL\");\n+        }\n+        if (col.isAutoAssigned()) {\n+            if (!supportsAutoAssign)\n+                log.warn(_loc.get(\"invalid-autoassign\", platform, col));\n+            else if (autoAssignClause != null)\n+                buf.append(\" \").append(autoAssignClause);\n+        }\n+        return buf.toString();\n+    }\n+\n     @Override\n     protected SQLBuffer getSelects(Select sel, boolean distinctIdentifiers,\n         boolean forUpdate) {"}]}

