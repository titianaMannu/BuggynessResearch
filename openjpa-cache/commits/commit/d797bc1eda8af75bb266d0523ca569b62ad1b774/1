{"sha":"d797bc1eda8af75bb266d0523ca569b62ad1b774","node_id":"MDY6Q29tbWl0MjA2MzY0OmQ3OTdiYzFlZGE4YWY3NWJiMjY2ZDA1MjNjYTU2OWI2MmFkMWI3NzQ=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-17T22:10:18Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-17T22:10:18Z"},"message":"Support default projection for untyped result class, if possible.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@881566 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"199e52ba6de6aebaa462c6ac3dcea9e73d5704c0","url":"https://api.github.com/repos/apache/openjpa/git/trees/199e52ba6de6aebaa462c6ac3dcea9e73d5704c0"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/d797bc1eda8af75bb266d0523ca569b62ad1b774","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/d797bc1eda8af75bb266d0523ca569b62ad1b774","html_url":"https://github.com/apache/openjpa/commit/d797bc1eda8af75bb266d0523ca569b62ad1b774","comments_url":"https://api.github.com/repos/apache/openjpa/commits/d797bc1eda8af75bb266d0523ca569b62ad1b774/comments","author":null,"committer":null,"parents":[{"sha":"be2ff16fe3ac83e54723daa4452dc71a6c1e2a14","url":"https://api.github.com/repos/apache/openjpa/commits/be2ff16fe3ac83e54723daa4452dc71a6c1e2a14","html_url":"https://github.com/apache/openjpa/commit/be2ff16fe3ac83e54723daa4452dc71a6c1e2a14"}],"stats":{"total":20,"additions":19,"deletions":1},"files":[{"sha":"ec2633177f19df12e4e98bf4c5f0c288441722af","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestTypesafeCriteria.java","status":"modified","additions":16,"deletions":0,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/d797bc1eda8af75bb266d0523ca569b62ad1b774/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestTypesafeCriteria.java","raw_url":"https://github.com/apache/openjpa/raw/d797bc1eda8af75bb266d0523ca569b62ad1b774/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestTypesafeCriteria.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestTypesafeCriteria.java?ref=d797bc1eda8af75bb266d0523ca569b62ad1b774","patch":"@@ -39,6 +39,7 @@\n import javax.persistence.criteria.Selection;\n import javax.persistence.criteria.SetJoin;\n import javax.persistence.criteria.Subquery;\n+import javax.persistence.metamodel.EntityType;\n \n import org.apache.openjpa.persistence.test.AllowFailure;\n \n@@ -1389,4 +1390,19 @@ public void testEmptyOr() {\n                 cb.isTrue(cb.disjunction())));\n         em.createQuery(c).getResultList();\n     }\n+    \n+    public void testDefaultProjectionWithUntypedResult() {\n+        CriteriaQuery cquery = cb.createQuery(); \n+        Root<Customer> customer = cquery.from(Customer.class);\n+\n+        //Get Metamodel from Root\n+        EntityType<Customer> Customer_ = customer.getModel();\n+\n+        cquery.where(cb.equal(\n+                customer.get(Customer_.getSingularAttribute(\"name\", String.class)), \n+                cb.nullLiteral(String.class)));\n+\n+        Query q = em.createQuery(cquery);\n+\n+    }\n }"},{"sha":"336b3681fb3f6975ce3875ad94007a338f648254","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaQueryImpl.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/d797bc1eda8af75bb266d0523ca569b62ad1b774/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaQueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/d797bc1eda8af75bb266d0523ca569b62ad1b774/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaQueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaQueryImpl.java?ref=d797bc1eda8af75bb266d0523ca569b62ad1b774","patch":"@@ -594,7 +594,9 @@ boolean isMultiselect() {\n     \n     protected boolean isDefaultProjection() {\n         if (_selections == null) {\n-            return getRoots().size() == 1 && getRoot().getModel().getJavaType() == _resultClass;\n+            return getRoots().size() == 1 \n+               && (getRoot().getModel().getJavaType() == _resultClass ||\n+                   _resultClass == Object.class);\n         } \n         if (_selections.size() != 1) {\n             return false;"}]}

