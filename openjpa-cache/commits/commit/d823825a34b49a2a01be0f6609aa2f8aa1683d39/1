{"sha":"d823825a34b49a2a01be0f6609aa2f8aa1683d39","node_id":"MDY6Q29tbWl0MjA2MzY0OmQ4MjM4MjVhMzRiNDlhMmEwMWJlMGY2NjA5YWEyZjhhYTE2ODNkMzk=","commit":{"author":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-12-15T00:55:14Z"},"committer":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-12-15T00:55:14Z"},"message":"Allow configurable set of known unproxyable types.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@487410 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e0ef0e96ad6f8ce419c40226907f9e7015b083f0","url":"https://api.github.com/repos/apache/openjpa/git/trees/e0ef0e96ad6f8ce419c40226907f9e7015b083f0"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/d823825a34b49a2a01be0f6609aa2f8aa1683d39","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/d823825a34b49a2a01be0f6609aa2f8aa1683d39","html_url":"https://github.com/apache/openjpa/commit/d823825a34b49a2a01be0f6609aa2f8aa1683d39","comments_url":"https://api.github.com/repos/apache/openjpa/commits/d823825a34b49a2a01be0f6609aa2f8aa1683d39/comments","author":null,"committer":null,"parents":[{"sha":"847b33aa6eaba2ea1f8ccd1009baccea79b08f22","url":"https://api.github.com/repos/apache/openjpa/commits/847b33aa6eaba2ea1f8ccd1009baccea79b08f22","html_url":"https://github.com/apache/openjpa/commit/847b33aa6eaba2ea1f8ccd1009baccea79b08f22"}],"stats":{"total":40,"additions":39,"deletions":1},"files":[{"sha":"9a2d75ceff65515dfed3a5d4df58a9f72cc2cbbb","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyManagerImpl.java","status":"modified","additions":39,"deletions":1,"changes":40,"blob_url":"https://github.com/apache/openjpa/blob/d823825a34b49a2a01be0f6609aa2f8aa1683d39/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/d823825a34b49a2a01be0f6609aa2f8aa1683d39/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyManagerImpl.java?ref=d823825a34b49a2a01be0f6609aa2f8aa1683d39","patch":"@@ -93,10 +93,15 @@\n         _stdMaps.put(SortedMap.class, TreeMap.class);\n     }\n \n+    private final Set _unproxyable = new HashSet();\n     private final Map _proxies = new ConcurrentHashMap();\n     private boolean _trackChanges = true;\n     private boolean _assertType = false;\n \n+    public ProxyManagerImpl() {\n+        _unproxyable.add(TimeZone.class.getName());\n+    }\n+\n     /**\n      * Whether proxies produced by this factory will use {@link ChangeTracker}s\n      * to try to cut down on data store operations at the cost of some extra\n@@ -133,6 +138,24 @@ public void setAssertAllowedType(boolean assertType) {\n         _assertType = assertType;\n     }\n \n+    /**\n+     * Return a mutable view of class names we know cannot be proxied  \n+     * correctly by this manager.\n+     */\n+    public Collection getUnproxyable() {\n+        return _unproxyable;\n+    }\n+\n+    /**\n+     * Provided for auto-configuration.  Add the given semicolon-separated\n+     * class names to the set of class names we know cannot be proxied correctly\n+     * by this manager.\n+     */\n+    public void setUnproxyable(String clsNames) {\n+        if (clsNames != null)\n+            _unproxyable.addAll(Arrays.asList(Strings.split(clsNames, \";\", 0)));\n+    }\n+\n     public Object copyArray(Object orig) {\n         if (orig == null)\n             return null;\n@@ -398,8 +421,11 @@ private ProxyCalendar getFactoryProxyCalendar(Class type) {\n      * Return the cached factory proxy for the given bean type.\n      */\n     private ProxyBean getFactoryProxyBean(Object orig) {\n-        // we don't lock here; ok if two proxies get generated for same type\n         Class type = orig.getClass();\n+        if (isUnproxyable(type))\n+            return null;\n+\n+        // we don't lock here; ok if two proxies get generated for same type\n         ProxyBean proxy = (ProxyBean) _proxies.get(type);\n         if (proxy == null && !_proxies.containsKey(type)) {\n             ClassLoader l = getMostDerivedLoader(type, ProxyBean.class);\n@@ -417,6 +443,18 @@ private ProxyBean getFactoryProxyBean(Object orig) {\n         return proxy;\n     }\n \n+    /**\n+     * Return whether the given type is known to be unproxyable.\n+     */\n+    protected boolean isUnproxyable(Class type) {\n+        for (; type != null && type != Object.class; \n+            type = type.getSuperclass()) {\n+            if (_unproxyable.contains(type.getName()))\n+                return true;\n+        }\n+        return false;\n+    }\n+\n     /**\n      * Load the proxy class generated at build time for the given type,\n      * returning null if none exists."}]}

