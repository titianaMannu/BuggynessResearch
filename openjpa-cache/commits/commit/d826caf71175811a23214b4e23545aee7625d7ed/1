{"sha":"d826caf71175811a23214b4e23545aee7625d7ed","node_id":"MDY6Q29tbWl0MjA2MzY0OmQ4MjZjYWY3MTE3NTgxMWEyMzIxNGI0ZTIzNTQ1YWVlNzYyNWQ3ZWQ=","commit":{"author":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-02-02T21:12:35Z"},"committer":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-02-02T21:12:35Z"},"message":"OPENJPA-119.  Needed to allow the EM.clear operation to perform without doing an implicit flush.  Introduced a new boolean\nparameter to indicate whether a flush is desired or not.  This allows both the new (correct) behaviour for JPA as well as the \nold behaviour for other persistence personalities (JDO, etc).  I also introduced a new testcase for this scenario, and updated \na couple of other tests.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@502751 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b60eed15cef1be6b362a6b7b53dca10ef5fa8f9a","url":"https://api.github.com/repos/apache/openjpa/git/trees/b60eed15cef1be6b362a6b7b53dca10ef5fa8f9a"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/d826caf71175811a23214b4e23545aee7625d7ed","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/d826caf71175811a23214b4e23545aee7625d7ed","html_url":"https://github.com/apache/openjpa/commit/d826caf71175811a23214b4e23545aee7625d7ed","comments_url":"https://api.github.com/repos/apache/openjpa/commits/d826caf71175811a23214b4e23545aee7625d7ed/comments","author":null,"committer":null,"parents":[{"sha":"9b78cd5441f1e550ad5a9c074dadeade1f16ed40","url":"https://api.github.com/repos/apache/openjpa/commits/9b78cd5441f1e550ad5a9c074dadeade1f16ed40","html_url":"https://github.com/apache/openjpa/commit/9b78cd5441f1e550ad5a9c074dadeade1f16ed40"}],"stats":{"total":160,"additions":136,"deletions":24},"files":[{"sha":"9ae336108bde4309948be2ecbdff608535671aa0","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/d826caf71175811a23214b4e23545aee7625d7ed/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","raw_url":"https://github.com/apache/openjpa/raw/d826caf71175811a23214b4e23545aee7625d7ed/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java?ref=d826caf71175811a23214b4e23545aee7625d7ed","patch":"@@ -287,6 +287,8 @@ public void close() {\n             Broker broker;\n             for (Iterator itr = _brokers.iterator(); itr.hasNext();) {\n                 broker = (Broker) itr.next();\n+                /* Check for null here because _brokers is a weak reference\n+                collection */\n                 if ((broker != null) && (!broker.isClosed()))\n                     broker.close();\n             }"},{"sha":"18d716efdc485fcd6b475dcfcb6e2a2ffdc89916","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Broker.java","status":"modified","additions":12,"deletions":1,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/d826caf71175811a23214b4e23545aee7625d7ed/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Broker.java","raw_url":"https://github.com/apache/openjpa/raw/d826caf71175811a23214b4e23545aee7625d7ed/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Broker.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Broker.java?ref=d826caf71175811a23214b4e23545aee7625d7ed","patch":"@@ -473,10 +473,21 @@ public void setImplicitBehavior(OpCallbacks call,\n     public void evictAll(Extent extent, OpCallbacks call);\n \n     /**\n-     * Detach all objects in place.\n+     * Detach all objects in place.  A flush will be performed before\n+     * detaching the entities.\n      */\n     public void detachAll(OpCallbacks call);\n \n+    /**\n+     * Detach all objects in place, with the option of performing a\n+     * flush before doing the detachment.\n+     * @param call Persistence operation callbacks\n+     * @param flush boolean value to indicate whether to perform a\n+     * flush before detaching the entities (true, do the flush;\n+     * false, don't do the flush)\n+     */\n+    public void detachAll(OpCallbacks call, boolean flush);\n+\n     /**\n      * Detach the specified object from the broker.\n      *"},{"sha":"0aca961468e57b2d4b940d79c505d62d809dc85e","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","status":"modified","additions":8,"deletions":1,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/d826caf71175811a23214b4e23545aee7625d7ed/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/d826caf71175811a23214b4e23545aee7625d7ed/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java?ref=d826caf71175811a23214b4e23545aee7625d7ed","patch":"@@ -3088,9 +3088,16 @@ public Object detach(Object obj, OpCallbacks call) {\n     }\n \n     public void detachAll(OpCallbacks call) {\n+        detachAll(call, true);\n+    }\n+\n+    public void detachAll(OpCallbacks call, boolean flush) {\n         beginOperation(true);\n         try {\n-            if ((_flags & FLAG_FLUSH_REQUIRED) != 0)\n+            /* If a flush is desired (based on input parm), then check if the\n+             * \"dirty\" flag is set before calling flush().\n+             */\n+            if ((flush) && ((_flags & FLAG_FLUSH_REQUIRED) != 0))\n                 flush();\n             detachAllInternal(call);\n         } catch (OpenJPAException ke) {"},{"sha":"1eb597a5df05271350e286131a29f0b4274ae722","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBroker.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/d826caf71175811a23214b4e23545aee7625d7ed/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBroker.java","raw_url":"https://github.com/apache/openjpa/raw/d826caf71175811a23214b4e23545aee7625d7ed/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBroker.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBroker.java?ref=d826caf71175811a23214b4e23545aee7625d7ed","patch":"@@ -1115,6 +1115,14 @@ public void detachAll(OpCallbacks call) {\n         }\n     }\n \n+    public void detachAll(OpCallbacks call, boolean flush) {\n+        try {\n+            _broker.detachAll(call, flush);\n+        } catch (RuntimeException re) {\n+            throw translate(re);\n+        }\n+    }\n+\n     public Object attach(Object obj, boolean copyNew, OpCallbacks call) {\n         try {\n             return _broker.attach(obj, copyNew, call);"},{"sha":"46c895d64236a1eecba3c2809f6618550bc79d91","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestEntityManagerClear.java","status":"added","additions":104,"deletions":0,"changes":104,"blob_url":"https://github.com/apache/openjpa/blob/d826caf71175811a23214b4e23545aee7625d7ed/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestEntityManagerClear.java","raw_url":"https://github.com/apache/openjpa/raw/d826caf71175811a23214b4e23545aee7625d7ed/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestEntityManagerClear.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestEntityManagerClear.java?ref=d826caf71175811a23214b4e23545aee7625d7ed","patch":"@@ -0,0 +1,104 @@\n+/*\n+ * Copyright 2006 The Apache Software Foundation.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.openjpa.persistence.simple;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import javax.persistence.Persistence;\n+\n+import junit.framework.TestCase;\n+import junit.textui.TestRunner;\n+\n+/**\n+ * Test case to ensure that the proper JPA clear semantics are processed.\n+ *\n+ * @author Kevin Sutter\n+ */\n+public class TestEntityManagerClear\n+    extends TestCase {\n+\n+    private EntityManagerFactory emf;\n+    private EntityManager em;\n+\n+    public void setUp() {\n+        Map props = new HashMap(System.getProperties());\n+        props.put(\"openjpa.MetaDataFactory\",\n+            \"jpa(Types=\" + AllFieldTypes.class.getName() + \")\");\n+        emf = Persistence.createEntityManagerFactory(\"test\", props);\n+    }\n+\n+    public void tearDown() {\n+        if (emf == null)\n+            return;\n+        try {\n+            EntityManager em = emf.createEntityManager();\n+            em.getTransaction().begin();\n+            em.createQuery(\"delete from AllFieldTypes\").executeUpdate();\n+            em.getTransaction().commit();\n+            em.close();\n+            emf.close();\n+        } catch (Exception e) {\n+        }\n+    }\n+    public void testClear() {\n+        try {\n+            // Create EntityManager and Start a transaction (1)\n+            em = emf.createEntityManager();\n+            em.getTransaction().begin();\n+\n+            // Insert a new object and flush\n+            AllFieldTypes testObject1 = new AllFieldTypes();\n+            testObject1.setStringField(\"my test object1\");\n+            em.persist(testObject1);\n+            em.flush();\n+\n+            // Clear the PC for new object 2\n+            AllFieldTypes testObject2 = new AllFieldTypes();\n+            testObject1.setStringField(\"my test object2\");\n+            em.persist(testObject2);\n+            em.clear();\n+\n+            // Commit the transaction (only object 1 should be in database)\n+            em.getTransaction().commit();\n+\n+            // Start a new transaction\n+            em.getTransaction().begin();\n+\n+            // Attempt retrieve of Object1 from previous PC (should exist)\n+            assertEquals(1, em.createQuery\n+                    (\"select x from AllFieldTypes x where x.stringField = 'my test object1'\").\n+                    getResultList().size());\n+\n+            // Attempt retrieve of Object2 from previous PC (should not exist)\n+            assertEquals(0, em.createQuery\n+                    (\"select x from AllFieldTypes x where x.stringField = 'my test object2'\").\n+                    getResultList().size());\n+\n+            // Rollback the transaction and close everything\n+            em.getTransaction().rollback();\n+            em.close();\n+        } catch (Exception ex) {\n+            fail(\"Unexpected Exception ex = \" + ex);\n+        }\n+    }\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(TestEntityManagerClear.class);\n+    }\n+}\n+"},{"sha":"9b61f5178f18419a6d563b370951f8b6890ed08f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestEntityManagerMethodsThrowAfterClose.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/d826caf71175811a23214b4e23545aee7625d7ed/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestEntityManagerMethodsThrowAfterClose.java","raw_url":"https://github.com/apache/openjpa/raw/d826caf71175811a23214b4e23545aee7625d7ed/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestEntityManagerMethodsThrowAfterClose.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestEntityManagerMethodsThrowAfterClose.java?ref=d826caf71175811a23214b4e23545aee7625d7ed","patch":"@@ -271,7 +271,7 @@ public void testCloseAfterClose() {\n     }\n \n     public static void main(String[] args) {\n-        TestRunner.run(TestPersistence.class);\n+        TestRunner.run(TestEntityManagerMethodsThrowAfterClose.class);\n     }\n }\n "},{"sha":"62063dd359f755b860c24fe66dd57010f20f8dcf","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestPersistence.java","status":"modified","additions":0,"deletions":20,"changes":20,"blob_url":"https://github.com/apache/openjpa/blob/d826caf71175811a23214b4e23545aee7625d7ed/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestPersistence.java","raw_url":"https://github.com/apache/openjpa/raw/d826caf71175811a23214b4e23545aee7625d7ed/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestPersistence.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestPersistence.java?ref=d826caf71175811a23214b4e23545aee7625d7ed","patch":"@@ -107,26 +107,6 @@ public void testQuery() {\n         em.close();\r\n     }\r\n \r\n-    /**\r\n-     * Ensures that an IllegalStateException is thrown if getDelegate is called\r\n-     * after closing the EntityManager.\r\n-     */\r\n-    public void testGetDelegateAfterClose() {\r\n-        EntityManager em = emf.createEntityManager();\r\n-\r\n-        em.close();\r\n-\r\n-        try {\r\n-            Object o = em.getDelegate();\r\n-            fail();\r\n-        }\r\n-        catch(IllegalStateException ise) {\r\n-            /*\r\n-             * An IllegalStateException is expected. Nothing to do here.\r\n-             */\r\n-        }\r\n-    }\r\n-\r\n     public static void main(String[] args) {\r\n         TestRunner.run(TestPersistence.class);\r\n     }\r"},{"sha":"61632b7a968c372bfa8274af461a57d8abd58564","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/d826caf71175811a23214b4e23545aee7625d7ed/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/d826caf71175811a23214b4e23545aee7625d7ed/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java?ref=d826caf71175811a23214b4e23545aee7625d7ed","patch":"@@ -853,7 +853,7 @@ static int toFlushBeforeQueries(FlushModeType flushMode) {\n \r\n     public void clear() {\r\n         assertNotCloseInvoked();\r\n-        _broker.detachAll(this);\r\n+        _broker.detachAll(this, false);\r\n     }\r\n \r\n     public Object getDelegate() {\r"}]}

