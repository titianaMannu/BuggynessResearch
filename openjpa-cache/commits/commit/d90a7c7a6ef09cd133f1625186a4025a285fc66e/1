{"sha":"d90a7c7a6ef09cd133f1625186a4025a285fc66e","node_id":"MDY6Q29tbWl0MjA2MzY0OmQ5MGE3YzdhNmVmMDljZDEzM2YxNjI1MTg2YTQwMjVhMjg1ZmM2NmU=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-05-11T18:39:57Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-05-11T18:39:57Z"},"message":"OPENJPA-231. Committing on behalf of Qin Feng.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.1.x@655354 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"dd0f2d20461d64f8712c1f4458b7a025bafa39a7","url":"https://api.github.com/repos/apache/openjpa/git/trees/dd0f2d20461d64f8712c1f4458b7a025bafa39a7"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/d90a7c7a6ef09cd133f1625186a4025a285fc66e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/d90a7c7a6ef09cd133f1625186a4025a285fc66e","html_url":"https://github.com/apache/openjpa/commit/d90a7c7a6ef09cd133f1625186a4025a285fc66e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/d90a7c7a6ef09cd133f1625186a4025a285fc66e/comments","author":null,"committer":null,"parents":[{"sha":"ee170672b1c1d04321e2350f01f8ff17974e6a5c","url":"https://api.github.com/repos/apache/openjpa/commits/ee170672b1c1d04321e2350f01f8ff17974e6a5c","html_url":"https://github.com/apache/openjpa/commit/ee170672b1c1d04321e2350f01f8ff17974e6a5c"}],"stats":{"total":504,"additions":503,"deletions":1},"files":[{"sha":"fa9e0f2a78081749d78b1aadbce325014746b8f4","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AttachStrategy.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/d90a7c7a6ef09cd133f1625186a4025a285fc66e/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AttachStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/d90a7c7a6ef09cd133f1625186a4025a285fc66e/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AttachStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AttachStrategy.java?ref=d90a7c7a6ef09cd133f1625186a4025a285fc66e","patch":"@@ -270,7 +270,8 @@ protected Object getReference(AttachManager manager, Object toAttach,\n         if (toAttach == null)\n             return null;\n \n-        if (manager.getBroker().isPersistent(toAttach)) {\n+        if (manager.getBroker().isNew(toAttach)\n+            || manager.getBroker().isPersistent(toAttach)) {\n             return toAttach;\n         } else if (manager.getBroker().isDetached(toAttach)) {\n             Object oid = manager.getDetachedObjectId(toAttach);"},{"sha":"3f1492a5fa7307b9e1d7f9c18d55d952dfffe451","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/TestNoCascadeOneToManyMerge.java","status":"added","additions":126,"deletions":0,"changes":126,"blob_url":"https://github.com/apache/openjpa/blob/d90a7c7a6ef09cd133f1625186a4025a285fc66e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/TestNoCascadeOneToManyMerge.java","raw_url":"https://github.com/apache/openjpa/raw/d90a7c7a6ef09cd133f1625186a4025a285fc66e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/TestNoCascadeOneToManyMerge.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/TestNoCascadeOneToManyMerge.java?ref=d90a7c7a6ef09cd133f1625186a4025a285fc66e","patch":"@@ -0,0 +1,126 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.detachment;\n+\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+import org.apache.openjpa.persistence.detachment.featureSelection.*;\n+\n+import javax.persistence.EntityManager;\n+\n+import junit.textui.TestRunner;\n+\n+/**\n+ * Test merge case for 3 level one to many relation entities.\n+ * SimpleA -> *SimpleB -> *SimpleC. SimpleC has no CascadeType.MERGE annotation.\n+ *\n+ */\n+public class TestNoCascadeOneToManyMerge extends SingleEMFTestCase {\n+    private int a_id;\n+\n+    public void setUp() {\n+        setUp(SimpleA.class, SimpleRef.class, SimpleB.class, SimpleC.class, CLEAR_TABLES);\n+        createEntities();\n+    }\n+\n+    private void createEntities() {\n+        SimpleA a = new SimpleA();\n+        a.setName(\"a1\");\n+\n+        SimpleB b = new SimpleB();\n+        b.setName(\"b1\");\n+        a.addB(b);\n+\n+        SimpleC c1 = new SimpleC();\n+        c1.setName(\"c1\");\n+        b.addC(c1);\n+\n+        SimpleC c2 = new SimpleC();\n+        c2.setName(\"c2\");\n+        b.addC(c2);\n+\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.persist(a);\n+        em.getTransaction().commit();\n+        em.close();\n+        a_id = a.getId();\n+    }\n+\n+    public void testMergeAttached () {\n+        EntityManager em = emf.createEntityManager();\n+        SimpleA a = em.find(SimpleA.class, a_id);\n+        assertNotNull(a);\n+\n+        SimpleB b = new SimpleB();\n+        b.setName(\"b2\");\n+        a.addB(b);\n+\n+        SimpleC c = new SimpleC();\n+        c.setName(\"c3\");\n+        b.addC(c);\n+\n+        c = new SimpleC();\n+        c.setName(\"c4\");\n+        b.addC(c);\n+\n+        em.getTransaction().begin();\n+        a = em.merge (a);\n+        em.getTransaction().commit ();\n+        em.close();\n+\n+        assertEquals(2, a.getBs().size());\n+    }\n+\n+    /**\n+     * This is the case for openjpa-231.\n+     * When \"B\" and \"C\" are both newly added to a detached \"A\" and then merge \"A\",\n+     * it couldn't find \"B\" because previous code assume B was detached.\n+     */\n+    public void testMergeDetached () {\n+        EntityManager em = emf.createEntityManager();\n+        SimpleA a = em.find(SimpleA.class, a_id);\n+        assertNotNull(a);\n+        assertEquals(1, a.getBs().size());\n+        em.close(); //detach a\n+\n+        SimpleB b = new SimpleB();\n+        b.setName(\"b2\");\n+        a.addB(b);\n+\n+        SimpleC c = new SimpleC();\n+        c.setName(\"c3\");\n+        b.addC(c);\n+\n+        c = new SimpleC();\n+        c.setName(\"c4\");\n+        b.addC(c);\n+\n+        em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        a = em.merge(a);\n+        em.getTransaction().commit();\n+        em.close();\n+\n+        assertEquals(2, a.getBs().size());\n+    }\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(TestNoCascadeOneToManyMerge.class);\n+    }\n+}"},{"sha":"a50fd0985c9c8cdebc9920744d9e9f239bbd9d67","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/TestNoCascadeOneToOneMerge.java","status":"added","additions":147,"deletions":0,"changes":147,"blob_url":"https://github.com/apache/openjpa/blob/d90a7c7a6ef09cd133f1625186a4025a285fc66e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/TestNoCascadeOneToOneMerge.java","raw_url":"https://github.com/apache/openjpa/raw/d90a7c7a6ef09cd133f1625186a4025a285fc66e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/TestNoCascadeOneToOneMerge.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/TestNoCascadeOneToOneMerge.java?ref=d90a7c7a6ef09cd133f1625186a4025a285fc66e","patch":"@@ -0,0 +1,147 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.openjpa.persistence.detachment;\n+\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+import org.apache.openjpa.persistence.detachment.featureSelection.*;\n+\n+import javax.persistence.EntityManager;\n+\n+import junit.textui.TestRunner;\n+\n+/**\n+ * Tests merging an entity having a unidirectional one-to-one relation and\n+ * cascade=none.\n+ *\n+ * @author Gokhan Ergul\n+ */\n+public class TestNoCascadeOneToOneMerge\n+    extends SingleEMFTestCase {\n+\n+    private int a_id;\n+    private int b1_id;\n+    private int b2_id;\n+\n+    public void setUp() {\n+        setUp(SimpleA.class, SimpleRef.class, SimpleB.class, SimpleC.class, CLEAR_TABLES);\n+        createEntities();\n+    }\n+\n+    private void createEntities() {\n+        SimpleRef b1 = new SimpleRef();\n+        b1.setName(\"b1-name\");\n+\n+        SimpleRef b2 = new SimpleRef();\n+        b2.setName(\"b2-name\");\n+\n+        SimpleA a = new SimpleA();\n+        a.setName(\"a-name\");\n+        a.setRef(b1);\n+\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.persist(b1);\n+        em.persist(b2);\n+        em.persist(a);\n+        em.getTransaction().commit();\n+        em.close();\n+        a_id = a.getId();\n+        b1_id = b1.getId();\n+        b2_id = b2.getId();\n+    }\n+\n+    public void testMergeAllAttached () {\n+        EntityManager em = emf.createEntityManager();\n+        SimpleA a = em.find(SimpleA.class, a_id);\n+        SimpleRef b2 = em.find(SimpleRef.class, b2_id);\n+        assertNotNull(a);\n+        assertNotNull(b2);\n+\n+        // change a.b from b1 to b2 and merge\n+        a.setRef(b2);\n+\n+        em.getTransaction().begin();\n+        em.merge(a);\n+        em.getTransaction().commit();\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        a = em.find(SimpleA.class, a_id);\n+        em.close();\n+        assertNotNull(a);\n+        assertEquals(b2_id, a.getRef().getId());\n+    }\n+\n+    public void testMergeRefAttached () {\n+        EntityManager em = emf.createEntityManager();\n+        SimpleA a = em.find(SimpleA.class, a_id);\n+        assertNotNull(a);\n+        em.close(); // detach a only\n+\n+        em = emf.createEntityManager();\n+        SimpleRef b2 = em.find(SimpleRef.class, b2_id);\n+        assertNotNull(b2);\n+        // do not detach b2\n+\n+        // change a.b from b1 to b2 and merge\n+        a.setRef(b2);\n+\n+        em.getTransaction().begin();\n+        em.merge(a);\n+        em.getTransaction().commit();\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        a = em.find(SimpleA.class, a_id);\n+        em.close();\n+        assertNotNull(a);\n+        assertEquals(b2_id, a.getRef().getId());\n+    }\n+\n+    public void testMergeDetached () {\n+        EntityManager em = emf.createEntityManager();\n+        SimpleA a = em.find(SimpleA.class, a_id);\n+        SimpleRef b1 = em.find(SimpleRef.class, b1_id);\n+        SimpleRef b2 = em.find(SimpleRef.class, b2_id);\n+        assertNotNull(a);\n+        assertNotNull(b1);\n+        assertNotNull(b2);\n+        em.close(); // detach all\n+\n+        // change a.b from b1 to b2 and merge\n+        a.setRef(b2);\n+\n+        em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.merge(a);\n+        em.getTransaction().commit();\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        a = em.find(SimpleA.class, a_id);\n+        em.close();\n+        assertNotNull(a);\n+        assertEquals(b2_id, a.getRef().getId());\n+    }\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(TestNoCascadeOneToOneMerge.class);\n+    }\n+}"},{"sha":"381971285cdd382ea31879adb2c63ac902824996","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/featureSelection/SimpleA.java","status":"added","additions":70,"deletions":0,"changes":70,"blob_url":"https://github.com/apache/openjpa/blob/d90a7c7a6ef09cd133f1625186a4025a285fc66e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/featureSelection/SimpleA.java","raw_url":"https://github.com/apache/openjpa/raw/d90a7c7a6ef09cd133f1625186a4025a285fc66e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/featureSelection/SimpleA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/featureSelection/SimpleA.java?ref=d90a7c7a6ef09cd133f1625186a4025a285fc66e","patch":"@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.openjpa.persistence.detachment.featureSelection;\n+\n+import javax.persistence.*;\n+import java.util.Set;\n+import java.util.LinkedHashSet;\n+\n+@Entity\n+public class SimpleA {\n+\n+    @Id\n+    @GeneratedValue\n+    protected int a_id;\n+\n+    @Basic\n+    protected String name;\n+\n+    @OneToOne\n+    protected SimpleRef ref;\n+\n+    @OneToMany(cascade=CascadeType.ALL, mappedBy=\"parent\")\n+    protected Set<SimpleB> b_set = new LinkedHashSet<SimpleB>();\n+\n+    public int getId() {\n+        return a_id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public SimpleRef getRef() {\n+        return ref;\n+    }\n+\n+    public void setRef(SimpleRef ref) {\n+        this.ref = ref;\n+    }\n+\n+    public void addB(SimpleB b) {\n+        b_set.add(b);\n+        b.setParent(this);\n+    }\n+\n+    public Set<SimpleB> getBs() {\n+       return b_set;\n+    }\n+}"},{"sha":"6d6b22d779b08a513b4bfc52e163c5b2653b0034","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/featureSelection/SimpleB.java","status":"added","additions":71,"deletions":0,"changes":71,"blob_url":"https://github.com/apache/openjpa/blob/d90a7c7a6ef09cd133f1625186a4025a285fc66e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/featureSelection/SimpleB.java","raw_url":"https://github.com/apache/openjpa/raw/d90a7c7a6ef09cd133f1625186a4025a285fc66e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/featureSelection/SimpleB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/featureSelection/SimpleB.java?ref=d90a7c7a6ef09cd133f1625186a4025a285fc66e","patch":"@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.openjpa.persistence.detachment.featureSelection;\n+\n+import javax.persistence.*;\n+import java.util.Set;\n+import java.util.LinkedHashSet;\n+\n+@Entity\n+public class SimpleB {\n+\n+    @Id\n+    @GeneratedValue\n+    protected int b_id;\n+\n+    @Basic\n+    protected String name;\n+\n+    @ManyToOne\n+    @JoinColumn(name=\"A_ID\", referencedColumnName=\"A_ID\", nullable = false, updatable = false)\n+    protected SimpleA parent;\n+\n+    @OneToMany(cascade=CascadeType.ALL, mappedBy=\"parent\")\n+    protected Set<SimpleC> c_set  = new LinkedHashSet<SimpleC>();\n+\n+    public int getId() {\n+        return b_id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public SimpleA getParent() {\n+       return parent;\n+    }\n+\n+    public void setParent(SimpleA a) {\n+       this.parent = a;\n+    }\n+\n+    public void addC (SimpleC c) {\n+        c_set.add (c);\n+        c.setParent(this);\n+    }\n+\n+    public Set<SimpleC> getCs() {\n+       return c_set;\n+    }\n+}"},{"sha":"11ff988b01839b85aa6a799484dfc4a9616f0663","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/featureSelection/SimpleC.java","status":"added","additions":39,"deletions":0,"changes":39,"blob_url":"https://github.com/apache/openjpa/blob/d90a7c7a6ef09cd133f1625186a4025a285fc66e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/featureSelection/SimpleC.java","raw_url":"https://github.com/apache/openjpa/raw/d90a7c7a6ef09cd133f1625186a4025a285fc66e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/featureSelection/SimpleC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/featureSelection/SimpleC.java?ref=d90a7c7a6ef09cd133f1625186a4025a285fc66e","patch":"@@ -0,0 +1,39 @@\n+package org.apache.openjpa.persistence.detachment.featureSelection;\n+\n+import javax.persistence.*;\n+\n+@Entity\n+public class SimpleC {\n+\n+    @Id\n+    @GeneratedValue\n+    protected int c_id;\n+\n+    @Basic\n+    protected String name;\n+\n+    @ManyToOne(cascade=CascadeType.PERSIST)\n+    @JoinColumn(name=\"B_ID\", referencedColumnName=\"B_ID\", nullable = false, updatable = false)\n+    protected SimpleB parent;\n+\n+    public int getId() {\n+        return c_id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public void setParent(SimpleB b) {\n+       this.parent = b;\n+    }\n+\n+    public SimpleB getParent() {\n+       return parent;\n+    }\n+\n+}"},{"sha":"70cf53e477e2b6cac2f67b731b5a7c9b7b3469b8","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/featureSelection/SimpleRef.java","status":"added","additions":48,"deletions":0,"changes":48,"blob_url":"https://github.com/apache/openjpa/blob/d90a7c7a6ef09cd133f1625186a4025a285fc66e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/featureSelection/SimpleRef.java","raw_url":"https://github.com/apache/openjpa/raw/d90a7c7a6ef09cd133f1625186a4025a285fc66e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/featureSelection/SimpleRef.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/featureSelection/SimpleRef.java?ref=d90a7c7a6ef09cd133f1625186a4025a285fc66e","patch":"@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.openjpa.persistence.detachment.featureSelection;\n+\n+import javax.persistence.*;\n+import java.util.Set;\n+import java.util.LinkedHashSet;\n+\n+@Entity\n+public class SimpleRef {\n+\n+    @Id\n+    @GeneratedValue\n+    protected int id;\n+\n+    @Basic\n+    protected String name;\n+\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+}"}]}

