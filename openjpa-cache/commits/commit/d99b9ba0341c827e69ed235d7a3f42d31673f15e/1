{"sha":"d99b9ba0341c827e69ed235d7a3f42d31673f15e","node_id":"MDY6Q29tbWl0MjA2MzY0OmQ5OWI5YmEwMzQxYzgyN2U2OWVkMjM1ZDdhM2Y0MmQzMTY3M2YxNWU=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-11-02T14:19:30Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-11-02T14:19:30Z"},"message":"OPENJPA-1867: Fix ClassCastException when loading from DataCache.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1030056 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ca67c13db303cac56f5b6e1caf57aeabbced119e","url":"https://api.github.com/repos/apache/openjpa/git/trees/ca67c13db303cac56f5b6e1caf57aeabbced119e"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/d99b9ba0341c827e69ed235d7a3f42d31673f15e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/d99b9ba0341c827e69ed235d7a3f42d31673f15e","html_url":"https://github.com/apache/openjpa/commit/d99b9ba0341c827e69ed235d7a3f42d31673f15e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/d99b9ba0341c827e69ed235d7a3f42d31673f15e/comments","author":null,"committer":null,"parents":[{"sha":"ab326efe0729737af181b7151766e82be4562c96","url":"https://api.github.com/repos/apache/openjpa/commits/ab326efe0729737af181b7151766e82be4562c96","html_url":"https://github.com/apache/openjpa/commit/ab326efe0729737af181b7151766e82be4562c96"}],"stats":{"total":102,"additions":87,"deletions":15},"files":[{"sha":"4d558fbc97a3cbf9f2458f0bd73ad9e1367a9c7c","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java","status":"modified","additions":17,"deletions":15,"changes":32,"blob_url":"https://github.com/apache/openjpa/blob/d99b9ba0341c827e69ed235d7a3f42d31673f15e/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/d99b9ba0341c827e69ed235d7a3f42d31673f15e/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java?ref=d99b9ba0341c827e69ed235d7a3f42d31673f15e","patch":"@@ -149,7 +149,7 @@ private void updateCaches() {\n                     mods.additions.add(new PCDataHolder(data, sm));\n                     CacheStatistics stats = cache.getStatistics();\n                     if (stats.isEnabled()) {\n-                        ((CacheStatisticsSPI)stats).newPut(sm.getMetaData().getDescribedType());\n+                        ((CacheStatisticsSPI)stats).newPut(data.getType());\n                     }\n                 }\n             }\n@@ -188,7 +188,7 @@ private void updateCaches() {\n                     }\n                     CacheStatistics stats = cache.getStatistics();\n                     if (stats.isEnabled()) {\n-                        ((CacheStatisticsSPI)stats).newPut(sm.getMetaData().getDescribedType());\n+                        ((CacheStatisticsSPI)stats).newPut(data.getType());\n                     }\n                 }\n             }\n@@ -339,7 +339,7 @@ public boolean syncVersion(OpenJPAStateManager sm, Object edata) {\n         // if we have a cached version update from there\n         if (version != null) {\n             if(stats.isEnabled()){\n-                ((CacheStatisticsSPI)stats).newGet(sm.getMetaData().getDescribedType(), true);\n+                ((CacheStatisticsSPI)stats).newGet(data.getType(), true);\n             }\n             if (!version.equals(sm.getVersion())) {\n                 sm.setVersion(version);\n@@ -349,7 +349,8 @@ public boolean syncVersion(OpenJPAStateManager sm, Object edata) {\n         }\n \n         if(stats.isEnabled()){\n-            ((CacheStatisticsSPI)stats).newGet(sm.getMetaData().getDescribedType(), false);\n+            Class<?> cls = (data == null) ? sm.getMetaData().getDescribedType() : data.getType();\n+            ((CacheStatisticsSPI) stats).newGet(cls, false);\n         }\n         // use data store version\n         return super.syncVersion(sm, edata);\n@@ -360,7 +361,7 @@ public boolean initialize(OpenJPAStateManager sm, PCState state, FetchConfigurat\n         if (cache == null) {\n             return super.initialize(sm, state, fetch, edata);\n         }\n-        Class<?> cls = sm.getMetaData().getDescribedType();\n+\n         DataCachePCData data = cache.get(sm.getObjectId());\n         CacheStatistics stats = cache.getStatistics();\n         boolean fromDatabase = false; \n@@ -373,14 +374,15 @@ public boolean initialize(OpenJPAStateManager sm, PCState state, FetchConfigurat\n         } else {\n             if (alreadyCached && !isLocking(fetch)) {\n                 if (stats.isEnabled()) {\n-                    ((CacheStatisticsSPI)stats).newGet(cls, true);\n+                    ((CacheStatisticsSPI)stats).newGet(data.getType(), true);\n                 }\n-                sm.initialize(cls, state);\n+                sm.initialize(data.getType(), state);\n                 data.load(sm, fetch, edata);\n             } else {\n                 if (!alreadyCached) {\n                     if (stats.isEnabled()) {\n-                        ((CacheStatisticsSPI)stats).newGet(cls, false);\n+                        // Get the classname from MetaData... but this won't be right in every case. \n+                        ((CacheStatisticsSPI)stats).newGet(sm.getMetaData().getDescribedType(), false);\n                     }\n                 }\n                 fromDatabase = super.initialize(sm, state, fetch, edata);\n@@ -391,10 +393,10 @@ public boolean initialize(OpenJPAStateManager sm, PCState state, FetchConfigurat\n                            && ((fetch.getCacheStoreMode() == DataCacheStoreMode.USE && !alreadyCached)\n                             || (fetch.getCacheStoreMode() == DataCacheStoreMode.REFRESH));\n         if (updateCache) {\n+            cacheStateManager(cache, sm, data);\n             if (stats.isEnabled()) {\n-                ((CacheStatisticsSPI)stats).newPut(cls);\n+                ((CacheStatisticsSPI) stats).newPut(sm.getMetaData().getDescribedType());\n             }\n-            cacheStateManager(cache, sm, data);\n         }\n         return fromDatabase || alreadyCached;\n     }\n@@ -435,12 +437,12 @@ public boolean load(OpenJPAStateManager sm, BitSet fields,\n             return super.load(sm, fields, fetch, lockLevel, edata);\n \n         CacheStatistics stats = cache.getStatistics();\n-        Class<?> cls = sm.getMetaData().getDescribedType();\n         DataCachePCData data = cache.get(sm.getObjectId());\n         if (lockLevel == LockLevels.LOCK_NONE && !isLocking(fetch) && data != null)\n             data.load(sm, fields, fetch, edata);\n         if (fields.length() == 0){\n             if (stats.isEnabled()) {\n+                Class<?> cls = (data == null) ? sm.getMetaData().getDescribedType() : data.getType();\n                 ((CacheStatisticsSPI)stats).newGet(cls, true);\n             }\n             return true;\n@@ -509,7 +511,7 @@ public boolean load(OpenJPAStateManager sm, BitSet fields,\n                         //### the 'data.type' access here probably needs\n                         //### to be addressed for bug 511\n                         if (stats.isEnabled()) {\n-                            ((CacheStatisticsSPI)stats).newGet(sm.getMetaData().getDescribedType(), true);\n+                            ((CacheStatisticsSPI) stats).newGet(data.getType(), true);\n                         }\n                         sm.initialize(data.getType(), state);\n                         data.load(sm, fetch, edata);\n@@ -529,11 +531,11 @@ public boolean load(OpenJPAStateManager sm, BitSet fields,\n                         if (fields.length() > 0){\n                             unloaded = addUnloaded(sm, fields, unloaded);\n                             if (stats.isEnabled()) {\n-                                ((CacheStatisticsSPI)stats).newGet(sm.getMetaData().getDescribedType(), false);\n+                                ((CacheStatisticsSPI)stats).newGet(data.getType(), false);\n                             }\n                         }else{\n                             if (stats.isEnabled()) {\n-                                ((CacheStatisticsSPI)stats).newGet(sm.getMetaData().getDescribedType(), true);\n+                                ((CacheStatisticsSPI)stats).newGet(data.getType(), true);\n                             }\n                         }\n                     } else{\n@@ -588,7 +590,7 @@ public boolean load(OpenJPAStateManager sm, BitSet fields,\n                     cache.update(data);\n                 CacheStatistics stats = cache.getStatistics();\n                 if (stats.isEnabled()) {\n-                    ((CacheStatisticsSPI)stats).newPut(sm.getMetaData().getDescribedType());\n+                    ((CacheStatisticsSPI)stats).newPut(data.getType());\n                 }\n             } finally {\n                 cache.writeUnlock();"},{"sha":"710c4321dea319a5d767e36fff24244ec62a2f5e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/datacache/TestInheritanceWithDataCache.java","status":"added","additions":70,"deletions":0,"changes":70,"blob_url":"https://github.com/apache/openjpa/blob/d99b9ba0341c827e69ed235d7a3f42d31673f15e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/datacache/TestInheritanceWithDataCache.java","raw_url":"https://github.com/apache/openjpa/raw/d99b9ba0341c827e69ed235d7a3f42d31673f15e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/datacache/TestInheritanceWithDataCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/datacache/TestInheritanceWithDataCache.java?ref=d99b9ba0341c827e69ed235d7a3f42d31673f15e","patch":"@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.inheritance.datacache;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.inheritance.entity.Department;\n+import org.apache.openjpa.persistence.inheritance.entity.Employee;\n+import org.apache.openjpa.persistence.inheritance.entity.FTEmployee;\n+import org.apache.openjpa.persistence.inheritance.entity.Manager;\n+import org.apache.openjpa.persistence.inheritance.entity.PTEmployee;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+public class TestInheritanceWithDataCache extends SingleEMFTestCase {\n+    Object[] props =\n+        new Object[] { FTEmployee.class, Employee.class, Manager.class, PTEmployee.class, Department.class,\n+            \"openjpa.DataCache\", \"true\", CLEAR_TABLES };\n+\n+    @Override\n+    public void setUp() throws Exception {\n+        super.setUp(props);\n+    }\n+\n+    public void test() throws Exception {\n+        EntityManager em = emf.createEntityManager();\n+        try {\n+            // Create a manager and a department\n+            em.getTransaction().begin();\n+            Manager m = new Manager();\n+            m.setId(1);\n+            em.persist(m);\n+            Department dept = new Department();\n+            dept.setId(1);\n+            dept.setDepartmentManager(m);\n+            em.persist(dept);\n+            m.setDepartment(dept);\n+            em.getTransaction().commit();\n+            em.clear();\n+\n+            emf.getCache().evictAll();\n+\n+            Employee e = em.find(Employee.class, 1);\n+            assertNotNull(e);\n+            assertTrue(e instanceof Manager);\n+            em.clear();\n+            e = em.find(Employee.class, 1);\n+            assertNotNull(e);\n+            assertTrue(e instanceof Manager);\n+        } finally {\n+            em.close();\n+        }\n+\n+    }\n+}"}]}

