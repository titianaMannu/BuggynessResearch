{"sha":"d9b6b95adf62e547ac4591a5f5bf7771aeb14f6f","node_id":"MDY6Q29tbWl0MjA2MzY0OmQ5YjZiOTVhZGY2MmU1NDdhYzQ1OTFhNWY1YmY3NzcxYWViMTRmNmY=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-01-15T16:10:36Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-01-15T16:10:36Z"},"message":"OPENJPA-843 refactor testcase. Merged to 1.2.x\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@734740 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"835651a68b36d8e61b02324c1ed60aab21ba2b85","url":"https://api.github.com/repos/apache/openjpa/git/trees/835651a68b36d8e61b02324c1ed60aab21ba2b85"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/d9b6b95adf62e547ac4591a5f5bf7771aeb14f6f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/d9b6b95adf62e547ac4591a5f5bf7771aeb14f6f","html_url":"https://github.com/apache/openjpa/commit/d9b6b95adf62e547ac4591a5f5bf7771aeb14f6f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/d9b6b95adf62e547ac4591a5f5bf7771aeb14f6f/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"ba5783e1e3eca11be12b35b077c31c3d4ebb4f31","url":"https://api.github.com/repos/apache/openjpa/commits/ba5783e1e3eca11be12b35b077c31c3d4ebb4f31","html_url":"https://github.com/apache/openjpa/commit/ba5783e1e3eca11be12b35b077c31c3d4ebb4f31"}],"stats":{"total":403,"additions":0,"deletions":403},"files":[{"sha":"d87a2ce8e11f89c2361afb06a8da8146dd506685","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/M21UniVersionTest.java","status":"removed","additions":0,"deletions":187,"changes":187,"blob_url":"https://github.com/apache/openjpa/blob/ba5783e1e3eca11be12b35b077c31c3d4ebb4f31/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/M21UniVersionTest.java","raw_url":"https://github.com/apache/openjpa/raw/ba5783e1e3eca11be12b35b077c31c3d4ebb4f31/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/M21UniVersionTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/M21UniVersionTest.java?ref=ba5783e1e3eca11be12b35b077c31c3d4ebb4f31","patch":"@@ -1,187 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.kernel;\n-\n-import javax.persistence.EntityManager;\n-\n-import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n-\n-public class M21UniVersionTest extends SingleEMFTestCase {\n-    public static String SALESID = \"SALES\";\n-    public static String MARKETINGID = \"MARKETING\";\n-    \n-    public static String EMPLOYEE1ID = \"EMPLOYEE1\";\n-    public static String EMPLOYEE2ID = \"EMPLOYEE2\";\n-    public static String EMPLOYEE3ID = \"EMPLOYEE3\";\n-    \n-    \n-    public void setUp() {\n-        setUp(\n-                M21UniDepartment.class, \n-                M21UniEmployee.class,\n-                CLEAR_TABLES);        \n-        \n-        createEntities();        \n-    }\n-    \n-    void createEntities() {        \n-        EntityManager em = emf.createEntityManager();\n-        \n-        em.getTransaction().begin();\n-        M21UniDepartment sales = new M21UniDepartment();\n-        sales.setDeptid(SALESID);        \n-        sales.setName(\"SALES\");\n-        sales.setCostCode(\"1000\");\n-        M21UniDepartment marketing = new M21UniDepartment();\n-        marketing.setDeptid(MARKETINGID);        \n-        marketing.setName(\"marketing\");\n-        marketing.setCostCode(\"3000\");        \n-        \n-        M21UniEmployee e1 = new M21UniEmployee();\n-        M21UniEmployee e2 = new M21UniEmployee();\n-        e1.setEmpid(EMPLOYEE1ID);\n-        e1.setName(\"Gilgamesh_1\");\n-        e2.setEmpid(EMPLOYEE2ID);\n-        e2.setName(\"Enkidu_1\");\n-        e1.setDepartment(sales);\n-        e2.setDepartment(sales);\n-        \n-        em.persist(e1);\n-        em.persist(e2);\n-        em.persist(sales);\n-        em.persist(marketing);\n-        em.flush();\n-        em.getTransaction().commit();\n-        em.close();\n-        \n-    }\n-    \n-    public void testNonRelationalFieldInverseSideVersionUpdate() {\n-        // Change only non-relation fields on Department.\n-        // Version number of Department should be updated.\n-        // Version numbers of Employee should not be updated.\n-        \n-        EntityManager em = emf.createEntityManager();\n-        M21UniDepartment sales = em.find(M21UniDepartment.class, SALESID);\n-        M21UniEmployee e1 = em.find(M21UniEmployee.class, EMPLOYEE1ID);\n-        M21UniEmployee e2 = em.find(M21UniEmployee.class, EMPLOYEE2ID);\n-        \n-        int salesVersionPre = sales.getVersion();\n-        int e1VersionPre = e1.getVersion();\n-        int e2VersionPre = e2.getVersion();\n-        \n-        em.getTransaction().begin();\n-        sales.setCostCode(\"1001\");\n-        em.getTransaction().commit();\n-        em.close();\n-        \n-        em = emf.createEntityManager();\n-        sales = em.find(M21UniDepartment.class, SALESID);\n-        e1 = em.find(M21UniEmployee.class, EMPLOYEE1ID);\n-        e2 = em.find(M21UniEmployee.class, EMPLOYEE2ID);\n-        \n-        int salesVersionPost = sales.getVersion();\n-        int e1VersionPost = e1.getVersion();\n-        int e2VersionPost = e2.getVersion();\n-        em.close();\n-        \n-        assertEquals(salesVersionPost, salesVersionPre + 1);\n-        assertEquals(e1VersionPost, e1VersionPre);\n-        assertEquals(e2VersionPost, e2VersionPre);\n-    }\n-\n-\n-    public void testNonRelationalFieldOwnerSideVersionUpdate() {\n-        // Change only non-relation fields on Employee.\n-        // Version number of Employee should be updated.\n-        // Version number of Department should not change.\n-        EntityManager em = emf.createEntityManager();\n-        M21UniDepartment sales = em.find(M21UniDepartment.class, SALESID);\n-        M21UniEmployee e1 = em.find(M21UniEmployee.class, EMPLOYEE1ID);\n-        M21UniEmployee e2 = em.find(M21UniEmployee.class, EMPLOYEE2ID);\n-        \n-        int salesVersionPre = sales.getVersion();\n-        int e1VersionPre = e1.getVersion();\n-        int e2VersionPre = e2.getVersion();\n-        \n-        em.getTransaction().begin();\n-        e1.setName(\"Gilgamesh_2\");\n-        e2.setName(\"Enkidu_2\");\n-        em.getTransaction().commit();\n-        em.close();\n-        \n-        em = emf.createEntityManager();\n-        sales = em.find(M21UniDepartment.class, SALESID);\n-        e1 = em.find(M21UniEmployee.class, EMPLOYEE1ID);\n-        e2 = em.find(M21UniEmployee.class, EMPLOYEE2ID);\n-        \n-        int salesVersionPost = sales.getVersion();\n-        int e1VersionPost = e1.getVersion();\n-        int e2VersionPost = e2.getVersion();\n-        em.close();\n-        \n-        assertEquals(salesVersionPost, salesVersionPre);\n-        assertEquals(e1VersionPost, e1VersionPre + 1);\n-        assertEquals(e2VersionPost, e2VersionPre + 1);        \n-    }\n-    \n-    public void testRelationalFieldOwnerSideVersionUpdate() {\n-        // Assign employees to a new Department. \n-        // Since there is a unidirectional ManyToOne relationship \n-        // from  Employee to Department, only the Employee\n-        // version should be updated. Department version\n-        // should remain the same as before.\n-        \n-        EntityManager em = emf.createEntityManager();\n-        M21UniDepartment sales = em.find(M21UniDepartment.class, SALESID);\n-        M21UniDepartment marketing = em.find(M21UniDepartment.class, MARKETINGID);\n-        M21UniEmployee e1 = em.find(M21UniEmployee.class, EMPLOYEE1ID);\n-        M21UniEmployee e2 = em.find(M21UniEmployee.class, EMPLOYEE2ID);\n-        \n-        int salesVersionPre = sales.getVersion();\n-        int marketingVersionPre = marketing.getVersion();\n-        int e1VersionPre = e1.getVersion();\n-        int e2VersionPre = e2.getVersion();\n-                \n-        em.getTransaction().begin();        \n-        e1.setDepartment(marketing);\n-        // Don't update e2, so we can check for unchanged\n-        // version number for e2.        \n-        em.getTransaction().commit();\n-        em.close();\n-        \n-        em = emf.createEntityManager();\n-        sales = em.find(M21UniDepartment.class, SALESID);\n-        marketing = em.find(M21UniDepartment.class, MARKETINGID);\n-        e1 = em.find(M21UniEmployee.class, EMPLOYEE1ID);\n-        e2 = em.find(M21UniEmployee.class, EMPLOYEE2ID);\n-        \n-        int salesVersionPost = sales.getVersion();\n-        int marketingVersionPost = marketing.getVersion();\n-        int e1VersionPost = e1.getVersion();\n-        int e2VersionPost = e2.getVersion();\n-                \n-        em.close();\n-        \n-        assertEquals(salesVersionPost, salesVersionPre);\n-        assertEquals(marketingVersionPost, marketingVersionPre);\n-        assertEquals(e1VersionPost, e1VersionPre + 1);\n-        assertEquals(e2VersionPost, e2VersionPre);        \n-    }\n-}"},{"sha":"475170f5f621823cba40e51bacc427cfb7d19b49","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/M2MBiVersionTest.java","status":"removed","additions":0,"deletions":216,"changes":216,"blob_url":"https://github.com/apache/openjpa/blob/ba5783e1e3eca11be12b35b077c31c3d4ebb4f31/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/M2MBiVersionTest.java","raw_url":"https://github.com/apache/openjpa/raw/ba5783e1e3eca11be12b35b077c31c3d4ebb4f31/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/M2MBiVersionTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/M2MBiVersionTest.java?ref=ba5783e1e3eca11be12b35b077c31c3d4ebb4f31","patch":"@@ -1,216 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.kernel;\n-\n-import java.util.Collection;\n-import java.util.Iterator;\n-\n-import javax.persistence.EntityManager;\n-\n-import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n-\n-public class M2MBiVersionTest extends SingleEMFTestCase {\n-    public static String SALESID = \"SALES\";\n-    public static String MARKETINGID = \"MARKETING\";\n-    \n-    public static String EMPLOYEE1ID = \"EMPLOYEE1\";\n-    public static String EMPLOYEE2ID = \"EMPLOYEE2\";\n-    public static String EMPLOYEE3ID = \"EMPLOYEE3\";\n-    \n-    public void setUp() {\n-        setUp(\n-                M2MBiDepartment.class, \n-                M2MBiEmployee.class,\n-                CLEAR_TABLES);        \n-        \n-        createEntities();        \n-    }\n-    \n-    void createEntities() {        \n-        EntityManager em = emf.createEntityManager();\n-        \n-        em.getTransaction().begin();\n-        M2MBiDepartment sales = new M2MBiDepartment();\n-        sales.setDeptid(SALESID);        \n-        sales.setName(\"SALES\");\n-        sales.setCostCode(\"1000\");\n-        M2MBiDepartment marketing = new M2MBiDepartment();\n-        marketing.setDeptid(MARKETINGID);        \n-        marketing.setName(\"marketing\");\n-        marketing.setCostCode(\"3000\");        \n-        \n-        M2MBiEmployee e1 = new M2MBiEmployee();\n-        M2MBiEmployee e2 = new M2MBiEmployee();\n-        e1.setEmpid(EMPLOYEE1ID);\n-        e1.setName(\"Gilgamesh_1\");\n-        e2.setEmpid(EMPLOYEE2ID);\n-        e2.setName(\"Enkidu_1\");\n-        \n-        e1.getDepartments().add(sales);\n-        e2.getDepartments().add(sales);\n-        sales.getEmployees().add(e1);\n-        sales.getEmployees().add(e2);\n-        \n-        em.persist(e1);\n-        em.persist(e2);\n-        em.persist(sales);\n-        em.persist(marketing);\n-        em.flush();\n-        em.getTransaction().commit();\n-        em.close();\n-        \n-    }\n-    \n-    public void testNonRelationalFieldInverseSideVersionUpdate() {\n-        EntityManager em = emf.createEntityManager();\n-        \n-        M2MBiDepartment sales = em.find(M2MBiDepartment.class, SALESID);\n-        M2MBiEmployee e1 = em.find(M2MBiEmployee.class, EMPLOYEE1ID);\n-        M2MBiEmployee e2 = em.find(M2MBiEmployee.class, EMPLOYEE2ID);\n-        \n-        int salesVersionPre = sales.getVersion();\n-        int e1VersionPre = e1.getVersion();\n-        int e2VersionPre = e2.getVersion();\n-        \n-        em.getTransaction().begin();        \n-        sales.setCostCode(\"1001\");\n-        em.getTransaction().commit();\n-        em.close();\n-        \n-        em = emf.createEntityManager();\n-        sales = em.find(M2MBiDepartment.class, SALESID);\n-        e1 = em.find(M2MBiEmployee.class, EMPLOYEE1ID);\n-        e2 = em.find(M2MBiEmployee.class, EMPLOYEE2ID);\n-        \n-        int salesVersionPost = sales.getVersion();\n-        int e1VersionPost = e1.getVersion();\n-        int e2VersionPost = e2.getVersion();\n-        em.close();\n-        \n-        assertEquals(salesVersionPost, salesVersionPre + 1);\n-        assertEquals(e1VersionPost, e1VersionPre);\n-        assertEquals(e2VersionPost, e2VersionPre);        \n-    \n-    }\n-    \n-    public void testNonRelationalFieldOwnerSideVersionUpdate() {\n-        // Change only non-relation fields on Employee.\n-        // Version number of Employee should be updated.\n-        // Version number of Department should not change.\n-        EntityManager em = emf.createEntityManager();\n-        M2MBiDepartment sales = em.find(M2MBiDepartment.class, SALESID);\n-        M2MBiEmployee e1 = em.find(M2MBiEmployee.class, EMPLOYEE1ID);\n-        M2MBiEmployee e2 = em.find(M2MBiEmployee.class, EMPLOYEE2ID);\n-        \n-        int salesVersionPre = sales.getVersion();\n-        int e1VersionPre = e1.getVersion();\n-        int e2VersionPre = e2.getVersion();\n-        \n-        em.getTransaction().begin();\n-        e1.setName(\"Gilgamesh_2\");\n-        e2.setName(\"Enkidu_2\");\n-        em.getTransaction().commit();\n-        em.close();\n-        \n-        em = emf.createEntityManager();\n-        sales = em.find(M2MBiDepartment.class, SALESID);\n-        e1 = em.find(M2MBiEmployee.class, EMPLOYEE1ID);\n-        e2 = em.find(M2MBiEmployee.class, EMPLOYEE2ID);\n-        \n-        int salesVersionPost = sales.getVersion();\n-        int e1VersionPost = e1.getVersion();\n-        int e2VersionPost = e2.getVersion();\n-        em.close();\n-        \n-        assertEquals(salesVersionPost, salesVersionPre);\n-        assertEquals(e1VersionPost, e1VersionPre + 1);\n-        assertEquals(e2VersionPost, e2VersionPre + 1);        \n-    }\n-\n-    \n-    public void testRelationalFieldBothSidesVersionUpdate() {\n-        // Move Employee from old Department to new Department.\n-        // Update both sides of the relationship.        \n-        // Since there is a bidirectional ManyToMany relationship \n-        // from  Employee to Department, Employee version should\n-        // be updated. Since neither the new nor the old Departments\n-        // are owners of the reassigned Employee, the Department \n-        // versions should remain the same.\n-        \n-        EntityManager em = emf.createEntityManager();\n-        M2MBiDepartment sales = em.find(M2MBiDepartment.class, SALESID);\n-        M2MBiDepartment marketing = em.find(M2MBiDepartment.class, MARKETINGID);\n-        M2MBiEmployee e1 = em.find(M2MBiEmployee.class, EMPLOYEE1ID);\n-        M2MBiEmployee e2 = em.find(M2MBiEmployee.class, EMPLOYEE2ID);\n-        \n-        int salesVersionPre = sales.getVersion();\n-        int marketingVersionPre = marketing.getVersion();\n-        int e1VersionPre = e1.getVersion();\n-        int e2VersionPre = e2.getVersion();\n-        \n-        em.getTransaction().begin();\n-        // Remove sales from e1\n-        Collection<M2MBiDepartment> e1Departments = e1.getDepartments();\n-        for (Iterator<M2MBiDepartment> dIterator = e1Departments.iterator(); dIterator.hasNext();) {\n-            M2MBiDepartment d = dIterator.next();\n-            if (SALESID.equals(d.getDeptid())) {\n-                dIterator.remove();\n-                break;\n-            }\n-        }\n-        // remove e1 from sales\n-        Collection<M2MBiEmployee> salesEmployees = sales.getEmployees();\n-        for (Iterator<M2MBiEmployee> eIterator = salesEmployees.iterator(); eIterator.hasNext();) {\n-            M2MBiEmployee e = eIterator.next();\n-            if (EMPLOYEE1ID.equals(e.getEmpid())) {\n-                eIterator.remove();\n-                break;\n-            }\n-        }\n-        \n-        // Add marketing to e1\n-        e1.getDepartments().add(marketing);\n-        // Add e1 to marketing\n-        marketing.getEmployees().add(e1);\n-        \n-        em.getTransaction().commit();\n-        em.close();\n-        \n-        em = emf.createEntityManager();\n-        sales = em.find(M2MBiDepartment.class, SALESID);\n-        marketing = em.find(M2MBiDepartment.class, MARKETINGID);\n-        e1 = em.find(M2MBiEmployee.class, EMPLOYEE1ID);\n-        e2 = em.find(M2MBiEmployee.class, EMPLOYEE2ID);\n-        \n-        int salesVersionPost = sales.getVersion();\n-        int marketingVersionPost = marketing.getVersion();\n-        int e1VersionPost = e1.getVersion();\n-        int e2VersionPost = e2.getVersion();\n-        em.close();\n-        \n-        // Since Department is inverse side, there should\n-        // be no version update when its employees are moved.\n-        assertEquals(salesVersionPost, salesVersionPre);\n-        assertEquals(marketingVersionPost, marketingVersionPre);\n-        // Employee e1 was moved to marketing.\n-        assertEquals(e1VersionPost, e1VersionPre + 1);\n-        // Employee e2 was unchanged.\n-        assertEquals(e2VersionPost, e2VersionPre);        \n-    }\n-}"}]}

