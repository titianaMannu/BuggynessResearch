{"sha":"d9fbb9cc11df15d29964f620f2fb467e5b6d6b73","node_id":"MDY6Q29tbWl0MjA2MzY0OmQ5ZmJiOWNjMTFkZjE1ZDI5OTY0ZjYyMGYyZmI0NjdlNWI2ZDZiNzM=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-05-07T21:38:20Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-05-07T21:38:20Z"},"message":"Propagate the provided classloader further into the PCEnhancer call stack.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@536001 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ba2c4c2b66810b7a53640dba6036501393e6b3d7","url":"https://api.github.com/repos/apache/openjpa/git/trees/ba2c4c2b66810b7a53640dba6036501393e6b3d7"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/d9fbb9cc11df15d29964f620f2fb467e5b6d6b73","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/d9fbb9cc11df15d29964f620f2fb467e5b6d6b73","html_url":"https://github.com/apache/openjpa/commit/d9fbb9cc11df15d29964f620f2fb467e5b6d6b73","comments_url":"https://api.github.com/repos/apache/openjpa/commits/d9fbb9cc11df15d29964f620f2fb467e5b6d6b73/comments","author":null,"committer":null,"parents":[{"sha":"80671afcbf5802e3340c65ebda7e7bdf9bec75af","url":"https://api.github.com/repos/apache/openjpa/commits/80671afcbf5802e3340c65ebda7e7bdf9bec75af","html_url":"https://github.com/apache/openjpa/commit/80671afcbf5802e3340c65ebda7e7bdf9bec75af"}],"stats":{"total":25,"additions":23,"deletions":2},"files":[{"sha":"5ef37c7a9ea820dc7d6a72218521ecb8273d85a8","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","status":"modified","additions":23,"deletions":2,"changes":25,"blob_url":"https://github.com/apache/openjpa/blob/d9fbb9cc11df15d29964f620f2fb467e5b6d6b73/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","raw_url":"https://github.com/apache/openjpa/raw/d9fbb9cc11df15d29964f620f2fb467e5b6d6b73/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java?ref=d9fbb9cc11df15d29964f620f2fb467e5b6d6b73","patch":"@@ -181,9 +181,30 @@ public PCEnhancer(OpenJPAConfiguration conf, ClassMetaData type) {\n      * because the configuration might be an\n      * implementation-specific subclass whose metadata\n      * required more than just base metadata files\n+     * @deprecated use {@link #PCEnhancer(OpenJPAConfiguration, BCClass,\n+        MetaDataRepository, ClassLoader)} instead. \n      */\n     public PCEnhancer(OpenJPAConfiguration conf, BCClass type,\n         MetaDataRepository repos) {\n+        this(conf, type, repos, (ClassLoader) null);\n+    }\n+\n+    /**\n+     * Constructor. Supply configuration.\n+     *\n+     * @param type the bytecode representation fo the type to\n+     * enhance; this can be created from any stream or file\n+     * @param repos a metadata repository to use for metadata access,\n+     * or null to create a new reporitory; the repository\n+     * from the given configuration isn't used by default\n+     * because the configuration might be an\n+     * implementation-specific subclass whose metadata\n+     * required more than just base metadata files\n+     * @param loader the environment classloader to use for loading\n+     * classes and resources.\n+     */\n+    public PCEnhancer(OpenJPAConfiguration conf, BCClass type,\n+        MetaDataRepository repos, ClassLoader loader) {\n         _pc = type;\n         _log = conf.getLog(OpenJPAConfiguration.LOG_ENHANCE);\n \n@@ -192,7 +213,7 @@ public PCEnhancer(OpenJPAConfiguration conf, BCClass type,\n             _repos.setSourceMode(MetaDataRepository.MODE_META);\n         } else\n             _repos = repos;\n-        _meta = _repos.getMetaData(type.getType(), null, false);\n+        _meta = _repos.getMetaData(type.getType(), loader, false);\n     }\n \n     /**\n@@ -3641,7 +3662,7 @@ public static boolean run(OpenJPAConfiguration conf, String[] args,\n                 bc = project.loadClass((String) o);\n             else\n                 bc = project.loadClass((Class) o);\n-            enhancer = new PCEnhancer(conf, bc, repos);\n+            enhancer = new PCEnhancer(conf, bc, repos, loader);\n             if (writer != null)\n                 enhancer.setBytecodeWriter(writer);\n             enhancer.setDirectory(flags.directory);"}]}

