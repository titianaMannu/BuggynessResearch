{"sha":"da48a0ad537df1e824471fa80c77062f77030ce4","node_id":"MDY6Q29tbWl0MjA2MzY0OmRhNDhhMGFkNTM3ZGYxZTgyNDQ3MWZhODBjNzcwNjJmNzcwMzBjZTQ=","commit":{"author":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2014-06-10T21:47:31Z"},"committer":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2014-06-10T21:47:31Z"},"message":"OPENJPA-2507.  Committing a variation of Thomas Darimont's patch that utilizes ThreadLocal storage to safeguard the _contexts in CriteriaQueryImpl.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1601778 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5cac557a8d98bdc39963071516710a580be265cb","url":"https://api.github.com/repos/apache/openjpa/git/trees/5cac557a8d98bdc39963071516710a580be265cb"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/da48a0ad537df1e824471fa80c77062f77030ce4","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/da48a0ad537df1e824471fa80c77062f77030ce4","html_url":"https://github.com/apache/openjpa/commit/da48a0ad537df1e824471fa80c77062f77030ce4","comments_url":"https://api.github.com/repos/apache/openjpa/commits/da48a0ad537df1e824471fa80c77062f77030ce4/comments","author":null,"committer":null,"parents":[{"sha":"e48cd3e59d82ce352d161109987f283ecc369b66","url":"https://api.github.com/repos/apache/openjpa/commits/e48cd3e59d82ce352d161109987f283ecc369b66","html_url":"https://github.com/apache/openjpa/commit/e48cd3e59d82ce352d161109987f283ecc369b66"}],"stats":{"total":25,"additions":17,"deletions":8},"files":[{"sha":"e2c673dab091f70fc39a4bf8bd1102837e2e22ec","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaQueryImpl.java","status":"modified","additions":17,"deletions":8,"changes":25,"blob_url":"https://github.com/apache/openjpa/blob/da48a0ad537df1e824471fa80c77062f77030ce4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaQueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/da48a0ad537df1e824471fa80c77062f77030ce4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaQueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaQueryImpl.java?ref=da48a0ad537df1e824471fa80c77062f77030ce4","patch":"@@ -95,8 +95,13 @@\n     private Map<Selection<?>,Value> _rootVariables = new HashMap<Selection<?>, Value>();\n     \n     // SubqueryContext\n-    private Stack<Context> _contexts = null;\n-    \n+    private ThreadLocal<Stack<Context>> _contexts = new  ThreadLocal<Stack<Context>>(){\n+        @Override\n+        protected Stack<Context> initialValue() {\n+            return new Stack<Context>();\n+        }\n+    };\n+\n     public CriteriaQueryImpl(MetamodelImpl featureSelection, Class<T> resultClass) {\n         this._model = featureSelection;\n         this._resultClass = resultClass;\n@@ -135,7 +140,7 @@ public MetamodelImpl getMetamodel() {\n      * Gets the stack of contexts used by this query.\n      */\n     Stack<Context> getContexts() {\n-        return _contexts;\n+        return _contexts.get();\n     }\n     \n     /**\n@@ -412,10 +417,13 @@ public boolean isDistinct() {\n      * receiver with the help of the given {@link ExpressionFactory}.\n      */\n     QueryExpressions getQueryExpressions(ExpressionFactory factory) {\n-        _contexts = new Stack<Context>();\n         Context context = new Context(null, null, null);\n-        _contexts.push(context);\n-        return new CriteriaExpressionBuilder().getQueryExpressions(factory, this);\n+        _contexts.get().push(context);\n+        try {\n+            return new CriteriaExpressionBuilder().getQueryExpressions(factory, this);\n+        }finally{\n+            _contexts.remove();\n+        }\n     }    \n     \n     public void assertRoot() {\n@@ -432,7 +440,7 @@ public void assertSelection() {\n     // SubqueryContext\n     //\n     void setContexts(Stack<Context> contexts) {\n-        _contexts = contexts;\n+        _contexts.set(contexts);\n     }\n     \n     /**\n@@ -461,7 +469,8 @@ void setContexts(Stack<Context> contexts) {\n      * Gets the current context.\n      */\n     Context ctx() {\n-        return _contexts == null || _contexts.isEmpty() ? null :  _contexts.peek();\n+        Stack<Context> ctxt = _contexts.get();\n+        return ctxt == null || ctxt.isEmpty() ? null :  ctxt.peek();\n     }\n     \n     //"}]}

