{"sha":"dac8af35b4ade56f49747380f1de3487bd164c5b","node_id":"MDY6Q29tbWl0MjA2MzY0OmRhYzhhZjM1YjRhZGU1NmY0OTc0NzM4MGYxZGUzNDg3YmQxNjRjNWI=","commit":{"author":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2009-09-10T21:35:57Z"},"committer":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2009-09-10T21:35:57Z"},"message":"OPENJPA-1260.  Committing this change for Ravi Palacherla.  Mike had previously reviewed the patch for correctness.  Ravi changed the patch slightly and re-submitted.  Based on a request from the mailing list, I reviewed Ravi's second patch and am committing the changes with a couple of minor modifications.  I updated the comments slightly to make sentences.  And, I moved the testcases to the \"generationtype\" package to be with similar testcases.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@813597 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"cffae74679d357cb06198a0caa7704a15ffa6dfb","url":"https://api.github.com/repos/apache/openjpa/git/trees/cffae74679d357cb06198a0caa7704a15ffa6dfb"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/dac8af35b4ade56f49747380f1de3487bd164c5b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/dac8af35b4ade56f49747380f1de3487bd164c5b","html_url":"https://github.com/apache/openjpa/commit/dac8af35b4ade56f49747380f1de3487bd164c5b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/dac8af35b4ade56f49747380f1de3487bd164c5b/comments","author":null,"committer":null,"parents":[{"sha":"fa49080f8f8e946fc9fc3c64816c859ce2b6bcd6","url":"https://api.github.com/repos/apache/openjpa/commits/fa49080f8f8e946fc9fc3c64816c859ce2b6bcd6","html_url":"https://github.com/apache/openjpa/commit/fa49080f8f8e946fc9fc3c64816c859ce2b6bcd6"}],"stats":{"total":156,"additions":153,"deletions":3},"files":[{"sha":"40ef4a00b155cc43d4cae1df841af12d92124d5b","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","status":"modified","additions":19,"deletions":3,"changes":22,"blob_url":"https://github.com/apache/openjpa/blob/dac8af35b4ade56f49747380f1de3487bd164c5b/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/dac8af35b4ade56f49747380f1de3487bd164c5b/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java?ref=dac8af35b4ade56f49747380f1de3487bd164c5b","patch":"@@ -3670,9 +3670,25 @@ private Seq getSequence(ClassMetaData meta, FieldMetaData fmd) {\n             default:\n                 // use store manager for native sequence\n                 if (fmd == null) {\n-                    // this will return a sequence even for app id classes,\n-                    // which is what we want for backwards-compatibility\n-                    return _store.getDataStoreIdSequence(meta);\n+                    // This will return a sequence even for app id classes,\n+                    // which is what we want for backwards-compatibility.\n+                    // Even if user uses Application Identity,\n+                    // user might use custom sequence information.\n+                    // So, first, the sequence should be checked.\n+                    // Trying to get primary key field if it has\n+                    // sequence meta data.\n+                    FieldMetaData[] pks = meta.getPrimaryKeyFields();\n+                    if (pks != null && pks.length == 1) {\n+                        smd = pks[0].getValueSequenceMetaData();\n+                    } else {\n+                        smd = meta.getIdentitySequenceMetaData();\n+                    }\n+\n+                    if (smd != null) {\n+                        return smd.getInstance(_loader);\n+                    } else {\n+                        return _store.getDataStoreIdSequence(meta);\n+                    }\n                 }\n                 return _store.getValueSequence(fmd);\n         }"},{"sha":"8bc2ddb1226ec9a3d3c31192302248964cf685b6","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/EntityE2.java","status":"added","additions":69,"deletions":0,"changes":69,"blob_url":"https://github.com/apache/openjpa/blob/dac8af35b4ade56f49747380f1de3487bd164c5b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/EntityE2.java","raw_url":"https://github.com/apache/openjpa/raw/dac8af35b4ade56f49747380f1de3487bd164c5b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/EntityE2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/EntityE2.java?ref=dac8af35b4ade56f49747380f1de3487bd164c5b","patch":"@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.generationtype;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.SequenceGenerator;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name=\"primary_entityE2\")\n+public class EntityE2 {\n+    @Id\n+    @SequenceGenerator(name=\"entityE2_seq_gen_name\", \n+                       sequenceName=\"entityE2_seq_gen\")\n+    @GeneratedValue(strategy=GenerationType.SEQUENCE, \n+        generator=\"entityE2_seq_gen_name\")\n+    private int id;\n+    @Column(name=\"e_name\")\n+    private String name;\n+    \n+    public EntityE2(String name) {\n+        this.name = name;\n+    }\n+    \n+    /**\n+     * @return the id\n+     */\n+    public int getId() {\n+        return id;\n+    }\n+    /**\n+     * @param id the id to set\n+     */\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+    /**\n+     * @return the name\n+     */\n+    public String getName() {\n+        return name;\n+    }\n+    /**\n+     * @param name the name to set\n+     */\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+}"},{"sha":"f58194b3f69972d30e237c3148dbafd5274b21e8","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestNativeSeqGenerator.java","status":"added","additions":65,"deletions":0,"changes":65,"blob_url":"https://github.com/apache/openjpa/blob/dac8af35b4ade56f49747380f1de3487bd164c5b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestNativeSeqGenerator.java","raw_url":"https://github.com/apache/openjpa/raw/dac8af35b4ade56f49747380f1de3487bd164c5b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestNativeSeqGenerator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestNativeSeqGenerator.java?ref=dac8af35b4ade56f49747380f1de3487bd164c5b","patch":"@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.generationtype;\n+\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.test.SQLListenerTestCase;\n+\n+public class TestNativeSeqGenerator extends SQLListenerTestCase {\n+    OpenJPAEntityManager em;\n+    JDBCConfiguration conf;\n+    DBDictionary dict;\n+    boolean supportsNativeSequence = false;\n+    \n+    EntityE2 entityE2;\n+    \n+    @Override\n+    public void setUp() throws Exception {\n+        super.setUp(EntityE2.class,DROP_TABLES);\n+        assertNotNull(emf);\n+        conf = (JDBCConfiguration) emf.getConfiguration();\n+        dict = conf.getDBDictionaryInstance();\n+        supportsNativeSequence = dict.nextSequenceQuery != null;       \n+        if (supportsNativeSequence) {\n+            em = emf.createEntityManager();\n+            assertNotNull(em);\n+        }\n+    }\n+    \n+    public void createEntityE2() {\n+        entityE2 = new EntityE2(\"e name\");\n+    }\n+    \n+    public void testGetIdGeneratorSeqGen() {\n+        if (!supportsNativeSequence) {\n+            System.out.println(\"Does not support native sequence\");\n+            return;\n+        }\n+        createEntityE2();\n+        em.getTransaction().begin();\n+        em.persist(entityE2);\n+        em.getTransaction().commit();\n+        int genId = entityE2.getId();        \n+        int nextId = (int)((Long)em.getIdGenerator(EntityE2.class).next()).longValue();\n+        assertTrue(\"Next value should depend on previous genid\", nextId == genId + 1);\n+        em.close();\n+    }\n+}"}]}

