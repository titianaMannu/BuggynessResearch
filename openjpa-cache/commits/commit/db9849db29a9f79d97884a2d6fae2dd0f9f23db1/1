{"sha":"db9849db29a9f79d97884a2d6fae2dd0f9f23db1","node_id":"MDY6Q29tbWl0MjA2MzY0OmRiOTg0OWRiMjlhOWY3OWQ5Nzg4NGEyZDZmYWUyZGQwZjlmMjNkYjE=","commit":{"author":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2011-11-11T13:52:39Z"},"committer":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2011-11-11T13:52:39Z"},"message":"OPENJPA-2070.  Clean up the processing in the MetamodelImpl.populate() method.  The exception processing and messaging were not correct/accurate.  Also, changed the testcase slightly to allow for the error checking when needed.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1200884 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"604972a03401615b94987551430bcaf38ed15320","url":"https://api.github.com/repos/apache/openjpa/git/trees/604972a03401615b94987551430bcaf38ed15320"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/db9849db29a9f79d97884a2d6fae2dd0f9f23db1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/db9849db29a9f79d97884a2d6fae2dd0f9f23db1","html_url":"https://github.com/apache/openjpa/commit/db9849db29a9f79d97884a2d6fae2dd0f9f23db1","comments_url":"https://api.github.com/repos/apache/openjpa/commits/db9849db29a9f79d97884a2d6fae2dd0f9f23db1/comments","author":null,"committer":null,"parents":[{"sha":"83bc7aa8ef57761bd1db74498e8d5e9390ffb5c1","url":"https://api.github.com/repos/apache/openjpa/commits/83bc7aa8ef57761bd1db74498e8d5e9390ffb5c1","html_url":"https://github.com/apache/openjpa/commit/83bc7aa8ef57761bd1db74498e8d5e9390ffb5c1"}],"stats":{"total":84,"additions":40,"deletions":44},"files":[{"sha":"52661faa91299514d5e06a8cbf96b1e7dc0d1a1d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/BlogUser_.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/db9849db29a9f79d97884a2d6fae2dd0f9f23db1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/BlogUser_.java","raw_url":"https://github.com/apache/openjpa/raw/db9849db29a9f79d97884a2d6fae2dd0f9f23db1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/BlogUser_.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/BlogUser_.java?ref=db9849db29a9f79d97884a2d6fae2dd0f9f23db1","patch":"@@ -22,16 +22,22 @@\n \n package org.apache.openjpa.persistence.criteria;\n \n+import javax.persistence.metamodel.ListAttribute;\n import javax.persistence.metamodel.SingularAttribute;\n \n @javax.persistence.metamodel.StaticMetamodel\n (value=org.apache.openjpa.persistence.criteria.BlogUser.class)\n @javax.annotation.Generated\n (value=\"org.apache.openjpa.persistence.meta.AnnotationProcessor6\",date=\"Wed Jul 06 09:09:40 CDT 2011\")\n public class BlogUser_ {\n+    // The use of ListAttribute for arrays needs a special property setting.\n+    // Reference TestByteArray testcase.\n+//    public static volatile ListAttribute<BlogUser,Character> characters;\n     public static volatile SingularAttribute<BlogUser,Character[]> characters;\n+//    public static volatile ListAttribute<BlogUser,Character> chars;\n     public static volatile SingularAttribute<BlogUser,char[]> chars;\n     public static volatile SingularAttribute<BlogUser,Integer> id;\n+//    public static volatile ListAttribute<BlogUser,Byte> pic;\n     public static volatile SingularAttribute<BlogUser,byte[]> pic;\n     public static volatile SingularAttribute<BlogUser,String> username;\n     public static volatile SingularAttribute<BlogUser,Integer> version;"},{"sha":"05749e2dd97feb86fad836dc2af4cc8c3e73b58a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestByteArray.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/db9849db29a9f79d97884a2d6fae2dd0f9f23db1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestByteArray.java","raw_url":"https://github.com/apache/openjpa/raw/db9849db29a9f79d97884a2d6fae2dd0f9f23db1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestByteArray.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestByteArray.java?ref=db9849db29a9f79d97884a2d6fae2dd0f9f23db1","patch":"@@ -35,7 +35,9 @@\n     Character[] chars = new Character[] { new Character('a'), new Character('b') };\n     public void setUp() {\n         super.setUp(BlogUser.class\n-//            ,\"openjpa.Compatibility\", \"UseListAttributeForArrays=false\"\n+            // Using the following property will require corresponding\n+            // changes in BlogUser_.java\n+//            ,\"openjpa.Compatibility\", \"UseListAttributeForArrays=true\"\n             );\n         cb = emf.getCriteriaBuilder();\n         populate();"},{"sha":"e9920faa959622916d7613a6f4194de39ef81cd8","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/MetamodelImpl.java","status":"modified","additions":25,"deletions":41,"changes":66,"blob_url":"https://github.com/apache/openjpa/blob/db9849db29a9f79d97884a2d6fae2dd0f9f23db1/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/MetamodelImpl.java","raw_url":"https://github.com/apache/openjpa/raw/db9849db29a9f79d97884a2d6fae2dd0f9f23db1/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/MetamodelImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/MetamodelImpl.java?ref=db9849db29a9f79d97884a2d6fae2dd0f9f23db1","patch":"@@ -21,8 +21,7 @@\n import static javax.persistence.metamodel.Type.PersistenceType.BASIC;\n import static javax.persistence.metamodel.Type.PersistenceType.EMBEDDABLE;\n import static javax.persistence.metamodel.Type.PersistenceType.ENTITY;\n-import static \n- javax.persistence.metamodel.Type.PersistenceType.MAPPED_SUPERCLASS;\n+import static javax.persistence.metamodel.Type.PersistenceType.MAPPED_SUPERCLASS;\n \n import java.lang.reflect.Field;\n import java.lang.reflect.GenericArrayType;\n@@ -41,7 +40,6 @@\n import javax.persistence.metamodel.MappedSuperclassType;\n import javax.persistence.metamodel.Attribute;\n import javax.persistence.metamodel.Metamodel;\n-import javax.persistence.metamodel.PluralAttribute;\n import javax.persistence.metamodel.Type;\n import javax.persistence.metamodel.StaticMetamodel;\n import javax.persistence.metamodel.PluralAttribute.CollectionType;\n@@ -290,48 +288,38 @@ static CollectionType categorizeCollection(Class<?> cls) {\n      * Populate the static fields of the canonical type.\n      */\n     public <X> void populate(AbstractManagedType<X> type) {\n-\t\tClass<X> cls = type.getJavaType();\n-\t\tClass<?> mcls = repos.getMetaModel(cls, true);\n-\t\tif (mcls == null)\n-\t\t    return;\n+        Class<X> cls = type.getJavaType();\n+        Class<?> mcls = repos.getMetaModel(cls, true);\n+        if (mcls == null)\n+            return;\n         StaticMetamodel anno = mcls.getAnnotation(StaticMetamodel.class);\n-\t\tif (anno == null)\n+        if (anno == null)\n             throw new IllegalArgumentException(_loc.get(\"meta-class-no-anno\", \n-               mcls.getName(), cls.getName(), StaticMetamodel.class.getName()).getMessage());\n-\t\t\n+                    mcls.getName(), cls.getName(), StaticMetamodel.class.getName()).getMessage());\n+\n         if (cls != anno.value()) {\n             throw new IllegalStateException(_loc.get(\"meta-class-mismatch\",\n-            mcls.getName(), cls.getName(), anno.value()).getMessage());\n+                    mcls.getName(), cls.getName(), anno.value()).getMessage());\n         }\n         \n+        ParameterizedType mfType = null;\n+        Attribute<? super X, ?> f = null;\n         Field[] mfields = AccessController.doPrivileged(J2DoPrivHelper.getDeclaredFieldsAction(mcls));\n-    \tfor (Field mf : mfields) {\n+        for (Field mf : mfields) {\n             try {\n-                ParameterizedType mfType = getParameterziedType(mf);\n+                mfType = getParameterizedType(mf); // metamodel type\n                 if (mfType == null) {\n-                \tcontinue;\n+                    continue;\n                 }\n-    \t        Attribute<? super X, ?> f = type.getAttribute(mf.getName());\n-    \t        Class<?> fClass = f.getJavaType();\n-    \t       java.lang.reflect.Type[] args = mfType.getActualTypeArguments();\n-    \t       if (args.length < 2)\n-    \t           throw new IllegalStateException(\n-    \t               _loc.get(\"meta-field-no-para\", mf).getMessage());\n-    \t       java.lang.reflect.Type ftype = args[1];\n-    \t       if (fClass.isPrimitive() \n-    \t        || Collection.class.isAssignableFrom(fClass) \n-    \t        || Map.class.isAssignableFrom(fClass)) {\n-    \t        ;\n-    \t    } else if (ftype != args[1]) {\n-    \t        throw new RuntimeException(_loc.get(\"meta-field-mismatch\", \n-    \t            new Object[]{mf.getName(), mcls.getName(), \n-    \t                toTypeName(mfType), toTypeName(ftype)}).getMessage());\n-    \t    }\n-            mf.set(null, f);\n-\t} catch (Exception e) {\n-\t    e.printStackTrace();\n-\t\tthrow new RuntimeException(mf.toString());\n-\t}\n+                f = type.getAttribute(mf.getName()); // persistent type\n+\n+                // populate the static field with persistent type information\n+                mf.set(null, f);\n+            } catch (Exception e) {\n+                throw new RuntimeException(_loc.get(\"meta-field-mismatch\",\n+                        new Object[] { mf.getName(), mcls.getName(), toTypeName(mfType), f.getJavaType().toString() })\n+                        .getMessage(), e);\n+            }\n         }\n     }\n     \n@@ -343,7 +331,7 @@ static CollectionType categorizeCollection(Class<?> cls) {\n      * metamodel or weaving process introducing synthetic fields),\n      * returns null.\n      */\n-    ParameterizedType getParameterziedType(Field mf) {\n+    ParameterizedType getParameterizedType(Field mf) {\n         java.lang.reflect.Type t = mf.getGenericType();\n         if (t instanceof ParameterizedType == false) {\n         \trepos.getLog().warn(_loc.get(\"meta-field-not-param\", \n@@ -356,7 +344,7 @@ ParameterizedType getParameterziedType(Field mf) {\n             throw new IllegalStateException(_loc.get(\"meta-field-less-param\", \n             mf.getDeclaringClass(), mf.getName(), toTypeName(t)).getMessage());\n         }\n-        \n+\n         return mfType;\n     }\n     \n@@ -396,7 +384,6 @@ void validate(Field metaField, FieldMetaData fmd) {\n     }\n     \n     <X,Y> void validate(Field mField, Member<X, Y> member) {\n-        Class<?> fType = member.getJavaType();\n         if (!ParameterizedType.class.isInstance(mField.getGenericType())) {\n             throw new IllegalArgumentException(_loc.get(\"meta-bad-field\", \n                 mField).getMessage());\n@@ -407,9 +394,6 @@ void validate(Field metaField, FieldMetaData fmd) {\n         if (member.getDeclaringType().getJavaType() != owner)\n             throw new IllegalArgumentException(_loc.get(\"meta-bad-field-owner\", \n                     mField, owner).getMessage());\n-        java.lang.reflect.Type elementType = args[1];\n-        if (fType.isPrimitive())\n-            return;\n     }\n \n     public Class classForName(String name, String[] imports) {"},{"sha":"f05a3a8972d5144b4e2bbce6d6e5329beba41cbc","filename":"openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/meta/localizer.properties","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/db9849db29a9f79d97884a2d6fae2dd0f9f23db1/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/meta/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/db9849db29a9f79d97884a2d6fae2dd0f9f23db1/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/meta/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/meta/localizer.properties?ref=db9849db29a9f79d97884a2d6fae2dd0f9f23db1","patch":"@@ -52,10 +52,14 @@ mmg-bad-log: Log level specified in -Alog option \"{0}\" is not recognized. \\\n \n meta-class-no-anno: Meta class \"{0}\" registered for \"{1}\" is not annotated \\\n \twith \"{2}\" annotation.\t\n+meta-class-mismatch: Value provided for the StaticMetamodel annotation \"{2}\" \\\n+    in Meta class \"{0}\" does not match the expected Entity class \"{1}\".\n meta-field-mismatch: The field \"{0}\" in meta class \"{1}\" is of type \"{2}\" \\\n-\twhich does not match the persistent property type \"{3}\".  \n-meta-field-not-param: Encountered field \" {2} {1}\" in \"{0}\". This field is \\\n+\twhich does not support the persistent property type \"{3}\".  \n+meta-field-not-param: Encountered field \"{2} {1}\" in \"{0}\". This field is \\\n \tnot recognized as canonical field. Ignoring.\n+meta-field-less-param: Encountered field \"{2} {1}\" in \"{0}\". This field has \\\n+\tless than two parameters and is not recognized as a canonical field.\n type-wrong-category:\"{0}\" categorized as \"{1}\" should be a \"{2}\"\n mmg-asl-header: Licensed to the Apache Software Foundation (ASF) under one \\\n \tor more contributor license agreements.  See the NOTICE file distributed \\"}]}

