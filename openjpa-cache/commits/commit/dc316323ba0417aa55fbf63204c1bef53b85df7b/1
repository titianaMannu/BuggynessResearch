{"sha":"dc316323ba0417aa55fbf63204c1bef53b85df7b","node_id":"MDY6Q29tbWl0MjA2MzY0OmRjMzE2MzIzYmEwNDE3YWE1NWZiZjYzMjA0YzFiZWY1M2I4NWRmN2I=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2009-08-15T00:32:59Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2009-08-15T00:32:59Z"},"message":"OPENJPA-1112 JPA2 Query result of embeddable object can not be further updated\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@804419 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"94080cab026c64d00fe9976008dda75b7b7098d2","url":"https://api.github.com/repos/apache/openjpa/git/trees/94080cab026c64d00fe9976008dda75b7b7098d2"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/dc316323ba0417aa55fbf63204c1bef53b85df7b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/dc316323ba0417aa55fbf63204c1bef53b85df7b","html_url":"https://github.com/apache/openjpa/commit/dc316323ba0417aa55fbf63204c1bef53b85df7b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/dc316323ba0417aa55fbf63204c1bef53b85df7b/comments","author":null,"committer":null,"parents":[{"sha":"92fcf33575d4cae403591dde8737e4ce53ab9bc5","url":"https://api.github.com/repos/apache/openjpa/commits/92fcf33575d4cae403591dde8737e4ce53ab9bc5","html_url":"https://github.com/apache/openjpa/commit/92fcf33575d4cae403591dde8737e4ce53ab9bc5"}],"stats":{"total":149,"additions":147,"deletions":2},"files":[{"sha":"d14490f821c750bbc41712a42b062b3ef4a93eb8","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","status":"modified","additions":13,"deletions":2,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/dc316323ba0417aa55fbf63204c1bef53b85df7b/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/dc316323ba0417aa55fbf63204c1bef53b85df7b/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java?ref=dc316323ba0417aa55fbf63204c1bef53b85df7b","patch":"@@ -1628,6 +1628,12 @@ public void dirty(int field) {\n         dirty(field, null, true);\n     }\n \n+    private boolean isEmbeddedNotUpdatable() {\n+        // embeddable object returned from query result is not uptable\n+        return (_ownerId != null ||\n+            _state instanceof ENonTransState);\n+    }\n+\n     /**\n      * Make the given field dirty.\n      *\n@@ -1652,8 +1658,13 @@ private Boolean dirty(int field, Boolean mutate, boolean loadFetchGroup) {\n             }\n \n             if (isEmbedded()) {\n-                // notify owner of change\n-                _owner.dirty(_ownerIndex, Boolean.TRUE, loadFetchGroup);\n+                if (isEmbeddedNotUpdatable())\n+                    throw new UserException(_loc.get\n+                        (\"cant-update-embed-in-query-result\")).setFailedObject\n+                        (getManagedInstance());\n+                else\n+                    // notify owner of change\n+                    _owner.dirty(_ownerIndex, Boolean.TRUE, loadFetchGroup);\n             }\n \n             // is this a direct mutation of an sco field?"},{"sha":"6fddab0486fc520464d29bcbcac7aa969eae8995","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/dc316323ba0417aa55fbf63204c1bef53b85df7b/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/dc316323ba0417aa55fbf63204c1bef53b85df7b/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties?ref=dc316323ba0417aa55fbf63204c1bef53b85df7b","patch":"@@ -417,6 +417,8 @@ bad-lock-level: Invalid lock mode/level. Valid values are \\\n     \"optimistic-force-increment\"(25), \"pessimistic-read\"(30), \\\n     \"pessimistic-write\"(40) or \"pessimistic-force-increment\"(50). \\\n     Specified value: {0}.\n+cant-update-embed-in-query-result: Update of embedded object returned from \\\n+    query result is not allowed.\n declared-unbound-params: User specified parameter \"{1}\" does not appear in \\\n \tdeclared parameters \"{2}\" of the query \"{0}\".\n user-unbound-params: User has not bound parameter \"{1}\" for the query \"{0}\". \\"},{"sha":"64b4297d3365ddf243c17f117c7390c122a8bf96","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestUpdateEmbeddedQueryResult.java","status":"added","additions":132,"deletions":0,"changes":132,"blob_url":"https://github.com/apache/openjpa/blob/dc316323ba0417aa55fbf63204c1bef53b85df7b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestUpdateEmbeddedQueryResult.java","raw_url":"https://github.com/apache/openjpa/raw/dc316323ba0417aa55fbf63204c1bef53b85df7b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestUpdateEmbeddedQueryResult.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestUpdateEmbeddedQueryResult.java?ref=dc316323ba0417aa55fbf63204c1bef53b85df7b","patch":"@@ -0,0 +1,132 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.embed;\r\n+\r\n+import java.util.List;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityTransaction;\r\n+\r\n+import org.apache.openjpa.persistence.ArgumentException;\r\n+import org.apache.openjpa.persistence.RollbackException;\r\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n+\r\n+public class TestUpdateEmbeddedQueryResult extends SingleEMFTestCase {\r\n+   \r\n+    public int ID = 1;\r\n+\r\n+    public void setUp() {\r\n+        setUp(Embed.class,\r\n+            Embed_Embed.class, \r\n+            EntityA_Embed_Embed.class, \r\n+            DROP_TABLES);\r\n+    }\r\n+\r\n+    public void testEntityA_Embed_Embed_update() {\r\n+        createEntityA_Embed_Embed();\r\n+        updateEmbedded_EntityA_Embed_Embed();\r\n+    }\r\n+\r\n+    /*\r\n+     * Create EntityA_Embed_Embed\r\n+     */\r\n+    public void createEntityA_Embed_Embed() {\r\n+        EntityManager em = emf.createEntityManager();\r\n+        EntityTransaction tran = em.getTransaction();\r\n+        createEntityA_Embed_Embed(em, ID);\r\n+        tran.begin();\r\n+        em.flush();\r\n+        tran.commit();\r\n+        em.close();\r\n+    }\r\n+\r\n+    public void createEntityA_Embed_Embed(EntityManager em, int id) {\r\n+        EntityA_Embed_Embed a = new EntityA_Embed_Embed();\r\n+        a.setId(id);\r\n+        a.setName(\"a\" + id);\r\n+        a.setAge(id);\r\n+        Embed_Embed embed = createEmbed_Embed(em, id, 0);\r\n+        a.setEmbed(embed);\r\n+        em.persist(a);\r\n+    }\r\n+\r\n+    public Embed_Embed createEmbed_Embed(EntityManager em, int id, int idx) {\r\n+        Embed_Embed embed = new Embed_Embed();\r\n+        embed.setIntVal1(id * 100 + idx * 10 + 1);\r\n+        embed.setIntVal2(id * 100 + idx * 10 + 2);\r\n+        embed.setIntVal3(id * 100 + idx * 10 + 3);\r\n+        Embed embed1 = createEmbed(id, idx);\r\n+        embed.setEmbed(embed1);\r\n+        return embed;\r\n+    }\r\n+\r\n+    public Embed createEmbed(int id, int idx) {\r\n+        Embed embed = new Embed();\r\n+        embed.setIntVal1(id * 100 + idx * 10 + 4);\r\n+        embed.setIntVal2(id * 100 + idx * 10 + 5);\r\n+        embed.setIntVal3(id * 100 + idx * 10 + 6);\r\n+        return embed;\r\n+    }\r\n+\r\n+    /*\r\n+     * update embedded object returned from query\r\n+     */\r\n+    public void updateEmbedded_EntityA_Embed_Embed() {\r\n+        EntityManager em = emf.createEntityManager();\r\n+        // test update embedded object returned from query\r\n+        String query[] = {\r\n+            \"select a.embed from EntityA_Embed_Embed a\",\r\n+            \"select a.embed.embed from EntityA_Embed_Embed a\",\r\n+            \"select a.embed as e from EntityA_Embed_Embed a ORDER BY e\",\r\n+        };\r\n+        List rs = null;\r\n+        Embed_Embed embedembed = null;\r\n+        Embed embed = null;\r\n+        EntityTransaction tran = em.getTransaction();\r\n+        tran.begin();\r\n+        for (int i = 0; i < query.length; i++) {\r\n+            rs = em.createQuery(query[i]).getResultList();\r\n+            assertTrue(rs.size() > 0);\r\n+            try {\r\n+                switch (i) {\r\n+                case 0:\r\n+                case 2:\r\n+                    embedembed = (Embed_Embed) rs.get(0);\r\n+                    embedembed.getEmbed().setIntVal1(1111);\r\n+                    embedembed.setEmbed(embed);\r\n+                    break;\r\n+                case 1:\r\n+                    embed = (Embed) rs.get(0);\r\n+                    embed.setIntVal1(1111);\r\n+                    break;\r\n+                }\r\n+            } catch(ArgumentException e) {\r\n+                // as expected:\r\n+                // Update of embedded object returned from query result is not allowed.\r\n+            }\r\n+        }\r\n+        try {\r\n+            tran.commit();\r\n+        } catch(RollbackException e) {\r\n+            // as expected:\r\n+            // Update of embedded object returned from query result is not allowed.\r\n+        }\r\n+        em.close();\r\n+    }\r\n+}\r"}]}

