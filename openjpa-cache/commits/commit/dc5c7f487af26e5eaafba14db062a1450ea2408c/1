{"sha":"dc5c7f487af26e5eaafba14db062a1450ea2408c","node_id":"MDY6Q29tbWl0MjA2MzY0OmRjNWM3ZjQ4N2FmMjZlNWVhYWZiYTE0ZGIwNjJhMTQ1MGVhMjQwOGM=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-09-11T18:53:34Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-09-11T18:53:34Z"},"message":"OPENJPA-1285: Use tighter method signature\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@813982 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a06585b04ae54fc5d865c08034dc8ea704e7ab23","url":"https://api.github.com/repos/apache/openjpa/git/trees/a06585b04ae54fc5d865c08034dc8ea704e7ab23"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/dc5c7f487af26e5eaafba14db062a1450ea2408c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/dc5c7f487af26e5eaafba14db062a1450ea2408c","html_url":"https://github.com/apache/openjpa/commit/dc5c7f487af26e5eaafba14db062a1450ea2408c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/dc5c7f487af26e5eaafba14db062a1450ea2408c/comments","author":null,"committer":null,"parents":[{"sha":"38f31390a9cae34e9529eca252bfb0218b84ae79","url":"https://api.github.com/repos/apache/openjpa/commits/38f31390a9cae34e9529eca252bfb0218b84ae79","html_url":"https://github.com/apache/openjpa/commit/38f31390a9cae34e9529eca252bfb0218b84ae79"}],"stats":{"total":20,"additions":9,"deletions":11},"files":[{"sha":"3f32dd05cc29d62b52f388e3ebb39184cab58b7a","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ConcreteClassGenerator.java","status":"modified","additions":9,"deletions":11,"changes":20,"blob_url":"https://github.com/apache/openjpa/blob/dc5c7f487af26e5eaafba14db062a1450ea2408c/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ConcreteClassGenerator.java","raw_url":"https://github.com/apache/openjpa/raw/dc5c7f487af26e5eaafba14db062a1450ea2408c/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ConcreteClassGenerator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ConcreteClassGenerator.java?ref=dc5c7f487af26e5eaafba14db062a1450ea2408c","patch":"@@ -131,7 +131,6 @@\n         } catch (Exception e) {\n             throw new ExceptionInInitializerError(e);\n         }\n-        \n     }\n     \n     /** \n@@ -143,8 +142,7 @@\n      *  @param  params     the parameter values\n      *  @return            the new instance\n      */\n-    public static <T> T newInstance(Class<T> c, Class[] paramTypes,\n-        Object[] params) {\n+    public static <T> T newInstance(Class<T> c, Class<?>[] paramTypes, Object[] params) {\n         try {\n             return c.getConstructor(paramTypes).newInstance(params);\n         } catch (Exception e) {\n@@ -162,7 +160,7 @@\n     /** \n      *  @see #newInstance(java.lang.Class,java.lang.Class[],java.lang.Object[])\n      */\n-    public static <T> T newInstance(Class<T> c, Class paramType, Object param) {\n+    public static <T,P> T newInstance(Class<T> c, Class<? extends P> paramType, P param) {\n         return newInstance(c,\n             new Class[] { paramType },\n             new Object[] { param });\n@@ -171,8 +169,8 @@\n     /** \n      *  @see #newInstance(java.lang.Class,java.lang.Class[],java.lang.Object[])\n      */\n-    public static <T> T newInstance(Class<T> c, Class paramType1, Object param1,\n-        Class paramType2, Object param2) {\n+    public static <T,P1,P2> T newInstance(Class<T> c, Class<? extends P1> paramType1, P1 param1,\n+        Class<? extends P2> paramType2, P2 param2) {\n         return newInstance(c,\n             new Class[] { paramType1, paramType2 },\n             new Object[] { param1, param2 });\n@@ -181,8 +179,8 @@\n     /** \n      *  @see #newInstance(java.lang.Class,java.lang.Class[],java.lang.Object[])\n      */\n-    public static <T> T newInstance(Class<T> c, Class paramType1, Object param1,\n-        Class paramType2, Object param2, Class paramType3, Object param3) {\n+    public static <T,P1,P2,P3> T newInstance(Class<T> c, Class<? extends P1> paramType1, P1 param1,\n+        Class<? extends P2> paramType2, P2 param2, Class<? extends P3> paramType3, P3 param3) {\n         return newInstance(c,\n             new Class[] { paramType1, paramType2, paramType3 },\n             new Object[] { param1, param2, param3 });\n@@ -191,9 +189,9 @@\n     /** \n      *  @see #newInstance(java.lang.Class,java.lang.Class[],java.lang.Object[])\n      */\n-    public static <T> T newInstance(Class<T> c, Class paramType1, Object param1,\n-        Class paramType2, Object param2, Class paramType3, Object param3,\n-        Class paramType4, Object param4) {\n+    public static <T,P1,P2,P3,P4> T newInstance(Class<T> c, Class<? extends P1> paramType1, P1 param1,\n+        Class<? extends P2> paramType2, P2 param2, Class<? extends P3> paramType3, P3 param3,\n+        Class<? extends P4> paramType4, P4 param4) {\n         return newInstance(c,\n             new Class[] { paramType1, paramType2, paramType3, paramType4 },\n             new Object[] { param1, param2, param3, param4 });"}]}

