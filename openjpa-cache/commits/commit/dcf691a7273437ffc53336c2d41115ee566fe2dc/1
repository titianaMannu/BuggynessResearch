{"sha":"dcf691a7273437ffc53336c2d41115ee566fe2dc","node_id":"MDY6Q29tbWl0MjA2MzY0OmRjZjY5MWE3MjczNDM3ZmZjNTMzMzZjMmQ0MTExNWVlNTY2ZmUyZGM=","commit":{"author":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-10-08T04:03:06Z"},"committer":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-10-08T04:03:06Z"},"message":"Get rid of warning for product derivations that use an unsupported class\nversion.  Minor API changes.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@454072 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"94f8eb62cf3cb77bccfe0f6333316f0dae7b3d61","url":"https://api.github.com/repos/apache/openjpa/git/trees/94f8eb62cf3cb77bccfe0f6333316f0dae7b3d61"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/dcf691a7273437ffc53336c2d41115ee566fe2dc","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/dcf691a7273437ffc53336c2d41115ee566fe2dc","html_url":"https://github.com/apache/openjpa/commit/dcf691a7273437ffc53336c2d41115ee566fe2dc","comments_url":"https://api.github.com/repos/apache/openjpa/commits/dcf691a7273437ffc53336c2d41115ee566fe2dc/comments","author":null,"committer":null,"parents":[{"sha":"28910a737467b06f1fefb2d8acae8373664e82cc","url":"https://api.github.com/repos/apache/openjpa/commits/28910a737467b06f1fefb2d8acae8373664e82cc","html_url":"https://github.com/apache/openjpa/commit/28910a737467b06f1fefb2d8acae8373664e82cc"}],"stats":{"total":89,"additions":37,"deletions":52},"files":[{"sha":"a04e2729484dba32bb91aa33b68f4a0d58b99110","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCProductDerivation.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/dcf691a7273437ffc53336c2d41115ee566fe2dc/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCProductDerivation.java","raw_url":"https://github.com/apache/openjpa/raw/dcf691a7273437ffc53336c2d41115ee566fe2dc/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCProductDerivation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCProductDerivation.java?ref=dcf691a7273437ffc53336c2d41115ee566fe2dc","patch":"@@ -15,21 +15,21 @@\n  */\n package org.apache.openjpa.jdbc.conf;\n \n+import java.util.Map;\n+\n import org.apache.openjpa.conf.BrokerFactoryValue;\n import org.apache.openjpa.conf.OpenJPAProductDerivation;\n import org.apache.openjpa.jdbc.kernel.JDBCBrokerFactory;\n import org.apache.openjpa.lib.conf.AbstractProductDerivation;\n import org.apache.openjpa.lib.conf.ConfigurationProvider;\n \n-import java.util.Map;\n-\n /**\n  * Sets JDBC as default store.\n  */\n public class JDBCProductDerivation extends AbstractProductDerivation\n     implements OpenJPAProductDerivation {\n \n-    public void initializeBrokerFactoryValueAliases(Map m) {\n+    public void putBrokerFactoryAliases(Map m) {\n         m.put(\"jdbc\", JDBCBrokerFactory.class.getName());\n     }\n "},{"sha":"58f2b313fe4efa21cf95f84adb456e94fa0a57c6","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/BrokerFactoryValue.java","status":"modified","additions":8,"deletions":20,"changes":28,"blob_url":"https://github.com/apache/openjpa/blob/dcf691a7273437ffc53336c2d41115ee566fe2dc/openjpa-kernel/src/main/java/org/apache/openjpa/conf/BrokerFactoryValue.java","raw_url":"https://github.com/apache/openjpa/raw/dcf691a7273437ffc53336c2d41115ee566fe2dc/openjpa-kernel/src/main/java/org/apache/openjpa/conf/BrokerFactoryValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/BrokerFactoryValue.java?ref=dcf691a7273437ffc53336c2d41115ee566fe2dc","patch":"@@ -42,36 +42,24 @@\n \n     public static final String KEY = \"BrokerFactory\";\n \n-    private static final List _aliases = new ArrayList();\n-    private static final List _prefixes = new ArrayList(2);\n-\n+    private static final String[] _aliases;\n     static {\n         Map aliases = new HashMap();\n         aliases.put(\"abstractstore\", \n             AbstractStoreBrokerFactory.class.getName());\n         ProductDerivation[] ds = ProductDerivations.getProductDerivations();\n         for (int i = 0; i < ds.length; i++) {\n             if (ds[i] instanceof OpenJPAProductDerivation)\n-                ((OpenJPAProductDerivation) ds[i])\n-                    .initializeBrokerFactoryValueAliases(aliases);\n+                ((OpenJPAProductDerivation) ds[i]).putBrokerFactoryAliases\n+                    (aliases);\n         }\n \n+        _aliases = new String[aliases.size() * 2];\n+        int i = 0;\n         for (Iterator iter = aliases.entrySet().iterator(); iter.hasNext(); ) {\n             Map.Entry e = (Map.Entry) iter.next();\n-            addDefaultAlias((String) e.getKey(), (String) e.getValue());\n-        }\n-    }\n-\n-    /**\n-     * Add a mapping from <code>alias</code> to <code>cls</code> to the list\n-     * of default aliases for new values created after this invocation.\n-     */\n-    public static void addDefaultAlias(String alias, String cls) {\n-        if (_aliases.contains(alias)) {\n-            _aliases.set(_aliases.indexOf(alias) + 1, cls);\n-        } else {\n-            _aliases.add(alias);\n-            _aliases.add(cls);\n+            _aliases[i++] = (String) e.getKey();\n+            _aliases[i++] = (String) e.getValue();\n         }\n     }\n \n@@ -99,6 +87,6 @@ public static void set(ConfigurationProvider cp, String value) {\n \n     public BrokerFactoryValue() {\n         super(KEY, false);\n-        setAliases((String[]) _aliases.toArray(new String[_aliases.size()]));\n+        setAliases(_aliases);\n     }\n }"},{"sha":"487e4e7586520dee191a99cb023e2172604bf546","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAProductDerivation.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/dcf691a7273437ffc53336c2d41115ee566fe2dc/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAProductDerivation.java","raw_url":"https://github.com/apache/openjpa/raw/dcf691a7273437ffc53336c2d41115ee566fe2dc/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAProductDerivation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAProductDerivation.java?ref=dcf691a7273437ffc53336c2d41115ee566fe2dc","patch":"@@ -32,9 +32,9 @@\n     public static final int TYPE_PRODUCT_STORE = 400;\r\n \r\n     /**\r\n-     * Load default alias options into the BrokerFactoryValue's static data\r\n-     * structures. In the case of multiple ProductDerivations, this will be\r\n-     * invoked in the order defined by the type of the product derivation.\r\n+     * Load default alias options into the given map.  Each entry maps an\r\n+     * alias to a broker factory class name.  Replace anything perviously \r\n+     * under the desired keys.\r\n      */\r\n-    public void initializeBrokerFactoryValueAliases(Map aliases);\r\n+    public void putBrokerFactoryAliases(Map aliases);\r\n }\r"},{"sha":"b5b9a2131d0760c09d1ba10d9b552655880d5076","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAVersion.java","status":"modified","additions":10,"deletions":15,"changes":25,"blob_url":"https://github.com/apache/openjpa/blob/dcf691a7273437ffc53336c2d41115ee566fe2dc/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAVersion.java","raw_url":"https://github.com/apache/openjpa/raw/dcf691a7273437ffc53336c2d41115ee566fe2dc/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAVersion.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAVersion.java?ref=dcf691a7273437ffc53336c2d41115ee566fe2dc","patch":"@@ -44,13 +44,10 @@\n         String vers = pack == null ? null : pack.getImplementationVersion();\n         if (vers == null || vers.length() == 0)\n             vers = \"0.0.0\";\n-\n         VERSION_NUMBER = vers;\n \n         StringTokenizer tok = new StringTokenizer(VERSION_NUMBER, \".-\");\n-\n         int major, minor, patch;\n-\n         try {\n             major = tok.hasMoreTokens() ? Integer.parseInt(tok.nextToken()) : 0;\n         } catch (Exception e) {\n@@ -71,8 +68,8 @@\n \n         String revision = \"\";\n         try {\n-            InputStream in = OpenJPAVersion.class.\n-                getResourceAsStream(\"/META-INF/org.apache.openjpa.revision.properties\");\n+            InputStream in = OpenJPAVersion.class.getResourceAsStream\n+                (\"/META-INF/org.apache.openjpa.revision.properties\");\n             if (in != null) {\n                 try {\n                     Properties props = new Properties();\n@@ -102,12 +99,12 @@ public String toString() {\n         appendOpenJPABanner(buf);\n         buf.append(\"\\n\");\n \n-        getProperty(\"os.name\", buf).append(\"\\n\");\n-        getProperty(\"os.version\", buf).append(\"\\n\");\n-        getProperty(\"os.arch\", buf).append(\"\\n\\n\");\n+        appendProperty(\"os.name\", buf).append(\"\\n\");\n+        appendProperty(\"os.version\", buf).append(\"\\n\");\n+        appendProperty(\"os.arch\", buf).append(\"\\n\\n\");\n \n-        getProperty(\"java.version\", buf).append(\"\\n\");\n-        getProperty(\"java.vendor\", buf).append(\"\\n\\n\");\n+        appendProperty(\"java.version\", buf).append(\"\\n\");\n+        appendProperty(\"java.vendor\", buf).append(\"\\n\\n\");\n \n         buf.append(\"java.class.path:\\n\");\n         StringTokenizer tok = new StringTokenizer\n@@ -118,8 +115,7 @@ public String toString() {\n         }\n         buf.append(\"\\n\");\n \n-        getProperty(\"user.dir\", buf);\n-\n+        appendProperty(\"user.dir\", buf);\n         return buf.toString();\n     }\n \n@@ -133,8 +129,7 @@ public void appendOpenJPABanner(StringBuffer buf) {\n         buf.append(\"\\n\");\n     }\n \n-    private StringBuffer getProperty(String prop, StringBuffer buf) {\n-        buf.append(prop).append(\": \").append(System.getProperty(prop));\n-        return buf;\n+    private StringBuffer appendProperty(String prop, StringBuffer buf) {\n+        return buf.append(prop).append(\": \").append(System.getProperty(prop));\n     }\n }"},{"sha":"7dcf1991627a43bc7754119a31261a0c0e528f67","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ProductDerivations.java","status":"modified","additions":7,"deletions":2,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/dcf691a7273437ffc53336c2d41115ee566fe2dc/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ProductDerivations.java","raw_url":"https://github.com/apache/openjpa/raw/dcf691a7273437ffc53336c2d41115ee566fe2dc/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ProductDerivations.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ProductDerivations.java?ref=dcf691a7273437ffc53336c2d41115ee566fe2dc","patch":"@@ -33,6 +33,9 @@\n  */\n public class ProductDerivations {\n \n+    private static final Localizer _loc = Localizer.forPackage\n+        (ProductDerivations.class);\n+\n     private static final ProductDerivation[] _derivations;\n     private static final String[] _prefixes;\n     static {\n@@ -43,9 +46,11 @@\n             try {\n                 Class cls = Class.forName(pds[i], true, cl);\n                 derivations.add(cls.newInstance());\n+            } catch (UnsupportedClassVersionError ucve) {\n+                // ignore so that < 1.5 users don't get errors about\n+                // 1.5 products they aren't using\n             } catch (Throwable t) {\n-                Localizer loc = Localizer.forPackage(ProductDerivations.class);\n-                System.err.println(loc.get(\"bad-product-derivation\", pds[i], \n+                System.err.println(_loc.get(\"bad-product-derivation\", pds[i], \n                     t));\n             }\n         }"},{"sha":"86be13348492b4afcd4302dd5991d33fe888c46d","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCPersistenceProductDerivation.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/dcf691a7273437ffc53336c2d41115ee566fe2dc/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCPersistenceProductDerivation.java","raw_url":"https://github.com/apache/openjpa/raw/dcf691a7273437ffc53336c2d41115ee566fe2dc/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCPersistenceProductDerivation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCPersistenceProductDerivation.java?ref=dcf691a7273437ffc53336c2d41115ee566fe2dc","patch":"@@ -15,6 +15,8 @@\n  */\n package org.apache.openjpa.persistence.jdbc;\n \n+import java.util.Map;\n+\n import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.conf.OpenJPAProductDerivation;\n import org.apache.openjpa.jdbc.conf.JDBCConfigurationImpl;\n@@ -24,8 +26,6 @@\n import org.apache.openjpa.persistence.FetchPlan;\n import org.apache.openjpa.persistence.PersistenceProductDerivation;\n \n-import java.util.Map;\n-\n /**\n  * Sets JDBC-specific JPA specification defaults.\n  *\n@@ -36,7 +36,7 @@\n     extends AbstractProductDerivation \n     implements OpenJPAProductDerivation {\n     \n-    public void initializeBrokerFactoryValueAliases(Map m) {\n+    public void putBrokerFactoryAliases(Map m) {\n     }\n \n     public int getType() {"},{"sha":"406105b0db17ce9bada042f2ab4c6bebaa647141","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/dcf691a7273437ffc53336c2d41115ee566fe2dc/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java","raw_url":"https://github.com/apache/openjpa/raw/dcf691a7273437ffc53336c2d41115ee566fe2dc/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java?ref=dcf691a7273437ffc53336c2d41115ee566fe2dc","patch":"@@ -70,7 +70,7 @@\n     private static final Localizer _loc = Localizer.forPackage\n         (PersistenceProductDerivation.class);\n \n-    public void initializeBrokerFactoryValueAliases(Map m) {\n+    public void putBrokerFactoryAliases(Map m) {\n     }\n \n     public int getType() {\n@@ -326,10 +326,8 @@ private PersistenceUnitInfoImpl findUnit(List<PersistenceUnitInfoImpl>\n             loader = Thread.currentThread().getContextClassLoader();\n         try {\n             if (PersistenceProviderImpl.class.isAssignableFrom\n-                (Class.forName(provider, false, loader))) {\n-                log(_loc.get(\"extended-provider\", provider).getMessage());\n+                (Class.forName(provider, false, loader)))\n                 return true;\n-            }\n         } catch (Throwable t) {\n             log(_loc.get(\"unloadable-provider\", provider, t).getMessage());\n             return false;"},{"sha":"51a541ea39f37b02fedcc153923973179427dea6","filename":"openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/dcf691a7273437ffc53336c2d41115ee566fe2dc/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/dcf691a7273437ffc53336c2d41115ee566fe2dc/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties?ref=dcf691a7273437ffc53336c2d41115ee566fe2dc","patch":"@@ -86,7 +86,6 @@ system-listener-err: An error occurred invoking system entity listener \\\n no-transaction: Cannot perform operation with no transaction.\n multiple-methods-on-callback: Class \"{0}\" declares method \"{1}\" as well \\\n \tas \"{2}\" for handling the same \"{3}\" callback. \n-extended-provider: NOTE: Found extended persistence provider \"{0}\".\n unloadable-provider: WARNING: Unable to load persistence provider \"{0}\" due \\\n     to \"{1}\"\n unrecognized-provider: WARNING: Found unrecognized persistence provider \"{0}\" \\"}]}

