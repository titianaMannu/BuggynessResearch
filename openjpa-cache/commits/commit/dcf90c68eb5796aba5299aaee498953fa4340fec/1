{"sha":"dcf90c68eb5796aba5299aaee498953fa4340fec","node_id":"MDY6Q29tbWl0MjA2MzY0OmRjZjkwYzY4ZWI1Nzk2YWJhNTI5OWFhZWU0OTg5NTNmYTQzNDBmZWM=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2011-05-26T13:28:00Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2011-05-26T13:28:00Z"},"message":"OPENJPA-2005: check for unexpected (null) sequence names in PostgresDictionary\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1127898 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"987a57b6e10d8ba1e7ecce69f19270632f14ab32","url":"https://api.github.com/repos/apache/openjpa/git/trees/987a57b6e10d8ba1e7ecce69f19270632f14ab32"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/dcf90c68eb5796aba5299aaee498953fa4340fec","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/dcf90c68eb5796aba5299aaee498953fa4340fec","html_url":"https://github.com/apache/openjpa/commit/dcf90c68eb5796aba5299aaee498953fa4340fec","comments_url":"https://api.github.com/repos/apache/openjpa/commits/dcf90c68eb5796aba5299aaee498953fa4340fec/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"7b0d1140ac54eb910fa00adf7b2e483a336df41d","url":"https://api.github.com/repos/apache/openjpa/commits/7b0d1140ac54eb910fa00adf7b2e483a336df41d","html_url":"https://github.com/apache/openjpa/commit/7b0d1140ac54eb910fa00adf7b2e483a336df41d"}],"stats":{"total":32,"additions":24,"deletions":8},"files":[{"sha":"5ccd5895d6cf2b8fa6665469e8d33d5d7cdace67","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PostgresDictionary.java","status":"modified","additions":24,"deletions":8,"changes":32,"blob_url":"https://github.com/apache/openjpa/blob/dcf90c68eb5796aba5299aaee498953fa4340fec/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PostgresDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/dcf90c68eb5796aba5299aaee498953fa4340fec/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PostgresDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PostgresDictionary.java?ref=dcf90c68eb5796aba5299aaee498953fa4340fec","patch":"@@ -426,15 +426,26 @@ public boolean isOwnedSequence(DBIdentifier name, DBIdentifier schema, Connectio\n         // sequence is owned.  This is not perfect, but considerably better than\n         // considering all sequences suffixed with _seq are db owned.\n         String[][] namePairs = buildNames(strName);\n-        try {\n-            for (int i = 0; i < namePairs.length; i++) {\n-                if (queryOwnership(conn, namePairs[i], schema)) {\n-                    return true;\n+        \n+        if(namePairs != null) { // unable to parse strName. \n+            try {\n+                for (int i = 0; i < namePairs.length; i++) {\n+                    if (queryOwnership(conn, namePairs[i], schema)) {\n+                        return true;\n+                    }\n                 }\n+            } catch (Throwable t) {\n+                if (log.isWarnEnabled())\n+                    log.warn(_loc.get(\"psql-owned-seq-warning\"), t);\n+                return isOwnedSequence(strName);\n             }\n-        } catch (Throwable t) {\n-            if (log.isWarnEnabled())\n-                log.warn(_loc.get(\"psql-owned-seq-warning\"), t);\n+        } else { \n+            if(log.isTraceEnabled()) { \n+                log.trace(String.format(\"Unable to query ownership for sequence %s using the connection. \" +\n+                \t\t\"Falling back to simpler detection based on the name\", \n+                    name.getName()));\n+            }\n+            \n             return isOwnedSequence(strName);\n         }\n         return false;\n@@ -496,14 +507,19 @@ private boolean queryOwnership(Connection conn, String[] namePair,\n      * names can contain underscores so permutations of these names must be \n      * produced for ownership verification.\n      * @param strName\n-     * @return\n+     * @return If strName cannot be split into three or more parts null will be returned.\n+     *  Otherwise a String[][] of the potential sequence names will be returned.\n      */\n     private String[][] buildNames(String strName) {\n         // split the sequence name into components\n         // owned sequences are of the form <table>_<col>_seq\n         String[] parts = Normalizer.splitName(strName, \"_\");\n         \n         if (parts == null || parts.length < 3) {\n+            if(log.isTraceEnabled()) { \n+                log.trace(String.format(\"Unable to parse sequences from %s. Found %s parts. Returning null\", \n+                    strName, parts == null ? 0 : parts.length));\n+            }\n             return null;\n         }\n         // Simple and most common case"}]}

