{"sha":"dd210a2831e005f3f51ec85b00ae56699ecde27a","node_id":"MDY6Q29tbWl0MjA2MzY0OmRkMjEwYTI4MzFlMDA1ZjNmNTFlYzg1YjAwYWU1NjY5OWVjZGUyN2E=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-03-10T23:19:25Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-03-10T23:19:25Z"},"message":"OPENJPA-1558:\nCheck whether the result type is in the same entity hierarchy before using discriminator value when loading a relationship.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@921620 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"9fea33ac10f32d5efb5bc86d6ace9acfe811993f","url":"https://api.github.com/repos/apache/openjpa/git/trees/9fea33ac10f32d5efb5bc86d6ace9acfe811993f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/dd210a2831e005f3f51ec85b00ae56699ecde27a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/dd210a2831e005f3f51ec85b00ae56699ecde27a","html_url":"https://github.com/apache/openjpa/commit/dd210a2831e005f3f51ec85b00ae56699ecde27a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/dd210a2831e005f3f51ec85b00ae56699ecde27a/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"6234dbddfcb8b17ed3f50221517d5c3823097a5e","url":"https://api.github.com/repos/apache/openjpa/commits/6234dbddfcb8b17ed3f50221517d5c3823097a5e","html_url":"https://github.com/apache/openjpa/commit/6234dbddfcb8b17ed3f50221517d5c3823097a5e"}],"stats":{"total":262,"additions":257,"deletions":5},"files":[{"sha":"4f5d050f2c617ed029304d508f618385559eb04b","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/InValueDiscriminatorStrategy.java","status":"modified","additions":17,"deletions":5,"changes":22,"blob_url":"https://github.com/apache/openjpa/blob/dd210a2831e005f3f51ec85b00ae56699ecde27a/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/InValueDiscriminatorStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/dd210a2831e005f3f51ec85b00ae56699ecde27a/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/InValueDiscriminatorStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/InValueDiscriminatorStrategy.java?ref=dd210a2831e005f3f51ec85b00ae56699ecde27a","patch":"@@ -111,15 +111,26 @@ public boolean select(Select sel, ClassMapping mapping) {\n \n     public Class getClass(JDBCStore store, ClassMapping base, Result res)\n         throws SQLException, ClassNotFoundException {\n-        if (isFinal || !res.contains(disc.getColumns()[0])\n-            || (base.getPCSuperclass() == null\n-            && base.getJoinablePCSubclassMappings().length == 0))\n+        if (isFinal \n+                || !useDiscrimColumn(base, res)\n+                || (base.getPCSuperclass() == null && base.getJoinablePCSubclassMappings().length == 0)) {\n             return base.getDescribedType();\n+        }\n \n-        Object cls =\n-                res.getObject(disc.getColumns()[0], disc.getJavaType(), null);\n+        Object cls = res.getObject(disc.getColumns()[0], disc.getJavaType(), null);\n         return getClass(cls, store);\n     }\n+    \n+    private final boolean useDiscrimColumn(ClassMapping base, Result res) throws SQLException {\n+        if (res.getBaseMapping() != null && base != null) {\n+            // check whether the result type is assignable to the base mapping.\n+            // if not assignable the discriminator value will not be correct.\n+            if (!base.getDescribedType().isAssignableFrom(res.getBaseMapping().getDescribedType())) {\n+                return false;\n+            }\n+        }\n+        return res.contains(disc.getColumns()[0]);\n+    }\n \n     public boolean hasClassConditions(ClassMapping base, boolean subclasses) {\n         // if selecting the first mapped class and all subclasses, no need\n@@ -165,3 +176,4 @@ public SQLBuffer getClassConditions(Select sel, Joins joins,\n         return sql;\n     }\n }\n+"},{"sha":"f0b2036b628f97f1e30c1db5bf7311f7a81c61f3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/discriminator/fetch/Employee.java","status":"added","additions":42,"deletions":0,"changes":42,"blob_url":"https://github.com/apache/openjpa/blob/dd210a2831e005f3f51ec85b00ae56699ecde27a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/discriminator/fetch/Employee.java","raw_url":"https://github.com/apache/openjpa/raw/dd210a2831e005f3f51ec85b00ae56699ecde27a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/discriminator/fetch/Employee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/discriminator/fetch/Employee.java?ref=dd210a2831e005f3f51ec85b00ae56699ecde27a","patch":"@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.discriminator.fetch;\n+\n+import javax.persistence.DiscriminatorValue;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Table;\n+\n+@Entity(name=\"D_F_Employee\")\n+@Table(name=\"D_F_EMPLOYEE\")\n+@DiscriminatorValue(value=\"E\")\n+public class Employee extends Person {\n+    @ManyToOne(fetch=FetchType.LAZY)\n+    private Manager manager;\n+\n+    public Manager getManager() {\n+        return manager;\n+    }\n+\n+    public void setManager(Manager manager) {\n+        this.manager = manager;\n+    } \n+\n+}"},{"sha":"ddc48738849b011aa89f86503f2f3f12ba96101f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/discriminator/fetch/Manager.java","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/apache/openjpa/blob/dd210a2831e005f3f51ec85b00ae56699ecde27a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/discriminator/fetch/Manager.java","raw_url":"https://github.com/apache/openjpa/raw/dd210a2831e005f3f51ec85b00ae56699ecde27a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/discriminator/fetch/Manager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/discriminator/fetch/Manager.java?ref=dd210a2831e005f3f51ec85b00ae56699ecde27a","patch":"@@ -0,0 +1,43 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.discriminator.fetch;\n+\n+import java.util.Collection;\n+\n+import javax.persistence.DiscriminatorValue;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Table;\n+\n+@Entity(name=\"D_F_Manager\")\n+@Table(name=\"D_F_MANAGER\")\n+@DiscriminatorValue(value=\"M\")\n+public class Manager extends Person {\n+    @OneToMany(fetch=FetchType.LAZY,mappedBy=\"manager\")\n+    Collection<Employee> employees;\n+\n+    public Collection<Employee> getEmployees() {\n+        return employees;\n+    }\n+\n+    public void setEmployees(Collection<Employee> employees) {\n+        this.employees = employees;\n+    }\n+}"},{"sha":"defe5af1028a3cbb1d46f6b7bd1c5714a156a774","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/discriminator/fetch/Person.java","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/apache/openjpa/blob/dd210a2831e005f3f51ec85b00ae56699ecde27a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/discriminator/fetch/Person.java","raw_url":"https://github.com/apache/openjpa/raw/dd210a2831e005f3f51ec85b00ae56699ecde27a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/discriminator/fetch/Person.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/discriminator/fetch/Person.java?ref=dd210a2831e005f3f51ec85b00ae56699ecde27a","patch":"@@ -0,0 +1,43 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.discriminator.fetch;\n+\n+import javax.persistence.DiscriminatorValue;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.Inheritance;\n+import javax.persistence.InheritanceType;\n+import javax.persistence.Table;\n+\n+@Entity(name=\"D_F_Person\")\n+@Table(name=\"D_F_PERSON\")\n+@Inheritance(strategy = InheritanceType.JOINED)\n+@DiscriminatorValue(value=\"P\")\n+public abstract class Person {\n+    @Id\n+    private int id;\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+}"},{"sha":"16dfe8bfab54410a8d002017fb3f6bc7932ed291","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/discriminator/fetch/TestLazyFetch.java","status":"added","additions":112,"deletions":0,"changes":112,"blob_url":"https://github.com/apache/openjpa/blob/dd210a2831e005f3f51ec85b00ae56699ecde27a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/discriminator/fetch/TestLazyFetch.java","raw_url":"https://github.com/apache/openjpa/raw/dd210a2831e005f3f51ec85b00ae56699ecde27a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/discriminator/fetch/TestLazyFetch.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/discriminator/fetch/TestLazyFetch.java?ref=dd210a2831e005f3f51ec85b00ae56699ecde27a","patch":"@@ -0,0 +1,112 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.discriminator.fetch;\n+\n+import java.util.HashSet;\n+import java.util.List;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import javax.persistence.EntityTransaction;\n+\n+import org.apache.openjpa.persistence.test.PersistenceTestCase;\n+\n+public class TestLazyFetch extends PersistenceTestCase {\n+    private static int N_EMPS = 3;\n+\n+    public EntityManagerFactory newEmf() {\n+        EntityManagerFactory emf = createEMF(Person.class, Employee.class, Manager.class);\n+        assertNotNull(\"Unable to create EntityManagerFactory\", emf);\n+        return emf;\n+    }\n+\n+    public void setUp() {\n+        EntityManagerFactory emf = newEmf();\n+        EntityManager em = emf.createEntityManager();\n+        EntityTransaction tran = em.getTransaction();\n+\n+        // cleanup from previous execution\n+        tran.begin();\n+        em.createQuery(\"Delete from D_F_Manager\").executeUpdate();\n+        em.createQuery(\"Delete from D_F_Employee\").executeUpdate();\n+        tran.commit();\n+\n+        // populate a small graph.\n+        tran.begin();\n+        Manager m = new Manager();\n+        m.setId(10);\n+        m.setEmployees(new HashSet<Employee>());\n+        em.persist(m);\n+\n+        Employee e;\n+        for (int i = 0; i < N_EMPS; i++) {\n+            e = new Employee();\n+            e.setId(i + 1);\n+            e.setManager(m);\n+            m.getEmployees().add(e);\n+            em.persist(e);\n+        }\n+        tran.commit();\n+\n+        em.close();\n+        emf.close();\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testFetchOneSideFirst() {\n+        EntityManagerFactory emf = newEmf();\n+        EntityManager em = emf.createEntityManager();\n+\n+        List<Manager> managers = em.createQuery(\"Select m from D_F_Manager m\").getResultList();\n+        assertEquals(1, managers.size());\n+        Manager m = managers.get(0);\n+        \n+        List<Employee> emps = em.createQuery(\"Select e from D_F_Employee e\").getResultList();\n+        assertEquals(N_EMPS, emps.size());\n+        \n+        for(Employee e : emps) { \n+            assertNotNull(e.getManager());\n+            assertTrue(m.getEmployees().contains(e));\n+            assertEquals(m, e.getManager());\n+        }\n+        em.close();\n+        emf.close();\n+    }   \n+    \n+    @SuppressWarnings(\"unchecked\")\n+    public void testFetchManySideFirst() {\n+        EntityManagerFactory emf = newEmf();\n+        EntityManager em = emf.createEntityManager();\n+        \n+        List<Employee> emps = em.createQuery(\"Select e from D_F_Employee e\").getResultList();\n+        assertEquals(N_EMPS, emps.size());\n+        \n+        List<Manager> managers = em.createQuery(\"Select m from D_F_Manager m\").getResultList();\n+        assertEquals(1, managers.size());\n+        Manager m = managers.get(0);\n+        \n+        for(Employee e : emps) { \n+            assertNotNull(e.getManager());\n+            assertTrue(m.getEmployees().contains(e));\n+            assertEquals(m, e.getManager());\n+        }\n+        em.close();\n+        emf.close();\n+    }\n+}"}]}

