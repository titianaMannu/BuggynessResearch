{"sha":"dda1e8ef6f2ac6aacf75934425aa00fae9355838","node_id":"MDY6Q29tbWl0MjA2MzY0OmRkYTFlOGVmNmYyYWM2YWFjZjc1OTM0NDI1YWEwMGZhZTkzNTU4Mzg=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-21T00:45:23Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-21T00:45:23Z"},"message":"OPENJPA-293. Allow runtime redefinition to be disabled via a configuration setting. We really should sweep through the code and change ImplHelper to take a Configuration as an argument, but that won't change the behavior; it'll just make some of the validations more eager.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@567886 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ef5137d40958db92fd714ec70667f7cdea3c02e8","url":"https://api.github.com/repos/apache/openjpa/git/trees/ef5137d40958db92fd714ec70667f7cdea3c02e8"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/dda1e8ef6f2ac6aacf75934425aa00fae9355838","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/dda1e8ef6f2ac6aacf75934425aa00fae9355838","html_url":"https://github.com/apache/openjpa/commit/dda1e8ef6f2ac6aacf75934425aa00fae9355838","comments_url":"https://api.github.com/repos/apache/openjpa/commits/dda1e8ef6f2ac6aacf75934425aa00fae9355838/comments","author":null,"committer":null,"parents":[{"sha":"8dd6857f67991d646727bfd3597d8b5b9b03d69f","url":"https://api.github.com/repos/apache/openjpa/commits/8dd6857f67991d646727bfd3597d8b5b9b03d69f","html_url":"https://github.com/apache/openjpa/commit/8dd6857f67991d646727bfd3597d8b5b9b03d69f"}],"stats":{"total":193,"additions":142,"deletions":51},"files":[{"sha":"34e575c7c58c55ceb020e0c0ab84501300210057","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Param.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/dda1e8ef6f2ac6aacf75934425aa00fae9355838/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Param.java","raw_url":"https://github.com/apache/openjpa/raw/dda1e8ef6f2ac6aacf75934425aa00fae9355838/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Param.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Param.java?ref=dda1e8ef6f2ac6aacf75934425aa00fae9355838","patch":"@@ -64,7 +64,8 @@ public Class getType() {\n \n     public void setImplicitType(Class type) {\n         _type = type;\n-        _container = (getMetaData() == null || !ImplHelper.isManagedType(type))\n+        _container = (getMetaData() == null || !ImplHelper.isManagedType(\n+            getMetaData().getRepository().getConfiguration(), type))\n             && (Collection.class.isAssignableFrom(type)\n             || Map.class.isAssignableFrom(type));\n     }"},{"sha":"87f611bd9486a28783c07f586cc30f97fd65f9e1","filename":"openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/ManagedClassSubclasser.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/dda1e8ef6f2ac6aacf75934425aa00fae9355838/openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/ManagedClassSubclasser.java","raw_url":"https://github.com/apache/openjpa/raw/dda1e8ef6f2ac6aacf75934425aa00fae9355838/openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/ManagedClassSubclasser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/ManagedClassSubclasser.java?ref=dda1e8ef6f2ac6aacf75934425aa00fae9355838","patch":"@@ -62,7 +62,9 @@\n      * will need to do state comparisons to detect changes to newly inserted\r\n      * instances after a flush has been called.\r\n      *\r\n-     * @return the new subclasses\r\n+     * @return the new subclasses, or <code>null</code> if subclassing is\r\n+     * disabled in <code>conf</code> or <code>classes</code> is\r\n+     * <code>null</code>.\r\n      *\r\n      * @since 1.0.0\r\n      */\r\n@@ -74,6 +76,8 @@\n             return null;\r\n         if (classes.size() == 0)\r\n             return Collections.EMPTY_LIST;\r\n+        if (!conf.getRuntimeClassOptimization())\r\n+            return null;\r\n \r\n         Log log = conf.getLog(OpenJPAConfiguration.LOG_ENHANCE);\r\n         boolean redefine = ClassRedefiner.canRedefineClasses();\r"},{"sha":"60101abe677923916eaa2c939b5385fb9e4839b6","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfiguration.java","status":"modified","additions":30,"deletions":9,"changes":39,"blob_url":"https://github.com/apache/openjpa/blob/dda1e8ef6f2ac6aacf75934425aa00fae9355838/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/dda1e8ef6f2ac6aacf75934425aa00fae9355838/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfiguration.java?ref=dda1e8ef6f2ac6aacf75934425aa00fae9355838","patch":"@@ -1337,24 +1337,24 @@\n \t *\n \t * @since 0.3.2.3\n \t */\n-\tpublic void setRetryClassRegistration (boolean warn);\n+\tpublic void setRetryClassRegistration(boolean warn);\n \n-\t/**\n-\t * Wrapper for JCA usage of {@link #setRetryClassRegistration(boolean)}.\n-\t *\n-\t * @since 0.3.2.3\n-\t */\n-\tpublic void setRetryClassRegistration (Boolean warn);\n+    /**\n+     * Wrapper for JCA usage of {@link #setRetryClassRegistration(boolean)}.\n+     *\n+     * @since 0.3.2.3\n+     */\n+\tpublic void setRetryClassRegistration(Boolean warn);\n \n \t/**\n \t * Backwards compatibility options.\n \t */\n-\tpublic String getCompatibility ();\n+\tpublic String getCompatibility();\n \n \t/**\n \t * Backwards compatibility options.\n \t */\n-\tpublic void setCompatibility (String compatibility);\n+\tpublic void setCompatibility(String compatibility);\n \n \t/**\n \t * Backwards compatibility options.\n@@ -1395,4 +1395,25 @@\n      * @since 1.0.0\n      */\n     public BrokerFactoryEventManager getBrokerFactoryEventManager();\n+\n+    /**\n+     * Whether or not runtime class optimization is enabled.\n+     *\n+     * @since 1.0.0\n+     */\n+    public boolean getRuntimeClassOptimization();\n+\n+    /**\n+     * Whether or not runtime class optimization is enabled.\n+     *\n+     * @since 1.0.0\n+     */\n+    public void setRuntimeClassOptimization(Boolean enabled);\n+\n+    /**\n+     * Wrapper for JCA usage of {@link #setRetryClassRegistration(boolean)}.\n+     *\n+     * @since 1.0.0\n+     */\n+    public void setRuntimeClassOptimization(boolean enabled);\n }"},{"sha":"121046fb9adc10f02104015176486ab5569290d0","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","status":"modified","additions":18,"deletions":2,"changes":20,"blob_url":"https://github.com/apache/openjpa/blob/dda1e8ef6f2ac6aacf75934425aa00fae9355838/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/dda1e8ef6f2ac6aacf75934425aa00fae9355838/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java?ref=dda1e8ef6f2ac6aacf75934425aa00fae9355838","patch":"@@ -131,6 +131,7 @@\n     public ObjectValue orphanedKeyPlugin;\n     public ObjectValue compatibilityPlugin;\n     public QueryCompilationCacheValue queryCompilationCachePlugin;\n+    public BooleanValue runtimeClassOptimization;\n \n     // custom values\n     public BrokerFactoryValue brokerFactoryPlugin;\n@@ -479,6 +480,9 @@ public OpenJPAConfigurationImpl(boolean derivations, boolean loadGlobals) {\n             \"getQueryCompilationCacheInstance\");\n         addValue(queryCompilationCachePlugin);\n         \n+        runtimeClassOptimization = addBoolean(\"RuntimeClassOptimization\");\n+        runtimeClassOptimization.setDefault(\"true\");\n+\n         // initialize supported options that some runtimes may not support\n         supportedOptions.add(OPTION_NONTRANS_READ);\n         supportedOptions.add(OPTION_OPTIMISTIC);\n@@ -1422,6 +1426,19 @@ public BrokerFactoryEventManager getBrokerFactoryEventManager() {\n         return _brokerFactoryEventManager;\n     }\n \n+    public boolean getRuntimeClassOptimization() {\n+        return runtimeClassOptimization.get();\n+    }\n+\n+    public void setRuntimeClassOptimization(Boolean enabled) {\n+        setRuntimeClassOptimization(enabled.booleanValue());\n+    }\n+\n+    public void setRuntimeClassOptimization(boolean enabled) {\n+        assertNotReadOnly();\n+        runtimeClassOptimization.set(enabled);\n+    }\n+\n     public void instantiateAll() {\n         super.instantiateAll();\n         getMetaDataRepositoryInstance();\n@@ -1439,7 +1456,6 @@ public Log getConfigurationLog() {\n     }\n     \n     public Value[] getDynamicValues() {\n-    \treturn new Value[] {dataCacheTimeout,fetchBatchSize,lockTimeout};\n+    \treturn new Value[] { dataCacheTimeout, fetchBatchSize, lockTimeout };\n     }\n-\n }"},{"sha":"43f962ebaf33b09171be6fc083da7b4e5d32df49","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryKey.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/dda1e8ef6f2ac6aacf75934425aa00fae9355838/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryKey.java","raw_url":"https://github.com/apache/openjpa/raw/dda1e8ef6f2ac6aacf75934425aa00fae9355838/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryKey.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryKey.java?ref=dda1e8ef6f2ac6aacf75934425aa00fae9355838","patch":"@@ -181,7 +181,8 @@ private static QueryKey createKey(QueryContext q, boolean packed,\n                 case JavaTypes.COLLECTION:\n                 case JavaTypes.MAP:\n                 case JavaTypes.OBJECT:\n-                    if (!ImplHelper.isManagedType(types[i]))\n+                    if (!ImplHelper.isManagedType(\n+                        q.getStoreContext().getConfiguration(), types[i]))\n                         return null;\n                     break;\n             }"},{"sha":"ed9cbaf74769ab8c6fede6a9b04973362992dbb9","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","status":"modified","additions":2,"deletions":6,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/dda1e8ef6f2ac6aacf75934425aa00fae9355838/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/dda1e8ef6f2ac6aacf75934425aa00fae9355838/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java?ref=dda1e8ef6f2ac6aacf75934425aa00fae9355838","patch":"@@ -1596,10 +1596,8 @@ public boolean resolve(int mode) {\n \n         int val = _repos.getValidate();\n         boolean runtime = (val & _repos.VALIDATE_RUNTIME) != 0;\n-        // ##### what to do here? This should essentially never fail anymore.\n-        // ##### Maybe remove altogether?\n         boolean validate =\n-            !ImplHelper.isManagedType(_type)\n+            !ImplHelper.isManagedType(getRepository().getConfiguration(), _type)\n             || (val & MetaDataRepository.VALIDATE_UNENHANCED) == 0;\n \n         // we only do any actions for metadata mode\n@@ -1628,10 +1626,8 @@ protected void resolveMeta(boolean runtime) {\n             log.trace(_loc.get((embed) ? \"resolve-embed-meta\" : \"resolve-meta\",\n                 this + \"@\" + System.identityHashCode(this)));\n \n-        // ##### what to do here? This should essentially never fail anymore.\n-        // ##### either remove, or convert to warning.\n         if (runtime && !_type.isInterface() &&\n-            !ImplHelper.isManagedType(_type))\n+            !ImplHelper.isManagedType(getRepository().getConfiguration(),_type))\n             throw new MetaDataException(_loc.get(\"not-enhanced\", _type));\n \n         // are we the target of an embedded value?"},{"sha":"135c52b1d63fccdf393e178d9fc9e063e3bc0f24","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/dda1e8ef6f2ac6aacf75934425aa00fae9355838/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/dda1e8ef6f2ac6aacf75934425aa00fae9355838/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java?ref=dda1e8ef6f2ac6aacf75934425aa00fae9355838","patch":"@@ -1639,11 +1639,9 @@ public boolean resolve(int mode) {\n \n         MetaDataRepository repos = getRepository();\n         int validate = repos.getValidate();\n-        // ##### what to do here? This should essentially never fail anymore.\n-        // ##### Maybe remove the isManagedType check.\n         if ((validate & MetaDataRepository.VALIDATE_META) != 0\n-            && (!ImplHelper\n-            .isManagedType(_owner.getDescribedType())\n+            && (!ImplHelper.isManagedType(repos.getConfiguration(),\n+                _owner.getDescribedType())\n             || (validate & MetaDataRepository.VALIDATE_UNENHANCED) == 0)) {\n             validateLRS();\n             if ((validate & repos.VALIDATE_RUNTIME) == 0)"},{"sha":"0d879a67257d5d740f393bbc375927722f368c77","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/dda1e8ef6f2ac6aacf75934425aa00fae9355838/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","raw_url":"https://github.com/apache/openjpa/raw/dda1e8ef6f2ac6aacf75934425aa00fae9355838/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java?ref=dda1e8ef6f2ac6aacf75934425aa00fae9355838","patch":"@@ -288,7 +288,7 @@ public synchronized ClassMetaData getMetaData(Class cls,\n         ClassMetaData meta = getMetaDataInternal(cls, envLoader);\n         if (meta == null && mustExist) {\n             if (cls != null &&\n-                !ImplHelper.isManagedType(cls))\n+                !ImplHelper.isManagedType(_conf, cls))\n                 throw new MetaDataException(_loc.get(\"no-meta-notpc\", cls)).\n                     setFatal(false);\n "},{"sha":"d7ec2d10fc3e2f8d5dddf66dd260936046c72ff8","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/AbstractChangeTracker.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/dda1e8ef6f2ac6aacf75934425aa00fae9355838/openjpa-kernel/src/main/java/org/apache/openjpa/util/AbstractChangeTracker.java","raw_url":"https://github.com/apache/openjpa/raw/dda1e8ef6f2ac6aacf75934425aa00fae9355838/openjpa-kernel/src/main/java/org/apache/openjpa/util/AbstractChangeTracker.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/AbstractChangeTracker.java?ref=dda1e8ef6f2ac6aacf75934425aa00fae9355838","patch":"@@ -201,7 +201,7 @@ private void setIdentity(Object val) {\n         if (val == null || _identity != null)\n             return;\n \n-        if (ImplHelper.isManagedType(val.getClass()))\n+        if (ImplHelper.isManagedType(null, val.getClass()))\n             _identity = Boolean.TRUE;\n         else\n             _identity = Boolean.FALSE;"},{"sha":"d67ceb649ebc3b29b326f31e2ba8bf914420ee81","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/Exceptions.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/dda1e8ef6f2ac6aacf75934425aa00fae9355838/openjpa-kernel/src/main/java/org/apache/openjpa/util/Exceptions.java","raw_url":"https://github.com/apache/openjpa/raw/dda1e8ef6f2ac6aacf75934425aa00fae9355838/openjpa-kernel/src/main/java/org/apache/openjpa/util/Exceptions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/Exceptions.java?ref=dda1e8ef6f2ac6aacf75934425aa00fae9355838","patch":"@@ -64,7 +64,7 @@ private static boolean isSerializable(Object ob) {\n \n         // don't serialize persistent objects exceptions to prevent\n         // reading in all the state\n-        if (!ImplHelper.isManagedType(ob.getClass()))\n+        if (!ImplHelper.isManagedType(null, ob.getClass()))\n             return false;\n \n         // now do an actual test to see if we will be\n@@ -94,7 +94,7 @@ public static String toString(Object ob) {\n             return ob.getClass().getName() + \"-\" + oid.toString();\n         }\n \n-        if (ImplHelper.isManagedType(ob.getClass())) {\n+        if (ImplHelper.isManagedType(null, ob.getClass())) {\n             // never call toString() on a PersistenceCapable, since\n             // it may access persistent fields; fall-back to using\n             // the standard object stringification mechanism. New"},{"sha":"1bfcd39b18a0d407acd104de6f0f260562e0ab3b","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ImplHelper.java","status":"modified","additions":6,"deletions":3,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/dda1e8ef6f2ac6aacf75934425aa00fae9355838/openjpa-kernel/src/main/java/org/apache/openjpa/util/ImplHelper.java","raw_url":"https://github.com/apache/openjpa/raw/dda1e8ef6f2ac6aacf75934425aa00fae9355838/openjpa-kernel/src/main/java/org/apache/openjpa/util/ImplHelper.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ImplHelper.java?ref=dda1e8ef6f2ac6aacf75934425aa00fae9355838","patch":"@@ -210,10 +210,13 @@ public static void close(Object o) {\n      *\n      * @param type the class to test\n      * @return true if the class is manageable.\n+     *\n+     * @since 1.0.0\n      */\n-    public static boolean isManagedType(Class type) {\n-        return PersistenceCapable.class.isAssignableFrom(type)\n-            || type != null && PCRegistry.isRegistered(type);\n+    public static boolean isManagedType(OpenJPAConfiguration conf, Class type) {\n+        return (PersistenceCapable.class.isAssignableFrom(type) || conf == null)\n+            || (type != null && conf.getRuntimeClassOptimization()\n+                && PCRegistry.isRegistered(type));\n     }\n \n     /**"},{"sha":"9e325dab52b4f967b4cbd5b5640cb435c52ab5c5","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyManagerImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/dda1e8ef6f2ac6aacf75934425aa00fae9355838/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/dda1e8ef6f2ac6aacf75934425aa00fae9355838/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyManagerImpl.java?ref=dda1e8ef6f2ac6aacf75934425aa00fae9355838","patch":"@@ -610,7 +610,7 @@ protected BCClass generateProxyCalendarBytecode(Class type,\n     protected BCClass generateProxyBeanBytecode(Class type, boolean runtime) {\n         if (Modifier.isFinal(type.getModifiers()))\n             return null;\n-        if (ImplHelper.isManagedType(type))\n+        if (ImplHelper.isManagedType(null, type))\n             return null;\n \n         // we can only generate a valid proxy if there is a copy constructor"},{"sha":"d3b57c8e78aaeee1260995a8b8936916c8b4fa63","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/conf/localizer.properties","status":"modified","additions":5,"deletions":10,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/dda1e8ef6f2ac6aacf75934425aa00fae9355838/openjpa-kernel/src/main/resources/org/apache/openjpa/conf/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/dda1e8ef6f2ac6aacf75934425aa00fae9355838/openjpa-kernel/src/main/resources/org/apache/openjpa/conf/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/conf/localizer.properties?ref=dda1e8ef6f2ac6aacf75934425aa00fae9355838","patch":"@@ -541,16 +541,11 @@ Compatibility-displayorder: 50\n Compatibility-expert: true\n Compatibility-interface: org.apache.openjpa.conf.Compatibility\n \n-QueryCompilationCache-name: Query compilation cache\n-QueryCompilationCache-desc: Plugin used to cache query compilation data. \\\n-    Must implement java.util.Map. Does not need to be thread-safe -- it will \\\n-    be wrapped via the Collections.synchronizedMap() method if it does not \\\n-    extend org.apache.openjpa.util.CacheMap.\n-QueryCompilationCache-type: General\n-QueryCompilationCache-cat: Cache.Queries\n-QueryCompilationCache-displayorder: 50\n-QueryCompilationCache-expert: true\n-QueryCompilationCache-interface: java.util.Map\n+RuntimeClassOptimization-name: Runtime class optimization\n+RuntimeClassOptimization-desc: Either \"true\" or \"false\".\n+RuntimeClassOptimization-type: General\n+RuntimeClassOptimization-cat: Optimization\n+RuntimeClassOptimization-displayorder: 50\n \n no-named-cf: use a DataSource bound to JNDI\n diff-specs: Attempt to configure for multiple specifications.  Was configured \\"},{"sha":"4bba8156e6d4890a03b19d36876cbebb354fca9a","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configuration.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/dda1e8ef6f2ac6aacf75934425aa00fae9355838/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configuration.java","raw_url":"https://github.com/apache/openjpa/raw/dda1e8ef6f2ac6aacf75934425aa00fae9355838/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configuration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configuration.java?ref=dda1e8ef6f2ac6aacf75934425aa00fae9355838","patch":"@@ -227,18 +227,24 @@\n     /**\n      * Modifies a <em>dynamic</em> property of this receiver even when \n      * {@link #setReadOnly(boolean) frozen}. \n+     *\n+     * @since 1.0.0\n      */\n     public void modifyDynamic(String property, Object newValue);\n     \n     /**\n      * Affirms if the given property can be modified <em>dynamically</em> i.e.\n      * even after the receiver is {@link #setReadOnly(boolean) frozen}. \n+     *\n+     * @since 1.0.0\n      */\n     public boolean isDynamic(String property);\n     \n     /**\n      * Gets the values that can be modified <em>dynamically</em> i.e.\n      * even after the receiver is {@link #setReadOnly(boolean) frozen}. \n+     *\n+     * @since 1.0.0\n      */\n     public Value[] getDynamicValues();\n }"},{"sha":"da61175c741603a6141ffba46ef37188630b3bda","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/AbstractUnenhancedClassTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/dda1e8ef6f2ac6aacf75934425aa00fae9355838/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/AbstractUnenhancedClassTest.java","raw_url":"https://github.com/apache/openjpa/raw/dda1e8ef6f2ac6aacf75934425aa00fae9355838/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/AbstractUnenhancedClassTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/AbstractUnenhancedClassTest.java?ref=dda1e8ef6f2ac6aacf75934425aa00fae9355838","patch":"@@ -75,7 +75,7 @@ public void testMetaData() {\n     }\r\n \r\n     public void testImplHelperCalls() {\r\n-        assertTrue(ImplHelper.isManagedType(getUnenhancedClass()));\r\n+        assertTrue(ImplHelper.isManagedType(null, getUnenhancedClass()));\r\n \r\n         UnenhancedType un = newUnenhancedInstance();\r\n         assertFalse(un instanceof PersistenceCapable);\r"},{"sha":"0544056566183ec7658ccee7c10045642aba9d3c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestEnhancementConfiguration.java","status":"added","additions":47,"deletions":0,"changes":47,"blob_url":"https://github.com/apache/openjpa/blob/dda1e8ef6f2ac6aacf75934425aa00fae9355838/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestEnhancementConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/dda1e8ef6f2ac6aacf75934425aa00fae9355838/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestEnhancementConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestEnhancementConfiguration.java?ref=dda1e8ef6f2ac6aacf75934425aa00fae9355838","patch":"@@ -0,0 +1,47 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.enhance;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+\r\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n+import org.apache.openjpa.util.ImplHelper;\r\n+\r\n+public class TestEnhancementConfiguration\r\n+    extends SingleEMFTestCase {\r\n+\r\n+    public void testEnhancementConfiguration() {\r\n+        try {\r\n+            emf = createEMF(\r\n+                \"openjpa.RuntimeClassOptimization\", \"false\",\r\n+                UnenhancedFieldAccess.class, CLEAR_TABLES);\r\n+            assertFalse(ImplHelper.isManagedType(emf.getConfiguration(),\r\n+                UnenhancedFieldAccess.class));\r\n+            EntityManager em = emf.createEntityManager();\r\n+            em.getTransaction().begin();\r\n+            em.persist(new UnenhancedFieldAccess());\r\n+            em.getTransaction().rollback();\r\n+            fail(\"should not be possible to fully-initialize a system \" +\r\n+                \"that depends on unenhanced types but disables runtime\" +\r\n+                \"redefinition.\");\r\n+        } catch (Exception e) {\r\n+            // expected\r\n+        }\r\n+    }\r\n+}\n\\ No newline at end of file"},{"sha":"e549bc430be5855aef4a38710fbb50527b2bcbb6","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/dda1e8ef6f2ac6aacf75934425aa00fae9355838/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/dda1e8ef6f2ac6aacf75934425aa00fae9355838/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java?ref=dda1e8ef6f2ac6aacf75934425aa00fae9355838","patch":"@@ -1571,7 +1571,7 @@ private void parseNamedNativeQueries(AnnotatedElement el,\n             meta.setQueryString(query.query());\n             meta.setLanguage(QueryLanguages.LANG_SQL);\n             Class res = query.resultClass();\n-            if (ImplHelper.isManagedType(res))\n+            if (ImplHelper.isManagedType(getConfiguration(), res))\n                 meta.setCandidateType(res);\n             else if (!void.class.equals(res))\n                 meta.setResultType(res);"},{"sha":"1ee0265ade01d7aa220c99163890d20ce35ffc10","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/dda1e8ef6f2ac6aacf75934425aa00fae9355838/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/dda1e8ef6f2ac6aacf75934425aa00fae9355838/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java?ref=dda1e8ef6f2ac6aacf75934425aa00fae9355838","patch":"@@ -515,7 +515,8 @@ public boolean contains(Object entity) {\n         if (entity == null)\r\n             return false;\r\n         OpenJPAStateManager sm = _broker.getStateManager(entity);\r\n-        if (sm == null && !ImplHelper.isManagedType(entity.getClass()))\r\n+        if (sm == null\r\n+            && !ImplHelper.isManagedType(getConfiguration(), entity.getClass()))\r\n             throw new ArgumentException(_loc.get(\"not-entity\",\r\n                 entity.getClass()), null, null, true);\r\n         return sm != null && !sm.isDeleted();\r"},{"sha":"0d9278c949205b7a002c06afc37c3147beae7674","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAPersistence.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/dda1e8ef6f2ac6aacf75934425aa00fae9355838/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAPersistence.java","raw_url":"https://github.com/apache/openjpa/raw/dda1e8ef6f2ac6aacf75934425aa00fae9355838/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAPersistence.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAPersistence.java?ref=dda1e8ef6f2ac6aacf75934425aa00fae9355838","patch":"@@ -189,9 +189,10 @@ public static void close(Object o) {\n     /**\n      * Returns true if the specified class is an entity or embeddable type.\n      */\n-    public static boolean isManagedType(Class cls) {\n+    public static boolean isManagedType(EntityManager em, Class cls) {\n         try {\n-            return ImplHelper.isManagedType(cls);\n+            return ImplHelper.isManagedType(\n+                JPAFacadeHelper.toBroker(em).getConfiguration(), cls);\n         } catch (Exception e) {\n             throw PersistenceExceptions.toPersistenceException(e);\n         }"},{"sha":"8e59a84ae95b21d5b8133977fd139be3a4ccb6bc","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/dda1e8ef6f2ac6aacf75934425aa00fae9355838/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/dda1e8ef6f2ac6aacf75934425aa00fae9355838/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java?ref=dda1e8ef6f2ac6aacf75934425aa00fae9355838","patch":"@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence;\n \n import java.io.Serializable;\n+import java.lang.reflect.Method;\n import java.util.ArrayList;\n import java.util.Calendar;\n import java.util.Collection;\n@@ -29,12 +30,12 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n-import java.lang.reflect.Method;\n import javax.persistence.FlushModeType;\n import javax.persistence.Query;\n import javax.persistence.TemporalType;\n \n import org.apache.commons.collections.map.LinkedMap;\n+import org.apache.openjpa.enhance.Reflection;\n import org.apache.openjpa.kernel.DelegatingQuery;\n import org.apache.openjpa.kernel.DelegatingResultList;\n import org.apache.openjpa.kernel.Filters;\n@@ -43,7 +44,7 @@\n import org.apache.openjpa.kernel.exps.FilterListener;\n import org.apache.openjpa.lib.rop.ResultList;\n import org.apache.openjpa.lib.util.Localizer;\n-import org.apache.openjpa.enhance.Reflection;\n+import org.apache.openjpa.util.ImplHelper;\n \n /**\n  * Implementation of {@link Query} interface.\n@@ -168,7 +169,7 @@ public Class getResultClass() {\n \n     public OpenJPAQuery setResultClass(Class cls) {\n         _em.assertNotCloseInvoked();\n-        if (OpenJPAPersistence.isManagedType(cls))\n+        if (ImplHelper.isManagedType(_em.getConfiguration(), cls))\n             _query.setCandidateType(cls, true);\n         else\n             _query.setResultType(cls);"},{"sha":"30ab53773c9285552ff676ec242ab1a3984fe4d3","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/dda1e8ef6f2ac6aacf75934425aa00fae9355838/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/dda1e8ef6f2ac6aacf75934425aa00fae9355838/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java?ref=dda1e8ef6f2ac6aacf75934425aa00fae9355838","patch":"@@ -1468,7 +1468,7 @@ protected boolean startNamedNativeQuery(Attributes attrs)\n         String val = attrs.getValue(\"result-class\");\n         if (val != null) {\n             Class type = classForName(val);\n-            if (ImplHelper.isManagedType(type))\n+            if (ImplHelper.isManagedType(getConfiguration(), type))\n                 meta.setCandidateType(type);\n             else\n                 meta.setResultType(type);"}]}

