{"sha":"ddf3631bccc471ac555b527aaaf7a835ad79aa65","node_id":"MDY6Q29tbWl0MjA2MzY0OmRkZjM2MzFiY2NjNDcxYWM1NTViNTI3YWFhZjdhODM1YWQ3OWFhNjU=","commit":{"author":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-09-09T00:39:29Z"},"committer":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-09-09T00:39:29Z"},"message":"Added test for deep mapped superclass inheritance hierarchy, which is what\nmy last metadata changes fixed.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@441702 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"dc63e155c0697564755292f206a337f7bf1bc5b3","url":"https://api.github.com/repos/apache/openjpa/git/trees/dc63e155c0697564755292f206a337f7bf1bc5b3"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ddf3631bccc471ac555b527aaaf7a835ad79aa65","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ddf3631bccc471ac555b527aaaf7a835ad79aa65","html_url":"https://github.com/apache/openjpa/commit/ddf3631bccc471ac555b527aaaf7a835ad79aa65","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ddf3631bccc471ac555b527aaaf7a835ad79aa65/comments","author":null,"committer":null,"parents":[{"sha":"37aa91d2af0c35b7edee57763afa02d0901db0b8","url":"https://api.github.com/repos/apache/openjpa/commits/37aa91d2af0c35b7edee57763afa02d0901db0b8","html_url":"https://github.com/apache/openjpa/commit/37aa91d2af0c35b7edee57763afa02d0901db0b8"}],"stats":{"total":209,"additions":171,"deletions":38},"files":[{"sha":"8e896e4e5d3d9f1573a9a085c0f18cf90c00cd4d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/EntityL3.java","status":"added","additions":19,"deletions":0,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/ddf3631bccc471ac555b527aaaf7a835ad79aa65/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/EntityL3.java","raw_url":"https://github.com/apache/openjpa/raw/ddf3631bccc471ac555b527aaaf7a835ad79aa65/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/EntityL3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/EntityL3.java?ref=ddf3631bccc471ac555b527aaaf7a835ad79aa65","patch":"@@ -0,0 +1,19 @@\n+package org.apache.openjpa.persistence.inheritance;\n+\n+import javax.persistence.Entity;\n+\n+@Entity \n+public class EntityL3 \n+    extends MappedSuperclassL2 {\n+\n+    private int l3data;\n+\n+    public int getL3Data() {\n+        return l3data;\n+    }\n+\n+    public void setL3Data(int data) {\n+        l3data = data;\n+    }\n+}\n+"},{"sha":"af9c6786c7bdafc74c273ff5afdf797e30cca3ec","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/MappedSuperclassBase.java","status":"added","additions":19,"deletions":0,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/ddf3631bccc471ac555b527aaaf7a835ad79aa65/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/MappedSuperclassBase.java","raw_url":"https://github.com/apache/openjpa/raw/ddf3631bccc471ac555b527aaaf7a835ad79aa65/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/MappedSuperclassBase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/MappedSuperclassBase.java?ref=ddf3631bccc471ac555b527aaaf7a835ad79aa65","patch":"@@ -0,0 +1,19 @@\n+package org.apache.openjpa.persistence.inheritance;\n+\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.MappedSuperclass;\n+\n+@MappedSuperclass\n+public class MappedSuperclassBase {\n+\n+    @Id\n+    @GeneratedValue(strategy=GenerationType.AUTO)\n+    private long id;\n+\n+    public long getId() {\n+        return id;\n+    }\n+}\n+"},{"sha":"de102d2e668cffc320cadaf2561cb2e07e13dba7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/MappedSuperclassL2.java","status":"added","additions":19,"deletions":0,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/ddf3631bccc471ac555b527aaaf7a835ad79aa65/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/MappedSuperclassL2.java","raw_url":"https://github.com/apache/openjpa/raw/ddf3631bccc471ac555b527aaaf7a835ad79aa65/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/MappedSuperclassL2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/MappedSuperclassL2.java?ref=ddf3631bccc471ac555b527aaaf7a835ad79aa65","patch":"@@ -0,0 +1,19 @@\n+package org.apache.openjpa.persistence.inheritance;\n+\n+import javax.persistence.MappedSuperclass;\n+\n+@MappedSuperclass \n+public class MappedSuperclassL2 \n+    extends MappedSuperclassBase {\n+\n+    private int l2data;\n+\n+    public int getL2Data() {\n+        return l2data;\n+    }\n+\n+    public void setL2Data(int data) {\n+        l2data = data;\n+    }\n+}\n+"},{"sha":"1e9381e8eb16c72f113dcd2f77c3759fced37db4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/TestMultipleMappedSuperclassHierarchy.java","status":"added","additions":88,"deletions":0,"changes":88,"blob_url":"https://github.com/apache/openjpa/blob/ddf3631bccc471ac555b527aaaf7a835ad79aa65/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/TestMultipleMappedSuperclassHierarchy.java","raw_url":"https://github.com/apache/openjpa/raw/ddf3631bccc471ac555b527aaaf7a835ad79aa65/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/TestMultipleMappedSuperclassHierarchy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/TestMultipleMappedSuperclassHierarchy.java?ref=ddf3631bccc471ac555b527aaaf7a835ad79aa65","patch":"@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2006 The Apache Software Foundation.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.openjpa.persistence.inheritance;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import javax.persistence.EntityTransaction;\n+import javax.persistence.Persistence;\n+\n+import junit.framework.TestCase;\n+import junit.textui.TestRunner;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+\n+/**\n+ * Perform basic operations on an inheritance hierarchy involving multiple\n+ * @MappedSuperclasses.\n+ *\n+ * @author Abe White\n+ */\n+public class TestMultipleMappedSuperclassHierarchy\n+    extends TestCase {\n+\n+    private EntityManagerFactory emf;\n+\n+    public void setUp() {\n+        String types = MappedSuperclassBase.class.getName() + \";\"\n+            + MappedSuperclassL2.class.getName() + \";\"\n+            + EntityL3.class.getName();\n+        Map props = new HashMap();\n+        props.put(\"openjpa.MetaDataFactory\", \"jpa(Types=\" + types + \")\");\n+        emf = Persistence.createEntityManagerFactory(\"test\", props);\n+    }\n+\n+    public void tearDown() {\n+        if (emf == null)\n+            return;\n+        try {\n+            EntityManager em = emf.createEntityManager();\n+            em.getTransaction().begin();\n+            em.createQuery(\"delete from EntityL3\").executeUpdate();\n+            em.getTransaction().commit();\n+            em.close();\n+            emf.close();\n+        } catch (Exception e) {\n+        }\n+    }\n+\n+    public void testPersist() {\n+        EntityL3 ent = new EntityL3();\n+        ent.setL2Data(99); \n+        ent.setL3Data(100);\n+\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.persist(ent);\n+        em.getTransaction().commit();\n+        long id = ent.getId();\n+        assertTrue(id != 0);\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        ent = em.find(EntityL3.class, id);\n+        assertNotNull(ent);\n+        assertEquals(99, ent.getL2Data());\n+        assertEquals(100, ent.getL3Data());\n+        em.close();\n+    }\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(TestMultipleMappedSuperclassHierarchy.class);\n+    }\n+}\n+"},{"sha":"c04ae62c7f08b9fec8f25ff19487f869df2021a3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestPersistence.java","status":"modified","additions":15,"deletions":24,"changes":39,"blob_url":"https://github.com/apache/openjpa/blob/ddf3631bccc471ac555b527aaaf7a835ad79aa65/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestPersistence.java","raw_url":"https://github.com/apache/openjpa/raw/ddf3631bccc471ac555b527aaaf7a835ad79aa65/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestPersistence.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestPersistence.java?ref=ddf3631bccc471ac555b527aaaf7a835ad79aa65","patch":"@@ -15,6 +15,8 @@\n  */\n package org.apache.openjpa.persistence.simple;\n \n+import java.util.HashMap;\n+import java.util.Map;\n import javax.persistence.EntityManager;\n import javax.persistence.EntityManagerFactory;\n import javax.persistence.EntityTransaction;\n@@ -34,23 +36,18 @@\n \n     private EntityManagerFactory emf;\n \n-    protected EntityManager getEM() {\n-        if (emf == null)\n-            emf = Persistence.createEntityManagerFactory(\"simple-emf-test\");\n-        assertNotNull(emf);\n-\n-        EntityManager em = emf.createEntityManager();\n-        assertNotNull(em);\n-\n-        return em;\n+    public void setUp() {\n+        Map props = new HashMap();\n+        props.put(\"openjpa.MetaDataFactory\", \n+            \"jpa(Types=\" + AllFieldTypes.class.getName() + \")\");\n+        emf = Persistence.createEntityManagerFactory(\"test\", props);\n     }\n \n-    public void tearDown()\n-        throws Exception {\n-        super.tearDown();\n-\n+    public void tearDown() {\n+        if (emf == null)\n+            return;\n         try {\n-            EntityManager em = getEM();\n+            EntityManager em = emf.createEntityManager();\n             em.getTransaction().begin();\n             em.createQuery(\"delete from AllFieldTypes\").executeUpdate();\n             em.getTransaction().commit();\n@@ -61,11 +58,10 @@ public void tearDown()\n     }\n \n     public void testCreateEntityManager() {\n-        EntityManager em = getEM();\n+        EntityManager em = emf.createEntityManager();\n \n         EntityTransaction t = em.getTransaction();\n         assertNotNull(t);\n-\n         t.begin();\n         t.setRollbackOnly();\n         t.rollback();\n@@ -75,24 +71,19 @@ public void testCreateEntityManager() {\n         OpenJPAEntityManager ojem = (OpenJPAEntityManager) em;\n         ojem.getFetchPlan().setMaxFetchDepth(-1);\n         assertEquals(-1, ojem.getFetchPlan().getMaxFetchDepth());\n-\n         em.close();\n     }\n \n     public void testPersist() {\n-        EntityManager em;\n-\n-        em = getEM();\n+        EntityManager em = emf.createEntityManager();\n         em.getTransaction().begin();\n         em.persist(new AllFieldTypes());\n         em.getTransaction().commit();\n         em.close();\n     }\n \n     public void testQuery() {\n-        EntityManager em;\n-\n-        em = getEM();\n+        EntityManager em = emf.createEntityManager();\n         em.getTransaction().begin();\n         AllFieldTypes aft = new AllFieldTypes();\n         aft.setStringField(\"foo\");\n@@ -101,7 +92,7 @@ public void testQuery() {\n         em.getTransaction().commit();\n         em.close();\n \n-        em = getEM();\n+        em = emf.createEntityManager();\n         em.getTransaction().begin();\n         assertEquals(1, em.createQuery\n             (\"select x from AllFieldTypes x where x.stringField = 'foo'\")."},{"sha":"90ae5c10294ab910fda9893030904f1c1839569d","filename":"openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","status":"modified","additions":11,"deletions":14,"changes":25,"blob_url":"https://github.com/apache/openjpa/blob/ddf3631bccc471ac555b527aaaf7a835ad79aa65/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/ddf3631bccc471ac555b527aaaf7a835ad79aa65/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml?ref=ddf3631bccc471ac555b527aaaf7a835ad79aa65","patch":"@@ -1,24 +1,21 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n <persistence xmlns=\"http://java.sun.com/xml/ns/persistence\"\n-             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n-             version=\"1.0\">\n-\n-    <persistence-unit name=\"simple-emf-test\">\n-\n-        <!-- This is not needed if OpenJPA is the only persistence provider\n-             in the classpath.\n-          <provider>org.apache.openjpa.persistence.PersistenceProviderImpl</provider>\n-          -->\n-\n-        <class>org.apache.openjpa.persistence.simple.AllFieldTypes</class>\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    version=\"1.0\">\n \n+    <persistence-unit name=\"test\">\n+        <!-- \n+        <provider>\n+            org.apache.openjpa.persistence.PersistenceProviderImpl\n+        </provider>\n+        -->\n         <properties>\n             <property name=\"openjpa.ConnectionDriverName\"\n-                      value=\"org.apache.commons.dbcp.BasicDataSource\"/>\n+                value=\"org.apache.commons.dbcp.BasicDataSource\"/>\n             <property name=\"openjpa.ConnectionProperties\"\n-                      value=\"DriverClassName=org.apache.derby.jdbc.EmbeddedDriver,Url=jdbc:derby:target/database/openjpa-test-database;create=true,MaxActive=100,MaxWait=10000,TestOnBorrow=true\"/>\n+                value=\"DriverClassName=org.apache.derby.jdbc.EmbeddedDriver,Url=jdbc:derby:target/database/openjpa-test-database;create=true,MaxActive=100,MaxWait=10000,TestOnBorrow=true\"/>\n             <property name=\"openjpa.jdbc.SynchronizeMappings\"\n-                      value=\"buildSchema(ForeignKeys=true)\"/>\n+                value=\"buildSchema(ForeignKeys=true)\"/>\n         </properties>\n     </persistence-unit>\n </persistence>"}]}

