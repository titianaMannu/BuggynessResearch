{"sha":"de14ad6630a17d4c4ea27133e825479f5f01c61d","node_id":"MDY6Q29tbWl0MjA2MzY0OmRlMTRhZDY2MzBhMTdkNGM0ZWEyNzEzM2U4MjU0NzlmNWYwMWM2MWQ=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-02-05T18:34:55Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-02-05T18:34:55Z"},"message":"OPENJPA-147. Changes resulting from tests via Kodo's harness.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@618738 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"95e4aa3e614325f735ee0432c6f1f82a4209ee46","url":"https://api.github.com/repos/apache/openjpa/git/trees/95e4aa3e614325f735ee0432c6f1f82a4209ee46"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/de14ad6630a17d4c4ea27133e825479f5f01c61d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/de14ad6630a17d4c4ea27133e825479f5f01c61d","html_url":"https://github.com/apache/openjpa/commit/de14ad6630a17d4c4ea27133e825479f5f01c61d","comments_url":"https://api.github.com/repos/apache/openjpa/commits/de14ad6630a17d4c4ea27133e825479f5f01c61d/comments","author":null,"committer":null,"parents":[{"sha":"012efc034c6f6cb751ad6854bfab18f86ad2fd68","url":"https://api.github.com/repos/apache/openjpa/commits/012efc034c6f6cb751ad6854bfab18f86ad2fd68","html_url":"https://github.com/apache/openjpa/commit/012efc034c6f6cb751ad6854bfab18f86ad2fd68"}],"stats":{"total":103,"additions":47,"deletions":56},"files":[{"sha":"54586274be79664e3cf2242abf2cb8271db12611","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCBrokerFactory.java","status":"modified","additions":6,"deletions":18,"changes":24,"blob_url":"https://github.com/apache/openjpa/blob/de14ad6630a17d4c4ea27133e825479f5f01c61d/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCBrokerFactory.java","raw_url":"https://github.com/apache/openjpa/raw/de14ad6630a17d4c4ea27133e825479f5f01c61d/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCBrokerFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCBrokerFactory.java?ref=de14ad6630a17d4c4ea27133e825479f5f01c61d","patch":"@@ -22,6 +22,7 @@\n import java.util.Collection;\n import java.util.Iterator;\n import java.util.Properties;\n+import java.util.Map;\n \n import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n@@ -66,28 +67,15 @@ public static JDBCBrokerFactory newInstance(ConfigurationProvider cp) {\n      * Invoked from {@link Bootstrap#getBrokerFactory}.\n      */\n     public static JDBCBrokerFactory getInstance(ConfigurationProvider cp) {\n-        JDBCBrokerFactory factory = (JDBCBrokerFactory) getPooledFactory\n-            (cp.getProperties());\n+        Map props = cp.getProperties();\n+        Object key = toPoolKey(props);\n+        JDBCBrokerFactory factory = (JDBCBrokerFactory)\n+            getPooledFactoryForKey(key);\n         if (factory != null)\n             return factory;\n \n         factory = newInstance(cp);\n-        factory.pool();\n-        return factory;\n-    }\n-\n-    /**\n-     * Factory method for constructing a factory from a configuration.\n-     */\n-    public static synchronized JDBCBrokerFactory getInstance\n-        (JDBCConfiguration conf) {\n-        JDBCBrokerFactory factory = (JDBCBrokerFactory) getPooledFactory\n-            (conf.toProperties(false));\n-        if (factory != null)\n-            return factory;\n-\n-        factory = new JDBCBrokerFactory(conf);\n-        factory.pool();\n+        pool(key, factory);\n         return factory;\n     }\n "},{"sha":"7225742f79851d0248a7953ac9d27619b1888a7f","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/abstractstore/AbstractStoreBrokerFactory.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/de14ad6630a17d4c4ea27133e825479f5f01c61d/openjpa-kernel/src/main/java/org/apache/openjpa/abstractstore/AbstractStoreBrokerFactory.java","raw_url":"https://github.com/apache/openjpa/raw/de14ad6630a17d4c4ea27133e825479f5f01c61d/openjpa-kernel/src/main/java/org/apache/openjpa/abstractstore/AbstractStoreBrokerFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/abstractstore/AbstractStoreBrokerFactory.java?ref=de14ad6630a17d4c4ea27133e825479f5f01c61d","patch":"@@ -71,15 +71,16 @@\n      * Factory method for obtaining a possibly-pooled {@link BrokerFactory}\n      * from properties. Invoked from {@link Bootstrap#getBrokerFactory()}.\n      */\n-    public static AbstractStoreBrokerFactory getInstance\n-        (ConfigurationProvider cp) {\n+    public static AbstractStoreBrokerFactory getInstance(\n+        ConfigurationProvider cp) {\n+        Object key = toPoolKey(cp.getProperties());\n         AbstractStoreBrokerFactory factory = (AbstractStoreBrokerFactory)\n-            getPooledFactory(cp.getProperties());\n+            getPooledFactoryForKey(key);\n         if (factory != null)\n             return factory;\n \n         factory = newInstance(cp);\n-        factory.pool();\n+        factory.pool(key, factory);\n         return factory;\n     }\n "},{"sha":"e63648138b708251a1dd2924ec9b6e90160c748c","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","status":"modified","additions":33,"deletions":34,"changes":67,"blob_url":"https://github.com/apache/openjpa/blob/de14ad6630a17d4c4ea27133e825479f5f01c61d/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","raw_url":"https://github.com/apache/openjpa/raw/de14ad6630a17d4c4ea27133e825479f5f01c61d/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java?ref=de14ad6630a17d4c4ea27133e825479f5f01c61d","patch":"@@ -104,34 +104,33 @@\n     // transaction listeners to pass to each broker\n     private transient List _transactionListeners = null;\n \n-    /**\n-     * Return the pooled factory matching the given configuration, or null\n-     * if none.\n-     */\n-    public static AbstractBrokerFactory getPooledFactory(\n-        OpenJPAConfiguration conf) {\n-        return (AbstractBrokerFactory) _pool.get(toPoolKey(conf));\n-    }\n+    // key under which this instance can be stored in the broker pool\n+    // and later identified\n+    private Object _poolKey;\n \n     /**\n      * Return an internal factory pool key for the given configuration.\n+     *\n+     * @since 1.1.0\n      */\n-    private static Object toPoolKey(OpenJPAConfiguration conf) {\n-        if (conf.getId() != null)\n-            return conf.getId();\n+    protected static Object toPoolKey(Map map) {\n+        if (Configurations.getProperty(\"Id\", map) != null)\n+            return Configurations.getProperty(\"Id\", map);\n         else\n-            return conf.toProperties(false);\n+            return map;\n     }\n \n     /**\n-     * Return the pooled factory matching the given configuration data, or null\n-     * if none.\n+     * Register <code>factory</code> in the pool under <code>key</code>.\n+     *\n+     * @since 1.1.0\n      */\n-    protected static AbstractBrokerFactory getPooledFactory(Map map) {\n-        Object key = Configurations.getProperty(\"Id\", map);\n-        if (key == null)\n-            key = map;\n-        return getPooledFactoryForKey(key);\n+    protected static void pool(Object key, AbstractBrokerFactory factory) {\n+        synchronized(_pool) {\n+            _pool.put(key, factory);\n+            factory.setPoolKey(key);\n+            factory.makeReadOnly();\n+        }\n     }\n \n     /**\n@@ -407,10 +406,9 @@ public void close() {\n             assertNoActiveTransaction();\n \n             // remove from factory pool\n-            Object key = toPoolKey(_conf);\n             synchronized (_pool) {\n-                if (_pool.get(key) == this)\n-                    _pool.remove(key);\n+                if (_pool.get(_poolKey) == this)\n+                    _pool.remove(_poolKey);\n             }\n \n             // close all brokers\n@@ -491,7 +489,7 @@ public void unlock() {\n      */\n     protected Object readResolve()\n         throws ObjectStreamException {\n-        AbstractBrokerFactory factory = getPooledFactory(_conf);\n+        AbstractBrokerFactory factory = getPooledFactoryForKey(_poolKey);\n         if (factory != null)\n             return factory;\n \n@@ -613,16 +611,6 @@ protected void configureBroker(BrokerImpl broker) {\n             getDetachState());\n     }\n \n-    /**\n-     * Add the factory to the pool.\n-     */\n-    protected void pool() {\n-        synchronized (_pool) {\n-            _pool.put(toPoolKey(_conf), this);\n-            makeReadOnly();\n-        }\n-    }\n-\n     /**\n      * Freezes the configuration of this factory.\n      */\n@@ -792,10 +780,21 @@ public Collection getOpenBrokers() {\n     /**\n      * @return a key that can be used to obtain this broker factory from the\n      * pool at a later time.\n+     *\n      * @since 1.1.0\n      */\n     public Object getPoolKey() {\n-        return toPoolKey(getConfiguration());\n+        return _poolKey;\n+    }\n+\n+    /**\n+     * Set a key that can be used to obtain this broker factory from the\n+     * pool at a later time.\n+     *\n+     * @since 1.1.0\n+     */\n+    void setPoolKey(Object key) {\n+        _poolKey = key;\n     }\n \n     /**"},{"sha":"669af3cf0d78317aebd482cd5a4ed0f89bf013b2","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractMetaDataDefaults.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/de14ad6630a17d4c4ea27133e825479f5f01c61d/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractMetaDataDefaults.java","raw_url":"https://github.com/apache/openjpa/raw/de14ad6630a17d4c4ea27133e825479f5f01c61d/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractMetaDataDefaults.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractMetaDataDefaults.java?ref=de14ad6630a17d4c4ea27133e825479f5f01c61d","patch":"@@ -269,6 +269,9 @@ private void populateFromReflection(ClassMetaData meta) {\n      * Returns ACCESS_FIELD by default.\n      */\n     protected int getAccessType(ClassMetaData meta) {\n+        if (meta.getDescribedType().isInterface())\n+            return ClassMetaData.ACCESS_PROPERTY;\n+        else\n             return ClassMetaData.ACCESS_FIELD;\n     }\n "}]}

