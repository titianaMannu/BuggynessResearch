{"sha":"de790be2adcdb631bc486f806ab42bef4e694ee0","node_id":"MDY6Q29tbWl0MjA2MzY0OmRlNzkwYmUyYWRjZGI2MzFiYzQ4NmY4MDZhYjQyYmVmNGU2OTRlZTA=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-07-02T01:32:33Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-07-02T01:32:33Z"},"message":"OPENJPA-235 SQL reordering to avoid non-nullable foreign key constraint violations\nFix problem in deletion for foreign key on delete cascade.\nCommit openjpa-235-delete-cascade.patch provided by Fay Wang.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@673258 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"9e5705d3d70f2bceed2f7eed04548e998ff15c58","url":"https://api.github.com/repos/apache/openjpa/git/trees/9e5705d3d70f2bceed2f7eed04548e998ff15c58"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/de790be2adcdb631bc486f806ab42bef4e694ee0","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/de790be2adcdb631bc486f806ab42bef4e694ee0","html_url":"https://github.com/apache/openjpa/commit/de790be2adcdb631bc486f806ab42bef4e694ee0","comments_url":"https://api.github.com/repos/apache/openjpa/commits/de790be2adcdb631bc486f806ab42bef4e694ee0/comments","author":null,"committer":null,"parents":[{"sha":"1aa44030d62809dd419f94f4d48dc353ee135952","url":"https://api.github.com/repos/apache/openjpa/commits/1aa44030d62809dd419f94f4d48dc353ee135952","html_url":"https://github.com/apache/openjpa/commit/1aa44030d62809dd419f94f4d48dc353ee135952"}],"stats":{"total":162,"additions":155,"deletions":7},"files":[{"sha":"9f044fb8af88cd49bb7a6552b17584f114646314","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/de790be2adcdb631bc486f806ab42bef4e694ee0/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/de790be2adcdb631bc486f806ab42bef4e694ee0/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java?ref=de790be2adcdb631bc486f806ab42bef4e694ee0","patch":"@@ -256,7 +256,8 @@ public void delete(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\n             if (rel != null) {\n                 ForeignKey fk = field.getForeignKey((ClassMapping)\n                     rel.getMetaData());\n-                if (fk.getDeleteAction() == ForeignKey.ACTION_RESTRICT) {\n+                if (fk.getDeleteAction() == ForeignKey.ACTION_RESTRICT ||\n+                    fk.getDeleteAction() == ForeignKey.ACTION_CASCADE) {\n                     Row row = field.getRow(sm, store, rm, Row.ACTION_DELETE);\n                     row.setForeignKey(fk, null, rel);\n                 }"},{"sha":"3a0be1ba78da408fbcae3bef3247f18b90fb40ce","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PrimaryRow.java","status":"modified","additions":6,"deletions":5,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/de790be2adcdb631bc486f806ab42bef4e694ee0/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PrimaryRow.java","raw_url":"https://github.com/apache/openjpa/raw/de790be2adcdb631bc486f806ab42bef4e694ee0/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PrimaryRow.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PrimaryRow.java?ref=de790be2adcdb631bc486f806ab42bef4e694ee0","patch":"@@ -192,10 +192,10 @@ public void clearForeignKey(ForeignKey fk)\n     }\n \n     /**\n-     * If this is a delete, delay foreign keys to other deleted objects if\n-     * the key is restricted. If this is an update or insert, delay foreign\n-     * keys to other inserts if the key is not logical. If the foreign key\n-     * is to a new record and the columns are auto-inc, record it.\n+     * If this is a delete, delay foreign keys to other deleted objects if the \n+     * key is restricted or cascade. If this is an update or insert, delay \n+     * foreign keys to other inserts if the key is not logical. If the foreign \n+     * key is to a new record and the columns are auto-inc, record it.\n      */\n     private boolean delayForeignKey(ForeignKey fk, OpenJPAStateManager sm,\n         boolean set) {\n@@ -204,7 +204,8 @@ private boolean delayForeignKey(ForeignKey fk, OpenJPAStateManager sm,\n \n         if (getAction() == ACTION_DELETE)\n             return sm.isDeleted() && !fk.isDeferred()\n-                && fk.getDeleteAction() == ForeignKey.ACTION_RESTRICT;\n+                && (fk.getDeleteAction() == ForeignKey.ACTION_RESTRICT ||\n+                    fk.getDeleteAction() == ForeignKey.ACTION_CASCADE);\n \n         if (!sm.isNew() || sm.isFlushed())\n             return false;"},{"sha":"72d589f39b174b43a667d7558a6351d746f492d7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/EntityF.java","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/apache/openjpa/blob/de790be2adcdb631bc486f806ab42bef4e694ee0/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/EntityF.java","raw_url":"https://github.com/apache/openjpa/raw/de790be2adcdb631bc486f806ab42bef4e694ee0/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/EntityF.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/EntityF.java?ref=de790be2adcdb631bc486f806ab42bef4e694ee0","patch":"@@ -0,0 +1,43 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.jdbc.kernel;\r\n+import java.util.List;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+@Entity\r\n+public class EntityF  {\r\n+\t@Id private int id;\r\n+\r\n+\t@OneToMany(cascade=CascadeType.ALL, mappedBy=\"entityF\")\r\n+\tprivate List<EntityG> listG;\r\n+\t\r\n+\tpublic List<EntityG> getListG() {\r\n+\t\treturn listG;\r\n+\t}\r\n+\tpublic void setListG(List<EntityG> listG) {\r\n+\t\tthis.listG = listG;\r\n+\t}\r\n+\tpublic int getId() {\r\n+\t\treturn id;\r\n+\t}\r\n+\tpublic void setId(int id) {\r\n+\t\tthis.id = id;\r\n+\t}\r\n+}\r"},{"sha":"c547dd086cdbaea55ae840caf9e8553516db86fb","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/EntityG.java","status":"added","additions":49,"deletions":0,"changes":49,"blob_url":"https://github.com/apache/openjpa/blob/de790be2adcdb631bc486f806ab42bef4e694ee0/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/EntityG.java","raw_url":"https://github.com/apache/openjpa/raw/de790be2adcdb631bc486f806ab42bef4e694ee0/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/EntityG.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/EntityG.java?ref=de790be2adcdb631bc486f806ab42bef4e694ee0","patch":"@@ -0,0 +1,49 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.jdbc.kernel;\r\n+\r\n+import javax.persistence.CascadeType;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.ManyToOne;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.ForeignKey;\r\n+import org.apache.openjpa.persistence.jdbc.ForeignKeyAction;\r\n+\r\n+@Entity\r\n+public class EntityG  {\r\n+\t@Id private int id;\r\n+\r\n+\t@ForeignKey(deleteAction=ForeignKeyAction.CASCADE)\r\n+\t@ManyToOne (cascade=CascadeType.MERGE)\t\r\n+\tprivate EntityF entityF;\r\n+\t\r\n+\tpublic EntityF getEntityF() {\r\n+\t\treturn entityF;\r\n+\t}\r\n+\tpublic void setEntityF(EntityF entityF) {\r\n+\t\tthis.entityF = entityF;\r\n+\t}\r\n+\tpublic int getId() {\r\n+\t\treturn id;\r\n+\t}\r\n+\tpublic void setId(int id) {\r\n+\t\tthis.id = id;\r\n+\t}\r\n+}\r"},{"sha":"5dfc8c371e123bcc809f11c69e3ac18c6669d7ff","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/TestNoForeignKeyViolation.java","status":"modified","additions":55,"deletions":1,"changes":56,"blob_url":"https://github.com/apache/openjpa/blob/de790be2adcdb631bc486f806ab42bef4e694ee0/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/TestNoForeignKeyViolation.java","raw_url":"https://github.com/apache/openjpa/raw/de790be2adcdb631bc486f806ab42bef4e694ee0/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/TestNoForeignKeyViolation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/TestNoForeignKeyViolation.java?ref=de790be2adcdb631bc486f806ab42bef4e694ee0","patch":"@@ -18,6 +18,8 @@\n  */\r\n package org.apache.openjpa.jdbc.kernel;\r\n \r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n import javax.persistence.EntityManager;\r\n \r\n import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n@@ -37,7 +39,8 @@\n     private EntityD entityD;\r\n \r\n     public void setUp() {\r\n-        setUp(EntityA.class, EntityB.class, EntityC.class, EntityD.class, EntityE.class);\r\n+        setUp(EntityA.class, EntityB.class, EntityC.class, EntityD.class, \r\n+              EntityE.class, EntityF.class, EntityG.class);\r\n \r\n         createTestData();\r\n     }\r\n@@ -154,4 +157,55 @@ public void testComplexTwoCycles() {\n             em.close();\r\n         }\r\n     }\r\n+    \r\n+    public void testForeignKeyCascade() {\r\n+        EntityManager em = emf.createEntityManager();\r\n+        try {\r\n+            EntityF f = new EntityF();\r\n+            f.setId(1);\r\n+\r\n+            List<EntityG> listG = new ArrayList<EntityG>();\r\n+            EntityG g1 = new EntityG();\r\n+            g1.setId(1);\r\n+            listG.add(g1);\r\n+            g1.setEntityF(f);\r\n+            \r\n+            EntityG g2 = new EntityG();\r\n+            g2.setId(2);\r\n+            listG.add(g2);\r\n+            g2.setEntityF(f);\r\n+\r\n+            EntityG g3 = new EntityG();\r\n+            g3.setId(3);\r\n+            listG.add(g3);\r\n+            g3.setEntityF(f);\r\n+\r\n+            EntityG g4 = new EntityG();\r\n+            g4.setId(4);\r\n+            listG.add(g4);\r\n+            g4.setEntityF(f);\r\n+            \r\n+            f.setListG(listG);\r\n+            em.getTransaction().begin();\r\n+            em.persist(f);\r\n+            em.persist(g1);\r\n+            em.persist(g2);\r\n+            em.persist(g3);\r\n+            em.persist(g4);\r\n+            em.getTransaction().commit();\r\n+\r\n+            em.getTransaction().begin();\r\n+            em.remove(f);\r\n+            em.getTransaction().commit();\r\n+        }\r\n+        catch (Exception e) {\r\n+            fail(\"Fail to delete EntityF\");\r\n+        }\r\n+        finally {\r\n+            if (em.getTransaction().isActive())\r\n+                em.getTransaction().rollback();\r\n+            em.close();\r\n+        }\r\n+    }\r\n+    \r\n }\r"}]}

