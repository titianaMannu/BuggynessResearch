{"sha":"de8a4760c8b7df2186cd831733b8fdc095dbc736","node_id":"MDY6Q29tbWl0MjA2MzY0OmRlOGE0NzYwYzhiN2RmMjE4NmNkODMxNzMzYjhmZGMwOTVkYmM3MzY=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-02-16T19:30:20Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-02-16T19:30:20Z"},"message":"Enable some of the new tests.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@628375 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1187b8ebe3b5b6320d4d0f52c127054cee42c956","url":"https://api.github.com/repos/apache/openjpa/git/trees/1187b8ebe3b5b6320d4d0f52c127054cee42c956"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/de8a4760c8b7df2186cd831733b8fdc095dbc736","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/de8a4760c8b7df2186cd831733b8fdc095dbc736","html_url":"https://github.com/apache/openjpa/commit/de8a4760c8b7df2186cd831733b8fdc095dbc736","comments_url":"https://api.github.com/repos/apache/openjpa/commits/de8a4760c8b7df2186cd831733b8fdc095dbc736/comments","author":null,"committer":null,"parents":[{"sha":"7d44e7a355b9611f37ed0122f4a3e69bdfb335ab","url":"https://api.github.com/repos/apache/openjpa/commits/7d44e7a355b9611f37ed0122f4a3e69bdfb335ab","html_url":"https://github.com/apache/openjpa/commit/7d44e7a355b9611f37ed0122f4a3e69bdfb335ab"}],"stats":{"total":1100,"additions":126,"deletions":974},"files":[{"sha":"0099b13154e71efcd193c62d564745a304838874","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMappingInfo.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/de8a4760c8b7df2186cd831733b8fdc095dbc736/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMappingInfo.java","raw_url":"https://github.com/apache/openjpa/raw/de8a4760c8b7df2186cd831733b8fdc095dbc736/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMappingInfo.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMappingInfo.java?ref=de8a4760c8b7df2186cd831733b8fdc095dbc736","patch":"@@ -226,14 +226,18 @@ public void setSecondaryTableJoinColumns(String tableName, List cols) {\n      * Return the table for the given class.\n      */\n     public Table getTable(final ClassMapping cls, boolean adapt) {\n-        return createTable(cls, new TableDefaults() {\n+        Table t = createTable(cls, new TableDefaults() {\n             public String get(Schema schema) {\n                 // delay this so that we don't do schema reflection for unique\n                 // table name unless necessary\n                 return cls.getMappingRepository().getMappingDefaults().\n                     getTableName(cls, schema);\n             }\n         }, _schemaName, _tableName, adapt);\n+        t.setComment(cls.getTypeAlias() == null\n+            ? cls.getDescribedType().getName()\n+            : cls.getTypeAlias());\n+        return t;\n     }\n \n     /**"},{"sha":"9172ff63a3d1d15d5e64805a3ec68bdbe881c167","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingInfo.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/de8a4760c8b7df2186cd831733b8fdc095dbc736/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingInfo.java","raw_url":"https://github.com/apache/openjpa/raw/de8a4760c8b7df2186cd831733b8fdc095dbc736/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingInfo.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingInfo.java?ref=de8a4760c8b7df2186cd831733b8fdc095dbc736","patch":"@@ -699,6 +699,9 @@ else if (col.getJavaType() == JavaTypes.OBJECT) {\n             if (decimals != 0)\n                 col.setDecimalDigits(decimals);\n         }\n+\n+        if (tmplate.hasComment())\n+            col.setComment(tmplate.getComment());\n         return col;\n     }\n "},{"sha":"d39d24c6216f5fdc985f8f54390fb89dbcfb794e","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/FullClassStrategy.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/de8a4760c8b7df2186cd831733b8fdc095dbc736/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/FullClassStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/de8a4760c8b7df2186cd831733b8fdc095dbc736/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/FullClassStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/FullClassStrategy.java?ref=de8a4760c8b7df2186cd831733b8fdc095dbc736","patch":"@@ -76,6 +76,7 @@ public void map(boolean adapt) {\n             Column id = new Column();\n             id.setName(\"id\");\n             id.setJavaType(JavaTypes.LONG);\n+            id.setComment(\"datastore id\");\n             if (cls.getIdentityStrategy() == ValueStrategies.AUTOASSIGN)\n                 id.setAutoAssigned(true);\n             id.setNotNull(true);"},{"sha":"45dedec18f7173217fd4e3fd6d196dcca3f62c5f","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Column.java","status":"modified","additions":14,"deletions":1,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/de8a4760c8b7df2186cd831733b8fdc095dbc736/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Column.java","raw_url":"https://github.com/apache/openjpa/raw/de8a4760c8b7df2186cd831733b8fdc095dbc736/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Column.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Column.java?ref=de8a4760c8b7df2186cd831733b8fdc095dbc736","patch":"@@ -72,7 +72,8 @@\n     private int _index = 0;\n     private boolean _pk = false;\n     private VersionStrategy _versionStrategy = null;\n-    \n+    private String _comment = null;\n+\n     /**\n      * Default constructor.\n      */\n@@ -733,4 +734,16 @@ public VersionStrategy getVersionStrategy() {\n     public void setVersionStrategy(VersionStrategy strategy) {\n         this._versionStrategy = strategy;\n     }\n+\n+    public boolean hasComment() {\n+        return _comment != null && !_comment.equalsIgnoreCase(_name);\n+    }\n+\n+    public String getComment() {\n+        return _comment;\n+    }\n+\n+    public void setComment(String comment) {\n+        _comment = comment;\n+    }\n }"},{"sha":"a79522a7d0bfc5d0c8e339944005acfb772934cd","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Table.java","status":"modified","additions":13,"deletions":0,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/de8a4760c8b7df2186cd831733b8fdc095dbc736/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Table.java","raw_url":"https://github.com/apache/openjpa/raw/de8a4760c8b7df2186cd831733b8fdc095dbc736/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Table.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Table.java?ref=de8a4760c8b7df2186cd831733b8fdc095dbc736","patch":"@@ -60,6 +60,7 @@\n     private ForeignKey[] _fks = null;\n     private Index[] _idxs = null;\n     private Unique[] _unqs = null;\n+    private String _comment = null;\n \n     /**\n      * Default constructor.\n@@ -689,4 +690,16 @@ public int compareTo(Object other) {\n     public String toString() {\n         return getFullName();\n     }\n+\n+    public boolean hasComment() {\n+        return _comment != null && !_comment.equalsIgnoreCase(_name);\n+    }\n+\n+    public String getComment() {\n+        return _comment;\n+    }\n+\n+    public void setComment(String comment) {\n+        _comment = comment;\n+    }\n }"},{"sha":"093bbd2f321896bf306d94b7e901dadbda696d63","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","status":"modified","additions":33,"deletions":11,"changes":44,"blob_url":"https://github.com/apache/openjpa/blob/de8a4760c8b7df2186cd831733b8fdc095dbc736/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/de8a4760c8b7df2186cd831733b8fdc095dbc736/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java?ref=de8a4760c8b7df2186cd831733b8fdc095dbc736","patch":"@@ -193,6 +193,7 @@\n     public boolean supportsDefaultUpdateAction = true;\n     public boolean supportsAlterTableWithAddColumn = true;\n     public boolean supportsAlterTableWithDropColumn = true;\n+    public boolean supportsComments = false;\n     public String reservedWords = null;\n     public String systemSchemas = null;\n     public String systemTables = null;\n@@ -2972,36 +2973,57 @@ protected String makeNameValid(String name, NameSet set, int maxLen,\n      */\n     public String[] getCreateTableSQL(Table table) {\n         StringBuffer buf = new StringBuffer();\n-        buf.append(\"CREATE TABLE \").append(getFullName(table, false)).\n-            append(\" (\");\n-\n-        Column[] cols = table.getColumns();\n-        for (int i = 0; i < cols.length; i++) {\n-            if (i > 0)\n-                buf.append(\", \");\n-            buf.append(getDeclareColumnSQL(cols[i], false));\n+        buf.append(\"CREATE TABLE \").append(getFullName(table, false));\n+        if (supportsComments && table.hasComment()) {\n+            buf.append(\" \");\n+            comment(buf, table.getComment());\n+            buf.append(\"\\n    (\");\n+        } else {\n+            buf.append(\" (\");\n         }\n \n+        // do this before getting the columns so we know how to handle\n+        // the last comma\n+        StringBuffer endBuf = new StringBuffer();\n         PrimaryKey pk = table.getPrimaryKey();\n         String pkStr;\n         if (pk != null) {\n             pkStr = getPrimaryKeyConstraintSQL(pk);\n             if (pkStr != null)\n-                buf.append(\", \").append(pkStr);\n+                endBuf.append(pkStr);\n         }\n \n         Unique[] unqs = table.getUniques();\n         String unqStr;\n         for (int i = 0; i < unqs.length; i++) {\n             unqStr = getUniqueConstraintSQL(unqs[i]);\n-            if (unqStr != null)\n-                buf.append(\", \").append(unqStr);\n+            if (unqStr != null) {\n+                if (endBuf.length() > 0)\n+                    endBuf.append(\", \");\n+                endBuf.append(unqStr);\n+            }\n+        }\n+\n+        Column[] cols = table.getColumns();\n+        for (int i = 0; i < cols.length; i++) {\n+            buf.append(getDeclareColumnSQL(cols[i], false));\n+            if (i < cols.length - 1 || endBuf.length() > 0)\n+                buf.append(\", \");\n+            if (supportsComments && cols[i].hasComment()) {\n+                comment(buf, cols[i].getComment());\n+                buf.append(\"\\n    \");\n+            }\n         }\n \n+        buf.append(endBuf.toString());\n         buf.append(\")\");\n         return new String[]{ buf.toString() };\n     }\n \n+    protected StringBuffer comment(StringBuffer buf, String comment) {\n+        return buf.append(\"-- \").append(comment);\n+    }\n+\n     /**\n      * Return a series of SQL statements to drop the given table. Indexes\n      * will be dropped separately. Returns"},{"sha":"f79307f88fdf64b9eac28265da8c9303e805d5d8","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DerbyDictionary.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/de8a4760c8b7df2186cd831733b8fdc095dbc736/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DerbyDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/de8a4760c8b7df2186cd831733b8fdc095dbc736/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DerbyDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DerbyDictionary.java?ref=de8a4760c8b7df2186cd831733b8fdc095dbc736","patch":"@@ -61,6 +61,8 @@ public DerbyDictionary() {\n         requiresCastForMathFunctions = true;\n         requiresCastForComparisons = true;\n \n+        supportsComments = true;\n+\n         fixedSizeTypeNameSet.addAll(Arrays.asList(new String[]{\n             \"BIGINT\", \"INTEGER\",\n         }));"},{"sha":"ebe56440f61113f64607d0c37869228f8aee394f","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","status":"modified","additions":6,"deletions":3,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/de8a4760c8b7df2186cd831733b8fdc095dbc736/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/de8a4760c8b7df2186cd831733b8fdc095dbc736/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java?ref=de8a4760c8b7df2186cd831733b8fdc095dbc736","patch":"@@ -4339,9 +4339,12 @@ public void assertOpen() {\n             if (_closedException == null)  // TRACE not enabled\n                 throw new InvalidStateException(_loc.get(\"closed-notrace\"))\n                         .setFatal(true);\n-            else\n-                throw new InvalidStateException(_loc.get(\"closed\"),\n-                        _closedException).setFatal(true);\n+            else {\n+                OpenJPAException e = new InvalidStateException(\n+                    _loc.get(\"closed\"), _closedException).setFatal(true);\n+                e.setCause(_closedException);\n+                throw e;\n+            }\n         }\n     }\n "},{"sha":"5d3808981288c89ddc8c4f9fe061dc0ebde81003","filename":"openjpa-persistence-jdbc/pom.xml","status":"modified","additions":4,"deletions":37,"changes":41,"blob_url":"https://github.com/apache/openjpa/blob/de8a4760c8b7df2186cd831733b8fdc095dbc736/openjpa-persistence-jdbc/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/de8a4760c8b7df2186cd831733b8fdc095dbc736/openjpa-persistence-jdbc/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/pom.xml?ref=de8a4760c8b7df2186cd831733b8fdc095dbc736","patch":"@@ -327,6 +327,10 @@\n \n                         <!-- exclude new tests that aren't passing yet -->\n                         <exclude>org/apache/openjpa/persistence/jpql/clauses/TestEJBQueryInterface.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/kernel/TestInitialValueFetching.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/kernel/TestOpenResultsCommit.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/query/TestQuotedNumbersInFilters2.java</exclude>\n+\n                         <exclude>org/apache/openjpa/persistence/kernel/TestEJBEmbedded.java</exclude>\n                         <exclude>org/apache/openjpa/persistence/annotations/TestAdvAnnot.java</exclude>\n                         <exclude>org/apache/openjpa/persistence/annotations/TestDDCallbackMethods.java</exclude>\n@@ -436,72 +440,35 @@\n                         <exclude>org/apache/openjpa/persistence/kernel/TestArrayValues2.java</exclude>\n                         <exclude>org/apache/openjpa/persistence/kernel/TestBigDecimals.java</exclude>\n                         <exclude>org/apache/openjpa/persistence/kernel/TestBrokerFactoryPooling.java</exclude>\n-                        <exclude>org/apache/openjpa/persistence/kernel/TestCalendarFields.java</exclude>\n-                        <exclude>org/apache/openjpa/persistence/kernel/TestCheckConsistency.java</exclude>\n-                        <exclude>org/apache/openjpa/persistence/kernel/TestClassStringConstructor.java</exclude>\n                         <exclude>org/apache/openjpa/persistence/kernel/TestConnectionRetainMode.java</exclude>\n-                        <exclude>org/apache/openjpa/persistence/kernel/TestDateQueries.java</exclude>\n                         <exclude>org/apache/openjpa/persistence/kernel/TestDependentFields2.java</exclude>\n                         <exclude>org/apache/openjpa/persistence/kernel/TestDetachedStateManager.java</exclude>\n-                        <exclude>org/apache/openjpa/persistence/kernel/TestEJBEntityManager.java</exclude>\n-                        <exclude>org/apache/openjpa/persistence/kernel/TestEJBGetObjectByIdValue.java</exclude>\n                         <exclude>org/apache/openjpa/persistence/kernel/TestEJBIncrementalFlushes.java</exclude>\n-                        <exclude>org/apache/openjpa/persistence/kernel/TestEJBLobs.java</exclude>\n-                        <exclude>org/apache/openjpa/persistence/kernel/TestEJBLocales.java</exclude>\n-                        <exclude>org/apache/openjpa/persistence/kernel/TestEJBManagedInverses.java</exclude>\n                         <exclude>org/apache/openjpa/persistence/kernel/TestEJBNoPersistentFields.java</exclude>\n-                        <exclude>org/apache/openjpa/persistence/kernel/TestEJBNullValues.java</exclude>\n                         <exclude>org/apache/openjpa/persistence/kernel/TestEJBObjectCollections.java</exclude>\n                         <exclude>org/apache/openjpa/persistence/kernel/TestEJBRetainValues.java</exclude>\n-                        <exclude>org/apache/openjpa/persistence/kernel/TestEJBState.java</exclude>\n-                        <exclude>org/apache/openjpa/persistence/kernel/TestEJBTransactionalClass.java</exclude>\n                         <exclude>org/apache/openjpa/persistence/kernel/TestEJBTransactions.java</exclude>\n-                        <exclude>org/apache/openjpa/persistence/kernel/TestExtents.java</exclude>\n-                        <exclude>org/apache/openjpa/persistence/kernel/TestExtents2.java</exclude>\n-                        <exclude>org/apache/openjpa/persistence/kernel/TestFetchGroups.java</exclude>\n                         <exclude>org/apache/openjpa/persistence/kernel/TestFetchGroupsExtent.java</exclude>\n-                        <exclude>org/apache/openjpa/persistence/kernel/TestFetchGroupsQuery.java</exclude>\n                         <exclude>org/apache/openjpa/persistence/kernel/TestFetchPlan.java</exclude>\n                         <exclude>org/apache/openjpa/persistence/kernel/TestFieldRange.java</exclude>\n                         <exclude>org/apache/openjpa/persistence/kernel/TestFieldRange2.java</exclude>\n-                        <exclude>org/apache/openjpa/persistence/kernel/TestFieldState.java</exclude>\n                         <exclude>org/apache/openjpa/persistence/kernel/TestGetObjectsById.java</exclude>\n                         <exclude>org/apache/openjpa/persistence/kernel/TestIncrementalFlushes.java</exclude>\n-                        <exclude>org/apache/openjpa/persistence/kernel/TestIncrementalFlushesDeletes.java</exclude>\n-                        <exclude>org/apache/openjpa/persistence/kernel/TestInheritance.java</exclude>\n-                        <exclude>org/apache/openjpa/persistence/kernel/TestInitialValueFetching.java</exclude>\n                         <exclude>org/apache/openjpa/persistence/kernel/TestInstanceCallbacks.java</exclude>\n-                        <exclude>org/apache/openjpa/persistence/kernel/TestManagedInterfaces.java</exclude>\n-                        <exclude>org/apache/openjpa/persistence/kernel/TestManagedInterfacesAppId.java</exclude>\n                         <exclude>org/apache/openjpa/persistence/kernel/TestMultiThreaded.java</exclude>\n                         <exclude>org/apache/openjpa/persistence/kernel/TestNTW.java</exclude>\n-                        <exclude>org/apache/openjpa/persistence/kernel/TestOpenResultsCommit.java</exclude>\n                         <exclude>org/apache/openjpa/persistence/kernel/TestOptimisticLockGroups.java</exclude>\n-                        <exclude>org/apache/openjpa/persistence/kernel/TestPCClass.java</exclude>\n                         <exclude>org/apache/openjpa/persistence/kernel/TestPersistenceManager.java</exclude>\n                         <exclude>org/apache/openjpa/persistence/kernel/TestPersistenceManagerFactoryImpl.java</exclude>\n                         <exclude>org/apache/openjpa/persistence/kernel/TestPersistentMaps.java</exclude>\n-                        <exclude>org/apache/openjpa/persistence/kernel/TestPessimisticLocking.java</exclude>\n-                        <exclude>org/apache/openjpa/persistence/kernel/TestPMMemory.java</exclude>\n-                        <exclude>org/apache/openjpa/persistence/kernel/TestPojoWithoutAnnotationsCannotBePersisted.java</exclude>\n-                        <exclude>org/apache/openjpa/persistence/kernel/TestProxies2.java</exclude>\n-                        <exclude>org/apache/openjpa/persistence/kernel/TestQueries.java</exclude>\n                         <exclude>org/apache/openjpa/persistence/kernel/TestRestoreValues.java</exclude>\n                         <exclude>org/apache/openjpa/persistence/kernel/TestRetainValuesInOptimistic.java</exclude>\n                         <exclude>org/apache/openjpa/persistence/kernel/TestSavepointEmbedded.java</exclude>\n                         <exclude>org/apache/openjpa/persistence/kernel/TestSavepointEmbeddedPreFlush.java</exclude>\n-                        <exclude>org/apache/openjpa/persistence/kernel/TestSavepointOrdering.java</exclude>\n-                        <exclude>org/apache/openjpa/persistence/kernel/TestSavepoints.java</exclude>\n                         <exclude>org/apache/openjpa/persistence/kernel/TestSecondClassValues.java</exclude>\n-                        <exclude>org/apache/openjpa/persistence/kernel/TestSecurityContext.java</exclude>\n-                        <exclude>org/apache/openjpa/persistence/kernel/TestSequence.java</exclude>\n                         <exclude>org/apache/openjpa/persistence/kernel/TestSerialize.java</exclude>\n-                        <exclude>org/apache/openjpa/persistence/kernel/TestSimple.java</exclude>\n                         <exclude>org/apache/openjpa/persistence/kernel/TestSpecialNumbers.java</exclude>\n                         <exclude>org/apache/openjpa/persistence/kernel/TestSpecialNumbers2.java</exclude>\n-                        <exclude>org/apache/openjpa/persistence/kernel/TestStateManagerImplData.java</exclude>\n-                        <exclude>org/apache/openjpa/persistence/kernel/TestStaticInnerClasses.java</exclude>\n-                        <exclude>org/apache/openjpa/persistence/kernel/TestStoreBlob.java</exclude>\n                         <exclude>org/apache/openjpa/persistence/meta/TestClassMetaData.java</exclude>\n                         <exclude>org/apache/openjpa/persistence/meta/TestExternalValues.java</exclude>\n                         <exclude>org/apache/openjpa/persistence/meta/TestFieldDeclarationOrder.java</exclude>"},{"sha":"dfbf272a6cf5c342fd9a785787da79c0b7980503","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/utils/AbstractTestCase.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/de8a4760c8b7df2186cd831733b8fdc095dbc736/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/utils/AbstractTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/de8a4760c8b7df2186cd831733b8fdc095dbc736/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/utils/AbstractTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/utils/AbstractTestCase.java?ref=de8a4760c8b7df2186cd831733b8fdc095dbc736","patch":"@@ -203,7 +203,8 @@ protected OpenJPAEntityManagerFactory getEmf(Map map) {\n     protected void addProperties(Map map) {\r\n         if (!map.containsKey(\"openjpa.jdbc.SynchronizeMappings\"))\r\n             map.put(\"openjpa.jdbc.SynchronizeMappings\",\r\n-                \"buildSchema(ForeignKeys=true)\");\r\n+                \"buildSchema(ForeignKeys=true,\" +\r\n+                    \"SchemaAction='add,deleteTableContents')\");\r\n     }\r\n \r\n     protected OpenJPAEntityManagerFactory getEmf() {\r"},{"sha":"d84d131f77f17523da01295cd415083632362a05","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/BaseKernelTest.java","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/de8a4760c8b7df2186cd831733b8fdc095dbc736/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/BaseKernelTest.java","raw_url":"https://github.com/apache/openjpa/raw/de8a4760c8b7df2186cd831733b8fdc095dbc736/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/BaseKernelTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/BaseKernelTest.java?ref=de8a4760c8b7df2186cd831733b8fdc095dbc736","patch":"@@ -81,10 +81,6 @@ protected OpenJPAEntityManager getPM(boolean optimistic,boolean retainValues)\n         return em;\r\n     }\r\n     \r\n-    protected  OpenJPAStateManager getStateManager(Object obj,EntityManager pm) {\r\n-        return getStateManager(obj,pm);\r\n-    }\r\n-    \r\n     protected Object persist(Object ob) {\r\n         //FIXME  - this is just a workaround \r\n         //  Broker broker = .getBrokerFactory().newBroker();\r"},{"sha":"3b2f1e71de0b490c5d76fa4d9870568027611ea5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestDependentFields2.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/de8a4760c8b7df2186cd831733b8fdc095dbc736/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestDependentFields2.java","raw_url":"https://github.com/apache/openjpa/raw/de8a4760c8b7df2186cd831733b8fdc095dbc736/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestDependentFields2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestDependentFields2.java?ref=de8a4760c8b7df2186cd831733b8fdc095dbc736","patch":"@@ -480,11 +480,11 @@ private void nullSharedDependent(int action) {\n                 action = COMMIT;\r\n             } else {\r\n                 try {\r\n-                    endTx(pm);\r\n+                    pm.getTransaction().commit();\r\n                     fail(\"Committed with ref to deleted dependent object\");\r\n                 } catch (Exception je) {\r\n-                } finally {\r\n                     rollbackTx(pm);\r\n+                } finally {\r\n                 }\r\n                 break;\r\n             }\r"},{"sha":"00942c500599efadf31d3cd99a05162c2acb8236","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBLobs.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/de8a4760c8b7df2186cd831733b8fdc095dbc736/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBLobs.java","raw_url":"https://github.com/apache/openjpa/raw/de8a4760c8b7df2186cd831733b8fdc095dbc736/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBLobs.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBLobs.java?ref=de8a4760c8b7df2186cd831733b8fdc095dbc736","patch":"@@ -159,6 +159,7 @@ public void setBlob(Inner2 val) {\n \r\n     @SuppressWarnings(\"serial\")\r\n     @Entity\r\n+    @Table(name=\"Inner2\")\r\n     public static class Inner2 implements Serializable {\r\n \r\n         @Id\r"},{"sha":"acc4ed82b8422fb26c160dcfdf86a9a35f7beac5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestManagedInterfaces.java","status":"removed","additions":0,"deletions":490,"changes":490,"blob_url":"https://github.com/apache/openjpa/blob/7d44e7a355b9611f37ed0122f4a3e69bdfb335ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestManagedInterfaces.java","raw_url":"https://github.com/apache/openjpa/raw/7d44e7a355b9611f37ed0122f4a3e69bdfb335ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestManagedInterfaces.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestManagedInterfaces.java?ref=7d44e7a355b9611f37ed0122f4a3e69bdfb335ab","patch":"@@ -1,490 +0,0 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.kernel;\r\n-\r\n-import java.util.List;\r\n-\r\n-\r\n-import org.apache.openjpa.persistence.kernel.common.apps.ManagedInterface;\r\n-import org.apache.openjpa.persistence.kernel.common.apps.ManagedInterfaceEmbed;\r\n-import org.apache.openjpa.persistence.kernel.common.apps.ManagedInterfaceOwner;\r\n-import org.apache.openjpa.persistence.kernel.common.apps.ManagedInterfaceSup;\r\n-import org.apache.openjpa.persistence.kernel.common.apps.MixedInterface;\r\n-import org.apache.openjpa.persistence.kernel.common.apps.MixedInterfaceImpl;\r\n-import org.apache.openjpa.persistence.kernel.common.apps.NonMappedInterfaceImpl;\r\n-import org.apache.openjpa.persistence.kernel.common.apps.RuntimeTest1;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-import org.apache.openjpa.persistence.OpenJPAQuery;\r\n-\r\n-public class TestManagedInterfaces extends BaseKernelTest {\r\n-\r\n-    public void setUp() {\r\n-        deleteAll(ManagedInterfaceSup.class);\r\n-        deleteAll(ManagedInterfaceOwner.class);\r\n-        deleteAll(MixedInterface.class);\r\n-        deleteAll(MixedInterfaceImpl.class);\r\n-        deleteAll(NonMappedInterfaceImpl.class);\r\n-        deleteAll(RuntimeTest1.class);\r\n-    }\r\n-\r\n-    public void testManagedInterface() {\r\n-        OpenJPAEntityManager pm = getPM();\r\n-        startTx(pm);\r\n-        ManagedInterface pc =\r\n-            (ManagedInterface) pm.createInstance(ManagedInterface.class);\r\n-        pc.setIntFieldSup(3);\r\n-        pc.setIntField(4);\r\n-        pc.setEmbed((ManagedInterfaceEmbed) pm\r\n-            .createInstance(ManagedInterfaceEmbed.class));\r\n-\r\n-        pc.getEmbed().setIntField(5);\r\n-        assertEquals(5, pc.getEmbed().getIntField());\r\n-        pm.persist(pc);\r\n-        Object oid = pm.getObjectId(pc);\r\n-        endTx(pm);\r\n-        endEm(pm);\r\n-\r\n-        pm = getPM();\r\n-        pc = pm.find(ManagedInterface.class, oid);\r\n-        assertEquals(3, pc.getIntFieldSup());\r\n-        assertEquals(4, pc.getIntField());\r\n-        assertEquals(5, pc.getEmbed().getIntField());\r\n-        startTx(pm);\r\n-        pc.setIntField(14);\r\n-        endTx(pm);\r\n-        endEm(pm);\r\n-\r\n-        pm = getPM();\r\n-        startTx(pm);\r\n-\r\n-//        Query query = pm.newQuery(ManagedInterface.class, \"intField==14\");\r\n-//        Collection c = (Collection) query.execute();\r\n-\r\n-        OpenJPAQuery query = pm.createQuery(\r\n-            \"SELECT o FROM ManagedInterface o WHERE o.intField = 14\");\r\n-        List l = query.getResultList();\r\n-\r\n-        assertEquals(1, l.size());\r\n-        pc = (ManagedInterface) l.iterator().next();\r\n-        assertEquals(14, pc.getIntField());\r\n-        pm.remove(pc);\r\n-        endTx(pm);\r\n-        endEm(pm);\r\n-\r\n-        pm = getPM();\r\n-        try {\r\n-            pm.find(ManagedInterface.class, oid);\r\n-            fail();\r\n-        } catch (Exception onfe) {\r\n-        }\r\n-\r\n-        endEm(pm);\r\n-    }\r\n-\r\n-//    public void testInterfaceOwner() {\r\n-//        OpenJPAEntityManager pm = getPM();\r\n-//        ManagedInterfaceOwner pc = new ManagedInterfaceOwner();\r\n-//        pc.setIFace((ManagedInterfaceSup) pm.createInstance \r\n-//            (ManagedInterfaceSup.class));\r\n-//        pc.setEmbed((ManagedInterfaceEmbed) pm.createInstance \r\n-//            (ManagedInterfaceEmbed.class));\r\n-//        pc.getIFace().setIntFieldSup(3);\r\n-//        pc.getEmbed().setIntField(5);\r\n-//\r\n-//        startTx(pm);\r\n-//        pm.persist(pc);\r\n-//        Object oid = pm.getObjectId(pc);\r\n-//        endTx(pm);\r\n-//        pc = (ManagedInterfaceOwner) pm.getObjectById(oid, true);\r\n-//        assertEquals(3, pc.getIFace().getIntFieldSup());\r\n-//        assertEquals(5, pc.getEmbed().getIntField());\r\n-//        endEm(pm);\r\n-//\r\n-//        pm = getPM();\r\n-//        pc = (ManagedInterfaceOwner) pm.getObjectById(oid, true);\r\n-//        assertEquals(3, pc.getIFace().getIntFieldSup());\r\n-//        assertEquals(5, pc.getEmbed().getIntField());\r\n-//        endEm(pm);\r\n-//\r\n-//        pm = getPM();\r\n-//        startTx(pm);\r\n-//        Query q = pm.newQuery(ManagedInterfaceOwner.class, \r\n-//            \"iface.intFieldSup==3 && embed.intField==5\");\r\n-//        Collection c = (Collection) q.execute();\r\n-//        pc = (ManagedInterfaceOwner) c.iterator().next();\r\n-//        assertEquals(3, pc.getIFace().getIntFieldSup());\r\n-//        assertEquals(5, pc.getEmbed().getIntField());\r\n-//\r\n-//        pc.getIFace().setIntFieldSup(13);\r\n-//        pc.getEmbed().setIntField(15);\r\n-//        assertEquals(13, pc.getIFace().getIntFieldSup());\r\n-//        assertEquals(15, pc.getEmbed().getIntField());\r\n-//        endTx(pm);\r\n-//        endEm(pm);\r\n-//\r\n-//        pm = getPM();\r\n-//        pc = (ManagedInterfaceOwner) pm.getObjectById(oid, true);\r\n-//        assertEquals(13, pc.getIFace().getIntFieldSup());\r\n-//        assertEquals(15, pc.getEmbed().getIntField());\r\n-//        endEm(pm);\r\n-//    }\r\n-//\r\n-//    public void testCollection() {\r\n-//        OpenJPAEntityManager pm = getPM();\r\n-//        startTx(pm);\r\n-//        ManagedInterface pc = (ManagedInterface) pm.createInstance\r\n-//            (ManagedInterface.class);\r\n-//        Set set = new HashSet();\r\n-//        set.add(new Integer(3));\r\n-//        set.add(new Integer(4));\r\n-//        set.add(new Integer(5));\r\n-//        pc.setSetInteger(set);\r\n-//        pm.persist(pc);\r\n-//        Object oid = pm.getObjectId(pc);\r\n-//        endTx(pm);\r\n-//        endEm(pm);\r\n-//\r\n-//        pm = getPM();\r\n-//        pc = (ManagedInterface) pm.getObjectById(oid, true);\r\n-//        set = pc.getSetInteger();\r\n-//        assertEquals(3, set.size());\r\n-//        assertTrue(set.contains(new Integer(3)));\r\n-//        assertTrue(set.contains(new Integer(4)));\r\n-//        assertTrue(set.contains(new Integer(5)));\r\n-//        startTx(pm);\r\n-//        set.remove(new Integer(4));\r\n-//        set.add(new Integer(14));\r\n-//        set.add(new Integer(15));\r\n-//        endTx(pm);\r\n-//        endEm(pm);\r\n-//\r\n-//        pm = getPM();\r\n-//        pc = (ManagedInterface) pm.getObjectById(oid, true);\r\n-//        set = pc.getSetInteger();\r\n-//        assertEquals(4, set.size());\r\n-//        assertTrue(set.contains(new Integer(3)));\r\n-//        assertTrue(set.contains(new Integer(5)));\r\n-//        assertTrue(set.contains(new Integer(14)));\r\n-//        assertTrue(set.contains(new Integer(15)));\r\n-//        startTx(pm);\r\n-//        pc.setSetInteger(null);\r\n-//        endTx(pm);\r\n-//        endEm(pm);\r\n-//\r\n-//        pm = getPM();\r\n-//        pc = (ManagedInterface) pm.getObjectById(oid, true);\r\n-//        set = pc.getSetInteger();\r\n-//        assertTrue (set == null || set.size() == 0);\r\n-//        endEm(pm);\r\n-//    }\r\n-//\r\n-//    public void testCollectionPC() {\r\n-//        OpenJPAEntityManager pm = getPM();\r\n-//        startTx(pm);\r\n-//        ManagedInterface pc = (ManagedInterface) pm.createInstance\r\n-//            (ManagedInterface.class);\r\n-//        Set set = new HashSet();\r\n-//        set.add(new RuntimeTest1(\"a\", 3));\r\n-//        set.add(new RuntimeTest1(\"b\", 4));\r\n-//        set.add(new RuntimeTest1(\"c\", 5));\r\n-//        pc.setSetPC(set);\r\n-//        pm.persist(pc);\r\n-//        Object oid = pm.getObjectId(pc);\r\n-//        endTx(pm);\r\n-//        endEm(pm);\r\n-//\r\n-//        pm = getPM();\r\n-//        pc = (ManagedInterface) pm.getObjectById(oid, true);\r\n-//        set = pc.getSetPC();\r\n-//        assertEquals(3, set.size());\r\n-//        Collection seen = new ArrayList();\r\n-//        RuntimeTest1 rel;\r\n-//        RuntimeTest1 toRem = null;\r\n-//        for (Iterator it = set.iterator(); it.hasNext();) {\r\n-//            rel = (RuntimeTest1) it.next();\r\n-//            seen.add(rel.getStringField());\r\n-//            if (rel.getIntField() == 4)\r\n-//                toRem = rel;\r\n-//        }\r\n-//        assertEquals(3, seen.size());\r\n-//        assertTrue(seen.contains(\"a\"));\r\n-//        assertTrue(seen.contains(\"b\"));\r\n-//        assertTrue(seen.contains(\"c\"));\r\n-//        startTx(pm);\r\n-//        assertNotNull(toRem);\r\n-//        set.remove(toRem);\r\n-//        set.add(new RuntimeTest1(\"x\", 14));\r\n-//        set.add(new RuntimeTest1(\"y\", 15));\r\n-//        endTx(pm);\r\n-//        endEm(pm);\r\n-//\r\n-//        pm = getPM();\r\n-//        pc = (ManagedInterface) pm.getObjectById(oid, true);\r\n-//        set = pc.getSetPC();\r\n-//        assertEquals(4, set.size());\r\n-//        seen.clear();\r\n-//        for (Iterator it = set.iterator(); it.hasNext();) {\r\n-//            rel = (RuntimeTest1) it.next();\r\n-//            seen.add(rel.getStringField());\r\n-//        }\r\n-//        assertEquals(4, seen.size());\r\n-//        assertTrue(seen.contains(\"a\"));\r\n-//        assertTrue(seen.contains(\"c\"));\r\n-//        assertTrue(seen.contains(\"x\"));\r\n-//        assertTrue(seen.contains(\"y\"));\r\n-//        startTx(pm);\r\n-//        pc.setSetPC(null);\r\n-//        endTx(pm);\r\n-//        endEm(pm);\r\n-//\r\n-//        pm = getPM();\r\n-//        pc = (ManagedInterface) pm.getObjectById(oid, true);\r\n-//        set = pc.getSetPC();\r\n-//        assertTrue (set == null || set.size() == 0);\r\n-//        endEm(pm);\r\n-//    }\r\n-//\r\n-//    public void testCollectionInterfaces() {\r\n-//        OpenJPAEntityManager pm = getPM();\r\n-//        startTx(pm);\r\n-//        ManagedInterface pc = (ManagedInterface) pm.createInstance\r\n-//            (ManagedInterface.class);\r\n-//        Set set = new HashSet();\r\n-//        set.add(createInstance(pm, 3));\r\n-//        set.add(createInstance(pm, 4));\r\n-//        set.add(createInstance(pm, 5));\r\n-//        pc.setSetI(set);\r\n-//        pm.persist(pc);\r\n-//        Object oid = pm.getObjectId(pc);\r\n-//        endTx(pm);\r\n-//        endEm(pm);\r\n-//\r\n-//        pm = getPM();\r\n-//        pc = (ManagedInterface) pm.getObjectById(oid, true);\r\n-//        set = pc.getSetI();\r\n-//        assertEquals(3, set.size());\r\n-//        Collection seen = new ArrayList();\r\n-//        ManagedInterface rel = null;\r\n-//        ManagedInterface toRem = null;\r\n-//        for (Iterator it = set.iterator(); it.hasNext();) {\r\n-//            rel = (ManagedInterface) it.next();\r\n-//            seen.add(new Integer(rel.getIntField()));\r\n-//            if (rel.getIntField() == 4)\r\n-//                toRem = rel;\r\n-//        }\r\n-//        assertEquals(3, seen.size());\r\n-//        assertTrue(seen.contains(new Integer(3)));\r\n-//        assertTrue(seen.contains(new Integer(4)));\r\n-//        assertTrue(seen.contains(new Integer(5)));\r\n-//        startTx(pm);\r\n-//        assertNotNull(toRem);\r\n-//        set.remove(toRem);\r\n-//        set.add(createInstance(pm, 14));\r\n-//        set.add(createInstance(pm, 15));\r\n-//        endTx(pm);\r\n-//        endEm(pm);\r\n-//\r\n-//        pm = getPM();\r\n-//        pc = (ManagedInterface) pm.getObjectById(oid, true);\r\n-//        set = pc.getSetI();\r\n-//        assertEquals(4, set.size());\r\n-//        seen.clear();\r\n-//        for (Iterator it = set.iterator(); it.hasNext();) {\r\n-//            rel = (ManagedInterface) it.next();\r\n-//            seen.add(new Integer(rel.getIntField()));\r\n-//        }\r\n-//        assertEquals(4, seen.size());\r\n-//        assertTrue(seen.contains(new Integer(3)));\r\n-//        assertTrue(seen.contains(new Integer(5)));\r\n-//        assertTrue(seen.contains(new Integer(14)));\r\n-//        assertTrue(seen.contains(new Integer(15)));\r\n-//        startTx(pm);\r\n-//        pc.setSetPC(null);\r\n-//        endTx(pm);\r\n-//        endEm(pm);\r\n-//\r\n-//        pm = getPM();\r\n-//        pc = (ManagedInterface) pm.getObjectById(oid, true);\r\n-//        set = pc.getSetPC();\r\n-//        assertTrue (set == null || set.size() == 0);\r\n-//        endEm(pm);\r\n-//    }\r\n-//\r\n-//    public void testMixedQuery() {\r\n-//        createMixed();\r\n-//\r\n-//        OpenJPAEntityManager pm = getPM();\r\n-//        Query q = pm.newQuery(MixedInterface.class, \"intField==4\");\r\n-//        Collection c = (Collection) q.execute();\r\n-//        Set seen = new HashSet();\r\n-//        assertEquals(2, c.size());\r\n-//        MixedInterface pc;\r\n-//        for (Iterator it = c.iterator(); it.hasNext();) {\r\n-//            pc = (MixedInterface) it.next();\r\n-//            assertEquals(4, pc.getIntField());\r\n-//            seen.add(pc.getClass());\r\n-//        }\r\n-//        assertEquals(2, seen.size());\r\n-//        endEm(pm);\r\n-//    }\r\n-//\r\n-//    public void testMixedExtent() {\r\n-//        createMixed();\r\n-//\r\n-//        OpenJPAEntityManager pm = getPM();\r\n-//        Extent e = pm.getExtent(MixedInterface.class, true);\r\n-//        Set seen = new HashSet();\r\n-//        int size = 0;\r\n-//        for (Iterator it = e.iterator(); it.hasNext();) {\r\n-//            seen.add(it.next().getClass());\r\n-//            size++;\r\n-//        }\r\n-//        assertEquals(3, size);\r\n-//        assertEquals(2, seen.size());\r\n-//\r\n-//        e = pm.getExtent(MixedInterface.class, false);\r\n-//        seen = new HashSet();\r\n-//        size = 0;\r\n-//        for (Iterator it = e.iterator(); it.hasNext();) {\r\n-//            seen.add(it.next().getClass()); \r\n-//            size++;\r\n-//        }\r\n-//        assertEquals(1, size);\r\n-//        assertNotEquals(MixedInterfaceImpl.class, seen.iterator().next());\r\n-//        endEm(pm);\r\n-//    }\r\n-//\r\n-//    private void createMixed() {\r\n-//        OpenJPAEntityManager pm = getPM();\r\n-//        startTx(pm);\r\n-//        MixedInterface pc = (MixedInterface) pm.createInstance\r\n-//            (MixedInterface.class);\r\n-//        pc.setIntField(4);\r\n-//        pm.persist(pc);\r\n-//        pc = new MixedInterfaceImpl();\r\n-//        pc.setIntField(4);\r\n-//        pm.persist(pc);\r\n-//        pc = new MixedInterfaceImpl();\r\n-//        pc.setIntField(8);\r\n-//        pm.persist(pc);\r\n-//        endTx(pm);\r\n-//        endEm(pm);\r\n-//    }\r\n-//\r\n-//    public void testUnimplementedThrowsException() {\r\n-//        OpenJPAEntityManager pm = getPM();\r\n-//        ManagedInterface pc = createInstance(pm, 1);\r\n-//        try {\r\n-//            pc.unimplemented();\r\n-//            fail(\"Exception expected.\");\r\n-//        } catch (JDOUserException jdoe) {} // good\r\n-//        endEm(pm);\r\n-//    }\r\n-//\r\n-//    public void testNonMappedcreateInstanceException() {\r\n-//        OpenJPAEntityManager pm = getPM();\r\n-//        try {\r\n-//            pm.createInstance(NonMappedInterface.class);\r\n-//            fail(\"Exception expected\");\r\n-//        } catch (JDOUserException jdoe) {} // good\r\n-//        endEm(pm);\r\n-//    }\r\n-//\r\n-//    public void testNonMappedPropertyAlias() \r\n-//        throws Exception {\r\n-//        Object oid = createNonMappedImpl();\r\n-//        OpenJPAEntityManager pm = getPM();\r\n-//        Query q = pm.newQuery(NonMappedInterface.class, \"intField==4\");\r\n-//        Collection c = (Collection) q.execute();\r\n-//        assertEquals(1, c.size());\r\n-//        assertEquals(oid, pm.getObjectId(c.iterator().next()));\r\n-//        endEm(pm);\r\n-//    }\r\n-//\r\n-//    public void testNonMappedPropertyAliasInMemory() \r\n-//        throws Exception {\r\n-//        Object oid = createNonMappedImpl();\r\n-//        OpenJPAEntityManager pm = getPM();\r\n-//        Query q = pm.newQuery(NonMappedInterface.class, \"intField==4\");\r\n-//        q.setCandidates((Collection) pm.newQuery(NonMappedInterfaceImpl.class).\r\n-//            execute());\r\n-//        Collection c = (Collection) q.execute();\r\n-//        assertEquals(1, c.size());\r\n-//        assertEquals(oid, pm.getObjectId(c.iterator().next()));\r\n-//        endEm(pm);\r\n-//    }\r\n-//\r\n-//    private Object createNonMappedImpl() \r\n-//        throws Exception {\r\n-//        // load non-mapped-impl\r\n-//        Class.forName(NonMappedInterfaceImpl.class.getNametrue,\r\n-//            NonMappedInterfaceImpl.class.getClassLoader());\r\n-//\r\n-//     \r\n-//        OpenJPAEntityManager pm = getPM();\r\n-//        startTx(pm);\r\n-//        NonMappedInterface pc = new NonMappedInterfaceImpl();\r\n-//        pc.setIntField(4);\r\n-//        pm.persist(pc);\r\n-//        Object oid = pm.getObjectId(pc);\r\n-//        pc = new NonMappedInterfaceImpl();\r\n-//        pc.setIntField(8);\r\n-//        pm.persist(pc);\r\n-//        endTx(pm);\r\n-//        endEm(pm);\r\n-//        return oid;\r\n-//    }\r\n-//\r\n-//    public void testDetach() {\r\n-//        KodoOpenJPAEntityManager pm = getPM();\r\n-//        startTx(pm);\r\n-//        ManagedInterface pc = createInstance(pm, 4);\r\n-//        pm.persist(pc);\r\n-//        Object oid = pm.getObjectId(pc);\r\n-//        endTx(pm);\r\n-//        endEm(pm);\r\n-//\r\n-//        pm = getPM();\r\n-//        ManagedInterface pcx = (ManagedInterface) pm.getObjectById(oid, true);\r\n-//        pc = (ManagedInterface) pm.detachCopy(pcx);\r\n-//        endEm(pm);\r\n-//\r\n-//        assertTrue(pm.isDetached(pc));\r\n-//        pc.setIntField(7);\r\n-//\r\n-//        pm = getPM();\r\n-//        startTx(pm);\r\n-//        pm.persist(pc);\r\n-//        endTx(pm);\r\n-//        endEm(pm);\r\n-//\r\n-//        pm = getPM();\r\n-//        pc = (ManagedInterface) pm.getObjectById(oid, true);\r\n-//        assertEquals(7, pc.getIntField());\r\n-//        endEm(pm);\r\n-//\r\n-//    }\r\n-\r\n-    private ManagedInterface createInstance(OpenJPAEntityManager pm, int i) {\r\n-        ManagedInterface pc = (ManagedInterface) pm.createInstance\r\n-            (ManagedInterface.class);\r\n-        pc.setIntField(i);\r\n-        return pc;\r\n-    }\r\n-}\r"},{"sha":"75b62841032145f6c879468e3791bd4d95b68f44","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestManagedInterfacesAppId.java","status":"removed","additions":0,"deletions":399,"changes":399,"blob_url":"https://github.com/apache/openjpa/blob/7d44e7a355b9611f37ed0122f4a3e69bdfb335ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestManagedInterfacesAppId.java","raw_url":"https://github.com/apache/openjpa/raw/7d44e7a355b9611f37ed0122f4a3e69bdfb335ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestManagedInterfacesAppId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestManagedInterfacesAppId.java?ref=7d44e7a355b9611f37ed0122f4a3e69bdfb335ab","patch":"@@ -1,399 +0,0 @@\n-/*\r\n- * TestManagedInterfacesAppId.java\r\n- *\r\n- * Created on October 16, 2006, 4:49 PM\r\n- *\r\n- * To change this template, choose Tools | Template Manager\r\n- * and open the template in the editor.\r\n- */\r\n-\r\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.kernel;\r\n-\r\n-import java.util.ArrayList;\r\n-import java.util.Collection;\r\n-import java.util.HashSet;\r\n-import java.util.Iterator;\r\n-import java.util.Set;\r\n-\r\n-\r\n-\r\n-import org.apache.openjpa.persistence.kernel.common.apps.ManagedInterfaceAppId;\r\n-import org.apache.openjpa.persistence.kernel.common.apps.ManagedInterfaceEmbed;\r\n-import org.apache.openjpa.persistence.kernel.common.apps.ManagedInterfaceOwnerAppId;\r\n-import org.apache.openjpa.persistence.kernel.common.apps.ManagedInterfaceSupAppId;\r\n-import org.apache.openjpa.persistence.kernel.common.apps.RuntimeTest1;\r\n-\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-import org.apache.openjpa.persistence.OpenJPAQuery;\r\n-\r\n-public class TestManagedInterfacesAppId extends BaseKernelTest {\r\n-\r\n-    /**\r\n-     * Creates a new instance of TestManagedInterfacesAppId\r\n-     */\r\n-    public TestManagedInterfacesAppId(String name) {\r\n-        super(name);\r\n-    }\r\n-\r\n-    public void setUp() {\r\n-        deleteAll(ManagedInterfaceSupAppId.class);\r\n-        deleteAll(ManagedInterfaceOwnerAppId.class);\r\n-        deleteAll(RuntimeTest1.class);\r\n-    }\r\n-\r\n-    public void testManagedInterface() {\r\n-        OpenJPAEntityManager pm = getPM();\r\n-        startTx(pm);\r\n-        ManagedInterfaceAppId pc = (ManagedInterfaceAppId) pm.createInstance(\r\n-            (ManagedInterfaceAppId.class));\r\n-        pc.setId1(9);\r\n-        pc.setId2(19);\r\n-        pc.setIntFieldSup(3);\r\n-        pc.setIntField(4);\r\n-\r\n-        pc.setEmbed((ManagedInterfaceEmbed) pm.createInstance\r\n-            (ManagedInterfaceEmbed.class));\r\n-\r\n-        pc.getEmbed().setIntField(5);\r\n-        assertEquals(5, pc.getEmbed().getIntField());\r\n-        pm.persist(pc);\r\n-        Object oid = pm.getObjectId(pc);\r\n-        endTx(pm);\r\n-        endEm(pm);\r\n-\r\n-        pm = getPM();\r\n-        pc = (ManagedInterfaceAppId) pm.find(ManagedInterfaceAppId.class, oid);\r\n-        assertEquals(9, pc.getId1());\r\n-        assertEquals(19, pc.getId2());\r\n-        assertEquals(3, pc.getIntFieldSup());\r\n-        assertEquals(4, pc.getIntField());\r\n-        assertEquals(5, pc.getEmbed().getIntField());\r\n-        startTx(pm);\r\n-        pc.setIntField(14);\r\n-        endTx(pm);\r\n-        endEm(pm);\r\n-\r\n-        pm = getPM();\r\n-        Object newId = new ManagedInterfaceSupAppId.Id(\"9,19\");\r\n-        pc =\r\n-            (ManagedInterfaceAppId) pm.find(ManagedInterfaceAppId.class, newId);\r\n-        assertEquals(9, pc.getId1());\r\n-        assertEquals(19, pc.getId2());\r\n-        assertEquals(3, pc.getIntFieldSup());\r\n-        assertEquals(14, pc.getIntField());\r\n-        assertEquals(5, pc.getEmbed().getIntField());\r\n-        endEm(pm);\r\n-\r\n-        pm = getPM();\r\n-        startTx(pm);\r\n-        OpenJPAQuery query =\r\n-            pm.createNativeQuery(\"intField==14\", ManagedInterfaceAppId.class);\r\n-        Collection c = (Collection) query.getResultList();\r\n-        assertEquals(1, c.size());\r\n-        pc = (ManagedInterfaceAppId) c.iterator().next();\r\n-        assertEquals(14, pc.getIntField());\r\n-        pm.remove(pc);\r\n-        endTx(pm);\r\n-        endEm(pm);\r\n-\r\n-        pm = getPM();\r\n-        try {\r\n-            pm.find(ManagedInterfaceAppId.class, oid);\r\n-            fail();\r\n-        } catch (Exception onfe) {\r\n-        }\r\n-\r\n-        endEm(pm);\r\n-    }\r\n-\r\n-    public void testInterfaceOwner() {\r\n-        OpenJPAEntityManager pm = getPM();\r\n-        ManagedInterfaceOwnerAppId pc = new ManagedInterfaceOwnerAppId();\r\n-        pc.setIFace((ManagedInterfaceSupAppId) pm.createInstance\r\n-            (ManagedInterfaceSupAppId.class));\r\n-        pc.getIFace().setIntFieldSup(3);\r\n-\r\n-        startTx(pm);\r\n-        pm.persist(pc);\r\n-        Object oid = pm.getObjectId(pc);\r\n-        endTx(pm);\r\n-        pc = (ManagedInterfaceOwnerAppId) pm\r\n-            .find(ManagedInterfaceOwnerAppId.class, oid);\r\n-        assertEquals(3, pc.getIFace().getIntFieldSup());\r\n-        endEm(pm);\r\n-\r\n-        pm = getPM();\r\n-        pc = (ManagedInterfaceOwnerAppId) pm\r\n-            .find(ManagedInterfaceOwnerAppId.class, oid);\r\n-        assertEquals(3, pc.getIFace().getIntFieldSup());\r\n-        endEm(pm);\r\n-\r\n-        pm = getPM();\r\n-        startTx(pm);\r\n-        OpenJPAQuery q = pm.createNativeQuery(\"iface.intFieldSup==3\",\r\n-            ManagedInterfaceOwnerAppId.class);\r\n-        Collection c = (Collection) q.getResultList();\r\n-        pc = (ManagedInterfaceOwnerAppId) c.iterator().next();\r\n-        assertEquals(3, pc.getIFace().getIntFieldSup());\r\n-\r\n-        pc.getIFace().setIntFieldSup(13);\r\n-        assertEquals(13, pc.getIFace().getIntFieldSup());\r\n-        endTx(pm);\r\n-        endEm(pm);\r\n-\r\n-        pm = getPM();\r\n-        pc = (ManagedInterfaceOwnerAppId) pm\r\n-            .find(ManagedInterfaceOwnerAppId.class, oid);\r\n-        assertEquals(13, pc.getIFace().getIntFieldSup());\r\n-        endEm(pm);\r\n-    }\r\n-\r\n-    public void testCollection() {\r\n-        OpenJPAEntityManager pm = getPM();\r\n-        startTx(pm);\r\n-        ManagedInterfaceAppId pc = (ManagedInterfaceAppId) pm.createInstance\r\n-            (ManagedInterfaceAppId.class);\r\n-        Set set = new HashSet();\r\n-        set.add(new Integer(3));\r\n-        set.add(new Integer(4));\r\n-        set.add(new Integer(5));\r\n-        pc.setSetInteger(set);\r\n-        pm.persist(pc);\r\n-        Object oid = pm.getObjectId(pc);\r\n-        endTx(pm);\r\n-        endEm(pm);\r\n-\r\n-        pm = getPM();\r\n-        pc = (ManagedInterfaceAppId) pm.find(ManagedInterfaceAppId.class, oid);\r\n-        set = pc.getSetInteger();\r\n-        assertEquals(3, set.size());\r\n-        assertTrue(set.contains(new Integer(3)));\r\n-        assertTrue(set.contains(new Integer(4)));\r\n-        assertTrue(set.contains(new Integer(5)));\r\n-        startTx(pm);\r\n-        set.remove(new Integer(4));\r\n-        set.add(new Integer(14));\r\n-        set.add(new Integer(15));\r\n-        endTx(pm);\r\n-        endEm(pm);\r\n-\r\n-        pm = getPM();\r\n-        pc = (ManagedInterfaceAppId) pm.find(ManagedInterfaceAppId.class, oid);\r\n-        set = pc.getSetInteger();\r\n-        assertEquals(4, set.size());\r\n-        assertTrue(set.contains(new Integer(3)));\r\n-        assertTrue(set.contains(new Integer(5)));\r\n-        assertTrue(set.contains(new Integer(14)));\r\n-        assertTrue(set.contains(new Integer(15)));\r\n-        startTx(pm);\r\n-        pc.setSetInteger(null);\r\n-        endTx(pm);\r\n-        endEm(pm);\r\n-\r\n-        pm = getPM();\r\n-        pc = (ManagedInterfaceAppId) pm.find(ManagedInterfaceAppId.class, oid);\r\n-        set = pc.getSetInteger();\r\n-        assertTrue(set == null || set.size() == 0);\r\n-        endEm(pm);\r\n-    }\r\n-\r\n-    public void testCollectionPC() {\r\n-        OpenJPAEntityManager pm = getPM();\r\n-        startTx(pm);\r\n-        ManagedInterfaceAppId pc = (ManagedInterfaceAppId) pm.createInstance\r\n-            (ManagedInterfaceAppId.class);\r\n-        Set set = new HashSet();\r\n-        set.add(new RuntimeTest1(\"a\", 3));\r\n-        set.add(new RuntimeTest1(\"b\", 4));\r\n-        set.add(new RuntimeTest1(\"c\", 5));\r\n-        pc.setSetPC(set);\r\n-        pm.persist(pc);\r\n-        Object oid = pm.getObjectId(pc);\r\n-        endTx(pm);\r\n-        endEm(pm);\r\n-\r\n-        pm = getPM();\r\n-        pc = (ManagedInterfaceAppId) pm.find(ManagedInterfaceAppId.class, oid);\r\n-        set = pc.getSetPC();\r\n-        assertEquals(3, set.size());\r\n-        Collection seen = new ArrayList();\r\n-        RuntimeTest1 rel;\r\n-        RuntimeTest1 toRem = null;\r\n-        for (Iterator it = set.iterator(); it.hasNext();) {\r\n-            rel = (RuntimeTest1) it.next();\r\n-            seen.add(rel.getStringField());\r\n-            if (rel.getIntField() == 4)\r\n-                toRem = rel;\r\n-        }\r\n-        assertEquals(3, seen.size());\r\n-        assertTrue(seen.contains(\"a\"));\r\n-        assertTrue(seen.contains(\"b\"));\r\n-        assertTrue(seen.contains(\"c\"));\r\n-        startTx(pm);\r\n-        assertNotNull(toRem);\r\n-        set.remove(toRem);\r\n-        set.add(new RuntimeTest1(\"x\", 14));\r\n-        set.add(new RuntimeTest1(\"y\", 15));\r\n-        endTx(pm);\r\n-        endEm(pm);\r\n-\r\n-        pm = getPM();\r\n-        pc = (ManagedInterfaceAppId) pm.find(ManagedInterfaceAppId.class, oid);\r\n-        set = pc.getSetPC();\r\n-        assertEquals(4, set.size());\r\n-        seen.clear();\r\n-        for (Iterator it = set.iterator(); it.hasNext();) {\r\n-            rel = (RuntimeTest1) it.next();\r\n-            seen.add(rel.getStringField());\r\n-        }\r\n-        assertEquals(4, seen.size());\r\n-        assertTrue(seen.contains(\"a\"));\r\n-        assertTrue(seen.contains(\"c\"));\r\n-        assertTrue(seen.contains(\"x\"));\r\n-        assertTrue(seen.contains(\"y\"));\r\n-        startTx(pm);\r\n-        pc.setSetPC(null);\r\n-        endTx(pm);\r\n-        endEm(pm);\r\n-\r\n-        pm = getPM();\r\n-        pc = (ManagedInterfaceAppId) pm.find(ManagedInterfaceAppId.class, oid);\r\n-        set = pc.getSetPC();\r\n-        assertTrue(set == null || set.size() == 0);\r\n-        endEm(pm);\r\n-    }\r\n-\r\n-    public void testCollectionInterfaces() {\r\n-        OpenJPAEntityManager pm = getPM();\r\n-        startTx(pm);\r\n-        ManagedInterfaceAppId pc = (ManagedInterfaceAppId) pm.createInstance\r\n-            (ManagedInterfaceAppId.class);\r\n-        Set set = new HashSet();\r\n-        set.add(createInstance(pm, 3));\r\n-        set.add(createInstance(pm, 4));\r\n-        set.add(createInstance(pm, 5));\r\n-        pc.setSetI(set);\r\n-        pm.persist(pc);\r\n-        Object oid = pm.getObjectId(pc);\r\n-        endTx(pm);\r\n-        endEm(pm);\r\n-\r\n-        pm = getPM();\r\n-        pc = (ManagedInterfaceAppId) pm.find(ManagedInterfaceAppId.class, oid);\r\n-        set = pc.getSetI();\r\n-        assertEquals(3, set.size());\r\n-        Collection seen = new ArrayList();\r\n-        ManagedInterfaceAppId rel = null;\r\n-        ManagedInterfaceAppId toRem = null;\r\n-        for (Iterator it = set.iterator(); it.hasNext();) {\r\n-            rel = (ManagedInterfaceAppId) it.next();\r\n-            seen.add(new Integer(rel.getIntField()));\r\n-            if (rel.getIntField() == 4)\r\n-                toRem = rel;\r\n-        }\r\n-        assertEquals(3, seen.size());\r\n-        assertTrue(seen.contains(new Integer(3)));\r\n-        assertTrue(seen.contains(new Integer(4)));\r\n-        assertTrue(seen.contains(new Integer(5)));\r\n-        startTx(pm);\r\n-        assertNotNull(toRem);\r\n-        set.remove(toRem);\r\n-        set.add(createInstance(pm, 14));\r\n-        set.add(createInstance(pm, 15));\r\n-        endTx(pm);\r\n-        endEm(pm);\r\n-\r\n-        pm = getPM();\r\n-        pc = (ManagedInterfaceAppId) pm.find(ManagedInterfaceAppId.class, oid);\r\n-        set = pc.getSetI();\r\n-        assertEquals(4, set.size());\r\n-        seen.clear();\r\n-        for (Iterator it = set.iterator(); it.hasNext();) {\r\n-            rel = (ManagedInterfaceAppId) it.next();\r\n-            seen.add(new Integer(rel.getIntField()));\r\n-        }\r\n-        assertEquals(4, seen.size());\r\n-        assertTrue(seen.contains(new Integer(3)));\r\n-        assertTrue(seen.contains(new Integer(5)));\r\n-        assertTrue(seen.contains(new Integer(14)));\r\n-        assertTrue(seen.contains(new Integer(15)));\r\n-        startTx(pm);\r\n-        pc.setSetPC(null);\r\n-        endTx(pm);\r\n-        endEm(pm);\r\n-\r\n-        pm = getPM();\r\n-        pc = (ManagedInterfaceAppId) pm.find(ManagedInterfaceAppId.class, oid);\r\n-        set = pc.getSetPC();\r\n-        assertTrue(set == null || set.size() == 0);\r\n-        endEm(pm);\r\n-    }\r\n-\r\n-    public void testUnimplementedThrowsException() {\r\n-        OpenJPAEntityManager pm = getPM();\r\n-        ManagedInterfaceAppId pc = createInstance(pm, 1);\r\n-        try {\r\n-            pc.unimplemented();\r\n-            fail(\"Exception expected.\");\r\n-        } catch (Exception jdoe) {\r\n-        } // good\r\n-        endEm(pm);\r\n-    }\r\n-\r\n-    public void testDetach() {\r\n-        OpenJPAEntityManager pm = getPM();\r\n-        startTx(pm);\r\n-        ManagedInterfaceAppId pc = createInstance(pm, 4);\r\n-        pm.persist(pc);\r\n-        Object oid = pm.getObjectId(pc);\r\n-        endTx(pm);\r\n-        endEm(pm);\r\n-\r\n-        pm = getPM();\r\n-        pc = (ManagedInterfaceAppId) pm.find(ManagedInterfaceAppId.class, oid);\r\n-        pc = (ManagedInterfaceAppId) pm.detach(pc);\r\n-        endEm(pm);\r\n-\r\n-        assertTrue(pm.isDetached(pc));\r\n-        pc.setIntField(7);\r\n-\r\n-        pm = getPM();\r\n-        startTx(pm);\r\n-        pm.persist(pc);\r\n-        endTx(pm);\r\n-        endEm(pm);\r\n-\r\n-        pm = getPM();\r\n-        pc = (ManagedInterfaceAppId) pm.find(ManagedInterfaceAppId.class, oid);\r\n-        assertEquals(7, pc.getIntField());\r\n-        endEm(pm);\r\n-    }\r\n-\r\n-    private ManagedInterfaceAppId createInstance(OpenJPAEntityManager pm,\r\n-        int i) {\r\n-        ManagedInterfaceAppId pc = (ManagedInterfaceAppId) pm\r\n-            .createInstance(ManagedInterfaceAppId.class);\r\n-        pc.setId1(i * 10);\r\n-        pc.setId2(i * -10);\r\n-        pc.setIntField(i);\r\n-        return pc;\r\n-    }\r\n-}\r"},{"sha":"42838ef67fff61935d391720086cd410518e5ed9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPersistenceManagerFactoryImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/de8a4760c8b7df2186cd831733b8fdc095dbc736/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPersistenceManagerFactoryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/de8a4760c8b7df2186cd831733b8fdc095dbc736/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPersistenceManagerFactoryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPersistenceManagerFactoryImpl.java?ref=de8a4760c8b7df2186cd831733b8fdc095dbc736","patch":"@@ -192,7 +192,7 @@ public void testPlatform() {\n \r\n     protected OpenJPAEntityManagerFactory getEmf(Map props) {\r\n         props.put(\"openjpa.BrokerFactory\", BrokerFactoryTest.class.getName());\r\n-        return (OpenJPAEntityManagerFactory) getEmf(props);\r\n+        return (OpenJPAEntityManagerFactory) super.getEmf(props);\r\n     }\r\n \r\n     public static class BrokerFactoryTest extends AbstractBrokerFactory {\r"},{"sha":"85fca5ade4a8c5c6bdb4e105ec5c3de0ec45fe10","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestRetainValuesInOptimistic.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/de8a4760c8b7df2186cd831733b8fdc095dbc736/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestRetainValuesInOptimistic.java","raw_url":"https://github.com/apache/openjpa/raw/de8a4760c8b7df2186cd831733b8fdc095dbc736/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestRetainValuesInOptimistic.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestRetainValuesInOptimistic.java?ref=de8a4760c8b7df2186cd831733b8fdc095dbc736","patch":"@@ -67,6 +67,12 @@ public void setUp()\n         endEm(pm);\r\n     }\r\n \r\n+    @Override\r\n+    protected void addProperties(Map map) {\r\n+        super.addProperties(map);\r\n+        map.put(\"openjpa.Log\", \"SQL=TRACE, Runtime=TRACE\");\r\n+    }\r\n+\r\n     public void testRetain() {\r\n         clearTest(true);\r\n         optLockTest(true);\r"},{"sha":"5ba87df4c68a5b152197114b9416f60a8ae51eac","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSpecialNumbers.java","status":"modified","additions":23,"deletions":23,"changes":46,"blob_url":"https://github.com/apache/openjpa/blob/de8a4760c8b7df2186cd831733b8fdc095dbc736/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSpecialNumbers.java","raw_url":"https://github.com/apache/openjpa/raw/de8a4760c8b7df2186cd831733b8fdc095dbc736/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSpecialNumbers.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSpecialNumbers.java?ref=de8a4760c8b7df2186cd831733b8fdc095dbc736","patch":"@@ -62,14 +62,14 @@ public void setUp() {\n     public void testShortMax() {\r\n         AllFieldTypesTest aftt = new AllFieldTypesTest();\r\n         aftt.setTestshort(Short.MAX_VALUE);\r\n-        saveAndQuery(aftt, \"testshort == param\", new Short(Short.MAX_VALUE));\r\n+        saveAndQuery(aftt, \"testshort = :param\", new Short(Short.MAX_VALUE));\r\n     }\r\n \r\n     public void testShortMin() {\r\n         AllFieldTypesTest aftt = new AllFieldTypesTest();\r\n         aftt.setTestshort(Short.MIN_VALUE);\r\n         try {\r\n-            saveAndQuery(aftt, \"testshort == param\",\r\n+            saveAndQuery(aftt, \"testshort = :param\",\r\n                 new Short(Short.MIN_VALUE));\r\n         } catch (Throwable t) {\r\n             bug(AbstractTestCase.Platform.EMPRESS, 889, t,\r\n@@ -80,14 +80,14 @@ public void testShortMin() {\n     public void testLongMax() {\r\n         AllFieldTypesTest aftt = new AllFieldTypesTest();\r\n         aftt.setTestlong(Long.MAX_VALUE);\r\n-        saveAndQuery(aftt, \"testlong == param\", new Long(Long.MAX_VALUE));\r\n+        saveAndQuery(aftt, \"testlong = :param\", new Long(Long.MAX_VALUE));\r\n     }\r\n \r\n     public void testLongMin() {\r\n         try {\r\n             AllFieldTypesTest aftt = new AllFieldTypesTest();\r\n             aftt.setTestlong(Long.MIN_VALUE);\r\n-            saveAndQuery(aftt, \"testlong == param\", new Long(Long.MIN_VALUE));\r\n+            saveAndQuery(aftt, \"testlong = :param\", new Long(Long.MIN_VALUE));\r\n         } catch (Throwable t) {\r\n             bug(AbstractTestCase.Platform.HYPERSONIC, 474, t,\r\n                 \"Some databases cannot store Long.MIN_VALUE\");\r\n@@ -97,15 +97,15 @@ public void testLongMin() {\n     public void testIntegerMax() {\r\n         AllFieldTypesTest aftt = new AllFieldTypesTest();\r\n         aftt.setTestint(Integer.MAX_VALUE);\r\n-        saveAndQuery(aftt, \"testint == param\",\r\n+        saveAndQuery(aftt, \"testint = :param\",\r\n             new Integer(Integer.MAX_VALUE));\r\n     }\r\n \r\n     public void testIntegerMin() {\r\n         AllFieldTypesTest aftt = new AllFieldTypesTest();\r\n         aftt.setTestint(Integer.MIN_VALUE);\r\n         try {\r\n-            saveAndQuery(aftt, \"testint == param\",\r\n+            saveAndQuery(aftt, \"testint = :param\",\r\n                 new Integer(Integer.MIN_VALUE));\r\n         } catch (Throwable t) {\r\n             bug(AbstractTestCase.Platform.EMPRESS, 889, t,\r\n@@ -117,7 +117,7 @@ public void testFloatMax() {\n         try {\r\n             AllFieldTypesTest aftt = new AllFieldTypesTest();\r\n             aftt.setTestfloat(Float.MAX_VALUE);\r\n-            saveAndQuery(aftt, \"testfloat == param\",\r\n+            saveAndQuery(aftt, \"testfloat = :param\",\r\n                 new Float(Float.MAX_VALUE));\r\n         } catch (Exception e) {\r\n             bug(EnumSet.of(AbstractTestCase.Platform.POSTGRESQL,\r\n@@ -132,7 +132,7 @@ public void testFloatMin() {\n         try {\r\n             AllFieldTypesTest aftt = new AllFieldTypesTest();\r\n             aftt.setTestfloat(Float.MIN_VALUE);\r\n-            saveAndQuery(aftt, \"testfloat == param\",\r\n+            saveAndQuery(aftt, \"testfloat = :param\",\r\n                 new Float(Float.MIN_VALUE));\r\n         } catch (Exception e) {\r\n             bug(EnumSet.of(AbstractTestCase.Platform.POSTGRESQL,\r\n@@ -152,7 +152,7 @@ public void testFloatNaN() {\n         try {\r\n             AllFieldTypesTest aftt = new AllFieldTypesTest();\r\n             aftt.setTestfloat(Float.NaN);\r\n-            saveAndQuery(aftt, \"testfloat == param\", new Float(Float.NaN));\r\n+            saveAndQuery(aftt, \"testfloat = :param\", new Float(Float.NaN));\r\n         } catch (Throwable t) {\r\n             bug(461, t, \"NaN problems\");\r\n         }\r\n@@ -162,7 +162,7 @@ public void testFloatNegativeInfinity() {\n         try {\r\n             AllFieldTypesTest aftt = new AllFieldTypesTest();\r\n             aftt.setTestfloat(Float.NEGATIVE_INFINITY);\r\n-            saveAndQuery(aftt, \"testfloat == param\",\r\n+            saveAndQuery(aftt, \"testfloat = :param\",\r\n                 new Float(Float.NEGATIVE_INFINITY));\r\n         } catch (Exception e) {\r\n             bug(EnumSet.of(AbstractTestCase.Platform.POINTBASE,\r\n@@ -181,7 +181,7 @@ public void testFloatPostivieInfinity() {\n         try {\r\n             AllFieldTypesTest aftt = new AllFieldTypesTest();\r\n             aftt.setTestfloat(Float.POSITIVE_INFINITY);\r\n-            saveAndQuery(aftt, \"testfloat == param\",\r\n+            saveAndQuery(aftt, \"testfloat = :param\",\r\n                 new Float(Float.POSITIVE_INFINITY));\r\n         } catch (Exception e) {\r\n             bug(EnumSet.of(AbstractTestCase.Platform.POINTBASE,\r\n@@ -200,7 +200,7 @@ public void testDoubleMax() {\n         try {\r\n             AllFieldTypesTest aftt = new AllFieldTypesTest();\r\n             aftt.setTestdouble(Double.MAX_VALUE);\r\n-            saveAndQuery(aftt, \"testdouble == param\",\r\n+            saveAndQuery(aftt, \"testdouble = :param\",\r\n                 new Double(Double.MAX_VALUE));\r\n         } catch (Exception e) {\r\n             bug(EnumSet.of(AbstractTestCase.Platform.POINTBASE,\r\n@@ -219,7 +219,7 @@ public void testDoubleMin() {\n         try {\r\n             AllFieldTypesTest aftt = new AllFieldTypesTest();\r\n             aftt.setTestdouble(Double.MIN_VALUE);\r\n-            saveAndQuery(aftt, \"testdouble == param\",\r\n+            saveAndQuery(aftt, \"testdouble = :param\",\r\n                 new Double(Double.MIN_VALUE));\r\n         } catch (Exception e) {\r\n             bug(EnumSet.of(AbstractTestCase.Platform.POSTGRESQL,\r\n@@ -240,7 +240,7 @@ public void testDoubleNaN() {\n         try {\r\n             AllFieldTypesTest aftt = new AllFieldTypesTest();\r\n             aftt.setTestdouble(Double.NaN);\r\n-            saveAndQuery(aftt, \"testdouble == param\", new Double(Double.NaN));\r\n+            saveAndQuery(aftt, \"testdouble = :param\", new Double(Double.NaN));\r\n         } catch (Throwable t) {\r\n             bug(461, t, \"NaN problems\");\r\n         }\r\n@@ -250,7 +250,7 @@ public void testDoubleNegativeInfinity() {\n         try {\r\n             AllFieldTypesTest aftt = new AllFieldTypesTest();\r\n             aftt.setTestdouble(Double.NEGATIVE_INFINITY);\r\n-            saveAndQuery(aftt, \"testdouble == param\",\r\n+            saveAndQuery(aftt, \"testdouble = :param\",\r\n                 new Double(Double.NEGATIVE_INFINITY));\r\n         } catch (Throwable t) {\r\n             bug(461, t, \"infinity problems\");\r\n@@ -261,7 +261,7 @@ public void testDoublePostivieInfinity() {\n         try {\r\n             AllFieldTypesTest aftt = new AllFieldTypesTest();\r\n             aftt.setTestdouble(Double.POSITIVE_INFINITY);\r\n-            saveAndQuery(aftt, \"testdouble == param\",\r\n+            saveAndQuery(aftt, \"testdouble = :param\",\r\n                 new Double(Double.POSITIVE_INFINITY));\r\n         } catch (Throwable t) {\r\n             bug(461, t, \"infinity problems\");\r\n@@ -272,7 +272,7 @@ public void testByteMin() {\n         AllFieldTypesTest aftt = new AllFieldTypesTest();\r\n         aftt.setTestbyte(Byte.MIN_VALUE);\r\n         try {\r\n-            saveAndQuery(aftt, \"testbyte == param\", new Byte(Byte.MIN_VALUE));\r\n+            saveAndQuery(aftt, \"testbyte = :param\", new Byte(Byte.MIN_VALUE));\r\n         } catch (Throwable t) {\r\n             bug(AbstractTestCase.Platform.EMPRESS, 889, t,\r\n                 \"Empress cannot store min values\");\r\n@@ -282,19 +282,19 @@ public void testByteMin() {\n     public void testByteMax() {\r\n         AllFieldTypesTest aftt = new AllFieldTypesTest();\r\n         aftt.setTestbyte(Byte.MAX_VALUE);\r\n-        saveAndQuery(aftt, \"testbyte == param\", new Byte(Byte.MAX_VALUE));\r\n+        saveAndQuery(aftt, \"testbyte = :param\", new Byte(Byte.MAX_VALUE));\r\n     }\r\n \r\n     public void testZeroBigInteger() {\r\n         AllFieldTypesTest aftt = new AllFieldTypesTest();\r\n         aftt.setTestBigInteger(BigInteger.ZERO);\r\n-        saveAndQuery(aftt, \"testBigInteger == param\", BigInteger.ZERO);\r\n+        saveAndQuery(aftt, \"testBigInteger = :param\", BigInteger.ZERO);\r\n     }\r\n \r\n     public void testOneBigInteger() {\r\n         AllFieldTypesTest aftt = new AllFieldTypesTest();\r\n         aftt.setTestBigInteger(BigInteger.ONE);\r\n-        saveAndQuery(aftt, \"testBigInteger == param\", BigInteger.ONE);\r\n+        saveAndQuery(aftt, \"testBigInteger = :param\", BigInteger.ONE);\r\n     }\r\n \r\n     private void saveAndQuery(Object obj, String query, Object param) {\r\n@@ -305,9 +305,9 @@ private void saveAndQuery(Object obj, String query, Object param) {\n         endEm(pm);\r\n \r\n         pm = getPM();\r\n-        OpenJPAQuery q = pm.createNativeQuery(query, obj.getClass());\r\n-        //FIXME jthomas\r\n-        //q.declareParameters(\"Object param\");\r\n+        OpenJPAQuery q = pm.createQuery(\"select o from \"\r\n+            + obj.getClass().getName() + \" o where \" + query);\r\n+        q.setParameter(\"param\", param);\r\n         Collection c = (Collection) q.getResultList();\r\n         assertSize(1, c);\r\n         endEm(pm);\r"},{"sha":"2759b883f238dead554a7ce0c34e9cabf41eb752","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestStaticInnerClasses.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/de8a4760c8b7df2186cd831733b8fdc095dbc736/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestStaticInnerClasses.java","raw_url":"https://github.com/apache/openjpa/raw/de8a4760c8b7df2186cd831733b8fdc095dbc736/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestStaticInnerClasses.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestStaticInnerClasses.java?ref=de8a4760c8b7df2186cd831733b8fdc095dbc736","patch":"@@ -30,7 +30,7 @@\n import java.util.LinkedList;\r\n import java.util.List;\r\n import javax.persistence.Entity;\r\n-\r\n+import javax.persistence.Table;\r\n \r\n import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n \r\n@@ -116,6 +116,7 @@ public void testGetByQuery() {\n     }\r\n \r\n     @Entity\r\n+    @Table(name=\"StaticInner\")\r\n     public static class Inner {\r\n \r\n         private int num = 0;\r"},{"sha":"9e1636f390ef3e37091f4e48cdf30f0b5a66c899","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/Inner.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/de8a4760c8b7df2186cd831733b8fdc095dbc736/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/Inner.java","raw_url":"https://github.com/apache/openjpa/raw/de8a4760c8b7df2186cd831733b8fdc095dbc736/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/Inner.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/Inner.java?ref=de8a4760c8b7df2186cd831733b8fdc095dbc736","patch":"@@ -24,15 +24,19 @@\n import javax.persistence.GenerationType;\r\n import javax.persistence.Id;\r\n import javax.persistence.Table;\r\n+import javax.persistence.Column;\r\n \r\n @Entity\r\n @Table(name = \"nullvalue\")\r\n public class Inner {\r\n \r\n     @Basic\r\n     private Integer none = null;\r\n+\r\n     @Basic(optional = false)\r\n+    @Column(name=\"exception_col\")\r\n     private Integer exception = null;\r\n+\r\n     @Id\r\n     @GeneratedValue(strategy = GenerationType.AUTO)\r\n     private int Id;\r"},{"sha":"a61f7ddf084500113aba59a2bbe990b0892833fa","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCDirectory.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/de8a4760c8b7df2186cd831733b8fdc095dbc736/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCDirectory.java","raw_url":"https://github.com/apache/openjpa/raw/de8a4760c8b7df2186cd831733b8fdc095dbc736/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCDirectory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCDirectory.java?ref=de8a4760c8b7df2186cd831733b8fdc095dbc736","patch":"@@ -29,6 +29,7 @@\n import javax.persistence.Id;\r\n import javax.persistence.ManyToMany;\r\n import javax.persistence.ManyToOne;\r\n+import javax.persistence.Column;\r\n \r\n import org.apache.openjpa.persistence.FetchAttribute;\r\n import org.apache.openjpa.persistence.FetchGroup;\r\n@@ -63,6 +64,7 @@\n     @GeneratedValue(strategy = GenerationType.AUTO)\r\n     private int id;\r\n \r\n+    @Column(name=\"name_col\")\r\n     private String _name;\r\n \r\n     @ManyToOne(fetch = FetchType.LAZY, cascade = CascadeType.PERSIST)\r"},{"sha":"b1258edaf1cf39d2d99c8d0c9d029890dd1fd401","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCFile.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/de8a4760c8b7df2186cd831733b8fdc095dbc736/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCFile.java","raw_url":"https://github.com/apache/openjpa/raw/de8a4760c8b7df2186cd831733b8fdc095dbc736/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCFile.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCFile.java?ref=de8a4760c8b7df2186cd831733b8fdc095dbc736","patch":"@@ -26,10 +26,12 @@\n import javax.persistence.Entity;\r\n import javax.persistence.FetchType;\r\n import javax.persistence.ManyToOne;\r\n+import javax.persistence.Column;\r\n \r\n @Entity\r\n public class PCFile {\r\n \r\n+    @Column(name=\"name_col\")\r\n     private String _name;\r\n \r\n     @ManyToOne(fetch = FetchType.LAZY, cascade = CascadeType.PERSIST)\r"}]}

