{"sha":"dec24c77671423d50aa0c253b7fd587b51045e6c","node_id":"MDY6Q29tbWl0MjA2MzY0OmRlYzI0Yzc3NjcxNDIzZDUwYWEwYzI1M2I3ZmQ1ODdiNTEwNDVlNmM=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-01-29T21:02:22Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-01-29T21:02:22Z"},"message":"OPENJPA-536 committing patch provided by Joe Grassel\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@739012 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"659aa57361defb77a7f00cfada2603aa085c5098","url":"https://api.github.com/repos/apache/openjpa/git/trees/659aa57361defb77a7f00cfada2603aa085c5098"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/dec24c77671423d50aa0c253b7fd587b51045e6c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/dec24c77671423d50aa0c253b7fd587b51045e6c","html_url":"https://github.com/apache/openjpa/commit/dec24c77671423d50aa0c253b7fd587b51045e6c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/dec24c77671423d50aa0c253b7fd587b51045e6c/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"25ce88418ebc2676949bbc9d1c941a8531841e6b","url":"https://api.github.com/repos/apache/openjpa/commits/25ce88418ebc2676949bbc9d1c941a8531841e6b","html_url":"https://github.com/apache/openjpa/commit/25ce88418ebc2676949bbc9d1c941a8531841e6b"}],"stats":{"total":400,"additions":384,"deletions":16},"files":[{"sha":"0b9231b879e86c3403d5025eeeb5cdd63da35f99","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/InheritanceComparator.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/dec24c77671423d50aa0c253b7fd587b51045e6c/openjpa-kernel/src/main/java/org/apache/openjpa/meta/InheritanceComparator.java","raw_url":"https://github.com/apache/openjpa/raw/dec24c77671423d50aa0c253b7fd587b51045e6c/openjpa-kernel/src/main/java/org/apache/openjpa/meta/InheritanceComparator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/InheritanceComparator.java?ref=dec24c77671423d50aa0c253b7fd587b51045e6c","patch":"@@ -30,7 +30,7 @@\n public class InheritanceComparator\n     implements Comparator, Serializable {\n \n-    private Class _base = null;\n+    private Class _base = Object.class;\n \n     /**\n      * Set the least-derived type possible; defaults to <code>null</code>.\n@@ -39,6 +39,10 @@ public void setBase(Class base) {\n         _base = base;\n     }\n \n+    public Class getBase() {\n+        return _base;\n+    }\n+\n     /**\n      * Subclasses can override this method to extract the class to compare\n      * on from the elements of the collection."},{"sha":"c67c9cd0b3e4225681ee153472d19cdc90b15ac1","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/InheritanceOrderedMetaDataList.java","status":"added","additions":74,"deletions":0,"changes":74,"blob_url":"https://github.com/apache/openjpa/blob/dec24c77671423d50aa0c253b7fd587b51045e6c/openjpa-kernel/src/main/java/org/apache/openjpa/meta/InheritanceOrderedMetaDataList.java","raw_url":"https://github.com/apache/openjpa/raw/dec24c77671423d50aa0c253b7fd587b51045e6c/openjpa-kernel/src/main/java/org/apache/openjpa/meta/InheritanceOrderedMetaDataList.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/InheritanceOrderedMetaDataList.java?ref=dec24c77671423d50aa0c253b7fd587b51045e6c","patch":"@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.meta;\n+\n+import java.util.Iterator;\n+import java.util.LinkedList;\n+import java.util.ListIterator;\n+import java.io.Serializable;\n+\n+public class InheritanceOrderedMetaDataList\n+    implements Serializable {\n+\n+    private MetaDataInheritanceComparator _comp\n+        = new MetaDataInheritanceComparator();\n+    private LinkedList buffer = new LinkedList();\n+\n+    public boolean add(ClassMetaData meta) {\n+        if (meta == null || buffer.contains(meta))\n+            return false;\n+        for (ListIterator itr = buffer.listIterator();\n+            itr.hasNext();) {\n+            int ord = _comp.compare(meta, (ClassMetaData) itr.next());\n+            if (ord > 0)\n+                continue;\n+            if (ord == 0)\n+                return false;\n+            itr.previous();\n+            itr.add(meta);\n+            return true;\n+        }\n+        buffer.add(meta);\n+        return true;\n+    }\n+\n+    public boolean remove(ClassMetaData meta) {\n+        return buffer.remove(meta);\n+    }\n+\n+    public ClassMetaData peek() {\n+        return (ClassMetaData) buffer.getFirst();\n+    }\n+    \n+    public int size() {\n+        return buffer.size();\n+    }\n+    \n+    public Iterator iterator() {\n+        return buffer.iterator();\n+    }\n+    \n+    public boolean isEmpty() {\n+        return buffer.isEmpty();\n+    }\n+    \n+    public void clear() {\n+        buffer.clear();\n+    }\n+}"},{"sha":"a5a9a355c81661e6fb13b63d2ce6a62b3c4d48be","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/dec24c77671423d50aa0c253b7fd587b51045e6c/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","raw_url":"https://github.com/apache/openjpa/raw/dec24c77671423d50aa0c253b7fd587b51045e6c/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java?ref=dec24c77671423d50aa0c253b7fd587b51045e6c","patch":"@@ -30,7 +30,6 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n-import java.util.SortedSet;\n import java.util.TreeSet;\n \n import org.apache.commons.lang.StringUtils;\n@@ -135,10 +134,10 @@\n     private final Collection _registered = new ArrayList();\n \n     // set of metadatas we're in the process of resolving\n-    private final SortedSet _resolving = new TreeSet\n-        (new MetaDataInheritanceComparator());\n-    private final SortedSet _mapping = new TreeSet\n-        (new MetaDataInheritanceComparator());\n+    private final InheritanceOrderedMetaDataList _resolving =\n+        new InheritanceOrderedMetaDataList();\n+    private final InheritanceOrderedMetaDataList _mapping =\n+        new InheritanceOrderedMetaDataList();\n     private final List _errs = new LinkedList();\n \n     // system listeners\n@@ -655,7 +654,8 @@ private boolean resolveMapping(ClassMetaData meta) {\n     /**\n      * Process the given metadata and the associated buffer.\n      */\n-    private List processBuffer(ClassMetaData meta, SortedSet buffer, int mode) {\n+    private List processBuffer(ClassMetaData meta,\n+        InheritanceOrderedMetaDataList buffer, int mode) {\n         // if we're already processing a metadata, just buffer this one; when\n         // the initial metadata finishes processing, we traverse the buffer\n         // and process all the others that were introduced during reentrant\n@@ -670,7 +670,7 @@ private List processBuffer(ClassMetaData meta, SortedSet buffer, int mode) {\n         ClassMetaData buffered;\n         List processed = new ArrayList(5);\n         while (!buffer.isEmpty()) {\n-            buffered = (ClassMetaData) buffer.first();\n+            buffered = buffer.peek();\n             try {\n                 buffered.resolve(mode);\n                 processed.add(buffered);"},{"sha":"ff573eff5db794e1a128e4f7209978da5c23005b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/Artist.java","status":"added","additions":42,"deletions":0,"changes":42,"blob_url":"https://github.com/apache/openjpa/blob/dec24c77671423d50aa0c253b7fd587b51045e6c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/Artist.java","raw_url":"https://github.com/apache/openjpa/raw/dec24c77671423d50aa0c253b7fd587b51045e6c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/Artist.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/Artist.java?ref=dec24c77671423d50aa0c253b7fd587b51045e6c","patch":"@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.meta;\n+\n+import javax.persistence.Entity;\n+\n+@Entity\n+public class Artist\n+    extends Person {\n+\n+    /**\n+     * Default constructor required for enhancement.\n+     */\n+    public Artist() {\n+        super();\n+    }\n+\n+    /**\n+     * The public constructor constructs with a name.\n+     *\n+     * @param name the name of the artist.\n+     */\n+    public Artist(String name) {\n+        super(name);\n+    }\n+}"},{"sha":"e1c413cf1ca7a42ed395e7f747ca2f6b13e87cca","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/Item.java","status":"added","additions":110,"deletions":0,"changes":110,"blob_url":"https://github.com/apache/openjpa/blob/dec24c77671423d50aa0c253b7fd587b51045e6c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/Item.java","raw_url":"https://github.com/apache/openjpa/raw/dec24c77671423d50aa0c253b7fd587b51045e6c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/Item.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/Item.java?ref=dec24c77671423d50aa0c253b7fd587b51045e6c","patch":"@@ -0,0 +1,110 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.meta;\n+\n+import java.io.Serializable;\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.ManyToOne;\n+\n+@Entity\n+public class Item implements Serializable {\n+\n+    @Id\n+    @GeneratedValue\n+    private int id;\n+\n+    private String title;\n+\n+    @ManyToOne(cascade = CascadeType.PERSIST)\n+    private Artist artist;\n+\n+    /**\n+     * A no-arg constructor is required for enhancement.\n+     */\n+    protected Item() {\n+        super();\n+    }\n+\n+    /**\n+     * The public constructor constructs with a title.\n+     *\n+     * @param title the title of the item.\n+     */\n+    public Item(String title) {\n+        super();\n+        this.title = title;\n+    }\n+\n+    /**\n+     * Gets the unique identifier of this receiver. There is no corresponding\n+     * <code>setId()</code> method as the identifier value is generated by the\n+     * Persistence Provider Runtime.\n+     *\n+     * @return unique identifier of this instance.\n+     */\n+    public int getId() {\n+        return id;\n+    }\n+\n+    /**\n+     * Gets the title of this item.\n+     *\n+     * @return return the tile of the item.\n+     */\n+    public String getTitle() {\n+        return title;\n+    }\n+\n+    /**\n+     * Sets the title of this receiver.\n+     *\n+     * @param title must not be null or empty.\n+     */\n+    public void setTitle(String title) {\n+        if (title == null || title.trim().length() == 0)\n+            throw new IllegalArgumentException(\n+                \"null or empty title not allowed\");\n+        this.title = title;\n+    }\n+\n+    /**\n+     * Gets the artist who created this item. This is an example of\n+     * unidirectional single-valued relationship.\n+     *\n+     * @return the artist who created this item.\n+     */\n+    public Artist getArtist() {\n+        return artist;\n+    }\n+\n+    /**\n+     * Sets the artist who created this Item.\n+     *\n+     * @param artist must not be null.\n+     */\n+    public void setArtist(Artist artist) {\n+        if (artist == null)\n+            throw new IllegalArgumentException(\"null Artist for \" + this);\n+\n+        this.artist = artist;\n+    }\n+}"},{"sha":"6326fb12e05103be11935ee00ac1efd00382db6d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/Painter.java","status":"added","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/apache/openjpa/blob/dec24c77671423d50aa0c253b7fd587b51045e6c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/Painter.java","raw_url":"https://github.com/apache/openjpa/raw/dec24c77671423d50aa0c253b7fd587b51045e6c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/Painter.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/Painter.java?ref=dec24c77671423d50aa0c253b7fd587b51045e6c","patch":"@@ -0,0 +1,33 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.meta;\n+\n+import javax.persistence.Entity;\n+\n+@Entity\n+public class Painter extends Artist {\n+\n+    public Painter() {\n+        super();\n+    }\n+\n+    public Painter(String name) {\n+        super(name);\n+    }\n+}"},{"sha":"fe7f17ea3e95b774098448eef593afe8be488e96","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/Person.java","status":"added","additions":78,"deletions":0,"changes":78,"blob_url":"https://github.com/apache/openjpa/blob/dec24c77671423d50aa0c253b7fd587b51045e6c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/Person.java","raw_url":"https://github.com/apache/openjpa/raw/dec24c77671423d50aa0c253b7fd587b51045e6c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/Person.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/Person.java?ref=dec24c77671423d50aa0c253b7fd587b51045e6c","patch":"@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.meta;\n+\n+import java.io.Serializable;\n+import java.util.Collection;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.OneToMany;\n+\n+@Entity\n+public class Person implements Serializable {\n+\n+    @Id\n+    private String name;\n+\n+    @OneToMany\n+    private Collection<Painter> paitersForPortrait;\n+\n+    /**\n+     * default constructor required by enhancement.\n+     */\n+    protected Person() {\n+\n+    }\n+\n+    /**\n+     * The public constructor constructs with a name.\n+     *\n+     * @param name the name of the person.\n+     */\n+\n+    public Person(String name) {\n+        this.name = name;\n+    }\n+\n+    /**\n+     * Gets the name of this person. This is the unique identifier.\n+     *\n+     * @return return the name of this person.\n+     */\n+    public String getName() {\n+\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        if (name == null || name.trim().length() == 0)\n+            throw new IllegalArgumentException(\n+                \"null or empty name not allowed\");\n+        this.name = name;\n+    }\n+\n+    public Collection<Painter> getPainters() {\n+\n+        return paitersForPortrait;\n+    }\n+\n+    public void setPainters(Collection<Painter> p) {\n+        this.paitersForPortrait = p;\n+    }\n+}"},{"sha":"cb95ab4434db06d54d6633f9f79e01598d94ab54","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/TestGetMetaData.java","status":"added","additions":35,"deletions":0,"changes":35,"blob_url":"https://github.com/apache/openjpa/blob/dec24c77671423d50aa0c253b7fd587b51045e6c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/TestGetMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/dec24c77671423d50aa0c253b7fd587b51045e6c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/TestGetMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/TestGetMetaData.java?ref=dec24c77671423d50aa0c253b7fd587b51045e6c","patch":"@@ -0,0 +1,35 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.meta;\n+\n+import org.apache.openjpa.persistence.JPAFacadeHelper;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+public class TestGetMetaData extends SingleEMFTestCase {\n+\n+    public void setUp() {\n+        setUp(Item.class, Person.class, Artist.class, Painter.class,\n+            CLEAR_TABLES);\n+    }\n+\n+    public void testGetMetaData() {\n+    \tassertNotNull(JPAFacadeHelper.getMetaData(emf, Item.class));\n+    \tassertNotNull(JPAFacadeHelper.getMetaData(emf, Person.class));\n+    }\n+}"},{"sha":"c93377fc49a13d7b2ebe26dd4e372bd07586841a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/TestMetaDataInheritanceComparator.java","status":"modified","additions":0,"deletions":8,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/dec24c77671423d50aa0c253b7fd587b51045e6c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/TestMetaDataInheritanceComparator.java","raw_url":"https://github.com/apache/openjpa/raw/dec24c77671423d50aa0c253b7fd587b51045e6c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/TestMetaDataInheritanceComparator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/TestMetaDataInheritanceComparator.java?ref=dec24c77671423d50aa0c253b7fd587b51045e6c","patch":"@@ -25,10 +25,6 @@\n \r\n public class TestMetaDataInheritanceComparator extends PersistenceTestCase {\r\n \r\n-    public void testInheritanceComparatorWithoutBase() {\r\n-        inheritanceComparatorHelper(false);\r\n-    }\r\n-\r\n     public void testInheritanceComparatorWithBase() {\r\n         inheritanceComparatorHelper(true);\r\n     }\r\n@@ -47,10 +43,6 @@ private void inheritanceComparatorHelper(boolean base) {\n         assertTrue(comp.compare(AbstractThing.class, C.class) < 0);\r\n     }\r\n \r\n-    public void testMetaDataInheritanceComparatorWithoutBase() {\r\n-        metaDataInheritanceComparatorHelper(false);\r\n-    }\r\n-\r\n     public void testMetaDataInheritanceComparatorWithBase() {\r\n         metaDataInheritanceComparatorHelper(true);\r\n     }\r"}]}

