{"sha":"df02d831e2dce80e0d00ec0febf0c708f02bacb3","node_id":"MDY6Q29tbWl0MjA2MzY0OmRmMDJkODMxZTJkY2U4MGUwZDAwZWMwZmViZjBjNzA4ZjAyYmFjYjM=","commit":{"author":{"name":"A. Abram White","email":"awhite@apache.org","date":"2007-03-26T20:52:14Z"},"committer":{"name":"A. Abram White","email":"awhite@apache.org","date":"2007-03-26T20:52:14Z"},"message":"Only process registered classes that are listed as belonging to this persistence\nunit.  \n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@522623 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1e4b50988c301f6337c4157e079e2cc5c267862f","url":"https://api.github.com/repos/apache/openjpa/git/trees/1e4b50988c301f6337c4157e079e2cc5c267862f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/df02d831e2dce80e0d00ec0febf0c708f02bacb3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/df02d831e2dce80e0d00ec0febf0c708f02bacb3","html_url":"https://github.com/apache/openjpa/commit/df02d831e2dce80e0d00ec0febf0c708f02bacb3","comments_url":"https://api.github.com/repos/apache/openjpa/commits/df02d831e2dce80e0d00ec0febf0c708f02bacb3/comments","author":null,"committer":null,"parents":[{"sha":"9b61ded11bf1ea63c174e7a2d63fd7e6e5fe1e60","url":"https://api.github.com/repos/apache/openjpa/commits/9b61ded11bf1ea63c174e7a2d63fd7e6e5fe1e60","html_url":"https://github.com/apache/openjpa/commit/9b61ded11bf1ea63c174e7a2d63fd7e6e5fe1e60"}],"stats":{"total":32,"additions":20,"deletions":12},"files":[{"sha":"7d6fa6b3f420b3f0b757ca63b464dd45ed5b85b2","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryFlushModes.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/df02d831e2dce80e0d00ec0febf0c708f02bacb3/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryFlushModes.java","raw_url":"https://github.com/apache/openjpa/raw/df02d831e2dce80e0d00ec0febf0c708f02bacb3/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryFlushModes.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryFlushModes.java?ref=df02d831e2dce80e0d00ec0febf0c708f02bacb3","patch":"@@ -29,7 +29,8 @@\n      * Constant denoting that queries should flush data to the\n      * database automatically whenever OpenJPA determines that relevant\n      * modifications have been made and IgnoreCache is\n-     * <code>false</code>. See {@link OpenJPAConfiguration#getFlushBeforeQueries}\n+     * <code>false</code>. See \n+     * {@link OpenJPAConfiguration#getFlushBeforeQueries}\n      * for more info.\n      */\n     public static final int FLUSH_TRUE = 0;"},{"sha":"b74920058ed194c894b8eb87790541d1ccc5da4b","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/df02d831e2dce80e0d00ec0febf0c708f02bacb3/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/df02d831e2dce80e0d00ec0febf0c708f02bacb3/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java?ref=df02d831e2dce80e0d00ec0febf0c708f02bacb3","patch":"@@ -310,7 +310,7 @@ public ClassMetaData getMappedPCSuperclassMetaData() {\n         if (_owner != null)\n             return _repos.EMPTY_CLASSES;\n \n-        _repos.processRegisteredClasses();\n+        _repos.processRegisteredClasses(_loader);\n         if (_subs == null) {\n             Collection subs = _repos.getPCSubclasses(_type);\n             _subs = (Class[]) subs.toArray(new Class[subs.size()]);"},{"sha":"9d3e46fcd24c32954f01442100328ea8cf8ad24d","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","status":"modified","additions":17,"deletions":10,"changes":27,"blob_url":"https://github.com/apache/openjpa/blob/df02d831e2dce80e0d00ec0febf0c708f02bacb3/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","raw_url":"https://github.com/apache/openjpa/raw/df02d831e2dce80e0d00ec0febf0c708f02bacb3/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java?ref=df02d831e2dce80e0d00ec0febf0c708f02bacb3","patch":"@@ -304,7 +304,7 @@ public ClassMetaData getMetaData(String alias, ClassLoader envLoader,\n             return null;\n \n         // check cache\n-        processRegisteredClasses();\n+        processRegisteredClasses(envLoader);\n         List classList = (List) _aliases.get(alias);\n \n         // multiple classes may have been defined with the same alias: we\n@@ -322,8 +322,8 @@ public ClassMetaData getMetaData(String alias, ClassLoader envLoader,\n \n                 // if we have specified a list of persistent clases,\n                 // also check to ensure that the class is in that list\n-                if (pcNames == null || pcNames.size() == 0 ||\n-                    pcNames.contains(nc.getName())) {\n+                if (pcNames == null || pcNames.size() == 0 \n+                    || pcNames.contains(nc.getName())) {\n                     cls = nc;\n                     if (!classList.contains(cls))\n                         classList.add(cls);\n@@ -375,7 +375,7 @@ private ClassMetaData getMetaDataInternal(Class cls,\n         // dev time so that user can manipulate persistent classes he's writing\n         // before adding them to the list\n         if ((_validate & VALIDATE_RUNTIME) != 0) {\n-            Set pcNames = _factory.getPersistentTypeNames(false, envLoader);\n+            Set pcNames = getPersistentTypeNames(false, envLoader);\n             if (pcNames != null && !pcNames.contains(cls.getName()))\n                 return meta;\n         }\n@@ -930,7 +930,7 @@ public ClassMetaData getMetaData(Object oid, ClassLoader envLoader,\n         }\n \n         // check cache\n-        processRegisteredClasses();\n+        processRegisteredClasses(envLoader);\n         Class cls = (Class) _oids.get(oid.getClass());\n         if (cls != null)\n             return getMetaData(cls, envLoader, mustExist);\n@@ -946,7 +946,7 @@ public ClassMetaData getMetaData(Object oid, ClassLoader envLoader,\n         // if still not match, register any classes that look similar to the\n         // oid class and check again\n         resolveIdentityClass(oid);\n-        if (processRegisteredClasses().length > 0) {\n+        if (processRegisteredClasses(envLoader).length > 0) {\n             cls = (Class) _oids.get(oid.getClass());\n             if (cls != null)\n                 return getMetaData(cls, envLoader, mustExist);\n@@ -1201,7 +1201,7 @@ public synchronized Set getPersistentTypeNames(boolean devpath,\n      */\n     public synchronized Collection loadPersistentTypes(boolean devpath,\n         ClassLoader envLoader) {\n-        Set names = _factory.getPersistentTypeNames(devpath, envLoader);\n+        Set names = getPersistentTypeNames(devpath, envLoader);\n         if (names == null || names.isEmpty())\n             return Collections.EMPTY_LIST;\n \n@@ -1264,7 +1264,7 @@ public void register(Class cls) {\n      * Parses the metadata for all registered classes.\n      */\n     private void loadRegisteredClassMetaData(ClassLoader envLoader) {\n-        Class[] reg = processRegisteredClasses();\n+        Class[] reg = processRegisteredClasses(envLoader);\n         for (int i = 0; i < reg.length; i++) {\n             try {\n                 getMetaData(reg[i], envLoader, false);\n@@ -1278,7 +1278,7 @@ private void loadRegisteredClassMetaData(ClassLoader envLoader) {\n     /**\n      * Updates our datastructures with the latest registered classes.\n      */\n-    Class[] processRegisteredClasses() {\n+    Class[] processRegisteredClasses(ClassLoader envLoader) {\n         if (_registered.isEmpty())\n             return EMPTY_CLASSES;\n \n@@ -1290,8 +1290,15 @@ private void loadRegisteredClassMetaData(ClassLoader envLoader) {\n             _registered.clear();\n         }\n \n+        Collection pcNames = getPersistentTypeNames(false, envLoader);\n         Collection failed = null;\n         for (int i = 0; i < reg.length; i++) {\n+            // don't process types that aren't listed by the user; may belong\n+            // to a different persistence unit\n+            if (pcNames != null && !pcNames.isEmpty()\n+                && !pcNames.contains(reg[i].getName()))\n+                continue;\n+\n             try {\n                 processRegisteredClass(reg[i]);\n             } catch (Throwable t) {\n@@ -1492,7 +1499,7 @@ public synchronized QueryMetaData getQueryMetaData(Class cls, String name,\n         if (meta == null && mustExist) {\n             if (cls == null) {\n                 throw new MetaDataException(_loc.get\n-                    (\"no-named-query-null-class\",\n+                    (\"no-named-query-null-class\", \n                         getPersistentTypeNames(false, envLoader), name));\n             } else {\n                 throw new MetaDataException(_loc.get(\"no-named-query\","}]}

