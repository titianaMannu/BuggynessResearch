{"sha":"df860912a7ddda0ea5bed5167b3477ff99c48e81","node_id":"MDY6Q29tbWl0MjA2MzY0OmRmODYwOTEyYTdkZGRhMGVhNWJlZDUxNjdiMzQ3N2ZmOTljNDhlODE=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-09-11T03:22:00Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-09-11T03:22:00Z"},"message":"OPENJPA-1288: stop re-alias(). Added new utility to check validity of names for JPA reserved words and special symbols. \n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@813658 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"78c132279697ce32920eb3b0464b6f09ce9f7693","url":"https://api.github.com/repos/apache/openjpa/git/trees/78c132279697ce32920eb3b0464b6f09ce9f7693"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/df860912a7ddda0ea5bed5167b3477ff99c48e81","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/df860912a7ddda0ea5bed5167b3477ff99c48e81","html_url":"https://github.com/apache/openjpa/commit/df860912a7ddda0ea5bed5167b3477ff99c48e81","comments_url":"https://api.github.com/repos/apache/openjpa/commits/df860912a7ddda0ea5bed5167b3477ff99c48e81/comments","author":null,"committer":null,"parents":[{"sha":"eb5baa42a27e626373134486869b1ab873ac82cb","url":"https://api.github.com/repos/apache/openjpa/commits/eb5baa42a27e626373134486869b1ab873ac82cb","html_url":"https://github.com/apache/openjpa/commit/eb5baa42a27e626373134486869b1ab873ac82cb"}],"stats":{"total":187,"additions":182,"deletions":5},"files":[{"sha":"b5502ed83ce0e8d2c23fcc2d72a1e3bbc81b5127","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestTypesafeCriteria.java","status":"modified","additions":60,"deletions":1,"changes":61,"blob_url":"https://github.com/apache/openjpa/blob/df860912a7ddda0ea5bed5167b3477ff99c48e81/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestTypesafeCriteria.java","raw_url":"https://github.com/apache/openjpa/raw/df860912a7ddda0ea5bed5167b3477ff99c48e81/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestTypesafeCriteria.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestTypesafeCriteria.java?ref=df860912a7ddda0ea5bed5167b3477ff99c48e81","patch":"@@ -1261,7 +1261,7 @@ public void testJoinKey() {\n         }\n     }\n     \n-    public void testAlias() {\n+    public void testAliasInOrderByClause() {\n         String jpql = \"SELECT AVG(a.balance) AS x FROM Account a ORDER BY x\";\n \n         OpenJPACriteriaQuery<Double> c = cb.createQuery(Double.class);\n@@ -1275,4 +1275,63 @@ public void testAlias() {\n         assertEquivalence(c, jpql);\n         assertEquals(jpql, c.toCQL());\n     }\n+    \n+    public void testRealiasNotAllowed() {\n+        OpenJPACriteriaQuery<Double> c = cb.createQuery(Double.class);\n+        Root<Account> account = c.from(Account.class);\n+        Selection<Double> term = cb.avg(account.get(Account_.balance));\n+        term.alias(\"firsttime\");\n+        try {\n+            term.alias(\"secondtime\");\n+            fail(\"Expected to fail on re-aliasing\");\n+        } catch (IllegalStateException e) {\n+            // good\n+        }\n+    }\n+    \n+    public void testInvalidAliasNotAllowed() {\n+        OpenJPACriteriaQuery<Double> c = cb.createQuery(Double.class);\n+        Root<Account> account = c.from(Account.class);\n+        Selection<Double> term = cb.avg(account.get(Account_.balance));\n+        try {\n+            term.alias(\"from\");\n+            fail(\"Expected to fail on reserved word as alias\");\n+        } catch (IllegalArgumentException e) {\n+            // good\n+            assertNull(term.getAlias());\n+        }\n+        try {\n+            term.alias(\" with a space\");\n+            fail(\"Expected to fail on invalid alias\");\n+        } catch (IllegalArgumentException e) {\n+            // good\n+            assertNull(term.getAlias());\n+        }\n+        try {\n+            term.alias(\" with?known_symbol\");\n+            fail(\"Expected to fail on invalid alias\");\n+        } catch (IllegalArgumentException e) {\n+            // good\n+            assertNull(term.getAlias());\n+        }\n+    }\n+    \n+    public void testInvalidParameterName() {\n+        try {\n+            cb.parameter(Integer.class, \"from\");\n+            fail(\"Expected to fail on reserved word as alias\");\n+        } catch (IllegalArgumentException e) {\n+        }\n+        try {\n+            cb.parameter(Integer.class, \":name\");\n+            fail(\"Expected to fail on invalid alias\");\n+        } catch (IllegalArgumentException e) {\n+        }\n+        try {\n+            cb.parameter(Integer.class, \"?3\");\n+            fail(\"Expected to fail on invalid alias\");\n+        } catch (IllegalArgumentException e) {\n+        }\n+    }\n+\n }"},{"sha":"b1f3fc84709e83f9abaedde2c28c8161eb5d9ebe","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/OpenJPACriteriaBuilder.java","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/df860912a7ddda0ea5bed5167b3477ff99c48e81/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/OpenJPACriteriaBuilder.java","raw_url":"https://github.com/apache/openjpa/raw/df860912a7ddda0ea5bed5167b3477ff99c48e81/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/OpenJPACriteriaBuilder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/OpenJPACriteriaBuilder.java?ref=df860912a7ddda0ea5bed5167b3477ff99c48e81","patch":"@@ -4,6 +4,7 @@\n import javax.persistence.criteria.Predicate;\n import javax.persistence.criteria.QueryBuilder;\n import javax.persistence.metamodel.Attribute;\n+import javax.persistence.metamodel.Metamodel;\n \n /**\n  * OpenJPA-specific extension to JPA 2.0 Criteria Query Builder API.\n@@ -57,5 +58,9 @@\n      * Create a mutable style to apply on query-by-example.\n      */\n     public ComparisonStyle qbeStyle();\n-\n+    \n+    /**\n+     * Gets the metamodel for the managed, persistent domain entities.\n+     */\n+    public Metamodel getMetamodel();\n }"},{"sha":"1ae87ccb784d8859487d7e85ea84d220d688febf","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/ParameterExpressionImpl.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/df860912a7ddda0ea5bed5167b3477ff99c48e81/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/ParameterExpressionImpl.java","raw_url":"https://github.com/apache/openjpa/raw/df860912a7ddda0ea5bed5167b3477ff99c48e81/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/ParameterExpressionImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/ParameterExpressionImpl.java?ref=df860912a7ddda0ea5bed5167b3477ff99c48e81","patch":"@@ -52,6 +52,8 @@\n \t */\n     public ParameterExpressionImpl(Class<T> cls, String name) {\n         super(cls);\n+        if (name != null)\n+            assertValidName(name);\n         _name = name;\n     }\n "},{"sha":"2966f8a177cd66cbcf4b05f5a24fa2395812689d","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/SelectionImpl.java","status":"modified","additions":29,"deletions":3,"changes":32,"blob_url":"https://github.com/apache/openjpa/blob/df860912a7ddda0ea5bed5167b3477ff99c48e81/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/SelectionImpl.java","raw_url":"https://github.com/apache/openjpa/raw/df860912a7ddda0ea5bed5167b3477ff99c48e81/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/SelectionImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/SelectionImpl.java?ref=df860912a7ddda0ea5bed5167b3477ff99c48e81","patch":"@@ -23,6 +23,8 @@\n import javax.persistence.criteria.Expression;\n import javax.persistence.criteria.Selection;\n \n+import org.apache.openjpa.persistence.util.ReservedWords;\n+\n /**\n  * An item selected in the projection clause of Criteria query.\n  * Base implementation for all concrete expressions.\n@@ -34,7 +36,7 @@\n public abstract class SelectionImpl<X> implements Selection<X>, CriteriaExpression {\n     private final Class<X> _cls;\n     private String _alias;\n-    private Boolean _autoAliased;\n+    private Boolean _autoAliased; \n     \n     /**\n      * Construct with the immutable type represented by this selection term.\n@@ -59,8 +61,13 @@ public String getAlias() {\n     \n     /**\n      * Sets the alias on this selection term.\n+     * Alias can only be set once.\n      */\n     public Selection<X> alias(String alias) {\n+        assertValidName(alias);\n+        if (isAliased())\n+            throw new IllegalStateException(this + \" has been aliased to [\" + _alias \n+                    + \". Can not alias again to \" + alias);\n         _alias = alias;\n         _autoAliased = false;\n         return this;\n@@ -71,8 +78,8 @@ public String getAlias() {\n      * by calling {@linkplain #alias(String)}.\n      */\n     void setAutoAlias(String alias) {\n-        if (Boolean.FALSE.equals(_autoAliased))\n-            throw new IllegalStateException(this + \" has been aliased. Can not set alias automatically\");\n+        if (isAliased())\n+            throw new IllegalStateException(this + \" has been aliased. Can not set alias internally\");\n         _alias = alias;\n         _autoAliased = true;\n     }\n@@ -83,6 +90,15 @@ void setAutoAlias(String alias) {\n     boolean isAutoAliased() {\n         return _autoAliased == null ? true : _autoAliased.booleanValue();\n     }  \n+    \n+    /**\n+     * Affirms if this expression has been assigned an alias by {@linkplain #alias(String)} method.\n+     * An alias can be assigned also by internal implementation.\n+     * @see #isAutoAliased() \n+     */\n+    boolean isAliased() {\n+        return Boolean.FALSE.equals(_autoAliased);\n+    }  \n \n     /**\n      * Throws IllegalStateException because a selection term, by default, consists of single value.\n@@ -98,6 +114,16 @@ public boolean isCompoundSelection() {\n         return false;\n     }\n     \n+    void assertValidName(String name) {\n+        if (name == null || name.trim().length() == 0)\n+            throw new IllegalArgumentException(\"empty name is invalid\");\n+        if (ReservedWords.isKeyword(name)) \n+            throw new IllegalArgumentException(\"reserved word \" + name + \" is not valid\");\n+        Character ch = ReservedWords.hasSpecialCharacter(name);\n+        if (ch != null) \n+            throw new IllegalArgumentException(name + \" contains reserved symbol \" + ch);\n+    }\n+    \n     //  ------------------------------------------------------------------------------------\n     //  Contract for CriteriaExpression implemented mostly as a no-op for easier derivation.\n     //  ------------------------------------------------------------------------------------"},{"sha":"fbcdfff278d3e017e06d7442be36f15229ba34eb","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/util/ReservedWords.java","status":"added","additions":85,"deletions":0,"changes":85,"blob_url":"https://github.com/apache/openjpa/blob/df860912a7ddda0ea5bed5167b3477ff99c48e81/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/util/ReservedWords.java","raw_url":"https://github.com/apache/openjpa/raw/df860912a7ddda0ea5bed5167b3477ff99c48e81/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/util/ReservedWords.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/util/ReservedWords.java?ref=df860912a7ddda0ea5bed5167b3477ff99c48e81","patch":"@@ -0,0 +1,85 @@\n+package org.apache.openjpa.persistence.util;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+\n+/**\n+ * Utility to test validity of identifier or parameter name.\n+ * \n+ * @author Pinaki Poddar\n+ * @since 2.0.0\n+ *\n+ */\n+public class ReservedWords {\n+    public static final Set<String> KEYWORDS = new HashSet<String>();\n+    static {\n+        KEYWORDS.addAll(Arrays.asList(\n+            \"ABS\", \"ALL\", \"AND\", \"ANY\", \"AS\", \"ASC\", \"AVG\", \n+            \"BETWEEN\", \"BIT_LENGTH\", \"BOTH\", \"BY\", \n+            \"CASE\", \"CHAR_LENGTH\", \"CHARACTER_LENGTH\", \"CLASS\", \"COALESCE\", \"CONCAT\", \"COUNT\", \n+            \"CURRENT_DATE\", \"CURRENT_TIME\", \"CURRENT_TIMESTAMP\",\n+            \"DELETE\", \"DESC\", \"DISTINCT\", \n+            \"ELSE\", \"EMPTY\", \"END\", \"ENTRY\", \"ESCAPE\", \"EXISTS\", \n+            \"FALSE\", \"FETCH\", \"FROM\", \n+            \"GROUP\", \n+            \"HAVING\", \n+            \"IN\", \"INDEX\", \"INNER\", \"IS\", \n+            \"JOIN\", \n+            \"KEY\", \n+            \"LEADING\", \"LEFT\", \"LENGTH\", \"LIKE\", \"LOCATE\", \"LOWER\", \n+            \"MAX\", \"MEMBER\", \"MIN\", \"MOD\", \n+            \"NEW\", \"NOT\", \"NULL\", \"NULLIF\", \n+            \"OBJECT\", \"OF\", \"OR\", \"ORDER\", \"OUTER\", \n+            \"POSITION\", \n+            \"SELECT\", \"SET\", \"SIZE\", \"SOME\", \"SQRT\", \"SUBSTRING\", \"SUM\", \n+            \"THEN\", \"TRAILING\", \"TRIM\", \"TRUE\", \"TYPE\", \n+            \"UNKNOWN[50]\", \"UPDATE\", \"UPPER\", \n+            \"VALUE\", \n+            \"WHEN\", \"WHERE\"));\n+    };\n+    \n+    /**\n+     * Affirms if the given string matches any of the JPA reserved words in a case-insensitive manner.\n+     */\n+    public static boolean isKeyword(String name) {\n+        return name != null && KEYWORDS.contains(name.toUpperCase());\n+    }\n+    \n+    /**\n+     * Returns the special character contained in the given name if any.\n+     * \n+     * @return null if no character in the given name is a special character.\n+     */\n+    public static Character hasSpecialCharacter(String name) {\n+        if (name == null)\n+            return null;\n+        char[] chars = name.toCharArray();\n+        if (!Character.isJavaIdentifierStart(chars[0]))\n+                return chars[0];\n+        for (int i = 1; i < chars.length; i++) {\n+            if (!Character.isJavaIdentifierPart(chars[i]))\n+                    return chars[i];\n+        }\n+        return null;\n+    }\n+}"}]}

