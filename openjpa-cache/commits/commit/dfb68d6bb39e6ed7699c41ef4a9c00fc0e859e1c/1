{"sha":"dfb68d6bb39e6ed7699c41ef4a9c00fc0e859e1c","node_id":"MDY6Q29tbWl0MjA2MzY0OmRmYjY4ZDZiYjM5ZTZlZDc2OTljNDFlZjRhOWMwMGZjMGU4NTllMWM=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-11-13T23:15:53Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-11-13T23:15:53Z"},"message":"OPENJPA-744 Extra SQL on LAZY/EAGER  ManyToOne relation\nApply fix to 1.2.x branch\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@713857 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"10287e46d57c3ee5fedb2ce37000e3c1df0ca0d1","url":"https://api.github.com/repos/apache/openjpa/git/trees/10287e46d57c3ee5fedb2ce37000e3c1df0ca0d1"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/dfb68d6bb39e6ed7699c41ef4a9c00fc0e859e1c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/dfb68d6bb39e6ed7699c41ef4a9c00fc0e859e1c","html_url":"https://github.com/apache/openjpa/commit/dfb68d6bb39e6ed7699c41ef4a9c00fc0e859e1c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/dfb68d6bb39e6ed7699c41ef4a9c00fc0e859e1c/comments","author":null,"committer":null,"parents":[{"sha":"b7178324a9daecae1104b900dc3e24b91ea24203","url":"https://api.github.com/repos/apache/openjpa/commits/b7178324a9daecae1104b900dc3e24b91ea24203","html_url":"https://github.com/apache/openjpa/commit/b7178324a9daecae1104b900dc3e24b91ea24203"}],"stats":{"total":566,"additions":561,"deletions":5},"files":[{"sha":"f3f85b7d35edc54459f81dca890f2d219d704086","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","status":"modified","additions":77,"deletions":1,"changes":78,"blob_url":"https://github.com/apache/openjpa/blob/dfb68d6bb39e6ed7699c41ef4a9c00fc0e859e1c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/dfb68d6bb39e6ed7699c41ef4a9c00fc0e859e1c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java?ref=dfb68d6bb39e6ed7699c41ef4a9c00fc0e859e1c","patch":"@@ -35,6 +35,7 @@\n \n import javax.sql.DataSource;\n \n+import org.apache.openjpa.enhance.PersistenceCapable;\n import org.apache.openjpa.event.OrphanedKeyAction;\n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n import org.apache.openjpa.jdbc.conf.QuerySQLCacheValue;\n@@ -354,14 +355,27 @@ protected boolean initializeState(OpenJPAStateManager sm, PCState state,\n                     getMappedByFieldMapping();\n                 Object mappedByObject = info.result.getMappedByValue();\n                 if (mappedByFieldMapping != null && mappedByObject != null)\n-                    setMappedBy(sm, mappedByFieldMapping, mappedByObject);\n+                    if (mappedByObject instanceof OpenJPAId)\n+                        // The inverse relation can not be set since\n+                        // we are eagerly loading this sm for\n+                        // a sm owner that is still in the process of \n+                        // initializing itself.\n+                        // Remember owner oid by setIntermediate().\n+                        // The inverse relation is set later by\n+                        // setInverseRelation() when the sm owner is fully\n+                        // initialized.\n+                        sm.setIntermediate(mappedByFieldMapping.getIndex(),\n+                            mappedByObject);\n+                    else\n+                        setMappedBy(sm, mappedByFieldMapping, mappedByObject);\n             }\n             // load the selected mappings into the given state manager\n             if (res != null) {\n                 // re-get the mapping in case the instance was a subclass\n                 mapping = (ClassMapping) sm.getMetaData();\n                 load(mapping, sm, fetch, res);\n                 getVersion(mapping, sm, res);\n+                setInverseRelation(sm, mapping, res);\n             }\n             return true;\n         } finally {\n@@ -370,6 +384,48 @@ protected boolean initializeState(OpenJPAStateManager sm, PCState state,\n         }\n     }\n \n+    private void setInverseRelation(OpenJPAStateManager owner,\n+        ClassMapping mapping, Result res) {\n+        FieldMapping[] fms = mapping.getFieldMappings();\n+\n+        // At this point, the owner is fully initialized.\n+        // Check if the owner has eagerly loaded ToMany relations.\n+        for (int i = 0; i < fms.length; i++) {\n+            if (res.getEager(fms[i]) != null) {\n+                Object coll =  owner.fetchObject(fms[i].getIndex());\n+                if (coll instanceof Collection && \n+                    ((Collection) coll).size() > 0) {\n+                    // Found eagerly loaded collection.\n+                    // Publisher (1) <==>  (M) Magazine\n+                    //    publisher has a EAGER OneToMany relation\n+                    //    magazine has a EAGER or LAZY ManyToOne publisher\n+                    // For each member (Magazine) in the collection, \n+                    // set its inverse relation (Publisher).\n+                    for (Iterator itr = ((Collection) coll).iterator();\n+                        itr.hasNext();) {\n+                        PersistenceCapable pc = (PersistenceCapable) itr.next();\n+                        OpenJPAStateManager sm = (OpenJPAStateManager) pc.\n+                            pcGetStateManager();\n+                        FieldMapping[] fmd = ((ClassMapping) sm.getMetaData()).\n+                            getFieldMappings();\n+                        for (int j = 0; j < fmd.length; j++) {\n+                            Object oid = sm.getIntermediate(fmd[j].getIndex());\n+                            // if oid was setIntermediate() previously\n+                            // and it is the same as the owner,\n+                            // then set the inverse relation\n+                            if (oid != null &&\n+                                oid.equals(owner.getObjectId())) {\n+                                sm.storeObject(fmd[j].getIndex(),\n+                                    owner.getPersistenceCapable());\n+                                break;\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n     protected void setMappedBy(OpenJPAStateManager sm,\n         FieldMapping mappedByFieldMapping, Object mappedByObject) {\n         ClassMapping mapping = (ClassMapping) sm.getMetaData();\n@@ -914,9 +970,29 @@ public Object load(ClassMapping mapping, JDBCFetchConfiguration fetch,\n         ConnectionInfo info = new ConnectionInfo();\n         info.result = result;\n         info.mapping = mapping;\n+\n+        // if inverse relation is known, exclude loading during find\n+        exclude = excludeInverseRelation(mapping, info, exclude);\n         return _ctx.find(oid, fetch, exclude, info, 0);\n     }\n \n+    private BitSet excludeInverseRelation(ClassMapping mapping,\n+        ConnectionInfo info, BitSet exclude) {\n+        FieldMapping inverse = info.result.getMappedByFieldMapping();\n+        if (inverse != null) {\n+            FieldMapping[] fms = mapping.getDefinedFieldMappings();\n+            if (exclude == null)\n+                exclude = new BitSet(fms.length);\n+            for (int i = 0; i < fms.length; i++) {\n+                if (fms[i] == inverse) {\n+                    exclude.set(fms[i].getIndex());\n+                    break;\n+                }\n+            }\n+        }\n+        return exclude;\n+    }\n+\n     /**\n      * Load the given state manager with data from the result set. Only\n      * mappings originally selected will be loaded."},{"sha":"cf2e26a1cc91a6b2e6c60540013cfee64599c094","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StoreCollectionFieldStrategy.java","status":"modified","additions":20,"deletions":2,"changes":22,"blob_url":"https://github.com/apache/openjpa/blob/dfb68d6bb39e6ed7699c41ef4a9c00fc0e859e1c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StoreCollectionFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/dfb68d6bb39e6ed7699c41ef4a9c00fc0e859e1c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StoreCollectionFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StoreCollectionFieldStrategy.java?ref=dfb68d6bb39e6ed7699c41ef4a9c00fc0e859e1c","patch":"@@ -312,8 +312,9 @@ private Map processEagerParallelResult(OpenJPAStateManager sm,\n             if (field.getOrderColumn() != null)\n                 seq = res.getInt(field.getOrderColumn(), orderJoins) + 1;\n \n-            // for inverseEager field\n-            setMappedBy(oid, sm, coll, res);\n+            // for inverse relation field\n+            setMappedBy(oid.equals(sm.getObjectId()) ? \n+                sm.getPersistenceCapable() : oid, res);\n             Object val = loadElement(null, store, fetch, res, dataJoins);\n             add(store, coll, val);\n         }\n@@ -322,6 +323,23 @@ private Map processEagerParallelResult(OpenJPAStateManager sm,\n         return rels;\n     }\n \n+    private void setMappedBy(Object oid, Result res) {\n+        //  for inverse toOne relation field\n+        FieldMapping mappedByFieldMapping = field.getMappedByMapping();\n+        \n+        if (mappedByFieldMapping != null) {\n+            ValueMapping val = mappedByFieldMapping.getValueMapping();\n+            ClassMetaData decMeta = val.getTypeMetaData();\n+            // this inverse field does not have corresponding classMapping\n+            // its value may be a collection/map etc.\n+            if (decMeta == null) \n+                return;\n+            \n+            res.setMappedByFieldMapping(mappedByFieldMapping);\n+            res.setMappedByValue(oid);\n+        }\n+    }\n+\n     private void setMappedBy(Object oid, OpenJPAStateManager sm, Object coll,\n         Result res) {\n         // for inverseEager field"},{"sha":"ec9e484577f9e2dca7aefab62d5abee786648f16","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/OneManyEagerChild.java","status":"added","additions":64,"deletions":0,"changes":64,"blob_url":"https://github.com/apache/openjpa/blob/dfb68d6bb39e6ed7699c41ef4a9c00fc0e859e1c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/OneManyEagerChild.java","raw_url":"https://github.com/apache/openjpa/raw/dfb68d6bb39e6ed7699c41ef4a9c00fc0e859e1c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/OneManyEagerChild.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/OneManyEagerChild.java?ref=dfb68d6bb39e6ed7699c41ef4a9c00fc0e859e1c","patch":"@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Version;\n+\n+@Entity\n+public class OneManyEagerChild {\n+\n+    @Id\n+    @GeneratedValue\n+    private long id;\n+\n+    private String name;\n+\n+    @ManyToOne(fetch=FetchType.EAGER)\n+    @JoinColumn(name=\"PARENT_ID\")\n+    private OneManyEagerParent parent;\n+\n+    @Version\n+    private Integer optLock;\n+\n+    public long getId() { \n+        return id; \n+    }\n+\n+    public String getName() { \n+        return name; \n+    }\n+\n+    public void setName(String name) { \n+        this.name = name; \n+    }\n+\n+    public OneManyEagerParent getParent() { \n+        return parent; \n+    }\n+\n+    public void setParent(OneManyEagerParent parent) { \n+        this.parent = parent; \n+    }\n+}"},{"sha":"672691ac18eb748ca8907dd29bca089be7418571","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/OneManyEagerParent.java","status":"added","additions":83,"deletions":0,"changes":83,"blob_url":"https://github.com/apache/openjpa/blob/dfb68d6bb39e6ed7699c41ef4a9c00fc0e859e1c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/OneManyEagerParent.java","raw_url":"https://github.com/apache/openjpa/raw/dfb68d6bb39e6ed7699c41ef4a9c00fc0e859e1c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/OneManyEagerParent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/OneManyEagerParent.java?ref=dfb68d6bb39e6ed7699c41ef4a9c00fc0e859e1c","patch":"@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.OneToMany;\n+import javax.persistence.OrderBy;\n+import javax.persistence.Version;\n+\n+@Entity\n+public class OneManyEagerParent {\n+\n+    @Id\n+    @GeneratedValue\n+    private long id;\n+\n+    private String name;\n+\n+    @OneToMany(mappedBy=\"parent\", fetch=FetchType.EAGER)\n+    @OrderBy(\"name ASC\")\n+    private List<OneManyLazyChild> lazychildren = \n+        new ArrayList<OneManyLazyChild>();\n+\n+    @OneToMany(mappedBy=\"parent\", fetch=FetchType.EAGER)\n+    @OrderBy(\"name ASC\")\n+    private List<OneManyEagerChild> eagerchildren = \n+        new ArrayList<OneManyEagerChild>();\n+\n+    @Version\n+    private Integer optLock;\n+\n+    public long getId() { \n+        return id; \n+    }\n+\n+    public List<OneManyLazyChild> getLazyChildren() { \n+        return lazychildren; \n+    }\n+\n+    public void addLazyChild(OneManyLazyChild child) {\n+        child.setParent(this);\n+        lazychildren.add(child);\n+    }\n+\n+    public List<OneManyEagerChild> getEagerChildren() { \n+        return eagerchildren; \n+    }\n+\n+    public void addEagerChild(OneManyEagerChild child) {\n+        child.setParent(this);\n+        eagerchildren.add(child);\n+    }\n+\n+    public String getName() { \n+        return name; \n+    }\n+\n+    public void setName(String name) { \n+        this.name = name; \n+    }\n+}"},{"sha":"62ff6addaf907cb99e310c7406c7671d8f4fd343","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/OneManyLazyChild.java","status":"added","additions":64,"deletions":0,"changes":64,"blob_url":"https://github.com/apache/openjpa/blob/dfb68d6bb39e6ed7699c41ef4a9c00fc0e859e1c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/OneManyLazyChild.java","raw_url":"https://github.com/apache/openjpa/raw/dfb68d6bb39e6ed7699c41ef4a9c00fc0e859e1c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/OneManyLazyChild.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/OneManyLazyChild.java?ref=dfb68d6bb39e6ed7699c41ef4a9c00fc0e859e1c","patch":"@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Version;\n+\n+@Entity\n+public class OneManyLazyChild {\n+\n+    @Id\n+    @GeneratedValue\n+    private long id;\n+\n+    private String name;\n+\n+    @ManyToOne(fetch=FetchType.LAZY)\n+    @JoinColumn(name=\"PARENT_ID\")\n+    private OneManyEagerParent parent;\n+\n+    @Version\n+    private Integer optLock;\n+\n+    public long getId() { \n+        return id; \n+    }\n+\n+    public String getName() { \n+        return name; \n+    }\n+\n+    public void setName(String name) { \n+        this.name = name; \n+    }\n+\n+    public OneManyEagerParent getParent() { \n+        return parent; \n+    }\n+\n+    public void setParent(OneManyEagerParent parent) { \n+        this.parent = parent; \n+    }\n+}"},{"sha":"d4be3634cd884256e95fdeddeac6b779ebf50d1f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestInverseEagerSQL.java","status":"modified","additions":56,"deletions":2,"changes":58,"blob_url":"https://github.com/apache/openjpa/blob/dfb68d6bb39e6ed7699c41ef4a9c00fc0e859e1c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestInverseEagerSQL.java","raw_url":"https://github.com/apache/openjpa/raw/dfb68d6bb39e6ed7699c41ef4a9c00fc0e859e1c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestInverseEagerSQL.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestInverseEagerSQL.java?ref=dfb68d6bb39e6ed7699c41ef4a9c00fc0e859e1c","patch":"@@ -21,12 +21,16 @@\n import java.util.Collection;\r\n import java.util.Iterator;\r\n import java.util.List;\r\n+import java.util.Set;\r\n+\r\n import javax.persistence.EntityManager;\r\n import javax.persistence.Query;\r\n \r\n import junit.textui.TestRunner;\r\n import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n import org.apache.openjpa.persistence.OpenJPAQuery;\r\n+import org.apache.openjpa.persistence.query.Magazine;\r\n+import org.apache.openjpa.persistence.query.Publisher;\r\n import org.apache.openjpa.persistence.test.SQLListenerTestCase;\r\n \r\n \r\n@@ -36,7 +40,8 @@\n     public void setUp() {\r\n         setUp(Customer.class, Customer.CustomerKey.class, Order.class, \r\n         \tEntityAInverseEager.class, EntityA1InverseEager.class, EntityA2InverseEager.class, \r\n-        \tEntityBInverseEager.class, EntityCInverseEager.class, EntityDInverseEager.class);\r\n+        \tEntityBInverseEager.class, EntityCInverseEager.class, EntityDInverseEager.class,\r\n+            Publisher.class, Magazine.class);\r\n         \r\n         EntityManager em = emf.createEntityManager();\r\n         em.getTransaction().begin();\r\n@@ -93,7 +98,29 @@ public void setUp() {\n             c1.setD(d1);\r\n             d1.setC(c1);\r\n         }\r\n-        \r\n+\r\n+        Publisher p1 = new Publisher();\r\n+        p1.setName(\"publisher1\");\r\n+        em.persist(p1);\r\n+   \r\n+        for (int i = 0; i < 4; i++) {\r\n+            Magazine magazine = new Magazine();\r\n+            magazine.setIdPublisher(p1);\r\n+            magazine.setName(\"magagine\"+i+\"_\"+p1.getName());\r\n+            em.persist(magazine);\r\n+        }\r\n+\r\n+        Publisher p2 = new Publisher();\r\n+        p2.setName(\"publisher2\");\r\n+        em.persist(p2);\r\n+   \r\n+        for (int i = 0; i < 4; i++) {\r\n+            Magazine magazine = new Magazine();\r\n+            magazine.setIdPublisher(p2);\r\n+            magazine.setName(\"magagine\"+i+\"_\"+p2.getName());\r\n+            em.persist(magazine);\r\n+        }\r\n+\r\n         em.flush();\r\n         em.getTransaction().commit();\r\n         em.close();\r\n@@ -197,6 +224,33 @@ public void testOneToManyInheritanceQuery() {\n         em.close();\r\n     }\r\n \r\n+    public void testOneToManyEagerInverseLazyQuery() {\r\n+        sql.clear();\r\n+\r\n+        OpenJPAEntityManager em = emf.createEntityManager();\r\n+        String query = \"select p FROM Publisher p\";\r\n+        Query q = em.createQuery(query);\r\n+        List list = q.getResultList();\r\n+        assertEquals(2, list.size());\r\n+        assertEquals(2, sql.size());\r\n+\r\n+        sql.clear();\r\n+        em.clear();\r\n+        for (int i = 0; i < list.size(); i++) {\r\n+            Publisher p = (Publisher) list.get(i);\r\n+            Set<Magazine> magazines = p.getMagazineCollection();\r\n+            assertEquals(4, magazines.size());\r\n+            for (Iterator iter = magazines.iterator(); iter.hasNext();) {\r\n+                Magazine m = (Magazine) iter.next();\r\n+                Publisher mp = m.getIdPublisher();\r\n+                assertEquals(p, mp);\r\n+            }\r\n+        }\r\n+\r\n+        assertEquals(0, sql.size());\r\n+        em.close();\r\n+    }\r\n+\r\n     public static void main(String[] args) {\r\n         TestRunner.run(TestInverseEagerSQL.class);\r\n     }\r"},{"sha":"9c1fb3537161f0894f540bb87b6af636c1670c94","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestManyEagerSQL.java","status":"added","additions":197,"deletions":0,"changes":197,"blob_url":"https://github.com/apache/openjpa/blob/dfb68d6bb39e6ed7699c41ef4a9c00fc0e859e1c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestManyEagerSQL.java","raw_url":"https://github.com/apache/openjpa/raw/dfb68d6bb39e6ed7699c41ef4a9c00fc0e859e1c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestManyEagerSQL.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestManyEagerSQL.java?ref=dfb68d6bb39e6ed7699c41ef4a9c00fc0e859e1c","patch":"@@ -0,0 +1,197 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import java.util.List;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.Query;\n+\n+import junit.textui.TestRunner;\n+\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.test.SQLListenerTestCase;\n+\n+\n+public class TestManyEagerSQL\n+    extends SQLListenerTestCase {\n+\n+    public void setUp() {\n+        setUp(\n+            OneManyEagerParent.class, OneManyEagerChild.class,\n+            OneManyLazyChild.class);\n+        \n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+\n+        for (int j = 0; j < 2; j++) {\n+            OneManyEagerParent parent = new OneManyEagerParent();\n+            parent.setName(\"parent\"+j);\n+            for (int i = 0; i < 2; i++) {\n+                OneManyEagerChild child = new OneManyEagerChild();\n+                child.setName(\"eagerchild\" + i);\n+                parent.addEagerChild(child);\n+                em.persist(child);\n+                OneManyLazyChild lazychild = new OneManyLazyChild();\n+                lazychild.setName(\"lazychild\" + i);\n+                parent.addLazyChild(lazychild);\n+                em.persist(lazychild);\n+            }\n+            em.persist(parent);\n+        }\n+\n+        em.flush();\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+\n+    public void testManyToOneEagerQuery() {\n+        sql.clear();\n+\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        String query = \"select c FROM OneManyEagerChild c\";\n+        Query q = em.createQuery(query);\n+        List list = q.getResultList();\n+        assertEquals(4, list.size());\n+        \n+        // Expected SQLs:\n+        //   SELECT t0.id, t0.optLock, t0.name, t1.id, t1.optLock, t1.name\n+        //       FROM OneManyEagerChild t0\n+        //       LEFT OUTER JOIN OneManyEagerParent t1 ON t0.PARENT_ID = t1.id\n+        //   SELECT t0.id, t0.optLock, t0.name FROM OneManyEagerChild t0\n+        //       WHERE t0.PARENT_ID = ? ORDER BY t0.name ASC [params=(long) 2]\n+        //   SELECT t0.id, t0.optLock, t0.name, t0.PARENT_ID\n+        //       FROM OneManyLazyChild t0 WHERE t0.PARENT_ID = ?\n+        //       ORDER BY t0.name ASC [params=(long) 2]\n+        //   SELECT t0.id, t0.optLock, t0.name FROM OneManyEagerChild t0\n+        //       WHERE t0.PARENT_ID = ? ORDER BY t0.name ASC [params=(long) 1]\n+        //   SELECT t0.id, t0.optLock, t0.name, t0.PARENT_ID \n+        //       FROM OneManyLazyChild t0 WHERE t0.PARENT_ID = ?\n+        //       ORDER BY t0.name ASC [params=(long) 1]\n+\n+        assertEquals(5, sql.size());\n+\n+        sql.clear();\n+\n+        for (int i = 0; i < list.size(); i++) {\n+            OneManyEagerChild child = (OneManyEagerChild) list.get(i);\n+            assertEquals(2, child.getParent().getLazyChildren().size());\n+            assertEquals(2, child.getParent().getEagerChildren().size());\n+        }\n+        assertEquals(0, sql.size());\n+\n+        em.close();\n+    }\n+\n+    public void testManyToOneLazyQuery() {\n+        sql.clear();\n+\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        String query = \"select c FROM OneManyLazyChild c\";\n+        Query q = em.createQuery(query);\n+        List list = q.getResultList();\n+        assertEquals(4, list.size());\n+\n+        // Expected SQL:\n+        // SELECT t0.id, t0.optLock, t0.name, t0.PARENT_ID\n+        //     FROM OneManyLazyChild t0\n+        assertEquals(1, sql.size());\n+\n+        sql.clear();\n+\n+        for (int i = 0; i < list.size(); i++) {\n+            OneManyLazyChild child = (OneManyLazyChild) list.get(i);\n+            assertEquals(2, child.getParent().getLazyChildren().size());\n+            assertEquals(2, child.getParent().getEagerChildren().size());\n+        }\n+\n+        // Expected SQLs: (fired on child.getParent())\n+        //  SELECT t0.optLock, t0.name, t1.PARENT_ID, t1.id, t1.optLock, t1.name\n+        //      FROM OneManyEagerParent t0\n+        //      LEFT OUTER JOIN OneManyEagerChild t1 ON t0.id = t1.PARENT_ID\n+        //      WHERE t0.id = ? \n+        //      ORDER BY t1.PARENT_ID ASC, t1.name ASC [params=(long) 252]\n+        //  SELECT t0.id, t0.optLock, t0.name, t0.PARENT_ID\n+        //      FROM OneManyLazyChild t0 WHERE t0.PARENT_ID = ?\n+        //      ORDER BY t0.name ASC [params=(long) 252]\n+        //  SELECT t0.optLock, t0.name, t1.PARENT_ID, t1.id, t1.optLock, t1.name\n+        //      FROM OneManyEagerParent t0\n+        //      LEFT OUTER JOIN OneManyEagerChild t1 ON t0.id = t1.PARENT_ID\n+        //      WHERE t0.id = ? \n+        //      ORDER BY t1.PARENT_ID ASC, t1.name ASC [params=(long) 251]\n+        //  SELECT t0.id, t0.optLock, t0.name, t0.PARENT_ID\n+        //      FROM OneManyLazyChild t0 WHERE t0.PARENT_ID = ?\n+        //      ORDER BY t0.name ASC [params=(long) 251]\n+\n+        assertEquals(4, sql.size());\n+\n+        em.close();\n+    }\n+\n+    public void testOneToManyEagerQuery() {\n+        sql.clear();\n+\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        String query = \"select p FROM OneManyEagerParent p\";\n+        Query q = em.createQuery(query);\n+        List list = q.getResultList();\n+        assertEquals(2, list.size());\n+\n+        // Expected SQLs:\n+        //   SELECT t0.id, t0.optLock, t0.name FROM OneManyEagerParent t0\n+        //   SELECT t0.id, t1.id, t1.optLock, t1.name FROM OneManyEagerParent t0\n+        //       INNER JOIN OneManyEagerChild t1 ON t0.id = t1.PARENT_ID\n+        //       ORDER BY t0.id ASC, t1.name ASC\n+        //   SELECT t0.id, t1.id, t1.optLock, t1.name, t1.PARENT_ID\n+        //       FROM OneManyEagerParent t0\n+        //       INNER JOIN OneManyLazyChild t1 ON t0.id = t1.PARENT_ID\n+        //       ORDER BY t0.id ASC, t1.name ASC\n+\n+        assertEquals(3, sql.size());\n+\n+        sql.clear();\n+\n+        for (int i = 0; i < list.size(); i++) {\n+            OneManyEagerParent p = (OneManyEagerParent) list.get(i);\n+            long id = p.getId();\n+            assertEquals(2, p.getEagerChildren().size());\n+            assertEquals(p, p.getEagerChildren().get(0).getParent());\n+            assertEquals(p, p.getEagerChildren().get(1).getParent());\n+            assertEquals(id, p.getEagerChildren().get(0).getParent().getId());\n+            assertEquals(id, p.getEagerChildren().get(1).getParent().getId());\n+            assertEquals(\"eagerchild0\", p.getEagerChildren().get(0).getName());\n+            assertEquals(\"eagerchild1\", p.getEagerChildren().get(1).getName());\n+            assertEquals(2, p.getLazyChildren().size());\n+            assertEquals(p, p.getLazyChildren().get(0).getParent());\n+            assertEquals(p, p.getLazyChildren().get(1).getParent());\n+            assertEquals(id, p.getLazyChildren().get(0).getParent().getId());\n+            assertEquals(id, p.getLazyChildren().get(1).getParent().getId());\n+            assertEquals(\"lazychild0\", p.getLazyChildren().get(0).getName());\n+            assertEquals(\"lazychild1\", p.getLazyChildren().get(1).getName());            \n+        }\n+\n+        assertEquals(0, sql.size());\n+        em.close();\n+    }\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(TestManyEagerSQL.class);\n+    }\n+}\n+"}]}

