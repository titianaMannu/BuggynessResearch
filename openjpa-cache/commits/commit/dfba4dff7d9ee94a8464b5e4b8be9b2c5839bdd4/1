{"sha":"dfba4dff7d9ee94a8464b5e4b8be9b2c5839bdd4","node_id":"MDY6Q29tbWl0MjA2MzY0OmRmYmE0ZGZmN2Q5ZWU5NGE4NDY0YjVlNGI4YmU5YjJjNTgzOWJkZDQ=","commit":{"author":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-07-10T02:28:11Z"},"committer":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-07-10T02:28:11Z"},"message":"OPENJPA-266, extensibility for platform specific version column\nPassed TCK with Derby\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@554803 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"47822ff52fd5474fab0b030da08a1729765a9f04","url":"https://api.github.com/repos/apache/openjpa/git/trees/47822ff52fd5474fab0b030da08a1729765a9f04"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/dfba4dff7d9ee94a8464b5e4b8be9b2c5839bdd4","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/dfba4dff7d9ee94a8464b5e4b8be9b2c5839bdd4","html_url":"https://github.com/apache/openjpa/commit/dfba4dff7d9ee94a8464b5e4b8be9b2c5839bdd4","comments_url":"https://api.github.com/repos/apache/openjpa/commits/dfba4dff7d9ee94a8464b5e4b8be9b2c5839bdd4/comments","author":null,"committer":null,"parents":[{"sha":"50332f053a10efb0f223cc893a6d80a9f36a26da","url":"https://api.github.com/repos/apache/openjpa/commits/50332f053a10efb0f223cc893a6d80a9f36a26da","html_url":"https://github.com/apache/openjpa/commit/50332f053a10efb0f223cc893a6d80a9f36a26da"}],"stats":{"total":23,"additions":19,"deletions":4},"files":[{"sha":"620c02bd82f24ba83c4853ef8ea52d723f0f558b","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/dfba4dff7d9ee94a8464b5e4b8be9b2c5839bdd4/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/dfba4dff7d9ee94a8464b5e4b8be9b2c5839bdd4/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java?ref=dfba4dff7d9ee94a8464b5e4b8be9b2c5839bdd4","patch":"@@ -3839,4 +3839,14 @@ public SerializedData(byte[] bytes) {\n             this.bytes = bytes;\n         }\n     }\n+    \n+    /**\n+     * Return version column name\n+     * @param column\n+     * @param tableAlias : this is needed for platform specific version column\n+     * @return\n+     */\n+    public String getVersionColumn(Column column, String tableAlias) {\n+        return column.toString();\n+    }\n }"},{"sha":"a4f4a5f2ada23253ca68be9ea3702d1cff7561bb","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/RowImpl.java","status":"modified","additions":9,"deletions":4,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/dfba4dff7d9ee94a8464b5e4b8be9b2c5839bdd4/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/RowImpl.java","raw_url":"https://github.com/apache/openjpa/raw/dfba4dff7d9ee94a8464b5e4b8be9b2c5839bdd4/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/RowImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/RowImpl.java?ref=dfba4dff7d9ee94a8464b5e4b8be9b2c5839bdd4","patch":"@@ -20,6 +20,7 @@\n \n import java.io.InputStream;\n import java.io.Reader;\n+import java.lang.reflect.Method;\n import java.math.BigDecimal;\n import java.math.BigInteger;\n import java.sql.Array;\n@@ -756,7 +757,7 @@ private String getUpdateSQL(DBDictionary dict) {\n             hasVal = true;\n         }\n \n-        appendWhere(buf);\n+        appendWhere(buf, dict);\n         return buf.toString();\n     }\n \n@@ -797,14 +798,14 @@ private String getDeleteSQL(DBDictionary dict) {\n         StringBuffer buf = new StringBuffer();\n         buf.append(\"DELETE FROM \").\n             append(dict.getFullName(getTable(), false));\n-        appendWhere(buf);\n+        appendWhere(buf, dict);\n         return buf.toString();\n     }\n \n     /**\n      * Appends the where clause onto the given sql buffer.\n      */\n-    private void appendWhere(StringBuffer buf) {\n+    private void appendWhere(StringBuffer buf, DBDictionary dict) {\n         boolean hasWhere = false;\n         for (int i = 0; i < _cols.length; i++) {\n             if (_vals[getWhereIndex(_cols[i])] == null)\n@@ -815,9 +816,13 @@ private void appendWhere(StringBuffer buf) {\n             else\n                 buf.append(\" AND \");\n \n+            // Get platform specific version column name\n+            if (_cols[i].getVersionStrategy() != null)\n+               buf.append(dict.getVersionColumn(_cols[i], _cols[i]\n+                   .getTableName())).append(\" = ?\");\n             // sqlserver seems to have problems using null parameters in the\n             // where clause\n-            if (_vals[getWhereIndex(_cols[i])] == NULL)\n+            else if (_vals[getWhereIndex(_cols[i])] == NULL)\n                 buf.append(_cols[i]).append(\" IS NULL\");\n             else if (_types[i] == RAW)\n                 buf.append(_cols[i]).append(\" = \").append(_vals[i]);"}]}

