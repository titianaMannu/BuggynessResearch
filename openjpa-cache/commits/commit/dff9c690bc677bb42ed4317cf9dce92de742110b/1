{"sha":"dff9c690bc677bb42ed4317cf9dce92de742110b","node_id":"MDY6Q29tbWl0MjA2MzY0OmRmZjljNjkwYmM2NzdiYjQyZWQ0MzE3Y2Y5ZGNlOTJkZTc0MjExMGI=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-16T03:22:44Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-16T03:22:44Z"},"message":"OPENJPA-1412 Move Eclipse plugin to its own subproject\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@899881 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a49a8fc33fec28d120fff4607b95a6803e833b35","url":"https://api.github.com/repos/apache/openjpa/git/trees/a49a8fc33fec28d120fff4607b95a6803e833b35"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/dff9c690bc677bb42ed4317cf9dce92de742110b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/dff9c690bc677bb42ed4317cf9dce92de742110b","html_url":"https://github.com/apache/openjpa/commit/dff9c690bc677bb42ed4317cf9dce92de742110b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/dff9c690bc677bb42ed4317cf9dce92de742110b/comments","author":null,"committer":null,"parents":[{"sha":"bbc296ba29c2c6dd5620934446fd71c8561db6e4","url":"https://api.github.com/repos/apache/openjpa/commits/bbc296ba29c2c6dd5620934446fd71c8561db6e4","html_url":"https://github.com/apache/openjpa/commit/bbc296ba29c2c6dd5620934446fd71c8561db6e4"}],"stats":{"total":7524,"additions":0,"deletions":7524},"files":[{"sha":"96fec697ff05c40828ec8dff9cadcd74579ee1a8","filename":"contrib/devtools/openjpa-eclipse-testproject/src/test/NotToEnhance.java","status":"removed","additions":0,"deletions":12,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/openjpa-eclipse-testproject/src/test/NotToEnhance.java","raw_url":"https://github.com/apache/openjpa/raw/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/openjpa-eclipse-testproject/src/test/NotToEnhance.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/contrib/devtools/openjpa-eclipse-testproject/src/test/NotToEnhance.java?ref=bbc296ba29c2c6dd5620934446fd71c8561db6e4","patch":"@@ -1,12 +0,0 @@\n-package test;\n-\n-public class NotToEnhance {\n-\n-\t/**\n-\t * @param args\n-\t */\n-\tpublic static void main(String[] args) {\n-\t\tSystem.out.println(\"Hello!\");\n-\t}\n-\n-}"},{"sha":"5360d0d0bd6bfe3b4c1453fade7ce29bc588051e","filename":"contrib/devtools/openjpa-eclipse-testproject/src/test/SomeEntity.java","status":"removed","additions":0,"deletions":8,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/openjpa-eclipse-testproject/src/test/SomeEntity.java","raw_url":"https://github.com/apache/openjpa/raw/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/openjpa-eclipse-testproject/src/test/SomeEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/contrib/devtools/openjpa-eclipse-testproject/src/test/SomeEntity.java?ref=bbc296ba29c2c6dd5620934446fd71c8561db6e4","patch":"@@ -1,8 +0,0 @@\n-package test;\n-\n-import javax.persistence.Entity;\n- \n-@Entity\n-public class SomeEntity { \n-                                                    \n-} "},{"sha":"c5ffbf345f1f77adf46745e84a22a85a3741475b","filename":"contrib/devtools/openjpa-eclipse-testproject/src/test/test/SomeEntityTest.java","status":"removed","additions":0,"deletions":15,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/openjpa-eclipse-testproject/src/test/test/SomeEntityTest.java","raw_url":"https://github.com/apache/openjpa/raw/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/openjpa-eclipse-testproject/src/test/test/SomeEntityTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/contrib/devtools/openjpa-eclipse-testproject/src/test/test/SomeEntityTest.java?ref=bbc296ba29c2c6dd5620934446fd71c8561db6e4","patch":"@@ -1,15 +0,0 @@\n-package test.test;\n-\n-import junit.framework.TestCase;\n-\n-import org.apache.openjpa.enhance.PersistenceCapable;\n-\n-import test.SomeEntity;\n-\n-public class SomeEntityTest extends TestCase {\n-            \n-\tpublic void testEnhancement() {\n-\t\tSomeEntity o = new SomeEntity();\n-\t\tassertTrue(\"SomeEntity is not PersistenceCapable\", o instanceof PersistenceCapable);\n-\t}\n-}"},{"sha":"64f93a9f0b7328eb563aa5ad6cec7f828020e124","filename":"contrib/devtools/org.apache.openjpa.eclipse.feature/build.properties","status":"removed","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse.feature/build.properties","raw_url":"https://github.com/apache/openjpa/raw/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse.feature/build.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/contrib/devtools/org.apache.openjpa.eclipse.feature/build.properties?ref=bbc296ba29c2c6dd5620934446fd71c8561db6e4","patch":"@@ -1 +0,0 @@\n-bin.includes = feature.xml"},{"sha":"e0a7e2c98af9dbf689d4cc7d1305cd50d21d38fd","filename":"contrib/devtools/org.apache.openjpa.eclipse.feature/feature.xml","status":"removed","additions":0,"deletions":44,"changes":44,"blob_url":"https://github.com/apache/openjpa/blob/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse.feature/feature.xml","raw_url":"https://github.com/apache/openjpa/raw/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse.feature/feature.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/contrib/devtools/org.apache.openjpa.eclipse.feature/feature.xml?ref=bbc296ba29c2c6dd5620934446fd71c8561db6e4","patch":"@@ -1,44 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<feature\n-      id=\"org.apache.openjpa.eclipse.feature\"\n-      label=\"OpenJPA Eclipse Feature\"\n-      version=\"1.0.0.qualifier\"\n-      provider-name=\"Michael Vorburger &amp; others, for Apache.org\">\n-\n-   <description url=\"http://www.example.com/description\">\n-      Activates bytecode enhancement for persistence Java classes \n-      during compilation  for OpenJPA applications.\n-   </description>\n-\n-   <copyright url=\"http://www.example.com/copyright\">\n-      Copyright 2009-2019 the original author or authors.\n-   </copyright>\n-\n-   <license url=\"http://www.example.com/license\">\n-      Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);\n-     you may not use this file except in compliance with the License.\n-     You may obtain a copy of the License at\n- \n-       http://www.apache.org/licenses/LICENSE-2.0\n- \n-     Unless required by applicable law or agreed to in writing, software\n-     distributed under the License is distributed on an &quot;AS IS&quot; BASIS,\n-     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-     See the License for the specific language governing permissions and\n-     limitations under the License.\n-   </license>\n-\n-   <plugin\n-         id=\"org.apache.openjpa\"\n-         download-size=\"0\"\n-         install-size=\"0\"\n-         version=\"0.0.0\"\n-         unpack=\"false\"/>\n-\n-   <plugin\n-         id=\"org.apache.openjpa.eclipse\"\n-         download-size=\"0\"\n-         install-size=\"0\"\n-         version=\"0.0.0\"\n-         unpack=\"false\"/>\n-</feature>\n\\ No newline at end of file"},{"sha":"99c7adb79b8ac42451081a41be3552695024c826","filename":"contrib/devtools/org.apache.openjpa.eclipse.feature/pom.xml","status":"removed","additions":0,"deletions":39,"changes":39,"blob_url":"https://github.com/apache/openjpa/blob/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse.feature/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse.feature/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/contrib/devtools/org.apache.openjpa.eclipse.feature/pom.xml?ref=bbc296ba29c2c6dd5620934446fd71c8561db6e4","patch":"@@ -1,39 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<!--\n- Licensed to the Apache Software Foundation (ASF) under one\n- or more contributor license agreements.  See the NOTICE file\n- distributed with this work for additional information\n- regarding copyright ownership.  The ASF licenses this file\n- to you under the Apache License, Version 2.0 (the\n- \"License\"); you may not use this file except in compliance\n- with the License.  You may obtain a copy of the License at\n- \n- http://www.apache.org/licenses/LICENSE-2.0\n- \n- Unless required by applicable law or agreed to in writing,\n- software distributed under the License is distributed on an\n- \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- KIND, either express or implied.  See the License for the\n- specific language governing permissions and limitations\n- under the License.   \n--->\n-<!-- \n-    Maven release plugin requires the project tag to be on a single line. \n--->\n-<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n-    <modelVersion>4.0.0</modelVersion>\n-    <parent>\n-        <artifactId>org.apache.openjpa.eclipse.all</artifactId>\n-        <groupId>org.apache.openjpa.eclipse</groupId>\n-        <version>1.0.0-SNAPSHOT</version>\n-    </parent>\n-    <groupId>org.apache.openjpa.eclipse</groupId>\n-    <artifactId>org.apache.openjpa.eclipse.feature</artifactId>\n-    <version>1.0.0</version>\n-    <packaging>eclipse-feature</packaging>\n-  \n-    <name>OpenJPA Eclipse Plug-in - Feature</name>\n-    <description>\n-        OpenJPA Bytecode Enhancer as OSGi/Eclipse Feature\n-    </description>\n-</project>"},{"sha":"97935e75bbab8a8f5e58cf82d3ac4ae9ed9f3dd5","filename":"contrib/devtools/org.apache.openjpa.eclipse.site/pom.xml","status":"removed","additions":0,"deletions":38,"changes":38,"blob_url":"https://github.com/apache/openjpa/blob/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse.site/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse.site/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/contrib/devtools/org.apache.openjpa.eclipse.site/pom.xml?ref=bbc296ba29c2c6dd5620934446fd71c8561db6e4","patch":"@@ -1,38 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<!--\n- Licensed to the Apache Software Foundation (ASF) under one\n- or more contributor license agreements.  See the NOTICE file\n- distributed with this work for additional information\n- regarding copyright ownership.  The ASF licenses this file\n- to you under the Apache License, Version 2.0 (the\n- \"License\"); you may not use this file except in compliance\n- with the License.  You may obtain a copy of the License at\n- \n- http://www.apache.org/licenses/LICENSE-2.0\n- \n- Unless required by applicable law or agreed to in writing,\n- software distributed under the License is distributed on an\n- \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- KIND, either express or implied.  See the License for the\n- specific language governing permissions and limitations\n- under the License.   \n--->\n-<!-- \n-    Maven release plugin requires the project tag to be on a single line. \n--->\n-<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n-    <modelVersion>4.0.0</modelVersion>\n-    <parent>\n-        <artifactId>org.apache.openjpa.eclipse.all</artifactId>\n-        <groupId>org.apache.openjpa.eclipse</groupId>\n-        <version>1.0.0-SNAPSHOT</version>\n-    </parent>\n-    <groupId>org.apache.openjpa.eclipse</groupId>\n-    <artifactId>org.apache.openjpa.eclipse.site</artifactId>\n-    <version>1.0.0-SNAPSHOT</version>\n-    <packaging>eclipse-update-site</packaging>\n-    <name>OpenJPA Eclipse Plug-in - Update Site</name>\n-    <description>\n-        OpenJPA Bytecode Enhancer Plugin available as local update site.\n-    </description>\n-</project>"},{"sha":"846392233ac9081943f20ba98fa1801883e646db","filename":"contrib/devtools/org.apache.openjpa.eclipse.site/site.xml","status":"removed","additions":0,"deletions":7,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse.site/site.xml","raw_url":"https://github.com/apache/openjpa/raw/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse.site/site.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/contrib/devtools/org.apache.openjpa.eclipse.site/site.xml?ref=bbc296ba29c2c6dd5620934446fd71c8561db6e4","patch":"@@ -1,7 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<site>\n-   <feature url=\"features/org.apache.openjpa.eclipse.feature_1.0.0.qualifier.jar\" id=\"org.apache.openjpa.eclipse.feature\" version=\"1.0.0.qualifier\">\n-      <category name=\"org.apache.openjpa.eclipse\"/>\n-   </feature>\n-   <category-def name=\"org.apache.openjpa.eclipse\" label=\"OpenJPA Eclipse Tools\"/>\n-</site>"},{"sha":"f0ba10651f889bad6c6bc50db1f3c77c9bc079e3","filename":"contrib/devtools/org.apache.openjpa.eclipse.tests/META-INF/MANIFEST.MF","status":"removed","additions":0,"deletions":11,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse.tests/META-INF/MANIFEST.MF","raw_url":"https://github.com/apache/openjpa/raw/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse.tests/META-INF/MANIFEST.MF","contents_url":"https://api.github.com/repos/apache/openjpa/contents/contrib/devtools/org.apache.openjpa.eclipse.tests/META-INF/MANIFEST.MF?ref=bbc296ba29c2c6dd5620934446fd71c8561db6e4","patch":"@@ -1,11 +0,0 @@\n-Manifest-Version: 1.0\n-Bundle-ManifestVersion: 2\n-Bundle-Name: OpenJPA Eclipse Tools Test Fragment\n-Bundle-SymbolicName: org.apache.openjpa.eclipse.tests\n-Bundle-Version: 1.0.0.qualifier\n-Fragment-Host: org.apache.openjpa.eclipse;bundle-version=\"1.0.0\"\n-Bundle-RequiredExecutionEnvironment: JavaSE-1.6\n-Require-Bundle: org.apache.openjpa,\n- org.junit;bundle-version=\"3.8.2\"\n-Bundle-ClassPath: lib/commons-io-1.4.jar,\n- ."},{"sha":"55b149ef15aea0e70aa71ee6261676f8dc93d7c4","filename":"contrib/devtools/org.apache.openjpa.eclipse.tests/build.properties","status":"removed","additions":0,"deletions":5,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse.tests/build.properties","raw_url":"https://github.com/apache/openjpa/raw/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse.tests/build.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/contrib/devtools/org.apache.openjpa.eclipse.tests/build.properties?ref=bbc296ba29c2c6dd5620934446fd71c8561db6e4","patch":"@@ -1,5 +0,0 @@\n-source.. = src/test/java/\n-output.. = target/test-classes/\n-bin.includes = META-INF/,\\\n-               .,\\\n-               lib/commons-io-1.4.jar"},{"sha":"133dc6cb35f5ca2c5920fd0933a557c2def88680","filename":"contrib/devtools/org.apache.openjpa.eclipse.tests/lib/commons-io-1.4.jar","status":"removed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse.tests/lib/commons-io-1.4.jar","raw_url":"https://github.com/apache/openjpa/raw/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse.tests/lib/commons-io-1.4.jar","contents_url":"https://api.github.com/repos/apache/openjpa/contents/contrib/devtools/org.apache.openjpa.eclipse.tests/lib/commons-io-1.4.jar?ref=bbc296ba29c2c6dd5620934446fd71c8561db6e4"},{"sha":"99469c7aa5611c555fba7c663fa4aa9fe15c2aa0","filename":"contrib/devtools/org.apache.openjpa.eclipse.tests/pom.xml","status":"removed","additions":0,"deletions":58,"changes":58,"blob_url":"https://github.com/apache/openjpa/blob/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse.tests/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse.tests/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/contrib/devtools/org.apache.openjpa.eclipse.tests/pom.xml?ref=bbc296ba29c2c6dd5620934446fd71c8561db6e4","patch":"@@ -1,58 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<!--\n- Licensed to the Apache Software Foundation (ASF) under one\n- or more contributor license agreements.  See the NOTICE file\n- distributed with this work for additional information\n- regarding copyright ownership.  The ASF licenses this file\n- to you under the Apache License, Version 2.0 (the\n- \"License\"); you may not use this file except in compliance\n- with the License.  You may obtain a copy of the License at\n- \n- http://www.apache.org/licenses/LICENSE-2.0\n- \n- Unless required by applicable law or agreed to in writing,\n- software distributed under the License is distributed on an\n- \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- KIND, either express or implied.  See the License for the\n- specific language governing permissions and limitations\n- under the License.   \n--->\n-<!-- \n-    Maven release plugin requires the project tag to be on a single line. \n--->\n-<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n-    <modelVersion>4.0.0</modelVersion>\n-    <parent>\n-        <artifactId>org.apache.openjpa.eclipse.all</artifactId>\n-        <groupId>org.apache.openjpa.eclipse</groupId>\n-        <version>1.0.0-SNAPSHOT</version>\n-    </parent>\n-    <groupId>org.apache.openjpa.eclipse</groupId>\n-    <artifactId>org.apache.openjpa.eclipse.tests</artifactId>\n-    <version>1.0.0</version>\n-    <packaging>eclipse-test-plugin</packaging>\n-  \n-    <name>OpenJPA Eclipse Plug-in - Tests</name>\n-    <description>\n-        OpenJPA Bytecode Enhancer Tests\n-    </description>\n-\n-    <build>\n-        <pluginManagement>\n-            <plugins>\n-                <plugin>\n-                    <groupId>org.apache.maven.plugins</groupId>\n-                    <artifactId>maven-surefire-plugin</artifactId>\n-                    <version>2.4.3</version>\n-                    <configuration>\n-                        <argLine>${surefire.jvm.args}</argLine>\n-                        <useFile>false</useFile>\n-                        <trimStackTrace>false</trimStackTrace>\n-                        <useSystemClassLoader>true</useSystemClassLoader>\n-                        <disableXmlReport>true</disableXmlReport>\n-                    </configuration>\n-                </plugin>\n-\t    </plugins>\n-        </pluginManagement>\n-    </build>\n-</project>"},{"sha":"5695e68b0c0a7809213d4041f335ea1de86eed74","filename":"contrib/devtools/org.apache.openjpa.eclipse.tests/src/test/java/org/apache/openjpa/eclipse/EnhancerBuilderTest.java","status":"removed","additions":0,"deletions":150,"changes":150,"blob_url":"https://github.com/apache/openjpa/blob/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse.tests/src/test/java/org/apache/openjpa/eclipse/EnhancerBuilderTest.java","raw_url":"https://github.com/apache/openjpa/raw/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse.tests/src/test/java/org/apache/openjpa/eclipse/EnhancerBuilderTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/contrib/devtools/org.apache.openjpa.eclipse.tests/src/test/java/org/apache/openjpa/eclipse/EnhancerBuilderTest.java?ref=bbc296ba29c2c6dd5620934446fd71c8561db6e4","patch":"@@ -1,150 +0,0 @@\n-/*\n- * Copyright 2002-2009 the original author or authors.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.openjpa.eclipse;\n-\n-import java.io.File;\n-import java.io.IOException;\n-\n-import junit.framework.Assert;\n-import junit.framework.TestCase;\n-\n-import org.apache.commons.io.FileUtils;\n-import org.apache.openjpa.eclipse.util.ClassLoaderFromIProjectHelper;\n-import org.apache.openjpa.enhance.PersistenceCapable;\n-import org.eclipse.core.resources.IFolder;\n-import org.eclipse.core.resources.IMarker;\n-import org.eclipse.core.resources.IProject;\n-import org.eclipse.core.resources.IProjectDescription;\n-import org.eclipse.core.resources.IResource;\n-import org.eclipse.core.resources.IWorkspace;\n-import org.eclipse.core.resources.IncrementalProjectBuilder;\n-import org.eclipse.core.resources.ResourcesPlugin;\n-import org.eclipse.jdt.core.IClasspathEntry;\n-import org.eclipse.jdt.core.IJavaProject;\n-import org.eclipse.jdt.core.IPackageFragment;\n-import org.eclipse.jdt.core.IPackageFragmentRoot;\n-import org.eclipse.jdt.core.JavaCore;\n-import org.eclipse.jdt.core.JavaModelException;\n-\n-/**\n- * PDE Test for OpenJPAEnhancerBuilder.\n- * \n- * Inspired by ClasspathHelperTest, thanks!\n- * Uses same classes and approach as PCEnhancerHelperTest, have a look at that one before this one to better understand.\n- *  \n- * @author Michael Vorburger\n- */\n-public class EnhancerBuilderTest extends TestCase {\n-\n-\t/*\n-\t * TODO EnhancerBuilderTest does not yet work! FIXME!!!  \n-\t * Somehow our Builder doesn't run after all with this test (it works tested standalone of course), why??\n-\t */\n-\n-\tprivate static final String PROJECT_NAME = \"EnhancerBuilderTest\";\n-\tprivate static final String TESTCLASS_PACKAGE = \"org.apache.openjpa.eclipse\";\n-\t\n-\tprivate final static File SRC_PACKAGE_DIR = new File(\"src/test/notonclasspath/\", TESTCLASS_PACKAGE.replace('.', '/'));\n-\t\n-\tprivate IProject project;\n-\n-\t\n-\tprotected void setUp() throws Exception {\n-\t\t\n-\t\tIWorkspace workspace = null;\n-\t\ttry {\n-\t\t\tworkspace = ResourcesPlugin.getWorkspace();\n-\t\t}\n-\t\tcatch (IllegalStateException e) {\n-\t\t\tfail(\"workspace is closed, you are most probably running this as a standalone JUnit Test instead of as an Eclipse PDE Plug-In Test?!\");\n-\t\t}\n-\n-\t\t// create project\n-\t\tproject = workspace.getRoot().getProject(PROJECT_NAME);\n-\t\tproject.create(null);\n-\t\tproject.open(null);\n-\n-\t\t// create source and output folders\n-\t\tIFolder srcFolder = project.getFolder(\"src\");\n-\t\tsrcFolder.create(true, true, null);\n-\t\tIFolder binFolder = project.getFolder(\"bin\");\n-\t\tbinFolder.create(true, true, null);\n-\n-\t\tIProjectDescription desc = project.getDescription();\n-\n-\t\t// Set the Java and OpenJPA natures on the project, \n-\t\t// so that the builders is added and initialized\n-\t\tdesc.setNatureIds(new String[] { JavaCore.NATURE_ID, OpenJPANature.NATURE_ID });\n-\t\tproject.setDescription(desc, null);\n-\n-\t\t// Declare Java source and output folders\n-\t\tIJavaProject javaProject = JavaCore.create(project);\n-\t\tjavaProject.setOutputLocation(binFolder.getFullPath(), null);\n-\t\tIClasspathEntry cpEntry = JavaCore.newSourceEntry(srcFolder.getFullPath());\n-\t\tjavaProject.setRawClasspath(new IClasspathEntry[] { cpEntry }, null);\n-\n-\t\t// create a Java package and a class\n-\t\tIPackageFragmentRoot pkgFragmentRoot = javaProject.getPackageFragmentRoot(srcFolder);\n-\t\tIPackageFragment pkgFragment = pkgFragmentRoot.createPackageFragment(TESTCLASS_PACKAGE, true, null);\n-\t\t\n-\t\t// and copy the same classes already used in the PCEnhancerHelperTest\n-\t\tcopyTestClassToPackage(pkgFragment, \"TestEntity.java\");\n-\t\t// copyTestClassToPackage(pkgFragment, \"NotToEnhance.java\");\n-\t\tjavaProject.save(null, true);\n-\t}\n-\n-\tprivate void copyTestClassToPackage(IPackageFragment pkgFragment, String classFileName) throws IOException, JavaModelException {\n-\t\tFile testEntityFile = new File(SRC_PACKAGE_DIR, classFileName);\n-\t\tString contents = FileUtils.readFileToString(testEntityFile);\n-\t\tpkgFragment.createCompilationUnit(classFileName, contents, true, null);\n-\t}\n-\n-\tprotected void tearDown() throws Exception {\n-\t\tproject.delete(true, null);\n-\t}\n-\n-\tpublic void testNoop() {}\n-\t\n-\t// NOTE: This currently fails, see TODO at the beginning of the class...\n-\tpublic void todotestBuilder() throws Exception {\n-\t\tproject.build(IncrementalProjectBuilder.FULL_BUILD, null);\n-\t\t// TODO INCREMENTAL and FULL_BUILD\n-\t\t\n-\t\tIMarker[] markers = project.findMarkers(null, true, IResource.DEPTH_INFINITE);\n-\t\tif (markers.length != 0) {\n-\t\t\tfor (IMarker marker : markers) {\n-\t\t\t\tSystem.err.print(marker.getAttribute(IMarker.LOCATION) + \" : \");\n-\t\t\t\tSystem.err.println(marker.getAttribute(IMarker.MESSAGE));\n-\t\t\t}\n-\t\t\tfail(\"Project Build unexpectedly lead to Markers (printed to stderr for debugging)\");\n-\t\t}\n-\n-\t\tString classFileName = \"bin/\" + TESTCLASS_PACKAGE.replace('.', '/') + \"/TestEntity.class\";\n-\t\tassertTrue(classFileName + \" does not exist?!\", project.getFile(classFileName).exists());\n-\t\t// assertTrue(project.getFile(\"bin/\" + TESTCLASS_PACKAGE.replace('.', '/') + \"NotToEnhance.class\").exists());\n-\t\t\n-\t\tClassLoader cl = ClassLoaderFromIProjectHelper.createClassLoader(project);\n-\t\tassertNotNull(cl);\n-\t\t\n-\t\tClass<?> testClass = cl.loadClass(TESTCLASS_PACKAGE + \".\" + \"TestEntity\");\n-\t\tAssert.assertNotNull(testClass);\n-\t\tassertEquals(\"TestEntity\", testClass.getSimpleName());\n-\t\tAssert.assertEquals(1, testClass.getInterfaces().length);\n-\t\tAssert.assertTrue(testClass.getInterfaces()[0].equals(PersistenceCapable.class));\n-\t}\n-\n-}"},{"sha":"2a09a083a8016fda671f0ca64c59d86f1d2649b6","filename":"contrib/devtools/org.apache.openjpa.eclipse.tests/src/test/java/org/apache/openjpa/eclipse/util/ClasspathHelperTest.java","status":"removed","additions":0,"deletions":110,"changes":110,"blob_url":"https://github.com/apache/openjpa/blob/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse.tests/src/test/java/org/apache/openjpa/eclipse/util/ClasspathHelperTest.java","raw_url":"https://github.com/apache/openjpa/raw/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse.tests/src/test/java/org/apache/openjpa/eclipse/util/ClasspathHelperTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/contrib/devtools/org.apache.openjpa.eclipse.tests/src/test/java/org/apache/openjpa/eclipse/util/ClasspathHelperTest.java?ref=bbc296ba29c2c6dd5620934446fd71c8561db6e4","patch":"@@ -1,110 +0,0 @@\n-/*\n- * Copyright 2002-2009 the original author or authors.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.openjpa.eclipse.util;\n-\n-import java.io.InputStream;\n-\n-import junit.framework.TestCase;\n-\n-import org.apache.commons.io.IOUtils;\n-import org.eclipse.core.resources.IFolder;\n-import org.eclipse.core.resources.IProject;\n-import org.eclipse.core.resources.IProjectDescription;\n-import org.eclipse.core.resources.IWorkspace;\n-import org.eclipse.core.resources.IncrementalProjectBuilder;\n-import org.eclipse.core.resources.ResourcesPlugin;\n-import org.eclipse.jdt.core.IClasspathEntry;\n-import org.eclipse.jdt.core.IJavaProject;\n-import org.eclipse.jdt.core.IPackageFragment;\n-import org.eclipse.jdt.core.IPackageFragmentRoot;\n-import org.eclipse.jdt.core.JavaCore;\n-\n-/**\n- * PDE Test for ClasspathHelper.\n- *\n- * @author Kai Kreuzer\n- */\n-public class ClasspathHelperTest extends TestCase {\n-\n-\tprivate static final String PROJECT_NAME = \"test\";\n-\tprivate static final String TESTCLASS_PACKAGE = \"com.odcgroup.test\";\n-\tprivate static final String TESTCLASS_NAME = \"TestClass\";\n-\n-\tprivate IProject project;\n-\n-\tprotected void setUp() throws Exception {\n-\t\t\n-\t\tIWorkspace workspace = null;\n-\t\ttry {\n-\t\t\tworkspace = ResourcesPlugin.getWorkspace();\n-\t\t}\n-\t\tcatch (IllegalStateException e) {\n-\t\t\tfail(\"workspace is closed, you are most probably running this as a standalone JUnit Test instead of as an Eclipse PDE Plug-In Test?!\");\n-\t\t}\n-\n-\t\t// create project\n-\t\tproject = workspace.getRoot().getProject(PROJECT_NAME);\n-\t\tproject.create(null);\n-\t\tproject.open(null);\n-\n-\t\t// create source and output folders\n-\t\tIFolder srcFolder = project.getFolder(\"src\");\n-\t\tsrcFolder.create(true, true, null);\n-\t\tIFolder binFolder = project.getFolder(\"bin\");\n-\t\tbinFolder.create(true, true, null);\n-\n-\t\t// Set the Java nature on the project, so that the builder is added and initialized\n-\t\tIProjectDescription desc = workspace.newProjectDescription(PROJECT_NAME);\n-\t\tdesc.setNatureIds(new String[] { JavaCore.NATURE_ID });\n-\t\tproject.setDescription(desc, null);\n-\n-\t\t// Declare Java source and output folders\n-\t\tIJavaProject javaProject = JavaCore.create(project);\n-\t\tjavaProject.setOutputLocation(binFolder.getFullPath(), null);\n-\t\tIClasspathEntry cpEntry = JavaCore.newSourceEntry(srcFolder.getFullPath());\n-\t\tjavaProject.setRawClasspath(new IClasspathEntry[] { cpEntry }, null);\n-\n-\t\t// create a Java package and a class\n-\t\tIPackageFragmentRoot pkgFragmentRoot = javaProject.getPackageFragmentRoot(srcFolder);\n-\t\tIPackageFragment pkgFragment = pkgFragmentRoot.createPackageFragment(TESTCLASS_PACKAGE, true, null);\n-\t\tInputStream is = Thread.currentThread().getContextClassLoader().getResourceAsStream(\n-\t\t\t\t\"/com/odcgroup/classpath/demo/tests/resources/testclasscontent.txt\");\n-\t\tString contents = IOUtils.toString(is);\n-\t\tpkgFragment.createCompilationUnit(TESTCLASS_NAME + \".java\", contents, true, null);\n-\t\tjavaProject.save(null, true);\n-\t}\n-\n-\tprotected void tearDown() throws Exception {\n-\t\tproject.delete(true, null);\n-\t}\n-\n-\tpublic void testCreateClassLoader() throws Exception {\n-\t\tproject.build(IncrementalProjectBuilder.INCREMENTAL_BUILD, null);\n-\t\t\n-\t\tassertTrue(\"Class file has not been built\", project.getFile(\"bin/com/odcgroup/test/TestClass.class\").exists());\n-\t\t\n-\t\tClassLoader cl = ClassLoaderFromIProjectHelper.createClassLoader(project);\n-\t\tassertNotNull(cl);\n-\t\ttry {\n-\t\t\tClass<?> clazz = cl.loadClass(TESTCLASS_PACKAGE + \".\" + TESTCLASS_NAME);\n-\t\t\tassertEquals(TESTCLASS_NAME, clazz.getSimpleName());\n-\t\t} catch (ClassNotFoundException e) {\n-\t\t\tfail(\"Cannot find test class through classloader\");\n-\t\t}\n-\t}\n-\n-}"},{"sha":"886aa277b1770764e03c21f9f02d17fdbbd4ae44","filename":"contrib/devtools/org.apache.openjpa.eclipse.tests/src/test/java/org/apache/openjpa/eclipse/util/PCEnhancerHelperTest.java","status":"removed","additions":0,"deletions":80,"changes":80,"blob_url":"https://github.com/apache/openjpa/blob/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse.tests/src/test/java/org/apache/openjpa/eclipse/util/PCEnhancerHelperTest.java","raw_url":"https://github.com/apache/openjpa/raw/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse.tests/src/test/java/org/apache/openjpa/eclipse/util/PCEnhancerHelperTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/contrib/devtools/org.apache.openjpa.eclipse.tests/src/test/java/org/apache/openjpa/eclipse/util/PCEnhancerHelperTest.java?ref=bbc296ba29c2c6dd5620934446fd71c8561db6e4","patch":"@@ -1,80 +0,0 @@\n-/*\n- * Copyright 2002-2009 the original author or authors.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.openjpa.eclipse.util;\n-\n-import java.io.File;\n-import java.net.URL;\n-import java.net.URLClassLoader;\n-\n-import junit.framework.Assert;\n-import junit.framework.TestCase;\n-\n-import org.apache.commons.io.FileUtils;\n-import org.apache.openjpa.enhance.PersistenceCapable;\n-\n-/**\n- * Test for PCEnhancerHelper implementations.\n- *\n- * @author Michael Vorburger\n- */\n-public class PCEnhancerHelperTest extends TestCase {\n-\t\n-\tprivate final static File srcDir = new File(\"src/test/notonclasspath/\");\n-\tprivate final static File targetDir = new File(\"target/PCEnhancerHelperTest\");\n-\tprivate final static String classPackage = \"org.apache.openjpa.eclipse.\"; \n-\t\n-\tpublic void todotestEnhanceFile() throws Exception {\n-\t\tString className = \"TestEntity\";\n-\t\t\n-\t\tURL[] urls = new URL[] { targetDir.toURI().toURL() };\n-\t\tClassLoader classLoader = new URLClassLoader(urls);\n-\t\tPCEnhancerHelper eh = new PCEnhancerHelperImpl(classLoader);\n-\t\tboolean r = checkEnhance(eh, className);\n-\t\tAssert.assertTrue(r); // was enhanced..\n-\n-\t\t// Reset/re-initialize classLoader, to freshly load and check the enhanced class\n-\t\tclassLoader = new URLClassLoader(urls);\n-\t\tClass<?> testClass = classLoader.loadClass(classPackage + className);\n-\t\tAssert.assertNotNull(testClass);\n-\t\tAssert.assertEquals(1, testClass.getInterfaces().length);\n-\t\tAssert.assertTrue(testClass.getInterfaces()[0].equals(PersistenceCapable.class));\n-\t}\n-\t\n-\tpublic void testEnhancingAClassThatIsNotAnEntity() throws Exception {\n-\t    if (true)\n-\t        return;\n-\t\tString className = \"NotToEnhance\";\n-\t\t\n-\t\tClassLoader classLoader = new URLClassLoader(new URL[] { targetDir.toURI().toURL() });\n-\t\tPCEnhancerHelper eh = new PCEnhancerHelperImpl(classLoader);\n-\t\tboolean r = checkEnhance(eh, className);\n-\t\tAssert.assertFalse(r); // NOT enhanced!\n-\t}\n-\t\n-\tprivate boolean checkEnhance(PCEnhancerHelper eh, String classNameToCheck) throws Exception {\n-\t\tString classFileName = classPackage.replace('.', '/') + classNameToCheck + \".class\";\n-\t\t\n-\t\tFileUtils.forceMkdir(targetDir);\n-\t\tFileUtils.cleanDirectory(targetDir);\n-\t\tFileUtils.copyFileToDirectory(new File(srcDir, classFileName), \n-\t\t        new File(targetDir, classPackage.replace('.', '/')));\n-\t\tFile classFile = new File(targetDir, classFileName);\n-\t\tassertTrue(classFile.exists());\n-\t\t\n-\t\treturn eh.enhance(classFile);\n-\t}\n-}"},{"sha":"3904c3bdca7fd12136318a31a37d99af1bf48d2b","filename":"contrib/devtools/org.apache.openjpa.eclipse.tests/src/test/java/org/apache/openjpa/eclipse/util/PathMatcherUtilTest.java","status":"removed","additions":0,"deletions":53,"changes":53,"blob_url":"https://github.com/apache/openjpa/blob/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse.tests/src/test/java/org/apache/openjpa/eclipse/util/PathMatcherUtilTest.java","raw_url":"https://github.com/apache/openjpa/raw/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse.tests/src/test/java/org/apache/openjpa/eclipse/util/PathMatcherUtilTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/contrib/devtools/org.apache.openjpa.eclipse.tests/src/test/java/org/apache/openjpa/eclipse/util/PathMatcherUtilTest.java?ref=bbc296ba29c2c6dd5620934446fd71c8561db6e4","patch":"@@ -1,53 +0,0 @@\n-/*\n- * Copyright 2002-2009 the original author or authors.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.openjpa.eclipse.util;\n-\n-import java.util.Properties;\n-\n-import junit.framework.TestCase;\n-\n-/**\n- * Test for PathMatcherUtil. \n- * \n- * @author Michael Vorburger (MVO)\n- */\n-public class PathMatcherUtilTest extends TestCase {\n-\n-\t/**\n-\t * Test method for {@link org.apache.openjpa.eclipse.util.PathMatcherUtil#match(java.lang.String)}.\n-\t */\n-\tpublic void testPathMatcherUtil() {\n-\t\tProperties p = new Properties();\n-\t\tp.setProperty(\"include1\", \"**/*Entity.class\");\n-\t\tp.setProperty(\"include2\", \"**/*EntityRef.class\");\n-\t\tPathMatcherUtil o = new PathMatcherUtil(p);\n-\t\t\n-\t\tassertTrue(o.match(\"asdjflaskdf/asdkfmasdlfk/asdklfmasdlf/SomeEntity.class\"));\n-\t\tassertTrue(o.match(\"asdjflaskdf/asdkfmasdlfk/asdklfmasdlf/SomeEntityRef.class\"));\n-\t\tassertFalse(o.match(\"asdjflaskdf/asdkfmasdlfk/asdklfmasdlf/ThisEntityIsNot.class\"));\n-\t\tassertFalse(o.match(\"asdjflaskdf/asdkfmasdlfk/asdklfmasdlf/SomethingElse.class\"));\n-\t}\n-\n-\tpublic void testPathMatcherUtilWithNull() {\n-\t\tPathMatcherUtil o = new PathMatcherUtil(null);\n-\n-\t\tassertTrue(o.match(\"asdjflaskdf/asdkfmasdlfk/asdklfmasdlf/SomeEntity.class\"));\n-\t\tassertTrue(o.match(\"asdjflaskdf/asdkfmasdlfk/asdklfmasdlf/SomeEntity.Refclass\"));\n-\t\tassertTrue(o.match(\"asdjflaskdf/asdkfmasdlfk/asdklfmasdlf/ThisEntityIsNot.class\"));\n-\t\tassertTrue(o.match(\"asdjflaskdf/asdkfmasdlfk/asdklfmasdlf/SomethingElse.class\"));\n-}\n-}"},{"sha":"244eca183ce2660afbf20cb32c44e4bd478b2d66","filename":"contrib/devtools/org.apache.openjpa.eclipse.tests/src/test/notonclasspath/META-INF/persistence.xml","status":"removed","additions":0,"deletions":9,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse.tests/src/test/notonclasspath/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse.tests/src/test/notonclasspath/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/contrib/devtools/org.apache.openjpa.eclipse.tests/src/test/notonclasspath/META-INF/persistence.xml?ref=bbc296ba29c2c6dd5620934446fd71c8561db6e4","patch":"@@ -1,9 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<persistence version=\"1.0\" xmlns=\"http://java.sun.com/xml/ns/persistence\"\n-\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n-\txsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd\">\n-\n-\t<persistence-unit name=\"testpu\">\n-\t\t<class>org.apache.openjpa.eclipse.TestEntity</class>\n-\t</persistence-unit>\n-</persistence>"},{"sha":"96fec697ff05c40828ec8dff9cadcd74579ee1a8","filename":"contrib/devtools/org.apache.openjpa.eclipse.tests/src/test/notonclasspath/org/apache/openjpa/eclipse/NotToEnhance.java","status":"removed","additions":0,"deletions":12,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse.tests/src/test/notonclasspath/org/apache/openjpa/eclipse/NotToEnhance.java","raw_url":"https://github.com/apache/openjpa/raw/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse.tests/src/test/notonclasspath/org/apache/openjpa/eclipse/NotToEnhance.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/contrib/devtools/org.apache.openjpa.eclipse.tests/src/test/notonclasspath/org/apache/openjpa/eclipse/NotToEnhance.java?ref=bbc296ba29c2c6dd5620934446fd71c8561db6e4","patch":"@@ -1,12 +0,0 @@\n-package test;\n-\n-public class NotToEnhance {\n-\n-\t/**\n-\t * @param args\n-\t */\n-\tpublic static void main(String[] args) {\n-\t\tSystem.out.println(\"Hello!\");\n-\t}\n-\n-}"},{"sha":"c9dc8eec130e750ebe3d94b35051b587a650c8ee","filename":"contrib/devtools/org.apache.openjpa.eclipse.tests/src/test/notonclasspath/org/apache/openjpa/eclipse/TestEntity.java","status":"removed","additions":0,"deletions":22,"changes":22,"blob_url":"https://github.com/apache/openjpa/blob/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse.tests/src/test/notonclasspath/org/apache/openjpa/eclipse/TestEntity.java","raw_url":"https://github.com/apache/openjpa/raw/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse.tests/src/test/notonclasspath/org/apache/openjpa/eclipse/TestEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/contrib/devtools/org.apache.openjpa.eclipse.tests/src/test/notonclasspath/org/apache/openjpa/eclipse/TestEntity.java?ref=bbc296ba29c2c6dd5620934446fd71c8561db6e4","patch":"@@ -1,22 +0,0 @@\n-package org.apache.openjpa.eclipse;\n-\n-import javax.persistence.Entity;\n-import javax.persistence.Id;\n-\n-/**\n- * Test JPA Entity.\n- */\n-@Entity\n-public class TestEntity {\n-\n-\t@Id\n-\tprivate long id;\n-\t\n-\tprivate String name;\n-\n-    // ----------------------------------------------------------------------\n-    \n-\tpublic String getName() {\n-\t\treturn name;\n-\t}\n-}"},{"sha":"667d73137917e8ab51c924a7b9e7c38c19cec605","filename":"contrib/devtools/org.apache.openjpa.eclipse.tests/src/test/resources/com/odcgroup/classpath/demo/tests/resources/testclasscontent.txt","status":"removed","additions":0,"deletions":8,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse.tests/src/test/resources/com/odcgroup/classpath/demo/tests/resources/testclasscontent.txt","raw_url":"https://github.com/apache/openjpa/raw/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse.tests/src/test/resources/com/odcgroup/classpath/demo/tests/resources/testclasscontent.txt","contents_url":"https://api.github.com/repos/apache/openjpa/contents/contrib/devtools/org.apache.openjpa.eclipse.tests/src/test/resources/com/odcgroup/classpath/demo/tests/resources/testclasscontent.txt?ref=bbc296ba29c2c6dd5620934446fd71c8561db6e4","patch":"@@ -1,8 +0,0 @@\n-package com.odcgroup.test;\n-\n-public class TestClass {\n-\n-\tpublic String toString() {\n-\t\treturn \"This class is totally useless\";\n-\t}\n-}"},{"sha":"de23fad2b96cc4595956eb261aefbfe8d4ae93ef","filename":"contrib/devtools/org.apache.openjpa.eclipse/LICENSE.txt","status":"removed","additions":0,"deletions":380,"changes":380,"blob_url":"https://github.com/apache/openjpa/blob/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse/LICENSE.txt","raw_url":"https://github.com/apache/openjpa/raw/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse/LICENSE.txt","contents_url":"https://api.github.com/repos/apache/openjpa/contents/contrib/devtools/org.apache.openjpa.eclipse/LICENSE.txt?ref=bbc296ba29c2c6dd5620934446fd71c8561db6e4","patch":"@@ -1,380 +0,0 @@\n-\n-                                 Apache License\n-                           Version 2.0, January 2004\n-                        http://www.apache.org/licenses/\n-\n-   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n-\n-   1. Definitions.\n-\n-      \"License\" shall mean the terms and conditions for use, reproduction,\n-      and distribution as defined by Sections 1 through 9 of this document.\n-\n-      \"Licensor\" shall mean the copyright owner or entity authorized by\n-      the copyright owner that is granting the License.\n-\n-      \"Legal Entity\" shall mean the union of the acting entity and all\n-      other entities that control, are controlled by, or are under common\n-      control with that entity. For the purposes of this definition,\n-      \"control\" means (i) the power, direct or indirect, to cause the\n-      direction or management of such entity, whether by contract or\n-      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n-      outstanding shares, or (iii) beneficial ownership of such entity.\n-\n-      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n-      exercising permissions granted by this License.\n-\n-      \"Source\" form shall mean the preferred form for making modifications,\n-      including but not limited to software source code, documentation\n-      source, and configuration files.\n-\n-      \"Object\" form shall mean any form resulting from mechanical\n-      transformation or translation of a Source form, including but\n-      not limited to compiled object code, generated documentation,\n-      and conversions to other media types.\n-\n-      \"Work\" shall mean the work of authorship, whether in Source or\n-      Object form, made available under the License, as indicated by a\n-      copyright notice that is included in or attached to the work\n-      (an example is provided in the Appendix below).\n-\n-      \"Derivative Works\" shall mean any work, whether in Source or Object\n-      form, that is based on (or derived from) the Work and for which the\n-      editorial revisions, annotations, elaborations, or other modifications\n-      represent, as a whole, an original work of authorship. For the purposes\n-      of this License, Derivative Works shall not include works that remain\n-      separable from, or merely link (or bind by name) to the interfaces of,\n-      the Work and Derivative Works thereof.\n-\n-      \"Contribution\" shall mean any work of authorship, including\n-      the original version of the Work and any modifications or additions\n-      to that Work or Derivative Works thereof, that is intentionally\n-      submitted to Licensor for inclusion in the Work by the copyright owner\n-      or by an individual or Legal Entity authorized to submit on behalf of\n-      the copyright owner. For the purposes of this definition, \"submitted\"\n-      means any form of electronic, verbal, or written communication sent\n-      to the Licensor or its representatives, including but not limited to\n-      communication on electronic mailing lists, source code control systems,\n-      and issue tracking systems that are managed by, or on behalf of, the\n-      Licensor for the purpose of discussing and improving the Work, but\n-      excluding communication that is conspicuously marked or otherwise\n-      designated in writing by the copyright owner as \"Not a Contribution.\"\n-\n-      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n-      on behalf of whom a Contribution has been received by Licensor and\n-      subsequently incorporated within the Work.\n-\n-   2. Grant of Copyright License. Subject to the terms and conditions of\n-      this License, each Contributor hereby grants to You a perpetual,\n-      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n-      copyright license to reproduce, prepare Derivative Works of,\n-      publicly display, publicly perform, sublicense, and distribute the\n-      Work and such Derivative Works in Source or Object form.\n-\n-   3. Grant of Patent License. Subject to the terms and conditions of\n-      this License, each Contributor hereby grants to You a perpetual,\n-      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n-      (except as stated in this section) patent license to make, have made,\n-      use, offer to sell, sell, import, and otherwise transfer the Work,\n-      where such license applies only to those patent claims licensable\n-      by such Contributor that are necessarily infringed by their\n-      Contribution(s) alone or by combination of their Contribution(s)\n-      with the Work to which such Contribution(s) was submitted. If You\n-      institute patent litigation against any entity (including a\n-      cross-claim or counterclaim in a lawsuit) alleging that the Work\n-      or a Contribution incorporated within the Work constitutes direct\n-      or contributory patent infringement, then any patent licenses\n-      granted to You under this License for that Work shall terminate\n-      as of the date such litigation is filed.\n-\n-   4. Redistribution. You may reproduce and distribute copies of the\n-      Work or Derivative Works thereof in any medium, with or without\n-      modifications, and in Source or Object form, provided that You\n-      meet the following conditions:\n-\n-      (a) You must give any other recipients of the Work or\n-          Derivative Works a copy of this License; and\n-\n-      (b) You must cause any modified files to carry prominent notices\n-          stating that You changed the files; and\n-\n-      (c) You must retain, in the Source form of any Derivative Works\n-          that You distribute, all copyright, patent, trademark, and\n-          attribution notices from the Source form of the Work,\n-          excluding those notices that do not pertain to any part of\n-          the Derivative Works; and\n-\n-      (d) If the Work includes a \"NOTICE\" text file as part of its\n-          distribution, then any Derivative Works that You distribute must\n-          include a readable copy of the attribution notices contained\n-          within such NOTICE file, excluding those notices that do not\n-          pertain to any part of the Derivative Works, in at least one\n-          of the following places: within a NOTICE text file distributed\n-          as part of the Derivative Works; within the Source form or\n-          documentation, if provided along with the Derivative Works; or,\n-          within a display generated by the Derivative Works, if and\n-          wherever such third-party notices normally appear. The contents\n-          of the NOTICE file are for informational purposes only and\n-          do not modify the License. You may add Your own attribution\n-          notices within Derivative Works that You distribute, alongside\n-          or as an addendum to the NOTICE text from the Work, provided\n-          that such additional attribution notices cannot be construed\n-          as modifying the License.\n-\n-      You may add Your own copyright statement to Your modifications and\n-      may provide additional or different license terms and conditions\n-      for use, reproduction, or distribution of Your modifications, or\n-      for any such Derivative Works as a whole, provided Your use,\n-      reproduction, and distribution of the Work otherwise complies with\n-      the conditions stated in this License.\n-\n-   5. Submission of Contributions. Unless You explicitly state otherwise,\n-      any Contribution intentionally submitted for inclusion in the Work\n-      by You to the Licensor shall be under the terms and conditions of\n-      this License, without any additional terms or conditions.\n-      Notwithstanding the above, nothing herein shall supersede or modify\n-      the terms of any separate license agreement you may have executed\n-      with Licensor regarding such Contributions.\n-\n-   6. Trademarks. This License does not grant permission to use the trade\n-      names, trademarks, service marks, or product names of the Licensor,\n-      except as required for reasonable and customary use in describing the\n-      origin of the Work and reproducing the content of the NOTICE file.\n-\n-   7. Disclaimer of Warranty. Unless required by applicable law or\n-      agreed to in writing, Licensor provides the Work (and each\n-      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n-      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n-      implied, including, without limitation, any warranties or conditions\n-      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n-      PARTICULAR PURPOSE. You are solely responsible for determining the\n-      appropriateness of using or redistributing the Work and assume any\n-      risks associated with Your exercise of permissions under this License.\n-\n-   8. Limitation of Liability. In no event and under no legal theory,\n-      whether in tort (including negligence), contract, or otherwise,\n-      unless required by applicable law (such as deliberate and grossly\n-      negligent acts) or agreed to in writing, shall any Contributor be\n-      liable to You for damages, including any direct, indirect, special,\n-      incidental, or consequential damages of any character arising as a\n-      result of this License or out of the use or inability to use the\n-      Work (including but not limited to damages for loss of goodwill,\n-      work stoppage, computer failure or malfunction, or any and all\n-      other commercial damages or losses), even if such Contributor\n-      has been advised of the possibility of such damages.\n-\n-   9. Accepting Warranty or Additional Liability. While redistributing\n-      the Work or Derivative Works thereof, You may choose to offer,\n-      and charge a fee for, acceptance of support, warranty, indemnity,\n-      or other liability obligations and/or rights consistent with this\n-      License. However, in accepting such obligations, You may act only\n-      on Your own behalf and on Your sole responsibility, not on behalf\n-      of any other Contributor, and only if You agree to indemnify,\n-      defend, and hold each Contributor harmless for any liability\n-      incurred by, or claims asserted against, such Contributor by reason\n-      of your accepting any such warranty or additional liability.\n-\n-   END OF TERMS AND CONDITIONS\n-\n-   APPENDIX: How to apply the Apache License to your work.\n-\n-      To apply the Apache License to your work, attach the following\n-      boilerplate notice, with the fields enclosed by brackets \"[]\"\n-      replaced with your own identifying information. (Don't include\n-      the brackets!)  The text should be enclosed in the appropriate\n-      comment syntax for the file format. We also recommend that a\n-      file or class name and description of purpose be included on the\n-      same \"printed page\" as the copyright notice for easier\n-      identification within third-party archives.\n-\n-   Copyright [yyyy] [name of copyright owner]\n-\n-   Licensed under the Apache License, Version 2.0 (the \"License\");\n-   you may not use this file except in compliance with the License.\n-   You may obtain a copy of the License at\n-\n-       http://www.apache.org/licenses/LICENSE-2.0\n-\n-   Unless required by applicable law or agreed to in writing, software\n-   distributed under the License is distributed on an \"AS IS\" BASIS,\n-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-   See the License for the specific language governing permissions and\n-   limitations under the License.\n-\n-\n-======================================\n-  LICENSES FOR INCLUDED DEPENDENCIES\n-======================================\n-\n-All the source code for the OpenJPA project is released under the\n-license above. Additionally, the OpenJPA binary distribution\n-includes a number of third-party files that are required in\n-order to the software to function. Unless noted below, these jars\n-and resource files are also released under the ASF license above.\n-\n-The exceptions are as follows:\n-\n-===========================\n-  orm-xsd.rsrc - included in the openjpa jar, taken from:\n-    http://java.sun.com/xml/ns/persistence/orm_1_0.xsd)\n-  persistence-xsd.rsrc - included in the openjpa jar, taken from:\n-    http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd)\n-  websphere-uow-api.jar - this jar file contains WebSphere proprietary\n-    API code which is licensed for use when compiling OpenJPA. The\n-    jar is not distributed with OpenJPA and is only included with the\n-    source archive in order to resolve compilation dependencies. \n-===========================\n-\n-COMMON DEVELOPMENT AND DISTRIBUTION LICENSE (CDDL) Version 1.0\n-\n-1. Definitions.\n-\n-1.1. Contributor means each individual or entity that creates or contributes to the creation of Modifications.\n-\n-1.2. Contributor Version means the combination of the Original Software, prior Modifications used by a Contributor (if any), and the Modifications made by that particular Contributor.\n-\n-1.3. Covered Software means (a) the Original Software, or (b) Modifications, or (c) the combination of files containing Original Software with files containing Modifications, in each case including portions thereof.\n-\n-1.4. Executable means the Covered Software in any form other than Source Code.\n-\n-1.5. Initial Developer means the individual or entity that first makes Original Software available under this License.\n-\n-1.6. Larger Work means a work which combines Covered Software or portions thereof with code not governed by the terms of this License.\n-\n-1.7. License means this document.\n-\n-1.8. Licensable means having the right to grant, to the maximum extent possible, whether at the time of the initial grant or subsequently acquired, any and all of the rights conveyed herein.\n-\n-1.9. Modifications means the Source Code and Executable form of any of the following:\n-\n-A. Any file that results from an addition to, deletion from or modification of the contents of a file containing Original Software or previous Modifications;\n-\n-B. Any new file that contains any part of the Original Software or previous Modification; or\n-\n-C. Any new file that is contributed or otherwise made available under the terms of this License.\n-\n-1.10. Original Software means the Source Code and Executable form of computer software code that is originally released under this License.\n-\n-1.11. Patent Claims means any patent claim(s), now owned or hereafter acquired, including without limitation, method, process, and apparatus claims, in any patent Licensable by grantor.\n-\n-1.12. Source Code means (a) the common form of computer software code in which modifications are made and (b) associated documentation included in or with such code.\n-\n-1.13. You (or Your) means an individual or a legal entity exercising rights under, and complying with all of the terms of, this License. For legal entities, You includes any entity which controls, is controlled by, or is under common control with You. For purposes of this definition, control means (a)�the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (b)�ownership of more than fifty percent (50%) of the outstanding shares or beneficial ownership of such entity.\n-\n-2. License Grants.\n-\n-2.1. The Initial Developer Grant.\n-Conditioned upon Your compliance with Section 3.1 below and subject to third party intellectual property claims, the Initial Developer hereby grants You a world-wide, royalty-free, non-exclusive license:\n-(a) under intellectual property rights (other than patent or trademark) Licensable by Initial Developer, to use, reproduce, modify, display, perform, sublicense and distribute the Original Software (or portions thereof), with or without Modifications, and/or as part of a Larger Work; and\n-(b) under Patent Claims infringed by the making, using or selling of Original Software, to make, have made, use, practice, sell, and offer for sale, and/or otherwise dispose of the Original Software (or portions thereof).\n-(c) The licenses granted in Sections�2.1(a) and (b) are effective on the date Initial Developer first distributes or otherwise makes the Original Software available to a third party under the terms of this License.\n-(d) Notwithstanding Section�2.1(b) above, no patent license is granted: (1)�for code that You delete from the Original Software, or (2)�for infringements caused by: (i)�the modification of the Original Software, or (ii)�the combination of the Original Software with other software or devices.\n-\n-2.2. Contributor Grant.\n-Conditioned upon Your compliance with Section 3.1 below and subject to third party intellectual property claims, each Contributor hereby grants You a world-wide, royalty-free, non-exclusive license:\n-(a) under intellectual property rights (other than patent or trademark) Licensable by Contributor to use, reproduce, modify, display, perform, sublicense and distribute the Modifications created by such Contributor (or portions thereof), either on an unmodified basis, with other Modifications, as Covered Software and/or as part of a Larger Work; and\n-(b) under Patent Claims infringed by the making, using, or selling of Modifications made by that Contributor either alone and/or in combination with its Contributor Version (or portions of such combination), to make, use, sell, offer for sale, have made, and/or otherwise dispose of: (1)�Modifications made by that Contributor (or portions thereof); and (2)�the combination of Modifications made by that Contributor with its Contributor Version (or portions of such combination).\n-(c) The licenses granted in Sections�2.2(a) and 2.2(b) are effective on the date Contributor first distributes or otherwise makes the Modifications available to a third party.\n-(d) Notwithstanding Section�2.2(b) above, no patent license is granted: (1)�for any code that Contributor has deleted from the Contributor Version; (2)�for infringements caused by: (i)�third party modifications of Contributor Version, or (ii)�the combination of Modifications made by that Contributor with other software (except as part of the Contributor Version) or other devices; or (3)�under Patent Claims infringed by Covered Software in the absence of Modifications made by that Contributor.\n-\n-3. Distribution Obligations.\n-\n-3.1. Availability of Source Code.\n-\n-Any Covered Software that You distribute or otherwise make available in Executable form must also be made available in Source Code form and that Source Code form must be distributed only under the terms of this License. You must include a copy of this License with every copy of the Source Code form of the Covered Software You distribute or otherwise make available. You must inform recipients of any such Covered Software in Executable form as to how they can obtain such Covered Software in Source Code form in a reasonable manner on or through a medium customarily used for software exchange.\n-\n-3.2. Modifications.\n-\n-The Modifications that You create or to which You contribute are governed by the terms of this License. You represent that You believe Your Modifications are Your original creation(s) and/or You have sufficient rights to grant the rights conveyed by this License.\n-\n-3.3. Required Notices.\n-You must include a notice in each of Your Modifications that identifies You as the Contributor of the Modification. You may not remove or alter any copyright, patent or trademark notices contained within the Covered Software, or any notices of licensing or any descriptive text giving attribution to any Contributor or the Initial Developer.\n-\n-3.4. Application of Additional Terms.\n-You may not offer or impose any terms on any Covered Software in Source Code form that alters or restricts the applicable version of this License or the recipients rights hereunder. You may choose to offer, and to charge a fee for, warranty, support, indemnity or liability obligations to one or more recipients of Covered Software. However, you may do so only on Your own behalf, and not on behalf of the Initial Developer or any Contributor. You must make it absolutely clear that any such warranty, support, indemnity or liability obligation is offered by You alone, and You hereby agree to indemnify the Initial Developer and every Contributor for any liability incurred by the Initial Developer or such Contributor as a result of warranty, support, indemnity or liability terms You offer.\n-\n-3.5. Distribution of Executable Versions.\n-You may distribute the Executable form of the Covered Software under the terms of this License or under the terms of a license of Your choice, which may contain terms different from this License, provided that You are in compliance with the terms of this License and that the license for the Executable form does not attempt to limit or alter the recipients rights in the Source Code form from the rights set forth in this License. If You distribute the Covered Software in Executable form under a different license, You must make it absolutely clear that any terms which differ from this License are offered by You alone, not by the Initial Developer or Contributor. You hereby agree to indemnify the Initial Developer and every Contributor for any liability incurred by the Initial Developer or such Contributor as a result of any such terms You offer.\n-\n-3.6. Larger Works.\n-You may create a Larger Work by combining Covered Software with other code not governed by the terms of this License and distribute the Larger Work as a single product. In such a case, You must make sure the requirements of this License are fulfilled for the Covered Software.\n-\n-4. Versions of the License.\n-\n-4.1. New Versions.\n-Sun Microsystems, Inc. is the initial license steward and may publish revised and/or new versions of this License from time to time. Each version will be given a distinguishing version number. Except as provided in Section 4.3, no one other than the license steward has the right to modify this License.\n-\n-4.2. Effect of New Versions.\n-\n-You may always continue to use, distribute or otherwise make the Covered Software available under the terms of the version of the License under which You originally received the Covered Software. If the Initial Developer includes a notice in the Original Software prohibiting it from being distributed or otherwise made available under any subsequent version of the License, You must distribute and make the Covered Software available under the terms of the version of the License under which You originally received the Covered Software. Otherwise, You may also choose to use, distribute or otherwise make the Covered Software available under the terms of any subsequent version of the License published by the license steward.\n-4.3. Modified Versions.\n-\n-When You are an Initial Developer and You want to create a new license for Your Original Software, You may create and use a modified version of this License if You: (a)�rename the license and remove any references to the name of the license steward (except to note that the license differs from this License); and (b)�otherwise make it clear that the license contains terms which differ from this License.\n-\n-5. DISCLAIMER OF WARRANTY.\n-\n-COVERED SOFTWARE IS PROVIDED UNDER THIS LICENSE ON AN AS IS BASIS, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, WITHOUT LIMITATION, WARRANTIES THAT THE COVERED SOFTWARE IS FREE OF DEFECTS, MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE OR NON-INFRINGING. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE COVERED SOFTWARE IS WITH YOU. SHOULD ANY COVERED SOFTWARE PROVE DEFECTIVE IN ANY RESPECT, YOU (NOT THE INITIAL DEVELOPER OR ANY OTHER CONTRIBUTOR) ASSUME THE COST OF ANY NECESSARY SERVICING, REPAIR OR CORRECTION. THIS DISCLAIMER OF WARRANTY CONSTITUTES AN ESSENTIAL PART OF THIS LICENSE. NO USE OF ANY COVERED SOFTWARE IS AUTHORIZED HEREUNDER EXCEPT UNDER THIS DISCLAIMER.\n-\n-6. TERMINATION.\n-\n-6.1. This License and the rights granted hereunder will terminate automatically if You fail to comply with terms herein and fail to cure such breach within 30 days of becoming aware of the breach. Provisions which, by their nature, must remain in effect beyond the termination of this License shall survive.\n-\n-6.2. If You assert a patent infringement claim (excluding declaratory judgment actions) against Initial Developer or a Contributor (the Initial Developer or Contributor against whom You assert such claim is referred to as Participant) alleging that the Participant Software (meaning the Contributor Version where the Participant is a Contributor or the Original Software where the Participant is the Initial Developer) directly or indirectly infringes any patent, then any and all rights granted directly or indirectly to You by such Participant, the Initial Developer (if the Initial Developer is not the Participant) and all Contributors under Sections�2.1 and/or 2.2 of this License shall, upon 60 days notice from Participant terminate prospectively and automatically at the expiration of such 60 day notice period, unless if within such 60 day period You withdraw Your claim with respect to the Participant Software against such Participant either unilaterally or pursuant to a written agreement with Participant.\n-\n-6.3. In the event of termination under Sections�6.1 or 6.2 above, all end user licenses that have been validly granted by You or any distributor hereunder prior to termination (excluding licenses granted to You by any distributor) shall survive termination.\n-\n-7. LIMITATION OF LIABILITY.\n-\n-UNDER NO CIRCUMSTANCES AND UNDER NO LEGAL THEORY, WHETHER TORT (INCLUDING NEGLIGENCE), CONTRACT, OR OTHERWISE, SHALL YOU, THE INITIAL DEVELOPER, ANY OTHER CONTRIBUTOR, OR ANY DISTRIBUTOR OF COVERED SOFTWARE, OR ANY SUPPLIER OF ANY OF SUCH PARTIES, BE LIABLE TO ANY PERSON FOR ANY INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES OF ANY CHARACTER INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOST PROFITS, LOSS OF GOODWILL, WORK STOPPAGE, COMPUTER FAILURE OR MALFUNCTION, OR ANY AND ALL OTHER COMMERCIAL DAMAGES OR LOSSES, EVEN IF SUCH PARTY SHALL HAVE BEEN INFORMED OF THE POSSIBILITY OF SUCH DAMAGES. THIS LIMITATION OF LIABILITY SHALL NOT APPLY TO LIABILITY FOR DEATH OR PERSONAL INJURY RESULTING FROM SUCH PARTYS NEGLIGENCE TO THE EXTENT APPLICABLE LAW PROHIBITS SUCH LIMITATION. SOME JURISDICTIONS DO NOT ALLOW THE EXCLUSION OR LIMITATION OF INCIDENTAL OR CONSEQUENTIAL DAMAGES, SO THIS EXCLUSION AND LIMITATION MAY NOT APPLY TO YOU.\n-\n-8. U.S. GOVERNMENT END USERS.\n-\n-The Covered Software is a commercial item, as that term is defined in 48�C.F.R.�2.101 (Oct. 1995), consisting of commercial computer software (as that term is defined at 48 C.F.R. �252.227-7014(a)(1)) and commercial computer software documentation as such terms are used in 48�C.F.R.�12.212 (Sept. 1995). Consistent with 48 C.F.R. 12.212 and 48 C.F.R. 227.7202-1 through 227.7202-4 (June 1995), all U.S. Government End Users acquire Covered Software with only those rights set forth herein. This U.S. Government Rights clause is in lieu of, and supersedes, any other FAR, DFAR, or other clause or provision that addresses Government rights in computer software under this License.\n-\n-9. MISCELLANEOUS.\n-\n-This License represents the complete agreement concerning subject matter hereof. If any provision of this License is held to be unenforceable, such provision shall be reformed only to the extent necessary to make it enforceable. This License shall be governed by the law of the jurisdiction specified in a notice contained within the Original Software (except to the extent applicable law, if any, provides otherwise), excluding such jurisdictions conflict-of-law provisions. Any litigation relating to this License shall be subject to the jurisdiction of the courts located in the jurisdiction and venue specified in a notice contained within the Original Software, with the losing party responsible for costs, including, without limitation, court costs and reasonable attorneys fees and expenses. The application of the United Nations Convention on Contracts for the International Sale of Goods is expressly excluded. Any law or regulation which provides that the language of a contract shall be construed against the drafter shall not apply to this License. You agree that You alone are responsible for compliance with the United States export administration regulations (and the export control laws and regulation of any other countries) when You use, distribute or otherwise make available any Covered Software.\n-\n-10. RESPONSIBILITY FOR CLAIMS.\n-\n-As between Initial Developer and the Contributors, each party is responsible for claims and damages arising, directly or indirectly, out of its utilization of rights under this License and You agree to work with Initial Developer and Contributors to distribute such responsibility on an equitable basis. Nothing herein is intended or shall be deemed to constitute any admission of liability.\n-\n-NOTICE PURSUANT TO SECTION 9 OF THE COMMON DEVELOPMENT AND DISTRIBUTION LICENSE (CDDL)\n-The GlassFish code released under the CDDL shall be governed by the laws of the State of California (excluding conflict-of-law provisions). Any litigation relating to this License shall be subject to the jurisdiction of the Federal Courts of the Northern District of California and the state courts of the State of California, with venue lying in Santa Clara County, California. \n-\n-\n-===================\n-  serp-1.11.0.jar\n-===================\n-\n-Copyright (c) 2002-2006, A. Abram White\n-All rights reserved.\n-\n-Redistribution and use in source and binary forms, with or without \n-modification, are permitted provided that the following conditions are met:\n-\n-* Redistributions of source code must retain the above copyright notice, this \n-  list of conditions and the following disclaimer.\n-* Redistributions in binary form must reproduce the above copyright notice, \n-  this list of conditions and the following disclaimer in the documentation \n-  and/or other materials provided with the distribution.\n-* Neither the name of 'serp' nor the names of its contributors may\n-  be used to endorse or promote products derived from this software without \n-  specific prior written permission.\n-\n-THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n-ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED \n-WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE \n-DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n-ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES \n-(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; \n-LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON \n-ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT \n-(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS \n-SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n-\n-\n-\n-\n-\n-"},{"sha":"7cdcdaca324fbfecd06de92a16c2d0a9c6141523","filename":"contrib/devtools/org.apache.openjpa.eclipse/META-INF/MANIFEST.MF","status":"removed","additions":0,"deletions":16,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse/META-INF/MANIFEST.MF","raw_url":"https://github.com/apache/openjpa/raw/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse/META-INF/MANIFEST.MF","contents_url":"https://api.github.com/repos/apache/openjpa/contents/contrib/devtools/org.apache.openjpa.eclipse/META-INF/MANIFEST.MF?ref=bbc296ba29c2c6dd5620934446fd71c8561db6e4","patch":"@@ -1,16 +0,0 @@\n-Manifest-Version: 1.0\n-Bundle-ManifestVersion: 2\n-Bundle-Name: OpenJPA Eclipse Plug-in\n-Bundle-SymbolicName: org.apache.openjpa.eclipse; singleton:=true\n-Bundle-Version: 1.0.0.qualifier\n-Bundle-Activator: org.apache.openjpa.eclipse.Activator\n-Require-Bundle: org.eclipse.ui,\n- org.eclipse.core.runtime,\n- org.eclipse.core.resources,\n- org.apache.openjpa,\n- org.eclipse.jdt.core;bundle-version=\"3.3\",\n- org.eclipse.jdt.launching;bundle-version=\"3.3\"\n-Bundle-ClassPath: .\n-Eclipse-LazyStart: true\n-Bundle-RequiredExecutionEnvironment: JavaSE-1.6\n-Import-Package: org.apache.commons.lang"},{"sha":"aaee99eba745286519ea59da7965626245ae68f2","filename":"contrib/devtools/org.apache.openjpa.eclipse/NOTICE.txt","status":"removed","additions":0,"deletions":21,"changes":21,"blob_url":"https://github.com/apache/openjpa/blob/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse/NOTICE.txt","raw_url":"https://github.com/apache/openjpa/raw/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse/NOTICE.txt","contents_url":"https://api.github.com/repos/apache/openjpa/contents/contrib/devtools/org.apache.openjpa.eclipse/NOTICE.txt?ref=bbc296ba29c2c6dd5620934446fd71c8561db6e4","patch":"@@ -1,21 +0,0 @@\n-   =========================================================================\n-   ==  NOTICE file corresponding to the section 4 d of                    ==\n-   ==  the Apache License, Version 2.0,                                   ==\n-   ==  in this case for the Apache OpenJPA distribution.                  ==\n-   =========================================================================\n-\n-   This product includes software developed by\n-   The Apache Software Foundation (http://www.apache.org/).\n-\n-COPYRIGHT NOTICES\n-\n-* OpenJPA includes software developed by the SERP project\n-    Copyright (c) 2002-2006, A. Abram White. All rights reserved.\n-\n-* OpenJPA is bundled with the binaries from the JPA specification, by\n-    Sun Microsystems and licensed under the CDDL 1.0. The source code is\n-    available at: https://glassfish.dev.java.net/source/browse/glassfish/\n-\n-* OpenJPA includes software written by Miroslav Nachev\n-\n-* OpenJPA uses test code written by Charles Tillman."},{"sha":"0b80b667758708e50db8cdd8becbecbde29110d7","filename":"contrib/devtools/org.apache.openjpa.eclipse/TODO-Doc.txt","status":"removed","additions":0,"deletions":50,"changes":50,"blob_url":"https://github.com/apache/openjpa/blob/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse/TODO-Doc.txt","raw_url":"https://github.com/apache/openjpa/raw/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse/TODO-Doc.txt","contents_url":"https://api.github.com/repos/apache/openjpa/contents/contrib/devtools/org.apache.openjpa.eclipse/TODO-Doc.txt?ref=bbc296ba29c2c6dd5620934446fd71c8561db6e4","patch":"@@ -1,50 +0,0 @@\n-\n-These are some rough notes on what kind of doc should be written up on some e.g. Wiki page once this is accepted and published:\n-\n-* Installation\n-\n-* Usage\n-\n-* Configuration via .project:\n-\t<buildCommand>\n-\t\t\t<name>org.apache.openjpa.eclipse.OpenJPAEnhancerBuilder</name>\n-\t\t\t<arguments>\n-\t\t\t\t<dictionary>\n-\t\t\t\t\t<key>debugLogs</key>\n-\t\t\t\t\t<value>false</value>\n-\t\t\t\t</dictionary>\n-\t\t\t\t<dictionary>\n-\t\t\t\t\t<key>include1</key>\n-\t\t\t\t\t<value>**/*Entity.class</value>\n-\t\t\t\t</dictionary>\n-\t\t\t\t<dictionary>\n-\t\t\t\t\t<key>include2</key>\n-\t\t\t\t\t<value>**/*EntityRef.class</value>\n-\t\t\t\t</dictionary>\n-\n-* debugLogs true causes stuff to show up in the Error Log view, but it\n-seems to slow things down and something goes wrong with the Progress view and the Monitor stuff,\n-it doesn't update correctly anymore, and keeps running.  So only intended for investigating problems.\n-\n-* DOC: No support for persistence.xml, only based on @Entity Annotations\n-\n-*  see http://people.apache.org/~ppoddar/eclipse/\n-\n-* FAQ / Troubleshooting\n-\t* something like \"-XX:PermSize=64m -XX:MaxPermSize=256m -Xms128m -Xmx512m\" is typically needed...\n-\n-* OpenJPA documentation chapter on enhancement should reference this plug-in/doc?\n-\n-* Link from http://webspherepersistence.blogspot.com/2009/02/openjpa-enhancement.html\n-\n-* Known Limitations / Ideas for Extensions\n-\t* persistence.xml instead annotations\n-\t\n-\t* Builder must not run on / skip classes which are red / have other compilation issues.. (is there a .class file in these cases? apparently.. or is that a left-over?)\n-\t \n-\t* Error Marker is on .class resource (normal..), how can we make it on the 'corresponding' (?) .java instead?\n-\t\n-\t* Adding supported enhancement flags (e.g. -addDefaultConstructor etc.) in a preference page. \n-\n-\n-Michael Vorburger, 3.12.2009"},{"sha":"a143a7c78959651109ad35ba555ee5315b1d4a2d","filename":"contrib/devtools/org.apache.openjpa.eclipse/build.properties","status":"removed","additions":0,"deletions":6,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse/build.properties","raw_url":"https://github.com/apache/openjpa/raw/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse/build.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/contrib/devtools/org.apache.openjpa.eclipse/build.properties?ref=bbc296ba29c2c6dd5620934446fd71c8561db6e4","patch":"@@ -1,6 +0,0 @@\n-source.. = src/main/java/\n-output.. = target/classes/\n-bin.includes = plugin.xml,\\\n-               META-INF/,\\\n-               .\n-src.includes = src/"},{"sha":"67dae1140925523d2eedac080d033a7da109040d","filename":"contrib/devtools/org.apache.openjpa.eclipse/openjpa-eclipse App.launch","status":"removed","additions":0,"deletions":29,"changes":29,"blob_url":"https://github.com/apache/openjpa/blob/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse/openjpa-eclipse%20App.launch","raw_url":"https://github.com/apache/openjpa/raw/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse/openjpa-eclipse%20App.launch","contents_url":"https://api.github.com/repos/apache/openjpa/contents/contrib/devtools/org.apache.openjpa.eclipse/openjpa-eclipse%20App.launch?ref=bbc296ba29c2c6dd5620934446fd71c8561db6e4","patch":"@@ -1,29 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\r\n-<launchConfiguration type=\"org.eclipse.pde.ui.RuntimeWorkbench\">\r\n-<booleanAttribute key=\"append.args\" value=\"true\"/>\r\n-<booleanAttribute key=\"askclear\" value=\"true\"/>\r\n-<booleanAttribute key=\"automaticAdd\" value=\"true\"/>\r\n-<booleanAttribute key=\"automaticValidate\" value=\"true\"/>\r\n-<stringAttribute key=\"bootstrap\" value=\"\"/>\r\n-<stringAttribute key=\"checked\" value=\"[NONE]\"/>\r\n-<booleanAttribute key=\"clearConfig\" value=\"false\"/>\r\n-<booleanAttribute key=\"clearws\" value=\"false\"/>\r\n-<booleanAttribute key=\"clearwslog\" value=\"true\"/>\r\n-<stringAttribute key=\"configLocation\" value=\"${workspace_loc}/.metadata/.plugins/org.eclipse.pde.core/openjpa-eclipse App\"/>\r\n-<booleanAttribute key=\"default\" value=\"false\"/>\r\n-<booleanAttribute key=\"includeOptional\" value=\"true\"/>\r\n-<stringAttribute key=\"location\" value=\"${workspace_loc}/openjpa-eclipse-testproject-workspace\"/>\r\n-<stringAttribute key=\"org.eclipse.jdt.launching.PROGRAM_ARGUMENTS\" value=\"-os ${target.os} -ws ${target.ws} -arch ${target.arch} -nl ${target.nl}\"/>\r\n-<stringAttribute key=\"org.eclipse.jdt.launching.SOURCE_PATH_PROVIDER\" value=\"org.eclipse.pde.ui.workbenchClasspathProvider\"/>\r\n-<stringAttribute key=\"org.eclipse.jdt.launching.VM_ARGUMENTS\" value=\"-XX:PermSize=64m -XX:MaxPermSize=256m -Xms128m -Xmx512m\"/>\r\n-<stringAttribute key=\"pde.version\" value=\"3.3\"/>\r\n-<stringAttribute key=\"product\" value=\"org.eclipse.platform.ide\"/>\r\n-<stringAttribute key=\"selected_target_plugins\" value=\"ch.ethz.iks.r_osgi.remote,ch.ethz.iks.slp,com.ibm.icu,com.ibm.icu.source,com.jcraft.jsch,com.jprofiler.integrations.eclipse,javax.servlet,javax.servlet.jsp,javax.servlet.jsp.source,javax.servlet.source,javax.xml,org.apache.ant,org.apache.ant.source,org.apache.commons.codec,org.apache.commons.el,org.apache.commons.el.source,org.apache.commons.httpclient,org.apache.commons.lang,org.apache.commons.logging,org.apache.commons.logging.source,org.apache.jasper,org.apache.jasper.source,org.apache.lucene,org.apache.lucene.analysis,org.apache.lucene.analysis.source,org.apache.lucene.source,org.apache.xerces,org.apache.xml.resolver,org.apache.xml.serializer,org.eclipse.ant.core,org.eclipse.ant.core.source,org.eclipse.ant.ui,org.eclipse.ant.ui.source,org.eclipse.compare,org.eclipse.compare.source,org.eclipse.core.boot,org.eclipse.core.commands,org.eclipse.core.commands.source,org.eclipse.core.contenttype,org.eclipse.core.contenttype.source,org.eclipse.core.databinding,org.eclipse.core.databinding.beans,org.eclipse.core.databinding.beans.source,org.eclipse.core.databinding.source,org.eclipse.core.expressions,org.eclipse.core.expressions.source,org.eclipse.core.filebuffers,org.eclipse.core.filebuffers.source,org.eclipse.core.filesystem,org.eclipse.core.filesystem.source,org.eclipse.core.filesystem.win32.x86,org.eclipse.core.jobs,org.eclipse.core.jobs.source,org.eclipse.core.net,org.eclipse.core.net.source,org.eclipse.core.net.win32.x86,org.eclipse.core.resources,org.eclipse.core.resources.compatibility,org.eclipse.core.resources.compatibility.source,org.eclipse.core.resources.source,org.eclipse.core.resources.win32.x86,org.eclipse.core.runtime,org.eclipse.core.runtime.compatibility,org.eclipse.core.runtime.compatibility.auth,org.eclipse.core.runtime.compatibility.auth.source,org.eclipse.core.runtime.compatibility.registry,org.eclipse.core.runtime.compatibility.registry.source,org.eclipse.core.runtime.compatibility.source,org.eclipse.core.runtime.source,org.eclipse.core.variables,org.eclipse.core.variables.source,org.eclipse.cvs,org.eclipse.cvs.source,org.eclipse.debug.core,org.eclipse.debug.core.source,org.eclipse.debug.ui,org.eclipse.debug.ui.source,org.eclipse.draw2d,org.eclipse.ecf,org.eclipse.ecf.core.source,org.eclipse.ecf.datashare,org.eclipse.ecf.discovery,org.eclipse.ecf.discovery.ui,org.eclipse.ecf.doc,org.eclipse.ecf.docshare,org.eclipse.ecf.example.clients,org.eclipse.ecf.example.collab,org.eclipse.ecf.example.collab.editor,org.eclipse.ecf.examples.remoteservices.client,org.eclipse.ecf.examples.remoteservices.common,org.eclipse.ecf.examples.remoteservices.server,org.eclipse.ecf.examples.source,org.eclipse.ecf.examples.updatesite.client,org.eclipse.ecf.examples.updatesite.server,org.eclipse.ecf.filetransfer,org.eclipse.ecf.filetransfer.ui,org.eclipse.ecf.identity,org.eclipse.ecf.presence,org.eclipse.ecf.presence.bot,org.eclipse.ecf.presence.collab.ui,org.eclipse.ecf.presence.ui,org.eclipse.ecf.protocol.bittorrent,org.eclipse.ecf.protocol.msn,org.eclipse.ecf.provider,org.eclipse.ecf.provider.bittorrent,org.eclipse.ecf.provider.bittorrent.ui,org.eclipse.ecf.provider.datashare,org.eclipse.ecf.provider.discovery,org.eclipse.ecf.provider.filetransfer,org.eclipse.ecf.provider.filetransfer.efs,org.eclipse.ecf.provider.filetransfer.scp,org.eclipse.ecf.provider.filetransfer.ssl,org.eclipse.ecf.provider.irc,org.eclipse.ecf.provider.irc.ui,org.eclipse.ecf.provider.jmdns,org.eclipse.ecf.provider.jslp,org.eclipse.ecf.provider.msn,org.eclipse.ecf.provider.msn.ui,org.eclipse.ecf.provider.r_osgi,org.eclipse.ecf.provider.remoteservice,org.eclipse.ecf.provider.ui,org.eclipse.ecf.provider.xmpp,org.eclipse.ecf.provider.xmpp.ui,org.eclipse.ecf.remoteservice,org.eclipse.ecf.remoteservice.ui,org.eclipse.ecf.server,org.eclipse.ecf.server.generic,org.eclipse.ecf.sharedobject,org.eclipse.ecf.ssl,org.eclipse.ecf.storage,org.eclipse.ecf.sync,org.eclipse.ecf.telephony.call,org.eclipse.ecf.telephony.call.ui,org.eclipse.ecf.ui,org.eclipse.emf.common,org.eclipse.emf.common.ui,org.eclipse.emf.ecore,org.eclipse.emf.ecore.change,org.eclipse.emf.ecore.change.edit,org.eclipse.emf.ecore.edit,org.eclipse.emf.ecore.xmi,org.eclipse.emf.edit,org.eclipse.emf.edit.ui,org.eclipse.epp.usagedata.gathering,org.eclipse.epp.usagedata.recording,org.eclipse.epp.usagedata.ui,org.eclipse.equinox.app,org.eclipse.equinox.app.source,org.eclipse.equinox.common,org.eclipse.equinox.common.source,org.eclipse.equinox.frameworkadmin,org.eclipse.equinox.frameworkadmin.equinox,org.eclipse.equinox.frameworkadmin.equinox.source,org.eclipse.equinox.frameworkadmin.source,org.eclipse.equinox.http.jetty,org.eclipse.equinox.http.jetty.source,org.eclipse.equinox.http.registry,org.eclipse.equinox.http.registry.source,org.eclipse.equinox.http.servlet,org.eclipse.equinox.http.servlet.source,org.eclipse.equinox.jsp.jasper,org.eclipse.equinox.jsp.jasper.registry,org.eclipse.equinox.jsp.jasper.registry.source,org.eclipse.equinox.jsp.jasper.source,org.eclipse.equinox.launcher,org.eclipse.equinox.launcher.source,org.eclipse.equinox.launcher.win32.win32.x86,org.eclipse.equinox.p2.artifact.repository,org.eclipse.equinox.p2.artifact.repository.source,org.eclipse.equinox.p2.console,org.eclipse.equinox.p2.console.source,org.eclipse.equinox.p2.core,org.eclipse.equinox.p2.core.source,org.eclipse.equinox.p2.director,org.eclipse.equinox.p2.director.app,org.eclipse.equinox.p2.director.app.source,org.eclipse.equinox.p2.director.source,org.eclipse.equinox.p2.directorywatcher,org.eclipse.equinox.p2.directorywatcher.source,org.eclipse.equinox.p2.engine,org.eclipse.equinox.p2.engine.source,org.eclipse.equinox.p2.exemplarysetup,org.eclipse.equinox.p2.exemplarysetup.source,org.eclipse.equinox.p2.extensionlocation,org.eclipse.equinox.p2.extensionlocation.source,org.eclipse.equinox.p2.garbagecollector,org.eclipse.equinox.p2.garbagecollector.source,org.eclipse.equinox.p2.jarprocessor,org.eclipse.equinox.p2.jarprocessor.source,org.eclipse.equinox.p2.metadata,org.eclipse.equinox.p2.metadata.generator,org.eclipse.equinox.p2.metadata.generator.source,org.eclipse.equinox.p2.metadata.repository,org.eclipse.equinox.p2.metadata.repository.source,org.eclipse.equinox.p2.metadata.source,org.eclipse.equinox.p2.reconciler.dropins,org.eclipse.equinox.p2.reconciler.dropins.source,org.eclipse.equinox.p2.touchpoint.eclipse,org.eclipse.equinox.p2.touchpoint.eclipse.source,org.eclipse.equinox.p2.touchpoint.natives,org.eclipse.equinox.p2.touchpoint.natives.source,org.eclipse.equinox.p2.ui,org.eclipse.equinox.p2.ui.sdk,org.eclipse.equinox.p2.ui.sdk.source,org.eclipse.equinox.p2.ui.source,org.eclipse.equinox.p2.updatechecker,org.eclipse.equinox.p2.updatechecker.source,org.eclipse.equinox.p2.updatesite,org.eclipse.equinox.p2.updatesite.source,org.eclipse.equinox.preferences,org.eclipse.equinox.preferences.source,org.eclipse.equinox.registry,org.eclipse.equinox.registry.source,org.eclipse.equinox.security,org.eclipse.equinox.security.source,org.eclipse.equinox.security.ui,org.eclipse.equinox.security.ui.source,org.eclipse.equinox.security.win32.x86,org.eclipse.equinox.security.win32.x86.source,org.eclipse.equinox.simpleconfigurator,org.eclipse.equinox.simpleconfigurator.manipulator,org.eclipse.equinox.simpleconfigurator.manipulator.source,org.eclipse.equinox.simpleconfigurator.source,org.eclipse.gef,org.eclipse.help,org.eclipse.help.appserver,org.eclipse.help.appserver.source,org.eclipse.help.base,org.eclipse.help.base.source,org.eclipse.help.source,org.eclipse.help.ui,org.eclipse.help.ui.source,org.eclipse.help.webapp,org.eclipse.help.webapp.source,org.eclipse.jdt,org.eclipse.jdt.apt.core,org.eclipse.jdt.apt.core.source,org.eclipse.jdt.apt.pluggable.core,org.eclipse.jdt.apt.pluggable.core.source,org.eclipse.jdt.apt.ui,org.eclipse.jdt.apt.ui.source,org.eclipse.jdt.compiler.apt,org.eclipse.jdt.compiler.apt.source,org.eclipse.jdt.compiler.tool,org.eclipse.jdt.compiler.tool.source,org.eclipse.jdt.core,org.eclipse.jdt.core.manipulation,org.eclipse.jdt.core.manipulation.source,org.eclipse.jdt.core.source,org.eclipse.jdt.debug,org.eclipse.jdt.debug.source,org.eclipse.jdt.debug.ui,org.eclipse.jdt.debug.ui.source,org.eclipse.jdt.doc.isv,org.eclipse.jdt.doc.user,org.eclipse.jdt.junit,org.eclipse.jdt.junit.runtime,org.eclipse.jdt.junit.runtime.source,org.eclipse.jdt.junit.source,org.eclipse.jdt.junit4.runtime,org.eclipse.jdt.junit4.runtime.source,org.eclipse.jdt.launching,org.eclipse.jdt.launching.source,org.eclipse.jdt.source,org.eclipse.jdt.ui,org.eclipse.jdt.ui.source,org.eclipse.jem.util,org.eclipse.jface,org.eclipse.jface.databinding,org.eclipse.jface.databinding.source,org.eclipse.jface.source,org.eclipse.jface.text,org.eclipse.jface.text.source,org.eclipse.jsch.core,org.eclipse.jsch.core.source,org.eclipse.jsch.ui,org.eclipse.jsch.ui.source,org.eclipse.ltk.core.refactoring,org.eclipse.ltk.core.refactoring.source,org.eclipse.ltk.ui.refactoring,org.eclipse.ltk.ui.refactoring.source,org.eclipse.mylyn,org.eclipse.mylyn.bugzilla.core,org.eclipse.mylyn.bugzilla.ide,org.eclipse.mylyn.bugzilla.ui,org.eclipse.mylyn.commons.core,org.eclipse.mylyn.commons.net,org.eclipse.mylyn.commons.ui,org.eclipse.mylyn.compatibility,org.eclipse.mylyn.context.core,org.eclipse.mylyn.context.ui,org.eclipse.mylyn.help.ui,org.eclipse.mylyn.ide.ant,org.eclipse.mylyn.ide.ui,org.eclipse.mylyn.java.tasks,org.eclipse.mylyn.java.ui,org.eclipse.mylyn.monitor.core,org.eclipse.mylyn.monitor.ui,org.eclipse.mylyn.pde.ui,org.eclipse.mylyn.resources.ui,org.eclipse.mylyn.tasks.bugs,org.eclipse.mylyn.tasks.core,org.eclipse.mylyn.tasks.ui,org.eclipse.mylyn.team.cvs,org.eclipse.mylyn.team.ui,org.eclipse.osgi,org.eclipse.osgi.services,org.eclipse.osgi.services.source,org.eclipse.osgi.source,org.eclipse.osgi.util,org.eclipse.osgi.util.source,org.eclipse.pde,org.eclipse.pde.api.tools,org.eclipse.pde.api.tools.source,org.eclipse.pde.api.tools.ui,org.eclipse.pde.api.tools.ui.source,org.eclipse.pde.build,org.eclipse.pde.build.source,org.eclipse.pde.core,org.eclipse.pde.core.source,org.eclipse.pde.doc.user,org.eclipse.pde.junit.runtime,org.eclipse.pde.junit.runtime.source,org.eclipse.pde.p2.ui,org.eclipse.pde.p2.ui.source,org.eclipse.pde.runtime,org.eclipse.pde.runtime.source,org.eclipse.pde.source,org.eclipse.pde.ui,org.eclipse.pde.ui.source,org.eclipse.pde.ui.templates,org.eclipse.pde.ui.templates.source,org.eclipse.platform,org.eclipse.platform.doc.isv,org.eclipse.platform.doc.user,org.eclipse.platform.source,org.eclipse.rcp,org.eclipse.rcp.source,org.eclipse.sdk,org.eclipse.search,org.eclipse.search.source,org.eclipse.swt,org.eclipse.swt.win32.win32.x86,org.eclipse.swt.win32.win32.x86.source,org.eclipse.team.core,org.eclipse.team.core.source,org.eclipse.team.cvs.core,org.eclipse.team.cvs.core.source,org.eclipse.team.cvs.ssh,org.eclipse.team.cvs.ssh.source,org.eclipse.team.cvs.ssh2,org.eclipse.team.cvs.ssh2.source,org.eclipse.team.cvs.ui,org.eclipse.team.cvs.ui.source,org.eclipse.team.ui,org.eclipse.team.ui.source,org.eclipse.text,org.eclipse.text.source,org.eclipse.ui,org.eclipse.ui.browser,org.eclipse.ui.browser.source,org.eclipse.ui.cheatsheets,org.eclipse.ui.cheatsheets.source,org.eclipse.ui.console,org.eclipse.ui.console.source,org.eclipse.ui.editors,org.eclipse.ui.editors.source,org.eclipse.ui.externaltools,org.eclipse.ui.externaltools.source,org.eclipse.ui.forms,org.eclipse.ui.forms.source,org.eclipse.ui.ide,org.eclipse.ui.ide.application,org.eclipse.ui.ide.application.source,org.eclipse.ui.ide.source,org.eclipse.ui.intro,org.eclipse.ui.intro.source,org.eclipse.ui.intro.universal,org.eclipse.ui.intro.universal.source,org.eclipse.ui.navigator,org.eclipse.ui.navigator.resources,org.eclipse.ui.navigator.resources.source,org.eclipse.ui.navigator.source,org.eclipse.ui.net,org.eclipse.ui.net.source,org.eclipse.ui.presentations.r21,org.eclipse.ui.presentations.r21.source,org.eclipse.ui.source,org.eclipse.ui.views,org.eclipse.ui.views.log,org.eclipse.ui.views.log.source,org.eclipse.ui.views.properties.tabbed,org.eclipse.ui.views.properties.tabbed.source,org.eclipse.ui.views.source,org.eclipse.ui.win32,org.eclipse.ui.win32.source,org.eclipse.ui.workbench,org.eclipse.ui.workbench.compatibility,org.eclipse.ui.workbench.compatibility.source,org.eclipse.ui.workbench.source,org.eclipse.ui.workbench.texteditor,org.eclipse.ui.workbench.texteditor.source,org.eclipse.update.configurator,org.eclipse.update.configurator.source,org.eclipse.update.core,org.eclipse.update.core.source,org.eclipse.update.core.win32,org.eclipse.update.core.win32.source,org.eclipse.update.scheduler,org.eclipse.update.scheduler.source,org.eclipse.update.ui,org.eclipse.update.ui.source,org.eclipse.wst.command.env,org.eclipse.wst.command.env.core,org.eclipse.wst.command.env.infopop,org.eclipse.wst.command.env.ui,org.eclipse.wst.common.core,org.eclipse.wst.common.emf,org.eclipse.wst.common.emfworkbench.integration,org.eclipse.wst.common.environment,org.eclipse.wst.common.frameworks,org.eclipse.wst.common.frameworks.ui,org.eclipse.wst.common.infopop,org.eclipse.wst.common.modulecore,org.eclipse.wst.common.project.facet.core,org.eclipse.wst.common.project.facet.ui,org.eclipse.wst.common.snippets,org.eclipse.wst.common.ui,org.eclipse.wst.common.uriresolver,org.eclipse.wst.dtd.core,org.eclipse.wst.dtd.ui,org.eclipse.wst.dtd.ui.infopop,org.eclipse.wst.dtdeditor.doc.user,org.eclipse.wst.internet.cache,org.eclipse.wst.sse.core,org.eclipse.wst.sse.doc.user,org.eclipse.wst.sse.ui,org.eclipse.wst.sse.ui.infopop,org.eclipse.wst.standard.schemas,org.eclipse.wst.validation,org.eclipse.wst.validation.infopop,org.eclipse.wst.validation.ui,org.eclipse.wst.xml.core,org.eclipse.wst.xml.ui,org.eclipse.wst.xml.ui.infopop,org.eclipse.wst.xmleditor.doc.user,org.eclipse.wst.xsd.core,org.eclipse.wst.xsd.ui,org.eclipse.wst.xsdeditor.doc.user,org.eclipse.xsd,org.eclipse.xsd.edit,org.jivesoftware.smack,org.junit,org.junit.source,org.junit4,org.junit4.source,org.mortbay.jetty,org.mortbay.jetty.source,org.objectweb.asm*3.1.0.v200803061910,org.objectweb.asm*3.0.0.v200803061811,org.objectweb.asm.source,org.sat4j.core,org.sat4j.pb\"/>\r\n-<booleanAttribute key=\"show_selected_only\" value=\"false\"/>\r\n-<stringAttribute key=\"templateConfig\" value=\"${target_home}\\configuration\\config.ini\"/>\r\n-<booleanAttribute key=\"tracing\" value=\"false\"/>\r\n-<booleanAttribute key=\"useDefaultConfig\" value=\"true\"/>\r\n-<booleanAttribute key=\"useDefaultConfigArea\" value=\"true\"/>\r\n-<booleanAttribute key=\"useProduct\" value=\"true\"/>\r\n-<booleanAttribute key=\"usefeatures\" value=\"false\"/>\r\n-</launchConfiguration>\r"},{"sha":"85d0c8b3e57b5a4d5cb853b9fdd38c8bce170c41","filename":"contrib/devtools/org.apache.openjpa.eclipse/openjpa-eclipse.launch","status":"removed","additions":0,"deletions":39,"changes":39,"blob_url":"https://github.com/apache/openjpa/blob/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse/openjpa-eclipse.launch","raw_url":"https://github.com/apache/openjpa/raw/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse/openjpa-eclipse.launch","contents_url":"https://api.github.com/repos/apache/openjpa/contents/contrib/devtools/org.apache.openjpa.eclipse/openjpa-eclipse.launch?ref=bbc296ba29c2c6dd5620934446fd71c8561db6e4","patch":"@@ -1,39 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\r\n-<launchConfiguration type=\"org.eclipse.pde.ui.JunitLaunchConfig\">\r\n-<booleanAttribute key=\"append.args\" value=\"true\"/>\r\n-<booleanAttribute key=\"askclear\" value=\"false\"/>\r\n-<booleanAttribute key=\"automaticAdd\" value=\"true\"/>\r\n-<booleanAttribute key=\"automaticValidate\" value=\"true\"/>\r\n-<stringAttribute key=\"bootstrap\" value=\"\"/>\r\n-<stringAttribute key=\"checked\" value=\"[NONE]\"/>\r\n-<booleanAttribute key=\"clearConfig\" value=\"true\"/>\r\n-<booleanAttribute key=\"clearws\" value=\"false\"/>\r\n-<booleanAttribute key=\"clearwslog\" value=\"false\"/>\r\n-<stringAttribute key=\"configLocation\" value=\"${workspace_loc}/.metadata/.plugins/org.eclipse.pde.core/pde-junit\"/>\r\n-<booleanAttribute key=\"default\" value=\"true\"/>\r\n-<booleanAttribute key=\"includeOptional\" value=\"true\"/>\r\n-<stringAttribute key=\"location\" value=\"${workspace_loc:openjpa-eclipse/src/test/junit-workspace}\"/>\r\n-<listAttribute key=\"org.eclipse.debug.core.MAPPED_RESOURCE_PATHS\">\r\n-<listEntry value=\"/openjpa-eclipse\"/>\r\n-</listAttribute>\r\n-<listAttribute key=\"org.eclipse.debug.core.MAPPED_RESOURCE_TYPES\">\r\n-<listEntry value=\"4\"/>\r\n-</listAttribute>\r\n-<booleanAttribute key=\"org.eclipse.debug.core.appendEnvironmentVariables\" value=\"true\"/>\r\n-<stringAttribute key=\"org.eclipse.jdt.junit.CONTAINER\" value=\"=openjpa-eclipse\"/>\r\n-<booleanAttribute key=\"org.eclipse.jdt.junit.KEEPRUNNING_ATTR\" value=\"false\"/>\r\n-<stringAttribute key=\"org.eclipse.jdt.junit.TESTNAME\" value=\"\"/>\r\n-<stringAttribute key=\"org.eclipse.jdt.junit.TEST_KIND\" value=\"org.eclipse.jdt.junit.loader.junit3\"/>\r\n-<stringAttribute key=\"org.eclipse.jdt.launching.MAIN_TYPE\" value=\"\"/>\r\n-<stringAttribute key=\"org.eclipse.jdt.launching.PROGRAM_ARGUMENTS\" value=\"-os ${target.os} -ws ${target.ws} -arch ${target.arch} -nl ${target.nl}\"/>\r\n-<stringAttribute key=\"org.eclipse.jdt.launching.PROJECT_ATTR\" value=\"openjpa-eclipse\"/>\r\n-<stringAttribute key=\"org.eclipse.jdt.launching.SOURCE_PATH_PROVIDER\" value=\"org.eclipse.pde.ui.workbenchClasspathProvider\"/>\r\n-<stringAttribute key=\"org.eclipse.jdt.launching.VM_ARGUMENTS\" value=\"-Xms128m -Xmx512m -XX:PermSize=64m -XX:MaxPermSize=256m\"/>\r\n-<stringAttribute key=\"pde.version\" value=\"3.3\"/>\r\n-<stringAttribute key=\"product\" value=\"org.eclipse.platform.ide\"/>\r\n-<booleanAttribute key=\"show_selected_only\" value=\"false\"/>\r\n-<booleanAttribute key=\"tracing\" value=\"false\"/>\r\n-<booleanAttribute key=\"useDefaultConfig\" value=\"true\"/>\r\n-<booleanAttribute key=\"useDefaultConfigArea\" value=\"false\"/>\r\n-<booleanAttribute key=\"useProduct\" value=\"true\"/>\r\n-</launchConfiguration>\r"},{"sha":"a33159aac2ca7150687c610149acbf4f46e43074","filename":"contrib/devtools/org.apache.openjpa.eclipse/plugin.xml","status":"removed","additions":0,"deletions":86,"changes":86,"blob_url":"https://github.com/apache/openjpa/blob/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse/plugin.xml","raw_url":"https://github.com/apache/openjpa/raw/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse/plugin.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/contrib/devtools/org.apache.openjpa.eclipse/plugin.xml?ref=bbc296ba29c2c6dd5620934446fd71c8561db6e4","patch":"@@ -1,86 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<?eclipse version=\"3.2\"?>\n-<plugin>\n-\n-   <extension\n-         id=\"OpenJPAEnhancerBuilder\"\n-         name=\"OpenJPA PC-Enhancer Project Builder\"\n-         point=\"org.eclipse.core.resources.builders\">\n-      <builder\n-            hasNature=\"true\">\n-         <run\n-               class=\"org.apache.openjpa.eclipse.OpenJPAEnhancerBuilder\">\n-         </run>\n-      </builder>\n-   </extension>\n-   <extension\n-         id=\"OpenJPANature\"\n-         name=\"OpenJPA Project Nature\"\n-         point=\"org.eclipse.core.resources.natures\">\n-      <runtime>\n-         <run\n-               class=\"org.apache.openjpa.eclipse.OpenJPANature\">\n-         </run>\n-      </runtime>\n-      <builder\n-            id=\"org.apache.openjpa.eclipse.OpenJPAEnhancerBuilder\">\n-      </builder>\n-   </extension>\n-   <extension\n-         point=\"org.eclipse.ui.popupMenus\">\n-      <objectContribution\n-            adaptable=\"true\"\n-            objectClass=\"org.eclipse.core.resources.IProject\"\n-            nameFilter=\"*\"\n-            id=\"org.apache.openjpa.eclipse.contribution1\">\n-         <action\n-               label=\"Add/Remove Bytecode Enhancer\"\n-               class=\"org.apache.openjpa.eclipse.ToggleNatureAction\"\n-               menubarPath=\"additions\"\n-               enablesFor=\"+\"\n-               id=\"org.apache.openjpa.eclipse.addRemoveNatureAction\">\n-         </action>\n-      </objectContribution>\n-   </extension>\n-   <extension\n-         id=\"openJPAEnhancementProblem\"\n-         name=\"OpenJPA Enhancement Problem\"\n-         point=\"org.eclipse.core.resources.markers\">\n-      <super\n-            type=\"org.eclipse.core.resources.problemmarker\">\n-      </super>\n-      <persistent\n-            value=\"true\">\n-      </persistent>\n-   </extension>\n-   \n-   <extension\n-         point=\"org.eclipse.ui.decorators\">\n-      <decorator\n-            adaptable=\"true\"\n-            class=\"org.apache.openjpa.eclipse.ui.ProjectDecorator\"\n-            icon=\"icons/apache-feather-small.jpg\"\n-            id=\"org.apache.openjpa.eclipse.Decorator\"\n-            label=\"Resource Decorator\"\n-            lightweight=\"true\"\n-            location=\"TOP_LEFT\"\n-            objectClass=\"org.eclipse.core.resources.IProject\"\n-            state=\"true\">\n-         <enablement>\n-            <and>\n-               <objectClass name=\"org.eclipse.core.resources.IResource\">\n-               </objectClass>\n-               <or>\n-                  <objectClass\n-                        name=\"org.eclipse.core.resources.IProject\">\n-                  </objectClass>\n-                  <objectClass\n-                        name=\"org.eclipse.core.resources.IFile\">\n-                  </objectClass>\n-               </or>\n-            </and>\n-         </enablement>\n-      </decorator> \n-   </extension>\n-\n-</plugin>"},{"sha":"5deca4675bd4fb0ef112c8682292b936ad42d7c8","filename":"contrib/devtools/org.apache.openjpa.eclipse/pom.xml","status":"removed","additions":0,"deletions":39,"changes":39,"blob_url":"https://github.com/apache/openjpa/blob/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/contrib/devtools/org.apache.openjpa.eclipse/pom.xml?ref=bbc296ba29c2c6dd5620934446fd71c8561db6e4","patch":"@@ -1,39 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<!--\n- Licensed to the Apache Software Foundation (ASF) under one\n- or more contributor license agreements.  See the NOTICE file\n- distributed with this work for additional information\n- regarding copyright ownership.  The ASF licenses this file\n- to you under the Apache License, Version 2.0 (the\n- \"License\"); you may not use this file except in compliance\n- with the License.  You may obtain a copy of the License at\n- \n- http://www.apache.org/licenses/LICENSE-2.0\n- \n- Unless required by applicable law or agreed to in writing,\n- software distributed under the License is distributed on an\n- \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- KIND, either express or implied.  See the License for the\n- specific language governing permissions and limitations\n- under the License.   \n--->\n-<!-- \n-    Maven release plugin requires the project tag to be on a single line. \n--->\n-<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n-    <modelVersion>4.0.0</modelVersion>\n-    <parent>\n-        <artifactId>org.apache.openjpa.eclipse.all</artifactId>\n-        <groupId>org.apache.openjpa.eclipse</groupId>\n-        <version>1.0.0-SNAPSHOT</version>\n-    </parent>\n-    <groupId>org.apache.openjpa.eclipse</groupId>\n-    <artifactId>org.apache.openjpa.eclipse</artifactId>\n-    <version>1.0.0</version>\n-    <packaging>eclipse-plugin</packaging>\n-  \n-    <name>OpenJPA Eclipse Plug-in</name>\n-    <description>\n-        OpenJPA Enhancer packaged as OSGi/Eclipse plug-in\n-    </description>\n-</project>"},{"sha":"a92573644589426979a086baa92e6e2937939439","filename":"contrib/devtools/org.apache.openjpa.eclipse/src/main/java/org/apache/openjpa/eclipse/Activator.java","status":"removed","additions":0,"deletions":116,"changes":116,"blob_url":"https://github.com/apache/openjpa/blob/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse/src/main/java/org/apache/openjpa/eclipse/Activator.java","raw_url":"https://github.com/apache/openjpa/raw/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse/src/main/java/org/apache/openjpa/eclipse/Activator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/contrib/devtools/org.apache.openjpa.eclipse/src/main/java/org/apache/openjpa/eclipse/Activator.java?ref=bbc296ba29c2c6dd5620934446fd71c8561db6e4","patch":"@@ -1,116 +0,0 @@\n-/*\n- * Copyright 2002-2009 the original author or authors.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.openjpa.eclipse;\n-\n-import org.eclipse.swt.widgets.Display;\n-import org.eclipse.swt.widgets.Shell;\n-import org.apache.openjpa.eclipse.ui.ProjectDecorator;\n-import org.apache.openjpa.eclipse.util.ClassLoaderFromIProjectHelper;\n-import org.eclipse.core.resources.IProject;\n-import org.eclipse.core.runtime.Status;\n-import org.eclipse.jface.resource.ImageDescriptor;\n-import org.eclipse.ui.PlatformUI;\n-import org.eclipse.ui.plugin.AbstractUIPlugin;\n-import org.osgi.framework.BundleContext;\n-\n-/**\n- * The activator class controls the plug-in life cycle.\n- * \n- * @author Eclipse PDE Example Wizard! ;-)\n- * @author Michael Vorburger (MVO)\n- */\n-public class Activator extends AbstractUIPlugin {\n-\n-\t// The plug-in ID\n-\tpublic static final String PLUGIN_ID = \"org.apache.openjpa.eclipse\";\n-\n-\t// The shared instance\n-\tprivate static Activator plugin;\n-\t\n-\t/**\n-\t * The constructor\n-\t */\n-\tpublic Activator() {\n-\t}\n-\n-\t@Override\n-\tpublic void start(BundleContext context) throws Exception {\n-\t\tsuper.start(context);\n-\t\tplugin = this;\n-\t}\n-\n-\t@Override\n-\tpublic void stop(BundleContext context) throws Exception {\n-\t\tplugin = null;\n-\t\tsuper.stop(context);\n-\t}\n-\n-\t/**\n-\t * Returns the shared instance\n-\t *\n-\t * @return the shared instance\n-\t */\n-\tpublic static Activator getDefault() {\n-\t\treturn plugin;\n-\t}\n-\n-\t/**\n-\t * Returns an image descriptor for the image file at the given\n-\t * plug-in relative path\n-\t *\n-\t * @param path the path\n-\t * @return the image descriptor\n-\t */\n-\tpublic static ImageDescriptor getImageDescriptor(String path) {\n-\t\treturn imageDescriptorFromPlugin(PLUGIN_ID, path);\n-\t}\n-    \n-    /**\n-     * Is the project has independently using OpenJPA classes? \n-     */\n-    public static boolean isUsingOpenJPA(IProject project) {\n-        return ClassLoaderFromIProjectHelper.findClass(\"org.apache.openjpa.conf.OpenJPAVersion\", project) != null;\n-    }\n-    \n-    public static Display getDisplay() {\n-        return PlatformUI.getWorkbench().getDisplay();\n-    }\n-\n-    public static org.eclipse.swt.widgets.Shell getShell() {\n-        Shell parent = getDisplay().getActiveShell();\n-        if (parent == null)\n-            return new Shell(getDisplay());\n-        return new Shell(parent);\n-    }\n-    public static ProjectDecorator getLabelProvider() {\n-        return (ProjectDecorator)plugin.getWorkbench().getDecoratorManager()\n-                   .getBaseLabelProvider(ProjectDecorator.DECORATOR_ID);\n-    }\n-\n-    \n-    public static void log(String s) {\n-        System.err.println(s);\n-        Activator.getDefault().getLog().log(new Status(Status.OK, Activator.PLUGIN_ID, s));\n-    }\n-\n-    public static void log(Throwable t) {\n-        System.err.println(t.getMessage());\n-        t.printStackTrace();\n-        Activator.getDefault().getLog().log(new Status(Status.ERROR, Activator.PLUGIN_ID, t.getMessage(), t));\n-    }\n-\n-}"},{"sha":"81a69c04dc4b07990a74d015a3804235bd53c597","filename":"contrib/devtools/org.apache.openjpa.eclipse/src/main/java/org/apache/openjpa/eclipse/BuilderOptions.java","status":"removed","additions":0,"deletions":31,"changes":31,"blob_url":"https://github.com/apache/openjpa/blob/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse/src/main/java/org/apache/openjpa/eclipse/BuilderOptions.java","raw_url":"https://github.com/apache/openjpa/raw/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse/src/main/java/org/apache/openjpa/eclipse/BuilderOptions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/contrib/devtools/org.apache.openjpa.eclipse/src/main/java/org/apache/openjpa/eclipse/BuilderOptions.java?ref=bbc296ba29c2c6dd5620934446fd71c8561db6e4","patch":"@@ -1,31 +0,0 @@\n-/*\n- * Copyright 2002-2009 the original author or authors.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.openjpa.eclipse;\n-\n-import org.apache.openjpa.eclipse.util.PathMatcherUtil;\n-\n-/**\n- * Helper class to pass through \"options\" (read from the project.xml) in the builder.\n- * \n- * @author Michael Vorburger\n- */\n-public class BuilderOptions {\n-\n-\tpublic PathMatcherUtil pathMatcher;\n-\t\n-\tpublic boolean isVerboseLoggingEnabled; \n-}"},{"sha":"3bf8118500f9fca05320df07668d76688575bcdb","filename":"contrib/devtools/org.apache.openjpa.eclipse/src/main/java/org/apache/openjpa/eclipse/OpenJPAEnhancerBuilder.java","status":"removed","additions":0,"deletions":360,"changes":360,"blob_url":"https://github.com/apache/openjpa/blob/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse/src/main/java/org/apache/openjpa/eclipse/OpenJPAEnhancerBuilder.java","raw_url":"https://github.com/apache/openjpa/raw/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse/src/main/java/org/apache/openjpa/eclipse/OpenJPAEnhancerBuilder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/contrib/devtools/org.apache.openjpa.eclipse/src/main/java/org/apache/openjpa/eclipse/OpenJPAEnhancerBuilder.java?ref=bbc296ba29c2c6dd5620934446fd71c8561db6e4","patch":"@@ -1,360 +0,0 @@\n-/*\n- * Copyright 2002-2009 the original author or authors.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.openjpa.eclipse;\n-\n-import java.io.File;\n-import java.util.HashMap;\n-import java.util.LinkedList;\n-import java.util.List;\n-import java.util.Map;\n-\n-import org.apache.openjpa.eclipse.util.ClassLoaderFromIProjectHelper;\n-import org.apache.openjpa.eclipse.util.LogUtil;\n-import org.apache.openjpa.eclipse.util.PCEnhancerHelper;\n-import org.apache.openjpa.eclipse.util.PCEnhancerHelperImpl;\n-import org.apache.openjpa.eclipse.util.PathMatcherUtil;\n-import org.apache.openjpa.lib.util.MultiClassLoader;\n-import org.eclipse.core.resources.IFile;\n-import org.eclipse.core.resources.IMarker;\n-import org.eclipse.core.resources.IProject;\n-import org.eclipse.core.resources.IResource;\n-import org.eclipse.core.resources.IResourceDelta;\n-import org.eclipse.core.resources.IResourceDeltaVisitor;\n-import org.eclipse.core.resources.IResourceVisitor;\n-import org.eclipse.core.resources.IncrementalProjectBuilder;\n-import org.eclipse.core.runtime.CoreException;\n-import org.eclipse.core.runtime.IProgressMonitor;\n-import org.eclipse.core.runtime.IStatus;\n-import org.eclipse.core.runtime.OperationCanceledException;\n-import org.eclipse.core.runtime.Status;\n-import org.eclipse.core.runtime.SubMonitor;\n-import org.eclipse.jdt.core.ElementChangedEvent;\n-import org.eclipse.jdt.core.IElementChangedListener;\n-import org.eclipse.jdt.core.IPackageFragmentRoot;\n-import org.eclipse.jdt.core.JavaCore;\n-\n-/**\n- * Builder for the OpenJPA PCEnhancer.\n- * \n- * @see org.apache.openjpa.enhance.PCEnhancer\n- * \n- * @author Eclipse PDE Example Wizard! ;-)\n- * @author Michael Vorburger (MVO)\n- * @author Pinaki Poddar\n- */\n-public class OpenJPAEnhancerBuilder extends IncrementalProjectBuilder implements IElementChangedListener {\n-\n-\tpublic static final String BUILDER_ID = \"org.apache.openjpa.eclipse.OpenJPAEnhancerBuilder\";\n-\n-\tprivate static final String MARKER_TYPE = \"org.apache.openjpa.eclipse.openJPAEnhancementProblem\";\n-    private static final Map<IProject,PCEnhancerHelper> _enhancers = new HashMap<IProject, PCEnhancerHelper>();\n-\n-    public OpenJPAEnhancerBuilder() {\n-        super();\n-        JavaCore.addElementChangedListener(this, ElementChangedEvent.POST_CHANGE);\n-    }\n-    \n-\tprivate class MyIncrementalBuildResourceDeltaVisitor implements IResourceDeltaVisitor {\n-\t\tprivate final IProgressMonitor monitor;\n-\t\tprivate final PCEnhancerHelper enhancerHelper;\n-\t\tprivate final BuilderOptions opts;\n-\n-\t\tpublic MyIncrementalBuildResourceDeltaVisitor(IProgressMonitor monitor, PCEnhancerHelper enhancerHelper, \n-\t\t        BuilderOptions opts) {\n-\t\t\tthis.monitor = monitor;\n-\t\t\tthis.enhancerHelper = enhancerHelper;\n-\t\t\tthis.opts = opts;\n-\t\t}\n-\n-\t\tpublic boolean visit(IResourceDelta delta) throws CoreException {\n-\t\t\t// better do NOT use monitor.worked() & monitor.subTask() here, as this is fast enough  \n-\t\t    // and any UI will only slow it down\n-\t\t\tIResource resource = delta.getResource();\n-\t\t\tswitch (delta.getKind()) {\n-\t\t\t// If Added or Changed, handle changed resource:\n-\t\t\tcase IResourceDelta.ADDED:\n-\t\t\tcase IResourceDelta.CHANGED:\n-\t\t\t\tif (needsEnhancement(resource, opts)) {\n-\t\t\t\t\tif (enhance(resource, this.enhancerHelper, opts)) {\n-\t\t\t\t\t\tdelta.getResource().refreshLocal(IResource.DEPTH_ZERO, monitor);\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\tbreak;\n-\t\t\t// If Removed, nothing to do:\n-\t\t\tcase IResourceDelta.REMOVED:\n-\t\t\t\tbreak;\n-\t\t\t}\n-\t\t\t// return true to continue visiting children\n-\t\t\treturn true;\n-\t\t}\n-\t}\n-\n-\tprivate class MyFullBuildResourceVisitor implements IResourceVisitor {\n-\t\tprivate final IProgressMonitor monitor;\n-\t\tprivate final List<IResource> list = new LinkedList<IResource>();\n-\t\tprivate final BuilderOptions opts;\n-\n-\t\tpublic MyFullBuildResourceVisitor(IProgressMonitor monitor, BuilderOptions opts) {\n-\t\t\tthis.monitor = monitor;\n-\t\t\tthis.opts = opts;\n-\t\t}\n-\n-\t\tpublic boolean visit(IResource resource) throws CoreException {\n-\t\t\t// NO monitor.worked(1);\n-\n-\t\t\tif (needsEnhancement(resource, opts))\n-\t\t\t\tlist.add(resource);\n-\t\t\t\t\n-\t\t\tcheckCancel(monitor);\n-\t\t\t\n-\t\t\t// return true to continue visiting children\n-\t\t\treturn true;\n-\t\t}\n-\t\t\n-\t\tList<IResource> getResourcesPotentiallyNeedingEnhancement() {\n-\t\t\treturn list;\n-\t\t}\n-\t}\n-\n-\t\n-\t@Override\n-\t@SuppressWarnings(\"unchecked\")\n-\tprotected IProject[] build(int kind, Map args, IProgressMonitor monitor) throws CoreException {\n-\t\tBuilderOptions opts = new BuilderOptions();\n-\t\topts.pathMatcher = new PathMatcherUtil(args);\n-\t\topts.isVerboseLoggingEnabled = isFullLoggingEnabled(args);\n-\t\t\n-\t\tif (kind == FULL_BUILD) {\n-\t\t\tfullBuild(monitor, opts);\n-\t\t} else {\n-\t\t\tIResourceDelta delta = getDelta(getProject());\n-\t\t\tif (delta == null) {\n-\t\t\t\tfullBuild(monitor, opts);\n-\t\t\t} else {\n-\t\t\t\tincrementalBuild(delta, monitor, opts);\n-\t\t\t}\n-\t\t}\n-\t\treturn null;\n-\t}\n-\n-\tprivate void fullBuild(final IProgressMonitor monitor, BuilderOptions opts) throws CoreException {\n-\t\tlong startTime = System.currentTimeMillis();\n-\t\tmonitor.subTask(\"OpenJPA Enhancement... (Full Build, collecting resources)\");\n-\t\tMyFullBuildResourceVisitor visitor = new MyFullBuildResourceVisitor(monitor, opts);\n-\t\tgetProject().accept(visitor);\n-\t\tlong duration = System.currentTimeMillis() - startTime;\n-\t\tif (opts.isVerboseLoggingEnabled)\n-\t\t\tLogUtil.logOK(\"OpenJPA Enhancement (Full Build, collecting resources) took \"\n-\t\t\t\t+ duration + \"ms, found \" + visitor.getResourcesPotentiallyNeedingEnhancement().size()\n-\t\t\t\t+ \" classes potentially needing enhancement\");\n-\t\n-\t\tList<IResource> resources = visitor.getResourcesPotentiallyNeedingEnhancement();\n-\t\tif (!resources.isEmpty()) {\n-\t\t\tSubMonitor subMonitor = SubMonitor.convert(monitor, \n-\t\t\t    \"OpenJPA Enhancement... (Full Build, actual bytecode work)\", resources.size());\n-\t\t\ttry {\n-\t\t\t\tint actuallyEnhanced = 0;\n-\t\t\t\tstartTime = System.currentTimeMillis();\n-\t\t\t\tClassLoader classLoader = ClassLoaderFromIProjectHelper.createClassLoader(getProject());\n-\n-\t\t\t\tPCEnhancerHelper enhancerHelper = new PCEnhancerHelperImpl(classLoader);\n-\t\t\t\tfor (IResource resource : resources) {\n-\t\t\t\t\tsubMonitor.subTask(\"OpenJPA Enhancement... (Full Build, enhancing \" + resource.getName() + \")\");\n-\t\t\t\t\tcheckCancel(subMonitor);\n-\t\t\t\t\tif (enhance(resource, enhancerHelper, opts)) {\n-\t\t\t\t\t\t++actuallyEnhanced;\n-\t\t\t\t\t}\n-\t\t\t\t\tsubMonitor.worked(1);\n-\t\t\t\t}\n-\t\t\t\t\n-\t\t\t\tduration = System.currentTimeMillis() - startTime;\n-\t\t\t\tif (opts.isVerboseLoggingEnabled)\n-\t\t\t\t\tLogUtil.logOK(\"OpenJPA Enhancement (Full Build) took \" + duration + \"ms, for \" + resources.size()\n-\t\t\t\t\t\t\t+ \" potential classes, of which \" + actuallyEnhanced + \" were actually enhanced\");\n-\t\t\t} finally {\n-\t\t\t\t// LogUtil.logInfo(\"OpenJPA Enhancement (Full Build) will now cause a full project refresh\");\n-\t\t\t\tgetProject().refreshLocal(IResource.DEPTH_INFINITE, subMonitor.newChild(1));\n-\t\t\t\t// LogUtil.logOK(\"OpenJPA Enhancement (Full Build) completely done (after refresh), good bye.\");\n-\t\t\t\tmonitor.done();\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tprivate void incrementalBuild(IResourceDelta delta, IProgressMonitor monitor, BuilderOptions opts) \n-\t    throws CoreException {\n-\t\tmonitor.subTask(\"OpenJPA Enhancement... (Incremental Build)\");\n-\t\ttry {\n-\t\t\tPCEnhancerHelper enhancerHelper = getEnhancer(getProject());\n-\t\t\tdelta.accept(new MyIncrementalBuildResourceDeltaVisitor(monitor, enhancerHelper, opts));\n-\t\t} finally {\n-\t\t\tmonitor.done();\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * Check if a resource needs enhancement.\n-\t * Needs to be very fast, should NOT e.g. actually analyze any class files (do that later only).\n-\t * @param opts \n-\t */\n-\tprivate boolean needsEnhancement(IResource resource, BuilderOptions opts) throws CoreException {\n-\t\tif (resource instanceof IFile && resource.getName().endsWith(\".class\")) {\n-\t\t\tIFile iFile = (IFile) resource;\n-\t\t\tString fileNameForLog = iFile.getFullPath().toString();\n-\t\t\tdeleteMarkers(iFile);\n-\t\t\t\n-\t\t\tif (!opts.pathMatcher.match(iFile.getLocation().toString())) {\n-\t\t\t\tif (opts.isVerboseLoggingEnabled) {\n-\t\t\t\t\tLogUtil.logInfo(\"OpenJPA Enhancer skipped class because it did not match pattern \" \n-\t\t\t\t\t    + fileNameForLog );\n-\t\t\t\t}\n-\t\t\t\treturn false;\n-\t\t\t}\n-\t\t\t\n-\t\t\treturn true;\n-\t\t} else {\n-\t\t\treturn false;\n-\t\t}\n-\t}\n-\t\n-    /**\n-     * Gets the enhancer for the given user project. Creates if one does not exist for the given project.\n-     */\n-    private static PCEnhancerHelper getEnhancer(IProject project) throws CoreException {\n-        PCEnhancerHelper enhancer = _enhancers.get(project);\n-        if (enhancer == null) {\n-            Activator.log(\"Creating enhancer for project \" + project.getName());\n-            ClassLoader projectClassLoader = ClassLoaderFromIProjectHelper.createClassLoader(project);\n-            if (Activator.isUsingOpenJPA(project)) {\n-                Activator.log(\"Project \" + project.getName() + \" is already using OpenJPA\");\n-                enhancer = new PCEnhancerHelperImpl(projectClassLoader);\n-            } else {\n-                Activator.log(\"Project \" + project.getName() + \" is not already using OpenJPA\");\n-                MultiClassLoader compoundClassloader = new MultiClassLoader();\n-                compoundClassloader.addClassLoader(projectClassLoader);\n-                compoundClassloader.addClassLoader(Activator.class.getClassLoader());\n-                enhancer = new PCEnhancerHelperImpl(projectClassLoader);\n-            }\n-        }\n-        return enhancer;\n-    }\n-\n-\t\n-\tprivate boolean enhance(IResource resource, PCEnhancerHelper enhancerHelper, BuilderOptions opts) \n-\t    throws CoreException {\n-\t\tIFile iFile = (IFile) resource;\n-\t\tString fileNameForLog = iFile.getFullPath().toString();\n-\t\ttry {\n-\t\t\tFile file = iFile.getLocation().toFile();\n-\t\t\tboolean hasEnhanced = enhancerHelper.enhance(file);\n-\t\t\tif (opts.isVerboseLoggingEnabled) {\n-\t\t\t\tif (hasEnhanced)\n-\t\t\t\t\tLogUtil.logInfo(\"OpenJPA Enhancer ran on and actually bytecode enhanced \" + fileNameForLog);\n-\t\t\t\telse\n-\t\t\t\t\tLogUtil.logInfo(\"OpenJPA Enhancer ran on but did not have to bytecode enhance \" + fileNameForLog);\n-\t\t\t}\n-\t\t\t\n-\t\t\treturn hasEnhanced;\n-\t\t} catch (Throwable e) {\n-\t\t\tString msg = \"OpenJPA Enhancement Builder failed with message '\" + e.toString() + \"' for class: \" \n-\t\t\t    + iFile.getLocation();\n-\t\t\taddMarkerAndThrowNewCoreException(iFile, msg, e);\n-\t\t\treturn false;\n-\t\t}\n-\t}\n-\t\n-    /**\n-     * Callback notification on Java Model change determines if the user project's classpath has been changed.\n-     * If the classpath has been changed then the cached enhancer is cleared to refresh the classpath\n-     * of the user project.\n-     */\n-    public void elementChanged(ElementChangedEvent event) {\n-        IResourceDelta[] rsrcs = event.getDelta().getResourceDeltas();\n-        for (int i = 0; rsrcs != null && i < rsrcs.length; i++) {\n-            if (isClasspath(rsrcs[i])) {\n-                IProject project = rsrcs[i].getResource().getProject();\n-                _enhancers.remove(project);\n-            }\n-        }\n-    }\n-    \n-    /**\n-     * Affirms if the given resource represents a classpath.\n-     */\n-    private boolean isClasspath(IResourceDelta resource) {\n-        IPackageFragmentRoot path = (IPackageFragmentRoot)resource.getAdapter(IPackageFragmentRoot.class);\n-        return path != null;\n-    }\n-\n-\n-\t/**\n-\t * Note that if full/verbose logging is enabled, which writes to that Error\n-\t * Log view, then something in Eclipse (3.4 at least) goes wrong with the\n-\t * Progress view and the Monitor stuff - it doesn't update correctly, and\n-\t * keeps running!\n-\t */\n-\tprivate boolean isFullLoggingEnabled(Map<String, String> args) {\n-\t\tif (args.containsKey(\"debugLogs\")) {\n-\t\t\treturn \"true\".equalsIgnoreCase((String) args.get(\"debugLogs\"));\n-\t\t}\n-\t\treturn false;\n-\t}\n-\n-\tprivate void addMarkerAndThrowNewCoreException(IFile iFile, String msg, Throwable e) throws CoreException {\n-\t\taddMarker(iFile, msg, 0, IMarker.SEVERITY_ERROR);\n-\t\tlogAndThrowNewCoreException(msg, e);\n-\t}\n-\n-\tprivate void logAndThrowNewCoreException(String msg, Throwable e) throws CoreException {\n-\t\tLogUtil.logError(msg, e);\n-\t\tIStatus status;\n-\t\tif (e != null) {\n-\t\t\tstatus = new Status(IStatus.ERROR, Activator.PLUGIN_ID, msg, e);\n-\t\t} else {\n-\t\t\tstatus = new Status(IStatus.ERROR, Activator.PLUGIN_ID, msg);\n-\t\t}\n-\t\tthrow new CoreException(status);\n-\t}\n-\n-\tprivate void addMarker(IFile file, String message, int lineNumber, int severity) {\n-\t\ttry {\n-\t\t\tIMarker marker = file.createMarker(MARKER_TYPE);\n-\t\t\tmarker.setAttribute(IMarker.MESSAGE, message);\n-\t\t\tmarker.setAttribute(IMarker.SEVERITY, severity);\n-\t\t\tif (lineNumber == -1) {\n-\t\t\t\tlineNumber = 1;\n-\t\t\t}\n-\t\t\tmarker.setAttribute(IMarker.LINE_NUMBER, lineNumber);\n-\t\t} catch (CoreException e) {\n-\t\t}\n-\t}\n-\n-\tprivate void deleteMarkers(IFile file) {\n-\t\ttry {\n-\t\t\tfile.deleteMarkers(MARKER_TYPE, false, IResource.DEPTH_ZERO);\n-\t\t} catch (CoreException ce) {\n-\t\t}\n-\t}\n-\n-\tprivate void checkCancel(IProgressMonitor monitor) {\n-\t\t// @see http://www.eclipse.org/articles/Article-Builders/builders.html\n-\t\tif (monitor.isCanceled()) {\n-\t\t\t// No monitor.done(); in example \n-\t\t\tforgetLastBuiltState(); // not sure if this is really necessary for us, but probably doesn't hurt? \n-\t\t\tthrow new OperationCanceledException();\n-\t\t}\n-\t}\n-}"},{"sha":"59a6432ac43633d6e5f20a31075fccd4b14a9f32","filename":"contrib/devtools/org.apache.openjpa.eclipse/src/main/java/org/apache/openjpa/eclipse/OpenJPANature.java","status":"removed","additions":0,"deletions":87,"changes":87,"blob_url":"https://github.com/apache/openjpa/blob/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse/src/main/java/org/apache/openjpa/eclipse/OpenJPANature.java","raw_url":"https://github.com/apache/openjpa/raw/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse/src/main/java/org/apache/openjpa/eclipse/OpenJPANature.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/contrib/devtools/org.apache.openjpa.eclipse/src/main/java/org/apache/openjpa/eclipse/OpenJPANature.java?ref=bbc296ba29c2c6dd5620934446fd71c8561db6e4","patch":"@@ -1,87 +0,0 @@\n-/*\n- * Copyright 2002-2009 the original author or authors.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.openjpa.eclipse;\n-\n-import org.eclipse.core.resources.ICommand;\n-import org.eclipse.core.resources.IProject;\n-import org.eclipse.core.resources.IProjectDescription;\n-import org.eclipse.core.resources.IProjectNature;\n-import org.eclipse.core.runtime.CoreException;\n-\n-/**\n- * Eclipse Nature for a Project with OpenJPA Builder.\n- *\n- * @author Eclipse PDE Example Wizard! ;-)\n- * @author Michael Vorburger (MVO)\n- * @author Pinaki Poddar\n- */\n-public class OpenJPANature implements IProjectNature {\n-\n-\t/**\n-\t * ID of this project nature\n-\t */\n-\tpublic static final String NATURE_ID = \"org.apache.openjpa.eclipse.OpenJPANature\";\n-\n-\tprivate IProject project;\n-\n-\t/*\n-\t * (non-Javadoc)\n-\t * \n-\t * @see org.eclipse.core.resources.IProjectNature#configure()\n-\t */\n-\tpublic void configure() throws CoreException {\n-\t\tIProjectDescription desc = project.getDescription();\n-\t\tICommand[] commands = desc.getBuildSpec();\n-\n-\t\tfor (int i = 0; i < commands.length; ++i) {\n-\t\t\tif (commands[i].getBuilderName().equals(OpenJPAEnhancerBuilder.BUILDER_ID)) {\n-\t\t\t\treturn;\n-\t\t\t}\n-\t\t}\n-\n-\t\tICommand[] newCommands = new ICommand[commands.length + 1];\n-\t\tSystem.arraycopy(commands, 0, newCommands, 0, commands.length);\n-\t\tICommand command = desc.newCommand();\n-\t\tcommand.setBuilderName(OpenJPAEnhancerBuilder.BUILDER_ID);\n-\t\tnewCommands[newCommands.length - 1] = command;\n-\t\tdesc.setBuildSpec(newCommands);\n-\t\tproject.setDescription(desc, null);\n-\t}\n-\n-\tpublic void deconfigure() throws CoreException {\n-\t\tIProjectDescription description = getProject().getDescription();\n-\t\tICommand[] commands = description.getBuildSpec();\n-\t\tfor (int i = 0; i < commands.length; ++i) {\n-\t\t\tif (commands[i].getBuilderName().equals(OpenJPAEnhancerBuilder.BUILDER_ID)) {\n-\t\t\t\tICommand[] newCommands = new ICommand[commands.length - 1];\n-\t\t\t\tSystem.arraycopy(commands, 0, newCommands, 0, i);\n-\t\t\t\tSystem.arraycopy(commands, i + 1, newCommands, i, commands.length - i - 1);\n-\t\t\t\tdescription.setBuildSpec(newCommands);\n-\t\t\t\treturn;\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tpublic IProject getProject() {\n-\t\treturn project;\n-\t}\n-\n-\tpublic void setProject(IProject project) {\n-\t\tthis.project = project;\n-\t}\n-\n-}"},{"sha":"df3e890e65d47e48e309ee7a22b5be30c75b6504","filename":"contrib/devtools/org.apache.openjpa.eclipse/src/main/java/org/apache/openjpa/eclipse/PluginLibrary.java","status":"removed","additions":0,"deletions":269,"changes":269,"blob_url":"https://github.com/apache/openjpa/blob/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse/src/main/java/org/apache/openjpa/eclipse/PluginLibrary.java","raw_url":"https://github.com/apache/openjpa/raw/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse/src/main/java/org/apache/openjpa/eclipse/PluginLibrary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/contrib/devtools/org.apache.openjpa.eclipse/src/main/java/org/apache/openjpa/eclipse/PluginLibrary.java?ref=bbc296ba29c2c6dd5620934446fd71c8561db6e4","patch":"@@ -1,269 +0,0 @@\n-/*\n- * Copyright 2002-2009 the original author or authors.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.openjpa.eclipse;\n-\n-import java.io.File;\n-import java.io.FileOutputStream;\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.lang.reflect.InvocationTargetException;\n-import java.net.URL;\n-import java.util.ArrayList;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.jar.JarEntry;\n-import java.util.jar.JarInputStream;\n-import java.util.jar.JarOutputStream;\n-\n-import org.apache.openjpa.eclipse.util.ClassLoaderFromIProjectHelper;\n-import org.eclipse.core.resources.IFile;\n-import org.eclipse.core.resources.IProject;\n-import org.eclipse.core.runtime.CoreException;\n-import org.eclipse.core.runtime.FileLocator;\n-import org.eclipse.core.runtime.IPath;\n-import org.eclipse.core.runtime.IProgressMonitor;\n-import org.eclipse.core.runtime.Platform;\n-import org.eclipse.jdt.core.IClasspathEntry;\n-import org.eclipse.jdt.core.JavaCore;\n-import org.eclipse.jface.dialogs.ProgressMonitorDialog;\n-import org.eclipse.jface.operation.IRunnableWithProgress;\n-import org.eclipse.osgi.util.ManifestElement;\n-import org.osgi.framework.Bundle;\n-import org.osgi.framework.BundleException;\n-import org.osgi.framework.Constants;\n-\n-\n-/**\n- * Locates the required runtime class libraries for OpenJPA by looking up the Bundle manifest.\n- * These libraries are embedded in the plugin jar and hence can not directly be used as \n- * classpath entry for a user project. Hence these runtime libaries are read from the\n- * plugin jar and copied into the user project.\n- *  \n- * @author Pinaki Poddar\n- *\n- */\n-public class PluginLibrary {\n-\t/**\n-\t * This identifier must match the <code>Bundle.Symbolic-Name</code> of the root manifest.\n-\t */\n-\tpublic static final String BUNDLE_ID = \"org.apache.openjpa\"; \n-\t\n-\t/**\n-\t * Map of library key to marker class name. Used to determine if a specific library\n-\t * is visible to the user's project's classloader. \n-\t */\n-\tprivate static final Map<String,String> probes = new HashMap<String, String>();\n-\tstatic {\n-        probes.put(\"commons-collections\", \"org.apache.commons.collections.ArrayStack\");\n-        probes.put(\"commons-lang\",        \"org.apache.commons.lang.ObjectUtils\");\n-        probes.put(\"geronimo-jms\",        \"javax.jms.Connection\");\n-        probes.put(\"geronimo-jpa\",        \"javax.persistence.Entity\");\n-        probes.put(\"geronimo-jta\",        \"javax.transaction.Transaction\");\n-        probes.put(\"openjpa\",             \"org.apache.openjpa.conf.OpenJPAVersion\");\n-        probes.put(\"serp\",                \"serp.bytecode.BCClass\");\n-\t}\n-\t\n-\tpublic String getDescription() {\n-        Bundle bundle = Platform.getBundle(BUNDLE_ID);\n-        Object desc = bundle.getHeaders().get(Constants.BUNDLE_DESCRIPTION);\n-        return desc == null ? \"OpenJPA Eclipse Plugin Bundle\" : desc.toString();\n-\t}\n-\t\n-    /**\n-     * Reads the given bundle manifest for the names of libraries required for \n-     * OpenJPA runtime.\n-     */\n-    private List<String> getRuntimeLibraries(Bundle bundle) {\n-        List<String> result = new ArrayList<String>();\n-        try {\n-            String cpEntries = (String) bundle.getHeaders().get(Constants.BUNDLE_CLASSPATH);\n-            if (cpEntries == null)\n-                cpEntries = \".\";\n-            ManifestElement[] elements = ManifestElement.parseHeader(Constants.BUNDLE_CLASSPATH, cpEntries);\n-            for (int i = 0; i < elements.length; ++i) {\n-                ManifestElement element = elements[i];\n-                String value = element.getValue();\n-                result.add(value);\n-            }\n-        } catch (BundleException e) {\n-            e.printStackTrace();\n-        }\n-        return result;\n-    }\n-\n-\t/**\n-\t * Gets the runtime libraries required for this bundle to the given project.\n-\t * \n-\t * @param list of patterns that matches an actual library. null implies all runtime libraries.\n-\t * @param copy if true then the libraries are copied to the given project directory.\n-\t */\n-\tpublic IClasspathEntry[] getLibraryClasspaths(IProject project, List<String> libs, boolean copy) throws CoreException {\n-        if (libs != null && libs.isEmpty())\n-            return new IClasspathEntry[0];\n-        Bundle bundle = Platform.getBundle(BUNDLE_ID);\n-        List<String> libraries = getRuntimeLibraries(bundle);\n-        List<IClasspathEntry> entries = new ArrayList<IClasspathEntry>();\n-        ProgressMonitorDialog progress = null;\n-        for (String lib : libraries) {\n-            try {\n-                if (\".\".equals(lib))\n-                    continue;\n-                URL url = bundle.getEntry(lib);\n-                url = FileLocator.resolve(url);\n-                String urlString = url.getFile();\n-                if (!urlString.endsWith(\".jar\") || !matchesPattern(urlString, libs))\n-                    continue;\n-                String libName = urlString.substring(urlString.indexOf('!')+1);\n-                IFile iFile = project.getFile(libName);\n-                if (iFile == null) {\n-                    continue;\n-                }\n-                IPath outPath = iFile.getRawLocation();\n-                File outFile = outPath.toFile();\n-                if (!outFile.getParentFile().exists() && copy) {\n-                    outFile.getParentFile().mkdirs();\n-                }\n-                if (!outFile.exists() && copy) {\n-                    outFile.createNewFile();\n-                }\n-                if (copy) {\n-                    boolean firstTask = progress == null;\n-                    if (progress == null) {\n-                        progress = new ProgressMonitorDialog(Activator.getShell());\n-                    }\n-                    if (firstTask) {\n-                        int nTask = libs == null ? libraries.size() : libs.size();\n-                        progress.run(true, false, new JarCopier(url.openStream(),outFile, true, nTask));\n-                    } else {\n-                        progress.run(true, false, new JarCopier(url.openStream(),outFile));\n-                    }\n-                }\n-                IClasspathEntry classpath = JavaCore.newLibraryEntry(outPath, null, null);\n-                entries.add(classpath);\n-            } catch (Exception e) {\n-                Activator.log(e);\n-            } finally {\n-                if (progress != null) {\n-                    progress.getProgressMonitor().done();\n-                }\n-            }\n-        }\n-        return entries.toArray(new IClasspathEntry[entries.size()]);\n-\t}\n-\t\n-\tvoid copyJar(JarInputStream jar, JarOutputStream out) throws IOException {\n-\t    if (jar == null || out == null)\n-\t        return;\n-\t    \n-\t    try {\n-\t        JarEntry entry = null;\n-\t        while ((entry = jar.getNextJarEntry()) != null) {\n-\t            out.putNextEntry(entry);\n-\t            int b = -1;\n-\t            while ((b = jar.read()) != -1) {\n-\t                out.write(b);\n-\t            }\n-\t        }\n-\t        out.closeEntry();\n-\t    } finally {\n-\t        out.finish();\n-            out.flush();\n-\t        out.close();\n-\t        jar.close();\n-\t    }\n-\t}\n-\t\n-\t/**\n-\t * Finds the libraries that are required but missing from the given project's classpath.\n-\t * @param project\n-\t * @return empty list if no required libraries are missing.\n-\t */\n-\tpublic List<String> findMissingLibrary(IProject project) throws CoreException {\n-\t    List<String> missing = new ArrayList<String>();\n-\t    ClassLoader projectClassLoader = ClassLoaderFromIProjectHelper.createClassLoader(project);\n-\t    for (Map.Entry<String, String> e : probes.entrySet()) {\n-\t        try {\n-\t            Class.forName(e.getValue(), false, projectClassLoader);\n-\t        } catch (Exception cnf) {\n-\t            missing.add(e.getKey());\n-\t        }\n-\t    }\n-\t    return missing;\n-\t}\n-\t\n-\t/**\n-\t * Affirms if any of the given pattern is present in the given full name. \n-\t * @return\n-\t */\n-\tprivate boolean matchesPattern(String fullName, List<String> patterns) {\n-\t    if (patterns == null)\n-\t        return true;\n-\t    for (String pattern : patterns) {\n-\t        if (fullName.indexOf(pattern) != -1)\n-\t            return true;\n-\t    }\n-\t    return false;\n-\t}\n-\n-\tclass JarCopier implements IRunnableWithProgress {\n-\t    final JarInputStream in;\n-\t    final JarOutputStream out;\n-\t    final boolean beginTask;\n-\t    final int size;\n-\t    final String message;\n-\t    public JarCopier(InputStream jar, File outFile)  throws IOException {\n-\t        this(jar, outFile, false, 0);\n-\t    }\n-\t    \n-        public JarCopier(InputStream jar, File outFile, boolean begin, int size) throws IOException {\n-            super();\n-            this.in = new JarInputStream(jar);\n-            this.out = new JarOutputStream(new FileOutputStream(outFile));\n-            this.beginTask = begin;\n-            this.size = size;\n-            this.message = outFile.getAbsolutePath();\n-        }\n-        \n-        public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {\n-            if (in == null || out == null)\n-                return;\n-            if (beginTask)\n-                monitor.beginTask(\"Copying OpenJPA runtime libraries to user projects\", size);\n-            monitor.subTask(message);\n-            try {\n-                try {\n-                    JarEntry entry = null;\n-                    while ((entry = in.getNextJarEntry()) != null) {\n-                        out.putNextEntry(entry);\n-                        int b = -1;\n-                        while ((b = in.read()) != -1) {\n-                            out.write(b);\n-                        }\n-                    }\n-                    out.closeEntry();\n-                } finally {\n-                    out.finish();\n-                    out.flush();\n-                    out.close();\n-                    in.close();\n-                    monitor.worked(1);\n-                }\n-        } catch (IOException ex) {\n-        } \n-\t}\n-\t}\n-}"},{"sha":"1c90393ebe5706aaf17651f0b77fe8485cfa7c62","filename":"contrib/devtools/org.apache.openjpa.eclipse/src/main/java/org/apache/openjpa/eclipse/PluginProperty.java","status":"removed","additions":0,"deletions":65,"changes":65,"blob_url":"https://github.com/apache/openjpa/blob/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse/src/main/java/org/apache/openjpa/eclipse/PluginProperty.java","raw_url":"https://github.com/apache/openjpa/raw/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse/src/main/java/org/apache/openjpa/eclipse/PluginProperty.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/contrib/devtools/org.apache.openjpa.eclipse/src/main/java/org/apache/openjpa/eclipse/PluginProperty.java?ref=bbc296ba29c2c6dd5620934446fd71c8561db6e4","patch":"@@ -1,65 +0,0 @@\n-/*\n- * Copyright 2002-2009 the original author or authors.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.openjpa.eclipse;\n-\n-import org.eclipse.core.runtime.QualifiedName;\n-\n-/**\n- * Enumerates persistent properties of the project.\n- *  \n- * @author Pinaki Poddar\n- *\n- */\n-public class PluginProperty {\n-    /**\n-     * Is the project using the plugin's captive version of OpenJPA runtime libraries? \n-     * \n-     * Allowed values: \"true\" or \"false\"\n-     */\n-    public static final QualifiedName USING_CAPTIVE_LIBS   = qname(\"openjpa.usingCaptiveLibs\");\n-    \n-    /**\n-     * Does the project requires plugin's captive version of OpenJPA runtime libraries to be added? \n-     * \n-     * Allowed values: \"true\" or \"false\"\n-     */\n-    public static final QualifiedName REQUIRES_CAPTIVE_LIBS   = qname(\"openjpa.requiresCaptiveLibs\");\n-    \n-    /**\n-     * Does enhancer add a no-argument constructor for a persistent entity?\n-     * \n-     * Allowed values: \"true\" or \"false\"\n-     */\n-    public static final QualifiedName ADD_CONSTRUCTOR = qname(\"enhancer.addConstructor\");\n-    /**\n-     * Does enhancer enforce property based access restrictions?\n-     * \n-     * Allowed values: \"true\" or \"false\"\n-     */\n-    public static final QualifiedName ENFORCE_PROP = qname(\"enhancer.enforceProperty\");\n-    \n-    /**\n-     * The output directory for enhanced classes.\n-     * \n-     * Allowed values: a directory\n-     */\n-    public static final QualifiedName ENHANCER_OUTPUT  = qname(\"enhancer.output.dir\");\n-    \n-    private static QualifiedName qname(String s) {\n-        return new QualifiedName(Activator.PLUGIN_ID, s);\n-    }\n-    \n-}\n\\ No newline at end of file"},{"sha":"2f4585fd6044a0dedc5fc4ab9269a70020afd189","filename":"contrib/devtools/org.apache.openjpa.eclipse/src/main/java/org/apache/openjpa/eclipse/ToggleNatureAction.java","status":"removed","additions":0,"deletions":269,"changes":269,"blob_url":"https://github.com/apache/openjpa/blob/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse/src/main/java/org/apache/openjpa/eclipse/ToggleNatureAction.java","raw_url":"https://github.com/apache/openjpa/raw/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse/src/main/java/org/apache/openjpa/eclipse/ToggleNatureAction.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/contrib/devtools/org.apache.openjpa.eclipse/src/main/java/org/apache/openjpa/eclipse/ToggleNatureAction.java?ref=bbc296ba29c2c6dd5620934446fd71c8561db6e4","patch":"@@ -1,269 +0,0 @@\n-/*\n- * Copyright 2002-2009 the original author or authors.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.openjpa.eclipse;\n-\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Iterator;\n-import java.util.List;\n-\n-import org.apache.openjpa.eclipse.ui.AddNatureDialog;\n-import org.apache.openjpa.eclipse.ui.ProjectDecorator;\n-import org.apache.openjpa.eclipse.ui.RemoveNatureDialog;\n-import org.eclipse.core.resources.IProject;\n-import org.eclipse.core.resources.IProjectDescription;\n-import org.eclipse.core.runtime.CoreException;\n-import org.eclipse.core.runtime.IAdaptable;\n-import org.eclipse.jdt.core.IClasspathEntry;\n-import org.eclipse.jdt.core.IJavaProject;\n-import org.eclipse.jdt.core.JavaCore;\n-import org.eclipse.jface.action.IAction;\n-import org.eclipse.jface.dialogs.MessageDialog;\n-import org.eclipse.jface.viewers.ISelection;\n-import org.eclipse.jface.viewers.IStructuredSelection;\n-import org.eclipse.jface.viewers.LabelProviderChangedEvent;\n-import org.eclipse.jface.window.Window;\n-import org.eclipse.swt.widgets.Shell;\n-import org.eclipse.ui.IObjectActionDelegate;\n-import org.eclipse.ui.IWorkbenchPart;\n-\n-/**\n- * Action to Add/Remove OpenJPA Project Nature.\n- * \n- * @author Eclipse PDE Example Wizard! ;-)\n- * @author Michael Vorburger (MVO)\n- * @author Pinaki Poddar\n-*/\n-public class ToggleNatureAction implements IObjectActionDelegate {\n-\n-\tprivate ISelection selection;\n-\n-\t/*\n-\t * (non-Javadoc)\n-\t * \n-\t * @see org.eclipse.ui.IActionDelegate#run(org.eclipse.jface.action.IAction)\n-\t */\n-\t@SuppressWarnings(\"unchecked\")\n-\tpublic void run(IAction action) {\n-\t\tif (selection instanceof IStructuredSelection) {\n-\t\t\tfor (Iterator it = ((IStructuredSelection) selection).iterator(); it.hasNext();) {\n-\t\t\t\tObject element = it.next();\n-\t\t\t\tIProject project = null;\n-\t\t\t\tif (element instanceof IProject) {\n-\t\t\t\t\tproject = (IProject) element;\n-\t\t\t\t} else if (element instanceof IAdaptable) {\n-\t\t\t\t\tproject = (IProject) ((IAdaptable) element).getAdapter(IProject.class);\n-\t\t\t\t}\n-\t\t\t\tif (project != null) {\n-\t\t\t\t\ttoggleNature(project);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\t/*\n-\t * (non-Javadoc)\n-\t * \n-\t * @see org.eclipse.ui.IActionDelegate#selectionChanged(org.eclipse.jface.action.IAction,\n-\t *      org.eclipse.jface.viewers.ISelection)\n-\t */\n-\tpublic void selectionChanged(IAction action, ISelection selection) {\n-\t\tthis.selection = selection;\n-\t}\n-\n-\t/*\n-\t * (non-Javadoc)\n-\t * \n-\t * @see org.eclipse.ui.IObjectActionDelegate#setActivePart(org.eclipse.jface.action.IAction,\n-\t *      org.eclipse.ui.IWorkbenchPart)\n-\t */\n-\tpublic void setActivePart(IAction action, IWorkbenchPart targetPart) {\n-\t}\n-\n-\t/**\n-\t * Toggles sample nature on a project\n-\t * \n-\t * @param project\n-\t *            to have sample nature added or removed\n-\t */\n-    /**\n-     * Toggles the nature of the given project.\n-     * \n-     */\n-    private void toggleNature(IProject project) {\n-        try {\n-            int natureIndex = getNatureIndex(project, OpenJPANature.NATURE_ID);\n-            if (natureIndex != -1) {\n-                removeNature(project, natureIndex);\n-            } else {\n-                addNature(project, OpenJPANature.NATURE_ID);\n-            }\n-        } catch (Exception e) {\n-            Activator.log(e);\n-        } finally {\n-        }\n-    }\n-\t\n-\t/**\n-\t * Adds given nature to the project.\n-\t * Adding a nature also involves finding out which require runtime libraries, if any, are missing\n-\t * from the given project and then copying those libraries from the bundle to the project.\n-\t * @param project\n-\t * @param natureId\n-\t * @return\n-\t * @throws CoreException\n-\t */\n-    private boolean addNature(IProject project, String natureId) throws CoreException {\n-        Activator.log(\"Adding nature \" + natureId + \" to project \" + project.getName());\n-        PluginLibrary bundle = new PluginLibrary();\n-        List<String> missingLibraries = bundle.findMissingLibrary(project);\n-        Shell shell = Activator.getShell();\n-        AddNatureDialog dialog = new AddNatureDialog(shell, project,\n-            \"Enable OpenJPA\",\n-            \"OpenJPA Plugin\",\n-            \"Enhances bytecode of persistent entities as you compile\",\n-            missingLibraries);\n-        dialog.open();\n-        if (dialog.getReturnCode() != Window.OK) {\n-            return false;\n-        }\n-        IProjectDescription description = project.getDescription();\n-        String[] natures = description.getNatureIds();\n-        String[] newNatures = new String[natures.length + 1];\n-        System.arraycopy(natures, 0, newNatures, 0, natures.length);\n-        newNatures[natures.length] = OpenJPANature.NATURE_ID;\n-        description.setNatureIds(newNatures);\n-        project.setDescription(description, null);\n-        \n-        if (\"true\".equals(project.getPersistentProperty(PluginProperty.REQUIRES_CAPTIVE_LIBS))) {\n-            IClasspathEntry[] librariesToAdd = bundle.getLibraryClasspaths(project, missingLibraries, true);\n-            addClasspath(project, librariesToAdd);\n-        } else if (!missingLibraries.isEmpty()) {\n-            MessageDialog.openWarning(Activator.getShell(), \"Missing Libraries\", \n-               \"This project does not have the required runtime libraries. You must add them manually\");\n-        }\n-        fireLabelEvent(project);\n-        Activator.log(\"Adding nature \" + natureId + \" to project \" + project.getName() + \" done...\");\n-        return true;\n-    }\n-    \n-    /**\n-     * Add the captive runtime libraries of the bundle to the classpath of the given project.\n-     */\n-    private void addClasspath(IProject project, IClasspathEntry[] libs) throws CoreException {\n-        if (libs.length == 0)\n-            return;\n-        IJavaProject javaProject = JavaCore.create(project);\n-        IClasspathEntry[] projectClasspaths = javaProject.getRawClasspath();\n-\n-        IClasspathEntry[] newClasspaths = new IClasspathEntry[projectClasspaths.length + libs.length];\n-        System.arraycopy(libs, 0, newClasspaths, 0, libs.length);\n-        System.arraycopy(projectClasspaths, 0, newClasspaths, libs.length, projectClasspaths.length);\n-        javaProject.setRawClasspath(newClasspaths, null);\n-        \n-        project.setPersistentProperty(PluginProperty.USING_CAPTIVE_LIBS, \"\"+true);\n-    }\n-\n-    /**\n-     * Removes the nature from the project. Removes captive OpenJPA libraries from the project's classpath,\n-     * if it has been added.\n-     */\n-    private boolean removeNature(IProject project, int natureIndex) throws CoreException {\n-        Shell shell = Activator.getShell();\n-        RemoveNatureDialog dialog = new RemoveNatureDialog(shell, project,\n-             \"Disable OpenJPA\",\n-             \"OpenJPA Plugin\",\n-             \"Enhances bytecode of persistent entities as you compile\");\n-        dialog.open();\n-        if (dialog.getReturnCode() != Window.OK) {\n-            return false;\n-        }\n-        IProjectDescription description = project.getDescription();\n-        String[] natures = description.getNatureIds();\n-        Activator.log(this + \".removeNature(\" + OpenJPANature.NATURE_ID + \")\");\n-        String[] newNatures = new String[natures.length - 1];\n-        System.arraycopy(natures, 0, newNatures, 0, natureIndex);\n-        System.arraycopy(natures, natureIndex + 1, newNatures, natureIndex, natures.length - natureIndex - 1);\n-        description.setNatureIds(newNatures);\n-        project.setDescription(description, null);\n-        \n-        removeClasspath(project);\n-        fireLabelEvent(project);\n-        \n-        Activator.log(this + \".removeNature()...done\");\n-        return true;\n-    }\n-    \n-    /**\n-     * Gets the index of the given nature in the given project.\n-     * @param project\n-     * @param natureId\n-     * @return -1 if the nature is not present.\n-     * @throws CoreException\n-     */\n-    private int getNatureIndex(IProject project, String natureId) throws CoreException {\n-        IProjectDescription description = project.getDescription();\n-        String[] natures = description.getNatureIds();\n-        for (int i = 0; i < natures.length; ++i) {\n-            if (OpenJPANature.NATURE_ID.equals(natures[i])) {\n-                return i;\n-            }\n-        }\n-        return -1;\n-    }\n-\n-    // remove classpath entries\n-    private void removeClasspath(IProject project) throws CoreException {\n-        if (\"false\".equalsIgnoreCase(project.getPersistentProperty(PluginProperty.USING_CAPTIVE_LIBS))) {\n-            return;\n-        }\n-        IJavaProject javaProject = JavaCore.create(project);\n-        IClasspathEntry[] projectClasspaths = javaProject.getRawClasspath();\n-\n-        PluginLibrary cpc = new PluginLibrary();\n-        IClasspathEntry[] cpsOpenJPA = cpc.getLibraryClasspaths(project, null, false);\n-        List<IClasspathEntry> cpsModified = new ArrayList<IClasspathEntry>();\n-        cpsModified.addAll(Arrays.asList(projectClasspaths));\n-        cpsModified.removeAll(Arrays.asList(cpsOpenJPA));\n-        javaProject.setRawClasspath(cpsModified.toArray(new IClasspathEntry[cpsModified.size()]), null);\n-        \n-        project.setPersistentProperty(PluginProperty.USING_CAPTIVE_LIBS, \"\"+false);\n-    }\n-\n-    boolean contains(IClasspathEntry[] list, IClasspathEntry key) {\n-        for (IClasspathEntry cp : list) {\n-            if (cp.equals(key))\n-                return true;\n-        }\n-        return false;\n-    }\n-\n-    /**\n-     * Fire an event to redraw the label for the given project element.\n-     */\n-    private void fireLabelEvent(final IProject project) {\n-        Activator.getDisplay().asyncExec(new Runnable() {\n-            public void run() {\n-                ProjectDecorator labeler = Activator.getLabelProvider();\n-                if (labeler == null)\n-                    return;\n-                LabelProviderChangedEvent event = new LabelProviderChangedEvent(labeler, project);\n-                labeler.fireLabelProviderChanged(event);\n-            }\n-        });\n-    }\n-}"},{"sha":"9875a55c9878beb7c44534def9fb1242149e5cc8","filename":"contrib/devtools/org.apache.openjpa.eclipse/src/main/java/org/apache/openjpa/eclipse/ui/AbstractDialog.java","status":"removed","additions":0,"deletions":105,"changes":105,"blob_url":"https://github.com/apache/openjpa/blob/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse/src/main/java/org/apache/openjpa/eclipse/ui/AbstractDialog.java","raw_url":"https://github.com/apache/openjpa/raw/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse/src/main/java/org/apache/openjpa/eclipse/ui/AbstractDialog.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/contrib/devtools/org.apache.openjpa.eclipse/src/main/java/org/apache/openjpa/eclipse/ui/AbstractDialog.java?ref=bbc296ba29c2c6dd5620934446fd71c8561db6e4","patch":"@@ -1,105 +0,0 @@\n-/*\n- * Copyright 2002-2009 the original author or authors.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.openjpa.eclipse.ui;\n-\n-import org.apache.openjpa.eclipse.Activator;\n-import org.eclipse.core.resources.IProject;\n-import org.eclipse.jface.dialogs.IDialogConstants;\n-import org.eclipse.jface.dialogs.TitleAreaDialog;\n-import org.eclipse.swt.SWT;\n-import org.eclipse.swt.graphics.Image;\n-import org.eclipse.swt.layout.GridData;\n-import org.eclipse.swt.layout.GridLayout;\n-import org.eclipse.swt.widgets.Composite;\n-import org.eclipse.swt.widgets.Control;\n-import org.eclipse.swt.widgets.Label;\n-import org.eclipse.swt.widgets.Shell;\n-\n-public abstract class AbstractDialog extends TitleAreaDialog {\n-    protected final IProject project;\n-    protected final String header;\n-    protected final String title;\n-    protected final String message;\n-    \n-    public static Image logo;\n-    static {\n-        try {\n-            logo = Activator.getImageDescriptor(\"icons/openjpa-logo-small.png\").createImage();\n-        } catch (Exception e) {\n-        }\n-    }\n-    \n-    public AbstractDialog(Shell parentShell, IProject project, String header, String title, String message) {\n-        super(parentShell);\n-        this.project = project;\n-        this.header = header;\n-        this.title = title;\n-        this.message = message;\n-        this.setBlockOnOpen(true);\n-    }\n-    \n-    /**\n-     * Creates the dialog's contents\n-     * \n-     * @param parent the parent composite\n-     * @return Control\n-     */\n-    protected Control createContents(Composite parent) {\n-      Control contents = super.createContents(parent);\n-\n-      this.setTitle(title);\n-      this.setMessage(message);\n-      this.setTitleImage(logo);\n-      getShell().setText(header);\n-\n-      return contents;\n-    }\n-    \n-    /**\n-     * Creates the dialog's content area\n-     * \n-     */\n-    protected Control createDialogArea(Composite parent) {\n-        Composite composite = new Composite(parent, SWT.NONE);\n-        GridLayout layout = new GridLayout();\n-        layout.marginHeight = 0;\n-        layout.marginWidth = 0;\n-        layout.verticalSpacing = 10;\n-        layout.horizontalSpacing = 10;\n-        layout.marginLeft = 10;\n-        layout.marginRight = 10;\n-        composite.setLayout(layout);\n-        GridData gridData = new GridData(SWT.FILL, SWT.FILL, true, true);\n-        composite.setLayoutData(gridData);\n-        composite.setFont(parent.getFont());\n-        // Build the separator line\n-        Label titleBarSeparator = new Label(composite, SWT.HORIZONTAL | SWT.SEPARATOR);\n-        titleBarSeparator.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n-        \n-        return composite;\n-    }\n-    \n-    /**\n-     * Creates the buttons for the button bar.\n-     * \n-     * @param parent the parent composite\n-     */\n-    protected void createButtonsForButtonBar(Composite parent) {\n-        createButton(parent, IDialogConstants.OK_ID, IDialogConstants.OK_LABEL, true);\n-        createButton(parent, IDialogConstants.CANCEL_ID, IDialogConstants.CANCEL_LABEL, false);\n-    }\n-\n-}"},{"sha":"c1bec4eb0fa5c83dba646216be6be6fc4114b391","filename":"contrib/devtools/org.apache.openjpa.eclipse/src/main/java/org/apache/openjpa/eclipse/ui/AddNatureDialog.java","status":"removed","additions":0,"deletions":187,"changes":187,"blob_url":"https://github.com/apache/openjpa/blob/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse/src/main/java/org/apache/openjpa/eclipse/ui/AddNatureDialog.java","raw_url":"https://github.com/apache/openjpa/raw/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse/src/main/java/org/apache/openjpa/eclipse/ui/AddNatureDialog.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/contrib/devtools/org.apache.openjpa.eclipse/src/main/java/org/apache/openjpa/eclipse/ui/AddNatureDialog.java?ref=bbc296ba29c2c6dd5620934446fd71c8561db6e4","patch":"@@ -1,187 +0,0 @@\n-/*\n- * Copyright 2002-2009 the original author or authors.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.openjpa.eclipse.ui;\n-\n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.List;\n-\n-import org.apache.openjpa.eclipse.PluginProperty;\n-import org.eclipse.core.resources.IProject;\n-import org.eclipse.core.runtime.CoreException;\n-import org.eclipse.core.runtime.QualifiedName;\n-import org.eclipse.swt.SWT;\n-import org.eclipse.swt.events.SelectionEvent;\n-import org.eclipse.swt.events.SelectionListener;\n-import org.eclipse.swt.layout.GridData;\n-import org.eclipse.swt.layout.GridLayout;\n-import org.eclipse.swt.widgets.Button;\n-import org.eclipse.swt.widgets.Composite;\n-import org.eclipse.swt.widgets.Control;\n-import org.eclipse.swt.widgets.Display;\n-import org.eclipse.swt.widgets.Group;\n-import org.eclipse.swt.widgets.Label;\n-import org.eclipse.swt.widgets.Shell;\n-\n-/**\n- * A dialog to inform that bundle runtime libraries will be added to the classpath of\n- * a project.\n- * \n- * @author Pinaki Poddar\n- *\n- */\n-public class AddNatureDialog extends AbstractDialog {\n-    \n-    private final List<String> requiredLibs;\n-    private Button addLibrary;\n-    \n-    public static void main(String[] args) throws Exception {\n-        Display d = Display.getDefault();//PlatformUI.getWorkbench().getDisplay();\n-        Shell shell = new Shell(d);\n-        AddNatureDialog dialog = new AddNatureDialog(shell, null, \"Test Header\", \"Test Title\", \"Test Message\", \n-                new ArrayList<String>());\n-        dialog.open();\n-    }\n-    \n-    public AddNatureDialog(Shell parentShell, IProject project, String header, String title, String message,\n-            List<String> libariesToBeAdded) {\n-        super(parentShell, project, header, title, message);\n-        if (libariesToBeAdded == null) {\n-            requiredLibs =  Collections.emptyList();\n-        } else {\n-            requiredLibs = libariesToBeAdded;\n-        }\n-        try {\n-            project.setPersistentProperty(PluginProperty.REQUIRES_CAPTIVE_LIBS, \"\"+!requiredLibs.isEmpty());\n-        } catch (CoreException e) {\n-        }\n-    }\n-    \n-    /**\n-     * Creates the dialog's content area.\n-     * \n-     */\n-    protected Control createDialogArea(Composite parent) {\n-        Composite composite = (Composite)super.createDialogArea(parent);\n-      \n-        boolean requiresCaptiveLibs = !requiredLibs.isEmpty();\n-        String message = requiresCaptiveLibs \n-            ? \"Following libraries are missing from the project's classpath. \\r\\n\" +\n-              \"The plugin's captive version of these libraries will be added to the project's classpath.\\r\\n\" +\n-              \"If you want to add the libraries manually later, please uncheck the box.\"\n-            : \"Required libraries are already available to the project's classpath\";\n-        \n-        addLibrary = createCheckBox(composite, message, PluginProperty.REQUIRES_CAPTIVE_LIBS);\n-        addLibrary.setSelection(requiresCaptiveLibs);\n-        addLibrary.setEnabled(requiresCaptiveLibs);\n-        if (requiresCaptiveLibs) {\n-            org.eclipse.swt.widgets.List libList = new \n-                org.eclipse.swt.widgets.List(composite, SWT.BORDER | SWT.MULTI | SWT.V_SCROLL);\n-            for (String lib : requiredLibs)\n-                libList.add(lib);\n-            libList.setEnabled(false);\n-        }\n-        final Group enhanceOptions = new Group(composite, SWT.NONE);\n-        enhanceOptions.setText(\"Bytecode Enhancement Options\");\n-        GridLayout layout = new GridLayout();\n-        GridData gridData = new GridData(SWT.FILL, SWT.FILL, true, false);\n-        layout.marginTop = 10;\n-        layout.marginBottom = 10;\n-        enhanceOptions.setLayout(layout);\n-        enhanceOptions.setLayoutData(gridData);\n-        \n-        Button overwrite = createCheckBox(enhanceOptions, \"Overwrite *.class files\");\n-        overwrite.setSelection(true); \n-        overwrite.setGrayed(true); \n-        overwrite.setEnabled(false);\n-        \n-        Button output = createCheckBox(enhanceOptions, \"Write enhanced classes\", null);\n-        output.setSelection(true); \n-        output.setGrayed(true); \n-        output.setEnabled(false);\n-        \n-        createCheckBox(enhanceOptions, \"Add no-arg constructor to persistent entity\", PluginProperty.ADD_CONSTRUCTOR);\n-        createCheckBox(enhanceOptions, \"Enforce Property Restriction\", PluginProperty.ENFORCE_PROP);\n-        \n-        new Label(parent, SWT.NONE); // empty space\n-        Label endBar = new Label(parent, SWT.HORIZONTAL | SWT.SEPARATOR);\n-        endBar.setLayoutData(new GridData(GridData.GRAB_VERTICAL|GridData.FILL_HORIZONTAL));\n-\n-        return composite;\n-    }\n-    \n-    public boolean getAddLibrary() {\n-        return addLibrary.getSelection();\n-    }\n-    \n-    Button createCheckBox(Composite parent, String text) {\n-        return createCheckBox(parent, text, null);\n-    }\n-    \n-    Button createCheckBox(Composite parent, String text, QualifiedName prop) {\n-        Button b = new Button(parent, SWT.CHECK);\n-        b.setText(text);\n-        GridData gridData = new GridData(GridData.FILL, GridData.CENTER, true, false);\n-        b.setLayoutData(gridData);\n-        if (prop != null) {\n-            b.addSelectionListener(new BooleanPropertyRegister(b, prop));\n-            try {\n-                boolean selected = \"true\".equals(project.getPersistentProperty(prop));\n-                b.setSelection(selected);\n-            } catch (CoreException ex) {\n-                \n-            }\n-        }\n-        return b;\n-    }\n-    \n-    /**\n-     * Tracks the given boolean property of a project by selection state of the given button. \n-     * \n-     * @author Pinaki Poddar\n-     *\n-     */\n-    private class BooleanPropertyRegister implements SelectionListener {\n-        private Button button;\n-        private QualifiedName property;\n-        \n-        /**\n-         * Sets the state of the given button according to the boolean value of the given property.\n-         * @param b the button to attach to the given property.\n-         * @param p the property to track\n-         */\n-        public BooleanPropertyRegister(Button b, QualifiedName p) {\n-            button = b;\n-            property = p;\n-            if (property != null) {\n-            }\n-        }\n-\n-        public void widgetDefaultSelected(SelectionEvent e) {\n-        }\n-\n-        public void widgetSelected(SelectionEvent e) {\n-            if (property != null) {\n-                try {\n-                    project.setPersistentProperty(property, \"\"+button.getSelection());\n-                } catch (CoreException ex) {\n-                    \n-                }\n-            }\n-        }\n-    }\n-}\n-"},{"sha":"268f325149cab9c4029758317d2201bac95ba08a","filename":"contrib/devtools/org.apache.openjpa.eclipse/src/main/java/org/apache/openjpa/eclipse/ui/ProjectDecorator.java","status":"removed","additions":0,"deletions":79,"changes":79,"blob_url":"https://github.com/apache/openjpa/blob/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse/src/main/java/org/apache/openjpa/eclipse/ui/ProjectDecorator.java","raw_url":"https://github.com/apache/openjpa/raw/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse/src/main/java/org/apache/openjpa/eclipse/ui/ProjectDecorator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/contrib/devtools/org.apache.openjpa.eclipse/src/main/java/org/apache/openjpa/eclipse/ui/ProjectDecorator.java?ref=bbc296ba29c2c6dd5620934446fd71c8561db6e4","patch":"@@ -1,79 +0,0 @@\n-/*\n- * Copyright 2002-2009 the original author or authors.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.openjpa.eclipse.ui;\n-\n-import org.apache.openjpa.eclipse.Activator;\n-import org.apache.openjpa.eclipse.OpenJPANature;\n-import org.eclipse.core.resources.IProject;\n-import org.eclipse.core.runtime.CoreException;\n-import org.eclipse.jface.resource.ImageDescriptor;\n-import org.eclipse.jface.viewers.IDecoration;\n-import org.eclipse.jface.viewers.ILabelProviderListener;\n-import org.eclipse.jface.viewers.ILightweightLabelDecorator;\n-import org.eclipse.jface.viewers.LabelProvider;\n-import org.eclipse.jface.viewers.LabelProviderChangedEvent;\n-\n-/**\n- * Decorates the project root node with an image if OpenJPA nature is enabled for the project.\n- * \n- * @author Pinaki Poddar\n- *\n- */\n-public class ProjectDecorator extends LabelProvider implements ILightweightLabelDecorator, ILabelProviderListener {\n-    public static final String DECORATOR_ID   = \"org.apache.openjpa.eclipse.Decorator\";\n-    public static final ImageDescriptor decor = Activator.getImageDescriptor(\"icons/apache-feather-small.jpg\");\n-    \n-    public ProjectDecorator() {\n-        addListener(this);\n-    }\n-    \n-    /** \n-     * Decorate the project root if it has the OpenJPA nature.\n-     */\n-    public void decorate(Object element, IDecoration decoration) {\n-        if (!(element instanceof IProject)) {\n-            return;\n-        }\n-        try {\n-            if (((IProject)element).hasNature(OpenJPANature.NATURE_ID)) {\n-                decoration.addOverlay(decor);\n-            } else {\n-                decoration.addOverlay(null);\n-            }\n-        } catch (CoreException e) {\n-        }\n-    }\n-\n-\n-    public void dispose() {\n-        removeListener(this);\n-    }\n-\n-    /**\n-     * Returns whether the label will be affected by the change in the given property of the given element.\n-     * Always returns false.\n-     */\n-    public boolean isLabelProperty(Object element, String property) {\n-        return false;\n-    }\n-\n-    public void fireLabelProviderChanged(LabelProviderChangedEvent e) {\n-        super.fireLabelProviderChanged(e);\n-    }\n-    \n-    public void labelProviderChanged(LabelProviderChangedEvent event) {\n-    }\n-}"},{"sha":"49cdce2c553bf55c973d67f5cc2e897388d467fe","filename":"contrib/devtools/org.apache.openjpa.eclipse/src/main/java/org/apache/openjpa/eclipse/ui/RemoveNatureDialog.java","status":"removed","additions":0,"deletions":79,"changes":79,"blob_url":"https://github.com/apache/openjpa/blob/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse/src/main/java/org/apache/openjpa/eclipse/ui/RemoveNatureDialog.java","raw_url":"https://github.com/apache/openjpa/raw/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse/src/main/java/org/apache/openjpa/eclipse/ui/RemoveNatureDialog.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/contrib/devtools/org.apache.openjpa.eclipse/src/main/java/org/apache/openjpa/eclipse/ui/RemoveNatureDialog.java?ref=bbc296ba29c2c6dd5620934446fd71c8561db6e4","patch":"@@ -1,79 +0,0 @@\n-/*\n- * Copyright 2002-2009 the original author or authors.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.openjpa.eclipse.ui;\n-\n-import org.apache.openjpa.eclipse.PluginProperty;\n-import org.eclipse.core.resources.IProject;\n-import org.eclipse.core.runtime.CoreException;\n-import org.eclipse.swt.SWT;\n-import org.eclipse.swt.layout.GridData;\n-import org.eclipse.swt.widgets.Composite;\n-import org.eclipse.swt.widgets.Control;\n-import org.eclipse.swt.widgets.Display;\n-import org.eclipse.swt.widgets.Label;\n-import org.eclipse.swt.widgets.Shell;\n-\n-/**\n- * A dialog to confirm removing the nature from user project.\n- * \n- * @author Pinaki Poddar\n- *\n- */\n-public class RemoveNatureDialog extends AbstractDialog {\n-    \n-    public RemoveNatureDialog(Shell parentShell, IProject project, String header, String title, String message) {\n-        super(parentShell, project, header, title, message);\n-    }\n-    \n-    /**\n-     * Creates the dialog's content area.\n-     * \n-     */\n-    protected Control createDialogArea(Composite parent) {\n-        Composite composite = (Composite)super.createDialogArea(parent);\n-        boolean warn = false;\n-        try {\n-            warn = \"true\".equalsIgnoreCase(project.getPersistentProperty(PluginProperty.USING_CAPTIVE_LIBS));\n-        } catch (CoreException e) {\n-        }\n-        String message = warn \n-           ? \"Disabling OpenJPA will remove runtime libraries added to \" + project.getName() + \".\\r\\n\" +\n-            \"This project may not build after removing these libraries.\\r\\n\" +\n-            \"Are you sure you want to remove OpenJPA nature from \" + project.getName() + \"?\"\n-           : \"Remove OpenJPA nature from\" + project.getName() + \"?\";     \n-        new Label(composite, SWT.NONE).setText(message);\n-        \n-        Label endBar = new Label(parent, SWT.HORIZONTAL | SWT.SEPARATOR);\n-        endBar.setLayoutData(new GridData(GridData.GRAB_VERTICAL|GridData.FILL_HORIZONTAL));\n-        \n-        return composite;\n-    }\n-    \n-    /**\n-     * Test\n-     * @param args\n-     * @throws Exception\n-     */\n-    public static void main(String[] args) throws Exception {\n-        Display d = Display.getDefault();//PlatformUI.getWorkbench().getDisplay();\n-        Shell shell = new Shell(d);\n-        RemoveNatureDialog dialog = new RemoveNatureDialog(shell, null, \"Test Header\", \"Test Title\", \"Test Message\");\n-        dialog.open();\n-    }\n-    \n-\n-}\n-"},{"sha":"4599e46dd524318cf68e7ca0e74cc48d1bce9c4f","filename":"contrib/devtools/org.apache.openjpa.eclipse/src/main/java/org/apache/openjpa/eclipse/util/ClassLoaderFromIProjectHelper.java","status":"removed","additions":0,"deletions":86,"changes":86,"blob_url":"https://github.com/apache/openjpa/blob/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse/src/main/java/org/apache/openjpa/eclipse/util/ClassLoaderFromIProjectHelper.java","raw_url":"https://github.com/apache/openjpa/raw/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse/src/main/java/org/apache/openjpa/eclipse/util/ClassLoaderFromIProjectHelper.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/contrib/devtools/org.apache.openjpa.eclipse/src/main/java/org/apache/openjpa/eclipse/util/ClassLoaderFromIProjectHelper.java?ref=bbc296ba29c2c6dd5620934446fd71c8561db6e4","patch":"@@ -1,86 +0,0 @@\n-/*\n- * Copyright 2002-2009 the original author or authors.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.openjpa.eclipse.util;\n-\n-import java.net.MalformedURLException;\n-import java.net.URL;\n-import java.net.URLClassLoader;\n-\n-import org.apache.openjpa.eclipse.Activator;\n-import org.eclipse.core.resources.IProject;\n-import org.eclipse.core.runtime.CoreException;\n-import org.eclipse.core.runtime.IStatus;\n-import org.eclipse.core.runtime.Status;\n-import org.eclipse.jdt.core.IJavaProject;\n-import org.eclipse.jdt.core.JavaCore;\n-import org.eclipse.jdt.launching.JavaRuntime;\n-\n-/**\n- * Helper to get a ClassLoader from an Eclipse IProject. \n- *\n- * @author Kai Kreuzer\n- * @author Michael Vorburger\n- */\n-public class ClassLoaderFromIProjectHelper {\n-    private static final char BACKSLASH = '\\\\';\n-    private static final char FORWARDSLASH = '/';\n-    private static final String PROTOCOL_FILE = \"file:///\";\n-    private static final String JAR_EXTENSION = \".jar\";\n-    private static final String DIRECTORY_MARKER = \"/\";\n-    \n-    /**\n-     * Creates a classloader for the given Eclipse Project.\n-     * \n-     * @param project a Eclipse Java Project\n-     * @return a URLClassLoader with the configured classpath of the given project\n-     * @throws CoreException\n-     */\n-\tpublic static ClassLoader createClassLoader(IProject project) throws CoreException {\n-\t\tIJavaProject javaProject = JavaCore.create(project);\n-        String[] classPath = JavaRuntime.computeDefaultRuntimeClassPath(javaProject);\n-        URL[] urls = new URL[classPath.length];\n-        for(int i=0; i < classPath.length; i++) {\n-        \ttry {\n-        \t\tString urlString = PROTOCOL_FILE + classPath[i].replace(BACKSLASH, FORWARDSLASH);\n-        \t\t\n-        \t\t// make sure that directory URLs end with a slash as they are otherwise not \n-        \t\t// treated as directories but as libraries by the URLClassLoader\n-        \t\tif(!classPath[i].endsWith(JAR_EXTENSION) && !classPath[i].endsWith(DIRECTORY_MARKER)) \n-        \t\t    urlString += DIRECTORY_MARKER;\n-\t\t\t\turls[i] = new URL(urlString);\n-\t\t\t} catch (MalformedURLException e) {\n-\t\t\t\tthrow new CoreException(new Status(IStatus.ERROR, Activator.PLUGIN_ID,\n-\t\t\t\t\t\t\"Could not resolve classpath correctly.\", e));\n-\t\t\t}\n-        }\n-        return URLClassLoader.newInstance(urls);\n-\t}\n-\t\n-    /**\n-     * Get the class of the given name by loading it using the given project's classpath.\n-     * \n-     * @return null if the given class can not be loaded.\n-     */\n-    public static Class<?> findClass(String className, IProject project) {\n-        try {\n-            return Class.forName(className, false, createClassLoader(project));\n-        } catch (Exception e) {\n-            return null;\n-        }\n-    }\n-\n-}"},{"sha":"36964c6219aa2412eea257705c17f8976962917b","filename":"contrib/devtools/org.apache.openjpa.eclipse/src/main/java/org/apache/openjpa/eclipse/util/EclipseLogFactory.java","status":"removed","additions":0,"deletions":60,"changes":60,"blob_url":"https://github.com/apache/openjpa/blob/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse/src/main/java/org/apache/openjpa/eclipse/util/EclipseLogFactory.java","raw_url":"https://github.com/apache/openjpa/raw/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse/src/main/java/org/apache/openjpa/eclipse/util/EclipseLogFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/contrib/devtools/org.apache.openjpa.eclipse/src/main/java/org/apache/openjpa/eclipse/util/EclipseLogFactory.java?ref=bbc296ba29c2c6dd5620934446fd71c8561db6e4","patch":"@@ -1,60 +0,0 @@\n-/*\n- * Copyright 2002-2009 the original author or authors.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.openjpa.eclipse.util;\n-\n-import org.apache.openjpa.lib.log.AbstractLog;\n-import org.apache.openjpa.lib.log.Log;\n-import org.apache.openjpa.lib.log.LogFactory;\n-\n-/**\n- * An OpenJPA LogFactory which logs using the Eclipse logging stuff.\n- * \n- * @see LogFactory\n- * @see LogUtil\n- * \n- * @author Michael Vorburger\n- */\n-public class EclipseLogFactory implements LogFactory {\n-\n-\t/**\n-\t * @see http://openjpa.apache.org/builds/latest/docs/manual/ref_guide_logging_custom.html\n-\t * \n-\t * @see org.apache.openjpa.lib.log.LogFactory#getLog(java.lang.String)\n-\t */\n-\tpublic Log getLog(String channel) {\n-\t\treturn new AbstractLog() {\n-\n-            protected boolean isEnabled(short logLevel) {\n-                // log all levels\n-                return true;\n-            }\n-\n-            protected void log(short type, String message, Throwable t) {\n-            \tif (type == Log.ERROR || type == Log.FATAL)\n-            \t\tLogUtil.logError(\"OpenJPA Error: \" + message, t);\n-            \tif (type == Log.WARN)\n-            \t\tLogUtil.logWarn(\"OpenJPA Warning: \" + message, t);\n-            \t\n-            \t// Ignore other internal messages... could be made this configurable via Builder argument \n-            \t// (like include pattern), if really needed \n-            \t// else\n-            \t// LogUtil.logInfo(\"OpenJPA Info: \" + message, t);\n-            }\n-        };\n-\t}\n-\n-}"},{"sha":"81932a007212a26b5f8d1bae36c99f430cc5cb58","filename":"contrib/devtools/org.apache.openjpa.eclipse/src/main/java/org/apache/openjpa/eclipse/util/LogUtil.java","status":"removed","additions":0,"deletions":62,"changes":62,"blob_url":"https://github.com/apache/openjpa/blob/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse/src/main/java/org/apache/openjpa/eclipse/util/LogUtil.java","raw_url":"https://github.com/apache/openjpa/raw/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse/src/main/java/org/apache/openjpa/eclipse/util/LogUtil.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/contrib/devtools/org.apache.openjpa.eclipse/src/main/java/org/apache/openjpa/eclipse/util/LogUtil.java?ref=bbc296ba29c2c6dd5620934446fd71c8561db6e4","patch":"@@ -1,62 +0,0 @@\n-/*\n- * Copyright 2002-2009 the original author or authors.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.openjpa.eclipse.util;\n-\n-\n-import org.apache.openjpa.eclipse.Activator;\n-import org.eclipse.core.runtime.Status;\n-\n-/**\n- * Helper for Logging.\n- * \n- * @author Michael Vorburger\n- */\n-public final class LogUtil {\n-\tprivate LogUtil() { };\n-\t\n-\tpublic static void logOK(String msg) {\n-\t\tlog(Status.OK, msg);\n-\t\t\n-\t}\n-\tpublic static void logInfo(String msg) {\n-\t\tlog(Status.INFO, msg);\n-\t}\n-\t\n-\tpublic static void logInfo(String msg, Throwable t) {\n-\t\tlog(Status.INFO, msg, t);\n-\t}\n-\n-\tpublic static void logWarn(String msg, Throwable t) {\n-\t\tlog(Status.WARNING, msg, t);\n-\t}\n-\t\n-\tpublic static void logError(Throwable t) {\n-\t\tlog(Status.ERROR, t.getMessage(), t);\n-\t}\n-\n-\tpublic static void logError(String msg, Throwable t) {\n-\t\tlog(Status.ERROR, msg, t);\n-\t}\n-\n-\tprivate static void log(int status, String msg) {\n-\t\tActivator.getDefault().getLog().log(new Status(status, Activator.PLUGIN_ID, msg));\n-\t}\n-\n-\tprivate static void log(int status, String msg, Throwable t) {\n-\t\tActivator.getDefault().getLog().log(new Status(status, Activator.PLUGIN_ID, msg, t));\n-\t}\n-}"},{"sha":"649fe27078dae9d0c0c65876e95826c09017c3ed","filename":"contrib/devtools/org.apache.openjpa.eclipse/src/main/java/org/apache/openjpa/eclipse/util/PCEnhancerHelper.java","status":"removed","additions":0,"deletions":33,"changes":33,"blob_url":"https://github.com/apache/openjpa/blob/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse/src/main/java/org/apache/openjpa/eclipse/util/PCEnhancerHelper.java","raw_url":"https://github.com/apache/openjpa/raw/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse/src/main/java/org/apache/openjpa/eclipse/util/PCEnhancerHelper.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/contrib/devtools/org.apache.openjpa.eclipse/src/main/java/org/apache/openjpa/eclipse/util/PCEnhancerHelper.java?ref=bbc296ba29c2c6dd5620934446fd71c8561db6e4","patch":"@@ -1,33 +0,0 @@\n-/*\n- * Copyright 2002-2009 the original author or authors.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.openjpa.eclipse.util;\n-\n-import java.io.File;\n-import java.io.IOException;\n-\n-import org.eclipse.core.runtime.CoreException;\n-\n-/**\n- * Interface to an OpenJPA Persistence Capable Enhancer Helper implementation.\n- * \n- * @author Michael Vorburger\n- */\n-public interface PCEnhancerHelper {\n-\n-\tboolean enhance(File resource) throws CoreException, IOException, ClassNotFoundException;\n-\n-}\n\\ No newline at end of file"},{"sha":"b8f7ee23d01db6a29e0d0c3a359e7bbcc8a91577","filename":"contrib/devtools/org.apache.openjpa.eclipse/src/main/java/org/apache/openjpa/eclipse/util/PCEnhancerHelperClassLoadingWrapper.java","status":"removed","additions":0,"deletions":91,"changes":91,"blob_url":"https://github.com/apache/openjpa/blob/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse/src/main/java/org/apache/openjpa/eclipse/util/PCEnhancerHelperClassLoadingWrapper.java","raw_url":"https://github.com/apache/openjpa/raw/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse/src/main/java/org/apache/openjpa/eclipse/util/PCEnhancerHelperClassLoadingWrapper.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/contrib/devtools/org.apache.openjpa.eclipse/src/main/java/org/apache/openjpa/eclipse/util/PCEnhancerHelperClassLoadingWrapper.java?ref=bbc296ba29c2c6dd5620934446fd71c8561db6e4","patch":"@@ -1,91 +0,0 @@\n-/*\n- * Copyright 2002-2009 the original author or authors.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.openjpa.eclipse.util;\n-\n-import java.io.File;\n-import java.io.IOException;\n-\n-import org.eclipse.core.runtime.CoreException;\n-\n-/**\n- * PCEnhancerHelper implementation wrapping around the original\n- * PCEnhancerHelperImpl, but delegating lookup of the actual OpenJPA classes to\n- * a passed-in classloader (the one of the project).\n- * \n- * The idea is to use the OpenJPA JARs from the projects under enhancement, and\n- * in the future no longer bundle them in the plug-in. This way the plug-in is\n- * independent of the OpenJPA version. This is important as the enhancer\n- * implementation can change between OpenJPA versions, and the enhancer of the\n- * same OpenJPA version than the project has on it's classpath should naturally\n- * be used, not some fixed arbitrary version that happens to come with the\n- * plug-in.\n- * \n- * @author Michael Vorburger\n- */\n-public class PCEnhancerHelperClassLoadingWrapper implements PCEnhancerHelper {\n-\n-\t/*\n-\t * TODO PCEnhancerHelperClassLoadingWrapper does not yet work! FIXME!!!  \n-\t * Thread.currentThread().setContextClassLoader seems to have no effect, how the h%#� ??? ;-)\n-\t */\n-\t\n-\tprivate final ClassLoader classLoader;\n-\tprivate final PCEnhancerHelper delegateHelper;\n-\t\n-\tpublic PCEnhancerHelperClassLoadingWrapper(ClassLoader classLoader) {\n-\t\tthis.classLoader = new FunkyClassLoader(classLoader, Thread.currentThread().getContextClassLoader());\n-\n-\t\tClassLoader currentCL = Thread.currentThread().getContextClassLoader();\n-\t\tThread.currentThread().setContextClassLoader(this.classLoader);\n-\t\ttry {\n-\t\t\tdelegateHelper = new PCEnhancerHelperImpl(classLoader);\n-\t\t} finally {\n-\t\t\tThread.currentThread().setContextClassLoader(currentCL);\n-\t\t}\n-\t}\n-\t\n-\tpublic boolean enhance(File resource) throws CoreException, IOException, ClassNotFoundException {\n-\t\tClassLoader currentCL = Thread.currentThread().getContextClassLoader();\n-\t\tThread.currentThread().setContextClassLoader(this.classLoader);\n-\t\ttry {\n-\t\t\treturn delegateHelper.enhance(resource);\n-\t\t} finally {\n-\t\t\tThread.currentThread().setContextClassLoader(currentCL);\n-\t\t}\n-\t}\n-\t\n-\tprivate static class FunkyClassLoader extends ClassLoader {\n-\t\tfinal private ClassLoader delegate;\n-\t\tfinal private ClassLoader cl;\n-\n-\t\tpublic FunkyClassLoader(ClassLoader cl, ClassLoader delegate) {\n-\t\t\tthis.cl = cl;\n-\t\t\tthis.delegate = delegate;\n-\t\t}\n-\t\t\n-\t\t// TODO Is it loadClass() or rather findClass() that needs overriding? \n-\t\t\n-\t\t@Override\n-\t\tpublic Class<?> loadClass(String name) throws ClassNotFoundException {\n-\t\t\ttry {\n-\t\t\t\treturn cl.loadClass(name);\n-\t\t\t} catch(ClassNotFoundException e) {\n-\t\t\t\treturn delegate.loadClass(name);\n-\t\t\t}\n-\t\t}\n-\t}\n-}"},{"sha":"21feee23238a41da8bdedbef3ab1e90acab1ca38","filename":"contrib/devtools/org.apache.openjpa.eclipse/src/main/java/org/apache/openjpa/eclipse/util/PCEnhancerHelperImpl.java","status":"removed","additions":0,"deletions":113,"changes":113,"blob_url":"https://github.com/apache/openjpa/blob/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse/src/main/java/org/apache/openjpa/eclipse/util/PCEnhancerHelperImpl.java","raw_url":"https://github.com/apache/openjpa/raw/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse/src/main/java/org/apache/openjpa/eclipse/util/PCEnhancerHelperImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/contrib/devtools/org.apache.openjpa.eclipse/src/main/java/org/apache/openjpa/eclipse/util/PCEnhancerHelperImpl.java?ref=bbc296ba29c2c6dd5620934446fd71c8561db6e4","patch":"@@ -1,113 +0,0 @@\n-/*\n- * Copyright 2002-2009 the original author or authors.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.openjpa.eclipse.util;\n-\n-import java.io.File;\n-import java.io.IOException;\n-import java.util.Properties;\n-\n-import javax.persistence.Embeddable;\n-import javax.persistence.Entity;\n-import javax.persistence.MappedSuperclass;\n-\n-import org.apache.openjpa.conf.OpenJPAConfiguration;\n-import org.apache.openjpa.conf.OpenJPAConfigurationImpl;\n-import org.apache.openjpa.enhance.PCEnhancer;\n-import org.apache.openjpa.meta.ClassMetaData;\n-import org.apache.openjpa.meta.MetaDataRepository;\n-import org.apache.openjpa.persistence.ManagedInterface;\n-import org.eclipse.core.runtime.CoreException;\n-\n-import serp.bytecode.Annotations;\n-import serp.bytecode.BCClass;\n-import serp.bytecode.Project;\n-\n-/**\n- * OpenJPA Enhancer for efficient invocation from an Eclipse builder.\n- * \n- * @author Pinaki Poddar\n- * @author Michael Vorburger (refactoring and extensions)\n- */\n-public class PCEnhancerHelperImpl implements PCEnhancerHelper {\n-\n-\tprivate final OpenJPAConfiguration conf;\n-\tprivate final MetaDataRepository repos;\n-\tprivate final ClassLoader loader;\n-\t// TODO, needed? private final ClassArgParser cap;\n-\n-\tpublic PCEnhancerHelperImpl(ClassLoader classLoader) {\n-\t\tthis.loader = classLoader;\n-\t\tconf = new OpenJPAConfigurationImpl();\n-\t\tProperties prop = new Properties();\n-\t\tprop.setProperty(\"openjpa.MetaDataFactory\", \"jpa\");\n-\t\tprop.setProperty(\"openjpa.Log\", EclipseLogFactory.class.getName());\n-\t\tconf.fromProperties(prop);\n-\t\t\n-\t\trepos = conf.getMetaDataRepositoryInstance();\n-\t\trepos.setSourceMode(MetaDataRepository.MODE_META);\n-\t\t\n-\t\t// TODO, needed? cap = conf.getMetaDataRepositoryInstance().getMetaDataFactory().newClassArgParser();\n-        // cap.setClassLoader(loader);\n-\t}\n-\n-\t/* (non-Javadoc)\n-\t * @see org.apache.openjpa.eclipse.util.PCEnhancerHelper#enhance(java.io.File)\n-\t */\n-\tpublic boolean enhance(File resource) throws CoreException, IOException, ClassNotFoundException {\n-\t\t// No try/catch here - let Exception propagate upwards\n-\t\t// Eclipse will catch them and abandon Build and show cause in the Error Log\n-\t\t// Build should stop; if caught here, big projects with some set-up problem will appear to \"hang\". \n-\t\t\n-\t\t// TODO, needed? cap.parseTypes(resource.getAbsolutePath().toString())\n-\t\t\n-\t\tProject serp = new Project();\n-\t\tBCClass bcls = serp.loadClass(resource, loader);\n-\t\t\n-\t\tif (!needsEnhance(bcls))\n-\t\t\treturn false;\n-\t\t\n-\t\t// Intentionally setting initializeClass to false;\n-\t\t// we do NOT want static class initialization to be executed during the builder!\n-\t\tClass<?> cls = Class.forName(bcls.getName(), false, loader);\n-\t\t\n-\t\trepos.removeMetaData(cls);\n-\t\tClassMetaData meta = repos.addMetaData(cls);\n-\n-\t\tPCEnhancer delegate = new PCEnhancer(repos, bcls, meta);\n-\t\tint result = delegate.run();\n-\t\tif ((result != PCEnhancer.ENHANCE_NONE)\n-\t\t && (result != PCEnhancer.ENHANCE_INTERFACE)) {\n-\t\t\tdelegate.record();\n-\t\t\treturn true;\n-\t\t} else {\n-\t\t\treturn false;\n-\t\t}\n-\t}\n-\n-\tprivate boolean needsEnhance(BCClass bcls) {\n-\t\tAnnotations annos = bcls.getDeclaredRuntimeAnnotations(false);\n-\t\t\n-\t\tif (annos == null) \n-\t\t\treturn false;\n-\t\t\n-\t\treturn (annos.getAnnotation(Entity.class) != null \n-\t\t\t || annos.getAnnotation(MappedSuperclass.class) != null\n-\t\t\t || annos.getAnnotation(Embeddable.class) != null\n-\t\t\t || annos.getAnnotation(ManagedInterface.class) != null);\n-\t\t\n-\t}\n-}"},{"sha":"3c880c91b450f21bdf8e1367fd52911d8ea06eb7","filename":"contrib/devtools/org.apache.openjpa.eclipse/src/main/java/org/apache/openjpa/eclipse/util/PathMatcherUtil.java","status":"removed","additions":0,"deletions":59,"changes":59,"blob_url":"https://github.com/apache/openjpa/blob/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse/src/main/java/org/apache/openjpa/eclipse/util/PathMatcherUtil.java","raw_url":"https://github.com/apache/openjpa/raw/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse/src/main/java/org/apache/openjpa/eclipse/util/PathMatcherUtil.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/contrib/devtools/org.apache.openjpa.eclipse/src/main/java/org/apache/openjpa/eclipse/util/PathMatcherUtil.java?ref=bbc296ba29c2c6dd5620934446fd71c8561db6e4","patch":"@@ -1,59 +0,0 @@\n-/*\n- * Copyright 2002-2009 the original author or authors.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.openjpa.eclipse.util;\n-\n-import java.util.LinkedList;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n-\n-import org.apache.openjpa.eclipse.util.pathmatch.AntPathMatcher;\n-\n-/**\n- * Util to check matching of Ant-style path patterns. \n- * \n- * @author Michael Vorburger (MVO)\n- */\n-public class PathMatcherUtil {\n-\n-\tprivate static final AntPathMatcher antPathMatcher = new AntPathMatcher();\n-\tprivate final List<String> includePatterns = new LinkedList<String>();\n-\t\n-\t@SuppressWarnings(\"unchecked\")\n-\tpublic PathMatcherUtil(Map args) {\n-\t\tif (args != null) {\n-\t\t\tSet<String> keys = args.keySet();\n-\t\t\tfor (String key : keys) {\n-\t\t\t\tif (key.toLowerCase().startsWith(\"include\")) {\n-\t\t\t\t\tincludePatterns.add((String) args.get(key));\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tpublic boolean match(String fileName) {\n-\t\tif (includePatterns.isEmpty())\n-\t\t\treturn true;\n-\t\t\n-\t\tfor (String includePattern : includePatterns) {\n-\t\t\tif (antPathMatcher.match(includePattern, fileName))\n-\t\t\t\treturn true;\n-\t\t}\n-\t\treturn false;\n-\t}\n-\t\n-}"},{"sha":"d9c5a7682fba621140b5a0771718e3a1cf923a3e","filename":"contrib/devtools/org.apache.openjpa.eclipse/src/main/java/org/apache/openjpa/eclipse/util/pathmatch/AntPathMatcher.java","status":"removed","additions":0,"deletions":422,"changes":422,"blob_url":"https://github.com/apache/openjpa/blob/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse/src/main/java/org/apache/openjpa/eclipse/util/pathmatch/AntPathMatcher.java","raw_url":"https://github.com/apache/openjpa/raw/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse/src/main/java/org/apache/openjpa/eclipse/util/pathmatch/AntPathMatcher.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/contrib/devtools/org.apache.openjpa.eclipse/src/main/java/org/apache/openjpa/eclipse/util/pathmatch/AntPathMatcher.java?ref=bbc296ba29c2c6dd5620934446fd71c8561db6e4","patch":"@@ -1,422 +0,0 @@\n-/*\n- * Copyright 2002-2009 the original author or authors.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.openjpa.eclipse.util.pathmatch;\n-\n-import java.util.Comparator;\n-import java.util.LinkedHashMap;\n-import java.util.Map;\n-\n-/**\n- * PathMatcher implementation for Ant-style path patterns. Examples are provided below.\n- *\n- * <p>Part of this mapping code has been kindly borrowed from <a href=\"http://ant.apache.org\">Apache Ant</a>.\n- *\n- * <p>The mapping matches URLs using the following rules:<br> <ul> <li>? matches one character</li> <li>* matches zero\n- * or more characters</li> <li>** matches zero or more 'directories' in a path</li> </ul>\n- *\n- * <p>Some examples:<br> <ul> <li><code>com/t?st.jsp</code> - matches <code>com/test.jsp</code> but also\n- * <code>com/tast.jsp</code> or <code>com/txst.jsp</code></li> \n- * <li><code>com/*.jsp</code> - matches all\n- * <code>.jsp</code> files in the <code>com</code> directory</li> \n- * <li><code>com/&#42;&#42;/test.jsp</code> - matches all\n- * <code>test.jsp</code> files underneath the <code>com</code> path</li> \n- * <li><code>org/springframework/&#42;&#42;/*.jsp</code>\n- * - matches all <code>.jsp</code> files underneath the <code>org/springframework</code> path</li>\n- * <li><code>org/&#42;&#42;/servlet/bla.jsp</code> - matches <code>org/springframework/servlet/bla.jsp</code> but also\n- * <code>org/springframework/testing/servlet/bla.jsp</code> and <code>org/servlet/bla.jsp</code></li> </ul>\n- *\n- * @author Alef Arendsen\n- * @author Juergen Hoeller\n- * @author Rob Harrop\n- * @author Arjen Poutsma\n- * @since 16.07.2003\n- */\n-public class AntPathMatcher implements PathMatcher {\n-\n-\t/** Default path separator: \"/\" */\n-\tpublic static final String DEFAULT_PATH_SEPARATOR = \"/\";\n-\n-\tprivate String pathSeparator = DEFAULT_PATH_SEPARATOR;\n-\n-\t/** Set the path separator to use for pattern parsing. Default is \"/\", as in Ant. */\n-\tpublic void setPathSeparator(String pathSeparator) {\n-\t\tthis.pathSeparator = (pathSeparator != null ? pathSeparator : DEFAULT_PATH_SEPARATOR);\n-\t}\n-\n-\tpublic boolean isPattern(String path) {\n-\t\treturn (path.indexOf('*') != -1 || path.indexOf('?') != -1);\n-\t}\n-\n-\tpublic boolean match(String pattern, String path) {\n-\t\treturn doMatch(pattern, path, true, null);\n-\t}\n-\n-\tpublic boolean matchStart(String pattern, String path) {\n-\t\treturn doMatch(pattern, path, false, null);\n-\t}\n-\n-\t/**\n-\t * Actually match the given <code>path</code> against the given <code>pattern</code>.\n-\t *\n-\t * @param pattern the pattern to match against\n-\t * @param path the path String to test\n-\t * @param fullMatch whether a full pattern match is required (else a pattern match as far as the given base path goes\n-\t * is sufficient)\n-\t * @return <code>true</code> if the supplied <code>path</code> matched, <code>false</code> if it didn't\n-\t */\n-\tprotected boolean doMatch(String pattern,\n-\t\t\tString path,\n-\t\t\tboolean fullMatch,\n-\t\t\tMap<String, String> uriTemplateVariables) {\n-\t\tif (path.startsWith(this.pathSeparator) != pattern.startsWith(this.pathSeparator)) {\n-\t\t\treturn false;\n-\t\t}\n-\n-\t\tString[] pattDirs = StringUtils.tokenizeToStringArray(pattern, this.pathSeparator);\n-\t\tString[] pathDirs = StringUtils.tokenizeToStringArray(path, this.pathSeparator);\n-\n-\t\tint pattIdxStart = 0;\n-\t\tint pattIdxEnd = pattDirs.length - 1;\n-\t\tint pathIdxStart = 0;\n-\t\tint pathIdxEnd = pathDirs.length - 1;\n-\n-\t\t// Match all elements up to the first **\n-\t\twhile (pattIdxStart <= pattIdxEnd && pathIdxStart <= pathIdxEnd) {\n-\t\t\tString patDir = pattDirs[pattIdxStart];\n-\t\t\tif (\"**\".equals(patDir)) {\n-\t\t\t\tbreak;\n-\t\t\t}\n-\t\t\tif (!matchStrings(patDir, pathDirs[pathIdxStart], uriTemplateVariables)) {\n-\t\t\t\treturn false;\n-\t\t\t}\n-\t\t\tpattIdxStart++;\n-\t\t\tpathIdxStart++;\n-\t\t}\n-\n-\t\tif (pathIdxStart > pathIdxEnd) {\n-\t\t\t// Path is exhausted, only match if rest of pattern is * or **'s\n-\t\t\tif (pattIdxStart > pattIdxEnd) {\n-\t\t\t\treturn (pattern.endsWith(this.pathSeparator) ? path.endsWith(this.pathSeparator) :\n-\t\t\t\t\t\t!path.endsWith(this.pathSeparator));\n-\t\t\t}\n-\t\t\tif (!fullMatch) {\n-\t\t\t\treturn true;\n-\t\t\t}\n-\t\t\tif (pattIdxStart == pattIdxEnd && pattDirs[pattIdxStart].equals(\"*\") && path.endsWith(this.pathSeparator)) {\n-\t\t\t\treturn true;\n-\t\t\t}\n-\t\t\tfor (int i = pattIdxStart; i <= pattIdxEnd; i++) {\n-\t\t\t\tif (!pattDirs[i].equals(\"**\")) {\n-\t\t\t\t\treturn false;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\treturn true;\n-\t\t}\n-\t\telse if (pattIdxStart > pattIdxEnd) {\n-\t\t\t// String not exhausted, but pattern is. Failure.\n-\t\t\treturn false;\n-\t\t}\n-\t\telse if (!fullMatch && \"**\".equals(pattDirs[pattIdxStart])) {\n-\t\t\t// Path start definitely matches due to \"**\" part in pattern.\n-\t\t\treturn true;\n-\t\t}\n-\n-\t\t// up to last '**'\n-\t\twhile (pattIdxStart <= pattIdxEnd && pathIdxStart <= pathIdxEnd) {\n-\t\t\tString patDir = pattDirs[pattIdxEnd];\n-\t\t\tif (patDir.equals(\"**\")) {\n-\t\t\t\tbreak;\n-\t\t\t}\n-\t\t\tif (!matchStrings(patDir, pathDirs[pathIdxEnd], uriTemplateVariables)) {\n-\t\t\t\treturn false;\n-\t\t\t}\n-\t\t\tpattIdxEnd--;\n-\t\t\tpathIdxEnd--;\n-\t\t}\n-\t\tif (pathIdxStart > pathIdxEnd) {\n-\t\t\t// String is exhausted\n-\t\t\tfor (int i = pattIdxStart; i <= pattIdxEnd; i++) {\n-\t\t\t\tif (!pattDirs[i].equals(\"**\")) {\n-\t\t\t\t\treturn false;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\treturn true;\n-\t\t}\n-\n-\t\twhile (pattIdxStart != pattIdxEnd && pathIdxStart <= pathIdxEnd) {\n-\t\t\tint patIdxTmp = -1;\n-\t\t\tfor (int i = pattIdxStart + 1; i <= pattIdxEnd; i++) {\n-\t\t\t\tif (pattDirs[i].equals(\"**\")) {\n-\t\t\t\t\tpatIdxTmp = i;\n-\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tif (patIdxTmp == pattIdxStart + 1) {\n-\t\t\t\t// '**/**' situation, so skip one\n-\t\t\t\tpattIdxStart++;\n-\t\t\t\tcontinue;\n-\t\t\t}\n-\t\t\t// Find the pattern between padIdxStart & padIdxTmp in str between\n-\t\t\t// strIdxStart & strIdxEnd\n-\t\t\tint patLength = (patIdxTmp - pattIdxStart - 1);\n-\t\t\tint strLength = (pathIdxEnd - pathIdxStart + 1);\n-\t\t\tint foundIdx = -1;\n-\n-\t\t\tstrLoop:\n-\t\t\tfor (int i = 0; i <= strLength - patLength; i++) {\n-\t\t\t\tfor (int j = 0; j < patLength; j++) {\n-\t\t\t\t\tString subPat = pattDirs[pattIdxStart + j + 1];\n-\t\t\t\t\tString subStr = pathDirs[pathIdxStart + i + j];\n-\t\t\t\t\tif (!matchStrings(subPat, subStr, uriTemplateVariables)) {\n-\t\t\t\t\t\tcontinue strLoop;\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\tfoundIdx = pathIdxStart + i;\n-\t\t\t\tbreak;\n-\t\t\t}\n-\n-\t\t\tif (foundIdx == -1) {\n-\t\t\t\treturn false;\n-\t\t\t}\n-\n-\t\t\tpattIdxStart = patIdxTmp;\n-\t\t\tpathIdxStart = foundIdx + patLength;\n-\t\t}\n-\n-\t\tfor (int i = pattIdxStart; i <= pattIdxEnd; i++) {\n-\t\t\tif (!pattDirs[i].equals(\"**\")) {\n-\t\t\t\treturn false;\n-\t\t\t}\n-\t\t}\n-\n-\t\treturn true;\n-\t}\n-\n-\t/**\n-\t * Tests whether or not a string matches against a pattern. The pattern may contain two special characters:<br> '*'\n-\t * means zero or more characters<br> '?' means one and only one character\n-\t *\n-\t * @param pattern pattern to match against. Must not be <code>null</code>.\n-\t * @param str string which must be matched against the pattern. Must not be <code>null</code>.\n-\t * @return <code>true</code> if the string matches against the pattern, or <code>false</code> otherwise.\n-\t */\n-\tprivate boolean matchStrings(String pattern, String str, Map<String, String> uriTemplateVariables) {\n-\t\tAntPathStringMatcher matcher = new AntPathStringMatcher(pattern, str, uriTemplateVariables);\n-\t\treturn matcher.matchStrings();\n-\t}\n-\n-\t/**\n-\t * Given a pattern and a full path, determine the pattern-mapped part. <p>For example: <ul>\n-\t * <li>'<code>/docs/cvs/commit.html</code>' and '<code>/docs/cvs/commit.html</code> -> ''</li>\n-\t * <li>'<code>/docs/*</code>' and '<code>/docs/cvs/commit</code> -> '<code>cvs/commit</code>'</li>\n-\t * <li>'<code>/docs/cvs/*.html</code>' and '<code>/docs/cvs/commit.html</code> -> '<code>commit.html</code>'</li>\n-\t * <li>'<code>/docs/**</code>' and '<code>/docs/cvs/commit</code> -> '<code>cvs/commit</code>'</li>\n-\t * <li>'<code>/docs/**\\/*.html</code>' and '<code>/docs/cvs/commit.html</code> -> '<code>cvs/commit.html</code>'</li>\n-\t * <li>'<code>/*.html</code>' and '<code>/docs/cvs/commit.html</code> -> '<code>docs/cvs/commit.html</code>'</li>\n-\t * <li>'<code>*.html</code>' and '<code>/docs/cvs/commit.html</code> -> '<code>/docs/cvs/commit.html</code>'</li>\n-\t * <li>'<code>*</code>' and '<code>/docs/cvs/commit.html</code> -> '<code>/docs/cvs/commit.html</code>'</li> </ul>\n-\t * <p>Assumes that {@link #match} returns <code>true</code> for '<code>pattern</code>' and '<code>path</code>', but\n-\t * does <strong>not</strong> enforce this.\n-\t */\n-\tpublic String extractPathWithinPattern(String pattern, String path) {\n-\t\tString[] patternParts = StringUtils.tokenizeToStringArray(pattern, this.pathSeparator);\n-\t\tString[] pathParts = StringUtils.tokenizeToStringArray(path, this.pathSeparator);\n-\n-\t\tStringBuilder builder = new StringBuilder();\n-\n-\t\t// Add any path parts that have a wildcarded pattern part.\n-\t\tint puts = 0;\n-\t\tfor (int i = 0; i < patternParts.length; i++) {\n-\t\t\tString patternPart = patternParts[i];\n-\t\t\tif ((patternPart.indexOf('*') > -1 || patternPart.indexOf('?') > -1) && pathParts.length >= i + 1) {\n-\t\t\t\tif (puts > 0 || (i == 0 && !pattern.startsWith(this.pathSeparator))) {\n-\t\t\t\t\tbuilder.append(this.pathSeparator);\n-\t\t\t\t}\n-\t\t\t\tbuilder.append(pathParts[i]);\n-\t\t\t\tputs++;\n-\t\t\t}\n-\t\t}\n-\n-\t\t// Append any trailing path parts.\n-\t\tfor (int i = patternParts.length; i < pathParts.length; i++) {\n-\t\t\tif (puts > 0 || i > 0) {\n-\t\t\t\tbuilder.append(this.pathSeparator);\n-\t\t\t}\n-\t\t\tbuilder.append(pathParts[i]);\n-\t\t}\n-\n-\t\treturn builder.toString();\n-\t}\n-\n-\tpublic Map<String, String> extractUriTemplateVariables(String pattern, String path) {\n-\t\tMap<String, String> variables = new LinkedHashMap<String, String>();\n-\t\tboolean result = doMatch(pattern, path, true, variables);\n-\t\tAssert.state(result, \"Pattern \\\"\" + pattern + \"\\\" is not a match for \\\"\" + path + \"\\\"\");\n-\t\treturn variables;\n-\t}\n-\n-\t/**\n-\t * Combines two patterns into a new pattern that is returned. <p>This implementation simply concatenates the two\n-\t * patterns, unless the first pattern contains a file extension match (such as {@code *.html}. In that case, the second\n-\t * pattern should be included in the first, or an {@code IllegalArgumentException} is thrown. <p>For example: <table>\n-\t * <tr><th>Pattern 1</th><th>Pattern 2</th><th>Result</th></tr> <tr><td>/hotels</td><td>{@code\n-\t * null}</td><td>/hotels</td></tr> <tr><td>{@code null}</td><td>/hotels</td><td>/hotels</td></tr>\n-\t * <tr><td>/hotels</td><td>/bookings</td><td>/hotels/bookings</td></tr> <tr><td>/hotels</td><td>bookings</td><td>/hotels/bookings</td></tr>\n-\t * <tr><td>/hotels/*</td><td>/bookings</td><td>/hotels/bookings</td></tr> <tr><td>/hotels/&#42;&#42;</td><td>/bookings</td><td>/hotels/&#42;&#42;/bookings</td></tr>\n-\t * <tr><td>/hotels</td><td>{hotel}</td><td>/hotels/{hotel}</td></tr> <tr><td>/hotels/*</td><td>{hotel}</td><td>/hotels/{hotel}</td></tr>\n-\t * <tr><td>/hotels/&#42;&#42;</td><td>{hotel}</td><td>/hotels/&#42;&#42;/{hotel}</td></tr>\n-\t * <tr><td>/*.html</td><td>/hotels.html</td><td>/hotels.html</td></tr> <tr><td>/*.html</td><td>/hotels</td><td>/hotels.html</td></tr>\n-\t * <tr><td>/*.html</td><td>/*.txt</td><td>IllegalArgumentException</td></tr> </table>\n-\t *\n-\t * @param pattern1 the first pattern\n-\t * @param pattern2 the second pattern\n-\t * @return the combination of the two patterns\n-\t * @throws IllegalArgumentException when the two patterns cannot be combined\n-\t */\n-\tpublic String combine(String pattern1, String pattern2) {\n-\t\tif (!StringUtils.hasText(pattern1) && !StringUtils.hasText(pattern2)) {\n-\t\t\treturn \"\";\n-\t\t}\n-\t\telse if (!StringUtils.hasText(pattern1)) {\n-\t\t\treturn pattern2;\n-\t\t}\n-\t\telse if (!StringUtils.hasText(pattern2)) {\n-\t\t\treturn pattern1;\n-\t\t}\n-\t\telse if (match(pattern1, pattern2)) {\n-\t\t\treturn pattern2;\n-\t\t}\n-\t\telse if (pattern1.endsWith(\"/*\")) {\n-\t\t\tif (pattern2.startsWith(\"/\")) {\n-\t\t\t\t// /hotels/* + /booking -> /hotels/booking\n-\t\t\t\treturn pattern1.substring(0, pattern1.length() - 1) + pattern2.substring(1);\n-\t\t\t}\n-\t\t\telse {\n-\t\t\t\t// /hotels/* + booking -> /hotels/booking\n-\t\t\t\treturn pattern1.substring(0, pattern1.length() - 1) + pattern2;\n-\t\t\t}\n-\t\t}\n-\t\telse if (pattern1.endsWith(\"/**\")) {\n-\t\t\tif (pattern2.startsWith(\"/\")) {\n-\t\t\t\t// /hotels/** + /booking -> /hotels/**/booking\n-\t\t\t\treturn pattern1 + pattern2;\n-\t\t\t}\n-\t\t\telse {\n-\t\t\t\t// /hotels/** + booking -> /hotels/**/booking\n-\t\t\t\treturn pattern1 + \"/\" + pattern2;\n-\t\t\t}\n-\t\t}\n-\t\telse {\n-\t\t\tint dotPos1 = pattern1.indexOf('.');\n-\t\t\tif (dotPos1 == -1) {\n-\t\t\t\t// simply concatenate the two patterns\n-\t\t\t\tif (pattern1.endsWith(\"/\") || pattern2.startsWith(\"/\")) {\n-\t\t\t\t\treturn pattern1 + pattern2;\n-\t\t\t\t}\n-\t\t\t\telse {\n-\t\t\t\t\treturn pattern1 + \"/\" + pattern2;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tString fileName1 = pattern1.substring(0, dotPos1);\n-\t\t\tString extension1 = pattern1.substring(dotPos1);\n-\t\t\tString fileName2;\n-\t\t\tString extension2;\n-\t\t\tint dotPos2 = pattern2.indexOf('.');\n-\t\t\tif (dotPos2 != -1) {\n-\t\t\t\tfileName2 = pattern2.substring(0, dotPos2);\n-\t\t\t\textension2 = pattern2.substring(dotPos2);\n-\t\t\t}\n-\t\t\telse {\n-\t\t\t\tfileName2 = pattern2;\n-\t\t\t\textension2 = \"\";\n-\t\t\t}\n-\t\t\tString fileName = fileName1.endsWith(\"*\") ? fileName2 : fileName1;\n-\t\t\tString extension = extension1.startsWith(\"*\") ? extension2 : extension1;\n-\n-\t\t\treturn fileName + extension;\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * Given a full path, returns a {@link Comparator} suitable for sorting patterns in order of explicitness.\n-\t *\n-\t * <p>The returned <code>Comparator</code> will {@linkplain java.util.Collections#sort(java.util.List,\n-\t * java.util.Comparator) sort} a list so that more specific patterns (without uri templates or wild cards) come before\n-\t * generic patterns. So given a list with the following patterns: <ol> <li><code>/hotels/new</code></li>\n-\t * <li><code>/hotels/{hotel}</code></li> <li><code>/hotels/*</code></li> </ol> the returned comparator will sort this\n-\t * list so that the order will be as indicated.\n-\t *\n-\t * <p>The full path given as parameter is used to test for exact matches. So when the given path is {@code /hotels/2},\n-\t * the pattern {@code /hotels/2} will be sorted before {@code /hotels/1}.\n-\t *\n-\t * @param path the full path to use for comparison\n-\t * @return a comparator capable of sorting patterns in order of explicitness\n-\t */\n-\tpublic Comparator<String> getPatternComparator(String path) {\n-\t\treturn new AntPatternComparator(path);\n-\t}\n-\n-\tprivate static class AntPatternComparator implements Comparator<String> {\n-\n-\t\tprivate final String path;\n-\n-\t\tprivate AntPatternComparator(String path) {\n-\t\t\tthis.path = path;\n-\t\t}\n-\n-\t\tpublic int compare(String pattern1, String pattern2) {\n-\t\t\tif (pattern1 == null && pattern2 == null) {\n-\t\t\t\treturn 0;\n-\t\t\t}\n-\t\t\telse if (pattern1 == null) {\n-\t\t\t\treturn 1;\n-\t\t\t}\n-\t\t\telse if (pattern2 == null) {\n-\t\t\t\treturn -1;\n-\t\t\t}\n-\t\t\tboolean pattern1EqualsPath = pattern1.equals(path);\n-\t\t\tboolean pattern2EqualsPath = pattern2.equals(path);\n-\t\t\tif (pattern1EqualsPath && pattern2EqualsPath) {\n-\t\t\t\treturn 0;\n-\t\t\t}\n-\t\t\telse if (pattern1EqualsPath) {\n-\t\t\t\treturn -1;\n-\t\t\t}\n-\t\t\telse if (pattern2EqualsPath) {\n-\t\t\t\treturn 1;\n-\t\t\t}\n-\t\t\tint wildCardCount1 = StringUtils.countOccurrencesOf(pattern1, \"*\");\n-\t\t\tint wildCardCount2 = StringUtils.countOccurrencesOf(pattern2, \"*\");\n-\t\t\tif (wildCardCount1 < wildCardCount2) {\n-\t\t\t\treturn -1;\n-\t\t\t}\n-\t\t\telse if (wildCardCount2 < wildCardCount1) {\n-\t\t\t\treturn 1;\n-\t\t\t}\n-\t\t\tint bracketCount1 = StringUtils.countOccurrencesOf(pattern1, \"{\");\n-\t\t\tint bracketCount2 = StringUtils.countOccurrencesOf(pattern2, \"{\");\n-\t\t\tif (bracketCount1 < bracketCount2) {\n-\t\t\t\treturn -1;\n-\t\t\t}\n-\t\t\telse if (bracketCount2 < bracketCount1) {\n-\t\t\t\treturn 1;\n-\t\t\t}\n-\t\t\treturn 0;\n-\t\t}\n-\t}\n-\n-}"},{"sha":"bafdf75e68c6ca4b2921df6de3dd35da49691f48","filename":"contrib/devtools/org.apache.openjpa.eclipse/src/main/java/org/apache/openjpa/eclipse/util/pathmatch/AntPathStringMatcher.java","status":"removed","additions":0,"deletions":119,"changes":119,"blob_url":"https://github.com/apache/openjpa/blob/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse/src/main/java/org/apache/openjpa/eclipse/util/pathmatch/AntPathStringMatcher.java","raw_url":"https://github.com/apache/openjpa/raw/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse/src/main/java/org/apache/openjpa/eclipse/util/pathmatch/AntPathStringMatcher.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/contrib/devtools/org.apache.openjpa.eclipse/src/main/java/org/apache/openjpa/eclipse/util/pathmatch/AntPathStringMatcher.java?ref=bbc296ba29c2c6dd5620934446fd71c8561db6e4","patch":"@@ -1,119 +0,0 @@\n-/*\n- * Copyright 2002-2009 the original author or authors.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.openjpa.eclipse.util.pathmatch;\n-\n-import java.util.LinkedList;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.regex.Matcher;\n-import java.util.regex.Pattern;\n-\n-/**\n- * Package-protected helper class for {@link AntPathMatcher}. Tests whether or not a string matches against a pattern\n- * using a regular expression.\n- *\n- * <p>The pattern may contain special characters: '*' means zero or more characters; '?' means one and only one\n- * character; '{' and '}' indicate a URI template pattern.\n- *\n- * @author Arjen Poutsma\n- * @since 3.0\n- */\n-class AntPathStringMatcher {\n-\n-\tprivate static final Pattern GLOB_PATTERN = Pattern.compile(\"\\\\?|\\\\*|\\\\{([^/]+?)\\\\}\");\n-\n-\tprivate static final String DEFAULT_VARIABLE_PATTERN = \"(.*)\";\n-\n-\tprivate final Pattern pattern;\n-\n-\tprivate String str;\n-\n-\tprivate final List<String> variableNames = new LinkedList<String>();\n-\n-\tprivate final Map<String, String> uriTemplateVariables;\n-\n-\t/** Construct a new instance of the <code>AntPatchStringMatcher</code>. */\n-\tAntPathStringMatcher(String pattern, String str, Map<String, String> uriTemplateVariables) {\n-\t\tthis.str = str;\n-\t\tthis.uriTemplateVariables = uriTemplateVariables;\n-\t\tthis.pattern = createPattern(pattern);\n-\t}\n-\n-\tprivate Pattern createPattern(String pattern) {\n-\t\tStringBuilder patternBuilder = new StringBuilder();\n-\t\tMatcher m = GLOB_PATTERN.matcher(pattern);\n-\t\tint end = 0;\n-\t\twhile (m.find()) {\n-\t\t\tpatternBuilder.append(quote(pattern, end, m.start()));\n-\t\t\tString match = m.group();\n-\t\t\tif (\"?\".equals(match)) {\n-\t\t\t\tpatternBuilder.append('.');\n-\t\t\t}\n-\t\t\telse if (\"*\".equals(match)) {\n-\t\t\t\tpatternBuilder.append(\".*\");\n-\t\t\t}\n-\t\t\telse if (match.startsWith(\"{\") && match.endsWith(\"}\")) {\n-\t\t\t\tint colonIdx = match.indexOf(':');\n-\t\t\t\tif (colonIdx == -1) {\n-\t\t\t\t\tpatternBuilder.append(DEFAULT_VARIABLE_PATTERN);\n-\t\t\t\t\tvariableNames.add(m.group(1));\n-\t\t\t\t}\n-\t\t\t\telse {\n-\t\t\t\t\tString variablePattern = match.substring(colonIdx + 1, match.length() - 1);\n-\t\t\t\t\tpatternBuilder.append('(');\n-\t\t\t\t\tpatternBuilder.append(variablePattern);\n-\t\t\t\t\tpatternBuilder.append(')');\n-\t\t\t\t\tString variableName = match.substring(1, colonIdx);\n-\t\t\t\t\tvariableNames.add(variableName);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tend = m.end();\n-\t\t}\n-\t\tpatternBuilder.append(quote(pattern, end, pattern.length()));\n-\t\treturn Pattern.compile(patternBuilder.toString());\n-\t}\n-\n-\tprivate String quote(String s, int start, int end) {\n-\t\tif (start == end) {\n-\t\t\treturn \"\";\n-\t\t}\n-\t\treturn Pattern.quote(s.substring(start, end));\n-\t}\n-\n-\t/**\n-\t * Main entry point.\n-\t *\n-\t * @return <code>true</code> if the string matches against the pattern, or <code>false</code> otherwise.\n-\t */\n-\tpublic boolean matchStrings() {\n-\t\tMatcher matcher = pattern.matcher(str);\n-\t\tif (matcher.matches()) {\n-\t\t\tif (uriTemplateVariables != null) {\n-\t\t\t\tfor (int i = 1; i <= matcher.groupCount(); i++) {\n-\t\t\t\t\tString name = this.variableNames.get(i - 1);\n-\t\t\t\t\tString value = matcher.group(i);\n-\t\t\t\t\turiTemplateVariables.put(name, value);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\treturn true;\n-\t\t}\n-\t\telse {\n-\t\t\treturn false;\n-\t\t}\n-\t}\n-\n-}"},{"sha":"3f41fd71640581160cbc97edff695e0159efba46","filename":"contrib/devtools/org.apache.openjpa.eclipse/src/main/java/org/apache/openjpa/eclipse/util/pathmatch/Assert.java","status":"removed","additions":0,"deletions":402,"changes":402,"blob_url":"https://github.com/apache/openjpa/blob/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse/src/main/java/org/apache/openjpa/eclipse/util/pathmatch/Assert.java","raw_url":"https://github.com/apache/openjpa/raw/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse/src/main/java/org/apache/openjpa/eclipse/util/pathmatch/Assert.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/contrib/devtools/org.apache.openjpa.eclipse/src/main/java/org/apache/openjpa/eclipse/util/pathmatch/Assert.java?ref=bbc296ba29c2c6dd5620934446fd71c8561db6e4","patch":"@@ -1,402 +0,0 @@\n-/*\n- * Copyright 2002-2007 the original author or authors.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n- * use this file except in compliance with the License. You may obtain a copy of\n- * the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n- * License for the specific language governing permissions and limitations under\n- * the License.\n- */\n-\n-package org.apache.openjpa.eclipse.util.pathmatch;\n-\n-import java.util.Collection;\n-import java.util.Map;\n-\n-/**\n- * Assertion utility class that assists in validating arguments.\n- * Useful for identifying programmer errors early and clearly at runtime.\n- *\n- * <p>For example, if the contract of a public method states it does not\n- * allow <code>null</code> arguments, Assert can be used to validate that\n- * contract. Doing this clearly indicates a contract violation when it\n- * occurs and protects the class's invariants.\n- *\n- * <p>Typically used to validate method arguments rather than configuration\n- * properties, to check for cases that are usually programmer errors rather than\n- * configuration errors. In contrast to config initialization code, there is\n- * usally no point in falling back to defaults in such methods.\n- *\n- * <p>This class is similar to JUnit's assertion library. If an argument value is\n- * deemed invalid, an {@link IllegalArgumentException} is thrown (typically).\n- * For example:\n- *\n- * <pre class=\"code\">\n- * Assert.notNull(clazz, \"The class must not be null\");\n- * Assert.isTrue(i > 0, \"The value must be greater than zero\");</pre>\n- *\n- * Mainly for internal use within the framework; consider Jakarta's Commons Lang\n- * >= 2.0 for a more comprehensive suite of assertion utilities.\n- *\n- * @author Keith Donald\n- * @author Juergen Hoeller\n- * @author Colin Sampaleanu\n- * @author Rob Harrop\n- * @since 1.1.2\n- */\n-@SuppressWarnings(\"unchecked\")\n-public abstract class Assert {\n-\n-\t/**\n-\t * Assert a boolean expression, throwing <code>IllegalArgumentException</code>\n-\t * if the test result is <code>false</code>.\n-\t * <pre class=\"code\">Assert.isTrue(i &gt; 0, \"The value must be greater than zero\");</pre>\n-\t * @param expression a boolean expression\n-\t * @param message the exception message to use if the assertion fails\n-\t * @throws IllegalArgumentException if expression is <code>false</code>\n-\t */\n-\tpublic static void isTrue(boolean expression, String message) {\n-\t\tif (!expression) {\n-\t\t\tthrow new IllegalArgumentException(message);\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * Assert a boolean expression, throwing <code>IllegalArgumentException</code>\n-\t * if the test result is <code>false</code>.\n-\t * <pre class=\"code\">Assert.isTrue(i &gt; 0);</pre>\n-\t * @param expression a boolean expression\n-\t * @throws IllegalArgumentException if expression is <code>false</code>\n-\t */\n-\tpublic static void isTrue(boolean expression) {\n-\t\tisTrue(expression, \"[Assertion failed] - this expression must be true\");\n-\t}\n-\n-\t/**\n-\t * Assert that an object is <code>null</code> .\n-\t * <pre class=\"code\">Assert.isNull(value, \"The value must be null\");</pre>\n-\t * @param object the object to check\n-\t * @param message the exception message to use if the assertion fails\n-\t * @throws IllegalArgumentException if the object is not <code>null</code>\n-\t */\n-\tpublic static void isNull(Object object, String message) {\n-\t\tif (object != null) {\n-\t\t\tthrow new IllegalArgumentException(message);\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * Assert that an object is <code>null</code> .\n-\t * <pre class=\"code\">Assert.isNull(value);</pre>\n-\t * @param object the object to check\n-\t * @throws IllegalArgumentException if the object is not <code>null</code>\n-\t */\n-\tpublic static void isNull(Object object) {\n-\t\tisNull(object, \"[Assertion failed] - the object argument must be null\");\n-\t}\n-\n-\t/**\n-\t * Assert that an object is not <code>null</code> .\n-\t * <pre class=\"code\">Assert.notNull(clazz, \"The class must not be null\");</pre>\n-\t * @param object the object to check\n-\t * @param message the exception message to use if the assertion fails\n-\t * @throws IllegalArgumentException if the object is <code>null</code>\n-\t */\n-\tpublic static void notNull(Object object, String message) {\n-\t\tif (object == null) {\n-\t\t\tthrow new IllegalArgumentException(message);\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * Assert that an object is not <code>null</code> .\n-\t * <pre class=\"code\">Assert.notNull(clazz);</pre>\n-\t * @param object the object to check\n-\t * @throws IllegalArgumentException if the object is <code>null</code>\n-\t */\n-\tpublic static void notNull(Object object) {\n-\t\tnotNull(object, \"[Assertion failed] - this argument is required; it must not be null\");\n-\t}\n-\n-\t/**\n-\t * Assert that the given String is not empty; that is,\n-\t * it must not be <code>null</code> and not the empty String.\n-\t * <pre class=\"code\">Assert.hasLength(name, \"Name must not be empty\");</pre>\n-\t * @param text the String to check\n-\t * @param message the exception message to use if the assertion fails\n-\t * @see StringUtils#hasLength\n-\t */\n-\tpublic static void hasLength(String text, String message) {\n-\t\tif (!StringUtils.hasLength(text)) {\n-\t\t\tthrow new IllegalArgumentException(message);\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * Assert that the given String is not empty; that is,\n-\t * it must not be <code>null</code> and not the empty String.\n-\t * <pre class=\"code\">Assert.hasLength(name);</pre>\n-\t * @param text the String to check\n-\t * @see StringUtils#hasLength\n-\t */\n-\tpublic static void hasLength(String text) {\n-\t\thasLength(text,\n-\t\t\t\t\"[Assertion failed] - this String argument must have length; it must not be null or empty\");\n-\t}\n-\n-\t/**\n-\t * Assert that the given String has valid text content; that is, it must not\n-\t * be <code>null</code> and must contain at least one non-whitespace character.\n-\t * <pre class=\"code\">Assert.hasText(name, \"'name' must not be empty\");</pre>\n-\t * @param text the String to check\n-\t * @param message the exception message to use if the assertion fails\n-\t * @see StringUtils#hasText\n-\t */\n-\tpublic static void hasText(String text, String message) {\n-\t\tif (!StringUtils.hasText(text)) {\n-\t\t\tthrow new IllegalArgumentException(message);\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * Assert that the given String has valid text content; that is, it must not\n-\t * be <code>null</code> and must contain at least one non-whitespace character.\n-\t * <pre class=\"code\">Assert.hasText(name, \"'name' must not be empty\");</pre>\n-\t * @param text the String to check\n-\t * @see StringUtils#hasText\n-\t */\n-\tpublic static void hasText(String text) {\n-\t\thasText(text,\n-\t\t\t\t\"[Assertion failed] - this String argument must have text; it must not be null, empty, or blank\");\n-\t}\n-\n-\t/**\n-\t * Assert that the given text does not contain the given substring.\n-\t * <pre class=\"code\">Assert.doesNotContain(name, \"rod\", \"Name must not contain 'rod'\");</pre>\n-\t * @param textToSearch the text to search\n-\t * @param substring the substring to find within the text\n-\t * @param message the exception message to use if the assertion fails\n-\t */\n-\tpublic static void doesNotContain(String textToSearch, String substring, String message) {\n-\t\tif (StringUtils.hasLength(textToSearch) && StringUtils.hasLength(substring) &&\n-\t\t\t\ttextToSearch.indexOf(substring) != -1) {\n-\t\t\tthrow new IllegalArgumentException(message);\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * Assert that the given text does not contain the given substring.\n-\t * <pre class=\"code\">Assert.doesNotContain(name, \"rod\");</pre>\n-\t * @param textToSearch the text to search\n-\t * @param substring the substring to find within the text\n-\t */\n-\tpublic static void doesNotContain(String textToSearch, String substring) {\n-\t\tdoesNotContain(textToSearch, substring,\n-\t\t\t\t\"[Assertion failed] - this String argument must not contain the substring [\" + substring + \"]\");\n-\t}\n-\n-\n-\t/**\n-\t * Assert that an array has elements; that is, it must not be\n-\t * <code>null</code> and must have at least one element.\n-\t * <pre class=\"code\">Assert.notEmpty(array, \"The array must have elements\");</pre>\n-\t * @param array the array to check\n-\t * @param message the exception message to use if the assertion fails\n-\t * @throws IllegalArgumentException if the object array is <code>null</code> or has no elements\n-\t */\n-\tpublic static void notEmpty(Object[] array, String message) {\n-\t\tif (ObjectUtils.isEmpty(array)) {\n-\t\t\tthrow new IllegalArgumentException(message);\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * Assert that an array has elements; that is, it must not be\n-\t * <code>null</code> and must have at least one element.\n-\t * <pre class=\"code\">Assert.notEmpty(array);</pre>\n-\t * @param array the array to check\n-\t * @throws IllegalArgumentException if the object array is <code>null</code> or has no elements\n-\t */\n-\tpublic static void notEmpty(Object[] array) {\n-\t\tnotEmpty(array, \"[Assertion failed] - this array must not be empty: it must contain at least 1 element\");\n-\t}\n-\n-\t/**\n-\t * Assert that an array has no null elements.\n-\t * Note: Does not complain if the array is empty!\n-\t * <pre class=\"code\">Assert.noNullElements(array, \"The array must have non-null elements\");</pre>\n-\t * @param array the array to check\n-\t * @param message the exception message to use if the assertion fails\n-\t * @throws IllegalArgumentException if the object array contains a <code>null</code> element\n-\t */\n-\tpublic static void noNullElements(Object[] array, String message) {\n-\t\tif (array != null) {\n-\t\t\tfor (int i = 0; i < array.length; i++) {\n-\t\t\t\tif (array[i] == null) {\n-\t\t\t\t\tthrow new IllegalArgumentException(message);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * Assert that an array has no null elements.\n-\t * Note: Does not complain if the array is empty!\n-\t * <pre class=\"code\">Assert.noNullElements(array);</pre>\n-\t * @param array the array to check\n-\t * @throws IllegalArgumentException if the object array contains a <code>null</code> element\n-\t */\n-\tpublic static void noNullElements(Object[] array) {\n-\t\tnoNullElements(array, \"[Assertion failed] - this array must not contain any null elements\");\n-\t}\n-\n-\t/**\n-\t * Assert that a collection has elements; that is, it must not be\n-\t * <code>null</code> and must have at least one element.\n-\t * <pre class=\"code\">Assert.notEmpty(collection, \"Collection must have elements\");</pre>\n-\t * @param collection the collection to check\n-\t * @param message the exception message to use if the assertion fails\n-\t * @throws IllegalArgumentException if the collection is <code>null</code> or has no elements\n-\t */\n-\tpublic static void notEmpty(Collection collection, String message) {\n-\t\tif (CollectionUtils.isEmpty(collection)) {\n-\t\t\tthrow new IllegalArgumentException(message);\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * Assert that a collection has elements; that is, it must not be\n-\t * <code>null</code> and must have at least one element.\n-\t * <pre class=\"code\">Assert.notEmpty(collection, \"Collection must have elements\");</pre>\n-\t * @param collection the collection to check\n-\t * @throws IllegalArgumentException if the collection is <code>null</code> or has no elements\n-\t */\n-\tpublic static void notEmpty(Collection collection) {\n-\t\tnotEmpty(collection,\n-\t\t\t\t\"[Assertion failed] - this collection must not be empty: it must contain at least 1 element\");\n-\t}\n-\n-\t/**\n-\t * Assert that a Map has entries; that is, it must not be <code>null</code>\n-\t * and must have at least one entry.\n-\t * <pre class=\"code\">Assert.notEmpty(map, \"Map must have entries\");</pre>\n-\t * @param map the map to check\n-\t * @param message the exception message to use if the assertion fails\n-\t * @throws IllegalArgumentException if the map is <code>null</code> or has no entries\n-\t */\n-\tpublic static void notEmpty(Map map, String message) {\n-\t\tif (CollectionUtils.isEmpty(map)) {\n-\t\t\tthrow new IllegalArgumentException(message);\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * Assert that a Map has entries; that is, it must not be <code>null</code>\n-\t * and must have at least one entry.\n-\t * <pre class=\"code\">Assert.notEmpty(map);</pre>\n-\t * @param map the map to check\n-\t * @throws IllegalArgumentException if the map is <code>null</code> or has no entries\n-\t */\n-\tpublic static void notEmpty(Map map) {\n-\t\tnotEmpty(map, \"[Assertion failed] - this map must not be empty; it must contain at least one entry\");\n-\t}\n-\n-\n-\t/**\n-\t * Assert that the provided object is an instance of the provided class.\n-\t * <pre class=\"code\">Assert.instanceOf(Foo.class, foo);</pre>\n-\t * @param clazz the required class\n-\t * @param obj the object to check\n-\t * @throws IllegalArgumentException if the object is not an instance of clazz\n-\t * @see Class#isInstance\n-\t */\n-\tpublic static void isInstanceOf(Class clazz, Object obj) {\n-\t\tisInstanceOf(clazz, obj, \"\");\n-\t}\n-\n-\t/**\n-\t * Assert that the provided object is an instance of the provided class.\n-\t * <pre class=\"code\">Assert.instanceOf(Foo.class, foo);</pre>\n-\t * @param type the type to check against\n-\t * @param obj the object to check\n-\t * @param message a message which will be prepended to the message produced by\n-\t * the function itself, and which may be used to provide context. It should\n-\t * normally end in a \": \" or \". \" so that the function generate message looks\n-\t * ok when prepended to it.\n-\t * @throws IllegalArgumentException if the object is not an instance of clazz\n-\t * @see Class#isInstance\n-\t */\n-\tpublic static void isInstanceOf(Class type, Object obj, String message) {\n-\t\tnotNull(type, \"Type to check against must not be null\");\n-\t\tif (!type.isInstance(obj)) {\n-\t\t\tthrow new IllegalArgumentException(message +\n-\t\t\t\t\t\"Object of class [\" + (obj != null ? obj.getClass().getName() : \"null\") +\n-\t\t\t\t\t\"] must be an instance of \" + type);\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * Assert that <code>superType.isAssignableFrom(subType)</code> is <code>true</code>.\n-\t * <pre class=\"code\">Assert.isAssignable(Number.class, myClass);</pre>\n-\t * @param superType the super type to check\n-\t * @param subType the sub type to check\n-\t * @throws IllegalArgumentException if the classes are not assignable\n-\t */\n-\tpublic static void isAssignable(Class superType, Class subType) {\n-\t\tisAssignable(superType, subType, \"\");\n-\t}\n-\n-\t/**\n-\t * Assert that <code>superType.isAssignableFrom(subType)</code> is <code>true</code>.\n-\t * <pre class=\"code\">Assert.isAssignable(Number.class, myClass);</pre>\n-\t * @param superType the super type to check against\n-\t * @param subType the sub type to check\n-\t * @param message a message which will be prepended to the message produced by\n-\t * the function itself, and which may be used to provide context. It should\n-\t * normally end in a \": \" or \". \" so that the function generate message looks\n-\t * ok when prepended to it.\n-\t * @throws IllegalArgumentException if the classes are not assignable\n-\t */\n-\tpublic static void isAssignable(Class superType, Class subType, String message) {\n-\t\tnotNull(superType, \"Type to check against must not be null\");\n-\t\tif (subType == null || !superType.isAssignableFrom(subType)) {\n-\t\t\tthrow new IllegalArgumentException(message + subType + \" is not assignable to \" + superType);\n-\t\t}\n-\t}\n-\n-\n-\t/**\n-\t * Assert a boolean expression, throwing <code>IllegalStateException</code>\n-\t * if the test result is <code>false</code>. Call isTrue if you wish to\n-\t * throw IllegalArgumentException on an assertion failure.\n-\t * <pre class=\"code\">Assert.state(id == null, \"The id property must not already be initialized\");</pre>\n-\t * @param expression a boolean expression\n-\t * @param message the exception message to use if the assertion fails\n-\t * @throws IllegalStateException if expression is <code>false</code>\n-\t */\n-\tpublic static void state(boolean expression, String message) {\n-\t\tif (!expression) {\n-\t\t\tthrow new IllegalStateException(message);\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * Assert a boolean expression, throwing {@link IllegalStateException}\n-\t * if the test result is <code>false</code>.\n-\t * <p>Call {@link #isTrue(boolean)} if you wish to\n-\t * throw {@link IllegalArgumentException} on an assertion failure.\n-\t * <pre class=\"code\">Assert.state(id == null);</pre>\n-\t * @param expression a boolean expression\n-\t * @throws IllegalStateException if the supplied expression is <code>false</code>\n-\t */\n-\tpublic static void state(boolean expression) {\n-\t\tstate(expression, \"[Assertion failed] - this state invariant must be true\");\n-\t}\n-\n-}"},{"sha":"45bdcb90a68b677740ba69574dca25f0b7a0b64c","filename":"contrib/devtools/org.apache.openjpa.eclipse/src/main/java/org/apache/openjpa/eclipse/util/pathmatch/CollectionUtils.java","status":"removed","additions":0,"deletions":310,"changes":310,"blob_url":"https://github.com/apache/openjpa/blob/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse/src/main/java/org/apache/openjpa/eclipse/util/pathmatch/CollectionUtils.java","raw_url":"https://github.com/apache/openjpa/raw/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse/src/main/java/org/apache/openjpa/eclipse/util/pathmatch/CollectionUtils.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/contrib/devtools/org.apache.openjpa.eclipse/src/main/java/org/apache/openjpa/eclipse/util/pathmatch/CollectionUtils.java?ref=bbc296ba29c2c6dd5620934446fd71c8561db6e4","patch":"@@ -1,310 +0,0 @@\n-/*\n- * Copyright 2002-2009 the original author or authors.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.openjpa.eclipse.util.pathmatch;\n-\n-import java.util.Arrays;\n-import java.util.Collection;\n-import java.util.Enumeration;\n-import java.util.Iterator;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Properties;\n-\n-/**\n- * Miscellaneous collection utility methods.\n- * Mainly for internal use within the framework.\n- *\n- * @author Juergen Hoeller\n- * @author Rob Harrop\n- * @since 1.1.3\n- */\n-@SuppressWarnings(\"unchecked\")\n-public abstract class CollectionUtils {\n-\n-\t/**\n-\t * Return <code>true</code> if the supplied Collection is <code>null</code>\n-\t * or empty. Otherwise, return <code>false</code>.\n-\t * @param collection the Collection to check\n-\t * @return whether the given Collection is empty\n-\t */\n-\tpublic static boolean isEmpty(Collection collection) {\n-\t\treturn (collection == null || collection.isEmpty());\n-\t}\n-\n-\t/**\n-\t * Return <code>true</code> if the supplied Map is <code>null</code>\n-\t * or empty. Otherwise, return <code>false</code>.\n-\t * @param map the Map to check\n-\t * @return whether the given Map is empty\n-\t */\n-\tpublic static boolean isEmpty(Map map) {\n-\t\treturn (map == null || map.isEmpty());\n-\t}\n-\n-\t/**\n-\t * Convert the supplied array into a List. A primitive array gets\n-\t * converted into a List of the appropriate wrapper type.\n-\t * <p>A <code>null</code> source value will be converted to an\n-\t * empty List.\n-\t * @param source the (potentially primitive) array\n-\t * @return the converted List result\n-\t * @see ObjectUtils#toObjectArray(Object)\n-\t */\n-\tpublic static List arrayToList(Object source) {\n-\t\treturn Arrays.asList(ObjectUtils.toObjectArray(source));\n-\t}\n-\n-\t/**\n-\t * Merge the given array into the given Collection.\n-\t * @param array the array to merge (may be <code>null</code>)\n-\t * @param collection the target Collection to merge the array into\n-\t */\n-\tpublic static void mergeArrayIntoCollection(Object array, Collection collection) {\n-\t\tif (collection == null) {\n-\t\t\tthrow new IllegalArgumentException(\"Collection must not be null\");\n-\t\t}\n-\t\tObject[] arr = ObjectUtils.toObjectArray(array);\n-\t\tfor (Object elem : arr) {\n-\t\t\tcollection.add(elem);\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * Merge the given Properties instance into the given Map,\n-\t * copying all properties (key-value pairs) over.\n-\t * <p>Uses <code>Properties.propertyNames()</code> to even catch\n-\t * default properties linked into the original Properties instance.\n-\t * @param props the Properties instance to merge (may be <code>null</code>)\n-\t * @param map the target Map to merge the properties into\n-\t */\n-\tpublic static void mergePropertiesIntoMap(Properties props, Map map) {\n-\t\tif (map == null) {\n-\t\t\tthrow new IllegalArgumentException(\"Map must not be null\");\n-\t\t}\n-\t\tif (props != null) {\n-\t\t\tfor (Enumeration en = props.propertyNames(); en.hasMoreElements();) {\n-\t\t\t\tString key = (String) en.nextElement();\n-\t\t\t\tObject value = props.getProperty(key);\n-\t\t\t\tif (value == null) {\n-\t\t\t\t\t// Potentially a non-String value...\n-\t\t\t\t\tvalue = props.get(key);\n-\t\t\t\t}\n-\t\t\t\tmap.put(key, value);\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\n-\t/**\n-\t * Check whether the given Iterator contains the given element.\n-\t * @param iterator the Iterator to check\n-\t * @param element the element to look for\n-\t * @return <code>true</code> if found, <code>false</code> else\n-\t */\n-\tpublic static boolean contains(Iterator iterator, Object element) {\n-\t\tif (iterator != null) {\n-\t\t\twhile (iterator.hasNext()) {\n-\t\t\t\tObject candidate = iterator.next();\n-\t\t\t\tif (ObjectUtils.nullSafeEquals(candidate, element)) {\n-\t\t\t\t\treturn true;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\treturn false;\n-\t}\n-\n-\t/**\n-\t * Check whether the given Enumeration contains the given element.\n-\t * @param enumeration the Enumeration to check\n-\t * @param element the element to look for\n-\t * @return <code>true</code> if found, <code>false</code> else\n-\t */\n-\tpublic static boolean contains(Enumeration enumeration, Object element) {\n-\t\tif (enumeration != null) {\n-\t\t\twhile (enumeration.hasMoreElements()) {\n-\t\t\t\tObject candidate = enumeration.nextElement();\n-\t\t\t\tif (ObjectUtils.nullSafeEquals(candidate, element)) {\n-\t\t\t\t\treturn true;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\treturn false;\n-\t}\n-\n-\t/**\n-\t * Check whether the given Collection contains the given element instance.\n-\t * <p>Enforces the given instance to be present, rather than returning\n-\t * <code>true</code> for an equal element as well.\n-\t * @param collection the Collection to check\n-\t * @param element the element to look for\n-\t * @return <code>true</code> if found, <code>false</code> else\n-\t */\n-\tpublic static boolean containsInstance(Collection collection, Object element) {\n-\t\tif (collection != null) {\n-\t\t\tfor (Object candidate : collection) {\n-\t\t\t\tif (candidate == element) {\n-\t\t\t\t\treturn true;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\treturn false;\n-\t}\n-\n-\t/**\n-\t * Return <code>true</code> if any element in '<code>candidates</code>' is\n-\t * contained in '<code>source</code>'; otherwise returns <code>false</code>.\n-\t * @param source the source Collection\n-\t * @param candidates the candidates to search for\n-\t * @return whether any of the candidates has been found\n-\t */\n-\tpublic static boolean containsAny(Collection source, Collection candidates) {\n-\t\tif (isEmpty(source) || isEmpty(candidates)) {\n-\t\t\treturn false;\n-\t\t}\n-\t\tfor (Object candidate : candidates) {\n-\t\t\tif (source.contains(candidate)) {\n-\t\t\t\treturn true;\n-\t\t\t}\n-\t\t}\n-\t\treturn false;\n-\t}\n-\n-\t/**\n-\t * Return the first element in '<code>candidates</code>' that is contained in\n-\t * '<code>source</code>'. If no element in '<code>candidates</code>' is present in\n-\t * '<code>source</code>' returns <code>null</code>. Iteration order is\n-\t * {@link Collection} implementation specific.\n-\t * @param source the source Collection\n-\t * @param candidates the candidates to search for\n-\t * @return the first present object, or <code>null</code> if not found\n-\t */\n-\tpublic static Object findFirstMatch(Collection source, Collection candidates) {\n-\t\tif (isEmpty(source) || isEmpty(candidates)) {\n-\t\t\treturn null;\n-\t\t}\n-\t\tfor (Object candidate : candidates) {\n-\t\t\tif (source.contains(candidate)) {\n-\t\t\t\treturn candidate;\n-\t\t\t}\n-\t\t}\n-\t\treturn null;\n-\t}\n-\n-\t/**\n-\t * Find a single value of the given type in the given Collection.\n-\t * @param collection the Collection to search\n-\t * @param type the type to look for\n-\t * @return a value of the given type found if there is a clear match,\n-\t * or <code>null</code> if none or more than one such value found\n-\t */\n-\tpublic static <T> T findValueOfType(Collection collection, Class<T> type) {\n-\t\tif (isEmpty(collection)) {\n-\t\t\treturn null;\n-\t\t}\n-\t\tT value = null;\n-\t\tfor (Object element : collection) {\n-\t\t\tif (type == null || type.isInstance(element)) {\n-\t\t\t\tif (value != null) {\n-\t\t\t\t\t// More than one value found... no clear single value.\n-\t\t\t\t\treturn null;\n-\t\t\t\t}\n-\t\t\t\tvalue = (T) element;\n-\t\t\t}\n-\t\t}\n-\t\treturn value;\n-\t}\n-\n-\t/**\n-\t * Find a single value of one of the given types in the given Collection:\n-\t * searching the Collection for a value of the first type, then\n-\t * searching for a value of the second type, etc.\n-\t * @param collection the collection to search\n-\t * @param types the types to look for, in prioritized order\n-\t * @return a value of one of the given types found if there is a clear match,\n-\t * or <code>null</code> if none or more than one such value found\n-\t */\n-\tpublic static Object findValueOfType(Collection collection, Class[] types) {\n-\t\tif (isEmpty(collection) || ObjectUtils.isEmpty(types)) {\n-\t\t\treturn null;\n-\t\t}\n-\t\tfor (Class type : types) {\n-\t\t\tObject value = findValueOfType(collection, type);\n-\t\t\tif (value != null) {\n-\t\t\t\treturn value;\n-\t\t\t}\n-\t\t}\n-\t\treturn null;\n-\t}\n-\n-\t/**\n-\t * Determine whether the given Collection only contains a single unique object.\n-\t * @param collection the Collection to check\n-\t * @return <code>true</code> if the collection contains a single reference or\n-\t * multiple references to the same instance, <code>false</code> else\n-\t */\n-\tpublic static boolean hasUniqueObject(Collection collection) {\n-\t\tif (isEmpty(collection)) {\n-\t\t\treturn false;\n-\t\t}\n-\t\tboolean hasCandidate = false;\n-\t\tObject candidate = null;\n-\t\tfor (Iterator it = collection.iterator(); it.hasNext();) {\n-\t\t\tObject elem = it.next();\n-\t\t\tif (!hasCandidate) {\n-\t\t\t\thasCandidate = true;\n-\t\t\t\tcandidate = elem;\n-\t\t\t}\n-\t\t\telse if (candidate != elem) {\n-\t\t\t\treturn false;\n-\t\t\t}\n-\t\t}\n-\t\treturn true;\n-\t}\n-\n-\t/**\n-\t * Adapts an enumeration to an iterator.\n-\t * @param enumeration the enumeration\n-\t * @return the iterator\n-\t */\n-\tpublic static <E> Iterator<E> toIterator(Enumeration<E> enumeration) {\n-\t\treturn new EnumerationIterator<E>(enumeration);\n-\t}\n-\n-\t/**\n-\t * Iterator wrapping an Enumeration.\n-\t */\n-\tprivate static class EnumerationIterator<E> implements Iterator<E> {\n-\n-\t\tprivate Enumeration<E> enumeration;\n-\n-\t\tpublic EnumerationIterator(Enumeration<E> enumeration) {\n-\t\t\tthis.enumeration = enumeration;\n-\t\t}\n-\n-\t\tpublic boolean hasNext() {\n-\t\t\treturn enumeration.hasMoreElements();\n-\t\t}\n-\n-\t\tpublic E next() {\n-\t\t\treturn enumeration.nextElement();\n-\t\t}\n-\n-\t\tpublic void remove() throws UnsupportedOperationException {\n-\t\t\tthrow new UnsupportedOperationException(\"Not supported\");\n-\t\t}\n-\t}\n-}"},{"sha":"7855c3f34a0bd0249aab7e266d3cbe5451bbe695","filename":"contrib/devtools/org.apache.openjpa.eclipse/src/main/java/org/apache/openjpa/eclipse/util/pathmatch/ObjectUtils.java","status":"removed","additions":0,"deletions":847,"changes":847,"blob_url":"https://github.com/apache/openjpa/blob/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse/src/main/java/org/apache/openjpa/eclipse/util/pathmatch/ObjectUtils.java","raw_url":"https://github.com/apache/openjpa/raw/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse/src/main/java/org/apache/openjpa/eclipse/util/pathmatch/ObjectUtils.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/contrib/devtools/org.apache.openjpa.eclipse/src/main/java/org/apache/openjpa/eclipse/util/pathmatch/ObjectUtils.java?ref=bbc296ba29c2c6dd5620934446fd71c8561db6e4","patch":"@@ -1,847 +0,0 @@\n-/*\n- * Copyright 2002-2009 the original author or authors.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.openjpa.eclipse.util.pathmatch;\n-\n-import java.lang.reflect.Array;\n-import java.util.Arrays;\n-\n-/**\n- * Miscellaneous object utility methods.\n- *\n- * <p>Mainly for internal use within the framework; consider\n- * <a href=\"http://jakarta.apache.org/commons/lang/\">Jakarta's Commons Lang</a>\n- * for a more comprehensive suite of object utilities.\n- *\n- * <p>Thanks to Alex Ruiz for contributing several enhancements to this class!\n- *\n- * @author Juergen Hoeller\n- * @author Keith Donald\n- * @author Rod Johnson\n- * @author Rob Harrop\n- * @since 19.03.2004\n- * @see org.apache.commons.lang.ObjectUtils\n- */\n-@SuppressWarnings(\"unchecked\")\n-public abstract class ObjectUtils {\n-\n-\tprivate static final int INITIAL_HASH = 7;\n-\tprivate static final int MULTIPLIER = 31;\n-\n-\tprivate static final String EMPTY_STRING = \"\";\n-\tprivate static final String NULL_STRING = \"null\";\n-\tprivate static final String ARRAY_START = \"{\";\n-\tprivate static final String ARRAY_END = \"}\";\n-\tprivate static final String EMPTY_ARRAY = ARRAY_START + ARRAY_END;\n-\tprivate static final String ARRAY_ELEMENT_SEPARATOR = \", \";\n-\n-\n-\t/**\n-\t * Return whether the given throwable is a checked exception:\n-\t * that is, neither a RuntimeException nor an Error.\n-\t * @param ex the throwable to check\n-\t * @return whether the throwable is a checked exception\n-\t * @see java.lang.Exception\n-\t * @see java.lang.RuntimeException\n-\t * @see java.lang.Error\n-\t */\n-\tpublic static boolean isCheckedException(Throwable ex) {\n-\t\treturn !(ex instanceof RuntimeException || ex instanceof Error);\n-\t}\n-\n-\t/**\n-\t * Check whether the given exception is compatible with the exceptions\n-\t * declared in a throws clause.\n-\t * @param ex the exception to checked\n-\t * @param declaredExceptions the exceptions declared in the throws clause\n-\t * @return whether the given exception is compatible\n-\t */\n-\tpublic static boolean isCompatibleWithThrowsClause(Throwable ex, Class[] declaredExceptions) {\n-\t\tif (!isCheckedException(ex)) {\n-\t\t\treturn true;\n-\t\t}\n-\t\tif (declaredExceptions != null) {\n-\t\t\tint i = 0;\n-\t\t\twhile (i < declaredExceptions.length) {\n-\t\t\t\tif (declaredExceptions[i].isAssignableFrom(ex.getClass())) {\n-\t\t\t\t\treturn true;\n-\t\t\t\t}\n-\t\t\t\ti++;\n-\t\t\t}\n-\t\t}\n-\t\treturn false;\n-\t}\n-\n-\t/**\n-\t * Determine whether the given object is an array:\n-\t * either an Object array or a primitive array.\n-\t * @param obj the object to check\n-\t */\n-\tpublic static boolean isArray(Object obj) {\n-\t\treturn (obj != null && obj.getClass().isArray());\n-\t}\n-\n-\t/**\n-\t * Determine whether the given array is empty:\n-\t * i.e. <code>null</code> or of zero length.\n-\t * @param array the array to check\n-\t */\n-\tpublic static boolean isEmpty(Object[] array) {\n-\t\treturn (array == null || array.length == 0);\n-\t}\n-\n-\t/**\n-\t * Check whether the given array contains the given element.\n-\t * @param array the array to check (may be <code>null</code>,\n-\t * in which case the return value will always be <code>false</code>)\n-\t * @param element the element to check for\n-\t * @return whether the element has been found in the given array\n-\t */\n-\tpublic static boolean containsElement(Object[] array, Object element) {\n-\t\tif (array == null) {\n-\t\t\treturn false;\n-\t\t}\n-\t\tfor (Object arrayEle : array) {\n-\t\t\tif (nullSafeEquals(arrayEle, element)) {\n-\t\t\t\treturn true;\n-\t\t\t}\n-\t\t}\n-\t\treturn false;\n-\t}\n-\n-\t/**\n-\t * Append the given Object to the given array, returning a new array\n-\t * consisting of the input array contents plus the given Object.\n-\t * @param array the array to append to (can be <code>null</code>)\n-\t * @param obj the Object to append\n-\t * @return the new array (of the same component type; never <code>null</code>)\n-\t */\n-\tpublic static Object[] addObjectToArray(Object[] array, Object obj) {\n-\t\tClass compType = Object.class;\n-\t\tif (array != null) {\n-\t\t\tcompType = array.getClass().getComponentType();\n-\t\t}\n-\t\telse if (obj != null) {\n-\t\t\tcompType = obj.getClass();\n-\t\t}\n-\t\tint newArrLength = (array != null ? array.length + 1 : 1);\n-\t\tObject[] newArr = (Object[]) Array.newInstance(compType, newArrLength);\n-\t\tif (array != null) {\n-\t\t\tSystem.arraycopy(array, 0, newArr, 0, array.length);\n-\t\t}\n-\t\tnewArr[newArr.length - 1] = obj;\n-\t\treturn newArr;\n-\t}\n-\n-\t/**\n-\t * Convert the given array (which may be a primitive array) to an\n-\t * object array (if necessary of primitive wrapper objects).\n-\t * <p>A <code>null</code> source value will be converted to an\n-\t * empty Object array.\n-\t * @param source the (potentially primitive) array\n-\t * @return the corresponding object array (never <code>null</code>)\n-\t * @throws IllegalArgumentException if the parameter is not an array\n-\t */\n-\tpublic static Object[] toObjectArray(Object source) {\n-\t\tif (source instanceof Object[]) {\n-\t\t\treturn (Object[]) source;\n-\t\t}\n-\t\tif (source == null) {\n-\t\t\treturn new Object[0];\n-\t\t}\n-\t\tif (!source.getClass().isArray()) {\n-\t\t\tthrow new IllegalArgumentException(\"Source is not an array: \" + source);\n-\t\t}\n-\t\tint length = Array.getLength(source);\n-\t\tif (length == 0) {\n-\t\t\treturn new Object[0];\n-\t\t}\n-\t\tClass wrapperType = Array.get(source, 0).getClass();\n-\t\tObject[] newArray = (Object[]) Array.newInstance(wrapperType, length);\n-\t\tfor (int i = 0; i < length; i++) {\n-\t\t\tnewArray[i] = Array.get(source, i);\n-\t\t}\n-\t\treturn newArray;\n-\t}\n-\n-\n-\t//---------------------------------------------------------------------\n-\t// Convenience methods for content-based equality/hash-code handling\n-\t//---------------------------------------------------------------------\n-\n-\t/**\n-\t * Determine if the given objects are equal, returning <code>true</code>\n-\t * if both are <code>null</code> or <code>false</code> if only one is\n-\t * <code>null</code>.\n-\t * <p>Compares arrays with <code>Arrays.equals</code>, performing an equality\n-\t * check based on the array elements rather than the array reference.\n-\t * @param o1 first Object to compare\n-\t * @param o2 second Object to compare\n-\t * @return whether the given objects are equal\n-\t * @see java.util.Arrays#equals\n-\t */\n-\tpublic static boolean nullSafeEquals(Object o1, Object o2) {\n-\t\tif (o1 == o2) {\n-\t\t\treturn true;\n-\t\t}\n-\t\tif (o1 == null || o2 == null) {\n-\t\t\treturn false;\n-\t\t}\n-\t\tif (o1.equals(o2)) {\n-\t\t\treturn true;\n-\t\t}\n-\t\tif (o1.getClass().isArray() && o2.getClass().isArray()) {\n-\t\t\tif (o1 instanceof Object[] && o2 instanceof Object[]) {\n-\t\t\t\treturn Arrays.equals((Object[]) o1, (Object[]) o2);\n-\t\t\t}\n-\t\t\tif (o1 instanceof boolean[] && o2 instanceof boolean[]) {\n-\t\t\t\treturn Arrays.equals((boolean[]) o1, (boolean[]) o2);\n-\t\t\t}\n-\t\t\tif (o1 instanceof byte[] && o2 instanceof byte[]) {\n-\t\t\t\treturn Arrays.equals((byte[]) o1, (byte[]) o2);\n-\t\t\t}\n-\t\t\tif (o1 instanceof char[] && o2 instanceof char[]) {\n-\t\t\t\treturn Arrays.equals((char[]) o1, (char[]) o2);\n-\t\t\t}\n-\t\t\tif (o1 instanceof double[] && o2 instanceof double[]) {\n-\t\t\t\treturn Arrays.equals((double[]) o1, (double[]) o2);\n-\t\t\t}\n-\t\t\tif (o1 instanceof float[] && o2 instanceof float[]) {\n-\t\t\t\treturn Arrays.equals((float[]) o1, (float[]) o2);\n-\t\t\t}\n-\t\t\tif (o1 instanceof int[] && o2 instanceof int[]) {\n-\t\t\t\treturn Arrays.equals((int[]) o1, (int[]) o2);\n-\t\t\t}\n-\t\t\tif (o1 instanceof long[] && o2 instanceof long[]) {\n-\t\t\t\treturn Arrays.equals((long[]) o1, (long[]) o2);\n-\t\t\t}\n-\t\t\tif (o1 instanceof short[] && o2 instanceof short[]) {\n-\t\t\t\treturn Arrays.equals((short[]) o1, (short[]) o2);\n-\t\t\t}\n-\t\t}\n-\t\treturn false;\n-\t}\n-\n-\t/**\n-\t * Return as hash code for the given object; typically the value of\n-\t * <code>{@link Object#hashCode()}</code>. If the object is an array,\n-\t * this method will delegate to any of the <code>nullSafeHashCode</code>\n-\t * methods for arrays in this class. If the object is <code>null</code>,\n-\t * this method returns 0.\n-\t * @see #nullSafeHashCode(Object[])\n-\t * @see #nullSafeHashCode(boolean[])\n-\t * @see #nullSafeHashCode(byte[])\n-\t * @see #nullSafeHashCode(char[])\n-\t * @see #nullSafeHashCode(double[])\n-\t * @see #nullSafeHashCode(float[])\n-\t * @see #nullSafeHashCode(int[])\n-\t * @see #nullSafeHashCode(long[])\n-\t * @see #nullSafeHashCode(short[])\n-\t */\n-\tpublic static int nullSafeHashCode(Object obj) {\n-\t\tif (obj == null) {\n-\t\t\treturn 0;\n-\t\t}\n-\t\tif (obj.getClass().isArray()) {\n-\t\t\tif (obj instanceof Object[]) {\n-\t\t\t\treturn nullSafeHashCode((Object[]) obj);\n-\t\t\t}\n-\t\t\tif (obj instanceof boolean[]) {\n-\t\t\t\treturn nullSafeHashCode((boolean[]) obj);\n-\t\t\t}\n-\t\t\tif (obj instanceof byte[]) {\n-\t\t\t\treturn nullSafeHashCode((byte[]) obj);\n-\t\t\t}\n-\t\t\tif (obj instanceof char[]) {\n-\t\t\t\treturn nullSafeHashCode((char[]) obj);\n-\t\t\t}\n-\t\t\tif (obj instanceof double[]) {\n-\t\t\t\treturn nullSafeHashCode((double[]) obj);\n-\t\t\t}\n-\t\t\tif (obj instanceof float[]) {\n-\t\t\t\treturn nullSafeHashCode((float[]) obj);\n-\t\t\t}\n-\t\t\tif (obj instanceof int[]) {\n-\t\t\t\treturn nullSafeHashCode((int[]) obj);\n-\t\t\t}\n-\t\t\tif (obj instanceof long[]) {\n-\t\t\t\treturn nullSafeHashCode((long[]) obj);\n-\t\t\t}\n-\t\t\tif (obj instanceof short[]) {\n-\t\t\t\treturn nullSafeHashCode((short[]) obj);\n-\t\t\t}\n-\t\t}\n-\t\treturn obj.hashCode();\n-\t}\n-\n-\t/**\n-\t * Return a hash code based on the contents of the specified array.\n-\t * If <code>array</code> is <code>null</code>, this method returns 0.\n-\t */\n-\tpublic static int nullSafeHashCode(Object[] array) {\n-\t\tif (array == null) {\n-\t\t\treturn 0;\n-\t\t}\n-\t\tint hash = INITIAL_HASH;\n-\t\tint arraySize = array.length;\n-\t\tfor (int i = 0; i < arraySize; i++) {\n-\t\t\thash = MULTIPLIER * hash + nullSafeHashCode(array[i]);\n-\t\t}\n-\t\treturn hash;\n-\t}\n-\n-\t/**\n-\t * Return a hash code based on the contents of the specified array.\n-\t * If <code>array</code> is <code>null</code>, this method returns 0.\n-\t */\n-\tpublic static int nullSafeHashCode(boolean[] array) {\n-\t\tif (array == null) {\n-\t\t\treturn 0;\n-\t\t}\n-\t\tint hash = INITIAL_HASH;\n-\t\tint arraySize = array.length;\n-\t\tfor (int i = 0; i < arraySize; i++) {\n-\t\t\thash = MULTIPLIER * hash + hashCode(array[i]);\n-\t\t}\n-\t\treturn hash;\n-\t}\n-\n-\t/**\n-\t * Return a hash code based on the contents of the specified array.\n-\t * If <code>array</code> is <code>null</code>, this method returns 0.\n-\t */\n-\tpublic static int nullSafeHashCode(byte[] array) {\n-\t\tif (array == null) {\n-\t\t\treturn 0;\n-\t\t}\n-\t\tint hash = INITIAL_HASH;\n-\t\tint arraySize = array.length;\n-\t\tfor (int i = 0; i < arraySize; i++) {\n-\t\t\thash = MULTIPLIER * hash + array[i];\n-\t\t}\n-\t\treturn hash;\n-\t}\n-\n-\t/**\n-\t * Return a hash code based on the contents of the specified array.\n-\t * If <code>array</code> is <code>null</code>, this method returns 0.\n-\t */\n-\tpublic static int nullSafeHashCode(char[] array) {\n-\t\tif (array == null) {\n-\t\t\treturn 0;\n-\t\t}\n-\t\tint hash = INITIAL_HASH;\n-\t\tint arraySize = array.length;\n-\t\tfor (int i = 0; i < arraySize; i++) {\n-\t\t\thash = MULTIPLIER * hash + array[i];\n-\t\t}\n-\t\treturn hash;\n-\t}\n-\n-\t/**\n-\t * Return a hash code based on the contents of the specified array.\n-\t * If <code>array</code> is <code>null</code>, this method returns 0.\n-\t */\n-\tpublic static int nullSafeHashCode(double[] array) {\n-\t\tif (array == null) {\n-\t\t\treturn 0;\n-\t\t}\n-\t\tint hash = INITIAL_HASH;\n-\t\tint arraySize = array.length;\n-\t\tfor (int i = 0; i < arraySize; i++) {\n-\t\t\thash = MULTIPLIER * hash + hashCode(array[i]);\n-\t\t}\n-\t\treturn hash;\n-\t}\n-\n-\t/**\n-\t * Return a hash code based on the contents of the specified array.\n-\t * If <code>array</code> is <code>null</code>, this method returns 0.\n-\t */\n-\tpublic static int nullSafeHashCode(float[] array) {\n-\t\tif (array == null) {\n-\t\t\treturn 0;\n-\t\t}\n-\t\tint hash = INITIAL_HASH;\n-\t\tint arraySize = array.length;\n-\t\tfor (int i = 0; i < arraySize; i++) {\n-\t\t\thash = MULTIPLIER * hash + hashCode(array[i]);\n-\t\t}\n-\t\treturn hash;\n-\t}\n-\n-\t/**\n-\t * Return a hash code based on the contents of the specified array.\n-\t * If <code>array</code> is <code>null</code>, this method returns 0.\n-\t */\n-\tpublic static int nullSafeHashCode(int[] array) {\n-\t\tif (array == null) {\n-\t\t\treturn 0;\n-\t\t}\n-\t\tint hash = INITIAL_HASH;\n-\t\tint arraySize = array.length;\n-\t\tfor (int i = 0; i < arraySize; i++) {\n-\t\t\thash = MULTIPLIER * hash + array[i];\n-\t\t}\n-\t\treturn hash;\n-\t}\n-\n-\t/**\n-\t * Return a hash code based on the contents of the specified array.\n-\t * If <code>array</code> is <code>null</code>, this method returns 0.\n-\t */\n-\tpublic static int nullSafeHashCode(long[] array) {\n-\t\tif (array == null) {\n-\t\t\treturn 0;\n-\t\t}\n-\t\tint hash = INITIAL_HASH;\n-\t\tint arraySize = array.length;\n-\t\tfor (int i = 0; i < arraySize; i++) {\n-\t\t\thash = MULTIPLIER * hash + hashCode(array[i]);\n-\t\t}\n-\t\treturn hash;\n-\t}\n-\n-\t/**\n-\t * Return a hash code based on the contents of the specified array.\n-\t * If <code>array</code> is <code>null</code>, this method returns 0.\n-\t */\n-\tpublic static int nullSafeHashCode(short[] array) {\n-\t\tif (array == null) {\n-\t\t\treturn 0;\n-\t\t}\n-\t\tint hash = INITIAL_HASH;\n-\t\tint arraySize = array.length;\n-\t\tfor (int i = 0; i < arraySize; i++) {\n-\t\t\thash = MULTIPLIER * hash + array[i];\n-\t\t}\n-\t\treturn hash;\n-\t}\n-\n-\t/**\n-\t * Return the same value as <code>{@link Boolean#hashCode()}</code>.\n-\t * @see Boolean#hashCode()\n-\t */\n-\tpublic static int hashCode(boolean bool) {\n-\t\treturn bool ? 1231 : 1237;\n-\t}\n-\n-\t/**\n-\t * Return the same value as <code>{@link Double#hashCode()}</code>.\n-\t * @see Double#hashCode()\n-\t */\n-\tpublic static int hashCode(double dbl) {\n-\t\tlong bits = Double.doubleToLongBits(dbl);\n-\t\treturn hashCode(bits);\n-\t}\n-\n-\t/**\n-\t * Return the same value as <code>{@link Float#hashCode()}</code>.\n-\t * @see Float#hashCode()\n-\t */\n-\tpublic static int hashCode(float flt) {\n-\t\treturn Float.floatToIntBits(flt);\n-\t}\n-\n-\t/**\n-\t * Return the same value as <code>{@link Long#hashCode()}</code>.\n-\t * @see Long#hashCode()\n-\t */\n-\tpublic static int hashCode(long lng) {\n-\t\treturn (int) (lng ^ (lng >>> 32));\n-\t}\n-\n-\n-\t//---------------------------------------------------------------------\n-\t// Convenience methods for toString output\n-\t//---------------------------------------------------------------------\n-\n-\t/**\n-\t * Return a String representation of an object's overall identity.\n-\t * @param obj the object (may be <code>null</code>)\n-\t * @return the object's identity as String representation,\n-\t * or an empty String if the object was <code>null</code>\n-\t */\n-\tpublic static String identityToString(Object obj) {\n-\t\tif (obj == null) {\n-\t\t\treturn EMPTY_STRING;\n-\t\t}\n-\t\treturn obj.getClass().getName() + \"@\" + getIdentityHexString(obj);\n-\t}\n-\n-\t/**\n-\t * Return a hex String form of an object's identity hash code.\n-\t * @param obj the object\n-\t * @return the object's identity code in hex notation\n-\t */\n-\tpublic static String getIdentityHexString(Object obj) {\n-\t\treturn Integer.toHexString(System.identityHashCode(obj));\n-\t}\n-\n-\t/**\n-\t * Return a content-based String representation if <code>obj</code> is\n-\t * not <code>null</code>; otherwise returns an empty String.\n-\t * <p>Differs from {@link #nullSafeToString(Object)} in that it returns\n-\t * an empty String rather than \"null\" for a <code>null</code> value.\n-\t * @param obj the object to build a display String for\n-\t * @return a display String representation of <code>obj</code>\n-\t * @see #nullSafeToString(Object)\n-\t */\n-\tpublic static String getDisplayString(Object obj) {\n-\t\tif (obj == null) {\n-\t\t\treturn EMPTY_STRING;\n-\t\t}\n-\t\treturn nullSafeToString(obj);\n-\t}\n-\n-\t/**\n-\t * Determine the class name for the given object.\n-\t * <p>Returns <code>\"null\"</code> if <code>obj</code> is <code>null</code>.\n-\t * @param obj the object to introspect (may be <code>null</code>)\n-\t * @return the corresponding class name\n-\t */\n-\tpublic static String nullSafeClassName(Object obj) {\n-\t\treturn (obj != null ? obj.getClass().getName() : NULL_STRING);\n-\t}\n-\n-\t/**\n-\t * Return a String representation of the specified Object.\n-\t * <p>Builds a String representation of the contents in case of an array.\n-\t * Returns <code>\"null\"</code> if <code>obj</code> is <code>null</code>.\n-\t * @param obj the object to build a String representation for\n-\t * @return a String representation of <code>obj</code>\n-\t */\n-\tpublic static String nullSafeToString(Object obj) {\n-\t\tif (obj == null) {\n-\t\t\treturn NULL_STRING;\n-\t\t}\n-\t\tif (obj instanceof String) {\n-\t\t\treturn (String) obj;\n-\t\t}\n-\t\tif (obj instanceof Object[]) {\n-\t\t\treturn nullSafeToString((Object[]) obj);\n-\t\t}\n-\t\tif (obj instanceof boolean[]) {\n-\t\t\treturn nullSafeToString((boolean[]) obj);\n-\t\t}\n-\t\tif (obj instanceof byte[]) {\n-\t\t\treturn nullSafeToString((byte[]) obj);\n-\t\t}\n-\t\tif (obj instanceof char[]) {\n-\t\t\treturn nullSafeToString((char[]) obj);\n-\t\t}\n-\t\tif (obj instanceof double[]) {\n-\t\t\treturn nullSafeToString((double[]) obj);\n-\t\t}\n-\t\tif (obj instanceof float[]) {\n-\t\t\treturn nullSafeToString((float[]) obj);\n-\t\t}\n-\t\tif (obj instanceof int[]) {\n-\t\t\treturn nullSafeToString((int[]) obj);\n-\t\t}\n-\t\tif (obj instanceof long[]) {\n-\t\t\treturn nullSafeToString((long[]) obj);\n-\t\t}\n-\t\tif (obj instanceof short[]) {\n-\t\t\treturn nullSafeToString((short[]) obj);\n-\t\t}\n-\t\tString str = obj.toString();\n-\t\treturn (str != null ? str : EMPTY_STRING);\n-\t}\n-\n-\t/**\n-\t * Return a String representation of the contents of the specified array.\n-\t * <p>The String representation consists of a list of the array's elements,\n-\t * enclosed in curly braces (<code>\"{}\"</code>). Adjacent elements are separated\n-\t * by the characters <code>\", \"</code> (a comma followed by a space). Returns\n-\t * <code>\"null\"</code> if <code>array</code> is <code>null</code>.\n-\t * @param array the array to build a String representation for\n-\t * @return a String representation of <code>array</code>\n-\t */\n-\tpublic static String nullSafeToString(Object[] array) {\n-\t\tif (array == null) {\n-\t\t\treturn NULL_STRING;\n-\t\t}\n-\t\tint length = array.length;\n-\t\tif (length == 0) {\n-\t\t\treturn EMPTY_ARRAY;\n-\t\t}\n-\t\tStringBuilder sb = new StringBuilder();\n-\t\tfor (int i = 0; i < length; i++) {\n-\t\t\tif (i == 0) {\n-\t\t\t\tsb.append(ARRAY_START);\n-\t\t\t}\n-\t\t\telse {\n-\t\t\t\tsb.append(ARRAY_ELEMENT_SEPARATOR);\n-\t\t\t}\n-\t\t\tsb.append(String.valueOf(array[i]));\n-\t\t}\n-\t\tsb.append(ARRAY_END);\n-\t\treturn sb.toString();\n-\t}\n-\n-\t/**\n-\t * Return a String representation of the contents of the specified array.\n-\t * <p>The String representation consists of a list of the array's elements,\n-\t * enclosed in curly braces (<code>\"{}\"</code>). Adjacent elements are separated\n-\t * by the characters <code>\", \"</code> (a comma followed by a space). Returns\n-\t * <code>\"null\"</code> if <code>array</code> is <code>null</code>.\n-\t * @param array the array to build a String representation for\n-\t * @return a String representation of <code>array</code>\n-\t */\n-\tpublic static String nullSafeToString(boolean[] array) {\n-\t\tif (array == null) {\n-\t\t\treturn NULL_STRING;\n-\t\t}\n-\t\tint length = array.length;\n-\t\tif (length == 0) {\n-\t\t\treturn EMPTY_ARRAY;\n-\t\t}\n-\t\tStringBuilder sb = new StringBuilder();\n-\t\tfor (int i = 0; i < length; i++) {\n-\t\t\tif (i == 0) {\n-\t\t\t\tsb.append(ARRAY_START);\n-\t\t\t}\n-\t\t\telse {\n-\t\t\t\tsb.append(ARRAY_ELEMENT_SEPARATOR);\n-\t\t\t}\n-\n-\t\t\tsb.append(array[i]);\n-\t\t}\n-\t\tsb.append(ARRAY_END);\n-\t\treturn sb.toString();\n-\t}\n-\n-\t/**\n-\t * Return a String representation of the contents of the specified array.\n-\t * <p>The String representation consists of a list of the array's elements,\n-\t * enclosed in curly braces (<code>\"{}\"</code>). Adjacent elements are separated\n-\t * by the characters <code>\", \"</code> (a comma followed by a space). Returns\n-\t * <code>\"null\"</code> if <code>array</code> is <code>null</code>.\n-\t * @param array the array to build a String representation for\n-\t * @return a String representation of <code>array</code>\n-\t */\n-\tpublic static String nullSafeToString(byte[] array) {\n-\t\tif (array == null) {\n-\t\t\treturn NULL_STRING;\n-\t\t}\n-\t\tint length = array.length;\n-\t\tif (length == 0) {\n-\t\t\treturn EMPTY_ARRAY;\n-\t\t}\n-\t\tStringBuilder sb = new StringBuilder();\n-\t\tfor (int i = 0; i < length; i++) {\n-\t\t\tif (i == 0) {\n-\t\t\t\tsb.append(ARRAY_START);\n-\t\t\t}\n-\t\t\telse {\n-\t\t\t\tsb.append(ARRAY_ELEMENT_SEPARATOR);\n-\t\t\t}\n-\t\t\tsb.append(array[i]);\n-\t\t}\n-\t\tsb.append(ARRAY_END);\n-\t\treturn sb.toString();\n-\t}\n-\n-\t/**\n-\t * Return a String representation of the contents of the specified array.\n-\t * <p>The String representation consists of a list of the array's elements,\n-\t * enclosed in curly braces (<code>\"{}\"</code>). Adjacent elements are separated\n-\t * by the characters <code>\", \"</code> (a comma followed by a space). Returns\n-\t * <code>\"null\"</code> if <code>array</code> is <code>null</code>.\n-\t * @param array the array to build a String representation for\n-\t * @return a String representation of <code>array</code>\n-\t */\n-\tpublic static String nullSafeToString(char[] array) {\n-\t\tif (array == null) {\n-\t\t\treturn NULL_STRING;\n-\t\t}\n-\t\tint length = array.length;\n-\t\tif (length == 0) {\n-\t\t\treturn EMPTY_ARRAY;\n-\t\t}\n-\t\tStringBuilder sb = new StringBuilder();\n-\t\tfor (int i = 0; i < length; i++) {\n-\t\t\tif (i == 0) {\n-\t\t\t\tsb.append(ARRAY_START);\n-\t\t\t}\n-\t\t\telse {\n-\t\t\t\tsb.append(ARRAY_ELEMENT_SEPARATOR);\n-\t\t\t}\n-\t\t\tsb.append(\"'\").append(array[i]).append(\"'\");\n-\t\t}\n-\t\tsb.append(ARRAY_END);\n-\t\treturn sb.toString();\n-\t}\n-\n-\t/**\n-\t * Return a String representation of the contents of the specified array.\n-\t * <p>The String representation consists of a list of the array's elements,\n-\t * enclosed in curly braces (<code>\"{}\"</code>). Adjacent elements are separated\n-\t * by the characters <code>\", \"</code> (a comma followed by a space). Returns\n-\t * <code>\"null\"</code> if <code>array</code> is <code>null</code>.\n-\t * @param array the array to build a String representation for\n-\t * @return a String representation of <code>array</code>\n-\t */\n-\tpublic static String nullSafeToString(double[] array) {\n-\t\tif (array == null) {\n-\t\t\treturn NULL_STRING;\n-\t\t}\n-\t\tint length = array.length;\n-\t\tif (length == 0) {\n-\t\t\treturn EMPTY_ARRAY;\n-\t\t}\n-\t\tStringBuilder sb = new StringBuilder();\n-\t\tfor (int i = 0; i < length; i++) {\n-\t\t\tif (i == 0) {\n-\t\t\t\tsb.append(ARRAY_START);\n-\t\t\t}\n-\t\t\telse {\n-\t\t\t\tsb.append(ARRAY_ELEMENT_SEPARATOR);\n-\t\t\t}\n-\n-\t\t\tsb.append(array[i]);\n-\t\t}\n-\t\tsb.append(ARRAY_END);\n-\t\treturn sb.toString();\n-\t}\n-\n-\t/**\n-\t * Return a String representation of the contents of the specified array.\n-\t * <p>The String representation consists of a list of the array's elements,\n-\t * enclosed in curly braces (<code>\"{}\"</code>). Adjacent elements are separated\n-\t * by the characters <code>\", \"</code> (a comma followed by a space). Returns\n-\t * <code>\"null\"</code> if <code>array</code> is <code>null</code>.\n-\t * @param array the array to build a String representation for\n-\t * @return a String representation of <code>array</code>\n-\t */\n-\tpublic static String nullSafeToString(float[] array) {\n-\t\tif (array == null) {\n-\t\t\treturn NULL_STRING;\n-\t\t}\n-\t\tint length = array.length;\n-\t\tif (length == 0) {\n-\t\t\treturn EMPTY_ARRAY;\n-\t\t}\n-\t\tStringBuilder sb = new StringBuilder();\n-\t\tfor (int i = 0; i < length; i++) {\n-\t\t\tif (i == 0) {\n-\t\t\t\tsb.append(ARRAY_START);\n-\t\t\t}\n-\t\t\telse {\n-\t\t\t\tsb.append(ARRAY_ELEMENT_SEPARATOR);\n-\t\t\t}\n-\n-\t\t\tsb.append(array[i]);\n-\t\t}\n-\t\tsb.append(ARRAY_END);\n-\t\treturn sb.toString();\n-\t}\n-\n-\t/**\n-\t * Return a String representation of the contents of the specified array.\n-\t * <p>The String representation consists of a list of the array's elements,\n-\t * enclosed in curly braces (<code>\"{}\"</code>). Adjacent elements are separated\n-\t * by the characters <code>\", \"</code> (a comma followed by a space). Returns\n-\t * <code>\"null\"</code> if <code>array</code> is <code>null</code>.\n-\t * @param array the array to build a String representation for\n-\t * @return a String representation of <code>array</code>\n-\t */\n-\tpublic static String nullSafeToString(int[] array) {\n-\t\tif (array == null) {\n-\t\t\treturn NULL_STRING;\n-\t\t}\n-\t\tint length = array.length;\n-\t\tif (length == 0) {\n-\t\t\treturn EMPTY_ARRAY;\n-\t\t}\n-\t\tStringBuilder sb = new StringBuilder();\n-\t\tfor (int i = 0; i < length; i++) {\n-\t\t\tif (i == 0) {\n-\t\t\t\tsb.append(ARRAY_START);\n-\t\t\t}\n-\t\t\telse {\n-\t\t\t\tsb.append(ARRAY_ELEMENT_SEPARATOR);\n-\t\t\t}\n-\t\t\tsb.append(array[i]);\n-\t\t}\n-\t\tsb.append(ARRAY_END);\n-\t\treturn sb.toString();\n-\t}\n-\n-\t/**\n-\t * Return a String representation of the contents of the specified array.\n-\t * <p>The String representation consists of a list of the array's elements,\n-\t * enclosed in curly braces (<code>\"{}\"</code>). Adjacent elements are separated\n-\t * by the characters <code>\", \"</code> (a comma followed by a space). Returns\n-\t * <code>\"null\"</code> if <code>array</code> is <code>null</code>.\n-\t * @param array the array to build a String representation for\n-\t * @return a String representation of <code>array</code>\n-\t */\n-\tpublic static String nullSafeToString(long[] array) {\n-\t\tif (array == null) {\n-\t\t\treturn NULL_STRING;\n-\t\t}\n-\t\tint length = array.length;\n-\t\tif (length == 0) {\n-\t\t\treturn EMPTY_ARRAY;\n-\t\t}\n-\t\tStringBuilder sb = new StringBuilder();\n-\t\tfor (int i = 0; i < length; i++) {\n-\t\t\tif (i == 0) {\n-\t\t\t\tsb.append(ARRAY_START);\n-\t\t\t}\n-\t\t\telse {\n-\t\t\t\tsb.append(ARRAY_ELEMENT_SEPARATOR);\n-\t\t\t}\n-\t\t\tsb.append(array[i]);\n-\t\t}\n-\t\tsb.append(ARRAY_END);\n-\t\treturn sb.toString();\n-\t}\n-\n-\t/**\n-\t * Return a String representation of the contents of the specified array.\n-\t * <p>The String representation consists of a list of the array's elements,\n-\t * enclosed in curly braces (<code>\"{}\"</code>). Adjacent elements are separated\n-\t * by the characters <code>\", \"</code> (a comma followed by a space). Returns\n-\t * <code>\"null\"</code> if <code>array</code> is <code>null</code>.\n-\t * @param array the array to build a String representation for\n-\t * @return a String representation of <code>array</code>\n-\t */\n-\tpublic static String nullSafeToString(short[] array) {\n-\t\tif (array == null) {\n-\t\t\treturn NULL_STRING;\n-\t\t}\n-\t\tint length = array.length;\n-\t\tif (length == 0) {\n-\t\t\treturn EMPTY_ARRAY;\n-\t\t}\n-\t\tStringBuilder sb = new StringBuilder();\n-\t\tfor (int i = 0; i < length; i++) {\n-\t\t\tif (i == 0) {\n-\t\t\t\tsb.append(ARRAY_START);\n-\t\t\t}\n-\t\t\telse {\n-\t\t\t\tsb.append(ARRAY_ELEMENT_SEPARATOR);\n-\t\t\t}\n-\t\t\tsb.append(array[i]);\n-\t\t}\n-\t\tsb.append(ARRAY_END);\n-\t\treturn sb.toString();\n-\t}\n-\n-}"},{"sha":"18f9e99eab7ba76d8a4d88651e96d0b5a673e157","filename":"contrib/devtools/org.apache.openjpa.eclipse/src/main/java/org/apache/openjpa/eclipse/util/pathmatch/PathMatcher.java","status":"removed","additions":0,"deletions":127,"changes":127,"blob_url":"https://github.com/apache/openjpa/blob/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse/src/main/java/org/apache/openjpa/eclipse/util/pathmatch/PathMatcher.java","raw_url":"https://github.com/apache/openjpa/raw/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse/src/main/java/org/apache/openjpa/eclipse/util/pathmatch/PathMatcher.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/contrib/devtools/org.apache.openjpa.eclipse/src/main/java/org/apache/openjpa/eclipse/util/pathmatch/PathMatcher.java?ref=bbc296ba29c2c6dd5620934446fd71c8561db6e4","patch":"@@ -1,127 +0,0 @@\n-/*\n- * Copyright 2002-2009 the original author or authors.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.openjpa.eclipse.util.pathmatch;\n-\n-import java.util.Comparator;\n-import java.util.Map;\n-\n-/**\n- * Strategy interface for <code>String</code>-based path matching.\n- *\n- * <p>Used by {@link org.springframework.core.io.support.PathMatchingResourcePatternResolver},\n- * {@link org.springframework.web.servlet.handler.AbstractUrlHandlerMapping},\n- * {@link org.springframework.web.servlet.mvc.multiaction.PropertiesMethodNameResolver},\n- * and {@link org.springframework.web.servlet.mvc.WebContentInterceptor}.\n- *\n- * <p>The default implementation is {@link AntPathMatcher}, supporting the\n- * Ant-style pattern syntax.\n- *\n- * @author Juergen Hoeller\n- * @since 1.2\n- * @see AntPathMatcher\n- */\n-public interface PathMatcher {\n-\n-\t/**\n-\t * Does the given <code>path</code> represent a pattern that can be matched\n-\t * by an implementation of this interface?\n-\t * <p>If the return value is <code>false</code>, then the {@link #match}\n-\t * method does not have to be used because direct equality comparisons\n-\t * on the static path Strings will lead to the same result.\n-\t * @param path the path String to check\n-\t * @return <code>true</code> if the given <code>path</code> represents a pattern\n-\t */\n-\tboolean isPattern(String path);\n-\n-\t/**\n-\t * Match the given <code>path</code> against the given <code>pattern</code>,\n-\t * according to this PathMatcher's matching strategy.\n-\t * @param pattern the pattern to match against\n-\t * @param path the path String to test\n-\t * @return <code>true</code> if the supplied <code>path</code> matched,\n-\t * <code>false</code> if it didn't\n-\t */\n-\tboolean match(String pattern, String path);\n-\n-\t/**\n-\t * Match the given <code>path</code> against the corresponding part of the given\n-\t * <code>pattern</code>, according to this PathMatcher's matching strategy.\n-\t * <p>Determines whether the pattern at least matches as far as the given base\n-\t * path goes, assuming that a full path may then match as well.\n-\t * @param pattern the pattern to match against\n-\t * @param path the path String to test\n-\t * @return <code>true</code> if the supplied <code>path</code> matched,\n-\t * <code>false</code> if it didn't\n-\t */\n-\tboolean matchStart(String pattern, String path);\n-\n-\t/**\n-\t * Given a pattern and a full path, determine the pattern-mapped part.\n-\t * <p>This method is supposed to find out which part of the path is matched\n-\t * dynamically through an actual pattern, that is, it strips off a statically\n-\t * defined leading path from the given full path, returning only the actually\n-\t * pattern-matched part of the path.\n-\t * <p>For example: For \"myroot/*.html\" as pattern and \"myroot/myfile.html\"\n-\t * as full path, this method should return \"myfile.html\". The detailed\n-\t * determination rules are specified to this PathMatcher's matching strategy.\n-\t * <p>A simple implementation may return the given full path as-is in case\n-\t * of an actual pattern, and the empty String in case of the pattern not\n-\t * containing any dynamic parts (i.e. the <code>pattern</code> parameter being\n-\t * a static path that wouldn't qualify as an actual {@link #isPattern pattern}).\n-\t * A sophisticated implementation will differentiate between the static parts\n-\t * and the dynamic parts of the given path pattern.\n-\t * @param pattern the path pattern\n-\t * @param path the full path to introspect\n-\t * @return the pattern-mapped part of the given <code>path</code>\n-\t * (never <code>null</code>)\n-\t */\n-\tString extractPathWithinPattern(String pattern, String path);\n-\n-\t/**\n-\t * Given a pattern and a full path, extract the URI template variables. URI template\n-\t * variables are expressed through curly brackets ('{' and '}').\n-\t * <p>For example: For pattern \"/hotels/{hotel}\" and path \"/hotels/1\", this method will\n-\t * return a map containing \"hotel\"->\"1\".\n-\t *\n-\t * @param pattern the path pattern, possibly containing URI templates\n-\t * @param path the full path to extract template variables from\n-\t * @return a map, containing variable names as keys; variables values as values\n-\t */\n-\tMap<String, String> extractUriTemplateVariables(String pattern, String path);\n-\n-\t/**\n-\t * Given a full path, returns a {@link Comparator} suitable for sorting patterns in order of explicitness for that path.\n-\t * <p>The full algorithm used depends on the underlying implementation, but generally, the returned\n-\t * <code>Comparator</code> will {@linkplain java.util.Collections#sort(java.util.List, java.util.Comparator) sort} a\n-\t * list so that more specific patterns (for that come before generic patterns.\n-\t *\n-\t * @param path the full path to use for comparison\n-\t * @return a comparator capable of sorting patterns in order of explicitness\n-\t */\n-\tComparator<String> getPatternComparator(String path);\n-\n-\t/**\n-\t * Combines two patterns into a new pattern that is returned.\n-\t * <p>The full algorithm used for combining the two pattern depends on the underlying implementation.\n-\t *\n-\t * @param pattern1 the first pattern\n-\t * @param pattern2 the second pattern\n-\t * @return the combination of the two patterns\n-\t * @throws IllegalArgumentException when the two patterns cannot be combined\n-\t */\n-\tString combine(String pattern1, String pattern2);\n-}"},{"sha":"e448ca1b3df5c94e264c20b86fff38be47b4a431","filename":"contrib/devtools/org.apache.openjpa.eclipse/src/main/java/org/apache/openjpa/eclipse/util/pathmatch/StringUtils.java","status":"removed","additions":0,"deletions":1117,"changes":1117,"blob_url":"https://github.com/apache/openjpa/blob/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse/src/main/java/org/apache/openjpa/eclipse/util/pathmatch/StringUtils.java","raw_url":"https://github.com/apache/openjpa/raw/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse/src/main/java/org/apache/openjpa/eclipse/util/pathmatch/StringUtils.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/contrib/devtools/org.apache.openjpa.eclipse/src/main/java/org/apache/openjpa/eclipse/util/pathmatch/StringUtils.java?ref=bbc296ba29c2c6dd5620934446fd71c8561db6e4","patch":"@@ -1,1117 +0,0 @@\n-/*\n- * Copyright 2002-2009 the original author or authors.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.openjpa.eclipse.util.pathmatch;\n-\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.Enumeration;\n-import java.util.Iterator;\n-import java.util.LinkedList;\n-import java.util.List;\n-import java.util.Locale;\n-import java.util.Properties;\n-import java.util.Set;\n-import java.util.StringTokenizer;\n-import java.util.TreeSet;\n-\n-/**\n- * Miscellaneous {@link String} utility methods.\n- *\n- * <p>Mainly for internal use within the framework; consider\n- * <a href=\"http://jakarta.apache.org/commons/lang/\">Jakarta's Commons Lang</a>\n- * for a more comprehensive suite of String utilities.\n- *\n- * <p>This class delivers some simple functionality that should really\n- * be provided by the core Java <code>String</code> and {@link StringBuilder}\n- * classes, such as the ability to {@link #replace} all occurrences of a given\n- * substring in a target string. It also provides easy-to-use methods to convert\n- * between delimited strings, such as CSV strings, and collections and arrays.\n- *\n- * @author Rod Johnson\n- * @author Juergen Hoeller\n- * @author Keith Donald\n- * @author Rob Harrop\n- * @author Rick Evans\n- * @author Arjen Poutsma\n- * @since 16 April 2001\n- * @see org.apache.commons.lang.StringUtils\n- */\n-@SuppressWarnings(\"unchecked\")\n-public abstract class StringUtils {\n-\n-\tprivate static final String FOLDER_SEPARATOR = \"/\";\n-\n-\tprivate static final String WINDOWS_FOLDER_SEPARATOR = \"\\\\\";\n-\n-\tprivate static final String TOP_PATH = \"..\";\n-\n-\tprivate static final String CURRENT_PATH = \".\";\n-\n-\tprivate static final char EXTENSION_SEPARATOR = '.';\n-\n-\n-\t//---------------------------------------------------------------------\n-\t// General convenience methods for working with Strings\n-\t//---------------------------------------------------------------------\n-\n-\t/**\n-\t * Check that the given CharSequence is neither <code>null</code> nor of length 0.\n-\t * Note: Will return <code>true</code> for a CharSequence that purely consists of whitespace.\n-\t * <p><pre>\n-\t * StringUtils.hasLength(null) = false\n-\t * StringUtils.hasLength(\"\") = false\n-\t * StringUtils.hasLength(\" \") = true\n-\t * StringUtils.hasLength(\"Hello\") = true\n-\t * </pre>\n-\t * @param str the CharSequence to check (may be <code>null</code>)\n-\t * @return <code>true</code> if the CharSequence is not null and has length\n-\t * @see #hasText(String)\n-\t */\n-\tpublic static boolean hasLength(CharSequence str) {\n-\t\treturn (str != null && str.length() > 0);\n-\t}\n-\n-\t/**\n-\t * Check that the given String is neither <code>null</code> nor of length 0.\n-\t * Note: Will return <code>true</code> for a String that purely consists of whitespace.\n-\t * @param str the String to check (may be <code>null</code>)\n-\t * @return <code>true</code> if the String is not null and has length\n-\t * @see #hasLength(CharSequence)\n-\t */\n-\tpublic static boolean hasLength(String str) {\n-\t\treturn hasLength((CharSequence) str);\n-\t}\n-\n-\t/**\n-\t * Check whether the given CharSequence has actual text.\n-\t * More specifically, returns <code>true</code> if the string not <code>null</code>,\n-\t * its length is greater than 0, and it contains at least one non-whitespace character.\n-\t * <p><pre>\n-\t * StringUtils.hasText(null) = false\n-\t * StringUtils.hasText(\"\") = false\n-\t * StringUtils.hasText(\" \") = false\n-\t * StringUtils.hasText(\"12345\") = true\n-\t * StringUtils.hasText(\" 12345 \") = true\n-\t * </pre>\n-\t * @param str the CharSequence to check (may be <code>null</code>)\n-\t * @return <code>true</code> if the CharSequence is not <code>null</code>,\n-\t * its length is greater than 0, and it does not contain whitespace only\n-\t * @see java.lang.Character#isWhitespace\n-\t */\n-\tpublic static boolean hasText(CharSequence str) {\n-\t\tif (!hasLength(str)) {\n-\t\t\treturn false;\n-\t\t}\n-\t\tint strLen = str.length();\n-\t\tfor (int i = 0; i < strLen; i++) {\n-\t\t\tif (!Character.isWhitespace(str.charAt(i))) {\n-\t\t\t\treturn true;\n-\t\t\t}\n-\t\t}\n-\t\treturn false;\n-\t}\n-\n-\t/**\n-\t * Check whether the given String has actual text.\n-\t * More specifically, returns <code>true</code> if the string not <code>null</code>,\n-\t * its length is greater than 0, and it contains at least one non-whitespace character.\n-\t * @param str the String to check (may be <code>null</code>)\n-\t * @return <code>true</code> if the String is not <code>null</code>, its length is\n-\t * greater than 0, and it does not contain whitespace only\n-\t * @see #hasText(CharSequence)\n-\t */\n-\tpublic static boolean hasText(String str) {\n-\t\treturn hasText((CharSequence) str);\n-\t}\n-\n-\t/**\n-\t * Check whether the given CharSequence contains any whitespace characters.\n-\t * @param str the CharSequence to check (may be <code>null</code>)\n-\t * @return <code>true</code> if the CharSequence is not empty and\n-\t * contains at least 1 whitespace character\n-\t * @see java.lang.Character#isWhitespace\n-\t */\n-\tpublic static boolean containsWhitespace(CharSequence str) {\n-\t\tif (!hasLength(str)) {\n-\t\t\treturn false;\n-\t\t}\n-\t\tint strLen = str.length();\n-\t\tfor (int i = 0; i < strLen; i++) {\n-\t\t\tif (Character.isWhitespace(str.charAt(i))) {\n-\t\t\t\treturn true;\n-\t\t\t}\n-\t\t}\n-\t\treturn false;\n-\t}\n-\n-\t/**\n-\t * Check whether the given String contains any whitespace characters.\n-\t * @param str the String to check (may be <code>null</code>)\n-\t * @return <code>true</code> if the String is not empty and\n-\t * contains at least 1 whitespace character\n-\t * @see #containsWhitespace(CharSequence)\n-\t */\n-\tpublic static boolean containsWhitespace(String str) {\n-\t\treturn containsWhitespace((CharSequence) str);\n-\t}\n-\n-\t/**\n-\t * Trim leading and trailing whitespace from the given String.\n-\t * @param str the String to check\n-\t * @return the trimmed String\n-\t * @see java.lang.Character#isWhitespace\n-\t */\n-\tpublic static String trimWhitespace(String str) {\n-\t\tif (!hasLength(str)) {\n-\t\t\treturn str;\n-\t\t}\n-\t\tStringBuilder sb = new StringBuilder(str);\n-\t\twhile (sb.length() > 0 && Character.isWhitespace(sb.charAt(0))) {\n-\t\t\tsb.deleteCharAt(0);\n-\t\t}\n-\t\twhile (sb.length() > 0 && Character.isWhitespace(sb.charAt(sb.length() - 1))) {\n-\t\t\tsb.deleteCharAt(sb.length() - 1);\n-\t\t}\n-\t\treturn sb.toString();\n-\t}\n-\n-\t/**\n-\t * Trim <i>all</i> whitespace from the given String:\n-\t * leading, trailing, and inbetween characters.\n-\t * @param str the String to check\n-\t * @return the trimmed String\n-\t * @see java.lang.Character#isWhitespace\n-\t */\n-\tpublic static String trimAllWhitespace(String str) {\n-\t\tif (!hasLength(str)) {\n-\t\t\treturn str;\n-\t\t}\n-\t\tStringBuilder sb = new StringBuilder(str);\n-\t\tint index = 0;\n-\t\twhile (sb.length() > index) {\n-\t\t\tif (Character.isWhitespace(sb.charAt(index))) {\n-\t\t\t\tsb.deleteCharAt(index);\n-\t\t\t}\n-\t\t\telse {\n-\t\t\t\tindex++;\n-\t\t\t}\n-\t\t}\n-\t\treturn sb.toString();\n-\t}\n-\n-\t/**\n-\t * Trim leading whitespace from the given String.\n-\t * @param str the String to check\n-\t * @return the trimmed String\n-\t * @see java.lang.Character#isWhitespace\n-\t */\n-\tpublic static String trimLeadingWhitespace(String str) {\n-\t\tif (!hasLength(str)) {\n-\t\t\treturn str;\n-\t\t}\n-\t\tStringBuilder sb = new StringBuilder(str);\n-\t\twhile (sb.length() > 0 && Character.isWhitespace(sb.charAt(0))) {\n-\t\t\tsb.deleteCharAt(0);\n-\t\t}\n-\t\treturn sb.toString();\n-\t}\n-\n-\t/**\n-\t * Trim trailing whitespace from the given String.\n-\t * @param str the String to check\n-\t * @return the trimmed String\n-\t * @see java.lang.Character#isWhitespace\n-\t */\n-\tpublic static String trimTrailingWhitespace(String str) {\n-\t\tif (!hasLength(str)) {\n-\t\t\treturn str;\n-\t\t}\n-\t\tStringBuilder sb = new StringBuilder(str);\n-\t\twhile (sb.length() > 0 && Character.isWhitespace(sb.charAt(sb.length() - 1))) {\n-\t\t\tsb.deleteCharAt(sb.length() - 1);\n-\t\t}\n-\t\treturn sb.toString();\n-\t}\n-\n-\t/**\n-\t * Trim all occurences of the supplied leading character from the given String.\n-\t * @param str the String to check\n-\t * @param leadingCharacter the leading character to be trimmed\n-\t * @return the trimmed String\n-\t */\n-\tpublic static String trimLeadingCharacter(String str, char leadingCharacter) {\n-\t\tif (!hasLength(str)) {\n-\t\t\treturn str;\n-\t\t}\n-\t\tStringBuilder sb = new StringBuilder(str);\n-\t\twhile (sb.length() > 0 && sb.charAt(0) == leadingCharacter) {\n-\t\t\tsb.deleteCharAt(0);\n-\t\t}\n-\t\treturn sb.toString();\n-\t}\n-\n-\t/**\n-\t * Trim all occurences of the supplied trailing character from the given String.\n-\t * @param str the String to check\n-\t * @param trailingCharacter the trailing character to be trimmed\n-\t * @return the trimmed String\n-\t */\n-\tpublic static String trimTrailingCharacter(String str, char trailingCharacter) {\n-\t\tif (!hasLength(str)) {\n-\t\t\treturn str;\n-\t\t}\n-\t\tStringBuilder sb = new StringBuilder(str);\n-\t\twhile (sb.length() > 0 && sb.charAt(sb.length() - 1) == trailingCharacter) {\n-\t\t\tsb.deleteCharAt(sb.length() - 1);\n-\t\t}\n-\t\treturn sb.toString();\n-\t}\n-\n-\n-\t/**\n-\t * Test if the given String starts with the specified prefix,\n-\t * ignoring upper/lower case.\n-\t * @param str the String to check\n-\t * @param prefix the prefix to look for\n-\t * @see java.lang.String#startsWith\n-\t */\n-\tpublic static boolean startsWithIgnoreCase(String str, String prefix) {\n-\t\tif (str == null || prefix == null) {\n-\t\t\treturn false;\n-\t\t}\n-\t\tif (str.startsWith(prefix)) {\n-\t\t\treturn true;\n-\t\t}\n-\t\tif (str.length() < prefix.length()) {\n-\t\t\treturn false;\n-\t\t}\n-\t\tString lcStr = str.substring(0, prefix.length()).toLowerCase();\n-\t\tString lcPrefix = prefix.toLowerCase();\n-\t\treturn lcStr.equals(lcPrefix);\n-\t}\n-\n-\t/**\n-\t * Test if the given String ends with the specified suffix,\n-\t * ignoring upper/lower case.\n-\t * @param str the String to check\n-\t * @param suffix the suffix to look for\n-\t * @see java.lang.String#endsWith\n-\t */\n-\tpublic static boolean endsWithIgnoreCase(String str, String suffix) {\n-\t\tif (str == null || suffix == null) {\n-\t\t\treturn false;\n-\t\t}\n-\t\tif (str.endsWith(suffix)) {\n-\t\t\treturn true;\n-\t\t}\n-\t\tif (str.length() < suffix.length()) {\n-\t\t\treturn false;\n-\t\t}\n-\n-\t\tString lcStr = str.substring(str.length() - suffix.length()).toLowerCase();\n-\t\tString lcSuffix = suffix.toLowerCase();\n-\t\treturn lcStr.equals(lcSuffix);\n-\t}\n-\n-\t/**\n-\t * Test whether the given string matches the given substring\n-\t * at the given index.\n-\t * @param str the original string (or StringBuilder)\n-\t * @param index the index in the original string to start matching against\n-\t * @param substring the substring to match at the given index\n-\t */\n-\tpublic static boolean substringMatch(CharSequence str, int index, CharSequence substring) {\n-\t\tfor (int j = 0; j < substring.length(); j++) {\n-\t\t\tint i = index + j;\n-\t\t\tif (i >= str.length() || str.charAt(i) != substring.charAt(j)) {\n-\t\t\t\treturn false;\n-\t\t\t}\n-\t\t}\n-\t\treturn true;\n-\t}\n-\n-\t/**\n-\t * Count the occurrences of the substring in string s.\n-\t * @param str string to search in. Return 0 if this is null.\n-\t * @param sub string to search for. Return 0 if this is null.\n-\t */\n-\tpublic static int countOccurrencesOf(String str, String sub) {\n-\t\tif (str == null || sub == null || str.length() == 0 || sub.length() == 0) {\n-\t\t\treturn 0;\n-\t\t}\n-\t\tint count = 0;\n-\t\tint pos = 0;\n-\t\tint idx;\n-\t\twhile ((idx = str.indexOf(sub, pos)) != -1) {\n-\t\t\t++count;\n-\t\t\tpos = idx + sub.length();\n-\t\t}\n-\t\treturn count;\n-\t}\n-\n-\t/**\n-\t * Replace all occurences of a substring within a string with\n-\t * another string.\n-\t * @param inString String to examine\n-\t * @param oldPattern String to replace\n-\t * @param newPattern String to insert\n-\t * @return a String with the replacements\n-\t */\n-\tpublic static String replace(String inString, String oldPattern, String newPattern) {\n-\t\tif (!hasLength(inString) || !hasLength(oldPattern) || newPattern == null) {\n-\t\t\treturn inString;\n-\t\t}\n-\t\tStringBuilder sb = new StringBuilder();\n-\t\tint pos = 0; // our position in the old string\n-\t\tint index = inString.indexOf(oldPattern);\n-\t\t// the index of an occurrence we've found, or -1\n-\t\tint patLen = oldPattern.length();\n-\t\twhile (index >= 0) {\n-\t\t\tsb.append(inString.substring(pos, index));\n-\t\t\tsb.append(newPattern);\n-\t\t\tpos = index + patLen;\n-\t\t\tindex = inString.indexOf(oldPattern, pos);\n-\t\t}\n-\t\tsb.append(inString.substring(pos));\n-\t\t// remember to append any characters to the right of a match\n-\t\treturn sb.toString();\n-\t}\n-\n-\t/**\n-\t * Delete all occurrences of the given substring.\n-\t * @param inString the original String\n-\t * @param pattern the pattern to delete all occurrences of\n-\t * @return the resulting String\n-\t */\n-\tpublic static String delete(String inString, String pattern) {\n-\t\treturn replace(inString, pattern, \"\");\n-\t}\n-\n-\t/**\n-\t * Delete any character in a given String.\n-\t * @param inString the original String\n-\t * @param charsToDelete a set of characters to delete.\n-\t * E.g. \"az\\n\" will delete 'a's, 'z's and new lines.\n-\t * @return the resulting String\n-\t */\n-\tpublic static String deleteAny(String inString, String charsToDelete) {\n-\t\tif (!hasLength(inString) || !hasLength(charsToDelete)) {\n-\t\t\treturn inString;\n-\t\t}\n-\t\tStringBuilder sb = new StringBuilder();\n-\t\tfor (int i = 0; i < inString.length(); i++) {\n-\t\t\tchar c = inString.charAt(i);\n-\t\t\tif (charsToDelete.indexOf(c) == -1) {\n-\t\t\t\tsb.append(c);\n-\t\t\t}\n-\t\t}\n-\t\treturn sb.toString();\n-\t}\n-\n-\n-\t//---------------------------------------------------------------------\n-\t// Convenience methods for working with formatted Strings\n-\t//---------------------------------------------------------------------\n-\n-\t/**\n-\t * Quote the given String with single quotes.\n-\t * @param str the input String (e.g. \"myString\")\n-\t * @return the quoted String (e.g. \"'myString'\"),\n-\t * or <code>null<code> if the input was <code>null</code>\n-\t */\n-\tpublic static String quote(String str) {\n-\t\treturn (str != null ? \"'\" + str + \"'\" : null);\n-\t}\n-\n-\t/**\n-\t * Turn the given Object into a String with single quotes\n-\t * if it is a String; keeping the Object as-is else.\n-\t * @param obj the input Object (e.g. \"myString\")\n-\t * @return the quoted String (e.g. \"'myString'\"),\n-\t * or the input object as-is if not a String\n-\t */\n-\tpublic static Object quoteIfString(Object obj) {\n-\t\treturn (obj instanceof String ? quote((String) obj) : obj);\n-\t}\n-\n-\t/**\n-\t * Unqualify a string qualified by a '.' dot character. For example,\n-\t * \"this.name.is.qualified\", returns \"qualified\".\n-\t * @param qualifiedName the qualified name\n-\t */\n-\tpublic static String unqualify(String qualifiedName) {\n-\t\treturn unqualify(qualifiedName, '.');\n-\t}\n-\n-\t/**\n-\t * Unqualify a string qualified by a separator character. For example,\n-\t * \"this:name:is:qualified\" returns \"qualified\" if using a ':' separator.\n-\t * @param qualifiedName the qualified name\n-\t * @param separator the separator\n-\t */\n-\tpublic static String unqualify(String qualifiedName, char separator) {\n-\t\treturn qualifiedName.substring(qualifiedName.lastIndexOf(separator) + 1);\n-\t}\n-\n-\t/**\n-\t * Capitalize a <code>String</code>, changing the first letter to\n-\t * upper case as per {@link Character#toUpperCase(char)}.\n-\t * No other letters are changed.\n-\t * @param str the String to capitalize, may be <code>null</code>\n-\t * @return the capitalized String, <code>null</code> if null\n-\t */\n-\tpublic static String capitalize(String str) {\n-\t\treturn changeFirstCharacterCase(str, true);\n-\t}\n-\n-\t/**\n-\t * Uncapitalize a <code>String</code>, changing the first letter to\n-\t * lower case as per {@link Character#toLowerCase(char)}.\n-\t * No other letters are changed.\n-\t * @param str the String to uncapitalize, may be <code>null</code>\n-\t * @return the uncapitalized String, <code>null</code> if null\n-\t */\n-\tpublic static String uncapitalize(String str) {\n-\t\treturn changeFirstCharacterCase(str, false);\n-\t}\n-\n-\tprivate static String changeFirstCharacterCase(String str, boolean capitalize) {\n-\t\tif (str == null || str.length() == 0) {\n-\t\t\treturn str;\n-\t\t}\n-\t\tStringBuilder sb = new StringBuilder(str.length());\n-\t\tif (capitalize) {\n-\t\t\tsb.append(Character.toUpperCase(str.charAt(0)));\n-\t\t}\n-\t\telse {\n-\t\t\tsb.append(Character.toLowerCase(str.charAt(0)));\n-\t\t}\n-\t\tsb.append(str.substring(1));\n-\t\treturn sb.toString();\n-\t}\n-\n-\t/**\n-\t * Extract the filename from the given path,\n-\t * e.g. \"mypath/myfile.txt\" -> \"myfile.txt\".\n-\t * @param path the file path (may be <code>null</code>)\n-\t * @return the extracted filename, or <code>null</code> if none\n-\t */\n-\tpublic static String getFilename(String path) {\n-\t\tif (path == null) {\n-\t\t\treturn null;\n-\t\t}\n-\t\tint separatorIndex = path.lastIndexOf(FOLDER_SEPARATOR);\n-\t\treturn (separatorIndex != -1 ? path.substring(separatorIndex + 1) : path);\n-\t}\n-\n-\t/**\n-\t * Extract the filename extension from the given path,\n-\t * e.g. \"mypath/myfile.txt\" -> \"txt\".\n-\t * @param path the file path (may be <code>null</code>)\n-\t * @return the extracted filename extension, or <code>null</code> if none\n-\t */\n-\tpublic static String getFilenameExtension(String path) {\n-\t\tif (path == null) {\n-\t\t\treturn null;\n-\t\t}\n-\t\tint sepIndex = path.lastIndexOf(EXTENSION_SEPARATOR);\n-\t\treturn (sepIndex != -1 ? path.substring(sepIndex + 1) : null);\n-\t}\n-\n-\t/**\n-\t * Strip the filename extension from the given path,\n-\t * e.g. \"mypath/myfile.txt\" -> \"mypath/myfile\".\n-\t * @param path the file path (may be <code>null</code>)\n-\t * @return the path with stripped filename extension,\n-\t * or <code>null</code> if none\n-\t */\n-\tpublic static String stripFilenameExtension(String path) {\n-\t\tif (path == null) {\n-\t\t\treturn null;\n-\t\t}\n-\t\tint sepIndex = path.lastIndexOf(EXTENSION_SEPARATOR);\n-\t\treturn (sepIndex != -1 ? path.substring(0, sepIndex) : path);\n-\t}\n-\n-\t/**\n-\t * Apply the given relative path to the given path,\n-\t * assuming standard Java folder separation (i.e. \"/\" separators);\n-\t * @param path the path to start from (usually a full file path)\n-\t * @param relativePath the relative path to apply\n-\t * (relative to the full file path above)\n-\t * @return the full file path that results from applying the relative path\n-\t */\n-\tpublic static String applyRelativePath(String path, String relativePath) {\n-\t\tint separatorIndex = path.lastIndexOf(FOLDER_SEPARATOR);\n-\t\tif (separatorIndex != -1) {\n-\t\t\tString newPath = path.substring(0, separatorIndex);\n-\t\t\tif (!relativePath.startsWith(FOLDER_SEPARATOR)) {\n-\t\t\t\tnewPath += FOLDER_SEPARATOR;\n-\t\t\t}\n-\t\t\treturn newPath + relativePath;\n-\t\t}\n-\t\telse {\n-\t\t\treturn relativePath;\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * Normalize the path by suppressing sequences like \"path/..\" and\n-\t * inner simple dots.\n-\t * <p>The result is convenient for path comparison. For other uses,\n-\t * notice that Windows separators (\"\\\") are replaced by simple slashes.\n-\t * @param path the original path\n-\t * @return the normalized path\n-\t */\n-\tpublic static String cleanPath(String path) {\n-\t\tif (path == null) {\n-\t\t\treturn null;\n-\t\t}\n-\t\tString pathToUse = replace(path, WINDOWS_FOLDER_SEPARATOR, FOLDER_SEPARATOR);\n-\n-\t\t// Strip prefix from path to analyze, to not treat it as part of the\n-\t\t// first path element. This is necessary to correctly parse paths like\n-\t\t// \"file:core/../core/io/Resource.class\", where the \"..\" should just\n-\t\t// strip the first \"core\" directory while keeping the \"file:\" prefix.\n-\t\tint prefixIndex = pathToUse.indexOf(\":\");\n-\t\tString prefix = \"\";\n-\t\tif (prefixIndex != -1) {\n-\t\t\tprefix = pathToUse.substring(0, prefixIndex + 1);\n-\t\t\tpathToUse = pathToUse.substring(prefixIndex + 1);\n-\t\t}\n-\t\tif (pathToUse.startsWith(FOLDER_SEPARATOR)) {\n-\t\t\tprefix = prefix + FOLDER_SEPARATOR;\n-\t\t\tpathToUse = pathToUse.substring(1);\n-\t\t}\n-\n-\t\tString[] pathArray = delimitedListToStringArray(pathToUse, FOLDER_SEPARATOR);\n-\t\tList<String> pathElements = new LinkedList<String>();\n-\t\tint tops = 0;\n-\n-\t\tfor (int i = pathArray.length - 1; i >= 0; i--) {\n-\t\t\tString element = pathArray[i];\n-\t\t\tif (CURRENT_PATH.equals(element)) {\n-\t\t\t\t// Points to current directory - drop it.\n-\t\t\t}\n-\t\t\telse if (TOP_PATH.equals(element)) {\n-\t\t\t\t// Registering top path found.\n-\t\t\t\ttops++;\n-\t\t\t}\n-\t\t\telse {\n-\t\t\t\tif (tops > 0) {\n-\t\t\t\t\t// Merging path element with element corresponding to top path.\n-\t\t\t\t\ttops--;\n-\t\t\t\t}\n-\t\t\t\telse {\n-\t\t\t\t\t// Normal path element found.\n-\t\t\t\t\tpathElements.add(0, element);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\t// Remaining top paths need to be retained.\n-\t\tfor (int i = 0; i < tops; i++) {\n-\t\t\tpathElements.add(0, TOP_PATH);\n-\t\t}\n-\n-\t\treturn prefix + collectionToDelimitedString(pathElements, FOLDER_SEPARATOR);\n-\t}\n-\n-\t/**\n-\t * Compare two paths after normalization of them.\n-\t * @param path1 first path for comparison\n-\t * @param path2 second path for comparison\n-\t * @return whether the two paths are equivalent after normalization\n-\t */\n-\tpublic static boolean pathEquals(String path1, String path2) {\n-\t\treturn cleanPath(path1).equals(cleanPath(path2));\n-\t}\n-\n-\t/**\n-\t * Parse the given <code>localeString</code> into a {@link Locale}.\n-\t * <p>This is the inverse operation of {@link Locale#toString Locale's toString}.\n-\t * @param localeString the locale string, following <code>Locale's</code>\n-\t * <code>toString()</code> format (\"en\", \"en_UK\", etc);\n-\t * also accepts spaces as separators, as an alternative to underscores\n-\t * @return a corresponding <code>Locale</code> instance\n-\t */\n-\tpublic static Locale parseLocaleString(String localeString) {\n-\t\tString[] parts = tokenizeToStringArray(localeString, \"_ \", false, false);\n-\t\tString language = (parts.length > 0 ? parts[0] : \"\");\n-\t\tString country = (parts.length > 1 ? parts[1] : \"\");\n-\t\tString variant = \"\";\n-\t\tif (parts.length >= 2) {\n-\t\t\t// There is definitely a variant, and it is everything after the country\n-\t\t\t// code sans the separator between the country code and the variant.\n-\t\t\tint endIndexOfCountryCode = localeString.indexOf(country) + country.length();\n-\t\t\t// Strip off any leading '_' and whitespace, what's left is the variant.\n-\t\t\tvariant = trimLeadingWhitespace(localeString.substring(endIndexOfCountryCode));\n-\t\t\tif (variant.startsWith(\"_\")) {\n-\t\t\t\tvariant = trimLeadingCharacter(variant, '_');\n-\t\t\t}\n-\t\t}\n-\t\treturn (language.length() > 0 ? new Locale(language, country, variant) : null);\n-\t}\n-\n-\t/**\n-\t * Determine the RFC 3066 compliant language tag,\n-\t * as used for the HTTP \"Accept-Language\" header.\n-\t * @param locale the Locale to transform to a language tag\n-\t * @return the RFC 3066 compliant language tag as String\n-\t */\n-\tpublic static String toLanguageTag(Locale locale) {\n-\t\treturn locale.getLanguage() + (hasText(locale.getCountry()) ? \"-\" + locale.getCountry() : \"\");\n-\t}\n-\n-\n-\t//---------------------------------------------------------------------\n-\t// Convenience methods for working with String arrays\n-\t//---------------------------------------------------------------------\n-\n-\t/**\n-\t * Append the given String to the given String array, returning a new array\n-\t * consisting of the input array contents plus the given String.\n-\t * @param array the array to append to (can be <code>null</code>)\n-\t * @param str the String to append\n-\t * @return the new array (never <code>null</code>)\n-\t */\n-\tpublic static String[] addStringToArray(String[] array, String str) {\n-\t\tif (ObjectUtils.isEmpty(array)) {\n-\t\t\treturn new String[] {str};\n-\t\t}\n-\t\tString[] newArr = new String[array.length + 1];\n-\t\tSystem.arraycopy(array, 0, newArr, 0, array.length);\n-\t\tnewArr[array.length] = str;\n-\t\treturn newArr;\n-\t}\n-\n-\t/**\n-\t * Concatenate the given String arrays into one,\n-\t * with overlapping array elements included twice.\n-\t * <p>The order of elements in the original arrays is preserved.\n-\t * @param array1 the first array (can be <code>null</code>)\n-\t * @param array2 the second array (can be <code>null</code>)\n-\t * @return the new array (<code>null</code> if both given arrays were <code>null</code>)\n-\t */\n-\tpublic static String[] concatenateStringArrays(String[] array1, String[] array2) {\n-\t\tif (ObjectUtils.isEmpty(array1)) {\n-\t\t\treturn array2;\n-\t\t}\n-\t\tif (ObjectUtils.isEmpty(array2)) {\n-\t\t\treturn array1;\n-\t\t}\n-\t\tString[] newArr = new String[array1.length + array2.length];\n-\t\tSystem.arraycopy(array1, 0, newArr, 0, array1.length);\n-\t\tSystem.arraycopy(array2, 0, newArr, array1.length, array2.length);\n-\t\treturn newArr;\n-\t}\n-\n-\t/**\n-\t * Merge the given String arrays into one, with overlapping\n-\t * array elements only included once.\n-\t * <p>The order of elements in the original arrays is preserved\n-\t * (with the exception of overlapping elements, which are only\n-\t * included on their first occurence).\n-\t * @param array1 the first array (can be <code>null</code>)\n-\t * @param array2 the second array (can be <code>null</code>)\n-\t * @return the new array (<code>null</code> if both given arrays were <code>null</code>)\n-\t */\n-\tpublic static String[] mergeStringArrays(String[] array1, String[] array2) {\n-\t\tif (ObjectUtils.isEmpty(array1)) {\n-\t\t\treturn array2;\n-\t\t}\n-\t\tif (ObjectUtils.isEmpty(array2)) {\n-\t\t\treturn array1;\n-\t\t}\n-\t\tList<String> result = new ArrayList<String>();\n-\t\tresult.addAll(Arrays.asList(array1));\n-\t\tfor (String str : array2) {\n-\t\t\tif (!result.contains(str)) {\n-\t\t\t\tresult.add(str);\n-\t\t\t}\n-\t\t}\n-\t\treturn toStringArray(result);\n-\t}\n-\n-\t/**\n-\t * Turn given source String array into sorted array.\n-\t * @param array the source array\n-\t * @return the sorted array (never <code>null</code>)\n-\t */\n-\tpublic static String[] sortStringArray(String[] array) {\n-\t\tif (ObjectUtils.isEmpty(array)) {\n-\t\t\treturn new String[0];\n-\t\t}\n-\t\tArrays.sort(array);\n-\t\treturn array;\n-\t}\n-\n-\t/**\n-\t * Copy the given Collection into a String array.\n-\t * The Collection must contain String elements only.\n-\t * @param collection the Collection to copy\n-\t * @return the String array (<code>null</code> if the passed-in\n-\t * Collection was <code>null</code>)\n-\t */\n-\tpublic static String[] toStringArray(Collection<String> collection) {\n-\t\tif (collection == null) {\n-\t\t\treturn null;\n-\t\t}\n-\t\treturn collection.toArray(new String[collection.size()]);\n-\t}\n-\n-\t/**\n-\t * Copy the given Enumeration into a String array.\n-\t * The Enumeration must contain String elements only.\n-\t * @param enumeration the Enumeration to copy\n-\t * @return the String array (<code>null</code> if the passed-in\n-\t * Enumeration was <code>null</code>)\n-\t */\n-\tpublic static String[] toStringArray(Enumeration<String> enumeration) {\n-\t\tif (enumeration == null) {\n-\t\t\treturn null;\n-\t\t}\n-\t\tList<String> list = Collections.list(enumeration);\n-\t\treturn list.toArray(new String[list.size()]);\n-\t}\n-\n-\t/**\n-\t * Trim the elements of the given String array,\n-\t * calling <code>String.trim()</code> on each of them.\n-\t * @param array the original String array\n-\t * @return the resulting array (of the same size) with trimmed elements\n-\t */\n-\tpublic static String[] trimArrayElements(String[] array) {\n-\t\tif (ObjectUtils.isEmpty(array)) {\n-\t\t\treturn new String[0];\n-\t\t}\n-\t\tString[] result = new String[array.length];\n-\t\tfor (int i = 0; i < array.length; i++) {\n-\t\t\tString element = array[i];\n-\t\t\tresult[i] = (element != null ? element.trim() : null);\n-\t\t}\n-\t\treturn result;\n-\t}\n-\n-\t/**\n-\t * Remove duplicate Strings from the given array.\n-\t * Also sorts the array, as it uses a TreeSet.\n-\t * @param array the String array\n-\t * @return an array without duplicates, in natural sort order\n-\t */\n-\tpublic static String[] removeDuplicateStrings(String[] array) {\n-\t\tif (ObjectUtils.isEmpty(array)) {\n-\t\t\treturn array;\n-\t\t}\n-\t\tSet<String> set = new TreeSet<String>();\n-\t\tfor (String element : array) {\n-\t\t\tset.add(element);\n-\t\t}\n-\t\treturn toStringArray(set);\n-\t}\n-\n-\t/**\n-\t * Split a String at the first occurrence of the delimiter.\n-\t * Does not include the delimiter in the result.\n-\t * @param toSplit the string to split\n-\t * @param delimiter to split the string up with\n-\t * @return a two element array with index 0 being before the delimiter, and\n-\t * index 1 being after the delimiter (neither element includes the delimiter);\n-\t * or <code>null</code> if the delimiter wasn't found in the given input String\n-\t */\n-\tpublic static String[] split(String toSplit, String delimiter) {\n-\t\tif (!hasLength(toSplit) || !hasLength(delimiter)) {\n-\t\t\treturn null;\n-\t\t}\n-\t\tint offset = toSplit.indexOf(delimiter);\n-\t\tif (offset < 0) {\n-\t\t\treturn null;\n-\t\t}\n-\t\tString beforeDelimiter = toSplit.substring(0, offset);\n-\t\tString afterDelimiter = toSplit.substring(offset + delimiter.length());\n-\t\treturn new String[] {beforeDelimiter, afterDelimiter};\n-\t}\n-\n-\t/**\n-\t * Take an array Strings and split each element based on the given delimiter.\n-\t * A <code>Properties</code> instance is then generated, with the left of the\n-\t * delimiter providing the key, and the right of the delimiter providing the value.\n-\t * <p>Will trim both the key and value before adding them to the\n-\t * <code>Properties</code> instance.\n-\t * @param array the array to process\n-\t * @param delimiter to split each element using (typically the equals symbol)\n-\t * @return a <code>Properties</code> instance representing the array contents,\n-\t * or <code>null</code> if the array to process was null or empty\n-\t */\n-\tpublic static Properties splitArrayElementsIntoProperties(String[] array, String delimiter) {\n-\t\treturn splitArrayElementsIntoProperties(array, delimiter, null);\n-\t}\n-\n-\t/**\n-\t * Take an array Strings and split each element based on the given delimiter.\n-\t * A <code>Properties</code> instance is then generated, with the left of the\n-\t * delimiter providing the key, and the right of the delimiter providing the value.\n-\t * <p>Will trim both the key and value before adding them to the\n-\t * <code>Properties</code> instance.\n-\t * @param array the array to process\n-\t * @param delimiter to split each element using (typically the equals symbol)\n-\t * @param charsToDelete one or more characters to remove from each element\n-\t * prior to attempting the split operation (typically the quotation mark\n-\t * symbol), or <code>null</code> if no removal should occur\n-\t * @return a <code>Properties</code> instance representing the array contents,\n-\t * or <code>null</code> if the array to process was <code>null</code> or empty\n-\t */\n-\tpublic static Properties splitArrayElementsIntoProperties(\n-\t\t\tString[] array, String delimiter, String charsToDelete) {\n-\n-\t\tif (ObjectUtils.isEmpty(array)) {\n-\t\t\treturn null;\n-\t\t}\n-\t\tProperties result = new Properties();\n-\t\tfor (String element : array) {\n-\t\t\tif (charsToDelete != null) {\n-\t\t\t\telement = deleteAny(element, charsToDelete);\n-\t\t\t}\n-\t\t\tString[] splittedElement = split(element, delimiter);\n-\t\t\tif (splittedElement == null) {\n-\t\t\t\tcontinue;\n-\t\t\t}\n-\t\t\tresult.setProperty(splittedElement[0].trim(), splittedElement[1].trim());\n-\t\t}\n-\t\treturn result;\n-\t}\n-\n-\t/**\n-\t * Tokenize the given String into a String array via a StringTokenizer.\n-\t * Trims tokens and omits empty tokens.\n-\t * <p>The given delimiters string is supposed to consist of any number of\n-\t * delimiter characters. Each of those characters can be used to separate\n-\t * tokens. A delimiter is always a single character; for multi-character\n-\t * delimiters, consider using <code>delimitedListToStringArray</code>\n-\t * @param str the String to tokenize\n-\t * @param delimiters the delimiter characters, assembled as String\n-\t * (each of those characters is individually considered as delimiter).\n-\t * @return an array of the tokens\n-\t * @see java.util.StringTokenizer\n-\t * @see java.lang.String#trim()\n-\t * @see #delimitedListToStringArray\n-\t */\n-\tpublic static String[] tokenizeToStringArray(String str, String delimiters) {\n-\t\treturn tokenizeToStringArray(str, delimiters, true, true);\n-\t}\n-\n-\t/**\n-\t * Tokenize the given String into a String array via a StringTokenizer.\n-\t * <p>The given delimiters string is supposed to consist of any number of\n-\t * delimiter characters. Each of those characters can be used to separate\n-\t * tokens. A delimiter is always a single character; for multi-character\n-\t * delimiters, consider using <code>delimitedListToStringArray</code>\n-\t * @param str the String to tokenize\n-\t * @param delimiters the delimiter characters, assembled as String\n-\t * (each of those characters is individually considered as delimiter)\n-\t * @param trimTokens trim the tokens via String's <code>trim</code>\n-\t * @param ignoreEmptyTokens omit empty tokens from the result array\n-\t * (only applies to tokens that are empty after trimming; StringTokenizer\n-\t * will not consider subsequent delimiters as token in the first place).\n-\t * @return an array of the tokens (<code>null</code> if the input String\n-\t * was <code>null</code>)\n-\t * @see java.util.StringTokenizer\n-\t * @see java.lang.String#trim()\n-\t * @see #delimitedListToStringArray\n-\t */\n-\tpublic static String[] tokenizeToStringArray(\n-\t\t\tString str, String delimiters, boolean trimTokens, boolean ignoreEmptyTokens) {\n-\n-\t\tif (str == null) {\n-\t\t\treturn null;\n-\t\t}\n-\t\tStringTokenizer st = new StringTokenizer(str, delimiters);\n-\t\tList<String> tokens = new ArrayList<String>();\n-\t\twhile (st.hasMoreTokens()) {\n-\t\t\tString token = st.nextToken();\n-\t\t\tif (trimTokens) {\n-\t\t\t\ttoken = token.trim();\n-\t\t\t}\n-\t\t\tif (!ignoreEmptyTokens || token.length() > 0) {\n-\t\t\t\ttokens.add(token);\n-\t\t\t}\n-\t\t}\n-\t\treturn toStringArray(tokens);\n-\t}\n-\n-\t/**\n-\t * Take a String which is a delimited list and convert it to a String array.\n-\t * <p>A single delimiter can consists of more than one character: It will still\n-\t * be considered as single delimiter string, rather than as bunch of potential\n-\t * delimiter characters - in contrast to <code>tokenizeToStringArray</code>.\n-\t * @param str the input String\n-\t * @param delimiter the delimiter between elements (this is a single delimiter,\n-\t * rather than a bunch individual delimiter characters)\n-\t * @return an array of the tokens in the list\n-\t * @see #tokenizeToStringArray\n-\t */\n-\tpublic static String[] delimitedListToStringArray(String str, String delimiter) {\n-\t\treturn delimitedListToStringArray(str, delimiter, null);\n-\t}\n-\n-\t/**\n-\t * Take a String which is a delimited list and convert it to a String array.\n-\t * <p>A single delimiter can consists of more than one character: It will still\n-\t * be considered as single delimiter string, rather than as bunch of potential\n-\t * delimiter characters - in contrast to <code>tokenizeToStringArray</code>.\n-\t * @param str the input String\n-\t * @param delimiter the delimiter between elements (this is a single delimiter,\n-\t * rather than a bunch individual delimiter characters)\n-\t * @param charsToDelete a set of characters to delete. Useful for deleting unwanted\n-\t * line breaks: e.g. \"\\r\\n\\f\" will delete all new lines and line feeds in a String.\n-\t * @return an array of the tokens in the list\n-\t * @see #tokenizeToStringArray\n-\t */\n-\tpublic static String[] delimitedListToStringArray(String str, String delimiter, String charsToDelete) {\n-\t\tif (str == null) {\n-\t\t\treturn new String[0];\n-\t\t}\n-\t\tif (delimiter == null) {\n-\t\t\treturn new String[] {str};\n-\t\t}\n-\t\tList<String> result = new ArrayList<String>();\n-\t\tif (\"\".equals(delimiter)) {\n-\t\t\tfor (int i = 0; i < str.length(); i++) {\n-\t\t\t\tresult.add(deleteAny(str.substring(i, i + 1), charsToDelete));\n-\t\t\t}\n-\t\t}\n-\t\telse {\n-\t\t\tint pos = 0;\n-\t\t\tint delPos;\n-\t\t\twhile ((delPos = str.indexOf(delimiter, pos)) != -1) {\n-\t\t\t\tresult.add(deleteAny(str.substring(pos, delPos), charsToDelete));\n-\t\t\t\tpos = delPos + delimiter.length();\n-\t\t\t}\n-\t\t\tif (str.length() > 0 && pos <= str.length()) {\n-\t\t\t\t// Add rest of String, but not in case of empty input.\n-\t\t\t\tresult.add(deleteAny(str.substring(pos), charsToDelete));\n-\t\t\t}\n-\t\t}\n-\t\treturn toStringArray(result);\n-\t}\n-\n-\t/**\n-\t * Convert a CSV list into an array of Strings.\n-\t * @param str the input String\n-\t * @return an array of Strings, or the empty array in case of empty input\n-\t */\n-\tpublic static String[] commaDelimitedListToStringArray(String str) {\n-\t\treturn delimitedListToStringArray(str, \",\");\n-\t}\n-\n-\t/**\n-\t * Convenience method to convert a CSV string list to a set.\n-\t * Note that this will suppress duplicates.\n-\t * @param str the input String\n-\t * @return a Set of String entries in the list\n-\t */\n-\tpublic static Set<String> commaDelimitedListToSet(String str) {\n-\t\tSet<String> set = new TreeSet<String>();\n-\t\tString[] tokens = commaDelimitedListToStringArray(str);\n-\t\tfor (String token : tokens) {\n-\t\t\tset.add(token);\n-\t\t}\n-\t\treturn set;\n-\t}\n-\n-\t/**\n-\t * Convenience method to return a Collection as a delimited (e.g. CSV)\n-\t * String. E.g. useful for <code>toString()</code> implementations.\n-\t * @param coll the Collection to display\n-\t * @param delim the delimiter to use (probably a \",\")\n-\t * @param prefix the String to start each element with\n-\t * @param suffix the String to end each element with\n-\t * @return the delimited String\n-\t */\n-\tpublic static String collectionToDelimitedString(Collection coll, String delim, String prefix, String suffix) {\n-\t\tif (CollectionUtils.isEmpty(coll)) {\n-\t\t\treturn \"\";\n-\t\t}\n-\t\tStringBuilder sb = new StringBuilder();\n-\t\tIterator it = coll.iterator();\n-\t\twhile (it.hasNext()) {\n-\t\t\tsb.append(prefix).append(it.next()).append(suffix);\n-\t\t\tif (it.hasNext()) {\n-\t\t\t\tsb.append(delim);\n-\t\t\t}\n-\t\t}\n-\t\treturn sb.toString();\n-\t}\n-\n-\t/**\n-\t * Convenience method to return a Collection as a delimited (e.g. CSV)\n-\t * String. E.g. useful for <code>toString()</code> implementations.\n-\t * @param coll the Collection to display\n-\t * @param delim the delimiter to use (probably a \",\")\n-\t * @return the delimited String\n-\t */\n-\tpublic static String collectionToDelimitedString(Collection coll, String delim) {\n-\t\treturn collectionToDelimitedString(coll, delim, \"\", \"\");\n-\t}\n-\n-\t/**\n-\t * Convenience method to return a Collection as a CSV String.\n-\t * E.g. useful for <code>toString()</code> implementations.\n-\t * @param coll the Collection to display\n-\t * @return the delimited String\n-\t */\n-\tpublic static String collectionToCommaDelimitedString(Collection coll) {\n-\t\treturn collectionToDelimitedString(coll, \",\");\n-\t}\n-\n-\t/**\n-\t * Convenience method to return a String array as a delimited (e.g. CSV)\n-\t * String. E.g. useful for <code>toString()</code> implementations.\n-\t * @param arr the array to display\n-\t * @param delim the delimiter to use (probably a \",\")\n-\t * @return the delimited String\n-\t */\n-\tpublic static String arrayToDelimitedString(Object[] arr, String delim) {\n-\t\tif (ObjectUtils.isEmpty(arr)) {\n-\t\t\treturn \"\";\n-\t\t}\n-\t\tif (arr.length == 1) {\n-\t\t\treturn ObjectUtils.nullSafeToString(arr[0]);\n-\t\t}\n-\t\tStringBuilder sb = new StringBuilder();\n-\t\tfor (int i = 0; i < arr.length; i++) {\n-\t\t\tif (i > 0) {\n-\t\t\t\tsb.append(delim);\n-\t\t\t}\n-\t\t\tsb.append(arr[i]);\n-\t\t}\n-\t\treturn sb.toString();\n-\t}\n-\n-\t/**\n-\t * Convenience method to return a String array as a CSV String.\n-\t * E.g. useful for <code>toString()</code> implementations.\n-\t * @param arr the array to display\n-\t * @return the delimited String\n-\t */\n-\tpublic static String arrayToCommaDelimitedString(Object[] arr) {\n-\t\treturn arrayToDelimitedString(arr, \",\");\n-\t}\n-\n-}"},{"sha":"978b841dead2c591d38c063b2eab8da99a9671f1","filename":"contrib/devtools/org.apache.openjpa.eclipse/src/main/resources/icons/apache-feather-small.jpg","status":"removed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse/src/main/resources/icons/apache-feather-small.jpg","raw_url":"https://github.com/apache/openjpa/raw/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse/src/main/resources/icons/apache-feather-small.jpg","contents_url":"https://api.github.com/repos/apache/openjpa/contents/contrib/devtools/org.apache.openjpa.eclipse/src/main/resources/icons/apache-feather-small.jpg?ref=bbc296ba29c2c6dd5620934446fd71c8561db6e4"},{"sha":"a608852721fc310e6011b1f9b584e2db93e0f63d","filename":"contrib/devtools/org.apache.openjpa.eclipse/src/main/resources/icons/openjpa-logo-small.png","status":"removed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse/src/main/resources/icons/openjpa-logo-small.png","raw_url":"https://github.com/apache/openjpa/raw/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa.eclipse/src/main/resources/icons/openjpa-logo-small.png","contents_url":"https://api.github.com/repos/apache/openjpa/contents/contrib/devtools/org.apache.openjpa.eclipse/src/main/resources/icons/openjpa-logo-small.png?ref=bbc296ba29c2c6dd5620934446fd71c8561db6e4"},{"sha":"de23fad2b96cc4595956eb261aefbfe8d4ae93ef","filename":"contrib/devtools/org.apache.openjpa/LICENSE.txt","status":"removed","additions":0,"deletions":380,"changes":380,"blob_url":"https://github.com/apache/openjpa/blob/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa/LICENSE.txt","raw_url":"https://github.com/apache/openjpa/raw/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa/LICENSE.txt","contents_url":"https://api.github.com/repos/apache/openjpa/contents/contrib/devtools/org.apache.openjpa/LICENSE.txt?ref=bbc296ba29c2c6dd5620934446fd71c8561db6e4","patch":"@@ -1,380 +0,0 @@\n-\n-                                 Apache License\n-                           Version 2.0, January 2004\n-                        http://www.apache.org/licenses/\n-\n-   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n-\n-   1. Definitions.\n-\n-      \"License\" shall mean the terms and conditions for use, reproduction,\n-      and distribution as defined by Sections 1 through 9 of this document.\n-\n-      \"Licensor\" shall mean the copyright owner or entity authorized by\n-      the copyright owner that is granting the License.\n-\n-      \"Legal Entity\" shall mean the union of the acting entity and all\n-      other entities that control, are controlled by, or are under common\n-      control with that entity. For the purposes of this definition,\n-      \"control\" means (i) the power, direct or indirect, to cause the\n-      direction or management of such entity, whether by contract or\n-      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n-      outstanding shares, or (iii) beneficial ownership of such entity.\n-\n-      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n-      exercising permissions granted by this License.\n-\n-      \"Source\" form shall mean the preferred form for making modifications,\n-      including but not limited to software source code, documentation\n-      source, and configuration files.\n-\n-      \"Object\" form shall mean any form resulting from mechanical\n-      transformation or translation of a Source form, including but\n-      not limited to compiled object code, generated documentation,\n-      and conversions to other media types.\n-\n-      \"Work\" shall mean the work of authorship, whether in Source or\n-      Object form, made available under the License, as indicated by a\n-      copyright notice that is included in or attached to the work\n-      (an example is provided in the Appendix below).\n-\n-      \"Derivative Works\" shall mean any work, whether in Source or Object\n-      form, that is based on (or derived from) the Work and for which the\n-      editorial revisions, annotations, elaborations, or other modifications\n-      represent, as a whole, an original work of authorship. For the purposes\n-      of this License, Derivative Works shall not include works that remain\n-      separable from, or merely link (or bind by name) to the interfaces of,\n-      the Work and Derivative Works thereof.\n-\n-      \"Contribution\" shall mean any work of authorship, including\n-      the original version of the Work and any modifications or additions\n-      to that Work or Derivative Works thereof, that is intentionally\n-      submitted to Licensor for inclusion in the Work by the copyright owner\n-      or by an individual or Legal Entity authorized to submit on behalf of\n-      the copyright owner. For the purposes of this definition, \"submitted\"\n-      means any form of electronic, verbal, or written communication sent\n-      to the Licensor or its representatives, including but not limited to\n-      communication on electronic mailing lists, source code control systems,\n-      and issue tracking systems that are managed by, or on behalf of, the\n-      Licensor for the purpose of discussing and improving the Work, but\n-      excluding communication that is conspicuously marked or otherwise\n-      designated in writing by the copyright owner as \"Not a Contribution.\"\n-\n-      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n-      on behalf of whom a Contribution has been received by Licensor and\n-      subsequently incorporated within the Work.\n-\n-   2. Grant of Copyright License. Subject to the terms and conditions of\n-      this License, each Contributor hereby grants to You a perpetual,\n-      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n-      copyright license to reproduce, prepare Derivative Works of,\n-      publicly display, publicly perform, sublicense, and distribute the\n-      Work and such Derivative Works in Source or Object form.\n-\n-   3. Grant of Patent License. Subject to the terms and conditions of\n-      this License, each Contributor hereby grants to You a perpetual,\n-      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n-      (except as stated in this section) patent license to make, have made,\n-      use, offer to sell, sell, import, and otherwise transfer the Work,\n-      where such license applies only to those patent claims licensable\n-      by such Contributor that are necessarily infringed by their\n-      Contribution(s) alone or by combination of their Contribution(s)\n-      with the Work to which such Contribution(s) was submitted. If You\n-      institute patent litigation against any entity (including a\n-      cross-claim or counterclaim in a lawsuit) alleging that the Work\n-      or a Contribution incorporated within the Work constitutes direct\n-      or contributory patent infringement, then any patent licenses\n-      granted to You under this License for that Work shall terminate\n-      as of the date such litigation is filed.\n-\n-   4. Redistribution. You may reproduce and distribute copies of the\n-      Work or Derivative Works thereof in any medium, with or without\n-      modifications, and in Source or Object form, provided that You\n-      meet the following conditions:\n-\n-      (a) You must give any other recipients of the Work or\n-          Derivative Works a copy of this License; and\n-\n-      (b) You must cause any modified files to carry prominent notices\n-          stating that You changed the files; and\n-\n-      (c) You must retain, in the Source form of any Derivative Works\n-          that You distribute, all copyright, patent, trademark, and\n-          attribution notices from the Source form of the Work,\n-          excluding those notices that do not pertain to any part of\n-          the Derivative Works; and\n-\n-      (d) If the Work includes a \"NOTICE\" text file as part of its\n-          distribution, then any Derivative Works that You distribute must\n-          include a readable copy of the attribution notices contained\n-          within such NOTICE file, excluding those notices that do not\n-          pertain to any part of the Derivative Works, in at least one\n-          of the following places: within a NOTICE text file distributed\n-          as part of the Derivative Works; within the Source form or\n-          documentation, if provided along with the Derivative Works; or,\n-          within a display generated by the Derivative Works, if and\n-          wherever such third-party notices normally appear. The contents\n-          of the NOTICE file are for informational purposes only and\n-          do not modify the License. You may add Your own attribution\n-          notices within Derivative Works that You distribute, alongside\n-          or as an addendum to the NOTICE text from the Work, provided\n-          that such additional attribution notices cannot be construed\n-          as modifying the License.\n-\n-      You may add Your own copyright statement to Your modifications and\n-      may provide additional or different license terms and conditions\n-      for use, reproduction, or distribution of Your modifications, or\n-      for any such Derivative Works as a whole, provided Your use,\n-      reproduction, and distribution of the Work otherwise complies with\n-      the conditions stated in this License.\n-\n-   5. Submission of Contributions. Unless You explicitly state otherwise,\n-      any Contribution intentionally submitted for inclusion in the Work\n-      by You to the Licensor shall be under the terms and conditions of\n-      this License, without any additional terms or conditions.\n-      Notwithstanding the above, nothing herein shall supersede or modify\n-      the terms of any separate license agreement you may have executed\n-      with Licensor regarding such Contributions.\n-\n-   6. Trademarks. This License does not grant permission to use the trade\n-      names, trademarks, service marks, or product names of the Licensor,\n-      except as required for reasonable and customary use in describing the\n-      origin of the Work and reproducing the content of the NOTICE file.\n-\n-   7. Disclaimer of Warranty. Unless required by applicable law or\n-      agreed to in writing, Licensor provides the Work (and each\n-      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n-      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n-      implied, including, without limitation, any warranties or conditions\n-      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n-      PARTICULAR PURPOSE. You are solely responsible for determining the\n-      appropriateness of using or redistributing the Work and assume any\n-      risks associated with Your exercise of permissions under this License.\n-\n-   8. Limitation of Liability. In no event and under no legal theory,\n-      whether in tort (including negligence), contract, or otherwise,\n-      unless required by applicable law (such as deliberate and grossly\n-      negligent acts) or agreed to in writing, shall any Contributor be\n-      liable to You for damages, including any direct, indirect, special,\n-      incidental, or consequential damages of any character arising as a\n-      result of this License or out of the use or inability to use the\n-      Work (including but not limited to damages for loss of goodwill,\n-      work stoppage, computer failure or malfunction, or any and all\n-      other commercial damages or losses), even if such Contributor\n-      has been advised of the possibility of such damages.\n-\n-   9. Accepting Warranty or Additional Liability. While redistributing\n-      the Work or Derivative Works thereof, You may choose to offer,\n-      and charge a fee for, acceptance of support, warranty, indemnity,\n-      or other liability obligations and/or rights consistent with this\n-      License. However, in accepting such obligations, You may act only\n-      on Your own behalf and on Your sole responsibility, not on behalf\n-      of any other Contributor, and only if You agree to indemnify,\n-      defend, and hold each Contributor harmless for any liability\n-      incurred by, or claims asserted against, such Contributor by reason\n-      of your accepting any such warranty or additional liability.\n-\n-   END OF TERMS AND CONDITIONS\n-\n-   APPENDIX: How to apply the Apache License to your work.\n-\n-      To apply the Apache License to your work, attach the following\n-      boilerplate notice, with the fields enclosed by brackets \"[]\"\n-      replaced with your own identifying information. (Don't include\n-      the brackets!)  The text should be enclosed in the appropriate\n-      comment syntax for the file format. We also recommend that a\n-      file or class name and description of purpose be included on the\n-      same \"printed page\" as the copyright notice for easier\n-      identification within third-party archives.\n-\n-   Copyright [yyyy] [name of copyright owner]\n-\n-   Licensed under the Apache License, Version 2.0 (the \"License\");\n-   you may not use this file except in compliance with the License.\n-   You may obtain a copy of the License at\n-\n-       http://www.apache.org/licenses/LICENSE-2.0\n-\n-   Unless required by applicable law or agreed to in writing, software\n-   distributed under the License is distributed on an \"AS IS\" BASIS,\n-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-   See the License for the specific language governing permissions and\n-   limitations under the License.\n-\n-\n-======================================\n-  LICENSES FOR INCLUDED DEPENDENCIES\n-======================================\n-\n-All the source code for the OpenJPA project is released under the\n-license above. Additionally, the OpenJPA binary distribution\n-includes a number of third-party files that are required in\n-order to the software to function. Unless noted below, these jars\n-and resource files are also released under the ASF license above.\n-\n-The exceptions are as follows:\n-\n-===========================\n-  orm-xsd.rsrc - included in the openjpa jar, taken from:\n-    http://java.sun.com/xml/ns/persistence/orm_1_0.xsd)\n-  persistence-xsd.rsrc - included in the openjpa jar, taken from:\n-    http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd)\n-  websphere-uow-api.jar - this jar file contains WebSphere proprietary\n-    API code which is licensed for use when compiling OpenJPA. The\n-    jar is not distributed with OpenJPA and is only included with the\n-    source archive in order to resolve compilation dependencies. \n-===========================\n-\n-COMMON DEVELOPMENT AND DISTRIBUTION LICENSE (CDDL) Version 1.0\n-\n-1. Definitions.\n-\n-1.1. Contributor means each individual or entity that creates or contributes to the creation of Modifications.\n-\n-1.2. Contributor Version means the combination of the Original Software, prior Modifications used by a Contributor (if any), and the Modifications made by that particular Contributor.\n-\n-1.3. Covered Software means (a) the Original Software, or (b) Modifications, or (c) the combination of files containing Original Software with files containing Modifications, in each case including portions thereof.\n-\n-1.4. Executable means the Covered Software in any form other than Source Code.\n-\n-1.5. Initial Developer means the individual or entity that first makes Original Software available under this License.\n-\n-1.6. Larger Work means a work which combines Covered Software or portions thereof with code not governed by the terms of this License.\n-\n-1.7. License means this document.\n-\n-1.8. Licensable means having the right to grant, to the maximum extent possible, whether at the time of the initial grant or subsequently acquired, any and all of the rights conveyed herein.\n-\n-1.9. Modifications means the Source Code and Executable form of any of the following:\n-\n-A. Any file that results from an addition to, deletion from or modification of the contents of a file containing Original Software or previous Modifications;\n-\n-B. Any new file that contains any part of the Original Software or previous Modification; or\n-\n-C. Any new file that is contributed or otherwise made available under the terms of this License.\n-\n-1.10. Original Software means the Source Code and Executable form of computer software code that is originally released under this License.\n-\n-1.11. Patent Claims means any patent claim(s), now owned or hereafter acquired, including without limitation, method, process, and apparatus claims, in any patent Licensable by grantor.\n-\n-1.12. Source Code means (a) the common form of computer software code in which modifications are made and (b) associated documentation included in or with such code.\n-\n-1.13. You (or Your) means an individual or a legal entity exercising rights under, and complying with all of the terms of, this License. For legal entities, You includes any entity which controls, is controlled by, or is under common control with You. For purposes of this definition, control means (a)�the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (b)�ownership of more than fifty percent (50%) of the outstanding shares or beneficial ownership of such entity.\n-\n-2. License Grants.\n-\n-2.1. The Initial Developer Grant.\n-Conditioned upon Your compliance with Section 3.1 below and subject to third party intellectual property claims, the Initial Developer hereby grants You a world-wide, royalty-free, non-exclusive license:\n-(a) under intellectual property rights (other than patent or trademark) Licensable by Initial Developer, to use, reproduce, modify, display, perform, sublicense and distribute the Original Software (or portions thereof), with or without Modifications, and/or as part of a Larger Work; and\n-(b) under Patent Claims infringed by the making, using or selling of Original Software, to make, have made, use, practice, sell, and offer for sale, and/or otherwise dispose of the Original Software (or portions thereof).\n-(c) The licenses granted in Sections�2.1(a) and (b) are effective on the date Initial Developer first distributes or otherwise makes the Original Software available to a third party under the terms of this License.\n-(d) Notwithstanding Section�2.1(b) above, no patent license is granted: (1)�for code that You delete from the Original Software, or (2)�for infringements caused by: (i)�the modification of the Original Software, or (ii)�the combination of the Original Software with other software or devices.\n-\n-2.2. Contributor Grant.\n-Conditioned upon Your compliance with Section 3.1 below and subject to third party intellectual property claims, each Contributor hereby grants You a world-wide, royalty-free, non-exclusive license:\n-(a) under intellectual property rights (other than patent or trademark) Licensable by Contributor to use, reproduce, modify, display, perform, sublicense and distribute the Modifications created by such Contributor (or portions thereof), either on an unmodified basis, with other Modifications, as Covered Software and/or as part of a Larger Work; and\n-(b) under Patent Claims infringed by the making, using, or selling of Modifications made by that Contributor either alone and/or in combination with its Contributor Version (or portions of such combination), to make, use, sell, offer for sale, have made, and/or otherwise dispose of: (1)�Modifications made by that Contributor (or portions thereof); and (2)�the combination of Modifications made by that Contributor with its Contributor Version (or portions of such combination).\n-(c) The licenses granted in Sections�2.2(a) and 2.2(b) are effective on the date Contributor first distributes or otherwise makes the Modifications available to a third party.\n-(d) Notwithstanding Section�2.2(b) above, no patent license is granted: (1)�for any code that Contributor has deleted from the Contributor Version; (2)�for infringements caused by: (i)�third party modifications of Contributor Version, or (ii)�the combination of Modifications made by that Contributor with other software (except as part of the Contributor Version) or other devices; or (3)�under Patent Claims infringed by Covered Software in the absence of Modifications made by that Contributor.\n-\n-3. Distribution Obligations.\n-\n-3.1. Availability of Source Code.\n-\n-Any Covered Software that You distribute or otherwise make available in Executable form must also be made available in Source Code form and that Source Code form must be distributed only under the terms of this License. You must include a copy of this License with every copy of the Source Code form of the Covered Software You distribute or otherwise make available. You must inform recipients of any such Covered Software in Executable form as to how they can obtain such Covered Software in Source Code form in a reasonable manner on or through a medium customarily used for software exchange.\n-\n-3.2. Modifications.\n-\n-The Modifications that You create or to which You contribute are governed by the terms of this License. You represent that You believe Your Modifications are Your original creation(s) and/or You have sufficient rights to grant the rights conveyed by this License.\n-\n-3.3. Required Notices.\n-You must include a notice in each of Your Modifications that identifies You as the Contributor of the Modification. You may not remove or alter any copyright, patent or trademark notices contained within the Covered Software, or any notices of licensing or any descriptive text giving attribution to any Contributor or the Initial Developer.\n-\n-3.4. Application of Additional Terms.\n-You may not offer or impose any terms on any Covered Software in Source Code form that alters or restricts the applicable version of this License or the recipients rights hereunder. You may choose to offer, and to charge a fee for, warranty, support, indemnity or liability obligations to one or more recipients of Covered Software. However, you may do so only on Your own behalf, and not on behalf of the Initial Developer or any Contributor. You must make it absolutely clear that any such warranty, support, indemnity or liability obligation is offered by You alone, and You hereby agree to indemnify the Initial Developer and every Contributor for any liability incurred by the Initial Developer or such Contributor as a result of warranty, support, indemnity or liability terms You offer.\n-\n-3.5. Distribution of Executable Versions.\n-You may distribute the Executable form of the Covered Software under the terms of this License or under the terms of a license of Your choice, which may contain terms different from this License, provided that You are in compliance with the terms of this License and that the license for the Executable form does not attempt to limit or alter the recipients rights in the Source Code form from the rights set forth in this License. If You distribute the Covered Software in Executable form under a different license, You must make it absolutely clear that any terms which differ from this License are offered by You alone, not by the Initial Developer or Contributor. You hereby agree to indemnify the Initial Developer and every Contributor for any liability incurred by the Initial Developer or such Contributor as a result of any such terms You offer.\n-\n-3.6. Larger Works.\n-You may create a Larger Work by combining Covered Software with other code not governed by the terms of this License and distribute the Larger Work as a single product. In such a case, You must make sure the requirements of this License are fulfilled for the Covered Software.\n-\n-4. Versions of the License.\n-\n-4.1. New Versions.\n-Sun Microsystems, Inc. is the initial license steward and may publish revised and/or new versions of this License from time to time. Each version will be given a distinguishing version number. Except as provided in Section 4.3, no one other than the license steward has the right to modify this License.\n-\n-4.2. Effect of New Versions.\n-\n-You may always continue to use, distribute or otherwise make the Covered Software available under the terms of the version of the License under which You originally received the Covered Software. If the Initial Developer includes a notice in the Original Software prohibiting it from being distributed or otherwise made available under any subsequent version of the License, You must distribute and make the Covered Software available under the terms of the version of the License under which You originally received the Covered Software. Otherwise, You may also choose to use, distribute or otherwise make the Covered Software available under the terms of any subsequent version of the License published by the license steward.\n-4.3. Modified Versions.\n-\n-When You are an Initial Developer and You want to create a new license for Your Original Software, You may create and use a modified version of this License if You: (a)�rename the license and remove any references to the name of the license steward (except to note that the license differs from this License); and (b)�otherwise make it clear that the license contains terms which differ from this License.\n-\n-5. DISCLAIMER OF WARRANTY.\n-\n-COVERED SOFTWARE IS PROVIDED UNDER THIS LICENSE ON AN AS IS BASIS, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, WITHOUT LIMITATION, WARRANTIES THAT THE COVERED SOFTWARE IS FREE OF DEFECTS, MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE OR NON-INFRINGING. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE COVERED SOFTWARE IS WITH YOU. SHOULD ANY COVERED SOFTWARE PROVE DEFECTIVE IN ANY RESPECT, YOU (NOT THE INITIAL DEVELOPER OR ANY OTHER CONTRIBUTOR) ASSUME THE COST OF ANY NECESSARY SERVICING, REPAIR OR CORRECTION. THIS DISCLAIMER OF WARRANTY CONSTITUTES AN ESSENTIAL PART OF THIS LICENSE. NO USE OF ANY COVERED SOFTWARE IS AUTHORIZED HEREUNDER EXCEPT UNDER THIS DISCLAIMER.\n-\n-6. TERMINATION.\n-\n-6.1. This License and the rights granted hereunder will terminate automatically if You fail to comply with terms herein and fail to cure such breach within 30 days of becoming aware of the breach. Provisions which, by their nature, must remain in effect beyond the termination of this License shall survive.\n-\n-6.2. If You assert a patent infringement claim (excluding declaratory judgment actions) against Initial Developer or a Contributor (the Initial Developer or Contributor against whom You assert such claim is referred to as Participant) alleging that the Participant Software (meaning the Contributor Version where the Participant is a Contributor or the Original Software where the Participant is the Initial Developer) directly or indirectly infringes any patent, then any and all rights granted directly or indirectly to You by such Participant, the Initial Developer (if the Initial Developer is not the Participant) and all Contributors under Sections�2.1 and/or 2.2 of this License shall, upon 60 days notice from Participant terminate prospectively and automatically at the expiration of such 60 day notice period, unless if within such 60 day period You withdraw Your claim with respect to the Participant Software against such Participant either unilaterally or pursuant to a written agreement with Participant.\n-\n-6.3. In the event of termination under Sections�6.1 or 6.2 above, all end user licenses that have been validly granted by You or any distributor hereunder prior to termination (excluding licenses granted to You by any distributor) shall survive termination.\n-\n-7. LIMITATION OF LIABILITY.\n-\n-UNDER NO CIRCUMSTANCES AND UNDER NO LEGAL THEORY, WHETHER TORT (INCLUDING NEGLIGENCE), CONTRACT, OR OTHERWISE, SHALL YOU, THE INITIAL DEVELOPER, ANY OTHER CONTRIBUTOR, OR ANY DISTRIBUTOR OF COVERED SOFTWARE, OR ANY SUPPLIER OF ANY OF SUCH PARTIES, BE LIABLE TO ANY PERSON FOR ANY INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES OF ANY CHARACTER INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOST PROFITS, LOSS OF GOODWILL, WORK STOPPAGE, COMPUTER FAILURE OR MALFUNCTION, OR ANY AND ALL OTHER COMMERCIAL DAMAGES OR LOSSES, EVEN IF SUCH PARTY SHALL HAVE BEEN INFORMED OF THE POSSIBILITY OF SUCH DAMAGES. THIS LIMITATION OF LIABILITY SHALL NOT APPLY TO LIABILITY FOR DEATH OR PERSONAL INJURY RESULTING FROM SUCH PARTYS NEGLIGENCE TO THE EXTENT APPLICABLE LAW PROHIBITS SUCH LIMITATION. SOME JURISDICTIONS DO NOT ALLOW THE EXCLUSION OR LIMITATION OF INCIDENTAL OR CONSEQUENTIAL DAMAGES, SO THIS EXCLUSION AND LIMITATION MAY NOT APPLY TO YOU.\n-\n-8. U.S. GOVERNMENT END USERS.\n-\n-The Covered Software is a commercial item, as that term is defined in 48�C.F.R.�2.101 (Oct. 1995), consisting of commercial computer software (as that term is defined at 48 C.F.R. �252.227-7014(a)(1)) and commercial computer software documentation as such terms are used in 48�C.F.R.�12.212 (Sept. 1995). Consistent with 48 C.F.R. 12.212 and 48 C.F.R. 227.7202-1 through 227.7202-4 (June 1995), all U.S. Government End Users acquire Covered Software with only those rights set forth herein. This U.S. Government Rights clause is in lieu of, and supersedes, any other FAR, DFAR, or other clause or provision that addresses Government rights in computer software under this License.\n-\n-9. MISCELLANEOUS.\n-\n-This License represents the complete agreement concerning subject matter hereof. If any provision of this License is held to be unenforceable, such provision shall be reformed only to the extent necessary to make it enforceable. This License shall be governed by the law of the jurisdiction specified in a notice contained within the Original Software (except to the extent applicable law, if any, provides otherwise), excluding such jurisdictions conflict-of-law provisions. Any litigation relating to this License shall be subject to the jurisdiction of the courts located in the jurisdiction and venue specified in a notice contained within the Original Software, with the losing party responsible for costs, including, without limitation, court costs and reasonable attorneys fees and expenses. The application of the United Nations Convention on Contracts for the International Sale of Goods is expressly excluded. Any law or regulation which provides that the language of a contract shall be construed against the drafter shall not apply to this License. You agree that You alone are responsible for compliance with the United States export administration regulations (and the export control laws and regulation of any other countries) when You use, distribute or otherwise make available any Covered Software.\n-\n-10. RESPONSIBILITY FOR CLAIMS.\n-\n-As between Initial Developer and the Contributors, each party is responsible for claims and damages arising, directly or indirectly, out of its utilization of rights under this License and You agree to work with Initial Developer and Contributors to distribute such responsibility on an equitable basis. Nothing herein is intended or shall be deemed to constitute any admission of liability.\n-\n-NOTICE PURSUANT TO SECTION 9 OF THE COMMON DEVELOPMENT AND DISTRIBUTION LICENSE (CDDL)\n-The GlassFish code released under the CDDL shall be governed by the laws of the State of California (excluding conflict-of-law provisions). Any litigation relating to this License shall be subject to the jurisdiction of the Federal Courts of the Northern District of California and the state courts of the State of California, with venue lying in Santa Clara County, California. \n-\n-\n-===================\n-  serp-1.11.0.jar\n-===================\n-\n-Copyright (c) 2002-2006, A. Abram White\n-All rights reserved.\n-\n-Redistribution and use in source and binary forms, with or without \n-modification, are permitted provided that the following conditions are met:\n-\n-* Redistributions of source code must retain the above copyright notice, this \n-  list of conditions and the following disclaimer.\n-* Redistributions in binary form must reproduce the above copyright notice, \n-  this list of conditions and the following disclaimer in the documentation \n-  and/or other materials provided with the distribution.\n-* Neither the name of 'serp' nor the names of its contributors may\n-  be used to endorse or promote products derived from this software without \n-  specific prior written permission.\n-\n-THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n-ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED \n-WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE \n-DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n-ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES \n-(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; \n-LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON \n-ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT \n-(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS \n-SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n-\n-\n-\n-\n-\n-"},{"sha":"1dc99194acf1d1399ba9cbc5cbfbe34df838fd9c","filename":"contrib/devtools/org.apache.openjpa/META-INF/MANIFEST.MF","status":"removed","additions":0,"deletions":51,"changes":51,"blob_url":"https://github.com/apache/openjpa/blob/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa/META-INF/MANIFEST.MF","raw_url":"https://github.com/apache/openjpa/raw/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa/META-INF/MANIFEST.MF","contents_url":"https://api.github.com/repos/apache/openjpa/contents/contrib/devtools/org.apache.openjpa/META-INF/MANIFEST.MF?ref=bbc296ba29c2c6dd5620934446fd71c8561db6e4","patch":"@@ -1,51 +0,0 @@\n-Manifest-Version: 1.0\n-Bundle-ManifestVersion: 2\n-Bundle-Name: OpenJPA Plug-in\n-Bundle-SymbolicName: org.apache.openjpa\n-Bundle-Version: 1.2.1.qualifier\n-Require-Bundle: org.apache.commons.logging\n-Eclipse-BuddyPolicy: dependent\n-Bundle-ClassPath: lib/geronimo-jms_1.1_spec-1.0.1.jar,\n- lib/geronimo-jpa_3.0_spec-1.0.jar,\n- lib/geronimo-jta_1.1_spec-1.1.jar,\n- lib/commons-collections-3.2.jar,\n- lib/commons-lang-2.1.jar,\n- lib/openjpa-1.2.1.jar,\n- lib/serp-1.13.1.jar,\n- .\n-Export-Package: javax.persistence,\n- javax.persistence.spi,\n- org.apache.openjpa.abstractstore,\n- org.apache.openjpa.ant,\n- org.apache.openjpa.conf,\n- org.apache.openjpa.datacache,\n- org.apache.openjpa.ee,\n- org.apache.openjpa.enhance,\n- org.apache.openjpa.event,\n- org.apache.openjpa.jdbc.ant,\n- org.apache.openjpa.jdbc.conf,\n- org.apache.openjpa.jdbc.kernel,\n- org.apache.openjpa.jdbc.kernel.exps,\n- org.apache.openjpa.jdbc.meta,\n- org.apache.openjpa.jdbc.meta.strats,\n- org.apache.openjpa.jdbc.schema,\n- org.apache.openjpa.jdbc.sql,\n- org.apache.openjpa.kernel,\n- org.apache.openjpa.kernel.exps,\n- org.apache.openjpa.kernel.jpql,\n- org.apache.openjpa.lib.ant,\n- org.apache.openjpa.lib.conf,\n- org.apache.openjpa.lib.graph,\n- org.apache.openjpa.lib.jdbc,\n- org.apache.openjpa.lib.log,\n- org.apache.openjpa.lib.meta,\n- org.apache.openjpa.lib.rop,\n- org.apache.openjpa.lib.util,\n- org.apache.openjpa.lib.util.concurrent,\n- org.apache.openjpa.lib.xml,\n- org.apache.openjpa.meta,\n- org.apache.openjpa.persistence,\n- org.apache.openjpa.persistence.jdbc,\n- org.apache.openjpa.util,\n- serp.bytecode\n-Bundle-RequiredExecutionEnvironment: JavaSE-1.6"},{"sha":"508b1b4fa8ff838c6bcf86c88c04af9a1d04e51d","filename":"contrib/devtools/org.apache.openjpa/README.txt","status":"removed","additions":0,"deletions":6,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa/README.txt","raw_url":"https://github.com/apache/openjpa/raw/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa/README.txt","contents_url":"https://api.github.com/repos/apache/openjpa/contents/contrib/devtools/org.apache.openjpa/README.txt?ref=bbc296ba29c2c6dd5620934446fd71c8561db6e4","patch":"@@ -1,6 +0,0 @@\n-\n-This is OpenJPA, packaged as OSGi / Eclipse plug-in.\n-\n-Other Eclipse plug-ins requiring OpenJPA will depend on this one.\n-\n-Michael Vorburger, 9.12.2008"},{"sha":"a1be708b1c829a42ea9aff1874ead4ebdbf6349a","filename":"contrib/devtools/org.apache.openjpa/build.properties","status":"removed","additions":0,"deletions":11,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa/build.properties","raw_url":"https://github.com/apache/openjpa/raw/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa/build.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/contrib/devtools/org.apache.openjpa/build.properties?ref=bbc296ba29c2c6dd5620934446fd71c8561db6e4","patch":"@@ -1,11 +0,0 @@\n-source.. = src/main/java/\n-output.. = target/\n-bin.includes = META-INF/,\\\n-               .,\\\n-               lib/commons-collections-3.2.jar,\\\n-               lib/commons-lang-2.1.jar,\\\n-               lib/geronimo-jms_1.1_spec-1.0.1.jar,\\\n-               lib/geronimo-jpa_3.0_spec-1.0.jar,\\\n-               lib/geronimo-jta_1.1_spec-1.1.jar,\\\n-               lib/openjpa-1.2.1.jar,\\\n-               lib/serp-1.13.1.jar"},{"sha":"2766e8c7da5ffd122477e9c2825561ad718dd32e","filename":"contrib/devtools/org.apache.openjpa/get-dependencies.launch","status":"removed","additions":0,"deletions":6,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa/get-dependencies.launch","raw_url":"https://github.com/apache/openjpa/raw/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa/get-dependencies.launch","contents_url":"https://api.github.com/repos/apache/openjpa/contents/contrib/devtools/org.apache.openjpa/get-dependencies.launch?ref=bbc296ba29c2c6dd5620934446fd71c8561db6e4","patch":"@@ -1,6 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\r\n-<launchConfiguration type=\"org.eclipse.ui.externaltools.ProgramLaunchConfigurationType\">\r\n-<stringAttribute key=\"org.eclipse.debug.core.ATTR_REFRESH_SCOPE\" value=\"${project}\"/>\r\n-<stringAttribute key=\"org.eclipse.ui.externaltools.ATTR_LOCATION\" value=\"${workspace_loc:/openjpa-openjpa/get-dependencies.bat}\"/>\r\n-<stringAttribute key=\"org.eclipse.ui.externaltools.ATTR_WORKING_DIRECTORY\" value=\"${workspace_loc:/openjpa-openjpa}\"/>\r\n-</launchConfiguration>\r"},{"sha":"638baefbc9e8a4dea278bff2fec67889632da15d","filename":"contrib/devtools/org.apache.openjpa/pom.xml","status":"removed","additions":0,"deletions":88,"changes":88,"blob_url":"https://github.com/apache/openjpa/blob/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/org.apache.openjpa/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/contrib/devtools/org.apache.openjpa/pom.xml?ref=bbc296ba29c2c6dd5620934446fd71c8561db6e4","patch":"@@ -1,88 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<!--\n- Licensed to the Apache Software Foundation (ASF) under one\n- or more contributor license agreements.  See the NOTICE file\n- distributed with this work for additional information\n- regarding copyright ownership.  The ASF licenses this file\n- to you under the Apache License, Version 2.0 (the\n- \"License\"); you may not use this file except in compliance\n- with the License.  You may obtain a copy of the License at\n- \n- http://www.apache.org/licenses/LICENSE-2.0\n- \n- Unless required by applicable law or agreed to in writing,\n- software distributed under the License is distributed on an\n- \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- KIND, either express or implied.  See the License for the\n- specific language governing permissions and limitations\n- under the License.   \n--->\n-<!-- \n-    Maven release plugin requires the project tag to be on a single line. \n--->\n-<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n-    <modelVersion>4.0.0</modelVersion>\n-    <parent>\n-        <artifactId>org.apache.openjpa.eclipse.all</artifactId>\n-        <groupId>org.apache.openjpa.eclipse</groupId>\n-        <version>1.0.0-SNAPSHOT</version>\n-    </parent>\n-\n-    <groupId>org.apache.openjpa.eclipse</groupId>\n-    <artifactId>org.apache.openjpa</artifactId>\n-    <version>1.2.1</version>\n-    <packaging>eclipse-plugin</packaging>\n-\n-    <name>OpenJPA Eclipse Plug-in - OpenJPA Plug-in</name>\n-    <description>\n-        OpenJPA packaged as OSGi/Eclipse plug-in\n-        Currently this module only fetches dependencies, actual build to be added later.\n-    </description>\n-\n-    <dependencies>\n-        <dependency>\n-            <groupId>org.apache.openjpa</groupId>\n-            <artifactId>openjpa</artifactId>\n-            <version>1.2.1</version>\n-            <exclusions>\n-                <exclusion>\n-                    <groupId>commons-logging</groupId>\n-                    <artifactId>commons-logging</artifactId>\n-                </exclusion>\n-                <exclusion>\n-                    <groupId>commons-pool</groupId>\n-                    <artifactId>commons-pool</artifactId>\n-                </exclusion>\n-                <exclusion>\n-                    <groupId>junit</groupId>\n-                    <artifactId>junit</artifactId>\n-                </exclusion>\n-            </exclusions>\n-        </dependency>\n-    </dependencies>\n-\n-    <build>\n-        <plugins>\n-            <plugin>\n-                <groupId>org.apache.maven.plugins</groupId>\n-                <artifactId>maven-dependency-plugin</artifactId>\n-                <executions>\n-                    <execution>\n-                        <id>copy-dependencies</id>\n-                        <phase>process-resources</phase>\n-                        <goals>\n-                            <goal>copy-dependencies</goal>\n-                        </goals>\n-                        <configuration>\n-                            <outputDirectory>lib</outputDirectory>\n-                            <overWriteReleases>true</overWriteReleases>\n-                            <overWriteSnapshots>true</overWriteSnapshots>\n-                            <overWriteIfNewer>true</overWriteIfNewer>\n-                        </configuration>\n-                    </execution>\n-                </executions>\n-            </plugin>\n-        </plugins>\n-    </build>\n-\n-</project>\n\\ No newline at end of file"},{"sha":"ad8053d171d61e02a55f559aa285ddc280fa3fb7","filename":"contrib/devtools/pom.xml","status":"removed","additions":0,"deletions":139,"changes":139,"blob_url":"https://github.com/apache/openjpa/blob/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/bbc296ba29c2c6dd5620934446fd71c8561db6e4/contrib/devtools/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/contrib/devtools/pom.xml?ref=bbc296ba29c2c6dd5620934446fd71c8561db6e4","patch":"@@ -1,139 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<!--\n- Licensed to the Apache Software Foundation (ASF) under one\n- or more contributor license agreements.  See the NOTICE file\n- distributed with this work for additional information\n- regarding copyright ownership.  The ASF licenses this file\n- to you under the Apache License, Version 2.0 (the\n- \"License\"); you may not use this file except in compliance\n- with the License.  You may obtain a copy of the License at\n- \n- http://www.apache.org/licenses/LICENSE-2.0\n- \n- Unless required by applicable law or agreed to in writing,\n- software distributed under the License is distributed on an\n- \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- KIND, either express or implied.  See the License for the\n- specific language governing permissions and limitations\n- under the License.   \n--->\n-<!-- \n-    Maven release plugin requires the project tag to be on a single line. \n--->\n-<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n-    <modelVersion>4.0.0</modelVersion>\n-    <parent>\n-      <groupId>org.apache</groupId>\n-      <artifactId>apache</artifactId>\n-      <version>6</version>\n-    </parent>\n-    <groupId>org.apache.openjpa.eclipse</groupId>\n-    <artifactId>org.apache.openjpa.eclipse.all</artifactId>\n-    <version>1.0.0-SNAPSHOT</version>\n-    <packaging>pom</packaging>\n-    <name>OpenJPA Eclipse Plug-in - Parent POM</name>\n-    <description>Apache OpenJPA Eclipse Plug-in</description>\n-\n-    <properties>\n-        <!-- <tycho-version>0.6.0-SNAPSHOT</tycho-version> -->\n-        <tycho-version>0.5.0</tycho-version>\n-     </properties>\n-\n-    <url>http://openjpa.apache.org</url>\n-    <issueManagement>\n-        <system>jira</system>\n-        <url>http://issues.apache.org/jira/browse/OPENJPA</url>\n-    </issueManagement>\n-    <inceptionYear>2006</inceptionYear>\n-    <mailingLists>\n-        <mailingList>\n-            <name>OpenJPA Developer List</name>\n-            <subscribe>dev-subscribe@openjpa.apache.org</subscribe>\n-            <unsubscribe>dev-unsubscribe@openjpa.apache.org</unsubscribe>\n-            <post>dev@openjpa.apache.org</post>\n-            <archive>http://mail-archives.apache.org/mod_mbox/openjpa-dev/</archive>\n-        </mailingList>\n-        <mailingList>\n-            <name>OpenJPA Users List</name>\n-            <subscribe>users-subscribe@openjpa.apache.org</subscribe>\n-            <unsubscribe>users-unsubscribe@openjpa.apache.org</unsubscribe>\n-            <post>users@openjpa.apache.org</post>\n-            <archive>http://mail-archives.apache.org/mod_mbox/openjpa-users/</archive>\n-        </mailingList>\n-        <mailingList>\n-            <name>OpenJPA Commits List</name>\n-            <subscribe>commits-subscribe@openjpa.apache.org</subscribe>\n-            <unsubscribe>commits-unsubscribe@openjpa.apache.org</unsubscribe>\n-            <post>commits@openjpa.apache.org</post>\n-            <archive>http://mail-archives.apache.org/mod_mbox/openjpa-commits/</archive>\n-        </mailingList>\n-    </mailingLists>\n-    <licenses>\n-        <license>\n-            <name>Apache Software License 2.0</name>\n-            <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>\n-            <distribution>repo</distribution>\n-        </license>\n-    </licenses>\n-    <organization>\n-        <name>Apache Software Foundation</name>\n-        <url>http://www.apache.org</url>\n-    </organization>\n-\n-    <scm>\n-        <connection>scm:svn:http://svn.apache.org/repos/asf/openjpa/trunk/contrib/devtools</connection>\n-        <developerConnection>scm:svn:https://svn.apache.org/repos/asf/openjpa/trunk/contrib/devtools</developerConnection>\n-        <url>http://svn.apache.org/repos/asf/openjpa/trunk/contrib/devtools</url>\n-    </scm>\n-\n-\t<repositories>\n-\t\t<repository>\n-\t\t\t<id>galileo</id>\n-\t\t\t<layout>p2</layout>\n-\t\t\t<url>http://download.eclipse.org/releases/galileo</url>\n-\t\t</repository>\n-\t\t<repository>\n-\t\t\t<id>eclipse-3.5</id>\n-\t\t\t<layout>p2</layout>\n-\t\t\t<url>http://download.eclipse.org/eclipse/updates/3.5</url>\n-\t\t</repository>\n-\t</repositories>\n-\t<pluginRepositories>\n-\t\t<pluginRepository>\n-\t\t\t<id>sonatype-forge</id>\n-\t\t\t<url>http://repository.sonatype.org/content/groups/forge</url>\n-\t\t\t<releases>\n-\t\t\t\t<enabled>true</enabled>\n-\t\t\t</releases>\n-\t\t\t<snapshots>\n-\t\t\t\t<enabled>true</enabled>\n-\t\t\t</snapshots>\n-\t\t</pluginRepository>\n-\t</pluginRepositories>\n-\n-\t<modules>\n-\t\t<module>org.apache.openjpa</module>\n-\t\t<module>org.apache.openjpa.eclipse</module>\n-\t\t<module>org.apache.openjpa.eclipse.tests</module>\n-\t\t<module>org.apache.openjpa.eclipse.feature</module>\n-\t\t<module>org.apache.openjpa.eclipse.site</module>\n-\t</modules>\n-\t<build>\n-\t\t<plugins>\n-\t\t\t<plugin>\n-\t\t\t\t<groupId>org.codehaus.tycho</groupId>\n-\t\t\t\t<artifactId>tycho-maven-plugin</artifactId>\n-\t\t\t\t<version>${tycho-version}</version>\n-\t\t\t\t<extensions>true</extensions>\n-\t\t\t</plugin>\n-\t\t\t<plugin>\n-\t\t\t\t<groupId>org.codehaus.tycho</groupId>\n-\t\t\t\t<artifactId>target-platform-configuration</artifactId>\n-\t\t\t\t<version>${tycho-version}</version>\n-\t\t\t\t<configuration>\n-\t\t\t\t\t<resolver>p2</resolver>\n-\t\t\t\t</configuration>\n-\t\t\t</plugin>\n-\t\t</plugins>\n-\t</build>\n-</project>"}]}

