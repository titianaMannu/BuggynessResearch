{"sha":"e00c6e8f80434fd07b1dd438780cb3d964303392","node_id":"MDY6Q29tbWl0MjA2MzY0OmUwMGM2ZThmODA0MzRmZDA3YjFkZDQzODc4MGNiM2Q5NjQzMDMzOTI=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-06-16T19:29:24Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-06-16T19:29:24Z"},"message":"OPENJPA-625: remove Embedded collection members throws exception in PCData\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@668268 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"fb0d5b7457af41ae8c14ce61a3b31992bfa21ea8","url":"https://api.github.com/repos/apache/openjpa/git/trees/fb0d5b7457af41ae8c14ce61a3b31992bfa21ea8"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/e00c6e8f80434fd07b1dd438780cb3d964303392","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/e00c6e8f80434fd07b1dd438780cb3d964303392","html_url":"https://github.com/apache/openjpa/commit/e00c6e8f80434fd07b1dd438780cb3d964303392","comments_url":"https://api.github.com/repos/apache/openjpa/commits/e00c6e8f80434fd07b1dd438780cb3d964303392/comments","author":null,"committer":null,"parents":[{"sha":"7ac8321f27ecea79ded5cfa8a7e20c6656c2e90d","url":"https://api.github.com/repos/apache/openjpa/commits/7ac8321f27ecea79ded5cfa8a7e20c6656c2e90d","html_url":"https://github.com/apache/openjpa/commit/7ac8321f27ecea79ded5cfa8a7e20c6656c2e90d"}],"stats":{"total":249,"additions":247,"deletions":2},"files":[{"sha":"d14712996cde315d011e4362b640e4a7b0e54358","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractPCData.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/e00c6e8f80434fd07b1dd438780cb3d964303392/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractPCData.java","raw_url":"https://github.com/apache/openjpa/raw/e00c6e8f80434fd07b1dd438780cb3d964303392/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractPCData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractPCData.java?ref=e00c6e8f80434fd07b1dd438780cb3d964303392","patch":"@@ -176,10 +176,13 @@ protected Collection toNestedFields(OpenJPAStateManager sm,\n                     ret.add((Locale) itr.next());\n                 return ret;\n             case JavaTypes.PC:\n-                if (vmd.isEmbedded())\n-                    for (Iterator itr=data.iterator(); itr.hasNext();)\n+                if (vmd.isEmbedded()) {\n+                    for (Iterator itr=data.iterator(); itr.hasNext();) {\n                         ret.add(toEmbeddedField(sm, vmd, itr.next(), fetch\n                             , context));\n+                    }\n+                    return ret;\n+                }\n                 // no break\n             case JavaTypes.PC_UNTYPED:\n                 Object[] r = toRelationFields(sm, data, fetch);"},{"sha":"8c38a31edc614402ecb0de0cce7eabf7d01da6a5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestEmbeddedCollection.java","status":"added","additions":123,"deletions":0,"changes":123,"blob_url":"https://github.com/apache/openjpa/blob/e00c6e8f80434fd07b1dd438780cb3d964303392/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestEmbeddedCollection.java","raw_url":"https://github.com/apache/openjpa/raw/e00c6e8f80434fd07b1dd438780cb3d964303392/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestEmbeddedCollection.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestEmbeddedCollection.java?ref=e00c6e8f80434fd07b1dd438780cb3d964303392","patch":"@@ -0,0 +1,123 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.datacache;\r\n+\r\n+import java.util.List;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\r\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\r\n+import org.apache.openjpa.persistence.StoreCacheImpl;\r\n+import org.apache.openjpa.persistence.datacache.common.apps.EmbeddedEntity;\r\n+import org.apache.openjpa.persistence.datacache.common.apps.EmbeddingOwnerEntity;\r\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n+\r\n+/**\r\n+ * Test removing members of embedded collection with active DataCache.\r\n+ * \r\n+ * Originally reported in \r\n+ * <HREF=\"http://issues.apache.org/jira/browse/OPENJPA-625\">OPENJPA-625</A>\r\n+ * \r\n+ * @author Pinaki Poddar\r\n+ *\r\n+ */\r\n+public class TestEmbeddedCollection extends SingleEMFTestCase {\r\n+\r\n+\tprivate static final int SIZE = 4;\r\n+\tprivate static OpenJPAEntityManagerFactorySPI emf = null;\r\n+\t/**\r\n+\t * Sets up EntityManagerFactory: with DataCache.\r\n+\t */\r\n+\tpublic void setUp() throws Exception {\r\n+\t\tif (emf == null) {\r\n+\t\t\tsuper.setUp(\"openjpa.jdbc.SynchronizeMappings\", \"buildSchema\",\r\n+\t\t\t\t\t\"openjpa.RuntimeUnenhancedClasses\", \"unsupported\",\r\n+\t\t\t\t\t\"openjpa.DataCache\", \"true\", \"openjpa.RemoteCommitProvider\",\r\n+\t\t\t\t\t\"sjvm\", \"openjpa.jdbc.UpdateManager\", \"constraint\",\r\n+\t\t\t\t\tEmbeddingOwnerEntity.class, \r\n+\t\t\t\t\tEmbeddedEntity.class,\r\n+\t\t\t\t\tCLEAR_TABLES);\r\n+\t\t\temf = super.emf;\r\n+\t\t\t\r\n+\t\t\tcreateData();\r\n+\t\t}\r\n+\t\tassertNotNull(emf);\r\n+\t\tassertNotNull(emf.getStoreCache());\r\n+\t\tassertTrue(isDataCacheActive(emf));\r\n+\t}\r\n+\r\n+\tboolean isDataCacheActive(OpenJPAEntityManagerFactorySPI emf) {\r\n+\t\treturn ((StoreCacheImpl) emf.getStoreCache()).getDelegate() != null\r\n+\t\t\t\t&& emf.getConfiguration().getDataCacheManagerInstance()\r\n+\t\t\t\t\t\t.getSystemDataCache() != null;\r\n+\t}\r\n+\t\r\n+\t@Override\r\n+\tpublic void tearDown() throws Exception {\r\n+\t\t\r\n+\t}\r\n+\t\r\n+\tpublic void createData() {\r\n+\t\tEmbeddingOwnerEntity owner = new EmbeddingOwnerEntity();\r\n+\t\tfor (int i = 0; i < SIZE; i++) {\r\n+\t\t\tEmbeddedEntity member = new EmbeddedEntity();\r\n+\t\t\tmember.setMarker(\"Member-\" + i);\r\n+\t\t\towner.addMember(member);\r\n+\t\t}\r\n+\t\tEntityManager em = emf.createEntityManager();\r\n+\t\tem.getTransaction().begin();\r\n+\t\tem.persist(owner);\r\n+\t\tem.getTransaction().commit();\r\n+\t\tObject id = OpenJPAPersistence.cast(em).getObjectId(owner);\r\n+\t\tem.clear();\r\n+\r\n+\t\tEmbeddingOwnerEntity test = em.find(EmbeddingOwnerEntity.class, id);\r\n+\t\tassertNotNull(test);\r\n+\t\tList<EmbeddedEntity> members = test.getMembers();\r\n+\t\tassertNotNull(members);\r\n+\t\tassertEquals(SIZE, members.size());\r\n+\t\tfor (int i = 0; i < SIZE; i++)\r\n+\t\t\tmembers.get(i).getMarker().equals(\"Member-\" + i);\r\n+\t}\r\n+\r\n+\tpublic void testRemoveMemberFromEmbeddedCollection() {\r\n+\t\tEntityManager em = emf.createEntityManager();\r\n+\t\tem.getTransaction().begin();\r\n+\t\tList<EmbeddingOwnerEntity> result = em.createQuery(\r\n+\t\t\t\t\"SELECT p FROM EmbeddingOwnerEntity p\").getResultList();\r\n+\r\n+\t\tassertNotNull(result);\r\n+\t\tassertFalse(result.isEmpty());\r\n+\r\n+\t\tEmbeddingOwnerEntity owner = result.get(0);\r\n+\t\tObject id = owner.getId();\r\n+\t\t\r\n+\t\tassertTrue(emf.getStoreCache().contains(EmbeddingOwnerEntity.class, id));\r\n+\t\t\r\n+\t\tList<EmbeddedEntity> members = owner.getMembers();\r\n+\t\tmembers.remove(0);\r\n+\t\towner.removeMember(0);\r\n+\t\towner.removeMember(members.get(0));\r\n+\t\tem.getTransaction().commit();\r\n+\t\t\r\n+\t\tassertEquals(owner.getMembers().size(), SIZE-3); \r\n+\t}\r\n+\r\n+}\r"},{"sha":"2530ce550a998703274b991c741c59f123456f06","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/EmbeddedEntity.java","status":"added","additions":46,"deletions":0,"changes":46,"blob_url":"https://github.com/apache/openjpa/blob/e00c6e8f80434fd07b1dd438780cb3d964303392/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/EmbeddedEntity.java","raw_url":"https://github.com/apache/openjpa/raw/e00c6e8f80434fd07b1dd438780cb3d964303392/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/EmbeddedEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/EmbeddedEntity.java?ref=e00c6e8f80434fd07b1dd438780cb3d964303392","patch":"@@ -0,0 +1,46 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.datacache.common.apps;\r\n+\r\n+import javax.persistence.Embeddable;\r\n+import javax.persistence.Entity;\r\n+\r\n+import org.apache.openjpa.persistence.datacache.TestEmbeddedCollection;\r\n+\r\n+/**\r\n+ * Embeddable persistent entity.\r\n+ * \r\n+ * Used in {@link TestEmbeddedCollection}.\r\n+ * \r\n+ * @author Pinaki Poddar\r\n+ *\r\n+ */\r\n+@Entity\r\n+@Embeddable\r\n+public class EmbeddedEntity {\r\n+\tprivate String marker;\r\n+\r\n+\tpublic String getMarker() {\r\n+\t\treturn marker;\r\n+\t}\r\n+\r\n+\tpublic void setMarker(String marker) {\r\n+\t\tthis.marker = marker;\r\n+\t}\r\n+}\r"},{"sha":"c74faed17888168b2edbb60785134d4a6db589dd","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/EmbeddingOwnerEntity.java","status":"added","additions":73,"deletions":0,"changes":73,"blob_url":"https://github.com/apache/openjpa/blob/e00c6e8f80434fd07b1dd438780cb3d964303392/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/EmbeddingOwnerEntity.java","raw_url":"https://github.com/apache/openjpa/raw/e00c6e8f80434fd07b1dd438780cb3d964303392/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/EmbeddingOwnerEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/EmbeddingOwnerEntity.java?ref=e00c6e8f80434fd07b1dd438780cb3d964303392","patch":"@@ -0,0 +1,73 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.datacache.common.apps;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.FetchType;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.Id;\r\n+\r\n+import org.apache.openjpa.persistence.PersistentCollection;\r\n+import org.apache.openjpa.persistence.datacache.TestEmbeddedCollection;\r\n+\r\n+/**\r\n+ * Persistent entity that embeds a persistent collection of embeddable.\r\n+ *  \r\n+ * Used in {@link TestEmbeddedCollection}. \r\n+ * \r\n+ * @author Pinaki Poddar\r\n+ *\r\n+ */\r\n+@Entity\r\n+public class EmbeddingOwnerEntity {\r\n+\t@Id\r\n+\t@GeneratedValue\r\n+\tprivate long id;\r\n+\t\r\n+\t@PersistentCollection(elementEmbedded = true, \r\n+\t\t\telementType = EmbeddedEntity.class, \r\n+\t\t\tfetch = FetchType.LAZY)\r\n+\tprivate List<EmbeddedEntity> members;\r\n+\r\n+\tpublic List<EmbeddedEntity> getMembers() {\r\n+\t\treturn members;\r\n+\t}\r\n+\r\n+\tpublic void addMember(EmbeddedEntity member) {\r\n+\t\tif (members == null)\r\n+\t\t\tmembers = new ArrayList<EmbeddedEntity>();\r\n+\t\tthis.members.add(member);\r\n+\t}\r\n+\t\r\n+\tpublic void removeMember(EmbeddedEntity member) {\r\n+\t\tif (members != null)\r\n+\t\t\tmembers.remove(member);\r\n+\t}\r\n+\t\r\n+\tpublic EmbeddedEntity removeMember(int member) {\r\n+\t\treturn (members != null) ? members.remove(member) : null;\r\n+\t}\r\n+\r\n+\tpublic long getId() {\r\n+\t\treturn id;\r\n+\t} \r\n+}\r"}]}

