{"sha":"e01390051bc617047b7153868289c11ccb6f4cba","node_id":"MDY6Q29tbWl0MjA2MzY0OmUwMTM5MDA1MWJjNjE3MDQ3YjcxNTM4NjgyODljMTFjY2I2ZjRjYmE=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-09-03T08:52:17Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-09-03T08:52:17Z"},"message":"OPENJPA-1278,OPENJPA-1276,OPENJPA-1013:   \n  Modify negation of predicate logic\n  Promote interfaces from internal implementaion argument to  public interfaces\n Add Fetch Join and logical precedence order to CQL generation\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@810825 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c03e84f6ffed46576d6ce6eda50f4877f4e73a61","url":"https://api.github.com/repos/apache/openjpa/git/trees/c03e84f6ffed46576d6ce6eda50f4877f4e73a61"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/e01390051bc617047b7153868289c11ccb6f4cba","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/e01390051bc617047b7153868289c11ccb6f4cba","html_url":"https://github.com/apache/openjpa/commit/e01390051bc617047b7153868289c11ccb6f4cba","comments_url":"https://api.github.com/repos/apache/openjpa/commits/e01390051bc617047b7153868289c11ccb6f4cba/comments","author":null,"committer":null,"parents":[{"sha":"5d6581bf7f75ddf7c77e37a087cf6a63cc757e94","url":"https://api.github.com/repos/apache/openjpa/commits/5d6581bf7f75ddf7c77e37a087cf6a63cc757e94","html_url":"https://github.com/apache/openjpa/commit/5d6581bf7f75ddf7c77e37a087cf6a63cc757e94"}],"stats":{"total":715,"additions":422,"deletions":293},"files":[{"sha":"80be8fd5dd2fc355742a6aa0bc73d40a791e0435","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestCQL.java","status":"modified","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/e01390051bc617047b7153868289c11ccb6f4cba/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestCQL.java","raw_url":"https://github.com/apache/openjpa/raw/e01390051bc617047b7153868289c11ccb6f4cba/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestCQL.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestCQL.java?ref=e01390051bc617047b7153868289c11ccb6f4cba","patch":"@@ -63,5 +63,23 @@ public void testLogicalPrecedence() {\n         jpql = \"SELECT p FROM Person p WHERE (p.name = 'A' OR (p.name = 'B' AND (p.name = 'C' OR p.name = 'D')))\";\n         assertEquivalence(q, jpql);\n         assertEquals(jpql, q.toCQL());\n+        \n+        // NOT (a OR b) \n+        q.where(cb.or(a, b).negate());\n+        jpql = \"SELECT p FROM Person p WHERE NOT (p.name = 'A' OR p.name = 'B')\";\n+        assertEquivalence(q, jpql);\n+        assertEquals(jpql, q.toCQL());\n+        \n+        // NOT a \n+        q.where(cb.and(a).negate());\n+        jpql = \"SELECT p FROM Person p WHERE NOT p.name = 'A'\";\n+        assertEquivalence(q, jpql);\n+        assertEquals(jpql, q.toCQL());\n+\n+        // NOT a OR NOT b\n+        q.where(cb.or(cb.not(a), cb.not(b)));\n+        jpql = \"SELECT p FROM Person p WHERE (p.name <> 'A' OR p.name <> 'B')\";\n+        assertEquivalence(q, jpql);\n+        assertEquals(jpql, q.toCQL());\n     }\n }"},{"sha":"cb6e0938a0a695f3e028046510794e45429111c6","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestEmbeddableCriteria.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/e01390051bc617047b7153868289c11ccb6f4cba/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestEmbeddableCriteria.java","raw_url":"https://github.com/apache/openjpa/raw/e01390051bc617047b7153868289c11ccb6f4cba/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestEmbeddableCriteria.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestEmbeddableCriteria.java?ref=e01390051bc617047b7153868289c11ccb6f4cba","patch":"@@ -1477,7 +1477,6 @@ public void testEmbeddableQuery110() {\n         assertEquivalence(q, jpql);\n     }\n \n-    @AllowFailure(message=\"JPQL parse exception\")\n     public void testEmbeddableQuery111() {\n         String jpql = \"select i from Item1 i where :image = any(select KEY(e) from i.images e) order by i\";\n         CriteriaQuery<Item1> q = cb.createQuery(Item1.class);"},{"sha":"b3859b4a8b8d5e3c9f79af225133e4793fae80b6","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestFetchJoin.java","status":"added","additions":46,"deletions":0,"changes":46,"blob_url":"https://github.com/apache/openjpa/blob/e01390051bc617047b7153868289c11ccb6f4cba/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestFetchJoin.java","raw_url":"https://github.com/apache/openjpa/raw/e01390051bc617047b7153868289c11ccb6f4cba/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestFetchJoin.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestFetchJoin.java?ref=e01390051bc617047b7153868289c11ccb6f4cba","patch":"@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.criteria;\n+\n+import javax.persistence.criteria.JoinType;\n+import javax.persistence.criteria.Root;\n+\n+public class TestFetchJoin extends CriteriaTest {\n+    public void testFetchJoin() {\n+        String jpql = \"SELECT e FROM Employee e INNER JOIN FETCH e.department\";\n+        OpenJPACriteriaQuery<Employee> q = cb.createQuery(Employee.class);\n+        Root<Employee> e = q.from(Employee.class);\n+        q.select(e);\n+        e.fetch(Employee_.department);\n+        \n+        assertEquivalence(q, jpql);\n+        assertEquals(jpql, q.toCQL());\n+    }\n+    \n+    public void testLeftFetchJoin() {\n+        String jpql = \"SELECT e FROM Employee e LEFT JOIN FETCH e.department\";\n+        OpenJPACriteriaQuery<Employee> q = cb.createQuery(Employee.class);\n+        Root<Employee> e = q.from(Employee.class);\n+        q.select(e);\n+        e.fetch(Employee_.department, JoinType.LEFT);\n+        \n+        assertEquivalence(q, jpql);\n+        assertEquals(jpql, q.toCQL());\n+    }\n+}"},{"sha":"4fc32dcf46282e83920a335f35ae4c2fbfebe4f7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestTypeSafeCondExpression.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/e01390051bc617047b7153868289c11ccb6f4cba/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestTypeSafeCondExpression.java","raw_url":"https://github.com/apache/openjpa/raw/e01390051bc617047b7153868289c11ccb6f4cba/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestTypeSafeCondExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestTypeSafeCondExpression.java?ref=e01390051bc617047b7153868289c11ccb6f4cba","patch":"@@ -112,13 +112,13 @@ public void testNotIn() {\n \n     public void testLike1() {\n         String jpql = \"SELECT o.computerName FROM CompUser o \"\n-                 + \"WHERE o.name LIKE 'Sha%' AND o.computerName NOT IN ('PC')\";\n+                 + \"WHERE o.name LIKE 'Sha%' AND o.computerName NOT IN ('PC','Laptop')\";\n \n         CriteriaQuery<String> cq = cb.createQuery(String.class);\n         Root<CompUser> o = cq.from(CompUser.class);\n         cq.where(cb.and(\n                     cb.like(o.get(CompUser_.name),\"Sha%\"), \n-                    cb.in(o.get(CompUser_.computerName)).value(\"PC\").negate()\n+                    cb.in(o.get(CompUser_.computerName)).value(\"PC\").value(\"Laptop\").negate()\n                 ));\n         \n         cq.select(o.get(CompUser_.computerName));\n@@ -128,13 +128,13 @@ public void testLike1() {\n     \n     public void testLike2() {\n         String jpql = \"SELECT o.computerName FROM CompUser o \"\n-            + \"WHERE o.name LIKE 'Sha%o_' AND o.computerName NOT IN ('UNIX')\";\n+            + \"WHERE o.name LIKE 'Sha%o_' AND o.computerName NOT IN ('UNIX','DOS')\";\n \n         CriteriaQuery<String> cq = cb.createQuery(String.class);\n         Root<CompUser> o = cq.from(CompUser.class);\n         cq.where(cb.and(\n                     cb.like(o.get(CompUser_.name),\"Sha%o_\"), \n-                    cb.in(o.get(CompUser_.computerName)).value(\"UNIX\").negate()\n+                    cb.in(o.get(CompUser_.computerName)).value(\"UNIX\").value(\"DOS\").negate()\n                 ));\n         cq.select(o.get(CompUser_.computerName));\n         "},{"sha":"daa9c14310f5c3ad0749c2ada27f2da23c803db9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestTypesafeCriteria.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/e01390051bc617047b7153868289c11ccb6f4cba/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestTypesafeCriteria.java","raw_url":"https://github.com/apache/openjpa/raw/e01390051bc617047b7153868289c11ccb6f4cba/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestTypesafeCriteria.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestTypesafeCriteria.java?ref=e01390051bc617047b7153868289c11ccb6f4cba","patch":"@@ -1019,7 +1019,7 @@ public void testKeys6() {\n     public void testKeys7() {\n         String sql = \"SELECT t0.name, t2.id, t2.label FROM CR_ITEM t0 \"\n             + \"INNER JOIN CR_ITEM_photos t1 ON t0.id = t1.ITEM_ID \"\n-            + \"INNER JOIN CR_PHT t2 ON t1.VALUE_ID = t2.id\";\n+            + \"INNER JOIN CR_PHT t2 ON t1.VALUE_ID = t2.id WHERE (NOT (1 <> 1))\";\n \n         CriteriaQuery<Customer> q = cb.createQuery(Customer.class);\n         Root<Item> item = q.from(Item.class);\n@@ -1178,7 +1178,7 @@ public void testValues6() {\n     public void testValues7() {\n         String sql = \"SELECT t0.name, t2.id, t2.label FROM CR_ITEM t0 \"\n             + \"INNER JOIN CR_ITEM_photos t1 ON t0.id = t1.ITEM_ID \"\n-            + \"INNER JOIN CR_PHT t2 ON t1.VALUE_ID = t2.id\";\n+            + \"INNER JOIN CR_PHT t2 ON t1.VALUE_ID = t2.id WHERE (NOT (1 <> 1))\";\n \n         CriteriaQuery<Customer> q = cb.createQuery(Customer.class);\n         Root<Item> item = q.from(Item.class);"},{"sha":"e146c0c8d7b0f03dc0f16f7c1a0bba32463344c3","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/AliasContext.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/e01390051bc617047b7153868289c11ccb6f4cba/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/AliasContext.java","raw_url":"https://github.com/apache/openjpa/raw/e01390051bc617047b7153868289c11ccb6f4cba/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/AliasContext.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/AliasContext.java?ref=e01390051bc617047b7153868289c11ccb6f4cba","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.openjpa.persistence.criteria;\n \n+import javax.persistence.criteria.Root;\n import javax.persistence.criteria.Selection;\n \n import org.apache.openjpa.kernel.exps.Value;\n@@ -58,6 +59,12 @@\n      */\n     Value getRegisteredVariable(Selection<?> node);\n     \n+    /**\n+     * Gets the registered root variable for the given node. \n+     * Return null if the node is not registered.     \n+     */\n+    Value getRegisteredRootVariable(Root<?> node);\n+    \n     /**\n      * Gets the registered path value for the given node. \n      * Return null if the node is not registered.     "},{"sha":"496769bc8b15f44b7c3012b8e1e777215f0089a6","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CompoundSelections.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/e01390051bc617047b7153868289c11ccb6f4cba/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CompoundSelections.java","raw_url":"https://github.com/apache/openjpa/raw/e01390051bc617047b7153868289c11ccb6f4cba/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CompoundSelections.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CompoundSelections.java?ref=e01390051bc617047b7153868289c11ccb6f4cba","patch":"@@ -97,7 +97,7 @@ void assertNoCompoundSelection(Selection<?>...args) {\n         abstract FillStrategy<X> getFillStrategy();\n         \n         @Override\n-        public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+        public StringBuilder asValue(AliasContext q) {\n             StringBuilder buffer = new StringBuilder();\n             for (int i = 0; i < _args.size(); i++) {\n                 buffer.append((((CriteriaExpression)_args.get(i)).asValue(q)));\n@@ -158,7 +158,7 @@ public NewInstance(Class<X> cls, Selection<?>... selections) {\n         }\n         \n         @Override\n-        public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+        public StringBuilder asValue(AliasContext q) {\n             return new StringBuilder(\"NEW \").append(getJavaType().getName()).append(\"(\")\n                .append(super.asValue(q)).append(\")\");\n         }"},{"sha":"88b7aca8c3978b2bc8a708b91e5415621d12fcaf","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaBuilder.java","status":"modified","additions":8,"deletions":4,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/e01390051bc617047b7153868289c11ccb6f4cba/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaBuilder.java","raw_url":"https://github.com/apache/openjpa/raw/e01390051bc617047b7153868289c11ccb6f4cba/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaBuilder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaBuilder.java?ref=e01390051bc617047b7153868289c11ccb6f4cba","patch":"@@ -392,6 +392,10 @@ public Predicate like(Expression<String> x, String pattern, char escapeChar) {\n     }\n \n     public <T> Expression<T> literal(T value) {\n+        if (Boolean.TRUE.equals(value))\n+            return (Expression<T>)PredicateImpl.TRUE;\n+        if (Boolean.FALSE.equals(value))\n+            return (Expression<T>)PredicateImpl.FALSE;\n         return new Expressions.Constant<T>(value);\n     }\n \n@@ -452,15 +456,15 @@ public Predicate lt(Expression<? extends Number> x, Number y) {\n     }\n \n     public Predicate not(Expression<Boolean> restriction) {\n-        return new Expressions.Not(restriction);\n+        return ((Predicate)restriction).negate();\n     }\n \n     public Predicate notEqual(Expression<?> x, Expression<?> y) {\n-        return equal(x, y).negate();\n+        return new Expressions.NotEqual(x, y);\n     }\n \n     public Predicate notEqual(Expression<?> x, Object y) {\n-        return equal(x, y).negate();\n+        return new Expressions.NotEqual(x, y);\n     }\n \n     public Predicate notLike(Expression<String> x, Expression<String> pattern) {\n@@ -679,7 +683,7 @@ public Predicate or(Expression<Boolean> x, Expression<Boolean> y) {\n     }\n \n     public Predicate isNotNull(Expression<?> x) {\n-        return new Expressions.IsNull((ExpressionImpl<?> )x).negate();\n+        return new Expressions.IsNotNull((ExpressionImpl<?> )x);\n     }\n \n     public Predicate isNull(Expression<?> x) {"},{"sha":"633d6445655f46169eda93975c09f532f6ce3778","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaExpression.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/e01390051bc617047b7153868289c11ccb6f4cba/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaExpression.java","raw_url":"https://github.com/apache/openjpa/raw/e01390051bc617047b7153868289c11ccb6f4cba/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaExpression.java?ref=e01390051bc617047b7153868289c11ccb6f4cba","patch":"@@ -36,10 +36,10 @@\n     /**\n      * Get a string representation of this node as a value in the context of the given query.\n      */\n-    StringBuilder asValue(CriteriaQueryImpl<?> q);\n+    StringBuilder asValue(AliasContext q);\n     \n     /**\n      * Get a string representation of this node as a variable in the context of the given query.\n      */\n-    StringBuilder asVariable(CriteriaQueryImpl<?> q);\n+    StringBuilder asVariable(AliasContext q);\n }"},{"sha":"dd67727dae248f699fcfa9b07ee60acaee77c505","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaExpressionBuilder.java","status":"modified","additions":32,"deletions":68,"changes":100,"blob_url":"https://github.com/apache/openjpa/blob/e01390051bc617047b7153868289c11ccb6f4cba/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaExpressionBuilder.java","raw_url":"https://github.com/apache/openjpa/raw/e01390051bc617047b7153868289c11ccb6f4cba/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaExpressionBuilder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaExpressionBuilder.java?ref=e01390051bc617047b7153868289c11ccb6f4cba","patch":"@@ -89,28 +89,21 @@ public QueryExpressions getQueryExpressions(ExpressionFactory factory, CriteriaQ\n \n     protected void evalAccessPaths(QueryExpressions exps, ExpressionFactory factory, CriteriaQueryImpl<?> q) {\n         Set<ClassMetaData> metas = new HashSet<ClassMetaData>();\n-        Set<Root<?>> roots = q.getRoots();\n-        if (roots != null) {\n-            MetamodelImpl metamodel = q.getMetamodel();    \n-            for (Root<?> root : roots) {\n-                metas.add(((AbstractManagedType<?>)root.getModel()).meta);\n-                if (root.getJoins() != null) {\n-                    for (Join<?,?> join : root.getJoins()) {\n-                        Class<?> cls = join.getAttribute().getJavaType();\n-                        if (join.getAttribute().isAssociation()) {\n-                            ClassMetaData meta = metamodel.repos.getMetaData(cls, null, true);\n-                            PersistenceType type = MetamodelImpl.getPersistenceType(meta);\n-                            if (type == PersistenceType.ENTITY || type == PersistenceType.EMBEDDABLE) \n-                                metas.add(meta);\n-                        }\n-                    }\n-                    if (root.getFetches() != null) {\n-                        for (Fetch<?,?> fetch : root.getFetches()) {\n-                            metas.add(metamodel.repos.getMetaData(fetch.getAttribute().getJavaType(), null, false));\n-                        }\n-                    }\n+        MetamodelImpl metamodel = q.getMetamodel();    \n+        for (Root<?> root : q.getRoots()) {\n+            metas.add(((AbstractManagedType<?>)root.getModel()).meta);\n+            for (Join<?,?> join : root.getJoins()) {\n+                Class<?> cls = join.getAttribute().getJavaType();\n+                if (join.getAttribute().isAssociation()) {\n+                    ClassMetaData meta = metamodel.repos.getMetaData(cls, null, true);\n+                    PersistenceType type = MetamodelImpl.getPersistenceType(meta);\n+                    if (type == PersistenceType.ENTITY || type == PersistenceType.EMBEDDABLE) \n+                        metas.add(meta);\n                 }\n             }\n+            for (Fetch<?,?> fetch : root.getFetches()) {\n+                metas.add(metamodel.repos.getCachedMetaData(fetch.getAttribute().getJavaType()));\n+            }\n         }\n         exps.accessPath = metas.toArray(new ClassMetaData[metas.size()]);\n     }\n@@ -178,15 +171,9 @@ protected void evalGrouping(QueryExpressions exps, ExpressionFactory factory, Cr\n     }\n \n     protected void evalDistinct(QueryExpressions exps, ExpressionFactory factory, CriteriaQueryImpl<?> q) {\n-        Boolean distinct = q.getDistinct();\n-        if (distinct == null) {\n-            exps.distinct = QueryExpressions.DISTINCT_FALSE;\n-        } else if (distinct) {\n-            exps.distinct = QueryExpressions.DISTINCT_TRUE \n-            | QueryExpressions.DISTINCT_AUTO;\n-        }\n-        //exps.distinct &= ~QueryExpressions.DISTINCT_AUTO;\n-    }\n+        exps.distinct = q.isDistinct() ? QueryExpressions.DISTINCT_TRUE | QueryExpressions.DISTINCT_AUTO\n+                : QueryExpressions.DISTINCT_FALSE;\n+     }\n \n     protected void evalCrossJoinRoots(QueryExpressions exps, ExpressionFactory factory, CriteriaQueryImpl<?> q) {\n         Set<Root<?>> roots = q.getRoots();\n@@ -197,10 +184,11 @@ protected void evalCrossJoinRoots(QueryExpressions exps, ExpressionFactory facto\n                 for (Root<?> root : roots) {\n                     String alias = q.getAlias(root);\n                     Value var = factory.newBoundVariable(alias, AbstractExpressionBuilder.TYPE_OBJECT);\n-                    var.setMetaData(((Types.Entity)root.getModel()).meta);\n+                    var.setMetaData(((AbstractManagedType<?>)root.getModel()).meta);\n                     q.registerRoot(root, var);\n                 }\n-            }         }\n+            }         \n+        }\n     }\n     \n     protected void evalFilter(QueryExpressions exps, ExpressionFactory factory, CriteriaQueryImpl<?> q) {\n@@ -212,25 +200,23 @@ protected void evalFilter(QueryExpressions exps, ExpressionFactory factory, Crit\n         if (subQuery == null || subQuery.getCorrelatedJoins() == null) {\n             q.assertRoot();\n             for (Root<?> root : roots) {\n-                if (root.getJoins() != null) {\n-                    for (Join<?, ?> join : root.getJoins()) {\n-                        filter = and(factory, ((ExpressionImpl<?>)join).toKernelExpression(factory, featureSelection, q), filter);\n-                    }\n+                for (Join<?, ?> join : root.getJoins()) {\n+                    filter = Expressions.and(factory, \n+                            ((ExpressionImpl<?>)join).toKernelExpression(factory, featureSelection, q), filter);\n                 }\n                 ((RootImpl<?>)root).addToContext(factory, featureSelection, q);\n             }\n         }\n         if (subQuery != null) {\n             List<Join<?,?>> corrJoins = subQuery.getCorrelatedJoins();\n-            if (corrJoins != null) {\n-                for (int i = 0; i < corrJoins.size(); i++) \n-                    filter = and(factory, ((ExpressionImpl<?>)corrJoins.get(i)).toKernelExpression(factory, featureSelection, q),  \n-                            filter);\n+            for (int i = 0; corrJoins != null && i < corrJoins.size(); i++) {\n+                filter = Expressions.and(factory, ((ExpressionImpl<?>)corrJoins.get(i))\n+                        .toKernelExpression(factory, featureSelection, q), filter);\n             }\n         }\n         \n         if (where != null) {\n-            filter = and(factory, where.toKernelExpression(factory, featureSelection, q), filter);\n+            filter = Expressions.and(factory, where.toKernelExpression(factory, featureSelection, q), filter);\n         }\n         if (filter == null) {\n             filter = factory.emptyExpression();\n@@ -296,51 +282,31 @@ private void getProjections(QueryExpressions exps, List<Selection<?>> selections\n             }         \n         }\n     }\n-    \n-\n-//    protected boolean isDefaultProjection(List<Selection<?>> selections, CriteriaQueryImpl<?> q) {\n-//        if (selections == null)\n-//            return true;\n-//        if (selections.size() != 1)\n-//            return false;\n-//        Selection<?> sel = selections.get(0);\n-//        if (q.getRoots() != null && sel == q.getRoot())\n-//            return true;\n-//        if ((sel instanceof PathImpl<?,?>) && ((PathImpl<?,?>)sel)._correlatedPath != null)\n-//            return true;\n-//        return false;\n-//    }\n \n     protected void evalFetchJoin(QueryExpressions exps, ExpressionFactory factory, CriteriaQueryImpl<?> q) {\n         List<String> iPaths = new ArrayList<String>();\n         List<String> oPaths = new ArrayList<String>();\n         Set<Root<?>> roots = q.getRoots();\n-        if (roots == null)\n-            return;\n         for (Root root : roots) {\n             Set<Fetch> fetches = root.getFetches();\n             if (fetches == null)\n                 continue;\n             for (Fetch<?,?> fetch : fetches) {\n-                String fPath = ((Members.Member<?, ?>)fetch.getAttribute())\n-                   .fmd.getFullName(false);\n+                String fPath = ((Members.Member<?, ?>)fetch.getAttribute()).fmd.getFullName(false);\n                 oPaths.add(fPath);\n                 if (fetch.getJoinType() == JoinType.INNER) {\n                    iPaths.add(fPath);\n                 } \n             }\n         }\n-        if (!iPaths.isEmpty())\n+        if (!iPaths.isEmpty()) {\n             exps.fetchInnerPaths = iPaths.toArray(new String[iPaths.size()]);\n-        if (!oPaths.isEmpty())\n+        }\n+        if (!oPaths.isEmpty()) {\n             exps.fetchPaths = oPaths.toArray(new String[oPaths.size()]);\n+        }\n     }\n \n-    protected static org.apache.openjpa.kernel.exps.Expression and (ExpressionFactory factory,\n-        org.apache.openjpa.kernel.exps.Expression e1, org.apache.openjpa.kernel.exps.Expression e2) {\n-        return e1 == null ? e2 : e2 == null ? e1 : factory.and(e1, e2);\n-    }\n-    \n     // ===================================================================================\n     // Result Shape processing\n     // ===================================================================================\n@@ -358,7 +324,7 @@ protected void evalFetchJoin(QueryExpressions exps, ExpressionFactory factory, C\n         if (type == null)\n             type = Object.class;\n         if (s.isCompoundSelection()) {\n-            CompoundSelection<?> cs = (CompoundSelection)s;\n+            CompoundSelection<?> cs = (CompoundSelection<?>)s;\n             result = new ResultShape(s.getJavaType(), CompoundSelections.getFillStrategy(cs));\n             List<Selection<?>> terms = cs.getCompoundSelectionItems();\n             for (Selection<?> term : terms) {\n@@ -414,6 +380,4 @@ protected void evalFetchJoin(QueryExpressions exps, ExpressionFactory factory, C\n     \n         return result;\n    }\n-\n-    \n }"},{"sha":"a31cb1285ad620d94bd86f0a06021eb24bb261bb","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaQueryImpl.java","status":"modified","additions":53,"deletions":30,"changes":83,"blob_url":"https://github.com/apache/openjpa/blob/e01390051bc617047b7153868289c11ccb6f4cba/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaQueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/e01390051bc617047b7153868289c11ccb6f4cba/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaQueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaQueryImpl.java?ref=e01390051bc617047b7153868289c11ccb6f4cba","patch":"@@ -28,11 +28,11 @@\n import java.util.Map;\n import java.util.Set;\n import java.util.Stack;\n-import java.util.concurrent.CopyOnWriteArrayList;\n \n import javax.persistence.criteria.AbstractQuery;\n import javax.persistence.criteria.CriteriaQuery;\n import javax.persistence.criteria.Expression;\n+import javax.persistence.criteria.Fetch;\n import javax.persistence.criteria.Join;\n import javax.persistence.criteria.Order;\n import javax.persistence.criteria.ParameterExpression;\n@@ -72,13 +72,13 @@\n     private Set<Root<?>>        _roots;\n     private PredicateImpl       _where;\n     private List<Order>         _orders;\n-    private LinkedMap/*<ParameterExpression<?>, Class<?>>*/ _params;\n-    private Selection<? extends T>        _selection;\n+    private LinkedMap           _params; /*<ParameterExpression<?>, Class<?>>*/ \n+    private Selection<? extends T> _selection;\n     private List<Selection<?>>  _selections;\n     private List<Expression<?>> _groups;\n     private PredicateImpl       _having;\n     private List<Subquery<?>>   _subqueries;\n-    private Boolean             _distinct;\n+    private boolean             _distinct;\n     private final SubqueryImpl<?> _delegator;\n     private final Class<T>      _resultClass;\n     private boolean             _compiled;\n@@ -236,50 +236,62 @@ void registerParameter(ParameterExpressionImpl<?> p) {\n     }\n \n     public CriteriaQuery<T> groupBy(Expression<?>... grouping) {\n-    \t_groups = new ArrayList<Expression<?>>();\n-    \tif (grouping == null)\n+    \tif (grouping == null) {\n+    \t    _groups = null;\n     \t    return this;\n+    \t}\n+        _groups = new ArrayList<Expression<?>>();\n     \tfor (Expression<?> e : grouping)\n     \t\t_groups.add(e);\n         return this;\n     }\n     \n     public CriteriaQuery<T> groupBy(List<Expression<?>> grouping) {\n-        _groups = new ArrayList<Expression<?>>();\n-        if (grouping == null)\n+        if (grouping == null) {\n+            _groups = null;\n             return this;\n+        }\n+        _groups = new ArrayList<Expression<?>>();\n         for (Expression<?> e : grouping)\n             _groups.add(e);\n         return this;\n     }\n \n \n     public CriteriaQuery<T> having(Expression<Boolean> restriction) {\n-        _having = new PredicateImpl().add(restriction);\n+        _having = (PredicateImpl)restriction;\n         return this;\n     }\n \n     public CriteriaQuery<T> having(Predicate... restrictions) {\n-        _having = new PredicateImpl();\n+        if (restrictions == null) {\n+            _having = null;\n+            return this;\n+        }\n+        _having = new PredicateImpl.And();\n         for (Predicate p : restrictions)\n         \t_having.add(p);\n         return this;\n     }\n \n     public CriteriaQuery<T> orderBy(Order... orders) {\n-        _orders = new ArrayList<Order>();\n-        if (orders == null)\n+        if (orders == null) {\n+            _orders = null;\n             return this;\n+        }\n+        _orders = new ArrayList<Order>();\n         for (Order o : orders) {\n             _orders.add(o);\n         }\n         return this;\n     }\n     \n     public CriteriaQuery<T> orderBy(List<Order> orders) {\n-        _orders = new ArrayList<Order>();\n-        if (orders == null)\n+        if (orders == null) {\n+            _orders = null;\n             return this;\n+        }\n+        _orders = new ArrayList<Order>();\n         for (Order o : orders) {\n             _orders.add(o);\n         }\n@@ -306,7 +318,7 @@ void registerParameter(ParameterExpressionImpl<?> p) {\n             _where = null;\n             return this;\n         }\n-        _where = new PredicateImpl().add(restriction);\n+        _where = (PredicateImpl)restriction;\n         return this;\n     }\n \n@@ -316,9 +328,7 @@ void registerParameter(ParameterExpressionImpl<?> p) {\n             _where = null;\n             return this;\n         }\n-        _where = new PredicateImpl();\n-        for (Predicate p : restrictions)\n-        \t_where.add(p);\n+        _where = new PredicateImpl.And(restrictions);\n         return this;\n     }\n \n@@ -371,11 +381,10 @@ void addRoot(RootImpl<?> root) {\n         _roots.add(root);\n     }\n     \n+    /**\n+     * Affirms if selection of this query is distinct.\n+     */\n     public boolean isDistinct() {\n-        return _distinct == null ? false : _distinct.booleanValue();\n-    }\n-\n-    Boolean getDistinct() {\n         return _distinct;\n     }\n \n@@ -553,11 +562,8 @@ void registerRoot(Root<?> root, Value var) {\n     \n     /**\n      * Gets the registered variable for the given root. \n-     * \n-     * @param root\n-     * @return\n      */\n-    Value getRegisteredRootVariable(Root<?> root) {\n+    public Value getRegisteredRootVariable(Root<?> root) {\n         Value var = _rootVariables.get(root);\n         if (var != null)\n             return var;\n@@ -640,7 +646,7 @@ private void collectParameters(CriteriaExpressionVisitor visitor) {\n     public String toCQL() {\n         StringBuilder buffer = new StringBuilder();\n         render(buffer, _roots, null);\n-        return buffer.toString();\n+        return buffer.toString().trim();\n     }\n     \n     void render(StringBuilder buffer, Set<Root<?>> roots, List<Join<?,?>> correlatedJoins) {\n@@ -655,18 +661,28 @@ void render(StringBuilder buffer, Set<Root<?>> roots, List<Join<?,?>> correlated\n         }\n         if (_orders != null) {\n             buffer.append(\" ORDER BY \");\n-            List<Order> orderBys = getOrderList();\n-            for (int i = 0; i < orderBys.size(); i++) {\n-                buffer.append(((CriteriaExpression)orderBys.get(i)).asValue(this));\n+            for (Order orderBy : getOrderList()) {\n+                buffer.append(((CriteriaExpression)orderBy).asValue(this));\n+            }\n+        }\n+        if (_groups != null) {\n+            buffer.append(\" GROUP BY \");\n+            for (Expression<?> groupBy : getGroupList()) {\n+                buffer.append(((CriteriaExpression)groupBy).asValue(this));\n             }\n         }\n+        if (_having != null) {\n+            buffer.append(\" HAVING \");\n+            buffer.append(_having.asValue(this));\n+        }\n     }\n     \n     private void renderJoins(StringBuilder buffer, Collection<Join<?,?>> joins) {\n         if (joins == null) return;\n         for (Join j : joins) {\n             buffer.append(((ExpressionImpl<?>)j).asVariable(this)).append(\" \");\n             renderJoins(buffer, j.getJoins());\n+            renderFetches(buffer, j.getFetches());\n         }\n     }\n     \n@@ -677,6 +693,13 @@ private void renderRoots(StringBuilder buffer, Collection<Root<?>> roots) {\n             buffer.append(((ExpressionImpl<?>)r).asVariable(this));\n             if (++i != roots.size()) buffer.append(\", \");\n             renderJoins(buffer, r.getJoins());\n+            renderFetches(buffer, r.getFetches());\n+        }\n+    }\n+    private void renderFetches(StringBuilder buffer, Set<Fetch> fetches) {\n+        if (fetches == null) return;\n+        for (Fetch j : fetches) {\n+            buffer.append(((ExpressionImpl<?>)j).asValue(this)).append(\" \");\n         }\n     }\n }"},{"sha":"6e26558b3c991646a396912ed8a99d05326774db","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/Expressions.java","status":"modified","additions":157,"deletions":111,"changes":268,"blob_url":"https://github.com/apache/openjpa/blob/e01390051bc617047b7153868289c11ccb6f4cba/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/Expressions.java","raw_url":"https://github.com/apache/openjpa/raw/e01390051bc617047b7153868289c11ccb6f4cba/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/Expressions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/Expressions.java?ref=e01390051bc617047b7153868289c11ccb6f4cba","patch":"@@ -124,7 +124,7 @@ static void visitChildren(CriteriaExpressionVisitor visitor, Expression<?>...exp\n      /**\n       * Renders the given expressions as a list of values separated by the given connector.\n       */\n-     static StringBuilder asValue(CriteriaQueryImpl<?> q, Expression<?>[] exps, String connector) {\n+     static StringBuilder asValue(AliasContext q, Expression<?>[] exps, String connector) {\n          StringBuilder buffer = new StringBuilder();\n          if (exps == null) return buffer;\n          for (int i = 0; i < exps.length; i++) {\n@@ -139,7 +139,7 @@ static StringBuilder asValue(CriteriaQueryImpl<?> q, Expression<?>[] exps, Strin\n      /**\n       * Renders the given arguments as a list of values separated by the given connector.\n       */\n-     static StringBuilder asValue(CriteriaQueryImpl<?> q, Object...params) {\n+     static StringBuilder asValue(AliasContext q, Object...params) {\n          StringBuilder buffer = new StringBuilder();\n          if (params == null) return buffer;\n          for (int i = 0; i < params.length; i++) {\n@@ -175,6 +175,11 @@ static StringBuilder asValue(CriteriaQueryImpl<?> q, Object...params) {\n          return set == null ? new HashSet<X>() : new CopyOnWriteArraySet<X>(set);\n      }\n      \n+     static org.apache.openjpa.kernel.exps.Expression and(ExpressionFactory factory,\n+             org.apache.openjpa.kernel.exps.Expression e1, org.apache.openjpa.kernel.exps.Expression e2) {\n+             return e1 == null ? e2 : e2 == null ? e1 : factory.and(e1, e2);\n+     }\n+         \n \n \n      /**\n@@ -254,7 +259,7 @@ public void acceptVisit(CriteriaExpressionVisitor visitor) {\n      * i.e. an expression whose resultant type is Boolean.\n      *\n      */\n-   public static class BinaryLogicalExpression extends PredicateImpl {\n+   public static abstract class BinaryLogicalExpression extends PredicateImpl {\n         protected final ExpressionImpl<?> e1;\n         protected final ExpressionImpl<?> e2;\n         \n@@ -264,10 +269,10 @@ public BinaryLogicalExpression(Expression<?> x, Expression<?> y) {\n             e2 = (ExpressionImpl<?>)y;\n         }\n         \n-        @Override\n-        public PredicateImpl clone() {\n-            return new BinaryLogicalExpression(e1, e2);\n-        }\n+//        @Override\n+//        public PredicateImpl clone() {\n+//            return new BinaryLogicalExpression(e1, e2);\n+//        }\n         \n         public void acceptVisit(CriteriaExpressionVisitor visitor) {\n             Expressions.acceptVisit(visitor, this, e1, e2);\n@@ -285,7 +290,7 @@ public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQue\n             return factory.abs(Expressions.toValue(e, factory, featureSelection, q));\n         }\n         \n-        public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+        public StringBuilder asValue(AliasContext q) {\n             return Expressions.asValue(q, \"ABS\", OPEN_BRACE, e, CLOSE_BRACE);\n         }\n     }\n@@ -309,7 +314,7 @@ public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQue\n         }\n         \n         @Override\n-        public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+        public StringBuilder asValue(AliasContext q) {\n             return Expressions.asValue(q, \"COUNT\", OPEN_BRACE, _distinct ? \"DISTINCT\"+OPEN_BRACE : \"\", \n                 e, _distinct ? CLOSE_BRACE : \"\", CLOSE_BRACE);\n         }\n@@ -326,7 +331,7 @@ public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQue\n         }\n         \n         @Override\n-        public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+        public StringBuilder asValue(AliasContext q) {\n             return Expressions.asValue(q, \"AVG\", OPEN_BRACE, e, CLOSE_BRACE);\n         }\n     }\n@@ -341,7 +346,7 @@ public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQue\n             return factory.sqrt(Expressions.toValue(e, factory, featureSelection, q));\n         }\n         \n-        public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+        public StringBuilder asValue(AliasContext q) {\n             return Expressions.asValue(q, \"SQRT\", OPEN_BRACE, e, CLOSE_BRACE);\n         }\n     }\n@@ -356,7 +361,7 @@ public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQue\n             return factory.max(Expressions.toValue(e, factory, featureSelection, q));\n         }\n         \n-        public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+        public StringBuilder asValue(AliasContext q) {\n             return Expressions.asValue(q, \"MAX\", OPEN_BRACE, e, CLOSE_BRACE);\n         }\n     }\n@@ -371,7 +376,7 @@ public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQue\n             return factory.min(Expressions.toValue(e, factory, featureSelection, q));\n         }\n         \n-        public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+        public StringBuilder asValue(AliasContext q) {\n             return Expressions.asValue(q, \"MIN\", OPEN_BRACE, e, CLOSE_BRACE);\n         }\n     }\n@@ -395,7 +400,7 @@ public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQue\n             return factory.size(val);\n         }\n         \n-        public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+        public StringBuilder asValue(AliasContext q) {\n             return Expressions.asValue(q, \"SIZE\", OPEN_BRACE, e, CLOSE_BRACE);\n         }\n     }\n@@ -416,7 +421,7 @@ public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQue\n                 new Expressions.ListArgument(resultType, args).toValue(factory, featureSelection, q));\n         }\n         \n-        public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+        public StringBuilder asValue(AliasContext q) {\n             return Expressions.asValue(q, functionName, OPEN_BRACE, Expressions.asValue(q, args, COMMA), CLOSE_BRACE);\n         }\n     }\n@@ -433,7 +438,7 @@ public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQue\n         }\n         \n         @Override\n-        public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+        public StringBuilder asValue(AliasContext q) {\n             return Expressions.asValue(q, \"TYPE\", OPEN_BRACE, e, CLOSE_BRACE);\n         }\n     }\n@@ -449,7 +454,7 @@ public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQue\n         }\n         \n         @Override\n-        public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+        public StringBuilder asValue(AliasContext q) {\n             return Expressions.asValue(q, OPEN_BRACE, getJavaType().getSimpleName(), CLOSE_BRACE, e);\n         }\n     }\n@@ -475,7 +480,7 @@ public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQue\n         }\n         \n         @Override\n-        public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+        public StringBuilder asValue(AliasContext q) {\n             return Expressions.asValue(q, \"CONCAT\", OPEN_BRACE, e1, COMMA, e2, CLOSE_BRACE);\n         }\n     }\n@@ -520,7 +525,7 @@ public void acceptVisit(CriteriaExpressionVisitor visitor) {\n         }\n         \n         @Override\n-        public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+        public StringBuilder asValue(AliasContext q) {\n             return Expressions.asValue(q, \"SUBSTRING\", OPEN_BRACE, e, COMMA, from, COMMA, len, CLOSE_BRACE);\n         }\n     }\n@@ -572,7 +577,7 @@ public void acceptVisit(CriteriaExpressionVisitor visitor) {\n         }\n         \n         @Override\n-        public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+        public StringBuilder asValue(AliasContext q) {\n             return Expressions.asValue(q, \"LOCATE\", OPEN_BRACE, pattern, COMMA, path, CLOSE_BRACE);\n         }\n     }\n@@ -623,7 +628,7 @@ public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQue\n         }\n         \n         @Override\n-        public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+        public StringBuilder asValue(AliasContext q) {\n             return Expressions.asValue(q, \"TRIM\", OPEN_BRACE, e1, COMMA, e2, CLOSE_BRACE);\n         }        \n     }\n@@ -655,7 +660,7 @@ public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQue\n         }\n         \n         @Override\n-        public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+        public StringBuilder asValue(AliasContext q) {\n             return e2 == null \n                ? Expressions.asValue(q, \"SUM\", OPEN_BRACE, e1, CLOSE_BRACE)\n                : Expressions.asValue(q, e1, \" + \", e2);\n@@ -683,7 +688,7 @@ public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQue\n         }\n         \n         @Override\n-        public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+        public StringBuilder asValue(AliasContext q) {\n             return Expressions.asValue(q, e1, \" * \" ,e2);\n         }        \n     }\n@@ -709,7 +714,7 @@ public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQue\n         }\n         \n         @Override\n-        public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+        public StringBuilder asValue(AliasContext q) {\n             return Expressions.asValue(q, e1, \" - \" ,e2);\n         }        \n     }\n@@ -736,7 +741,7 @@ public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQue\n         }\n         \n         @Override\n-        public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+        public StringBuilder asValue(AliasContext q) {\n             return Expressions.asValue(q, e1, \"%\" ,e2);\n         }        \n     }\n@@ -760,7 +765,7 @@ public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQue\n         }\n         \n         @Override\n-        public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+        public StringBuilder asValue(AliasContext q) {\n             return Expressions.asValue(q, \"MOD\", OPEN_BRACE, e1, COMMA, e2, CLOSE_BRACE);\n         }        \n     }\n@@ -776,7 +781,7 @@ public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQue\n         }\n         \n         @Override\n-        public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+        public StringBuilder asValue(AliasContext q) {\n             return new StringBuilder(\"CURRENT_DATE\");\n         }\n     }\n@@ -792,7 +797,7 @@ public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQue\n         }\n         \n         @Override\n-        public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+        public StringBuilder asValue(AliasContext q) {\n             return new StringBuilder(\"CURRENT_TIME\");\n         }\n     }\n@@ -808,7 +813,7 @@ public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQue\n         }\n         \n         @Override\n-        public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+        public StringBuilder asValue(AliasContext q) {\n             return new StringBuilder(\"CURRENT_TIMESTAMP\");\n         }\n     }\n@@ -821,10 +826,10 @@ public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n         public <X> Equal(Expression<X> x, Object y) {\n             this(x, new Constant(y));\n         }\n-        \n+\n         @Override\n-        public PredicateImpl clone() {\n-            return new Equal(e1, e2);\n+        public PredicateImpl negate() {\n+            return new NotEqual(e1, e2).markNegated();\n         }\n         \n         @Override\n@@ -833,15 +838,44 @@ public PredicateImpl clone() {\n             Value val1 = Expressions.toValue(e1, factory, featureSelection, q);\n             Value val2 = Expressions.toValue(e2, factory, featureSelection, q);\n             Expressions.setImplicitTypes(val1, val2, e1.getJavaType(), q);\n-            return isNegated() ? factory.notEqual(val1, val2) : factory.equal(val1, val2);\n+            return factory.equal(val1, val2);\n         }\n         \n         @Override\n-        public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+        public StringBuilder asValue(AliasContext q) {\n             return Expressions.asValue(q, e1, \" = \", e2);\n         }        \n     }\n     \n+    public static class NotEqual extends BinaryLogicalExpression {\n+        public <X,Y> NotEqual(Expression<X> x, Expression<Y> y) {\n+            super(x,y);\n+        }\n+        \n+        public <X> NotEqual(Expression<X> x, Object y) {\n+            this(x, new Constant(y));\n+        }\n+        \n+        @Override\n+        public PredicateImpl negate() {\n+            return new Equal(e1, e2).markNegated();\n+        }\n+        \n+        @Override\n+        org.apache.openjpa.kernel.exps.Expression toKernelExpression(ExpressionFactory factory, MetamodelImpl featureSelection, \n+            CriteriaQueryImpl<?> q) {\n+            Value val1 = Expressions.toValue(e1, factory, featureSelection, q);\n+            Value val2 = Expressions.toValue(e2, factory, featureSelection, q);\n+            Expressions.setImplicitTypes(val1, val2, e1.getJavaType(), q);\n+            return factory.notEqual(val1, val2);\n+        }\n+        \n+        @Override\n+        public StringBuilder asValue(AliasContext q) {\n+            return Expressions.asValue(q, e1, \" <> \", e2);\n+        }        \n+    }\n+    \n     public static class GreaterThan extends BinaryLogicalExpression {\n         public <X,Y> GreaterThan(Expression<X> x, Expression<Y> y) {\n             super(x,y);\n@@ -851,6 +885,11 @@ public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n             this(x, new Constant(y));\n         }\n         \n+        @Override\n+        public PredicateImpl negate() {\n+            return new LessThanEqual(e1, e2).markNegated();\n+        }\n+        \n         @Override\n         org.apache.openjpa.kernel.exps.Expression toKernelExpression(ExpressionFactory factory, MetamodelImpl featureSelection, \n             CriteriaQueryImpl<?> q) {\n@@ -861,7 +900,7 @@ public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n         }\n         \n         @Override\n-        public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+        public StringBuilder asValue(AliasContext q) {\n             return Expressions.asValue(q, e1, \" > \", e2);\n         }        \n     }\n@@ -875,6 +914,11 @@ public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n             this(x, new Constant(y));\n         }\n         \n+        @Override\n+        public PredicateImpl negate() {\n+            return new LessThan(e1, e2).markNegated();\n+        }\n+        \n         @Override\n         org.apache.openjpa.kernel.exps.Expression toKernelExpression(ExpressionFactory factory, MetamodelImpl featureSelection, \n             CriteriaQueryImpl<?> q) {\n@@ -885,7 +929,7 @@ public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n         }\n         \n         @Override\n-        public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+        public StringBuilder asValue(AliasContext q) {\n             return Expressions.asValue(q, e1, \" >= \", e2);\n         }        \n     }\n@@ -899,6 +943,11 @@ public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n             this(x, new Constant(y));\n         }\n         \n+        @Override\n+        public PredicateImpl negate() {\n+            return new GreaterThanEqual(e1, e2).markNegated();\n+        }\n+        \n         @Override\n         org.apache.openjpa.kernel.exps.Expression toKernelExpression(ExpressionFactory factory, MetamodelImpl featureSelection, \n             CriteriaQueryImpl<?> q) {\n@@ -909,7 +958,7 @@ public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n         }\n         \n         @Override\n-        public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+        public StringBuilder asValue(AliasContext q) {\n             return Expressions.asValue(q, e1, \" < \", e2);\n         }        \n     }\n@@ -923,6 +972,11 @@ public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n             this(x, new Constant(y));\n         }\n         \n+        @Override\n+        public PredicateImpl negate() {\n+            return new GreaterThan(e1, e2).markNegated();\n+        }\n+        \n         @Override\n         org.apache.openjpa.kernel.exps.Expression toKernelExpression(ExpressionFactory factory, MetamodelImpl featureSelection, \n             CriteriaQueryImpl<?> q) {\n@@ -934,7 +988,7 @@ public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n         \n         \n         @Override\n-        public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+        public StringBuilder asValue(AliasContext q) {\n             return Expressions.asValue(q, e1, \" <= \", e2);\n         }        \n     }\n@@ -956,7 +1010,7 @@ public Between(Expression<? extends Y> v, Y x, Y y) {\n         }\n         \n         @Override\n-        public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+        public StringBuilder asValue(AliasContext q) {\n             return Expressions.asValue(q, e, \" BETWEEN \", v1, \" AND \", v2);\n         }\n     }\n@@ -1009,7 +1063,7 @@ public void acceptVisit(CriteriaExpressionVisitor visitor) {\n             Expressions.acceptVisit(visitor, this, arg instanceof Expression ? ((Expression)arg) : null);\n         }\n         \n-        public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+        public StringBuilder asValue(AliasContext q) {\n             if (arg == null)\n                 return new StringBuilder(\"NULL\");\n             Class<?> literalClass = getJavaType();\n@@ -1040,15 +1094,20 @@ public IsEmpty(Expression<?> collection) {\n         }\n         \n         @Override\n-        public PredicateImpl clone() {\n-            return new IsEmpty(collection);\n+        public PredicateImpl negate() {\n+            return new IsNotEmpty(collection).markNegated();\n+        }\n+        \n+        @Override\n+        Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQueryImpl<?> q) {\n+            return Expressions.toValue(collection, factory, featureSelection, q);\n         }\n         \n         @Override\n         org.apache.openjpa.kernel.exps.Expression toKernelExpression(ExpressionFactory factory, MetamodelImpl featureSelection, \n             CriteriaQueryImpl<?> q) {\n             Value val = Expressions.toValue(collection, factory, featureSelection, q);\n-            return (isNegated()) ? factory.not(factory.isEmpty(val)) : factory.isEmpty(val);\n+            return factory.isEmpty(val);\n         }\n         \n         public void acceptVisit(CriteriaExpressionVisitor visitor) {\n@@ -1057,7 +1116,7 @@ public void acceptVisit(CriteriaExpressionVisitor visitor) {\n         }\n         \n         @Override\n-        public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+        public StringBuilder asValue(AliasContext q) {\n             return Expressions.asValue(q, collection, \" IS EMPTY\");\n         }\n     }\n@@ -1070,15 +1129,21 @@ public IsNotEmpty(Expression<?> collection) {\n         }\n         \n         @Override\n-        public PredicateImpl clone() {\n-            return new IsNotEmpty(collection);\n+        public PredicateImpl negate() {\n+            return new IsEmpty(collection).markNegated();\n+        }\n+        \n+        @Override\n+        Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQueryImpl<?> q) {\n+            return Expressions.toValue(collection, factory, featureSelection, q);\n         }\n         \n         @Override\n         org.apache.openjpa.kernel.exps.Expression toKernelExpression(ExpressionFactory factory, MetamodelImpl featureSelection, \n             CriteriaQueryImpl<?> q) {\n             Value val = Expressions.toValue(collection, factory, featureSelection, q);\n-            return (isNegated()) ? factory.isEmpty(val) : factory.isNotEmpty(val);\n+            // factory.isNotEmpty() not used to match JPQL\n+            return factory.not(factory.isEmpty(val));\n         }\n         \n         public void acceptVisit(CriteriaExpressionVisitor visitor) {\n@@ -1087,7 +1152,7 @@ public void acceptVisit(CriteriaExpressionVisitor visitor) {\n         }\n         \n         @Override\n-        public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+        public StringBuilder asValue(AliasContext q) {\n             return Expressions.asValue(q, collection, \" IS NOT EMPTY\");\n         }\n     }\n@@ -1108,7 +1173,7 @@ public Index(Joins.List<?,?> e) {\n         }\n         \n         @Override\n-        public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+        public StringBuilder asValue(AliasContext q) {\n             return Expressions.asValue(q, \"INDEX\", OPEN_BRACE, e, CLOSE_BRACE);\n         }\n     }\n@@ -1131,18 +1196,13 @@ public IsMember(E element, Expression<?> collection) {\n             this((Class<E>)element.getClass(), element, collection);\n         }\n         \n-        @Override\n-        public PredicateImpl clone() {\n-            return new IsMember<E>(element.getJavaType(), element, collection);\n-        }\n-        \n         @Override\n         public org.apache.openjpa.kernel.exps.Expression toKernelExpression(\n             ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQueryImpl<?> q) {\n             org.apache.openjpa.kernel.exps.Expression contains = factory.contains(\n                 Expressions.toValue(collection, factory, featureSelection, q), \n                 Expressions.toValue(element, factory, featureSelection, q));\n-            return isNegated() ? factory.not(contains) : contains;\n+            return contains;\n         }\n         \n         public void acceptVisit(CriteriaExpressionVisitor visitor) {\n@@ -1151,8 +1211,8 @@ public void acceptVisit(CriteriaExpressionVisitor visitor) {\n         }\n         \n         @Override\n-        public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n-            return Expressions.asValue(q, element, isNegated() ? \"NOT \" : \"\", \"MEMBER OF \", collection);\n+        public StringBuilder asValue(AliasContext q) {\n+            return Expressions.asValue(q, element, \"MEMBER OF \", collection);\n         }\n     }\n     \n@@ -1192,11 +1252,6 @@ public Like(Expression<String> x, String pat,  Character esc) {\n             this(x, new Constant<String>(pat), new Constant<Character>(esc));\n         }\n \n-        @Override\n-        public PredicateImpl clone() {\n-            return new Like(str, pattern, escapeChar);\n-        }\n-        \n         @Override\n         public org.apache.openjpa.kernel.exps.Expression toKernelExpression(\n             ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQueryImpl<?> q) {\n@@ -1215,7 +1270,7 @@ public void acceptVisit(CriteriaExpressionVisitor visitor) {\n         }\n         \n         @Override\n-        public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+        public StringBuilder asValue(AliasContext q) {\n             return Expressions.asValue(q, str, \" LIKE \", pattern);\n         }        \n     }\n@@ -1252,7 +1307,7 @@ public void acceptVisit(CriteriaExpressionVisitor visitor) {\n         }\n         \n         @Override\n-        public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+        public StringBuilder asValue(AliasContext q) {\n             return Expressions.asValue(q, \"COALESCE\", OPEN_BRACE, Expressions.asValue(q, values == null \n                     ? null : values.toArray(new Expression<?>[values.size()]), COMMA), CLOSE_BRACE);\n         }        \n@@ -1285,7 +1340,7 @@ public void acceptVisit(CriteriaExpressionVisitor visitor) {\n         }\n         \n         @Override\n-        public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+        public StringBuilder asValue(AliasContext q) {\n             return Expressions.asValue(q, \"NULLIF\", OPEN_BRACE, val1, COMMA, val2, CLOSE_BRACE);\n         }        \n     }\n@@ -1299,8 +1354,8 @@ public IsNull(ExpressionImpl<?> e) {\n         \n         @Override\n         public PredicateImpl negate() {\n-            return new Expressions.IsNotNull(e);\n-        }        \n+            return new IsNotNull(e).markNegated();\n+        }\n         \n         @Override\n         org.apache.openjpa.kernel.exps.Expression toKernelExpression(\n@@ -1316,7 +1371,7 @@ public void acceptVisit(CriteriaExpressionVisitor visitor) {\n         }\n         \n         @Override\n-        public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+        public StringBuilder asValue(AliasContext q) {\n             return Expressions.asValue(q, e, \" IS NULL\");\n         }\n     }\n@@ -1330,9 +1385,9 @@ public IsNotNull(ExpressionImpl<?> e) {\n         \n         @Override\n         public PredicateImpl negate() {\n-            return new Expressions.IsNull(e);\n-        }       \n-\n+            return new IsNull(e).markNegated();\n+        }\n+        \n         @Override\n         org.apache.openjpa.kernel.exps.Expression toKernelExpression(\n             ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQueryImpl<?> q) {\n@@ -1347,15 +1402,14 @@ public void acceptVisit(CriteriaExpressionVisitor visitor) {\n         }\n         \n         @Override\n-        public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+        public StringBuilder asValue(AliasContext q) {\n             return Expressions.asValue(q, e, \" IS NOT NULL\");\n         }\n     }\n     \n     \n     public static class In<T> extends PredicateImpl.Or implements QueryBuilder.In<T> {\n         final ExpressionImpl<T> e;\n-        private boolean negate;\n         public In(Expression<?> e) {\n             super();\n             this.e = (ExpressionImpl<T>)e;\n@@ -1375,11 +1429,16 @@ public In(Expression<?> e) {\n             return this;\n         }\n         \n-        public In<T> negate() {\n-            this.negate = !negate;\n-            return this;\n+        @Override\n+        public PredicateImpl negate() {\n+            In<T> notIn = new In<T>(e);\n+            notIn.markNegated();\n+            for (Predicate e : _exps) {\n+                notIn.add(e);\n+            }\n+            return notIn;\n         }\n-    \n+        \n         @Override\n         org.apache.openjpa.kernel.exps.Expression toKernelExpression(\n             ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQueryImpl<?> q) {\n@@ -1390,23 +1449,20 @@ public In(Expression<?> e) {\n                 ExpressionImpl<?> e1 = e.e1;\n                 Value val2 = Expressions.toValue(e2, factory, featureSelection, q);\n                 if (!(val2 instanceof Literal)) {\n-                     Value val1 = Expressions.toValue(e1, factory, featureSelection, q);\n+                    Value val1 = Expressions.toValue(e1, factory, featureSelection, q);\n                     Expressions.setImplicitTypes(val1, val2, e1.getJavaType(), q);\n                     inExpr = factory.contains(val2, val1);\n-                    return negate ? factory.not(inExpr) : inExpr;\n+                    return isNegated() ? factory.not(inExpr) : inExpr;\n                 } else if (((Literal)val2).getParseType() == Literal.TYPE_COLLECTION) {\n-                    List<Expression<Boolean>> exps = new ArrayList<Expression<Boolean>>();\n                     Collection coll = (Collection)((Literal)val2).getValue();\n+                    _exps.clear();\n                     for (Object v : coll) {\n-                        exps.add(new Expressions.Equal(e1,v));\n+                        add(new Expressions.Equal(e1,v));\n                     }\n-                    _exps = exps;\n                 }\n             } \n             inExpr = super.toKernelExpression(factory, featureSelection, q); \n             IsNotNull notNull = new Expressions.IsNotNull(e);\n-            if (negate) \n-                inExpr = factory.not(inExpr);\n             \n             return factory.and(inExpr, notNull.toKernelExpression(factory, featureSelection, q));\n         }\n@@ -1417,8 +1473,8 @@ public void acceptVisit(CriteriaExpressionVisitor visitor) {\n         }\n         \n         @Override\n-        public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n-            StringBuilder buffer = Expressions.asValue(q, e, negate ? \" NOT IN \" : \" IN \", OPEN_BRACE);\n+        public StringBuilder asValue(AliasContext q) {\n+            StringBuilder buffer = Expressions.asValue(q, e, \" IN \", OPEN_BRACE);\n             for (int i = 0; i < _exps.size(); i++) {\n                 buffer.append(((Equal)_exps.get(i)).e2.asValue(q)).append(i+1 == _exps.size() ? CLOSE_BRACE : COMMA);\n             }\n@@ -1481,7 +1537,7 @@ public void acceptVisit(CriteriaExpressionVisitor visitor) {\n         }\n         \n         @Override\n-        public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+        public StringBuilder asValue(AliasContext q) {\n             StringBuilder buffer = new StringBuilder(\"CASE \");\n             int size = whens.size();\n             for (int i = 0; i < size; i++) {\n@@ -1558,7 +1614,7 @@ public void acceptVisit(CriteriaExpressionVisitor visitor) {\n         }\n         \n         @Override\n-        public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+        public StringBuilder asValue(AliasContext q) {\n             StringBuilder buffer = new StringBuilder(\"CASE \");\n             int size = whens.size();\n             for (int i = 0; i < size; i++) {\n@@ -1580,7 +1636,7 @@ public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQue\n         }\n         \n         @Override\n-        public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+        public StringBuilder asValue(AliasContext q) {\n             return Expressions.asValue(q, \"LOWER\", OPEN_BRACE, e, CLOSE_BRACE);\n         }\n     }\n@@ -1596,7 +1652,7 @@ public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQue\n         }\n         \n         @Override\n-        public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+        public StringBuilder asValue(AliasContext q) {\n             return Expressions.asValue(q, \"UPPER\", OPEN_BRACE, e, CLOSE_BRACE);\n         }\n     }\n@@ -1612,7 +1668,7 @@ public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQue\n         }\n         \n         @Override\n-        public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+        public StringBuilder asValue(AliasContext q) {\n             return Expressions.asValue(q, \"LENGTH\", OPEN_BRACE, e, CLOSE_BRACE);\n         }\n     }\n@@ -1648,22 +1704,17 @@ public Exists(Subquery<X> x) {\n             super(x);\n         }\n \n-        @Override\n-        public PredicateImpl clone() {\n-            return new Exists<X>(e);\n-        }\n-        \n         @Override\n         org.apache.openjpa.kernel.exps.Expression toKernelExpression(\n             ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQueryImpl<?> q) {\n             org.apache.openjpa.kernel.exps.Expression exists = \n                 factory.isNotEmpty(Expressions.toValue(e, factory, featureSelection, q));\n-            return isNegated() ? factory.not(exists) : exists;\n+            return exists;\n         }        \n         \n         @Override\n-        public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n-            return Expressions.asValue(q, isNegated() ? \"NOT\" : \"\", \" EXISTS\", OPEN_BRACE, e, CLOSE_BRACE);\n+        public StringBuilder asValue(AliasContext q) {\n+            return Expressions.asValue(q, \" EXISTS\", OPEN_BRACE, e, CLOSE_BRACE);\n         }\n     }\n     \n@@ -1679,7 +1730,7 @@ public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection,\n         }\n         \n         @Override\n-        public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+        public StringBuilder asValue(AliasContext q) {\n             return Expressions.asValue(q, \"ALL\", OPEN_BRACE, e, CLOSE_BRACE);\n         }\n     }\n@@ -1695,36 +1746,31 @@ public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQue\n         }\n         \n         @Override\n-        public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+        public StringBuilder asValue(AliasContext q) {\n             return Expressions.asValue(q, \"ANY\", OPEN_BRACE, e, CLOSE_BRACE);\n         }\n     }\n \n-    public static class Not<X> extends PredicateImpl {\n+    public static class Not extends PredicateImpl {\n         protected final ExpressionImpl<Boolean> e;\n         public Not(Expression<Boolean> ne) {\n             super();\n             e = (ExpressionImpl<Boolean>)ne;\n         }\n         \n-        @Override\n-        public PredicateImpl clone() {\n-            return new Not<X>(e);\n-        }\n-        \n         @Override\n         public org.apache.openjpa.kernel.exps.Expression toKernelExpression(\n           ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQueryImpl<?> q) {\n-            return factory.not(super.toKernelExpression(factory, featureSelection, q));\n+            return factory.not(e.toKernelExpression(factory, featureSelection, q));\n         }        \n         \n         public void acceptVisit(CriteriaExpressionVisitor visitor) {\n             Expressions.acceptVisit(visitor, this, e);\n         }\n         \n         @Override\n-        public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n-            return Expressions.asValue(q, \"NOT\", OPEN_BRACE, e, CLOSE_BRACE);\n+        public StringBuilder asValue(AliasContext q) {\n+            return Expressions.asValue(q, \"NOT \", e);\n         }\n     }\n     \n@@ -1748,7 +1794,7 @@ public void acceptVisit(CriteriaExpressionVisitor visitor) {\n         }\n         \n         @Override\n-        public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+        public StringBuilder asValue(AliasContext q) {\n             return actual.asValue(q);\n         }\n     }"},{"sha":"080e91ec4db2d689aa3177319caa014431cf210f","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/FetchPathImpl.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/e01390051bc617047b7153868289c11ccb6f4cba/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/FetchPathImpl.java","raw_url":"https://github.com/apache/openjpa/raw/e01390051bc617047b7153868289c11ccb6f4cba/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/FetchPathImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/FetchPathImpl.java?ref=e01390051bc617047b7153868289c11ccb6f4cba","patch":"@@ -110,4 +110,7 @@ public JoinType getJoinType() {\n         return fetch;\n     }\n \n+    public StringBuilder asValue(AliasContext q) {\n+        return super.asValue(q).insert(0, \" \" + joinType + \" JOIN FETCH \");\n+    }\n }"},{"sha":"3e7336721a0a0cf1114e4f65f51bf62304c99aa0","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/FromImpl.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/e01390051bc617047b7153868289c11ccb6f4cba/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/FromImpl.java","raw_url":"https://github.com/apache/openjpa/raw/e01390051bc617047b7153868289c11ccb6f4cba/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/FromImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/FromImpl.java?ref=e01390051bc617047b7153868289c11ccb6f4cba","patch":"@@ -148,8 +148,7 @@ protected FromImpl(PathImpl<?,Z> parent, Members.Member<? super Z, ?> m, Class<X\n      *  Join to the given List-valued attribute using the given join type.\n      */\n     public <Y> ListJoin<X,Y> join(ListAttribute<? super X, Y> list, JoinType jt) {\n-        ListJoin<X, Y> join = new Joins.List<X, Y>(this, \n-                (Members.ListAttributeImpl<? super X, Y>)list, jt);\n+        ListJoin<X, Y> join = new Joins.List<X, Y>(this, (Members.ListAttributeImpl<? super X, Y>)list, jt);\n         addJoin(join);    \n         return join;\n     }\n@@ -283,6 +282,6 @@ private void addJoin(Join<X,?> join) {\n     \n     public void acceptVisit(CriteriaExpressionVisitor visitor) {\n         Expressions.acceptVisit(visitor, this, \n-                _joins == null ? null : _joins.toArray(new ExpressionImpl<?>[_joins.size()]));\n+            _joins == null ? null : _joins.toArray(new ExpressionImpl<?>[_joins.size()]));\n     }\n }"},{"sha":"3a563fc0b3558eb1e51ecfbb39d9f25a92c2a90d","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/Joins.java","status":"modified","additions":12,"deletions":13,"changes":25,"blob_url":"https://github.com/apache/openjpa/blob/e01390051bc617047b7153868289c11ccb6f4cba/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/Joins.java","raw_url":"https://github.com/apache/openjpa/raw/e01390051bc617047b7153868289c11ccb6f4cba/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/Joins.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/Joins.java?ref=e01390051bc617047b7153868289c11ccb6f4cba","patch":"@@ -175,11 +175,11 @@ else if (parent.inSubquery(subquery)) {\n             }\n             if (getJoins() != null) {\n                 for (Join<?, ?> join1 : getJoins()) {\n-                    filter = CriteriaExpressionBuilder.and(factory, \n-                                 ((FromImpl<?,?>)join1).toKernelExpression(factory, featureSelection, c), filter);\n+                    filter = Expressions.and(factory, \n+                             ((FromImpl<?,?>)join1).toKernelExpression(factory, featureSelection, c), filter);\n                 }\n             }\n-            org.apache.openjpa.kernel.exps.Expression expr = CriteriaExpressionBuilder.and(factory, join, filter);\n+            org.apache.openjpa.kernel.exps.Expression expr = Expressions.and(factory, join, filter);\n             \n             if (correlatedParentPath == null) {\n                 return expr;\n@@ -199,7 +199,7 @@ else if (parent.inSubquery(subquery)) {\n                 path.setMetaData(meta);\n                 //filter = bindVariableForKeyPath(path, alias, filter);\n                 filter = factory.equal(parentPath, path);\n-                return CriteriaExpressionBuilder.and(factory, expr, filter);\n+                return Expressions.and(factory, expr, filter);\n             }\n         }\n         \n@@ -249,16 +249,15 @@ public void setImplicitContainsTypes(Value val1, Value val2, int op) {\n         }\n         \n         @Override\n-        public StringBuilder asVariable(CriteriaQueryImpl<?> q) {\n+        public StringBuilder asVariable(AliasContext q) {\n             String varName = \"?\";\n             Value var = q.getRegisteredVariable(this);\n             if (var == null) {\n                 varName = \"\"+_member.fmd.getName().charAt(0);\n             } else {\n                 varName = var.getName();\n             }\n-            return new StringBuilder(joinType.toString()).append(\" JOIN \")\n-                .append(super.asVariable(q)).append(\" \" + varName);\n+            return new StringBuilder(\" \" + joinType + \" JOIN \").append(super.asVariable(q)).append(\" \" + varName);\n         }\n     }\n     \n@@ -386,11 +385,11 @@ public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQue\n             }\n             if (getJoins() != null) {\n                 for (Join<?, ?> join1 : getJoins()) {\n-                    filter = CriteriaExpressionBuilder.and(factory, \n+                    filter = Expressions.and(factory, \n                         ((FromImpl<?,?>)join1).toKernelExpression(factory, featureSelection, c), filter);\n                 }\n             }\n-            org.apache.openjpa.kernel.exps.Expression expr = CriteriaExpressionBuilder.and(factory, join, filter);\n+            org.apache.openjpa.kernel.exps.Expression expr = Expressions.and(factory, join, filter);\n             if (correlatedParentPath == null) {\n                 return expr;\n             } else {\n@@ -417,11 +416,11 @@ public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQue\n                     c.registerVariable(this, var, parentPath);\n                 \n                 if (_member.fmd.isElementCollection()) {\n-                    filter = CriteriaExpressionBuilder.and(factory, join, filter);\n+                    filter = Expressions.and(factory, join, filter);\n                 } else { \n                     filter = factory.equal(parentPath, path);\n                 }\n-                return CriteriaExpressionBuilder.and(factory, expr, filter);\n+                return Expressions.and(factory, expr, filter);\n             }\n         }\n         \n@@ -580,7 +579,7 @@ public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQue\n        }\n        \n        @Override\n-       public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+       public StringBuilder asValue(AliasContext q) {\n            StringBuilder buffer = new StringBuilder(\"KEY(\");\n            Value var = q.getRegisteredVariable(map);\n            buffer.append(var != null ? var.getName() : map.asValue(q)).append(\")\");\n@@ -609,7 +608,7 @@ public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQue\n        }\n        \n        @Override\n-       public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+       public StringBuilder asValue(AliasContext q) {\n            StringBuilder buffer = new StringBuilder(\"ENTRY(\");\n            Value var = q.getRegisteredVariable(map);\n            buffer.append(var != null ? var.getName() : map.asValue(q)).append(\")\");"},{"sha":"25ee56e001fe51117c93ba63cb4883c0e405bbe1","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/OrderImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/e01390051bc617047b7153868289c11ccb6f4cba/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/OrderImpl.java","raw_url":"https://github.com/apache/openjpa/raw/e01390051bc617047b7153868289c11ccb6f4cba/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/OrderImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/OrderImpl.java?ref=e01390051bc617047b7153868289c11ccb6f4cba","patch":"@@ -60,11 +60,11 @@ public void acceptVisit(CriteriaExpressionVisitor visitor) {\n         }\n     }\n     \n-    public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+    public StringBuilder asValue(AliasContext q) {\n         return e.asValue(q).append(_ascending ? \"\" : \" DESC\");\n     }\n     \n-    public StringBuilder asVariable(CriteriaQueryImpl<?> q) {\n+    public StringBuilder asVariable(AliasContext q) {\n         throw new IllegalStateException(this + \" can not be rendered as variable\");\n     }\n }"},{"sha":"11d702515cfe7eec30dd629f26f0498c1273678b","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/ParameterExpressionImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/e01390051bc617047b7153868289c11ccb6f4cba/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/ParameterExpressionImpl.java","raw_url":"https://github.com/apache/openjpa/raw/e01390051bc617047b7153868289c11ccb6f4cba/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/ParameterExpressionImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/ParameterExpressionImpl.java?ref=e01390051bc617047b7153868289c11ccb6f4cba","patch":"@@ -98,7 +98,7 @@ public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQue\n     }   \n     \n     @Override\n-    public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+    public StringBuilder asValue(AliasContext q) {\n         return Expressions.asValue(q, \":\", _name == null ? \"param\" : _name);\n     }\n     "},{"sha":"891291ff760b212948b970432adf7e5f9620051d","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/PathImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/e01390051bc617047b7153868289c11ccb6f4cba/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/PathImpl.java","raw_url":"https://github.com/apache/openjpa/raw/e01390051bc617047b7153868289c11ccb6f4cba/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/PathImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/PathImpl.java?ref=e01390051bc617047b7153868289c11ccb6f4cba","patch":"@@ -279,7 +279,7 @@ protected void traversePath(PathImpl<?,?> parent,  org.apache.openjpa.kernel.exp\n         return new Expressions.Type<Class<? extends X>>(this);\n     }\n     \n-    public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+    public StringBuilder asValue(AliasContext q) {\n         StringBuilder buffer = new StringBuilder();\n         if (_parent != null) {\n             Value var = q.getRegisteredVariable(_parent);\n@@ -291,7 +291,7 @@ public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n         return buffer;\n     }\n     \n-    public StringBuilder asVariable(CriteriaQueryImpl<?> q) {\n+    public StringBuilder asVariable(AliasContext q) {\n         Value var = q.getRegisteredVariable(this);\n         return asValue(q).append(\" \").append(var == null ? \"?\" : var.getName());\n     }"},{"sha":"1ef067e814a3e020b37da5952ca5be088bb65ed4","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/PredicateImpl.java","status":"modified","additions":63,"deletions":42,"changes":105,"blob_url":"https://github.com/apache/openjpa/blob/e01390051bc617047b7153868289c11ccb6f4cba/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/PredicateImpl.java","raw_url":"https://github.com/apache/openjpa/raw/e01390051bc617047b7153868289c11ccb6f4cba/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/PredicateImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/PredicateImpl.java?ref=e01390051bc617047b7153868289c11ccb6f4cba","patch":"@@ -19,7 +19,6 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.util.ArrayList;\n-import java.util.Collections;\n import java.util.List;\n import java.util.concurrent.CopyOnWriteArrayList;\n \n@@ -29,53 +28,68 @@\n import org.apache.openjpa.kernel.exps.ExpressionFactory;\n import org.apache.openjpa.persistence.meta.MetamodelImpl;\n \n-public class PredicateImpl extends ExpressionImpl<Boolean> implements Predicate {\n+/**\n+ * Predicate is a expression that evaluates to true or false.\n+ * All boolean expressions are implemented as Predicate.\n+ * A predicate can have zero or more predicate arguments.\n+ * Default predicate operator is AND (conjunction).\n+ * Two constant predicates are Predicate.TRUE and Predicate.FALSE.\n+ * AND predicate with no argument evaluates to TRUE.\n+ * OR predicate with no argument evaluates to FALSE.\n+ * Negation of a Predicate creates a new Predicate.\n+ * \n+ * @author Pinaki Poddar\n+ *\n+ */\n+public abstract class PredicateImpl extends ExpressionImpl<Boolean> implements Predicate {\n     private static final ExpressionImpl<Integer> ONE  = new Expressions.Constant<Integer>(1);\n-    public static final ExpressionImpl<Boolean> TRUE  = new Expressions.Equal(ONE,ONE);\n-    public static final ExpressionImpl<Boolean> FALSE = new Expressions.Equal(ONE,ONE).negate();\n+    public static final Predicate TRUE  = new Expressions.Equal(ONE,ONE);\n+    public static final Predicate FALSE = new Expressions.NotEqual(ONE,ONE);\n     \n-    List<Expression<Boolean>> _exps;\n+    protected final List<Predicate> _exps = new ArrayList<Predicate>();\n     protected final BooleanOperator _op;\n-    private boolean _negated = false;\n+    protected boolean _negated = false;\n \n     /**\n-     * A predicate with empty name and AND operator.\n+     * A predicate no arguments representing AND operator.\n      */\n     protected PredicateImpl() {\n         this(BooleanOperator.AND);\n     }\n     \n     /**\n-     * A predicate with given name and given operator.\n+     * A predicate representing given operator.\n      */\n     protected PredicateImpl(BooleanOperator op) {\n         super(Boolean.class);\n         _op = op;\n     }\n \n     /**\n-     * A predicate with given name, given operator with given arguments.\n+     * A predicate of given operator with given arguments.\n      */\n     protected PredicateImpl(BooleanOperator op, Predicate...restrictions) {\n         this(op);\n         if (restrictions != null) {\n             for (Predicate p : restrictions)\n-                add((PredicateImpl)p);\n+                add(p);\n         }\n     }\n \n     /**\n      * Adds the given predicate expression.\n      */\n     public PredicateImpl add(Expression<Boolean> s) {\n-        if (_exps == null)\n-            _exps = new ArrayList<Expression<Boolean>>();\n-        _exps.add(s);\n+        _exps.add((Predicate)s); // all boolean expressions are Predicate\n         return this;\n     }\n \n     public List<Expression<Boolean>> getExpressions() {\n-        return Expressions.returnCopy(_exps);\n+        List<Expression<Boolean>> result = new CopyOnWriteArrayList<Expression<Boolean>>();\n+        if (_exps.isEmpty())\n+            return result;\n+        result.addAll(_exps);\n+        return result;\n     }\n \n     public final BooleanOperator getOperator() {\n@@ -86,38 +100,38 @@ public final boolean isNegated() {\n         return _negated;\n     }\n \n+    /**\n+     * Default negation creates a Not expression with this receiver as delegate.\n+     * Derived predicates can return the inverse expression such as NotEqual\n+     * for Equal or LessThan for GreaterThanEqual etc.\n+     */\n     public PredicateImpl negate() {\n-        PredicateImpl not = clone();\n-        not._negated = true;\n-        return not;\n+        return new Expressions.Not(this).markNegated();\n     }\n-\n-    public PredicateImpl clone() {\n-        PredicateImpl clone = new PredicateImpl(_op);\n-        if (_exps != null)\n-            clone._exps = new ArrayList<Expression<Boolean>>(this._exps);\n-        return clone;\n+    \n+    protected PredicateImpl markNegated() {\n+        _negated = true;\n+        return this;\n     }\n     \n     @Override\n-    org.apache.openjpa.kernel.exps.Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, \n+    org.apache.openjpa.kernel.exps.Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection,\n         CriteriaQueryImpl<?> q) {\n-        throw new AbstractMethodError();\n+        throw new AbstractMethodError(this.getClass().getName());\n     }\n     \n     @Override\n     org.apache.openjpa.kernel.exps.Expression toKernelExpression(ExpressionFactory factory, MetamodelImpl featureSelection, \n         CriteriaQueryImpl<?> q) {\n-        if (_exps == null || _exps.isEmpty()) {\n-            ExpressionImpl<Boolean> nil = _op == BooleanOperator.AND ? TRUE : FALSE;\n-            return nil.toKernelExpression(factory, featureSelection, q);\n+        if (_exps.isEmpty()) {\n+            Predicate nil = _op == BooleanOperator.AND ? TRUE : FALSE;\n+            return ((PredicateImpl)nil).toKernelExpression(factory, featureSelection, q);\n         }\n         if (_exps.size() == 1) {\n-            ExpressionImpl<Boolean> e0 = (ExpressionImpl<Boolean>)_exps.get(0);\n-            if (e0 instanceof Expressions.Constant && e0.getJavaType() == Boolean.class) {\n-                e0 = Boolean.TRUE.equals(((Expressions.Constant<Boolean>)e0).arg) ? TRUE : FALSE;\n-            }\n-            return e0.toKernelExpression(factory, featureSelection, q);\n+            Predicate e0 = _exps.get(0);\n+            if (isNegated())\n+                e0 = e0.negate();\n+            return ((PredicateImpl)e0).toKernelExpression(factory, featureSelection, q);\n         }\n         \n         ExpressionImpl<?> e1 = (ExpressionImpl<?>)_exps.get(0);\n@@ -128,27 +142,30 @@ public PredicateImpl clone() {\n             ? factory.and(ke1,ke2) : factory.or(ke1, ke2);\n \n         for (int i = 2; i < _exps.size(); i++) {\n-            ExpressionImpl<?> e = (ExpressionImpl<?>)_exps.get(i);\n+            PredicateImpl p = (PredicateImpl)_exps.get(i);\n             result = _op == BooleanOperator.AND \n-            ? factory.and(result, e.toKernelExpression(factory, featureSelection, q))\n-            : factory.or(result, e.toKernelExpression(factory,featureSelection,q));\n+              ? factory.and(result, p.toKernelExpression(factory, featureSelection, q))\n+              : factory.or(result, p.toKernelExpression(factory,featureSelection,q));\n         }\n         return _negated ? factory.not(result) : result;\n     }\n \n     public void acceptVisit(CriteriaExpressionVisitor visitor) {\n-        Expressions.acceptVisit(visitor, this, _exps == null ? null : _exps.toArray(new Expression<?>[_exps.size()]));\n+        Expressions.acceptVisit(visitor, this, _exps.toArray(new Expression<?>[_exps.size()]));\n     }\n     \n-    public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n-        boolean braces = _exps != null && _exps.size() > 1;\n-        StringBuilder buffer =  Expressions.asValue(q, _exps == null ? null : \n-            _exps.toArray(new Expression<?>[_exps.size()]), \" \" +_op + \" \");\n+    public StringBuilder asValue(AliasContext q) {\n+        boolean braces = _exps.size() > 1;\n+        StringBuilder buffer =  Expressions.asValue(q, _exps.toArray(new Expression<?>[_exps.size()]), \" \" +_op + \" \");\n         if (braces) buffer.insert(0, \"(\").append(\")\");\n+        if (isNegated()) buffer.insert(0, \"NOT \");\n         return buffer;\n     }\n \n-    \n+    /**\n+     * Concrete AND predicate.\n+     *\n+     */\n     public static class And extends PredicateImpl {\n         public And(Expression<Boolean> x, Expression<Boolean> y) {\n             super(BooleanOperator.AND);\n@@ -160,6 +177,10 @@ public And(Predicate...restrictions) {\n         }\n     }\n \n+    /**\n+     * Concrete OR predicate.\n+     *\n+     */\n     public static class Or extends PredicateImpl {\n         public Or(Expression<Boolean> x, Expression<Boolean> y) {\n             super(BooleanOperator.OR);"},{"sha":"2ae3195a696cb1cf85e8ec9449e54e6d92d8c926","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/RootImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/e01390051bc617047b7153868289c11ccb6f4cba/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/RootImpl.java","raw_url":"https://github.com/apache/openjpa/raw/e01390051bc617047b7153868289c11ccb6f4cba/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/RootImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/RootImpl.java?ref=e01390051bc617047b7153868289c11ccb6f4cba","patch":"@@ -99,7 +99,7 @@ public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection,\n         return factory.bindVariable(var, path);\n     }\n     \n-    public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+    public StringBuilder asValue(AliasContext q) {\n         Value v = q.getRegisteredRootVariable(this);\n         if (v != null)\n             return new StringBuilder(v.getAlias());\n@@ -111,7 +111,7 @@ public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n         return new StringBuilder().append(Character.toLowerCase(_entity.getName().charAt(0)));\n     }\n     \n-    public StringBuilder asVariable(CriteriaQueryImpl<?> q) {\n+    public StringBuilder asVariable(AliasContext q) {\n         return new StringBuilder(_entity.getName()).append(\" \").append(asValue(q));\n     }\n "},{"sha":"dc91807ec4bc5053c1544c46c637b533efd51463","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/SelectionImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/e01390051bc617047b7153868289c11ccb6f4cba/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/SelectionImpl.java","raw_url":"https://github.com/apache/openjpa/raw/e01390051bc617047b7153868289c11ccb6f4cba/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/SelectionImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/SelectionImpl.java?ref=e01390051bc617047b7153868289c11ccb6f4cba","patch":"@@ -52,11 +52,11 @@ public boolean isCompoundSelection() {\n         return false;\n     }\n     \n-    public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+    public StringBuilder asValue(AliasContext q) {\n         throw new IllegalStateException(this.getClass().getSimpleName() + \" can not be rendered as value\");\n     }\n     \n-    public StringBuilder asVariable(CriteriaQueryImpl<?> q) {\n+    public StringBuilder asVariable(AliasContext q) {\n         throw new IllegalStateException(this.getClass().getSimpleName() + \" can not be rendered as variable\");\n     }\n     "},{"sha":"e8118c76b7bb874c3b3ccd87de35344256cf25bd","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/SubqueryImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/e01390051bc617047b7153868289c11ccb6f4cba/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/SubqueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/e01390051bc617047b7153868289c11ccb6f4cba/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/SubqueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/SubqueryImpl.java?ref=e01390051bc617047b7153868289c11ccb6f4cba","patch":"@@ -379,13 +379,13 @@ else if ((vmd = fmd.getValue()) != null)\n         return getJavaType();\n     }\n     \n-    public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+    public StringBuilder asValue(AliasContext q) {\n         StringBuilder buffer = new StringBuilder();\n         _delegate.render(buffer, _delegate.getRoots(), _corrJoins);\n         return buffer;\n     }\n     \n-    public StringBuilder asVariable(CriteriaQueryImpl<?> q) {\n+    public StringBuilder asVariable(AliasContext q) {\n         return asValue(q);\n     }\n }"}]}

