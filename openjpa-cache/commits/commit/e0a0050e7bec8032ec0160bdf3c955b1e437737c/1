{"sha":"e0a0050e7bec8032ec0160bdf3c955b1e437737c","node_id":"MDY6Q29tbWl0MjA2MzY0OmUwYTAwNTBlN2JlYzgwMzJlYzAxNjBiZGYzYzk1NWIxZTQzNzczN2M=","commit":{"author":{"name":"Milosz Tylenda","email":"mtylenda@apache.org","date":"2011-02-27T11:15:55Z"},"committer":{"name":"Milosz Tylenda","email":"mtylenda@apache.org","date":"2011-02-27T11:15:55Z"},"message":"OPENJPA-1376: Cache values of @SequenceGenerator as specified by allocationSize parameter instead of setting CACHE on database sequence. Idea submitted by Palmer Cox.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1075026 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7664aa0552bf1318b53bfe0fddacfc338c1325b6","url":"https://api.github.com/repos/apache/openjpa/git/trees/7664aa0552bf1318b53bfe0fddacfc338c1325b6"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/e0a0050e7bec8032ec0160bdf3c955b1e437737c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/e0a0050e7bec8032ec0160bdf3c955b1e437737c","html_url":"https://github.com/apache/openjpa/commit/e0a0050e7bec8032ec0160bdf3c955b1e437737c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/e0a0050e7bec8032ec0160bdf3c955b1e437737c/comments","author":null,"committer":null,"parents":[{"sha":"25b4e8719566d1860e8cb3ea335ec2fcbd45379c","url":"https://api.github.com/repos/apache/openjpa/commits/25b4e8719566d1860e8cb3ea335ec2fcbd45379c","html_url":"https://github.com/apache/openjpa/commit/25b4e8719566d1860e8cb3ea335ec2fcbd45379c"}],"stats":{"total":137,"additions":45,"deletions":92},"files":[{"sha":"069272c31456348d68138d797b832253ae17bac2","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/NativeJDBCSeq.java","status":"modified","additions":37,"deletions":54,"changes":91,"blob_url":"https://github.com/apache/openjpa/blob/e0a0050e7bec8032ec0160bdf3c955b1e437737c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/NativeJDBCSeq.java","raw_url":"https://github.com/apache/openjpa/raw/e0a0050e7bec8032ec0160bdf3c955b1e437737c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/NativeJDBCSeq.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/NativeJDBCSeq.java?ref=e0a0050e7bec8032ec0160bdf3c955b1e437737c","patch":"@@ -45,16 +45,16 @@\n import org.apache.openjpa.util.MetaDataException;\n import org.apache.openjpa.util.UserException;\n \n-import serp.util.Strings;\n-\n ///////////////////////////////////////////////////////////\n // NOTE: Do not change property names; see SequenceMetaData\n // and SequenceMapping for standard property names.\n ////////////////////////////////////////////////////////////\n \n /**\n- * {@link JDBCSeq} implementation that uses a database sequences\n+ * {@link JDBCSeq} implementation that uses a database sequence\n  * to generate numbers.\n+ * Supports allocation (caching). In order for allocation to work properly, the database sequence must be defined\n+ * with INCREMENT BY value equal to allocate * increment.\n  *\n  * @see JDBCSeq\n  * @see AbstractJDBCSeq\n@@ -73,14 +73,11 @@\n     private DBIdentifier _seqName = DBIdentifier.newSequence(\"OPENJPA_SEQUENCE\");\n     private int _increment = 1;\n     private int _initial = 1;\n-    private int _allocate = 0;\n+    private int _allocate = 50;\n     private Sequence _seq = null;\n     private String _select = null;\n-\n-    // for deprecated auto-configuration support\n-    private String _format = null;\n-    private DBIdentifier _tableName = DBIdentifier.newTable(\"DUAL\");\n-    private boolean _subTable = false;\n+    private long _nextValue = 0;\n+    private long _maxValue = -1;\n \n     private DBIdentifier _schema = DBIdentifier.NULL;\n         \n@@ -99,15 +96,6 @@ public void setSequence(String seqName) {\n         _seqName = DBIdentifier.newSequence(seqName);\n     }\n \n-    /**\n-     * @deprecated Use {@link #setSequence}. Retained for\n-     * backwards-compatibility for auto-configuration.\n-     */\n-    @Deprecated\n-    public void setSequenceName(String seqName) {\n-        setSequence(seqName);\n-    }\n-\n     /**\n      * @see Sequence#getInitialValue\n      */\n@@ -150,23 +138,6 @@ public void setIncrement(int increment) {\n         _increment = increment;\n     }\n \n-    /**\n-     * @deprecated Retained for backwards-compatibility for auto-configuration.\n-     */\n-    @Deprecated\n-    public void setTableName(String table) {\n-        _tableName = DBIdentifier.newTable(table);\n-    }\n-\n-    /**\n-     * @deprecated Retained for backwards-compatibility for auto-configuration.\n-     */\n-    @Deprecated\n-    public void setFormat(String format) {\n-        _format = format;\n-        _subTable = true;\n-    }\n-\n     @Override\n     public void addSchema(ClassMapping mapping, SchemaGroup group) {\n         // sequence already exists?\n@@ -204,28 +175,43 @@ public void endConfiguration() {\n         buildSequence();\n \n         DBDictionary dict = _conf.getDBDictionaryInstance();\n-        if (_format == null) {\n-            _format = dict.nextSequenceQuery;\n-            if (_format == null)\n-                throw new MetaDataException(_loc.get(\"no-seq-sql\", _seqName));\n+        String format = dict.nextSequenceQuery;\n+        if (format == null) {\n+            throw new MetaDataException(_loc.get(\"no-seq-sql\", _seqName));\n         }\n-        if (DBIdentifier.isNull(_tableName))\n-            _tableName = DBIdentifier.newTable(\"DUAL\");\n \n         String name = dict.getFullName(_seq);\n-        Object[] subs = (_subTable) ? new Object[]{ name, _tableName }\n-            : new Object[]{ name };\n-        _select = MessageFormat.format(_format, subs);\n+        // Increment step is needed for Firebird which uses non-standard sequence fetch syntax.\n+        // Use String.valueOf to get rid of possible locale-specific number formatting.\n+        _select = MessageFormat.format(format, new Object[]{name, String.valueOf(_allocate * _increment)});\n         \n         type = dict.nativeSequenceType;\n     }\n     \n     @Override\n-    protected Object nextInternal(JDBCStore store, ClassMapping mapping)\n+    protected synchronized Object nextInternal(JDBCStore store, ClassMapping mapping)\n+        throws SQLException {\n+        if (_nextValue < _maxValue) {\n+            return _nextValue++;\n+        }\n+\n+        allocateInternal(0, store, mapping);\n+        return _nextValue++;\n+    }\n+\n+    /**\n+     * Allocate additional sequence values.\n+     * @param additional ignored - the allocation size is fixed and determined by allocate and increment properties. \n+     * @param store used to obtain connection\n+     * @param mapping ignored\n+     */\n+    @Override\n+    protected synchronized void allocateInternal(int additional, JDBCStore store, ClassMapping mapping)\n         throws SQLException {\n         Connection conn = getConnection(store);\n         try {\n-            return getSequence(conn);\n+            _nextValue = getSequence(conn);\n+            _maxValue = _nextValue + _allocate * _increment;\n         } finally {\n             closeConnection(conn);\n         }\n@@ -300,9 +286,7 @@ private long getSequence(Connection conn)\n         try {\n             stmnt = conn.prepareStatement(_select);\n             dict.setTimeouts(stmnt, _conf, false);\n-            synchronized(this) {\n-                rs = stmnt.executeQuery();\n-            }\n+            rs = stmnt.executeQuery();\n             if (rs.next())\n                 return rs.getLong(1);\n \n@@ -327,13 +311,12 @@ private long getSequence(Connection conn)\n      *  Where the following options are recognized.\n      * <ul>\n      * <li><i>-properties/-p &lt;properties file or resource&gt;</i>: The\n-     * path or resource name of a OpenJPA properties file containing\n-     * information such as the license key\tand connection data as\n+     * path or resource name of an OpenJPA properties file containing\n+     * information such as connection data as\n      * outlined in {@link JDBCConfiguration}. Optional.</li>\n      * <li><i>-&lt;property name&gt; &lt;property value&gt;</i>: All bean\n      * properties of the OpenJPA {@link JDBCConfiguration} can be set by\n-     * using their\tnames and supplying a value. For example:\n-     * <code>-licenseKey adslfja83r3lkadf</code></li>\n+     * using their names and supplying a value.</li>\n      * </ul>\n      *  The various actions are as follows.\n      * <ul>\n@@ -373,7 +356,7 @@ public static boolean run(JDBCConfiguration conf, String[] args,\n     }\n \n     /**\n-     * Run the tool. Return false if an invalid option was given.\n+     * Run the tool. Returns false if an invalid option was given.\n      */\n     public static boolean run(JDBCConfiguration conf, String[] args,\n         String action)"},{"sha":"90b8cbc5c30b56220ec90cb3472887828f6134f9","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","status":"modified","additions":0,"deletions":8,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/e0a0050e7bec8032ec0160bdf3c955b1e437737c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","raw_url":"https://github.com/apache/openjpa/raw/e0a0050e7bec8032ec0160bdf3c955b1e437737c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java?ref=e0a0050e7bec8032ec0160bdf3c955b1e437737c","patch":"@@ -44,7 +44,6 @@\n import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.jdbc.schema.Index;\n import org.apache.openjpa.jdbc.schema.Schema;\n-import org.apache.openjpa.jdbc.schema.Sequence;\n import org.apache.openjpa.jdbc.schema.Table;\n import org.apache.openjpa.kernel.Filters;\n import org.apache.openjpa.kernel.MixedLockLevels;\n@@ -225,13 +224,6 @@ protected void appendSelect(SQLBuffer selectSQL, Object alias, Select sel,\n         }\n     }\n \n-    public String[] getCreateSequenceSQL(Sequence seq) {\n-        String[] sql = super.getCreateSequenceSQL(seq);\n-        if (seq.getAllocate() > 1)\n-            sql[0] += \" CACHE \" + seq.getAllocate();\n-        return sql;\n-    }\n-\n     @Override\n     protected String getSequencesSQL(String schemaName, String sequenceName) {\n         return getSequencesSQL(DBIdentifier.newSchema(schemaName), "},{"sha":"52da804c424e449ab07a6d1def8c4845e94a7b13","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/e0a0050e7bec8032ec0160bdf3c955b1e437737c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/e0a0050e7bec8032ec0160bdf3c955b1e437737c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java?ref=e0a0050e7bec8032ec0160bdf3c955b1e437737c","patch":"@@ -3400,8 +3400,8 @@ protected StringBuilder comment(StringBuilder buf, String comment) {\n         buf.append(seqName);\n         if (seq.getInitialValue() != 0)\n             buf.append(\" START WITH \").append(seq.getInitialValue());\n-        if (seq.getIncrement() > 1)\n-            buf.append(\" INCREMENT BY \").append(seq.getIncrement());\n+        if ((seq.getIncrement() > 1) || (seq.getAllocate() > 1))\n+            buf.append(\" INCREMENT BY \").append(seq.getIncrement() * seq.getAllocate());\n         return new String[]{ buf.toString() };\n     }\n \n@@ -4359,7 +4359,7 @@ protected Index newIndex(ResultSet idxMeta)\n         }\n     }\n     \n-    /*\n+    /**\n      * Combines partial foreign keys into singular key\n      */\n     protected ForeignKey combineForeignKey(Map<FKMapKey, ForeignKey> fkMap,\n@@ -5252,8 +5252,8 @@ public void deleteStream(JDBCStore store, Select sel) throws SQLException {\n     }\n     \n     /**\n-     * Validate that the given name is no longer than given maximum length.\n-     * If the given name is indeed longer then raises an UserException with the \n+     * Validate that the given name is not longer than given maximum length.\n+     * If the given name is indeed longer then raises a UserException with the \n      * given message key otherwise returns the same name.\n      */\n     final String checkNameLength(String name, int length, String msgKey) {"},{"sha":"3fc8bb85953e7b2335d6444cba32afc4c61212d4","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/FirebirdDictionary.java","status":"modified","additions":3,"deletions":7,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/e0a0050e7bec8032ec0160bdf3c955b1e437737c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/FirebirdDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/e0a0050e7bec8032ec0160bdf3c955b1e437737c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/FirebirdDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/FirebirdDictionary.java?ref=e0a0050e7bec8032ec0160bdf3c955b1e437737c","patch":"@@ -59,11 +59,6 @@\n     protected String createSequenceSQLFB15 = \"CREATE GENERATOR {0}\";\n     protected String createSequenceSQLFB20 = \"CREATE SEQUENCE {0}\";\n     protected String dropSequenceSQLFB15 = \"DROP GENERATOR \";\n-    protected String nextSequenceQueryFB15 =\n-        \"SELECT GEN_ID({0}, 1) FROM RDB$DATABASE\";\n-    protected String nextSequenceQueryFB20 =\n-        \"SELECT NEXT VALUE FOR {0} FROM RDB$DATABASE\";\n-\n     protected String alterSequenceSQL = alterSequenceSQLFB20;\n     protected String createSequenceSQL = createSequenceSQLFB20;\n \n@@ -98,7 +93,9 @@ public FirebirdDictionary() {\n \n         supportsMultipleNontransactionalResultSets = false;\n \n-        nextSequenceQuery = nextSequenceQueryFB20;\n+        // On Firebird 2 the recommended syntax is \"SELECT NEXT VALUE FOR {0} FROM RDB$DATABASE\".\n+        // However, that syntax allows incrementing the sequence value by 1 only.\n+        nextSequenceQuery = \"SELECT GEN_ID({0}, {1}) FROM RDB$DATABASE\";\n         sequenceSQL =\n             \"SELECT NULL AS SEQUENCE_SCHEMA, RDB$GENERATOR_NAME \"\n                 + \"AS SEQUENCE_NAME FROM RDB$GENERATORS \"\n@@ -176,7 +173,6 @@ public void connectedConfiguration(Connection conn) throws SQLException {\n             trimBothFunction = \"LTRIM(RTRIM({0}))\";\n             alterSequenceSQL = alterSequenceSQLFB15;\n             createSequenceSQL = createSequenceSQLFB15;\n-            nextSequenceQuery = nextSequenceQueryFB15;\n         }\n     }\n "},{"sha":"21fcbd13676c1b867cc14c83ec44e23422d54de2","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java","status":"modified","additions":0,"deletions":9,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/e0a0050e7bec8032ec0160bdf3c955b1e437737c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/e0a0050e7bec8032ec0160bdf3c955b1e437737c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java?ref=e0a0050e7bec8032ec0160bdf3c955b1e437737c","patch":"@@ -50,7 +50,6 @@\n import org.apache.openjpa.jdbc.schema.ForeignKey;\n import org.apache.openjpa.jdbc.schema.Index;\n import org.apache.openjpa.jdbc.schema.PrimaryKey;\n-import org.apache.openjpa.jdbc.schema.Sequence;\n import org.apache.openjpa.jdbc.schema.Table;\n import org.apache.openjpa.jdbc.schema.ForeignKey.FKMapKey;\n import org.apache.openjpa.lib.jdbc.DelegatingDatabaseMetaData;\n@@ -996,14 +995,6 @@ else if (\"XMLTYPE\".equalsIgnoreCase(typeName)) {\n         return sql;\n     }\n \n-    @Override\n-    public String[] getCreateSequenceSQL(Sequence seq) {\n-        String[] sql = super.getCreateSequenceSQL(seq);\n-        if (seq.getAllocate() > 1)\n-            sql[0] += \" CACHE \" + seq.getAllocate();\n-        return sql;\n-    }\n-    \n     /**\n      * Return the preferred {@link Types} constant for the given\n      * {@link JavaTypes} or {@link JavaSQLTypes} constant."},{"sha":"551d34aa07e4c362963738b622b7ebe53465a370","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PostgresDictionary.java","status":"modified","additions":0,"deletions":9,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/e0a0050e7bec8032ec0160bdf3c955b1e437737c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PostgresDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/e0a0050e7bec8032ec0160bdf3c955b1e437737c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PostgresDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PostgresDictionary.java?ref=e0a0050e7bec8032ec0160bdf3c955b1e437737c","patch":"@@ -45,7 +45,6 @@\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.kernel.exps.FilterValue;\n import org.apache.openjpa.jdbc.schema.Column;\n-import org.apache.openjpa.jdbc.schema.Sequence;\n import org.apache.openjpa.jdbc.schema.Table;\n import org.apache.openjpa.kernel.Filters;\n import org.apache.openjpa.lib.jdbc.DelegatingConnection;\n@@ -354,14 +353,6 @@ public void indexOf(SQLBuffer buf, FilterValue str, FilterValue find,\n         buf.append(\")\");\n     }\n \n-    @Override\n-    public String[] getCreateSequenceSQL(Sequence seq) {\n-        String[] sql = super.getCreateSequenceSQL(seq);\n-        if (seq.getAllocate() > 1)\n-            sql[0] += \" CACHE \" + seq.getAllocate();\n-        return sql;\n-    }\n-\n     @Override\n     protected boolean supportsDeferredUniqueConstraints() {\n         // Postgres only supports deferred foreign key constraints."}]}

