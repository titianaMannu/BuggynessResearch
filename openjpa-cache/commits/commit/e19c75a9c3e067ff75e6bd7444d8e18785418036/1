{"sha":"e19c75a9c3e067ff75e6bd7444d8e18785418036","node_id":"MDY6Q29tbWl0MjA2MzY0OmUxOWM3NWE5YzNlMDY3ZmY3NWU2YmQ3NDQ0ZDhlMTg3ODU0MTgwMzY=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-08-25T23:22:59Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-08-25T23:22:59Z"},"message":"OPENJPA-1266: JDBC escape syntax for date, time, timestamp\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@807851 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"66e2a5152d9a2a3c3512285c53edfb6f5e910fce","url":"https://api.github.com/repos/apache/openjpa/git/trees/66e2a5152d9a2a3c3512285c53edfb6f5e910fce"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/e19c75a9c3e067ff75e6bd7444d8e18785418036","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/e19c75a9c3e067ff75e6bd7444d8e18785418036","html_url":"https://github.com/apache/openjpa/commit/e19c75a9c3e067ff75e6bd7444d8e18785418036","comments_url":"https://api.github.com/repos/apache/openjpa/commits/e19c75a9c3e067ff75e6bd7444d8e18785418036/comments","author":null,"committer":null,"parents":[{"sha":"f61ff608429d9705eca867b78dc881fb5890a956","url":"https://api.github.com/repos/apache/openjpa/commits/f61ff608429d9705eca867b78dc881fb5890a956","html_url":"https://github.com/apache/openjpa/commit/f61ff608429d9705eca867b78dc881fb5890a956"}],"stats":{"total":192,"additions":190,"deletions":2},"files":[{"sha":"11dd5fb031b00921d063ae51533214592dd1cc09","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Lit.java","status":"modified","additions":9,"deletions":1,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/e19c75a9c3e067ff75e6bd7444d8e18785418036/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Lit.java","raw_url":"https://github.com/apache/openjpa/raw/e19c75a9c3e067ff75e6bd7444d8e18785418036/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Lit.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Lit.java?ref=e19c75a9c3e067ff75e6bd7444d8e18785418036","patch":"@@ -44,6 +44,9 @@\n     public Lit(Object val, int ptype) {\n         _val = val;\n         _ptype = ptype;\n+        if (_ptype == Literal.TYPE_DATE || _ptype == Literal.TYPE_TIME ||\n+            _ptype == Literal.TYPE_TIMESTAMP)\n+            _isRaw = true;\n     }\n \n     public Class getType() {\n@@ -116,7 +119,8 @@ public void appendTo(Select sel, ExpContext ctx, ExpState state,\n             sql.appendValue(((Object[]) lstate.sqlValue)[index], \n                 lstate.getColumn(index));\n         else if (_isRaw) {\n-            if (getParseType() == Literal.TYPE_ENUM) { \n+            int parseType = getParseType();\n+            if (parseType == Literal.TYPE_ENUM) { \n                 StringBuilder value = new StringBuilder();\n                 boolean isOrdinal = false;\n                 if (lstate.sqlValue instanceof Integer)\n@@ -128,6 +132,10 @@ else if (_isRaw) {\n                     value.append(\"'\");\n                 lstate.sqlValue = new Raw(value.toString());\n                 _rawVal = lstate.sqlValue;\n+            } else if (parseType == Literal.TYPE_DATE || parseType == Literal.TYPE_TIME ||\n+                parseType == Literal.TYPE_TIMESTAMP) {\n+                lstate.sqlValue = new Raw(_val.toString());\n+                _rawVal = lstate.sqlValue;\n             } else {\n                 lstate.sqlValue = new Raw(_val instanceof String ? \"'\"+_val+\"'\" : _val.toString());\n                 _rawVal = lstate.sqlValue;"},{"sha":"e4b5c719dc6e47be2f55e30c400cb5c62fdfc3ab","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Literal.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/e19c75a9c3e067ff75e6bd7444d8e18785418036/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Literal.java","raw_url":"https://github.com/apache/openjpa/raw/e19c75a9c3e067ff75e6bd7444d8e18785418036/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Literal.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Literal.java?ref=e19c75a9c3e067ff75e6bd7444d8e18785418036","patch":"@@ -35,6 +35,9 @@\n     public static final int TYPE_CLASS = 5;\n     public static final int TYPE_ENUM = 6;\n     public static final int TYPE_COLLECTION = 7;\n+    public static final int TYPE_DATE = 8;\n+    public static final int TYPE_TIME = 9;\n+    public static final int TYPE_TIMESTAMP = 10;\n \n     /**\n      * The value of this literal."},{"sha":"80617590c55efde0fa27bd1ab55f769c65adb322","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/e19c75a9c3e067ff75e6bd7444d8e18785418036/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","raw_url":"https://github.com/apache/openjpa/raw/e19c75a9c3e067ff75e6bd7444d8e18785418036/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java?ref=e19c75a9c3e067ff75e6bd7444d8e18785418036","patch":"@@ -1375,6 +1375,15 @@ else if (node.getChildCount() == 2\n                 assertQueryExtensions(\"ORDER BY\");\n                 return eval(onlyChild(node));\n \n+            case JJTDATELITERAL:\n+                return factory.newLiteral(node.text, Literal.TYPE_DATE);\n+\n+            case JJTTIMELITERAL:\n+                return factory.newLiteral(node.text, Literal.TYPE_TIME);\n+\n+            case JJTTIMESTAMPLITERAL:    \n+                return factory.newLiteral(node.text, Literal.TYPE_TIMESTAMP);\n+\n             default:\n                 throw parseException(EX_FATAL, \"bad-tree\",\n                     new Object[]{ node }, null);"},{"sha":"b5463f0e1cdc33dadbac005d25663e1d3c49ab33","filename":"openjpa-kernel/src/main/jjtree/org/apache/openjpa/kernel/jpql/JPQL.jjt","status":"modified","additions":42,"deletions":1,"changes":43,"blob_url":"https://github.com/apache/openjpa/blob/e19c75a9c3e067ff75e6bd7444d8e18785418036/openjpa-kernel/src/main/jjtree/org/apache/openjpa/kernel/jpql/JPQL.jjt","raw_url":"https://github.com/apache/openjpa/raw/e19c75a9c3e067ff75e6bd7444d8e18785418036/openjpa-kernel/src/main/jjtree/org/apache/openjpa/kernel/jpql/JPQL.jjt","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/jjtree/org/apache/openjpa/kernel/jpql/JPQL.jjt?ref=e19c75a9c3e067ff75e6bd7444d8e18785418036","patch":"@@ -293,6 +293,24 @@ TOKEN : /* literals */\n \t  )\r\n \t  \"'\"\r\n \t>\r\n+\t| < DATE_LITERAL: \"{d '\" ([\"0\"-\"9\"])([\"0\"-\"9\"])([\"0\"-\"9\"])([\"0\"-\"9\"]) (\"-\") \r\n+\t                   ([\"0\"-\"1\"])([\"0\"-\"9\"]) (\"-\") \r\n+\t                   ([\"0\"-\"3\"])([\"0\"-\"9\"]) \"'}\" \r\n+\t>\r\n+\t| < TIME_LITERAL: \"{t '\" ([\"0\"-\"2\"])([\"0\"-\"9\"]) (\":\") \r\n+\t                   ([\"0\"-\"6\"])([\"0\"-\"9\"]) (\":\") \r\n+\t                   ([\"0\"-\"6\"])([\"0\"-\"9\"]) \"'}\" \r\n+\t>\r\n+\t| < TIMESTAMP_LITERAL: \"{ts '\" ([\"0\"-\"9\"])([\"0\"-\"9\"])([\"0\"-\"9\"])([\"0\"-\"9\"]) (\"-\") \r\n+\t                   ([\"0\"-\"1\"])([\"0\"-\"9\"]) (\"-\") \r\n+\t                   ([\"0\"-\"3\"])([\"0\"-\"9\"]) (\" \")\r\n+\t                   ([\"0\"-\"2\"])([\"0\"-\"9\"]) (\":\") \r\n+\t                   ([\"0\"-\"6\"])([\"0\"-\"9\"]) (\":\") \r\n+\t                   ([\"0\"-\"6\"])([\"0\"-\"9\"]) \r\n+\t                   ((\".\") ([\"0\"-\"9\"]) ([\"0\"-\"9\"])? ([\"0\"-\"9\"])? ([\"0\"-\"9\"])?\r\n+\t                   ([\"0\"-\"9\"])? ([\"0\"-\"9\"])? )?\r\n+\t                   \"'}\" \r\n+\t>\r\n }\r\n \r\n TOKEN [ IGNORE_CASE ]: /* boolean literals can be case-insensitive */\r\n@@ -1105,6 +1123,7 @@ void datetime_expression() : { }\n \r\n void datetime_primary() : { }\r\n {\r\n+    date_literal() | time_literal() | timestamp_literal() |\r\n \tLOOKAHEAD(path()) path() | functions_returning_datetime() | input_parameter() | aggregate_select_expression()\r\n \t| LOOKAHEAD(qualified_path()) qualified_path()\r\n \t| LOOKAHEAD(general_identification_variable()) general_identification_variable()\r\n@@ -1408,7 +1427,8 @@ void path_component() #IDENTIFICATIONVARIABLE :\n \r\n void literal() : { }\r\n {\r\n-\tnumeric_literal() | boolean_literal() | string_literal() | enum_literal()\r\n+\tnumeric_literal() | boolean_literal() | string_literal() | enum_literal() | date_literal() |\r\n+\ttime_literal() | timestamp_literal()\r\n }\r\n \r\n \r\n@@ -1446,6 +1466,27 @@ void string_literal() #STRINGLITERAL :\n }\r\n \r\n \r\n+void date_literal() #DATELITERAL :\r\n+{ Token t; }\r\n+{\r\n+\tt = <DATE_LITERAL> { jjtThis.setToken (t); }\r\n+}\r\n+\r\n+\r\n+void time_literal() #TIMELITERAL :\r\n+{ Token t; }\r\n+{\r\n+\tt = <TIME_LITERAL> { jjtThis.setToken (t); }\r\n+}\r\n+\r\n+\r\n+void timestamp_literal() #TIMESTAMPLITERAL :\r\n+{ Token t; }\r\n+{\r\n+\tt = <TIMESTAMP_LITERAL> { jjtThis.setToken (t); }\r\n+}\r\n+\r\n+\r\n void input_parameter() : { }\r\n {\r\n \tnamed_input_parameter() | positional_input_parameter()\r"},{"sha":"6f81264fa72b7718f7f1c78d397cac61673be48d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Employee.java","status":"modified","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/apache/openjpa/blob/e19c75a9c3e067ff75e6bd7444d8e18785418036/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Employee.java","raw_url":"https://github.com/apache/openjpa/raw/e19c75a9c3e067ff75e6bd7444d8e18785418036/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Employee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Employee.java?ref=e19c75a9c3e067ff75e6bd7444d8e18785418036","patch":"@@ -18,11 +18,15 @@\n  */\n package org.apache.openjpa.persistence.query;\n \n+import java.util.Date;\n+\n import javax.persistence.Entity;\n import javax.persistence.Id;\n import javax.persistence.NamedQueries;\n import javax.persistence.NamedQuery;\n import javax.persistence.Table;\n+import javax.persistence.Temporal;\n+import javax.persistence.TemporalType;\n \n @NamedQueries( { \n     @NamedQuery(name = \"Employee.findByName\", \n@@ -41,7 +45,16 @@\n     private long someLong;\n \n     private int statusId; \n+    \n+    @Temporal(TemporalType.DATE)\n+    private Date hireDate;\n+    \n+    @Temporal(TemporalType.TIME)\n+    private Date hireTime;\n \n+    @Temporal(TemporalType.TIMESTAMP)\n+    private Date hireTimestamp;\n+    \n     public int getStatusId() {\n         return statusId;\n     }\n@@ -74,5 +87,28 @@ public void setSomeLong(long someLong) {\n         this.someLong = someLong;\n     }\n \n+    public Date getHireDate() {\n+        return hireDate;\n+    }\n+    \n+    public void setHireDate(Date hireDate) {\n+        this.hireDate = hireDate;\n+    }\n+\n+    public Date getHireTime() {\n+        return hireTime;\n+    }\n+    \n+    public void setHireTime(Date hireTime) {\n+        this.hireTime = hireTime;\n+    }\n+    \n+    public Date getHireTimestamp() {\n+        return hireTimestamp;\n+    }\n+    \n+    public void setHireTimestamp(Date hireTimestamp) {\n+        this.hireTimestamp = hireTimestamp;\n+    }\n     \n }"},{"sha":"3d107e0e1f643b9d0538850978d5fbb27444b460","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestJDBCEscapeDate.java","status":"added","additions":91,"deletions":0,"changes":91,"blob_url":"https://github.com/apache/openjpa/blob/e19c75a9c3e067ff75e6bd7444d8e18785418036/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestJDBCEscapeDate.java","raw_url":"https://github.com/apache/openjpa/raw/e19c75a9c3e067ff75e6bd7444d8e18785418036/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestJDBCEscapeDate.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestJDBCEscapeDate.java?ref=e19c75a9c3e067ff75e6bd7444d8e18785418036","patch":"@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.query;\n+\n+import java.util.Date;\n+import java.util.List;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityTransaction;\n+import javax.persistence.Query;\n+\n+import junit.framework.Assert;\n+\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+/**\n+ * Test JDBC escape syntax for date, time, and timestamp literals\n+ */\n+public class TestJDBCEscapeDate extends SingleEMFTestCase {\n+\n+    public void setUp() {\n+        setUp(Employee.class, DROP_TABLES);\n+    }\n+\n+    public void testJDBCEscape() {\n+        EntityManager em = emf.createEntityManager();\n+        EntityTransaction tran = em.getTransaction();\n+        Employee e = new Employee();\n+        e.setEmpId(1);\n+        e.setName(\"name1\");\n+        e.setHireDate(new Date());\n+        e.setHireTime(new Date());\n+        e.setHireTimestamp(new Date());\n+        em.persist(e);\n+        tran.begin();\n+        em.flush();\n+        tran.commit();\n+        em.clear();\n+        \n+        String[] jpql = {\n+            \"select a from Employee a where a.hireDate >= {d '2009-08-25'}\",\n+            \"select a from Employee a where a.hireTime >= {t '00:00:00'}\",\n+            \"select a from Employee a where a.hireTimestamp >= {ts '2009-08-25 00:00:00'}\",\n+            \"select a from Employee a where a.hireTimestamp >= {ts '2009-08-25 00:00:00.1'}\",\n+            \"select a from Employee a where a.hireTimestamp >= {ts '2009-08-25 00:00:00.11'}\",\n+            \"select a from Employee a where a.hireTimestamp >= {ts '2009-08-25 00:00:00.111'}\",\n+            \"select a from Employee a where a.hireTimestamp >= {ts '2009-08-25 00:00:00.1111'}\",\n+            \"select a from Employee a where a.hireTimestamp >= {ts '2009-08-25 00:00:00.11111'}\",\n+            \"select a from Employee a where a.hireTimestamp >= {ts '2009-08-25 00:00:00.111111'}\",\n+            \"select {t '00:00:00'}, a.empId from Employee a\",\n+        };\n+\n+        for (int i = 0; i < jpql.length; i++) {\n+            Query q = em.createQuery(jpql[i]);\n+            List results = q.getResultList();\n+            Assert.assertEquals(1, results.size());\n+        }\n+\n+        String wrongTs = \"select a from Employee a where a.hireTimestamp > {ts '2009-08-25 00:00:00.1111111'}\";\n+        try {\n+            Query q = em.createQuery(wrongTs);\n+            List results = q.getResultList();\n+            Assert.fail();\n+        } catch (Exception ex) {\n+        }\n+\n+        em.getTransaction().begin();\n+        String update = \"update Employee a set a.hireTimestamp = {ts '2009-08-25 00:00:00.111111'} where a.empId = 1\";\n+        Query q = em.createQuery(update);\n+        int updateCnt = q.executeUpdate();\n+        em.getTransaction().commit();\n+        Assert.assertEquals(1, updateCnt);\n+        em.close();\n+    }\n+}"}]}

