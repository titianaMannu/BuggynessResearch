{"sha":"e1c4c92888ce7e8559a1e1ea74ec7513226b7e70","node_id":"MDY6Q29tbWl0MjA2MzY0OmUxYzRjOTI4ODhjZTdlODU1OWExZTFlYTc0ZWM3NTEzMjI2YjdlNzA=","commit":{"author":{"name":"Dianne E. Richards","email":"dianner@apache.org","date":"2012-03-08T18:02:40Z"},"committer":{"name":"Dianne E. Richards","email":"dianner@apache.org","date":"2012-03-08T18:02:40Z"},"message":"OPENJPA-2142 test case\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1298490 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"70458379cc06c64a21901ec98e33b512b6434f68","url":"https://api.github.com/repos/apache/openjpa/git/trees/70458379cc06c64a21901ec98e33b512b6434f68"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/e1c4c92888ce7e8559a1e1ea74ec7513226b7e70","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/e1c4c92888ce7e8559a1e1ea74ec7513226b7e70","html_url":"https://github.com/apache/openjpa/commit/e1c4c92888ce7e8559a1e1ea74ec7513226b7e70","comments_url":"https://api.github.com/repos/apache/openjpa/commits/e1c4c92888ce7e8559a1e1ea74ec7513226b7e70/comments","author":null,"committer":null,"parents":[{"sha":"ecf492ac461b032caf5486b48d2693ea32e5edc2","url":"https://api.github.com/repos/apache/openjpa/commits/ecf492ac461b032caf5486b48d2693ea32e5edc2","html_url":"https://github.com/apache/openjpa/commit/ecf492ac461b032caf5486b48d2693ea32e5edc2"}],"stats":{"total":529,"additions":529,"deletions":0},"files":[{"sha":"dc3ca38d3f0a4dedbf98ab899044a6b76963470e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/merge/Child.java","status":"added","additions":98,"deletions":0,"changes":98,"blob_url":"https://github.com/apache/openjpa/blob/e1c4c92888ce7e8559a1e1ea74ec7513226b7e70/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/merge/Child.java","raw_url":"https://github.com/apache/openjpa/raw/e1c4c92888ce7e8559a1e1ea74ec7513226b7e70/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/merge/Child.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/merge/Child.java?ref=e1c4c92888ce7e8559a1e1ea74ec7513226b7e70","patch":"@@ -0,0 +1,98 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.merge;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.Id;\n+import javax.persistence.IdClass;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.JoinColumns;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Table;\n+\n+@Entity\n+@IdClass(ChildPK.class)\n+@Table(name = \"MRG_CHILD\")\n+public class Child implements Serializable {\n+  private static final long serialVersionUID = 1L;\n+\n+  @Id\n+  @JoinColumns({ @JoinColumn(name = \"KEY_1\", referencedColumnName = \"KEY_1\"),\n+      @JoinColumn(name = \"KEY_2\", referencedColumnName = \"KEY_2\") })\n+  @ManyToOne\n+  private Parent parent;\n+\n+  @Id\n+  @Column(name = \"KEY_3\")\n+  private Integer childKey;\n+\n+  @OneToMany(mappedBy = \"child\", orphanRemoval = true, cascade = CascadeType.ALL, fetch = FetchType.EAGER)\n+  private Collection<GrandChild> grandChilds = new ArrayList<GrandChild>();\n+\n+  public Parent getParent() { return parent;  }\n+  public void setParent(Parent parent) { this.parent = parent;  }\n+  public Integer getChildKey() { return childKey; }\n+  public void setChildKey(Integer childKey) { this.childKey = childKey; }\n+  public Collection<GrandChild> getGrandChilds() {  return grandChilds;  }\n+  public void setGrandChilds(Collection<GrandChild> grandChilds) {   this.grandChilds = grandChilds; }\n+@Override\n+public int hashCode() {\n+\tfinal int prime = 31;\n+\tint result = 1;\n+\tresult = prime * result + ((childKey == null) ? 0 : childKey.hashCode());\n+\tresult = prime * result\n+\t\t\t+ ((grandChilds == null) ? 0 : grandChilds.hashCode());\n+\tresult = prime * result + ((parent == null) ? 0 : parent.hashCode());\n+\treturn result;\n+}\n+@Override\n+public boolean equals(Object obj) {\n+\tif (this == obj)\n+\t\treturn true;\n+\tif (obj == null)\n+\t\treturn false;\n+\tif (getClass() != obj.getClass())\n+\t\treturn false;\n+\tChild other = (Child) obj;\n+\tif (childKey == null) {\n+\t\tif (other.childKey != null)\n+\t\t\treturn false;\n+\t} else if (!childKey.equals(other.childKey))\n+\t\treturn false;\n+\tif (grandChilds == null) {\n+\t\tif (other.grandChilds != null)\n+\t\t\treturn false;\n+\t} else if (!grandChilds.equals(other.grandChilds))\n+\t\treturn false;\n+\tif (parent == null) {\n+\t\tif (other.parent != null)\n+\t\t\treturn false;\n+\t} else if (!parent.equals(other.parent))\n+\t\treturn false;\n+\treturn true;\n+}  \n+}"},{"sha":"f0b3be6fe22945daa3574773b15275f16e8dcd42","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/merge/ChildPK.java","status":"added","additions":82,"deletions":0,"changes":82,"blob_url":"https://github.com/apache/openjpa/blob/e1c4c92888ce7e8559a1e1ea74ec7513226b7e70/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/merge/ChildPK.java","raw_url":"https://github.com/apache/openjpa/raw/e1c4c92888ce7e8559a1e1ea74ec7513226b7e70/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/merge/ChildPK.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/merge/ChildPK.java?ref=e1c4c92888ce7e8559a1e1ea74ec7513226b7e70","patch":"@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.merge;\n+\n+import java.io.Serializable;\n+\n+public class ChildPK implements Serializable{\n+  private static final long serialVersionUID = 1L;\n+\n+  private ParentPK parent;\n+\n+  private Integer childKey;\n+\n+  public ParentPK getParent(){ return parent; }\n+  public void setParent(ParentPK parent) {    this.parent = parent; }\n+  public Integer getChildKey() {   return childKey;  }\n+  public void setChildKey(Integer childKey)  {    this.childKey = childKey;  }\n+\n+  /**\n+   * {@inheritDoc}\n+   * \n+   * @see java.lang.Object#hashCode()\n+   */\n+  @Override\n+  public int hashCode()\n+  {\n+    final int prime = 31;\n+    int result = 1;\n+    result = prime * result + ((childKey == null) ? 0 : childKey.hashCode());\n+    result = prime * result + ((parent == null) ? 0 : parent.hashCode());\n+    return result;\n+  }\n+\n+  /**\n+   * {@inheritDoc}\n+   * \n+   * @see java.lang.Object#equals(java.lang.Object)\n+   */\n+  @Override\n+  public boolean equals(Object obj)\n+  {\n+    if (this == obj)\n+      return true;\n+    if (obj == null)\n+      return false;\n+    if (getClass() != obj.getClass())\n+      return false;\n+    ChildPK other = (ChildPK) obj;\n+    if (childKey == null)\n+    {\n+      if (other.childKey != null)\n+        return false;\n+    }\n+    else if (!childKey.equals(other.childKey))\n+      return false;\n+    if (parent == null)\n+    {\n+      if (other.parent != null)\n+        return false;\n+    }\n+    else if (!parent.equals(other.parent))\n+      return false;\n+    return true;\n+  }\n+\n+}"},{"sha":"03209399ddad58b3cd6438f1ac7f796bb4f82079","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/merge/GrandChild.java","status":"added","additions":67,"deletions":0,"changes":67,"blob_url":"https://github.com/apache/openjpa/blob/e1c4c92888ce7e8559a1e1ea74ec7513226b7e70/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/merge/GrandChild.java","raw_url":"https://github.com/apache/openjpa/raw/e1c4c92888ce7e8559a1e1ea74ec7513226b7e70/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/merge/GrandChild.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/merge/GrandChild.java?ref=e1c4c92888ce7e8559a1e1ea74ec7513226b7e70","patch":"@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.merge;\n+\n+import java.io.Serializable;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.JoinColumns;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name = \"MRG_GRANDCHILD\")\n+public class GrandChild implements Serializable {\n+  private static final long serialVersionUID = 1L;\n+\n+  @Id\n+  @JoinColumns({ @JoinColumn(name = \"KEY_1\", referencedColumnName = \"KEY_1\"),\n+      @JoinColumn(name = \"KEY_2\", referencedColumnName = \"KEY_2\"),\n+      @JoinColumn(name = \"KEY_3\", referencedColumnName = \"KEY_3\") })\n+  @ManyToOne\n+  private Child child;\n+\n+  public Child getChild() { return child; }\n+  public void setChild(Child child) {   this.child = child;  }\n+@Override\n+public int hashCode() {\n+\tfinal int prime = 31;\n+\tint result = 1;\n+\tresult = prime * result + ((child == null) ? 0 : child.hashCode());\n+\treturn result;\n+}\n+@Override\n+public boolean equals(Object obj) {\n+\tif (this == obj)\n+\t\treturn true;\n+\tif (obj == null)\n+\t\treturn false;\n+\tif (getClass() != obj.getClass())\n+\t\treturn false;\n+\tGrandChild other = (GrandChild) obj;\n+\tif (child == null) {\n+\t\tif (other.child != null)\n+\t\t\treturn false;\n+\t} else if (!child.equals(other.child))\n+\t\treturn false;\n+\treturn true;\n+}  \n+}"},{"sha":"89cc203f7785a32139dddad9eefed5da668f2375","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/merge/Parent.java","status":"added","additions":94,"deletions":0,"changes":94,"blob_url":"https://github.com/apache/openjpa/blob/e1c4c92888ce7e8559a1e1ea74ec7513226b7e70/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/merge/Parent.java","raw_url":"https://github.com/apache/openjpa/raw/e1c4c92888ce7e8559a1e1ea74ec7513226b7e70/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/merge/Parent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/merge/Parent.java?ref=e1c4c92888ce7e8559a1e1ea74ec7513226b7e70","patch":"@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.merge;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.Id;\n+import javax.persistence.IdClass;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Table;\n+\n+@Entity\n+@IdClass(ParentPK.class)\n+@Table(name = \"MRG_PARENT\")\n+public class Parent implements Serializable {\n+  private static final long serialVersionUID = 1L;\n+\n+  @Id\n+  @Column(name = \"KEY_1\")\n+  private String key1 = \"00000000000000000000000000000000\";\n+\n+  @Id\n+  @Column(name = \"KEY_2\")\n+  private Integer key2;\n+\n+  @OneToMany(mappedBy = \"parent\", orphanRemoval = true, cascade = CascadeType.ALL, fetch = FetchType.EAGER)\n+  private Collection<Child> childs = new ArrayList<Child>();\n+\n+  public String getKey1() { return key1;  }\n+  public void setKey1(String key1) { this.key1 = key1;  }\n+  public Integer getKey2() { return key2;  }\n+  public void setKey2(Integer key2) { this.key2 = key2;  }\n+  public Collection<Child> getChilds() { return childs;  }\n+  public void setChilds(Collection<Child> childs) { this.childs = childs;  }\n+@Override\n+public int hashCode() {\n+\tfinal int prime = 31;\n+\tint result = 1;\n+\tresult = prime * result + ((childs == null) ? 0 : childs.hashCode());\n+\tresult = prime * result + ((key1 == null) ? 0 : key1.hashCode());\n+\tresult = prime * result + ((key2 == null) ? 0 : key2.hashCode());\n+\treturn result;\n+}\n+@Override\n+public boolean equals(Object obj) {\n+\tif (this == obj)\n+\t\treturn true;\n+\tif (obj == null)\n+\t\treturn false;\n+\tif (getClass() != obj.getClass())\n+\t\treturn false;\n+\tParent other = (Parent) obj;\n+\tif (childs == null) {\n+\t\tif (other.childs != null)\n+\t\t\treturn false;\n+\t} else if (!childs.equals(other.childs))\n+\t\treturn false;\n+\tif (key1 == null) {\n+\t\tif (other.key1 != null)\n+\t\t\treturn false;\n+\t} else if (!key1.equals(other.key1))\n+\t\treturn false;\n+\tif (key2 == null) {\n+\t\tif (other.key2 != null)\n+\t\t\treturn false;\n+\t} else if (!key2.equals(other.key2))\n+\t\treturn false;\n+\treturn true;\n+}\n+  \n+  \n+}"},{"sha":"e5f0b1e567a29c05ff6c0e5365c8c22188afbd80","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/merge/ParentPK.java","status":"added","additions":92,"deletions":0,"changes":92,"blob_url":"https://github.com/apache/openjpa/blob/e1c4c92888ce7e8559a1e1ea74ec7513226b7e70/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/merge/ParentPK.java","raw_url":"https://github.com/apache/openjpa/raw/e1c4c92888ce7e8559a1e1ea74ec7513226b7e70/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/merge/ParentPK.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/merge/ParentPK.java?ref=e1c4c92888ce7e8559a1e1ea74ec7513226b7e70","patch":"@@ -0,0 +1,92 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.merge;\n+\n+import java.io.Serializable;\n+\n+\n+public class ParentPK implements Serializable {\n+  private static final long serialVersionUID = 1L;\n+\n+  private String key1;\n+\n+  private Integer key2;\n+\n+  public ParentPK()  {\n+    this.key1 = \"00000000000000000000000000000000\";\n+  }\n+\n+  public ParentPK(Integer key2)  {\n+    this();\n+    this.key2 = key2;\n+  }\n+\n+  public String getKey1()  {    return key1;  }\n+  public void setKey1(String key1)  {    this.key1 = key1;  }\n+  public Integer getKey2()  {    return key2;  }\n+  public void setKey2(Integer key2)  {    this.key2 = key2;  }\n+\n+  /**\n+   * {@inheritDoc}\n+   * \n+   * @see java.lang.Object#hashCode()\n+   */\n+  @Override\n+  public int hashCode()\n+  {\n+    final int prime = 31;\n+    int result = 1;\n+    result = prime * result + ((key1 == null) ? 0 : key1.hashCode());\n+    result = prime * result + ((key2 == null) ? 0 : key2.hashCode());\n+    return result;\n+  }\n+\n+  /**\n+   * {@inheritDoc}\n+   * \n+   * @see java.lang.Object#equals(java.lang.Object)\n+   */\n+  @Override\n+  public boolean equals(Object obj)\n+  {\n+    if (this == obj)\n+      return true;\n+    if (obj == null)\n+      return false;\n+    if (getClass() != obj.getClass())\n+      return false;\n+    ParentPK other = (ParentPK) obj;\n+    if (key1 == null)\n+    {\n+      if (other.key1 != null)\n+        return false;\n+    }\n+    else if (!key1.equals(other.key1))\n+      return false;\n+    if (key2 == null)\n+    {\n+      if (other.key2 != null)\n+        return false;\n+    }\n+    else if (!key2.equals(other.key2))\n+      return false;\n+    return true;\n+  }\n+\n+}"},{"sha":"8031cd82530aabfcf37eff971c5f58bc242a6078","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/merge/TestMergeNew.java","status":"added","additions":96,"deletions":0,"changes":96,"blob_url":"https://github.com/apache/openjpa/blob/e1c4c92888ce7e8559a1e1ea74ec7513226b7e70/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/merge/TestMergeNew.java","raw_url":"https://github.com/apache/openjpa/raw/e1c4c92888ce7e8559a1e1ea74ec7513226b7e70/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/merge/TestMergeNew.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/merge/TestMergeNew.java?ref=e1c4c92888ce7e8559a1e1ea74ec7513226b7e70","patch":"@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.merge;\n+\n+import java.util.ArrayList;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.test.SQLListenerTestCase;\n+\n+/**\n+ * Test the merge of a new object that has an Entity as\n+ * part of its Id\n+ */\n+public class TestMergeNew extends SQLListenerTestCase {\n+    public void setUp() {\n+        setUp(CLEAR_TABLES, Parent.class,\n+            Child.class, GrandChild.class);\n+        assertNotNull(emf);\n+        populate();\n+    }\n+\n+    public void testMergeParent(){    \t\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();    \n+        ParentPK pk = new ParentPK(1);\n+        pk.setKey1(\"K1\");\n+        Parent parent = em.find(Parent.class, pk);\n+        \n+        Child child = new Child();                                               \n+        child.setChildKey(1);\n+        child.setParent(parent);                                                 \n+       \tparent.getChilds().add(child);                                           \n+        \n+        GrandChild grandChild = new GrandChild();\n+        grandChild.setChild(child);                                              \n+       \tchild.getGrandChilds().add(grandChild);\n+    \n+       \tParent newParent = em.merge(parent);\n+       \tassertNotNull(newParent);\n+       \t\n+       \t// verify key fields\n+       \tassertEquals(newParent.getKey1(), \"K1\");\n+       \tassertEquals(newParent.getKey2(), new Integer(1));\n+       \t\n+       \t// verify Child field\n+       \tArrayList<Child> childs = (ArrayList<Child>)newParent.getChilds();\n+       \tassertNotNull(childs);\n+       \tassertEquals(childs.size(), 1);\n+       \tChild newChild = childs.get(0);\n+       \tassertNotSame(child, newChild);\n+       \tParent childParent = newChild.getParent();\n+       \tassertEquals(childParent, newParent);\n+       \tassertEquals(newChild.getChildKey(), new Integer(1));\n+       \t\n+       \t// verify GrandChild field\n+       \tArrayList<GrandChild> grandChilds = (ArrayList<GrandChild>)newChild.getGrandChilds();\n+       \tassertNotNull(grandChilds);\n+       \tassertEquals(grandChilds.size(), 1);\n+       \tGrandChild newGrandChild = grandChilds.get(0);\n+       \tassertNotSame(newGrandChild, grandChild);\n+       \tChild grandChildChild = newGrandChild.getChild();\n+       \tassertEquals(grandChildChild, newChild);\n+       \t\n+       \tem.getTransaction().commit();\n+       \tem.close();\n+    }\n+    \n+    private void populate() {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        Parent p = new Parent();\n+        p.setKey1(\"K1\");\n+        p.setKey2(1);\n+        em.persist(p);\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+    \n+}"}]}

