{"sha":"e1dccc1872e9fa517851e54dccd5d6e264c5caba","node_id":"MDY6Q29tbWl0MjA2MzY0OmUxZGNjYzE4NzJlOWZhNTE3ODUxZTU0ZGNjZDVkNmUyNjRjNWNhYmE=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-11-20T16:17:57Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-11-20T16:17:57Z"},"message":"OPENJPA-446\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@596731 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7fa2b10ac6577499b1819db5dae89ec6cb8c3163","url":"https://api.github.com/repos/apache/openjpa/git/trees/7fa2b10ac6577499b1819db5dae89ec6cb8c3163"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/e1dccc1872e9fa517851e54dccd5d6e264c5caba","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/e1dccc1872e9fa517851e54dccd5d6e264c5caba","html_url":"https://github.com/apache/openjpa/commit/e1dccc1872e9fa517851e54dccd5d6e264c5caba","comments_url":"https://api.github.com/repos/apache/openjpa/commits/e1dccc1872e9fa517851e54dccd5d6e264c5caba/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"4c2efed65b06efe4dfceb6cf499bd6fe6e4ffd9c","url":"https://api.github.com/repos/apache/openjpa/commits/4c2efed65b06efe4dfceb6cf499bd6fe6e4ffd9c","html_url":"https://github.com/apache/openjpa/commit/4c2efed65b06efe4dfceb6cf499bd6fe6e4ffd9c"}],"stats":{"total":115,"additions":114,"deletions":1},"files":[{"sha":"7bf1b6325eb3cb896725199c021f6497ca922af8","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedStateManager.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/e1dccc1872e9fa517851e54dccd5d6e264c5caba/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedStateManager.java","raw_url":"https://github.com/apache/openjpa/raw/e1dccc1872e9fa517851e54dccd5d6e264c5caba/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedStateManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedStateManager.java?ref=e1dccc1872e9fa517851e54dccd5d6e264c5caba","patch":"@@ -552,7 +552,8 @@ public void settingDoubleField(PersistenceCapable pc, int idx, double cur,\n     public void settingStringField(PersistenceCapable pc, int idx, String cur,\n         String next, int set) {\n         accessingField(idx);\n-        if (cur == next || !_loaded.get(idx))\n+        if (cur == next || (cur != null && cur.equals(next))\n+                || !_loaded.get(idx))\n             return;\n         lock();\n         try {"},{"sha":"d69de9d7c4cf9bdda3438fc2927009f3eefa8958","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/Record.java","status":"added","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/apache/openjpa/blob/e1dccc1872e9fa517851e54dccd5d6e264c5caba/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/Record.java","raw_url":"https://github.com/apache/openjpa/raw/e1dccc1872e9fa517851e54dccd5d6e264c5caba/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/Record.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/Record.java?ref=e1dccc1872e9fa517851e54dccd5d6e264c5caba","patch":"@@ -0,0 +1,34 @@\n+package org.apache.openjpa.persistence.detachment;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+\n+import org.apache.openjpa.persistence.Persistent;\n+\n+@Entity\n+public class Record {\n+\n+    @Persistent\n+    private String content;\n+\n+    @Id\n+    @GeneratedValue\n+    private int id;\n+\n+    public String getContent() {\n+        return content;\n+    }\n+\n+    public void setContent(String content) {\n+        this.content = content;\n+    }\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+}"},{"sha":"a0f84f3026d7390cc69fdfcd127f03ac7043f90d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/TestDetachment.java","status":"added","additions":78,"deletions":0,"changes":78,"blob_url":"https://github.com/apache/openjpa/blob/e1dccc1872e9fa517851e54dccd5d6e264c5caba/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/TestDetachment.java","raw_url":"https://github.com/apache/openjpa/raw/e1dccc1872e9fa517851e54dccd5d6e264c5caba/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/TestDetachment.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/TestDetachment.java?ref=e1dccc1872e9fa517851e54dccd5d6e264c5caba","patch":"@@ -0,0 +1,78 @@\n+package org.apache.openjpa.persistence.detachment;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+public class TestDetachment extends SingleEMFTestCase {\n+\n+    private int id;\n+\n+    public void setUp() {\n+        super.setUp(Record.class);\n+        id = prepare();\n+    }\n+\n+    public void testAttachWithNewString() {\n+        // set up record with string \"default\" as content\n+        Record record = detach(id);\n+\n+        // set different text\n+        record.setContent(\"a text different than the one in the record\");\n+\n+        attach(record);\n+    }\n+\n+    public void testSetSameStringInstance() {\n+        Record record = detach(id);\n+\n+        // same text, same String instance\n+        record.setContent(record.getContent());\n+\n+        attach(record);\n+    }\n+\n+    public void testSetSameString() {\n+        Record record = detach(id);\n+        // same text, different String instance\n+        record.setContent(record.getContent() + \"\");\n+\n+        attach(record);\n+    }\n+\n+    /**\n+     * Creates a new record, sets the content to \"default\" and returns the id.\n+     */\n+    private int prepare() {\n+        EntityManager em = emf.createEntityManager();\n+\n+        em.getTransaction().begin();\n+        Record record = new Record();\n+        record.setContent(\"default\");\n+        em.persist(record);\n+        em.getTransaction().commit();\n+        em.close();\n+        return record.getId();\n+    }\n+\n+    /**\n+     * Fetches the record with the given id and returns a detached instance.\n+     */\n+    private Record detach(int id) {\n+        EntityManager em = emf.createEntityManager();\n+        Record record = em.find(Record.class, id);\n+        em.close(); // detach\n+        return record;\n+    }\n+\n+    /**\n+     * Merges the record into a new persistence context.\n+     */\n+    private void attach(Record record) {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        record = em.merge(record);\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+}"}]}

