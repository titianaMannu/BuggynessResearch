{"sha":"e20afb3134610518c408ce1870446de4c19689d3","node_id":"MDY6Q29tbWl0MjA2MzY0OmUyMGFmYjMxMzQ2MTA1MThjNDA4Y2UxODcwNDQ2ZGU0YzE5Njg5ZDM=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-02-23T18:25:55Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-02-23T18:25:55Z"},"message":"OPENJPA-161\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@511043 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"04834a6bf54f97bc5da3f0b5a629d98d618ed627","url":"https://api.github.com/repos/apache/openjpa/git/trees/04834a6bf54f97bc5da3f0b5a629d98d618ed627"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/e20afb3134610518c408ce1870446de4c19689d3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/e20afb3134610518c408ce1870446de4c19689d3","html_url":"https://github.com/apache/openjpa/commit/e20afb3134610518c408ce1870446de4c19689d3","comments_url":"https://api.github.com/repos/apache/openjpa/commits/e20afb3134610518c408ce1870446de4c19689d3/comments","author":null,"committer":null,"parents":[{"sha":"65bd1f02e386c0e8b11fdd444b7b8caabbe8d081","url":"https://api.github.com/repos/apache/openjpa/commits/65bd1f02e386c0e8b11fdd444b7b8caabbe8d081","html_url":"https://github.com/apache/openjpa/commit/65bd1f02e386c0e8b11fdd444b7b8caabbe8d081"}],"stats":{"total":78,"additions":36,"deletions":42},"files":[{"sha":"ec058932c23a64c9ff9546a2e26e8bbe611b3486","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","status":"modified","additions":36,"deletions":42,"changes":78,"blob_url":"https://github.com/apache/openjpa/blob/e20afb3134610518c408ce1870446de4c19689d3/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","raw_url":"https://github.com/apache/openjpa/raw/e20afb3134610518c408ce1870446de4c19689d3/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java?ref=e20afb3134610518c408ce1870446de4c19689d3","patch":"@@ -37,6 +37,7 @@\n import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.lib.util.ReferenceHashSet;\n+import org.apache.openjpa.lib.util.concurrent.ConcurrentHashMap;\n import org.apache.openjpa.lib.util.concurrent.ConcurrentReferenceHashSet;\n import org.apache.openjpa.lib.util.concurrent.ReentrantLock;\n import org.apache.openjpa.meta.MetaDataRepository;\n@@ -71,7 +72,8 @@\n     private final ReentrantLock _lock = new ReentrantLock();\n \n     // maps global transactions to associated brokers\n-    private transient Map _transactional = new HashMap();\n+    private transient ConcurrentHashMap _transactional\n+        = new ConcurrentHashMap();\n \n     // weak-ref tracking of open brokers\n     private transient Collection _brokers = new ConcurrentReferenceHashSet\n@@ -369,7 +371,7 @@ protected Object readResolve()\n             return factory;\n \n         // reset these transient fields to empty values\n-        _transactional = new HashMap();\n+        _transactional = new ConcurrentHashMap();\n         _brokers = new ConcurrentReferenceHashSet(\n                 ConcurrentReferenceHashSet.WEAK);\n \n@@ -450,20 +452,20 @@ protected BrokerImpl findTransactionalBroker(String user, String pass) {\n             throw new GeneralException(e);\n         }\n \n-        synchronized (_transactional) {\n-            Collection brokers = (Collection) _transactional.get(trans);\n-            if (brokers != null) {\n-                BrokerImpl broker;\n-                for (Iterator itr = brokers.iterator(); itr.hasNext();) {\n-                    broker = (BrokerImpl) itr.next();\n-                    if (StringUtils.equals(broker.getConnectionUserName(),\n-                        user) && StringUtils.equals\n-                        (broker.getConnectionPassword(), pass))\n-                        return broker;\n-                }\n+        Collection brokers = (Collection) _transactional.get(trans);\n+        if (brokers != null) {\n+            // we don't need to synchronize on brokers since one JTA transaction\n+            // can never be active on multiple concurrent threads.\n+            BrokerImpl broker;\n+            for (Iterator itr = brokers.iterator(); itr.hasNext();) {\n+                broker = (BrokerImpl) itr.next();\n+                if (StringUtils.equals(broker.getConnectionUserName(),\n+                    user) && StringUtils.equals\n+                    (broker.getConnectionPassword(), pass))\n+                    return broker;\n             }\n-            return null;\n         }\n+        return null;\n     }\n \n     /**\n@@ -579,18 +581,16 @@ private void assertOpen() {\n      */\n     private void assertNoActiveTransaction() {\n         Collection excs = null;\n-        synchronized (_transactional) {\n-            if (_transactional.isEmpty())\n-                return;\n+        if (_transactional.isEmpty())\n+            return;\n \n-            excs = new ArrayList(_transactional.size());\n-            for (Iterator trans = _transactional.values().iterator();\n-                trans.hasNext();) {\n-                Collection brokers = (Collection) trans.next();\n-                for (Iterator itr = brokers.iterator(); itr.hasNext();) {\n-                    excs.add(new InvalidStateException(_loc.get(\"active\")).\n-                        setFailedObject(itr.next()));\n-                }\n+        excs = new ArrayList(_transactional.size());\n+        for (Iterator trans = _transactional.values().iterator();\n+            trans.hasNext();) {\n+            Collection brokers = (Collection) trans.next();\n+            for (Iterator itr = brokers.iterator(); itr.hasNext();) {\n+                excs.add(new InvalidStateException(_loc.get(\"active\")).\n+                    setFailedObject(itr.next()));\n             }\n         }\n \n@@ -626,20 +626,17 @@ boolean syncWithManagedTransaction(BrokerImpl broker, boolean begin) {\n             // synch broker and trans\n             trans.registerSynchronization(broker);\n \n-            synchronized (_transactional) {\n-                Collection brokers = (Collection) _transactional.get(trans);\n-                if (brokers == null) {\n-                    brokers = new ArrayList(2);\n-                    _transactional.put(trans, brokers);\n-\n-                    // register a callback to remove the trans from the\n-                    // cache when it ends\n-                    trans.registerSynchronization\n-                        (new RemoveTransactionSync(trans));\n-                }\n-                brokers.add(broker);\n+            // we don't need to synchronize on brokers or guard against multiple\n+            // threads using the same trans since one JTA transaction can never\n+            // be active on multiple concurrent threads.\n+            Collection brokers = (Collection) _transactional.get(trans);\n+            if (brokers == null) {\n+                brokers = new ArrayList(2);\n+                _transactional.put(trans, brokers);\n+                trans.registerSynchronization(new RemoveTransactionSync(trans));\n             }\n-\n+            brokers.add(broker);\n+            \n             return true;\n         } catch (OpenJPAException ke) {\n             throw ke;\n@@ -665,10 +662,7 @@ public void beforeCompletion() {\n         }\n \n         public void afterCompletion(int status) {\n-            synchronized (_transactional)\n-\t\t\t{\n-\t\t\t\t_transactional.remove (_trans);\n-\t\t\t}\n+            _transactional.remove (_trans);\n \t\t}\n \t}\n }"}]}

