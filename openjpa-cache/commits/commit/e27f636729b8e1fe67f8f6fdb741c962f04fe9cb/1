{"sha":"e27f636729b8e1fe67f8f6fdb741c962f04fe9cb","node_id":"MDY6Q29tbWl0MjA2MzY0OmUyN2Y2MzY3MjliOGUxZmU2N2Y4ZjZmZGI3NDFjOTYyZjA0ZmU5Y2I=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2006-07-14T00:47:40Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2006-07-14T00:47:40Z"},"message":"more javadoc fixes\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@421775 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0472c9342f61f5da2002cac5e0fa617524a6c0d7","url":"https://api.github.com/repos/apache/openjpa/git/trees/0472c9342f61f5da2002cac5e0fa617524a6c0d7"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/e27f636729b8e1fe67f8f6fdb741c962f04fe9cb","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/e27f636729b8e1fe67f8f6fdb741c962f04fe9cb","html_url":"https://github.com/apache/openjpa/commit/e27f636729b8e1fe67f8f6fdb741c962f04fe9cb","comments_url":"https://api.github.com/repos/apache/openjpa/commits/e27f636729b8e1fe67f8f6fdb741c962f04fe9cb/comments","author":null,"committer":null,"parents":[{"sha":"7cf69d8bccc218d9013f81574916e9ae06afbd68","url":"https://api.github.com/repos/apache/openjpa/commits/7cf69d8bccc218d9013f81574916e9ae06afbd68","html_url":"https://github.com/apache/openjpa/commit/7cf69d8bccc218d9013f81574916e9ae06afbd68"}],"stats":{"total":65,"additions":30,"deletions":35},"files":[{"sha":"879748461e4d34b3232cfa0bc8337f1fb91dc022","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/e27f636729b8e1fe67f8f6fdb741c962f04fe9cb/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","raw_url":"https://github.com/apache/openjpa/raw/e27f636729b8e1fe67f8f6fdb741c962f04fe9cb/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java?ref=e27f636729b8e1fe67f8f6fdb741c962f04fe9cb","patch":"@@ -2112,7 +2112,7 @@ private boolean externalizeDetached() {\n \n     /**\n      * Adds a custom writeObject method that delegates to the\n-     * {@link ObjectInputStream#writeObject} method,\n+     * {@link ObjectOutputStream#defaultWriteObject} method,\n      * but only after calling the internal <code>pcSerializing</code> method.\n      */\n     private void modifyWriteObjectMethod(BCMethod method, boolean full) {"},{"sha":"5c02ed9e6ff7cc1a8f343952112fc04cd574b971","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/event/TransactionEvent.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/e27f636729b8e1fe67f8f6fdb741c962f04fe9cb/openjpa-kernel/src/main/java/org/apache/openjpa/event/TransactionEvent.java","raw_url":"https://github.com/apache/openjpa/raw/e27f636729b8e1fe67f8f6fdb741c962f04fe9cb/openjpa-kernel/src/main/java/org/apache/openjpa/event/TransactionEvent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/event/TransactionEvent.java?ref=e27f636729b8e1fe67f8f6fdb741c962f04fe9cb","patch":"@@ -92,7 +92,7 @@\n     /**\n      * Constructor.\n      *\n-     * @param pm the event source\n+     * @param broker the event source\n      * @param type the event type\n      * @param objs transactional objects\n      * @param addClss classes of added instances"},{"sha":"d5691edf4e6392f744ca838a98d838600bf61ce6","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractLockManager.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/e27f636729b8e1fe67f8f6fdb741c962f04fe9cb/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractLockManager.java","raw_url":"https://github.com/apache/openjpa/raw/e27f636729b8e1fe67f8f6fdb741c962f04fe9cb/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractLockManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractLockManager.java?ref=e27f636729b8e1fe67f8f6fdb741c962f04fe9cb","patch":"@@ -50,7 +50,7 @@ public StoreContext getContext() {\n     }\n \n     /**\n-     * Delegates to {@link #lock} with each element of the collection.\n+     * Delegates to {@link LockManager#lock} with each element of the collection\n      */\n     public void lockAll(Collection sms, int level, int timeout,\n         Object context) {"},{"sha":"11a189089ac7c06fd3385a232c9c2a0c5d2ff3c5","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfiguration.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/e27f636729b8e1fe67f8f6fdb741c962f04fe9cb/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/e27f636729b8e1fe67f8f6fdb741c962f04fe9cb/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfiguration.java?ref=e27f636729b8e1fe67f8f6fdb741c962f04fe9cb","patch":"@@ -225,8 +225,6 @@\n \n     /**\n      * Return the root instances.\n-     *\n-     * @return\n      */\n     public Set getRootClasses();\n "},{"sha":"a107989b34552969bf0a637c01c29759763c0ce1","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchStateImpl.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/e27f636729b8e1fe67f8f6fdb741c962f04fe9cb/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchStateImpl.java","raw_url":"https://github.com/apache/openjpa/raw/e27f636729b8e1fe67f8f6fdb741c962f04fe9cb/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchStateImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchStateImpl.java?ref=e27f636729b8e1fe67f8f6fdb741c962f04fe9cb","patch":"@@ -114,7 +114,6 @@ public boolean requiresLoad(OpenJPAStateManager sm, FieldMetaData fm) {\n      * Get the recusion depth for the given field.\n      *\n      * @param fm is the field to look for\n-     * @param depths is the map of field to integer depth.\n      * @return 0 if the field does not appear in the given map.\n      */\n     protected int getRecursionDepth(FieldMetaData fm) {"},{"sha":"727a88edf64a527f44e5eae6f3d6b6b957cf1789","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FindCallbacks.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/e27f636729b8e1fe67f8f6fdb741c962f04fe9cb/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FindCallbacks.java","raw_url":"https://github.com/apache/openjpa/raw/e27f636729b8e1fe67f8f6fdb741c962f04fe9cb/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FindCallbacks.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FindCallbacks.java?ref=e27f636729b8e1fe67f8f6fdb741c962f04fe9cb","patch":"@@ -24,8 +24,8 @@\n public interface FindCallbacks {\n \n     /**\n-     * Process find argument. Throw proper {@link OpenJPAException}\n-     * for illegal value.\n+     * Process find argument. Throw proper \n+     * {@link org.apache.openjpa.util.OpenJPAException} for illegal value.\n      *\n      * @return the id to look up, or null to ignore this argument\n      */"},{"sha":"a7d40311512c3cf3262edb4c4ecc7bc9465a3fe1","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/LockManager.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/e27f636729b8e1fe67f8f6fdb741c962f04fe9cb/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/LockManager.java","raw_url":"https://github.com/apache/openjpa/raw/e27f636729b8e1fe67f8f6fdb741c962f04fe9cb/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/LockManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/LockManager.java?ref=e27f636729b8e1fe67f8f6fdb741c962f04fe9cb","patch":"@@ -60,8 +60,8 @@\n      * to the persistence context, if any; lock managers\n      * specific to a certain back end may be able to take\n      * advantage of this; others should ignore it\n-     * @throws LockException if a lock cannot be obtained in the\n-     * given number of milliseconds\n+     * @throws org.apache.openjpa.util.LockException if a lock cannot be \n+     * obtained in the given number of milliseconds\n      * @see OpenJPAStateManager#setLock\n      */\n     public void lock(OpenJPAStateManager sm, int level, int timeout,"},{"sha":"2cb3621e84d71a46a0c29f30c2a4c7739f3d0afb","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/OpCallbacks.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/e27f636729b8e1fe67f8f6fdb741c962f04fe9cb/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/OpCallbacks.java","raw_url":"https://github.com/apache/openjpa/raw/e27f636729b8e1fe67f8f6fdb741c962f04fe9cb/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/OpCallbacks.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/OpCallbacks.java?ref=e27f636729b8e1fe67f8f6fdb741c962f04fe9cb","patch":"@@ -40,8 +40,8 @@\n     public static final int ACT_RUN = 2 << 1;\n \n     /**\n-     * Process operation argument. Throw proper {@link OpenJPAException}\n-     * for illegal value.\n+     * Process operation argument. Throw proper \n+     * {@link org.apache.openjpa.util.OpenJPAException} for illegal value.\n      *\n      * @param op the operation constant\n      * @param arg the object passed to the operation"},{"sha":"2245c42f36ceb4fa9312a3a7f3b8f33facdea6c0","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PCState.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/e27f636729b8e1fe67f8f6fdb741c962f04fe9cb/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PCState.java","raw_url":"https://github.com/apache/openjpa/raw/e27f636729b8e1fe67f8f6fdb741c962f04fe9cb/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PCState.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PCState.java?ref=e27f636729b8e1fe67f8f6fdb741c962f04fe9cb","patch":"@@ -230,7 +230,7 @@ PCState delete(StateManagerImpl context) {\n \n     /**\n      * Perform any actions necesssary and return the proper lifecycle state\n-     * on a call to {@link Broker#makeNontransactional} with the given\n+     * on a call to {@link StoreContext#nontransactional} with the given\n      * instance. Returns the <code>this</code> pointer by default.\n      */\n     PCState nontransactional(StateManagerImpl context) {\n@@ -239,7 +239,7 @@ PCState nontransactional(StateManagerImpl context) {\n \n     /**\n      * Perform any actions necesssary and return the proper lifecycle state\n-     * on a call to {@link Broker#makeNontransactional} with the given\n+     * on a call to {@link StoreContext#nontransactional} with the given\n      * instance. Returns the <code>this</code> pointer by default.\n      */\n     PCState transactional(StateManagerImpl context) {"},{"sha":"1f56d3e5f6abe62580d1cdfbe646672be29b2eb3","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreContext.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/e27f636729b8e1fe67f8f6fdb741c962f04fe9cb/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreContext.java","raw_url":"https://github.com/apache/openjpa/raw/e27f636729b8e1fe67f8f6fdb741c962f04fe9cb/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreContext.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreContext.java?ref=e27f636729b8e1fe67f8f6fdb741c962f04fe9cb","patch":"@@ -148,8 +148,9 @@ public Object find(Object oid, FetchState fetchState, BitSet exclude,\n \n     /**\n      * Return an iterator over all instances of the given type. The iterator\n-     * should be closed with {@link ImplHelper#close} when no longer needed.\n-     * This method delegates to {@link StoreManager#executeExtent}.\n+     * should be closed with {@link org.apache.openjpa.util.ImplHelper#close} \n+     * when no longer needed. This method delegates to \n+     * {@link StoreManager#executeExtent}.\n      */\n     public Iterator extentIterator(Class cls, boolean subs,\n         FetchConfiguration fetch, boolean ignoreChanges);\n@@ -383,7 +384,7 @@ public void transactionalAll(Collection objs, boolean updateVersion,\n      * will have to flush instances of objects for each class of object\n      * modified during the transaction. A side benefit of large transaction\n      * mode is that smaller update messages can be used for\n-     * {@link RemoteCommitEvent}s. Defaults to false.\n+     * {@link org.apache.openjpa.event.RemoteCommitEvent}s. Defaults to false.\n      *\n      * @since 3.4\n      */"},{"sha":"de35945fba7ca74825ad1e91119227a87c5e9ea4","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreQuery.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/e27f636729b8e1fe67f8f6fdb741c962f04fe9cb/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/e27f636729b8e1fe67f8f6fdb741c962f04fe9cb/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreQuery.java?ref=e27f636729b8e1fe67f8f6fdb741c962f04fe9cb","patch":"@@ -231,7 +231,7 @@ public ResultObjectProvider executeQuery(StoreQuery q, Map params,\n          * in memory. If this exeuctor's parent query supports executors on\n          * abstract or interface classes, this method will not be used.\n          *\n-         * @see StoreQuery#supportsAbstractExecutor\n+         * @see StoreQuery#supportsAbstractExecutors\n          */\n         public Object getOrderingValue(StoreQuery q, Object[] params,\n             Object resultObject, int orderIndex);"},{"sha":"8075acb195599f488131bbbff1939a9bc461f395","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/AbstractExpressionBuilder.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/e27f636729b8e1fe67f8f6fdb741c962f04fe9cb/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/AbstractExpressionBuilder.java","raw_url":"https://github.com/apache/openjpa/raw/e27f636729b8e1fe67f8f6fdb741c962f04fe9cb/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/AbstractExpressionBuilder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/AbstractExpressionBuilder.java?ref=e27f636729b8e1fe67f8f6fdb741c962f04fe9cb","patch":"@@ -74,7 +74,6 @@\n      * Constructor.\n      *\n      * @param factory the expression factory to use\n-     * @param meta candidate class metadata\n      * @param resolver used to resolve variables, parameters, and class\n      * names used in the query\n      */"},{"sha":"b38949bb10fcd8c8df2eab95ce1daa334347acde","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/AggregateListener.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/e27f636729b8e1fe67f8f6fdb741c962f04fe9cb/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/AggregateListener.java","raw_url":"https://github.com/apache/openjpa/raw/e27f636729b8e1fe67f8f6fdb741c962f04fe9cb/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/AggregateListener.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/AggregateListener.java?ref=e27f636729b8e1fe67f8f6fdb741c962f04fe9cb","patch":"@@ -53,8 +53,8 @@\n      * @param candidates the candidate objects being evaluated\n      * @param ctx the persistence context\n      * @return the value of the aggregate\n-     * @throws UserException if this aggregate does not support\n-     * in-memory operation\n+     * @throws org.apache.openjpa.util.UserException if this aggregate does not \n+     * support in-memory operation\n      */\n     public Object evaluate(Collection args, Class[] argClasses,\n         Collection candidates, StoreContext ctx);"},{"sha":"f4b7bd3b465e8ed00a7dc928d8cdabdffe9e73b3","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/FilterListener.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/e27f636729b8e1fe67f8f6fdb741c962f04fe9cb/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/FilterListener.java","raw_url":"https://github.com/apache/openjpa/raw/e27f636729b8e1fe67f8f6fdb741c962f04fe9cb/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/FilterListener.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/FilterListener.java?ref=e27f636729b8e1fe67f8f6fdb741c962f04fe9cb","patch":"@@ -69,8 +69,8 @@\n      * @return the value of the extension for this candidate; if\n      * this extension is an expression, this method should\n      * return {@link Boolean#TRUE} or {@link Boolean#FALSE}\n-     * @throws UserException if this extension does not support\n-     * in-memory operation\n+     * @throws org.apache.openjpa.util.UserException if this extension does not \n+     * support in-memory operation\n      */\n     public Object evaluate(Object target, Class targetClass, Object[] args,\n         Class[] argClasses, Object candidate, StoreContext ctx);"},{"sha":"b0dab3360e8332158a0d7d834dd546c2ab429216","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/e27f636729b8e1fe67f8f6fdb741c962f04fe9cb/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","raw_url":"https://github.com/apache/openjpa/raw/e27f636729b8e1fe67f8f6fdb741c962f04fe9cb/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java?ref=e27f636729b8e1fe67f8f6fdb741c962f04fe9cb","patch":"@@ -1577,7 +1577,7 @@ public String toString(String prefix) {\n         /**\n          * Debugging method.\n          *\n-         * @see dump(java.io.PrintStream,String)\n+         * @see #dump(java.io.PrintStream,String)\n          */\n         public void dump(String prefix) {\n             dump(System.out, prefix);"},{"sha":"ca0ddb91be126134156d4b1a91154cce3f9fc75e","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/FetchGroup.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/e27f636729b8e1fe67f8f6fdb741c962f04fe9cb/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FetchGroup.java","raw_url":"https://github.com/apache/openjpa/raw/e27f636729b8e1fe67f8f6fdb741c962f04fe9cb/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FetchGroup.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FetchGroup.java?ref=e27f636729b8e1fe67f8f6fdb741c962f04fe9cb","patch":"@@ -50,7 +50,7 @@\n     /**\n      * Supply immutable name.\n      *\n-     * @param must not by null or empty.\n+     * @param name must not by null or empty.\n      */\n     FetchGroup(ClassMetaData cm, String name) {\n         super();\n@@ -94,7 +94,6 @@ public void addInclude(FetchGroup fg) {\n      * @param fg\n      * @param recurse if true then recursively checks within the included\n      * fecth groups. Otherwise just checks within direct includes.\n-     * @return\n      */\n     public boolean includes(FetchGroup fg, boolean recurse) {\n         if (_includes == null)"},{"sha":"42c1372ee1ffa4ecb5d3b8e6982dc899be9aa7c6","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ImplHelper.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/e27f636729b8e1fe67f8f6fdb741c962f04fe9cb/openjpa-kernel/src/main/java/org/apache/openjpa/util/ImplHelper.java","raw_url":"https://github.com/apache/openjpa/raw/e27f636729b8e1fe67f8f6fdb741c962f04fe9cb/openjpa-kernel/src/main/java/org/apache/openjpa/util/ImplHelper.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ImplHelper.java?ref=e27f636729b8e1fe67f8f6fdb741c962f04fe9cb","patch":"@@ -251,7 +251,6 @@ public static void close(Object o) {\n      *\n      * @param type the class to test\n      * @return true if the class is manageable.\n-     * @param conf the configuration that defines the current context\n      */\n     public static boolean isManagedType(Class type) {\n         return PersistenceCapable.class.isAssignableFrom(type);\n@@ -265,5 +264,5 @@ public static boolean isManagedType(Class type) {\n      */\n     public static boolean isManageable(Object instance) {\n         return instance instanceof PersistenceCapable;\n-\t}\n+    }\n }"},{"sha":"a94767289237061a054abffca6b46f9b79336e2f","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/StringDistance.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/e27f636729b8e1fe67f8f6fdb741c962f04fe9cb/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/StringDistance.java","raw_url":"https://github.com/apache/openjpa/raw/e27f636729b8e1fe67f8f6fdb741c962f04fe9cb/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/StringDistance.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/StringDistance.java?ref=e27f636729b8e1fe67f8f6fdb741c962f04fe9cb","patch":"@@ -111,7 +111,7 @@ public static String getClosestLevenshteinDistance(String str,\n      * @see #getLevenshteinDistance\n      */\n     public static String getClosestLevenshteinDistance(String str,\n-        Collection candidates, int threshhold) {\n+        Collection candidates, int threshold) {\n         if (candidates == null || candidates.isEmpty())\n             return null;\n \n@@ -128,7 +128,7 @@ public static String getClosestLevenshteinDistance(String str,\n         }\n \n         // return the lowest close string only if we surpass the threshhold\n-        if (minValue <= threshhold)\n+        if (minValue <= threshold)\n             return minString;\n         else\n             return null;"},{"sha":"3068111d7c82956953dd6e52de4a62c2ede9ca52","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ConcurrentHashMap.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/e27f636729b8e1fe67f8f6fdb741c962f04fe9cb/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ConcurrentHashMap.java","raw_url":"https://github.com/apache/openjpa/raw/e27f636729b8e1fe67f8f6fdb741c962f04fe9cb/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ConcurrentHashMap.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ConcurrentHashMap.java?ref=e27f636729b8e1fe67f8f6fdb741c962f04fe9cb","patch":"@@ -287,7 +287,7 @@ public Object get(Object key) {\n      * Returns <tt>true</tt> if this map contains a mapping for the\n      * specified key.\n      *\n-     * @param keyThe key whose presence in this map is to be tested\n+     * @param key The key whose presence in this map is to be tested\n      * @return <tt>true</tt> if this map contains a mapping for the specified\n      * key.\n      */"},{"sha":"ee872e4422f830f622f509d33b050ee07696ecbc","filename":"openjpa-lib/src/test/java/org/apache/openjpa/lib/test/AbstractTestCase.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/e27f636729b8e1fe67f8f6fdb741c962f04fe9cb/openjpa-lib/src/test/java/org/apache/openjpa/lib/test/AbstractTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/e27f636729b8e1fe67f8f6fdb741c962f04fe9cb/openjpa-lib/src/test/java/org/apache/openjpa/lib/test/AbstractTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/test/AbstractTestCase.java?ref=e27f636729b8e1fe67f8f6fdb741c962f04fe9cb","patch":"@@ -548,9 +548,9 @@ public void mttest(String title, final int threads, final int iterations,\n      * error message\r\n      * @param serialCount the number of times to run the method\r\n      * serially before spawning threads.\r\n-     * @param thread the number of Threads to run in\r\n+     * @param threads the number of Threads to run in\r\n      * @param iterations the number of times the method should\r\n-     * @param runnner the VolatileRunnable that will execute\r\n+     * @param runner the VolatileRunnable that will execute\r\n      * the actual test from within the Thread.\r\n      * @throws ThreadingException if an errors occur in\r\n      * any of the Threads. The actual exceptions\r\n@@ -766,8 +766,8 @@ public void sleepRandom(int max) {\n      * <p/>\r\n      * <strong>Warning</strong> this method should be used sparingly,\r\n      * and only when you expect that a timeout will <strong>not</strong>\r\n-     * occur. It utilized the deprecated {@link Thread.stop} and\r\n-     * {@link Thread.interrupt} methods, which can leave monitors in an\r\n+     * occur. It utilized the deprecated {@link Thread#stop()} and\r\n+     * {@link Thread#interrupt} methods, which can leave monitors in an\r\n      * invalid state. It is only used because it provides more\r\n      * meaningful information than just seeing that the entire autobuild\r\n      * timed out.\r"}]}

