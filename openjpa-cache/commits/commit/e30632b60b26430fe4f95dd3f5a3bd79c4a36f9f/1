{"sha":"e30632b60b26430fe4f95dd3f5a3bd79c4a36f9f","node_id":"MDY6Q29tbWl0MjA2MzY0OmUzMDYzMmI2MGIyNjQzMGZlNGY5NWRkM2Y1YTNiZDc5YzRhMzZmOWY=","commit":{"author":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-10-02T17:39:28Z"},"committer":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-10-02T17:39:28Z"},"message":"Trying a new approach to automatic enhancement in a container.  Might have to\nrevert.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@452141 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"230185ef39d412f8cbadf4b5c6e1ff592db5084d","url":"https://api.github.com/repos/apache/openjpa/git/trees/230185ef39d412f8cbadf4b5c6e1ff592db5084d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/e30632b60b26430fe4f95dd3f5a3bd79c4a36f9f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/e30632b60b26430fe4f95dd3f5a3bd79c4a36f9f","html_url":"https://github.com/apache/openjpa/commit/e30632b60b26430fe4f95dd3f5a3bd79c4a36f9f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/e30632b60b26430fe4f95dd3f5a3bd79c4a36f9f/comments","author":null,"committer":null,"parents":[{"sha":"bc9422ea5d04f5432989a973b94771cd864a9b50","url":"https://api.github.com/repos/apache/openjpa/commits/bc9422ea5d04f5432989a973b94771cd864a9b50","html_url":"https://github.com/apache/openjpa/commit/bc9422ea5d04f5432989a973b94771cd864a9b50"}],"stats":{"total":58,"additions":33,"deletions":25},"files":[{"sha":"2823932c447d704139f3d401c639e974ee333998","filename":"openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/PCClassFileTransformer.java","status":"modified","additions":1,"deletions":11,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/e30632b60b26430fe4f95dd3f5a3bd79c4a36f9f/openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/PCClassFileTransformer.java","raw_url":"https://github.com/apache/openjpa/raw/e30632b60b26430fe4f95dd3f5a3bd79c4a36f9f/openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/PCClassFileTransformer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/PCClassFileTransformer.java?ref=e30632b60b26430fe4f95dd3f5a3bd79c4a36f9f","patch":"@@ -44,12 +44,12 @@\n     private static final Localizer _loc = Localizer.forPackage\n         (PCClassFileTransformer.class);\n \n-    private boolean _transforming = false;\n     private final MetaDataRepository _repos;\n     private final PCEnhancer.Flags _flags;\n     private final ClassLoader _tmpLoader;\n     private final Log _log;\n     private final Set _names;\n+    private boolean _transforming = false;\n \n     /**\n      * Constructor.\n@@ -92,14 +92,6 @@ public PCClassFileTransformer(MetaDataRepository repos,\n         _repos = repos;\n         _tmpLoader = tmpLoader;\n \n-        // ensure that we are using the temporary class loader for\n-        // all class resolution\n-        repos.getConfiguration().setClassResolver(new ClassResolver() {\n-            public ClassLoader getClassLoader(Class context, ClassLoader env) {\n-                return _tmpLoader;\n-            }\n-        });\n-\n         _log = repos.getConfiguration().\n             getLog(OpenJPAConfiguration.LOG_ENHANCE);\n         _flags = flags;\n@@ -112,7 +104,6 @@ public ClassLoader getClassLoader(Class context, ClassLoader env) {\n     public byte[] transform(ClassLoader loader, String className,\n         Class redef, ProtectionDomain domain, byte[] bytes)\n         throws IllegalClassFormatException {\n-\n         if (loader == _tmpLoader)\n             return null;\n \n@@ -123,7 +114,6 @@ public ClassLoader getClassLoader(Class context, ClassLoader env) {\n             return null;\n \n         _transforming = true;\n-\n         try {\n             Boolean enhance = needsEnhance(className, redef, bytes);\n             if (enhance != null && _log.isTraceEnabled())"},{"sha":"0ca96272e0529603d3080796919e0fdf0575ce85","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProviderImpl.java","status":"modified","additions":32,"deletions":14,"changes":46,"blob_url":"https://github.com/apache/openjpa/blob/e30632b60b26430fe4f95dd3f5a3bd79c4a36f9f/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProviderImpl.java","raw_url":"https://github.com/apache/openjpa/raw/e30632b60b26430fe4f95dd3f5a3bd79c4a36f9f/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProviderImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProviderImpl.java?ref=e30632b60b26430fe4f95dd3f5a3bd79c4a36f9f","patch":"@@ -21,7 +21,6 @@\n import java.security.ProtectionDomain;\n import java.util.Map;\n import java.util.Properties;\n-\n import javax.persistence.EntityManager;\n import javax.persistence.EntityManagerFactory;\n import javax.persistence.Persistence;\n@@ -30,6 +29,7 @@\n import javax.persistence.spi.PersistenceUnitInfo;\n \n import org.apache.openjpa.conf.OpenJPAConfiguration;\n+import org.apache.openjpa.conf.OpenJPAConfigurationImpl;\n import org.apache.openjpa.enhance.PCClassFileTransformer;\n import org.apache.openjpa.kernel.Bootstrap;\n import org.apache.openjpa.kernel.BrokerFactory;\n@@ -39,6 +39,7 @@\n import org.apache.openjpa.lib.conf.ProductDerivations;\n import org.apache.openjpa.meta.MetaDataModes;\n import org.apache.openjpa.meta.MetaDataRepository;\n+import org.apache.openjpa.util.ClassResolver;\n \n \n /**\n@@ -89,16 +90,15 @@ public EntityManagerFactory createContainerEntityManagerFactory(\n             if (cp == null)\n                 return null;\n \n+            // add enhancer\n+            String ctOpts = (String) Configurations.getProperty\n+                (CLASS_TRANSFORMER_OPTIONS, pui.getProperties());\n+            pui.addTransformer(new ClassTransformerImpl(cp, ctOpts, \n+                pui.getNewTempClassLoader()));\n+\n             BrokerFactory factory = Bootstrap.newBrokerFactory(cp, \n                 pui.getClassLoader());\n-            OpenJPAEntityManagerFactory emf = \n-                OpenJPAPersistence.toEntityManagerFactory(factory);\n-            Properties p = pui.getProperties();\n-            String ctOpts = (String) Configurations.getProperty\n-                (CLASS_TRANSFORMER_OPTIONS, p);\n-            pui.addTransformer(new ClassTransformerImpl(emf.getConfiguration(),\n-                ctOpts, pui.getNewTempClassLoader()));\n-            return emf;\n+            return OpenJPAPersistence.toEntityManagerFactory(factory);\n         } catch (Exception e) {\n             throw PersistenceExceptions.toPersistenceException(e);\n         }\n@@ -112,13 +112,31 @@ public EntityManagerFactory createContainerEntityManagerFactory(\n \n         private final ClassFileTransformer _trans;\n \n-        private ClassTransformerImpl(OpenJPAConfiguration conf, String options,\n-            ClassLoader tempClassLoader) {\n-            MetaDataRepository repos = conf.getMetaDataRepositoryInstance().\n-                newInstance();\n+        private ClassTransformerImpl(ConfigurationProvider cp, String props, \n+            final ClassLoader tmpLoader) {\n+            // create an independent conf for enhancement\n+            OpenJPAConfiguration conf = new OpenJPAConfigurationImpl();\n+            cp.setInto(conf);\n+            // don't allow connections\n+            conf.setConnectionUserName(null);\n+            conf.setConnectionPassword(null);\n+            conf.setConnectionURL(null);\n+            conf.setConnectionDriverName(null);\n+            conf.setConnectionFactoryName(null);\n+            // use the tmp loader for everything\n+            conf.setClassResolver(new ClassResolver() {\n+                public ClassLoader getClassLoader(Class context, \n+                    ClassLoader env) {\n+                    return tmpLoader;\n+                }\n+            });\n+            conf.setReadOnly(true);\n+            conf.instantiateAll();\n+\n+            MetaDataRepository repos = conf.getMetaDataRepositoryInstance();\n             repos.setResolve(MetaDataModes.MODE_MAPPING, false);\n             _trans = new PCClassFileTransformer(repos,\n-                Configurations.parseProperties(options), tempClassLoader);\n+                Configurations.parseProperties(props), tmpLoader);\n         }\n \n         public byte[] transform(ClassLoader cl, String name,"}]}

