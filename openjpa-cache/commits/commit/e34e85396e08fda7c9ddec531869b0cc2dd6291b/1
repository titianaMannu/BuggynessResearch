{"sha":"e34e85396e08fda7c9ddec531869b0cc2dd6291b","node_id":"MDY6Q29tbWl0MjA2MzY0OmUzNGU4NTM5NmUwOGZkYTdjOWRkZWM1MzE4NjliMGNjMmRkNjI5MWI=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-07-21T13:42:53Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-07-21T13:42:53Z"},"message":"OPENJPA-1501: trim trailing whitespace for entities with String IDs\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.x@966225 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"315ca5699c7531b81368c8ea727f470c240a0537","url":"https://api.github.com/repos/apache/openjpa/git/trees/315ca5699c7531b81368c8ea727f470c240a0537"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/e34e85396e08fda7c9ddec531869b0cc2dd6291b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/e34e85396e08fda7c9ddec531869b0cc2dd6291b","html_url":"https://github.com/apache/openjpa/commit/e34e85396e08fda7c9ddec531869b0cc2dd6291b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/e34e85396e08fda7c9ddec531869b0cc2dd6291b/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"a2d0e0564982b9573270092ed5014ed6f32bd09d","url":"https://api.github.com/repos/apache/openjpa/commits/a2d0e0564982b9573270092ed5014ed6f32bd09d","html_url":"https://github.com/apache/openjpa/commit/a2d0e0564982b9573270092ed5014ed6f32bd09d"}],"stats":{"total":174,"additions":170,"deletions":4},"files":[{"sha":"d5148a0fbe0f98a1b1b5af679cdd7298c8ea2f00","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/StringId.java","status":"modified","additions":6,"deletions":4,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/e34e85396e08fda7c9ddec531869b0cc2dd6291b/openjpa-kernel/src/main/java/org/apache/openjpa/util/StringId.java","raw_url":"https://github.com/apache/openjpa/raw/e34e85396e08fda7c9ddec531869b0cc2dd6291b/openjpa-kernel/src/main/java/org/apache/openjpa/util/StringId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/StringId.java?ref=e34e85396e08fda7c9ddec531869b0cc2dd6291b","patch":"@@ -18,6 +18,8 @@\n  */\n package org.apache.openjpa.util;\n \n+import org.apache.commons.lang.StringUtils;\n+\n /**\n  * {@link OpenJPAId} subclass appropriate for String fields.\n  *\n@@ -27,14 +29,14 @@\n \n     private final String key;\n \n-    public StringId(Class cls, String key) {\n+    public StringId(Class<?> cls, String key) {\n         super(cls);\n-        this.key = (key == null) ? \"\" : key;\n+        this.key = (key == null) ? \"\" : StringUtils.stripEnd(key, null);\n     }\n \n-    public StringId(Class cls, String key, boolean subs) {\n+    public StringId(Class<?> cls, String key, boolean subs) {\n         super(cls, subs);\n-        this.key = (key == null) ? \"\" : key;\n+        this.key = (key == null) ? \"\" : StringUtils.stripEnd(key, null);\n     }\n \n     public String getId() {"},{"sha":"625459db9d380350b4b7396c8495fb67efc5f004","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/StringIdEntity.java","status":"added","additions":52,"deletions":0,"changes":52,"blob_url":"https://github.com/apache/openjpa/blob/e34e85396e08fda7c9ddec531869b0cc2dd6291b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/StringIdEntity.java","raw_url":"https://github.com/apache/openjpa/raw/e34e85396e08fda7c9ddec531869b0cc2dd6291b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/StringIdEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/StringIdEntity.java?ref=e34e85396e08fda7c9ddec531869b0cc2dd6291b","patch":"@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.identity;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+\n+@Entity\n+public class StringIdEntity {\n+    @Id\n+    @Column(length = 12)\n+    private String id;\n+    private int data;\n+\n+    public String getId() {\n+        return id;\n+    }\n+\n+    public void setId(String id) {\n+        this.id = id;\n+    }\n+\n+    public int getData() {\n+        return data;\n+    }\n+\n+    public void setData(int data) {\n+        this.data = data;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"StringIdEntity [data=\" + data + \", id='\" + id + \"']\";\n+    }\n+}"},{"sha":"6ab295b1f04bcdb81ea123631a9ea836c8b66aa6","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/TestStringId.java","status":"added","additions":112,"deletions":0,"changes":112,"blob_url":"https://github.com/apache/openjpa/blob/e34e85396e08fda7c9ddec531869b0cc2dd6291b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/TestStringId.java","raw_url":"https://github.com/apache/openjpa/raw/e34e85396e08fda7c9ddec531869b0cc2dd6291b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/TestStringId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/TestStringId.java?ref=e34e85396e08fda7c9ddec531869b0cc2dd6291b","patch":"@@ -0,0 +1,112 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.identity;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+\n+import org.apache.openjpa.persistence.test.AbstractPersistenceTestCase;\n+\n+public class TestStringId extends AbstractPersistenceTestCase {\n+    private static EntityManagerFactory _emf;\n+\n+    public void setUp() {\n+        _emf = createEMF(StringIdEntity.class);\n+\n+        cleanup();\n+    }\n+\n+    public void tearDown() {\n+        _emf.close();\n+    }\n+\n+    private void cleanup() {\n+        EntityManager em = _emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.createQuery(\"Delete from StringIdEntity\").executeUpdate();\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+\n+    public void testTrailingWhitespace() {\n+        StringIdEntity sie1 = new StringIdEntity();\n+        sie1.setId(\"ABC \");\n+\n+        EntityManager em = _emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.persist(sie1);\n+        em.getTransaction().commit();\n+        assertTrue(em.contains(sie1));\n+\n+        StringIdEntity sie2 = em.find(StringIdEntity.class, \"ABC\");\n+        assertSame(\"Find should return the same instance with trailing whitespace\", sie1, sie2);\n+\n+        StringIdEntity sie3 = em.find(StringIdEntity.class, \"ABC  \");\n+        assertSame(\"Find should return the same instance with trailing whitespace\", sie1, sie3);\n+\n+        assertNotSame(\"Leading WS should not match\", sie1, em.find(StringIdEntity.class, \" ABC\"));\n+\n+        em.close();\n+    }\n+\n+    public void testLeadingWhitespace() {\n+        StringIdEntity sie1 = new StringIdEntity();\n+        sie1.setId(\" ABC\");\n+\n+        EntityManager em = _emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.persist(sie1);\n+        em.getTransaction().commit();\n+        assertTrue(em.contains(sie1));\n+\n+        StringIdEntity sie2 = em.find(StringIdEntity.class, \"ABC\");\n+        assertNotSame(\"Find should not return the same instance with leading whitespace\", sie1, sie2);\n+\n+        StringIdEntity sie3 = em.find(StringIdEntity.class, \"   ABC\");\n+        assertNotSame(\"Find should not return the same instance with leading whitespace\", sie1, sie3);\n+\n+        assertSame(sie1, em.find(StringIdEntity.class, \" ABC\"));\n+\n+        assertNotSame(\"Trailing WS should not match\", sie1, em.find(StringIdEntity.class, \"ABC \"));\n+        em.close();\n+    }\n+\n+    public void testInnerWhitespace() {\n+        StringIdEntity sie1 = new StringIdEntity();\n+        sie1.setId(\"A B C\");\n+\n+        EntityManager em = _emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.persist(sie1);\n+        em.getTransaction().commit();\n+        assertTrue(em.contains(sie1));\n+\n+        StringIdEntity sie2 = em.find(StringIdEntity.class, \"ABC\");\n+        assertNotSame(\"Find should not return the same instance with inner whitespace\", sie1, sie2);\n+\n+        StringIdEntity sie3 = em.find(StringIdEntity.class, \"   ABC\");\n+        assertNotSame(\"Find should not return the same instance with inner whitespace\", sie1, sie3);\n+\n+        assertSame(sie1, em.find(StringIdEntity.class, \"A B C\"));\n+\n+        assertNotSame(\"Trailing WS should not match\", sie1, em.find(StringIdEntity.class, \"ABC \"));\n+\n+        em.close();\n+    }\n+}"}]}

