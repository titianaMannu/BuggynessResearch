{"sha":"e36547dafcfd58c3de02ffc8f86d686e73b4eec0","node_id":"MDY6Q29tbWl0MjA2MzY0OmUzNjU0N2RhZmNmZDU4YzNkZTAyZmZjOGY4NmQ2ODZlNzNiNGVlYzA=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-04-01T17:23:46Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-04-01T17:23:46Z"},"message":"OPENJPA-1604: Test for lock mode on named query and its impact on target SQL under pessimistic lock manager plus some usability changes. Does not restore backward compatibility with 1.2 behavior -- but removes the need to set the fecth plan hint etc and ensures named query lock mode other than NONE requires an active transaction.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@930049 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f84464bb5e5789523e0c308d5952ba816caa9d6d","url":"https://api.github.com/repos/apache/openjpa/git/trees/f84464bb5e5789523e0c308d5952ba816caa9d6d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/e36547dafcfd58c3de02ffc8f86d686e73b4eec0","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/e36547dafcfd58c3de02ffc8f86d686e73b4eec0","html_url":"https://github.com/apache/openjpa/commit/e36547dafcfd58c3de02ffc8f86d686e73b4eec0","comments_url":"https://api.github.com/repos/apache/openjpa/commits/e36547dafcfd58c3de02ffc8f86d686e73b4eec0/comments","author":null,"committer":null,"parents":[{"sha":"6f6e94df7614a48410abe9366e375abbce7bf312","url":"https://api.github.com/repos/apache/openjpa/commits/6f6e94df7614a48410abe9366e375abbce7bf312","html_url":"https://github.com/apache/openjpa/commit/6f6e94df7614a48410abe9366e375abbce7bf312"}],"stats":{"total":119,"additions":113,"deletions":6},"files":[{"sha":"fcdcc7816f003fdc46716e7652f7c9d7e01df1ca","filename":"openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/LockEmployee.java","status":"modified","additions":13,"deletions":4,"changes":17,"blob_url":"https://github.com/apache/openjpa/blob/e36547dafcfd58c3de02ffc8f86d686e73b4eec0/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/LockEmployee.java","raw_url":"https://github.com/apache/openjpa/raw/e36547dafcfd58c3de02ffc8f86d686e73b4eec0/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/LockEmployee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/LockEmployee.java?ref=e36547dafcfd58c3de02ffc8f86d686e73b4eec0","patch":"@@ -25,13 +25,22 @@\n \n import javax.persistence.Entity;\n import javax.persistence.Id;\n+import javax.persistence.LockModeType;\n+import javax.persistence.NamedQueries;\n import javax.persistence.NamedQuery;\n import javax.persistence.Version;\n \n-@NamedQuery(\n-        name=\"findEmployeeById\"\n-        , query=\"SELECT c FROM LockEmployee c WHERE c.id = :id\"\n-        )\n+\n+@NamedQueries({\n+    @NamedQuery(name=\"findEmployeeById\",\n+                query=\"SELECT c FROM LockEmployee c WHERE c.id = :id\"),\n+    @NamedQuery(name=\"findEmployeeByIdWithLock\",\n+                query=\"SELECT c FROM LockEmployee c WHERE c.id = :id\",\n+                lockMode=LockModeType.PESSIMISTIC_READ),\n+    @NamedQuery(name=\"findEmployeeByIdWithNoLock\",\n+            query=\"SELECT c FROM LockEmployee c WHERE c.id = :id\",\n+            lockMode=LockModeType.NONE)\n+    })\n \n @Entity\n public class LockEmployee implements Externalizable {"},{"sha":"160f7baaa463f366085bdc5707290c5d3e753586","filename":"openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestNamedQueryLockMode.java","status":"added","additions":88,"deletions":0,"changes":88,"blob_url":"https://github.com/apache/openjpa/blob/e36547dafcfd58c3de02ffc8f86d686e73b4eec0/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestNamedQueryLockMode.java","raw_url":"https://github.com/apache/openjpa/raw/e36547dafcfd58c3de02ffc8f86d686e73b4eec0/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestNamedQueryLockMode.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestNamedQueryLockMode.java?ref=e36547dafcfd58c3de02ffc8f86d686e73b4eec0","patch":"@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.lockmgr;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.Query;\n+import javax.persistence.TransactionRequiredException;\n+\n+import org.apache.openjpa.persistence.test.SQLListenerTestCase;\n+\n+/**\n+ * Tests the lock mode on named query emits a FOR UPDATE clause in target SQL query.\n+ * \n+ * @author Pinaki Poddar\n+ *\n+ */\n+public class TestNamedQueryLockMode extends SQLListenerTestCase {\n+    public void setUp() {\n+        super.setUp(CLEAR_TABLES, LockEmployee.class, \n+                \"openjpa.LockManager\", \"pessimistic\",\n+                \"openjpa.Optimistic\", \"false\");\n+    }\n+    \n+    public void testForUpdateClausePresentInNamedQueryWithLockMode() {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        assertClausePresentInSQL(\"FOR UPDATE\", \n+                     em.createNamedQuery(\"findEmployeeByIdWithLock\").setParameter(\"id\", 0));\n+        em.getTransaction().rollback();\n+    }\n+    \n+    public void testNamedQueryWithLockModeMustExecuteInTransaction() {\n+        EntityManager em = emf.createEntityManager();\n+        // execute without a transaction\n+        try {\n+            em.createNamedQuery(\"findEmployeeByIdWithLock\").setParameter(\"id\", 0).getResultList();\n+            fail(\"Expected \" + TransactionRequiredException.class.getName());\n+        } catch (TransactionRequiredException e) {\n+            // Expected\n+        }\n+    }\n+    \n+    public void testForUpdateClauseAbsentInQueryWithDefault() {\n+        EntityManager em = emf.createEntityManager();\n+        assertClauseAbsentInSQL(\"FOR UPDATE\", \n+                                em.createNamedQuery(\"findEmployeeById\").setParameter(\"id\", 0));\n+    }\n+    \n+    public void testForUpdateClauseAbsentInQueryWithExplictNoLock() {\n+        EntityManager em = emf.createEntityManager();\n+        assertClauseAbsentInSQL(\"FOR UPDATE\", \n+                                em.createNamedQuery(\"findEmployeeByIdWithNoLock\").setParameter(\"id\", 0));\n+    }\n+    \n+    String getLastSQL() {\n+        String last = sql.get(getSQLCount()-1);\n+        assertNotNull(\"No last sql found\", last);\n+        return last;\n+    }\n+    \n+    void assertClausePresentInSQL(String clause, Query q) {\n+        q.getResultList();\n+        String last = getLastSQL();\n+        assertTrue(clause + \" is not present in \" + last, last.toUpperCase().indexOf(clause) != -1);\n+    }\n+    \n+    void assertClauseAbsentInSQL(String clause, Query q) {\n+        q.getResultList();\n+        String last = getLastSQL();\n+        assertTrue(clause + \" is not absent in \" + last, last.toUpperCase().indexOf(clause) == -1);\n+    }\n+}"},{"sha":"f1533300163f2060d4bfda542f0346f1c4d13171","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","status":"modified","additions":8,"deletions":1,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/e36547dafcfd58c3de02ffc8f86d686e73b4eec0/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/e36547dafcfd58c3de02ffc8f86d686e73b4eec0/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java?ref=e36547dafcfd58c3de02ffc8f86d686e73b4eec0","patch":"@@ -85,6 +85,7 @@\n import org.apache.openjpa.util.ExceptionInfo;\n import org.apache.openjpa.util.Exceptions;\n import org.apache.openjpa.util.ImplHelper;\n+import org.apache.openjpa.util.NoTransactionException;\n import org.apache.openjpa.util.RuntimeExceptionTranslator;\n import org.apache.openjpa.util.UserException;\n \n@@ -1023,7 +1024,13 @@ public OpenJPAQuery createNamedQuery(String name) {\n             if (pq != null) {\n                 pq.setInto(del);\n             } else {\n-                meta.setInto(del);\n+                try {\n+                    meta.setInto(del);\n+                } catch (NoTransactionException e) {\n+                    throw new TransactionRequiredException(_loc.get(\"named-query-no-txn\", name, \n+                           meta.getDefiningType(), MixedLockLevelsHelper.fromLockLevel(meta.getLockMode())), \n+                           new Throwable[]{e}, name, false);\n+                }\n                 del.compile();\n             }\n             "},{"sha":"ef7264e3229b43870293adae75fa2763135c2cef","filename":"openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/e36547dafcfd58c3de02ffc8f86d686e73b4eec0/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/e36547dafcfd58c3de02ffc8f86d686e73b4eec0/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties?ref=e36547dafcfd58c3de02ffc8f86d686e73b4eec0","patch":"@@ -229,4 +229,7 @@ create-emf-depend-error: Failed to create a provider for \"{0}\" because a \\\n invalid-version-attribute: Persistence version attribute value \"{0}\" is not valid.  Using version \"{1}\" by default.\n not-jpql-or-criteria-query: Query is neither a JPQL SELECT nor a Criteria API query.\n cache-retrieve-override: The setting of CacheRetrieveMode.USE is ignored and set to BYPASS for refresh operation.  \n-null-detach: Can not detach null entity\n\\ No newline at end of file\n+null-detach: Can not detach null entity\n+named-query-no-txn: Named query \"{0}\" declared in \"{1}\" specifies \"{2}\" lock mode and hence must be \\\n+\tcreated and executed within an active transaction.\n+\t\n\\ No newline at end of file"}]}

