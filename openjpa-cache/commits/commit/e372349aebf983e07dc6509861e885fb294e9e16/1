{"sha":"e372349aebf983e07dc6509861e885fb294e9e16","node_id":"MDY6Q29tbWl0MjA2MzY0OmUzNzIzNDlhZWJmOTgzZTA3ZGM2NTA5ODYxZTg4NWZiMjk0ZTllMTY=","commit":{"author":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2010-06-24T21:06:47Z"},"committer":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2010-06-24T21:06:47Z"},"message":"OPENJPA-1689 Provide better determination of PostgreSQL db owned sequences\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@957715 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"937eb7b16a5a43849bfdae0b043503d18372e5a7","url":"https://api.github.com/repos/apache/openjpa/git/trees/937eb7b16a5a43849bfdae0b043503d18372e5a7"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/e372349aebf983e07dc6509861e885fb294e9e16","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/e372349aebf983e07dc6509861e885fb294e9e16","html_url":"https://github.com/apache/openjpa/commit/e372349aebf983e07dc6509861e885fb294e9e16","comments_url":"https://api.github.com/repos/apache/openjpa/commits/e372349aebf983e07dc6509861e885fb294e9e16/comments","author":null,"committer":null,"parents":[{"sha":"a88939693be3f3b732319e5d9599348466c3202b","url":"https://api.github.com/repos/apache/openjpa/commits/a88939693be3f3b732319e5d9599348466c3202b","html_url":"https://github.com/apache/openjpa/commit/a88939693be3f3b732319e5d9599348466c3202b"}],"stats":{"total":377,"additions":374,"deletions":3},"files":[{"sha":"dbc70a4806b3b30bdb6d2c31f24504a5350461ec","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaGenerator.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/e372349aebf983e07dc6509861e885fb294e9e16/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaGenerator.java","raw_url":"https://github.com/apache/openjpa/raw/e372349aebf983e07dc6509861e885fb294e9e16/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaGenerator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaGenerator.java?ref=e372349aebf983e07dc6509861e885fb294e9e16","patch":"@@ -974,7 +974,7 @@ public void generateSequences(DBIdentifier schemaName, DBIdentifier sequenceName\n                     || seqUpper.startsWith(\"JDO_\"))) // legacy\n                 continue;\n             if (_dict.isSystemSequence(sequenceName, sequenceSchema,\n-                schemaName != null))\n+                schemaName != null, conn))\n                 continue;\n             if (!isAllowedTable(sequenceSchema, null))\n                 continue;"},{"sha":"e87ffb78c79e52ed934fdf8382ff397a4f1f5697","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","status":"modified","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/apache/openjpa/blob/e372349aebf983e07dc6509861e885fb294e9e16/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/e372349aebf983e07dc6509861e885fb294e9e16/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java?ref=e372349aebf983e07dc6509861e885fb294e9e16","patch":"@@ -3865,6 +3865,23 @@ public boolean isSystemSequence(DBIdentifier name, DBIdentifier schema,\n             && systemSchemaSet.contains(DBIdentifier.toUpper(schema).getName());\n     }\n \n+    /**\n+     * This method is used to filter system sequences from database metadata.\n+     * Return true if the given sequence represents a system sequence that\n+     * should not appear in the schema definition. Returns true if system\n+     * schema by default.\n+     *\n+     * @param name the table name\n+     * @param schema the table schema; may be null\n+     * @param targetSchema if true, then the given schema was listed by\n+     * the user as one of his schemas\n+     * @param conn connection to the database\n+     */\n+    public boolean isSystemSequence(DBIdentifier name, DBIdentifier schema,\n+        boolean targetSchema, Connection conn) {\n+        return isSystemSequence(name, schema, targetSchema);\n+    }\n+\n     /**\n      * Reflect on the schema to find tables matching the given name pattern.\n      * @deprecated"},{"sha":"9555f92b8b20deb6e9cb5312ea80f2d010b1fdc3","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PostgresDictionary.java","status":"modified","additions":168,"deletions":1,"changes":169,"blob_url":"https://github.com/apache/openjpa/blob/e372349aebf983e07dc6509861e885fb294e9e16/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PostgresDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/e372349aebf983e07dc6509861e885fb294e9e16/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PostgresDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PostgresDictionary.java?ref=e372349aebf983e07dc6509861e885fb294e9e16","patch":"@@ -36,9 +36,13 @@\n import java.text.SimpleDateFormat;\n import java.util.Arrays;\n import java.util.Date;\n+import java.util.HashMap;\n import java.util.Map;\n+import java.util.StringTokenizer;\n+import java.util.Map.Entry;\n \n import org.apache.openjpa.jdbc.identifier.DBIdentifier;\n+import org.apache.openjpa.jdbc.identifier.Normalizer;\n import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.kernel.exps.FilterValue;\n@@ -48,6 +52,7 @@\n import org.apache.openjpa.kernel.Filters;\n import org.apache.openjpa.lib.jdbc.DelegatingConnection;\n import org.apache.openjpa.lib.jdbc.DelegatingPreparedStatement;\n+import org.apache.openjpa.lib.jdbc.ReportingSQLException;\n import org.apache.openjpa.lib.util.ConcreteClassGenerator;\n import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n@@ -124,6 +129,15 @@\n      * method.\n      */\n     public boolean supportsSetFetchSize = true;\n+    \n+    /**\n+     * Statement used to determine whether a sequence is owned.  Owned \n+     * sequences are managed by the database and are considered system \n+     * sequences.\n+     * parm 1: '<table_name.schema_name>'\n+     * parm 2: '<column_name>'\n+     */\n+    public String isOwnedSequenceSQL = \"SELECT pg_get_serial_sequence(?, ?)\";\n \n     public PostgresDictionary() {\n         platform = \"PostgreSQL\";\n@@ -378,12 +392,165 @@ public boolean isSystemSequence(String name, String schema,\n \n     public boolean isSystemSequence(DBIdentifier name, DBIdentifier schema,\n         boolean targetSchema) {\n+        return isSystemSequence(name, schema, targetSchema, null);\n+    }\n+    \n+    public boolean isSystemSequence(DBIdentifier name, DBIdentifier schema,\n+        boolean targetSchema, Connection conn) {\n         if (super.isSystemSequence(name, schema, targetSchema))\n             return true;\n+        \n+        if (isOwnedSequence(name, schema, conn)) {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Uses the native Postgres function pg_get_serial_sequence to determine whether\n+     * a sequence is owned by the database.  Column types such as bigserial use a \n+     * system assigned sequence generator of the format: table_column_seq\n+     * \n+     * @see http://www.postgresql.org/docs/current/static/functions-info.html\n+     */\n+    public boolean isOwnedSequence(DBIdentifier name, DBIdentifier schema, Connection conn) {\n+        \n+        String strName = DBIdentifier.isNull(name) ? \"\" : name.getName();\n+        // basic check for SEQ suffix.  not SEQ, not an owned sequence\n+        if (strName == null || !strName.toUpperCase().endsWith(\"_SEQ\"))\n+            return false;\n+\n+        // If no connection, use secondary method to determine ownership\n+        if (conn == null) {\n+            return isOwnedSequence(strName);\n+        }\n+        \n+        // Build permutations of table, column pairs from the provided \n+        // sequence name.  If any of them are determined owned, assume the \n+        // sequence is owned.  This is not perfect, but considerably better than\n+        // considering all sequences suffixed with _seq are db owned.\n+        String[][] namePairs = buildNames(strName);\n+        try {\n+            for (int i = 0; i < namePairs.length; i++) {\n+                if (queryOwnership(conn, namePairs[i], schema)) {\n+                    return true;\n+                }\n+            }\n+        } catch (Throwable t) {\n+            if (log.isWarnEnabled())\n+                log.warn(_loc.get(\"psql-owned-seq-warning\"), t);\n+            return isOwnedSequence(strName);\n+        }\n+        return false;\n+    }\n+    \n+    private boolean queryOwnership(Connection conn, String[] namePair,\n+        DBIdentifier schema) throws Throwable {\n+        PreparedStatement ps = null;\n+        ResultSet rs = null;\n+        try {\n+            ps = prepareStatement(conn, isOwnedSequenceSQL);\n+            String tblName = \"\";\n+            if (!DBIdentifier.isEmpty(schema)) {\n+                tblName = schema.getName() + getIdentifierDelimiter();  \n+            }\n+            tblName += namePair[0];\n+            ps.setString(1, tblName);\n+            String colName = toDBName(DBIdentifier.newColumn(namePair[1]));\n+            ps.setString(2, colName);\n+            ps.execute();\n+            rs = ps.getResultSet();\n+            if (rs == null || !rs.next()) {\n+                return false;\n+            }\n+            String val = getString(rs, 1);\n+            if (val == null || val.length() == 0) {\n+                return false;\n+            }\n+            return true;\n+        } catch (Throwable t) {\n+            if (t instanceof ReportingSQLException) {\n+                // Handle known/acceptable exceptions\n+                // 42P01 - table does not exist\n+                // 42703 - column does not exist within table\n+                ReportingSQLException rse = (ReportingSQLException)t;\n+                if (\"42P01\".equals(rse.getSQLState()) ||\n+                    \"42703\".equals(rse.getSQLState())) {\n+                    return false;\n+                }\n+            }\n+            throw t;\n+        }\n+        finally {\n+            if (rs != null) {\n+                try {\n+                    rs.close();\n+                } catch (Throwable t) {}\n+            }\n+            if (ps != null) {\n+                try {\n+                    ps.close();\n+                } catch (Throwable t) {}\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Owned sequences are of the form <table>_<col>_seq. Table and column \n+     * names can contain underscores so permutations of these names must be \n+     * produced for ownership verification.\n+     * @param strName\n+     * @return\n+     */\n+    private String[][] buildNames(String strName) {\n+        // split the sequence name into components\n+        // owned sequences are of the form <table>_<col>_seq\n+        String[] parts = Normalizer.splitName(strName, \"_\");\n+        \n+        if (parts == null || parts.length < 3) {\n+            return null;\n+        }\n+        // Simple and most common case\n+        if (parts.length == 3) {\n+            return new String[][] { {parts[0], parts[1]} };\n+        }\n+        // If table or column names contain underscores, build a list\n+        // of possibilities\n+        String[][] names = new String[(parts.length - 2)][2];\n+        for (int i = 0; i < parts.length - 2; i++) {\n+            String[] namePair = new String[2];\n+            StringBuilder name0 = new StringBuilder();\n+            StringBuilder name1 = new StringBuilder();\n+            for (int j = 0; j < parts.length - 1; j++) {\n+                if (j <= i) {\n+                    name0.append(parts[j]);\n+                    if (j < i) {\n+                        name0.append(\"_\");\n+                    }\n+                } else {\n+                    name1.append(parts[j]);\n+                    if (j < parts.length - 2) {\n+                        name1.append(\"_\");\n+                    }\n+                }\n+            }\n+            namePair[0] = name0.toString();\n+            namePair[1] = name1.toString();\n+            names[i] = namePair;\n+        }\n+        return names;\n+    }\n \n+    /**\n+     * Secondary logic if owned sequences cannot be determined by calling the\n+     * db.  This logic assumes that any sequence prefixed with _SEQ is an\n+     * owned sequence (identical to the behavior of prior versions of OpenJPA).\n+     * @param strName\n+     * @return\n+     */\n+    private boolean isOwnedSequence(String strName) {\n         // filter out generated sequences used for bigserial cols, which are\n         // of the form <table>_<col>_seq\n-        String strName = DBIdentifier.isNull(name) ? \"\" : name.getName();\n         int idx = (strName == null) ? -1 : strName.indexOf('_');\n         return idx != -1 && idx != strName.length() - 4\n             && strName.toUpperCase().endsWith(\"_SEQ\");"},{"sha":"4983991d274c51060a5110b43faebafa6c7c11a0","filename":"openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/localizer.properties","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/e372349aebf983e07dc6509861e885fb294e9e16/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/e372349aebf983e07dc6509861e885fb294e9e16/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/localizer.properties?ref=e372349aebf983e07dc6509861e885fb294e9e16","patch":"@@ -207,4 +207,8 @@ unknown-delim-support: Unable to determine whether delimited identifiers are sup\n can_not_get_current_schema: Unable to get current schema. SQLException message is \"{0}\".\n cannot-determine-identifier-base-case: Unable to determine the case to use for \\\n     identifiers.  The default value of \"{0}\" will be used.\n-can-not-execute: Unable to execute {0}.\n\\ No newline at end of file\n+can-not-execute: Unable to execute {0}.\n+psql-owned-seq-warning: Unable to determine which sequences are owned by the database. \\\n+\tOpenJPA will consider all sequences suffixed with \"_seq\" as database managed.  This\n+\tmay result in improper creation or removal of sequences with this suffix. The \\\n+\toriginal PostgreSQL driver exception is being logged for your reference.\n\\ No newline at end of file"},{"sha":"9c9c3e8affadcf7bb476a84a411da5bb79e1c8d2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/sequence/SequencedEntity.java","status":"added","additions":82,"deletions":0,"changes":82,"blob_url":"https://github.com/apache/openjpa/blob/e372349aebf983e07dc6509861e885fb294e9e16/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/sequence/SequencedEntity.java","raw_url":"https://github.com/apache/openjpa/raw/e372349aebf983e07dc6509861e885fb294e9e16/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/sequence/SequencedEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/sequence/SequencedEntity.java?ref=e372349aebf983e07dc6509861e885fb294e9e16","patch":"@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.sequence;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.SequenceGenerator;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name=\"SEQENTITY_TBL\")\n+@SequenceGenerator(name=\"SeqEntity\", sequenceName=\"SEQENTITY_ntv_seq\", allocationSize = 1)\n+public class SequencedEntity {\n+\n+    @Id\n+    @GeneratedValue(strategy=GenerationType.SEQUENCE, generator=\"SeqEntity\")\n+    private int id;\n+\n+    @GeneratedValue(strategy=GenerationType.SEQUENCE, generator=\"SeqEntity2\")\n+    @SequenceGenerator(name=\"SeqEntity2\", sequenceName=\"SEQENTITY_TBL_gval1_seq\", allocationSize = 1)\n+    private int gval1;\n+    \n+    @GeneratedValue(strategy=GenerationType.SEQUENCE, generator=\"SeqEntity3\")\n+    @SequenceGenerator(name=\"SeqEntity3\", sequenceName=\"SEQENTITY_TBL_g_val2_seq\", allocationSize = 1)\n+    @Column(name=\"g_val2\")\n+    private int gval2;\n+\n+    @GeneratedValue(strategy=GenerationType.SEQUENCE, generator=\"SeqEntity4\")\n+    @SequenceGenerator(name=\"SeqEntity4\", sequenceName=\"SEQENTITY_gval3_seq\", allocationSize = 1)\n+    private int gval3;\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setGval2(int gval) {\n+        this.gval2 = gval;\n+    }\n+\n+    public int getGval2() {\n+        return gval2;\n+    }\n+\n+    public void setGval1(int gval1) {\n+        this.gval1 = gval1;\n+    }\n+\n+    public int getGval1() {\n+        return gval1;\n+    }\n+\n+    public void setGval3(int gval3) {\n+        this.gval3 = gval3;\n+    }\n+\n+    public int getGval3() {\n+        return gval3;\n+    }\n+}"},{"sha":"e0fd2fb5f4e6d8fd1d3f555b1a9d1404944fcb01","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/sequence/TestDropAddSequence.java","status":"added","additions":93,"deletions":0,"changes":93,"blob_url":"https://github.com/apache/openjpa/blob/e372349aebf983e07dc6509861e885fb294e9e16/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/sequence/TestDropAddSequence.java","raw_url":"https://github.com/apache/openjpa/raw/e372349aebf983e07dc6509861e885fb294e9e16/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/sequence/TestDropAddSequence.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/sequence/TestDropAddSequence.java?ref=e372349aebf983e07dc6509861e885fb294e9e16","patch":"@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.sequence;\n+\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\n+import org.apache.openjpa.jdbc.sql.PostgresDictionary;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+/**\n+ * Tests the drop then add schema action for SynchronizeMappings when a\n+ * native sequence suffixed with \"_seq\" is in use.  This test only runs when \n+ * the configured database supports native sequences.\n+ */\n+public class TestDropAddSequence extends SingleEMFTestCase {\n+    \n+    @Override\n+    public void setUp() throws Exception {\n+\n+        // Create a basic emf to determine whether sequences are supported.\n+        // If so, run the normal setup with the test PU.\n+        OpenJPAEntityManagerFactorySPI tempEMF = createNamedEMF(\"test\");\n+        try {\n+            if (!supportsSequences(tempEMF)) {\n+                return;\n+            }\n+        } finally {\n+            if (tempEMF != null) {\n+                tempEMF.close();\n+            }\n+        }\n+        super.setUp();\n+        // Force creation of the base schema artifacts including the base\n+        // sequences (add, no drop)\n+        emf.createEntityManager().close();\n+    }\n+\n+    @Override\n+    protected String getPersistenceUnitName() {\n+        return \"TestDropAddSequence\";\n+    }\n+\n+    \n+    /**\n+     * Verifies a new EMF can be created when the runtime forward mapping tool \n+     * is enabled with drop then add schema action when an entity contains a\n+     * named native sequence suffixed with \"_seq\".\n+     */\n+    public void testDropAddSequence() {\n+        \n+        if (!supportsSequences(emf)) {\n+            return;\n+        }\n+        \n+        Object[] props = new Object[] { \"openjpa.jdbc.SynchronizeMappings\",\n+            \"buildSchema(SchemaAction='drop,add')\" };\n+        OpenJPAEntityManagerFactorySPI oemf = createNamedEMF(\"TestDropAddSequence\",props);\n+        \n+        OpenJPAEntityManager em = oemf.createEntityManager();\n+        \n+        em.close();\n+        oemf.close();\n+    }\n+    \n+    private boolean supportsSequences(OpenJPAEntityManagerFactorySPI oemf) {\n+        if (oemf == null) {\n+            return false;\n+        }\n+        DBDictionary dict = ((JDBCConfiguration)oemf.getConfiguration()).getDBDictionaryInstance();\n+        if (dict != null) {\n+            return dict.nextSequenceQuery != null;\n+        }\n+        return false;\n+    }\n+}"},{"sha":"34dd507b52aa2d9c475e82e23b9deee7a64337d2","filename":"openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/e372349aebf983e07dc6509861e885fb294e9e16/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/e372349aebf983e07dc6509861e885fb294e9e16/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml?ref=e372349aebf983e07dc6509861e885fb294e9e16","patch":"@@ -365,4 +365,12 @@\n         </properties>\n     </persistence-unit>\n \n+    <persistence-unit name=\"TestDropAddSequence\">\n+        <class>org.apache.openjpa.persistence.sequence.SequencedEntity</class>\n+        <exclude-unlisted-classes>true</exclude-unlisted-classes>\n+        <properties>\n+            <property name=\"openjpa.jdbc.SynchronizeMappings\"\n+                value=\"buildSchema\"/>\n+        </properties>\n+    </persistence-unit>\n </persistence>"}]}

