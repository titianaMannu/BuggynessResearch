{"sha":"e39a9a09e006697ef6182939c9885071e5e8d476","node_id":"MDY6Q29tbWl0MjA2MzY0OmUzOWE5YTA5ZTAwNjY5N2VmNjE4MjkzOWM5ODg1MDcxZTVlOGQ0NzY=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-09-01T20:16:19Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-09-01T20:16:19Z"},"message":"OPENJPA-1278,OPENJPA-1276,OPENJPA-1265: \n  Add new OpenJPACriteriaXYZ interface for extended features. \n  Draft version of conversion of Criteria Query to a JPQL-like string\n  The getter methods return non-live, non-null, mutable lists/sets\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@810212 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"92a77ecc7e23a9324c9eadc801c23fb63c1c4aff","url":"https://api.github.com/repos/apache/openjpa/git/trees/92a77ecc7e23a9324c9eadc801c23fb63c1c4aff"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/e39a9a09e006697ef6182939c9885071e5e8d476","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/e39a9a09e006697ef6182939c9885071e5e8d476","html_url":"https://github.com/apache/openjpa/commit/e39a9a09e006697ef6182939c9885071e5e8d476","comments_url":"https://api.github.com/repos/apache/openjpa/commits/e39a9a09e006697ef6182939c9885071e5e8d476/comments","author":null,"committer":null,"parents":[{"sha":"69cf52f68d306838a40ffbadab9b3444be5f7f4a","url":"https://api.github.com/repos/apache/openjpa/commits/69cf52f68d306838a40ffbadab9b3444be5f7f4a","html_url":"https://github.com/apache/openjpa/commit/69cf52f68d306838a40ffbadab9b3444be5f7f4a"}],"stats":{"total":1288,"additions":991,"deletions":297},"files":[{"sha":"c6d35060bc66a7d5584cdcac05f9ed98657f6426","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/AbstractCriteriaTestCase.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/e39a9a09e006697ef6182939c9885071e5e8d476/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/AbstractCriteriaTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/e39a9a09e006697ef6182939c9885071e5e8d476/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/AbstractCriteriaTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/AbstractCriteriaTestCase.java?ref=e39a9a09e006697ef6182939c9885071e5e8d476","patch":"@@ -100,6 +100,8 @@ void assertEquivalence(CriteriaQuery<?> c, String jpql, String expectedSQL) {\n      * Executes the given CriteriaQuery and JPQL string and compare their respective SQLs for equality.\n      */\n     void assertEquivalence(CriteriaQuery<?> c, String jpql) {\n+        System.err.println(\"JPQL :\" + jpql);\n+        System.err.println(\"CJQL :\" + ((CriteriaQueryImpl<?>)c).toCQL());\n         assertEquivalence(c, jpql, null, null, null);\n     }\n "},{"sha":"584ff59260f5bd33bc661652c50d058493abc2f2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestQueryByExample.java","status":"modified","additions":11,"deletions":11,"changes":22,"blob_url":"https://github.com/apache/openjpa/blob/e39a9a09e006697ef6182939c9885071e5e8d476/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestQueryByExample.java","raw_url":"https://github.com/apache/openjpa/raw/e39a9a09e006697ef6182939c9885071e5e8d476/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestQueryByExample.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestQueryByExample.java?ref=e39a9a09e006697ef6182939c9885071e5e8d476","patch":"@@ -40,7 +40,7 @@ public void testBasicFieldsWithNonDefaultValue() {\n         \n         ComparisonStyle style = null;\n         Attribute<?,?>[] excludes = null;\n-        q.where(cb.example(q.from(Employee.class), example, style, excludes));\n+        q.where(cb.qbe(q.from(Employee.class), example, style, excludes));\n         \n         assertEquivalence(q, jpql);\n     }\n@@ -56,7 +56,7 @@ public void testExcludeBasicFieldWithNonDefaultValue() {\n         \n         ComparisonStyle style = null;\n         Attribute<?,?>[] excludes = {Employee_.rating};\n-        q.where(cb.example(q.from(Employee.class), example, style, excludes));\n+        q.where(cb.qbe(q.from(Employee.class), example, style, excludes));\n         \n         assertEquivalence(q, jpql);\n     }\n@@ -71,7 +71,7 @@ public void testBasicFieldWithDefaultValueExcludedByDefaultStyle() {\n         \n         ComparisonStyle style = null;\n         Attribute<?,?>[] excludes = null;\n-        q.where(cb.example(q.from(Employee.class), example, style, excludes));\n+        q.where(cb.qbe(q.from(Employee.class), example, style, excludes));\n         \n         executeAndCompareSQL(q, \"WHERE (t0.rating = ?)\");        \n         assertEquivalence(q, jpql);\n@@ -85,9 +85,9 @@ public void testBasicFieldWithDefaultValueCanBeIncludedByStyle() {\n         Employee example = new Employee();\n         example.setRating(1);\n         \n-        ComparisonStyle style = cb.comparisonStyle();\n+        ComparisonStyle style = cb.qbeStyle();\n         Attribute<?,?>[] excludes = null;\n-        q.where(cb.example(q.from(Employee.class), example, style.setExcludeDefault(false), excludes));\n+        q.where(cb.qbe(q.from(Employee.class), example, style.setExcludeDefault(false), excludes));\n         \n         executeAndCompareSQL(q, \"WHERE (t0.rating = ? AND t0.salary = ?)\");\n         assertEquivalence(q, jpql);\n@@ -106,9 +106,9 @@ public void testRelationFieldWithNonDefaultValue() {\n         example.setDepartment(dept);\n         \n         \n-        ComparisonStyle style = cb.comparisonStyle();\n+        ComparisonStyle style = cb.qbeStyle();\n         Attribute<?,?>[] excludes = null;\n-        q.where(cb.example(q.from(Employee.class), example, style, excludes));\n+        q.where(cb.qbe(q.from(Employee.class), example, style, excludes));\n         \n         executeAndCompareSQL(q, \"WHERE (t1.name = ? AND t0.rating = ? AND t0.salary = ?)\");\n     }\n@@ -124,9 +124,9 @@ public void testRelationFieldWithNullValueIncluded() {\n         example.setRating(1);\n         example.setDepartment(null);\n         \n-        ComparisonStyle style = cb.comparisonStyle();\n+        ComparisonStyle style = cb.qbeStyle();\n         Attribute<?,?>[] excludes = {Employee_.frequentFlierPlan, Employee_.manager, Employee_.spouse};\n-        q.where(cb.example(q.from(Employee.class), example, style.setExcludeNull(false).setExcludeDefault(false), \n+        q.where(cb.qbe(q.from(Employee.class), example, style.setExcludeNull(false).setExcludeDefault(false), \n                 excludes));\n         \n         executeAndCompareSQL(q, \"WHERE (1 <> 1 AND t0.DEPARTMENT_DEPTNO IS NULL \" \n@@ -150,10 +150,10 @@ public void testEmbeddedField() {\n         contact.setAddress(address);\n         example.setContactInfo(contact);\n         \n-        ComparisonStyle style = cb.comparisonStyle();\n+        ComparisonStyle style = cb.qbeStyle();\n         Attribute<?,?>[] excludes = {Employee_.department, Employee_.frequentFlierPlan, \n                 Employee_.manager, Employee_.spouse};\n-        q.where(cb.example(q.from(Employee.class), example, style, excludes));\n+        q.where(cb.qbe(q.from(Employee.class), example, style, excludes));\n         \n         executeAndCompareSQL(q, \"WHERE (t1.city = ? AND t1.country = ? AND t1.state = ? \" \n                 + \"AND t0.name = ? AND t0.rating = ? AND t0.salary = ?)\");"},{"sha":"001c51c71c21721b18960535695c4c74bd0e9a64","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/AliasContext.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/e39a9a09e006697ef6182939c9885071e5e8d476/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/AliasContext.java","raw_url":"https://github.com/apache/openjpa/raw/e39a9a09e006697ef6182939c9885071e5e8d476/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/AliasContext.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/AliasContext.java?ref=e39a9a09e006697ef6182939c9885071e5e8d476","patch":"@@ -56,12 +56,12 @@\n      * Gets the registered variable for the given node. \n      * Return null if the node is not registered.     \n      */\n-    Value getVariable(Selection<?> node);\n+    Value getRegisteredVariable(Selection<?> node);\n     \n     /**\n      * Gets the registered path value for the given node. \n      * Return null if the node is not registered.     \n      */\n-    Value getValue(Selection<?> node);\n+    Value getRegisteredValue(Selection<?> node);\n     \n }"},{"sha":"91e2e33edfb886aeb26e2b71c970e215860b0c2d","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CompoundSelections.java","status":"modified","additions":20,"deletions":3,"changes":23,"blob_url":"https://github.com/apache/openjpa/blob/e39a9a09e006697ef6182939c9885071e5e8d476/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CompoundSelections.java","raw_url":"https://github.com/apache/openjpa/raw/e39a9a09e006697ef6182939c9885071e5e8d476/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CompoundSelections.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CompoundSelections.java?ref=e39a9a09e006697ef6182939c9885071e5e8d476","patch":"@@ -36,7 +36,7 @@\n import org.apache.openjpa.persistence.TupleImpl;\n \n /**\n- * Implements slection terms that are composed of other selection terms.\n+ * Implements selection terms that are composed of other selection terms.\n  *  \n  * @author Pinaki Poddar\n  * \n@@ -81,7 +81,7 @@ public final boolean isCompoundSelection() {\n          *           selection\n          */\n         public final List<Selection<?>> getCompoundSelectionItems() {\n-            return _args == null ? Collections.EMPTY_LIST : new CopyOnWriteArrayList<Selection<?>>(_args);\n+            return Expressions.returnCopy(_args);\n         }\n         \n         void assertNoCompoundSelection(Selection<?>...args) {\n@@ -94,7 +94,18 @@ void assertNoCompoundSelection(Selection<?>...args) {\n             }\n         }\n \n-        public abstract FillStrategy<X> getFillStrategy();\n+        abstract FillStrategy<X> getFillStrategy();\n+        \n+        @Override\n+        public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+            StringBuilder buffer = new StringBuilder();\n+            for (int i = 0; i < _args.size(); i++) {\n+                buffer.append((((CriteriaExpression)_args.get(i)).asValue(q)));\n+                if (i+1 != _args.size())\n+                    buffer.append(\", \");\n+            }\n+            return buffer;\n+        }\n     }\n     \n     /**\n@@ -145,6 +156,12 @@ public NewInstance(Class<X> cls, Selection<?>... selections) {\n                     types == null ? \"[]\" : Arrays.toString(types)).getMessage());\n             }\n         }\n+        \n+        @Override\n+        public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+            return new StringBuilder(\"NEW \").append(getJavaType().getName()).append(\"(\")\n+               .append(super.asValue(q)).append(\")\");\n+        }\n     }\n     \n     /**"},{"sha":"6e969802d1f7c3d53625a414b67175feec49d136","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaBuilder.java","status":"modified","additions":16,"deletions":4,"changes":20,"blob_url":"https://github.com/apache/openjpa/blob/e39a9a09e006697ef6182939c9885071e5e8d476/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaBuilder.java","raw_url":"https://github.com/apache/openjpa/raw/e39a9a09e006697ef6182939c9885071e5e8d476/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaBuilder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaBuilder.java?ref=e39a9a09e006697ef6182939c9885071e5e8d476","patch":"@@ -62,7 +62,7 @@\n  *\n  */\n @SuppressWarnings(\"serial\")\n-public class CriteriaBuilder implements QueryBuilder, ExpressionParser {\n+public class CriteriaBuilder implements OpenJPACriteriaBuilder, ExpressionParser {\n     public static final String LANG_CRITERIA = \"javax.persistence.criteria\";\n \n     private MetamodelImpl _model;\n@@ -724,7 +724,7 @@ public Predicate isNull(Expression<?> x) {\n      *  \n      * @return a predicate \n      */\n-    public <T> Predicate example(From<?, T> from, T example, ComparisonStyle style, Attribute<?,?>... excludes) {\n+    public <T> Predicate qbe(From<?, T> from, T example, ComparisonStyle style, Attribute<?,?>... excludes) {\n         if (from == null)\n             throw new NullPointerException();\n         if (example == null) {\n@@ -733,13 +733,25 @@ public Predicate isNull(Expression<?> x) {\n         }\n         ManagedType<T> type = (ManagedType<T>)_model.type(example.getClass());\n         return new CompareByExample<T>(this, type, from, example, \n-            style == null ? comparisonStyle() : style, excludes);\n+            style == null ? qbeStyle() : style, excludes);\n+    }\n+    \n+    public <T> Predicate qbe(From<?, T> from, T example, ComparisonStyle style) {\n+        return qbe(from, example, style, null);\n+    }\n+    \n+    public <T> Predicate qbe(From<?, T> from, T example, Attribute<?,?>... excludes) {\n+        return qbe(from, example, qbeStyle(), excludes);\n+    }\n+    \n+    public <T> Predicate qbe(From<?, T> from, T example) {\n+        return qbe(from, example, qbeStyle(), null);\n     }\n     \n     /**\n      * Create a style to tune different aspects of comparison by example. \n      */\n-    public ComparisonStyle comparisonStyle() {\n+    public ComparisonStyle qbeStyle() {\n         return new ComparisonStyle.Default();\n     }\n }"},{"sha":"3e9ce0db3dc057477bfaf8a54e62b6a4b2f5b02e","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaExpression.java","status":"modified","additions":13,"deletions":7,"changes":20,"blob_url":"https://github.com/apache/openjpa/blob/e39a9a09e006697ef6182939c9885071e5e8d476/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaExpression.java","raw_url":"https://github.com/apache/openjpa/raw/e39a9a09e006697ef6182939c9885071e5e8d476/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaExpression.java?ref=e39a9a09e006697ef6182939c9885071e5e8d476","patch":"@@ -18,22 +18,28 @@\n  */\n package org.apache.openjpa.persistence.criteria;\n \n-import javax.persistence.criteria.Expression;\n-\n /**\n- * Extends specification interface to define contract for Visitor pattern.\n+ * Interface to support Visitor pattern on Criteria Query nodes.\n  * \n  * @author Pinaki Poddar\n- *\n- * @param <X>\n+ * @since 2.0.0\n  */\n-public interface CriteriaExpression<X> extends Expression<X> {\n+public interface CriteriaExpression  {\n     /**\n      * Accept visit from the given visitor. The receiver is responsible \n      * to propagate the visitor to the constituent sub-nodes if any.\n      * \n      * @param visitor a processor to walk the nodes of a tree.\n      */\n     void acceptVisit(CriteriaExpressionVisitor visitor);\n-\n+    \n+    /**\n+     * Get a string representation of this node as a value in the context of the given query.\n+     */\n+    StringBuilder asValue(CriteriaQueryImpl<?> q);\n+    \n+    /**\n+     * Get a string representation of this node as a variable in the context of the given query.\n+     */\n+    StringBuilder asVariable(CriteriaQueryImpl<?> q);\n }"},{"sha":"8a2495ac6ebb1eee2274dca9e47b7a95c30d72b9","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaExpressionBuilder.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/e39a9a09e006697ef6182939c9885071e5e8d476/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaExpressionBuilder.java","raw_url":"https://github.com/apache/openjpa/raw/e39a9a09e006697ef6182939c9885071e5e8d476/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaExpressionBuilder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaExpressionBuilder.java?ref=e39a9a09e006697ef6182939c9885071e5e8d476","patch":"@@ -190,7 +190,6 @@ protected void evalDistinct(QueryExpressions exps, ExpressionFactory factory, Cr\n \n     protected void evalCrossJoinRoots(QueryExpressions exps, ExpressionFactory factory, CriteriaQueryImpl<?> q) {\n         Set<Root<?>> roots = q.getRoots();\n-        MetamodelImpl featureSelection = q.getMetamodel();\n         SubqueryImpl<?> subQuery = q.getDelegator();\n         if (subQuery == null || subQuery.getCorrelatedJoins() == null) {\n             q.assertRoot();\n@@ -201,8 +200,7 @@ protected void evalCrossJoinRoots(QueryExpressions exps, ExpressionFactory facto\n                     var.setMetaData(((Types.Entity)root.getModel()).meta);\n                     q.registerRoot(root, var);\n                 }\n-            }\n-        }\n+            }         }\n     }\n     \n     protected void evalFilter(QueryExpressions exps, ExpressionFactory factory, CriteriaQueryImpl<?> q) {"},{"sha":"7a45ca050ec4a81ba5584f70be26f7eed0031a6c","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaExpressionVisitor.java","status":"modified","additions":41,"deletions":17,"changes":58,"blob_url":"https://github.com/apache/openjpa/blob/e39a9a09e006697ef6182939c9885071e5e8d476/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaExpressionVisitor.java","raw_url":"https://github.com/apache/openjpa/raw/e39a9a09e006697ef6182939c9885071e5e8d476/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaExpressionVisitor.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaExpressionVisitor.java?ref=e39a9a09e006697ef6182939c9885071e5e8d476","patch":"@@ -19,7 +19,6 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.util.HashSet;\n-import java.util.IdentityHashMap;\n import java.util.Set;\n \n /**\n@@ -30,31 +29,60 @@\n  *\n  */\n public interface CriteriaExpressionVisitor {\n+    // Enumerates order of traversal of nodes\n+    public static enum TraversalStyle {\n+        INFIX,    // operand1 operator operand2   e.g. a + b\n+        POSTFIX,  // operand1 operand2 operator   e.g. a b +\n+        PREFIX,   // operator operand1 operand2   e.g. + a b\n+        FUNCTION  // operator(operand1, operand2) e.g. f(a,b)\n+    }\n+    \n     /**\n-     * Enter the given expression.\n+     * Enter the given node.\n      */\n-    void enter(CriteriaExpression<?> expr);\n+    void enter(CriteriaExpression node);\n     \n     /**\n-     * Exit the given expression.\n+     * Exit the given node.\n      */\n-    void exit(CriteriaExpression<?> expr);\n+    void exit(CriteriaExpression node);\n     \n-    boolean isVisited(CriteriaExpression<?> expr);\n+    /**\n+     * Affirms if this node has been visited.\n+     */\n+    boolean isVisited(CriteriaExpression node);\n+    \n+    /**\n+     * Get the traversal style of the children of the given node.\n+     */\n+    TraversalStyle getTraversalStyle(CriteriaExpression node);\n     \n     /**\n      * An abstract implementation that can detect cycles during traversal.\n      *  \n      */\n     public static abstract class AbstractVisitor implements CriteriaExpressionVisitor {\n-        protected final Set<CriteriaExpression<?>> _visited = new HashSet<CriteriaExpression<?>>();\n+        protected final Set<CriteriaExpression> _visited = new HashSet<CriteriaExpression>();\n         \n         /**\n-         * Affirms if this expression has been visited before.\n-         * Remembers the given node as visited.\n+         * Remembers the node being visited.\n          */\n-        public boolean isVisited(CriteriaExpression<?> expr) {\n-            return _visited.contains(expr);\n+        public void exit(CriteriaExpression node) {\n+            _visited.add(node);\n+        }\n+        \n+        /**\n+         * Affirms if this node has been visited before.\n+         */\n+        public boolean isVisited(CriteriaExpression node) {\n+            return _visited.contains(node);\n+        }\n+        \n+        /**\n+         * Returns PREFIX as the default traversal style.\n+         */\n+        public TraversalStyle getTraversalStyle(CriteriaExpression node) {\n+            return TraversalStyle.PREFIX;\n         }\n     }\n     \n@@ -69,15 +97,11 @@ public ParameterVisitor(CriteriaQueryImpl<?> q) {\n             query = q;\n         }\n         \n-        public void enter(CriteriaExpression<?> expr) {\n-            if (expr != null && expr instanceof ParameterExpressionImpl) {\n+        public void enter(CriteriaExpression expr) {\n+            if (expr instanceof ParameterExpressionImpl) {\n                 query.registerParameter((ParameterExpressionImpl<?>)expr);\n             }\n         }\n \n-        public void exit(CriteriaExpression<?> expr) {\n-            _visited.add(expr);\n-        }\n-        \n     }\n }"},{"sha":"641e9a76098dbaf16d8ec6a918f46bc0c07f230b","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaQueryImpl.java","status":"modified","additions":143,"deletions":84,"changes":227,"blob_url":"https://github.com/apache/openjpa/blob/e39a9a09e006697ef6182939c9885071e5e8d476/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaQueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/e39a9a09e006697ef6182939c9885071e5e8d476/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaQueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaQueryImpl.java?ref=e39a9a09e006697ef6182939c9885071e5e8d476","patch":"@@ -20,6 +20,7 @@\n \n import java.util.ArrayList;\n import java.util.Arrays;\n+import java.util.Collection;\n import java.util.Collections;\n import java.util.HashMap;\n import java.util.LinkedHashSet;\n@@ -32,6 +33,7 @@\n import javax.persistence.criteria.AbstractQuery;\n import javax.persistence.criteria.CriteriaQuery;\n import javax.persistence.criteria.Expression;\n+import javax.persistence.criteria.Join;\n import javax.persistence.criteria.Order;\n import javax.persistence.criteria.ParameterExpression;\n import javax.persistence.criteria.Predicate;\n@@ -63,21 +65,21 @@\n  *\n  * @since 2.0.0\n  */\n-public class CriteriaQueryImpl<T> implements CriteriaQuery<T>, AliasContext {\n+public class CriteriaQueryImpl<T> implements OpenJPACriteriaQuery<T>, AliasContext {\n     private static final Localizer _loc = Localizer.forPackage(CriteriaQueryImpl.class);\n     \n     private final MetamodelImpl  _model;\n     private Set<Root<?>>        _roots;\n     private PredicateImpl       _where;\n     private List<Order>         _orders;\n     private LinkedMap/*<ParameterExpression<?>, Class<?>>*/ _params;\n-    private Selection<T>        _selection;\n+    private Selection<? extends T>        _selection;\n     private List<Selection<?>>  _selections;\n     private List<Expression<?>> _groups;\n     private PredicateImpl       _having;\n     private List<Subquery<?>>   _subqueries;\n     private Boolean             _distinct;\n-    private SubqueryImpl<?>     _delegator;\n+    private final SubqueryImpl<?> _delegator;\n     private final Class<T>      _resultClass;\n     private boolean             _compiled;\n \n@@ -96,47 +98,68 @@\n     public CriteriaQueryImpl(MetamodelImpl featureSelection, Class<T> resultClass) {\n         this._model = featureSelection;\n         this._resultClass = resultClass;\n+        this._delegator = null;\n         _aliases = new HashMap<Selection<?>, String>(); \n     }\n     \n-    public CriteriaQueryImpl(MetamodelImpl featureSelection, SubqueryImpl<T> delegator) {\n+    /**\n+     * Used by a subquery to delegate to this receiver.\n+     * \n+     * @param featureSelection the metamodel defines the scope of all persistent entity references.\n+     * @param delegator the subquery which will delegate to this receiver.\n+     */\n+    CriteriaQueryImpl(MetamodelImpl featureSelection, SubqueryImpl<T> delegator) {\n         this._model = featureSelection;\n         this._resultClass = delegator.getJavaType();\n         _delegator = delegator;\n         _aliases = getAliases();\n     }\n-\n-    public void setDelegator(SubqueryImpl<?> delegator) {\n-        _delegator = delegator;\n-    }\n     \n-    public SubqueryImpl<?> getDelegator() {\n+    /**\n+     * Gets the subquery, if any, which is delegating to this receiver.\n+     */\n+    SubqueryImpl<?> getDelegator() {\n         return _delegator;\n     }\n     \n+    /**\n+     * Gets the metamodel which defines the scope of all persistent entity references.\n+     */\n     public MetamodelImpl getMetamodel() {\n         return _model;\n     }\n     \n-    public Stack<Context> getContexts() {\n+    /**\n+     * Gets the stack of contexts used by this query.\n+     */\n+    Stack<Context> getContexts() {\n         return _contexts;\n     }\n     \n+    /**\n+     * Sets whether this query as distinct.\n+     */\n     public CriteriaQuery<T> distinct(boolean distinct) {\n         _distinct = distinct;\n         return this;\n     }\n \n+    /**\n+     * Gets the list of ordering elements.\n+     * \n+     * @return Empty list if there is no ordering elements.\n+     * The returned list if mutable but mutation has no impact on this query.\n+     */\n     public List<Order> getOrderList() {\n-        return _orders == null ? Collections.EMPTY_LIST : new CopyOnWriteArrayList<Order>(_orders);\n+        return Expressions.returnCopy(_orders);\n     }\n     \n     /**\n      * Return the selection of the query\n      * @return the item to be returned in the query result\n      */\n     public Selection<T> getSelection() {\n-        return _selection;\n+        return (Selection<T>)_selection;\n     }\n     \n     /**\n@@ -209,9 +232,7 @@ void registerParameter(ParameterExpressionImpl<?> p) {\n      * @return the selection items of the query as a list\n      */\n     public List<Selection<?>> getSelectionList() {\n-        if (_selections == null)\n-            return Collections.EMPTY_LIST;\n-        return Collections.unmodifiableList(_selections);\n+        return Expressions.returnCopy(_selections);\n     }\n \n     public CriteriaQuery<T> groupBy(Expression<?>... grouping) {\n@@ -246,7 +267,7 @@ void registerParameter(ParameterExpressionImpl<?> p) {\n      * @return the modified query\n      */\n     public CriteriaQuery<T> select(Selection<? extends T> selection) {\n-        _selection = (Selection<T>)selection;\n+        _selection = selection;\n         _selections = new ArrayList<Selection<?>>();\n         _selections.add(selection);\n         return this;\n@@ -289,7 +310,7 @@ void registerParameter(ParameterExpressionImpl<?> p) {\n     }\n \n     public List<Expression<?>> getGroupList() {\n-        return _groups == null ? Collections.EMPTY_LIST : new CopyOnWriteArrayList<Expression<?>>(_groups);\n+        return Expressions.returnCopy(_groups);\n     }\n \n     public PredicateImpl getGroupRestriction() {\n@@ -301,14 +322,21 @@ public PredicateImpl getRestriction() {\n     }\n \n     public Set<Root<?>> getRoots() {\n-        return _roots;\n+        return Expressions.returnCopy(_roots);\n     }\n \n     public Root<?> getRoot() {\n         assertRoot();\n         return _roots.iterator().next();\n     }\n     \n+    Root<?> getRoot(boolean mustExist) {\n+        if (mustExist) {\n+            return getRoot();\n+        }\n+        return _roots == null || _roots.isEmpty() ? null : _roots.iterator().next();\n+    }\n+    \n     void addRoot(RootImpl<?> root) {\n         if (_roots == null) {\n             _roots = new LinkedHashSet<Root<?>>();\n@@ -317,10 +345,10 @@ void addRoot(RootImpl<?> root) {\n     }\n     \n     public boolean isDistinct() {\n-        return _distinct;\n+        return _distinct == null ? false : _distinct.booleanValue();\n     }\n \n-    public Boolean getDistinct() {\n+    Boolean getDistinct() {\n         return _distinct;\n     }\n \n@@ -348,9 +376,8 @@ public LinkedMap getParameterTypes() {\n     QueryExpressions getQueryExpressions(ExpressionFactory factory) {\n         _contexts = new Stack<Context>();\n         Context context = new Context(null, null, null);\n-            _contexts.push(context);\n-        return new CriteriaExpressionBuilder()\n-             .getQueryExpressions(factory, this);\n+        _contexts.push(context);\n+        return new CriteriaExpressionBuilder().getQueryExpressions(factory, this);\n     }    \n     \n     public void assertRoot() {\n@@ -366,11 +393,16 @@ public void assertSelection() {\n     //\n     // SubqueryContext\n     //\n-    public void setContexts(Stack<Context> contexts) {\n+    void setContexts(Stack<Context> contexts) {\n         _contexts = contexts;\n     }\n     \n-    public CriteriaQueryImpl<?> getAncestor() {\n+    /**\n+     * Gets either this query itself if this is not a captive query for\n+     * a subquery. Otherwise gets the parent query of the delegating\n+     * subquery.\n+     */\n+    CriteriaQueryImpl<?> getAncestor() {\n         if (_delegator == null)\n             return this;\n         AbstractQuery<?> parent = _delegator.getParent();\n@@ -387,7 +419,10 @@ public void setContexts(Stack<Context> contexts) {\n         return c._aliases;\n     }\n     \n-    public Context ctx() {\n+    /**\n+     * Gets the current context.\n+     */\n+    Context ctx() {\n         return _contexts.peek();\n     }\n     \n@@ -412,14 +447,6 @@ public String getAlias(Selection<?> selection) {\n         return _aliases.get(selection);\n     }\n     \n-    public Value getVariable(Selection<?> selection) {\n-        return _variables.get(selection);\n-    }\n-    \n-    public Value getValue(Selection<?> selection) {\n-        return _values.get(selection);\n-    }\n-    \n     /**\n      * Register the given variable of given path value against the given node.\n      * If the given node has no alias then an alias is set to the given node.\n@@ -434,7 +461,7 @@ public void registerVariable(Selection<?> node, Value var, Value path) {\n         if (!var.isVariable())\n             throw new RuntimeException(var.getClass() + \" is not a variable\");\n         if (var.getPath() != path)\n-            throw new RuntimeException(var + \" and \" + path);\n+            throw new RuntimeException(var + \" does not match given \" + path + \" Variable path is \" + var.getPath());\n         String alias = getAlias(node);\n         \n         if (!alias.equals(var.getAlias())) {\n@@ -454,82 +481,69 @@ public void registerVariable(Selection<?> node, Value var, Value path) {\n         _variables.put(node, var);\n         _values.put(node, path);\n         _aliases.put(node, alias);\n+        // add to context\n         ctx().addSchema(alias, var.getMetaData());\n         ctx().addVariable(alias, var);\n     }\n     \n     public boolean isRegistered(Selection<?> selection) {\n-        boolean found = _variables.containsKey(selection);\n-        if (found) \n+        if (_variables.containsKey(selection))\n             return true;\n         SubqueryImpl<?> delegator = getDelegator();\n-        if (delegator == null)\n-            return false;\n-        \n-        AbstractQuery<?> parent = delegator.getParent();\n-        if (parent instanceof CriteriaQueryImpl) \n-            return ((CriteriaQueryImpl)parent).isRegistered(selection);\n-        // parent is a SubqueryImpl    \n-        return ((SubqueryImpl<?>)parent).getDelegate().isRegistered(selection);\n-        \n+        return (delegator == null) ? false : getDelegatorParent().isRegistered(selection);\n     }\n \n-    Value getRegisteredVariable(Selection<?> selection) {\n-        Value var = getVariable(selection);\n+    public Value getRegisteredVariable(Selection<?> selection) {\n+        Value var = _variables.get(selection);\n         if (var != null)\n             return var;\n         SubqueryImpl<?> delegator = getDelegator();\n-        if (delegator == null)\n-            return null;\n-        \n-        AbstractQuery<?> parent = delegator.getParent();\n-        if (parent instanceof CriteriaQueryImpl) \n-            return ((CriteriaQueryImpl)parent).getRegisteredVariable(selection);\n-        // parent is a SubqueryImpl    \n-        return ((SubqueryImpl<?>)parent).getDelegate().getRegisteredVariable(selection);\n-\n+        return (delegator == null) ? null : getDelegatorParent().getRegisteredVariable(selection);\n     }\n \n-    Value getRegisteredValue(Selection<?> selection) {\n-        Value var = getValue(selection);\n-        if (var != null)\n-            return var;\n+    public Value getRegisteredValue(Selection<?> selection) {\n+        Value val = _values.get(selection);\n+        if (val != null)\n+            return val;\n         SubqueryImpl<?> delegator = getDelegator();\n-        if (delegator == null)\n-            return null;\n-        \n-        AbstractQuery<?> parent = delegator.getParent();\n-        if (parent instanceof CriteriaQueryImpl) \n-            return ((CriteriaQueryImpl)parent).getRegisteredValue(selection);\n-        // parent is a SubqueryImpl    \n-        return ((SubqueryImpl<?>)parent).getDelegate().getRegisteredValue(selection);\n-\n+        return (delegator == null) ? null : getDelegatorParent().getRegisteredValue(selection);\n     }\n \n+    /**\n+     * Registers a variable for the given root expression.\n+     * A root expression is registered only for cross join.  \n+     * @param root\n+     * @param var\n+     */\n     void registerRoot(Root<?> root, Value var) {\n+        if (var == null || !var.isVariable())\n+            throw new IllegalArgumentException(\"Attempt to register non-variable \" + var);\n         _rootVariables.put(root, var);\n         String alias = var.getName();\n         ctx().addSchema(alias, var.getMetaData());\n         ctx().addVariable(alias, var);\n     }\n     \n-    Value getRootVariable(Root<?> root) {\n-        return _rootVariables.get(root);\n-    }\n-    \n+    /**\n+     * Gets the registered variable for the given root. \n+     * \n+     * @param root\n+     * @return\n+     */\n     Value getRegisteredRootVariable(Root<?> root) {\n-        Value var = getRootVariable(root);\n+        Value var = _rootVariables.get(root);\n         if (var != null)\n             return var;\n         SubqueryImpl<?> delegator = getDelegator();\n-        if (delegator == null)\n-            return null;\n-        \n-        AbstractQuery<?> parent = delegator.getParent();\n+        return (delegator == null) ? null : getDelegatorParent().getRegisteredRootVariable(root);\n+    }\n+    \n+    CriteriaQueryImpl<?> getDelegatorParent() {\n+        AbstractQuery<?> parent = _delegator.getParent();\n         if (parent instanceof CriteriaQueryImpl) \n-            return ((CriteriaQueryImpl)parent).getRegisteredRootVariable(root);\n+            return ((CriteriaQueryImpl<?>)parent);\n         // parent is a SubqueryImpl    \n-        return ((SubqueryImpl<?>)parent).getDelegate().getRegisteredRootVariable(root);\n+        return ((SubqueryImpl<?>)parent).getDelegate();\n     }\n     \n     public Class<T> getResultType() {\n@@ -546,16 +560,16 @@ boolean isMultiselect() {\n     \n     protected boolean isDefaultProjection() {\n         if (_selections == null) {\n-            return _roots != null && _roots.size() == 1 && getRoot().getModel().getJavaType() == _resultClass;\n+            return getRoots().size() == 1 && getRoot().getModel().getJavaType() == _resultClass;\n         } \n         if (_selections.size() != 1) {\n             return false;\n         }\n         Selection<?> sel = _selections.get(0);\n-        if (getRoots() != null && sel == getRoot()) {\n+        if (!getRoots().isEmpty() && sel == getRoot()) {\n             return true;\n         }\n-        if ((sel instanceof PathImpl<?,?>) && ((PathImpl<?,?>)sel)._correlatedPath != null) {\n+        if ((sel instanceof PathImpl<?,?>) && ((PathImpl<?,?>)sel).isCorrelated()) {\n             return true;\n         }\n         return false;\n@@ -593,4 +607,49 @@ private void collectParameters(CriteriaExpressionVisitor visitor) {\n         }\n     }\n \n+    /**\n+     * Gets the string representation of the query.\n+     */\n+    public String toCQL() {\n+        StringBuilder buffer = new StringBuilder();\n+        render(buffer, _roots, null);\n+        return buffer.toString();\n+    }\n+    \n+    void render(StringBuilder buffer, Set<Root<?>> roots, List<Join<?,?>> correlatedJoins) {\n+        buffer.append(\"SELECT \");\n+        if (isDistinct()) buffer.append(\" DISTINCT \");\n+        buffer.append(_selection != null ? ((CriteriaExpression)_selection).asValue(this) : \"*\");\n+        buffer.append(\" FROM \");\n+        renderRoots(buffer, roots);\n+        renderJoins(buffer, correlatedJoins);\n+        if (_where != null) {\n+            buffer.append(\" WHERE \").append(_where.asValue(this));\n+        }\n+        if (_orders != null) {\n+            buffer.append(\" ORDER BY \");\n+            List<Order> orderBys = getOrderList();\n+            for (int i = 0; i < orderBys.size(); i++) {\n+                buffer.append(((CriteriaExpression)orderBys.get(i)).asValue(this));\n+            }\n+        }\n+    }\n+    \n+    private void renderJoins(StringBuilder buffer, Collection<Join<?,?>> joins) {\n+        if (joins == null) return;\n+        for (Join j : joins) {\n+            buffer.append(((ExpressionImpl<?>)j).asVariable(this)).append(\" \");\n+            renderJoins(buffer, j.getJoins());\n+        }\n+    }\n+    \n+    private void renderRoots(StringBuilder buffer, Collection<Root<?>> roots) {\n+        if (roots == null) return;\n+        int i = 0;\n+        for (Root r : roots) {\n+            buffer.append(((ExpressionImpl<?>)r).asVariable(this));\n+            if (++i != roots.size()) buffer.append(\", \");\n+            renderJoins(buffer, r.getJoins());\n+        }\n+    }\n }"},{"sha":"67eca4179cb18e03519c8f720b40f7586468c7e2","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/ExpressionImpl.java","status":"modified","additions":12,"deletions":21,"changes":33,"blob_url":"https://github.com/apache/openjpa/blob/e39a9a09e006697ef6182939c9885071e5e8d476/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/ExpressionImpl.java","raw_url":"https://github.com/apache/openjpa/raw/e39a9a09e006697ef6182939c9885071e5e8d476/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/ExpressionImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/ExpressionImpl.java?ref=e39a9a09e006697ef6182939c9885071e5e8d476","patch":"@@ -26,34 +26,17 @@\n import javax.persistence.criteria.QueryBuilder.In;\n \n import org.apache.openjpa.kernel.exps.ExpressionFactory;\n-import org.apache.openjpa.kernel.exps.Value;\n import org.apache.openjpa.persistence.meta.MetamodelImpl;\n \n /**\n  * Expression for Criteria query.\n  * \n- * @author Pinaki Poddar\n- *\n  * @param <X> the type of the value this expression represents.\n+ * \n+ * @author Pinaki Poddar\n+ * @since 2.0.0\n  */\n-public abstract class ExpressionImpl<X> extends SelectionImpl<X> \n-    implements CriteriaExpression<X> {\n-    abstract org.apache.openjpa.kernel.exps.Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection,\n-            CriteriaQueryImpl<?> q);\n-    \n-    org.apache.openjpa.kernel.exps.Expression toKernelExpression(ExpressionFactory factory, MetamodelImpl featureSelection,\n-        CriteriaQueryImpl<?> q) {\n-        return factory.asExpression(toValue(factory, featureSelection, q));\n-    }\n-    \n-    public void acceptVisit(CriteriaExpressionVisitor visitor) {\n-        if (!visitor.isVisited(this)) {\n-            visitor.enter(this);\n-            visitor.exit(this);\n-        }\n-    }\n-    \n-\n+public abstract class ExpressionImpl<X> extends SelectionImpl<X> implements Expression<X> {\n     /**\n      * @param cls the type of the evaluated result of the expression\n      */\n@@ -137,4 +120,12 @@ public Predicate isNotNull() {\n     public Predicate isNull() {\n     \treturn new Expressions.IsNull(this);\n     }\n+    \n+    abstract org.apache.openjpa.kernel.exps.Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection,\n+            CriteriaQueryImpl<?> q);\n+    \n+    org.apache.openjpa.kernel.exps.Expression toKernelExpression(ExpressionFactory factory, MetamodelImpl featureSelection,\n+        CriteriaQueryImpl<?> q) {\n+        return factory.asExpression(toValue(factory, featureSelection, q));\n+    }\n }"},{"sha":"5fe8fa6106237c9203994bc171bb54e6a294b7c4","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/Expressions.java","status":"modified","additions":461,"deletions":62,"changes":523,"blob_url":"https://github.com/apache/openjpa/blob/e39a9a09e006697ef6182939c9885071e5e8d476/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/Expressions.java","raw_url":"https://github.com/apache/openjpa/raw/e39a9a09e006697ef6182939c9885071e5e8d476/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/Expressions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/Expressions.java?ref=e39a9a09e006697ef6182939c9885071e5e8d476","patch":"@@ -21,7 +21,11 @@\n \n import java.util.ArrayList;\n import java.util.Collection;\n+import java.util.HashSet;\n import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.concurrent.CopyOnWriteArraySet;\n \n import javax.persistence.criteria.Expression;\n import javax.persistence.criteria.Predicate;\n@@ -34,6 +38,7 @@\n import org.apache.openjpa.kernel.exps.Value;\n import org.apache.openjpa.kernel.jpql.JPQLExpressionBuilder;\n import org.apache.openjpa.meta.ClassMetaData;\n+import org.apache.openjpa.persistence.criteria.CriteriaExpressionVisitor.TraversalStyle;\n import org.apache.openjpa.persistence.meta.MetamodelImpl;\n import org.apache.openjpa.persistence.meta.Types;\n \n@@ -49,7 +54,10 @@\n  *\n  */\n public class Expressions {\n-\t\n+    static final String OPEN_BRACE = \"(\";\n+    static final String CLOSE_BRACE = \")\";\n+    static final String COMMA = \",\";\n+    \n     /**\n      * Convert the given Criteria expression to a corresponding kernel value \n      * using the given ExpressionFactory.\n@@ -64,16 +72,112 @@ static void setImplicitTypes(Value v1, Value v2, Class<?> expected, CriteriaQuer\n              q.getParameterTypes(), q.toString());\n      }\n      \n-     static void acceptVisit(CriteriaExpressionVisitor visitor, Expression<?>...exprs) {\n-         if (exprs == null)\n+     /**\n+      * Visits the given expression and the given children recursively.\n+      * The order of traversal depends on the parent and is determined by the visitor.\n+      */\n+     static void acceptVisit(CriteriaExpressionVisitor visitor, CriteriaExpression parent, Expression<?>...exprs) {\n+         if (parent == null)\n              return;\n-         for (Expression<?> e : exprs) {\n-             if (e != null)\n-                 ((ExpressionImpl<?>)e).acceptVisit(visitor);\n+         TraversalStyle traversal = visitor.getTraversalStyle(parent);\n+         switch (traversal) {\n+         case INFIX : \n+             if (exprs == null || exprs.length == 0) {\n+                 visitor.enter(parent);\n+                 visitor.exit(parent);\n+                 return;\n+             }\n+             for (int i = 0; i < exprs.length; i++) {\n+                 ExpressionImpl<?> e = (ExpressionImpl<?>)exprs[i];\n+                 if (e != null) e.acceptVisit(visitor);\n+                 if (i + 1 != exprs.length) {\n+                     visitor.enter(parent);\n+                     visitor.exit(parent);\n+                 }\n+             }\n+             break;\n+         case POSTFIX:\n+             visitChildren(visitor,exprs);\n+             visitor.enter(parent);\n+             visitor.exit(parent);\n+             break;\n+         case PREFIX :\n+             visitor.enter(parent);\n+             visitor.exit(parent);\n+             visitChildren(visitor,exprs);\n+             break;\n+         case FUNCTION:\n+             visitor.enter(parent);\n+             visitChildren(visitor, exprs);\n+             visitor.exit(parent);\n+             break;\n          }\n      }\n-    \n-    /**\n+     \n+     static void visitChildren(CriteriaExpressionVisitor visitor, Expression<?>...exprs) {\n+         for (int i = 0; exprs != null && i < exprs.length; i++) {\n+             ExpressionImpl<?> e = (ExpressionImpl<?>)exprs[i];\n+             if (e != null) e.acceptVisit(visitor);\n+         }\n+     }\n+     \n+     /**\n+      * Renders the given expressions as a list of values separated by the given connector.\n+      */\n+     static StringBuilder asValue(CriteriaQueryImpl<?> q, Expression<?>[] exps, String connector) {\n+         StringBuilder buffer = new StringBuilder();\n+         if (exps == null) return buffer;\n+         for (int i = 0; i < exps.length; i++) {\n+             buffer.append(((ExpressionImpl<?>)exps[i]).asValue(q));\n+             if (i+1 != exps.length) {\n+                 buffer.append(connector);\n+             }\n+         }\n+         return buffer;\n+     }\n+     \n+     /**\n+      * Renders the given arguments as a list of values separated by the given connector.\n+      */\n+     static StringBuilder asValue(CriteriaQueryImpl<?> q, Object...params) {\n+         StringBuilder buffer = new StringBuilder();\n+         if (params == null) return buffer;\n+         for (int i = 0; i < params.length; i++) {\n+             Object o = params[i];\n+             if (o == null) {\n+                 if (i+1 < params.length && params[i+1].equals(COMMA)) {\n+                     i++;\n+                 }\n+                 continue;\n+             }\n+             if (o instanceof CriteriaExpression) {\n+                 buffer.append(((CriteriaExpression)o).asValue(q));\n+             } else {\n+                 buffer.append(o);\n+             }\n+         }\n+         return buffer;\n+     }\n+     \n+     /**\n+      * Return a list that is either empty (if the given list is null) or a list\n+      * whose mutation do not impact the original list.\n+      */\n+     static <X> List<X> returnCopy(List<X> list) {\n+         return list == null ? new ArrayList<X>() : new CopyOnWriteArrayList<X>(list);\n+     }\n+     \n+     /**\n+      * Return a set that is either empty (if the given set is null) or a set\n+      * whose mutation do not impact the original list.\n+      */\n+     static <X> Set<X> returnCopy(Set<X> set) {\n+         return set == null ? new HashSet<X>() : new CopyOnWriteArraySet<X>(set);\n+     }\n+     \n+\n+\n+     /**\n      * Unary Functional Expression applies a unary function on a input operand Expression.\n      *\n      * @param <X> the type of the resultant expression\n@@ -93,8 +197,7 @@ public UnaryFunctionalExpression(Expression<X> e) {\n         }\n         \n         public void acceptVisit(CriteriaExpressionVisitor visitor) {\n-            super.acceptVisit(visitor);\n-            Expressions.acceptVisit(visitor, e);\n+            Expressions.acceptVisit(visitor, this, e);\n         }\n     }\n     \n@@ -117,8 +220,7 @@ public BinarayFunctionalExpression(Class<X> t, Expression<?> x, Expression<?> y)\n         }\n         \n         public void acceptVisit(CriteriaExpressionVisitor visitor) {\n-            super.acceptVisit(visitor);\n-            Expressions.acceptVisit(visitor, e1, e2);\n+            Expressions.acceptVisit(visitor, this, e1, e2);\n         }\n     }\n     \n@@ -143,8 +245,7 @@ public FunctionalExpression(Class<X> t, Expression<?>... args) {\n         }\n         \n         public void acceptVisit(CriteriaExpressionVisitor visitor) {\n-            super.acceptVisit(visitor);\n-            Expressions.acceptVisit(visitor, args);\n+            Expressions.acceptVisit(visitor, this, args);\n         }\n     }\n    \n@@ -169,8 +270,7 @@ public PredicateImpl clone() {\n         }\n         \n         public void acceptVisit(CriteriaExpressionVisitor visitor) {\n-            super.acceptVisit(visitor);\n-            Expressions.acceptVisit(visitor, e1, e2);\n+            Expressions.acceptVisit(visitor, this, e1, e2);\n         }\n     }\n     \n@@ -184,6 +284,10 @@ public  Abs(Expression<X> x) {\n         public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQueryImpl<?> q) {\n             return factory.abs(Expressions.toValue(e, factory, featureSelection, q));\n         }\n+        \n+        public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+            return Expressions.asValue(q, \"ABS\", OPEN_BRACE, e, CLOSE_BRACE);\n+        }\n     }\n     \n     public static class Count extends UnaryFunctionalExpression<Long> {\n@@ -203,6 +307,12 @@ public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQue\n             Value v = factory.count(Expressions.toValue(e, factory, featureSelection, q));\n             return _distinct ? factory.distinct(v) : v;\n         }\n+        \n+        @Override\n+        public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+            return Expressions.asValue(q, \"COUNT\", OPEN_BRACE, _distinct ? \"DISTINCT\"+OPEN_BRACE : \"\", \n+                e, _distinct ? CLOSE_BRACE : \"\", CLOSE_BRACE);\n+        }\n     }\n \n     public static class Avg extends UnaryFunctionalExpression<Double> {\n@@ -214,6 +324,11 @@ public  Avg(Expression<?> x) {\n         public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQueryImpl<?> q) {\n             return factory.avg(Expressions.toValue(e, factory, featureSelection, q));\n         }\n+        \n+        @Override\n+        public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+            return Expressions.asValue(q, \"AVG\", OPEN_BRACE, e, CLOSE_BRACE);\n+        }\n     }\n     \n     public static class Sqrt extends UnaryFunctionalExpression<Double> {\n@@ -225,6 +340,10 @@ public  Sqrt(Expression<? extends Number> x) {\n         public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQueryImpl<?> q) {\n             return factory.sqrt(Expressions.toValue(e, factory, featureSelection, q));\n         }\n+        \n+        public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+            return Expressions.asValue(q, \"SQRT\", OPEN_BRACE, e, CLOSE_BRACE);\n+        }\n     }\n     \n     public static class Max<X> extends UnaryFunctionalExpression<X> {\n@@ -236,6 +355,10 @@ public  Max(Expression<X> x) {\n         public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQueryImpl<?> q) {\n             return factory.max(Expressions.toValue(e, factory, featureSelection, q));\n         }\n+        \n+        public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+            return Expressions.asValue(q, \"MAX\", OPEN_BRACE, e, CLOSE_BRACE);\n+        }\n     }\n \n     public static class Min<X> extends UnaryFunctionalExpression<X> {\n@@ -247,6 +370,10 @@ public  Min(Expression<X> x) {\n         public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQueryImpl<?> q) {\n             return factory.min(Expressions.toValue(e, factory, featureSelection, q));\n         }\n+        \n+        public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+            return Expressions.asValue(q, \"MIN\", OPEN_BRACE, e, CLOSE_BRACE);\n+        }\n     }\n     \n     public static class Size extends UnaryFunctionalExpression<Integer> {\n@@ -267,11 +394,16 @@ public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQue\n                 \n             return factory.size(val);\n         }\n+        \n+        public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+            return Expressions.asValue(q, \"SIZE\", OPEN_BRACE, e, CLOSE_BRACE);\n+        }\n     }\n     \n     public static class DatabaseFunction<T> extends FunctionalExpression<T> {\n         private final String functionName;\n         private final Class<T> resultType;\n+       \n         public  DatabaseFunction(String name, Class<T> resultType, Expression<?>... exps) {\n             super(resultType, exps);\n             functionName = name;\n@@ -283,6 +415,10 @@ public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQue\n             return factory.newFunction(functionName, getJavaType(), \n                 new Expressions.ListArgument(resultType, args).toValue(factory, featureSelection, q));\n         }\n+        \n+        public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+            return Expressions.asValue(q, functionName, OPEN_BRACE, Expressions.asValue(q, args, COMMA), CLOSE_BRACE);\n+        }\n     }\n \n     \n@@ -295,6 +431,11 @@ public Type(PathImpl<?, ?> path) {\n         public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQueryImpl<?> q) {\n             return factory.type(Expressions.toValue(e, factory, featureSelection, q));\n         }\n+        \n+        @Override\n+        public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+            return Expressions.asValue(q, \"TYPE\", OPEN_BRACE, e, CLOSE_BRACE);\n+        }\n     }\n \n     public static class Cast<B> extends UnaryFunctionalExpression<B> {\n@@ -306,6 +447,11 @@ public Cast(Expression<?> x, Class<B> b) {\n         public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQueryImpl<?> q) {\n             return factory.cast(Expressions.toValue(e, factory, featureSelection, q), getJavaType());\n         }\n+        \n+        @Override\n+        public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+            return Expressions.asValue(q, OPEN_BRACE, getJavaType().getSimpleName(), CLOSE_BRACE, e);\n+        }\n     }\n     \n     public static class Concat extends BinarayFunctionalExpression<String> {\n@@ -327,14 +473,19 @@ public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQue\n                 Expressions.toValue(e1, factory, featureSelection, q), \n                 Expressions.toValue(e2, factory, featureSelection, q));\n         }\n+        \n+        @Override\n+        public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+            return Expressions.asValue(q, \"CONCAT\", OPEN_BRACE, e1, COMMA, e2, CLOSE_BRACE);\n+        }\n     }\n     \n     public static class Substring extends UnaryFunctionalExpression<String> {\n         private ExpressionImpl<Integer> from;\n         private ExpressionImpl<Integer> len;\n         \n         public Substring(Expression<String> s, Expression<Integer> from, Expression<Integer> len) {\n-            super(s);\n+            super(String.class, s);\n             this.from = (ExpressionImpl<Integer>)from;\n             this.len  = (ExpressionImpl<Integer>)len;\n         }\n@@ -367,6 +518,11 @@ public void acceptVisit(CriteriaExpressionVisitor visitor) {\n             super.acceptVisit(visitor);\n             Expressions.acceptVisit(visitor, from, len);\n         }\n+        \n+        @Override\n+        public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+            return Expressions.asValue(q, \"SUBSTRING\", OPEN_BRACE, e, COMMA, from, COMMA, len, CLOSE_BRACE);\n+        }\n     }\n \n     public static class Locate extends ExpressionImpl<Integer> {\n@@ -412,8 +568,12 @@ public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQue\n         }\n         \n         public void acceptVisit(CriteriaExpressionVisitor visitor) {\n-            super.acceptVisit(visitor);\n-            Expressions.acceptVisit(visitor, pattern, from, path);\n+            Expressions.acceptVisit(visitor, this, pattern, from, path);\n+        }\n+        \n+        @Override\n+        public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+            return Expressions.asValue(q, \"LOCATE\", OPEN_BRACE, pattern, COMMA, path, CLOSE_BRACE);\n         }\n     }\n     \n@@ -422,8 +582,7 @@ public void acceptVisit(CriteriaExpressionVisitor visitor) {\n         static Trimspec defaultSpec = Trimspec.BOTH;\n         private Trimspec ts;\n         \n-        public Trim(Expression<String> x, Expression<Character> y, \n-            Trimspec ts) {\n+        public Trim(Expression<String> x, Expression<Character> y, Trimspec ts) {\n             super(String.class, x, y);\n             this.ts = ts;\n         }\n@@ -462,6 +621,11 @@ public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQue\n                 Expressions.toValue(e1, factory, featureSelection, q), \n                 Expressions.toValue(e2, factory, featureSelection, q), spec);\n         }\n+        \n+        @Override\n+        public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+            return Expressions.asValue(q, \"TRIM\", OPEN_BRACE, e1, COMMA, e2, CLOSE_BRACE);\n+        }        \n     }\n     \n     public static class Sum<N extends Number> extends BinarayFunctionalExpression<N> {\n@@ -489,7 +653,14 @@ public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQue\n                    Expressions.toValue(e1, factory, featureSelection, q), \n                    Expressions.toValue(e2, factory, featureSelection, q));\n         }\n-    }\n+        \n+        @Override\n+        public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+            return e2 == null \n+               ? Expressions.asValue(q, \"SUM\", OPEN_BRACE, e1, CLOSE_BRACE)\n+               : Expressions.asValue(q, e1, \" + \", e2);\n+        }        \n+     }\n     \n     public static class Product<N extends Number> extends BinarayFunctionalExpression<N> {\n         public Product(Expression<? extends Number> x, Expression<? extends Number> y) {\n@@ -510,6 +681,11 @@ public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQue\n                 Expressions.toValue(e1, factory, featureSelection, q), \n                 Expressions.toValue(e2, factory, featureSelection, q));\n         }\n+        \n+        @Override\n+        public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+            return Expressions.asValue(q, e1, \" * \" ,e2);\n+        }        \n     }\n     \n     public static class Diff<N extends Number> extends BinarayFunctionalExpression<N> {\n@@ -531,6 +707,11 @@ public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQue\n                 Expressions.toValue(e1, factory, featureSelection, q), \n                 Expressions.toValue(e2, factory, featureSelection, q));\n         }\n+        \n+        @Override\n+        public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+            return Expressions.asValue(q, e1, \" - \" ,e2);\n+        }        \n     }\n \n     \n@@ -553,6 +734,11 @@ public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQue\n                 Expressions.toValue(e1, factory, featureSelection, q), \n                 Expressions.toValue(e2, factory, featureSelection, q));\n         }\n+        \n+        @Override\n+        public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+            return Expressions.asValue(q, e1, \"%\" ,e2);\n+        }        \n     }\n \n     public static class Mod extends BinarayFunctionalExpression<Integer> {\n@@ -572,6 +758,11 @@ public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQue\n                 Expressions.toValue(e1, factory, featureSelection, q), \n                 Expressions.toValue(e2, factory, featureSelection, q));\n         }\n+        \n+        @Override\n+        public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+            return Expressions.asValue(q, \"MOD\", OPEN_BRACE, e1, COMMA, e2, CLOSE_BRACE);\n+        }        \n     }\n \n     public static class CurrentDate extends ExpressionImpl<java.sql.Date> {\n@@ -583,6 +774,11 @@ public  CurrentDate() {\n         public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQueryImpl<?> q) {\n             return factory.getCurrentDate();\n         }\n+        \n+        @Override\n+        public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+            return new StringBuilder(\"CURRENT_DATE\");\n+        }\n     }\n     \n     public static class CurrentTime extends ExpressionImpl<java.sql.Time> {\n@@ -594,6 +790,11 @@ public  CurrentTime() {\n         public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQueryImpl<?> q) {\n             return factory.getCurrentTime();\n         }\n+        \n+        @Override\n+        public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+            return new StringBuilder(\"CURRENT_TIME\");\n+        }\n     }\n     \n     public static class CurrentTimestamp extends ExpressionImpl<java.sql.Timestamp> {\n@@ -605,6 +806,11 @@ public  CurrentTimestamp() {\n         public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQueryImpl<?> q) {\n             return factory.getCurrentTimestamp();\n         }\n+        \n+        @Override\n+        public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+            return new StringBuilder(\"CURRENT_TIMESTAMP\");\n+        }\n     }\n \n     public static class Equal extends BinaryLogicalExpression {\n@@ -629,6 +835,11 @@ public PredicateImpl clone() {\n             Expressions.setImplicitTypes(val1, val2, e1.getJavaType(), q);\n             return isNegated() ? factory.notEqual(val1, val2) : factory.equal(val1, val2);\n         }\n+        \n+        @Override\n+        public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+            return Expressions.asValue(q, e1, \" = \", e2);\n+        }        \n     }\n     \n     public static class GreaterThan extends BinaryLogicalExpression {\n@@ -648,6 +859,11 @@ public PredicateImpl clone() {\n             Expressions.setImplicitTypes(val1, val2, e1.getJavaType(), q); \n             return factory.greaterThan(val1, val2);\n         }\n+        \n+        @Override\n+        public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+            return Expressions.asValue(q, e1, \" > \", e2);\n+        }        \n     }\n     \n     public static class GreaterThanEqual extends BinaryLogicalExpression {\n@@ -667,6 +883,11 @@ public PredicateImpl clone() {\n             Expressions.setImplicitTypes(val1, val2, e1.getJavaType(), q); \n             return factory.greaterThanEqual(val1, val2);\n         }\n+        \n+        @Override\n+        public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+            return Expressions.asValue(q, e1, \" >= \", e2);\n+        }        \n     }\n    \n     public static class LessThan extends BinaryLogicalExpression {\n@@ -686,6 +907,11 @@ public PredicateImpl clone() {\n             Expressions.setImplicitTypes(val1, val2, e1.getJavaType(), q); \n             return factory.lessThan(val1, val2);\n         }\n+        \n+        @Override\n+        public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+            return Expressions.asValue(q, e1, \" < \", e2);\n+        }        \n     }\n     \n     public static class LessThanEqual extends BinaryLogicalExpression {\n@@ -705,16 +931,34 @@ public PredicateImpl clone() {\n             Expressions.setImplicitTypes(val1, val2, e1.getJavaType(), q); \n             return factory.lessThanEqual(val1, val2);\n         }\n+        \n+        \n+        @Override\n+        public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+            return Expressions.asValue(q, e1, \" <= \", e2);\n+        }        \n     }\n \n     public static class Between<Y extends Comparable<Y>> extends PredicateImpl.And {\n+        private final ExpressionImpl<?> e;\n+        private final ExpressionImpl<?> v1;\n+        private final ExpressionImpl<?> v2;\n+        \n         public Between(Expression<? extends Y> v, Expression<? extends Y> x, Expression<? extends Y> y) {\n             super(new GreaterThanEqual(v,x), new LessThanEqual(v,y));\n+            e = (ExpressionImpl<?>)v;\n+            v1 = (ExpressionImpl<?>)x;\n+            v2 = (ExpressionImpl<?>)y;\n         }\n         \n         public Between(Expression<? extends Y> v, Y x, Y y) {\n             this(v, new Constant<Y>(x), new Constant<Y>(y));\n         }\n+        \n+        @Override\n+        public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+            return Expressions.asValue(q, e, \" BETWEEN \", v1, \" AND \", v2);\n+        }\n     }\n     \n     public static class Constant<X> extends ExpressionImpl<X> {\n@@ -762,10 +1006,29 @@ public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQue\n         }\n         \n         public void acceptVisit(CriteriaExpressionVisitor visitor) {\n-            super.acceptVisit(visitor);\n-            if (arg instanceof CriteriaExpression) {\n-                ((CriteriaExpression<?>)arg).acceptVisit(visitor);\n+            Expressions.acceptVisit(visitor, this, arg instanceof Expression ? ((Expression)arg) : null);\n+        }\n+        \n+        public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+            if (arg == null)\n+                return new StringBuilder(\"NULL\");\n+            Class<?> literalClass = getJavaType();\n+            if (arg instanceof ParameterExpressionImpl) {\n+                return ((ParameterExpressionImpl<?>)arg).asValue(q);\n+            } else if (Number.class.isAssignableFrom(literalClass)) {\n+                return new StringBuilder(arg.toString());\n+            } else if (Boolean.class.isAssignableFrom(literalClass)) {\n+                return new StringBuilder(arg.toString());\n+            } else if (String.class.isAssignableFrom(literalClass)) {\n+                return new StringBuilder(\"'\").append(arg.toString()).append(\"'\");\n+            } else if (Enum.class.isAssignableFrom(literalClass)) {\n+                return new StringBuilder(arg.toString());\n+            } else if (Class.class.isAssignableFrom(literalClass)) {\n+                return new StringBuilder(((Class)arg).getSimpleName());\n+            } else if (Collection.class.isAssignableFrom(literalClass)) {\n+                return new StringBuilder(((Collection)arg).toString());\n             }\n+            return new StringBuilder(arg.toString());\n         }\n     }\n     \n@@ -792,6 +1055,11 @@ public void acceptVisit(CriteriaExpressionVisitor visitor) {\n             super.acceptVisit(visitor);\n             Expressions.acceptVisit(visitor, collection);\n         }\n+        \n+        @Override\n+        public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+            return Expressions.asValue(q, collection, \" IS EMPTY\");\n+        }\n     }\n     \n     public static class IsNotEmpty extends PredicateImpl {\n@@ -817,6 +1085,11 @@ public void acceptVisit(CriteriaExpressionVisitor visitor) {\n             super.acceptVisit(visitor);\n             Expressions.acceptVisit(visitor, collection);\n         }\n+        \n+        @Override\n+        public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+            return Expressions.asValue(q, collection, \" IS NOT EMPTY\");\n+        }\n     }\n \n     \n@@ -833,13 +1106,19 @@ public Index(Joins.List<?,?> e) {\n             v.setMetaData(meta);\n             return factory.index(v);\n         }\n+        \n+        @Override\n+        public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+            return Expressions.asValue(q, \"INDEX\", OPEN_BRACE, e, CLOSE_BRACE);\n+        }\n     }\n     \n     public static class IsMember<E> extends PredicateImpl {\n         final ExpressionImpl<E> element;\n         final ExpressionImpl<?> collection;\n         \n         public IsMember(Class<E> t, Expression<E> element, Expression<?> collection) {\n+            super();\n             this.element = (ExpressionImpl<E>)element;\n             this.collection = (ExpressionImpl<?>)collection;\n         }\n@@ -863,13 +1142,18 @@ public PredicateImpl clone() {\n             org.apache.openjpa.kernel.exps.Expression contains = factory.contains(\n                 Expressions.toValue(collection, factory, featureSelection, q), \n                 Expressions.toValue(element, factory, featureSelection, q));\n-            return _negated ? factory.not(contains) : contains;\n+            return isNegated() ? factory.not(contains) : contains;\n         }\n         \n         public void acceptVisit(CriteriaExpressionVisitor visitor) {\n             super.acceptVisit(visitor);\n             Expressions.acceptVisit(visitor, collection, element);\n         }\n+        \n+        @Override\n+        public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+            return Expressions.asValue(q, element, isNegated() ? \"NOT \" : \"\", \"MEMBER OF \", collection);\n+        }\n     }\n     \n     public static class Like extends PredicateImpl {\n@@ -927,9 +1211,13 @@ public PredicateImpl clone() {\n         }\n         \n         public void acceptVisit(CriteriaExpressionVisitor visitor) {\n-            super.acceptVisit(visitor);\n-            Expressions.acceptVisit(visitor, str, pattern, escapeChar);\n+            Expressions.acceptVisit(visitor, this, str, pattern, escapeChar);\n         }\n+        \n+        @Override\n+        public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+            return Expressions.asValue(q, str, \" LIKE \", pattern);\n+        }        \n     }\n     \n     public static class Coalesce<T> extends ExpressionImpl<T> implements QueryBuilder.Coalesce<T> {\n@@ -960,9 +1248,14 @@ public Coalesce(Class<T> cls) {\n         }\n         \n         public void acceptVisit(CriteriaExpressionVisitor visitor) {\n-            super.acceptVisit(visitor);\n-            Expressions.acceptVisit(visitor, values.toArray(new ExpressionImpl[values.size()]));\n+            Expressions.acceptVisit(visitor, this, values.toArray(new ExpressionImpl[values.size()]));\n         }\n+        \n+        @Override\n+        public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+            return Expressions.asValue(q, \"COALESCE\", OPEN_BRACE, Expressions.asValue(q, values == null \n+                    ? null : values.toArray(new Expression<?>[values.size()]), COMMA), CLOSE_BRACE);\n+        }        \n     }\n     \n     public static class Nullif<T> extends ExpressionImpl<T> {\n@@ -990,9 +1283,13 @@ public Nullif(Expression<T> x, T y) {\n         }\n         \n         public void acceptVisit(CriteriaExpressionVisitor visitor) {\n-            super.acceptVisit(visitor);\n-            Expressions.acceptVisit(visitor, val1, val2);\n+            Expressions.acceptVisit(visitor, this, val1, val2);\n         }\n+        \n+        @Override\n+        public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+            return Expressions.asValue(q, \"NULLIF\", OPEN_BRACE, val1, COMMA, val2, CLOSE_BRACE);\n+        }        \n     }\n \n     public static class IsNull extends PredicateImpl {\n@@ -1019,6 +1316,11 @@ public void acceptVisit(CriteriaExpressionVisitor visitor) {\n             super.acceptVisit(visitor);\n             Expressions.acceptVisit(visitor, e);\n         }\n+        \n+        @Override\n+        public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+            return Expressions.asValue(q, e, \" IS NULL\");\n+        }\n     }\n     \n     public static class IsNotNull extends PredicateImpl {\n@@ -1045,14 +1347,19 @@ public void acceptVisit(CriteriaExpressionVisitor visitor) {\n             super.acceptVisit(visitor);\n             Expressions.acceptVisit(visitor, e);\n         }\n+        \n+        @Override\n+        public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+            return Expressions.asValue(q, e, \" IS NOT NULL\");\n+        }\n     }\n     \n     \n     public static class In<T> extends PredicateImpl.Or implements QueryBuilder.In<T> {\n         final ExpressionImpl<T> e;\n         private boolean negate;\n         public In(Expression<?> e) {\n-            super((Predicate[])null);\n+            super();\n             this.e = (ExpressionImpl<T>)e;\n         }\n         \n@@ -1083,7 +1390,7 @@ public In(Expression<?> e) {\n                 Expressions.Equal e = (Expressions.Equal)_exps.get(0);\n                 ExpressionImpl<?> e2 = e.e2;\n                 ExpressionImpl<?> e1 = e.e1;\n-               Value val2 = Expressions.toValue(e2, factory, featureSelection, q);\n+                Value val2 = Expressions.toValue(e2, factory, featureSelection, q);\n                 if (!(val2 instanceof Literal)) {\n                      Value val1 = Expressions.toValue(e1, factory, featureSelection, q);\n                     Expressions.setImplicitTypes(val1, val2, e1.getJavaType(), q);\n@@ -1108,13 +1415,22 @@ public In(Expression<?> e) {\n         \n         public void acceptVisit(CriteriaExpressionVisitor visitor) {\n             super.acceptVisit(visitor);\n-            Expressions.acceptVisit(visitor, e);\n+            Expressions.acceptVisit(visitor, this, e);\n         }\n+        \n+        @Override\n+        public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+            StringBuilder buffer = Expressions.asValue(q, e, negate ? \" NOT IN \" : \" IN \", OPEN_BRACE);\n+            for (int i = 0; i < _exps.size(); i++) {\n+                buffer.append(((Equal)_exps.get(i)).e2.asValue(q)).append(i+1 == _exps.size() ? CLOSE_BRACE : COMMA);\n+            }\n+            return buffer;\n+        }        \n     }\n     \n     public static class Case<T> extends ExpressionImpl<T> implements QueryBuilder.Case<T> {\n         private final List<Expression<? extends T>> thens = new ArrayList<Expression<? extends T>>();\n-        private final List<Expression<Boolean>> whens     = new ArrayList<Expression<Boolean>>();\n+        private final List<Expression<Boolean>> whens = new ArrayList<Expression<Boolean>>();\n         private Expression<? extends T> otherwise;\n \n         public Case(Class<T> cls) {\n@@ -1146,8 +1462,8 @@ public Case(Class<T> cls) {\n             int size = whens.size();\n             org.apache.openjpa.kernel.exps.Expression[] exps = new org.apache.openjpa.kernel.exps.Expression[size];\n             for (int i = 0; i < size; i++) {\n-                org.apache.openjpa.kernel.exps.Expression expr = ((Expressions.BinaryLogicalExpression)whens.get(i)).\n-                    toKernelExpression(factory, featureSelection, q);\n+                org.apache.openjpa.kernel.exps.Expression expr = \n+                    ((ExpressionImpl<?>)whens.get(i)).toKernelExpression(factory, featureSelection, q);\n                 Value action = Expressions.toValue((ExpressionImpl<?>)thens.get(i), factory, featureSelection, q);\n                 exps[i] = factory.whenCondition(expr, action);\n             }\n@@ -1157,10 +1473,24 @@ public Case(Class<T> cls) {\n         }\n         \n         public void acceptVisit(CriteriaExpressionVisitor visitor) {\n-            super.acceptVisit(visitor);\n-            Expressions.acceptVisit(visitor, thens.toArray(new ExpressionImpl[thens.size()]));\n-            Expressions.acceptVisit(visitor, whens.toArray(new ExpressionImpl[whens.size()]));\n-            Expressions.acceptVisit(visitor, otherwise);\n+            visitor.enter(this);\n+            for (int i = 0; i < whens.size(); i++) {\n+                Expressions.visitChildren(visitor, whens.get(i));\n+                Expressions.visitChildren(visitor, thens.get(i));\n+            }\n+            Expressions.visitChildren(visitor, otherwise);\n+            visitor.exit(this);\n+        }\n+        \n+        @Override\n+        public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+            StringBuilder buffer = new StringBuilder(\"CASE \");\n+            int size = whens.size();\n+            for (int i = 0; i < size; i++) {\n+                buffer.append(Expressions.asValue(q, \" WHEN \", whens.get(i), \" THEN \", thens.get(i)));\n+            }\n+            buffer.append(Expressions.asValue(q, \" ELSE \", otherwise, \" END\"));\n+            return buffer;\n         }\n     }\n \n@@ -1219,10 +1549,25 @@ public SimpleCase(Expression<C> expr) {\n         }\n         \n         public void acceptVisit(CriteriaExpressionVisitor visitor) {\n-            super.acceptVisit(visitor);\n-            Expressions.acceptVisit(visitor, thens.toArray(new ExpressionImpl[thens.size()]));\n-            Expressions.acceptVisit(visitor, whens.toArray(new ExpressionImpl[whens.size()]));\n-            Expressions.acceptVisit(visitor, otherwise, caseOperand);\n+            visitor.enter(this);\n+            Expressions.visitChildren(visitor, caseOperand);\n+            for (int i = 0; i < whens.size(); i++) {\n+                Expressions.visitChildren(visitor, whens.get(i));\n+                Expressions.visitChildren(visitor, thens.get(i));\n+            }\n+            Expressions.visitChildren(visitor, otherwise);\n+            visitor.exit(this);\n+        }\n+        \n+        @Override\n+        public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+            StringBuilder buffer = new StringBuilder(\"CASE \");\n+            int size = whens.size();\n+            for (int i = 0; i < size; i++) {\n+                buffer.append(Expressions.asValue(q, \" WHEN \", whens.get(i), \" THEN \", thens.get(i)));\n+            }\n+            buffer.append(Expressions.asValue(q, \" ELSE \", otherwise, \" END\"));\n+            return buffer;\n         }\n     }\n \n@@ -1233,8 +1578,12 @@ public Lower(Expression<String> x) {\n         \n         @Override\n         public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQueryImpl<?> q) {\n-            return factory.toLowerCase(\n-                Expressions.toValue(e, factory, featureSelection, q));\n+            return factory.toLowerCase(Expressions.toValue(e, factory, featureSelection, q));\n+        }\n+        \n+        @Override\n+        public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+            return Expressions.asValue(q, \"LOWER\", OPEN_BRACE, e, CLOSE_BRACE);\n         }\n     }\n \n@@ -1244,10 +1593,13 @@ public Upper(Expression<String> x) {\n         }\n         \n         @Override\n-        public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection,\n-            CriteriaQueryImpl<?> q) {\n-            return factory.toUpperCase(\n-                Expressions.toValue(e, factory, featureSelection, q));\n+        public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQueryImpl<?> q) {\n+            return factory.toUpperCase(Expressions.toValue(e, factory, featureSelection, q));\n+        }\n+        \n+        @Override\n+        public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+            return Expressions.asValue(q, \"UPPER\", OPEN_BRACE, e, CLOSE_BRACE);\n         }\n     }\n \n@@ -1260,6 +1612,11 @@ public Length(Expression<String> x) {\n         public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQueryImpl<?> q) {\n             return factory.stringLength(Expressions.toValue(e, factory, featureSelection, q));\n         }\n+        \n+        @Override\n+        public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+            return Expressions.asValue(q, \"LENGTH\", OPEN_BRACE, e, CLOSE_BRACE);\n+        }\n     }\n     \n     public static abstract class SubqueryPredicate<X> extends PredicateImpl {\n@@ -1271,8 +1628,7 @@ public SubqueryPredicate(Subquery<X> x) {\n         }\n         \n         public void acceptVisit(CriteriaExpressionVisitor visitor) {\n-            super.acceptVisit(visitor);\n-            Expressions.acceptVisit(visitor, e);\n+            Expressions.acceptVisit(visitor, this, e);\n         }\n     }\n      \n@@ -1285,8 +1641,7 @@ public SubqueryExpression(Subquery<X> x) {\n         }\n         \n         public void acceptVisit(CriteriaExpressionVisitor visitor) {\n-            super.acceptVisit(visitor);\n-            if (e != null) e.acceptVisit(visitor);\n+            Expressions.acceptVisit(visitor, this, e);\n         }\n     }\n \n@@ -1307,6 +1662,11 @@ public PredicateImpl clone() {\n                 factory.isNotEmpty(Expressions.toValue(e, factory, featureSelection, q));\n             return isNegated() ? factory.not(exists) : exists;\n         }        \n+        \n+        @Override\n+        public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+            return Expressions.asValue(q, isNegated() ? \"NOT\" : \"\", \" EXISTS\", OPEN_BRACE, e, CLOSE_BRACE);\n+        }\n     }\n     \n     public static class All<X> extends SubqueryExpression<X> {\n@@ -1319,6 +1679,11 @@ public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection,\n             CriteriaQueryImpl<?> q) {\n             return factory.all(Expressions.toValue(e, factory, featureSelection, q));\n         }\n+        \n+        @Override\n+        public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+            return Expressions.asValue(q, \"ALL\", OPEN_BRACE, e, CLOSE_BRACE);\n+        }\n     }\n \n     public static class Any<X> extends SubqueryExpression<X> {\n@@ -1330,6 +1695,11 @@ public Any(Subquery<X> x) {\n         public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQueryImpl<?> q) {\n             return factory.any(Expressions.toValue(e, factory, featureSelection, q));\n         }\n+        \n+        @Override\n+        public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+            return Expressions.asValue(q, \"ANY\", OPEN_BRACE, e, CLOSE_BRACE);\n+        }\n     }\n \n     public static class Not<X> extends PredicateImpl {\n@@ -1351,8 +1721,12 @@ public PredicateImpl clone() {\n         }        \n         \n         public void acceptVisit(CriteriaExpressionVisitor visitor) {\n-            super.acceptVisit(visitor);\n-            Expressions.acceptVisit(visitor, e);\n+            Expressions.acceptVisit(visitor, this, e);\n+        }\n+        \n+        @Override\n+        public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+            return Expressions.asValue(q, \"NOT\", OPEN_BRACE, e, CLOSE_BRACE);\n         }\n     }\n     \n@@ -1372,8 +1746,12 @@ public CastAs(Class<Y> cast, ExpressionImpl<?> actual) {\n         }\n         \n         public void acceptVisit(CriteriaExpressionVisitor visitor) {\n-            super.acceptVisit(visitor);\n-            Expressions.acceptVisit(visitor, actual);\n+            Expressions.acceptVisit(visitor, this, actual);\n+        }\n+        \n+        @Override\n+        public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+            return actual.asValue(q);\n         }\n     }\n     \n@@ -1403,9 +1781,30 @@ public ListArgument(Class<T> cls, ExpressionImpl<?>... args) {\n         }\n         \n         public void acceptVisit(CriteriaExpressionVisitor visitor) {\n-            super.acceptVisit(visitor);\n-            Expressions.acceptVisit(visitor, _args);\n+            Expressions.acceptVisit(visitor, this, _args);\n         }\n     }\n \n+    public static class DelegatingExpression<X> extends ExpressionImpl<X> {\n+        final ExpressionImpl<? extends X> _delegate;\n+        public DelegatingExpression(ExpressionImpl<? extends X> del) {\n+            super((Class<X>)del.getJavaType());\n+            _delegate = del;\n+        }\n+        \n+        @Override\n+        Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQueryImpl<?> q) {\n+            return _delegate.toValue(factory, featureSelection, q);\n+        }\n+        \n+        @Override\n+        public org.apache.openjpa.kernel.exps.Expression toKernelExpression(\n+            ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQueryImpl<?> q) {\n+            return _delegate.toKernelExpression(factory, featureSelection, q);\n+        }\n+        \n+        public void acceptVisit(CriteriaExpressionVisitor visitor) {\n+            Expressions.acceptVisit(visitor, this, _delegate);\n+        }\n+    }\n }"},{"sha":"984348ceabc9b0e49085e87157f4c6b91ad9e4e0","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/FromImpl.java","status":"modified","additions":7,"deletions":5,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/e39a9a09e006697ef6182939c9885071e5e8d476/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/FromImpl.java","raw_url":"https://github.com/apache/openjpa/raw/e39a9a09e006697ef6182939c9885071e5e8d476/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/FromImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/FromImpl.java?ref=e39a9a09e006697ef6182939c9885071e5e8d476","patch":"@@ -28,7 +28,6 @@\n import javax.persistence.criteria.JoinType;\n import javax.persistence.criteria.ListJoin;\n import javax.persistence.criteria.MapJoin;\n-import javax.persistence.criteria.Path;\n import javax.persistence.criteria.SetJoin;\n import javax.persistence.metamodel.Attribute;\n import javax.persistence.metamodel.CollectionAttribute;\n@@ -39,12 +38,10 @@\n import javax.persistence.metamodel.SetAttribute;\n import javax.persistence.metamodel.SingularAttribute;\n import javax.persistence.metamodel.Type;\n-import javax.persistence.metamodel.PluralAttribute.CollectionType;\n import javax.persistence.metamodel.Type.PersistenceType;\n \n import org.apache.openjpa.persistence.meta.AbstractManagedType;\n import org.apache.openjpa.persistence.meta.Members;\n-import org.apache.openjpa.persistence.meta.Members.Member;\n \n /**\n  * Represents a bound type, usually an entity that appears in the from clause, \n@@ -83,7 +80,7 @@ protected FromImpl(PathImpl<?,Z> parent, Members.Member<? super Z, ?> m, Class<X\n      *  Return the joins that have been made from this receiver.\n      */\n     public java.util.Set<Join<X, ?>> getJoins() {\n-        return _joins;\n+        return Expressions.returnCopy(_joins);\n     }\n \n     /**\n@@ -272,7 +269,7 @@ private void addJoin(Join<X,?> join) {\n     }\n \n     public java.util.Set<Fetch<X, ?>> getFetches() {\n-        return _fetches;\n+        return Expressions.returnCopy(_fetches);\n     }\n     \n     private <Y> Fetch<X,Y> addFetch(Members.Member<? super X, Y> member, \n@@ -283,4 +280,9 @@ private void addJoin(Join<X,?> join) {\n         _fetches.add(fetch);\n         return fetch;\n     }\n+    \n+    public void acceptVisit(CriteriaExpressionVisitor visitor) {\n+        Expressions.acceptVisit(visitor, this, \n+                _joins == null ? null : _joins.toArray(new ExpressionImpl<?>[_joins.size()]));\n+    }\n }"},{"sha":"3b233ea34702a7a3f8c80055343121e51e9d3eb8","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/Joins.java","status":"modified","additions":52,"deletions":28,"changes":80,"blob_url":"https://github.com/apache/openjpa/blob/e39a9a09e006697ef6182939c9885071e5e8d476/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/Joins.java","raw_url":"https://github.com/apache/openjpa/raw/e39a9a09e006697ef6182939c9885071e5e8d476/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/Joins.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/Joins.java?ref=e39a9a09e006697ef6182939c9885071e5e8d476","patch":"@@ -133,7 +133,7 @@ else if (parent.inSubquery(subquery)) {\n             boolean bind = true;\n             java.util.List<Join<?,?>> corrJoins = null;\n             org.apache.openjpa.kernel.exps.Expression join = null;\n-            if (_correlatedPath == null) {\n+            if (!isCorrelated()) {\n                 if (subquery != null) {\n                     corrJoins = subquery.getCorrelatedJoins();\n                     org.apache.openjpa.kernel.exps.Subquery subQ = subquery.getSubQ();\n@@ -247,6 +247,19 @@ public void setImplicitContainsTypes(Value val1, Value val2, int op) {\n                 }\n             }\n         }\n+        \n+        @Override\n+        public StringBuilder asVariable(CriteriaQueryImpl<?> q) {\n+            String varName = \"?\";\n+            Value var = q.getRegisteredVariable(this);\n+            if (var == null) {\n+                varName = \"\"+_member.fmd.getName().charAt(0);\n+            } else {\n+                varName = var.getName();\n+            }\n+            return new StringBuilder(joinType.toString()).append(\" JOIN \")\n+                .append(super.asVariable(q)).append(\" \" + varName);\n+        }\n     }\n     \n     /**\n@@ -268,16 +281,14 @@ public AbstractCollection(FromImpl<?,Z> from, Members.PluralAttributeImpl<? supe\n             allowNull = joinType != JoinType.INNER;\n         }\n         \n-        public JoinType getJoinType() {\n+        public final JoinType getJoinType() {\n             return joinType;\n         }\n \n-        public FromImpl<?, Z> getParent() {\n-            return (FromImpl<?, Z>) _parent;\n-        }\n-        \n-        @Override\n-        public FromImpl<?, Z> getParentPath() {\n+        /**\n+         * Gets the parent of this join.\n+         */\n+        public final FromImpl<?, Z> getParent() {\n             return (FromImpl<?, Z>) _parent;\n         }\n         \n@@ -337,7 +348,7 @@ public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQue\n             PathImpl<?,?> corrRoot = getCorrelatedRoot(subquery);\n \n             PathImpl<?,?> correlatedParentPath = null;\n-            if (_correlatedPath == null) {\n+            if (!isCorrelated()) {\n                 if (subquery != null) {\n                     corrJoins = subquery.getCorrelatedJoins();\n                     org.apache.openjpa.kernel.exps.Subquery subQ = subquery.getSubQ();\n@@ -351,8 +362,9 @@ public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQue\n                         if (c.isRegistered(_parent)) { \n                             Value var = c.getRegisteredVariable(_parent);\n                             path = factory.newPath(var);\n-                        } else \n+                        } else {\n                             path = factory.newPath(subQ);\n+                        }\n                         path.setMetaData(meta);\n                         path.get(_member.fmd, false);\n                         path.setSchemaAlias(c.getAlias(_parent));\n@@ -362,9 +374,9 @@ public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQue\n                     path = factory.newPath(var);\n                     path.setMetaData(meta);\n                     path.get(_member.fmd, false);\n-                } else            \n+                } else {           \n                     path = (org.apache.openjpa.kernel.exps.Path)toValue(factory, featureSelection, c);\n-\n+                }\n                 Class<?> type = meta == null ? AbstractExpressionBuilder.TYPE_OBJECT : meta.getDescribedType(); \n                 if (bind) {\n                     Value var = factory.newBoundVariable(c.getAlias(this), type);\n@@ -386,10 +398,10 @@ public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQue\n                 if (corrJoins != null && corrJoins.contains(_parent)) {\n                     Value var = getVariableForCorrPath(subquery, correlatedParentPath);\n                     parentPath = factory.newPath(var);\n-                } else \n+                } else {\n                     parentPath = (org.apache.openjpa.kernel.exps.Path)\n                         correlatedParentPath.toValue(factory, featureSelection, c);\n-                \n+                }\n                 parentPath.get(_member.fmd, allowNull);\n                 parentPath.setSchemaAlias(c.getAlias(correlatedParentPath));\n                 if (c.ctx().getParent() != null && c.ctx().getVariable(parentPath.getSchemaAlias()) == null) \n@@ -404,11 +416,11 @@ public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQue\n                 if (_member.fmd.getDeclaredTypeCode() == JavaTypes.MAP)\n                     c.registerVariable(this, var, parentPath);\n                 \n-                if (_member.fmd.isElementCollection()) \n+                if (_member.fmd.isElementCollection()) {\n                     filter = CriteriaExpressionBuilder.and(factory, join, filter);\n-                else \n+                } else { \n                     filter = factory.equal(parentPath, path);\n-                \n+                }\n                 return CriteriaExpressionBuilder.and(factory, expr, filter);\n             }\n         }\n@@ -433,13 +445,12 @@ private Value getVariableForCorrPath(SubqueryImpl<?> subquery, PathImpl<?,?> pat\n      */\n     public static class Collection<Z,E> extends AbstractCollection<Z,java.util.Collection<E>,E> \n         implements CollectionJoin<Z,E>{\n-        public Collection(FromImpl<?,Z> parent, \n-            Members.CollectionAttributeImpl<? super Z, E> member, JoinType jt) {\n+        public Collection(FromImpl<?,Z> parent, Members.CollectionAttributeImpl<? super Z, E> member, JoinType jt) {\n             super(parent, member, jt);\n         }\n         \n         public CollectionAttribute<? super Z, E> getModel() {\n-            return (CollectionAttribute<? super Z, E>)_member.getType();\n+            return (CollectionAttribute<? super Z, E>)_member;\n         }\n     }\n     \n@@ -450,7 +461,7 @@ public Collection(FromImpl<?,Z> parent,\n      * @param <E> the type of the the set attribute elements\n      */\n     public static class Set<Z,E> extends AbstractCollection<Z,java.util.Set<E>,E> \n-        implements SetJoin<Z,E>{\n+        implements SetJoin<Z,E> {\n         public Set(FromImpl<?,Z> parent, Members.SetAttributeImpl<? super Z, E> member, JoinType jt) {\n             super(parent, member, jt);\n         }\n@@ -470,13 +481,12 @@ public Set(FromImpl<?,Z> parent, Members.SetAttributeImpl<? super Z, E> member,\n     public static class List<Z,E> extends AbstractCollection<Z,java.util.List<E>,E> \n         implements ListJoin<Z,E> {\n         \n-        public List(FromImpl<?,Z> parent, \n-            Members.ListAttributeImpl<? super Z, E> member, JoinType jt) {\n+        public List(FromImpl<?,Z> parent, Members.ListAttributeImpl<? super Z, E> member, JoinType jt) {\n             super(parent, member, jt);\n         }\n         \n         public ListAttribute<? super Z, E> getModel() {\n-            return (ListAttribute<? super Z, E>)_member.getType();\n+            return (ListAttribute<? super Z, E>)_member;\n         }\n         \n         public Expression<Integer> index() {\n@@ -509,8 +519,8 @@ public Map(FromImpl<?,Z> parent, Members.MapAttributeImpl<? super Z, K,V> member\n         }\n         \n         /**\n-         * Create a pseudo-attribute of a pseudo-managed type for java.util.Map&lt;K,V&gt; to represent its keys as \n-         * a pseudo-attribute of type java.util.Set&lt;V&gt;.\n+         * Create a pseudo-attribute of a pseudo-managed type for java.util.Map&lt;K,V&gt; \n+         * to represent its keys of type java.util.Set&lt;V&gt;.\n          */\n         public Join<java.util.Map<K, V>, K> joinKey(JoinType jt) {\n             AbstractManagedType<java.util.Map<K,V>> pseudoOwner = (AbstractManagedType<java.util.Map<K,V>>)\n@@ -564,12 +574,18 @@ public MapKey(Map<Z,K,?> joinMap){\n         */\n        @Override\n        public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQueryImpl<?> c) {\n-           SubqueryImpl<?> subquery = c.getDelegator();\n-           PathImpl<?,?> parent = map.getInnermostParentPath();\n            Value val = c.getRegisteredVariable(map);\n            org.apache.openjpa.kernel.exps.Path path = factory.newPath(val);\n            return factory.getKey(path);\n        }\n+       \n+       @Override\n+       public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+           StringBuilder buffer = new StringBuilder(\"KEY(\");\n+           Value var = q.getRegisteredVariable(map);\n+           buffer.append(var != null ? var.getName() : map.asValue(q)).append(\")\");\n+           return buffer;\n+       }\n    }\n        \n    public static class MapEntry<K,V> extends ExpressionImpl<java.util.Map.Entry<K,V>> {\n@@ -591,6 +607,14 @@ public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQue\n            org.apache.openjpa.kernel.exps.Path var = factory.newPath(val);\n            return factory.mapEntry(path, var);\n        }\n+       \n+       @Override\n+       public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+           StringBuilder buffer = new StringBuilder(\"ENTRY(\");\n+           Value var = q.getRegisteredVariable(map);\n+           buffer.append(var != null ? var.getName() : map.asValue(q)).append(\")\");\n+           return buffer;\n+       }\n    }\n    \n    /**"},{"sha":"9053baa785c9c0a4009c0e34a2405848f6a87ac6","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/OpenJPACriteriaQuery.java","status":"added","additions":21,"deletions":0,"changes":21,"blob_url":"https://github.com/apache/openjpa/blob/e39a9a09e006697ef6182939c9885071e5e8d476/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/OpenJPACriteriaQuery.java","raw_url":"https://github.com/apache/openjpa/raw/e39a9a09e006697ef6182939c9885071e5e8d476/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/OpenJPACriteriaQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/OpenJPACriteriaQuery.java?ref=e39a9a09e006697ef6182939c9885071e5e8d476","patch":"@@ -0,0 +1,21 @@\n+package org.apache.openjpa.persistence.criteria;\n+\n+import javax.persistence.criteria.CriteriaQuery;\n+\n+/**\n+ * OpenJPA-specific extension to JPA 2.0 Criteria Query API.\n+ * \n+ * @param <T> type of result returned by this query\n+ * \n+ * @author Pinaki Poddar\n+ * @since 2.0.0\n+ */\n+public interface OpenJPACriteriaQuery<T> extends CriteriaQuery<T> {\n+    /**\n+     * Convert the query to a JPQL-like string.\n+     * The conversion of Criteria Query may not be an exact JPQL string.\n+     *  \n+     * @return a JPQL-like string.\n+     */\n+    public String toCQL();\n+}"},{"sha":"db8fd4fd5507ed5661a29001d54962422f721def","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/OrderImpl.java","status":"modified","additions":16,"deletions":1,"changes":17,"blob_url":"https://github.com/apache/openjpa/blob/e39a9a09e006697ef6182939c9885071e5e8d476/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/OrderImpl.java","raw_url":"https://github.com/apache/openjpa/raw/e39a9a09e006697ef6182939c9885071e5e8d476/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/OrderImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/OrderImpl.java?ref=e39a9a09e006697ef6182939c9885071e5e8d476","patch":"@@ -27,7 +27,7 @@\n  * @author Pinaki Poddar\n  *\n  */\n-public class OrderImpl implements Order {\n+public class OrderImpl implements Order, CriteriaExpression {\n \tprivate boolean _ascending;\n \tprivate final ExpressionImpl<?> e;\n \t\n@@ -52,4 +52,19 @@ public Order reverse() {\n \t\t_ascending = !_ascending;\n \t\treturn this;\n \t}\n+\t\n+    public void acceptVisit(CriteriaExpressionVisitor visitor) {\n+        if (!visitor.isVisited(this)) {\n+            visitor.enter(this);\n+            visitor.exit(this);\n+        }\n+    }\n+    \n+    public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+        return e.asValue(q).append(_ascending ? \"\" : \" DESC\");\n+    }\n+    \n+    public StringBuilder asVariable(CriteriaQueryImpl<?> q) {\n+        throw new IllegalStateException(this + \" can not be rendered as variable\");\n+    }\n }"},{"sha":"0fcdb464572c991548ddaef8369997f1e0690f4a","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/PathImpl.java","status":"modified","additions":34,"deletions":4,"changes":38,"blob_url":"https://github.com/apache/openjpa/blob/e39a9a09e006697ef6182939c9885071e5e8d476/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/PathImpl.java","raw_url":"https://github.com/apache/openjpa/raw/e39a9a09e006697ef6182939c9885071e5e8d476/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/PathImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/PathImpl.java?ref=e39a9a09e006697ef6182939c9885071e5e8d476","patch":"@@ -46,7 +46,7 @@\n /**\n  * Path is an expression often representing a persistent attribute traversed from another (parent) path.\n  * The type of the path is the type of the persistent attribute.\n- * If the persistent attribute is bindable, then further path can be travesered from this path. \n+ * If the persistent attribute is bindable, then further path can be traversed from this path. \n  * \n  * @author Pinaki Poddar\n  * @author Fay Wang\n@@ -58,7 +58,7 @@\n     protected final PathImpl<?,Z> _parent;\n     protected final Members.Member<? super Z,?> _member;\n     private boolean isEmbedded = false;\n-    protected PathImpl<?,?> _correlatedPath;\n+    private PathImpl<?,?> _correlatedPath;\n     \n     /**\n      * Protected constructor use by root path which neither represent a member nor has a parent. \n@@ -100,7 +100,7 @@ public PathImpl(PathImpl<?,Z> parent, Members.Member<? super Z, ?> member, Class\n     /**\n      *  Return the parent \"node\" in the path or null if no parent.\n      */\n-    public Path<Z> getParentPath() {\n+    public final Path<Z> getParentPath() {\n         return _parent;\n     }\n     \n@@ -126,21 +126,34 @@ protected FieldMetaData getEmbeddedFieldMetaData(FieldMetaData fmd) {\n         return member != null ? member : getInnermostMember(parent._parent,  parent._member); \n     }\n     \n+    /**\n+     * Makes this path correlated to the given path.  \n+     */\n     public void setCorrelatedPath(PathImpl<?,?> correlatedPath) {\n         _correlatedPath = correlatedPath;\n     }\n     \n+    /**\n+     * Gets the path correlated to this path, if any.\n+     */\n     public PathImpl<?,?> getCorrelatedPath() {\n         return _correlatedPath;\n     }\n     \n+    /**\n+     * Affirms if this path is correlated to another path.\n+     */\n+    public boolean isCorrelated() {\n+        return _correlatedPath != null;\n+    }\n+    \n     /**\n      * Convert this path to a kernel path.\n      */\n     @Override\n     public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection,  CriteriaQueryImpl<?> q) {\n         if (q.isRegistered(this))\n-            return q.getValue(this);\n+            return q.getRegisteredValue(this);\n         org.apache.openjpa.kernel.exps.Path path = null;\n         SubqueryImpl<?> subquery = q.getDelegator();\n         boolean allowNull = _parent == null ? false : _parent instanceof Join \n@@ -265,4 +278,21 @@ protected void traversePath(PathImpl<?,?> parent,  org.apache.openjpa.kernel.exp\n     public Expression<Class<? extends X>> type() {\n         return new Expressions.Type<Class<? extends X>>(this);\n     }\n+    \n+    public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+        StringBuilder buffer = new StringBuilder();\n+        if (_parent != null) {\n+            Value var = q.getRegisteredVariable(_parent);\n+            buffer.append(var != null ? var.getName() : _parent.asValue(q)).append(\".\");\n+        }\n+        if (_member != null) {\n+            buffer.append(_member.fmd.getName());\n+        } \n+        return buffer;\n+    }\n+    \n+    public StringBuilder asVariable(CriteriaQueryImpl<?> q) {\n+        Value var = q.getRegisteredVariable(this);\n+        return asValue(q).append(\" \").append(var == null ? \"?\" : var.getName());\n+    }\n }"},{"sha":"53f82cd526383ed11451410e88c8fba1922dba45","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/PredicateImpl.java","status":"modified","additions":28,"deletions":14,"changes":42,"blob_url":"https://github.com/apache/openjpa/blob/e39a9a09e006697ef6182939c9885071e5e8d476/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/PredicateImpl.java","raw_url":"https://github.com/apache/openjpa/raw/e39a9a09e006697ef6182939c9885071e5e8d476/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/PredicateImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/PredicateImpl.java?ref=e39a9a09e006697ef6182939c9885071e5e8d476","patch":"@@ -30,23 +30,32 @@\n import org.apache.openjpa.persistence.meta.MetamodelImpl;\n \n public class PredicateImpl extends ExpressionImpl<Boolean> implements Predicate {\n-    private static final ExpressionImpl<Integer> ONE = new Expressions.Constant<Integer>(1);\n+    private static final ExpressionImpl<Integer> ONE  = new Expressions.Constant<Integer>(1);\n     public static final ExpressionImpl<Boolean> TRUE  = new Expressions.Equal(ONE,ONE);\n     public static final ExpressionImpl<Boolean> FALSE = new Expressions.Equal(ONE,ONE).negate();\n     \n     List<Expression<Boolean>> _exps;\n-    BooleanOperator _op = BooleanOperator.AND;\n-    boolean _negated = false;\n+    protected final BooleanOperator _op;\n+    private boolean _negated = false;\n \n+    /**\n+     * A predicate with empty name and AND operator.\n+     */\n     protected PredicateImpl() {\n-        super(Boolean.class);\n+        this(BooleanOperator.AND);\n     }\n-\n+    \n+    /**\n+     * A predicate with given name and given operator.\n+     */\n     protected PredicateImpl(BooleanOperator op) {\n-        this();\n+        super(Boolean.class);\n         _op = op;\n     }\n \n+    /**\n+     * A predicate with given name, given operator with given arguments.\n+     */\n     protected PredicateImpl(BooleanOperator op, Predicate...restrictions) {\n         this(op);\n         if (restrictions != null) {\n@@ -55,6 +64,9 @@ protected PredicateImpl(BooleanOperator op, Predicate...restrictions) {\n         }\n     }\n \n+    /**\n+     * Adds the given predicate expression.\n+     */\n     public PredicateImpl add(Expression<Boolean> s) {\n         if (_exps == null)\n             _exps = new ArrayList<Expression<Boolean>>();\n@@ -63,14 +75,14 @@ public PredicateImpl add(Expression<Boolean> s) {\n     }\n \n     public List<Expression<Boolean>> getExpressions() {\n-        return _exps == null ? Collections.EMPTY_LIST : new CopyOnWriteArrayList<Expression<Boolean>>(_exps);\n+        return Expressions.returnCopy(_exps);\n     }\n \n-    public BooleanOperator getOperator() {\n+    public final BooleanOperator getOperator() {\n         return _op;\n     }\n \n-    public boolean isNegated() {\n+    public final boolean isNegated() {\n         return _negated;\n     }\n \n@@ -125,12 +137,14 @@ public PredicateImpl clone() {\n     }\n \n     public void acceptVisit(CriteriaExpressionVisitor visitor) {\n-        if (_exps == null)\n-            return;\n-        for (Expression<?> e : _exps) {\n-            ((ExpressionImpl<?>)e).acceptVisit(visitor);\n-        }\n+        Expressions.acceptVisit(visitor, this, _exps == null ? null : _exps.toArray(new Expression<?>[_exps.size()]));\n+    }\n+    \n+    public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+        return Expressions.asValue(q, _exps == null ? null : _exps.toArray(new Expression<?>[_exps.size()]), \n+            \" \" +_op + \" \");\n     }\n+\n     \n     public static class And extends PredicateImpl {\n         public And(Expression<Boolean> x, Expression<Boolean> y) {"},{"sha":"d582e4149b69bb6cb1a23c948c0ee3134b090b52","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/RootImpl.java","status":"modified","additions":18,"deletions":7,"changes":25,"blob_url":"https://github.com/apache/openjpa/blob/e39a9a09e006697ef6182939c9885071e5e8d476/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/RootImpl.java","raw_url":"https://github.com/apache/openjpa/raw/e39a9a09e006697ef6182939c9885071e5e8d476/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/RootImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/RootImpl.java?ref=e39a9a09e006697ef6182939c9885071e5e8d476","patch":"@@ -50,13 +50,11 @@ public RootImpl(Types.Entity<X> type) {\n         return _entity;\n     }\n \n-    public void addToContext(ExpressionFactory factory, MetamodelImpl featureSelection,\n-            CriteriaQueryImpl<?> q) {\n+    public void addToContext(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQueryImpl<?> q) {\n         String alias = q.getAlias(this);\n-        Value var = factory.newBoundVariable(alias, \n-            AbstractExpressionBuilder.TYPE_OBJECT);\n+        Value var = factory.newBoundVariable(alias, AbstractExpressionBuilder.TYPE_OBJECT);\n         var.setMetaData(_entity.meta);\n-        Context currContext = (Context) q.getContexts().peek();\n+        Context currContext = q.ctx();\n         currContext.addSchema(alias, _entity.meta);\n         currContext.addVariable(alias, var);\n         if (currContext.schemaAlias == null)\n@@ -101,7 +99,20 @@ public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection,\n         return factory.bindVariable(var, path);\n     }\n     \n-    public String toString() {\n-        return _entity.toString();\n+    public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+        Value v = q.getRegisteredRootVariable(this);\n+        if (v != null)\n+            return new StringBuilder(v.getAlias());\n+        v = q.getRegisteredValue(this);\n+        if (v != null)\n+            return new StringBuilder(v.getAlias());\n+        if (q.isRegistered(this)) \n+            return new StringBuilder(q.getRegisteredValue(this).getName());\n+        return new StringBuilder().append(Character.toLowerCase(_entity.getName().charAt(0)));\n     }\n+    \n+    public StringBuilder asVariable(CriteriaQueryImpl<?> q) {\n+        return new StringBuilder(_entity.getName()).append(\" \").append(asValue(q));\n+    }\n+\n }"},{"sha":"7dcb62511deb7909393842d5bade664e61409b5f","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/SelectionImpl.java","status":"modified","additions":15,"deletions":1,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/e39a9a09e006697ef6182939c9885071e5e8d476/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/SelectionImpl.java","raw_url":"https://github.com/apache/openjpa/raw/e39a9a09e006697ef6182939c9885071e5e8d476/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/SelectionImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/SelectionImpl.java?ref=e39a9a09e006697ef6182939c9885071e5e8d476","patch":"@@ -20,6 +20,7 @@\n \n import java.util.List;\n \n+import javax.persistence.criteria.Expression;\n import javax.persistence.criteria.Selection;\n \n import org.apache.openjpa.persistence.TupleElementImpl;\n@@ -32,7 +33,7 @@\n  * @param <X>\n  */\n public class SelectionImpl<X> extends TupleElementImpl<X> \n-    implements Selection<X> {\n+    implements Selection<X>, CriteriaExpression {\n     \n     public SelectionImpl(Class<X> cls) {\n         super(cls);\n@@ -50,4 +51,17 @@ public SelectionImpl(Class<X> cls) {\n     public boolean isCompoundSelection() {\n         return false;\n     }\n+    \n+    public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+        throw new IllegalStateException(this.getClass().getSimpleName() + \" can not be rendered as value\");\n+    }\n+    \n+    public StringBuilder asVariable(CriteriaQueryImpl<?> q) {\n+        throw new IllegalStateException(this.getClass().getSimpleName() + \" can not be rendered as variable\");\n+    }\n+    \n+    public void acceptVisit(CriteriaExpressionVisitor visitor) {\n+        Expressions.acceptVisit(visitor, this, (Expression<?>[])null);\n+    }\n+\n }"},{"sha":"c0f36b21dece4e5ac1ec194fa7838c001f81a339","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/SubqueryImpl.java","status":"modified","additions":78,"deletions":23,"changes":101,"blob_url":"https://github.com/apache/openjpa/blob/e39a9a09e006697ef6182939c9885071e5e8d476/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/SubqueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/e39a9a09e006697ef6182939c9885071e5e8d476/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/SubqueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/SubqueryImpl.java?ref=e39a9a09e006697ef6182939c9885071e5e8d476","patch":"@@ -19,7 +19,6 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.util.ArrayList;\n-import java.util.LinkedHashSet;\n import java.util.List;\n import java.util.Set;\n import java.util.Stack;\n@@ -43,15 +42,17 @@\n import org.apache.openjpa.kernel.exps.Value;\n import org.apache.openjpa.kernel.jpql.JPQLExpressionBuilder;\n import org.apache.openjpa.meta.ClassMetaData;\n-import org.apache.openjpa.meta.JavaTypes;\n+import org.apache.openjpa.meta.FieldMetaData;\n+import org.apache.openjpa.meta.ValueMetaData;\n import org.apache.openjpa.persistence.meta.AbstractManagedType;\n import org.apache.openjpa.persistence.meta.Members;\n import org.apache.openjpa.persistence.meta.MetamodelImpl;\n import org.apache.openjpa.persistence.meta.Types;\n \n /**\n  * Subquery is an expression which itself is a query and always appears in the\n- * context of a parent query.\n+ * context of a parent query. A subquery delegates to a captive query for most\n+ * of the operations but also maintains its own joins and correlated joins.\n  * \n  * @author Pinaki Poddar\n  * @author Fay Wang\n@@ -63,11 +64,16 @@\n     private final CriteriaQueryImpl<T> _delegate;\n     private final MetamodelImpl  _model;\n     private java.util.Set<Join<?,?>> _joins;\n-    private Expression<T> _select;\n     private org.apache.openjpa.kernel.exps.Subquery _subq;\n     private List<Join<?,?>> _corrJoins = null;\n     \n-    public SubqueryImpl(Class<T> cls, AbstractQuery<?> parent) {\n+    /**\n+     * Construct a subquery always in the context of a parent query.\n+     * \n+     * @param cls the result type of this subquery\n+     * @param parent the non-null parent query which itself can be a subquery.\n+     */\n+    SubqueryImpl(Class<T> cls, AbstractQuery<?> parent) {\n         super(cls);\n         _parent = parent;\n         if (parent instanceof CriteriaQueryImpl) {\n@@ -80,35 +86,44 @@ public SubqueryImpl(Class<T> cls, AbstractQuery<?> parent) {\n         _delegate = new CriteriaQueryImpl<T>(_model, this);\n     }\n     \n+    /**\n+     * Gets the parent query of this subquery.\n+     * Can be a query or another subquery.\n+     */\n     public AbstractQuery<?> getParent() {\n         return _parent;\n     }\n     \n-    public CriteriaQueryImpl<T> getDelegate() {\n+    /**\n+     * Gets the captive query to which this subquery delegates.\n+     */\n+    CriteriaQueryImpl<T> getDelegate() {\n         return _delegate;\n     }\n     \n     public MetamodelImpl getMetamodel() {\n         return _model;\n     }\n     \n-    public Stack<Context> getContexts() {\n+    Stack<Context> getContexts() {\n         return getInnermostParent().getContexts();\n     }\n     \n+    /**\n+     * Gets the 'root' query for this subquery.\n+     */\n     public CriteriaQueryImpl<?> getInnermostParent() {\n         return (CriteriaQueryImpl<?>)(((_parent instanceof CriteriaQueryImpl)) ? \n             _parent : ((SubqueryImpl<?>)_parent).getInnermostParent());\n     }\n \n     public Subquery<T> select(Expression<T> expression) {\n-        _select = expression;\n         _delegate.select(expression);\n         return this;\n     }\n     \n     public Expression<T> getSelection() {\n-        return _select;\n+        return (Expression<T>)_delegate.getSelection();\n     }\n     \n     public <X> Root<X> from(EntityType<X> entity) {\n@@ -124,7 +139,7 @@ public MetamodelImpl getMetamodel() {\n     }\n     \n     public Root<?> getRoot() {\n-        return _delegate.getRoot();\n+        return _delegate.getRoot(false);\n     }    \n \n     public Subquery<T> where(Expression<Boolean> restriction) {\n@@ -174,9 +189,12 @@ public boolean isDistinct() {\n     }\n \n     public <U> Subquery<U> subquery(Class<U> type) {\n-        return new SubqueryImpl<U>(type, _delegate);\n+        return new SubqueryImpl<U>(type, this);\n     }\n     \n+    /**\n+     * Correlate this subquery with the given root.\n+     */\n     public <Y> Root<Y> correlate(Root<Y> root) {\n         Types.Entity<Y> entity = (Types.Entity<Y>)root.getModel();\n         RootImpl<Y> corrRoot = new RootImpl<Y>(entity);\n@@ -189,13 +207,16 @@ public boolean isDistinct() {\n         return _corrJoins;\n     }\n     \n+    /**\n+     * Correlate this subquery with the given join.\n+     */\n     public <X,Y> Join<X,Y> correlate(Join<X,Y> parentJoin) {\n-        Join corrJoin = clone(parentJoin);\n+        Join<?,?> corrJoin = clone(parentJoin);\n         ((PathImpl<?,?>)corrJoin).setCorrelatedPath((PathImpl<?,?>)parentJoin);\n         if (_corrJoins == null)\n             _corrJoins = new ArrayList<Join<?,?>>();\n         _corrJoins.add(corrJoin);\n-        return corrJoin;\n+        return (Join<X,Y>)corrJoin;\n     }\n     \n     private Join<?,?> clone(Join<?,?> join) {\n@@ -211,6 +232,13 @@ public boolean isDistinct() {\n         return join1;\n     }\n     \n+    /**\n+     * Affirms if this is a correlated subquery.\n+     */\n+    public boolean isCorrelated() {\n+        return _corrJoins != null;\n+    }\n+    \n     private Join<?,?> makeJoin(FromImpl<?,?> parent, Members.SingularAttributeImpl<?,?> member, JoinType jt) {\n         return new Joins.SingularJoin(parent, member, jt);\n     }\n@@ -289,7 +317,7 @@ public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQue\n     // correlated parent, the candidate of the subquery\n     // should be the class metadata of the collection element \n     private ClassMetaData getCandidate() {\n-        if (_delegate.getRoots() == null && _corrJoins != null) {\n+        if (getRoots().isEmpty() && _corrJoins != null) {\n             FromImpl<?,?> corrJoin = (FromImpl<?,?>) _corrJoins.get(0);\n             if (corrJoin.getJoins() != null) {\n                 FromImpl<?,?> join = (FromImpl<?,?>)corrJoin.getJoins().iterator().next();\n@@ -298,7 +326,7 @@ private ClassMetaData getCandidate() {\n         }\n          \n         RootImpl<?> root = (RootImpl<?>)getRoot();\n-        if (root.getCorrelatedPath() != null && root.getJoins() != null) {\n+        if (root != null && root.getCorrelatedPath() != null && !root.getJoins().isEmpty()) {\n             FromImpl<?,?> join = (FromImpl<?,?>) root.getJoins().iterator().next();\n             return getInnermostCandidate(join);\n         }\n@@ -307,7 +335,7 @@ private ClassMetaData getCandidate() {\n     }\n     \n     private ClassMetaData getInnermostCandidate(FromImpl<?,?> from) {\n-        if (from.getJoins() != null) {\n+        if (!from.getJoins().isEmpty()) {\n             from = (FromImpl<?,?>) from.getJoins().iterator().next();\n             return getInnermostCandidate(from);\n         }\n@@ -316,16 +344,43 @@ private ClassMetaData getInnermostCandidate(FromImpl<?,?> from) {\n     \n     \n     private ClassMetaData getCandidate(FromImpl<?,?> from) {\n-        if (from._member.fmd.getDeclaredTypeCode() == JavaTypes.COLLECTION || \n-            from._member.fmd.getDeclaredTypeCode() == JavaTypes.MAP)\n-            return from._member.fmd.isElementCollection()\n-                ? from._member.fmd.getElement().getEmbeddedMetaData()\n-                : from._member.fmd.getElement().getDeclaredTypeMetaData();\n-        return from._member.fmd.getDeclaredTypeMetaData();\n-        \n+        return getFieldType(from._member.fmd);\n     }\n     \n+    private static ClassMetaData getFieldType(FieldMetaData fmd) {\n+        if (fmd == null)\n+            return null;\n+\n+        ClassMetaData cmd = null;\n+        ValueMetaData vmd;\n+\n+        if ((vmd = fmd.getElement()) != null)\n+            cmd = vmd.getDeclaredTypeMetaData();\n+        else if ((vmd = fmd.getKey()) != null)\n+            cmd = vmd.getDeclaredTypeMetaData();\n+        else if ((vmd = fmd.getValue()) != null)\n+            cmd = vmd.getDeclaredTypeMetaData();\n+\n+        if (cmd == null || cmd.getDescribedType() == Object.class)\n+            cmd = fmd.getDeclaredTypeMetaData();\n+        if (cmd == null && fmd.isElementCollection())\n+            cmd = fmd.getDefiningMetaData();\n+\n+        return cmd;\n+    }\n+\n+    \n     public Class<T> getResultType() {\n         return getJavaType();\n     }\n+    \n+    public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n+        StringBuilder buffer = new StringBuilder();\n+        _delegate.render(buffer, _delegate.getRoots(), _corrJoins);\n+        return buffer;\n+    }\n+    \n+    public StringBuilder asVariable(CriteriaQueryImpl<?> q) {\n+        return asValue(q);\n+    }\n }"}]}

