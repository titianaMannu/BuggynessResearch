{"sha":"e3ba21274ec6fcbf03a549fd227f85efbb8d6de2","node_id":"MDY6Q29tbWl0MjA2MzY0OmUzYmEyMTI3NGVjNmZjYmYwM2E1NDlmZDIyN2Y4NWVmYmI4ZDZkZTI=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-06-10T21:31:58Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-06-10T21:31:58Z"},"message":"OPENJPA-632 porting svn rev 584463 to 1.0.x. The overridden toSelect() signature in the OracleDictionary was no longer appropriate since the DBDictionary.toSelect() change in revision #577972 (which fixed OPENJPA-378). This resulted in the special Oracle range handing to no longer take place, resulting in setFirstResult() and setMaxResults() effectively being ignored for Oracle. \n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@666334 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"bea9e0957dd66b921accb4eaf43535b91d2cf35a","url":"https://api.github.com/repos/apache/openjpa/git/trees/bea9e0957dd66b921accb4eaf43535b91d2cf35a"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/e3ba21274ec6fcbf03a549fd227f85efbb8d6de2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/e3ba21274ec6fcbf03a549fd227f85efbb8d6de2","html_url":"https://github.com/apache/openjpa/commit/e3ba21274ec6fcbf03a549fd227f85efbb8d6de2","comments_url":"https://api.github.com/repos/apache/openjpa/commits/e3ba21274ec6fcbf03a549fd227f85efbb8d6de2/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"b5c7d0ba297d3dc9eb5db4a2e45e316aa0fd7acc","url":"https://api.github.com/repos/apache/openjpa/commits/b5c7d0ba297d3dc9eb5db4a2e45e316aa0fd7acc","html_url":"https://github.com/apache/openjpa/commit/b5c7d0ba297d3dc9eb5db4a2e45e316aa0fd7acc"}],"stats":{"total":17,"additions":10,"deletions":7},"files":[{"sha":"b46aa17e01af9b9f12d944051af37a9e447c87c4","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java","status":"modified","additions":10,"deletions":7,"changes":17,"blob_url":"https://github.com/apache/openjpa/blob/e3ba21274ec6fcbf03a549fd227f85efbb8d6de2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/e3ba21274ec6fcbf03a549fd227f85efbb8d6de2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java?ref=e3ba21274ec6fcbf03a549fd227f85efbb8d6de2","patch":"@@ -46,6 +46,7 @@\n import org.apache.openjpa.jdbc.schema.PrimaryKey;\n import org.apache.openjpa.jdbc.schema.Sequence;\n import org.apache.openjpa.jdbc.schema.Table;\n+import org.apache.openjpa.jdbc.sql.Select;\n import org.apache.openjpa.lib.jdbc.DelegatingDatabaseMetaData;\n import org.apache.openjpa.lib.jdbc.DelegatingPreparedStatement;\n import org.apache.openjpa.lib.util.J2DoPrivHelper;\n@@ -357,7 +358,8 @@ public SQLBuffer toNativeJoin(Join join) {\n     public SQLBuffer toSelect(SQLBuffer select, JDBCFetchConfiguration fetch,\n         SQLBuffer tables, SQLBuffer where, SQLBuffer group,\n         SQLBuffer having, SQLBuffer order,\n-        boolean distinct, boolean forUpdate, long start, long end) {\n+        boolean distinct, boolean forUpdate, long start, long end,\n+        Select sel) {\n         if (!_checkedUpdateBug) {\n             ensureDriverVendor();\n             if (forUpdate && _driverBehavior == BEHAVE_DATADIRECT31)\n@@ -368,7 +370,7 @@ public SQLBuffer toSelect(SQLBuffer select, JDBCFetchConfiguration fetch,\n         // if no range, use standard select\n         if (start == 0 && end == Long.MAX_VALUE)\n             return super.toSelect(select, fetch, tables, where, group, having,\n-                order, distinct, forUpdate, 0, Long.MAX_VALUE);\n+                order, distinct, forUpdate, 0, Long.MAX_VALUE, sel);\n \n         // if no skip, ordering, or distinct can use rownum directly\n         SQLBuffer buf = new SQLBuffer(this);\n@@ -377,17 +379,18 @@ public SQLBuffer toSelect(SQLBuffer select, JDBCFetchConfiguration fetch,\n                 buf.append(where).append(\" AND \");\n             buf.append(\"ROWNUM <= \").appendValue(end);\n             return super.toSelect(select, fetch, tables, buf, group, having,\n-                order, distinct, forUpdate, 0, Long.MAX_VALUE);\n+                order, distinct, forUpdate, 0, Long.MAX_VALUE, sel);\n         }\n \n         // if there is ordering, skip, or distinct we have to use subselects\n-        SQLBuffer sel = super.toSelect(select, fetch, tables, where,\n-            group, having, order, distinct, forUpdate, 0, Long.MAX_VALUE);\n+        SQLBuffer newsel = super.toSelect(select, fetch, tables, where,\n+            group, having, order, distinct, forUpdate, 0, Long.MAX_VALUE,\n+            sel);\n \n         // if no skip, can use single nested subselect\n         if (start == 0) {\n             buf.append(getSelectOperation(fetch) + \" * FROM (\");\n-            buf.append(sel);\n+            buf.append(newsel);\n             buf.append(\") WHERE ROWNUM <= \").appendValue(end);\n             return buf;\n         }\n@@ -396,7 +399,7 @@ public SQLBuffer toSelect(SQLBuffer select, JDBCFetchConfiguration fetch,\n         // where conditions on the rownum\n         buf.append(getSelectOperation(fetch)\n             + \" * FROM (SELECT r.*, ROWNUM RNUM FROM (\");\n-        buf.append(sel);\n+        buf.append(newsel);\n         buf.append(\") r\");\n         if (end != Long.MAX_VALUE)\n             buf.append(\" WHERE ROWNUM <= \").appendValue(end);"}]}

