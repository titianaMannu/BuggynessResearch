{"sha":"e406bda450a1f3b78836153a5a34882c823101b1","node_id":"MDY6Q29tbWl0MjA2MzY0OmU0MDZiZGE0NTBhMWYzYjc4ODM2MTUzYTVhMzQ4ODJjODIzMTAxYjE=","commit":{"author":{"name":"Jody Grassel","email":"jgrassel@apache.org","date":"2013-07-01T16:58:11Z"},"committer":{"name":"Jody Grassel","email":"jgrassel@apache.org","date":"2013-07-01T16:58:11Z"},"message":"OPENJPA-2405: EntityManager.merge does not work for entity that is managed by another EntityManager\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1498565 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d198f94145a32596791b5c083fb70a5a64bf819b","url":"https://api.github.com/repos/apache/openjpa/git/trees/d198f94145a32596791b5c083fb70a5a64bf819b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/e406bda450a1f3b78836153a5a34882c823101b1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/e406bda450a1f3b78836153a5a34882c823101b1","html_url":"https://github.com/apache/openjpa/commit/e406bda450a1f3b78836153a5a34882c823101b1","comments_url":"https://api.github.com/repos/apache/openjpa/commits/e406bda450a1f3b78836153a5a34882c823101b1/comments","author":null,"committer":null,"parents":[{"sha":"c7b4e05b1e98796917b2a67ca87f582a292d13c8","url":"https://api.github.com/repos/apache/openjpa/commits/c7b4e05b1e98796917b2a67ca87f582a292d13c8","html_url":"https://github.com/apache/openjpa/commit/c7b4e05b1e98796917b2a67ca87f582a292d13c8"}],"stats":{"total":85,"additions":84,"deletions":1},"files":[{"sha":"780e841042a57acd2bbc3225cec69805f710b7f6","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/VersionAttachStrategy.java","status":"modified","additions":19,"deletions":1,"changes":20,"blob_url":"https://github.com/apache/openjpa/blob/e406bda450a1f3b78836153a5a34882c823101b1/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/VersionAttachStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/e406bda450a1f3b78836153a5a34882c823101b1/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/VersionAttachStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/VersionAttachStrategy.java?ref=e406bda450a1f3b78836153a5a34882c823101b1","patch":"@@ -77,7 +77,11 @@ public Object attach(AttachManager manager, Object toAttach,\n             meta.getRepository().getConfiguration());\n \n         boolean embedded = ownerMeta != null && ownerMeta.isEmbeddedPC();\n-        boolean isNew = !broker.isDetached(pc);\n+        \n+        // OJ-2405: If toAttach has a StateManagerImpl, then it is important to check if it\n+        // is being managed by different broker.  If it is, then it should not be\n+        // considered \"new\".\n+        boolean isNew = !broker.isDetached(pc) && !isManagedByAnotherPCtx(pc, broker);\n         Object version = null;\n         StateManagerImpl sm;\n \n@@ -408,4 +412,18 @@ private boolean isPrimaryKeysGenerated(ClassMetaData meta) {\n         }\n         return false;\n     }\n+    \n+    private static boolean isManagedByAnotherPCtx(PersistenceCapable pc, BrokerImpl broker) {        \n+        StateManager sm = pc.pcGetStateManager();\n+        if (sm != null && sm instanceof StateManagerImpl) {\n+            StateManagerImpl smi = (StateManagerImpl) sm;\n+            Broker associatedBroker = smi.getBroker(); \n+            \n+            if (broker != associatedBroker) {\n+                return true;\n+            }\n+        }\n+        \n+        return false;\n+    }\n }"},{"sha":"2c3758390d7600297c0931c21625f0ec472ab333","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/merge/TestMerge.java","status":"added","additions":65,"deletions":0,"changes":65,"blob_url":"https://github.com/apache/openjpa/blob/e406bda450a1f3b78836153a5a34882c823101b1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/merge/TestMerge.java","raw_url":"https://github.com/apache/openjpa/raw/e406bda450a1f3b78836153a5a34882c823101b1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/merge/TestMerge.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/merge/TestMerge.java?ref=e406bda450a1f3b78836153a5a34882c823101b1","patch":"@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.openjpa.persistence.merge;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.test.SQLListenerTestCase;\n+\n+public class TestMerge extends SQLListenerTestCase {\n+    public void setUp() {\n+        setUp(CLEAR_TABLES, Parent.class,\n+            Child.class, GrandChild.class);\n+        assertNotNull(emf);\n+        populate();\n+    }\n+\n+    public void testMergeManagedParent() {\n+        System.out.println(\"Running testMergeManagedParent()...\");\n+        \n+        System.out.println();\n+        System.out.println(\"Exercising em #1...\");\n+        EntityManager em = emf.createEntityManager();\n+        ParentPK pk = new ParentPK(1);\n+        pk.setKey1(\"K1\");\n+        Parent parent = em.find(Parent.class, pk);\n+            \n+        System.out.println();\n+        System.out.println(\"Exercising em #1...\");\n+        EntityManager em2 = emf.createEntityManager();\n+        em2.getTransaction().begin();\n+        Parent mergedParent = em2.merge(parent);\n+        assertNotNull(mergedParent);\n+        em2.getTransaction().commit();\n+        em.close();\n+        em2.close();\n+    }\n+    \n+    private void populate() {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        Parent p = new Parent();\n+        p.setKey1(\"K1\");\n+        p.setKey2(1);\n+        em.persist(p);\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+}"}]}

