{"sha":"e424097b564273b807f0637056ea244c40a125c3","node_id":"MDY6Q29tbWl0MjA2MzY0OmU0MjQwOTdiNTY0MjczYjgwN2YwNjM3MDU2ZWEyNDRjNDBhMTI1YzM=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2012-09-27T19:36:44Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2012-09-27T19:36:44Z"},"message":"OPENJPA-2269: Fix duplicate key exception when inserting into sequence table on multithreaded init.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1391185 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ac1787c6816945370b40443349a2d61a55db00ca","url":"https://api.github.com/repos/apache/openjpa/git/trees/ac1787c6816945370b40443349a2d61a55db00ca"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/e424097b564273b807f0637056ea244c40a125c3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/e424097b564273b807f0637056ea244c40a125c3","html_url":"https://github.com/apache/openjpa/commit/e424097b564273b807f0637056ea244c40a125c3","comments_url":"https://api.github.com/repos/apache/openjpa/commits/e424097b564273b807f0637056ea244c40a125c3/comments","author":null,"committer":null,"parents":[{"sha":"837638b91b320139aae84df052335c4c8f0f240f","url":"https://api.github.com/repos/apache/openjpa/commits/837638b91b320139aae84df052335c4c8f0f240f","html_url":"https://github.com/apache/openjpa/commit/837638b91b320139aae84df052335c4c8f0f240f"}],"stats":{"total":178,"additions":172,"deletions":6},"files":[{"sha":"18fc7c74d1f26f4d9d41dddc882f6841f1ada552","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/TableJDBCSeq.java","status":"modified","additions":15,"deletions":6,"changes":21,"blob_url":"https://github.com/apache/openjpa/blob/e424097b564273b807f0637056ea244c40a125c3/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/TableJDBCSeq.java","raw_url":"https://github.com/apache/openjpa/raw/e424097b564273b807f0637056ea244c40a125c3/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/TableJDBCSeq.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/TableJDBCSeq.java?ref=e424097b564273b807f0637056ea244c40a125c3","patch":"@@ -474,6 +474,7 @@ private void allocateSequence(JDBCStore store, ClassMapping mapping,\n      */\n     private void insertSequence(ClassMapping mapping, Connection conn)\n         throws SQLException {\n+        \n         if (_log.isTraceEnabled())\n             _log.trace(_loc.get(\"insert-seq\"));\n \n@@ -895,12 +896,20 @@ public void run() throws RuntimeException {\n                 closeConnection(conn);\n \n                 if (!sequenceSet) {\n-                    // insert a new sequence column. \n-                    // Prefer connection2 / non-jta-data-source when inserting \n-                    // a sequence column regardless of Seq.type.\n-                    conn = _conf.getDataSource2(store.getContext())\n-                                .getConnection();\n-                    insertSequence(mapping, conn);\n+                    // insert a new sequence column. Prefer connection2 / non-jta-data-source when inserting a \n+                    // sequence column regardless of Seq.type.\n+                    conn = _conf.getDataSource2(store.getContext()).getConnection();\n+                    try {\n+                        insertSequence(mapping, conn);\n+                    } catch (SQLException e) {\n+                        // it is possible another thread already got in and inserted this sequence. Try to keep going\n+                        if (_log.isTraceEnabled()) {\n+                            _log.trace(\n+                                \"Caught an exception while trying to insert sequence. Will try to reselect the \" +\n+                                \"seqence. \", e);\n+                        }\n+                    }\n+                    \n                     conn.close();\n \n                     // now we should be able to update using the connection per"},{"sha":"7ca64b7748deb2df5ec4a7f716b886d7afa130ef","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/Dog.java","status":"modified","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/apache/openjpa/blob/e424097b564273b807f0637056ea244c40a125c3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/Dog.java","raw_url":"https://github.com/apache/openjpa/raw/e424097b564273b807f0637056ea244c40a125c3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/Dog.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/Dog.java?ref=e424097b564273b807f0637056ea244c40a125c3","patch":"@@ -50,4 +50,45 @@ public String getName() {\n     public void setName(String name) {\n         this.name = name;\n     }\n+\n+    @Override\n+    public int hashCode() {\n+        final int prime = 31;\n+        int result = 1;\n+        result = prime * result + id;\n+        result = prime * result + ((name == null) ? 0 : name.hashCode());\n+        return result;\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (getClass() != obj.getClass()) {\n+            return false;\n+        }\n+        Dog other = (Dog) obj;\n+        if (id != other.id) {\n+            return false;\n+        }\n+        if (name == null) {\n+            if (other.name != null) {\n+                return false;\n+            }\n+        } else if (!name.equals(other.name)) {\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"Dog [id=\" + id + \", name=\" + name + \"]\";\n+    }\n+    \n+    \n }"},{"sha":"8e3f0b439a24a93f77a23ff4e091e9b70f09d0b6","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestTableGeneratorMultithreadedInitialization.java","status":"added","additions":116,"deletions":0,"changes":116,"blob_url":"https://github.com/apache/openjpa/blob/e424097b564273b807f0637056ea244c40a125c3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestTableGeneratorMultithreadedInitialization.java","raw_url":"https://github.com/apache/openjpa/raw/e424097b564273b807f0637056ea244c40a125c3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestTableGeneratorMultithreadedInitialization.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestTableGeneratorMultithreadedInitialization.java?ref=e424097b564273b807f0637056ea244c40a125c3","patch":"@@ -0,0 +1,116 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.generationtype;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+\n+import org.apache.openjpa.persistence.test.AbstractPersistenceTestCase;\n+\n+public class TestTableGeneratorMultithreadedInitialization extends AbstractPersistenceTestCase {\n+    Object[] props = new Object[] { Dog.class\n+    // , \"openjpa.Log\", \"SQL=trace\"\n+        };\n+\n+    public void setUp() throws Exception {\n+        EntityManagerFactory emf = createNamedEMF(getPersistenceUnitName(), props);\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.createNativeQuery(\"DROP TABLE ID_Gen\").executeUpdate();\n+        em.createNativeQuery(\"DROP TABLE dog\").executeUpdate();\n+        em.getTransaction().commit();\n+        emf.close();\n+    }\n+\n+    public void test() throws Exception {\n+\n+        EntityManagerFactory emf1 = createNamedEMF(getPersistenceUnitName(), props);\n+        EntityManagerFactory emf2 = createNamedEMF(getPersistenceUnitName(), props);\n+        EntityManagerFactory emf3 = createNamedEMF(getPersistenceUnitName(), props);\n+\n+        assertNotEquals(emf1, emf2);\n+\n+        emf1.createEntityManager().close();\n+        emf2.createEntityManager().close();\n+\n+        final EntityManager em1 = emf1.createEntityManager();\n+        final EntityManager em2 = emf2.createEntityManager();\n+        final EntityManager em3 = emf3.createEntityManager();\n+\n+        Worker w1 = new Worker(em1);\n+        Worker w2 = new Worker(em2);\n+\n+        w1.start();\n+        w2.start();\n+\n+        w1.join();\n+        w2.join();\n+\n+        assertNull(\"Caught an exception in worker 1\" + w1.getException(), w1.getException());\n+        assertNull(\"Caught an exception in worker 2\" + w2.getException(), w2.getException());\n+\n+        Dog d1 = w1.getDog();\n+        Dog d2 = w2.getDog();\n+        assertNotNull(d1);\n+        assertNotNull(d2);\n+        assertNotEquals(d1, d2);\n+\n+        Dog d1_found = em3.find(Dog.class, d1.getId());\n+        Dog d2_found = em3.find(Dog.class, d2.getId());\n+\n+        assertEquals(d1_found, d1);\n+        assertEquals(d2_found, d2);\n+\n+        emf1.close();\n+        emf2.close();\n+        emf3.close();\n+    }\n+\n+    class Worker extends Thread {\n+        final EntityManager em;\n+        Dog dog = new Dog();\n+        Exception exception;\n+\n+        Worker(EntityManager e) {\n+            em = e;\n+        }\n+\n+        public Dog getDog() {\n+            return dog;\n+        }\n+\n+        public Exception getException() {\n+            return exception;\n+        }\n+\n+        @Override\n+        public void run() {\n+            try {\n+                em.getTransaction().begin();\n+                em.persist(dog);\n+                em.getTransaction().commit();\n+                em.close();\n+            } catch (Exception e) {\n+                exception = e;\n+                e.printStackTrace();\n+                // TODO: handle exception\n+            }\n+        }\n+    }\n+}"}]}

