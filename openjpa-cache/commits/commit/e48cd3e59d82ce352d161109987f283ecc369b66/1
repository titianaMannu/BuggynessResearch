{"sha":"e48cd3e59d82ce352d161109987f283ecc369b66","node_id":"MDY6Q29tbWl0MjA2MzY0OmU0OGNkM2U1OWQ4MmNlMzUyZDE2MTEwOTk4N2YyODNlY2MzNjliNjY=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2014-06-05T20:49:01Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2014-06-05T20:49:01Z"},"message":"OPENJPA-2508 : Account for JOIN FETCH statements when loading from the Query Cache.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1600757 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"11163f419c3064680a33ca6d9e8d450f7fb8935f","url":"https://api.github.com/repos/apache/openjpa/git/trees/11163f419c3064680a33ca6d9e8d450f7fb8935f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/e48cd3e59d82ce352d161109987f283ecc369b66","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/e48cd3e59d82ce352d161109987f283ecc369b66","html_url":"https://github.com/apache/openjpa/commit/e48cd3e59d82ce352d161109987f283ecc369b66","comments_url":"https://api.github.com/repos/apache/openjpa/commits/e48cd3e59d82ce352d161109987f283ecc369b66/comments","author":null,"committer":null,"parents":[{"sha":"b95e0d1c6c2e2cc8f6f9d422058dfe232f6091d5","url":"https://api.github.com/repos/apache/openjpa/commits/b95e0d1c6c2e2cc8f6f9d422058dfe232f6091d5","html_url":"https://github.com/apache/openjpa/commit/b95e0d1c6c2e2cc8f6f9d422058dfe232f6091d5"}],"stats":{"total":657,"additions":355,"deletions":302},"files":[{"sha":"7f08b79ab563adbdd15bf9637a9992a8caae6d62","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryCacheStoreQuery.java","status":"modified","additions":41,"deletions":26,"changes":67,"blob_url":"https://github.com/apache/openjpa/blob/e48cd3e59d82ce352d161109987f283ecc369b66/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryCacheStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/e48cd3e59d82ce352d161109987f283ecc369b66/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryCacheStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryCacheStoreQuery.java?ref=e48cd3e59d82ce352d161109987f283ecc369b66","patch":"@@ -110,7 +110,7 @@ public StoreQuery getDelegate() {\n      * READ_SERIALIZABLE -- to do so, we'd just return false when in\n      * a transaction.\n      */\n-    private List<Object> checkCache(QueryKey qk) {\n+    private List<Object> checkCache(QueryKey qk, FetchConfiguration loadFc) {\n         if (qk == null)\n             return null;\n         FetchConfiguration fetch = getContext().getFetchConfiguration();\n@@ -120,9 +120,7 @@ public StoreQuery getDelegate() {\n             return null;\n \n         // get the cached data\n-        QueryResult res = _cache.get(qk);\n-\n-        \n+        QueryResult res = _cache.get(qk);       \n         if (res == null) {\n             return null;\n         }\n@@ -163,7 +161,7 @@ public StoreQuery getDelegate() {\n                 return null;\n             }\n         }\n-        return new CachedList(res, projs != 0, _sctx);\n+        return new CachedList(res, projs != 0, _sctx, loadFc);\n     }\n \n     /**\n@@ -181,7 +179,7 @@ private ResultObjectProvider wrapResult(ResultObjectProvider rop,\n     /**\n      * Copy a projection element for caching / returning.\n      */\n-    private static Object copyProjection(Object obj, StoreContext ctx) {\n+    private static Object copyProjection(Object obj, StoreContext ctx, FetchConfiguration fc) {\n         if (obj == null)\n             return null;\n         switch (JavaTypes.getTypeCode(obj.getClass())) {\n@@ -204,7 +202,7 @@ private static Object copyProjection(Object obj, StoreContext ctx) {\n                 return ((Locale) obj).clone();\n             default:\n                 if (obj instanceof CachedObjectId)\n-                    return fromObjectId(((CachedObjectId) obj).oid, ctx);\n+                    return fromObjectId(((CachedObjectId) obj).oid, ctx, fc);\n                 Object oid = ctx.getObjectId(obj);\n                 if (oid != null)\n                     return new CachedObjectId(oid);\n@@ -215,11 +213,11 @@ private static Object copyProjection(Object obj, StoreContext ctx) {\n     /**\n      * Return the result object based on its cached oid.\n      */\n-    private static Object fromObjectId(Object oid, StoreContext sctx) {\n+    private static Object fromObjectId(Object oid, StoreContext sctx, FetchConfiguration fc) {\n         if (oid == null)\n             return null;\n \n-        Object obj = sctx.find(oid, null, null, null, 0);\n+        Object obj = sctx.find(oid, fc, null, null, 0);\n         if (obj == null)\n             throw new ObjectNotFoundException(oid);\n         return obj;\n@@ -330,19 +328,34 @@ public QueryCacheExecutor(Executor ex, ClassMetaData meta,\n             _fc = fc;\n         }\n \n-        public ResultObjectProvider executeQuery(StoreQuery q, Object[] params,\n-            Range range) {\n+        public ResultObjectProvider executeQuery(StoreQuery q, Object[] params, Range range) {\n             QueryCacheStoreQuery cq = (QueryCacheStoreQuery) q;\n             Object parsed = cq.getDelegate().getCompilation();\n-            QueryKey key = QueryKey.newInstance(cq.getContext(),\n-                _ex.isPacking(q), params, _candidate, _subs, range.start, \n-                range.end, parsed);\n-            List<Object> cached = cq.checkCache(key);\n-            if (cached != null)\n-                return new ListResultObjectProvider(cached);\n-\n-            ResultObjectProvider rop = _ex.executeQuery(cq.getDelegate(),\n-                params, range);\n+            QueryKey key =\n+                QueryKey.newInstance(cq.getContext(), _ex.isPacking(q), params, _candidate, _subs, range.start,\n+                    range.end, parsed);\n+\n+            // Create a new FetchConfiguration that will be used to ensure that any JOIN FETCHed fields are loaded\n+            StoreContext store = q.getContext().getStoreContext();\n+            FetchConfiguration cacheFc = store.pushFetchConfiguration();\n+            for (QueryExpressions qe : _ex.getQueryExpressions()) {\n+                for (String fetchFields : qe.fetchPaths) {\n+                    cacheFc.addField(fetchFields);\n+                }\n+                for (String fetchFields : qe.fetchInnerPaths) {\n+                    cacheFc.addField(fetchFields);\n+                }\n+            }\n+            try {\n+                List<Object> cached = cq.checkCache(key, cacheFc);\n+                if (cached != null) {\n+                    return new ListResultObjectProvider(cached);\n+                }\n+            } finally {\n+                store.popFetchConfiguration();\n+            }\n+\n+            ResultObjectProvider rop = _ex.executeQuery(cq.getDelegate(), params, range);\n             if (_fc.getQueryCacheEnabled())\n                 return cq.wrapResult(rop, key);\n             else\n@@ -489,7 +502,7 @@ private static StoreQuery unwrap(StoreQuery q) {\n     }\n \n     /**\n-     * Result list implementation for a cached query result. Package-protected\n+     * Result list implementation for a cached query result. Public\n      * for testing.\n      */\n     public static class CachedList extends AbstractList<Object>\n@@ -498,23 +511,25 @@ private static StoreQuery unwrap(StoreQuery q) {\n         private final QueryResult _res;\n         private final boolean _proj;\n         private final StoreContext _sctx;\n-\n-        public CachedList(QueryResult res, boolean proj, StoreContext ctx) {\n+        private final FetchConfiguration _fc;\n+        \n+        public CachedList(QueryResult res, boolean proj, StoreContext ctx, FetchConfiguration fc) {\n             _res = res;\n             _proj = proj;\n             _sctx = ctx;\n+            _fc = fc;\n         }\n \n         public Object get(int idx) {\n             if (!_proj)\n-                return fromObjectId(_res.get(idx), _sctx);\n+                return fromObjectId(_res.get(idx), _sctx, _fc);\n \n             Object[] cached = (Object[]) _res.get(idx);\n             if (cached == null)\n                 return null;\n             Object[] uncached = new Object[cached.length];\n             for (int i = 0; i < cached.length; i++)\n-                uncached[i] = copyProjection(cached[i], _sctx);\n+                uncached[i] = copyProjection(cached[i], _sctx, _fc);\n             return uncached;\n         }\n \n@@ -599,7 +614,7 @@ else if (!_proj)\n                                 Object[] arr = (Object[]) obj;\n                                 Object[] cp = new Object[arr.length];\n                                 for (int i = 0; i < arr.length; i++)\n-                                    cp[i] = copyProjection(arr[i], _sctx);\n+                                    cp[i] = copyProjection(arr[i], _sctx, null);\n                                 cached = cp;\n                             }\n                             if (cached != null)"},{"sha":"3719f3f4d8ade2901427c056f2d345ad4a3148aa","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/joins/Department.java","status":"modified","additions":66,"deletions":64,"changes":130,"blob_url":"https://github.com/apache/openjpa/blob/e48cd3e59d82ce352d161109987f283ecc369b66/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/joins/Department.java","raw_url":"https://github.com/apache/openjpa/raw/e48cd3e59d82ce352d161109987f283ecc369b66/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/joins/Department.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/joins/Department.java?ref=e48cd3e59d82ce352d161109987f283ecc369b66","patch":"@@ -36,68 +36,70 @@\n @Table(name=\"FETCHDEPT\")\r\n public class Department implements Serializable {\r\n \r\n-        private static final long serialVersionUID = -5537435298484817651L;\r\n-\r\n-        @Id\r\n-        private int deptno;\r\n-        @Version\r\n-        private int version;\r\n-        private String name;\r\n-        @OneToMany(cascade=CascadeType.ALL)\r\n-        private List<Employee> employees;\r\n-        @OneToMany(cascade=CascadeType.ALL)\r\n-        private List<Employee> employee2s;\r\n-\r\n-        public Department() {\r\n-                super();\r\n-        }\r\n-\r\n-        public Department(int deptno, String name) {\r\n-                super();\r\n-                this.deptno = deptno;\r\n-                this.name = name;\r\n-        }\r\n-        public int getDeptno() {\r\n-                return this.deptno;\r\n-        }\r\n-\r\n-        public void setDeptno(int deptno) {\r\n-                this.deptno = deptno;\r\n-        }\r\n-\r\n-        public int getVersion() {\r\n-                return this.version;\r\n-        }\r\n-\r\n-        public void setVersion(int version) {\r\n-                this.version = version;\r\n-        }\r\n-\r\n-        public String getName() {\r\n-                return this.name;\r\n-        }\r\n-\r\n-        public void setName(String name) {\r\n-                this.name = name;\r\n-        }\r\n-\r\n-        public List<Employee> getEmployees() {\r\n-                return this.employees;\r\n-        }\r\n-        public void setEmployees(List<Employee> employees) {\r\n-                this.employees = employees;\r\n-        }\r\n-\r\n-        public List<Employee> getEmployee2s() {\r\n-                return this.employee2s;\r\n-        }\r\n-        public void setEmployee2s(List<Employee> employees) {\r\n-                this.employee2s = employees;\r\n-        }\r\n-\r\n-        public String toString() {\r\n-                return \"[Department:depno=\" + deptno + \", version=\" + version + \", name=\" + name +\r\n-                                \", employees=\" + employees + \", employee2s=\" + employee2s+ ']';\r\n-        }\r\n-\r\n+    private static final long serialVersionUID = -5537435298484817651L;\r\n+\r\n+    @Id\r\n+    private int deptno;\r\n+    @Version\r\n+    private int version;\r\n+    private String name;\r\n+    @OneToMany(mappedBy=\"dept\", cascade=CascadeType.ALL)\r\n+    private List<Employee> employees;\r\n+    @OneToMany(mappedBy=\"dept\", cascade=CascadeType.ALL)\r\n+    private List<Employee> employee2s;\r\n+\r\n+    public Department() {\r\n+        super();\r\n+    }\r\n+\r\n+    public Department(int deptno, String name) {\r\n+        super();\r\n+        this.deptno = deptno;\r\n+        this.name = name;\r\n+    }\r\n+\r\n+    public int getDeptno() {\r\n+        return this.deptno;\r\n+    }\r\n+\r\n+    public void setDeptno(int deptno) {\r\n+        this.deptno = deptno;\r\n+    }\r\n+\r\n+    public int getVersion() {\r\n+        return this.version;\r\n+    }\r\n+\r\n+    public void setVersion(int version) {\r\n+        this.version = version;\r\n+    }\r\n+\r\n+    public String getName() {\r\n+        return this.name;\r\n+    }\r\n+\r\n+    public void setName(String name) {\r\n+        this.name = name;\r\n+    }\r\n+\r\n+    public List<Employee> getEmployees() {\r\n+        return this.employees;\r\n+    }\r\n+\r\n+    public void setEmployees(List<Employee> employees) {\r\n+        this.employees = employees;\r\n+    }\r\n+\r\n+    public List<Employee> getEmployee2s() {\r\n+        return this.employee2s;\r\n+    }\r\n+\r\n+    public void setEmployee2s(List<Employee> employees) {\r\n+        this.employee2s = employees;\r\n+    }\r\n+\r\n+    public String toString() {\r\n+        return \"[Department:depno=\" + deptno + \", version=\" + version + \", name=\" + name +\r\n+                        \", employees=\" + employees + \", employee2s=\" + employee2s+ ']';\r\n+    }\r\n }\r"},{"sha":"51e21d110ed1b3f3f3192254394a26f7176f95a1","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/joins/Department_.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/e48cd3e59d82ce352d161109987f283ecc369b66/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/joins/Department_.java","raw_url":"https://github.com/apache/openjpa/raw/e48cd3e59d82ce352d161109987f283ecc369b66/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/joins/Department_.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/joins/Department_.java?ref=e48cd3e59d82ce352d161109987f283ecc369b66","patch":"@@ -26,7 +26,7 @@\n @javax.persistence.metamodel.StaticMetamodel\r\n (value=org.apache.openjpa.persistence.jpql.joins.Department.class)\r\n @javax.annotation.Generated\r\n-(value=\"org.apache.openjpa.persistence.meta.AnnotationProcessor6\",date=\"Sat May 17 17:25:13 CDT 2014\")\r\n+(value=\"org.apache.openjpa.persistence.meta.AnnotationProcessor6\",date=\"Tue Jun 03 09:13:08 CDT 2014\")\r\n public class Department_ {\r\n     public static volatile SingularAttribute<Department,Integer> deptno;\r\n     public static volatile ListAttribute<Department,Employee> employee2s;\r"},{"sha":"91ca1d7afe9603c85d98017df13263496df12c94","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/joins/Employee.java","status":"modified","additions":49,"deletions":36,"changes":85,"blob_url":"https://github.com/apache/openjpa/blob/e48cd3e59d82ce352d161109987f283ecc369b66/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/joins/Employee.java","raw_url":"https://github.com/apache/openjpa/raw/e48cd3e59d82ce352d161109987f283ecc369b66/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/joins/Employee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/joins/Employee.java?ref=e48cd3e59d82ce352d161109987f283ecc369b66","patch":"@@ -27,52 +27,65 @@\n  *\r\n  */\r\n @Entity\r\n-@Table(name=\"FETCHEMPL\")\r\n+@Table(name = \"FETCHEMPL\")\r\n public class Employee implements Serializable {\r\n \r\n-        private static final long serialVersionUID = -5155314943010802723L;\r\n+    private static final long serialVersionUID = -5155314943010802723L;\r\n \r\n-        @Id\r\n-        private int empno;\r\n-        private String name;\r\n-        @Version\r\n-        private int version;\r\n+    @Id\r\n+    private int empno;\r\n+    private String name;\r\n+    @Version\r\n+    private int version;\r\n \r\n-        public Employee() {\r\n-                super();\r\n-        }\r\n+    @ManyToOne(fetch = FetchType.LAZY, cascade = CascadeType.MERGE)\r\n+    private Department dept;\r\n \r\n-        public Employee(int empno, String name) {\r\n-                super();\r\n-                this.empno = empno;\r\n-                this.name = name;\r\n-        }\r\n+    public Employee() {\r\n+        super();\r\n+    }\r\n \r\n-        public int getEmpno() {\r\n-                return this.empno;\r\n-        }\r\n+    public Employee(int empno, String name, Department dept) {\r\n+        super();\r\n+        this.empno = empno;\r\n+        this.name = name;\r\n+        this.dept = dept;\r\n+    }\r\n \r\n-        public void setEmpno(int empno) {\r\n-                this.empno = empno;\r\n-        }\r\n+    public int getEmpno() {\r\n+        return this.empno;\r\n+    }\r\n \r\n-        public int getVersion() {\r\n-                return this.version;\r\n-        }\r\n+    public void setEmpno(int empno) {\r\n+        this.empno = empno;\r\n+    }\r\n \r\n-        public void setVersion(int version) {\r\n-                this.version = version;\r\n-        }\r\n+    public int getVersion() {\r\n+        return this.version;\r\n+    }\r\n \r\n-        public String getName() {\r\n-                return this.name;\r\n-        }\r\n+    public void setVersion(int version) {\r\n+        this.version = version;\r\n+    }\r\n \r\n-        public void setName(String name) {\r\n-                this.name = name;\r\n-        }\r\n+    public String getName() {\r\n+        return this.name;\r\n+    }\r\n \r\n-        public String toString() {\r\n-                return \"[Employee:id=\" + empno + \", version=\" + version + \", name=\" + name + ']';\r\n-        }\r\n+    public void setName(String name) {\r\n+        this.name = name;\r\n+    }\r\n+\r\n+    public Department getDept() {\r\n+        return dept;\r\n+    }\r\n+\r\n+    public void setDept(Department dept) {\r\n+        this.dept = dept;\r\n+    }\r\n+\r\n+    public String toString() {\r\n+        return \"[Employee:id=\" + empno + \", version=\" + version + \", name=\"\r\n+                + name + ']';\r\n+    }\r\n }\r"},{"sha":"6803e0501e03521dd373a633989ce7bc8da6b9dd","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/joins/Employee_.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/e48cd3e59d82ce352d161109987f283ecc369b66/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/joins/Employee_.java","raw_url":"https://github.com/apache/openjpa/raw/e48cd3e59d82ce352d161109987f283ecc369b66/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/joins/Employee_.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/joins/Employee_.java?ref=e48cd3e59d82ce352d161109987f283ecc369b66","patch":"@@ -25,8 +25,9 @@\n @javax.persistence.metamodel.StaticMetamodel\r\n (value=org.apache.openjpa.persistence.jpql.joins.Employee.class)\r\n @javax.annotation.Generated\r\n-(value=\"org.apache.openjpa.persistence.meta.AnnotationProcessor6\",date=\"Sat May 17 17:25:28 CDT 2014\")\r\n+(value=\"org.apache.openjpa.persistence.meta.AnnotationProcessor6\",date=\"Tue Jun 03 09:14:37 CDT 2014\")\r\n public class Employee_ {\r\n+    public static volatile SingularAttribute<Employee,Department> dept;\r\n     public static volatile SingularAttribute<Employee,Integer> empno;\r\n     public static volatile SingularAttribute<Employee,String> name;\r\n     public static volatile SingularAttribute<Employee,Integer> version;\r"},{"sha":"2797d02f956070ecb506975ede2d8df653d98f31","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/joins/TestJoinFetchWithQueryDataCache.java","status":"modified","additions":196,"deletions":174,"changes":370,"blob_url":"https://github.com/apache/openjpa/blob/e48cd3e59d82ce352d161109987f283ecc369b66/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/joins/TestJoinFetchWithQueryDataCache.java","raw_url":"https://github.com/apache/openjpa/raw/e48cd3e59d82ce352d161109987f283ecc369b66/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/joins/TestJoinFetchWithQueryDataCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/joins/TestJoinFetchWithQueryDataCache.java?ref=e48cd3e59d82ce352d161109987f283ecc369b66","patch":"@@ -22,203 +22,225 @@\n import java.util.List;\r\n \r\n import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n import javax.persistence.criteria.CriteriaBuilder;\r\n import javax.persistence.criteria.CriteriaQuery;\r\n import javax.persistence.criteria.JoinType;\r\n import javax.persistence.criteria.Root;\r\n \r\n import junit.framework.Assert;\r\n \r\n-import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\r\n+import org.apache.openjpa.persistence.test.SQLListenerTestCase;\r\n \r\n /**\r\n  * Tests JQPL and Criteria API equivalent using left join fetch with QueryCache and DataCache enabled.\r\n  */\r\n-public class TestJoinFetchWithQueryDataCache extends SingleEMFTestCase {\r\n+public class TestJoinFetchWithQueryDataCache extends SQLListenerTestCase {\r\n     EntityManager em;\r\n-        public void setUp() {\r\n-        super.setUp(DROP_TABLES, Employee.class, Department.class\r\n-                , \"openjpa.QueryCompilationCache\", \"all\"\r\n-                , \"openjpa.DataCache\", \"true(CacheSize=2000, SoftReferenceSize=0, EvictionSchedule='+60' )\"\r\n-                , \"openjpa.RemoteCommitProvider\", \"sjvm\"\r\n-                , \"openjpa.QueryCache\", \"true\"\r\n-                        );\r\n-\r\n-                em = emf.createEntityManager();\r\n-                em.getTransaction().begin();\r\n-\r\n-                Department dept;\r\n-                dept = new Department(10, \"department 10\");\r\n-                dept.setEmployees(new ArrayList<Employee>());\r\n-                dept.getEmployees().add(new Employee(11, \"Emp11\"));\r\n-                dept.getEmployees().add(new Employee(12, \"Emp12\"));\r\n-                dept.setEmployee2s(new ArrayList<Employee>());\r\n-                dept.getEmployee2s().add(new Employee(211, \"Emp211\"));\r\n-                dept.getEmployee2s().add(new Employee(212, \"Emp212\"));\r\n-                em.persist(dept);\r\n-\r\n-                dept = new Department(20, \"department 20\");\r\n-                dept.setEmployees(new ArrayList<Employee>());\r\n-                dept.getEmployees().add(new Employee(21, \"Emp21\"));\r\n-                dept.getEmployees().add(new Employee(22, \"Emp22\"));\r\n-                dept.setEmployee2s(new ArrayList<Employee>());\r\n-                dept.getEmployee2s().add(new Employee(221, \"Emp221\"));\r\n-                dept.getEmployee2s().add(new Employee(222, \"Emp222\"));\r\n-                em.persist(dept);\r\n-\r\n-                em.getTransaction().commit();\r\n-\r\n-                em.close();\r\n-        }\r\n \r\n-        public void testJPQLNoFetch() {\r\n-                EntityManager em = emf.createEntityManager();\r\n-                List<Department> ds = em.createQuery(\r\n-                                \"SELECT DISTINCT d FROM Department d WHERE d.deptno = 10\")\r\n-                                .getResultList();\r\n-                System.out.println(\"-- testJPQLNoFetch -----\");\r\n-                em.clear();\r\n-                Assert.assertEquals(1, ds.size());\r\n-                for (Department x : ds) {\r\n-                        Assert.assertNull(x.getEmployees());\r\n-                        Assert.assertNull(x.getEmployee2s());\r\n-                        System.out.println(x);\r\n-                }\r\n-\r\n-                em.close();\r\n+    public void setUp() {\r\n+        super.setUp(DROP_TABLES, Employee.class, Department.class, \"openjpa.QueryCompilationCache\", \"all\",\r\n+            \"openjpa.DataCache\", \"true\", \"openjpa.RemoteCommitProvider\", \"sjvm\", \"openjpa.QueryCache\", \"true\"\r\n+            // This is a hack to work around using em.detach(...) w/ a 1.0 p.xml\r\n+            , \"openjpa.Compatibility\", \"CopyOnDetach=false\" \r\n+            );\r\n+\r\n+        em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+\r\n+        Department dept;\r\n+        dept = new Department(10, \"department 10\");\r\n+        dept.setEmployees(new ArrayList<Employee>());\r\n+        dept.getEmployees().add(new Employee(11, \"Emp11\", dept));\r\n+        dept.getEmployees().add(new Employee(12, \"Emp12\", dept));\r\n+        dept.setEmployee2s(new ArrayList<Employee>());\r\n+        dept.getEmployee2s().add(new Employee(211, \"Emp211\", dept));\r\n+        dept.getEmployee2s().add(new Employee(212, \"Emp212\", dept));\r\n+        em.persist(dept);\r\n+\r\n+        dept = new Department(20, \"department 20\");\r\n+        dept.setEmployees(new ArrayList<Employee>());\r\n+        dept.getEmployees().add(new Employee(21, \"Emp21\", dept));\r\n+        dept.getEmployees().add(new Employee(22, \"Emp22\", dept));\r\n+        dept.setEmployee2s(new ArrayList<Employee>());\r\n+        dept.getEmployee2s().add(new Employee(221, \"Emp221\", dept));\r\n+        dept.getEmployee2s().add(new Employee(222, \"Emp222\", dept));\r\n+        em.persist(dept);\r\n+\r\n+        em.getTransaction().commit();\r\n+\r\n+        em.close();\r\n+    }\r\n+\r\n+    public void testJPQLNoFetch() {\r\n+        EntityManager em = emf.createEntityManager();\r\n+        List<Department> ds = em.createQuery(\"SELECT DISTINCT d FROM Department d WHERE d.deptno = 10\").getResultList();\r\n+        System.out.println(\"-- testJPQLNoFetch -----\");\r\n+        em.clear();\r\n+        Assert.assertEquals(1, ds.size());\r\n+        for (Department x : ds) {\r\n+            Assert.assertNull(x.getEmployees());\r\n+            Assert.assertNull(x.getEmployee2s());\r\n+            System.out.println(x);\r\n         }\r\n \r\n-        public void testJPQLOneFetch() {\r\n-                EntityManager em = emf.createEntityManager();\r\n-                List<Department> ds = em.createQuery(\r\n-                                \"SELECT DISTINCT d FROM Department d LEFT JOIN FETCH d.employee2s \" +\r\n-                                        \"WHERE d.deptno = 10\")\r\n-                                .getResultList();\r\n-                System.out.println(\"-- testJPQLOneFetch -----\");\r\n-                em.clear();\r\n-                Assert.assertEquals(1, ds.size());\r\n-                for (Department x : ds) {\r\n-                        Assert.assertNull(x.getEmployees());\r\n-                        Assert.assertNotNull(x.getEmployee2s());\r\n-                        Assert.assertEquals(2, x.getEmployee2s().size());\r\n-                        System.out.println(x);\r\n-                }\r\n-\r\n-                em.close();\r\n+        em.close();\r\n+    }\r\n+\r\n+    public void testJPQLOneFetch() {\r\n+        EntityManager em = emf.createEntityManager();\r\n+        List<Department> ds =\r\n+            em.createQuery(\"SELECT DISTINCT d FROM Department d LEFT JOIN FETCH d.employee2s \" + \"WHERE d.deptno = 10\")\r\n+                .getResultList();\r\n+        System.out.println(\"-- testJPQLOneFetch -----\");\r\n+        em.clear();\r\n+        Assert.assertEquals(1, ds.size());\r\n+        for (Department x : ds) {\r\n+            Assert.assertNull(x.getEmployees());\r\n+            Assert.assertNotNull(x.getEmployee2s());\r\n+            Assert.assertEquals(2, x.getEmployee2s().size());\r\n+            System.out.println(x);\r\n         }\r\n \r\n-        public void testJPQLTwoFetch() {\r\n-                EntityManager em = emf.createEntityManager();\r\n-                List<Department> ds = em.createQuery(\r\n-                                \"SELECT DISTINCT d FROM Department d LEFT JOIN FETCH d.employees \" +\r\n-                            \"LEFT JOIN FETCH d.employee2s \" +\r\n-                                        \"WHERE d.deptno = 10\")\r\n-                                .getResultList();\r\n-                System.out.println(\"-- testJPQLTwoFetch -----\");\r\n-                em.clear();\r\n-                Assert.assertEquals(1, ds.size());\r\n-                for (Department x : ds) {\r\n-                        Assert.assertNotNull(x.getEmployees());\r\n-                        Assert.assertEquals(2, x.getEmployees().size());\r\n-                        Assert.assertNotNull(x.getEmployee2s());\r\n-                        Assert.assertEquals(2, x.getEmployee2s().size());\r\n-                        System.out.println(x);\r\n-                }\r\n-\r\n-                em.close();\r\n+        em.close();\r\n+    }\r\n+\r\n+    public void testJPQLTwoFetch() {\r\n+        EntityManager em = emf.createEntityManager();\r\n+        List<Department> ds =\r\n+            em.createQuery(\r\n+                \"SELECT DISTINCT d FROM Department d LEFT JOIN FETCH d.employees \" + \"LEFT JOIN FETCH d.employee2s \"\r\n+                    + \"WHERE d.deptno = 10\").getResultList();\r\n+        System.out.println(\"-- testJPQLTwoFetch -----\");\r\n+        em.clear();\r\n+        Assert.assertEquals(1, ds.size());\r\n+        for (Department x : ds) {\r\n+            Assert.assertNotNull(x.getEmployees());\r\n+            Assert.assertEquals(2, x.getEmployees().size());\r\n+            Assert.assertNotNull(x.getEmployee2s());\r\n+            Assert.assertEquals(2, x.getEmployee2s().size());\r\n+            System.out.println(x);\r\n         }\r\n \r\n-        public void testCriteriaAPINoFetch() {\r\n-                EntityManager em = emf.createEntityManager();\r\n-                CriteriaBuilder cb = em.getCriteriaBuilder();\r\n-\r\n-                // This query is equivalent to the following Java Persistence query\r\n-                // language query:\r\n-                // SELECT d\r\n-                // FROM Department d\r\n-                // WHERE d.deptno = 1\r\n-\r\n-                CriteriaQuery<Department> q = cb.createQuery(Department.class);\r\n-                Root<Department> d = q.from(Department.class);\r\n-                q.where(cb.equal(d.get(Department_.deptno), 20)).select(d);\r\n-\r\n-                List<Department> ds = em.createQuery(q).getResultList();\r\n-                System.out.println(\"-- testCriteriaAPINoFetch -----\");\r\n-                em.clear();\r\n-                Assert.assertEquals(1, ds.size());\r\n-                for (Department x : ds) {\r\n-                        Assert.assertNull(x.getEmployees());\r\n-                        Assert.assertNull(x.getEmployee2s());\r\n-                        System.out.println(x);\r\n-                }\r\n-\r\n-                em.close();\r\n+        em.close();\r\n+    }\r\n+\r\n+    public void testCriteriaAPINoFetch() {\r\n+        EntityManager em = emf.createEntityManager();\r\n+        CriteriaBuilder cb = em.getCriteriaBuilder();\r\n+\r\n+        // This query is equivalent to the following Java Persistence query\r\n+        // language query:\r\n+        // SELECT d\r\n+        // FROM Department d\r\n+        // WHERE d.deptno = 1\r\n+\r\n+        CriteriaQuery<Department> q = cb.createQuery(Department.class);\r\n+        Root<Department> d = q.from(Department.class);\r\n+        q.where(cb.equal(d.get(Department_.deptno), 20)).select(d);\r\n+\r\n+        List<Department> ds = em.createQuery(q).getResultList();\r\n+        System.out.println(\"-- testCriteriaAPINoFetch -----\");\r\n+        em.clear();\r\n+        Assert.assertEquals(1, ds.size());\r\n+        for (Department x : ds) {\r\n+            Assert.assertNull(x.getEmployees());\r\n+            Assert.assertNull(x.getEmployee2s());\r\n+            System.out.println(x);\r\n         }\r\n \r\n-        public void testCriteriaAPIOneFetch() {\r\n-                EntityManager em = emf.createEntityManager();\r\n-                CriteriaBuilder cb = em.getCriteriaBuilder();\r\n-\r\n-                // 6.5.4 Fetch Joins\r\n-                // Example:\r\n-                // CriteriaQuery<Department> q = cb.createQuery(Department.class);\r\n-                // Root<Department> d = q.from(Department.class);\r\n-                // d.fetch(Department_.employees, JoinType.LEFT);\r\n-                // q.where(cb.equal(d.get(Department_.deptno), 1)).select(d);\r\n-                //\r\n-                // This query is equivalent to the following Java Persistence query\r\n-                // language query:\r\n-                // SELECT DISTINCT d\r\n-                // FROM Department d LEFT JOIN FETCH d.employees\r\n-                // WHERE d.deptno = 1\r\n-\r\n-                CriteriaQuery<Department> q = cb.createQuery(Department.class);\r\n-                Root<Department> d = q.from(Department.class);\r\n-                d.fetch(Department_.employees, JoinType.LEFT);\r\n-                q.where(cb.equal(d.get(Department_.deptno), 20)).select(d).distinct(true);\r\n-\r\n-                List<Department> ds = em.createQuery(q).getResultList();\r\n-                System.out.println(\"-- testCriteriaAPIOneFetch -----\");\r\n-                em.clear();\r\n-                Assert.assertEquals(1, ds.size());\r\n-                for (Department x : ds) {\r\n-                        Assert.assertNotNull(x.getEmployees());\r\n-                        Assert.assertEquals(2, x.getEmployees().size());\r\n-                        Assert.assertNull(x.getEmployee2s());\r\n-                        System.out.println(x);\r\n-                }\r\n-\r\n-                em.close();\r\n+        em.close();\r\n+    }\r\n+\r\n+    public void testCriteriaAPIOneFetch() {\r\n+        EntityManager em = emf.createEntityManager();\r\n+        CriteriaBuilder cb = em.getCriteriaBuilder();\r\n+\r\n+        // 6.5.4 Fetch Joins\r\n+        // Example:\r\n+        // CriteriaQuery<Department> q = cb.createQuery(Department.class);\r\n+        // Root<Department> d = q.from(Department.class);\r\n+        // d.fetch(Department_.employees, JoinType.LEFT);\r\n+        // q.where(cb.equal(d.get(Department_.deptno), 1)).select(d);\r\n+        //\r\n+        // This query is equivalent to the following Java Persistence query\r\n+        // language query:\r\n+        // SELECT DISTINCT d\r\n+        // FROM Department d LEFT JOIN FETCH d.employees\r\n+        // WHERE d.deptno = 1\r\n+\r\n+        CriteriaQuery<Department> q = cb.createQuery(Department.class);\r\n+        Root<Department> d = q.from(Department.class);\r\n+        d.fetch(Department_.employees, JoinType.LEFT);\r\n+        q.where(cb.equal(d.get(Department_.deptno), 20)).select(d).distinct(true);\r\n+\r\n+        List<Department> ds = em.createQuery(q).getResultList();\r\n+        System.out.println(\"-- testCriteriaAPIOneFetch -----\");\r\n+        em.clear();\r\n+        Assert.assertEquals(1, ds.size());\r\n+        for (Department x : ds) {\r\n+            Assert.assertNotNull(x.getEmployees());\r\n+            Assert.assertEquals(2, x.getEmployees().size());\r\n+            Assert.assertNull(x.getEmployee2s());\r\n+            System.out.println(x);\r\n         }\r\n \r\n-        public void testCriteriaAPITwoFetch() {\r\n-                EntityManager em = emf.createEntityManager();\r\n-                CriteriaBuilder cb = em.getCriteriaBuilder();\r\n-\r\n-                // This query is equivalent to the following Java Persistence query\r\n-                // language query:\r\n-                // SELECT DISTINCT d\r\n-                // FROM Department d LEFT JOIN FETCH d.employees LEFT JOIN FETCH d.employee2s\r\n-                // WHERE d.deptno = 1\r\n-                CriteriaQuery<Department> q = cb.createQuery(Department.class);\r\n-                Root<Department> d = q.from(Department.class);\r\n-                d.fetch(Department_.employees, JoinType.LEFT);\r\n-                d.fetch(Department_.employee2s, JoinType.LEFT);\r\n-                q.where(cb.equal(d.get(Department_.deptno), 20)).select(d).distinct(true);\r\n-\r\n-                List<Department> ds = em.createQuery(q).getResultList();\r\n-                System.out.println(\"-- testCriteriaAPITwoFetch -----\");\r\n-                em.clear();\r\n-                Assert.assertEquals(1, ds.size());\r\n-                for (Department x : ds) {\r\n-                        Assert.assertNotNull(x.getEmployees());\r\n-                        Assert.assertEquals(2, x.getEmployees().size());\r\n-                        Assert.assertNotNull(x.getEmployee2s());\r\n-                        Assert.assertEquals(2, x.getEmployee2s().size());\r\n-                        System.out.println(x);\r\n-                }\r\n-\r\n-                em.close();\r\n+        em.close();\r\n+    }\r\n+\r\n+    public void testCriteriaAPITwoFetch() {\r\n+        EntityManager em = emf.createEntityManager();\r\n+        CriteriaBuilder cb = em.getCriteriaBuilder();\r\n+\r\n+        // This query is equivalent to the following Java Persistence query\r\n+        // language query:\r\n+        // SELECT DISTINCT d\r\n+        // FROM Department d LEFT JOIN FETCH d.employees LEFT JOIN FETCH d.employee2s\r\n+        // WHERE d.deptno = 1\r\n+        CriteriaQuery<Department> q = cb.createQuery(Department.class);\r\n+        Root<Department> d = q.from(Department.class);\r\n+        d.fetch(Department_.employees, JoinType.LEFT);\r\n+        d.fetch(Department_.employee2s, JoinType.LEFT);\r\n+        q.where(cb.equal(d.get(Department_.deptno), 20)).select(d).distinct(true);\r\n+\r\n+        List<Department> ds = em.createQuery(q).getResultList();\r\n+        System.out.println(\"-- testCriteriaAPITwoFetch -----\");\r\n+        em.clear();\r\n+        Assert.assertEquals(1, ds.size());\r\n+        for (Department x : ds) {\r\n+            Assert.assertNotNull(x.getEmployees());\r\n+            Assert.assertEquals(2, x.getEmployees().size());\r\n+            Assert.assertNotNull(x.getEmployee2s());\r\n+            Assert.assertEquals(2, x.getEmployee2s().size());\r\n+            System.out.println(x);\r\n         }\r\n \r\n+        em.close();\r\n+    }\r\n+\r\n+    public void testConsecutiveJPQLJoinFetchCall() {\r\n+        doQuery(emf, false);\r\n+        doQuery(emf, true);\r\n+    }\r\n+\r\n+    private void doQuery(EntityManagerFactory emf, boolean cached) {\r\n+        String query = \"select o from Employee o \" + \"left join fetch o.dept \" + \"where o.dept.deptno = 10\";\r\n+        EntityManager em = emf.createEntityManager();\r\n+\r\n+        sql.clear();\r\n+        List<Employee> emps = em.createQuery(query, Employee.class).getResultList();\r\n+        Assert.assertEquals(4, emps.size());\r\n+        for (Employee emp : emps) {\r\n+            em.detach(emp);\r\n+\r\n+            Assert.assertNotNull(emp.getDept());\r\n+            Assert.assertEquals(2, emp.getDept().getEmployees().size());\r\n+        }\r\n+        em.close();\r\n+        if (cached) {\r\n+            assertTrue(sql.size() == 0);\r\n+        }\r\n+    }\r\n }\r"}]}

