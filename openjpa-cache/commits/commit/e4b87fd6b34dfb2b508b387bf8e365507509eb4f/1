{"sha":"e4b87fd6b34dfb2b508b387bf8e365507509eb4f","node_id":"MDY6Q29tbWl0MjA2MzY0OmU0Yjg3ZmQ2YjM0ZGZiMmI1MDhiMzg3YmY4ZTM2NTUwNzUwOWViNGY=","commit":{"author":{"name":"David Ezzio","email":"dezzio@apache.org","date":"2009-04-16T23:27:02Z"},"committer":{"name":"David Ezzio","email":"dezzio@apache.org","date":"2009-04-16T23:27:02Z"},"message":"Fix for OpenJPA-1002, patch submitted by Ravi Palacherla\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@765801 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"37634dd3a2e1f10a035a1066b2ec8cf9a2affed0","url":"https://api.github.com/repos/apache/openjpa/git/trees/37634dd3a2e1f10a035a1066b2ec8cf9a2affed0"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/e4b87fd6b34dfb2b508b387bf8e365507509eb4f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/e4b87fd6b34dfb2b508b387bf8e365507509eb4f","html_url":"https://github.com/apache/openjpa/commit/e4b87fd6b34dfb2b508b387bf8e365507509eb4f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/e4b87fd6b34dfb2b508b387bf8e365507509eb4f/comments","author":null,"committer":null,"parents":[{"sha":"0daf1bffc8bef922263cee1cb5da605137fdcba1","url":"https://api.github.com/repos/apache/openjpa/commits/0daf1bffc8bef922263cee1cb5da605137fdcba1","html_url":"https://github.com/apache/openjpa/commit/0daf1bffc8bef922263cee1cb5da605137fdcba1"}],"stats":{"total":104,"additions":97,"deletions":7},"files":[{"sha":"7e5e6b9171658689cf46b92f92e03ac4970d89e2","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryCacheStoreQuery.java","status":"modified","additions":13,"deletions":7,"changes":20,"blob_url":"https://github.com/apache/openjpa/blob/e4b87fd6b34dfb2b508b387bf8e365507509eb4f/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryCacheStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/e4b87fd6b34dfb2b508b387bf8e365507509eb4f/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryCacheStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryCacheStoreQuery.java?ref=e4b87fd6b34dfb2b508b387bf8e365507509eb4f","patch":"@@ -289,7 +289,8 @@ public Executor newInMemoryExecutor(ClassMetaData meta, boolean subs) {\n \n     public Executor newDataStoreExecutor(ClassMetaData meta, boolean subs) {\n         Executor ex = _query.newDataStoreExecutor(meta, subs);\n-        return new QueryCacheExecutor(ex, meta, subs);\n+        return new QueryCacheExecutor(ex, meta, subs,\n+                      getContext().getFetchConfiguration());\n     }\n \n     public boolean supportsAbstractExecutors() {\n@@ -322,12 +323,14 @@ public Object evaluate(Object value, Object ob, Object[] params,\n         private final Executor _ex;\n         private final Class _candidate;\n         private final boolean _subs;\n+        private final FetchConfiguration _fc;\n \n         public QueryCacheExecutor(Executor ex, ClassMetaData meta,\n-            boolean subs) {\n+            boolean subs, FetchConfiguration fc) {\n             _ex = ex;\n             _candidate = (meta == null) ? null : meta.getDescribedType();\n             _subs = subs;\n+            _fc = fc;\n         }\n \n         public ResultObjectProvider executeQuery(StoreQuery q, Object[] params,\n@@ -342,7 +345,10 @@ public ResultObjectProvider executeQuery(StoreQuery q, Object[] params,\n \n             ResultObjectProvider rop = _ex.executeQuery(cq.getDelegate(),\n                 params, range);\n-            return cq.wrapResult(rop, key);\n+            if (_fc.getQueryCacheEnabled())\n+                return cq.wrapResult(rop, key);\n+            else\n+                return rop;\n         }\n \n         /**\n@@ -694,8 +700,8 @@ public void onTypesChanged(TypesChangedEvent ev) {\n         public final Object oid;\n \n         public CachedObjectId (Object oid)\n-\t\t{\n-\t\t\tthis.oid = oid;\n-\t\t}\n-\t}\n+        {\n+            this.oid = oid;\n+        }\n+    }\n }"},{"sha":"a7f32319f33f57df066f8b245243cc2be5638f47","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestQueryResultSize.java","status":"added","additions":84,"deletions":0,"changes":84,"blob_url":"https://github.com/apache/openjpa/blob/e4b87fd6b34dfb2b508b387bf8e365507509eb4f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestQueryResultSize.java","raw_url":"https://github.com/apache/openjpa/raw/e4b87fd6b34dfb2b508b387bf8e365507509eb4f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestQueryResultSize.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestQueryResultSize.java?ref=e4b87fd6b34dfb2b508b387bf8e365507509eb4f","patch":"@@ -0,0 +1,84 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.datacache;\n+\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import javax.persistence.EntityManagerFactory;\n+import org.apache.openjpa.datacache.*;\n+import javax.persistence.*;\n+import org.apache.openjpa.persistence.*;\n+\n+\n+import org.apache.openjpa.persistence.datacache.common.apps.CacheObjectE;\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\n+\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.OpenJPAQuery;\n+\n+public class TestQueryResultSize\n+    extends AbstractTestCase {\n+\n+    public TestQueryResultSize(String test) {\n+        super(test, \"datacachecactusapp\");\n+    }\n+\n+    private EntityManagerFactory _pmf;\n+    private OpenJPAEntityManager pm;\n+\n+    public void setUp() {\n+        System.out.println(\"****Deleted Records \"\n+            + deleteAll(CacheObjectE.class));\n+        Map propsMap = new HashMap();\n+        propsMap.put(\"openjpa.DataCache\", \"true\");\n+        propsMap.put(\"openjpa.QueryCache\", \"true\");\n+        propsMap.put(\"openjpa.RemoteCommitProvider\", \"sjvm\");\n+        _pmf = getEmf(propsMap);\n+    }\n+\n+    public void test() {\n+        CacheObjectE pc1 = new CacheObjectE();\n+        pc1.setStr(\"pc1\");\n+\n+        pm = (OpenJPAEntityManager) _pmf.createEntityManager();\n+\n+        startTx(pm);\n+        pm.persist(pc1);\n+        endTx(pm);\n+\n+        pm.getFetchPlan().setQueryResultCacheEnabled(false);\n+        OpenJPAQuery q = pm.createQuery(\n+            \"select a FROM \" + CacheObjectE.class.getSimpleName() +\n+                \" a where a.str = 'pc1'\");\n+        List res = (List) q.getResultList();\n+        assertEquals(0, getQueryCacheSize());\n+        endEm(pm);\n+\n+        System.out.println(\"****Deleted Records \" + \n+            deleteAll(CacheObjectE.class));\n+    }\n+\n+    private int getQueryCacheSize() {\n+        return ( ((ConcurrentQueryCache)(OpenJPAPersistence.cast(\n+            pm.getEntityManagerFactory()).getQueryResultCache().getDelegate())).\n+            getCacheMap().size());\n+    }\n+}"}]}

