{"sha":"e541936463b4b6be3ab05ded5b2ed224b4692d6b","node_id":"MDY6Q29tbWl0MjA2MzY0OmU1NDE5MzY0NjNiNGI2YmUzYWIwNWRlZDViMmVkMjI0YjQ2OTJkNmI=","commit":{"author":{"name":"Srinivasa Segu","email":"ssegu@apache.org","date":"2007-04-05T20:06:24Z"},"committer":{"name":"Srinivasa Segu","email":"ssegu@apache.org","date":"2007-04-05T20:06:24Z"},"message":"OPENJPA-203.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@525950 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a97090e49a50857e514e1dc90f8c3f483ef3a274","url":"https://api.github.com/repos/apache/openjpa/git/trees/a97090e49a50857e514e1dc90f8c3f483ef3a274"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/e541936463b4b6be3ab05ded5b2ed224b4692d6b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/e541936463b4b6be3ab05ded5b2ed224b4692d6b","html_url":"https://github.com/apache/openjpa/commit/e541936463b4b6be3ab05ded5b2ed224b4692d6b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/e541936463b4b6be3ab05ded5b2ed224b4692d6b/comments","author":null,"committer":null,"parents":[{"sha":"80f7795fefebd6776293ad0c51417e0fccdbeadd","url":"https://api.github.com/repos/apache/openjpa/commits/80f7795fefebd6776293ad0c51417e0fccdbeadd","html_url":"https://github.com/apache/openjpa/commit/80f7795fefebd6776293ad0c51417e0fccdbeadd"}],"stats":{"total":20,"additions":10,"deletions":10},"files":[{"sha":"f81c93af5570d5f07e12de930f3fe359ae0a0cff","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PessimisticLockManager.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/e541936463b4b6be3ab05ded5b2ed224b4692d6b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PessimisticLockManager.java","raw_url":"https://github.com/apache/openjpa/raw/e541936463b4b6be3ab05ded5b2ed224b4692d6b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PessimisticLockManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PessimisticLockManager.java?ref=e541936463b4b6be3ab05ded5b2ed224b4692d6b","patch":"@@ -86,7 +86,7 @@ public void loadedForUpdate(OpenJPAStateManager sm) {\n             setLockLevel(sm, LOCK_DATASTORE_ONLY);\n     }\n \n-    protected void lockInternal(OpenJPAStateManager sm, int level, int timeout,\n+    protected void lockInternal(OpenJPAStateManager sm, int level, long timeout,\n         Object sdata) {\n         // we can skip any already-locked instance regardless of level because\n         // we treat all locks the same (though super doesn't)\n@@ -103,7 +103,7 @@ protected void lockInternal(OpenJPAStateManager sm, int level, int timeout,\n      * Lock the specified instance row by issuing a \"SELECT ... FOR UPDATE\"\n      * statement.\n      */\n-    private void lockRow(OpenJPAStateManager sm, int timeout) {\n+    private void lockRow(OpenJPAStateManager sm, long timeout) {\n         // assert that the dictionary supports the \"SELECT ... FOR UPDATE\"\n         // construct; if not, and we the assertion does not throw an\n         // exception, then just return without locking\n@@ -136,7 +136,7 @@ private void lockRow(OpenJPAStateManager sm, int timeout) {\n                     if (log.isWarnEnabled())\n                         log.warn(_loc.get(\"millis-query-timeout\"));\n                 }\n-                stmnt.setQueryTimeout(timeout / 1000);\n+                stmnt.setQueryTimeout((int) (timeout / 1000));\n             }\n             rs = stmnt.executeQuery();\n             if (!rs.next())"},{"sha":"ee39e982e177320ac0ea0a7d910f121ba02b0924","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/VersionLockManager.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/e541936463b4b6be3ab05ded5b2ed224b4692d6b/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/VersionLockManager.java","raw_url":"https://github.com/apache/openjpa/raw/e541936463b4b6be3ab05ded5b2ed224b4692d6b/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/VersionLockManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/VersionLockManager.java?ref=e541936463b4b6be3ab05ded5b2ed224b4692d6b","patch":"@@ -69,17 +69,15 @@ public void lock(OpenJPAStateManager sm, int level, int timeout,\n             return;\n         while (sm.getOwner() != null)\n             sm = sm.getOwner();\n-        int oldlevel = getLockLevel(sm);\n-        if (!sm.isPersistent() || sm.isNew() || level <= oldlevel)\n+        int oldLevel = getLockLevel(sm);\n+        if (!sm.isPersistent() || sm.isNew() || level <= oldLevel)\n             return;\n \n-        // set the lock level first to avoid infinite recursion\n-        setLockLevel(sm, level);\n         try {\n             lockInternal(sm, level, timeout, sdata);\n         } catch (RuntimeException re) {\n             // revert lock\n-            setLockLevel(sm, oldlevel);\n+            setLockLevel(sm, oldLevel);\n             throw re;\n         }\n     }\n@@ -94,6 +92,9 @@ public void lock(OpenJPAStateManager sm, int level, int timeout,\n      */\n     protected void lockInternal(OpenJPAStateManager sm, int level, long timeout,\n         Object sdata) {\n+        // Set lock level first to prevent infinite recursion with\n+        // transactional(..) call\n+        setLockLevel(sm, level);\n         if (level >= LockLevels.LOCK_WRITE && _versionUpdateOnWriteLock)\n             getContext().transactional(sm.getManagedInstance(), true, null);\n         else if (level >= LockLevels.LOCK_READ && _versionCheckOnReadLock)\n@@ -132,6 +133,5 @@ public void setVersionUpdateOnWriteLock(boolean versionUpdateOnWriteLock) {\n      */\n     public boolean getVersionUpdateOnWriteLock() {\n         return _versionUpdateOnWriteLock;\n-\t}\n+    }\n }\n-"}]}

