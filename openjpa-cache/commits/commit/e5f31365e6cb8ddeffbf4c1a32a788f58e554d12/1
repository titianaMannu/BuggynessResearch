{"sha":"e5f31365e6cb8ddeffbf4c1a32a788f58e554d12","node_id":"MDY6Q29tbWl0MjA2MzY0OmU1ZjMxMzY1ZTZjYjhkZGVmZmJmNGMxYTMyYTc4OGY1OGU1NTRkMTI=","commit":{"author":{"name":"A. Abram White","email":"awhite@apache.org","date":"2008-04-11T18:07:12Z"},"committer":{"name":"A. Abram White","email":"awhite@apache.org","date":"2008-04-11T18:07:12Z"},"message":"Submit patch for OPENJPA-564.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.1.x@647250 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6a17230e30699ae76fd6d215306b340960cef2d5","url":"https://api.github.com/repos/apache/openjpa/git/trees/6a17230e30699ae76fd6d215306b340960cef2d5"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/e5f31365e6cb8ddeffbf4c1a32a788f58e554d12","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/e5f31365e6cb8ddeffbf4c1a32a788f58e554d12","html_url":"https://github.com/apache/openjpa/commit/e5f31365e6cb8ddeffbf4c1a32a788f58e554d12","comments_url":"https://api.github.com/repos/apache/openjpa/commits/e5f31365e6cb8ddeffbf4c1a32a788f58e554d12/comments","author":null,"committer":null,"parents":[{"sha":"e0701520126cbd93e75941756afa9c7954c8f319","url":"https://api.github.com/repos/apache/openjpa/commits/e0701520126cbd93e75941756afa9c7954c8f319","html_url":"https://github.com/apache/openjpa/commit/e0701520126cbd93e75941756afa9c7954c8f319"}],"stats":{"total":68,"additions":65,"deletions":3},"files":[{"sha":"9b01fc66f0bf141874f1c8615416113504a6e3ba","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MySQLDictionary.java","status":"modified","additions":65,"deletions":3,"changes":68,"blob_url":"https://github.com/apache/openjpa/blob/e5f31365e6cb8ddeffbf4c1a32a788f58e554d12/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MySQLDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/e5f31365e6cb8ddeffbf4c1a32a788f58e554d12/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MySQLDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MySQLDictionary.java?ref=e5f31365e6cb8ddeffbf4c1a32a788f58e554d12","patch":"@@ -18,6 +18,8 @@\n  */\n package org.apache.openjpa.jdbc.sql;\n \n+import java.sql.Connection;\n+import java.sql.DatabaseMetaData;\n import java.sql.ResultSet;\n import java.sql.SQLException;\n import java.sql.Types;\n@@ -51,7 +53,7 @@\n     /**\n      * Whether the driver automatically deserializes blobs.\n      */\n-    public boolean driverDeserializesBlobs = true;\n+    public boolean driverDeserializesBlobs = false;\n \n     /**\n      * Whether to inline multi-table bulk-delete operations into MySQL's \n@@ -70,11 +72,9 @@ public MySQLDictionary() {\n         supportsDeferredConstraints = false;\n         constraintNameMode = CONS_NAME_MID;\n         supportsMultipleNontransactionalResultSets = false;\n-        supportsSubselect = false; // old versions\n         requiresAliasForSubselect = true; // new versions\n         supportsSelectStartIndex = true;\n         supportsSelectEndIndex = true;\n-        allowsAliasInBulkClause = false;\n \n         concatenateFunction = \"CONCAT({0},{1})\";\n \n@@ -112,6 +112,68 @@ public MySQLDictionary() {\n             \"ZEROFILL\" }));\n     }\n \n+    public void connectedConfiguration(Connection conn) throws SQLException {\n+        super.connectedConfiguration(conn);\n+\n+        DatabaseMetaData metaData = conn.getMetaData();\n+        // The product version looks like 4.1.3-nt\n+        String productVersion = metaData.getDatabaseProductVersion();\n+        // The driver version looks like mysql-connector-java-3.1.11 (...)\n+        String driverVersion = metaData.getDriverVersion();\n+\n+        try {\n+            int[] versions = getMajorMinorVersions(productVersion);\n+            int maj = versions[0];\n+            int min = versions[1];\n+            if (maj < 4 || (maj == 4 && min < 1)) {\n+                supportsSubselect = false;\n+                allowsAliasInBulkClause = false;\n+            }\n+\n+            versions = getMajorMinorVersions(driverVersion);\n+            maj = versions[0];\n+            if (maj < 5) {\n+                driverDeserializesBlobs = true;\n+            }\n+        } catch (IllegalArgumentException e) {\n+            // we don't understand the version format.\n+            // That is ok. We just take the default values.\n+        }\n+    }\n+\n+    private static int[] getMajorMinorVersions(String versionStr)\n+        throws IllegalArgumentException {\n+        int beginIndex = 0;\n+        int endIndex = 0;\n+\n+        versionStr = versionStr.trim();\n+        char[] charArr = versionStr.toCharArray();\n+        for (int i = 0; i < charArr.length; i++) {\n+            if (Character.isDigit(charArr[i])) {\n+                beginIndex = i;\n+                break;\n+            }\n+        }\n+\n+        for (int i = beginIndex+1; i < charArr.length; i++) {\n+            if (charArr[i] != '.' && !Character.isDigit(charArr[i])) {\n+                endIndex = i;\n+                break;\n+            }\n+        }\n+\n+        if (endIndex < beginIndex)\n+            throw new IllegalArgumentException();\n+\n+        String[] arr = versionStr.substring(beginIndex, endIndex).split(\"\\\\.\");\n+        if (arr.length < 2)\n+            throw new IllegalArgumentException();\n+\n+        int maj = Integer.parseInt(arr[0]);\n+        int min = Integer.parseInt(arr[1]);\n+        return new int[]{maj, min};\n+    }\n+\n     public String[] getCreateTableSQL(Table table) {\n         String[] sql = super.getCreateTableSQL(table);\n         if (!StringUtils.isEmpty(tableType))"}]}

