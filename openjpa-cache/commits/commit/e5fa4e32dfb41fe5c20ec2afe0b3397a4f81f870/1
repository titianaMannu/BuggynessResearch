{"sha":"e5fa4e32dfb41fe5c20ec2afe0b3397a4f81f870","node_id":"MDY6Q29tbWl0MjA2MzY0OmU1ZmE0ZTMyZGZiNDFmZTVjMjBlYzJhZmUwYjMzOTdhNGY4MWY4NzA=","commit":{"author":{"name":"Heath Thomann","email":"hthomann@apache.org","date":"2015-09-10T01:53:27Z"},"committer":{"name":"Heath Thomann","email":"hthomann@apache.org","date":"2015-09-10T01:53:27Z"},"message":"OPENJPA-2586: Fix to return proper relationship data when QueryCache and FetchPlans are used.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1702147 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"fb51ccda53448b81d0ba59113ad3347e8a9c9a49","url":"https://api.github.com/repos/apache/openjpa/git/trees/fb51ccda53448b81d0ba59113ad3347e8a9c9a49"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/e5fa4e32dfb41fe5c20ec2afe0b3397a4f81f870","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/e5fa4e32dfb41fe5c20ec2afe0b3397a4f81f870","html_url":"https://github.com/apache/openjpa/commit/e5fa4e32dfb41fe5c20ec2afe0b3397a4f81f870","comments_url":"https://api.github.com/repos/apache/openjpa/commits/e5fa4e32dfb41fe5c20ec2afe0b3397a4f81f870/comments","author":null,"committer":null,"parents":[{"sha":"2353455a487fb0c1b8f91d5dbbef887c8ac5436d","url":"https://api.github.com/repos/apache/openjpa/commits/2353455a487fb0c1b8f91d5dbbef887c8ac5436d","html_url":"https://github.com/apache/openjpa/commit/2353455a487fb0c1b8f91d5dbbef887c8ac5436d"}],"stats":{"total":152,"additions":152,"deletions":0},"files":[{"sha":"a7026c541212aecd24b762f096309529192dbf3c","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryCacheStoreQuery.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/e5fa4e32dfb41fe5c20ec2afe0b3397a4f81f870/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryCacheStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/e5fa4e32dfb41fe5c20ec2afe0b3397a4f81f870/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryCacheStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryCacheStoreQuery.java?ref=e5fa4e32dfb41fe5c20ec2afe0b3397a4f81f870","patch":"@@ -338,6 +338,13 @@ public ResultObjectProvider executeQuery(StoreQuery q, Object[] params, Range ra\n             // Create a new FetchConfiguration that will be used to ensure that any JOIN FETCHed fields are loaded\n             StoreContext store = q.getContext().getStoreContext();\n             FetchConfiguration cacheFc = store.pushFetchConfiguration();\n+\n+            // OPENJPA-2586: If the FetchConfig for this executor contains fields,\n+            // then add them to the new FetchConfig.\n+            if (!_fc.getFields().isEmpty()) {\n+              cacheFc.addFields(_fc.getFields());\n+            }\n+\n             for (QueryExpressions qe : _ex.getQueryExpressions()) {\n                 for (String fetchFields : qe.fetchPaths) {\n                     cacheFc.addField(fetchFields);"},{"sha":"3a8c96cf69f719df15ca83a7724dd5dd08b5e030","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/querycache/QCEntityM2O.java","status":"added","additions":57,"deletions":0,"changes":57,"blob_url":"https://github.com/apache/openjpa/blob/e5fa4e32dfb41fe5c20ec2afe0b3397a4f81f870/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/querycache/QCEntityM2O.java","raw_url":"https://github.com/apache/openjpa/raw/e5fa4e32dfb41fe5c20ec2afe0b3397a4f81f870/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/querycache/QCEntityM2O.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/querycache/QCEntityM2O.java?ref=e5fa4e32dfb41fe5c20ec2afe0b3397a4f81f870","patch":"@@ -0,0 +1,57 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.querycache;\r\n+\r\n+import javax.persistence.Column;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.FetchType;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.ManyToOne;\r\n+import javax.persistence.NamedQueries;\r\n+import javax.persistence.NamedQuery;\r\n+\r\n+@Entity\r\n+public class QCEntityM2O {\r\n+    @Id\r\n+    @Column(name = \"PK\")\r\n+    private String pk;\r\n+    \r\n+    @ManyToOne(fetch = FetchType.LAZY)\r\n+    private QCEntity qc;\r\n+\r\n+    public QCEntityM2O(String pk) {\r\n+        this.pk = pk;\r\n+    }\r\n+    \r\n+    public String getPk() {\r\n+        return pk;\r\n+    }\r\n+\r\n+    public void setPk(String pk) {\r\n+        this.pk = pk;\r\n+    }\r\n+\r\n+    public void setQc(QCEntity qc) {\r\n+        this.qc = qc;\r\n+    }\r\n+\r\n+    public QCEntity getQc() {\r\n+        return qc;\r\n+    }\r\n+}\r"},{"sha":"202cafa55b536db3401b47da4754d6fa5ffcc300","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/querycache/TestQueryCacheWithDataCache.java","status":"added","additions":88,"deletions":0,"changes":88,"blob_url":"https://github.com/apache/openjpa/blob/e5fa4e32dfb41fe5c20ec2afe0b3397a4f81f870/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/querycache/TestQueryCacheWithDataCache.java","raw_url":"https://github.com/apache/openjpa/raw/e5fa4e32dfb41fe5c20ec2afe0b3397a4f81f870/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/querycache/TestQueryCacheWithDataCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/querycache/TestQueryCacheWithDataCache.java?ref=e5fa4e32dfb41fe5c20ec2afe0b3397a4f81f870","patch":"@@ -0,0 +1,88 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.querycache;\r\n+\r\n+import java.util.List;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.Query;\r\n+\r\n+import org.apache.openjpa.persistence.FetchPlan;\r\n+import org.apache.openjpa.persistence.OpenJPAQuery;\r\n+import org.apache.openjpa.persistence.querycache.QCEntityM2O;\r\n+import org.apache.openjpa.persistence.querycache.QCEntity;\r\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n+\r\n+public class TestQueryCacheWithDataCache extends SingleEMFTestCase {\r\n+\r\n+    public void setUp() {\r\n+        super.setUp(DROP_TABLES, QCEntityM2O.class, QCEntity.class, \"openjpa.DataCache\", \"true\",\r\n+            \"openjpa.RemoteCommitProvider\", \"sjvm\", \"openjpa.QueryCache\", \"true\");\r\n+    }\r\n+\r\n+    /*\r\n+     * Test for OPENJPA-2586\r\n+     */\r\n+    public void testWithFetchPlan() {\r\n+        populate();\r\n+\r\n+        EntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        doQueryWithFetchPlan(em);\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+\r\n+        em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        doQueryWithFetchPlan(em);\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+    }\r\n+\r\n+    public void doQueryWithFetchPlan(EntityManager em) {\r\n+        String jpql = \"Select e1 from QCEntityM2O e1\";\r\n+\r\n+        Query q = em.createQuery(jpql);\r\n+        FetchPlan fetchPlan = q.unwrap(OpenJPAQuery.class).getFetchPlan();\r\n+        fetchPlan.addField(QCEntityM2O.class, \"qc\");\r\n+        List<QCEntityM2O> results = (List<QCEntityM2O>) q.getResultList();\r\n+\r\n+        em.clear();\r\n+\r\n+        assertTrue(\"No results returned!\", !results.isEmpty());\r\n+        for (QCEntityM2O e1 : results) {\r\n+            assertNotNull(\"A 'QCEntity' should have been returned!\", e1.getQc());\r\n+        }\r\n+    }\r\n+\r\n+    public void populate() {\r\n+        EntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        \r\n+        QCEntityM2O e1 = new QCEntityM2O(\"aQCEntityM2O\");\r\n+        QCEntity e2 = new QCEntity(\"aQCEntityM2O\", \"test\", 2L);\r\n+        e1.setQc(e2);\r\n+        \r\n+        em.persist(e1);\r\n+        em.persist(e2);\r\n+\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+    }\r\n+}\r"}]}

