{"sha":"e6129051c263992fde38687ada21a4b41336b431","node_id":"MDY6Q29tbWl0MjA2MzY0OmU2MTI5MDUxYzI2Mzk5MmZkZTM4Njg3YWRhMjFhNGI0MTMzNmI0MzE=","commit":{"author":{"name":"Heath Thomann","email":"hthomann@apache.org","date":"2012-06-01T16:02:31Z"},"committer":{"name":"Heath Thomann","email":"hthomann@apache.org","date":"2012-06-01T16:02:31Z"},"message":"OPENJPA-2095: Applied Helen Xu's patch to trunk with Albert's test case changes.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1345263 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3c4aaf33b240874a11d4dc0095589c27fc334f01","url":"https://api.github.com/repos/apache/openjpa/git/trees/3c4aaf33b240874a11d4dc0095589c27fc334f01"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/e6129051c263992fde38687ada21a4b41336b431","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/e6129051c263992fde38687ada21a4b41336b431","html_url":"https://github.com/apache/openjpa/commit/e6129051c263992fde38687ada21a4b41336b431","comments_url":"https://api.github.com/repos/apache/openjpa/commits/e6129051c263992fde38687ada21a4b41336b431/comments","author":null,"committer":null,"parents":[{"sha":"5fb9e7172681211588a526257d8c5a1bb5111530","url":"https://api.github.com/repos/apache/openjpa/commits/5fb9e7172681211588a526257d8c5a1bb5111530","html_url":"https://github.com/apache/openjpa/commit/5fb9e7172681211588a526257d8c5a1bb5111530"}],"stats":{"total":203,"additions":201,"deletions":2},"files":[{"sha":"8636d5aee52ac8abab64c318289db3fddeae696a","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/AbstractUpdateManager.java","status":"modified","additions":11,"deletions":2,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/e6129051c263992fde38687ada21a4b41336b431/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/AbstractUpdateManager.java","raw_url":"https://github.com/apache/openjpa/raw/e6129051c263992fde38687ada21a4b41336b431/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/AbstractUpdateManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/AbstractUpdateManager.java?ref=e6129051c263992fde38687ada21a4b41336b431","patch":"@@ -34,6 +34,8 @@\n import org.apache.openjpa.jdbc.meta.Strategy;\n import org.apache.openjpa.jdbc.meta.Version;\n import org.apache.openjpa.jdbc.sql.DBDictionary;\n+import org.apache.openjpa.jdbc.sql.Row;\n+import org.apache.openjpa.jdbc.sql.RowImpl;\n import org.apache.openjpa.jdbc.sql.RowManager;\n import org.apache.openjpa.jdbc.sql.SQLExceptions;\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n@@ -156,14 +158,17 @@ protected abstract Collection flush(RowManager rowMgr,\n     protected Collection populateRowManager(OpenJPAStateManager sm,\n         RowManager rowMgr, JDBCStore store, Collection exceps,\n         Collection customs) {\n+    \tint action = Row.ACTION_UPDATE;\n         try {\n             BitSet dirty;\n             if (sm.getPCState() == PCState.PNEW && !sm.isFlushed()) {\n-                insert(sm, (ClassMapping) sm.getMetaData(), rowMgr, store,\n+            \taction = Row.ACTION_INSERT;\n+            \tinsert(sm, (ClassMapping) sm.getMetaData(), rowMgr, store,\n                     customs);\n             } else if (sm.getPCState() == PCState.PNEWFLUSHEDDELETED\n                 || sm.getPCState() == PCState.PDELETED) {\n-                delete(sm, (ClassMapping) sm.getMetaData(), rowMgr, store,\n+            \taction = Row.ACTION_DELETE;\n+            \tdelete(sm, (ClassMapping) sm.getMetaData(), rowMgr, store,\n                     customs);\n             } else if ((dirty = ImplHelper.getUpdateFields(sm)) != null) {\n                 update(sm, dirty, (ClassMapping) sm.getMetaData(), rowMgr,\n@@ -180,6 +185,10 @@ protected Collection populateRowManager(OpenJPAStateManager sm,\n         } catch (SQLException se) {\n             exceps = addException(exceps, SQLExceptions.getStore(se, dict));\n         } catch (OpenJPAException ke) {\n+        \tRowImpl row = (RowImpl) rowMgr.getRow(((ClassMapping) sm.getMetaData()).getTable(), action, sm, false);\n+            if (row != null) {\n+                row.setFlushed(true);\n+            } \n             exceps = addException(exceps, ke);\n         }\n         return exceps;"},{"sha":"f60b1b5c9e01cd655e288f90bfb8c5264219e693","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/EntityWithFailedExternalizer.java","status":"added","additions":119,"deletions":0,"changes":119,"blob_url":"https://github.com/apache/openjpa/blob/e6129051c263992fde38687ada21a4b41336b431/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/EntityWithFailedExternalizer.java","raw_url":"https://github.com/apache/openjpa/raw/e6129051c263992fde38687ada21a4b41336b431/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/EntityWithFailedExternalizer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/EntityWithFailedExternalizer.java?ref=e6129051c263992fde38687ada21a4b41336b431","patch":"@@ -0,0 +1,119 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps;\n+\n+import java.io.Serializable;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.PersistenceException;\n+\n+@Entity\n+public class EntityWithFailedExternalizer implements Serializable {\n+\n+    private static final long serialVersionUID = 1L;\n+    \n+    @Id\n+    private int iref;\n+\n+    private String name;\n+\n+    private String data;\n+\n+    @org.apache.openjpa.persistence.Persistent\n+    @org.apache.openjpa.persistence.Externalizer(\"check\")\n+    private TestExternal ext;\n+    \n+    public static class TestExternal\n+    {\n+        private static final long serialVersionUID = 1L;\n+        public boolean throwEx=false;\n+        \n+        private String value = \"test - TE\";\n+\n+        public TestExternal() {\n+            super();\n+        }\n+        \n+        public TestExternal(String s) {\n+            value = s;\n+        }\n+        \n+        public String check() throws Exception {\n+            if (throwEx){\n+                throw new PersistenceException(\"test exception externalizer\");\n+            }\n+            return value;           \n+        }\n+        \n+        public String getValue() {\n+            return value;\n+        }\n+        \n+        public void getValue(String s) {\n+            value = s;\n+        }\n+    }\n+\n+    public EntityWithFailedExternalizer() {\n+        super();\n+    }\n+\n+    public EntityWithFailedExternalizer(int iref, String name, String data) {\n+        super();\n+        this.iref = iref;\n+        this.name = name;\n+        this.data = data;\n+        this.ext = new TestExternal();\n+    }\n+    \n+    public int getIref() {\n+        return this.iref;\n+    }\n+\n+    public void setIref(int iref) {\n+        this.iref = iref;\n+    }\n+\n+    public String getName() {\n+        return this.name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String getData() {\n+        return this.data;\n+    }\n+\n+    public void setData(String data) {\n+        this.data = data;\n+    }\n+\n+    public void setExt(TestExternal te){\n+        this.ext = te;\n+        return;\n+    }\n+    \n+    public TestExternal getExt(){\n+        return this.ext;\n+    }   \n+}\n+"},{"sha":"d1064f83c54334f0970f7598736a5732179a5ca4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestBatchFlushWithMetadataException.java","status":"added","additions":71,"deletions":0,"changes":71,"blob_url":"https://github.com/apache/openjpa/blob/e6129051c263992fde38687ada21a4b41336b431/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestBatchFlushWithMetadataException.java","raw_url":"https://github.com/apache/openjpa/raw/e6129051c263992fde38687ada21a4b41336b431/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestBatchFlushWithMetadataException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestBatchFlushWithMetadataException.java?ref=e6129051c263992fde38687ada21a4b41336b431","patch":"@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.kernel;\n+\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityTransaction;\n+\n+import org.apache.openjpa.persistence.PersistenceException;\n+import org.apache.openjpa.persistence.RollbackException;\n+import org.apache.openjpa.persistence.jdbc.common.apps.EntityWithFailedExternalizer;\n+import org.apache.openjpa.persistence.test.SQLListenerTestCase;\n+\n+/*\n+ * when there is a metadata exception during the flushing for a batch job, the AbstractUpdateManager\n+ *  should capture the exception and skip the flushing of the failed object.\n+ */\n+public class TestBatchFlushWithMetadataException extends SQLListenerTestCase {   \n+    \n+    @Override\n+    public void setUp() throws Exception {\n+        setUp(DROP_TABLES, EntityWithFailedExternalizer.class);\n+    }\n+    \n+    public void testCreate(){\n+        EntityManager em = emf.createEntityManager();\n+        EntityTransaction tx = em.getTransaction();\n+        \n+        tx.begin();\n+        EntityWithFailedExternalizer item1 = new EntityWithFailedExternalizer(1001, \"MyName1\", \"description1\");\n+        EntityWithFailedExternalizer item2 = new EntityWithFailedExternalizer(1002, \"MyName2\", \"description2\");\n+        item1.getExt().throwEx=true;\n+        EntityWithFailedExternalizer item3 = new EntityWithFailedExternalizer(1003, \"MyName3\", \"description3\");  \n+        \n+        em.persist(item1);\n+        em.persist(item2);\n+        em.persist(item3);\n+        commitAndValidate(tx);\n+        em.close();\n+    }\n+    \n+    private void commitAndValidate(EntityTransaction tx){\n+        try {   \n+            resetSQL();\n+            tx.commit();\n+            fail(\"RollbackException should have been thrown from the externalizer\");\n+        }catch (RollbackException rollBackException) {\n+            Throwable[] throwables = rollBackException.getNestedThrowables();\n+            assertTrue(throwables[0] instanceof PersistenceException);\n+            PersistenceException persistentException = (PersistenceException) throwables[0];\n+            assertNotNull(persistentException);\n+            assertEquals(1, persistentException.getNestedThrowables().length); \n+        }\n+    }\n+}"}]}

