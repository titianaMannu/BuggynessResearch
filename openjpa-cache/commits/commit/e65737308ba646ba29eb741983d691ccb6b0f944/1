{"sha":"e65737308ba646ba29eb741983d691ccb6b0f944","node_id":"MDY6Q29tbWl0MjA2MzY0OmU2NTczNzMwOGJhNjQ2YmEyOWViNzQxOTgzZDY5MWNjYjZiMGY5NDQ=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-08-02T19:31:45Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-08-02T19:31:45Z"},"message":"OPENJPA-1757: Check CacheRetrieveMode in DataCacheStoreManager when synchronizing version.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@981664 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"af96d3a7e0c5448acc3311a9c749a15a4a978701","url":"https://api.github.com/repos/apache/openjpa/git/trees/af96d3a7e0c5448acc3311a9c749a15a4a978701"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/e65737308ba646ba29eb741983d691ccb6b0f944","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/e65737308ba646ba29eb741983d691ccb6b0f944","html_url":"https://github.com/apache/openjpa/commit/e65737308ba646ba29eb741983d691ccb6b0f944","comments_url":"https://api.github.com/repos/apache/openjpa/commits/e65737308ba646ba29eb741983d691ccb6b0f944/comments","author":null,"committer":null,"parents":[{"sha":"a4db0cb1ca08983e08d400e5e67e29974a47de14","url":"https://api.github.com/repos/apache/openjpa/commits/a4db0cb1ca08983e08d400e5e67e29974a47de14","html_url":"https://github.com/apache/openjpa/commit/a4db0cb1ca08983e08d400e5e67e29974a47de14"}],"stats":{"total":37,"additions":33,"deletions":4},"files":[{"sha":"1c7843e891367b930e7ad2982314f1511e5163eb","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/e65737308ba646ba29eb741983d691ccb6b0f944/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/e65737308ba646ba29eb741983d691ccb6b0f944/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java?ref=e65737308ba646ba29eb741983d691ccb6b0f944","patch":"@@ -300,14 +300,16 @@ public boolean isCached(List<Object> oids, BitSet edata) {\n \n     public boolean syncVersion(OpenJPAStateManager sm, Object edata) {\n         DataCache cache = _mgr.selectCache(sm);\n-        if (cache == null || sm.isEmbedded())\n+        FetchConfiguration fc = sm.getContext().getFetchConfiguration();\n+        if (cache == null || sm.isEmbedded() || fc.getCacheRetrieveMode() == DataCacheRetrieveMode.BYPASS) {\n             return super.syncVersion(sm, edata);\n-\n+        }\n+        \n         DataCachePCData data;\n         Object version = null;\n         data = cache.get(sm.getObjectId());\n         if (!isLocking(null) && data != null)\n-            version = data.getVersion();\n+            version = data.getVersion(); \n \n         // if we have a cached version update from there\n         if (version != null) {"},{"sha":"c340469ed88b78a7c4cb4c10d4f286750d3c94e6","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/AbstractCacheModeTestCase.java","status":"modified","additions":27,"deletions":0,"changes":27,"blob_url":"https://github.com/apache/openjpa/blob/e65737308ba646ba29eb741983d691ccb6b0f944/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/AbstractCacheModeTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/e65737308ba646ba29eb741983d691ccb6b0f944/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/AbstractCacheModeTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/AbstractCacheModeTestCase.java?ref=e65737308ba646ba29eb741983d691ccb6b0f944","patch":"@@ -24,11 +24,13 @@\n import javax.persistence.CacheRetrieveMode;\n import javax.persistence.CacheStoreMode;\n import javax.persistence.EntityManager;\n+import javax.persistence.LockModeType;\n \n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.lib.jdbc.AbstractJDBCListener;\n import org.apache.openjpa.lib.jdbc.JDBCEvent;\n import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\n import org.apache.openjpa.persistence.cache.jpa.featureSelection.CacheEntity;\n import org.apache.openjpa.persistence.cache.jpa.featureSelection.CacheableEntity;\n import org.apache.openjpa.persistence.cache.jpa.featureSelection.NegatedCachableEntity;\n@@ -347,6 +349,31 @@ public void testStoreModeUseUse() {\n             entityManagerStoreModeTest(CacheStoreMode.USE, CacheStoreMode.USE, true, true, 1);\n         }\n     }\n+    \n+    public void testRefresh() {\n+        if (getCacheEnabled()) {\n+            OpenJPAEntityManagerSPI em = getEntityManagerFactory().createEntityManager();\n+            CacheableEntity e1 = em.find(CacheableEntity.class, 1);\n+            XmlCacheableEntity e2 = em.find(XmlCacheableEntity.class, 1);\n+            assertNotNull(e1);\n+            assertNotNull(e2);\n+            int e1Version = e1.getVersion();\n+            int e2Version = e2.getVersion();\n+\n+            String e1Sql = \"UPDATE CacheableEntity SET VERSION=?1 WHERE ID=?2\";\n+            String e2Sql = \"UPDATE XmlCacheableEntity SET VERSION=?1 WHERE ID=?2\";\n+            em.getTransaction().begin();\n+            assertEquals(1, em.createNativeQuery(e1Sql).setParameter(1, e1Version + 1).setParameter(2, e1.getId())\n+                .executeUpdate());\n+            assertEquals(1, em.createNativeQuery(e2Sql).setParameter(1, e2Version + 1).setParameter(2, e2.getId())\n+                .executeUpdate());\n+            em.getTransaction().commit();\n+            em.refresh(e1);\n+            em.refresh(e2);\n+            assertEquals(e1Version + 1, e1.getVersion());\n+            assertEquals(e2Version + 1, e2.getVersion());\n+        }\n+    }\n \n     public void testStoreModeUseRefresh() {\n         if (getCacheEnabled()) {"},{"sha":"6263e7876ddfb59b4e4bbb3b31657d56769ac7d9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheBehavesIdentical.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/e65737308ba646ba29eb741983d691ccb6b0f944/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheBehavesIdentical.java","raw_url":"https://github.com/apache/openjpa/raw/e65737308ba646ba29eb741983d691ccb6b0f944/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheBehavesIdentical.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheBehavesIdentical.java?ref=e65737308ba646ba29eb741983d691ccb6b0f944","patch":"@@ -522,7 +522,7 @@ public void verifyDeleteDetectionOnRefresh(boolean useDataCache,\n     }\n \n     public void testDeleteIsNotDetectedOnCleanRefreshWithoutLockWithDataCache() {\n-        verifyDeleteDetectionOnRefresh(WITH_DATACACHE, !DIRTY, NOLOCK, NO_ERROR);\n+        verifyDeleteDetectionOnRefresh(WITH_DATACACHE, !DIRTY, NOLOCK, ENTITY_NOT_FOUND_ERROR);\n     }\n     \n     public void testDeleteIsDetectedOnCleanRefreshWithLockWithDataCache() {"}]}

