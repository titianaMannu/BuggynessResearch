{"sha":"e65f53b43de6707db3515c17daa40a9103a558aa","node_id":"MDY6Q29tbWl0MjA2MzY0OmU2NWY1M2I0M2RlNjcwN2RiMzUxNWMxN2RhYTQwYTkxMDNhNTU4YWE=","commit":{"author":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-06-26T18:22:06Z"},"committer":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-06-26T18:22:06Z"},"message":"OPENJPA-61.  Marc's patch tests out okay with WebSphere.  I made a couple of minor cosmetic changes to the\npatch.  We need to get this into the stream for additional testing and verification by other application servers.\nSo, let's go for it...\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@550898 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"65324950a07a17ac1a897c5648df72c5db948c76","url":"https://api.github.com/repos/apache/openjpa/git/trees/65324950a07a17ac1a897c5648df72c5db948c76"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/e65f53b43de6707db3515c17daa40a9103a558aa","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/e65f53b43de6707db3515c17daa40a9103a558aa","html_url":"https://github.com/apache/openjpa/commit/e65f53b43de6707db3515c17daa40a9103a558aa","comments_url":"https://api.github.com/repos/apache/openjpa/commits/e65f53b43de6707db3515c17daa40a9103a558aa/comments","author":null,"committer":null,"parents":[{"sha":"843c86153aaa9b7999d1cc77221c85b851682a1d","url":"https://api.github.com/repos/apache/openjpa/commits/843c86153aaa9b7999d1cc77221c85b851682a1d","html_url":"https://github.com/apache/openjpa/commit/843c86153aaa9b7999d1cc77221c85b851682a1d"}],"stats":{"total":217,"additions":215,"deletions":2},"files":[{"sha":"456cd8df5672680704285ef4dc259c36770258e9","filename":"openjpa-kernel/pom.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/e65f53b43de6707db3515c17daa40a9103a558aa/openjpa-kernel/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/e65f53b43de6707db3515c17daa40a9103a558aa/openjpa-kernel/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/pom.xml?ref=e65f53b43de6707db3515c17daa40a9103a558aa","patch":"@@ -73,8 +73,8 @@\n         </dependency>\r\n         <dependency>\r\n             <groupId>org.apache.geronimo.specs</groupId>\r\n-            <artifactId>geronimo-jta_1.0.1B_spec</artifactId>\r\n-            <version>1.0.1</version>\r\n+            <artifactId>geronimo-jta_1.1_spec</artifactId>\r\n+            <version>1.1</version>\r\n             <scope>compile</scope>\r\n         </dependency>\r\n         <dependency>\r"},{"sha":"e77100f80dd145c0b7a5bebf8e9403e4ee090896","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/ee/AutomaticManagedRuntime.java","status":"modified","additions":29,"deletions":0,"changes":29,"blob_url":"https://github.com/apache/openjpa/blob/e65f53b43de6707db3515c17daa40a9103a558aa/openjpa-kernel/src/main/java/org/apache/openjpa/ee/AutomaticManagedRuntime.java","raw_url":"https://github.com/apache/openjpa/raw/e65f53b43de6707db3515c17daa40a9103a558aa/openjpa-kernel/src/main/java/org/apache/openjpa/ee/AutomaticManagedRuntime.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/ee/AutomaticManagedRuntime.java?ref=e65f53b43de6707db3515c17daa40a9103a558aa","patch":"@@ -66,6 +66,8 @@\n         \"com.inprise.visitransact.jta.TransactionManagerImpl.\"\r\n             + \"getTransactionManagerImpl\", // borland\r\n     };\r\n+\n+    private static final ManagedRuntime REGISTRY;\n     private static final WLSManagedRuntime WLS;\r\n     private static final SunOneManagedRuntime SUNONE;\r\n     private static final WASManagedRuntime WAS;\r\n@@ -75,7 +77,20 @@\n \r\n     static {\r\n         ManagedRuntime mr = null;\r\n+\n+        mr = null;\n         try {\r\n+            mr = (ManagedRuntime) Class.\n+                forName(\"org.apache.openjpa.ee.RegistryManagedRuntime\").\n+                    newInstance();\n+        } catch (Throwable t) {\n+            // might be JTA version lower than 1.1, which doesn't have \n+            // TransactionSynchronizationRegistry\n+        }\n+        REGISTRY = mr;\n+\n+        mr = null;\n+        try {\n             mr = new WLSManagedRuntime();\r\n         } catch (Throwable t) {\r\n         }\r\n@@ -108,6 +123,20 @@ public TransactionManager getTransactionManager()\n         List errors = new LinkedList();\r\n         TransactionManager tm = null;\r\n \r\n+        // first try the registry, which is the official way to obtain\n+        // transaction synchronication in JTA 1.1\n+        if (REGISTRY != null) {\n+            try {\n+                tm = REGISTRY.getTransactionManager();\n+            } catch (Throwable t) {\n+                errors.add(t);\n+            }\n+            if (tm != null) {\n+                _runtime = REGISTRY;\n+                return tm;\n+            }\n+        }\n+\n         if (WLS != null) {\r\n             try {\r\n                 tm = WLS.getTransactionManager();\r"},{"sha":"e87513a7bd1d8b31d1ab1598279bcd3718ce939a","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/ee/RegistryManagedRuntime.java","status":"added","additions":184,"deletions":0,"changes":184,"blob_url":"https://github.com/apache/openjpa/blob/e65f53b43de6707db3515c17daa40a9103a558aa/openjpa-kernel/src/main/java/org/apache/openjpa/ee/RegistryManagedRuntime.java","raw_url":"https://github.com/apache/openjpa/raw/e65f53b43de6707db3515c17daa40a9103a558aa/openjpa-kernel/src/main/java/org/apache/openjpa/ee/RegistryManagedRuntime.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/ee/RegistryManagedRuntime.java?ref=e65f53b43de6707db3515c17daa40a9103a558aa","patch":"@@ -0,0 +1,184 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.ee;\n+\n+import javax.naming.Context;\n+import javax.naming.InitialContext;\n+import javax.transaction.HeuristicMixedException;\n+import javax.transaction.HeuristicRollbackException;\n+import javax.transaction.InvalidTransactionException;\n+import javax.transaction.NotSupportedException;\n+import javax.transaction.RollbackException;\n+import javax.transaction.Synchronization;\n+import javax.transaction.SystemException;\n+import javax.transaction.Transaction;\n+import javax.transaction.TransactionManager;\n+import javax.transaction.TransactionSynchronizationRegistry;\n+import javax.transaction.xa.XAResource;\n+\n+/**\n+ * Implementation of the {@link ManagedRuntime} interface that uses \n+ * the {@link TransactionSynchronizationRegistry} interface (new in JTA 1.1)\n+ * to create a {@link TransactionManager} facade for controlling transactions.\n+ *\n+ * @author Marc Prud'hommeaux\n+ * @since 1.0.0\n+ */\n+public class RegistryManagedRuntime\n+    implements ManagedRuntime {\n+\n+    private String _registryName =\n+        \"java:comp/TransactionSynchronizationRegistry\";\n+    private TransactionManager _tm = null;\n+\n+    /**\n+     * Return the cached TransactionManager instance.\n+     */\n+    public TransactionManager getTransactionManager() throws Exception {\n+        if (_tm == null) {\n+            Context ctx = new InitialContext();\n+            try {\n+                _tm = new TransactionManagerRegistryFacade\n+                    ((TransactionSynchronizationRegistry) ctx.\n+                        lookup(_registryName));\n+            } finally {\n+                ctx.close();\n+            }\n+        }\n+        return _tm;\n+    }\n+\n+    public void setRollbackOnly(Throwable cause)\n+        throws Exception {\n+        // there is no generic support for setting the rollback cause\n+        getTransactionManager().getTransaction().setRollbackOnly();\n+    }\n+\n+    public Throwable getRollbackCause()\n+        throws Exception {\n+        // there is no generic support for setting the rollback cause\n+        return null;\n+    }\n+\n+    public void setRegistryName(String registryName) {\n+        _registryName = registryName;\n+    }\n+\n+    public String getRegistryName() {\n+        return _registryName;\n+    }\n+\n+    /** \n+     *  A {@link TransactionManager} and {@link Transaction} facade\n+     *  that delegates the appropriate methods to the internally-held\n+     *  {@link TransactionSynchronizationRegistry}. Since the\n+     *  registry is not able to start or end transactions, all transaction\n+     *  control methods will just throw a {@link SystemException}.\n+     *  \n+     *  @author  Marc Prud'hommeaux\n+     */\n+    public static class TransactionManagerRegistryFacade\n+        implements TransactionManager, Transaction {\n+        private final TransactionSynchronizationRegistry _registry;\n+\n+        public TransactionManagerRegistryFacade\n+            (TransactionSynchronizationRegistry registry) {\n+            _registry = registry;\n+        }\n+\n+\n+        public Transaction getTransaction()\n+            throws SystemException {\n+            return TransactionManagerRegistryFacade.this;\n+        }\n+\n+\n+        public void registerSynchronization(Synchronization sync)\n+            throws RollbackException, IllegalStateException, SystemException {\n+            _registry.registerInterposedSynchronization(sync);\n+        }\n+\n+\n+        public void setRollbackOnly()\n+            throws IllegalStateException, SystemException {\n+            _registry.setRollbackOnly();\n+        }\n+\n+\n+        public int getStatus()\n+            throws SystemException {\n+            return _registry.getTransactionStatus();\n+        }\n+\n+        //////////////////////////////\n+        // Unsupported methods follow\n+        //////////////////////////////\n+\n+        public void begin()\n+            throws NotSupportedException, SystemException {\n+            throw new NotSupportedException();\n+        }\n+\n+\n+        public void commit()\n+            throws RollbackException, HeuristicMixedException, SystemException,\n+                HeuristicRollbackException, SecurityException,\n+                IllegalStateException {\n+            throw new SystemException();\n+        }\n+\n+\n+        public void resume(Transaction tobj)\n+            throws InvalidTransactionException, IllegalStateException,\n+                SystemException {\n+            throw new SystemException();\n+        }\n+\n+\n+        public void rollback()\n+            throws IllegalStateException, SecurityException, SystemException {\n+            throw new SystemException();\n+        }\n+\n+\n+        public void setTransactionTimeout(int seconds)\n+            throws SystemException {\n+            throw new SystemException();\n+        }\n+\n+\n+        public Transaction suspend()\n+            throws SystemException {\n+            throw new SystemException();\n+        }\n+\n+\n+        public boolean delistResource(XAResource xaRes, int flag)\n+            throws IllegalStateException, SystemException {\n+            throw new SystemException();\n+        }\n+\n+\n+        public boolean enlistResource(XAResource xaRes)\n+            throws RollbackException, IllegalStateException, SystemException {\n+            throw new SystemException();\n+        }\n+    }\n+}\n+"}]}

