{"sha":"e6647fcc34a6cd8c8de78a05ffa2c6687ea8d0a1","node_id":"MDY6Q29tbWl0MjA2MzY0OmU2NjQ3ZmNjMzRhNmNkOGM4ZGU3OGEwNWZmYTJjNjY4N2VhOGQwYTE=","commit":{"author":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2006-10-19T13:38:57Z"},"committer":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2006-10-19T13:38:57Z"},"message":"Testcase for a problem similar to the one described in OPENJPA-13.  \nRevision 453016 resolved both of these problems.  We can use this\ntestcase for regression purposes.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@465623 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a52707053b7d5a3983e7a69294ee65531b829415","url":"https://api.github.com/repos/apache/openjpa/git/trees/a52707053b7d5a3983e7a69294ee65531b829415"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/e6647fcc34a6cd8c8de78a05ffa2c6687ea8d0a1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/e6647fcc34a6cd8c8de78a05ffa2c6687ea8d0a1","html_url":"https://github.com/apache/openjpa/commit/e6647fcc34a6cd8c8de78a05ffa2c6687ea8d0a1","comments_url":"https://api.github.com/repos/apache/openjpa/commits/e6647fcc34a6cd8c8de78a05ffa2c6687ea8d0a1/comments","author":null,"committer":null,"parents":[{"sha":"e2f38567a1e4a2aa68e659b4d8b902108cf87793","url":"https://api.github.com/repos/apache/openjpa/commits/e2f38567a1e4a2aa68e659b4d8b902108cf87793","html_url":"https://github.com/apache/openjpa/commit/e2f38567a1e4a2aa68e659b4d8b902108cf87793"}],"stats":{"total":160,"additions":160,"deletions":0},"files":[{"sha":"12accdff909fd508f2b2043e4a1bfba51f5cfd17","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/IdentityGenerationType.java","status":"added","additions":52,"deletions":0,"changes":52,"blob_url":"https://github.com/apache/openjpa/blob/e6647fcc34a6cd8c8de78a05ffa2c6687ea8d0a1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/IdentityGenerationType.java","raw_url":"https://github.com/apache/openjpa/raw/e6647fcc34a6cd8c8de78a05ffa2c6687ea8d0a1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/IdentityGenerationType.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/IdentityGenerationType.java?ref=e6647fcc34a6cd8c8de78a05ffa2c6687ea8d0a1","patch":"@@ -0,0 +1,52 @@\n+/*\n+ * Copyright 2006 The Apache Software Foundation.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.openjpa.persistence.generationtype;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+\n+/**\n+ * Using a class type (Long) instead of a primitive type (long)\n+ * used to cause a problem with a GenerationType of IDENTITY.\n+ * This was resolved via revision 453016.  We can use this testcase\n+ * for regression purposes.\n+ *\n+ * @author Kevin Sutter\n+ */\n+@Entity\n+public class IdentityGenerationType {\n+\n+    private Long orderId;\n+    private String someData;\n+\n+    @Id\n+    @GeneratedValue(strategy=GenerationType.IDENTITY)\n+    public Long getOrderId() {\n+        return orderId;\n+    }\n+    public void setOrderId(Long orderId) {\n+        this.orderId = orderId;\n+    }\n+    public String getSomeData() {\n+        return someData;\n+    }\n+    public void setSomeData(String someData) {\n+        this.someData = someData;\n+    }\n+}\n+"},{"sha":"88a9ba75d5983b603977ebc2a313af37ebc11dd4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestGenerationType.java","status":"added","additions":108,"deletions":0,"changes":108,"blob_url":"https://github.com/apache/openjpa/blob/e6647fcc34a6cd8c8de78a05ffa2c6687ea8d0a1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestGenerationType.java","raw_url":"https://github.com/apache/openjpa/raw/e6647fcc34a6cd8c8de78a05ffa2c6687ea8d0a1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestGenerationType.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestGenerationType.java?ref=e6647fcc34a6cd8c8de78a05ffa2c6687ea8d0a1","patch":"@@ -0,0 +1,108 @@\n+/*\n+ * Copyright 2006 The Apache Software Foundation.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.openjpa.persistence.generationtype;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import javax.persistence.EntityTransaction;\n+import javax.persistence.Persistence;\n+import javax.persistence.Query;\n+\n+import junit.framework.TestCase;\n+import junit.textui.TestRunner;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+\n+/**\n+ * Simple test case to test the GenerationType for @Id...\n+ *\n+ * @author Kevin Sutter\n+ */\n+public class TestGenerationType\n+    extends TestCase {\n+\n+    private EntityManagerFactory emf;\n+\n+    public void setUp() {\n+        Map props = new HashMap();\n+        props.put(\"openjpa.MetaDataFactory\",\n+            \"jpa(Types=\" + IdentityGenerationType.class.getName() + \")\");\n+        emf = Persistence.createEntityManagerFactory(\"test\", props);\n+    }\n+\n+    public void tearDown() {\n+        if (emf == null)\n+            return;\n+        try {\n+            EntityManager em = emf.createEntityManager();\n+            em.getTransaction().begin();\n+            em.createQuery(\"delete from IdentityGenerationType\").executeUpdate();\n+            em.getTransaction().commit();\n+            em.close();\n+            emf.close();\n+        } catch (Exception e) {\n+        }\n+    }\n+\n+    public void testCreateEntityManager() {\n+        EntityManager em = emf.createEntityManager();\n+\n+        EntityTransaction t = em.getTransaction();\n+        assertNotNull(t);\n+        t.begin();\n+        t.setRollbackOnly();\n+        t.rollback();\n+\n+        // openjpa-facade test\n+        assertTrue(em instanceof OpenJPAEntityManager);\n+        OpenJPAEntityManager ojem = (OpenJPAEntityManager) em;\n+        ojem.getFetchPlan().setMaxFetchDepth(-1);\n+        assertEquals(-1, ojem.getFetchPlan().getMaxFetchDepth());\n+        em.close();\n+    }\n+\n+    public void testPersist() {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.persist(new IdentityGenerationType());\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+\n+    public void testQuery() {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        IdentityGenerationType igt = new IdentityGenerationType();\n+        igt.setSomeData(\"SomeString\");\n+        em.persist(igt);\n+        // add another IdentityGenerationType object\n+        em.persist(new IdentityGenerationType());\n+        em.getTransaction().commit();\n+\n+        // Check to make sure there are two objects...\n+        Query q = em.createQuery(\"select x from IdentityGenerationType x\");\n+        List l = q.getResultList();\n+        assertEquals(2, l.size());\n+        em.close();\n+    }\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(TestGenerationType.class);\n+    }\n+}\n+"}]}

