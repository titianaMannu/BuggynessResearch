{"sha":"e7c3df714b731eeff96af2c3347948aef5020a03","node_id":"MDY6Q29tbWl0MjA2MzY0OmU3YzNkZjcxNGI3MzFlZWZmOTZhZjJjMzM0Nzk0OGFlZjUwMjBhMDM=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-08-10T10:12:37Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-08-10T10:12:37Z"},"message":"OPENJPA-692: Add Test cases for Bi-directional mapping with JoinTable\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@684443 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"610a0652b55b3a31fa809ef66675ee69246138de","url":"https://api.github.com/repos/apache/openjpa/git/trees/610a0652b55b3a31fa809ef66675ee69246138de"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/e7c3df714b731eeff96af2c3347948aef5020a03","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/e7c3df714b731eeff96af2c3347948aef5020a03","html_url":"https://github.com/apache/openjpa/commit/e7c3df714b731eeff96af2c3347948aef5020a03","comments_url":"https://api.github.com/repos/apache/openjpa/commits/e7c3df714b731eeff96af2c3347948aef5020a03/comments","author":null,"committer":null,"parents":[{"sha":"6dbe8a9e57ee2a66d2b760e4114761332ada00f3","url":"https://api.github.com/repos/apache/openjpa/commits/6dbe8a9e57ee2a66d2b760e4114761332ada00f3","html_url":"https://github.com/apache/openjpa/commit/6dbe8a9e57ee2a66d2b760e4114761332ada00f3"}],"stats":{"total":326,"additions":326,"deletions":0},"files":[{"sha":"738a2715cedb4337f1821cd02a34af03b5e430fa","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/bidi/Address.java","status":"added","additions":80,"deletions":0,"changes":80,"blob_url":"https://github.com/apache/openjpa/blob/e7c3df714b731eeff96af2c3347948aef5020a03/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/bidi/Address.java","raw_url":"https://github.com/apache/openjpa/raw/e7c3df714b731eeff96af2c3347948aef5020a03/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/bidi/Address.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/bidi/Address.java?ref=e7c3df714b731eeff96af2c3347948aef5020a03","patch":"@@ -0,0 +1,80 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.mapping.bidi;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.JoinColumn;\r\n+import javax.persistence.JoinTable;\r\n+import javax.persistence.ManyToOne;\r\n+import javax.persistence.Table;\r\n+import javax.persistence.Transient;\r\n+\r\n+/**\r\n+ * Demonstrate usage of a JoinTable for a bi-directional one-to-many mapping.\r\n+ * \r\n+ * \r\n+ * @author Pinaki Poddar\r\n+ *\r\n+ */\r\n+@Entity\r\n+@Table(name=\"J_ADDRESS\")\r\n+public class Address {\r\n+\t@Id\r\n+\tprivate String phone;\r\n+\t\r\n+\tprivate String city;\r\n+\tprivate int zip;\r\n+\t\r\n+    @ManyToOne\r\n+    @JoinColumn(table=\"J_PERSON_ADDRESSES\", referencedColumnName=\"SSN\")\r\n+    private Person person;\r\n+\r\n+\tpublic String getPhone() {\r\n+\t\treturn phone;\r\n+\t}\r\n+\r\n+\tpublic void setPhone(String phone) {\r\n+\t\tthis.phone = phone;\r\n+\t}\r\n+\r\n+\tpublic String getCity() {\r\n+\t\treturn city;\r\n+\t}\r\n+\r\n+\tpublic void setCity(String city) {\r\n+\t\tthis.city = city;\r\n+\t}\r\n+\r\n+\tpublic int getZip() {\r\n+\t\treturn zip;\r\n+\t}\r\n+\r\n+\tpublic void setZip(int zip) {\r\n+\t\tthis.zip = zip;\r\n+\t}\r\n+\r\n+\tpublic Person getPerson() {\r\n+\t\treturn person;\r\n+\t}\r\n+\r\n+\tpublic void setPerson(Person person) {\r\n+\t\tthis.person = person;\r\n+\t}\r\n+}\r"},{"sha":"5848c2ab2c0a3b04ffbc436fa6fe2cf7b33ca69a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/bidi/Person.java","status":"added","additions":87,"deletions":0,"changes":87,"blob_url":"https://github.com/apache/openjpa/blob/e7c3df714b731eeff96af2c3347948aef5020a03/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/bidi/Person.java","raw_url":"https://github.com/apache/openjpa/raw/e7c3df714b731eeff96af2c3347948aef5020a03/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/bidi/Person.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/bidi/Person.java?ref=e7c3df714b731eeff96af2c3347948aef5020a03","patch":"@@ -0,0 +1,87 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.mapping.bidi;\r\n+\r\n+import java.util.HashSet;\r\n+import java.util.Set;\r\n+\r\n+import javax.persistence.CascadeType;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.JoinColumn;\r\n+import javax.persistence.JoinTable;\r\n+import javax.persistence.OneToMany;\r\n+import javax.persistence.Table;\r\n+\r\n+import org.apache.openjpa.jdbc.meta.strats.RelationCollectionTableFieldStrategy;\r\n+import org.apache.openjpa.persistence.jdbc.Strategy;\r\n+\r\n+/**\r\n+ * Demonstrate usage of a JoinTable for a bi-directional one-to-many mapping.\r\n+ * \r\n+ * \r\n+ * @author Pinaki Poddar\r\n+ *\r\n+ */\r\n+@Entity\r\n+@Table(name=\"J_PERSON\")\r\n+public class Person {\r\n+\t@Id\r\n+\tprivate long ssn;\r\n+\t\r\n+\tprivate String name;\r\n+\t\r\n+\t@OneToMany(cascade=CascadeType.ALL)\r\n+\t@JoinTable(name=\"J_PERSON_ADDRESSES\",\r\n+\t\t\tjoinColumns        = @JoinColumn(name=\"PERSON_SSN\",    referencedColumnName=\"SSN\"),\r\n+\t\t\tinverseJoinColumns = @JoinColumn(name=\"ADDRESS_PHONE\", referencedColumnName=\"PHONE\"))\r\n+    private Set<Address> addresses = new HashSet<Address>();\r\n+\r\n+\tpublic long getSsn() {\r\n+\t\treturn ssn;\r\n+\t}\r\n+\r\n+\tpublic Set<Address> getAddresses() {\r\n+\t\treturn addresses;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * Keep bi-directional relation consistent.\r\n+\t */\r\n+\tpublic void addAddress(Address address) {\r\n+\t\tif (addresses == null)\r\n+\t\t\taddresses = new HashSet<Address>();\r\n+\t\taddresses.add(address);\r\n+\t\taddress.setPerson(this);\r\n+\t}\r\n+\r\n+\tpublic String getName() {\r\n+\t\treturn name;\r\n+\t}\r\n+\r\n+\tpublic void setName(String name) {\r\n+\t\tthis.name = name;\r\n+\t}\r\n+\r\n+\tpublic void setSsn(long ssn) {\r\n+\t\tthis.ssn = ssn;\r\n+\t}\r\n+}\r\n+ \n\\ No newline at end of file"},{"sha":"9d30eb6639c6421200f23cc9b0c5566753aff14f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/bidi/TestBiDirectionalJoinTable.java","status":"added","additions":159,"deletions":0,"changes":159,"blob_url":"https://github.com/apache/openjpa/blob/e7c3df714b731eeff96af2c3347948aef5020a03/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/bidi/TestBiDirectionalJoinTable.java","raw_url":"https://github.com/apache/openjpa/raw/e7c3df714b731eeff96af2c3347948aef5020a03/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/bidi/TestBiDirectionalJoinTable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/bidi/TestBiDirectionalJoinTable.java?ref=e7c3df714b731eeff96af2c3347948aef5020a03","patch":"@@ -0,0 +1,159 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.mapping.bidi;\r\n+\r\n+import java.util.Arrays;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.Query;\r\n+\r\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\r\n+import org.apache.openjpa.persistence.test.SQLListenerTestCase;\r\n+\r\n+/**\r\n+ * Tests basic persistence operations on bi-directional mapping that uses a \r\n+ * JoinTable.\r\n+ * \r\n+ * Originally reported as an error which shows that \r\n+ * a) rows in join table get repeated insert as bi-directional mapping is\r\n+ *    essentially modeled as two uni-directional mapping\r\n+ * b) update/delete fails with OptimisticExecption because of repeated operation\r\n+ *    on the join table row \r\n+ *    \r\n+ * Further details available at\r\n+ * <A HREF=\"https://issues.apache.org/jira/browse/OPENJPA-692\">OPENJPA-692</A> \r\n+ * and \r\n+ * <A HREF=\"http://n2.nabble.com/bidirectional-one-to-many-relationship-with-join-table-tc678479.html\">Nabble posts</A>\r\n+ * \r\n+ * @author Pinaki Poddar\r\n+ *\r\n+ */\r\n+public class TestBiDirectionalJoinTable extends SQLListenerTestCase {\r\n+\tprivate static long SSN          = 123456789;\r\n+\tprivate static String[] PHONES   = {\"+1-23-456\", \"+2-34-567\", \"+3-45-678\"};\r\n+\tprivate static int ADDRESS_COUNT = PHONES.length;\r\n+\tprivate static String[] CITIS    = {\"Berlin\", \"Paris\", \"Rome\"};\r\n+\tprivate static int[] ZIPS        = {123456, 234567, 345678};\r\n+\t\r\n+\tpublic void setUp() {\r\n+\t\tsuper.setUp(CLEAR_TABLES, Person.class, Address.class);\r\n+\t\tcreateData(SSN);\r\n+\t\tsql.clear();\r\n+\t}\r\n+\t\r\n+\tpublic void testPersist() {\r\n+\t\tEntityManager em = emf.createEntityManager();\r\n+\t\tPerson person = em.find(Person.class, SSN);\r\n+\t\tassertNotNull(person);\r\n+\t\t\r\n+\t\tassertEquals(ADDRESS_COUNT, person.getAddresses().size());\r\n+\t}\r\n+\t\r\n+\tpublic void testQuery() {\r\n+\t\tEntityManager em = emf.createEntityManager();\r\n+\t\tString jpql = \"select distinct a.city from Person as p, in(p.addresses) a\";\r\n+\t\tQuery query = em.createQuery(jpql);\r\n+\t\tassertEquals(ADDRESS_COUNT, query.getResultList().size());\r\n+\t}\r\n+\t\r\n+\tpublic void testUpdate() {\r\n+\t\tEntityManager em = emf.createEntityManager();\r\n+\t\tem.getTransaction().begin();\r\n+\t\tPerson person = em.find(Person.class, SSN);\r\n+\t\tAddress newAddress = new Address();\r\n+\t\tnewAddress.setPhone(\"+4-56-789\");\r\n+\t\tnewAddress.setCity(\"San Francisco\");\r\n+\t\tperson.addAddress(newAddress);\r\n+\t\tperson.setName(\"Frank\");\r\n+\t\tem.merge(person);\r\n+\t\tem.getTransaction().commit();\r\n+\t\t\r\n+\t\tem = emf.createEntityManager();\r\n+\t\tPerson updated = em.find(Person.class, SSN);\r\n+\t\tassertEquals(\"Frank\", updated.getName());\r\n+\t\tassertEquals(ADDRESS_COUNT+1, updated.getAddresses().size());\r\n+\t}\r\n+\t\r\n+\tpublic void testRemove() {\r\n+\t\tEntityManager em = emf.createEntityManager();\r\n+\t\tem.getTransaction().begin();\r\n+\t\tPerson person = em.find(Person.class, SSN);\r\n+\t\tem.remove(person);\r\n+\t\tem.getTransaction().commit();\r\n+\t\t\r\n+\t\tassertEquals(0, count(Person.class));\r\n+\t\tassertEquals(0, count(Address.class));\r\n+\t\tassertSQL(\"DELETE FROM .*J_PERSON_ADDRESSES .*\");\r\n+\t}\r\n+\r\n+\tpublic void testSingleDelete() {\r\n+\t\tEntityManager em = emf.createEntityManager();\r\n+\t\tem.getTransaction().begin();\r\n+\t\tString jpql = \"delete from Person p where p.ssn=:ssn\";\r\n+\t\tem.createQuery(jpql).setParameter(\"ssn\", SSN).executeUpdate();\r\n+\t\tem.getTransaction().commit();\r\n+\t\t\r\n+\t\tassertEquals(0, count(Person.class));\r\n+\t\tassertEquals(0, count(Address.class));\r\n+\t\tassertSQL(\"DELETE FROM .*J_PERSON_ADDRESSES .*\");\r\n+\t}\r\n+\t\r\n+\tpublic void testBulkDelete() {\r\n+\t\tEntityManager em = emf.createEntityManager();\r\n+\t\tem.getTransaction().begin();\r\n+\t\tString jpql = \"delete from Person p\";\r\n+\t\tem.createQuery(jpql).executeUpdate();\r\n+\t\tem.getTransaction().commit();\r\n+\t\t\r\n+\t\tassertEquals(0, count(Person.class));\r\n+\t\tassertEquals(0, count(Address.class));\r\n+\t\tassertSQL(\"DELETE FROM .*J_PERSON_ADDRESSES .*\");\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * Create a Person with given SSN and fixed number of addresses.\r\n+\t * \r\n+\t * @param ssn\r\n+\t */\r\n+\tvoid createData(long ssn) {\r\n+\t\tEntityManager em = emf.createEntityManager();\r\n+\t\tem.getTransaction().begin();\r\n+\t\t\r\n+\t\tsql.clear();\r\n+\t\tPerson person = new Person();\r\n+\t\tperson.setSsn(SSN);\r\n+\t\tperson.setName(\"Pinaki\");\r\n+\t\tfor (int i=0; i<PHONES.length; i++) {\r\n+\t\t\tAddress address = new Address();\r\n+\t\t\taddress.setPhone(PHONES[i]);\r\n+\t\t\taddress.setCity(CITIS[i]);\r\n+\t\t\taddress.setZip(ZIPS[i]);\r\n+\t\t\tperson.addAddress(address);\r\n+\t\t}\r\n+\t\tem.persist(person);\r\n+\t\tem.getTransaction().commit();\r\n+\t\tassertEquals(1+2*ADDRESS_COUNT, sql.size());\r\n+\t}\r\n+\t\r\n+\t\r\n+\t@Override\r\n+\tpublic void tearDown() {\r\n+\t\t\r\n+\t}\r\n+}\r"}]}

