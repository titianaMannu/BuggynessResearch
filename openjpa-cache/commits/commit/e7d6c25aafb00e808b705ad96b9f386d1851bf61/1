{"sha":"e7d6c25aafb00e808b705ad96b9f386d1851bf61","node_id":"MDY6Q29tbWl0MjA2MzY0OmU3ZDZjMjVhYWZiMDBlODA4YjcwNWFkOTZiOWYzODZkMTg1MWJmNjE=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-07-15T02:06:55Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-07-15T02:06:55Z"},"message":"OPENJPA-51 A  non-correlated subquery resulting SQL syntax error\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@676787 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ce98fca1734cd750a59b8cf40a4f64715f332445","url":"https://api.github.com/repos/apache/openjpa/git/trees/ce98fca1734cd750a59b8cf40a4f64715f332445"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/e7d6c25aafb00e808b705ad96b9f386d1851bf61","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/e7d6c25aafb00e808b705ad96b9f386d1851bf61","html_url":"https://github.com/apache/openjpa/commit/e7d6c25aafb00e808b705ad96b9f386d1851bf61","comments_url":"https://api.github.com/repos/apache/openjpa/commits/e7d6c25aafb00e808b705ad96b9f386d1851bf61/comments","author":null,"committer":null,"parents":[{"sha":"5663e2ab8640ec3700207f6a6a3875bbb90728a3","url":"https://api.github.com/repos/apache/openjpa/commits/5663e2ab8640ec3700207f6a6a3875bbb90728a3","html_url":"https://github.com/apache/openjpa/commit/5663e2ab8640ec3700207f6a6a3875bbb90728a3"}],"stats":{"total":45,"additions":40,"deletions":5},"files":[{"sha":"a261e23ed76419e124ab9aa921a0c6b59b8a4bdd","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","status":"modified","additions":37,"deletions":5,"changes":42,"blob_url":"https://github.com/apache/openjpa/blob/e7d6c25aafb00e808b705ad96b9f386d1851bf61/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","raw_url":"https://github.com/apache/openjpa/raw/e7d6c25aafb00e808b705ad96b9f386d1851bf61/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java?ref=e7d6c25aafb00e808b705ad96b9f386d1851bf61","patch":"@@ -118,6 +118,9 @@\n     // 'parent.address.street' for the purposes of comparisons\n     private Map _aliases = null;\n \n+    // to cache table alias using Table as the key\n+    private Map _tableAliases = null;\n+\n     // map of indexes to table aliases like 'TABLENAME t0'\n     private SortedMap _tables = null;\n \n@@ -481,7 +484,8 @@ public void setParent(Select parent, String path) {\n         \tMap.Entry entry = (Map.Entry) it.next();\n             Object key = entry.getKey();\n             Integer alias = (Integer) entry.getValue();\n-            if (key.toString().indexOf(_subPath) != -1) {\n+            if (key.toString().indexOf(_subPath) != -1 ||\n+                _parent.findTableAlias(alias) == false) {\n                 if (_aliases == null)\n                     _aliases = new HashMap();\n                 _aliases.put(key, alias);\n@@ -503,7 +507,8 @@ public void setParent(Select parent, String path) {\n             \tMap.Entry entry = (Map.Entry) it.next();\n                 Object key = entry.getKey();\n                 Integer alias = (Integer) entry.getValue();\n-                if (key.toString().indexOf(_subPath) != -1) {\n+                if (key.toString().indexOf(_subPath) != -1 ||\n+                    _parent.findTableAlias(alias) == false) {\n                     _parent.removeAlias(key);\n \n                     Object tableString = _parent.getTables().get(alias);\n@@ -513,6 +518,16 @@ public void setParent(Select parent, String path) {\n         }\n     }\n     \n+    private boolean findTableAlias(Integer alias) {\n+        // if alias is defined and referenced, return true.\n+        String value = \"t\" + alias.toString() + \".\";\n+        if (_tableAliases != null)\n+            return _tableAliases.containsValue(value) &&\n+               _tables.containsKey(alias);\n+        else\n+            return true;\n+    }\n+    \n     public Map getAliases() {\n         return _aliases;\n     }\n@@ -653,13 +668,30 @@ public String getColumnAlias(String col, Table table, Joins joins) {\n      * Return the alias for the given column.\n      */\n     private String getColumnAlias(String col, Table table, PathJoins pj) {\n+        String tableAlias = null;\n+        if (pj == null || pj.path() == null) {\n+            if (_tableAliases == null)\n+                _tableAliases = new HashMap();\n+            tableAlias = (String) _tableAliases.get(table);\n+            if (tableAlias == null) {\n+                tableAlias = getTableAlias(table, pj).toString();\n+                _tableAliases.put(table, tableAlias);\n+            }\n+            return new StringBuilder(tableAlias).append(col).toString();\n+        }\n+        return getTableAlias(table, pj).append(col).toString();\n+    }\n+    \n+    private StringBuilder getTableAlias(Table table, PathJoins pj) {\n+        StringBuilder buf = new StringBuilder();\n         if (_from != null) {\n             String alias = toAlias(_from.getTableIndex(table, pj, true));\n             if (_dict.requiresAliasForSubselect)\n-                return FROM_SELECT_ALIAS + \".\" + alias + \"_\" + col;\n-            return alias + \"_\" + col;\n+                return buf.append(FROM_SELECT_ALIAS).append(\".\").append(alias).\n+                    append(\"_\");\n+            return buf.append(alias).append(\"_\");\n         }\n-        return toAlias(getTableIndex(table, pj, true)) + \".\" + col;\n+        return buf.append(toAlias(getTableIndex(table, pj, true))).append(\".\");\n     }\n \n     public boolean isAggregate() {"},{"sha":"f0d15c475520f6989cb8c4766ae01e895450f794","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestSubquery.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/e7d6c25aafb00e808b705ad96b9f386d1851bf61/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestSubquery.java","raw_url":"https://github.com/apache/openjpa/raw/e7d6c25aafb00e808b705ad96b9f386d1851bf61/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestSubquery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestSubquery.java?ref=e7d6c25aafb00e808b705ad96b9f386d1851bf61","patch":"@@ -36,6 +36,9 @@ public void setUp() {\n     }\n \n     static String[]  querys = new String[] {\n+        \"select o1.oid from Order o1 where o1.oid in \" +\n+            \" (select distinct o.oid from OrderItem i, Order o\" +\n+            \" where i.quantity > 10 and o.amount > 1000 and i.lid = o.oid)\" ,\n         \"select o.oid from Order o where o.customer.name =\" +\n             \" (select max(o2.customer.name) from Order o2\" +\n             \" where o.customer.cid.id = o2.customer.cid.id)\","}]}

