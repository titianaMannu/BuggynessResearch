{"sha":"e8702b1ed361253335472ac7431d600890219bd6","node_id":"MDY6Q29tbWl0MjA2MzY0OmU4NzAyYjFlZDM2MTI1MzMzNTQ3MmFjNzQzMWQ2MDA4OTAyMTliZDY=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-06-11T23:40:27Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-06-11T23:40:27Z"},"message":" Merge from ../active. svn merge -c 653000 ../active\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@666900 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0cfc1bd884b7a1d6b21298541be37e73e1cd2145","url":"https://api.github.com/repos/apache/openjpa/git/trees/0cfc1bd884b7a1d6b21298541be37e73e1cd2145"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/e8702b1ed361253335472ac7431d600890219bd6","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/e8702b1ed361253335472ac7431d600890219bd6","html_url":"https://github.com/apache/openjpa/commit/e8702b1ed361253335472ac7431d600890219bd6","comments_url":"https://api.github.com/repos/apache/openjpa/commits/e8702b1ed361253335472ac7431d600890219bd6/comments","author":null,"committer":null,"parents":[{"sha":"547438ed18be883a33b5b8175ca0e72a8225c64c","url":"https://api.github.com/repos/apache/openjpa/commits/547438ed18be883a33b5b8175ca0e72a8225c64c","html_url":"https://github.com/apache/openjpa/commit/547438ed18be883a33b5b8175ca0e72a8225c64c"}],"stats":{"total":73,"additions":59,"deletions":14},"files":[{"sha":"ee0db6ca06c1bc12aba1d8d5f5e108fde3bae2ef","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/BrokerValue.java","status":"modified","additions":21,"deletions":5,"changes":26,"blob_url":"https://github.com/apache/openjpa/blob/e8702b1ed361253335472ac7431d600890219bd6/openjpa-kernel/src/main/java/org/apache/openjpa/conf/BrokerValue.java","raw_url":"https://github.com/apache/openjpa/raw/e8702b1ed361253335472ac7431d600890219bd6/openjpa-kernel/src/main/java/org/apache/openjpa/conf/BrokerValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/BrokerValue.java?ref=e8702b1ed361253335472ac7431d600890219bd6","patch":"@@ -52,16 +52,32 @@ public BrokerValue() {\n \n     public Object newInstance(String clsName, Class type, Configuration conf,\n         boolean fatal) {\n+        getTemplateBroker(clsName, type, conf, fatal);\n+\n+        try {\n+            return _templateBroker.clone();\n+        } catch (CloneNotSupportedException e) {\n+            throw new InternalException(e);\n+        }\n+    }\n+\n+    public Class<? extends BrokerImpl> getTemplateBrokerType(Configuration c) {\n+        return getTemplateBroker(getClassName(), BrokerImpl.class, c, true)\n+            .getClass();\n+    }\n+\n+    private BrokerImpl getTemplateBroker(String clsName, Class type,\n+        Configuration conf, boolean fatal) {\n+        if (clsName == null || !clsName.equals(getClassName()))\n+            throw new IllegalArgumentException(\"clsName != configured value '\"\n+                + getClassName() + \"'\");\n+\n         // This is not synchronized. If there are concurrent invocations\n         // while _templateBroker is null, we'll just end up with extra\n         // template brokers, which will get safely garbage collected.\n         if (_templateBroker == null)\n             _templateBroker = (BrokerImpl) super.newInstance(clsName, type,\n                 conf, fatal);\n-        try {\n-            return _templateBroker.clone();\n-        } catch (CloneNotSupportedException e) {\n-            throw new InternalException(e);\n-        }\n+        return _templateBroker;\n     }\n }"},{"sha":"a4a98e19d5698897f0be361e00adf8e029c71766","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/e8702b1ed361253335472ac7431d600890219bd6/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/e8702b1ed361253335472ac7431d600890219bd6/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java?ref=e8702b1ed361253335472ac7431d600890219bd6","patch":"@@ -76,7 +76,7 @@\n \n     // openjpa properties\n     public ObjectValue classResolverPlugin;\n-    public ObjectValue brokerPlugin;\n+    public BrokerValue brokerPlugin;\n     public ObjectValue dataCachePlugin;\n     public ObjectValue dataCacheManagerPlugin;\n     public IntValue dataCacheTimeout;"},{"sha":"7659a9bc5208740017a2e674b9fa5fcb6fcbcb26","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","status":"modified","additions":35,"deletions":8,"changes":43,"blob_url":"https://github.com/apache/openjpa/blob/e8702b1ed361253335472ac7431d600890219bd6/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","raw_url":"https://github.com/apache/openjpa/raw/e8702b1ed361253335472ac7431d600890219bd6/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java?ref=e8702b1ed361253335472ac7431d600890219bd6","patch":"@@ -19,7 +19,6 @@\n package org.apache.openjpa.kernel;\r\n \r\n import java.io.ObjectStreamException;\r\n-import java.lang.reflect.InvocationTargetException;\r\n import java.util.ArrayList;\r\n import java.util.Collection;\r\n import java.util.Collections;\r\n@@ -29,14 +28,18 @@\n import java.util.List;\r\n import java.util.Map;\r\n import java.util.Properties;\r\n+import java.util.Set;\r\n import javax.transaction.Status;\r\n import javax.transaction.Synchronization;\r\n import javax.transaction.Transaction;\r\n import javax.transaction.TransactionManager;\r\n \r\n import org.apache.commons.lang.StringUtils;\r\n+import org.apache.commons.collections.set.MapBackedSet;\r\n import org.apache.openjpa.conf.OpenJPAConfiguration;\r\n import org.apache.openjpa.conf.OpenJPAVersion;\r\n+import org.apache.openjpa.conf.BrokerValue;\r\n+import org.apache.openjpa.conf.OpenJPAConfigurationImpl;\r\n import org.apache.openjpa.datacache.DataCacheStoreManager;\r\n import org.apache.openjpa.ee.ManagedRuntime;\r\n import org.apache.openjpa.enhance.PCRegistry;\r\n@@ -48,14 +51,12 @@\n import org.apache.openjpa.lib.conf.Configurations;\r\n import org.apache.openjpa.lib.log.Log;\r\n import org.apache.openjpa.lib.util.J2DoPrivHelper;\r\n-import org.apache.openjpa.lib.util.JavaVersions;\r\n import org.apache.openjpa.lib.util.Localizer;\r\n import java.util.concurrent.ConcurrentHashMap;\r\n import org.apache.openjpa.lib.util.concurrent.ConcurrentReferenceHashSet;\r\n import java.util.concurrent.locks.ReentrantLock;\r\n import org.apache.openjpa.meta.MetaDataRepository;\r\n import org.apache.openjpa.util.GeneralException;\r\n-import org.apache.openjpa.util.InternalException;\r\n import org.apache.openjpa.util.InvalidStateException;\r\n import org.apache.openjpa.util.OpenJPAException;\r\n import org.apache.openjpa.util.UserException;\r\n@@ -90,8 +91,7 @@\n         = new ConcurrentHashMap();\r\n \r\n     // weak-ref tracking of open brokers\r\n-    private transient Collection _brokers = new ConcurrentReferenceHashSet\r\n-        (ConcurrentReferenceHashSet.WEAK);\r\n+    private transient Set _brokers;\r\n \r\n     // cache the class names loaded from the persistent classes property so\r\n     // that we can re-load them for each new broker\r\n@@ -145,6 +145,7 @@ public static AbstractBrokerFactory getPooledFactoryForKey(Object key) {\n      */\r\n     protected AbstractBrokerFactory(OpenJPAConfiguration config) {\r\n         _conf = config;\r\n+        _brokers = newBrokerSet();\r\n         getPcClassLoaders();\r\n     }\r\n \r\n@@ -384,7 +385,7 @@ public void close() {\n             Broker broker;\r\n             for (Iterator itr = _brokers.iterator(); itr.hasNext();) {\r\n                 broker = (Broker) itr.next();\r\n-                // Check for null because _brokers contains weak references\r\n+                // Check for null because _brokers may contain weak references\r\n                 if ((broker != null) && (!broker.isClosed()))\r\n                     broker.close();\r\n             }\r\n@@ -464,13 +465,29 @@ protected Object readResolve()\n \r\n         // reset these transient fields to empty values\r\n         _transactional = new ConcurrentHashMap();\r\n-        _brokers = new ConcurrentReferenceHashSet(\r\n-                ConcurrentReferenceHashSet.WEAK);\r\n+        _brokers = newBrokerSet();\r\n \r\n         makeReadOnly();\r\n         return this;\r\n     }\r\n \r\n+    private Set newBrokerSet() {\r\n+        BrokerValue bv;\r\n+        if (_conf instanceof OpenJPAConfigurationImpl)\r\n+            bv = ((OpenJPAConfigurationImpl) _conf).brokerPlugin;\r\n+        else\r\n+            bv = (BrokerValue) _conf.getValue(BrokerValue.KEY);\r\n+\r\n+        if (FinalizingBrokerImpl.class.isAssignableFrom(\r\n+            bv.getTemplateBrokerType(_conf))) {\r\n+            return MapBackedSet.decorate(new ConcurrentHashMap(),\r\n+                new Object() { });\r\n+        } else {\r\n+            return new ConcurrentReferenceHashSet(\r\n+                ConcurrentReferenceHashSet.WEAK);\r\n+        }\r\n+    }\r\n+\r\n     ////////////////////////\r\n     // Methods for Override\r\n     ////////////////////////\r\n@@ -746,6 +763,16 @@ public Collection getOpenBrokers() {\n         return Collections.unmodifiableCollection(_brokers);\r\n     }\r\n \r\n+    /**\r\n+     * Release <code>broker</code> from any internal data structures. This\r\n+     * is invoked by <code>broker</code> after the broker is fully closed.\r\n+     *\r\n+     * @since 1.1.0\r\n+     */\r\n+    protected void releaseBroker(BrokerImpl broker) {\r\n+        _brokers.remove(broker);\r\n+    }\r\n+\r\n     /**\r\n      * @return a key that can be used to obtain this broker factory from the\r\n      * pool at a later time.\r"},{"sha":"9f9879983711b2595000795d3fc6301803ec6fe7","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/e8702b1ed361253335472ac7431d600890219bd6/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/e8702b1ed361253335472ac7431d600890219bd6/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java?ref=e8702b1ed361253335472ac7431d600890219bd6","patch":"@@ -4099,6 +4099,8 @@ protected void free() {\n         if (_log.isTraceEnabled())\r\n             _closedException = new IllegalStateException();\r\n \r\n+        _factory.releaseBroker(this);\r\n+\r\n         if (err != null)\r\n             throw err;\r\n     }\r"}]}

