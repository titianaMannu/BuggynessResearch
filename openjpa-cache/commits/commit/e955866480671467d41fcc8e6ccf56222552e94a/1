{"sha":"e955866480671467d41fcc8e6ccf56222552e94a","node_id":"MDY6Q29tbWl0MjA2MzY0OmU5NTU4NjY0ODA2NzE0NjdkNDFmY2M4ZTZjY2Y1NjIyMjU1MmU5NGE=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-08-24T22:02:18Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-08-24T22:02:18Z"},"message":"OPENJA-1262: EA7 Update.\n  Fetch method signature changed. \n  nullLiteral() method added\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@807398 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e2a9cd1633ffccbd944b7c57f508264a0c489431","url":"https://api.github.com/repos/apache/openjpa/git/trees/e2a9cd1633ffccbd944b7c57f508264a0c489431"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/e955866480671467d41fcc8e6ccf56222552e94a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/e955866480671467d41fcc8e6ccf56222552e94a","html_url":"https://github.com/apache/openjpa/commit/e955866480671467d41fcc8e6ccf56222552e94a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/e955866480671467d41fcc8e6ccf56222552e94a/comments","author":null,"committer":null,"parents":[{"sha":"a8b6502e243042940b66081f713e3e884e322ea1","url":"https://api.github.com/repos/apache/openjpa/commits/a8b6502e243042940b66081f713e3e884e322ea1","html_url":"https://github.com/apache/openjpa/commit/a8b6502e243042940b66081f713e3e884e322ea1"}],"stats":{"total":143,"additions":74,"deletions":69},"files":[{"sha":"99a608ef8fa92b5ecc454ebf23825854e3c48bab","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/e955866480671467d41fcc8e6ccf56222552e94a/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/e955866480671467d41fcc8e6ccf56222552e94a/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java?ref=e955866480671467d41fcc8e6ccf56222552e94a","patch":"@@ -42,8 +42,6 @@\n import javax.persistence.NonUniqueResultException;\n import javax.persistence.Parameter;\n import javax.persistence.Query;\n-import javax.persistence.Result;\n-import javax.persistence.ResultItem;\n import javax.persistence.TemporalType;\n import javax.persistence.TypedQuery;\n import javax.persistence.criteria.ParameterExpression;"},{"sha":"ea06eba39787f48e6e16d2b09a2aa42f78ea7419","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaBuilder.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/e955866480671467d41fcc8e6ccf56222552e94a/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaBuilder.java","raw_url":"https://github.com/apache/openjpa/raw/e955866480671467d41fcc8e6ccf56222552e94a/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaBuilder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaBuilder.java?ref=e955866480671467d41fcc8e6ccf56222552e94a","patch":"@@ -685,6 +685,11 @@ public Predicate isNotNull(Expression<?> x) {\n     public Predicate isNull(Expression<?> x) {\n         return new Expressions.IsNull((ExpressionImpl<?> )x);\n     }\n+    \n+    public <T> Expression<T> nullLiteral(Class<T> t) {\n+        return new Expressions.Constant<T>(t, (T)null);\n+    }\n+\n \n     /**\n      * Define a tuple-valued selection item"},{"sha":"4c004b747e7d7bc4edc64ed36a590545803d0632","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaQueryImpl.java","status":"modified","additions":6,"deletions":7,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/e955866480671467d41fcc8e6ccf56222552e94a/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaQueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/e955866480671467d41fcc8e6ccf56222552e94a/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaQueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaQueryImpl.java?ref=e955866480671467d41fcc8e6ccf56222552e94a","patch":"@@ -84,8 +84,7 @@\n     private Map<Selection<?>,Value> _variables = new HashMap<Selection<?>, Value>();\n     private Map<Selection<?>,Value> _values    = new HashMap<Selection<?>, Value>();\n     private Map<Selection<?>,String> _aliases  = null;\n-    private Map<Selection<?>,Value> _rootVariables = \n-        new HashMap<Selection<?>, Value>();\n+    private Map<Selection<?>,Value> _rootVariables = new HashMap<Selection<?>, Value>();\n     \n     // SubqueryContext\n     private Stack<Context> _contexts = null;\n@@ -467,7 +466,7 @@ public boolean isRegistered(Selection<?> selection) {\n         \n     }\n \n-    public Value getRegisteredVariable(Selection<?> selection) {\n+    Value getRegisteredVariable(Selection<?> selection) {\n         Value var = getVariable(selection);\n         if (var != null)\n             return var;\n@@ -483,7 +482,7 @@ public Value getRegisteredVariable(Selection<?> selection) {\n \n     }\n \n-    public Value getRegisteredValue(Selection<?> selection) {\n+    Value getRegisteredValue(Selection<?> selection) {\n         Value var = getValue(selection);\n         if (var != null)\n             return var;\n@@ -499,18 +498,18 @@ public Value getRegisteredValue(Selection<?> selection) {\n \n     }\n \n-    public void registerRoot(Root<?> root, Value var) {\n+    void registerRoot(Root<?> root, Value var) {\n         _rootVariables.put(root, var);\n         String alias = var.getName();\n         ctx().addSchema(alias, var.getMetaData());\n         ctx().addVariable(alias, var);\n     }\n     \n-    public Value getRootVariable(Root<?> root) {\n+    Value getRootVariable(Root<?> root) {\n         return _rootVariables.get(root);\n     }\n     \n-    public Value getRegisteredRootVariable(Root<?> root) {\n+    Value getRegisteredRootVariable(Root<?> root) {\n         Value var = getRootVariable(root);\n         if (var != null)\n             return var;"},{"sha":"8e96a34ead4253cd3d80e75f2be4e769f5763d3e","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/Expressions.java","status":"modified","additions":37,"deletions":39,"changes":76,"blob_url":"https://github.com/apache/openjpa/blob/e955866480671467d41fcc8e6ccf56222552e94a/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/Expressions.java","raw_url":"https://github.com/apache/openjpa/raw/e955866480671467d41fcc8e6ccf56222552e94a/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/Expressions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/Expressions.java?ref=e955866480671467d41fcc8e6ccf56222552e94a","patch":"@@ -574,7 +574,7 @@ public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQue\n         }\n         \n         public <X> Equal(Expression<X> x, Object y) {\n-            this(x, new Constant<Object>(Object.class, y));\n+            this(x, new Constant(y));\n         }\n         \n         @Override\n@@ -598,7 +598,7 @@ public PredicateImpl clone() {\n         }\n         \n         public <X> GreaterThan(Expression<X> x, Object y) {\n-            this(x, new Constant<Object>(Object.class, y));\n+            this(x, new Constant(y));\n         }\n         \n         @Override\n@@ -617,7 +617,7 @@ public PredicateImpl clone() {\n         }\n         \n         public <X> GreaterThanEqual(Expression<X> x, Object y) {\n-            this(x, new Constant<Object>(Object.class, y));\n+            this(x, new Constant(y));\n         }\n         \n         @Override\n@@ -636,7 +636,7 @@ public PredicateImpl clone() {\n         }\n         \n         public <X> LessThan(Expression<X> x, Object y) {\n-            this(x, new Constant<Object>(Object.class, y));\n+            this(x, new Constant(y));\n         }\n         \n         @Override\n@@ -655,7 +655,7 @@ public PredicateImpl clone() {\n         }\n         \n         public <X> LessThanEqual(Expression<X> x, Object y) {\n-            this(x, new Constant<Object>(Object.class, y));\n+            this(x, new Constant(y));\n         }\n         \n         @Override\n@@ -686,55 +686,53 @@ public Constant(Class<X> t, X x) {\n         }\n         \n         public Constant(X x) {\n-            this((Class<X>)x.getClass(), x);\n+            this(x == null ? null : (Class<X>)x.getClass(), x);\n         }\n         \n         @Override\n         public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQueryImpl<?> q) {\n             Object value = arg;\n+            Class<?> literalClass = getJavaType();\n             if (arg instanceof ParameterExpressionImpl) {\n                 return ((ParameterExpressionImpl)arg).toValue(factory, featureSelection, q);\n             }\n             int literalType = Literal.TYPE_UNKNOWN;\n-            if (arg != null) {\n-                Class<?> literalClass = value.getClass();\n-                if (Number.class.isAssignableFrom(literalClass)) {\n-                    literalType = Literal.TYPE_NUMBER;\n-                } else if (Boolean.class.isAssignableFrom(literalClass)) {\n-                    literalType = Literal.TYPE_BOOLEAN;\n-                } else if (String.class.isAssignableFrom(literalClass)) {\n-                    literalType = Literal.TYPE_STRING;\n-                } else if (Enum.class.isAssignableFrom(literalClass)) {\n-                    literalType = Literal.TYPE_ENUM;\n-                } else if (Class.class.isAssignableFrom(literalClass)) {\n-                    literalType = Literal.TYPE_CLASS;\n-                    Literal lit = factory.newTypeLiteral(value, Literal.TYPE_CLASS);\n-                    ClassMetaData can = ((Types.Entity<X>)q.getRoot().getModel()).meta;\n-                    Class<?> candidate = can.getDescribedType();\n-                    if (candidate.isAssignableFrom((Class)value)) {\n-                       lit.setMetaData(featureSelection.repos.getMetaData((Class<?>)value, null, true));\n-                    } else {\n-                        lit.setMetaData(can);\n-                    }\n-                    return lit;\n-                } else if (Collection.class.isAssignableFrom(literalClass)) {\n-                    literalType = Literal.TYPE_COLLECTION;\n+            if (Number.class.isAssignableFrom(literalClass)) {\n+                literalType = Literal.TYPE_NUMBER;\n+            } else if (Boolean.class.isAssignableFrom(literalClass)) {\n+                literalType = Literal.TYPE_BOOLEAN;\n+            } else if (String.class.isAssignableFrom(literalClass)) {\n+                literalType = Literal.TYPE_STRING;\n+            } else if (Enum.class.isAssignableFrom(literalClass)) {\n+                literalType = Literal.TYPE_ENUM;\n+            } else if (Class.class.isAssignableFrom(literalClass)) {\n+                literalType = Literal.TYPE_CLASS;\n+                Literal lit = factory.newTypeLiteral(value, Literal.TYPE_CLASS);\n+                ClassMetaData can = ((Types.Entity<X>)q.getRoot().getModel()).meta;\n+                Class<?> candidate = can.getDescribedType();\n+                if (candidate.isAssignableFrom((Class)value)) {\n+                   lit.setMetaData(featureSelection.repos.getMetaData((Class<?>)value, null, true));\n+                } else {\n+                    lit.setMetaData(can);\n                 }\n+                return lit;\n+            } else if (Collection.class.isAssignableFrom(literalClass)) {\n+                literalType = Literal.TYPE_COLLECTION;\n             }\n             return factory.newLiteral(value, literalType);\n         }\n     }\n     \n-    public static class TypeConstant<X> extends Constant<X> {\n-        public TypeConstant(X x) {\n-            super((Class<X>)x.getClass(),x);\n-        }\n-        \n-        @Override\n-        public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQueryImpl<?> q) {\n-            return factory.newTypeLiteral(arg, Literal.TYPE_CLASS);\n-        }\n-    }\n+//    public static class TypeConstant<X> extends Constant<X> {\n+//        public TypeConstant(X x) {\n+//            super((Class<X>)x.getClass(),x);\n+//        }\n+//        \n+//        @Override\n+//        public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQueryImpl<?> q) {\n+//            return factory.newTypeLiteral(arg, Literal.TYPE_CLASS);\n+//        }\n+//    }\n     \n     public static class IsEmpty extends PredicateImpl {\n         final ExpressionImpl<?> collection;"},{"sha":"f2cde9ae850621e9f32ce7d9eb2c7eae032157c6","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/FetchPathImpl.java","status":"modified","additions":13,"deletions":11,"changes":24,"blob_url":"https://github.com/apache/openjpa/blob/e955866480671467d41fcc8e6ccf56222552e94a/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/FetchPathImpl.java","raw_url":"https://github.com/apache/openjpa/raw/e955866480671467d41fcc8e6ccf56222552e94a/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/FetchPathImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/FetchPathImpl.java?ref=e955866480671467d41fcc8e6ccf56222552e94a","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.openjpa.persistence.criteria;\n \n+import java.util.ArrayList;\n import java.util.HashSet;\n import java.util.Set;\n \n@@ -39,7 +40,7 @@\n  * @param <X> type of this\n  */\n public class FetchPathImpl<Z,X> extends PathImpl<Z,X> implements Fetch<Z, X> {\n-    Set<Fetch<X,?>> _fetches;\n+    Set<Fetch<?,?>> _fetches;\n     JoinType joinType;\n     \n     \n@@ -76,34 +77,35 @@ public JoinType getJoinType() {\n         return addFetch((Members.Member<? super X,Y>)assoc, JoinType.INNER);\n     }\n \n-    public <Y> Fetch<X, Y> fetch(String assocName) {\n+    public <X,Y> Fetch<X, Y> fetch(String assocName) {\n         return fetch(assocName, JoinType.INNER);\n     }\n \n     public <Y> Fetch<X, Y> fetch(SingularAttribute<? super X, Y> assoc, JoinType jt) {\n         return addFetch((Members.Member<? super X,Y>)assoc, jt);\n     }\n \n-    public <Y> Fetch<X, Y> fetch(PluralAttribute<? super X, ?, Y> assoc,\n-            JoinType jt) {\n+    public <Y> Fetch<X, Y> fetch(PluralAttribute<? super X, ?, Y> assoc, JoinType jt) {\n         return addFetch((Members.Member<? super X,Y>)assoc, jt);\n     }\n \n-    public <Y> Fetch<X, Y> fetch(String assocName, JoinType jt) {\n-        Attribute<? super X, ?> assoc = ((ManagedType<X>)_member.getType())\n-        .getAttribute(assocName);\n+    public <X,Y> Fetch<X, Y> fetch(String assocName, JoinType jt) {\n+        Attribute<? super X, ?> assoc = ((ManagedType<X>)_member.getType()).getAttribute(assocName);\n         return addFetch((Members.Member<? super X,Y>)assoc, jt);\n     }\n \n     public Set<Fetch<X, ?>> getFetches() {\n-        return _fetches;\n+        Set<Fetch<X,?>> result = new HashSet<Fetch<X,?>>();\n+        for (Fetch f : _fetches) {\n+            result.add(f);\n+        }\n+        return result;\n     }\n     \n-    private <Y> Fetch<X,Y> addFetch(Members.Member<? super X, Y> member, \n-            JoinType jt) {\n+    private <X,Y> Fetch<X,Y> addFetch(Members.Member<? super X, Y> member, JoinType jt) {\n         Fetch<X,Y> fetch = new FetchPathImpl(this, member, jt);\n         if (_fetches == null)\n-            _fetches = new HashSet<Fetch<X,?>>();\n+            _fetches = new HashSet<Fetch<?,?>>();\n         _fetches.add(fetch);\n         return fetch;\n     }"},{"sha":"86859e38831539cd933a3249c4591790373b3077","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/SubqueryImpl.java","status":"modified","additions":13,"deletions":10,"changes":23,"blob_url":"https://github.com/apache/openjpa/blob/e955866480671467d41fcc8e6ccf56222552e94a/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/SubqueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/e955866480671467d41fcc8e6ccf56222552e94a/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/SubqueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/SubqueryImpl.java?ref=e955866480671467d41fcc8e6ccf56222552e94a","patch":"@@ -194,18 +194,17 @@ public boolean isDistinct() {\n         return _corrJoins;\n     }\n     \n-    public <X,Y> Join<X,Y> correlate(Join<X,Y> join) {\n-        Join corrJoin = clone(join);\n-        ((PathImpl<?,?>)corrJoin).setCorrelatedPath((PathImpl<?,?>)join);\n+    public <X,Y> Join<X,Y> correlate(Join<X,Y> parentJoin) {\n+        Join corrJoin = clone(parentJoin);\n+        ((PathImpl<?,?>)corrJoin).setCorrelatedPath((PathImpl<?,?>)parentJoin);\n         if (_corrJoins == null)\n             _corrJoins = new ArrayList<Join<?,?>>();\n         _corrJoins.add(corrJoin);\n         return corrJoin;\n     }\n     \n     private Join<?,?> clone(Join<?,?> join) {\n-        List<Members.SingularAttributeImpl<?,?>> members = \n-            new ArrayList<Members.SingularAttributeImpl<?,?>>();\n+        List<Members.SingularAttributeImpl<?,?>> members = new ArrayList<Members.SingularAttributeImpl<?,?>>();\n         List<JoinType> jts = new ArrayList<JoinType>();\n         FromImpl<?,?> root = getMembers(join, members, jts);\n         Members.SingularAttributeImpl<?,?> member = members.get(0);\n@@ -224,8 +223,8 @@ public boolean isDistinct() {\n     private FromImpl<?,?> getMembers(Join<?,?> join, List<Members.SingularAttributeImpl<?,?>> members, \n         List<JoinType> jts) {\n         PathImpl<?,?> parent = (PathImpl<?,?>)join.getParentPath();\n-        Members.SingularAttributeImpl<?,?> member = \n-            (Members.SingularAttributeImpl<?,?>)((Joins.SingularJoin<?,?>)join).getMember();\n+        Members.SingularAttributeImpl<?,?> member = (Members.SingularAttributeImpl<?,?>)((Joins.SingularJoin<?,?>)join)\n+            .getMember();\n         JoinType jt = join.getJoinType();\n         FromImpl<?,?> root = null;\n         if (parent instanceof RootImpl) {\n@@ -239,6 +238,7 @@ public boolean isDistinct() {\n         jts.add(jt);\n         return root;\n     }\n+    \n     public <X,Y> CollectionJoin<X,Y> correlate(CollectionJoin<X,Y> join) {\n         _delegate.from(join.getModel().getBindableJavaType());\n         return join;\n@@ -263,7 +263,7 @@ public boolean isDistinct() {\n         return _joins;\n     }\n     \n-    public org.apache.openjpa.kernel.exps.Subquery getSubQ() {\n+    org.apache.openjpa.kernel.exps.Subquery getSubQ() {\n         return _subq;\n     }\n \n@@ -283,8 +283,7 @@ public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection,\n         Context context = new Context(null, _subq, contexts.peek());\n         contexts.push(context);\n         _delegate.setContexts(contexts);\n-        QueryExpressions subexp = exprBuilder.getQueryExpressions(factory, \n-                _delegate);\n+        QueryExpressions subexp = exprBuilder.getQueryExpressions(factory, _delegate);\n         _subq.setQueryExpressions(subexp);\n         if (subexp.projections.length > 0)\n             JPQLExpressionBuilder.checkEmbeddable(subexp.projections[0], null);\n@@ -331,4 +330,8 @@ private ClassMetaData getCandidate(FromImpl<?,?> from) {\n         return from._member.fmd.getDeclaredTypeMetaData();\n         \n     }\n+    \n+    public Class<T> getResultType() {\n+        return getJavaType();\n+    }\n }"}]}

