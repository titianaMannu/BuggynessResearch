{"sha":"e959466d1dfb8749fe4a8e8c99743ce73513391c","node_id":"MDY6Q29tbWl0MjA2MzY0OmU5NTk0NjZkMWRmYjg3NDlmZTRhOGU4Yzk5NzQzY2U3MzUxMzM5MWM=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-28T21:48:53Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-28T21:48:53Z"},"message":"OPENJPA-282. No test case.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@570579 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6f5d3ed3689fe960d9dbfcb145833e22122431f2","url":"https://api.github.com/repos/apache/openjpa/git/trees/6f5d3ed3689fe960d9dbfcb145833e22122431f2"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/e959466d1dfb8749fe4a8e8c99743ce73513391c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/e959466d1dfb8749fe4a8e8c99743ce73513391c","html_url":"https://github.com/apache/openjpa/commit/e959466d1dfb8749fe4a8e8c99743ce73513391c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/e959466d1dfb8749fe4a8e8c99743ce73513391c/comments","author":null,"committer":null,"parents":[{"sha":"ba7de16762aae34c360d85f97886079e858c1aeb","url":"https://api.github.com/repos/apache/openjpa/commits/ba7de16762aae34c360d85f97886079e858c1aeb","html_url":"https://github.com/apache/openjpa/commit/ba7de16762aae34c360d85f97886079e858c1aeb"}],"stats":{"total":33,"additions":29,"deletions":4},"files":[{"sha":"731c7e8878e0175e7e9c840f38400a134f3f5194","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","status":"modified","additions":24,"deletions":4,"changes":28,"blob_url":"https://github.com/apache/openjpa/blob/e959466d1dfb8749fe4a8e8c99743ce73513391c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/e959466d1dfb8749fe4a8e8c99743ce73513391c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java?ref=e959466d1dfb8749fe4a8e8c99743ce73513391c","patch":"@@ -3038,7 +3038,7 @@ protected String getForeignKeyConstraintSQL(ForeignKey fk) {\n             return null;\n         if (fk.getDeleteAction() == ForeignKey.ACTION_NONE)\n             return null;\n-        if (fk.isDeferred() && !supportsDeferredConstraints)\n+        if (fk.isDeferred() && !supportsDeferredForeignKeyConstraints())\n             return null;\n         if (!supportsDeleteAction(fk.getDeleteAction())\n             || !supportsUpdateAction(fk.getUpdateAction()))\n@@ -3075,14 +3075,24 @@ protected String getForeignKeyConstraintSQL(ForeignKey fk) {\n             buf.append(\" ON UPDATE \").append(upAction);\n         if (fk.isDeferred())\n             buf.append(\" INITIALLY DEFERRED\");\n-        if (supportsDeferredConstraints)\n+        if (supportsDeferredForeignKeyConstraints())\n             buf.append(\" DEFERRABLE\");\n         if (fk.getName() != null\n             && CONS_NAME_AFTER.equals(constraintNameMode))\n             buf.append(\" CONSTRAINT \").append(fk.getName());\n         return buf.toString();\n     }\n \n+    /**\n+     * Whether or not this dictionary supports deferred foreign key constraints.\n+     * This implementation returns {@link #supportsUniqueConstraints}.\n+     *\n+     * @since 1.1.0\n+     */\n+    protected boolean supportsDeferredForeignKeyConstraints() {\n+        return supportsUniqueConstraints;\n+    }\n+\n     /**\n      * Return the name of the given foreign key action.\n      */\n@@ -3151,7 +3161,7 @@ public boolean supportsUpdateAction(int action) {\n      */\n     protected String getUniqueConstraintSQL(Unique unq) {\n         if (!supportsUniqueConstraints\n-            || (unq.isDeferred() && !supportsDeferredConstraints))\n+            || (unq.isDeferred() && !supportsDeferredUniqueConstraints()))\n             return null;\n \n         StringBuffer buf = new StringBuffer();\n@@ -3165,14 +3175,24 @@ protected String getUniqueConstraintSQL(Unique unq) {\n             append(\")\");\n         if (unq.isDeferred())\n             buf.append(\" INITIALLY DEFERRED\");\n-        if (supportsDeferredConstraints)\n+        if (supportsDeferredUniqueConstraints())\n             buf.append(\" DEFERRABLE\");\n         if (unq.getName() != null\n             && CONS_NAME_AFTER.equals(constraintNameMode))\n             buf.append(\" CONSTRAINT \").append(unq.getName());\n         return buf.toString();\n     }\n \n+    /**\n+     * Whether or not this dictionary supports deferred unique constraints.\n+     * This implementation returns {@link #supportsUniqueConstraints}.\n+     *\n+     * @since 1.1.0\n+     */\n+    protected boolean supportsDeferredUniqueConstraints() {\n+        return supportsUniqueConstraints;\n+    }\n+\n     /////////////////////\n     // Database metadata\n     /////////////////////"},{"sha":"1ca7f137f4b8a20c08283831348a272c1a425ff9","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PostgresDictionary.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/e959466d1dfb8749fe4a8e8c99743ce73513391c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PostgresDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/e959466d1dfb8749fe4a8e8c99743ce73513391c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PostgresDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PostgresDictionary.java?ref=e959466d1dfb8749fe4a8e8c99743ce73513391c","patch":"@@ -271,6 +271,11 @@ public void indexOf(SQLBuffer buf, FilterValue str, FilterValue find,\n         return sql;\n     }\n \n+    protected boolean supportsDeferredUniqueConstraints() {\n+        // Postgres only supports deferred foreign key constraints.\n+        return false;\n+    }\n+\n     protected String getSequencesSQL(String schemaName, String sequenceName) {\n         if (schemaName == null && sequenceName == null)\n             return allSequencesSQL;"}]}

