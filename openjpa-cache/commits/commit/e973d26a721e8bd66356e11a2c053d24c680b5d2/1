{"sha":"e973d26a721e8bd66356e11a2c053d24c680b5d2","node_id":"MDY6Q29tbWl0MjA2MzY0OmU5NzNkMjZhNzIxZThiZDY2MzU2ZTExYTJjMDUzZDI0YzY4MGI1ZDI=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-03-30T03:43:20Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-03-30T03:43:20Z"},"message":"OPENAJPA-1603: Decouple the QueryCache from the DataCache. Code contributed by Mike Dick and Rick Curtis.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.x@928968 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b87e2c4044a7931869ec52c3396676c2d7396d58","url":"https://api.github.com/repos/apache/openjpa/git/trees/b87e2c4044a7931869ec52c3396676c2d7396d58"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/e973d26a721e8bd66356e11a2c053d24c680b5d2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/e973d26a721e8bd66356e11a2c053d24c680b5d2","html_url":"https://github.com/apache/openjpa/commit/e973d26a721e8bd66356e11a2c053d24c680b5d2","comments_url":"https://api.github.com/repos/apache/openjpa/commits/e973d26a721e8bd66356e11a2c053d24c680b5d2/comments","author":null,"committer":null,"parents":[{"sha":"20debce45d4142d590a98062ca67d986a8aded0b","url":"https://api.github.com/repos/apache/openjpa/commits/20debce45d4142d590a98062ca67d986a8aded0b","html_url":"https://github.com/apache/openjpa/commit/20debce45d4142d590a98062ca67d986a8aded0b"}],"stats":{"total":570,"additions":398,"deletions":172},"files":[{"sha":"d2d7340962ce63ecfb428fcdadaa426da87cd5d7","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","status":"modified","additions":46,"deletions":21,"changes":67,"blob_url":"https://github.com/apache/openjpa/blob/e973d26a721e8bd66356e11a2c053d24c680b5d2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/e973d26a721e8bd66356e11a2c053d24c680b5d2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java?ref=e973d26a721e8bd66356e11a2c053d24c680b5d2","patch":"@@ -30,12 +30,15 @@\n import java.util.Collections;\n import java.util.HashSet;\n import java.util.Iterator;\n+import java.util.List;\n import java.util.Map;\n import java.util.Set;\n \n import javax.sql.DataSource;\n \n import org.apache.commons.lang.StringUtils;\n+import org.apache.openjpa.datacache.QueryCache;\n+import org.apache.openjpa.datacache.QueryCacheStoreQuery;\n import org.apache.openjpa.enhance.PersistenceCapable;\n import org.apache.openjpa.event.OrphanedKeyAction;\n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n@@ -295,6 +298,11 @@ public boolean exists(OpenJPAStateManager sm, Object context) {\n         return exists(mapping, sm.getObjectId(), context);\n     }\n \n+    public boolean isCached(List<Object> oids, BitSet edata) {\n+        // JDBCStoreManager doesn't store oids in memory.\n+        return false;\n+    }\n+    \n     private boolean exists(ClassMapping mapping, Object oid, Object context) {\n         // add where conditions on base class to avoid joins if subclass\n         // doesn't use oid as identifier\n@@ -455,8 +463,9 @@ private void setInverseRelation(OpenJPAStateManager owner,\n         // Check if the owner has eagerly loaded ToMany relations.\n         for (int i = 0; i < fms.length; i++) {\n             if (res.getEager(fms[i]) != null) {\n-                if (!fms[i].getElement().isTypePC())\n+                if (!fms[i].getElement().isTypePC()) {\n                     continue;\n+                }\n                 Object coll =  owner.fetchObject(fms[i].getIndex());\n                 if (coll instanceof Map)\n                     coll = ((Map)coll).values();\n@@ -471,24 +480,23 @@ private void setInverseRelation(OpenJPAStateManager owner,\n                     for (Iterator<?> itr = ((Collection<?>) coll).iterator();\n                         itr.hasNext();) {\n                         PersistenceCapable pc = (PersistenceCapable) itr.next();\n-\n-                        if (pc == null)\n+                        if (pc == null) {\n                             continue;\n-\n-                        OpenJPAStateManager sm = (OpenJPAStateManager) pc.\n-                            pcGetStateManager();\n-                        FieldMapping[] fmd = ((ClassMapping) sm.getMetaData()).\n-                            getFieldMappings();\n+                        }\n+                        OpenJPAStateManager sm = (OpenJPAStateManager) pc.pcGetStateManager();\n+                        ClassMapping cm =\n+                            (ClassMapping) _conf.getMetaDataRepositoryInstance().getCachedMetaData(pc.getClass());\n+                        FieldMapping[] fmd = cm.getFieldMappings();\n                         for (int j = 0; j < fmd.length; j++) {\n-                            Object oid = sm.getIntermediate(fmd[j].getIndex());\n-                            // if oid was setIntermediate() previously\n-                            // and it is the same as the owner,\n-                            // then set the inverse relation\n-                            if (oid != null &&\n-                                oid.equals(owner.getObjectId())) {\n-                                sm.storeObject(fmd[j].getIndex(),\n-                                    owner.getPersistenceCapable());\n-                                break;\n+                            // don't check the oids for basic fields.\n+                            if (fmd[j].isTypePC()) {\n+                                Object oid = sm.getIntermediate(fmd[j].getIndex());\n+                                // if oid was setIntermediate() previously and it is the same as the owner,generate\n+                                // then set the inverse relation\n+                                if (oid != null && oid.equals(owner.getObjectId())) {\n+                                    sm.storeObject(fmd[j].getIndex(), owner.getPersistenceCapable());\n+                                    break;\n+                                }\n                             }\n                         }\n                     }\n@@ -911,16 +919,33 @@ private BitSet selectExtent(Select sel, ClassMapping mapping,\n         return paged;\n     }\n \n-    public StoreQuery newQuery(String language) {\n+    private StoreQuery newStoreQuery(String language) {\n         ExpressionParser ep = QueryLanguages.parserForLanguage(language);\n-        if (ep != null)\n+        if (ep != null) { \n             return new JDBCStoreQuery(this, ep);\n-        if (QueryLanguages.LANG_SQL.equals(language))\n+        }\n+        if (QueryLanguages.LANG_SQL.equals(language)) {\n             return new SQLStoreQuery(this);\n-        if (QueryLanguages.LANG_PREPARED_SQL.equals(language))\n+        }\n+        if (QueryLanguages.LANG_PREPARED_SQL.equals(language)) {\n             return new PreparedSQLStoreQuery(this);\n+        }\n         return null;\n     }\n+    \n+    public StoreQuery newQuery(String language) {\n+        StoreQuery sq = newStoreQuery(language); \n+        if (sq == null || QueryLanguages.parserForLanguage(language) == null) {\n+            return sq;\n+        }\n+\n+        QueryCache queryCache = _ctx.getConfiguration().getDataCacheManagerInstance().getSystemQueryCache();\n+        if (queryCache == null) {\n+            return sq;\n+        }\n+        \n+        return new QueryCacheStoreQuery(sq, queryCache);\n+    }\n \n     public FetchConfiguration newFetchConfiguration() {\n         return new JDBCFetchConfigurationImpl();"},{"sha":"5940c1cd45aa61e47822e2302112bf6cb8a9538d","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheManagerImpl.java","status":"modified","additions":6,"deletions":3,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/e973d26a721e8bd66356e11a2c053d24c680b5d2/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/e973d26a721e8bd66356e11a2c053d24c680b5d2/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheManagerImpl.java?ref=e973d26a721e8bd66356e11a2c053d24c680b5d2","patch":"@@ -57,7 +57,11 @@\n     \n     public void initialize(OpenJPAConfiguration conf, ObjectValue dataCache, ObjectValue queryCache) {\n         _conf = conf;\n+        _queryCache = (QueryCache) queryCache.instantiate(QueryCache.class, conf);\n+        if (_queryCache != null)\n+            _queryCache.initialize(this);\n         _cache = (DataCache) dataCache.instantiate(DataCache.class, conf);\n+\n         if (_cache == null)\n             return;\n          \n@@ -69,9 +73,7 @@ public void initialize(OpenJPAConfiguration conf, ObjectValue dataCache, ObjectV\n         _policy = conf.getCacheDistributionPolicyInstance();\n \n         _cache.initialize(this);\n-        _queryCache = (QueryCache) queryCache.instantiate(QueryCache.class, conf);\n-        if (_queryCache != null)\n-            _queryCache.initialize(this);\n+\n     }\n \n     public DataCache getSystemDataCache() {\n@@ -155,6 +157,7 @@ public void setTypes(Set<String> includedTypes, Set<String> excludedTypes){\n         _includedTypes = includedTypes;\n         _excludedTypes = excludedTypes;\n     }\n+    \n     /**\n      * Affirms the given class is eligible to be cached according to the cache mode\n      * and the cache enable flag on the given metadata."},{"sha":"15c58491d1c551fdb3d9ae566a5844b5b98675d4","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java","status":"modified","additions":21,"deletions":37,"changes":58,"blob_url":"https://github.com/apache/openjpa/blob/e973d26a721e8bd66356e11a2c053d24c680b5d2/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/e973d26a721e8bd66356e11a2c053d24c680b5d2/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java?ref=e973d26a721e8bd66356e11a2c053d24c680b5d2","patch":"@@ -34,14 +34,11 @@\n import org.apache.openjpa.kernel.DataCacheStoreMode;\n import org.apache.openjpa.kernel.DelegatingStoreManager;\n import org.apache.openjpa.kernel.FetchConfiguration;\n-import org.apache.openjpa.kernel.FindCallbacks;\n import org.apache.openjpa.kernel.LockLevels;\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n import org.apache.openjpa.kernel.PCState;\n-import org.apache.openjpa.kernel.QueryLanguages;\n import org.apache.openjpa.kernel.StoreContext;\n import org.apache.openjpa.kernel.StoreManager;\n-import org.apache.openjpa.kernel.StoreQuery;\n import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.meta.MetaDataRepository;\n import org.apache.openjpa.util.OpenJPAId;\n@@ -228,22 +225,6 @@ private void updateCaches() {\n                 evictTypes(_ctx.getUpdatedTypes());\n             }\n \n-            // and notify the query cache.  notify in one batch to reduce synch\n-            QueryCache queryCache = _ctx.getConfiguration().\n-            getDataCacheManagerInstance().getSystemQueryCache();\n-            if (queryCache != null) {\n-                Collection<Class<?>> pers = _ctx.getPersistedTypes();\n-                Collection<Class<?>> del = _ctx.getDeletedTypes();\n-                Collection<Class<?>> up = _ctx.getUpdatedTypes();\n-                int size = pers.size() + del.size() + up.size();\n-                if (size > 0) {\n-                    Collection<Class<?>> types = new ArrayList<Class<?>>(size);\n-                    types.addAll(pers);\n-                    types.addAll(del);\n-                    types.addAll(up);\n-                    queryCache.onTypesChanged(new TypesChangedEvent(this, types));\n-                }\n-            } \n         }\n     }\n \n@@ -292,12 +273,31 @@ private static Modifications getModifications(Map<DataCache,Modifications> modMa\n \n     public boolean exists(OpenJPAStateManager sm, Object edata) {\n         DataCache cache = _mgr.selectCache(sm); \n-        if (cache != null && !isLocking(null)\n-            && cache.contains(sm.getObjectId()))\n+        if (cache != null && !isLocking(null) && cache.contains(sm.getObjectId()))\n             return true;\n         return super.exists(sm, edata);\n     }\n \n+    public boolean isCached(List<Object> oids, BitSet edata) {\n+        // If using partitioned cache, we were and still are broke.\n+        DataCache cache = _mgr.getSystemDataCache();\n+        if (cache != null && !isLocking(null)) {\n+            // BitSet size is not consistent.\n+            for(int i = 0; i < oids.size(); i++) {\n+                Object oid = oids.get(i);\n+                // Only check the cache if we haven't found the current oid.\n+                if (edata.get(i) == false && cache.contains(oid)) {\n+                    edata.set(i);\n+                }\n+            }\n+            if(edata.cardinality()==oids.size()){\n+                return true;\n+            }\n+        }\n+\n+        return super.isCached(oids, edata);\n+    }\n+\n     public boolean syncVersion(OpenJPAStateManager sm, Object edata) {\n         DataCache cache = _mgr.selectCache(sm);\n         if (cache == null || sm.isEmbedded())\n@@ -660,22 +660,6 @@ private void notifyOptimisticLockFailure(OptimisticException e) {\n             .fireLocalStaleNotification(oid);\n     }\n \n-    public StoreQuery newQuery(String language) {\n-        StoreQuery q = super.newQuery(language);\n-\n-        // if the query can't be parsed or it's using a non-parsed language\n-        // (one for which there is no ExpressionParser), we can't cache it.\n-        if (q == null || QueryLanguages.parserForLanguage(language) == null)\n-            return q;\n-\n-        QueryCache queryCache = _ctx.getConfiguration().\n-            getDataCacheManagerInstance().getSystemQueryCache();\n-        if (queryCache == null)\n-            return q;\n-\n-        return new QueryCacheStoreQuery(q, queryCache);\n-    }\n-\n     /**\n      * Create a new cacheable instance for the given state manager.\n      */"},{"sha":"4457c1ec7b736a5fac8a428d1cb7ea2a9a70110d","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryCacheStoreQuery.java","status":"modified","additions":6,"deletions":17,"changes":23,"blob_url":"https://github.com/apache/openjpa/blob/e973d26a721e8bd66356e11a2c053d24c680b5d2/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryCacheStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/e973d26a721e8bd66356e11a2c053d24c680b5d2/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryCacheStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryCacheStoreQuery.java?ref=e973d26a721e8bd66356e11a2c053d24c680b5d2","patch":"@@ -33,6 +33,7 @@\n \n import org.apache.commons.collections.map.LinkedMap;\n import org.apache.openjpa.datacache.AbstractQueryCache.EvictPolicy;\n+import org.apache.openjpa.kernel.DelegatingStoreManager;\n import org.apache.openjpa.kernel.FetchConfiguration;\n import org.apache.openjpa.kernel.LockLevels;\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n@@ -122,6 +123,7 @@ public StoreQuery getDelegate() {\n \n         // get the cached data\n         QueryResult res = _cache.get(qk);\n+\n         if (res == null)\n             return null;        \n         if (res.isEmpty())\n@@ -153,24 +155,11 @@ public StoreQuery getDelegate() {\n \n         int projs = getContext().getProjectionAliases().length;\n         if (projs == 0) {\n-            // make sure the data cache contains the oids for the query result;\n-            // if it doesn't, then using the result could be slower than not\n-            // using it because of the individual by-oid lookups\n-            ClassMetaData meta = _repos.getMetaData(getContext().\n-                getCandidateType(), _sctx.getClassLoader(), true);\n-            if (meta.getDataCache() == null)\n+            // We're only going to return the cached results if we have ALL results cached. This could be improved\n+            // in the future to be a little more intelligent.\n+            if (getContext().getStoreContext().isCached(res) == false) {\n                 return null;\n-\n-            BitSet idxs = meta.getDataCache().containsAll(res);\n-\n-            // eventually we should optimize this to figure out how many objects\n-            // the cache is missing and if only a few do a bulk fetch for them\n-            int len = idxs.length();\n-            if (len < res.size())\n-                return null;\n-            for (int i = 0; i < len; i++)\n-                if (!idxs.get(i))\n-                    return null;\n+            }\n         }\n         return new CachedList(res, projs != 0, _sctx);\n     }"},{"sha":"70d7b463eb78a6fdecfbe4436420546ed79f09b9","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryKey.java","status":"modified","additions":5,"deletions":8,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/e973d26a721e8bd66356e11a2c053d24c680b5d2/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryKey.java","raw_url":"https://github.com/apache/openjpa/raw/e973d26a721e8bd66356e11a2c053d24c680b5d2/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryKey.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryKey.java?ref=e973d26a721e8bd66356e11a2c053d24c680b5d2","patch":"@@ -200,14 +200,11 @@ private static QueryKey createKey(QueryContext q, boolean packed,\n             // since the class change framework deals with least-derived types,\n             // record the least-derived access path types\n             meta = metas[i];\n-            if (meta.getDataCache() != null)\n-                accessPathClassNames.add(meta.getDescribedType().getName());\n-            while (meta.getPCSuperclass() != null)\n-                meta = meta.getPCSuperclassMetaData();\n-\n-            // ensure that this metadata is cacheable\n-            if (meta.getDataCache() == null)\n-                return null;\n+            accessPathClassNames.add(meta.getDescribedType().getName());\n+            while (meta.getPCSuperclass() != null) {\n+                meta = meta.getPCSuperclassMetaData(); \n+            }\n+\n             accessPathClassNames.add(meta.getDescribedType().getName());\n         }\n "},{"sha":"1a9c22b74bcab5978829f654631691438935e176","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","status":"modified","additions":35,"deletions":3,"changes":38,"blob_url":"https://github.com/apache/openjpa/blob/e973d26a721e8bd66356e11a2c053d24c680b5d2/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/e973d26a721e8bd66356e11a2c053d24c680b5d2/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java?ref=e973d26a721e8bd66356e11a2c053d24c680b5d2","patch":"@@ -51,6 +51,8 @@\n import org.apache.openjpa.conf.Compatibility;\n import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.datacache.DataCache;\n+import org.apache.openjpa.datacache.QueryCache;\n+import org.apache.openjpa.datacache.TypesChangedEvent;\n import org.apache.openjpa.ee.ManagedRuntime;\n import org.apache.openjpa.enhance.PCRegistry;\n import org.apache.openjpa.enhance.PersistenceCapable;\n@@ -70,7 +72,6 @@\n import org.apache.openjpa.lib.util.ReferenceMap;\n import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.meta.FieldMetaData;\n-import org.apache.openjpa.meta.JavaTypes;\n import org.apache.openjpa.meta.MetaDataRepository;\n import org.apache.openjpa.meta.SequenceMetaData;\n import org.apache.openjpa.meta.ValueMetaData;\n@@ -88,7 +89,6 @@\n import org.apache.openjpa.util.ObjectNotFoundException;\n import org.apache.openjpa.util.OpenJPAException;\n import org.apache.openjpa.util.OptimisticException;\n-import org.apache.openjpa.util.Proxy;\n import org.apache.openjpa.util.RuntimeExceptionTranslator;\n import org.apache.openjpa.util.StoreException;\n import org.apache.openjpa.util.UnsupportedException;\n@@ -1416,8 +1416,25 @@ private RuntimeException endStoreManagerTransaction(boolean rollback) {\n                 releaseConn = _connRetainMode != CONN_RETAIN_ALWAYS;\n                 if (rollback)\n                     _store.rollback();\n-                else\n+                else {\n+                    // and notify the query cache.  notify in one batch to reduce synch\n+                    QueryCache queryCache = getConfiguration().\n+                    getDataCacheManagerInstance().getSystemQueryCache();\n+                    if (queryCache != null) {\n+                        Collection<Class<?>> pers = getPersistedTypes();\n+                        Collection<Class<?>> del = getDeletedTypes();\n+                        Collection<Class<?>> up = getUpdatedTypes();\n+                        int size = pers.size() + del.size() + up.size();\n+                        if (size > 0) {\n+                            Collection<Class<?>> types = new ArrayList<Class<?>>(size);\n+                            types.addAll(pers);\n+                            types.addAll(del);\n+                            types.addAll(up);\n+                            queryCache.onTypesChanged(new TypesChangedEvent(this, types));\n+                        }\n+                    } \n                     _store.commit();\n+                }\n             } else {\n                 releaseConn = _connRetainMode == CONN_RETAIN_TRANS;\n                 _store.rollbackOptimistic();\n@@ -5039,4 +5056,19 @@ public Object getConnectionFactory2() {\n             return null;\n         }\n     }\n+    \n+    public boolean isCached(List<Object> oids) {\n+        BitSet loaded = new BitSet(oids.size());\n+        //check L1 cache first\n+        for (int i = 0; i < oids.size(); i++) {\n+            Object oid = oids.get(i);\n+            if (_cache.getById(oid, false) != null) {\n+                loaded.set(i);\n+            }\n+        }\n+        if(loaded.cardinality()==oids.size()){\n+            return true;\n+        }\n+        return _store.isCached(oids, loaded);\n+    };\n }"},{"sha":"dbf1aff3e30da1169156a7b4f1c80fedd4b51fce","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBroker.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/e973d26a721e8bd66356e11a2c053d24c680b5d2/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBroker.java","raw_url":"https://github.com/apache/openjpa/raw/e973d26a721e8bd66356e11a2c053d24c680b5d2/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBroker.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBroker.java?ref=e973d26a721e8bd66356e11a2c053d24c680b5d2","patch":"@@ -21,6 +21,7 @@\n import java.util.BitSet;\n import java.util.Collection;\n import java.util.Iterator;\n+import java.util.List;\n import java.util.Map;\n import java.util.Set;\n \n@@ -1463,4 +1464,8 @@ public Object getConnectionFactory() {\n     public Object getConnectionFactory2() {\n         return _broker.getConnectionFactory2();\n     }\n+    \n+    public boolean isCached(List<Object> oid) {\n+        return _broker.isCached(oid);\n+    }\n }"},{"sha":"7de80286336914b071cd8e0d0c12b2ab7cd20325","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingStoreManager.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/e973d26a721e8bd66356e11a2c053d24c680b5d2/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingStoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/e973d26a721e8bd66356e11a2c053d24c680b5d2/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingStoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingStoreManager.java?ref=e973d26a721e8bd66356e11a2c053d24c680b5d2","patch":"@@ -20,6 +20,7 @@\n \n import java.util.BitSet;\n import java.util.Collection;\n+import java.util.List;\n \n import org.apache.openjpa.lib.rop.ResultObjectProvider;\n import org.apache.openjpa.meta.ClassMetaData;\n@@ -199,4 +200,9 @@ public Seq getValueSequence(FieldMetaData fmd) {\n     public boolean cancelAll() {\n         return _store.cancelAll();\n \t}\n+\t\n+    public boolean isCached(List<Object> oids, BitSet edata) {\n+        return _store.isCached(oids, edata);\n+    }\n+    \n }"},{"sha":"921f1b032224c57fcd118969af8c0227219014b5","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreContext.java","status":"modified","additions":12,"deletions":2,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/e973d26a721e8bd66356e11a2c053d24c680b5d2/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreContext.java","raw_url":"https://github.com/apache/openjpa/raw/e973d26a721e8bd66356e11a2c053d24c680b5d2/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreContext.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreContext.java?ref=e973d26a721e8bd66356e11a2c053d24c680b5d2","patch":"@@ -21,9 +21,11 @@\n import java.util.BitSet;\n import java.util.Collection;\n import java.util.Iterator;\n+import java.util.List;\n \n import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.meta.ValueMetaData;\n+import org.apache.openjpa.util.UserException;\n \n /**\n  * Represents a set of managed objects and their environment.\n@@ -111,8 +113,8 @@\n     public String getConnectionPassword();\n \n     /**\n-     * Return the cached instance for the given oid/object, or null if not\n-     * cached.\n+     * Return the instance for the given oid/object , or null if not\n+     * found in the L1 cache. \n      *\n      * @param oid the object's id\n      * @return the cached object, or null if not cached\n@@ -490,4 +492,12 @@ public OpenJPAStateManager embed(Object obj, Object id,\n      * @return the NonJTA connection factory or null if connectionFactoryName is blank.\n      */\n     public Object getConnectionFactory2();\n+    \n+    /**\n+     * Indicate whether the oid can be found in the StoreContext's L1 cache or in the StoreManager cache.\n+     * @param oid List of ObjectIds for PersistenceCapables which may be found in memory.\n+     * @return true if the oid is available in memory (cached) otherwise false.\n+     * @since 2.0.0. \n+     */\n+    public boolean isCached(List<Object> oid);\n }"},{"sha":"f2efc97bf8ad12ae663724bba053c56b229e079d","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreManager.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/e973d26a721e8bd66356e11a2c053d24c680b5d2/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/e973d26a721e8bd66356e11a2c053d24c680b5d2/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreManager.java?ref=e973d26a721e8bd66356e11a2c053d24c680b5d2","patch":"@@ -20,6 +20,7 @@\n \n import java.util.BitSet;\n import java.util.Collection;\n+import java.util.List;\n \n import org.apache.openjpa.lib.rop.ResultObjectProvider;\n import org.apache.openjpa.lib.util.Closeable;\n@@ -99,6 +100,13 @@\n      * if it does not.\n      */\n     public boolean exists(OpenJPAStateManager sm, Object edata);\n+    \n+    /**\n+     * Verify that the given instance exists in the data store in memory; return false\n+     * if it does not. When an object is found in memory the corresponding element of \n+     * the BitSet is set to 1. \n+     */\n+    public boolean isCached(List<Object> oids, BitSet edata);\n \n     /**\n      * Update the version information in the given state manager to the"},{"sha":"9748c8033f16bd80cb65041f758fac2857be84f2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/CacheTest.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/e973d26a721e8bd66356e11a2c053d24c680b5d2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/CacheTest.java","raw_url":"https://github.com/apache/openjpa/raw/e973d26a721e8bd66356e11a2c053d24c680b5d2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/CacheTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/CacheTest.java?ref=e973d26a721e8bd66356e11a2c053d24c680b5d2","patch":"@@ -781,7 +781,8 @@ public void testNonCacheableClass() {\n             Collection c = (Collection) q.execute();\n             iterate(c);\n \n-            assertInCache(q, Boolean.FALSE);\n+            // Query results are no longer dependent on cacheability of an entity.\n+            assertInCache(q, Boolean.TRUE);\n         }\n         finally {\n             close(broker);\n@@ -801,7 +802,8 @@ public void testNonCacheableAccessPath() {\n             Collection c = (Collection) q.execute();\n             iterate(c);\n \n-            assertInCache(q, Boolean.FALSE);\n+         // Query results are no longer dependent on cacheability of an entity.\n+            assertInCache(q, Boolean.TRUE);\n         }\n         finally {\n             close(broker);"},{"sha":"9e50e0a53c636b611d9b8cfd5385d2decd047b1b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/querycache/TestQueryCache.java","status":"modified","additions":54,"deletions":76,"changes":130,"blob_url":"https://github.com/apache/openjpa/blob/e973d26a721e8bd66356e11a2c053d24c680b5d2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/querycache/TestQueryCache.java","raw_url":"https://github.com/apache/openjpa/raw/e973d26a721e8bd66356e11a2c053d24c680b5d2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/querycache/TestQueryCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/querycache/TestQueryCache.java?ref=e973d26a721e8bd66356e11a2c053d24c680b5d2","patch":"@@ -23,112 +23,104 @@\n import javax.persistence.EntityManager;\n import javax.persistence.NamedQuery;\n \n-import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\n import org.apache.openjpa.persistence.querycache.common.apps.Entity1;\n import org.apache.openjpa.persistence.querycache.common.apps.Entity2;\n+import org.apache.openjpa.persistence.test.SQLListenerTestCase;\n \n @NamedQuery(name = \"setParam1\",\n-    query = \"SELECT o FROM Entity1 o WHERE o.pk LIKE :pk\")\n-public class TestQueryCache extends AbstractTestCase {\n+    query = \"SELECT o FROM Entity1 o WHERE o.pk = :pk\")\n+public class TestQueryCache extends SQLListenerTestCase {\n \n     EntityManager em;\n \n-    public TestQueryCache(String name) {\n-        super(name, \"\");\n-        System.setProperty(\"cactus.contextURL\",\n-            \"http://localhost:9000/cachecactus\");\n-        em = currentEntityManager();\n-    }\n-\n-    /*public static Test suite()\n-    {\n-        ServletTestSuite suite = new ServletTestSuite();\n-        suite.addTestSuite(TestQueryCache.class);\n-        return suite;\n-    }*/\n     public void setUp() {\n-        System.setProperty(\"cactus.contextURL\",\n-            \"http://localhost:9000/cactuswebapp\");\n-\n-        //deleteAll(Entity2.class);\n-        deleteAll(Entity1.class);\n-\n-        int instNum = 10;\n-\n-        startTx(em);\n-\n+        super.setUp(\n+            DROP_TABLES,\n+            \"openjpa.QueryCache\", \"true\", \n+            \"openjpa.RemoteCommitProvider\",\"sjvm\",\n+            Entity1.class,Entity2.class\n+        // ,\"openjpa.Log\",\"SQL=trace\"\n+            );\n+        em = emf.createEntityManager();\n+        \n+        em.getTransaction().begin();\n         //create and persist multiple entity1 instances\n-        for (int i = 0; i < instNum; i++) {\n+        for (int i = 0; i < 10; i++) {\n             Entity1 ent = new Entity1(i, \"string\" + i, i + 2);\n             Entity2 ent2 = new Entity2(i * 2, \"ent2\" + i, i);\n             ent.setEntity2Field(ent2);\n             em.persist(ent);\n         }\n-\n-        endTx(em);\n-        endEm(em);\n+        em.getTransaction().commit();\n     }\n \n+    public void testCachedQuery(){\n+        em.createQuery(\"Select object(o) from Entity1 o\").getResultList().get(0);        \n+        resetSQL();\n+        em.createQuery(\"Select object(o) from Entity1 o\").getResultList().get(0);\n+        em.createQuery(\"Select object(o) from Entity1 o\").getResultList().get(0);\n+        \n+        assertEquals(0, getSQLCount());\n+        \n+    }\n     public void testResultList() {\n-        em = currentEntityManager();\n         List list = em.createQuery(\"Select object(o) from Entity1 o\")\n             .getResultList();\n \n         assertEquals(10, list.size());\n \n-        endEm(em);\n     }\n \n     public void testGetSingleList() {\n-        em = currentEntityManager();\n+\n         String curr = 2 + \"\";\n \n         Entity1 ret = (Entity1) em\n-            .createQuery(\"SELECT o FROM Entity1 o WHERE o.pk LIKE :pk\")\n-            .setParameter(\"pk\", curr)\n+            .createQuery(\"SELECT o FROM Entity1 o WHERE o.pk = :pk\")\n+            .setParameter(\"pk\", Long.valueOf(curr))\n             .getSingleResult();\n \n         assertNotNull(ret);\n         assertEquals(\"string2\", ret.getStringField());\n         assertEquals(4, ret.getIntField());\n \n-        endEm(em);\n+\n     }\n \n     public void testExecuteUpdate() {\n         String curr = 2 + \"\";\n         String curr2 = 22 + \"\";\n \n-        em = currentEntityManager();\n+\n         startTx(em);\n \n         Entity1 entity1 = (Entity1) em\n-            .createQuery(\"SELECT o FROM Entity1 o WHERE o.pk LIKE :pk\")\n-            .setParameter(\"pk\", curr)\n+            .createQuery(\"SELECT o FROM Entity1 o WHERE o.pk = :pk\")\n+            .setParameter(\"pk\", Long.valueOf(curr))\n             .getSingleResult();\n \n-        int ret = em.createQuery(\"Delete FROM Entity1 o WHERE o.pk LIKE :pk\")\n-            .setParameter(\"pk\", curr)\n+        int ret = em.createQuery(\"Delete FROM Entity1 o WHERE o.pk = :pk\")\n+            .setParameter(\"pk\", Long.valueOf(curr))\n             .executeUpdate();\n         assertEquals(ret, 1);\n \n         // cascade remove doesn't remove the entity2\n-        int retTmp = em.createQuery(\"Delete FROM Entity2 o WHERE o.pk LIKE :pk\")\n+        int retTmp = em.createQuery(\"Delete FROM Entity2 o WHERE o.pk = :pk\")\n             .setParameter(\"pk\", entity1.getEntity2Field().getPk())\n             .executeUpdate();\n \n-        int ret2 = em.createQuery(\"Delete FROM Entity1 o WHERE o.pk LIKE :pk\")\n-            .setParameter(\"pk\", curr2)\n+        int ret2 = em.createQuery(\"Delete FROM Entity1 o WHERE o.pk = :pk\")\n+            .setParameter(\"pk\", Long.valueOf(curr2))\n             .executeUpdate();\n \n         assertEquals(ret2, 0);\n \n         endTx(em);\n-        endEm(em);\n+\n     }\n \n     public void testSetMaxResults() {\n-        em = currentEntityManager();\n+\n \n         List l = em.createQuery(\"Select object(o) from Entity1 o\")\n             .setMaxResults(5)\n@@ -137,11 +129,11 @@ public void testSetMaxResults() {\n         assertNotNull(l);\n         assertEquals(5, l.size());\n \n-        endEm(em);\n+\n     }\n \n     public void testSetFirstResults() {\n-        em = currentEntityManager();\n+\n \n         List l = em.createQuery(\"Select object(o) from Entity1 o\")\n             .setFirstResult(3)\n@@ -153,37 +145,23 @@ public void testSetFirstResults() {\n         assertEquals(\"string3\", ent.getStringField());\n         assertEquals(5, ent.getIntField());\n \n-        endEm(em);\n-    }\n-\n-    // Tests Binding an argument to a named parameter.\n-    // pk, the named parameter --Not working yet--\n-    public void xxxtestSetParameter1() {\n-\n-        em = currentEntityManager();\n-        String curr = 2 + \"\";\n-\n-        List ret = em.createQuery(\"SELECT o FROM Entity1 o WHERE o.pk LIKE :pk\")\n-            .setParameter(\"pk\", curr)\n-            .getResultList();\n-\n-        assertNotNull(ret);\n-        assertEquals(1, ret.size());\n \n-        ret = em.createNamedQuery(\"setParam1\")\n-            .setParameter(\"pk\", curr)\n-            .getResultList();\n-\n-        assertNotNull(ret);\n-        assertEquals(1, ret.size());\n+    }\n \n-        endTx(em);\n+    protected void startTx(EntityManager em) {\n+        em.getTransaction().begin();\n     }\n-    \n-    @Override\n-    public String getPersistenceUnitName() { \n-        return \"QueryCache\";\n+\n+    protected boolean isActiveTx(EntityManager em) {\n+        return em.getTransaction().isActive();\n     }\n \n-    //rest of the interface is tested by the CTS\n+    protected void endTx(EntityManager em) {\n+        if (em.getTransaction().isActive()) {\n+            if (em.getTransaction().getRollbackOnly())\n+                em.getTransaction().rollback();\n+            else\n+                em.getTransaction().commit();\n+        }\n+    }\n }"},{"sha":"3b7ea11676c44b1d819da2c1022c0209c2fef37a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/PPerson.java","status":"added","additions":67,"deletions":0,"changes":67,"blob_url":"https://github.com/apache/openjpa/blob/e973d26a721e8bd66356e11a2c053d24c680b5d2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/PPerson.java","raw_url":"https://github.com/apache/openjpa/raw/e973d26a721e8bd66356e11a2c053d24c680b5d2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/PPerson.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/PPerson.java?ref=e973d26a721e8bd66356e11a2c053d24c680b5d2","patch":"@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+ package org.apache.openjpa.persistence.relations;\n+\n+import java.util.Collection;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.ManyToMany;\n+\n+@Entity\n+public class PPerson {\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private int id;\n+\n+    private String name;\n+\n+    @ManyToMany(fetch=FetchType.EAGER, mappedBy=\"people\")\n+    private Collection<PPhone> phones;\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public Collection<PPhone> getPhones() {\n+        return phones;\n+    }\n+\n+    public void setPhones(Collection<PPhone> phones) {\n+        this.phones = phones;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"Person [id=\" + id + \", number=\" + name + \"]\";\n+    }\n+    \n+    \n+}"},{"sha":"726dfde4e83abdbec5ffa255a7e1728ff0aa6210","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/PPhone.java","status":"added","additions":65,"deletions":0,"changes":65,"blob_url":"https://github.com/apache/openjpa/blob/e973d26a721e8bd66356e11a2c053d24c680b5d2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/PPhone.java","raw_url":"https://github.com/apache/openjpa/raw/e973d26a721e8bd66356e11a2c053d24c680b5d2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/PPhone.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/PPhone.java?ref=e973d26a721e8bd66356e11a2c053d24c680b5d2","patch":"@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+ package org.apache.openjpa.persistence.relations;\n+\n+import java.util.Collection;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.ManyToMany;\n+\n+@Entity\n+public class PPhone {\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private int id;\n+\n+    private String number;\n+\n+    @ManyToMany(fetch=FetchType.EAGER)\n+    private Collection<PPerson> people;\n+\n+    public int getId() {\n+        return id;\n+    }\n+    \n+    public String getNumber() {\n+        return number;\n+    }\n+\n+    public void setNumber(String number) {\n+        this.number = number;\n+    }\n+\n+    public Collection<PPerson> getPeople() {\n+        return people;\n+    }\n+\n+    public void setPeople(Collection<PPerson> people) {\n+        this.people = people;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"Phone [id=\" + id + \", number=\" + number + \"]\";\n+    }\n+}"},{"sha":"b054a1c1139ff486d0d72162cd9e386ccd1bfef0","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestInverseEagerSQL.java","status":"modified","additions":54,"deletions":3,"changes":57,"blob_url":"https://github.com/apache/openjpa/blob/e973d26a721e8bd66356e11a2c053d24c680b5d2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestInverseEagerSQL.java","raw_url":"https://github.com/apache/openjpa/raw/e973d26a721e8bd66356e11a2c053d24c680b5d2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestInverseEagerSQL.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestInverseEagerSQL.java?ref=e973d26a721e8bd66356e11a2c053d24c680b5d2","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.openjpa.persistence.relations;\n \n+import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Iterator;\n import java.util.List;\n@@ -41,13 +42,18 @@\n \n     public int numCustomers = 1;\n     public int numOrdersPerCustomer = 4;\n+    \n+    public int _nPeople = 3; \n+    public int _nPhones = 3;\n \n     public void setUp() {\n         setUp(Customer.class, Customer.CustomerKey.class, Order.class, \n             EntityAInverseEager.class, EntityA1InverseEager.class,\n             EntityA2InverseEager.class, EntityBInverseEager.class,\n             EntityCInverseEager.class, EntityDInverseEager.class,\n-            Publisher.class, Magazine.class, DROP_TABLES);\n+            Publisher.class, Magazine.class, \n+            PPerson.class, PPhone.class, \n+            DROP_TABLES);\n \n         // Not all databases support GenerationType.IDENTITY column(s)\n         if (!((JDBCConfiguration) emf.getConfiguration()).\n@@ -132,6 +138,21 @@ public void setUp() {\n             magazine.setName(\"magagine\"+i+\"_\"+p2.getName());\n             em.persist(magazine);\n         }\n+        \n+        PPerson person;\n+        PPhone phone;\n+        for(int i =0; i < _nPeople; i++) { \n+            person = new PPerson();\n+            person.setPhones(new ArrayList<PPhone>());\n+            em.persist(person);\n+            for(int j = 0; j < _nPhones; j++) { \n+                phone = new PPhone(); \n+                phone.setPeople(new ArrayList<PPerson>());\n+                phone.getPeople().add(person);\n+                person.getPhones().add(phone);\n+                em.persist(phone);\n+            }\n+        }\n \n         em.flush();\n         em.getTransaction().commit();\n@@ -255,8 +276,8 @@ public void testOneToManyEagerInverseLazyQuery() {\n         // Not all databases support GenerationType.IDENTITY column(s)\n         if (!((JDBCConfiguration) emf.getConfiguration()).\n             getDBDictionaryInstance().supportsAutoAssign) {\n-\t\t\treturn;\n-\t\t}\n+            return;\n+        }\n         sql.clear();\n \n         OpenJPAEntityManager em = emf.createEntityManager();\n@@ -282,6 +303,36 @@ public void testOneToManyEagerInverseLazyQuery() {\n         assertEquals(0, sql.size());\n         em.close();\n     }\n+    \n+    public void testManyToManyEagerEagerInverseLazyQuery() {\n+        // Not all databases support GenerationType.IDENTITY column(s)\n+        if (!((JDBCConfiguration) emf.getConfiguration()).\n+            getDBDictionaryInstance().supportsAutoAssign) {\n+            return;\n+        }\n+        sql.clear();\n+\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        String query = \"select p FROM PPerson p\";\n+        Query q = em.createQuery(query);\n+        List list = q.getResultList();\n+        assertEquals(_nPeople, list.size());\n+        assertEquals(7, sql.size());\n+\n+        sql.clear();\n+        em.clear();\n+        for (int i = 0; i < list.size(); i++) {\n+            PPerson p = (PPerson) list.get(i);\n+            Collection<PPhone> phones = p.getPhones();\n+            assertEquals(_nPhones, phones.size());\n+            for(PPhone phone : p.getPhones()) {\n+                assertNotNull(phone.getPeople());\n+                assertTrue(phone.getPeople().contains(p));\n+            }\n+        }\n+        assertEquals(0, sql.size());\n+        em.close();\n+    }\n \n     public void testTargetOrphanRemoval() {\n         // Not all databases support GenerationType.IDENTITY column(s)"},{"sha":"0456e1b562f65b68c26f6d7e8a04d1d0b0570460","filename":"openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/XMLStoreManager.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/e973d26a721e8bd66356e11a2c053d24c680b5d2/openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/XMLStoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/e973d26a721e8bd66356e11a2c053d24c680b5d2/openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/XMLStoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/XMLStoreManager.java?ref=e973d26a721e8bd66356e11a2c053d24c680b5d2","patch":"@@ -283,4 +283,8 @@ public ResultObjectProvider executeExtent(ClassMetaData meta,\n         }\n         return new ListResultObjectProvider(pcs);\n     }\n+    public boolean isCached(List<Object> oids, BitSet edata) {\n+        // XMLStoreManager does not cache oids. \n+        return false;\n+    }\n }"}]}

