{"sha":"e98845758db72b188e9b73029266f45a8215e2de","node_id":"MDY6Q29tbWl0MjA2MzY0OmU5ODg0NTc1OGRiNzJiMTg4ZTliNzMwMjkyNjZmNDVhODIxNWUyZGU=","commit":{"author":{"name":"Jody Grassel","email":"jgrassel@apache.org","date":"2015-11-09T18:54:51Z"},"committer":{"name":"Jody Grassel","email":"jgrassel@apache.org","date":"2015-11-09T18:54:51Z"},"message":"OPENJPA-2605: DelegatingConnection.unwrap() doesn't adhere to java.sql.Wrapper.unwrap() contract\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1713509 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b489d9c45f1dbaaae3de97285761a62e7890a978","url":"https://api.github.com/repos/apache/openjpa/git/trees/b489d9c45f1dbaaae3de97285761a62e7890a978"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/e98845758db72b188e9b73029266f45a8215e2de","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/e98845758db72b188e9b73029266f45a8215e2de","html_url":"https://github.com/apache/openjpa/commit/e98845758db72b188e9b73029266f45a8215e2de","comments_url":"https://api.github.com/repos/apache/openjpa/commits/e98845758db72b188e9b73029266f45a8215e2de/comments","author":null,"committer":null,"parents":[{"sha":"28da3eaccfb62847285dc270318dd2fc873afe6e","url":"https://api.github.com/repos/apache/openjpa/commits/28da3eaccfb62847285dc270318dd2fc873afe6e","html_url":"https://github.com/apache/openjpa/commit/28da3eaccfb62847285dc270318dd2fc873afe6e"}],"stats":{"total":97,"additions":94,"deletions":3},"files":[{"sha":"4db8bbf8d339a89a659ee016ccd24d3579656eb9","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingConnection.java","status":"modified","additions":18,"deletions":3,"changes":21,"blob_url":"https://github.com/apache/openjpa/blob/e98845758db72b188e9b73029266f45a8215e2de/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingConnection.java","raw_url":"https://github.com/apache/openjpa/raw/e98845758db72b188e9b73029266f45a8215e2de/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingConnection.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingConnection.java?ref=e98845758db72b188e9b73029266f45a8215e2de","patch":"@@ -460,12 +460,27 @@ public boolean isWrapperFor(Class<?> iface) throws SQLException {\n         return iface.isAssignableFrom(getDelegate().getClass());\n     }\n \n+    /**\n+     * From java.sql.Wrapper javadoc:\n+     * \n+     * Returns an object that implements the given interface to allow access to \n+     * non-standard methods, or standard methods not exposed by the proxy. If \n+     * the receiver implements the interface then the result is the receiver \n+     * or a proxy for the receiver. If the receiver is a wrapper and the \n+     * wrapped object implements the interface then the result is the wrapped \n+     * object or a proxy for the wrapped object. Otherwise return the the \n+     * result of calling unwrap recursively on the wrapped object or a proxy \n+     * for that result. If the receiver is not a wrapper and does not implement\n+     * the interface, then an SQLException is thrown.\n+     * \n+     */\n     @Override\n     public <T> T unwrap(Class<T> iface) throws SQLException {\n-        if (isWrapperFor(iface))\n+        if (isWrapperFor(iface)) {\n             return (T) getDelegate();\n-        else\n-            return null;\n+        } else {\n+            return getDelegate().unwrap(iface);\n+        }\n     }\n \n     public Array createArrayOf(String typeName, Object[] elements) throws SQLException {"},{"sha":"319afd274fb4863e8fcb6e4dbdf51d8d8d0da44f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/TestUnwrap.java","status":"modified","additions":76,"deletions":0,"changes":76,"blob_url":"https://github.com/apache/openjpa/blob/e98845758db72b188e9b73029266f45a8215e2de/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/TestUnwrap.java","raw_url":"https://github.com/apache/openjpa/raw/e98845758db72b188e9b73029266f45a8215e2de/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/TestUnwrap.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/TestUnwrap.java?ref=e98845758db72b188e9b73029266f45a8215e2de","patch":"@@ -18,14 +18,20 @@\n  */\n package org.apache.openjpa.persistence;\n \n+import java.sql.Connection;\n+import java.util.ArrayList;\n+import java.util.List;\n import java.util.Map;\n import java.util.Properties;\n \n import javax.persistence.EntityManager;\n import javax.persistence.EntityTransaction;\n import javax.persistence.Query;\n \n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.sql.DerbyDictionary;\n import org.apache.openjpa.kernel.QueryLanguages;\n+import org.apache.openjpa.lib.jdbc.DelegatingConnection;\n import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n \n public class TestUnwrap extends SingleEMFTestCase {\n@@ -90,6 +96,76 @@ public void testValidOtherUnwrap() {\n         em.close();\n     }\n     \n+    public void testConnectionUnwrap() throws Exception {\n+        String dbDict = ((JDBCConfiguration) emf.getConfiguration()).getDBDictionaryInstance().getClass().getName();\n+        \n+        EntityManager em = emf.createEntityManager();\n+        OpenJPAEntityManager oem = em.unwrap(OpenJPAEntityManager.class);\n+        try {\n+            Connection c = (Connection) oem.getConnection();\n+            assertNotNull(c);\n+            assertTrue(DelegatingConnection.class.isAssignableFrom(c.getClass()));\n+            \n+            List<Class> acceptedConnectionClassTypes = new ArrayList<Class>();\n+            if (DerbyDictionary.class.getName().equals(dbDict)) {\n+                // Connection type can be network or embedded\n+                String[] connectionTypes = { \n+                    \"org.apache.derby.impl.jdbc.EmbedConnection40\",\n+                    \"org.apache.derby.impl.jdbc.EmbedConnection30\",\n+                    \"org.apache.derby.iapi.jdbc.BrokeredConnection40\",\n+                    \"org.apache.derby.iapi.jdbc.BrokeredConnection30\" };\n+                for (String ct : connectionTypes) {\n+                    try {\n+                        Class cls = Class.forName(ct);\n+                        acceptedConnectionClassTypes.add(cls);\n+                    } catch (ClassNotFoundException cnfe) {\n+                        // Swallow\n+                    }\n+                }\n+            }\n+            \n+            if (!acceptedConnectionClassTypes.isEmpty()) {\n+                boolean pass = false;\n+                for (Class cls : acceptedConnectionClassTypes) {\n+                    try {\n+                        Connection castC = (Connection) c.unwrap(cls);\n+                        assertNotNull(castC);\n+                        assertEquals(cls, castC.getClass());\n+                        pass = true;\n+                        break;\n+                    } catch (Throwable t) {\n+                        // Swallow\n+                    }\n+                    \n+                   assertTrue(pass); \n+                }\n+            }\n+        } finally {\n+            em.close();\n+        }\n+    }\n+    \n+    public void testNegativeConnectionUnwrap() {\n+        EntityManager em = emf.createEntityManager();\n+        OpenJPAEntityManager oem = em.unwrap(OpenJPAEntityManager.class);\n+        \n+        try {\n+            Connection c = (Connection) oem.getConnection();\n+            assertNotNull(c);\n+            assertTrue(DelegatingConnection.class.isAssignableFrom(c.getClass()));\n+            \n+            // Make a completely bogus unwrap() attempt\n+            try {\n+                c.unwrap(TestUnwrap.class);\n+                fail(\"Bogus unwrap should have thrown a SQLException.\");\n+            } catch (java.sql.SQLException se) {\n+                // Expected\n+            }\n+        } finally {\n+            em.close();\n+        }\n+    }\n+    \n     /**\n      * Tests a EntityManager can not be unwrapped as Object class, null or an interface. \n      * And each such failure raises a Persistence Exception and causes an active transaction"}]}

