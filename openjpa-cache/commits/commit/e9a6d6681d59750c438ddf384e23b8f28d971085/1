{"sha":"e9a6d6681d59750c438ddf384e23b8f28d971085","node_id":"MDY6Q29tbWl0MjA2MzY0OmU5YTZkNjY4MWQ1OTc1MGM0MzhkZGYzODRlMjNiOGYyOGQ5NzEwODU=","commit":{"author":{"name":"Jody Grassel","email":"jgrassel@apache.org","date":"2012-09-11T15:18:22Z"},"committer":{"name":"Jody Grassel","email":"jgrassel@apache.org","date":"2012-09-11T15:18:22Z"},"message":"OPENJPA-2261: Query SQL Cache issue with NULL parameters\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1383446 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"168dffe5ec2146322b063ed7bfaa85740cbe8a87","url":"https://api.github.com/repos/apache/openjpa/git/trees/168dffe5ec2146322b063ed7bfaa85740cbe8a87"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/e9a6d6681d59750c438ddf384e23b8f28d971085","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/e9a6d6681d59750c438ddf384e23b8f28d971085","html_url":"https://github.com/apache/openjpa/commit/e9a6d6681d59750c438ddf384e23b8f28d971085","comments_url":"https://api.github.com/repos/apache/openjpa/commits/e9a6d6681d59750c438ddf384e23b8f28d971085/comments","author":null,"committer":null,"parents":[{"sha":"ef2065122aec54bdee276b4e7f3777c94748826e","url":"https://api.github.com/repos/apache/openjpa/commits/ef2065122aec54bdee276b4e7f3777c94748826e","html_url":"https://github.com/apache/openjpa/commit/ef2065122aec54bdee276b4e7f3777c94748826e"}],"stats":{"total":306,"additions":306,"deletions":0},"files":[{"sha":"bba18975acb5cdd9dd3b270d5951c96365b78c5b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/querycache/QCEntity.java","status":"added","additions":75,"deletions":0,"changes":75,"blob_url":"https://github.com/apache/openjpa/blob/e9a6d6681d59750c438ddf384e23b8f28d971085/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/querycache/QCEntity.java","raw_url":"https://github.com/apache/openjpa/raw/e9a6d6681d59750c438ddf384e23b8f28d971085/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/querycache/QCEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/querycache/QCEntity.java?ref=e9a6d6681d59750c438ddf384e23b8f28d971085","patch":"@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.querycache;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.NamedQueries;\n+import javax.persistence.NamedQuery;\n+\n+@Entity\n+@NamedQueries({ \n+    @NamedQuery(name = \"QCEntity.getByAmount\", query = \"SELECT o from QCEntity o WHERE o.amount=:amount\")\n+})\n+public class QCEntity {\n+    @Id\n+    @Column(name = \"PK\")\n+    private String pk;\n+\n+    @Column(name = \"DESCRIPTION\")\n+    private String description;\n+\n+    @Column(name = \"AMOUNT\")\n+    private Long amount;\n+\n+    public QCEntity() {\n+        \n+    }\n+    \n+    public QCEntity(String pk, String description, Long amount) {\n+        this.pk = pk;\n+        this.description = description;\n+        this.amount = amount;\n+    }\n+    \n+    public String getPk() {\n+        return pk;\n+    }\n+\n+    public void setPk(String pk) {\n+        this.pk = pk;\n+    }\n+\n+    public String getDescription() {\n+        return description;\n+    }\n+\n+    public void setDescription(String description) {\n+        this.description = description;\n+    }\n+\n+    public Long getAmount() {\n+        return amount;\n+    }\n+\n+    public void setAmount(Long amount) {\n+        this.amount = amount;\n+    }\n+}"},{"sha":"6309453866d048abe0c3d3611af24503d68ac912","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/querycache/TestQuerySQLCache.java","status":"added","additions":222,"deletions":0,"changes":222,"blob_url":"https://github.com/apache/openjpa/blob/e9a6d6681d59750c438ddf384e23b8f28d971085/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/querycache/TestQuerySQLCache.java","raw_url":"https://github.com/apache/openjpa/raw/e9a6d6681d59750c438ddf384e23b8f28d971085/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/querycache/TestQuerySQLCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/querycache/TestQuerySQLCache.java?ref=e9a6d6681d59750c438ddf384e23b8f28d971085","patch":"@@ -0,0 +1,222 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.querycache;\n+\n+import java.util.List;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.Query;\n+\n+import org.apache.openjpa.persistence.EntityManagerImpl;\n+import org.apache.openjpa.persistence.test.SQLListenerTestCase;\n+\n+public class TestQuerySQLCache extends SQLListenerTestCase {\n+    EntityManager em;\n+    \n+    public void setUp() {\n+        super.setUp(\n+            DROP_TABLES,\n+            \"openjpa.jdbc.QuerySQLCache\", \"true\",\n+            \"openjpa.DataCache\", \"false\",\n+            QCEntity.class\n+            );\n+        em = emf.createEntityManager();\n+        \n+        em.getTransaction().begin();\n+        QCEntity qc1 = new QCEntity(\"pk1\", \"description\", Long.valueOf(1));\n+        QCEntity qc2 = new QCEntity(\"pk2\", \"description-2\", Long.valueOf(1));\n+        QCEntity qc3 = new QCEntity(\"pk3\", null, null);\n+        \n+        em.persist(qc1);\n+        em.persist(qc2);\n+        em.persist(qc3);\n+        \n+        em.getTransaction().commit();\n+        \n+        em.clear();\n+    }\n+    \n+    public void testNullParamsWithNumericPosition01() {\n+        // Verify Query SQL Cache is enabled\n+        EntityManagerImpl eml = (EntityManagerImpl) em;\n+        assertTrue(eml.getQuerySQLCache());\n+               \n+        Query q = em.createQuery(\"SELECT o from QCEntity o WHERE o.amount=?1\");\n+        \n+        // Test with NULL parameter, SQL should contain a IS NULL predicate\n+        resetSQL();\n+        q.setParameter(1, null);\n+        List resultListNull1A = q.getResultList();\n+        assertTrue((getLastSQL(sql) != null) && (getLastSQL(sql).contains(\"IS NULL\")));\n+        assertNotNull(resultListNull1A);\n+        assertEquals(1, resultListNull1A.size());\n+        \n+        resetSQL();\n+        q.setParameter(1, null);\n+        List resultListNull1B = q.getResultList();\n+        assertTrue((getLastSQL(sql) != null) && (getLastSQL(sql).contains(\"IS NULL\")));\n+        assertNotNull(resultListNull1B);\n+        assertEquals(1, resultListNull1B.size());\n+        \n+        // Test with non-NULL paramter, SQL should contain the = predicate\n+        resetSQL();\n+        q.setParameter(1, new Long(1));\n+        List resultListNotNull = q.getResultList();\n+        assertTrue((getLastSQL(sql) != null) && !(getLastSQL(sql).contains(\"IS NULL\")));\n+        assertNotNull(resultListNotNull);\n+        assertEquals(2, resultListNotNull.size());      \n+        \n+        // Test again with NULL parameter, SQL should contain a IS NULL predicate\n+        resetSQL();\n+        q.setParameter(1, null);\n+        List resultListNull2 = q.getResultList();\n+        assertTrue((getLastSQL(sql) != null) && (getLastSQL(sql).contains(\"IS NULL\")));\n+        assertNotNull(resultListNull2);\n+        assertEquals(1, resultListNull2.size());\n+    }\n+    \n+    public void testNullParamsWithNumericPosition02() {\n+        // Verify Query SQL Cache is enabled\n+        EntityManagerImpl eml = (EntityManagerImpl) em;\n+        assertTrue(eml.getQuerySQLCache());\n+                      \n+        // Test with NULL parameter, SQL should contain a IS NULL predicate\n+        resetSQL();\n+        Query q1 = em.createQuery(\"SELECT o from QCEntity o WHERE o.amount=?1\");\n+        q1.setParameter(1, null);\n+        List resultListNull1A = q1.getResultList();\n+        assertTrue((getLastSQL(sql) != null) && (getLastSQL(sql).contains(\"IS NULL\")));\n+        assertNotNull(resultListNull1A);\n+        assertEquals(1, resultListNull1A.size());\n+        \n+        resetSQL();\n+        Query q2 = em.createQuery(\"SELECT o from QCEntity o WHERE o.amount=?1\");\n+        q2.setParameter(1, null);\n+        List resultListNull1B = q2.getResultList();\n+        assertTrue((getLastSQL(sql) != null) && (getLastSQL(sql).contains(\"IS NULL\")));\n+        assertNotNull(resultListNull1B);\n+        assertEquals(1, resultListNull1B.size());\n+        \n+        // Test with non-NULL paramter, SQL should contain the = predicate\n+        resetSQL();\n+        Query q3 = em.createQuery(\"SELECT o from QCEntity o WHERE o.amount=?1\");\n+        q3.setParameter(1, new Long(1));\n+        List resultListNotNull = q3.getResultList();\n+        assertTrue((getLastSQL(sql) != null) && !(getLastSQL(sql).contains(\"IS NULL\")));\n+        assertNotNull(resultListNotNull);\n+        assertEquals(2, resultListNotNull.size());      \n+        \n+        // Test again with NULL parameter, SQL should contain a IS NULL predicate\n+        resetSQL();\n+        Query q4 = em.createQuery(\"SELECT o from QCEntity o WHERE o.amount=?1\");\n+        q4.setParameter(1, null);\n+        List resultListNull2 = q4.getResultList();\n+        assertTrue((getLastSQL(sql) != null) && (getLastSQL(sql).contains(\"IS NULL\")));\n+        assertNotNull(resultListNull2);\n+        assertEquals(1, resultListNull2.size());\n+    }\n+    \n+    public void testNullParamsWithNamedQuery01() {\n+        // Verify Query SQL Cache is enabled\n+        EntityManagerImpl eml = (EntityManagerImpl) em;\n+        assertTrue(eml.getQuerySQLCache());        \n+        \n+        Query q = em.createNamedQuery(\"QCEntity.getByAmount\");\n+        \n+        resetSQL();       \n+        q.setParameter(\"amount\", null);\n+        List resultListNull1A = q.getResultList();\n+        assertTrue((getLastSQL(sql) != null) && (getLastSQL(sql).contains(\"IS NULL\")));\n+        assertNotNull(resultListNull1A);\n+        assertEquals(1, resultListNull1A.size());\n+        em.clear();\n+        \n+        // Test with NULL parameter, SQL should contain a IS NULL predicate\n+        resetSQL();\n+        q.setParameter(\"amount\", null);\n+        List resultListNull1B = q.getResultList();\n+        assertTrue((getLastSQL(sql) != null) && (getLastSQL(sql).contains(\"IS NULL\")));\n+        assertNotNull(resultListNull1B);\n+        assertEquals(1, resultListNull1B.size());\n+        em.clear();\n+        \n+        // Test with non-NULL parameter, SQL should contain the = predicate\n+        resetSQL();\n+        q.setParameter(\"amount\", new Long(1));\n+        List resultListNotNull = q.getResultList();\n+        assertTrue((getLastSQL(sql) != null) && !(getLastSQL(sql).contains(\"IS NULL\")));\n+        assertNotNull(resultListNotNull);\n+        assertEquals(2, resultListNotNull.size());\n+        em.clear();\n+        \n+        // Test again with NULL parameter, SQL should contain a IS NULL predicate\n+        resetSQL();\n+        q.setParameter(\"amount\", null);\n+        List resultListNull2 = q.getResultList();\n+        assertTrue((getLastSQL(sql) != null) && (getLastSQL(sql).contains(\"IS NULL\")));\n+        assertNotNull(resultListNull2);\n+        assertEquals(1, resultListNull2.size());\n+        em.clear();\n+    }\n+    \n+    public void testNullParamsWithNamedQuery02() {\n+        // Verify Query SQL Cache is enabled\n+        EntityManagerImpl eml = (EntityManagerImpl) em;\n+        assertTrue(eml.getQuerySQLCache());        \n+        \n+        resetSQL();\n+        Query q1A = em.createNamedQuery(\"QCEntity.getByAmount\");\n+        q1A.setParameter(\"amount\", null);\n+        List resultListNull1A = q1A.getResultList();\n+        assertTrue((getLastSQL(sql) != null) && (getLastSQL(sql).contains(\"IS NULL\")));\n+        assertNotNull(resultListNull1A);\n+        assertEquals(1, resultListNull1A.size());\n+        em.clear();\n+        \n+        // Test with NULL parameter, SQL should contain a IS NULL predicate\n+        resetSQL();\n+        Query q1B = em.createNamedQuery(\"QCEntity.getByAmount\");\n+        q1B.setParameter(\"amount\", null);\n+        List resultListNull1B = q1B.getResultList();\n+        assertTrue((getLastSQL(sql) != null) && (getLastSQL(sql).contains(\"IS NULL\")));\n+        assertNotNull(resultListNull1B);\n+        assertEquals(1, resultListNull1B.size());\n+        em.clear();\n+        \n+        // Test with non-NULL parameter, SQL should contain the = predicate\n+        resetSQL();\n+        Query q2 = em.createNamedQuery(\"QCEntity.getByAmount\");\n+        q2.setParameter(\"amount\", new Long(1));\n+        List resultListNotNull = q2.getResultList();\n+        assertTrue((getLastSQL(sql) != null) && !(getLastSQL(sql).contains(\"IS NULL\")));\n+        assertNotNull(resultListNotNull);\n+        assertEquals(2, resultListNotNull.size());\n+        em.clear();\n+        \n+        // Test again with NULL parameter, SQL should contain a IS NULL predicate\n+        resetSQL();\n+        Query q3 = em.createNamedQuery(\"QCEntity.getByAmount\");\n+        q3.setParameter(\"amount\", null);\n+        List resultListNull2 = q3.getResultList();\n+        assertTrue((getLastSQL(sql) != null) && (getLastSQL(sql).contains(\"IS NULL\")));\n+        assertNotNull(resultListNull2);\n+        assertEquals(1, resultListNull2.size());\n+        em.clear();\n+    }\n+}"},{"sha":"200186946d66543ff1c5055730aec3cd1cb0103f","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/e9a6d6681d59750c438ddf384e23b8f28d971085/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/e9a6d6681d59750c438ddf384e23b8f28d971085/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java?ref=e9a6d6681d59750c438ddf384e23b8f28d971085","patch":"@@ -539,6 +539,15 @@ private boolean preExecute(Map params) {\n             }\n             return false;\n         }\n+        \n+        // Determine if the query has NULL parameters.  If so, then do not use a PreparedQuery from the cache\n+        for (Object val : params.values()) {\n+            if (val == null) {\n+                ignorePreparedQuery();\n+                return false;\n+            }\n+        }\n+        \n         Boolean registered = cache.register(_id, _query, fetch);\n         boolean alreadyCached = (registered == null);\n         String lang = _query.getLanguage();"}]}

