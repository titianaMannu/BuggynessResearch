{"sha":"e9b5c53fd00be984157e131b94a7d5efee720a3c","node_id":"MDY6Q29tbWl0MjA2MzY0OmU5YjVjNTNmZDAwYmU5ODQxNTdlMTMxYjk0YTdkNWVmZWU3MjBhM2M=","commit":{"author":{"name":"Milosz Tylenda","email":"mtylenda@apache.org","date":"2009-09-13T10:02:01Z"},"committer":{"name":"Milosz Tylenda","email":"mtylenda@apache.org","date":"2009-09-13T10:02:01Z"},"message":"OPENJPA-1153: Speed tests up by using only needed entities rather than all entities from persistence.xml\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@814295 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7a6885d0cf2e11cb52309a1c64f1f8b480416ded","url":"https://api.github.com/repos/apache/openjpa/git/trees/7a6885d0cf2e11cb52309a1c64f1f8b480416ded"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/e9b5c53fd00be984157e131b94a7d5efee720a3c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/e9b5c53fd00be984157e131b94a7d5efee720a3c","html_url":"https://github.com/apache/openjpa/commit/e9b5c53fd00be984157e131b94a7d5efee720a3c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/e9b5c53fd00be984157e131b94a7d5efee720a3c/comments","author":null,"committer":null,"parents":[{"sha":"558446dfe975d67e530e8ec35df976d605d35e0a","url":"https://api.github.com/repos/apache/openjpa/commits/558446dfe975d67e530e8ec35df976d605d35e0a","html_url":"https://github.com/apache/openjpa/commit/558446dfe975d67e530e8ec35df976d605d35e0a"}],"stats":{"total":83,"additions":54,"deletions":29},"files":[{"sha":"85832a883bf87728931c3142a31f606fbb1b2860","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/utils/AbstractTestCase.java","status":"modified","additions":32,"deletions":4,"changes":36,"blob_url":"https://github.com/apache/openjpa/blob/e9b5c53fd00be984157e131b94a7d5efee720a3c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/utils/AbstractTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/e9b5c53fd00be984157e131b94a7d5efee720a3c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/utils/AbstractTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/utils/AbstractTestCase.java?ref=e9b5c53fd00be984157e131b94a7d5efee720a3c","patch":"@@ -67,6 +67,7 @@\n import java.util.Map;\n import java.util.NoSuchElementException;\n import java.util.StringTokenizer;\n+import java.util.Map.Entry;\n \n import javax.management.IntrospectionException;\n import javax.persistence.EntityManager;\n@@ -93,6 +94,7 @@\n     private Map<Map,OpenJPAEntityManagerFactory> emfs =\n         new HashMap<Map,OpenJPAEntityManagerFactory>();\n     private OpenJPAEntityManager currentEntityManager;\n+    private Object[] props;\n \n     protected enum Platform {\n         EMPRESS,\n@@ -118,6 +120,18 @@ public AbstractTestCase(String name, String s) {\n         persistenceXmlResource = computePersistenceXmlResource(s);\n     }\n \n+    /**\n+     * Use the given persistent types during the test.\n+     * \n+     * @param props\n+     *            list of persistent types used in testing and/or configuration values in the form\n+     *            key,value,key,value...\n+     */\n+    protected void setUp(Object... props) throws Exception {\n+        super.setUp();\n+        this.props = props;\n+    }\n+\n     public void tearDown() throws Exception {\n         try {\n             super.tearDown();\n@@ -194,11 +208,25 @@ protected OpenJPAEntityManagerFactory getEmf(Map map) {\n         addProperties(map);\n \n         OpenJPAEntityManagerFactory emf = emfs.get(map);\n-        if (emf == null) {\n-            emf = OpenJPAPersistence.createEntityManagerFactory(\n-                \"TestConv\", persistenceXmlResource, map);\n-            emfs.put(map, emf);\n+        if (emf != null) {\n+            return emf;\n+        }\n+\n+        if (props != null) {\n+            // Join properties passed in setUp (usually entities) with the given map and use them to create EMF.\n+            Object[] propsAndMap = new Object[props.length + map.size() * 2];\n+            System.arraycopy(props, 0, propsAndMap, 0, props.length);\n+            int i = props.length;\n+            for (Object o : map.entrySet()) {\n+                Entry mapEntry = (Entry) o;\n+                propsAndMap[i++] = mapEntry.getKey();\n+                propsAndMap[i++] = mapEntry.getValue();\n+            }\n+            emf = createEMF(propsAndMap);\n+        } else {\n+            emf = OpenJPAPersistence.createEntityManagerFactory(\"TestConv\", persistenceXmlResource, map);\n         }\n+        emfs.put(map, emf);\n         return emf;\n     }\n "},{"sha":"8aa4186273862bcb4343d73d55f301d5acc1a016","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestCalendarFields.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/e9b5c53fd00be984157e131b94a7d5efee720a3c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestCalendarFields.java","raw_url":"https://github.com/apache/openjpa/raw/e9b5c53fd00be984157e131b94a7d5efee720a3c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestCalendarFields.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestCalendarFields.java?ref=e9b5c53fd00be984157e131b94a7d5efee720a3c","patch":"@@ -48,8 +48,8 @@ public TestCalendarFields(String name) {\n         super(name);\n     }\n \n-    public void setUp() {\n-        deleteAll(CalendarFields.class);\n+    public void setUp() throws Exception {\n+        super.setUp(CalendarFields.class);\n     }\n \n     public void testFieldDefaultTimeZone() {\n@@ -67,7 +67,7 @@ public void testFieldDefaultTimeZone() {\n         endEm(pm);\n \n         pm = getPM();\n-        cal = (CalendarFields) pm.find(CalendarFields.class, id);\n+        cal = pm.find(CalendarFields.class, id);\n         assertEquals(TimeZone.getTimeZone(\"Asia/Singapore\"),\n             cal.getSingapore().getTimeZone());\n         endEm(pm);\n@@ -90,9 +90,9 @@ public void testTimeZoneEquals() {\n         endEm(pm);\n \n         pm = getPM();\n-        c2 = (CalendarFields) pm.find(CalendarFields.class, id2);\n+        c2 = pm.find(CalendarFields.class, id2);\n         assertTimeZonesEquals(c1, c2);\n-        assertTimeZonesEquals(c1, (CalendarFields) pm.detachCopy(c2));\n+        assertTimeZonesEquals(c1, pm.detachCopy(c2));\n         endEm(pm);\n     }\n "},{"sha":"f80d70972221690ea52a87b16fb744b025d12de6","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestCheckConsistency.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/e9b5c53fd00be984157e131b94a7d5efee720a3c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestCheckConsistency.java","raw_url":"https://github.com/apache/openjpa/raw/e9b5c53fd00be984157e131b94a7d5efee720a3c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestCheckConsistency.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestCheckConsistency.java?ref=e9b5c53fd00be984157e131b94a7d5efee720a3c","patch":"@@ -45,8 +45,8 @@ public TestCheckConsistency(String name) {\n         super(name);\n     }\n \n-    public void setUp() {\n-        deleteAll(RuntimeTest1.class);\n+    public void setUp() throws Exception {\n+        super.setUp(RuntimeTest1.class);\n \n         RuntimeTest1 pc = new RuntimeTest1();\n         pc.setIntField(1);\n@@ -61,7 +61,7 @@ public void testConsistentDatastoreTransaction() {\n         pm.validateChanges();        // no-op outside trans\n         startTx(pm);\n \n-        RuntimeTest1 pc = (RuntimeTest1) pm.find(RuntimeTest1.class, _oid);\n+        RuntimeTest1 pc = pm.find(RuntimeTest1.class, _oid);\n         pc.setIntField1(100);\n \n         RuntimeTest1 npc = new RuntimeTest1();\n@@ -89,7 +89,7 @@ public void testConsistentDatastoreTransactionWithRollback() {\n         pm.validateChanges();        // no-op outside trans\n         startTx(pm);\n \n-        RuntimeTest1 pc = (RuntimeTest1) pm.find(RuntimeTest1.class, _oid);\n+        RuntimeTest1 pc = pm.find(RuntimeTest1.class, _oid);\n         pc.setIntField1(100);\n \n         RuntimeTest1 npc = new RuntimeTest1();\n@@ -112,7 +112,7 @@ public void testConsistentDatastoreTransactionWithRollback() {\n         pm = getPM();\n         try {\n             RuntimeTest1 temp =\n-                (RuntimeTest1) pm.find(RuntimeTest1.class, noid);\n+                pm.find(RuntimeTest1.class, noid);\n             fail(\"Object should not exist.\" + temp.getIntField() + \"::\" +\n                 temp.getIntField1());\n         } catch (Exception jonfe) {\n@@ -176,7 +176,7 @@ public void testConsistentOptimisticTransaction() {\n         startTx(pm);\n         boolean hasConn = hasConnection(pm);\n \n-        RuntimeTest1 pc = (RuntimeTest1) pm.find(RuntimeTest1.class, _oid);\n+        RuntimeTest1 pc = pm.find(RuntimeTest1.class, _oid);\n         pc.setIntField1(100);\n \n         RuntimeTest1 npc = new RuntimeTest1();\n@@ -212,7 +212,7 @@ public void testConsistentOptimisticTransactionWithRollback() {\n         startTx(pm);\n         boolean hasConn = hasConnection(pm);\n \n-        RuntimeTest1 pc = (RuntimeTest1) pm.find(RuntimeTest1.class, _oid);\n+        RuntimeTest1 pc = pm.find(RuntimeTest1.class, _oid);\n         pc.setIntField1(100);\n \n         RuntimeTest1 npc = new RuntimeTest1();\n@@ -238,7 +238,7 @@ public void testConsistentOptimisticTransactionWithRollback() {\n         pm = getPM();\n         try {\n             RuntimeTest1 temp =\n-                (RuntimeTest1) pm.find(RuntimeTest1.class, noid);\n+                pm.find(RuntimeTest1.class, noid);\n \n             fail(\"Object should not exist.\" + temp.getIntField() + \"::\" +\n                 temp.getIntField1());"},{"sha":"419bd3015a8a0911b94ec21524095470ceacb9b1","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestClassStringConstructor.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/e9b5c53fd00be984157e131b94a7d5efee720a3c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestClassStringConstructor.java","raw_url":"https://github.com/apache/openjpa/raw/e9b5c53fd00be984157e131b94a7d5efee720a3c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestClassStringConstructor.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestClassStringConstructor.java?ref=e9b5c53fd00be984157e131b94a7d5efee720a3c","patch":"@@ -41,8 +41,8 @@ public TestClassStringConstructor(String name) {\n         super(name);\n     }\n \n-    public void setUp() {\n-        deleteAll(AppIdClassString.class);\n+    public void setUp() throws Exception {\n+        super.setUp(AppIdClassString.class);\n     }\n \n     public void testConstructor() {"},{"sha":"37aaba46b0d72c5fa3dd8427a441a29ba24a8967","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestDateQueries.java","status":"modified","additions":1,"deletions":4,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/e9b5c53fd00be984157e131b94a7d5efee720a3c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestDateQueries.java","raw_url":"https://github.com/apache/openjpa/raw/e9b5c53fd00be984157e131b94a7d5efee720a3c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestDateQueries.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestDateQueries.java?ref=e9b5c53fd00be984157e131b94a7d5efee720a3c","patch":"@@ -60,7 +60,7 @@ public TestDateQueries(String name) {\n \n     public void setUp()\n         throws Exception {\n-        super.setUp();\n+        super.setUp(AllFieldTypesTest.class);\n \n         SimpleDateFormat sdf = new SimpleDateFormat(\"MMMMM dd, yyyy\",\n             Locale.US);\n@@ -69,9 +69,6 @@ public void setUp()\n         _after = sdf.parse(\"April 27, 1978\");\n         _pm = getPM();\n \n-        // delete all existing instances\n-        deleteAll(AllFieldTypesTest.class);\n-\n         // create some instances to query on\n         startTx(_pm);\n         AllFieldTypesTest test = new AllFieldTypesTest();"},{"sha":"d2e3d394eb00416a0e61fafb54250f3667e005b9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestExtents.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/e9b5c53fd00be984157e131b94a7d5efee720a3c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestExtents.java","raw_url":"https://github.com/apache/openjpa/raw/e9b5c53fd00be984157e131b94a7d5efee720a3c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestExtents.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestExtents.java?ref=e9b5c53fd00be984157e131b94a7d5efee720a3c","patch":"@@ -52,8 +52,8 @@ public TestExtents(String name) {\n         super(name);\n     }\n \n-    public void setUp() {\n-        deleteAll(RuntimeTest1.class);\n+    public void setUp() throws Exception {\n+        super.setUp(RuntimeTest1.class, RuntimeTest2.class);\n \n         OpenJPAEntityManager pm = getPM();\n         startTx(pm);\n@@ -101,7 +101,7 @@ public void testExtent3() {\n \n     public void testExtent4() {\n         OpenJPAEntityManager pm = getPM();\n-        Extent ext = (Extent) pm.createExtent(RuntimeTest1.class, true);\n+        Extent ext = pm.createExtent(RuntimeTest1.class, true);\n \n         List all = new LinkedList();\n         for (Iterator i = ext.iterator(); i.hasNext();)"},{"sha":"30b67b0a79378651f9a584f5e13c5961f161add2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestExtents2.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/e9b5c53fd00be984157e131b94a7d5efee720a3c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestExtents2.java","raw_url":"https://github.com/apache/openjpa/raw/e9b5c53fd00be984157e131b94a7d5efee720a3c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestExtents2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestExtents2.java?ref=e9b5c53fd00be984157e131b94a7d5efee720a3c","patch":"@@ -54,8 +54,8 @@ public TestExtents2(String name) {\n     public TestExtents2() {\n     }\n \n-    public void setUp() {\n-        deleteAll(RuntimeTest1.class);\n+    public void setUp() throws Exception {\n+        super.setUp(RuntimeTest1.class, RuntimeTest2.class, RuntimeTest3.class);\n \n         RuntimeTest1 test1 = new RuntimeTest1();\n         test1.setIntField(1);\n@@ -170,7 +170,7 @@ public void testNotContainsNewlyDeleted() {\n         startTx(pm);\n         try {\n             RuntimeTest2 test2 =\n-                (RuntimeTest2) pm.find(RuntimeTest2.class, _oid2);\n+                pm.find(RuntimeTest2.class, _oid2);\n             pm.remove(test2);\n             RuntimeTest1 test1 = new RuntimeTest1();\n             pm.persist(test1);"}]}

