{"sha":"ea1682c42511894999e7f3c155adf8b4d8785c1c","node_id":"MDY6Q29tbWl0MjA2MzY0OmVhMTY4MmM0MjUxMTg5NDk5OWU3ZjNjMTU1YWRmOGI0ZDg3ODVjMWM=","commit":{"author":{"name":"Mark Struberg","email":"struberg@apache.org","date":"2015-06-07T06:50:58Z"},"committer":{"name":"Mark Struberg","email":"struberg@apache.org","date":"2015-06-07T06:50:58Z"},"message":"OPENJPA-2596 schema-delta generation (sqlAction=refresh) drops columns if they have an alternative typeName\n\nsolved by additionally comparing the final column definition end to end\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1683992 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"135d074665912359d8b49fc2ebfc65de78b2c68d","url":"https://api.github.com/repos/apache/openjpa/git/trees/135d074665912359d8b49fc2ebfc65de78b2c68d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ea1682c42511894999e7f3c155adf8b4d8785c1c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ea1682c42511894999e7f3c155adf8b4d8785c1c","html_url":"https://github.com/apache/openjpa/commit/ea1682c42511894999e7f3c155adf8b4d8785c1c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ea1682c42511894999e7f3c155adf8b4d8785c1c/comments","author":{"login":"struberg","id":79310,"node_id":"MDQ6VXNlcjc5MzEw","avatar_url":"https://avatars.githubusercontent.com/u/79310?v=4","gravatar_id":"","url":"https://api.github.com/users/struberg","html_url":"https://github.com/struberg","followers_url":"https://api.github.com/users/struberg/followers","following_url":"https://api.github.com/users/struberg/following{/other_user}","gists_url":"https://api.github.com/users/struberg/gists{/gist_id}","starred_url":"https://api.github.com/users/struberg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/struberg/subscriptions","organizations_url":"https://api.github.com/users/struberg/orgs","repos_url":"https://api.github.com/users/struberg/repos","events_url":"https://api.github.com/users/struberg/events{/privacy}","received_events_url":"https://api.github.com/users/struberg/received_events","type":"User","site_admin":false},"committer":{"login":"struberg","id":79310,"node_id":"MDQ6VXNlcjc5MzEw","avatar_url":"https://avatars.githubusercontent.com/u/79310?v=4","gravatar_id":"","url":"https://api.github.com/users/struberg","html_url":"https://github.com/struberg","followers_url":"https://api.github.com/users/struberg/followers","following_url":"https://api.github.com/users/struberg/following{/other_user}","gists_url":"https://api.github.com/users/struberg/gists{/gist_id}","starred_url":"https://api.github.com/users/struberg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/struberg/subscriptions","organizations_url":"https://api.github.com/users/struberg/orgs","repos_url":"https://api.github.com/users/struberg/repos","events_url":"https://api.github.com/users/struberg/events{/privacy}","received_events_url":"https://api.github.com/users/struberg/received_events","type":"User","site_admin":false},"parents":[{"sha":"e38098b03fd0a1c14ded54434aeced44b9fb07cd","url":"https://api.github.com/repos/apache/openjpa/commits/e38098b03fd0a1c14ded54434aeced44b9fb07cd","html_url":"https://github.com/apache/openjpa/commit/e38098b03fd0a1c14ded54434aeced44b9fb07cd"}],"stats":{"total":153,"additions":144,"deletions":9},"files":[{"sha":"6130f5cf70522567c2939df09dcf20fd0894f07c","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Column.java","status":"modified","additions":11,"deletions":4,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/ea1682c42511894999e7f3c155adf8b4d8785c1c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Column.java","raw_url":"https://github.com/apache/openjpa/raw/ea1682c42511894999e7f3c155adf8b4d8785c1c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Column.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Column.java?ref=ea1682c42511894999e7f3c155adf8b4d8785c1c","patch":"@@ -33,6 +33,7 @@\n import org.apache.openjpa.jdbc.identifier.QualifiedDBIdentifier;\n import org.apache.openjpa.jdbc.meta.JavaSQLTypes;\n import org.apache.openjpa.jdbc.meta.VersionStrategy;\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\n import org.apache.openjpa.meta.JavaTypes;\n \n /**\n@@ -634,7 +635,7 @@ public boolean isLob() {\n      * Return true if this column is compatible with the given JDBC type\n      * from {@link Types} and size.\n      */\n-    public boolean isCompatible(int type, String typeName, int size, \n+    public boolean isCompatible(int type, String typeName, int size,\n         int decimals) {\n         if (type == Types.OTHER || getType() == Types.OTHER)\n             return true;\n@@ -723,7 +724,7 @@ public boolean isCompatible(int type, String typeName, int size,\n                      default:\n                          return false;\n                 }\n-                \n+\n             default:\n                 return type == getType();\n         }\n@@ -753,7 +754,7 @@ public String getDescription() {\n     /**\n      * Tests compatibility.\n      */\n-    public boolean equalsColumn(Column col) {\n+    public boolean equalsColumn(DBDictionary dict, Column col) {\n         if (col == this)\n             return true;\n         if (col == null)\n@@ -762,8 +763,14 @@ public boolean equalsColumn(Column col) {\n         if (!getQualifiedPath().equals(col.getQualifiedPath()))\n             return false;\n         if (!isCompatible(col.getType(), col.getTypeIdentifier().getName(), col.getSize(),\n-            col.getDecimalDigits()))\n+            col.getDecimalDigits())) {\n+            // do an additional lookup in case the java.sql.Types are different but\n+            // they map to the same representation in the DB\n+            if (dict.getTypeName(this).equals(dict.getTypeName(col))) {\n+                return true;\n+            }\n             return false;\n+        }\n         if (getType() == Types.VARCHAR && getSize() > 0 && col.getSize() > 0\n             && getSize() != col.getSize())\n             return false;"},{"sha":"6d32ed78a7bcee030a1f49dc419d0580c53b95c2","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaTool.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/ea1682c42511894999e7f3c155adf8b4d8785c1c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaTool.java","raw_url":"https://github.com/apache/openjpa/raw/ea1682c42511894999e7f3c155adf8b4d8785c1c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaTool.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaTool.java?ref=ea1682c42511894999e7f3c155adf8b4d8785c1c","patch":"@@ -528,7 +528,7 @@ protected void buildSchema(SchemaGroup db, SchemaGroup repos, boolean considerDa\n                             else\n                                 _log.warn(_loc.get(\"add-col\", cols[k],\n                                         tabs[j]));\n-                        } else if (!cols[k].equalsColumn(col)) {\n+                        } else if (!cols[k].equalsColumn(_dict, col)) {\n                             _log.warn(_loc.get(\"bad-col\", new Object[]{\n                                     col, dbTable, col.getDescription(),\n                                     cols[k].getDescription() }));\n@@ -767,7 +767,7 @@ protected void retain(SchemaGroup db, SchemaGroup repos, boolean tables,\n                 if (reposTable != null) {\n                     for (int k = 0; k < cols.length; k++) {\n                         col = reposTable.getColumn(cols[k].getIdentifier());\n-                        if (col == null || !cols[k].equalsColumn(col)) {\n+                        if (col == null || !cols[k].equalsColumn(_dict, col)) {\n                             if (tabs[j].getColumns().length == 1)\n                                 drops.add(tabs[j]);\n                             else if (dropColumn(cols[k]))"},{"sha":"343906ff7113da68368fdd75e912275cc86460ac","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/TestMappingToolRefresh.java","status":"added","additions":109,"deletions":0,"changes":109,"blob_url":"https://github.com/apache/openjpa/blob/ea1682c42511894999e7f3c155adf8b4d8785c1c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/TestMappingToolRefresh.java","raw_url":"https://github.com/apache/openjpa/raw/ea1682c42511894999e7f3c155adf8b4d8785c1c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/TestMappingToolRefresh.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/TestMappingToolRefresh.java?ref=ea1682c42511894999e7f3c155adf8b4d8785c1c","patch":"@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.openjpa.jdbc.meta;\n+\n+import java.io.StringWriter;\n+import java.net.URL;\n+import java.util.Map;\n+\n+\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.conf.JDBCConfigurationImpl;\n+import org.apache.openjpa.jdbc.schema.SchemaTool;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\n+import org.apache.openjpa.persistence.test.AbstractPersistenceTestCase;\n+import org.junit.Test;\n+\n+/**\n+ * Test that a {@link MappingTool#ACTION_REFRESH} uses the right\n+ * types for new columns and takes any mapping in DBDictionary into account.\n+ */\n+public class TestMappingToolRefresh extends AbstractPersistenceTestCase {\n+\n+    /**\n+     * First we create a schema mapping with boolean representation as CHAR(1).\n+     * Then we create an entry.\n+     * After that we create a diff from the entity to the current DB.\n+     * This should result in an empty diff.\n+     */\n+    @Test\n+    public void testSchemaCreation() throws Exception {\n+        Map<String, Object> emfProps = getPropertiesMap(EntityBool.class,\n+                \"openjpa.jdbc.SynchronizeMappings\",\n+                \"buildSchema(ForeignKeys=true, SchemaAction='add,deleteTableContents')\",\n+                \"openjpa.jdbc.DBDictionary\",\n+                \"(BitTypeName=CHAR(1),BooleanTypeName=CHAR(1),BooleanRepresentation=STRING_10)\");\n+\n+\n+        {\n+            // stage 1. Create the DB and insert a line into it\n+            OpenJPAEntityManagerFactorySPI openjpaEmf = createNamedOpenJPAEMF(\"test\", null, emfProps);\n+\n+            OpenJPAEntityManagerSPI em = openjpaEmf.createEntityManager();\n+            assertNotNull(em);\n+            em.getTransaction().begin();\n+            EntityBool val = new EntityBool();\n+            val.setDummy(true);\n+            em.persist(val);\n+\n+            em.getTransaction().commit();\n+            int id = val.getId();\n+            em.close();\n+\n+            OpenJPAEntityManagerSPI em2 = openjpaEmf.createEntityManager();\n+            assertNotNull(em2);\n+\n+            EntityBool val2 = em2.find(EntityBool.class, id);\n+            assertNotNull(val2);\n+            assertNotEquals(val, val2);\n+\n+            openjpaEmf.close();\n+        }\n+\n+        {\n+            // now we create a 2nd EntityManagerFactory but with a different configuration\n+            // we switch the boolean representation to CHAR(1)\n+            OpenJPAEntityManagerFactorySPI openjpaEmf = createNamedOpenJPAEMF(\"test\", null, emfProps);\n+            String metaDataFactory = openjpaEmf.getConfiguration().getMetaDataFactory();\n+\n+            JDBCConfiguration jdbcConf = new JDBCConfigurationImpl();\n+            jdbcConf.setMetaDataFactory(metaDataFactory);\n+\n+            String[] entityClassFiles = new String[1];\n+            URL entityClassUrl = this.getClass().getClassLoader().\n+                    getResource(EntityBool.class.getName().replace(\".\", \"/\") + \".class\");\n+            entityClassFiles[0] = entityClassUrl.getFile();\n+\n+            MappingTool.Flags flags = new MappingTool.Flags();\n+            flags.mappingWriter = new StringWriter();\n+            flags.action = MappingTool.ACTION_REFRESH;\n+            flags.schemaAction = SchemaTool.ACTION_REFRESH;\n+            flags.sqlWriter = new StringWriter();\n+            flags.schemaWriter = new StringWriter();\n+\n+            boolean ok = MappingTool.run(jdbcConf, entityClassFiles, flags, this.getClass().getClassLoader());\n+            assertTrue(ok);\n+            assertTrue(flags.sqlWriter.toString().isEmpty());\n+\n+\n+        }\n+\n+    }\n+\n+\n+}"},{"sha":"0ad0c1f7c74bfaac9e5f9346e6b4a482723623db","filename":"openjpa-tools/openjpa-maven-plugin/src/main/java/org/apache/openjpa/tools/maven/AbstractOpenJpaMojo.java","status":"modified","additions":22,"deletions":3,"changes":25,"blob_url":"https://github.com/apache/openjpa/blob/ea1682c42511894999e7f3c155adf8b4d8785c1c/openjpa-tools/openjpa-maven-plugin/src/main/java/org/apache/openjpa/tools/maven/AbstractOpenJpaMojo.java","raw_url":"https://github.com/apache/openjpa/raw/ea1682c42511894999e7f3c155adf8b4d8785c1c/openjpa-tools/openjpa-maven-plugin/src/main/java/org/apache/openjpa/tools/maven/AbstractOpenJpaMojo.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-tools/openjpa-maven-plugin/src/main/java/org/apache/openjpa/tools/maven/AbstractOpenJpaMojo.java?ref=ea1682c42511894999e7f3c155adf8b4d8785c1c","patch":"@@ -96,7 +96,17 @@\n      * @parameter\n      */\n     private String persistenceXmlFile;\n-    \n+\n+    /**\n+     * An optional PersistenceUnit name.\n+     * If not specified then OpenJPA will run against 'all anchors'.\n+     * Means it will use all persistenceunits of all persistence.xml files it finds.\n+     *\n+     * @parameter default-value=\"${openjpa.persistenceUnitName}\"\n+     */\n+    private String persistenceUnitName;\n+\n+\n     /**\n      * <p>This setting can be used to override any openjpa.ConnectionDriverName set in the\n      * persistence.xml. It can also be used if the persistence.xml contains no connection\n@@ -259,13 +269,22 @@ protected Options createOptions() throws MojoExecutionException\n         {\n           opts.putAll( toolProperties );\n         }\n-        \n-        if ( persistenceXmlFile != null )\n+\n+        String persistenceXmlResource = \"META-INF/persistence.xml\";\n+\n+        if ( persistenceXmlFile != null && persistenceXmlFile.length() > 0)\n         {\n             fixPersistenceXmlIfNeeded(Thread.currentThread().getContextClassLoader());\n             opts.put( OPTION_PROPERTIES_FILE, persistenceXmlFile );\n             getLog().debug(\"using special persistence XML file: \" + persistenceXmlFile);\n+            persistenceXmlResource = persistenceXmlFile;\n         }\n+\n+        if (persistenceUnitName != null && persistenceUnitName.length() > 0) {\n+            opts.put(OPTION_PROPERTIES, persistenceXmlResource + \"#\" + persistenceUnitName);\n+        }\n+\n+\n         else if (!new File(classes, \"META-INF/persistence.xml\").exists())\n         { // use default but try from classpath\n             persistenceXmlFile = \"META-INF/persistence.xml\";"}]}

