{"sha":"ea2a31be33985dc618c50524f3e6d563e9e218c1","node_id":"MDY6Q29tbWl0MjA2MzY0OmVhMmEzMWJlMzM5ODVkYzYxOGM1MDUyNGYzZTZkNTYzZTllMjE4YzE=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2009-01-12T22:36:52Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2009-01-12T22:36:52Z"},"message":"OPENJPA-843 Unnecessary version update on inverse-side of a 1-m relationship\nCommitting patch provided by Dinkar Rao\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@733944 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"75dc7804bc35728a6528076c613512d4845e2e0a","url":"https://api.github.com/repos/apache/openjpa/git/trees/75dc7804bc35728a6528076c613512d4845e2e0a"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ea2a31be33985dc618c50524f3e6d563e9e218c1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ea2a31be33985dc618c50524f3e6d563e9e218c1","html_url":"https://github.com/apache/openjpa/commit/ea2a31be33985dc618c50524f3e6d563e9e218c1","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ea2a31be33985dc618c50524f3e6d563e9e218c1/comments","author":null,"committer":null,"parents":[{"sha":"d2666e99d46b24ab7f5f235438619583d314dbc8","url":"https://api.github.com/repos/apache/openjpa/commits/d2666e99d46b24ab7f5f235438619583d314dbc8","html_url":"https://github.com/apache/openjpa/commit/d2666e99d46b24ab7f5f235438619583d314dbc8"}],"stats":{"total":763,"additions":755,"deletions":8},"files":[{"sha":"e2a7ffaeb44a33d44a98013c0d032a55c12dd8f1","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/AbstractUpdateManager.java","status":"modified","additions":29,"deletions":8,"changes":37,"blob_url":"https://github.com/apache/openjpa/blob/ea2a31be33985dc618c50524f3e6d563e9e218c1/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/AbstractUpdateManager.java","raw_url":"https://github.com/apache/openjpa/raw/ea2a31be33985dc618c50524f3e6d563e9e218c1/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/AbstractUpdateManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/AbstractUpdateManager.java?ref=ea2a31be33985dc618c50524f3e6d563e9e218c1","patch":"@@ -144,7 +144,7 @@ protected Collection populateRowManager(OpenJPAStateManager sm,\n                     customs);\n             } else if ((dirty = ImplHelper.getUpdateFields(sm)) != null) {\n                 update(sm, dirty, (ClassMapping) sm.getMetaData(), rowMgr,\n-                    store, customs);\n+                    store, customs, false);\n             } else if (sm.isVersionUpdateRequired()) {\n                 updateIndicators(sm, (ClassMapping) sm.getMetaData(), rowMgr,\n                     store, customs, true);\n@@ -268,7 +268,7 @@ private boolean bufferCustomDelete(Strategy strat, OpenJPAStateManager sm,\n      */\n     protected void update(OpenJPAStateManager sm, BitSet dirty,\n         ClassMapping mapping, RowManager rowMgr, JDBCStore store,\n-        Collection customs) throws SQLException {\n+        Collection customs, boolean updateIndicators) throws SQLException {\n         Boolean custom = mapping.isCustomUpdate(sm, store);\n         if (!Boolean.FALSE.equals(custom))\n             mapping.customUpdate(sm, store);\n@@ -279,17 +279,38 @@ protected void update(OpenJPAStateManager sm, BitSet dirty,\n         // detect whether any fields in their rows have been modified\n         FieldMapping[] fields = mapping.getDefinedFieldMappings();\n         for (int i = 0; i < fields.length; i++) {\n-            if (dirty.get(fields[i].getIndex())\n-                && !bufferCustomUpdate(fields[i], sm, store, customs)) {\n-                fields[i].update(sm, store, rowMgr);\n+            FieldMapping field = fields[i];\n+            if (dirty.get(field.getIndex())\n+                && !bufferCustomUpdate(field, sm, store, customs)) {\n+                field.update(sm, store, rowMgr);\n+                if (!updateIndicators) {\n+                    FieldMapping[] inverseFieldMappings =\n+                        field.getInverseMappings();\n+                    if (inverseFieldMappings.length == 0) {\n+                        updateIndicators = true;\n+                    }\n+                    else {\n+                        for (FieldMapping inverseFieldMapping :\n+                            inverseFieldMappings) {\n+                            if (inverseFieldMapping.getMappedBy() != null) {\n+                                updateIndicators = true;\n+                                break;\n+                            }\n+                        }\n+                    }\n+                }\n             }\n         }\n \n         ClassMapping sup = mapping.getJoinablePCSuperclassMapping();\n-        if (sup == null)\n-            updateIndicators(sm, mapping, rowMgr, store, customs, false);\n+        if (sup == null) {\n+            if (updateIndicators) {\n+                updateIndicators(sm, mapping, rowMgr, store, customs, false);\n+            }\n+        }\n         else\n-            update(sm, dirty, sup, rowMgr, store, customs);\n+            update(sm, dirty, sup, rowMgr, store, customs, updateIndicators);\n+\n         mapping.update(sm, store, rowMgr);\n     }\n "},{"sha":"3aaf100f583121badb6addc62b3f4ab00b9cd00f","filename":"openjpa-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/M21UniDepartment.java","status":"added","additions":69,"deletions":0,"changes":69,"blob_url":"https://github.com/apache/openjpa/blob/ea2a31be33985dc618c50524f3e6d563e9e218c1/openjpa-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/M21UniDepartment.java","raw_url":"https://github.com/apache/openjpa/raw/ea2a31be33985dc618c50524f3e6d563e9e218c1/openjpa-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/M21UniDepartment.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/M21UniDepartment.java?ref=ea2a31be33985dc618c50524f3e6d563e9e218c1","patch":"@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.jdbc.kernel;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.Version;\n+\n+@Entity\n+public class M21UniDepartment {\n+\n+\t@Id\t\n+\tprivate String deptid;\n+\t\n+\tString name;\n+\t\n+\tpublic String getDeptid() {\n+        return deptid;\n+    }\n+\n+    public void setDeptid(String deptid) {\n+        this.deptid = deptid;\n+    }\n+\n+    public int getVersion() {\n+        return version;\n+    }\n+\n+    public void setVersion(int version) {\n+        this.version = version;\n+    }\n+\n+    public String getCostCode() {\n+        return costCode;\n+    }\n+\n+    public void setCostCode(String costCode) {\n+        this.costCode = costCode;\n+    }\n+\n+    @Version\n+\tprivate int version;\n+\t\n+\tprivate String costCode;\n+\n+\tpublic String getName() {\n+\t\treturn name;\n+\t}\n+\n+\tpublic void setName(String name) {\n+\t\tthis.name = name;\n+\t}\n+}"},{"sha":"32e6593bdd9df677d97d12251c80480927467be6","filename":"openjpa-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/M21UniEmployee.java","status":"added","additions":81,"deletions":0,"changes":81,"blob_url":"https://github.com/apache/openjpa/blob/ea2a31be33985dc618c50524f3e6d563e9e218c1/openjpa-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/M21UniEmployee.java","raw_url":"https://github.com/apache/openjpa/raw/ea2a31be33985dc618c50524f3e6d563e9e218c1/openjpa-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/M21UniEmployee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/M21UniEmployee.java?ref=ea2a31be33985dc618c50524f3e6d563e9e218c1","patch":"@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.jdbc.kernel;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Version;\n+\n+@Entity\n+public class M21UniEmployee {\n+    \n+    @Id    \n+    public String empid;\n+    \n+    @Version\n+    private int version;\n+    \n+    @ManyToOne\n+    M21UniDepartment department;\n+    \n+    public M21UniDepartment getDepartment() {\n+        return department;\n+    }\n+\n+    public void setDepartment(M21UniDepartment department) {\n+        this.department = department;\n+    }\n+\n+    public String getEmpid() {\n+        return empid;\n+    }\n+\n+    public void setEmpid(String empid) {\n+        this.empid = empid;\n+    }\n+\n+    public int getVersion() {\n+        return version;\n+    }\n+\n+    public void setVersion(int version) {\n+        this.version = version;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String name;\n+    \n+    public float salary;\n+\n+    public float getSalary() {\n+        return salary;\n+    }\n+\n+    public void setSalary(float salary) {\n+        this.salary = salary;\n+    }\n+}"},{"sha":"d87a2ce8e11f89c2361afb06a8da8146dd506685","filename":"openjpa-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/M21UniVersionTest.java","status":"added","additions":187,"deletions":0,"changes":187,"blob_url":"https://github.com/apache/openjpa/blob/ea2a31be33985dc618c50524f3e6d563e9e218c1/openjpa-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/M21UniVersionTest.java","raw_url":"https://github.com/apache/openjpa/raw/ea2a31be33985dc618c50524f3e6d563e9e218c1/openjpa-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/M21UniVersionTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/M21UniVersionTest.java?ref=ea2a31be33985dc618c50524f3e6d563e9e218c1","patch":"@@ -0,0 +1,187 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.jdbc.kernel;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+public class M21UniVersionTest extends SingleEMFTestCase {\n+    public static String SALESID = \"SALES\";\n+    public static String MARKETINGID = \"MARKETING\";\n+    \n+    public static String EMPLOYEE1ID = \"EMPLOYEE1\";\n+    public static String EMPLOYEE2ID = \"EMPLOYEE2\";\n+    public static String EMPLOYEE3ID = \"EMPLOYEE3\";\n+    \n+    \n+    public void setUp() {\n+        setUp(\n+                M21UniDepartment.class, \n+                M21UniEmployee.class,\n+                CLEAR_TABLES);        \n+        \n+        createEntities();        \n+    }\n+    \n+    void createEntities() {        \n+        EntityManager em = emf.createEntityManager();\n+        \n+        em.getTransaction().begin();\n+        M21UniDepartment sales = new M21UniDepartment();\n+        sales.setDeptid(SALESID);        \n+        sales.setName(\"SALES\");\n+        sales.setCostCode(\"1000\");\n+        M21UniDepartment marketing = new M21UniDepartment();\n+        marketing.setDeptid(MARKETINGID);        \n+        marketing.setName(\"marketing\");\n+        marketing.setCostCode(\"3000\");        \n+        \n+        M21UniEmployee e1 = new M21UniEmployee();\n+        M21UniEmployee e2 = new M21UniEmployee();\n+        e1.setEmpid(EMPLOYEE1ID);\n+        e1.setName(\"Gilgamesh_1\");\n+        e2.setEmpid(EMPLOYEE2ID);\n+        e2.setName(\"Enkidu_1\");\n+        e1.setDepartment(sales);\n+        e2.setDepartment(sales);\n+        \n+        em.persist(e1);\n+        em.persist(e2);\n+        em.persist(sales);\n+        em.persist(marketing);\n+        em.flush();\n+        em.getTransaction().commit();\n+        em.close();\n+        \n+    }\n+    \n+    public void testNonRelationalFieldInverseSideVersionUpdate() {\n+        // Change only non-relation fields on Department.\n+        // Version number of Department should be updated.\n+        // Version numbers of Employee should not be updated.\n+        \n+        EntityManager em = emf.createEntityManager();\n+        M21UniDepartment sales = em.find(M21UniDepartment.class, SALESID);\n+        M21UniEmployee e1 = em.find(M21UniEmployee.class, EMPLOYEE1ID);\n+        M21UniEmployee e2 = em.find(M21UniEmployee.class, EMPLOYEE2ID);\n+        \n+        int salesVersionPre = sales.getVersion();\n+        int e1VersionPre = e1.getVersion();\n+        int e2VersionPre = e2.getVersion();\n+        \n+        em.getTransaction().begin();\n+        sales.setCostCode(\"1001\");\n+        em.getTransaction().commit();\n+        em.close();\n+        \n+        em = emf.createEntityManager();\n+        sales = em.find(M21UniDepartment.class, SALESID);\n+        e1 = em.find(M21UniEmployee.class, EMPLOYEE1ID);\n+        e2 = em.find(M21UniEmployee.class, EMPLOYEE2ID);\n+        \n+        int salesVersionPost = sales.getVersion();\n+        int e1VersionPost = e1.getVersion();\n+        int e2VersionPost = e2.getVersion();\n+        em.close();\n+        \n+        assertEquals(salesVersionPost, salesVersionPre + 1);\n+        assertEquals(e1VersionPost, e1VersionPre);\n+        assertEquals(e2VersionPost, e2VersionPre);\n+    }\n+\n+\n+    public void testNonRelationalFieldOwnerSideVersionUpdate() {\n+        // Change only non-relation fields on Employee.\n+        // Version number of Employee should be updated.\n+        // Version number of Department should not change.\n+        EntityManager em = emf.createEntityManager();\n+        M21UniDepartment sales = em.find(M21UniDepartment.class, SALESID);\n+        M21UniEmployee e1 = em.find(M21UniEmployee.class, EMPLOYEE1ID);\n+        M21UniEmployee e2 = em.find(M21UniEmployee.class, EMPLOYEE2ID);\n+        \n+        int salesVersionPre = sales.getVersion();\n+        int e1VersionPre = e1.getVersion();\n+        int e2VersionPre = e2.getVersion();\n+        \n+        em.getTransaction().begin();\n+        e1.setName(\"Gilgamesh_2\");\n+        e2.setName(\"Enkidu_2\");\n+        em.getTransaction().commit();\n+        em.close();\n+        \n+        em = emf.createEntityManager();\n+        sales = em.find(M21UniDepartment.class, SALESID);\n+        e1 = em.find(M21UniEmployee.class, EMPLOYEE1ID);\n+        e2 = em.find(M21UniEmployee.class, EMPLOYEE2ID);\n+        \n+        int salesVersionPost = sales.getVersion();\n+        int e1VersionPost = e1.getVersion();\n+        int e2VersionPost = e2.getVersion();\n+        em.close();\n+        \n+        assertEquals(salesVersionPost, salesVersionPre);\n+        assertEquals(e1VersionPost, e1VersionPre + 1);\n+        assertEquals(e2VersionPost, e2VersionPre + 1);        \n+    }\n+    \n+    public void testRelationalFieldOwnerSideVersionUpdate() {\n+        // Assign employees to a new Department. \n+        // Since there is a unidirectional ManyToOne relationship \n+        // from  Employee to Department, only the Employee\n+        // version should be updated. Department version\n+        // should remain the same as before.\n+        \n+        EntityManager em = emf.createEntityManager();\n+        M21UniDepartment sales = em.find(M21UniDepartment.class, SALESID);\n+        M21UniDepartment marketing = em.find(M21UniDepartment.class, MARKETINGID);\n+        M21UniEmployee e1 = em.find(M21UniEmployee.class, EMPLOYEE1ID);\n+        M21UniEmployee e2 = em.find(M21UniEmployee.class, EMPLOYEE2ID);\n+        \n+        int salesVersionPre = sales.getVersion();\n+        int marketingVersionPre = marketing.getVersion();\n+        int e1VersionPre = e1.getVersion();\n+        int e2VersionPre = e2.getVersion();\n+                \n+        em.getTransaction().begin();        \n+        e1.setDepartment(marketing);\n+        // Don't update e2, so we can check for unchanged\n+        // version number for e2.        \n+        em.getTransaction().commit();\n+        em.close();\n+        \n+        em = emf.createEntityManager();\n+        sales = em.find(M21UniDepartment.class, SALESID);\n+        marketing = em.find(M21UniDepartment.class, MARKETINGID);\n+        e1 = em.find(M21UniEmployee.class, EMPLOYEE1ID);\n+        e2 = em.find(M21UniEmployee.class, EMPLOYEE2ID);\n+        \n+        int salesVersionPost = sales.getVersion();\n+        int marketingVersionPost = marketing.getVersion();\n+        int e1VersionPost = e1.getVersion();\n+        int e2VersionPost = e2.getVersion();\n+                \n+        em.close();\n+        \n+        assertEquals(salesVersionPost, salesVersionPre);\n+        assertEquals(marketingVersionPost, marketingVersionPre);\n+        assertEquals(e1VersionPost, e1VersionPre + 1);\n+        assertEquals(e2VersionPost, e2VersionPre);        \n+    }\n+}"},{"sha":"7470cd5ad9a9e62c87cd6c4caa27144627c0cb77","filename":"openjpa-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/M2MBiDepartment.java","status":"added","additions":87,"deletions":0,"changes":87,"blob_url":"https://github.com/apache/openjpa/blob/ea2a31be33985dc618c50524f3e6d563e9e218c1/openjpa-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/M2MBiDepartment.java","raw_url":"https://github.com/apache/openjpa/raw/ea2a31be33985dc618c50524f3e6d563e9e218c1/openjpa-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/M2MBiDepartment.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/M2MBiDepartment.java?ref=ea2a31be33985dc618c50524f3e6d563e9e218c1","patch":"@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.jdbc.kernel;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.Id;\n+import javax.persistence.ManyToMany;\n+import javax.persistence.Version;\n+\n+@Entity\n+public class M2MBiDepartment {\n+\n+\t@Id\t\n+\tprivate String deptid;\n+\t\n+\tString name;\n+\t\n+\t@ManyToMany(mappedBy=\"departments\", fetch=FetchType.EAGER)\t\n+\tpublic Collection<M2MBiEmployee> employees = new ArrayList<M2MBiEmployee>();\n+\t\n+\t@Version\n+    private int version;\n+\n+    private String costCode;\n+\n+    public Collection<M2MBiEmployee> getEmployees() {\n+        return employees;\n+    }\n+\n+    public void setEmployees(Collection<M2MBiEmployee> employees) {\n+        this.employees = employees;\n+    }\n+\n+    public String getDeptid() {\n+        return deptid;\n+    }\n+\n+    public void setDeptid(String deptid) {\n+        this.deptid = deptid;\n+    }\n+\n+    public int getVersion() {\n+        return version;\n+    }\n+\n+    public void setVersion(int version) {\n+        this.version = version;\n+    }\n+\n+    public String getCostCode() {\n+        return costCode;\n+    }\n+\n+    public void setCostCode(String costCode) {\n+        this.costCode = costCode;\n+    }\n+\n+    public String getName() {\n+\t\treturn name;\n+\t}\n+\n+\tpublic void setName(String name) {\n+\t\tthis.name = name;\n+\t}\n+\t\n+\t\n+}"},{"sha":"1d9151f2f5c31db6fded29ad5d4b7e48c1c2bfef","filename":"openjpa-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/M2MBiEmployee.java","status":"added","additions":86,"deletions":0,"changes":86,"blob_url":"https://github.com/apache/openjpa/blob/ea2a31be33985dc618c50524f3e6d563e9e218c1/openjpa-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/M2MBiEmployee.java","raw_url":"https://github.com/apache/openjpa/raw/ea2a31be33985dc618c50524f3e6d563e9e218c1/openjpa-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/M2MBiEmployee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/M2MBiEmployee.java?ref=ea2a31be33985dc618c50524f3e6d563e9e218c1","patch":"@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.jdbc.kernel;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.Id;\n+import javax.persistence.ManyToMany;\n+import javax.persistence.Version;\n+\n+@Entity\n+public class M2MBiEmployee {\n+    \n+    @Id    \n+    public String empid;\n+    \n+    @Version\n+    private int version;\n+    \n+    @ManyToMany(fetch=FetchType.EAGER)\n+    public Collection<M2MBiDepartment> departments = new ArrayList\n+        <M2MBiDepartment>();\n+    \n+    public String name;\n+\n+    public float salary;\n+\n+    public Collection<M2MBiDepartment> getDepartments() {\n+        return departments;\n+    }\n+\n+    public void setDepartments(Collection<M2MBiDepartment> departments) {\n+        this.departments = departments;\n+    }\n+\n+    public String getEmpid() {\n+        return empid;\n+    }\n+\n+    public void setEmpid(String empid) {\n+        this.empid = empid;\n+    }\n+\n+    public int getVersion() {\n+        return version;\n+    }\n+\n+    public void setVersion(int version) {\n+        this.version = version;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public float getSalary() {\n+        return salary;\n+    }\n+\n+    public void setSalary(float salary) {\n+        this.salary = salary;\n+    }\n+}"},{"sha":"475170f5f621823cba40e51bacc427cfb7d19b49","filename":"openjpa-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/M2MBiVersionTest.java","status":"added","additions":216,"deletions":0,"changes":216,"blob_url":"https://github.com/apache/openjpa/blob/ea2a31be33985dc618c50524f3e6d563e9e218c1/openjpa-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/M2MBiVersionTest.java","raw_url":"https://github.com/apache/openjpa/raw/ea2a31be33985dc618c50524f3e6d563e9e218c1/openjpa-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/M2MBiVersionTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/M2MBiVersionTest.java?ref=ea2a31be33985dc618c50524f3e6d563e9e218c1","patch":"@@ -0,0 +1,216 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.jdbc.kernel;\n+\n+import java.util.Collection;\n+import java.util.Iterator;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+public class M2MBiVersionTest extends SingleEMFTestCase {\n+    public static String SALESID = \"SALES\";\n+    public static String MARKETINGID = \"MARKETING\";\n+    \n+    public static String EMPLOYEE1ID = \"EMPLOYEE1\";\n+    public static String EMPLOYEE2ID = \"EMPLOYEE2\";\n+    public static String EMPLOYEE3ID = \"EMPLOYEE3\";\n+    \n+    public void setUp() {\n+        setUp(\n+                M2MBiDepartment.class, \n+                M2MBiEmployee.class,\n+                CLEAR_TABLES);        \n+        \n+        createEntities();        \n+    }\n+    \n+    void createEntities() {        \n+        EntityManager em = emf.createEntityManager();\n+        \n+        em.getTransaction().begin();\n+        M2MBiDepartment sales = new M2MBiDepartment();\n+        sales.setDeptid(SALESID);        \n+        sales.setName(\"SALES\");\n+        sales.setCostCode(\"1000\");\n+        M2MBiDepartment marketing = new M2MBiDepartment();\n+        marketing.setDeptid(MARKETINGID);        \n+        marketing.setName(\"marketing\");\n+        marketing.setCostCode(\"3000\");        \n+        \n+        M2MBiEmployee e1 = new M2MBiEmployee();\n+        M2MBiEmployee e2 = new M2MBiEmployee();\n+        e1.setEmpid(EMPLOYEE1ID);\n+        e1.setName(\"Gilgamesh_1\");\n+        e2.setEmpid(EMPLOYEE2ID);\n+        e2.setName(\"Enkidu_1\");\n+        \n+        e1.getDepartments().add(sales);\n+        e2.getDepartments().add(sales);\n+        sales.getEmployees().add(e1);\n+        sales.getEmployees().add(e2);\n+        \n+        em.persist(e1);\n+        em.persist(e2);\n+        em.persist(sales);\n+        em.persist(marketing);\n+        em.flush();\n+        em.getTransaction().commit();\n+        em.close();\n+        \n+    }\n+    \n+    public void testNonRelationalFieldInverseSideVersionUpdate() {\n+        EntityManager em = emf.createEntityManager();\n+        \n+        M2MBiDepartment sales = em.find(M2MBiDepartment.class, SALESID);\n+        M2MBiEmployee e1 = em.find(M2MBiEmployee.class, EMPLOYEE1ID);\n+        M2MBiEmployee e2 = em.find(M2MBiEmployee.class, EMPLOYEE2ID);\n+        \n+        int salesVersionPre = sales.getVersion();\n+        int e1VersionPre = e1.getVersion();\n+        int e2VersionPre = e2.getVersion();\n+        \n+        em.getTransaction().begin();        \n+        sales.setCostCode(\"1001\");\n+        em.getTransaction().commit();\n+        em.close();\n+        \n+        em = emf.createEntityManager();\n+        sales = em.find(M2MBiDepartment.class, SALESID);\n+        e1 = em.find(M2MBiEmployee.class, EMPLOYEE1ID);\n+        e2 = em.find(M2MBiEmployee.class, EMPLOYEE2ID);\n+        \n+        int salesVersionPost = sales.getVersion();\n+        int e1VersionPost = e1.getVersion();\n+        int e2VersionPost = e2.getVersion();\n+        em.close();\n+        \n+        assertEquals(salesVersionPost, salesVersionPre + 1);\n+        assertEquals(e1VersionPost, e1VersionPre);\n+        assertEquals(e2VersionPost, e2VersionPre);        \n+    \n+    }\n+    \n+    public void testNonRelationalFieldOwnerSideVersionUpdate() {\n+        // Change only non-relation fields on Employee.\n+        // Version number of Employee should be updated.\n+        // Version number of Department should not change.\n+        EntityManager em = emf.createEntityManager();\n+        M2MBiDepartment sales = em.find(M2MBiDepartment.class, SALESID);\n+        M2MBiEmployee e1 = em.find(M2MBiEmployee.class, EMPLOYEE1ID);\n+        M2MBiEmployee e2 = em.find(M2MBiEmployee.class, EMPLOYEE2ID);\n+        \n+        int salesVersionPre = sales.getVersion();\n+        int e1VersionPre = e1.getVersion();\n+        int e2VersionPre = e2.getVersion();\n+        \n+        em.getTransaction().begin();\n+        e1.setName(\"Gilgamesh_2\");\n+        e2.setName(\"Enkidu_2\");\n+        em.getTransaction().commit();\n+        em.close();\n+        \n+        em = emf.createEntityManager();\n+        sales = em.find(M2MBiDepartment.class, SALESID);\n+        e1 = em.find(M2MBiEmployee.class, EMPLOYEE1ID);\n+        e2 = em.find(M2MBiEmployee.class, EMPLOYEE2ID);\n+        \n+        int salesVersionPost = sales.getVersion();\n+        int e1VersionPost = e1.getVersion();\n+        int e2VersionPost = e2.getVersion();\n+        em.close();\n+        \n+        assertEquals(salesVersionPost, salesVersionPre);\n+        assertEquals(e1VersionPost, e1VersionPre + 1);\n+        assertEquals(e2VersionPost, e2VersionPre + 1);        \n+    }\n+\n+    \n+    public void testRelationalFieldBothSidesVersionUpdate() {\n+        // Move Employee from old Department to new Department.\n+        // Update both sides of the relationship.        \n+        // Since there is a bidirectional ManyToMany relationship \n+        // from  Employee to Department, Employee version should\n+        // be updated. Since neither the new nor the old Departments\n+        // are owners of the reassigned Employee, the Department \n+        // versions should remain the same.\n+        \n+        EntityManager em = emf.createEntityManager();\n+        M2MBiDepartment sales = em.find(M2MBiDepartment.class, SALESID);\n+        M2MBiDepartment marketing = em.find(M2MBiDepartment.class, MARKETINGID);\n+        M2MBiEmployee e1 = em.find(M2MBiEmployee.class, EMPLOYEE1ID);\n+        M2MBiEmployee e2 = em.find(M2MBiEmployee.class, EMPLOYEE2ID);\n+        \n+        int salesVersionPre = sales.getVersion();\n+        int marketingVersionPre = marketing.getVersion();\n+        int e1VersionPre = e1.getVersion();\n+        int e2VersionPre = e2.getVersion();\n+        \n+        em.getTransaction().begin();\n+        // Remove sales from e1\n+        Collection<M2MBiDepartment> e1Departments = e1.getDepartments();\n+        for (Iterator<M2MBiDepartment> dIterator = e1Departments.iterator(); dIterator.hasNext();) {\n+            M2MBiDepartment d = dIterator.next();\n+            if (SALESID.equals(d.getDeptid())) {\n+                dIterator.remove();\n+                break;\n+            }\n+        }\n+        // remove e1 from sales\n+        Collection<M2MBiEmployee> salesEmployees = sales.getEmployees();\n+        for (Iterator<M2MBiEmployee> eIterator = salesEmployees.iterator(); eIterator.hasNext();) {\n+            M2MBiEmployee e = eIterator.next();\n+            if (EMPLOYEE1ID.equals(e.getEmpid())) {\n+                eIterator.remove();\n+                break;\n+            }\n+        }\n+        \n+        // Add marketing to e1\n+        e1.getDepartments().add(marketing);\n+        // Add e1 to marketing\n+        marketing.getEmployees().add(e1);\n+        \n+        em.getTransaction().commit();\n+        em.close();\n+        \n+        em = emf.createEntityManager();\n+        sales = em.find(M2MBiDepartment.class, SALESID);\n+        marketing = em.find(M2MBiDepartment.class, MARKETINGID);\n+        e1 = em.find(M2MBiEmployee.class, EMPLOYEE1ID);\n+        e2 = em.find(M2MBiEmployee.class, EMPLOYEE2ID);\n+        \n+        int salesVersionPost = sales.getVersion();\n+        int marketingVersionPost = marketing.getVersion();\n+        int e1VersionPost = e1.getVersion();\n+        int e2VersionPost = e2.getVersion();\n+        em.close();\n+        \n+        // Since Department is inverse side, there should\n+        // be no version update when its employees are moved.\n+        assertEquals(salesVersionPost, salesVersionPre);\n+        assertEquals(marketingVersionPost, marketingVersionPre);\n+        // Employee e1 was moved to marketing.\n+        assertEquals(e1VersionPost, e1VersionPre + 1);\n+        // Employee e2 was unchanged.\n+        assertEquals(e2VersionPost, e2VersionPre);        \n+    }\n+}"}]}

