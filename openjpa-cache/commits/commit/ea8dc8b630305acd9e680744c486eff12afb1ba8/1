{"sha":"ea8dc8b630305acd9e680744c486eff12afb1ba8","node_id":"MDY6Q29tbWl0MjA2MzY0OmVhOGRjOGI2MzAzMDVhY2Q5ZTY4MDc0NGM0ODZlZmYxMmFmYjFiYTg=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-06-11T16:37:30Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-06-11T16:37:30Z"},"message":"OPENJPA-1692: Add post creation callback to BrokerFactory\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@953760 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b2799a26fcc29d55784c8009dd4fbb8b813ea14a","url":"https://api.github.com/repos/apache/openjpa/git/trees/b2799a26fcc29d55784c8009dd4fbb8b813ea14a"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ea8dc8b630305acd9e680744c486eff12afb1ba8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ea8dc8b630305acd9e680744c486eff12afb1ba8","html_url":"https://github.com/apache/openjpa/commit/ea8dc8b630305acd9e680744c486eff12afb1ba8","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ea8dc8b630305acd9e680744c486eff12afb1ba8/comments","author":null,"committer":null,"parents":[{"sha":"59c7001e09e34a7394eb534ec88bc1975b2120d6","url":"https://api.github.com/repos/apache/openjpa/commits/59c7001e09e34a7394eb534ec88bc1975b2120d6","html_url":"https://github.com/apache/openjpa/commit/59c7001e09e34a7394eb534ec88bc1975b2120d6"}],"stats":{"total":151,"additions":139,"deletions":12},"files":[{"sha":"8f0e156befc3aff6ff5983378cac13f0d6e05ed8","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCBrokerFactory.java","status":"modified","additions":10,"deletions":5,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/ea8dc8b630305acd9e680744c486eff12afb1ba8/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCBrokerFactory.java","raw_url":"https://github.com/apache/openjpa/raw/ea8dc8b630305acd9e680744c486eff12afb1ba8/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCBrokerFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCBrokerFactory.java?ref=ea8dc8b630305acd9e680744c486eff12afb1ba8","patch":"@@ -66,14 +66,14 @@ public static JDBCBrokerFactory newInstance(ConfigurationProvider cp) {\n      * Invoked from {@link Bootstrap#getBrokerFactory}.\n      */\n     public static JDBCBrokerFactory getInstance(ConfigurationProvider cp) {\n-        Map<String,Object> props = cp.getProperties();\n+        Map<String, Object> props = cp.getProperties();\n         Object key = toPoolKey(props);\n-        JDBCBrokerFactory factory = (JDBCBrokerFactory)\n-            getPooledFactoryForKey(key);\n+        JDBCBrokerFactory factory = (JDBCBrokerFactory) getPooledFactoryForKey(key);\n         if (factory != null)\n             return factory;\n-\n-        factory = newInstance(cp);\n+        \n+        // The creation of all BrokerFactories should be driven through Bootstrap.\n+        factory = (JDBCBrokerFactory) Bootstrap.newBrokerFactory(cp, null);\n         pool(key, factory);\n         return factory;\n     }\n@@ -99,6 +99,11 @@ public JDBCBrokerFactory(JDBCConfiguration conf) {\n \n         return props;\n     }\n+    \n+    @Override\n+    public void postCreationCallback() {\n+        super.postCreationCallback();\n+    }\n \n     protected StoreManager newStoreManager() {\n         return new JDBCStoreManager();"},{"sha":"c515edbaa0f3958b0092932078c9e89638da1131","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","status":"modified","additions":27,"deletions":6,"changes":33,"blob_url":"https://github.com/apache/openjpa/blob/ea8dc8b630305acd9e680744c486eff12afb1ba8/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","raw_url":"https://github.com/apache/openjpa/raw/ea8dc8b630305acd9e680744c486eff12afb1ba8/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java?ref=ea8dc8b630305acd9e680744c486eff12afb1ba8","patch":"@@ -19,6 +19,7 @@\n package org.apache.openjpa.kernel;\n \n import java.io.ObjectStreamException;\n+import java.security.AccessController;\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n@@ -55,6 +56,7 @@\n import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.lib.util.Options;\n import org.apache.openjpa.lib.util.concurrent.ConcurrentReferenceHashSet;\n import org.apache.openjpa.meta.MetaDataModes;\n import org.apache.openjpa.meta.MetaDataRepository;\n@@ -151,12 +153,6 @@ protected AbstractBrokerFactory(OpenJPAConfiguration config) {\n         _conf = config;\n         _brokers = newBrokerSet();\n         getPcClassLoaders();\n-        if (config.isInitializeEagerly()) {\n-            newBroker(_conf.getConnectionUserName(), \n-            \t_conf.getConnectionPassword(), \n-            \t_conf.isConnectionFactoryModeManaged(),\n-                _conf.getConnectionRetainModeConstant(), false).close(); \n-        }\n     }\n \n     /**\n@@ -835,5 +831,30 @@ protected DelegatingStoreManager createDelegatingStoreManager() {\n         \n         return dsm;\n     }\n+    \n+    /**\n+     * This method is invoked AFTER a BrokerFactory has been instantiated. \n+     */\n+    public void postCreationCallback() {\n+        if (_conf.isInitializeEagerly()) {\n+            newBroker(_conf.getConnectionUserName(), _conf.getConnectionPassword(),\n+                _conf.isConnectionFactoryModeManaged(), _conf.getConnectionRetainModeConstant(), false).close();\n+        }\n+        // Don't catch any exceptions here because we want to fail-fast if something bad happens when we're preloading.\n+        Options o = Configurations.parseProperties(Configurations.getProperties(_conf.getMetaDataRepository()));\n+        if (MetaDataRepository.needsPreload(o) == true) {\n+            MetaDataRepository mdr = _conf.getMetaDataRepositoryInstance();\n+            mdr.setValidate(MetaDataRepository.VALIDATE_RUNTIME, true);\n+            mdr.setResolve(MetaDataRepository.MODE_MAPPING_INIT, true);\n+\n+            // Load persistent classes and hook in subclasser\n+            loadPersistentTypes((ClassLoader) AccessController.doPrivileged(J2DoPrivHelper\n+                .getContextClassLoaderAction()));\n+            mdr.preload();\n+        }\n+\n+        // Get a DataCacheManager instance up front to avoid threading concerns on first call.\n+        _conf.getDataCacheManagerInstance();\n+    }\n }\n "},{"sha":"21a03e9563df26e0816af5f5e166d069d0e0d5ba","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Bootstrap.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/ea8dc8b630305acd9e680744c486eff12afb1ba8/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Bootstrap.java","raw_url":"https://github.com/apache/openjpa/raw/ea8dc8b630305acd9e680744c486eff12afb1ba8/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Bootstrap.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Bootstrap.java?ref=ea8dc8b630305acd9e680744c486eff12afb1ba8","patch":"@@ -59,7 +59,9 @@ public static BrokerFactory newBrokerFactory() {\n     public static BrokerFactory newBrokerFactory(ConfigurationProvider conf,\n         ClassLoader loader) {\n         try {\n-            return invokeFactory(conf, loader, \"newInstance\");\n+            BrokerFactory factory = invokeFactory(conf, loader, \"newInstance\");\n+            factory.postCreationCallback();\n+            return factory;\n         } catch (InvocationTargetException ite) {\n             Throwable cause = ite.getTargetException();\n             if (cause instanceof OpenJPAException)"},{"sha":"1bd047e1c15ea7216be97ccf33d173304d26d863","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerFactory.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/ea8dc8b630305acd9e680744c486eff12afb1ba8/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerFactory.java","raw_url":"https://github.com/apache/openjpa/raw/ea8dc8b630305acd9e680744c486eff12afb1ba8/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerFactory.java?ref=ea8dc8b630305acd9e680744c486eff12afb1ba8","patch":"@@ -156,4 +156,9 @@ public Broker newBroker(String user, String pass, boolean managed,\n      * with information on when the broker was closed. \n      */\n     public void assertOpen(); \n+    \n+    /**\n+     * This method is invoked AFTER a BrokerFactory has been instantiated. \n+     */\n+    public void postCreationCallback();\n }"},{"sha":"ca15211ecb74ee7ab958f1e7d1f4d1ccf940dc8c","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBrokerFactory.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/ea8dc8b630305acd9e680744c486eff12afb1ba8/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBrokerFactory.java","raw_url":"https://github.com/apache/openjpa/raw/ea8dc8b630305acd9e680744c486eff12afb1ba8/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBrokerFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBrokerFactory.java?ref=ea8dc8b630305acd9e680744c486eff12afb1ba8","patch":"@@ -231,4 +231,12 @@ public void assertOpen() {\n             throw translate(re);\n         }\n     }\n+    \n+    public void postCreationCallback() {\n+        try {\n+            _factory.postCreationCallback();\n+        } catch (RuntimeException re) {\n+            throw translate(re);\n+        }\n+    }\n }"},{"sha":"5e6e21fef09a22708de3ef13e0f4f40d17321633","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestBrokerFactory.java","status":"added","additions":48,"deletions":0,"changes":48,"blob_url":"https://github.com/apache/openjpa/blob/ea8dc8b630305acd9e680744c486eff12afb1ba8/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestBrokerFactory.java","raw_url":"https://github.com/apache/openjpa/raw/ea8dc8b630305acd9e680744c486eff12afb1ba8/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestBrokerFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestBrokerFactory.java?ref=ea8dc8b630305acd9e680744c486eff12afb1ba8","patch":"@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.kernel;\n+\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.conf.JDBCConfigurationImpl;\n+import org.apache.openjpa.jdbc.kernel.JDBCBrokerFactory;\n+import org.apache.openjpa.kernel.StoreManager;\n+import org.apache.openjpa.lib.conf.ConfigurationProvider;\n+\n+@SuppressWarnings(\"serial\")\n+public class TestBrokerFactory extends JDBCBrokerFactory {\n+    JDBCConfiguration _conf;\n+    public TestBrokerFactory(JDBCConfiguration conf) {\n+        super(conf);\n+        _conf = conf;\n+    }\n+    \n+    public static TestBrokerFactory newInstance(ConfigurationProvider cp) {\n+        JDBCConfiguration conf = new JDBCConfigurationImpl();\n+        cp.setInto(conf);\n+        return new TestBrokerFactory(conf);\n+    }   \n+    \n+    @Override\n+    protected StoreManager newStoreManager() {\n+        // Do something with the config.\n+        _conf.getLog();\n+        \n+        return super.newStoreManager();\n+    }\n+}"},{"sha":"858d3066c26dcca82854fdcd43eb54c658a60898","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestInitializeEagerly.java","status":"added","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/apache/openjpa/blob/ea8dc8b630305acd9e680744c486eff12afb1ba8/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestInitializeEagerly.java","raw_url":"https://github.com/apache/openjpa/raw/ea8dc8b630305acd9e680744c486eff12afb1ba8/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestInitializeEagerly.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestInitializeEagerly.java?ref=ea8dc8b630305acd9e680744c486eff12afb1ba8","patch":"@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.kernel;\n+\n+import org.apache.openjpa.persistence.kernel.common.apps.RuntimeTest1;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+public class TestInitializeEagerly extends SingleEMFTestCase {\n+\n+    public void setUp() throws Exception {\n+        super.setUp(RuntimeTest1.class, \n+            \"openjpa.InitializeEagerly\", \"true\", \n+            \"openjpa.BrokerFactory\", TestBrokerFactory.class.getName()\n+            );\n+    }\n+    \n+    // Smoke test to ensure that the EMF is created properly when using this property. \n+    public void test(){\n+        assertNotNull(emf);\n+    }\n+       \n+}"}]}

