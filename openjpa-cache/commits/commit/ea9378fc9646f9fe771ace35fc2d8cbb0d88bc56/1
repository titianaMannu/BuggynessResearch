{"sha":"ea9378fc9646f9fe771ace35fc2d8cbb0d88bc56","node_id":"MDY6Q29tbWl0MjA2MzY0OmVhOTM3OGZjOTY0NmY5ZmU3NzFhY2UzNWZjMmQ4Y2JiMGQ4OGJjNTY=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2008-11-05T22:31:42Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2008-11-05T22:31:42Z"},"message":"OPENJPA-580 - Improve jdbc url mapping to DB dictionary alias.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@711726 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"098bbc1be7b3a88c669b60139037ef85a95d293c","url":"https://api.github.com/repos/apache/openjpa/git/trees/098bbc1be7b3a88c669b60139037ef85a95d293c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ea9378fc9646f9fe771ace35fc2d8cbb0d88bc56","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ea9378fc9646f9fe771ace35fc2d8cbb0d88bc56","html_url":"https://github.com/apache/openjpa/commit/ea9378fc9646f9fe771ace35fc2d8cbb0d88bc56","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ea9378fc9646f9fe771ace35fc2d8cbb0d88bc56/comments","author":null,"committer":null,"parents":[{"sha":"f55dff2069f4a1dc2f27d7e5a9dd126bcc5a2d67","url":"https://api.github.com/repos/apache/openjpa/commits/f55dff2069f4a1dc2f27d7e5a9dd126bcc5a2d67","html_url":"https://github.com/apache/openjpa/commit/f55dff2069f4a1dc2f27d7e5a9dd126bcc5a2d67"}],"stats":{"total":239,"additions":237,"deletions":2},"files":[{"sha":"5e780385e9dc55929b864ce192179344b9f4b177","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionaryFactory.java","status":"modified","additions":34,"deletions":2,"changes":36,"blob_url":"https://github.com/apache/openjpa/blob/ea9378fc9646f9fe771ace35fc2d8cbb0d88bc56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionaryFactory.java","raw_url":"https://github.com/apache/openjpa/raw/ea9378fc9646f9fe771ace35fc2d8cbb0d88bc56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionaryFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionaryFactory.java?ref=ea9378fc9646f9fe771ace35fc2d8cbb0d88bc56","patch":"@@ -75,7 +75,7 @@ public static DBDictionary calculateDBDictionary(JDBCConfiguration conf,\n         String url, String driver, String props) {\n         String dclass = dictionaryClassForString(driver, conf);\n         if (dclass == null)\n-            dclass = dictionaryClassForString(url, conf);\n+            dclass = dictionaryClassForString(getProtocol(url), conf);\n         if (dclass == null)\n             return null;\n         return newDBDictionary(conf, dclass, props);\n@@ -93,7 +93,8 @@ public static DBDictionary newDBDictionary(JDBCConfiguration conf,\n             String dclass = dictionaryClassForString(meta\n                 .getDatabaseProductName(), conf);\n             if (dclass == null)\n-                dclass = dictionaryClassForString(meta.getURL(), conf);\n+                dclass = dictionaryClassForString(getProtocol(meta.getURL()),\n+                    conf);\n             if (dclass == null)\n                 dclass = DBDictionary.class.getName();\n             return newDBDictionary(conf, dclass, props, conn);\n@@ -108,6 +109,37 @@ public static DBDictionary newDBDictionary(JDBCConfiguration conf,\n         }\n     }\n \n+    /*\n+     * Returns the \"jdbc:\" protocol of the url parameter. Looks for the prefix\n+     * string up to the 3rd ':' or the 1st '@', '/' or '\\', whichever comes\n+     * first.\n+     * \n+     * This method is package qualified so that TestDictionaryFactory class can\n+     * access and test this method behavior.\n+     */\n+    static String getProtocol(String url) {\n+        String protocol = null;\n+        if (!StringUtils.isEmpty(url)) {\n+            if (url.startsWith(\"jdbc:\")) {\n+                int colonCount = 1;\n+                int next = \"jdbc:\".length();\n+                int protoEnd = next;\n+                while (colonCount < 3 && next < url.length()) {\n+                    char c = url.charAt(next++);\n+                    if (c == ':') {\n+                        ++colonCount;\n+                        protoEnd = next;\n+                    } else if (c == '@' || c == '/' || c == '\\\\') {\n+                        --next;\n+                        break;\n+                    }\n+                }\n+                protocol = url.substring(0, protoEnd);\n+            }\n+        }\n+        return protocol;\n+    }\n+\n     /**\n      * Create the dictionary using the given class name and properties; the\n      * connection may be null if not supplied to the factory."},{"sha":"cf0ddb212d0d6df8e5b6ec701848a40204916a0a","filename":"openjpa-jdbc/src/test/java/org/apache/openjpa/jdbc/sql/TestDictionaryFactory.java","status":"added","additions":203,"deletions":0,"changes":203,"blob_url":"https://github.com/apache/openjpa/blob/ea9378fc9646f9fe771ace35fc2d8cbb0d88bc56/openjpa-jdbc/src/test/java/org/apache/openjpa/jdbc/sql/TestDictionaryFactory.java","raw_url":"https://github.com/apache/openjpa/raw/ea9378fc9646f9fe771ace35fc2d8cbb0d88bc56/openjpa-jdbc/src/test/java/org/apache/openjpa/jdbc/sql/TestDictionaryFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/test/java/org/apache/openjpa/jdbc/sql/TestDictionaryFactory.java?ref=ea9378fc9646f9fe771ace35fc2d8cbb0d88bc56","patch":"@@ -0,0 +1,203 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.jdbc.sql;\r\n+\r\n+import java.lang.reflect.Method;\r\n+\r\n+import junit.framework.TestCase;\r\n+\r\n+public class TestDictionaryFactory extends TestCase {\r\n+\r\n+    private String[][] testMatrix =  {\r\n+        // Generic url\r\n+        {\"jdbc:mysql:\",                                     \r\n+         \"jdbc:mysql:\" },\r\n+        {\"jdbc:cloudscape:database\",\r\n+         \"jdbc:cloudscape:\" },           \r\n+        {\"jdbc:as400://systemname\",\r\n+         \"jdbc:as400:\" },\r\n+        {\"jdbc:Cache://host:1234/db\",\r\n+         \"jdbc:Cache:\" },\r\n+        {\"jdbc:FrontBase://host.domain.com/mydb\",\r\n+         \"jdbc:FrontBase:\" },\r\n+        {\"jdbc:sqlserver://server\\\\instance:1234;p1=v1\",\r\n+         \"jdbc:sqlserver:\"},\r\n+        {\"jdbc:interbase://win32:3/C:/fire/test.gdb\",\r\n+         \"jdbc:interbase:\"},\r\n+        {\"jdbc:firebirdsql://unix/fire/test.gdb\",\r\n+         \"jdbc:firebirdsql:\"},\r\n+        {\"jdbc:db2://localhost:5000/db2\",\r\n+         \"jdbc:db2:\" },\r\n+         \r\n+        // Oracle - Thin and OCI\r\n+        {\"jdbc:oracle:thin:@host:1234:database_sid\",\r\n+         \"jdbc:oracle:thin:\"},\r\n+        {\"jdbc:oracle:oci://host:port/service\", \r\n+         \"jdbc:oracle:oci:\"},\r\n+        {\"jdbc:oracle:thin:host:1234:sid\",      \r\n+         \"jdbc:oracle:thin:\"},\r\n+        {\"jdbc:oracle:oci:TNSName\",       \r\n+         \"jdbc:oracle:oci:\"},\r\n+         \r\n+        // MS SQLServer 2000 Driver\r\n+        {\"jdbc:microsoft:sqlserver://host:123;dbname=name;usr=u;pwd=p\",\r\n+         \"jdbc:microsoft:sqlserver:\"},\r\n+        // MS SQLServer (Sprinta)\r\n+        {\"jdbc:inetdae7:host:1234?database=DB\", \r\n+         \"jdbc:inetdae7:host:\"},\r\n+        // MS Access\r\n+        {\"jdbc:odbc:Driver=Microsoft Access Driver (*.mdb);DBQ=c:\\\\db_file;\",\r\n+         \"jdbc:odbc:Driver=Microsoft Access Driver (*.mdb);DBQ=c:\"},\r\n+         \r\n+        // jTDS JDBC Driver\r\n+        {\"jdbc:jtds:microsoft:host:1234/database\",          \r\n+         \"jdbc:jtds:microsoft:\"},\r\n+        {\"jdbc:jtds:sqlserver://server:1234/database;p=v1\",\r\n+         \"jdbc:jtds:sqlserver:\"},\r\n+         \r\n+        // mySQL\r\n+        {\"jdbc:mysql://host,failoverhost:1234/database\", \r\n+         \"jdbc:mysql:\"},\r\n+        {\"jdbc:mysql://host1:1,host2:2/database?p1=v1&p2=v2\",\r\n+         \"jdbc:mysql:\"},\r\n+         \r\n+        // PostgreSQL\r\n+        {\"jdbc:postgresql:database\",\r\n+         \"jdbc:postgresql:\"},\r\n+\r\n+        // JBOSS\r\n+        {\"jdbc:AvenirDriver://127.0.0.1:1433/master;uid=sa;pwd=sa\",\r\n+         \"jdbc:AvenirDriver:\"},\r\n+        {\"jdbc:merant:sqlserver://suresh:1433\",\r\n+         \"jdbc:merant:sqlserver:\"},\r\n+        {\"jdbc:JSQLConnect://localhost/database=Master&user=sa&password=sa\",\r\n+         \"jdbc:JSQLConnect:\"},\r\n+        {\"jdbc:weblogic:mssqlserver4:Master@suresh:1433?user=sa&password=sa\",\r\n+         \"jdbc:weblogic:mssqlserver4:\"},\r\n+\r\n+        // SyBase\r\n+        {\"jdbc:sybase:Tds:host:1234?ServiceName=database_name\",  \r\n+         \"jdbc:sybase:Tds:\"},\r\n+          \r\n+        // Hypersonic SQL (in-process)\r\n+        {\"jdbc:hsqldb:file:/opt/db/testdb\",\r\n+         \"jdbc:hsqldb:file:\"},\r\n+        // Hypersonic SQL (in-memory)\r\n+        {\"jdbc:hsqldb:mem:aname\",\r\n+         \"jdbc:hsqldb:mem:\"},\r\n+        //Hypersonic SQL (server)\r\n+        {\"jdbc:hsqldb:database\",\r\n+         \"jdbc:hsqldb:\"},\r\n+        {\"jdbc:hsqldb:hsql://host:1234\",\r\n+         \"jdbc:hsqldb:hsql:\"},\r\n+\r\n+        // Informix\r\n+        {\"jdbc:informix-sqli://host:1234/database:informixserver=dbserver.com\",\r\n+         \"jdbc:informix-sqli:\"},\r\n+\r\n+        // Derby\r\n+        {\"jdbc:derby:net://host:1527/<databaseName\",\r\n+         \"jdbc:derby:net:\"},\r\n+\r\n+        // Cloudscape\r\n+        {\"jdbc:cloudscape:MyDataBase\",\r\n+         \"jdbc:cloudscape:\"},\r\n+\r\n+        // PointBase\r\n+         {\"jdbc:pointbase:embedded:PBPUBLIC\",\r\n+          \"jdbc:pointbase:embedded:\"},\r\n+         {\"jdbc:pointbase:server://host:1234/database\",\r\n+          \"jdbc:pointbase:server:\"},\r\n+\r\n+        // Interbase\r\n+        {\"jdbc:interbase:jndi:LDAP_hostname:1234/db\",\r\n+         \"jdbc:interbase:jndi:\"},\r\n+        \r\n+        // Borland JDataStore\r\n+        {\"jdbc:borland:dsremote://hostName/path/storeName.jds\",\r\n+         \"jdbc:borland:dsremote:\"},\r\n+        {\"jdbc:borland:dslocal:storeName.jds\",\r\n+         \"jdbc:borland:dslocal:\"},\r\n+        \r\n+        // EasySoft\r\n+        {\"jdbc:easysoft://server/datasource:logonuser=user:logonpassword=pwd\",\r\n+         \"jdbc:easysoft:\"},\r\n+         \r\n+        // PointBase\r\n+        {\"jdbc:empress:DATABASE=db\",\r\n+         \"jdbc:empress:\"},\r\n+        {\"jdbc:empress://SERVER=localhost;PORT=6322\",\r\n+         \"jdbc:empress:\"},\r\n+        {\"jdbc:pointbase:embedded:sample\",\r\n+         \"jdbc:pointbase:embedded:\"},\r\n+\r\n+        // Interbase (Java driver) / FireBird\r\n+        {\"jdbc:firebirdsql:host/1234:database\",\r\n+         \"jdbc:firebirdsql:\"},\r\n+        {\"jdbc:firebirdsql:localhost/3050:/firebird/test.gdb\",\r\n+         \"jdbc:firebirdsql:\"},\r\n+        \r\n+        // H2 Database (embedded)\r\n+        {\"jdbc:h2:test\",\r\n+         \"jdbc:h2:\"},\r\n+        // H2 Database (Client Server)\r\n+        {\"jdbc:h2:tcp://localhost:9092/test\",\r\n+         \"jdbc:h2:tcp:\"},\r\n+        // H2 Database (In Memory)\r\n+        {\"jdbc:h2:mem:name;key=value\",\r\n+         \"jdbc:h2:mem:\"},\r\n+        {\"jdbc:h2:file:fileName;key=value\",\r\n+         \"jdbc:h2:file:\"},\r\n+         \r\n+        // Error case\r\n+         {\"file://c:/\",\r\n+          null},\r\n+    };\r\n+    \r\n+    private static Method getProtocol;\r\n+\r\n+    public void setUp() {\r\n+        try {\r\n+            getProtocol = DBDictionaryFactory.class.getDeclaredMethod(\r\n+                \"getProtocol\", String.class);\r\n+        } catch (Exception e) {\r\n+            fail(e.getMessage());\r\n+        }\r\n+    }\r\n+    \r\n+    /**\r\n+     * <p>\r\n+     * Tests calculateDBDictionary for the supported database and validate the\r\n+     * proper dictionary is selected based on the jdbc url.\r\n+     * </p>\r\n+     * \r\n+     * @author Albert Lee\r\n+     */\r\n+    public void testUrl2Dictionary() {\r\n+        for (int i = 0; i < testMatrix.length; ++i) {\r\n+            try {\r\n+                String dbType = (String) getProtocol.invoke(null,\r\n+                    testMatrix[i][0]);\r\n+                assertEquals(dbType, testMatrix[i][1]);\r\n+            } catch (Exception e) {\r\n+                fail(e.getMessage());\r\n+            }\r\n+        }\r\n+    }\r\n+}\r"}]}

