{"sha":"eac9c66b74a1ef21bf3f430ed84f83965bdc3a4f","node_id":"MDY6Q29tbWl0MjA2MzY0OmVhYzljNjZiNzRhMWVmMjFiZjNmNDMwZWQ4NGY4Mzk2NWJkYzNhNGY=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2010-06-18T00:41:16Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2010-06-18T00:41:16Z"},"message":"OPENJPA-1697: A EnumValueHandler strategy along with XmlType annotation incorrectly mapped to XmlType in create table DDL\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@955805 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e5f47182feea92d659e517928312f01066df4500","url":"https://api.github.com/repos/apache/openjpa/git/trees/e5f47182feea92d659e517928312f01066df4500"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/eac9c66b74a1ef21bf3f430ed84f83965bdc3a4f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/eac9c66b74a1ef21bf3f430ed84f83965bdc3a4f","html_url":"https://github.com/apache/openjpa/commit/eac9c66b74a1ef21bf3f430ed84f83965bdc3a4f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/eac9c66b74a1ef21bf3f430ed84f83965bdc3a4f/comments","author":null,"committer":null,"parents":[{"sha":"dbaf9fa67e33844e0b5379a01cc70020fd82f87f","url":"https://api.github.com/repos/apache/openjpa/commits/dbaf9fa67e33844e0b5379a01cc70020fd82f87f","html_url":"https://github.com/apache/openjpa/commit/dbaf9fa67e33844e0b5379a01cc70020fd82f87f"}],"stats":{"total":128,"additions":122,"deletions":6},"files":[{"sha":"b8f79c6bad7e96a3b62806950f8f3f3d4cbaec5e","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java","status":"modified","additions":5,"deletions":6,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/eac9c66b74a1ef21bf3f430ed84f83965bdc3a4f/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java","raw_url":"https://github.com/apache/openjpa/raw/eac9c66b74a1ef21bf3f430ed84f83965bdc3a4f/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java?ref=eac9c66b74a1ef21bf3f430ed84f83965bdc3a4f","patch":"@@ -1534,11 +1534,11 @@ protected void parseColumns(FieldMapping fm,\n             throw new MetaDataException(_loc.get(\"num-cols-mismatch\", fm,\n                 String.valueOf(cols.size()), String.valueOf(pcols.length)));\n \n-        // cache the JAXB XmlType class if it is present so we do not\n+        // cache the JAXB XmlRootElement class if it is present so we do not\n         // have a hard-wired dependency on JAXB here\n-        Class xmlTypeClass = null;\n+        Class xmlRootElementClass = null;\n         try {\n-            xmlTypeClass = Class.forName(\"javax.xml.bind.annotation.XmlType\");\n+            xmlRootElementClass = Class.forName(\"javax.xml.bind.annotation.XmlRootElement\");\n         } catch (Exception e) {\n         }\n \n@@ -1552,12 +1552,11 @@ protected void parseColumns(FieldMapping fm,\n                     cols = new ArrayList<Column>(pcols.length);\n                 cols.add(newColumn(pcols[i], delimit()));\n             }\n-            \n-            if (xmlTypeClass != null\n+            if (xmlRootElementClass != null\n                 && StringUtils.isEmpty(pcols[i].columnDefinition())\n                 && (AccessController.doPrivileged(J2DoPrivHelper\n                     .isAnnotationPresentAction(fm.getDeclaredType(),\n-                        xmlTypeClass))).booleanValue()) {\n+                        xmlRootElementClass))).booleanValue()) {\n                 DBDictionary dict = ((MappingRepository) getRepository())\n                     .getDBDictionary();\n                 if (dict.supportsXMLColumn)"},{"sha":"d6bf8d64dc89ba89ca072287d652e85de6940e32","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/Authority.java","status":"added","additions":79,"deletions":0,"changes":79,"blob_url":"https://github.com/apache/openjpa/blob/eac9c66b74a1ef21bf3f430ed84f83965bdc3a4f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/Authority.java","raw_url":"https://github.com/apache/openjpa/raw/eac9c66b74a1ef21bf3f430ed84f83965bdc3a4f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/Authority.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/Authority.java?ref=eac9c66b74a1ef21bf3f430ed84f83965bdc3a4f","patch":"@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.mapping;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.NamedQueries;\n+import javax.persistence.NamedQuery;\n+import javax.persistence.Table;\n+import javax.xml.bind.annotation.XmlEnum;\n+import javax.xml.bind.annotation.XmlType;\n+\n+import org.apache.openjpa.persistence.Persistent;\n+import org.apache.openjpa.persistence.jdbc.Strategy;\n+\n+@Entity\n+@Table(name=\"authority\")\n+@NamedQueries( {\n+       @NamedQuery(name = \"AllIonAuthorities\", query = \"SELECT x FROM IonAuthority x\")\n+})\n+public class Authority {\n+@Id\n+       @GeneratedValue(strategy = GenerationType.AUTO)\n+       @Column(name = \"ID\")\n+       private Integer id;\n+\n+       @Enumerated( EnumType.STRING )\n+       @Column(nullable=false, length=128, updatable=true, insertable=true)\n+       @Persistent\n+       @Strategy(\"org.apache.openjpa.jdbc.meta.strats.EnumValueHandler\")\n+       private AuthorityValues authorityName;\n+\n+       \n+       @XmlType(name = \"IonAuthorityValues\")\n+       @XmlEnum\n+       public enum AuthorityValues {\n+\n+          AUTH1,\n+          AUTH2,\n+       }\n+\n+       public Authority() {}\n+       public Authority(AuthorityValues auth) {\n+           authorityName = auth;\n+       }\n+\n+       public Integer getId() {\n+           return id;\n+       }\n+\n+       public void setAuthorityName(AuthorityValues auth) {\n+           authorityName = auth;\n+       }\n+       \n+       public AuthorityValues getAuthorityName() {\n+           return authorityName;\n+       }\n+}"},{"sha":"0aada7628c3019d9ebdca0a4e6fef537d825d3d7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/TestEnumXmlTypeMapping.java","status":"added","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/apache/openjpa/blob/eac9c66b74a1ef21bf3f430ed84f83965bdc3a4f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/TestEnumXmlTypeMapping.java","raw_url":"https://github.com/apache/openjpa/raw/eac9c66b74a1ef21bf3f430ed84f83965bdc3a4f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/TestEnumXmlTypeMapping.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/TestEnumXmlTypeMapping.java?ref=eac9c66b74a1ef21bf3f430ed84f83965bdc3a4f","patch":"@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.mapping;\n+\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\n+import org.apache.openjpa.jdbc.meta.FieldMapping;\n+import org.apache.openjpa.jdbc.schema.Column;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+public class TestEnumXmlTypeMapping extends SingleEMFTestCase {\n+    \n+    public void setUp() { \n+        setUp(Authority.class, DROP_TABLES);\n+    }\n+    \n+    public void testEnumXmlType() {\n+        ClassMapping mapping = getMapping(Authority.class);\n+        FieldMapping fm = mapping.getFieldMapping(\"authorityName\");\n+        Column[] cols = fm.getColumns();\n+        assertFalse(cols[0].isXML());\n+    }\n+}"}]}

