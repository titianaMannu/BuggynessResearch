{"sha":"ead275493e524fba1e978ae76a7ade4e90d54f2f","node_id":"MDY6Q29tbWl0MjA2MzY0OmVhZDI3NTQ5M2U1MjRmYmExZTk3OGFlNzZhN2FkZTRlOTBkNTRmMmY=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-11-13T23:17:23Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-11-13T23:17:23Z"},"message":"OPENJPA-755 OpenJPA thows EntityExistsException trying persist a preexisting, detached entity\nApply fix to 1.2.x branch\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@713858 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d2751f00728c189af7120a0d3d71f4f2a1c68339","url":"https://api.github.com/repos/apache/openjpa/git/trees/d2751f00728c189af7120a0d3d71f4f2a1c68339"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ead275493e524fba1e978ae76a7ade4e90d54f2f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ead275493e524fba1e978ae76a7ade4e90d54f2f","html_url":"https://github.com/apache/openjpa/commit/ead275493e524fba1e978ae76a7ade4e90d54f2f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ead275493e524fba1e978ae76a7ade4e90d54f2f/comments","author":null,"committer":null,"parents":[{"sha":"dfb68d6bb39e6ed7699c41ef4a9c00fc0e859e1c","url":"https://api.github.com/repos/apache/openjpa/commits/dfb68d6bb39e6ed7699c41ef4a9c00fc0e859e1c","html_url":"https://github.com/apache/openjpa/commit/dfb68d6bb39e6ed7699c41ef4a9c00fc0e859e1c"}],"stats":{"total":282,"additions":282,"deletions":0},"files":[{"sha":"5ea1fc677b10299319bc26cf0480946510a5a86b","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/SingleFieldManager.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/ead275493e524fba1e978ae76a7ade4e90d54f2f/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/SingleFieldManager.java","raw_url":"https://github.com/apache/openjpa/raw/ead275493e524fba1e978ae76a7ade4e90d54f2f/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/SingleFieldManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/SingleFieldManager.java?ref=ead275493e524fba1e978ae76a7ade4e90d54f2f","patch":"@@ -744,6 +744,7 @@ private void preFlushPC(ValueMetaData vmd, Object obj, boolean logical,\n             return;\n \n         OpenJPAStateManager sm;\n+\n         if (vmd.getCascadePersist() == ValueMetaData.CASCADE_NONE) {\n             if (!_broker.isDetachedNew() && _broker.isDetached(obj))\n                 return; // allow but ignore\n@@ -754,6 +755,10 @@ private void preFlushPC(ValueMetaData vmd, Object obj, boolean logical,\n                     _loc.get(\"cant-cascade-persist\", vmd))\n                     .setFailedObject(obj);\n         } else {\n+            if (vmd.getCascadePersist() == ValueMetaData.CASCADE_IMMEDIATE) {\n+                if (!_broker.isDetachedNew() && _broker.isDetached(obj))\n+                    return; // allow but ignore\n+            }        \t\n             sm = _broker.getStateManager(obj);\n             if (sm == null || !sm.isProvisional()) { \n                 sm = _broker.persist(obj, null, true, call);"},{"sha":"dcada8c8675ffabf398814d3e5562896037b4f78","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/TestDetachedEntityCascadePersist.java","status":"added","additions":74,"deletions":0,"changes":74,"blob_url":"https://github.com/apache/openjpa/blob/ead275493e524fba1e978ae76a7ade4e90d54f2f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/TestDetachedEntityCascadePersist.java","raw_url":"https://github.com/apache/openjpa/raw/ead275493e524fba1e978ae76a7ade4e90d54f2f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/TestDetachedEntityCascadePersist.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/TestDetachedEntityCascadePersist.java?ref=ead275493e524fba1e978ae76a7ade4e90d54f2f","patch":"@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.detachment;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.detachment.featureSelection.DMCustomer;\n+import org.apache.openjpa.persistence.detachment.featureSelection.DMCustomerInventory;\n+import org.apache.openjpa.persistence.detachment.featureSelection.DMItem;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+public class TestDetachedEntityCascadePersist extends SingleEMFTestCase {\n+\n+    public void setUp() {\t\t\n+        setUp(\n+            CLEAR_TABLES,\n+            DMCustomer.class,\n+            DMItem.class,\n+            DMCustomerInventory.class\n+        );\n+    }\n+\n+    public void testDetachedEntityCascadePersist() {\n+        // Persist an item for finding later \n+        EntityManager em = emf.createEntityManager();\n+        DMItem item = new DMItem(); \n+        item.setName(\"openjpa\");\n+        item.setPrice(0.0);\n+        em.getTransaction().begin();        \n+        em.persist(item);\n+        // Persist a customer for finding later\n+        DMCustomer customer = new DMCustomer();\n+        customer.setFirstName(\"Open\");\n+        customer.setLastName(\"JPA\");\n+        em.persist(customer);\n+        em.getTransaction().commit();\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        DMItem itemDetached = em.find(DMItem.class, item.getId());\n+        em.close();        \n+        em = emf.createEntityManager();\n+        DMCustomer customer2 = em.find(DMCustomer.class, customer.getId());       \n+        DMCustomerInventory customerInventory = new DMCustomerInventory();\n+        customerInventory.setCustomer(customer2);\n+        customerInventory.setItem(itemDetached);\n+        customerInventory.setQuantity(20);\n+        customer2.getCustomerInventories().add(customerInventory);\n+        em.getTransaction().begin();\n+        em.merge(customer2);        \n+        // At this point, itemDetached is still detached.\n+        // The following commit causes a persist on CustomerInventory,\n+        // which leads to a cascade-persist on the detached item.\n+        // This cascade-persist on a detached item should be ignored, \n+        // instead of a EntityExistsException being thrown\n+        em.getTransaction().commit();\n+    }\n+}"},{"sha":"94c216f4c964f789df41427aa2b435da1292f603","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/featureSelection/DMCustomer.java","status":"added","additions":77,"deletions":0,"changes":77,"blob_url":"https://github.com/apache/openjpa/blob/ead275493e524fba1e978ae76a7ade4e90d54f2f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/featureSelection/DMCustomer.java","raw_url":"https://github.com/apache/openjpa/raw/ead275493e524fba1e978ae76a7ade4e90d54f2f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/featureSelection/DMCustomer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/featureSelection/DMCustomer.java?ref=ead275493e524fba1e978ae76a7ade4e90d54f2f","patch":"@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.detachment.featureSelection;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.Id;\n+import javax.persistence.OneToMany;\n+\n+@Entity \n+public class DMCustomer {\n+\n+    private static long idCounter = System.currentTimeMillis();\t\n+    @Id private long id = idCounter++;    \n+    private String firstName;    \n+    private String lastName;    \n+\n+    @OneToMany(mappedBy=\"customer\", \n+            fetch=FetchType.EAGER,\n+            cascade=CascadeType.ALL)\n+            private List<DMCustomerInventory> customerInventories = new ArrayList<DMCustomerInventory>();\n+\n+    public DMCustomer() {\n+    }\n+\n+    public long getId() {\n+        return id;\n+    }\n+\n+    public void setId(long id) {\n+        this.id = id;\n+    }\n+\n+    public String getFirstName() {\n+        return firstName;\n+    }\n+\n+    public void setFirstName(String firstName) {\n+        this.firstName = firstName;\n+    }\n+\n+    public String getLastName() {\n+        return lastName;\n+    }\n+\n+    public void setLastName(String lastName) {\n+        this.lastName = lastName;\n+    }\n+\n+    public List<DMCustomerInventory> getCustomerInventories() {\n+        return customerInventories;\n+    }\n+\n+    public void setCustomerInventories(List<DMCustomerInventory> customerInventories) {\n+        this.customerInventories = customerInventories;\n+    }\n+}"},{"sha":"a3758efbffda0ad94b2f084840bd2ec805fc24fc","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/featureSelection/DMCustomerInventory.java","status":"added","additions":75,"deletions":0,"changes":75,"blob_url":"https://github.com/apache/openjpa/blob/ead275493e524fba1e978ae76a7ade4e90d54f2f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/featureSelection/DMCustomerInventory.java","raw_url":"https://github.com/apache/openjpa/raw/ead275493e524fba1e978ae76a7ade4e90d54f2f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/featureSelection/DMCustomerInventory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/featureSelection/DMCustomerInventory.java?ref=ead275493e524fba1e978ae76a7ade4e90d54f2f","patch":"@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.detachment.featureSelection;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+\n+@Entity\n+public class DMCustomerInventory  {\n+    private static long idCounter = System.currentTimeMillis();\n+    @Id private long id = idCounter++;\n+\n+    @ManyToOne(cascade=CascadeType.ALL)\n+    @JoinColumn(name = \"CI_ITEMID\")\n+    private DMItem  item;    \n+    private int quantity;\n+\n+    @ManyToOne(cascade=CascadeType.MERGE)\n+    @JoinColumn(name=\"CI_CUSTOMERID\")\n+    private DMCustomer customer;\n+\n+    public DMCustomerInventory() {\n+    }\n+\n+    public long getId() {\n+        return id;\n+    }\n+\n+    public void setId(long id) {\n+        this.id = id;\n+    }\n+\n+    public DMItem getItem() {\n+        return item;\n+    }\n+\n+    public void setItem(DMItem item) {\n+        this.item = item;\n+    }\n+\n+    public int getQuantity() {\n+        return quantity;\n+    }\n+\n+    public void setQuantity(int quantity) {\n+        this.quantity = quantity;\n+    }\n+\n+    public DMCustomer getCustomer() {\n+        return customer;\n+    }\n+\n+    public void setCustomer(DMCustomer customer) {\n+        this.customer = customer;\n+    }    \n+}"},{"sha":"5b153fb626c09b9ea775ac81caaef7cdd5103129","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/featureSelection/DMItem.java","status":"added","additions":51,"deletions":0,"changes":51,"blob_url":"https://github.com/apache/openjpa/blob/ead275493e524fba1e978ae76a7ade4e90d54f2f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/featureSelection/DMItem.java","raw_url":"https://github.com/apache/openjpa/raw/ead275493e524fba1e978ae76a7ade4e90d54f2f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/featureSelection/DMItem.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/featureSelection/DMItem.java?ref=ead275493e524fba1e978ae76a7ade4e90d54f2f","patch":"@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.detachment.featureSelection;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+\n+@Entity\n+public class DMItem {\n+    private static long idCounter = System.currentTimeMillis();\t\n+    @Id private long id = idCounter++;\n+\n+    private String name;\n+    private double price;\n+\n+\n+    public long getId() {\n+        return id;\n+    }\n+    public void setId(long id) {\n+        this.id = id;\n+    }\n+    public String getName() {\n+        return name;\n+    }\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+    public double getPrice() {\n+        return price;\n+    }\n+    public void setPrice(double price) {\n+        this.price = price;\n+    }\n+}"}]}

