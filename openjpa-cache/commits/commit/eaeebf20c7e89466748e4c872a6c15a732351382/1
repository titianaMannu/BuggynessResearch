{"sha":"eaeebf20c7e89466748e4c872a6c15a732351382","node_id":"MDY6Q29tbWl0MjA2MzY0OmVhZWViZjIwYzdlODk0NjY3NDhlNGM4NzJhNmMxNWE3MzIzNTEzODI=","commit":{"author":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-08-21T03:15:37Z"},"committer":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-08-21T03:15:37Z"},"message":"OPENJPA-321.  Committing Teresa's patch with a few minor formatting updates.  Thanks, Teresa.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@567928 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f01c4ac700c43cb0ad341af94f284298c2460c73","url":"https://api.github.com/repos/apache/openjpa/git/trees/f01c4ac700c43cb0ad341af94f284298c2460c73"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/eaeebf20c7e89466748e4c872a6c15a732351382","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/eaeebf20c7e89466748e4c872a6c15a732351382","html_url":"https://github.com/apache/openjpa/commit/eaeebf20c7e89466748e4c872a6c15a732351382","comments_url":"https://api.github.com/repos/apache/openjpa/commits/eaeebf20c7e89466748e4c872a6c15a732351382/comments","author":null,"committer":null,"parents":[{"sha":"7977291bea0d92b3356319a8dba1a1e9a273e751","url":"https://api.github.com/repos/apache/openjpa/commits/7977291bea0d92b3356319a8dba1a1e9a273e751","html_url":"https://github.com/apache/openjpa/commit/7977291bea0d92b3356319a8dba1a1e9a273e751"}],"stats":{"total":143,"additions":134,"deletions":9},"files":[{"sha":"5b45fab3923b85b86d5a6b6c3183e13690a53eb2","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Lit.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/eaeebf20c7e89466748e4c872a6c15a732351382/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Lit.java","raw_url":"https://github.com/apache/openjpa/raw/eaeebf20c7e89466748e4c872a6c15a732351382/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Lit.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Lit.java?ref=eaeebf20c7e89466748e4c872a6c15a732351382","patch":"@@ -28,7 +28,7 @@\n  *\n  * @author Abe White\n  */\n-class Lit\n+public class Lit\n     extends Const\n     implements Literal {\n "},{"sha":"3e1ef5ed220733cccd71d487d7c70a1266dc46fc","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Param.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/eaeebf20c7e89466748e4c872a6c15a732351382/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Param.java","raw_url":"https://github.com/apache/openjpa/raw/eaeebf20c7e89466748e4c872a6c15a732351382/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Param.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Param.java?ref=eaeebf20c7e89466748e4c872a6c15a732351382","patch":"@@ -33,7 +33,7 @@\n  *\n  * @author Abe White\n  */\n-class Param\n+public class Param\n     extends Const\n     implements Parameter {\n "},{"sha":"b987495a2687260e9b6f188fd10d3f27ffc666b7","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/StringLength.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/eaeebf20c7e89466748e4c872a6c15a732351382/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/StringLength.java","raw_url":"https://github.com/apache/openjpa/raw/eaeebf20c7e89466748e4c872a6c15a732351382/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/StringLength.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/StringLength.java?ref=eaeebf20c7e89466748e4c872a6c15a732351382","patch":"@@ -54,7 +54,8 @@ public void appendTo(Select sel, ExpContext ctx, ExpState state,\n         DBDictionary dict = ctx.store.getDBDictionary();\n         String func = dict.stringLengthFunction;\n         dict.assertSupport(func != null, \"StringLengthFunction\");\n-\n+        func = dict.getCastFunction(getValue(), func);\n+        \n         int idx = func.indexOf(\"{0}\");\n         buf.append(func.substring(0, idx));\n         getValue().appendTo(sel, ctx, state, buf, index);"},{"sha":"95258e52e8a0cb80124359a5ac13f05beec92844","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ToLowerCase.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/eaeebf20c7e89466748e4c872a6c15a732351382/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ToLowerCase.java","raw_url":"https://github.com/apache/openjpa/raw/eaeebf20c7e89466748e4c872a6c15a732351382/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ToLowerCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ToLowerCase.java?ref=eaeebf20c7e89466748e4c872a6c15a732351382","patch":"@@ -43,6 +43,7 @@ public void appendTo(Select sel, ExpContext ctx, ExpState state,\n         DBDictionary dict = ctx.store.getDBDictionary();\n         String func = dict.toLowerCaseFunction;\n         dict.assertSupport(func != null, \"ToLowerCaseFunction\");\n+        func = dict.getCastFunction(getValue(), func);\n \n         int idx = func.indexOf(\"{0}\");\n         buf.append(func.substring(0, idx));"},{"sha":"86eef89348c404af29a2ddb206b8ca9e087d1aac","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ToUpperCase.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/eaeebf20c7e89466748e4c872a6c15a732351382/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ToUpperCase.java","raw_url":"https://github.com/apache/openjpa/raw/eaeebf20c7e89466748e4c872a6c15a732351382/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ToUpperCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ToUpperCase.java?ref=eaeebf20c7e89466748e4c872a6c15a732351382","patch":"@@ -43,6 +43,7 @@ public void appendTo(Select sel, ExpContext ctx, ExpState state,\n         DBDictionary dict = ctx.store.getDBDictionary();\n         String func = dict.toUpperCaseFunction;\n         dict.assertSupport(func != null, \"ToUpperCaseFunction\");\n+        func = dict.getCastFunction(getValue(), func);\n \n         int idx = func.indexOf(\"{0}\");\n         buf.append(func.substring(0, idx));"},{"sha":"3719ef7533b95c022d36024e73730956ca4fde84","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Trim.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/eaeebf20c7e89466748e4c872a6c15a732351382/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Trim.java","raw_url":"https://github.com/apache/openjpa/raw/eaeebf20c7e89466748e4c872a6c15a732351382/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Trim.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Trim.java?ref=eaeebf20c7e89466748e4c872a6c15a732351382","patch":"@@ -150,8 +150,9 @@ public void appendTo(Select sel, ExpContext ctx, ExpState state,\n         } else {\n             func = dict.trimTrailingFunction;\n             dict.assertSupport(func != null, \"TrimTrailingFunction\");\n-        }\n-\n+        }        \n+        func = dict.getCastFunction(_val, func);\n+        \n         int fromPart = func.indexOf(\"{0}\");\n         int charPart = func.indexOf(\"{1}\");\n         if (charPart == -1)"},{"sha":"de07222dba428eb0c9139df58a413a537898f536","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/UnaryOp.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/eaeebf20c7e89466748e4c872a6c15a732351382/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/UnaryOp.java","raw_url":"https://github.com/apache/openjpa/raw/eaeebf20c7e89466748e4c872a6c15a732351382/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/UnaryOp.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/UnaryOp.java?ref=eaeebf20c7e89466748e4c872a6c15a732351382","patch":"@@ -125,6 +125,7 @@ public void appendTo(Select sel, ExpContext ctx, ExpState state,\n         sql.append(getOperator());\n         sql.append(\"(\");\n         _val.appendTo(sel, ctx, state, sql, 0);\n+        sql.addCastForParam(getOperator(), _val);\n         sql.append(\")\");\n     }\n "},{"sha":"3eebf3e5debf3419fbd8b593eed190caca94844e","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractDB2Dictionary.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/eaeebf20c7e89466748e4c872a6c15a732351382/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractDB2Dictionary.java","raw_url":"https://github.com/apache/openjpa/raw/eaeebf20c7e89466748e4c872a6c15a732351382/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractDB2Dictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractDB2Dictionary.java?ref=eaeebf20c7e89466748e4c872a6c15a732351382","patch":"@@ -38,7 +38,7 @@ public AbstractDB2Dictionary() {\n         // in string functions\n         toUpperCaseFunction = \"UPPER(CAST({0} AS VARCHAR(1000)))\";\n         toLowerCaseFunction = \"LOWER(CAST({0} AS VARCHAR(1000)))\";\n-        stringLengthFunction = \"LENGTH(CAST({0} AS VARCHAR(1000)))\";\n+        stringLengthFunction = \"LENGTH({0})\";\n         concatenateFunction = \"(CAST({0} AS VARCHAR(1000)))||\"\n             + \"(CAST({1} AS VARCHAR(1000)))\";\n "},{"sha":"f7f08100ae0d0eb915615593a4eb218b608398af","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","status":"modified","additions":83,"deletions":2,"changes":85,"blob_url":"https://github.com/apache/openjpa/blob/eaeebf20c7e89466748e4c872a6c15a732351382/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","raw_url":"https://github.com/apache/openjpa/raw/eaeebf20c7e89466748e4c872a6c15a732351382/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java?ref=eaeebf20c7e89466748e4c872a6c15a732351382","patch":"@@ -25,14 +25,18 @@\n import java.sql.Types;\r\n import java.util.Arrays;\r\n import java.util.StringTokenizer;\r\n+\r\n import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\r\n+import org.apache.openjpa.jdbc.kernel.exps.FilterValue;\r\n+import org.apache.openjpa.jdbc.kernel.exps.Lit;\r\n+import org.apache.openjpa.jdbc.kernel.exps.Param;\r\n+import org.apache.openjpa.jdbc.kernel.exps.Val;\r\n import org.apache.openjpa.jdbc.schema.Sequence;\r\n+import org.apache.openjpa.kernel.Filters;\r\n import org.apache.openjpa.lib.util.Localizer;\r\n import org.apache.openjpa.meta.JavaTypes;\r\n import org.apache.openjpa.util.OpenJPAException;\r\n import org.apache.openjpa.util.UnsupportedException;\r\n-import org.apache.openjpa.kernel.Filters;\r\n-import org.apache.openjpa.jdbc.kernel.exps.FilterValue;\r\n \r\n /**\r\n  * Dictionary for IBM DB2 database.\r\n@@ -613,4 +617,81 @@ private void appendXmlExists(SQLBuffer buf, FilterValue val) {\n             append(\"/*[\");\r\n         val.appendTo(buf);        \r\n     }\r\n+    \r\n+    /**\r\n+     * add CAST for a scalar function where operand is a param\r\n+     * \r\n+     * @param func original string\r\n+     * @param target substring to look for\r\n+     * @param asString \r\n+     * @return updated string (func)\r\n+     */\r\n+    private String addCastAsString(String func, String target, \r\n+            String asString) {\r\n+        String fstring = func;\r\n+        if (func.indexOf(target) != -1)\r\n+            fstring = func.replace(target, \"CAST(\" + target + asString);\r\n+        return fstring;\r\n+    }\r\n+\r\n+    /**\r\n+     * add CAST for a function operator where operand is a param\r\n+     * \r\n+     * @param func function name\r\n+     * @param val type\r\n+     * @return updated string (func)\r\n+     */\r\n+    public String addCastAsType(String func, Val val) {\r\n+        String fstring = null;\r\n+        String type = getTypeName(getJDBCType(JavaTypes.getTypeCode(val\r\n+                .getType()), false));\r\n+        fstring = \"CAST(? AS \" + type + \")\";\r\n+        return fstring;\r\n+    }\r\n+\r\n+    /**\r\n+     * Return the correct CAST function syntax\r\n+     * \r\n+     * @param val operand of cast\r\n+     * @param func original string\r\n+     * @return a String with the correct CAST function syntax\r\n+     */\r\n+    public String getCastFunction(Val val, String func) {\r\n+        if (val instanceof Lit || val instanceof Param)\r\n+            if (func.indexOf(\"VARCHAR\") == -1)\r\n+                func = addCastAsString(func, \"{0}\", \" AS VARCHAR(1000))\");\r\n+        return func;\r\n+    }\r\n+\r\n+    public void indexOf(SQLBuffer buf, FilterValue str, FilterValue find,\r\n+            FilterValue start) {\r\n+        if (find.getValue() != null) { // non constants\r\n+            buf.append(\"(LOCATE(CAST((\");\r\n+            find.appendTo(buf);\r\n+            buf.append(\") AS VARCHAR(1000)), \");\r\n+        } else {\r\n+            // this is a constant\r\n+            buf.append(\"(LOCATE(\");\r\n+            find.appendTo(buf);\r\n+            buf.append(\", \");\r\n+        }\r\n+        if (str.getValue() != null) {\r\n+            buf.append(\"CAST((\");\r\n+            str.appendTo(buf);\r\n+            buf.append(\") AS VARCHAR(1000))\");\r\n+        } else {\r\n+            str.appendTo(buf);\r\n+        }\r\n+        if (start != null) {\r\n+            if (start.getValue() == null) {\r\n+                buf.append(\", CAST((\");\r\n+                start.appendTo(buf);\r\n+                buf.append(\") AS INTEGER) + 1\");\r\n+            } else {\r\n+                buf.append(\", \");\r\n+                start.appendTo(buf);\r\n+            }\r\n+        }\r\n+        buf.append(\") - 1)\");\r\n+    }\r\n }\r"},{"sha":"e458af6d47821374d7b2168b57c6ccddee4d96dc","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","status":"modified","additions":26,"deletions":1,"changes":27,"blob_url":"https://github.com/apache/openjpa/blob/eaeebf20c7e89466748e4c872a6c15a732351382/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/eaeebf20c7e89466748e4c872a6c15a732351382/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java?ref=eaeebf20c7e89466748e4c872a6c15a732351382","patch":"@@ -68,6 +68,8 @@\n import org.apache.openjpa.jdbc.kernel.exps.ExpContext;\n import org.apache.openjpa.jdbc.kernel.exps.ExpState;\n import org.apache.openjpa.jdbc.kernel.exps.FilterValue;\n+import org.apache.openjpa.jdbc.kernel.exps.Lit;\n+import org.apache.openjpa.jdbc.kernel.exps.Param;\n import org.apache.openjpa.jdbc.kernel.exps.Val;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.meta.FieldMapping;\n@@ -92,7 +94,6 @@\n import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.lib.util.Localizer.Message;\n-import org.apache.openjpa.meta.FieldMetaData;\n import org.apache.openjpa.meta.JavaTypes;\n import org.apache.openjpa.util.GeneralException;\n import org.apache.openjpa.util.OpenJPAException;\n@@ -2541,6 +2542,18 @@ public void appendCast(SQLBuffer buf, FilterValue val, int type) {\n     protected void appendLength(SQLBuffer buf, int type) {        \n     }\n \n+    \n+    /**\n+     * add CAST for a function operator where operand is a param\n+     * @param func  function name\n+     * @param val \n+     * @return updated func\n+     */\n+    public String addCastAsType(String func, Val val) {\n+        return null;\n+    }    \n+\n+\n     ///////////\n     // DDL SQL\n     ///////////\n@@ -3869,4 +3882,16 @@ public SerializedData(byte[] bytes) {\n     public String getVersionColumn(Column column, String tableAlias) {\n         return column.toString();\n     }\n+    \n+    /**\n+     * Attach CAST to the current function if necessary\n+     * \n+     * @param val operand value\n+     * @parma func the sql function statement\n+     * @return a String with the correct CAST function syntax\n+     */\n+    public String getCastFunction(Val val, String func) {\n+        return func;\n+    }\n+   \n }"},{"sha":"ff067271ba34479d649a2e42949e399929e824a8","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLBuffer.java","status":"modified","additions":14,"deletions":0,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/eaeebf20c7e89466748e4c872a6c15a732351382/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLBuffer.java","raw_url":"https://github.com/apache/openjpa/raw/eaeebf20c7e89466748e4c872a6c15a732351382/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLBuffer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLBuffer.java?ref=eaeebf20c7e89466748e4c872a6c15a732351382","patch":"@@ -31,6 +31,7 @@\n \n import org.apache.commons.lang.ObjectUtils;\n import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n+import org.apache.openjpa.jdbc.kernel.exps.Val;\n import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.jdbc.schema.Sequence;\n import org.apache.openjpa.jdbc.schema.Table;\n@@ -592,6 +593,19 @@ public boolean equals(Object other) {\n             && ObjectUtils.equals(_params, buf._params);\n     }\n \n+    /**\n+     * Replace SQL '?' with CAST string if required by DB platform\n+     * @param oper\n+     * @param val\n+     */\n+    public void addCastForParam(String oper, Val val) {\n+        if (_sql.charAt(_sql.length() - 1) == '?') {\n+            String castString = _dict.addCastAsType(oper, val);\n+            if (castString != null)\n+                _sql.replace(_sql.length() - 1, _sql.length(), castString);\n+        }\n+    }\n+\n     /**\n      * Represents a subselect.\n      */"}]}

