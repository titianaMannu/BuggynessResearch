{"sha":"eaf452dcc266505f148c28b3558f5e052df6d89f","node_id":"MDY6Q29tbWl0MjA2MzY0OmVhZjQ1MmRjYzI2NjUwNWYxNDhjMjhiMzU1OGY1ZTA1MmRmNmQ4OWY=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-02-14T02:26:59Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-02-14T02:26:59Z"},"message":"OPENJPA-515 Add basic Tests for distributed database support.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@627636 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"71d27c4476e318241c0e09144e45afd8052974c4","url":"https://api.github.com/repos/apache/openjpa/git/trees/71d27c4476e318241c0e09144e45afd8052974c4"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/eaf452dcc266505f148c28b3558f5e052df6d89f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/eaf452dcc266505f148c28b3558f5e052df6d89f","html_url":"https://github.com/apache/openjpa/commit/eaf452dcc266505f148c28b3558f5e052df6d89f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/eaf452dcc266505f148c28b3558f5e052df6d89f/comments","author":null,"committer":null,"parents":[{"sha":"07d26ee05aa0ef4eb29f842c945283e6247d7c4b","url":"https://api.github.com/repos/apache/openjpa/commits/07d26ee05aa0ef4eb29f842c945283e6247d7c4b","html_url":"https://github.com/apache/openjpa/commit/07d26ee05aa0ef4eb29f842c945283e6247d7c4b"}],"stats":{"total":1592,"additions":1523,"deletions":69},"files":[{"sha":"7644f66e0fdf348ceac5380ceb8ff5f9845b6792","filename":"openjpa-slice/pom.xml","status":"modified","additions":109,"deletions":0,"changes":109,"blob_url":"https://github.com/apache/openjpa/blob/eaf452dcc266505f148c28b3558f5e052df6d89f/openjpa-slice/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/eaf452dcc266505f148c28b3558f5e052df6d89f/openjpa-slice/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/pom.xml?ref=eaf452dcc266505f148c28b3558f5e052df6d89f","patch":"@@ -32,6 +32,13 @@\n         <artifactId>openjpa-parent</artifactId>\r\n         <version>1.1.0-SNAPSHOT</version>\r\n     </parent>\r\n+    <properties>\r\n+        <openjpa.loglevel>INFO</openjpa.loglevel>\r\n+        <!-- to set debug arguments, you might set the following at the command line:\r\n+            -Dtest.jvm.arguments=\"-Xmx500m -agentlib:jdwp=transport=dt_socket,server=y,address=8000\"\r\n+        -->\r\n+        <test.jvm.arguments>-Xmx500m</test.jvm.arguments>\r\n+    </properties>\r\n     <dependencies>\r\n         <dependency>\r\n             <groupId>org.apache.openjpa</groupId>\r\n@@ -45,7 +52,68 @@\n             <version>${pom.version}</version>\r\n             <scope>compile</scope>\r\n         </dependency>\r\n+        <dependency>\r\n+            <groupId>org.apache.geronimo.specs</groupId>\r\n+            <artifactId>geronimo-jpa_3.0_spec</artifactId>\r\n+            <scope>test</scope>\r\n+        </dependency>\r\n+        <dependency>\r\n+            <groupId>org.apache.openjpa</groupId>\r\n+            <artifactId>openjpa-persistence</artifactId>\r\n+            <version>${pom.version}</version>\r\n+            <scope>test</scope>\r\n+        </dependency>\r\n+                <dependency>\r\n+                    <groupId>mysql</groupId>\r\n+                    <artifactId>mysql-connector-java</artifactId>\r\n+                    <version>5.1.5</version>\r\n+            <scope>test</scope>\r\n+                </dependency>\r\n     </dependencies>\r\n+        <profiles>\r\n+        <!-- Profile for testing with Apache Derby -->\r\n+        <profile>\r\n+            <id>test-derby</id>\r\n+            <activation>\r\n+                <activeByDefault>false</activeByDefault>\r\n+                <property><name>test-derby</name></property>\r\n+            </activation>\r\n+            <dependencies>\r\n+                <dependency>\r\n+                    <groupId>org.apache.derby</groupId>\r\n+                    <artifactId>derby</artifactId>\r\n+                    <scope>test</scope>\r\n+                </dependency>\r\n+            </dependencies>\r\n+            <properties>\r\n+                <connection.driver.name>org.apache.derby.jdbc.EmbeddedDriver</connection.driver.name>\r\n+                <connection.url>jdbc:derby:target/database/slice-derby-One;create=true</connection.url>\r\n+                <connection.username></connection.username>\r\n+                <connection.password></connection.password>\r\n+            </properties>\r\n+        </profile>\r\n+        <profile>\r\n+            <id>test-mysql</id>\r\n+            <activation>\r\n+                <activeByDefault>false</activeByDefault>\r\n+                <property><name>test-mysql</name></property>\r\n+            </activation>\r\n+            <dependencies>\r\n+                <dependency>\r\n+                    <groupId>mysql</groupId>\r\n+                    <artifactId>mysql-connector-java</artifactId>\r\n+                    <version>5.1.5</version>\r\n+                </dependency>\r\n+            </dependencies>\r\n+            <properties>\r\n+                <connection.driver.name>com.mysql.jdbc.Driver</connection.driver.name>\r\n+                <connection.url>${openjpa.mysql.url}</connection.url>\r\n+                <connection.username>${openjpa.mysql.username}</connection.username>\r\n+                <connection.password>${openjpa.mysql.password}</connection.password>\r\n+            </properties>\r\n+        </profile>\r\n+        \r\n+    </profiles>\r\n     <build>\r\n         <plugins>\r\n             <plugin>\r\n@@ -56,6 +124,47 @@\n                     <target>1.5</target>\r\n                 </configuration>\r\n             </plugin>\r\n+            <plugin>\r\n+                <artifactId>maven-antrun-plugin</artifactId>\r\n+                <executions>\r\n+                    <execution>\r\n+                        <phase>test-compile</phase>\r\n+                        <configuration>\r\n+                            <tasks>\r\n+                                <ant antfile=\"src/main/ant/enhancer.xml\"\r\n+                                    target=\"enhance\"\r\n+                                    inheritRefs=\"true\">\r\n+                                    <property name=\"maven.test.skip\" value=\"${maven.test.skip}\" />\r\n+                                    <property name=\"test\" value=\"${test}\" />\r\n+                                    <property name=\"outdir\" value=\"${project.build.outputDirectory}\" />\r\n+                                    <property name=\"project.build.testOutputDirectory\" value=\"${project.build.testOutputDirectory}\" />\r\n+                                    <property name=\"openjpa.loglevel\" value=\"${openjpa.loglevel}\" />\r\n+                                </ant>\r\n+                            </tasks>\r\n+                        </configuration>\r\n+                        <goals>\r\n+                            <goal>run</goal>\r\n+                        </goals>\r\n+                    </execution>\r\n+                </executions>\r\n+            </plugin>\r\n+            \r\n+            <plugin>\r\n+                <groupId>org.apache.maven.plugins</groupId>\r\n+                <artifactId>maven-surefire-plugin</artifactId>\r\n+                <!-- ======================================================= -->\r\n+                <!-- All tests are excluded currently                        -->\r\n+                <!-- ======================================================= -->\r\n+                <configuration>\r\n+                     <includes>\r\n+                        <include>**/DummyTest.java</include>\r\n+                     </includes>\r\n+                     <excludes>\r\n+                        <exclude>**/Test*.java</exclude>\r\n+                     </excludes>\r\n+                </configuration>\r\n+           </plugin>\r\n+            \r\n         </plugins>\r\n     </build>\r\n </project>\r"},{"sha":"76c43ecc28eb93328e01897d99456552386e094b","filename":"openjpa-slice/src/main/ant/enhancer.xml","status":"added","additions":84,"deletions":0,"changes":84,"blob_url":"https://github.com/apache/openjpa/blob/eaf452dcc266505f148c28b3558f5e052df6d89f/openjpa-slice/src/main/ant/enhancer.xml","raw_url":"https://github.com/apache/openjpa/raw/eaf452dcc266505f148c28b3558f5e052df6d89f/openjpa-slice/src/main/ant/enhancer.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/main/ant/enhancer.xml?ref=eaf452dcc266505f148c28b3558f5e052df6d89f","patch":"@@ -0,0 +1,84 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n+<!--\r\n+    Licensed to the Apache Software Foundation (ASF) under one\r\n+    or more contributor license agreements.  See the NOTICE file\r\n+    distributed with this work for additional information\r\n+    regarding copyright ownership.  The ASF licenses this file\r\n+    to you under the Apache License, Version 2.0 (the\r\n+    \"License\"); you may not use this file except in compliance\r\n+    with the License.  You may obtain a copy of the License at\r\n+    \r\n+    http://www.apache.org/licenses/LICENSE-2.0\r\n+    \r\n+    Unless required by applicable law or agreed to in writing,\r\n+    software distributed under the License is distributed on an\r\n+    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+    KIND, either express or implied.  See the License for the\r\n+    specific language governing permissions and limitations\r\n+    under the License.   \r\n+-->\r\n+<project name=\"enhance\" basedir=\".\">\r\n+    <!--\r\n+        This build file executes the PCEnhancer on the test entities. It's in a\r\n+        separate file instead of nested in pom.xml to make some conditional \r\n+        processing easier.\r\n+        \r\n+        Test classes will not be compiled if maven is invoked with \r\n+        -Dmaven.tests.skip=true. \r\n+    -->\r\n+\r\n+    <condition property=\"maven.test.skip.istrue\">\r\n+        <istrue value=\"${maven.test.skip}\" />\r\n+    </condition>\r\n+\r\n+    <condition property=\"test.isfalse\">\r\n+        <equals arg1=\"${test}\" arg2=\"false\" />\r\n+    </condition>\r\n+\r\n+    <!-- ================================= \r\n+          target: enhance              \r\n+         ================================= -->\r\n+    <target name=\"enhance\"\r\n+            description=\"--> run the enhancer unless test=false\"\r\n+            unless=\"test.isfalse\">\r\n+        <antcall target=\"enhance.all.entities\"\r\n+                 inheritall=\"true\"\r\n+                 inheritrefs=\"true\" />\r\n+    </target>\r\n+\r\n+    <!-- ================================= \r\n+          target: enhance.all.entities              \r\n+         ================================= -->\r\n+    <target name=\"enhance.all.entities\"\r\n+            description=\"--> enhance the test entities\"\r\n+            unless=\"maven.test.skip.istrue\">\r\n+        <echo> running enhancer</echo>\r\n+        <!-- \r\n+            Inherited references won't be present until the task is called. \r\n+            Therefore the path definition needs to stay inside the task.\r\n+          -->\r\n+        <path id=\"cp\">\r\n+            <path refid=\"maven.test.classpath\" />\r\n+            <path refid=\"maven.compile.classpath\" />\r\n+            <path refid=\"maven.dependency.classpath\" />\r\n+        </path>\r\n+\r\n+        <taskdef name=\"openjpac\"\r\n+                 classname=\"org.apache.openjpa.ant.PCEnhancerTask\">\r\n+            <classpath refid=\"cp\" />\r\n+        </taskdef>\r\n+\r\n+        <fileset id=\"enhance.path.ref\"\r\n+                 dir=\"${project.build.testOutputDirectory}\">\r\n+            <include name=\"**/Address.class\" />\r\n+            <include name=\"**/Person.class\" />\r\n+            <include name=\"**/PObject.class\" />\r\n+            <exclude name=\"**/Test*.class\" />\r\n+        </fileset>\r\n+        <openjpac>\r\n+            <classpath refid=\"cp\" />\r\n+            <fileset refid=\"enhance.path.ref\" />\r\n+            <config log=\"DefaultLevel=${openjpa.loglevel}\" />\r\n+        </openjpac>\r\n+    </target>\r\n+</project>\n\\ No newline at end of file"},{"sha":"a2ff7c247e7c2286a9eaaad874a96a4926061cb5","filename":"openjpa-slice/src/main/java/org/apache/openjpa/slice/DistributedBrokerImpl.java","status":"modified","additions":12,"deletions":2,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/eaf452dcc266505f148c28b3558f5e052df6d89f/openjpa-slice/src/main/java/org/apache/openjpa/slice/DistributedBrokerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/eaf452dcc266505f148c28b3558f5e052df6d89f/openjpa-slice/src/main/java/org/apache/openjpa/slice/DistributedBrokerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/main/java/org/apache/openjpa/slice/DistributedBrokerImpl.java?ref=eaf452dcc266505f148c28b3558f5e052df6d89f","patch":"@@ -18,7 +18,7 @@\n  */\r\n package org.apache.openjpa.slice;\r\n \r\n-import org.apache.openjpa.kernel.BrokerImpl;\r\n+import org.apache.openjpa.kernel.FinalizingBrokerImpl;\r\n import org.apache.openjpa.kernel.OpCallbacks;\r\n import org.apache.openjpa.kernel.OpenJPAStateManager;\r\n import org.apache.openjpa.lib.util.Localizer;\r\n@@ -35,7 +35,7 @@\n  * \r\n  */\r\n @SuppressWarnings(\"serial\")\r\n-public class DistributedBrokerImpl extends BrokerImpl {\r\n+public class DistributedBrokerImpl extends FinalizingBrokerImpl {\r\n \tprivate transient String slice;\r\n \r\n \tprivate static final Localizer _loc =\r\n@@ -79,4 +79,14 @@ String getSlice(Object pc) {\n \t\t\t\t\tslice, pc, conf.getActiveSliceNames() }));\r\n \t\treturn slice;\r\n \t}\r\n+\t\r\n+\t@Override\r\n+\tpublic boolean endOperation() {\r\n+\t    try {\r\n+\t        return super.endOperation();\r\n+\t    } catch (Exception ex) {\r\n+\t        \r\n+\t    }\r\n+\t    return true;\r\n+\t}\r\n }\r"},{"sha":"f8a56ddff24dbcb2f03886ec77d069de7d8bccf1","filename":"openjpa-slice/src/main/java/org/apache/openjpa/slice/ExecutorServiceValue.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/eaf452dcc266505f148c28b3558f5e052df6d89f/openjpa-slice/src/main/java/org/apache/openjpa/slice/ExecutorServiceValue.java","raw_url":"https://github.com/apache/openjpa/raw/eaf452dcc266505f148c28b3558f5e052df6d89f/openjpa-slice/src/main/java/org/apache/openjpa/slice/ExecutorServiceValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/main/java/org/apache/openjpa/slice/ExecutorServiceValue.java?ref=eaf452dcc266505f148c28b3558f5e052df6d89f","patch":"@@ -23,6 +23,7 @@\n import java.util.concurrent.ExecutorService;\r\n import java.util.concurrent.Executors;\r\n import java.util.concurrent.PriorityBlockingQueue;\r\n+import java.util.concurrent.SynchronousQueue;\r\n import java.util.concurrent.ThreadFactory;\r\n import java.util.concurrent.ThreadPoolExecutor;\r\n import java.util.concurrent.TimeUnit;\r\n@@ -97,7 +98,7 @@ public Object instantiate(Class type, Configuration conf, boolean fatal) {\n             }\r\n             obj = new ThreadPoolExecutor(defaultSize, defaultSize,\r\n                             keepAliveTime, TimeUnit.SECONDS,\r\n-                            new PriorityBlockingQueue<Runnable>(), factory);\r\n+                            new SynchronousQueue<Runnable>(), factory);\r\n \r\n             Configurations.configureInstance(obj, conf, opts, getProperty());\r\n         }\r"},{"sha":"6f1aedcf1bc1af13c31633744019a80af85d7fc6","filename":"openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedJDBCConfigurationImpl.java","status":"modified","additions":30,"deletions":22,"changes":52,"blob_url":"https://github.com/apache/openjpa/blob/eaf452dcc266505f148c28b3558f5e052df6d89f/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedJDBCConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/eaf452dcc266505f148c28b3558f5e052df6d89f/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedJDBCConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedJDBCConfigurationImpl.java?ref=eaf452dcc266505f148c28b3558f5e052df6d89f","patch":"@@ -37,7 +37,6 @@\n import org.apache.openjpa.jdbc.schema.DataSourceFactory;\r\n import org.apache.openjpa.lib.conf.BooleanValue;\r\n import org.apache.openjpa.lib.conf.ConfigurationProvider;\r\n-import org.apache.openjpa.lib.conf.Configurations;\r\n import org.apache.openjpa.lib.conf.PluginValue;\r\n import org.apache.openjpa.lib.conf.StringListValue;\r\n import org.apache.openjpa.lib.conf.StringValue;\r\n@@ -55,6 +54,8 @@\n \r\n /**\r\n  * Implements a distributed configuration of JDBCStoreManagers.\r\n+ * The original configuration properties are analyzed to create a set of\r\n+ * Slice specific properties with defaulting rules. \r\n  * \r\n  * @author Pinaki Poddar\r\n  * \r\n@@ -67,6 +68,7 @@\n     private Slice _master;\r\n     \r\n     private DecoratingDataSource virtualDataSource;\r\n+    \r\n     protected BooleanValue lenientPlugin;\r\n     protected StringValue masterPlugin;\r\n     protected StringListValue namesPlugin;\r\n@@ -90,7 +92,6 @@ public DistributedJDBCConfigurationImpl(ConfigurationProvider cp) {\n         Map p = cp.getProperties();\r\n         String pUnit = getPersistenceUnitName(p);\r\n         setDiagnosticContext(pUnit);\r\n-        Log log = getConfigurationLog();\r\n         \r\n         brokerPlugin.setString(DistributedBrokerImpl.class.getName());\r\n         \r\n@@ -189,8 +190,6 @@ public Slice getSlice(String name) {\n \r\n     public DistributionPolicy getDistributionPolicyInstance() {\r\n         if (distributionPolicyPlugin.get() == null) {\r\n-//            Configurations.getProperty(distributionPolicyPlugin.getProperty(), m)\r\n-//            distributionPolicyPlugin.setString(toProperties(false).get(key))\r\n             distributionPolicyPlugin.instantiate(DistributionPolicy.class,\r\n                     this, true);\r\n         }\r\n@@ -239,6 +238,8 @@ private DistributedDataSource createDistributedDataStore() {\n                 handleBadConnection(isLenient, slice, ex);\r\n             }\r\n         }\r\n+        if (dataSources.isEmpty())\r\n+            throw new UserException(_loc.get(\"no-slice\"));\r\n         DistributedDataSource result = new DistributedDataSource(dataSources);\r\n         return result;\r\n     }\r\n@@ -324,29 +325,29 @@ void setSlices(Map original) {\n         for (String key : sliceNames) {\r\n             JDBCConfiguration child = new JDBCConfigurationImpl();\r\n             child.fromProperties(createSliceProperties(original, key));\r\n-            child.setId(PREFIX_SLICE + key);\r\n+            child.setId(key);\r\n             Slice slice = new Slice(key, child);\r\n             _slices.add(slice);\r\n             if (log.isTraceEnabled())\r\n                 log.trace(_loc.get(\"slice-configuration\", key, child\r\n                         .toProperties(false)));\r\n         }\r\n-        setMaster();\r\n+        setMaster(original);\r\n     }\r\n \r\n     /**\r\n-     * Finds the slices. If <code>slice.Names</code> property is available\r\n-     * then the slices are ordered in the way they are listed. Otherwise scans\r\n-     * all available slices by looking for property of the form\r\n-     * <code>slice.XYZ.abc</code> where <code>XYZ</code> is the slice\r\n-     * identifier and <code>abc</code> is openjpa property name. The slices\r\n-     * are then ordered alphabetically.\r\n+     * Finds the slices. If <code>openjpa.slice.Names</code> property is \r\n+     * specified then the slices are ordered in the way they are listed. \r\n+     * Otherwise scans all available slices by looking for property of the form\r\n+     * <code>openjpa.slice.XYZ.abc</code> where <code>XYZ</code> is the slice\r\n+     * identifier and <code>abc</code> is any openjpa property name. The slices\r\n+     * are then ordered alphabetically by their identifier.\r\n      */\r\n     private List<String> findSlices(Map p) {\r\n         List<String> sliceNames = new ArrayList<String>();\r\n         \r\n         Log log = getConfigurationLog();\r\n-        String key = PREFIX_SLICE+namesPlugin.getProperty();\r\n+        String key = PREFIX_SLICE + namesPlugin.getProperty();\r\n         boolean explicit = p.containsKey(key);\r\n         if (explicit) {\r\n             String[] values = p.get(key).toString().split(\"\\\\,\");\r\n@@ -355,7 +356,7 @@ void setSlices(Map original) {\n                     sliceNames.add(name.trim());\r\n         } else {\r\n             if (log.isWarnEnabled())\r\n-                log.warn(_loc.get(\"no-slice-names\"));\r\n+                log.warn(_loc.get(\"no-slice-names\", key));\r\n             sliceNames = scanForSliceNames(p);\r\n             Collections.sort(sliceNames);\r\n         }\r\n@@ -365,6 +366,12 @@ void setSlices(Map original) {\n         return sliceNames;\r\n     }\r\n     \r\n+    /**\r\n+     * Scan the given map for slice-specific property of the form \r\n+     * <code>openjpa.slice.XYZ.abc</code> (while ignoring \r\n+     * <code>openjpa.slice.XYZ</code> as they refer to slice-wide property)\r\n+     * to determine the names of all available slices.\r\n+     */\r\n     private List<String> scanForSliceNames(Map p) {\r\n         List<String> sliceNames = new ArrayList<String>();\r\n         for (Object o : p.keySet()) {\r\n@@ -379,17 +386,17 @@ void setSlices(Map original) {\n         return sliceNames;\r\n     }\r\n \r\n-    static int getPartCount(String s) {\r\n+    private static int getPartCount(String s) {\r\n         return (s == null) ? 0 : s.split(REGEX_DOT).length;\r\n     }\r\n     \r\n-    static String chopHead(String s, String head) {\r\n+    private static String chopHead(String s, String head) {\r\n         if (s.startsWith(head))\r\n             return s.substring(head.length());\r\n         return s;\r\n     }\r\n \r\n-    static String chopTail(String s, String tail) {\r\n+    private static String chopTail(String s, String tail) {\r\n         int i = s.lastIndexOf(tail);\r\n         if (i == -1)\r\n             return s;\r\n@@ -436,14 +443,15 @@ Map createSliceProperties(Map original, String slice) {\n     /**\r\n      * Determine the master slice.\r\n      */\r\n-    private void setMaster() {\r\n-        String masterSlice = masterPlugin.get();\r\n+    private void setMaster(Map original) {\r\n+        String key = PREFIX_SLICE + masterPlugin.getProperty();\r\n+        Object masterSlice = original.get(key);\r\n         Log log = getConfigurationLog();\r\n         List<Slice> activeSlices = getSlices(null);\r\n-        if (masterSlice == null || masterSlice.length() == 0) {\r\n+        if (masterSlice == null) {\r\n             _master = activeSlices.get(0);\r\n             if (log.isWarnEnabled())\r\n-                log.warn(_loc.get(\"no-master-slice\", _master));\r\n+                log.warn(_loc.get(\"no-master-slice\", key, _master));\r\n             return;\r\n         }\r\n         for (Slice slice:activeSlices)\r\n@@ -482,5 +490,5 @@ public ExecutorService getExecutorServiceInstance() {\n             executorServicePlugin.instantiate(ExecutorService.class, this);\r\n         }\r\n         return (ExecutorService) executorServicePlugin.get();\r\n-    }\r\n+    }    \r\n }\r"},{"sha":"7bdf43bd2371fad6cd26437b254c3e19824bd0f5","filename":"openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedStoreManager.java","status":"modified","additions":26,"deletions":1,"changes":27,"blob_url":"https://github.com/apache/openjpa/blob/eaf452dcc266505f148c28b3558f5e052df6d89f/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedStoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/eaf452dcc266505f148c28b3558f5e052df6d89f/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedStoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedStoreManager.java?ref=eaf452dcc266505f148c28b3558f5e052df6d89f","patch":"@@ -18,6 +18,8 @@\n  */\r\n package org.apache.openjpa.slice.jdbc;\r\n \r\n+import java.sql.Connection;\r\n+import java.sql.SQLException;\r\n import java.util.ArrayList;\r\n import java.util.BitSet;\r\n import java.util.Collection;\r\n@@ -82,6 +84,7 @@\n     private boolean isXA;\r\n     private TransactionManager _tm;\r\n     private final DistributedJDBCConfiguration _conf;\r\n+    private boolean _active = false;\r\n     private Log _log;\r\n     private static final Localizer _loc =\r\n             Localizer.forPackage(DistributedStoreManager.class);\r\n@@ -199,6 +202,9 @@ public void beforeStateChange(OpenJPAStateManager sm, PCState fromState,\n     }\r\n \r\n     public void begin() {\r\n+        if (_active)\r\n+            return;\r\n+        _active = true;\r\n         TransactionManager tm = getTransactionManager();\r\n         for (SliceStoreManager slice : _slices) {\r\n             try {\r\n@@ -239,16 +245,21 @@ public boolean cancelAll() {\n     }\r\n \r\n     public void close() {\r\n+        _active = false;\r\n         for (SliceStoreManager slice : _slices)\r\n             slice.close();\r\n     }\r\n \r\n     public void commit() {\r\n+        if (!_active) \r\n+            return;\r\n         TransactionManager tm = getTransactionManager();\r\n         try {\r\n             tm.commit();\r\n         } catch (Exception e) {\r\n             throw new StoreException(e);\r\n+        } finally {\r\n+            _active = false;\r\n         }\r\n     }\r\n \r\n@@ -280,6 +291,7 @@ public boolean exists(OpenJPAStateManager sm, Object edata) {\n         return false;\r\n     }\r\n \r\n+    \r\n     /**\r\n      * Flush the given StateManagers after binning them to respective physical\r\n      * slices.\r\n@@ -309,7 +321,7 @@ public Collection flush(Collection sms) {\n         }\r\n         return exceptions;\r\n     }\r\n-\r\n+    \r\n     /**\r\n      * Separate the given list of StateManagers in separate lists for each slice \r\n      * by the associated slice identifier of each StateManager.\r\n@@ -421,11 +433,15 @@ public void retainConnection() {\n     }\r\n \r\n     public void rollback() {\r\n+        if (!_active)\r\n+            return;\r\n         TransactionManager tm = getTransactionManager();\r\n         try {\r\n             tm.rollback();\r\n         } catch (Exception e) {\r\n             throw new StoreException(e);\r\n+        } finally {\r\n+            _active = false;\r\n         }\r\n     }\r\n \r\n@@ -476,6 +492,15 @@ protected TransactionManager getTransactionManager() {\n         }\r\n         return _tm;\r\n     }\r\n+    \r\n+    @Override\r\n+    protected RefCountConnection connectInternal() throws SQLException {\r\n+        List<Connection> list = new ArrayList<Connection>();\r\n+        for (SliceStoreManager slice : _slices)\r\n+            list.add(slice.getConnection());\r\n+        DistributedConnection con = new DistributedConnection(list);\r\n+        return new RefCountConnection(con);\r\n+    }\r\n \r\n     private static class Flusher implements Callable<Collection> {\r\n         final SliceStoreManager store;\r"},{"sha":"1d4d34ef38dd547177c9870ab7e34e6bf248f2fa","filename":"openjpa-slice/src/main/java/org/apache/openjpa/slice/transaction/DistributedTransactionManager.java","status":"modified","additions":73,"deletions":30,"changes":103,"blob_url":"https://github.com/apache/openjpa/blob/eaf452dcc266505f148c28b3558f5e052df6d89f/openjpa-slice/src/main/java/org/apache/openjpa/slice/transaction/DistributedTransactionManager.java","raw_url":"https://github.com/apache/openjpa/raw/eaf452dcc266505f148c28b3558f5e052df6d89f/openjpa-slice/src/main/java/org/apache/openjpa/slice/transaction/DistributedTransactionManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/main/java/org/apache/openjpa/slice/transaction/DistributedTransactionManager.java?ref=eaf452dcc266505f148c28b3558f5e052df6d89f","patch":"@@ -52,7 +52,7 @@\n             Localizer.forPackage(DistributedTransactionManager.class);\r\n \r\n     public void begin() throws NotSupportedException, SystemException {\r\n-        DistributedXATransaction txn = getTransaction(false);\r\n+        DistributedXATransaction txn = (DistributedXATransaction)getTransaction();\r\n         int i = 1;\r\n         Set<XAResource> resources = txn.getEnlistedResources();\r\n         for (XAResource resource : resources) {\r\n@@ -70,51 +70,60 @@ public void begin() throws NotSupportedException, SystemException {\n     public void commit() throws HeuristicMixedException,\r\n             HeuristicRollbackException, IllegalStateException,\r\n             RollbackException, SecurityException, SystemException {\r\n-        DistributedXATransaction txn = getTransaction(true);\r\n+        DistributedXATransaction txn = getTransactionOfCurrentThread(true);\r\n         Set<XAResource> resources = txn.getEnlistedResources();\r\n         int branchId = 1;\r\n-        boolean nextPhase = true;\r\n+        Exception failedFirstPhase = null;\r\n+        Exception failedSecondPhase = null;\r\n+        \r\n         for (XAResource resource : resources) {\r\n             XID branch = txn.getXID().branch(branchId++);\r\n             try {\r\n                 resource.end(branch, TMSUCCESS);\r\n                 resource.prepare(branch);\r\n             } catch (XAException e) {\r\n-                nextPhase = false;\r\n+                failedFirstPhase = e;\r\n             }\r\n         }\r\n \r\n         branchId = 1; // reset\r\n-        if (!nextPhase) {\r\n+        if (failedFirstPhase != null) {\r\n             for (XAResource resource : resources) {\r\n                 try {\r\n                     XID branch = txn.getXID().branch(branchId++);\r\n                     resource.forget(branch);\r\n                 } catch (XAException e) {\r\n                     // ignore\r\n                 }\r\n-                throw new SystemException(_loc.get(\"prepare-failed\")\r\n-                        .getMessage());\r\n             }\r\n-        }\r\n-\r\n-        branchId = 1; // reset\r\n-        for (XAResource resource : resources) {\r\n-            XID branch = txn.getXID().branch(branchId++);\r\n-            try {\r\n-                resource.commit(branch, false);\r\n-            } catch (XAException e) {\r\n-                throw new SystemException(e.getMessage());\r\n+        } else {\r\n+            branchId = 1; // reset\r\n+            for (XAResource resource : resources) {\r\n+                XID branch = txn.getXID().branch(branchId++);\r\n+                try {\r\n+                    resource.commit(branch, false);\r\n+                } catch (XAException e) {\r\n+                    failedSecondPhase = e;\r\n+                }\r\n             }\r\n         }\r\n+        txn.commit();\r\n+        txns.set(null);\r\n+        if (failedFirstPhase != null) {\r\n+            throw new SystemException(failedFirstPhase.getMessage());\r\n+        } else if (failedSecondPhase != null)\r\n+            throw new SystemException(failedSecondPhase.getMessage());\r\n     }\r\n \r\n     public int getStatus() throws SystemException {\r\n         return getTransaction().getStatus();\r\n     }\r\n \r\n     public Transaction getTransaction() throws SystemException {\r\n-        return getTransaction(false);\r\n+        DistributedXATransaction txn =  getTransactionOfCurrentThread(false);\r\n+        if (txn == null)\r\n+            txn = newTransaction();\r\n+        return txn;\r\n     }\r\n \r\n     public void resume(Transaction arg0) throws IllegalStateException,\r\n@@ -124,7 +133,9 @@ public void resume(Transaction arg0) throws IllegalStateException,\n \r\n     public void rollback() throws IllegalStateException, SecurityException,\r\n             SystemException {\r\n-        DistributedXATransaction txn = getTransaction(true);\r\n+        DistributedXATransaction txn = getTransactionOfCurrentThread(true);\r\n+        if (txn == null)\r\n+            return;\r\n         Set<XAResource> slices = txn.getEnlistedResources();\r\n         int branchId = 1;\r\n         for (XAResource slice : slices) {\r\n@@ -135,6 +146,8 @@ public void rollback() throws IllegalStateException, SecurityException,\n             } catch (XAException e) {\r\n             }\r\n         }\r\n+        txn.rollback();\r\n+        txns.set(null);\r\n     }\r\n \r\n     public void setRollbackOnly() throws IllegalStateException, SystemException {\r\n@@ -173,19 +186,49 @@ String toString(Object o) {\n      * transaction, a new transaction is created with a global identifier \r\n      * and associated with the current thread.\r\n      */\r\n-    DistributedXATransaction getTransaction(boolean mustExist) {\r\n-        DistributedXATransaction txn = txns.get();\r\n-        if (txn == null) {\r\n-            if (mustExist)\r\n-                throw new IllegalStateException(_loc.get(\"no-txn-on-thread\",\r\n-                        Thread.currentThread().getName()).getMessage());\r\n-            byte[] global =\r\n-                    Long.toHexString(System.currentTimeMillis()).getBytes();\r\n-            XID xid = new XID(0, global, new byte[] { 0x1 });\r\n-            txn = new DistributedXATransaction(xid, this);\r\n-            txns.set(txn);\r\n-        }\r\n+//    DistributedXATransaction getTransaction(boolean create, boolean mustExist) {\r\n+//        DistributedXATransaction txn = txns.get();\r\n+//        if (txn == null && mustExist) {\r\n+//            throw new IllegalStateException(_loc.get(\"no-txn-on-thread\",\r\n+//                Thread.currentThread().getName()).getMessage());\r\n+//        }\r\n+////        if (txn != null && !mustExist) {\r\n+////            throw new IllegalStateException(_loc.get(\"txn-exists--on-thread\",\r\n+////                 txn.getXID(), Thread.currentThread().getName()).getMessage());\r\n+////        }\r\n+//        if (create && txn == null) {\r\n+//        }\r\n+//        \r\n+//        \r\n+//        return txn;\r\n+//    }\r\n+    \r\n+//    DistributedXATransaction getTransactionOfCurrentThread() {\r\n+//        return txns.get();\r\n+//    }\r\n+    \r\n+    DistributedXATransaction getTransactionOfCurrentThread(boolean mustExist) {\r\n+        DistributedXATransaction txn =  txns.get();\r\n+        if (txn == null && mustExist)\r\n+            throw new IllegalStateException(_loc.get(\"no-txn-on-thread\",\r\n+            Thread.currentThread().getName()).getMessage());\r\n+        return txn;\r\n+    }\r\n+    \r\n+    DistributedXATransaction newTransaction() {\r\n+        DistributedXATransaction txn = getTransactionOfCurrentThread(false);\r\n+        if (txn != null)\r\n+            throw new IllegalStateException(_loc.get(\"txn-exists-on-thread\",\r\n+            txn.getXID(), Thread.currentThread().getName()).getMessage());\r\n+        \r\n+        byte[] global =\r\n+            Long.toHexString(System.currentTimeMillis()).getBytes();\r\n+        XID xid = new XID(0, global, new byte[] { 0x1 });\r\n+        txn = new DistributedXATransaction(xid, this);\r\n+        txns.set(txn);\r\n+        \r\n         return txn;\r\n     }\r\n+    \r\n \r\n }\r"},{"sha":"64cec78a024389cb7895b4aabaff3cb44504eb0f","filename":"openjpa-slice/src/main/java/org/apache/openjpa/slice/transaction/DistributedXATransaction.java","status":"modified","additions":8,"deletions":7,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/eaf452dcc266505f148c28b3558f5e052df6d89f/openjpa-slice/src/main/java/org/apache/openjpa/slice/transaction/DistributedXATransaction.java","raw_url":"https://github.com/apache/openjpa/raw/eaf452dcc266505f148c28b3558f5e052df6d89f/openjpa-slice/src/main/java/org/apache/openjpa/slice/transaction/DistributedXATransaction.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/main/java/org/apache/openjpa/slice/transaction/DistributedXATransaction.java?ref=eaf452dcc266505f148c28b3558f5e052df6d89f","patch":"@@ -25,6 +25,7 @@\n import javax.transaction.HeuristicMixedException;\r\n import javax.transaction.HeuristicRollbackException;\r\n import javax.transaction.RollbackException;\r\n+import javax.transaction.Status;\r\n import javax.transaction.Synchronization;\r\n import javax.transaction.SystemException;\r\n import javax.transaction.Transaction;\r\n@@ -39,13 +40,11 @@\n  *\r\n  */\r\n class DistributedXATransaction implements Transaction {\r\n-    private static ThreadLocal<Transaction> _trans = new ThreadLocal<Transaction>();\r\n     private Set<XAResource> _slices = new HashSet<XAResource>();\r\n     private Set<Synchronization> _syncs = new HashSet<Synchronization>();\r\n-    private final TransactionManager _tm;\r\n+//    private final TransactionManager _tm;\r\n     private final XID xid;\r\n     private int _status;\r\n-    private boolean _rollbackOnly;\r\n     \r\n     /**\r\n      * Construct with \r\n@@ -54,7 +53,7 @@\n      */\r\n     DistributedXATransaction(XID xid, TransactionManager tm) {\r\n         this.xid = xid;\r\n-        this._tm = tm;\r\n+        _status = Status.STATUS_ACTIVE;\r\n     }\r\n     \r\n     public XID getXID() {\r\n@@ -64,7 +63,8 @@ public XID getXID() {\n     public void commit() throws HeuristicMixedException,\r\n             HeuristicRollbackException, RollbackException, SecurityException,\r\n             SystemException {\r\n-        _tm.commit();\r\n+        _status = Status.STATUS_COMMITTED;\r\n+        _slices.clear();\r\n     }\r\n \r\n     public boolean delistResource(XAResource arg0, int arg1)\r\n@@ -87,11 +87,12 @@ public void registerSynchronization(Synchronization arg0)\n     }\r\n \r\n     public void rollback() throws IllegalStateException, SystemException {\r\n-        _tm.rollback();\r\n+        _status = Status.STATUS_ROLLEDBACK;\r\n+        _slices.clear();\r\n     }\r\n \r\n     public void setRollbackOnly() throws IllegalStateException, SystemException {\r\n-        _rollbackOnly = true;\r\n+        _status = Status.STATUS_MARKED_ROLLBACK;\r\n     }\r\n     \r\n     Set<XAResource> getEnlistedResources() {\r"},{"sha":"3b4e3476100595b7e4599d3d75fb77dabb347a32","filename":"openjpa-slice/src/main/java/org/apache/openjpa/slice/transaction/NaiveTransactionManager.java","status":"modified","additions":13,"deletions":2,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/eaf452dcc266505f148c28b3558f5e052df6d89f/openjpa-slice/src/main/java/org/apache/openjpa/slice/transaction/NaiveTransactionManager.java","raw_url":"https://github.com/apache/openjpa/raw/eaf452dcc266505f148c28b3558f5e052df6d89f/openjpa-slice/src/main/java/org/apache/openjpa/slice/transaction/NaiveTransactionManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/main/java/org/apache/openjpa/slice/transaction/NaiveTransactionManager.java?ref=eaf452dcc266505f148c28b3558f5e052df6d89f","patch":"@@ -18,6 +18,7 @@\n  */\r\n package org.apache.openjpa.slice.transaction;\r\n \r\n+import java.sql.SQLException;\r\n import java.util.Set;\r\n \r\n import javax.transaction.HeuristicMixedException;\r\n@@ -60,7 +61,12 @@ public void commit() throws HeuristicMixedException,\n         DistributedNaiveTransaction txn = getTransaction(false);\r\n         Set<SliceStoreManager> slices = txn.getEnlistedResources();\r\n         for (SliceStoreManager slice : slices) {\r\n-                slice.commit();\r\n+            try {\r\n+                if (!slice.getConnection().getAutoCommit())\r\n+                    slice.commit();\r\n+            } catch (SQLException e) {\r\n+                e.printStackTrace();\r\n+            }\r\n         }\r\n     }\r\n \r\n@@ -82,7 +88,12 @@ public void rollback() throws IllegalStateException, SecurityException,\n         DistributedNaiveTransaction txn = getTransaction(false);\r\n         Set<SliceStoreManager> slices = txn.getEnlistedResources();\r\n         for (SliceStoreManager slice : slices) {\r\n-            slice.commit();\r\n+            try {\r\n+                if (!slice.getConnection().getAutoCommit())\r\n+                    slice.rollback();\r\n+            } catch (SQLException e) {\r\n+                e.printStackTrace();\r\n+            }\r\n         }\r\n     }\r\n \r"},{"sha":"e21d0de7efd92e00a90452fb56f02895a033acc2","filename":"openjpa-slice/src/main/resources/org/apache/openjpa/slice/jdbc/localizer.properties","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/eaf452dcc266505f148c28b3558f5e052df6d89f/openjpa-slice/src/main/resources/org/apache/openjpa/slice/jdbc/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/eaf452dcc266505f148c28b3558f5e052df6d89f/openjpa-slice/src/main/resources/org/apache/openjpa/slice/jdbc/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/main/resources/org/apache/openjpa/slice/jdbc/localizer.properties?ref=eaf452dcc266505f148c28b3558f5e052df6d89f","patch":"@@ -50,10 +50,11 @@ slice-xa-disabled: Not all active slices \"{0}\" is XA-complaint and hence store \\\n two-phase: \"{3}\".{0}\"(xid=[{4}]] Connection={1} XAConnection={2} \r\n factory-init: Starting OpenJPA Slice {0}\r\n config-init: Configuring Slice {0}\r\n-no-slice-names: Slice identifiers are not listed in [slice.Names] property. \\\r\n+no-slice-names: Slice identifiers are not explicitly listed via \"{0}\" property.\\\r\n \tThe configuration will be scanned to determine slice identifiers.\r\n+no-slice: No slices are configured or available\r\n no-master-slice: No master slice has been configured explicitly in \\\r\n-\t[slice.Master] property. The first slice \"{0}\" in the list of configured \\\r\n+\t\"{0}\" property. The first slice \"{1}\" in the list of configured \\\r\n \tslices will be used as master. \r\n resource-xa-tm-not-2pc: All slices is using XA-complaint driver but the \\\r\n \tconfigured \"{0}\" transaction manager is not capable of enlisting XA-aware \\\r"},{"sha":"0ce630925ae4c13e203ea21c31f1ed6732cd9150","filename":"openjpa-slice/src/main/resources/org/apache/openjpa/slice/transaction/localizer.properties","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/eaf452dcc266505f148c28b3558f5e052df6d89f/openjpa-slice/src/main/resources/org/apache/openjpa/slice/transaction/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/eaf452dcc266505f148c28b3558f5e052df6d89f/openjpa-slice/src/main/resources/org/apache/openjpa/slice/transaction/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/main/resources/org/apache/openjpa/slice/transaction/localizer.properties?ref=eaf452dcc266505f148c28b3558f5e052df6d89f","patch":"@@ -15,5 +15,5 @@\n # specific language governing permissions and limitations\r\n # under the License.  \r\n no-txn-on-thread: No transaction is associated with current thread \"{0}\"\r\n-prepare-failed: one or more XA-complaint resources have failed to prepare for \\\r\n-\tcommit during the first phase of a two-phase commit protocol.\n\\ No newline at end of file\n+prepare-failed: One or more XA-complaint resources have failed to prepare for \\\r\n+\tcommit during the first phase of a two-phase commit protocol due to {0}\n\\ No newline at end of file"},{"sha":"4fdbe5010697aae5eab53ae6741a445a698ed3cd","filename":"openjpa-slice/src/test/java/org/apache/openjpa/slice/Address.java","status":"added","additions":82,"deletions":0,"changes":82,"blob_url":"https://github.com/apache/openjpa/blob/eaf452dcc266505f148c28b3558f5e052df6d89f/openjpa-slice/src/test/java/org/apache/openjpa/slice/Address.java","raw_url":"https://github.com/apache/openjpa/raw/eaf452dcc266505f148c28b3558f5e052df6d89f/openjpa-slice/src/test/java/org/apache/openjpa/slice/Address.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/test/java/org/apache/openjpa/slice/Address.java?ref=eaf452dcc266505f148c28b3558f5e052df6d89f","patch":"@@ -0,0 +1,82 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.slice;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+@Entity\r\n+public class Address {\r\n+    @Id\r\n+    @GeneratedValue\r\n+    private long id;\r\n+\r\n+    private String city;\r\n+    private int zip;\r\n+\r\n+    @OneToOne(mappedBy = \"address\")\r\n+    Person owner;\r\n+\r\n+    @Version\r\n+    private long version;\r\n+\r\n+    public long getVersion() {\r\n+        return version;\r\n+    }\r\n+\r\n+    public Address() {\r\n+        this(\"?\", 0);\r\n+    }\r\n+\r\n+    public Address(String city, int zip) {\r\n+        setCity(city);\r\n+        setZip(zip);\r\n+    }\r\n+\r\n+    public String getCity() {\r\n+        return city;\r\n+    }\r\n+\r\n+    public void setCity(String city) {\r\n+        this.city = city;\r\n+    }\r\n+\r\n+    public int getZip() {\r\n+        return zip;\r\n+    }\r\n+\r\n+    public void setZip(int zip) {\r\n+        this.zip = zip;\r\n+    }\r\n+\r\n+    public Person getOwner() {\r\n+        return owner;\r\n+    }\r\n+\r\n+    public void setOwner(Person owner) {\r\n+        this.owner = owner;\r\n+    }\r\n+\r\n+    public long getId() {\r\n+        return id;\r\n+    }\r\n+\r\n+    public String toString() {\r\n+        return city;\r\n+    }\r\n+}\r"},{"sha":"93c324dacce49927f575a715fd5f4df10821ea41","filename":"openjpa-slice/src/test/java/org/apache/openjpa/slice/PObject.java","status":"added","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/apache/openjpa/blob/eaf452dcc266505f148c28b3558f5e052df6d89f/openjpa-slice/src/test/java/org/apache/openjpa/slice/PObject.java","raw_url":"https://github.com/apache/openjpa/raw/eaf452dcc266505f148c28b3558f5e052df6d89f/openjpa-slice/src/test/java/org/apache/openjpa/slice/PObject.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/test/java/org/apache/openjpa/slice/PObject.java?ref=eaf452dcc266505f148c28b3558f5e052df6d89f","patch":"@@ -0,0 +1,50 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.slice;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+\r\n+@Entity\r\n+public class PObject {\r\n+\t@Id\r\n+\tprivate long id;\r\n+\t\r\n+\tprivate int value;\r\n+\t\r\n+\tpublic PObject() {\r\n+\t\tthis(System.currentTimeMillis());\r\n+\t}\r\n+\t\r\n+\tpublic PObject(long id) {\r\n+\t\tthis.id = id;\r\n+\t}\r\n+\t\r\n+\tpublic long getId() {\r\n+\t\treturn id;\r\n+\t}\r\n+\t\r\n+\tpublic int getValue() {\r\n+\t\treturn value;\r\n+\t}\r\n+\t\r\n+\tpublic void setValue(int i) {\r\n+\t\tvalue = i;\r\n+\t}\r\n+}\r"},{"sha":"af6c998861d494f8ba6099f8b27cae2dd6e0f08c","filename":"openjpa-slice/src/test/java/org/apache/openjpa/slice/PersistenceTestCase.java","status":"added","additions":243,"deletions":0,"changes":243,"blob_url":"https://github.com/apache/openjpa/blob/eaf452dcc266505f148c28b3558f5e052df6d89f/openjpa-slice/src/test/java/org/apache/openjpa/slice/PersistenceTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/eaf452dcc266505f148c28b3558f5e052df6d89f/openjpa-slice/src/test/java/org/apache/openjpa/slice/PersistenceTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/test/java/org/apache/openjpa/slice/PersistenceTestCase.java?ref=eaf452dcc266505f148c28b3558f5e052df6d89f","patch":"@@ -0,0 +1,243 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.slice;\r\n+\r\n+import java.lang.reflect.Modifier;\r\n+import java.util.ArrayList;\r\n+import java.util.Iterator;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.HashMap;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+import javax.persistence.Persistence;\r\n+\r\n+import junit.framework.TestCase;\r\n+import junit.framework.TestResult;\r\n+import org.apache.openjpa.kernel.AbstractBrokerFactory;\r\n+import org.apache.openjpa.kernel.Broker;\r\n+import org.apache.openjpa.meta.ClassMetaData;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\r\n+import org.apache.openjpa.persistence.JPAFacadeHelper;\r\n+\r\n+/**\r\n+ * Base test class providing persistence utilities.\r\n+ */\r\n+public abstract class PersistenceTestCase\r\n+    extends TestCase {\r\n+\r\n+    /**\r\n+     * Marker object you an pass to {@link #setUp} to indicate that the\r\n+     * database tables should be cleared.\r\n+     */\r\n+    protected static final Object CLEAR_TABLES = new Object();\r\n+\r\n+    /**\r\n+     * The {@link TestResult} instance for the current test run.\r\n+     */\r\n+    protected TestResult testResult;\r\n+\r\n+    /**\r\n+     * Create an entity manager factory. Put {@link #CLEAR_TABLES} in\r\n+     * this list to tell the test framework to delete all table contents\r\n+     * before running the tests.\r\n+     *\r\n+     * @param props list of persistent types used in testing and/or\r\n+     * configuration values in the form key,value,key,value...\r\n+     */\r\n+    protected OpenJPAEntityManagerFactorySPI createEMF(Object... props) {\r\n+        return createNamedEMF(getPersistenceUnitName(), props);\r\n+    }\r\n+\r\n+    /**\r\n+     * The name of the persistence unit that this test class should use\r\n+     * by default. This defaults to \"test\".\r\n+     */\r\n+    protected String getPersistenceUnitName() {\r\n+        return \"test\";\r\n+    }\r\n+\r\n+    /**\r\n+     * Create an entity manager factory for persistence unit <code>pu</code>.\r\n+     * Put {@link #CLEAR_TABLES} in\r\n+     * this list to tell the test framework to delete all table contents\r\n+     * before running the tests.\r\n+     *\r\n+     * @param props list of persistent types used in testing and/or\r\n+     * configuration values in the form key,value,key,value...\r\n+     */\r\n+    protected OpenJPAEntityManagerFactorySPI createNamedEMF(String pu,\r\n+        Object... props) {\r\n+        Map map = new HashMap(System.getProperties());\r\n+        List<Class> types = new ArrayList<Class>();\r\n+        boolean prop = false;\r\n+        for (int i = 0; i < props.length; i++) {\r\n+            if (prop) {\r\n+                map.put(props[i - 1], props[i]);\r\n+                prop = false;\r\n+            } else if (props[i] == CLEAR_TABLES) {\r\n+                map.put(\"openjpa.jdbc.SynchronizeMappings\",\r\n+                    \"buildSchema(ForeignKeys=true,\" \r\n+                    + \"SchemaAction='add,deleteTableContents')\");\r\n+            } else if (props[i] instanceof Class)\r\n+                types.add((Class) props[i]);\r\n+            else if (props[i] != null)\r\n+                prop = true;\r\n+        }\r\n+\r\n+        if (!types.isEmpty()) {\r\n+            StringBuffer buf = new StringBuffer();\r\n+            for (Class c : types) {\r\n+                if (buf.length() > 0)\r\n+                    buf.append(\";\");\r\n+                buf.append(c.getName());\r\n+            }\r\n+            map.put(\"openjpa.MetaDataFactory\",\r\n+                \"jpa(Types=\" + buf.toString() + \")\");\r\n+        }\r\n+\r\n+        return (OpenJPAEntityManagerFactorySPI) Persistence.\r\n+            createEntityManagerFactory(pu, map);\r\n+    }\r\n+\r\n+    @Override\r\n+    public void run(TestResult testResult) {\r\n+        this.testResult = testResult;\r\n+        super.run(testResult);\r\n+    }\r\n+\r\n+    @Override\r\n+    public void tearDown() throws Exception {\r\n+        try {\r\n+            super.tearDown();\r\n+        } catch (Exception e) {\r\n+            // if a test failed, swallow any exceptions that happen\r\n+            // during tear-down, as these just mask the original problem.\r\n+            if (testResult.wasSuccessful())\r\n+                throw e;\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Safely close the given factory.\r\n+     */\r\n+    protected boolean closeEMF(EntityManagerFactory emf) {\r\n+        if (emf == null || !emf.isOpen())\r\n+            return false;\r\n+        \r\n+        closeAllOpenEMs(emf);\r\n+        emf.close();\r\n+        return !emf.isOpen();\r\n+    }\r\n+\r\n+    /**\r\n+     * Closes all open entity managers after first rolling back any open transactions\r\n+     */\r\n+    protected void closeAllOpenEMs(EntityManagerFactory emf) {\r\n+        if (emf == null || !emf.isOpen())\r\n+            return;\r\n+\r\n+        for (Iterator iter = ((AbstractBrokerFactory) JPAFacadeHelper\r\n+            .toBrokerFactory(emf)).getOpenBrokers().iterator();\r\n+            iter.hasNext(); ) {\r\n+            Broker b = (Broker) iter.next();\r\n+            if (b != null && !b.isClosed()) {\r\n+                EntityManager em = JPAFacadeHelper.toEntityManager(b);\r\n+                if (em.getTransaction().isActive())\r\n+                    em.getTransaction().rollback();\r\n+                em.close();\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Delete all instances of the given types using bulk delete queries,\r\n+     * but do not close any open entity managers.\r\n+     */\r\n+    protected void clear(EntityManagerFactory emf, Class... types) {\r\n+        if (emf == null || types.length == 0)\r\n+            return;\r\n+\r\n+        List<ClassMetaData> metas = new ArrayList<ClassMetaData>(types.length);\r\n+        for (Class c : types) {\r\n+            ClassMetaData meta = JPAFacadeHelper.getMetaData(emf, c);\r\n+            if (meta != null)\r\n+                metas.add(meta);\r\n+        }\r\n+        clear(emf, false, metas.toArray(new ClassMetaData[metas.size()]));\r\n+    }\r\n+\r\n+    /**\r\n+     * Delete all instances of the persistent types registered with the given\r\n+     * factory using bulk delete queries, after first closing all open entity\r\n+     * managers (and rolling back any open transactions).\r\n+     */\r\n+    protected void clear(EntityManagerFactory emf) {\r\n+        if (emf == null)\r\n+            return;\r\n+        clear(emf, true, ((OpenJPAEntityManagerFactorySPI) emf).getConfiguration().\r\n+            getMetaDataRepositoryInstance().getMetaDatas());\r\n+    }\r\n+\r\n+    /**\r\n+     * Delete all instances of the given types using bulk delete queries.\r\n+     * @param closeEMs TODO\r\n+     */\r\n+    private void clear(EntityManagerFactory emf, boolean closeEMs, ClassMetaData... types) {\r\n+        if (emf == null || types.length == 0)\r\n+            return;\r\n+        \r\n+        // prevent deadlock by closing the open entity managers \r\n+        // and rolling back any open transactions \r\n+        // before issuing delete statements on a new entity manager.\r\n+        if (closeEMs)\r\n+            closeAllOpenEMs(emf);\r\n+\r\n+        EntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        for (ClassMetaData meta : types) {\r\n+            if (!meta.isMapped() || meta.isEmbeddedOnly() \r\n+                || Modifier.isAbstract(meta.getDescribedType().getModifiers()))\r\n+                continue;\r\n+            List all = em.createQuery(\"SELECT o FROM \" + meta.getTypeAlias() + \" o\").\r\n+                getResultList();\r\n+            for (Object pc:all)\r\n+                em.remove(pc);\r\n+        }\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+    }\r\n+\r\n+    /**\r\n+     * Return the entity name for the given type.   \r\n+     */\r\n+    protected String entityName(EntityManagerFactory emf, Class c) {\r\n+        ClassMetaData meta = JPAFacadeHelper.getMetaData(emf, c);\r\n+        return (meta == null) ? null : meta.getTypeAlias();\r\n+    }\r\n+\r\n+    public static void assertNotEquals(Object o1, Object o2) {\r\n+        if (o1 == o2)\r\n+            fail(\"expected args to be different; were the same instance.\");\r\n+        else if (o1 == null || o2 == null)\r\n+            return;\r\n+        else if (o1.equals(o2))\r\n+            fail(\"expected args to be different; compared equal.\");\r\n+    }\r\n+}\r"},{"sha":"36a87d2a3d97cc74c19c980341671d3acb29a479","filename":"openjpa-slice/src/test/java/org/apache/openjpa/slice/Person.java","status":"added","additions":73,"deletions":0,"changes":73,"blob_url":"https://github.com/apache/openjpa/blob/eaf452dcc266505f148c28b3558f5e052df6d89f/openjpa-slice/src/test/java/org/apache/openjpa/slice/Person.java","raw_url":"https://github.com/apache/openjpa/raw/eaf452dcc266505f148c28b3558f5e052df6d89f/openjpa-slice/src/test/java/org/apache/openjpa/slice/Person.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/test/java/org/apache/openjpa/slice/Person.java?ref=eaf452dcc266505f148c28b3558f5e052df6d89f","patch":"@@ -0,0 +1,73 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.slice;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+@Entity\r\n+public class Person {\r\n+\t@Id\r\n+\t@GeneratedValue\r\n+\tprivate long id;\r\n+\r\n+\tprivate String name;\r\n+\t\r\n+\t@Version\r\n+\tprivate long version;\r\n+\r\n+\t@OneToOne(cascade=CascadeType.ALL)\r\n+\tprivate Address address;\r\n+\r\n+\tpublic Person() {\r\n+\t\tthis(\"?\");\r\n+\t}\r\n+\t\r\n+\tpublic Person(String name) {\r\n+\t\tsetName(name);\r\n+\t}\r\n+\t\r\n+\tpublic String getName() {\r\n+\t\treturn name;\r\n+\t}\r\n+\r\n+\tpublic void setName(String name) {\r\n+\t\tthis.name = name;\r\n+\t}\r\n+\r\n+\tpublic Address getAddress() {\r\n+\t\treturn address;\r\n+\t}\r\n+\r\n+\tpublic void setAddress(Address address) {\r\n+\t\tthis.address = address;\r\n+\t\taddress.setOwner(this);\r\n+\t}\r\n+\r\n+\tpublic long getId() {\r\n+\t\treturn id;\r\n+\t}\r\n+\t\r\n+\tpublic String toString() {\r\n+\t\treturn name;\r\n+\t}\r\n+\r\n+    public long getVersion() {\r\n+        return version;\r\n+    }\r\n+}\r"},{"sha":"417edc7de810829aad2dd8e3aa0d35e68db176c9","filename":"openjpa-slice/src/test/java/org/apache/openjpa/slice/SingleEMFTestCase.java","status":"added","additions":76,"deletions":0,"changes":76,"blob_url":"https://github.com/apache/openjpa/blob/eaf452dcc266505f148c28b3558f5e052df6d89f/openjpa-slice/src/test/java/org/apache/openjpa/slice/SingleEMFTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/eaf452dcc266505f148c28b3558f5e052df6d89f/openjpa-slice/src/test/java/org/apache/openjpa/slice/SingleEMFTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/test/java/org/apache/openjpa/slice/SingleEMFTestCase.java?ref=eaf452dcc266505f148c28b3558f5e052df6d89f","patch":"@@ -0,0 +1,76 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.slice;\r\n+\r\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\r\n+\r\n+public abstract class SingleEMFTestCase\r\n+    extends PersistenceTestCase {\r\n+\r\n+    protected OpenJPAEntityManagerFactorySPI emf;\r\n+\r\n+    /**\r\n+     * Call {@link #setUp(Object...)} with no arguments so that the emf\r\n+     * set-up happens even if <code>setUp()</code> is not called from the\r\n+     * subclass.\r\n+     */\r\n+    public void setUp() throws Exception {\r\n+        setUp(new Object[0]);\r\n+    }\r\n+\r\n+    /**\r\n+     * Initialize entity manager factory. Put {@link #CLEAR_TABLES} in\r\n+     * this list to tell the test framework to delete all table contents\r\n+     * before running the tests.\r\n+     *\r\n+     * @param props list of persistent types used in testing and/or \r\n+     * configuration values in the form key,value,key,value...\r\n+     */\r\n+    protected void setUp(Object... props) {\r\n+        emf = createEMF(props);\r\n+    }\r\n+\r\n+    /**\r\n+     * Closes the entity manager factory.\r\n+     */\r\n+    public void tearDown() throws Exception {\r\n+        super.tearDown();\r\n+\r\n+        if (emf == null)\r\n+            return;\r\n+\r\n+        try {\r\n+            clear(emf);\r\n+        } catch (Exception e) {\r\n+            // if a test failed, swallow any exceptions that happen\r\n+            // during tear-down, as these just mask the original problem.\r\n+            if (testResult.wasSuccessful())\r\n+                throw e;\r\n+        } finally {\r\n+            closeEMF(emf);\r\n+        }\r\n+    }\r\n+    \r\n+    protected ClassMapping getMapping(String name) {\r\n+        return (ClassMapping) emf.getConfiguration()\r\n+                .getMetaDataRepositoryInstance().getMetaData(name,\r\n+                        getClass().getClassLoader(), true);\r\n+    }\r\n+}\r"},{"sha":"4697ef8d92fadeb558c03e181db655a30c80694c","filename":"openjpa-slice/src/test/java/org/apache/openjpa/slice/SliceTestCase.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/apache/openjpa/blob/eaf452dcc266505f148c28b3558f5e052df6d89f/openjpa-slice/src/test/java/org/apache/openjpa/slice/SliceTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/eaf452dcc266505f148c28b3558f5e052df6d89f/openjpa-slice/src/test/java/org/apache/openjpa/slice/SliceTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/test/java/org/apache/openjpa/slice/SliceTestCase.java?ref=eaf452dcc266505f148c28b3558f5e052df6d89f","patch":"@@ -0,0 +1,41 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.slice;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+\r\n+import org.apache.openjpa.slice.jdbc.DistributedJDBCConfiguration;\r\n+\r\n+public abstract class SliceTestCase extends SingleEMFTestCase {\r\n+    protected void setUp(Object... props) {\r\n+        super.setUp(props);\r\n+        assertTrue(emf.getClass() + \" is not a slice configuration. Check\" +\r\n+            \" that BrokerFactory for the persistence unit is set to slice\",\r\n+             emf.getConfiguration() instanceof DistributedJDBCConfiguration);\r\n+        \r\n+    }\r\n+    \r\n+    int count(Class<?> type) {\r\n+        EntityManager em = emf.createEntityManager();\r\n+        String query = \"SELECT COUNT(p) FROM \" + type.getSimpleName() + \" p\";\r\n+        Number number = (Number) em.createQuery(query).getSingleResult();\r\n+        return number.intValue();\r\n+    }\r\n+    \r\n+}\r"},{"sha":"2b6220ae48edd9cee4b541d9eb78d16bda33a5a1","filename":"openjpa-slice/src/test/java/org/apache/openjpa/slice/TestBasic.java","status":"added","additions":161,"deletions":0,"changes":161,"blob_url":"https://github.com/apache/openjpa/blob/eaf452dcc266505f148c28b3558f5e052df6d89f/openjpa-slice/src/test/java/org/apache/openjpa/slice/TestBasic.java","raw_url":"https://github.com/apache/openjpa/raw/eaf452dcc266505f148c28b3558f5e052df6d89f/openjpa-slice/src/test/java/org/apache/openjpa/slice/TestBasic.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/test/java/org/apache/openjpa/slice/TestBasic.java?ref=eaf452dcc266505f148c28b3558f5e052df6d89f","patch":"@@ -0,0 +1,161 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.slice;\r\n+\r\n+import java.util.List;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+\r\n+public class TestBasic extends SliceTestCase {\r\n+\tprivate static String persistenceUnitName = \"slice\";\r\n+\r\n+\tpublic void setUp() throws Exception {\r\n+\t\tsuper.setUp(PObject.class, Person.class, Address.class);\r\n+\t}\r\n+\t\r\n+\tPObject persist() {\r\n+\t\tEntityManager em = emf.createEntityManager();\r\n+\t\tint value = (int)(System.currentTimeMillis()%100);\r\n+\t\tPObject pc = new PObject();\r\n+\t\tem.getTransaction().begin();\r\n+\t\tem.persist(pc);\r\n+\t\tpc.setValue(value);\r\n+\t\tem.getTransaction().commit();\r\n+\t\tem.clear();\r\n+\t\treturn pc;\r\n+\t}\r\n+\r\n+\tpublic void testDelete() {\r\n+        EntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        List all = em.createQuery(\"SELECT p FROM PObject p\").getResultList();\r\n+        for (Object pc:all)\r\n+            em.remove(pc);\r\n+        em.getTransaction().commit();\r\n+        \r\n+        int count = count(PObject.class);\r\n+        assertEquals(0, count);\r\n+        \r\n+\t}\r\n+\t\r\n+\t   public void testBulkDelete() {\r\n+\t        EntityManager em = emf.createEntityManager();\r\n+\t        em.getTransaction().begin();\r\n+\t        int c = count(PObject.class);\r\n+\t        int d = em.createQuery(\"DELETE FROM PObject p\").executeUpdate();\r\n+\t        assertEquals(c, d);\r\n+\t        em.getTransaction().commit();\r\n+\t        \r\n+\t        c = count(PObject.class);\r\n+\t        assertEquals(0, c);\r\n+\t        \r\n+\t    }\r\n+\r\n+\t/**\r\n+\t * Stores and finds the same object.\r\n+\t */\r\n+\tpublic void testFind() {\r\n+\t\tPObject pc = persist();\r\n+\t\tint value = pc.getValue();\r\n+\t\t\r\n+\t\tEntityManager em = emf.createEntityManager();\r\n+\t\tem.getTransaction().begin();\r\n+\t\tPObject pc2 = em.find(PObject.class, pc.getId());\r\n+\t\tassertNotNull(pc2);\r\n+\t\tassertNotEquals(pc, pc2);\r\n+\t\tassertEquals(pc.getId(), pc2.getId());\r\n+\t\tassertEquals(value, pc2.getValue());\r\n+\t}\r\n+\t\r\n+\tpublic void testPersistIndependentObjects() {\r\n+\t\tint before = count(PObject.class);\r\n+\t\tEntityManager em = emf.createEntityManager();\r\n+\t\tint N = 2;\r\n+\t\tlong start = System.currentTimeMillis();\r\n+\t\tem.getTransaction().begin();\r\n+\t\tfor (int i=0; i<N; i++)\r\n+\t\t\tem.persist(new PObject(start++));\r\n+\t\tem.getTransaction().commit();\r\n+\t\tem.clear();\r\n+\t\tint after = count(PObject.class);\r\n+\t\tassertEquals(before+N, after);\r\n+\t}\r\n+\t\r\n+\tpublic void testPersistConnectedObjectGraph() {\r\n+\t\tPerson p1 = new Person(\"A\");\r\n+\t\tPerson p2 = new Person(\"B\");\r\n+\t\tPerson p3 = new Person(\"C\");\r\n+\t\tAddress a1 = new Address(\"Rome\", 12345);\r\n+\t\tAddress a2 = new Address(\"San Francisco\", 23456);\r\n+\t\tAddress a3 = new Address(\"New York\", 34567);\r\n+\t\tp1.setAddress(a1);\r\n+\t\tp2.setAddress(a2);\r\n+\t\tp3.setAddress(a3);\r\n+\t\t\r\n+\t\tEntityManager em = emf.createEntityManager();\r\n+\t\tem.getTransaction().begin();\r\n+\t\tem.persist(p1);\r\n+\t\tem.persist(p2);\r\n+\t\tem.persist(p3);\r\n+\t\tem.getTransaction().commit();\r\n+\t\t\r\n+\t\tem.clear();\r\n+\t\t\r\n+\t\tem = emf.createEntityManager();\r\n+\t\tem.getTransaction().begin();\r\n+\t\tList<Person> persons = em.createQuery(\"SELECT p FROM Person p WHERE p.name=?1\").\r\n+\t\t\tsetParameter(1, \"A\").getResultList();\r\n+\t\tList<Address> addresses = em.createQuery(\"SELECT a FROM Address a\").getResultList();\r\n+\t\tfor (Address pc:addresses) {\r\n+\t\t\tassertNotNull(pc.getCity());\r\n+\t\t\tassertNotNull(pc.getOwner().getName());\r\n+\t\t}\r\n+\t\tfor (Person pc:persons) {\r\n+\t\t    assertNotNull(pc.getName());\r\n+\t\t    assertNotNull(pc.getAddress().getCity());\r\n+\t\t}\r\n+\t\tem.getTransaction().rollback();\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Merge only works if the distribution policy assigns the correct slice\r\n+\t * from which the instance was fetched.\r\n+\t */\r\n+\tpublic void testMerge() {\r\n+\t\tPObject pc = persist();\r\n+\t\tint value = pc.getValue();\r\n+\t\tpc.setValue(value+1);\r\n+\t\tassertNotNull(pc);\r\n+\t\tEntityManager em = emf.createEntityManager();\r\n+\t\tem.getTransaction().begin();\r\n+\t\tPObject pc2 = em.merge(pc);\r\n+\t\tem.getTransaction().commit();\r\n+\t\tem.clear();\r\n+\t\t\r\n+\t\tassertNotNull(pc2);\r\n+\t\tassertNotEquals(pc, pc2);\r\n+\t\tassertEquals(pc.getId(), pc2.getId());\r\n+\t\tassertEquals(value+1, pc2.getValue());\r\n+\t}\r\n+\t\r\n+    protected String getPersistenceUnitName() {\r\n+        return persistenceUnitName;\r\n+    }\r\n+\r\n+}\r"},{"sha":"475a3d0494acb3ae0efab8ed9e9c4c2d73214441","filename":"openjpa-slice/src/test/java/org/apache/openjpa/slice/TestConfiguration.java","status":"added","additions":75,"deletions":0,"changes":75,"blob_url":"https://github.com/apache/openjpa/blob/eaf452dcc266505f148c28b3558f5e052df6d89f/openjpa-slice/src/test/java/org/apache/openjpa/slice/TestConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/eaf452dcc266505f148c28b3558f5e052df6d89f/openjpa-slice/src/test/java/org/apache/openjpa/slice/TestConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/test/java/org/apache/openjpa/slice/TestConfiguration.java?ref=eaf452dcc266505f148c28b3558f5e052df6d89f","patch":"@@ -0,0 +1,75 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.slice;\r\n+\r\n+import java.util.List;\r\n+\r\n+import org.apache.openjpa.kernel.Broker;\r\n+import org.apache.openjpa.kernel.BrokerFactory;\r\n+import org.apache.openjpa.persistence.EntityManagerFactoryImpl;\r\n+import org.apache.openjpa.slice.jdbc.DistributedJDBCBrokerFactory;\r\n+import org.apache.openjpa.slice.jdbc.DistributedJDBCConfiguration;\r\n+import org.apache.openjpa.slice.transaction.NaiveTransactionManager;\r\n+\r\n+/**\r\n+ * \r\n+ * @author Pinaki Poddar \r\n+ *\r\n+ */\r\n+public class TestConfiguration extends SliceTestCase {\r\n+\t/**\r\n+\t * Tests that user-level configurations are set.\r\n+\t * \r\n+\t */\r\n+\tpublic void testConfig() {\r\n+\t\tassertTrue(emf.getConfiguration() instanceof DistributedConfiguration);\r\n+\t\tDistributedJDBCConfiguration conf = (DistributedJDBCConfiguration)\r\n+\t\t    emf.getConfiguration();\r\n+\t\tList<String> slices = conf.getAvailableSliceNames();\r\n+\t\tassertTrue(slices.size()>1);\r\n+\t\tassertTrue(slices.contains(\"One\"));\r\n+        assertTrue(slices.contains(\"Two\"));\r\n+        assertTrue(slices.contains(\"Three\"));\r\n+\t\tassertEquals(\"jdbc:mysql://localhost/slice1\", conf.getSlice(\"One\").getConfiguration().getConnectionURL());\r\n+        assertEquals(\"jdbc:mysql://localhost/slice2\", conf.getSlice(\"Two\").getConfiguration().getConnectionURL());\r\n+        assertEquals(\"jdbc:mysql://localhost/slice3\", conf.getSlice(\"Three\").getConfiguration().getConnectionURL());\r\n+        assertTrue(conf.getTransactionManagerInstance() instanceof NaiveTransactionManager);\r\n+\t\tBrokerFactory bf = ((EntityManagerFactoryImpl)emf).getBrokerFactory();\r\n+\t\tBroker broker = bf.newBroker();\r\n+\t\tassertEquals(DistributedJDBCBrokerFactory.class, bf.getClass());\r\n+\t\tassertEquals(DistributedBrokerImpl.class, broker.getClass());\r\n+\t\tassertNotNull(conf.getDistributionPolicyInstance());\r\n+\t\t\r\n+\t\t\r\n+\t\temf.createEntityManager();\r\n+\t\t\r\n+        slices = conf.getActiveSliceNames();\r\n+        assertTrue(slices.size()>1);\r\n+        assertTrue(slices.contains(\"One\"));\r\n+        assertTrue(slices.contains(\"Two\"));\r\n+        assertFalse(slices.contains(\"Three\"));\r\n+        \r\n+        conf.getExecutorServiceInstance();\r\n+\t}\r\n+\t\r\n+    protected String getPersistenceUnitName() {\r\n+        return \"per-slice\";\r\n+    }\r\n+\r\n+}\r"},{"sha":"db0f4d0a57417c6f2b89e883125289ad25b151ff","filename":"openjpa-slice/src/test/java/org/apache/openjpa/slice/TestQuery.java","status":"added","additions":71,"deletions":0,"changes":71,"blob_url":"https://github.com/apache/openjpa/blob/eaf452dcc266505f148c28b3558f5e052df6d89f/openjpa-slice/src/test/java/org/apache/openjpa/slice/TestQuery.java","raw_url":"https://github.com/apache/openjpa/raw/eaf452dcc266505f148c28b3558f5e052df6d89f/openjpa-slice/src/test/java/org/apache/openjpa/slice/TestQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/test/java/org/apache/openjpa/slice/TestQuery.java?ref=eaf452dcc266505f148c28b3558f5e052df6d89f","patch":"@@ -0,0 +1,71 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.slice;\r\n+\r\n+import java.util.List;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.Query;\r\n+\r\n+import org.apache.openjpa.slice.SlicePersistence;\r\n+\r\n+public class TestQuery extends SliceTestCase {\r\n+    public void setUp() throws Exception {\r\n+        super.setUp(PObject.class, Person.class, Address.class);\r\n+        EntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        long id = System.currentTimeMillis();\r\n+        for (int i=0;i<0;i++) {\r\n+            PObject pc = new PObject(id++);\r\n+            pc.setValue(i);\r\n+            em.persist(pc);\r\n+            String slice = SlicePersistence.getSlice(pc);\r\n+            String expected = (i%2 == 0) ? \"Even\" : \"Odd\";\r\n+            assertEquals(expected, slice);\r\n+        }\r\n+        em.getTransaction().commit();\r\n+    }\r\n+    \r\n+    public void testQueryResultIsOrderedAcrossSlice() {\r\n+        EntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        Query query = em.createQuery(\"SELECT p.value,p FROM PObject p ORDER BY p.value ASC\");\r\n+        List result = query.getResultList();\r\n+        Integer old = Integer.MIN_VALUE;\r\n+        for (Object row:result) {\r\n+            Object[] line = (Object[])row;\r\n+            int value = ((Integer)line[0]).intValue();\r\n+            PObject pc = (PObject)line[1];\r\n+            assertTrue(value >= old);\r\n+            old = value;\r\n+            assertEquals(value, pc.getValue());\r\n+        }\r\n+        em.getTransaction().commit();\r\n+    }\r\n+    \r\n+    public void testAggregateQuery() {\r\n+        EntityManager em = emf.createEntityManager();\r\n+        List result = em.createQuery(\"SELECT COUNT(p) FROM PObject p\").getResultList();\r\n+        for (Object r:result)\r\n+            System.err.println(r);\r\n+    }\r\n+    protected String getPersistenceUnitName() {\r\n+        return \"ordering\";\r\n+    }\r\n+}\r"},{"sha":"af236a6e8447bd7e6b2f373f2da7597f463b96b4","filename":"openjpa-slice/src/test/java/org/apache/openjpa/slice/TestXA.java","status":"added","additions":57,"deletions":0,"changes":57,"blob_url":"https://github.com/apache/openjpa/blob/eaf452dcc266505f148c28b3558f5e052df6d89f/openjpa-slice/src/test/java/org/apache/openjpa/slice/TestXA.java","raw_url":"https://github.com/apache/openjpa/raw/eaf452dcc266505f148c28b3558f5e052df6d89f/openjpa-slice/src/test/java/org/apache/openjpa/slice/TestXA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/test/java/org/apache/openjpa/slice/TestXA.java?ref=eaf452dcc266505f148c28b3558f5e052df6d89f","patch":"@@ -0,0 +1,57 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.slice;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+public class TestXA extends SliceTestCase {\r\n+    public void setUp() throws Exception {\r\n+        super.setUp(PObject.class, Person.class, Address.class);\r\n+    }\r\n+    public void testEmptyCommit() {\r\n+        EntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        em.getTransaction().commit();\r\n+    }\r\n+    public void testEmptyRollback() {\r\n+        EntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        em.getTransaction().rollback();\r\n+    }\r\n+    \r\n+\tpublic void testPersistIndependentObjects() {\r\n+\t\tEntityManager em = emf.createEntityManager();\r\n+        int before = count(PObject.class);\r\n+\t\tint N = 2;\r\n+\t\tlong start = System.currentTimeMillis();\r\n+\t\tem.getTransaction().begin();\r\n+\t\tfor (int i=0; i<N; i++)\r\n+\t\t\tem.persist(new PObject(start++));\r\n+\t\tem.getTransaction().commit();\r\n+\t\tem.clear();\r\n+\t\tint after = count(PObject.class);\r\n+\t\tassertEquals(before+N, after);\r\n+\t}\r\n+\t\r\n+    protected String getPersistenceUnitName() {\r\n+        return \"XA\";\r\n+    }\r\n+    \r\n+\r\n+}\r"},{"sha":"5cb7970b0742a5a7e950cfaa7718e555cb4a4f94","filename":"openjpa-slice/src/test/java/org/apache/openjpa/slice/policy/EvenOddDistributionPolicy.java","status":"added","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/apache/openjpa/blob/eaf452dcc266505f148c28b3558f5e052df6d89f/openjpa-slice/src/test/java/org/apache/openjpa/slice/policy/EvenOddDistributionPolicy.java","raw_url":"https://github.com/apache/openjpa/raw/eaf452dcc266505f148c28b3558f5e052df6d89f/openjpa-slice/src/test/java/org/apache/openjpa/slice/policy/EvenOddDistributionPolicy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/test/java/org/apache/openjpa/slice/policy/EvenOddDistributionPolicy.java?ref=eaf452dcc266505f148c28b3558f5e052df6d89f","patch":"@@ -0,0 +1,36 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.slice.policy;\r\n+\r\n+import java.util.List;\r\n+\r\n+import org.apache.openjpa.slice.DistributionPolicy;\r\n+\r\n+import org.apache.openjpa.slice.*;\r\n+\r\n+public class EvenOddDistributionPolicy implements DistributionPolicy {\r\n+    public String distribute(Object pc, List<String> slices, Object context) {\r\n+        if (pc instanceof PObject) {\r\n+            int v = ((PObject)pc).getValue();\r\n+            return (v%2 == 0) ? \"Even\" : \"Odd\";\r\n+        }\r\n+        return null;\r\n+    }\r\n+\r\n+}\r"},{"sha":"d19dd7122afcc72ac5469c596abff6397752fd18","filename":"openjpa-slice/src/test/java/org/apache/openjpa/slice/policy/UserDistributionPolicy.java","status":"added","additions":78,"deletions":0,"changes":78,"blob_url":"https://github.com/apache/openjpa/blob/eaf452dcc266505f148c28b3558f5e052df6d89f/openjpa-slice/src/test/java/org/apache/openjpa/slice/policy/UserDistributionPolicy.java","raw_url":"https://github.com/apache/openjpa/raw/eaf452dcc266505f148c28b3558f5e052df6d89f/openjpa-slice/src/test/java/org/apache/openjpa/slice/policy/UserDistributionPolicy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/test/java/org/apache/openjpa/slice/policy/UserDistributionPolicy.java?ref=eaf452dcc266505f148c28b3558f5e052df6d89f","patch":"@@ -0,0 +1,78 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.slice.policy;\r\n+\r\n+import java.util.List;\r\n+\r\n+import org.apache.openjpa.slice.DistributionPolicy;\r\n+\r\n+import org.apache.openjpa.slice.PObject;\r\n+import org.apache.openjpa.slice.Person;\r\n+\r\n+\r\n+/**\r\n+ * Exemplar {@link DistributionPolicy} that maintains closure and distributes\r\n+ * based on attributes of the given instance. \r\n+ * \r\n+ * @author Pinaki Poddar \r\n+ *\r\n+ */\r\n+public class UserDistributionPolicy implements DistributionPolicy {\r\n+\r\n+\t/**\r\n+\t * Distribute the given instance.\r\n+\t * Assumes that two configured slices are named as <em>One</em> and \r\n+\t * <em>Two</em>.<br>\r\n+\t * The policy is only implemented for PObject and Person i.e. two of three \r\n+\t * known classes. No policy is implemented for Address because Address is\r\n+\t * persisted always by cascade and hence Slice should assign automatically\r\n+\t * the same slice as its owner Person. \r\n+\t * \r\n+\t */\r\n+\tpublic String distribute(Object pc, List<String> slices, Object context) {\r\n+\t\tassertValidSlices(slices);\r\n+\t\tif (pc instanceof PObject)\r\n+\t\t\treturn distribute((PObject)pc);\r\n+\t\tif (pc instanceof Person) {\r\n+\t\t\treturn distribute((Person)pc);\r\n+\t\t}\r\n+\t\tthrow new RuntimeException(\"No policy for \" + pc.getClass());\r\n+\t}\r\n+\t\r\n+\tvoid assertValidSlices(List<String> slices) {\r\n+\t\tif (slices.contains(\"One\") && slices.contains(\"Two\"))\r\n+\t\t\treturn;\r\n+\t\tthrow new RuntimeException(\"This policy assumes two slices named \" +\r\n+\t\t\t\t\"One and Two. But configured slices are \" + slices); \r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Distribute PObject based on odd-even value of its id.\r\n+\t */\r\n+\tString distribute(PObject pc) {\r\n+\t\treturn (pc.getId()%2 == 0) ? \"One\" : \"Two\";\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Distribute Person based on first character of its name.\r\n+\t */\r\n+\tString distribute(Person pc) {\r\n+\t\treturn (pc.getName().startsWith(\"A\")) ? \"One\" : \"Two\";\r\n+\t}\r\n+}\r"},{"sha":"108bd600799e5040520f41151b7746ce4fb37688","filename":"openjpa-slice/src/test/resources/META-INF/persistence.xml","status":"added","additions":118,"deletions":0,"changes":118,"blob_url":"https://github.com/apache/openjpa/blob/eaf452dcc266505f148c28b3558f5e052df6d89f/openjpa-slice/src/test/resources/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/eaf452dcc266505f148c28b3558f5e052df6d89f/openjpa-slice/src/test/resources/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/test/resources/META-INF/persistence.xml?ref=eaf452dcc266505f148c28b3558f5e052df6d89f","patch":"@@ -0,0 +1,118 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n+<!--\r\n+ Licensed to the Apache Software Foundation (ASF) under one\r\n+ or more contributor license agreements.  See the NOTICE file\r\n+ distributed with this work for additional information\r\n+ regarding copyright ownership.  The ASF licenses this file\r\n+ to you under the Apache License, Version 2.0 (the\r\n+ \"License\"); you may not use this file except in compliance\r\n+ with the License.  You may obtain a copy of the License at\r\n+\r\n+ http://www.apache.org/licenses/LICENSE-2.0\r\n+\r\n+ Unless required by applicable law or agreed to in writing,\r\n+ software distributed under the License is distributed on an\r\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ KIND, either express or implied.  See the License for the\r\n+ specific language governing permissions and limitations\r\n+ under the License.\r\n+-->\r\n+<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" version=\"1.0\" xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd\">\r\n+    <persistence-unit name=\"enhance\">\r\n+        <class>org.apache.openjpa.slice.PObject</class>\r\n+        <class>org.apache.openjpa.slice.Person</class>\r\n+        <class>org.apache.openjpa.slice.Address</class>\r\n+    </persistence-unit>\r\n+   <!-- ==================================================================== -->\r\n+   <!-- Configuration for testing basic per-slice configuration              -->\r\n+   <!-- ==================================================================== -->\r\n+   <persistence-unit name=\"per-slice\">\r\n+      <properties>\r\n+         <property name=\"openjpa.BrokerFactory\"        value=\"slice\"/>\r\n+         <property name=\"openjpa.slice.Names\"          value=\"One,Two, Three\"/>\r\n+         <property name=\"openjpa.slice.Master\"         value=\"One\"/>\r\n+         <property name=\"openjpa.slice.Lenient\"        value=\"true\"/>\r\n+         \r\n+         <property name=\"openjpa.slice.DistributionPolicy\"  value=\"org.apache.openjpa.slice.policy.UserDistributionPolicy\"/>\r\n+         <property name=\"openjpa.slice.ThreadingPolicy\"     value=\"fixed\"/>\r\n+\r\n+         <property name=\"openjpa.Log\"                       value=\"DefaultLevel=WARN, Enhance=TRACE, SQL=TRACE\"/>\r\n+         <property name=\"openjpa.ConnectionDriverName\"      value=\"com.mysql.jdbc.Driver\"/>\r\n+         \r\n+         <property name=\"openjpa.slice.One.ConnectionURL\"   value=\"jdbc:mysql://localhost/slice1\"/>\r\n+         <property name=\"openjpa.slice.Two.ConnectionURL\"   value=\"jdbc:mysql://localhost/slice2\"/>\r\n+         <property name=\"openjpa.slice.Three.ConnectionURL\" value=\"jdbc:mysql://localhost/slice3\"/>\r\n+         \r\n+      </properties>\r\n+   </persistence-unit>\r\n+\r\n+   <persistence-unit name=\"XA\">\r\n+      <class>org.apache.openjpa.slice.PObject</class>\r\n+      <properties>\r\n+         <property name=\"openjpa.BrokerFactory\" value=\"slice\"/>\r\n+         <property name=\"openjpa.ConnectionDriverName\" value=\"com.mysql.jdbc.Driver\"/>\r\n+\r\n+         <property name=\"openjpa.slice.Names\" value=\"One,Two\"/>\r\n+         <property name=\"openjpa.slice.DistributionPolicy\" value=\"org.apache.openjpa.slice.policy.UserDistributionPolicy\"/>\r\n+         <property name=\"openjpa.slice.TransactionPolicy\" value=\"xa\"/>\r\n+         \r\n+         <property name=\"openjpa.slice.One.ConnectionDriverName\" value=\"com.mysql.jdbc.jdbc2.optional.MysqlXADataSource\"/>\r\n+         <property name=\"openjpa.slice.One.ConnectionProperties\" value=\"url=jdbc:mysql://localhost/slice1\"/>\r\n+         <property name=\"openjpa.slice.Two.ConnectionDriverName\" value=\"com.mysql.jdbc.jdbc2.optional.MysqlXADataSource\"/>\r\n+         <property name=\"openjpa.slice.Two.ConnectionProperties\" value=\"url=jdbc:mysql://localhost/slice2\"/>\r\n+         \r\n+         <property name=\"openjpa.Multithreaded\" value=\"false\"/>\r\n+         <property name=\"openjpa.Log\" value=\"DefaultLevel=WARN, Enhance=TRACE, SQL=TRACE\"/>\r\n+         <property name=\"openjpa.jdbc.SynchronizeMappings\" value=\"refresh\"/>\r\n+         <property name=\"openjpa.jdbc.MappingDefaults\" value=\"DefaultMissingInfo=true\"/>\r\n+         <property name=\"openjpa.RuntimeUnenhancedClasses\" value=\"supported\"/>\r\n+      </properties>\r\n+   </persistence-unit>\r\n+   \r\n+   <!-- ==================================================================== -->\r\n+   <!-- Configuration for testing basic CRUD operations                      -->\r\n+   <!-- ==================================================================== -->\r\n+   <persistence-unit name=\"slice\">\r\n+        <class>org.apache.openjpa.slice.PObject</class>\r\n+        <class>org.apache.openjpa.slice.Person</class>\r\n+        <class>org.apache.openjpa.slice.Address</class>\r\n+\t\t<properties>\r\n+            <property name=\"openjpa.BrokerFactory\" value=\"slice\"/>\r\n+            <property name=\"openjpa.ConnectionDriverName\" value=\"com.mysql.jdbc.Driver\"/>\r\n+            <property name=\"openjpa.slice.Names\" value=\"One,Two\"/>\r\n+            <property name=\"openjpa.slice.Master\" value=\"Two\"/>\r\n+            <property name=\"openjpa.slice.One.ConnectionURL\" value=\"jdbc:mysql://localhost/slice1\"/>\r\n+            <property name=\"openjpa.slice.Two.ConnectionURL\" value=\"jdbc:mysql://localhost/slice2\"/>\r\n+            <property name=\"openjpa.ConnectionUserName\" value=\"root\"/>\r\n+            <property name=\"openjpa.ConnectionPassword\" value=\"hello\"/>\r\n+            <property name=\"openjpa.slice.DistributionPolicy\" value=\"org.apache.openjpa.slice.policy.UserDistributionPolicy\"/>\r\n+            <property name=\"openjpa.slice.Lenient\" value=\"false\"/>\r\n+            \r\n+            <property name=\"openjpa.Connection2URL\" value=\"jdbc:mysql://localhost/slice1\"/>\r\n+\t        <property name=\"openjpa.jdbc.SynchronizeMappings\" value=\"buildSchema\"/>\r\n+            <property name=\"openjpa.QueryCompilationCache\" value=\"false\"/>\r\n+   \t        <property name=\"openjpa.Log\" value=\"DefaultLevel=WARN, Enhance=TRACE, SQL=TRACE\"/>\r\n+            <property name=\"openjpa.jdbc.MappingDefaults\" value=\"DefaultMissingInfo=true\"/>\r\n+            <property name=\"openjpa.RuntimeUnenhancedClasses\" value=\"supported\"/>\r\n+      \t</properties>\r\n+   </persistence-unit>\r\n+   \r\n+      <persistence-unit name=\"ordering\">\r\n+        <class>org.apache.openjpa.slice.PObject</class>\r\n+        <properties>\r\n+            <property name=\"openjpa.BrokerFactory\" value=\"slice\"/>\r\n+            <property name=\"openjpa.ConnectionDriverName\" value=\"com.mysql.jdbc.Driver\"/>\r\n+            <property name=\"openjpa.slice.Even.ConnectionURL\" value=\"jdbc:mysql://localhost/slice1\"/>\r\n+            <property name=\"openjpa.slice.Odd.ConnectionURL\" value=\"jdbc:mysql://localhost/slice2\"/>\r\n+            <property name=\"openjpa.ConnectionUserName\" value=\"root\"/>\r\n+            <property name=\"openjpa.ConnectionPassword\" value=\"hello\"/>\r\n+            <property name=\"openjpa.slice.DistributionPolicy\" value=\"org.apache.openjpa.slice.policy.EvenOddDistributionPolicy\"/>\r\n+            <property name=\"openjpa.slice.Lenient\" value=\"false\"/>\r\n+            \r\n+            <property name=\"openjpa.Connection2URL\" value=\"jdbc:mysql://localhost/slice1\"/>\r\n+            <property name=\"openjpa.jdbc.SynchronizeMappings\" value=\"buildSchema\"/>\r\n+            <property name=\"openjpa.Log\" value=\"DefaultLevel=WARN, Enhance=TRACE, SQL=TRACE\"/>\r\n+            <property name=\"openjpa.jdbc.MappingDefaults\" value=\"DefaultMissingInfo=true\"/>\r\n+        </properties>\r\n+   </persistence-unit>\r\n+</persistence>\r"}]}

