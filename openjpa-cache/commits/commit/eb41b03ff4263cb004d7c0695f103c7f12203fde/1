{"sha":"eb41b03ff4263cb004d7c0695f103c7f12203fde","node_id":"MDY6Q29tbWl0MjA2MzY0OmViNDFiMDNmZjQyNjNjYjAwNGQ3YzA2OTVmMTAzYzdmMTIyMDNmZGU=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2009-10-12T01:49:30Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2009-10-12T01:49:30Z"},"message":"OPENJPA-1344 Add checks for needed exception conditions.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@824213 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"52bdff1adaf30e2a952d44e17f9e3e420f0b861b","url":"https://api.github.com/repos/apache/openjpa/git/trees/52bdff1adaf30e2a952d44e17f9e3e420f0b861b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/eb41b03ff4263cb004d7c0695f103c7f12203fde","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/eb41b03ff4263cb004d7c0695f103c7f12203fde","html_url":"https://github.com/apache/openjpa/commit/eb41b03ff4263cb004d7c0695f103c7f12203fde","comments_url":"https://api.github.com/repos/apache/openjpa/commits/eb41b03ff4263cb004d7c0695f103c7f12203fde/comments","author":null,"committer":null,"parents":[{"sha":"bc1139791261b505ab6774ed02169db4a33bc8a7","url":"https://api.github.com/repos/apache/openjpa/commits/bc1139791261b505ab6774ed02169db4a33bc8a7","html_url":"https://github.com/apache/openjpa/commit/bc1139791261b505ab6774ed02169db4a33bc8a7"}],"stats":{"total":164,"additions":156,"deletions":8},"files":[{"sha":"cc5ad2a624f2355b71820d7772cb547a8c517f69","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfigurationImpl.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/eb41b03ff4263cb004d7c0695f103c7f12203fde/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/eb41b03ff4263cb004d7c0695f103c7f12203fde/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfigurationImpl.java?ref=eb41b03ff4263cb004d7c0695f103c7f12203fde","patch":"@@ -495,7 +495,8 @@ public FetchConfiguration setReadLockLevel(int level) {\n \n         lock();\n         try {\n-            assertActiveTransaction();\n+            if (level != MixedLockLevels.LOCK_NONE)\n+                assertActiveTransaction();\n             if (level == DEFAULT)\n                 _state.readLockLevel = _state.ctx.getConfiguration().\n                     getReadLockLevelConstant();"},{"sha":"e174b48f8791d562d3d416130a2b7fffde3473e3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryLock.java","status":"added","additions":139,"deletions":0,"changes":139,"blob_url":"https://github.com/apache/openjpa/blob/eb41b03ff4263cb004d7c0695f103c7f12203fde/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryLock.java","raw_url":"https://github.com/apache/openjpa/raw/eb41b03ff4263cb004d7c0695f103c7f12203fde/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryLock.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryLock.java?ref=eb41b03ff4263cb004d7c0695f103c7f12203fde","patch":"@@ -0,0 +1,139 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.query;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.LockModeType;\n+import javax.persistence.Query;\n+import javax.persistence.TransactionRequiredException;\n+import javax.persistence.criteria.CriteriaQuery;\n+import javax.persistence.criteria.Root;\n+\n+import org.apache.openjpa.persistence.criteria.CriteriaBuilder;\n+import org.apache.openjpa.persistence.query.common.apps.Entity1;\n+\n+public class TestQueryLock extends BaseQueryTest {\n+\n+    public TestQueryLock(String test) {\n+        super(test);\n+    }\n+\n+    public void setUp() {\n+        deleteAll(Entity1.class);\n+    }\n+\n+    public void testJPQLLock() {\n+        EntityManager em = currentEntityManager();\n+        Query q = em.createQuery(\"SELECT o FROM Entity1 o \" + \"WHERE o.stringField = 'testSimple'\");\n+\n+        try {\n+            q.setLockMode(LockModeType.NONE);\n+            assertEquals(\"Verify NONE after set\", LockModeType.NONE, q.getLockMode());\n+        } catch (Exception e) {\n+            fail(\"Do not expected \" + e.getClass().getName());\n+        }\n+\n+        try {\n+            q.setLockMode(LockModeType.PESSIMISTIC_READ);\n+            fail(\"Expecting TransactionRequiredException thrown\");\n+        } catch (TransactionRequiredException tre) {\n+            assertEquals(\"Verify still NONE after set incorrect lock mode\", LockModeType.NONE, q.getLockMode());\n+        } catch (Exception e) {\n+            fail(\"Expecting TransactionRequiredException thrown\");\n+        }\n+\n+        startTx(em);\n+        try {\n+            q.setLockMode(LockModeType.OPTIMISTIC_FORCE_INCREMENT);\n+            assertEquals(\"Verify changed to OPTIMISTIC_FORCE_INCREMENT\", LockModeType.OPTIMISTIC_FORCE_INCREMENT, q\n+                    .getLockMode());\n+        } catch (Exception e) {\n+            fail(\"Do not expected \" + e.getClass().getName());\n+        }\n+        endTx(em);\n+        endEm(em);\n+    }\n+\n+    public void testCriteriaLock() {\n+        EntityManager em = currentEntityManager();\n+        CriteriaBuilder cb = getEmf().getQueryBuilder();\n+        CriteriaQuery<Entity1> cq = cb.createQuery(Entity1.class);\n+        Root<Entity1> customer = cq.from(Entity1.class);\n+        Query q = em.createQuery(cq);\n+\n+        try {            \n+            q.setLockMode(LockModeType.NONE);\n+            assertEquals(\"Verify NONE after set\", LockModeType.NONE, q.getLockMode());\n+        } catch (Exception e) {\n+            fail(\"Do not expected \" + e.getClass().getName());\n+        }\n+\n+        try {\n+            q.setLockMode(LockModeType.PESSIMISTIC_READ);\n+            fail(\"Expecting TransactionRequiredException thrown\");\n+        } catch (TransactionRequiredException tre) {\n+            assertEquals(\"Verify still NONE after set incorrect lock mode\", LockModeType.NONE, q.getLockMode());\n+        } catch (Exception e) {\n+            fail(\"Expecting TransactionRequiredException thrown\");\n+        }\n+\n+        startTx(em);\n+        try {\n+            q.setLockMode(LockModeType.OPTIMISTIC_FORCE_INCREMENT);\n+            assertEquals(\"Verify changed to OPTIMISTIC_FORCE_INCREMENT\", LockModeType.OPTIMISTIC_FORCE_INCREMENT, q\n+                    .getLockMode());\n+        } catch (Exception e) {\n+            fail(\"Do not expected \" + e.getClass().getName());\n+        }\n+        endTx(em);\n+        endEm(em);\n+    }\n+\n+    public void testNativeLock() {\n+        EntityManager em = currentEntityManager();\n+        Query q = em.createNativeQuery(\"SELECT * FROM Entity1\");\n+\n+        try {\n+            q.setLockMode(LockModeType.NONE);\n+            fail(\"Expecting IllegalStateException thrown\");\n+        } catch (IllegalStateException ise) {\n+        } catch (Exception e) {\n+            fail(\"Expecting IllegalStateException thrown\");\n+        }\n+\n+        try {\n+            q.setLockMode(LockModeType.PESSIMISTIC_READ);\n+            fail(\"Expecting IllegalStateException thrown\");\n+        } catch (IllegalStateException ise) {\n+        } catch (Exception e) {\n+            fail(\"Expecting IllegalStateException thrown\");\n+        }\n+\n+        startTx(em);\n+        try {\n+            q.setLockMode(LockModeType.OPTIMISTIC_FORCE_INCREMENT);\n+            fail(\"Expecting IllegalStateException thrown\");\n+        } catch (IllegalStateException ise) {\n+        } catch (Exception e) {\n+            fail(\"Expecting IllegalStateException thrown\");\n+        }\n+        endTx(em);\n+        endEm(em);\n+    }\n+}"},{"sha":"d7dfd612b626aee2f51bc0518aa9c8233449c3c5","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","status":"modified","additions":9,"deletions":2,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/eb41b03ff4263cb004d7c0695f103c7f12203fde/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/eb41b03ff4263cb004d7c0695f103c7f12203fde/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java?ref=eb41b03ff4263cb004d7c0695f103c7f12203fde","patch":"@@ -29,11 +29,9 @@\n import java.util.Date;\n import java.util.HashMap;\n import java.util.HashSet;\n-import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n-import java.util.TreeMap;\n import java.util.concurrent.locks.ReentrantLock;\n \n import javax.persistence.FlushModeType;\n@@ -64,6 +62,7 @@\n import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.lib.rop.ResultList;\n import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.persistence.criteria.CriteriaBuilder;\n import org.apache.openjpa.util.ImplHelper;\n import org.apache.openjpa.util.RuntimeExceptionTranslator;\n import org.apache.openjpa.util.UserException;\n@@ -373,6 +372,12 @@ public boolean isNative() {\n \t\treturn QueryLanguages.LANG_SQL.equals(getLanguage());\n \t}\n \n+\tvoid assertJPQLOrCriteriaQuery() {\n+        if (!(JPQLParser.LANG_JPQL.equals(getLanguage()) || CriteriaBuilder.LANG_CRITERIA.equals(getLanguage()))) {\n+            throw new IllegalStateException(_loc.get(\"not-jpql-or-criteria-query\").getMessage());\n+        }\n+\t}\n+\n \tpublic OpenJPAQuery<X> closeAll() {\n \t\t_query.closeAll();\n \t\treturn this;\n@@ -383,10 +388,12 @@ public boolean isNative() {\n \t}\n \n     public LockModeType getLockMode() {\n+        assertJPQLOrCriteriaQuery();\n         return _fetch.getReadLockMode();\n     }\n \n     public TypedQuery<X> setLockMode(LockModeType lockMode) {\n+        assertJPQLOrCriteriaQuery();\n        _fetch.setReadLockMode(lockMode);\n        return this;\n     }"},{"sha":"73bf3440c953eba262e8bb43a7bccbfdae828a90","filename":"openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties","status":"modified","additions":6,"deletions":5,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/eb41b03ff4263cb004d7c0695f103c7f12203fde/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/eb41b03ff4263cb004d7c0695f103c7f12203fde/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties?ref=eb41b03ff4263cb004d7c0695f103c7f12203fde","patch":"@@ -15,7 +15,7 @@\n # specific language governing permissions and limitations\n # under the License.\n \n-access-empty: Found no persistent property in \"{0}\" \n+access-empty: Found no persistent property in \"{0}\"\n access-mixed: Class \"{0}\" annotated fields \"{1}\" with FIELD access and \\\n \tmethods \"{2}\" with PROPERTY access. As class \"{0}\" is not using an  \\\n \texplicit access, it is not permitted to mix PROPERTY and FIELD access \\\n@@ -24,7 +24,7 @@ access-none: Property \"{1}\" in class \"{0}\" is not annotated an instance field \\\n     or a getter method. It is not possible to determine its access type\n access-unknown: Access style for \"{0}\" can not be determined.\n access-no-property: No field or getter method for attribute \"{1}\" can be found \\\n-\tin \"{0}\". \n+\tin \"{0}\".\n close-invoked: You have closed the EntityManager, though the persistence \\\n     context will remain active until the current transaction commits.\n no-managed-trans: There is no managed transaction in progress to sync this \\\n@@ -177,7 +177,7 @@ invalid_entity_argument: Object being locked must be an valid and not detached \\\n     entity.\n dup-pu: The persistence unit \"{0}\" was found multiple times in the following \\\n     resources \"{1}\", but persistence unit names should be unique. The first \\\n-    persistence unit matching the provided name in \"{2}\" is being used.    \n+    persistence unit matching the provided name in \"{2}\" is being used.\n bad-lock-level: Invalid lock mode/level. Valid values are \\\n     \"none\"(0), \"read\"(10), \"optimistic\"(15), \"write\"(20), \\\n     \"optimistic-force-increment\"(25), \\\n@@ -198,9 +198,9 @@ no-embeddable-metadata: Unable to load metadata for embeddable class \"{0}\".\n param-missing: {0} is not declared in query \"{1}\". \\\n     Declared parameter keys are \"{2}\".\n param-missing-pos: Parameter position {0} is not declared in query \"{1}\". \\\n-\tDeclared parameter keys are \"{2}\".  \n+\tDeclared parameter keys are \"{2}\".\n param-missing-name: Parameter named \"{0}\" is not declared in query \"{1}\". \\\n-\tDeclared parameter keys are \"{2}\".  \n+\tDeclared parameter keys are \"{2}\".\n param-pos-in-criteria: Can not set value for positional parameter {0} \\\n \tbecause the executable query is created by a Criteria Query. \\\n \tUse only named parameter or parameter expressions to set values \\\n@@ -222,3 +222,4 @@ tuple-alias-not-found: Alias \"{0}\" was not found in this tuple. Aliases found :\n tuple-exceeded-size : Attempt to access TupleElement at illegal index {0}. There are only {1} elements available.\n create-emf-error: Failed to create a provider for \"{0}\".\n invalid-version-attribute: Persistence version attribute value \"{0}\" is not valid.  Using version \"{1}\" by default.\n+not-jpql-or-criteria-query: Query is neither a JPQL SELECT nor a Criteria API query."}]}

