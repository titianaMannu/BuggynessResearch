{"sha":"eb5baa42a27e626373134486869b1ab873ac82cb","node_id":"MDY6Q29tbWl0MjA2MzY0OmViNWJhYTQyYTI3ZTYyNjM3MzEzNDQ4Njg2OWIxYWI4NzNhYzgyY2I=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-09-10T21:50:08Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-09-10T21:50:08Z"},"message":"OPENJPA-1286: use Compatibility to check if the relationship defined in the MappedSuperclass must be uni-directional.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@813605 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"8921fc0796d988ea102d3c28e06def37a68f892d","url":"https://api.github.com/repos/apache/openjpa/git/trees/8921fc0796d988ea102d3c28e06def37a68f892d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/eb5baa42a27e626373134486869b1ab873ac82cb","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/eb5baa42a27e626373134486869b1ab873ac82cb","html_url":"https://github.com/apache/openjpa/commit/eb5baa42a27e626373134486869b1ab873ac82cb","comments_url":"https://api.github.com/repos/apache/openjpa/commits/eb5baa42a27e626373134486869b1ab873ac82cb/comments","author":null,"committer":null,"parents":[{"sha":"dac8af35b4ade56f49747380f1de3487bd164c5b","url":"https://api.github.com/repos/apache/openjpa/commits/dac8af35b4ade56f49747380f1de3487bd164c5b","html_url":"https://github.com/apache/openjpa/commit/dac8af35b4ade56f49747380f1de3487bd164c5b"}],"stats":{"total":92,"additions":71,"deletions":21},"files":[{"sha":"b6d9584710de0a610e83206a0426b7779252a1da","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java","status":"modified","additions":32,"deletions":1,"changes":33,"blob_url":"https://github.com/apache/openjpa/blob/eb5baa42a27e626373134486869b1ab873ac82cb/openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java","raw_url":"https://github.com/apache/openjpa/raw/eb5baa42a27e626373134486869b1ab873ac82cb/openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java?ref=eb5baa42a27e626373134486869b1ab873ac82cb","patch":"@@ -62,6 +62,7 @@\n     private boolean _privatePersistentProperties = false;\n     private boolean _autoOff = true;\n     private boolean _superclassDiscriminatorStrategyByDefault = true;\n+    private boolean _isAbstractMappingUniDirectional = true;\n     \n     /**\n      * Whether to require exact identity value types when creating object\n@@ -418,6 +419,36 @@ public boolean getPrivatePersistentProperties() {\n      */\n     public void setPrivatePersistentProperties(boolean privateProps) {\n         _privatePersistentProperties = privateProps;\n-    }    \n+    }\n+    \n+    /**\n+     * Whether OpenJPA allows bi-directional relationship in the MappedSuperclass.\n+     * Prior to OpenJPA 2.0, the bi-directional relationship in the MappedSuperclass,\n+     * is not blocked. This is contrary to the JPA specification, which states that \n+     * Persistent relationships defined by a mapped superclass must be\n+     * unidirectional.\n+     * \n+     * @param isAbstractMappingUniDirectional true if relationship defined in the \n+     *        MappedSuperclass must be uni-directional\n+     * @since 2.0.0\n+     */\n+    public void setAbstractMappingUniDirectional(boolean isAbstractMappingUniDirectional) {\n+        _isAbstractMappingUniDirectional = isAbstractMappingUniDirectional;\n+    }\n+\n+    \n+    /**\n+     * Whether OpenJPA allows bi-directional relationship in the MappedSuperclass.\n+     * Prior to OpenJPA 2.0, the bi-directional relationship in the MappedSuperclass,\n+     * is not blocked. This is contrary to the JPA specification, which states that \n+     * Persistent relationships defined by a mapped superclass must be\n+     * unidirectional. The default value is true.\n+     * \n+     * @since 2.0.0\n+     */\n+    public boolean isAbstractMappingUniDirectional() {\n+        return _isAbstractMappingUniDirectional;\n+    }\n+\n }\n "},{"sha":"5cb17a48ec48a9b561912ce5f4c01b977d529067","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java","status":"modified","additions":11,"deletions":13,"changes":24,"blob_url":"https://github.com/apache/openjpa/blob/eb5baa42a27e626373134486869b1ab873ac82cb/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/eb5baa42a27e626373134486869b1ab873ac82cb/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java?ref=eb5baa42a27e626373134486869b1ab873ac82cb","patch":"@@ -48,7 +48,6 @@\n import org.apache.commons.collections.comparators.ComparatorChain;\n import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.conf.OpenJPAConfiguration;\n-import org.apache.openjpa.conf.Specification;\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n import org.apache.openjpa.kernel.StoreContext;\n import org.apache.openjpa.lib.conf.Configurations;\n@@ -859,18 +858,17 @@ public FieldMetaData getMappedByMetaData() {\n             if (field.getMappedBy() != null)\n                 throw new MetaDataException(_loc.get(\"circ-mapped-by\", this,\n                     _mappedBy));\n-            Specification spec = getRepository().getConfiguration().getSpecificationInstance();\n-            if (spec != null) {\n-                int specVersion = spec.getVersion();\n-                if (specVersion >= 2) {\n-                    if (field.getDeclaringMetaData().isAbstract())\n-                        throw new MetaDataException(_loc.get(\"no-mapped-by-in-mapped-super\", field,\n-                                field.getDeclaringMetaData()));\n-\n-                    if (this.getDeclaringMetaData().isAbstract())\n-                        throw new MetaDataException(_loc.get(\"no-mapped-by-in-mapped-super\", this,\n-                                this.getDeclaringMetaData()));\n-                }            \n+            OpenJPAConfiguration conf = getRepository().getConfiguration();\n+            boolean isAbstractMappingUniDirectional = getRepository().getMetaDataFactory().\n+                    getDefaults().isAbstractMappingUniDirectional(conf);\n+            if (isAbstractMappingUniDirectional) {\n+                if (field.getDeclaringMetaData().isAbstract())\n+                    throw new MetaDataException(_loc.get(\"no-mapped-by-in-mapped-super\", field,\n+                            field.getDeclaringMetaData()));\n+\n+                if (this.getDeclaringMetaData().isAbstract())\n+                    throw new MetaDataException(_loc.get(\"no-mapped-by-in-mapped-super\", this,\n+                            this.getDeclaringMetaData()));\n             }\n             _mappedByMeta = field;\n         }"},{"sha":"1b00899893b66ed536b38b044730548fdb4ec949","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataDefaults.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/eb5baa42a27e626373134486869b1ab873ac82cb/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataDefaults.java","raw_url":"https://github.com/apache/openjpa/raw/eb5baa42a27e626373134486869b1ab873ac82cb/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataDefaults.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataDefaults.java?ref=eb5baa42a27e626373134486869b1ab873ac82cb","patch":"@@ -20,6 +20,7 @@\n \n import java.lang.reflect.Member;\n \n+import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.event.CallbackModes;\n \n /**\n@@ -105,4 +106,12 @@ public Member getMemberByProperty(ClassMetaData meta, String attribute,\n      * managed interface methods.\n      */\n     public Class getUnimplementedExceptionType();\n+    \n+    /**\n+     * Whether the relationship in MappedSuper class must be\n+     * uni-directional.  \n+     * @return 2.0.0\n+     */\n+    public boolean isAbstractMappingUniDirectional(OpenJPAConfiguration conf);\n+\n }"},{"sha":"112519897a5f45c370d9b746257981786b12bf9c","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/NoneMetaDataFactory.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/eb5baa42a27e626373134486869b1ab873ac82cb/openjpa-kernel/src/main/java/org/apache/openjpa/meta/NoneMetaDataFactory.java","raw_url":"https://github.com/apache/openjpa/raw/eb5baa42a27e626373134486869b1ab873ac82cb/openjpa-kernel/src/main/java/org/apache/openjpa/meta/NoneMetaDataFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/NoneMetaDataFactory.java?ref=eb5baa42a27e626373134486869b1ab873ac82cb","patch":"@@ -24,6 +24,7 @@\n import java.util.Map;\n import java.util.Set;\n \n+import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.lib.meta.ClassArgParser;\n \n /**\n@@ -157,4 +158,8 @@ public boolean isMetaClass(Class<?> c) {\n     public Class<?> getManagedClass(Class<?> c) {\n         return null;\n     }\n+\n+    public boolean isAbstractMappingUniDirectional(OpenJPAConfiguration conf) {\n+        return true;\n+    }\n }"},{"sha":"4958b3e39f5c47c1e4707162fec211a521c740c2","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataDefaults.java","status":"modified","additions":12,"deletions":1,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/eb5baa42a27e626373134486869b1ab873ac82cb/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataDefaults.java","raw_url":"https://github.com/apache/openjpa/raw/eb5baa42a27e626373134486869b1ab873ac82cb/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataDefaults.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataDefaults.java?ref=eb5baa42a27e626373134486869b1ab873ac82cb","patch":"@@ -131,7 +131,8 @@\n     protected AnnotatedFilter annotatedFilter = new AnnotatedFilter();\n     protected GetterFilter getterFilter = new GetterFilter();\n     protected SetterFilter setterFilter = new SetterFilter();\n-\n+    private Boolean _isAbstractMappingUniDirectional = null;\n+    \n     public PersistenceMetaDataDefaults() {\n         setCallbackMode(CALLBACK_RETHROW | CALLBACK_ROLLBACK |\n             CALLBACK_FAIL_FAST);\n@@ -861,4 +862,14 @@ String toFieldNames(List<Field> fields) {\n     String toMethodNames(List<Method> methods) {\n     \treturn methods.toString();\n     }\n+    \n+    public boolean isAbstractMappingUniDirectional(OpenJPAConfiguration conf) {\n+        if (_isAbstractMappingUniDirectional == null)\n+            setAbstractMappingUniDirectional(conf);\n+        return _isAbstractMappingUniDirectional;\n+    }\n+    \n+    public void setAbstractMappingUniDirectional(OpenJPAConfiguration conf) {\n+        _isAbstractMappingUniDirectional = conf.getCompatibilityInstance().isAbstractMappingUniDirectional();\n+    }\n }"},{"sha":"ba250b521db3ce274936d31bdc46c63c0be38596","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java","status":"modified","additions":2,"deletions":6,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/eb5baa42a27e626373134486869b1ab873ac82cb/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java","raw_url":"https://github.com/apache/openjpa/raw/eb5baa42a27e626373134486869b1ab873ac82cb/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java?ref=eb5baa42a27e626373134486869b1ab873ac82cb","patch":"@@ -35,17 +35,16 @@\n import java.util.MissingResourceException;\n import java.util.Set;\n \n-import javax.persistence.spi.ValidationMode;\n import javax.persistence.spi.PersistenceUnitInfo;\n import javax.persistence.spi.PersistenceUnitTransactionType;\n+import javax.persistence.spi.ValidationMode;\n \n import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.conf.Compatibility;\n import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.conf.OpenJPAConfigurationImpl;\n import org.apache.openjpa.conf.OpenJPAProductDerivation;\n import org.apache.openjpa.conf.Specification;\n-import org.apache.openjpa.event.LifecycleEventManager;\n import org.apache.openjpa.kernel.MixedLockLevels;\n import org.apache.openjpa.lib.conf.AbstractProductDerivation;\n import org.apache.openjpa.lib.conf.Configuration;\n@@ -58,10 +57,6 @@\n import org.apache.openjpa.lib.meta.XMLVersionParser;\n import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n-import org.apache.openjpa.persistence.validation.ValidatorImpl;\n-import org.apache.openjpa.validation.Validator;\n-import org.apache.openjpa.validation.ValidationException;\n-import org.apache.openjpa.validation.ValidatingLifecycleEventManager;\n import org.xml.sax.Attributes;\n import org.xml.sax.SAXException;\n \n@@ -187,6 +182,7 @@ public boolean afterSpecificationSet(Configuration c) {\n             compatibility.setFlushBeforeDetach(true);\n             compatibility.setCopyOnDetach(true);\n             compatibility.setPrivatePersistentProperties(true);\n+            compatibility.setAbstractMappingUniDirectional(false);\n             // Disable bean validation for spec level < 2 configurations\n             conf.validationMode.set(String.valueOf(ValidationMode.NONE));\n         } "}]}

