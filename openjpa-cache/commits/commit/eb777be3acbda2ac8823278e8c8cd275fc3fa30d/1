{"sha":"eb777be3acbda2ac8823278e8c8cd275fc3fa30d","node_id":"MDY6Q29tbWl0MjA2MzY0OmViNzc3YmUzYWNiZGEyYWM4ODIzMjc4ZThjOGNkMjc1ZmMzZmEzMGQ=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2006-11-07T19:33:43Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2006-11-07T19:33:43Z"},"message":"Moved Kodo query compilation cache into OpenJPA.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@472218 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e144d2a5171f17b7c420e6bd072be3c7cc731c0c","url":"https://api.github.com/repos/apache/openjpa/git/trees/e144d2a5171f17b7c420e6bd072be3c7cc731c0c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/eb777be3acbda2ac8823278e8c8cd275fc3fa30d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/eb777be3acbda2ac8823278e8c8cd275fc3fa30d","html_url":"https://github.com/apache/openjpa/commit/eb777be3acbda2ac8823278e8c8cd275fc3fa30d","comments_url":"https://api.github.com/repos/apache/openjpa/commits/eb777be3acbda2ac8823278e8c8cd275fc3fa30d/comments","author":null,"committer":null,"parents":[{"sha":"92343313fbb0b935fbbc0cfb32bfc14df6b27aac","url":"https://api.github.com/repos/apache/openjpa/commits/92343313fbb0b935fbbc0cfb32bfc14df6b27aac","html_url":"https://github.com/apache/openjpa/commit/92343313fbb0b935fbbc0cfb32bfc14df6b27aac"}],"stats":{"total":582,"additions":442,"deletions":140},"files":[{"sha":"4091775be5fb62ad46041d4a7a1194edd781aca3","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfiguration.java","status":"modified","additions":22,"deletions":0,"changes":22,"blob_url":"https://github.com/apache/openjpa/blob/eb777be3acbda2ac8823278e8c8cd275fc3fa30d/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/eb777be3acbda2ac8823278e8c8cd275fc3fa30d/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfiguration.java?ref=eb777be3acbda2ac8823278e8c8cd275fc3fa30d","patch":"@@ -16,6 +16,7 @@\n package org.apache.openjpa.conf;\n \n import java.util.Collection;\n+import java.util.Map;\n \n import org.apache.openjpa.datacache.DataCache;\n import org.apache.openjpa.datacache.DataCacheManager;\n@@ -1355,6 +1356,27 @@\n \t * Backwards compatibility options.\n \t */\n \tpublic Compatibility getCompatibilityInstance ();\n+\n+    /**\n+     * Configuration settings for the query compilation cache to use. \n+     * @see QueryCompilationCacheValue\n+     * @since 0.9.6\n+     */\n+    public String getQueryCompilationCache();\n+\n+    /**\n+     * Configuration settings for the query compilation cache to use. \n+     * @see QueryCompilationCacheValue\n+     * @since 0.9.6\n+     */\n+    public void setQueryCompilationCache(String conf);\n+    \n+    /**\n+     * Configuration settings for the query compilation cache to use. \n+     * @see QueryCompilationCacheValue\n+     * @since 0.9.6\n+     */\n+    public Map getQueryCompilationCacheInstance();\n     \n     /**\n      * Return the {@link StoreFacadeTypeRegistry} instance associated with this"},{"sha":"f28a25ff3f53ef4de30636a8443f0c45f1ee9e9d","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","status":"modified","additions":144,"deletions":137,"changes":281,"blob_url":"https://github.com/apache/openjpa/blob/eb777be3acbda2ac8823278e8c8cd275fc3fa30d/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/eb777be3acbda2ac8823278e8c8cd275fc3fa30d/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java?ref=eb777be3acbda2ac8823278e8c8cd275fc3fa30d","patch":"@@ -17,6 +17,8 @@\n \n import java.util.Collection;\n import java.util.HashSet;\n+import java.util.Map;\n+\n import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.datacache.ConcurrentDataCache;\n import org.apache.openjpa.datacache.ConcurrentQueryCache;\n@@ -59,8 +61,8 @@\n     extends ConfigurationImpl\n     implements OpenJPAConfiguration {\n \n-    private static final Localizer _loc = Localizer.forPackage\n-        (OpenJPAConfigurationImpl.class);\n+    private static final Localizer _loc =\n+        Localizer.forPackage(OpenJPAConfigurationImpl.class);\n \n     // cached state; some of this is created in getter methods, so make\n     // protected in case subclasses want to access without creating\n@@ -124,6 +126,7 @@\n     public ObjectValue savepointManagerPlugin;\n     public ObjectValue orphanedKeyPlugin;\n     public ObjectValue compatibilityPlugin;\n+    public QueryCompilationCacheValue queryCompilationCachePlugin;\n \n     // custom values\n     public BrokerFactoryValue brokerFactoryPlugin;\n@@ -162,11 +165,11 @@ public OpenJPAConfigurationImpl(boolean derivations, boolean loadGlobals) {\n         String[] aliases;\n \n         classResolverPlugin = addPlugin(\"ClassResolver\", true);\n-        aliases = new String[]{\n-            \"default\", \"org.apache.openjpa.util.ClassResolverImpl\",\n-            // deprecated alias\n-            \"spec\", \"org.apache.openjpa.util.ClassResolverImpl\",\n-        };\n+        aliases =\n+            new String[] { \"default\",\n+                \"org.apache.openjpa.util.ClassResolverImpl\",\n+                // deprecated alias\n+                \"spec\", \"org.apache.openjpa.util.ClassResolverImpl\", };\n         classResolverPlugin.setAliases(aliases);\n         classResolverPlugin.setDefault(aliases[0]);\n         classResolverPlugin.setString(aliases[0]);\n@@ -176,26 +179,24 @@ public OpenJPAConfigurationImpl(boolean derivations, boolean loadGlobals) {\n         addValue(brokerFactoryPlugin);\n \n         brokerPlugin = addPlugin(\"BrokerImpl\", false);\n-        aliases = new String[]{ \"default\", BrokerImpl.class.getName() };\n+        aliases = new String[] { \"default\", BrokerImpl.class.getName() };\n         brokerPlugin.setAliases(aliases);\n         brokerPlugin.setDefault(aliases[0]);\n         brokerPlugin.setString(aliases[0]);\n \n         dataCacheManagerPlugin = addPlugin(\"DataCacheManager\", true);\n-        aliases = new String[]{\n-            \"default\", DataCacheManagerImpl.class.getName(),\n-        };\n+        aliases =\n+            new String[] { \"default\", DataCacheManagerImpl.class.getName(), };\n         dataCacheManagerPlugin.setAliases(aliases);\n         dataCacheManagerPlugin.setDefault(aliases[0]);\n         dataCacheManagerPlugin.setString(aliases[0]);\n         dataCacheManagerPlugin.setInstantiatingGetter(\"getDataCacheManager\");\n \n         dataCachePlugin = addPlugin(\"DataCache\", false);\n-        aliases = new String[]{\n-            \"false\", null,\n-            \"true\", ConcurrentDataCache.class.getName(),\n-            \"concurrent\", ConcurrentDataCache.class.getName(),\n-        };\n+        aliases =\n+            new String[] { \"false\", null, \"true\",\n+                ConcurrentDataCache.class.getName(), \"concurrent\",\n+                ConcurrentDataCache.class.getName(), };\n         dataCachePlugin.setAliases(aliases);\n         dataCachePlugin.setDefault(aliases[0]);\n         dataCachePlugin.setString(aliases[0]);\n@@ -205,11 +206,10 @@ public OpenJPAConfigurationImpl(boolean derivations, boolean loadGlobals) {\n         dataCacheTimeout.set(-1);\n \n         queryCachePlugin = addPlugin(\"QueryCache\", true);\n-        aliases = new String[]{\n-            \"true\", ConcurrentQueryCache.class.getName(),\n-            \"concurrent\", ConcurrentQueryCache.class.getName(),\n-            \"false\", null,\n-        };\n+        aliases =\n+            new String[] { \"true\", ConcurrentQueryCache.class.getName(),\n+                \"concurrent\", ConcurrentQueryCache.class.getName(), \"false\",\n+                null, };\n         queryCachePlugin.setAliases(aliases);\n         queryCachePlugin.setDefault(aliases[0]);\n         queryCachePlugin.setString(aliases[0]);\n@@ -219,71 +219,67 @@ public OpenJPAConfigurationImpl(boolean derivations, boolean loadGlobals) {\n         dynamicDataStructs.set(false);\n \n         lockManagerPlugin = addPlugin(\"LockManager\", false);\n-        aliases = new String[]{\n-            \"none\", \"org.apache.openjpa.kernel.NoneLockManager\",\n-            \"version\", \"org.apache.openjpa.kernel.VersionLockManager\",\n-        };\n+        aliases =\n+            new String[] { \"none\", \"org.apache.openjpa.kernel.NoneLockManager\",\n+                \"version\", \"org.apache.openjpa.kernel.VersionLockManager\", };\n         lockManagerPlugin.setAliases(aliases);\n         lockManagerPlugin.setDefault(aliases[0]);\n         lockManagerPlugin.setString(aliases[0]);\n \n         inverseManagerPlugin = addPlugin(\"InverseManager\", false);\n-        aliases = new String[]{\n-            \"false\", null,\n-            \"true\", \"org.apache.openjpa.kernel.InverseManager\",\n-        };\n+        aliases =\n+            new String[] { \"false\", null, \"true\",\n+                \"org.apache.openjpa.kernel.InverseManager\", };\n         inverseManagerPlugin.setAliases(aliases);\n         inverseManagerPlugin.setDefault(aliases[0]);\n         inverseManagerPlugin.setString(aliases[0]);\n \n         savepointManagerPlugin = addPlugin(\"SavepointManager\", true);\n-        aliases = new String[]{\n-            \"in-mem\", \"org.apache.openjpa.kernel.InMemorySavepointManager\",\n-        };\n+        aliases =\n+            new String[] { \"in-mem\",\n+                \"org.apache.openjpa.kernel.InMemorySavepointManager\", };\n         savepointManagerPlugin.setAliases(aliases);\n         savepointManagerPlugin.setDefault(aliases[0]);\n         savepointManagerPlugin.setString(aliases[0]);\n-        savepointManagerPlugin.setInstantiatingGetter\n-            (\"getSavepointManagerInstance\");\n+        savepointManagerPlugin\n+            .setInstantiatingGetter(\"getSavepointManagerInstance\");\n \n         orphanedKeyPlugin = addPlugin(\"OrphanedKeyAction\", true);\n-        aliases = new String[]{\n-            \"log\", \"org.apache.openjpa.event.LogOrphanedKeyAction\",\n-            \"exception\", \"org.apache.openjpa.event.ExceptionOrphanedKeyAction\",\n-            \"none\", \"org.apache.openjpa.event.NoneOrphanedKeyAction\",\n-        };\n+        aliases =\n+            new String[] { \"log\",\n+                \"org.apache.openjpa.event.LogOrphanedKeyAction\", \"exception\",\n+                \"org.apache.openjpa.event.ExceptionOrphanedKeyAction\", \"none\",\n+                \"org.apache.openjpa.event.NoneOrphanedKeyAction\", };\n         orphanedKeyPlugin.setAliases(aliases);\n         orphanedKeyPlugin.setDefault(aliases[0]);\n         orphanedKeyPlugin.setString(aliases[0]);\n-        orphanedKeyPlugin.setInstantiatingGetter\n-            (\"getOrphanedKeyActionInstance\");\n+        orphanedKeyPlugin\n+            .setInstantiatingGetter(\"getOrphanedKeyActionInstance\");\n \n         remoteProviderPlugin = new RemoteCommitProviderValue();\n         addValue(remoteProviderPlugin);\n \n         transactionMode = addBoolean(\"TransactionMode\");\n-        aliases = new String[]{\n-            \"local\", \"false\",\n-            \"managed\", \"true\",\n-        };\n+        aliases = new String[] { \"local\", \"false\", \"managed\", \"true\", };\n         transactionMode.setAliases(aliases);\n         transactionMode.setDefault(aliases[0]);\n \n         managedRuntimePlugin = addPlugin(\"ManagedRuntime\", true);\n-        aliases = new String[]{\n-            \"auto\", \"org.apache.openjpa.ee.AutomaticManagedRuntime\",\n-            \"jndi\", \"org.apache.openjpa.ee.JNDIManagedRuntime\",\n-            \"invocation\", \"org.apache.openjpa.ee.InvocationManagedRuntime\",\n-        };\n+        aliases =\n+            new String[] { \"auto\",\n+                \"org.apache.openjpa.ee.AutomaticManagedRuntime\", \"jndi\",\n+                \"org.apache.openjpa.ee.JNDIManagedRuntime\", \"invocation\",\n+                \"org.apache.openjpa.ee.InvocationManagedRuntime\", };\n         managedRuntimePlugin.setAliases(aliases);\n         managedRuntimePlugin.setDefault(aliases[0]);\n         managedRuntimePlugin.setString(aliases[0]);\n-        managedRuntimePlugin.setInstantiatingGetter\n-            (\"getManagedRuntimeInstance\");\n+        managedRuntimePlugin\n+            .setInstantiatingGetter(\"getManagedRuntimeInstance\");\n \n         proxyManagerPlugin = addPlugin(\"ProxyManager\", true);\n-        aliases = new String[]{ \"default\",\n-            \"org.apache.openjpa.util.ProxyManagerImpl\" };\n+        aliases =\n+            new String[] { \"default\",\n+                \"org.apache.openjpa.util.ProxyManagerImpl\" };\n         proxyManagerPlugin.setAliases(aliases);\n         proxyManagerPlugin.setDefault(aliases[0]);\n         proxyManagerPlugin.setString(aliases[0]);\n@@ -293,8 +289,9 @@ public OpenJPAConfigurationImpl(boolean derivations, boolean loadGlobals) {\n         metaFactoryPlugin = addPlugin(\"MetaDataFactory\", false);\n \n         metaRepositoryPlugin = addPlugin(\"MetaDataRepository\", false);\n-        aliases = new String[]{ \"default\", \n-            \"org.apache.openjpa.meta.MetaDataRepository\" };\n+        aliases =\n+            new String[] { \"default\",\n+                \"org.apache.openjpa.meta.MetaDataRepository\" };\n         metaRepositoryPlugin.setAliases(aliases);\n         metaRepositoryPlugin.setDefault(aliases[0]);\n         metaRepositoryPlugin.setString(aliases[0]);\n@@ -317,15 +314,12 @@ public OpenJPAConfigurationImpl(boolean derivations, boolean loadGlobals) {\n         connection2URL = addString(\"Connection2URL\");\n         connection2DriverName = addString(\"Connection2DriverName\");\n         connection2Properties = addString(\"Connection2Properties\");\n-        connectionFactory2Properties = addString(\n-            \"ConnectionFactory2Properties\");\n+        connectionFactory2Properties =\n+            addString(\"ConnectionFactory2Properties\");\n         connectionFactory2Name = addString(\"ConnectionFactory2Name\");\n \n         connectionFactoryMode = addBoolean(\"ConnectionFactoryMode\");\n-        aliases = new String[]{\n-            \"local\", \"false\",\n-            \"managed\", \"true\",\n-        };\n+        aliases = new String[] { \"local\", \"false\", \"managed\", \"true\", };\n         connectionFactoryMode.setAliases(aliases);\n         connectionFactoryMode.setDefault(aliases[0]);\n \n@@ -334,10 +328,10 @@ public OpenJPAConfigurationImpl(boolean derivations, boolean loadGlobals) {\n         optimistic.set(true);\n \n         autoClear = addInt(\"AutoClear\");\n-        aliases = new String[]{\n-            \"datastore\", String.valueOf(AutoClear.CLEAR_DATASTORE),\n-            \"all\", String.valueOf(AutoClear.CLEAR_ALL),\n-        };\n+        aliases =\n+            new String[] { \"datastore\",\n+                String.valueOf(AutoClear.CLEAR_DATASTORE), \"all\",\n+                String.valueOf(AutoClear.CLEAR_ALL), };\n         autoClear.setAliases(aliases);\n         autoClear.setDefault(aliases[0]);\n         autoClear.set(AutoClear.CLEAR_DATASTORE);\n@@ -348,14 +342,13 @@ public OpenJPAConfigurationImpl(boolean derivations, boolean loadGlobals) {\n         retainState.set(true);\n \n         restoreState = addInt(\"RestoreState\");\n-        aliases = new String[]{\n-            \"none\", String.valueOf(RestoreState.RESTORE_NONE),\n-            \"false\", String.valueOf(RestoreState.RESTORE_NONE),\n-            \"immutable\", String.valueOf(RestoreState.RESTORE_IMMUTABLE),\n-            // \"true\" for compat with jdo RestoreValues\n-            \"true\", String.valueOf(RestoreState.RESTORE_IMMUTABLE),\n-            \"all\", String.valueOf(RestoreState.RESTORE_ALL),\n-        };\n+        aliases =\n+            new String[] { \"none\", String.valueOf(RestoreState.RESTORE_NONE),\n+                \"false\", String.valueOf(RestoreState.RESTORE_NONE),\n+                \"immutable\", String.valueOf(RestoreState.RESTORE_IMMUTABLE),\n+                // \"true\" for compat with jdo RestoreValues\n+                \"true\", String.valueOf(RestoreState.RESTORE_IMMUTABLE), \"all\",\n+                String.valueOf(RestoreState.RESTORE_ALL), };\n         restoreState.setAliases(aliases);\n         restoreState.setDefault(aliases[0]);\n         restoreState.set(RestoreState.RESTORE_IMMUTABLE);\n@@ -365,11 +358,10 @@ public OpenJPAConfigurationImpl(boolean derivations, boolean loadGlobals) {\n         addValue(autoDetach);\n \n         detachStatePlugin = addPlugin(\"DetachState\", true);\n-        aliases = new String[]{\n-            \"loaded\", DetachOptions.Loaded.class.getName(),\n-            \"fgs\", DetachOptions.FetchGroups.class.getName(),\n-            \"all\", DetachOptions.All.class.getName(),\n-        };\n+        aliases =\n+            new String[] { \"loaded\", DetachOptions.Loaded.class.getName(),\n+                \"fgs\", DetachOptions.FetchGroups.class.getName(), \"all\",\n+                DetachOptions.All.class.getName(), };\n         detachStatePlugin.setAliases(aliases);\n         detachStatePlugin.setDefault(aliases[0]);\n         detachStatePlugin.setString(aliases[0]);\n@@ -394,15 +386,14 @@ public OpenJPAConfigurationImpl(boolean derivations, boolean loadGlobals) {\n \n         fetchGroups = addStringList(\"FetchGroups\");\n         fetchGroups.setDefault(\"default\");\n-        fetchGroups.set(new String[]{ \"default\" });\n+        fetchGroups.set(new String[] { \"default\" });\n \n         flushBeforeQueries = addInt(\"FlushBeforeQueries\");\n-        aliases = new String[]{\n-            \"true\", String.valueOf(QueryFlushModes.FLUSH_TRUE),\n-            \"false\", String.valueOf(QueryFlushModes.FLUSH_FALSE),\n-            \"with-connection\", String.valueOf\n-            (QueryFlushModes.FLUSH_WITH_CONNECTION),\n-        };\n+        aliases =\n+            new String[] { \"true\", String.valueOf(QueryFlushModes.FLUSH_TRUE),\n+                \"false\", String.valueOf(QueryFlushModes.FLUSH_FALSE),\n+                \"with-connection\",\n+                String.valueOf(QueryFlushModes.FLUSH_WITH_CONNECTION), };\n         flushBeforeQueries.setAliases(aliases);\n         flushBeforeQueries.setDefault(aliases[0]);\n         flushBeforeQueries.set(QueryFlushModes.FLUSH_TRUE);\n@@ -413,22 +404,20 @@ public OpenJPAConfigurationImpl(boolean derivations, boolean loadGlobals) {\n         lockTimeout.set(-1);\n \n         readLockLevel = addInt(\"ReadLockLevel\");\n-        aliases = new String[]{\n-            \"read\", String.valueOf(LockLevels.LOCK_READ),\n-            \"write\", String.valueOf(LockLevels.LOCK_WRITE),\n-            \"none\", String.valueOf(LockLevels.LOCK_NONE),\n-        };\n+        aliases =\n+            new String[] { \"read\", String.valueOf(LockLevels.LOCK_READ),\n+                \"write\", String.valueOf(LockLevels.LOCK_WRITE), \"none\",\n+                String.valueOf(LockLevels.LOCK_NONE), };\n         readLockLevel.setAliases(aliases);\n         readLockLevel.setDefault(aliases[0]);\n         readLockLevel.set(LockLevels.LOCK_READ);\n         readLockLevel.setAliasListComprehensive(true);\n \n         writeLockLevel = addInt(\"WriteLockLevel\");\n-        aliases = new String[]{\n-            \"read\", String.valueOf(LockLevels.LOCK_READ),\n-            \"write\", String.valueOf(LockLevels.LOCK_WRITE),\n-            \"none\", String.valueOf(LockLevels.LOCK_NONE),\n-        };\n+        aliases =\n+            new String[] { \"read\", String.valueOf(LockLevels.LOCK_READ),\n+                \"write\", String.valueOf(LockLevels.LOCK_WRITE), \"none\",\n+                String.valueOf(LockLevels.LOCK_NONE), };\n         writeLockLevel.setAliases(aliases);\n         writeLockLevel.setDefault(aliases[1]);\n         writeLockLevel.set(LockLevels.LOCK_WRITE);\n@@ -439,38 +428,40 @@ public OpenJPAConfigurationImpl(boolean derivations, boolean loadGlobals) {\n         addValue(seqPlugin);\n \n         connectionRetainMode = addInt(\"ConnectionRetainMode\");\n-        aliases = new String[]{\n-            \"on-demand\",\n-            String.valueOf(ConnectionRetainModes.CONN_RETAIN_DEMAND),\n-            \"transaction\",\n-            String.valueOf(ConnectionRetainModes.CONN_RETAIN_TRANS),\n-            \"always\",\n-            String.valueOf(ConnectionRetainModes.CONN_RETAIN_ALWAYS),\n-            // deprecated\n-            \"persistence-manager\",\n-            String.valueOf(ConnectionRetainModes.CONN_RETAIN_ALWAYS),\n-        };\n+        aliases =\n+            new String[] { \"on-demand\",\n+                String.valueOf(ConnectionRetainModes.CONN_RETAIN_DEMAND),\n+                \"transaction\",\n+                String.valueOf(ConnectionRetainModes.CONN_RETAIN_TRANS),\n+                \"always\",\n+                String.valueOf(ConnectionRetainModes.CONN_RETAIN_ALWAYS),\n+                // deprecated\n+                \"persistence-manager\",\n+                String.valueOf(ConnectionRetainModes.CONN_RETAIN_ALWAYS), };\n         connectionRetainMode.setAliases(aliases);\n         connectionRetainMode.setDefault(aliases[0]);\n         connectionRetainMode.setAliasListComprehensive(true);\n         connectionRetainMode.set(ConnectionRetainModes.CONN_RETAIN_DEMAND);\n \n         filterListenerPlugins = addPluginList(\"FilterListeners\");\n-        filterListenerPlugins.setInstantiatingGetter\n-            (\"getFilterListenerInstances\");\n+        filterListenerPlugins\n+            .setInstantiatingGetter(\"getFilterListenerInstances\");\n \n         aggregateListenerPlugins = addPluginList(\"AggregateListeners\");\n-        aggregateListenerPlugins.setInstantiatingGetter\n-            (\"getAggregateListenerInstances\");\n+        aggregateListenerPlugins\n+            .setInstantiatingGetter(\"getAggregateListenerInstances\");\n \n         retryClassRegistration = addBoolean(\"RetryClassRegistration\");\n \n         compatibilityPlugin = addPlugin(\"Compatibility\", true);\n-        aliases = new String[]{ \"default\", Compatibility.class.getName() };\n+        aliases = new String[] { \"default\", Compatibility.class.getName() };\n         compatibilityPlugin.setAliases(aliases);\n         compatibilityPlugin.setDefault(aliases[0]);\n         compatibilityPlugin.setString(aliases[0]);\n         compatibilityPlugin.setInstantiatingGetter(\"getCompatibilityInstance\");\n+        \n+        queryCompilationCachePlugin = new QueryCompilationCacheValue(this);\n+        addValue(queryCompilationCachePlugin);\n \n         // initialize supported options that some runtimes may not support\n         supportedOptions.add(OPTION_NONTRANS_READ);\n@@ -510,8 +501,8 @@ public boolean setSpecification(String spec) {\n         if (this.spec != null) {\n             if (!this.spec.equals(spec)\n                 && getConfigurationLog().isWarnEnabled())\n-                getConfigurationLog().warn(_loc.get(\"diff-specs\", this.spec,\n-                    spec));\n+                getConfigurationLog().warn(\n+                    _loc.get(\"diff-specs\", this.spec, spec));\n             return false;\n         }\n         this.spec = spec;\n@@ -558,8 +549,8 @@ public String getBrokerImpl() {\n     }\n \n     public BrokerImpl newBrokerInstance(String user, String pass) {\n-        BrokerImpl broker = (BrokerImpl) brokerPlugin.instantiate\n-            (BrokerImpl.class, this);\n+        BrokerImpl broker =\n+            (BrokerImpl) brokerPlugin.instantiate(BrokerImpl.class, this);\n         if (broker != null)\n             broker.setAuthentication(user, pass);\n         return broker;\n@@ -584,8 +575,9 @@ public void setDataCacheManager(DataCacheManager dcm) {\n     public DataCacheManager getDataCacheManagerInstance() {\n         DataCacheManager dcm = (DataCacheManager) dataCacheManagerPlugin.get();\n         if (dcm == null) {\n-            dcm = (DataCacheManager) dataCacheManagerPlugin.instantiate\n-                (DataCacheManager.class, this);\n+            dcm =\n+                (DataCacheManager) dataCacheManagerPlugin.instantiate(\n+                    DataCacheManager.class, this);\n             dcm.initialize(this, dataCachePlugin, queryCachePlugin);\n         }\n         return dcm;\n@@ -662,8 +654,8 @@ public String getInverseManager() {\n     }\n \n     public InverseManager newInverseManagerInstance() {\n-        return (InverseManager) inverseManagerPlugin.instantiate\n-            (InverseManager.class, this);\n+        return (InverseManager) inverseManagerPlugin.instantiate(\n+            InverseManager.class, this);\n     }\n \n     public void setSavepointManager(String savepointManager) {\n@@ -714,8 +706,8 @@ public RemoteCommitProvider newRemoteCommitProviderInstance() {\n         return remoteProviderPlugin.instantiateProvider(this);\n     }\n \n-    public void setRemoteCommitEventManager\n-        (RemoteCommitEventManager remoteEventManager) {\n+    public void setRemoteCommitEventManager(\n+        RemoteCommitEventManager remoteEventManager) {\n         assertNotReadOnly();\n         this.remoteEventManager = remoteEventManager;\n         remoteProviderPlugin.configureEventManager(remoteEventManager);\n@@ -806,8 +798,8 @@ public String getMetaDataFactory() {\n     }\n \n     public MetaDataFactory newMetaDataFactoryInstance() {\n-        return (MetaDataFactory) metaFactoryPlugin.instantiate\n-            (MetaDataFactory.class, this);\n+        return (MetaDataFactory) metaFactoryPlugin.instantiate(\n+            MetaDataFactory.class, this);\n     }\n \n     public void setMetaDataRepository(String meta) {\n@@ -831,8 +823,8 @@ public MetaDataRepository getMetaDataRepositoryInstance() {\n     }\n \n     public MetaDataRepository newMetaDataRepositoryInstance() {\n-        return (MetaDataRepository) metaRepositoryPlugin.instantiate\n-            (MetaDataRepository.class, this);\n+        return (MetaDataRepository) metaRepositoryPlugin.instantiate(\n+            MetaDataRepository.class, this);\n     }\n \n     public void setConnectionUserName(String connectionUserName) {\n@@ -880,8 +872,8 @@ public String getConnectionProperties() {\n         return connectionProperties.getString();\n     }\n \n-    public void setConnectionFactoryProperties\n-        (String connectionFactoryProperties) {\n+    public void setConnectionFactoryProperties(\n+        String connectionFactoryProperties) {\n         assertNotReadOnly();\n         this.connectionFactoryProperties.setString(connectionFactoryProperties);\n     }\n@@ -924,8 +916,8 @@ public void setConnectionFactory(Object factory) {\n \n     public Object getConnectionFactory() {\n         if (connectionFactory.get() == null)\n-            connectionFactory.set(lookupConnectionFactory\n-                (getConnectionFactoryName()), true);\n+            connectionFactory.set(\n+                lookupConnectionFactory(getConnectionFactoryName()), true);\n         return connectionFactory.get();\n     }\n \n@@ -984,11 +976,11 @@ public String getConnection2Properties() {\n         return connection2Properties.getString();\n     }\n \n-    public void setConnectionFactory2Properties\n-        (String connectionFactory2Properties) {\n+    public void setConnectionFactory2Properties(\n+        String connectionFactory2Properties) {\n         assertNotReadOnly();\n-        this.connectionFactory2Properties.setString\n-            (connectionFactory2Properties);\n+        this.connectionFactory2Properties\n+            .setString(connectionFactory2Properties);\n     }\n \n     public String getConnectionFactory2Properties() {\n@@ -1011,8 +1003,8 @@ public void setConnectionFactory2(Object factory) {\n \n     public Object getConnectionFactory2() {\n         if (connectionFactory2.get() == null)\n-            connectionFactory2.set(lookupConnectionFactory\n-                (getConnectionFactory2Name()), false);\n+            connectionFactory2.set(\n+                lookupConnectionFactory(getConnectionFactory2Name()), false);\n         return connectionFactory2.get();\n     }\n \n@@ -1392,6 +1384,21 @@ public Compatibility getCompatibilityInstance() {\n         return (Compatibility) compatibilityPlugin.get();\n     }\n \n+    public String getQueryCompilationCache() {\n+        return queryCompilationCachePlugin.getString();\n+    }\n+\n+    public void setQueryCompilationCache(String conf) {\n+        queryCompilationCachePlugin.setString(conf);\n+    }\n+    \n+    public Map getQueryCompilationCacheInstance() {\n+        if (queryCompilationCachePlugin.get() == null)\n+            queryCompilationCachePlugin.instantiate(\n+                QueryCompilationCacheValue.class, this);\n+        return (Map) queryCompilationCachePlugin.get();\n+    }\n+\n     public StoreFacadeTypeRegistry getStoreFacadeTypeRegistry() {\n         return _storeFacadeRegistry;\n     }\n@@ -1410,5 +1417,5 @@ public void close() {\n \n     public Log getConfigurationLog() {\n         return getLog(LOG_RUNTIME);\n-\t}\n+    }\n }"},{"sha":"920a61d0e16dbfc97b1ba66ffb2c5bc5c80fec47","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/QueryCompilationCacheValue.java","status":"added","additions":60,"deletions":0,"changes":60,"blob_url":"https://github.com/apache/openjpa/blob/eb777be3acbda2ac8823278e8c8cd275fc3fa30d/openjpa-kernel/src/main/java/org/apache/openjpa/conf/QueryCompilationCacheValue.java","raw_url":"https://github.com/apache/openjpa/raw/eb777be3acbda2ac8823278e8c8cd275fc3fa30d/openjpa-kernel/src/main/java/org/apache/openjpa/conf/QueryCompilationCacheValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/QueryCompilationCacheValue.java?ref=eb777be3acbda2ac8823278e8c8cd275fc3fa30d","patch":"@@ -0,0 +1,60 @@\n+package org.apache.openjpa.conf;\r\n+\r\n+import java.util.*;\r\n+\r\n+import org.apache.openjpa.lib.conf.*;\r\n+import org.apache.openjpa.lib.util.concurrent.*;\r\n+import org.apache.openjpa.util.*;\r\n+\r\n+/**\r\n+ * <p>A cache of compiled queries.</p>\r\n+ *\r\n+ * @author Abe White\r\n+ * @since 0.9.6 (also existed in prior versions of Kodo)\r\n+ * @nojavadoc\r\n+ */\r\n+public class QueryCompilationCacheValue\r\n+    extends PluginValue {\r\n+\r\n+    /**\r\n+     * Query compilation cache configuration property key.\r\n+     */\r\n+    private static final String KEY = \"QueryCompilationCache\";\r\n+\r\n+    public static final String[] ALIASES = {\r\n+        \"true\", CacheMap.class.getName(),\r\n+        \"all\", ConcurrentHashMap.class.getName(),\r\n+        \"false\", null,\r\n+    };\r\n+\r\n+    private final OpenJPAConfiguration _conf;\r\n+\r\n+    public QueryCompilationCacheValue(OpenJPAConfiguration conf) {\r\n+        super(KEY, true);\r\n+        setAliases(ALIASES);\r\n+        setDefault(ALIASES[0]);\r\n+        setClassName(ALIASES[1]);\r\n+        setInstantiatingGetter(\"this.instantiate\");\r\n+        setScope(getClass());\r\n+        _conf = conf;\r\n+    }\r\n+\r\n+    /**\r\n+     * Instantiate internal map.\r\n+     */\r\n+    public void instantiate() {\r\n+        if (get() == null)\r\n+            instantiate(Map.class, _conf, true);\r\n+    }\r\n+\r\n+    public Object newInstance(String clsName, Class type,\r\n+        Configuration conf, boolean fatal) {\r\n+        // make sure map handles concurrency\r\n+        Map map = (Map) super.newInstance(clsName, type, conf, fatal);\r\n+        if (map != null && !(map instanceof Hashtable)\r\n+            && !(map instanceof CacheMap)\r\n+            && !(map instanceof ConcurrentMap))\r\n+            map = Collections.synchronizedMap(map);\r\n+        return map;\r\n+\t}\r\n+}\r"},{"sha":"8363f1e97a545dc48c0ec8935b7854223117f317","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java","status":"modified","additions":83,"deletions":2,"changes":85,"blob_url":"https://github.com/apache/openjpa/blob/eb777be3acbda2ac8823278e8c8cd275fc3fa30d/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/eb777be3acbda2ac8823278e8c8cd275fc3fa30d/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java?ref=eb777be3acbda2ac8823278e8c8cd275fc3fa30d","patch":"@@ -15,6 +15,7 @@\n  */\n package org.apache.openjpa.kernel;\n \n+import java.io.Serializable;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collection;\n@@ -26,6 +27,7 @@\n import java.util.Map;\n \n import org.apache.commons.collections.map.LinkedMap;\n+import org.apache.commons.lang.ObjectUtils;\n import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.enhance.PersistenceCapable;\n@@ -574,7 +576,7 @@ private Compilation compileForCompilation() {\n         _readOnly = false;\n         _compiling = true;\n         try {\n-            _compiled = newCompilation();\n+            _compiled = compilationFromCache();\n             return _compiled;\n         } catch (OpenJPAException ke) {\n             throw ke;\n@@ -589,7 +591,38 @@ private Compilation compileForCompilation() {\n     /**\n      * Create and initialize a query compilation based on current data.\n      */\n-    protected Compilation newCompilation() {\n+    protected Compilation compilationFromCache() {\n+        Map compCache =\n+            _broker.getConfiguration().getQueryCompilationCacheInstance();\n+        if (compCache == null) {\n+            return newCompilation();\n+        } else {\n+            CompilationKey key = new CompilationKey();\n+            key.queryType = _storeQuery.getClass();\n+            key.candidateType = getCandidateType();\n+            key.subclasses = hasSubclasses();\n+            key.query = getQueryString();\n+            key.language = getLanguage();\n+            key.storeKey = _storeQuery.newCompilationKey();\n+            Compilation comp = (Compilation) compCache.get(key);\n+\n+            // parse declarations if needed\n+            boolean cache = false;\n+            if (comp == null) {\n+                comp = newCompilation();\n+                // only cache those queries that can be compiled\n+                cache = comp.storeData != null;\n+            } else\n+                _storeQuery.populateFromCompilation(comp.storeData);\n+\n+            // cache parsed state if needed\n+            if (cache)\n+                compCache.put(key, comp);\n+            return comp;\n+        }\n+    }\n+    \n+    private Compilation newCompilation() {\n         Compilation comp = new Compilation();\n         comp.storeData = _storeQuery.newCompilation();\n         _storeQuery.populateFromCompilation(comp.storeData);\n@@ -2044,4 +2077,52 @@ public Object writeReplace ()\n \t\t\treturn _res;\n \t\t}\n \t}\n+\n+    /**\n+     * Struct to hold the unparsed properties associated with a query.\n+     */\n+    private static class CompilationKey\n+        implements Serializable {\n+\n+        public Class queryType = null;\n+        public Class candidateType = null;\n+        public boolean subclasses = true;\n+        public String query = null;\n+        public String language = null;\n+        public Object storeKey = null;\n+\n+        public int hashCode() {\n+            int rs = 17;\n+            rs = 37 * rs + ((queryType == null) ? 0 : queryType.hashCode());\n+            rs = 37 * rs + ((query == null) ? 0 : query.hashCode());\n+            rs = 37 * rs + ((language == null) ? 0 : language.hashCode());\n+            rs = 37 * rs + ((storeKey == null) ? 0 : storeKey.hashCode());\n+            return rs;\n+        }\n+\n+        public boolean equals(Object other) {\n+            if (other == this)\n+                return true;\n+            if (other == null || other.getClass() != getClass())\n+                return false;\n+\n+            CompilationKey key = (CompilationKey) other;\n+            if (key.queryType != queryType\n+                || !StringUtils.equals(key.query, query)\n+                || !StringUtils.equals(key.language, language))\n+                return false;\n+\n+            if (!ObjectUtils.equals(key.storeKey, storeKey))\n+                return false;\n+\n+            // allow either candidate type to be null because it might be\n+            // encoded in the query string, but if both are set then they\n+            // must be equal\n+            if (candidateType != null && key.candidateType != null)\n+                return candidateType == key.candidateType\n+                    && subclasses == key.subclasses;\n+\n+            return true;\n+        }\n+    }\n }"},{"sha":"6d63551b34b248903d9d8b5c47c8a085f11ea4c2","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/eb777be3acbda2ac8823278e8c8cd275fc3fa30d/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/eb777be3acbda2ac8823278e8c8cd275fc3fa30d/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java?ref=eb777be3acbda2ac8823278e8c8cd275fc3fa30d","patch":"@@ -1900,7 +1900,6 @@ private void validateAppIdClassPKs(ClassMetaData meta,\n             String cap;\n             int type;\n             Class c;\n-            ClassMetaData idmeta;\n             int access = meta.getAccessType();\n             for (int i = 0; i < fmds.length; i++) {\n                 switch (fmds[i].getDeclaredTypeCode()) {"},{"sha":"5de315f10359f9550fcd04d4d8877392cb6a1fda","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/conf/localizer.properties","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/eb777be3acbda2ac8823278e8c8cd275fc3fa30d/openjpa-kernel/src/main/resources/org/apache/openjpa/conf/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/eb777be3acbda2ac8823278e8c8cd275fc3fa30d/openjpa-kernel/src/main/resources/org/apache/openjpa/conf/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/conf/localizer.properties?ref=eb777be3acbda2ac8823278e8c8cd275fc3fa30d","patch":"@@ -532,6 +532,17 @@ Compatibility-displayorder: 50\n Compatibility-expert: true\n Compatibility-interface: org.apache.openjpa.conf.Compatibility\n \n+QueryCompilationCache-name: Query compilation cache\n+QueryCompilationCache-desc: Plugin used to cache query compilation data. \\\n+    Must implement java.util.Map. Does not need to be thread-safe -- it will \\\n+    be wrapped via the Collections.synchronizedMap() method if it does not \\\n+    extend org.apache.openjpa.util.CacheMap.\n+QueryCompilationCache-type: General\n+QueryCompilationCache-cat: Cache.Queries\n+QueryCompilationCache-displayorder: 50\n+QueryCompilationCache-expert: true\n+QueryCompilationCache-interface: java.util.Map\n+\n no-named-cf: use a DataSource bound to JNDI\n diff-specs: Attempt to configure for multiple specifications.  Was configured \\\n \tfor \"{0}\".  Attempt to now configure for \"{1}\".  This attempt will be \\"},{"sha":"d21bddd758e0cb2740437f7503e00cfea9f41fbd","filename":"openjpa-project/src/doc/manual/ref_guide_caching.xml","status":"modified","additions":78,"deletions":0,"changes":78,"blob_url":"https://github.com/apache/openjpa/blob/eb777be3acbda2ac8823278e8c8cd275fc3fa30d/openjpa-project/src/doc/manual/ref_guide_caching.xml","raw_url":"https://github.com/apache/openjpa/raw/eb777be3acbda2ac8823278e8c8cd275fc3fa30d/openjpa-project/src/doc/manual/ref_guide_caching.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_caching.xml?ref=eb777be3acbda2ac8823278e8c8cd275fc3fa30d","patch":"@@ -788,4 +788,82 @@ Iterator cachedIterator = extentQuery.getResultList().iterator();\n             </itemizedlist>\n         </section>\n     </section>\n+\t<section id=\"ref_guide_cache_querycomp\">\n+\t\t<title>Query Compilation Cache</title>\n+\t\t<indexterm zone=\"ref_guide_cache_querycomp\">\n+\t\t\t<primary>caching</primary>\n+\t\t\t<secondary>query compilation cache</secondary>\n+\t\t</indexterm>\n+\t\t<para>\n+\t\tThe query compilation cache is a <classname>Map</classname> used to\n+\t\tcache parsed query strings.  As a result, most queries are\n+\t\tonly parsed once in OpenJPA, and cached thereafter.  You can control the\n+\t\tcompilation cache through the \n+\t\t<link linkend=\"openjpa.QueryCompilationCache\"><literal>\n+\t\topenjpa.QueryCompilationCache</literal></link> configuration property.\n+\t\tThis property accepts a plugin string (see \n+\t\t<xref linkend=\"ref_guide_conf_plugins\"/>) describing the\n+\t\t<classname>Map</classname> used to associate query strings and their \n+\t\tparsed form.  This property accepts the following aliases:\n+\t\t</para>\n+\t\t<table>\n+\t\t\t<title>Pre-defined aliases</title>\n+\t\t\t<tgroup cols=\"2\" align=\"left\" colsep=\"1\" rowsep=\"1\">\n+\t\t\t\t<colspec colname=\"alias\"/>\n+\t\t\t\t<colspec colname=\"value\"/>\n+\t\t\t\t<colspec colname=\"notes\"/>\n+\t\t\t\t<thead>\n+\t\t\t\t\t<row>\n+\t\t\t\t\t\t<entry colname=\"alias\">Alias</entry>\n+\t\t\t\t\t\t<entry colname=\"value\">Value</entry>\n+\t\t\t\t\t\t<entry colname=\"notes\">Notes</entry>\n+\t\t\t\t\t</row>\n+\t\t\t\t</thead>\n+\t\t\t\t<tbody>\n+\t\t\t\t\t<row>\n+\t\t\t\t\t\t<entry colname=\"alias\">\n+\t\t\t\t\t\t\t<literal>true</literal>\n+\t\t\t\t\t\t</entry>\n+\t\t\t\t\t\t<entry colname=\"value\">\n+\t\t\t\t\t\t\t<literal>org.apache.openjpa.util.CacheMap</literal>\n+\t\t\t\t\t\t</entry>\n+\t\t\t\t\t\t<entry colname=\"notes\">\n+\t\t\t\t\t\t\tThe default option.  Uses a \n+\t\t\t\t\t\t\t<ulink url=\"&javadoc-dir;/org/apache/openjpa/util/CacheMap.html\">\n+\t\t\t\t\t\t\t<literal>CacheMap</literal></ulink> to store \n+\t\t\t\t\t\t\tcompilation data.  <literal>CacheMap</literal> uses\n+\t\t\t\t\t\t\ta least-recently-used strategy for a fixed number \n+\t\t\t\t\t\t\tof cache entries, and an optional soft reference \n+\t\t\t\t\t\t\tmap for entries that are moved out of the LRU \n+\t\t\t\t\t\t\tspace. So, for applications that have a \n+\t\t\t\t\t\t\tmonotonically increasing number of distinct queries,\n+\t\t\t\t\t\t\tthis option can be used to ensure that a fixed \n+\t\t\t\t\t\t\tamount of memory is used by the cache.\n+\t\t\t\t\t\t</entry>\n+\t\t\t\t\t</row>\n+\t\t\t\t\t<row>\n+\t\t\t\t\t\t<entry colname=\"alias\"><literal>all</literal></entry>\n+\t\t\t\t\t\t<entry colname=\"value\">\n+\t\t\t\t\t\t\t<literal>org.apache.openjpa.lib.util.ConcurrentHashMap</literal>\n+\t\t\t\t\t\t</entry>\n+\t\t\t\t\t\t<entry colname=\"notes\">\n+\t\t\t\t\t\t\tThis is the fastest option, but compilation data is\n+\t\t\t\t\t\t\tnever dropped from the cache, so if you use a large \n+\t\t\t\t\t\t\tnumber of dynamic queries, this option may result in\n+\t\t\t\t\t\t\tever-increasing memory usage. Note that if your \n+\t\t\t\t\t\t\tqueries only differ in the values of the parameters,\n+\t\t\t\t\t\t\tthis should not be an issue.\n+\t\t\t\t\t\t</entry>\n+\t\t\t\t\t</row>\n+\t\t\t\t\t<row>\n+\t\t\t\t\t\t<entry colname=\"alias\"><literal>false</literal></entry>\n+\t\t\t\t\t\t<entry colname=\"value\"><emphasis>none</emphasis></entry>\n+\t\t\t\t\t\t<entry colname=\"notes\">\n+\t\t\t\t\t\t\tDisables the compilation cache.\n+\t\t\t\t\t\t</entry>\n+\t\t\t\t\t</row>\n+\t\t\t\t</tbody>\n+\t\t\t</tgroup>\n+\t\t</table>\n+\t</section>\n </chapter>"},{"sha":"e32880861b9753c0a75be0b5691e95630e2c76da","filename":"openjpa-project/src/doc/manual/ref_guide_conf.xml","status":"modified","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/apache/openjpa/blob/eb777be3acbda2ac8823278e8c8cd275fc3fa30d/openjpa-project/src/doc/manual/ref_guide_conf.xml","raw_url":"https://github.com/apache/openjpa/raw/eb777be3acbda2ac8823278e8c8cd275fc3fa30d/openjpa-project/src/doc/manual/ref_guide_conf.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_conf.xml?ref=eb777be3acbda2ac8823278e8c8cd275fc3fa30d","patch":"@@ -2454,6 +2454,34 @@ implementation to use for caching of queries loaded from the data store. See\n <xref linkend=\"ref_guide_cache_query\"/> for details.\n             </para>\n         </section>\n+\t\t<section id=\"openjpa.QueryCompilationCache\">\n+\t\t\t<title>openjpa.QueryCompilationCache</title>\n+\t\t\t<indexterm zone=\"openjpa.QueryCompilationCache\">\n+\t\t\t\t<primary>QueryCompilationCache</primary>\n+\t\t\t</indexterm>\n+\t\t\t<indexterm zone=\"openjpa.QueryCompilationCache\">\n+\t\t\t\t<primary>caching</primary>\n+\t\t\t\t<secondary>QueryCompilationCache</secondary>\n+\t\t\t</indexterm>\n+\t\t\t<para>\n+\t\t\t<emphasis role=\"bold\">Property name:</emphasis>\n+\t\t\t<literal>openjpa.QueryCompilationCache</literal>\n+\t\t\t</para>\n+\t\t\t<para>\n+\t\t\t<emphasis role=\"bold\">Resource adaptor config-property:</emphasis> \n+\t\t\t<literal>QueryCompilationCache</literal>\n+\t\t\t</para>\n+\t\t\t<para>\n+\t\t\t<emphasis role=\"bold\">Default:</emphasis> <literal>true</literal>.\n+\t\t\t</para>\n+\t\t\t<para>\n+\t\t\t<emphasis role=\"bold\">Description:</emphasis> A plugin\n+\t\t\tstring (see <xref linkend=\"ref_guide_conf_plugins\"/>)\n+\t\t\tdescribing the <literal>java.util.Map</literal> to use for\n+\t\t\tcaching of data used during query compilation.\n+\t\t\tSee <xref linkend=\"ref_guide_cache_querycomp\"/> for details.\n+\t\t\t</para>\n+\t\t</section>\n         <section id=\"openjpa.ReadLockLevel\">\n             <title>\n                 openjpa.ReadLockLevel"},{"sha":"d15d07754453d2ebbc0adfb3e87a7c0651019c48","filename":"openjpa-project/src/doc/manual/ref_guide_optimization.xml","status":"modified","additions":16,"deletions":0,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/eb777be3acbda2ac8823278e8c8cd275fc3fa30d/openjpa-project/src/doc/manual/ref_guide_optimization.xml","raw_url":"https://github.com/apache/openjpa/raw/eb777be3acbda2ac8823278e8c8cd275fc3fa30d/openjpa-project/src/doc/manual/ref_guide_optimization.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_optimization.xml?ref=eb777be3acbda2ac8823278e8c8cd275fc3fa30d","patch":"@@ -489,6 +489,22 @@ fields to be of type <classname>Set, SortedSet, HashSet,</classname> or\n <classname>TreeSet</classname>.\n                     </entry>\n                 </row>\n+\t\t\t\t<row>\n+\t\t\t\t\t<entry colname=\"name\">\n+\t\t\t\t\t<emphasis role=\"bold\">Use query parameters instead of\n+\t\t\t\t\tencoding search data in filter strings</emphasis>\n+\t\t\t\t\t<para><emphasis>performance</emphasis></para>\n+\t\t\t\t\t</entry>\n+\t\t\t\t\t<entry colname=\"desc\">\n+\t\t\t\t\tIf your queries depend on parameter data only known at\n+\t\t\t\t\truntime, you should use query parameters rather than\n+\t\t\t\t\tdynamically building different query strings. OpenJPA\n+\t\t\t\t\tperforms aggressive caching of query compilation\n+\t\t\t\t\tdata, and the effectiveness of this cache is diminished if\n+\t\t\t\t\tmultiple query filters are used where a single one could\n+\t\t\t\t\thave sufficed.\n+\t\t\t\t\t</entry>\n+\t\t\t\t</row>\n                 <row>\n                     <entry colname=\"name\">\n                         <emphasis role=\"bold\">"}]}

