{"sha":"eb7fb7421fbfbd5e4e440c03472d113e7db3f6de","node_id":"MDY6Q29tbWl0MjA2MzY0OmViN2ZiNzQyMWZiZmJkNWU0ZTQ0MGMwMzQ3MmQxMTNlN2RiM2Y2ZGU=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2011-08-10T19:47:24Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2011-08-10T19:47:24Z"},"message":"OPENJPA-2038: Add tests for tablename including schema\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1156340 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3530066debc33c3aad4a5bcac06a0b0d4e25bb58","url":"https://api.github.com/repos/apache/openjpa/git/trees/3530066debc33c3aad4a5bcac06a0b0d4e25bb58"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/eb7fb7421fbfbd5e4e440c03472d113e7db3f6de","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/eb7fb7421fbfbd5e4e440c03472d113e7db3f6de","html_url":"https://github.com/apache/openjpa/commit/eb7fb7421fbfbd5e4e440c03472d113e7db3f6de","comments_url":"https://api.github.com/repos/apache/openjpa/commits/eb7fb7421fbfbd5e4e440c03472d113e7db3f6de/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"29213af88a72320674513a118c5c8692a4d1246c","url":"https://api.github.com/repos/apache/openjpa/commits/29213af88a72320674513a118c5c8692a4d1246c","html_url":"https://github.com/apache/openjpa/commit/29213af88a72320674513a118c5c8692a4d1246c"}],"stats":{"total":60,"additions":59,"deletions":1},"files":[{"sha":"2d043001aa0508ec073600c27008a7a9e595de9b","filename":"openjpa-jdbc/src/test/java/org/apache/openjpa/jdbc/sql/TestDBDictionaryGeneratedSQL.java","status":"modified","additions":59,"deletions":1,"changes":60,"blob_url":"https://github.com/apache/openjpa/blob/eb7fb7421fbfbd5e4e440c03472d113e7db3f6de/openjpa-jdbc/src/test/java/org/apache/openjpa/jdbc/sql/TestDBDictionaryGeneratedSQL.java","raw_url":"https://github.com/apache/openjpa/raw/eb7fb7421fbfbd5e4e440c03472d113e7db3f6de/openjpa-jdbc/src/test/java/org/apache/openjpa/jdbc/sql/TestDBDictionaryGeneratedSQL.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/test/java/org/apache/openjpa/jdbc/sql/TestDBDictionaryGeneratedSQL.java?ref=eb7fb7421fbfbd5e4e440c03472d113e7db3f6de","patch":"@@ -113,6 +113,64 @@ public void testSchemaNameIsNotConsidered() {\n         assertEquals(1, sqls.length);\n         assertTrue(sqls[0].contains(\"NameIsRight\"));\n         assertTrue(sqls[0].contains(\"IAmASchema\"));\n-    }    \n+    }\n+    \n+    public void testOverrideProperty() {\n+        final JDBCConfiguration mockConfiguration = mock(JDBCConfiguration.class);\n+        final DBIdentifierUtilImpl idImpl = new DBIdentifierUtilImpl();\n+        \n+        checking(new Expectations() {\n+            {\n+                allowing(mockConfiguration).getIdentifierUtilInstance();\n+                will(returnValue(idImpl)); \n+\n+                allowing(mockConfiguration);\n+            }\n+        });\n+        \n+        DBDictionary dict = new DBDictionary();\n+        dict.setConfiguration(mockConfiguration);\n+        dict.tableLengthIncludesSchema=true;\n+        dict.maxTableNameLength = 12;\n+\n+        Table table = new Table();\n+        table.setIdentifier(DBIdentifier.newTable(\"NameIsTooLong\"));\n+        table.setSchemaIdentifier(DBIdentifier.newSchema(\"IAmASchema\"));\n+        \n+        try {\n+            dict.getCreateTableSQL(table);\n+            fail(\"Expected a UserException\");\n+        } catch (UserException ue) {\n+            // expected - check message in case a different UserException is thrown.\n+            assertTrue(ue.getMessage().contains(\"Table name \\\"IAmASchema.NameIsTooLong\\\"\"));\n+        } \n+    }\n+    \n+    public void testOverridePropertyShortName() {\n+        final JDBCConfiguration mockConfiguration = mock(JDBCConfiguration.class);\n+        final DBIdentifierUtilImpl idImpl = new DBIdentifierUtilImpl();\n+        \n+        checking(new Expectations() {\n+            {\n+                allowing(mockConfiguration).getIdentifierUtilInstance();\n+                will(returnValue(idImpl)); \n+\n+                allowing(mockConfiguration);\n+            }\n+        });\n+        \n+        DBDictionary dict = new DBDictionary();\n+        dict.setConfiguration(mockConfiguration);\n+        dict.tableLengthIncludesSchema=true;\n+        dict.maxTableNameLength = 18;\n \n+        Table table = new Table();\n+        table.setIdentifier(DBIdentifier.newTable(\"NameIsRight\"));\n+        table.setSchemaIdentifier(DBIdentifier.newSchema(\"schema\"));\n+        \n+        String[] sqls = dict.getCreateTableSQL(table);\n+        assertEquals(1, sqls.length);\n+        assertTrue(sqls[0].contains(\"NameIsRight\"));\n+        assertTrue(sqls[0].contains(\"schema\"));\n+    }\n }"}]}

