{"sha":"ebcec6e55b3c475146e7a113e773f296fffd602f","node_id":"MDY6Q29tbWl0MjA2MzY0OmViY2VjNmU1NWIzYzQ3NTE0NmU3YTExM2U3NzNmMjk2ZmZmZDYwMmY=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-21T01:37:39Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-21T01:37:39Z"},"message":"OPENJPA-317. Moved away from requiring Type at the end of enums, in favor of alignment with existing OpenJPA config settings.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@567900 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"50c24c5473e26ac31eee9f24e1be731ba298fecd","url":"https://api.github.com/repos/apache/openjpa/git/trees/50c24c5473e26ac31eee9f24e1be731ba298fecd"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ebcec6e55b3c475146e7a113e773f296fffd602f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ebcec6e55b3c475146e7a113e773f296fffd602f","html_url":"https://github.com/apache/openjpa/commit/ebcec6e55b3c475146e7a113e773f296fffd602f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ebcec6e55b3c475146e7a113e773f296fffd602f/comments","author":null,"committer":null,"parents":[{"sha":"89ec5482cbb790df7c2057da3bdd878397890c92","url":"https://api.github.com/repos/apache/openjpa/commits/89ec5482cbb790df7c2057da3bdd878397890c92","html_url":"https://github.com/apache/openjpa/commit/89ec5482cbb790df7c2057da3bdd878397890c92"}],"stats":{"total":332,"additions":166,"deletions":166},"files":[{"sha":"33606c19cc3cd0ac84e44e91d16a2f91f79239a3","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/ebcec6e55b3c475146e7a113e773f296fffd602f/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java","raw_url":"https://github.com/apache/openjpa/raw/ebcec6e55b3c475146e7a113e773f296fffd602f/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java?ref=ebcec6e55b3c475146e7a113e773f296fffd602f","patch":"@@ -745,8 +745,8 @@ else if (anno.length() != 255)\n     /**\n      * Translate the fetch mode enum value to the internal OpenJPA constant.\n      */\n-    private static int toEagerFetchModeConstant(EagerFetchType type) {\n-        switch (type) {\n+    private static int toEagerFetchModeConstant(FetchMode mode) {\n+        switch (mode) {\n             case NONE:\n                 return EagerFetchModes.EAGER_NONE;\n             case JOIN:"},{"sha":"5ccb2809b99c0e8286d211d8d0395eb5bcb03f8a","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/EagerFetchMode.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/ebcec6e55b3c475146e7a113e773f296fffd602f/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/EagerFetchMode.java","raw_url":"https://github.com/apache/openjpa/raw/ebcec6e55b3c475146e7a113e773f296fffd602f/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/EagerFetchMode.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/EagerFetchMode.java?ref=ebcec6e55b3c475146e7a113e773f296fffd602f","patch":"@@ -35,5 +35,5 @@\n @Retention(RUNTIME)\n public @interface EagerFetchMode {\n \n-    EagerFetchType value() default EagerFetchType.NONE;\n+    FetchMode value() default FetchMode.NONE;\n }"},{"sha":"dba6e504a64d870c377e34749c1568c1f316cce8","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/FetchMode.java","status":"renamed","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/ebcec6e55b3c475146e7a113e773f296fffd602f/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/FetchMode.java","raw_url":"https://github.com/apache/openjpa/raw/ebcec6e55b3c475146e7a113e773f296fffd602f/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/FetchMode.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/FetchMode.java?ref=ebcec6e55b3c475146e7a113e773f296fffd602f","patch":"@@ -27,22 +27,22 @@\n  * @since 0.4.0\n  * @published\n  */\n-public enum EagerFetchType {\n+public enum FetchMode {\n     NONE(EagerFetchModes.EAGER_NONE),\n     JOIN(EagerFetchModes.EAGER_JOIN),\n     PARALLEL(EagerFetchModes.EAGER_PARALLEL);\n \n     private final int eagerFetchConstant;\n \n-    private EagerFetchType(int value) {\n+    private FetchMode(int value) {\n         eagerFetchConstant = value;\n     }\n \n     int toKernelConstant() {\n         return eagerFetchConstant;\n     }\n \n-    static EagerFetchType fromKernelConstant(int kernelConstant) {\n+    static FetchMode fromKernelConstant(int kernelConstant) {\n         switch (kernelConstant) {\n             case EagerFetchModes.EAGER_NONE:\n                 return NONE;","previous_filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/EagerFetchType.java"},{"sha":"734bc6ce5ab4d3ad70fe5f5182209ec0c2bfc8d8","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ForeignKeyAction.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/ebcec6e55b3c475146e7a113e773f296fffd602f/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ForeignKeyAction.java","raw_url":"https://github.com/apache/openjpa/raw/ebcec6e55b3c475146e7a113e773f296fffd602f/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ForeignKeyAction.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ForeignKeyAction.java?ref=ebcec6e55b3c475146e7a113e773f296fffd602f","patch":"@@ -30,4 +30,4 @@\n     CASCADE,\n     NULL,\n     DEFAULT\n-};\n+}"},{"sha":"2fbba29c3b91b78913b45b1f9d710bbe1ef4b9d4","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCFetchPlan.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/ebcec6e55b3c475146e7a113e773f296fffd602f/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCFetchPlan.java","raw_url":"https://github.com/apache/openjpa/raw/ebcec6e55b3c475146e7a113e773f296fffd602f/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCFetchPlan.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCFetchPlan.java?ref=ebcec6e55b3c475146e7a113e773f296fffd602f","patch":"@@ -37,22 +37,22 @@\n     /**\n      * Eager fetch mode in loading relations.\n      */\n-    public EagerFetchType getEagerFetchMode();\n+    public FetchMode getEagerFetchMode();\n \n     /**\n      * Eager fetch mode in loading relations.\n      */\n-    public JDBCFetchPlan setEagerFetchMode(EagerFetchType type);\n+    public JDBCFetchPlan setEagerFetchMode(FetchMode mode);\n \n     /**\n      * Eager fetch mode in loading subclasses.\n      */\n-    public EagerFetchType getSubclassFetchMode();\n+    public FetchMode getSubclassFetchMode();\n \n     /**\n      * Eager fetch mode in loading subclasses.\n      */\n-    public JDBCFetchPlan setSubclassFetchMode(EagerFetchType type);\n+    public JDBCFetchPlan setSubclassFetchMode(FetchMode mode);\n \n     /**\n      * Type of JDBC result set to use for query results.\n@@ -77,22 +77,22 @@\n     /**\n      * How to determine the size of a large result set.\n      */\n-    public LRSSizeType getLRSSize();\n+    public LRSSize getLRSSize();\n \n     /**\n      * How to determine the size of a large result set.\n      */\n-    public JDBCFetchPlan setLRSSize(LRSSizeType lrsSize);\n+    public JDBCFetchPlan setLRSSize(LRSSize lrsSize);\n \n     /**\n      * SQL join syntax.\n      */\n-    public JoinSyntaxType getJoinSyntax();\n+    public JoinSyntax getJoinSyntax();\n \n     /**\n      * SQL join syntax.\n      */\n-    public JDBCFetchPlan setJoinSyntax(JoinSyntaxType syntax);\n+    public JDBCFetchPlan setJoinSyntax(JoinSyntax syntax);\n \n     /**\n      * The isolation level for queries issued to the database. This overrides"},{"sha":"2e93eb22972cf7b963f76aca31dff6654e1848dd","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCFetchPlanImpl.java","status":"modified","additions":14,"deletions":14,"changes":28,"blob_url":"https://github.com/apache/openjpa/blob/ebcec6e55b3c475146e7a113e773f296fffd602f/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCFetchPlanImpl.java","raw_url":"https://github.com/apache/openjpa/raw/ebcec6e55b3c475146e7a113e773f296fffd602f/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCFetchPlanImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCFetchPlanImpl.java?ref=ebcec6e55b3c475146e7a113e773f296fffd602f","patch":"@@ -55,21 +55,21 @@ protected DelegatingFetchConfiguration newDelegatingFetchConfiguration(\n         return _fetch;\n     }\n \n-    public EagerFetchType getEagerFetchMode() {\n-        return EagerFetchType.fromKernelConstant(_fetch.getEagerFetchMode());\n+    public FetchMode getEagerFetchMode() {\n+        return FetchMode.fromKernelConstant(_fetch.getEagerFetchMode());\n     }\n \n-    public JDBCFetchPlanImpl setEagerFetchMode(EagerFetchType type) {\n-        _fetch.setEagerFetchMode(type.toKernelConstant());\n+    public JDBCFetchPlanImpl setEagerFetchMode(FetchMode mode) {\n+        _fetch.setEagerFetchMode(mode.toKernelConstant());\n         return this;\n     }\n \n-    public EagerFetchType getSubclassFetchMode() {\n-        return EagerFetchType.fromKernelConstant(_fetch.getSubclassFetchMode());\n+    public FetchMode getSubclassFetchMode() {\n+        return FetchMode.fromKernelConstant(_fetch.getSubclassFetchMode());\n     }\n \n-    public JDBCFetchPlanImpl setSubclassFetchMode(EagerFetchType type) {\n-        _fetch.setSubclassFetchMode(type.toKernelConstant());\n+    public JDBCFetchPlanImpl setSubclassFetchMode(FetchMode mode) {\n+        _fetch.setSubclassFetchMode(mode.toKernelConstant());\n         return this;\n     }\n \n@@ -91,20 +91,20 @@ public JDBCFetchPlanImpl setFetchDirection(FetchDirection direction) {\n         return this;\n     }\n \n-    public LRSSizeType getLRSSize() {\n-        return LRSSizeType.fromKernelConstant(_fetch.getLRSSize());\n+    public LRSSize getLRSSize() {\n+        return LRSSize.fromKernelConstant(_fetch.getLRSSize());\n     }\n \n-    public JDBCFetchPlanImpl setLRSSize(LRSSizeType lrsSize) {\n+    public JDBCFetchPlanImpl setLRSSize(LRSSize lrsSize) {\n         _fetch.setLRSSize(lrsSize.toKernelConstant());\n         return this;\n     }\n \n-    public JoinSyntaxType getJoinSyntax() {\n-        return JoinSyntaxType.fromKernelConstant(_fetch.getJoinSyntax());\n+    public JoinSyntax getJoinSyntax() {\n+        return JoinSyntax.fromKernelConstant(_fetch.getJoinSyntax());\n     }\n \n-    public JDBCFetchPlanImpl setJoinSyntax(JoinSyntaxType syntax) {\n+    public JDBCFetchPlanImpl setJoinSyntax(JoinSyntax syntax) {\n         _fetch.setJoinSyntax(syntax.toKernelConstant());\n         return this;\n     }"},{"sha":"6b742863aa27d276b8fd6b2595c84d72bf839bc2","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JoinSyntax.java","status":"renamed","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/ebcec6e55b3c475146e7a113e773f296fffd602f/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JoinSyntax.java","raw_url":"https://github.com/apache/openjpa/raw/ebcec6e55b3c475146e7a113e773f296fffd602f/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JoinSyntax.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JoinSyntax.java?ref=ebcec6e55b3c475146e7a113e773f296fffd602f","patch":"@@ -26,22 +26,22 @@\n  * @since 1.0.0\n  * @published\n  */\n-public enum JoinSyntaxType {\n+public enum JoinSyntax {\n     SQL92(JoinSyntaxes.SYNTAX_SQL92),\n     TRADITIONAL(JoinSyntaxes.SYNTAX_TRADITIONAL),\n     DATABASE(JoinSyntaxes.SYNTAX_DATABASE);\n \n     private final int joinSyntaxConstant;\n \n-    private JoinSyntaxType(int value) {\n+    private JoinSyntax(int value) {\n         joinSyntaxConstant = value;\n     }\n \n     int toKernelConstant() {\n         return joinSyntaxConstant;\n     }\n \n-    static JoinSyntaxType fromKernelConstant(int kernelConstant) {\n+    static JoinSyntax fromKernelConstant(int kernelConstant) {\n         switch (kernelConstant) {\n             case JoinSyntaxes.SYNTAX_SQL92:\n                 return SQL92;","previous_filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JoinSyntaxType.java"},{"sha":"ca77d5e1cb382c2458dc6f7b09faec14ec9dbd05","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/LRSSize.java","status":"renamed","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/ebcec6e55b3c475146e7a113e773f296fffd602f/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/LRSSize.java","raw_url":"https://github.com/apache/openjpa/raw/ebcec6e55b3c475146e7a113e773f296fffd602f/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/LRSSize.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/LRSSize.java?ref=ebcec6e55b3c475146e7a113e773f296fffd602f","patch":"@@ -26,22 +26,22 @@\n  * @since 1.0.0\n  * @published\n  */\n-public enum LRSSizeType {\n+public enum LRSSize {\n     UNKNOWN(LRSSizes.SIZE_UNKNOWN),\n     LAST(LRSSizes.SIZE_LAST),\n     QUERY(LRSSizes.SIZE_QUERY);\n \n     private final int lrsConstant;\n \n-    private LRSSizeType(int value) {\n+    private LRSSize(int value) {\n         lrsConstant = value;\n     }\n \n     int toKernelConstant() {\n         return lrsConstant;\n     }\n \n-    static LRSSizeType fromKernelConstant(int kernelConstant) {\n+    static LRSSize fromKernelConstant(int kernelConstant) {\n         switch (kernelConstant) {\n             case LRSSizes.SIZE_UNKNOWN:\n                 return UNKNOWN;","previous_filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/LRSSizeType.java"},{"sha":"d909d746258096685892004a0f13c66c3be84a65","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/SubclassFetchMode.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/ebcec6e55b3c475146e7a113e773f296fffd602f/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/SubclassFetchMode.java","raw_url":"https://github.com/apache/openjpa/raw/ebcec6e55b3c475146e7a113e773f296fffd602f/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/SubclassFetchMode.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/SubclassFetchMode.java?ref=ebcec6e55b3c475146e7a113e773f296fffd602f","patch":"@@ -34,5 +34,5 @@\n @Retention(RUNTIME)\n public @interface SubclassFetchMode {\n \n-    EagerFetchType value() default EagerFetchType.NONE;\n+    FetchMode value() default FetchMode.NONE;\n }"},{"sha":"1d86a29af4631656f3ac5c5b242b21f035f7a320","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestJDBCEnumToKernelConstantMappings.java","status":"modified","additions":48,"deletions":48,"changes":96,"blob_url":"https://github.com/apache/openjpa/blob/ebcec6e55b3c475146e7a113e773f296fffd602f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestJDBCEnumToKernelConstantMappings.java","raw_url":"https://github.com/apache/openjpa/raw/ebcec6e55b3c475146e7a113e773f296fffd602f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestJDBCEnumToKernelConstantMappings.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestJDBCEnumToKernelConstantMappings.java?ref=ebcec6e55b3c475146e7a113e773f296fffd602f","patch":"@@ -30,89 +30,89 @@\n \r\n     public void testEagerFetchModes() {\r\n         assertEquals(EagerFetchModes.EAGER_NONE,\r\n-            EagerFetchType.NONE.toKernelConstant());\r\n-        assertEquals(EagerFetchType.NONE,\r\n-            EagerFetchType.fromKernelConstant(\r\n+            FetchMode.NONE.toKernelConstant());\r\n+        assertEquals(FetchMode.NONE,\r\n+            FetchMode.fromKernelConstant(\r\n                 EagerFetchModes.EAGER_NONE));\r\n-        assertEquals(EagerFetchType.NONE.toKernelConstant(),\r\n-            EagerFetchType.NONE.ordinal());\r\n+        assertEquals(FetchMode.NONE.toKernelConstant(),\r\n+            FetchMode.NONE.ordinal());\r\n \r\n         assertEquals(EagerFetchModes.EAGER_JOIN,\r\n-            EagerFetchType.JOIN.toKernelConstant());\r\n-        assertEquals(EagerFetchType.JOIN,\r\n-            EagerFetchType.fromKernelConstant(\r\n+            FetchMode.JOIN.toKernelConstant());\r\n+        assertEquals(FetchMode.JOIN,\r\n+            FetchMode.fromKernelConstant(\r\n                 EagerFetchModes.EAGER_JOIN));\r\n-        assertEquals(EagerFetchType.JOIN.toKernelConstant(),\r\n-            EagerFetchType.JOIN.ordinal());\r\n+        assertEquals(FetchMode.JOIN.toKernelConstant(),\r\n+            FetchMode.JOIN.ordinal());\r\n \r\n         assertEquals(EagerFetchModes.EAGER_PARALLEL,\r\n-            EagerFetchType.PARALLEL.toKernelConstant());\r\n-        assertEquals(EagerFetchType.PARALLEL,\r\n-            EagerFetchType.fromKernelConstant(\r\n+            FetchMode.PARALLEL.toKernelConstant());\r\n+        assertEquals(FetchMode.PARALLEL,\r\n+            FetchMode.fromKernelConstant(\r\n                 EagerFetchModes.EAGER_PARALLEL));\r\n-        assertEquals(EagerFetchType.PARALLEL.toKernelConstant(),\r\n-            EagerFetchType.PARALLEL.ordinal());\r\n+        assertEquals(FetchMode.PARALLEL.toKernelConstant(),\r\n+            FetchMode.PARALLEL.ordinal());\r\n \r\n         assertEquals(getConstantCount(EagerFetchModes.class),\r\n-            EagerFetchType.values().length);\r\n+            FetchMode.values().length);\r\n     }\r\n \r\n     public void testLRSSizeType() {\r\n         assertEquals(LRSSizes.SIZE_UNKNOWN,\r\n-            LRSSizeType.UNKNOWN.toKernelConstant());\r\n-        assertEquals(LRSSizeType.UNKNOWN,\r\n-            LRSSizeType.fromKernelConstant(\r\n+            LRSSize.UNKNOWN.toKernelConstant());\r\n+        assertEquals(LRSSize.UNKNOWN,\r\n+            LRSSize.fromKernelConstant(\r\n                 LRSSizes.SIZE_UNKNOWN));\r\n-        assertEquals(LRSSizeType.UNKNOWN.toKernelConstant(),\r\n-            LRSSizeType.UNKNOWN.ordinal());\r\n+        assertEquals(LRSSize.UNKNOWN.toKernelConstant(),\r\n+            LRSSize.UNKNOWN.ordinal());\r\n \r\n         assertEquals(LRSSizes.SIZE_LAST,\r\n-            LRSSizeType.LAST.toKernelConstant());\r\n-        assertEquals(LRSSizeType.LAST,\r\n-            LRSSizeType.fromKernelConstant(\r\n+            LRSSize.LAST.toKernelConstant());\r\n+        assertEquals(LRSSize.LAST,\r\n+            LRSSize.fromKernelConstant(\r\n                 LRSSizes.SIZE_LAST));\r\n-        assertEquals(LRSSizeType.LAST.toKernelConstant(),\r\n-            LRSSizeType.LAST.ordinal());\r\n+        assertEquals(LRSSize.LAST.toKernelConstant(),\r\n+            LRSSize.LAST.ordinal());\r\n \r\n         assertEquals(LRSSizes.SIZE_QUERY,\r\n-            LRSSizeType.QUERY.toKernelConstant());\r\n-        assertEquals(LRSSizeType.QUERY,\r\n-            LRSSizeType.fromKernelConstant(\r\n+            LRSSize.QUERY.toKernelConstant());\r\n+        assertEquals(LRSSize.QUERY,\r\n+            LRSSize.fromKernelConstant(\r\n                 LRSSizes.SIZE_QUERY));\r\n-        assertEquals(LRSSizeType.QUERY.toKernelConstant(),\r\n-            LRSSizeType.QUERY.ordinal());\r\n+        assertEquals(LRSSize.QUERY.toKernelConstant(),\r\n+            LRSSize.QUERY.ordinal());\r\n \r\n         assertEquals(getConstantCount(LRSSizes.class),\r\n-            LRSSizeType.values().length);\r\n+            LRSSize.values().length);\r\n     }\r\n \r\n     public void testJoinSyntaxType() {\r\n         assertEquals(JoinSyntaxes.SYNTAX_SQL92,\r\n-            JoinSyntaxType.SQL92.toKernelConstant());\r\n-        assertEquals(JoinSyntaxType.SQL92,\r\n-            JoinSyntaxType.fromKernelConstant(\r\n+            JoinSyntax.SQL92.toKernelConstant());\r\n+        assertEquals(JoinSyntax.SQL92,\r\n+            JoinSyntax.fromKernelConstant(\r\n                 JoinSyntaxes.SYNTAX_SQL92));\r\n-        assertEquals(JoinSyntaxType.SQL92.toKernelConstant(),\r\n-            JoinSyntaxType.SQL92.ordinal());\r\n+        assertEquals(JoinSyntax.SQL92.toKernelConstant(),\r\n+            JoinSyntax.SQL92.ordinal());\r\n \r\n         assertEquals(JoinSyntaxes.SYNTAX_TRADITIONAL,\r\n-            JoinSyntaxType.TRADITIONAL.toKernelConstant());\r\n-        assertEquals(JoinSyntaxType.TRADITIONAL,\r\n-            JoinSyntaxType.fromKernelConstant(\r\n+            JoinSyntax.TRADITIONAL.toKernelConstant());\r\n+        assertEquals(JoinSyntax.TRADITIONAL,\r\n+            JoinSyntax.fromKernelConstant(\r\n                 JoinSyntaxes.SYNTAX_TRADITIONAL));\r\n-        assertEquals(JoinSyntaxType.TRADITIONAL.toKernelConstant(),\r\n-            JoinSyntaxType.TRADITIONAL.ordinal());\r\n+        assertEquals(JoinSyntax.TRADITIONAL.toKernelConstant(),\r\n+            JoinSyntax.TRADITIONAL.ordinal());\r\n \r\n         assertEquals(JoinSyntaxes.SYNTAX_DATABASE,\r\n-            JoinSyntaxType.DATABASE.toKernelConstant());\r\n-        assertEquals(JoinSyntaxType.DATABASE,\r\n-            JoinSyntaxType.fromKernelConstant(\r\n+            JoinSyntax.DATABASE.toKernelConstant());\r\n+        assertEquals(JoinSyntax.DATABASE,\r\n+            JoinSyntax.fromKernelConstant(\r\n                 JoinSyntaxes.SYNTAX_DATABASE));\r\n-        assertEquals(JoinSyntaxType.DATABASE.toKernelConstant(),\r\n-            JoinSyntaxType.DATABASE.ordinal());\r\n+        assertEquals(JoinSyntax.DATABASE.toKernelConstant(),\r\n+            JoinSyntax.DATABASE.ordinal());\r\n \r\n         assertEquals(getConstantCount(JoinSyntaxes.class),\r\n-            JoinSyntaxType.values().length);\r\n+            JoinSyntax.values().length);\r\n     }\r\n \r\n     public void testResultSetType() {\r"},{"sha":"d2cfb33b050f66a1f8f1799451eea91182694a6a","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/CallbackMode.java","status":"renamed","additions":13,"deletions":13,"changes":26,"blob_url":"https://github.com/apache/openjpa/blob/ebcec6e55b3c475146e7a113e773f296fffd602f/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/CallbackMode.java","raw_url":"https://github.com/apache/openjpa/raw/ebcec6e55b3c475146e7a113e773f296fffd602f/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/CallbackMode.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/CallbackMode.java?ref=ebcec6e55b3c475146e7a113e773f296fffd602f","patch":"@@ -29,7 +29,7 @@\n  * @since 1.0.0\r\n  * @published\r\n  */\r\n-public enum CallbackType {\r\n+public enum CallbackMode {\r\n     FAIL_FAST(CallbackModes.CALLBACK_FAIL_FAST),\r\n     IGNORE(CallbackModes.CALLBACK_IGNORE),\r\n     LOG(CallbackModes.CALLBACK_LOG),\r\n@@ -38,29 +38,29 @@\n \r\n     private final int callbackMode;\r\n \r\n-    private CallbackType(int value) {\r\n+    private CallbackMode(int value) {\r\n         callbackMode = value;\r\n     }\r\n \r\n-    public static EnumSet<CallbackType> toEnumSet(int callback) {\r\n-        EnumSet<CallbackType> types = EnumSet.noneOf(CallbackType.class);\r\n+    public static EnumSet<CallbackMode> toEnumSet(int callback) {\r\n+        EnumSet<CallbackMode> modes = EnumSet.noneOf(CallbackMode.class);\r\n         if ((callback & CallbackModes.CALLBACK_FAIL_FAST) != 0)\r\n-            types.add(FAIL_FAST);\r\n+            modes.add(FAIL_FAST);\r\n         if ((callback & CallbackModes.CALLBACK_IGNORE) != 0)\r\n-            types.add(IGNORE);\r\n+            modes.add(IGNORE);\r\n         if ((callback & CallbackModes.CALLBACK_LOG) != 0)\r\n-            types.add(LOG);\r\n+            modes.add(LOG);\r\n         if ((callback & CallbackModes.CALLBACK_RETHROW) != 0)\r\n-            types.add(RETHROW);\r\n+            modes.add(RETHROW);\r\n         if ((callback & CallbackModes.CALLBACK_ROLLBACK) != 0)\r\n-            types.add(ROLLBACK);\r\n-        return types;\r\n+            modes.add(ROLLBACK);\r\n+        return modes;\r\n     }\r\n \r\n-    public static int fromEnumSet(EnumSet<CallbackType> types) {\r\n+    public static int fromEnumSet(EnumSet<CallbackMode> modes) {\r\n         int callback = 0;\r\n-        for (CallbackType type : types)\r\n-            callback |= type.callbackMode;\r\n+        for (CallbackMode mode : modes)\r\n+            callback |= mode.callbackMode;\r\n         return callback;\r\n     }\r\n }\r","previous_filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/CallbackType.java"},{"sha":"5a62fa3ab8611e6fa1da58f46908367ce007d8eb","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ConnectionRetainMode.java","status":"renamed","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/ebcec6e55b3c475146e7a113e773f296fffd602f/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ConnectionRetainMode.java","raw_url":"https://github.com/apache/openjpa/raw/ebcec6e55b3c475146e7a113e773f296fffd602f/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ConnectionRetainMode.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ConnectionRetainMode.java?ref=ebcec6e55b3c475146e7a113e773f296fffd602f","patch":"@@ -27,22 +27,22 @@\n  * @since 1.0.0\r\n  * @published\r\n  */\r\n-public enum ConnectionRetainType {\r\n+public enum ConnectionRetainMode {\r\n     ON_DEMAND(ConnectionRetainModes.CONN_RETAIN_DEMAND),\r\n     TRANSACTION(ConnectionRetainModes.CONN_RETAIN_TRANS),\r\n     ALWAYS(ConnectionRetainModes.CONN_RETAIN_ALWAYS);\r\n \r\n     private final int connectionRetainConstant;\r\n \r\n-    private ConnectionRetainType(int value) {\r\n+    private ConnectionRetainMode(int value) {\r\n         connectionRetainConstant = value;\r\n     }\r\n \r\n     int toKernelConstant() {\r\n         return connectionRetainConstant;\r\n     }\r\n \r\n-    static ConnectionRetainType fromKernelConstant(int kernelConstant) {\r\n+    static ConnectionRetainMode fromKernelConstant(int kernelConstant) {\r\n         switch (kernelConstant) {\r\n             case ConnectionRetainModes.CONN_RETAIN_DEMAND:\r\n                 return ON_DEMAND;\r","previous_filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ConnectionRetainType.java"},{"sha":"1f32790a37c1ad6e5db62ea326cbbade7b8b5bdc","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","status":"modified","additions":14,"deletions":14,"changes":28,"blob_url":"https://github.com/apache/openjpa/blob/ebcec6e55b3c475146e7a113e773f296fffd602f/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/ebcec6e55b3c475146e7a113e773f296fffd602f/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java?ref=ebcec6e55b3c475146e7a113e773f296fffd602f","patch":"@@ -110,8 +110,8 @@ public FetchPlan getFetchPlan() {\n         }\r\n     }\r\n \r\n-    public ConnectionRetainType getConnectionRetainMode() {\r\n-        return ConnectionRetainType.fromKernelConstant(\r\n+    public ConnectionRetainMode getConnectionRetainMode() {\r\n+        return ConnectionRetainMode.fromKernelConstant(\r\n             _broker.getConnectionRetainMode());\r\n     }\r\n \r\n@@ -290,21 +290,21 @@ public void removeTransactionListener(Object listener) {\n         _broker.removeTransactionListener(listener);\r\n     }\r\n \r\n-    public EnumSet<CallbackType> getTransactionListenerCallbackMode() {\r\n-        return CallbackType.toEnumSet(\r\n+    public EnumSet<CallbackMode> getTransactionListenerCallbackMode() {\r\n+        return CallbackMode.toEnumSet(\r\n             _broker.getTransactionListenerCallbackMode());\r\n     }\r\n \r\n-    public void setTransactionListenerCallbackMode(CallbackType type) {\r\n+    public void setTransactionListenerCallbackMode(CallbackMode mode) {\r\n         assertNotCloseInvoked();\r\n         _broker.setTransactionListenerCallbackMode(\r\n-            CallbackType.fromEnumSet(EnumSet.of(type)));\r\n+            CallbackMode.fromEnumSet(EnumSet.of(mode)));\r\n     }\r\n \r\n-    public void setTransactionListenerCallbackMode(EnumSet<CallbackType> types){\r\n+    public void setTransactionListenerCallbackMode(EnumSet<CallbackMode> modes){\r\n         assertNotCloseInvoked();\r\n         _broker.setTransactionListenerCallbackMode(\r\n-            CallbackType.fromEnumSet(types));\r\n+            CallbackMode.fromEnumSet(modes));\r\n     }\r\n \r\n     public void addLifecycleListener(Object listener, Class... classes) {\r\n@@ -317,21 +317,21 @@ public void removeLifecycleListener(Object listener) {\n         _broker.removeLifecycleListener(listener);\r\n     }\r\n \r\n-    public EnumSet<CallbackType> getLifecycleListenerCallbackMode() {\r\n-        return CallbackType.toEnumSet(\r\n+    public EnumSet<CallbackMode> getLifecycleListenerCallbackMode() {\r\n+        return CallbackMode.toEnumSet(\r\n             _broker.getLifecycleListenerCallbackMode());\r\n     }\r\n \r\n-    public void setLifecycleListenerCallbackMode(CallbackType type) {\r\n+    public void setLifecycleListenerCallbackMode(CallbackMode mode) {\r\n         assertNotCloseInvoked();\r\n         _broker.setLifecycleListenerCallbackMode(\r\n-            CallbackType.fromEnumSet(EnumSet.of(type)));\r\n+            CallbackMode.fromEnumSet(EnumSet.of(mode)));\r\n     }\r\n \r\n-    public void setLifecycleListenerCallbackMode(EnumSet<CallbackType> types) {\r\n+    public void setLifecycleListenerCallbackMode(EnumSet<CallbackMode> modes) {\r\n         assertNotCloseInvoked();\r\n         _broker.setLifecycleListenerCallbackMode(\r\n-            CallbackType.fromEnumSet(types));\r\n+            CallbackMode.fromEnumSet(modes));\r\n     }\r\n \r\n     @SuppressWarnings(\"unchecked\")\r"},{"sha":"8262201009230d32729ba3e1c5aa7bf81d58cf4f","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityManager.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/ebcec6e55b3c475146e7a113e773f296fffd602f/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityManager.java","raw_url":"https://github.com/apache/openjpa/raw/ebcec6e55b3c475146e7a113e773f296fffd602f/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityManager.java?ref=ebcec6e55b3c475146e7a113e773f296fffd602f","patch":"@@ -48,7 +48,7 @@\n     /**\n      * Return the connection retain mode for this entity manager.\n      */\n-    public ConnectionRetainType getConnectionRetainMode();\n+    public ConnectionRetainMode getConnectionRetainMode();\n \n     /**\n      * Whether this entity manager is using managed transactions."},{"sha":"9197b685788ac68b3e3eb765dde77bfd84ebad5d","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityManagerSPI.java","status":"modified","additions":12,"deletions":12,"changes":24,"blob_url":"https://github.com/apache/openjpa/blob/ebcec6e55b3c475146e7a113e773f296fffd602f/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityManagerSPI.java","raw_url":"https://github.com/apache/openjpa/raw/ebcec6e55b3c475146e7a113e773f296fffd602f/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityManagerSPI.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityManagerSPI.java?ref=ebcec6e55b3c475146e7a113e773f296fffd602f","patch":"@@ -51,24 +51,24 @@\n     public void removeTransactionListener(Object listener);\r\n \r\n     /**\r\n-     * The {@link CallbackType} flags for handling transaction listener\r\n+     * The {@link CallbackMode} flags for handling transaction listener\r\n      * exceptions.\r\n      */\r\n-    public EnumSet<CallbackType> getTransactionListenerCallbackMode();\r\n+    public EnumSet<CallbackMode> getTransactionListenerCallbackMode();\r\n \r\n     /**\r\n-     * The {@link CallbackType} flag for handling transaction listener\r\n+     * The {@link CallbackMode} flag for handling transaction listener\r\n      * exceptions. The flags provided here will entirely replace the\r\n      * previous settings.\r\n      */\r\n-    public void setTransactionListenerCallbackMode(CallbackType type);\r\n+    public void setTransactionListenerCallbackMode(CallbackMode mode);\r\n \r\n     /**\r\n-     * The {@link CallbackType} flags for handling transaction listener\r\n+     * The {@link CallbackMode} flags for handling transaction listener\r\n      * exceptions. The flags provided here will entirely replace the\r\n      * previous settings.\r\n      */\r\n-    public void setTransactionListenerCallbackMode(EnumSet<CallbackType> types);\r\n+    public void setTransactionListenerCallbackMode(EnumSet<CallbackMode> modes);\r\n \r\n     /**\r\n      * Register a listener for lifecycle-related events on the specified\r\n@@ -83,22 +83,22 @@\n     public void removeLifecycleListener(Object listener);\r\n \r\n     /**\r\n-     * The {@link CallbackType} flags for handling lifecycle listener\r\n+     * The {@link CallbackMode} flags for handling lifecycle listener\r\n      * exceptions.\r\n      */\r\n-    public EnumSet<CallbackType> getLifecycleListenerCallbackMode();\r\n+    public EnumSet<CallbackMode> getLifecycleListenerCallbackMode();\r\n \r\n     /**\r\n-     * The {@link CallbackType} flag for handling lifecycle listener\r\n+     * The {@link CallbackMode} flag for handling lifecycle listener\r\n      * exceptions. The flags provided here will entirely replace the\r\n      * previous settings.\r\n      */\r\n-    public void setLifecycleListenerCallbackMode(CallbackType type);\r\n+    public void setLifecycleListenerCallbackMode(CallbackMode mode);\r\n \r\n     /**\r\n-     * The {@link CallbackType} flags for handling lifecycle listener\r\n+     * The {@link CallbackMode} flags for handling lifecycle listener\r\n      * exceptions. The flags provided here will entirely replace the\r\n      * previous settings.\r\n      */\r\n-    public void setLifecycleListenerCallbackMode(EnumSet<CallbackType> types);\r\n+    public void setLifecycleListenerCallbackMode(EnumSet<CallbackMode> modes);\r\n }\r"},{"sha":"752b56a740ccdc5228ba4722ed85da17ec836a9d","filename":"openjpa-persistence/src/test/java/org/apache/openjpa/persistence/TestEnumToKernelConstantMappings.java","status":"modified","additions":39,"deletions":39,"changes":78,"blob_url":"https://github.com/apache/openjpa/blob/ebcec6e55b3c475146e7a113e773f296fffd602f/openjpa-persistence/src/test/java/org/apache/openjpa/persistence/TestEnumToKernelConstantMappings.java","raw_url":"https://github.com/apache/openjpa/raw/ebcec6e55b3c475146e7a113e773f296fffd602f/openjpa-persistence/src/test/java/org/apache/openjpa/persistence/TestEnumToKernelConstantMappings.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/test/java/org/apache/openjpa/persistence/TestEnumToKernelConstantMappings.java?ref=ebcec6e55b3c475146e7a113e773f296fffd602f","patch":"@@ -34,31 +34,31 @@\n \r\n     public void testConnectionRetainModes() {\r\n         assertEquals(ConnectionRetainModes.CONN_RETAIN_ALWAYS,\r\n-            ConnectionRetainType.ALWAYS.toKernelConstant());\r\n-        assertEquals(ConnectionRetainType.ALWAYS,\r\n-            ConnectionRetainType.fromKernelConstant(\r\n+            ConnectionRetainMode.ALWAYS.toKernelConstant());\r\n+        assertEquals(ConnectionRetainMode.ALWAYS,\r\n+            ConnectionRetainMode.fromKernelConstant(\r\n                 ConnectionRetainModes.CONN_RETAIN_ALWAYS));\r\n-        assertEquals(ConnectionRetainType.ALWAYS.toKernelConstant(),\r\n-            ConnectionRetainType.ALWAYS.ordinal());\r\n+        assertEquals(ConnectionRetainMode.ALWAYS.toKernelConstant(),\r\n+            ConnectionRetainMode.ALWAYS.ordinal());\r\n \r\n         assertEquals(ConnectionRetainModes.CONN_RETAIN_DEMAND,\r\n-            ConnectionRetainType.ON_DEMAND.toKernelConstant());\r\n-        assertEquals(ConnectionRetainType.ON_DEMAND,\r\n-            ConnectionRetainType.fromKernelConstant(\r\n+            ConnectionRetainMode.ON_DEMAND.toKernelConstant());\r\n+        assertEquals(ConnectionRetainMode.ON_DEMAND,\r\n+            ConnectionRetainMode.fromKernelConstant(\r\n                 ConnectionRetainModes.CONN_RETAIN_DEMAND));\r\n-        assertEquals(ConnectionRetainType.ON_DEMAND.toKernelConstant(),\r\n-            ConnectionRetainType.ON_DEMAND.ordinal());\r\n+        assertEquals(ConnectionRetainMode.ON_DEMAND.toKernelConstant(),\r\n+            ConnectionRetainMode.ON_DEMAND.ordinal());\r\n \r\n         assertEquals(ConnectionRetainModes.CONN_RETAIN_TRANS,\r\n-            ConnectionRetainType.TRANSACTION.toKernelConstant());\r\n-        assertEquals(ConnectionRetainType.TRANSACTION,\r\n-            ConnectionRetainType.fromKernelConstant(\r\n+            ConnectionRetainMode.TRANSACTION.toKernelConstant());\r\n+        assertEquals(ConnectionRetainMode.TRANSACTION,\r\n+            ConnectionRetainMode.fromKernelConstant(\r\n                 ConnectionRetainModes.CONN_RETAIN_TRANS));\r\n-        assertEquals(ConnectionRetainType.TRANSACTION.toKernelConstant(),\r\n-            ConnectionRetainType.TRANSACTION.ordinal());\r\n+        assertEquals(ConnectionRetainMode.TRANSACTION.toKernelConstant(),\r\n+            ConnectionRetainMode.TRANSACTION.ordinal());\r\n \r\n         assertEquals(getConstantCount(ConnectionRetainModes.class),\r\n-            ConnectionRetainType.values().length);\r\n+            ConnectionRetainMode.values().length);\r\n     }\r\n \r\n     public void testDetachState() {\r\n@@ -183,45 +183,45 @@ public void testAutoDetach() {\n \r\n     public void testCallbackMode() {\r\n         assertEquals(getConstantCount(CallbackModes.class),\r\n-            CallbackType.values().length);\r\n+            CallbackMode.values().length);\r\n \r\n-        assertEquals(EnumSet.of(CallbackType.FAIL_FAST),\r\n-            CallbackType.toEnumSet(CallbackModes.CALLBACK_FAIL_FAST));\r\n+        assertEquals(EnumSet.of(CallbackMode.FAIL_FAST),\r\n+            CallbackMode.toEnumSet(CallbackModes.CALLBACK_FAIL_FAST));\r\n         assertEquals(CallbackModes.CALLBACK_FAIL_FAST,\r\n-            CallbackType.fromEnumSet(EnumSet.of(CallbackType.FAIL_FAST)));\r\n+            CallbackMode.fromEnumSet(EnumSet.of(CallbackMode.FAIL_FAST)));\r\n \r\n-        assertEquals(EnumSet.of(CallbackType.IGNORE),\r\n-            CallbackType.toEnumSet(CallbackModes.CALLBACK_IGNORE));\r\n+        assertEquals(EnumSet.of(CallbackMode.IGNORE),\r\n+            CallbackMode.toEnumSet(CallbackModes.CALLBACK_IGNORE));\r\n         assertEquals(CallbackModes.CALLBACK_IGNORE,\r\n-            CallbackType.fromEnumSet(EnumSet.of(CallbackType.IGNORE)));\r\n+            CallbackMode.fromEnumSet(EnumSet.of(CallbackMode.IGNORE)));\r\n \r\n-        assertEquals(EnumSet.of(CallbackType.LOG),\r\n-            CallbackType.toEnumSet(CallbackModes.CALLBACK_LOG));\r\n+        assertEquals(EnumSet.of(CallbackMode.LOG),\r\n+            CallbackMode.toEnumSet(CallbackModes.CALLBACK_LOG));\r\n         assertEquals(CallbackModes.CALLBACK_LOG,\r\n-            CallbackType.fromEnumSet(EnumSet.of(CallbackType.LOG)));\r\n+            CallbackMode.fromEnumSet(EnumSet.of(CallbackMode.LOG)));\r\n \r\n-        assertEquals(EnumSet.of(CallbackType.RETHROW),\r\n-            CallbackType.toEnumSet(CallbackModes.CALLBACK_RETHROW));\r\n+        assertEquals(EnumSet.of(CallbackMode.RETHROW),\r\n+            CallbackMode.toEnumSet(CallbackModes.CALLBACK_RETHROW));\r\n         assertEquals(CallbackModes.CALLBACK_RETHROW,\r\n-            CallbackType.fromEnumSet(EnumSet.of(CallbackType.RETHROW)));\r\n+            CallbackMode.fromEnumSet(EnumSet.of(CallbackMode.RETHROW)));\r\n \r\n-        assertEquals(EnumSet.of(CallbackType.ROLLBACK),\r\n-            CallbackType.toEnumSet(CallbackModes.CALLBACK_ROLLBACK));\r\n+        assertEquals(EnumSet.of(CallbackMode.ROLLBACK),\r\n+            CallbackMode.toEnumSet(CallbackModes.CALLBACK_ROLLBACK));\r\n         assertEquals(CallbackModes.CALLBACK_ROLLBACK,\r\n-            CallbackType.fromEnumSet(EnumSet.of(CallbackType.ROLLBACK)));\r\n+            CallbackMode.fromEnumSet(EnumSet.of(CallbackMode.ROLLBACK)));\r\n \r\n \r\n-        assertEquals(EnumSet.of(CallbackType.ROLLBACK, CallbackType.IGNORE),\r\n-            CallbackType.toEnumSet(CallbackModes.CALLBACK_ROLLBACK\r\n+        assertEquals(EnumSet.of(CallbackMode.ROLLBACK, CallbackMode.IGNORE),\r\n+            CallbackMode.toEnumSet(CallbackModes.CALLBACK_ROLLBACK\r\n                 | CallbackModes.CALLBACK_IGNORE));\r\n         assertEquals(\r\n             CallbackModes.CALLBACK_ROLLBACK | CallbackModes.CALLBACK_IGNORE,\r\n-            CallbackType.fromEnumSet(\r\n-                EnumSet.of(CallbackType.ROLLBACK, CallbackType.IGNORE)));\r\n+            CallbackMode.fromEnumSet(\r\n+                EnumSet.of(CallbackMode.ROLLBACK, CallbackMode.IGNORE)));\r\n \r\n \r\n-        assertEquals(EnumSet.allOf(CallbackType.class),\r\n-            CallbackType.toEnumSet(\r\n+        assertEquals(EnumSet.allOf(CallbackMode.class),\r\n+            CallbackMode.toEnumSet(\r\n                 CallbackModes.CALLBACK_FAIL_FAST\r\n                     | CallbackModes.CALLBACK_IGNORE\r\n                     | CallbackModes.CALLBACK_LOG\r\n@@ -232,7 +232,7 @@ public void testCallbackMode() {\n                     | CallbackModes.CALLBACK_LOG\r\n                     | CallbackModes.CALLBACK_RETHROW\r\n                     | CallbackModes.CALLBACK_ROLLBACK,\r\n-            CallbackType.fromEnumSet(EnumSet.allOf(CallbackType.class)));\r\n+            CallbackMode.fromEnumSet(EnumSet.allOf(CallbackMode.class)));\r\n     }\r\n \r\n     public void testQueryOperationTypes() {\r"}]}

