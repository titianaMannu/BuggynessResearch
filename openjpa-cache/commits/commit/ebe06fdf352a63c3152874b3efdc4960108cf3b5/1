{"sha":"ebe06fdf352a63c3152874b3efdc4960108cf3b5","node_id":"MDY6Q29tbWl0MjA2MzY0OmViZTA2ZmRmMzUyYTYzYzMxNTI4NzRiM2VmZGM0OTYwMTA4Y2YzYjU=","commit":{"author":{"name":"Heath Thomann","email":"hthomann@apache.org","date":"2012-05-31T13:39:52Z"},"committer":{"name":"Heath Thomann","email":"hthomann@apache.org","date":"2012-05-31T13:39:52Z"},"message":"OPENJPA-2174: Applied Helen Xu's patch to trunk\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1344721 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b9e8bc8868433bbeeb25b366d9bd6646aa04ac8b","url":"https://api.github.com/repos/apache/openjpa/git/trees/b9e8bc8868433bbeeb25b366d9bd6646aa04ac8b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ebe06fdf352a63c3152874b3efdc4960108cf3b5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ebe06fdf352a63c3152874b3efdc4960108cf3b5","html_url":"https://github.com/apache/openjpa/commit/ebe06fdf352a63c3152874b3efdc4960108cf3b5","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ebe06fdf352a63c3152874b3efdc4960108cf3b5/comments","author":null,"committer":null,"parents":[{"sha":"11cd0d5fd417abc6fff78bc52b124968cebab4f3","url":"https://api.github.com/repos/apache/openjpa/commits/11cd0d5fd417abc6fff78bc52b124968cebab4f3","html_url":"https://github.com/apache/openjpa/commit/11cd0d5fd417abc6fff78bc52b124968cebab4f3"}],"stats":{"total":127,"additions":125,"deletions":2},"files":[{"sha":"a57b9fe712c68bead0b59d314563133d61fa4993","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/MappedQueryResultObjectProvider.java","status":"modified","additions":11,"deletions":2,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/ebe06fdf352a63c3152874b3efdc4960108cf3b5/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/MappedQueryResultObjectProvider.java","raw_url":"https://github.com/apache/openjpa/raw/ebe06fdf352a63c3152874b3efdc4960108cf3b5/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/MappedQueryResultObjectProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/MappedQueryResultObjectProvider.java?ref=ebe06fdf352a63c3152874b3efdc4960108cf3b5","patch":"@@ -35,6 +35,7 @@\n import java.util.Map;\n import java.util.Stack;\n \n+import org.apache.openjpa.jdbc.identifier.DBIdentifier;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.meta.FieldMapping;\n import org.apache.openjpa.jdbc.meta.JavaSQLTypes;\n@@ -407,8 +408,16 @@ protected long getLongInternal(Object obj, Joins joins)\n         protected Object getObjectInternal(Object obj, int metaTypeCode,\n             Object arg, Joins joins)\n             throws SQLException {\n-            if (obj instanceof Column)\n-                return _res.getObject((Column) obj, arg, joins);\n+            if (obj instanceof Column){\n+                Column col = (Column) obj;\n+                Object resultCol = _pc.getMapping(col.toString());\n+                if (resultCol != null) {\n+                    int javaType = col.getJavaType();\n+                    col = new Column(DBIdentifier.newColumn(resultCol.toString()), col.getTable());\n+                    col.setJavaType(javaType);                    \n+                }\n+                return _res.getObject(col, arg, joins);\n+            }                \n             return _res.getObject(obj, metaTypeCode, arg);\n         }\n "},{"sha":"88abc35502d3ddffb113c9635c337ff0523e9a52","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/ResultSetResult.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/ebe06fdf352a63c3152874b3efdc4960108cf3b5/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/ResultSetResult.java","raw_url":"https://github.com/apache/openjpa/raw/ebe06fdf352a63c3152874b3efdc4960108cf3b5/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/ResultSetResult.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/ResultSetResult.java?ref=ebe06fdf352a63c3152874b3efdc4960108cf3b5","patch":"@@ -508,6 +508,7 @@ protected int findObject(Object obj, Joins joins)\n           DBIdentifier sName = DBIdentifier.newColumn(obj.toString());\n           return getResultSet().findColumn(_dict.convertSchemaCase(sName));\n         } catch (SQLException se) {\n+            _dict.log.trace(se.getMessage());\n             return 0;\n         }\n     }"},{"sha":"a6aa4e70abe137a1682bdb9cab72fb47d651b58c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/results/ShipRate.java","status":"added","additions":47,"deletions":0,"changes":47,"blob_url":"https://github.com/apache/openjpa/blob/ebe06fdf352a63c3152874b3efdc4960108cf3b5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/results/ShipRate.java","raw_url":"https://github.com/apache/openjpa/raw/ebe06fdf352a63c3152874b3efdc4960108cf3b5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/results/ShipRate.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/results/ShipRate.java?ref=ebe06fdf352a63c3152874b3efdc4960108cf3b5","patch":"@@ -0,0 +1,47 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.openjpa.persistence.criteria.results;\n+\n+import java.math.BigDecimal;\n+\n+import javax.persistence.*;\n+\n+@Entity\n+@SqlResultSetMapping(name=\"selectShipRateMapping\", \n+    entities=@EntityResult(entityClass=org.apache.openjpa.persistence.criteria.results.ShipRate.class,\n+                           fields = {@FieldResult(name=\"shipRateId\", column = \"id\"),  \n+                            @FieldResult(name=\"billedAsWeight\", column = \"RBLWGT\")}) )\n+//Try to create a result set with different column name \n+//than the attribute name defined in the result entity\n+@NamedNativeQuery(name = \"selectShipRateQuery\", \n+query = \"SELECT shipRateId as id, billedAsWeight as RBLWGT from ShipRate\", \n+resultSetMapping=\"selectShipRateMapping\")\n+public class ShipRate {    \n+    @Id\n+    long shipRateId;\n+    \n+    public ShipRate(long shipRateId, BigDecimal billedAsWeight) {\n+        super();\n+        this.shipRateId = shipRateId;\n+        this.billedAsWeight = billedAsWeight;\n+    }\n+\n+    private BigDecimal billedAsWeight;\n+}"},{"sha":"7efad5eaaed90096a24dcccdd190a991918b5e78","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/results/TestResultSetMapping.java","status":"added","additions":66,"deletions":0,"changes":66,"blob_url":"https://github.com/apache/openjpa/blob/ebe06fdf352a63c3152874b3efdc4960108cf3b5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/results/TestResultSetMapping.java","raw_url":"https://github.com/apache/openjpa/raw/ebe06fdf352a63c3152874b3efdc4960108cf3b5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/results/TestResultSetMapping.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/results/TestResultSetMapping.java?ref=ebe06fdf352a63c3152874b3efdc4960108cf3b5","patch":"@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.openjpa.persistence.query.results;\n+\n+import java.math.BigDecimal;\n+import java.util.List;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityTransaction;\n+import javax.persistence.Query;\n+\n+import org.apache.openjpa.persistence.criteria.results.ShipRate;\n+import org.apache.openjpa.persistence.test.SQLListenerTestCase;\n+\n+public class TestResultSetMapping extends SQLListenerTestCase{\n+    \n+    public void setUp() {\n+        setUp(CLEAR_TABLES, ShipRate.class);        \n+    }\n+\n+    public void testQuery () {\n+        EntityManager em = emf.createEntityManager();         \n+        try \n+        {\n+            EntityTransaction tx = em.getTransaction();\n+            tx.begin();\n+            ShipRate rate = new ShipRate(1000, new BigDecimal(20.5));\n+            em.persist(rate);\n+            tx.commit();\n+            em.close();\n+            \n+            em = emf.createEntityManager(); \n+            //Query query = em.createNativeQuery(sqlStatement, \"ShipRateMapping\");\n+            Query query = em.createNamedQuery(\"selectShipRateQuery\");\n+            \n+            List<ShipRate> results = (List<ShipRate>)query.getResultList();    \n+            assertEquals(1, results.size());\n+        } \n+        catch(RuntimeException x)\n+        {\n+            x.printStackTrace();\n+            throw x;\n+        }\n+        finally \n+        {\n+            em.close();\n+        }\n+    }\n+}"}]}

