{"sha":"ec483537da504f3ea5c4371fe096ba636211c0c6","node_id":"MDY6Q29tbWl0MjA2MzY0OmVjNDgzNTM3ZGE1MDRmM2VhNWM0MzcxZmUwOTZiYTYzNjIxMWMwYzY=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-07-29T12:09:16Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-07-29T12:09:16Z"},"message":"OPENJPA-1204: fix enum evaluation in EmbeddedId\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@798868 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7c9e2810a8f8b47bd9a9e8843a618f8fa97fad12","url":"https://api.github.com/repos/apache/openjpa/git/trees/7c9e2810a8f8b47bd9a9e8843a618f8fa97fad12"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ec483537da504f3ea5c4371fe096ba636211c0c6","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ec483537da504f3ea5c4371fe096ba636211c0c6","html_url":"https://github.com/apache/openjpa/commit/ec483537da504f3ea5c4371fe096ba636211c0c6","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ec483537da504f3ea5c4371fe096ba636211c0c6/comments","author":null,"committer":null,"parents":[{"sha":"1b128ce338602b085108faa64827bd37e540b6f5","url":"https://api.github.com/repos/apache/openjpa/commits/1b128ce338602b085108faa64827bd37e540b6f5","html_url":"https://github.com/apache/openjpa/commit/1b128ce338602b085108faa64827bd37e540b6f5"}],"stats":{"total":318,"additions":315,"deletions":3},"files":[{"sha":"154d55c907a13eab304aebc1f2f6a8305d65af17","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/EmbedValueHandler.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/ec483537da504f3ea5c4371fe096ba636211c0c6/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/EmbedValueHandler.java","raw_url":"https://github.com/apache/openjpa/raw/ec483537da504f3ea5c4371fe096ba636211c0c6/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/EmbedValueHandler.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/EmbedValueHandler.java?ref=ec483537da504f3ea5c4371fe096ba636211c0c6","patch":"@@ -247,8 +247,11 @@ else if (ecols.length == 1)\n                 embed.loadEmbedded(em, store, fetch, cval);\n             else {\n                 if (!(em instanceof ObjectIdStateManager))\n-                cval = embed.toEmbeddedObjectValue(cval);\n-                em.store(fms[i].getIndex(), cval);\n+                    cval = embed.toEmbeddedObjectValue(cval);\n+                if (fms[i].getHandler() != null)\n+                    cval = fms[i].getHandler().toObjectValue(fms[i], cval);\n+\n+                em.store(fms[i].getIndex(), cval); \n             }\n         }\n         return idx;"},{"sha":"2708c425bda611a61a20c78577aa4810f3757dae","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/BeneContact.java","status":"added","additions":109,"deletions":0,"changes":109,"blob_url":"https://github.com/apache/openjpa/blob/ec483537da504f3ea5c4371fe096ba636211c0c6/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/BeneContact.java","raw_url":"https://github.com/apache/openjpa/raw/ec483537da504f3ea5c4371fe096ba636211c0c6/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/BeneContact.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/BeneContact.java?ref=ec483537da504f3ea5c4371fe096ba636211c0c6","patch":"@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.enhance.identity;\n+\n+import java.util.Date;\n+\n+import javax.persistence.Column;\n+import javax.persistence.EmbeddedId;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.MappedById;\n+import javax.persistence.Table;\n+import javax.persistence.Temporal;\n+import javax.persistence.TemporalType;\n+import javax.persistence.Version;\n+\n+\n+@Entity\n+@Table(name=\"BENE_CONTACT\")\n+public class BeneContact {\n+\n+\tprivate static final long serialVersionUID = 4571838649566012594L;\n+\n+\tprivate BeneContactId id;\n+\n+\tprivate Beneficiary beneficiary;\n+\t\n+\tprivate String email;\n+\n+\tprivate String phone;\n+\n+    private Date lastUpdateDate;\n+\n+    private int version;\n+    \n+    @Version\n+    public int getVersion() {\n+        return version;\n+    }\n+\n+    public void setVersion(int version) {\n+        this.version = version;\n+    }\n+\n+    @Temporal(TemporalType.TIMESTAMP)\n+    public Date getLastUpdateDate() {\n+        return lastUpdateDate;\n+    }\n+\n+    public void setLastUpdateDate(Date lastUpdateDate) {\n+        this.lastUpdateDate = lastUpdateDate;\n+    }\n+\t\n+    @Column(name=\"EMAIL\")\n+\tpublic String getEmail() {\n+\t\treturn email;\n+\t}\n+    \n+\tpublic void setEmail(String email) {\n+\t\tthis.email = email;\n+\t}\n+\n+    @Column(name=\"PHONE\")\n+\tpublic String getPhone() {\n+\t\treturn phone;\n+\t}\n+    \n+\tpublic void setPhone(String phone) {\n+\t\tthis.phone = phone;\n+\t}\n+\t\n+    @EmbeddedId\n+\tpublic BeneContactId getId() {\n+\t\treturn id;\n+\t}\n+    \n+\tpublic void setId(BeneContactId id) {\n+\t\tthis.id = id;\n+\t}\n+\n+    @ManyToOne(targetEntity=Beneficiary.class, fetch=FetchType.EAGER)\n+    @JoinColumn(name=\"ID\")\n+    @MappedById(\"beneficiaryPK\")\n+\tpublic Beneficiary getBeneficiary() {\n+\t\treturn beneficiary;\n+\t}\n+    \n+\tpublic void setBeneficiary(Beneficiary beneficiary) {\n+\t\tthis.beneficiary = beneficiary;\n+\t}\n+}"},{"sha":"e29ba4f174ed750f48815855c6dd34f7013fdb31","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/BeneContactId.java","status":"added","additions":74,"deletions":0,"changes":74,"blob_url":"https://github.com/apache/openjpa/blob/ec483537da504f3ea5c4371fe096ba636211c0c6/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/BeneContactId.java","raw_url":"https://github.com/apache/openjpa/raw/ec483537da504f3ea5c4371fe096ba636211c0c6/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/BeneContactId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/BeneContactId.java?ref=ec483537da504f3ea5c4371fe096ba636211c0c6","patch":"@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.enhance.identity;\n+\n+import java.io.Serializable;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Embeddable;\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n+\n+@Embeddable\n+public class BeneContactId implements Serializable {\n+\tprivate static final long serialVersionUID = -837443719842439462L;\n+\tContactType type; \n+\n+    String beneficiaryPK; \n+\t\n+\tpublic boolean equals(Object obj) {\n+\t\tif(this == obj) return true;\n+\t\tif((obj != null) && (obj instanceof BeneContactId)) {\n+\t\t\tBeneContactId other = (BeneContactId) obj;\n+\t\t\tif(this.type.equals(other.type) && this.beneficiaryPK.equals(other.beneficiaryPK))\n+\t\t\t\treturn true;\n+\t\t}\n+\t\treturn false;\n+\t}\n+\t\n+\tpublic int hashCode() {\n+\t\tString hash = beneficiaryPK + Integer.toString(type.ordinal());\n+\t\treturn hash.hashCode();\n+\t}\n+\t\n+\tpublic String toString() {\n+\t\treturn type.toString() + \"-\" + beneficiaryPK;\n+\t}\n+\t\n+    @Column(name=\"ID\")\n+\tpublic String getBeneficiaryKey() {\n+\t\treturn beneficiaryPK;\n+\t}\n+    \n+\tpublic void setBeneficiaryKey(String id) {\n+\t\tbeneficiaryPK = id;\n+\t}\n+\t\n+    @Enumerated(EnumType.STRING)\n+    @Column(name=\"TYPE\")\n+\tpublic ContactType getContactType() {\n+\t\treturn type;\n+\t}\n+    \n+\tpublic void setContactType(ContactType type) {\n+\t\tthis.type = type;\n+\t}\n+\t\n+\tpublic enum ContactType {HOME, BUSINESS, OTHER;}\n+}"},{"sha":"64be2ec2accf4af5268e85f0c5db472d23e1fde4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Beneficiary.java","status":"added","additions":100,"deletions":0,"changes":100,"blob_url":"https://github.com/apache/openjpa/blob/ec483537da504f3ea5c4371fe096ba636211c0c6/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Beneficiary.java","raw_url":"https://github.com/apache/openjpa/raw/ec483537da504f3ea5c4371fe096ba636211c0c6/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Beneficiary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Beneficiary.java?ref=ec483537da504f3ea5c4371fe096ba636211c0c6","patch":"@@ -0,0 +1,100 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.enhance.identity;\n+\n+import java.util.List;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Table;\n+\n+\n+@Entity\n+@Table(name=\"BENEFICIARY\")\n+public class Beneficiary {\n+\n+\tprivate static final long serialVersionUID = -452903666159175508L;\n+\n+\tprivate String annuityHolderId;\n+\n+\tprivate String firstName;\n+\n+\tprivate String lastName;\n+\n+\tprivate String relationship;\n+\t\n+    private List<BeneContact> contacts;\n+\n+    private String id;  \n+\n+    @javax.persistence.Id\n+    public String getId() {\n+        return id;\n+    }\n+\n+    public void setId(String id) {\n+        this.id = id;\n+    }\n+\n+    @Column(name=\"FK_ANNUITY_HOLDER_ID\")\n+\tpublic String getAnnuityHolderId() {\n+\t\treturn annuityHolderId;\n+\t}\n+    \n+\tpublic void setAnnuityHolderId(String annuityHolderId) {\n+\t\tthis.annuityHolderId = annuityHolderId;\n+\t}\n+\n+    @Column(name=\"FIRST_NAME\")\n+\tpublic String getFirstName() {\n+\t\treturn firstName;\n+\t}\n+    \n+\tpublic void setFirstName(String first) {\n+\t\tthis.firstName = first;\n+\t}\n+\n+    @Column(name=\"LAST_NAME\")\n+\tpublic String getLastName() {\n+\t\treturn lastName;\n+\t}\n+\tpublic void setLastName(String last) {\n+\t\tthis.lastName = last;\n+\t}\n+\n+    @Column(name=\"RELATIONSHIP\")\n+\tpublic String getRelationship() {\n+\t\treturn relationship;\n+\t}\n+    \n+\tpublic void setRelationship(String relationship) {\n+\t\tthis.relationship = relationship;\n+\t}\n+\n+    @OneToMany(targetEntity=BeneContact.class, mappedBy=\"beneficiary\", fetch=FetchType.EAGER)\n+\tpublic List<BeneContact> getContacts() {\n+\t\treturn contacts;\n+\t}\n+    \n+\tpublic void setContacts(List<BeneContact> contacts) {\n+\t\tthis.contacts = contacts;\n+\t}\n+}"},{"sha":"55c8c065f040773c0c24fb8dda07213d2f565a32","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/TestMappedById.java","status":"modified","additions":27,"deletions":1,"changes":28,"blob_url":"https://github.com/apache/openjpa/blob/ec483537da504f3ea5c4371fe096ba636211c0c6/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/TestMappedById.java","raw_url":"https://github.com/apache/openjpa/raw/ec483537da504f3ea5c4371fe096ba636211c0c6/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/TestMappedById.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/TestMappedById.java?ref=ec483537da504f3ea5c4371fe096ba636211c0c6","patch":"@@ -86,7 +86,8 @@ public void setUp() throws Exception {\n             Person2.class, Person3.class, MedicalHistory3.class, \n             Person4.class, PersonId4.class, MedicalHistory4.class,\n             Dependent3.class, Employee3.class, DependentId3.class, \n-            Parent3.class, Dependent4.class, Employee4.class);\n+            Parent3.class, Dependent4.class, Employee4.class,\n+            BeneContact.class, BeneContactId.class, Beneficiary.class);\n     }\n \n     /**\n@@ -737,4 +738,29 @@ public Employee4 mergeEmployee4(EntityManager em, int id) {\n         }\n         return e;\n     }\n+    \n+    public void testEnumInEmbeddedId() {\n+        EntityManager em = emf.createEntityManager();\n+        Beneficiary b = new Beneficiary();\n+        b.setId(\"b8\");\n+        List<BeneContact> contacts = new ArrayList<BeneContact>();\n+        BeneContact c = new BeneContact();\n+        c.setEmail(\"email8\");\n+        BeneContactId id = new BeneContactId();\n+        id.setContactType(BeneContactId.ContactType.HOME);\n+        c.setBeneficiary(b);\n+        \n+        c.setId(id);\n+        em.persist(c);\n+        contacts.add(c);\n+        b.setContacts(contacts);\n+        em.persist(b);\n+        em.getTransaction().begin();\n+        em.flush();\n+        em.getTransaction().commit();\n+        em.clear();\n+        BeneContactId id1 = c.getId();\n+        BeneContact c1 = em.find(BeneContact.class, id1);\n+        assertEquals(\"email8\", c1.getEmail());\n+    }\n }"}]}

