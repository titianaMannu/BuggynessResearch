{"sha":"ec8dba1465635ad5fdc8d993c73fa71616face71","node_id":"MDY6Q29tbWl0MjA2MzY0OmVjOGRiYTE0NjU2MzVhZDVmZGM4ZDk5M2M3M2ZhNzE2MTZmYWNlNzE=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-01-21T20:17:50Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-01-21T20:17:50Z"},"message":"OPENJPA-1477: Do not use cached PreparedQuery unless it is initialized\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@901845 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"581c74426b58b1eaf4a04f7ba0ed81fc52b8c670","url":"https://api.github.com/repos/apache/openjpa/git/trees/581c74426b58b1eaf4a04f7ba0ed81fc52b8c670"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ec8dba1465635ad5fdc8d993c73fa71616face71","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ec8dba1465635ad5fdc8d993c73fa71616face71","html_url":"https://github.com/apache/openjpa/commit/ec8dba1465635ad5fdc8d993c73fa71616face71","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ec8dba1465635ad5fdc8d993c73fa71616face71/comments","author":null,"committer":null,"parents":[{"sha":"08cf0152075279240da0c1e17a8a83fcc0444056","url":"https://api.github.com/repos/apache/openjpa/commits/08cf0152075279240da0c1e17a8a83fcc0444056","html_url":"https://github.com/apache/openjpa/commit/08cf0152075279240da0c1e17a8a83fcc0444056"}],"stats":{"total":62,"additions":60,"deletions":2},"files":[{"sha":"26c2f42d2ebcc9c39bfba10f4a5f74f9bbf97b51","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestPreparedQueryCache.java","status":"modified","additions":58,"deletions":0,"changes":58,"blob_url":"https://github.com/apache/openjpa/blob/ec8dba1465635ad5fdc8d993c73fa71616face71/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestPreparedQueryCache.java","raw_url":"https://github.com/apache/openjpa/raw/ec8dba1465635ad5fdc8d993c73fa71616face71/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestPreparedQueryCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestPreparedQueryCache.java?ref=ec8dba1465635ad5fdc8d993c73fa71616face71","patch":"@@ -41,6 +41,7 @@\n import org.apache.openjpa.lib.jdbc.AbstractJDBCListener;\n import org.apache.openjpa.lib.jdbc.JDBCEvent;\n import org.apache.openjpa.lib.jdbc.JDBCListener;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\n import org.apache.openjpa.persistence.OpenJPAPersistence;\n@@ -780,6 +781,32 @@ public void testEnumParameter() {\n         em.getTransaction().rollback();\n     }\n     \n+    public void testMultithreadedAccess() {\n+        OpenJPAEntityManager em1 = emf.createEntityManager();\n+        String jpql = \"select p from Author p where p.name=:name\";\n+        int N = 5;\n+        Thread[] threads =  new Thread[N];\n+        QueryThread[] qts = new QueryThread[N];\n+        for (int i = 0; i < N; i++) {\n+            OpenJPAEntityManager emt = emf.createEntityManager();\n+            qts[i] = new QueryThread(emt, jpql);\n+            threads[i] = new Thread(qts[i]);\n+            threads[i].setDaemon(true);\n+        }\n+        for (Thread t : threads) {\n+            t.start(); \n+        }\n+        for (int i = 0; i < N; i++) {\n+            try {\n+              threads[i].join();\n+              assertFalse(qts[i].isFailed());\n+            } catch (InterruptedException e) {\n+                e.printStackTrace();\n+                fail();\n+            }\n+        }\n+    }\n+    \n     \n     PreparedQueryCache getPreparedQueryCache() {\n         return emf.getConfiguration().getQuerySQLCacheInstance();\n@@ -967,5 +994,36 @@ void clear() {\n             return new ArrayList<String>(sqls);\n         }\n     }\n+    \n+    public static class QueryThread implements Runnable {\n+        private final OpenJPAEntityManager em;\n+        private final String jpql;\n+        private boolean failed = false;\n+        public QueryThread(OpenJPAEntityManager em, String jpql) {\n+            super();\n+            this.em = em;\n+            this.jpql = jpql;\n+        }\n+        \n+        public void run() {\n+            try {\n+                for (int i = 0; i < 10 && !failed; i++) {\n+                    OpenJPAQuery q = em.createQuery(jpql);\n+                    q.setParameter(\"name\", \"Author-\"+i);\n+                    q.getResultList();\n+                    if (i > 1) \n+                        assertEquals(QueryLanguages.LANG_PREPARED_SQL, q.getLanguage());\n+                }\n+            } catch (Exception e) {\n+                e.printStackTrace();\n+                failed = true;\n+            }\n+        }\n+        \n+        public boolean isFailed() {\n+            return failed;\n+        }\n+        \n+    }\n \n }"},{"sha":"357a6e7447a9b0c37f4364a287bfc7653ddc6b72","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/ec8dba1465635ad5fdc8d993c73fa71616face71/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/ec8dba1465635ad5fdc8d993c73fa71616face71/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java?ref=ec8dba1465635ad5fdc8d993c73fa71616face71","patch":"@@ -963,7 +963,7 @@ public OpenJPAQuery createQuery(String language, String query) {\n             String qid = query;\n             PreparedQuery pq = JPQLParser.LANG_JPQL.equals(language)\n                 ? getPreparedQuery(qid) : null;\n-            org.apache.openjpa.kernel.Query q = (pq == null)\n+            org.apache.openjpa.kernel.Query q = (pq == null || !pq.isInitialized())\n                 ? _broker.newQuery(language, query)\n                 : _broker.newQuery(pq.getLanguage(), pq);\n             // have to validate JPQL according to spec\n@@ -1003,7 +1003,7 @@ public OpenJPAQuery createNamedQuery(String name) {\n             \n             PreparedQuery pq = JPQLParser.LANG_JPQL.equals(meta.getLanguage())\n                 ? getPreparedQuery(qid) : null;\n-            org.apache.openjpa.kernel.Query del = (pq == null)\n+            org.apache.openjpa.kernel.Query del = (pq == null || !pq.isInitialized())\n                 ? _broker.newQuery(meta.getLanguage(), meta.getQueryString())\n                 : _broker.newQuery(pq.getLanguage(), pq);\n             "}]}

