{"sha":"eca02573ba17e8e09bd0cf7120b87becd6f2646f","node_id":"MDY6Q29tbWl0MjA2MzY0OmVjYTAyNTczYmExN2U4ZTA5YmQwY2Y3MTIwYjg3YmVjZDZmMjY0NmY=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-02-26T15:23:26Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-02-26T15:23:26Z"},"message":"OPENJPA-1542: Adding support for openjpa.DataCache Types and ExcludedTypes configuration back into trunk. Also updating TestCacheExclusions. No doc changes required as the user manual is up to date.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@916714 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"540ac61b510b35d5a7df09b6e63bf6529fd68e22","url":"https://api.github.com/repos/apache/openjpa/git/trees/540ac61b510b35d5a7df09b6e63bf6529fd68e22"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/eca02573ba17e8e09bd0cf7120b87becd6f2646f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/eca02573ba17e8e09bd0cf7120b87becd6f2646f","html_url":"https://github.com/apache/openjpa/commit/eca02573ba17e8e09bd0cf7120b87becd6f2646f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/eca02573ba17e8e09bd0cf7120b87becd6f2646f/comments","author":null,"committer":null,"parents":[{"sha":"06d3e4e65d355589e258f00e3dd995606f1863b0","url":"https://api.github.com/repos/apache/openjpa/commits/06d3e4e65d355589e258f00e3dd995606f1863b0","html_url":"https://github.com/apache/openjpa/commit/06d3e4e65d355589e258f00e3dd995606f1863b0"}],"stats":{"total":92,"additions":85,"deletions":7},"files":[{"sha":"cae18a4ae2e66b25352043f8837e6474d598b290","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/AbstractDataCache.java","status":"modified","additions":50,"deletions":1,"changes":51,"blob_url":"https://github.com/apache/openjpa/blob/eca02573ba17e8e09bd0cf7120b87becd6f2646f/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/AbstractDataCache.java","raw_url":"https://github.com/apache/openjpa/raw/eca02573ba17e8e09bd0cf7120b87becd6f2646f/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/AbstractDataCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/AbstractDataCache.java?ref=eca02573ba17e8e09bd0cf7120b87becd6f2646f","patch":"@@ -19,10 +19,12 @@\n package org.apache.openjpa.datacache;\n \n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.BitSet;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n@@ -37,6 +39,10 @@\n import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.lib.util.concurrent.AbstractConcurrentEventManager;\n+import org.apache.openjpa.util.GeneralException;\n+import org.apache.openjpa.util.OpenJPAException;\n+\n+import serp.util.Strings;\n \n /**\n  * Abstract {@link DataCache} implementation that provides various\n@@ -70,6 +76,8 @@\n     private String _name = null;\n     private boolean _closed = false;\n     private String _schedule = null;\n+    protected Set<String> _includedTypes = new HashSet<String>();\n+    protected Set<String> _excludedTypes = new HashSet<String>();\n \n     public String getName() {\n         return _name;\n@@ -94,13 +102,29 @@ public String getEvictionSchedule() {\n     public void setEvictionSchedule(String s) {\n         _schedule = s;\n     }\n-\n+    \n     public void initialize(DataCacheManager manager) {\n         if (_schedule != null && !\"\".equals(_schedule)) {\n             DataCacheScheduler scheduler = manager.getDataCacheScheduler();\n             if (scheduler != null)\n                 scheduler.scheduleEviction(this, _schedule);\n         }\n+        // Cast here rather than add to the interface because this is a hack to support an older way of configuring\n+        if(manager instanceof DataCacheManagerImpl){\n+            List<String> invalidConfigured = new ArrayList<String>();\n+            // assert that things are configured properly\n+            if(_includedTypes!=null){\n+                for(String s : _includedTypes){\n+                    if(_excludedTypes.contains(s)){\n+                        invalidConfigured.add(s);\n+                    }\n+                }\n+                if (invalidConfigured.size() > 0) {\n+                    throw new GeneralException(s_loc.get(\"invalid-types-excluded-types\", invalidConfigured.toString()));\n+                }\n+            }\n+            ((DataCacheManagerImpl)manager).setTypes(_includedTypes, _excludedTypes);\n+        }\n     }\n \n     public void commit(Collection<DataCachePCData> additions, Collection<DataCachePCData> newUpdates,\n@@ -500,4 +524,29 @@ protected void fireEvent(Object event, Object listener) {\n \t\t}\n \t}\n     \n+    public Set<String> getTypes() {\n+        return _includedTypes;\n+    }\n+\n+    public Set<String> getExcludedTypes() {\n+        return _excludedTypes;\n+    }\n+\n+    public void setTypes(Set<String> types) {\n+        _includedTypes = types;\n+    }\n+\n+    public void setTypes(String types) {\n+        _includedTypes =\n+            StringUtils.isEmpty(types) ? null : new HashSet<String>(Arrays.asList(Strings.split(types, \";\", 0)));\n+    }\n+\n+    public void setExcludedTypes(Set<String> types) {\n+        _excludedTypes = types;\n+    }\n+\n+    public void setExcludedTypes(String types) {\n+        _excludedTypes =\n+            StringUtils.isEmpty(types) ? null : new HashSet<String>(Arrays.asList(Strings.split(types, \";\", 0)));\n+    }\n }"},{"sha":"d3f4c0cc271cc8e424f009e611a8628fe1e2a32f","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheManagerImpl.java","status":"modified","additions":25,"deletions":2,"changes":27,"blob_url":"https://github.com/apache/openjpa/blob/eca02573ba17e8e09bd0cf7120b87becd6f2646f/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/eca02573ba17e8e09bd0cf7120b87becd6f2646f/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheManagerImpl.java?ref=eca02573ba17e8e09bd0cf7120b87becd6f2646f","patch":"@@ -20,6 +20,7 @@\n \n import java.util.HashMap;\n import java.util.Map;\n+import java.util.Set;\n \n import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.enhance.PCDataGenerator;\n@@ -49,6 +50,11 @@\n     private CacheDistributionPolicy _policy = new DefaultCacheDistributionPolicy();\n     private Map<ClassMetaData,Boolean> _cacheable = new HashMap<ClassMetaData, Boolean>();\n     \n+    // Properties that are configured via openjpa.DataCache but need to be used here. This is here to support the 1.2\n+    // way of doing things with openjpa.DataCache(Types=x;y;z,ExcludedTypes=a)\n+    private Set<String> _includedTypes;\n+    private Set<String> _excludedTypes;\n+    \n     public void initialize(OpenJPAConfiguration conf, ObjectValue dataCache, ObjectValue queryCache) {\n         _conf = conf;\n         _cache = (DataCache) dataCache.instantiate(DataCache.class, conf);\n@@ -145,6 +151,10 @@ public boolean isCachable(ClassMetaData meta) {\n         return isCachable;\n     }\n     \n+    public void setTypes(Set<String> includedTypes, Set<String> excludedTypes){\n+        _includedTypes = includedTypes;\n+        _excludedTypes = excludedTypes;\n+    }\n     /**\n      * Affirms the given class is eligible to be cached according to the cache mode\n      * and the cache enable flag on the given metadata.\n@@ -165,11 +175,24 @@ private Boolean isCacheableByMode(ClassMetaData meta) {\n     }\n     \n     /**\n-     * Is the given type cacheable by @DataCache annotation.\n+     * Is the given type cacheable by @DataCache annotation or openjpa.DataCache(Types/ExcludedTypes)\n      *  \n      * @see ClassMetaData#getDataCacheName()\n      */\n-    private Boolean isCacheableByType(ClassMetaData meta) {\n+    private Boolean isCacheableByType(ClassMetaData meta) { \n+        if (_includedTypes != null && _includedTypes.size() > 0) {\n+            return _includedTypes.contains(meta.getDescribedType().getName());\n+        }\n+        if (_excludedTypes != null && _excludedTypes.size() > 0) {\n+            if (_excludedTypes.contains(meta.getDescribedType().getName())) {\n+                return false;\n+            } else {\n+                // Case where Types is not set, and ExcludedTypes only has a sub set of all\n+                // Entities.\n+                return true;\n+            }\n+        }\n+        // Check for @DataCache annotations\n         return meta.getDataCacheName() != null;\n     }\n }"},{"sha":"3fed57f6c997543f23a2b47f5e653f8995b028d5","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/datacache/localizer.properties","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/eca02573ba17e8e09bd0cf7120b87becd6f2646f/openjpa-kernel/src/main/resources/org/apache/openjpa/datacache/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/eca02573ba17e8e09bd0cf7120b87becd6f2646f/openjpa-kernel/src/main/resources/org/apache/openjpa/datacache/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/datacache/localizer.properties?ref=eca02573ba17e8e09bd0cf7120b87becd6f2646f","patch":"@@ -112,4 +112,6 @@ partition-cache-duplicate-partition: You have specified duplicate name \"{0}\" for\n partition-cache-default-partition: You have specified name \"{0}\" for a \\\n     partition in the configuration \"{0}\". The partition name matches the default \\\n     name reserved by OpenJPA for internal use and hence can not be used.\n+invalid-types-excluded-types: Failed to configure openjpa.DataCache Types, ExcludedTypes. \\\n+\tTypes \"{0}\" were found in both lists, but can only appear one of the lists.    \n \t\n\\ No newline at end of file"},{"sha":"97f42ca36ee6b48ea9abbab9e87cee75d4f864f4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestCacheExclusions.java","status":"modified","additions":8,"deletions":4,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/eca02573ba17e8e09bd0cf7120b87becd6f2646f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestCacheExclusions.java","raw_url":"https://github.com/apache/openjpa/raw/eca02573ba17e8e09bd0cf7120b87becd6f2646f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestCacheExclusions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestCacheExclusions.java?ref=eca02573ba17e8e09bd0cf7120b87becd6f2646f","patch":"@@ -164,18 +164,23 @@ public void testExcludeOrdersAndPurchases() {\n     }\n \n     public void testIncludePurchaseItemExcludePurchase() {\n+        try{\n         getEntityManagerFactoryCacheSettings(new Class[] { Purchase.class,\n             Item.class }, new Class[] { Purchase.class });\n         populate();\n+            fail(\"Shouldn't be able to create an EMF with an entity in both Types and ExcludedTypes\");\n         StoreCache cache = emf.getStoreCache();\n         assertCacheContents(cache, false, false, true);\n+        }catch(Exception e){\n+            //expected\n+        }\n     }\n \n     public OpenJPAEntityManagerFactorySPI getEntityManagerFactoryCacheSettings(\n         Class<?>[] includedTypes, Class<?>[] excludedTypes) {\n         StringBuilder includes = new StringBuilder();\n         if (includedTypes != null && includedTypes.length > 0) {\n-            includes.append(\"IncludedTypes=\");\n+            includes.append(\"Types=\");\n             for (Class<?> c : includedTypes) {\n                 includes.append(c.getName());\n                 includes.append(_tSep);\n@@ -193,7 +198,7 @@ public OpenJPAEntityManagerFactorySPI getEntityManagerFactoryCacheSettings(\n         }\n         StringBuilder dataCacheSettings = new StringBuilder();\n         boolean hasIncludeOrExclude = includes.length() > 0 || excludes.length() > 0;\n-        dataCacheSettings.append(hasIncludeOrExclude ? \"type-based(\" : \"default\");\n+        dataCacheSettings.append(\"true\" + (hasIncludeOrExclude ? \"(\" : \"\"));\n         if (hasIncludeOrExclude) {\n             dataCacheSettings.append(includes);\n             if (includes.length() > 0 && excludes.length() > 0) \n@@ -202,8 +207,7 @@ public OpenJPAEntityManagerFactorySPI getEntityManagerFactoryCacheSettings(\n             dataCacheSettings.append(\")\");\n         }\n         Map<String, String> props = new HashMap<String, String>();\n-        props.put(\"openjpa.CacheDistributionPolicy\", dataCacheSettings.toString());\n-        props.put(\"openjpa.DataCache\", \"true\");\n+        props.put(\"openjpa.DataCache\", dataCacheSettings.toString());\n         props.put(\"openjpa.RemoteCommitProvider\", \"sjvm\");\n         props.put(\"openjpa.MetaDataFactory\", \"jpa(Types=\"\n             + Item.class.getName() + _tSep + Purchase.class.getName() + _tSep"}]}

