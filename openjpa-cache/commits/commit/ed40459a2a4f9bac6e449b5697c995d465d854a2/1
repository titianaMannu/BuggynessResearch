{"sha":"ed40459a2a4f9bac6e449b5697c995d465d854a2","node_id":"MDY6Q29tbWl0MjA2MzY0OmVkNDA0NTlhMmE0ZjliYWM2ZTQ0OWI1Njk3Yzk5NWQ0NjVkODU0YTI=","commit":{"author":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2009-09-09T19:56:37Z"},"committer":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2009-09-09T19:56:37Z"},"message":"OPENJPA-1289 Added Oracle specific type to compatibility checking method.  Added new method to dictionary to pass in XML indicator.  Updated Oracle dictionary to use it to make LOB determination.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@813098 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3eac8d438b2a4292c668a54d26a3f3b2e168282f","url":"https://api.github.com/repos/apache/openjpa/git/trees/3eac8d438b2a4292c668a54d26a3f3b2e168282f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ed40459a2a4f9bac6e449b5697c995d465d854a2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ed40459a2a4f9bac6e449b5697c995d465d854a2","html_url":"https://github.com/apache/openjpa/commit/ed40459a2a4f9bac6e449b5697c995d465d854a2","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ed40459a2a4f9bac6e449b5697c995d465d854a2/comments","author":null,"committer":null,"parents":[{"sha":"2691db6e0b646eb674c7a60e778b3f1467cf0fd1","url":"https://api.github.com/repos/apache/openjpa/commits/2691db6e0b646eb674c7a60e778b3f1467cf0fd1","html_url":"https://github.com/apache/openjpa/commit/2691db6e0b646eb674c7a60e778b3f1467cf0fd1"}],"stats":{"total":33,"additions":32,"deletions":1},"files":[{"sha":"dd3b004bc51be92cd9b3514777e79da95801746b","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingInfo.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/ed40459a2a4f9bac6e449b5697c995d465d854a2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingInfo.java","raw_url":"https://github.com/apache/openjpa/raw/ed40459a2a4f9bac6e449b5697c995d465d854a2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingInfo.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingInfo.java?ref=ed40459a2a4f9bac6e449b5697c995d465d854a2","patch":"@@ -683,7 +683,7 @@ else if (dotIdx != -1) {\n             }\n             type =\n                 dict.getJDBCType(tmplate.getJavaType(), size == -1, precis,\n-                    scale);\n+                    scale, tmplate.isXML());\n         }\n             \n         boolean ttype = true;"},{"sha":"49430931c24f8a097d7f6f5f0b42f5688536298c","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Column.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/ed40459a2a4f9bac6e449b5697c995d465d854a2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Column.java","raw_url":"https://github.com/apache/openjpa/raw/ed40459a2a4f9bac6e449b5697c995d465d854a2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Column.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Column.java?ref=ed40459a2a4f9bac6e449b5697c995d465d854a2","patch":"@@ -642,6 +642,15 @@ public boolean isCompatible(int type, String typeName, int size,\n                     default:\n                         return false;\n                 }\n+            case 2007:  // Oracle-defined opaque type code for XMLType\n+                switch (type) {\n+                    case Types.CHAR:\n+                    case Types.LONGVARCHAR:\n+                    case Types.VARCHAR:\n+                        return true;\n+                     default:\n+                         return false;\n+                }\n             default:\n                 return type == getType();\n         }"},{"sha":"2554faa1e96a753043aec75df42716e540a66f98","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/ed40459a2a4f9bac6e449b5697c995d465d854a2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/ed40459a2a4f9bac6e449b5697c995d465d854a2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java?ref=ed40459a2a4f9bac6e449b5697c995d465d854a2","patch":"@@ -1486,6 +1486,15 @@ public int getJDBCType(int metaTypeCode, boolean lob) {\n         return getJDBCType(metaTypeCode, lob, 0, 0);\n     }\n \n+    /**\n+     * Return the preferred {@link Types} constant for the given\n+     * {@link JavaTypes} or {@link JavaSQLTypes} constant.\n+     */\n+    public int getJDBCType(int metaTypeCode, boolean lob, int precis, \n+        int scale, boolean xml) {\n+        return getJDBCType(metaTypeCode, lob, precis, scale);        \n+    }\n+\n     /**\n      * Return the preferred {@link Types} constant for the given\n      * {@link JavaTypes} or {@link JavaSQLTypes} constant."},{"sha":"8c245c571010467faaefce609c73b73d61961ab8","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java","status":"modified","additions":13,"deletions":0,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/ed40459a2a4f9bac6e449b5697c995d465d854a2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/ed40459a2a4f9bac6e449b5697c995d465d854a2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java?ref=ed40459a2a4f9bac6e449b5697c995d465d854a2","patch":"@@ -41,6 +41,7 @@\n \n import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.exps.FilterValue;\n+import org.apache.openjpa.jdbc.meta.JavaSQLTypes;\n import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.jdbc.schema.ForeignKey;\n import org.apache.openjpa.jdbc.schema.Index;\n@@ -51,6 +52,7 @@\n import org.apache.openjpa.lib.jdbc.DelegatingPreparedStatement;\n import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.meta.JavaTypes;\n import org.apache.openjpa.util.StoreException;\n import org.apache.openjpa.util.UserException;\n \n@@ -873,6 +875,17 @@ else if (\"NCHAR\".equalsIgnoreCase(cols[i].getTypeName()))\n             sql[0] += \" CACHE \" + seq.getAllocate();\n         return sql;\n     }\n+    \n+    /**\n+     * Return the preferred {@link Types} constant for the given\n+     * {@link JavaTypes} or {@link JavaSQLTypes} constant.\n+     */\n+    @Override\n+    public int getJDBCType(int metaTypeCode, boolean lob, int precis, \n+        int scale, boolean xml) {        \n+        return getJDBCType(metaTypeCode, lob && !xml, precis, scale);        \n+    }\n+\n \n     protected String getSequencesSQL(String schemaName, String sequenceName) {\n         StringBuffer buf = new StringBuffer();"}]}

