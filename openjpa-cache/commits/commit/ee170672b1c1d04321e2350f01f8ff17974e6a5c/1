{"sha":"ee170672b1c1d04321e2350f01f8ff17974e6a5c","node_id":"MDY6Q29tbWl0MjA2MzY0OmVlMTcwNjcyYjFjMWQwNDMyMWUyMzUwZjAxZjhmZjE3OTc0ZTZhNWM=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-05-04T03:26:24Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-05-04T03:26:24Z"},"message":"OPENJPA-573 JPQL: The combination LIKE ESCAPE does not accept parameters\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.1.x@653176 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3411fbe20422dacb3e31f073a4e3dd91704fbf69","url":"https://api.github.com/repos/apache/openjpa/git/trees/3411fbe20422dacb3e31f073a4e3dd91704fbf69"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ee170672b1c1d04321e2350f01f8ff17974e6a5c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ee170672b1c1d04321e2350f01f8ff17974e6a5c","html_url":"https://github.com/apache/openjpa/commit/ee170672b1c1d04321e2350f01f8ff17974e6a5c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ee170672b1c1d04321e2350f01f8ff17974e6a5c/comments","author":null,"committer":null,"parents":[{"sha":"45576476115efdc9ea1788bae97dc43b64449b5a","url":"https://api.github.com/repos/apache/openjpa/commits/45576476115efdc9ea1788bae97dc43b64449b5a","html_url":"https://github.com/apache/openjpa/commit/45576476115efdc9ea1788bae97dc43b64449b5a"}],"stats":{"total":12,"additions":9,"deletions":3},"files":[{"sha":"9a40e45fb1b8d9811c68fd0d74af625a4ddf28bf","filename":"openjpa-kernel/src/main/jjtree/org/apache/openjpa/kernel/jpql/JPQL.jjt","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/ee170672b1c1d04321e2350f01f8ff17974e6a5c/openjpa-kernel/src/main/jjtree/org/apache/openjpa/kernel/jpql/JPQL.jjt","raw_url":"https://github.com/apache/openjpa/raw/ee170672b1c1d04321e2350f01f8ff17974e6a5c/openjpa-kernel/src/main/jjtree/org/apache/openjpa/kernel/jpql/JPQL.jjt","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/jjtree/org/apache/openjpa/kernel/jpql/JPQL.jjt?ref=ee170672b1c1d04321e2350f01f8ff17974e6a5c","patch":"@@ -1250,7 +1250,7 @@ void positional_input_parameter() #POSITIONALINPUTPARAMETER :\n \n void pattern_value() #PATTERNVALUE : { }\n {\n-\tinput_parameter() | string_literal()\n+\t(input_parameter() | string_literal())\n \t[(<ESCAPE> escape_character() #ESCAPECHARACTER)]\n }\n "},{"sha":"4e71644f474655b0a556f74e3849467981f950a8","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestEJBQLCondExpression.java","status":"modified","additions":8,"deletions":2,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/ee170672b1c1d04321e2350f01f8ff17974e6a5c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestEJBQLCondExpression.java","raw_url":"https://github.com/apache/openjpa/raw/ee170672b1c1d04321e2350f01f8ff17974e6a5c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestEJBQLCondExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestEJBQLCondExpression.java?ref=ee170672b1c1d04321e2350f01f8ff17974e6a5c","patch":"@@ -23,7 +23,6 @@\n \r\n import org.apache.openjpa.persistence.common.apps.*;\r\n import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n-import org.apache.openjpa.persistence.InvalidStateException;\r\n \r\n public class TestEJBQLCondExpression extends AbstractTestCase {\r\n \r\n@@ -163,6 +162,13 @@ public void testLikeExpr() {\n         assertNotNull(result);\r\n         assertEquals(0, result.size());\r\n \r\n+        query = \"SELECT o.name FROM CompUser o WHERE o.name LIKE ?1 ESCAPE '|'\";\r\n+\r\n+        result = em.createQuery(query).setParameter(1, \"%|_%\").getResultList();\r\n+\r\n+        assertNotNull(result);\r\n+        assertEquals(0, result.size());\r\n+\r\n         endEm(em);\r\n     }\r\n \r\n@@ -268,7 +274,7 @@ public void testAnyExpr() {\n \r\n         String query =\r\n             \"SELECT o.name FROM CompUser o WHERE o.address.zipcode = ANY (\" +\r\n-                \" SELECT s FROM CompUser s WHERE s.address.country IS NOT NULL )\";\r\n+                \" SELECT s.computerName FROM CompUser s WHERE s.address.country IS NOT NULL )\";\r\n \r\n         List result = em.createQuery(query).getResultList();\r\n \r"}]}

