{"sha":"ee299cc0bd0942ef8da2156c36e342a443bb46a0","node_id":"MDY6Q29tbWl0MjA2MzY0OmVlMjk5Y2MwYmQwOTQyZWY4ZGEyMTU2YzM2ZTM0MmE0NDNiYjQ2YTA=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-05-03T15:55:16Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-05-03T15:55:16Z"},"message":"OPENJPA-1646: Move DataCacheManager initialization to EMF creation time to close timing window.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@940490 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"fd9f24b59cb820cddad29fab61b9f4011e34a5f5","url":"https://api.github.com/repos/apache/openjpa/git/trees/fd9f24b59cb820cddad29fab61b9f4011e34a5f5"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ee299cc0bd0942ef8da2156c36e342a443bb46a0","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ee299cc0bd0942ef8da2156c36e342a443bb46a0","html_url":"https://github.com/apache/openjpa/commit/ee299cc0bd0942ef8da2156c36e342a443bb46a0","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ee299cc0bd0942ef8da2156c36e342a443bb46a0/comments","author":null,"committer":null,"parents":[{"sha":"78614963a0396123e0b0594ced458094e97435e8","url":"https://api.github.com/repos/apache/openjpa/commits/78614963a0396123e0b0594ced458094e97435e8","html_url":"https://github.com/apache/openjpa/commit/78614963a0396123e0b0594ced458094e97435e8"}],"stats":{"total":45,"additions":15,"deletions":30},"files":[{"sha":"1596527aa20c5b7532dda585c2504410dadc9e6e","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","status":"modified","additions":6,"deletions":15,"changes":21,"blob_url":"https://github.com/apache/openjpa/blob/ee299cc0bd0942ef8da2156c36e342a443bb46a0/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/ee299cc0bd0942ef8da2156c36e342a443bb46a0/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java?ref=ee299cc0bd0942ef8da2156c36e342a443bb46a0","patch":"@@ -679,24 +679,15 @@ public void setDataCacheManager(DataCacheManager dcm) {\n         dataCacheManagerPlugin.set(dcm);\n     }\n \n-    // This boolean is used for double checked locking. We want to minimize the amount of time that\n-    // we're locking here.\n-    private boolean dataCacheManagerInitialized = false;\n     public DataCacheManager getDataCacheManagerInstance() {\n-        if (dataCacheManagerInitialized == false) {\n-            synchronized (this) {\n-                if (dataCacheManagerInitialized == false) {\n-                    DataCacheManager dcm = (DataCacheManager) dataCacheManagerPlugin.get();\n-                    if (dcm == null) {\n-                        dcm = (DataCacheManager) dataCacheManagerPlugin.instantiate(DataCacheManager.class, this);\n-                        dcm.initialize(this, dataCachePlugin, queryCachePlugin);\n-                    }\n-                    dataCacheManagerInitialized = true;\n-                    return dcm;\n-                }\n+        DataCacheManager dcm = (DataCacheManager) dataCacheManagerPlugin.get();\n+        if (dcm == null) {\n+            dcm = (DataCacheManager) dataCacheManagerPlugin.instantiate(DataCacheManager.class, this);\n+            if (dcm != null) {\n+                dcm.initialize(this, dataCachePlugin, queryCachePlugin);\n             }\n         }\n-        return (DataCacheManager) dataCacheManagerPlugin.get();\n+        return dcm;\n     }\n \n     public void setDataCache(String dataCache) {"},{"sha":"2e85503c51de6ab68004332c9f91227692d69a84","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProviderImpl.java","status":"modified","additions":9,"deletions":15,"changes":24,"blob_url":"https://github.com/apache/openjpa/blob/ee299cc0bd0942ef8da2156c36e342a443bb46a0/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProviderImpl.java","raw_url":"https://github.com/apache/openjpa/raw/ee299cc0bd0942ef8da2156c36e342a443bb46a0/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProviderImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProviderImpl.java?ref=ee299cc0bd0942ef8da2156c36e342a443bb46a0","patch":"@@ -102,12 +102,8 @@ public OpenJPAEntityManagerFactory createEntityManagerFactory(String name, Strin\n             // Create appropriate LifecycleEventManager\n             loadValidator(factory);\n             \n-            // We need to wait to preload until after we get back a fully configured/instantiated\n-            // BrokerFactory. This is because it is possible that someone has extended OpenJPA\n-            // functions and they need to be allowed time to configure themselves before we go off and\n-            // start instanting configurable objects (ie:openjpa.MetaDataRepository). Don't catch\n-            // any exceptions here because we want to fail-fast.\n-            preloadMetaDataRepository(factory);\n+            // Perform post BrokerFactory initialization.\n+            postBrokerFactoryInitialization(factory);\n             \n             return JPAFacadeHelper.toEntityManagerFactory(factory);\n         } catch (Exception e) {\n@@ -203,12 +199,8 @@ public OpenJPAEntityManagerFactory createContainerEntityManagerFactory(Persisten\n             // Create appropriate LifecycleEventManager\n             loadValidator(factory);\n             \n-            // We need to wait to preload until after we get back a fully configured/instantiated\n-            // BrokerFactory. This is because it is possible that someone has extended OpenJPA\n-            // functions and they need to be allowed time to configure themselves before we go off and\n-            // start instanting configurable objects (ie:openjpa.MetaDataRepository). Don't catch\n-            // any exceptions here because we want to fail-fast.\n-            preloadMetaDataRepository(factory);\n+            // Perform post BrokerFactory initialization.\n+            postBrokerFactoryInitialization(factory);\n             \n             return JPAFacadeHelper.toEntityManagerFactory(factory);\n         } catch (Exception e) {\n@@ -258,10 +250,9 @@ protected OpenJPAConfiguration newConfigurationImpl() {\n     }\n \n     /**\n-     * Private worker method that will call to the MetaDataRepository to preload if the provided\n-     * BrokerFactory is configured to do so.\n+     * Private worker method that will perform initialization that needs to happen AFTER BrokerFactory creation.\n      */\n-    private void preloadMetaDataRepository(BrokerFactory factory){\n+    private void postBrokerFactoryInitialization(BrokerFactory factory){\n         // We need to wait to preload until after we get back a fully configured/instantiated\n         // BrokerFactory. This is because it is possible that someone has extended OpenJPA\n         // functions and they need to be allowed time to configure themselves before we go off and\n@@ -279,6 +270,9 @@ private void preloadMetaDataRepository(BrokerFactory factory){\n                 .doPrivileged(J2DoPrivHelper.getContextClassLoaderAction()));\n             mdr.preload();\n         }\n+        \n+        // Get a DataCacheManager instance up front to avoid threading concerns on first call.\n+        conf.getDataCacheManagerInstance();\n     }\n     \n     /**"}]}

