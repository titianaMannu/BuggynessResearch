{"sha":"ee30b010dcbd58258c5d940d121e02f70b8160d9","node_id":"MDY6Q29tbWl0MjA2MzY0OmVlMzBiMDEwZGNiZDU4MjU4YzVkOTQwZDEyMWUwMmY3MGI4MTYwZDk=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2009-11-17T22:59:01Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2009-11-17T22:59:01Z"},"message":"OPENJPA-1388 JPQL named parameter using a reserved word (:vlaue) resulting in ArgumentException\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@881598 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6499472d4a1b7b41b188ed1c403935151ef609ff","url":"https://api.github.com/repos/apache/openjpa/git/trees/6499472d4a1b7b41b188ed1c403935151ef609ff"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ee30b010dcbd58258c5d940d121e02f70b8160d9","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ee30b010dcbd58258c5d940d121e02f70b8160d9","html_url":"https://github.com/apache/openjpa/commit/ee30b010dcbd58258c5d940d121e02f70b8160d9","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ee30b010dcbd58258c5d940d121e02f70b8160d9/comments","author":null,"committer":null,"parents":[{"sha":"d797bc1eda8af75bb266d0523ca569b62ad1b774","url":"https://api.github.com/repos/apache/openjpa/commits/d797bc1eda8af75bb266d0523ca569b62ad1b774","html_url":"https://github.com/apache/openjpa/commit/d797bc1eda8af75bb266d0523ca569b62ad1b774"}],"stats":{"total":40,"additions":30,"deletions":10},"files":[{"sha":"307ed0c200dd3dfb46e38aa868ffc39297ab1a8e","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/ee30b010dcbd58258c5d940d121e02f70b8160d9/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/ee30b010dcbd58258c5d940d121e02f70b8160d9/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java?ref=ee30b010dcbd58258c5d940d121e02f70b8160d9","patch":"@@ -1732,7 +1732,7 @@ protected void assertParameters(StoreQuery q, StoreQuery.Executor ex,\n         for (Object expected : paramTypes.keySet()) {\n             if (!params.containsKey(expected))\n             throw new UserException(_loc.get(\"unbound-params\",\n-                params.keySet()));\n+                expected, params.keySet()));\n         }\n \n         Iterator itr = paramTypes.entrySet().iterator();"},{"sha":"1a43a9fd2d0a979ccd5ab3fabc8f46328c4e1a7b","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/ee30b010dcbd58258c5d940d121e02f70b8160d9/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","raw_url":"https://github.com/apache/openjpa/raw/ee30b010dcbd58258c5d940d121e02f70b8160d9/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java?ref=ee30b010dcbd58258c5d940d121e02f70b8160d9","patch":"@@ -1027,15 +1027,18 @@ private Object eval(JPQLNode node) {\n                 return eval(firstChild(node));\n \n             case JJTNAMEDINPUTPARAMETER:\n-                return getParameter(node.text, false, false);\n+                return getParameter(onlyChild(node).text, false, false);\n \n             case JJTPOSITIONALINPUTPARAMETER:\n                 return getParameter(node.text, true, false);\n \n             case JJTCOLLECTIONPARAMETER:\n                 JPQLNode child = onlyChild(node);\n+                boolean positional = child.id == JJTPOSITIONALINPUTPARAMETER;\n+                if (!positional)\n+                    child = onlyChild(child);\n                 return getParameter(child.text, \n-                    child.id == JJTPOSITIONALINPUTPARAMETER, true);\n+                    positional, true);\n \n             case JJTOR: // x OR y\n                 return factory.or(getExpression(left(node)),"},{"sha":"d6163e0f388dc6b90d4a20590494dab582d892fa","filename":"openjpa-kernel/src/main/jjtree/org/apache/openjpa/kernel/jpql/JPQL.jjt","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/ee30b010dcbd58258c5d940d121e02f70b8160d9/openjpa-kernel/src/main/jjtree/org/apache/openjpa/kernel/jpql/JPQL.jjt","raw_url":"https://github.com/apache/openjpa/raw/ee30b010dcbd58258c5d940d121e02f70b8160d9/openjpa-kernel/src/main/jjtree/org/apache/openjpa/kernel/jpql/JPQL.jjt","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/jjtree/org/apache/openjpa/kernel/jpql/JPQL.jjt?ref=ee30b010dcbd58258c5d940d121e02f70b8160d9","patch":"@@ -1488,10 +1488,9 @@ void collection_valued_input_parameter() #COLLECTIONPARAMETER: { }\n }\r\n \r\n \r\n-void named_input_parameter() #NAMEDINPUTPARAMETER :\r\n-{ Token t; }\r\n+void named_input_parameter() #NAMEDINPUTPARAMETER : { }\r\n {\r\n-\t\":\" t = <IDENTIFIER> { jjtThis.setToken (t); }\r\n+\t\":\" path_component()\r\n }\r\n \r\n \r"},{"sha":"e7751f4f686f2828b6a2e8b9c053d34afa3abb25","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestEntityTypeExpression.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/ee30b010dcbd58258c5d940d121e02f70b8160d9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestEntityTypeExpression.java","raw_url":"https://github.com/apache/openjpa/raw/ee30b010dcbd58258c5d940d121e02f70b8160d9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestEntityTypeExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestEntityTypeExpression.java?ref=ee30b010dcbd58258c5d940d121e02f70b8160d9","patch":"@@ -107,10 +107,10 @@ public void testTypeExpression() {\n         user = rs.get(0);\n         assertEquals(\"Famzy\", user.getName());\n \n-        query = \"SELECT e FROM CompUser e where TYPE(e) in :params \" +\n+        query = \"SELECT e FROM CompUser e where TYPE(e) in :value \" +\n                 \"ORDER BY e.age\";\n         rs = em.createQuery(query).\n-            setParameter(\"params\", params).getResultList();\n+            setParameter(\"value\", params).getResultList();\n         user = rs.get(0);\n         assertEquals(\"Jacob\", user.getName());\n         \n@@ -137,10 +137,10 @@ public void testTypeExpression() {\n         type = ((Object[]) rs2.get(0))[1];\n         assertEquals(type, FemaleUser.class);\n         \n-        query = \"SELECT e FROM CompUser e where TYPE(e) = :typeName \" +\n+        query = \"SELECT e FROM CompUser e where TYPE(e) = :type \" +\n             \" ORDER BY e.name\";\n         rs =  em.createQuery(query).\n-            setParameter(\"typeName\", FemaleUser.class).getResultList();\n+            setParameter(\"type\", FemaleUser.class).getResultList();\n         assertTrue(rs.size()==3);\n         user = rs.get(0);\n         assertEquals(\"Famzy\", user.getName());"},{"sha":"3e8fe4bf71d3b6fb0776ef68ff14e737dfc084d8","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryParameters.java","status":"modified","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/ee30b010dcbd58258c5d940d121e02f70b8160d9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryParameters.java","raw_url":"https://github.com/apache/openjpa/raw/ee30b010dcbd58258c5d940d121e02f70b8160d9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryParameters.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryParameters.java?ref=ee30b010dcbd58258c5d940d121e02f70b8160d9","patch":"@@ -59,6 +59,24 @@ public void tearDown() {\n         // do not close the factory\n     }\n     \n+    public void testNamedParameterUsingReservedWord() {\n+        String jpql = \"select e from simple e WHERE e.id=:key and e.name=:value\";\n+        Query q = em.createQuery(jpql)\n+                    .setParameter(\"key\", 100)\n+                    .setParameter(\"value\", \"XYZ\");\n+        \n+        assertEquals(2, q.getParameters().size());\n+        Parameter<?> param1 = q.getParameter(\"key\");\n+        Parameter<?> param2 = q.getParameter(\"value\");\n+        \n+        assertEquals(100, q.getParameterValue(\"key\"));\n+        assertEquals(100, q.getParameterValue(param1));\n+        assertEquals(\"XYZ\", q.getParameterValue(\"value\"));\n+        assertEquals(\"XYZ\", q.getParameterValue(param2));\n+        \n+        q.getResultList();\n+    }\n+    \n     public void testPositionalParameterInJPQLQuery() {\n         String jpql = \"select e from simple e WHERE e.id=?1 and e.name=?2\";\n         Query q = em.createQuery(jpql)"}]}

