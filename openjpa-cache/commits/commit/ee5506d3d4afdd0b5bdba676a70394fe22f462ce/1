{"sha":"ee5506d3d4afdd0b5bdba676a70394fe22f462ce","node_id":"MDY6Q29tbWl0MjA2MzY0OmVlNTUwNmQzZDRhZmRkMGI1YmRiYTY3NmE3MDM5NGZlMjJmNDYyY2U=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-08-24T14:41:36Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-08-24T14:41:36Z"},"message":"OPENJPA-1261: Set svn:eol-style\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@807248 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"37ce91bdf677231f802806293d6ef82169929c63","url":"https://api.github.com/repos/apache/openjpa/git/trees/37ce91bdf677231f802806293d6ef82169929c63"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ee5506d3d4afdd0b5bdba676a70394fe22f462ce","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ee5506d3d4afdd0b5bdba676a70394fe22f462ce","html_url":"https://github.com/apache/openjpa/commit/ee5506d3d4afdd0b5bdba676a70394fe22f462ce","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ee5506d3d4afdd0b5bdba676a70394fe22f462ce/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"917b49befe6098d1c3bf4647eb8dbdf5974de92d","url":"https://api.github.com/repos/apache/openjpa/commits/917b49befe6098d1c3bf4647eb8dbdf5974de92d","html_url":"https://github.com/apache/openjpa/commit/917b49befe6098d1c3bf4647eb8dbdf5974de92d"}],"stats":{"total":326,"additions":163,"deletions":163},"files":[{"sha":"57b42e2afc976576380d2484d9c2c25611852bad","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/results/TestJPQLMultiSelectTypedResults.java","status":"modified","additions":163,"deletions":163,"changes":326,"blob_url":"https://github.com/apache/openjpa/blob/ee5506d3d4afdd0b5bdba676a70394fe22f462ce/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/results/TestJPQLMultiSelectTypedResults.java","raw_url":"https://github.com/apache/openjpa/raw/ee5506d3d4afdd0b5bdba676a70394fe22f462ce/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/results/TestJPQLMultiSelectTypedResults.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/results/TestJPQLMultiSelectTypedResults.java?ref=ee5506d3d4afdd0b5bdba676a70394fe22f462ce","patch":"@@ -1,163 +1,163 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-\r\n-package org.apache.openjpa.persistence.query.results;\r\n-\r\n-import java.text.DateFormat;\r\n-import java.text.ParseException;\r\n-import java.util.HashSet;\r\n-import java.util.List;\r\n-\r\n-import javax.persistence.EntityManager;\r\n-import javax.persistence.Query;\r\n-\r\n-import org.apache.openjpa.persistence.criteria.Person;\r\n-import org.apache.openjpa.persistence.criteria.results.Bar;\r\n-import org.apache.openjpa.persistence.criteria.results.Foo;\r\n-import org.apache.openjpa.persistence.criteria.results.FooBar;\r\n-import org.apache.openjpa.persistence.criteria.results.Item;\r\n-import org.apache.openjpa.persistence.criteria.results.Order;\r\n-import org.apache.openjpa.persistence.criteria.results.Producer;\r\n-import org.apache.openjpa.persistence.criteria.results.Shop;\r\n-import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n-\r\n-public class TestJPQLMultiSelectTypedResults extends SingleEMFTestCase {\r\n-\r\n-    private static final int N_ORDERS = 15;\r\n-    private static final int N_ITEMS_PER_ORDER = 3;\r\n-\r\n-    // use short data format\r\n-    private static final String[] ORDER_DATES =\r\n-        { \"3/12/2008 1:00 PM\", \"10/01/2008 1:51 AM\", \"12/12/2008 10:01 AM\", \"5/21/2009 3:23 PM\" };\r\n-\r\n-    DateFormat df = DateFormat.getInstance(); // uses SHORT dateformat by default\r\n-\r\n-    public void setUp() throws Exception {\r\n-        setUp(CLEAR_TABLES, Order.class, Item.class, Shop.class, Producer.class,\r\n-              Person.class, Foo.class, Bar.class,\r\n-             \"openjpa.DynamicEnhancerAgent\", \"false\");\r\n-        populate();\r\n-    }\r\n-\r\n-    public void populate() throws ParseException {\r\n-        EntityManager em = emf.createEntityManager();\r\n-        em.getTransaction().begin();\r\n-        Shop s = new Shop();\r\n-        Order order;\r\n-        Item item;\r\n-        Producer p;\r\n-\r\n-        s.setId(1);\r\n-        s.setName(\"eBay.com\");\r\n-        s.setOrders(new HashSet<Order>());\r\n-\r\n-        for (int i = 1; i <= N_ORDERS; i++) {\r\n-            order = new Order();\r\n-            order.setId(i);\r\n-            order.setDate(df.parse(ORDER_DATES[i % ORDER_DATES.length]));\r\n-            order.setFilled(i % 2 == 0 ? true : false);\r\n-            order.setShop(s);\r\n-            order.setItems(new HashSet<Item>());\r\n-            s.getOrders().add(order);\r\n-            for (int j = 1; j <= N_ITEMS_PER_ORDER; j++) {\r\n-                item = new Item();\r\n-                item.setOrder(order);\r\n-                order.getItems().add(item);\r\n-                p = new Producer();\r\n-                p.setName(\"filler\");\r\n-                p.setItem(item);\r\n-                item.setProduct(p);\r\n-            }\r\n-        }\r\n-        em.persist(s);\r\n-        Person person = new Person(\"Test Result Shape\");\r\n-        em.persist(person);\r\n-        \r\n-        Foo foo = new Foo(100L, \"Test Foo\");\r\n-        Bar bar = new Bar(200L, \"Test Bar\");\r\n-        foo.setBar(bar);\r\n-        em.persist(foo);\r\n-        em.persist(bar);\r\n-        em.getTransaction().commit();\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void tearDown() throws Exception {\r\n-        super.tearDown();\r\n-    }\r\n-\r\n-    public void testMultipleConstructor() {\r\n-        String query = \"SELECT NEW Foo(f.fid,f.fint), b, NEW FooBar(f.fid, b.bid) \" +\r\n-                    \"from Foo f JOIN f.bar b WHERE f.bar=b\";\r\n-        EntityManager em = emf.createEntityManager();\r\n-        Query jpqlQuery = em.createQuery(query);\r\n-        List<Object[]> result = jpqlQuery.getResultList();\r\n-\r\n-        assertFalse(result.isEmpty());\r\n-        for (Object[] row : result) {\r\n-            assertEquals(3, row.length);\r\n-            assertTrue(\"0-th element \" + row[0].getClass() + \" is not Foo\", row[0] instanceof Foo);\r\n-            assertTrue(\"1-st element \" + row[1].getClass() + \" is not Bar\", row[1] instanceof Bar);\r\n-            assertTrue(\"2-nd element \" + row[2].getClass() + \" is not FooBar\", row[2] instanceof FooBar);\r\n-        }\r\n-        \r\n-    }\r\n-    public void testMultipleConstructorMixWithMultiSelect() {\r\n-        String query = \"SELECT NEW Person(p.name), p.id, NEW Person(p.name), p.name FROM Person p ORDER BY p.name\";\r\n-        EntityManager em = emf.createEntityManager();\r\n-        Query jpqlQuery = em.createQuery(query);\r\n-        List<Object[]> result = jpqlQuery.getResultList();\r\n-        assertTrue(!result.isEmpty());\r\n-        for (Object[] row : result) {\r\n-            assertEquals(4, row.length);\r\n-            \r\n-            assertEquals(Person.class,  row[0].getClass());\r\n-            assertEquals(Integer.class, row[1].getClass());\r\n-            assertEquals(Person.class,  row[2].getClass());\r\n-            assertEquals(String.class,  row[3].getClass());\r\n-            \r\n-            assertEquals(((Person)row[0]).getName(), ((Person)row[2]).getName());\r\n-            assertEquals(((Person)row[0]).getName(), row[3]);\r\n-        }\r\n-    }\r\n-    /**\r\n-     * Testcase to verify that selecting multiple results in a variety of ways returns the same results. Results are\r\n-     * returned via a normal Object [] (JPQL).\r\n-     * \r\n-     * @throws Exception\r\n-     */\r\n-    public void testMultiSelect() throws Exception {\r\n-        // get results from traditional JPQL\r\n-        EntityManager em = emf.createEntityManager();\r\n-        Query jpqlQuery =\r\n-            em.createQuery(\"SELECT o, p from Order o JOIN o.items i JOIN i.producer p WHERE o.filled = true\");\r\n-        // don't suppress warnings.\r\n-        List<Object[]> jpqlResults = jpqlQuery.getResultList();\r\n-\r\n-        assertEquals(N_ORDERS / 2 * N_ITEMS_PER_ORDER, jpqlResults.size());\r\n-\r\n-        for (Object[] os : jpqlResults) {\r\n-            assertEquals(2, os.length);\r\n-            assertTrue(os[0] instanceof Order);\r\n-            assertTrue(os[1] instanceof Producer);\r\n-        }\r\n-\r\n-        em.close();\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.openjpa.persistence.query.results;\n+\n+import java.text.DateFormat;\n+import java.text.ParseException;\n+import java.util.HashSet;\n+import java.util.List;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.Query;\n+\n+import org.apache.openjpa.persistence.criteria.Person;\n+import org.apache.openjpa.persistence.criteria.results.Bar;\n+import org.apache.openjpa.persistence.criteria.results.Foo;\n+import org.apache.openjpa.persistence.criteria.results.FooBar;\n+import org.apache.openjpa.persistence.criteria.results.Item;\n+import org.apache.openjpa.persistence.criteria.results.Order;\n+import org.apache.openjpa.persistence.criteria.results.Producer;\n+import org.apache.openjpa.persistence.criteria.results.Shop;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+public class TestJPQLMultiSelectTypedResults extends SingleEMFTestCase {\n+\n+    private static final int N_ORDERS = 15;\n+    private static final int N_ITEMS_PER_ORDER = 3;\n+\n+    // use short data format\n+    private static final String[] ORDER_DATES =\n+        { \"3/12/2008 1:00 PM\", \"10/01/2008 1:51 AM\", \"12/12/2008 10:01 AM\", \"5/21/2009 3:23 PM\" };\n+\n+    DateFormat df = DateFormat.getInstance(); // uses SHORT dateformat by default\n+\n+    public void setUp() throws Exception {\n+        setUp(CLEAR_TABLES, Order.class, Item.class, Shop.class, Producer.class,\n+              Person.class, Foo.class, Bar.class,\n+             \"openjpa.DynamicEnhancerAgent\", \"false\");\n+        populate();\n+    }\n+\n+    public void populate() throws ParseException {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        Shop s = new Shop();\n+        Order order;\n+        Item item;\n+        Producer p;\n+\n+        s.setId(1);\n+        s.setName(\"eBay.com\");\n+        s.setOrders(new HashSet<Order>());\n+\n+        for (int i = 1; i <= N_ORDERS; i++) {\n+            order = new Order();\n+            order.setId(i);\n+            order.setDate(df.parse(ORDER_DATES[i % ORDER_DATES.length]));\n+            order.setFilled(i % 2 == 0 ? true : false);\n+            order.setShop(s);\n+            order.setItems(new HashSet<Item>());\n+            s.getOrders().add(order);\n+            for (int j = 1; j <= N_ITEMS_PER_ORDER; j++) {\n+                item = new Item();\n+                item.setOrder(order);\n+                order.getItems().add(item);\n+                p = new Producer();\n+                p.setName(\"filler\");\n+                p.setItem(item);\n+                item.setProduct(p);\n+            }\n+        }\n+        em.persist(s);\n+        Person person = new Person(\"Test Result Shape\");\n+        em.persist(person);\n+        \n+        Foo foo = new Foo(100L, \"Test Foo\");\n+        Bar bar = new Bar(200L, \"Test Bar\");\n+        foo.setBar(bar);\n+        em.persist(foo);\n+        em.persist(bar);\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+\n+    public void tearDown() throws Exception {\n+        super.tearDown();\n+    }\n+\n+    public void testMultipleConstructor() {\n+        String query = \"SELECT NEW Foo(f.fid,f.fint), b, NEW FooBar(f.fid, b.bid) \" +\n+                    \"from Foo f JOIN f.bar b WHERE f.bar=b\";\n+        EntityManager em = emf.createEntityManager();\n+        Query jpqlQuery = em.createQuery(query);\n+        List<Object[]> result = jpqlQuery.getResultList();\n+\n+        assertFalse(result.isEmpty());\n+        for (Object[] row : result) {\n+            assertEquals(3, row.length);\n+            assertTrue(\"0-th element \" + row[0].getClass() + \" is not Foo\", row[0] instanceof Foo);\n+            assertTrue(\"1-st element \" + row[1].getClass() + \" is not Bar\", row[1] instanceof Bar);\n+            assertTrue(\"2-nd element \" + row[2].getClass() + \" is not FooBar\", row[2] instanceof FooBar);\n+        }\n+        \n+    }\n+    public void testMultipleConstructorMixWithMultiSelect() {\n+        String query = \"SELECT NEW Person(p.name), p.id, NEW Person(p.name), p.name FROM Person p ORDER BY p.name\";\n+        EntityManager em = emf.createEntityManager();\n+        Query jpqlQuery = em.createQuery(query);\n+        List<Object[]> result = jpqlQuery.getResultList();\n+        assertTrue(!result.isEmpty());\n+        for (Object[] row : result) {\n+            assertEquals(4, row.length);\n+            \n+            assertEquals(Person.class,  row[0].getClass());\n+            assertEquals(Integer.class, row[1].getClass());\n+            assertEquals(Person.class,  row[2].getClass());\n+            assertEquals(String.class,  row[3].getClass());\n+            \n+            assertEquals(((Person)row[0]).getName(), ((Person)row[2]).getName());\n+            assertEquals(((Person)row[0]).getName(), row[3]);\n+        }\n+    }\n+    /**\n+     * Testcase to verify that selecting multiple results in a variety of ways returns the same results. Results are\n+     * returned via a normal Object [] (JPQL).\n+     * \n+     * @throws Exception\n+     */\n+    public void testMultiSelect() throws Exception {\n+        // get results from traditional JPQL\n+        EntityManager em = emf.createEntityManager();\n+        Query jpqlQuery =\n+            em.createQuery(\"SELECT o, p from Order o JOIN o.items i JOIN i.producer p WHERE o.filled = true\");\n+        // don't suppress warnings.\n+        List<Object[]> jpqlResults = jpqlQuery.getResultList();\n+\n+        assertEquals(N_ORDERS / 2 * N_ITEMS_PER_ORDER, jpqlResults.size());\n+\n+        for (Object[] os : jpqlResults) {\n+            assertEquals(2, os.length);\n+            assertTrue(os[0] instanceof Order);\n+            assertTrue(os[1] instanceof Producer);\n+        }\n+\n+        em.close();\n+    }\n+}"}]}

