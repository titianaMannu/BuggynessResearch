{"sha":"ee6f4acc3ff9ac43ea4e98579b478e55767aef24","node_id":"MDY6Q29tbWl0MjA2MzY0OmVlNmY0YWNjM2ZmOWFjNDNlYTRlOTg1NzliNDc4ZTU1NzY3YWVmMjQ=","commit":{"author":{"name":"Jody Grassel","email":"jgrassel@apache.org","date":"2013-08-23T14:11:17Z"},"committer":{"name":"Jody Grassel","email":"jgrassel@apache.org","date":"2013-08-23T14:11:17Z"},"message":"OPENJPA-2414: FinderCache does not consider active Fetch Groups/FetchPlan added Fields\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1516853 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0aba0c7e4ef3bd3f5899169ec3ac4c8afe9eca15","url":"https://api.github.com/repos/apache/openjpa/git/trees/0aba0c7e4ef3bd3f5899169ec3ac4c8afe9eca15"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ee6f4acc3ff9ac43ea4e98579b478e55767aef24","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ee6f4acc3ff9ac43ea4e98579b478e55767aef24","html_url":"https://github.com/apache/openjpa/commit/ee6f4acc3ff9ac43ea4e98579b478e55767aef24","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ee6f4acc3ff9ac43ea4e98579b478e55767aef24/comments","author":null,"committer":null,"parents":[{"sha":"ea05b25d4612d11aff28d0a6153782432371012a","url":"https://api.github.com/repos/apache/openjpa/commits/ea05b25d4612d11aff28d0a6153782432371012a","html_url":"https://github.com/apache/openjpa/commit/ea05b25d4612d11aff28d0a6153782432371012a"}],"stats":{"total":1502,"additions":1494,"deletions":8},"files":[{"sha":"15383c3d40604b6698ee58d46a7cb02fb9586522","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/FinderCacheImpl.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/ee6f4acc3ff9ac43ea4e98579b478e55767aef24/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/FinderCacheImpl.java","raw_url":"https://github.com/apache/openjpa/raw/ee6f4acc3ff9ac43ea4e98579b478e55767aef24/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/FinderCacheImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/FinderCacheImpl.java?ref=ee6f4acc3ff9ac43ea4e98579b478e55767aef24","patch":"@@ -107,6 +107,12 @@ public FinderCacheImpl() {\n         if (fetch.getReadLockLevel() != 0) {\n             return null;\n         }\n+        \n+        // FinderCache only operates with Default Fetch Plans\n+        if (!fetch.isDefaultPUFetchGroupConfigurationOnly()) {\n+            return null;\n+        }\n+        \n         boolean ignore = isHinted(fetch, QueryHints.HINT_IGNORE_FINDER);\n         boolean invalidate = isHinted(fetch, QueryHints.HINT_INVALIDATE_FINDER);\n         if (invalidate) {\n@@ -144,6 +150,12 @@ public FinderCacheImpl() {\n             if (fetch.getReadLockLevel() != 0) {\n                 return null;\n             }\n+            \n+            // FinderCache only operates with Default Fetch Plans\n+            if (!fetch.isDefaultPUFetchGroupConfigurationOnly()) {\n+                return null;\n+            }           \n+            \n             boolean recache = isHinted(fetch, QueryHints.HINT_RECACHE_FINDER);\n             if (isExcluded(mapping)) {\n                 return recache ? put(mapping, select) : null;"},{"sha":"4a7543259f6cc568d615e27a7dae6d50e6326186","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingFetchConfiguration.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/ee6f4acc3ff9ac43ea4e98579b478e55767aef24/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingFetchConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/ee6f4acc3ff9ac43ea4e98579b478e55767aef24/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingFetchConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingFetchConfiguration.java?ref=ee6f4acc3ff9ac43ea4e98579b478e55767aef24","patch":"@@ -500,6 +500,14 @@ public boolean isHintSet(String key) {\n         }\n     }\n     \n+    public boolean isDefaultPUFetchGroupConfigurationOnly() {\n+        try {\n+            return _fetch.isDefaultPUFetchGroupConfigurationOnly();\n+        } catch (RuntimeException re) {\n+            throw translate(re);\n+        }\n+    }\n+    \n     public Object getHint(String name) {\n         try {\n             return _fetch.getHint(name);"},{"sha":"436703a431f4766ccda4a043257b622e18a81291","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfiguration.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/ee6f4acc3ff9ac43ea4e98579b478e55767aef24/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/ee6f4acc3ff9ac43ea4e98579b478e55767aef24/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfiguration.java?ref=ee6f4acc3ff9ac43ea4e98579b478e55767aef24","patch":"@@ -414,6 +414,12 @@\n \t */\n \tpublic boolean isHintSet(String key);\n \n+\t/**\n+\t * Affirm if the Fetch Plan currently matches the Persistence Unit's configured default.\n+\t * \n+\t */\n+\tpublic boolean isDefaultPUFetchGroupConfigurationOnly();\n+\t\n     /**\n      * Root classes for recursive operations. This set is not thread safe.\n      */"},{"sha":"0b9e30d997d57253a8fc187204e60dd01c6b8b9f","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfigurationImpl.java","status":"modified","additions":72,"deletions":8,"changes":80,"blob_url":"https://github.com/apache/openjpa/blob/ee6f4acc3ff9ac43ea4e98579b478e55767aef24/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/ee6f4acc3ff9ac43ea4e98579b478e55767aef24/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfigurationImpl.java?ref=ee6f4acc3ff9ac43ea4e98579b478e55767aef24","patch":"@@ -145,6 +145,7 @@ protected static void populateHintSetter(Class<?> target, String method, String\n         public Map<String,Object> hints = null;\n         public boolean fetchGroupContainsDefault = false;\n         public boolean fetchGroupContainsAll = false;\n+        public boolean fetchGroupIsPUDefault = false;\n         public boolean extendedPathLookup = false;\n         public DataCacheRetrieveMode cacheRetrieveMode = DataCacheRetrieveMode.USE;\n         public DataCacheStoreMode cacheStoreMode = DataCacheStoreMode.USE;        \n@@ -186,8 +187,11 @@ public void setContext(StoreContext ctx) {\n         setFlushBeforeQueries(conf.getFlushBeforeQueriesConstant());\n         setLockTimeout(conf.getLockTimeout());\n         setQueryTimeout(conf.getQueryTimeout());\n-        clearFetchGroups();\n-        addFetchGroups(Arrays.asList(conf.getFetchGroupsList()));\n+        \n+        String[] fetchGroupList = conf.getFetchGroupsList();\n+        clearFetchGroups((fetchGroupList == null || fetchGroupList.length == 0));\n+        \n+        addFetchGroups(Arrays.asList(fetchGroupList));\n         setMaxFetchDepth(conf.getMaxFetchDepth());\n     }\n \n@@ -339,6 +343,10 @@ public boolean hasFetchGroupAll() {\n      }\n      \n     public FetchConfiguration addFetchGroup(String name) {\n+        return addFetchGroup(name, true);\n+    }\n+     \n+    public FetchConfiguration addFetchGroup(String name, boolean recomputeIsDefault) {\n         if (StringUtils.isEmpty(name))\n             throw new UserException(_loc.get(\"null-fg\"));\n \n@@ -347,11 +355,15 @@ public FetchConfiguration addFetchGroup(String name) {\n             if (_state.fetchGroups == null)\n                 _state.fetchGroups = new HashSet<String>();\n             _state.fetchGroups.add(name);\n+\n             if (FetchGroup.NAME_ALL.equals(name))\n                 _state.fetchGroupContainsAll = true;\n             else if (FetchGroup.NAME_DEFAULT.equals(name))\n                 _state.fetchGroupContainsDefault = true;\n         } finally {\n+            if (recomputeIsDefault) {\n+                verifyDefaultPUFetchGroups();\n+            }\n             unlock();\n         }\n         return this;\n@@ -361,11 +373,17 @@ public FetchConfiguration addFetchGroups(Collection<String> groups) {\n         if (groups == null || groups.isEmpty())\n             return this;\n         for (String group : groups)\n-            addFetchGroup(group);\n+            addFetchGroup(group, false);\n+        \n+        verifyDefaultPUFetchGroups();\n         return this;\n     }\n \n     public FetchConfiguration removeFetchGroup(String group) {\n+        return removeFetchGroup(group, true);\n+    }\n+\n+    public FetchConfiguration removeFetchGroup(String group, boolean recomputeIsDefault) {\n         lock();\n         try {\n             if (_state.fetchGroups != null) {\n@@ -376,6 +394,9 @@ else if (FetchGroup.NAME_DEFAULT.equals(group))\n                     _state.fetchGroupContainsDefault = false;\n             }\n         } finally {\n+            if (recomputeIsDefault) {\n+                verifyDefaultPUFetchGroups();\n+            }\n             unlock();\n         }\n         return this;\n@@ -386,8 +407,9 @@ public FetchConfiguration removeFetchGroups(Collection<String> groups) {\n         try {\n             if (_state.fetchGroups != null && groups != null)\n                 for (String group : groups)\n-                    removeFetchGroup(group);\n+                    removeFetchGroup(group, false);\n         } finally {\n+            verifyDefaultPUFetchGroups();\n             unlock();\n         }\n         return this;\n@@ -413,18 +435,53 @@ private FetchConfiguration clearFetchGroups(boolean restoresDefault) {\n                 _state.fetchGroups.add(FetchGroup.NAME_DEFAULT); // OPENJPA-2413\n             }\n         } finally {\n+            verifyDefaultPUFetchGroups();\n             unlock();\n         }\n         return this;\n     }\n \n     public FetchConfiguration resetFetchGroups() {\n-        clearFetchGroups();\n+        String[] fetchGroupList = _state.ctx.getConfiguration().getFetchGroupsList();\n+        clearFetchGroups((fetchGroupList == null || fetchGroupList.length == 0));\n+        \n         if (_state.ctx != null)\n-            addFetchGroups(Arrays.asList(_state.ctx.getConfiguration().\n-                getFetchGroupsList()));\n+            addFetchGroups(Arrays.asList(fetchGroupList));\n+        \n+        verifyDefaultPUFetchGroups();\n+        \n         return this;\n     }\n+    \n+    /**\n+     * Determine if the current selection of FetchGroups is equivalent to the Configuration's default FetchGroups\n+     */\n+    private void verifyDefaultPUFetchGroups() {\n+        _state.fetchGroupIsPUDefault = false;\n+        \n+        if (_state.fields != null && !_state.fields.isEmpty()) {\n+            return;\n+        }\n+            \n+        if (_state.fetchGroups != null && _state.ctx != null) {\n+            List<String> defaultPUFetchGroups = Arrays.asList(_state.ctx.getConfiguration().getFetchGroupsList());\n+            if (_state.fetchGroups.size() != defaultPUFetchGroups.size()) {\n+                return;\n+            }\n+            \n+            for (String fetchGroupName : defaultPUFetchGroups) {\n+                if (!_state.fetchGroups.contains(fetchGroupName)) {\n+                    return;\n+                }\n+            }\n+            \n+            _state.fetchGroupIsPUDefault = true;\n+        }\n+    }\n+    \n+    public boolean isDefaultPUFetchGroupConfigurationOnly() {\n+        return _state.fetchGroupIsPUDefault;\n+    }\n \n     public Set<String> getFields() {\n         if (_state.fields == null) return Collections.emptySet();\n@@ -444,6 +501,7 @@ public FetchConfiguration addField(String field) {\n             if (_state.fields == null)\n                 _state.fields = new HashSet<String>();\n             _state.fields.add(field);\n+            _state.fetchGroupIsPUDefault = false;\n         } finally {\n             unlock();\n         }\n@@ -468,8 +526,13 @@ public FetchConfiguration addFields(Collection<String> fields) {\n     public FetchConfiguration removeField(String field) {\n         lock();\n         try {\n-            if (_state.fields != null)\n+            if (_state.fields != null) {\n                 _state.fields.remove(field);\n+                \n+                if (_state.fields.size() == 0) {\n+                    verifyDefaultPUFetchGroups();\n+                }\n+            }\n         } finally {\n             unlock();\n         }\n@@ -493,6 +556,7 @@ public FetchConfiguration clearFields() {\n             if (_state.fields != null)\n                 _state.fields.clear();\n         } finally {\n+            verifyDefaultPUFetchGroups();\n             unlock();\n         }\n         return this;"},{"sha":"bce0eed3ea191e88d8eee7a349316e521b00035d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fetchgroups/TestFetchGroups.java","status":"added","additions":1396,"deletions":0,"changes":1396,"blob_url":"https://github.com/apache/openjpa/blob/ee6f4acc3ff9ac43ea4e98579b478e55767aef24/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fetchgroups/TestFetchGroups.java","raw_url":"https://github.com/apache/openjpa/raw/ee6f4acc3ff9ac43ea4e98579b478e55767aef24/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fetchgroups/TestFetchGroups.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fetchgroups/TestFetchGroups.java?ref=ee6f4acc3ff9ac43ea4e98579b478e55767aef24","patch":"@@ -0,0 +1,1396 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.openjpa.persistence.fetchgroups;\n+\n+import java.util.HashSet;\n+\n+import org.apache.openjpa.kernel.FetchConfiguration;\n+import org.apache.openjpa.persistence.FetchPlan;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\n+import org.apache.openjpa.persistence.test.SingleEMTestCase;\n+\n+public class TestFetchGroups extends SingleEMTestCase {\n+    private static final int empPerMgr = 5;\n+    private static final int mgrCount = 3;\n+    private static final int empCount = mgrCount * empPerMgr;\n+    \n+    \n+    private HashSet<FGEmployee> employeeSet = new HashSet<FGEmployee>();\n+    private HashSet<FGManager> managerSet = new HashSet<FGManager>();\n+    \n+    private static final String empDescriptionFieldStr =\n+            \"org.apache.openjpa.persistence.fetchgroups.FGEmployee.description\";\n+    \n+    public void setUp() {\n+        super.setUp(CLEAR_TABLES, \n+            FGManager.class, FGDepartment.class, FGEmployee.class, FGAddress.class);\n+        createEmployeeData();\n+    }\n+    \n+    /**\n+     * Verify the \"default\" fetch plan that models JPA's expected eager/lazy fetch load behaviors.\n+     */\n+    public void testDefaultFetchPlan001() {\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        FetchPlan fp = em.getFetchPlan();\n+        assertNotNull(fp);\n+        assertNotNull(fp.getFetchGroups());\n+        assertEquals(1, fp.getFetchGroups().size());\n+        assertTrue(fp.getFetchGroups().contains(\"default\"));\n+        \n+        FetchConfiguration fetchCfg = ((org.apache.openjpa.persistence.EntityManagerImpl) em)\n+                .getBroker()\n+                .getFetchConfiguration();\n+        assertTrue(fetchCfg.isDefaultPUFetchGroupConfigurationOnly());\n+        \n+        \n+        FGManager mgr = managerSet.iterator().next();\n+        assertNotNull(mgr);\n+        \n+        FGManager findMgr = em.find(FGManager.class, mgr.getId());\n+        em.close();\n+        \n+        assertEquals(mgr.getId(), findMgr.getId());\n+        assertEquals(mgr.getFirstName(), findMgr.getFirstName());\n+        assertEquals(mgr.getLastName(), findMgr.getLastName());\n+        assertNull(findMgr.getDescription()); // Should be lazy-loaded\n+    }\n+    \n+    /**\n+     * Verify that adding a FetchGroup to the fetch plan makes a normally JPA determined lazy loaded\n+     * field to behave as an eagerly loaded field.\n+     */\n+    public void testDefaultFetchPlan002() {\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        FetchPlan fp = em.getFetchPlan();\n+        assertNotNull(fp);\n+        \n+        fp.addFetchGroup(\"DescFetchGroup\");\n+        assertNotNull(fp.getFetchGroups());\n+        assertEquals(2, fp.getFetchGroups().size());\n+        assertTrue(fp.getFetchGroups().contains(\"default\"));\n+        assertTrue(fp.getFetchGroups().contains(\"DescFetchGroup\"));\n+        \n+        FetchConfiguration fetchCfg = ((org.apache.openjpa.persistence.EntityManagerImpl) em)\n+                .getBroker()\n+                .getFetchConfiguration();\n+        assertFalse(fetchCfg.isDefaultPUFetchGroupConfigurationOnly());\n+        \n+        FGManager mgr = managerSet.iterator().next();\n+        assertNotNull(mgr);\n+        \n+        FGManager findMgr = em.find(FGManager.class, mgr.getId());\n+        em.close();\n+        \n+        assertEquals(mgr.getId(), findMgr.getId());\n+        assertEquals(mgr.getFirstName(), findMgr.getFirstName());\n+        assertEquals(mgr.getLastName(), findMgr.getLastName());\n+        assertEquals(mgr.getDescription(), findMgr.getDescription()); // Should not be lazy-loaded\n+    }\n+    \n+    /**\n+     * Verify that adding a field to the fetch plan makes a normally JPA determined lazy loaded\n+     * field to behave as an eagerly loaded field.\n+     */\n+    public void testDefaultFetchPlan003() {\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        FetchPlan fp = em.getFetchPlan();\n+        assertNotNull(fp);\n+        \n+        fp.addField(empDescriptionFieldStr);\n+        assertNotNull(fp.getFetchGroups());\n+        assertEquals(1, fp.getFetchGroups().size());\n+        assertTrue(fp.getFetchGroups().contains(\"default\"));\n+        assertTrue(fp.getFields().contains(empDescriptionFieldStr));\n+        \n+        FetchConfiguration fetchCfg = ((org.apache.openjpa.persistence.EntityManagerImpl) em)\n+                .getBroker()\n+                .getFetchConfiguration();\n+        assertFalse(fetchCfg.isDefaultPUFetchGroupConfigurationOnly());\n+        \n+        FGManager mgr = managerSet.iterator().next();\n+        assertNotNull(mgr);\n+        \n+        FGManager findMgr = em.find(FGManager.class, mgr.getId());\n+        em.close();\n+        \n+        assertEquals(mgr.getId(), findMgr.getId());\n+        assertEquals(mgr.getFirstName(), findMgr.getFirstName());\n+        assertEquals(mgr.getLastName(), findMgr.getLastName());\n+        assertEquals(mgr.getDescription(), findMgr.getDescription()); // Should not be lazy-loaded\n+    }\n+    \n+    \n+    /**\n+     * Verify the use of the \"openjpa.FetchGroups\" property when used to add a fetch group\n+     * to the default fetch plan.  Note when overriding that \"default\" must be included in the list.\n+     */\n+    public void testPctxDefaultFetchPlan001() {\n+        OpenJPAEntityManagerFactory emf2 = createNamedEMF(getPersistenceUnitName(), \n+            FGManager.class, FGDepartment.class, FGEmployee.class, FGAddress.class, \n+            \"openjpa.FetchGroups\", \"default,DescFetchGroup\");\n+        \n+        OpenJPAEntityManager em = emf2.createEntityManager();\n+        FetchPlan fp = em.getFetchPlan();\n+        assertNotNull(fp);\n+        assertNotNull(fp.getFetchGroups());\n+        assertEquals(2, fp.getFetchGroups().size());\n+        assertTrue(fp.getFetchGroups().contains(\"default\"));\n+        assertTrue(fp.getFetchGroups().contains(\"DescFetchGroup\"));\n+        \n+        FetchConfiguration fetchCfg = ((org.apache.openjpa.persistence.EntityManagerImpl) em)\n+                .getBroker()\n+                .getFetchConfiguration();\n+        assertTrue(fetchCfg.isDefaultPUFetchGroupConfigurationOnly());\n+        \n+        FGManager mgr = managerSet.iterator().next();\n+        assertNotNull(mgr);\n+        \n+        FGManager findMgr = em.find(FGManager.class, mgr.getId());\n+        em.close();\n+        emf2.close();\n+        \n+        assertEquals(mgr.getId(), findMgr.getId());\n+        assertEquals(mgr.getFirstName(), findMgr.getFirstName());\n+        assertEquals(mgr.getLastName(), findMgr.getLastName());\n+        assertEquals(mgr.getDescription(), findMgr.getDescription()); // Should not be lazy-loaded\n+    }\n+    \n+    /**\n+     * Verify the use of the \"openjpa.FetchGroups\" property - when a list not containing \"default\"\n+     * is provided, then the PCtx's default fetch plan should not include it.  This renders\n+     * fields normally eagerly loaded as per JPA rules to behave as lazy loaded fields.\n+     * \n+     * Note that fetch groups are case sensitive, \"default\" != \"Default\".\n+     */\n+    public void testPctxDefaultFetchPlan002() {\n+        OpenJPAEntityManagerFactory emf2 = createNamedEMF(getPersistenceUnitName(), \n+            FGManager.class, FGDepartment.class, FGEmployee.class, FGAddress.class, \n+            \"openjpa.FetchGroups\", \"Default,DescFetchGroup\");\n+        \n+        OpenJPAEntityManager em = emf2.createEntityManager();\n+        FetchPlan fp = em.getFetchPlan();\n+        assertNotNull(fp);\n+        assertNotNull(fp.getFetchGroups());\n+        assertEquals(2, fp.getFetchGroups().size());\n+        assertTrue(fp.getFetchGroups().contains(\"Default\")); // Not the same as \"default\"\n+        assertTrue(fp.getFetchGroups().contains(\"DescFetchGroup\"));\n+        \n+        FetchConfiguration fetchCfg = ((org.apache.openjpa.persistence.EntityManagerImpl) em)\n+                .getBroker()\n+                .getFetchConfiguration();\n+        assertTrue(fetchCfg.isDefaultPUFetchGroupConfigurationOnly());\n+        \n+        FGManager mgr = managerSet.iterator().next();\n+        assertNotNull(mgr);\n+        \n+        FGManager findMgr = em.find(FGManager.class, mgr.getId());\n+        em.close();\n+        emf2.close();\n+        \n+        assertEquals(mgr.getId(), findMgr.getId()); // Identity is always loaded\n+        assertNull(findMgr.getFirstName());\n+        assertNull(findMgr.getLastName());\n+        assertEquals(mgr.getDescription(), findMgr.getDescription()); // Should not be lazy-loaded\n+    }\n+    \n+    /**\n+     * Test clearFetchGroups(), which removes all fetch groups from the fetch plan and reactivates\n+     * the \"default\" fetch plan.\n+     * \n+     * Note that the method does not place \"default\" back in the list of active fetch groups, OPENJPA-2413\n+     * was opened to note this behavior.\n+     */\n+    public void testClearFetchGroups001() {\n+        OpenJPAEntityManagerFactory emf2 = createNamedEMF(getPersistenceUnitName(), \n+            FGManager.class, FGDepartment.class, FGEmployee.class, FGAddress.class, \n+            \"openjpa.FetchGroups\", \"Default,DescFetchGroup\");\n+        \n+        OpenJPAEntityManager em = emf2.createEntityManager();\n+        FetchPlan fp = em.getFetchPlan();\n+        assertNotNull(fp);\n+        assertNotNull(fp.getFetchGroups());\n+        assertEquals(2, fp.getFetchGroups().size());\n+        assertTrue(fp.getFetchGroups().contains(\"Default\")); // Not the same as \"default\"\n+        assertTrue(fp.getFetchGroups().contains(\"DescFetchGroup\"));\n+        \n+        FetchConfiguration fetchCfg = ((org.apache.openjpa.persistence.EntityManagerImpl) em)\n+                .getBroker()\n+                .getFetchConfiguration();\n+        assertTrue(fetchCfg.isDefaultPUFetchGroupConfigurationOnly());\n+        \n+        fp.clearFetchGroups(); // OPENJPA-2413: now places \"default\" in the list of active fetch groups.\n+        assertNotNull(fp.getFetchGroups());\n+        assertEquals(1, fp.getFetchGroups().size());\n+        assertTrue(fp.getFetchGroups().contains(\"default\"));\n+        assertFalse(fetchCfg.isDefaultPUFetchGroupConfigurationOnly());\n+        \n+        FGManager mgr = managerSet.iterator().next();\n+        assertNotNull(mgr);\n+        \n+        FGManager findMgr = em.find(FGManager.class, mgr.getId());\n+        em.close();\n+        emf2.close();\n+        \n+        assertEquals(mgr.getId(), findMgr.getId());\n+        assertEquals(mgr.getFirstName(), findMgr.getFirstName());\n+        assertEquals(mgr.getLastName(), findMgr.getLastName());\n+        assertNull(findMgr.getDescription()); // Should be lazy-loaded        \n+    }\n+\n+    /**\n+     * The resetFetchGroups() method restores the fetch plan's active fetch plans to \n+     * the PCtx's configured default.\n+     */\n+    public void testResetFetchGroups001() {\n+        OpenJPAEntityManagerFactory emf2 = createNamedEMF(getPersistenceUnitName(), \n+            FGManager.class, FGDepartment.class, FGEmployee.class, FGAddress.class, \n+            \"openjpa.FetchGroups\", \"Default,DescFetchGroup\");\n+        \n+        OpenJPAEntityManager em = emf2.createEntityManager();\n+        FetchPlan fp = em.getFetchPlan();\n+        assertNotNull(fp);\n+        assertNotNull(fp.getFetchGroups());\n+        assertEquals(2, fp.getFetchGroups().size());\n+        assertTrue(fp.getFetchGroups().contains(\"Default\")); // Not the same as \"default\"\n+        assertTrue(fp.getFetchGroups().contains(\"DescFetchGroup\"));\n+        \n+        FetchConfiguration fetchCfg = ((org.apache.openjpa.persistence.EntityManagerImpl) em)\n+                .getBroker()\n+                .getFetchConfiguration();\n+        assertTrue(fetchCfg.isDefaultPUFetchGroupConfigurationOnly());\n+        \n+        \n+        // OPENJPA-2413: now places \"default\" in the list of active fetch groups.\n+        fp.clearFetchGroups();\n+        assertNotNull(fp.getFetchGroups());\n+        assertEquals(1, fp.getFetchGroups().size());\n+        assertTrue(fp.getFetchGroups().contains(\"default\"));\n+        assertFalse(fetchCfg.isDefaultPUFetchGroupConfigurationOnly());\n+        \n+        // Reset to the PCtx default Fetch Plan\n+        fp.resetFetchGroups();\n+        assertNotNull(fp);\n+        assertNotNull(fp.getFetchGroups());\n+        assertEquals(2, fp.getFetchGroups().size());\n+        assertTrue(fp.getFetchGroups().contains(\"Default\")); // Not the same as \"default\"\n+        assertTrue(fp.getFetchGroups().contains(\"DescFetchGroup\"));\n+        assertTrue(fetchCfg.isDefaultPUFetchGroupConfigurationOnly());\n+        \n+        // Verify that the PCtx default fetch plan was properly restored.  \"default\" should not be enabled\n+        // since it was not listed by openjpa.FetchGroups.\n+        FGManager mgr = managerSet.iterator().next();\n+        assertNotNull(mgr);\n+        \n+        FGManager findMgr = em.find(FGManager.class, mgr.getId());\n+        em.close();\n+        emf2.close();\n+        \n+        assertEquals(mgr.getId(), findMgr.getId()); // Identity is always loaded\n+//        assertNull(findMgr.getFirstName()); // Commented out, for OPENJPA-2420\n+//        assertNull(findMgr.getLastName());\n+        assertEquals(mgr.getDescription(), findMgr.getDescription()); // Should not be lazy-loaded\n+    }\n+    \n+    /**\n+     * Baseline test for Finder Cache\n+     */\n+    public void testFinderCache001() {\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        \n+        FetchPlan fp = em.getFetchPlan();\n+        assertNotNull(fp);\n+        assertNotNull(fp.getFetchGroups());\n+        assertEquals(1, fp.getFetchGroups().size());\n+        assertTrue(fp.getFetchGroups().contains(\"default\"));\n+        \n+        FetchConfiguration fetchCfg = ((org.apache.openjpa.persistence.EntityManagerImpl) em)\n+                .getBroker()\n+                .getFetchConfiguration();\n+        assertTrue(fetchCfg.isDefaultPUFetchGroupConfigurationOnly());\n+        \n+        FGManager mgr = managerSet.iterator().next();\n+        assertNotNull(mgr);\n+        \n+        {\n+            // First find, to prime the Finder Cache\n+            FGManager findMgr = em.find(FGManager.class, mgr.getId());\n+            em.clear();\n+            \n+            assertEquals(mgr.getId(), findMgr.getId());\n+            assertEquals(mgr.getFirstName(), findMgr.getFirstName());\n+            assertEquals(mgr.getLastName(), findMgr.getLastName());\n+            assertNull(findMgr.getDescription()); // Should be lazy-loaded\n+        }\n+        \n+        {\n+            // Second find, should rely on the finder cache to reuse generated SQL.\n+            FGManager findMgr = em.find(FGManager.class, mgr.getId());\n+            em.clear();\n+            \n+            assertEquals(mgr.getId(), findMgr.getId());\n+            assertEquals(mgr.getFirstName(), findMgr.getFirstName());\n+            assertEquals(mgr.getLastName(), findMgr.getLastName());\n+            assertNull(findMgr.getDescription()); // Should be lazy-loaded\n+        }   \n+        \n+        em.close();\n+    }\n+    \n+    /**\n+     * Only SQL generated by the PCtx's default fetch plan should be used by the finder cache,\n+     * as it currently lacks the ability to distinguish fetch plan configuration in its key value.\n+     * The PCtx's default fetch plan is the normal plan not modified by the \"openjpa.FetchGroups\"\n+     * property.\n+     * \n+     * In this variant, a find using the default fetch plan is first executed to prime the finder cache.\n+     * Finds operating under a modified fetch plan should not utilize sql stored in the finder cache.\n+     */\n+    public void testFinderCache002() {\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        \n+        FetchPlan fp = em.getFetchPlan();\n+        assertNotNull(fp);\n+        assertNotNull(fp.getFetchGroups());\n+        assertEquals(1, fp.getFetchGroups().size());\n+        assertTrue(fp.getFetchGroups().contains(\"default\"));\n+        \n+        FetchConfiguration fetchCfg = ((org.apache.openjpa.persistence.EntityManagerImpl) em)\n+                .getBroker()\n+                .getFetchConfiguration();\n+        assertTrue(fetchCfg.isDefaultPUFetchGroupConfigurationOnly());\n+        \n+        FGManager mgr = managerSet.iterator().next();\n+        assertNotNull(mgr);\n+        \n+        {\n+            // First find, to prime the Finder Cache\n+            FGManager findMgr = em.find(FGManager.class, mgr.getId());\n+            em.clear();\n+            \n+            assertEquals(mgr.getId(), findMgr.getId());\n+            assertEquals(mgr.getFirstName(), findMgr.getFirstName());\n+            assertEquals(mgr.getLastName(), findMgr.getLastName());\n+            assertNull(findMgr.getDescription()); // Should be lazy-loaded\n+        }\n+        \n+        {\n+            // Second find, should rely on the finder cache to reuse generated SQL.\n+            FGManager findMgr = em.find(FGManager.class, mgr.getId());\n+            em.clear();\n+            \n+            assertEquals(mgr.getId(), findMgr.getId());\n+            assertEquals(mgr.getFirstName(), findMgr.getFirstName());\n+            assertEquals(mgr.getLastName(), findMgr.getLastName());\n+            assertNull(findMgr.getDescription()); // Should be lazy-loaded\n+        }\n+        \n+        // Add a fetch group to the fetch plan and verify expected behavior\n+        fp.addFetchGroup(\"DescFetchGroup\");\n+        assertNotNull(fp.getFetchGroups());\n+        assertEquals(2, fp.getFetchGroups().size());\n+        assertTrue(fp.getFetchGroups().contains(\"default\"));\n+        assertTrue(fp.getFetchGroups().contains(\"DescFetchGroup\"));\n+        assertFalse(fetchCfg.isDefaultPUFetchGroupConfigurationOnly());\n+        \n+        {\n+            // Second find, should rely on the finder cache to reuse generated SQL.\n+            FGManager findMgr = em.find(FGManager.class, mgr.getId());\n+            em.clear();\n+            \n+            assertEquals(mgr.getId(), findMgr.getId());\n+            assertEquals(mgr.getFirstName(), findMgr.getFirstName());\n+            assertEquals(mgr.getLastName(), findMgr.getLastName());\n+            assertEquals(mgr.getDescription(), findMgr.getDescription()); // Should not be lazy-loaded\n+        }\n+        \n+        // Remove the fetch group previously added, and verify expected behavior\n+        fp.removeFetchGroup(\"DescFetchGroup\");\n+        assertNotNull(fp.getFetchGroups());\n+        assertEquals(1, fp.getFetchGroups().size());\n+        assertTrue(fp.getFetchGroups().contains(\"default\"));\n+        assertFalse(fp.getFetchGroups().contains(\"DescFetchGroup\"));\n+        assertTrue(fetchCfg.isDefaultPUFetchGroupConfigurationOnly());\n+        \n+        {\n+            FGManager findMgr = em.find(FGManager.class, mgr.getId());\n+            em.clear();\n+            \n+            assertEquals(mgr.getId(), findMgr.getId());\n+            assertEquals(mgr.getFirstName(), findMgr.getFirstName());\n+            assertEquals(mgr.getLastName(), findMgr.getLastName());\n+            assertNull(findMgr.getDescription()); // Should be lazy-loaded\n+        }   \n+        \n+        // Add a fetch group to the fetch plan and verify expected behavior\n+        fp.addFetchGroup(\"DescFetchGroup\");\n+        assertNotNull(fp.getFetchGroups());\n+        assertEquals(2, fp.getFetchGroups().size());\n+        assertTrue(fp.getFetchGroups().contains(\"default\"));\n+        assertTrue(fp.getFetchGroups().contains(\"DescFetchGroup\"));\n+        assertFalse(fetchCfg.isDefaultPUFetchGroupConfigurationOnly());\n+        \n+        {\n+            // Second find, should rely on the finder cache to reuse generated SQL.\n+            FGManager findMgr = em.find(FGManager.class, mgr.getId());\n+            em.clear();\n+            \n+            assertEquals(mgr.getId(), findMgr.getId());\n+            assertEquals(mgr.getFirstName(), findMgr.getFirstName());\n+            assertEquals(mgr.getLastName(), findMgr.getLastName());\n+            assertEquals(mgr.getDescription(), findMgr.getDescription()); // Should not be lazy-loaded\n+        }\n+        \n+        // Reset the fetch plan, and verify expected behavior\n+        fp.resetFetchGroups();\n+        assertNotNull(fp.getFetchGroups());\n+        assertEquals(1, fp.getFetchGroups().size());\n+        assertTrue(fp.getFetchGroups().contains(\"default\"));\n+        assertFalse(fp.getFetchGroups().contains(\"DescFetchGroup\"));\n+        assertTrue(fetchCfg.isDefaultPUFetchGroupConfigurationOnly());\n+        {\n+            FGManager findMgr = em.find(FGManager.class, mgr.getId());\n+            em.clear();\n+            \n+            assertEquals(mgr.getId(), findMgr.getId());\n+            assertEquals(mgr.getFirstName(), findMgr.getFirstName());\n+            assertEquals(mgr.getLastName(), findMgr.getLastName());\n+            assertNull(findMgr.getDescription()); // Should be lazy-loaded\n+        }\n+        \n+        // Add a fetch group to the fetch plan and verify expected behavior\n+        fp.addFetchGroup(\"DescFetchGroup\");\n+        assertNotNull(fp.getFetchGroups());\n+        assertEquals(2, fp.getFetchGroups().size());\n+        assertTrue(fp.getFetchGroups().contains(\"default\"));\n+        assertTrue(fp.getFetchGroups().contains(\"DescFetchGroup\"));\n+        assertFalse(fetchCfg.isDefaultPUFetchGroupConfigurationOnly());\n+        \n+        {\n+            // Second find, should rely on the finder cache to reuse generated SQL.\n+            FGManager findMgr = em.find(FGManager.class, mgr.getId());\n+            em.clear();\n+            \n+            assertEquals(mgr.getId(), findMgr.getId());\n+            assertEquals(mgr.getFirstName(), findMgr.getFirstName());\n+            assertEquals(mgr.getLastName(), findMgr.getLastName());\n+            assertEquals(mgr.getDescription(), findMgr.getDescription()); // Should not be lazy-loaded\n+        }\n+        \n+        // Clear all fetch groups, and verify expected behavior\n+        // OPENJPA-2413: now places \"default\" in the list of active fetch groups.\n+        fp.clearFetchGroups();\n+        assertNotNull(fp.getFetchGroups());\n+        assertEquals(1, fp.getFetchGroups().size());\n+        assertTrue(fp.getFetchGroups().contains(\"default\"));\n+        assertFalse(fp.getFetchGroups().contains(\"DescFetchGroup\"));\n+        assertTrue(fetchCfg.isDefaultPUFetchGroupConfigurationOnly());\n+        \n+        {\n+            FGManager findMgr = em.find(FGManager.class, mgr.getId());\n+            em.clear();\n+            \n+            assertEquals(mgr.getId(), findMgr.getId());\n+            assertEquals(mgr.getFirstName(), findMgr.getFirstName());\n+            assertEquals(mgr.getLastName(), findMgr.getLastName());\n+            assertNull(findMgr.getDescription()); // Should be lazy-loaded\n+        }\n+        \n+        em.close();\n+    }\n+    \n+    /**\n+     * Only SQL generated by the PCtx's default fetch plan should be used by the finder cache,\n+     * as it currently lacks the ability to distinguish fetch plan configuration in its key value.\n+     * The PCtx's default fetch plan is the normal plan not modified by the \"openjpa.FetchGroups\"\n+     * property.\n+     * \n+     * In this variant, a find using a modified fetch plan is first executed, which should not be added\n+     * to the finder cache.  \n+     */\n+    public void testFinderCache003() {\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        \n+        FetchPlan fp = em.getFetchPlan();\n+        assertNotNull(fp);\n+        \n+        fp.addFetchGroup(\"DescFetchGroup\");\n+        assertNotNull(fp.getFetchGroups());\n+        assertEquals(2, fp.getFetchGroups().size());\n+        assertTrue(fp.getFetchGroups().contains(\"default\"));\n+        assertTrue(fp.getFetchGroups().contains(\"DescFetchGroup\"));\n+        \n+        FetchConfiguration fetchCfg = ((org.apache.openjpa.persistence.EntityManagerImpl) em)\n+                .getBroker()\n+                .getFetchConfiguration();\n+        assertFalse(fetchCfg.isDefaultPUFetchGroupConfigurationOnly());\n+        \n+        \n+        FGManager mgr = managerSet.iterator().next();\n+        assertNotNull(mgr);\n+        \n+        {\n+            FGManager findMgr = em.find(FGManager.class, mgr.getId());\n+            em.clear();\n+            \n+            assertEquals(mgr.getId(), findMgr.getId());\n+            assertEquals(mgr.getFirstName(), findMgr.getFirstName());\n+            assertEquals(mgr.getLastName(), findMgr.getLastName());\n+            assertEquals(mgr.getDescription(), findMgr.getDescription()); // Should not be lazy-loaded\n+        }\n+        \n+        // Remove the \"DescFetchGroup\" fetch group, and verify expected behavior\n+        fp.removeFetchGroup(\"DescFetchGroup\");\n+        assertNotNull(fp.getFetchGroups());\n+        assertEquals(1, fp.getFetchGroups().size());\n+        assertTrue(fp.getFetchGroups().contains(\"default\"));\n+        assertFalse(fp.getFetchGroups().contains(\"DescFetchGroup\"));\n+        assertTrue(fetchCfg.isDefaultPUFetchGroupConfigurationOnly());\n+        \n+        {\n+            FGManager findMgr = em.find(FGManager.class, mgr.getId());\n+            em.clear();\n+            \n+            assertEquals(mgr.getId(), findMgr.getId());\n+            assertEquals(mgr.getFirstName(), findMgr.getFirstName());\n+            assertEquals(mgr.getLastName(), findMgr.getLastName());\n+            assertNull(findMgr.getDescription()); // Should be lazy-loaded\n+        }   \n+        \n+        // Restore the fetch group to the fetch plan and verify expected behavior\n+        fp.addFetchGroup(\"DescFetchGroup\");\n+        assertNotNull(fp.getFetchGroups());\n+        assertEquals(2, fp.getFetchGroups().size());\n+        assertTrue(fp.getFetchGroups().contains(\"default\"));\n+        assertTrue(fp.getFetchGroups().contains(\"DescFetchGroup\"));\n+        assertFalse(fetchCfg.isDefaultPUFetchGroupConfigurationOnly());\n+        \n+        {\n+            // Second find, should rely on the finder cache to reuse generated SQL.\n+            FGManager findMgr = em.find(FGManager.class, mgr.getId());\n+            em.clear();\n+            \n+            assertEquals(mgr.getId(), findMgr.getId());\n+            assertEquals(mgr.getFirstName(), findMgr.getFirstName());\n+            assertEquals(mgr.getLastName(), findMgr.getLastName());\n+            assertEquals(mgr.getDescription(), findMgr.getDescription()); // Should not be lazy-loaded\n+        }\n+        \n+        // Remove the \"DescFetchGroup\" fetch group, and verify expected behavior\n+        fp.removeFetchGroup(\"DescFetchGroup\");\n+        assertNotNull(fp.getFetchGroups());\n+        assertEquals(1, fp.getFetchGroups().size());\n+        assertTrue(fp.getFetchGroups().contains(\"default\"));\n+        assertFalse(fp.getFetchGroups().contains(\"DescFetchGroup\"));\n+        assertTrue(fetchCfg.isDefaultPUFetchGroupConfigurationOnly());\n+        \n+        {\n+            FGManager findMgr = em.find(FGManager.class, mgr.getId());\n+            em.clear();\n+            \n+            assertEquals(mgr.getId(), findMgr.getId());\n+            assertEquals(mgr.getFirstName(), findMgr.getFirstName());\n+            assertEquals(mgr.getLastName(), findMgr.getLastName());\n+            assertNull(findMgr.getDescription()); // Should be lazy-loaded\n+        } \n+        \n+        // Restore the fetch group to the fetch plan and verify expected behavior\n+        fp.addFetchGroup(\"DescFetchGroup\");\n+        assertNotNull(fp.getFetchGroups());\n+        assertEquals(2, fp.getFetchGroups().size());\n+        assertTrue(fp.getFetchGroups().contains(\"default\"));\n+        assertTrue(fp.getFetchGroups().contains(\"DescFetchGroup\"));\n+        assertFalse(fetchCfg.isDefaultPUFetchGroupConfigurationOnly());\n+        \n+        {\n+            // Second find, should rely on the finder cache to reuse generated SQL.\n+            FGManager findMgr = em.find(FGManager.class, mgr.getId());\n+            em.clear();\n+            \n+            assertEquals(mgr.getId(), findMgr.getId());\n+            assertEquals(mgr.getFirstName(), findMgr.getFirstName());\n+            assertEquals(mgr.getLastName(), findMgr.getLastName());\n+            assertEquals(mgr.getDescription(), findMgr.getDescription()); // Should not be lazy-loaded\n+        }\n+        \n+        // Reset the fetch plan, and verify expected behavior\n+        fp.resetFetchGroups();\n+        assertNotNull(fp.getFetchGroups());\n+        assertEquals(1, fp.getFetchGroups().size());\n+        assertTrue(fp.getFetchGroups().contains(\"default\"));\n+        assertFalse(fp.getFetchGroups().contains(\"DescFetchGroup\"));\n+        assertTrue(fetchCfg.isDefaultPUFetchGroupConfigurationOnly());\n+        \n+        {\n+            FGManager findMgr = em.find(FGManager.class, mgr.getId());\n+            em.clear();\n+            \n+            assertEquals(mgr.getId(), findMgr.getId());\n+            assertEquals(mgr.getFirstName(), findMgr.getFirstName());\n+            assertEquals(mgr.getLastName(), findMgr.getLastName());\n+            assertNull(findMgr.getDescription()); // Should be lazy-loaded\n+        }\n+        \n+        // Restore the fetch group to the fetch plan and verify expected behavior\n+        fp.addFetchGroup(\"DescFetchGroup\");\n+        assertNotNull(fp.getFetchGroups());\n+        assertEquals(2, fp.getFetchGroups().size());\n+        assertTrue(fp.getFetchGroups().contains(\"default\"));\n+        assertTrue(fp.getFetchGroups().contains(\"DescFetchGroup\"));\n+        assertFalse(fetchCfg.isDefaultPUFetchGroupConfigurationOnly());\n+        \n+        {\n+            // Second find, should rely on the finder cache to reuse generated SQL.\n+            FGManager findMgr = em.find(FGManager.class, mgr.getId());\n+            em.clear();\n+            \n+            assertEquals(mgr.getId(), findMgr.getId());\n+            assertEquals(mgr.getFirstName(), findMgr.getFirstName());\n+            assertEquals(mgr.getLastName(), findMgr.getLastName());\n+            assertEquals(mgr.getDescription(), findMgr.getDescription()); // Should not be lazy-loaded\n+        }\n+        \n+        // Clear all fetch groups, and verify expected behavior\n+        // OPENJPA-2413: now places \"default\" in the list of active fetch groups.\n+        fp.clearFetchGroups();\n+        assertNotNull(fp.getFetchGroups());\n+        assertEquals(1, fp.getFetchGroups().size());\n+        assertTrue(fp.getFetchGroups().contains(\"default\"));\n+        assertFalse(fp.getFetchGroups().contains(\"DescFetchGroup\"));\n+        assertTrue(fetchCfg.isDefaultPUFetchGroupConfigurationOnly());\n+        \n+        {\n+            FGManager findMgr = em.find(FGManager.class, mgr.getId());\n+            em.clear();\n+            \n+            assertEquals(mgr.getId(), findMgr.getId());\n+            assertEquals(mgr.getFirstName(), findMgr.getFirstName());\n+            assertEquals(mgr.getLastName(), findMgr.getLastName());\n+            assertNull(findMgr.getDescription()); // Should be lazy-loaded\n+        }\n+        \n+        em.close();\n+    }\n+    \n+    /**\n+     * Only SQL generated by the PCtx's default fetch plan should be used by the finder cache,\n+     * as it currently lacks the ability to distinguish fetch plan configuration in its key value.\n+     * The PCtx's default fetch plan is modified by the \"openjpa.FetchGroups\" property.\n+     *  \n+     */\n+    public void testFinderCache004() {\n+        OpenJPAEntityManagerFactory emf2 = createNamedEMF(getPersistenceUnitName(), \n+            FGManager.class, FGDepartment.class, FGEmployee.class, FGAddress.class, \n+            \"openjpa.FetchGroups\", \"default,DescFetchGroup\");\n+        \n+        OpenJPAEntityManager em = emf2.createEntityManager();\n+        FetchPlan fp = em.getFetchPlan();\n+        assertNotNull(fp);\n+        assertNotNull(fp.getFetchGroups());\n+        assertEquals(2, fp.getFetchGroups().size());\n+        assertTrue(fp.getFetchGroups().contains(\"default\"));\n+        assertTrue(fp.getFetchGroups().contains(\"DescFetchGroup\"));\n+        \n+        FetchConfiguration fetchCfg = ((org.apache.openjpa.persistence.EntityManagerImpl) em)\n+                .getBroker()\n+                .getFetchConfiguration();\n+        assertTrue(fetchCfg.isDefaultPUFetchGroupConfigurationOnly());\n+        \n+        FGManager mgr = managerSet.iterator().next();\n+        assertNotNull(mgr);\n+        \n+        {\n+            // First find, to prime the Finder Cache\n+            FGManager findMgr = em.find(FGManager.class, mgr.getId());\n+            em.clear();\n+            \n+            assertEquals(mgr.getId(), findMgr.getId());\n+            assertEquals(mgr.getFirstName(), findMgr.getFirstName());\n+            assertEquals(mgr.getLastName(), findMgr.getLastName());\n+            assertEquals(mgr.getDescription(), findMgr.getDescription()); // Should not be lazy-loaded\n+        }\n+        \n+        {\n+            // Second find, should rely on the finder cache to reuse generated SQL.\n+            FGManager findMgr = em.find(FGManager.class, mgr.getId());\n+            em.clear();\n+            \n+            assertEquals(mgr.getId(), findMgr.getId());\n+            assertEquals(mgr.getFirstName(), findMgr.getFirstName());\n+            assertEquals(mgr.getLastName(), findMgr.getLastName());\n+            assertEquals(mgr.getDescription(), findMgr.getDescription()); // Should not be lazy-loaded\n+        }\n+        \n+        // Remove a fetch group to the fetch plan and verify expected behavior\n+        fp.removeFetchGroup(\"DescFetchGroup\");\n+        assertNotNull(fp.getFetchGroups());\n+        assertEquals(1, fp.getFetchGroups().size());\n+        assertTrue(fp.getFetchGroups().contains(\"default\"));\n+        assertFalse(fp.getFetchGroups().contains(\"DescFetchGroup\"));\n+        assertFalse(fetchCfg.isDefaultPUFetchGroupConfigurationOnly());\n+        \n+        {\n+            // Second find, should rely on the finder cache to reuse generated SQL.\n+            FGManager findMgr = em.find(FGManager.class, mgr.getId());\n+            em.clear();\n+            \n+            assertEquals(mgr.getId(), findMgr.getId());\n+            assertEquals(mgr.getFirstName(), findMgr.getFirstName());\n+            assertEquals(mgr.getLastName(), findMgr.getLastName());\n+            assertNull(findMgr.getDescription()); // Should be lazy-loaded\n+        }\n+        \n+        // Restore the fetch group previously removed, and verify expected behavior\n+        fp.addFetchGroup(\"DescFetchGroup\");\n+        assertNotNull(fp.getFetchGroups());\n+        assertEquals(2, fp.getFetchGroups().size());\n+        assertTrue(fp.getFetchGroups().contains(\"default\"));\n+        assertTrue(fp.getFetchGroups().contains(\"DescFetchGroup\"));\n+        assertTrue(fetchCfg.isDefaultPUFetchGroupConfigurationOnly());\n+        \n+        {\n+            FGManager findMgr = em.find(FGManager.class, mgr.getId());\n+            em.clear();\n+            \n+            assertEquals(mgr.getId(), findMgr.getId());\n+            assertEquals(mgr.getFirstName(), findMgr.getFirstName());\n+            assertEquals(mgr.getLastName(), findMgr.getLastName());\n+            assertEquals(mgr.getDescription(), findMgr.getDescription()); // Should not be lazy-loaded\n+        }   \n+        \n+        // Remove a fetch group to the fetch plan and verify expected behavior\n+        fp.removeFetchGroup(\"DescFetchGroup\");\n+        assertNotNull(fp.getFetchGroups());\n+        assertEquals(1, fp.getFetchGroups().size());\n+        assertTrue(fp.getFetchGroups().contains(\"default\"));\n+        assertFalse(fp.getFetchGroups().contains(\"DescFetchGroup\"));\n+        assertFalse(fetchCfg.isDefaultPUFetchGroupConfigurationOnly());\n+        \n+        {\n+            // Second find, should rely on the finder cache to reuse generated SQL.\n+            FGManager findMgr = em.find(FGManager.class, mgr.getId());\n+            em.clear();\n+            \n+            assertEquals(mgr.getId(), findMgr.getId());\n+            assertEquals(mgr.getFirstName(), findMgr.getFirstName());\n+            assertEquals(mgr.getLastName(), findMgr.getLastName());\n+            assertNull(findMgr.getDescription()); // Should be lazy-loaded\n+        }\n+        \n+        // Reset the fetch plan, and verify expected behavior\n+        fp.resetFetchGroups();\n+        assertNotNull(fp.getFetchGroups());\n+        assertEquals(2, fp.getFetchGroups().size());\n+        assertTrue(fp.getFetchGroups().contains(\"default\"));\n+        assertTrue(fp.getFetchGroups().contains(\"DescFetchGroup\"));\n+        assertTrue(fetchCfg.isDefaultPUFetchGroupConfigurationOnly());\n+        \n+        {\n+            FGManager findMgr = em.find(FGManager.class, mgr.getId());\n+            em.clear();\n+            \n+            assertEquals(mgr.getId(), findMgr.getId());\n+            assertEquals(mgr.getFirstName(), findMgr.getFirstName());\n+            assertEquals(mgr.getLastName(), findMgr.getLastName());\n+            assertEquals(mgr.getDescription(), findMgr.getDescription()); // Should not be lazy-loaded\n+        }\n+        \n+        // Clear all fetch groups, and verify expected behavior\n+        // OPENJPA-2413: now places \"default\" in the list of active fetch groups.\n+        fp.clearFetchGroups();\n+        assertNotNull(fp.getFetchGroups());\n+        assertEquals(1, fp.getFetchGroups().size());\n+        assertTrue(fp.getFetchGroups().contains(\"default\"));\n+        assertFalse(fp.getFetchGroups().contains(\"DescFetchGroup\"));\n+        assertFalse(fetchCfg.isDefaultPUFetchGroupConfigurationOnly());\n+        \n+        {\n+            FGManager findMgr = em.find(FGManager.class, mgr.getId());\n+            em.clear();\n+            \n+            assertEquals(mgr.getId(), findMgr.getId());\n+            assertEquals(mgr.getFirstName(), findMgr.getFirstName());\n+            assertEquals(mgr.getLastName(), findMgr.getLastName());\n+            assertNull(findMgr.getDescription()); // Should be lazy-loaded\n+        }\n+        \n+        em.close();\n+        emf2.close();\n+    }\n+    \n+    /**\n+     * Only SQL generated by the PCtx's default fetch plan should be used by the finder cache,\n+     * as it currently lacks the ability to distinguish fetch plan configuration in its key value.\n+     * The PCtx's default fetch plan is modified by the \"openjpa.FetchGroups\" property.\n+     * \n+     * In this variant, a find using a modified fetch plan is first executed, which should not be added\n+     * to the finder cache.  \n+     */\n+    public void testFinderCache005() {\n+        OpenJPAEntityManagerFactory emf2 = createNamedEMF(getPersistenceUnitName(), \n+            FGManager.class, FGDepartment.class, FGEmployee.class, FGAddress.class, \n+            \"openjpa.FetchGroups\", \"default,DescFetchGroup\");\n+        \n+        OpenJPAEntityManager em = emf2.createEntityManager();\n+        FetchPlan fp = em.getFetchPlan();\n+        assertNotNull(fp);\n+        assertNotNull(fp.getFetchGroups());\n+        assertEquals(2, fp.getFetchGroups().size());\n+        assertTrue(fp.getFetchGroups().contains(\"default\"));\n+        assertTrue(fp.getFetchGroups().contains(\"DescFetchGroup\"));\n+        \n+        FetchConfiguration fetchCfg = ((org.apache.openjpa.persistence.EntityManagerImpl) em)\n+                .getBroker()\n+                .getFetchConfiguration();\n+        assertTrue(fetchCfg.isDefaultPUFetchGroupConfigurationOnly());\n+        \n+        FGManager mgr = managerSet.iterator().next();\n+        assertNotNull(mgr);\n+        \n+        fp.removeFetchGroup(\"DescFetchGroup\");\n+        assertEquals(1, fp.getFetchGroups().size());\n+        assertTrue(fp.getFetchGroups().contains(\"default\"));\n+        assertFalse(fp.getFetchGroups().contains(\"DescFetchGroup\"));\n+        assertFalse(fetchCfg.isDefaultPUFetchGroupConfigurationOnly());\n+        \n+        {\n+            FGManager findMgr = em.find(FGManager.class, mgr.getId());\n+            em.clear();\n+            \n+            assertEquals(mgr.getId(), findMgr.getId());\n+            assertEquals(mgr.getFirstName(), findMgr.getFirstName());\n+            assertEquals(mgr.getLastName(), findMgr.getLastName());\n+            assertNull(findMgr.getDescription()); // Should be lazy-loaded\n+        }\n+        \n+        // Restore the \"DescFetchGroup\" fetch group, and verify expected behavior\n+        fp.addFetchGroup(\"DescFetchGroup\");\n+        assertNotNull(fp.getFetchGroups());\n+        assertEquals(2, fp.getFetchGroups().size());\n+        assertTrue(fp.getFetchGroups().contains(\"default\"));\n+        assertTrue(fp.getFetchGroups().contains(\"DescFetchGroup\"));\n+        assertTrue(fetchCfg.isDefaultPUFetchGroupConfigurationOnly());\n+        \n+        {\n+            FGManager findMgr = em.find(FGManager.class, mgr.getId());\n+            em.clear();\n+            \n+            assertEquals(mgr.getId(), findMgr.getId());\n+            assertEquals(mgr.getFirstName(), findMgr.getFirstName());\n+            assertEquals(mgr.getLastName(), findMgr.getLastName());\n+            assertEquals(mgr.getDescription(), findMgr.getDescription()); // Should not be lazy-loaded\n+        }   \n+        \n+        // Remove the \"DescFetchGroup\" fetch group, and verify expected behavior\n+        fp.removeFetchGroup(\"DescFetchGroup\");\n+        assertNotNull(fp.getFetchGroups());\n+        assertEquals(1, fp.getFetchGroups().size());\n+        assertTrue(fp.getFetchGroups().contains(\"default\"));\n+        assertFalse(fp.getFetchGroups().contains(\"DescFetchGroup\"));\n+        assertFalse(fetchCfg.isDefaultPUFetchGroupConfigurationOnly());\n+        \n+        {\n+            FGManager findMgr = em.find(FGManager.class, mgr.getId());\n+            em.clear();\n+            \n+            assertEquals(mgr.getId(), findMgr.getId());\n+            assertEquals(mgr.getFirstName(), findMgr.getFirstName());\n+            assertEquals(mgr.getLastName(), findMgr.getLastName());\n+            assertNull(findMgr.getDescription()); // Should be lazy-loaded\n+        } \n+        \n+        // Reset the fetch plan, and verify expected behavior\n+        fp.resetFetchGroups();\n+        assertNotNull(fp.getFetchGroups());\n+        assertEquals(2, fp.getFetchGroups().size());\n+        assertTrue(fp.getFetchGroups().contains(\"default\"));\n+        assertTrue(fp.getFetchGroups().contains(\"DescFetchGroup\"));\n+        assertTrue(fetchCfg.isDefaultPUFetchGroupConfigurationOnly());\n+        \n+        {\n+            FGManager findMgr = em.find(FGManager.class, mgr.getId());\n+            em.clear();\n+            \n+            assertEquals(mgr.getId(), findMgr.getId());\n+            assertEquals(mgr.getFirstName(), findMgr.getFirstName());\n+            assertEquals(mgr.getLastName(), findMgr.getLastName());\n+            assertEquals(mgr.getDescription(), findMgr.getDescription()); // Should not be lazy-loaded\n+        }\n+        \n+        // Remove the \"DescFetchGroup\" fetch group, and verify expected behavior\n+        fp.removeFetchGroup(\"DescFetchGroup\");\n+        assertNotNull(fp.getFetchGroups());\n+        assertEquals(1, fp.getFetchGroups().size());\n+        assertTrue(fp.getFetchGroups().contains(\"default\"));\n+        assertFalse(fp.getFetchGroups().contains(\"DescFetchGroup\"));\n+        assertFalse(fetchCfg.isDefaultPUFetchGroupConfigurationOnly());\n+        \n+        {\n+            FGManager findMgr = em.find(FGManager.class, mgr.getId());\n+            em.clear();\n+            \n+            assertEquals(mgr.getId(), findMgr.getId());\n+            assertEquals(mgr.getFirstName(), findMgr.getFirstName());\n+            assertEquals(mgr.getLastName(), findMgr.getLastName());\n+            assertNull(findMgr.getDescription()); // Should be lazy-loaded\n+        } \n+        \n+        // Clear all fetch groups, and verify expected behavior\n+        // OPENJPA-2413: now places \"default\" in the list of active fetch groups.\n+        fp.clearFetchGroups();\n+        assertNotNull(fp.getFetchGroups());\n+        assertEquals(1, fp.getFetchGroups().size());\n+        assertTrue(fp.getFetchGroups().contains(\"default\"));\n+        assertFalse(fp.getFetchGroups().contains(\"DescFetchGroup\"));\n+        assertFalse(fetchCfg.isDefaultPUFetchGroupConfigurationOnly());\n+        \n+        {\n+            FGManager findMgr = em.find(FGManager.class, mgr.getId());\n+            em.clear();\n+            \n+            assertEquals(mgr.getId(), findMgr.getId());\n+            assertEquals(mgr.getFirstName(), findMgr.getFirstName());\n+            assertEquals(mgr.getLastName(), findMgr.getLastName());\n+            assertNull(findMgr.getDescription()); // Should be lazy-loaded\n+        }\n+        \n+        em.close();\n+        emf2.close();\n+    }\n+    \n+    /**\n+     * Only SQL generated by the PCtx's default fetch plan should be used by the finder cache,\n+     * as it currently lacks the ability to distinguish fetch plan configuration in its key value.\n+     * The PCtx's default fetch plan is the normal plan not modified by the \"openjpa.FetchGroups\"\n+     * property.\n+     * \n+     * In this variant, a find using the default fetch plan is first executed to prime the finder cache.\n+     * Finds operating under a modified fetch plan should not utilize sql stored in the finder cache.\n+     */\n+    public void testFinderCache006() {\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        \n+        FetchPlan fp = em.getFetchPlan();\n+        assertNotNull(fp);\n+        assertNotNull(fp.getFetchGroups());\n+        assertEquals(1, fp.getFetchGroups().size());\n+        assertTrue(fp.getFetchGroups().contains(\"default\"));\n+        \n+        FetchConfiguration fetchCfg = ((org.apache.openjpa.persistence.EntityManagerImpl) em)\n+                .getBroker()\n+                .getFetchConfiguration();\n+        assertTrue(fetchCfg.isDefaultPUFetchGroupConfigurationOnly());\n+        \n+        FGManager mgr = managerSet.iterator().next();\n+        assertNotNull(mgr);\n+        \n+        {\n+            // First find, to prime the Finder Cache\n+            FGManager findMgr = em.find(FGManager.class, mgr.getId());\n+            em.clear();\n+            \n+            assertEquals(mgr.getId(), findMgr.getId());\n+            assertEquals(mgr.getFirstName(), findMgr.getFirstName());\n+            assertEquals(mgr.getLastName(), findMgr.getLastName());\n+            assertNull(findMgr.getDescription()); // Should be lazy-loaded\n+        }\n+        \n+        {\n+            // Second find, should rely on the finder cache to reuse generated SQL.\n+            FGManager findMgr = em.find(FGManager.class, mgr.getId());\n+            em.clear();\n+            \n+            assertEquals(mgr.getId(), findMgr.getId());\n+            assertEquals(mgr.getFirstName(), findMgr.getFirstName());\n+            assertEquals(mgr.getLastName(), findMgr.getLastName());\n+            assertNull(findMgr.getDescription()); // Should be lazy-loaded\n+        }\n+        \n+        // Add a field to the fetch plan and verify expected behavior\n+        fp.addField(empDescriptionFieldStr);\n+        assertNotNull(fp.getFetchGroups());\n+        assertEquals(1, fp.getFetchGroups().size());\n+        assertTrue(fp.getFetchGroups().contains(\"default\"));\n+        assertTrue(fp.getFields().contains(empDescriptionFieldStr));\n+        assertFalse(fetchCfg.isDefaultPUFetchGroupConfigurationOnly());\n+        \n+        {\n+            // Second find, should rely on the finder cache to reuse generated SQL.\n+            FGManager findMgr = em.find(FGManager.class, mgr.getId());\n+            em.clear();\n+            \n+            assertEquals(mgr.getId(), findMgr.getId());\n+            assertEquals(mgr.getFirstName(), findMgr.getFirstName());\n+            assertEquals(mgr.getLastName(), findMgr.getLastName());\n+            assertEquals(mgr.getDescription(), findMgr.getDescription()); // Should not be lazy-loaded\n+        }\n+        \n+        // Remove the field previously added, and verify expected behavior\n+        fp.removeField(empDescriptionFieldStr);\n+        assertNotNull(fp.getFetchGroups());\n+        assertEquals(1, fp.getFetchGroups().size());\n+        assertTrue(fp.getFetchGroups().contains(\"default\"));\n+        assertFalse(fp.getFetchGroups().contains(\"DescFetchGroup\"));\n+        assertTrue(fetchCfg.isDefaultPUFetchGroupConfigurationOnly());\n+        \n+        {\n+            FGManager findMgr = em.find(FGManager.class, mgr.getId());\n+            em.clear();\n+            \n+            assertEquals(mgr.getId(), findMgr.getId());\n+            assertEquals(mgr.getFirstName(), findMgr.getFirstName());\n+            assertEquals(mgr.getLastName(), findMgr.getLastName());\n+            assertNull(findMgr.getDescription()); // Should be lazy-loaded\n+        }   \n+        \n+        // Add a field to the fetch plan and verify expected behavior\n+        fp.addField(empDescriptionFieldStr);\n+        assertNotNull(fp.getFetchGroups());\n+        assertEquals(1, fp.getFetchGroups().size());\n+        assertTrue(fp.getFetchGroups().contains(\"default\"));\n+        assertTrue(fp.getFields().contains(empDescriptionFieldStr));\n+        assertFalse(fetchCfg.isDefaultPUFetchGroupConfigurationOnly());\n+        \n+        {\n+            // Second find, should rely on the finder cache to reuse generated SQL.\n+            FGManager findMgr = em.find(FGManager.class, mgr.getId());\n+            em.clear();\n+            \n+            assertEquals(mgr.getId(), findMgr.getId());\n+            assertEquals(mgr.getFirstName(), findMgr.getFirstName());\n+            assertEquals(mgr.getLastName(), findMgr.getLastName());\n+            assertEquals(mgr.getDescription(), findMgr.getDescription()); // Should not be lazy-loaded\n+        }\n+        \n+        // Reset the fetch groups, and verify expected behavior (note the reset doesn't remove added fields!)\n+        fp.resetFetchGroups();\n+        assertNotNull(fp.getFetchGroups());\n+        assertEquals(1, fp.getFetchGroups().size());\n+        assertTrue(fp.getFetchGroups().contains(\"default\"));\n+        assertTrue(fp.getFields().contains(empDescriptionFieldStr));\n+        assertFalse(fetchCfg.isDefaultPUFetchGroupConfigurationOnly());\n+        {\n+            FGManager findMgr = em.find(FGManager.class, mgr.getId());\n+            em.clear();\n+            \n+            assertEquals(mgr.getId(), findMgr.getId());\n+            assertEquals(mgr.getFirstName(), findMgr.getFirstName());\n+            assertEquals(mgr.getLastName(), findMgr.getLastName());\n+            assertEquals(mgr.getDescription(), findMgr.getDescription()); // Should not be lazy-loaded\n+        }\n+        \n+        // Clear all fetch groups, and verify expected behavior (note the reset doesn't remove added fields!)\n+        // OPENJPA-2413: now places \"default\" in the list of active fetch groups.\n+        fp.clearFetchGroups();\n+        assertNotNull(fp.getFetchGroups());\n+        assertEquals(1, fp.getFetchGroups().size());\n+        assertTrue(fp.getFetchGroups().contains(\"default\"));\n+        assertTrue(fp.getFields().contains(empDescriptionFieldStr));\n+        assertFalse(fetchCfg.isDefaultPUFetchGroupConfigurationOnly());\n+        \n+        {\n+            FGManager findMgr = em.find(FGManager.class, mgr.getId());\n+            em.clear();\n+            \n+            assertEquals(mgr.getId(), findMgr.getId());\n+            assertEquals(mgr.getFirstName(), findMgr.getFirstName());\n+            assertEquals(mgr.getLastName(), findMgr.getLastName());\n+            assertEquals(mgr.getDescription(), findMgr.getDescription()); // Should not be lazy-loaded\n+        }\n+        \n+        // Clear all fields, and verify expected behavior\n+        fp.clearFields();\n+        assertNotNull(fp.getFetchGroups());\n+        assertEquals(1, fp.getFetchGroups().size());\n+        assertTrue(fp.getFetchGroups().contains(\"default\"));\n+        assertFalse(fp.getFields().contains(empDescriptionFieldStr));\n+        assertTrue(fetchCfg.isDefaultPUFetchGroupConfigurationOnly());\n+        \n+        {\n+            FGManager findMgr = em.find(FGManager.class, mgr.getId());\n+            em.clear();\n+            \n+            assertEquals(mgr.getId(), findMgr.getId());\n+            assertEquals(mgr.getFirstName(), findMgr.getFirstName());\n+            assertEquals(mgr.getLastName(), findMgr.getLastName());\n+            assertNull(findMgr.getDescription()); // Should be lazy-loaded\n+        }\n+        \n+        em.close();\n+    }\n+    \n+    /**\n+     * Only SQL generated by the PCtx's default fetch plan should be used by the finder cache,\n+     * as it currently lacks the ability to distinguish fetch plan configuration in its key value.\n+     * The PCtx's default fetch plan is the normal plan not modified by the \"openjpa.FetchGroups\"\n+     * property.\n+     * \n+     * In this variant, a find using a modified fetch plan is first executed, which should not be added\n+     * to the finder cache.  \n+     */\n+    public void testFinderCache007() {\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        \n+        FetchPlan fp = em.getFetchPlan();\n+        assertNotNull(fp);\n+        \n+        fp.addField(empDescriptionFieldStr);\n+        assertNotNull(fp.getFetchGroups());\n+        assertEquals(1, fp.getFetchGroups().size());\n+        assertTrue(fp.getFetchGroups().contains(\"default\"));\n+        assertTrue(fp.getFields().contains(empDescriptionFieldStr));\n+        \n+        FetchConfiguration fetchCfg = ((org.apache.openjpa.persistence.EntityManagerImpl) em)\n+                .getBroker()\n+                .getFetchConfiguration();\n+        assertFalse(fetchCfg.isDefaultPUFetchGroupConfigurationOnly());\n+        \n+        \n+        FGManager mgr = managerSet.iterator().next();\n+        assertNotNull(mgr);\n+        \n+        {\n+            FGManager findMgr = em.find(FGManager.class, mgr.getId());\n+            em.clear();\n+            \n+            assertEquals(mgr.getId(), findMgr.getId());\n+            assertEquals(mgr.getFirstName(), findMgr.getFirstName());\n+            assertEquals(mgr.getLastName(), findMgr.getLastName());\n+            assertEquals(mgr.getDescription(), findMgr.getDescription()); // Should not be lazy-loaded\n+        }\n+        \n+        // Remove the field, and verify expected behavior\n+        fp.removeField(empDescriptionFieldStr);\n+        assertNotNull(fp.getFetchGroups());\n+        assertEquals(1, fp.getFetchGroups().size());\n+        assertTrue(fp.getFetchGroups().contains(\"default\"));\n+        assertFalse(fp.getFetchGroups().contains(\"DescFetchGroup\"));\n+        assertTrue(fetchCfg.isDefaultPUFetchGroupConfigurationOnly());\n+        \n+        {\n+            FGManager findMgr = em.find(FGManager.class, mgr.getId());\n+            em.clear();\n+            \n+            assertEquals(mgr.getId(), findMgr.getId());\n+            assertEquals(mgr.getFirstName(), findMgr.getFirstName());\n+            assertEquals(mgr.getLastName(), findMgr.getLastName());\n+            assertNull(findMgr.getDescription()); // Should be lazy-loaded\n+        }   \n+        \n+        // Restore the field to the fetch plan and verify expected behavior\n+        fp.addField(empDescriptionFieldStr);\n+        assertNotNull(fp.getFetchGroups());\n+        assertEquals(1, fp.getFetchGroups().size());\n+        assertTrue(fp.getFetchGroups().contains(\"default\"));\n+        assertTrue(fp.getFields().contains(empDescriptionFieldStr));\n+        assertFalse(fetchCfg.isDefaultPUFetchGroupConfigurationOnly());\n+        \n+        {\n+            // Second find, should rely on the finder cache to reuse generated SQL.\n+            FGManager findMgr = em.find(FGManager.class, mgr.getId());\n+            em.clear();\n+            \n+            assertEquals(mgr.getId(), findMgr.getId());\n+            assertEquals(mgr.getFirstName(), findMgr.getFirstName());\n+            assertEquals(mgr.getLastName(), findMgr.getLastName());\n+            assertEquals(mgr.getDescription(), findMgr.getDescription()); // Should not be lazy-loaded\n+        }\n+        \n+        // Remove the \"DescFetchGroup\" fetch group, and verify expected behavior\n+        fp.removeField(empDescriptionFieldStr);\n+        assertNotNull(fp.getFetchGroups());\n+        assertEquals(1, fp.getFetchGroups().size());\n+        assertTrue(fp.getFetchGroups().contains(\"default\"));\n+        assertFalse(fp.getFetchGroups().contains(\"DescFetchGroup\"));\n+        assertTrue(fetchCfg.isDefaultPUFetchGroupConfigurationOnly());\n+        \n+        {\n+            FGManager findMgr = em.find(FGManager.class, mgr.getId());\n+            em.clear();\n+            \n+            assertEquals(mgr.getId(), findMgr.getId());\n+            assertEquals(mgr.getFirstName(), findMgr.getFirstName());\n+            assertEquals(mgr.getLastName(), findMgr.getLastName());\n+            assertNull(findMgr.getDescription()); // Should be lazy-loaded\n+        } \n+        \n+        // Restore the field to the fetch plan and verify expected behavior\n+        fp.addField(empDescriptionFieldStr);\n+        assertNotNull(fp.getFetchGroups());\n+        assertEquals(1, fp.getFetchGroups().size());\n+        assertTrue(fp.getFetchGroups().contains(\"default\"));\n+        assertTrue(fp.getFields().contains(empDescriptionFieldStr));\n+        assertFalse(fetchCfg.isDefaultPUFetchGroupConfigurationOnly());\n+        \n+        {\n+            // Second find, should rely on the finder cache to reuse generated SQL.\n+            FGManager findMgr = em.find(FGManager.class, mgr.getId());\n+            em.clear();\n+            \n+            assertEquals(mgr.getId(), findMgr.getId());\n+            assertEquals(mgr.getFirstName(), findMgr.getFirstName());\n+            assertEquals(mgr.getLastName(), findMgr.getLastName());\n+            assertEquals(mgr.getDescription(), findMgr.getDescription()); // Should not be lazy-loaded\n+        }\n+        \n+        // Reset the fetch plan, and verify expected behavior (should not affect fields)\n+        fp.resetFetchGroups();\n+        assertNotNull(fp.getFetchGroups());\n+        assertEquals(1, fp.getFetchGroups().size());\n+        assertTrue(fp.getFetchGroups().contains(\"default\"));\n+        assertFalse(fp.getFetchGroups().contains(\"DescFetchGroup\"));\n+        assertTrue(fp.getFields().contains(empDescriptionFieldStr));\n+        assertFalse(fetchCfg.isDefaultPUFetchGroupConfigurationOnly());\n+        \n+        {\n+            FGManager findMgr = em.find(FGManager.class, mgr.getId());\n+            em.clear();\n+            \n+            assertEquals(mgr.getId(), findMgr.getId());\n+            assertEquals(mgr.getFirstName(), findMgr.getFirstName());\n+            assertEquals(mgr.getLastName(), findMgr.getLastName());\n+            assertEquals(mgr.getDescription(), findMgr.getDescription()); // Should not be lazy-loaded\n+        }\n+        \n+        // Clear all fetch groups, and verify expected behavior (should not affect fields)\n+        // OPENJPA-2413: now places \"default\" in the list of active fetch groups.\n+        fp.clearFetchGroups();\n+        assertNotNull(fp.getFetchGroups());\n+        assertEquals(1, fp.getFetchGroups().size());\n+        assertTrue(fp.getFetchGroups().contains(\"default\"));\n+        assertTrue(fp.getFields().contains(empDescriptionFieldStr));\n+        assertFalse(fetchCfg.isDefaultPUFetchGroupConfigurationOnly());\n+        \n+        {\n+            FGManager findMgr = em.find(FGManager.class, mgr.getId());\n+            em.clear();\n+            \n+            assertEquals(mgr.getId(), findMgr.getId());\n+            assertEquals(mgr.getFirstName(), findMgr.getFirstName());\n+            assertEquals(mgr.getLastName(), findMgr.getLastName());\n+            assertEquals(mgr.getDescription(), findMgr.getDescription()); // Should not be lazy-loaded\n+        }\n+        \n+        // Clear all fields, and verify expected behavior\n+        fp.clearFields();\n+        assertNotNull(fp.getFetchGroups());\n+        assertEquals(1, fp.getFetchGroups().size());\n+        assertTrue(fp.getFetchGroups().contains(\"default\"));\n+        assertFalse(fp.getFields().contains(empDescriptionFieldStr));\n+        assertTrue(fetchCfg.isDefaultPUFetchGroupConfigurationOnly());\n+        \n+        {\n+            FGManager findMgr = em.find(FGManager.class, mgr.getId());\n+            em.clear();\n+            \n+            assertEquals(mgr.getId(), findMgr.getId());\n+            assertEquals(mgr.getFirstName(), findMgr.getFirstName());\n+            assertEquals(mgr.getLastName(), findMgr.getLastName());\n+            assertNull(findMgr.getDescription()); // Should be lazy-loaded\n+        }\n+        \n+        em.close();\n+    }\n+    \n+    private void createEmployeeData() {\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        \n+        employeeSet.clear();\n+        managerSet.clear();\n+        \n+        int empIdIndex = 1;\n+        \n+        em.getTransaction().begin();\n+        \n+        // Create Managers\n+        for (int i = 1; i < mgrCount; i++) {\n+            int id = empIdIndex++;\n+            \n+            FGAddress addr = createAddress(id);\n+            em.persist(addr);\n+            \n+            FGDepartment dept = createDepartment(id);\n+            em.persist(dept);\n+            \n+            FGManager mgr = new FGManager();\n+            mgr.setId(id);           \n+            mgr.setFirstName(\"First-\" + id);\n+            mgr.setLastName(\"Last-\" + id);\n+            mgr.setMData(\"MData-\" + id);\n+            mgr.setRating(\"Rating-\" + id);\n+            mgr.setDescription(\"Manager-\" + id);\n+            mgr.setAddress(addr);\n+            mgr.setDept(dept);\n+            \n+            em.persist(mgr);\n+            \n+            managerSet.add(mgr);\n+        }\n+        \n+        // Create Employees\n+        for (int i = 1; i < empCount; i++) {\n+            int id = empIdIndex++;\n+            int mgrId = (id % empPerMgr) + 1;\n+            \n+            FGAddress addr = createAddress(id);\n+            em.persist(addr);\n+            \n+            FGDepartment dept = createDepartment(id);\n+            em.persist(dept);\n+            \n+            FGEmployee emp = new FGEmployee();\n+            emp.setId(id);           \n+            emp.setFirstName(\"First-\" + id);\n+            emp.setLastName(\"Last-\" + id);\n+            emp.setRating(\"Rating-\" + id);\n+            emp.setDescription(\"Employee-\" + id);\n+            emp.setAddress(addr);\n+            emp.setDept(dept);\n+            \n+            em.persist(emp);\n+            \n+            employeeSet.add(emp);\n+        }\n+        \n+        em.getTransaction().commit();\n+        \n+        em.close();\n+    }\n+    \n+    private FGAddress createAddress(int id) {\n+        FGAddress addr = new FGAddress();\n+        addr.setId(id);\n+        addr.setStreet(\"Street-\" + id);\n+        addr.setCity(\"City-\" + id);\n+        addr.setState(\"State-\" + id);\n+        addr.setZip(id);\n+        \n+        return addr;\n+    }\n+   \n+    private FGDepartment createDepartment(int id) {\n+        FGDepartment dept = new FGDepartment();\n+        dept.setId(id);\n+        dept.setName(\"Department-\" + id);\n+        \n+        return dept;\n+    }\n+}"}]}

