{"sha":"ee9210be92ff0279aeed80460ead1f2a279c6f6e","node_id":"MDY6Q29tbWl0MjA2MzY0OmVlOTIxMGJlOTJmZjAyNzlhZWVkODA0NjBlYWQxZjJhMjc5YzZmNmU=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-09-14T14:29:34Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-09-14T14:29:34Z"},"message":"OPENJPA-1201 [Mapped by] field not set when contained in superclass.  Patch and testcases contributed by David Minor.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@814662 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0e5be69f7d8644bdb1962148a2d219972667a35b","url":"https://api.github.com/repos/apache/openjpa/git/trees/0e5be69f7d8644bdb1962148a2d219972667a35b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ee9210be92ff0279aeed80460ead1f2a279c6f6e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ee9210be92ff0279aeed80460ead1f2a279c6f6e","html_url":"https://github.com/apache/openjpa/commit/ee9210be92ff0279aeed80460ead1f2a279c6f6e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ee9210be92ff0279aeed80460ead1f2a279c6f6e/comments","author":null,"committer":null,"parents":[{"sha":"b889ccb83462af0a6524c22a0a6e2e065a46d124","url":"https://api.github.com/repos/apache/openjpa/commits/b889ccb83462af0a6524c22a0a6e2e065a46d124","html_url":"https://github.com/apache/openjpa/commit/b889ccb83462af0a6524c22a0a6e2e065a46d124"}],"stats":{"total":198,"additions":197,"deletions":1},"files":[{"sha":"c068ca153837150e29e6413b40544d99d1fb85ea","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/ee9210be92ff0279aeed80460ead1f2a279c6f6e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/ee9210be92ff0279aeed80460ead1f2a279c6f6e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java?ref=ee9210be92ff0279aeed80460ead1f2a279c6f6e","patch":"@@ -453,7 +453,7 @@ private void setInverseRelation(OpenJPAStateManager owner,\n     protected void setMappedBy(OpenJPAStateManager sm,\n         FieldMapping mappedByFieldMapping, Object mappedByObject) {\n         ClassMapping mapping = (ClassMapping) sm.getMetaData();\n-        FieldMapping[] fms = mapping.getDeclaredFieldMappings();\n+        FieldMapping[] fms = mapping.getFieldMappings();\n         for (int i = 0; i < fms.length; i++) {\n             if (fms[i] == mappedByFieldMapping) {\n                 sm.storeObject(fms[i].getIndex(), mappedByObject);"},{"sha":"24740cb37306d0b5a2c45fecb15fe551ddf7ed56","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/InheritanceHierarchyAbstract.java","status":"added","additions":76,"deletions":0,"changes":76,"blob_url":"https://github.com/apache/openjpa/blob/ee9210be92ff0279aeed80460ead1f2a279c6f6e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/InheritanceHierarchyAbstract.java","raw_url":"https://github.com/apache/openjpa/raw/ee9210be92ff0279aeed80460ead1f2a279c6f6e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/InheritanceHierarchyAbstract.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/InheritanceHierarchyAbstract.java?ref=ee9210be92ff0279aeed80460ead1f2a279c6f6e","patch":"@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import java.io.Serializable;\n+import java.util.Set;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.DiscriminatorColumn;\n+import javax.persistence.DiscriminatorType;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.Inheritance;\n+import javax.persistence.InheritanceType;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToMany;\n+\n+\n+@Entity\n+@Inheritance(strategy = InheritanceType.JOINED)\n+@DiscriminatorColumn(discriminatorType=DiscriminatorType.STRING)\n+public abstract class InheritanceHierarchyAbstract implements Serializable {\n+\n+    @Id\n+    @GeneratedValue\n+    private long id;\n+   \n+    @ManyToOne\n+    @JoinColumn\n+    private InheritanceHierarchyAbstract parent;\n+\n+\t@OneToMany(mappedBy = \"parent\", cascade = CascadeType.ALL, \n+\t\t\tfetch=FetchType.EAGER)\n+    private Set<InheritanceHierarchyAbstract> children;\n+\n+\n+    public long getId() { \n+        return id; \n+    }\n+\n+\tpublic Set<InheritanceHierarchyAbstract> getChildren() {\n+\t\treturn this.children;\n+\t}\n+\n+\tpublic void setChildren(Set<InheritanceHierarchyAbstract> children) {\n+\t\tthis.children = children;\n+\t}\n+\n+\tpublic InheritanceHierarchyAbstract getParent() {\n+\t\treturn this.parent;\n+\t}\n+\n+\tpublic void setParent(InheritanceHierarchyAbstract parent) {\n+\t\tthis.parent = parent;\n+\t}\n+\n+}"},{"sha":"cd616e9af7c8acd1ba0108d146836e71249a21d0","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/InheritanceHierarchyConcrete.java","status":"added","additions":54,"deletions":0,"changes":54,"blob_url":"https://github.com/apache/openjpa/blob/ee9210be92ff0279aeed80460ead1f2a279c6f6e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/InheritanceHierarchyConcrete.java","raw_url":"https://github.com/apache/openjpa/raw/ee9210be92ff0279aeed80460ead1f2a279c6f6e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/InheritanceHierarchyConcrete.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/InheritanceHierarchyConcrete.java?ref=ee9210be92ff0279aeed80460ead1f2a279c6f6e","patch":"@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import java.io.Serializable;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.CascadeType;\n+import javax.persistence.DiscriminatorValue;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.Inheritance;\n+import javax.persistence.InheritanceType;\n+import javax.persistence.MapKey;\n+import javax.persistence.OneToMany;\n+\n+\n+@Entity\n+@Inheritance(strategy = InheritanceType.JOINED)\n+@DiscriminatorValue(\"concrete\")\n+public class InheritanceHierarchyConcrete extends InheritanceHierarchyAbstract implements Serializable {\n+\n+\t@Basic\n+\tprivate int value;\n+\n+\tpublic int getValue() {\n+\t\treturn this.value;\n+\t}\n+\n+\tpublic void setValue(int value) {\n+\t\tthis.value = value;\n+\t}\n+\n+}"},{"sha":"ebf7f8ea01695cb477eb4b7ac3cb55cece6201d8","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestJoinedInheritanceHierarchy.java","status":"added","additions":66,"deletions":0,"changes":66,"blob_url":"https://github.com/apache/openjpa/blob/ee9210be92ff0279aeed80460ead1f2a279c6f6e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestJoinedInheritanceHierarchy.java","raw_url":"https://github.com/apache/openjpa/raw/ee9210be92ff0279aeed80460ead1f2a279c6f6e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestJoinedInheritanceHierarchy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestJoinedInheritanceHierarchy.java?ref=ee9210be92ff0279aeed80460ead1f2a279c6f6e","patch":"@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+public class TestJoinedInheritanceHierarchy\n+    extends SingleEMFTestCase {\n+\n+    public void setUp() {\n+    \tsuper.setUp(CLEAR_TABLES, InheritanceHierarchyConcrete.class, \n+    \t\t\tInheritanceHierarchyAbstract.class);\n+    }\n+\n+    public void testInverseRelationNotNull() {\n+    \t\n+    \tInheritanceHierarchyConcrete parent = new InheritanceHierarchyConcrete();\n+    \tInheritanceHierarchyConcrete child = new InheritanceHierarchyConcrete();\n+    \t\n+    \tparent.setValue(42);\n+    \tchild.setValue(21);\n+    \t\n+    \tSet<InheritanceHierarchyAbstract> children = new HashSet<InheritanceHierarchyAbstract>();\n+    \tchildren.add(child);\n+    \tparent.setChildren(children);\n+    \tchild.setParent(parent);\n+    \t\n+    \tOpenJPAEntityManager em = emf.createEntityManager();\n+    \tem.getTransaction().begin();\n+    \tem.persist(parent);\n+    \tem.getTransaction().commit();\n+    \tem.close();\n+    \t\n+    \tem = emf.createEntityManager();\n+    \tparent = (InheritanceHierarchyConcrete)em.createQuery(\n+    \t\t\t\"SELECT p FROM InheritanceHierarchyConcrete p WHERE p.id=\" + parent.getId()\n+    \t\t\t).getResultList().get(0);\n+    \tem.close();\n+    \t\n+    \tfor(InheritanceHierarchyAbstract childNode : parent.getChildren()) {\n+    \t\tassertNotNull(\"Parent should not be null\", childNode.getParent());\n+    \t}\n+    }\n+}"}]}

