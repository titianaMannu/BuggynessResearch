{"sha":"ef54e75107ffb98f144f86937a292330a11fb823","node_id":"MDY6Q29tbWl0MjA2MzY0OmVmNTRlNzUxMDdmZmI5OGYxNDRmODY5MzdhMjkyMzMwYTExZmI4MjM=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-09-24T20:26:04Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-09-24T20:26:04Z"},"message":"OPENJPA-1253: support bi-directional one-to-many map using join table strategy\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@818616 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4b01d78552e41c6ce690187c02970a0d3c3074a9","url":"https://api.github.com/repos/apache/openjpa/git/trees/4b01d78552e41c6ce690187c02970a0d3c3074a9"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ef54e75107ffb98f144f86937a292330a11fb823","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ef54e75107ffb98f144f86937a292330a11fb823","html_url":"https://github.com/apache/openjpa/commit/ef54e75107ffb98f144f86937a292330a11fb823","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ef54e75107ffb98f144f86937a292330a11fb823/comments","author":null,"committer":null,"parents":[{"sha":"fc69f929e924622928c899ce7c65e1de85ce4840","url":"https://api.github.com/repos/apache/openjpa/commits/fc69f929e924622928c899ce7c65e1de85ce4840","html_url":"https://github.com/apache/openjpa/commit/fc69f929e924622928c899ce7c65e1de85ce4840"}],"stats":{"total":234,"additions":222,"deletions":12},"files":[{"sha":"c89ff95e87925ff87f6bcf55b0bd48452eb41d89","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerRelationMapTableFieldStrategy.java","status":"modified","additions":7,"deletions":5,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/ef54e75107ffb98f144f86937a292330a11fb823/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerRelationMapTableFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/ef54e75107ffb98f144f86937a292330a11fb823/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerRelationMapTableFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerRelationMapTableFieldStrategy.java?ref=ef54e75107ffb98f144f86937a292330a11fb823","patch":"@@ -145,10 +145,12 @@ public void map(boolean adapt) {\n             throw new MetaDataException(_loc.get(\"not-relation\", val));\n         \n         FieldMapping mapped = field.getMappedByMapping();\n-        if ((isUni1ToMFK() && !isBi1ToMJT()) || mapped != null) { \n+        if ((isUni1ToMFK() && !isBi1ToMJT()) || \n+            (!isUni1ToMFK() && !isBi1ToMJT() && mapped != null)) { \n             // map to the owner table\n             handleMappedByForeignKey(adapt);\n-        } else if ((!isUni1ToMFK() && isBi1ToMJT()) || mapped == null){ \n+        } else if ((!isUni1ToMFK() && isBi1ToMJT()) || \n+            (!isUni1ToMFK() && !isBi1ToMJT() && mapped == null)){ \n             // map to a separate table\n             field.mapJoin(adapt, true);\n             if (val.getTypeMapping().isMapped()) {\n@@ -185,7 +187,7 @@ private void insert(OpenJPAStateManager sm, JDBCStore store, RowManager rm,\n         if (map == null || map.isEmpty())\n             return;\n         \n-        if (field.getMappedBy() != null)\n+        if (!isBi1ToMJT() && field.getMappedBy() != null)\n             return;\n \n         Row row = null;\n@@ -237,7 +239,7 @@ public void setKey(Object keyObj, JDBCStore store, Row row)\n \n     public void update(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\n         throws SQLException {\n-        if (field.getMappedBy() != null)\n+        if (field.getMappedBy() != null && !isBi1ToMJT())\n             return;\n \n         Map map = (Map) sm.fetchObject(field.getIndex());\n@@ -420,7 +422,7 @@ public Object toKeyDataStoreValue(Object val, JDBCStore store) {\n     \n     public void delete(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\n         throws SQLException {\n-        if (field.getMappedBy() != null || isUni1ToMFK())\n+        if ((field.getMappedBy() != null && !isBi1ToMJT()) || isUni1ToMFK())\n             return;\n         super.delete(sm, store, rm);\n     }"},{"sha":"ceabab1634d4b3a8e61fc0e920d5852279f07ed8","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MapTableFieldStrategy.java","status":"modified","additions":8,"deletions":1,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/ef54e75107ffb98f144f86937a292330a11fb823/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MapTableFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/ef54e75107ffb98f144f86937a292330a11fb823/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MapTableFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MapTableFieldStrategy.java?ref=ef54e75107ffb98f144f86937a292330a11fb823","patch":"@@ -78,7 +78,7 @@ private void isNonDefaultMapping() {\n         FieldMapping mapped = field.getMappedByMapping();\n         if (isNonDefaultMappingAllowed() && \n             field.getAssociationType() == FieldMetaData.ONE_TO_MANY &&\n-            field.getValueInfo().getColumns().size() > 0) {\n+            hasJoinColumnOrJoinTable()) {\n             if (mapped != null) {\n                 _isBi1ToMJT = true;\n                 _isUni1ToMFK = false;\n@@ -92,6 +92,13 @@ private void isNonDefaultMapping() {\n         }\n     }\n     \n+    private boolean hasJoinColumnOrJoinTable() {\n+        boolean hasJoinColumn = (field.getValueInfo().getColumns().size() > 0 ? true : false);\n+        boolean hasJoinTable = (field.getMappingInfo().getTableName() != null ? true : false);\n+        return hasJoinColumn || hasJoinTable;\n+        \n+    }\n+    \n     protected boolean isBi1ToMJT() {\n         if (_isBi1ToMJT == null)\n             isNonDefaultMapping();"},{"sha":"a30ab148e0272250a4e03233067ae10314e50811","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","status":"modified","additions":4,"deletions":6,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/ef54e75107ffb98f144f86937a292330a11fb823/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/ef54e75107ffb98f144f86937a292330a11fb823/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java?ref=ef54e75107ffb98f144f86937a292330a11fb823","patch":"@@ -279,9 +279,8 @@ public void insert(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\n             updateInverse(sm, rel, store, rm);\n         else {\n             Row row = field.getRow(sm, store, rm, Row.ACTION_INSERT);\n-            if (row != null) {\n-                if (_biOneToManyJoinTable == -1)\n-                    field.setForeignKey(row, rel);\n+            if (row != null && _biOneToManyJoinTable == -1) {\n+                field.setForeignKey(row, rel);\n                 // this is for bi-directional maps, the key and value of the \n                 // map are stored in the table of the mapped-by entity  \n                 setMapKey(sm, rel, store, row);\n@@ -366,9 +365,8 @@ public void update(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\n                     field.isBidirectionalJoinTableMappingNonOwner()) ?\n                     Row.ACTION_DELETE : Row.ACTION_UPDATE;\n             Row row = field.getRow(sm, store, rm, action);\n-            if (row != null) {\n-                if (_biOneToManyJoinTable == -1)\n-                    field.setForeignKey(row, rel);\n+            if (row != null && _biOneToManyJoinTable == -1) {\n+                field.setForeignKey(row, rel);\n                 // this is for bi-directional maps, the key and value of the \n                 // map are stored in the table of the mapped-by entity  \n                 setMapKey(sm, rel, store, row);"},{"sha":"b4e8f2b56b28d554994e21aa45217d67d7e55e02","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/Bi_1ToM_Map_JT.java","status":"added","additions":84,"deletions":0,"changes":84,"blob_url":"https://github.com/apache/openjpa/blob/ef54e75107ffb98f144f86937a292330a11fb823/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/Bi_1ToM_Map_JT.java","raw_url":"https://github.com/apache/openjpa/raw/ef54e75107ffb98f144f86937a292330a11fb823/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/Bi_1ToM_Map_JT.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/Bi_1ToM_Map_JT.java?ref=ef54e75107ffb98f144f86937a292330a11fb823","patch":"@@ -0,0 +1,84 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.compat;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.persistence.*;\n+\n+\n+\n+@Entity\n+public class Bi_1ToM_Map_JT {\n+\n+    @Id\n+    @GeneratedValue\n+    private long id;\n+\n+    private String name;\n+\n+    @OneToMany(mappedBy=\"bi1mjt\", fetch=FetchType.EAGER)\n+    @JoinTable(\n+        name=\"Bi1M_Map_JT_C\",\n+        joinColumns=\n+          @JoinColumn(name=\"C_ID\", referencedColumnName=\"ID\"),\n+          inverseJoinColumns=\n+          @JoinColumn(name=\"B_ID\", referencedColumnName=\"ID\")\n+    )\n+    private Map<String, EntityC_B1M_Map_JT> entityCs = null;\n+    \n+    public long getId() { \n+        return id; \n+    }\n+\n+    public String getName() { \n+        return name; \n+    }\n+\n+    public void setName(String name) { \n+        this.name = name; \n+    }\n+\n+    public Map<String, EntityC_B1M_Map_JT> getEntityCs() { \n+        return entityCs; \n+    }\n+\n+    public void setEntityCs(Map<String, EntityC_B1M_Map_JT> entityCs) { \n+        this.entityCs = entityCs; \n+    }\n+\n+    public int hashCode() {\n+        return name.hashCode();\n+    }\n+    \n+    public boolean equals(Object o) {\n+        if (!(o instanceof Bi_1ToM_Map_JT)) return false;\n+        Bi_1ToM_Map_JT b = (Bi_1ToM_Map_JT)o;\n+        if (!b.name.equals(name)) return false;\n+        if (b.entityCs.size() != entityCs.size()) return false;\n+        Collection<EntityC_B1M_Map_JT> coll = b.entityCs.values();\n+        for (EntityC_B1M_Map_JT c : coll) {\n+            if (!b.entityCs.get(c.getName()).equals(entityCs.get(c.getName())))\n+                return false;\n+        }\n+        return true;\n+    }\n+}"},{"sha":"70a12a785777bb27b46a63a7887713660812f6b3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/EntityC_B1M_Map_JT.java","status":"added","additions":68,"deletions":0,"changes":68,"blob_url":"https://github.com/apache/openjpa/blob/ef54e75107ffb98f144f86937a292330a11fb823/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/EntityC_B1M_Map_JT.java","raw_url":"https://github.com/apache/openjpa/raw/ef54e75107ffb98f144f86937a292330a11fb823/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/EntityC_B1M_Map_JT.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/EntityC_B1M_Map_JT.java?ref=ef54e75107ffb98f144f86937a292330a11fb823","patch":"@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.compat;\n+\n+import java.util.List;\n+\n+import javax.persistence.*;\n+\n+@Entity\n+public class EntityC_B1M_Map_JT {\n+\n+    @Id\n+    @GeneratedValue\n+    private long id;\n+\n+    private String name;\n+    \n+    @ManyToOne\n+    Bi_1ToM_Map_JT bi1mjt;\n+\n+    public long getId() { \n+        return id; \n+    }\n+\n+    public String getName() { \n+        return name; \n+    }\n+\n+    public void setName(String name) { \n+        this.name = name; \n+    }\n+\n+    public void setBi1mjt(Bi_1ToM_Map_JT bi1mjt) {\n+        this.bi1mjt = bi1mjt;\n+    }\n+    \n+    public Bi_1ToM_Map_JT getBi1mjt() {\n+        return bi1mjt;\n+    }\n+    \n+    public int hashCode() {\n+        return name.hashCode() + (int)id;\n+    }\n+    \n+    public boolean equals(Object o) {\n+        if (!(o instanceof EntityC_B1M_Map_JT)) return false;\n+        EntityC_B1M_Map_JT c = (EntityC_B1M_Map_JT)o;\n+        if (!c.name.equals(name)) return false;\n+        if (c.id != id) return false;\n+        return true;\n+    }\n+}"},{"sha":"f58e038105febe03cf8ac35f2df33eea30e10dbd","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/TestSpecCompatibilityOptions.java","status":"modified","additions":51,"deletions":0,"changes":51,"blob_url":"https://github.com/apache/openjpa/blob/ef54e75107ffb98f144f86937a292330a11fb823/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/TestSpecCompatibilityOptions.java","raw_url":"https://github.com/apache/openjpa/raw/ef54e75107ffb98f144f86937a292330a11fb823/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/TestSpecCompatibilityOptions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/TestSpecCompatibilityOptions.java?ref=ef54e75107ffb98f144f86937a292330a11fb823","patch":"@@ -396,6 +396,8 @@ public void testOneToManyMapRelation() {\n         List<Class<?>> types = new ArrayList<Class<?>>();\n         types.add(EntityC_U1M_Map_FK.class);\n         types.add(Uni_1ToM_Map_FK.class);\n+        types.add(EntityC_B1M_Map_JT.class);\n+        types.add(Bi_1ToM_Map_JT.class);\n         OpenJPAEntityManagerFactorySPI emf = createEMF2_0(types);\n         EntityManager em = emf.createEntityManager();\n         \n@@ -405,6 +407,7 @@ public void testOneToManyMapRelation() {\n             em.getTransaction().commit();\n             assertSQLFragnments(sql, \"CREATE TABLE EntityC_U1M_Map_FK\", \"Uni1MFK_ID\", \"KEY0\");\n             crudUni1MMapFK(em);\n+            crudBi1MMapJT(em);\n         } catch (Exception e) {\n             e.printStackTrace();\n             fail(\"OneToMany mapping failed with exception message: \" + e.getMessage());\n@@ -474,6 +477,54 @@ public void crudUni1MMapFK(EntityManager em) {\n         em.getTransaction().commit();\n     }\n     \n+    public void crudBi1MMapJT(EntityManager em) {\n+        Bi_1ToM_Map_JT b = new Bi_1ToM_Map_JT();\n+        b.setName(\"bi1mfk\");\n+        Map<String, EntityC_B1M_Map_JT> cs = new HashMap<String, EntityC_B1M_Map_JT>();\n+        EntityC_B1M_Map_JT c = new EntityC_B1M_Map_JT();\n+        c.setName(\"c\");\n+        c.setBi1mjt(b);\n+        cs.put(c.getName(), c);\n+        b.setEntityCs(cs);\n+        em.persist(b);\n+        em.persist(c);\n+        em.getTransaction().begin();\n+        em.getTransaction().commit();\n+\n+        //update\n+        em.getTransaction().begin();\n+        cs = b.getEntityCs();\n+        b.setName(\"newName\");\n+        EntityC_B1M_Map_JT c1 = new EntityC_B1M_Map_JT();\n+        c1.setName(\"c1\");\n+        cs.put(c1.getName(), c1);\n+        c1.setBi1mjt(b);\n+        em.persist(c1);\n+        em.getTransaction().commit();\n+        em.clear();\n+        \n+        //query\n+        Query q = em.createQuery(\"SELECT u FROM Bi_1ToM_Map_JT u\");\n+        Bi_1ToM_Map_JT b1 = (Bi_1ToM_Map_JT)q.getSingleResult();\n+        assertEquals(b, b1);\n+        em.clear();\n+\n+        // query the owner\n+        q = em.createQuery(\"SELECT c FROM EntityC_B1M_Map_JT c\");\n+        List<EntityC_B1M_Map_JT> cs1 = q.getResultList();\n+        System.err.println(\"cs1 size = \" + cs1.size());\n+        em.clear();\n+        \n+        //find\n+        long id = b1.getId();\n+        Bi_1ToM_Map_JT b2 = em.find(Bi_1ToM_Map_JT.class, id);\n+        assertEquals(b, b2);\n+        \n+        //remove\n+        em.getTransaction().begin();\n+        em.remove(b2);\n+        em.getTransaction().commit();\n+    }\n     \n     private OpenJPAEntityManagerFactorySPI createEMF2_0(List<Class<?>> types) {\n         Map<Object,Object> map = new HashMap<Object,Object>();"}]}

