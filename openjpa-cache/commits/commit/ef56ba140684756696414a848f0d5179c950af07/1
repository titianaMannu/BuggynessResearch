{"sha":"ef56ba140684756696414a848f0d5179c950af07","node_id":"MDY6Q29tbWl0MjA2MzY0OmVmNTZiYTE0MDY4NDc1NjY5NjQxNGE4NDhmMGQ1MTc5Yzk1MGFmMDc=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-22T00:06:16Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-22T00:06:16Z"},"message":"OPENJPA-293. Better validation that the persistent types to subclass have properly been found.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.0@568337 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c8a71f62c2865731b44df6de9bd36e42c930e819","url":"https://api.github.com/repos/apache/openjpa/git/trees/c8a71f62c2865731b44df6de9bd36e42c930e819"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ef56ba140684756696414a848f0d5179c950af07","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ef56ba140684756696414a848f0d5179c950af07","html_url":"https://github.com/apache/openjpa/commit/ef56ba140684756696414a848f0d5179c950af07","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ef56ba140684756696414a848f0d5179c950af07/comments","author":null,"committer":null,"parents":[{"sha":"dc3615c6133a80fb22c433d473999f72f6e94def","url":"https://api.github.com/repos/apache/openjpa/commits/dc3615c6133a80fb22c433d473999f72f6e94def","html_url":"https://github.com/apache/openjpa/commit/dc3615c6133a80fb22c433d473999f72f6e94def"}],"stats":{"total":151,"additions":149,"deletions":2},"files":[{"sha":"c0c8ae33a541f1233a60af72d8a25bfff054b377","filename":"openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/ManagedClassSubclasser.java","status":"modified","additions":46,"deletions":0,"changes":46,"blob_url":"https://github.com/apache/openjpa/blob/ef56ba140684756696414a848f0d5179c950af07/openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/ManagedClassSubclasser.java","raw_url":"https://github.com/apache/openjpa/raw/ef56ba140684756696414a848f0d5179c950af07/openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/ManagedClassSubclasser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/ManagedClassSubclasser.java?ref=ef56ba140684756696414a848f0d5179c950af07","patch":"@@ -23,9 +23,11 @@\n import java.util.Collection;\r\n import java.util.Collections;\r\n import java.util.HashMap;\r\n+import java.util.HashSet;\r\n import java.util.Iterator;\r\n import java.util.List;\r\n import java.util.Map;\r\n+import java.util.Set;\r\n \r\n import org.apache.openjpa.conf.OpenJPAConfiguration;\r\n import org.apache.openjpa.lib.log.Log;\r\n@@ -36,6 +38,7 @@\n import org.apache.openjpa.meta.FieldMetaData;\r\n import org.apache.openjpa.meta.JavaTypes;\r\n import org.apache.openjpa.util.GeneratedClasses;\r\n+import org.apache.openjpa.util.ImplHelper;\r\n import org.apache.openjpa.util.InternalException;\r\n import org.apache.openjpa.util.UserException;\r\n import serp.bytecode.BCClass;\r\n@@ -101,6 +104,7 @@\n         final Map<Class, byte[]> map = new HashMap<Class, byte[]>();\r\n         final List subs = new ArrayList(classes.size());\r\n         final List ints = new ArrayList(classes.size());\r\n+        Set<Class> unspecified = null;\r\n         for (Iterator iter = classes.iterator(); iter.hasNext(); ) {\r\n             final Class cls = (Class) iter.next();\r\n             final PCEnhancer enhancer = new PCEnhancer(conf, cls);\r\n@@ -123,6 +127,9 @@ public void write(BCClass bc) throws IOException {\n             // reconfiguration at the end of this method.\r\n             configureMetaData(enhancer.getMetaData(), conf, redefine, false);\r\n \r\n+            unspecified = collectRelatedUnspecifiedTypes(enhancer.getMetaData(),\r\n+                classes, unspecified);\r\n+\r\n             enhancer.run();\r\n             try {\r\n                 enhancer.record();\r\n@@ -132,6 +139,10 @@ public void write(BCClass bc) throws IOException {\n             }\r\n         }\r\n \r\n+        if (unspecified != null && !unspecified.isEmpty())\r\n+            throw new UserException(_loc.get(\"unspecified-unenhanced-types\",\r\n+                classes, unspecified));\r\n+\r\n         ClassRedefiner.redefineClasses(conf, map);\r\n         for (Class cls : map.keySet()) {\r\n             setIntercepting(conf, envLoader, cls);\r\n@@ -145,6 +156,41 @@ public void write(BCClass bc) throws IOException {\n         return subs;\r\n     }\r\n \r\n+    private static Set<Class> collectRelatedUnspecifiedTypes(ClassMetaData meta,\r\n+        Collection<? extends Class> classes, Set<Class> unspecified) {\r\n+        unspecified = collectUnspecifiedType(meta.getPCSuperclass(), classes,\r\n+            unspecified);\r\n+\r\n+        for (FieldMetaData fmd : meta.getFields()) {\r\n+            if (fmd.isTransient())\r\n+                continue;\r\n+            if (fmd.isTypePC())\r\n+                unspecified = collectUnspecifiedType(fmd.getType(), classes,\r\n+                    unspecified);\r\n+            if (fmd.getElement() != null && fmd.getElement().isTypePC())\r\n+                unspecified = collectUnspecifiedType(fmd.getElement().getType(),\r\n+                    classes, unspecified);\r\n+            if (fmd.getKey() != null && fmd.getKey().isTypePC())\r\n+                unspecified = collectUnspecifiedType(fmd.getKey().getType(),\r\n+                    classes, unspecified);\r\n+            if (fmd.getValue() != null && fmd.getValue().isTypePC())\r\n+                unspecified = collectUnspecifiedType(fmd.getValue().getType(),\r\n+                    classes, unspecified);\r\n+        }\r\n+        return unspecified;\r\n+    }\r\n+\r\n+    private static Set<Class> collectUnspecifiedType(Class cls,\r\n+        Collection<? extends Class> classes, Set<Class> unspecified) {\r\n+        if (cls != null && !classes.contains(cls)\r\n+            && !ImplHelper.isManagedType(null, cls)) {\r\n+            if (unspecified == null)\r\n+                unspecified = new HashSet<Class>();\r\n+            unspecified.add(cls);\r\n+        }\r\n+        return unspecified;\r\n+    }\r\n+\r\n     private static void configureMetaData(OpenJPAConfiguration conf,\r\n         ClassLoader envLoader, Class cls, boolean redefineAvailable) {\r\n         ClassMetaData meta = conf.getMetaDataRepositoryInstance()\r"},{"sha":"29c14065749203d58934e2098f9742dd56d111b5","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/enhance/localizer.properties","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/ef56ba140684756696414a848f0d5179c950af07/openjpa-kernel/src/main/resources/org/apache/openjpa/enhance/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/ef56ba140684756696414a848f0d5179c950af07/openjpa-kernel/src/main/resources/org/apache/openjpa/enhance/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/enhance/localizer.properties?ref=ef56ba140684756696414a848f0d5179c950af07","patch":"@@ -194,4 +194,7 @@ subclasser-fetch-group-override: The field {1} in type {0} is configured to be \\\n     lazily loaded, but lazy loading is not available for classes that use field\\\n     access when not running the OpenJPA enhancer or when dynamic class \\\n     redefinition is not available.\n-no-accessor: Could not find method called {0} in type {1}.\n\\ No newline at end of file\n+no-accessor: Could not find method called {0} in type {1}.\n+unspecified-unenhanced-types: One or more of the types in {0} have relations \\\n+    to other unenhanced types that were not specified. These unspecified types \\\n+    are: {1}\n\\ No newline at end of file"},{"sha":"eeb5a46293d16543a44aadcdebb17e67ae48c1aa","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestRelationToUnlistedClass.java","status":"added","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/apache/openjpa/blob/ef56ba140684756696414a848f0d5179c950af07/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestRelationToUnlistedClass.java","raw_url":"https://github.com/apache/openjpa/raw/ef56ba140684756696414a848f0d5179c950af07/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestRelationToUnlistedClass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestRelationToUnlistedClass.java?ref=ef56ba140684756696414a848f0d5179c950af07","patch":"@@ -0,0 +1,38 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.enhance;\r\n+\r\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n+\r\n+public class TestRelationToUnlistedClass\r\n+    extends SingleEMFTestCase {\r\n+\r\n+    public void setUp() {\r\n+        setUp(UnenhancedUnlistedReferer.class, CLEAR_TABLES);\r\n+    }\r\n+\r\n+    public void testRelationToUnlistedClass() {\r\n+        try {\r\n+            emf.createEntityManager().close();\r\n+            fail(\"should not be able to initialize system\");\r\n+        } catch (Exception e) {\r\n+            assertTrue(e.getMessage().startsWith(\"One or more of the types\"));\r\n+        }\r\n+    }\r\n+}\n\\ No newline at end of file"},{"sha":"5ae5e07d06b57aafe1e511d71a7f0f1513bd66f7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedUnlistedClass.java","status":"added","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/apache/openjpa/blob/ef56ba140684756696414a848f0d5179c950af07/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedUnlistedClass.java","raw_url":"https://github.com/apache/openjpa/raw/ef56ba140684756696414a848f0d5179c950af07/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedUnlistedClass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedUnlistedClass.java?ref=ef56ba140684756696414a848f0d5179c950af07","patch":"@@ -0,0 +1,28 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.enhance;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+\r\n+@Entity\r\n+public class UnenhancedUnlistedClass {\r\n+    @Id\r\n+    private int id;\r\n+}\r"},{"sha":"e520fe5ecec3b231e9dc5ff7f7e6cce402847dd8","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedUnlistedReferer.java","status":"added","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/apache/openjpa/blob/ef56ba140684756696414a848f0d5179c950af07/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedUnlistedReferer.java","raw_url":"https://github.com/apache/openjpa/raw/ef56ba140684756696414a848f0d5179c950af07/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedUnlistedReferer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedUnlistedReferer.java?ref=ef56ba140684756696414a848f0d5179c950af07","patch":"@@ -0,0 +1,32 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.enhance;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.OneToOne;\r\n+\r\n+@Entity\r\n+public class UnenhancedUnlistedReferer {\r\n+    @Id\r\n+    private int id;\r\n+\r\n+    @OneToOne\r\n+    private UnenhancedUnlistedClass other;\r\n+}\r"},{"sha":"08cdc9e906885610944c9eb0f9b9aa8709509fb0","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SingleEMTestCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/ef56ba140684756696414a848f0d5179c950af07/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SingleEMTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/ef56ba140684756696414a848f0d5179c950af07/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SingleEMTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SingleEMTestCase.java?ref=ef56ba140684756696414a848f0d5179c950af07","patch":"@@ -48,7 +48,7 @@ public void setUp(Object... props) {\n     }\n \n     @Override\n-    public void tearDown() {\n+    public void tearDown() throws Exception {\n         rollback();\n         close();\n         super.tearDown();"}]}

