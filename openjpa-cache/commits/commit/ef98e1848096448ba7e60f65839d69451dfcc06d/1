{"sha":"ef98e1848096448ba7e60f65839d69451dfcc06d","node_id":"MDY6Q29tbWl0MjA2MzY0OmVmOThlMTg0ODA5NjQ0OGJhN2U2MGY2NTgzOWQ2OTQ1MWRmY2MwNmQ=","commit":{"author":{"name":"Romain Manni-Bucau","email":"rmannibucau@gmail.com","date":"2019-07-29T15:40:09Z"},"committer":{"name":"Romain Manni-Bucau","email":"rmannibucau@gmail.com","date":"2019-07-29T15:40:09Z"},"message":"OPENJPA-2743 skip AttributeConverter when loading the Metamodel and preparing the broker to avoid to fail if it was registered in persistent classes (allowed in JPA to bypass scanning but enable converters)","tree":{"sha":"cc280d3e2d1853afdd4b55aab7dad2ab33d477b2","url":"https://api.github.com/repos/apache/openjpa/git/trees/cc280d3e2d1853afdd4b55aab7dad2ab33d477b2"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ef98e1848096448ba7e60f65839d69451dfcc06d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ef98e1848096448ba7e60f65839d69451dfcc06d","html_url":"https://github.com/apache/openjpa/commit/ef98e1848096448ba7e60f65839d69451dfcc06d","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ef98e1848096448ba7e60f65839d69451dfcc06d/comments","author":{"login":"rmannibucau","id":1249546,"node_id":"MDQ6VXNlcjEyNDk1NDY=","avatar_url":"https://avatars.githubusercontent.com/u/1249546?v=4","gravatar_id":"","url":"https://api.github.com/users/rmannibucau","html_url":"https://github.com/rmannibucau","followers_url":"https://api.github.com/users/rmannibucau/followers","following_url":"https://api.github.com/users/rmannibucau/following{/other_user}","gists_url":"https://api.github.com/users/rmannibucau/gists{/gist_id}","starred_url":"https://api.github.com/users/rmannibucau/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rmannibucau/subscriptions","organizations_url":"https://api.github.com/users/rmannibucau/orgs","repos_url":"https://api.github.com/users/rmannibucau/repos","events_url":"https://api.github.com/users/rmannibucau/events{/privacy}","received_events_url":"https://api.github.com/users/rmannibucau/received_events","type":"User","site_admin":false},"committer":{"login":"rmannibucau","id":1249546,"node_id":"MDQ6VXNlcjEyNDk1NDY=","avatar_url":"https://avatars.githubusercontent.com/u/1249546?v=4","gravatar_id":"","url":"https://api.github.com/users/rmannibucau","html_url":"https://github.com/rmannibucau","followers_url":"https://api.github.com/users/rmannibucau/followers","following_url":"https://api.github.com/users/rmannibucau/following{/other_user}","gists_url":"https://api.github.com/users/rmannibucau/gists{/gist_id}","starred_url":"https://api.github.com/users/rmannibucau/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rmannibucau/subscriptions","organizations_url":"https://api.github.com/users/rmannibucau/orgs","repos_url":"https://api.github.com/users/rmannibucau/repos","events_url":"https://api.github.com/users/rmannibucau/events{/privacy}","received_events_url":"https://api.github.com/users/rmannibucau/received_events","type":"User","site_admin":false},"parents":[{"sha":"4cd805eed8570f9a7ff1da7a89b0c631b465f97e","url":"https://api.github.com/repos/apache/openjpa/commits/4cd805eed8570f9a7ff1da7a89b0c631b465f97e","html_url":"https://github.com/apache/openjpa/commit/4cd805eed8570f9a7ff1da7a89b0c631b465f97e"}],"stats":{"total":222,"additions":220,"deletions":2},"files":[{"sha":"1e368de9663a2ed1cd1930c4df5ce773350a8f8c","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingTool.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/ef98e1848096448ba7e60f65839d69451dfcc06d/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingTool.java","raw_url":"https://github.com/apache/openjpa/raw/ef98e1848096448ba7e60f65839d69451dfcc06d/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingTool.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingTool.java?ref=ef98e1848096448ba7e60f65839d69451dfcc06d","patch":"@@ -748,7 +748,7 @@ private static ClassMapping getMapping(MappingRepository repos, Class<?> cls,\n         ClassMapping mapping = repos.getMapping(cls, null, false);\n         if (mapping != null)\n             return mapping;\n-        if (!validate || cls.isInterface()\n+        if (!validate || cls.isInterface() || repos.skipMetadata(cls)\n             || repos.getPersistenceAware(cls) != null)\n             return null;\n         throw new MetaDataException(_loc.get(\"no-meta\", cls, cls.getClassLoader()));"},{"sha":"703b487fe1e11511e78373cf8bea8c4b4b7b2576","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfiguration.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/ef98e1848096448ba7e60f65839d69451dfcc06d/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/ef98e1848096448ba7e60f65839d69451dfcc06d/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfiguration.java?ref=ef98e1848096448ba7e60f65839d69451dfcc06d","patch":"@@ -2009,5 +2009,9 @@\n     String getDropScriptTarget();\n \n     String getLoadScriptSource();\n+\n+    Collection<Class<?>> getTypesWithoutEnhancement();\n+\n+    void setTypesWithoutEnhancement(Collection<Class<?>> value);\n }\n "},{"sha":"6727e14f2f27ef6b063260e7b7634472e4b5ffd8","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","status":"modified","additions":16,"deletions":0,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/ef98e1848096448ba7e60f65839d69451dfcc06d/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/ef98e1848096448ba7e60f65839d69451dfcc06d/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java?ref=ef98e1848096448ba7e60f65839d69451dfcc06d","patch":"@@ -18,6 +18,8 @@\n  */\n package org.apache.openjpa.conf;\n \n+import static java.util.Arrays.asList;\n+\n import java.util.Collection;\n import java.util.HashSet;\n import java.util.Map;\n@@ -54,6 +56,7 @@\n import org.apache.openjpa.kernel.exps.AggregateListener;\n import org.apache.openjpa.kernel.exps.FilterListener;\n import org.apache.openjpa.lib.conf.BooleanValue;\n+import org.apache.openjpa.lib.conf.ClassListValue;\n import org.apache.openjpa.lib.conf.ConfigurationImpl;\n import org.apache.openjpa.lib.conf.Configurations;\n import org.apache.openjpa.lib.conf.IntValue;\n@@ -178,6 +181,7 @@\n     public BooleanValue postLoadOnMerge;\n     public BooleanValue optimizeIdCopy;\n     public BooleanValue useTcclForSelectNew;\n+    public ClassListValue typesWithoutEnhancement;\n \n     // JPA Properties\n     public IntValue databaseAction;\n@@ -672,6 +676,8 @@ public OpenJPAConfigurationImpl(boolean derivations, boolean loadGlobals) {\n         useTcclForSelectNew.setDefault(\"false\");\n         useTcclForSelectNew.set(false);\n \n+        typesWithoutEnhancement = new ClassListValue();\n+\n         // initialize supported options that some runtimes may not support\n         supportedOptions.add(OPTION_NONTRANS_READ);\n         supportedOptions.add(OPTION_OPTIMISTIC);\n@@ -2278,5 +2284,15 @@ public void setUseTCCLinSelectNew(Boolean useTcclForSelectNew) {\n             setUseTCCLinSelectNew(useTcclForSelectNew.booleanValue());\n         }\n     }\n+\n+    @Override\n+    public Collection<Class<?>> getTypesWithoutEnhancement() {\n+        return asList(typesWithoutEnhancement.get());\n+    }\n+\n+    @Override\n+    public void setTypesWithoutEnhancement(Collection<Class<?>> value) {\n+        typesWithoutEnhancement.set(value.toArray(new Class[value.size()]));\n+    }\n }\n "},{"sha":"73672b73142c339d09d9e0ab31e16c84b1daef1c","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/ef98e1848096448ba7e60f65839d69451dfcc06d/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","raw_url":"https://github.com/apache/openjpa/raw/ef98e1848096448ba7e60f65839d69451dfcc06d/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java?ref=ef98e1848096448ba7e60f65839d69451dfcc06d","patch":"@@ -530,6 +530,10 @@ public void setBytecodeWriter(BytecodeWriter writer) {\n     public int run() {\n         Class<?> type = _managedType.getType();\n         try {\n+            // if enum, skip, no need of any meta\n+            if (_pc.isEnum())\n+                return ENHANCE_NONE;\n+\n             // if managed interface, skip\n             if (_pc.isInterface())\n                 return ENHANCE_INTERFACE;"},{"sha":"c1c0ca7b3daa45fce802b3235f44f918574a1822","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","status":"modified","additions":21,"deletions":1,"changes":22,"blob_url":"https://github.com/apache/openjpa/blob/ef98e1848096448ba7e60f65839d69451dfcc06d/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","raw_url":"https://github.com/apache/openjpa/raw/ef98e1848096448ba7e60f65839d69451dfcc06d/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java?ref=ef98e1848096448ba7e60f65839d69451dfcc06d","patch":"@@ -167,6 +167,9 @@\n     // A boolean used to decide whether to filter Class<?> objects submitted by the PCRegistry listener system\n     private boolean _filterRegisteredClasses = false;\n \n+    // we should skip these types for the enhancement\n+    private Collection<Class<?>> _typesWithoutEnhancement;\n+\n     /**\n      * Default constructor. Configure via {@link Configurable}.\n      */\n@@ -992,7 +995,7 @@ protected ValueMetaData newValueMetaData(FieldMetaData owner) {\n \n     /**\n      * Create an {@link Order} for the given field and declaration. This method delegates to\n-     * {@link #newRelatedFieldOrder} and {@link #newValueFieldOrder} by default.\n+     * {@link #newRelatedFieldOrder} and {@link #newValueOrder(FieldMetaData, boolean)} by default.\n      */\n     protected Order newOrder(FieldMetaData owner, String name, boolean asc) {\n         // paths can start with (or equal) '#element'\n@@ -1298,6 +1301,16 @@ public NonPersistentMetaData getPersistenceAware(Class<?> cls) {\n         return _pawares.get(cls);\n     }\n \n+    public boolean skipMetadata(final Class<?> cls) {\n+        if (cls == null || cls.isEnum()) {\n+            return true;\n+        }\n+        if (_typesWithoutEnhancement == null) {\n+            return false;\n+        }\n+        return _typesWithoutEnhancement.stream().anyMatch(it -> it.isAssignableFrom(cls));\n+    }\n+\n     /**\n      * Gets all the metadatas for persistence-aware classes\n      *\n@@ -1539,6 +1552,9 @@ private void clearInternal(){\n                     setMetaModel(cls);\n                     continue;\n                 }\n+                if (skipMetadata(cls)) {\n+                    continue;\n+                }\n                 if (cls != null) {\n                     classes.add(cls);\n \n@@ -1922,6 +1938,10 @@ public void setConfiguration(Configuration conf) {\n         _conf = (OpenJPAConfiguration) conf;\n         _log = _conf.getLog(OpenJPAConfiguration.LOG_METADATA);\n         _filterRegisteredClasses = _conf.getCompatibilityInstance().getFilterPCRegistryClasses();\n+        _typesWithoutEnhancement = _conf.getTypesWithoutEnhancement();\n+        if (_typesWithoutEnhancement == null || _typesWithoutEnhancement.isEmpty()) {\n+            _typesWithoutEnhancement = null;\n+        }\n     }\n \n     @Override"},{"sha":"76a5b0ba9316d315a46c62b2ae54c39357882527","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ClassListValue.java","status":"added","additions":80,"deletions":0,"changes":80,"blob_url":"https://github.com/apache/openjpa/blob/ef98e1848096448ba7e60f65839d69451dfcc06d/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ClassListValue.java","raw_url":"https://github.com/apache/openjpa/raw/ef98e1848096448ba7e60f65839d69451dfcc06d/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ClassListValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ClassListValue.java?ref=ef98e1848096448ba7e60f65839d69451dfcc06d","patch":"@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.lib.conf;\n+\n+import static java.util.Optional.ofNullable;\n+\n+import java.security.AccessController;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n+import org.apache.openjpa.lib.util.StringUtil;\n+\n+public class ClassListValue extends Value {\n+    private Class<?>[] _values = new Class<?>[0];\n+\n+    public void set(final Class<?>[] values) {\n+        assertChangeable();\n+        if (values != null) {\n+            _values = values;\n+        }\n+        valueChanged();\n+    }\n+\n+    @Override\n+    public Class<?>[] get() {\n+        return _values;\n+    }\n+\n+    @Override\n+    public Class<Class[]> getValueType() {\n+        return Class[].class;\n+    }\n+\n+    @Override\n+    protected String getInternalString() {\n+        return Stream.of(_values).map(Class::getName).collect(Collectors.joining(\",\"));\n+    }\n+\n+    @Override\n+    protected void setInternalString(String val) {\n+        String[] vals = StringUtil.split(val, \",\", 0);\n+        if (vals != null) {\n+            for (int i = 0; i < vals.length; i++)\n+                vals[i] = vals[i].trim();\n+        }\n+\n+        final ClassLoader loader = AccessController.doPrivileged(J2DoPrivHelper.getContextClassLoaderAction());\n+        set(ofNullable(StringUtil.split(val, \",\", 0))\n+                .map(it -> Stream.of(it).map(v -> {\n+                    try {\n+                        return loader.loadClass(v.trim());\n+                    } catch (final ClassNotFoundException e) {\n+                        throw new IllegalStateException(e);\n+                    }\n+                }).toArray(Class<?>[]::new))\n+                .orElse(null));\n+    }\n+\n+    @Override\n+    protected void setInternalObject(Object obj) {\n+        set((Class<?>[]) obj);\n+    }\n+}"},{"sha":"922da25c08d124dc1d68f671e4ab019c7ab1fcf1","filename":"openjpa-persistence-jdbc/src/main/ant/enhancer.xml","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/ef98e1848096448ba7e60f65839d69451dfcc06d/openjpa-persistence-jdbc/src/main/ant/enhancer.xml","raw_url":"https://github.com/apache/openjpa/raw/ef98e1848096448ba7e60f65839d69451dfcc06d/openjpa-persistence-jdbc/src/main/ant/enhancer.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/ant/enhancer.xml?ref=ef98e1848096448ba7e60f65839d69451dfcc06d","patch":"@@ -74,6 +74,7 @@\n         <fileset id=\"enhance.path.ref\"\n                  dir=\"${project.build.testOutputDirectory}\">\n             <include name=\"**/*.class\" />\n+            <include name=\"org/apache/openjpa/persistence/meta/TestMetamodelWithEnum$Main.class\" />\n             <exclude name=\"**/inheritance/serializable/*.class\" />\n             <exclude name=\"**/detach/serializable/*.class\" />\n             <exclude name=\"**/proxy/entities/*.class\" />"},{"sha":"25704887ede90242b8adb914bcca2e88197ff05f","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCPersistenceProductDerivation.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/ef98e1848096448ba7e60f65839d69451dfcc06d/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCPersistenceProductDerivation.java","raw_url":"https://github.com/apache/openjpa/raw/ef98e1848096448ba7e60f65839d69451dfcc06d/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCPersistenceProductDerivation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCPersistenceProductDerivation.java?ref=ef98e1848096448ba7e60f65839d69451dfcc06d","patch":"@@ -18,12 +18,16 @@\n  */\n package org.apache.openjpa.persistence.jdbc;\n \n+import static java.util.Collections.singleton;\n+\n import java.security.AccessController;\n import java.util.Collections;\n import java.util.HashSet;\n import java.util.Map;\n import java.util.Set;\n \n+import javax.persistence.AttributeConverter;\n+\n import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.conf.OpenJPAProductDerivation;\n import org.apache.openjpa.conf.Specification;\n@@ -96,6 +100,8 @@ public boolean beforeConfigurationLoad(Configuration c) {\n \n         conf.lockManagerPlugin.setAlias(\"mixed\", \"org.apache.openjpa.jdbc.kernel.MixedLockManager\");\n \n+        conf.typesWithoutEnhancement.set(new Class<?>[]{ AttributeConverter.class });\n+\n         return true;\n     }\n "},{"sha":"3ccc97b0747f00b87d05d58b31380efc9b40deab","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestMetamodelWithEnum.java","status":"added","additions":83,"deletions":0,"changes":83,"blob_url":"https://github.com/apache/openjpa/blob/ef98e1848096448ba7e60f65839d69451dfcc06d/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestMetamodelWithEnum.java","raw_url":"https://github.com/apache/openjpa/raw/ef98e1848096448ba7e60f65839d69451dfcc06d/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestMetamodelWithEnum.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestMetamodelWithEnum.java?ref=ef98e1848096448ba7e60f65839d69451dfcc06d","patch":"@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.openjpa.persistence.meta;\n+\n+import javax.persistence.AttributeConverter;\n+import javax.persistence.Converter;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+public class TestMetamodelWithEnum extends SingleEMFTestCase {\n+\n+    @Override\n+    public void setUp() {\n+        super.setUp(\n+                \"openjpa.RuntimeUnenhancedClasses\", \"unsupported\",\n+                \"openjpa.DynamicEnhancementAgent\", \"false\",\n+                Main.class, AttributeConverterImpl.class);\n+    }\n+\n+    public void testEnsureEnumDontFail() { // OPENJPA-2743\n+        assertNotNull(emf.getMetamodel());\n+    }\n+\n+    @Converter\n+    public static class AttributeConverterImpl implements AttributeConverter<MyEnum, String> {\n+        @Override\n+        public String convertToDatabaseColumn(final MyEnum myEnum) {\n+            return myEnum.name();\n+        }\n+\n+        @Override\n+        public MyEnum convertToEntityAttribute(final String s) {\n+            return MyEnum.valueOf(s);\n+        }\n+    }\n+\n+    @Entity\n+    public static class Main {\n+        @Id\n+        private String id;\n+\n+        private MyEnum enumColumn;\n+\n+        public String getId() {\n+            return id;\n+        }\n+\n+        public void setId(final String id) {\n+            this.id = id;\n+        }\n+\n+        public MyEnum getEnumColumn() {\n+            return enumColumn;\n+        }\n+\n+        public void setEnumColumn(final MyEnum enumColumn) {\n+            this.enumColumn = enumColumn;\n+        }\n+    }\n+\n+    public enum MyEnum {\n+        A\n+    }\n+}"},{"sha":"593eb71e3d5e220fd39b57c7ec2309f161d8eb1c","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/MetamodelImpl.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/ef98e1848096448ba7e60f65839d69451dfcc06d/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/MetamodelImpl.java","raw_url":"https://github.com/apache/openjpa/raw/ef98e1848096448ba7e60f65839d69451dfcc06d/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/MetamodelImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/MetamodelImpl.java?ref=ef98e1848096448ba7e60f65839d69451dfcc06d","patch":"@@ -83,6 +83,10 @@ public MetamodelImpl(MetaDataRepository repos) {\n         this.repos = repos;\n         Collection<Class<?>> classes = repos.loadPersistentTypes(true, null);\n         for (Class<?> cls : classes) {\n+            if (repos.skipMetadata(cls)) { // AttributeConverters, enums etc....\n+                continue;\n+            }\n+\n         \tClassMetaData meta = repos.getMetaData(cls, null, true);\n             PersistenceType type = getPersistenceType(meta);\n             switch (type) {"}]}

