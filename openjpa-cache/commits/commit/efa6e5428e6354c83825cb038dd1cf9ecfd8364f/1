{"sha":"efa6e5428e6354c83825cb038dd1cf9ecfd8364f","node_id":"MDY6Q29tbWl0MjA2MzY0OmVmYTZlNTQyOGU2MzU0YzgzODI1Y2IwMzhkZDFjZjllY2ZkODM2NGY=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-03-15T21:08:16Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-03-15T21:08:16Z"},"message":"OPENJPA-1575: Tests to detect parameterized fields in a query expression to exclude queries from cache that use parameters for externalized fields. \n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@923442 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"787a49cce157d0a680f119e959c158dec8604d90","url":"https://api.github.com/repos/apache/openjpa/git/trees/787a49cce157d0a680f119e959c158dec8604d90"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/efa6e5428e6354c83825cb038dd1cf9ecfd8364f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/efa6e5428e6354c83825cb038dd1cf9ecfd8364f","html_url":"https://github.com/apache/openjpa/commit/efa6e5428e6354c83825cb038dd1cf9ecfd8364f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/efa6e5428e6354c83825cb038dd1cf9ecfd8364f/comments","author":null,"committer":null,"parents":[{"sha":"d1b0d0fd6d376a381a0e7b6fd0f87b5222a86c69","url":"https://api.github.com/repos/apache/openjpa/commits/d1b0d0fd6d376a381a0e7b6fd0f87b5222a86c69","html_url":"https://github.com/apache/openjpa/commit/d1b0d0fd6d376a381a0e7b6fd0f87b5222a86c69"}],"stats":{"total":157,"additions":155,"deletions":2},"files":[{"sha":"046558b06d0bc6349b90f0de0b300a8d9cdda322","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/Book.java","status":"modified","additions":14,"deletions":0,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/efa6e5428e6354c83825cb038dd1cf9ecfd8364f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/Book.java","raw_url":"https://github.com/apache/openjpa/raw/efa6e5428e6354c83825cb038dd1cf9ecfd8364f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/Book.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/Book.java?ref=efa6e5428e6354c83825cb038dd1cf9ecfd8364f","patch":"@@ -26,6 +26,8 @@\n import javax.persistence.FetchType;\n import javax.persistence.ManyToMany;\n \n+import org.apache.openjpa.persistence.ExternalValues;\n+\n @Entity\n @DiscriminatorValue(\"BOOK\")\n public class Book extends Merchandise {\n@@ -34,8 +36,12 @@\n     @ManyToMany(fetch=FetchType.EAGER)\n     private Set<Author> authors;\n \n+    @ExternalValues({\"SMALL=S\", \"MEDIUM=M\", \"LARGE=L\"})\n+    private String token;\n+    \n     public Book() {\n         this(\"?\");\n+        token = \"MEDIUM\";\n     }\n     \n     public Book(String title) {\n@@ -62,4 +68,12 @@ public void addAuthor(Author a) {\n             a.addBook(this);\n         }\n     }\n+    \n+    public String getToken() {\n+        return token;\n+    }\n+    \n+    public void setToken(String t) {\n+        token = t;\n+    }\n }"},{"sha":"478c5b9a1aed1cc82adca4503beb561d77400b1c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestExternalizedParameter.java","status":"added","additions":111,"deletions":0,"changes":111,"blob_url":"https://github.com/apache/openjpa/blob/efa6e5428e6354c83825cb038dd1cf9ecfd8364f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestExternalizedParameter.java","raw_url":"https://github.com/apache/openjpa/raw/efa6e5428e6354c83825cb038dd1cf9ecfd8364f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestExternalizedParameter.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestExternalizedParameter.java?ref=efa6e5428e6354c83825cb038dd1cf9ecfd8364f","patch":"@@ -0,0 +1,111 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.sqlcache;\n+\n+import java.util.List;\n+import java.util.Properties;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+\n+import junit.framework.TestCase;\n+\n+import org.apache.openjpa.kernel.StoreQuery;\n+import org.apache.openjpa.kernel.exps.QueryExpressions;\n+import org.apache.openjpa.lib.rop.ResultList;\n+import org.apache.openjpa.meta.FieldMetaData;\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\n+\n+/**\n+ * Tests that we can detect if a query is using query parameters for fields whose values are externalized.\n+ * \n+ * @author Pinaki Poddar\n+ *\n+ */\n+public class TestExternalizedParameter extends TestCase {\n+    private static String RESOURCE = \"META-INF/persistence.xml\"; \n+    private static String UNIT_NAME = \"PreparedQuery\";\n+    private static EntityManagerFactory emf;\n+    \n+    public void setUp() throws Exception {\n+        if (emf == null) {\n+            Properties config = new Properties();\n+            config.put(\"openjpa.jdbc.SynchronizeMappings\", \"buildSchema(ForeignKeys=true,SchemaAction='drop,add')\");\n+            config.put(\"openjpa.jdbc.QuerySQLCache\", \"true\");\n+            config.put(\"openjpa.RuntimeUnenhancedClasses\", \"unsupported\");\n+            config.put(\"openjpa.DynamicEnhancementAgent\", \"false\");\n+            config.put(\"openjpa.Log\", \"SQL=WARN\");\n+            emf = OpenJPAPersistence.createEntityManagerFactory(UNIT_NAME, RESOURCE, config);\n+        }\n+    }\n+    \n+    public void testNoFalseAlarmOnExternalizedParameterDetection() {\n+        String jpql = \"select b from Book b where b.title=:title\";\n+        EntityManager em = emf.createEntityManager();\n+        QueryExpressions[] exps = getExpressions(em.createQuery(jpql)\n+                .setParameter(\"title\",\"XYZ\")\n+                .getResultList());\n+        assertNotNull(exps);\n+        \n+        assertFalse(isUsingExternalizedParameter(exps[0]));\n+    }\n+    \n+    public void testCanDetectExternalizedSingleParameterValue() {\n+        String jpql = \"select b from Book b where b.token=:token\";\n+        EntityManager em = emf.createEntityManager();\n+        QueryExpressions[] exps = getExpressions(em.createQuery(jpql)\n+                .setParameter(\"token\",\"MEDIUM\")\n+                .getResultList());\n+        assertNotNull(exps);\n+        \n+        assertTrue(isUsingExternalizedParameter(exps[0]));\n+    }\n+    \n+    public void testCanDetectExternalizedMixedParameterValue() {\n+        String jpql = \"select b from Book b where b.token=:token and b.title = :title\";\n+        EntityManager em = emf.createEntityManager();\n+        QueryExpressions[] exps = getExpressions(em.createQuery(jpql)\n+                .setParameter(\"token\",\"MEDIUM\")\n+                .setParameter(\"token\", \"LARGE\")\n+                .getResultList());\n+        assertNotNull(exps);\n+        \n+        assertTrue(isUsingExternalizedParameter(exps[0]));\n+    }\n+    \n+    public QueryExpressions[] getExpressions(List<?> result) {\n+        Object userObject = ((ResultList<?>)result).getUserObject();\n+        if (userObject == null || !userObject.getClass().isArray() || ((Object[])userObject).length != 2)\n+            return null;\n+        Object executor = ((Object[])userObject)[1];\n+        if (executor instanceof StoreQuery.Executor == false)\n+            return null;\n+        return ((StoreQuery.Executor)executor).getQueryExpressions();\n+    }\n+    \n+    boolean isUsingExternalizedParameter(QueryExpressions exp) {\n+        List<FieldMetaData> fmds = exp.getParameterizedFields();\n+        for (FieldMetaData fmd : fmds) {\n+            if (fmd.isExternalized())\n+                return true;\n+        }\n+        return false;\n+    }\n+\n+}"},{"sha":"cddca2f91203df6fef518418f25085f35046a2e4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestPreparedQueryCache.java","status":"modified","additions":30,"deletions":2,"changes":32,"blob_url":"https://github.com/apache/openjpa/blob/efa6e5428e6354c83825cb038dd1cf9ecfd8364f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestPreparedQueryCache.java","raw_url":"https://github.com/apache/openjpa/raw/efa6e5428e6354c83825cb038dd1cf9ecfd8364f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestPreparedQueryCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestPreparedQueryCache.java?ref=efa6e5428e6354c83825cb038dd1cf9ecfd8364f","patch":"@@ -171,8 +171,8 @@ void createTestData() {\n         CD     c1 = new CD(\"CD1\");\n         CD     c2 = new CD(\"CD2\");\n         \n-        b1.setId(id++);\n-        b2.setId(id++);\n+        b1.setId(id++); b1.setTitle(\"title-1\"); b1.setToken(\"LARGE\");\n+        b2.setId(id++); b2.setTitle(\"title-2\"); b2.setToken(\"MEDIUM\");\n         c1.setId(id++);\n         c2.setId(id++);\n         b1.addAuthor(a1);\n@@ -807,6 +807,34 @@ public void testMultithreadedAccess() {\n         }\n     }\n     \n+    public void testParameterOnExternalizedFieldIsExcluded() {\n+        String jpql = \"select b from Book b where b.title=:title and b.token=:token\";\n+        Query q1 = em.createQuery(jpql)\n+          .setParameter(\"title\", \"title-1\")\n+          .setParameter(\"token\", \"LARGE\");\n+        // default fetches authors eagerly and thus creates multiple SQL and hence not caches anyway\n+        OpenJPAPersistence.cast(q1).getFetchPlan().removeFetchGroup(\"default\");\n+        assertFalse(q1.getResultList().isEmpty());\n+        assertNotCached(jpql);\n+        Query q2 = em.createQuery(jpql)\n+                     .setParameter(\"title\", \"title-2\")\n+                     .setParameter(\"token\", \"MEDIUM\");\n+       assertFalse(q2.getResultList().isEmpty());\n+    }\n+    \n+    public void testNoParameterOnExternalizedFieldIsIncluded() {\n+        String jpql = \"select b from Book b where b.title=:title\";\n+        Query q1 = em.createQuery(jpql)\n+          .setParameter(\"title\", \"title-1\");\n+        // default fetches authors eagerly and thus creates multiple SQL and hence not caches anyway\n+        OpenJPAPersistence.cast(q1).getFetchPlan().removeFetchGroup(\"default\");\n+        assertFalse(q1.getResultList().isEmpty());\n+        assertCached(jpql);\n+        Query q2 = em.createQuery(jpql)\n+                     .setParameter(\"title\", \"title-2\");\n+       assertFalse(q2.getResultList().isEmpty());\n+    }\n+    \n     \n     PreparedQueryCache getPreparedQueryCache() {\n         return emf.getConfiguration().getQuerySQLCacheInstance();"}]}

