{"sha":"efaf681a466f83e92ef6ab75d9774fe1e1c4328c","node_id":"MDY6Q29tbWl0MjA2MzY0OmVmYWY2ODFhNDY2ZjgzZTkyZWY2YWI3NWQ5Nzc0ZmUxZTFjNDMyOGM=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-07-29T20:33:16Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-07-29T20:33:16Z"},"message":"OPENJPA-890 Fix some typos/wording/formatting\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@799063 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"95d05d33c55abea1fbdfa4ba86c24beddf1e4096","url":"https://api.github.com/repos/apache/openjpa/git/trees/95d05d33c55abea1fbdfa4ba86c24beddf1e4096"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/efaf681a466f83e92ef6ab75d9774fe1e1c4328c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/efaf681a466f83e92ef6ab75d9774fe1e1c4328c","html_url":"https://github.com/apache/openjpa/commit/efaf681a466f83e92ef6ab75d9774fe1e1c4328c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/efaf681a466f83e92ef6ab75d9774fe1e1c4328c/comments","author":null,"committer":null,"parents":[{"sha":"a10a0a5d802e81cfc4a4b5cbb5a8b65853998250","url":"https://api.github.com/repos/apache/openjpa/commits/a10a0a5d802e81cfc4a4b5cbb5a8b65853998250","html_url":"https://github.com/apache/openjpa/commit/a10a0a5d802e81cfc4a4b5cbb5a8b65853998250"}],"stats":{"total":41,"additions":21,"deletions":20},"files":[{"sha":"2589a6de94097546414f20263b00d372f2d46dd3","filename":"openjpa-project/src/doc/manual/jpa_overview_criteria.xml","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/efaf681a466f83e92ef6ab75d9774fe1e1c4328c/openjpa-project/src/doc/manual/jpa_overview_criteria.xml","raw_url":"https://github.com/apache/openjpa/raw/efaf681a466f83e92ef6ab75d9774fe1e1c4328c/openjpa-project/src/doc/manual/jpa_overview_criteria.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/jpa_overview_criteria.xml?ref=efaf681a466f83e92ef6ab75d9774fe1e1c4328c","patch":"@@ -88,24 +88,24 @@ DomainObject order = customer.join(\"orders\");\n \t\tthe domain objects and some variable. For example, to select the\n \t\tCustomers whose name is <emphasis>John Doe</emphasis> and has \n \t\torders that are not yet delivered, you can build the predicate and set  \n-\t\tit to the query definition as\n+\t\tit to the query definition as:\n \t\t<programlisting>\n qdef.where(customer.get(\"name\").equal(\"John Doe\")\n       .and(order.get(\"status\").equal(OrderStatus.DELIVERED).not()));\n \t\t</programlisting>\n \t\tThe <methodname>select()</methodname> method defines the result of the\n \t\tquery. If left unspecified, the select projection is assumed to be the\n \t\troot domain object. However, you can specify the selected projections\n-\t\texplicitly as a list \n+\t\texplicitly as a list:\n \t\t<programlisting>\n qdef.select(customer.get(\"name\"), order.get(\"status\"));\n \t\t</programlisting>\n-\t\tAttribute of a domain object is specified by navigating via \n+\t\tAn attribute of a domain object is specified by navigating via \n \t\t<methodname>get(String attr)</methodname>. The attribute \n \t\t<emphasis>should</emphasis> refer\n \t\tto a valid persistent property of the receiving domain object, however\n \t\tno such validation is enforced during the construction of the query \n-\t\tdefinition. All validation is deferred till query is actually executed.\n+\t\tdefinition. All validation is deferred until the query is actually executed.\n     \t</para>\n     </section> \n     \n@@ -143,11 +143,11 @@ List result = query.getResultList();\n     an equivalent JPQL query string via the extended OpenJPAQueryBuilder API.\n     <programlisting>\n     \tpublic interface OpenJPAQueryBuilder extends QueryBuilder {\n-\t\t\t/**\n-\t\t \t * Gets equivalent JPQL String for the given QueryDefinition.\n-\t \t\t*/\n-\t\t\tpublic String toJPQL(QueryDefinition qdef);\n-\t\t}\n+\t\t/**\n+\t \t * Gets equivalent JPQL String for the given QueryDefinition.\n+ \t\t*/\n+\t\tpublic String toJPQL(QueryDefinition qdef);\n+\t}\n \t</programlisting>\n     \n     </para>"},{"sha":"ce0dd6a90fd2a0900f5da465ed6e701389c62a85","filename":"openjpa-project/src/doc/manual/jpa_overview_em.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/efaf681a466f83e92ef6ab75d9774fe1e1c4328c/openjpa-project/src/doc/manual/jpa_overview_em.xml","raw_url":"https://github.com/apache/openjpa/raw/efaf681a466f83e92ef6ab75d9774fe1e1c4328c/openjpa-project/src/doc/manual/jpa_overview_em.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/jpa_overview_em.xml?ref=efaf681a466f83e92ef6ab75d9774fe1e1c4328c","patch":"@@ -1020,7 +1020,7 @@ public Query createNativeQuery(String sql, String resultMapping);\n </programlisting>\n         <para>\n <emphasis>Native</emphasis> queries are queries in the datastore's native\n-language. For relational databases, this the Structured Query Language (SQL).\n+language. For relational databases, this is the Structured Query Language (SQL).\n <xref linkend=\"jpa_overview_sqlquery\"/> elaborates on JPA's\n native query support.\n         </para>"},{"sha":"be6122beca472e13b1907c0c1750bddcd0030209","filename":"openjpa-project/src/doc/manual/jpa_overview_emfactory.xml","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/efaf681a466f83e92ef6ab75d9774fe1e1c4328c/openjpa-project/src/doc/manual/jpa_overview_emfactory.xml","raw_url":"https://github.com/apache/openjpa/raw/efaf681a466f83e92ef6ab75d9774fe1e1c4328c/openjpa-project/src/doc/manual/jpa_overview_emfactory.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/jpa_overview_emfactory.xml?ref=efaf681a466f83e92ef6ab75d9774fe1e1c4328c","patch":"@@ -309,7 +309,7 @@ assertTrue(mag2 != mag1);\n // transaction\n Magazine mag3 = em.find(Magazine.class, magId);\n assertTrue(mag3 != mag1 &amp;&amp; mag3 != mag2);\n-Magazine mag4 = em.find(Magazine.class (magId);\n+Magazine mag4 = em.find(Magazine.class, magId);\n assertTrue(mag4 == mag3);\n ...\n \n@@ -357,10 +357,10 @@ em.getTransaction().begin();\n // same persistence context active within the transaction\n Magazine mag3 = em.find(Magazine.class, magId);\n assertTrue(mag3 == mag1);\n-Magazine mag4 = em.find(Magazine.class (magId);\n+Magazine mag4 = em.find(Magazine.class, magId);\n assertTrue(mag4 == mag1);\n \n-em.getTransaction.commit ();\n+em.getTransaction.commit();\n \n // when the transaction commits, instance still managed\n Magazine mag5 = em.find(Magazine.class, magId);"},{"sha":"9f9cea6b0c0babaad37f419c0dd270d508a9bbc5","filename":"openjpa-project/src/doc/manual/jpa_overview_persistence.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/efaf681a466f83e92ef6ab75d9774fe1e1c4328c/openjpa-project/src/doc/manual/jpa_overview_persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/efaf681a466f83e92ef6ab75d9774fe1e1c4328c/openjpa-project/src/doc/manual/jpa_overview_persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/jpa_overview_persistence.xml?ref=efaf681a466f83e92ef6ab75d9774fe1e1c4328c","patch":"@@ -67,7 +67,7 @@ additional utility methods.\n     <para>\n Within a container, you will typically use <emphasis>injection</emphasis> to\n access an <classname>EntityManagerFactory</classname>. Applications operating\n-of a container, however, can use the\n+outside of a container, however, can use the\n <ulink url=\"http://java.sun.com/javaee/5/docs/api/javax/persistence/Persistence.html\">\n <classname>Persistence</classname></ulink> class to obtain <classname>\n EntityManagerFactory</classname> objects in a vendor-neutral fashion."},{"sha":"730c2b38a5f57458dda691bfe1752e9010ba67d8","filename":"openjpa-project/src/doc/manual/jpa_overview_query.xml","status":"modified","additions":7,"deletions":6,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/efaf681a466f83e92ef6ab75d9774fe1e1c4328c/openjpa-project/src/doc/manual/jpa_overview_query.xml","raw_url":"https://github.com/apache/openjpa/raw/efaf681a466f83e92ef6ab75d9774fe1e1c4328c/openjpa-project/src/doc/manual/jpa_overview_query.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/jpa_overview_query.xml?ref=efaf681a466f83e92ef6ab75d9774fe1e1c4328c","patch":"@@ -115,7 +115,7 @@ result list will contain instances of the <classname>Magazine</classname> class.\n             </para>\n             <note>\n                 <para>\n-When selecting entities, you can optional use the keyword <literal>object\n+When selecting entities, you can optionally use the keyword <literal>object\n </literal>. The clauses <literal>select x</literal> and <literal>SELECT\n OBJECT(x)</literal> are synonymous.\n                 </para>\n@@ -622,7 +622,7 @@ then execute the query with those values.\n public Query setParameter(String name, Object value);\n </programlisting>\n             <para>\n-Named parameter are denoted by prefixing an arbitrary name with a colon in your\n+Named parameters are denoted by prefixing an arbitrary name with a colon in your\n JPQL string. You can then populate the <classname> Query</classname> object with\n parameter values using the method above. Like the positional parameter method,\n this method returns the <classname>Query</classname> instance for optional\n@@ -810,7 +810,7 @@ Hints can also be included as part of a NamedQuery definition.\n                  </title>\n <programlisting>\n ...\n-@NamedQuery(name=\" magsOverPrice\",\n+@NamedQuery(name=\"magsOverPrice\",\n query=\"SELECT x FROM Magazine x WHERE x.price > ?1\",\n hints={ @QueryHint  (name=\"openjpa.hint.OptimizeResultCount\", value=\"2\"),\n         @QueryHint (name=\"openjpa.FetchPlan.ReadLockMode\",value=\"WRITE\")} )\n@@ -1242,7 +1242,7 @@ SELECT DISTINCT mag FROM Magazine AS mag JOIN mag.articles AS art WHERE art.publ\n This query navigates over the association-field authors of the\n abstract schema type <literal>Magazine</literal> to find articles, and uses the\n state-field <literal>published</literal> of <literal>Article</literal> to select\n-those magazines that have at least one article that is published. Although\n+those magazines that have at least one article that is not published. Although\n predefined reserved identifiers, such as <literal>DISTINCT</literal>, <literal>\n FROM</literal>, <literal>AS</literal>, <literal>JOIN</literal>, <literal>\n WHERE</literal>, and <literal>FALSE</literal> appear in upper case in this \n@@ -2217,10 +2217,11 @@ semantically equivalent to: <programlisting>y &lt;= x AND x &lt;= z\n </programlisting> The rules for unknown and <literal>NULL</literal> values in\n comparison operations apply. See <xref linkend=\"jpa_langref_null_values\"/>\n . Examples are: <programlisting>p.age BETWEEN 15 and 19</programlisting> is\n-equivalent to <programlisting>p.age &gt;= 15 AND p.age &lt;= 19</programlisting>\n+equivalent to: <programlisting>p.age &gt;= 15 AND p.age &lt;= 19</programlisting>\n                 </para>\n                 <para>\n-<programlisting>p.age NOT BETWEEN 15 and 19</programlisting> is equivalent to\n+The following expression:\n+<programlisting>p.age NOT BETWEEN 15 and 19</programlisting> excludes the range, and is equivalent to:\n <programlisting>p.age &lt; 15 OR p.age &gt; 19</programlisting>\n                 </para>\n             </section>"}]}

