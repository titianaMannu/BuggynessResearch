{"sha":"efc6ba4735d62cb8a82ed2ce29096d149d516c4f","node_id":"MDY6Q29tbWl0MjA2MzY0OmVmYzZiYTQ3MzVkNjJjYjhhODJlZDJjZTI5MDk2ZDE0OWQ1MTZjNGY=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-03-01T19:31:06Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-03-01T19:31:06Z"},"message":"OPENJPA-884: Logging oversight in DB2Dictionary \nhttps://issues.apache.org/jira/browse/OPENJPA-884\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@749077 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"db245191adb41e1e6ca37d03ac47282e5c9bfe88","url":"https://api.github.com/repos/apache/openjpa/git/trees/db245191adb41e1e6ca37d03ac47282e5c9bfe88"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/efc6ba4735d62cb8a82ed2ce29096d149d516c4f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/efc6ba4735d62cb8a82ed2ce29096d149d516c4f","html_url":"https://github.com/apache/openjpa/commit/efc6ba4735d62cb8a82ed2ce29096d149d516c4f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/efc6ba4735d62cb8a82ed2ce29096d149d516c4f/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"cc38e27eef7fe280d4ed916c4638d9b9aa43aac4","url":"https://api.github.com/repos/apache/openjpa/commits/cc38e27eef7fe280d4ed916c4638d9b9aa43aac4","html_url":"https://github.com/apache/openjpa/commit/cc38e27eef7fe280d4ed916c4638d9b9aa43aac4"}],"stats":{"total":102,"additions":48,"deletions":54},"files":[{"sha":"059943d00a94aadec6e8d9591349453c00605013","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","status":"modified","additions":48,"deletions":54,"changes":102,"blob_url":"https://github.com/apache/openjpa/blob/efc6ba4735d62cb8a82ed2ce29096d149d516c4f/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","raw_url":"https://github.com/apache/openjpa/raw/efc6ba4735d62cb8a82ed2ce29096d149d516c4f/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java?ref=efc6ba4735d62cb8a82ed2ce29096d149d516c4f","patch":"@@ -234,8 +234,8 @@ public Connection decorate(Connection conn)\n         conn = super.decorate(conn);\r\n \r\n         if (conf.getTransactionIsolationConstant() == -1\r\n-            && conn.getTransactionIsolation() < conn.TRANSACTION_READ_COMMITTED)\r\n-            conn.setTransactionIsolation(conn.TRANSACTION_READ_COMMITTED);\r\n+            && conn.getTransactionIsolation() < Connection.TRANSACTION_READ_COMMITTED)\r\n+            conn.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);\r\n \r\n         return conn;\r\n     }\r\n@@ -275,7 +275,7 @@ else if (isDB2UDBV82OrLater())\n     \t        db2ServerType = db2UDBV82OrLater;\r\n         }\r\n \r\n-        // verify that databae product is supported\r\n+        // verify that database product is supported\r\n         if (db2ServerType == 0 || maj == 0)\r\n             throw new UnsupportedException(_loc.get(\"db-not-supported\",\r\n                 new Object[] {databaseProductName, databaseProductVersion }));                    \r\n@@ -340,56 +340,50 @@ protected String getForUpdateClause(JDBCFetchConfiguration fetch,\n         int isolationLevel;\r\n         // For db2UDBV81OrEarlier and db2ISeriesV5R3OrEarlier:\r\n         // \"optimize for\" clause appears before \"for update\" clause.\r\n-        StringBuffer forUpdateString = new StringBuffer(\r\n-            getOptimizeClause(sel));\r\n-        try {\r\n-            // Determine the isolationLevel; the fetch\r\n-            // configuration data overrides the persistence.xml value\r\n-            if (fetch != null && fetch.getIsolation() != -1)\r\n-                isolationLevel = fetch.getIsolation();\r\n-            else\r\n-                isolationLevel = conf.getTransactionIsolationConstant();\r\n-\r\n-            if (isForUpdate) {\r\n-                switch(db2ServerType) {\r\n-                case db2ISeriesV5R3OrEarlier:\r\n-                case db2UDBV81OrEarlier:\r\n-                    if (isolationLevel == Connection.TRANSACTION_SERIALIZABLE)\r\n-                        forUpdateString.append(\" \").append(forUpdateClause);\r\n-                    else \r\n-                        forUpdateString.append(\" \").append(forUpdate)\r\n-                            .append(\" \").append(withRSClause);\r\n-                    break;\r\n-                case db2ZOSV8xOrLater:\r\n-                case db2UDBV82OrLater:\r\n-                    if (isolationLevel == Connection.TRANSACTION_SERIALIZABLE) {\r\n-                        forUpdateString.append(\" \").append(forReadOnlyClause)\r\n-                            .append(\" \").append(withRRClause)\r\n-                            .append(\" \").append(useKeepUpdateLockClause);   \r\n-                    } else {\r\n-                        forUpdateString.append(\" \").append(forReadOnlyClause)\r\n-                            .append(\" \").append(withRSClause)\r\n-                            .append(\" \").append(useKeepUpdateLockClause);                            \r\n-                    }\r\n-                    break;\r\n-                case db2ISeriesV5R4OrLater:\r\n-                    if (isolationLevel == Connection.TRANSACTION_SERIALIZABLE) {\r\n-                        forUpdateString.append(\" \").append(forReadOnlyClause)\r\n-                            .append(\" \").append(withRRClause)\r\n-                            .append(\" \").append(useKeepExclusiveLockClause);       \r\n-                    } else {\r\n-                        forUpdateString.append(\" \").append(forReadOnlyClause)\r\n-                            .append(\" \").append(withRSClause)\r\n-                            .append(\" \").append(useKeepExclusiveLockClause);\r\n-                    }\r\n-                    break;\r\n+        StringBuffer forUpdateString = new StringBuffer(getOptimizeClause(sel));\r\n+        // Determine the isolationLevel; the fetch\r\n+        // configuration data overrides the persistence.xml value\r\n+        if (fetch != null && fetch.getIsolation() != -1)\r\n+            isolationLevel = fetch.getIsolation();\r\n+        else\r\n+            isolationLevel = conf.getTransactionIsolationConstant();\r\n+\r\n+        if (isForUpdate) {\r\n+            switch (db2ServerType) {\r\n+            case db2ISeriesV5R3OrEarlier:\r\n+            case db2UDBV81OrEarlier:\r\n+                if (isolationLevel == Connection.TRANSACTION_SERIALIZABLE)\r\n+                    forUpdateString.append(\" \").append(forUpdateClause);\r\n+                else\r\n+                    forUpdateString.append(\" \").append(forUpdate).append(\" \")\r\n+                        .append(withRSClause);\r\n+                break;\r\n+            case db2ZOSV8xOrLater:\r\n+            case db2UDBV82OrLater:\r\n+                if (isolationLevel == Connection.TRANSACTION_SERIALIZABLE) {\r\n+                    forUpdateString.append(\" \").append(forReadOnlyClause)\r\n+                        .append(\" \").append(withRRClause).append(\" \").append(\r\n+                            useKeepUpdateLockClause);\r\n+                } else {\r\n+                    forUpdateString.append(\" \").append(forReadOnlyClause)\r\n+                        .append(\" \").append(withRSClause).append(\" \").append(\r\n+                            useKeepUpdateLockClause);\r\n                 }\r\n+                break;\r\n+            case db2ISeriesV5R4OrLater:\r\n+                if (isolationLevel == Connection.TRANSACTION_SERIALIZABLE) {\r\n+                    forUpdateString.append(\" \").append(forReadOnlyClause)\r\n+                        .append(\" \").append(withRRClause).append(\" \").append(\r\n+                            useKeepExclusiveLockClause);\r\n+                } else {\r\n+                    forUpdateString.append(\" \").append(forReadOnlyClause)\r\n+                        .append(\" \").append(withRSClause).append(\" \").append(\r\n+                            useKeepExclusiveLockClause);\r\n+                }\r\n+                break;\r\n             }\r\n         }\r\n-        catch (Exception e) {\r\n-            if (log.isTraceEnabled())\r\n-                log.error(e.toString(),e);\r\n-        }\r\n+   \r\n         return forUpdateString.toString();\r\n     }\r\n \r\n@@ -467,7 +461,7 @@ private void getProductVersionMajorMinorForISeries() {\n     }\r\n     \r\n     private void getProductVersionMajorMinor() {\r\n-        // Incase JDBC driver version is lower than 3\r\n+        // In case JDBC driver version is lower than 3\r\n         // use following info to determine Major and Minor \r\n         //                        CLI    vs      JCC\r\n         // ZDBV8 DBProdName       DB2            DB2\r\n@@ -514,8 +508,8 @@ public OpenJPAException newStoreException(String msg, SQLException[] causes,\n     }\r\n \r\n     /**\r\n-     *  Append exception information from SQLCA to the exsisting\r\n-     *  exception meassage\r\n+     *  Append exception information from SQLCA to the existing\r\n+     *  exception message\r\n      */\r\n     private String appendExtendedExceptionMsg(String msg, SQLException sqle){\r\n        final String GETSQLCA =\"getSqlca\";\r\n@@ -827,7 +821,7 @@ public void createIndexIfNecessary(Schema schema, String table,\n             Column pkColumn) {\r\n         if (isDB2ZOSV8xOrLater()) {\r\n             // build the index for the sequence tables\r\n-            // the index name will the fully qualified table name + _IDX\r\n+            // the index name will be the fully qualified table name + _IDX\r\n             Table tab = schema.getTable(table);\r\n             Index idx = tab.addIndex(tab.getFullName() + \"_IDX\");\r\n             idx.setUnique(true);\r"}]}

