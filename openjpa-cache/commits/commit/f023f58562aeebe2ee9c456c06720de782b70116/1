{"sha":"f023f58562aeebe2ee9c456c06720de782b70116","node_id":"MDY6Q29tbWl0MjA2MzY0OmYwMjNmNTg1NjJhZWViZTJlZTljNDU2YzA2NzIwZGU3ODJiNzAxMTY=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-04-03T02:48:10Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-04-03T02:48:10Z"},"message":"OpenJPA-179 store defaultSchemaName in ClassMapping\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@525006 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"917163b1c85a0a0578b792f6d5bccffeeea598d2","url":"https://api.github.com/repos/apache/openjpa/git/trees/917163b1c85a0a0578b792f6d5bccffeeea598d2"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/f023f58562aeebe2ee9c456c06720de782b70116","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/f023f58562aeebe2ee9c456c06720de782b70116","html_url":"https://github.com/apache/openjpa/commit/f023f58562aeebe2ee9c456c06720de782b70116","comments_url":"https://api.github.com/repos/apache/openjpa/commits/f023f58562aeebe2ee9c456c06720de782b70116/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"10bdc61b91d2cf8c98ea72b42343f76865feee72","url":"https://api.github.com/repos/apache/openjpa/commits/10bdc61b91d2cf8c98ea72b42343f76865feee72","html_url":"https://github.com/apache/openjpa/commit/10bdc61b91d2cf8c98ea72b42343f76865feee72"}],"stats":{"total":51,"additions":47,"deletions":4},"files":[{"sha":"2640adcf4de4784147181521fc6de213ed83077e","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingInfo.java","status":"modified","additions":13,"deletions":0,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/f023f58562aeebe2ee9c456c06720de782b70116/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingInfo.java","raw_url":"https://github.com/apache/openjpa/raw/f023f58562aeebe2ee9c456c06720de782b70116/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingInfo.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingInfo.java?ref=f023f58562aeebe2ee9c456c06720de782b70116","patch":"@@ -21,6 +21,7 @@\n import java.util.Collections;\n import java.util.List;\n \n+import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.jdbc.schema.ColumnIO;\n@@ -69,6 +70,7 @@\n     private boolean _canFK = true;\n     private int _join = JOIN_NONE;\n     private ColumnIO _io = null;\n+    private String _defaultSchemaName = null;\n \n     /**\n      * Mapping strategy name.\n@@ -439,6 +441,9 @@ public Table createTable(MetaDataContext context, TableDefaults def,\n             if (schema == null) {\n                 schemaName = Schemas.getNewTableSchema((JDBCConfiguration)\n                     repos.getConfiguration());\n+                if(StringUtils.isEmpty(schemaName)) { \n+                   schemaName = _defaultSchemaName;\n+                }\n                 schema = group.getSchema(schemaName);\n                 if (schema == null)\n                     schema = group.addSchema(schemaName);\n@@ -1764,4 +1769,12 @@ private static boolean defaultTarget(Column col, Column targetCol,\n         public void populate(Table local, Table foreign, Column col,\n             Object target, boolean inverse, int pos, int cols);\n \t}\n+    \n+    public String getDefaultSchemaName() {\n+        return _defaultSchemaName;\n+    }\n+\n+    public void setDefaultSchemaName(String schemaName) {\n+        _defaultSchemaName = schemaName;\n+    }\n }"},{"sha":"841949b5420ef403f3db3f2b2e660a8892c2d050","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/PersistenceMappingDefaults.java","status":"modified","additions":19,"deletions":4,"changes":23,"blob_url":"https://github.com/apache/openjpa/blob/f023f58562aeebe2ee9c456c06720de782b70116/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/PersistenceMappingDefaults.java","raw_url":"https://github.com/apache/openjpa/raw/f023f58562aeebe2ee9c456c06720de782b70116/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/PersistenceMappingDefaults.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/PersistenceMappingDefaults.java?ref=f023f58562aeebe2ee9c456c06720de782b70116","patch":"@@ -15,6 +15,7 @@\n  */\n package org.apache.openjpa.persistence.jdbc;\n \n+import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.meta.Discriminator;\n import org.apache.openjpa.jdbc.meta.FieldMapping;\n@@ -114,17 +115,31 @@ public Object getStrategy(Discriminator disc, boolean adapt) {\n \n     @Override\n     public String getTableName(ClassMapping cls, Schema schema) {\n+        String name = \"\";\n+\n+        if(StringUtils.isNotEmpty(schema.getName())) { \n+            name +=schema.getName() + '.'; \n+        }\n+\n         if (cls.getTypeAlias() != null)\n-            return cls.getTypeAlias();\n+            name += cls.getTypeAlias();\n+        \n         else\n-            return Strings.getClassName(\n-                cls.getDescribedType()).replace('$', '_');\n+            name += Strings.getClassName(cls.getDescribedType()).replace('$',\n+                    '_');\n+        \n+        return name;\n     }\n \n     @Override\n     public String getTableName(FieldMapping fm, Schema schema) {\n+        String name = \"\"; \n+        if(StringUtils.isNotEmpty(schema.getName())) { \n+            name +=schema.getName() + '.'; \n+        }\n+        \n         // base name is table of defining type + '_'\n-        String name = fm.getDefiningMapping().getTable().getName() + \"_\";\n+        name += fm.getDefiningMapping().getTable().getName() + \"_\";\n \n         // if this is an assocation table, spec says to suffix with table of\n         // the related type. spec doesn't cover other cases; we're going to"},{"sha":"222a02a2ad940c8e088131c29418cb26810db869","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMLPersistenceMappingParser.java","status":"modified","additions":15,"deletions":0,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/f023f58562aeebe2ee9c456c06720de782b70116/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMLPersistenceMappingParser.java","raw_url":"https://github.com/apache/openjpa/raw/f023f58562aeebe2ee9c456c06720de782b70116/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMLPersistenceMappingParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMLPersistenceMappingParser.java?ref=f023f58562aeebe2ee9c456c06720de782b70116","patch":"@@ -50,6 +50,7 @@\n import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.meta.FieldMetaData;\n import org.apache.openjpa.meta.JavaTypes;\n+import org.apache.openjpa.meta.MetaDataRepository;\n import org.apache.openjpa.persistence.XMLPersistenceMetaDataParser;\n import static org.apache.openjpa.persistence.jdbc.MappingTag.*;\n \n@@ -910,4 +911,18 @@ private boolean endColumnName() {\n \t\tTRUE,\n \t\tFALSE\n \t}\n+    \n+    @Override\n+    protected void endClass(String elem)\n+        throws SAXException {\n+        if (StringUtils.isNotEmpty(_schema)) {\n+            Class cls = classForName(currentClassName());\n+\n+            MetaDataRepository repos = getRepository();\n+            ClassMapping meta = (ClassMapping) repos.getCachedMetaData(cls);\n+\n+            meta.getMappingInfo().setDefaultSchemaName(_schema);\n+        }\n+        super.endClass(elem);\n+    }\n }"}]}

