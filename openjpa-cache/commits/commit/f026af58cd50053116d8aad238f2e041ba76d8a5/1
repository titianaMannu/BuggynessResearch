{"sha":"f026af58cd50053116d8aad238f2e041ba76d8a5","node_id":"MDY6Q29tbWl0MjA2MzY0OmYwMjZhZjU4Y2Q1MDA1MzExNmQ4YWFkMjM4ZjJlMDQxYmE3NmQ4YTU=","commit":{"author":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-06-15T23:44:47Z"},"committer":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-06-15T23:44:47Z"},"message":"OPENJPA-240 Feature:Persistent field mapping support for XML column type.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@547831 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f3c7ad12c5eaadcbde36d4524e87fb72deb06cb2","url":"https://api.github.com/repos/apache/openjpa/git/trees/f3c7ad12c5eaadcbde36d4524e87fb72deb06cb2"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/f026af58cd50053116d8aad238f2e041ba76d8a5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/f026af58cd50053116d8aad238f2e041ba76d8a5","html_url":"https://github.com/apache/openjpa/commit/f026af58cd50053116d8aad238f2e041ba76d8a5","comments_url":"https://api.github.com/repos/apache/openjpa/commits/f026af58cd50053116d8aad238f2e041ba76d8a5/comments","author":null,"committer":null,"parents":[{"sha":"d384dcb8fd3dffd1c04e91ef96a147d8bac5a4de","url":"https://api.github.com/repos/apache/openjpa/commits/d384dcb8fd3dffd1c04e91ef96a147d8bac5a4de","html_url":"https://github.com/apache/openjpa/commit/d384dcb8fd3dffd1c04e91ef96a147d8bac5a4de"}],"stats":{"total":32,"additions":28,"deletions":4},"files":[{"sha":"c52bf2116596d6f5898898d65ac7b0062ca2c7f9","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/f026af58cd50053116d8aad238f2e041ba76d8a5/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","raw_url":"https://github.com/apache/openjpa/raw/f026af58cd50053116d8aad238f2e041ba76d8a5/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java?ref=f026af58cd50053116d8aad238f2e041ba76d8a5","patch":"@@ -207,6 +207,8 @@ else if (isDB2ISeriesV5R4OrLater(metaData))\n \t    \t\tsupportsLockingWithInnerJoin = true;\r\n \t    \t\tsupportsLockingWithOuterJoin = true;\r\n \t    \t\tforUpdateClause = \"WITH RR USE AND KEEP UPDATE LOCKS\";\r\n+\t    \t\tif (maj >=9)\r\n+\t    \t\t    supportsXMLColumn = true;\r\n \t    \t}\r\n \r\n             if (metaData.getDatabaseProductVersion().indexOf(\"DSN\") != -1) {\r"},{"sha":"b33d5fddd66dc5ad5f95a9a6ac09bb08a654f4d8","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/f026af58cd50053116d8aad238f2e041ba76d8a5/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/f026af58cd50053116d8aad238f2e041ba76d8a5/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java?ref=f026af58cd50053116d8aad238f2e041ba76d8a5","patch":"@@ -212,6 +212,7 @@\n     public boolean requiresCastForMathFunctions = false;\n     public boolean requiresCastForComparisons = false;\n     public boolean supportsModOperator = false;\n+    public boolean supportsXMLColumn = false;\n \n     // functions\n     public String castFunction = \"CAST({0} AS {1})\";\n@@ -273,6 +274,8 @@\n     public String tinyintTypeName = \"TINYINT\";\n     public String varbinaryTypeName = \"VARBINARY\";\n     public String varcharTypeName = \"VARCHAR\";\n+    public String xmlTypeName = \"XML\";\n+    public String getStringVal = \"\";\n \n     // schema metadata\n     public boolean useSchemaName = true;"},{"sha":"e89adcac19fefd2474b2b2b25fa278962f315d7f","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java","status":"modified","additions":15,"deletions":4,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/f026af58cd50053116d8aad238f2e041ba76d8a5/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/f026af58cd50053116d8aad238f2e041ba76d8a5/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java?ref=f026af58cd50053116d8aad238f2e041ba76d8a5","patch":"@@ -130,6 +130,8 @@ public OracleDictionary() {\n             \"CTXSYS\", \"MDSYS\", \"SYS\", \"SYSTEM\", \"WKSYS\", \"WMSYS\", \"XDB\",\n         }));\n \n+        supportsXMLColumn = true;\n+        xmlTypeName = \"XMLType\";\n         bigintTypeName = \"NUMBER{0}\";\n         bitTypeName = \"NUMBER{0}\";\n         decimalTypeName = \"NUMBER{0}\";\n@@ -182,15 +184,23 @@ public void connectedConfiguration(Connection conn)\n                 driverVendor = VENDOR_ORACLE + meta.getDriverMajorVersion()\n                     + meta.getDriverMinorVersion();\n \n+                String productVersion = meta.getDatabaseProductVersion()\n+                    .split(\"Release \",0)[1].split(\"\\\\.\",0)[0];\n+                int release = Integer.parseInt(productVersion);\n+                \n                 // warn sql92\n-                if (meta.getDatabaseProductVersion().indexOf(\"Release 8.\") > 0)\n-                {\n+                if (release == 8) {\n                     if (joinSyntax == SYNTAX_SQL92 && log.isWarnEnabled())\n                         log.warn(_loc.get(\"oracle-syntax\"));\n                     joinSyntax = SYNTAX_DATABASE;\n                     dateTypeName = \"DATE\"; // added oracle 9\n                     timestampTypeName = \"DATE\"; // added oracle 9\n+                    supportsXMLColumn = false;\n                 }\n+                else \n+                    // select of an xml column requires \".getStringVal()\"\n+                    // suffix. eg. t0.xmlcol.getStringVal()\n+                    getStringVal = \".getStringVal()\";\n             } else if (metadataClassName.startsWith(\"com.ddtek.\")\n                 || url.indexOf(\"jdbc:datadirect:oracle:\") != -1\n                 || \"Oracle\".equals(driverName)) {\n@@ -499,7 +509,8 @@ public void setNull(PreparedStatement stmnt, int idx, int colType,\n         throws SQLException {\n         if (colType == Types.BLOB && _driverBehavior == BEHAVE_ORACLE)\n             stmnt.setBlob(idx, getEmptyBlob());\n-        else if (colType == Types.CLOB && _driverBehavior == BEHAVE_ORACLE)\n+        else if (colType == Types.CLOB && _driverBehavior == BEHAVE_ORACLE\n+            && !col.isXML())\n             stmnt.setClob(idx, getEmptyClob());\n         else if ((colType == Types.STRUCT || colType == Types.OTHER)\n             && col != null && col.getTypeName() != null)\n@@ -509,7 +520,7 @@ else if ((colType == Types.STRUCT || colType == Types.OTHER)\n         else if (colType == Types.DATE)\n             super.setNull(stmnt, idx, Types.TIMESTAMP, col);\n         // the Oracle driver does not support Types.OTHER with setNull\n-        else if (colType == Types.OTHER)\n+        else if (colType == Types.OTHER || col.isXML())\n             super.setNull(stmnt, idx, Types.NULL, col);\n         else\n             super.setNull(stmnt, idx, colType, col);"},{"sha":"26bf3c55b3d4d36138aeab6aa5ef53f0a3d665cf","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLServerDictionary.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/f026af58cd50053116d8aad238f2e041ba76d8a5/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLServerDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/f026af58cd50053116d8aad238f2e041ba76d8a5/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLServerDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLServerDictionary.java?ref=f026af58cd50053116d8aad238f2e041ba76d8a5","patch":"@@ -79,6 +79,9 @@ else if (url != null\n                     driverVendor = VENDOR_OTHER;\n             } else\n                 driverVendor = VENDOR_OTHER;\n+            if (driverName.contains(platform) && Integer.parseInt(driverName\n+                .split(\"Server \",0)[1].split(\" \")[0]) >= 2005)\n+                supportsXMLColumn = true;\n         }\n \n         // warn about using cursors"},{"sha":"e41b1504f308724dead07c18c21d2574e7f6c597","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/f026af58cd50053116d8aad238f2e041ba76d8a5/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","raw_url":"https://github.com/apache/openjpa/raw/f026af58cd50053116d8aad238f2e041ba76d8a5/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java?ref=f026af58cd50053116d8aad238f2e041ba76d8a5","patch":"@@ -189,6 +189,7 @@ public SelectImpl(JDBCConfiguration conf) {\n         _conf = conf;\n         _dict = _conf.getDBDictionaryInstance();\n         _joinSyntax = _dict.joinSyntax;\n+        _selects._dict = _dict;\n     }\n \n     /////////////////////////////////\n@@ -2661,6 +2662,7 @@ public String toString() {\n         private List _idents = null;\n         private Map _aliases = null;\n         private Map _selectAs = null;\n+        private DBDictionary _dict = null;\n \n         /**\n          * Add all aliases from another instance.\n@@ -2769,6 +2771,9 @@ public Object get(int i) {\n                     Object id = (ident && _idents != null) ? _idents.get(i)\n                         : _ids.get(i);\n                     Object alias = _aliases.get(id);\n+                    if (id instanceof Column && ((Column)id).isXML())\n+                        alias = alias + _dict.getStringVal;\n+                        \n                     String as = null;\n                     if (inner)\n                         as = ((String) alias).replace('.', '_');"}]}

