{"sha":"f03b417d416e292e9ba4f99632e10a137583f8ae","node_id":"MDY6Q29tbWl0MjA2MzY0OmYwM2I0MTdkNDE2ZTI5MmU5YmE0Zjk5NjMyZTEwYTEzNzU4M2Y4YWU=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-07-12T21:39:55Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-07-12T21:39:55Z"},"message":"OPENJPA-1702: Allow new entities to be dirtied in BeforeCommit callback even if there are no other dirty entities. Based on patch submitted by Heath Thomann\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@963499 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a489813d9d5ed6919e537f403f70449ed5289cc2","url":"https://api.github.com/repos/apache/openjpa/git/trees/a489813d9d5ed6919e537f403f70449ed5289cc2"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/f03b417d416e292e9ba4f99632e10a137583f8ae","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/f03b417d416e292e9ba4f99632e10a137583f8ae","html_url":"https://github.com/apache/openjpa/commit/f03b417d416e292e9ba4f99632e10a137583f8ae","comments_url":"https://api.github.com/repos/apache/openjpa/commits/f03b417d416e292e9ba4f99632e10a137583f8ae/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"6210611374f461655d6d2bed02bfdb8841200642","url":"https://api.github.com/repos/apache/openjpa/commits/6210611374f461655d6d2bed02bfdb8841200642","html_url":"https://github.com/apache/openjpa/commit/6210611374f461655d6d2bed02bfdb8841200642"}],"stats":{"total":214,"additions":210,"deletions":4},"files":[{"sha":"d87ae81b7ea77f0ec3940d9305a96cb28ada995a","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","status":"modified","additions":8,"deletions":4,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/f03b417d416e292e9ba4f99632e10a137583f8ae/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/f03b417d416e292e9ba4f99632e10a137583f8ae/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java?ref=f03b417d416e292e9ba4f99632e10a137583f8ae","patch":"@@ -3986,8 +3986,10 @@ protected Collection getManagedStates() {\n      * Return a copy of all transactional state managers.\n      */\n     protected Collection<StateManagerImpl> getTransactionalStates() {\n-        if (!hasTransactionalObjects())\n-            return Collections.EMPTY_SET;\n+        if (!hasTransactionalObjects()) {\n+            // return a new empty set. Entities may be added by TransactionListeners \n+            return new LinkedHashSet<StateManagerImpl>();\n+        }\n         return _transCache.copy();\n     }\n \n@@ -4707,8 +4709,10 @@ public TransactionalCache(boolean orderDirty) {\n          * Return a copy of all transactional state managers.\n          */\n         public Collection copy() {\n-            if (isEmpty())\n-                return Collections.EMPTY_SET;\n+            if (isEmpty()) {\n+                // Transaction Listeners may add entities to the transaction. \n+                return new LinkedHashSet();\n+            }\n \n             // size may not be entirely accurate due to refs expiring, so\n             // manually copy each object; doesn't matter this way if size too"},{"sha":"759ff6377cf4fd46d9071e6a13c27b1bb55abab3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/AnEntity.java","status":"added","additions":62,"deletions":0,"changes":62,"blob_url":"https://github.com/apache/openjpa/blob/f03b417d416e292e9ba4f99632e10a137583f8ae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/AnEntity.java","raw_url":"https://github.com/apache/openjpa/raw/f03b417d416e292e9ba4f99632e10a137583f8ae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/AnEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/AnEntity.java?ref=f03b417d416e292e9ba4f99632e10a137583f8ae","patch":"@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.event;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.Version;\n+\n+@Entity\n+public class AnEntity {\n+\t@Id\n+\tprivate int id;\n+\t\n+\t@Version \n+\tprivate int version;\n+\t\n+\tpublic int getVersion() {\n+        return version;\n+    }\n+\n+    public void setVersion(int version) {\n+        this.version = version;\n+    }\n+\n+    private String name;\n+\t\n+\tpublic void setId(int id) {\n+\t\tthis.id = id;\n+\t}\n+\n+\tpublic int getId() {\n+\t\treturn id;\n+\t}\n+\n+\tpublic void setName(String name) {\n+\t\tthis.name = name;\n+\t}\n+\n+\tpublic String getName() {\n+\t\treturn name;\n+\t}\n+\t\n+\tpublic String toString(){\n+\t\treturn \"id = \" + id + \", name = \" + name;\n+\t}\n+}"},{"sha":"1cafde22d4c710b8362aa7fc8d3ec2cfed0e9cdf","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestBeforeCommit.java","status":"added","additions":140,"deletions":0,"changes":140,"blob_url":"https://github.com/apache/openjpa/blob/f03b417d416e292e9ba4f99632e10a137583f8ae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestBeforeCommit.java","raw_url":"https://github.com/apache/openjpa/raw/f03b417d416e292e9ba4f99632e10a137583f8ae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestBeforeCommit.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestBeforeCommit.java?ref=f03b417d416e292e9ba4f99632e10a137583f8ae","patch":"@@ -0,0 +1,140 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.event;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityTransaction;\n+import javax.persistence.Query;\n+\n+import org.apache.openjpa.event.TransactionEvent;\n+import org.apache.openjpa.event.TransactionListener;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\n+import org.apache.openjpa.persistence.test.AbstractPersistenceTestCase;\n+\n+public class TestBeforeCommit extends AbstractPersistenceTestCase implements TransactionListener {\n+\n+    AnEntity ae = null;\n+    public final int PKID = 2;\n+\n+    private static OpenJPAEntityManagerFactorySPI emf = null;\n+\n+    public void setUp() {\n+        if (emf == null) {\n+            emf = createEMF(AnEntity.class);\n+        }\n+        EntityManager em = emf.createEntityManager();\n+        EntityTransaction tran = em.getTransaction();\n+\n+        tran.begin();\n+        em.createQuery(\"Delete from AnEntity\").executeUpdate();\n+        tran.commit();\n+\n+        tran.begin();\n+        ae = new AnEntity();\n+        ae.setId(PKID);\n+        ae.setName(\"\");\n+        em.persist(ae);\n+        tran.commit();\n+        em.close();\n+    }\n+\n+    public void testQuery() {\n+        OpenJPAEntityManagerSPI em = (OpenJPAEntityManagerSPI) emf.createEntityManager();\n+        em.addTransactionListener(this);\n+        EntityTransaction tran = em.getTransaction();\n+\n+        tran.begin();\n+        ae = doQuery(em);\n+        assertEquals(\"\", ae.getName());\n+        assertEquals(1, ae.getVersion());\n+        tran.commit();\n+\n+        ae = doQuery(em);\n+        assertEquals(\"Ava\", ae.getName());\n+        assertEquals(2, ae.getVersion());\n+\n+        em.clear();\n+        ae = em.find(AnEntity.class, PKID);\n+        assertEquals(\"Ava\", ae.getName());\n+        assertEquals(2, ae.getVersion());\n+\n+        tran.begin();\n+        tran.commit();\n+        em.clear(); \n+        ae = em.find(AnEntity.class, PKID);\n+        assertEquals(\"AvaAva\", ae.getName());\n+        assertEquals(3, ae.getVersion());\n+\n+        em.close();\n+    }\n+\n+    public void testEmptyTransaction() {\n+        OpenJPAEntityManagerSPI em = (OpenJPAEntityManagerSPI) emf.createEntityManager();\n+        em.addTransactionListener(this);\n+        EntityTransaction tran = em.getTransaction();\n+        ae = doQuery(em);\n+        assertEquals(\"\", ae.getName());\n+        assertEquals(1, ae.getVersion());\n+        em.clear();\n+\n+        tran.begin();\n+        tran.commit(); \n+        \n+        // when BeforeCommit was fired AE was not managed. As a result its state is out of sync with the database.\n+        assertEquals(\"Ava\", ae.getName());\n+        ae = doQuery(em);\n+        assertEquals(\"\", ae.getName());\n+        assertEquals(1, ae.getVersion());\n+    }\n+\n+    public void beforeCommit(TransactionEvent event) {\n+        ae.setName(ae.getName() + \"Ava\");\n+    }\n+\n+    private AnEntity doQuery(EntityManager em) {\n+        Query q = em.createQuery(\"select a from AnEntity a where a.id = :id\");\n+        return (AnEntity) q.setParameter(\"id\", PKID).getSingleResult();\n+    }\n+\n+    // Unused Interface methods\n+    public void afterBegin(TransactionEvent event) {\n+    }\n+\n+    public void afterFlush(TransactionEvent event) {\n+    }\n+\n+    public void beforeFlush(TransactionEvent event) {\n+    }\n+\n+    public void afterCommit(TransactionEvent event) {\n+    }\n+\n+    public void afterCommitComplete(TransactionEvent event) {\n+    }\n+\n+    public void afterRollback(TransactionEvent event) {\n+    }\n+\n+    public void afterRollbackComplete(TransactionEvent event) {\n+    }\n+\n+    public void afterStateTransitions(TransactionEvent event) {\n+    }\n+}"}]}

