{"sha":"f03f7b4f61cf7470bbd690e458be189466c6b655","node_id":"MDY6Q29tbWl0MjA2MzY0OmYwM2Y3YjRmNjFjZjc0NzBiYmQ2OTBlNDU4YmUxODk0NjZjNmI2NTU=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2010-04-05T15:57:13Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2010-04-05T15:57:13Z"},"message":"OPENJPA-1608: fix pessimistic write lock in informix\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@930889 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f075cafd316cc4a2b91a9b92e88b52e2ad278901","url":"https://api.github.com/repos/apache/openjpa/git/trees/f075cafd316cc4a2b91a9b92e88b52e2ad278901"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/f03f7b4f61cf7470bbd690e458be189466c6b655","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/f03f7b4f61cf7470bbd690e458be189466c6b655","html_url":"https://github.com/apache/openjpa/commit/f03f7b4f61cf7470bbd690e458be189466c6b655","comments_url":"https://api.github.com/repos/apache/openjpa/commits/f03f7b4f61cf7470bbd690e458be189466c6b655/comments","author":null,"committer":null,"parents":[{"sha":"b2d71bbe4d829427a1e3ece3fa7e06d29069ef51","url":"https://api.github.com/repos/apache/openjpa/commits/b2d71bbe4d829427a1e3ece3fa7e06d29069ef51","html_url":"https://github.com/apache/openjpa/commit/b2d71bbe4d829427a1e3ece3fa7e06d29069ef51"}],"stats":{"total":42,"additions":24,"deletions":18},"files":[{"sha":"e7d2ee79d10f82cf24feca76c5f0c1f3b6ea7715","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/InformixDictionary.java","status":"modified","additions":24,"deletions":18,"changes":42,"blob_url":"https://github.com/apache/openjpa/blob/f03f7b4f61cf7470bbd690e458be189466c6b655/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/InformixDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/f03f7b4f61cf7470bbd690e458be189466c6b655/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/InformixDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/InformixDictionary.java?ref=f03f7b4f61cf7470bbd690e458be189466c6b655","patch":"@@ -27,7 +27,6 @@\n import java.sql.Types;\n import java.util.Arrays;\n import java.util.Collection;\n-import java.util.Set;\n \n import org.apache.openjpa.jdbc.identifier.DBIdentifier;\n import org.apache.openjpa.jdbc.identifier.DBIdentifier.DBIdentifierType;\n@@ -317,24 +316,15 @@ public Connection decorate(Connection conn)\n \n         // if we haven't already done so, initialize the lock mode of the\n         // connection\n-        if (lockModeEnabled && _seenConnections.add(conn)) {\n-            String sql = \"SET LOCK MODE TO WAIT\";\n-            if (lockWaitSeconds > 0)\n-                sql = sql + \" \" + lockWaitSeconds;\n-\n-            Statement stmnt = null;\n-            try {\n-                stmnt = conn.createStatement();\n-                stmnt.executeUpdate(sql);\n-            } catch (SQLException se) {\n-                throw SQLExceptions.getStore(se, this);\n-            } finally {\n-                if (stmnt != null)\n-                    try {\n-                        stmnt.close();\n-                    } catch (SQLException se) {\n-                    }\n+        if (_seenConnections.add(conn)) {\n+            if (lockModeEnabled) {\n+                String sql = \"SET LOCK MODE TO WAIT\";\n+                if (lockWaitSeconds > 0)\n+                    sql = sql + \" \" + lockWaitSeconds;\n+                execute(sql, conn);\n             }\n+            String sql = \"SET ENVIRONMENT RETAINUPDATELOCKS 'ALL'\";\n+            execute(sql, conn);\n         }\n \n         // the datadirect driver requires that we issue a rollback before using\n@@ -346,6 +336,22 @@ public Connection decorate(Connection conn)\n             }\n         return conn;\n     }\n+    \n+    private void execute(String sql, Connection conn) {\n+        Statement stmnt = null;\n+        try {\n+            stmnt = conn.createStatement();\n+            stmnt.executeUpdate(sql);\n+        } catch (SQLException se) {\n+            throw SQLExceptions.getStore(se, this);\n+        } finally {\n+            if (stmnt != null)\n+                try {\n+                    stmnt.close();\n+                } catch (SQLException se) {\n+                }\n+        }\n+    }\n \n     @Override\n     public void indexOf(SQLBuffer buf, FilterValue str, FilterValue find,"}]}

