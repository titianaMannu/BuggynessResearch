{"sha":"f04031edc128146bb7cfa52e072affb904930a43","node_id":"MDY6Q29tbWl0MjA2MzY0OmYwNDAzMWVkYzEyODE0NmJiN2NmYTUyZTA3MmFmZmI5MDQ5MzBhNDM=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-03-12T15:17:58Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-03-12T15:17:58Z"},"message":"OPENJPA-1565: Raise correct timeout exceptions.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@922290 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5ab306c46af6bf5fc60f7ad73d30f6f79ce3383a","url":"https://api.github.com/repos/apache/openjpa/git/trees/5ab306c46af6bf5fc60f7ad73d30f6f79ce3383a"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/f04031edc128146bb7cfa52e072affb904930a43","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/f04031edc128146bb7cfa52e072affb904930a43","html_url":"https://github.com/apache/openjpa/commit/f04031edc128146bb7cfa52e072affb904930a43","comments_url":"https://api.github.com/repos/apache/openjpa/commits/f04031edc128146bb7cfa52e072affb904930a43/comments","author":null,"committer":null,"parents":[{"sha":"4be5a5a194e541059709c9efcdd07c26990ab673","url":"https://api.github.com/repos/apache/openjpa/commits/4be5a5a194e541059709c9efcdd07c26990ab673","html_url":"https://github.com/apache/openjpa/commit/4be5a5a194e541059709c9efcdd07c26990ab673"}],"stats":{"total":81,"additions":45,"deletions":36},"files":[{"sha":"01e8ca71818c120da57ba83b941205c5f40f735a","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DerbyDictionary.java","status":"modified","additions":6,"deletions":12,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/f04031edc128146bb7cfa52e072affb904930a43/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DerbyDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/f04031edc128146bb7cfa52e072affb904930a43/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DerbyDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DerbyDictionary.java?ref=f04031edc128146bb7cfa52e072affb904930a43","patch":"@@ -135,27 +135,21 @@ public void closeDataSource(DataSource dataSource) {\n                 DriverManager.getConnection(conf.getConnectionURL()\n                     + \";shutdown=true\");\n             } catch (SQLException e) {\n-                // we actuall expect a SQLException to be thrown here:\n+                // we actually expect a SQLException to be thrown here:\n                 // Derby strangely uses that as a mechanism to report\n                 // a successful shutdown\n             }\n         }\n     }\n     \n     @Override\n-    protected Boolean matchErrorState(int subtype, Set<String> errorStates,\n-        SQLException ex) {\n-        Boolean recoverable = null;\n-        String errorState = ex.getSQLState();\n+    protected boolean isFatalException(int subtype, SQLException ex) {\n         int errorCode = ex.getErrorCode();\n-        if (errorStates.contains(errorState)) {\n-            recoverable = Boolean.FALSE;\n-            if ((subtype == StoreException.LOCK ||\n-                    subtype == StoreException.QUERY) && errorCode < 30000) {\n-                recoverable = Boolean.TRUE;\n-            }\n+        if ((subtype == StoreException.LOCK ||\n+             subtype == StoreException.QUERY) && errorCode <= 30000) {\n+            return false;\n         }\n-        return recoverable;\n+        return super.isFatalException(subtype, ex);\n     }\n \n }"},{"sha":"2daa460771cafb6118bc024b1f09aa0a2ba61e2d","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/FirebirdDictionary.java","status":"modified","additions":9,"deletions":5,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/f04031edc128146bb7cfa52e072affb904930a43/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/FirebirdDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/f04031edc128146bb7cfa52e072affb904930a43/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/FirebirdDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/FirebirdDictionary.java?ref=f04031edc128146bb7cfa52e072affb904930a43","patch":"@@ -25,6 +25,7 @@\n import java.sql.Types;\n import java.text.MessageFormat;\n import java.util.Arrays;\n+import java.util.Map;\n import java.util.Set;\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n@@ -38,6 +39,7 @@\n import org.apache.openjpa.jdbc.schema.Unique;\n import org.apache.openjpa.lib.identifier.IdentifierUtil;\n import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.util.StoreException;\n import org.apache.openjpa.util.UnsupportedException;\n \n /**\n@@ -482,10 +484,12 @@ protected String appendSize(Column col, String typeName) {\n      * Use error code as SQL state returned by Firebird is ambiguous.\n      */\n     @Override\n-    protected Boolean matchErrorState(int subtype, Set<String> errorStates,\n-        SQLException ex) {\n-        int errorCode = ex.getErrorCode();\n-        return errorStates.contains(String.valueOf(errorCode)) ? Boolean.FALSE\n-            : null;\n+    protected int matchErrorState(Map<Integer,Set<String>> errorStates, SQLException ex) {\n+        String errorState = \"\"+ex.getErrorCode();\n+        for (Map.Entry<Integer,Set<String>> states : errorStates.entrySet()) {\n+            if (states.getValue().contains(errorState))\n+                return states.getKey();\n+        }\n+        return StoreException.GENERAL;\n     }\n }"},{"sha":"586199e934fee6a281a140be56fef9eba7d80d2e","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MySQLDictionary.java","status":"modified","additions":10,"deletions":1,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/f04031edc128146bb7cfa52e072affb904930a43/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MySQLDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/f04031edc128146bb7cfa52e072affb904930a43/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MySQLDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MySQLDictionary.java?ref=f04031edc128146bb7cfa52e072affb904930a43","patch":"@@ -39,6 +39,7 @@\n import org.apache.openjpa.jdbc.schema.Index;\n import org.apache.openjpa.jdbc.schema.PrimaryKey;\n import org.apache.openjpa.jdbc.schema.Table;\n+import org.apache.openjpa.util.StoreException;\n \n /**\n  * Dictionary for MySQL.\n@@ -420,6 +421,15 @@ public String getSelectOperation(JDBCFetchConfiguration fetch) {\n         }\n         return result;\n     }\n+    \n+    @Override\n+    protected boolean isFatalException(int subtype, SQLException ex) {\n+        if ((subtype == StoreException.LOCK  && ex.getErrorCode() == 1205)\n+          ||(subtype == StoreException.QUERY && ex.getErrorCode() == 1317)) {\n+            return false;\n+        }\n+        return super.isFatalException(subtype, ex);\n+    }\n \n     /**\n      * OPENJPA-740 Special case for MySql special column types,\n@@ -443,6 +453,5 @@ else if (col.getSize() <= 16777215)\n             return super.getTypeName(col);\n         }\n     }\n-\n }\n "},{"sha":"948375dc0045dd8f6c1c605cca56579e37e9e1e7","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLServerDictionary.java","status":"modified","additions":5,"deletions":13,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/f04031edc128146bb7cfa52e072affb904930a43/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLServerDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/f04031edc128146bb7cfa52e072affb904930a43/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLServerDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLServerDictionary.java?ref=f04031edc128146bb7cfa52e072affb904930a43","patch":"@@ -281,20 +281,12 @@ public void setSupportsXMLColumn(boolean b) {\n     }\n     \n     @Override\n-    protected Boolean matchErrorState(int subtype, Set<String> errorStates,\n-        SQLException ex) {\n-        Boolean recoverable = null;\n+    protected boolean isFatalException(int subtype,  SQLException ex) {\n         String errorState = ex.getSQLState();\n-        if (errorStates.contains(errorState)) {\n-            recoverable = Boolean.FALSE;\n-            if (subtype == StoreException.LOCK && errorState.equals(\"1222\")) {\n-                recoverable = Boolean.TRUE;\n-            } else if (subtype == StoreException.QUERY &&\n-                errorState.equals(\"HY008\")) {\n-                recoverable = Boolean.TRUE;\n-            }\n-        }\n-        return recoverable;\n+        if ((subtype == StoreException.LOCK  && \"1222\".equals(errorState))\n+          ||(subtype == StoreException.QUERY && \"HY008\".equals(errorState)))\n+         return false;\n+        return super.isFatalException(subtype, ex);\n     }\n \n     /**"},{"sha":"c305140844a94871bccfeed14fd858fc476a6ad4","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfigurationImpl.java","status":"modified","additions":6,"deletions":5,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/f04031edc128146bb7cfa52e072affb904930a43/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/f04031edc128146bb7cfa52e072affb904930a43/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfigurationImpl.java?ref=f04031edc128146bb7cfa52e072affb904930a43","patch":"@@ -719,13 +719,14 @@ public void setHint(String key, Object value, Object original) {\n                 } else if (\"setWriteLockLevel\".equals(methodName) && !isActiveTransaction()) {\n                     _state.writeLockLevel = (Integer)value;\n                 } else {\n-                    setter.invoke(this, value);\n+                    setter.invoke(this, Filters.convertToMatchMethodArgument(value, setter));\n                 }\n             } catch (Exception e) {\n-                if (e instanceof IllegalArgumentException)\n-                    throw (IllegalArgumentException)e;\n-                throw new IllegalArgumentException(_loc.get(\"bad-hint-value\", key, toString(value), \n-                        toString(original)).getMessage(), e);\n+                String message = _loc.get(\"bad-hint-value\", key, toString(value), toString(original)).getMessage();\n+                if (e instanceof IllegalArgumentException) {\n+                    throw new IllegalArgumentException(message);\n+                }\n+                throw new IllegalArgumentException(message, e);\n             }\n         }\n         addHint(key, original);"},{"sha":"abd45c43e13b332daf530ffac0a26ecfa139fd2e","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/Exceptions.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/f04031edc128146bb7cfa52e072affb904930a43/openjpa-kernel/src/main/java/org/apache/openjpa/util/Exceptions.java","raw_url":"https://github.com/apache/openjpa/raw/f04031edc128146bb7cfa52e072affb904930a43/openjpa-kernel/src/main/java/org/apache/openjpa/util/Exceptions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/Exceptions.java?ref=f04031edc128146bb7cfa52e072affb904930a43","patch":"@@ -272,4 +272,13 @@ public static String toClassName(Class<?> cls) {\n             return toClassName(cls.getComponentType())+\"[]\";\n         return cls.getName();\n     }\n+    \n+    public static String toClassNames(Collection<? extends Class<?>> classes) {\n+        if (classes == null) return \"\";\n+        StringBuilder buffer = new StringBuilder();\n+        for (Class<?> cls : classes) {\n+            buffer.append(\"\\r\\n\").append(toClassName(cls));\n+        }\n+        return buffer.toString();\n+    }\n }"}]}

