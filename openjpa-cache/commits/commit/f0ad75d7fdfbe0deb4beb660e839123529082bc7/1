{"sha":"f0ad75d7fdfbe0deb4beb660e839123529082bc7","node_id":"MDY6Q29tbWl0MjA2MzY0OmYwYWQ3NWQ3ZmRmYmUwZGViNGJlYjY2MGU4MzkxMjM1MjkwODJiYzc=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2008-10-02T20:41:18Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2008-10-02T20:41:18Z"},"message":"OPENJPA-732 - Fixed BrokerImpl's fields of type Set to consistently use the correct implementation type of HashSet rather than ArrayList or LinkList.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@701236 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d472be546eef2e3a94562fbc72aa6a9ddf2f9a5e","url":"https://api.github.com/repos/apache/openjpa/git/trees/d472be546eef2e3a94562fbc72aa6a9ddf2f9a5e"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/f0ad75d7fdfbe0deb4beb660e839123529082bc7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/f0ad75d7fdfbe0deb4beb660e839123529082bc7","html_url":"https://github.com/apache/openjpa/commit/f0ad75d7fdfbe0deb4beb660e839123529082bc7","comments_url":"https://api.github.com/repos/apache/openjpa/commits/f0ad75d7fdfbe0deb4beb660e839123529082bc7/comments","author":null,"committer":null,"parents":[{"sha":"b1f1d3250caeab882e5c806ff15daedb9ae929b3","url":"https://api.github.com/repos/apache/openjpa/commits/b1f1d3250caeab882e5c806ff15daedb9ae929b3","html_url":"https://github.com/apache/openjpa/commit/b1f1d3250caeab882e5c806ff15daedb9ae929b3"}],"stats":{"total":430,"additions":414,"deletions":16},"files":[{"sha":"27fa3f7b68e7a12d49806c4a5d1a6aa6a4c277c6","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","status":"modified","additions":16,"deletions":16,"changes":32,"blob_url":"https://github.com/apache/openjpa/blob/f0ad75d7fdfbe0deb4beb660e839123529082bc7/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/f0ad75d7fdfbe0deb4beb660e839123529082bc7/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java?ref=f0ad75d7fdfbe0deb4beb660e839123529082bc7","patch":"@@ -1522,7 +1522,7 @@ public void setSavepoint(String name) {\n                 _savepoints = new LinkedMap();\r\n             } else {\r\n                 if (_savepointCache == null)\r\n-                    save.save(Collections.EMPTY_LIST);\r\n+                    save.save(Collections.EMPTY_SET);\r\n                 else {\r\n                     save.save(_savepointCache);\r\n                     _savepointCache.clear();\r\n@@ -2190,7 +2190,7 @@ protected void endTransaction(int status) {\n         if (hasTransactionalObjects())\r\n             transStates = _transCache;\r\n         else\r\n-            transStates = Collections.EMPTY_LIST;\r\n+            transStates = Collections.EMPTY_SET;\r\n \r\n         // fire after rollback/commit event\r\n         Collection mobjs = null;\r\n@@ -2265,7 +2265,7 @@ protected void endTransaction(int status) {\n \r\n         // now clear trans cache; keep cleared version rather than\r\n         // null to avoid having to re-create the set later; more efficient\r\n-        if (transStates != Collections.EMPTY_LIST) {\r\n+        if (transStates != Collections.EMPTY_SET) {\r\n             _transCache = (TransactionalCache) transStates;\r\n             _transCache.clear();\r\n         }\r\n@@ -3310,7 +3310,7 @@ public void transactionalAll(Collection objs, boolean updateVersion,\n             Object obj;\r\n             StateManagerImpl sm;\r\n             ClassMetaData meta;\r\n-            Collection sms = new ArrayList(objs.size());\r\n+            Collection sms = new HashSet(objs.size());\r\n             List exceps = null;\r\n             for (Iterator itr = objs.iterator(); itr.hasNext();) {\r\n                 obj = itr.next();\r\n@@ -3637,7 +3637,7 @@ public void lockAll(Collection objs, int level, int timeout,\n         try {\r\n             assertActiveTransaction();\r\n \r\n-            Collection sms = new ArrayList(objs.size());\r\n+            Collection sms = new HashSet(objs.size());\r\n             Object obj;\r\n             StateManagerImpl sm;\r\n             for (Iterator itr = objs.iterator(); itr.hasNext();) {\r\n@@ -3784,7 +3784,7 @@ protected Collection getManagedStates() {\n      */\r\n     protected Collection getTransactionalStates() {\r\n         if (!hasTransactionalObjects())\r\n-            return Collections.EMPTY_LIST;\r\n+            return Collections.EMPTY_SET;\r\n         return _transCache.copy();\r\n     }\r\n \r\n@@ -3803,7 +3803,7 @@ private boolean hasTransactionalObjects() {\n      */\r\n     protected Collection getDirtyStates() {\r\n         if (!hasTransactionalObjects())\r\n-            return Collections.EMPTY_LIST;\r\n+            return Collections.EMPTY_SET;\r\n \r\n         return _transCache.copyDirty();\r\n     }\r\n@@ -3814,8 +3814,8 @@ protected Collection getDirtyStates() {\n      */\r\n     protected Collection getPendingTransactionalStates() {\r\n         if (_pending == null)\r\n-            return Collections.EMPTY_LIST;\r\n-        return new ArrayList(_pending);\r\n+            return Collections.EMPTY_SET;\r\n+        return new HashSet(_pending);\r\n     }\r\n \r\n     /**\r\n@@ -4036,19 +4036,19 @@ public void dirtyType(Class cls) {\n \r\n     public Collection getPersistedTypes() {\r\n         if (_persistedClss == null || _persistedClss.isEmpty())\r\n-            return Collections.EMPTY_LIST;\r\n+            return Collections.EMPTY_SET;\r\n         return Collections.unmodifiableCollection(_persistedClss);\r\n     }\r\n \r\n     public Collection getUpdatedTypes() {\r\n         if (_updatedClss == null || _updatedClss.isEmpty())\r\n-            return Collections.EMPTY_LIST;\r\n+            return Collections.EMPTY_SET;\r\n         return Collections.unmodifiableCollection(_updatedClss);\r\n     }\r\n \r\n     public Collection getDeletedTypes() {\r\n         if (_deletedClss == null || _deletedClss.isEmpty())\r\n-            return Collections.EMPTY_LIST;\r\n+            return Collections.EMPTY_SET;\r\n         return Collections.unmodifiableCollection(_deletedClss);\r\n     }\r\n \r\n@@ -4503,12 +4503,12 @@ public TransactionalCache(boolean orderDirty) {\n          */\r\n         public Collection copy() {\r\n             if (isEmpty())\r\n-                return Collections.EMPTY_LIST;\r\n+                return Collections.EMPTY_SET;\r\n \r\n             // size may not be entirely accurate due to refs expiring, so\r\n             // manually copy each object; doesn't matter this way if size too\r\n             // big by some\r\n-            List copy = new ArrayList(size());\r\n+            Set copy = new HashSet(size());\r\n             if (_dirty != null)\r\n                 for (Iterator itr = _dirty.iterator(); itr.hasNext();)\r\n                     copy.add(itr.next());\r\n@@ -4523,8 +4523,8 @@ public Collection copy() {\n          */\r\n         public Collection copyDirty() {\r\n             if (_dirty == null || _dirty.isEmpty())\r\n-                return Collections.EMPTY_LIST;\r\n-            return new ArrayList(_dirty);\r\n+                return Collections.EMPTY_SET;\r\n+            return new HashSet(_dirty);\r\n         }\r\n \r\n         /**\r"},{"sha":"790218614d9557af1d2984424173354b0cd52729","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/Message.java","status":"added","additions":112,"deletions":0,"changes":112,"blob_url":"https://github.com/apache/openjpa/blob/f0ad75d7fdfbe0deb4beb660e839123529082bc7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/Message.java","raw_url":"https://github.com/apache/openjpa/raw/f0ad75d7fdfbe0deb4beb660e839123529082bc7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/Message.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/Message.java?ref=f0ad75d7fdfbe0deb4beb660e839123529082bc7","patch":"@@ -0,0 +1,112 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.callbacks;\r\n+\r\n+import java.util.Date;\r\n+\r\n+import javax.persistence.Basic;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.EntityListeners;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.Version;\r\n+\r\n+/**\r\n+ * A very simple persistent entity that holds a \"message\", has a \"created\" field\r\n+ * that is initialized to the time at which the object was created, and an id\r\n+ * field that is initialized to the current time.\r\n+ */\r\n+@Entity\r\n+@EntityListeners(value = MessageListenerImpl.class)\r\n+public class Message {\r\n+    @Id\r\n+    private long id = System.currentTimeMillis();\r\n+\r\n+    @Basic\r\n+    private String message;\r\n+\r\n+    @Basic\r\n+    private Date created = null;\r\n+\r\n+    @Basic\r\n+    private Date updated = null;\r\n+\r\n+    @Version\r\n+    Integer version;\r\n+\r\n+    public Message() {\r\n+    }\r\n+\r\n+    public Message(String msg) {\r\n+        message = msg;\r\n+    }\r\n+\r\n+    public void setId(long val) {\r\n+        id = val;\r\n+    }\r\n+\r\n+    public long getId() {\r\n+        return id;\r\n+    }\r\n+\r\n+    public void setMessage(String msg) {\r\n+        message = msg;\r\n+    }\r\n+\r\n+    public String getMessage() {\r\n+        return message;\r\n+    }\r\n+\r\n+    public void setCreated(Date date) {\r\n+        created = date;\r\n+    }\r\n+\r\n+    public Date getCreated() {\r\n+        return created;\r\n+    }\r\n+\r\n+    public Integer getVersion() {\r\n+        return version;\r\n+    }\r\n+\r\n+    public void setVersion(Integer version) {\r\n+        this.version = version;\r\n+    }\r\n+\r\n+    public Date getUpdated() {\r\n+        return updated;\r\n+    }\r\n+\r\n+    public void setUpdated(Date updated) {\r\n+        this.updated = updated;\r\n+    }\r\n+\r\n+    @Override\r\n+    public boolean equals(Object o) {\r\n+        if (o instanceof Message) {\r\n+            Message other = (Message) o;\r\n+            return other.getId() == this.getId();\r\n+        }\r\n+        return false;\r\n+    }\r\n+\r\n+    @Override\r\n+    public int hashCode() {\r\n+        return super.hashCode();\r\n+    }\r\n+}\n\\ No newline at end of file"},{"sha":"e9e098428dca39aa28c0e435082d930d41afe743","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/MessageListenerImpl.java","status":"added","additions":102,"deletions":0,"changes":102,"blob_url":"https://github.com/apache/openjpa/blob/f0ad75d7fdfbe0deb4beb660e839123529082bc7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/MessageListenerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/f0ad75d7fdfbe0deb4beb660e839123529082bc7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/MessageListenerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/MessageListenerImpl.java?ref=f0ad75d7fdfbe0deb4beb660e839123529082bc7","patch":"@@ -0,0 +1,102 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.callbacks;\r\n+\r\n+import java.util.Date;\r\n+\r\n+import javax.persistence.PrePersist;\r\n+import javax.persistence.PostPersist;\r\n+import javax.persistence.PostLoad;\r\n+import javax.persistence.PreUpdate;\r\n+import javax.persistence.PostUpdate;\r\n+import javax.persistence.PreRemove;\r\n+import javax.persistence.PostRemove;\r\n+\r\n+public class MessageListenerImpl {\r\n+\r\n+    public static int prePersistCount;\r\n+    public static int postPersistCount;\r\n+    public static int preUpdateCount;\r\n+    public static int postUpdateCount;\r\n+    public static int preRemoveCount;\r\n+    public static int postRemoveCount;\r\n+    public static int postLoadCount;\r\n+\r\n+    @PrePersist\r\n+    public void prePersist(Object o) {\r\n+        prePersistCount++;\r\n+\r\n+        if (o instanceof Message) {\r\n+            ((Message) o).setCreated(new Date());\r\n+            ((Message) o).setUpdated(new Date());\r\n+        }\r\n+    }\r\n+\r\n+    @PostPersist\r\n+    public void postPersist(Object o) {\r\n+        postPersistCount++;\r\n+    }\r\n+\r\n+    @PostLoad\r\n+    public void postLoad(Object o) {\r\n+        postLoadCount++;\r\n+    }\r\n+\r\n+    @PreUpdate\r\n+    public void preUpdate(Object o) {\r\n+        preUpdateCount++;\r\n+\r\n+        if (o instanceof Message) {\r\n+            ((Message) o).setUpdated(new Date());\r\n+        }\r\n+    }\r\n+\r\n+    @PostUpdate\r\n+    public void postUpdate(Object o) {\r\n+        postUpdateCount++;\r\n+    }\r\n+\r\n+    @PreRemove\r\n+    public void preRemove(Object o) {\r\n+        preRemoveCount++;\r\n+    }\r\n+\r\n+    @PostRemove\r\n+    public void postRemove(Object o) {\r\n+        postRemoveCount++;\r\n+    }\r\n+\r\n+    public static void resetCounters() {\r\n+        prePersistCount = 0;\r\n+        postPersistCount = 0;\r\n+        preUpdateCount = 0;\r\n+        postUpdateCount = 0;\r\n+        preRemoveCount = 0;\r\n+        postRemoveCount = 0;\r\n+        postLoadCount = 0;\r\n+    }\r\n+\r\n+    public static String getStates() {\r\n+        return \"prePersistCount = \" + prePersistCount + \", postPersistCount = \"\r\n+            + postPersistCount + \", preUpdateCount = \" + preUpdateCount\r\n+            + \", postUpdateCount = \" + postUpdateCount + \", preRemoveCount = \"\r\n+            + preRemoveCount + \", postRemoveCount = \" + postRemoveCount\r\n+            + \", postLoadCount = \" + postLoadCount;\r\n+    }\r\n+}\r"},{"sha":"d33c5ffa3a2914d3f3b745b2587007039bcecfa1","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/TestMessageListeners.java","status":"added","additions":180,"deletions":0,"changes":180,"blob_url":"https://github.com/apache/openjpa/blob/f0ad75d7fdfbe0deb4beb660e839123529082bc7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/TestMessageListeners.java","raw_url":"https://github.com/apache/openjpa/raw/f0ad75d7fdfbe0deb4beb660e839123529082bc7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/TestMessageListeners.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/TestMessageListeners.java?ref=f0ad75d7fdfbe0deb4beb660e839123529082bc7","patch":"@@ -0,0 +1,180 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.callbacks;\r\n+\r\n+import javax.persistence.Query;\r\n+\r\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+public class TestMessageListeners extends SingleEMFTestCase {\r\n+\r\n+    public void setUp() {\r\n+        setUp(CLEAR_TABLES);\r\n+    }\r\n+\r\n+    @Override\r\n+    protected String getPersistenceUnitName() {\r\n+        return \"listener-pu\";\r\n+    }\r\n+\r\n+    public void testUpdateInPrePersist() {\r\n+        // Create a new EntityManager from the EntityManagerFactory. The\r\n+        // EntityManager is the main object in the persistence API, and is\r\n+        // used to create, delete, and query objects, as well as access\r\n+        // the current transaction\r\n+        OpenJPAEntityManager em = emf.createEntityManager();\r\n+        try {\r\n+            // Begin a new local transaction so that we can persist a new entity\r\n+            em.getTransaction().begin();\r\n+\r\n+            MessageListenerImpl.resetCounters();\r\n+\r\n+            // Create and persist a new Message entity\r\n+            Message message = new Message(\"Hello Persistence!\");\r\n+            assertNull(\"Test message's created field to be null.\", message\r\n+                .getCreated());\r\n+            assertNull(\"Test message's updated field to be null.\", message\r\n+                .getUpdated());\r\n+\r\n+            em.persist(message);\r\n+\r\n+            // Pre-persist invoked, created and updated fields set\r\n+            assertStatus(1, 0, 0, 0, 0, 0, 0);\r\n+            assertNotNull(\"Test message's created field being set.\", message\r\n+                .getCreated());\r\n+            assertNotNull(\"Test message's updated field being set.\", message\r\n+                .getUpdated());\r\n+\r\n+            em.flush();\r\n+            // Post-persist invoked\r\n+            assertStatus(1, 1, 0, 0, 0, 0, 0);\r\n+\r\n+            em.clear();\r\n+\r\n+            // Perform a simple query to get the Message\r\n+            Query q = em.createQuery(\"select m from Message m where m.id=\"\r\n+                + message.getId());\r\n+            Message m = (Message) q.getSingleResult();\r\n+\r\n+            assertEquals(\"Test first expected message.\", \"Hello Persistence!\",\r\n+                m.getMessage());\r\n+            assertNotNull(\"Test message's created field being set.\", m\r\n+                .getCreated());\r\n+            assertNotNull(\"Test message's updated field being set.\", m\r\n+                .getUpdated());\r\n+\r\n+            // query trigger a load because em is cleared.\r\n+            assertStatus(1, 1, 0, 0, 0, 0, 1);\r\n+\r\n+            em.getTransaction().commit();\r\n+\r\n+            // since data is flushed, commit data with no event fired.\r\n+            assertStatus(1, 1, 0, 0, 0, 0, 1);\r\n+        } finally {\r\n+            if (em != null && em.getTransaction().isActive())\r\n+                em.getTransaction().rollback();\r\n+            if (em != null && em.isOpen())\r\n+                em.close();\r\n+        }\r\n+    }\r\n+\r\n+    public void testUpdateInPreUpdate() {\r\n+        // Create a new EntityManager from the EntityManagerFactory. The\r\n+        // EntityManager is the main object in the persistence API, and is\r\n+        // used to create, delete, and query objects, as well as access\r\n+        // the current transaction\r\n+        OpenJPAEntityManager em = emf.createEntityManager();\r\n+        try {\r\n+            // Begin a new local transaction so that we can persist a new entity\r\n+            em.getTransaction().begin();\r\n+\r\n+            MessageListenerImpl.resetCounters();\r\n+\r\n+            // Create and persist a new Message entity\r\n+            Message message = new Message(\"Hello Persistence!\");\r\n+            assertNull(\"Test message's created field to be null.\", message\r\n+                .getCreated());\r\n+            assertNull(\"Test message's updated field to be null.\", message\r\n+                .getUpdated());\r\n+\r\n+            em.persist(message);\r\n+\r\n+            // Pre-persist invoked, created and updated fields set\r\n+            assertStatus(1, 0, 0, 0, 0, 0, 0);\r\n+            assertNotNull(\"Test message's created field being set.\", message\r\n+                .getCreated());\r\n+            assertNotNull(\"Test message's updated field being set.\", message\r\n+                .getUpdated());\r\n+\r\n+            // Perform a simple query to get the Message\r\n+            Query q = em.createQuery(\"select m from Message m where m.id=\"\r\n+                + message.getId());\r\n+            Message m = (Message) q.getSingleResult();\r\n+            assertEquals(\"Test first expected message.\", \"Hello Persistence!\",\r\n+                m.getMessage());\r\n+            assertNotNull(\"Test message's created field being set.\", m\r\n+                .getCreated());\r\n+            assertNotNull(\"Test message's updated field being set.\", m\r\n+                .getUpdated());\r\n+\r\n+            // Query cause flush to occur, hence fire the postPersist event\r\n+            assertStatus(1, 1, 0, 0, 0, 0, 0);\r\n+\r\n+            // Create and persist another new Message entity\r\n+            message = new Message(\"Hello Persistence 2!\");\r\n+            assertNull(\"Test message's created field to be null.\", message\r\n+                .getCreated());\r\n+            assertNull(\"Test message's updated field to be null.\", message\r\n+                .getUpdated());\r\n+\r\n+            em.persist(message);\r\n+\r\n+            // Pre-persist invoked, created and updated fields set\r\n+            assertStatus(2, 1, 0, 0, 0, 0, 0);\r\n+            assertNotNull(\"Test message's created field being set.\", message\r\n+                .getCreated());\r\n+            assertNotNull(\"Test message's updated field being set.\", message\r\n+                .getUpdated());\r\n+\r\n+            em.getTransaction().commit();\r\n+\r\n+            // Complete the 2nd @postPersist and the @preUpdate caused by\r\n+            // setters calls in @postPersist\r\n+            assertStatus(2, 2, 1, 1, 0, 0, 0);\r\n+\r\n+        } finally {\r\n+            if (em != null && em.getTransaction().isActive())\r\n+                em.getTransaction().rollback();\r\n+            if (em != null && em.isOpen())\r\n+                em.close();\r\n+        }\r\n+    }\r\n+\r\n+    private void assertStatus(int prePersist, int postPersist, int preUpdate,\r\n+        int postUpdate, int preRemove, int postRemove, int postLoad) {\r\n+        assertEquals(prePersist, MessageListenerImpl.prePersistCount);\r\n+        assertEquals(postPersist, MessageListenerImpl.postPersistCount);\r\n+        assertEquals(preUpdate, MessageListenerImpl.preUpdateCount);\r\n+        assertEquals(postUpdate, MessageListenerImpl.postUpdateCount);\r\n+        assertEquals(preRemove, MessageListenerImpl.preRemoveCount);\r\n+        assertEquals(postRemove, MessageListenerImpl.postRemoveCount);\r\n+        assertEquals(postLoad, MessageListenerImpl.postLoadCount);\r\n+    }\r\n+}\r"},{"sha":"2cd94a6bb47b29964678125e74d98dda6d846c0b","filename":"openjpa-persistence-jdbc/src/test/resources/META-INF/listener-orm.xml","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/f0ad75d7fdfbe0deb4beb660e839123529082bc7/openjpa-persistence-jdbc/src/test/resources/META-INF/listener-orm.xml","raw_url":"https://github.com/apache/openjpa/raw/f0ad75d7fdfbe0deb4beb660e839123529082bc7/openjpa-persistence-jdbc/src/test/resources/META-INF/listener-orm.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/META-INF/listener-orm.xml?ref=f0ad75d7fdfbe0deb4beb660e839123529082bc7","patch":"@@ -34,4 +34,7 @@\n     <entity class=\"EntityListenerEntity\">\r\n         <exclude-default-listeners/>\r\n     </entity>\r\n+    <entity class=\"Message\">\r\n+        <exclude-default-listeners/>\r\n+    </entity>\r\n </entity-mappings>\n\\ No newline at end of file"},{"sha":"23afdc840c92bd06dc82068b79eb04580dfd0db8","filename":"openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/f0ad75d7fdfbe0deb4beb660e839123529082bc7/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/f0ad75d7fdfbe0deb4beb660e839123529082bc7/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml?ref=f0ad75d7fdfbe0deb4beb660e839123529082bc7","patch":"@@ -84,6 +84,7 @@\n         <mapping-file>META-INF/listener-orm.xml</mapping-file>\n         <class>org.apache.openjpa.persistence.callbacks.EntityListenerEntity</class>\n         <class>org.apache.openjpa.persistence.callbacks.GlobalListenerEntity</class>\n+        <class>org.apache.openjpa.persistence.callbacks.Message</class>\r\n         <properties>\n             <property name=\"openjpa.jdbc.SynchronizeMappings\"\n                   value=\"buildSchema(ForeignKeys=true)\"/>"}]}

