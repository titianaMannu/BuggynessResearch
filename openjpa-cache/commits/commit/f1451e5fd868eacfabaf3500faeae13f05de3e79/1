{"sha":"f1451e5fd868eacfabaf3500faeae13f05de3e79","node_id":"MDY6Q29tbWl0MjA2MzY0OmYxNDUxZTVmZDg2OGVhY2ZhYmFmMzUwMGZhZWFlMTNmMDVkZTNlNzk=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-18T00:53:03Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-18T00:53:03Z"},"message":"OPENJPA-1392, OPENJPA-1393: countDistinct() and integer return type for size()\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@881638 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e13f69fc902419aa10163ea0b00d3eeb5cf44a1c","url":"https://api.github.com/repos/apache/openjpa/git/trees/e13f69fc902419aa10163ea0b00d3eeb5cf44a1c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/f1451e5fd868eacfabaf3500faeae13f05de3e79","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/f1451e5fd868eacfabaf3500faeae13f05de3e79","html_url":"https://github.com/apache/openjpa/commit/f1451e5fd868eacfabaf3500faeae13f05de3e79","comments_url":"https://api.github.com/repos/apache/openjpa/commits/f1451e5fd868eacfabaf3500faeae13f05de3e79/comments","author":null,"committer":null,"parents":[{"sha":"27996efb4882423eb1fce9425626d068e4eb501b","url":"https://api.github.com/repos/apache/openjpa/commits/27996efb4882423eb1fce9425626d068e4eb501b","html_url":"https://github.com/apache/openjpa/commit/27996efb4882423eb1fce9425626d068e4eb501b"}],"stats":{"total":39,"additions":33,"deletions":6},"files":[{"sha":"8f45e8ef714fceef8331fde7e81051e663d820b8","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestTypesafeCriteria.java","status":"modified","additions":25,"deletions":1,"changes":26,"blob_url":"https://github.com/apache/openjpa/blob/f1451e5fd868eacfabaf3500faeae13f05de3e79/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestTypesafeCriteria.java","raw_url":"https://github.com/apache/openjpa/raw/f1451e5fd868eacfabaf3500faeae13f05de3e79/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestTypesafeCriteria.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestTypesafeCriteria.java?ref=f1451e5fd868eacfabaf3500faeae13f05de3e79","patch":"@@ -1403,6 +1403,30 @@ public void testDefaultProjectionWithUntypedResult() {\n                 cb.nullLiteral(String.class)));\n \n         Query q = em.createQuery(cquery);\n-\n+    }\n+    \n+    public void testCountDistinct() {\n+        // JPQL Parser does not do well with the following \n+        String jpql = \"select DISTINCT COUNT(a.name) from Account a\";\n+        \n+        CriteriaQuery<Long> c = cb.createQuery(Long.class);\n+        Root<Account> a = c.from(Account.class);\n+        c.select(cb.countDistinct(a.get(Account_.name)));\n+        \n+        // hence we do not check equivalence against JPQL \n+        // assertEquivalence(c, jpql);\n+        // but check against SQL\n+        String expectedSQL = \"SELECT COUNT(DISTINCT t0.name) FROM CR_ACCT t0\";\n+        executeAndCompareSQL(c, expectedSQL);\n+    }\n+    \n+    public void testSizeReturnsInteger() {\n+        String jpql = \"select SIZE(c.accounts) from Customer c\";\n+        CriteriaQuery<Integer> c = cb.createQuery(Integer.class);\n+        Root<Customer> customer = c.from(Customer.class);\n+        c.select(cb.size(customer.get(Customer_.accounts)));\n+        \n+        assertEquivalence(c, jpql);\n+        \n     }\n }"},{"sha":"fa5ff68ae14347c65ec2b92a22dacf345d6551c6","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/Expressions.java","status":"modified","additions":8,"deletions":5,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/f1451e5fd868eacfabaf3500faeae13f05de3e79/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/Expressions.java","raw_url":"https://github.com/apache/openjpa/raw/f1451e5fd868eacfabaf3500faeae13f05de3e79/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/Expressions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/Expressions.java?ref=f1451e5fd868eacfabaf3500faeae13f05de3e79","patch":"@@ -303,8 +303,8 @@ public  Count(Expression<?> x, boolean distinct) {\n \n         @Override\n         public Value toValue(ExpressionFactory factory, CriteriaQueryImpl<?> q) {\n-            Value v = factory.count(Expressions.toValue(e, factory, q));\n-            return _distinct ? factory.distinct(v) : v;\n+            Value v = Expressions.toValue(e, factory, q);\n+            return _distinct ? factory.count(factory.distinct(v)) : factory.count(v);\n         }\n         \n         @Override\n@@ -387,11 +387,14 @@ public  Size(Collection<?> x) {\n         @Override\n         public Value toValue(ExpressionFactory factory, CriteriaQueryImpl<?> q) {\n             Value val = Expressions.toValue(e, factory, q);\n+            Value result;\n             if (val instanceof Literal && ((Literal)val).getParseType() == Literal.TYPE_COLLECTION)\n-                return factory.newLiteral(((Collection)((Literal)val).getValue()).size(), \n+                result = factory.newLiteral(((Collection)((Literal)val).getValue()).size(), \n                     Literal.TYPE_NUMBER);\n-                \n-            return factory.size(val);\n+            else\n+                result = factory.size(val);\n+            result.setImplicitType(Integer.class);\n+            return result;\n         }\n         \n         public StringBuilder asValue(AliasContext q) {"}]}

