{"sha":"f153a4ea37a2ea16247fd773756fa5da27f075ff","node_id":"MDY6Q29tbWl0MjA2MzY0OmYxNTNhNGVhMzdhMmVhMTYyNDdmZDc3Mzc1NmZhNWRhMjdmMDc1ZmY=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-03-12T14:10:03Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-03-12T14:10:03Z"},"message":"Deleting old tag will recreate from rev 752732\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/tags/1.2.1@752872 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4b825dc642cb6eb9a060e54bf8d69288fbee4904","url":"https://api.github.com/repos/apache/openjpa/git/trees/4b825dc642cb6eb9a060e54bf8d69288fbee4904"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/f153a4ea37a2ea16247fd773756fa5da27f075ff","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/f153a4ea37a2ea16247fd773756fa5da27f075ff","html_url":"https://github.com/apache/openjpa/commit/f153a4ea37a2ea16247fd773756fa5da27f075ff","comments_url":"https://api.github.com/repos/apache/openjpa/commits/f153a4ea37a2ea16247fd773756fa5da27f075ff/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"f290fad39391ba583289c4abfe52d3f81f95d18a","url":"https://api.github.com/repos/apache/openjpa/commits/f290fad39391ba583289c4abfe52d3f81f95d18a","html_url":"https://github.com/apache/openjpa/commit/f290fad39391ba583289c4abfe52d3f81f95d18a"}],"stats":{"total":895102,"additions":0,"deletions":895102},"files":[{"sha":"b59c5f2594de30f8418a4f0c0d46751b47dae7e7","filename":"1.2.x/openjpa-all/pom.xml","status":"removed","additions":0,"deletions":180,"changes":180,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-all/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-all/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-all/pom.xml?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,180 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<!--\n- Licensed to the Apache Software Foundation (ASF) under one\n- or more contributor license agreements.  See the NOTICE file\n- distributed with this work for additional information\n- regarding copyright ownership.  The ASF licenses this file\n- to you under the Apache License, Version 2.0 (the\n- \"License\"); you may not use this file except in compliance\n- with the License.  You may obtain a copy of the License at\n- \n- http://www.apache.org/licenses/LICENSE-2.0\n- \n- Unless required by applicable law or agreed to in writing,\n- software distributed under the License is distributed on an\n- \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- KIND, either express or implied.  See the License for the\n- specific language governing permissions and limitations\n- under the License.   \n--->\n-<!-- \n-    Please keep the project tag on one line to avoid confusing \n-    the release plugin.\n--->\n-<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n-    <modelVersion>4.0.0</modelVersion>\n-    <artifactId>openjpa</artifactId>\n-    <packaging>jar</packaging>\n-    <name>OpenJPA Aggregate Jar</name>\n-    <parent>\n-        <groupId>org.apache.openjpa</groupId>\n-        <artifactId>openjpa-parent</artifactId>\n-        <version>1.2.1</version>\n-    </parent>\n-\n-    <build>\n-        <plugins>\n-            <plugin>\n-                <!--\n-                    Manually build an aggregate jar of all the other\n-                    openjpa-* jars using ant. We cannot use the assembly\n-                    plugin, since it doesn't provide support for appending\n-                    multiple same-named files to each other (which is\n-                    required for correctly aggregating services files).\n-                -->\n-                <groupId>org.apache.maven.plugins</groupId>\n-                <artifactId>maven-antrun-plugin</artifactId>\n-                <executions>\n-                    <execution>\n-                        <id>build-single-jar</id>\n-                        <phase>process-classes</phase>\n-                        <configuration>\n-                            <tasks>\n-                                <unjar overwrite=\"false\" dest=\"${basedir}/target/classes\">\n-                                    <fileset dir=\"${basedir}/..\">\n-                                        <include name=\"*/target/openjpa-*.jar\" />\n-                                        <exclude name=\"*/target/openjpa-examples-*.jar\" />\n-                                        <exclude name=\"**/*-sources.jar\" />\n-                                        <exclude name=\"**/*-javadoc.jar\" />\n-                                    </fileset>\n-                                </unjar>\n-\n-                                <!--\n-                                    need to manually concatinate the services \n-                                    resources so they are aggregated\n-                                -->\n-                                <macrodef name=\"aggregate-file\">\n-                                   <attribute name=\"servicename\" />\n-                                    <sequential>\n-                                        <echo>Building service: @{servicename}</echo>\n-                                        <concat destfile=\"${basedir}/target/classes/META-INF/services/@{servicename}\">\n-                                            <fileset dir=\"${basedir}/..\" includes=\"*/src/main/resources/META-INF/services/@{servicename}\" />\n-                                        </concat>\n-                                    </sequential>\n-                                </macrodef>\n-\n-                                <aggregate-file servicename=\"org.apache.openjpa.lib.conf.ProductDerivation\" />\n-                                <aggregate-file servicename=\"javax.persistence.spi.PersistenceProvider\" />\n-                                <aggregate-file servicename=\"org.apache.openjpa.kernel.exps.ExpressionParser\" />\n-                            </tasks>\n-                        </configuration>\n-                        <goals>\n-                            <goal>run</goal>\n-                        </goals>\n-                    </execution>\n-                </executions>\n-            </plugin>\n-\n-            <!--\n-                create enhancer pre-main attribute\n-            -->\n-            <plugin>\n-                <groupId>org.apache.maven.plugins</groupId>\n-                <artifactId>maven-jar-plugin</artifactId>\n-                <configuration>\n-                    <archive>\n-                        <manifest>\n-                           <mainClass>org.apache.openjpa.conf.OpenJPAVersion</mainClass>\n-                        </manifest>\n-                        <manifestEntries>\n-                            <Premain-Class>\n-                                org.apache.openjpa.enhance.PCEnhancerAgent\n-                            </Premain-Class>\n-                            <Can-Redefine-Classes>true</Can-Redefine-Classes>\n-                        </manifestEntries>\n-                    </archive>\n-                </configuration>\n-            </plugin>\n-        </plugins>\n-    </build>\n-    <dependencies>\n-        <dependency>\n-            <groupId>org.apache.openjpa</groupId>\n-            <artifactId>openjpa-lib</artifactId>\n-            <version>${pom.version}</version>\n-            <scope>provided</scope>\n-        </dependency>\n-        <dependency>\n-            <groupId>org.apache.openjpa</groupId>\n-            <artifactId>openjpa-kernel</artifactId>\n-            <version>${pom.version}</version>\n-            <scope>provided</scope>\n-        </dependency>\n-        <dependency>\n-            <groupId>org.apache.openjpa</groupId>\n-            <artifactId>openjpa-jdbc</artifactId>\n-            <version>${pom.version}</version>\n-            <scope>provided</scope>\n-        </dependency>\n-        <dependency>\n-            <groupId>org.apache.openjpa</groupId>\n-            <artifactId>openjpa-persistence</artifactId>\n-            <version>${pom.version}</version>\n-            <scope>provided</scope>\n-        </dependency>\n-        <dependency>\n-            <groupId>org.apache.openjpa</groupId>\n-            <artifactId>openjpa-persistence-jdbc</artifactId>\n-            <version>${pom.version}</version>\n-            <scope>provided</scope>\n-        </dependency>\n-        <dependency>\n-            <groupId>org.apache.openjpa</groupId>\n-            <artifactId>openjpa-xmlstore</artifactId>\n-            <version>${pom.version}</version>\n-            <scope>provided</scope>\n-        </dependency>\n-        <dependency>\n-            <groupId>net.sourceforge.serp</groupId>\n-            <artifactId>serp</artifactId>\n-        </dependency>\n-        <dependency>\n-            <groupId>commons-logging</groupId>\n-            <artifactId>commons-logging</artifactId>\n-        </dependency>\n-        <dependency>\n-            <groupId>commons-lang</groupId>\n-            <artifactId>commons-lang</artifactId>\n-        </dependency>\n-        <dependency>\n-            <groupId>commons-collections</groupId>\n-            <artifactId>commons-collections</artifactId>\n-        </dependency>\n-        <dependency>\n-            <groupId>commons-pool</groupId>\n-            <artifactId>commons-pool</artifactId>\n-        </dependency>\n-        <dependency>\n-            <groupId>org.apache.geronimo.specs</groupId>\n-            <artifactId>geronimo-jms_1.1_spec</artifactId>\n-        </dependency>\n-        <dependency>\n-            <groupId>org.apache.geronimo.specs</groupId>\n-            <artifactId>geronimo-jta_1.1_spec</artifactId>\n-        </dependency>\n-        <dependency>\n-            <groupId>org.apache.geronimo.specs</groupId>\n-            <artifactId>geronimo-jpa_3.0_spec</artifactId>\n-        </dependency>\n-    </dependencies>\n-</project>"},{"sha":"20a3d395957e1fb387d706ac68cb7203e74158c9","filename":"1.2.x/openjpa-examples/pom.xml","status":"removed","additions":0,"deletions":79,"changes":79,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-examples/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-examples/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-examples/pom.xml?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,79 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<!--\n- Licensed to the Apache Software Foundation (ASF) under one\n- or more contributor license agreements.  See the NOTICE file\n- distributed with this work for additional information\n- regarding copyright ownership.  The ASF licenses this file\n- to you under the Apache License, Version 2.0 (the\n- \"License\"); you may not use this file except in compliance\n- with the License.  You may obtain a copy of the License at\n- \n- http://www.apache.org/licenses/LICENSE-2.0\n- \n- Unless required by applicable law or agreed to in writing,\n- software distributed under the License is distributed on an\n- \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- KIND, either express or implied.  See the License for the\n- specific language governing permissions and limitations\n- under the License.   \n--->\n-<!-- \n-    Please keep the project tag on one line to avoid confusing \n-    the release plugin.\n--->\n-<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n-    <modelVersion>4.0.0</modelVersion>\n-    <groupId>org.apache.openjpa</groupId>\n-    <artifactId>openjpa-examples</artifactId>\n-    <packaging>jar</packaging>\n-    <name>OpenJPA Persistence Examples</name>\n-    <description>OpenJPA Persistence Examples</description>\n-    <url>http://openjpa.apache.org</url>\n-    <parent>\n-        <groupId>org.apache.openjpa</groupId>\n-        <artifactId>openjpa-parent</artifactId>\n-        <version>1.2.1</version>\n-    </parent>\n-    <dependencies>\n-        <dependency>\n-            <groupId>org.apache.openjpa</groupId>\n-            <artifactId>openjpa-persistence-jdbc</artifactId>\n-            <version>${pom.version}</version>\n-            <scope>compile</scope>\n-        </dependency>\n-        <dependency>\n-            <groupId>org.apache.derby</groupId>\n-            <artifactId>derby</artifactId>\n-            <scope>test</scope>\n-        </dependency>\n-        <dependency>\n-            <groupId>commons-dbcp</groupId>\n-            <artifactId>commons-dbcp</artifactId>\n-            <scope>test</scope>\n-        </dependency>\n-        <dependency>\n-            <groupId>commons-collections</groupId>\n-            <artifactId>commons-collections</artifactId>\n-            <scope>test</scope>\n-        </dependency>\n-    </dependencies>\n-    <build>\n-        <plugins>\n-            <plugin>\n-                <groupId>org.apache.maven.plugins</groupId>\n-                <artifactId>maven-compiler-plugin</artifactId>\n-                <configuration>\n-                    <source>1.5</source>\n-                    <target>1.5</target>\n-                    <!--\n-                        need to skip reversemapping since it depends on\n-                        classes that are generated by the build.xml file\n-                    -->\n-                    <excludes>\n-                        <exclude>**/reversemapping/Main.java</exclude>\n-                    </excludes>\n-                </configuration>\n-            </plugin>\n-        </plugins>\n-    </build>\n-</project>"},{"sha":"2593fb0f3aaf5c1316aba021654a3b10c80e8078","filename":"1.2.x/openjpa-examples/src/main/java/META-INF/persistence.xml","status":"removed","additions":0,"deletions":84,"changes":84,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-examples/src/main/java/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-examples/src/main/java/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-examples/src/main/java/META-INF/persistence.xml?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,84 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<!--\n- Licensed to the Apache Software Foundation (ASF) under one\n- or more contributor license agreements.  See the NOTICE file\n- distributed with this work for additional information\n- regarding copyright ownership.  The ASF licenses this file\n- to you under the Apache License, Version 2.0 (the\n- \"License\"); you may not use this file except in compliance\n- with the License.  You may obtain a copy of the License at\n- \n- http://www.apache.org/licenses/LICENSE-2.0\n- \n- Unless required by applicable law or agreed to in writing,\n- software distributed under the License is distributed on an\n- \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- KIND, either express or implied.  See the License for the\n- specific language governing permissions and limitations\n- under the License.   \n--->\n-<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\"\n-    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n-    version=\"1.0\">\n-\n-    <!--\n-        We need to enumerate each persistent class first in the persistence.xml\n-        See: http://issues.apache.org/jira/browse/OPENJPA-78\n-    -->\n-    <persistence-unit name=\"none\" transaction-type=\"RESOURCE_LOCAL\">\n-        <mapping-file>reversemapping/orm.xml</mapping-file>\n-        <class>hellojpa.Message</class>\n-        <class>relations.Deity</class>\n-    </persistence-unit>\n-\n-    <!--\n-        A persistence unit is a set of listed persistent entities as well\n-        the configuration of an EntityManagerFactory. We configure each\n-        example in a separate persistence-unit.\n-    -->\n-    <persistence-unit name=\"hellojpa\" transaction-type=\"RESOURCE_LOCAL\">\n-        <!--\n-            The default provider can be OpenJPA, or some other product.\n-            This element is optional if OpenJPA is the only JPA provider\n-            in the current classloading environment, but can be specified\n-            in cases where there are multiple JPA implementations available.\n-        -->\n-        <!--\n-        <provider>\n-            org.apache.openjpa.persistence.PersistenceProviderImpl\n-        </provider>\n-        -->\n-\n-        <!-- We must enumerate each entity in the persistence unit -->\n-        <class>hellojpa.Message</class>\n-\n-        <properties>\n-            <!--\n-                We can configure the default OpenJPA properties here. They\n-                happen to be commented out here since the provided examples\n-                all specify the values via System properties.\n-            -->\n-\n-            <!--\n-            <property name=\"openjpa.ConnectionURL\" \n-                value=\"jdbc:derby:openjpa-database;create=true\"/>\n-            <property name=\"openjpa.ConnectionDriverName\" \n-                value=\"org.apache.derby.jdbc.EmbeddedDriver\"/>\n-            <property name=\"openjpa.ConnectionUserName\" \n-                value=\"user\"/>\n-            <property name=\"openjpa.ConnectionPassword\" \n-                value=\"secret\"/>\n-            -->\n-        </properties>\n-    </persistence-unit>\n-\n-    <!-- persistence unit for the \"relations\" example -->\n-    <persistence-unit name=\"relations\" transaction-type=\"RESOURCE_LOCAL\">\n-        <class>relations.Deity</class>\n-    </persistence-unit>\n-\n-    <!-- persistence unit for the \"reversemapping\" example -->\n-    <persistence-unit name=\"reversemapping\" transaction-type=\"RESOURCE_LOCAL\">\n-        <mapping-file>reversemapping/orm.xml</mapping-file>\n-    </persistence-unit>\n-</persistence>"},{"sha":"34d748e9de4d60194debe0f0cbd921b133b1e5bc","filename":"1.2.x/openjpa-examples/src/main/java/build.xml","status":"removed","additions":0,"deletions":127,"changes":127,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-examples/src/main/java/build.xml","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-examples/src/main/java/build.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-examples/src/main/java/build.xml?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,127 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<!--\n- Licensed to the Apache Software Foundation (ASF) under one\n- or more contributor license agreements.  See the NOTICE file\n- distributed with this work for additional information\n- regarding copyright ownership.  The ASF licenses this file\n- to you under the Apache License, Version 2.0 (the\n- \"License\"); you may not use this file except in compliance\n- with the License.  You may obtain a copy of the License at\n- \n- http://www.apache.org/licenses/LICENSE-2.0\n- \n- Unless required by applicable law or agreed to in writing,\n- software distributed under the License is distributed on an\n- \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- KIND, either express or implied.  See the License for the\n- specific language governing permissions and limitations\n- under the License.   \n--->\n-<project default=\"usagewarning\">\n-\n-    <property name=\"parent\" value=\"${basedir}/..\"/>\n-    <property name=\"root\" value=\"${parent}/..\"/>\n-\n-    <!-- database connection properties -->\n-    <property name=\"dbdriver\" value=\"org.apache.derby.jdbc.EmbeddedDriver\"/>\n-    <property name=\"dburl\"\n-        value=\"jdbc:derby:${basedir}/${example}-database;create=true\"/>\n-    <property name=\"dbuser\" value=\"\"/>\n-    <property name=\"dbpass\" value=\"\"/>\n-\n-\n-    <target name=\"usagewarning\">\n-        <fail>\n-Please traverse to a sub-directory and run \"ant\" from there.\n-        </fail>\n-    </target>\n-\n-    <path id=\"classpath\"\n-        description=\"The classpath to use for compiling and running\">\n-        <pathelement path=\"${parent}\"/>\n-        <fileset dir=\"${root}\">\n-            <include name=\"**/*.jar\"/>\n-        </fileset>\n-    </path>\n-\n-    <path id=\"javaagent\">\n-        <fileset dir=\"${root}\">\n-            <include name=\"openjpa-*.jar\"/>\n-        </fileset>\n-    </path>\n-    <pathconvert property=\"javaagent\" refid=\"javaagent\"/>\n-\n-    <target name=\"clean\" depends=\"pre-clean\"\n-        description=\"Clean up compiled files and generated database files\">\n-        <delete includeemptydirs=\"yes\">\n-            <fileset dir=\"${basedir}\">\n-                <include name=\"*.class\"/>\n-                <include name=\"*.log\"/>\n-                <include name=\"${example}-database/**/*\"/>\n-                <include name=\"${example}-database\"/>\n-            </fileset>\n-        </delete>\n-    </target>\n-\n-    <!-- this target can be overridden by the sub-build -->\n-    <target name=\"pre-clean\" description=\"Pre-clean phase\">\n-    </target>\n-\n-    <target name=\"compile\" depends=\"pre-compile\"\n-        description=\"Compile the example java files\">\n-        <javac srcdir=\"${parent}\" classpathref=\"classpath\"\n-            debug=\"yes\" includes=\"${example}/**.java\"/>\n-    </target>\n-\n-    <!-- this target can be overridden by the sub-build -->\n-    <target name=\"pre-compile\" description=\"Pre-compilation phase\">\n-    </target>\n-\n-    <target name=\"run\" depends=\"compile\"\n-        description=\"Run the example Main program\">\n-\n-        <java classname=\"${example}.Main\" classpathref=\"classpath\" fork=\"yes\"\n-            failonerror=\"yes\">\n-            <!--\n-                Specifying the openjpa jar as the javaagent argument is\n-                necessary in order for automatic class-enhancement to work.\n-            -->\n-            <jvmarg value=\"-javaagent:${javaagent}\"/>\n-\n-            <!--\n-                Specify the system properties to use when configuring\n-                OpenJPA. Note that these will only be used becuase in the\n-                examples, the call to \"Persistence.createEntityManagerFactory\"\n-                is passed \"System.getProperties()\".\n-            -->\n-\n-            <!--\n-                By default, use the stand-alone Derby database (provided).\n-                This can easily be changes to use your own database's driver,\n-                provided you ensure it is accessible in the classpath.\n-            -->\n-            <sysproperty key=\"openjpa.ConnectionDriverName\"\n-                value=\"${dbdriver}\"/>\n-            <sysproperty key=\"openjpa.ConnectionURL\" value=\"${dburl}\"/>\n-            <sysproperty key=\"openjpa.ConnectionUserName\" value=\"${dbuser}\"/>\n-            <sysproperty key=\"openjpa.ConnectionPassword\" value=\"${dbpass}\"/>\n-\n-            <!--\n-                Tell OpenJPA to automatically create tables in the database\n-                for entities. Note that this should be disabled when\n-                running against a production database, since you probably\n-                don't want to be altering the schema at runtime.\n-            -->\n-            <sysproperty key=\"openjpa.jdbc.SynchronizeMappings\"\n-                value=\"buildSchema\"/>\n-\n-            <!--\n-                Output all the SQL for educational purposes, but set the\n-                general logging level to only show warnings.\n-            -->\n-            <sysproperty key=\"openjpa.Log\"\n-                value=\"DefaultLevel=WARN,SQL=TRACE\"/>\n-        </java>\n-    </target>\n-</project>\n-"},{"sha":"bffbdf13f02c940d2ebfd0a3ee665e975e238bee","filename":"1.2.x/openjpa-examples/src/main/java/hellojpa/Main.java","status":"removed","additions":0,"deletions":76,"changes":76,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-examples/src/main/java/hellojpa/Main.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-examples/src/main/java/hellojpa/Main.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-examples/src/main/java/hellojpa/Main.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,76 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package hellojpa;\n-\n-import java.util.*;\n-import javax.persistence.*;\n-\n-\n-/** \n- * A very simple, stand-alone program that stores a new entity in the\n- * database and then performs a query to retrieve it.\n- */\n-public class Main {\n-\n-    @SuppressWarnings(\"unchecked\")\n-    public static void main(String[] args) {\n-        // Create a new EntityManagerFactory using the System properties.\n-        // The \"hellojpa\" name will be used to configure based on the\n-        // corresponding name in the META-INF/persistence.xml file\n-        EntityManagerFactory factory = Persistence.\n-            createEntityManagerFactory(\"hellojpa\", System.getProperties());\n-\n-        // Create a new EntityManager from the EntityManagerFactory. The\n-        // EntityManager is the main object in the persistence API, and is\n-        // used to create, delete, and query objects, as well as access\n-        // the current transaction\n-        EntityManager em = factory.createEntityManager();\n-\n-        // Begin a new local transaction so that we can persist a new entity\n-        em.getTransaction().begin();\n-\n-        // Create and persist a new Message entity\n-        em.persist(new Message(\"Hello Persistence!\"));\n-\n-        // Commit the transaction, which will cause the entity to\n-        // be stored in the database\n-        em.getTransaction().commit();\n-\n-        // It is always good practice to close the EntityManager so that\n-        // resources are conserved.\n-        em.close();\n-\n-        // Create a fresh, new EntityManager\n-        EntityManager em2 = factory.createEntityManager();\n-\n-        // Perform a simple query for all the Message entities\n-        Query q = em2.createQuery(\"select m from Message m\");\n-\n-        // Go through each of the entities and print out each of their\n-        // messages, as well as the date on which it was created \n-        for (Message m : (List<Message>) q.getResultList()) {\n-            System.out.println(m.getMessage()\n-                + \" (created on: \" + m.getCreated() + \")\"); \n-        }\n-\n-        // Again, it is always good to clean up after ourselves\n-        em2.close();\n-        factory.close();\n-    }\n-}"},{"sha":"38a084d04683615c31e1e302bbadbbac6325f1ab","filename":"1.2.x/openjpa-examples/src/main/java/hellojpa/Message.java","status":"removed","additions":0,"deletions":72,"changes":72,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-examples/src/main/java/hellojpa/Message.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-examples/src/main/java/hellojpa/Message.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-examples/src/main/java/hellojpa/Message.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,72 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package hellojpa;\n-\n-import java.util.*;\n-import javax.persistence.*;\n-\n-\n-/** \n- * A very simple persistent entity that holds a \"message\", has a\n- * \"created\" field that is initialized to the time at which the\n- * object was created, and an id field that is initialized to the\n- * current time.\n- */\n-@Entity\n-public class Message {\n-    @Id\n-    private long id = System.currentTimeMillis();\n-\n-    @Basic\n-    private String message;\n-\n-    @Basic\n-    private Date created = new Date();\n-\n-    public Message() {\n-    }\n-\n-    public Message(String msg) {\n-        message = msg;\n-    }\n-\n-    public void setId(long val) {\n-        id = val;\n-    }\n-\n-    public long getId() {\n-        return id;\n-    }\n-\n-    public void setMessage(String msg) {\n-        message = msg;\n-    }\n-\n-    public String getMessage() {\n-        return message;\n-    }\n-\n-    public void setCreated(Date date) {\n-        created = date;\n-    }\n-\n-    public Date getCreated() {\n-        return created;\n-    }\n-}"},{"sha":"007f64d777c6dc6f66721399cbcb6a7d8caa47ac","filename":"1.2.x/openjpa-examples/src/main/java/hellojpa/build.xml","status":"removed","additions":0,"deletions":23,"changes":23,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-examples/src/main/java/hellojpa/build.xml","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-examples/src/main/java/hellojpa/build.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-examples/src/main/java/hellojpa/build.xml?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,23 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<!--\n- Licensed to the Apache Software Foundation (ASF) under one\n- or more contributor license agreements.  See the NOTICE file\n- distributed with this work for additional information\n- regarding copyright ownership.  The ASF licenses this file\n- to you under the Apache License, Version 2.0 (the\n- \"License\"); you may not use this file except in compliance\n- with the License.  You may obtain a copy of the License at\n- \n- http://www.apache.org/licenses/LICENSE-2.0\n- \n- Unless required by applicable law or agreed to in writing,\n- software distributed under the License is distributed on an\n- \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- KIND, either express or implied.  See the License for the\n- specific language governing permissions and limitations\n- under the License.   \n--->\n-<project name=\"hellojpa\" default=\"run\">\n-    <property name=\"example\" value=\"hellojpa\"/>\n-    <import file=\"../build.xml\"/>\n-</project>"},{"sha":"0118e46edd6d818cad5e314f229c78ff4621c222","filename":"1.2.x/openjpa-examples/src/main/java/relations/Deity.java","status":"removed","additions":0,"deletions":197,"changes":197,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-examples/src/main/java/relations/Deity.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-examples/src/main/java/relations/Deity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-examples/src/main/java/relations/Deity.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,197 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package relations;\n-\n-import java.io.Serializable;\n-import java.util.HashSet;\n-import java.util.Set;\n-\n-import javax.persistence.Basic;\n-import javax.persistence.CascadeType;\n-import javax.persistence.Entity;\n-import javax.persistence.Enumerated;\n-import javax.persistence.EnumType;\n-import javax.persistence.Id;\n-import javax.persistence.NamedQuery;\n-import javax.persistence.NamedQueries;\n-import javax.persistence.OneToMany;\n-import javax.persistence.OneToOne;\n-\n-\n-/** \n- * An entity that contains relations corresponding to family tree relations.\n- * This entity demonstrates the following JPA features:\n- *\n- * 1. Enum fields (gender)\n- * 2. @OneToOne relations\n- * 3. @OneToMany relations\n- * 4. Named queries\n- */\n-@Entity\n-@NamedQueries({\n-\n-    // a sibling shares a mother and a father\n-    @NamedQuery(name=\"siblings\", query=\"select distinct sibling1 \"\n-        + \"from Deity sibling1, Deity sibling2 where \"\n-        + \"sibling1.father = sibling2.father \"\n-        + \"and sibling1.mother = sibling2.mother \"\n-        + \"and sibling2 = ?1 and sibling1 <> ?1\"),\n-\n-    // a half-siling shares a mother or a father, but not both\n-    @NamedQuery(name=\"half-siblings\", query=\"select distinct sibling1 \"\n-        + \"from Deity sibling1, Deity sibling2 where \"\n-        + \"((sibling1.father = sibling2.father \"\n-        + \"and sibling1.mother <> sibling2.mother) \"\n-        + \"or (sibling1.father <> sibling2.father \"\n-        + \"and sibling1.mother = sibling2.mother)) \"\n-        + \"and sibling2 = ?1 and sibling1 <> ?1\"),\n-\n-    // a cousin shares a grandparent, but is not a sibling\n-    @NamedQuery(name=\"cousins\", query=\"select distinct cousin1 \"\n-        + \"from Deity cousin1, Deity cousin2 where \"\n-        + \"(\"\n-            + \"cousin1.father.father = cousin2.father.father \"\n-            + \"or cousin1.father.mother = cousin2.father.mother \"\n-            + \"or cousin1.mother.father = cousin2.mother.father \"\n-            + \"or cousin1.mother.mother = cousin2.mother.mother) \"\n-        + \"and (cousin1.father <> cousin2.father) \"\n-        + \"and (cousin1.mother <> cousin2.mother) \"\n-        + \"and cousin2 = ?1 and cousin1 <> ?1\")\n-    })\n-public class Deity implements Serializable {\n-    // the Id is the name, which is generally a bad idea, but we are\n-    // confident that diety names will be unique\n-    @Id\n-    private String name;\n-\n-    @Basic @Enumerated(EnumType.STRING)\n-    private Gender gender;\n-\n-    @OneToOne(cascade=CascadeType.ALL)\n-    private Deity mother;\n-\n-    @OneToOne(cascade=CascadeType.ALL)\n-    private Deity father;\n-\n-    @OneToMany(cascade=CascadeType.ALL)\n-    private Set<Deity> children;\n-\n-    public static enum Gender { MALE, FEMALE }\n-\n-\n-    public Deity(String name, Gender gender) {\n-        this.name = name;\n-        this.gender = gender;\n-    }\n-\n-\n-    //////////////////////////\n-    // Business methods follow\n-    //////////////////////////\n-\n-    /** \n-     * She's having a baby... \n-     *  \n-     * @param  childName  the baby name\n-     * @return the new child\n-     *\n-     * @throws IllegalArgumentException if the person is not a woman, or\n-     *                                  if the person is unmarried (illegitimate\n-     *                                  children are not yet supported)\n-     */\n-    public Deity giveBirth(String childName, Deity childFather, Gender gender) {\n-        if (this.gender != Gender.FEMALE)\n-            throw new IllegalArgumentException(\"Only women can have children!\");\n-\n-        if (childName == null)\n-            throw new IllegalArgumentException(\"No child name!\");\n-\n-        // create the child\n-        Deity child = new Deity(childName, gender);\n-\n-        // set the parents in the children...\n-        child.mother = this;\n-\n-        // add the child to this member's children\n-        if (children == null)\n-            children = new HashSet<Deity>();\n-        children.add(child);\n-\n-        if (childFather != null) {\n-            child.father = childFather;\n-            if (childFather.children == null)\n-                childFather.children = new HashSet<Deity>();\n-            childFather.children.add(child);\n-        }\n-\n-        return child;\n-    }\n-\n-\n-    ////////////////////////////////////\n-    // Property accessor methods follow\n-    ////////////////////////////////////\n-\n-\n-    public void setName(String name) {\n-        this.name = name;\n-    }\n-\n-    public String getName() {\n-        return this.name;\n-    }\n-\n-\n-    public void setGender(Gender gender) {\n-        this.gender = gender;\n-    }\n-\n-    public Gender getGender() {\n-        return this.gender;\n-    }\n-\n-\n-    public void setMother(Deity mother) {\n-        this.mother = mother;\n-    }\n-\n-    public Deity getMother() {\n-        return this.mother;\n-    }\n-\n-\n-    public void setFather(Deity father) {\n-        this.father = father;\n-    }\n-\n-    public Deity getFather() {\n-        return this.father;\n-    }\n-\n-\n-    public void setChildren(Set<Deity> children) {\n-        this.children = children;\n-    }\n-\n-    public Set<Deity> getChildren() {\n-        return this.children;\n-    }\n-\n-}\n-"},{"sha":"d9a58cf130a3c1d7e9a3029e6df7073c8a0a1096","filename":"1.2.x/openjpa-examples/src/main/java/relations/Main.java","status":"removed","additions":0,"deletions":170,"changes":170,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-examples/src/main/java/relations/Main.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-examples/src/main/java/relations/Main.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-examples/src/main/java/relations/Main.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,170 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package relations;\n-\n-import java.util.*;\n-import javax.persistence.*;\n-\n-// import the enums for MALE and FEMALE\n-import static relations.Deity.Gender.*;\n-\n-\n-/** \n- * A very simple, stand-alone program that stores a new entity in the\n- * database and then performs a query to retrieve it.\n- */\n-public class Main {\n-\n-    @SuppressWarnings(\"unchecked\")\n-    public static void main(String[] args) {\n-        // Create a new EntityManagerFactory using the System properties.\n-        // The \"relations\" name will be used to configure based on the\n-        // corresponding name in the META-INF/persistence.xml file\n-        EntityManagerFactory factory = Persistence.\n-            createEntityManagerFactory(\"relations\", System.getProperties());\n-\n-        // Create a new EntityManager from the EntityManagerFactory. The\n-        // EntityManager is the main object in the persistence API, and is\n-        // used to create, delete, and query objects, as well as access\n-        // the current transaction\n-        EntityManager em = factory.createEntityManager();\n-\n-        initFamilyTree(em);\n-\n-        runQueries(em);\n-\n-        // It is always good to clean up after ourselves\n-        em.close();\n-        factory.close();\n-    }\n-\n-    /** \n-     * Creates a partial family tree of the Greek dieties.\n-     *  \n-     * @param  em  the EntityManager to use in the persistence process\n-     */\n-    public static void initFamilyTree(EntityManager em) {\n-\n-        // First delete all the members from the database the clean up\n-        em.getTransaction().begin();\n-        em.createQuery(\"delete from Deity\").executeUpdate();\n-        em.getTransaction().commit();\n-\n-        // Generation 1\n-        Deity uranus = new Deity(\"Uranus\", MALE);\n-        Deity gaea = new Deity(\"Gaea\", FEMALE);\n-\n-        // Generation 2\n-        Deity cronus = gaea.giveBirth(\"Cronus\", uranus, MALE);\n-        Deity rhea = gaea.giveBirth(\"Rhea\", uranus, FEMALE);\n-        Deity coeus = gaea.giveBirth(\"Coeus\", uranus, MALE);\n-        Deity phoebe  = gaea.giveBirth(\"Phoebe\", uranus, FEMALE);\n-        Deity oceanus = gaea.giveBirth(\"Oceanus\", uranus, MALE);\n-        Deity tethys = gaea.giveBirth(\"Tethys\", uranus, FEMALE);\n-\n-        // Generation 3\n-        Deity leto = phoebe.giveBirth(\"Leto\", coeus, FEMALE);\n-\n-        Deity hestia = rhea.giveBirth(\"Hestia\", cronus, FEMALE);\n-        Deity pluto = rhea.giveBirth(\"Pluto\", cronus, MALE);\n-        Deity poseidon = rhea.giveBirth(\"Poseidon\", cronus, MALE);\n-        Deity zeus = rhea.giveBirth(\"Zeus\", cronus, MALE);\n-        Deity hera = rhea.giveBirth(\"Hera\", cronus, FEMALE);\n-        Deity demeter = rhea.giveBirth(\"Demeter\", cronus, FEMALE);\n-\n-        // Generation 4\n-        Deity iapetus = tethys.giveBirth(\"Iapetus\", coeus, MALE);\n-        Deity clymene = new Deity(\"Clymene\", FEMALE);\n-\n-        Deity apollo = leto.giveBirth(\"Apollo\", zeus, MALE);\n-        Deity artemis = leto.giveBirth(\"Artemis\", zeus, MALE);\n-\n-        Deity persephone = demeter.giveBirth(\"Persephone\", zeus, MALE);\n-\n-        Deity ares = hera.giveBirth(\"Ares\", zeus, MALE);\n-        Deity hebe = hera.giveBirth(\"Hebe\", zeus, FEMALE);\n-        Deity hephaestus = hera.giveBirth(\"Hephaestus\", zeus, MALE);\n-\n-        Deity prometheus = clymene.giveBirth(\"Prometheus\", iapetus, MALE);\n-        Deity atlas = clymene.giveBirth(\"Atlas\", iapetus, MALE);\n-        Deity epimetheus = clymene.giveBirth(\"Epimetheus\", iapetus, FEMALE);\n-\n-        Deity dione = new Deity(\"Dione\", FEMALE);\n-        dione.giveBirth(\"Aphrodite\", zeus, FEMALE);\n-\n-        // Begin a new local transaction so that we can persist a new entity\n-        em.getTransaction().begin();\n-\n-        // note that we only need to explicitly persist a single root of the\n-        // object graph (the family tree, in this case), since we have the\n-        // \"cascade\" annotation on all the relations\n-        em.persist(zeus);\n-\n-        // Commit the transaction, which will cause the entity to\n-        // be stored in the database\n-        em.getTransaction().commit();\n-    }\n-\n-    /** \n-     * Run some sample queries against the family tree featureSelection.\n-     *  \n-     * @param  em  the EntityManager to use\n-     */\n-    public static void runQueries(EntityManager em) {\n-\n-        System.out.println(\"Running query to find all instances..\");\n-\n-        // Perform a simple query for all the Deity entities\n-        Query q = em.createQuery(\"select x from Deity x\");\n-\n-        // Go through each of the entities and print out each of their\n-        // messages, as well as the date on which it was created \n-        for (Deity m : (List<Deity>) q.getResultList()) {\n-            System.out.println(m.getName());\n-        }\n-\n-        q = em.createQuery(\"select x from Deity x \"\n-            + \"where x.father.name = 'Zeus'\");\n-\n-        for (Deity m : (List<Deity>) q.getResultList()) {\n-            System.out.println(\"Child of Zeus: \" + m.getName());\n-        }\n-\n-        q = em.createNamedQuery(\"siblings\").\n-            setParameter(1, em.getReference(Deity.class, \"Rhea\"));\n-\n-        for (Deity m : (List<Deity>) em.createNamedQuery(\"siblings\").\n-            setParameter(1, em.getReference(Deity.class, \"Rhea\")).\n-            getResultList()) {\n-            System.out.println(\"Siblings of Rhea: \" + m.getName());\n-        }\n-\n-        for (Deity m : (List<Deity>) em.createNamedQuery(\"half-siblings\").\n-            setParameter(1, em.getReference(Deity.class, \"Apollo\")).\n-            getResultList()) {\n-            System.out.println(\"Half-siblings of Apollo: \" + m.getName());\n-        }\n-\n-        for (Deity m : (List<Deity>) em.createNamedQuery(\"cousins\").\n-            setParameter(1, em.getReference(Deity.class, \"Leto\")).\n-            getResultList()) {\n-            System.out.println(\"Cousins of Leto: \" + m.getName());\n-        }\n-    }\n-}"},{"sha":"7f254d6ad624e907cf15c9657c1122ba8837b44e","filename":"1.2.x/openjpa-examples/src/main/java/relations/build.xml","status":"removed","additions":0,"deletions":23,"changes":23,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-examples/src/main/java/relations/build.xml","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-examples/src/main/java/relations/build.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-examples/src/main/java/relations/build.xml?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,23 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<!--\n- Licensed to the Apache Software Foundation (ASF) under one\n- or more contributor license agreements.  See the NOTICE file\n- distributed with this work for additional information\n- regarding copyright ownership.  The ASF licenses this file\n- to you under the Apache License, Version 2.0 (the\n- \"License\"); you may not use this file except in compliance\n- with the License.  You may obtain a copy of the License at\n- \n- http://www.apache.org/licenses/LICENSE-2.0\n- \n- Unless required by applicable law or agreed to in writing,\n- software distributed under the License is distributed on an\n- \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- KIND, either express or implied.  See the License for the\n- specific language governing permissions and limitations\n- under the License.   \n--->\n-<project name=\"relations\" default=\"run\">\n-    <property name=\"example\" value=\"relations\"/>\n-    <import file=\"../build.xml\"/>\n-</project>"},{"sha":"fb9f787aab43ad30cf1e363a62b0136dd7d4cb92","filename":"1.2.x/openjpa-examples/src/main/java/reversemapping/Main.java","status":"removed","additions":0,"deletions":120,"changes":120,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-examples/src/main/java/reversemapping/Main.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-examples/src/main/java/reversemapping/Main.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-examples/src/main/java/reversemapping/Main.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,120 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package reversemapping;\n-\n-import java.text.*;\n-import java.util.*;\n-import javax.persistence.*;\n-\n-\n-/** \n- * A simple program that uses the reverse-mapped classes from the airlines\n- * schema to print out a list of schedules flightes and the \n- * projected profits from them.\n- */\n-public class Main {\n-\n-    private static void print(String msg) {\n-        System.out.println(msg);\n-    }\n-\n-    @SuppressWarnings(\"unchecked\")\n-    public static void main(String[] args) {\n-        // Create a new EntityManagerFactory using the System properties.\n-        // The \"reversemapping\" name will be used to configure based on the\n-        // corresponding name in the META-INF/persistence.xml file\n-        EntityManagerFactory factory = Persistence.\n-            createEntityManagerFactory(\"reversemapping\",\n-                System.getProperties());\n-\n-        // Create a new EntityManager from the EntityManagerFactory. The\n-        // EntityManager is the main object in the persistence API, and is\n-        // used to create, delete, and query objects, as well as access\n-        // the current transaction\n-        EntityManager em = factory.createEntityManager();\n-\n-        List<Availability> schedule = (List<Availability>)\n-            em.createQuery(\"select avail from Availability avail \"\n-            + \"join fetch avail.flight \"\n-            + \"order by avail.flightDate asc, avail.flight.departureTime asc\").\n-                getResultList();\n-       for (Availability avail : schedule) {\n-           Flight flight = avail.getFlight();\n-\n-           // note that Availability.getFlightDate is just a DATE with no\n-           // time component, and Flight.getDepartureTime() is just a TIME\n-           // with no date component\n-           print(new SimpleDateFormat(\"MMM dd, yyyy\").\n-                    format(avail.getFlightDate())\n-               + \" flight \"\n-               + flight.getFlightId() + \" departs \"\n-               + new SimpleDateFormat(\"hh:mm aa\").\n-                    format(flight.getDepartureTime())\n-               + \" from \" + flight.getOrigAirport()\n-               + \" to \" + flight.getDestAirport());\n-\n-            // look up the Airline reference based on the flight ID\n-            Airline airline = em.getReference(Airline.class,\n-                flight.getFlightId().substring(0, 2));\n-            double ratePerMile = airline.getBasicRate();\n-            double rate = flight.getMiles() * ratePerMile;\n-\n-            int econTaken = avail.getEconomySeatsTaken();\n-            int businessTaken = avail.getBusinessSeatsTaken();\n-            int firstclassTaken = avail.getFirstclassSeatsTaken();\n-\n-            double income = (econTaken * rate)\n-                + (businessTaken * rate)\n-                + (businessTaken * rate * airline.getBusinessLevelFactor())\n-                + (firstclassTaken * rate)\n-                + (firstclassTaken * rate * airline.getFirstclassLevelFactor());\n-\n-            int seatsTaken = econTaken + businessTaken + firstclassTaken;\n-            int totalSeats = airline.getEconomySeats()\n-                    + airline.getBusinessSeats()\n-                    + airline.getFirstclassSeats();\n-            double percentFull = (double) seatsTaken / (double) totalSeats;\n-\n-            print(\"  income from flight: \"\n-                + NumberFormat.getCurrencyInstance().format(income)\n-                + \" with \" + seatsTaken + \" seats taken (\"\n-                + NumberFormat.getPercentInstance().format(percentFull)\n-                + \" full)\");\n-\n-            double gallonsPerMile = 2.0d; // approx for a small plane\n-            double totalGallons = gallonsPerMile * flight.getMiles();\n-            double costPerGallon = 0.50d; // approx 2006 prices\n-            double totalFuelCost = totalGallons * costPerGallon;\n-            print(\"  fuel cost of flight over \"\n-                + NumberFormat.getNumberInstance().format(flight.getMiles())\n-                + \" miles: \"\n-                + NumberFormat.getCurrencyInstance().format(totalFuelCost));\n-\n-            double totalCost = totalFuelCost;\n-\n-            print(\"  total profit: \" + NumberFormat.getCurrencyInstance().\n-                format(income - totalCost));\n-       } \n-\n-        // Again, it is always good to clean up after ourselves\n-        em.close();\n-\n-        factory.close();\n-    }\n-}"},{"sha":"729f1f6f490dace31d2183e8a5be4e099c2f1165","filename":"1.2.x/openjpa-examples/src/main/java/reversemapping/build.xml","status":"removed","additions":0,"deletions":92,"changes":92,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-examples/src/main/java/reversemapping/build.xml","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-examples/src/main/java/reversemapping/build.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-examples/src/main/java/reversemapping/build.xml?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,92 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<!--\n- Licensed to the Apache Software Foundation (ASF) under one\n- or more contributor license agreements.  See the NOTICE file\n- distributed with this work for additional information\n- regarding copyright ownership.  The ASF licenses this file\n- to you under the Apache License, Version 2.0 (the\n- \"License\"); you may not use this file except in compliance\n- with the License.  You may obtain a copy of the License at\n- \n- http://www.apache.org/licenses/LICENSE-2.0\n- \n- Unless required by applicable law or agreed to in writing,\n- software distributed under the License is distributed on an\n- \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- KIND, either express or implied.  See the License for the\n- specific language governing permissions and limitations\n- under the License.   \n--->\n-<project name=\"hellojpa\" default=\"run\">\n-    <property name=\"example\" value=\"reversemapping\"/>\n-    <import file=\"../build.xml\"/>\n-\n-    <!-- when we clean, also remove all of the auto-generated files -->\n-    <target name=\"pre-clean\" description=\"Pre-clean phase\">\n-        <delete includeemptydirs=\"true\">\n-            <fileset dir=\"${basedir}\">\n-                <include name=\"orm.xml\"/>\n-            </fileset>\n-            <fileset dir=\"${basedir}\">\n-                <include name=\"*.java\"/>\n-                <include name=\"*.java~\"/>\n-                <contains text=\"Auto-generated by:\"/>\n-            </fileset>\n-        </delete>\n-    </target>\n-\n-    <!--\n-        Before we compile and run, we first initialize a\n-        database and run the reverse mapping tool on it\n-    -->\n-    <target name=\"pre-compile\" depends=\"initialize-db,reverse-map-schema\"\n-        description=\"Pre-compilation phase\">\n-    </target>\n-\n-    <target name=\"initialize-db\" unless=\"initialize-db-skip\"\n-        description=\"Drop then re-create the database\">\n-        <!-- first make sure the database is empty -->\n-        <sql src=\"schema/dropdb.sql\"\n-            driver=\"${dbdriver}\" url=\"${dburl}\"\n-            userid=\"${dbuser}\" password=\"${dbpass}\"\n-            onerror=\"continue\" classpathref=\"classpath\"/>\n-\n-        <!-- build the database -->\n-        <sql\n-            driver=\"${dbdriver}\" url=\"${dburl}\"\n-            userid=\"${dbuser}\" password=\"${dbpass}\" classpathref=\"classpath\">\n-            <transaction src=\"schema/ToursDB_schema.sql\"/>\n-            <transaction src=\"schema/loadCOUNTRIES.sql\"/>\n-            <transaction src=\"schema/loadCITIES.sql\"/>\n-            <transaction src=\"schema/loadAIRLINES.sql\"/>\n-            <transaction src=\"schema/loadFLIGHTS1.sql\"/>\n-            <transaction src=\"schema/loadFLIGHTS2.sql\"/>\n-            <transaction src=\"schema/loadFLIGHTAVAILABILITY1.sql\"/>\n-            <transaction src=\"schema/loadFLIGHTAVAILABILITY2.sql\"/>\n-        </sql>\n-    </target>\n-\n-    <target name=\"reverse-map-schema\" depends=\"initialize-db\"\n-        unless=\"reverse-map-schema-skip\"\n-        description=\"Generate java files from the database schema\">\n-        <!-- now run the tool to generate java files from the db schema -->\n-        <taskdef name=\"reversemappingtool\" classpathref=\"classpath\"\n-            classname=\"org.apache.openjpa.jdbc.ant.ReverseMappingToolTask\"/>\n-        <reversemappingtool package=\"reversemapping\" directory=\"${basedir}\"\n-            innerIdentityClasses=\"true\"\n-            customizerProperties=\"${basedir}/reverse-customizer.properties\">\n-            <config connectiondrivername=\"${dbdriver}\" connectionurl=\"${dburl}\"\n-                connectionusername=\"${dbuser}\" connectionpassword=\"${dbpass}\"/>\n-            <codeformat tabSpaces=\"4\" spaceBeforeParen=\"false\"\n-                braceOnSameLine=\"true\"/>\n-        </reversemappingtool>\n-\n-        <!--\n-            the reverse mapping tool always outputs the orm.xml file to\n-            the current directory; move it to the base directory in case\n-            we are executing this build file from a different directory.\n-        -->\n-        <move file=\"${user.dir}/orm.xml\"\n-            tofile=\"${basedir}/orm.xml\" failonerror=\"false\"/>\n-    </target>\n-</project>"},{"sha":"cebf2476b9afbc0030f1b35f67a682c125fe3a35","filename":"1.2.x/openjpa-examples/src/main/java/reversemapping/reverse-customizer.properties","status":"removed","additions":0,"deletions":38,"changes":38,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-examples/src/main/java/reversemapping/reverse-customizer.properties","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-examples/src/main/java/reversemapping/reverse-customizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-examples/src/main/java/reversemapping/reverse-customizer.properties?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,38 +0,0 @@\n-# Licensed to the Apache Software Foundation (ASF) under one or more\n-# contributor license agreements.  See the NOTICE file distributed with\n-# this work for additional information regarding copyright ownership.\n-# The ASF licenses this file to You under the Apache License, Version 2.0\n-# (the \"License\"); you may not use this file except in compliance with\n-# the License.  You may obtain a copy of the License at\n-#\n-#    http://www.apache.org/licenses/LICENSE-2.0\n-#\n-# Unless required by applicable law or agreed to in writing, software\n-# distributed under the License is distributed on an \"AS IS\" BASIS,\n-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-# See the License for the specific language governing permissions and\n-# limitations under the License.\n-\n-# Fix generated names to be more \"java-like\"\n-\n-reversemapping.Airlines.rename: reversemapping.Airline\n-reversemapping.Airline.airline.rename: airlineCode\n-reversemapping.Airline.airlineFull.rename: fullName\n-\n-reversemapping.Cities.rename: reversemapping.City\n-\n-reversemapping.Countries.rename: reversemapping.Country\n-\n-reversemapping.Flightavailability.rename: reversemapping.Availability\n-reversemapping.Availability.identity: Availability$ID\n-\n-reversemapping.Flights.rename: reversemapping.Flight\n-reversemapping.Flight.identity: Flight$ID\n-reversemapping.Flight.departTime.rename: departureTime\n-reversemapping.Flight.arriveTime.rename: arrivalTime\n-reversemapping.Flight.availabilitys.rename: availabilities\n-\n-reversemapping.Country.citys.rename: cities\n-\n-\n-"},{"sha":"ab3c84ebb1a8787cc3d3f36749482d39e5ef53cc","filename":"1.2.x/openjpa-examples/src/main/java/reversemapping/schema/ToursDB_schema.sql","status":"removed","additions":0,"deletions":174,"changes":174,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-examples/src/main/java/reversemapping/schema/ToursDB_schema.sql","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-examples/src/main/java/reversemapping/schema/ToursDB_schema.sql","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-examples/src/main/java/reversemapping/schema/ToursDB_schema.sql?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,174 +0,0 @@\n--- Licensed to the Apache Software Foundation (ASF) under one or more\n--- contributor license agreements.  See the NOTICE file distributed with\n--- this work for additional information regarding copyright ownership.\n--- The ASF licenses this file to You under the Apache License, Version 2.0\n--- (the \"License\"); you may not use this file except in compliance with\n--- the License.  You may obtain a copy of the License at\n---\n---     http://www.apache.org/licenses/LICENSE-2.0\n---\n--- Unless required by applicable law or agreed to in writing, software\n--- distributed under the License is distributed on an \"AS IS\" BASIS,\n--- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n--- See the License for the specific language governing permissions and\n--- limitations under the License.\n-\n-CREATE TABLE AIRLINES\n-   (\n-      AIRLINE CHAR(2) NOT NULL ,\n-      AIRLINE_FULL VARCHAR(24),\n-      BASIC_RATE DOUBLE PRECISION,\n-      DISTANCE_DISCOUNT DOUBLE PRECISION,\n-      BUSINESS_LEVEL_FACTOR DOUBLE PRECISION,\n-      FIRSTCLASS_LEVEL_FACTOR DOUBLE PRECISION,\n-      ECONOMY_SEATS INTEGER,\n-      BUSINESS_SEATS INTEGER,\n-      FIRSTCLASS_SEATS INTEGER\n-   );\n-\n-\n-ALTER TABLE AIRLINES\n-   ADD CONSTRAINT AIRLINES_PK Primary Key (\n-      AIRLINE);\n-\n-\n--- \\************************************************************\\\n-\n-CREATE TABLE COUNTRIES\n-   (\n-      COUNTRY VARCHAR(26) NOT NULL,\n-      COUNTRY_ISO_CODE CHAR(2) NOT NULL ,\n-      REGION VARCHAR(26)\n-   );\n- \n-\n-ALTER TABLE COUNTRIES\n-   ADD CONSTRAINT COUNTRIES_PK Primary Key (\n-      COUNTRY_ISO_CODE);\n-\n-ALTER TABLE COUNTRIES\n-   ADD CONSTRAINT COUNTRIES_UNQ_NM Unique (\n-      COUNTRY);\n-\n-\n-ALTER TABLE COUNTRIES\n-   ADD CONSTRAINT COUNTRIES_UC\n-   CHECK (country_ISO_code = upper(country_ISO_code) );\n-\n-\n--- \\************************************************************\\\n-\n-CREATE TABLE CITIES\n-   (\n-      CITY_ID INTEGER NOT NULL ,\n-      CITY_NAME VARCHAR(24) NOT NULL,\n-\tCOUNTRY VARCHAR(26) NOT NULL,\n-\tAIRPORT VARCHAR(3),\n-\tLANGUAGE  VARCHAR(16),\n-      COUNTRY_ISO_CODE CHAR(2) \n-   );\n-\n-\n-ALTER TABLE CITIES\n-   ADD CONSTRAINT CITIES_PK Primary Key (\n-      CITY_ID);\n-\n-ALTER TABLE CITIES\n-   ADD CONSTRAINT COUNTRIES_FK Foreign Key (\n-      COUNTRY_ISO_CODE)\n-   REFERENCES COUNTRIES (\n-      COUNTRY_ISO_CODE);\n-\n-\n--- \\************************************************************\\\n-\n-CREATE TABLE FLIGHTS\n-   (\n-      FLIGHT_ID CHAR(6) NOT NULL ,\n-      SEGMENT_NUMBER INTEGER NOT NULL ,\n-      ORIG_AIRPORT CHAR(3),\n-      DEPART_TIME TIME,\n-      DEST_AIRPORT CHAR(3),\n-      ARRIVE_TIME TIME,\n-      MEAL CHAR(1),\n-      FLYING_TIME DOUBLE PRECISION,\n-      MILES INTEGER,\n-      AIRCRAFT VARCHAR(6)\n-   );\n-\n-CREATE INDEX DESTINDEX ON FLIGHTS (\n-      DEST_AIRPORT) ;\n-  \n-CREATE INDEX ORIGINDEX ON FLIGHTS (\n-      ORIG_AIRPORT) ;\n- \n-ALTER TABLE FLIGHTS\n-   ADD CONSTRAINT FLIGHTS_PK Primary Key (\n-      FLIGHT_ID,\n-      SEGMENT_NUMBER);\n-\n-ALTER TABLE FLIGHTS\n-   ADD CONSTRAINT MEAL_CONSTRAINT\n-   CHECK (meal IN ('B', 'L', 'D', 'S'));\n-\n-\n--- \\************************************************************\\\n-\n-CREATE TABLE FLIGHTAVAILABILITY\n-   (\n-      FLIGHT_ID CHAR(6) NOT NULL ,\n-      SEGMENT_NUMBER INTEGER NOT NULL ,\n-      FLIGHT_DATE DATE NOT NULL ,\n-      ECONOMY_SEATS_TAKEN INTEGER DEFAULT 0,\n-      BUSINESS_SEATS_TAKEN INTEGER DEFAULT 0,\n-      FIRSTCLASS_SEATS_TAKEN INTEGER DEFAULT 0\n-   );\n-\n-\n-ALTER TABLE FLIGHTAVAILABILITY\n-   ADD CONSTRAINT FLIGHTAVAIL_PK Primary Key (\n-      FLIGHT_ID,\n-      SEGMENT_NUMBER,\n-      FLIGHT_DATE);\n-\n-ALTER TABLE FLIGHTAVAILABILITY\n-   ADD CONSTRAINT FLIGHTS_FK2 Foreign Key (\n-      FLIGHT_ID,\n-      SEGMENT_NUMBER)\n-   REFERENCES FLIGHTS (\n-      FLIGHT_ID,\n-      SEGMENT_NUMBER);\n-\n-\n--- \\************************************************************\\\n-\n-CREATE TABLE MAPS\n-   (\n-      MAP_ID INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1),\n-      MAP_NAME VARCHAR(24) NOT NULL,\n-      REGION VARCHAR(26),\n-      AREA DECIMAL(8,4) NOT NULL,\n-      PHOTO_FORMAT VARCHAR(26) NOT NULL,\n-      PICTURE BLOB(102400),\n-      UNIQUE (MAP_ID, MAP_NAME)\n-   );\n-\n-\n--- \\************************************************************\\\n-\n-CREATE TABLE FLIGHTS_HISTORY\n-   (\n-      FLIGHT_ID CHAR(6),\n-      SEGMENT_NUMBER INTEGER,\n-      ORIG_AIRPORT CHAR(3),\n-      DEPART_TIME TIME,\n-      DEST_AIRPORT CHAR(3),\n-      ARRIVE_TIME TIME,\n-      MEAL CHAR(1),\n-      FLYING_TIME DOUBLE PRECISION,\n-      MILES INTEGER,\n-      AIRCRAFT VARCHAR(6), \n-      STATUS VARCHAR (20)\n-   );\n-\n-"},{"sha":"02d5394accaae596cd1c4c29971f69f58f9d8f4d","filename":"1.2.x/openjpa-examples/src/main/java/reversemapping/schema/dropdb.sql","status":"removed","additions":0,"deletions":21,"changes":21,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-examples/src/main/java/reversemapping/schema/dropdb.sql","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-examples/src/main/java/reversemapping/schema/dropdb.sql","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-examples/src/main/java/reversemapping/schema/dropdb.sql?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,21 +0,0 @@\n--- Licensed to the Apache Software Foundation (ASF) under one or more\n--- contributor license agreements.  See the NOTICE file distributed with\n--- this work for additional information regarding copyright ownership.\n--- The ASF licenses this file to You under the Apache License, Version 2.0\n--- (the \"License\"); you may not use this file except in compliance with\n--- the License.  You may obtain a copy of the License at\n---\n---    http://www.apache.org/licenses/LICENSE-2.0\n---\n--- Unless required by applicable law or agreed to in writing, software\n--- distributed under the License is distributed on an \"AS IS\" BASIS,\n--- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n--- See the License for the specific language governing permissions and\n--- limitations under the License.\n-DROP TABLE FLIGHTS_HISTORY;\n-DROP TABLE FLIGHTAVAILABILITY;\n-DROP TABLE FLIGHTS;\n-DROP TABLE MAPS;\n-DROP TABLE AIRLINES;\n-DROP TABLE CITIES;\n-DROP TABLE COUNTRIES;"},{"sha":"5c1bf42b52c60e352101e5ab98de26d2f5d83936","filename":"1.2.x/openjpa-examples/src/main/java/reversemapping/schema/loadAIRLINES.sql","status":"removed","additions":0,"deletions":17,"changes":17,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-examples/src/main/java/reversemapping/schema/loadAIRLINES.sql","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-examples/src/main/java/reversemapping/schema/loadAIRLINES.sql","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-examples/src/main/java/reversemapping/schema/loadAIRLINES.sql?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,17 +0,0 @@\n--- Licensed to the Apache Software Foundation (ASF) under one or more\n--- contributor license agreements.  See the NOTICE file distributed with\n--- this work for additional information regarding copyright ownership.\n--- The ASF licenses this file to You under the Apache License, Version 2.0\n--- (the \"License\"); you may not use this file except in compliance with\n--- the License.  You may obtain a copy of the License at\n---\n---     http://www.apache.org/licenses/LICENSE-2.0\n---\n--- Unless required by applicable law or agreed to in writing, software\n--- distributed under the License is distributed on an \"AS IS\" BASIS,\n--- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n--- See the License for the specific language governing permissions and\n--- limitations under the License.\n-\n-insert into AIRLINES values ('AA','Amazonian Airways',0.18,0.03,0.5,1.5,20,10,5) ;\n-insert into AIRLINES values ('US','Union Standard Airlines',0.19,0.05,0.4,1.6,20,10,5);"},{"sha":"bd304668f0f3a747a629964ca0740dca037fbc2f","filename":"1.2.x/openjpa-examples/src/main/java/reversemapping/schema/loadCITIES.sql","status":"removed","additions":0,"deletions":102,"changes":102,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-examples/src/main/java/reversemapping/schema/loadCITIES.sql","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-examples/src/main/java/reversemapping/schema/loadCITIES.sql","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-examples/src/main/java/reversemapping/schema/loadCITIES.sql?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,102 +0,0 @@\n--- Licensed to the Apache Software Foundation (ASF) under one or more\n--- contributor license agreements.  See the NOTICE file distributed with\n--- this work for additional information regarding copyright ownership.\n--- The ASF licenses this file to You under the Apache License, Version 2.0\n--- (the \"License\"); you may not use this file except in compliance with\n--- the License.  You may obtain a copy of the License at\n---\n---     http://www.apache.org/licenses/LICENSE-2.0\n---\n--- Unless required by applicable law or agreed to in writing, software\n--- distributed under the License is distributed on an \"AS IS\" BASIS,\n--- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n--- See the License for the specific language governing permissions and\n--- limitations under the License.\n-\n-insert into CITIES VALUES (1,'Amsterdam','Netherlands','AMS','Dutch','NL');\n-insert into CITIES VALUES (2,'Athens','Greece','ATH','Greek','GR');\n-insert into CITIES VALUES (3,'Auckland','New Zealand','AKL','English','NZ');\n-insert into CITIES VALUES (4,'Beirut','Lebanon','BEY','Arabic','LB');\n-insert into CITIES VALUES (5,'Bogota','Colombia','BOG','Spanish','CO');\n-insert into CITIES VALUES (6,'Bombay','India','BOM','Hindi','IN');\n-insert into CITIES VALUES (7,'Budapest','Hungary','BUD','Hungarian','HU');\n-insert into CITIES VALUES (8,'Buenos Aires','Argentina','BUE','Spanish','AR');\n-insert into CITIES VALUES (9,'Cairo','Egypt','CAI','Arabic','EG');\n-insert into CITIES VALUES (10,'Calcutta','India','CCU','Bengali','IN');\n-insert into CITIES VALUES (11,'Cape Town','South Africa','CPT','English','ZA');\n-insert into CITIES VALUES (12,'Caracas','Venezuela','CCS','Spanish','VE');\n-insert into CITIES VALUES (13,'Casablanca','Morocco','CAS','Arabic','MA');\n-insert into CITIES VALUES (14,'Copenhagen','Denmark','CPH','Danish','DK');\n-insert into CITIES VALUES (15,'Dublin','Ireland','DUB','English','IE');\n-insert into CITIES VALUES (16,'Geneva','Switzerland','GVA','French','CH');\n-insert into CITIES VALUES (17,'Hong Kong','China','HKG','Chinese','CN');\n-insert into CITIES VALUES (18,'Istanbul','Turkey','IST','Turkish','TR');\n-insert into CITIES VALUES (19,'Jakarta','Indonesia','JKT','Indonesian','ID');\n-insert into CITIES VALUES (20,'Kabul','Afghanistan','KBL','Pashto','AF');\n-insert into CITIES VALUES (21,'Karachi','Pakistan','KHI','Punjabi','PK');\n-insert into CITIES VALUES (22,'Lagos','Nigeria','LOS','English','NG');\n-insert into CITIES VALUES (23,'Lima','Peru','LIM','Spanish','PE');\n-insert into CITIES VALUES (24,'Lisbon','Portugal','LIS','Portuguese','PT');\n-insert into CITIES VALUES (25,'London','United Kingdom','LHR','English','GB');\n-insert into CITIES VALUES (26,'Madrid','Spain','MAD','Spanish','ES');\n-insert into CITIES VALUES (27,'Manila','Philippines','MNL','Tagalog','PH');\n-insert into CITIES VALUES (28,'Melbourne','Australia','MEL','English','AU');\n-insert into CITIES VALUES (29,'Mexico City','Mexico','MEX','Spanish','MX');\n-insert into CITIES VALUES (30,'Montreal','Canada','YUL','French','CA');\n-insert into CITIES VALUES (31,'Moscow','Russia','SVO','Russian','RU');\n-insert into CITIES VALUES (32,'Nairobi','Kenya','NBO','English','KE');\n-insert into CITIES VALUES (33,'Osaka','Japan','OSA','Japanese','JP');\n-insert into CITIES VALUES (34,'Oslo','Norway','OSL','Norwegian','NO');\n-insert into CITIES VALUES (35,'Paris','France','CDG','French','FR');\n-insert into CITIES VALUES (36,'Prague','Czech Republic','PRG','Czech','CZ');\n-insert into CITIES VALUES (37,'Reykjavik','Iceland','REY','Icelandic','IS');\n-insert into CITIES VALUES (38,'Rio de Janeiro','Brazil','GIG','Portuguese','BR');\n-insert into CITIES VALUES (39,'Rome','Italy','FCO','Italian','IT');\n-insert into CITIES VALUES (40,'Santiago','Chile','SCL','Spanish','CL');\n-insert into CITIES VALUES (41,'Sao Paulo','Brazil','GRU','Portuguese','BR');\n-insert into CITIES VALUES (42,'Seoul','Korea, Republic of','SEL','Korean','KR');\n-insert into CITIES VALUES (43,'Shanghai','China','SHA','Chinese','CN');\n-insert into CITIES VALUES (44,'Singapore','Singapore','SIN','Malay','SG');\n-insert into CITIES VALUES (45,'Stockholm','Sweden','ARN','Swedish','SE');\n-insert into CITIES VALUES (46,'Sydney','Australia','SYD','English','AU');\n-insert into CITIES VALUES (47,'San Jose','United States','SJC','English','US');\n-insert into CITIES VALUES (48,'Tehran','Iran','THR','Farsi','IR');\n-insert into CITIES VALUES (49,'Tokyo','Japan','NRT','Japanese','JP');\n-insert into CITIES VALUES (50,'Toronto','Canada','YYZ','English','CA');\n-insert into CITIES VALUES (51,'Warsaw','Poland','WAW','Polish','PL');\n-insert into CITIES VALUES (52,'Albany','United States','ALB','English','US');\n-insert into CITIES VALUES (53,'Albuquerque','United States','ABQ','English','US');\n-insert into CITIES VALUES (54,'Atlanta','United States','ATL','English','US');\n-insert into CITIES VALUES (55,'Boise','United States','BOI','English','US');\n-insert into CITIES VALUES (56,'Boston','United States','BOS','English','US');\n-insert into CITIES VALUES (57,'Charleston','United States','CHS','English','US');\n-insert into CITIES VALUES (58,'Chicago','United States','MDW','English','US');\n-insert into CITIES VALUES (59,'Cleveland','United States','CLE','English','US');\n-insert into CITIES VALUES (60,'Dallas','United States','DFW','English','US');\n-insert into CITIES VALUES (61,'Denver','United States','DEN','English','US');\n-insert into CITIES VALUES (62,'Des Moines','United States','DSM','English','US');\n-insert into CITIES VALUES (63,'Fairbanks','United States','FAI','English','US');\n-insert into CITIES VALUES (64,'Helena','United States','HLN','English','US');\n-insert into CITIES VALUES (65,'Honolulu','United States','HNL','English','US');\n-insert into CITIES VALUES (66,'Houston','United States','HOU','English','US');\n-insert into CITIES VALUES (67,'Juneau','United States','JNU','English','US');\n-insert into CITIES VALUES (68,'Kansas City','United States','MCI','English','US');\n-insert into CITIES VALUES (69,'Los Angeles','United States','LAX','English','US');\n-insert into CITIES VALUES (70,'Memphis','United States','MEM','English','US');\n-insert into CITIES VALUES (71,'Miami','United States','MIA','English','US');\n-insert into CITIES VALUES (72,'Milwaukee','United States','MKE','English','US');\n-insert into CITIES VALUES (73,'Minneapolis','United States','MSP','English','US');\n-insert into CITIES VALUES (74,'Nashville','United States','BNA','English','US');\n-insert into CITIES VALUES (75,'New Orleans','United States','MSY','English','US');\n-insert into CITIES VALUES (76,'New York','United States','JFK','English','US');\n-insert into CITIES VALUES (77,'Oklahoma City','United States','OKC','English','US');\n-insert into CITIES VALUES (78,'Philadelphia','United States','PHL','English','US');\n-insert into CITIES VALUES (79,'Phoenix','United States','PHX','English','US');\n-insert into CITIES VALUES (80,'Saint Louis','United States','STL','English','US');\n-insert into CITIES VALUES (81,'Salt Lake City','United States','SLC','English','US');\n-insert into CITIES VALUES (82,'San Antonio','United States','SAT','English','US');\n-insert into CITIES VALUES (83,'San Diego','United States','SAN','English','US');\n-insert into CITIES VALUES (84,'San Francisco','United States','SFO','English','US');\n-insert into CITIES VALUES (85,'San Juan','United States','SJU','Spanish','US');\n-insert into CITIES VALUES (86,'Seattle','United States','SEA','English','US');\n-insert into CITIES VALUES (87,'Washington, DC','United States','IAD','English','US');"},{"sha":"608406c46c63b0519efe51fd47cec553513c70c1","filename":"1.2.x/openjpa-examples/src/main/java/reversemapping/schema/loadCOUNTRIES.sql","status":"removed","additions":0,"deletions":129,"changes":129,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-examples/src/main/java/reversemapping/schema/loadCOUNTRIES.sql","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-examples/src/main/java/reversemapping/schema/loadCOUNTRIES.sql","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-examples/src/main/java/reversemapping/schema/loadCOUNTRIES.sql?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,129 +0,0 @@\n--- Licensed to the Apache Software Foundation (ASF) under one or more\n--- contributor license agreements.  See the NOTICE file distributed with\n--- this work for additional information regarding copyright ownership.\n--- The ASF licenses this file to You under the Apache License, Version 2.0\n--- (the \"License\"); you may not use this file except in compliance with\n--- the License.  You may obtain a copy of the License at\n---\n---     http://www.apache.org/licenses/LICENSE-2.0\n---\n--- Unless required by applicable law or agreed to in writing, software\n--- distributed under the License is distributed on an \"AS IS\" BASIS,\n--- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n--- See the License for the specific language governing permissions and\n--- limitations under the License.\n-\n-insert into COUNTRIES values ( 'Afghanistan','AF','Asia');\n-insert into COUNTRIES values ( 'Albania','AL','Europe');\n-insert into COUNTRIES values ('Algeria','DZ','North Africa');\n-insert into COUNTRIES values ('American Samoa','AS','Pacific Islands');\n-insert into COUNTRIES values ('Angola','AO','Africa');\n-insert into COUNTRIES values ('Argentina','AR','South America');\n-insert into COUNTRIES values ('Armenia','AM','Europe');\n-insert into COUNTRIES values ('Australia','AU','Australia and New Zealand');\n-insert into COUNTRIES values ('Austria','AT','Europe');\n-insert into COUNTRIES values ('Azerbaijan','AZ','Central Asia');\n-insert into COUNTRIES values ('Bahamas','BS','Caribbean');\n-insert into COUNTRIES values ('Bangladesh','BD','Asia');\n-insert into COUNTRIES values ('Barbados','BB','Caribbean');\n-insert into COUNTRIES values ('Belgium','BE','Europe');\n-insert into COUNTRIES values ('Belize','BZ','Central America');\n-insert into COUNTRIES values ('Bermuda','BM','Caribbean');\n-insert into COUNTRIES values ('Bolivia','BO','South America');\n-insert into COUNTRIES values ('Botswana','BW','Africa');\n-insert into COUNTRIES values ('Brazil','BR','South America');\n-insert into COUNTRIES values ('Bulgaria','BG','Europe');\n-insert into COUNTRIES values ('Cambodia','KH','Asia');\n-insert into COUNTRIES values ('Cameroon','CM','Africa');\n-insert into COUNTRIES values ('Canada','CA','North America');\n-insert into COUNTRIES values ('Cape Verde','CV','Africa');\n-insert into COUNTRIES values ('Chile','CL','South America');\n-insert into COUNTRIES values ('China','CN','Asia');\n-insert into COUNTRIES values ('Colombia','CO','South America');\n-insert into COUNTRIES values ('Congo','CG','Africa');\n-insert into COUNTRIES values ('Costa Rica','CR','Central America');\n-insert into COUNTRIES values ('Cote d''Ivoire','CI','Africa');\n-insert into COUNTRIES values ('Cuba','CU','Caribbean');\n-insert into COUNTRIES values ('Czech Republic','CZ','Europe');\n-insert into COUNTRIES values ('Denmark','DK','Europe');\n-insert into COUNTRIES values ('Dominical Republic','DO','Caribbean');\n-insert into COUNTRIES values ('Ecuador','EC','South America');\n-insert into COUNTRIES values ('Egypt','EG','North Africa');\n-insert into COUNTRIES values ('El Salvador','SV','Central America');\n-insert into COUNTRIES values ('Ethiopia','ET','North Africa');\n-insert into COUNTRIES values ('Falkland Islands','FK','South America');\n-insert into COUNTRIES values ('Fiji','FJ','Pacific Islands');\n-insert into COUNTRIES values ('Finland','FI','Europe');\n-insert into COUNTRIES values ('France','FR','Europe');\n-insert into COUNTRIES values ('Georgia','GE','Europe');\n-insert into COUNTRIES values ('Germany','DE','Europe');\n-insert into COUNTRIES values ('Ghana','GH','Africa');\n-insert into COUNTRIES values ('Greece','GR','Europe');\n-insert into COUNTRIES values ('Guadeloupe','GP','Caribbean');\n-insert into COUNTRIES values ('Guatemala','GT','Central America');\n-insert into COUNTRIES values ('Honduras','HN','Central America');\n-insert into COUNTRIES values ('Hungary','HU','Europe');\n-insert into COUNTRIES values ('Iceland','IS','Europe');\n-insert into COUNTRIES values ('India','IN','Asia');\n-insert into COUNTRIES values ('Indonesia','ID','Asia');\n-insert into COUNTRIES values ('Iran','IR','Middle East');\n-insert into COUNTRIES values ('Iraq','IQ','Middle East');\n-insert into COUNTRIES values ('Ireland','IE','Europe');\n-insert into COUNTRIES values ('Israel','IL','Middle East');\n-insert into COUNTRIES values ('Italy','IT','Europe');\n-insert into COUNTRIES values ('Jamaica','JM','Caribbean');\n-insert into COUNTRIES values ('Japan','JP','Asia');\n-insert into COUNTRIES values ('Jordan','JO','Middle East');\n-insert into COUNTRIES values ('Kenya','KE','Africa');\n-insert into COUNTRIES values ('Korea, Republic of','KR','Asia');\n-insert into COUNTRIES values ('Lebanon','LB','Middle East');\n-insert into COUNTRIES values ('Lithuania','LT','Europe');\n-insert into COUNTRIES values ('Madagascar','MG','Africa');\n-insert into COUNTRIES values ('Malaysia','MY','Asia');\n-insert into COUNTRIES values ('Mali','ML','Africa');\n-insert into COUNTRIES values ('Mexico','MX','North America');\n-insert into COUNTRIES values ('Morocco','MA','North Africa');\n-insert into COUNTRIES values ('Mozambique','MZ','Africa');\n-insert into COUNTRIES values ('Nepal','NP','Asia');\n-insert into COUNTRIES values ('Netherlands','NL','Europe');\n-insert into COUNTRIES values ('New Zealand','NZ','Australia and New Zealand');\n-insert into COUNTRIES values ('Nicaragua','NI','Central America');\n-insert into COUNTRIES values ('Nigeria','NG','Africa');\n-insert into COUNTRIES values ('Norway','NO','Europe');\n-insert into COUNTRIES values ('Pakistan','PK','Central Asia');\n-insert into COUNTRIES values ('Paraguay','PY','South America');\n-insert into COUNTRIES values ('Peru','PE','South America');\n-insert into COUNTRIES values ('Philippines','PH','Asia');\n-insert into COUNTRIES values ('Poland','PL','Europe');\n-insert into COUNTRIES values ('Portugal','PT','Europe');\n-insert into COUNTRIES values ('Russia','RU','Europe');\n-insert into COUNTRIES values ('Samoa','WS','Pacific Islands');\n-insert into COUNTRIES values ('Senegal','SN','Africa');\n-insert into COUNTRIES values ('Sierra Leone','SL','Africa');\n-insert into COUNTRIES values ('Singapore','SG','Asia');\n-insert into COUNTRIES values ('Slovakia','SK','Europe');\n-insert into COUNTRIES values ('South Africa','ZA','Africa');\n-insert into COUNTRIES values ('Spain','ES','Europe');\n-insert into COUNTRIES values ('Sri Lanka','LK','Asia');\n-insert into COUNTRIES values ('Sudan','SD','Africa');\n-insert into COUNTRIES values ('Sweden','SE','Europe');\n-insert into COUNTRIES values ('Switzerland','CH','Europe');\n-insert into COUNTRIES values ('Syrian Arab Republic','SY','Middle East');\n-insert into COUNTRIES values ('Tajikistan','TJ','Central Asia');\n-insert into COUNTRIES values ('Tanzania','TZ','Africa');\n-insert into COUNTRIES values ('Thailand','TH','Asia');\n-insert into COUNTRIES values ('Trinidad and Tobago','TT','Caribbean');\n-insert into COUNTRIES values ('Tunisia','TN','North Africa');\n-insert into COUNTRIES values ('Turkey','TR','Middle East');\n-insert into COUNTRIES values ('Ukraine','UA','Europe');\n-insert into COUNTRIES values ('United Kingdom','GB','Europe');\n-insert into COUNTRIES values ('United States','US','North America');\n-insert into COUNTRIES values ('Uruguay','UY','South America');\n-insert into COUNTRIES values ('Uzbekistan','UZ','Central Asia');\n-insert into COUNTRIES values ('Venezuela','VE','South America');\n-insert into COUNTRIES values ('Viet Nam','VN','Asia');\n-insert into COUNTRIES values ('Virgin Islands (British)','VG','Caribbean');\n-insert into COUNTRIES values ('Virgin Islands (U.S.)','VI','Caribbean');\n-insert into COUNTRIES values ('Yugoslavia','YU','Europe');\n-insert into COUNTRIES values ('Zaire','ZR','Africa');\n-insert into COUNTRIES values ('Zimbabwe','ZW','Africa');"},{"sha":"623134de84b779a42b60edf3779e4049b29fe5a9","filename":"1.2.x/openjpa-examples/src/main/java/reversemapping/schema/loadFLIGHTAVAILABILITY1.sql","status":"removed","additions":0,"deletions":310,"changes":310,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-examples/src/main/java/reversemapping/schema/loadFLIGHTAVAILABILITY1.sql","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-examples/src/main/java/reversemapping/schema/loadFLIGHTAVAILABILITY1.sql","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-examples/src/main/java/reversemapping/schema/loadFLIGHTAVAILABILITY1.sql?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,310 +0,0 @@\n--- Licensed to the Apache Software Foundation (ASF) under one or more\n--- contributor license agreements.  See the NOTICE file distributed with\n--- this work for additional information regarding copyright ownership.\n--- The ASF licenses this file to You under the Apache License, Version 2.0\n--- (the \"License\"); you may not use this file except in compliance with\n--- the License.  You may obtain a copy of the License at\n---\n---     http://www.apache.org/licenses/LICENSE-2.0\n---\n--- Unless required by applicable law or agreed to in writing, software\n--- distributed under the License is distributed on an \"AS IS\" BASIS,\n--- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n--- See the License for the specific language governing permissions and\n--- limitations under the License.\n-\n-insert into FLIGHTAVAILABILITY values ('AA1116',1,'2004-03-31',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1116',1,'2004-04-11',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1116',1,'2004-04-12',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1116',1,'2004-04-15',5,5,0); \n-insert into FLIGHTAVAILABILITY values ('AA1116',1,'2004-04-20',10,0,0); \n-insert into FLIGHTAVAILABILITY values ('AA1116',1,'2004-04-23',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1116',1,'2004-04-24',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1116',1,'2004-05-03',11,0,0); \n-insert into FLIGHTAVAILABILITY values ('AA1116',1,'2004-05-05',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1116',1,'2004-05-06',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1116',1,'2004-05-17',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1116',1,'2004-05-18',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1116',1,'2004-05-29',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1116',1,'2004-05-30',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1122',1,'2004-03-31',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1122',1,'2004-04-11',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1122',1,'2004-04-12',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1122',1,'2004-04-15',5,5,0); \n-insert into FLIGHTAVAILABILITY values ('AA1122',1,'2004-04-20',10,0,0); \n-insert into FLIGHTAVAILABILITY values ('AA1122',1,'2004-04-23',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1122',1,'2004-04-24',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1122',1,'2004-05-03',11,0,0); \n-insert into FLIGHTAVAILABILITY values ('AA1122',1,'2004-05-05',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1122',1,'2004-05-06',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1122',1,'2004-05-17',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1122',1,'2004-05-18',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1122',1,'2004-05-29',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1122',1,'2004-05-30',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1124',1,'2004-03-31',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1124',1,'2004-04-11',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1124',1,'2004-04-12',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1124',1,'2004-04-15',5,5,0); \n-insert into FLIGHTAVAILABILITY values ('AA1124',1,'2004-04-20',10,0,0); \n-insert into FLIGHTAVAILABILITY values ('AA1124',1,'2004-04-23',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1124',1,'2004-04-24',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1124',1,'2004-05-03',11,0,0); \n-insert into FLIGHTAVAILABILITY values ('AA1124',1,'2004-05-05',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1124',1,'2004-05-06',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1124',1,'2004-05-17',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1124',1,'2004-05-18',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1124',1,'2004-05-29',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1124',1,'2004-05-30',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1126',1,'2004-03-31',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1126',1,'2004-04-11',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1126',1,'2004-04-12',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1126',1,'2004-04-15',5,5,0); \n-insert into FLIGHTAVAILABILITY values ('AA1126',1,'2004-04-20',10,0,0); \n-insert into FLIGHTAVAILABILITY values ('AA1126',1,'2004-04-23',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1126',1,'2004-04-24',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1126',1,'2004-05-03',11,0,0); \n-insert into FLIGHTAVAILABILITY values ('AA1126',1,'2004-05-05',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1126',1,'2004-05-06',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1126',1,'2004-05-17',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1126',1,'2004-05-18',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1126',1,'2004-05-29',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1126',1,'2004-05-30',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1128',1,'2004-03-31',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1128',1,'2004-04-11',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1128',1,'2004-04-12',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1128',1,'2004-04-15',5,5,0); \n-insert into FLIGHTAVAILABILITY values ('AA1128',1,'2004-04-20',10,0,0); \n-insert into FLIGHTAVAILABILITY values ('AA1128',1,'2004-04-23',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1128',1,'2004-04-24',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1128',1,'2004-05-03',11,0,0); \n-insert into FLIGHTAVAILABILITY values ('AA1128',1,'2004-05-05',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1128',1,'2004-05-06',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1128',1,'2004-05-17',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1128',1,'2004-05-18',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1128',1,'2004-05-29',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1128',1,'2004-05-30',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1134',1,'2004-03-31',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1134',1,'2004-04-11',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1134',1,'2004-04-12',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1134',1,'2004-04-15',5,5,0); \n-insert into FLIGHTAVAILABILITY values ('AA1134',1,'2004-04-20',10,0,0); \n-insert into FLIGHTAVAILABILITY values ('AA1134',1,'2004-04-23',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1134',1,'2004-04-24',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1134',1,'2004-05-03',11,0,0); \n-insert into FLIGHTAVAILABILITY values ('AA1134',1,'2004-05-05',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1134',1,'2004-05-06',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1134',1,'2004-05-17',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1134',1,'2004-05-18',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1134',1,'2004-05-29',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1134',1,'2004-05-30',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1140',1,'2004-03-31',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1140',1,'2004-04-11',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1140',1,'2004-04-12',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1140',1,'2004-04-15',5,5,0); \n-insert into FLIGHTAVAILABILITY values ('AA1140',1,'2004-04-20',10,0,0); \n-insert into FLIGHTAVAILABILITY values ('AA1140',1,'2004-04-23',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1140',1,'2004-04-24',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1140',1,'2004-05-03',11,0,0); \n-insert into FLIGHTAVAILABILITY values ('AA1140',1,'2004-05-05',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1140',1,'2004-05-06',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1140',1,'2004-05-17',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1140',1,'2004-05-18',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1140',1,'2004-05-29',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1140',1,'2004-05-30',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1148',1,'2004-03-31',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1148',1,'2004-04-11',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1148',1,'2004-04-12',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1148',1,'2004-04-15',5,5,0); \n-insert into FLIGHTAVAILABILITY values ('AA1148',1,'2004-04-20',10,0,0); \n-insert into FLIGHTAVAILABILITY values ('AA1148',1,'2004-04-23',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1148',1,'2004-04-24',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1148',1,'2004-05-03',11,0,0); \n-insert into FLIGHTAVAILABILITY values ('AA1148',1,'2004-05-05',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1148',1,'2004-05-06',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1148',1,'2004-05-17',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1148',1,'2004-05-18',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1148',1,'2004-05-29',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1148',1,'2004-05-30',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1150',1,'2004-03-31',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1150',1,'2004-04-11',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1150',1,'2004-04-12',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1150',1,'2004-04-15',5,5,0); \n-insert into FLIGHTAVAILABILITY values ('AA1150',1,'2004-04-20',10,0,0); \n-insert into FLIGHTAVAILABILITY values ('AA1150',1,'2004-04-23',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1150',1,'2004-04-24',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1150',1,'2004-05-03',11,0,0); \n-insert into FLIGHTAVAILABILITY values ('AA1150',1,'2004-05-05',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1150',1,'2004-05-06',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1150',1,'2004-05-17',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1150',1,'2004-05-18',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1150',1,'2004-05-29',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1150',1,'2004-05-30',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1158',1,'2004-03-31',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1158',1,'2004-04-11',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1158',1,'2004-04-12',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1158',1,'2004-04-15',5,5,0); \n-insert into FLIGHTAVAILABILITY values ('AA1158',1,'2004-04-20',10,0,0); \n-insert into FLIGHTAVAILABILITY values ('AA1158',1,'2004-04-23',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1158',1,'2004-04-24',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1158',1,'2004-05-03',11,0,0); \n-insert into FLIGHTAVAILABILITY values ('AA1158',1,'2004-05-05',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1158',1,'2004-05-06',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1158',1,'2004-05-17',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1158',1,'2004-05-18',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1158',1,'2004-05-29',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1158',1,'2004-05-30',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1168',1,'2004-03-31',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1168',1,'2004-04-11',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1168',1,'2004-04-12',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1168',1,'2004-04-15',5,5,0); \n-insert into FLIGHTAVAILABILITY values ('AA1168',1,'2004-04-20',10,0,0); \n-insert into FLIGHTAVAILABILITY values ('AA1168',1,'2004-04-23',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1168',1,'2004-04-24',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1168',1,'2004-05-03',11,0,0); \n-insert into FLIGHTAVAILABILITY values ('AA1168',1,'2004-05-05',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1168',1,'2004-05-06',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1168',1,'2004-05-17',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1168',1,'2004-05-18',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1168',1,'2004-05-29',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1168',1,'2004-05-30',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1172',1,'2004-03-31',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1172',1,'2004-04-11',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1172',1,'2004-04-12',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1172',1,'2004-04-15',5,5,0); \n-insert into FLIGHTAVAILABILITY values ('AA1172',1,'2004-04-20',10,0,0); \n-insert into FLIGHTAVAILABILITY values ('AA1172',1,'2004-04-23',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1172',1,'2004-04-24',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1172',1,'2004-05-03',11,0,0); \n-insert into FLIGHTAVAILABILITY values ('AA1172',1,'2004-05-05',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1172',1,'2004-05-06',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1172',1,'2004-05-17',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1172',1,'2004-05-18',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1172',1,'2004-05-29',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1172',1,'2004-05-30',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1176',1,'2004-03-31',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1176',1,'2004-04-11',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1176',1,'2004-04-12',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1176',1,'2004-04-15',5,5,0); \n-insert into FLIGHTAVAILABILITY values ('AA1176',1,'2004-04-20',10,0,0); \n-insert into FLIGHTAVAILABILITY values ('AA1176',1,'2004-04-23',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1176',1,'2004-04-24',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1176',1,'2004-05-03',11,0,0); \n-insert into FLIGHTAVAILABILITY values ('AA1176',1,'2004-05-05',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1176',1,'2004-05-06',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1176',1,'2004-05-17',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1176',1,'2004-05-18',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1176',1,'2004-05-29',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1176',1,'2004-05-30',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1178',1,'2004-03-31',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1178',1,'2004-04-11',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1178',1,'2004-04-12',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1178',1,'2004-04-15',5,5,0); \n-insert into FLIGHTAVAILABILITY values ('AA1178',1,'2004-04-20',10,0,0); \n-insert into FLIGHTAVAILABILITY values ('AA1178',1,'2004-04-23',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1178',1,'2004-04-24',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1178',1,'2004-05-03',11,0,0); \n-insert into FLIGHTAVAILABILITY values ('AA1178',1,'2004-05-05',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1178',1,'2004-05-06',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1178',1,'2004-05-17',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1178',1,'2004-05-18',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1178',1,'2004-05-29',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1178',1,'2004-05-30',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1181',2,'2004-03-31',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1181',2,'2004-04-11',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1181',2,'2004-04-12',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1181',2,'2004-04-15',5,5,0); \n-insert into FLIGHTAVAILABILITY values ('AA1181',2,'2004-04-20',10,0,0); \n-insert into FLIGHTAVAILABILITY values ('AA1181',2,'2004-04-23',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1181',2,'2004-04-24',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1181',2,'2004-05-03',11,0,0); \n-insert into FLIGHTAVAILABILITY values ('AA1181',2,'2004-05-05',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1181',2,'2004-05-06',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1181',2,'2004-05-17',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1181',2,'2004-05-18',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1181',2,'2004-05-29',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1181',2,'2004-05-30',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1182',2,'2004-03-31',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1182',2,'2004-04-11',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1182',2,'2004-04-12',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1182',2,'2004-04-15',5,5,0); \n-insert into FLIGHTAVAILABILITY values ('AA1182',2,'2004-04-20',10,0,0); \n-insert into FLIGHTAVAILABILITY values ('AA1182',2,'2004-04-23',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1182',2,'2004-04-24',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1182',2,'2004-05-03',11,0,0); \n-insert into FLIGHTAVAILABILITY values ('AA1182',2,'2004-05-05',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1182',2,'2004-05-06',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1182',2,'2004-05-17',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1182',2,'2004-05-18',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1182',2,'2004-05-29',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1182',2,'2004-05-30',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1188',1,'2004-03-31',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1188',1,'2004-04-11',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1188',1,'2004-04-12',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1188',1,'2004-04-15',5,5,0); \n-insert into FLIGHTAVAILABILITY values ('AA1188',1,'2004-04-20',10,0,0); \n-insert into FLIGHTAVAILABILITY values ('AA1188',1,'2004-04-23',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1188',1,'2004-04-24',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1188',1,'2004-05-03',11,0,0); \n-insert into FLIGHTAVAILABILITY values ('AA1188',1,'2004-05-05',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1188',1,'2004-05-06',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1188',1,'2004-05-17',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1188',1,'2004-05-18',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1188',1,'2004-05-29',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1188',1,'2004-05-30',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1195',1,'2004-03-31',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1195',1,'2004-04-11',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1195',1,'2004-04-12',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1195',1,'2004-04-15',5,5,0); \n-insert into FLIGHTAVAILABILITY values ('AA1195',1,'2004-04-20',10,0,0); \n-insert into FLIGHTAVAILABILITY values ('AA1195',1,'2004-04-23',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1195',1,'2004-04-24',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1195',1,'2004-05-03',11,0,0); \n-insert into FLIGHTAVAILABILITY values ('AA1195',1,'2004-05-05',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1195',1,'2004-05-06',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1195',1,'2004-05-17',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1195',1,'2004-05-18',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1195',1,'2004-05-29',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1195',1,'2004-05-30',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1197',1,'2004-03-31',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1197',1,'2004-04-11',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1197',1,'2004-04-12',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1197',1,'2004-04-15',5,5,0); \n-insert into FLIGHTAVAILABILITY values ('AA1197',1,'2004-04-20',10,0,0); \n-insert into FLIGHTAVAILABILITY values ('AA1197',1,'2004-04-23',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1197',1,'2004-04-24',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1197',1,'2004-05-03',11,0,0); \n-insert into FLIGHTAVAILABILITY values ('AA1197',1,'2004-05-05',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1197',1,'2004-05-06',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1197',1,'2004-05-17',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1197',1,'2004-05-18',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1197',1,'2004-05-29',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1197',1,'2004-05-30',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1203',1,'2004-03-31',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1203',1,'2004-04-11',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1203',1,'2004-04-12',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1203',1,'2004-04-15',5,5,0); \n-insert into FLIGHTAVAILABILITY values ('AA1203',1,'2004-04-20',10,0,0); \n-insert into FLIGHTAVAILABILITY values ('AA1203',1,'2004-04-23',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1203',1,'2004-04-24',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1203',1,'2004-05-03',11,0,0); \n-insert into FLIGHTAVAILABILITY values ('AA1203',1,'2004-05-05',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1203',1,'2004-05-06',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1203',1,'2004-05-17',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1203',1,'2004-05-18',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1203',1,'2004-05-29',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1203',1,'2004-05-30',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1207',1,'2004-03-31',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1207',1,'2004-04-11',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1207',1,'2004-04-12',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1207',1,'2004-04-15',5,5,0); \n-insert into FLIGHTAVAILABILITY values ('AA1207',1,'2004-04-20',10,0,0); \n-insert into FLIGHTAVAILABILITY values ('AA1207',1,'2004-04-23',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1207',1,'2004-04-24',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1207',1,'2004-05-03',11,0,0); \n-insert into FLIGHTAVAILABILITY values ('AA1207',1,'2004-05-05',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1207',1,'2004-05-06',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1207',1,'2004-05-17',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1207',1,'2004-05-18',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1207',1,'2004-05-29',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1207',1,'2004-05-30',2,2,2); \n- "},{"sha":"db3eae1c5e9648e18a32ce60c9c4d642376e397f","filename":"1.2.x/openjpa-examples/src/main/java/reversemapping/schema/loadFLIGHTAVAILABILITY2.sql","status":"removed","additions":0,"deletions":239,"changes":239,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-examples/src/main/java/reversemapping/schema/loadFLIGHTAVAILABILITY2.sql","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-examples/src/main/java/reversemapping/schema/loadFLIGHTAVAILABILITY2.sql","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-examples/src/main/java/reversemapping/schema/loadFLIGHTAVAILABILITY2.sql?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,239 +0,0 @@\n--- Licensed to the Apache Software Foundation (ASF) under one or more\n--- contributor license agreements.  See the NOTICE file distributed with\n--- this work for additional information regarding copyright ownership.\n--- The ASF licenses this file to You under the Apache License, Version 2.0\n--- (the \"License\"); you may not use this file except in compliance with\n--- the License.  You may obtain a copy of the License at\n---\n---     http://www.apache.org/licenses/LICENSE-2.0\n---\n--- Unless required by applicable law or agreed to in writing, software\n--- distributed under the License is distributed on an \"AS IS\" BASIS,\n--- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n--- See the License for the specific language governing permissions and\n--- limitations under the License.\n-\n-insert into FLIGHTAVAILABILITY values ('AA1211',1,'2004-03-31',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1211',1,'2004-04-11',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1211',1,'2004-04-12',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1211',1,'2004-04-15',5,5,0); \n-insert into FLIGHTAVAILABILITY values ('AA1211',1,'2004-04-20',10,0,0); \n-insert into FLIGHTAVAILABILITY values ('AA1211',1,'2004-04-23',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1211',1,'2004-04-24',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1211',1,'2004-05-03',11,0,0); \n-insert into FLIGHTAVAILABILITY values ('AA1211',1,'2004-05-05',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1211',1,'2004-05-06',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1211',1,'2004-05-17',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1211',1,'2004-05-18',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1211',1,'2004-05-29',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1211',1,'2004-05-30',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1217',1,'2004-03-31',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1217',1,'2004-04-11',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1217',1,'2004-04-12',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1217',1,'2004-04-15',5,5,0); \n-insert into FLIGHTAVAILABILITY values ('AA1217',1,'2004-04-20',10,0,0); \n-insert into FLIGHTAVAILABILITY values ('AA1217',1,'2004-04-23',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1217',1,'2004-04-24',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1217',1,'2004-05-03',11,0,0); \n-insert into FLIGHTAVAILABILITY values ('AA1217',1,'2004-05-05',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1217',1,'2004-05-06',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1217',1,'2004-05-17',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1217',1,'2004-05-18',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1217',1,'2004-05-29',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1217',1,'2004-05-30',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1219',1,'2004-03-31',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1219',1,'2004-04-11',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1219',1,'2004-04-12',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1219',1,'2004-04-15',5,5,0); \n-insert into FLIGHTAVAILABILITY values ('AA1219',1,'2004-04-20',10,0,0); \n-insert into FLIGHTAVAILABILITY values ('AA1219',1,'2004-04-23',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1219',1,'2004-04-24',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1219',1,'2004-05-03',11,0,0); \n-insert into FLIGHTAVAILABILITY values ('AA1219',1,'2004-05-05',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1219',1,'2004-05-06',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1219',1,'2004-05-17',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1219',1,'2004-05-18',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1219',1,'2004-05-29',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1219',1,'2004-05-30',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1224',1,'2004-03-31',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1224',1,'2004-04-11',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1224',1,'2004-04-12',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1224',1,'2004-04-15',5,5,0); \n-insert into FLIGHTAVAILABILITY values ('AA1224',1,'2004-04-20',10,0,0); \n-insert into FLIGHTAVAILABILITY values ('AA1224',1,'2004-04-23',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1224',1,'2004-04-24',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1224',1,'2004-05-03',11,0,0); \n-insert into FLIGHTAVAILABILITY values ('AA1224',1,'2004-05-05',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1224',1,'2004-05-06',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1224',1,'2004-05-17',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1224',1,'2004-05-18',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1224',1,'2004-05-29',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1224',1,'2004-05-30',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1229',1,'2004-03-31',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1229',1,'2004-04-11',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1229',1,'2004-04-12',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1229',1,'2004-04-15',5,5,0); \n-insert into FLIGHTAVAILABILITY values ('AA1229',1,'2004-04-20',10,0,0); \n-insert into FLIGHTAVAILABILITY values ('AA1229',1,'2004-04-23',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1229',1,'2004-04-24',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1229',1,'2004-05-03',11,0,0); \n-insert into FLIGHTAVAILABILITY values ('AA1229',1,'2004-05-05',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1229',1,'2004-05-06',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1229',1,'2004-05-17',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1229',1,'2004-05-18',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1229',1,'2004-05-29',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1229',1,'2004-05-30',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1231',1,'2004-03-31',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1231',1,'2004-04-11',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1231',1,'2004-04-12',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1231',1,'2004-04-15',5,5,0); \n-insert into FLIGHTAVAILABILITY values ('AA1231',1,'2004-04-20',10,0,0); \n-insert into FLIGHTAVAILABILITY values ('AA1231',1,'2004-04-23',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1231',1,'2004-04-24',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1231',1,'2004-05-03',11,0,0); \n-insert into FLIGHTAVAILABILITY values ('AA1231',1,'2004-05-05',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1231',1,'2004-05-06',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1231',1,'2004-05-17',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1231',1,'2004-05-18',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1231',1,'2004-05-29',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1231',1,'2004-05-30',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1239',1,'2004-03-31',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1239',1,'2004-04-11',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1239',1,'2004-04-12',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1239',1,'2004-04-15',5,5,0); \n-insert into FLIGHTAVAILABILITY values ('AA1239',1,'2004-04-20',10,0,0); \n-insert into FLIGHTAVAILABILITY values ('AA1239',1,'2004-04-23',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1239',1,'2004-04-24',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1239',1,'2004-05-03',11,0,0); \n-insert into FLIGHTAVAILABILITY values ('AA1239',1,'2004-05-05',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1239',1,'2004-05-06',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1239',1,'2004-05-17',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1239',1,'2004-05-18',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1239',1,'2004-05-29',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1239',1,'2004-05-30',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1241',1,'2004-03-31',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1241',1,'2004-04-11',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1241',1,'2004-04-12',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1241',1,'2004-04-15',5,5,0); \n-insert into FLIGHTAVAILABILITY values ('AA1241',1,'2004-04-20',10,0,0); \n-insert into FLIGHTAVAILABILITY values ('AA1241',1,'2004-04-23',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1241',1,'2004-04-24',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1241',1,'2004-05-03',11,0,0); \n-insert into FLIGHTAVAILABILITY values ('AA1241',1,'2004-05-05',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1241',1,'2004-05-06',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1241',1,'2004-05-17',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1241',1,'2004-05-18',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1241',1,'2004-05-29',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1241',1,'2004-05-30',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1243',1,'2004-03-31',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1243',1,'2004-04-11',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1243',1,'2004-04-12',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1243',1,'2004-04-15',5,5,0); \n-insert into FLIGHTAVAILABILITY values ('AA1243',1,'2004-04-20',10,0,0); \n-insert into FLIGHTAVAILABILITY values ('AA1243',1,'2004-04-23',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1243',1,'2004-04-24',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1243',1,'2004-05-03',11,0,0); \n-insert into FLIGHTAVAILABILITY values ('AA1243',1,'2004-05-05',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1243',1,'2004-05-06',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1243',1,'2004-05-17',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1243',1,'2004-05-18',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1243',1,'2004-05-29',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1243',1,'2004-05-30',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1247',1,'2004-03-31',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1247',1,'2004-04-11',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1247',1,'2004-04-12',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1247',1,'2004-04-15',5,5,0); \n-insert into FLIGHTAVAILABILITY values ('AA1247',1,'2004-04-20',10,0,0); \n-insert into FLIGHTAVAILABILITY values ('AA1247',1,'2004-04-23',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1247',1,'2004-04-24',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1247',1,'2004-05-03',11,0,0); \n-insert into FLIGHTAVAILABILITY values ('AA1247',1,'2004-05-05',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1247',1,'2004-05-06',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1247',1,'2004-05-17',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1247',1,'2004-05-18',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1247',1,'2004-05-29',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1247',1,'2004-05-30',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1252',1,'2004-03-31',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1252',1,'2004-04-11',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1252',1,'2004-04-12',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1252',1,'2004-04-15',5,5,0); \n-insert into FLIGHTAVAILABILITY values ('AA1252',1,'2004-04-20',10,0,0); \n-insert into FLIGHTAVAILABILITY values ('AA1252',1,'2004-04-23',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1252',1,'2004-04-24',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1252',1,'2004-05-03',11,0,0); \n-insert into FLIGHTAVAILABILITY values ('AA1252',1,'2004-05-05',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1252',1,'2004-05-06',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1252',1,'2004-05-17',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1252',1,'2004-05-18',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1252',1,'2004-05-29',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1252',1,'2004-05-30',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1258',1,'2004-03-31',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1258',1,'2004-04-11',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1258',1,'2004-04-12',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1258',1,'2004-04-15',5,5,0); \n-insert into FLIGHTAVAILABILITY values ('AA1258',1,'2004-04-20',10,0,0); \n-insert into FLIGHTAVAILABILITY values ('AA1258',1,'2004-04-23',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1258',1,'2004-04-24',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1258',1,'2004-05-03',11,0,0); \n-insert into FLIGHTAVAILABILITY values ('AA1258',1,'2004-05-05',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1258',1,'2004-05-06',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1258',1,'2004-05-17',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1258',1,'2004-05-18',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1258',1,'2004-05-29',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1258',1,'2004-05-30',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1259',1,'2004-03-31',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1259',1,'2004-04-11',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1259',1,'2004-04-12',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1259',1,'2004-04-15',5,5,0); \n-insert into FLIGHTAVAILABILITY values ('AA1259',1,'2004-04-20',10,0,0); \n-insert into FLIGHTAVAILABILITY values ('AA1259',1,'2004-04-23',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1259',1,'2004-04-24',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1259',1,'2004-05-03',11,0,0); \n-insert into FLIGHTAVAILABILITY values ('AA1259',1,'2004-05-05',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1259',1,'2004-05-06',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1259',1,'2004-05-17',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1259',1,'2004-05-18',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1259',1,'2004-05-29',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1259',1,'2004-05-30',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1265',1,'2004-03-31',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1265',1,'2004-04-11',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1265',1,'2004-04-12',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1265',1,'2004-04-15',5,5,0); \n-insert into FLIGHTAVAILABILITY values ('AA1265',1,'2004-04-20',10,0,0); \n-insert into FLIGHTAVAILABILITY values ('AA1265',1,'2004-04-23',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1265',1,'2004-04-24',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1265',1,'2004-05-03',11,0,0); \n-insert into FLIGHTAVAILABILITY values ('AA1265',1,'2004-05-05',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1265',1,'2004-05-06',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1265',1,'2004-05-17',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1265',1,'2004-05-18',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1265',1,'2004-05-29',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1265',1,'2004-05-30',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1271',1,'2004-03-31',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1271',1,'2004-04-11',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1271',1,'2004-04-12',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1271',1,'2004-04-15',5,5,0); \n-insert into FLIGHTAVAILABILITY values ('AA1271',1,'2004-04-20',10,0,0); \n-insert into FLIGHTAVAILABILITY values ('AA1271',1,'2004-04-23',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1271',1,'2004-04-24',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1271',1,'2004-05-03',11,0,0); \n-insert into FLIGHTAVAILABILITY values ('AA1271',1,'2004-05-05',1,1,1); \n-insert into FLIGHTAVAILABILITY values ('AA1271',1,'2004-05-06',2,2,2); \n-insert into FLIGHTAVAILABILITY values ('AA1290',1,'2004-04-05',3,0,0); \n-insert into FLIGHTAVAILABILITY values ('AA1285',1,'2004-04-11',3,0,0); \n-insert into FLIGHTAVAILABILITY values ('AA1223',2,'2004-04-11',3,0,0); \n-insert into FLIGHTAVAILABILITY values ('US1552',1,'2004-04-19',3,0,0); \n-insert into FLIGHTAVAILABILITY values ('AA1221',1,'2004-04-19',3,0,0); \n-insert into FLIGHTAVAILABILITY values ('US1518',1,'2004-04-12',0,0,3); \n-insert into FLIGHTAVAILABILITY values ('US1518',2,'2004-04-12',0,0,3); \n-insert into FLIGHTAVAILABILITY values ('US1499',1,'2004-04-25',0,0,3); \n-insert into FLIGHTAVAILABILITY values ('US1404',1,'2004-04-30',0,3,0); \n-insert into FLIGHTAVAILABILITY values ('US1519',2,'2004-04-30',0,3,0); \n-insert into FLIGHTAVAILABILITY values ('US1560',1,'2004-04-25',0,3,0); \n-insert into FLIGHTAVAILABILITY values ('US1276',2,'2004-05-05',0,3,0); \n-insert into FLIGHTAVAILABILITY values ('US1439',1,'2004-05-15',0,3,0); \n-insert into FLIGHTAVAILABILITY values ('AA1219',1,'2004-04-02',0,0,3); \n-insert into FLIGHTAVAILABILITY values ('AA1248',1,'2004-04-02',0,0,3); \n-insert into FLIGHTAVAILABILITY values ('AA1245',1,'2004-04-10',0,0,3); \n-insert into FLIGHTAVAILABILITY values ('US1435',1,'2004-04-18',0,0,3); \n-insert into FLIGHTAVAILABILITY values ('US1357',2,'2004-04-18',0,0,3); "},{"sha":"2092f1ab5f208febcef6cb0e8d5a2be77c6f9369","filename":"1.2.x/openjpa-examples/src/main/java/reversemapping/schema/loadFLIGHTS1.sql","status":"removed","additions":0,"deletions":274,"changes":274,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-examples/src/main/java/reversemapping/schema/loadFLIGHTS1.sql","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-examples/src/main/java/reversemapping/schema/loadFLIGHTS1.sql","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-examples/src/main/java/reversemapping/schema/loadFLIGHTS1.sql?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,274 +0,0 @@\n--- Licensed to the Apache Software Foundation (ASF) under one or more\n--- contributor license agreements.  See the NOTICE file distributed with\n--- this work for additional information regarding copyright ownership.\n--- The ASF licenses this file to You under the Apache License, Version 2.0\n--- (the \"License\"); you may not use this file except in compliance with\n--- the License.  You may obtain a copy of the License at\n---\n---     http://www.apache.org/licenses/LICENSE-2.0\n---\n--- Unless required by applicable law or agreed to in writing, software\n--- distributed under the License is distributed on an \"AS IS\" BASIS,\n--- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n--- See the License for the specific language governing permissions and\n--- limitations under the License.\n-\n-insert into FLIGHTS values ('AA1111',1,'ABQ','09:00:00','LAX','09:19:00','S',1.328,664,'B747'); \n-insert into FLIGHTS values ('AA1112',1,'LAX','09:00:00','ABQ','11:19:00','S',1.328,664,'B747'); \n-insert into FLIGHTS values ('AA1113',1,'ABQ','09:00:00','PHX','09:39:00','S',0.658,329,'B747'); \n-insert into FLIGHTS values ('AA1114',1,'PHX','09:00:00','ABQ','09:39:00','S',0.658,329,'B747'); \n-insert into FLIGHTS values ('AA1115',1,'ABQ','09:00:00','OKC','11:02:00','B',1.034,517,'B747'); \n-insert into FLIGHTS values ('AA1116',1,'OKC','09:00:00','ABQ','09:02:00','B',1.034,517,'B747'); \n-insert into FLIGHTS values ('AA1117',1,'AKL','09:00:00','HNL','18:48:00','L',8.804,4402,'B747'); \n-insert into FLIGHTS values ('AA1118',1,'HNL','13:30:00','AKL','21:18:00','D',8.804,4402,'DC10'); \n-insert into FLIGHTS values ('AA1119',1,'AKL','09:00:00','NRT','15:59:00','L',10.996,5498,'B747'); \n-insert into FLIGHTS values ('AA1120',1,'NRT','09:00:00','AKL','23:59:00','L',10.996,5498,'B747'); \n-insert into FLIGHTS values ('AA1121',1,'AKL','09:00:00','SYD','09:40:00','B',2.682,1341,'B747'); \n-insert into FLIGHTS values ('AA1122',1,'SYD','09:00:00','AKL','13:40:00','L',2.682,1341,'B747'); \n-insert into FLIGHTS values ('AA1123',1,'ALB','09:00:00','JFK','09:16:00','S',0.27,135,'DC10'); \n-insert into FLIGHTS values ('AA1124',1,'JFK','09:00:00','ALB','09:16:00','S',0.27,135,'DC10'); \n-insert into FLIGHTS values ('AA1125',1,'ALB','07:00:00','BOS','07:16:00','S',0.278,139,'B747'); \n-insert into FLIGHTS values ('AA1126',1,'BOS','14:00:00','ALB','14:16:00','S',0.278,139,'B747'); \n-insert into FLIGHTS values ('AA1127',1,'ALB','09:00:00','IAD','09:32:00','S',0.548,274,'B747'); \n-insert into FLIGHTS values ('AA1128',1,'IAD','09:00:00','ALB','09:32:00','S',0.548,274,'B747'); \n-insert into FLIGHTS values ('US1517',1,'AMS','09:00:00','JFK','10:17:00','B',7.296,3648,'B747'); \n-insert into FLIGHTS values ('US1516',2,'JFK','20:59:00','AMS','10:16:00','L',7.296,3648,'B747'); \n-insert into FLIGHTS values ('AA1131',1,'AMS','09:00:00','ATH','12:41:00','L',2.688,1344,'B747'); \n-insert into FLIGHTS values ('AA1132',1,'ATH','09:00:00','AMS','10:41:00','B',2.688,1344,'B747'); \n-insert into FLIGHTS values ('AA1133',1,'AMS','09:00:00','CDG','09:31:00','S',0.532,266,'B747'); \n-insert into FLIGHTS values ('AA1134',1,'CDG','09:00:00','AMS','09:31:00','S',0.532,266,'B747'); \n-insert into FLIGHTS values ('AA1135',1,'ARN','09:00:00','BOS','11:07:00','L',8.126,4063,'B747'); \n-insert into FLIGHTS values ('AA1136',1,'BOS','22:00:00','ARN','12:07:00','L',8.126,4063,'B747'); \n-insert into FLIGHTS values ('AA1137',1,'ARN','09:00:00','SVO','12:51:00','B',1.858,929,'A320'); \n-insert into FLIGHTS values ('AA1138',2,'SVO','16:00:00','ARN','15:51:00','S',1.858,929,'A320'); \n-insert into FLIGHTS values ('AA1139',1,'ARN','09:00:00','CPH','09:59:00','S',0.988,494,'B747'); \n-insert into FLIGHTS values ('AA1140',1,'CPH','09:00:00','ARN','09:59:00','S',0.988,494,'B747'); \n-insert into FLIGHTS values ('AA1141',1,'ATH','09:00:00','LHR','09:58:00','B',2.974,1487,'B747'); \n-insert into FLIGHTS values ('AA1142',1,'LHR','09:00:00','ATH','13:58:00','L',2.974,1487,'B747'); \n-insert into FLIGHTS values ('AA1143',1,'ATH','09:00:00','CAI','10:23:00','B',1.394,697,'B747'); \n-insert into FLIGHTS values ('AA1144',1,'CAI','09:00:00','ATH','10:23:00','B',1.394,697,'B747'); \n-insert into FLIGHTS values ('AA1145',1,'ATH','09:00:00','CDG','10:36:00','B',2.608,1304,'B747'); \n-insert into FLIGHTS values ('AA1146',1,'CDG','09:00:00','ATH','12:36:00','L',2.608,1304,'B747'); \n-insert into FLIGHTS values ('AA1147',1,'ATL','09:00:00','LAX','09:52:00','B',3.87,1935,'B747'); \n-insert into FLIGHTS values ('AA1148',1,'LAX','09:00:00','ATL','15:52:00','L',3.87,1935,'B747'); \n-insert into FLIGHTS values ('AA1149',1,'ATL','09:00:00','DFW','09:26:00','B',1.442,721,'B747'); \n-insert into FLIGHTS values ('AA1150',1,'DFW','09:00:00','ATL','11:26:00','B',1.442,721,'B747'); \n-insert into FLIGHTS values ('AA1151',1,'ATL','09:00:00','SEA','10:21:00','B',4.36,2180,'B747'); \n-insert into FLIGHTS values ('AA1152',1,'SEA','12:00:00','ATL','19:21:00','L',4.36,2180,'B747'); \n-insert into FLIGHTS values ('AA1153',1,'BEY','09:00:00','CAI','09:43:00','S',0.726,363,'B747'); \n-insert into FLIGHTS values ('AA1154',1,'CAI','11:00:00','BEY','11:43:00','S',0.726,363,'B747'); \n-insert into FLIGHTS values ('AA1270',1,'BEY','09:00:00','MAD','12:22:00','L',4.376,2188,'B747'); \n-insert into FLIGHTS values ('AA1269',2,'MAD','12:25:00','BEY','17:47:00','L',4.376,2188,'B747'); \n-insert into FLIGHTS values ('AA1157',1,'BEY','09:00:00','BOM','17:31:00','L',5.026,2513,'B747'); \n-insert into FLIGHTS values ('AA1158',1,'BOM','09:00:00','BEY','10:31:00','L',5.026,2513,'B747'); \n-insert into FLIGHTS values ('AA1159',1,'BNA','09:00:00','MIA','11:37:00','B',1.63,815,'B747'); \n-insert into FLIGHTS values ('AA1160',1,'MIA','09:00:00','BNA','09:37:00','B',1.63,815,'B747'); \n-insert into FLIGHTS values ('AA1161',1,'BNA','09:00:00','JFK','11:31:00','L',1.518,759,'B747'); \n-insert into FLIGHTS values ('AA1162',1,'JFK','09:00:00','BNA','09:31:00','L',1.518,759,'B747'); \n-insert into FLIGHTS values ('AA1163',1,'BNA','09:00:00','CHS','10:54:00','B',0.91,455,'B747'); \n-insert into FLIGHTS values ('AA1164',1,'GIG','09:00:00','BNA','15:57:00','L',9.964,4982,'B747'); \n-insert into FLIGHTS values ('US1591',1,'BOG','09:00:00','MIA','12:02:00','L',3.04,1520,'DC10'); \n-insert into FLIGHTS values ('AA1190',2,'MIA','12:13:00','BOG','15:15:00','L',3.04,1520,'B747'); \n-insert into FLIGHTS values ('AA1167',1,'BOG','09:00:00','LIM','11:20:00','B',2.338,1169,'B747'); \n-insert into FLIGHTS values ('AA1168',1,'LIM','08:00:00','BOG','10:20:00','B',2.338,1169,'B747'); \n-insert into FLIGHTS values ('AA1169',1,'BOG','09:00:00','GIG','16:38:00','L',5.648,2824,'B747'); \n-insert into FLIGHTS values ('AA1170',1,'GIG','09:00:00','BOG','12:38:00','L',5.648,2824,'B747'); \n-insert into FLIGHTS values ('AA1171',1,'BOI','09:00:00','SEA','08:48:00','S',0.808,404,'B747'); \n-insert into FLIGHTS values ('AA1172',1,'SEA','09:00:00','BOI','10:48:00','S',0.808,404,'B747'); \n-insert into FLIGHTS values ('AA1173',1,'BOI','09:00:00','DSM','12:18:00','L',2.31,1155,'A320'); \n-insert into FLIGHTS values ('AA1174',1,'DSM','09:00:00','BOI','10:18:00','B',2.31,1155,'A320'); \n-insert into FLIGHTS values ('AA1175',1,'BOI','09:00:00','HLN','09:34:00','S',0.58,290,'B747'); \n-insert into FLIGHTS values ('AA1176',1,'HLN','09:00:00','BOI','09:34:00','S',0.58,290,'B747'); \n-insert into FLIGHTS values ('AA1177',1,'BOM','09:00:00','CCU','11:03:00','B',2.066,1033,'B747'); \n-insert into FLIGHTS values ('AA1178',1,'CCU','09:00:00','BOM','11:03:00','B',2.066,1033,'B747'); \n-insert into FLIGHTS values ('AA1179',1,'BOM','09:00:00','KHI','09:36:00','B',1.102,551,'B747'); \n-insert into FLIGHTS values ('AA1180',1,'KHI','09:00:00','BOM','10:36:00','B',1.102,551,'B747'); \n-insert into FLIGHTS values ('AA1181',1,'BOM','09:00:00','HKG','16:51:00','L',5.354,2677,'B747'); \n-insert into FLIGHTS values ('AA1182',2,'HKG','11:15:00','BOM','14:06:00','L',5.354,2677,'B747'); \n-insert into FLIGHTS values ('AA1183',1,'BOS','09:00:00','SFO','11:23:00','L',5.39,2695,'B747'); \n-insert into FLIGHTS values ('AA1184',1,'SFO','09:00:00','BOS','17:23:00','L',5.39,2695,'B747'); \n-insert into FLIGHTS values ('AA1185',1,'BOS','09:00:00','MIA','11:31:00','B',2.518,1259,'B747'); \n-insert into FLIGHTS values ('AA1186',2,'MIA','10:40:00','BOS','13:11:00','L',2.518,1259,'B747'); \n-insert into FLIGHTS values ('AA1187',1,'BOS','09:00:00','IAD','09:29:00','S',0.49,245,'B747'); \n-insert into FLIGHTS values ('AA1188',1,'IAD','09:00:00','BOS','09:29:00','S',0.49,245,'B747'); \n-insert into FLIGHTS values ('AA1189',1,'BUD','09:00:00','GVA','10:13:00','B',1.232,616,'B747'); \n-insert into FLIGHTS values ('AA1190',1,'GVA','09:00:00','BUD','10:13:00','B',1.232,616,'B747'); \n-insert into FLIGHTS values ('AA1191',1,'BUD','09:00:00','SVO','12:56:00','L',1.946,973,'B747'); \n-insert into FLIGHTS values ('AA1192',1,'SVO','09:00:00','BUD','08:56:00','B',1.946,973,'B747'); \n-insert into FLIGHTS values ('AA1193',1,'BUD','09:00:00','FCO','10:00:00','B',1.008,504,'B747'); \n-insert into FLIGHTS values ('AA1194',1,'FCO','09:00:00','BUD','10:00:00','B',1.008,504,'B747'); \n-insert into FLIGHTS values ('AA1195',1,'CAI','09:00:00','CAS','11:33:00','B',4.562,2281,'B747'); \n-insert into FLIGHTS values ('AA1196',1,'MIA','09:00:00','CAI','04:59:00','D',12.984,6492,'B747'); \n-insert into FLIGHTS values ('AA1197',1,'CAI','09:00:00','IST','10:32:00','B',1.538,769,'B747'); \n-insert into FLIGHTS values ('AA1198',1,'IST','09:00:00','CAI','10:32:00','B',1.538,769,'B747'); \n-insert into FLIGHTS values ('AA1199',1,'CAI','09:00:00','KBL','16:27:00','L',4.454,2227,'B747'); \n-insert into FLIGHTS values ('AA1200',1,'GIG','09:00:00','CAI','02:18:00','D',12.308,6154,'B747'); \n-insert into FLIGHTS values ('AA1201',1,'CAS','09:00:00','KHI','22:54:00','L',8.9,4450,'B747'); \n-insert into FLIGHTS values ('AA1202',1,'KHI','09:00:00','CAS','12:54:00','L',8.9,4450,'B747'); \n-insert into FLIGHTS values ('AA1203',1,'CAS','09:00:00','LOS','14:00:00','L',4.006,2003,'B747'); \n-insert into FLIGHTS values ('AA1204',1,'LOS','09:00:00','CAS','12:00:00','L',4.006,2003,'B747'); \n-insert into FLIGHTS values ('AA1205',1,'CAS','09:00:00','MAD','11:02:00','B',1.036,518,'B747'); \n-insert into FLIGHTS values ('AA1206',1,'MAD','09:00:00','CAS','09:02:00','B',1.036,518,'B747'); \n-insert into FLIGHTS values ('AA1207',1,'CCS','09:00:00','SCL','16:05:00','L',6.098,3049,'B747'); \n-insert into FLIGHTS values ('AA1208',1,'SCL','09:00:00','CCS','14:05:00','L',6.098,3049,'B747'); \n-insert into FLIGHTS values ('AA1209',1,'CCS','09:00:00','MEX','11:28:00','L',4.47,2235,'B747'); \n-insert into FLIGHTS values ('AA1210',1,'MEX','09:00:00','CCS','15:28:00','L',4.47,2235,'B747'); \n-insert into FLIGHTS values ('AA1211',1,'CCS','09:00:00','BUE','17:20:00','L',6.336,3168,'B747'); \n-insert into FLIGHTS values ('AA1212',1,'BUE','09:00:00','CCS','13:20:00','L',6.336,3168,'B747'); \n-insert into FLIGHTS values ('AA1213',1,'CCU','09:00:00','HKG','14:47:00','L',3.294,1647,'B747'); \n-insert into FLIGHTS values ('AA1214',2,'HKG','10:30:00','CCU','11:17:00','L',3.294,1647,'B747'); \n-insert into FLIGHTS values ('AA1215',1,'CCU','09:00:00','NRT','18:53:00','L',6.396,3198,'B747'); \n-insert into FLIGHTS values ('AA1216',1,'NRT','09:00:00','CCU','11:53:00','L',6.396,3198,'B747'); \n-insert into FLIGHTS values ('AA1217',1,'CCU','09:00:00','SIN','15:06:00','L',3.6,1800,'B747'); \n-insert into FLIGHTS values ('AA1218',1,'SIN','09:00:00','CCU','10:06:00','L',3.6,1800,'B747'); \n-insert into FLIGHTS values ('AA1219',1,'CDG','09:00:00','LHR','08:25:00','S',0.422,211,'B747'); \n-insert into FLIGHTS values ('AA1220',1,'LHR','09:00:00','CDG','10:25:00','S',0.422,211,'B747'); \n-insert into FLIGHTS values ('AA1221',1,'CDG','18:00:00','JFK','19:15:00','D',7.258,3629,'B747'); \n-insert into FLIGHTS values ('AA1222',1,'JFK','09:00:00','CDG','22:15:00','L',7.258,3629,'B747'); \n-insert into FLIGHTS values ('AA1223',2,'CDG','13:40:00','SVO','18:45:00','L',3.09,1545,'B747'); \n-insert into FLIGHTS values ('AA1224',1,'SVO','09:00:00','CDG','10:05:00','B',3.09,1545,'B747'); \n-insert into FLIGHTS values ('AA1225',1,'CHS','09:00:00','ATL','09:31:00','S',0.532,266,'B747'); \n-insert into FLIGHTS values ('AA1226',1,'ATL','09:00:00','CHS','09:31:00','S',0.532,266,'B747'); \n-insert into FLIGHTS values ('AA1227',1,'CHS','11:00:00','MCI','11:51:00','S',1.856,928,'B747'); \n-insert into FLIGHTS values ('AA1228',1,'MCI','09:00:00','CHS','11:51:00','L',1.856,928,'B747'); \n-insert into FLIGHTS values ('AA1229',1,'CHS','09:00:00','MSY','09:15:00','L',1.256,628,'B747'); \n-insert into FLIGHTS values ('AA1230',1,'MSY','09:00:00','CHS','11:15:00','L',1.256,628,'B747'); \n-insert into FLIGHTS values ('AA1231',1,'CLE','09:00:00','LAX','10:05:00','L',4.092,2046,'B747'); \n-insert into FLIGHTS values ('AA1232',1,'LAX','09:00:00','CLE','16:05:00','L',4.092,2046,'B747'); \n-insert into FLIGHTS values ('AA1233',1,'CLE','09:00:00','DFW','10:03:00','L',2.052,1026,'B747'); \n-insert into FLIGHTS values ('AA1234',1,'DFW','09:00:00','CLE','12:03:00','L',2.052,1026,'B747'); \n-insert into FLIGHTS values ('AA1235',1,'CLE','09:00:00','MDW','08:37:00','S',0.618,309,'B747'); \n-insert into FLIGHTS values ('AA1236',1,'MDW','09:00:00','CLE','10:37:00','S',0.618,309,'B747'); \n-insert into FLIGHTS values ('AA1237',1,'CPH','09:00:00','FCO','10:54:00','L',1.904,952,'B747'); \n-insert into FLIGHTS values ('AA1238',1,'FCO','09:00:00','CPH','10:54:00','L',1.904,952,'B747'); \n-insert into FLIGHTS values ('AA1239',1,'CPH','09:00:00','REY','10:37:00','L',2.622,1311,'B747'); \n-insert into FLIGHTS values ('AA1240',1,'REY','09:00:00','CPH','12:37:00','L',2.622,1311,'B747'); \n-insert into FLIGHTS values ('AA1241',1,'CPH','09:00:00','CDG','10:16:00','L',1.276,638,'B747'); \n-insert into FLIGHTS values ('AA1242',1,'CDG','09:00:00','CPH','10:16:00','L',1.276,638,'B747'); \n-insert into FLIGHTS values ('AA1243',1,'CPT','09:00:00','LOS','13:55:00','L',5.92,2960,'B747'); \n-insert into FLIGHTS values ('AA1244',1,'LOS','09:00:00','CPT','15:55:00','L',5.92,2960,'B747'); \n-insert into FLIGHTS values ('AA1245',1,'CPT','09:00:00','NBO','15:06:00','L',5.102,2551,'DC10'); \n-insert into FLIGHTS values ('AA1246',1,'NBO','09:00:00','CPT','13:06:00','L',5.102,2551,'DC10'); \n-insert into FLIGHTS values ('AA1247',1,'CPT','09:00:00','LHR','19:01:00','L',12.026,6013,'B747'); \n-insert into FLIGHTS values ('AA1248',1,'LHR','09:00:00','CPT','23:01:00','L',12.026,6013,'B747'); \n-insert into FLIGHTS values ('AA1249',2,'DEN','10:30:00','SEA','11:32:00','L',2.04,1020,'B747'); \n-insert into FLIGHTS values ('AA1250',1,'SEA','09:00:00','DEN','12:02:00','L',2.04,1020,'B747'); \n-insert into FLIGHTS values ('AA1251',2,'DEN','10:03:00','BOI','11:19:00','L',1.276,638,'B747'); \n-insert into FLIGHTS values ('AA1252',1,'BOI','09:00:00','DEN','10:16:00','L',1.276,638,'B747'); \n-insert into FLIGHTS values ('AA1253',1,'DEN','09:00:00','JFK','14:15:00','L',3.258,1629,'B747'); \n-insert into FLIGHTS values ('AA1254',1,'JFK','09:00:00','DEN','10:15:00','L',3.258,1629,'B747'); \n-insert into FLIGHTS values ('AA1255',1,'DFW','09:00:00','SAT','09:30:00','S',0.506,253,'B747'); \n-insert into FLIGHTS values ('AA1256',1,'SAT','09:00:00','DFW','09:30:00','S',0.506,253,'B747'); \n-insert into FLIGHTS values ('AA1257',1,'DFW','09:00:00','ATL','11:26:00','L',1.442,721,'B747'); \n-insert into FLIGHTS values ('AA1258',2,'ATL','11:05:00','DFW','11:31:00','L',1.442,721,'B747'); \n-insert into FLIGHTS values ('AA1259',1,'DFW','09:00:00','MIA','12:13:00','L',2.218,1109,'B747'); \n-insert into FLIGHTS values ('AA1260',1,'MIA','09:00:00','DFW','10:13:00','L',2.218,1109,'B747'); \n-insert into FLIGHTS values ('AA1261',1,'DSM','09:00:00','MDW','09:36:00','S',0.612,306,'B747'); \n-insert into FLIGHTS values ('AA1262',1,'MDW','09:00:00','DSM','09:36:00','S',0.612,306,'B747'); \n-insert into FLIGHTS values ('AA1263',1,'DSM','09:00:00','SLC','09:53:00','L',1.9,950,'B747'); \n-insert into FLIGHTS values ('AA1264',1,'SLC','09:00:00','DSM','11:53:00','L',1.9,950,'B747'); \n-insert into FLIGHTS values ('AA1265',1,'DSM','09:00:00','OKC','09:56:00','L',0.94,470,'B747'); \n-insert into FLIGHTS values ('AA1266',1,'OKC','09:00:00','DSM','09:56:00','L',0.94,470,'B747'); \n-insert into FLIGHTS values ('AA1267',1,'DUB','09:00:00','LHR','09:34:00','S',0.574,287,'B747'); \n-insert into FLIGHTS values ('AA1268',1,'LHR','09:00:00','DUB','09:34:00','S',0.574,287,'B747'); \n-insert into FLIGHTS values ('AA1269',1,'DUB','09:00:00','MAD','11:48:00','L',1.804,902,'B747'); \n-insert into FLIGHTS values ('AA1270',2,'MAD','13:10:00','DUB','13:58:00','L',1.804,902,'B747'); \n-insert into FLIGHTS values ('AA1271',1,'DUB','09:00:00','CDG','10:57:00','L',0.966,483,'B747'); \n-insert into FLIGHTS values ('AA1272',1,'CDG','09:00:00','DUB','08:57:00','L',0.966,483,'B747'); \n-insert into FLIGHTS values ('AA1273',1,'BUE','09:00:00','SCL','09:24:00','L',1.408,704,'B747'); \n-insert into FLIGHTS values ('AA1274',1,'SCL','09:00:00','BUE','11:24:00','L',1.408,704,'B747'); \n-insert into FLIGHTS values ('AA1275',1,'BUE','09:00:00','GRU','10:05:00','L',2.09,1045,'B747'); \n-insert into FLIGHTS values ('AA1276',1,'GRU','09:00:00','BUE','12:05:00','L',2.09,1045,'B747'); \n-insert into FLIGHTS values ('US1509',1,'BUE','23:00:00','MIA','04:49:00','L',8.826,4413,'B747'); \n-insert into FLIGHTS values ('US1508',2,'MIA','18:30:00','BUE','06:19:00','L',8.826,4413,'B747'); \n-insert into FLIGHTS values ('AA1279',1,'FAI','09:00:00','JNU','10:15:00','L',1.254,627,'B747'); \n-insert into FLIGHTS values ('AA1280',1,'JNU','09:00:00','FAI','10:15:00','L',1.254,627,'B747'); \n-insert into FLIGHTS values ('AA1281',1,'FAI','09:00:00','SEA','13:02:00','L',3.038,1519,'B747'); \n-insert into FLIGHTS values ('AA1282',1,'SEA','09:00:00','FAI','11:02:00','L',3.038,1519,'B747'); \n-insert into FLIGHTS values ('US1443',1,'FAI','09:00:00','NRT','10:01:00','L',7.026,3513,'B747'); \n-insert into FLIGHTS values ('US1444',2,'NRT','14:05:00','FAI','03:06:00','L',7.026,3513,'B747'); \n-insert into FLIGHTS values ('AA1285',1,'FCO','09:00:00','CDG','10:22:00','L',1.376,688,'B747'); \n-insert into FLIGHTS values ('AA1286',1,'CDG','09:00:00','FCO','10:22:00','L',1.376,688,'B747'); \n-insert into FLIGHTS values ('AA1287',1,'FCO','09:00:00','CAI','12:39:00','L',2.654,1327,'B747'); \n-insert into FLIGHTS values ('AA1288',1,'CAI','09:00:00','FCO','10:39:00','L',2.654,1327,'B747'); \n-insert into FLIGHTS values ('AA1289',1,'FCO','13:00:00','JFK','15:34:00','L',8.57,4285,'B747'); \n-insert into FLIGHTS values ('AA1290',1,'JFK','23:00:00','FCO','13:34:00','L',8.57,4285,'B747'); \n-insert into FLIGHTS values ('AA1291',1,'GIG','13:00:00','MIA','19:22:00','L',8.37,4185,'B747'); \n-insert into FLIGHTS values ('AA1292',1,'MIA','13:00:00','GIG','23:22:00','L',8.37,4185,'B747'); \n-insert into FLIGHTS values ('AA1293',1,'GIG','09:00:00','LIM','11:41:00','L',4.694,2347,'B747'); \n-insert into FLIGHTS values ('AA1294',1,'LIM','15:00:00','GIG','21:41:00','L',4.694,2347,'B747'); \n-insert into FLIGHTS values ('AA1295',1,'GIG','09:00:00','BUE','12:26:00','L',2.44,1220,'B747'); \n-insert into FLIGHTS values ('AA1296',1,'BUE','09:00:00','GIG','10:26:00','L',2.44,1220,'B747'); \n-insert into FLIGHTS values ('US1249',1,'GRU','09:00:00','CCS','13:26:00','L',5.448,2724,'B747'); \n-insert into FLIGHTS values ('US1250',1,'CCS','09:00:00','GRU','15:26:00','L',5.448,2724,'B747'); \n-insert into FLIGHTS values ('US1251',1,'GRU','09:00:00','JFK','16:33:00','L',9.556,4778,'B747'); \n-insert into FLIGHTS values ('US1252',1,'JFK','09:00:00','GRU','20:33:00','L',9.556,4778,'B747'); \n-insert into FLIGHTS values ('US1253',1,'GRU','09:00:00','LAX','16:19:00','L',12.322,6161,'B747'); \n-insert into FLIGHTS values ('US1254',1,'LAX','09:00:00','GRU','02:19:00','L',12.322,6161,'B747'); \n-insert into FLIGHTS values ('AA1053',1,'GRU','09:00:00','LIM','11:17:00','L',4.298,2149,'B747'); \n-insert into FLIGHTS values ('AA1054',1,'LIM','14:00:00','GRU','20:17:00','L',4.298,2149,'B747'); \n-insert into FLIGHTS values ('US1255',1,'GVA','09:00:00','CPH','10:25:00','L',1.422,711,'B747'); \n-insert into FLIGHTS values ('US1256',1,'CPH','09:00:00','GVA','10:25:00','L',1.422,711,'B747'); \n-insert into FLIGHTS values ('US1257',1,'GVA','09:00:00','LIS','09:52:00','L',1.868,934,'B747'); \n-insert into FLIGHTS values ('US1258',1,'LIS','09:00:00','GVA','11:52:00','L',1.868,934,'B747'); \n-insert into FLIGHTS values ('US1259',1,'GVA','09:00:00','OSL','10:56:00','L',1.934,967,'B747'); \n-insert into FLIGHTS values ('US1260',1,'OSL','09:00:00','GVA','10:56:00','L',1.934,967,'B747'); \n-insert into FLIGHTS values ('AA1181',2,'HKG','17:15:00','SHA','18:45:00','L',1.514,757,'B747'); \n-insert into FLIGHTS values ('AA1182',1,'SHA','09:00:00','HKG','10:30:00','L',1.514,757,'B747'); \n-insert into FLIGHTS values ('US1266',2,'HKG','11:15:00','SIN','14:27:00','L',3.214,1607,'B747'); \n-insert into FLIGHTS values ('US1264',1,'SIN','09:00:00','HKG','12:12:00','L',3.214,1607,'B747'); \n-insert into FLIGHTS values ('US1264',2,'HKG','13:00:00','SEL','16:36:00','L',2.612,1306,'B747'); \n-insert into FLIGHTS values ('US1266',1,'SEL','09:00:00','HKG','10:36:00','L',2.612,1306,'B747'); \n-insert into FLIGHTS values ('US1267',1,'HLN','09:00:00','SEA','08:58:00','L',0.978,489,'B747'); \n-insert into FLIGHTS values ('US1268',1,'SEA','09:00:00','HLN','10:58:00','L',0.978,489,'B747'); \n-insert into FLIGHTS values ('US1269',1,'HLN','09:00:00','BOI','09:34:00','S',0.58,290,'B747'); \n-insert into FLIGHTS values ('US1270',1,'BOI','09:00:00','HLN','09:34:00','S',0.58,290,'B747'); \n-insert into FLIGHTS values ('US1271',1,'HLN','09:00:00','DEN','10:11:00','L',1.184,592,'B747'); \n-insert into FLIGHTS values ('US1272',1,'DEN','09:00:00','HLN','10:11:00','L',1.184,592,'B747'); \n-insert into FLIGHTS values ('US1276',2,'HNL','12:30:00','NRT','15:12:00','L',7.708,3854,'B747'); \n-insert into FLIGHTS values ('US1274',1,'NRT','09:00:00','HNL','21:42:00','L',7.708,3854,'B747'); \n-insert into FLIGHTS values ('US1274',2,'HNL','22:30:00','SFO','05:17:00','L',4.794,2397,'B747'); \n-insert into FLIGHTS values ('US1276',1,'SFO','09:00:00','HNL','11:47:00','L',4.794,2397,'B747'); \n-insert into FLIGHTS values ('US1277',1,'HNL','13:00:00','SYD','20:09:00','L',10.16,5080,'B747'); \n-insert into FLIGHTS values ('US1278',1,'SYD','09:00:00','HNL','22:09:00','L',10.16,5080,'B747'); \n-insert into FLIGHTS values ('AA1251',1,'HOU','09:00:00','DEN','09:45:00','L',1.756,878,'B747'); \n-insert into FLIGHTS values ('AA1252',2,'DEN','10:55:00','HOU','13:40:00','L',1.756,878,'B747'); \n-insert into FLIGHTS values ('US1281',1,'HOU','09:00:00','SAT','09:22:00','S',0.378,189,'B747'); \n-insert into FLIGHTS values ('US1282',1,'SAT','09:00:00','HOU','09:22:00','S',0.378,189,'B747'); \n-insert into FLIGHTS values ('US1283',1,'HOU','09:00:00','IAD','12:56:00','L',2.936,1468,'B747'); \n-insert into FLIGHTS values ('US1284',1,'IAD','09:00:00','HOU','10:56:00','L',2.936,1468,'B747'); \n-insert into FLIGHTS values ('US1285',1,'IAD','09:00:00','BOS','09:29:00','S',0.49,245,'B747'); \n-insert into FLIGHTS values ('US1286',1,'BOS','09:00:00','IAD','09:29:00','S',0.49,245,'B747'); \n-insert into FLIGHTS values ('US1287',1,'IAD','09:00:00','MSP','09:49:00','L',1.83,915,'B747'); \n-insert into FLIGHTS values ('US1288',1,'MSP','09:00:00','IAD','11:49:00','L',1.83,915,'B747'); \n-insert into FLIGHTS values ('US1289',1,'IAD','09:00:00','MIA','11:02:00','L',2.048,1024,'B747'); \n-insert into FLIGHTS values ('US1290',1,'MIA','09:00:00','IAD','11:02:00','L',2.048,1024,'B747'); \n-insert into FLIGHTS values ('US1291',1,'IST','09:00:00','THR','13:02:00','L',2.538,1269,'B747'); \n-insert into FLIGHTS values ('US1292',1,'THR','09:00:00','IST','10:02:00','L',2.538,1269,'B747'); \n-insert into FLIGHTS values ('US1293',1,'IST','09:00:00','FCO','09:42:00','L',1.71,855,'B747'); \n-insert into FLIGHTS values ('US1294',1,'FCO','09:00:00','IST','11:42:00','L',1.71,855,'B747'); \n-insert into FLIGHTS values ('US1295',1,'IST','09:00:00','ATH','09:41:00','S',0.698,349,'B747'); \n-insert into FLIGHTS values ('US1296',1,'ATH','09:00:00','IST','09:41:00','S',0.698,349,'B747'); \n-insert into FLIGHTS values ('US1381',2,'JFK','12:00:00','CDG','01:15:00','L',7.258,3629,'B747'); \n-insert into FLIGHTS values ('US1382',1,'CDG','09:00:00','JFK','10:15:00','L',7.258,3629,'B747'); \n-insert into FLIGHTS values ('US1349',2,'JFK','13:49:00','LAX','15:42:00','L',4.896,2448,'B747'); \n-insert into FLIGHTS values ('US1300',1,'LAX','09:00:00','JFK','16:53:00','L',4.896,2448,'B747'); \n-insert into FLIGHTS values ('US1301',1,'JFK','09:00:00','GRU','20:33:00','L',9.556,4778,'B747'); \n-insert into FLIGHTS values ('US1302',1,'GRU','09:00:00','JFK','16:33:00','L',9.556,4778,'B747'); \n-insert into FLIGHTS values ('US1303',1,'JKT','09:00:00','HKG','14:03:00','L',4.054,2027,'B747'); \n-insert into FLIGHTS values ('US1304',1,'HKG','09:00:00','JKT','12:03:00','L',4.054,2027,'B747'); \n-insert into FLIGHTS values ('US1308',2,'JKT','13:35:00','SYD','00:25:00','L',6.844,3422,'B747'); \n-insert into FLIGHTS values ('US1307',1,'SYD','09:00:00','JKT','11:50:00','L',6.844,3422,'B747'); \n-insert into FLIGHTS values ('US1307',2,'JKT','12:15:00','TPE','17:59:00','L',4.748,2374,'B747'); \n-insert into FLIGHTS values ('US1308',1,'TPE','09:00:00','JKT','12:44:00','L',4.748,2374,'B747'); \n-insert into FLIGHTS values ('US1309',1,'JNU','09:00:00','SEA','11:46:00','L',1.782,891,'B747'); \n-insert into FLIGHTS values ('US1310',1,'SEA','09:00:00','JNU','09:46:00','L',1.782,891,'B747'); \n-insert into FLIGHTS values ('US1311',1,'JNU','09:00:00','SFO','13:02:00','L',3.034,1517,'B747'); \n-insert into FLIGHTS values ('US1312',1,'SFO','09:00:00','JNU','11:02:00','L',3.034,1517,'B747'); \n-insert into FLIGHTS values ('US1313',1,'JNU','09:00:00','HNL','13:37:00','L',5.626,2813,'B747'); \n-insert into FLIGHTS values ('US1314',1,'HNL','09:00:00','JNU','15:37:00','L',5.626,2813,'B747'); \n-insert into FLIGHTS values ('US1315',1,'KBL','09:00:00','KHI','10:21:00','L',1.358,679,'B747'); \n-insert into FLIGHTS values ('US1316',1,'KHI','09:00:00','KBL','10:21:00','L',1.358,679,'B747'); \n-insert into FLIGHTS values ('US1317',1,'KBL','09:00:00','IST','10:26:00','L',4.448,2224,'B747'); \n-insert into FLIGHTS values ('US1318',1,'IST','09:00:00','KBL','16:26:00','L',4.448,2224,'B747'); \n-"},{"sha":"75dc402c9c66a6944718d639cc96251b4469ff86","filename":"1.2.x/openjpa-examples/src/main/java/reversemapping/schema/loadFLIGHTS2.sql","status":"removed","additions":0,"deletions":299,"changes":299,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-examples/src/main/java/reversemapping/schema/loadFLIGHTS2.sql","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-examples/src/main/java/reversemapping/schema/loadFLIGHTS2.sql","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-examples/src/main/java/reversemapping/schema/loadFLIGHTS2.sql?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,299 +0,0 @@\n--- Licensed to the Apache Software Foundation (ASF) under one or more\n--- contributor license agreements.  See the NOTICE file distributed with\n--- this work for additional information regarding copyright ownership.\n--- The ASF licenses this file to You under the Apache License, Version 2.0\n--- (the \"License\"); you may not use this file except in compliance with\n--- the License.  You may obtain a copy of the License at\n---\n---     http://www.apache.org/licenses/LICENSE-2.0\n---\n--- Unless required by applicable law or agreed to in writing, software\n--- distributed under the License is distributed on an \"AS IS\" BASIS,\n--- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n--- See the License for the specific language governing permissions and\n--- limitations under the License.\n-\n-insert into FLIGHTS values ('AA1137',2,'KBL','13:30:00','SVO','15:41:00','S',4.192,2096,'A320'); \n-insert into FLIGHTS values ('AA1138',1,'SVO','09:00:00','KBL','15:11:00','L',4.192,2096,'A320'); \n-insert into FLIGHTS values ('US1321',1,'KHI','09:00:00','IST','10:54:00','L',4.9,2450,'B747'); \n-insert into FLIGHTS values ('US1322',1,'IST','09:00:00','KHI','16:54:00','L',4.9,2450,'B747'); \n-insert into FLIGHTS values ('US1323',1,'KHI','09:00:00','IST','10:54:00','L',4.9,2450,'B747'); \n-insert into FLIGHTS values ('US1324',1,'IST','09:00:00','KHI','16:54:00','L',4.9,2450,'B747'); \n-insert into FLIGHTS values ('US1325',1,'KHI','09:00:00','THR','09:53:00','L',2.384,1192,'B747'); \n-insert into FLIGHTS values ('US1326',1,'THR','09:00:00','KHI','12:53:00','L',2.384,1192,'B747'); \n-insert into FLIGHTS values ('US1327',1,'LAX','09:00:00','HNL','12:07:00','L',5.124,2562,'B747'); \n-insert into FLIGHTS values ('US1328',1,'HNL','09:00:00','LAX','16:07:00','L',5.124,2562,'B747'); \n-insert into FLIGHTS values ('US1329',1,'LAX','09:00:00','GRU','02:19:00','L',12.322,6161,'B747'); \n-insert into FLIGHTS values ('US1330',1,'GRU','09:00:00','LAX','16:19:00','L',12.322,6161,'B747'); \n-insert into FLIGHTS values ('US1331',1,'LAX','09:00:00','NRT','12:57:00','L',10.956,5478,'B747'); \n-insert into FLIGHTS values ('US1332',1,'NRT','09:00:00','LAX','02:57:00','L',10.956,5478,'B747'); \n-insert into FLIGHTS values ('US1333',1,'LHR','09:00:00','WAW','11:47:00','L',1.798,899,'B747'); \n-insert into FLIGHTS values ('US1334',1,'WAW','09:00:00','LHR','09:47:00','L',1.798,899,'B747'); \n-insert into FLIGHTS values ('US1335',1,'LHR','09:00:00','YYZ','11:06:00','L',7.106,3553,'B747'); \n-insert into FLIGHTS values ('US1336',1,'YYZ','09:00:00','LHR','21:06:00','L',7.106,3553,'B747'); \n-insert into FLIGHTS values ('US1337',1,'LHR','09:00:00','NBO','20:28:00','L',8.48,4240,'B747'); \n-insert into FLIGHTS values ('US1338',1,'NBO','09:00:00','LHR','14:28:00','L',8.48,4240,'B747'); \n-insert into FLIGHTS values ('US1501',2,'LIM','11:00:00','MIA','16:15:00','L',5.25,625,'B747'); \n-insert into FLIGHTS values ('US1340',1,'MIA','09:00:00','LIM','14:15:00','L',5.25,2625,'B747'); \n-insert into FLIGHTS values ('US1338',2,'LIM','20:00:00','MIA','01:15:00','L',5.25,2625,'B747'); \n-insert into FLIGHTS values ('US1339',1,'MIA','18:00:00','LIM','23:15:00','L',5.25,2625,'B747'); \n-insert into FLIGHTS values ('US1344',2,'LIM','12:00:00','BUE','18:53:00','L',3.896,1948,'B747'); \n-insert into FLIGHTS values ('US1342',1,'BUE','09:00:00','LIM','09:53:00','L',3.896,1948,'B747'); \n-insert into FLIGHTS values ('US1342',2,'LIM','10:30:00','BOG','12:50:00','L',2.338,1169,'B747'); \n-insert into FLIGHTS values ('US1344',1,'BOG','09:00:00','LIM','11:20:00','L',2.338,1169,'B747'); \n-insert into FLIGHTS values ('US1345',1,'LIS','09:00:00','CDG','11:48:00','L',1.806,903,'B747'); \n-insert into FLIGHTS values ('US1346',1,'CDG','09:00:00','LIS','09:48:00','L',1.806,903,'B747'); \n-insert into FLIGHTS values ('US1347',1,'LIS','09:00:00','CAS','09:43:00','S',0.73,365,'B747'); \n-insert into FLIGHTS values ('US1348',1,'CAS','09:00:00','LIS','09:43:00','S',0.73,365,'B747'); \n-insert into FLIGHTS values ('US1349',1,'LIS','09:00:00','JFK','10:44:00','L',6.744,3372,'B747'); \n-insert into FLIGHTS values ('US1300',2,'JFK','17:45:00','LIS','05:29:00','L',6.744,3372,'B747'); \n-insert into FLIGHTS values ('AA1223',1,'LOS','09:00:00','CDG','14:52:00','L',5.868,2934,'B747'); \n-insert into FLIGHTS values ('AA1224',2,'CDG','11:00:00','LOS','16:52:00','L',5.868,2934,'B747'); \n-insert into FLIGHTS values ('US1353',1,'LOS','09:00:00','MAD','13:46:00','L',4.776,2388,'B747'); \n-insert into FLIGHTS values ('US1354',1,'MAD','09:00:00','LOS','13:46:00','L',4.776,2388,'B747'); \n-insert into FLIGHTS values ('US1355',1,'LOS','09:00:00','ATH','15:03:00','L',5.054,2527,'B747'); \n-insert into FLIGHTS values ('US1356',1,'ATH','09:00:00','LOS','13:03:00','L',5.054,2527,'B747'); \n-insert into FLIGHTS values ('US1357',2,'MAD','11:45:00','CDG','13:03:00','L',1.31,655,'B747'); \n-insert into FLIGHTS values ('US1358',1,'CDG','09:00:00','MAD','10:18:00','L',1.31,655,'B747'); \n-insert into FLIGHTS values ('US1358',2,'MAD','11:05:00','CAS','11:07:00','L',1.036,518,'B747'); \n-insert into FLIGHTS values ('US1357',1,'CAS','09:00:00','MAD','11:02:00','L',1.036,518,'B747'); \n-insert into FLIGHTS values ('US1361',1,'MAD','09:00:00','JFK','10:10:00','L',7.178,3589,'B747'); \n-insert into FLIGHTS values ('US1362',1,'JFK','09:00:00','MAD','22:10:00','L',7.178,3589,'B747'); \n-insert into FLIGHTS values ('US1363',1,'MCI','09:00:00','LAX','09:42:00','L',2.71,1355,'B747'); \n-insert into FLIGHTS values ('US1364',1,'LAX','09:00:00','MCI','13:42:00','L',2.71,1355,'B747'); \n-insert into FLIGHTS values ('US1365',1,'MCI','09:00:00','DFW','09:54:00','L',0.908,454,'B747'); \n-insert into FLIGHTS values ('US1366',1,'DFW','09:00:00','MCI','09:54:00','L',0.908,454,'B747'); \n-insert into FLIGHTS values ('US1367',1,'MCI','09:00:00','JFK','12:11:00','L',2.19,1095,'B747'); \n-insert into FLIGHTS values ('US1368',1,'JFK','09:00:00','MCI','10:11:00','L',2.19,1095,'B747'); \n-insert into FLIGHTS values ('US1379',2,'MDW','10:03:00','LAX','11:31:00','L',3.482,1741,'B747'); \n-insert into FLIGHTS values ('US1380',1,'LAX','09:00:00','MDW','14:28:00','L',3.482,1741,'B747'); \n-insert into FLIGHTS values ('US1473',2,'MDW','13:30:00','JFK','15:55:00','L',1.428,714,'B747'); \n-insert into FLIGHTS values ('US1474',1,'JFK','11:00:00','MDW','11:25:00','L',1.428,714,'B747'); \n-insert into FLIGHTS values ('US1383',1,'MDW','12:15:00','ATL','14:25:00','L',1.174,587,'B747'); \n-insert into FLIGHTS values ('US1384',1,'ATL','11:30:00','MDW','11:40:00','L',1.174,587,'B747'); \n-insert into FLIGHTS values ('US1385',1,'MEL','09:00:00','SYD','09:52:00','L',0.882,441,'B747'); \n-insert into FLIGHTS values ('US1386',1,'SYD','09:00:00','MEL','09:52:00','L',0.882,441,'B747'); \n-insert into FLIGHTS values ('US1387',1,'MEL','09:00:00','SIN','13:32:00','L',7.536,3768,'B747'); \n-insert into FLIGHTS values ('US1388',2,'SIN','14:15:00','MEL','00:47:00','L',7.536,3768,'B747'); \n-insert into FLIGHTS values ('US1389',1,'MEL','09:00:00','HNL','23:02:00','L',11.044,5522,'B747'); \n-insert into FLIGHTS values ('US1390',1,'HNL','12:45:00','MEL','20:47:00','L',11.044,5522,'B747'); \n-insert into FLIGHTS values ('US1391',1,'MEM','09:00:00','MIA','11:44:00','L',1.742,871,'B747'); \n-insert into FLIGHTS values ('US1392',1,'MIA','09:00:00','MEM','09:44:00','L',1.742,871,'B747'); \n-insert into FLIGHTS values ('US1393',1,'MEM','09:00:00','JFK','11:54:00','L',1.908,954,'B747'); \n-insert into FLIGHTS values ('US1394',1,'JFK','09:00:00','MEM','09:54:00','L',1.908,954,'B747'); \n-insert into FLIGHTS values ('US1395',1,'MEM','09:00:00','LAX','10:12:00','L',3.202,1601,'B747'); \n-insert into FLIGHTS values ('US1396',1,'LAX','09:00:00','MEM','14:12:00','L',3.202,1601,'B747'); \n-insert into FLIGHTS values ('US1397',1,'MEX','09:00:00','SFO','10:46:00','L',3.78,1890,'B747'); \n-insert into FLIGHTS values ('US1398',1,'SFO','09:00:00','MEX','14:46:00','L',3.78,1890,'B747'); \n-insert into FLIGHTS values ('US1399',1,'MEX','15:00:00','LAX','16:06:00','S',3.1,1550,'B747'); \n-insert into FLIGHTS values ('US1400',1,'LAX','09:00:00','MEX','14:06:00','L',3.1,1550,'B747'); \n-insert into FLIGHTS values ('US1401',1,'MEX','09:00:00','BOG','13:57:00','L',3.95,1975,'B747'); \n-insert into FLIGHTS values ('US1402',1,'BOG','09:00:00','MEX','11:57:00','L',3.95,1975,'B747'); \n-insert into FLIGHTS values ('US1403',1,'MIA','18:00:00','GRU','04:10:00','L',8.172,4086,'B747'); \n-insert into FLIGHTS values ('US1404',1,'GRU','23:00:00','MIA','05:10:00','L',8.172,4086,'B747'); \n-insert into FLIGHTS values ('US1405',1,'MIA','17:30:00','LAX','19:10:00','D',4.67,2335,'B747'); \n-insert into FLIGHTS values ('US1406',1,'LAX','08:00:00','MIA','15:40:00','L',4.67,2335,'B747'); \n-insert into FLIGHTS values ('US1407',1,'MIA','09:00:00','JFK','11:11:00','L',2.184,1092,'B747'); \n-insert into FLIGHTS values ('US1408',1,'JFK','09:00:00','MIA','11:11:00','L',2.184,1092,'B747'); \n-insert into FLIGHTS values ('US1409',1,'MKE','09:00:00','JFK','11:27:00','L',1.466,733,'B747'); \n-insert into FLIGHTS values ('US1410',1,'JFK','09:00:00','MKE','09:27:00','L',1.466,733,'B747'); \n-insert into FLIGHTS values ('US1411',1,'MKE','09:00:00','MDW','09:09:00','S',0.166,83,'B747'); \n-insert into FLIGHTS values ('US1412',1,'MDW','09:00:00','MKE','09:09:00','S',0.166,83,'B747'); \n-insert into FLIGHTS values ('US1413',1,'MKE','09:00:00','JFK','11:27:00','L',1.466,733,'B747'); \n-insert into FLIGHTS values ('US1414',1,'JFK','09:00:00','MKE','09:27:00','L',1.466,733,'B747'); \n-insert into FLIGHTS values ('US1415',1,'MNL','09:00:00','SYD','19:47:00','L',7.794,3897,'B747'); \n-insert into FLIGHTS values ('US1416',1,'SYD','09:00:00','MNL','13:47:00','L',7.794,3897,'B747'); \n-insert into FLIGHTS values ('US1417',1,'MNL','09:00:00','TPE','10:26:00','L',1.448,724,'B747'); \n-insert into FLIGHTS values ('US1418',1,'TPE','09:00:00','MNL','10:26:00','L',1.448,724,'B747'); \n-insert into FLIGHTS values ('US1419',1,'MNL','09:00:00','SIN','11:58:00','L',2.978,1489,'B747'); \n-insert into FLIGHTS values ('US1420',2,'SIN','11:53:00','MNL','14:51:00','L',2.978,1489,'B747'); \n-insert into FLIGHTS values ('AA1419',1,'MNL','12:00:00','HKG','13:23:00','L',1.388,694,'B747'); \n-insert into FLIGHTS values ('AA1420',2,'HKG','17:53:00','MNL','19:16:00','D',1.388,694,'B747'); \n-insert into FLIGHTS values ('AA1421',1,'MNL','07:00:00','HNL','23:36:00','B',10.604,5302,'B747'); \n-insert into FLIGHTS values ('US1422',2,'HNL','14:05:00','MNL','18:41:00','L',10.604,5302,'B747'); \n-insert into FLIGHTS values ('AA1249',1,'MSP','09:00:00','DEN','09:52:00','L',1.882,941,'B747'); \n-insert into FLIGHTS values ('AA1250',2,'DEN','12:37:00','MSP','15:29:00','L',1.882,941,'B747'); \n-insert into FLIGHTS values ('US1423',1,'MSP','09:00:00','MDW','09:25:00','S',0.43,215,'B747'); \n-insert into FLIGHTS values ('US1424',1,'MDW','09:00:00','MSP','09:25:00','S',0.43,215,'B747'); \n-insert into FLIGHTS values ('AA1423',1,'MDW','08:00:00','MIA','11:22:00','L',2.376,1188,'B747'); \n-insert into FLIGHTS values ('AA1424',1,'MIA','17:00:00','MDW','18:22:00','L',2.376,1188,'B747'); \n-insert into FLIGHTS values ('US1427',1,'MSY','09:00:00','SFO','10:50:00','L',3.846,1923,'B747'); \n-insert into FLIGHTS values ('US1428',1,'SFO','09:00:00','MSY','14:50:00','L',3.846,1923,'B747'); \n-insert into FLIGHTS values ('US1429',1,'MSY','09:00:00','ATL','10:50:00','L',0.848,424,'B747'); \n-insert into FLIGHTS values ('US1430',1,'ATL','09:00:00','MSY','08:50:00','L',0.848,424,'B747'); \n-insert into FLIGHTS values ('US1431',1,'MSY','09:00:00','JFK','12:20:00','L',2.336,1168,'B747'); \n-insert into FLIGHTS values ('US1432',1,'JFK','09:00:00','MSY','10:20:00','L',2.336,1168,'B747'); \n-insert into FLIGHTS values ('US1433',1,'NBO','09:00:00','FCO','13:42:00','L',6.702,3351,'B747'); \n-insert into FLIGHTS values ('US1434',1,'FCO','09:00:00','NBO','17:42:00','L',6.702,3351,'B747'); \n-insert into FLIGHTS values ('US1435',1,'NBO','06:00:00','MAD','11:41:00','L',7.694,3847,'B747'); \n-insert into FLIGHTS values ('US1436',1,'MAD','13:10:00','NBO','22:51:00','L',7.694,3847,'B747'); \n-insert into FLIGHTS values ('US1437',1,'NBO','09:00:00','CAS','13:31:00','L',7.518,3759,'B747'); \n-insert into FLIGHTS values ('US1438',1,'CAS','09:00:00','NBO','19:31:00','L',7.518,3759,'B747'); \n-insert into FLIGHTS values ('US1439',1,'NRT','09:00:00','SYD','20:44:00','L',9.736,4868,'B747'); \n-insert into FLIGHTS values ('US1440',1,'SYD','09:00:00','NRT','16:44:00','L',9.736,4868,'B747'); \n-insert into FLIGHTS values ('US1441',1,'NRT','09:00:00','LAX','02:57:00','L',10.956,5478,'B747'); \n-insert into FLIGHTS values ('US1442',1,'LAX','09:00:00','NRT','12:57:00','L',10.956,5478,'B747'); \n-insert into FLIGHTS values ('US1443',2,'NRT','14:45:00','HKG','17:20:00','L',3.596,1798,'B747'); \n-insert into FLIGHTS values ('US1444',1,'HKG','09:00:00','NRT','13:35:00','L',3.596,1798,'B747'); \n-insert into FLIGHTS values ('US1445',1,'OKC','09:00:00','SLC','09:43:00','L',1.722,861,'B747'); \n-insert into FLIGHTS values ('US1446',1,'SLC','09:00:00','OKC','11:43:00','L',1.722,861,'B747'); \n-insert into FLIGHTS values ('US1447',1,'OKC','09:00:00','JFK','12:38:00','L',2.648,1324,'B747'); \n-insert into FLIGHTS values ('US1448',1,'JFK','09:00:00','OKC','10:38:00','L',2.648,1324,'B747'); \n-insert into FLIGHTS values ('US1449',1,'OKC','09:00:00','LAX','09:21:00','L',2.36,1180,'B747'); \n-insert into FLIGHTS values ('US1450',1,'LAX','09:00:00','OKC','13:21:00','L',2.36,1180,'B747'); \n-insert into FLIGHTS values ('US1451',1,'OSA','09:00:00','NRT','09:30:00','S',0.502,251,'B747'); \n-insert into FLIGHTS values ('US1452',1,'NRT','09:00:00','OSA','09:30:00','S',0.502,251,'B747'); \n-insert into FLIGHTS values ('US1453',1,'OSA','09:00:00','TPE','10:08:00','L',2.138,1069,'B747'); \n-insert into FLIGHTS values ('US1454',1,'TPE','09:00:00','OSA','12:08:00','L',2.138,1069,'B747'); \n-insert into FLIGHTS values ('US1455',1,'OSA','09:00:00','SVO','12:07:00','L',9.13,4565,'B747'); \n-insert into FLIGHTS values ('US1456',1,'SVO','09:00:00','OSA','00:07:00','L',9.13,4565,'B747'); \n-insert into FLIGHTS values ('US1457',1,'OSL','09:00:00','PRG','10:23:00','L',1.39,695,'B747'); \n-insert into FLIGHTS values ('US1458',1,'PRG','11:00:00','OSL','12:23:00','L',1.39,695,'B747'); \n-insert into FLIGHTS values ('US1459',1,'OSL','09:00:00','ARN','10:34:00','L',1.574,787,'B747'); \n-insert into FLIGHTS values ('US1460',1,'ARN','09:00:00','OSL','10:34:00','L',1.574,787,'B747'); \n-insert into FLIGHTS values ('US1461',1,'OSL','09:00:00','WAW','10:19:00','L',1.318,659,'B747'); \n-insert into FLIGHTS values ('US1462',1,'WAW','09:00:00','OSL','10:19:00','L',1.318,659,'B747'); \n-insert into FLIGHTS values ('AA1462',1,'OSL','07:15:00','CDG','08:55:00','B',1.668,834,'B747'); \n-insert into FLIGHTS values ('AA1463',1,'CDG','11:00:00','OSL','12:40:00','L',1.668,834,'B747'); \n-insert into FLIGHTS values ('US1463',1,'PHL','09:00:00','IAD','09:21:00','S',0.364,182,'B747'); \n-insert into FLIGHTS values ('US1464',1,'IAD','09:00:00','PHL','09:21:00','S',0.364,182,'B747'); \n-insert into FLIGHTS values ('US1465',1,'PHL','09:00:00','MIA','11:02:00','L',2.044,1022,'B747'); \n-insert into FLIGHTS values ('US1466',1,'MIA','09:00:00','PHL','11:02:00','L',2.044,1022,'B747'); \n-insert into FLIGHTS values ('AA1258',1,'PHL','09:00:00','ATL','10:19:00','L',1.33,665,'B747'); \n-insert into FLIGHTS values ('AA1257',2,'ATL','12:10:00','PHL','13:29:00','L',1.33,665,'B747'); \n-insert into FLIGHTS values ('US1469',1,'PHX','09:00:00','LAX','08:42:00','S',0.714,357,'B747'); \n-insert into FLIGHTS values ('US1470',1,'LAX','09:00:00','PHX','10:42:00','S',0.714,357,'B747'); \n-insert into FLIGHTS values ('US1471',1,'PHX','09:00:00','SEA','10:13:00','L',2.23,1115,'B747'); \n-insert into FLIGHTS values ('US1472',1,'SEA','09:00:00','PHX','12:13:00','L',2.23,1115,'B747'); \n-insert into FLIGHTS values ('US1473',1,'PHX','09:00:00','MDW','12:53:00','L',2.898,1449,'B747'); \n-insert into FLIGHTS values ('US1474',2,'MDW','09:55:00','PHX','11:48:00','L',2.898,1449,'B747'); \n-insert into FLIGHTS values ('US1475',1,'PRG','09:00:00','CDG','10:06:00','L',1.102,551,'B747'); \n-insert into FLIGHTS values ('US1476',1,'CDG','09:00:00','PRG','10:06:00','L',1.102,551,'B747'); \n-insert into FLIGHTS values ('US1477',1,'PRG','09:00:00','FCO','10:08:00','L',1.146,573,'B747'); \n-insert into FLIGHTS values ('US1478',1,'FCO','09:00:00','PRG','10:08:00','L',1.146,573,'B747'); \n-insert into FLIGHTS values ('US1479',1,'PRG','09:00:00','REY','11:16:00','B',3.282,1641,'A320'); \n-insert into FLIGHTS values ('US1480',1,'REY','09:00:00','PRG','13:16:00','L',3.282,1641,'A320'); \n-insert into FLIGHTS values ('US1481',1,'REY','09:00:00','SVO','16:06:00','L',4.112,2056,'B747'); \n-insert into FLIGHTS values ('US1482',2,'SVO','13:15:00','REY','14:21:00','L',4.112,2056,'B747'); \n-insert into FLIGHTS values ('US1483',1,'REY','09:00:00','CDG','12:46:00','L',2.776,1388,'B747'); \n-insert into FLIGHTS values ('US1484',1,'CDG','09:00:00','REY','10:46:00','L',2.776,1388,'B747'); \n-insert into FLIGHTS values ('US1485',1,'REY','09:00:00','DUB','10:51:00','L',1.862,931,'B747'); \n-insert into FLIGHTS values ('US1486',1,'DUB','09:00:00','REY','10:51:00','L',1.862,931,'B747'); \n-insert into FLIGHTS values ('US1487',1,'SAN','09:00:00','SFO','09:55:00','L',0.918,459,'B747'); \n-insert into FLIGHTS values ('US1488',1,'SFO','09:00:00','SAN','09:55:00','L',0.918,459,'B747'); \n-insert into FLIGHTS values ('US1489',1,'SAN','09:00:00','DFW','13:21:00','L',2.36,1180,'B747'); \n-insert into FLIGHTS values ('US1490',1,'DFW','09:00:00','SAN','09:21:00','L',2.36,1180,'B747'); \n-insert into FLIGHTS values ('US1491',1,'SAN','09:00:00','MEX','13:53:00','L',2.888,1444,'B747'); \n-insert into FLIGHTS values ('US1492',1,'MEX','09:00:00','SAN','09:53:00','L',2.888,1444,'B747'); \n-insert into FLIGHTS values ('US1493',1,'SAT','09:00:00','ATL','11:45:00','L',1.766,883,'B747'); \n-insert into FLIGHTS values ('US1494',1,'ATL','09:00:00','SAT','09:45:00','L',1.766,883,'B747'); \n-insert into FLIGHTS values ('US1495',1,'SAT','09:00:00','LAX','09:24:00','L',2.404,1202,'B747'); \n-insert into FLIGHTS values ('US1496',1,'LAX','09:00:00','SAT','13:24:00','L',2.404,1202,'B747'); \n-insert into FLIGHTS values ('US1497',1,'SAT','09:00:00','MIA','12:17:00','L',2.292,1146,'B747'); \n-insert into FLIGHTS values ('US1498',1,'MIA','09:00:00','SAT','10:17:00','L',2.292,1146,'B747'); \n-insert into FLIGHTS values ('US1499',1,'SCL','09:00:00','GRU','12:13:00','L',3.218,1609,'B747'); \n-insert into FLIGHTS values ('US1500',1,'GRU','09:00:00','SCL','12:13:00','L',3.218,1609,'B747'); \n-insert into FLIGHTS values ('US1501',1,'SCL','09:00:00','LIM','10:04:00','L',3.068,1534,'B747'); \n-insert into FLIGHTS values ('US1340',2,'LIM','15:00:00','SCL','20:04:00','L',3.068,1534,'B747'); \n-insert into FLIGHTS values ('US1503',1,'SCL','09:00:00','BUE','11:24:00','L',1.408,704,'B747'); \n-insert into FLIGHTS values ('US1504',1,'BUE','09:00:00','SCL','09:24:00','L',1.408,704,'B747'); \n-insert into FLIGHTS values ('US1505',1,'SEA','09:00:00','SFO','10:21:00','L',1.356,678,'B747'); \n-insert into FLIGHTS values ('AA1505',1,'SFO','09:00:00','SEA','10:21:00','L',1.356,678,'B747'); \n-insert into FLIGHTS values ('US1506',1,'SEA','09:00:00','JFK','16:48:00','L',4.81,2405,'B747'); \n-insert into FLIGHTS values ('US1507',1,'JFK','09:00:00','SEA','10:48:00','L',4.81,2405,'B747'); \n-insert into FLIGHTS values ('US1508',1,'SEA','09:00:00','MIA','17:27:00','L',5.462,2731,'B747'); \n-insert into FLIGHTS values ('US1509',2,'MIA','15:15:00','SEA','17:42:00','L',5.462,2731,'B747'); \n-insert into FLIGHTS values ('US1510',1,'SEL','09:00:00','NRT','10:26:00','L',1.438,719,'B747'); \n-insert into FLIGHTS values ('US1511',1,'NRT','09:00:00','SEL','10:26:00','L',1.438,719,'B747'); \n-insert into FLIGHTS values ('US1388',1,'SEL','09:00:00','SIN','13:49:00','L',5.818,2909,'B747'); \n-insert into FLIGHTS values ('US1387',2,'SIN','14:05:00','SEL','20:54:00','L',5.818,2909,'B747'); \n-insert into FLIGHTS values ('US1514',1,'SEL','09:00:00','SHA','09:05:00','L',1.098,549,'B747'); \n-insert into FLIGHTS values ('US1515',1,'SHA','09:00:00','SEL','11:05:00','L',1.098,549,'B747'); \n-insert into FLIGHTS values ('US1516',1,'SFO','12:00:00','JFK','20:08:00','L',5.136,2568,'B747'); \n-insert into FLIGHTS values ('US1517',2,'JFK','11:05:00','SFO','13:13:00','L',5.136,2568,'B747'); \n-insert into FLIGHTS values ('US1518',1,'SFO','09:00:00','MIA','17:10:00','L',5.18,2590,'B747'); \n-insert into FLIGHTS values ('US1518',2,'MIA','18:05:00','SCL','04:22:00','L',8.288,4144,'B747'); \n-insert into FLIGHTS values ('US1519',1,'SCL','09:00:00','MIA','15:17:00','D',8.288,4144,'B747'); \n-insert into FLIGHTS values ('US1519',2,'MIA','16:10:00','SFO','18:20:00','D',5.18,2590,'B747'); \n-insert into FLIGHTS values ('US1529',1,'SFO','09:00:00','HNL','11:47:00','L',4.794,2397,'B747'); \n-insert into FLIGHTS values ('US1521',1,'HNL','09:00:00','SFO','15:47:00','L',4.794,2397,'B747'); \n-insert into FLIGHTS values ('US1522',1,'SHA','09:00:00','SIN','13:43:00','L',4.72,2360,'B747'); \n-insert into FLIGHTS values ('US1523',1,'SIN','09:00:00','SHA','13:43:00','L',4.72,2360,'B747'); \n-insert into FLIGHTS values ('US1524',1,'SHA','09:00:00','HKG','10:30:00','L',1.514,757,'B747'); \n-insert into FLIGHTS values ('US1525',1,'HKG','09:00:00','SHA','10:30:00','L',1.514,757,'B747'); \n-insert into FLIGHTS values ('US1526',1,'SHA','09:00:00','SVO','12:29:00','L',8.486,4243,'B747'); \n-insert into FLIGHTS values ('US1527',1,'SVO','09:00:00','SHA','22:29:00','L',8.486,4243,'B747'); \n-insert into FLIGHTS values ('AA1528',1,'SIN','09:00:00','SYD','19:50:00','L',7.834,3917,'B747'); \n-insert into FLIGHTS values ('AA1529',1,'SYD','09:00:00','SIN','13:50:00','L',7.834,3917,'B747'); \n-insert into FLIGHTS values ('US1419',2,'SIN','12:35:00','JKT','12:41:00','L',1.108,554,'B747'); \n-insert into FLIGHTS values ('US1420',1,'JKT','09:00:00','SIN','11:06:00','L',1.108,554,'B747'); \n-insert into FLIGHTS values ('AA1532',1,'SIN','09:00:00','HKG','12:12:00','L',3.214,1607,'B747'); \n-insert into FLIGHTS values ('AA1533',1,'HKG','09:00:00','SIN','12:12:00','L',3.214,1607,'B747'); \n-insert into FLIGHTS values ('AA1186',1,'SJU','09:00:00','MIA','10:04:00','L',2.07,1035,'B747'); \n-insert into FLIGHTS values ('AA1185',2,'MIA','12:20:00','SJU','15:24:00','L',2.07,1035,'B747'); \n-insert into FLIGHTS values ('US1536',1,'SJU','09:00:00','CCS','10:06:00','L',1.106,553,'B747'); \n-insert into FLIGHTS values ('US1537',1,'CCS','09:00:00','SJU','10:06:00','L',1.106,553,'B747'); \n-insert into FLIGHTS values ('US1538',1,'SJU','09:00:00','MEL','20:17:00','L',20.288,10144,'B747'); \n-insert into FLIGHTS values ('US1539',1,'MEL','09:00:00','SJU','14:17:00','L',20.288,10144,'B747'); \n-insert into FLIGHTS values ('US1540',1,'SLC','09:00:00','DEN','09:44:00','S',0.74,370,'B747'); \n-insert into FLIGHTS values ('US1541',1,'DEN','09:00:00','SLC','09:44:00','S',0.74,370,'B747'); \n-insert into FLIGHTS values ('US1542',1,'SLC','09:00:00','SFO','09:11:00','L',1.198,599,'B747'); \n-insert into FLIGHTS values ('US1543',1,'SFO','09:00:00','SLC','11:11:00','L',1.198,599,'B747'); \n-insert into FLIGHTS values ('US1544',1,'SLC','09:00:00','MDW','12:30:00','L',2.51,1255,'B747'); \n-insert into FLIGHTS values ('US1545',1,'MDW','09:00:00','SLC','10:30:00','L',2.51,1255,'B747'); \n-insert into FLIGHTS values ('US1546',1,'STL','09:00:00','MDW','09:31:00','S',0.518,259,'B747'); \n-insert into FLIGHTS values ('US1547',1,'MDW','09:00:00','STL','09:31:00','S',0.518,259,'B747'); \n-insert into FLIGHTS values ('US1548',1,'STL','09:00:00','JFK','11:44:00','L',1.746,873,'B747'); \n-insert into FLIGHTS values ('US1549',1,'JFK','09:00:00','STL','09:44:00','L',1.746,873,'B747'); \n-insert into FLIGHTS values ('US1550',1,'STL','09:00:00','LAX','10:10:00','L',3.174,1587,'B747'); \n-insert into FLIGHTS values ('US1551',1,'LAX','09:00:00','STL','14:10:00','L',3.174,1587,'B747'); \n-insert into FLIGHTS values ('US1552',1,'SVO','14:00:00','CDG','15:05:00','L',3.09,1545,'B747'); \n-insert into FLIGHTS values ('US1553',1,'CDG','14:00:00','SVO','19:05:00','L',3.09,1545,'B747'); \n-insert into FLIGHTS values ('US1554',1,'SVO','09:00:00','NRT','00:18:00','L',9.308,4654,'B747'); \n-insert into FLIGHTS values ('US1555',1,'NRT','09:00:00','SVO','12:18:00','L',9.308,4654,'B747'); \n-insert into FLIGHTS values ('US1481',2,'SVO','13:45:00','BOM','22:30:00','L',6.266,3133,'B747'); \n-insert into FLIGHTS values ('US1482',1,'BOM','09:00:00','SVO','12:45:00','L',6.266,3133,'B747'); \n-insert into FLIGHTS values ('US1558',1,'SYD','09:00:00','AKL','13:40:00','L',2.682,1341,'B747'); \n-insert into FLIGHTS values ('US1559',1,'AKL','09:00:00','SYD','09:40:00','L',2.682,1341,'B747'); \n-insert into FLIGHTS values ('US1560',1,'SYD','15:00:00','HNL','04:09:00','L',10.16,5080,'B747'); \n-insert into FLIGHTS values ('US1561',1,'HNL','13:00:00','SYD','20:09:00','L',10.16,5080,'B747'); \n-insert into FLIGHTS values ('US1562',1,'SYD','09:00:00','HKG','15:09:00','L',9.166,4583,'B747'); \n-insert into FLIGHTS values ('US1563',1,'HKG','09:00:00','SYD','21:09:00','L',9.166,4583,'B747'); \n-insert into FLIGHTS values ('US1564',1,'THR','09:00:00','KBL','12:30:00','L',2.014,1007,'B747'); \n-insert into FLIGHTS values ('US1565',1,'KBL','09:00:00','THR','09:30:00','L',2.014,1007,'B747'); \n-insert into FLIGHTS values ('US1566',1,'THR','09:00:00','KHI','12:53:00','L',2.384,1192,'B747'); \n-insert into FLIGHTS values ('US1567',1,'KHI','09:00:00','THR','09:53:00','L',2.384,1192,'B747'); \n-insert into FLIGHTS values ('US1568',1,'THR','09:00:00','CAI','09:57:00','L',2.464,1232,'B747'); \n-insert into FLIGHTS values ('US1569',1,'CAI','09:00:00','THR','12:57:00','L',2.464,1232,'B747'); \n-insert into FLIGHTS values ('AA1214',1,'TPE','09:00:00','HKG','10:00:00','L',1.006,503,'B747'); \n-insert into FLIGHTS values ('AA1213',2,'HKG','15:33:00','TPE','16:33:00','L',1.006,503,'B747'); \n-insert into FLIGHTS values ('US1572',1,'TPE','09:00:00','SYD','21:02:00','L',9.036,4518,'B747'); \n-insert into FLIGHTS values ('US1573',1,'SYD','09:00:00','TPE','15:02:00','L',9.036,4518,'B747'); \n-insert into FLIGHTS values ('US1574',1,'TPE','09:00:00','OSA','12:08:00','L',2.138,1069,'B747'); \n-insert into FLIGHTS values ('US1575',1,'OSA','09:00:00','TPE','10:08:00','L',2.138,1069,'B747'); \n-insert into FLIGHTS values ('US1576',1,'WAW','09:00:00','PRG','09:38:00','S',0.64,320,'B747'); \n-insert into FLIGHTS values ('US1577',1,'PRG','09:00:00','WAW','09:38:00','S',0.64,320,'B747'); \n-insert into FLIGHTS values ('US1578',1,'WAW','09:00:00','SVO','12:25:00','L',1.428,714,'B747'); \n-insert into FLIGHTS values ('US1579',1,'SVO','09:00:00','WAW','08:25:00','L',1.428,714,'B747'); \n-insert into FLIGHTS values ('US1580',1,'WAW','09:00:00','ARN','09:28:00','S',0.478,239,'B747'); \n-insert into FLIGHTS values ('US1581',1,'ARN','09:00:00','WAW','09:28:00','S',0.478,239,'B747'); \n-insert into FLIGHTS values ('US1379',1,'YUL','09:00:00','MDW','09:29:00','L',1.494,747,'B747'); \n-insert into FLIGHTS values ('US1380',2,'MDW','13:03:00','YUL','15:32:00','L',1.494,747,'B747'); \n-insert into FLIGHTS values ('US1584',1,'YUL','09:00:00','JFK','09:39:00','S',0.664,332,'B747'); \n-insert into FLIGHTS values ('US1585',1,'JFK','09:00:00','YUL','09:39:00','S',0.664,332,'B747'); \n-insert into FLIGHTS values ('US1586',1,'YUL','09:00:00','SFO','11:04:00','L',5.076,2538,'B747'); \n-insert into FLIGHTS values ('US1587',1,'SFO','09:00:00','YUL','17:04:00','L',5.076,2538,'B747'); \n-insert into FLIGHTS values ('US1588',1,'YYZ','09:00:00','SEA','10:08:00','L',4.134,2067,'B747'); \n-insert into FLIGHTS values ('US1589',1,'SEA','09:00:00','YYZ','16:08:00','L',4.134,2067,'B747'); \n-insert into FLIGHTS values ('US1590',1,'YYZ','09:00:00','MIA','11:28:00','L',2.474,1237,'B747'); \n-insert into FLIGHTS values ('US1591',2,'MIA','12:45:00','YYZ','15:13:00','L',2.474,1237,'DC10'); \n-insert into FLIGHTS values ('US1592',1,'YYZ','09:00:00','LHR','21:06:00','L',7.106,3553,'DC10'); \n-insert into FLIGHTS values ('US1593',1,'LHR','09:00:00','YYZ','11:06:00','L',7.106,3553,'B747'); \n-insert into FLIGHTS values ('AA1600',1,'SFO','07:00:00','LAX','07:41:00','S',0.694,347,'B767'); \n-insert into FLIGHTS values ('AA1601',1,'LAX','07:00:00','SFO','07:41:00','S',0.694,347,'B767'); \n-insert into FLIGHTS values ('AA1602',1,'SFO','14:00:00','LAX','14:41:00','S',0.694,347,'B767'); \n-insert into FLIGHTS values ('AA1603',1,'LAX','14:00:00','SFO','14:41:00','S',0.622,347,'B767'); \n-insert into FLIGHTS values ('US1600',1,'YYZ','09:00:00','YUL','09:37:00','S',0.694,311,'DC10'); \n-insert into FLIGHTS values ('US1600',2,'YUL','10:00:00','SCL','18:55:00','L',10.926,5463,'DC10'); \n-insert into FLIGHTS values ('US1601',1,'SCL','05:00:00','YUL','17:55:00','L',10.926,5463,'DC10'); \n-insert into FLIGHTS values ('US1601',2,'YUL','19:00:00','YYZ','19:37:00','L',0.622,311,'DC10'); "},{"sha":"0768cf72e92af5daed1f9b7d13db2d13fc2df898","filename":"1.2.x/openjpa-integration/examples/pom.xml","status":"removed","additions":0,"deletions":99,"changes":99,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-integration/examples/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-integration/examples/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-integration/examples/pom.xml?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,99 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<!--\n- Licensed to the Apache Software Foundation (ASF) under one\n- or more contributor license agreements.  See the NOTICE file\n- distributed with this work for additional information\n- regarding copyright ownership.  The ASF licenses this file\n- to you under the Apache License, Version 2.0 (the\n- \"License\"); you may not use this file except in compliance\n- with the License.  You may obtain a copy of the License at\n- \n- http://www.apache.org/licenses/LICENSE-2.0\n- \n- Unless required by applicable law or agreed to in writing,\n- software distributed under the License is distributed on an\n- \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- KIND, either express or implied.  See the License for the\n- specific language governing permissions and limitations\n- under the License.   \n--->\n-\n-<!--\n-    This integration build tests the examples that are bundled with\n-    the OpenJPA distribution.\n-\n-    The examples will only be run if you have the 'examples-profile' enabled:\n-\n-        mvn integration-test -Pexamples-profile\n--->\n-<!-- \n-    Please keep the project tag on one line to avoid confusing \n-    the release plugin.\n--->\n-<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n-    <modelVersion>4.0.0</modelVersion>\n-    <artifactId>examples</artifactId>\n-    <packaging>pom</packaging>\n-    <name>OpenJPA Examples Integration Tests</name>\n-    <parent>\n-        <groupId>org.apache.openjpa</groupId>\n-        <artifactId>openjpa-integration</artifactId>\n-        <version>1.2.1</version>\n-    </parent>\n-\n-    <profiles>\n-    <profile>\n-    <id>examples-profile</id>\n-    <build>\n-        <plugins>\n-            <plugin>\n-                <groupId>org.apache.maven.plugins</groupId>\n-                <artifactId>maven-antrun-plugin</artifactId>\n-                <executions>\n-                    <execution>\n-                        <id>run-examples</id>\n-                        <phase>integration-test</phase>\n-                        <configuration>\n-                        <tasks>\n-                        <echo>Running OpenJPA Examples</echo>\n-\n-                        <property name=\"examples.base\" value=\"${basedir}/target/examples\" />\n-                        <mkdir dir=\"${examples.base}\" />\n-\n-                        <unzip overwrite=\"false\" dest=\"${examples.base}\" src=\"../../target/site/downloads/apache-openjpa-${pom.version}-binary.zip\" />\n-\n-                        <path id=\"assembly.classpath\"> \n-                            <fileset dir=\"${examples.base}\">\n-                                <include name=\"**/*.jar\" />\n-                            </fileset>\n-                        </path>\n-                        <available classname=\"org.apache.openjpa.conf.OpenJPAVersion\" classpathref=\"assembly.classpath\" property=\"unzip.success\" />\n-                        <fail unless=\"unzip.success\">\n-                            Could not extract assembly.\n-                        </fail>\n-\n-                        <subant inheritAll=\"false\" failonerror=\"true\">\n-                            <fileset dir=\"${examples.base}\" includes=\"*/examples/*/build.xml\" />\n-                        </subant>\n-\n-                        </tasks>\n-                        </configuration>\n-                        <goals>\n-                            <goal>run</goal>\n-                        </goals>\n-                    </execution>\n-                </executions>\n-            </plugin>\n-        </plugins>\n-    </build>\n-    </profile>\n-    </profiles>\n-\n-    <dependencies>\n-        <dependency>\n-            <groupId>org.apache.openjpa</groupId>\n-            <artifactId>openjpa</artifactId>\n-            <version>${pom.version}</version>\n-        </dependency>\n-    </dependencies>\n-</project>"},{"sha":"c819ab8ae0a7312d3278ee536f289339222c3bec","filename":"1.2.x/openjpa-integration/pom.xml","status":"removed","additions":0,"deletions":38,"changes":38,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-integration/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-integration/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-integration/pom.xml?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,38 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<!--\n- Licensed to the Apache Software Foundation (ASF) under one\n- or more contributor license agreements.  See the NOTICE file\n- distributed with this work for additional information\n- regarding copyright ownership.  The ASF licenses this file\n- to you under the Apache License, Version 2.0 (the\n- \"License\"); you may not use this file except in compliance\n- with the License.  You may obtain a copy of the License at\n- \n- http://www.apache.org/licenses/LICENSE-2.0\n- \n- Unless required by applicable law or agreed to in writing,\n- software distributed under the License is distributed on an\n- \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- KIND, either express or implied.  See the License for the\n- specific language governing permissions and limitations\n- under the License.   \n--->\n-<!-- \n-    Please keep the project tag on one line to avoid confusing \n-    the release plugin.\n--->\n-<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n-    <modelVersion>4.0.0</modelVersion>\n-    <artifactId>openjpa-integration</artifactId>\n-    <packaging>pom</packaging>\n-    <name>OpenJPA Integration Tests</name>\n-    <parent>\n-        <groupId>org.apache.openjpa</groupId>\n-        <artifactId>openjpa-parent</artifactId>\n-        <version>1.2.1</version>\n-    </parent>\n-    <modules>\n-        <module>examples</module>\n-        <module>tck</module>\n-    </modules>\n-</project>"},{"sha":"8583f8365558a297d3ce7606e1f61168f93a06ce","filename":"1.2.x/openjpa-integration/tck/pom.xml","status":"removed","additions":0,"deletions":300,"changes":300,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-integration/tck/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-integration/tck/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-integration/tck/pom.xml?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,300 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<!--\n- Licensed to the Apache Software Foundation (ASF) under one\n- or more contributor license agreements.  See the NOTICE file\n- distributed with this work for additional information\n- regarding copyright ownership.  The ASF licenses this file\n- to you under the Apache License, Version 2.0 (the\n- \"License\"); you may not use this file except in compliance\n- with the License.  You may obtain a copy of the License at\n- \n- http://www.apache.org/licenses/LICENSE-2.0\n- \n- Unless required by applicable law or agreed to in writing,\n- software distributed under the License is distributed on an\n- \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- KIND, either express or implied.  See the License for the\n- specific language governing permissions and limitations\n- under the License.   \n--->\n-\n-<!--\n-    This build file is used to run the JPA TCK. It assumes that you have\n-    the TCK zip file located at:\n-\n-        ${user.home}/.m2/privaterepos/jpa-1_0b-tck.zip\n-\n-    If you have that file in a different location, it can be specified with\n-    the \"tck.zip\" system property.\n-\n-    The TCK will only be run if you have the \"tck-profile\" enabled.\n-\n-    To run a specific package of tests, use the \"jpatck.pkg.dir\" system\n-    property to specify the parent directory of the tests you want to run.\n-    E.g.:\n-\n-        mvn integration-test -Ptck-profile -Djpatck.pkg.dir=com/sun/ts/tests/ejb30/persistence/inheritance/mappedsc/descriptors\n-\n-    You can also run using another database (e.g., oracle) using command\n-    line properties. For example:\n-\n-        mvn integration-test -Ddb.name=oracle -Ddb.driver=oracle.jdbc.driver.OracleDriver -Ddb.url=jdbc:oracle:thin:@dbhost:1526:dbname -Ddb.username=scott -Ddb.password=tiger -Ddb.jar=/tmp/oracle-jdbc.jar -Dtest=false -Ptck-profile -Djpatck.pkg.dir=com/sun/ts/tests/ejb30/persistence/query/apitests -Djpatck.test=queryAPITest15\n-\n-    The TCK running process will do the following:\n-\n-    1. Fine the TCK zip file and extract it\n-    2. Create an openjpa-provier.properties file with the OpenJPA config\n-    3. Modify the TCK's main configuration file (ts.jte) to use OpenJPA\n-    4. Run the database initialization script\n-    5. Run the TCK script\n-    6. Parse the TCK result log to determine whether to fail the build or not\n--->\n-<!-- \n-    Please keep the project tag on one line to avoid confusing \n-    the release plugin.\n--->\n-<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n-    <modelVersion>4.0.0</modelVersion>\n-    <artifactId>tck</artifactId>\n-    <packaging>pom</packaging>\n-    <name>OpenJPA JPA TCK Integration Tests</name>\n-    <parent>\n-        <groupId>org.apache.openjpa</groupId>\n-        <artifactId>openjpa-integration</artifactId>\n-        <version>1.2.1</version>\n-    </parent>\n-\n-    <profiles>\n-    <profile>\n-    <id>tck-profile</id>\n-    <build>\n-        <plugins>\n-            <plugin>\n-                <groupId>org.apache.maven.plugins</groupId>\n-                <artifactId>maven-antrun-plugin</artifactId>\n-                <executions>\n-                    <execution>\n-                        <id>run-tck</id>\n-                        <phase>integration-test</phase>\n-                        <configuration>\n-                        <tasks>\n-                        <echo>Running Sun JPA TCK</echo>\n-\n-                        <property name=\"tck.zip\" value=\"${settings.localRepository}/../privaterepos/jpa-1_0b-tck.zip\" />\n-                         <available property=\"tck.available\" file=\"${tck.zip}\" />\n-                        <fail unless=\"tck.available\">The TCK file ${tck.zip} does not exist. This file must be downloaded separately in order to be able to run the JPA TCK</fail>\n-\n-\n-                        <available property=\"tck.available\" file=\"${tck.zip}\" />\n-                        <fail unless=\"tck.available\">The TCK file specific in the \"tck.zip\" system property (${tck.zip}) does not exist. This file must be downloaded separately in order to be able to run the JPA TCK</fail>\n-\n-                        <property name=\"tck.base\" value=\"${basedir}/target/tck\" />\n-                        <property name=\"tck.dir\" value=\"${tck.base}/jpatck\" />\n-\n-                        <delete dir=\"${tck.dir}\" />\n-\n-                        <unzip overwrite=\"false\" src=\"${tck.zip}\" dest=\"${tck.base}\" />\n-\n-                        <path id=\"cp\">\n-                            <path refid=\"maven.compile.classpath\" />\n-\n-                            <!-- use official JPA API instead of GM's -->\n-                            <fileset dir=\"${tck.dir}/lib\">\n-                                <include name=\"**/*.jar\" />\n-                                <exclude name=\"**/geronimo-jpa*\" />\n-                            </fileset>\n-                            <pathelement path=\"${java.class.path}\" />\n-                            <pathelement path=\"${db.jar}\" />\n-                        </path>\n-                        <pathconvert property=\"cp.property\" refid=\"cp\" />\n-\n-                        <property name=\"db.name\" value=\"derby\" />\n-                        <property name=\"db.driver\" value=\"org.apache.derby.jdbc.EmbeddedDriver\" />\n-                        <property name=\"db.url\" value=\"jdbc:derby:derby-database;create=true\" />\n-                        <property name=\"db.username\" value=\"nousername\" />\n-                        <property name=\"db.password\" value=\"nopassword\" />\n-\n-                        <property name=\"openjpa.log.level\" value=\"WARN\" />\n-\n-                        <property name=\"jpatck.pkg.dir\" value=\"com\" />\n-                        <property name=\"jpatck.test\" value=\"\" />\n-\n-                        <property name=\"jpatck.work.dir\" value=\"${tck.dir}/../work\" />\n-                        <property name=\"tck.log\" value=\"${tck.base}/openjpa-tck.log\" />\n-\n-                        <property name=\"openjpa.properties\" value=\"${tck.dir}/openjpa-provier.properties\" />\n-\n-                        <!-- create the OpenJPA properties for the TCK run -->\n-                        <echo append=\"false\" file=\"${openjpa.properties}\">\n-javax.persistence.provider: org.apache.openjpa.persistence.PersistenceProviderImpl\n-openjpa.ConnectionDriverName: ${db.driver}\n-openjpa.ConnectionURL: ${db.url}\n-openjpa.ConnectionUserName: ${db.username}\n-openjpa.ConnectionPassword: ${db.password}\n-openjpa.FetchBatchSize: -1\n-openjpa.Compatibility: StrictIdentityValues=true\n-openjpa.Sequence: time\n-openjpa.Log: DefaultLevel=${openjpa.log.level}\n-openjpa.jdbc.DBDictionary: StoreCharsAsNumbers=false\n-openjpa.jdbc.SchemaFactory: native(ForeignKeys=true)\n-                        </echo>\n-\n-                        <!-- Append OpenJPA-specific configuration -->\n-                        <property name=\"jpatck.config\" value=\"${tck.dir}/bin/ts.jte\" />\n-\n-                        <echo append=\"false\" file=\"${jpatck.config}.tmp\">\n-\n-\n-#########################################################################\n-## OpenJPA specific properties follow\n-#########################################################################\n-\n-jpa.home=${tck.dir}\n-work.dir=${jpatck.work.dir}\n-report.dir=${tck.dir}/../reports\n-jpa.classes=${cp.property}\n-database.classes=${jpa.classes}\n-# Need to specify java.* classes, both in Windows/UNIX locations as well as Mac.\n-# This includes a few different possible locations; only one of them needs to \n-# actually work for a given environment.\n-sigTestClasspath=${JAVA_HOME}/lib/rt.jar${path.separator}${JAVA_HOME}/jre/lib/rt.jar${path.separator}${JAVA_HOME}/../Classes/classes.jar${path.separator}$${jpa.classes}\n-persistence.unit.properties.file.full.path=${openjpa.properties}\n-database.user=${db.username}\n-database.passwd=${db.password}\n-database.url=${db.url}\n-database.driver=${db.driver}\n-databaseName=${db.name}\n-\n-                        </echo>\n-\n-                        <!-- convert backslashes and known paths with spaces\n-                            to get around a problem with the TCK testrunner \n-                            on windows -->\n-                        <replace summary=\"yes\" file=\"${jpatck.config}.tmp\" replacefilterfile=\"windows-replacefilter.properties\" />\n-                        <concat append=\"true\" destfile=\"${jpatck.config}\">\n-                            <fileset file=\"${jpatck.config}.tmp\" />\n-                        </concat>\n-\n-                        <path id=\"agent.path\">\n-                            <fileset dir=\"../../openjpa-all/target\">\n-                                <include name=\"*.jar\" />\n-                            </fileset>\n-                        </path>\n-                        <pathconvert dirsep=\"/\" property=\"agent\" refid=\"agent.path\" />\n-                        <property name=\"agent.properties\" value=\"\" />\n-                        <echo>AGENT: ${agent}${agent.properties}</echo>\n-\n-                        <!--\n-                            Replace the existing javaagent argument (which\n-                            uses Toplink's enhancer) with our own. Also, we\n-                            need to specify the default MetaDataFactory in\n-                            order to allow tests that don't have any\n-                            persistent classes to work (like the SignatureTest)\n-                        -->\n-                        <replace file=\"${jpatck.config}\">\n-                            <replacefilter token=\"-javaagent:${jpa.home}/lib/toplink-essentials-agent.jar\" value=\"-javaagent:${agent}${agent.properties} -Dopenjpa.MetaDataFactory=jpa(DefaultAccessType=PROPERTY)\" />\n-                        </replace>\n-\n-                        <!-- make a macro for the TCK harness launcher -->\n-                        <macrodef name=\"tsant\">\n-                            <attribute name=\"buildfile\" />\n-                            <attribute name=\"target\" />\n-                            <sequential>\n-                                <java classname=\"org.apache.tools.ant.launch.Launcher\" fork=\"true\" failonerror=\"true\" dir=\"${tck.dir}/src\" append=\"true\" output=\"${tck.log}\" timeout=\"7200000\">\n-                                    <arg value=\"-emacs\" />\n-                                    <arg value=\"-buildfile\" />\n-                                    <arg value=\"@{buildfile}\" />\n-                                    <arg value=\"-listener\" />\n-                                    <arg value=\"com.sun.ant.TSBuildListener\" />\n-                                    <arg value=\"-logger\" />\n-                                    <arg value=\"com.sun.ant.TSLogger\" />\n-                                    <arg value=\"@{target}\" />\n-\n-                                    <env key=\"TS_HOME\" value=\"..\" />\n-                                    <sysproperty key=\"ts.home\" value=\"..\" />\n-\n-                                    <env key=\"ANT_HOME\" value=\"${tck.dir}/tools/ant\" />\n-                                    <sysproperty key=\"ant.home\" value=\"${tck.dir}/tools/ant\" />\n-\n-                                    <sysproperty key=\"pkg.dir\" value=\"${jpatck.pkg.dir}\" />\n-                                    <!--\n-                                    <sysproperty key=\"test\" value=\"${jpatck.test}\" />\n-                                    -->\n-\n-                                    <classpath>\n-                                        <path refid=\"cp\" />\n-                                        <fileset dir=\"${tck.dir}/tools/ant/lib\">\n-                                            <include name=\"**/*.jar\" />\n-                                        </fileset>\n-                                    </classpath>\n-                                </java>\n-                            </sequential>\n-                        </macrodef>\n-\n-                        <echo>Logging JPA TCK output to ${tck.log}</echo>\n-\n-                        <!-- first initialize the database -->\n-                        <tsant buildfile=\"${tck.dir}/bin/initdb.xml\" target=\"init.database\" />\n-\n-                        <!-- now run the TCK -->\n-                        <tsant buildfile=\"${tck.dir}/bin/build.xml\" target=\"runclient\" />\n-\n-                        <!--\n-                            The TCK's Java process doesn't actually fail when\n-                            tests fail, so we need to parse the results file\n-                            for a string indicating whether or not it passed.\n-                        -->\n-                        <loadfile property=\"jpatck.results\" srcfile=\"${jpatck.work.dir}/jtData/log.txt\" />\n-                        <condition property=\"jpatck.failed\">\n-                            <contains string=\"${jpatck.results}\" substring=\"Completed test run: not ok\" />\n-                        </condition>\n-                        <fail if=\"jpatck.failed\">Some tests failed</fail>\n-\n-                        <echo>JPA TCK Passed 100%!</echo>\n-\n-                        <property name=\"tck.results.archive\" value=\"${tck.base}/openjpa-tck-results.zip\" />\n-                        <zip destfile=\"${tck.results.archive}\" basedir=\"${jpatck.work.dir}\" />\n-                        <echo>Results archive at: ${tck.results.archive}</echo>\n-\n-                        </tasks>\n-                        </configuration>\n-                        <goals>\n-                            <goal>run</goal>\n-                        </goals>\n-                    </execution>\n-                </executions>\n-            </plugin>\n-        </plugins>\n-    </build>\n-    </profile>\n-    </profiles>\n-\n-    <repositories>\n-        <repository>\n-            <id>java.net</id>\n-            <name>Java.net Maven Repository</name>\n-            <url>https://maven-repository.dev.java.net/nonav/repository</url>\n-            <layout>legacy</layout>\n-        </repository>\n-    </repositories>\n-\n-    <dependencies>\n-        <!-- use the authoritative javax.persistence API for testing -->\n-        <dependency>\n-            <groupId>javax.persistence</groupId>\n-            <artifactId>persistence-api</artifactId>\n-            <version>1.0b</version>\n-        </dependency>\n-        <dependency>\n-            <groupId>org.apache.openjpa</groupId>\n-            <artifactId>openjpa-kernel</artifactId>\n-            <version>${pom.version}</version>\n-        </dependency>\n-        <dependency>\n-            <groupId>org.apache.derby</groupId>\n-            <artifactId>derby</artifactId>\n-            <version>10.2.1.6</version>\n-            <scope>compile</scope>\n-        </dependency>\n-    </dependencies>\n-</project>"},{"sha":"e1c6baacabe49fee47c70b17cc315017c52238a1","filename":"1.2.x/openjpa-integration/tck/windows-replacefilter.properties","status":"removed","additions":0,"deletions":18,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-integration/tck/windows-replacefilter.properties","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-integration/tck/windows-replacefilter.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-integration/tck/windows-replacefilter.properties?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,18 +0,0 @@\n-# Licensed to the Apache Software Foundation (ASF) under one or more\n-# contributor license agreements.  See the NOTICE file distributed with\n-# this work for additional information regarding copyright ownership.\n-# The ASF licenses this file to You under the Apache License, Version 2.0\n-# (the \"License\"); you may not use this file except in compliance with\n-# the License.  You may obtain a copy of the License at\n-#\n-#    http://www.apache.org/licenses/LICENSE-2.0\n-#\n-# Unless required by applicable law or agreed to in writing, software\n-# distributed under the License is distributed on an \"AS IS\" BASIS,\n-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-# See the License for the specific language governing permissions and\n-# limitations under the License.\n-\n-\\\\: /\n-Documents\\ and\\ Settings: Docume~1\n-Program\\ Files: Progra~1"},{"sha":"f595afac8b1dafdc6319df34f9785e09b75c3157","filename":"1.2.x/openjpa-jdbc/pom.xml","status":"removed","additions":0,"deletions":69,"changes":69,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/pom.xml?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,69 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<!--\n- Licensed to the Apache Software Foundation (ASF) under one\n- or more contributor license agreements.  See the NOTICE file\n- distributed with this work for additional information\n- regarding copyright ownership.  The ASF licenses this file\n- to you under the Apache License, Version 2.0 (the\n- \"License\"); you may not use this file except in compliance\n- with the License.  You may obtain a copy of the License at\n- \n- http://www.apache.org/licenses/LICENSE-2.0\n- \n- Unless required by applicable law or agreed to in writing,\n- software distributed under the License is distributed on an\n- \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- KIND, either express or implied.  See the License for the\n- specific language governing permissions and limitations\n- under the License.   \n--->\n-<!-- \n-    Maven release plugin requires the project tag to be on a single line. \n--->\n-<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n-    <modelVersion>4.0.0</modelVersion>\n-    <groupId>org.apache.openjpa</groupId>\n-    <artifactId>openjpa-jdbc</artifactId>\n-    <packaging>jar</packaging>\n-    <name>OpenJPA JDBC</name>\n-    <description>OpenJPA JDBC</description>\n-    <url>http://openjpa.apache.org</url>\n-    <parent>\n-        <groupId>org.apache.openjpa</groupId>\n-        <artifactId>openjpa-parent</artifactId>\n-        <version>1.2.1</version>\n-    </parent>\n-    <dependencies>\n-        <dependency>\n-            <groupId>org.apache.openjpa</groupId>\n-            <artifactId>openjpa-kernel</artifactId>\n-            <version>${pom.version}</version>\n-            <scope>compile</scope>\n-        </dependency>\n-        <dependency>\n-            <groupId>javax.xml.bind</groupId>\n-            <artifactId>jaxb-api</artifactId>\n-        </dependency>\n-        <dependency>\n-            <groupId>hsqldb</groupId>\n-            <artifactId>hsqldb</artifactId>\n-            <scope>compile</scope>\n-        </dependency>\n-        <dependency>\n-            <groupId>postgresql</groupId>\n-            <artifactId>postgresql</artifactId>\n-            <version>8.1-407.jdbc3</version>\n-        </dependency>\n-    </dependencies>\n-    <build>\n-        <plugins>\n-            <plugin>\n-                <artifactId>maven-compiler-plugin</artifactId>\n-                <configuration>\n-                    <source>1.5</source>\n-                    <target>1.5</target>\n-                </configuration>\n-            </plugin>\n-        </plugins>\n-    </build>\n-</project>"},{"sha":"9cb60aca8b1160e77247c22869b54352338296b8","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/ant/MappingToolTask.java","status":"removed","additions":0,"deletions":243,"changes":243,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/ant/MappingToolTask.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/ant/MappingToolTask.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/ant/MappingToolTask.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,243 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.ant;\n-\n-import java.security.AccessController;\n-\n-import org.apache.tools.ant.BuildException;\n-import org.apache.tools.ant.types.EnumeratedAttribute;\n-import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n-import org.apache.openjpa.jdbc.conf.JDBCConfigurationImpl;\n-import org.apache.openjpa.jdbc.meta.MappingTool;\n-import org.apache.openjpa.jdbc.schema.SchemaTool;\n-import org.apache.openjpa.lib.ant.AbstractTask;\n-import org.apache.openjpa.lib.conf.ConfigurationImpl;\n-import org.apache.openjpa.lib.util.Files;\n-import org.apache.openjpa.lib.util.J2DoPrivHelper;\n-import org.apache.openjpa.lib.util.Localizer;\n-import org.apache.openjpa.util.MultiLoaderClassResolver;\n-\n-/**\n- * Executes the {@link MappingTool} on the specified files.\n- * This task can take the following arguments:\n- * <ul>\n- * <li><code>action</code></li>\n- * <li><code>meta</code></li>\n- * <li><code>schemaAction</code></li>\n- * <li><code>dropTables</code></li>\n- * <li><code>ignoreErrors</code></li>\n- * <li><code>readSchema</code></li>\n- * <li><code>primaryKeys</code></li>\n- * <li><code>foreignKeys</code></li>\n- * <li><code>indexes</code></li>\n- * <li><code>file</code></li>\n- * <li><code>schemaFile</code></li>\n- * <li><code>sqlFile</code></li>\n- * <li><code>tmpClassLoader</code></li>\n- * </ul> Of these arguments, only <code>action</code> is required.\n- */\n-public class MappingToolTask\n-    extends AbstractTask {\n-\n-    private static final Localizer _loc = Localizer.forPackage\n-        (MappingToolTask.class);\n-\n-    protected MappingTool.Flags flags = new MappingTool.Flags();\n-    protected String file = null;\n-    protected String schemaFile = null;\n-    protected String sqlFile = null;\n-    protected boolean tmpClassLoader = true;\n-\n-    /**\n-     * Set the enumerated MappingTool action type.\n-     */\n-    public void setAction(Action act) {\n-        flags.action = act.getValue();\n-    }\n-\n-    /**\n-     * Set the enumerated SchemaTool action type.\n-     */\n-    public void setSchemaAction(SchemaAction act) {\n-        flags.schemaAction = act.getValue();\n-    }\n-\n-    /**\n-     * Set whether the MappingTool should read the full schema.\n-     */\n-    public void setReadSchema(boolean readSchema) {\n-        flags.readSchema = readSchema;\n-    }\n-\n-    /**\n-     * Set whether we want the MappingTool to ignore SQL errors.\n-     */\n-    public void setIgnoreErrors(boolean ignoreErrors) {\n-        flags.ignoreErrors = ignoreErrors;\n-    }\n-\n-    /**\n-     * Set whether the MappingTool should drop tables.\n-     */\n-    public void setDropTables(boolean dropTables) {\n-        flags.dropTables = dropTables;\n-    }\n-\n-    /**\n-     * Set whether to drop OpenJPA tables.\n-     */\n-    public void setOpenJPATables(boolean openjpaTables) {\n-        flags.openjpaTables = openjpaTables;\n-    }\n-\n-    /**\n-     * Set whether the MappingTool should drop sequences.\n-     */\n-    public void setDropSequences(boolean dropSequences) {\n-        flags.dropSequences = dropSequences;\n-    }\n-\n-    /**\n-     * Set whether the MappingTool should manipulate sequences.\n-     */\n-    public void setSequences(boolean sequences) {\n-        flags.sequences = sequences;\n-    }\n-\n-    /**\n-     * Set whether to generate primary key information.\n-     */\n-    public void setPrimaryKeys(boolean pks) {\n-        flags.primaryKeys = pks;\n-    }\n-\n-    /**\n-     * Set whether to generate foreign key information.\n-     */\n-    public void setForeignKeys(boolean fks) {\n-        flags.foreignKeys = fks;\n-    }\n-\n-    /**\n-     * Set whether to generate index information.\n-     */\n-    public void setIndexes(boolean idxs) {\n-        flags.indexes = idxs;\n-    }\n-\n-    /**\n-     * Set the output file we want the MappingTool to write to.\n-     */\n-    public void setFile(String file) {\n-        this.file = file;\n-    }\n-\n-    /**\n-     * Set the output file for an XML representation of the planned schema.\n-     */\n-    public void setSchemaFile(String schemaFile) {\n-        this.schemaFile = schemaFile;\n-    }\n-\n-    /**\n-     * Set the output file we want the MappingTool to write a SQL script to.\n-     */\n-    public void setSQLFile(String sqlFile) {\n-        this.sqlFile = sqlFile;\n-    }\n-\n-    /**\n-     * Set whether this action applies to metadata as well as mappings.\n-     */\n-    public void setMeta(boolean meta) {\n-        flags.meta = meta;\n-    }\n-\n-    protected ConfigurationImpl newConfiguration() {\n-        return new JDBCConfigurationImpl();\n-    }\n-\n-    protected void executeOn(String[] files)\n-        throws Exception {\n-        if (MappingTool.ACTION_IMPORT.equals(flags.action))\n-            assertFiles(files);\n-\n-        ClassLoader toolLoader = (ClassLoader) AccessController\n-                .doPrivileged(J2DoPrivHelper\n-                        .getClassLoaderAction(MappingTool.class));\n-        ClassLoader loader = toolLoader;\n-        MultiLoaderClassResolver resolver = new MultiLoaderClassResolver();\n-\n-        if (tmpClassLoader) {\n-            loader = (ClassLoader) AccessController.doPrivileged(J2DoPrivHelper\n-                    .newTemporaryClassLoaderAction(getClassLoader()));\n-            resolver.addClassLoader(loader);\n-        }\n-        resolver.addClassLoader(toolLoader);\n-            \n-        if (flags.meta && MappingTool.ACTION_ADD.equals(flags.action))\n-            flags.metaDataFile = Files.getFile(file, loader);\n-        else\n-            flags.mappingWriter = Files.getWriter(file, loader);\n-\n-        flags.schemaWriter = Files.getWriter(schemaFile, loader);\n-        flags.sqlWriter = Files.getWriter(sqlFile, loader);\n-\n-        JDBCConfiguration conf = (JDBCConfiguration) getConfiguration();\n-        conf.setClassResolver(resolver);\n-        \n-        if (!MappingTool.run(conf, files, flags, loader))\n-            throw new BuildException(_loc.get(\"bad-conf\", \"MappingToolTask\")\n-                .getMessage());\n-    }\n-\n-    public static class Action\n-        extends EnumeratedAttribute {\n-\n-        public String[] getValues() {\n-            return MappingTool.ACTIONS;\n-        }\n-    }\n-\n-    public static class SchemaAction\n-        extends EnumeratedAttribute {\n-\n-        public String[] getValues() {\n-            String[] actions = new String[SchemaTool.ACTIONS.length + 1];\n-            System.arraycopy(SchemaTool.ACTIONS, 0, actions, 0,\n-                SchemaTool.ACTIONS.length);\n-            actions[actions.length - 1] = \"none\";\n-            return actions;\n-        }\n-    }\n-\n-    /**\n-     * <P>\n-     * Set whether a temporary ClassLoader should be used by the MappingTool.\n-     * The default value is true\n-     * </P>\n-     * \n-     * @param tmpClassLoader\n-     *            Whether the temporary ClassLoader should be used.\n-     */\n-    public void setTmpClassLoader(boolean tmpClassLoader) {\n-        this.tmpClassLoader = tmpClassLoader;\n-    }\n-}\n-"},{"sha":"176547dfba0d67756397ca943f0a9831fa85769f","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/ant/ReverseMappingToolTask.java","status":"removed","additions":0,"deletions":312,"changes":312,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/ant/ReverseMappingToolTask.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/ant/ReverseMappingToolTask.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/ant/ReverseMappingToolTask.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,312 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.ant;\n-\n-import java.io.File;\n-import java.io.FileInputStream;\n-import java.io.FileNotFoundException;\n-import java.security.AccessController;\n-import java.security.PrivilegedActionException;\n-import java.util.Properties;\n-\n-import org.apache.commons.lang.StringUtils;\n-import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n-import org.apache.openjpa.jdbc.conf.JDBCConfigurationImpl;\n-import org.apache.openjpa.jdbc.meta.PropertiesReverseCustomizer;\n-import org.apache.openjpa.jdbc.meta.ReverseCustomizer;\n-import org.apache.openjpa.jdbc.meta.ReverseMappingTool;\n-import org.apache.openjpa.lib.ant.AbstractTask;\n-import org.apache.openjpa.lib.conf.ConfigurationImpl;\n-import org.apache.openjpa.lib.conf.Configurations;\n-import org.apache.openjpa.lib.util.CodeFormat;\n-import org.apache.openjpa.lib.util.Files;\n-import org.apache.openjpa.lib.util.J2DoPrivHelper;\n-import org.apache.tools.ant.types.EnumeratedAttribute;\n-\n-/**\n- * Executes the {@link ReverseMappingTool} on the specified XML files.\n- * This task can take the following arguments:\n- * <ul>\n- * <li><code>package</code></li>\n- * <li><code>directory</code></li>\n- * <li><code>useSchemaName</code></li>\n- * <li><code>useForeignKeyName</code></li>\n- * <li><code>nullableAsObject</code></li>\n- * <li><code>blobAsObject</code></li>\n- * <li><code>typeMap</code></li>\n- * <li><code>primaryKeyOnJoin</code></li>\n- * <li><code>useDatastoreIdentity</code></li>\n- * <li><code>useBuiltinIdentityClass</code></li>\n- * <li><code>detachable</code></li>\n- * <li><code>inverseRelations</code></li>\n- * <li><code>discriminatorStrategy</code></li>\n- * <li><code>versionStrategy</code></li>\n- * <li><code>innerIdentityClasses</code></li>\n- * <li><code>identityClassSuffix</code></li>\n- * <li><code>metadata</code></li>\n- * <li><code>customizerClass</code></li>\n- * <li><code>customizerProperties</code></li>\n- * </ul> The task also accepts an embedded <code>codeFormat</code> element with\n- * attributes for the bean properties of the {@link CodeFormat}.\n- */\n-public class ReverseMappingToolTask\n-    extends AbstractTask {\n-\n-    protected ReverseMappingTool.Flags flags = new ReverseMappingTool.Flags();\n-    protected String dirName = null;\n-    protected String typeMap = null;\n-    protected String customizerProperties = null;\n-    protected String customizerClass =\n-        PropertiesReverseCustomizer.class.getName();\n-\n-    /**\n-     * Default constructor.\n-     */\n-    public ReverseMappingToolTask() {\n-        flags.metaDataLevel = \"package\";\n-        flags.format = new CodeFormat();\n-    }\n-\n-    /**\n-     * Set the package name for the generated classes.\n-     */\n-    public void setPackage(String pkg) {\n-        flags.packageName = pkg;\n-    }\n-\n-    /**\n-     * Set the output directory for the generated classes.\n-     */\n-    public void setDirectory(String dirName) {\n-        this.dirName = dirName;\n-    }\n-\n-    /**\n-     * Set whether to use the schema name when naming the classes.\n-     */\n-    public void setUseSchemaName(boolean useSchemaName) {\n-        flags.useSchemaName = useSchemaName;\n-    }\n-\n-    /**\n-     * Set whether to use foreign key names to name relations.\n-     */\n-    public void setUseForeignKeyName(boolean useForeignKeyName) {\n-        flags.useForeignKeyName = useForeignKeyName;\n-    }\n-\n-    /**\n-     * Set whether to represent nullable columns as primitive wrappers.\n-     */\n-    public void setNullableAsObject(boolean nullableAsObject) {\n-        flags.nullableAsObject = nullableAsObject;\n-    }\n-\n-    /**\n-     * Set whether to represent blob columns as Java objects rather than\n-     * byte[] fields.\n-     */\n-    public void setBlobAsObject(boolean blobAsObject) {\n-        flags.blobAsObject = blobAsObject;\n-    }\n-\n-    /**\n-     * Set whether to use generic collections on one-to-many and many-to-many\n-     * relations instead of untyped collections.\n-     */\n-    public void setUseGenericCollections(boolean useGenericCollections) {\n-        flags.useGenericCollections = useGenericCollections; \n-    }\n-\n-    /**\n-     * Set the SQL type map overrides.\n-     */\n-    public void setTypeMap(String typeMap) {\n-        this.typeMap = typeMap;\n-    }\n-\n-    /**\n-     * Set whether to allow primary keys on join tables.\n-     */\n-    public void setPrimaryKeyOnJoin(boolean primaryKeyOnJoin) {\n-        flags.primaryKeyOnJoin = primaryKeyOnJoin;\n-    }\n-\n-    /**\n-     * Set whether to use datastore identity by default.\n-     */\n-    public void setUseDataStoreIdentity(boolean useDataStoreIdentity) {\n-        flags.useDataStoreIdentity = useDataStoreIdentity;\n-    }\n-\n-    /**\n-     * Set whether to use single field identity where possible.\n-     */\n-    public void setUseBuiltinIdentityClass(boolean useBuiltinIdentityClass) {\n-        flags.useBuiltinIdentityClass = useBuiltinIdentityClass;\n-    }\n-\n-    /**\n-     * Set whether to generate inverse 1-many/1-1 relations for all many-1/1-1\n-     * relations.\n-     */\n-    public void setInverseRelations(boolean inverseRelations) {\n-        flags.inverseRelations = inverseRelations;\n-    }\n-\n-    /**\n-     * Set whether to make generated classes detachable.\n-     */\n-    public void setDetachable(boolean detachable) {\n-        flags.detachable = detachable;\n-    }\n-\n-    /**\n-     * Default discriminator strategy for base class mappings.\n-     */\n-    public void setDiscriminatorStrategy(String discStrat) {\n-        flags.discriminatorStrategy = discStrat;\n-    }\n-\n-    /**\n-     * Default version strategy for base class mappings.\n-     */\n-    public void setVersionStrategy(String versionStrat) {\n-        flags.versionStrategy = versionStrat;\n-    }\n-\n-    /**\n-     * Whether or not to generate application identity classes as inner classes.\n-     */\n-    public void setInnerIdentityClasses(boolean innerAppId) {\n-        flags.innerIdentityClasses = innerAppId;\n-    }\n-\n-    /**\n-     * The suffix to use to create the identity class name for a class, or\n-     * for inner classes, the name of the inner class.\n-     */\n-    public void setIdentityClassSuffix(String suffix) {\n-        flags.identityClassSuffix = suffix;\n-    }\n-\n-    /**\n-     * Set the level of the generated metadata.\n-     */\n-    public void setMetadata(Level level) {\n-        flags.metaDataLevel = level.getValue();\n-    }\n-\n-    /**\n-     * Whether to generate annotations along with generated code. Defaults\n-     * to false.\n-     */\n-    public void setGenerateAnnotations(boolean genAnnotations) {\n-        flags.generateAnnotations = genAnnotations;\n-    }\n-\n-    /**\n-     * Whether to use field or property-based access on generated code.\n-     * Defaults to field-based access.\n-     */\n-    public void setAccessType(AccessType accessType) {\n-        flags.accessType = accessType.getValue();\n-    }\n-    \n-    /**\n-     * Set a customizer class to use.\n-     */\n-    public void setCustomizerClass(String customizerClass) {\n-        this.customizerClass = customizerClass;\n-    }\n-\n-    /**\n-     * Set a properties file to pass to the customizer class.\n-     */\n-    public void setCustomizerProperties(String customizerProperties) {\n-        this.customizerProperties = customizerProperties;\n-    }\n-\n-    public Object createCodeFormat() {\n-        return flags.format;\n-    }\n-\n-    protected ConfigurationImpl newConfiguration() {\n-        return new JDBCConfigurationImpl();\n-    }\n-\n-    protected void executeOn(String[] files)\n-        throws Exception {\n-        ClassLoader loader = getClassLoader();\n-        if (!StringUtils.isEmpty(dirName))\n-            flags.directory = Files.getFile(dirName, loader);\n-        if (!StringUtils.isEmpty(typeMap))\n-            flags.typeMap = Configurations.parseProperties(typeMap);\n-\n-        // load customizer properties\n-        Properties customProps = new Properties();\n-        File propsFile = Files.getFile(customizerProperties, loader);\n-        if (propsFile != null && ((Boolean) AccessController.doPrivileged(\n-            J2DoPrivHelper.existsAction(propsFile))).booleanValue()) {\n-            FileInputStream fis = null;\n-            try {\n-                fis = (FileInputStream) AccessController.doPrivileged(\n-                    J2DoPrivHelper.newFileInputStreamAction(propsFile));\n-            } catch (PrivilegedActionException pae) {\n-                 throw (FileNotFoundException) pae.getException();\n-            }\n-            customProps.load(fis);\n-        }\n-\n-        // create and configure customizer\n-        JDBCConfiguration conf = (JDBCConfiguration) getConfiguration();\n-        flags.customizer = (ReverseCustomizer) Configurations.\n-            newInstance(customizerClass, conf, null,\n-                (ClassLoader) AccessController.doPrivileged(\n-                    J2DoPrivHelper.getClassLoaderAction(\n-                        ReverseCustomizer.class)));\n-        if (flags.customizer != null)\n-            flags.customizer.setConfiguration(customProps);\n-\n-        ReverseMappingTool.run(conf, files, flags, loader);\n-    }\n-\n-    public static class Level\n-        extends EnumeratedAttribute {\n-\n-        public String[] getValues() {\n-            return new String[]{\n-                \"package\",\n-                \"class\",\n-                \"none\"\n-            };\n-        }\n-    }\n-\n-    public static class AccessType\n-        extends EnumeratedAttribute {\n-\n-        public String[] getValues() {\n-            return new String[]{\n-                \"field\",\n-                \"property\"\n-            };\n-        }\n-    }\n-}"},{"sha":"cfe589a95be61c6ff1ffec4e95c0f8b17e12c7e7","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/ant/SchemaToolTask.java","status":"removed","additions":0,"deletions":152,"changes":152,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/ant/SchemaToolTask.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/ant/SchemaToolTask.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/ant/SchemaToolTask.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,152 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.ant;\n-\n-import org.apache.tools.ant.BuildException;\n-import org.apache.tools.ant.types.EnumeratedAttribute;\n-import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n-import org.apache.openjpa.jdbc.conf.JDBCConfigurationImpl;\n-import org.apache.openjpa.jdbc.schema.SchemaTool;\n-import org.apache.openjpa.lib.ant.AbstractTask;\n-import org.apache.openjpa.lib.conf.ConfigurationImpl;\n-import org.apache.openjpa.lib.util.Files;\n-import org.apache.openjpa.lib.util.Localizer;\n-\n-/**\n- * Executes the {@link SchemaTool} on the specified XML schema definition\n- * files. This task can take the following arguments:\n- * <ul>\n- * <li><code>action</code></li>\n- * <li><code>ignoreErrors</code></li>\n- * <li><code>dropTables</code></li>\n- * <li><code>dropSequences</code></li>\n- * <li><code>openjpaTables</code></li>\n- * <li><code>primaryKeys</code></li>\n- * <li><code>foreignKeys</code></li>\n- * <li><code>indexes</code></li>\n- * <li><code>sequences</code></li>\n- * <li><code>record</code></li>\n- * <li><code>file</code></li>\n- * </ul> Of these arguments, only <code>action</code> is required.\n- */\n-public class SchemaToolTask\n-    extends AbstractTask {\n-\n-    private static final Localizer _loc = Localizer.forPackage\n-        (SchemaToolTask.class);\n-\n-    protected SchemaTool.Flags flags = new SchemaTool.Flags();\n-    protected String file = null;\n-\n-    /**\n-     * Set the enumerated SchemaTool action type.\n-     */\n-    public void setAction(Action act) {\n-        flags.action = act.getValue();\n-    }\n-\n-    /**\n-     * Set whether we want the SchemaTool to ignore SQL errors.\n-     */\n-    public void setIgnoreErrors(boolean ignoreErrors) {\n-        flags.ignoreErrors = ignoreErrors;\n-    }\n-\n-    /**\n-     * Set whether to drop or reflect on OpenJPA tables.\n-     */\n-    public void setOpenJPATables(boolean openjpaTables) {\n-        flags.openjpaTables = openjpaTables;\n-    }\n-\n-    /**\n-     * Set whether the SchemaTool should drop sequences.\n-     */\n-    public void setDropSequences(boolean dropSequences) {\n-        flags.dropSequences = dropSequences;\n-    }\n-\n-    /**\n-     * Set whether the SchemaTool should manipulate sequences.\n-     */\n-    public void setSequences(boolean sequences) {\n-        flags.sequences = sequences;\n-    }\n-\n-    /**\n-     * Set whether to generate primary key information.\n-     */\n-    public void setPrimaryKeys(boolean pks) {\n-        flags.primaryKeys = pks;\n-    }\n-\n-    /**\n-     * Set whether to generate foreign key information.\n-     */\n-    public void setForeignKeys(boolean fks) {\n-        flags.foreignKeys = fks;\n-    }\n-\n-    /**\n-     * Set whether to generate index information.\n-     */\n-    public void setIndexes(boolean idxs) {\n-        flags.indexes = idxs;\n-    }\n-\n-    /**\n-     * Set whether the SchemaTool should record to the schema factory.\n-     */\n-    public void setRecord(boolean record) {\n-        flags.record = record;\n-    }\n-\n-    /**\n-     * Set the output file we want the SchemaTool to write to.\n-     */\n-    public void setFile(String file) {\n-        this.file = file;\n-    }\n-\n-    protected ConfigurationImpl newConfiguration() {\n-        return new JDBCConfigurationImpl();\n-    }\n-\n-    protected void executeOn(String[] files)\n-        throws Exception {\n-        if (SchemaTool.ACTION_IMPORT.equals(flags.action))\n-            assertFiles(files);\n-\n-        ClassLoader loader = getClassLoader();\n-        flags.writer = Files.getWriter(file, loader);\n-        if (!SchemaTool.run((JDBCConfiguration) getConfiguration(), files,\n-            flags, loader))\n-            throw new BuildException(_loc.get(\"bad-conf\", \"SchemaToolTask\")\n-                .getMessage());\n-    }\n-\n-    public static class Action\n-        extends EnumeratedAttribute {\n-\n-        public String[] getValues() {\n-            return SchemaTool.ACTIONS;\n-        }\n-    }\n-}\n-"},{"sha":"263f1ba2bfd2d9e291e59ede73c482ea15b26ee8","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/ant/package.html","status":"removed","additions":0,"deletions":27,"changes":27,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/ant/package.html","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/ant/package.html","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/ant/package.html?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,27 +0,0 @@\n-<!--\n- Licensed to the Apache Software Foundation (ASF) under one\n- or more contributor license agreements.  See the NOTICE file\n- distributed with this work for additional information\n- regarding copyright ownership.  The ASF licenses this file\n- to you under the Apache License, Version 2.0 (the\n- \"License\"); you may not use this file except in compliance\n- with the License.  You may obtain a copy of the License at\n- \n- http://www.apache.org/licenses/LICENSE-2.0\n- \n- Unless required by applicable law or agreed to in writing,\n- software distributed under the License is distributed on an\n- \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- KIND, either express or implied.  See the License for the\n- specific language governing permissions and limitations\n- under the License.   \n--->\n-<html>\n-<body>\n-<p><strong>OpenJPA-JDBC Ant Tasks</strong></p>\n-\n-<p>\n-    Ant tasks for JDBC OpenJPA tools.\n-</p>\n-</body>\n-</html>"},{"sha":"8fabf1e766f462fd9a5b24e0e9ec38a96a6b770e","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/FetchModeValue.java","status":"removed","additions":0,"deletions":53,"changes":53,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/FetchModeValue.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/FetchModeValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/FetchModeValue.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,53 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.conf;\n-\n-import org.apache.openjpa.jdbc.kernel.EagerFetchModes;\n-import org.apache.openjpa.lib.conf.IntValue;\n-\n-/**\n- * Value type used to represent fetch modes. This type is\n- * defined separately so that it can be used both in the global configuration\n- * and in class metadata with the same encapsulated configuration.\n- *\n- * @author Abe White\n- * @nojavadoc\n- */\n-public class FetchModeValue\n-    extends IntValue {\n-\n-    public static final String EAGER_NONE = \"none\";\n-    public static final String EAGER_JOIN = \"join\";\n-    public static final String EAGER_PARALLEL = \"parallel\";\n-\n-    private static String[] ALIASES = new String[]{\n-        EAGER_PARALLEL, String.valueOf(EagerFetchModes.EAGER_PARALLEL),\n-        EAGER_JOIN, String.valueOf(EagerFetchModes.EAGER_JOIN),\n-        EAGER_NONE, String.valueOf(EagerFetchModes.EAGER_NONE),\n-        // deprecated\n-        \"multiple\", String.valueOf(EagerFetchModes.EAGER_PARALLEL),\n-        \"single\", String.valueOf(EagerFetchModes.EAGER_JOIN),\n-    };\n-\n-    public FetchModeValue(String prop) {\n-        super(prop);\n-        setAliases(ALIASES);\n-        setAliasListComprehensive(true);\n-    }\n-}"},{"sha":"fa8f5a0d4b06a3f6449487a3ece2e0ef644e5f43","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCConfiguration.java","status":"removed","additions":0,"deletions":626,"changes":626,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCConfiguration.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,626 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.conf;\n-\n-import java.util.Map;\n-\n-import javax.sql.DataSource;\n-\n-import org.apache.openjpa.conf.OpenJPAConfiguration;\n-import org.apache.openjpa.jdbc.kernel.EagerFetchModes;\n-import org.apache.openjpa.jdbc.kernel.LRSSizes;\n-import org.apache.openjpa.jdbc.kernel.UpdateManager;\n-import org.apache.openjpa.jdbc.meta.MappingDefaults;\n-import org.apache.openjpa.jdbc.meta.MappingRepository;\n-import org.apache.openjpa.jdbc.schema.DriverDataSource;\n-import org.apache.openjpa.jdbc.schema.SchemaFactory;\n-import org.apache.openjpa.jdbc.sql.DBDictionary;\n-import org.apache.openjpa.jdbc.sql.SQLFactory;\n-import org.apache.openjpa.kernel.StoreContext;\n-import org.apache.openjpa.lib.jdbc.ConnectionDecorator;\n-import org.apache.openjpa.lib.jdbc.JDBCEvent;\n-import org.apache.openjpa.lib.jdbc.JDBCListener;\n-import org.apache.openjpa.meta.MetaDataFactory;\n-\n-/**\n- * Configuration that defines the properties necessary to configure\n- * runtime and connect to a JDBC DataSource.\n- *\n- * @author Marc Prud'hommeaux\n- */\n-public interface JDBCConfiguration\n-    extends OpenJPAConfiguration {\n-\n-    /**\n-     * Name of the logger for SQL execution messages:\n-     * <code>openjpa.jdbc.SQL</code>.\n-     */\n-    public static final String LOG_SQL = \"openjpa.jdbc.SQL\";\n-\n-    /**\n-     * Name of the logger for JDBC-related messages:\n-     * <code>openjpa.jdbc.JDBC</code>.\n-     */\n-    public static final String LOG_JDBC = \"openjpa.jdbc.JDBC\";\n-\n-    /**\n-     * Name of the logger for schema-related messages:\n-     * <code>openjpa.jdbc.Schema</code>.\n-     */\n-    public static final String LOG_SCHEMA = \"openjpa.jdbc.Schema\";\n-\n-    /**\n-     * Default schema for unqualified tables.\n-     */\n-    public String getSchema();\n-\n-    /**\n-     * Default schema for unqualified tables.\n-     */\n-    public void setSchema(String schema);\n-\n-    /**\n-     * Comma-separated list of modifiable schemas for persistent instances.\n-     */\n-    public String getSchemas();\n-\n-    /**\n-     * Comma-separated list of modifiable schemas for persistent instances.\n-     */\n-    public void setSchemas(String schemas);\n-\n-    /**\n-     * Modificable schema components.\n-     */\n-    public String[] getSchemasList();\n-\n-    /**\n-     * Modifiable schema components.\n-     */\n-    public void setSchemas(String[] schemas);\n-\n-    /**\n-     * The transaction isolation level to use at the database level.\n-     * Possible values are:\n-     * <ul>\n-     * <li><code>default</code>: The JDBC driver's default isolation level.</li>\n-     * <li><code>none</code>: The standard JDBC\n-     * {@link java.sql.Connection#TRANSACTION_NONE} level.</li>\n-     * <li><code>read-committed</code>: The standard JDBC\n-     * {@link java.sql.Connection#TRANSACTION_READ_COMMITTED} level.</li>\n-     * <li><code>read-uncommitted</code>: The standard JDBC\n-     * {@link java.sql.Connection#TRANSACTION_READ_UNCOMMITTED} level.</li>\n-     * <li><code>repeatable-read</code>: The standard JDBC\n-     * {@link java.sql.Connection#TRANSACTION_REPEATABLE_READ} level.</li>\n-     * <li><code>serializable</code>: The standard JDBC\n-     * {@link java.sql.Connection#TRANSACTION_SERIALIZABLE} level.</li>\n-     * </ul>\n-     */\n-    public String getTransactionIsolation();\n-\n-    /**\n-     * The transaction isolation level to use at the database level.\n-     * Possible values are:\n-     * <ul>\n-     * <li><code>default</code>: The JDBC driver's default isolation level.</li>\n-     * <li><code>none</code>: The standard JDBC\n-     * {@link java.sql.Connection#TRANSACTION_NONE} level.</li>\n-     * <li><code>read-committed</code>: The standard JDBC\n-     * {@link java.sql.Connection#TRANSACTION_READ_COMMITTED} level.</li>\n-     * <li><code>read-uncommitted</code>: The standard JDBC\n-     * {@link java.sql.Connection#TRANSACTION_READ_UNCOMMITTED} level.</li>\n-     * <li><code>repeatable-read</code>: The standard JDBC\n-     * {@link java.sql.Connection#TRANSACTION_REPEATABLE_READ} level.</li>\n-     * <li><code>serializable</code>: The standard JDBC\n-     * {@link java.sql.Connection#TRANSACTION_SERIALIZABLE} level.</li>\n-     * </ul>\n-     */\n-    public void setTransactionIsolation(String level);\n-\n-    /**\n-     * Return the proper transaction isolation level constant from\n-     * {@link java.sql.Connection}, or -1 for the default level.\n-     */\n-    public int getTransactionIsolationConstant();\n-\n-    /**\n-     * Set the proper transaction isolation level constant from\n-     * {@link java.sql.Connection}, or -1 for the default level.\n-     */\n-    public void setTransactionIsolation(int level);\n-\n-    /**\n-     * The JDBC result set type. Defaults to <code>forward-only</code>.\n-     * <ul>\n-     * <li><code>forward-only</code>: The standard JDBC\n-     * {@link java.sql.ResultSet#TYPE_FORWARD_ONLY} type.</li>\n-     * <li><code>scroll-sensitive</code>: The standard JDBC\n-     * {@link java.sql.ResultSet#TYPE_SCROLL_SENSITIVE} type.</li>\n-     * <li><code>scroll-insensitive</code>: The standard JDBC\n-     * {@link java.sql.ResultSet#TYPE_SCROLL_INSENSITIVE} type.</li>\n-     * </ul>\n-     */\n-    public String getResultSetType();\n-\n-    /**\n-     * Return the result set constant for the result set type.\n-     */\n-    public int getResultSetTypeConstant();\n-\n-    /**\n-     * The JDBC result set type. Defaults to <code>forward-only</code>.\n-     * <ul>\n-     * <li><code>forward-only</code>: The standard JDBC\n-     * {@link java.sql.ResultSet#TYPE_FORWARD_ONLY} type.</li>\n-     * <li><code>scroll-sensitive</code>: The standard JDBC\n-     * {@link java.sql.ResultSet#TYPE_SCROLL_SENSITIVE} type.</li>\n-     * <li><code>scroll-insensitive</code>: The standard JDBC\n-     * {@link java.sql.ResultSet#TYPE_SCROLL_INSENSITIVE} type.</li>\n-     * </ul>\n-     */\n-    public void setResultSetType(String type);\n-\n-    /**\n-     * Set the result set constant type.\n-     */\n-    public void setResultSetType(int type);\n-\n-    /**\n-     * The JDBC fetch direction. Defaults to <code>forward</code>.\n-     * <ul>\n-     * <li><code>forward</code>: The standard JDBC\n-     * {@link java.sql.ResultSet#FETCH_FORWARD} direction.</li>\n-     * <li><code>reverse</code>: The standard JDBC\n-     * {@link java.sql.ResultSet#FETCH_REVERSE} direction.</li>\n-     * <li><code>unknown</code>: The standard JDBC\n-     * {@link java.sql.ResultSet#FETCH_UNKNOWN} direction.</li>\n-     * </ul>\n-     */\n-    public String getFetchDirection();\n-\n-    /**\n-     * Return the result set constant for the fetch direction.\n-     */\n-    public int getFetchDirectionConstant();\n-\n-    /**\n-     * The JDBC fetch direction. Defaults to <code>forward</code>.\n-     * <ul>\n-     * <li><code>forward</code>: The standard JDBC\n-     * {@link java.sql.ResultSet#FETCH_FORWARD} direction.</li>\n-     * <li><code>reverse</code>: The standard JDBC\n-     * {@link java.sql.ResultSet#FETCH_REVERSE} direction.</li>\n-     * <li><code>unknown</code>: The standard JDBC\n-     * {@link java.sql.ResultSet#FETCH_UNKNOWN} direction.</li>\n-     * </ul>\n-     */\n-    public void setFetchDirection(String direction);\n-\n-    /**\n-     * Set the result set fetch direction constant.\n-     */\n-    public void setFetchDirection(int direction);\n-\n-    /**\n-     * Specifies the default eager fetch mode to use. Defaults to\n-     * <code>parallel</code> unless the query is by-oid. Possible values are:\n-     * <ul>\n-     * <li><code>none</code>: When querying for an object, do not try to\n-     * select for related objects at the same time.</li>\n-     * <li><code>join</code>: When querying for objects, also select for\n-     * 1-1 relations in the configured fetch groups using joins.</li>\n-     * <li><code>parallel</code>: When querying for objects, also select for\n-     * both 1-1 relations using joins and to-many relations using batched\n-     * selects.</li>\n-     * </li>\n-     * </ul>\n-     *\n-     * @since 0.3.0\n-     */\n-    public String getEagerFetchMode();\n-\n-    /**\n-     * Specifies the default eager fetch mode to use. Defaults to\n-     * <code>parallel</code> unless the query is by-oid. Possible values are:\n-     * <ul>\n-     * <li><code>none</code>: When querying for an object, do not try to\n-     * select for related objects at the same time.</li>\n-     * <li><code>join</code>: When querying for objects, also select for\n-     * 1-1 relations in the configured fetch groups using joins.</li>\n-     * <li><code>parallel</code>: When querying for objects, also select for\n-     * both 1-1 relations using joins and to-many relations using batched\n-     * selects.</li>\n-     * </ul>\n-     */\n-    public void setEagerFetchMode(String mode);\n-\n-    /**\n-     * Return the eager fetch mode as one of the following symbolic constants:\n-     * <ul>\n-     * <li>{@link EagerFetchModes#EAGER_NONE}</li>\n-     * <li>{@link EagerFetchModes#EAGER_JOIN}</li>\n-     * <li>{@link EagerFetchModes#EAGER_PARALLEL}</li>\n-     * </ul>\n-     *\n-     * @since 0.3.0\n-     */\n-    public int getEagerFetchModeConstant();\n-\n-    /**\n-     * Set the eager fetch mode as one of the following symbolic constants:\n-     * <ul>\n-     * <li>{@link EagerFetchModes#EAGER_NONE}</li>\n-     * <li>{@link EagerFetchModes#EAGER_JOIN}</li>\n-     * <li>{@link EagerFetchModes#EAGER_PARALLEL}</li>\n-     * </ul>\n-     *\n-     * @since 0.3.0\n-     */\n-    public void setEagerFetchMode(int eagerFetchMode);\n-\n-    /**\n-     * Specifies the default subclass fetch mode to use. Defaults to\n-     * <code>join</code> unless the query is by-oid. Possible values are:\n-     * <ul>\n-     * <li><code>none</code>: Only select base class data.</li>\n-     * <li><code>join</code>: Select both base class and all possible subclass\n-     * data using joins.</li>\n-     * <li><code>parallel</code>: Select for each possible subclass\n-     * separately.</li>\n-     * </ul>\n-     *\n-     * @since 0.3.2\n-     */\n-    public String getSubclassFetchMode();\n-\n-    /**\n-     * Specifies the default subclass fetch mode to use. Defaults to\n-     * <code>join</code> unless the query is by-oid. Possible values are:\n-     * <ul>\n-     * <li><code>none</code>: Only select base class data.</li>\n-     * <li><code>join</code>: Select both base class and all possible subclass\n-     * data using joins.</li>\n-     * <li><code>parallel</code>: Select for each possible subclass\n-     * separately.</li>\n-     * </ul>\n-     *\n-     * @since 0.3.2\n-     */\n-    public void setSubclassFetchMode(String mode);\n-\n-    /**\n-     * Return the subclass fetch mode as one of the following symbolic\n-     * constants:\n-     * <ul>\n-     * <li>{@link EagerFetchModes#EAGER_NONE}</li>\n-     * <li>{@link EagerFetchModes#EAGER_JOIN}</li>\n-     * <li>{@link EagerFetchModes#EAGER_PARALLEL}</li>\n-     * </ul>\n-     *\n-     * @since 0.3.2\n-     */\n-    public int getSubclassFetchModeConstant();\n-\n-    /**\n-     * Set the subclass fetch mode as one of the following symbolic constants:\n-     * <ul>\n-     * <li>{@link EagerFetchModes#EAGER_NONE}</li>\n-     * <li>{@link EagerFetchModes#EAGER_JOIN}</li>\n-     * <li>{@link EagerFetchModes#EAGER_PARALLEL}</li>\n-     * </ul>\n-     *\n-     * @since 0.3.2\n-     */\n-    public void setSubclassFetchMode(int subclassFetchMode);\n-\n-    /**\n-     * How to obtain the size of large result sets. Defaults to\n-     * <code>unknown</code>.\n-     * <ul>\n-     * <li><code>unknown</code>: Do not attempt to calculate the size of\n-     * large result sets; return {@link Integer#MAX_VALUE}.</li>\n-     * <li><code>last</code>: For result sets that support random access,\n-     * calculate the size using {@link java.sql.ResultSet#last}.</li>\n-     * <li><code>query</code>: Use a separate COUNT query to calculate the\n-     * size of the results.</li>\n-     * </ul>\n-     */\n-    public String getLRSSize();\n-\n-    /**\n-     * Return the {@link LRSSizes} constant for the large result set size\n-     * setting.\n-     */\n-    public int getLRSSizeConstant();\n-\n-    /**\n-     * How to obtain the size of large result sets. Defaults to\n-     * <code>unknown</code>.\n-     * <ul>\n-     * <li><code>unknown</code>: Do not attempt to calculate the size of\n-     * large result sets; return {@link Integer#MAX_VALUE}.</li>\n-     * <li><code>last</code>: For result sets that support random access,\n-     * calculate the size using {@link java.sql.ResultSet#last}.</li>\n-     * <li><code>query</code>: Use a separate COUNT query to calculate the\n-     * size of the results.</li>\n-     * </ul>\n-     */\n-    public void setLRSSize(String lrsSize);\n-\n-    /**\n-     * Set the fetch configuration large result set size constant.\n-     */\n-    public void setLRSSize(int size);\n-\n-    /**\n-     * Whether OpenJPA should try to automatically refresh O/R mapping\n-     * information and the database schema.\n-     */\n-    public String getSynchronizeMappings();\n-\n-    /**\n-     * Whether OpenJPA should try to automatically refresh O/R mapping\n-     * information and the database schema.\n-     */\n-    public void setSynchronizeMappings(String synchronizeMappings);\n-\n-    /**\n-     * A comma-separated list of the {@link JDBCListener} plugins for\n-     * listening to {@link JDBCEvent}s.\n-     */\n-    public String getJDBCListeners();\n-\n-    /**\n-     * A comma-separated list of the {@link JDBCListener} plugins for\n-     * listening to {@link JDBCEvent}s.\n-     */\n-    public void setJDBCListeners(String jdbcListeners);\n-\n-    /**\n-     * The {@link JDBCListener}s to use.\n-     */\n-    public JDBCListener[] getJDBCListenerInstances();\n-\n-    /**\n-     * The {@link JDBCListener}s to use.\n-     */\n-    public void setJDBCListeners(JDBCListener[] jdbcListeners);\n-\n-    /**\n-     * A comma-separated list of the {@link ConnectionDecorator} for adding\n-     * functionality to JDBC connections.\n-     */\n-    public String getConnectionDecorators();\n-\n-    /**\n-     * A comma-separated list of the {@link ConnectionDecorator} for\n-     * adding functionality to JDBC connections.\n-     */\n-    public void setConnectionDecorators(String decorators);\n-\n-    /**\n-     * The {@link ConnectionDecorator}s to use.\n-     */\n-    public ConnectionDecorator[] getConnectionDecoratorInstances();\n-\n-    /**\n-     * The {@link ConnectionDecorator}s to use.\n-     */\n-    public void setConnectionDecorators(ConnectionDecorator[] decorators);\n-\n-    /**\n-     * The {@link DBDictionary} to use to define the RDBMS SQL information.\n-     */\n-    public String getDBDictionary();\n-\n-    /**\n-     * The {@link DBDictionary} to use to define the RDBMS SQL information.\n-     */\n-    public void setDBDictionary(String dbdictionary);\n-\n-    /**\n-     * The {@link DBDictionary} to use.\n-     */\n-    public DBDictionary getDBDictionaryInstance();\n-\n-    /**\n-     * The {@link DBDictionary} to use.\n-     */\n-    public void setDBDictionary(DBDictionary dbdictionary);\n-\n-    /**\n-     * The {@link UpdateManager} to use for managing SQL updates.\n-     */\n-    public String getUpdateManager();\n-\n-    /**\n-     * The {@link UpdateManager} to use for managing SQL updates.\n-     */\n-    public void setUpdateManager(String updateManager);\n-\n-    /**\n-     * The {@link UpdateManager} for runtime data store interaction.\n-     */\n-    public UpdateManager getUpdateManagerInstance();\n-\n-    /**\n-     * The {@link UpdateManager} for runtime data store interaction.\n-     */\n-    public void setUpdateManager(UpdateManager updateManager);\n-\n-    /**\n-     * The {@link DriverDataSource} to use for creating a {@link DataSource}\n-     * from a JDBC {@link Driver}.\n-     */\n-    public String getDriverDataSource();\n-\n-    /**\n-     * The {@link DriverDataSource} to use for creating a {@link DataSource}\n-     * from a JDBC {@link Driver}.\n-     */\n-    public void setDriverDataSource(String driverDataSource);\n-\n-    /**\n-     * Create an instance of the {@link DriverDataSource} to use\n-     * for creating a {@link DataSource} from a JDBC {@link Driver}.\n-     */\n-    public DriverDataSource newDriverDataSourceInstance();\n-\n-    /**\n-     * The plugin string for the {@link SchemaFactory} to use to provide\n-     * schema information during system initialization.\n-     */\n-    public String getSchemaFactory();\n-\n-    /**\n-     * The plugin string for the {@link SchemaFactory} to use to provide\n-     * schema information during system initialization.\n-     */\n-    public void setSchemaFactory(String schemaFactory);\n-\n-    /**\n-     * The {@link SchemaFactory} to use for schema information.\n-     */\n-    public SchemaFactory getSchemaFactoryInstance();\n-\n-    /**\n-     * The {@link SchemaFactory} to use for schema information.\n-     */\n-    public void setSchemaFactory(SchemaFactory schemaFactory);\n-\n-    /**\n-     * The SQL factory to use for SQL constructs.\n-     */\n-    public String getSQLFactory();\n-\n-    /**\n-     * The SQL factory to use for SQL constructs.\n-     */\n-    public SQLFactory getSQLFactoryInstance();\n-\n-    /**\n-     * The SQL factory to use for SQL constructs.\n-     */\n-    public void setSQLFactory(String sqlFactory);\n-\n-    /**\n-     * The SQL factory to use for SQL constructs.\n-     */\n-    public void setSQLFactory(SQLFactory sqlFactory);\n-\n-    /**\n-     * A plugin string describing the {@link MetaDataFactory} to use for\n-     * loading and storing object-relational mapping data.\n-     */\n-    public String getMappingFactory();\n-\n-    /**\n-     * A plugin string describing the {@link MetaDataFactory} to use for\n-     * loading and storing object-relational mapping data.\n-     */\n-    public void setMappingFactory(String mappingFactory);\n-\n-    /**\n-     * A plugin string describing the {@link MappingDefaults} to use.\n-     *\n-     * @since 0.4.0\n-     */\n-    public String getMappingDefaults();\n-\n-    /**\n-     * A plugin string describing the {@link MappingDefaults} to use.\n-     *\n-     * @since 0.4.0\n-     */\n-    public void setMappingDefaults(String map);\n-\n-    /**\n-     * The {@link MappingDefaults} to use with a repository.\n-     *\n-     * @since 0.4.0\n-     */\n-    public MappingDefaults getMappingDefaultsInstance();\n-\n-    /**\n-     * The {@link MappingDefaults} to use with a repository.\n-     *\n-     * @since 0.4.0\n-     */\n-    public void setMappingDefaults(MappingDefaults map);\n-\n-    /**\n-     * Return the mapping repository. Convenience method to cast from\n-     * the internal metadata repository.\n-     */\n-    public MappingRepository getMappingRepositoryInstance();\n-\n-    /**\n-     * Return a new empty mapping repository of the configured type.  \n-     * Convenience method to cast from metadata repository.\n-     */\n-    public MappingRepository newMappingRepositoryInstance();\n-\n-    /**\n-     * Return the primary data source to use. The data source will\n-     * automatically use the given context's user name and password on calls\n-     * to {@link DataSource#getConnection}. If the given context is null, the\n-     * data source will use the configuration's default connection user name\n-     * and password. If those too are null and the first context has been\n-     * obtained already, then the user name and password for that context\n-     * will be used, as we know they represent a valid combination. This\n-     * method avoids casting the result of\n-     * {@link OpenJPAConfiguration#getConnectionFactory}, and avoids having to\n-     * pass in the user name and password to obtain connections.\n-     */\n-    public DataSource getDataSource(StoreContext ctx);\n-\n-    /**\n-     * Return the non-enlisted data source to use. If there is a valid\n-     * non-xa connection factory configured, then it will be returned. Its\n-     * default user name and password on calls to\n-     * {@link DataSource#getConnection} will be the specificed connection 2\n-     * user name and password. If those are null and the given context is\n-     * non-null, its user name password will be used instead. If the context\n-     * is null too, then the user name and password used to retrieve the first\n-     * context will be used. If there is no second connection factory the\n-     * primary connection factory is used.\n-     *\n-     * @see #getDataSource\n-     */\n-    public DataSource getDataSource2(StoreContext ctx);\n-    \n-    /**\n-     * Return QuerySQLCacheValue.\n-     * @since 1.2.0\n-     */\n-    public QuerySQLCacheValue getQuerySQLCache();\n-        \n-    /**\n-     * Whether querySQLCache is enabled or not.\n-     * @since 1.2.0\n-     */\n-    public boolean isQuerySQLCacheOn();\n-    \n-    /**\n-     * Return QuerySQLCacheInstance.\n-     * @since 1.2.0\n-     */\n-    public Map getQuerySQLCacheInstance();     \n-    \n-}"},{"sha":"41d05d09f7d1ffca0a1803891244ef661d379b14","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCConfigurationImpl.java","status":"removed","additions":0,"deletions":884,"changes":884,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCConfigurationImpl.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,884 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.conf;\n-\n-import java.sql.Connection;\n-import java.sql.ResultSet;\n-import java.util.HashMap;\n-import java.util.Map;\n-\n-import javax.sql.DataSource;\n-\n-import org.apache.commons.lang.StringUtils;\n-import org.apache.openjpa.conf.OpenJPAConfigurationImpl;\n-import org.apache.openjpa.jdbc.kernel.BatchingConstraintUpdateManager;\n-import org.apache.openjpa.jdbc.kernel.BatchingOperationOrderUpdateManager;\n-import org.apache.openjpa.jdbc.kernel.EagerFetchModes;\n-import org.apache.openjpa.jdbc.kernel.JDBCBrokerFactory;\n-import org.apache.openjpa.jdbc.kernel.LRSSizes;\n-import org.apache.openjpa.jdbc.kernel.PessimisticLockManager;\n-import org.apache.openjpa.jdbc.kernel.UpdateManager;\n-import org.apache.openjpa.jdbc.meta.MappingDefaults;\n-import org.apache.openjpa.jdbc.meta.MappingRepository;\n-import org.apache.openjpa.jdbc.schema.DataSourceFactory;\n-import org.apache.openjpa.jdbc.schema.DriverDataSource;\n-import org.apache.openjpa.jdbc.schema.SchemaFactory;\n-import org.apache.openjpa.jdbc.sql.DBDictionary;\n-import org.apache.openjpa.jdbc.sql.DBDictionaryFactory;\n-import org.apache.openjpa.jdbc.sql.SQLFactory;\n-import org.apache.openjpa.kernel.BrokerImpl;\n-import org.apache.openjpa.kernel.StoreContext;\n-import org.apache.openjpa.lib.conf.IntValue;\n-import org.apache.openjpa.lib.conf.ObjectValue;\n-import org.apache.openjpa.lib.conf.PluginValue;\n-import org.apache.openjpa.lib.conf.ProductDerivations;\n-import org.apache.openjpa.lib.conf.StringListValue;\n-import org.apache.openjpa.lib.conf.StringValue;\n-import org.apache.openjpa.lib.jdbc.ConnectionDecorator;\n-import org.apache.openjpa.lib.jdbc.DecoratingDataSource;\n-import org.apache.openjpa.lib.jdbc.JDBCListener;\n-import org.apache.openjpa.lib.log.Log;\n-import org.apache.openjpa.lib.util.Localizer;\n-import org.apache.openjpa.meta.MetaDataFactory;\n-\n-/**\n- * Default implementation of the {@link JDBCConfiguration} interface.\n- *\n- * @author Marc Prud'hommeaux\n- * @author Abe White\n- */\n-public class JDBCConfigurationImpl\n-    extends OpenJPAConfigurationImpl\n-    implements JDBCConfiguration {\n-\n-    public StringValue schema;\n-    public StringListValue schemas;\n-    public IntValue transactionIsolation;\n-    public IntValue resultSetType;\n-    public IntValue fetchDirection;\n-    public FetchModeValue eagerFetchMode;\n-    public FetchModeValue subclassFetchMode;\n-    public IntValue lrsSize;\n-    public StringValue synchronizeMappings;\n-    public ObjectValue jdbcListenerPlugins;\n-    public ObjectValue connectionDecoratorPlugins;\n-    public PluginValue dbdictionaryPlugin;\n-    public ObjectValue updateManagerPlugin;\n-    public ObjectValue schemaFactoryPlugin;\n-    public ObjectValue sqlFactoryPlugin;\n-    public ObjectValue mappingDefaultsPlugin;\n-    public PluginValue driverDataSourcePlugin;\n-    public MappingFactoryValue mappingFactoryPlugin;\n-    public QuerySQLCacheValue querySQLCache;\n-    private Map querySQLCacheInstance = new HashMap(); \n-\n-    // used internally\n-    private String firstUser = null;\n-    private String firstPass = null;\n-    private DecoratingDataSource dataSource = null;\n-    private DecoratingDataSource dataSource2 = null;\n-\n-    /**\n-     * Default constructor. Attempts to load default properties.\n-     */\n-    public JDBCConfigurationImpl() {\n-        this(true);\n-    }\n-\n-    /**\n-     * Constructor.\n-     *\n-     * @param loadGlobals whether to attempt to load the global properties\n-     */\n-    public JDBCConfigurationImpl(boolean loadGlobals) {\n-        this(true, loadGlobals);\n-    }\n-\n-    /**\n-     * Constructor.\n-     *\n-     * @param derivations whether to apply product derivations\n-     * @param loadGlobals whether to attempt to load the global properties\n-     */\n-    public JDBCConfigurationImpl(boolean derivations, boolean loadGlobals) {\n-        super(false, false);\n-        String[] aliases;\n-\n-        schema = addString(\"jdbc.Schema\");\n-        schemas = addStringList(\"jdbc.Schemas\");\n-\n-        transactionIsolation = addInt(\"jdbc.TransactionIsolation\");\n-        aliases = new String[]{\n-            \"default\", String.valueOf(-1),\n-            \"none\", String.valueOf(Connection.TRANSACTION_NONE),\n-            \"read-committed\", String.valueOf\n-            (Connection.TRANSACTION_READ_COMMITTED),\n-            \"read-uncommitted\", String.valueOf\n-            (Connection.TRANSACTION_READ_UNCOMMITTED),\n-            \"repeatable-read\", String.valueOf\n-            (Connection.TRANSACTION_REPEATABLE_READ),\n-            \"serializable\", String.valueOf(Connection.TRANSACTION_SERIALIZABLE)\n-        };\n-        transactionIsolation.setAliases(aliases);\n-        transactionIsolation.setDefault(aliases[0]);\n-        transactionIsolation.set(-1);\n-        transactionIsolation.setAliasListComprehensive(true);\n-\n-        resultSetType = addInt(\"jdbc.ResultSetType\");\n-        aliases = new String[]{\n-            \"forward-only\", String.valueOf(ResultSet.TYPE_FORWARD_ONLY),\n-            \"scroll-sensitive\", String.valueOf\n-            (ResultSet.TYPE_SCROLL_SENSITIVE),\n-            \"scroll-insensitive\", String.valueOf\n-            (ResultSet.TYPE_SCROLL_INSENSITIVE),\n-        };\n-        resultSetType.setAliases(aliases);\n-        resultSetType.setDefault(aliases[0]);\n-        resultSetType.set(ResultSet.TYPE_FORWARD_ONLY);\n-        resultSetType.setAliasListComprehensive(true);\n-\n-        fetchDirection = addInt(\"jdbc.FetchDirection\");\n-        aliases = new String[]{\n-            \"forward\", String.valueOf(ResultSet.FETCH_FORWARD),\n-            \"reverse\", String.valueOf(ResultSet.FETCH_REVERSE),\n-            \"unknown\", String.valueOf(ResultSet.FETCH_UNKNOWN),\n-        };\n-        fetchDirection.setAliases(aliases);\n-        fetchDirection.setDefault(aliases[0]);\n-        fetchDirection.set(ResultSet.FETCH_FORWARD);\n-        fetchDirection.setAliasListComprehensive(true);\n-\n-        eagerFetchMode = new FetchModeValue(\"jdbc.EagerFetchMode\");\n-        eagerFetchMode.setDefault(FetchModeValue.EAGER_PARALLEL);\n-        eagerFetchMode.set(EagerFetchModes.EAGER_PARALLEL);\n-        addValue(eagerFetchMode);\n-\n-        subclassFetchMode = new FetchModeValue(\"jdbc.SubclassFetchMode\");\n-        subclassFetchMode.setDefault(FetchModeValue.EAGER_JOIN);\n-        subclassFetchMode.set(EagerFetchModes.EAGER_JOIN);\n-        addValue(subclassFetchMode);\n-\n-        lrsSize = addInt(\"jdbc.LRSSize\");\n-        aliases = new String[]{\n-            \"query\", String.valueOf(LRSSizes.SIZE_QUERY),\n-            \"unknown\", String.valueOf(LRSSizes.SIZE_UNKNOWN),\n-            \"last\", String.valueOf(LRSSizes.SIZE_LAST),\n-        };\n-        lrsSize.setAliases(aliases);\n-        lrsSize.setDefault(aliases[0]);\n-        lrsSize.set(LRSSizes.SIZE_QUERY);\n-        lrsSize.setAliasListComprehensive(true);\n-\n-        synchronizeMappings = addString(\"jdbc.SynchronizeMappings\");\n-        aliases = new String[]{ \"false\", null };\n-        synchronizeMappings.setAliases(aliases);\n-        synchronizeMappings.setDefault(aliases[0]);\n-\n-        jdbcListenerPlugins = addPluginList(\"jdbc.JDBCListeners\");\n-        jdbcListenerPlugins.setInstantiatingGetter(\"getJDBCListenerInstances\");\n-\n-        connectionDecoratorPlugins = addPluginList\n-            (\"jdbc.ConnectionDecorators\");\n-        connectionDecoratorPlugins.setInstantiatingGetter\n-            (\"getConnectionDecoratorInstances\");\n-\n-        dbdictionaryPlugin = addPlugin(\"jdbc.DBDictionary\", true);\n-        aliases = new String[]{\n-            \"access\", \"org.apache.openjpa.jdbc.sql.AccessDictionary\",\n-            \"db2\", \"org.apache.openjpa.jdbc.sql.DB2Dictionary\",\n-            \"derby\", \"org.apache.openjpa.jdbc.sql.DerbyDictionary\",\n-            \"empress\", \"org.apache.openjpa.jdbc.sql.EmpressDictionary\",\n-            \"foxpro\", \"org.apache.openjpa.jdbc.sql.FoxProDictionary\",\n-            \"h2\", \"org.apache.openjpa.jdbc.sql.H2Dictionary\",\n-            \"hsql\", \"org.apache.openjpa.jdbc.sql.HSQLDictionary\",\n-            \"informix\", \"org.apache.openjpa.jdbc.sql.InformixDictionary\",\n-            \"jdatastore\", \"org.apache.openjpa.jdbc.sql.JDataStoreDictionary\",\n-            \"mysql\", \"org.apache.openjpa.jdbc.sql.MySQLDictionary\",\n-            \"oracle\", \"org.apache.openjpa.jdbc.sql.OracleDictionary\",\n-            \"pointbase\", \"org.apache.openjpa.jdbc.sql.PointbaseDictionary\",\n-            \"postgres\", \"org.apache.openjpa.jdbc.sql.PostgresDictionary\",\n-            \"sqlserver\", \"org.apache.openjpa.jdbc.sql.SQLServerDictionary\",\n-            \"sybase\", \"org.apache.openjpa.jdbc.sql.SybaseDictionary\",\n-        };\n-        dbdictionaryPlugin.setAliases(aliases);\n-        dbdictionaryPlugin.setInstantiatingGetter(\"getDBDictionaryInstance\");\n-\n-        updateManagerPlugin = addPlugin(\"jdbc.UpdateManager\", true);\n-        aliases = new String[]{\n-            \"default\",\n-            BatchingConstraintUpdateManager.class.getName(),\n-            \"operation-order\",\n-            \"org.apache.openjpa.jdbc.kernel.OperationOrderUpdateManager\",\n-            \"constraint\",\n-            \"org.apache.openjpa.jdbc.kernel.ConstraintUpdateManager\",\n-            \"batching-constraint\",\n-            BatchingConstraintUpdateManager.class.getName(),\n-            \"batching-operation-order\",\n-            BatchingOperationOrderUpdateManager.class.getName(),\n-        };\n-        updateManagerPlugin.setAliases(aliases);\n-        updateManagerPlugin.setDefault(aliases[0]);\n-        updateManagerPlugin.setString(aliases[0]);\n-        updateManagerPlugin.setInstantiatingGetter(\"getUpdateManagerInstance\");\n-\n-        driverDataSourcePlugin = addPlugin(\"jdbc.DriverDataSource\", false);\n-        aliases = new String[]{\n-            \"simple\", \"org.apache.openjpa.jdbc.schema.SimpleDriverDataSource\",\n-        };\n-        driverDataSourcePlugin.setAliases(aliases);\n-        driverDataSourcePlugin.setDefault(aliases[0]);\n-        driverDataSourcePlugin.setString(aliases[0]);\n-\n-        schemaFactoryPlugin = addPlugin(\"jdbc.SchemaFactory\", true);\n-        aliases = new String[]{\n-            \"dynamic\", \"org.apache.openjpa.jdbc.schema.DynamicSchemaFactory\",\n-            \"native\", \"org.apache.openjpa.jdbc.schema.LazySchemaFactory\",\n-            \"file\", \"org.apache.openjpa.jdbc.schema.FileSchemaFactory\",\n-            \"table\", \"org.apache.openjpa.jdbc.schema.TableSchemaFactory\",\n-            // deprecated alias\n-            \"db\", \"org.apache.openjpa.jdbc.schema.TableSchemaFactory\",\n-        };\n-        schemaFactoryPlugin.setAliases(aliases);\n-        schemaFactoryPlugin.setDefault(aliases[0]);\n-        schemaFactoryPlugin.setString(aliases[0]);\n-        schemaFactoryPlugin.setInstantiatingGetter(\"getSchemaFactoryInstance\");\n-\n-        sqlFactoryPlugin = addPlugin(\"jdbc.SQLFactory\", true);\n-        aliases = new String[]{\n-            \"default\", \"org.apache.openjpa.jdbc.sql.SQLFactoryImpl\",\n-        };\n-        sqlFactoryPlugin.setAliases(aliases);\n-        sqlFactoryPlugin.setDefault(aliases[0]);\n-        sqlFactoryPlugin.setString(aliases[0]);\n-        sqlFactoryPlugin.setInstantiatingGetter(\"getSQLFactoryInstance\");\n-\n-        mappingFactoryPlugin = new MappingFactoryValue(\"jdbc.MappingFactory\");\n-        addValue(mappingFactoryPlugin);\n-\n-        mappingDefaultsPlugin = addPlugin(\"jdbc.MappingDefaults\", true);\n-        aliases = new String[]{\n-            \"default\", \"org.apache.openjpa.jdbc.meta.MappingDefaultsImpl\",\n-        };\n-        mappingDefaultsPlugin.setAliases(aliases);\n-        mappingDefaultsPlugin.setDefault(aliases[0]);\n-        mappingDefaultsPlugin.setString(aliases[0]);\n-        mappingDefaultsPlugin.setInstantiatingGetter\n-            (\"getMappingDefaultsInstance\");\n-\n-        // set up broker factory defaults\n-        brokerFactoryPlugin.setAlias(\"jdbc\", JDBCBrokerFactory.class.getName());\n-        brokerFactoryPlugin.setDefault(\"jdbc\");\n-        brokerFactoryPlugin.setString(\"jdbc\");\n-\n-        // set new default for mapping repos\n-        metaRepositoryPlugin.setAlias(\"default\",\n-            \"org.apache.openjpa.jdbc.meta.MappingRepository\");\n-        metaRepositoryPlugin.setDefault(\"default\");\n-        metaRepositoryPlugin.setString(\"default\");\n-\n-        // set new default for lock manager\n-        lockManagerPlugin.setAlias(\"pessimistic\",\n-            PessimisticLockManager.class.getName());\n-        lockManagerPlugin.setDefault(\"pessimistic\");\n-        lockManagerPlugin.setString(\"pessimistic\");\n-\n-        // native savepoint manager options\n-        savepointManagerPlugin.setAlias(\"jdbc\",\n-            \"org.apache.openjpa.jdbc.kernel.JDBC3SavepointManager\");\n-\n-        // set new aliases and defaults for sequence\n-        seqPlugin.setAliases(JDBCSeqValue.ALIASES);\n-        seqPlugin.setDefault(JDBCSeqValue.ALIASES[0]);\n-        seqPlugin.setString(JDBCSeqValue.ALIASES[0]);\n-\n-        querySQLCache = new QuerySQLCacheValue(\"jdbc.QuerySQLCache\");\n-        addValue(querySQLCache);\n-\n-        // this static initializer is to get past a weird\n-        // ClassCircularityError that happens only under IBM's\n-        // JDK 1.3.1 on Linux from within the JRun ClassLoader;\n-        // while exact causes are unknown, it is almost certainly\n-        // a bug in JRun, and we can get around it by forcing\n-        // Instruction.class to be loaded and initialized\n-        // before TypedInstruction.class\n-        try { serp.bytecode.lowlevel.Entry.class.getName(); } \n-        catch (Throwable t) {}\n-        try { serp.bytecode.Instruction.class.getName(); } \n-        catch (Throwable t) {}\n-\n-        supportedOptions().add(OPTION_QUERY_SQL);\n-        supportedOptions().add(OPTION_JDBC_CONNECTION);\n-        supportedOptions().remove(OPTION_VALUE_INCREMENT);\n-        supportedOptions().remove(OPTION_NULL_CONTAINER);\n-\n-        if (derivations)\n-            ProductDerivations.beforeConfigurationLoad(this);\n-        if (loadGlobals)\n-            loadGlobals();\n-    }\n-\n-    /**\n-     * Copy constructor\n-     */\n-    public JDBCConfigurationImpl(JDBCConfiguration conf) {\n-        this(true, false);\n-        if (conf != null)\n-            fromProperties(conf.toProperties(false));\n-    }\n-\n-    public void setSchema(String schema) {\n-        this.schema.setString(schema);\n-    }\n-\n-    public String getSchema() {\n-        return schema.getString();\n-    }\n-\n-    public void setSchemas(String schemas) {\n-        this.schemas.setString(schemas);\n-    }\n-\n-    public String getSchemas() {\n-        return schemas.getString();\n-    }\n-\n-    public void setSchemas(String[] schemas) {\n-        this.schemas.set(schemas);\n-    }\n-\n-    public String[] getSchemasList() {\n-        return schemas.get();\n-    }\n-\n-    public void setTransactionIsolation(String transactionIsolation) {\n-        this.transactionIsolation.setString(transactionIsolation);\n-    }\n-\n-    public String getTransactionIsolation() {\n-        return transactionIsolation.getString();\n-    }\n-\n-    public void setTransactionIsolation(int transactionIsolation) {\n-        this.transactionIsolation.set(transactionIsolation);\n-    }\n-\n-    public int getTransactionIsolationConstant() {\n-        return transactionIsolation.get();\n-    }\n-\n-    public void setResultSetType(String resultSetType) {\n-        this.resultSetType.setString(resultSetType);\n-    }\n-\n-    public String getResultSetType() {\n-        return resultSetType.getString();\n-    }\n-\n-    public void setResultSetType(int resultSetType) {\n-        this.resultSetType.set(resultSetType);\n-    }\n-\n-    public int getResultSetTypeConstant() {\n-        return resultSetType.get();\n-    }\n-\n-    public void setFetchDirection(String fetchDirection) {\n-        this.fetchDirection.setString(fetchDirection);\n-    }\n-\n-    public String getFetchDirection() {\n-        return fetchDirection.getString();\n-    }\n-\n-    public void setFetchDirection(int fetchDirection) {\n-        this.fetchDirection.set(fetchDirection);\n-    }\n-\n-    public int getFetchDirectionConstant() {\n-        return fetchDirection.get();\n-    }\n-\n-    public void setEagerFetchMode(String eagerFetchMode) {\n-        this.eagerFetchMode.setString(eagerFetchMode);\n-    }\n-\n-    public String getEagerFetchMode() {\n-        return eagerFetchMode.getString();\n-    }\n-\n-    public void setEagerFetchMode(int eagerFetchMode) {\n-        this.eagerFetchMode.set(eagerFetchMode);\n-    }\n-\n-    public int getEagerFetchModeConstant() {\n-        return eagerFetchMode.get();\n-    }\n-\n-    public void setSubclassFetchMode(String subclassFetchMode) {\n-        this.subclassFetchMode.setString(subclassFetchMode);\n-    }\n-\n-    public String getSubclassFetchMode() {\n-        return subclassFetchMode.getString();\n-    }\n-\n-    public void setSubclassFetchMode(int subclassFetchMode) {\n-        this.subclassFetchMode.set(subclassFetchMode);\n-    }\n-\n-    public int getSubclassFetchModeConstant() {\n-        return subclassFetchMode.get();\n-    }\n-\n-    public void setLRSSize(String lrsSize) {\n-        this.lrsSize.setString(lrsSize);\n-    }\n-\n-    public String getLRSSize() {\n-        return lrsSize.getString();\n-    }\n-\n-    public void setLRSSize(int lrsSize) {\n-        this.lrsSize.set(lrsSize);\n-    }\n-\n-    public int getLRSSizeConstant() {\n-        return lrsSize.get();\n-    }\n-\n-    public void setSynchronizeMappings(String synchronizeMappings) {\n-        this.synchronizeMappings.set(synchronizeMappings);\n-    }\n-\n-    public String getSynchronizeMappings() {\n-        return synchronizeMappings.get();\n-    }\n-\n-    public void setJDBCListeners(String jdbcListeners) {\n-        jdbcListenerPlugins.setString(jdbcListeners);\n-    }\n-\n-    public String getJDBCListeners() {\n-        return jdbcListenerPlugins.getString();\n-    }\n-\n-    public void setJDBCListeners(JDBCListener[] listeners) {\n-        jdbcListenerPlugins.set(listeners);\n-    }\n-\n-    public JDBCListener[] getJDBCListenerInstances() {\n-        if (jdbcListenerPlugins.get() == null)\n-            jdbcListenerPlugins.instantiate(JDBCListener.class, this);\n-        return (JDBCListener[]) jdbcListenerPlugins.get();\n-    }\n-\n-    public void setConnectionDecorators(String connectionDecorators) {\n-        connectionDecoratorPlugins.setString(connectionDecorators);\n-    }\n-\n-    public String getConnectionDecorators() {\n-        return connectionDecoratorPlugins.getString();\n-    }\n-\n-    public void setConnectionDecorators(ConnectionDecorator[] decorators) {\n-        connectionDecoratorPlugins.set(decorators);\n-    }\n-\n-    public ConnectionDecorator[] getConnectionDecoratorInstances() {\n-        if (connectionDecoratorPlugins.get() == null) {\n-            connectionDecoratorPlugins.instantiate\n-                (ConnectionDecorator.class, this);\n-        }\n-        return (ConnectionDecorator[]) connectionDecoratorPlugins.get();\n-    }\n-\n-    public void setDBDictionary(String dbdictionary) {\n-        dbdictionaryPlugin.setString(dbdictionary);\n-    }\n-\n-    public String getDBDictionary() {\n-        return dbdictionaryPlugin.getString();\n-    }\n-\n-    public void setDBDictionary(DBDictionary dbdictionary) {\n-        // we can't allow the dictionary to be set after the connection\n-        // factory, due to initialization issues\n-        if (connectionFactory.get() != null\n-            || connectionFactory2.get() != null)\n-            throw new IllegalStateException();\n-\n-        dbdictionaryPlugin.set(dbdictionary);\n-    }\n-\n-    public DBDictionary getDBDictionaryInstance() {\n-        // lock on connection factory name, since getting the connection\n-        // factory and getting the dictionary have to use the same locks to\n-        // prevent deadlock since they call each other\n-        DBDictionary dbdictionary = (DBDictionary) dbdictionaryPlugin.get();\n-        if (dbdictionary == null) {\n-            String clsName = dbdictionaryPlugin.getClassName();\n-            String props = dbdictionaryPlugin.getProperties();\n-            if (!StringUtils.isEmpty(clsName)) {\n-                dbdictionary = DBDictionaryFactory.newDBDictionary\n-                    (this, clsName, props);\n-            } else {\n-                // if the dictionary class isn't set, try to guess from\n-                // connection URL and driver name\n-                dbdictionary = DBDictionaryFactory.calculateDBDictionary\n-                    (this, getConnectionURL(), getConnectionDriverName(),\n-                        props);\n-\n-                // if the url and driver name aren't enough, connect to\n-                // the DB and use the connection metadata\n-                if (dbdictionary == null) {\n-                    Log log = getLog(LOG_JDBC);\n-                    if (log.isTraceEnabled()) {\n-                        Localizer loc = Localizer.forPackage\n-                            (JDBCConfigurationImpl.class);\n-                        log.trace(loc.get(\"connecting-for-dictionary\"));\n-                    }\n-\n-                    // use the base connection factory rather than the\n-                    // configured data source b/c the data source relies\n-                    // on passing the connection through the dictionary,\n-                    // resulting in infinite loops\n-                    DataSource ds = createConnectionFactory();\n-                    dbdictionary = DBDictionaryFactory.newDBDictionary\n-                        (this, getDataSource(null, ds), props);\n-                }\n-            }\n-            dbdictionaryPlugin.set(dbdictionary, true);\n-        }\n-        return dbdictionary;\n-    }\n-\n-    public void setUpdateManager(String updateManager) {\n-        updateManagerPlugin.setString(updateManager);\n-    }\n-\n-    public String getUpdateManager() {\n-        return updateManagerPlugin.getString();\n-    }\n-\n-    public void setUpdateManager(UpdateManager updateManager) {\n-        updateManagerPlugin.set(updateManager);\n-    }\n-\n-    public UpdateManager getUpdateManagerInstance() {\n-        if (updateManagerPlugin.get() == null)\n-            updateManagerPlugin.instantiate(UpdateManager.class, this);\n-        return (UpdateManager) updateManagerPlugin.get();\n-    }\n-\n-    public void setDriverDataSource(String driverDataSource) {\n-        driverDataSourcePlugin.setString(driverDataSource);\n-    }\n-\n-    public String getDriverDataSource() {\n-        return driverDataSourcePlugin.getString();\n-    }\n-\n-    public DriverDataSource newDriverDataSourceInstance() {\n-        return (DriverDataSource) driverDataSourcePlugin.\n-            instantiate(DriverDataSource.class, this);\n-    }\n-\n-    public void setSchemaFactory(String schemaFactory) {\n-        schemaFactoryPlugin.setString(schemaFactory);\n-    }\n-\n-    public String getSchemaFactory() {\n-        return schemaFactoryPlugin.getString();\n-    }\n-\n-    public void setSchemaFactory(SchemaFactory schemaFactory) {\n-        schemaFactoryPlugin.set(schemaFactory);\n-    }\n-\n-    public SchemaFactory getSchemaFactoryInstance() {\n-        if (schemaFactoryPlugin.get() == null)\n-            schemaFactoryPlugin.instantiate(SchemaFactory.class, this);\n-        return (SchemaFactory) schemaFactoryPlugin.get();\n-    }\n-\n-    public void setSQLFactory(String sqlFactory) {\n-        sqlFactoryPlugin.setString(sqlFactory);\n-    }\n-\n-    public String getSQLFactory() {\n-        return sqlFactoryPlugin.getString();\n-    }\n-\n-    public void setSQLFactory(SQLFactory sqlFactory) {\n-        sqlFactoryPlugin.set(sqlFactory);\n-    }\n-\n-    public SQLFactory getSQLFactoryInstance() {\n-        if (sqlFactoryPlugin.get() == null)\n-            sqlFactoryPlugin.instantiate(SQLFactory.class, this);\n-        return (SQLFactory) sqlFactoryPlugin.get();\n-    }\n-\n-    public String getMappingFactory() {\n-        return mappingFactoryPlugin.getString();\n-    }\n-\n-    public void setMappingFactory(String mapping) {\n-        mappingFactoryPlugin.setString(mapping);\n-    }\n-\n-    public MetaDataFactory newMetaDataFactoryInstance() {\n-        return mappingFactoryPlugin.instantiateMetaDataFactory(this,\n-            metaFactoryPlugin, getMapping());\n-    }\n-\n-    public void setMappingDefaults(String mapping) {\n-        this.mappingDefaultsPlugin.setString(mapping);\n-    }\n-\n-    public String getMappingDefaults() {\n-        return mappingDefaultsPlugin.getString();\n-    }\n-\n-    public void setMappingDefaults(MappingDefaults mapping) {\n-        mappingDefaultsPlugin.set(mapping);\n-    }\n-\n-    public MappingDefaults getMappingDefaultsInstance() {\n-        if (mappingDefaultsPlugin.get() == null)\n-            mappingDefaultsPlugin.instantiate(MappingDefaults.class, this);\n-        return (MappingDefaults) mappingDefaultsPlugin.get();\n-    }\n-\n-    public MappingRepository getMappingRepositoryInstance() {\n-        return (MappingRepository) getMetaDataRepositoryInstance();\n-    }\n-\n-    public MappingRepository newMappingRepositoryInstance() {\n-        return (MappingRepository) newMetaDataRepositoryInstance();\n-    }\n-\n-    public BrokerImpl newBrokerInstance(String user, String pass) {\n-        BrokerImpl broker = super.newBrokerInstance(user, pass);\n-\n-        // record first non-null broker user and pass in case no global settings\n-        if (broker != null && user != null && firstUser == null) {\n-            firstUser = user;\n-            firstPass = pass;\n-        }\n-        return broker;\n-    }\n-\n-    public Object getConnectionFactory() {\n-        // override to configure data source\n-        if (dataSource == null) {\n-            DecoratingDataSource ds = createConnectionFactory();\n-            dataSource = DataSourceFactory.installDBDictionary\n-                (getDBDictionaryInstance(), ds, this, false);\n-        }\n-        return dataSource;\n-    }\n-\n-    public void setConnectionFactory(Object factory) {\n-        // there's a lot of one-time initialization involved for\n-        // connection factories, so ignore resets\n-        if (factory == connectionFactory.get())\n-            return;\n-\n-        // override to configure data source\n-        if (factory != null) {\n-            // need to ensure it is decorated before we set the dict\n-            DecoratingDataSource ds =\n-                setupConnectionFactory((DataSource) factory, false);\n-            dataSource = DataSourceFactory.installDBDictionary\n-                (getDBDictionaryInstance(), ds, this, false);\n-        } else\n-            connectionFactory.set(null);\n-    }\n-\n-    /**\n-     * Ensure that the specified DataSource is decorated and set in the cache.\n-     */\n-    private DecoratingDataSource setupConnectionFactory(DataSource ds,\n-        boolean factory2) {\n-        if (ds == null)\n-            return null;\n-\n-        DecoratingDataSource dds;\n-        if (ds instanceof DecoratingDataSource)\n-            dds = (DecoratingDataSource) ds;\n-        else\n-            dds = DataSourceFactory.decorateDataSource(ds, this, factory2);\n-\n-        if (!factory2 && connectionFactory.get() != ds)\n-            connectionFactory.set(dds, true);\n-        else if (factory2 && connectionFactory2.get() != ds)\n-            connectionFactory2.set(dds, true);\n-\n-        return dds;\n-    }\n-\n-    public Object getConnectionFactory2() {\n-        // override to configure data source\n-        if (dataSource2 == null) {\n-            // superclass will lookup from JNDI. \n-            DataSource ds = (DataSource) super.getConnectionFactory2();\n-            if (ds == null) {\n-                // the driver name is always required, so if not specified,\n-                // then no connection factory 2\n-                String driver = getConnection2DriverName();\n-                if (!StringUtils.isEmpty(driver))\n-                    ds = DataSourceFactory.newDataSource(this, true);\n-            }\n-            if (ds != null) {\n-                DecoratingDataSource dds =\n-                    setupConnectionFactory(ds, true); // before dict\n-                dataSource2 = DataSourceFactory.installDBDictionary\n-                    (getDBDictionaryInstance(), dds, this, true);\n-            }\n-        }\n-        return dataSource2;\n-    }\n-\n-    public void setConnectionFactory2(Object factory) {\n-        if (factory == connectionFactory2.get())\n-            return;\n-\n-        // override to configure data source\n-        if (factory != null) {\n-            // need to ensure it is decorated before we set the dict\n-            DecoratingDataSource ds = setupConnectionFactory((DataSource)\n-                factory, true);\n-            dataSource2 = DataSourceFactory.installDBDictionary\n-                (getDBDictionaryInstance(), ds, this, true);\n-        } else\n-            connectionFactory2.set(null);\n-    }\n-\n-    /**\n-     * Create the connection factory if necessary.\n-     */\n-    private DecoratingDataSource createConnectionFactory() {\n-        DataSource ds = (DataSource) connectionFactory.get();\n-        if (ds != null)\n-            return setupConnectionFactory(ds, false);\n-\n-        ds = (DataSource) super.getConnectionFactory(); // JNDI lookup\n-        if (ds == null)\n-            ds = DataSourceFactory.newDataSource(this, false);\n-\n-        return setupConnectionFactory(ds, false);\n-    }\n-\n-    public DataSource getDataSource(StoreContext ctx) {\n-        return getDataSource(ctx, (DataSource) getConnectionFactory());\n-    }\n-\n-    public DataSource getDataSource2(StoreContext ctx) {\n-        // if there is no connection factory 2, use the primary factory\n-        DataSource ds = (DataSource) getConnectionFactory2();\n-        if (ds == null)\n-            return getDataSource(ctx);\n-\n-        // prefer the global connection 2 auth info if given\n-        String user = getConnection2UserName();\n-        String pass = getConnection2Password();\n-        if (user == null && pass == null) {\n-            // no global auth info; use the context if given, or the first\n-            // context if not\n-            if (ctx == null) {\n-                user = firstUser;\n-                pass = firstPass;\n-            } else {\n-                user = ctx.getConnectionUserName();\n-                pass = ctx.getConnectionPassword();\n-            }\n-        }\n-        return DataSourceFactory.defaultsDataSource(ds, user, pass);\n-    }\n-\n-    /**\n-     * This version allows us to pass in which data source to wrap internally;\n-     * useful during initialization before the connection factory is\n-     * completely configured.\n-     */\n-    private DataSource getDataSource(StoreContext ctx, DataSource ds) {\n-        String user, pass;\n-        if (ctx == null) {\n-            // if no context, default to the global auth info, or the auth info\n-            // of the first context if none\n-            user = getConnectionUserName();\n-            if (user == null)\n-                user = firstUser;\n-            pass = getConnectionPassword();\n-            if (pass == null)\n-                pass = firstPass;\n-        } else {\n-            // use the context's auth info\n-            user = ctx.getConnectionUserName();\n-            pass = ctx.getConnectionPassword();\n-        }\n-        return DataSourceFactory.defaultsDataSource(ds, user, pass);\n-    }\n-\n-    /**\n-     * Free the data sources.\n-     */\n-    protected void preClose() {\n-        if (dataSource != null) {\n-            getDBDictionaryInstance().closeDataSource(dataSource);\n-            connectionFactory.set(null, true); // so super doesn't close it\n-        }\n-        if (dataSource2 != null) {\n-            getDBDictionaryInstance().closeDataSource(dataSource);\n-            connectionFactory2.set(null, true); // so super doesn't close it\n-        }\n-        super.preClose();\n-    }\n-\n-    protected boolean isInvalidProperty(String propName) {\n-        if (super.isInvalidProperty(propName))\n-            return true;\n-\n-        // handle openjpa.jdbc.SomeMisspelledProperty, but not\n-        // openjpa.someotherimplementation.SomeProperty\n-        String[] prefixes = ProductDerivations.getConfigurationPrefixes();\n-        for (int i = 0; i < prefixes.length; i++)\n-            if (propName.toLowerCase().startsWith(prefixes[i] + \".jdbc\"))\n-                return true; \n-        return false;\n-    }\n-    \n-    public void setQuerySQLCache(String querySQLCache) {\n-        this.querySQLCache.setString(querySQLCache);\n-    }\n-\n-    public QuerySQLCacheValue getQuerySQLCache() {\n-        return querySQLCache;\n-    }\n-    \n-    public boolean isQuerySQLCacheOn() {\n-        return querySQLCache.isSQLCacheOn();\n-    }\n-\n-    public Map getQuerySQLCacheInstance() {\n-        return querySQLCacheInstance;\n-    }\n-    \n-}"},{"sha":"8325e16293579a11af2c4158c4caac515b004400","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCProductDerivation.java","status":"removed","additions":0,"deletions":51,"changes":51,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCProductDerivation.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCProductDerivation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCProductDerivation.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,51 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.conf;\n-\n-import java.util.Map;\n-\n-import org.apache.openjpa.conf.BrokerFactoryValue;\n-import org.apache.openjpa.conf.OpenJPAProductDerivation;\n-import org.apache.openjpa.jdbc.kernel.JDBCBrokerFactory;\n-import org.apache.openjpa.lib.conf.AbstractProductDerivation;\n-import org.apache.openjpa.lib.conf.ConfigurationProvider;\n-\n-/**\n- * Sets JDBC as default store.\n- */\n-public class JDBCProductDerivation extends AbstractProductDerivation\n-    implements OpenJPAProductDerivation {\n-\n-    public void putBrokerFactoryAliases(Map m) {\n-        m.put(\"jdbc\", JDBCBrokerFactory.class.getName());\n-    }\n-\n-    public int getType() {\n-        return TYPE_STORE;\n-    }\n-\n-    public boolean beforeConfigurationConstruct(ConfigurationProvider cp) {\n-        // default to JDBC when no broker factory set\n-        if (BrokerFactoryValue.get(cp) == null) {\n-            BrokerFactoryValue.set(cp, \"jdbc\");\n-            return true;\n-        }\n-        return false;\n-    }\n-}"},{"sha":"06af315b40e876c31d329b39c9f1333512b4234d","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCSeqValue.java","status":"removed","additions":0,"deletions":61,"changes":61,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCSeqValue.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCSeqValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCSeqValue.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,61 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.conf;\n-\n-import org.apache.openjpa.conf.SeqValue;\n-import org.apache.openjpa.jdbc.kernel.ClassTableJDBCSeq;\n-import org.apache.openjpa.jdbc.kernel.NativeJDBCSeq;\n-import org.apache.openjpa.jdbc.kernel.TableJDBCSeq;\n-import org.apache.openjpa.jdbc.kernel.ValueTableJDBCSeq;\n-import org.apache.openjpa.jdbc.meta.SequenceMapping;\n-import org.apache.openjpa.kernel.TimeSeededSeq;\n-\n-/**\n- * Adds additional aliases to base {@link SeqValue}. This subclass is\n- * not added to the configuration object because it is not visible to it.\n- * Therefore, this class should not attempt to alter sequence instantiation\n- * behavior. The aliases defined by this subclass are added to the\n- * configuration, however, and this subclass may also be instantiated by\n- * other components for creation of sequences without manual alias setting.\n- *\n- * @author Abe White\n- * @nojavadoc\n- */\n-public class JDBCSeqValue\n-    extends SeqValue {\n-\n-    static final String[] ALIASES = new String[]{\n-        SequenceMapping.IMPL_TABLE, TableJDBCSeq.class.getName(),\n-        SequenceMapping.IMPL_VALUE_TABLE, ValueTableJDBCSeq.class.getName(),\n-        SequenceMapping.IMPL_CLASS_TABLE, ClassTableJDBCSeq.class.getName(),\n-        SequenceMapping.IMPL_NATIVE, NativeJDBCSeq.class.getName(),\n-        SequenceMapping.IMPL_TIME, TimeSeededSeq.class.getName(),\n-        // deprecated aliases\n-        \"db\", TableJDBCSeq.class.getName(),\n-        \"db-class\", ClassTableJDBCSeq.class.getName(),\n-        \"sjvm\", TimeSeededSeq.class.getName(),\n-    };\n-\n-    public JDBCSeqValue(String prop) {\n-        super(prop);\n-        setAliases(ALIASES);\n-        setDefault(ALIASES[0]);\n-        setClassName(ALIASES[1]);\n-    }\n-}"},{"sha":"33329e1581636d9540ff77e6ad4b19a61df9f8ec","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/MappingFactoryValue.java","status":"removed","additions":0,"deletions":162,"changes":162,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/MappingFactoryValue.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/MappingFactoryValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/MappingFactoryValue.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,162 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.conf;\n-\n-import org.apache.commons.lang.StringUtils;\n-import org.apache.openjpa.jdbc.meta.MetaDataPlusMappingFactory;\n-import org.apache.openjpa.lib.conf.Configuration;\n-import org.apache.openjpa.lib.conf.Configurations;\n-import org.apache.openjpa.lib.conf.PluginValue;\n-import org.apache.openjpa.lib.log.Log;\n-import org.apache.openjpa.lib.util.Localizer;\n-import org.apache.openjpa.meta.MetaDataFactory;\n-\n-/**\n- * Handles the complex logic of creating a {@link MetaDataFactory} for\n- * combined metadata and mapping.\n- *\n- * @author Abe White\n- * @nojavadoc\n- */\n-public class MappingFactoryValue\n-    extends PluginValue {\n-\n-    private static final Localizer _loc = Localizer.forPackage\n-        (MappingFactoryValue.class);\n-\n-    private String[] _metaFactoryDefaults = null;\n-    private String[] _mappedMetaFactoryDefaults = null;\n-\n-    public MappingFactoryValue(String prop) {\n-        super(prop, false);\n-    }\n-\n-    /**\n-     * Default setting for a given <code>MetaDataFactory</code> alias setting.\n-     * If a <code>MappingFactory</code> value is not supplied, we check these\n-     * defaults against the <code>MetaDataFactory</code> setting. If the\n-     * <code>MetaDataFactory</code> does not have a default, we assume it\n-     * handles both metadata and mapping factory.\n-     */\n-    public void setMetaDataFactoryDefault(String metaAlias,\n-        String mappingAlias) {\n-        _metaFactoryDefaults = setAlias(metaAlias, mappingAlias,\n-            _metaFactoryDefaults);\n-    }\n-\n-    /**\n-     * If the <code>Mapping</code> property is set, we check these defaults\n-     * before checking metadata factory defaults.\n-     */\n-    public void setMappedMetaDataFactoryDefault(String metaAlias,\n-        String mappingAlias) {\n-        _mappedMetaFactoryDefaults = setAlias(metaAlias, mappingAlias,\n-            _mappedMetaFactoryDefaults);\n-    }\n-\n-    /**\n-     * Intantiate a {@link MetaDataFactory} responsible for both metadata and\n-     * mapping.\n-     */\n-    public MetaDataFactory instantiateMetaDataFactory(Configuration conf,\n-        PluginValue metaPlugin, String mapping) {\n-        return instantiateMetaDataFactory(conf, metaPlugin, mapping, true);\n-    }\n-\n-    /**\n-     * Intantiate a {@link MetaDataFactory} responsible for both metadata and\n-     * mapping.\n-     */\n-    public MetaDataFactory instantiateMetaDataFactory(Configuration conf,\n-        PluginValue metaPlugin, String mapping, boolean fatal) {\n-        String clsName = getClassName();\n-        String props = getProperties();\n-        String metaClsName = metaPlugin.getClassName();\n-        String metaProps = metaPlugin.getProperties();\n-\n-        // if no mapping factory set, check for default for this factory\n-        if (StringUtils.isEmpty(clsName)) {\n-            String def;\n-            if (!StringUtils.isEmpty(mapping)) {\n-                def = unalias(metaPlugin.alias(metaClsName),\n-                    _mappedMetaFactoryDefaults, true);\n-                if (def != null)\n-                    clsName = unalias(def);\n-            }\n-            if (StringUtils.isEmpty(clsName)) {\n-                def = unalias(metaPlugin.alias(metaClsName),\n-                    _metaFactoryDefaults, true);\n-                if (def != null)\n-                    clsName = unalias(def);\n-            }\n-        }\n-\n-        // if mapping factory and metadata factory the same, combine\n-        // into metadata factory\n-        if (clsName != null && clsName.equals(metaClsName)) {\n-            if (props != null && metaProps == null)\n-                metaProps = props;\n-            else if (props != null)\n-                metaProps += \",\" + props;\n-            clsName = null;\n-            props = null;\n-        }\n-\n-        // instantiate factories\n-        MetaDataFactory map = (MetaDataFactory) newInstance(clsName,\n-            MetaDataFactory.class, conf, fatal);\n-        MetaDataFactory meta;\n-        if (map != null\n-            && map.getClass().getName().indexOf(\"Deprecated\") != -1) {\n-            // deprecated mapping factories take over metadata too, so we have\n-            // to special-case them to treat them like metadata factory only\n-            meta = map;\n-            map = null;\n-        } else {\n-            meta = (MetaDataFactory) metaPlugin.newInstance\n-                (metaClsName, MetaDataFactory.class, conf, fatal);\n-        }\n-\n-        // configure factories.  if only meta factory, allow user to specify\n-        // its mapping properties in the mapping factory setting\n-        if (map == null && props != null) {\n-            if (metaProps == null)\n-                metaProps = props;\n-            else\n-                metaProps += \", \" + props;\n-        }\n-        Configurations.configureInstance(map, conf, props,\n-            (fatal) ? getProperty() : null);\n-        Configurations.configureInstance(meta, conf, metaProps,\n-            (fatal) ? metaPlugin.getProperty() : null);\n-\n-        Log log = conf.getLog(JDBCConfiguration.LOG_METADATA);\n-        if (log.isTraceEnabled()) {\n-            log.trace(_loc.get(\"meta-factory\", meta));\n-            if (map != null)\n-                log.trace(_loc.get(\"map-factory\", map));\n-        }\n-\n-        // if no mapping setting, return meta factory alone, assuming it handles\n-        // both metadata and mapping\n-        MetaDataFactory ret = (map == null) ? meta\n-            : new MetaDataPlusMappingFactory(meta, map);\n-        return ret;\n-    }\n-}"},{"sha":"252b75a16686fea08af9a40052fe742624628336","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/MappingRepositoryValue.java","status":"removed","additions":0,"deletions":68,"changes":68,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/MappingRepositoryValue.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/MappingRepositoryValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/MappingRepositoryValue.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,68 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.conf;\n-\n-import java.lang.reflect.InvocationTargetException;\n-import java.security.AccessController;\n-\n-import org.apache.openjpa.jdbc.meta.MappingRepository;\n-import org.apache.openjpa.lib.conf.Configuration;\n-import org.apache.openjpa.lib.conf.PluginValue;\n-import org.apache.openjpa.lib.util.J2DoPrivHelper;\n-\n-import serp.util.Strings;\n-\n-/**\n- * Handles the complex logic of creating a {@link MappingRepository} for\n- * a given configuration.\n- *\n- * @author Marc Prud'hommeaux\n- * @nojavadoc\n- */\n-public class MappingRepositoryValue\n-    extends PluginValue {\n-\n-    public MappingRepositoryValue(String prop) {\n-        super(prop, true);\n-    }\n-\n-    public Object newInstance(String clsName, Class type,\n-        Configuration conf, boolean fatal) {\n-        // since the MappingRepository takes a JDBConfiguration constructor,\n-        // we need to manually perform the instantiation\n-        try {\n-            Class cls = Strings.toClass(clsName,\n-                (ClassLoader) AccessController.doPrivileged(\n-                    J2DoPrivHelper.getClassLoaderAction(type)));        \n-            return cls.getConstructor(new Class[]{ JDBCConfiguration.class }).\n-                newInstance(new Object[]{ conf });\n-        } catch (RuntimeException e) {\n-            throw e;\n-        } catch (InvocationTargetException e) {\n-            if (e.getTargetException() instanceof RuntimeException)\n-                throw(RuntimeException) e.getTargetException();\n-\n-            // fall back to default behavior for better error reporting\n-            return super.newInstance(clsName, type, conf, fatal);\n-        } catch (Exception e) {\n-            // fall back to default behavior for better error reporting\n-            return super.newInstance(clsName, type, conf, fatal);\n-        }\n-    }\n-}"},{"sha":"7db54b7e2bb5ffdbdcd913f8d5c7e844ebcfe2bf","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/QuerySQLCacheValue.java","status":"removed","additions":0,"deletions":86,"changes":86,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/QuerySQLCacheValue.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/QuerySQLCacheValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/QuerySQLCacheValue.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,86 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.conf;\n-\n-import java.util.Collections;\n-import java.util.Hashtable;\n-import java.util.Map;\n-import java.util.concurrent.ConcurrentHashMap;\n-\n-import org.apache.openjpa.lib.conf.Configurations;\n-import org.apache.openjpa.lib.conf.PluginValue;\n-import org.apache.openjpa.util.CacheMap;\n-\n-\n-/**\n- * A cache of sql queries.\n- *\n- * @since 1.2\n- * @nojavadoc\n- */\n-public class QuerySQLCacheValue\n-    extends PluginValue {\n-\n-    public static final String[] ALIASES = {\n-        \"true\", CacheMap.class.getName(),\n-        \"all\", ConcurrentHashMap.class.getName(),\n-        \"false\", null,\n-    };\n-    \n-    public QuerySQLCacheValue(String prop) {\n-        super(prop, true); \n-        setAliases(ALIASES);\n-        setDefault(ALIASES[0]);\n-        setClassName(ALIASES[1]);\n-    }\n-    \n-    public boolean isSQLCacheOn() {\n-        if (getClassName() == null) \n-            return false;\n-        return true;\n-    }\n-    \n-    public Object newInstance() {\n-        // make sure map handles concurrency\n-        String clsName = getClassName();\n-        if (clsName == null)\n-            return null;\n-        Map map = null;\n-\n-        try {\n-            // Use the \"OpenJPA\" classloader first...\n-            map = (Map) Configurations.newInstance(clsName, this.getClass()\n-                    .getClassLoader());\n-        } catch (Exception e) {\n-            // If the \"OpenJPA\" classloader fails, then try the classloader\n-            // that was used to load java.util.Map...\n-            map = (Map) Configurations.newInstance(clsName,\n-                    Map.class.getClassLoader());\n-        }\n-        if (map != null\n-                && !(map instanceof Hashtable)\n-                && !(map instanceof CacheMap)\n-                && !(map instanceof \n-                        org.apache.openjpa.lib.util.concurrent.ConcurrentMap)\n-                && !(map instanceof java.util.concurrent.ConcurrentMap))\n-            map = Collections.synchronizedMap(map);\n-        return map;\n-    }\n-\n-}"},{"sha":"5e869b739b7686426e1d57d2c4d4cbeccb4b914b","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/package.html","status":"removed","additions":0,"deletions":27,"changes":27,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/package.html","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/package.html","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/package.html?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,27 +0,0 @@\n-<!--\n- Licensed to the Apache Software Foundation (ASF) under one\n- or more contributor license agreements.  See the NOTICE file\n- distributed with this work for additional information\n- regarding copyright ownership.  The ASF licenses this file\n- to you under the Apache License, Version 2.0 (the\n- \"License\"); you may not use this file except in compliance\n- with the License.  You may obtain a copy of the License at\n- \n- http://www.apache.org/licenses/LICENSE-2.0\n- \n- Unless required by applicable law or agreed to in writing,\n- software distributed under the License is distributed on an\n- \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- KIND, either express or implied.  See the License for the\n- specific language governing permissions and limitations\n- under the License.   \n--->\n-<html>\n-<body>\n-<p><strong>OpenJPA-JDBC Configuration</strong></p>\n-\n-<p>\n-    This package provides JDBC configuration interfaces.\n-</p>\n-</body>\n-</html>"},{"sha":"84741971200e086ebd42746f1a0c6d7e115872b7","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/AbstractJDBCSavepointManager.java","status":"removed","additions":0,"deletions":146,"changes":146,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/AbstractJDBCSavepointManager.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/AbstractJDBCSavepointManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/AbstractJDBCSavepointManager.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,146 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.kernel;\n-\n-import java.io.IOException;\n-import java.io.NotSerializableException;\n-import java.io.ObjectOutputStream;\n-import java.sql.Connection;\n-import java.util.Collection;\n-\n-import org.apache.openjpa.conf.OpenJPAConfiguration;\n-import org.apache.openjpa.kernel.Broker;\n-import org.apache.openjpa.kernel.OpenJPASavepoint;\n-import org.apache.openjpa.kernel.RestoreState;\n-import org.apache.openjpa.kernel.SavepointManager;\n-import org.apache.openjpa.lib.conf.Configurable;\n-import org.apache.openjpa.lib.conf.Configuration;\n-\n-/**\n- * Abstract {@link SavepointManager} implementation that\n- * delegates to the subclass for savepoint operations on the active\n- * {@link Connection}. This implementation issues a flush and relies\n- * on the driver/db to restore back to the flushed state.\n- *\n- * @author Steve Kim\n- * @since 0.3.4\n- */\n-public abstract class AbstractJDBCSavepointManager\n-    implements SavepointManager, Configurable {\n-\n-    private boolean _restore = false;\n-\n-    public void startConfiguration() {\n-    }\n-\n-    public void setConfiguration(Configuration conf) {\n-        _restore = ((OpenJPAConfiguration) conf).getRestoreStateConstant()\n-            != RestoreState.RESTORE_NONE;\n-    }\n-\n-    public void endConfiguration() {\n-    }\n-\n-    /**\n-     * Return whether to retain in-memory copies of field values for restore\n-     * on rollback. Defaults to {@link OpenJPAConfiguration#getRestoreState).\n-     */\n-    public boolean getRestoreFieldState() {\n-        return _restore;\n-    }\n-\n-    /**\n-     * Set whether to retain in-memory copies of field values for restore\n-     * on rollback. Defaults to {@link OpenJPAConfiguration#getRestoreState}.\n-     */\n-    public void setRestoreFieldState(boolean restore) {\n-        _restore = restore;\n-    }\n-\n-    public OpenJPASavepoint newSavepoint(String name, Broker broker) {\n-        // flush after creating savepoint b/c flush may add/change states\n-        OpenJPASavepoint save = new ConnectionSavepoint(broker, name, _restore);\n-        broker.flush();\n-        return save;\n-    }\n-\n-    public boolean supportsIncrementalFlush() {\n-        return true;\n-    }\n-\n-    /**\n-     * Rollback the datastore savepoint.\n-     */\n-    protected abstract void rollbackDataStore(ConnectionSavepoint savepoint);\n-\n-    /**\n-     * Set the datastore savepoint.\n-     */\n-    protected abstract void setDataStore(ConnectionSavepoint savepoint);\n-\n-    /**\n-     * A savepoint which provides access to the current transactional\n-     * connection.\n-     */\n-    protected class ConnectionSavepoint extends OpenJPASavepoint {\n-\n-        private Object _savepoint;\n-\n-        public ConnectionSavepoint(Broker broker, String name, boolean copy) {\n-            super(broker, name, copy);\n-        }\n-\n-        /**\n-         * Return the stored savepoint object\n-         */\n-        public Object getDataStoreSavepoint() {\n-            return _savepoint;\n-        }\n-\n-        /**\n-         * Set the implementation specific savepoint object\n-         */\n-        public void setDataStoreSavepoint(Object savepoint) {\n-            _savepoint = savepoint;\n-        }\n-\n-        /**\n-         * Return the current {@link Connection} for this savepoint.\n-         */\n-        public Connection getConnection() {\n-            return ((JDBCStoreManager) getBroker().getStoreManager().\n-                getInnermostDelegate()).getConnection();\n-        }\n-\n-        public Collection rollback(Collection previous) {\n-            AbstractJDBCSavepointManager.this.rollbackDataStore(this);\n-            return super.rollback(previous);\n-        }\n-\n-        public void save(Collection states) {\n-            AbstractJDBCSavepointManager.this.setDataStore(this);\n-            super.save(states);\n-        }\n-\n-        private void writeObject(ObjectOutputStream out)\n-            throws IOException {\n-            throw new NotSerializableException();\n-        }\n-    }\n-}"},{"sha":"5064c3c61f5e70d2032e4c0a6c42b1901515f470","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/AbstractJDBCSeq.java","status":"removed","additions":0,"deletions":214,"changes":214,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/AbstractJDBCSeq.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/AbstractJDBCSeq.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/AbstractJDBCSeq.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,214 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.kernel;\n-\n-import java.sql.Connection;\n-import java.sql.SQLException;\n-import javax.sql.DataSource;\n-import javax.transaction.Transaction;\n-import javax.transaction.TransactionManager;\n-\n-import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n-import org.apache.openjpa.jdbc.kernel.JDBCStoreManager.RefCountConnection;\n-import org.apache.openjpa.jdbc.meta.ClassMapping;\n-import org.apache.openjpa.jdbc.schema.SchemaGroup;\n-import org.apache.openjpa.jdbc.sql.SQLExceptions;\n-import org.apache.openjpa.kernel.StoreContext;\n-import org.apache.openjpa.meta.ClassMetaData;\n-import org.apache.openjpa.util.OpenJPAException;\n-import org.apache.openjpa.util.StoreException;\n-\n-/**\n- * Abstract sequence implementation. Handles obtaining the proper\n- * connection to used based on whether the sequence is transactional and\n- * whether a second datasource is configured.\n- *\n- * @author Abe White\n- */\n-public abstract class AbstractJDBCSeq\n-    implements JDBCSeq {\n-\n-    protected int type = TYPE_DEFAULT;\n-    protected Object current = null;\n-\n-    /**\n-     * Records the sequence type.\n-     */\n-    public void setType(int type) {\n-        this.type = type;\n-    }\n-\n-    public Object next(StoreContext ctx, ClassMetaData meta) {\n-        JDBCStore store = getStore(ctx);\n-        try {\n-            current = nextInternal(store, (ClassMapping) meta);\n-            return current;\n-        } catch (OpenJPAException ke) {\n-            throw ke;\n-        } catch (SQLException se) {\n-            throw SQLExceptions.getStore(se, store.getDBDictionary());\n-        } catch (Exception e) {\n-            throw new StoreException(e);\n-        }\n-    }\n-\n-    public Object current(StoreContext ctx, ClassMetaData meta) {\n-        JDBCStore store = getStore(ctx);\n-        try {\n-            return currentInternal(store, (ClassMapping) meta);\n-        } catch (OpenJPAException ke) {\n-            throw ke;\n-        } catch (SQLException se) {\n-            throw SQLExceptions.getStore(se, store.getDBDictionary());\n-        } catch (Exception e) {\n-            throw new StoreException(e);\n-        }\n-    }\n-\n-    public void allocate(int additional, StoreContext ctx, ClassMetaData meta) {\n-        JDBCStore store = getStore(ctx);\n-        try {\n-            allocateInternal(additional, store, (ClassMapping) meta);\n-        } catch (OpenJPAException ke) {\n-            throw ke;\n-        } catch (SQLException se) {\n-            throw SQLExceptions.getStore(se, store.getDBDictionary());\n-        } catch (Exception e) {\n-            throw new StoreException(e);\n-        }\n-    }\n-\n-    /**\n-     * No-op.\n-     */\n-    public void addSchema(ClassMapping mapping, SchemaGroup group) {\n-    }\n-\n-    /**\n-     * No-op.\n-     */\n-    public void close() {\n-    }\n-\n-    /**\n-     * Return the next sequence object.\n-     */\n-    protected abstract Object nextInternal(JDBCStore store,\n-        ClassMapping mapping)\n-        throws Exception;\n-    \n-    /**\n-     * Return the {@link JDBCConfiguration} for this sequence.\n-     */\n-    public abstract JDBCConfiguration getConfiguration();\n-\n-    /**\n-     * Return the current sequence object. By default returns the last\n-     * sequence value used, or null if no sequence values have been requested\n-     * yet. Default implementation is not threadsafe.\n-     */\n-    protected Object currentInternal(JDBCStore store, ClassMapping mapping)\n-        throws Exception {\n-        return current;\n-    }\n-\n-    /**\n-     * Allocate additional sequence values. Does nothing by default.\n-     */\n-    protected void allocateInternal(int additional, JDBCStore store,\n-        ClassMapping mapping)\n-        throws Exception {\n-    }\n-\n-    /**\n-     * Extract the store from the given context.\n-     */\n-    private JDBCStore getStore(StoreContext ctx) {\n-        return (JDBCStore) ctx.getStoreManager().getInnermostDelegate();\n-    }\n-\n-    /**\n-     * <P>Return the connection to use based on the type of sequence. This\n-     * connection will automatically be closed; do not close it.</P>\n-     * \n-     * @return If the sequence type is <code>TYPE_TRANSACTIONAL</code> or \n-     * <code>TYPE_CONTIGUOUS</code> the connection from the {@link StoreManager}\n-     * will be returned. \n-     * \n-     * <P>Otherwise a new connection will be obtained using DataSource2 from the \n-     * current configuration. In this case autocommit is set to false prior to \n-     * returning the connection.</P>\n-     */\n-    protected Connection getConnection(JDBCStore store)\n-        throws SQLException {\n-        if (type == TYPE_TRANSACTIONAL || type == TYPE_CONTIGUOUS) {\n-            // Also increments ref count.\n-            return store.getConnection();\n-        }\n-        else {\n-            JDBCConfiguration conf = store.getConfiguration();\n-            DataSource ds = conf.getDataSource2(store.getContext());\n-            Connection conn = ds.getConnection();\n-            if (conn.getAutoCommit())\n-                conn.setAutoCommit(false);\n-            return conn;\n-        }\n-    }\n-\n-    /**\n-     * Close the current connection. If the sequence is\n-     * <code>TYPE_TRANSACTIONAL</code> or <code>TYPE_CONTIGUOUS</code>\n-     * we will decrement the ref count. Otherwise the connection will be\n-     * committed and then closed. \n-     */\n-    protected void closeConnection(Connection conn) {\n-        if (conn == null)\n-            return;\n-        if (type == TYPE_TRANSACTIONAL || type == TYPE_CONTIGUOUS) {\n-            // The seq is part of the business transaction however we need\n-            // to decrement the ref count so that the connection may be \n-            // closed appropriately.\n-            \ttry { \n-            \t\tconn.close();\n-            \t}\n-            \tcatch(SQLException se) { \n-            \t\tthrow SQLExceptions.getStore(se);\n-            \t}\n-            return;\n-        }\n-        else {\n-            try {\n-                conn.commit();\n-            } catch (SQLException se) {\n-                throw SQLExceptions.getStore(se);\n-            } finally {\n-                try { conn.close(); } catch (SQLException se) {}\n-            }\n-        }\n-    }\n-    \n-    /**\n-     * Detect whether or not OpenJPA should suspend the transaction in \n-     * a managed environment.\n-     */\n-    protected boolean suspendInJTA() {\n-        return getConfiguration().isConnectionFactoryModeManaged() && \n-            getConfiguration().getConnectionFactory2() == null;\n-    }\n-}"},{"sha":"e2a7ffaeb44a33d44a98013c0d032a55c12dd8f1","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/AbstractUpdateManager.java","status":"removed","additions":0,"deletions":386,"changes":386,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/AbstractUpdateManager.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/AbstractUpdateManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/AbstractUpdateManager.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,386 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.kernel;\n-\n-import java.sql.Connection;\n-import java.sql.SQLException;\n-import java.util.BitSet;\n-import java.util.Collection;\n-import java.util.Iterator;\n-import java.util.LinkedList;\n-\n-import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n-import org.apache.openjpa.jdbc.meta.ClassMapping;\n-import org.apache.openjpa.jdbc.meta.Discriminator;\n-import org.apache.openjpa.jdbc.meta.FieldMapping;\n-import org.apache.openjpa.jdbc.meta.Strategy;\n-import org.apache.openjpa.jdbc.meta.Version;\n-import org.apache.openjpa.jdbc.sql.DBDictionary;\n-import org.apache.openjpa.jdbc.sql.RowManager;\n-import org.apache.openjpa.jdbc.sql.SQLExceptions;\n-import org.apache.openjpa.kernel.OpenJPAStateManager;\n-import org.apache.openjpa.kernel.PCState;\n-import org.apache.openjpa.lib.conf.Configurable;\n-import org.apache.openjpa.lib.conf.Configuration;\n-import org.apache.openjpa.util.ImplHelper;\n-import org.apache.openjpa.util.OpenJPAException;\n-import org.apache.openjpa.util.OptimisticException;\n-\n-/**\n- * Base update manager with common functionality.\n- *\n- * @author Abe White\n- */\n-public abstract class AbstractUpdateManager\n-    implements UpdateManager, Configurable {\n-\n-    protected JDBCConfiguration conf = null;\n-    protected DBDictionary dict = null;\n-\n-    public void setConfiguration(Configuration conf) {\n-        this.conf = (JDBCConfiguration) conf;\n-        dict = this.conf.getDBDictionaryInstance();\n-    }\n-\n-    public void startConfiguration() {\n-    }\n-\n-    public void endConfiguration() {\n-    }\n-\n-    public Collection flush(Collection states, JDBCStore store) {\n-        Connection conn = store.getConnection();\n-        try {\n-            PreparedStatementManager psMgr = newPreparedStatementManager(store,\n-                conn);\n-            return flush(states, store, psMgr);\n-        } finally {\n-            try { conn.close(); } catch (SQLException se) {}\n-        }\n-    }\n-\n-    private Collection flush(Collection states, JDBCStore store,\n-        PreparedStatementManager psMgr) {\n-        // run through all the states and update them as necessary\n-        RowManager rowMgr = newRowManager();\n-        Collection customs = new LinkedList();\n-        Collection exceps = psMgr.getExceptions();\n-        for (Iterator itr = states.iterator(); itr.hasNext();)\n-            exceps = populateRowManager((OpenJPAStateManager) itr.next(),\n-                rowMgr, store, exceps, customs);\n-\n-        // flush rows\n-        exceps = flush(rowMgr, psMgr, exceps);\n-\n-        // now do any custom mappings\n-        for (Iterator itr = customs.iterator(); itr.hasNext();) {\n-            try {\n-                ((CustomMapping) itr.next()).execute(store);\n-            } catch (SQLException se) {\n-                exceps = addException(exceps, SQLExceptions.getStore(se, dict));\n-            } catch (OpenJPAException ke) {\n-                exceps = addException(exceps, ke);\n-            }\n-        }\n-\n-        // return all exceptions\n-        return exceps;\n-    }\n-\n-    /**\n-     * Return a new {@link RowManager}.\n-     */\n-    protected abstract RowManager newRowManager();\n-\n-    /**\n-     * Return a new {@link PreparedStatementManager}.\n-     */\n-    protected abstract PreparedStatementManager newPreparedStatementManager(\n-        JDBCStore store, Connection conn);\n-\n-    /**\n-     * Flush all rows of the given row manager. Add exceptions to\n-     * <code>exceps</code> (which may start as null) using\n-     * {@link #addException}. Return <code>exceps</code>.\n-     */\n-    protected abstract Collection flush(RowManager rowMgr,\n-        PreparedStatementManager psMgr, Collection exceps);\n-\n-    /**\n-     * Populate the row manager with rows to be flushed for the given state.\n-     *\n-     * @param exceps exceptions encountered when flushing will be added to\n-     * this list and returned; the list may be null initially\n-     * @param customs buffer custom mappings\n-     * @return the exceptions list\n-     */\n-    protected Collection populateRowManager(OpenJPAStateManager sm,\n-        RowManager rowMgr, JDBCStore store, Collection exceps,\n-        Collection customs) {\n-        try {\n-            BitSet dirty;\n-            if (sm.getPCState() == PCState.PNEW && !sm.isFlushed()) {\n-                insert(sm, (ClassMapping) sm.getMetaData(), rowMgr, store,\n-                    customs);\n-            } else if (sm.getPCState() == PCState.PNEWFLUSHEDDELETED\n-                || sm.getPCState() == PCState.PDELETED) {\n-                delete(sm, (ClassMapping) sm.getMetaData(), rowMgr, store,\n-                    customs);\n-            } else if ((dirty = ImplHelper.getUpdateFields(sm)) != null) {\n-                update(sm, dirty, (ClassMapping) sm.getMetaData(), rowMgr,\n-                    store, customs, false);\n-            } else if (sm.isVersionUpdateRequired()) {\n-                updateIndicators(sm, (ClassMapping) sm.getMetaData(), rowMgr,\n-                    store, customs, true);\n-            } else if (sm.isVersionCheckRequired()) {\n-                if (!((ClassMapping) sm.getMetaData()).getVersion().\n-                    checkVersion(sm, store, false))\n-                    exceps = addException(exceps, new OptimisticException(sm.\n-                        getManagedInstance()));\n-            }\n-        } catch (SQLException se) {\n-            exceps = addException(exceps, SQLExceptions.getStore(se, dict));\n-        } catch (OpenJPAException ke) {\n-            exceps = addException(exceps, ke);\n-        }\n-        return exceps;\n-    }\n-\n-    /**\n-     * Add the given exception to the given list, which may start out as null.\n-     */\n-    protected Collection addException(Collection exceps, Exception err) {\n-        if (exceps == null)\n-            exceps = new LinkedList();\n-        exceps.add(err);\n-        return exceps;\n-    }\n-\n-    /**\n-     * Recursive method to insert the given instance, base class first.\n-     */\n-    protected void insert(OpenJPAStateManager sm, ClassMapping mapping,\n-        RowManager rowMgr, JDBCStore store, Collection customs)\n-        throws SQLException {\n-        Boolean custom = mapping.isCustomInsert(sm, store);\n-        if (!Boolean.FALSE.equals(custom))\n-            mapping.customInsert(sm, store);\n-        if (Boolean.TRUE.equals(custom))\n-            return;\n-\n-        ClassMapping sup = mapping.getJoinablePCSuperclassMapping();\n-        if (sup != null)\n-            insert(sm, sup, rowMgr, store, customs);\n-\n-        mapping.insert(sm, store, rowMgr);\n-        FieldMapping[] fields = mapping.getDefinedFieldMappings();\n-        BitSet dirty = sm.getDirty();\n-        for (int i = 0; i < fields.length; i++) {\n-            if (dirty.get(fields[i].getIndex())\n-                && !bufferCustomInsert(fields[i], sm, store, customs)) {\n-                fields[i].insert(sm, store, rowMgr);\n-            }\n-        }\n-        if (sup == null) {\n-            Version vers = mapping.getVersion();\n-            if (!bufferCustomInsert(vers, sm, store, customs))\n-                vers.insert(sm, store, rowMgr);\n-            Discriminator dsc = mapping.getDiscriminator();\n-            if (!bufferCustomInsert(dsc, sm, store, customs))\n-                dsc.insert(sm, store, rowMgr);\n-        }\n-    }\n-\n-    /**\n-     * If the given mapping uses a custom insert, places a\n-     * {@link CustomMapping} struct for it in the given collection and\n-     * returns true, else returns false.\n-     */\n-    private boolean bufferCustomInsert(Strategy strat, OpenJPAStateManager sm,\n-        JDBCStore store, Collection customs) {\n-        Boolean custom = strat.isCustomInsert(sm, store);\n-        if (!Boolean.FALSE.equals(custom))\n-            customs.add(new CustomMapping(CustomMapping.INSERT, sm, strat));\n-        return Boolean.TRUE.equals(custom);\n-    }\n-\n-    /**\n-     * Recursive method to delete the given instance, base class last.\n-     */\n-    protected void delete(OpenJPAStateManager sm, ClassMapping mapping,\n-        RowManager rowMgr, JDBCStore store, Collection customs)\n-        throws SQLException {\n-        Boolean custom = mapping.isCustomDelete(sm, store);\n-        if (!Boolean.FALSE.equals(custom))\n-            mapping.customDelete(sm, store);\n-        if (Boolean.TRUE.equals(custom))\n-            return;\n-\n-        FieldMapping[] fields = mapping.getDefinedFieldMappings();\n-        for (int i = 0; i < fields.length; i++)\n-            if (!bufferCustomDelete(fields[i], sm, store, customs))\n-                fields[i].delete(sm, store, rowMgr);\n-\n-        ClassMapping sup = mapping.getJoinablePCSuperclassMapping();\n-        if (sup == null) {\n-            Version vers = mapping.getVersion();\n-            if (!bufferCustomDelete(vers, sm, store, customs))\n-                vers.delete(sm, store, rowMgr);\n-            Discriminator dsc = mapping.getDiscriminator();\n-            if (!bufferCustomDelete(dsc, sm, store, customs))\n-                dsc.delete(sm, store, rowMgr);\n-        }\n-        mapping.delete(sm, store, rowMgr);\n-\n-        if (sup != null)\n-            delete(sm, sup, rowMgr, store, customs);\n-    }\n-\n-    /**\n-     * @see #bufferCustomInsert\n-     */\n-    private boolean bufferCustomDelete(Strategy strat, OpenJPAStateManager sm,\n-        JDBCStore store, Collection customs) {\n-        Boolean custom = strat.isCustomDelete(sm, store);\n-        if (!Boolean.FALSE.equals(custom))\n-            customs.add(new CustomMapping(CustomMapping.DELETE, sm, strat));\n-        return Boolean.TRUE.equals(custom);\n-    }\n-\n-    /**\n-     * Recursive method to update the given instance.\n-     */\n-    protected void update(OpenJPAStateManager sm, BitSet dirty,\n-        ClassMapping mapping, RowManager rowMgr, JDBCStore store,\n-        Collection customs, boolean updateIndicators) throws SQLException {\n-        Boolean custom = mapping.isCustomUpdate(sm, store);\n-        if (!Boolean.FALSE.equals(custom))\n-            mapping.customUpdate(sm, store);\n-        if (Boolean.TRUE.equals(custom))\n-            return;\n-\n-        // update all fields before all mappings so that the mappings can\n-        // detect whether any fields in their rows have been modified\n-        FieldMapping[] fields = mapping.getDefinedFieldMappings();\n-        for (int i = 0; i < fields.length; i++) {\n-            FieldMapping field = fields[i];\n-            if (dirty.get(field.getIndex())\n-                && !bufferCustomUpdate(field, sm, store, customs)) {\n-                field.update(sm, store, rowMgr);\n-                if (!updateIndicators) {\n-                    FieldMapping[] inverseFieldMappings =\n-                        field.getInverseMappings();\n-                    if (inverseFieldMappings.length == 0) {\n-                        updateIndicators = true;\n-                    }\n-                    else {\n-                        for (FieldMapping inverseFieldMapping :\n-                            inverseFieldMappings) {\n-                            if (inverseFieldMapping.getMappedBy() != null) {\n-                                updateIndicators = true;\n-                                break;\n-                            }\n-                        }\n-                    }\n-                }\n-            }\n-        }\n-\n-        ClassMapping sup = mapping.getJoinablePCSuperclassMapping();\n-        if (sup == null) {\n-            if (updateIndicators) {\n-                updateIndicators(sm, mapping, rowMgr, store, customs, false);\n-            }\n-        }\n-        else\n-            update(sm, dirty, sup, rowMgr, store, customs, updateIndicators);\n-\n-        mapping.update(sm, store, rowMgr);\n-    }\n-\n-    /**\n-     * Update version and discriminator indicators.\n-     */\n-    protected void updateIndicators(OpenJPAStateManager sm, ClassMapping mapping,\n-        RowManager rowMgr, JDBCStore store, Collection customs,\n-        boolean versionUpdateOnly) throws SQLException {\n-        while (mapping.getJoinablePCSuperclassMapping() != null)\n-            mapping = mapping.getJoinablePCSuperclassMapping();\n-\n-        Version vers = mapping.getVersion();\n-        if (!bufferCustomUpdate(vers, sm, store, customs))\n-            vers.update(sm, store, rowMgr);\n-\n-        if (versionUpdateOnly) {\n-            // if we are only updating the version column, we need to add\n-            // in the primary key select\n-            mapping.update(sm, store, rowMgr);\n-        } else {\n-            // otherwise we need to make sure we update the discriminator too\n-            Discriminator dsc = mapping.getDiscriminator();\n-            if (!bufferCustomUpdate(dsc, sm, store, customs))\n-                dsc.update(sm, store, rowMgr);\n-        }\n-    }\n-\n-    /**\n-     * @see #bufferCustomInsert\n-     */\n-    private boolean bufferCustomUpdate(Strategy strat, OpenJPAStateManager sm,\n-        JDBCStore store, Collection customs) {\n-        Boolean custom = strat.isCustomUpdate(sm, store);\n-        if (!Boolean.FALSE.equals(custom))\n-            customs.add(new CustomMapping(CustomMapping.UPDATE, sm, strat));\n-        return Boolean.TRUE.equals(custom);\n-    }\n-\n-    /**\n-     * Executes customized mapping updates.\n-     */\n-    protected static class CustomMapping {\n-\n-        public static final int INSERT = 0;\n-        public static final int UPDATE = 1;\n-        public static final int DELETE = 3;\n-\n-        private final int _action;\n-        private final OpenJPAStateManager _sm;\n-        private final Strategy _strat;\n-\n-        public CustomMapping(int action, OpenJPAStateManager sm, Strategy strat) {\n-            _action = action;\n-            _sm = sm;\n-            _strat = strat;\n-        }\n-\n-        public void execute(JDBCStore store) throws SQLException {\n-            switch (_action) {\n-            case INSERT:\n-                _strat.customInsert(_sm, store);\n-                break;\n-            case UPDATE:\n-                _strat.customUpdate(_sm, store);\n-                break;\n-            case DELETE:\n-                _strat.customDelete(_sm, store);\n-                break;\n-            }\n-        }\n-    }\n-}"},{"sha":"21ecdd1ac815fc6d5618a7d86d0e9cc55a3c87a5","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/BatchingConstraintUpdateManager.java","status":"removed","additions":0,"deletions":72,"changes":72,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/BatchingConstraintUpdateManager.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/BatchingConstraintUpdateManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/BatchingConstraintUpdateManager.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,72 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.kernel;\n-\n-import java.sql.Connection;\n-import java.sql.SQLException;\n-import java.util.Collection;\n-\n-import org.apache.openjpa.jdbc.sql.RowManager;\n-import org.apache.openjpa.jdbc.sql.SQLExceptions;\n-import org.apache.openjpa.util.OpenJPAException;\n-\n-/**\n- * <P>Batch update manager that writes the SQL in object-level operation order. \n- * This update manager initiates a BatchPreparedStatementManagerImpl which \n- * will utilize the JDBC addBatch() and executeBatch() APIs to batch the \n- * statements for performance improvement.</P>\n- * <P>This is the default plug-in class for UpdateManager to support statement \n- * batching. You can plug-in your own statement batch implementation through \n- * the following property: \n- * <PRE>\n- *   < property name=\"openjpa.jdbc.UpdateManager\" \n- *     value=\"org.apache.openjpa.jdbc.kernel.YourOperationOrderUpdateManager\" />   \n- * </PRE></P>\n- * @author Teresa Kan\n- */\n-\n-public class BatchingConstraintUpdateManager extends ConstraintUpdateManager {\n-\n-    protected PreparedStatementManager newPreparedStatementManager(\n-        JDBCStore store, Connection conn) {\n-        int batchLimit = dict.getBatchLimit();\n-        return new BatchingPreparedStatementManagerImpl(store, conn,\n-            batchLimit);\n-    }\n-\n-    /*\n-     * Override this method to flush any remaining batched row in the\n-     * PreparedStatementManager.\n-     */\n-    protected Collection flush(RowManager rowMgr,\n-        PreparedStatementManager psMgr, Collection exceps) {\n-        exceps = super.flush(rowMgr, psMgr, exceps);\n-        BatchingPreparedStatementManagerImpl bPsMgr =\n-            (BatchingPreparedStatementManagerImpl) psMgr;\n-        try {\n-            bPsMgr.flushBatch();\n-        } catch (SQLException se) {\n-            exceps = addException(exceps, SQLExceptions.getStore(se, dict));\n-        } catch (OpenJPAException ke) {\n-            exceps = addException(exceps, ke);\n-        }\n-\n-        return exceps;\n-    }\n-}"},{"sha":"11364981ac6f6aff2a34e83bfd1c046a068abdea","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/BatchingOperationOrderUpdateManager.java","status":"removed","additions":0,"deletions":74,"changes":74,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/BatchingOperationOrderUpdateManager.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/BatchingOperationOrderUpdateManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/BatchingOperationOrderUpdateManager.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,74 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.kernel;\n-\n-import java.sql.Connection;\n-import java.sql.SQLException;\n-import java.util.Collection;\n-\n-import org.apache.openjpa.jdbc.sql.RowManager;\n-import org.apache.openjpa.jdbc.sql.SQLExceptions;\n-import org.apache.openjpa.util.OpenJPAException;\n-\n-/**\n- * <P>Batch update manager that writes the SQL in object-level operation order. \n- * This update manager initiates a BatchPreparedStatementManagerImpl which \n- * will utilize the JDBC addBatch() and executeBatch() APIs to batch the \n- * statements for performance improvement.</P>\n- * <P>This is the plug-in class for UpdateManager to support statement \n- * batching for ordering. You can plug-in this statement batch implementation \n- * through the following property: \n- * <PRE>\n- * < property name=\"openjpa.jdbc.UpdateManager\" \n- *   value=\"org.apache.openjpa.jdbc.kernel.BatchingOperationOrderUpdateManager\"\n- *    />   \n- * </PRE></P>\n- * @author Teresa Kan\n- */\n-\n-public class BatchingOperationOrderUpdateManager extends\n-    OperationOrderUpdateManager {\n-\n-    protected PreparedStatementManager newPreparedStatementManager(\n-        JDBCStore store, Connection conn) {\n-        int batchLimit = dict.getBatchLimit();\n-        return new BatchingPreparedStatementManagerImpl(store, conn,\n-            batchLimit);\n-    }\n-    \n-    /*\n-     * Override this method to flush any remaining batched row in the\n-     * PreparedStatementManager.\n-     */\n-    protected Collection flush(RowManager rowMgr,\n-        PreparedStatementManager psMgr, Collection exceps) {\n-        exceps = super.flush(rowMgr, psMgr, exceps);\n-        BatchingPreparedStatementManagerImpl bPsMgr = \n-            (BatchingPreparedStatementManagerImpl) psMgr;\n-        try {\n-            bPsMgr.flushBatch();\n-        } catch (SQLException se) {\n-            exceps = addException(exceps, SQLExceptions.getStore(se, dict));\n-        } catch (OpenJPAException ke) {\n-            exceps = addException(exceps, ke);\n-        }\n-\n-        return exceps;\n-    }\n-}"},{"sha":"ba25c0d8de89f44f9a1bcd6b8a84756926e95a4b","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/BatchingPreparedStatementManagerImpl.java","status":"removed","additions":0,"deletions":327,"changes":327,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/BatchingPreparedStatementManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/BatchingPreparedStatementManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/BatchingPreparedStatementManagerImpl.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,327 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.kernel;\n-\n-import java.sql.Connection;\n-import java.sql.PreparedStatement;\n-import java.sql.Statement;\n-import java.sql.SQLException;\n-import java.util.ArrayList;\n-import java.util.Iterator;\n-import java.util.List;\n-\n-import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n-import org.apache.openjpa.jdbc.meta.ClassMapping;\n-import org.apache.openjpa.jdbc.schema.Column;\n-import org.apache.openjpa.jdbc.sql.Row;\n-import org.apache.openjpa.jdbc.sql.RowImpl;\n-import org.apache.openjpa.jdbc.sql.SQLExceptions;\n-import org.apache.openjpa.kernel.OpenJPAStateManager;\n-import org.apache.openjpa.lib.log.Log;\n-import org.apache.openjpa.lib.util.Localizer;\n-import org.apache.openjpa.util.OptimisticException;\n-\n-/**\n- * Batch prepared statement manager implementation. This prepared statement\n- * manager will utilize the JDBC addBatch() and exceuteBatch() to batch the SQL\n- * statements together to improve the execution performance.\n- * \n- * @author Teresa Kan\n- */\n-\n-public class BatchingPreparedStatementManagerImpl extends\n-        PreparedStatementManagerImpl {\n-\n-    private final static Localizer _loc = Localizer\n-            .forPackage(BatchingPreparedStatementManagerImpl.class);\n-\n-    private String _batchedSql = null;\n-    private List _batchedRows = new ArrayList();\n-    private int _batchLimit;\n-    private boolean _disableBatch = false;\n-    private transient Log _log = null;\n-\n-    /**\n-     * Constructor. Supply connection.\n-     */\n-    public BatchingPreparedStatementManagerImpl(JDBCStore store,\n-        Connection conn, int batchLimit) {\n-        super(store, conn);\n-        _batchLimit = batchLimit;\n-        _log = store.getConfiguration().getLog(JDBCConfiguration.LOG_JDBC);\n-        if (_log.isTraceEnabled())\n-            _log.trace(_loc.get(\"batch_limit\", String.valueOf(_batchLimit)));\n-    }\n-\n-    /**\n-     * Flush the given row immediately or deferred the flush in batch.\n-     */\n-    protected void flushAndUpdate(RowImpl row) throws SQLException {\n-        if (isBatchDisabled(row)) {\n-            // if there were some statements batched before, then\n-            // we need to flush them out first before processing the\n-            // current non batch process.\n-            flushBatch();\n-\n-            super.flushAndUpdate(row);\n-        } else {\n-            // process the SQL statement, either execute it immediately or\n-            // batch it for later execution.\n-            batchOrExecuteRow(row);\n-        }\n-    }\n-\n-    protected void batchOrExecuteRow(RowImpl row) throws SQLException {\n-        String sql = row.getSQL(_dict);\n-        if (_batchedSql == null) {\n-            // brand new SQL\n-            _batchedSql = sql;\n-        } else if (!sql.equals(_batchedSql)) {\n-            // SQL statements changed.\n-            switch (_batchedRows.size()) {\n-            case 0:\n-                break;\n-            case 1:\n-                // single entry in cache, direct SQL execution. \n-                super.flushAndUpdate((RowImpl) _batchedRows.get(0));\n-                _batchedRows.clear();\n-                break;\n-            default:\n-                // flush all entries in cache in batch.\n-                flushBatch();\n-            }\n-            _batchedSql = sql;\n-        }\n-        _batchedRows.add(row);\n-    }\n-\n-    /*\n-     * Compute if batching is disabled, based on values of batch limit\n-     * and database characteristics.\n-     */\n-    private boolean isBatchDisabled(RowImpl row) {\n-        boolean rtnVal = true;\n-        int limit = getBatchLimit();\n-        if ((limit < 0 || limit > 1) && !isBatchDisabled()) {\n-            OpenJPAStateManager sm = row.getPrimaryKey();\n-            ClassMapping cmd = null;\n-            if (sm != null)\n-                cmd = (ClassMapping) sm.getMetaData();\n-            Column[] autoAssign = null;\n-            if (row.getAction() == Row.ACTION_INSERT)\n-                autoAssign = row.getTable().getAutoAssignedColumns();\n-            // validate batch capability\n-            rtnVal = _dict\n-                .validateBatchProcess(row, autoAssign, sm, cmd);\n-            setBatchDisabled(rtnVal);\n-        }\n-        return rtnVal;\n-    }\n-    \n-    /**\n-     * flush all cached up statements to be executed as a single or batched\n-     * prepared statements.\n-     */\n-    protected void flushBatch() throws SQLException {\n-        List batchedRows = getBatchedRows();\n-        String batchedSql = getBatchedSql();\n-        if (batchedRows == null)\n-            return;\n-\n-        int batchSize = batchedRows.size();\n-        if (batchedSql != null &&  batchSize > 0) {\n-            PreparedStatement ps = null;\n-            try {\n-                RowImpl onerow = null;\n-                ps = prepareStatement(batchedSql);\n-                if (batchSize == 1) {\n-                    // execute a single row.\n-                    onerow = (RowImpl) batchedRows.get(0);\n-                    flushSingleRow(onerow, ps);\n-                } else {\n-                    // cache has more than one rows, execute as batch.\n-                    int count = 0;\n-                    int batchedRowsBaseIndex = 0;\n-                    Iterator itr = batchedRows.iterator();\n-                    while (itr.hasNext()) {\n-                        onerow = (RowImpl) itr.next();\n-                        if (_batchLimit == 1) {\n-                            flushSingleRow(onerow, ps);\n-                        } else {\n-                            if (count < _batchLimit || _batchLimit == -1) {\n-                                if (ps != null)\n-                                    onerow.flush(ps, _dict, _store);\n-                                addBatch(ps, onerow, count);\n-                                count++;\n-                            } else {\n-                                // reach the batchLimit, execute the batch\n-                                int[] rtn = executeBatch(ps);\n-                                checkUpdateCount(rtn, batchedRowsBaseIndex, ps);\n-\n-                                batchedRowsBaseIndex += _batchLimit;\n-\n-                                if (ps != null)\n-                                    onerow.flush(ps, _dict, _store);\n-                                addBatch(ps, onerow, count);\n-                                // reset the count to 1 for new batch\n-                                count = 1;\n-                            }\n-                        }\n-                    }\n-                    // end of the loop, execute the batch\n-                    int[] rtn = executeBatch(ps);\n-                    checkUpdateCount(rtn, batchedRowsBaseIndex, ps);\n-                }\n-            } catch (SQLException se) {\n-                SQLException sqex = se.getNextException();\n-                if (sqex == null)\n-                    sqex = se;\n-                throw SQLExceptions.getStore(sqex, ps, _dict);\n-            } finally {\n-                _batchedSql = null;\n-                batchedRows.clear();\n-                if (ps != null) {\n-                    try {\n-                        ps.close();\n-                    } catch (SQLException sqex) {\n-                        throw SQLExceptions.getStore(sqex, ps, _dict);\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n-    /*\n-     * Execute an update of a single row.\n-     */\n-    private void flushSingleRow(RowImpl row, PreparedStatement ps)\n-        throws SQLException {\n-        if (ps != null)\n-            row.flush(ps, _dict, _store);\n-        int count = executeUpdate(ps, row.getSQL(_dict), row);\n-        if (count != 1) {\n-            Object failed = row.getFailedObject();\n-            if (failed != null)\n-                _exceptions.add(new OptimisticException(failed));\n-            else if (row.getAction() == Row.ACTION_INSERT)\n-                throw new SQLException(_loc.get(\"update-failed-no-failed-obj\",\n-                    String.valueOf(count), row.getSQL(_dict)).getMessage());\n-        }\n-    }\n-\n-    /*\n-     * Process executeBatch function array of return counts.\n-     */\n-    private void checkUpdateCount(int[] count, int batchedRowsBaseIndex,\n-        PreparedStatement ps)\n-        throws SQLException {\n-        // value in int[] count  returned from executeBatch: \n-        //               Update          Delete        Insert\n-        // ===============================================================\n-        //               OK / Error      OK / Error    OK / Error\n-        // DB2LUW         1 / 0           1 / 0         1 / SQLException\n-        // DB2/ZOS        1 / 0           1 / 0        -2 / SQLException\n-        // Oracle        -2 / -2         -2 / -2       -2 / SQLException\n-        int cnt = 0;\n-        int updateSuccessCnt = _dict.getBatchUpdateCount(ps);\n-        Object failed = null;\n-        List batchedRows = getBatchedRows();\n-        for (int i = 0; i < count.length; i++) {\n-            cnt = count[i];\n-            RowImpl row = (RowImpl) batchedRows.get(batchedRowsBaseIndex + i);\n-            failed = row.getFailedObject();\n-            switch (cnt) {\n-            case Statement.EXECUTE_FAILED: // -3\n-                if (failed != null || row.getAction() == Row.ACTION_UPDATE)\n-                    _exceptions.add(new OptimisticException(failed));\n-                else if (row.getAction() == Row.ACTION_INSERT)\n-                    throw new SQLException(_loc.get(\n-                        \"update-failed-no-failed-obj\",\n-                        String.valueOf(count[i]), \n-                        row.getSQL(_dict)).getMessage());\n-                break;\n-            case Statement.SUCCESS_NO_INFO: // -2\n-                if (_dict.reportsSuccessNoInfoOnBatchUpdates &&                    \n-                    updateSuccessCnt != count.length) {\n-                    // Oracle batching specifics:\n-                    // treat update/delete of SUCCESS_NO_INFO as failed case\n-                    // because:\n-                    // 1. transaction should be rolled back.\n-                    // 2. if DataCache is enabled, objects in\n-                    //    cache should be removed.\n-                    if (failed != null)\n-                        _exceptions.add(new OptimisticException(failed));\n-                    else if (row.getAction() == Row.ACTION_INSERT)\n-                        throw new SQLException(_loc.get(\n-                            \"update-failed-no-failed-obj\",\n-                            String.valueOf(count[i]), \n-                            row.getSQL(_dict)).getMessage());\n-                }\n-                if (_log.isTraceEnabled())\n-                    _log.trace(_loc.get(\"batch_update_info\",\n-                        String.valueOf(cnt), \n-                        row.getSQL(_dict)).getMessage());\n-                break;\n-            case 0: // no row is inserted, treats it as failed\n-                // case\n-                if (failed != null)\n-                    _exceptions.add(new OptimisticException(failed));\n-                else if (row.getAction() == Row.ACTION_INSERT)\n-                    throw new SQLException(_loc.get(\n-                        \"update-failed-no-failed-obj\",\n-                        String.valueOf(count[i]), \n-                        row.getSQL(_dict)).getMessage());\n-            }\n-        }\n-    }\n-\n-    public boolean isBatchDisabled() {\n-        return _disableBatch;\n-    }\n-\n-    public void setBatchDisabled(boolean disableBatch) {\n-        _disableBatch = disableBatch;\n-    }\n-\n-    public int getBatchLimit() {\n-        return _batchLimit;\n-    }\n-\n-    public void setBatchLimit(int batchLimit) {\n-        _batchLimit = batchLimit;\n-    }\n-\n-    public List getBatchedRows() {\n-        return _batchedRows;\n-    }\n-\n-    public String getBatchedSql() {\n-        return _batchedSql;\n-    }\n-\n-    protected void addBatch(PreparedStatement ps, RowImpl row, \n-            int count) throws SQLException {\n-        ps.addBatch();\n-    }\n-\n-    protected int[] executeBatch(PreparedStatement ps) \n-    throws SQLException {\n-        return ps.executeBatch();\n-    }\n-}"},{"sha":"00533d390daebc9b8922f4573668c065633849ce","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/ClassTableJDBCSeq.java","status":"removed","additions":0,"deletions":265,"changes":265,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/ClassTableJDBCSeq.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/ClassTableJDBCSeq.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/ClassTableJDBCSeq.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,265 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.kernel;\n-\n-import java.sql.Connection;\n-import java.sql.SQLException;\n-import java.sql.Types;\n-import java.util.HashMap;\n-import java.util.Map;\n-\n-import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n-import org.apache.openjpa.jdbc.conf.JDBCConfigurationImpl;\n-import org.apache.openjpa.jdbc.meta.ClassMapping;\n-import org.apache.openjpa.jdbc.meta.MappingRepository;\n-import org.apache.openjpa.jdbc.schema.Column;\n-import org.apache.openjpa.jdbc.schema.Table;\n-import org.apache.openjpa.jdbc.sql.DBDictionary;\n-import org.apache.openjpa.lib.conf.Configurations;\n-import org.apache.openjpa.lib.meta.ClassArgParser;\n-import org.apache.openjpa.lib.util.Localizer;\n-import org.apache.openjpa.lib.util.Options;\n-import org.apache.openjpa.meta.JavaTypes;\n-\n-/**\n- * Specialization of the {@link TableJDBCSeq} that maintains a\n- * separate sequence count per-class. Table name defaults to\n- * <code>OPENJPA_SEQUENCES_TABLE</code>.\n- *\n- * @author Abe White\n- */\n-public class ClassTableJDBCSeq \n-    extends TableJDBCSeq {\n-\n-    private static final Localizer _loc = Localizer.forPackage\n-        (ClassTableJDBCSeq.class);\n-\n-    private final Map _stats = new HashMap();\n-    private boolean _ignore = false;\n-    private boolean _aliases = false;\n-\n-    public ClassTableJDBCSeq() {\n-        setTable(\"OPENJPA_SEQUENCES_TABLE\");\n-    }\n-\n-    /**\n-     * Whether unmapped classes should be ignored as possible primary\n-     * key values in the table. Defaults to false.\n-     */\n-    public boolean getIgnoreUnmapped() {\n-        return _ignore;\n-    }\n-\n-    /**\n-     * Whether unmapped classes should be ignored as possible primary\n-     * key values in the table. Defaults to false.\n-     */\n-    public void setIgnoreUnmapped(boolean ignore) {\n-        _ignore = ignore;\n-    }\n-\n-    /**\n-     * @deprecated Use {@link #setIgnoreUnmapped}. Retained for\n-     * backwards-compatibility for auto-configuration.\n-     */\n-    public void setIgnoreVirtual(boolean ignore) {\n-        setIgnoreUnmapped(ignore);\n-    }\n-\n-    /**\n-     * Whether to use type alises for primary key values in place of class\n-     * names. Defaults to false.\n-     */\n-    public boolean getUseAliases() {\n-        return _aliases;\n-    }\n-\n-    /**\n-     * Whether to use type alises for primary key values in place of class\n-     * names. Defaults to false.\n-     */\n-    public void setUseAliases(boolean aliases) {\n-        _aliases = aliases;\n-    }\n-\n-    protected synchronized Status getStatus(ClassMapping mapping) {\n-        if (mapping == null)\n-            return null;\n-        String key = getKey(mapping, false);\n-        Status stat = (Status) _stats.get(key);\n-        if (stat == null) {\n-            stat = new Status();\n-            _stats.put(key, stat);\n-        }\n-        return stat;\n-    }\n-\n-    protected Column addPrimaryKeyColumn(Table table) {\n-        DBDictionary dict = getConfiguration().getDBDictionaryInstance();\n-        Column pkColumn = table.addColumn(dict.getValidColumnName(\n-            getPrimaryKeyColumn(), table));\n-        pkColumn.setType(dict.getPreferredType(Types.VARCHAR));\n-        pkColumn.setJavaType(JavaTypes.STRING);\n-        pkColumn.setSize(dict.characterColumnSize);\n-        return pkColumn;\n-    }\n-\n-    protected Object getPrimaryKey(ClassMapping mapping) {\n-        if (mapping == null)\n-            return null;\n-        return getKey(mapping, true);\n-    }\n-\n-    private String getKey(ClassMapping mapping, boolean db) {\n-        if (_ignore) {\n-            while (mapping.getMappedPCSuperclassMapping() != null)\n-                mapping = mapping.getMappedPCSuperclassMapping();\n-        } else {\n-            while (mapping.getPCSuperclass() != null)\n-                mapping = mapping.getPCSuperclassMapping();\n-        }\n-        if (_aliases)\n-            return mapping.getTypeAlias();\n-        return mapping.getDescribedType().getName();\n-    }\n-\n-    /////////\n-    // Main\n-    /////////\n-\n-    /**\n-     * Usage: java org.apache.openjpa.jdbc.kernel.ClassTableJDBCSeq [option]*\n-     * -action/-a &lt;add | drop | get | set&gt;\n-     * [class name | .java file | .class file | .jdo file] [value]\n-     *  Where the following options are recognized.\n-     * <ul>\n-     * <li><i>-properties/-p &lt;properties file or resource&gt;</i>: The\n-     * path or resource name of a OpenJPA properties file containing\n-     * information such as connection data as\n-     * outlined in {@link JDBCConfiguration}. Optional.</li>\n-     * <li><i>-&lt;property name&gt; &lt;property value&gt;</i>: All bean\n-     * properties of the OpenJPA {@link JDBCConfiguration} can be set by\n-     * using their\tnames and supplying a value.</li>\n-     * </ul>\n-     *  The various actions are as follows.\n-     * <ul>\n-     * <li><i>add</i>: Create the sequence table.</li>\n-     * <li><i>drop</i>: Drop the sequence table.</li>\n-     * <li><i>get</i>: Print the current sequence value for the given\n-     * class.</li>\n-     * <li><i>set</i>: Set the sequence value for the given class.</li>\n-     * </ul>\n-     */\n-    public static void main(String[] args) throws Exception {\n-        Options opts = new Options();\n-        final String[] arguments = opts.setFromCmdLine(args);\n-        boolean ret = Configurations.runAgainstAllAnchors(opts,\n-            new Configurations.Runnable() {\n-            public boolean run(Options opts) throws Exception {\n-                JDBCConfiguration conf = new JDBCConfigurationImpl();\n-                try {\n-                    return ClassTableJDBCSeq.run(conf, arguments, opts);\n-                } finally {\n-                    conf.close();\n-                }\n-            }\n-        });\n-        if (!ret)\n-            System.out.println(_loc.get(\"clstable-seq-usage\"));\n-    }\n-\n-    /**\n-     * Run the tool. Returns false if invalid options were given.\n-     */\n-    public static boolean run(JDBCConfiguration conf, String[] args,\n-        Options opts) throws Exception {\n-        String action = opts.removeProperty(\"action\", \"a\", null);\n-        Configurations.populateConfiguration(conf, opts);\n-        return run(conf, args, action, null, null);\n-    }\n-\n-    /**\n-     * Run the tool. Return false if an invalid option was given.\n-     */\n-    public static boolean run(JDBCConfiguration conf, String[] args,\n-        String action, MappingRepository repos, ClassLoader loader)\n-        throws Exception {\n-        ClassTableJDBCSeq seq = new ClassTableJDBCSeq();\n-        String props = Configurations.getProperties(conf.getSequence());\n-        Configurations.configureInstance(seq, conf, props);\n-\n-        if (ACTION_DROP.equals(action)) {\n-            if (args.length != 0)\n-                return false;\n-            seq.dropTable();\n-        } else if (ACTION_ADD.equals(action)) {\n-            if (args.length != 0)\n-                return false;\n-            seq.refreshTable();\n-        } else if (ACTION_GET.equals(action) || ACTION_SET.equals(action)) {\n-            if (args.length == 0)\n-                return false;\n-\n-            if (loader == null)\n-                loader = conf.getClassResolverInstance().getClassLoader(\n-                    ClassTableJDBCSeq.class, null);\n-\n-            ClassArgParser cap = conf.getMetaDataRepositoryInstance()\n-                .getMetaDataFactory().newClassArgParser();\n-            cap.setClassLoader(loader);\n-            Class cls = cap.parseTypes(args[0])[0];\n-\n-            if (repos == null)\n-                repos = conf.getMappingRepositoryInstance();\n-            ClassMapping mapping = repos.getMapping(cls, null, true);\n-\n-            Connection conn = conf.getDataSource2(null).getConnection();\n-            try {\n-                long cur = seq.getSequence(mapping, conn);\n-                if (ACTION_GET.equals(action))\n-                    System.out.println(mapping + \": \" + cur);\n-                else {\n-                    long set;\n-                    if (args.length > 1)\n-                        set = Long.parseLong(args[1]);\n-                    else\n-                        set = cur + seq.getAllocate();\n-                    if (set < cur)\n-                        set = cur;\n-                    else {\n-                        Status stat = seq.getStatus(mapping);\n-                        seq.setSequence(null, stat, (int) (set - cur), true,\n-                            conn);\n-                        set = stat.seq;\n-                    }\n-                    System.err.println(mapping + \": \" + set);\n-                }\n-            } catch (NumberFormatException nfe) {\n-                return false;\n-            } finally {\n-                try {\n-                    conn.close();\n-                } catch (SQLException se) {\n-                }\n-            }\n-        } else\n-            return false;\n-        return true;\n-    }\n-}"},{"sha":"45bce30f038925d7ca89e19e60fafc38d7fc399c","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/ConnectionInfo.java","status":"removed","additions":0,"deletions":35,"changes":35,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/ConnectionInfo.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/ConnectionInfo.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/ConnectionInfo.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,35 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.kernel;\n-\n-import org.apache.openjpa.jdbc.meta.ClassMapping;\n-import org.apache.openjpa.jdbc.sql.Result;\n-import org.apache.openjpa.kernel.OpenJPAStateManager;\n-\n-/**\n- * Struct to hold data about the current connection state.\n- *\n- * @author Abe White\n- */\n-public class ConnectionInfo {\n-\n-    public Result result = null;\n-    public OpenJPAStateManager sm = null;\n-    public ClassMapping mapping = null;\n-}"},{"sha":"8b869da049997eac79a3af7d1a1703023bcd3bf6","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/ConstraintUpdateManager.java","status":"removed","additions":0,"deletions":546,"changes":546,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/ConstraintUpdateManager.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/ConstraintUpdateManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/ConstraintUpdateManager.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,546 +0,0 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.jdbc.kernel;\r\n-\r\n-import java.sql.Connection;\r\n-import java.sql.SQLException;\r\n-import java.util.Collection;\r\n-import java.util.HashMap;\r\n-import java.util.Iterator;\r\n-import java.util.LinkedList;\r\n-import java.util.List;\r\n-import java.util.Map;\r\n-\r\n-import org.apache.openjpa.jdbc.meta.ClassMapping;\r\n-import org.apache.openjpa.jdbc.schema.Column;\r\n-import org.apache.openjpa.jdbc.schema.ForeignKey;\r\n-import org.apache.openjpa.jdbc.schema.Table;\r\n-import org.apache.openjpa.jdbc.sql.PrimaryRow;\r\n-import org.apache.openjpa.jdbc.sql.Row;\r\n-import org.apache.openjpa.jdbc.sql.RowImpl;\r\n-import org.apache.openjpa.jdbc.sql.RowManager;\r\n-import org.apache.openjpa.jdbc.sql.RowManagerImpl;\r\n-import org.apache.openjpa.jdbc.sql.SQLExceptions;\r\n-import org.apache.openjpa.kernel.OpenJPAStateManager;\r\n-import org.apache.openjpa.lib.graph.DepthFirstAnalysis;\r\n-import org.apache.openjpa.lib.graph.Edge;\r\n-import org.apache.openjpa.lib.graph.Graph;\r\n-import org.apache.openjpa.lib.util.Localizer;\r\n-import org.apache.openjpa.util.InternalException;\r\n-import org.apache.openjpa.util.OpenJPAException;\r\n-import org.apache.openjpa.util.UserException;\r\n-\r\n-/**\r\n- * <p>Standard update manager, capable of foreign key constraint evaluation.</p>\r\n- *\r\n- * @since 1.0.0\r\n- */\r\n-public class ConstraintUpdateManager\r\n-    extends AbstractUpdateManager {\r\n-\r\n-    private static final Localizer _loc = Localizer.forPackage\r\n-        (ConstraintUpdateManager.class);\r\n-\r\n-    public boolean orderDirty() {\r\n-        return true;\r\n-    }\r\n-\r\n-    protected PreparedStatementManager newPreparedStatementManager\r\n-        (JDBCStore store, Connection conn) {\r\n-        return new PreparedStatementManagerImpl(store, conn);\r\n-    }\r\n-\r\n-    protected RowManager newRowManager() {\r\n-        return new RowManagerImpl(false);\r\n-    }\r\n-\r\n-    protected Collection flush(RowManager rowMgr,\r\n-        PreparedStatementManager psMgr, Collection exceps) {\r\n-        RowManagerImpl rmimpl = (RowManagerImpl) rowMgr;\r\n-\r\n-        // first take care of all secondary table deletes and 'all row' deletes\r\n-        // (which are probably secondary table deletes), since no foreign\r\n-        // keys ever rely on secondary table pks\r\n-        flush(rmimpl.getAllRowDeletes(), psMgr);\r\n-        flush(rmimpl.getSecondaryDeletes(), psMgr);\r\n-\r\n-        // now do any 'all row' updates\r\n-        flush(rmimpl.getAllRowUpdates(), psMgr);\r\n-\r\n-        // analyze foreign keys\r\n-        Collection inserts = rmimpl.getInserts();\r\n-        Collection updates = rmimpl.getUpdates();\r\n-        Collection deletes = rmimpl.getDeletes();\r\n-        Graph[] graphs = new Graph[2];    // insert graph, delete graph\r\n-        analyzeForeignKeys(inserts, updates, deletes, rmimpl, graphs);\r\n-\r\n-        // flush insert graph, if any\r\n-        boolean autoAssign = rmimpl.hasAutoAssignConstraints();\r\n-        try {\r\n-            flushGraph(graphs[0], psMgr, autoAssign);\r\n-        } catch (SQLException se) {\r\n-            exceps = addException(exceps, SQLExceptions.getStore(se, dict));\r\n-        } catch (OpenJPAException ke) {\r\n-            exceps = addException(exceps, ke);\r\n-        }\r\n-\r\n-        // flush the rest of the inserts and updates; inserts before updates\r\n-        // because some update fks might reference pks that have to be inserted\r\n-        flush(inserts, psMgr);\r\n-        flush(updates, psMgr);\r\n-\r\n-        // flush the delete graph, if any\r\n-        try {\r\n-            flushGraph(graphs[1], psMgr, autoAssign);\r\n-        } catch (SQLException se) {\r\n-            exceps = addException(exceps, SQLExceptions.getStore(se, dict));\r\n-        } catch (OpenJPAException ke) {\r\n-            exceps = addException(exceps, ke);\r\n-        }\r\n-\r\n-        // put the remainder of the deletes after updates because some updates\r\n-        // may be nulling fks to rows that are going to be deleted\r\n-        flush(deletes, psMgr);\r\n-\r\n-        // take care of all secondary table inserts and updates last, since\r\n-        // they may rely on previous inserts or updates, but nothing relies\r\n-        // on them\r\n-        flush(rmimpl.getSecondaryUpdates(), psMgr);\r\n-\r\n-        // flush any left over prepared statements\r\n-        psMgr.flush();\r\n-        return exceps;\r\n-    }\r\n-\r\n-    /**\r\n-     * Analyze foreign key dependencies on the given rows\r\n-     * and create an insert and a delete graph to execute.  The insert\r\n-     * graph will be flushed before all other rows, and the delete graph will\r\n-     * be flushed after them.\r\n-     */\r\n-    private void analyzeForeignKeys(Collection inserts, Collection updates,\r\n-        Collection deletes, RowManagerImpl rowMgr, Graph[] graphs) {\r\n-        // if there are any deletes, we have to map the insert objects on their\r\n-        // oids so we'll be able to detect delete-then-insert-same-pk cases\r\n-        Map insertMap = null;\r\n-        OpenJPAStateManager sm;\r\n-        if (!deletes.isEmpty() && !inserts.isEmpty()) {\r\n-            insertMap = new HashMap((int) (inserts.size() * 1.33 + 1));\r\n-            for (Iterator itr = inserts.iterator(); itr.hasNext();) {\r\n-                sm = ((Row) itr.next()).getPrimaryKey();\r\n-                if (sm != null && sm.getObjectId() != null)\r\n-                    insertMap.put(sm.getObjectId(), sm);\r\n-            }\r\n-        }\r\n-\r\n-        // first construct the graph for deletes; this may expand to include\r\n-        // inserts and updates as well if there are any inserts that rely on\r\n-        // deletes (delete-then-insert-same-pk cases)\r\n-        PrimaryRow row;\r\n-        Row row2;\r\n-        ForeignKey[] fks;\r\n-        OpenJPAStateManager fkVal;\r\n-        boolean ignoreUpdates = true;\r\n-        for (Iterator itr = deletes.iterator(); itr.hasNext();) {\r\n-            row = (PrimaryRow) itr.next();\r\n-            if (!row.isValid())\r\n-                continue;\r\n-\r\n-            row2 = getInsertRow(insertMap, rowMgr, row);\r\n-            if (row2 != null) {\r\n-                ignoreUpdates = false;\r\n-                graphs[1] = addEdge(graphs[1], (PrimaryRow) row2, row, null);\r\n-            }\r\n-\r\n-            // now check this row's fks against other deletes\r\n-            fks = row.getTable().getForeignKeys();\r\n-            for (int j = 0; j < fks.length; j++) {\r\n-                // when deleting ref fks they'll just set a where value, so\r\n-                // check both for fk updates (relation fks) and wheres (ref fks)\r\n-                fkVal = row.getForeignKeySet(fks[j]);\r\n-                if (fkVal == null)\r\n-                    fkVal = row.getForeignKeyWhere(fks[j]);\r\n-                if (fkVal == null)\r\n-                    continue;\r\n-\r\n-                row2 = rowMgr.getRow(fks[j].getPrimaryKeyTable(),\r\n-                    Row.ACTION_DELETE, fkVal, false);\r\n-                if (row2 != null && row2.isValid() && row2 != row)\r\n-                    graphs[1] = addEdge(graphs[1], (PrimaryRow) row2, row,\r\n-                        fks[j]);\r\n-            }\r\n-        }\r\n-\r\n-        if (ignoreUpdates)\r\n-            graphs[0] = analyzeAgainstInserts(inserts, rowMgr, graphs[0]);\r\n-        else {\r\n-            // put inserts *and updates* in the delete graph; they all rely\r\n-            // on each other\r\n-            graphs[1] = analyzeAgainstInserts(updates, rowMgr, graphs[1]);\r\n-            graphs[1] = analyzeAgainstInserts(inserts, rowMgr, graphs[1]);\r\n-        }\r\n-    }\r\n-\r\n-    /**\r\n-     * Check to see if there is an insert for for the same table and primary\r\n-     * key values as the given delete row.\r\n-     */\r\n-    private Row getInsertRow(Map insertMap, RowManagerImpl rowMgr, Row row) {\r\n-        if (insertMap == null)\r\n-            return null;\r\n-\r\n-        OpenJPAStateManager sm = row.getPrimaryKey();\r\n-        if (sm == null)\r\n-            return null;\r\n-\r\n-        // look for a new object whose insert id is the same as this delete one\r\n-        Object oid = sm.getObjectId();\r\n-        OpenJPAStateManager nsm = (OpenJPAStateManager) insertMap.get(oid);\r\n-        if (nsm == null)\r\n-            return null;\r\n-\r\n-        // found new object; get its row\r\n-        row = rowMgr.getRow(row.getTable(), Row.ACTION_INSERT, nsm, false);\r\n-        return (row == null || row.isValid()) ? row : null;\r\n-    }\r\n-\r\n-    /**\r\n-     * Analyze the given rows against the inserts, placing dependencies\r\n-     * in the given graph.\r\n-     */\r\n-    private Graph analyzeAgainstInserts(Collection rows, RowManagerImpl rowMgr,\r\n-        Graph graph) {\r\n-        PrimaryRow row;\r\n-        Row row2;\r\n-        ForeignKey[] fks;\r\n-        Column[] cols;\r\n-        for (Iterator itr = rows.iterator(); itr.hasNext();) {\r\n-            row = (PrimaryRow) itr.next();\r\n-            if (!row.isValid())\r\n-                continue;\r\n-\r\n-            // check this row's fks against inserts; a logical fk to an auto-inc\r\n-            // column is treated just as actual database fk because the result\r\n-            // is the same: the pk row has to be inserted before the fk row\r\n-            fks = row.getTable().getForeignKeys();\r\n-            for (int j = 0; j < fks.length; j++) {\r\n-                if (row.getForeignKeySet(fks[j]) == null)\r\n-                    continue;\r\n-\r\n-                // see if this row is dependent on another.  if it's only\r\n-                // depenent on itself, see if the fk is logical or deferred, in\r\n-                // which case it must be an auto-inc because otherwise we\r\n-                // wouldn't have recorded it\r\n-                row2 = rowMgr.getRow(fks[j].getPrimaryKeyTable(),\r\n-                    Row.ACTION_INSERT, row.getForeignKeySet(fks[j]), false);\r\n-                if (row2 != null && row2.isValid() && (row2 != row\r\n-                    || fks[j].isDeferred() || fks[j].isLogical()))\r\n-                    graph = addEdge(graph, row, (PrimaryRow) row2, fks[j]);\r\n-            }\r\n-\r\n-            // see if there are any relation id columns dependent on\r\n-            // auto-inc objects\r\n-            cols = row.getTable().getRelationIdColumns();\r\n-            for (int j = 0; j < cols.length; j++) {\r\n-                OpenJPAStateManager sm = row.getRelationIdSet(cols[j]);\r\n-                if (sm == null)\r\n-                    continue;\r\n-\r\n-                row2 = rowMgr.getRow(getBaseTable(sm), Row.ACTION_INSERT,\r\n-                    sm, false);\r\n-                if (row2 != null && row2.isValid())\r\n-                    graph = addEdge(graph, row, (PrimaryRow) row2, cols[j]);\r\n-            }\r\n-        }\r\n-        return graph;\r\n-    }\r\n-\r\n-    /**\r\n-     * Return the base table for the given instance.\r\n-     */\r\n-    private static Table getBaseTable(OpenJPAStateManager sm) {\r\n-        ClassMapping cls = (ClassMapping) sm.getMetaData();\r\n-        while (cls.getJoinablePCSuperclassMapping() != null)\r\n-            cls = cls.getJoinablePCSuperclassMapping();\r\n-        return cls.getTable();\r\n-    }\r\n-\r\n-    /**\r\n-     * Add an edge between the given rows in the given foreign key graph.\r\n-     */\r\n-    private Graph addEdge(Graph graph, PrimaryRow row1, PrimaryRow row2,\r\n-        Object fk) {\r\n-        // delay creation of the graph\r\n-        if (graph == null)\r\n-            graph = new Graph();\r\n-\r\n-        row1.setDependent(true);\r\n-        row2.setDependent(true);\r\n-        graph.addNode(row1);\r\n-        graph.addNode(row2);\r\n-\r\n-        // add an edge from row1 to row2, and set the fk causing the\r\n-        // dependency as the user object so we can retrieve it when resolving\r\n-        // circular constraints\r\n-        Edge edge = new Edge(row1, row2, true);\r\n-        edge.setUserObject(fk);\r\n-        graph.addEdge(edge);\r\n-\r\n-        return graph;\r\n-    }\r\n-\r\n-    /**\r\n-     * Flush the given graph of rows in the proper order.\r\n-     * @param graph The graph of statements to be walked\r\n-     * @param psMgr The prepared statement manager to use to issue the\r\n-     * statements\r\n-     * @param autoAssign Whether any of the rows in the graph have any\r\n-     * auto-assign constraints\r\n-     */\r\n-    protected void flushGraph(Graph graph, PreparedStatementManager psMgr,\r\n-        boolean autoAssign)\r\n-        throws SQLException {\r\n-        if (graph == null)\r\n-            return;\r\n-\r\n-        DepthFirstAnalysis dfa = newDepthFirstAnalysis(graph, autoAssign);\r\n-        Collection insertUpdates = new LinkedList();\r\n-        Collection deleteUpdates = new LinkedList();\r\n-        boolean recalculate;\r\n-\r\n-        // Handle circular constraints:\r\n-        // - if deleted row A has a ciricular fk to deleted row B, \r\n-        //   then use an update statement to null A's fk to B before flushing, \r\n-        //   and then flush\r\n-        // - if inserted row A has a circular fk to updated/inserted row B,\r\n-        //   then null the fk in the B row object, then flush,\r\n-        //   and after flushing, use an update to set the fk back to A\r\n-        // Depending on where circular dependencies are broken, the  \r\n-        // topological order of the graph nodes has to be re-calculated.\r\n-        recalculate = resolveCycles(graph, dfa.getEdges(Edge.TYPE_BACK),\r\n-                deleteUpdates, insertUpdates);\r\n-        recalculate |= resolveCycles(graph, dfa.getEdges(Edge.TYPE_FORWARD),\r\n-                deleteUpdates, insertUpdates);\r\n-\r\n-        if (recalculate) {\r\n-            dfa = recalculateDepthFirstAnalysis(graph, autoAssign);\r\n-        }\r\n-\r\n-        // flush delete updates to null fks, then all rows in order, then\r\n-        // the insert updates to set circular fk values\r\n-        flush(deleteUpdates, psMgr);\r\n-        Collection nodes = dfa.getSortedNodes();\r\n-        for (Iterator itr = nodes.iterator(); itr.hasNext();)\r\n-            psMgr.flush((RowImpl) itr.next());\r\n-        flush(insertUpdates, psMgr);\r\n-    }\r\n-\r\n-    /**\r\n-     * Break a circular dependency caused by delete operations.\r\n-     * If deleted row A has a ciricular fk to deleted row B, then use an update \r\n-     * statement to null A's fk to B before deleting B, then delete A.\r\n-     * @param edge Edge in the dependency graph corresponding to a foreign key\r\n-     * constraint. This dependency is broken by nullifying the foreign key.\r\n-     * @param deleteUpdates Collection of update statements that are executed\r\n-     * before the delete operations are flushed \r\n-     */\r\n-    private void addDeleteUpdate(Edge edge, Collection deleteUpdates)\r\n-        throws SQLException {\r\n-        PrimaryRow row;\r\n-        RowImpl update;\r\n-        ForeignKey fk;\r\n-\r\n-        // copy where conditions into new update that nulls the fk\r\n-        row = (PrimaryRow) edge.getTo();\r\n-        update = new PrimaryRow(row.getTable(), Row.ACTION_UPDATE, null);\r\n-        row.copyInto(update, true);\r\n-        if (edge.getUserObject() instanceof ForeignKey) {\r\n-            fk = (ForeignKey) edge.getUserObject();\r\n-            update.setForeignKey(fk, row.getForeignKeyIO(fk), null);\r\n-        } else\r\n-            update.setNull((Column) edge.getUserObject());\r\n-\r\n-        deleteUpdates.add(update);\r\n-    }\r\n-\r\n-    /**\r\n-     * Break a circular dependency caused by insert operations.\r\n-     * If inserted row A has a circular fk to updated/inserted row B,\r\n-     * then null the fk in the B row object, then flush,\r\n-     * and after flushing, use an update to set the fk back to A.\r\n-     * @param row Row to be flushed\r\n-     * @param edge Edge in the dependency graph corresponding to a foreign key\r\n-     * constraint. This dependency is broken by nullifying the foreign key.\r\n-     * @param insertUpdates Collection of update statements that are executed\r\n-     * after the insert/update operations are flushed \r\n-     */\r\n-    private void addInsertUpdate(PrimaryRow row, Edge edge,\r\n-        Collection insertUpdates) throws SQLException {\r\n-        RowImpl update;\r\n-        ForeignKey fk;\r\n-        Column col;\r\n-\r\n-        // copy where conditions into new update that sets the fk\r\n-        update = new PrimaryRow(row.getTable(), Row.ACTION_UPDATE, null);\r\n-        if (row.getAction() == Row.ACTION_INSERT) {\r\n-            if (row.getPrimaryKey() == null)\r\n-                throw new InternalException(_loc.get(\"ref-cycle\"));\r\n-            update.wherePrimaryKey(row.getPrimaryKey());\r\n-        } else {\r\n-            // Row.ACTION_UPDATE\r\n-            row.copyInto(update, true);\r\n-        }\r\n-        if (edge.getUserObject() instanceof ForeignKey) {\r\n-            fk = (ForeignKey) edge.getUserObject();\r\n-            update.setForeignKey(fk, row.getForeignKeyIO(fk),\r\n-                row.getForeignKeySet(fk));\r\n-            row.clearForeignKey(fk);\r\n-        } else {\r\n-            col = (Column) edge.getUserObject();\r\n-            update.setRelationId(col, row.getRelationIdSet(col),\r\n-                row.getRelationIdCallback(col));\r\n-            row.clearRelationId(col);\r\n-        }\r\n-\r\n-        insertUpdates.add(update);\r\n-    }\r\n-\r\n-    /**\r\n-     * Finds a nullable foreign key by walking the dependency cycle. \r\n-     * Circular dependencies can be broken at this point.\r\n-     * @param cycle Cycle in the dependency graph.\r\n-     * @return Edge corresponding to a nullable foreign key.\r\n-     */\r\n-    private Edge findBreakableLink(List cycle) {\r\n-        Edge breakableLink = null;\r\n-        for (Iterator iter = cycle.iterator(); iter.hasNext(); ) {\r\n-            Edge edge = (Edge) iter.next();\r\n-            Object userObject = edge.getUserObject();\r\n-            if (userObject instanceof ForeignKey) {\r\n-                 if (!((ForeignKey) userObject).hasNotNullColumns()) {\r\n-                     breakableLink = edge;\r\n-                     break;\r\n-                 }\r\n-            } else if (userObject instanceof Column) {\r\n-                if (!((Column) userObject).isNotNull()) {\r\n-                    breakableLink = edge;\r\n-                    break;\r\n-                }\r\n-            }\r\n-        }\r\n-        return breakableLink;\r\n-    }\r\n-\r\n-    /**\r\n-     * Re-calculates the DepthFirstSearch analysis of the graph \r\n-     * after some of the edges have been removed. Ensures\r\n-     * that the dependency graph is cycle free.\r\n-     * @param graph The graph of statements to be walked\r\n-     * @param autoAssign Whether any of the rows in the graph have any\r\n-     * auto-assign constraints\r\n-     */\r\n-    private DepthFirstAnalysis recalculateDepthFirstAnalysis(Graph graph,\r\n-        boolean autoAssign) {\r\n-        DepthFirstAnalysis dfa;\r\n-        // clear previous traversal data\r\n-        graph.clearTraversal();\r\n-        dfa = newDepthFirstAnalysis(graph, autoAssign);\r\n-        // make sure that the graph is non-cyclic now\r\n-        assert (dfa.hasNoCycles()): _loc.get(\"graph-not-cycle-free\");\r\n-        return dfa;\r\n-    }\r\n-\r\n-    /**\r\n-     * Resolve circular dependencies by identifying and breaking\r\n-     * a nullable foreign key.\r\n-     * @param graph Dependency graph.\r\n-     * @param edges Collection of edges. Each edge indicates a possible \r\n-     * circular dependency\r\n-     * @param deleteUpdates Collection of update operations (nullifying \r\n-     * foreign keys) to be filled. These updates will be executed before \r\n-     * the rows in the dependency graph are flushed\r\n-     * @param insertUpdates CCollection of update operations (nullifying \r\n-     * foreign keys) to be filled. These updates will be executed after \r\n-     * the rows in the dependency graph are flushed\r\n-     * @return Depending on where circular dependencies are broken, the  \r\n-     * topological order of the graph nodes has to be re-calculated.\r\n-     */\r\n-    private boolean resolveCycles(Graph graph, Collection edges,\r\n-        Collection deleteUpdates, Collection insertUpdates)\r\n-        throws SQLException {\r\n-        boolean recalculate = false;\r\n-        for (Iterator itr = edges.iterator(); itr.hasNext();) {\r\n-            Edge edge = (Edge) itr.next();\r\n-            List cycle = edge.getCycle();\r\n-\r\n-            if (cycle != null) {\r\n-                // find a nullable foreign key\r\n-                Edge breakableLink = findBreakableLink(cycle);\r\n-                if (breakableLink == null) {\r\n-                    throw new UserException(_loc.get(\"no-nullable-fk\"));\r\n-                }\r\n-\r\n-                // topologic node order must be re-calculated,  if the\r\n-                // breakable link is different from the edge where\r\n-                // the circular dependency was originally detected\r\n-                if (edge != breakableLink) {\r\n-                    recalculate = true;\r\n-                }\r\n-\r\n-                if (!breakableLink.isRemovedFromGraph()) {\r\n-\r\n-                    // use a primary row update to prevent setting pk and fk values\r\n-                    // until after flush, to get latest auto-increment values\r\n-                    PrimaryRow row = (PrimaryRow) breakableLink.getFrom();\r\n-                    if (row.getAction() == Row.ACTION_DELETE) {\r\n-                        addDeleteUpdate(breakableLink, deleteUpdates);\r\n-                    } else {\r\n-                        addInsertUpdate(row, breakableLink, insertUpdates);\r\n-                    }\r\n-                    graph.removeEdge(breakableLink);\r\n-                }\r\n-            }\r\n-        }\r\n-        return recalculate;\r\n-    }\r\n-\r\n-    /**\r\n-     * Create a new {@link DepthFirstAnalysis} suitable for the given graph\r\n-     * and auto-assign settings.\r\n-     */\r\n-    protected DepthFirstAnalysis newDepthFirstAnalysis(Graph graph,\r\n-        boolean autoAssign) {\r\n-        return new DepthFirstAnalysis(graph);\r\n-    }\r\n-\r\n-    /**\r\n-     * Flush the given collection of secondary rows.\r\n-     */\r\n-    protected void flush(Collection rows, PreparedStatementManager psMgr) {\r\n-        if (rows.size() == 0)\r\n-            return;\r\n-\r\n-        RowImpl row;\r\n-        for (Iterator itr = rows.iterator(); itr.hasNext(); ) {\r\n-            row = (RowImpl) itr.next();\r\n-            if (row.isValid() && !row.isDependent())\r\n-                psMgr.flush(row);\r\n-        }\r\n-    }\r\n-}\n\\ No newline at end of file"},{"sha":"317671ef7aab471d6fd2c8a474fd04c5b84564b1","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/DelegatingJDBCFetchConfiguration.java","status":"removed","additions":0,"deletions":297,"changes":297,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/DelegatingJDBCFetchConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/DelegatingJDBCFetchConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/DelegatingJDBCFetchConfiguration.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,297 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.kernel;\n-\n-import java.util.Collection;\n-import java.util.Set;\n-\n-import org.apache.openjpa.jdbc.meta.ClassMapping;\n-import org.apache.openjpa.kernel.DelegatingFetchConfiguration;\n-import org.apache.openjpa.meta.FieldMetaData;\n-import org.apache.openjpa.util.RuntimeExceptionTranslator;\n-\n-///////////////////////////////////////////////////////////////\n-// NOTE: when adding a public API method, be sure to add it to \n-// JDO and JPA facades!\n-///////////////////////////////////////////////////////////////\n-\n-/**\n- * Delegating fetch configuration that can also perform exception\n- * transation for use in facades.\n- *\n- * @author Abe White\n- * @nojavadoc\n- * @since 0.4.0\n- */\n-public class DelegatingJDBCFetchConfiguration\n-    extends DelegatingFetchConfiguration\n-    implements JDBCFetchConfiguration {\n-\n-    /**\n-     * Constructor; supply delegate.\n-     */\n-    public DelegatingJDBCFetchConfiguration(JDBCFetchConfiguration delegate) {\n-        super(delegate);\n-    }\n-\n-    /**\n-     * Constructor; supply delegate and exception translator.\n-     */\n-    public DelegatingJDBCFetchConfiguration(JDBCFetchConfiguration delegate,\n-        RuntimeExceptionTranslator trans) {\n-        super(delegate, trans);\n-    }\n-\n-    /**\n-     * Return the JDBC delegate.\n-     */\n-    public JDBCFetchConfiguration getJDBCDelegate() {\n-        return (JDBCFetchConfiguration) getDelegate();\n-    }\n-\n-    public int getEagerFetchMode() {\n-        try {\n-            return getJDBCDelegate().getEagerFetchMode();\n-        } catch (RuntimeException re) {\n-            throw translate(re);\n-        }\n-    }\n-\n-    public JDBCFetchConfiguration setEagerFetchMode(int mode) {\n-        try {\n-            getJDBCDelegate().setEagerFetchMode(mode);\n-            return this;\n-        } catch (RuntimeException re) {\n-            throw translate(re);\n-        }\n-    }\n-\n-    public int getSubclassFetchMode() {\n-        try {\n-            return getJDBCDelegate().getSubclassFetchMode();\n-        } catch (RuntimeException re) {\n-            throw translate(re);\n-        }\n-    }\n-\n-    public int getSubclassFetchMode(ClassMapping cls) {\n-        try {\n-            return getJDBCDelegate().getSubclassFetchMode(cls);\n-        } catch (RuntimeException re) {\n-            throw translate(re);\n-        }\n-    }\n-\n-    public JDBCFetchConfiguration setSubclassFetchMode(int mode) {\n-        try {\n-            getJDBCDelegate().setSubclassFetchMode(mode);\n-            return this;\n-        } catch (RuntimeException re) {\n-            throw translate(re);\n-        }\n-    }\n-\n-    public int getResultSetType() {\n-        try {\n-            return getJDBCDelegate().getResultSetType();\n-        } catch (RuntimeException re) {\n-            throw translate(re);\n-        }\n-    }\n-\n-    public JDBCFetchConfiguration setResultSetType(int type) {\n-        try {\n-            getJDBCDelegate().setResultSetType(type);\n-            return this;\n-        } catch (RuntimeException re) {\n-            throw translate(re);\n-        }\n-    }\n-\n-    public int getFetchDirection() {\n-        try {\n-            return getJDBCDelegate().getFetchDirection();\n-        } catch (RuntimeException re) {\n-            throw translate(re);\n-        }\n-    }\n-\n-    public JDBCFetchConfiguration setFetchDirection(int direction) {\n-        try {\n-            getJDBCDelegate().setFetchDirection(direction);\n-            return this;\n-        } catch (RuntimeException re) {\n-            throw translate(re);\n-        }\n-    }\n-\n-    public int getLRSSize() {\n-        try {\n-            return getJDBCDelegate().getLRSSize();\n-        } catch (RuntimeException re) {\n-            throw translate(re);\n-        }\n-    }\n-\n-    public JDBCFetchConfiguration setLRSSize(int lrsSize) {\n-        try {\n-            getJDBCDelegate().setLRSSize(lrsSize);\n-            return this;\n-        } catch (RuntimeException re) {\n-            throw translate(re);\n-        }\n-    }\n-\n-    public int getJoinSyntax() {\n-        try {\n-            return getJDBCDelegate().getJoinSyntax();\n-        } catch (RuntimeException re) {\n-            throw translate(re);\n-        }\n-    }\n-\n-    public JDBCFetchConfiguration setJoinSyntax(int syntax) {\n-        try {\n-            getJDBCDelegate().setJoinSyntax(syntax);\n-            return this;\n-        } catch (RuntimeException re) {\n-            throw translate(re);\n-        }\n-    }\n-\n-    public Set getJoins() {\n-        try {\n-            return getJDBCDelegate().getJoins();\n-        } catch (RuntimeException re) {\n-            throw translate(re);\n-        }\n-    }\n-\n-    public boolean hasJoin(String field) {\n-        try {\n-            return getJDBCDelegate().hasJoin(field);\n-        } catch (RuntimeException re) {\n-            throw translate(re);\n-        }\n-    }\n-\n-    public JDBCFetchConfiguration addJoin(String field) {\n-        try {\n-            getJDBCDelegate().addJoin(field);\n-            return this;\n-        } catch (RuntimeException re) {\n-            throw translate(re);\n-        }\n-    }\n-\n-    public JDBCFetchConfiguration addJoins(Collection fields) {\n-        try {\n-            getJDBCDelegate().addJoins(fields);\n-            return this;\n-        } catch (RuntimeException re) {\n-            throw translate(re);\n-        }\n-    }\n-\n-    public JDBCFetchConfiguration removeJoin(String field) {\n-        try {\n-            getJDBCDelegate().removeJoin(field);\n-            return this;\n-        } catch (RuntimeException re) {\n-            throw translate(re);\n-        }\n-    }\n-\n-    public JDBCFetchConfiguration removeJoins(Collection fields) {\n-        try {\n-            getJDBCDelegate().removeJoins(fields);\n-            return this;\n-        } catch (RuntimeException re) {\n-            throw translate(re);\n-        }\n-    }\n-\n-    public JDBCFetchConfiguration clearJoins() {\n-        try {\n-            getJDBCDelegate().clearJoins();\n-            return this;\n-        } catch (RuntimeException re) {\n-            throw translate(re);\n-        }\n-    }\n-\n-    public int getIsolation() {\n-        try {\n-            return getJDBCDelegate().getIsolation();\n-        } catch (RuntimeException re) {\n-            throw translate(re);\n-        }\n-    }\n-\n-    public JDBCFetchConfiguration setIsolation(int level) {\n-        try {\n-            getJDBCDelegate().setIsolation(level);\n-            return this;\n-        } catch (RuntimeException re) {\n-            throw translate(re);\n-        }\n-    }\n-\n-    public JDBCFetchConfiguration traverseJDBC(FieldMetaData fm) {\n-        try {\n-            return getJDBCDelegate().traverseJDBC(fm);\n-        } catch (RuntimeException re) {\n-            throw translate(re);\n-        }\n-    }\n-\n-    public Set getFetchInnerJoins() {\n-        try {\n-            return getJDBCDelegate().getFetchInnerJoins();\n-        } catch (RuntimeException re) {\n-            throw translate(re);\n-        }\n-    }\n-\n-    public boolean hasFetchInnerJoin(String field) {\n-        try {\n-            return getJDBCDelegate().hasFetchInnerJoin(field);\n-        } catch (RuntimeException re) {\n-            throw translate(re);\n-        }\n-    }\n-\n-    public JDBCFetchConfiguration addFetchInnerJoin(String field) {\n-        try {\n-            getJDBCDelegate().addFetchInnerJoin(field);\n-            return this;\n-        } catch (RuntimeException re) {\n-            throw translate(re);\n-        }\n-    }\n-\n-    public JDBCFetchConfiguration addFetchInnerJoins(Collection fields) {\n-        try {\n-            getJDBCDelegate().addFetchInnerJoins(fields);\n-            return this;\n-        } catch (RuntimeException re) {\n-            throw translate(re);\n-        }\n-    }\n-}"},{"sha":"1f70dd85b5f4ff81dfceb1691f8067eb65accc83","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/EagerFetchModes.java","status":"removed","additions":0,"deletions":45,"changes":45,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/EagerFetchModes.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/EagerFetchModes.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/EagerFetchModes.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,45 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.kernel;\n-\n-/**\n- * Eager fetch mode constants.\n- *\n- * @author Abe White\n- */\n-public interface EagerFetchModes {\n-\n-    /**\n-     * Constant indicating not to try to load subclass data and related\n-     * objects when querying for an object.\n-     */\n-    public static final int EAGER_NONE = 0;\n-\n-    /**\n-     * Constant indicating to load relations and subclass data if possible\n-     * without separate queries.\n-     */\n-    public static final int EAGER_JOIN = 1;\n-\n-    /**\n-     * Constant indicating to load relations and subclass data if possible\n-     * using either joins or parallel queries.\n-     */\n-    public static final int EAGER_PARALLEL = 2;\n-}"},{"sha":"717225d6e62453b152a7e5c87198075ac5b0e21d","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/GenericResultObjectProvider.java","status":"removed","additions":0,"deletions":129,"changes":129,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/GenericResultObjectProvider.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/GenericResultObjectProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/GenericResultObjectProvider.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,129 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.kernel;\n-\n-import java.sql.SQLException;\n-\n-import org.apache.openjpa.jdbc.meta.ClassMapping;\n-import org.apache.openjpa.jdbc.sql.Result;\n-import org.apache.openjpa.jdbc.sql.SQLExceptions;\n-import org.apache.openjpa.kernel.StoreContext;\n-import org.apache.openjpa.lib.rop.ResultObjectProvider;\n-import org.apache.openjpa.util.StoreException;\n-import org.apache.openjpa.util.UnsupportedException;\n-\n-/**\n- * Object provider implementation wrapped around a generic {@link Result}.\n- *\n- * @author Abe White\n- */\n-public class GenericResultObjectProvider\n-    implements ResultObjectProvider {\n-\n-    private final ClassMapping _mapping;\n-    private final JDBCStore _store;\n-    private final JDBCFetchConfiguration _fetch;\n-    private final Result _res;\n-\n-    /**\n-     * Constructor.\n-     *\n-     * @param pcClass the base class of the result objects\n-     * @param store the store manager to delegate loading to\n-     * @param fetch the fetch configuration, or null for default\n-     * @param res the result containing the data\n-     */\n-    public GenericResultObjectProvider(Class pcClass,\n-        JDBCStore store, JDBCFetchConfiguration fetch, Result res) {\n-        this(store.getConfiguration().getMappingRepositoryInstance().getMapping\n-            (pcClass, store.getContext().getClassLoader(), true),\n-            store, fetch, res);\n-    }\n-\n-    /**\n-     * Constructor.\n-     *\n-     * @param mapping the mapping for the base class of the result objects\n-     * @param store the store manager to delegate loading to\n-     * @param fetch the fetch configuration, or null for default\n-     * @param res the result containing the data\n-     */\n-    public GenericResultObjectProvider(ClassMapping mapping,\n-        JDBCStore store, JDBCFetchConfiguration fetch, Result res) {\n-        _mapping = mapping;\n-        _store = store;\n-        if (fetch == null)\n-            _fetch = store.getFetchConfiguration();\n-        else\n-            _fetch = fetch;\n-        _res = res;\n-    }\n-\n-    public boolean supportsRandomAccess() {\n-        try {\n-            return _res.supportsRandomAccess();\n-        } catch (Throwable t) {\n-            return false;\n-        }\n-    }\n-\n-    public void open() {\n-    }\n-\n-    public Object getResultObject()\n-        throws SQLException {\n-        // rather than use the standard result.load(), we go direct to\n-        // the store manager so we can tell it not to load anything additional\n-        return ((JDBCStoreManager) _store).load(_mapping, _fetch,\n-            StoreContext.EXCLUDE_ALL, _res);\n-    }\n-\n-    public boolean next()\n-        throws SQLException {\n-        return _res.next();\n-    }\n-\n-    public boolean absolute(int pos)\n-        throws SQLException {\n-        return _res.absolute(pos);\n-    }\n-\n-    public int size()\n-        throws SQLException {\n-        if (_fetch.getLRSSize() == LRSSizes.SIZE_UNKNOWN\n-            || !supportsRandomAccess())\n-            return Integer.MAX_VALUE;\n-        return _res.size();\n-    }\n-\n-    public void reset() {\n-        throw new UnsupportedException();\n-    }\n-\n-    public void close() {\n-        _res.close();\n-    }\n-\n-    public void handleCheckedException(Exception e) {\n-        if (e instanceof SQLException)\n-            throw SQLExceptions.getStore((SQLException) e,\n-                _store.getDBDictionary());\n-        throw new StoreException(e);\n-    }\n-}"},{"sha":"cf2b3e346034d35e3a47c643c3daeb71208f2a5c","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/InstanceResultObjectProvider.java","status":"removed","additions":0,"deletions":61,"changes":61,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/InstanceResultObjectProvider.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/InstanceResultObjectProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/InstanceResultObjectProvider.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,61 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.kernel;\n-\n-import java.sql.SQLException;\n-\n-import org.apache.openjpa.jdbc.meta.ClassMapping;\n-import org.apache.openjpa.jdbc.sql.Result;\n-import org.apache.openjpa.jdbc.sql.Select;\n-import org.apache.openjpa.jdbc.sql.SelectExecutor;\n-\n-/**\n- * Object provider implementation wrapped around a {@link Select}.\n- *\n- * @author Abe White\n- * @nojavadoc\n- */\n-public class InstanceResultObjectProvider\n-    extends SelectResultObjectProvider {\n-\n-    private final ClassMapping _mapping;\n-\n-    /**\n-     * Constructor.\n-     *\n-     * @param sel the select to execute\n-     * @param mapping the mapping for the base class of the result objects\n-     * @param store the store to delegate loading to\n-     * @param fetch the fetch configuration, or null for default\n-     */\n-    public InstanceResultObjectProvider(SelectExecutor sel,\n-        ClassMapping mapping, JDBCStore store, JDBCFetchConfiguration fetch) {\n-        super(sel, store, fetch);\n-        _mapping = mapping;\n-    }\n-\n-    public Object getResultObject()\n-        throws SQLException {\n-        Result res = getResult();\n-        ClassMapping mapping = res.getBaseMapping();\n-        if (mapping == null)\n-            mapping = _mapping;\n-        return res.load(mapping, getStore(), getFetchConfiguration());\n-    }\n-}"},{"sha":"e0b2c0be4a18cea343dbbc46a7c29ab76863f053","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBC3SavepointManager.java","status":"removed","additions":0,"deletions":65,"changes":65,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBC3SavepointManager.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBC3SavepointManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBC3SavepointManager.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,65 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.kernel;\n-\n-import java.sql.Connection;\n-import java.sql.SQLException;\n-import java.sql.Savepoint;\n-\n-import org.apache.openjpa.lib.util.Localizer;\n-import org.apache.openjpa.util.UserException;\n-\n-/**\n- * {@link SavepointManager} implementation that uses JDBC 3 savepoints\n- * to store state. This plugin has the side effect of triggering\n- * a flush on the {@link Broker}.\n- * \n- * <b>Note that this plugin requires a database and JDBC driver which\n- * supports JDBC 3 savepoints</b>\n- *\n- * @author Steve Kim\n- * @since 0.3.4\n- */\n-public class JDBC3SavepointManager\n-    extends AbstractJDBCSavepointManager {\n-\n-    private static final Localizer _loc = Localizer.forPackage\n-        (JDBC3SavepointManager.class);\n-\n-    protected void rollbackDataStore(ConnectionSavepoint savepoint) {\n-        try {\n-            Connection conn = savepoint.getConnection();\n-            conn.rollback((Savepoint) savepoint.getDataStoreSavepoint());\n-        } catch (SQLException sqe) {\n-            throw new UserException(_loc.get(\"error-rollback\",\n-                savepoint.getName()), sqe);\n-        }\n-    }\n-\n-    protected void setDataStore(ConnectionSavepoint savepoint) {\n-        try {\n-            Connection conn = savepoint.getConnection();\n-            savepoint.setDataStoreSavepoint(conn.setSavepoint\n-                (savepoint.getName()));\n-        } catch (SQLException sqe) {\n-            throw new UserException(_loc.get(\"error-save\",\n-                savepoint.getName()), sqe);\n-        }\n-    }\n-}"},{"sha":"54586274be79664e3cf2242abf2cb8271db12611","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCBrokerFactory.java","status":"removed","additions":0,"deletions":161,"changes":161,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCBrokerFactory.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCBrokerFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCBrokerFactory.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,161 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.kernel;\n-\n-import java.util.Arrays;\n-import java.util.Collection;\n-import java.util.Iterator;\n-import java.util.Properties;\n-import java.util.Map;\n-\n-import org.apache.commons.lang.StringUtils;\n-import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n-import org.apache.openjpa.jdbc.conf.JDBCConfigurationImpl;\n-import org.apache.openjpa.jdbc.meta.MappingRepository;\n-import org.apache.openjpa.jdbc.meta.MappingTool;\n-import org.apache.openjpa.kernel.AbstractBrokerFactory;\n-import org.apache.openjpa.kernel.Bootstrap;\n-import org.apache.openjpa.kernel.BrokerImpl;\n-import org.apache.openjpa.kernel.StoreManager;\n-import org.apache.openjpa.lib.conf.ConfigurationProvider;\n-import org.apache.openjpa.lib.conf.Configurations;\n-import org.apache.openjpa.lib.util.Localizer;\n-import org.apache.openjpa.util.UserException;\n-\n-/**\n- * BrokerFactory type for use with the JDBC runtime.\n- *\n- * @author Abe White\n- * @author Marc Prud'hommeaux\n- */\n-public class JDBCBrokerFactory\n-    extends AbstractBrokerFactory {\n-\n-    private static final Localizer _loc = Localizer.forPackage\n-        (JDBCBrokerFactory.class);\n-\n-    private boolean _synchronizedMappings = false;\n-\n-    /**\n-     * Factory method for constructing a factory from properties. Invoked from\n-     * {@link Bootstrap#newBrokerFactory}.\n-     */\n-    public static JDBCBrokerFactory newInstance(ConfigurationProvider cp) {\n-        JDBCConfigurationImpl conf = new JDBCConfigurationImpl();\n-        cp.setInto(conf);\n-        return new JDBCBrokerFactory(conf);\n-    }\n-\n-    /**\n-     * Factory method for obtaining a possibly-pooled factory from properties.\n-     * Invoked from {@link Bootstrap#getBrokerFactory}.\n-     */\n-    public static JDBCBrokerFactory getInstance(ConfigurationProvider cp) {\n-        Map props = cp.getProperties();\n-        Object key = toPoolKey(props);\n-        JDBCBrokerFactory factory = (JDBCBrokerFactory)\n-            getPooledFactoryForKey(key);\n-        if (factory != null)\n-            return factory;\n-\n-        factory = newInstance(cp);\n-        pool(key, factory);\n-        return factory;\n-    }\n-\n-    /**\n-     * Construct the factory with the given option settings; however, the\n-     * factory construction methods are recommended.\n-     */\n-    public JDBCBrokerFactory(JDBCConfiguration conf) {\n-        super(conf);\n-    }\n-\n-    public Properties getProperties() {\n-        // add platform property\n-        Properties props = super.getProperties();\n-        String db = \"Unknown\";\n-        try {\n-            JDBCConfiguration conf = (JDBCConfiguration) getConfiguration();\n-            db = conf.getDBDictionaryInstance().platform;\n-        } catch (RuntimeException re) {\n-        }\n-        props.setProperty(\"Platform\",\n-            \"OpenJPA JDBC Edition: \" + db + \" Database\");\n-\n-        return props;\n-    }\n-\n-    protected StoreManager newStoreManager() {\n-        return new JDBCStoreManager();\n-    }\n-\n-    protected BrokerImpl newBrokerImpl(String user, String pass) {\n-        BrokerImpl broker = super.newBrokerImpl(user, pass);\n-\n-        lock();\n-        try {\n-            // synchronize mappings; we wait until now to do this so that\n-            // we can use the first broker user/pass for connection if no\n-            // global login is given\n-            if (!_synchronizedMappings) {\n-                _synchronizedMappings = true;\n-                synchronizeMappings(broker.getClassLoader());\n-            }\n-\n-            return broker;\n-        } finally {\n-            unlock();\n-        }\n-    }\n-\n-    /**\n-     * Synchronize the mappings of the classes listed in the configuration.\n-     */\n-    protected void synchronizeMappings(ClassLoader loader) {\n-        JDBCConfiguration conf = (JDBCConfiguration) getConfiguration();\n-        String action = conf.getSynchronizeMappings();\n-        if (StringUtils.isEmpty(action))\n-            return;\n-\n-        MappingRepository repo = conf.getMappingRepositoryInstance();\n-        Collection classes = repo.loadPersistentTypes(false, loader);\n-        if (classes.isEmpty())\n-            return;\n-\n-        String props = Configurations.getProperties(action);\n-        action = Configurations.getClassName(action);\n-        MappingTool tool = new MappingTool(conf, action, false);\n-        Configurations.configureInstance(tool, conf, props,\n-            \"SynchronizeMappings\");\n-\n-        // initialize the schema\n-        Class cls;\n-        for (Iterator itr = classes.iterator(); itr.hasNext();) {\n-            cls = (Class) itr.next();\n-            try {\n-                tool.run(cls);\n-            } catch (IllegalArgumentException iae) {\n-                throw new UserException(_loc.get(\"bad-synch-mappings\",\n-                    action, Arrays.asList(MappingTool.ACTIONS)));\n-            }\n-        }\n-        tool.record();\n-    }\n-}"},{"sha":"077e61ba5396fc75cf6fa48339668088224e3060","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCFetchConfiguration.java","status":"removed","additions":0,"deletions":244,"changes":244,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCFetchConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCFetchConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCFetchConfiguration.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,244 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.kernel;\n-\n-import java.sql.ResultSet;\n-import java.sql.Connection;\n-import java.util.Collection;\n-import java.util.Set;\n-\n-import org.apache.openjpa.jdbc.meta.ClassMapping;\n-import org.apache.openjpa.jdbc.sql.JoinSyntaxes;\n-import org.apache.openjpa.kernel.FetchConfiguration;\n-import org.apache.openjpa.meta.FieldMetaData;\n-\n-/**\n- * JDBC extensions to OpenJPA's {@link FetchConfiguration}.\n- *\n- * @author Abe White\n- * @since 0.3.0\n- */\n-public interface JDBCFetchConfiguration\n-    extends FetchConfiguration, EagerFetchModes, LRSSizes, JoinSyntaxes {\n-\n-    /**\n-     * Return the eager fetch mode. Defaults to the\n-     * <code>openjpa.jdbc.EagerFetchMode</code> setting.\n-     */\n-    public int getEagerFetchMode();\n-\n-    /**\n-     * Set the eager fetch mode. Defaults to the\n-     * <code>openjpa.jdbc.EagerFetchMode</code> setting.\n-     */\n-    public JDBCFetchConfiguration setEagerFetchMode(int mode);\n-\n-    /**\n-     * Return the subclass fetch mode. Defaults to the\n-     * <code>openjpa.jdbc.SubclassFetchMode</code> setting.\n-     */\n-    public int getSubclassFetchMode();\n-\n-    /**\n-     * Return the effective subclass fetch mode for the given type.\n-     */\n-    public int getSubclassFetchMode(ClassMapping cls);\n-\n-    /**\n-     * Set the subclass fetch mode. Defaults to the\n-     * <code>openjpa.jdbc.SubclassFetchMode</code> setting.\n-     */\n-    public JDBCFetchConfiguration setSubclassFetchMode(int mode);\n-\n-    /**\n-     * The result set type to use as a constant from {@link ResultSet}.\n-     * Defaults to the <code>openjpa.jdbc.ResultSetType</code> setting.\n-     */\n-    public int getResultSetType();\n-\n-    /**\n-     * The result set type to use as a constant from {@link ResultSet}.\n-     * Defaults to the <code>openjpa.jdbc.ResultSetType</code> setting.\n-     */\n-    public JDBCFetchConfiguration setResultSetType(int type);\n-\n-    /**\n-     * The fetch direction to use as a constant from {@link ResultSet}.\n-     * Defaults to the <code>openjpa.jdbc.FetchDirection</code> setting.\n-     */\n-    public int getFetchDirection();\n-\n-    /**\n-     * The fetch direction to use as a constant from {@link ResultSet}.\n-     * Defaults to the <code>openjpa.jdbc.FetchDirection</code> setting.\n-     */\n-    public JDBCFetchConfiguration setFetchDirection(int direction);\n-\n-    /**\n-     * The large result set size mode to use.\n-     * Defaults to the <code>openjpa.jdbc.LRSSize</code> setting.\n-     */\n-    public int getLRSSize();\n-\n-    /**\n-     * The large result set size mode to use.\n-     * Defaults to the <code>openjpa.jdbc.LRSSize</code> setting.\n-     */\n-    public JDBCFetchConfiguration setLRSSize(int lrsSize);\n-\n-    /**\n-     * The join syntax to use.\n-     */\n-    public int getJoinSyntax();\n-\n-    /**\n-     * The join syntax to use.\n-     */\n-    public JDBCFetchConfiguration setJoinSyntax(int syntax);\n-\n-    /**\n-     * Returns the names of the joins that this component will use\n-     * when loading objects. Defaults to the empty set.  This set is not\n-     * thread safe.\n-     *\n-     * @since 0.4.0.0\n-     */\n-    public Set getJoins();\n-\n-    /**\n-     * Return true if the given fully-qualified join has been added.\n-     *\n-     * @since 0.4.0.0\n-     */\n-    public boolean hasJoin(String field);\n-\n-    /**\n-     * Adds <code>field</code> to the set of fully-qualified field names to\n-     * eagerly join when loading objects. Each class can have at most\n-     * one to-many eagerly joined fields.\n-     *\n-     * @since 0.4.0.0\n-     */\n-    public JDBCFetchConfiguration addJoin(String field);\n-\n-    /**\n-     * Adds <code>fields</code> to the set of fully-qualified field names to\n-     * eagerly join when loading objects. Each class can have at most\n-     * one to-many eagerly joined fields.\n-     *\n-     * @since 0.4.0.0\n-     */\n-    public JDBCFetchConfiguration addJoins(Collection fields);\n-\n-    /**\n-     * Removes <code>field</code> to the set of fully-qualified field names to\n-     * eagerly join when loading objects.\n-     *\n-     * @since 0.4.0.0\n-     */\n-    public JDBCFetchConfiguration removeJoin(String field);\n-\n-    /**\n-     * Removes <code>fields</code> from the set of fully-qualified\n-     * field names to eagerly join when loading objects.\n-     *\n-     * @since 0.4.0.0\n-     */\n-    public JDBCFetchConfiguration removeJoins(Collection fields);\n-\n-    /**\n-     * Clears the set of field names to join when loading data.\n-     *\n-     * @since 0.4.0.0\n-     */\n-    public JDBCFetchConfiguration clearJoins();\n-\n-    /**\n-     * <p>The isolation level for queries issued to the database. This overrides\n-     * the persistence-unit-wide <code>openjpa.jdbc.TransactionIsolation</code>\n-     * value.</p>\n-     *\n-     * <p>Must be one of {@link Connection#TRANSACTION_NONE},\n-     * {@link Connection#TRANSACTION_READ_UNCOMMITTED},\n-     * {@link Connection#TRANSACTION_READ_COMMITTED},\n-     * {@link Connection#TRANSACTION_REPEATABLE_READ},\n-     * {@link Connection#TRANSACTION_SERIALIZABLE},\n-     * or -1 for the default connection level specified by the context in\n-     * which this fetch configuration is being used.</p>\n-     *\n-     * @since 0.9.7\n-     */\n-    public int getIsolation();\n-\n-    /**\n-     * <p>The isolation level for queries issued to the database. This overrides\n-     * the persistence-unit-wide <code>openjpa.jdbc.TransactionIsolation</code>\n-     * value.</p>\n-     *\n-     * <p>Must be one of {@link Connection#TRANSACTION_NONE},\n-     * {@link Connection#TRANSACTION_READ_UNCOMMITTED},\n-     * {@link Connection#TRANSACTION_READ_COMMITTED},\n-     * {@link Connection#TRANSACTION_REPEATABLE_READ},\n-     * {@link Connection#TRANSACTION_SERIALIZABLE},\n-     * or -1 for the default connection level specified by the context in\n-     * which this fetch configuration is being used.</p>\n-     *\n-     * @since 0.9.7\n-     */\n-    public JDBCFetchConfiguration setIsolation(int level);\n-\n-    /**\n-     * Convenience method to cast traversal to store-specific type.\n-     */\n-    public JDBCFetchConfiguration traverseJDBC(FieldMetaData fm);\n-\n-    /**\n-     * Returns the names of the inner fetch joins that this component will use\n-     * when loading objects. Defaults to the empty set.  This set is not\n-     * thread safe.\n-     *\n-     * @since 1.0.3\n-     */\n-    public Set getFetchInnerJoins();\n-\n-    /**\n-     * Return true if the given fully-qualified inner fetch join has been added.\n-     *\n-     * @since 1.0.3\n-     */\n-    public boolean hasFetchInnerJoin(String field);\n-\n-    /**\n-     * Adds <code>field</code> to the set of fully-qualified field names to\n-     * eagerly join when loading objects. Each class can have at most\n-     * one to-many eagerly joined fields.\n-     *\n-     * @since 1.0.3\n-     */\n-    public JDBCFetchConfiguration addFetchInnerJoin(String field);\n-\n-    /**\n-     * Adds <code>fields</code> to the set of fully-qualified field names to\n-     * eagerly join when loading objects. Each class can have at most\n-     * one to-many eagerly joined fields.\n-     *\n-     * @since 1.0.3\n-     */\n-    public JDBCFetchConfiguration addFetchInnerJoins(Collection fields);\n-}"},{"sha":"a00b5a31ed51486c07e6365c6c50ee879c3ab155","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCFetchConfigurationImpl.java","status":"removed","additions":0,"deletions":382,"changes":382,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCFetchConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCFetchConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCFetchConfigurationImpl.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,382 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.kernel;\n-\n-import java.io.Serializable;\n-import java.sql.ResultSet;\n-import java.sql.Connection;\n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.HashSet;\n-import java.util.Iterator;\n-import java.util.Set;\n-\n-import org.apache.commons.lang.StringUtils;\n-import org.apache.openjpa.conf.OpenJPAConfiguration;\n-import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n-import org.apache.openjpa.jdbc.meta.ClassMapping;\n-import org.apache.openjpa.kernel.FetchConfiguration;\n-import org.apache.openjpa.kernel.FetchConfigurationImpl;\n-import org.apache.openjpa.kernel.StoreContext;\n-import org.apache.openjpa.lib.rop.EagerResultList;\n-import org.apache.openjpa.lib.rop.ListResultObjectProvider;\n-import org.apache.openjpa.lib.rop.ResultList;\n-import org.apache.openjpa.lib.rop.ResultObjectProvider;\n-import org.apache.openjpa.lib.rop.SimpleResultList;\n-import org.apache.openjpa.lib.rop.SoftRandomAccessResultList;\n-import org.apache.openjpa.lib.rop.WindowResultList;\n-import org.apache.openjpa.lib.util.Localizer;\n-import org.apache.openjpa.meta.FieldMetaData;\n-import org.apache.openjpa.util.UserException;\n-\n-/**\n- * JDBC extensions to OpenJPA's {@link FetchConfiguration}.\n- *\n- * @author Abe White\n- * @nojavadoc\n- */\n-public class JDBCFetchConfigurationImpl\n-    extends FetchConfigurationImpl\n-    implements JDBCFetchConfiguration {\n-\n-    private static final Localizer _loc = Localizer.forPackage\n-        (JDBCFetchConfigurationImpl.class);\n-\n-    /**\n-     * Configurable JDBC state shared throughout a traversal chain.\n-     */\n-    protected static class JDBCConfigurationState implements Serializable {\n-        public int eagerMode = 0;\n-        public int subclassMode = 0;\n-        public int type = 0;\n-        public int direction = 0;\n-        public int size = 0;\n-        public int syntax = 0;\n-        public Set joins = null;\n-        public Set fetchInnerJoins = null;\n-        public int isolationLevel = -1;\n-    }\n-\n-    protected final JDBCConfigurationState _state;\n-\n-    public JDBCFetchConfigurationImpl() {\n-        this(null, null);\n-    }\n-\n-    protected JDBCFetchConfigurationImpl(ConfigurationState state, \n-        JDBCConfigurationState jstate) {\n-        super(state);\n-        _state = (jstate == null) ? new JDBCConfigurationState() : jstate;\n-    }\n-\n-    protected FetchConfigurationImpl newInstance(ConfigurationState state) {\n-        JDBCConfigurationState jstate = (state == null) ? null : _state;\n-        return new JDBCFetchConfigurationImpl(state, jstate);\n-    }\n-\n-    public void setContext(StoreContext ctx) {\n-        super.setContext(ctx);\n-        JDBCConfiguration conf = getJDBCConfiguration();\n-        if (conf == null)\n-            return;\n-\n-        setEagerFetchMode(conf.getEagerFetchModeConstant());\n-        setSubclassFetchMode(conf.getSubclassFetchModeConstant());\n-        setResultSetType(conf.getResultSetTypeConstant());\n-        setFetchDirection(conf.getFetchDirectionConstant());\n-        setLRSSize(conf.getLRSSizeConstant());\n-        setJoinSyntax(conf.getDBDictionaryInstance().joinSyntax);\n-    }\n-\n-    public void copy(FetchConfiguration fetch) {\n-        super.copy(fetch);\n-        JDBCFetchConfiguration jf = (JDBCFetchConfiguration) fetch;\n-        setEagerFetchMode(jf.getEagerFetchMode());\n-        setSubclassFetchMode(jf.getSubclassFetchMode());\n-        setResultSetType(jf.getResultSetType());\n-        setFetchDirection(jf.getFetchDirection());\n-        setLRSSize(jf.getLRSSize());\n-        setJoinSyntax(jf.getJoinSyntax());\n-        addJoins(jf.getJoins());\n-    }\n-\n-    public int getEagerFetchMode() {\n-        return _state.eagerMode;\n-    }\n-\n-    public JDBCFetchConfiguration setEagerFetchMode(int mode) {\n-        if (mode == DEFAULT) {\n-            JDBCConfiguration conf = getJDBCConfiguration();\n-            if (conf != null)\n-                mode = conf.getEagerFetchModeConstant();\n-        }\n-        if (mode != DEFAULT)\n-            _state.eagerMode = mode;\n-        return this;\n-    }\n-\n-    public int getSubclassFetchMode() {\n-        return _state.subclassMode;\n-    }\n-\n-    public int getSubclassFetchMode(ClassMapping cls) {\n-        if (cls == null)\n-            return _state.subclassMode;\n-        int mode = cls.getSubclassFetchMode();\n-        if (mode == DEFAULT)\n-            return _state.subclassMode;\n-        return Math.min(mode, _state.subclassMode);\n-    }\n-\n-    public JDBCFetchConfiguration setSubclassFetchMode(int mode) {\n-        if (mode == DEFAULT) {\n-            JDBCConfiguration conf = getJDBCConfiguration();\n-            if (conf != null)\n-                mode = conf.getSubclassFetchModeConstant();\n-        }\n-        if (mode != DEFAULT)\n-            _state.subclassMode = mode;\n-        return this;\n-    }\n-\n-    public int getResultSetType() {\n-        return _state.type;\n-    }\n-\n-    public JDBCFetchConfiguration setResultSetType(int type) {\n-        if (type == DEFAULT) {\n-            JDBCConfiguration conf = getJDBCConfiguration();\n-            if (conf != null)\n-                _state.type = conf.getResultSetTypeConstant();\n-        } else\n-            _state.type = type;\n-        return this;\n-    }\n-\n-    public int getFetchDirection() {\n-        return _state.direction;\n-    }\n-\n-    public JDBCFetchConfiguration setFetchDirection(int direction) {\n-        if (direction == DEFAULT) {\n-            JDBCConfiguration conf = getJDBCConfiguration();\n-            if (conf != null)\n-                _state.direction = conf.getFetchDirectionConstant();\n-        } else\n-            _state.direction = direction;\n-        return this;\n-    }\n-\n-    public int getLRSSize() {\n-        return _state.size;\n-    }\n-\n-    public JDBCFetchConfiguration setLRSSize(int size) {\n-        if (size == DEFAULT) {\n-            JDBCConfiguration conf = getJDBCConfiguration();\n-            if (conf != null)\n-                _state.size = conf.getLRSSizeConstant();\n-        } else\n-            _state.size = size;\n-        return this;\n-    }\n-\n-    public int getJoinSyntax() {\n-        return _state.syntax;\n-    }\n-\n-    public JDBCFetchConfiguration setJoinSyntax(int syntax) {\n-        if (syntax == DEFAULT) {\n-            JDBCConfiguration conf = getJDBCConfiguration();\n-            if (conf != null)\n-                _state.syntax = conf.getDBDictionaryInstance().joinSyntax;\n-        } else\n-            _state.syntax = syntax;\n-        return this;\n-    }\n-\n-    public ResultList newResultList(ResultObjectProvider rop) {\n-        // if built around a list, just use a simple wrapper\n-        if (rop instanceof ListResultObjectProvider)\n-            return new SimpleResultList(rop);\n-\n-        // if built around a paging list, use a window provider with the\n-        // same window size\n-        if (rop instanceof PagingResultObjectProvider)\n-            return new WindowResultList(rop, ((PagingResultObjectProvider)\n-                rop).getPageSize());\n-\n-        // if fetch size < 0 just read in all results immediately\n-        if (getFetchBatchSize() < 0)\n-            return new EagerResultList(rop);\n-\n-        // if foward only or forward direction use a forward window\n-        if (_state.type == ResultSet.TYPE_FORWARD_ONLY\n-            || _state.direction == ResultSet.FETCH_FORWARD\n-            || !rop.supportsRandomAccess()) {\n-            if (getFetchBatchSize() > 0 && getFetchBatchSize() <= 50)\n-                return new WindowResultList(rop, getFetchBatchSize());\n-            return new WindowResultList(rop, 50);\n-        }\n-\n-        // if skipping around use a caching random access list\n-        if (_state.direction == ResultSet.FETCH_UNKNOWN)\n-            return new SoftRandomAccessResultList(rop);\n-\n-        // scrolling reverse... just use non-caching simple result list\n-        return new SimpleResultList(rop);\n-    }\n-\n-    public Set getJoins() {\n-        return (_state.joins == null) ? Collections.EMPTY_SET : _state.joins;\n-    }\n-\n-    public boolean hasJoin(String field) {\n-        return _state.joins != null && _state.joins.contains(field);\n-    }\n-\n-    public JDBCFetchConfiguration addJoin(String join) {\n-        if (StringUtils.isEmpty(join))\n-            throw new UserException(_loc.get(\"null-join\"));\n-        \n-        lock();\n-        try {\n-            if (_state.joins == null)\n-                _state.joins = new HashSet();\n-            _state.joins.add(join);\n-        } finally {\n-            unlock();\n-        }\n-        return this;\n-    }\n-\n-    public JDBCFetchConfiguration addJoins(Collection joins) {\n-        if (joins == null || joins.isEmpty())\n-            return this;\n-        for (Iterator itr = joins.iterator(); itr.hasNext();)\n-            addJoin((String) itr.next());\n-        return this;\n-    }\n-\n-    public JDBCFetchConfiguration removeJoin(String field) {\n-        lock();\n-        try {\n-            if (_state.joins != null)\n-                _state.joins.remove(field);\n-        } finally {\n-            unlock();\n-        }\n-        return this;\n-    }\n-\n-    public JDBCFetchConfiguration removeJoins(Collection joins) {\n-        lock();\n-        try {\n-            if (_state.joins != null)\n-                _state.joins.removeAll(joins);\n-        } finally {\n-            unlock();\n-        }\n-        return this;\n-    }\n-\n-    public JDBCFetchConfiguration clearJoins() {\n-        lock();\n-        try {\n-            if (_state.joins != null)\n-                _state.joins.clear();\n-        } finally {\n-            unlock();\n-        }\n-        return this;\n-    }\n-\n-    public int getIsolation() {\n-        return _state.isolationLevel;\n-    }\n-\n-    public JDBCFetchConfiguration setIsolation(int level) {\n-        if (level != -1 && level != DEFAULT\n-            && level != Connection.TRANSACTION_NONE\n-            && level != Connection.TRANSACTION_READ_UNCOMMITTED\n-            && level != Connection.TRANSACTION_READ_COMMITTED\n-            && level != Connection.TRANSACTION_REPEATABLE_READ\n-            && level != Connection.TRANSACTION_SERIALIZABLE)\n-            throw new IllegalArgumentException(\n-                _loc.get(\"bad-level\", new Integer(level)).getMessage());\n-\n-        if (level == DEFAULT)\n-            _state.isolationLevel = -1;\n-        else\n-            _state.isolationLevel = level;\n-        return this;\n-    }\n-\n-    public JDBCFetchConfiguration traverseJDBC(FieldMetaData fm) {\n-        return (JDBCFetchConfiguration) traverse(fm);\n-    }\n-\n-    /**\n-     * Access JDBC configuration information. May return null if not a\n-     * JDBC back-end (possible to get a JDBCFetchConfiguration on non-JDBC\n-     * back end in remote client).\n-     */\n-    private JDBCConfiguration getJDBCConfiguration() {\n-        StoreContext ctx = getContext();\n-        if (ctx == null)\n-            return null;\n-        OpenJPAConfiguration conf = ctx.getConfiguration();\n-        if (!(conf instanceof JDBCConfiguration))\n-            return null;\n-        return (JDBCConfiguration) conf;\n-    }\n-\n-    public Set getFetchInnerJoins() {\n-        return (_state.fetchInnerJoins == null) ? Collections.EMPTY_SET\n-            : _state.fetchInnerJoins;\n-    }\n-\n-    public boolean hasFetchInnerJoin(String field) {\n-        return _state.fetchInnerJoins != null &&\n-            _state.fetchInnerJoins.contains(field);\n-    }\n-\n-    public JDBCFetchConfiguration addFetchInnerJoin(String join) {\n-        if (StringUtils.isEmpty(join))\n-            throw new UserException(_loc.get(\"null-join\"));\n-        \n-        lock();\n-        try {\n-            if (_state.fetchInnerJoins == null)\n-                _state.fetchInnerJoins = new HashSet();\n-            _state.fetchInnerJoins.add(join);\n-        } finally {\n-            unlock();\n-        }\n-        return this;\n-    }\n-\n-    public JDBCFetchConfiguration addFetchInnerJoins(Collection joins) {\n-        if (joins == null || joins.isEmpty())\n-            return this;\n-        for (Iterator itr = joins.iterator(); itr.hasNext();)\n-            addFetchInnerJoin((String) itr.next());\n-        return this;\n-    }\n-}"},{"sha":"646fbf951ebd58bcaabbbc906e8ef5c04bd11c4b","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCLockManager.java","status":"removed","additions":0,"deletions":49,"changes":49,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCLockManager.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCLockManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCLockManager.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,49 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.kernel;\n-\n-import org.apache.openjpa.jdbc.sql.Select;\n-import org.apache.openjpa.kernel.LockManager;\n-import org.apache.openjpa.kernel.OpenJPAStateManager;\n-\n-/**\n- * Extension of the {@link LockManager} interface with methods for\n- * datastore locking during the select and load process. Implementors of\n- * this interface can also take advantage of the fact that in the\n- * {@link LockManager#lock} and {@link LockManager#lockAll} methods, the\n- * given <code>conn</code> parameter, if any, will be an instance of\n- * {@link ConnectionInfo}.\n- *\n- * @author Abe White\n- */\n-public interface JDBCLockManager\n-    extends LockManager {\n-\n-    /**\n-     * Return whether to issue the given select FOR UPDATE, depending on\n-     * the capabilities of the dictionary and the fetch configuration.\n-     */\n-    public boolean selectForUpdate(Select sel, int lockLevel);\n-\n-    /**\n-     * Notification that the given instance was loaded via a result set\n-     * produced by a FOR UPDATE select.\n-     */\n-    public void loadedForUpdate(OpenJPAStateManager sm);\n-}"},{"sha":"5aae21623c978f60f277969bdf1e6cb23bff1dfa","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCSeq.java","status":"removed","additions":0,"deletions":41,"changes":41,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCSeq.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCSeq.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCSeq.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,41 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.kernel;\n-\n-import org.apache.openjpa.jdbc.meta.ClassMapping;\n-import org.apache.openjpa.jdbc.schema.SchemaGroup;\n-import org.apache.openjpa.kernel.Seq;\n-\n-/**\n- * Specialization of the the {@link Seq} interface to provide information\n- * on the schema needed by this sequence. Only sequences that require special\n- * tables that must be created by OpenJPA tools need to implement this\n- * interface.\n- *\n- * @author Abe White\n- */\n-public interface JDBCSeq\n-    extends Seq {\n-\n-    /**\n-     * Add any tables, etc needed by this factory for the given mapping\n-     * to the given schema group, if they do not exist already.\n-     */\n-    public void addSchema(ClassMapping mapping, SchemaGroup group);\n-}"},{"sha":"aa6b54f75b98d001b88d0bf31e7780b09433cf32","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStore.java","status":"removed","additions":0,"deletions":97,"changes":97,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStore.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStore.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStore.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,97 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.kernel;\n-\n-import java.sql.Connection;\n-\n-import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n-import org.apache.openjpa.jdbc.meta.ClassMapping;\n-import org.apache.openjpa.jdbc.meta.ValueMapping;\n-import org.apache.openjpa.jdbc.sql.DBDictionary;\n-import org.apache.openjpa.jdbc.sql.SQLFactory;\n-import org.apache.openjpa.kernel.StoreContext;\n-import org.apache.openjpa.util.Id;\n-\n-/**\n- * Represents the JDBC store.\n- *\n- * @author Abe White\n- * @since 0.4.0\n- */\n-public interface JDBCStore {\n-\n-    /**\n-     * Current persistence context.\n-     */\n-    public StoreContext getContext();\n-\n-    /**\n-     * Return the configuration for this runtime.\n-     */\n-    public JDBCConfiguration getConfiguration();\n-\n-    /**\n-     * Return the dictionary in use.\n-     */\n-    public DBDictionary getDBDictionary();\n-\n-    /**\n-     * Return the SQL factory for this runtime.\n-     */\n-    public SQLFactory getSQLFactory();\n-\n-    /**\n-     * If the lock manager in use is a {@link JDBCLockManager}, return it.\n-     */\n-    public JDBCLockManager getLockManager();\n-\n-    /**\n-     * Return a SQL connection to the database.\n-     * The <code>close</code> method should always be called on the connection\n-     * to free any resources it is using. When appropriate, the close\n-     * method is implemented as a no-op.\n-     */\n-    public Connection getConnection();\n-\n-    /**\n-     * Return the current default fetch configuration.\n-     */\n-    public JDBCFetchConfiguration getFetchConfiguration();\n-\n-    /**\n-     * Create a new datastore identity object from the given id value and\n-     * mapping.\n-     */\n-    public Id newDataStoreId(long id, ClassMapping mapping, boolean subs);\n-\n-    /**\n-     * Find the object with the given oid. Convenience method on top of\n-     * the store's persistence context.\n-     *\n-     * @param vm the mapping holding this oid, or null if not applicable\n-     */\n-    public Object find(Object oid, ValueMapping vm,\n-        JDBCFetchConfiguration fetch);\n-\n-    /**\n-     * Makes sure all subclasses of the given type are loaded in the JVM.\n-     * This is usually done automatically.\n-     */\n-    public void loadSubclasses(ClassMapping mapping);\n-}"},{"sha":"29b7ec1bf7691b2a45466d21e15753333850fb0b","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","status":"removed","additions":0,"deletions":1769,"changes":1769,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,1769 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.kernel;\n-\n-import java.sql.Connection;\n-import java.sql.PreparedStatement;\n-import java.sql.ResultSet;\n-import java.sql.SQLException;\n-import java.sql.Statement;\n-import java.util.ArrayList;\n-import java.util.BitSet;\n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.HashSet;\n-import java.util.Iterator;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n-\n-import javax.sql.DataSource;\n-\n-import org.apache.openjpa.enhance.PersistenceCapable;\n-import org.apache.openjpa.event.OrphanedKeyAction;\n-import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n-import org.apache.openjpa.jdbc.conf.QuerySQLCacheValue;\n-import org.apache.openjpa.jdbc.meta.ClassMapping;\n-import org.apache.openjpa.jdbc.meta.Discriminator;\n-import org.apache.openjpa.jdbc.meta.FieldMapping;\n-import org.apache.openjpa.jdbc.meta.ValueMapping;\n-import org.apache.openjpa.jdbc.schema.Column;\n-import org.apache.openjpa.jdbc.sql.DBDictionary;\n-import org.apache.openjpa.jdbc.sql.JoinSyntaxes;\n-import org.apache.openjpa.jdbc.sql.Joins;\n-import org.apache.openjpa.jdbc.sql.Result;\n-import org.apache.openjpa.jdbc.sql.SQLExceptions;\n-import org.apache.openjpa.jdbc.sql.SQLFactory;\n-import org.apache.openjpa.jdbc.sql.Select;\n-import org.apache.openjpa.jdbc.sql.SelectExecutor;\n-import org.apache.openjpa.jdbc.sql.Union;\n-import org.apache.openjpa.kernel.FetchConfiguration;\n-import org.apache.openjpa.kernel.LockManager;\n-import org.apache.openjpa.kernel.OpenJPAStateManager;\n-import org.apache.openjpa.kernel.PCState;\n-import org.apache.openjpa.kernel.QueryLanguages;\n-import org.apache.openjpa.kernel.Seq;\n-import org.apache.openjpa.kernel.StoreContext;\n-import org.apache.openjpa.kernel.StoreManager;\n-import org.apache.openjpa.kernel.StoreQuery;\n-import org.apache.openjpa.kernel.exps.ExpressionParser;\n-import org.apache.openjpa.lib.jdbc.DelegatingConnection;\n-import org.apache.openjpa.lib.jdbc.DelegatingPreparedStatement;\n-import org.apache.openjpa.lib.jdbc.DelegatingStatement;\n-import org.apache.openjpa.lib.log.Log;\n-import org.apache.openjpa.lib.rop.MergedResultObjectProvider;\n-import org.apache.openjpa.lib.rop.ResultObjectProvider;\n-import org.apache.openjpa.lib.util.Localizer;\n-import org.apache.openjpa.meta.ClassMetaData;\n-import org.apache.openjpa.meta.FetchGroup;\n-import org.apache.openjpa.meta.FieldMetaData;\n-import org.apache.openjpa.meta.JavaTypes;\n-import org.apache.openjpa.meta.ValueStrategies;\n-import org.apache.openjpa.util.ApplicationIds;\n-import org.apache.openjpa.util.Id;\n-import org.apache.openjpa.util.ImplHelper;\n-import org.apache.openjpa.util.InvalidStateException;\n-import org.apache.openjpa.util.OpenJPAId;\n-import org.apache.openjpa.util.StoreException;\n-import org.apache.openjpa.util.UserException;\n-\n-/**\n- * StoreManager plugin that uses JDBC to store persistent data in a\n- * relational data store.\n- *\n- * @author Abe White\n- * @nojavadoc\n- */\n-public class JDBCStoreManager \n-    implements StoreManager, JDBCStore {\n-\n-    private static final Localizer _loc = Localizer.forPackage\n-        (JDBCStoreManager.class);\n-\n-    private StoreContext _ctx = null;\n-    private JDBCConfiguration _conf = null;\n-    private DBDictionary _dict = null;\n-    private SQLFactory _sql = null;\n-    private JDBCLockManager _lm = null;\n-    private DataSource _ds = null;\n-    private RefCountConnection _conn = null;\n-    private boolean _active = false;\n-\n-    // track the pending statements so we can cancel them\n-    private Set _stmnts = Collections.synchronizedSet(new HashSet());\n-    \n-    private Map _sqlCache = null;\n-    private boolean _isQuerySQLCache = true;\n-    private static final Object _nullCacheValue = new Object();\n-    \n-    public StoreContext getContext() {\n-        return _ctx;\n-    }\n-\n-    public void setContext(StoreContext ctx) {\n-        setContext(ctx, (JDBCConfiguration) ctx.getConfiguration());\n-    }\n-    \n-    public void setContext(StoreContext ctx, JDBCConfiguration conf) {\n-        _ctx = ctx;\n-        _conf = conf;\n-        _dict = _conf.getDBDictionaryInstance();\n-        _sql = _conf.getSQLFactoryInstance();\n-\n-        LockManager lm = ctx.getLockManager();\n-        if (lm instanceof JDBCLockManager)\n-            _lm = (JDBCLockManager) lm;\n-\n-        if (!ctx.isManaged() && _conf.isConnectionFactoryModeManaged())\n-            _ds = _conf.getDataSource2(ctx);\n-        else\n-            _ds = _conf.getDataSource(ctx);\n-\n-        if (_conf.getUpdateManagerInstance().orderDirty())\n-            ctx.setOrderDirtyObjects(true);\n-        \n-        _sqlCache = _conf.getQuerySQLCacheInstance();\n-        _isQuerySQLCache = _conf.isQuerySQLCacheOn();\n-    }\n-\n-    public JDBCConfiguration getConfiguration() {\n-        return _conf;\n-    }\n-\n-    public DBDictionary getDBDictionary() {\n-        return _dict;\n-    }\n-\n-    public SQLFactory getSQLFactory() {\n-        return _sql;\n-    }\n-\n-    public JDBCLockManager getLockManager() {\n-        return _lm;\n-    }\n-\n-    public JDBCFetchConfiguration getFetchConfiguration() {\n-        return (JDBCFetchConfiguration) _ctx.getFetchConfiguration();\n-    }\n-\n-    public void beginOptimistic() {\n-    }\n-\n-    public void rollbackOptimistic() {\n-    }\n-\n-    public void begin() {\n-        _active = true;\n-        try {\n-            if ((!_ctx.isManaged() || !_conf.isConnectionFactoryModeManaged())\n-                && _conn.getAutoCommit())\n-                _conn.setAutoCommit(false);\n-        } catch (SQLException se) {\n-            _active = false;\n-            throw SQLExceptions.getStore(se, _dict);\n-        }\n-    }\n-\n-    public void commit() {\n-        try {\n-            if (!_ctx.isManaged() || !_conf.isConnectionFactoryModeManaged())\n-                _conn.commit();\n-        } catch (SQLException se) {\n-            try {\n-                _conn.rollback();\n-            } catch (SQLException se2) {\n-            }\n-            throw SQLExceptions.getStore(se, _dict);\n-        } finally {\n-            _active = false;\n-        }\n-    }\n-\n-    public void rollback() {\n-        // already rolled back ourselves?\n-        if (!_active)\n-            return;\n-\n-        try {\n-            if (_conn != null\n-                && (!_ctx.isManaged() || !_conf\n-                    .isConnectionFactoryModeManaged()))\n-                _conn.rollback();\n-        } catch (SQLException se) {\n-            throw SQLExceptions.getStore(se, _dict);\n-        } finally {\n-            _active = false;\n-        }\n-    }\n-\n-    public void retainConnection() {\n-        connect(false);\n-        _conn.setRetain(true);\n-    }\n-\n-    public void releaseConnection() {\n-        if (_conn != null)\n-            _conn.setRetain(false);\n-    }\n-\n-    public Object getClientConnection() {\n-        return new ClientConnection(getConnection());\n-    }\n-\n-    public Connection getConnection() {\n-        connect(true);\n-        return _conn;\n-    }\n-    \n-    protected DataSource getDataSource() {\n-    \treturn _ds;\n-    }\n-\n-    public boolean exists(OpenJPAStateManager sm, Object context) {\n-        // add where conditions on base class to avoid joins if subclass\n-        // doesn't use oid as identifier\n-        ClassMapping mapping = (ClassMapping) sm.getMetaData();\n-        return exists(mapping, sm.getObjectId(), context);\n-    }\n-\n-    private boolean exists(ClassMapping mapping, Object oid, Object context) {\n-        // add where conditions on base class to avoid joins if subclass\n-        // doesn't use oid as identifier\n-        Select sel = _sql.newSelect();\n-        while (mapping.getJoinablePCSuperclassMapping() != null)\n-            mapping = mapping.getJoinablePCSuperclassMapping();\n-\n-        sel.wherePrimaryKey(oid, mapping, this);\n-        try {\n-            return sel.getCount(this) != 0;\n-        } catch (SQLException se) {\n-            throw SQLExceptions.getStore(se, _dict);\n-        }\n-    }\n-\n-    public boolean syncVersion(OpenJPAStateManager sm, Object context) {\n-        ClassMapping mapping = (ClassMapping) sm.getMetaData();\n-        try {\n-            return mapping.getVersion().checkVersion(sm, this, true);\n-        } catch (SQLException se) {\n-            throw SQLExceptions.getStore(se, _dict);\n-        }\n-    }\n-\n-    public int compareVersion(OpenJPAStateManager state, Object v1, Object v2) {\n-        ClassMapping mapping = (ClassMapping) state.getMetaData();\n-        return mapping.getVersion().compareVersion(v1, v2);\n-    }\n-\n-    public boolean initialize(OpenJPAStateManager sm, PCState state,\n-        FetchConfiguration fetch, Object context) {\n-        ConnectionInfo info = (ConnectionInfo) context;\n-        try {\n-            return initializeState(sm, state, (JDBCFetchConfiguration) fetch, \n-                info);\n-        } catch (ClassNotFoundException cnfe) {\n-            throw new UserException(cnfe);\n-        } catch (SQLException se) {\n-            throw SQLExceptions.getStore(se, _dict);\n-        }\n-    }\n-\n-    /**\n-     * Initialize a newly-loaded instance.\n-     */\n-    protected boolean initializeState(OpenJPAStateManager sm, PCState state,\n-        JDBCFetchConfiguration fetch, ConnectionInfo info)\n-        throws ClassNotFoundException, SQLException {\n-        Object oid = sm.getObjectId();\n-        ClassMapping mapping = (ClassMapping) sm.getMetaData();\n-        Result res = null;\n-        try {\n-            if (info != null && info.result != null) {\n-                res = info.result;\n-                info.sm = sm;\n-                if (info.mapping == null)\n-                    info.mapping = mapping;\n-                mapping = info.mapping;\n-            } else if (oid instanceof OpenJPAId\n-                && !((OpenJPAId) oid).hasSubclasses()) {\n-                Boolean custom = customLoad(sm, mapping, state, fetch);\n-                if (custom != null)\n-                    return custom.booleanValue();\n-                res = getInitializeStateResult(sm, mapping, fetch,\n-                    Select.SUBS_EXACT);\n-                if (res == null && !selectPrimaryKey(sm, mapping, fetch))\n-                    return false;\n-                if (isEmptyResult(res))\n-                    return false;\n-            } else {\n-                ClassMapping[] mappings = mapping.\n-                    getIndependentAssignableMappings();\n-                if (mappings.length == 1) {\n-                    mapping = mappings[0];\n-                    Boolean custom = customLoad(sm, mapping, state, fetch);\n-                    if (custom != null)\n-                        return custom.booleanValue();\n-                    res = getInitializeStateResult(sm, mapping, fetch,\n-                        Select.SUBS_ANY_JOINABLE);\n-                    if (res == null && !selectPrimaryKey(sm, mapping, fetch))\n-                        return false;\n-                } else\n-                    res = getInitializeStateUnionResult(sm, mapping, mappings,\n-                        fetch);\n-                if (isEmptyResult(res))\n-                    return false;\n-            }\n-\n-            // figure out what type of object this is; the state manager\n-            // only guarantees to provide a base class\n-            Class type;\n-            if ((type = getType(res, mapping)) == null) {\n-                if (res.getBaseMapping() != null)\n-                    mapping = res.getBaseMapping();\n-                res.startDataRequest(mapping.getDiscriminator());\n-                try {\n-                    type = mapping.getDiscriminator().getClass(this, mapping,\n-                        res);\n-                } finally {\n-                    res.endDataRequest();\n-                }\n-            }\n-\n-            // initialize the state manager; this may change the mapping\n-            // and the object id instance if the type as determined\n-            // from the indicator is a subclass of expected type\n-            sm.initialize(type, state);\n-\n-            if (info != null && info.result != null) {\n-                FieldMapping mappedByFieldMapping = info.result.\n-                    getMappedByFieldMapping();\n-                Object mappedByObject = info.result.getMappedByValue();\n-                if (mappedByFieldMapping != null && mappedByObject != null)\n-                    if (mappedByObject instanceof OpenJPAId &&\n-                        mapping.getExtraFieldDataIndex(mappedByFieldMapping.\n-                        getIndex()) != -1)\n-                        // The inverse relation can not be set since\n-                        // we are eagerly loading this sm for\n-                        // a sm owner that is still in the process of \n-                        // initializing itself.\n-                        // Remember owner oid by setIntermediate().\n-                        // The inverse relation is set later by\n-                        // setInverseRelation() when the sm owner is fully\n-                        // initialized.\n-                        sm.setIntermediate(mappedByFieldMapping.getIndex(),\n-                            mappedByObject);\n-                    else\n-                        setMappedBy(sm, mappedByFieldMapping, mappedByObject);\n-            }\n-            // load the selected mappings into the given state manager\n-            if (res != null) {\n-                // re-get the mapping in case the instance was a subclass\n-                mapping = (ClassMapping) sm.getMetaData();\n-                load(mapping, sm, fetch, res);\n-                getVersion(mapping, sm, res);\n-                setInverseRelation(sm, mapping, res);\n-            }\n-            return true;\n-        } finally {\n-            if (res != null && (info == null || res != info.result))\n-                res.close();\n-        }\n-    }\n-\n-    private void setInverseRelation(OpenJPAStateManager owner,\n-        ClassMapping mapping, Result res) {\n-        FieldMapping[] fms = mapping.getFieldMappings();\n-\n-        // At this point, the owner is fully initialized.\n-        // Check if the owner has eagerly loaded ToMany relations.\n-        for (int i = 0; i < fms.length; i++) {\n-            if (res.getEager(fms[i]) != null) {\n-                Object coll =  owner.fetchObject(fms[i].getIndex());\n-                if (coll instanceof Collection && \n-                    ((Collection) coll).size() > 0) {\n-                    // Found eagerly loaded collection.\n-                    // Publisher (1) <==>  (M) Magazine\n-                    //    publisher has a EAGER OneToMany relation\n-                    //    magazine has a EAGER or LAZY ManyToOne publisher\n-                    // For each member (Magazine) in the collection, \n-                    // set its inverse relation (Publisher).\n-                    for (Iterator itr = ((Collection) coll).iterator();\n-                        itr.hasNext();) {\n-                        PersistenceCapable pc = (PersistenceCapable) itr.next();\n-\n-                        if (pc == null)\n-                            continue;\n-\n-                        OpenJPAStateManager sm = (OpenJPAStateManager) pc.\n-                            pcGetStateManager();\n-                        FieldMapping[] fmd = ((ClassMapping) sm.getMetaData()).\n-                            getFieldMappings();\n-                        for (int j = 0; j < fmd.length; j++) {\n-                            Object oid = sm.getIntermediate(fmd[j].getIndex());\n-                            // if oid was setIntermediate() previously\n-                            // and it is the same as the owner,\n-                            // then set the inverse relation\n-                            if (oid != null &&\n-                                oid.equals(owner.getObjectId())) {\n-                                sm.storeObject(fmd[j].getIndex(),\n-                                    owner.getPersistenceCapable());\n-                                break;\n-                            }\n-                        }\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n-    protected void setMappedBy(OpenJPAStateManager sm,\n-        FieldMapping mappedByFieldMapping, Object mappedByObject) {\n-        ClassMapping mapping = (ClassMapping) sm.getMetaData();\n-        FieldMapping[] fms = mapping.getDeclaredFieldMappings();\n-        for (int i = 0; i < fms.length; i++) {\n-            if (fms[i] == mappedByFieldMapping) {\n-                sm.storeObject(fms[i].getIndex(), mappedByObject);\n-                return;\n-            }\n-        }\n-    }\n-\n-    /**\n-     * This method is to provide override for non-JDBC or JDBC-like \n-     * implementation of getting version from the result set.\n-     */\n-    protected void getVersion(ClassMapping mapping, OpenJPAStateManager sm,\n-        Result res) throws SQLException {\n-        mapping.getVersion().afterLoad(sm, this);\n-    }\n-    \n-    /**\n-     * This method is to provide override for non-JDBC or JDBC-like \n-     * implementation of checking whether the result set is empty or not.\n-     */\n-    protected boolean isEmptyResult(Result res) throws SQLException {\n-        if (res != null && !res.next())\n-            return true;\n-        return false;\n-    }\n-    \n-    /**\n-     * This method is to provide override for non-JDBC or JDBC-like \n-     * implementation of getting type from the result set.\n-     */\n-    protected Class getType(Result res, ClassMapping mapping){\n-        if (res == null)\n-            return mapping.getDescribedType();\n-        return null;\n-    }\n-\n-    /**\n-     * Allow the mapping to custom load data. Return null if the mapping\n-     * does not use custom loading.\n-     */\n-    private Boolean customLoad(OpenJPAStateManager sm, ClassMapping mapping,\n-        PCState state, JDBCFetchConfiguration fetch)\n-        throws ClassNotFoundException, SQLException {\n-        // check to see if the mapping takes care of initialization\n-        if (!mapping.customLoad(sm, this, state, fetch))\n-            return null;\n-        if (sm.getManagedInstance() != null) {\n-            mapping.getVersion().afterLoad(sm, this);\n-            return Boolean.TRUE;\n-        }\n-        return Boolean.FALSE;\n-    }\n-\n-    /**\n-     * Select the data for the given instance and return the result. Return\n-     * null if there is no data in the current fetch groups to select.\n-     */\n-    private Result getInitializeStateResult(OpenJPAStateManager sm,\n-        ClassMapping mapping, JDBCFetchConfiguration fetch, int subs)\n-        throws SQLException {\n-        List params = new ArrayList();\n-        Select sel = newSelect(sm, mapping, fetch, subs, params);\n-        if (sel == null) return null;\n-        return sel.execute(this, fetch, params);\n-    }\n-\n-    private Select newSelect(OpenJPAStateManager sm,\n-        ClassMapping mapping, JDBCFetchConfiguration fetch, int subs,\n-        List params) {\n-        if (!_isQuerySQLCache) \n-            return newSelect(sm, mapping, fetch, subs);       \n-           \n-        Map<SelectKey, Select> selectImplCacheMap = \n-            getCacheMapFromQuerySQLCache(JDBCStoreManager.class);\n-        JDBCFetchConfiguration fetchClone = new JDBCFetchConfigurationImpl();\n-        fetchClone.copy(fetch);\n-        SelectKey selKey = new SelectKey(mapping, null, fetchClone);\n-        Select sel = null;\n-        boolean found = true;\n-        Object obj = selectImplCacheMap.get(selKey);\n-        if (obj == null) {\n-            synchronized (selectImplCacheMap) {\n-                obj = selectImplCacheMap.get(selKey);\n-                if (obj == null) {\n-                    // Not found in cache, create a new select\n-                    obj = newSelect(sm, mapping, fetch, subs);\n-                    found = false;\n-                }\n-                    \n-                if (obj == null) {\n-                    // If the generated SelectImpl is null, store a generic\n-                    // known object in the cache as a placeholder. Some map \n-                    // implementations do not allow null values.\n-                    obj = _nullCacheValue;\n-                    found = false;\n-                }\n-                else if (obj != _nullCacheValue)\n-                {\n-                    sel = (Select)obj;\n-                    if (sel.getSQL() == null) {\n-                        sel.setSQL(this, fetch);\n-                        found = false;\n-                    }\n-                }\n-                if (!found) {\n-                    addToSqlCache(selectImplCacheMap, selKey, obj);\n-                }\n-            }\n-        }\n-\n-        if (obj != null && obj != _nullCacheValue)\n-            sel = (Select) obj;\n-\n-        Log log = _conf.getLog(JDBCConfiguration.LOG_JDBC);\n-        if (log.isTraceEnabled()) {\n-            if (!found)\n-                log.trace(_loc.get(\"cache-missed\", mapping, this.getClass()));\n-            else\n-                log.trace(_loc.get(\"cache-hit\", mapping, this.getClass()));\n-        }\n-\n-        if (sel == null)\n-            return null;\n-        \n-        Object oid = sm.getObjectId();\n-        Column[] cols = mapping.getPrimaryKeyColumns();\n-        sel.wherePrimaryKey(mapping, cols, cols, oid, this, \n-        \tnull, null, params);\n-        return sel;\n-    }\n-\n-    protected Select newSelect(OpenJPAStateManager sm,\n-        ClassMapping mapping, JDBCFetchConfiguration fetch, int subs) {\n-        Select sel = _sql.newSelect();\n-        if (!select(sel, mapping, subs, sm, null, fetch,\n-            JDBCFetchConfiguration.EAGER_JOIN, true, false))\n-            return null;\n-        sel.wherePrimaryKey(sm.getObjectId(), mapping, this);\n-        sel.setExpectedResultCount(1, false);\n-        return sel;\n-    }\n-\n-    /**\n-     * Select a union of the data for the given instance from possible concrete\n-     * mappings and return the result.\n-     */\n-    private Result getInitializeStateUnionResult(final OpenJPAStateManager sm,\n-        ClassMapping mapping, final ClassMapping[] mappings,\n-        final JDBCFetchConfiguration fetch) throws SQLException {\n-        final JDBCStoreManager store = this;\n-        final int eager = Math.min(fetch.getEagerFetchMode(),\n-            JDBCFetchConfiguration.EAGER_JOIN);\n-\n-        Union union = _sql.newUnion(mappings.length);\n-        union.setExpectedResultCount(1, false);\n-        if (fetch.getSubclassFetchMode(mapping) != fetch.EAGER_JOIN)\n-            union.abortUnion();\n-        union.select(new Union.Selector() {\n-            public void select(Select sel, int i) {\n-                sel.select(mappings[i], Select.SUBS_ANY_JOINABLE, store, fetch,\n-                    eager);\n-                sel.wherePrimaryKey(sm.getObjectId(), mappings[i], store);\n-            }\n-        });\n-        return union.execute(this, fetch);\n-    }\n-\n-    /**\n-     * Select primary key data to make sure the given instance exists, locking\n-     * if needed.\n-     */\n-    private boolean selectPrimaryKey(OpenJPAStateManager sm,\n-        ClassMapping mapping, JDBCFetchConfiguration fetch)\n-        throws SQLException {\n-        // select pks from base class record to ensure it exists and lock\n-        // it if needed\n-        ClassMapping base = mapping;\n-        while (base.getJoinablePCSuperclassMapping() != null)\n-            base = base.getJoinablePCSuperclassMapping();\n-\n-        Select sel = _sql.newSelect();\n-        sel.select(base.getPrimaryKeyColumns());\n-        sel.wherePrimaryKey(sm.getObjectId(), base, this);\n-        Result exists = sel.execute(this, fetch);\n-        try {\n-            if (isEmptyResult(exists))\n-                return false;\n-\n-            // record locked?\n-            if (_active && _lm != null && exists.isLocking())\n-                _lm.loadedForUpdate(sm);\n-            return true;\n-        } finally {\n-            exists.close();\n-        }\n-    }\n-\n-    public boolean load(OpenJPAStateManager sm, BitSet fields,\n-        FetchConfiguration fetch, int lockLevel, Object context) {\n-        JDBCFetchConfiguration jfetch = (JDBCFetchConfiguration) fetch;\n-\n-        // get a connection, or reuse current one\n-        ConnectionInfo info = (ConnectionInfo) context;\n-        Result res = null;\n-        if (info != null) {\n-            // if initialize() fails to load required fields, then this method\n-            // is called; make sure not to try to use the given result if it's\n-            // the same one we just failed to completely initialize() with\n-            if (info.sm != sm)\n-                res = info.result;\n-            info.sm = null;\n-        }\n-        try {\n-            // if there's an existing result, load all we can from it\n-            ClassMapping mapping = (ClassMapping) sm.getMetaData();\n-            if (res != null) {\n-                load(mapping, sm, jfetch, res);\n-                removeLoadedFields(sm, fields);\n-            }\n-\n-            // if the instance is hollow and there's a customized\n-            // get by id method, use it\n-            if (sm.getLoaded().length() == 0 \n-                && mapping.customLoad(sm, this, null, jfetch))\n-                removeLoadedFields(sm, fields);\n-\n-            //### select is kind of a big object, and in some cases we don't\n-            //### use it... would it be worth it to have a small shell select\n-            //### object that only creates a real select when actually used?\n-\n-            Select sel = _sql.newSelect();\n-            if (select(sel, mapping, Select.SUBS_EXACT, sm, fields, jfetch,\n-                EagerFetchModes.EAGER_JOIN, true, false)) {\n-                sel.wherePrimaryKey(sm.getObjectId(), mapping, this);\n-                res = sel.execute(this, jfetch, lockLevel);\n-                try {\n-                 \tif (isEmptyResult(res))\n-                        return false;\n-                    load(mapping, sm, jfetch, res);\n-                } finally {\n-                    res.close();\n-                }\n-            }\n-\n-            // now allow the fields to load themselves individually too\n-            FieldMapping[] fms = mapping.getFieldMappings();\n-            for (int i = 0; i < fms.length; i++)\n-                if (fields.get(i) && !sm.getLoaded().get(i))\n-                    fms[i].load(sm, this, jfetch.traverseJDBC(fms[i]));\n-            mapping.getVersion().afterLoad(sm, this);\n-            return true;\n-        } catch (ClassNotFoundException cnfe) {\n-            throw new StoreException(cnfe);\n-        } catch (SQLException se) {\n-            throw SQLExceptions.getStore(se, _dict);\n-        }\n-    }\n-\n-    /**\n-     * Return a list formed by removing all loaded fields from the given one.\n-     */\n-    private void removeLoadedFields(OpenJPAStateManager sm, BitSet fields) {\n-        for (int i = 0, len = fields.length(); i < len; i++)\n-            if (fields.get(i) && sm.getLoaded().get(i))\n-                fields.clear(i);\n-    }\n-\n-    public Collection loadAll(Collection sms, PCState state, int load,\n-        FetchConfiguration fetch, Object context) {\n-        return ImplHelper.loadAll(sms, this, state, load, fetch, context);\n-    }\n-\n-    public void beforeStateChange(OpenJPAStateManager sm, PCState fromState,\n-        PCState toState) {\n-    }\n-\n-    public Collection flush(Collection sms) {\n-        return _conf.getUpdateManagerInstance().flush(sms, this);\n-    }\n-\n-    public boolean cancelAll() {\n-        // note that this method does not lock the context, since\n-        // we want to allow a different thread to be able to cancel the\n-        // outstanding statement on a different context\n-\n-        Collection stmnts;\n-        synchronized (_stmnts) {\n-            if (_stmnts.isEmpty())\n-                return false;\n-            stmnts = new ArrayList(_stmnts);\n-        }\n-\n-        try {\n-            for (Iterator itr = stmnts.iterator(); itr.hasNext();)\n-                ((Statement) itr.next()).cancel();\n-            return true;\n-        } catch (SQLException se) {\n-            throw SQLExceptions.getStore(se, _dict);\n-        }\n-    }\n-\n-    public boolean assignObjectId(OpenJPAStateManager sm, boolean preFlush) {\n-        ClassMetaData meta = sm.getMetaData();\n-        if (meta.getIdentityType() == ClassMetaData.ID_APPLICATION)\n-            return ApplicationIds.assign(sm, this, preFlush);\n-\n-        // datastore identity\n-        Object val = ImplHelper.generateIdentityValue(_ctx, meta,\n-            JavaTypes.LONG);\n-        if (val == null && meta.getIdentityStrategy() != ValueStrategies.NATIVE)\n-            return false;\n-        if (val == null)\n-            val = getDataStoreIdSequence(meta).next(_ctx, meta);\n-        sm.setObjectId(newDataStoreId(val, meta));\n-        return true;\n-    }\n-\n-    public boolean assignField(OpenJPAStateManager sm, int field,\n-        boolean preFlush) {\n-        FieldMetaData fmd = sm.getMetaData().getField(field);\n-        Object val = ImplHelper.generateFieldValue(_ctx, fmd);\n-        if (val == null)\n-            return false;\n-        sm.store(field, val);\n-        return true;\n-    }\n-\n-    public Class getManagedType(Object oid) {\n-        if (oid instanceof Id)\n-            return ((Id) oid).getType();\n-        return null;\n-    }\n-\n-    public Class getDataStoreIdType(ClassMetaData meta) {\n-        return Id.class;\n-    }\n-\n-    public Object copyDataStoreId(Object oid, ClassMetaData meta) {\n-        Id id = (Id) oid;\n-        return new Id(meta.getDescribedType(), id.getId(), id.hasSubclasses());\n-    }\n-\n-    public Object newDataStoreId(Object val, ClassMetaData meta) {\n-        return Id.newInstance(meta.getDescribedType(), val);\n-    }\n-\n-    public Id newDataStoreId(long id, ClassMapping mapping, boolean subs) {\n-        return new Id(mapping.getDescribedType(), id, subs);\n-    }\n-\n-    public ResultObjectProvider executeExtent(ClassMetaData meta,\n-        final boolean subclasses, FetchConfiguration fetch) {\n-        ClassMapping mapping = (ClassMapping) meta;\n-        final ClassMapping[] mappings;\n-        if (subclasses)\n-            mappings = mapping.getIndependentAssignableMappings();\n-        else\n-            mappings = new ClassMapping[] { mapping };\n-\n-        ResultObjectProvider[] rops = null;\n-        final JDBCFetchConfiguration jfetch = (JDBCFetchConfiguration) fetch;\n-        if (jfetch.getSubclassFetchMode(mapping) != jfetch.EAGER_JOIN)\n-            rops = new ResultObjectProvider[mappings.length];\n-\n-        try {\n-            // check for custom loads\n-            ResultObjectProvider rop;\n-            for (int i = 0; i < mappings.length; i++) {\n-                rop = mappings[i].customLoad(this, subclasses, jfetch, 0,\n-                    Long.MAX_VALUE);\n-                if (rop != null) {\n-                    if (rops == null)\n-                        rops = new ResultObjectProvider[mappings.length];\n-                    rops[i] = rop;\n-                }\n-            }\n-\n-            // if we're selecting independent mappings separately or have\n-            // custom loads, do individual selects for each class\n-            rop = null;\n-            if (rops != null) {\n-                for (int i = 0; i < mappings.length; i++) {\n-                    if (rops[i] != null)\n-                        continue;\n-\n-                    Select sel = _sql.newSelect();\n-                    sel.setLRS(true);\n-                    BitSet paged = selectExtent(sel, mappings[i], jfetch,\n-                        subclasses);\n-                    if (paged == null)\n-                        rops[i] = new InstanceResultObjectProvider(sel,\n-                            mappings[i], this, jfetch);\n-                    else\n-                        rops[i] = new PagingResultObjectProvider(sel,\n-                            mappings[i], this, jfetch, paged, Long.MAX_VALUE);\n-                }\n-                if (rops.length == 1)\n-                    return rops[0];\n-                return new MergedResultObjectProvider(rops);\n-            }\n-\n-            // perform a union on all independent classes\n-            Union union = _sql.newUnion(mappings.length);\n-            union.setLRS(true);\n-            final BitSet[] paged = new BitSet[mappings.length];\n-            union.select(new Union.Selector() {\n-                public void select(Select sel, int idx) {\n-                    paged[idx] = selectExtent(sel, mappings[idx], jfetch,\n-                        subclasses);\n-                }\n-            });\n-\n-            // using paging rop if any union element has paged fields\n-            for (int i = 0; i < paged.length; i++) {\n-                if (paged[i] != null)\n-                    return new PagingResultObjectProvider(union, mappings,\n-                        JDBCStoreManager.this, jfetch, paged, Long.MAX_VALUE);\n-            }\n-            return new InstanceResultObjectProvider(union, mappings[0], this,\n-                jfetch);\n-        } catch (SQLException se) {\n-            throw SQLExceptions.getStore(se, _dict);\n-        }\n-    }\n-\n-    /**\n-     * Select the given mapping for use in an extent, returning paged fields.\n-     */\n-    private BitSet selectExtent(Select sel, ClassMapping mapping,\n-        JDBCFetchConfiguration fetch, boolean subclasses) {\n-        int subs = (subclasses) ? Select.SUBS_JOINABLE : Select.SUBS_NONE;\n-        // decide between paging and standard iteration\n-        BitSet paged = PagingResultObjectProvider.getPagedFields(sel, mapping,\n-            this, fetch, JDBCFetchConfiguration.EAGER_PARALLEL,\n-            Long.MAX_VALUE);\n-        if (paged == null)\n-            sel.selectIdentifier(mapping, subs, this, fetch,\n-                JDBCFetchConfiguration.EAGER_PARALLEL);\n-        else\n-            sel.selectIdentifier(mapping, subs, this, fetch,\n-                JDBCFetchConfiguration.EAGER_JOIN);\n-        return paged;\n-    }\n-\n-    public StoreQuery newQuery(String language) {\n-        ExpressionParser ep = QueryLanguages.parserForLanguage(language);\n-        if (ep != null)\n-            return new JDBCStoreQuery(this, ep);\n-        if (QueryLanguages.LANG_SQL.equals(language))\n-            return new SQLStoreQuery(this);\n-        return null;\n-    }\n-\n-    public FetchConfiguration newFetchConfiguration() {\n-        return new JDBCFetchConfigurationImpl();\n-    }\n-\n-    public Seq getDataStoreIdSequence(ClassMetaData meta) {\n-        if (meta.getIdentityStrategy() == ValueStrategies.NATIVE\n-            || meta.getIdentityStrategy() == ValueStrategies.NONE)\n-            return _conf.getSequenceInstance();\n-        return null;\n-    }\n-\n-    public Seq getValueSequence(FieldMetaData fmd) {\n-        return null;\n-    }\n-\n-    public void close() {\n-        if (_conn != null)\n-            _conn.free();\n-    }\n-\n-    /////////////\n-    // Utilities\n-    /////////////\n-\n-    /**\n-     * Connect to the db.\n-     */\n-    private void connect(boolean ref) {\n-        _ctx.lock();\n-        try {\n-            // connect if the connection is currently null, or if\n-            // the connection has been closed out from under us\n-            if (_conn == null)\n-                _conn = connectInternal();\n-            if (ref)\n-                _conn.ref();\n-        } catch (SQLException se) {\n-            throw SQLExceptions.getStore(se, _dict);\n-        } finally {\n-            _ctx.unlock();\n-        }\n-    }\n-\n-    /**\n-     * Connect to the database. This method is separated out so that it\n-     * can be overridden.\n-     */\n-    protected RefCountConnection connectInternal() throws SQLException {\n-        return new RefCountConnection(_ds.getConnection());\n-    }\n-\n-    /**\n-     * Find the object with the given oid.\n-     */\n-    public Object find(Object oid, ValueMapping vm, \n-        JDBCFetchConfiguration fetch) {\n-        if (oid == null)\n-            return null;\n-        Object pc = _ctx.find(oid, fetch, null, null, 0);\n-        if (pc == null && vm != null) {\n-            OrphanedKeyAction action = _conf.getOrphanedKeyActionInstance();\n-            pc = action.orphan(oid, null, vm);\n-        }\n-        return pc;\n-    }\n-\n-    /**\n-     * Load the object in the current row of the given result.\n-     */\n-    public Object load(ClassMapping mapping, JDBCFetchConfiguration fetch,\n-        BitSet exclude, Result result) throws SQLException {\n-        if (!mapping.isMapped())\n-            throw new InvalidStateException(_loc.get(\"virtual-mapping\", \n-                mapping));\n-\n-        // get the object id for the row; base class selects pk columns\n-        ClassMapping base = mapping;\n-        while (base.getJoinablePCSuperclassMapping() != null)\n-            base = base.getJoinablePCSuperclassMapping();\n-        Object oid = base.getObjectId(this, result, null, true, null);\n-        if (oid == null)\n-            return null;\n-\n-        ConnectionInfo info = new ConnectionInfo();\n-        info.result = result;\n-        info.mapping = mapping;\n-\n-        // if inverse relation is known, exclude loading during find\n-        exclude = excludeInverseRelation(mapping, info, exclude);\n-        return _ctx.find(oid, fetch, exclude, info, 0);\n-    }\n-\n-    private BitSet excludeInverseRelation(ClassMapping mapping,\n-        ConnectionInfo info, BitSet exclude) {\n-        FieldMapping inverse = info.result.getMappedByFieldMapping();\n-        if (inverse != null) {\n-            FieldMapping[] fms = mapping.getDefinedFieldMappings();\n-            if (exclude == null)\n-                exclude = new BitSet(fms.length);\n-            for (int i = 0; i < fms.length; i++) {\n-                if (fms[i] == inverse) {\n-                    exclude.set(fms[i].getIndex());\n-                    break;\n-                }\n-            }\n-        }\n-        return exclude;\n-    }\n-\n-    /**\n-     * Load the given state manager with data from the result set. Only\n-     * mappings originally selected will be loaded.\n-     */\n-    private void load(ClassMapping mapping, OpenJPAStateManager sm,\n-        JDBCFetchConfiguration fetch, Result res) throws SQLException {\n-        FieldMapping eagerToMany = load(mapping, sm, fetch, res, null);\n-        if (eagerToMany != null)\n-            eagerToMany.loadEagerJoin(sm, this, fetch.traverseJDBC(eagerToMany),\n-                res);\n-        if (_active && _lm != null && res.isLocking())\n-            _lm.loadedForUpdate(sm);\n-    }\n-\n-    /**\n-     * Load the fields of the given mapping. Return any to-many eager field\n-     * without loading it.\n-     */\n-    private FieldMapping load(ClassMapping mapping, OpenJPAStateManager sm,\n-        JDBCFetchConfiguration fetch, Result res, FieldMapping eagerToMany)\n-        throws SQLException {\n-        if (mapping.customLoad(sm, this, fetch, res))\n-            return eagerToMany;\n-\n-        // load superclass data; base class loads version\n-        ClassMapping parent = mapping.getJoinablePCSuperclassMapping();\n-        if (parent != null)\n-            eagerToMany = load(parent, sm, fetch, res, eagerToMany);\n-        else if (sm.getVersion() == null)\n-            mapping.getVersion().load(sm, this, res);\n-\n-        // load unloaded fields\n-        FieldMapping[] fms = mapping.getDefinedFieldMappings();\n-        Object eres, processed;\n-        for (int i = 0; i < fms.length; i++) {\n-            if (fms[i].isPrimaryKey() || sm.getLoaded().get(fms[i].getIndex()))\n-                continue;\n-            \n-            // check for eager result, and if not present do standard load\n-            eres = res.getEager(fms[i]);\n-            res.startDataRequest(fms[i]);\n-            try {\n-               if (eres == res) {\n-                    if (eagerToMany == null && fms[i].isEagerSelectToMany())\n-                        eagerToMany = fms[i];\n-                    else\n-                        fms[i].loadEagerJoin(sm, this, \n-                        \tfetch.traverseJDBC(fms[i]), res);\n-                } else if (eres != null) {\n-                    processed = fms[i].loadEagerParallel(sm, this, \n-                    \tfetch.traverseJDBC(fms[i]), eres);\n-                    if (processed != eres)\n-                        res.putEager(fms[i], processed);\n-                } else\n-                    fms[i].load(sm, this, fetch.traverseJDBC(fms[i]), res);\n-            } finally {\n-                res.endDataRequest();\n-            }\n-        }\n-        return eagerToMany;\n-    }\n-\n-    /**\n-     * For implementation use only.\n-     * Return a select for the proper mappings. Return null if no select is\n-     * needed. The method is designed to be complementary to the load methods.\n-     *\n-     * @param sel select to build on\n-     * @param mapping the mapping for the base type to select for\n-     * @param subs whether the select might include subclasses of the\n-     * given mapping\n-     * @param sm state manager if an instance is being loaded or\n-     * initialized, else null\n-     * @param fields if a state manager is being loaded, the set of\n-     * fields that must be loaded in order, else null\n-     * @param fetch the fetch configuration; used if no specific fields\n-     * must be loaded, and used when selecting relations\n-     * @param eager eager fetch mode to use\n-     * @param ident whether to select primary key columns as distinct\n-     * identifiers\n-     * @param outer whether we're outer-joining to this type\n-     * @return true if the select is required, false otherwise\n-     */\n-    public boolean select(Select sel, ClassMapping mapping, int subs,\n-        OpenJPAStateManager sm, BitSet fields, JDBCFetchConfiguration fetch,\n-        int eager, boolean ident, boolean outer) {\n-        // add class conditions so that they're cloned for any batched selects\n-        boolean joinedSupers = false;\n-        if ((sm == null || sm.getPCState() == PCState.TRANSIENT)\n-            && (subs == Select.SUBS_JOINABLE || subs == Select.SUBS_NONE)) {\n-            loadSubclasses(mapping); \n-            Joins joins = (outer) ? sel.newOuterJoins() : null;\n-            joinedSupers = mapping.getDiscriminator().addClassConditions(sel,\n-                subs == Select.SUBS_JOINABLE, joins);\n-        }\n-\n-        // create all our eager selects so that those fields are reserved\n-        // and cannot be reused during the actual eager select process,\n-        // preventing infinite recursion\n-        eager = Math.min(eager, fetch.getEagerFetchMode());\n-        FieldMapping eagerToMany = createEagerSelects(sel, mapping, sm, fields,\n-            fetch, eager);\n-\n-        // select all base class mappings; do this after batching so that\n-        // the joins needed by these selects don't get in the WHERE clause\n-        // of the batched selects\n-        int seld = selectBaseMappings(sel, mapping, mapping, sm, fields,\n-            fetch, eager, eagerToMany, ident, joinedSupers);\n-\n-        // select eager to-many relations last because during load they\n-        // advance the result set and could exhaust it, so no other mappings\n-        // can load afterwords\n-        if (eagerToMany != null)\n-            eagerToMany.selectEagerJoin(sel, sm, this, \n-                fetch.traverseJDBC(eagerToMany), eager);\n-\n-        // optionally select subclass mappings\n-        if (subs == Select.SUBS_JOINABLE || subs == Select.SUBS_ANY_JOINABLE)\n-            selectSubclassMappings(sel, mapping, sm, fetch);\n-        if (sm != null)\n-            sel.setDistinct(false);\n-        return seld > 0;\n-    }\n-\n-    /**\n-     * Mark the fields of this mapping as reserved so that eager fetches can't\n-     * get into infinite recursive situations.\n-     */\n-    private FieldMapping createEagerSelects(Select sel, ClassMapping mapping,\n-        OpenJPAStateManager sm, BitSet fields, JDBCFetchConfiguration fetch,\n-        int eager) {\n-        if (mapping == null || eager == JDBCFetchConfiguration.EAGER_NONE)\n-            return null;\n-\n-        FieldMapping eagerToMany = createEagerSelects(sel, \n-            mapping.getJoinablePCSuperclassMapping(), sm, fields, fetch, eager);\n-\n-        FieldMapping[] fms = mapping.getDefinedFieldMappings();\n-        boolean inEagerJoin = sel.hasEagerJoin(false);\n-        int sels;\n-        int jtype;\n-        int mode;\n-        for (int i = 0; i < fms.length; i++) {\n-            mode = fms[i].getEagerFetchMode();\n-            if (mode == fetch.EAGER_NONE)\n-                continue;\n-            if (!requiresSelect(fms[i], sm, fields, fetch))\n-                continue;\n-\n-            // try to select with join first\n-            jtype = (fms[i].getNullValue() == fms[i].NULL_EXCEPTION) \n-                ? sel.EAGER_INNER : sel.EAGER_OUTER;\n-            if (mode != fetch.EAGER_PARALLEL && !fms[i].isEagerSelectToMany()\n-                && fms[i].supportsSelect(sel, jtype, sm, this, fetch) > 0\n-                && sel.eagerClone(fms[i], jtype, false, 1) != null)\n-                continue;\n-\n-            boolean hasJoin = fetch.hasJoin(fms[i].getFullName(false));\n-\n-            // if the field declares a preferred select mode of join or does not\n-            // have a preferred mode and we're doing a by-id lookup, try\n-            // to use a to-many join also.  currently we limit eager\n-            // outer joins to non-LRS, non-ranged selects that don't already\n-            // have an eager to-many join\n-            if ((hasJoin || mode == fetch.EAGER_JOIN \n-                || (mode == fetch.DEFAULT && sm != null))\n-                && fms[i].isEagerSelectToMany()\n-                && !inEagerJoin\n-                && !sel.hasEagerJoin(true)\n-                && (!sel.getAutoDistinct() || (!sel.isLRS()\n-                && sel.getStartIndex() == 0 \n-                && sel.getEndIndex() == Long.MAX_VALUE))\n-                && fms[i].supportsSelect(sel, jtype, sm, this, fetch) > 0) {\n-                if (sel.eagerClone(fms[i], jtype, true, 1) != null)\n-                    eagerToMany = fms[i];\n-                else\n-                    continue;\n-            }\n-\n-            // finally, try parallel\n-            if (eager == fetch.EAGER_PARALLEL\n-                && (sels = fms[i].supportsSelect(sel, sel.EAGER_PARALLEL, sm,\n-                this, fetch)) != 0)\n-                sel.eagerClone(fms[i], Select.EAGER_PARALLEL, \n-                    fms[i].isEagerSelectToMany(), sels);\n-        }\n-        return eagerToMany;\n-    }\n-\n-    /**\n-     * Determine if the given field needs to be selected.\n-     */\n-    private static boolean requiresSelect(FieldMapping fm,\n-        OpenJPAStateManager sm, BitSet fields, JDBCFetchConfiguration fetch) {\n-        if (fields != null)\n-            return fields.get(fm.getIndex());\n-        if (sm != null && sm.getPCState() != PCState.TRANSIENT\n-            && sm.getLoaded().get(fm.getIndex()))\n-            return false;\n-        return fetch.requiresFetch(fm) == FetchConfiguration.FETCH_LOAD;\n-    }\n-\n-    /**\n-     * Select the field mappings of the given class and all its superclasses.\n-     *\n-     * @param sel the select to use\n-     * @param mapping the most-derived type to select for\n-     * @param orig the original mapping type selected\n-     * @param sm the instance being selected for, or null if none\n-     * @param fields the fields to load\n-     * @param fetch fetch configuration to use for loading relations\n-     * @param eager the eager fetch mode to use\n-     * @param joined whether the class has already been joined down to\n-     * its base class\n-     * @return &gt; 0 if the select is required, 0 if data was\n-     * selected but is not required, and &lt; 0 if nothing was selected\n-     */\n-    private int selectBaseMappings(Select sel, ClassMapping mapping,\n-        ClassMapping orig, OpenJPAStateManager sm, BitSet fields,\n-        JDBCFetchConfiguration fetch, int eager, FieldMapping eagerToMany,\n-        boolean ident, boolean joined) {\n-        ClassMapping parent = mapping.getJoinablePCSuperclassMapping();\n-        if (parent == null && !mapping.isMapped())\n-            throw new InvalidStateException(_loc.get(\"virtual-mapping\", mapping.\n-                getDescribedType()));\n-\n-        int seld = -1;\n-        int pseld = -1;\n-\n-        // base class selects pks, etc\n-        if (parent == null) {\n-            // if no instance, select pks\n-            if (sm == null) {\n-                if (ident)\n-                    sel.selectIdentifier(mapping.getPrimaryKeyColumns());\n-                else\n-                    sel.select(mapping.getPrimaryKeyColumns());\n-                seld = 1;\n-            }\n-\n-            // if no instance or not initialized and not exact oid, select type\n-            if ((sm == null || (sm.getPCState() == PCState.TRANSIENT \n-                && (!(sm.getObjectId() instanceof OpenJPAId) \n-                || ((OpenJPAId) sm.getObjectId()).hasSubclasses())))\n-                && mapping.getDiscriminator().select(sel, orig))\n-                seld = 1;\n-\n-            // if no instance or no version, select version\n-            if ((sm == null || sm.getVersion() == null)\n-                && mapping.getVersion().select(sel, orig))\n-                seld = 1;\n-        } else {\n-            // recurse on parent\n-            pseld = selectBaseMappings(sel, parent, orig, sm, fields,\n-                fetch, eager, eagerToMany, ident, joined);\n-        }\n-\n-        // select the mappings in the given fields set, or based on fetch\n-        // configuration if no fields given\n-        FieldMapping[] fms = mapping.getDefinedFieldMappings();\n-        SelectExecutor esel;\n-        int fseld;\n-        for (int i = 0; i < fms.length; i++) {\n-            // skip eager to-many select; we do that separately in calling\n-            // method\n-            if (fms[i] == eagerToMany)\n-                continue;\n-\n-            // check for eager select\n-            esel = sel.getEager(fms[i]);\n-            if (esel != null) {\n-                if (esel == sel)\n-                    fms[i].selectEagerJoin(sel, sm, this, \n-                    \tfetch.traverseJDBC(fms[i]), eager);\n-                else\n-                    fms[i].selectEagerParallel(esel, sm, this, \n-                    \tfetch.traverseJDBC(fms[i]), eager);\n-                seld = Math.max(0, seld);\n-            } else if (requiresSelect(fms[i], sm, fields, fetch)) {\n-                fseld = fms[i].select(sel, sm, this, \n-                \tfetch.traverseJDBC(fms[i]), eager);\n-                seld = Math.max(fseld, seld);\n-            } else if (optSelect(fms[i], sel, sm, fetch)) {\n-                fseld = fms[i].select(sel, sm, this, \n-                \tfetch.traverseJDBC(fms[i]), fetch.EAGER_NONE);\n-\n-                // don't upgrade seld to > 0 based on these fields, since\n-                // they're not in the calculated field set\n-                if (fseld >= 0 && seld < 0)\n-                    seld = 0;\n-            }\n-        }\n-\n-        // join to parent table if the parent / any ancestors have selected\n-        // anything\n-        if (!joined && pseld >= 0 && parent.getTable() != mapping.getTable())\n-            sel.where(mapping.joinSuperclass(sel.newJoins(), false));\n-\n-        // return the highest value\n-        return Math.max(pseld, seld);\n-    }\n-\n-    /**\n-     * When selecting fieldes, a special case is made for mappings that use\n-     * 2-part selects that aren't explicitly *not* in the dfg so that they\n-     * can get their primary table data. This method tests for that special\n-     * case as an optimization.\n-     */\n-    private boolean optSelect(FieldMapping fm, Select sel,\n-        OpenJPAStateManager sm, JDBCFetchConfiguration fetch) {\n-        return !fm.isInDefaultFetchGroup() \n-            && !fm.isDefaultFetchGroupExplicit()\n-            && (sm == null || sm.getPCState() == PCState.TRANSIENT \n-            || !sm.getLoaded().get(fm.getIndex()))\n-            && fm.supportsSelect(sel, sel.TYPE_TWO_PART, sm, this, fetch) > 0;\n-    }\n-\n-    /**\n-     * Select field mappings that match the given fetch configuration for\n-     * subclasses of the given type.\n-     *\n-     * @param sel the select to use\n-     * @param mapping the type whose subclasses to select\n-     * @param sm the instance being selected for, or null if none\n-     * @param fetch the fetch configuration\n-     */\n-    private void selectSubclassMappings(Select sel, ClassMapping mapping,\n-        OpenJPAStateManager sm, JDBCFetchConfiguration fetch) {\n-        loadSubclasses(mapping);\n-        ClassMapping[] subMappings = mapping.getJoinablePCSubclassMappings();\n-        if (subMappings.length == 0)\n-            return;\n-\n-        // select all subclass mappings that match the fetch configuration\n-        // and whose table is in the list of those selected so far; this\n-        // way we select the max possible without selecting any tables that\n-        // aren't present in all possible query matches; a special case\n-        // is made for mappings that use 2-part selects that aren't\n-        // explicitly *not* in the default so that they can get their\n-        // primary table data\n-        FieldMapping[] fms;\n-        boolean joined;\n-        boolean canJoin = _dict.joinSyntax != JoinSyntaxes.SYNTAX_TRADITIONAL\n-            && fetch.getSubclassFetchMode(mapping) != fetch.EAGER_NONE;\n-        for (int i = 0; i < subMappings.length; i++) {\n-            if (!subMappings[i].supportsEagerSelect(sel, sm, this, mapping,\n-                fetch))\n-                continue;\n-\n-            // initialize so that if we can't join, we pretend we already have\n-            joined = !canJoin;\n-            fms = subMappings[i].getDefinedFieldMappings();\n-            for (int j = 0; j < fms.length; j++) {\n-                // make sure in one of configured fetch groups\n-            \tif (fetch.requiresFetch(fms[j]) != FetchConfiguration.FETCH_LOAD\n-                    && ((!fms[j].isInDefaultFetchGroup() \n-                    && fms[j].isDefaultFetchGroupExplicit())\n-                    || fms[j].supportsSelect(sel, sel.TYPE_TWO_PART, sm, this, \n-                    fetch) <= 0)) \n-            \t\tcontinue;\n-\n-                // if we can join to the subclass, do so; much better chance\n-                // that the field will be able to select itself without joins\n-                if (!joined) {\n-                    // mark joined whether or not we join, so we don't have to\n-                    // test conditions again for this subclass\n-                    joined = true;\n-                    sel.where(joinSubclass(sel, mapping, subMappings[i], null));\n-                }\n-\n-                // if can select with tables already selected, do it\n-                if (fms[j].supportsSelect(sel, sel.TYPE_JOINLESS, sm, this,\n-                    fetch) > 0)\n-                    fms[j].select(sel, null, this, fetch.traverseJDBC(fms[j]),\n-                        fetch.EAGER_NONE);\n-            }\n-        }\n-    }\n-\n-    /**\n-     * Helper method to join from class to its subclass. Recursive to allow\n-     * for multiple hops, starting from the base class.\n-     */\n-    private static Joins joinSubclass(Select sel, ClassMapping base,\n-        ClassMapping sub, Joins joins) {\n-        if (sub == base || sub.getTable() == base.getTable()\n-            || sel.isSelected(sub.getTable()))\n-            return null;\n-\n-        // recurse first so we go least->most derived\n-        ClassMapping sup = sub.getJoinablePCSuperclassMapping();\n-        joins = joinSubclass(sel, base, sup, joins);\n-        if (joins == null)\n-            joins = sel.newJoins();\n-        return sub.joinSuperclass(joins, true);\n-    }\n-\n-    /**\n-     * Makes sure all subclasses of the given type are loaded in the JVM.\n-     * This is usually done automatically.\n-     */\n-    public void loadSubclasses(ClassMapping mapping) {\n-        Discriminator dsc = mapping.getDiscriminator();\n-        if (dsc.getSubclassesLoaded())\n-            return;\n-\n-        // if the subclass list is set, no need to load subs\n-        if (mapping.getRepository().getPersistentTypeNames(false,\n-            _ctx.getClassLoader()) != null) {\n-            dsc.setSubclassesLoaded(true);\n-            return;\n-        }\n-\n-        try {\n-            dsc.loadSubclasses(this);\n-        } catch (ClassNotFoundException cnfe) {\n-            throw new StoreException(cnfe);\n-        } catch (SQLException se) {\n-            throw SQLExceptions.getStore(se, _dict);\n-        }\n-    }\n-\n-    /**\n-     * Make the statement a candidate for cancellation.\n-     */\n-    private void beforeExecuteStatement(Statement stmnt) {\n-        _stmnts.add(stmnt);\n-    }\n-\n-    /**\n-     * Remove the statement from the cancellable set.\n-     */\n-    private void afterExecuteStatement(Statement stmnt) {\n-        _stmnts.remove(stmnt);\n-    }\n-\n-    /**\n-     * Connection returned to client code. Makes sure its wrapped connection\n-     * ref count is decremented on finalize.\n-     */\n-    private static class ClientConnection extends DelegatingConnection {\n-\n-        private boolean _closed = false;\n-\n-        public ClientConnection(Connection conn) {\n-            super(conn);\n-        }\n-\n-        public void close() throws SQLException {\n-            _closed = true;\n-            super.close();\n-        }\n-\n-        protected void finalize() throws SQLException {\n-            if (!_closed)\n-                close();\n-        }\n-    }\n-\n-    /**\n-     * Connection wrapper that keeps an internal ref count so that it knows\n-     * when to really close.\n-     */\n-    protected class RefCountConnection extends DelegatingConnection {\n-\n-        private boolean _retain = false;\n-        private int _refs = 0;\n-        private boolean _freed = false;\n-\n-        public RefCountConnection(Connection conn) {\n-            super(conn);\n-        }\n-\n-        public boolean getRetain() {\n-            return _retain;\n-        }\n-\n-        public void setRetain(boolean retain) {\n-            if (_retain && !retain && _refs <= 0)\n-                free();\n-            _retain = retain;\n-        }\n-\n-        public void ref() {\n-            // don't have to lock; called from connect(), which is locked\n-            _refs++;\n-        }\n-\n-        public void close() throws SQLException {\n-            // lock at broker level to avoid deadlocks\n-            _ctx.lock();\n-            try {\n-                _refs--;\n-                if (_refs <= 0 && !_retain)\n-                    free();\n-            } finally {\n-                _ctx.unlock();\n-            }\n-        }\n-\n-        public void free() {\n-            // ensure that we do not close the underlying connection\n-            // multiple times; this could happen if someone (e.g., an\n-            // Extent) holds a RefConnection, and then closes it (e.g., in\n-            // the finalizer) after the StoreManager has already been closed.\n-            if (_freed)\n-                return;\n-\n-            try {\n-                getDelegate().close();\n-            } catch (SQLException se) {\n-            }\n-            _freed = true;\n-            _conn = null;\n-        }\n-\n-        protected Statement createStatement(boolean wrap) throws SQLException {\n-            return new CancelStatement(super.createStatement(false),\n-                RefCountConnection.this);\n-        }\n-\n-        protected Statement createStatement(int rsType, int rsConcur,\n-            boolean wrap) throws SQLException {\n-            return new CancelStatement(super.createStatement(rsType, rsConcur,\n-                false), RefCountConnection.this);\n-        }\n-\n-        protected PreparedStatement prepareStatement(String sql, boolean wrap)\n-            throws SQLException {\n-            return new CancelPreparedStatement(super.prepareStatement(sql,\n-                false), RefCountConnection.this);\n-        }\n-\n-        protected PreparedStatement prepareStatement(String sql, int rsType,\n-            int rsConcur, boolean wrap) throws SQLException {\n-            return new CancelPreparedStatement(super.prepareStatement(sql,\n-                rsType, rsConcur, false), RefCountConnection.this);\n-        }\n-    }\n-\n-    /**\n-     * Statement type that adds and removes itself from the set of active\n-     * statements so that it can be canceled.\n-     */\n-    private class CancelStatement extends DelegatingStatement {\n-\n-        public CancelStatement(Statement stmnt, Connection conn) {\n-            super(stmnt, conn);\n-        }\n-\n-        public int executeUpdate(String sql) throws SQLException {\n-            beforeExecuteStatement(this);\n-            try {\n-                return super.executeUpdate(sql);\n-            } finally {\n-                afterExecuteStatement(this);\n-            }\n-        }\n-\n-        protected ResultSet executeQuery(String sql, boolean wrap)\n-            throws SQLException {\n-            beforeExecuteStatement(this);\n-            try {\n-                return super.executeQuery(sql, wrap);\n-            } finally {\n-                afterExecuteStatement(this);\n-            }\n-        }\n-    }\n-\n-    /**\n-     * Statement type that adds and removes itself from the set of active\n-     * statements so that it can be canceled.\n-     */\n-    private class CancelPreparedStatement extends DelegatingPreparedStatement {\n-\n-        public CancelPreparedStatement(PreparedStatement stmnt, \n-            Connection conn) {\n-            super(stmnt, conn);\n-        }\n-\n-        public int executeUpdate() throws SQLException {\n-            beforeExecuteStatement(this);\n-            try {\n-                return super.executeUpdate();\n-            } finally {\n-                afterExecuteStatement(this);\n-            }\n-        }\n-\n-        protected ResultSet executeQuery(boolean wrap) throws SQLException {\n-            beforeExecuteStatement(this);\n-            try {\n-                return super.executeQuery(wrap);\n-            } finally {\n-                afterExecuteStatement(this);\n-            }\n-        }\n-\n-        public int[] executeBatch() throws SQLException {\n-            beforeExecuteStatement(this);\n-            try {\n-                return super.executeBatch();\n-            } finally {\n-                afterExecuteStatement(this);\n-            }\n-        }\n-    }\n-    \n-    public Map getCacheMapFromQuerySQLCache(Object key) {\n-        synchronized(_sqlCache) {\n-            //sqlCache is a map of map\n-            Map cacheMap = (Map)_sqlCache.get(key);\n-            if (cacheMap == null) {\n-                cacheMap = createSQLCache();\n-                _sqlCache.put(key, cacheMap);\n-            }\n-            return cacheMap;\n-        }\n-    }\n-    \n-    public void addToSqlCache(Map cacheMap, Object key, Object value) {\n-        cacheMap.put(key, value);\n-    }\n-    \n-    public Map createSQLCache() {\n-        QuerySQLCacheValue querySQLCache = _conf.getQuerySQLCache();\n-        return (Map)querySQLCache.newInstance();\n-    }\n-\n-    public boolean isQuerySQLCacheOn() {\n-        return _isQuerySQLCache;  \n-    }\n-    \n-    public Map getQuerySQLCache() {\n-        return _sqlCache;\n-    }\n-    \n-    public static class SelectKey {\n-        public ClassMapping mapping;\n-        public FieldMapping fm;\n-        public JDBCFetchConfiguration fetch;\n-        \n-        public SelectKey (ClassMapping mapping, FieldMapping fm, \n-            JDBCFetchConfiguration fetch) {\n-            this.mapping = mapping;\n-            this.fm = fm;\n-            this.fetch = fetch;\n-        }\n-        \n-        public boolean equals(Object o) {\n-            if (this == o) return true;\n-            if (o == null || getClass() != o.getClass()) return false;\n-\n-            SelectKey selectKey = (SelectKey) o;\n-            if (fetch != null ? !equals(fetch, selectKey.fetch) :\n-                selectKey.fetch != null) return false;\n-            if (mapping != null ? !mapping.equals(selectKey.mapping) :\n-                selectKey.mapping != null) return false;\n-            if (fm != null ? !fm.equals(selectKey.fm) :\n-                selectKey.fm != null) return false;\n-            return true;\n-        }\n-        \n-        public boolean equals(JDBCFetchConfiguration fetch1,\n-        \tJDBCFetchConfiguration fetch2) {\n-            if (fetch1 == fetch2) \n-            \treturn true;\n-\n-            if (fetch1.getIsolation() != fetch2.getIsolation()) \n-            \treturn false;\n-            if (fetch1.getFetchDirection() != fetch2.getFetchDirection()) \n-            \treturn false;\n-            if (fetch1.getEagerFetchMode() != fetch2.getEagerFetchMode()) \n-            \treturn false;\n-            if (fetch1.getSubclassFetchMode() != fetch2.getSubclassFetchMode()) \n-            \treturn false;\n-            if (fetch1.getJoinSyntax() != fetch2.getJoinSyntax()) \n-            \treturn false;\n-            Set joins1 = fetch1.getJoins();\n-            Set joins2 = fetch2.getJoins();\n-            if (joins1 != null ? !joins1.equals(joins2) : joins2 != null)\n-                return false;\n-            \n-            if (fetch1.getMaxFetchDepth() != fetch2.getMaxFetchDepth()) \n-            \treturn false;\n-            if (fetch1.getReadLockLevel() != fetch2.getReadLockLevel()) \n-            \treturn false;\n-            if (fetch1.getWriteLockLevel() != fetch2.getWriteLockLevel()) \n-            \treturn false;\n-            \n-            boolean sameFetchGroup = false;\n-            boolean hasFetchGroupAll = ((JDBCFetchConfigurationImpl)fetch1).\n-            \thasFetchGroupAll();\n-            boolean hasFetchGroupAll1 = ((JDBCFetchConfigurationImpl)fetch2).\n-            \thasFetchGroupAll();\n-            if (hasFetchGroupAll && hasFetchGroupAll1) \n-                sameFetchGroup = true;\n-            else if (!hasFetchGroupAll && !hasFetchGroupAll1){\n-                boolean hasFetchGroupDefault = \n-                \t((JDBCFetchConfigurationImpl)fetch1).hasFetchGroupDefault();\n-                boolean hasFetchGroupDefault1 = \n-                \t((JDBCFetchConfigurationImpl)fetch2).hasFetchGroupDefault();\n-                if (hasFetchGroupDefault && hasFetchGroupDefault1) \n-                    sameFetchGroup = true;\n-            }\n-            \n-            if (!sameFetchGroup) {\n-                Set fetchGroups = fetch1.getFetchGroups();\n-                Set fetchGroups1 = fetch2.getFetchGroups();\n-                if (fetchGroups != null ? !fetchGroups.equals(fetchGroups1) : \n-                \tfetchGroups1 != null)\n-                    return false;\n-            }\n-            \n-            Set fields = fetch1.getFields();\n-            Set fields1 = fetch2.getFields();\n-            int size = fields.size();\n-            int size1 = fields1.size();\n-            if (size == 0 && size1 == 0)\n-                return true;\n-            else if (size != size1) \n-                return false;   \n-            \n-            if (fields != null ? !fields.equals(fields1) : fields1 != null)\n-                return false;\n-            \n-            return true;\n-        }\n-        \n-        \n-        public int hashCode() {\n-            int result = 0;\n-            result = 31 * result + (mapping != null ? mapping.hashCode() : 0);\n-            result = 31 * result + (fm != null ? fm.hashCode() : 0);\n-            result = 31 * result + fetch.getIsolation();\n-            result = 31 * result + fetch.getFetchDirection();\n-            result = 31 * result + fetch.getEagerFetchMode();\n-            result = 31 * result + fetch.getSubclassFetchMode();\n-            result = 31 * result + fetch.getJoinSyntax();\n-            Set joins = fetch.getJoins();\n-            result = 31 * result + (joins != null ? joins.hashCode() : 0);\n-            \n-            result = 31 * result + fetch.getMaxFetchDepth();\n-            result = 31 * result + fetch.getReadLockLevel();\n-            result = 31 * result + fetch.getWriteLockLevel();\n-        \t\n-            if (((JDBCFetchConfigurationImpl)fetch).hasFetchGroupAll()) \n-            \tresult = 31 * result + FetchGroup.NAME_ALL.hashCode();\n-            else {\n-                Set fetchGroups = fetch.getFetchGroups();\n-                if (((JDBCFetchConfigurationImpl)fetch).hasFetchGroupDefault() \n-                \t&& fetchGroups != null && fetchGroups.size() == 1)\n-                    result = 31 * result + FetchGroup.NAME_DEFAULT.hashCode();\n-                else {\n-                    result = 31 * result + (fetchGroups != null && \n-                        fetchGroups.size() > 0 ? \n-                        fetchGroups.hashCode() : 0);\n-                }\n-            }\n-            Set fields = fetch.getFields();\n-        \tresult = 31 * result + (fields != null &&  fields.size() > 0 ? \n-        \t\tfields.hashCode() : 0);\n-            \n-            return result;\n-        }\n-    }\n-}"},{"sha":"5a5c25dea4341dae64ed1c3944608bdc19f640cd","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreQuery.java","status":"removed","additions":0,"deletions":957,"changes":957,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreQuery.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,957 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.kernel;\n-\n-import java.sql.Connection;\n-import java.sql.PreparedStatement;\n-import java.sql.SQLException;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.BitSet;\n-import java.util.Collection;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-\n-import org.apache.openjpa.event.LifecycleEventManager;\n-import org.apache.openjpa.jdbc.kernel.exps.ExpContext;\n-import org.apache.openjpa.jdbc.kernel.exps.GetColumn;\n-import org.apache.openjpa.jdbc.kernel.exps.JDBCExpressionFactory;\n-import org.apache.openjpa.jdbc.kernel.exps.JDBCStringContains;\n-import org.apache.openjpa.jdbc.kernel.exps.JDBCWildcardMatch;\n-import org.apache.openjpa.jdbc.kernel.exps.PCPath;\n-import org.apache.openjpa.jdbc.kernel.exps.QueryExpressionsState;\n-import org.apache.openjpa.jdbc.kernel.exps.SQLEmbed;\n-import org.apache.openjpa.jdbc.kernel.exps.SQLExpression;\n-import org.apache.openjpa.jdbc.kernel.exps.SQLValue;\n-import org.apache.openjpa.jdbc.kernel.exps.Val;\n-import org.apache.openjpa.jdbc.meta.ClassMapping;\n-import org.apache.openjpa.jdbc.meta.FieldMapping;\n-import org.apache.openjpa.jdbc.meta.strats.VerticalClassStrategy;\n-import org.apache.openjpa.jdbc.schema.Column;\n-import org.apache.openjpa.jdbc.schema.Table;\n-import org.apache.openjpa.jdbc.sql.DBDictionary;\n-import org.apache.openjpa.jdbc.sql.SQLBuffer;\n-import org.apache.openjpa.jdbc.sql.SQLExceptions;\n-import org.apache.openjpa.jdbc.sql.Select;\n-import org.apache.openjpa.jdbc.sql.Union;\n-import org.apache.openjpa.kernel.ExpressionStoreQuery;\n-import org.apache.openjpa.kernel.Filters;\n-import org.apache.openjpa.kernel.OpenJPAStateManager;\n-import org.apache.openjpa.kernel.OrderingMergedResultObjectProvider;\n-import org.apache.openjpa.kernel.QueryHints;\n-import org.apache.openjpa.kernel.exps.Constant;\n-import org.apache.openjpa.kernel.exps.ExpressionFactory;\n-import org.apache.openjpa.kernel.exps.ExpressionParser;\n-import org.apache.openjpa.kernel.exps.FilterListener;\n-import org.apache.openjpa.kernel.exps.Literal;\n-import org.apache.openjpa.kernel.exps.QueryExpressions;\n-import org.apache.openjpa.lib.rop.MergedResultObjectProvider;\n-import org.apache.openjpa.lib.rop.RangeResultObjectProvider;\n-import org.apache.openjpa.lib.rop.ResultObjectProvider;\n-import org.apache.openjpa.lib.util.Localizer;\n-import org.apache.openjpa.meta.ClassMetaData;\n-import org.apache.openjpa.meta.JavaTypes;\n-import org.apache.openjpa.meta.ValueMetaData;\n-import org.apache.openjpa.util.UnsupportedException;\n-import org.apache.openjpa.util.UserException;\n-import serp.util.Numbers;\n-\n-/**\n- * JDBC query implementation.\n- *\n- * @author Abe White\n- * @nojavadoc\n- */\n-public class JDBCStoreQuery \n-    extends ExpressionStoreQuery {\n-\n-    private static final Table INVALID = new Table();\n-\n-    // add all standard filter and aggregate listeners to these maps\n-    private static final Map _listeners = new HashMap();\n-\n-    static {\n-        // deprecated extensions\n-        _listeners.put(JDBCStringContains.TAG, new JDBCStringContains());\n-        _listeners.put(JDBCWildcardMatch.TAG, new JDBCWildcardMatch());\n-        _listeners.put(SQLExpression.TAG, new SQLExpression());\n-        _listeners.put(SQLValue.TAG, new SQLValue());\n-\n-        // jdbc-specific extensions\n-        _listeners.put(GetColumn.TAG, new GetColumn());\n-        _listeners.put(SQLEmbed.TAG, new SQLEmbed());\n-    }\n-\n-    private final transient JDBCStore _store;\n-\n-    /**\n-     * Constructor. Supply store manager.\n-     */\n-    public JDBCStoreQuery(JDBCStore store, ExpressionParser parser) {\n-        super(parser);\n-        _store = store;\n-    }\n-\n-    /**\n-     * Return the store.\n-     */\n-    public JDBCStore getStore() {\n-        return _store;\n-    }\n-\n-    public FilterListener getFilterListener(String tag) {\n-        return (FilterListener) _listeners.get(tag);\n-    }\n-\n-    public Object newCompilationKey() {\n-        JDBCFetchConfiguration fetch = (JDBCFetchConfiguration) ctx\n-            .getFetchConfiguration();\n-        return Numbers.valueOf(fetch.getJoinSyntax());\n-    }\n-\n-    public boolean supportsDataStoreExecution() {\n-        return true;\n-    }\n-\n-    protected ClassMetaData[] getIndependentExpressionCandidates(\n-        ClassMetaData meta, boolean subclasses) {\n-        if (!subclasses)\n-            return new ClassMapping[] { (ClassMapping) meta };\n-        return ((ClassMapping) meta).getIndependentAssignableMappings();\n-    }\n-\n-    protected ExpressionFactory getExpressionFactory(ClassMetaData meta) {\n-        return new JDBCExpressionFactory((ClassMapping) meta);\n-    }\n-\n-    protected ResultObjectProvider executeQuery(Executor ex,\n-        ClassMetaData base, ClassMetaData[] metas, boolean subclasses,\n-        ExpressionFactory[] facts, QueryExpressions[] exps, Object[] params,\n-        Range range) {\n-        if (metas.length > 1 && exps[0].isAggregate())\n-            throw new UserException(Localizer.forPackage(JDBCStoreQuery.class).\n-                get(\"mult-mapping-aggregate\", Arrays.asList(metas)));\n-\n-        ClassMapping[] mappings = (ClassMapping[]) metas;\n-        JDBCFetchConfiguration fetch = (JDBCFetchConfiguration) \n-            ctx.getFetchConfiguration();\n-        if (exps[0].fetchPaths != null) {\n-            fetch.addFields(Arrays.asList(exps[0].fetchPaths));\n-            fetch.addJoins(Arrays.asList(exps[0].fetchPaths));\n-        }\n-        if (exps[0].fetchInnerPaths != null)\n-            fetch.addFetchInnerJoins(Arrays.asList(exps[0].fetchInnerPaths));\n-\n-        int eager = calculateEagerMode(exps[0], range.start, range.end);\n-        int subclassMode = fetch.getSubclassFetchMode((ClassMapping) base);\n-        DBDictionary dict = _store.getDBDictionary();\n-        long start = (mappings.length == 1 && dict.supportsSelectStartIndex) \n-            ? range.start : 0L;\n-        long end = (dict.supportsSelectEndIndex) ? range.end : Long.MAX_VALUE;\n-\n-        QueryExpressionsState[] states = new QueryExpressionsState[exps.length];\n-        for (int i = 0; i < states.length; i++)\n-            states[i] = new QueryExpressionsState();\n-        ExpContext ctx = new ExpContext(_store, params, fetch);\n-\n-        // add selects with populate WHERE conditions to list\n-        List sels = new ArrayList(mappings.length);\n-        List selMappings = new ArrayList(mappings.length);\n-        BitSet subclassBits = new BitSet();\n-        BitSet nextBits = new BitSet();\n-        boolean unionable = createWhereSelects(sels, mappings, selMappings,\n-            subclasses, subclassBits, nextBits, facts, exps, states, ctx,\n-            subclassMode)\n-            && subclassMode == JDBCFetchConfiguration.EAGER_JOIN\n-            && start == 0\n-            && end == Long.MAX_VALUE;\n-\n-        // we might want to use lrs settings if we can't use the range\n-        if (sels.size() > 1)\n-            start = 0L;\n-        boolean lrs = range.lrs || (fetch.getFetchBatchSize() >= 0 \n-            && (start != range.start || end != range.end));\n-\n-        ResultObjectProvider[] rops = null;\n-        ResultObjectProvider rop = null;\n-        if (unionable) {\n-            Union union = _store.getSQLFactory().newUnion(\n-                (Select[]) sels.toArray(new Select[sels.size()]));\n-            BitSet[] paged = populateUnion(union, mappings, subclasses, facts,\n-                exps, states, ctx, lrs, eager, start, end);\n-            union.setLRS(lrs);\n-            rop = executeUnion(union, mappings, exps, states, ctx, paged);\n-        } else {\n-            if (sels.size() > 1)\n-                rops = new ResultObjectProvider[sels.size()];\n-\n-            Select sel;\n-            BitSet paged;\n-            for (int i = 0, idx = 0; i < sels.size(); i++) {\n-                sel = (Select) sels.get(i);\n-                paged = populateSelect(sel, (ClassMapping) selMappings.get(i),\n-                    subclassBits.get(i), (JDBCExpressionFactory) facts[idx],\n-                    exps[idx], states[idx], ctx, lrs, eager, start, end);\n-\n-                rop = executeSelect(sel, (ClassMapping) selMappings.get(i),\n-                    exps[idx], states[idx], ctx, paged, start, end);\n-                if (rops != null)\n-                    rops[i] = rop;\n-\n-                if (nextBits.get(i))\n-                    idx++;\n-            }\n-        }\n-\n-        if (rops != null) {\n-            if (exps[0].ascending.length == 0)\n-                rop = new MergedResultObjectProvider(rops);\n-            else {\n-                rop = new OrderingMergedResultObjectProvider(rops,\n-                    exps[0].ascending, ex, this, params);\n-            }\n-        }\n-\n-        // need to fake result range?\n-        if ((rops != null && range.end != Long.MAX_VALUE) \n-            || start != range.start || end != range.end)\n-            rop = new RangeResultObjectProvider(rop, range.start, range.end);\n-        return rop;\n-    }\n-\n-    /**\n-     * Select data for the given union, returning paged fields.\n-     */\n-    private BitSet[] populateUnion(Union union, final ClassMapping[] mappings,\n-        final boolean subclasses, final ExpressionFactory[] facts,\n-        final QueryExpressions[] exps, final QueryExpressionsState[] states,\n-        final ExpContext ctx, final boolean lrs, final int eager,\n-        final long start, final long end) {\n-        final BitSet[] paged = (exps[0].projections.length > 0) ? null\n-            : new BitSet[mappings.length];\n-        union.select(new Union.Selector() {\n-            public void select(Select sel, int idx) {\n-                BitSet bits = populateSelect(sel, mappings[idx], subclasses,\n-                    (JDBCExpressionFactory) facts[idx], exps[idx], states[idx],\n-                    ctx,  lrs, eager, start, end);\n-                if (paged != null)\n-                    paged[idx] = bits;\n-            }\n-        });\n-        return paged;\n-    }\n-\n-    /**\n-     * Select data for the given select, returning paged fields.\n-     */\n-    private BitSet populateSelect(Select sel, ClassMapping mapping,\n-        boolean subclasses, JDBCExpressionFactory fact, QueryExpressions exps,\n-        QueryExpressionsState state, ExpContext ctx, boolean lrs, int eager,\n-        long start, long end) {\n-        sel.setLRS(lrs);\n-        sel.setRange(start, end);\n-\n-        BitSet paged = null;\n-        if (exps.projections.length == 0) {\n-            paged = PagingResultObjectProvider.getPagedFields(sel, mapping,\n-                _store, ctx.fetch, eager, end - start);\n-            if (paged != null)\n-                eager = JDBCFetchConfiguration.EAGER_JOIN;\n-        }\n-\n-        fact.getSelectConstructor().select(sel, ctx, mapping, subclasses, exps,\n-            state, eager);\n-        return paged;\n-    }\n-\n-    /**\n-     * Execute the given union.\n-     */\n-    private ResultObjectProvider executeUnion(Union union,\n-        ClassMapping[] mappings, QueryExpressions[] exps, \n-        QueryExpressionsState[] states, ExpContext ctx, BitSet[] paged) {\n-        if (exps[0].projections.length > 0)\n-            return new ProjectionResultObjectProvider(union, exps, states, ctx);\n-\n-        if (paged != null)\n-            for (int i = 0; i < paged.length; i++)\n-                if (paged[i] != null)\n-                    return new PagingResultObjectProvider(union, mappings,\n-                        _store, ctx.fetch, paged, Long.MAX_VALUE);\n-\n-        return new InstanceResultObjectProvider(union, mappings[0], _store,\n-            ctx.fetch);\n-    }\n-\n-    /**\n-     * Execute the given select.\n-     */\n-    private ResultObjectProvider executeSelect(Select sel, ClassMapping mapping,\n-        QueryExpressions exps, QueryExpressionsState state, ExpContext ctx, \n-        BitSet paged, long start, long end) {\n-        if (exps.projections.length > 0)\n-            return new ProjectionResultObjectProvider(sel, exps, state, ctx);\n-        if (paged != null)\n-            return new PagingResultObjectProvider(sel, mapping, _store, \n-                ctx.fetch, paged, end - start);\n-        return new InstanceResultObjectProvider(sel, mapping, _store, \n-            ctx.fetch);\n-    }\n-\n-    /**\n-     * Generate the selects with WHERE conditions needed to execute the query\n-     * for the given mappings.\n-     */\n-    private boolean createWhereSelects(List sels, ClassMapping[] mappings,\n-        List selMappings, boolean subclasses, BitSet subclassBits,\n-        BitSet nextBits, ExpressionFactory[] facts, QueryExpressions[] exps,\n-        QueryExpressionsState[] states, ExpContext ctx, int subclassMode) {\n-        Number optHint = (Number) ctx.fetch.getHint\n-            (QueryHints.HINT_RESULT_COUNT);\n-        ClassMapping[] verts;\n-        boolean unionable = true;\n-        Select sel;\n-        for (int i = 0; i < mappings.length; i++) {\n-            // determine vertical mappings to select separately\n-            verts = getVerticalMappings(mappings[i], subclasses, exps[i],\n-                subclassMode);\n-            if (verts.length == 1 && subclasses)\n-                subclassBits.set(sels.size());\n-\n-            // create criteria select and clone for each vert mapping\n-            sel = ((JDBCExpressionFactory) facts[i]).getSelectConstructor().\n-                evaluate(ctx, null, null, exps[i], states[i]);\n-            if (optHint != null)\n-               sel.setExpectedResultCount(optHint.intValue(), true);\n-            else if (this.ctx.isUnique())\n-                sel.setExpectedResultCount(1, false);\n-            for (int j = 0; j < verts.length; j++) {\n-                selMappings.add(verts[j]);\n-                if (j == verts.length - 1) {\n-                    nextBits.set(sels.size());\n-                    sels.add(sel);\n-                } else\n-                    sels.add(sel.fullClone(1));\n-            }\n-\n-            // turn off unioning if a given independent mapping requires\n-            // multiple selects, or if we're using FROM selects\n-            if (verts.length > 1 || sel.getFromSelect() != null)\n-                unionable = false;\n-        }\n-        return unionable;\n-    }\n-\n-    /**\n-     * Return all the vertical mappings to select separately. Depends on\n-     * subclass fetch mode and the type of query.\n-     */\n-    private ClassMapping[] getVerticalMappings(ClassMapping mapping,\n-        boolean subclasses, QueryExpressions exps, int subclassMode) {\n-        if (!subclasses || exps.projections.length > 0)\n-            return new ClassMapping[] { mapping };\n-\n-        if (subclassMode != JDBCFetchConfiguration.EAGER_PARALLEL\n-            || !hasVerticalSubclasses(mapping))\n-            return new ClassMapping[] { mapping };\n-\n-        List subs = new ArrayList(4);\n-        addSubclasses(mapping, subs);\n-        return (ClassMapping[]) subs.toArray(new ClassMapping[subs.size()]);\n-    }\n-\n-    /**\n-     * Recursive helper to add mappings for subclasses to the given list.\n-     */\n-    private void addSubclasses(ClassMapping mapping, Collection subs) {\n-        // possible future optimizations:\n-        // - if no fields in meta or its subclasses (and not in an\n-        //   already-selected table) are in the current fetch\n-        //   configuration, stop creating new executors\n-        // - allow an executor to select a range of subclasses, rather\n-        //   than just all subclasses / no subclasses; this would\n-        //   allow us to do just one query per actual vertically-mapped\n-        //   subclass, rather than one per mapped subclass, as is happening now\n-\n-        subs.add(mapping);\n-        if (!hasVerticalSubclasses(mapping))\n-            return;\n-\n-        // recurse on immediate subclasses\n-        ClassMapping[] subMappings = mapping.getJoinablePCSubclassMappings();\n-        for (int i = 0; i < subMappings.length; i++)\n-            if (subMappings[i].getJoinablePCSuperclassMapping() == mapping)\n-                addSubclasses(subMappings[i], subs);\n-    }\n-\n-    /**\n-     * Return whether the given class has any vertical subclasses.\n-     */\n-    private static boolean hasVerticalSubclasses(ClassMapping mapping) {\n-        ClassMapping[] subs = mapping.getJoinablePCSubclassMappings();\n-        for (int i = 0; i < subs.length; i++)\n-            if (subs[i].getStrategy() instanceof VerticalClassStrategy)\n-                return true;\n-        return false;\n-    }\n-\n-    /**\n-     * The eager mode depends on the unique setting and range. If the range\n-     * produces 0 results, use eager setting of none. If it produces 1 result\n-     * or the query is unique, use an eager setting of single. Otherwise use\n-     * an eager mode of multiple.\n-     */\n-    private int calculateEagerMode(QueryExpressions exps, long start,\n-        long end) {\n-        if (exps.projections.length > 0 || start >= end)\n-            return EagerFetchModes.EAGER_NONE;\n-        if (end - start == 1 || ctx.isUnique())\n-            return EagerFetchModes.EAGER_JOIN;\n-        return EagerFetchModes.EAGER_PARALLEL;\n-    }\n-\n-    protected Number executeDelete(Executor ex, ClassMetaData base,\n-        ClassMetaData[] metas, boolean subclasses, ExpressionFactory[] facts,\n-        QueryExpressions[] exps, Object[] params) {\n-        return executeBulkOperation(metas, subclasses, facts, exps,\n-            params, null);\n-    }\n-\n-    protected Number executeUpdate(Executor ex, ClassMetaData base,\n-        ClassMetaData[] metas, boolean subclasses, ExpressionFactory[] facts,\n-        QueryExpressions[] exps, Object[] params) {\n-        return executeBulkOperation(metas, subclasses, facts, exps,\n-            params, exps[0].updates);\n-    }\n-\n-    private Number executeBulkOperation(ClassMetaData[] metas,\n-        boolean subclasses, ExpressionFactory[] facts, QueryExpressions[] exps,\n-        Object[] params, Map updates) {\n-        // we cannot execute a bulk delete statement when have mappings in\n-        // multiple tables, so indicate we want to use in-memory with null\n-        ClassMapping[] mappings = (ClassMapping[]) metas;\n-\n-        // specification of the \"updates\" map indicates that this is\n-        // an update query; otherwise, this is a delete statement\n-        boolean isUpdate = updates != null && updates.size() > 0;\n-\n-        for (int i = 0; i < mappings.length; i++) {\n-            if (!isSingleTableMapping(mappings[i], subclasses) && !isUpdate)\n-                return null;\n-\n-            if (!isUpdate) {\n-                // if there are any delete callbacks, we need to\n-                // execute in-memory so the callbacks are invoked\n-                LifecycleEventManager mgr = ctx.getStoreContext().getBroker()\n-                    .getLifecycleEventManager();\n-                if (mgr.hasDeleteListeners(null, mappings[i]))\n-                    return null;\n-            }\n-        }\n-\n-        JDBCFetchConfiguration fetch = (JDBCFetchConfiguration) \n-            ctx.getFetchConfiguration();\n-        ExpContext ctx = new ExpContext(_store, params, fetch);\n-        DBDictionary dict = _store.getDBDictionary();\n-        QueryExpressionsState[] state = new QueryExpressionsState[exps.length];\n-        for (int i = 0; i < state.length; i++)\n-            state[i] = new QueryExpressionsState();\n-\n-        SQLBuffer[] sql = new SQLBuffer[mappings.length];\n-        JDBCExpressionFactory jdbcFactory;\n-        Select sel;\n-        for (int i = 0; i < mappings.length; i++) {\n-            jdbcFactory = (JDBCExpressionFactory) facts[i];\n-            sel = jdbcFactory.getSelectConstructor().evaluate(ctx, null, null,\n-                exps[i], state[i]);\n-            jdbcFactory.getSelectConstructor().select(sel, ctx, mappings[i], \n-                subclasses, exps[i], state[i], \n-                JDBCFetchConfiguration.EAGER_NONE);\n-\n-            // The bulk operation will return null to indicate that the database\n-            // does not support the request bulk delete operation; in\n-            // this case, we need to perform the query in-memory and\n-            // manually delete the instances\n-            if (!isUpdate)\n-                sql[i] = dict.toDelete(mappings[i], sel, params);\n-            else\n-                sql[i] = dict.toUpdate(mappings[i], sel, _store, params,\n-                    updates);\n-\n-            if (sql[i] == null)\n-                return null;\n-        }\n-\n-        // we need to make sure we have an active store connection\n-        _store.getContext().beginStore();\n-\n-        Connection conn = _store.getConnection();\n-        long count = 0;\n-        try {\n-            PreparedStatement stmnt;\n-            for (int i = 0; i < sql.length; i++) {\n-                stmnt = null;\n-                try {\n-                    stmnt = prepareStatement(conn, sql[i]);\n-                    count += executeUpdate(conn, stmnt, sql[i], isUpdate);                    \n-                } catch (SQLException se) {\n-                    throw SQLExceptions.getStore(se, sql[i].getSQL(), \n-                        _store.getDBDictionary());\n-                } finally {\n-                    if (stmnt != null)\n-                        try { stmnt.close(); } catch (SQLException se) {}\n-                }\n-            }\n-        } finally {\n-            try { conn.close(); } catch (SQLException se) {}\n-        }\n-        return Numbers.valueOf(count);\n-    }\n-\n-    /**\n-     * Whether the given mapping occupies only one table.\n-     */\n-    private boolean isSingleTableMapping(ClassMapping mapping,\n-        boolean subclasses) {\n-        ClassMapping root = mapping;\n-        while (root.getJoinablePCSuperclassMapping() != null)\n-            root = root.getJoinablePCSuperclassMapping();\n-        if (hasVerticalSubclasses(root))\n-            return false;\n-\n-        // we cannot execute a bulk delete if any of the\n-        // field mappings for the candidates have columns\n-        // in any other table, since bulk deleting just from the\n-        // class will leave dangling relations; we might be able\n-        // to issue bulk deletes separately for the joins (possibly\n-        // using a temporary table to select the primary keys for\n-        // all the related tables and then issing a delete against those\n-        // keys), but that logic is not currently implemented\n-        Table table = getTable(mapping.getFieldMappings(), null);\n-        if (table == INVALID)\n-            return false;\n-\n-        if (subclasses) {\n-            // if we are including subclasses, we also need to gather\n-            // all the mappings for all known subclasses\n-            ClassMapping[] subs = mapping.getJoinablePCSubclassMappings();\n-            for (int i = 0; subs != null && i < subs.length; i++) {\n-                table = getTable(subs[i].getDefinedFieldMappings(), table);\n-                if (table == INVALID)\n-                    return false;\n-            }\n-        }\n-        return true;\n-    }\n-\n-    /**\n-     * Return the single table for the given fields, or INVALID if they\n-     * use multiple tables.\n-     */\n-    private Table getTable(FieldMapping[] fields, Table table) {\n-        for (int i = 0; i < fields.length; i++) {\n-            table = getTable(fields[i], table);\n-            if (table == INVALID)\n-                break;\n-        }\n-        return table;\n-    }\n-\n-    /**\n-     * Return the table for the field if the given table hasn't been set\n-     * yet, or if the tables match. If the field uses a different table,\n-     * returns INVALID. Also returns INVALID if field is dependent.\n-     */\n-    private Table getTable(FieldMapping fm, Table table) {\n-        if (fm.getCascadeDelete() != ValueMetaData.CASCADE_NONE)\n-            return INVALID;\n-\n-        Column[] columns = fm.getColumns();\n-        for (int i = 0; columns != null && i < columns.length; i++) {\n-            if (table == null)\n-                table = columns[i].getTable();\n-            else if (table != columns[i].getTable())\n-                return INVALID;\n-        }\n-        return table;\n-    }\n-\n-    protected Number executeUpdate(ClassMetaData base, ClassMetaData[] metas,\n-        boolean subclasses, ExpressionFactory[] facts,\n-        QueryExpressions[] parsed, Object[] params) {\n-        return null;\n-    }\n-\n-    protected String[] getDataStoreActions(ClassMetaData base,\n-        ClassMetaData[] metas, boolean subclasses, ExpressionFactory[] facts,\n-        QueryExpressions[] exps, Object[] params, Range range) {\n-        ClassMapping[] mappings = (ClassMapping[]) metas;\n-        JDBCFetchConfiguration fetch = (JDBCFetchConfiguration) ctx.\n-            getFetchConfiguration();\n-        if (exps[0].fetchPaths != null) {\n-            fetch.addFields(Arrays.asList(exps[0].fetchPaths));\n-            fetch.addJoins(Arrays.asList(exps[0].fetchPaths));\n-        }\n-        if (exps[0].fetchInnerPaths != null)\n-            fetch.addFetchInnerJoins(Arrays.asList(exps[0].fetchInnerPaths));\n-\n-        int eager = calculateEagerMode(exps[0], range.start, range.end);\n-        eager = Math.min(eager, JDBCFetchConfiguration.EAGER_JOIN);\n-        int subclassMode = fetch.getSubclassFetchMode((ClassMapping) base);\n-        DBDictionary dict = _store.getDBDictionary();\n-        long start = (mappings.length == 1 && dict.supportsSelectStartIndex) \n-            ? range.start : 0L;\n-        long end = (dict.supportsSelectEndIndex) ? range.end : Long.MAX_VALUE;\n-\n-        QueryExpressionsState[] states = new QueryExpressionsState[exps.length];\n-        for (int i = 0; i < states.length; i++)\n-            states[i] = new QueryExpressionsState();\n-        ExpContext ctx = new ExpContext(_store, params, fetch);\n-\n-        // add selects with populate WHERE conditions to list\n-        List sels = new ArrayList(mappings.length);\n-        List selMappings = new ArrayList(mappings.length);\n-        BitSet subclassBits = new BitSet();\n-        BitSet nextBits = new BitSet();\n-        boolean unionable = createWhereSelects(sels, mappings, selMappings,\n-            subclasses, subclassBits, nextBits, facts, exps, states, ctx, \n-            subclassMode) && subclassMode == JDBCFetchConfiguration.EAGER_JOIN;\n-        if (sels.size() > 1)\n-            start = 0L;\n-\n-        if (unionable) {\n-            Union union = _store.getSQLFactory().newUnion(\n-                (Select[]) sels.toArray(new Select[sels.size()]));\n-            populateUnion(union, mappings, subclasses, facts, exps, states, ctx,\n-                false, eager, start, end);\n-            if (union.isUnion())\n-                return new String[] {union.toSelect(false, fetch).getSQL(true)};\n-            sels = Arrays.asList(union.getSelects());\n-        } else {\n-            Select sel;\n-            for (int i = 0, idx = 0; i < sels.size(); i++) {\n-                sel = (Select) sels.get(i);\n-                populateSelect(sel, (ClassMapping) selMappings.get(i),\n-                    subclassBits.get(i), (JDBCExpressionFactory) facts[idx],\n-                    exps[idx], states[idx], ctx, false, eager, start, end);\n-                if (nextBits.get(i))\n-                    idx++;\n-            }\n-        }\n-\n-        String[] sql = new String[sels.size()];\n-        for (int i = 0; i < sels.size(); i++)\n-            sql[i] = ((Select) sels.get(i)).toSelect(false, fetch).getSQL(true);\n-        return sql;\n-    }\n-    \n-    /**\n-     * This method is to provide override for non-JDBC or JDBC-like \n-     * implementation of executing update.\n-     */\n-    protected int executeUpdate(Connection conn, PreparedStatement stmnt, \n-        SQLBuffer sqlBuf, boolean isUpdate) throws SQLException {\n-        return stmnt.executeUpdate();\n-    }\n-            \n-    /**\n-     * This method is to provide override for non-JDBC or JDBC-like \n-     * implementation of preparing statement.\n-     */\n-    protected PreparedStatement prepareStatement(Connection conn, SQLBuffer sql)\n-        throws SQLException {\n-        return sql.prepareStatement(conn);\n-    }    \n-\n-    public Object evaluate(Object value, Object ob, Object[] params, \n-        OpenJPAStateManager sm) {\n-        int id = 0;\n-        if (value instanceof org.apache.openjpa.jdbc.kernel.exps.Val)\n-            id = ((org.apache.openjpa.jdbc.kernel.exps.Val)value).getId();\n-        else\n-            throw new UnsupportedException(); \n-\n-        switch(id) {\n-        case Val.MATH_VAL:\n-            return handleMathVal(value, ob, params, sm);\n-        case Val.CONCAT_VAL:\n-            return handleConcatVal(value, ob, params, sm);\n-        case Val.SUBSTRING_VAL:\n-            return handleSubstringVal(value, ob, params, sm);\n-        case Val.ARGS_VAL:\n-            return handleArgsVal(value, ob, params, sm);\n-        case Val.LOWER_VAL:\n-            return handleLowerVal(value, ob, params, sm);\n-        case Val.UPPER_VAL:\n-            return handleUpperVal(value, ob, params, sm);\n-        case Val.LENGTH_VAL:\n-            return handleLengthVal(value, ob, params, sm);\n-        case Val.TRIM_VAL:\n-            return handleTrimVal(value, ob, params, sm);\n-        case Val.INDEXOF_VAL:\n-            return handleIndexOfVal(value, ob, params, sm);\n-        case Val.ABS_VAL:\n-            return handleAbsVal(value, ob, params, sm);\n-        case Val.SQRT_VAL:\n-            return handleSqrtVal(value, ob, params, sm);\n-        default:    \n-            throw new UnsupportedException();\n-        }\n-    }\n-\n-    private Object handleMathVal(Object value, Object ob, Object[] params, \n-        OpenJPAStateManager sm) {\n-        org.apache.openjpa.jdbc.kernel.exps.Math mathVal =\n-            (org.apache.openjpa.jdbc.kernel.exps.Math) value;\n-        Val value1 = mathVal.getVal1();\n-        Object val1 = getValue(value1, ob, params, sm);\n-        Class c1 = value1.getType();\n-\n-        Val value2 = mathVal.getVal2();\n-        Object val2 = getValue(value2, ob, params, sm);\n-        Class c2 = value2.getType();\n-\n-        String op = mathVal.getOperation();\n-        if (op.equals(org.apache.openjpa.jdbc.kernel.exps.Math.ADD)) \n-            return Filters.add(val1, c1, val2, c2);\n-        else if (op.equals(\n-                org.apache.openjpa.jdbc.kernel.exps.Math.SUBTRACT))\n-            return Filters.subtract(val1, c1, val2, c2);\n-        else if (op.equals(\n-                org.apache.openjpa.jdbc.kernel.exps.Math.MULTIPLY)) \n-            return Filters.multiply(val1, c1, val2, c2);\n-        else if (op.equals(\n-                org.apache.openjpa.jdbc.kernel.exps.Math.DIVIDE)) \n-            return Filters.divide(val1, c1, val2, c2);\n-        else if (op.equals(org.apache.openjpa.jdbc.kernel.exps.Math.MOD)) \n-            return Filters.mod(val1, c1, val2, c2);\n-        throw new UnsupportedException();\n-    }\n-\n-    private Object handleConcatVal(Object value, Object ob, Object[] params,\n-        OpenJPAStateManager sm) {\n-        org.apache.openjpa.jdbc.kernel.exps.Concat concatVal =\n-            (org.apache.openjpa.jdbc.kernel.exps.Concat)value;\n-        Val value1 = concatVal.getVal1();\n-        Object val1 = getValue(value1, ob, params, sm);\n-\n-        Val value2 = concatVal.getVal2();\n-        Object val2 = getValue(value2, ob, params, sm);\n-        return new StringBuffer(100).append(val1).append(val2).toString();\n-    }\n-\n-    private Object handleSubstringVal(Object value, Object ob, Object[] params,\n-        OpenJPAStateManager sm) {\n-        org.apache.openjpa.jdbc.kernel.exps.Substring substrVal =\n-            (org.apache.openjpa.jdbc.kernel.exps.Substring) value;\n-        Val value1 = substrVal.getVal1();\n-        String val1 = (String) getValue(value1, ob, params, sm);\n-\n-        Val value2 = substrVal.getVal2();\n-        Object val2 = getValue(value2, ob, params, sm);\n-\n-        org.apache.openjpa.kernel.exps.Value[] valAry2 = \n-            (org.apache.openjpa.kernel.exps.Value[]) val2;\n-        Object arg1 = getValue(valAry2[0], ob, params, sm); //starting pos\n-        Object arg2 = getValue(valAry2[1], ob, params, sm); // length\n-        int startIdx = ((Long) arg1).intValue();\n-        int length = ((Long) arg2).intValue();\n-        int endIdx = startIdx + length;\n-        return val1.substring(startIdx, endIdx);\n-    }\n-\n-    private Object handleArgsVal(Object value, Object ob, Object[] params, \n-        OpenJPAStateManager sm) {\n-        org.apache.openjpa.jdbc.kernel.exps.Args argsVal = \n-            (org.apache.openjpa.jdbc.kernel.exps.Args) value;\n-        return argsVal.getValues();\n-    }\n-\n-    private Object handleLowerVal(Object value, Object ob, Object[] params, \n-        OpenJPAStateManager sm) {\n-        org.apache.openjpa.jdbc.kernel.exps.ToLowerCase lowerVal = \n-            (org.apache.openjpa.jdbc.kernel.exps.ToLowerCase) value;\n-        Val val = lowerVal.getValue();\n-        return ((String) getValue(val, ob, params, sm)).toLowerCase();\n-    }\n-\n-    private Object handleUpperVal(Object value, Object ob, Object[] params, \n-        OpenJPAStateManager sm){\n-        org.apache.openjpa.jdbc.kernel.exps.ToUpperCase upperVal = \n-            (org.apache.openjpa.jdbc.kernel.exps.ToUpperCase) value;\n-        Val val = upperVal.getValue();\n-        return ((String) getValue(val, ob, params, sm)).toUpperCase();\n-    }\n-\n-    private Object handleLengthVal(Object value, Object ob, Object[] params, \n-        OpenJPAStateManager sm){\n-        org.apache.openjpa.jdbc.kernel.exps.StringLength strLenVal = \n-            (org.apache.openjpa.jdbc.kernel.exps.StringLength) value;\n-        Val val = strLenVal.getValue();\n-        return ((String) getValue(val, ob, params, sm)).length();\n-    }\n-\n-    private Object handleTrimVal(Object value, Object ob, Object[] params, \n-        OpenJPAStateManager sm) {\n-        org.apache.openjpa.jdbc.kernel.exps.Trim trimVal = \n-            (org.apache.openjpa.jdbc.kernel.exps.Trim) value;\n-        Val val = trimVal.getVal();\n-        String valStr = (String) getValue(val, ob, params, sm);\n-        Val trimChar = trimVal.getTrimChar();\n-        char trimCharObj = ((String) getValue(trimChar, ob, params, sm)).\n-            charAt(0);\n-        Boolean where = trimVal.getWhere();\n-        if (where == null) { //trim both\n-            return trimLeading(trimTrailing(valStr, trimCharObj), trimCharObj);\n-        } else if (where.booleanValue()) { // trim leading\n-            return trimLeading(valStr, trimCharObj);\n-        } else { // trim trailing\n-            return trimTrailing(valStr, trimCharObj);\n-        }\n-    }\n-\n-    private String trimLeading(String value, char trimChar) {\n-        int startIdx = 0;\n-        int len = value.length();\n-        for (int i = 0; i < len; i++) {\n-            if (value.charAt(i) != trimChar) {\n-                startIdx = i;\n-                break;\n-            }\n-        }\n-        return value.substring(startIdx);\n-    }\n-\n-    private String trimTrailing(String value, char trimChar) {\n-        int endIdx = 0;\n-        int len = value.length();\n-        for (int i = len-1; i >= 0; i--) {\n-            if (value.charAt(i) != trimChar) {\n-                endIdx = i;\n-                break;\n-            }\n-        }\n-        return value.substring(0, endIdx+1);\n-    }\n-\n-    private Object handleIndexOfVal(Object value, Object ob, Object[] params,\n-        OpenJPAStateManager sm) {\n-        org.apache.openjpa.jdbc.kernel.exps.IndexOf locateVal = \n-            (org.apache.openjpa.jdbc.kernel.exps.IndexOf) value;\n-        String val1 = (String) getValue(locateVal.getVal1(), ob, params, sm);\n-        Val[] val2 = (Val[]) getValue(locateVal.getVal2(), ob, params, sm);\n-        String strVal = (String) getValue(val2[0], ob, params, sm);\n-        int idx = ((Long) getValue(val2[1], ob, params, sm)).intValue();\n-        return strVal.indexOf(val1, idx);\n-    }\n-\n-    private Object handleAbsVal(Object value, Object ob, Object[] params, \n-        OpenJPAStateManager sm) {\n-        org.apache.openjpa.jdbc.kernel.exps.Abs absVal = \n-            (org.apache.openjpa.jdbc.kernel.exps.Abs) value;\n-        Object val = getValue(absVal.getValue(), ob, params, sm);\n-        Class c = val.getClass();\n-        if (c == Integer.class)\n-            return new Integer(java.lang.Math.abs(((Integer) val).intValue()));\n-        else if (c == Float.class)\n-            return new Float(java.lang.Math.abs(((Float) val).floatValue()));\n-        else if (c == Double.class)\n-            return new Double(java.lang.Math.abs(((Double) val).doubleValue()));\n-        else if (c == Long.class)\n-            return new Long(java.lang.Math.abs(((Long) val).longValue()));\n-        throw new UnsupportedException();\n-    }\n-\n-    private Object handleSqrtVal(Object value, Object ob, Object[] params, \n-        OpenJPAStateManager sm) {\n-        org.apache.openjpa.jdbc.kernel.exps.Sqrt sqrtVal = \n-            (org.apache.openjpa.jdbc.kernel.exps.Sqrt) value;\n-        Object val = getValue(sqrtVal.getValue(), ob, params, sm);\n-        Class c = val.getClass();\n-        if (c == Integer.class)\n-            return new Double(java.lang.Math.sqrt(((Integer) val).\n-                doubleValue()));\n-        else if (c == Float.class)\n-            return new Double(java.lang.Math.sqrt(((Float) val).floatValue()));\n-        else if (c == Double.class)\n-            return new Double(java.lang.Math.sqrt(((Double) val).\n-                doubleValue()));\n-        else if (c == Long.class)\n-            return new Double(java.lang.Math.sqrt(((Long) val).doubleValue()));\n-        throw new UnsupportedException();\n-    }    \n-\n-    private Object getValue(Object value, Object ob, Object[] params,\n-        OpenJPAStateManager sm) {\n-        if (value instanceof PCPath) {\n-            FieldMapping fm = (FieldMapping)((PCPath) value).last();\n-            return getValue(ob, fm, sm);\n-        } else if (value instanceof Literal) {\n-            return ((Literal) value).getValue();\n-        } else if (value instanceof Constant) {\n-            return ((Constant) value).getValue(params);\n-        } else {\n-            return evaluate(value, ob, params, sm);\n-        }\n-    }\n-\n-    private Object getValue(Object ob, FieldMapping fmd,\n-        OpenJPAStateManager sm) {\n-        int i = fmd.getIndex();\n-        switch (fmd.getDeclaredTypeCode()) {\n-        case JavaTypes.BOOLEAN:\n-            return sm.fetchBooleanField(i);\n-        case JavaTypes.BYTE:\n-            return sm.fetchByteField(i);\n-        case JavaTypes.CHAR:\n-            return sm.fetchCharField(i);\n-        case JavaTypes.DOUBLE:\n-            return sm.fetchDoubleField(i);\n-        case JavaTypes.FLOAT:\n-            return sm.fetchFloatField(i);\n-        case JavaTypes.INT:\n-            return sm.fetchIntField(i);\n-        case JavaTypes.LONG:\n-            return sm.fetchLongField(i);\n-        case JavaTypes.SHORT:\n-            return sm.fetchShortField(i);\n-        case JavaTypes.STRING:\n-            return sm.fetchStringField(i);\n-        case JavaTypes.DATE:\n-        case JavaTypes.NUMBER:\n-        case JavaTypes.BOOLEAN_OBJ:\n-        case JavaTypes.BYTE_OBJ:\n-        case JavaTypes.CHAR_OBJ:\n-        case JavaTypes.DOUBLE_OBJ:\n-        case JavaTypes.FLOAT_OBJ:\n-        case JavaTypes.INT_OBJ:\n-        case JavaTypes.LONG_OBJ:\n-        case JavaTypes.SHORT_OBJ:\n-        case JavaTypes.BIGDECIMAL:\n-        case JavaTypes.BIGINTEGER:\n-        case JavaTypes.LOCALE:\n-        case JavaTypes.OBJECT:\n-        case JavaTypes.OID:\n-            return sm.fetchObjectField(i);\n-        default:\n-            throw new UnsupportedException();\n-        }\n-    }\n-}"},{"sha":"d1917479d5790e011b9bca89a78f6835837f1a11","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/LRSSizes.java","status":"removed","additions":0,"deletions":46,"changes":46,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/LRSSizes.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/LRSSizes.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/LRSSizes.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,46 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.kernel;\n-\n-import java.sql.ResultSet;\n-\n-/**\n- * Ways of calculating the size of large result sets.\n- *\n- * @author Abe White\n- */\n-public interface LRSSizes {\n-\n-    /**\n-     * Mode for returning {@link Integer#MAX_VALUE} for the size of\n-     * large result sets.\n-     */\n-    public static final int SIZE_UNKNOWN = 0;\n-\n-    /**\n-     * Mode for using {@link ResultSet#last} to calcualte the size of\n-     * large result sets.\n-     */\n-    public static final int SIZE_LAST = 1;\n-\n-    /**\n-     * Mode for using a query to calculate the size of large result sets.\n-     */\n-    public static final int SIZE_QUERY = 2;\n-}"},{"sha":"346e4e474a2f3e73e11e9f4cc28a1d972fe32cfe","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/MappedQueryResultObjectProvider.java","status":"removed","additions":0,"deletions":465,"changes":465,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/MappedQueryResultObjectProvider.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/MappedQueryResultObjectProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/MappedQueryResultObjectProvider.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,465 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.kernel;\n-\n-import java.io.InputStream;\n-import java.io.Reader;\n-import java.math.BigDecimal;\n-import java.math.BigInteger;\n-import java.sql.Array;\n-import java.sql.Blob;\n-import java.sql.Clob;\n-import java.sql.Ref;\n-import java.sql.SQLException;\n-import java.sql.Time;\n-import java.sql.Timestamp;\n-import java.util.Calendar;\n-import java.util.Date;\n-import java.util.Locale;\n-import java.util.Map;\n-import java.util.Stack;\n-\n-import org.apache.openjpa.jdbc.meta.ClassMapping;\n-import org.apache.openjpa.jdbc.meta.FieldMapping;\n-import org.apache.openjpa.jdbc.meta.JavaSQLTypes;\n-import org.apache.openjpa.jdbc.meta.QueryResultMapping;\n-import org.apache.openjpa.jdbc.schema.Column;\n-import org.apache.openjpa.jdbc.sql.AbstractResult;\n-import org.apache.openjpa.jdbc.sql.Joins;\n-import org.apache.openjpa.jdbc.sql.Result;\n-import org.apache.openjpa.jdbc.sql.SQLExceptions;\n-import org.apache.openjpa.lib.rop.ResultObjectProvider;\n-import org.apache.openjpa.util.StoreException;\n-import org.apache.openjpa.util.UnsupportedException;\n-\n-/**\n- * Provides the data from query result mapped by a {@link QueryResultMapping}.\n- *\n- * @author Pinaki Poddar\n- * @author Abe White\n- */\n-class MappedQueryResultObjectProvider\n-    implements ResultObjectProvider {\n-\n-    private final QueryResultMapping _map;\n-    private final JDBCStore _store;\n-    private final JDBCFetchConfiguration _fetch;\n-    private final MappingResult _mres;\n-\n-    /**\n-     * Constructor.\n-     *\n-     * @param res the result data\n-     */\n-    public MappedQueryResultObjectProvider(QueryResultMapping map,\n-        JDBCStore store, JDBCFetchConfiguration fetch, Result res) {\n-        _map = map;\n-        _store = store;\n-        _fetch = (fetch == null) ? store.getFetchConfiguration() : fetch;\n-        _mres = new MappingResult(res);\n-    }\n-\n-    public boolean supportsRandomAccess() {\n-        try {\n-            return _mres.supportsRandomAccess();\n-        } catch (Throwable t) {\n-            return false;\n-        }\n-    }\n-\n-    public void open() {\n-    }\n-\n-    public Object getResultObject()\n-        throws SQLException {\n-        QueryResultMapping.PCResult[] pcs = _map.getPCResults();\n-        Object[] cols = _map.getColumnResults();\n-\n-        // single object cases\n-        if (pcs.length == 0 && cols.length == 1)\n-            return _mres.getObject(cols[0], JavaSQLTypes.JDBC_DEFAULT, null);\n-        if (pcs.length == 1 && cols.length == 0)\n-            return _mres.load(pcs[0], _store, _fetch);\n-\n-        // multiple objects\n-        Object[] ret = new Object[pcs.length + cols.length];\n-        for (int i = 0; i < pcs.length; i++)\n-            ret[i] = _mres.load(pcs[i], _store, _fetch);\n-        for (int i = 0; i < cols.length; i++)\n-            ret[pcs.length + i] = _mres.getObject(cols[i],\n-                JavaSQLTypes.JDBC_DEFAULT, null);\n-        return ret;\n-    }\n-\n-    public boolean next()\n-        throws SQLException {\n-        return _mres.next();\n-    }\n-\n-    public boolean absolute(int pos)\n-        throws SQLException {\n-        return _mres.absolute(pos);\n-    }\n-\n-    public int size()\n-        throws SQLException {\n-        if (_fetch.getLRSSize() == LRSSizes.SIZE_UNKNOWN\n-            || !supportsRandomAccess())\n-            return Integer.MAX_VALUE;\n-        return _mres.size();\n-    }\n-\n-    public void reset() {\n-        throw new UnsupportedException();\n-    }\n-\n-    public void close() {\n-        _mres.close();\n-    }\n-\n-    public void handleCheckedException(Exception e) {\n-        if (e instanceof SQLException)\n-            throw SQLExceptions.getStore((SQLException) e,\n-                _store.getDBDictionary());\n-        throw new StoreException(e);\n-    }\n-\n-    /**\n-     * Result type that maps requests using a given\n-     * {@link QueryResultMapping.PCResult}.\n-     */\n-    private static class MappingResult\n-        extends AbstractResult {\n-\n-        private final Result _res;\n-        private final Stack _requests = new Stack();\n-        private QueryResultMapping.PCResult _pc = null;\n-\n-        /**\n-         * Supply delegate on construction.\n-         */\n-        public MappingResult(Result res) {\n-            _res = res;\n-        }\n-\n-        /**\n-         * Load an instance of the given type. Should be used in place of\n-         * {@link Result#load}.\n-         */\n-        public Object load(QueryResultMapping.PCResult pc, JDBCStore store,\n-            JDBCFetchConfiguration fetch)\n-            throws SQLException {\n-            _pc = pc;\n-            try {\n-                return load(pc.getCandidateTypeMapping(), store, fetch);\n-            } finally {\n-                _pc = null;\n-            }\n-        }\n-\n-        public Object load(ClassMapping mapping, JDBCStore store,\n-            JDBCFetchConfiguration fetch)\n-            throws SQLException {\n-            return load(mapping, store, fetch, null);\n-        }\n-\n-        public Object load(ClassMapping mapping, JDBCStore store,\n-            JDBCFetchConfiguration fetch, Joins joins)\n-            throws SQLException {\n-            if (_pc == null)\n-                return super.load(mapping, store, fetch, joins);\n-\n-            // we go direct to the store manager so we can tell it not to load\n-            // anything additional\n-            return ((JDBCStoreManager) store).load(mapping, fetch,\n-                _pc.getExcludes(_requests), this);\n-        }\n-\n-        public Object getEager(FieldMapping key) {\n-            Object ret = _res.getEager(key);\n-            if (_pc == null || ret != null)\n-                return ret;\n-            return (_pc.hasEager(_requests, key)) ? this : null;\n-        }\n-\n-        public void putEager(FieldMapping key, Object res) {\n-            _res.putEager(key, res);\n-        }\n-\n-        public void close() {\n-            _res.close();\n-        }\n-\n-        public Joins newJoins() {\n-            return _res.newJoins();\n-        }\n-\n-        public boolean supportsRandomAccess()\n-            throws SQLException {\n-            return _res.supportsRandomAccess();\n-        }\n-\n-        public ClassMapping getBaseMapping() {\n-            return _res.getBaseMapping();\n-        }\n-\n-        public int size()\n-            throws SQLException {\n-            return _res.size();\n-        }\n-\n-        public void startDataRequest(Object mapping) {\n-            _requests.push(mapping);\n-        }\n-\n-        public void endDataRequest() {\n-            _requests.pop();\n-        }\n-\n-        public boolean wasNull()\n-            throws SQLException {\n-            return _res.wasNull();\n-        }\n-\n-        protected Object translate(Object obj, Joins joins) {\n-            return (_pc == null) ? obj : _pc.map(_requests, obj, joins);\n-        }\n-\n-        protected boolean absoluteInternal(int row)\n-            throws SQLException {\n-            return _res.absolute(row);\n-        }\n-\n-        protected boolean nextInternal()\n-            throws SQLException {\n-            return _res.next();\n-        }\n-\n-        protected boolean containsInternal(Object obj, Joins joins)\n-            throws SQLException {\n-            return _res.contains(translate(obj, joins));\n-        }\n-\n-        protected Array getArrayInternal(Object obj, Joins joins)\n-            throws SQLException {\n-            if (obj instanceof Column)\n-                return _res.getArray((Column) obj, joins);\n-            return _res.getArray(obj);\n-        }\n-\n-        protected InputStream getAsciiStreamInternal(Object obj, Joins joins)\n-            throws SQLException {\n-            if (obj instanceof Column)\n-                return _res.getAsciiStream((Column) obj, joins);\n-            return _res.getAsciiStream(obj);\n-        }\n-\n-        protected BigDecimal getBigDecimalInternal(Object obj, Joins joins)\n-            throws SQLException {\n-            if (obj instanceof Column)\n-                return _res.getBigDecimal((Column) obj, joins);\n-            return _res.getBigDecimal(obj);\n-        }\n-\n-        protected Number getNumberInternal(Object obj, Joins joins)\n-            throws SQLException {\n-            if (obj instanceof Column)\n-                return _res.getNumber((Column) obj, joins);\n-            return _res.getNumber(obj);\n-        }\n-\n-        protected BigInteger getBigIntegerInternal(Object obj, Joins joins)\n-            throws SQLException {\n-            if (obj instanceof Column)\n-                return _res.getBigInteger((Column) obj, joins);\n-            return _res.getBigInteger(obj);\n-        }\n-\n-        protected InputStream getBinaryStreamInternal(Object obj, Joins joins)\n-            throws SQLException {\n-            if (obj instanceof Column)\n-                return _res.getBinaryStream((Column) obj, joins);\n-            return _res.getBinaryStream(obj);\n-        }\n-\n-        protected Blob getBlobInternal(Object obj, Joins joins)\n-            throws SQLException {\n-            if (obj instanceof Column)\n-                return _res.getBlob((Column) obj, joins);\n-            return _res.getBlob(obj);\n-        }\n-\n-        protected boolean getBooleanInternal(Object obj, Joins joins)\n-            throws SQLException {\n-            if (obj instanceof Column)\n-                return _res.getBoolean((Column) obj, joins);\n-            return _res.getBoolean(obj);\n-        }\n-\n-        protected byte getByteInternal(Object obj, Joins joins)\n-            throws SQLException {\n-            if (obj instanceof Column)\n-                return _res.getByte((Column) obj, joins);\n-            return _res.getByte(obj);\n-        }\n-\n-        protected byte[] getBytesInternal(Object obj, Joins joins)\n-            throws SQLException {\n-            if (obj instanceof Column)\n-                return _res.getBytes((Column) obj, joins);\n-            return _res.getBytes(obj);\n-        }\n-\n-        protected Calendar getCalendarInternal(Object obj, Joins joins)\n-            throws SQLException {\n-            if (obj instanceof Column)\n-                return _res.getCalendar((Column) obj, joins);\n-            return _res.getCalendar(obj);\n-        }\n-\n-        protected char getCharInternal(Object obj, Joins joins)\n-            throws SQLException {\n-            if (obj instanceof Column)\n-                return _res.getChar((Column) obj, joins);\n-            return _res.getChar(obj);\n-        }\n-\n-        protected Reader getCharacterStreamInternal(Object obj, Joins joins)\n-            throws SQLException {\n-            if (obj instanceof Column)\n-                return _res.getCharacterStream((Column) obj, joins);\n-            return _res.getCharacterStream(obj);\n-        }\n-\n-        protected Clob getClobInternal(Object obj, Joins joins)\n-            throws SQLException {\n-            if (obj instanceof Column)\n-                return _res.getClob((Column) obj, joins);\n-            return _res.getClob(obj);\n-        }\n-\n-        protected Date getDateInternal(Object obj, Joins joins)\n-            throws SQLException {\n-            if (obj instanceof Column)\n-                return _res.getDate((Column) obj, joins);\n-            return _res.getDate(obj);\n-        }\n-\n-        protected java.sql.Date getDateInternal(Object obj, Calendar cal,\n-            Joins joins)\n-            throws SQLException {\n-            if (obj instanceof Column)\n-                return _res.getDate((Column) obj, cal, joins);\n-            return _res.getDate(obj, cal);\n-        }\n-\n-        protected double getDoubleInternal(Object obj, Joins joins)\n-            throws SQLException {\n-            if (obj instanceof Column)\n-                return _res.getDouble((Column) obj, joins);\n-            return _res.getDouble(obj);\n-        }\n-\n-        protected float getFloatInternal(Object obj, Joins joins)\n-            throws SQLException {\n-            if (obj instanceof Column)\n-                return _res.getFloat((Column) obj, joins);\n-            return _res.getFloat(obj);\n-        }\n-\n-        protected int getIntInternal(Object obj, Joins joins)\n-            throws SQLException {\n-            if (obj instanceof Column)\n-                return _res.getInt((Column) obj, joins);\n-            return _res.getInt(obj);\n-        }\n-\n-        protected Locale getLocaleInternal(Object obj, Joins joins)\n-            throws SQLException {\n-            if (obj instanceof Column)\n-                return _res.getLocale((Column) obj, joins);\n-            return _res.getLocale(obj);\n-        }\n-\n-        protected long getLongInternal(Object obj, Joins joins)\n-            throws SQLException {\n-            if (obj instanceof Column)\n-                return _res.getLong((Column) obj, joins);\n-            return _res.getLong(obj);\n-        }\n-\n-        protected Object getObjectInternal(Object obj, int metaTypeCode,\n-            Object arg, Joins joins)\n-            throws SQLException {\n-            if (obj instanceof Column)\n-                return _res.getObject((Column) obj, arg, joins);\n-            return _res.getObject(obj, metaTypeCode, arg);\n-        }\n-\n-        protected Object getSQLObjectInternal(Object obj, Map map, Joins joins)\n-            throws SQLException {\n-            if (obj instanceof Column)\n-                return _res.getSQLObject((Column) obj, map, joins);\n-            return _res.getSQLObject(obj, map);\n-        }\n-\n-        protected Object getStreamInternal(JDBCStore store, Object obj,\n-            int metaTypeCode, Object arg, Joins joins) throws SQLException {\n-            if (obj instanceof Column)\n-                return _res.getObject((Column) obj, arg, joins);\n-            return _res.getObject(obj, metaTypeCode, arg);\n-        }\n-        \n-        protected Ref getRefInternal(Object obj, Map map, Joins joins)\n-            throws SQLException {\n-            if (obj instanceof Column)\n-                return _res.getRef((Column) obj, map, joins);\n-            return _res.getRef(obj, map);\n-        }\n-\n-        protected short getShortInternal(Object obj, Joins joins)\n-            throws SQLException {\n-            if (obj instanceof Column)\n-                return _res.getShort((Column) obj, joins);\n-            return _res.getShort(obj);\n-        }\n-\n-        protected String getStringInternal(Object obj, Joins joins)\n-            throws SQLException {\n-            if (obj instanceof Column)\n-                return _res.getString((Column) obj, joins);\n-            return _res.getString(obj);\n-        }\n-\n-        protected Time getTimeInternal(Object obj, Calendar cal, Joins joins)\n-            throws SQLException {\n-            if (obj instanceof Column)\n-                return _res.getTime((Column) obj, cal, joins);\n-            return _res.getTime(obj, cal);\n-        }\n-\n-        protected Timestamp getTimestampInternal(Object obj, Calendar cal,\n-            Joins joins)\n-            throws SQLException {\n-            if (obj instanceof Column)\n-                return _res.getTimestamp((Column) obj, cal, joins);\n-            return _res.getTimestamp(obj, cal);\n-        }\n-    }\n-}"},{"sha":"9ed5e5e0b2ad9056943aa7554e3884bbbb72e8b2","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/NativeJDBCSeq.java","status":"removed","additions":0,"deletions":383,"changes":383,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/NativeJDBCSeq.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/NativeJDBCSeq.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/NativeJDBCSeq.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,383 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.kernel;\n-\n-import java.sql.Connection;\n-import java.sql.PreparedStatement;\n-import java.sql.ResultSet;\n-import java.sql.SQLException;\n-import java.text.MessageFormat;\n-\n-import org.apache.openjpa.conf.OpenJPAConfiguration;\n-import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n-import org.apache.openjpa.jdbc.conf.JDBCConfigurationImpl;\n-import org.apache.openjpa.jdbc.meta.ClassMapping;\n-import org.apache.openjpa.jdbc.schema.Schema;\n-import org.apache.openjpa.jdbc.schema.SchemaGroup;\n-import org.apache.openjpa.jdbc.schema.SchemaTool;\n-import org.apache.openjpa.jdbc.schema.Schemas;\n-import org.apache.openjpa.jdbc.schema.Sequence;\n-import org.apache.openjpa.jdbc.sql.DBDictionary;\n-import org.apache.openjpa.lib.conf.Configurable;\n-import org.apache.openjpa.lib.conf.Configuration;\n-import org.apache.openjpa.lib.conf.Configurations;\n-import org.apache.openjpa.lib.log.Log;\n-import org.apache.openjpa.lib.util.Localizer;\n-import org.apache.openjpa.lib.util.Options;\n-import org.apache.openjpa.util.MetaDataException;\n-import org.apache.openjpa.util.UserException;\n-\n-import serp.util.Numbers;\n-import serp.util.Strings;\n-\n-///////////////////////////////////////////////////////////\n-// NOTE: Do not change property names; see SequenceMetaData\n-// and SequenceMapping for standard property names.\n-////////////////////////////////////////////////////////////\n-\n-/**\n- * {@link JDBCSeq} implementation that uses a database sequences\n- * to generate numbers.\n- *\n- * @see JDBCSeq\n- * @see AbstractJDBCSeq\n- */\n-public class NativeJDBCSeq\n-    extends AbstractJDBCSeq\n-    implements Configurable {\n-\n-    public static final String ACTION_DROP = \"drop\";\n-    public static final String ACTION_ADD = \"add\";\n-    public static final String ACTION_GET = \"get\";\n-\n-    private static Localizer _loc = Localizer.forPackage(NativeJDBCSeq.class);\n-\n-    private JDBCConfiguration _conf = null;\n-    private String _seqName = \"OPENJPA_SEQUENCE\";\n-    private int _increment = 1;\n-    private int _initial = 1;\n-    private int _allocate = 0;\n-    private Sequence _seq = null;\n-    private String _select = null;\n-\n-    // for deprecated auto-configuration support\n-    private String _format = null;\n-    private String _tableName = \"DUAL\";\n-    private boolean _subTable = false;\n-\n-    /**\n-     * The sequence name. Defaults to <code>OPENJPA_SEQUENCE</code>.\n-     */\n-    public String getSequence() {\n-        return _seqName;\n-    }\n-\n-    /**\n-     * The sequence name. Defaults to <code>OPENJPA_SEQUENCE</code>.\n-     */\n-    public void setSequence(String seqName) {\n-        _seqName = seqName;\n-    }\n-\n-    /**\n-     * @deprecated Use {@link #setSequence}. Retained for\n-     * backwards-compatibility for auto-configuration.\n-     */\n-    @Deprecated\n-    public void setSequenceName(String seqName) {\n-        setSequence(seqName);\n-    }\n-\n-    /**\n-     * @see Sequence#getInitialValue\n-     */\n-    public int getInitialValue() {\n-        return _initial;\n-    }\n-\n-    /**\n-     * @see Sequence#setInitialValue\n-     */\n-    public void setInitialValue(int initial) {\n-        _initial = initial;\n-    }\n-\n-    /**\n-     * @see Sequence#getAllocate\n-     */\n-    public int getAllocate() {\n-        return _allocate;\n-    }\n-\n-    /**\n-     * @see Sequence#setAllocate\n-     */\n-    public void setAllocate(int allocate) {\n-        _allocate = allocate;\n-    }\n-\n-    /**\n-     * @see Sequence#getIncrement\n-     */\n-    public int getIncrement() {\n-        return _increment;\n-    }\n-\n-    /**\n-     * @see Sequence#setIncrement\n-     */\n-    public void setIncrement(int increment) {\n-        _increment = increment;\n-    }\n-\n-    /**\n-     * @deprecated Retained for backwards-compatibility for auto-configuration.\n-     */\n-    @Deprecated\n-    public void setTableName(String table) {\n-        _tableName = table;\n-    }\n-\n-    /**\n-     * @deprecated Retained for backwards-compatibility for auto-configuration.\n-     */\n-    @Deprecated\n-    public void setFormat(String format) {\n-        _format = format;\n-        _subTable = true;\n-    }\n-\n-    @Override\n-    public void addSchema(ClassMapping mapping, SchemaGroup group) {\n-        // sequence already exists?\n-        if (group.isKnownSequence(_seqName))\n-            return;\n-\n-        String schemaName = Strings.getPackageName(_seqName);\n-        if (schemaName.length() == 0)\n-            schemaName = Schemas.getNewTableSchema(_conf);\n-\n-        // create table in this group\n-        Schema schema = group.getSchema(schemaName);\n-        if (schema == null)\n-            schema = group.addSchema(schemaName);\n-        schema.importSequence(_seq);\n-    }\n-\n-    @Override\n-    public JDBCConfiguration getConfiguration() {\n-        return _conf;\n-    }\n-    \n-    public void setConfiguration(Configuration conf) {\n-        _conf = (JDBCConfiguration) conf;\n-    }\n-\n-    public void startConfiguration() {\n-    }\n-\n-    public void endConfiguration() {\n-        buildSequence();\n-\n-        DBDictionary dict = _conf.getDBDictionaryInstance();\n-        if (_format == null) {\n-            _format = dict.nextSequenceQuery;\n-            if (_format == null)\n-                throw new MetaDataException(_loc.get(\"no-seq-sql\", _seqName));\n-        }\n-        if (_tableName == null)\n-            _tableName = \"DUAL\";\n-\n-        String name = dict.getFullName(_seq);\n-        Object[] subs = (_subTable) ? new Object[]{ name, _tableName }\n-            : new Object[]{ name };\n-        _select = MessageFormat.format(_format, subs);\n-        \n-        type = dict.nativeSequenceType;\n-    }\n-    \n-    @Override\n-    protected Object nextInternal(JDBCStore store, ClassMapping mapping)\n-        throws SQLException {\n-        Connection conn = getConnection(store);\n-        try {\n-            return Numbers.valueOf(getSequence(conn));\n-        } finally {\n-            closeConnection(conn);\n-        }\n-    }\n-\n-    /**\n-     * Creates the sequence object.\n-     */\n-    private void buildSequence() {\n-        String seqName = Strings.getClassName(_seqName);\n-        String schemaName = Strings.getPackageName(_seqName);\n-        if (schemaName.length() == 0)\n-            schemaName = Schemas.getNewTableSchema(_conf);\n-\n-        // build the sequence in one of the designated schemas\n-        SchemaGroup group = new SchemaGroup();\n-        Schema schema = group.addSchema(schemaName);\n-\n-        _seq = schema.addSequence(seqName);\n-        _seq.setInitialValue(_initial);\n-        _seq.setIncrement(_increment);\n-        _seq.setAllocate(_allocate);\n-    }\n-\n-    /**\n-     * Creates the sequence in the DB.\n-     */\n-    public void refreshSequence()\n-        throws SQLException {\n-        Log log = _conf.getLog(OpenJPAConfiguration.LOG_RUNTIME);\n-        if (log.isInfoEnabled())\n-            log.info(_loc.get(\"make-native-seq\"));\n-\n-        // create the sequence\n-        SchemaTool tool = new SchemaTool(_conf);\n-        tool.setIgnoreErrors(true);\n-        tool.createSequence(_seq);\n-    }\n-\n-    /**\n-     * Drops the sequence in the DB.\n-     */\n-    public void dropSequence()\n-        throws SQLException {\n-        Log log = _conf.getLog(OpenJPAConfiguration.LOG_RUNTIME);\n-        if (log.isInfoEnabled())\n-            log.info(_loc.get(\"drop-native-seq\"));\n-\n-        // drop the table\n-        SchemaTool tool = new SchemaTool(_conf);\n-        tool.setIgnoreErrors(true);\n-        tool.dropSequence(_seq);\n-    }\n-\n-    /**\n-     * Return the next sequence value.\n-     */\n-    private long getSequence(Connection conn)\n-        throws SQLException {\n-        PreparedStatement stmnt = null;\n-        ResultSet rs = null;\n-        try {\n-            stmnt = conn.prepareStatement(_select);\n-            rs = stmnt.executeQuery();\n-            if (rs.next())\n-                return rs.getLong(1);\n-\n-            // no row !?\n-            throw new UserException(_loc.get(\"invalid-seq-sql\", _select));\n-        } finally {\n-            // clean up our resources\n-            if (rs != null)\n-                try { rs.close(); } catch (SQLException se) {}\n-            if (stmnt != null)\n-                try { stmnt.close(); } catch (SQLException se) {}\n-        }\n-    }\n-\n-    /////////\n-    // Main\n-    /////////\n-\n-    /**\n-     * Usage: java org.apache.openjpa.jdbc.schema.NativeJDBCSequence [option]*\n-     * -action/-a &lt;add | drop | get&gt;\n-     *  Where the following options are recognized.\n-     * <ul>\n-     * <li><i>-properties/-p &lt;properties file or resource&gt;</i>: The\n-     * path or resource name of a OpenJPA properties file containing\n-     * information such as the license key\tand connection data as\n-     * outlined in {@link JDBCConfiguration}. Optional.</li>\n-     * <li><i>-&lt;property name&gt; &lt;property value&gt;</i>: All bean\n-     * properties of the OpenJPA {@link JDBCConfiguration} can be set by\n-     * using their\tnames and supplying a value. For example:\n-     * <code>-licenseKey adslfja83r3lkadf</code></li>\n-     * </ul>\n-     *  The various actions are as follows.\n-     * <ul>\n-     * <li><i>add</i>: Create the sequence.</li>\n-     * <li><i>drop</i>: Drop the sequence.</li>\n-     * <li><i>get</i>: Print the next sequence value.</li>\n-     * </ul>\n-     */\n-    public static void main(String[] args)\n-        throws Exception {\n-        Options opts = new Options();\n-        final String[] arguments = opts.setFromCmdLine(args);\n-        boolean ret = Configurations.runAgainstAllAnchors(opts,\n-            new Configurations.Runnable() {\n-            public boolean run(Options opts) throws Exception {\n-                JDBCConfiguration conf = new JDBCConfigurationImpl();\n-                try {\n-                    return NativeJDBCSeq.run(conf, arguments, opts);\n-                } finally {\n-                    conf.close();\n-                }\n-            }\n-        });\n-        if (!ret)\n-            System.out.println(_loc.get(\"native-seq-usage\"));\n-    }\n-\n-    /**\n-     * Run the tool. Returns false if invalid options were given.\n-     */\n-    public static boolean run(JDBCConfiguration conf, String[] args,\n-        Options opts)\n-        throws Exception {\n-        String action = opts.removeProperty(\"action\", \"a\", null);\n-        Configurations.populateConfiguration(conf, opts);\n-        return run(conf, args, action);\n-    }\n-\n-    /**\n-     * Run the tool. Return false if an invalid option was given.\n-     */\n-    public static boolean run(JDBCConfiguration conf, String[] args,\n-        String action)\n-        throws Exception {\n-        if (args.length != 0)\n-            return false;\n-\n-        NativeJDBCSeq seq = new NativeJDBCSeq();\n-        String props = Configurations.getProperties(conf.getSequence());\n-        Configurations.configureInstance(seq, conf, props);\n-\n-        if (ACTION_DROP.equals(action))\n-            seq.dropSequence();\n-        else if (ACTION_ADD.equals(action))\n-            seq.refreshSequence();\n-        else if (ACTION_GET.equals(action)) {\n-            Connection conn = conf.getDataSource2(null).getConnection();\n-            try {\n-                long cur = seq.getSequence(conn);\n-                System.out.println(cur);\n-            } finally {\n-                try { conn.close(); } catch (SQLException se) {}\n-            }\n-        } else\n-            return false;\n-        return true;\n-    }\n-}"},{"sha":"1059d613b97ce1437b8c68bc1d3c58b93c99dd60","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/OperationOrderUpdateManager.java","status":"removed","additions":0,"deletions":221,"changes":221,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/OperationOrderUpdateManager.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/OperationOrderUpdateManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/OperationOrderUpdateManager.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,221 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.kernel;\n-\n-import java.sql.Connection;\n-import java.sql.SQLException;\n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.Iterator;\n-\n-import org.apache.openjpa.jdbc.schema.ForeignKey;\n-import org.apache.openjpa.jdbc.sql.PrimaryRow;\n-import org.apache.openjpa.jdbc.sql.Row;\n-import org.apache.openjpa.jdbc.sql.RowImpl;\n-import org.apache.openjpa.jdbc.sql.RowManager;\n-import org.apache.openjpa.jdbc.sql.RowManagerImpl;\n-import org.apache.openjpa.jdbc.sql.SQLExceptions;\n-import org.apache.openjpa.kernel.OpenJPAStateManager;\n-\n-/**\n- * Update manager that writes SQL in object-level operation order.\n- *\n- * @author Abe White\n- */\n-public class OperationOrderUpdateManager\n-    extends AbstractUpdateManager {\n-\n-    public boolean orderDirty() {\n-        return true;\n-    }\n-\n-    protected RowManager newRowManager() {\n-        return new RowManagerImpl(true);\n-    }\n-\n-    protected PreparedStatementManager newPreparedStatementManager\n-        (JDBCStore store, Connection conn) {\n-        return new PreparedStatementManagerImpl(store, conn);\n-    }\n-\n-    protected Collection flush(RowManager rowMgr,\n-        PreparedStatementManager psMgr, Collection exceps) {\n-        RowManagerImpl rmimpl = (RowManagerImpl) rowMgr;\n-\n-        // first take care of all secondary table deletes and 'all row' deletes\n-        // (which are probably secondary table deletes), since no foreign\n-        // keys ever rely on secondary table pks\n-        flush(rmimpl.getAllRowDeletes(), psMgr);\n-        flush(rmimpl.getSecondaryDeletes(), psMgr);\n-\n-        // now do any 'all row' updates, which typically null keys\n-        flush(rmimpl.getAllRowUpdates(), psMgr);\n-\n-        // gather any updates we need to avoid fk constraints on deletes\n-        Collection constraintUpdates = null;\n-        for (Iterator itr = rmimpl.getDeletes().iterator(); itr.hasNext();) {\n-            try {\n-                constraintUpdates = analyzeDeleteConstraints(rmimpl,\n-                    (PrimaryRow) itr.next(), constraintUpdates);\n-            } catch (SQLException se) {\n-                exceps = addException(exceps, SQLExceptions.getStore\n-                    (se, dict));\n-            }\n-        }\n-        if (constraintUpdates != null) {\n-            flush(constraintUpdates, psMgr);\n-            constraintUpdates.clear();\n-        }\n-\n-        // flush primary rows in order\n-        for (Iterator itr = rmimpl.getOrdered().iterator(); itr.hasNext();) {\n-            try {\n-                constraintUpdates = flushPrimaryRow(rmimpl, (PrimaryRow)\n-                    itr.next(), psMgr, constraintUpdates);\n-            } catch (SQLException se) {\n-                exceps = addException(exceps, SQLExceptions.getStore\n-                    (se, dict));\n-            }\n-        }\n-        if (constraintUpdates != null)\n-            flush(constraintUpdates, psMgr);\n-\n-        // take care of all secondary table inserts and updates last, since\n-        // they may rely on previous inserts or updates, but nothing relies\n-        // on them\n-        flush(rmimpl.getSecondaryUpdates(), psMgr);\n-\n-        // flush any left over prepared statements\n-        psMgr.flush();\n-        return exceps;\n-    }\n-\n-    /**\n-     * Analyze the delete constraints on the given row, gathering necessary\n-     * updates to null fks before deleting.\n-     */\n-    private Collection analyzeDeleteConstraints(RowManagerImpl rowMgr,\n-        PrimaryRow row, Collection updates)\n-        throws SQLException {\n-        if (!row.isValid())\n-            return updates;\n-\n-        ForeignKey[] fks = row.getTable().getForeignKeys();\n-        OpenJPAStateManager sm;\n-        PrimaryRow rel;\n-        RowImpl update;\n-        for (int i = 0; i < fks.length; i++) {\n-            // when deleting ref fks we set the where value instead\n-            sm = row.getForeignKeySet(fks[i]);\n-            if (sm == null)\n-                sm = row.getForeignKeyWhere(fks[i]);\n-            if (sm == null)\n-                continue;\n-\n-            // only need an update if we have an fk to a row that's being\n-            // deleted before we are\n-            rel = (PrimaryRow) rowMgr.getRow(fks[i].getPrimaryKeyTable(),\n-                Row.ACTION_DELETE, sm, false);\n-            if (rel == null || !rel.isValid()\n-                || rel.getIndex() >= row.getIndex())\n-                continue;\n-\n-            // create an update to null the offending fk before deleting.  use\n-            // a primary row to be sure to copy delayed-flush pks/fks\n-            update = new PrimaryRow(row.getTable(), Row.ACTION_UPDATE, null);\n-            row.copyInto(update, true);\n-            update.setForeignKey(fks[i], row.getForeignKeyIO(fks[i]), null);\n-            if (updates == null)\n-                updates = new ArrayList();\n-            updates.add(update);\n-        }\n-        return updates;\n-    }\n-\n-    /**\n-     * Flush the given row, creating deferred updates for dependencies.\n-     */\n-    private Collection flushPrimaryRow(RowManagerImpl rowMgr, PrimaryRow row,\n-        PreparedStatementManager psMgr, Collection updates)\n-        throws SQLException {\n-        if (!row.isValid())\n-            return updates;\n-\n-        // already analyzed deletes\n-        if (row.getAction() == Row.ACTION_DELETE) {\n-            psMgr.flush(row);\n-            return updates;\n-        }\n-\n-        ForeignKey[] fks = row.getTable().getForeignKeys();\n-        OpenJPAStateManager sm;\n-        PrimaryRow rel;\n-        PrimaryRow update;\n-        for (int i = 0; i < fks.length; i++) {\n-            sm = row.getForeignKeySet(fks[i]);\n-            if (sm == null)\n-                continue;\n-\n-            // only need an update if we have an fk to a row that's being\n-            // inserted after we are; if row is dependent on itself and no\n-            // fk, must be an auto-inc because otherwise we wouldn't have\n-            // recorded it\n-            rel = (PrimaryRow) rowMgr.getRow(fks[i].getPrimaryKeyTable(),\n-                Row.ACTION_INSERT, sm, false);\n-            if (rel == null || !rel.isValid()\n-                || rel.getIndex() < row.getIndex()\n-                || (rel == row && !fks[i].isDeferred() && !fks[i].isLogical()))\n-                continue;\n-\n-            // don't insert or update with the given fk; create a deferred\n-            // update for after the rel row has been inserted; use a primary row\n-            // to prevent setting values until after flush to get auto-inc\n-            update = new PrimaryRow(row.getTable(), Row.ACTION_UPDATE, null);\n-            if (row.getAction() == Row.ACTION_INSERT)\n-                update.wherePrimaryKey(row.getPrimaryKey());\n-            else\n-                row.copyInto(update, true);\n-            update.setForeignKey(fks[i], row.getForeignKeyIO(fks[i]), sm);\n-            row.clearForeignKey(fks[i]);\n-\n-            if (updates == null)\n-                updates = new ArrayList();\n-            updates.add(update);\n-        }\n-\n-        if (row.isValid()) // if update, maybe no longer needed\n-            psMgr.flush(row);\n-        return updates;\n-    }\n-\n-    /**\n-     * Flush the given collection of secondary rows.\n-     */\n-    protected void flush(Collection rows, PreparedStatementManager psMgr) {\n-        if (rows.isEmpty())\n-            return;\n-\n-        RowImpl row;\n-        for (Iterator itr = rows.iterator(); itr.hasNext();) {\n-            row = (RowImpl) itr.next();\n-            if (row.isValid())\n-                psMgr.flush(row);\n-        }\n-    }\n-}"},{"sha":"4945b019b097288c212f7b04070f72e348c3bcce","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PagingResultObjectProvider.java","status":"removed","additions":0,"deletions":460,"changes":460,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PagingResultObjectProvider.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PagingResultObjectProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PagingResultObjectProvider.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,460 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.kernel;\n-\n-import java.sql.SQLException;\n-import java.util.Arrays;\n-import java.util.BitSet;\n-\n-import org.apache.openjpa.jdbc.meta.ClassMapping;\n-import org.apache.openjpa.jdbc.meta.FieldMapping;\n-import org.apache.openjpa.jdbc.schema.Column;\n-import org.apache.openjpa.jdbc.sql.DBDictionary;\n-import org.apache.openjpa.jdbc.sql.Result;\n-import org.apache.openjpa.jdbc.sql.SQLBuffer;\n-import org.apache.openjpa.jdbc.sql.Select;\n-import org.apache.openjpa.jdbc.sql.SelectExecutor;\n-import org.apache.openjpa.kernel.FetchConfiguration;\n-import org.apache.openjpa.kernel.OpenJPAStateManager;\n-import org.apache.openjpa.kernel.StoreContext;\n-import org.apache.openjpa.lib.util.Closeable;\n-import org.apache.openjpa.util.InternalException;\n-\n-/**\n- * Object provider implementation that fetches one page of results at a\n- * a time as it scrolls. If the {@link #getPagedFields} method returns a\n- * non-null bit set, this this provider is a good fit for your configuration.\n- * The method tests the following conditions:\n- * <ul>\n- * <li>The eager fetch mode is <code>parallel</code>.</li>\n- * <li>The select's result should be treated as a large result set.</li>\n- * <li>The mapping being selected has fields that use parallel selects\n- * under the current fetch configuration.</li>\n- * </ul>\n- *  To use this provider, select the candidate mapping with eager fetch\n- * mode set to <code>join</code>. This provider will take care of performing\n- * <code>parallel</code> mode batch selects for each page it reads.\n- *\n- * @author Abe White\n- * @nojavadoc\n- */\n-public class PagingResultObjectProvider\n-    extends SelectResultObjectProvider {\n-\n-    private final ClassMapping[] _mappings;\n-    private final Object[] _page;\n-    private final int[] _idxs;\n-    private final BitSet[] _paged;\n-    private int _pos = -1; // logical pos\n-    private int _pagePos = -1; // pos of page start\n-\n-    /**\n-     * Return a bit set representing batch select fields that will be paged,\n-     * or null if no fields need paging, which indicates that this provider\n-     * should not be used.\n-     *\n-     * @see #PagingResultObjectProvider\n-     */\n-    public static BitSet getPagedFields(Select sel, ClassMapping mapping,\n-        JDBCStore store, JDBCFetchConfiguration fetch, int eagerMode,\n-        long size) {\n-        // if we have a range then we always use paging if there are any\n-        // eager select fields; otherwise it depends on lrs and fetch settings\n-        if (size == Long.MAX_VALUE || !sel.getAutoDistinct()) {\n-            // not lrs?\n-            if (!sel.isLRS())\n-                return null;\n-            // not configured for lazy loading?\n-            if (fetch.getFetchBatchSize() < 0)\n-                return null;\n-        }\n-\n-        // not configured for eager selects?\n-        eagerMode = Math.min(eagerMode, fetch.getEagerFetchMode());\n-        if (eagerMode != fetch.EAGER_PARALLEL)\n-            return null;\n-\n-        // are there any mappings that require batched selects?\n-        FieldMapping[] fms = mapping.getDefinedFieldMappings();\n-        BitSet paged = null;\n-        for (int i = 0; i < fms.length; i++) {\n-            if (fetch.requiresFetch(fms[i]) != FetchConfiguration.FETCH_LOAD)\n-                continue;\n-\n-            if (fms[i].supportsSelect(sel, sel.EAGER_PARALLEL, null, store,\n-                fetch) > 0 && (fms[i].isEagerSelectToMany() || fms[i].\n-                supportsSelect(sel, sel.EAGER_OUTER, null, store, fetch) == 0))\n-            {\n-                if (paged == null)\n-                    paged = new BitSet();\n-                paged.set(fms[i].getIndex());\n-            }\n-        }\n-        return paged;\n-    }\n-\n-    /**\n-     * Constructor.\n-     *\n-     * @param sel the select to execute\n-     * @param mapping the mapping of the result objects\n-     * @param store the store manager to delegate loading to\n-     * @param fetch the fetch configuration, or null for default\n-     * @param paged the bit set returned from {@link #getPagedFields}\n-     * @param size the known maximum size of the result, or\n-     * {@link Long#MAX_VALUE} for no known limit\n-     */\n-    public PagingResultObjectProvider(SelectExecutor sel,\n-        ClassMapping mapping, JDBCStore store, JDBCFetchConfiguration fetch,\n-        BitSet paged, long size) {\n-        this(sel, new ClassMapping[]{ mapping }, store, fetch,\n-            new BitSet[]{ paged }, size);\n-    }\n-\n-    /**\n-     * Constructor.\n-     *\n-     * @param sel the select to execute\n-     * @param mappings the mappings for the independent classes of the\n-     * result objects\n-     * @param store the store manager to delegate loading to\n-     * @param fetch the fetch configuration, or null for default\n-     * @param paged the bit sets returned from {@link #getPagedFields}\n-     * for each select in the possible union\n-     * @param size the known maximum size of the result, or\n-     * {@link Long#MAX_VALUE} for no known limit\n-     */\n-    public PagingResultObjectProvider(SelectExecutor sel,\n-        ClassMapping[] mappings, JDBCStore store, JDBCFetchConfiguration fetch,\n-        BitSet[] paged, long size) {\n-        super(sel, store, fetch);\n-        _mappings = mappings;\n-        _paged = paged;\n-\n-        // don't let system construct this type of rop for stupid sizes\n-        if (size <= 1)\n-            throw new InternalException(\"size=\" + size);\n-\n-        // try to find a good page size.  if the known size < batch size, use\n-        // it.  if the batch size is set, then use that; if it's sorta close\n-        // to the size, then use the size / 2 to get two full pages rather\n-        // than a possible big one and small one\n-        int batch = getFetchConfiguration().getFetchBatchSize();\n-        int pageSize;\n-        if (batch < 0)\n-            pageSize = (int) size;\n-        else {\n-            if (batch == 0)\n-                batch = 50; // reasonable default\n-            if (size <= batch)\n-                pageSize = (int) size;\n-            else if (size <= batch * 2) {\n-                if (size % 2 == 0)\n-                    pageSize = (int) (size / 2);\n-                else\n-                    pageSize = (int) (size / 2 + 1);\n-            } else\n-                pageSize = batch;\n-        }\n-\n-        _page = new Object[pageSize];\n-        if (_paged.length > 1)\n-            _idxs = new int[pageSize];\n-        else\n-            _idxs = null;\n-    }\n-\n-    /**\n-     * Return the page size in use.\n-     */\n-    public int getPageSize() {\n-        return _page.length;\n-    }\n-\n-    public void open()\n-        throws SQLException {\n-        super.open();\n-        _pos = -1;\n-    }\n-\n-    public boolean next()\n-        throws SQLException {\n-        _pos++;\n-        if (inPage())\n-            return _page[_pos - _pagePos] != null;\n-        if (!super.next()) {\n-            setSize(_pos);\n-            return false;\n-        }\n-        return true;\n-    }\n-\n-    public boolean absolute(int pos)\n-        throws SQLException {\n-        _pos = pos;\n-        if (inPage())\n-            return _page[_pos - _pagePos] != null;\n-        return super.absolute(pos);\n-    }\n-\n-    public Object getResultObject()\n-        throws SQLException {\n-        if (!inPage())\n-            fillPage();\n-        return _page[_pos - _pagePos];\n-    }\n-\n-    /**\n-     * Test whether our current position is within the cached page of results.\n-     */\n-    private boolean inPage() {\n-        return _pagePos != -1 && _pos >= _pagePos\n-            && _pos < _pagePos + _page.length;\n-    }\n-\n-    /**\n-     * Start a new page at the present position.\n-     */\n-    private void fillPage()\n-        throws SQLException {\n-        // clear page\n-        Arrays.fill(_page, null);\n-\n-        // cache result objects\n-        JDBCStoreManager storeMgr = (JDBCStoreManager) getStore();\n-        ClassMapping mapping;\n-        Result res;\n-        int idx;\n-        for (int i = 0; i < _page.length; i++) {\n-            res = getResult();\n-            idx = res.indexOf();\n-            if (_idxs != null)\n-                _idxs[i] = idx;\n-            mapping = res.getBaseMapping();\n-            if (mapping == null)\n-                mapping = _mappings[idx];\n-\n-            // rather than use the standard result.load(), we go direct to\n-            // the store manager so we can pass in our eager-fetched fields as\n-            // fields to exclude from the initial load of the objects\n-            _page[i] = storeMgr.load(mapping, getFetchConfiguration(),\n-                _paged[idx], res);\n-            if (i != _page.length - 1 && !getResult().next()) {\n-                setSize(_pos + i + 1);\n-                break;\n-            }\n-        }\n-\n-        // load data for eager fields\n-        _pagePos = _pos;\n-        if (_page[0] != null) {\n-            if (_page.length > 1 && _page[1] == null)\n-                loadEagerFields();\n-            else\n-                executeEagerSelects();\n-        }\n-    }\n-\n-    /**\n-     * When there is only one instance in a page, load fields as normal.\n-     */\n-    private void loadEagerFields()\n-        throws SQLException {\n-        int idx = (_idxs == null) ? 0 : _idxs[0];\n-        if (_paged[idx] == null)\n-            return;\n-\n-        JDBCStore store = getStore();\n-        OpenJPAStateManager sm = store.getContext().getStateManager(_page[0]);\n-        for (int i = 0, len = _paged[idx].length(); i < len; i++) {\n-            if (_paged[idx].get(i)) {\n-                _mappings[idx].getFieldMapping(i).load(sm, store,\n-                    getFetchConfiguration());\n-            }\n-        }\n-    }\n-\n-    /**\n-     * Load eager batch selects for current page of results.\n-     */\n-    private void executeEagerSelects()\n-        throws SQLException {\n-        if (_idxs == null) {\n-            executeEagerSelects(_mappings[0], _paged[0], 0, _page.length);\n-            return;\n-        }\n-\n-        int start = 0;\n-        int idx = _idxs[0];\n-        int pos = 0;\n-        for (; pos < _page.length && _page[pos] != null; pos++) {\n-            if (idx != _idxs[pos]) {\n-                if (_paged[idx] != null)\n-                    executeEagerSelects(_mappings[idx], _paged[idx], start,\n-                        pos);\n-                start = pos;\n-                idx = _idxs[pos];\n-            }\n-        }\n-        if (start < pos && _paged[idx] != null) // cleanup remainder\n-            executeEagerSelects(_mappings[idx], _paged[idx], start, pos);\n-    }\n-\n-    /**\n-     * Load eager batch selects for the given mapping and its superclasses.\n-     */\n-    private void executeEagerSelects(ClassMapping mapping, BitSet paged,\n-        int start, int end)\n-        throws SQLException {\n-        // base case\n-        if (mapping == null)\n-            return;\n-\n-        // recurse on superclass\n-        executeEagerSelects(mapping.getJoinablePCSuperclassMapping(), paged,\n-            start, end);\n-\n-        // figure out how many batch selects to do on this mapping\n-        FieldMapping[] fms = mapping.getDefinedFieldMappings();\n-        int sels = 0;\n-        for (int i = 0; i < fms.length; i++)\n-            if (paged.get(fms[i].getIndex()))\n-                sels++;\n-        if (sels == 0)\n-            return;\n-\n-        // create where condition limiting instances to this page\n-        JDBCStore store = getStore();\n-        Select sel = store.getSQLFactory().newSelect();\n-        DBDictionary dict = store.getDBDictionary();\n-        SQLBuffer buf = new SQLBuffer(dict);\n-        Column[] pks = mapping.getPrimaryKeyColumns();\n-        if (pks.length == 1)\n-            createInContains(sel, dict, buf, mapping, pks, start, end);\n-        else\n-            orContains(sel, buf, mapping, pks, start, end);\n-        sel.where(buf);\n-\n-        StoreContext ctx = store.getContext();\n-        JDBCFetchConfiguration fetch = getFetchConfiguration();\n-        // do each batch select\n-        Object res;\n-        int esels = 0;\n-        SelectExecutor esel;\n-        int unions;\n-        for (int i = 0; i < fms.length; i++) {\n-            if (!paged.get(fms[i].getIndex()))\n-                continue;\n-\n-            unions = fms[i].supportsSelect(sel, Select.EAGER_PARALLEL, null,\n-                store, fetch);\n-            if (unions == 0)\n-                continue;\n-\n-            // we don't need to clone if this is the last select\n-            esels++;\n-            if (esels < sels || unions > 1)\n-                esel = sel.whereClone(unions);\n-            else\n-                esel = sel;\n-\n-            // get result\n-            fms[i].selectEagerParallel(esel, null, store, fetch,\n-                JDBCFetchConfiguration.EAGER_PARALLEL);\n-            res = esel.execute(store, fetch);\n-            try {\n-                // and load result into paged instances\n-                for (int j = start; j < end && _page[j] != null; j++)\n-                    res = fms[i].loadEagerParallel(ctx.getStateManager\n-                        (_page[j]), store, fetch, res);\n-            } finally {\n-                if (res instanceof Closeable)\n-                    try { ((Closeable) res).close(); } catch (Exception e) {}\n-            }\n-        }\n-    }\n-\n-    /**\n-     *  Based on the DBDictionary, create the needed IN clauses.\n-     */\n-    private void createInContains(Select sel, DBDictionary dict, SQLBuffer buf, \n-        ClassMapping mapping, Column[] pks, int start, int end) {\n-        int inClauseLimit = dict.inClauseLimit;\n-        if (inClauseLimit <= 0 || end - start <= inClauseLimit)\n-            inContains(sel, buf, mapping, pks, start, end);\n-        else {\n-            buf.append(\"(\");\n-            for (int low = start, high; low < end; low = high) {\n-                if (low > start)\n-                    buf.append(\" OR \");\n-                high = Math.min(low + inClauseLimit, end);\n-                inContains(sel, buf, mapping, pks, low, high);\n-            }\n-            buf.append(\")\");\n-        }\n-    }\n-    \n-    /**\n-     * Create an IN clause limiting the results to the current page.\n-     */\n-    private void inContains(Select sel, SQLBuffer buf, ClassMapping mapping,\n-        Column[] pks, int start, int end) {\n-        buf.append(sel.getColumnAlias(pks[0])).append(\" IN (\");\n-        for (int i = start; i < end && _page[i] != null; i++) {\n-            if (i > start)\n-                buf.append(\", \");\n-            buf.appendValue(mapping.toDataStoreValue(_page[i], pks,\n-                getStore()), pks[0]);\n-        }\n-        buf.append(\")\");\n-    }\n-\n-    /**\n-     * Create OR conditions limiting the results to the curent page.\n-     */\n-    private void orContains(Select sel, SQLBuffer buf, ClassMapping mapping,\n-        Column[] pks, int start, int end) {\n-        String[] aliases = new String[pks.length];\n-        for (int i = 0; i < pks.length; i++)\n-            aliases[i] = sel.getColumnAlias(pks[i]);\n-\n-        Object[] vals;\n-        buf.append(\"(\");\n-        for (int i = start; i < end && _page[i] != null; i++) {\n-            if (i > start)\n-                buf.append(\" OR \");\n-\n-            vals = (Object[]) mapping.toDataStoreValue(_page[i], pks,\n-                getStore());\n-            buf.append(\"(\");\n-            for (int j = 0; j < vals.length; j++) {\n-                if (j > 0)\n-                    buf.append(\" AND \");\n-                buf.append(aliases[j]);\n-                if (vals[j] == null)\n-                    buf.append(\" IS \");\n-                else\n-                    buf.append(\" = \");\n-                buf.appendValue(vals[j], pks[j]);\n-            }\n-            buf.append(\")\");\n-        }\n-        buf.append(\")\");\n-    }\n-}"},{"sha":"e08fbdea961159cc2ac9b6fbf09f82f00c762f87","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PessimisticLockManager.java","status":"removed","additions":0,"deletions":213,"changes":213,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PessimisticLockManager.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PessimisticLockManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PessimisticLockManager.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,213 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.kernel;\n-\n-import java.sql.Connection;\n-import java.sql.PreparedStatement;\n-import java.sql.ResultSet;\n-import java.sql.SQLException;\n-\n-import org.apache.openjpa.jdbc.meta.ClassMapping;\n-import org.apache.openjpa.jdbc.sql.DBDictionary;\n-import org.apache.openjpa.jdbc.sql.SQLBuffer;\n-import org.apache.openjpa.jdbc.sql.SQLExceptions;\n-import org.apache.openjpa.jdbc.sql.Select;\n-import org.apache.openjpa.kernel.OpenJPAStateManager;\n-import org.apache.openjpa.kernel.StoreContext;\n-import org.apache.openjpa.kernel.VersionLockManager;\n-import org.apache.openjpa.lib.util.Localizer;\n-import org.apache.openjpa.util.LockException;\n-\n-/**\n- * Lock manager that uses exclusive database locks.\n- *\n- * @author Marc Prud'hommeaux\n- */\n-public class PessimisticLockManager\n-    extends VersionLockManager\n-    implements JDBCLockManager {\n-\n-    public static final int LOCK_DATASTORE_ONLY = 1;\n-\n-    private static final Localizer _loc = Localizer.forPackage\n-        (PessimisticLockManager.class);\n-\n-    private JDBCStore _store;\n-\n-    public PessimisticLockManager() {\n-        setVersionCheckOnReadLock(false);\n-        setVersionUpdateOnWriteLock(false);\n-    }\n-\n-    public void setContext(StoreContext ctx) {\n-        super.setContext(ctx);\n-        _store = (JDBCStore) ctx.getStoreManager().getInnermostDelegate();\n-    }\n-\n-    public boolean selectForUpdate(Select sel, int lockLevel) {\n-        if (lockLevel == LOCK_NONE)\n-            return false;\n-\n-        DBDictionary dict = _store.getDBDictionary();\n-        if (dict.simulateLocking)\n-            return false;\n-        dict.assertSupport(dict.supportsSelectForUpdate,\n-            \"SupportsSelectForUpdate\");\n-\n-        if (!sel.supportsLocking()) {\n-            if (log.isInfoEnabled())\n-                log.info(_loc.get(\"cant-lock-on-load\",\n-                    sel.toSelect(false, null).getSQL()));\n-            return false;\n-        }\n-\n-        ensureStoreManagerTransaction();\n-        return true;\n-    }\n-\n-    public void loadedForUpdate(OpenJPAStateManager sm) {\n-        // we set a low lock level to indicate that we don't need datastore\n-        // locking, but we don't necessarily have a read or write lock\n-        // according to our superclass\n-        if (getLockLevel(sm) == LOCK_NONE)\n-            setLockLevel(sm, LOCK_DATASTORE_ONLY);\n-    }\n-\n-    protected void lockInternal(OpenJPAStateManager sm, int level, int timeout,\n-        Object sdata) {\n-        // we can skip any already-locked instance regardless of level because\n-        // we treat all locks the same (though super doesn't)\n-        if (getLockLevel(sm) == LOCK_NONE) {\n-            // only need to lock if not loaded from locking result\n-            ConnectionInfo info = (ConnectionInfo) sdata;\n-            if (info == null || info.result == null || !info.result.isLocking())\n-                lockRow(sm, timeout);\n-        }\n-        super.lockInternal(sm, level, timeout, sdata);\n-    }\n-\n-    /**\n-     * Lock the specified instance row by issuing a \"SELECT ... FOR UPDATE\"\n-     * statement.\n-     */\n-    private void lockRow(OpenJPAStateManager sm, int timeout) {\n-        // assert that the dictionary supports the \"SELECT ... FOR UPDATE\"\n-        // construct; if not, and we the assertion does not throw an\n-        // exception, then just return without locking\n-        DBDictionary dict = _store.getDBDictionary();\n-        if (dict.simulateLocking)\n-            return;\n-        dict.assertSupport(dict.supportsSelectForUpdate,\n-            \"SupportsSelectForUpdate\");\n-\n-        Object id = sm.getObjectId();\n-        ClassMapping mapping = (ClassMapping) sm.getMetaData();\n-        while (mapping.getJoinablePCSuperclassMapping() != null)\n-            mapping = mapping.getJoinablePCSuperclassMapping();\n-\n-        // select only the PK columns, since we just want to lock\n-        Select select = _store.getSQLFactory().newSelect();\n-        select.select(mapping.getPrimaryKeyColumns());\n-        select.wherePrimaryKey(id, mapping, _store);\n-        SQLBuffer sql = select.toSelect(true, _store.getFetchConfiguration());\n-\n-        ensureStoreManagerTransaction();\n-        Connection conn = _store.getConnection();\n-        PreparedStatement stmnt = null;\n-        ResultSet rs = null;\n-        try {\n-            stmnt = prepareStatement(conn, sql);\n-            setTimeout(stmnt, timeout);\n-            rs = executeQuery(conn, stmnt, sql);\n-            checkLock(rs, sm);\n-        } catch (SQLException se) {\n-            throw SQLExceptions.getStore(se, dict);\n-        } finally {\n-            if (stmnt != null)\n-                try { stmnt.close(); } catch (SQLException se) {}\n-            if (rs != null)\n-                try { rs.close(); } catch (SQLException se) {}\n-            try { conn.close(); } catch (SQLException se) {}\n-        }\n-    }\n-\n-    /**\n-     * Enforce that we have an actual transaction in progress so that we can\n-     * start locking. The transaction should already be begun when using a\n-     * datastore transaction; this will just be used if we are locking in\n-     * optimistic mode.\n-     */\n-    private void ensureStoreManagerTransaction() {\n-        if (!_store.getContext().isStoreActive()) {\n-            _store.getContext().beginStore();\n-            if (log.isInfoEnabled())\n-                log.info(_loc.get(\"start-trans-for-lock\"));\n-        }\n-    }\n-    \n-    public JDBCStore getStore() {\n-        return _store;\n-    }\n-    \n-    /**\n-     * This method is to provide override for non-JDBC or JDBC-like \n-     * implementation of preparing statement.\n-     */\n-    protected PreparedStatement prepareStatement(Connection conn, SQLBuffer sql)\n-        throws SQLException {\n-        return sql.prepareStatement(conn);\n-    }\n-    \n-    /**\n-     * This method is to provide override for non-JDBC or JDBC-like \n-     * implementation of setting query timeout.\n-     */\n-    protected void setTimeout(PreparedStatement stmnt, int timeout)\n-        throws SQLException {\n-        DBDictionary dict = _store.getDBDictionary();\n-        if (timeout >= 0 && dict.supportsQueryTimeout) {\n-            if (timeout < 1000) {\n-                timeout = 1000;\n-                if (log.isWarnEnabled())\n-                    log.warn(_loc.get(\"millis-query-timeout\"));\n-            }\n-            stmnt.setQueryTimeout(timeout / 1000);\n-        }\n-    }\n-    \n-    /**\n-     * This method is to provide override for non-JDBC or JDBC-like \n-     * implementation of executing query.\n-     */\n-    protected ResultSet executeQuery(Connection conn, PreparedStatement stmnt, \n-        SQLBuffer sql) throws SQLException {\n-        return stmnt.executeQuery();\n-    }\n-    \n-    /**\n-     * This method is to provide override for non-JDBC or JDBC-like \n-     * implementation of checking lock from the result set.\n-     */\n-    protected void checkLock(ResultSet rs, OpenJPAStateManager sm)\n-        throws SQLException { \n-        if (!rs.next())\n-            throw new LockException(sm.getManagedInstance());\n-        return;\n-    }\n-}"},{"sha":"ae53d835e7109d1ce6cd1309d526f68072029669","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedStatementManager.java","status":"removed","additions":0,"deletions":47,"changes":47,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedStatementManager.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedStatementManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedStatementManager.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,47 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.kernel;\n-\n-import java.util.Collection;\n-\n-import org.apache.openjpa.jdbc.sql.RowImpl;\n-\n-/**\n- * Manages prepared statement execution.\n- *\n- * @author Abe White\n- */\n-public interface PreparedStatementManager {\n-\n-    /**\n-     * Return the exceptions encountered during all flushes.\n-     */\n-    public Collection getExceptions();\n-\n-    /**\n-     * Flush the given row.\n-     */\n-    public void flush(RowImpl row);\n-\n-    /**\n-     * This method must be called after the last row has been\n-     * flushed, to flush any remaining statements.\n-     */\n-    public void flush();\n-}"},{"sha":"87908437f65898459fe10788eaf2b020dff15cba","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedStatementManagerImpl.java","status":"removed","additions":0,"deletions":162,"changes":162,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedStatementManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedStatementManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedStatementManagerImpl.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,162 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.kernel;\n-\n-import java.sql.Connection;\n-import java.sql.PreparedStatement;\n-import java.sql.SQLException;\n-import java.util.Collection;\n-import java.util.LinkedList;\n-\n-import org.apache.openjpa.jdbc.meta.ClassMapping;\n-import org.apache.openjpa.jdbc.schema.Column;\n-import org.apache.openjpa.jdbc.sql.DBDictionary;\n-import org.apache.openjpa.jdbc.sql.Row;\n-import org.apache.openjpa.jdbc.sql.RowImpl;\n-import org.apache.openjpa.jdbc.sql.SQLExceptions;\n-import org.apache.openjpa.kernel.OpenJPAStateManager;\n-import org.apache.openjpa.lib.util.Localizer;\n-import org.apache.openjpa.util.ApplicationIds;\n-import org.apache.openjpa.util.OpenJPAException;\n-import org.apache.openjpa.util.OptimisticException;\n-\n-/**\n- * Basic prepared statement manager implementation.\n- *\n- * @author Abe White\n- */\n-public class PreparedStatementManagerImpl \n-    implements PreparedStatementManager {\n-\n-    private final static Localizer _loc = Localizer\n-        .forPackage(PreparedStatementManagerImpl.class);\n-\n-    protected final JDBCStore _store;\n-    protected final Connection _conn;\n-    protected final DBDictionary _dict;\n-\n-    // track exceptions\n-    protected final Collection _exceptions = new LinkedList();\n-\n-    /**\n-     * Constructor. Supply connection.\n-     */\n-    public PreparedStatementManagerImpl(JDBCStore store, Connection conn) {\n-        _store = store;\n-        _dict = store.getDBDictionary();\n-        _conn = conn;\n-    }\n-\n-    public Collection getExceptions() {\n-        return _exceptions;\n-    }\n-\n-    public void flush(RowImpl row) {\n-        try {\n-            flushInternal(row);\n-        } catch (SQLException se) {\n-            _exceptions.add(SQLExceptions.getStore(se, _dict));\n-        } catch (OpenJPAException ke) {\n-            _exceptions.add(ke);\n-        }\n-    }\n-\n-    /**\n-     * Flush the given row.\n-     */\n-    protected void flushInternal(RowImpl row) throws SQLException {\n-        // can't batch rows with auto-inc columns\n-        Column[] autoAssign = null;\n-        if (row.getAction() == Row.ACTION_INSERT)\n-            autoAssign = row.getTable().getAutoAssignedColumns();\n-\n-        flushAndUpdate(row);\n-\n-        // set auto assign values\n-        if (autoAssign != null && autoAssign.length > 0\n-            && row.getPrimaryKey() != null) {\n-            OpenJPAStateManager sm = row.getPrimaryKey();\n-            ClassMapping mapping = (ClassMapping) sm.getMetaData();\n-            Object val;\n-            for (int i = 0; i < autoAssign.length; i++) {\n-                val = _dict.getGeneratedKey(autoAssign[i], _conn);\n-                mapping.assertJoinable(autoAssign[i]).setAutoAssignedValue(sm,\n-                    _store, autoAssign[i], val);\n-            }\n-            sm.setObjectId(\n-                ApplicationIds.create(sm.getPersistenceCapable(), mapping));\n-        }\n-    }\n-\n-    /**\n-     * Flush the given row immediately. \n-     */\n-    protected void flushAndUpdate(RowImpl row)\n-        throws SQLException {\n-        // prepare statement\n-        String sql = row.getSQL(_dict);\n-        PreparedStatement stmnt = prepareStatement(sql);\n-\n-        // setup parameters and execute statement\n-        if (stmnt != null)\n-            row.flush(stmnt, _dict, _store);\n-        try {\n-            int count = executeUpdate(stmnt, sql, row);\n-            if (count != 1) {\n-                Object failed = row.getFailedObject();\n-                if (failed != null)\n-                    _exceptions.add(new OptimisticException(failed));\n-                else if (row.getAction() == Row.ACTION_INSERT)\n-                    throw new SQLException(_loc.get(\n-                        \"update-failed-no-failed-obj\", String.valueOf(count),\n-                        sql).getMessage());\n-            }\n-        } catch (SQLException se) {\n-            throw SQLExceptions.getStore(se, row.getFailedObject(), _dict);\n-        } finally {\n-            if (stmnt != null) {\n-                try {\n-                    stmnt.close();\n-                } catch (SQLException se) {\n-                }\n-            }\n-        }\n-    }\n-\n-    public void flush() {\n-    }\n-    \n-    /**\n-     * This method is to provide override for non-JDBC or JDBC-like \n-     * implementation of executing update.\n-     */\n-    protected int executeUpdate(PreparedStatement stmnt, String sql, \n-        RowImpl row) throws SQLException {\n-        return stmnt.executeUpdate();\n-    }\n-        \n-    /**\n-     * This method is to provide override for non-JDBC or JDBC-like \n-     * implementation of preparing statement.\n-     */\n-    protected PreparedStatement prepareStatement(String sql)\n-        throws SQLException {\n-        return _conn.prepareStatement(sql);\n-    }\n-}"},{"sha":"56e04ebdd0a3e90b00d355288495b2b74e816596","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/ProjectionResultObjectProvider.java","status":"removed","additions":0,"deletions":82,"changes":82,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/ProjectionResultObjectProvider.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/ProjectionResultObjectProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/ProjectionResultObjectProvider.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,82 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.kernel;\n-\n-import org.apache.openjpa.jdbc.kernel.exps.ExpContext;\n-import org.apache.openjpa.jdbc.kernel.exps.QueryExpressionsState;\n-import org.apache.openjpa.jdbc.kernel.exps.Val;\n-import org.apache.openjpa.jdbc.sql.Result;\n-import org.apache.openjpa.jdbc.sql.SelectExecutor;\n-import org.apache.openjpa.kernel.exps.QueryExpressions;\n-\n-/**\n- * Object provider implementation wrapped around a projection select.\n- *\n- * @author Abe White\n- */\n-class ProjectionResultObjectProvider\n-    extends SelectResultObjectProvider {\n-\n-    private final QueryExpressions[] _exps;\n-    private final QueryExpressionsState[] _state;\n-    private final ExpContext _ctx;\n-\n-    /**\n-     * Constructor.\n-     *\n-     * @param sel the select to execute\n-     * @param exps the query expressions\n-     * @param states the query expression states\n-     * @param ctx the query execution context\n-     */\n-    public ProjectionResultObjectProvider(SelectExecutor sel, \n-        QueryExpressions exps, QueryExpressionsState state, ExpContext ctx) {\n-        this(sel, new QueryExpressions[]{ exps }, \n-            new QueryExpressionsState[]{ state }, ctx);\n-    }\n-\n-    /**\n-     * Constructor.\n-     *\n-     * @param sel the select to execute\n-     * @param exps the query expressions\n-     * @param states the query expression states\n-     * @param ctx the query execution context\n-     */\n-    public ProjectionResultObjectProvider(SelectExecutor sel, \n-        QueryExpressions[] exps, QueryExpressionsState[] state, ExpContext ctx){\n-        super(sel, ctx.store, ctx.fetch);\n-        _exps = exps;\n-        _state = state;\n-        _ctx = ctx;\n-    }\n-\n-    public Object getResultObject()\n-        throws Exception {\n-        Result res = getResult();\n-        // for a projection, Result has no base mapping\n-        res.setBaseMapping(null);\n-        int idx = res.indexOf();\n-        Object[] arr = new Object[_exps[idx].projections.length];\n-        for (int i = 0; i < _exps[idx].projections.length; i++)\n-            arr[i] = ((Val) _exps[idx].projections[i]).load(_ctx, \n-                _state[idx].projections[i], res);\n-        return arr;\n-    }\n-}"},{"sha":"a14c605f051b098049f8d601119506330b10899c","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/SQLProjectionResultObjectProvider.java","status":"removed","additions":0,"deletions":131,"changes":131,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/SQLProjectionResultObjectProvider.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/SQLProjectionResultObjectProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/SQLProjectionResultObjectProvider.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,131 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.kernel;\n-\n-import java.sql.ResultSet;\n-import java.sql.ResultSetMetaData;\n-import java.sql.SQLException;\n-\n-import org.apache.openjpa.jdbc.meta.JavaSQLTypes;\n-import org.apache.openjpa.jdbc.sql.ResultSetResult;\n-import org.apache.openjpa.jdbc.sql.SQLExceptions;\n-import org.apache.openjpa.kernel.ResultPacker;\n-import org.apache.openjpa.lib.rop.ResultObjectProvider;\n-import org.apache.openjpa.util.StoreException;\n-import org.apache.openjpa.util.UnsupportedException;\n-import serp.util.Numbers;\n-\n-/**\n- * Provides all column data in a {@link ResultSet}.\n- *\n- * @author Abe White\n- */\n-class SQLProjectionResultObjectProvider\n-    implements ResultObjectProvider {\n-\n-    private final JDBCStore _store;\n-    private final JDBCFetchConfiguration _fetch;\n-    private final ResultSetResult _res;\n-    private final ResultPacker _packer;\n-    private final int _cols;\n-\n-    /**\n-     * Constructor.\n-     *\n-     * @param res the result data\n-     * @param cls the result class; may be null for the default\n-     */\n-    public SQLProjectionResultObjectProvider(JDBCStore store,\n-        JDBCFetchConfiguration fetch, ResultSetResult res, Class cls)\n-        throws SQLException {\n-        _store = store;\n-        _fetch = fetch;\n-\n-        ResultSetMetaData meta = res.getResultSet().getMetaData();\n-        _res = res;\n-        _cols = meta.getColumnCount();\n-\n-        if (cls != null) {\n-            String[] aliases = new String[_cols];\n-            for (int i = 0; i < _cols; i++)\n-                aliases[i] = meta.getColumnLabel(i + 1);\n-            _packer = new ResultPacker(null, aliases, cls);\n-        } else\n-            _packer = null;\n-    }\n-\n-    public boolean supportsRandomAccess() {\n-        try {\n-            return _res.supportsRandomAccess();\n-        } catch (Throwable t) {\n-            return false;\n-        }\n-    }\n-\n-    public void open() {\n-    }\n-\n-    public Object getResultObject()\n-        throws SQLException {\n-        if (_cols == 1) {\n-            Object val = _res.getObject(Numbers.valueOf(1),\n-                JavaSQLTypes.JDBC_DEFAULT, null);\n-            return (_packer == null) ? val : _packer.pack(val);\n-        }\n-\n-        Object[] vals = new Object[_cols];\n-        for (int i = 0; i < vals.length; i++)\n-            vals[i] = _res.getObject(Numbers.valueOf(i + 1),\n-                JavaSQLTypes.JDBC_DEFAULT, null);\n-        return (_packer == null) ? vals : _packer.pack(vals);\n-    }\n-\n-    public boolean next()\n-        throws SQLException {\n-        return _res.next();\n-    }\n-\n-    public boolean absolute(int pos)\n-        throws SQLException {\n-        return _res.absolute(pos);\n-    }\n-\n-    public int size()\n-        throws SQLException {\n-        if (_fetch.getLRSSize() == LRSSizes.SIZE_UNKNOWN\n-            || !supportsRandomAccess())\n-            return Integer.MAX_VALUE;\n-        return _res.size();\n-    }\n-\n-    public void reset() {\n-        throw new UnsupportedException();\n-    }\n-\n-    public void close() {\n-        _res.close();\n-    }\n-\n-    public void handleCheckedException(Exception e) {\n-        if (e instanceof SQLException)\n-            throw SQLExceptions.getStore((SQLException) e,\n-                _store.getDBDictionary());\n-        throw new StoreException(e);\n-    }\n-}"},{"sha":"81b2cb2e5494b63a1c51c33cc4b084ad4fba4052","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/SQLStoreQuery.java","status":"removed","additions":0,"deletions":395,"changes":395,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/SQLStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/SQLStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/SQLStoreQuery.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,395 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.kernel;\n-\n-import java.io.IOException;\n-import java.io.StreamTokenizer;\n-import java.io.StringReader;\n-import java.sql.Connection;\n-import java.sql.PreparedStatement;\n-import java.sql.ResultSet;\n-import java.sql.SQLException;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.Iterator;\n-import java.util.List;\n-\n-import org.apache.commons.lang.StringUtils;\n-import org.apache.openjpa.jdbc.meta.ClassMapping;\n-import org.apache.openjpa.jdbc.meta.MappingRepository;\n-import org.apache.openjpa.jdbc.meta.QueryResultMapping;\n-import org.apache.openjpa.jdbc.sql.DBDictionary;\n-import org.apache.openjpa.jdbc.sql.ResultSetResult;\n-import org.apache.openjpa.jdbc.sql.SQLBuffer;\n-import org.apache.openjpa.jdbc.sql.SQLExceptions;\n-import org.apache.openjpa.kernel.AbstractStoreQuery;\n-import org.apache.openjpa.kernel.QueryContext;\n-import org.apache.openjpa.kernel.StoreQuery;\n-import org.apache.openjpa.lib.rop.RangeResultObjectProvider;\n-import org.apache.openjpa.lib.rop.ResultObjectProvider;\n-import org.apache.openjpa.lib.util.Localizer;\n-import org.apache.openjpa.meta.ClassMetaData;\n-import org.apache.openjpa.util.UserException;\n-import serp.util.Numbers;\n-\n-/**\n- * A SQL query.\n- *\n- * @author Abe White\n- * @nojavadoc\n- */\n-public class SQLStoreQuery\n-    extends AbstractStoreQuery {\n-\n-    private static final Localizer _loc = Localizer.forPackage\n-        (SQLStoreQuery.class);\n-\n-    private transient final JDBCStore _store;\n-\n-    /**\n-     * Construct a query managed by the given context.\n-     */\n-    public SQLStoreQuery(JDBCStore store) {\n-        _store = store;\n-    }\n-\n-    public JDBCStore getStore() {\n-        return _store;\n-    }\n-\n-    /**\n-     * Utility method to substitute '?num' for parameters in the given SQL\n-     * statement, and re-order the <code>params</code> array to match\n-     * the order of the specified parameters.\n-     */\n-    private static String substituteParams(String sql, List params)\n-        throws IOException {\n-        // if there's no \"?1\" positional parameter, then we don't need to\n-        // perform the parsing process\n-        if (sql.indexOf(\"?1\") == -1)\n-            return sql;\n-\n-        List paramOrder = new ArrayList();\n-        StreamTokenizer tok = new StreamTokenizer(new StringReader(sql));\n-        tok.resetSyntax();\n-        tok.quoteChar('\\'');\n-        tok.wordChars('0', '9');\n-        tok.wordChars('?', '?');\n-\n-        StringBuffer buf = new StringBuffer(sql.length());\n-        for (int ttype; (ttype = tok.nextToken()) != StreamTokenizer.TT_EOF;) {\n-            switch (ttype) {\n-                case StreamTokenizer.TT_WORD:\n-                    // a token is a positional parameter if it starts with\n-                    // a \"?\" and the rest of the token are all numbers\n-                    if (tok.sval.startsWith(\"?\") && tok.sval.length() > 1 &&\n-                        tok.sval.substring(1).indexOf(\"?\") == -1) {\n-                        buf.append(\"?\");\n-                        paramOrder.add(Integer.valueOf(tok.sval.substring(1)));\n-                    } else\n-                        buf.append(tok.sval);\n-                    break;\n-                case'\\'':\n-                    buf.append('\\'');\n-                    if (tok.sval != null) {\n-                        buf.append(tok.sval);\n-                        buf.append('\\'');\n-                    }\n-                    break;\n-                default:\n-                    buf.append((char) ttype);\n-            }\n-        }\n-\n-        // now go through the paramOrder list and re-order the params array\n-        List translated = new ArrayList();\n-        for (Iterator i = paramOrder.iterator(); i.hasNext();) {\n-            int index = ((Number) i.next()).intValue() - 1;\n-            if (index >= params.size())\n-                throw new UserException(_loc.get(\"sqlquery-missing-params\",\n-                    sql, String.valueOf(index), params));\n-            translated.add(params.get(index));\n-        }\n-\n-        // transfer the translated list into the original params list\n-        params.clear();\n-        params.addAll(translated);\n-        return buf.toString();\n-    }\n-\n-    public boolean supportsParameterDeclarations() {\n-        return false;\n-    }\n-\n-    public boolean supportsDataStoreExecution() {\n-        return true;\n-    }\n-\n-    public Executor newDataStoreExecutor(ClassMetaData meta,\n-        boolean subclasses) {\n-        return new SQLExecutor(this, meta);\n-    }\n-\n-    public boolean requiresCandidateType() {\n-        return false;\n-    }\n-\n-    public boolean requiresParameterDeclarations() {\n-        return false;\n-    }\n-\n-    /**\n-     * Executes the filter as a SQL query.\n-     */\n-    protected static class SQLExecutor\n-        extends AbstractExecutor {\n-\n-        private final ClassMetaData _meta;\n-        private final boolean _select;\n-        private final boolean _call;   // native call stored procedure\n-        private final QueryResultMapping _resultMapping;\n-\n-        public SQLExecutor(SQLStoreQuery q, ClassMetaData candidate) {\n-            QueryContext ctx = q.getContext();\n-            String resultMapping = ctx.getResultMappingName();\n-            if (resultMapping == null)\n-                _resultMapping = null;\n-            else {\n-                ClassLoader envLoader = ctx.getStoreContext().getClassLoader();\n-                MappingRepository repos = q.getStore().getConfiguration().\n-                    getMappingRepositoryInstance();\n-                _resultMapping = repos.getQueryResultMapping\n-                    (ctx.getResultMappingScope(), resultMapping, envLoader,\n-                        true);\n-            }\n-            _meta = candidate;\n-\n-            String sql = StringUtils.trimToNull(ctx.getQueryString());\n-            if (sql == null)\n-                throw new UserException(_loc.get(\"no-sql\"));\n-            _select = q.getStore().getDBDictionary().isSelect(sql);\n-            _call = sql.length() > 4\n-                && sql.substring(0, 4).equalsIgnoreCase(\"call\");\n-        }\n-\n-        public int getOperation(StoreQuery q) {\n-           return _select ? OP_SELECT : \n-                (q.getContext().getCandidateType() != null\n-                        || q.getContext().getResultType() != null\n-                        || q.getContext().getResultMappingName() != null \n-                        || q.getContext().getResultMappingScope() != null)\n-                        ? OP_SELECT : OP_UPDATE;\n-        }\n-\n-        public Number executeUpdate(StoreQuery q, Object[] params) {\n-            JDBCStore store = ((SQLStoreQuery) q).getStore();\n-            DBDictionary dict = store.getDBDictionary();\n-            String sql = q.getContext().getQueryString();\n-\n-            List paramList;\n-            if (params.length > 0) {\n-                paramList = new ArrayList(Arrays.asList(params));\n-                try {\n-                    sql = substituteParams(sql, paramList);\n-                } catch (IOException ioe) {\n-                    throw new UserException(ioe);\n-                }\n-            } else\n-                paramList = Collections.EMPTY_LIST;\n-\n-            SQLBuffer buf = new SQLBuffer(dict).append(sql);\n-            \n-            // we need to make sure we have an active store connection\n-            store.getContext().beginStore();\n-            Connection conn = store.getConnection();\n-            JDBCFetchConfiguration fetch = (JDBCFetchConfiguration)\n-                q.getContext().getFetchConfiguration();\n-\n-            PreparedStatement stmnt = null;\n-            try {\n-                stmnt = prepareCall(conn, buf);\n-\n-                buf.setParameters(paramList);\n-                if (stmnt != null)\n-                    buf.setParameters(stmnt);\n-\n-                int count = executeUpdate(store, conn, stmnt, buf);  \n-              \n-                return Numbers.valueOf(count);\n-            } catch (SQLException se) {\n-                throw SQLExceptions.getStore(se, dict);\n-            } finally {\n-                if (stmnt != null) {\n-                    try {\n-                        stmnt.close();\n-                    } catch (SQLException se) {\n-                        // safe to ignore\n-                    } finally {\n-                        stmnt = null;\n-                    }\n-                }\n-                try {\n-                    conn.close();\n-                } catch (SQLException se) {\n-                }\n-            }\n-        }\n-\n-        public ResultObjectProvider executeQuery(StoreQuery q,\n-            Object[] params, Range range) {\n-            JDBCStore store = ((SQLStoreQuery) q).getStore();\n-            DBDictionary dict = store.getDBDictionary();\n-            String sql = q.getContext().getQueryString();\n-\n-            List paramList;\n-            if (params.length > 0) {\n-                paramList = new ArrayList(Arrays.asList(params));\n-                try {\n-                    sql = substituteParams(sql, paramList);\n-                } catch (IOException ioe) {\n-                    throw new UserException(ioe);\n-                }\n-            } else\n-                paramList = Collections.EMPTY_LIST;\n-\n-            SQLBuffer buf = new SQLBuffer(dict).append(sql);\n-            Connection conn = store.getConnection();\n-            JDBCFetchConfiguration fetch = (JDBCFetchConfiguration)\n-                q.getContext().getFetchConfiguration();\n-\n-            ResultObjectProvider rop;\n-            PreparedStatement stmnt = null;\n-            try {\n-                // use the right method depending on sel vs. proc, lrs setting\n-                if (_select && !range.lrs)\n-                    stmnt = prepareStatement(conn, buf);\n-                else if (_select)\n-                    stmnt = prepareStatement(conn, buf, fetch, -1, -1);\n-                else if (!range.lrs)\n-                    stmnt = prepareCall(conn, buf);\n-                else\n-                    stmnt = prepareCall(conn, buf, fetch, -1, -1);\n-\n-                int index = 0;\n-                for (Iterator i = paramList.iterator(); i.hasNext() && \n-                    stmnt != null;)\n-                    dict.setUnknown(stmnt, ++index, i.next(), null);\n-\n-                ResultSet rs = executeQuery(store, conn, stmnt, buf, paramList);\n-                ResultSetResult res = stmnt != null ? \n-                    new ResultSetResult(conn, stmnt, rs, store) :\n-                    new ResultSetResult(conn, rs, dict);\n-                if (_resultMapping != null)\n-                    rop = new MappedQueryResultObjectProvider(_resultMapping,\n-                        store, fetch, res);\n-                else if (q.getContext().getCandidateType() != null)\n-                    rop = new GenericResultObjectProvider((ClassMapping) _meta,\n-                        store, fetch, res);\n-                else\n-                    rop = new SQLProjectionResultObjectProvider(store, fetch,\n-                        res, q.getContext().getResultType());\n-            } catch (SQLException se) {\n-                if (stmnt != null)\n-                    try { stmnt.close(); } catch (SQLException se2) {}\n-                try { conn.close(); } catch (SQLException se2) {}\n-                throw SQLExceptions.getStore(se, dict);\n-            }\n-\n-            if (range.start != 0 || range.end != Long.MAX_VALUE)\n-                rop = new RangeResultObjectProvider(rop, range.start,range.end);\n-            return rop;\n-        }\n-\n-        public String[] getDataStoreActions(StoreQuery q, Object[] params,\n-            Range range) {\n-            return new String[]{ q.getContext().getQueryString() };\n-        }\n-\n-        public boolean isPacking(StoreQuery q) {\n-            return q.getContext().getCandidateType() == null;\n-        }\n-        \n-        /**\n-         * This method is to provide override for non-JDBC or JDBC-like \n-         * implementation of preparing call statement.\n-         */\n-        protected PreparedStatement prepareCall(Connection conn, SQLBuffer buf)\n-            throws SQLException {\n-            return buf.prepareCall(conn);            \n-        }\n-        \n-        /**\n-         * This method is to provide override for non-JDBC or JDBC-like \n-         * implementation of executing update.\n-         */\n-        protected int executeUpdate(JDBCStore store, Connection conn, \n-            PreparedStatement stmnt, SQLBuffer buf) \n-            throws SQLException {\n-            int count = 0;\n-            if (_call && stmnt.execute() == false) {\n-                count = stmnt.getUpdateCount();\n-            }\n-            else {\n-                // native insert, update, delete\n-                count = stmnt.executeUpdate();\n-            }\n-            return count;\n-        }\n-        \n-        /**\n-         * This method is to provide override for non-JDBC or JDBC-like \n-         * implementation of preparing call statement.\n-         */\n-        protected PreparedStatement prepareCall(Connection conn, SQLBuffer buf,\n-            JDBCFetchConfiguration fetch, int rsType, int rsConcur)\n-            throws SQLException {\n-            return buf.prepareCall(conn, fetch, rsType, rsConcur);  \n-        }\n-\n-        /**\n-         * This method is to provide override for non-JDBC or JDBC-like \n-         * implementation of preparing statement.\n-         */\n-        protected PreparedStatement prepareStatement(Connection conn, \n-            SQLBuffer buf) throws SQLException {\n-            return buf.prepareStatement(conn);\n-        }\n-        \n-        /**\n-         * This method is to provide override for non-JDBC or JDBC-like \n-         * implementation of preparing statement.\n-         */\n-        protected PreparedStatement prepareStatement(Connection conn, \n-            SQLBuffer buf, JDBCFetchConfiguration fetch, int rsType,\n-            int rsConcur) throws SQLException {\n-            return buf.prepareStatement(conn, fetch, rsType, rsConcur);\n-        }\n-        \n-        /**\n-         * This method is to provide override for non-JDBC or JDBC-like \n-         * implementation of executing query.\n-         */\n-        protected ResultSet executeQuery(JDBCStore store, Connection conn,\n-            PreparedStatement stmnt, SQLBuffer buf, List paramList)\n-            throws SQLException {\n-            return stmnt.executeQuery();\n-        }\n-    }\n-}"},{"sha":"19e94ed6973ddb7507de3c368cd85869d09c756e","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/SelectResultObjectProvider.java","status":"removed","additions":0,"deletions":159,"changes":159,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/SelectResultObjectProvider.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/SelectResultObjectProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/SelectResultObjectProvider.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,159 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.kernel;\n-\n-import java.sql.SQLException;\n-\n-import org.apache.openjpa.jdbc.sql.Result;\n-import org.apache.openjpa.jdbc.sql.SQLExceptions;\n-import org.apache.openjpa.jdbc.sql.Select;\n-import org.apache.openjpa.jdbc.sql.SelectExecutor;\n-import org.apache.openjpa.lib.rop.ResultObjectProvider;\n-import org.apache.openjpa.util.StoreException;\n-\n-/**\n- * Abstract provider implementation wrapped around a {@link Select}.\n- *\n- * @author Abe White\n- * @nojavadoc\n- */\n-public abstract class SelectResultObjectProvider\n-    implements ResultObjectProvider {\n-\n-    private final SelectExecutor _sel;\n-    private final JDBCStore _store;\n-    private final JDBCFetchConfiguration _fetch;\n-    private Result _res = null;\n-    private int _size = -1;\n-    private Boolean _ra = null;\n-\n-    /**\n-     * Constructor.\n-     *\n-     * @param sel the select to execute\n-     * @param store the store to delegate loading to\n-     * @param fetch the fetch configuration, or null for the default\n-     */\n-    public SelectResultObjectProvider(SelectExecutor sel, JDBCStore store,\n-        JDBCFetchConfiguration fetch) {\n-        _sel = sel;\n-        _store = store;\n-        _fetch = fetch;\n-    }\n-\n-    public SelectExecutor getSelect() {\n-        return _sel;\n-    }\n-\n-    public JDBCStore getStore() {\n-        return _store;\n-    }\n-\n-    public JDBCFetchConfiguration getFetchConfiguration() {\n-        return _fetch;\n-    }\n-\n-    public Result getResult() {\n-        return _res;\n-    }\n-\n-    public boolean supportsRandomAccess() {\n-        if (_ra == null) {\n-            boolean ra;\n-            if (_res != null) {\n-                try {\n-                    ra = _res.supportsRandomAccess();\n-                } catch (SQLException se) {\n-                    throw SQLExceptions.getStore(se, _store.getDBDictionary());\n-                }\n-            } else\n-                ra = _sel.supportsRandomAccess(_fetch.getReadLockLevel() > 0);\n-            _ra = (ra) ? Boolean.TRUE : Boolean.FALSE;\n-        }\n-        return _ra.booleanValue();\n-    }\n-\n-    public void open()\n-        throws SQLException {\n-        _res = _sel.execute(_store, _fetch);\n-    }\n-\n-    public boolean next()\n-        throws SQLException {\n-        return _res.next();\n-    }\n-\n-    public boolean absolute(int pos)\n-        throws SQLException {\n-        return _res.absolute(pos);\n-    }\n-\n-    public int size()\n-        throws SQLException {\n-        if (_size == -1) {\n-            // if res is null, don't cache size\n-            if (_res == null)\n-                return Integer.MAX_VALUE;\n-\n-            switch (_fetch.getLRSSize()) {\n-                case LRSSizes.SIZE_UNKNOWN:\n-                    _size = Integer.MAX_VALUE;\n-                    break;\n-                case LRSSizes.SIZE_LAST:\n-                    if (supportsRandomAccess())\n-                        _size = _res.size();\n-                    else\n-                        _size = Integer.MAX_VALUE;\n-                    break;\n-                default: // query\n-                    _size = _sel.getCount(_store);\n-            }\n-        }\n-        return _size;\n-    }\n-\n-    /**\n-     * Allow subclasses that know the size to set it; otherwise we calculate\n-     * it internally.\n-     */\n-    protected void setSize(int size) {\n-        if (_size == -1)\n-            _size = size;\n-    }\n-\n-    public void reset()\n-        throws SQLException {\n-        close();\n-        open();\n-    }\n-\n-    public void close() {\n-        if (_res != null) {\n-            _res.close();\n-            _res = null;\n-        }\n-    }\n-\n-    public void handleCheckedException(Exception e) {\n-        if (e instanceof SQLException)\n-            throw SQLExceptions.getStore((SQLException) e,\n-                _store.getDBDictionary());\n-        throw new StoreException(e);\n-    }\n-}"},{"sha":"7532cdf23650202baf12060c42e57fc07803d954","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/TableJDBCSeq.java","status":"removed","additions":0,"deletions":898,"changes":898,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/TableJDBCSeq.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/TableJDBCSeq.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/TableJDBCSeq.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,898 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.kernel;\n-\n-import java.io.Serializable;\n-import java.sql.Connection;\n-import java.sql.PreparedStatement;\n-import java.sql.ResultSet;\n-import java.sql.SQLException;\n-import java.sql.Types;\n-import java.util.HashMap;\n-\n-import javax.transaction.NotSupportedException;\n-\n-import org.apache.commons.lang.StringUtils;\n-import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n-import org.apache.openjpa.jdbc.conf.JDBCConfigurationImpl;\n-import org.apache.openjpa.jdbc.meta.ClassMapping;\n-import org.apache.openjpa.jdbc.schema.Column;\n-import org.apache.openjpa.jdbc.schema.PrimaryKey;\n-import org.apache.openjpa.jdbc.schema.Schema;\n-import org.apache.openjpa.jdbc.schema.SchemaGroup;\n-import org.apache.openjpa.jdbc.schema.SchemaTool;\n-import org.apache.openjpa.jdbc.schema.Schemas;\n-import org.apache.openjpa.jdbc.schema.Table;\n-import org.apache.openjpa.jdbc.schema.Unique;\n-import org.apache.openjpa.jdbc.sql.DBDictionary;\n-import org.apache.openjpa.jdbc.sql.RowImpl;\n-import org.apache.openjpa.jdbc.sql.SQLBuffer;\n-import org.apache.openjpa.lib.conf.Configurable;\n-import org.apache.openjpa.lib.conf.Configuration;\n-import org.apache.openjpa.lib.conf.Configurations;\n-import org.apache.openjpa.lib.log.Log;\n-import org.apache.openjpa.lib.util.Localizer;\n-import org.apache.openjpa.lib.util.Options;\n-import org.apache.openjpa.meta.JavaTypes;\n-import org.apache.openjpa.util.InvalidStateException;\n-import org.apache.openjpa.util.UserException;\n-\n-import serp.util.Numbers;\n-import serp.util.Strings;\n-\n-////////////////////////////////////////////////////////////\n-// NOTE: Do not change property names; see SequenceMetaData\n-// and SequenceMapping for standard property names.\n-////////////////////////////////////////////////////////////\n-\n-/**\n- * {@link JDBCSeq} implementation that uses a database table\n- * for sequence number generation. This base implementation uses a single\n- * row for a global sequence number.\n- *\n- * @author Abe White\n- */\n-public class TableJDBCSeq\n-    extends AbstractJDBCSeq\n-    implements Configurable {\n-\n-    public static final String ACTION_DROP = \"drop\";\n-    public static final String ACTION_ADD = \"add\";\n-    public static final String ACTION_GET = \"get\";\n-    public static final String ACTION_SET = \"set\";\n-\n-    private static final Localizer _loc = Localizer.forPackage\n-        (TableJDBCSeq.class);\n-\n-    private transient JDBCConfiguration _conf = null;\n-    private transient Log _log = null;\n-    private int _alloc = 50;\n-    private int _intValue = 1;\n-    private final HashMap<ClassMapping, Status> _stat =\n-        new HashMap<ClassMapping, Status>();\n-\n-    private String _table = \"OPENJPA_SEQUENCE_TABLE\";\n-    private String _seqColumnName = \"SEQUENCE_VALUE\";\n-    private String _pkColumnName = \"ID\";\n-    private String[] _uniqueColumnNames;\n-\n-    private Column _seqColumn = null;\n-    private Column _pkColumn = null;\n-    \n-    /**\n-     * The sequence table name. Defaults to <code>OPENJPA_SEQUENCE_TABLE</code>.\n-     * By default, the table will be placed in the first schema listed in your\n-     * <code>openjpa.jdbc.Schemas</code> property, or in the default schema if\n-     * the property is not given. If you specify a table name in the form\n-     * <code>&lt;schema&gt;.&lt;table&gt;</code>, then the given schema\n-     * will be used.\n-     */\n-    public String getTable() {\n-        return _table;\n-    }\n-\n-    /**\n-     * The sequence table name. Defaults to <code>OPENJPA_SEQUENCE_TABLE</code>.\n-     * By default, the table will be placed in the first schema listed in your\n-     * <code>openjpa.jdbc.Schemas</code> property, or in the default schema if\n-     * the property is not given. If you specify a table name in the form\n-     * <code>&lt;schema&gt;.&lt;table&gt;</code>, then the given schema\n-     * will be used.\n-     */\n-    public void setTable(String name) {\n-        _table = name;\n-    }\n-\n-    /**\n-     * @deprecated Use {@link #setTable}. Retained for\n-     * backwards-compatibility\twith auto-configuration.\n-     */\n-    public void setTableName(String name) {\n-        setTable(name);\n-    }\n-\n-    /**\n-     * The name of the column that holds the sequence value. Defaults\n-     * to <code>SEQUENCE_VALUE</code>.\n-     */\n-    public String getSequenceColumn() {\n-        return _seqColumnName;\n-    }\n-\n-    /**\n-     * The name of the column that holds the sequence value. Defaults\n-     * to <code>SEQUENCE_VALUE</code>.\n-     */\n-    public void setSequenceColumn(String sequenceColumn) {\n-        _seqColumnName = sequenceColumn;\n-    }\n-\n-    /**\n-     * The name of the table's primary key column. Defaults to\n-     * <code>ID</code>.\n-     */\n-    public String getPrimaryKeyColumn() {\n-        return _pkColumnName;\n-    }\n-\n-    /**\n-     * The name of the table's primary key column. Defaults to\n-     * <code>ID</code>.\n-     */\n-    public void setPrimaryKeyColumn(String primaryKeyColumn) {\n-        _pkColumnName = primaryKeyColumn;\n-    }\n-\n-    /**\n-     * Return the number of sequences to allocate for each update of the\n-     * sequence table. Sequence numbers will be grabbed in blocks of this\n-     * value to reduce the number of transactions that must be performed on\n-     * the sequence table.\n-     */\n-    public int getAllocate() {\n-        return _alloc;\n-    }\n-\n-    /**\n-     * Return the number of sequences to allocate for each update of the\n-     * sequence table. Sequence numbers will be grabbed in blocks of this\n-     * value to reduce the number of transactions that must be performed on\n-     * the sequence table.\n-     */\n-    public void setAllocate(int alloc) {\n-        _alloc = alloc;\n-    }\n-    \n-    /**\n-     * Return the number as the initial number for the \n-     * GeneratedValue.TABLE strategy to start with. \n-     * @return an initial number\n-     */\n-    public int getInitialValue() {        \n-        return _intValue;\n-    }\n-\n-    /**\n-     * Set the initial number in the table for the GeneratedValue.TABLE\n-     * strategy to use as initial number. \n-     * @param intValue. The initial number\n-     */\n-    public void setInitialValue(int intValue) {\n-        _intValue = intValue;\n-    }\n-    \n-    /**\n-     * Sets the names of the columns on which a unique constraint is set.\n-     * @param columnsNames are passed as a single String concatenated with\n-     * a '|' character. This method parses it back to array of Strings. \n-     */\n-    public void setUniqueColumns(String columnNames) {\n-    \t_uniqueColumnNames = (StringUtils.isEmpty(columnNames)) \n-    \t\t? null : StringUtils.split(columnNames, '|');\n-    }\n-    \n-    public String getUniqueColumns() {\n-    \treturn StringUtils.join(_uniqueColumnNames, '|');\n-    }\n-\n-    /**\n-     * @deprecated Use {@link #setAllocate}. Retained for backwards\n-     * compatibility of auto-configuration.\n-     */\n-    public void setIncrement(int inc) {\n-        setAllocate(inc);\n-    }\n-\n-    public JDBCConfiguration getConfiguration() {\n-        return _conf;\n-    }\n-\n-    public void setConfiguration(Configuration conf) {\n-        _conf = (JDBCConfiguration) conf;\n-        _log = _conf.getLog(JDBCConfiguration.LOG_RUNTIME);\n-    }\n-\n-    public void startConfiguration() {\n-    }\n-\n-    public void endConfiguration() {\n-        buildTable();\n-    }\n-    \n-\n-    public void addSchema(ClassMapping mapping, SchemaGroup group) {\n-        // Since the table is created by openjpa internally\n-        // we can create the table for each schema within the PU\n-        // in here.\n-        \n-        Schema[] schemas = group.getSchemas();\n-        for (int i = 0; i < schemas.length; i++) {\n-            String schemaName = Strings.getPackageName(_table);\n-            if (schemaName.length() == 0)\n-                schemaName = Schemas.getNewTableSchema(_conf);\n-            if (schemaName == null)\n-                schemaName = schemas[i].getName();\n-\n-            // create table in this group\n-            Schema schema = group.getSchema(schemaName);\n-            if (schema == null)\n-                schema = group.addSchema(schemaName);\n-            \n-            Table copy = schema.importTable(_pkColumn.getTable());\n-            // importTable() does not import unique constraints\n-            Unique[] uniques = _pkColumn.getTable().getUniques();\n-            for (Unique u : uniques) {\n-            \tcopy.importUnique(u);\n-            }\n-            // we need to reset the table name in the column with the\n-            // fully qualified name for matching the table name from the\n-            // Column.\n-            _pkColumn.resetTableName(schemaName + \".\"\n-                    + _pkColumn.getTableName());\n-            // some databases require to create an index for the sequence table\n-            _conf.getDBDictionaryInstance().createIndexIfNecessary(schema,\n-                    _table, _pkColumn);\n-        }\n-    }\n-\n-    protected Object nextInternal(JDBCStore store, ClassMapping mapping)\n-        throws Exception {\n-        // if needed, grab the next handful of ids\n-        Status stat = getStatus(mapping);\n-        if (stat == null)\n-            throw new InvalidStateException(_loc.get(\"bad-seq-type\",\n-                getClass(), mapping));\n-\n-        while (true) {\n-            synchronized (stat) {\n-                // make sure seq is at least 1, since autoassigned ids of 0 can\n-                // conflict with uninitialized values\n-                stat.seq = Math.max(stat.seq, 1);\n-                if (stat.seq < stat.max)\n-                    return Numbers.valueOf(stat.seq++);\n-            }\n-            allocateSequence(store, mapping, stat, _alloc, true);\n-        }\n-    }\n-\n-    protected Object currentInternal(JDBCStore store, ClassMapping mapping)\n-        throws Exception {\n-        if (current == null) {\n-            CurrentSequenceRunnable runnable =\n-                new CurrentSequenceRunnable(store, mapping);\n-            try {\n-                if (suspendInJTA()) {\n-                    // NotSupportedException is wrapped in a StoreException by\n-                    // the caller.\n-                    _conf.getManagedRuntimeInstance().doNonTransactionalWork(\n-                            runnable);\n-                } else {\n-                    runnable.run();\n-                }\n-            } catch (RuntimeException re) {\n-                throw (Exception) (re.getCause() == null ? re : re.getCause());\n-            }\n-        }\n-        return super.currentInternal(store, mapping);\n-    }\n-\n-    protected void allocateInternal(int count, JDBCStore store,\n-        ClassMapping mapping)\n-        throws SQLException {\n-        Status stat = getStatus(mapping);\n-        if (stat == null)\n-            return;\n-\n-        while (true) {\n-            int available;\n-            synchronized (stat) {\n-                available = (int) (stat.max - stat.seq);\n-                if (available >= count)\n-                    return;\n-            }\n-            allocateSequence(store, mapping, stat, count - available, false);\n-        }\n-    }\n-\n-    /**\n-     * Return the appropriate status object for the given class, or null\n-     * if cannot handle the given class. The mapping may be null.\n-     */\n-    protected Status getStatus(ClassMapping mapping) {  \n-        Status status = (Status)_stat.get(mapping);        \n-        if (status == null){ \n-            status = new Status();\n-            _stat.put(mapping, status);\n-        }\n-        return status;\n-    }\n-\n-    /**\n-     * Add the primary key column to the given table and return it.\n-     */\n-    protected Column addPrimaryKeyColumn(Table table) {\n-        DBDictionary dict = _conf.getDBDictionaryInstance();\n-        Column pkColumn = table.addColumn(dict.getValidColumnName\n-            (getPrimaryKeyColumn(), table));\n-        pkColumn.setType(dict.getPreferredType(Types.TINYINT));\n-        pkColumn.setJavaType(JavaTypes.INT);\n-        return pkColumn;\n-    }\n-\n-    /**\n-     * Return the primary key value for the sequence table for the given class.\n-     */\n-    protected Object getPrimaryKey(ClassMapping mapping) {\n-        return Numbers.valueOf(0);\n-    }\n-\n-    /**\n-     * Creates the object-level representation of the sequence table.\n-     */\n-    private void buildTable() {\n-        String tableName = Strings.getClassName(_table);\n-        String schemaName = Strings.getPackageName(_table);\n-        if (schemaName.length() == 0)\n-            schemaName = Schemas.getNewTableSchema(_conf);\n-\n-        SchemaGroup group = new SchemaGroup();\n-        Schema schema = group.addSchema(schemaName);\n-\n-        Table table = schema.addTable(tableName);\n-        _pkColumn = addPrimaryKeyColumn(table);\n-        PrimaryKey pk = table.addPrimaryKey();\n-        pk.addColumn(_pkColumn);\n-\n-        DBDictionary dict = _conf.getDBDictionaryInstance();\n-        _seqColumn = table.addColumn(dict.getValidColumnName\n-            (_seqColumnName, table));\n-        _seqColumn.setType(dict.getPreferredType(Types.BIGINT));\n-        _seqColumn.setJavaType(JavaTypes.LONG);\n-        \n-        if (_uniqueColumnNames != null) {\n-    \t\tString uniqueName = dict.getValidUniqueName(\"UNQ\", table);\n-    \t\tUnique u = table.addUnique(uniqueName);\n-    \t\tfor (String columnName : _uniqueColumnNames) {\n-    \t\t\tif (!table.containsColumn(columnName))\n-    \t\t\t\tthrow new UserException(_loc.get(\"unique-missing-column\",\n-    \t\t\t\t\tcolumnName, table.getName(), table.getColumnNames()));\n-    \t\t\tColumn col = table.getColumn(columnName);\n-    \t\t\tu.addColumn(col);\n-    \t\t}\n-        }\n-        \n-    }\n-\n-    /**\n-     * Updates the max available sequence value.\n-     */\n-    private void allocateSequence(JDBCStore store, ClassMapping mapping,\n-            Status stat, int alloc, boolean updateStatSeq) throws SQLException {\n-        Runnable runnable =\n-            new AllocateSequenceRunnable(\n-                    store, mapping, stat, alloc, updateStatSeq);\n-        try {\n-            if (suspendInJTA()) {\n-                // NotSupportedException is wrapped in a StoreException by\n-                // the caller.\n-                try {\n-                _conf.getManagedRuntimeInstance().doNonTransactionalWork(\n-                        runnable);\n-                }\n-                catch(NotSupportedException nse) { \n-                    SQLException sqlEx = new SQLException(nse.getLocalizedMessage());\n-                    sqlEx.initCause(nse);\n-                    throw sqlEx;\n-                }\n-            } else {\n-                runnable.run();\n-            }\n-        } catch (RuntimeException re) {\n-            Throwable e = re.getCause();\n-            if(e instanceof SQLException ) \n-                throw (SQLException) e;\n-            else \n-                throw re;\n-        }\n-    }\n-\n-    /**\n-     * Inserts the initial sequence column into the database.\n-     * \n-     * @param mapping\n-     *            ClassMapping for the class whose sequence column will be\n-     *            updated\n-     * @param conn\n-     *            Connection used issue SQL statements.\n-     */\n-    private void insertSequence(ClassMapping mapping, Connection conn)\n-        throws SQLException {\n-        if (_log.isTraceEnabled())\n-            _log.trace(_loc.get(\"insert-seq\"));\n-\n-        Object pk = getPrimaryKey(mapping);\n-        if (pk == null)\n-            throw new InvalidStateException(_loc.get(\"bad-seq-type\",\n-                getClass(), mapping));\n-\n-        DBDictionary dict = _conf.getDBDictionaryInstance();\n-        String tableName = resolveTableName(mapping, _pkColumn.getTable());\n-        SQLBuffer insert = new SQLBuffer(dict).append(\"INSERT INTO \").\n-            append(tableName).append(\" (\").\n-            append(_pkColumn).append(\", \").append(_seqColumn).\n-            append(\") VALUES (\").\n-            appendValue(pk, _pkColumn).append(\", \").\n-            appendValue(_intValue, _seqColumn).append(\")\");\n-        \n-        boolean wasAuto = conn.getAutoCommit();\n-        if (!wasAuto && !suspendInJTA())\n-            conn.setAutoCommit(true);\n-\n-        PreparedStatement stmnt = null;\n-        try {\n-            stmnt = prepareStatement(conn, insert);\n-            executeUpdate(_conf, conn, stmnt, insert, RowImpl.ACTION_INSERT);\n-        } finally {\n-            if (stmnt != null)\n-                try { stmnt.close(); } catch (SQLException se) {}\n-            if (!wasAuto && !suspendInJTA())\n-                conn.setAutoCommit(false);\n-        }\n-    }\n-\n-    /**\n-     * Get the current sequence value.\n-     * \n-     * @param mapping\n-     *            ClassMapping of the entity whose sequence value will be\n-     *            obtained.\n-     * @param conn\n-     *            Connection used issue SQL statements.\n-     * \n-     * @return The current sequence value, or <code>SEQUENCE_NOT_FOUND</code>\n-     *         if the sequence could not be found.\n-     */\n-    protected long getSequence(ClassMapping mapping, Connection conn)\n-        throws SQLException {\n-        if (_log.isTraceEnabled())\n-            _log.trace(_loc.get(\"get-seq\"));\n-\n-        Object pk = getPrimaryKey(mapping);\n-        if (pk == null)\n-            return -1;\n-\n-        DBDictionary dict = _conf.getDBDictionaryInstance();\n-        SQLBuffer sel = new SQLBuffer(dict).append(_seqColumn);\n-        SQLBuffer where = new SQLBuffer(dict).append(_pkColumn).append(\" = \").\n-            appendValue(pk, _pkColumn);\n-        String tableName = resolveTableName(mapping, _seqColumn.getTable());\n-        SQLBuffer tables = new SQLBuffer(dict).append(tableName);\n-\n-        SQLBuffer select = dict.toSelect(sel, null, tables, where, null, null,\n-                null, false, dict.supportsSelectForUpdate, 0, Long.MAX_VALUE,\n-                false, true);\n-\n-        PreparedStatement stmnt = prepareStatement(conn, select);\n-        ResultSet rs = null;\n-        try {\n-            rs = executeQuery(_conf, conn, stmnt, select);\n-            return getSequence(rs, dict);\n-        } finally {\n-            if (rs != null)\n-                try { rs.close(); } catch (SQLException se) {}\n-            if (stmnt != null)    \n-                try { stmnt.close(); } catch (SQLException se) {}\n-        }\n-    }\n-\n-    /**\n-     * Grabs the next handful of sequence numbers.\n-     *\n-     * @return true if the sequence was updated, false if no sequence\n-     * row existed for this mapping\n-     */\n-    protected boolean setSequence(ClassMapping mapping, Status stat, int inc,\n-        boolean updateStatSeq, Connection conn)\n-        throws SQLException {\n-        if (_log.isTraceEnabled())\n-            _log.trace(_loc.get(\"update-seq\"));\n-\n-        Object pk = getPrimaryKey(mapping);\n-        if (pk == null)\n-            throw new InvalidStateException(_loc.get(\"bad-seq-type\",\n-                getClass(), mapping));\n-\n-        DBDictionary dict = _conf.getDBDictionaryInstance();        \n-        SQLBuffer where = new SQLBuffer(dict).append(_pkColumn).append(\" = \").\n-            appendValue(pk, _pkColumn);\n-\n-        // loop until we have a successful atomic select/update sequence\n-        long cur = 0;\n-        PreparedStatement stmnt;\n-        ResultSet rs;\n-        SQLBuffer upd;\n-        for (int updates = 0; updates == 0;) {\n-            stmnt = null;\n-            rs = null;\n-            try {\n-                cur = getSequence(mapping, conn);\n-                if (cur == -1)\n-                    return false;\n-\n-                // update the value\n-                upd = new SQLBuffer(dict);\n-                String tableName = resolveTableName(mapping, _seqColumn.getTable());\n-                upd.append(\"UPDATE \").append(tableName).\n-                    append(\" SET \").append(_seqColumn).append(\" = \").\n-                    appendValue(Numbers.valueOf(cur + inc), _seqColumn).\n-                    append(\" WHERE \").append(where).append(\" AND \").\n-                    append(_seqColumn).append(\" = \").\n-                    appendValue(Numbers.valueOf(cur), _seqColumn);\n-\n-                stmnt = prepareStatement(conn, upd);\n-                updates = executeUpdate(_conf, conn, stmnt, upd, RowImpl.ACTION_UPDATE);\n-            } finally {\n-                if (rs != null) \n-                    try { rs.close(); } catch (SQLException se) {}\n-                if (stmnt != null)\n-                    try { stmnt.close(); } catch (SQLException se) {}\n-            }\n-        }\n-\n-        // setup new sequence range        \n-        synchronized (stat) {\n-            if (updateStatSeq && stat.seq < cur)\n-                stat.seq = cur;\n-            if (stat.max < cur + inc)\n-                stat.max = cur + inc;\n-        }\n-        return true;\n-    }\n-    /**\n-     * Resolve a fully qualified table name\n-     * \n-     * @param class\n-     *            mapping to get the schema name\n-     */\n-    public String resolveTableName(ClassMapping mapping, Table table) {\n-        String sName = mapping.getTable().getSchemaName();\n-        String tableName;\n-        if (sName == null)\n-            tableName = table.getFullName();\n-        else if (table.getSchemaName() != null)\n-            tableName = table.getFullName();\n-        else\n-            tableName = sName + \".\" + table.getName();\n-        return tableName;\n-    }\n-\n-    /**\n-     * Creates the sequence table in the DB.\n-     */\n-    public void refreshTable()\n-        throws SQLException {\n-        if (_log.isInfoEnabled())\n-            _log.info(_loc.get(\"make-seq-table\"));\n-\n-        // create the table\n-        SchemaTool tool = new SchemaTool(_conf);\n-        tool.setIgnoreErrors(true);\n-        tool.createTable(_pkColumn.getTable());\n-    }\n-\n-    /**\n-     * Drops the sequence table in the DB.\n-     */\n-    public void dropTable()\n-        throws SQLException {\n-        if (_log.isInfoEnabled())\n-            _log.info(_loc.get(\"drop-seq-table\"));\n-\n-        // drop the table\n-        SchemaTool tool = new SchemaTool(_conf);\n-        tool.setIgnoreErrors(true);\n-        tool.dropTable(_pkColumn.getTable());\n-    }\n-\n-    /////////\n-    // Main\n-    /////////\n-\n-    /**\n-     * Usage: java org.apache.openjpa.jdbc.schema.TableJDBCSequence [option]*\n-     * -action/-a &lt;add | drop | get | set&gt; [value]\n-     *  Where the following options are recognized.\n-     * <ul>\n-     * <li><i>-properties/-p &lt;properties file or resource&gt;</i>: The\n-     * path or resource name of a OpenJPA properties file containing\n-     * information such as the license key\tand connection data as\n-     * outlined in {@link JDBCConfiguration}. Optional.</li>\n-     * <li><i>-&lt;property name&gt; &lt;property value&gt;</i>: All bean\n-     * properties of the OpenJPA {@link JDBCConfiguration} can be set by\n-     * using their\tnames and supplying a value. For example:\n-     * <code>-licenseKey adslfja83r3lkadf</code></li>\n-     * </ul>\n-     *  The various actions are as follows.\n-     * <ul>\n-     * <li><i>add</i>: Create the sequence table.</li>\n-     * <li><i>drop</i>: Drop the sequence table.</li>\n-     * <li><i>get</i>: Print the current sequence value.</li>\n-     * <li><i>set</i>: Set the sequence value.</li>\n-     * </ul>\n-     */\n-    public static void main(String[] args)\n-        throws Exception {\n-        Options opts = new Options();\n-        final String[] arguments = opts.setFromCmdLine(args);\n-        boolean ret = Configurations.runAgainstAllAnchors(opts,\n-            new Configurations.Runnable() {\n-            public boolean run(Options opts) throws Exception {\n-                JDBCConfiguration conf = new JDBCConfigurationImpl();\n-                try {\n-                    return TableJDBCSeq.run(conf, arguments, opts);\n-                } finally {\n-                    conf.close();\n-                }\n-            }\n-        });\n-        if (!ret)\n-            System.out.println(_loc.get(\"seq-usage\"));\n-    }\n-\n-    /**\n-     * Run the tool. Returns false if invalid options were given.\n-     */\n-    public static boolean run(JDBCConfiguration conf, String[] args,\n-        Options opts)\n-        throws Exception {\n-        String action = opts.removeProperty(\"action\", \"a\", null);\n-        Configurations.populateConfiguration(conf, opts);\n-        return run(conf, args, action);\n-    }\n-\n-    /**\n-     * Run the tool. Return false if an invalid option was given.\n-     */\n-    public static boolean run(JDBCConfiguration conf, String[] args,\n-        String action)\n-        throws Exception {\n-        if (args.length > 1 || (args.length != 0\n-            && !ACTION_SET.equals(action)))\n-            return false;\n-\n-        TableJDBCSeq seq = new TableJDBCSeq();\n-        String props = Configurations.getProperties(conf.getSequence());\n-        Configurations.configureInstance(seq, conf, props);\n-\n-        if (ACTION_DROP.equals(action))\n-            seq.dropTable();\n-        else if (ACTION_ADD.equals(action))\n-            seq.refreshTable();\n-        else if (ACTION_GET.equals(action) || ACTION_SET.equals(action)) {\n-            Connection conn = conf.getDataSource2(null).getConnection();\n-            try {\n-                long cur = seq.getSequence(null, conn);\n-                if (ACTION_GET.equals(action))\n-                    System.out.println(cur);\n-                else {\n-                    long set;\n-                    if (args.length > 0)\n-                        set = Long.parseLong(args[0]);\n-                    else\n-                        set = cur + seq.getAllocate();\n-                    if (set < cur)\n-                        set = cur;\n-                    else {\n-                        Status stat = seq.getStatus(null);\n-                        seq.setSequence(null, stat, (int) (set - cur), true,\n-                            conn);\n-                        set = stat.seq;\n-                    }\n-                    System.err.println(set);\n-                }\n-            }\n-            catch (NumberFormatException nfe) {\n-                return false;\n-            } finally {\n-                try { conn.close(); } catch (SQLException se) {}\n-            }\n-        } else\n-            return false;\n-        return true;\n-    }\n-\n-    /**\n-     * Helper struct to hold status information.\n-     */\n-    protected static class Status\n-        implements Serializable {\n-\n-        public long seq = 1L;\n-        public long max = 0L;\n-    }\n-\n-    /**\n-     * This method is to provide override for non-JDBC or JDBC-like \n-     * implementation of preparing statement.\n-     */\n-    protected PreparedStatement prepareStatement(Connection conn, SQLBuffer buf)\n-        throws SQLException {\n-        return buf.prepareStatement(conn);\n-    }\n-    \n-    /**\n-     * This method is to provide override for non-JDBC or JDBC-like \n-     * implementation of executing update.\n-     */\n-    protected int executeUpdate(JDBCConfiguration conf, Connection conn,  \n-        PreparedStatement stmnt, SQLBuffer buf, int opcode) throws SQLException {\n-        return stmnt.executeUpdate();\n-    }\n-    \n-    /**\n-     * This method is to provide override for non-JDBC or JDBC-like \n-     * implementation of executing query.\n-     */\n-    protected ResultSet executeQuery(JDBCConfiguration conf, Connection conn,\n-        PreparedStatement stmnt, SQLBuffer buf) throws SQLException {\n-        return stmnt.executeQuery();\n-    }\n-    \n-    /**\n-     * This method is to provide override for non-JDBC or JDBC-like \n-     * implementation of getting sequence from the result set.\n-     */\n-    protected long getSequence(ResultSet rs, DBDictionary dict) throws SQLException {\n-        if (rs == null || !rs.next())\n-            return -1;\n-        return dict.getLong(rs, 1);\n-    }\n-\n-    /**\n-     * AllocateSequenceRunnable is a runnable wrapper that will inserts the\n-     * initial sequence value into the database.\n-     */\n-    protected class AllocateSequenceRunnable implements Runnable {\n-\n-        JDBCStore store = null;\n-        ClassMapping mapping = null;\n-        Status stat = null;\n-        int alloc;\n-        boolean updateStatSeq;\n-\n-        AllocateSequenceRunnable(JDBCStore store, ClassMapping mapping,\n-                Status stat, int alloc, boolean updateStatSeq) {\n-            this.store = store;\n-            this.mapping = mapping;\n-            this.stat = stat;\n-            this.alloc = alloc;\n-            this.updateStatSeq = updateStatSeq;\n-        }\n-\n-        /**\n-         * This method actually obtains the current sequence value.\n-         * \n-         * @throws RuntimeException\n-         *             any SQLExceptions that occur when obtaining the sequence\n-         *             value are wrapped in a runtime exception to avoid\n-         *             breaking the Runnable method signature. The caller can\n-         *             obtain the \"real\" exception by calling getCause().\n-         */\n-        public void run() throws RuntimeException {\n-            Connection conn = null;\n-            SQLException err = null;\n-            try {\n-                // Try to use the store's connection.\n-                \n-                conn = getConnection(store);  \n-                boolean sequenceSet =\n-                    setSequence(mapping, stat, alloc, updateStatSeq, conn);\n-                closeConnection(conn);\n-\n-                if (!sequenceSet) {\n-                    // insert a new sequence column. \n-                    // Prefer connection2 / non-jta-data-source when inserting \n-                    // a sequence column regardless of Seq.type.\n-                    conn = _conf.getDataSource2(store.getContext())\n-                                .getConnection();\n-                    insertSequence(mapping, conn);\n-                    conn.close();\n-\n-                    // now we should be able to update using the connection per\n-                    // on the seq type.\n-                    conn = getConnection(store);\n-                    if (!setSequence(mapping, stat, alloc, updateStatSeq, conn))\n-                    {\n-                        throw (err != null) ? err : new SQLException(_loc.get(\n-                                \"no-seq-row\", mapping, _table).getMessage());\n-                    }\n-                    closeConnection(conn);\n-                }\n-            } catch (SQLException e) {\n-                if (conn != null) {\n-                    closeConnection(conn);\n-                }\n-                RuntimeException re = new RuntimeException(e.getMessage());\n-                re.initCause(e);\n-                throw re;\n-            }\n-        }\n-    }\n-\n-    /**\n-     * CurentSequenceRunnable is a runnable wrapper which obtains the current\n-     * sequence value from the database.\n-     */\n-    protected class CurrentSequenceRunnable implements Runnable {\n-        private JDBCStore _store;\n-        private ClassMapping _mapping;\n-\n-        CurrentSequenceRunnable(JDBCStore store, ClassMapping mapping) {\n-            _store = store;\n-            _mapping = mapping;\n-        }\n-\n-        /**\n-         * This method actually obtains the current sequence value.\n-         * \n-         * @throws RuntimeException\n-         *             any SQLExceptions that occur when obtaining the sequence\n-         *             value are wrapped in a runtime exception to avoid\n-         *             breaking the Runnable method signature. The caller can\n-         *             obtain the \"real\" exception by calling getCause().\n-         */\n-        public void run() throws RuntimeException {\n-            Connection conn = null;\n-            try {\n-                conn = getConnection(_store);\n-                long cur = getSequence(_mapping, conn);\n-                if (cur != -1 ) // USE the constant\n-                    current = Numbers.valueOf(cur);\n-            } catch (SQLException sqle) {\n-                RuntimeException re = new RuntimeException(sqle.getMessage());\n-                re.initCause(sqle);\n-                throw re;\n-            } finally {\n-                if (conn != null) {\n-                    closeConnection(conn);\n-                }\n-            }\n-        }\n-    }\n-}"},{"sha":"1e372731e70b7207d7ae11689116ec23a88964fb","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/UpdateManager.java","status":"removed","additions":0,"deletions":43,"changes":43,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/UpdateManager.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/UpdateManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/UpdateManager.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,43 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.kernel;\n-\n-import java.util.Collection;\n-\n-/**\n- * This interface is used to customize the way that updates are made to\n- * database records.\n- *\n- * @author Abe White\n- */\n-public interface UpdateManager {\n-\n-    /**\n-     * Whether the store context should maintain the order in which instances\n-     * are dirtied.\n-     */\n-    public boolean orderDirty();\n-\n-    /**\n-     * Flush the given instances to the data store.\n-     *\n-     * @see org.apache.openjpa.kernel.StoreManager#flush\n-     */\n-    public Collection flush(Collection states, JDBCStore store);\n-}"},{"sha":"329fcad522c2a38571bcf7ae444dfe06d0bc21b3","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/ValueTableJDBCSeq.java","status":"removed","additions":0,"deletions":206,"changes":206,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/ValueTableJDBCSeq.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/ValueTableJDBCSeq.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/ValueTableJDBCSeq.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,206 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.kernel;\n-\n-import java.sql.Connection;\n-import java.sql.SQLException;\n-import java.sql.Types;\n-\n-import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n-import org.apache.openjpa.jdbc.conf.JDBCConfigurationImpl;\n-import org.apache.openjpa.jdbc.meta.ClassMapping;\n-import org.apache.openjpa.jdbc.meta.MappingRepository;\n-import org.apache.openjpa.jdbc.schema.Column;\n-import org.apache.openjpa.jdbc.schema.Table;\n-import org.apache.openjpa.jdbc.sql.DBDictionary;\n-import org.apache.openjpa.lib.conf.Configurations;\n-import org.apache.openjpa.lib.util.Localizer;\n-import org.apache.openjpa.lib.util.Options;\n-import org.apache.openjpa.meta.JavaTypes;\n-\n-////////////////////////////////////////////////////////////\n-// NOTE: Do not change property names; see SequenceMetaData\n-// and SequenceMapping for standard property names.\n-////////////////////////////////////////////////////////////\n-\n-/**\n- * Specialization of the {@link TableJDBCSeq} that maintains multiple\n- * sequence counts. Each instance of this class represents one row with\n- * a known string primary key value, more or less. The table name defaults\n- * to <code>OPENJPA_SEQUENCES_TABLE</code>.\n- *\n- * @author Abe White\n- */\n-public class ValueTableJDBCSeq\n-    extends TableJDBCSeq {\n-\n-    public static final String PK_VALUE = \"PrimaryKeyValue\";\n-\n-    private static final Localizer _loc = Localizer.forPackage\n-        (ValueTableJDBCSeq.class);\n-\n-    private String _value = \"DEFAULT\";\n-\n-    public ValueTableJDBCSeq() {\n-        setTable(\"OPENJPA_SEQUENCES_TABLE\");\n-    }\n-\n-    /**\n-     * The primary key value for this row. Defaults to <code>DEFAULT</code>.\n-     */\n-    public String getPrimaryKeyValue() {\n-        return _value;\n-    }\n-\n-    /**\n-     * The primary key value for this row. Defaults to <code>DEFAULT</code>.\n-     */\n-    public void setPrimaryKeyValue(String value) {\n-        _value = value;\n-    }\n-\n-    protected Column addPrimaryKeyColumn(Table table) {\n-        DBDictionary dict = getConfiguration().getDBDictionaryInstance();\n-        Column pkColumn = table.addColumn(dict.getValidColumnName\n-            (getPrimaryKeyColumn(), table));\n-        pkColumn.setType(dict.getPreferredType(Types.VARCHAR));\n-        pkColumn.setJavaType(JavaTypes.STRING);\n-        pkColumn.setSize(dict.characterColumnSize);\n-        return pkColumn;\n-    }\n-\n-    protected Object getPrimaryKey(ClassMapping mapping) {\n-        return _value;\n-    }\n-\n-    /////////\n-    // Main\n-    /////////\n-\n-    /**\n-     * Usage: java org.apache.openjpa.jdbc.kernel.ValueTableJDBCSeq [option]*\n-     * -action/-a &lt;add | drop | get | set&gt; [primary key value] [value]\n-     *  Where the following options are recognized.\n-     * <ul>\n-     * <li><i>-properties/-p &lt;properties file or resource&gt;</i>: The\n-     * path or resource name of a OpenJPA properties file containing\n-     * information such as the license key\tand connection data as\n-     * outlined in {@link JDBCConfiguration}. Optional.</li>\n-     * <li><i>-&lt;property name&gt; &lt;property value&gt;</i>: All bean\n-     * properties of the OpenJPA {@link JDBCConfiguration} can be set by\n-     * using their\tnames and supplying a value. For example:\n-     * <code>-licenseKey adslfja83r3lkadf</code></li>\n-     * </ul>\n-     *  The various actions are as follows.\n-     * <ul>\n-     * <li><i>add</i>: Create the sequence table.</li>\n-     * <li><i>drop</i>: Drop the sequence table.</li>\n-     * <li><i>get</i>: Print the current sequence value for the given\n-     * primary key value.</li>\n-     * <li><i>set</i>: Set the sequence value for the given primary key\n-     * value.</li>\n-     * </ul>\n-     */\n-    public static void main(String[] args)\n-        throws Exception {\n-        Options opts = new Options();\n-        final String[] arguments = opts.setFromCmdLine(args);\n-        boolean ret = Configurations.runAgainstAllAnchors(opts,\n-            new Configurations.Runnable() {\n-            public boolean run(Options opts) throws Exception {\n-                JDBCConfiguration conf = new JDBCConfigurationImpl();\n-                try {\n-                    return ValueTableJDBCSeq.run(conf, arguments, opts);\n-                } finally {\n-                    conf.close();\n-                }\n-            }\n-        });\n-        if (!ret)\n-            System.out.println(_loc.get(\"clstable-seq-usage\"));\n-    }\n-\n-    /**\n-     * Run the tool. Returns false if invalid options were given.\n-     */\n-    public static boolean run(JDBCConfiguration conf, String[] args,\n-        Options opts)\n-        throws Exception {\n-        String action = opts.removeProperty(\"action\", \"a\", null);\n-        Configurations.populateConfiguration(conf, opts);\n-        return run(conf, args, action, null, null);\n-    }\n-\n-    /**\n-     * Run the tool. Return false if an invalid option was given.\n-     */\n-    public static boolean run(JDBCConfiguration conf, String[] args,\n-        String action, MappingRepository repos, ClassLoader loader)\n-        throws Exception {\n-        ValueTableJDBCSeq seq = new ValueTableJDBCSeq();\n-        String props = Configurations.getProperties(conf.getSequence());\n-        Configurations.configureInstance(seq, conf, props);\n-\n-        if (ACTION_DROP.equals(action)) {\n-            if (args.length != 0)\n-                return false;\n-            seq.dropTable();\n-        } else if (ACTION_ADD.equals(action)) {\n-            if (args.length != 0)\n-                return false;\n-            seq.refreshTable();\n-        } else if (ACTION_GET.equals(action) || ACTION_SET.equals(action)) {\n-            if (args.length > 0)\n-                seq.setPrimaryKeyValue(args[0]);\n-\n-            Connection conn = conf.getDataSource2(null).getConnection();\n-            try {\n-                long cur = seq.getSequence(null, conn);\n-                if (ACTION_GET.equals(action))\n-                    System.out.println(seq.getPrimaryKeyValue() + \": \" + cur);\n-                else {\n-                    long set;\n-                    if (args.length > 1)\n-                        set = Long.parseLong(args[1]);\n-                    else\n-                        set = cur + seq.getAllocate();\n-                    if (set < cur)\n-                        set = cur;\n-                    else {\n-                        Status stat = seq.getStatus(null);\n-                        seq.setSequence(null, stat, (int) (set - cur), true,\n-                            conn);\n-                        set = stat.seq;\n-                    }\n-                    System.err.println(seq.getPrimaryKeyValue() + \": \" + set);\n-                }\n-            }\n-            catch (NumberFormatException nfe) {\n-                return false;\n-            } finally {\n-                try {\n-                    conn.close();\n-                } catch (SQLException se) {\n-                }\n-            }\n-        } else\n-            return false;\n-        return true;\n-    }\n-}"},{"sha":"9e7f8039b6203fc526e2549d95e174e22c5c8097","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Abs.java","status":"removed","additions":0,"deletions":59,"changes":59,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Abs.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Abs.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Abs.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,59 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.kernel.exps;\n-\n-import java.math.BigDecimal;\n-import java.math.BigInteger;\n-\n-import org.apache.openjpa.kernel.Filters;\n-\n-/**\n- * Absolute value.\n- */\n-public class Abs\n-    extends UnaryOp {\n-\n-    /**\n-     * Constructor. Provide the value to operate on.\n-     */\n-    public Abs(Val val) {\n-        super(val);\n-    }\n-\n-    protected Class getType(Class c) {\n-        Class wrap = Filters.wrap(c);\n-        if (wrap == Integer.class\n-            || wrap == Float.class\n-            || wrap == Double.class\n-            || wrap == Long.class\n-            || wrap == BigDecimal.class\n-            || wrap == BigInteger.class)\n-            return Filters.unwrap(c);\n-        return int.class;\n-    }\n-\n-    protected String getOperator() {\n-        return \"ABS\";\n-    }\n-\n-    public int getId() {\n-        return Val.ABS_VAL;\n-    }\n-}\n-"},{"sha":"8185b98b94633358b13429608e46a11054697518","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/AbstractVal.java","status":"removed","additions":0,"deletions":89,"changes":89,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/AbstractVal.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/AbstractVal.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/AbstractVal.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,89 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.kernel.exps;\n-\n-import org.apache.openjpa.jdbc.sql.SQLBuffer;\n-import org.apache.openjpa.jdbc.sql.Select;\n-import org.apache.openjpa.kernel.exps.ExpressionVisitor;\n-\n-/**\n- * Abstract value for easy extension.\n- *\n- * @author Marc Prud'hommeaux\n- */\n-abstract class AbstractVal\n-    implements Val {\n-\n-    protected static final String TRUE = \"1 = 1\";\n-    protected static final String FALSE = \"1 <> 1\";\n-\n-    public boolean isVariable() {\n-        return false;\n-    }\n-\n-    public boolean isAggregate() {\n-        return false;\n-    }\n-\n-    public boolean isXPath() {\n-        return false;\n-    }\n-\n-    public Object toDataStoreValue(Select sel, ExpContext ctx, ExpState state, \n-        Object val) {\n-        return val;\n-    }\n-\n-    public void appendIsEmpty(Select sel, ExpContext ctx, ExpState state, \n-        SQLBuffer sql) {\n-        sql.append(FALSE);\n-    }\n-\n-    public void appendIsNotEmpty(Select sel, ExpContext ctx, ExpState state, \n-        SQLBuffer sql){\n-        sql.append(TRUE);\n-    }\n-\n-    public void appendIsNull(Select sel, ExpContext ctx, ExpState state, \n-        SQLBuffer sql) {\n-        appendTo(sel, ctx, state, sql, 0);\n-        sql.append(\" IS \").appendValue(null);\n-    }\n-\n-    public void appendIsNotNull(Select sel, ExpContext ctx, ExpState state, \n-        SQLBuffer sql) {\n-        appendTo(sel, ctx, state, sql, 0);\n-        sql.append(\" IS NOT \").appendValue(null);\n-    }\n-\n-    public void appendSize(Select sel, ExpContext ctx, ExpState state, \n-        SQLBuffer sql) {\n-        sql.append(\"1\");\n-    }\n-\n-    public void acceptVisit(ExpressionVisitor visitor) {\n-        visitor.enter(this);\n-        visitor.exit(this);\n-    }\n-\n-    public int getId() {\n-        return Val.VAL;\n-    }\n-}\n-"},{"sha":"5d2a3ef4c3ecb968ccee6a4a18ccc44e5a90f7b4","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Aggregate.java","status":"removed","additions":0,"deletions":166,"changes":166,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Aggregate.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Aggregate.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Aggregate.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,166 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.kernel.exps;\n-\n-import java.sql.SQLException;\n-\n-import org.apache.openjpa.jdbc.meta.ClassMapping;\n-import org.apache.openjpa.jdbc.meta.JavaSQLTypes;\n-import org.apache.openjpa.jdbc.sql.Result;\n-import org.apache.openjpa.jdbc.sql.SQLBuffer;\n-import org.apache.openjpa.jdbc.sql.Select;\n-import org.apache.openjpa.kernel.Filters;\n-import org.apache.openjpa.kernel.exps.ExpressionVisitor;\n-import org.apache.openjpa.meta.ClassMetaData;\n-\n-/**\n- * Aggregate listener that evaluates to a value.\n- *\n- * @author Abe White\n- */\n-class Aggregate\n-    extends AbstractVal {\n-\n-    private final JDBCAggregateListener _listener;\n-    private final Val _arg;\n-    private final ClassMapping _candidate;\n-    private ClassMetaData _meta = null;\n-    private Class _cast = null;\n-\n-    /**\n-     * Constructor.\n-     */\n-    public Aggregate(JDBCAggregateListener listener, Val arg,\n-        ClassMapping candidate) {\n-        _listener = listener;\n-        _arg = arg;\n-        _candidate = candidate;\n-    }\n-\n-    public ClassMetaData getMetaData() {\n-        return _meta;\n-    }\n-\n-    public void setMetaData(ClassMetaData meta) {\n-        _meta = meta;\n-    }\n-\n-    public boolean isAggregate() {\n-        return true;\n-    }\n-\n-    public Class getType() {\n-        if (_cast != null)\n-            return _cast;\n-        return _listener.getType(getArgTypes());\n-    }\n-\n-    private Class[] getArgTypes() {\n-        if (_arg == null)\n-            return null;\n-        if (_arg instanceof Args)\n-            return ((Args) _arg).getTypes();\n-        return new Class[]{ _arg.getType() };\n-    }\n-\n-    public void setImplicitType(Class type) {\n-        _cast = type;\n-    }\n-\n-    public ExpState initialize(Select sel, ExpContext ctx, int flags) {\n-        if (_arg == null)\n-            return ExpState.NULL;\n-\n-        // note that we tell targets and args to extensions that are sql\n-        // paths to go ahead and join to their related object (if any),\n-        // because we assume that, unlike most operations, if a relation\n-        // field like a 1-1 is given as the target of an extension, then\n-        // the extension probably acts on some field or column in the\n-        // related object, not the 1-1 field itself\n-        return _arg.initialize(sel, ctx, JOIN_REL);\n-    }\n-\n-    public void select(Select sel, ExpContext ctx, ExpState state, \n-        boolean pks) {\n-        sel.select(newSQLBuffer(sel, ctx, state), this);\n-        sel.setAggregate(true);\n-    }\n-\n-    public void selectColumns(Select sel, ExpContext ctx, ExpState state, \n-        boolean pks) {\n-        if (_arg != null)\n-            _arg.selectColumns(sel, ctx, state, true);\n-    }\n-\n-    public void groupBy(Select sel, ExpContext ctx, ExpState state) {\n-        sel.groupBy(newSQLBuffer(sel, ctx, state));\n-    }\n-\n-    public void orderBy(Select sel, ExpContext ctx, ExpState state, \n-        boolean asc) {\n-        sel.orderBy(newSQLBuffer(sel, ctx, state), asc, false);\n-    }\n-\n-    private SQLBuffer newSQLBuffer(Select sel, ExpContext ctx, ExpState state) {\n-        calculateValue(sel, ctx, state, null, null);\n-        SQLBuffer buf = new SQLBuffer(ctx.store.getDBDictionary());\n-        appendTo(sel, ctx, state, buf, 0);\n-        return buf;\n-    }\n-\n-    public Object load(ExpContext ctx, ExpState state, Result res)\n-        throws SQLException {\n-        return Filters.convert(res.getObject(this, JavaSQLTypes.JDBC_DEFAULT, \n-            null), getType());\n-    }\n-\n-    public void calculateValue(Select sel, ExpContext ctx, ExpState state, \n-        Val other, ExpState otherState) {\n-        if (_arg != null)\n-            _arg.calculateValue(sel, ctx, state, null, null);\n-    }\n-\n-    public int length(Select sel, ExpContext ctx, ExpState state) {\n-        return 1;\n-    }\n-\n-    public void appendTo(Select sel, ExpContext ctx, ExpState state, \n-        SQLBuffer sql, int index) {\n-        _listener.appendTo(sql, getArgs(sel, ctx, state), _candidate, \n-            ctx.store);\n-        sel.append(sql, state.joins);\n-    }\n-\n-    private FilterValue[] getArgs(Select sel, ExpContext ctx, ExpState state) {\n-        if (_arg == null)\n-            return null;\n-        if (_arg instanceof Args)\n-            return ((Args) _arg).newFilterValues(sel, ctx, state);\n-        return new FilterValue[]{\n-            new FilterValueImpl(sel, ctx, state, _arg)\n-        };\n-    }\n-\n-    public void acceptVisit(ExpressionVisitor visitor) {\n-        visitor.enter(this);\n-        if (_arg != null)\n-            _arg.acceptVisit(visitor);\n-        visitor.exit(this);\n-    }\n-}"},{"sha":"f90f42535577d2a464d504d77888c8a0277543be","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/All.java","status":"removed","additions":0,"deletions":37,"changes":37,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/All.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/All.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/All.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,37 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.kernel.exps;\n-\n-/**\n- * All.\n- *\n- * @author Marc Prud'hommeaux\n- */\n-class All\n-    extends UnaryOp {\n-\n-    public All(Val val) {\n-        super(val, true);\n-    }\n-\n-    protected String getOperator() {\n-        return \"ALL\";\n-    }\n-}\n-"},{"sha":"a4c1349f61848f9ec32f4f3a300ebeb36c60ab53","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/AndExpression.java","status":"removed","additions":0,"deletions":84,"changes":84,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/AndExpression.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/AndExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/AndExpression.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,84 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.kernel.exps;\n-\n-import java.util.Map;\n-\n-import org.apache.openjpa.jdbc.sql.SQLBuffer;\n-import org.apache.openjpa.jdbc.sql.Select;\n-import org.apache.openjpa.kernel.exps.ExpressionVisitor;\n-\n-/**\n- * Combines two expressions.\n- *\n- * @author Abe White\n- */\n-class AndExpression\n-    implements Exp {\n-\n-    private final Exp _exp1;\n-    private final Exp _exp2;\n-\n-    /**\n-     * Constructor. Supply the expressions to combine.\n-     */\n-    public AndExpression(Exp exp1, Exp exp2) {\n-        _exp1 = exp1;\n-        _exp2 = exp2;\n-    }\n-\n-    public ExpState initialize(Select sel, ExpContext ctx, Map contains) {\n-        ExpState s1 = _exp1.initialize(sel, ctx, contains);\n-        ExpState s2 = _exp2.initialize(sel, ctx, contains);\n-        return new BinaryOpExpState(sel.and(s1.joins, s2.joins), s1, s2);\n-    }\n-\n-    public void appendTo(Select sel, ExpContext ctx, ExpState state, \n-        SQLBuffer buf) {\n-        BinaryOpExpState bstate = (BinaryOpExpState) state;\n-        boolean paren1 = _exp1 instanceof OrExpression;\n-        boolean paren2 = _exp2 instanceof OrExpression;\n-        if (paren1)\n-            buf.append(\"(\");\n-        _exp1.appendTo(sel, ctx, bstate.state1, buf);\n-        if (paren1)\n-            buf.append(\")\");\n-        buf.append(\" AND \");\n-        if (paren2)\n-            buf.append(\"(\");\n-        _exp2.appendTo(sel, ctx, bstate.state2, buf);\n-        if (paren2)\n-            buf.append(\")\");\n-        sel.append(buf, state.joins);\n-    }\n-\n-    public void selectColumns(Select sel, ExpContext ctx, ExpState state, \n-        boolean pks) {\n-        BinaryOpExpState bstate = (BinaryOpExpState) state;\n-        _exp1.selectColumns(sel, ctx, bstate.state1, pks);\n-        _exp2.selectColumns(sel, ctx, bstate.state2, pks);\n-    }\n-\n-    public void acceptVisit(ExpressionVisitor visitor) {\n-        visitor.enter(this);\n-        _exp1.acceptVisit(visitor);\n-        _exp2.acceptVisit(visitor);\n-        visitor.exit(this);\n-    }\n-}"},{"sha":"45a04fce96e11cb2406e3dd3e4ff6ee4137c8e80","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Any.java","status":"removed","additions":0,"deletions":37,"changes":37,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Any.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Any.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Any.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,37 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.kernel.exps;\n-\n-/**\n- * Any.\n- *\n- * @author Marc Prud'hommeaux\n- */\n-class Any\n-    extends UnaryOp {\n-\n-    public Any(Val val) {\n-        super(val, true);\n-    }\n-\n-    protected String getOperator() {\n-        return \"ANY\";\n-    }\n-}\n-"},{"sha":"d6379b90837dd4278d8d58ac1661f6b9ad8d0586","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Args.java","status":"removed","additions":0,"deletions":201,"changes":201,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Args.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Args.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Args.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,201 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.kernel.exps;\n-\n-import org.apache.openjpa.jdbc.sql.Joins;\n-import org.apache.openjpa.jdbc.sql.Result;\n-import org.apache.openjpa.jdbc.sql.SQLBuffer;\n-import org.apache.openjpa.jdbc.sql.Select;\n-import org.apache.openjpa.kernel.exps.Arguments;\n-import org.apache.openjpa.kernel.exps.ExpressionVisitor;\n-import org.apache.openjpa.kernel.exps.Value;\n-import org.apache.openjpa.meta.ClassMetaData;\n-\n-/**\n- * A list of arguments to a multi-argument function.\n- *\n- * @author Abe White\n- */\n-public class Args\n-    extends AbstractVal\n-    implements Arguments {\n-\n-    private final Val[] _args;\n-    private ClassMetaData _meta = null;\n-\n-    /**\n-     * Constructor. Supply values being combined.\n-     */\n-    public Args(Val val1, Val val2) {\n-        int len1 = (val1 instanceof Args) ? ((Args) val1)._args.length : 1;\n-        int len2 = (val2 instanceof Args) ? ((Args) val2)._args.length : 1;\n-\n-        _args = new Val[len1 + len2];\n-        if (val1 instanceof Args)\n-            System.arraycopy(((Args) val1)._args, 0, _args, 0, len1);\n-        else\n-            _args[0] = val1;\n-        if (val2 instanceof Args)\n-            System.arraycopy(((Args) val2)._args, 0, _args, len1, len2);\n-        else\n-            _args[len1] = val2;\n-    }\n-\n-    /**\n-     * Return a filter value for each argument.\n-     */\n-    public FilterValue[] newFilterValues(Select sel, ExpContext ctx, \n-        ExpState state) {\n-        ArgsExpState astate = (ArgsExpState) state; \n-        FilterValue[] filts = new FilterValue[_args.length];\n-        for (int i = 0; i < _args.length; i++)\n-            filts[i] = new FilterValueImpl(sel, ctx, astate.states[i], \n-                _args[i]); \n-        return filts;\n-    }\n-\n-    public Value[] getValues() {\n-        return _args;\n-    }\n-\n-    public Val[] getVals() {\n-        return _args;\n-    }\n-\n-    public ClassMetaData getMetaData() {\n-        return _meta;\n-    }\n-\n-    public void setMetaData(ClassMetaData meta) {\n-        _meta = meta;\n-    }\n-\n-    public boolean isVariable() {\n-        return false;\n-    }\n-\n-    public Class getType() {\n-        return Object[].class;\n-    }\n-\n-    public Class[] getTypes() {\n-        Class[] c = new Class[_args.length];\n-        for (int i = 0; i < _args.length; i++)\n-            c[i] = _args[i].getType();\n-        return c;\n-    }\n-\n-    public void setImplicitType(Class type) {\n-    }\n-\n-    public ExpState initialize(Select sel, ExpContext ctx, int flags) {\n-        ExpState[] states = new ExpState[_args.length];\n-        Joins joins = null;\n-        for (int i = 0; i < _args.length; i++) {\n-            states[i] = _args[i].initialize(sel, ctx, flags);\n-            if (joins == null)\n-                joins = states[i].joins;\n-            else\n-                joins = sel.and(joins, states[i].joins);\n-        }\n-        return new ArgsExpState(joins, states);\n-    }\n-\n-    /**\n-     * Expression state.\n-     */\n-    private static class ArgsExpState\n-        extends ExpState {\n-        \n-        public ExpState[] states;\n-\n-        public ArgsExpState(Joins joins, ExpState[] states) {\n-            super(joins);\n-            this.states = states;\n-        }\n-    }\n-\n-    public void select(Select sel, ExpContext ctx, ExpState state, \n-        boolean pks) {\n-    }\n-\n-    public void selectColumns(Select sel, ExpContext ctx, ExpState state, \n-        boolean pks) {\n-        ArgsExpState astate = (ArgsExpState) state;\n-        for (int i = 0; i < _args.length; i++)\n-            _args[i].selectColumns(sel, ctx, astate.states[i], pks);\n-    }\n-\n-    public void groupBy(Select sel, ExpContext ctx, ExpState state) {\n-    }\n-\n-    public void orderBy(Select sel, ExpContext ctx, ExpState state, \n-        boolean asc) {\n-    }\n-\n-    public Object load(ExpContext ctx, ExpState state, Result res) {\n-        return null;\n-    }\n-\n-    public void calculateValue(Select sel, ExpContext ctx, ExpState state, \n-        Val other, ExpState otherState) {\n-        ArgsExpState astate = (ArgsExpState) state;\n-        for (int i = 0; i < _args.length; i++)\n-            _args[i].calculateValue(sel, ctx, astate.states[i], null, null);\n-    }\n-\n-    public int length(Select sel, ExpContext ctx, ExpState state) {\n-        return 0;\n-    }\n-\n-    public void appendTo(Select sel, ExpContext ctx, ExpState state, \n-        SQLBuffer sql, int index) {\n-    }\n-\n-    public void appendIsEmpty(Select sel, ExpContext ctx, ExpState state, \n-        SQLBuffer sql) {\n-    }\n-\n-    public void appendIsNotEmpty(Select sel, ExpContext ctx, ExpState state, \n-        SQLBuffer sql){\n-    }\n-\n-    public void appendSize(Select sel, ExpContext ctx, ExpState state, \n-        SQLBuffer sql) {\n-    }\n-\n-    public void appendIsNull(Select sel, ExpContext ctx, ExpState state, \n-        SQLBuffer sql) {\n-    }\n-\n-    public void appendIsNotNull(Select sel, ExpContext ctx, ExpState state, \n-        SQLBuffer sql) {\n-    }\n-\n-    public void acceptVisit(ExpressionVisitor visitor) {\n-        visitor.enter(this);\n-        for (int i = 0; i < _args.length; i++)\n-            _args[i].acceptVisit(visitor);\n-        visitor.exit(this);\n-    }\n-\n-    public int getId() {\n-        return Val.ARGS_VAL;\n-    }\n-}"},{"sha":"01163d36eaa8f028a7b7896db2b882d93e609afc","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Avg.java","status":"removed","additions":0,"deletions":44,"changes":44,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Avg.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Avg.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Avg.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,44 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.kernel.exps;\n-\n-/**\n- * Average.\n- *\n- * @author Abe White\n- */\n-class Avg\n-    extends UnaryOp {\n-\n-    /**\n-     * Constructor. Provide the value to operate on.\n-     */\n-    public Avg(Val val) {\n-        super(val);\n-    }\n-\n-    protected String getOperator() {\n-        return \"AVG\";\n-    }\n-\n-    public boolean isAggregate() {\n-        return true;\n-    }\n-}\n-"},{"sha":"e99409b81527a23bc12122eef1587ed2007d2356","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/BinaryOpExpState.java","status":"removed","additions":0,"deletions":49,"changes":49,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/BinaryOpExpState.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/BinaryOpExpState.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/BinaryOpExpState.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,49 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.kernel.exps;\n-\n-import org.apache.openjpa.jdbc.sql.Joins;\n-\n-/**\n- * Expression tree state for a binary operator.\n- * \n- * @author Abe White\n- */\n-class BinaryOpExpState \n-    extends ExpState {\n-\n-    /**\n-     * State for first expression/value.\n-     */\n-    public ExpState state1;\n-\n-    /**\n-     * State for second expression/value.\n-     */\n-    public ExpState state2;\n-\n-    public BinaryOpExpState() {\n-    }\n-\n-    public BinaryOpExpState(Joins joins, ExpState state1, ExpState state2) {\n-        super(joins);\n-        this.state1 = state1;\n-        this.state2 = state2;\n-    }\n-}"},{"sha":"d931a22de2841f8617c9237d45ebd7f39e349ef6","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/BindVariableAndExpression.java","status":"removed","additions":0,"deletions":73,"changes":73,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/BindVariableAndExpression.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/BindVariableAndExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/BindVariableAndExpression.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,73 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.kernel.exps;\n-\n-import java.util.Map;\n-\n-import org.apache.openjpa.jdbc.sql.SQLBuffer;\n-import org.apache.openjpa.jdbc.sql.Select;\n-import org.apache.openjpa.kernel.exps.ExpressionVisitor;\n-\n-/**\n- * Combines a bind variable expression with another.\n- *\n- * @author Abe White\n- */\n-class BindVariableAndExpression\n-    implements Exp {\n-\n-    private final BindVariableExpression _bind;\n-    private final Exp _exp;\n-\n-    /**\n-     * Constructor. Supply the two combined expressions.\n-     */\n-    public BindVariableAndExpression(BindVariableExpression bind, Exp exp) {\n-        _bind = bind;\n-        _exp = exp;\n-    }\n-\n-    public ExpState initialize(Select sel, ExpContext ctx, Map contains) {\n-        ExpState s1 = _bind.initialize(sel, ctx, contains);\n-        ExpState s2 = _exp.initialize(sel, ctx, contains);\n-        return new BinaryOpExpState(sel.and(s1.joins, s2.joins), s1, s2);\n-    }\n-\n-    public void appendTo(Select sel, ExpContext ctx, ExpState state, \n-        SQLBuffer buf) {\n-        boolean or = _exp instanceof OrExpression;\n-        if (or)\n-            buf.append(\"(\");\n-        _exp.appendTo(sel, ctx, ((BinaryOpExpState) state).state2, buf);\n-        if (or)\n-            buf.append(\")\");\n-    }\n-\n-    public void selectColumns(Select sel, ExpContext ctx, ExpState state, \n-        boolean pks) {\n-        _exp.selectColumns(sel, ctx, ((BinaryOpExpState) state).state2, pks);\n-    }\n-\n-    public void acceptVisit(ExpressionVisitor visitor) {\n-        visitor.enter(this);\n-        _bind.acceptVisit(visitor);\n-        _exp.acceptVisit(visitor);\n-        visitor.exit(this);\n-    }\n-}"},{"sha":"101d880400f507880317e688155596cb21d38586","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/BindVariableExpression.java","status":"removed","additions":0,"deletions":75,"changes":75,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/BindVariableExpression.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/BindVariableExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/BindVariableExpression.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,75 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.kernel.exps;\n-\n-import java.util.Map;\n-\n-import org.apache.openjpa.jdbc.sql.SQLBuffer;\n-import org.apache.openjpa.jdbc.sql.Select;\n-import org.apache.openjpa.kernel.exps.ExpressionVisitor;\n-\n-/**\n- * Binds a variable to a value. Typically, the {@link #initialize} and\n- * {@link #getJoins} methods of this expression are not called. They are\n- * only called if the variable being bound is otherwise unused in the filter,\n- * in which case we must at least make the joins to the variable because the\n- * act of binding a variable should at least guarantee that an instance\n- * represting the variable could exist (i.e. the binding collection is not\n- * empty).\n- *\n- * @author Abe White\n- */\n-class BindVariableExpression\n-    extends EmptyExpression {\n-\n-    private final Variable _var;\n-\n-    /**\n-     * Constructor. Supply values.\n-     */\n-    public BindVariableExpression(Variable var, PCPath val, boolean key) {\n-        if (key)\n-            val.getKey();\n-        var.setPCPath(val);\n-        _var = var;\n-    }\n-\n-    public Variable getVariable() {\n-        return _var;\n-    }\n-\n-    public ExpState initialize(Select sel, ExpContext ctx, Map contains) {\n-        return _var.initialize(sel, ctx, 0);\n-    }\n-\n-    public void appendTo(Select sel, ExpContext ctx, ExpState state, \n-        SQLBuffer buf) {\n-        buf.append(\"1 = 1\");\n-    }\n-\n-    public void selectColumns(Select sel, ExpContext ctx, ExpState state, \n-        boolean pks) {\n-    }\n-\n-    public void acceptVisit(ExpressionVisitor visitor) {\n-        visitor.enter(this);\n-        _var.acceptVisit(visitor);\n-        visitor.exit(this);\n-    }\n-}"},{"sha":"6c893715eabbc800cb1a89ff1f7399552b330f6a","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/CompareEqualExpression.java","status":"removed","additions":0,"deletions":131,"changes":131,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/CompareEqualExpression.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/CompareEqualExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/CompareEqualExpression.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,131 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.kernel.exps;\n-\n-import java.util.Map;\n-\n-import org.apache.openjpa.jdbc.sql.SQLBuffer;\n-import org.apache.openjpa.jdbc.sql.Select;\n-import org.apache.openjpa.kernel.Filters;\n-import org.apache.openjpa.kernel.exps.ExpressionVisitor;\n-import org.apache.openjpa.lib.util.Localizer;\n-import org.apache.openjpa.util.UserException;\n-\n-/**\n- * Compares two values for equality.\n- *\n- * @author Abe White\n- */\n-abstract class CompareEqualExpression\n-    implements Exp {\n-\n-    private static final Localizer _loc = Localizer.forPackage\n-        (CompareEqualExpression.class);\n-\n-    private final Val _val1;\n-    private final Val _val2;\n-\n-    /**\n-     * Constructor. Supply values to compare.\n-     */\n-    public CompareEqualExpression(Val val1, Val val2) {\n-        _val1 = val1;\n-        _val2 = val2;\n-    }\n-\n-    public Val getValue1() {\n-        return _val1;\n-    }\n-\n-    public Val getValue2() {\n-        return _val2;\n-    }\n-\n-    public ExpState initialize(Select sel, ExpContext ctx, Map contains) {\n-        boolean direct = isDirectComparison();\n-        int flags1 = 0;\n-        int flags2 = 0;\n-        ExpState s1 = null;\n-        ExpState s2 = null;\n-        if (_val1 instanceof Const) {\n-            s1 = _val1.initialize(sel, ctx, 0);\n-            if (direct && ((Const) _val1).getValue(ctx, s1) == null)\n-                flags2 = Val.NULL_CMP;\n-        }\n-        if (_val2 instanceof Const) {\n-            s2 = _val2.initialize(sel, ctx, 0);\n-            if (direct && ((Const) _val2).getValue(ctx, s2) == null)\n-                flags1 = Val.NULL_CMP;\n-        }\n-        \n-        if (s1 == null)\n-            s1 = _val1.initialize(sel, ctx, flags1);\n-        if (s2 == null)\n-            s2 = _val2.initialize(sel, ctx, flags2);\n-        return new BinaryOpExpState(sel.and(s1.joins, s2.joins), s1, s2);\n-    }\n-\n-    public void appendTo(Select sel, ExpContext ctx, ExpState state, \n-        SQLBuffer buf) {\n-        BinaryOpExpState bstate = (BinaryOpExpState) state;\n-        _val1.calculateValue(sel, ctx, bstate.state1, _val2, bstate.state2);\n-        _val2.calculateValue(sel, ctx, bstate.state2, _val1, bstate.state1);\n-        if (!Filters.canConvert(_val1.getType(), _val2.getType(), false)\n-            && !Filters.canConvert(_val2.getType(), _val1.getType(), false))\n-            throw new UserException(_loc.get(\"cant-convert\", _val1.getType(),\n-                _val2.getType()));\n-\n-        boolean val1Null = _val1 instanceof Const\n-            && ((Const) _val1).isSQLValueNull(sel, ctx, bstate.state1);\n-        boolean val2Null = _val2 instanceof Const\n-            && ((Const) _val2).isSQLValueNull(sel, ctx, bstate.state2);\n-        appendTo(sel, ctx, bstate, buf, val1Null, val2Null);\n-        sel.append(buf, state.joins);\n-    }\n-\n-    public void selectColumns(Select sel, ExpContext ctx, ExpState state, \n-        boolean pks) {\n-        BinaryOpExpState bstate = (BinaryOpExpState) state;\n-        _val1.selectColumns(sel, ctx, bstate.state1, true);\n-        _val2.selectColumns(sel, ctx, bstate.state2, true);\n-    }\n-\n-    /**\n-     * Append the SQL for the comparison.\n-     */\n-    protected abstract void appendTo(Select sel, ExpContext ctx, \n-        BinaryOpExpState state, SQLBuffer buf, boolean val1Null, \n-        boolean val2Null);\n-\n-    /**\n-     * Subclasses can override this method if, when they compare to another,\n-     * value, the comparison is indirect. For example, field.contains (x)\n-     * should compare element values to null, not the field itself.\n-     */\n-    protected boolean isDirectComparison() {\n-        return true;\n-    }\n-\n-    public void acceptVisit(ExpressionVisitor visitor) {\n-        visitor.enter(this);\n-        _val1.acceptVisit(visitor);\n-        _val2.acceptVisit(visitor);\n-        visitor.exit(this);\n-    }\n-}"},{"sha":"6e1bea65ddf7510384b61c18d68f972b4da16d16","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/CompareExpression.java","status":"removed","additions":0,"deletions":94,"changes":94,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/CompareExpression.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/CompareExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/CompareExpression.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,94 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.kernel.exps;\n-\n-import java.util.Map;\n-\n-import org.apache.openjpa.jdbc.sql.SQLBuffer;\n-import org.apache.openjpa.jdbc.sql.Select;\n-import org.apache.openjpa.kernel.Filters;\n-import org.apache.openjpa.kernel.exps.ExpressionVisitor;\n-import org.apache.openjpa.lib.util.Localizer;\n-import org.apache.openjpa.util.UserException;\n-\n-/**\n- * Compares two values.\n- *\n- * @author Abe White\n- */\n-class CompareExpression\n-    implements Exp {\n-\n-    public static final String LESS = \"<\";\n-    public static final String GREATER = \">\";\n-    public static final String LESS_EQUAL = \"<=\";\n-    public static final String GREATER_EQUAL = \">=\";\n-\n-    private static final Localizer _loc = Localizer.forPackage\n-        (CompareExpression.class);\n-\n-    private final Val _val1;\n-    private final Val _val2;\n-    private final String _op;\n-\n-    /**\n-     * Constructor. Supply values and operator.\n-     */\n-    public CompareExpression(Val val1, Val val2, String op) {\n-        _val1 = val1;\n-        _val2 = val2;\n-        _op = op;\n-    }\n-\n-    public ExpState initialize(Select sel, ExpContext ctx, Map contains) {\n-        ExpState s1 = _val1.initialize(sel, ctx, 0);\n-        ExpState s2 = _val2.initialize(sel, ctx, 0);\n-        return new BinaryOpExpState(sel.and(s1.joins, s2.joins), s1, s2);\n-    }\n-\n-    public void appendTo(Select sel, ExpContext ctx, ExpState state, \n-        SQLBuffer buf) {\n-        BinaryOpExpState bstate = (BinaryOpExpState) state;\n-        _val1.calculateValue(sel, ctx, bstate.state1, _val2, bstate.state2);\n-        _val2.calculateValue(sel, ctx, bstate.state2, _val1, bstate.state1);\n-        if (!Filters.canConvert(_val1.getType(), _val2.getType(), false)\n-            && !Filters.canConvert(_val2.getType(), _val1.getType(), false))\n-            throw new UserException(_loc.get(\"cant-convert\", _val1.getType(),\n-                _val2.getType()));\n-\n-        ctx.store.getDBDictionary().comparison(buf, _op,\n-            new FilterValueImpl(sel, ctx, bstate.state1, _val1),\n-            new FilterValueImpl(sel, ctx, bstate.state2, _val2));\n-        sel.append(buf, state.joins);\n-    }\n-\n-    public void selectColumns(Select sel, ExpContext ctx, ExpState state, \n-        boolean pks) {\n-        BinaryOpExpState bstate = (BinaryOpExpState) state;\n-        _val1.selectColumns(sel, ctx, bstate.state1, true);\n-        _val2.selectColumns(sel, ctx, bstate.state2, true);\n-    }\n-\n-    public void acceptVisit(ExpressionVisitor visitor) {\n-        visitor.enter(this);\n-        _val1.acceptVisit(visitor);\n-        _val2.acceptVisit(visitor);\n-        visitor.exit(this);\n-    }\n-}"},{"sha":"03897fa0cf1ac4801aaffb3b3feb0114bb2ac6b4","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Concat.java","status":"removed","additions":0,"deletions":161,"changes":161,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Concat.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Concat.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Concat.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,161 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.kernel.exps;\n-\n-import java.lang.Math;\n-import java.sql.SQLException;\n-\n-import org.apache.openjpa.jdbc.meta.JavaSQLTypes;\n-import org.apache.openjpa.jdbc.sql.DBDictionary;\n-import org.apache.openjpa.jdbc.sql.Result;\n-import org.apache.openjpa.jdbc.sql.SQLBuffer;\n-import org.apache.openjpa.jdbc.sql.Select;\n-import org.apache.openjpa.kernel.Filters;\n-import org.apache.openjpa.kernel.exps.ExpressionVisitor;\n-import org.apache.openjpa.meta.ClassMetaData;\n-\n-/**\n- * Concatenate one string with another.\n- *\n- * @author Marc Prud'hommeaux\n- */\n-public class Concat\n-    extends AbstractVal {\n-\n-    private final Val _val1;\n-    private final Val _val2;\n-    private ClassMetaData _meta = null;\n-\n-    /**\n-     * Constructor. Provide the strings to operate on.\n-     */\n-    public Concat(Val val1, Val val2) {\n-        _val1 = val1;\n-        _val2 = val2;\n-    }\n-\n-    public Val getVal1() {\n-        return _val1;\n-    }\n-\n-    public Val getVal2() {\n-        return _val2;\n-    }\n-\n-    public ClassMetaData getMetaData() {\n-        return _meta;\n-    }\n-\n-    public void setMetaData(ClassMetaData meta) {\n-        _meta = meta;\n-    }\n-\n-    public Class getType() {\n-        return String.class;\n-    }\n-\n-    public void setImplicitType(Class type) {\n-    }\n-\n-    public ExpState initialize(Select sel, ExpContext ctx, int flags) {\n-        ExpState s1 = _val1.initialize(sel, ctx, 0);\n-        ExpState s2 = _val2.initialize(sel, ctx, 0);\n-        return new BinaryOpExpState(sel.and(s1.joins, s2.joins), s1, s2);\n-    }\n-\n-    public void select(Select sel, ExpContext ctx, ExpState state, \n-        boolean pks) {\n-        sel.select(newSQLBuffer(sel, ctx, state), this);\n-    }\n-\n-    public void selectColumns(Select sel, ExpContext ctx, ExpState state, \n-        boolean pks) {\n-        BinaryOpExpState bstate = (BinaryOpExpState) state;\n-        _val1.selectColumns(sel, ctx, bstate.state1, true);\n-        _val2.selectColumns(sel, ctx, bstate.state2, true);\n-    }\n-\n-    public void groupBy(Select sel, ExpContext ctx, ExpState state) {\n-        sel.groupBy(newSQLBuffer(sel, ctx, state));\n-    }\n-\n-    public void orderBy(Select sel, ExpContext ctx, ExpState state, \n-        boolean asc) {\n-        sel.orderBy(newSQLBuffer(sel, ctx, state), asc, false);\n-    }\n-\n-    private SQLBuffer newSQLBuffer(Select sel, ExpContext ctx, ExpState state) {\n-        calculateValue(sel, ctx, state, null, null);\n-        SQLBuffer buf = new SQLBuffer(ctx.store.getDBDictionary());\n-        appendTo(sel, ctx, state, buf, 0);\n-        return buf;\n-    }\n-\n-    public Object load(ExpContext ctx, ExpState state, Result res) \n-        throws SQLException {\n-        return Filters.convert(res.getObject(this,\n-            JavaSQLTypes.JDBC_DEFAULT, null), getType());\n-    }\n-\n-    public void calculateValue(Select sel, ExpContext ctx, ExpState state, \n-        Val other, ExpState otherState) {\n-        BinaryOpExpState bstate = (BinaryOpExpState) state;\n-        _val1.calculateValue(sel, ctx, bstate.state1, null, null);\n-        _val2.calculateValue(sel, ctx, bstate.state2, null, null);\n-    }\n-\n-    public int length(Select sel, ExpContext ctx, ExpState state) {\n-        return 1;\n-    }\n-\n-    public void appendTo(Select sel, ExpContext ctx, ExpState state, \n-        SQLBuffer sql, int index) {\n-        BinaryOpExpState bstate = (BinaryOpExpState) state;\n-        _val1.calculateValue(sel, ctx, bstate.state1, null, null);\n-        _val2.calculateValue(sel, ctx, bstate.state2, null, null);\n-\n-        DBDictionary dict = ctx.store.getDBDictionary();\n-        String func = dict.concatenateFunction;\n-        dict.assertSupport(func != null, \"ConcatenateFunction\");\n-        int part1idx = func.indexOf(\"{0}\");\n-        int part2idx = func.indexOf(\"{1}\");\n-        String part1 = func.substring(0, Math.min(part1idx, part2idx));\n-        String part2 = func.substring(Math.min(part1idx, part2idx) + 3,\n-            Math.max(part1idx, part2idx));\n-        String part3 = func.substring(Math.max(part1idx, part2idx) + 3);\n-\n-        sql.append(part1);\n-        _val1.appendTo(sel, ctx, bstate.state1, sql, 0);\n-        sql.append(part2);\n-        _val2.appendTo(sel, ctx, bstate.state2, sql, 0);\n-        sql.append(part3);\n-    }\n-\n-    public void acceptVisit(ExpressionVisitor visitor) {\n-        visitor.enter(this);\n-        _val1.acceptVisit(visitor);\n-        _val2.acceptVisit(visitor);\n-        visitor.exit(this);\n-    }\n-\n-    public int getId() {\n-        return Val.CONCAT_VAL;\n-    }\n-}\n-"},{"sha":"6a1918d93a16d9e926f963021cd48103da5d1b77","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Const.java","status":"removed","additions":0,"deletions":193,"changes":193,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Const.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Const.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Const.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,193 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.kernel.exps;\n-\n-import java.sql.SQLException;\n-import java.util.Collection;\n-import java.util.Map;\n-\n-import org.apache.openjpa.jdbc.schema.Column;\n-import org.apache.openjpa.jdbc.sql.Result;\n-import org.apache.openjpa.jdbc.sql.SQLBuffer;\n-import org.apache.openjpa.jdbc.sql.Select;\n-import org.apache.openjpa.kernel.exps.Constant;\n-import org.apache.openjpa.meta.ClassMetaData;\n-\n-/**\n- * A literal or parameter in the filter.\n- *\n- * @author Abe White\n- */\n-abstract class Const\n-    extends AbstractVal\n-    implements Constant {\n-\n-    private ClassMetaData _meta = null;\n-\n-    public ClassMetaData getMetaData() {\n-        return _meta;\n-    }\n-\n-    public void setMetaData(ClassMetaData meta) {\n-        _meta = meta;\n-    }\n-\n-    /**\n-     * Return the SQL value of this constant.\n-     */\n-    public Object getSQLValue(Select sel, ExpContext ctx, ExpState state) {\n-        return getValue(ctx, state);\n-    }\n-\n-    /**\n-     * Return true if this constant's SQL value is equivalent to NULL.\n-     */\n-    public boolean isSQLValueNull(Select sel, ExpContext ctx, ExpState state) {\n-        Object val = getSQLValue(sel, ctx, state);\n-        if (val == null)\n-            return true;\n-        if (!(val instanceof Object[]))\n-            return false;\n-\n-        // all-null array is considered null\n-        Object[] arr = (Object[]) val;\n-        for (int i = 0; i < arr.length; i++)\n-            if (arr[i] != null)\n-                return false;\n-        return true;\n-    }\n-\n-    /**\n-     * Return the value of this constant.  May be more robust than the\n-     * parameters-only form.\n-     */\n-    public Object getValue(ExpContext ctx, ExpState state) {\n-        return getValue(ctx.params);\n-    }\n-\n-    public ExpState initialize(Select sel, ExpContext ctx, int flags) {\n-        return new ConstExpState();\n-    }\n-\n-    /**\n-     * Constant expression state.\n-     */\n-    protected static class ConstExpState\n-        extends ExpState {\n-\n-        public Column[] cols = null;\n-\n-        /**\n-         * Return the column for the value at the specified index, or null.\n-         */\n-        public Column getColumn(int index) {\n-            return (cols != null && cols.length > index) ? cols[index] : null;\n-        }\n-    }\n-\n-    public void calculateValue(Select sel, ExpContext ctx, ExpState state, \n-        Val other, ExpState otherState) {\n-        if (other instanceof PCPath)\n-            ((ConstExpState) state).cols = ((PCPath) other).\n-                getColumns(otherState);\n-    }\n-\n-    public void select(Select sel, ExpContext ctx, ExpState state, \n-        boolean pks) {\n-        sel.select(newSQLBuffer(sel, ctx, state), this);\n-    }\n-\n-    private SQLBuffer newSQLBuffer(Select sel, ExpContext ctx, ExpState state) {\n-        calculateValue(sel, ctx, state, null, null);\n-        SQLBuffer buf = new SQLBuffer(ctx.store.getDBDictionary());\n-        appendTo(sel, ctx, state, buf, 0);\n-        return buf;\n-    }\n-\n-    public void selectColumns(Select sel, ExpContext ctx, ExpState state, \n-        boolean pks) {\n-    }\n-\n-    public void groupBy(Select sel, ExpContext ctx, ExpState state) {\n-        sel.groupBy(newSQLBuffer(sel, ctx, state));\n-    }\n-\n-    public void orderBy(Select sel, ExpContext ctx, ExpState state, \n-        boolean asc) {\n-        sel.orderBy(newSQLBuffer(sel, ctx, state), asc, false);\n-    }\n-\n-    public Object load(ExpContext ctx, ExpState state, Result res)\n-        throws SQLException {\n-        return getValue(ctx, state);\n-    }\n-\n-    public int length(Select sel, ExpContext ctx, ExpState state) {\n-        return 1;\n-    }\n-\n-    public void appendIsEmpty(Select sel, ExpContext ctx, ExpState state, \n-        SQLBuffer sql) {\n-        Object obj = getValue(ctx, state);\n-        if (obj instanceof Collection && ((Collection) obj).isEmpty())\n-            sql.append(TRUE);\n-        else if (obj instanceof Map && ((Map) obj).isEmpty())\n-            sql.append(TRUE);\n-        else\n-            sql.append(FALSE);\n-    }\n-\n-    public void appendIsNotEmpty(Select sel, ExpContext ctx, ExpState state, \n-        SQLBuffer sql){\n-        Object obj = getValue(ctx, state);\n-        if (obj instanceof Collection && ((Collection) obj).isEmpty())\n-            sql.append(FALSE);\n-        else if (obj instanceof Map && ((Map) obj).isEmpty())\n-            sql.append(FALSE);\n-        else\n-            sql.append(TRUE);\n-    }\n-\n-    public void appendSize(Select sel, ExpContext ctx, ExpState state, \n-        SQLBuffer sql) {\n-        Object obj = getValue(ctx, state);\n-        if (obj instanceof Collection)\n-            sql.appendValue(((Collection) obj).size());\n-        else if (obj instanceof Map)\n-            sql.appendValue(((Map) obj).size());\n-        else\n-            sql.append(\"1\");\n-    }\n-\n-    public void appendIsNull(Select sel, ExpContext ctx, ExpState state, \n-        SQLBuffer sql) {\n-        if (isSQLValueNull(sel, ctx, state))\n-            sql.append(TRUE);\n-        else\n-            sql.append(FALSE);\n-    }\n-\n-    public void appendIsNotNull(Select sel, ExpContext ctx, ExpState state, \n-        SQLBuffer sql) {\n-        if (!isSQLValueNull(sel, ctx, state))\n-            sql.append(TRUE);\n-        else\n-            sql.append(FALSE);\n-    }\n-}"},{"sha":"28b8d2152d27dab1b4b93399a045a462daefe79e","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ConstGetObjectId.java","status":"removed","additions":0,"deletions":109,"changes":109,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ConstGetObjectId.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ConstGetObjectId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ConstGetObjectId.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,109 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.kernel.exps;\n-\n-import org.apache.openjpa.jdbc.sql.SQLBuffer;\n-import org.apache.openjpa.jdbc.sql.Select;\n-import org.apache.openjpa.util.ImplHelper;\n-\n-/**\n- * Obtaining the object id of a constant.\n- *\n- * @author Abe White\n- */\n-class ConstGetObjectId\n-    extends Const {\n-\n-    private final Const _constant;\n-\n-    /**\n-     * Constructor. Supply constant to traverse.\n-     */\n-    public ConstGetObjectId(Const constant) {\n-        _constant = constant;\n-    }\n-\n-    public Class getType() {\n-        return Object.class;\n-    }\n-\n-    public void setImplicitType(Class type) {\n-    }\n-\n-    public Object getValue(Object[] params) {\n-        Object o = _constant.getValue(params);\n-        if (!(ImplHelper.isManageable(o)))\n-            return null;\n-        return (ImplHelper.toPersistenceCapable(o,\n-            this.getMetaData().getRepository().getConfiguration()))\n-            .pcFetchObjectId();\n-    }\n-\n-    public Object getValue(ExpContext ctx, ExpState state) {\n-        return ctx.store.getContext().getObjectId(_constant.getValue(ctx, \n-            ((ConstGetObjectIdExpState) state).constantState));\n-    }\n-\n-    public ExpState initialize(Select sel, ExpContext ctx, int flags) {\n-        return new ConstGetObjectIdExpState(_constant.initialize(sel, ctx, 0));\n-    }\n-\n-    public Object getSQLValue(Select sel, ExpContext ctx, ExpState state) {\n-        return ((ConstGetObjectIdExpState) state).sqlValue;\n-    }\n-\n-    public void calculateValue(Select sel, ExpContext ctx, ExpState state, \n-        Val other, ExpState otherState) {\n-        super.calculateValue(sel, ctx, state, other, otherState);\n-        ConstGetObjectIdExpState cstate = (ConstGetObjectIdExpState) state;\n-        _constant.calculateValue(sel, ctx, cstate.constantState, null, null);\n-        Object oid = ctx.store.getContext().getObjectId(_constant.getValue(ctx, \n-            cstate.constantState));\n-        if (other != null) {\n-            cstate.sqlValue = other.toDataStoreValue(sel, ctx, otherState, oid);\n-            cstate.otherLength = other.length(sel, ctx, otherState);\n-        } else\n-            cstate.sqlValue = oid;\n-    }\n-\n-    public void appendTo(Select sel, ExpContext ctx, ExpState state, \n-        SQLBuffer sql, int index) {\n-        ConstGetObjectIdExpState cstate = (ConstGetObjectIdExpState) state;\n-        if (cstate.otherLength > 1)\n-            sql.appendValue(((Object[]) cstate.sqlValue)[index], \n-                cstate.getColumn(index));\n-        else\n-            sql.appendValue(cstate.sqlValue, cstate.getColumn(index));\n-    }\n-\n-    /**\n-     * Expression state.\n-     */\n-    private static class ConstGetObjectIdExpState \n-        extends ConstExpState {\n-\n-        public final ExpState constantState;\n-        public Object sqlValue = null;\n-        public int otherLength = 0;\n-\n-        public ConstGetObjectIdExpState(ExpState constantState) {\n-            this.constantState = constantState;\n-        }\n-    }\n-}"},{"sha":"ca2a98045506306c34afec832f9bbffa175f3001","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ConstInstanceofExpression.java","status":"removed","additions":0,"deletions":70,"changes":70,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ConstInstanceofExpression.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ConstInstanceofExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ConstInstanceofExpression.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,70 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.kernel.exps;\n-\n-import java.util.Map;\n-\n-import org.apache.openjpa.jdbc.sql.SQLBuffer;\n-import org.apache.openjpa.jdbc.sql.Select;\n-import org.apache.openjpa.kernel.Filters;\n-import org.apache.openjpa.kernel.exps.ExpressionVisitor;\n-\n-/**\n- * Tests whether a value is an instance of a class.\n- *\n- * @author Abe White\n- */\n-class ConstInstanceofExpression\n-    implements Exp {\n-\n-    private final Const _const;\n-    private final Class _cls;\n-\n-    /**\n-     * Constructor. Supply the constant to test and the class.\n-     */\n-    public ConstInstanceofExpression(Const val, Class cls) {\n-        _const = val;\n-        _cls = Filters.wrap(cls);\n-    }\n-\n-    public ExpState initialize(Select sel, ExpContext ctx, Map contains) {\n-        return _const.initialize(sel, ctx, 0);\n-    }\n-\n-    public void appendTo(Select sel, ExpContext ctx, ExpState state, \n-        SQLBuffer buf) {\n-        _const.calculateValue(sel, ctx, state, null, null);\n-        if (_cls.isInstance(_const.getValue(ctx, state)))\n-            buf.append(\"1 = 1\");\n-        else\n-            buf.append(\"1 <> 1\");\n-    }\n-\n-    public void selectColumns(Select sel, ExpContext ctx, ExpState state, \n-        boolean pks) {\n-        _const.selectColumns(sel, ctx, state, pks);\n-    }\n-\n-    public void acceptVisit(ExpressionVisitor visitor) {\n-        visitor.enter(this);\n-        _const.acceptVisit(visitor);\n-        visitor.exit(this);\n-    }\n-}"},{"sha":"96049edd0b2facfe808002c52544c519196fb771","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ConstPath.java","status":"removed","additions":0,"deletions":220,"changes":220,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ConstPath.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ConstPath.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ConstPath.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,220 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.kernel.exps;\n-\n-import java.util.Iterator;\n-import java.util.LinkedList;\n-import java.util.ListIterator;\n-\n-import org.apache.openjpa.jdbc.sql.SQLBuffer;\n-import org.apache.openjpa.jdbc.sql.Select;\n-import org.apache.openjpa.kernel.Broker;\n-import org.apache.openjpa.kernel.Filters;\n-import org.apache.openjpa.kernel.OpenJPAStateManager;\n-import org.apache.openjpa.kernel.exps.ExpressionVisitor;\n-import org.apache.openjpa.meta.ClassMetaData;\n-import org.apache.openjpa.meta.FieldMetaData;\n-import org.apache.openjpa.meta.XMLMetaData;\n-import org.apache.openjpa.util.InternalException;\n-import org.apache.openjpa.util.ImplHelper;\n-\n-/**\n- * A field traversal starting with a constant filter parameter.\n- *\n- * @author Abe White\n- */\n-class ConstPath\n-    extends Const\n-    implements JDBCPath {\n-\n-    private final Const _constant;\n-    private final LinkedList _actions = new LinkedList();\n-\n-    /**\n-     * Constructor. Supply constant to traverse.\n-     */\n-    public ConstPath(Const constant) {\n-        _constant = constant;\n-    }\n-\n-    public Class getType() {\n-        if (_actions.isEmpty()) {\n-            ClassMetaData meta = getMetaData();\n-            if (meta == null)\n-                return Object.class;\n-            return meta.getDescribedType();\n-        }\n-\n-        Object last = _actions.getLast();\n-        if (last instanceof Class)\n-            return (Class) last;\n-        FieldMetaData fmd = (FieldMetaData) last;\n-        return fmd.getDeclaredType();\n-    }\n-\n-    public void setImplicitType(Class type) {\n-        _actions.add(type);\n-    }\n-\n-    public void get(FieldMetaData field, boolean nullTraversal) {\n-        _actions.add(field);\n-    }\n-\n-    public void getKey() {\n-    }\n-\n-    public FieldMetaData last() {\n-        ListIterator itr = _actions.listIterator(_actions.size());\n-        Object prev;\n-        while (itr.hasPrevious()) {\n-            prev = itr.previous();\n-            if (prev instanceof FieldMetaData)\n-                return (FieldMetaData) prev;\n-        }\n-        return null;\n-    }\n-\n-    public Object getValue(Object[] params) {\n-        throw new InternalException();\n-    }\n-\n-    public Object getValue(ExpContext ctx, ExpState state) {\n-        return ((ConstPathExpState) state).value;\n-    }\n-\n-    public Object getSQLValue(Select sel, ExpContext ctx, ExpState state) {\n-        return ((ConstPathExpState) state).sqlValue;\n-    }\n-\n-    public ExpState initialize(Select sel, ExpContext ctx, int flags) {\n-        return new ConstPathExpState(_constant.initialize(sel, ctx, 0));\n-    }\n-\n-    public void calculateValue(Select sel, ExpContext ctx, ExpState state, \n-        Val other, ExpState otherState) {\n-        super.calculateValue(sel, ctx, state, other, otherState);\n-        ConstPathExpState cstate = (ConstPathExpState) state;\n-        _constant.calculateValue(sel, ctx, cstate.constantState, null, null);\n-        cstate.value = _constant.getValue(ctx, cstate.constantState);\n-        boolean failed = false;\n-\n-        // copied from org.apache.openjpa.query.InMemoryPath\n-        Object action;\n-        OpenJPAStateManager sm;\n-        Broker tmpBroker = null;\n-        for (Iterator itr = _actions.iterator(); itr.hasNext();) {\n-            // fail on null value\n-            if (cstate.value == null) {\n-                failed = true;\n-                break;\n-            }\n-\n-            action = itr.next();\n-            if (action instanceof Class) {\n-                try {\n-                    cstate.value = Filters.convert(cstate.value,\n-                        (Class) action);\n-                    continue;\n-                } catch (ClassCastException cce) {\n-                    failed = true;\n-                    break;\n-                }\n-            }\n-\n-            // make sure we can access the instance; even non-pc vals might\n-            // be proxyable\n-            sm = null;\n-            tmpBroker = null;\n-            if (ImplHelper.isManageable(cstate.value))\n-                sm = (OpenJPAStateManager) (ImplHelper.toPersistenceCapable(\n-                    cstate.value,\n-                    this.getMetaData().getRepository().getConfiguration())).\n-                    pcGetStateManager();\n-            if (sm == null) {\n-                tmpBroker = ctx.store.getContext().getBroker();\n-                tmpBroker.transactional(cstate.value, false, null);\n-                sm = tmpBroker.getStateManager(cstate.value);\n-            }\n-\n-            try {\n-                // get the specified field value and switch candidate\n-                cstate.value = sm.fetchField(((FieldMetaData) action).\n-                    getIndex(), true);\n-            } finally {\n-                // setTransactional does not clear the state, which is\n-                // important since tmpVal might be also managed by\n-                // another broker if it's a proxied non-pc instance\n-                if (tmpBroker != null)\n-                    tmpBroker.nontransactional(sm.getManagedInstance(), null);\n-            }\n-        }\n-\n-        if (failed)\n-            cstate.value = null;\n-\n-        if (other != null) {\n-            cstate.sqlValue = other.toDataStoreValue(sel, ctx, otherState, \n-                cstate.value);\n-            cstate.otherLength = other.length(sel, ctx, otherState);\n-        } else\n-            cstate.sqlValue = cstate.value;\n-    }\n-\n-    public void appendTo(Select sel, ExpContext ctx, ExpState state, \n-        SQLBuffer sql, int index) {\n-        ConstPathExpState cstate = (ConstPathExpState) state;\n-        if (cstate.otherLength > 1)\n-            sql.appendValue(((Object[]) cstate.sqlValue)[index], \n-                cstate.getColumn(index));\n-        else\n-            sql.appendValue(cstate.sqlValue, cstate.getColumn(index));\n-    }\n-\n-    public void acceptVisit(ExpressionVisitor visitor) {\n-        visitor.enter(this);\n-        _constant.acceptVisit(visitor);\n-        visitor.exit(this);\n-    }\n-\n-    /**\n-     * Expression state.\n-     */\n-    private static class ConstPathExpState \n-        extends ConstExpState {\n-\n-        public final ExpState constantState;\n-        public Object value = null;\n-        public Object sqlValue = null;\n-        public int otherLength = 0;\n-\n-        public ConstPathExpState(ExpState constantState) {\n-            this.constantState = constantState;\n-        }\n-    }\n-    \n-    public void get(FieldMetaData fmd, XMLMetaData meta) {\n-    }\n-\n-    public void get(XMLMetaData meta, String name) {\n-    }\n-\n-    public XMLMetaData getXmlMapping() {\n-        return null;\n-    }\n-}"},{"sha":"ae82f183a08097530b24afea1c3bd9e754af2157","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ContainsExpression.java","status":"removed","additions":0,"deletions":63,"changes":63,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ContainsExpression.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ContainsExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ContainsExpression.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,63 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.kernel.exps;\n-\n-import java.util.Map;\n-\n-import org.apache.openjpa.jdbc.sql.Select;\n-import serp.util.Numbers;\n-\n-/**\n- * Tests whether one value contains another.\n- *\n- * @author Abe White\n- */\n-class ContainsExpression\n-    extends EqualExpression {\n-\n-    /**\n-     * Constructor. Supply values to test.\n-     */\n-    public ContainsExpression(Val val1, Val val2) {\n-        super(val1, val2);\n-    }\n-\n-    public ExpState initialize(Select sel, ExpContext ctx, Map contains) {\n-        Val val1 = getValue1();\n-        if (contains != null && val1 instanceof PCPath) {\n-            PCPath sql = (PCPath) val1;\n-            String path = sql.getPath();\n-\n-            // update the count for this path\n-            Integer count = (Integer) contains.get(path);\n-            if (count == null)\n-                count = Numbers.valueOf(0);\n-            else\n-                count = Numbers.valueOf(count.intValue() + 1);\n-            contains.put(path, count);\n-\n-            sql.setContainsId(count.toString());\n-        }\n-        return super.initialize(sel, ctx, contains);\n-    }\n-\n-    protected boolean isDirectComparison() {\n-        return false;\n-    }\n-}"},{"sha":"78f70443bceac9697f9ffff6d11b12ddd176f0cf","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ContainsKeyExpression.java","status":"removed","additions":0,"deletions":46,"changes":46,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ContainsKeyExpression.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ContainsKeyExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ContainsKeyExpression.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,46 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.kernel.exps;\n-\n-import java.util.Map;\n-\n-import org.apache.openjpa.jdbc.sql.Select;\n-\n-/**\n- * Tests whether a map value contains a key.\n- *\n- * @author Abe White\n- */\n-class ContainsKeyExpression\n-    extends ContainsExpression {\n-\n-    /**\n-     * Constructor. Supply values to test.\n-     */\n-    public ContainsKeyExpression(Val val1, Val val2) {\n-        super(val1, val2);\n-    }\n-\n-    public ExpState initialize(Select sel, ExpContext ctx, Map contains) {\n-        Val val1 = getValue1();\n-        if (val1 instanceof PCPath)\n-            ((PCPath) val1).getKey();\n-        return super.initialize(sel, ctx, contains);\n-    }\n-}"},{"sha":"0286bc37d126829365c7e6ecbf1f953defcd82e2","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Count.java","status":"removed","additions":0,"deletions":55,"changes":55,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Count.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Count.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Count.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,55 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.kernel.exps;\n-\n-import org.apache.openjpa.jdbc.sql.Select;\n-\n-/**\n- * Count non-null values.\n- *\n- * @author Abe White\n- */\n-class Count\n-    extends UnaryOp {\n-\n-    /**\n-     * Constructor. Provide the value to operate on.\n-     */\n-    public Count(Val val) {\n-        super(val);\n-    }\n-\n-    public ExpState initialize(Select sel, ExpContext ctx, int flags) {\n-        // join into related object if present\n-        return initializeValue(sel, ctx, JOIN_REL);\n-    }\n-\n-    protected Class getType(Class c) {\n-        return long.class;\n-    }\n-\n-    protected String getOperator() {\n-        return \"COUNT\";\n-    }\n-\n-    public boolean isAggregate() {\n-        return true;\n-    }\n-}\n-"},{"sha":"e53c8a2ba106d43537486379a8fdb7bfda919de0","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/CurrentDate.java","status":"removed","additions":0,"deletions":70,"changes":70,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/CurrentDate.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/CurrentDate.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/CurrentDate.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,70 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.kernel.exps;\n-\n-import java.util.Date;\n-\n-import org.apache.openjpa.jdbc.meta.JavaSQLTypes;\n-import org.apache.openjpa.jdbc.sql.SQLBuffer;\n-import org.apache.openjpa.jdbc.sql.Select;\n-import org.apache.openjpa.util.InternalException;\n-\n-/**\n- * A literal current DATE/TIME/TIMESTAMP value in a filter.\n- *\n- * @author Marc Prud'hommeaux\n- */\n-class CurrentDate\n-    extends Const {\n-\n-    private final int _type;\n-\n-    public CurrentDate(int type) {\n-        _type = type;\n-    }\n-\n-    public Class getType() {\n-        return Date.class;\n-    }\n-\n-    public void setImplicitType(Class type) {\n-    }\n-\n-    public Object getValue(Object[] params) {\n-        return new Date();\n-    }\n-\n-    public void appendTo(Select sel, ExpContext ctx, ExpState state, \n-        SQLBuffer sql, int index) {\n-        switch (_type) {\n-            case JavaSQLTypes.DATE:\n-                sql.append(ctx.store.getDBDictionary().currentDateFunction);\n-                break;\n-            case JavaSQLTypes.TIME:\n-                sql.append(ctx.store.getDBDictionary().currentTimeFunction);\n-                break;\n-            case JavaSQLTypes.TIMESTAMP:\n-                sql.append(ctx.store.getDBDictionary().\n-                    currentTimestampFunction);\n-                break;\n-            default:\n-                throw new InternalException();\n-        }\n-    }\n-}"},{"sha":"36f4ec7123c7cbb9002c0ba9ddec566a6a848dcd","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Distinct.java","status":"removed","additions":0,"deletions":44,"changes":44,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Distinct.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Distinct.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Distinct.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,44 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.kernel.exps;\n-\n-import org.apache.openjpa.jdbc.sql.SQLBuffer;\n-import org.apache.openjpa.jdbc.sql.Select;\n-\n-/**\n- * Distinct the specified path.\n- *\n- * @author Marc Prud'hommeaux\n- */\n-class Distinct\n-    extends UnaryOp {\n-\n-    public Distinct(Val val) {\n-        super(val, true);\n-    }\n-\n-    public ExpState initialize(Select sel, ExpContext ctx, int flags) {\n-        // join into related object if present\n-        return initializeValue(sel, ctx, JOIN_REL);\n-    }\n-\n-    protected String getOperator() {\n-        return \"DISTINCT\";\n-    }\n-}"},{"sha":"505cf6ee3f6a861897fce3d2fc7a7ac2aa3c0d26","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/EmptyExpression.java","status":"removed","additions":0,"deletions":51,"changes":51,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/EmptyExpression.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/EmptyExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/EmptyExpression.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,51 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.kernel.exps;\n-\n-import java.util.Map;\n-\n-import org.apache.openjpa.jdbc.sql.SQLBuffer;\n-import org.apache.openjpa.jdbc.sql.Select;\n-import org.apache.openjpa.kernel.exps.ExpressionVisitor;\n-\n-/**\n- * An empty expression.\n- *\n- * @author Abe White\n- */\n-class EmptyExpression\n-    implements Exp {\n-\n-    public ExpState initialize(Select sel, ExpContext ctx, Map contains) {\n-        return ExpState.NULL;\n-    }\n-\n-    public void appendTo(Select sel, ExpContext ctx, ExpState state, \n-        SQLBuffer buf) {\n-    }\n-\n-    public void selectColumns(Select sel, ExpContext ctx, ExpState state, \n-        boolean pks) {\n-    }\n-\n-    public void acceptVisit(ExpressionVisitor visitor) {\n-        visitor.enter(this);\n-        visitor.exit(this);\n-    }\n-}"},{"sha":"74d766a85ae78bfa171d7dadf8d795aa0fac9934","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/EndsWithExpression.java","status":"removed","additions":0,"deletions":207,"changes":207,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/EndsWithExpression.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/EndsWithExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/EndsWithExpression.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,207 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.kernel.exps;\n-\n-import java.util.Map;\n-\n-import org.apache.openjpa.jdbc.meta.ClassMapping;\n-import org.apache.openjpa.jdbc.meta.FieldMapping;\n-import org.apache.openjpa.jdbc.schema.Column;\n-import org.apache.openjpa.jdbc.schema.Table;\n-import org.apache.openjpa.jdbc.sql.DBDictionary;\n-import org.apache.openjpa.jdbc.sql.SQLBuffer;\n-import org.apache.openjpa.jdbc.sql.Select;\n-import org.apache.openjpa.kernel.exps.ExpressionVisitor;\n-import org.apache.openjpa.meta.XMLMetaData;\n-\n-/**\n- * Test if one string ends with another.\n- *\n- * @author Abe White\n- */\n-class EndsWithExpression\n-    implements Exp {\n-\n-    private final Val _val1;\n-    private final Val _val2;\n-\n-    /**\n-     * Constructor. Supply values.\n-     */\n-    public EndsWithExpression(Val val1, Val val2) {\n-        _val1 = val1;\n-        _val2 = val2;\n-    }\n-\n-    public ExpState initialize(Select sel, ExpContext ctx, Map contains) {\n-        ExpState s1 = _val1.initialize(sel, ctx, 0);\n-        ExpState s2 = _val2.initialize(sel, ctx, 0);\n-        return new BinaryOpExpState(sel.and(s1.joins, s2.joins), s1, s2);\n-    }\n-\n-    public void appendTo(Select sel, ExpContext ctx, ExpState state, \n-        SQLBuffer buf) {\n-        BinaryOpExpState bstate = (BinaryOpExpState) state;\n-        _val1.calculateValue(sel, ctx, bstate.state1, _val2, bstate.state2);\n-        _val2.calculateValue(sel, ctx, bstate.state2, _val1, bstate.state1);\n-\n-        DBDictionary dict = ctx.store.getDBDictionary();\n-        String func = dict.stringLengthFunction;\n-        String pre = null;\n-        String post = null;\n-        if (func != null) {\n-            int idx = func.indexOf(\"{0}\");\n-            pre = func.substring(0, idx);\n-            post = func.substring(idx + 3);\n-        }\n-\n-        if (_val1 instanceof Const && ((Const) _val1).getValue(ctx, \n-            bstate.state1) == null)\n-            buf.append(\"1 <> 1\");\n-        else if (_val2 instanceof Const) {\n-            Object o = ((Const) _val2).getValue(ctx, bstate.state2);\n-            if (o == null)\n-                buf.append(\"1 <> 1\");\n-            else {\n-                Column col = null;\n-                if (_val1 instanceof PCPath) {\n-                    Column[] cols = ((PCPath) _val1).getColumns(bstate.state1);\n-                    if (cols.length == 1)\n-                        col = cols[0];\n-                }\n-\n-                _val1.appendTo(sel, ctx, bstate.state1, buf, 0);\n-                buf.append(\" LIKE \");\n-                buf.appendValue(\"%\" + o.toString(), col);\n-            }\n-        } else {\n-            // if we can't use LIKE, we have to take the substring of the\n-            // first value and compare it to the second\n-            dict.assertSupport(pre != null, \"StringLengthFunction\");\n-            dict.substring(buf, \n-                new FilterValueImpl(sel, ctx, bstate.state1, _val1),\n-                new StringLengthDifferenceFilterValue(sel, ctx, bstate, pre, \n-                    post), null);\n-            buf.append(\" = \");\n-            _val2.appendTo(sel, ctx, bstate.state2, buf, 0);\n-        }\n-\n-        sel.append(buf, state.joins);\n-    }\n-\n-    public void selectColumns(Select sel, ExpContext ctx, ExpState state, \n-        boolean pks) {\n-        BinaryOpExpState bstate = (BinaryOpExpState) state;\n-        _val1.selectColumns(sel, ctx, bstate.state1, true);\n-        _val2.selectColumns(sel, ctx, bstate.state2, true);\n-    }\n-\n-    public void acceptVisit(ExpressionVisitor visitor) {\n-        visitor.enter(this);\n-        _val1.acceptVisit(visitor);\n-        _val2.acceptVisit(visitor);\n-        visitor.exit(this);\n-    }\n-\n-    /**\n-     * Evaluates to the length of a given value.\n-     */\n-    private class StringLengthDifferenceFilterValue\n-        implements FilterValue {\n-\n-        private final Select _sel;\n-        private final ExpContext _ctx;\n-        private final BinaryOpExpState _state;\n-        private final String _pre;\n-        private final String _post;\n-\n-        public StringLengthDifferenceFilterValue(Select sel, ExpContext ctx, \n-            BinaryOpExpState state, String pre, String post) {\n-            _sel = sel;\n-            _ctx = ctx;\n-            _state = state;\n-            _pre = pre;\n-            _post = post;\n-        }\n-\n-        public Class getType() {\n-            return int.class;\n-        }\n-\n-        public int length() {\n-            return 1;\n-        }\n-\n-        public void appendTo(SQLBuffer buf) {\n-            appendTo(buf, 0);\n-        }\n-\n-        public void appendTo(SQLBuffer buf, int index) {\n-            buf.append(_pre);\n-            _val1.appendTo(_sel, _ctx, _state.state1, buf, index);\n-            buf.append(_post).append(\" - \").append(_pre);\n-            _val2.appendTo(_sel, _ctx, _state.state2, buf, index);\n-            buf.append(_post);\n-        }\n-\n-        public String getColumnAlias(Column col) {\n-            return _sel.getColumnAlias(col, _state.joins);\n-        }\n-\n-        public String getColumnAlias(String col, Table table) {\n-            return _sel.getColumnAlias(col, table, _state.joins);\n-        }\n-\n-        public Object toDataStoreValue(Object val) {\n-            return val;\n-        }\n-\n-        public boolean isConstant() {\n-            return false;\n-        }\n-\n-        public Object getValue() {\n-            return null;\n-        }\n-\n-        public Object getSQLValue() {\n-            return null;\n-        }\n-\n-        public boolean isPath() {\n-            return false;\n-        }\n-\n-        public ClassMapping getClassMapping() {\n-            return null;\n-        }\n-\n-        public FieldMapping getFieldMapping() {\n-            return null;\n-        }\n-        \n-        public PCPath getXPath() {\n-            return null;\n-        }\n-        \n-        public XMLMetaData getXmlMapping() {\n-            return null;\n-        }\n-    }\n-}"},{"sha":"28db9446fcdb342f16eb74330caeb9434cd9ad3a","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/EqualExpression.java","status":"removed","additions":0,"deletions":78,"changes":78,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/EqualExpression.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/EqualExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/EqualExpression.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,78 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.kernel.exps;\n-\n-import org.apache.openjpa.jdbc.sql.SQLBuffer;\n-import org.apache.openjpa.jdbc.sql.Select;\n-\n-/**\n- * Compares two values.\n- *\n- * @author Abe White\n- */\n-class EqualExpression\n-    extends CompareEqualExpression {\n-\n-    /**\n-     * Constructor. Supply values to compare.\n-     */\n-    public EqualExpression(Val val1, Val val2) {\n-        super(val1, val2);\n-    }\n-\n-    public void appendTo(Select sel, ExpContext ctx, BinaryOpExpState bstate, \n-        SQLBuffer buf, boolean val1Null, boolean val2Null) {\n-        if (val1Null && val2Null)\n-            buf.append(\"1 = 1\");\n-        else if (val1Null || val2Null) {\n-            Val val = (val1Null) ? getValue2() : getValue1();\n-            ExpState state = (val1Null) ? bstate.state2 : bstate.state1;\n-            if (!isDirectComparison()) {\n-                int len = val.length(sel, ctx, state);\n-                for (int i = 0; i < len; i++) {\n-                    if (i > 0)\n-                        buf.append(\" AND \");\n-                    val.appendTo(sel, ctx, state, buf, i);\n-                    buf.append(\" IS \").appendValue(null);\n-                }\n-            } else\n-                val.appendIsNull(sel, ctx, state, buf);\n-        } else {\n-            Val val1 = getValue1();\n-            Val val2 = getValue2();\n-            if (val1.length(sel, ctx, bstate.state1) == 1 \n-                && val2.length(sel, ctx, bstate.state2) == 1) {\n-                ctx.store.getDBDictionary().comparison(buf, \"=\",\n-                    new FilterValueImpl(sel, ctx, bstate.state1, val1),\n-                    new FilterValueImpl(sel, ctx, bstate.state2, val2));\n-            } else {\n-                int len = java.lang.Math.max(val1.length(sel, ctx, \n-                    bstate.state1), val2.length(sel, ctx, bstate.state2));\n-                for (int i = 0; i < len; i++) {\n-                    if (i > 0)\n-                        buf.append(\" AND \");\n-\n-                    val1.appendTo(sel, ctx, bstate.state1, buf, i);\n-                    buf.append(\" = \");\n-                    val2.appendTo(sel, ctx, bstate.state2, buf, i);\n-                }\n-            }\n-        }\n-    }\n-}"},{"sha":"add1fb7a2a98fd8ce2f208de518dca2d6055581e","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Exp.java","status":"removed","additions":0,"deletions":59,"changes":59,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Exp.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Exp.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Exp.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,59 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.kernel.exps;\n-\n-import java.util.Map;\n-\n-import org.apache.openjpa.jdbc.sql.SQLBuffer;\n-import org.apache.openjpa.jdbc.sql.Select;\n-import org.apache.openjpa.kernel.exps.Expression;\n-\n-/**\n- * An Expression represents a query ready for execution. Generally, it is\n- * a set of conditions that must be met for the query to be true.\n- *\n- * @author Abe White\n- */\n-interface Exp\n-    extends Expression {\n-\n-    /**\n-     * Initialize the expression. This method should recursively\n-     * initialize any sub-expressions or values.\n-     *\n-     * @param contains map of relation paths to the number of times\n-     * the paths appear in a contains() expression;\n-     * used to ensure paths used for contains() within\n-     * the same AND expression used different aliases\n-     */\n-    public ExpState initialize(Select sel, ExpContext ctx, Map contains);\n-\n-    /**\n-     * Append the SQL for this expression to the given buffer. The SQL\n-     * should optionally include any joins this expression needs.\n-     */\n-    public void appendTo(Select sel, ExpContext ctx, ExpState state, \n-        SQLBuffer buf);\n-\n-    /**\n-     * Select just the columns for this expression.\n-     */\n-    public void selectColumns(Select sel, ExpContext ctx, ExpState state, \n-        boolean pks);\n-}"},{"sha":"f59e172214ada7ee72fb245d38c7b5e8efe4ea87","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ExpContext.java","status":"removed","additions":0,"deletions":56,"changes":56,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ExpContext.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ExpContext.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ExpContext.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,56 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.kernel.exps;\n-\n-import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n-import org.apache.openjpa.jdbc.kernel.JDBCStore;\n-\n-/**\n- * Expression tree context.\n- * \n- * @author Abe White\n- * @nojavadoc\n- */\n-public class ExpContext {\n-\n-    /**\n-     * Store.\n-     */\n-    public JDBCStore store;\n-\n-    /**\n-     * Parameters to query.\n-     */\n-    public Object[] params;\n-\n-    /**\n-     * Fetch configuration.\n-     */\n-    public JDBCFetchConfiguration fetch; \n-\n-    public ExpContext() {\n-    }\n-\n-    public ExpContext(JDBCStore store, Object[] params, \n-        JDBCFetchConfiguration fetch) {\n-        this.store = store;\n-        this.params = params;\n-        this.fetch = fetch;\n-    }\n-}"},{"sha":"5a0a99fd48d1095990a22ce9d2aab33947c27682","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ExpState.java","status":"removed","additions":0,"deletions":44,"changes":44,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ExpState.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ExpState.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ExpState.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,44 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.kernel.exps;\n-\n-import org.apache.openjpa.jdbc.sql.Joins;\n-\n-/**\n- * Expression tree state.\n- * \n- * @author Abe White\n- * @nojavadoc\n- */\n-public class ExpState {\n-\n-    /**\n-     * State with no joins.\n-     */\n-    public static final ExpState NULL = new ExpState();\n-\n-    public Joins joins;\n-\n-    public ExpState() {\n-    }\n-\n-    public ExpState(Joins joins) {\n-        this.joins = joins;\n-    }\n-}"},{"sha":"6683be36abccea1cd3365c99b367133cd1d36bd8","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Extension.java","status":"removed","additions":0,"deletions":224,"changes":224,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Extension.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Extension.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Extension.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,224 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.kernel.exps;\n-\n-import java.sql.SQLException;\n-import java.util.Map;\n-\n-import org.apache.openjpa.jdbc.meta.ClassMapping;\n-import org.apache.openjpa.jdbc.meta.JavaSQLTypes;\n-import org.apache.openjpa.jdbc.sql.Joins;\n-import org.apache.openjpa.jdbc.sql.Result;\n-import org.apache.openjpa.jdbc.sql.SQLBuffer;\n-import org.apache.openjpa.jdbc.sql.Select;\n-import org.apache.openjpa.kernel.Filters;\n-import org.apache.openjpa.kernel.exps.ExpressionVisitor;\n-import org.apache.openjpa.meta.ClassMetaData;\n-\n-/**\n- * Filter listener that evaluates to a value.\n- *\n- * @author Abe White\n- */\n-class Extension\n-    extends AbstractVal\n-    implements Val, Exp {\n-\n-    private final JDBCFilterListener _listener;\n-    private final Val _target;\n-    private final Val _arg;\n-    private final ClassMapping _candidate;\n-    private ClassMetaData _meta = null;\n-    private Class _cast = null;\n-\n-    /**\n-     * Constructor.\n-     */\n-    public Extension(JDBCFilterListener listener, Val target,\n-        Val arg, ClassMapping candidate) {\n-        _listener = listener;\n-        _target = target;\n-        _arg = arg;\n-        _candidate = candidate;\n-    }\n-\n-    public ClassMetaData getMetaData() {\n-        return _meta;\n-    }\n-\n-    public void setMetaData(ClassMetaData meta) {\n-        _meta = meta;\n-    }\n-\n-    public boolean isVariable() {\n-        return false;\n-    }\n-\n-    public boolean isAggregate() {\n-        return false;\n-    }\n-\n-    public Class getType() {\n-        if (_cast != null)\n-            return _cast;\n-        Class targetClass = (_target == null) ? null : _target.getType();\n-        return _listener.getType(targetClass, getArgTypes());\n-    }\n-\n-    private Class[] getArgTypes() {\n-        if (_arg == null)\n-            return null;\n-        if (_arg instanceof Args)\n-            return ((Args) _arg).getTypes();\n-        return new Class[]{ _arg.getType() };\n-    }\n-\n-    public void setImplicitType(Class type) {\n-        _cast = type;\n-    }\n-\n-    public ExpState initialize(Select sel, ExpContext ctx, int flags) {\n-        // note that we tell targets and args to extensions that are sql\n-        // paths to go ahead and join to their related object (if any),\n-        // because we assume that, unlike most operations, if a relation\n-        // field like a 1-1 is given as the target of an extension, then\n-        // the extension probably acts on some field or column in the\n-        // related object, not the 1-1 field itself\n-        ExpState targetState = null;\n-        ExpState argState = null;\n-        if (_target != null)\n-            targetState = _target.initialize(sel, ctx, JOIN_REL);\n-        if (_arg != null)\n-            argState = _arg.initialize(sel, ctx, JOIN_REL);\n-        Joins j1 = (targetState == null) ? null : targetState.joins;\n-        Joins j2 = (argState == null) ? null : argState.joins;\n-        return new ExtensionExpState(sel.and(j1, j2), targetState, \n-            argState);\n-    }\n-\n-    /**\n-     * Expression state.\n-     */\n-    private static class ExtensionExpState\n-        extends ExpState {\n-\n-        public final ExpState targetState;\n-        public final ExpState argState;\n-\n-        public ExtensionExpState(Joins joins, ExpState targetState,\n-            ExpState argState) {\n-            super(joins);\n-            this.targetState = targetState;\n-            this.argState = argState;\n-        }\n-    }\n-\n-    public void select(Select sel, ExpContext ctx, ExpState state, \n-        boolean pks) {\n-        sel.select(newSQLBuffer(sel, ctx, state), this);\n-    }\n-\n-    public void selectColumns(Select sel, ExpContext ctx, ExpState state, \n-        boolean pks) {\n-        ExtensionExpState estate = (ExtensionExpState) state;\n-        if (_target != null)\n-            _target.selectColumns(sel, ctx, estate.targetState, true);\n-        if (_arg != null)\n-            _arg.selectColumns(sel, ctx, estate.argState, true);\n-    }\n-\n-    public void groupBy(Select sel, ExpContext ctx, ExpState state) {\n-        sel.groupBy(newSQLBuffer(sel, ctx, state));\n-    }\n-\n-    public void orderBy(Select sel, ExpContext ctx, ExpState state, \n-        boolean asc) {\n-        sel.orderBy(newSQLBuffer(sel, ctx, state), asc, false);\n-    }\n-\n-    private SQLBuffer newSQLBuffer(Select sel, ExpContext ctx, ExpState state) {\n-        calculateValue(sel, ctx, state, null, null);\n-        SQLBuffer buf = new SQLBuffer(ctx.store.getDBDictionary());\n-        appendTo(sel, ctx, state, buf, 0);\n-        return buf;\n-    }\n-\n-    public Object load(ExpContext ctx, ExpState state, Result res) \n-        throws SQLException {\n-        return Filters.convert(res.getObject(this,\n-            JavaSQLTypes.JDBC_DEFAULT, null), getType());\n-    }\n-\n-    public void calculateValue(Select sel, ExpContext ctx, ExpState state, \n-        Val other, ExpState otherState) {\n-        ExtensionExpState estate = (ExtensionExpState) state;\n-        if (_target != null)\n-            _target.calculateValue(sel, ctx, estate.targetState, null, null);\n-        if (_arg != null)\n-            _arg.calculateValue(sel, ctx, estate.argState, null, null);\n-    }\n-\n-    public int length(Select sel, ExpContext ctx, ExpState state) {\n-        return 1;\n-    }\n-\n-    public void appendTo(Select sel, ExpContext ctx, ExpState state, \n-        SQLBuffer sql, int index) {\n-        ExtensionExpState estate = (ExtensionExpState) state;\n-        FilterValue target = (_target == null) ? null\n-            : new FilterValueImpl(sel, ctx, estate.targetState, _target);\n-        _listener.appendTo(sql, target, getArgs(sel, ctx, estate.argState),\n-            _candidate, ctx.store);\n-        sel.append(sql, state.joins);\n-    }\n-\n-    private FilterValue[] getArgs(Select sel, ExpContext ctx, ExpState state) {\n-        if (_arg == null)\n-            return null;\n-        if (_arg instanceof Args)\n-            return ((Args) _arg).newFilterValues(sel, ctx, state);\n-        return new FilterValue[] {\n-            new FilterValueImpl(sel, ctx, state, _arg)\n-        };\n-    }\n-\n-    public void acceptVisit(ExpressionVisitor visitor) {\n-        visitor.enter((Exp) this);\n-        if (_target != null)\n-            _target.acceptVisit(visitor);\n-        if (_arg != null)\n-            _arg.acceptVisit(visitor);\n-        visitor.exit((Exp) this);\n-    }\n-\n-    //////////////////////\n-    // Exp implementation\n-    //////////////////////\n-\n-    public ExpState initialize(Select sel, ExpContext ctx, Map contains) {\n-        return initialize(sel, ctx, 0);\n-    }\n-\n-    public void appendTo(Select sel, ExpContext ctx, ExpState state, \n-        SQLBuffer sql) {\n-        calculateValue(sel, ctx, state, null, null);\n-        appendTo(sel, ctx, state, sql, 0);\n-        sel.append(sql, state.joins);\n-    }\n-}"},{"sha":"a2a63f4d7956c8b80f0e7da2cffb899ea3b198ca","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/FilterValue.java","status":"removed","additions":0,"deletions":119,"changes":119,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/FilterValue.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/FilterValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/FilterValue.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,119 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.kernel.exps;\n-\n-import org.apache.openjpa.jdbc.meta.ClassMapping;\n-import org.apache.openjpa.jdbc.meta.FieldMapping;\n-import org.apache.openjpa.jdbc.schema.Column;\n-import org.apache.openjpa.jdbc.schema.Table;\n-import org.apache.openjpa.jdbc.sql.SQLBuffer;\n-import org.apache.openjpa.meta.XMLMetaData;\n-\n-/**\n- * The simplified public view of any non-operator in a query filter,\n- * including constants, variables, and object fields.\n- *\n- * @author Abe White\n- */\n-public interface FilterValue {\n-\n-    /**\n-     * Return the expected type of this value.\n-     */\n-    public Class getType();\n-\n-    /**\n-     * Return the number of SQL elements in this value. Usually 1.\n-     */\n-    public int length();\n-\n-    /**\n-     * Append the first SQL element for this value to the given buffer.\n-     */\n-    public void appendTo(SQLBuffer buf);\n-\n-    /**\n-     * Append the <code>index</code>th SQL element for this value to the\n-     * given buffer.\n-     */\n-    public void appendTo(SQLBuffer buf, int index);\n-\n-    /**\n-     * Return the alias to use for the given column (this includes the table\n-     * alias prefix, if any).\n-     */\n-    public String getColumnAlias(Column col);\n-\n-    /**\n-     * Return the alias to use for the given column (this includes the table\n-     * alias prefix, if any).\n-     */\n-    public String getColumnAlias(String col, Table table);\n-\n-    /**\n-     * Transform the given value into its datastore equivalent.\n-     */\n-    public Object toDataStoreValue(Object val);\n-\n-    /**\n-     * Return true if this value represents a literal or parameter.\n-     */\n-    public boolean isConstant();\n-\n-    /**\n-     * If this is a constant, return its value, else return null.\n-     */\n-    public Object getValue();\n-\n-    /**\n-     * If this is a constant, returns its value as it would be represented\n-     * in the database in this context, else return null.\n-     */\n-    public Object getSQLValue();\n-\n-    /**\n-     * Return true if this value represents a persistent field traversal,\n-     * such as 'this', 'address.street', or 'projectVariable.title'.\n-     */\n-    public boolean isPath();\n-\n-    /**\n-     * If this is a path to a persistent object, return its class mapping,\n-     * else return null.\n-     */\n-    public ClassMapping getClassMapping();\n-\n-    /**\n-     * If this is a path to a persistent field, return its mapping, else\n-     * return null.\n-     */\n-    public FieldMapping getFieldMapping();\n-    \n-    /**\n-     * If this is an XPath, return it,\n-     * else return null;\n-     */\n-    public PCPath getXPath();\n-    \n-    /**\n-     * If this is an XPath, return XML mapping metadata,\n-     * else return null;\n-     */\n-    public XMLMetaData getXmlMapping();\n-}"},{"sha":"bfa10db61f0f7dcfc7a39232a695148a8b112cd4","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/FilterValueImpl.java","status":"removed","additions":0,"deletions":113,"changes":113,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/FilterValueImpl.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/FilterValueImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/FilterValueImpl.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,113 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.kernel.exps;\n-\n-import org.apache.openjpa.jdbc.meta.ClassMapping;\n-import org.apache.openjpa.jdbc.meta.FieldMapping;\n-import org.apache.openjpa.jdbc.schema.Column;\n-import org.apache.openjpa.jdbc.schema.Table;\n-import org.apache.openjpa.jdbc.sql.SQLBuffer;\n-import org.apache.openjpa.jdbc.sql.Select;\n-import org.apache.openjpa.meta.XMLMetaData;\n-\n-/**\n- * Implementation of {@link FilterValue} that wraps a {@link Val}.\n- *\n- * @author Abe White\n- */\n-class FilterValueImpl\n-    implements FilterValue {\n-\n-    private final Select _sel;\n-    private final ExpContext _ctx;\n-    private final ExpState _state;\n-    private final Val _val;\n-\n-    public FilterValueImpl(Select sel, ExpContext ctx, ExpState state, \n-        Val val) {\n-        _sel = sel;\n-        _ctx = ctx;\n-        _state = state;\n-        _val = val;\n-    }\n-\n-    public Class getType() {\n-        return _val.getType();\n-    }\n-\n-    public int length() {\n-        return _val.length(_sel, _ctx, _state);\n-    }\n-\n-    public void appendTo(SQLBuffer buf) {\n-        appendTo(buf, 0);\n-    }\n-\n-    public void appendTo(SQLBuffer buf, int index) {\n-        _val.appendTo(_sel, _ctx, _state, buf, index);\n-    }\n-\n-    public String getColumnAlias(Column col) {\n-        return _sel.getColumnAlias(col, _state.joins);\n-    }\n-\n-    public String getColumnAlias(String col, Table table) {\n-        return _sel.getColumnAlias(col, table, _state.joins);\n-    }\n-\n-    public Object toDataStoreValue(Object val) {\n-        return _val.toDataStoreValue(_sel, _ctx, _state, val);\n-    }\n-\n-    public boolean isConstant() {\n-        return _val instanceof Const;\n-    }\n-\n-    public Object getValue() {\n-        return (isConstant()) ? ((Const) _val).getValue(_ctx.params) : null;\n-    }\n-\n-    public Object getSQLValue() {\n-        return (isConstant()) ? ((Const) _val).getSQLValue(_sel, _ctx, _state) \n-            : null;\n-    }\n-\n-    public boolean isPath() {\n-        return _val instanceof PCPath;\n-    }\n-\n-    public ClassMapping getClassMapping() {\n-        return (isPath()) ? ((PCPath) _val).getClassMapping(_state) : null;\n-    }\n-\n-    public FieldMapping getFieldMapping() {\n-        return (isPath()) ? ((PCPath) _val).getFieldMapping(_state) : null;\n-    }\n-    \n-    public PCPath getXPath() {\n-        if (isPath() && ((PCPath) _val).isXPath())\n-            return (PCPath) _val;\n-        else\n-            return null;\n-    }\n-    \n-    public XMLMetaData getXmlMapping() {\n-        return (getXPath() == null) ? null : getXPath().getXmlMapping();\n-    }\n-}"},{"sha":"64d26732b84b44fc6037a197357dbf53a37fb5ee","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/GetColumn.java","status":"removed","additions":0,"deletions":83,"changes":83,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/GetColumn.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/GetColumn.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/GetColumn.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,83 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.kernel.exps;\n-\n-import org.apache.openjpa.jdbc.kernel.JDBCStore;\n-import org.apache.openjpa.jdbc.meta.ClassMapping;\n-import org.apache.openjpa.jdbc.sql.SQLBuffer;\n-import org.apache.openjpa.kernel.StoreContext;\n-import org.apache.openjpa.lib.util.Localizer;\n-import org.apache.openjpa.util.UnsupportedException;\n-import org.apache.openjpa.util.UserException;\n-\n-/**\n- * Returns the SQL alias of the named column for use in a query. Note that\n- * to retrieve columns in the table of the candidate object, you must\n- * explicitly qualify the extension with <code>this</code>, as demonstrated\n- * in the second example below.\n- *  Examples:<br />\n- * <code> \"company.address.ext:getColumn (\\\"ID\\\") == 5\"<br />\n- * \"this.ext:getColumn (\\\"CLS\\\") == \\\"org.apache.openjpa.example.Person\\\"\"\n- * </code>\n- *\n- * @nojavadoc\n- */\n-public class GetColumn\n-    implements JDBCFilterListener {\n-\n-    public static final String TAG = \"getColumn\";\n-\n-    private static final Localizer _loc = Localizer.forPackage\n-        (GetColumn.class);\n-\n-    public String getTag() {\n-        return TAG;\n-    }\n-\n-    public boolean expectsArguments() {\n-        return true;\n-    }\n-\n-    public boolean expectsTarget() {\n-        return true;\n-    }\n-\n-    public Object evaluate(Object target, Class targetClass, Object[] args,\n-        Class[] argClasses, Object candidate, StoreContext ctx) {\n-        throw new UnsupportedException(_loc.get(\"no-in-mem\", TAG));\n-    }\n-\n-    public void appendTo(SQLBuffer buf, FilterValue target,\n-        FilterValue[] args, ClassMapping type, JDBCStore store) {\n-        if (!args[0].isConstant())\n-            throw new UserException(_loc.get(\"const-only\", TAG));\n-        if (!target.isPath())\n-            throw new UserException(_loc.get(\"path-only\", TAG));\n-\n-        // alias the column using the target's context, so that the\n-        // correct relation path to the target is used\n-        ClassMapping mapping = target.getClassMapping();\n-        String colName = args[0].getValue().toString();\n-        buf.append(target.getColumnAlias(colName, mapping.getTable()));\n-    }\n-\n-    public Class getType(Class targetClass, Class[] argClasses) {\n-        return Object.class;\n-    }\n-}"},{"sha":"a47794298025826ae84f2f42e893488aa257d9bc","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/GetMapValue.java","status":"removed","additions":0,"deletions":213,"changes":213,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/GetMapValue.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/GetMapValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/GetMapValue.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -1,213 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.kernel.exps;\n-\n-import java.sql.SQLException;\n-\n-import org.apache.openjpa.jdbc.meta.ClassMapping;\n-import org.apache.openjpa.jdbc.meta.FieldMapping;\n-import org.apache.openjpa.jdbc.meta.JavaSQLTypes;\n-import org.apache.openjpa.jdbc.meta.strats.ContainerFieldStrategy;\n-import org.apache.openjpa.jdbc.meta.strats.LRSMapFieldStrategy;\n-import org.apache.openjpa.jdbc.meta.strats.RelationStrategies;\n-import org.apache.openjpa.jdbc.schema.Column;\n-import org.apache.openjpa.jdbc.schema.ForeignKey;\n-import org.apache.openjpa.jdbc.sql.Joins;\n-import org.apache.openjpa.jdbc.sql.Result;\n-import org.apache.openjpa.jdbc.sql.SQLBuffer;\n-import org.apache.openjpa.jdbc.sql.Select;\n-import org.apache.openjpa.kernel.Filters;\n-import org.apache.openjpa.meta.ClassMetaData;\n-\n-/**\n- * Returns the value of the given map's key.\n- *\n- * @author Marc Prud'hommeaux\n- */\n-class GetMapValue\n-    extends AbstractVal {\n-\n-    private final Val _map;\n-    private final Val _key;\n-    private final String _alias;\n-    private ClassMetaData _meta = null;\n-    private Class _cast = null;\n-\n-    /**\n-     * Constructor. Provide the map and key to operate on.\n-     */\n-    public GetMapValue(Val map, Val key, String alias) {\n-        _map = map;\n-        _key = key;\n-        _alias = alias;\n-    }\n-\n-    public ClassMetaData getMetaData() {\n-        return _meta;\n-    }\n-\n-    public void setMetaData(ClassMetaData meta) {\n-        _meta = meta;\n-    }\n-\n-    public boolean isVariable() {\n-        return false;\n-    }\n-\n-    public Class getType() {\n-        if (_cast != null)\n-            return _cast;\n-        return _map.getType();\n-    }\n-\n-    public void setImplicitType(Class type) {\n-        _cast = type;\n-    }\n-\n-    public ExpState initialize(Select sel, ExpContext ctx, int flags) {\n-        ExpState mapState = _map.initialize(sel, ctx, 0);\n-        ExpState keyState = _key.initialize(sel, ctx, 0);\n-        return new GetMapValueExpState(sel.and(mapState.joins, keyState.joins),\n-            mapState, keyState);\n-    }\n-\n-    /**\n-     * Expression state.\n-     */\n-    private static class GetMapValueExpState\n-        extends ExpState {\n-\n-        public final ExpState mapState;\n-        public final ExpState keyState;\n-\n-        public GetMapValueExpState(Joins joins, ExpState mapState, \n-            ExpState keyState) {\n-            super(joins);\n-            this.mapState = mapState;\n-            this.keyState = keyState;\n-        }\n-    }\n-\n-    public Object toDataStoreValue(Select sel, ExpContext ctx, ExpState state, \n-        Object val) {\n-        GetMapValueExpState gstate = (GetMapValueExpState) state;\n-        return _map.toDataStoreValue(sel, ctx, gstate.mapState, val);\n-    }\n-\n-\n-    public void select(Select sel, ExpContext ctx, ExpState state, \n-        boolean pks) {\n-        sel.select(newSQLBuffer(sel, ctx, state).append(\" AS \").append(_alias),\n-            this);\n-    }\n-\n-    public void selectColumns(Select sel, ExpContext ctx, ExpState state,\n-        boolean pks) {\n-        GetMapValueExpState gstate = (GetMapValueExpState) state;\n-        _map.selectColumns(sel, ctx, gstate.mapState, true);\n-        _key.selectColumns(sel, ctx, gstate.keyState, true);\n-    }\n-\n-    public void groupBy(Select sel, ExpContext ctx, ExpState state) {\n-        sel.groupBy(newSQLBuffer(sel, ctx, state));\n-    }\n-\n-    public void orderBy(Select sel, ExpContext ctx, ExpState state, \n-        boolean asc) {\n-        sel.orderBy(_alias, asc, false);\n-    }\n-\n-    private SQLBuffer newSQLBuffer(Select sel, ExpContext ctx, ExpState state) {\n-        calculateValue(sel, ctx, state, null, null);\n-        SQLBuffer buf = new SQLBuffer(ctx.store.getDBDictionary());\n-        appendTo(sel, ctx, state, buf, 0);\n-        return buf;\n-    }\n-\n-    public Object load(ExpContext ctx, ExpState state, Result res)\n-        throws SQLException {\n-        return Filters.convert(res.getObject(this,\n-            JavaSQLTypes.JDBC_DEFAULT, null), getType());\n-    }\n-\n-    public void calculateValue(Select sel, ExpContext ctx, ExpState state, \n-        Val other, ExpState otherState) {\n-        GetMapValueExpState gstate = (GetMapValueExpState) state;\n-        _map.calculateValue(sel, ctx, gstate.mapState, null, null);\n-        _key.calculateValue(sel, ctx, gstate.keyState, null, null);\n-    }\n-\n-    public int length(Select sel, ExpContext ctx, ExpState state) {\n-        return 1;\n-    }\n-\n-    public void appendTo(Select sel, ExpContext ctx, ExpState state, \n-        SQLBuffer sql, int index) {\n-        if (!(_map instanceof PCPath))\n-            throw new UnsupportedOperationException();\n-        if (!(_key instanceof Const))\n-            throw new UnsupportedOperationException();\n-\n-        GetMapValueExpState gstate = (GetMapValueExpState) state;\n-        PCPath map = (PCPath) _map;\n-        Object key = ((Const) _key).getValue(ctx, gstate.keyState);\n-        FieldMapping field = map.getFieldMapping(gstate.mapState);\n-        if (!(field.getStrategy() instanceof LRSMapFieldStrategy))\n-            throw new UnsupportedOperationException();\n-\n-        LRSMapFieldStrategy strat = (LRSMapFieldStrategy) field.getStrategy();\n-        ClassMapping[] clss = strat.getIndependentValueMappings(true);\n-        if (clss != null && clss.length > 1)\n-            throw RelationStrategies.unjoinable(field);\n-\n-        ClassMapping cls = (clss.length == 0) ? null : clss[0];\n-        ForeignKey fk = strat.getJoinForeignKey(cls);\n-\n-        // manually create a subselect for the Map's value\n-        sql.append(\"(SELECT \");\n-        Column[] values = field.getElementMapping().getColumns();\n-        for (int i = 0; i < values.length; i++) {\n-            if (i > 0)\n-                sql.append(\", \");\n-            sql.append(values[i].getFullName());\n-        }\n-        sql.append(\" FROM \").append(values[0].getTable().getFullName()).\n-            append(\" WHERE \");\n-\n-        // add in the joins\n-        ContainerFieldStrategy.appendUnaliasedJoin(sql, sel, null, \n-            ctx.store.getDBDictionary(), field, fk);\n-        sql.append(\" AND \");\n-\n-        key = strat.toKeyDataStoreValue(key, ctx.store);\n-        Column[] cols = strat.getKeyColumns(cls);\n-        Object[] vals = (cols.length == 1) ? null : (Object[]) key;\n-\n-        for (int i = 0; i < cols.length; i++) {\n-            sql.append(cols[i].getFullName());\n-            if (vals == null)\n-                sql.append((key == null) ? \" IS \" : \" = \").\n-                    appendValue(key, cols[i]);\n-            else\n-                sql.append((vals[i] == null) ? \" IS \" : \" = \").\n-                    appendValue(vals[i], cols[i]);\n-        }\n-        sql.append(\")\");\n-    }\n-}"},{"sha":"120bfee9d892ad9900308a820a8cb48c61d42e08","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/GetObjectId.java","status":"removed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/GetObjectId.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/GetObjectId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/GetObjectId.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"e177c4449743ab29fdb186bd585e4d806afdf4c6","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/HasContainsExpressionVisitor.java","status":"removed","additions":0,"deletions":47,"changes":47,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/HasContainsExpressionVisitor.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/HasContainsExpressionVisitor.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/HasContainsExpressionVisitor.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"3f5a31bcf1237d08405fcc835aa65c6b1035691a","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/InExpression.java","status":"removed","additions":0,"deletions":224,"changes":224,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/InExpression.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/InExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/InExpression.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"94bb4dc43f5a3fa788f8cabd6fa376f3a876e7a9","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/InKeyExpression.java","status":"removed","additions":0,"deletions":47,"changes":47,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/InKeyExpression.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/InKeyExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/InKeyExpression.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"95bcea6effa209e3ca9d562512f410c0925def02","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/InSubQExpression.java","status":"removed","additions":0,"deletions":93,"changes":93,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/InSubQExpression.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/InSubQExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/InSubQExpression.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"fd37e796fccb0db2434fe5d3338f90f13ee1534c","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/InValueExpression.java","status":"removed","additions":0,"deletions":47,"changes":47,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/InValueExpression.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/InValueExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/InValueExpression.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"ec0f36aabb65fd80a21a40903390deaa2b0d970d","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/IndexOf.java","status":"removed","additions":0,"deletions":156,"changes":156,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/IndexOf.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/IndexOf.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/IndexOf.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"43046164129a0e72deb6233208120b6851526037","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/InstanceofExpression.java","status":"removed","additions":0,"deletions":168,"changes":168,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/InstanceofExpression.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/InstanceofExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/InstanceofExpression.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"1601c0cf9c764de96256db925fca323f71c7f080","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/IsEmptyExpression.java","status":"removed","additions":0,"deletions":65,"changes":65,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/IsEmptyExpression.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/IsEmptyExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/IsEmptyExpression.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"2dc7ba2001fcaaca33aa447f884ede3460ba920c","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/IsNotEmptyExpression.java","status":"removed","additions":0,"deletions":65,"changes":65,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/IsNotEmptyExpression.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/IsNotEmptyExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/IsNotEmptyExpression.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"4e6d836cdadf54abcfdf8ee3f9be94287cf3676a","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/JDBCAggregateListener.java","status":"removed","additions":0,"deletions":45,"changes":45,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/JDBCAggregateListener.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/JDBCAggregateListener.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/JDBCAggregateListener.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"d3f760a1839bc9f01d337b4b1de7da2e3b3b2800","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/JDBCExpressionFactory.java","status":"removed","additions":0,"deletions":403,"changes":403,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/JDBCExpressionFactory.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/JDBCExpressionFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/JDBCExpressionFactory.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"f461e9f8543361a6484fcce317d5ad5ee9ec3846","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/JDBCFilterListener.java","status":"removed","additions":0,"deletions":47,"changes":47,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/JDBCFilterListener.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/JDBCFilterListener.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/JDBCFilterListener.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"18eaef270c15c58cdb5d4070f278440a5ebbc9df","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/JDBCPath.java","status":"removed","additions":0,"deletions":32,"changes":32,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/JDBCPath.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/JDBCPath.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/JDBCPath.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"ca90f0a624450405630b0da9a31b20075f463b20","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/JDBCStringContains.java","status":"removed","additions":0,"deletions":56,"changes":56,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/JDBCStringContains.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/JDBCStringContains.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/JDBCStringContains.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"b1caa15fd02de7fdcbe55a5fdebc79c8908626df","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/JDBCWildcardMatch.java","status":"removed","additions":0,"deletions":61,"changes":61,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/JDBCWildcardMatch.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/JDBCWildcardMatch.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/JDBCWildcardMatch.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"5b45fab3923b85b86d5a6b6c3183e13690a53eb2","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Lit.java","status":"removed","additions":0,"deletions":104,"changes":104,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Lit.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Lit.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Lit.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"977cc60c29cc85c231250e3fdc6b8e0239610036","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/MatchesExpression.java","status":"removed","additions":0,"deletions":155,"changes":155,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/MatchesExpression.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/MatchesExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/MatchesExpression.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"f08db8f6da7cf232333842a0047e88d1ae079fc5","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Math.java","status":"removed","additions":0,"deletions":162,"changes":162,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Math.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Math.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Math.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"a6c6e2cbd436169d0da875239bc44972d721213c","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Max.java","status":"removed","additions":0,"deletions":44,"changes":44,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Max.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Max.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Max.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"c79171b053b5b5b04b2c8161e81505d48c906a85","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Min.java","status":"removed","additions":0,"deletions":44,"changes":44,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Min.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Min.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Min.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"4592103b04c2ebc70158524530ae7eadfb39652e","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/NotContainsExpression.java","status":"removed","additions":0,"deletions":95,"changes":95,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/NotContainsExpression.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/NotContainsExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/NotContainsExpression.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"41cc89da620a791b5d31180890458385a82f0f27","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/NotEqualExpression.java","status":"removed","additions":0,"deletions":79,"changes":79,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/NotEqualExpression.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/NotEqualExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/NotEqualExpression.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"913d0b9e01f1b711c111ea079b81eba029e5023b","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/NotExpression.java","status":"removed","additions":0,"deletions":81,"changes":81,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/NotExpression.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/NotExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/NotExpression.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"2fd52fd5bd273a2238060fbf317ff1c81f12ee0d","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Null.java","status":"removed","additions":0,"deletions":51,"changes":51,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Null.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Null.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Null.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"bfbd4af79d1ac08df5ef7a04df91d2e9860d6c56","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/OrExpression.java","status":"removed","additions":0,"deletions":103,"changes":103,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/OrExpression.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/OrExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/OrExpression.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"e59a58252fd988c3a0b4ac36becf8678e5d2668d","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java","status":"removed","additions":0,"deletions":831,"changes":831,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"85d1d42d2e09304f9b17c47ff560fb786fca658f","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Param.java","status":"removed","additions":0,"deletions":131,"changes":131,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Param.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Param.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Param.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"c101b1cd3ef54ee3e50cb71fa4e1010ab56d00fd","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/QueryExpressionsState.java","status":"removed","additions":0,"deletions":36,"changes":36,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/QueryExpressionsState.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/QueryExpressionsState.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/QueryExpressionsState.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"285da8f121fa02e49f0ef2e3db25bc068456dc4f","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SQLEmbed.java","status":"removed","additions":0,"deletions":71,"changes":71,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SQLEmbed.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SQLEmbed.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SQLEmbed.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"4d2e821d1c9793d9208bc0f11b65a7a9ae121b9e","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SQLExpression.java","status":"removed","additions":0,"deletions":41,"changes":41,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SQLExpression.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SQLExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SQLExpression.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"1a81f41965c29c99f80ec02f51934ea1a101405e","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SQLValue.java","status":"removed","additions":0,"deletions":39,"changes":39,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SQLValue.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SQLValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SQLValue.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"200f404214366318fd9981c75a9356322b62f0a6","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SelectConstructor.java","status":"removed","additions":0,"deletions":345,"changes":345,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SelectConstructor.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SelectConstructor.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SelectConstructor.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"9a4b666d9231197137074d080116b5aaaeb9e065","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Size.java","status":"removed","additions":0,"deletions":57,"changes":57,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Size.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Size.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Size.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"1fe57961c3bfbc4a13618e29feaf2dcf55d0a603","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Sqrt.java","status":"removed","additions":0,"deletions":48,"changes":48,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Sqrt.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Sqrt.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Sqrt.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"e7b2c518681e06ea44dd5be27049bea4344efd04","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/StartsWithExpression.java","status":"removed","additions":0,"deletions":282,"changes":282,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/StartsWithExpression.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/StartsWithExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/StartsWithExpression.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"3a2c251207ba31f270539dd4711bd77229f64868","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/StringFunction.java","status":"removed","additions":0,"deletions":119,"changes":119,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/StringFunction.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/StringFunction.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/StringFunction.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"02535edfec268c9bcff629b098f828ef2cbd27cd","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/StringLength.java","status":"removed","additions":0,"deletions":69,"changes":69,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/StringLength.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/StringLength.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/StringLength.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"dcdb1510c09304a01ca5a911dc1884fd88f86bae","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SubQ.java","status":"removed","additions":0,"deletions":207,"changes":207,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SubQ.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SubQ.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SubQ.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"a7d01bde7d6ce5d4382ae93de97166e470e00973","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Substring.java","status":"removed","additions":0,"deletions":153,"changes":153,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Substring.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Substring.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Substring.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"ad0f9c663ac324e78f09a64eed8e137a62ea8ca5","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Sum.java","status":"removed","additions":0,"deletions":54,"changes":54,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Sum.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Sum.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Sum.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"6c1dbfcf6a0d14da95d12bd0d78b6d257cda69db","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ToLowerCase.java","status":"removed","additions":0,"deletions":57,"changes":57,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ToLowerCase.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ToLowerCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ToLowerCase.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"8c176c7d4058254115a604dc1255f92639950452","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ToUpperCase.java","status":"removed","additions":0,"deletions":58,"changes":58,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ToUpperCase.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ToUpperCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ToUpperCase.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"183ada1d22777cc7fd0f33ae60c98699567fa890","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Trim.java","status":"removed","additions":0,"deletions":215,"changes":215,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Trim.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Trim.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Trim.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"64e94eaf7d86f43338c4082f836446eeec48954a","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/UnaryOp.java","status":"removed","additions":0,"deletions":158,"changes":158,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/UnaryOp.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/UnaryOp.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/UnaryOp.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"d217622facb3a91841021cbff6e8500313c03ba8","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Val.java","status":"removed","additions":0,"deletions":163,"changes":163,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Val.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Val.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Val.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"f9eda41909dd61bfc8c3b299693730275cc1f96e","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Variable.java","status":"removed","additions":0,"deletions":177,"changes":177,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Variable.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Variable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Variable.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"d23684d1492bc34e42b09bf6f1830eb1c62590ec","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/package.html","status":"removed","additions":0,"deletions":23,"changes":23,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/package.html","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/package.html","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/package.html?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"a4157d2c2a236906c7142406ac9dd65c60ae00f4","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/package.html","status":"removed","additions":0,"deletions":27,"changes":27,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/package.html","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/package.html","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/package.html?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"fd9344455bb4be3bb30819d183454d2d374707a8","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMapping.java","status":"removed","additions":0,"deletions":1089,"changes":1089,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMapping.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMapping.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMapping.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"d1699ea4979faaeafc14fe504d7a2f266fc53e0d","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMappingInfo.java","status":"removed","additions":0,"deletions":493,"changes":493,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMappingInfo.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMappingInfo.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMappingInfo.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"1dc604b5c207bd3571c240951f37bf6782fc744e","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassStrategy.java","status":"removed","additions":0,"deletions":115,"changes":115,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassStrategy.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"20efe87097b1c4e6be5c3ed573fa80da9d89455c","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/DelegatingJoinable.java","status":"removed","additions":0,"deletions":128,"changes":128,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/DelegatingJoinable.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/DelegatingJoinable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/DelegatingJoinable.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"5a41b30ff44c39a00e4523d4e4d89bab657b03db","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/Discriminator.java","status":"removed","additions":0,"deletions":436,"changes":436,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/Discriminator.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/Discriminator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/Discriminator.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"2ad836c0d6031865c47f8a60e73171efb4803a4b","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/DiscriminatorMappingInfo.java","status":"removed","additions":0,"deletions":170,"changes":170,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/DiscriminatorMappingInfo.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/DiscriminatorMappingInfo.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/DiscriminatorMappingInfo.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"8a809444a5d5886f894d627a9bfb2def24e9f1a8","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/DiscriminatorStrategy.java","status":"removed","additions":0,"deletions":78,"changes":78,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/DiscriminatorStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/DiscriminatorStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/DiscriminatorStrategy.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"26b6ce1d917110ec65f63446cf39c05b188dde69","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/Embeddable.java","status":"removed","additions":0,"deletions":85,"changes":85,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/Embeddable.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/Embeddable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/Embeddable.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"7cf3c535daf986d2581366017d5e408d49c9a788","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMapping.java","status":"removed","additions":0,"deletions":1050,"changes":1050,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMapping.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMapping.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMapping.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"fca07397ed24d48bd4b90dac89711aaf1acf34f6","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMappingInfo.java","status":"removed","additions":0,"deletions":397,"changes":397,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMappingInfo.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMappingInfo.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMappingInfo.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"083a9de95721d5df4152d3863635281be9da6cf4","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldStrategy.java","status":"removed","additions":0,"deletions":247,"changes":247,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldStrategy.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"1224cc304bf19fbc8d1b3c7de6b71968eca46bf1","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/JDBCColumnOrder.java","status":"removed","additions":0,"deletions":87,"changes":87,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/JDBCColumnOrder.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/JDBCColumnOrder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/JDBCColumnOrder.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"739fcbf942dec52bd5d1ec572d84d096612a0636","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/JDBCOrder.java","status":"removed","additions":0,"deletions":46,"changes":46,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/JDBCOrder.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/JDBCOrder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/JDBCOrder.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"427cde0ad867245a51e9ecbd9b64243dac050b40","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/JDBCRelatedFieldOrder.java","status":"removed","additions":0,"deletions":72,"changes":72,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/JDBCRelatedFieldOrder.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/JDBCRelatedFieldOrder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/JDBCRelatedFieldOrder.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"343a9010a752f931ad241a71035bc157f2a8983d","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/JDBCValueOrder.java","status":"removed","additions":0,"deletions":67,"changes":67,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/JDBCValueOrder.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/JDBCValueOrder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/JDBCValueOrder.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"43f9087c1d8641bc5e4bb8941a58f0651ca6b1b3","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/JavaSQLTypes.java","status":"removed","additions":0,"deletions":164,"changes":164,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/JavaSQLTypes.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/JavaSQLTypes.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/JavaSQLTypes.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"e2142b442c93b109f2cdfad50c4475dfe91a3fbb","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/Joinable.java","status":"removed","additions":0,"deletions":91,"changes":91,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/Joinable.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/Joinable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/Joinable.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"d919d536c3a57232c8657e1aaacb47bff363eac9","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingDefaults.java","status":"removed","additions":0,"deletions":307,"changes":307,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingDefaults.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingDefaults.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingDefaults.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"7f28dadda517aa79a2ae391ba3f8c0b8c34aa0cc","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingDefaultsImpl.java","status":"removed","additions":0,"deletions":775,"changes":775,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingDefaultsImpl.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingDefaultsImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingDefaultsImpl.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"a0937361d1ad9ce7c2d759b457007e0aa037481d","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingInfo.java","status":"removed","additions":0,"deletions":1788,"changes":1788,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingInfo.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingInfo.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingInfo.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"bbd7ef52637c9fc04b9d1e00427ef8c4fd3642cf","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingRepository.java","status":"removed","additions":0,"deletions":1347,"changes":1347,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingRepository.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingRepository.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingRepository.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"d790cf7d8db15f5c2f93e2cb8fa0d7f3e48ec6d6","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingStrategyInstaller.java","status":"removed","additions":0,"deletions":71,"changes":71,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingStrategyInstaller.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingStrategyInstaller.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingStrategyInstaller.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"d9ac176dc72903732003876e55b7b1bd33ee7cbc","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingTool.java","status":"removed","additions":0,"deletions":1143,"changes":1143,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingTool.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingTool.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingTool.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"1b2bec007c1d9e47512059d1a845406df816ee3e","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MetaDataPlusMappingFactory.java","status":"removed","additions":0,"deletions":142,"changes":142,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MetaDataPlusMappingFactory.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MetaDataPlusMappingFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MetaDataPlusMappingFactory.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"dd86475665ca6f1e11032aed1d06ce355e5bbc7c","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/NoneMappingDefaults.java","status":"removed","additions":0,"deletions":167,"changes":167,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/NoneMappingDefaults.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/NoneMappingDefaults.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/NoneMappingDefaults.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"070b796072352148d3de7bb4de572ebb5068b485","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/NoneStrategyInstaller.java","status":"removed","additions":0,"deletions":63,"changes":63,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/NoneStrategyInstaller.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/NoneStrategyInstaller.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/NoneStrategyInstaller.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"608c0a8d5d01ef1c5ba187cf9c2f1b52ab924f33","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/PropertiesReverseCustomizer.java","status":"removed","additions":0,"deletions":230,"changes":230,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/PropertiesReverseCustomizer.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/PropertiesReverseCustomizer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/PropertiesReverseCustomizer.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"b724ae6931b5e12565558230d3edffea87c258d2","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/QueryResultMapping.java","status":"removed","additions":0,"deletions":629,"changes":629,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/QueryResultMapping.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/QueryResultMapping.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/QueryResultMapping.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"5c5edff2657983d69e124c2a0556895c3d4b818d","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/RefreshStrategyInstaller.java","status":"removed","additions":0,"deletions":138,"changes":138,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/RefreshStrategyInstaller.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/RefreshStrategyInstaller.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/RefreshStrategyInstaller.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"80c09f5b177e72468b479cb343b5429720bb737a","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/RelationId.java","status":"removed","additions":0,"deletions":38,"changes":38,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/RelationId.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/RelationId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/RelationId.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"5780172a74aa58bb00120352b63aec8c74e84a3f","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ReverseCustomizer.java","status":"removed","additions":0,"deletions":163,"changes":163,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ReverseCustomizer.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ReverseCustomizer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ReverseCustomizer.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"c418bcebfbe8c5a71f05f220bee62691b321a593","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ReverseMappingTool.java","status":"removed","additions":0,"deletions":2217,"changes":2217,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ReverseMappingTool.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ReverseMappingTool.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ReverseMappingTool.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"425ed86cb004e716e303912f94d0e756b1dc6af1","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/RuntimeStrategyInstaller.java","status":"removed","additions":0,"deletions":96,"changes":96,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/RuntimeStrategyInstaller.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/RuntimeStrategyInstaller.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/RuntimeStrategyInstaller.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"981d4ae060957632b7e4b17704e982f48591dab0","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/SequenceMapping.java","status":"removed","additions":0,"deletions":173,"changes":173,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/SequenceMapping.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/SequenceMapping.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/SequenceMapping.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"62a6989042c22af681d480a6384f312941c5838d","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/Strategy.java","status":"removed","additions":0,"deletions":136,"changes":136,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/Strategy.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/Strategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/Strategy.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"8dd43c50c24b1e146f557236612655b0bfba13c1","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/StrategyInstaller.java","status":"removed","additions":0,"deletions":69,"changes":69,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/StrategyInstaller.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/StrategyInstaller.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/StrategyInstaller.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"11e3c54316098f6a2aa36a700153f5ca27407c98","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ValueHandler.java","status":"removed","additions":0,"deletions":104,"changes":104,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ValueHandler.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ValueHandler.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ValueHandler.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"e5330cdc16941de83acb16cba802aac02112f78e","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ValueMapping.java","status":"removed","additions":0,"deletions":269,"changes":269,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ValueMapping.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ValueMapping.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ValueMapping.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"17f396bb30c16603a7b0ffd9f7092a41687dbff5","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ValueMappingImpl.java","status":"removed","additions":0,"deletions":544,"changes":544,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ValueMappingImpl.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ValueMappingImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ValueMappingImpl.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"4807bb52f65f89185ce8b65e89d94188166deed6","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ValueMappingInfo.java","status":"removed","additions":0,"deletions":321,"changes":321,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ValueMappingInfo.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ValueMappingInfo.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ValueMappingInfo.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"7a60a2d72c1179e8f6993d8ffaf9a33fb1baf868","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/Version.java","status":"removed","additions":0,"deletions":379,"changes":379,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/Version.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/Version.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/Version.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"709f07ab1527eedbe3ee7e4aa54d9a7221fbe016","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/VersionMappingInfo.java","status":"removed","additions":0,"deletions":89,"changes":89,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/VersionMappingInfo.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/VersionMappingInfo.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/VersionMappingInfo.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"425e44c01bff5f8aa33e25e30571c3107b95b076","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/VersionStrategy.java","status":"removed","additions":0,"deletions":87,"changes":87,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/VersionStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/VersionStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/VersionStrategy.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"154094cb24a360f273f7ea35b2d6ae898856e300","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/package.html","status":"removed","additions":0,"deletions":28,"changes":28,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/package.html","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/package.html","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/package.html?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"db60cbdf5b828681227879e170e25b83376fae86","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/AbstractClassStrategy.java","status":"removed","additions":0,"deletions":82,"changes":82,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/AbstractClassStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/AbstractClassStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/AbstractClassStrategy.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"0b9973a8f4559596d82c1b37ef028dea6a35dd7b","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/AbstractDiscriminatorStrategy.java","status":"removed","additions":0,"deletions":96,"changes":96,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/AbstractDiscriminatorStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/AbstractDiscriminatorStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/AbstractDiscriminatorStrategy.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"49e168d0e8255b762c896113942a049deb37ead7","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/AbstractFieldStrategy.java","status":"removed","additions":0,"deletions":176,"changes":176,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/AbstractFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/AbstractFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/AbstractFieldStrategy.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"016d3898961c049cc9506d095b377be62d828c5e","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/AbstractStrategy.java","status":"removed","additions":0,"deletions":81,"changes":81,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/AbstractStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/AbstractStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/AbstractStrategy.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"b75d31b98d05f6cf1d1609e26fe809b7b914796d","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/AbstractValueHandler.java","status":"removed","additions":0,"deletions":61,"changes":61,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/AbstractValueHandler.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/AbstractValueHandler.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/AbstractValueHandler.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"426e2231e6455653e549182416dd597a1497cb69","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/AbstractVersionStrategy.java","status":"removed","additions":0,"deletions":77,"changes":77,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/AbstractVersionStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/AbstractVersionStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/AbstractVersionStrategy.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"7f8b29a7531e61c0f9131b9609b6cde5da95a97f","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/BlobValueHandler.java","status":"removed","additions":0,"deletions":51,"changes":51,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/BlobValueHandler.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/BlobValueHandler.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/BlobValueHandler.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"1b163561cf5de6ae80dbaaa66a48e671b7c108a6","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ByteArrayValueHandler.java","status":"removed","additions":0,"deletions":62,"changes":62,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ByteArrayValueHandler.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ByteArrayValueHandler.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ByteArrayValueHandler.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"b85c93cef537f7768a7723c965e58401b23b26fb","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/CharArrayStreamValueHandler.java","status":"removed","additions":0,"deletions":83,"changes":83,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/CharArrayStreamValueHandler.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/CharArrayStreamValueHandler.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/CharArrayStreamValueHandler.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"30d1360c37c95f82dcafae82fa8f7a67dde2aad6","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/CharArrayValueHandler.java","status":"removed","additions":0,"deletions":66,"changes":66,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/CharArrayValueHandler.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/CharArrayValueHandler.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/CharArrayValueHandler.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"2b9cac70295c76a4e213cfcc668ce98bbd80f1a4","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ClassNameDiscriminatorStrategy.java","status":"removed","additions":0,"deletions":127,"changes":127,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ClassNameDiscriminatorStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ClassNameDiscriminatorStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ClassNameDiscriminatorStrategy.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"ea4a0ef72b5991b6bd1e386ccb1f61ddae81e9d1","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ClobValueHandler.java","status":"removed","additions":0,"deletions":51,"changes":51,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ClobValueHandler.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ClobValueHandler.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ClobValueHandler.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"b23c9164989350068e7e9d6b9318b7cd922e2ed4","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ColumnVersionStrategy.java","status":"removed","additions":0,"deletions":270,"changes":270,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ColumnVersionStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ColumnVersionStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ColumnVersionStrategy.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"617ac6c064a8e106c2f3406dfe0e896caa8b0ca0","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ContainerFieldStrategy.java","status":"removed","additions":0,"deletions":133,"changes":133,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ContainerFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ContainerFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ContainerFieldStrategy.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"be1449419d0cf0aa5e559df818b3050ba3d64820","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ElementEmbedValueHandler.java","status":"removed","additions":0,"deletions":183,"changes":183,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ElementEmbedValueHandler.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ElementEmbedValueHandler.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ElementEmbedValueHandler.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"57232a4bc772ea16b0d5bdd503b91afe1177d629","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/EmbedFieldStrategy.java","status":"removed","additions":0,"deletions":1584,"changes":1584,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/EmbedFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/EmbedFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/EmbedFieldStrategy.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"60cfbb54bed4a0eee8fd34718a7218f97f0c9d3b","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/EmbedValueHandler.java","status":"removed","additions":0,"deletions":172,"changes":172,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/EmbedValueHandler.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/EmbedValueHandler.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/EmbedValueHandler.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"f46c5454f87a24c5aac32ef570f0a5d8036bf41f","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/EmbeddedClassStrategy.java","status":"removed","additions":0,"deletions":95,"changes":95,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/EmbeddedClassStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/EmbeddedClassStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/EmbeddedClassStrategy.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"4d2cf63d6190ff0ce877b670c3ebb3ad141d04f4","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/EnumValueHandler.java","status":"removed","additions":0,"deletions":103,"changes":103,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/EnumValueHandler.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/EnumValueHandler.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/EnumValueHandler.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"3b0e012cc531c0e37a2e49eb09db06c2ed9ebc15","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/FlatClassStrategy.java","status":"removed","additions":0,"deletions":68,"changes":68,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/FlatClassStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/FlatClassStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/FlatClassStrategy.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"d39d24c6216f5fdc985f8f54390fb89dbcfb794e","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/FullClassStrategy.java","status":"removed","additions":0,"deletions":137,"changes":137,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/FullClassStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/FullClassStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/FullClassStrategy.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"21861e4509dfc3a3c36072592b3c5cd03e834767","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerCollectionTableFieldStrategy.java","status":"removed","additions":0,"deletions":250,"changes":250,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerCollectionTableFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerCollectionTableFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerCollectionTableFieldStrategy.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"ef1aceeba0814aa5fd9a0fe8de9d5d4764f6c1c1","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerFieldStrategy.java","status":"removed","additions":0,"deletions":418,"changes":418,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerFieldStrategy.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"e7859a2c4dcf9600b45aebb58e0af1584b12b435","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerHandlerMapTableFieldStrategy.java","status":"removed","additions":0,"deletions":246,"changes":246,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerHandlerMapTableFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerHandlerMapTableFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerHandlerMapTableFieldStrategy.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"a931b4c0c85a92ea3551190ba2be7a1583c7670b","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerRelationMapTableFieldStrategy.java","status":"removed","additions":0,"deletions":315,"changes":315,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerRelationMapTableFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerRelationMapTableFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerRelationMapTableFieldStrategy.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"12f04c3752ca424fa2453185af23d749cff88e57","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerStrategies.java","status":"removed","additions":0,"deletions":272,"changes":272,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerStrategies.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerStrategies.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerStrategies.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"fdb04ec24f89d6011804c77634022e5a71cb7ad4","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/IdentityJoinable.java","status":"removed","additions":0,"deletions":87,"changes":87,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/IdentityJoinable.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/IdentityJoinable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/IdentityJoinable.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"ce3293ba2bca061036489f81f0077fc1203cb924","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ImmutableValueHandler.java","status":"removed","additions":0,"deletions":98,"changes":98,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ImmutableValueHandler.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ImmutableValueHandler.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ImmutableValueHandler.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"d105060dd0197b49187204efa192ac67b30e4b5c","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/InValueDiscriminatorStrategy.java","status":"removed","additions":0,"deletions":163,"changes":163,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/InValueDiscriminatorStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/InValueDiscriminatorStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/InValueDiscriminatorStrategy.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"99440396b0afbc25bf7e416e6e1f6bcd1b9d10fd","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/LRSCollectionFieldStrategy.java","status":"removed","additions":0,"deletions":99,"changes":99,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/LRSCollectionFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/LRSCollectionFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/LRSCollectionFieldStrategy.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"2af54a93779840b952156fa5192d2d1dda9f8863","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/LRSMapFieldStrategy.java","status":"removed","additions":0,"deletions":152,"changes":152,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/LRSMapFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/LRSMapFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/LRSMapFieldStrategy.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"a4af5d31ee9f321bc0a95d420f783d43df99e12b","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/LRSProxyCollection.java","status":"removed","additions":0,"deletions":232,"changes":232,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/LRSProxyCollection.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/LRSProxyCollection.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/LRSProxyCollection.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"67dcc15753be22610c54bf6ed162ac8b3a1f691a","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/LRSProxyMap.java","status":"removed","additions":0,"deletions":423,"changes":423,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/LRSProxyMap.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/LRSProxyMap.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/LRSProxyMap.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"9a1a0ad24cb6e5cea86dc0c8e12d647e9c7500cc","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/LobFieldStrategy.java","status":"removed","additions":0,"deletions":219,"changes":219,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/LobFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/LobFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/LobFieldStrategy.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"4a7598ebce12af810eb381f79eea1f79d65a1193","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MapTableFieldStrategy.java","status":"removed","additions":0,"deletions":176,"changes":176,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MapTableFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MapTableFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MapTableFieldStrategy.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"7eda87247d162f52552f46708491b6a890b6948e","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MaxEmbeddedBlobFieldStrategy.java","status":"removed","additions":0,"deletions":107,"changes":107,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MaxEmbeddedBlobFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MaxEmbeddedBlobFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MaxEmbeddedBlobFieldStrategy.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"988bcf98d294cb06b83c4a284208336aae6f7e88","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MaxEmbeddedByteArrayFieldStrategy.java","status":"removed","additions":0,"deletions":96,"changes":96,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MaxEmbeddedByteArrayFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MaxEmbeddedByteArrayFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MaxEmbeddedByteArrayFieldStrategy.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"16e962cefc9839ea432ef4b3148c2c341a757088","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MaxEmbeddedCharArrayFieldStrategy.java","status":"removed","additions":0,"deletions":113,"changes":113,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MaxEmbeddedCharArrayFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MaxEmbeddedCharArrayFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MaxEmbeddedCharArrayFieldStrategy.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"9982c921c277e66c989d58061fa02f1f87c9587b","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MaxEmbeddedClobFieldStrategy.java","status":"removed","additions":0,"deletions":83,"changes":83,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MaxEmbeddedClobFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MaxEmbeddedClobFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MaxEmbeddedClobFieldStrategy.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"e5cf3a6b335b2ffaa2a1807f5bf6e9642fd68600","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MaxEmbeddedLobFieldStrategy.java","status":"removed","additions":0,"deletions":262,"changes":262,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MaxEmbeddedLobFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MaxEmbeddedLobFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MaxEmbeddedLobFieldStrategy.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"89ba3c5835c489508db8409058b4afde830a0f48","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/NanoPrecisionTimestampVersionStrategy.java","status":"removed","additions":0,"deletions":41,"changes":41,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/NanoPrecisionTimestampVersionStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/NanoPrecisionTimestampVersionStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/NanoPrecisionTimestampVersionStrategy.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"604f11b0f4c7167b40359f3f3cb199e098327f9e","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/NoneClassStrategy.java","status":"removed","additions":0,"deletions":89,"changes":89,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/NoneClassStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/NoneClassStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/NoneClassStrategy.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"8c6c0e2b3295175383b385f2e7ae985c9e7f39df","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/NoneDiscriminatorStrategy.java","status":"removed","additions":0,"deletions":58,"changes":58,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/NoneDiscriminatorStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/NoneDiscriminatorStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/NoneDiscriminatorStrategy.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"a6dd310abb8031fbf743f5ba6e314cd3eeb7fb1b","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/NoneFieldStrategy.java","status":"removed","additions":0,"deletions":54,"changes":54,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/NoneFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/NoneFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/NoneFieldStrategy.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"8b5d47947ad2b68321bf252235da9e327ea162ec","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/NoneVersionStrategy.java","status":"removed","additions":0,"deletions":55,"changes":55,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/NoneVersionStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/NoneVersionStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/NoneVersionStrategy.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"2f2d8e22448c00003eb3a22259e6a63eb3a834d0","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/NumberVersionStrategy.java","status":"removed","additions":0,"deletions":75,"changes":75,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/NumberVersionStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/NumberVersionStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/NumberVersionStrategy.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"73db5a88d6f56f1a86500bdd06c5472a59992a63","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ObjectIdClassStrategy.java","status":"removed","additions":0,"deletions":49,"changes":49,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ObjectIdClassStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ObjectIdClassStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ObjectIdClassStrategy.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"90174635c2ebd44e6bd132c0d6d8c8748163db54","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ObjectIdValueHandler.java","status":"removed","additions":0,"deletions":84,"changes":84,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ObjectIdValueHandler.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ObjectIdValueHandler.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ObjectIdValueHandler.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"f2e8ec6f17b50616056d867e3c8a684c834f78d8","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/PrimitiveFieldStrategy.java","status":"removed","additions":0,"deletions":403,"changes":403,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/PrimitiveFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/PrimitiveFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/PrimitiveFieldStrategy.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"61aa40a2a44ebce75c687aefc82ec4236d7f2953","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/PrimitiveWrapperArrays.java","status":"removed","additions":0,"deletions":88,"changes":88,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/PrimitiveWrapperArrays.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/PrimitiveWrapperArrays.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/PrimitiveWrapperArrays.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"5320940be2281483c7a73f1584327dc13afc75eb","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationCollectionInverseKeyFieldStrategy.java","status":"removed","additions":0,"deletions":97,"changes":97,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationCollectionInverseKeyFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationCollectionInverseKeyFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationCollectionInverseKeyFieldStrategy.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"518dd32e1646250705b91676a9759128da21d105","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationCollectionTableFieldStrategy.java","status":"removed","additions":0,"deletions":96,"changes":96,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationCollectionTableFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationCollectionTableFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationCollectionTableFieldStrategy.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"5980871a5c8a73888eeb05c339d3bc7068c181c9","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","status":"removed","additions":0,"deletions":985,"changes":985,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"cc2c1eb5834beda96e35fb9a77cf0431b4710493","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationHandlerMapTableFieldStrategy.java","status":"removed","additions":0,"deletions":290,"changes":290,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationHandlerMapTableFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationHandlerMapTableFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationHandlerMapTableFieldStrategy.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"9ed5caf9158059123979ceebe985e43561969dc1","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationMapInverseKeyFieldStrategy.java","status":"removed","additions":0,"deletions":170,"changes":170,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationMapInverseKeyFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationMapInverseKeyFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationMapInverseKeyFieldStrategy.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"3c50a40549018a0dbcdaa946d9ccc094ccf5d8db","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationMapTableFieldStrategy.java","status":"removed","additions":0,"deletions":170,"changes":170,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationMapTableFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationMapTableFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationMapTableFieldStrategy.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"60770b6cfeb3ecb2f617e29636c7aa95c7ba0261","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationRelationMapTableFieldStrategy.java","status":"removed","additions":0,"deletions":375,"changes":375,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationRelationMapTableFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationRelationMapTableFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationRelationMapTableFieldStrategy.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"51db4ca39c5b7c7ac3228858a2bd246faeb477ee","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationStrategies.java","status":"removed","additions":0,"deletions":218,"changes":218,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationStrategies.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationStrategies.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationStrategies.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"7a3bec02fece2146ec986ca18ab01c0eb8880fe9","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationToManyInverseKeyFieldStrategy.java","status":"removed","additions":0,"deletions":349,"changes":349,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationToManyInverseKeyFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationToManyInverseKeyFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationToManyInverseKeyFieldStrategy.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"4cf621b5107c7613b91ee3466f45e84dc650c2aa","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationToManyTableFieldStrategy.java","status":"removed","additions":0,"deletions":270,"changes":270,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationToManyTableFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationToManyTableFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationToManyTableFieldStrategy.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"e71657c527172a9cd38341052f862e331a9f6acf","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StateComparisonVersionStrategy.java","status":"removed","additions":0,"deletions":330,"changes":330,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StateComparisonVersionStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StateComparisonVersionStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StateComparisonVersionStrategy.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"52a72d33dd1edb81eaf76f7164deafe7fad7021b","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StoreCollectionFieldStrategy.java","status":"removed","additions":0,"deletions":603,"changes":603,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StoreCollectionFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StoreCollectionFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StoreCollectionFieldStrategy.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"b55f70924e22d06d4feed54028c3838943dc8aef","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StringFieldStrategy.java","status":"removed","additions":0,"deletions":259,"changes":259,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StringFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StringFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StringFieldStrategy.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"dea031dcdb2351231965e204615dd36118715157","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/SubclassJoinDiscriminatorStrategy.java","status":"removed","additions":0,"deletions":169,"changes":169,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/SubclassJoinDiscriminatorStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/SubclassJoinDiscriminatorStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/SubclassJoinDiscriminatorStrategy.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"d20d37d01d7d5f013bb08fbbd28a9dc4b632a92f","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/SuperclassDiscriminatorStrategy.java","status":"removed","additions":0,"deletions":77,"changes":77,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/SuperclassDiscriminatorStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/SuperclassDiscriminatorStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/SuperclassDiscriminatorStrategy.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"b73e77bb81217f7c4012f38ddf31576c7313ba64","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/SuperclassVersionStrategy.java","status":"removed","additions":0,"deletions":57,"changes":57,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/SuperclassVersionStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/SuperclassVersionStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/SuperclassVersionStrategy.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"ed91d13a68a7a4456c393aa41dcb25059e989248","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/TimestampVersionStrategy.java","status":"removed","additions":0,"deletions":59,"changes":59,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/TimestampVersionStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/TimestampVersionStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/TimestampVersionStrategy.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"4ae7cdaa5740e2359c64f007204d845b0d8bec7a","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/UntypedPCValueHandler.java","status":"removed","additions":0,"deletions":124,"changes":124,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/UntypedPCValueHandler.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/UntypedPCValueHandler.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/UntypedPCValueHandler.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"86f8320ffc40bb7c0fe85d5ccd23fe5ed5a6adeb","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ValueMapDiscriminatorStrategy.java","status":"removed","additions":0,"deletions":133,"changes":133,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ValueMapDiscriminatorStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ValueMapDiscriminatorStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ValueMapDiscriminatorStrategy.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"fed5b547dc19e34e14d3cb8d4db53d1707d50bdc","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/VerticalClassStrategy.java","status":"removed","additions":0,"deletions":154,"changes":154,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/VerticalClassStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/VerticalClassStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/VerticalClassStrategy.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"7008ec062300ae41a88ab8d1d2b35dea9ff52082","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/XMLValueHandler.java","status":"removed","additions":0,"deletions":96,"changes":96,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/XMLValueHandler.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/XMLValueHandler.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/XMLValueHandler.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"85a17bef4ac0d759577d534e75b22133e6c72b11","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/package.html","status":"removed","additions":0,"deletions":27,"changes":27,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/package.html","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/package.html","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/package.html?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"45dedec18f7173217fd4e3fd6d196dcca3f62c5f","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Column.java","status":"removed","additions":0,"deletions":749,"changes":749,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Column.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Column.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Column.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"2f181c7195148cc39b4a2c3545cf450f66b2c534","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/ColumnIO.java","status":"removed","additions":0,"deletions":308,"changes":308,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/ColumnIO.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/ColumnIO.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/ColumnIO.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"3a6e7e6af3405f0019a6b0941e5ef7698c094252","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Constraint.java","status":"removed","additions":0,"deletions":188,"changes":188,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Constraint.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Constraint.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Constraint.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"90f5ae93be1031d13b5840e7a1c76e0eec0a043b","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/DataSourceFactory.java","status":"removed","additions":0,"deletions":313,"changes":313,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/DataSourceFactory.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/DataSourceFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/DataSourceFactory.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"f25f2ff0b16a09b14e35388f91399ba830becbbf","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/DriverDataSource.java","status":"removed","additions":0,"deletions":111,"changes":111,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/DriverDataSource.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/DriverDataSource.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/DriverDataSource.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"eb19597b5dd22f743d5acde372176bcbac7d3ec0","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/DynamicSchemaFactory.java","status":"removed","additions":0,"deletions":151,"changes":151,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/DynamicSchemaFactory.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/DynamicSchemaFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/DynamicSchemaFactory.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"88fae0ba52427678f9e6bba0226f2ffe7fb95bcb","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/FileSchemaFactory.java","status":"removed","additions":0,"deletions":106,"changes":106,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/FileSchemaFactory.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/FileSchemaFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/FileSchemaFactory.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"40df305eadc2f9951ba53d02b66afaed44acc9cc","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/ForeignKey.java","status":"removed","additions":0,"deletions":741,"changes":741,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/ForeignKey.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/ForeignKey.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/ForeignKey.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"86433c0a61cf9dee8319a758a5202dde7777adf2","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Index.java","status":"removed","additions":0,"deletions":85,"changes":85,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Index.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Index.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Index.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"e531408cf53588dc1fe6e9d2d505773758333580","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/LazySchemaFactory.java","status":"removed","additions":0,"deletions":194,"changes":194,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/LazySchemaFactory.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/LazySchemaFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/LazySchemaFactory.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"57f0a74a29bedb386443f0587152bd3236886c1d","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/LocalConstraint.java","status":"removed","additions":0,"deletions":187,"changes":187,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/LocalConstraint.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/LocalConstraint.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/LocalConstraint.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"a3cc7c2a64ab75710358c8267c57110185fcb840","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/NameSet.java","status":"removed","additions":0,"deletions":80,"changes":80,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/NameSet.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/NameSet.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/NameSet.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"9d66d3cb2c1c9102457d4b2b423ea7f33685ca5c","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/PrimaryKey.java","status":"removed","additions":0,"deletions":85,"changes":85,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/PrimaryKey.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/PrimaryKey.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/PrimaryKey.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"b355ce0fb8ae592d87d19bb78a8c6a6a4f6d5b12","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/ReferenceCounter.java","status":"removed","additions":0,"deletions":45,"changes":45,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/ReferenceCounter.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/ReferenceCounter.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/ReferenceCounter.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"490fd4179de36223c25d6117dc31f501d71ea01c","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Schema.java","status":"removed","additions":0,"deletions":263,"changes":263,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Schema.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Schema.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Schema.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"46e8b82cbdd32812653a4b7e22378aa30a81d2ad","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaFactory.java","status":"removed","additions":0,"deletions":42,"changes":42,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaFactory.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaFactory.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"f7c0b40483f84333c9f32a4efad32ae7fc939a58","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaGenerator.java","status":"removed","additions":0,"deletions":942,"changes":942,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaGenerator.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaGenerator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaGenerator.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"a5d7fd3f3deb485ad9caf1df1db0183492d8a3d6","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaGroup.java","status":"removed","additions":0,"deletions":468,"changes":468,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaGroup.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaGroup.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaGroup.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"e3ef0b6bd50638b5f84a70976eba868f989a2011","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaParser.java","status":"removed","additions":0,"deletions":65,"changes":65,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaParser.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaParser.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"f7a11d9d6a94fb090b9d0ad19a82bf905e41423e","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaSerializer.java","status":"removed","additions":0,"deletions":81,"changes":81,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaSerializer.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaSerializer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaSerializer.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"e500de0977fbc8df1612135fe648fc2d77a0fa6b","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaTool.java","status":"removed","additions":0,"deletions":1527,"changes":1527,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaTool.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaTool.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaTool.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"dab4f1c60571df68d20b2e3fa9485d533440e03c","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Schemas.java","status":"removed","additions":0,"deletions":235,"changes":235,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Schemas.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Schemas.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Schemas.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"cde443b99b0e04c8cbaafbb0f7040e93f3967d61","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Sequence.java","status":"removed","additions":0,"deletions":227,"changes":227,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Sequence.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Sequence.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Sequence.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"06a82cb26f92bb0741b5243ec59c0ab0fb87fdd5","filename":"1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SimpleDriverDataSource.java","status":"removed","additions":0,"deletions":199,"changes":199,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SimpleDriverDataSource.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SimpleDriverDataSource.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SimpleDriverDataSource.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"}]}

