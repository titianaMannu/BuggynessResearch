{"sha":"f1af41c44c631bd63da734386cdb329faf4ad9e6","node_id":"MDY6Q29tbWl0MjA2MzY0OmYxYWY0MWM0NGM2MzFiZDYzZGE3MzQzODZjZGIzMjlmYWY0YWQ5ZTY=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-09-22T14:45:26Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-09-22T14:45:26Z"},"message":"OPENJPA-1298: \nRemove WriteBehindCallbackManager which 'shared' a single callback with multiple EMFs unintentionally\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@817679 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e8f232898bc9aa6d08103d757989e38e369abcb5","url":"https://api.github.com/repos/apache/openjpa/git/trees/e8f232898bc9aa6d08103d757989e38e369abcb5"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/f1af41c44c631bd63da734386cdb329faf4ad9e6","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/f1af41c44c631bd63da734386cdb329faf4ad9e6","html_url":"https://github.com/apache/openjpa/commit/f1af41c44c631bd63da734386cdb329faf4ad9e6","comments_url":"https://api.github.com/repos/apache/openjpa/commits/f1af41c44c631bd63da734386cdb329faf4ad9e6/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"437897789151a863d3db32d8c4692100bcb12a60","url":"https://api.github.com/repos/apache/openjpa/commits/437897789151a863d3db32d8c4692100bcb12a60","html_url":"https://github.com/apache/openjpa/commit/437897789151a863d3db32d8c4692100bcb12a60"}],"stats":{"total":104,"additions":40,"deletions":64},"files":[{"sha":"0d1208318e38dd83c5ffa97b6797b378a9fc680f","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","status":"modified","additions":2,"deletions":10,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/f1af41c44c631bd63da734386cdb329faf4ad9e6/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/f1af41c44c631bd63da734386cdb329faf4ad9e6/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java?ref=f1af41c44c631bd63da734386cdb329faf4ad9e6","patch":"@@ -74,7 +74,6 @@\n import org.apache.openjpa.writebehind.WriteBehindCacheManager;\n import org.apache.openjpa.writebehind.WriteBehindCacheManagerImpl;\n import org.apache.openjpa.writebehind.WriteBehindCallback;\n-import org.apache.openjpa.writebehind.WriteBehindCallbackManager;\n \n /**\n  * Implementation of the {@link OpenJPAConfiguration} interface.\n@@ -1759,16 +1758,9 @@ public String getWriteBehindCallback() {\n         \n     }\n     public WriteBehindCallback getWriteBehindCallbackInstance() {\n-        WriteBehindCallback callback =\n-            (WriteBehindCallback) writeBehindCallbackPlugin.get();\n-        \n+        WriteBehindCallback callback = (WriteBehindCallback) writeBehindCallbackPlugin.get();\n         if (callback == null) {\n-            WriteBehindCallbackManager manager = WriteBehindCallbackManager.getInstance();\n-            callback = manager.getCallback(getWriteBehindCallback());\n-            if (callback == null) {\n-                callback = (WriteBehindCallback) writeBehindCallbackPlugin.instantiate(WriteBehindCallback.class, this);\n-                manager.putCallback(getWriteBehindCallback(), callback);\n-            }\n+            callback = (WriteBehindCallback) writeBehindCallbackPlugin.instantiate(WriteBehindCallback.class, this);\n         }\n         return callback;\n     }"},{"sha":"31697343b5aefde2e622263f8e925ab57e4c6bbd","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/writebehind/WriteBehindCallbackManager.java","status":"removed","additions":0,"deletions":51,"changes":51,"blob_url":"https://github.com/apache/openjpa/blob/437897789151a863d3db32d8c4692100bcb12a60/openjpa-kernel/src/main/java/org/apache/openjpa/writebehind/WriteBehindCallbackManager.java","raw_url":"https://github.com/apache/openjpa/raw/437897789151a863d3db32d8c4692100bcb12a60/openjpa-kernel/src/main/java/org/apache/openjpa/writebehind/WriteBehindCallbackManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/writebehind/WriteBehindCallbackManager.java?ref=437897789151a863d3db32d8c4692100bcb12a60","patch":"@@ -1,51 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.writebehind;\n-\n-import java.util.HashMap;\n-import java.util.Map;\n-\n-public class WriteBehindCallbackManager {\n-    private static WriteBehindCallbackManager _instance =\n-        new WriteBehindCallbackManager();\n-\n-    private Map<String, WriteBehindCallback> _callbacks = null;\n-    \n-    public static final String DEFAULT_CALLBACK_NAME = \"default\";\n-\n-    public WriteBehindCallbackManager() {\n-        _callbacks = new HashMap<String, WriteBehindCallback>();\n-    }\n-\n-    public static WriteBehindCallbackManager getInstance() {\n-        return _instance;\n-    }\n-\n-    public WriteBehindCallback getCallback(String name) {\n-        return _callbacks.get(name);\n-    }\n-\n-    public void putCallback(String name, WriteBehindCallback callback) {\n-        if (_callbacks.containsKey(name)) {\n-            throw new RuntimeException(\"Duplicate callback created for \" \n-                + name);\n-        }\n-        _callbacks.put(name, callback);\n-    }\n-}"},{"sha":"f6f450a4b5249c183eb97c507be82a9c30c72a14","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/AbstractWriteBehindTestCase.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/f1af41c44c631bd63da734386cdb329faf4ad9e6/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/AbstractWriteBehindTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/f1af41c44c631bd63da734386cdb329faf4ad9e6/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/AbstractWriteBehindTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/AbstractWriteBehindTestCase.java?ref=f1af41c44c631bd63da734386cdb329faf4ad9e6","patch":"@@ -27,7 +27,6 @@\n import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\n import org.apache.openjpa.persistence.test.AbstractCachedEMFTestCase;\n-import org.apache.openjpa.persistence.test.PersistenceTestCase;\n import org.apache.openjpa.writebehind.WriteBehindCache;\n import org.apache.openjpa.writebehind.WriteBehindCacheManager;\n import org.apache.openjpa.writebehind.WriteBehindCallback;"},{"sha":"646f1c0bc3dabca94c894a8bf7a5597d89d9406f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/TestWriteBehindConfiguration.java","status":"modified","additions":38,"deletions":2,"changes":40,"blob_url":"https://github.com/apache/openjpa/blob/f1af41c44c631bd63da734386cdb329faf4ad9e6/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/TestWriteBehindConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/f1af41c44c631bd63da734386cdb329faf4ad9e6/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/TestWriteBehindConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/TestWriteBehindConfiguration.java?ref=f1af41c44c631bd63da734386cdb329faf4ad9e6","patch":"@@ -18,12 +18,13 @@\n  */\n package org.apache.openjpa.jdbc.writebehind;\n \n+import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.Map;\n \n import javax.persistence.Persistence;\n-import javax.persistence.PersistenceException;\n \n+import org.apache.openjpa.conf.OpenJPAConfigurationImpl;\n import org.apache.openjpa.datacache.DataCacheStoreManager;\n import org.apache.openjpa.kernel.DelegatingStoreManager;\n import org.apache.openjpa.persistence.EntityManagerImpl;\n@@ -33,7 +34,6 @@\n import org.apache.openjpa.writebehind.WriteBehindCache;\n import org.apache.openjpa.writebehind.WriteBehindCacheManager;\n import org.apache.openjpa.writebehind.WriteBehindCallback;\n-import org.apache.openjpa.writebehind.WriteBehindException;\n import org.apache.openjpa.writebehind.WriteBehindStoreManager;\n \n public class TestWriteBehindConfiguration extends AbstractWriteBehindTestCase {\n@@ -104,6 +104,42 @@ public void testCustomCallbackCreated() {\n             callback instanceof CustomWriteBehindCallback);\n     }\n     \n+    \n+    public void testWriteBehindCallbackCreatedForEachConfiguration() {\n+        OpenJPAEntityManagerFactorySPI emf1 = emf;\n+        ArrayList<Object> clonedProps = new ArrayList<Object>();\n+        for(Object o : writeBehindProps) {\n+            // quick and dirty way to alter the properties, this should prevent the cached EMF from being reused.\n+            if(o.toString().equals(\"unsupported\")) {\n+                // just change the runtimeUnenhancedClasses value.\n+                clonedProps.add(\"supported\");\n+            }\n+            else {\n+                clonedProps.add(o);\n+            }\n+        }\n+        OpenJPAEntityManagerFactorySPI emf2 = createEMF(clonedProps.toArray()); \n+        assertNotNull(\"Unable to create first EntityManager \", emf1);\n+        assertNotNull(\"Unable to create second EntityManager \", emf2);\n+        assertNotSame(\"Test is invalid if the same EMF is used\", emf1, emf2);\n+\n+        OpenJPAConfigurationImpl conf1 = (OpenJPAConfigurationImpl) emf1.getConfiguration();\n+        OpenJPAConfigurationImpl conf2 = (OpenJPAConfigurationImpl) emf2.getConfiguration();\n+\n+        assertNotNull(conf1);\n+        assertNotNull(conf2);\n+        assertNotSame(\"Configuration objects for different EMFs should not be the same\", conf1, conf2);\n+\n+        assertNotSame(\"Each Configuration should have its own WriteBehindCallbackPlugins\",\n+            conf1.writeBehindCallbackPlugin, conf2.writeBehindCallbackPlugin);\n+        \n+        WriteBehindCallback wbc1 = conf1.getWriteBehindCallbackInstance();\n+        WriteBehindCallback wbc2 = conf2.getWriteBehindCallbackInstance();\n+        assertNotNull(wbc1);\n+        assertNotNull(wbc2);\n+        assertNotSame(\"Each Configuration should have its own WriteBehindCallback\", wbc1, wbc2);\n+    }\n+    \n     public OpenJPAEntityManagerFactorySPI getCustomFactory(\n         Map<String, Object> extraProps) {\n         Map<String, Object> props = getPropertiesMap(getDefaultWriteBehindProperties());"}]}

