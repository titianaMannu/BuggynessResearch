{"sha":"f1d2bf4bef6b479bfe9ee5eda2e5364bba7d67d5","node_id":"MDY6Q29tbWl0MjA2MzY0OmYxZDJiZjRiZWY2YjQ3OWJmZTllZTVlZGEyZTUzNjRiYmE3ZDY3ZDU=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2009-01-23T18:23:18Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2009-01-23T18:23:18Z"},"message":"OPENJPA-863 Unexpected mere-cascade behavior when cascade.all/merge specified on both sides of relationships\nCommitting patch provided by Sandhya Truraga\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@737132 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"eba92f3a9d9bd8e09120b82d384b5c1ad5a4a736","url":"https://api.github.com/repos/apache/openjpa/git/trees/eba92f3a9d9bd8e09120b82d384b5c1ad5a4a736"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/f1d2bf4bef6b479bfe9ee5eda2e5364bba7d67d5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/f1d2bf4bef6b479bfe9ee5eda2e5364bba7d67d5","html_url":"https://github.com/apache/openjpa/commit/f1d2bf4bef6b479bfe9ee5eda2e5364bba7d67d5","comments_url":"https://api.github.com/repos/apache/openjpa/commits/f1d2bf4bef6b479bfe9ee5eda2e5364bba7d67d5/comments","author":null,"committer":null,"parents":[{"sha":"017e518bbac1b9e0c1f67dd5cd1330cd54c02106","url":"https://api.github.com/repos/apache/openjpa/commits/017e518bbac1b9e0c1f67dd5cd1330cd54c02106","html_url":"https://github.com/apache/openjpa/commit/017e518bbac1b9e0c1f67dd5cd1330cd54c02106"}],"stats":{"total":106,"additions":106,"deletions":0},"files":[{"sha":"8a3f192b3ce1d50c3178f2cb71ace4f38fb998ad","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AttachManager.java","status":"modified","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/apache/openjpa/blob/f1d2bf4bef6b479bfe9ee5eda2e5364bba7d67d5/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AttachManager.java","raw_url":"https://github.com/apache/openjpa/raw/f1d2bf4bef6b479bfe9ee5eda2e5364bba7d67d5/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AttachManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AttachManager.java?ref=f1d2bf4bef6b479bfe9ee5eda2e5364bba7d67d5","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.openjpa.kernel;\n \n+import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.Iterator;\n@@ -32,6 +33,7 @@\n import org.apache.openjpa.event.LifecycleEvent;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.meta.ClassMetaData;\n+import org.apache.openjpa.meta.FieldMetaData;\n import org.apache.openjpa.meta.ValueMetaData;\n import org.apache.openjpa.util.CallbackException;\n import org.apache.openjpa.util.Exceptions;\n@@ -57,6 +59,7 @@\n     private final boolean _copyNew;\n     private final boolean _failFast;\n     private final IdentityMap _attached = new IdentityMap();\n+    private final Collection _visitedNodes = new ArrayList();\n \n     // reusable strategies\n     private AttachStrategy _version = null;\n@@ -230,6 +233,13 @@ Object attach(Object toAttach, PersistenceCapable into,\n \n         //### need to handle ACT_CASCADE\n         int action = processArgument(toAttach);\n+        if ((action & OpCallbacks.ACT_RUN) == 0 &&\n+            (action & OpCallbacks.ACT_CASCADE) != 0) {\n+            if(_visitedNodes.contains(_broker.getStateManager(toAttach)))\n+                return toAttach;\n+            return handleCascade(toAttach,owner);\n+        }\n+\n         if ((action & OpCallbacks.ACT_RUN) == 0)\n             return toAttach;\n \n@@ -242,6 +252,24 @@ Object attach(Object toAttach, PersistenceCapable into,\n             owner, ownerMeta, explicit);\n     }\n \n+    private Object handleCascade(Object toAttach, OpenJPAStateManager owner) {\n+        FieldMetaData[] fields = _broker.getStateManager(toAttach).getMetaData()\n+            .getDefinedFields();\n+        for (int i = 0; i < fields.length; i++) {\n+            FieldMetaData fd = (FieldMetaData) fields[i];\n+            if (fd.getElement().getCascadeAttach() == fd.CASCADE_IMMEDIATE) {\n+                FieldMetaData[] inverseFieldMappings = fd.getInverseMetaDatas();\n+                if (inverseFieldMappings.length != 0) {\n+                    OpenJPAStateManager sm = _broker.getStateManager(toAttach);\n+                    _visitedNodes.add(sm);\n+                    getStrategy(toAttach).attachField(this, toAttach,\n+                        _broker.getStateManagerImpl(toAttach, true), fd, true);\n+                }\n+            }\n+        }\n+        return toAttach;\n+    }\n+    \n     /**\n      * Determine the action to take on the given argument.\n      */"},{"sha":"5ee372fd28221a98187fac6736dd368edbfc879b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/TestCascadeMerge.java","status":"added","additions":78,"deletions":0,"changes":78,"blob_url":"https://github.com/apache/openjpa/blob/f1d2bf4bef6b479bfe9ee5eda2e5364bba7d67d5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/TestCascadeMerge.java","raw_url":"https://github.com/apache/openjpa/raw/f1d2bf4bef6b479bfe9ee5eda2e5364bba7d67d5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/TestCascadeMerge.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/TestCascadeMerge.java?ref=f1d2bf4bef6b479bfe9ee5eda2e5364bba7d67d5","patch":"@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.detachment;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.jdbc.kernel.EntityF;\n+import org.apache.openjpa.jdbc.kernel.EntityG;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+public class TestCascadeMerge extends SingleEMFTestCase {\n+\n+    private EntityG enG1;\n+    private EntityG enG2;\n+\n+    public void setUp() {\n+        setUp(CLEAR_TABLES,EntityF.class, EntityG.class);\n+\n+        createTestData();\n+    }\n+\n+    private void createTestData() {\n+        enG1 = new EntityG();\n+        enG1.setId(1);\n+\n+        enG2 = new EntityG();\n+        enG2.setId(2);\n+    }\n+\n+    public void testCascadeMerge() {\n+        EntityManager em = emf.createEntityManager();\n+        try {\n+            em.getTransaction().begin();\n+            EntityF enF = new EntityF();\n+            enF.setId(1);\n+            em.persist(enF);\n+            em.getTransaction().commit();\n+            em.close();\n+\n+            em = emf.createEntityManager();\n+            em.getTransaction().begin();\n+\n+            EntityF enF1 = em.find(EntityF.class, 1);\n+            enG1.setEntityF(enF1);\n+            enG2.setEntityF(enF1);\n+            List<EntityG> l = new ArrayList<EntityG>();\n+            l.add(enG1);\n+            l.add(enG2);\n+            enF1.setListG(l);\n+            em.merge(enG1);\n+            em.getTransaction().commit();\n+        }\n+        finally {\n+            if (em.getTransaction().isActive())\n+                em.getTransaction().rollback();\n+            em.close();\n+        }\n+    }\n+}"}]}

