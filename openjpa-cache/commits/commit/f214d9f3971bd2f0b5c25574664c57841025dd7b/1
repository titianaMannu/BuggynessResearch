{"sha":"f214d9f3971bd2f0b5c25574664c57841025dd7b","node_id":"MDY6Q29tbWl0MjA2MzY0OmYyMTRkOWYzOTcxYmQyZjBiNWMyNTU3NDY2NGM1Nzg0MTAyNWRkN2I=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-08-28T21:37:45Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-08-28T21:37:45Z"},"message":"OPENJPA-1013: Visitor pattern on criteria expressions\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@809037 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"53267f15fc9fae972bbd5186c99c428c44768859","url":"https://api.github.com/repos/apache/openjpa/git/trees/53267f15fc9fae972bbd5186c99c428c44768859"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/f214d9f3971bd2f0b5c25574664c57841025dd7b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/f214d9f3971bd2f0b5c25574664c57841025dd7b","html_url":"https://github.com/apache/openjpa/commit/f214d9f3971bd2f0b5c25574664c57841025dd7b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/f214d9f3971bd2f0b5c25574664c57841025dd7b/comments","author":null,"committer":null,"parents":[{"sha":"0795778d3d9f1b3b8b3dd7036fd98df6970a23b3","url":"https://api.github.com/repos/apache/openjpa/commits/0795778d3d9f1b3b8b3dd7036fd98df6970a23b3","html_url":"https://github.com/apache/openjpa/commit/0795778d3d9f1b3b8b3dd7036fd98df6970a23b3"}],"stats":{"total":213,"additions":208,"deletions":5},"files":[{"sha":"baa07358c67316b0720437ccbe15002b25335175","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestEdit.java","status":"modified","additions":83,"deletions":0,"changes":83,"blob_url":"https://github.com/apache/openjpa/blob/f214d9f3971bd2f0b5c25574664c57841025dd7b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestEdit.java","raw_url":"https://github.com/apache/openjpa/raw/f214d9f3971bd2f0b5c25574664c57841025dd7b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestEdit.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestEdit.java?ref=f214d9f3971bd2f0b5c25574664c57841025dd7b","patch":"@@ -21,14 +21,18 @@\n import java.util.Date;\n import java.util.List;\n \n+import javax.persistence.Query;\n import javax.persistence.Tuple;\n+import javax.persistence.TypedQuery;\n import javax.persistence.criteria.CriteriaQuery;\n import javax.persistence.criteria.Expression;\n import javax.persistence.criteria.Order;\n import javax.persistence.criteria.Predicate;\n import javax.persistence.criteria.Root;\n import javax.persistence.criteria.Selection;\n \n+import org.apache.openjpa.persistence.OpenJPAPersistence;\n+\n /**\n  * Test editing of Criteria Query.\n  * \n@@ -186,6 +190,85 @@ public void testRootIsNotImplicitlyDefined() {\n         assertFails(\"Expected to fail without a defined root\", c);\n     }\n     \n+    public void testEditParameterizedPredicate() {\n+        String jpql = \"select p from Person p where p.name=:p1\";\n+        String editedjpql = \"select p from Person p where p.name=:p1 and p.name=:p2\";\n+        \n+        CriteriaQuery<Person> c = cb.createQuery(Person.class);\n+        Root<Person> p = c.from(Person.class);\n+        c.where(cb.equal(p.get(Person_.name), cb.parameter(String.class, \"p1\")));\n+        \n+        assertEquivalence(c, jpql, new String[]{\"p1\"}, new String[]{\"XYZ\"});\n+        \n+        Predicate where = c.getRestriction();\n+        c.where(cb.and(where, cb.equal(p.get(Person_.name), cb.parameter(String.class, \"p2\"))));\n+        \n+        assertEquivalence(c, editedjpql, new String[]{\"p1\", \"p2\"}, new String[]{\"MNO\", \"ABC\"});\n+    }\n+    \n+    public void testEditParameterizedPredicateReplaced() {\n+        String jpql = \"select p from Person p where p.name=:p1 and p.name=:p2\";\n+        String editedjpql = \"select p from Person p where p.name=:p3\";\n+        \n+        CriteriaQuery<Person> c = cb.createQuery(Person.class);\n+        Root<Person> p = c.from(Person.class);\n+        c.where(cb.and(cb.equal(p.get(Person_.name), cb.parameter(String.class, \"p1\")),\n+                       cb.equal(p.get(Person_.name), cb.parameter(String.class, \"p2\"))));\n+        assertEquals(2,c.getParameters().size());\n+        assertEquivalence(c, jpql, new String[]{\"p1\", \"p2\"}, new String[]{\"XYZ\", \"ABC\"});\n+        \n+        c.where(cb.equal(p.get(Person_.name), cb.parameter(String.class, \"p3\")));\n+        \n+        assertEquivalence(c, editedjpql, new String[]{\"p3\"}, new String[]{\"MNO\"});\n+    }\n+    \n+    public void testEditParameterizedPredicateRemoved() {\n+        String jpql = \"select p from Person p where p.name=:p1 and p.name=:p2\";\n+        String editedjpql = \"select p from Person p where p.name=:p1\";\n+        \n+        CriteriaQuery<Person> c = cb.createQuery(Person.class);\n+        Root<Person> p = c.from(Person.class);\n+        c.where(cb.and(cb.equal(p.get(Person_.name), cb.parameter(String.class, \"p1\")),\n+                       cb.equal(p.get(Person_.name), cb.parameter(String.class, \"p2\"))));\n+        assertEquals(2,c.getParameters().size());\n+        assertEquivalence(c, jpql, new String[]{\"p1\", \"p2\"}, new String[]{\"XYZ\", \"ABC\"});\n+        \n+        c.where(cb.equal(p.get(Person_.name), cb.parameter(String.class, \"p1\")));\n+        \n+        assertEquivalence(c, editedjpql, new String[]{\"p1\"}, new String[]{\"MNO\"});\n+    }\n+    \n+    public void testSerachWithinResult() {\n+        em.getTransaction().begin();\n+        em.createQuery(\"DELETE FROM Person p\").executeUpdate();\n+        em.getTransaction().commit();\n+        em.getTransaction().begin();\n+        Person p1 = new Person(); p1.setName(\"Pinaki\");\n+        Person p2 = new Person(); p2.setName(\"Pacino\");\n+        Person p3 = new Person(); p3.setName(\"Tom\");\n+        Person p4 = new Person(); p4.setName(\"Dick\");\n+        em.persist(p1); em.persist(p2);em.persist(p3); em.persist(p4);\n+        em.getTransaction().commit();\n+        \n+        CriteriaQuery<Person> c = cb.createQuery(Person.class);\n+        Root<Person> p = c.from(Person.class);\n+        c.select(p);\n+        Predicate like = cb.like(p.get(Person_.name), cb.parameter(String.class, \"pattern\"));\n+        c.where(like);\n+        TypedQuery<Person> q1 = em.createQuery(c).setParameter(\"pattern\", \"P%\");\n+        List<Person> r1 = q1.getResultList();\n+        assertEquals(2, r1.size());\n+        \n+        Predicate exact = cb.equal(p.get(Person_.name), cb.parameter(String.class, \"exact\"));\n+        c.where(like, exact);\n+        TypedQuery<Person> q2 = em.createQuery(c).setParameter(\"pattern\", \"P%\").setParameter(\"exact\",\"Pinaki\");\n+        OpenJPAPersistence.cast(q2).setCandidateCollection(r1);\n+        auditor.clear();\n+        List<Person> r2 = q2.getResultList();\n+        assertTrue(auditor.getSQLs().isEmpty());\n+        assertEquals(1, r2.size());\n+    }\n+    \n     void assertFails(String message, CriteriaQuery<?> c) {\n         try {\n             em.createQuery(c);"},{"sha":"0e8d9d55cba1729d91dccbfd3a45614a56ecaf06","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/f214d9f3971bd2f0b5c25574664c57841025dd7b/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/f214d9f3971bd2f0b5c25574664c57841025dd7b/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java?ref=f214d9f3971bd2f0b5c25574664c57841025dd7b","patch":"@@ -80,6 +80,7 @@\n import org.apache.openjpa.meta.QueryMetaData;\n import org.apache.openjpa.meta.SequenceMetaData;\n import org.apache.openjpa.persistence.criteria.CriteriaBuilder;\n+import org.apache.openjpa.persistence.criteria.CriteriaExpressionVisitor;\n import org.apache.openjpa.persistence.criteria.CriteriaQueryImpl;\n import org.apache.openjpa.persistence.validation.ValidationUtils;\n import org.apache.openjpa.util.Exceptions;\n@@ -1543,10 +1544,9 @@ public void detach(Object entity) {\n      */\n     public <T> TypedQuery<T> createQuery(CriteriaQuery<T> criteriaQuery) {\n         CriteriaQueryImpl<T> impl = (CriteriaQueryImpl<T>)criteriaQuery;\n-        impl.assertRoot();\n-        impl.assertSelection();\n+        impl.compile(); // important to collect parameters to be set on executable query\n+        \n         org.apache.openjpa.kernel.Query kernelQuery =_broker.newQuery(CriteriaBuilder.LANG_CRITERIA, criteriaQuery);\n-        kernelQuery.compile();\n         QueryImpl<T> facadeQuery = new QueryImpl<T>(this, _ret, kernelQuery);\n         Set<ParameterExpression<?>> params = impl.getParameters();\n         "},{"sha":"bcf6fc7d5bba1d5f66e85b4533735c91c6af654b","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaExpression.java","status":"added","additions":39,"deletions":0,"changes":39,"blob_url":"https://github.com/apache/openjpa/blob/f214d9f3971bd2f0b5c25574664c57841025dd7b/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaExpression.java","raw_url":"https://github.com/apache/openjpa/raw/f214d9f3971bd2f0b5c25574664c57841025dd7b/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaExpression.java?ref=f214d9f3971bd2f0b5c25574664c57841025dd7b","patch":"@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.criteria;\n+\n+import javax.persistence.criteria.Expression;\n+\n+/**\n+ * Extends specification interface to define contract for Visitor pattern.\n+ * \n+ * @author Pinaki Poddar\n+ *\n+ * @param <X>\n+ */\n+public interface CriteriaExpression<X> extends Expression<X> {\n+    /**\n+     * Accept visit from the given visitor. The receiver is responsible \n+     * to propagate the visitor to the constituent sub-nodes if any.\n+     * \n+     * @param visitor a processor to walk the nodes of a tree.\n+     */\n+    void acceptVisit(CriteriaExpressionVisitor visitor);\n+\n+}"},{"sha":"f62761027d6b7c39a85b57f78dcf89def2ceb9a6","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaExpressionVisitor.java","status":"added","additions":83,"deletions":0,"changes":83,"blob_url":"https://github.com/apache/openjpa/blob/f214d9f3971bd2f0b5c25574664c57841025dd7b/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaExpressionVisitor.java","raw_url":"https://github.com/apache/openjpa/raw/f214d9f3971bd2f0b5c25574664c57841025dd7b/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaExpressionVisitor.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaExpressionVisitor.java?ref=f214d9f3971bd2f0b5c25574664c57841025dd7b","patch":"@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.criteria;\n+\n+import java.util.HashSet;\n+import java.util.IdentityHashMap;\n+import java.util.Set;\n+\n+/**\n+ * A visitor for Criteria Expression nodes.\n+ * \n+ * @author Pinaki Poddar\n+ * @since 2.0.0\n+ *\n+ */\n+public interface CriteriaExpressionVisitor {\n+    /**\n+     * Enter the given expression.\n+     */\n+    void enter(CriteriaExpression<?> expr);\n+    \n+    /**\n+     * Exit the given expression.\n+     */\n+    void exit(CriteriaExpression<?> expr);\n+    \n+    boolean isVisited(CriteriaExpression<?> expr);\n+    \n+    /**\n+     * An abstract implementation that can detect cycles during traversal.\n+     *  \n+     */\n+    public static abstract class AbstractVisitor implements CriteriaExpressionVisitor {\n+        protected final Set<CriteriaExpression<?>> _visited = new HashSet<CriteriaExpression<?>>();\n+        \n+        /**\n+         * Affirms if this expression has been visited before.\n+         * Remembers the given node as visited.\n+         */\n+        public boolean isVisited(CriteriaExpression<?> expr) {\n+            return _visited.contains(expr);\n+        }\n+    }\n+    \n+    /**\n+     * A visitor to register Parameter expression of a query.\n+     *\n+     */\n+    public static class ParameterVisitor extends AbstractVisitor {\n+        private final CriteriaQueryImpl<?> query;\n+        \n+        public ParameterVisitor(CriteriaQueryImpl<?> q) {\n+            query = q;\n+        }\n+        \n+        public void enter(CriteriaExpression<?> expr) {\n+            if (expr != null && expr instanceof ParameterExpressionImpl) {\n+                query.registerParameter((ParameterExpressionImpl<?>)expr);\n+            }\n+        }\n+\n+        public void exit(CriteriaExpression<?> expr) {\n+            _visited.add(expr);\n+        }\n+        \n+    }\n+}"},{"sha":"ab7f970b88101bd84a1c63be00b4ffa9544362f2","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/ParameterExpressionImpl.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/f214d9f3971bd2f0b5c25574664c57841025dd7b/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/ParameterExpressionImpl.java","raw_url":"https://github.com/apache/openjpa/raw/f214d9f3971bd2f0b5c25574664c57841025dd7b/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/ParameterExpressionImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/ParameterExpressionImpl.java?ref=f214d9f3971bd2f0b5c25574664c57841025dd7b","patch":"@@ -86,8 +86,6 @@ public String toString() {\n     \n     @Override\n     public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQueryImpl<?> q) {\n-        q.registerParameter(this);\n-        \n         Class<?> clzz = getJavaType();\n         Object paramKey = _name == null ? _index : _name;\n         boolean isCollectionValued  = Collection.class.isAssignableFrom(clzz);"}]}

