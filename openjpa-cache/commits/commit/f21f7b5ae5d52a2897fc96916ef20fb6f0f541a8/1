{"sha":"f21f7b5ae5d52a2897fc96916ef20fb6f0f541a8","node_id":"MDY6Q29tbWl0MjA2MzY0OmYyMWY3YjVhZTVkNTJhMjg5N2ZjOTY5MTZlZjIwZmI2ZjBmNTQxYTg=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-04-02T15:38:34Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-04-02T15:38:34Z"},"message":"OPENJPA-1004: fix problems with IdClass which has a derived identity and the relation corresponding to the derived identity uses generatedKey\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@761326 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"8fe5ae88b88d206dfcb6d2a64c66920489e4f1ab","url":"https://api.github.com/repos/apache/openjpa/git/trees/8fe5ae88b88d206dfcb6d2a64c66920489e4f1ab"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/f21f7b5ae5d52a2897fc96916ef20fb6f0f541a8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/f21f7b5ae5d52a2897fc96916ef20fb6f0f541a8","html_url":"https://github.com/apache/openjpa/commit/f21f7b5ae5d52a2897fc96916ef20fb6f0f541a8","comments_url":"https://api.github.com/repos/apache/openjpa/commits/f21f7b5ae5d52a2897fc96916ef20fb6f0f541a8/comments","author":null,"committer":null,"parents":[{"sha":"33ed6bfb7f4c9372cc2196394e6dc9dc2b9ee203","url":"https://api.github.com/repos/apache/openjpa/commits/33ed6bfb7f4c9372cc2196394e6dc9dc2b9ee203","html_url":"https://github.com/apache/openjpa/commit/33ed6bfb7f4c9372cc2196394e6dc9dc2b9ee203"}],"stats":{"total":258,"additions":253,"deletions":5},"files":[{"sha":"816aeb5a3690b96d3050406f17f142b1d8119fae","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/AbstractUpdateManager.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/f21f7b5ae5d52a2897fc96916ef20fb6f0f541a8/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/AbstractUpdateManager.java","raw_url":"https://github.com/apache/openjpa/raw/f21f7b5ae5d52a2897fc96916ef20fb6f0f541a8/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/AbstractUpdateManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/AbstractUpdateManager.java?ref=f21f7b5ae5d52a2897fc96916ef20fb6f0f541a8","patch":"@@ -79,7 +79,7 @@ public Collection flush(Collection states, JDBCStore store) {\n         }\n     }\n \n-    private Collection flush(Collection states, JDBCStore store,\n+    protected Collection flush(Collection states, JDBCStore store,\n         PreparedStatementManager psMgr) {\n         // run through all the states and update them as necessary\n         RowManager rowMgr = newRowManager();"},{"sha":"252066188a505318eb669f57e66ae69f7a0c389d","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedStatementManagerImpl.java","status":"modified","additions":25,"deletions":1,"changes":26,"blob_url":"https://github.com/apache/openjpa/blob/f21f7b5ae5d52a2897fc96916ef20fb6f0f541a8/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedStatementManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/f21f7b5ae5d52a2897fc96916ef20fb6f0f541a8/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedStatementManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedStatementManagerImpl.java?ref=f21f7b5ae5d52a2897fc96916ef20fb6f0f541a8","patch":"@@ -30,14 +30,17 @@\n \n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n+import org.apache.openjpa.jdbc.meta.FieldMapping;\n import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.jdbc.sql.DBDictionary;\n import org.apache.openjpa.jdbc.sql.Row;\n import org.apache.openjpa.jdbc.sql.RowImpl;\n import org.apache.openjpa.jdbc.sql.SQLExceptions;\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n+import org.apache.openjpa.kernel.StateManagerImpl;\n import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.meta.ValueStrategies;\n import org.apache.openjpa.util.ApplicationIds;\n import org.apache.openjpa.util.OpenJPAException;\n import org.apache.openjpa.util.OptimisticException;\n@@ -123,7 +126,16 @@ else if (row.getAction() == Row.ACTION_INSERT)\n             }\n             if (autoAssignColNames != null)\n                 populateAutoAssignCols(stmnt, autoAssign, autoAssignColNames, row);\n-\n+            else {\n+                StateManagerImpl sm = (StateManagerImpl)row.getPrimaryKey();\n+                if (sm != null) {\n+                    ClassMapping meta = (ClassMapping)sm.getMetaData();\n+                    if (hasGeneratedKey(meta)) {\n+                        sm.setObjectId(ApplicationIds.create(\n+                            sm.getPersistenceCapable(), meta));\n+                    }\n+                }\n+            }\n         } catch (SQLException se) {\n             throw SQLExceptions.getStore(se, row.getFailedObject(), _dict);\n         } finally {\n@@ -135,6 +147,18 @@ else if (row.getAction() == Row.ACTION_INSERT)\n             }\n         }\n     }\n+    \n+    private boolean hasGeneratedKey(ClassMapping meta) {\n+        FieldMapping[] pks = meta.getPrimaryKeyFieldMappings();\n+        for (int i = 0; i < pks.length; i++) {\n+            ClassMapping pkMeta = pks[i].getTypeMapping(); \n+            if (pkMeta != null) {\n+                return hasGeneratedKey(pkMeta);\n+            } else if (pks[i].getValueStrategy() == ValueStrategies.AUTOASSIGN)\n+                return true;\n+        }\n+        return false;\n+    }\n \n     /** \n      * This method will only be called when there is auto assign columns."},{"sha":"f6142a7eab21bd72d39b0d09eafe361e19e2defe","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/f21f7b5ae5d52a2897fc96916ef20fb6f0f541a8/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/f21f7b5ae5d52a2897fc96916ef20fb6f0f541a8/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java?ref=f21f7b5ae5d52a2897fc96916ef20fb6f0f541a8","patch":"@@ -1472,6 +1472,9 @@ public Object getGenericContext() {\n \n     public Object fetchObjectId() {\n         try {\n+            if (hasGeneratedKey() && _state instanceof PNewState && \n+                _oid == null) \n+                return _oid;\n             assignObjectId(true);\n             if (_oid == null || !_broker.getConfiguration().\n                 getCompatibilityInstance().getCopyObjectIds())\n@@ -1484,6 +1487,15 @@ public Object fetchObjectId() {\n             throw translate(re);\n         }\n     }\n+    \n+    private boolean hasGeneratedKey() {\n+        FieldMetaData[] pkFields = _meta.getPrimaryKeyFields();\n+        for (int i = 0; i < pkFields.length; i++) {\n+            if (pkFields[i].getValueStrategy() == ValueStrategies.AUTOASSIGN)\n+                return true;\n+        }\n+        return false;\n+    }\n \n     public Object getPCPrimaryKey(Object oid, int field) {\n         FieldMetaData fmd = _meta.getField(field);"},{"sha":"6783613d2f3a1eb4943f50ed123b6a8661cb497f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Dependent4.java","status":"added","additions":52,"deletions":0,"changes":52,"blob_url":"https://github.com/apache/openjpa/blob/f21f7b5ae5d52a2897fc96916ef20fb6f0f541a8/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Dependent4.java","raw_url":"https://github.com/apache/openjpa/raw/f21f7b5ae5d52a2897fc96916ef20fb6f0f541a8/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Dependent4.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Dependent4.java?ref=f21f7b5ae5d52a2897fc96916ef20fb6f0f541a8","patch":"@@ -0,0 +1,52 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.enhance.identity;\r\n+import java.io.Serializable;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+@Entity\r\n+@IdClass(DependentId4.class)\r\n+public class Dependent4 implements Serializable {\r\n+\r\n+\t@Id\r\n+\t@Column(name = \"id\", unique = false, nullable = false)\r\n+\tprivate long id;\r\n+\r\n+\t@Id\r\n+\t@ManyToOne\r\n+\t@JoinColumn(name = \"parent_id\", referencedColumnName = \"id\")\r\n+\tprivate Employee4 parent;\r\n+\r\n+\tpublic long getId() {\r\n+\t\treturn id;\r\n+\t}\r\n+\r\n+\tpublic void setId(long id) {\r\n+\t\tthis.id = id;\r\n+\t}\r\n+\r\n+\tpublic Employee4 getParent() {\r\n+\t\treturn parent;\r\n+\t}\r\n+\r\n+\tpublic void setParent(Employee4 parent) {\r\n+\t\tthis.parent = parent; \r\n+\t}\r\n+}\r"},{"sha":"f64b2f46d90c971d5cf055236813589e41327601","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/DependentId4.java","status":"added","additions":35,"deletions":0,"changes":35,"blob_url":"https://github.com/apache/openjpa/blob/f21f7b5ae5d52a2897fc96916ef20fb6f0f541a8/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/DependentId4.java","raw_url":"https://github.com/apache/openjpa/raw/f21f7b5ae5d52a2897fc96916ef20fb6f0f541a8/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/DependentId4.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/DependentId4.java?ref=f21f7b5ae5d52a2897fc96916ef20fb6f0f541a8","patch":"@@ -0,0 +1,35 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.enhance.identity;\r\n+\r\n+public class DependentId4 {\r\n+    public long id;\r\n+    public long parent;\r\n+    \r\n+    public boolean equals(Object o) {\r\n+    \tif (!(o instanceof DependentId4)) return false;\r\n+    \tif (id != ((DependentId4)o).id) return false;\r\n+       \tif (parent != ((DependentId4)o).parent) return false;\r\n+       \treturn true;\r\n+    }\r\n+\r\n+    public int hashCode() {\r\n+    \treturn (int) (id + 31 * parent);\r\n+    }\r\n+}\r"},{"sha":"837358ae02dc63fb01ac7744ceb41f5cda264ea1","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Employee4.java","status":"added","additions":63,"deletions":0,"changes":63,"blob_url":"https://github.com/apache/openjpa/blob/f21f7b5ae5d52a2897fc96916ef20fb6f0f541a8/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Employee4.java","raw_url":"https://github.com/apache/openjpa/raw/f21f7b5ae5d52a2897fc96916ef20fb6f0f541a8/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Employee4.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Employee4.java?ref=f21f7b5ae5d52a2897fc96916ef20fb6f0f541a8","patch":"@@ -0,0 +1,63 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.enhance.identity;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+import java.util.*;\r\n+\r\n+@Entity\r\n+public class Employee4 {\r\n+    @Id\r\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n+    @Column(name = \"id\", insertable = false, updatable = false, nullable = false)\r\n+\tprivate long id;\r\n+\t\r\n+    @OneToMany(cascade = CascadeType.ALL, mappedBy = \"parent\")\r\n+\tprivate List<Dependent4> children = new ArrayList<Dependent4>();\r\n+\t\r\n+    private int age;\r\n+    \r\n+    public int getAge() {\r\n+    \treturn age;\r\n+    }\r\n+    \r\n+    public void setAge(int age) {\r\n+    \tthis.age = age;\r\n+    }\r\n+    \r\n+    public long getId() {\r\n+        return id;\r\n+    }\r\n+\r\n+    public List<Dependent4> getChildren() {\r\n+        return children;\r\n+    }\r\n+\r\n+    public void addChild(Dependent4 child) {\r\n+        if (child == null) {\r\n+            throw new IllegalArgumentException(\"Cannot add a null Child\");\r\n+        }\r\n+        this.getChildren().add(child);\r\n+    }\r\n+\r\n+    public void setChildren(List<Dependent4> children) {\r\n+        this.children = children;\r\n+    }\r\n+}\r"},{"sha":"a95a5bb2b849009c64e3db723a0ac4b1d9d0b122","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/TestMappedById.java","status":"modified","additions":65,"deletions":3,"changes":68,"blob_url":"https://github.com/apache/openjpa/blob/f21f7b5ae5d52a2897fc96916ef20fb6f0f541a8/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/TestMappedById.java","raw_url":"https://github.com/apache/openjpa/raw/f21f7b5ae5d52a2897fc96916ef20fb6f0f541a8/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/TestMappedById.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/TestMappedById.java?ref=f21f7b5ae5d52a2897fc96916ef20fb6f0f541a8","patch":"@@ -27,8 +27,6 @@\n import javax.persistence.EntityTransaction;\n import javax.persistence.Query;\n \n-import junit.framework.Assert;\n-\n import org.apache.openjpa.enhance.PersistenceCapable;\n import org.apache.openjpa.kernel.StateManagerImpl;\n import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n@@ -66,6 +64,8 @@\n     public int eId2 = 1;\n     public int dId2 = 1;\n     public int eId3 = 1;\n+    public int eId4 = 1;\n+    public int dId4 = 1;\n     public int dId3 = 1;\n     public int pId1 = 1;\n     public int mId1 = 1;\n@@ -84,7 +84,7 @@ public void setUp() throws Exception {\n             Person2.class, Person3.class, MedicalHistory3.class, \n             Person4.class, PersonId4.class, MedicalHistory4.class,\n             Dependent3.class, Employee3.class, DependentId3.class, \n-            Parent3.class);\n+            Parent3.class, Dependent4.class, Employee4.class);\n     }\n \n     /**\n@@ -641,4 +641,66 @@ public void assertMedicalHistory4(MedicalHistory4 m, String firstName) {\n         MedicalHistory4 m1 = m.getPatient().getMedical();\n         assertEquals(m1, m);\n     }\n+    \n+    /**\n+     * Derived Identity with IdClass and generatedKey\n+     */\n+    public void testPersistDerivedIdentityUsingIdClassAndGeneratedKey() {\n+        EntityManager em = emf.createEntityManager();\n+        EntityTransaction tran = em.getTransaction();\n+        for (int i = 0; i < numEmployees; i++)\n+            persistEmployee4(em, eId4++);\n+        tran.begin();\n+        em.flush();\n+        tran.commit();\n+        em.close();\n+    }\n+\n+    /**\n+     * Derived Identity with IdClass and generatedKey\n+     */\n+    public void testMergeDerivedIdentityUsingIdClassAndGeneratedKey() {\n+        EntityManager em = emf.createEntityManager();\n+        EntityTransaction tran = em.getTransaction();\n+        for (int i = 0; i < numEmployees; i++)\n+            mergeEmployee4(em, eId4++);\n+        tran.begin();\n+        em.flush();\n+        tran.commit();\n+        em.close();\n+    }\n+\n+    public Employee4 persistEmployee4(EntityManager em, int id) {\n+        Employee4 p = new Employee4();\n+        p.setAge(id);\n+        for (int i = 0; i < numDependentsPerEmployee; i++) {\n+            Dependent4 c = persistDependent4(em, dId4++, p);\n+            p.addChild(c);\n+        }\n+        em.persist(p);\n+        return p;\n+    }\n+    \n+    public Dependent4 persistDependent4(EntityManager em, int id, Employee4 p) {\n+        Dependent4 c = new Dependent4();\n+        c.setId(id);\n+        c.setParent(p);\n+        em.persist(c);\n+        return c;\n+    }\n+    \n+    public Employee4 mergeEmployee4(EntityManager em, int id) {\n+        Employee4 e = new Employee4();\n+        e.setAge(id);\n+        e = em.merge(e);\n+        for (int i = 0; i < numDependentsPerEmployee; i++) {\n+            Dependent4 d = new Dependent4();\n+            d.setId(dId4++);\n+            d.setParent(e);\n+            // do not need to merge d, as Employee is cascade.All\n+            d = em.merge(d);\n+            e.addChild(d);\n+        }\n+        return e;\n+    }\n }"}]}

