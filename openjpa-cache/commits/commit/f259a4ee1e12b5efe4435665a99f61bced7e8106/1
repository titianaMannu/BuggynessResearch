{"sha":"f259a4ee1e12b5efe4435665a99f61bced7e8106","node_id":"MDY6Q29tbWl0MjA2MzY0OmYyNTlhNGVlMWUxMmI1ZWZlNDQzNTY2NWE5OWY2MWJjZWQ3ZTgxMDY=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-02-10T20:35:22Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-02-10T20:35:22Z"},"message":"OPENJPA-1504 Update TestTraversableResolver so it can be used with Hibernate or Agimatec providers.  Upgrade to agimatec-validation-0.9.6-SNAPSHOT, which now supports constraints.xml so all junits pass again with it.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@908660 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"93dcc4d635c28a146bd10b2957e04d413745bfa5","url":"https://api.github.com/repos/apache/openjpa/git/trees/93dcc4d635c28a146bd10b2957e04d413745bfa5"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/f259a4ee1e12b5efe4435665a99f61bced7e8106","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/f259a4ee1e12b5efe4435665a99f61bced7e8106","html_url":"https://github.com/apache/openjpa/commit/f259a4ee1e12b5efe4435665a99f61bced7e8106","comments_url":"https://api.github.com/repos/apache/openjpa/commits/f259a4ee1e12b5efe4435665a99f61bced7e8106/comments","author":null,"committer":null,"parents":[{"sha":"4a987190d99d77dd18878423280489367bd17397","url":"https://api.github.com/repos/apache/openjpa/commits/4a987190d99d77dd18878423280489367bd17397","html_url":"https://github.com/apache/openjpa/commit/4a987190d99d77dd18878423280489367bd17397"}],"stats":{"total":99,"additions":74,"deletions":25},"files":[{"sha":"847d478d2c91416c71338d1d4648dd14a5ae63fb","filename":"openjpa-integration/validation/pom.xml","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/f259a4ee1e12b5efe4435665a99f61bced7e8106/openjpa-integration/validation/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/f259a4ee1e12b5efe4435665a99f61bced7e8106/openjpa-integration/validation/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/validation/pom.xml?ref=f259a4ee1e12b5efe4435665a99f61bced7e8106","patch":"@@ -73,7 +73,7 @@\n                 <dependency>\n                     <groupId>com.agimatec</groupId>\n                     <artifactId>agimatec-jsr303</artifactId>\n-                    <version>0.9.3</version>\n+                    <version>0.9.6-SNAPSHOT</version>\n                     <scope>test</scope>\n                     <exclusions>\n                         <!-- force usage of the geronimo-validation_1.0_spec -->\n@@ -91,13 +91,13 @@\n                 <dependency>\n                     <groupId>com.agimatec</groupId>\n                     <artifactId>agimatec-validation</artifactId>\n-                    <version>0.9.3</version>\n+                    <version>0.9.6-SNAPSHOT</version>\n                     <scope>test</scope>\n                 </dependency>\n                 <dependency>\n                     <groupId>commons-beanutils</groupId>\n                     <artifactId>commons-beanutils</artifactId>\n-                    <version>1.8.0</version>\n+                    <version>1.8.2</version>\n                     <scope>test</scope>\n                 </dependency>\n                 <dependency>"},{"sha":"83134903c5e5ae40f525cc7b705c22c499a56eb9","filename":"openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/TestTraversableResolver.java","status":"modified","additions":71,"deletions":22,"changes":93,"blob_url":"https://github.com/apache/openjpa/blob/f259a4ee1e12b5efe4435665a99f61bced7e8106/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/TestTraversableResolver.java","raw_url":"https://github.com/apache/openjpa/raw/f259a4ee1e12b5efe4435665a99f61bced7e8106/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/TestTraversableResolver.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/TestTraversableResolver.java?ref=f259a4ee1e12b5efe4435665a99f61bced7e8106","patch":"@@ -19,6 +19,8 @@\n package org.apache.openjpa.integration.validation;\n \n import java.lang.annotation.ElementType;\n+import java.lang.reflect.Method;\n+import java.security.AccessController;\n import java.util.HashMap;\n import java.util.Map;\n \n@@ -27,13 +29,15 @@\n import javax.validation.TraversableResolver;\n \n import junit.framework.TestCase;\n-\n+import org.apache.openjpa.lib.log.Log;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.persistence.OpenJPAEntityManager;\n import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n import org.apache.openjpa.persistence.OpenJPAPersistence;\n import org.apache.openjpa.persistence.validation.TraversableResolverImpl;\n-\n-import org.hibernate.validator.engine.PathImpl;\n+// The following 2 are dynamically loaded by loadPathImpl() from setUp()\n+// import org.hibernate.validator.engine.PathImpl;\n+// import com.agimatec.validation.jsr303.util.PathImpl;\n \n /**\n  * Test the TraversableResolver methods\n@@ -50,9 +54,10 @@\n  */\n public class TestTraversableResolver extends TestCase {\n     private static OpenJPAEntityManagerFactorySPI emf = null;\n-    private OpenJPAEntityManager em;\n+    private Log log = null;\n+    private OpenJPAEntityManager em = null;\n     private Book book;\n-    \n+\n     /**\n      * Create a book with a title that is too long, and the embedded\n      * publisher has a name that is also too long. However, use a\n@@ -62,9 +67,7 @@\n      */\n     @Override\n     public void setUp() {\n-        createEMF(\"non-validation-pu\", \"SchemaAction='drop,add')\");\n         createBook(1, \"long title\", 234);\n-        emf.close();\n     }\n     \n     private void createEMF(String pu, String schemaAction) {\n@@ -76,6 +79,19 @@ private void createEMF(String pu, String schemaAction) {\n             \"org/apache/openjpa/integration/validation/persistence.xml\",\n             map);\n         assertNotNull(emf);\n+        log = emf.getConfiguration().getLog(\"Tests\");\n+    }\n+\n+    private void closeEMF() {\n+        log = null;\n+        if (em != null) {\n+            em.close();\n+            em = null;\n+        }\n+        if (emf != null) {\n+            emf.close();\n+            emf = null;\n+        }\n     }\n     \n     /**\n@@ -102,8 +118,6 @@ public void testLoadedTitle() {\n             exceptionCaught = true;\n         }\n         assertTrue(exceptionCaught);\n-        em.close();\n-        emf.close();\n     }\n     \n     /**\n@@ -126,8 +140,7 @@ public void testUnloaded() {\n             exceptionCaught = true;\n         }\n         assertFalse(exceptionCaught);\n-        em.close();\n-        emf.close();\n+        closeEMF();\n     }\n     \n     /**\n@@ -154,8 +167,7 @@ public void testCascading() {\n             exceptionCaught = true;\n         }\n         assertTrue(exceptionCaught);\n-        em.close();\n-        emf.close();\n+        closeEMF();\n     }\n     \n     /**\n@@ -168,14 +180,14 @@ public void testPages() {\n         em.getTransaction().begin();\n         book = em.find(org.apache.openjpa.integration.validation.Book.class, 1);\n         assertNotNull(book);\n-        PathImpl path = PathImpl.createPathFromString(\"org.apache.openjpa.integration.validation.Book.pages\");\n-        Path.Node node = path.getLeafNode();\n+        // PathImpl path = PathImpl.createPathFromString(\"org.apache.openjpa.integration.validation.Book.pages\");\n+        // Path.Node node = path.getLeafNode();\n+        Path.Node node = getLeafNodeFromString(\"org.apache.openjpa.integration.validation.Book.pages\");\n         TraversableResolver tr = new TraversableResolverImpl();\n         assertTrue(tr.isReachable(book, node, Book.class, null, ElementType.METHOD));\n         assertTrue(tr.isCascadable(book, node, Book.class, null, ElementType.METHOD));\n         em.getTransaction().commit();\n-        em.close();\n-        emf.close();\n+        closeEMF();\n     }\n     \n     /**\n@@ -188,16 +200,17 @@ public void testTitle() {\n         em.getTransaction().begin();\n         book = em.find(org.apache.openjpa.integration.validation.Book.class, 1);\n         assertNotNull(book);\n-        PathImpl path = PathImpl.createPathFromString(\"org.apache.openjpa.integration.validation.Book.title\");\n-        Path.Node node = path.getLeafNode();\n+        // PathImpl path = PathImpl.createPathFromString(\"org.apache.openjpa.integration.validation.Book.title\");\n+        // Path.Node node = path.getLeafNode();\n+        Path.Node node = getLeafNodeFromString(\"org.apache.openjpa.integration.validation.Book.title\");\n         TraversableResolver tr = new TraversableResolverImpl();\n         assertFalse(tr.isReachable(book, node, Book.class, null, ElementType.FIELD));\n         em.getTransaction().commit();\n-        em.close();\n-        emf.close();\n+        closeEMF();\n     }\n     \n     private void createBook(int id, String title, int pages) {\n+        createEMF(\"non-validation-pu\", \"SchemaAction='drop,add')\");\n         em = emf.createEntityManager();\n         book = new Book(id);\n         book.setTitle(title);\n@@ -209,6 +222,42 @@ private void createBook(int id, String title, int pages) {\n         em.getTransaction().begin();\n         em.persist(book);\n         em.getTransaction().commit();\n-        em.close();\n+        closeEMF();\n     }\n+\n+    private Path.Node getLeafNodeFromString(String s) {\n+        Class<?> PathImpl = null;\n+        Path.Node node = null;\n+\n+        // dynamically load PathImpl depending on the Bean Validation provider\n+        try {\n+            PathImpl = Class.forName(\"org.hibernate.validator.engine.PathImpl\",\n+                true, AccessController.doPrivileged(J2DoPrivHelper.getContextClassLoaderAction()));\n+        } catch (ClassNotFoundException e) {\n+            log.trace(\"getLeafNodeFromPath: Did not find org.hibernate.validator.engine.PathImpl\");\n+        }\n+        if (PathImpl == null) {\n+            try {\n+                PathImpl = Class.forName(\"com.agimatec.validation.jsr303.util.PathImpl\",\n+                    true, AccessController.doPrivileged(J2DoPrivHelper.getContextClassLoaderAction()));\n+            } catch (ClassNotFoundException e) {\n+                log.trace(\"getLeafNodeFromPath: Did not find com.agimatec.validation.jsr303.util.PathImpl\");\n+            }\n+        }\n+        assertNotNull(PathImpl);\n+        try {\n+            Method createPathFromString = PathImpl.getMethod(\"createPathFromString\", String.class);\n+            assertNotNull(createPathFromString);\n+            Method getLeafNode = PathImpl.getMethod(\"getLeafNode\");\n+            assertNotNull(getLeafNode);\n+            Object path = createPathFromString.invoke(null, s);\n+            node = (Path.Node) getLeafNode.invoke(path, null);\n+        } catch (NoSuchMethodException e) {\n+        } catch (IllegalAccessException ae) {\n+        } catch (java.lang.reflect.InvocationTargetException te) {\n+        }\n+        return node;\n+    }\n+\n }\n+"}]}

