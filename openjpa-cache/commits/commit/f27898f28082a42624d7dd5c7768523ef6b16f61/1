{"sha":"f27898f28082a42624d7dd5c7768523ef6b16f61","node_id":"MDY6Q29tbWl0MjA2MzY0OmYyNzg5OGYyODA4MmE0MjYyNGQ3ZGQ1Yzc3Njg1MjNlZjZiMTZmNjE=","commit":{"author":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-10-10T22:39:15Z"},"committer":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-10-10T22:39:15Z"},"message":"Take advantage StringUtils where appropriate.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@462617 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b5e2c4a5ee946f31dcc1354864658fab5b4aef1f","url":"https://api.github.com/repos/apache/openjpa/git/trees/b5e2c4a5ee946f31dcc1354864658fab5b4aef1f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/f27898f28082a42624d7dd5c7768523ef6b16f61","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/f27898f28082a42624d7dd5c7768523ef6b16f61","html_url":"https://github.com/apache/openjpa/commit/f27898f28082a42624d7dd5c7768523ef6b16f61","comments_url":"https://api.github.com/repos/apache/openjpa/commits/f27898f28082a42624d7dd5c7768523ef6b16f61/comments","author":null,"committer":null,"parents":[{"sha":"08d69d15a7f03fedfeb872caa9005b89c61560ff","url":"https://api.github.com/repos/apache/openjpa/commits/08d69d15a7f03fedfeb872caa9005b89c61560ff","html_url":"https://github.com/apache/openjpa/commit/08d69d15a7f03fedfeb872caa9005b89c61560ff"}],"stats":{"total":277,"additions":136,"deletions":141},"files":[{"sha":"44a26488805d9897aa83708cdbed9d8680048a04","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/ant/ReverseMappingToolTask.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/f27898f28082a42624d7dd5c7768523ef6b16f61/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/ant/ReverseMappingToolTask.java","raw_url":"https://github.com/apache/openjpa/raw/f27898f28082a42624d7dd5c7768523ef6b16f61/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/ant/ReverseMappingToolTask.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/ant/ReverseMappingToolTask.java?ref=f27898f28082a42624d7dd5c7768523ef6b16f61","patch":"@@ -19,7 +19,7 @@\n import java.io.FileInputStream;\n import java.util.Properties;\n \n-import org.apache.tools.ant.types.EnumeratedAttribute;\n+import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n import org.apache.openjpa.jdbc.conf.JDBCConfigurationImpl;\n import org.apache.openjpa.jdbc.meta.PropertiesReverseCustomizer;\n@@ -30,6 +30,7 @@\n import org.apache.openjpa.lib.conf.Configurations;\n import org.apache.openjpa.lib.util.CodeFormat;\n import org.apache.openjpa.lib.util.Files;\n+import org.apache.tools.ant.types.EnumeratedAttribute;\n \n /**\n  * Executes the {@link ReverseMappingTool} on the specified XML files.\n@@ -222,9 +223,9 @@ protected ConfigurationImpl newConfiguration() {\n     protected void executeOn(String[] files)\n         throws Exception {\n         ClassLoader loader = getClassLoader();\n-        if (dirName != null && dirName.length() > 0)\n+        if (!StringUtils.isEmpty(dirName))\n             flags.directory = Files.getFile(dirName, loader);\n-        if (typeMap != null && typeMap.length() > 0)\n+        if (!StringUtils.isEmpty(typeMap))\n             flags.typeMap = Configurations.parseProperties(typeMap);\n \n         // load customizer properties"},{"sha":"43c834e4696893f013ee77c0fc3f5223114caca0","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCConfigurationImpl.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/f27898f28082a42624d7dd5c7768523ef6b16f61/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/f27898f28082a42624d7dd5c7768523ef6b16f61/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCConfigurationImpl.java?ref=f27898f28082a42624d7dd5c7768523ef6b16f61","patch":"@@ -19,6 +19,7 @@\n import java.sql.ResultSet;\n import javax.sql.DataSource;\n \n+import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.conf.OpenJPAConfigurationImpl;\n import org.apache.openjpa.jdbc.kernel.EagerFetchModes;\n import org.apache.openjpa.jdbc.kernel.JDBCBrokerFactory;\n@@ -535,7 +536,7 @@ public DBDictionary getDBDictionaryInstance() {\n         if (dbdictionary == null) {\n             String clsName = dbdictionaryPlugin.getClassName();\n             String props = dbdictionaryPlugin.getProperties();\n-            if (clsName != null && clsName.length() > 0) {\n+            if (!StringUtils.isEmpty(clsName)) {\n                 dbdictionary = DBDictionaryFactory.newDBDictionary\n                     (this, clsName, props);\n             } else {\n@@ -754,7 +755,7 @@ public Object getConnectionFactory2() {\n                 // the driver name is always required, so if not specified,\n                 // then no connection factory 2\n                 String driver = getConnection2DriverName();\n-                if (driver != null && driver.length() > 0)\n+                if (!StringUtils.isEmpty(driver))\n                     ds = DataSourceFactory.newDataSource(this, true);\n             }\n             if (ds != null) {"},{"sha":"1055fcfd07b4635fcdf9dd880efc6ef25697dcf5","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/MappingFactoryValue.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/f27898f28082a42624d7dd5c7768523ef6b16f61/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/MappingFactoryValue.java","raw_url":"https://github.com/apache/openjpa/raw/f27898f28082a42624d7dd5c7768523ef6b16f61/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/MappingFactoryValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/MappingFactoryValue.java?ref=f27898f28082a42624d7dd5c7768523ef6b16f61","patch":"@@ -88,15 +88,15 @@ public MetaDataFactory instantiateMetaDataFactory(Configuration conf,\n         String metaProps = metaPlugin.getProperties();\n \n         // if no mapping factory set, check for default for this factory\n-        if (clsName == null || clsName.length() == 0) {\n+        if (StringUtils.isEmpty(clsName)) {\n             String def;\n             if (!StringUtils.isEmpty(mapping)) {\n                 def = unalias(metaPlugin.alias(metaClsName),\n                     _mappedMetaFactoryDefaults, true);\n                 if (def != null)\n                     clsName = unalias(def);\n             }\n-            if (clsName == null) {\n+            if (StringUtils.isEmpty(clsName)) {\n                 def = unalias(metaPlugin.alias(metaClsName),\n                     _metaFactoryDefaults, true);\n                 if (def != null)"},{"sha":"0abb8a9c06a7f83c7fe62ee16e0e0a04616b406a","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCBrokerFactory.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/f27898f28082a42624d7dd5c7768523ef6b16f61/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCBrokerFactory.java","raw_url":"https://github.com/apache/openjpa/raw/f27898f28082a42624d7dd5c7768523ef6b16f61/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCBrokerFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCBrokerFactory.java?ref=f27898f28082a42624d7dd5c7768523ef6b16f61","patch":"@@ -20,6 +20,7 @@\n import java.util.Iterator;\n import java.util.Properties;\n \n+import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n import org.apache.openjpa.jdbc.conf.JDBCConfigurationImpl;\n import org.apache.openjpa.jdbc.meta.MappingTool;\n@@ -138,7 +139,7 @@ protected BrokerImpl newBrokerImpl(String user, String pass) {\n     private void synchronizeMappings(ClassLoader loader) {\n         JDBCConfiguration conf = (JDBCConfiguration) getConfiguration();\n         String action = conf.getSynchronizeMappings();\n-        if (action == null || action.length() == 0)\n+        if (StringUtils.isEmpty(action))\n             return;\n \n         Collection classes = conf.getMetaDataRepositoryInstance()."},{"sha":"49d0f1ffc3ac3f79d7f5e1499482ba110275b5ec","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/SQLStoreQuery.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/f27898f28082a42624d7dd5c7768523ef6b16f61/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/SQLStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/f27898f28082a42624d7dd5c7768523ef6b16f61/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/SQLStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/SQLStoreQuery.java?ref=f27898f28082a42624d7dd5c7768523ef6b16f61","patch":"@@ -27,6 +27,7 @@\n import java.util.Iterator;\n import java.util.List;\n \n+import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.meta.MappingRepository;\n import org.apache.openjpa.jdbc.meta.QueryResultMapping;\n@@ -174,10 +175,8 @@ public SQLExecutor(SQLStoreQuery q, ClassMetaData candidate) {\n             }\n             _meta = candidate;\n \n-            String sql = ctx.getQueryString();\n-            if (sql != null)\n-                sql = sql.trim();\n-            if (sql == null || sql.length() == 0)\n+            String sql = StringUtils.trimToNull(ctx.getQueryString());\n+            if (sql == null)\n                 throw new UserException(_loc.get(\"no-sql\"));\n             _select = sql.length() > 6\n                 && sql.substring(0, 6).equalsIgnoreCase(\"select\");"},{"sha":"eb458896028a0aa4320a01b8ac68127dc6c9cc78","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/PropertiesReverseCustomizer.java","status":"modified","additions":2,"deletions":6,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/f27898f28082a42624d7dd5c7768523ef6b16f61/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/PropertiesReverseCustomizer.java","raw_url":"https://github.com/apache/openjpa/raw/f27898f28082a42624d7dd5c7768523ef6b16f61/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/PropertiesReverseCustomizer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/PropertiesReverseCustomizer.java?ref=f27898f28082a42624d7dd5c7768523ef6b16f61","patch":"@@ -19,6 +19,7 @@\n import java.util.Set;\n import java.util.TreeSet;\n \n+import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.jdbc.schema.ForeignKey;\n import org.apache.openjpa.jdbc.schema.Table;\n@@ -219,12 +220,7 @@ public void close() {\n      * Return the property value for the given key, or null if none.\n      */\n     protected String getProperty(String key) {\n-        String val = _props.getProperty(key);\n-        if (val != null) {\n-            val = val.trim();\n-            if (val.length() == 0)\n-                val = null;\n-        }\n+        String val = StringUtils.trimToNull(_props.getProperty(key));\n         _unaccessed.remove(key);\n         return val;\n     }"},{"sha":"bd0c4b1a4b34bbb97ef53ea2f844e5b74946f045","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/QueryResultMapping.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/f27898f28082a42624d7dd5c7768523ef6b16f61/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/QueryResultMapping.java","raw_url":"https://github.com/apache/openjpa/raw/f27898f28082a42624d7dd5c7768523ef6b16f61/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/QueryResultMapping.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/QueryResultMapping.java?ref=f27898f28082a42624d7dd5c7768523ef6b16f61","patch":"@@ -25,6 +25,7 @@\n import java.util.List;\n import java.util.Map;\n \n+import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.jdbc.sql.Joins;\n import org.apache.openjpa.lib.meta.SourceTracker;\n@@ -284,7 +285,7 @@ public Object getMapping(String path) {\n          * Map the given path to the given result id.\n          */\n         public void addMapping(String path, Object id) {\n-            if (path == null || path.length() == 0)\n+            if (StringUtils.isEmpty(path))\n                 throw new MetaDataException(_loc.get(\"null-path\",\n                     QueryResultMapping.this, _candidate));\n "},{"sha":"2581d1be631b777110ccfbc3983c3c11f2454f99","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ReverseMappingTool.java","status":"modified","additions":6,"deletions":12,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/f27898f28082a42624d7dd5c7768523ef6b16f61/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ReverseMappingTool.java","raw_url":"https://github.com/apache/openjpa/raw/f27898f28082a42624d7dd5c7768523ef6b16f61/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ReverseMappingTool.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ReverseMappingTool.java?ref=f27898f28082a42624d7dd5c7768523ef6b16f61","patch":"@@ -236,9 +236,7 @@ public String getPackageName() {\n      * indicate no package.\n      */\n     public void setPackageName(String packageName) {\n-        if (packageName != null && packageName.length() == 0)\n-            packageName = null;\n-        _package = packageName;\n+        _package = StringUtils.trimToNull(packageName);\n     }\n \n     /**\n@@ -1470,7 +1468,7 @@ private static boolean allUpperCase(String str) {\n      * package-private for testing.\n      */\n     static String replaceInvalidCharacters(String str) {\n-        if (str == null || str.length() == 0)\n+        if (StringUtils.isEmpty(str))\n             return str;\n \n         StringBuffer buf = new StringBuffer(str);\n@@ -1542,14 +1540,10 @@ public Class getFieldType(Column col, boolean forceObject) {\n                 if (propNames[nameIdx] == null)\n                     continue;\n \n-                typeSpec = _typeMap.getProperty(propNames[nameIdx]);\n-                if (typeSpec != null) {\n-                    typeSpec = typeSpec.trim();\n-                    if (typeSpec.length() == 0)\n-                        typeSpec = null;\n-                    else\n-                        typeName = propNames[nameIdx];\n-                }\n+                typeSpec = StringUtils.trimToNull(_typeMap.getProperty\n+                    (propNames[nameIdx]));\n+                if (typeSpec != null) \n+                    typeName = propNames[nameIdx];\n             }\n             if (typeSpec != null)\n                 _log.info(_loc.get(\"reverse-type\", typeName, typeSpec));"},{"sha":"f21bb246c1991b52cbf7089cc2f8b0b4b62db1e0","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ClassNameDiscriminatorStrategy.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/f27898f28082a42624d7dd5c7768523ef6b16f61/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ClassNameDiscriminatorStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/f27898f28082a42624d7dd5c7768523ef6b16f61/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ClassNameDiscriminatorStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ClassNameDiscriminatorStrategy.java?ref=f27898f28082a42624d7dd5c7768523ef6b16f61","patch":"@@ -20,6 +20,7 @@\n import java.sql.ResultSet;\n import java.sql.SQLException;\n \n+import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.schema.Column;\n@@ -88,7 +89,7 @@ public void loadSubclasses(JDBCStore store)\n             String className;\n             while (rs.next()) {\n                 className = dict.getString(rs, 1);\n-                if (className == null || className.length() == 0)\n+                if (StringUtils.isEmpty(className))\n                     throw new ClassNotFoundException(_loc.get(\"no-class-name\",\n                         disc.getClassMapping(), col).getMessage());\n                 Class.forName(className, true, loader);"},{"sha":"98e52078d8a7306d3af0eae889a57a80e23d93fc","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Column.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/f27898f28082a42624d7dd5c7768523ef6b16f61/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Column.java","raw_url":"https://github.com/apache/openjpa/raw/f27898f28082a42624d7dd5c7768523ef6b16f61/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Column.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Column.java?ref=f27898f28082a42624d7dd5c7768523ef6b16f61","patch":"@@ -23,6 +23,7 @@\n import java.sql.Timestamp;\n import java.sql.Types;\n \n+import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.jdbc.meta.JavaSQLTypes;\n import org.apache.openjpa.meta.JavaTypes;\n import serp.util.Numbers;\n@@ -461,9 +462,7 @@ public String getTarget() {\n      * The name of the column this column joins to, if any. Used for mapping.\n      */\n     public void setTarget(String target) {\n-        if (target != null && target.length() == 0)\n-            target = null;\n-        _target = target;\n+        _target = StringUtils.trimToNull(target);\n     }\n \n     /**"},{"sha":"731399b26fa8c8a54aa7bcbdd984df79a5cac4cc","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/DataSourceFactory.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/f27898f28082a42624d7dd5c7768523ef6b16f61/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/DataSourceFactory.java","raw_url":"https://github.com/apache/openjpa/raw/f27898f28082a42624d7dd5c7768523ef6b16f61/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/DataSourceFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/DataSourceFactory.java?ref=f27898f28082a42624d7dd5c7768523ef6b16f61","patch":"@@ -24,6 +24,7 @@\n import java.util.List;\n import javax.sql.DataSource;\n \n+import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n import org.apache.openjpa.jdbc.sql.DBDictionary;\n import org.apache.openjpa.lib.conf.Configurations;\n@@ -62,7 +63,7 @@ public static DataSource newDataSource(JDBCConfiguration conf,\n         boolean factory2) {\n         String driver = (factory2) ? conf.getConnection2DriverName()\n             : conf.getConnectionDriverName();\n-        if (driver == null || driver.length() == 0)\n+        if (StringUtils.isEmpty(driver))\n             throw new UserException(_loc.get(\"no-driver\", driver)).\n                 setFatal(true);\n "},{"sha":"4c76af11e7de73c80abec1f94a5bf0dc04b87935","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/NameSet.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/f27898f28082a42624d7dd5c7768523ef6b16f61/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/NameSet.java","raw_url":"https://github.com/apache/openjpa/raw/f27898f28082a42624d7dd5c7768523ef6b16f61/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/NameSet.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/NameSet.java?ref=f27898f28082a42624d7dd5c7768523ef6b16f61","patch":"@@ -18,6 +18,7 @@\n import java.util.HashSet;\n import java.util.Set;\n \n+import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.lib.util.Localizer;\n \n /**\n@@ -49,7 +50,7 @@ public boolean isNameTaken(String name) {\n      * @param validate if true, null or empty names will not be accepted\n      */\n     protected void addName(String name, boolean validate) {\n-        if (name == null || name.length() == 0) {\n+        if (StringUtils.isEmpty(name)) {\n             if (validate)\n                 throw new IllegalArgumentException(_loc.get(\"bad-name\", name)\n                     .getMessage());"},{"sha":"ec519af1bedc9cc44f934fb93abfa632cc09cee4","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Schema.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/f27898f28082a42624d7dd5c7768523ef6b16f61/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Schema.java","raw_url":"https://github.com/apache/openjpa/raw/f27898f28082a42624d7dd5c7768523ef6b16f61/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Schema.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Schema.java?ref=f27898f28082a42624d7dd5c7768523ef6b16f61","patch":"@@ -18,6 +18,8 @@\n import java.util.Map;\n import java.util.TreeMap;\n \n+import org.apache.commons.lang.StringUtils;\n+\n /**\n  * Represents a database schema.\n  *\n@@ -87,9 +89,7 @@ public String getName() {\n     public void setName(String name) {\n         if (getSchemaGroup() != null)\n             throw new IllegalStateException();\n-        if (name != null && name.length() == 0)\n-            name = null;\n-        _name = name;\n+        _name = StringUtils.trimToNull(name);\n     }\n \n     /**"},{"sha":"45731e335b860aee6379b8415e1f5ceb3658375f","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaGenerator.java","status":"modified","additions":7,"deletions":17,"changes":24,"blob_url":"https://github.com/apache/openjpa/blob/f27898f28082a42624d7dd5c7768523ef6b16f61/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaGenerator.java","raw_url":"https://github.com/apache/openjpa/raw/f27898f28082a42624d7dd5c7768523ef6b16f61/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaGenerator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaGenerator.java?ref=f27898f28082a42624d7dd5c7768523ef6b16f61","patch":"@@ -486,9 +486,7 @@ public void generateTables(String schemaName, String tableName,\n         String tableSchema;\n         for (int i = 0; cols != null && i < cols.length; i++) {\n             tableName = cols[i].getTableName();\n-            tableSchema = cols[i].getSchemaName();\n-            if (tableSchema != null && tableSchema.length() == 0)\n-                tableSchema = null;\n+            tableSchema = StringUtils.trimToNull(cols[i].getSchemaName());\n \n             // ignore special tables\n             if (!_openjpaTables &&\n@@ -600,9 +598,7 @@ public void generatePrimaryKeys(String schemaName, String tableName,\n         String name;\n         String colName;\n         for (int i = 0; pks != null && i < pks.length; i++) {\n-            schemaName = pks[i].getSchemaName();\n-            if (schemaName != null && schemaName.length() == 0)\n-                schemaName = null;\n+            schemaName = StringUtils.trimToNull(pks[i].getSchemaName());\n             schema = group.getSchema(schemaName);\n             if (schema == null)\n                 continue;\n@@ -659,9 +655,7 @@ public void generateIndexes(String schemaName, String tableName,\n         String colName;\n         String pkName;\n         for (int i = 0; idxs != null && i < idxs.length; i++) {\n-            schemaName = idxs[i].getSchemaName();\n-            if (schemaName != null && schemaName.length() == 0)\n-                schemaName = null;\n+            schemaName = StringUtils.trimToNull(idxs[i].getSchemaName());\n             schema = group.getSchema(schemaName);\n             if (schema == null)\n                 continue;\n@@ -676,7 +670,7 @@ public void generateIndexes(String schemaName, String tableName,\n \n             // statistics don't have names; skip them\n             name = idxs[i].getName();\n-            if (name == null || name.length() == 0\n+            if (StringUtils.isEmpty(name)\n                 || (pkName != null && name.equalsIgnoreCase(pkName))\n                 || _dict.isSystemIndex(name, table))\n                 continue;\n@@ -741,9 +735,7 @@ public void generateForeignKeys(String schemaName, String tableName,\n         boolean seqWas0 = false; // some drivers incorrectly start at 0\n         Collection invalids = null;\n         for (int i = 0; fks != null && i < fks.length; i++) {\n-            schemaName = fks[i].getSchemaName();\n-            if (schemaName != null && schemaName.length() == 0)\n-                schemaName = null;\n+            schemaName = StringUtils.trimToNull(fks[i].getSchemaName());\n             schema = group.getSchema(schemaName);\n             if (schema == null)\n                 continue;\n@@ -767,7 +759,7 @@ public void generateForeignKeys(String schemaName, String tableName,\n                 _log.trace(_loc.get(\"gen-fk\", new Object[]{ name, table,\n                     fkColName, pkTableName, pkColName, seq + \"\" }));\n \n-            if (pkSchemaName != null && pkSchemaName.length() > 0)\n+            if (!StringUtils.isEmpty(pkSchemaName))\n                 pkTableName = pkSchemaName + \".\" + pkTableName;\n             pkTable = group.findTable(pkTableName);\n             if (pkTable == null)\n@@ -832,9 +824,7 @@ public void generateSequences(String schemaName, String sequenceName,\n         String sequenceSchema;\n         for (int i = 0; seqs != null && i < seqs.length; i++) {\n             sequenceName = seqs[i].getName();\n-            sequenceSchema = seqs[i].getSchemaName();\n-            if (sequenceSchema != null && sequenceSchema.length() == 0)\n-                sequenceSchema = null;\n+            sequenceSchema = StringUtils.trimToNull(seqs[i].getSchemaName());\n \n             // ignore special tables\n             if (!_openjpaTables &&"},{"sha":"cb1bece76c10625a487180d0113a04cf317f1f6c","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaTool.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/f27898f28082a42624d7dd5c7768523ef6b16f61/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaTool.java","raw_url":"https://github.com/apache/openjpa/raw/f27898f28082a42624d7dd5c7768523ef6b16f61/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaTool.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaTool.java?ref=f27898f28082a42624d7dd5c7768523ef6b16f61","patch":"@@ -31,6 +31,7 @@\n import java.util.Set;\n import javax.sql.DataSource;\n \n+import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n import org.apache.openjpa.jdbc.conf.JDBCConfigurationImpl;\n@@ -1424,7 +1425,7 @@ public static boolean run(JDBCConfiguration conf, String[] args,\n             gen.setOpenJPATables(flags.openjpaTables);\n \n             String schemas = conf.getSchemas();\n-            if (schemas == null || schemas.length() == 0)\n+            if (StringUtils.isEmpty(schemas))\n                 schemas = \"all\";\n             log.info(_loc.get(\"sch-reflect\", schemas));\n             gen.generateSchemas();"},{"sha":"f8a761bdbe1baec0e1462fd4607a9dbb32adba1d","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/XMLSchemaSerializer.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/f27898f28082a42624d7dd5c7768523ef6b16f61/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/XMLSchemaSerializer.java","raw_url":"https://github.com/apache/openjpa/raw/f27898f28082a42624d7dd5c7768523ef6b16f61/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/XMLSchemaSerializer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/XMLSchemaSerializer.java?ref=f27898f28082a42624d7dd5c7768523ef6b16f61","patch":"@@ -24,10 +24,11 @@\n import java.util.Map;\n import java.util.TreeSet;\n \n-import org.xml.sax.SAXException;\n+import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n import org.apache.openjpa.lib.meta.XMLMetaDataSerializer;\n import org.apache.openjpa.lib.util.Localizer;\n+import org.xml.sax.SAXException;\n \n /**\n  * Serializes {@link Schema}s to XML matching the document\n@@ -261,7 +262,7 @@ private void serializeColumn(Column col)\n         throws SAXException {\n         addAttribute(\"name\", col.getName());\n         addAttribute(\"type\", Schemas.getJDBCName(col.getType()));\n-        if (col.getTypeName() != null && col.getTypeName().length() > 0\n+        if (!StringUtils.isEmpty(col.getTypeName())\n             && !col.getTypeName().equalsIgnoreCase\n             (Schemas.getJDBCName(col.getType())))\n             addAttribute(\"type-name\", col.getTypeName());"},{"sha":"adb36a0037b5fed8645f29fd054c1d1ca1f6730e","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","status":"modified","additions":8,"deletions":11,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/f27898f28082a42624d7dd5c7768523ef6b16f61/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/f27898f28082a42624d7dd5c7768523ef6b16f61/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java?ref=f27898f28082a42624d7dd5c7768523ef6b16f61","patch":"@@ -56,6 +56,7 @@\n import java.util.Set;\n import javax.sql.DataSource;\n \n+import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n@@ -535,9 +536,7 @@ public char getChar(ResultSet rs, int column)\n             return (char) getInt(rs, column);\n \n         String str = getString(rs, column);\n-        if (str == null || str.length() == 0)\n-            return 0;\n-        return str.charAt(0);\n+        return (StringUtils.isEmpty(str)) ? 0 : str.charAt(0);\n     }\n \n     /**\n@@ -642,7 +641,7 @@ public int getInt(ResultSet rs, int column)\n     public Locale getLocale(ResultSet rs, int column)\n         throws SQLException {\n         String str = getString(rs, column);\n-        if (str == null || str.length() == 0)\n+        if (StringUtils.isEmpty(str))\n             return null;\n \n         String[] params = Strings.split(str, \"_\", 3);\n@@ -1488,7 +1487,7 @@ public int getPreferredType(int type) {\n      * from {@link Types}.\n      */\n     public String getTypeName(Column col) {\n-        if (col.getTypeName() != null && col.getTypeName().length() > 0)\n+        if (!StringUtils.isEmpty(col.getTypeName()))\n             return appendSize(col, col.getTypeName());\n \n         if (col.isAutoAssigned() && autoAssignTypeName != null)\n@@ -1623,7 +1622,7 @@ else if (\"traditional\".equals(syntax))\n             joinSyntax = SYNTAX_TRADITIONAL;\n         else if (\"database\".equals(syntax))\n             joinSyntax = SYNTAX_DATABASE;\n-        else if (syntax != null && syntax.length() > 0)\n+        else if (!StringUtils.isEmpty(syntax))\n             throw new IllegalArgumentException(syntax);\n     }\n \n@@ -3252,8 +3251,7 @@ protected Column newColumn(ResultSet colMeta)\n             == DatabaseMetaData.columnNoNulls);\n \n         String def = colMeta.getString(\"COLUMN_DEF\");\n-        if (def != null && def.length() > 0\n-            && !\"null\".equalsIgnoreCase(def))\n+        if (!StringUtils.isEmpty(def) && !\"null\".equalsIgnoreCase(def))\n             c.setDefaultString(def);\n         return c;\n     }\n@@ -3661,8 +3659,7 @@ public void endConfiguration() {\n \n         // if user has unset sequence sql, null it out so we know sequences\n         // aren't supported\n-        if (nextSequenceQuery != null && nextSequenceQuery.length() == 0)\n-            nextSequenceQuery = null;\n+        nextSequenceQuery = StringUtils.trimToNull(nextSequenceQuery);\n     }\n \n     //////////////////////////////////////\n@@ -3679,7 +3676,7 @@ public Connection decorate(Connection conn)\n         throws SQLException {\n         if (!connected)\n             connectedConfiguration(conn);\n-        if (initializationSQL != null && initializationSQL.length() > 0) {\n+        if (!StringUtils.isEmpty(initializationSQL)) {\n             PreparedStatement stmnt = null;\n             try {\n                 stmnt = conn.prepareStatement(initializationSQL);"},{"sha":"fe8fba121ece38d6bc9bb9198e5caf7204883904","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionaryFactory.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/f27898f28082a42624d7dd5c7768523ef6b16f61/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionaryFactory.java","raw_url":"https://github.com/apache/openjpa/raw/f27898f28082a42624d7dd5c7768523ef6b16f61/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionaryFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionaryFactory.java?ref=f27898f28082a42624d7dd5c7768523ef6b16f61","patch":"@@ -20,6 +20,7 @@\n import java.sql.SQLException;\n import javax.sql.DataSource;\n \n+import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n import org.apache.openjpa.lib.conf.Configurations;\n import org.apache.openjpa.lib.log.Log;\n@@ -158,7 +159,7 @@ private static DBDictionary newDBDictionary(JDBCConfiguration conf,\n      * Guess the dictionary class name to use based on the product string.\n      */\n     private static String dictionaryClassForString(String prod) {\n-        if (prod == null || prod.length() == 0)\n+        if (StringUtils.isEmpty(prod))\n             return null;\n         prod = prod.toLowerCase();\n "},{"sha":"8bca34a370829a501575406ae4ea0dfc1b690813","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/HSQLDictionary.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/f27898f28082a42624d7dd5c7768523ef6b16f61/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/HSQLDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/f27898f28082a42624d7dd5c7768523ef6b16f61/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/HSQLDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/HSQLDictionary.java?ref=f27898f28082a42624d7dd5c7768523ef6b16f61","patch":"@@ -23,6 +23,7 @@\n import java.sql.Types;\n import java.util.Arrays;\n \n+import org.apache.commons.lang.StringUtils;\n import org.hsqldb.Trace;\n import org.apache.openjpa.jdbc.kernel.exps.FilterValue;\n import org.apache.openjpa.jdbc.schema.Column;\n@@ -147,7 +148,7 @@ public int getPreferredType(int type) {\n         String pkStr;\n         if (pk != null) {\n             pkStr = getPrimaryKeyConstraintSQL(pk);\n-            if (pkStr != null && pkStr.length() > 0)\n+            if (!StringUtils.isEmpty(pkStr))\n                 buf.append(\", \").append(pkStr);\n         }\n "},{"sha":"82d79940117eb62bb692fef5898e07f09c8d96cb","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MySQLDictionary.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/f27898f28082a42624d7dd5c7768523ef6b16f61/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MySQLDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/f27898f28082a42624d7dd5c7768523ef6b16f61/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MySQLDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MySQLDictionary.java?ref=f27898f28082a42624d7dd5c7768523ef6b16f61","patch":"@@ -20,6 +20,7 @@\n import java.sql.Types;\n import java.util.Arrays;\n \n+import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.jdbc.schema.ForeignKey;\n@@ -95,7 +96,7 @@ public MySQLDictionary() {\n \n     public String[] getCreateTableSQL(Table table) {\n         String[] sql = super.getCreateTableSQL(table);\n-        if (tableType != null && tableType.length() > 0)\n+        if (!StringUtils.isEmpty(tableType))\n             sql[0] = sql[0] + \" TYPE = \" + tableType;\n         return sql;\n     }"},{"sha":"1c58426ed6987c1e2ee35c02af84bf9ca092884e","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/f27898f28082a42624d7dd5c7768523ef6b16f61/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","raw_url":"https://github.com/apache/openjpa/raw/f27898f28082a42624d7dd5c7768523ef6b16f61/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java?ref=f27898f28082a42624d7dd5c7768523ef6b16f61","patch":"@@ -36,6 +36,7 @@\n import java.util.TreeMap;\n \n import org.apache.commons.collections.iterators.EmptyIterator;\n+import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n import org.apache.openjpa.jdbc.kernel.EagerFetchModes;\n import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n@@ -1264,7 +1265,7 @@ public void where(String sql, Joins joins) {\n      */\n     private void where(String sql, PathJoins pj) {\n         // no need to use joins...\n-        if (sql == null || sql.length() == 0)\n+        if (StringUtils.isEmpty(sql))\n             return;\n \n         if (_where == null)\n@@ -1310,7 +1311,7 @@ public void having(String sql, Joins joins) {\n      */\n     private void having(String sql, PathJoins pj) {\n         // no need to use joins...\n-        if (sql == null || sql.length() == 0)\n+        if (StringUtils.isEmpty(sql))\n             return;\n \n         if (_having == null)"},{"sha":"09ae9fcfa9abf4e324e8b87b56b46ccf95d8b9e6","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SybaseDictionary.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/f27898f28082a42624d7dd5c7768523ef6b16f61/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SybaseDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/f27898f28082a42624d7dd5c7768523ef6b16f61/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SybaseDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SybaseDictionary.java?ref=f27898f28082a42624d7dd5c7768523ef6b16f61","patch":"@@ -23,6 +23,7 @@\n import java.sql.Types;\n import java.util.Arrays;\n \n+import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.jdbc.schema.ForeignKey;\n import org.apache.openjpa.jdbc.schema.PrimaryKey;\n@@ -242,7 +243,7 @@ public void endConfiguration() {\n \n         // warn about jdbc compliant flag\n         String url = conf.getConnectionURL();\n-        if (url != null && url.length() > 0\n+        if (!StringUtils.isEmpty(url)\n             && url.toLowerCase().indexOf(\"jdbc:sybase:tds\") != -1\n             && url.toLowerCase().indexOf(\"be_as_jdbc_compliant_as_possible=\")\n             == -1) {"},{"sha":"281df74087d0c678e76ae68074e4bde410900750","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/f27898f28082a42624d7dd5c7768523ef6b16f61/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/f27898f28082a42624d7dd5c7768523ef6b16f61/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java?ref=f27898f28082a42624d7dd5c7768523ef6b16f61","patch":"@@ -22,6 +22,7 @@\n import java.util.List;\n import java.util.Set;\n \n+import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.datacache.ConcurrentDataCache;\n import org.apache.openjpa.datacache.ConcurrentQueryCache;\n import org.apache.openjpa.datacache.DataCacheManager;\n@@ -937,9 +938,9 @@ public Object getConnectionFactory() {\n      * Lookup the connection factory at the given name.\n      */\n     private Object lookupConnectionFactory(String name) {\n-        if (name == null || name.trim().length() == 0)\n+        name = StringUtils.trimToNull(name);\n+        if (name == null)\n             return null;\n-\n         return Configurations.lookup(name);\n     }\n "},{"sha":"f58c280fc06d45c0e2fd00d0783c2e9ae23d52c8","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAVersion.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/f27898f28082a42624d7dd5c7768523ef6b16f61/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAVersion.java","raw_url":"https://github.com/apache/openjpa/raw/f27898f28082a42624d7dd5c7768523ef6b16f61/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAVersion.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAVersion.java?ref=f27898f28082a42624d7dd5c7768523ef6b16f61","patch":"@@ -21,6 +21,8 @@\n import java.util.Properties;\n import java.util.StringTokenizer;\n \n+import org.apache.commons.lang.StringUtils;\n+\n /**\n  * This class contains version information for OpenJPA. It uses\n  * Ant's filter tokens to convert the template into a java\n@@ -42,7 +44,7 @@\n     static {\n         Package pack = OpenJPAVersion.class.getPackage();\n         String vers = pack == null ? null : pack.getImplementationVersion();\n-        if (vers == null || vers.length() == 0)\n+        if (StringUtils.isEmpty(vers))\n             vers = \"0.0.0\";\n         VERSION_NUMBER = vers;\n "},{"sha":"95bf5733bf6537d40486c7e6973744e4c1d0334c","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/RemoteCommitProviderValue.java","status":"modified","additions":5,"deletions":7,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/f27898f28082a42624d7dd5c7768523ef6b16f61/openjpa-kernel/src/main/java/org/apache/openjpa/conf/RemoteCommitProviderValue.java","raw_url":"https://github.com/apache/openjpa/raw/f27898f28082a42624d7dd5c7768523ef6b16f61/openjpa-kernel/src/main/java/org/apache/openjpa/conf/RemoteCommitProviderValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/RemoteCommitProviderValue.java?ref=f27898f28082a42624d7dd5c7768523ef6b16f61","patch":"@@ -15,6 +15,7 @@\n  */\n package org.apache.openjpa.conf;\n \n+import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.event.RemoteCommitEventManager;\n import org.apache.openjpa.event.RemoteCommitProvider;\n import org.apache.openjpa.lib.conf.Configuration;\n@@ -128,12 +129,9 @@ private void parseOptions() {\n             return;\n \n         _opts = Configurations.parseProperties(getProperties());\n-        String transmit = _opts.removeProperty(\"transmitPersistedObjectIds\",\n-            \"TransmitPersistedObjectIds\", null);\n-        if (transmit != null) {\n-            transmit = transmit.trim();\n-            if (transmit.length() > 0)\n-                _transmitPersIds = Boolean.valueOf (transmit);\n-\t\t}\n+        String transmit = StringUtils.trimToNull(_opts.removeProperty\n+            (\"transmitPersistedObjectIds\", \"TransmitPersistedObjectIds\", null));\n+        if (transmit != null)\n+            _transmitPersIds = Boolean.valueOf (transmit);\n \t}\n }"},{"sha":"794314bce01f621f216512686975ba70c0b06e1d","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/MethodStoreQuery.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/f27898f28082a42624d7dd5c7768523ef6b16f61/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/MethodStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/f27898f28082a42624d7dd5c7768523ef6b16f61/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/MethodStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/MethodStoreQuery.java?ref=f27898f28082a42624d7dd5c7768523ef6b16f61","patch":"@@ -27,6 +27,7 @@\n import java.util.Map;\n \n import org.apache.commons.collections.map.LinkedMap;\n+import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.lib.rop.ListResultObjectProvider;\n import org.apache.openjpa.lib.rop.RangeResultObjectProvider;\n import org.apache.openjpa.lib.rop.ResultObjectProvider;\n@@ -217,7 +218,7 @@ public void validate(StoreQuery q) {\n                 return;\n \n             String methName = q.getContext().getQueryString();\n-            if (methName == null || methName.length() == 0)\n+            if (StringUtils.isEmpty(methName))\n                 throw new UserException(_loc.get(\"no-method\"));\n \n             int dotIdx = methName.lastIndexOf('.');"},{"sha":"644976fb2d6ce8129616957b5e8283c7f1455049","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java","status":"modified","additions":3,"deletions":6,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/f27898f28082a42624d7dd5c7768523ef6b16f61/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/f27898f28082a42624d7dd5c7768523ef6b16f61/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java?ref=f27898f28082a42624d7dd5c7768523ef6b16f61","patch":"@@ -26,6 +26,7 @@\n import java.util.Map;\n \n import org.apache.commons.collections.map.LinkedMap;\n+import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.enhance.PersistenceCapable;\n import org.apache.openjpa.kernel.exps.AggregateListener;\n@@ -540,11 +541,7 @@ public void declareParameters(String params) {\n         try {\n             assertOpen();\n             assertNotReadOnly();\n-            if (params != null)\n-                params = params.trim();\n-            if (params != null && params.length() == 0)\n-                params = null;\n-            _params = params;\n+            _params = StringUtils.trimToNull(params);\n             invalidateCompilation();\n         } finally {\n             unlock();\n@@ -1110,7 +1107,7 @@ private void logExecution(int op, LinkedMap types, Object[] params) {\n      */\n     private void logExecution(int op, Map params) {\n         String s = _query;\n-        if (s == null || s.length() == 0)\n+        if (StringUtils.isEmpty(s))\n             s = toString();\n \n         String msg = \"executing-query\";"},{"sha":"ed9bcd22bda9c710439ef84f8f4e9bf81e26a0d0","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ResultPacker.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/f27898f28082a42624d7dd5c7768523ef6b16f61/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ResultPacker.java","raw_url":"https://github.com/apache/openjpa/raw/f27898f28082a42624d7dd5c7768523ef6b16f61/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ResultPacker.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ResultPacker.java?ref=f27898f28082a42624d7dd5c7768523ef6b16f61","patch":"@@ -30,6 +30,7 @@\n import java.util.Map;\n import java.util.Set;\n \n+import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.util.OpenJPAException;\n import org.apache.openjpa.util.UserException;\n@@ -257,7 +258,7 @@ private Object packUserType(Object[] result) {\n      */\n     private static Member findSet(String alias, Class type, Field[] fields,\n         Method[] methods) {\n-        if (alias == null || alias.length() == 0)\n+        if (StringUtils.isEmpty(alias))\n             return null;\n         if (type == Object.class)\n             type = null;"},{"sha":"de572f5b74e700bfb032acadee5f7ee6b2166d37","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractCFMetaDataFactory.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/f27898f28082a42624d7dd5c7768523ef6b16f61/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractCFMetaDataFactory.java","raw_url":"https://github.com/apache/openjpa/raw/f27898f28082a42624d7dd5c7768523ef6b16f61/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractCFMetaDataFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractCFMetaDataFactory.java?ref=f27898f28082a42624d7dd5c7768523ef6b16f61","patch":"@@ -31,6 +31,7 @@\n import java.util.zip.ZipFile;\n import java.util.zip.ZipInputStream;\n \n+import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.lib.meta.ClassArgParser;\n import org.apache.openjpa.lib.meta.ClasspathMetaDataIterator;\n import org.apache.openjpa.lib.meta.FileMetaDataIterator;\n@@ -80,7 +81,7 @@ public void setFiles(Collection files) {\n      * directories supplied by user via auto-configuration.\n      */\n     public void setFiles(String files) {\n-        if (files == null || files.length() == 0)\n+        if (StringUtils.isEmpty(files))\n             this.files = null;\n         else {\n             String[] strs = Strings.split(files, \";\", 0);\n@@ -107,7 +108,7 @@ public void setURLs(Collection urls) {\n      * supplied by user via auto-configuration.\n      */\n     public void setURLs(String urls) {\n-        if (urls == null || urls.length() == 0)\n+        if (StringUtils.isEmpty(urls))\n             this.urls = null;\n         else {\n             String[] strs = Strings.split(urls, \";\", 0);\n@@ -134,7 +135,7 @@ public void setResources(Collection rsrcs) {\n      */\n     public void setResources(String rsrcs) {\n         // keep list mutable so subclasses can add implicit locations\n-        this.rsrcs = (rsrcs == null || rsrcs.length() == 0) ? null\n+        this.rsrcs = (StringUtils.isEmpty(rsrcs)) ? null\n             : new ArrayList(Arrays.asList(Strings.split(rsrcs, \";\", 0)));\n     }\n \n@@ -152,7 +153,7 @@ public void setClasspathScan(Collection cpath) {\n      */\n     public void setClasspathScan(String cpath) {\n         // keep list mutable so subclasses can add implicit locations\n-        this.cpath = (cpath == null || cpath.length() == 0) ? null\n+        this.cpath = (StringUtils.isEmpty(cpath)) ? null\n             : new ArrayList(Arrays.asList(Strings.split(cpath, \";\", 0)));\n     }\n "},{"sha":"548d5474b3feaf0c722c7c2a5537755c9a7195cc","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractMetaDataFactory.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/f27898f28082a42624d7dd5c7768523ef6b16f61/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractMetaDataFactory.java","raw_url":"https://github.com/apache/openjpa/raw/f27898f28082a42624d7dd5c7768523ef6b16f61/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractMetaDataFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractMetaDataFactory.java?ref=f27898f28082a42624d7dd5c7768523ef6b16f61","patch":"@@ -22,6 +22,7 @@\n import java.util.Map;\n import java.util.Set;\n \n+import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.lib.meta.ClassArgParser;\n@@ -55,7 +56,7 @@ public void setTypes(Set types) {\n      * auto-configuration.\n      */\n     public void setTypes(String types) {\n-        this.types = (types == null || types.length() == 0) ? null\n+        this.types = (StringUtils.isEmpty(types)) ? null\n             : new HashSet(Arrays.asList(Strings.split(types, \";\", 0)));\n     }\n "},{"sha":"73cfd67cd3131699983f537574235722e563a37b","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java","status":"modified","additions":2,"deletions":7,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/f27898f28082a42624d7dd5c7768523ef6b16f61/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/f27898f28082a42624d7dd5c7768523ef6b16f61/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java?ref=f27898f28082a42624d7dd5c7768523ef6b16f61","patch":"@@ -1036,12 +1036,7 @@ public String getOrderDeclaration() {\n      * the field's elements.\n      */\n     public void setOrderDeclaration(String dec) {\n-        if (dec != null) {\n-            dec = dec.trim();\n-            if (dec.length() == 0)\n-                dec = null;\n-        }\n-        _orderDec = dec;\n+        _orderDec = StringUtils.trimToNull(dec);\n         _orders = null;\n     }\n \n@@ -1398,7 +1393,7 @@ public Member getFactoryMethod() {\n      * @return the method for invocation\n      */\n     private Method findMethod(String method) {\n-        if (method == null || method.length() == 0)\n+        if (StringUtils.isEmpty(method))\n             return null;\n \n         // get class name and get package name divide on the last '.', so the"},{"sha":"af91487373ba567eeec986b8144111511dfef1ce","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/QueryMetaData.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/f27898f28082a42624d7dd5c7768523ef6b16f61/openjpa-kernel/src/main/java/org/apache/openjpa/meta/QueryMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/f27898f28082a42624d7dd5c7768523ef6b16f61/openjpa-kernel/src/main/java/org/apache/openjpa/meta/QueryMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/QueryMetaData.java?ref=f27898f28082a42624d7dd5c7768523ef6b16f61","patch":"@@ -19,6 +19,7 @@\n import java.util.LinkedList;\n import java.util.List;\n \n+import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.kernel.Query;\n import org.apache.openjpa.lib.meta.SourceTracker;\n import org.apache.openjpa.lib.xml.Commentable;\n@@ -185,7 +186,7 @@ public void addHint(String key, Object value) {\n     public void setInto(Query query) {\n         if (_candidate != null)\n             query.setCandidateType(_candidate, true);\n-        if (_query != null && _query.length() > 0)\n+        if (!StringUtils.isEmpty(_query))\n             query.setQuery(_query);\n         if (_res != null)\n             query.setResultType(_res);"},{"sha":"c7de67e1356d5fb4b8ca3088eff8356276535f1e","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java","status":"modified","additions":9,"deletions":10,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/f27898f28082a42624d7dd5c7768523ef6b16f61/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java","raw_url":"https://github.com/apache/openjpa/raw/f27898f28082a42624d7dd5c7768523ef6b16f61/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java?ref=f27898f28082a42624d7dd5c7768523ef6b16f61","patch":"@@ -30,6 +30,7 @@\n import javax.naming.InitialContext;\n import javax.naming.NamingException;\n \n+import org.apache.commons.lang.StringUtils;\n import org.apache.commons.lang.exception.NestableRuntimeException;\n import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.lib.util.JavaVersions;\n@@ -71,7 +72,7 @@ public static String getProperties(String plugin) {\n     private static String getPluginComponent(String plugin, boolean clsName) {\n         if (plugin != null)\n             plugin = plugin.trim();\n-        if (plugin == null || plugin.length() == 0)\n+        if (StringUtils.isEmpty(plugin))\n             return null;\n \n         int openParen = -1;\n@@ -96,9 +97,9 @@ private static String getPluginComponent(String plugin, boolean clsName) {\n      * Combine the given class name and properties into a plugin string.\n      */\n     public static String getPlugin(String clsName, String props) {\n-        if (clsName == null || clsName.length() == 0)\n+        if (StringUtils.isEmpty(clsName))\n             return props;\n-        if (props == null || props.length() == 0)\n+        if (StringUtils.isEmpty(props))\n             return clsName;\n         return clsName + \"(\" + props + \")\";\n     }\n@@ -129,7 +130,7 @@ public static Object newInstance(String clsName, Configuration conf,\n      */\n     static Object newInstance(String clsName, Value val, Configuration conf,\n         ClassLoader loader, boolean fatal) {\n-        if (clsName == null || clsName.length() == 0)\n+        if (StringUtils.isEmpty(clsName))\n             return null;\n         if (loader == null && conf != null)\n             loader = conf.getClass().getClassLoader();\n@@ -173,7 +174,7 @@ static Object newInstance(String clsName, Value val, Configuration conf,\n     public static void populateConfiguration(Configuration conf, Options opts) {\n         String props = opts.removeProperty(\"properties\", \"p\", null);\n         ConfigurationProvider provider;\n-        if (props != null && props.length() > 0) {\n+        if (!StringUtils.isEmpty(props)) {\n             String path = props;\n             String anchor = null;\n             int idx = path.lastIndexOf('#');\n@@ -279,7 +280,7 @@ public static void configureInstance(Object obj, Configuration conf,\n             return;\n \n         Properties props = null;\n-        if (properties != null && properties.length() > 0)\n+        if (!StringUtils.isEmpty(properties))\n             props = parseProperties(properties);\n         configureInstance(obj, conf, props, configurationName);\n     }\n@@ -388,11 +389,9 @@ public static String serializeProperties(Map map) {\n      */\n     public static Options parseProperties(String properties) {\n         Options opts = new Options();\n+        properties = StringUtils.trimToNull(properties);\n         if (properties == null)\n             return opts;\n-        properties = properties.trim();\n-        if (properties.length() == 0)\n-            return opts;\n \n         try {\n             String[] props = Strings.split(properties, \",\", 0);\n@@ -453,7 +452,7 @@ else if (val.startsWith(\"\\\"\") || val.startsWith(\"'\")) {\n      * Looks up the given name in JNDI. If the name is null, null is returned.\n      */\n     public static Object lookup(String name) {\n-        if (name == null || name.length() == 0)\n+        if (StringUtils.isEmpty(name))\n             return null;\n \n         Context ctx = null;"},{"sha":"6e8d0efb1ae8faaebaf1afbd1598ea1116b5b93c","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/DoubleValue.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/f27898f28082a42624d7dd5c7768523ef6b16f61/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/DoubleValue.java","raw_url":"https://github.com/apache/openjpa/raw/f27898f28082a42624d7dd5c7768523ef6b16f61/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/DoubleValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/DoubleValue.java?ref=f27898f28082a42624d7dd5c7768523ef6b16f61","patch":"@@ -15,6 +15,8 @@\n  */\n package org.apache.openjpa.lib.conf;\n \n+import org.apache.commons.lang.StringUtils;\n+\n /**\n  * A double {@link Value}.\n  *\n@@ -54,7 +56,7 @@ protected String getInternalString() {\n     }\n \n     protected void setInternalString(String val) {\n-        if (val == null || val.length() == 0)\n+        if (StringUtils.isEmpty(val))\n             set(0D);\n         else\n             set(Double.parseDouble(val));"},{"sha":"1fedbcfa54b160b92c21951a0718864b4c7ea558","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/IntValue.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/f27898f28082a42624d7dd5c7768523ef6b16f61/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/IntValue.java","raw_url":"https://github.com/apache/openjpa/raw/f27898f28082a42624d7dd5c7768523ef6b16f61/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/IntValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/IntValue.java?ref=f27898f28082a42624d7dd5c7768523ef6b16f61","patch":"@@ -15,6 +15,8 @@\n  */\n package org.apache.openjpa.lib.conf;\n \n+import org.apache.commons.lang.StringUtils;\n+\n /**\n  * An int {@link Value}.\n  *\n@@ -54,7 +56,7 @@ protected String getInternalString() {\n     }\n \n     protected void setInternalString(String val) {\n-        if (val == null || val.length() == 0)\n+        if (StringUtils.isEmpty(val))\n             set(0);\n         else\n             set(Integer.parseInt(val));"},{"sha":"88700386fcb81dd605fe7fae935db30276e38a30","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/PluginListValue.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/f27898f28082a42624d7dd5c7768523ef6b16f61/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/PluginListValue.java","raw_url":"https://github.com/apache/openjpa/raw/f27898f28082a42624d7dd5c7768523ef6b16f61/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/PluginListValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/PluginListValue.java?ref=f27898f28082a42624d7dd5c7768523ef6b16f61","patch":"@@ -19,6 +19,8 @@\n import java.util.ArrayList;\n import java.util.List;\n \n+import org.apache.commons.lang.StringUtils;\n+\n /**\n  * A list of plugins. Defaults and aliases on plugin lists apply only\n  * to individual class names.\n@@ -117,9 +119,9 @@ public String getString() {\n      * properties string.\n      */\n     public void setString(String str) {\n-        if (str == null || str.length() == 0)\n+        if (StringUtils.isEmpty(str))\n             str = getDefault();\n-        if (str == null || str.length() == 0) {\n+        if (StringUtils.isEmpty(str)) {\n             _names = EMPTY;\n             _props = EMPTY;\n             set(null, true);"},{"sha":"20e3a4d1e12d33eaf1e48979c360cabff7728a59","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ProductDerivations.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/f27898f28082a42624d7dd5c7768523ef6b16f61/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ProductDerivations.java","raw_url":"https://github.com/apache/openjpa/raw/f27898f28082a42624d7dd5c7768523ef6b16f61/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ProductDerivations.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ProductDerivations.java?ref=f27898f28082a42624d7dd5c7768523ef6b16f61","patch":"@@ -22,6 +22,7 @@\n import java.util.List;\n import java.util.MissingResourceException;\n \n+import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.lib.util.Services;\n \n@@ -148,7 +149,7 @@ public static void afterSpecificationSet(Configuration conf) {\n      */\n     public static ConfigurationProvider load(String resource, String anchor, \n         ClassLoader loader) {\n-        if (resource == null || resource.length() == 0)\n+        if (StringUtils.isEmpty(resource))\n             return null;\n         if (loader == null)\n             loader = Thread.currentThread().getContextClassLoader();"},{"sha":"4e7292a7727a6d3d3731f89f70df1c1405b8bdd4","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/log/LogOutputStream.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/f27898f28082a42624d7dd5c7768523ef6b16f61/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/LogOutputStream.java","raw_url":"https://github.com/apache/openjpa/raw/f27898f28082a42624d7dd5c7768523ef6b16f61/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/LogOutputStream.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/LogOutputStream.java?ref=f27898f28082a42624d7dd5c7768523ef6b16f61","patch":"@@ -48,9 +48,12 @@ public LogOutputStream(Log log, int level) {\n \n     public void flush() throws IOException {\n         super.flush();\n+        byte[] bytes = toByteArray();\n+        if (bytes.length == 0)\n+            return;\n \n-        String msg = new String(toByteArray());\n-        if (msg != null && msg.length() > 0 && msg.indexOf(_sep) != -1) {\n+        String msg = new String(bytes);\n+        if (msg.indexOf(_sep) != -1) {\n             // break up the message based on the line separator; this\n             // may be because the flushed buffer contains mutliple lines\n             for (StringTokenizer tok = new StringTokenizer(msg, _sep);"},{"sha":"6a1ec4c2a14b5177f96cce230415e7ed6cc06682","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/CFMetaDataParser.java","status":"modified","additions":6,"deletions":7,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/f27898f28082a42624d7dd5c7768523ef6b16f61/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/CFMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/f27898f28082a42624d7dd5c7768523ef6b16f61/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/CFMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/CFMetaDataParser.java?ref=f27898f28082a42624d7dd5c7768523ef6b16f61","patch":"@@ -15,9 +15,10 @@\n  */\n package org.apache.openjpa.lib.meta;\n \n+import org.apache.commons.lang.StringUtils;\n+import org.apache.openjpa.lib.util.Localizer;\n import org.xml.sax.Attributes;\n import org.xml.sax.SAXException;\n-import org.apache.openjpa.lib.util.Localizer;\n import serp.util.Strings;\n \n /**\n@@ -173,8 +174,7 @@ protected boolean startClass(String elem, Attributes attrs)\n         throws SAXException {\n         if (getClassAttributeName() != null) {\n             _class = attrs.getValue(getClassAttributeName());\n-            if (_package != null && _package.length() > 0\n-                && _class.indexOf('.') == -1)\n+            if (!StringUtils.isEmpty(_package) && _class.indexOf('.') == -1)\n                 _class = _package + \".\" + _class;\n         }\n         return true;\n@@ -188,8 +188,7 @@ protected void endClass(String elem) throws SAXException {\n             _class = null;\n         else {\n             _class = currentText();\n-            if (_package != null && _package.length() > 0\n-                && _class.indexOf('.') == -1)\n+            if (!StringUtils.isEmpty(_package) && _class.indexOf('.') == -1)\n                 _class = _package + \".\" + _class;\n         }\n     }\n@@ -289,13 +288,13 @@ protected Class classForName(String name, boolean resolve)\n      */\n     public static Class classForName(String name, String pkg,\n         boolean resolve, ClassLoader loader) {\n-        if (name == null || name.length() == 0)\n+        if (StringUtils.isEmpty(name))\n             return null;\n \n         if (loader == null)\n             loader = Thread.currentThread().getContextClassLoader();\n         boolean fullName = name.indexOf('.') != -1;\n-        boolean noPackage = pkg == null || pkg.length() == 0;\n+        boolean noPackage = StringUtils.isEmpty(pkg);\n         try {\n             if (fullName || noPackage)\n                 return Strings.toClass(name, resolve, loader);"},{"sha":"e38a697325419cc2d4e7be9f5873856b2bf19beb","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClassArgParser.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/f27898f28082a42624d7dd5c7768523ef6b16f61/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClassArgParser.java","raw_url":"https://github.com/apache/openjpa/raw/f27898f28082a42624d7dd5c7768523ef6b16f61/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClassArgParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClassArgParser.java?ref=f27898f28082a42624d7dd5c7768523ef6b16f61","patch":"@@ -31,6 +31,7 @@\n import java.util.List;\n import java.util.Map;\n \n+import org.apache.commons.lang.StringUtils;\n import org.apache.commons.lang.exception.NestableRuntimeException;\n import org.apache.openjpa.lib.util.Files;\n import org.apache.openjpa.lib.util.Localizer;\n@@ -354,10 +355,7 @@ private String getFromJavaFile(File file) throws IOException {\n             return clsName;\n         } finally {\n             if (in != null)\n-                try {\n-                    in.close();\n-                } catch (IOException ioe) {\n-                }\n+                try { in.close(); } catch (IOException ioe) {}\n         }\n     }\n "},{"sha":"2e3f5e23bf91c8d8a64dcaf0bfa99c2aff8d133c","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Files.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/f27898f28082a42624d7dd5c7768523ef6b16f61/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Files.java","raw_url":"https://github.com/apache/openjpa/raw/f27898f28082a42624d7dd5c7768523ef6b16f61/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Files.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Files.java?ref=f27898f28082a42624d7dd5c7768523ef6b16f61","patch":"@@ -28,6 +28,7 @@\n import java.net.URL;\n import java.net.URLDecoder;\n \n+import org.apache.commons.lang.StringUtils;\n import org.apache.commons.lang.exception.NestableRuntimeException;\n import serp.util.Strings;\n \n@@ -134,7 +135,7 @@ private static File getClassFile(Class cls, String ext) {\n     public static File getPackageFile(File base, String pkg, boolean mkdirs) {\n         if (base == null)\n             base = new File(System.getProperty(\"user.dir\"));\n-        if (pkg == null || pkg.length() == 0) {\n+        if (StringUtils.isEmpty(pkg)) {\n             if (mkdirs && !base.exists())\n                 base.mkdirs();\n             return base;"},{"sha":"000101c55f822c3dbe5d5cf70836d2391142a095","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Options.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/f27898f28082a42624d7dd5c7768523ef6b16f61/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Options.java","raw_url":"https://github.com/apache/openjpa/raw/f27898f28082a42624d7dd5c7768523ef6b16f61/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Options.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Options.java?ref=f27898f28082a42624d7dd5c7768523ef6b16f61","patch":"@@ -103,7 +103,7 @@ public Options(Properties defaults) {\n             if (i == args.length || args[i].startsWith(\"-\")) {\n                 key = trimQuote(key);\n                 if (key != null) {\n-                    if (value != null && value.length() > 0)\n+                    if (!StringUtils.isEmpty(value))\n                         setProperty(key, trimQuote(value));\n                     else\n                         setProperty(key, \"true\");\n@@ -291,7 +291,7 @@ public static Collection findOptionsFor(Class type) {\n      */\n     private static boolean matchOptionToMember(String key, Object[] match)\n         throws Exception {\n-        if (key == null || key.length() == 0)\n+        if (StringUtils.isEmpty(key))\n             return false;\n \n         // unfortunately we can't use bean properties for setters; any"},{"sha":"6a9da83ccd2f635e1bba943d28a2e1793eac1097","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/f27898f28082a42624d7dd5c7768523ef6b16f61/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/f27898f28082a42624d7dd5c7768523ef6b16f61/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java?ref=f27898f28082a42624d7dd5c7768523ef6b16f61","patch":"@@ -29,6 +29,7 @@\n import javax.resource.cci.LocalTransaction;\n import javax.resource.cci.ResultSetInfo;\n \n+import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.ee.ManagedRuntime;\n import org.apache.openjpa.kernel.Broker;\n@@ -729,7 +730,7 @@ public OpenJPAQuery createNativeQuery(String query, String mappingName) {\n      * Validate that the user provided SQL.\n      */\n     private static void validateSQL(String query) {\n-        if (query == null || query.trim().length() == 0)\n+        if (StringUtils.trimToNull(query) == null)\n             throw new ArgumentException(_loc.get(\"no-sql\"), null, null, false);\n     }\n "},{"sha":"e836e5398a73eaadae10460e1d3d7df9dbc4f511","filename":"openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/XMLFileHandler.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/f27898f28082a42624d7dd5c7768523ef6b16f61/openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/XMLFileHandler.java","raw_url":"https://github.com/apache/openjpa/raw/f27898f28082a42624d7dd5c7768523ef6b16f61/openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/XMLFileHandler.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/XMLFileHandler.java?ref=f27898f28082a42624d7dd5c7768523ef6b16f61","patch":"@@ -520,7 +520,7 @@ public Object fromXMLString(int type, ClassMetaData rel, String str)\n \n                 case JavaTypes.OBJECT:\n                 case JavaTypes.OID:\n-                    // convert the characters into bytes, and run them through an\n+                    // convert the chars into bytes, and run them through an \n                     // ObjectInputStream in order to get the serialized object\n                     byte[] bytes = Base16Encoder.decode(str);\n                     ByteArrayInputStream bais = new ByteArrayInputStream(bytes);"}]}

